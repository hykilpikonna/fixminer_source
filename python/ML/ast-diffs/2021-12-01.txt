UPD IfStatement@@if (!DownloaderHelper.alreadyOnClasspath(camelContext,gav.getArtifactId())) {  DownloaderHelper.downloadDependency(camelContext,gav.getGroupId(),gav.getArtifactId(),gav.getVersion());} @TO@ if (!DownloaderHelper.alreadyOnClasspath(camelContext,gav.getArtifactId(),gav.getVersion())) {  DownloaderHelper.downloadDependency(camelContext,gav.getGroupId(),gav.getArtifactId(),gav.getVersion());} @AT@ 1294 @LENGTH@ 228
---UPD PrefixExpression@@!DownloaderHelper.alreadyOnClasspath(camelContext,gav.getArtifactId()) @TO@ !DownloaderHelper.alreadyOnClasspath(camelContext,gav.getArtifactId(),gav.getVersion()) @AT@ 1298 @LENGTH@ 71
------UPD MethodInvocation@@DownloaderHelper.alreadyOnClasspath(camelContext,gav.getArtifactId()) @TO@ DownloaderHelper.alreadyOnClasspath(camelContext,gav.getArtifactId(),gav.getVersion()) @AT@ 1299 @LENGTH@ 70
---------UPD SimpleName@@MethodName:alreadyOnClasspath:[camelContext, gav.getArtifactId()] @TO@ MethodName:alreadyOnClasspath:[camelContext, gav.getArtifactId(), gav.getVersion()] @AT@ 1316 @LENGTH@ 53
------------INS MethodInvocation@@gav.getVersion() @TO@ SimpleName@@MethodName:alreadyOnClasspath:[camelContext, gav.getArtifactId()] @AT@ 1370 @LENGTH@ 16
---------------INS SimpleName@@Name:gav @TO@ MethodInvocation@@gav.getVersion() @AT@ 1370 @LENGTH@ 3
---------------INS SimpleName@@MethodName:getVersion:[] @TO@ MethodInvocation@@gav.getVersion() @AT@ 1374 @LENGTH@ 12


UPD MethodDeclaration@@public, CommandExecutionHandlerMethodArgumentResolvers, MethodName:commandExecutionHandlerMethodArgumentResolvers,  @TO@ public, CommandExecutionHandlerMethodArgumentResolvers, MethodName:commandExecutionHandlerMethodArgumentResolvers, @Qualifier("shellConversionService") ConversionService shellConversionService,  @AT@ 1149 @LENGTH@ 554
---INS SingleVariableDeclaration@@@Qualifier("shellConversionService") ConversionService shellConversionService @TO@ MethodDeclaration@@public, CommandExecutionHandlerMethodArgumentResolvers, MethodName:commandExecutionHandlerMethodArgumentResolvers,  @AT@ 1302 @LENGTH@ 77
------INS SimpleType@@ConversionService @TO@ SingleVariableDeclaration@@@Qualifier("shellConversionService") ConversionService shellConversionService @AT@ 1339 @LENGTH@ 17
------INS SimpleName@@shellConversionService @TO@ SingleVariableDeclaration@@@Qualifier("shellConversionService") ConversionService shellConversionService @AT@ 1357 @LENGTH@ 22
---UPD ExpressionStatement@@MethodInvocation:resolvers.add(new ArgumentHeaderMethodArgumentResolver(new DefaultConversionService(),null)) @TO@ MethodInvocation:resolvers.add(new ArgumentHeaderMethodArgumentResolver(shellConversionService,null)) @AT@ 1325 @LENGTH@ 94
------UPD MethodInvocation@@resolvers.add(new ArgumentHeaderMethodArgumentResolver(new DefaultConversionService(),null)) @TO@ resolvers.add(new ArgumentHeaderMethodArgumentResolver(shellConversionService,null)) @AT@ 1325 @LENGTH@ 93
---------UPD SimpleName@@MethodName:add:[new ArgumentHeaderMethodArgumentResolver(new DefaultConversionService(),null)] @TO@ MethodName:add:[new ArgumentHeaderMethodArgumentResolver(shellConversionService,null)] @AT@ 1335 @LENGTH@ 83
------------UPD ClassInstanceCreation@@ArgumentHeaderMethodArgumentResolver[new DefaultConversionService(), null] @TO@ ArgumentHeaderMethodArgumentResolver[shellConversionService, null] @AT@ 1339 @LENGTH@ 78
---------------DEL ClassInstanceCreation@@DefaultConversionService[] @AT@ 1380 @LENGTH@ 30
------------------DEL New@@new @AT@ 1380 @LENGTH@ 3
------------------DEL SimpleType@@DefaultConversionService @AT@ 1384 @LENGTH@ 24
---------------INS SimpleName@@shellConversionService @TO@ ClassInstanceCreation@@ArgumentHeaderMethodArgumentResolver[new DefaultConversionService(), null] @AT@ 1509 @LENGTH@ 22
---UPD ExpressionStatement@@MethodInvocation:resolvers.add(new ShellOptionMethodArgumentResolver(new DefaultConversionService(),null)) @TO@ MethodInvocation:resolvers.add(new ShellOptionMethodArgumentResolver(shellConversionService,null)) @AT@ 1537 @LENGTH@ 91
------UPD MethodInvocation@@resolvers.add(new ShellOptionMethodArgumentResolver(new DefaultConversionService(),null)) @TO@ resolvers.add(new ShellOptionMethodArgumentResolver(shellConversionService,null)) @AT@ 1537 @LENGTH@ 90
---------UPD SimpleName@@MethodName:add:[new ShellOptionMethodArgumentResolver(new DefaultConversionService(),null)] @TO@ MethodName:add:[new ShellOptionMethodArgumentResolver(shellConversionService,null)] @AT@ 1547 @LENGTH@ 80
------------UPD ClassInstanceCreation@@ShellOptionMethodArgumentResolver[new DefaultConversionService(), null] @TO@ ShellOptionMethodArgumentResolver[shellConversionService, null] @AT@ 1551 @LENGTH@ 75
---------------DEL ClassInstanceCreation@@DefaultConversionService[] @AT@ 1589 @LENGTH@ 30
------------------DEL New@@new @AT@ 1589 @LENGTH@ 3
------------------DEL SimpleType@@DefaultConversionService @AT@ 1593 @LENGTH@ 24
---------------INS SimpleName@@shellConversionService @TO@ ClassInstanceCreation@@ShellOptionMethodArgumentResolver[new DefaultConversionService(), null] @AT@ 1710 @LENGTH@ 22


UPD VariableDeclarationStatement@@final ResponseBase<BlobDownloadHeaders,Void> mockedResults2=new ResponseBase<>(null,200,new HttpHeaders().put("x-test-header","123"),null,new BlobDownloadHeaders().setETag("tag1")); @TO@ final ResponseBase<BlobDownloadHeaders,Void> mockedResults2=new ResponseBase<>(null,200,new HttpHeaders().set("x-test-header","123"),null,new BlobDownloadHeaders().setETag("tag1")); @AT@ 4571 @LENGTH@ 206
---UPD VariableDeclarationFragment@@mockedResults2=new ResponseBase<>(null,200,new HttpHeaders().put("x-test-header","123"),null,new BlobDownloadHeaders().setETag("tag1")) @TO@ mockedResults2=new ResponseBase<>(null,200,new HttpHeaders().set("x-test-header","123"),null,new BlobDownloadHeaders().setETag("tag1")) @AT@ 4617 @LENGTH@ 159
------UPD ClassInstanceCreation@@ResponseBase<>[null, 200, new HttpHeaders().put("x-test-header","123"), null, new BlobDownloadHeaders().setETag("tag1")] @TO@ ResponseBase<>[null, 200, new HttpHeaders().set("x-test-header","123"), null, new BlobDownloadHeaders().setETag("tag1")] @AT@ 4634 @LENGTH@ 142
---------UPD MethodInvocation@@new HttpHeaders().put("x-test-header","123") @TO@ new HttpHeaders().set("x-test-header","123") @AT@ 4681 @LENGTH@ 45
------------UPD SimpleName@@MethodName:put:["x-test-header", "123"] @TO@ MethodName:set:["x-test-header", "123"] @AT@ 4699 @LENGTH@ 27


UPD TryStatement@@try {  final E apiName=getApiName(apiNameStr);  final T endpointConfiguration=createEndpointConfiguration(apiName);  final Endpoint endpoint=createEndpoint(uri,methodName,apiName,endpointConfiguration);  setProperties(endpoint,parameters);  return endpoint;} catch (InvocationTargetException e) {  if (e.getCause() instanceof IllegalArgumentException) {    throw new CamelException("Invalid URI path prefix [" + remaining + "], must be one of "+ collection.getApiNames());  }  throw e;} @TO@ try {  final E apiName=getApiName(apiNameStr);  final T endpointConfiguration=createEndpointConfiguration(apiName);  final Endpoint endpoint=createEndpoint(uri,methodName,apiName,endpointConfiguration);  setProperties(endpoint,parameters);  afterPropertiesSet(endpointConfiguration);  return endpoint;} catch (InvocationTargetException e) {  if (e.getCause() instanceof IllegalArgumentException) {    throw new CamelException("Invalid URI path prefix [" + remaining + "], must be one of "+ collection.getApiNames());  }  throw e;} @AT@ 3204 @LENGTH@ 799
---INS ExpressionStatement@@MethodInvocation:afterPropertiesSet(endpointConfiguration) @TO@ TryStatement@@try {  final E apiName=getApiName(apiNameStr);  final T endpointConfiguration=createEndpointConfiguration(apiName);  final Endpoint endpoint=createEndpoint(uri,methodName,apiName,endpointConfiguration);  setProperties(endpoint,parameters);  return endpoint;} catch (InvocationTargetException e) {  if (e.getCause() instanceof IllegalArgumentException) {    throw new CamelException("Invalid URI path prefix [" + remaining + "], must be one of "+ collection.getApiNames());  }  throw e;} @AT@ 3627 @LENGTH@ 42
------INS MethodInvocation@@afterPropertiesSet(endpointConfiguration) @TO@ ExpressionStatement@@MethodInvocation:afterPropertiesSet(endpointConfiguration) @AT@ 3627 @LENGTH@ 41
---------INS SimpleName@@MethodName:afterPropertiesSet:[endpointConfiguration] @TO@ MethodInvocation@@afterPropertiesSet(endpointConfiguration) @AT@ 3627 @LENGTH@ 41
------------INS SimpleName@@endpointConfiguration @TO@ SimpleName@@MethodName:afterPropertiesSet:[endpointConfiguration] @AT@ 3646 @LENGTH@ 21


UPD ExpressionStatement@@Assignment:env=CamelContextHelper.findByType(getCamelContext(),KnativeEnvironment.class) @TO@ Assignment:env=CamelContextHelper.findSingleByType(getCamelContext(),KnativeEnvironment.class) @AT@ 8813 @LENGTH@ 81
---UPD Assignment@@env=CamelContextHelper.findByType(getCamelContext(),KnativeEnvironment.class) @TO@ env=CamelContextHelper.findSingleByType(getCamelContext(),KnativeEnvironment.class) @AT@ 8813 @LENGTH@ 80
------UPD MethodInvocation@@CamelContextHelper.findByType(getCamelContext(),KnativeEnvironment.class) @TO@ CamelContextHelper.findSingleByType(getCamelContext(),KnativeEnvironment.class) @AT@ 8819 @LENGTH@ 74
---------UPD SimpleName@@MethodName:findByType:[getCamelContext(), KnativeEnvironment.class] @TO@ MethodName:findSingleByType:[getCamelContext(), KnativeEnvironment.class] @AT@ 8838 @LENGTH@ 55


INS MethodDeclaration@@void, MethodName:countQueryUsesCorrectVariable,  @TO@ TypeDeclaration@@QueryUtilsUnitTests,  @AT@ 24245 @LENGTH@ 1121
---INS PrimitiveType@@void @TO@ MethodDeclaration@@void, MethodName:countQueryUsesCorrectVariable,  @AT@ 24240 @LENGTH@ 4
---INS SimpleName@@MethodName:countQueryUsesCorrectVariable @TO@ MethodDeclaration@@void, MethodName:countQueryUsesCorrectVariable,  @AT@ 24245 @LENGTH@ 29
---INS VariableDeclarationStatement@@String countQueryFor=createCountQueryFor("SELECT * FROM User WHERE created_at > $1"); @TO@ MethodDeclaration@@void, MethodName:countQueryUsesCorrectVariable,  @AT@ 24281 @LENGTH@ 87
------INS SimpleType@@String @TO@ VariableDeclarationStatement@@String countQueryFor=createCountQueryFor("SELECT * FROM User WHERE created_at > $1"); @AT@ 24281 @LENGTH@ 6
------INS VariableDeclarationFragment@@countQueryFor=createCountQueryFor("SELECT * FROM User WHERE created_at > $1") @TO@ VariableDeclarationStatement@@String countQueryFor=createCountQueryFor("SELECT * FROM User WHERE created_at > $1"); @AT@ 24288 @LENGTH@ 79
---------INS SimpleName@@countQueryFor @TO@ VariableDeclarationFragment@@countQueryFor=createCountQueryFor("SELECT * FROM User WHERE created_at > $1") @AT@ 24288 @LENGTH@ 13
---------INS MethodInvocation@@createCountQueryFor("SELECT * FROM User WHERE created_at > $1") @TO@ VariableDeclarationFragment@@countQueryFor=createCountQueryFor("SELECT * FROM User WHERE created_at > $1") @AT@ 24304 @LENGTH@ 63
------------INS SimpleName@@MethodName:createCountQueryFor:["SELECT * FROM User WHERE created_at > $1"] @TO@ MethodInvocation@@createCountQueryFor("SELECT * FROM User WHERE created_at > $1") @AT@ 24304 @LENGTH@ 63
---------------INS StringLiteral@@"SELECT * FROM User WHERE created_at > $1" @TO@ SimpleName@@MethodName:createCountQueryFor:["SELECT * FROM User WHERE created_at > $1"] @AT@ 24324 @LENGTH@ 42
---INS ExpressionStatement@@MethodInvocation:assertThat(countQueryFor).isEqualTo("select count(*) FROM User WHERE created_at > $1") @TO@ MethodDeclaration@@void, MethodName:countQueryUsesCorrectVariable,  @AT@ 24371 @LENGTH@ 87
------INS MethodInvocation@@assertThat(countQueryFor).isEqualTo("select count(*) FROM User WHERE created_at > $1") @TO@ ExpressionStatement@@MethodInvocation:assertThat(countQueryFor).isEqualTo("select count(*) FROM User WHERE created_at > $1") @AT@ 24371 @LENGTH@ 86
---------INS MethodInvocation@@MethodName:assertThat:[countQueryFor] @TO@ MethodInvocation@@assertThat(countQueryFor).isEqualTo("select count(*) FROM User WHERE created_at > $1") @AT@ 24371 @LENGTH@ 25
------------INS SimpleName@@countQueryFor @TO@ MethodInvocation@@MethodName:assertThat:[countQueryFor] @AT@ 24382 @LENGTH@ 13
---------INS SimpleName@@MethodName:isEqualTo:["select count(*) FROM User WHERE created_at > $1"] @TO@ MethodInvocation@@assertThat(countQueryFor).isEqualTo("select count(*) FROM User WHERE created_at > $1") @AT@ 24397 @LENGTH@ 60
------------INS StringLiteral@@"select count(*) FROM User WHERE created_at > $1" @TO@ SimpleName@@MethodName:isEqualTo:["select count(*) FROM User WHERE created_at > $1"] @AT@ 24407 @LENGTH@ 49
---INS ExpressionStatement@@Assignment:countQueryFor=createCountQueryFor("SELECT * FROM mytable WHERE nr = :number AND kon = :kon AND datum >= '2019-01-01'") @TO@ MethodDeclaration@@void, MethodName:countQueryUsesCorrectVariable,  @AT@ 24462 @LENGTH@ 121
------INS Assignment@@countQueryFor=createCountQueryFor("SELECT * FROM mytable WHERE nr = :number AND kon = :kon AND datum >= '2019-01-01'") @TO@ ExpressionStatement@@Assignment:countQueryFor=createCountQueryFor("SELECT * FROM mytable WHERE nr = :number AND kon = :kon AND datum >= '2019-01-01'") @AT@ 24462 @LENGTH@ 120
---------INS SimpleName@@countQueryFor @TO@ Assignment@@countQueryFor=createCountQueryFor("SELECT * FROM mytable WHERE nr = :number AND kon = :kon AND datum >= '2019-01-01'") @AT@ 24462 @LENGTH@ 13
---------INS Operator@@= @TO@ Assignment@@countQueryFor=createCountQueryFor("SELECT * FROM mytable WHERE nr = :number AND kon = :kon AND datum >= '2019-01-01'") @AT@ 24475 @LENGTH@ 1
---------INS MethodInvocation@@createCountQueryFor("SELECT * FROM mytable WHERE nr = :number AND kon = :kon AND datum >= '2019-01-01'") @TO@ Assignment@@countQueryFor=createCountQueryFor("SELECT * FROM mytable WHERE nr = :number AND kon = :kon AND datum >= '2019-01-01'") @AT@ 24478 @LENGTH@ 104
------------INS SimpleName@@MethodName:createCountQueryFor:["SELECT * FROM mytable WHERE nr = :number AND kon = :kon AND datum >= '2019-01-01'"] @TO@ MethodInvocation@@createCountQueryFor("SELECT * FROM mytable WHERE nr = :number AND kon = :kon AND datum >= '2019-01-01'") @AT@ 24478 @LENGTH@ 104
---------------INS StringLiteral@@"SELECT * FROM mytable WHERE nr = :number AND kon = :kon AND datum >= '2019-01-01'" @TO@ SimpleName@@MethodName:createCountQueryFor:["SELECT * FROM mytable WHERE nr = :number AND kon = :kon AND datum >= '2019-01-01'"] @AT@ 24498 @LENGTH@ 83
---INS ExpressionStatement@@MethodInvocation:assertThat(countQueryFor).isEqualTo("select count(*) FROM mytable WHERE nr = :number AND kon = :kon AND datum >= '2019-01-01'") @TO@ MethodDeclaration@@void, MethodName:countQueryUsesCorrectVariable,  @AT@ 24586 @LENGTH@ 128
------INS MethodInvocation@@assertThat(countQueryFor).isEqualTo("select count(*) FROM mytable WHERE nr = :number AND kon = :kon AND datum >= '2019-01-01'") @TO@ ExpressionStatement@@MethodInvocation:assertThat(countQueryFor).isEqualTo("select count(*) FROM mytable WHERE nr = :number AND kon = :kon AND datum >= '2019-01-01'") @AT@ 24586 @LENGTH@ 127
---------INS MethodInvocation@@MethodName:assertThat:[countQueryFor] @TO@ MethodInvocation@@assertThat(countQueryFor).isEqualTo("select count(*) FROM mytable WHERE nr = :number AND kon = :kon AND datum >= '2019-01-01'") @AT@ 24586 @LENGTH@ 25
------------INS SimpleName@@countQueryFor @TO@ MethodInvocation@@MethodName:assertThat:[countQueryFor] @AT@ 24597 @LENGTH@ 13
---------INS SimpleName@@MethodName:isEqualTo:["select count(*) FROM mytable WHERE nr = :number AND kon = :kon AND datum >= '2019-01-01'"] @TO@ MethodInvocation@@assertThat(countQueryFor).isEqualTo("select count(*) FROM mytable WHERE nr = :number AND kon = :kon AND datum >= '2019-01-01'") @AT@ 24612 @LENGTH@ 101
------------INS StringLiteral@@"select count(*) FROM mytable WHERE nr = :number AND kon = :kon AND datum >= '2019-01-01'" @TO@ SimpleName@@MethodName:isEqualTo:["select count(*) FROM mytable WHERE nr = :number AND kon = :kon AND datum >= '2019-01-01'"] @AT@ 24622 @LENGTH@ 90
---INS ExpressionStatement@@Assignment:countQueryFor=createCountQueryFor("SELECT * FROM context ORDER BY time") @TO@ MethodDeclaration@@void, MethodName:countQueryUsesCorrectVariable,  @AT@ 24718 @LENGTH@ 75
------INS Assignment@@countQueryFor=createCountQueryFor("SELECT * FROM context ORDER BY time") @TO@ ExpressionStatement@@Assignment:countQueryFor=createCountQueryFor("SELECT * FROM context ORDER BY time") @AT@ 24718 @LENGTH@ 74
---------INS SimpleName@@countQueryFor @TO@ Assignment@@countQueryFor=createCountQueryFor("SELECT * FROM context ORDER BY time") @AT@ 24718 @LENGTH@ 13
---------INS Operator@@= @TO@ Assignment@@countQueryFor=createCountQueryFor("SELECT * FROM context ORDER BY time") @AT@ 24731 @LENGTH@ 1
---------INS MethodInvocation@@createCountQueryFor("SELECT * FROM context ORDER BY time") @TO@ Assignment@@countQueryFor=createCountQueryFor("SELECT * FROM context ORDER BY time") @AT@ 24734 @LENGTH@ 58
------------INS SimpleName@@MethodName:createCountQueryFor:["SELECT * FROM context ORDER BY time"] @TO@ MethodInvocation@@createCountQueryFor("SELECT * FROM context ORDER BY time") @AT@ 24734 @LENGTH@ 58
---------------INS StringLiteral@@"SELECT * FROM context ORDER BY time" @TO@ SimpleName@@MethodName:createCountQueryFor:["SELECT * FROM context ORDER BY time"] @AT@ 24754 @LENGTH@ 37
---INS ExpressionStatement@@MethodInvocation:assertThat(countQueryFor).isEqualTo("select count(*) FROM context") @TO@ MethodDeclaration@@void, MethodName:countQueryUsesCorrectVariable,  @AT@ 24796 @LENGTH@ 68
------INS MethodInvocation@@assertThat(countQueryFor).isEqualTo("select count(*) FROM context") @TO@ ExpressionStatement@@MethodInvocation:assertThat(countQueryFor).isEqualTo("select count(*) FROM context") @AT@ 24796 @LENGTH@ 67
---------INS MethodInvocation@@MethodName:assertThat:[countQueryFor] @TO@ MethodInvocation@@assertThat(countQueryFor).isEqualTo("select count(*) FROM context") @AT@ 24796 @LENGTH@ 25
------------INS SimpleName@@countQueryFor @TO@ MethodInvocation@@MethodName:assertThat:[countQueryFor] @AT@ 24807 @LENGTH@ 13
---------INS SimpleName@@MethodName:isEqualTo:["select count(*) FROM context"] @TO@ MethodInvocation@@assertThat(countQueryFor).isEqualTo("select count(*) FROM context") @AT@ 24822 @LENGTH@ 41
------------INS StringLiteral@@"select count(*) FROM context" @TO@ SimpleName@@MethodName:isEqualTo:["select count(*) FROM context"] @AT@ 24832 @LENGTH@ 30
---INS ExpressionStatement@@Assignment:countQueryFor=createCountQueryFor("select * FROM users_statuses WHERE (user_created_at BETWEEN $1 AND $2)") @TO@ MethodDeclaration@@void, MethodName:countQueryUsesCorrectVariable,  @AT@ 24868 @LENGTH@ 110
------INS Assignment@@countQueryFor=createCountQueryFor("select * FROM users_statuses WHERE (user_created_at BETWEEN $1 AND $2)") @TO@ ExpressionStatement@@Assignment:countQueryFor=createCountQueryFor("select * FROM users_statuses WHERE (user_created_at BETWEEN $1 AND $2)") @AT@ 24868 @LENGTH@ 109
---------INS SimpleName@@countQueryFor @TO@ Assignment@@countQueryFor=createCountQueryFor("select * FROM users_statuses WHERE (user_created_at BETWEEN $1 AND $2)") @AT@ 24868 @LENGTH@ 13
---------INS Operator@@= @TO@ Assignment@@countQueryFor=createCountQueryFor("select * FROM users_statuses WHERE (user_created_at BETWEEN $1 AND $2)") @AT@ 24881 @LENGTH@ 1
---------INS MethodInvocation@@createCountQueryFor("select * FROM users_statuses WHERE (user_created_at BETWEEN $1 AND $2)") @TO@ Assignment@@countQueryFor=createCountQueryFor("select * FROM users_statuses WHERE (user_created_at BETWEEN $1 AND $2)") @AT@ 24884 @LENGTH@ 93
------------INS SimpleName@@MethodName:createCountQueryFor:["select * FROM users_statuses WHERE (user_created_at BETWEEN $1 AND $2)"] @TO@ MethodInvocation@@createCountQueryFor("select * FROM users_statuses WHERE (user_created_at BETWEEN $1 AND $2)") @AT@ 24884 @LENGTH@ 93
---------------INS StringLiteral@@"select * FROM users_statuses WHERE (user_created_at BETWEEN $1 AND $2)" @TO@ SimpleName@@MethodName:createCountQueryFor:["select * FROM users_statuses WHERE (user_created_at BETWEEN $1 AND $2)"] @AT@ 24904 @LENGTH@ 72
---INS ExpressionStatement@@MethodInvocation:assertThat(countQueryFor).isEqualTo("select count(*) FROM users_statuses WHERE (user_created_at BETWEEN $1 AND $2)") @TO@ MethodDeclaration@@void, MethodName:countQueryUsesCorrectVariable,  @AT@ 24981 @LENGTH@ 117
------INS MethodInvocation@@assertThat(countQueryFor).isEqualTo("select count(*) FROM users_statuses WHERE (user_created_at BETWEEN $1 AND $2)") @TO@ ExpressionStatement@@MethodInvocation:assertThat(countQueryFor).isEqualTo("select count(*) FROM users_statuses WHERE (user_created_at BETWEEN $1 AND $2)") @AT@ 24981 @LENGTH@ 116
---------INS MethodInvocation@@MethodName:assertThat:[countQueryFor] @TO@ MethodInvocation@@assertThat(countQueryFor).isEqualTo("select count(*) FROM users_statuses WHERE (user_created_at BETWEEN $1 AND $2)") @AT@ 24981 @LENGTH@ 25
------------INS SimpleName@@countQueryFor @TO@ MethodInvocation@@MethodName:assertThat:[countQueryFor] @AT@ 24992 @LENGTH@ 13
---------INS SimpleName@@MethodName:isEqualTo:["select count(*) FROM users_statuses WHERE (user_created_at BETWEEN $1 AND $2)"] @TO@ MethodInvocation@@assertThat(countQueryFor).isEqualTo("select count(*) FROM users_statuses WHERE (user_created_at BETWEEN $1 AND $2)") @AT@ 25007 @LENGTH@ 90
------------INS StringLiteral@@"select count(*) FROM users_statuses WHERE (user_created_at BETWEEN $1 AND $2)" @TO@ SimpleName@@MethodName:isEqualTo:["select count(*) FROM users_statuses WHERE (user_created_at BETWEEN $1 AND $2)"] @AT@ 25017 @LENGTH@ 79
---INS ExpressionStatement@@Assignment:countQueryFor=createCountQueryFor("SELECT * FROM users_statuses us WHERE (user_created_at BETWEEN :fromDate AND :toDate)") @TO@ MethodDeclaration@@void, MethodName:countQueryUsesCorrectVariable,  @AT@ 25102 @LENGTH@ 125
------INS Assignment@@countQueryFor=createCountQueryFor("SELECT * FROM users_statuses us WHERE (user_created_at BETWEEN :fromDate AND :toDate)") @TO@ ExpressionStatement@@Assignment:countQueryFor=createCountQueryFor("SELECT * FROM users_statuses us WHERE (user_created_at BETWEEN :fromDate AND :toDate)") @AT@ 25102 @LENGTH@ 124
---------INS SimpleName@@countQueryFor @TO@ Assignment@@countQueryFor=createCountQueryFor("SELECT * FROM users_statuses us WHERE (user_created_at BETWEEN :fromDate AND :toDate)") @AT@ 25102 @LENGTH@ 13
---------INS Operator@@= @TO@ Assignment@@countQueryFor=createCountQueryFor("SELECT * FROM users_statuses us WHERE (user_created_at BETWEEN :fromDate AND :toDate)") @AT@ 25115 @LENGTH@ 1
---------INS MethodInvocation@@createCountQueryFor("SELECT * FROM users_statuses us WHERE (user_created_at BETWEEN :fromDate AND :toDate)") @TO@ Assignment@@countQueryFor=createCountQueryFor("SELECT * FROM users_statuses us WHERE (user_created_at BETWEEN :fromDate AND :toDate)") @AT@ 25118 @LENGTH@ 108
------------INS SimpleName@@MethodName:createCountQueryFor:["SELECT * FROM users_statuses us WHERE (user_created_at BETWEEN :fromDate AND :toDate)"] @TO@ MethodInvocation@@createCountQueryFor("SELECT * FROM users_statuses us WHERE (user_created_at BETWEEN :fromDate AND :toDate)") @AT@ 25118 @LENGTH@ 108
---------------INS StringLiteral@@"SELECT * FROM users_statuses us WHERE (user_created_at BETWEEN :fromDate AND :toDate)" @TO@ SimpleName@@MethodName:createCountQueryFor:["SELECT * FROM users_statuses us WHERE (user_created_at BETWEEN :fromDate AND :toDate)"] @AT@ 25138 @LENGTH@ 87
---INS ExpressionStatement@@MethodInvocation:assertThat(countQueryFor).isEqualTo("select count(us) FROM users_statuses us WHERE (user_created_at BETWEEN :fromDate AND :toDate)") @TO@ MethodDeclaration@@void, MethodName:countQueryUsesCorrectVariable,  @AT@ 25230 @LENGTH@ 133
------INS MethodInvocation@@assertThat(countQueryFor).isEqualTo("select count(us) FROM users_statuses us WHERE (user_created_at BETWEEN :fromDate AND :toDate)") @TO@ ExpressionStatement@@MethodInvocation:assertThat(countQueryFor).isEqualTo("select count(us) FROM users_statuses us WHERE (user_created_at BETWEEN :fromDate AND :toDate)") @AT@ 25230 @LENGTH@ 132
---------INS MethodInvocation@@MethodName:assertThat:[countQueryFor] @TO@ MethodInvocation@@assertThat(countQueryFor).isEqualTo("select count(us) FROM users_statuses us WHERE (user_created_at BETWEEN :fromDate AND :toDate)") @AT@ 25230 @LENGTH@ 25
------------INS SimpleName@@countQueryFor @TO@ MethodInvocation@@MethodName:assertThat:[countQueryFor] @AT@ 25241 @LENGTH@ 13
---------INS SimpleName@@MethodName:isEqualTo:["select count(us) FROM users_statuses us WHERE (user_created_at BETWEEN :fromDate AND :toDate)"] @TO@ MethodInvocation@@assertThat(countQueryFor).isEqualTo("select count(us) FROM users_statuses us WHERE (user_created_at BETWEEN :fromDate AND :toDate)") @AT@ 25256 @LENGTH@ 106
------------INS StringLiteral@@"select count(us) FROM users_statuses us WHERE (user_created_at BETWEEN :fromDate AND :toDate)" @TO@ SimpleName@@MethodName:isEqualTo:["select count(us) FROM users_statuses us WHERE (user_created_at BETWEEN :fromDate AND :toDate)"] @AT@ 25266 @LENGTH@ 95


UPD IfStatement@@if (value != null && HttpResponse.class.isAssignableFrom(type)) {  NettyHttpMessage msg;  if (exchange.hasOut()) {    msg=exchange.getOut(NettyHttpMessage.class);  } else {    msg=exchange.getIn(NettyHttpMessage.class);  }  if (msg != null && msg.getBody() == value) {    return msg.getHttpResponse();  }} @TO@ if (value != null && HttpResponse.class.isAssignableFrom(type)) {  NettyHttpMessage msg=exchange.getMessage(NettyHttpMessage.class);  if (msg != null && msg.getBody() == value) {    return msg.getHttpResponse();  }} @AT@ 3076 @LENGTH@ 711
---UPD Block@@ThenBody:{  NettyHttpMessage msg;  if (exchange.hasOut()) {    msg=exchange.getOut(NettyHttpMessage.class);  } else {    msg=exchange.getIn(NettyHttpMessage.class);  }  if (msg != null && msg.getBody() == value) {    return msg.getHttpResponse();  }} @TO@ ThenBody:{  NettyHttpMessage msg=exchange.getMessage(NettyHttpMessage.class);  if (msg != null && msg.getBody() == value) {    return msg.getHttpResponse();  }} @AT@ 3140 @LENGTH@ 647
------INS VariableDeclarationStatement@@NettyHttpMessage msg=exchange.getMessage(NettyHttpMessage.class); @TO@ Block@@ThenBody:{  NettyHttpMessage msg;  if (exchange.hasOut()) {    msg=exchange.getOut(NettyHttpMessage.class);  } else {    msg=exchange.getIn(NettyHttpMessage.class);  }  if (msg != null && msg.getBody() == value) {    return msg.getHttpResponse();  }} @AT@ 3442 @LENGTH@ 67
---------MOV SimpleType@@NettyHttpMessage @TO@ VariableDeclarationStatement@@NettyHttpMessage msg=exchange.getMessage(NettyHttpMessage.class); @AT@ 3442 @LENGTH@ 16
---------INS VariableDeclarationFragment@@msg=exchange.getMessage(NettyHttpMessage.class) @TO@ VariableDeclarationStatement@@NettyHttpMessage msg=exchange.getMessage(NettyHttpMessage.class); @AT@ 3459 @LENGTH@ 49
------------MOV SimpleName@@msg @TO@ VariableDeclarationFragment@@msg=exchange.getMessage(NettyHttpMessage.class) @AT@ 3459 @LENGTH@ 3
------------INS MethodInvocation@@exchange.getMessage(NettyHttpMessage.class) @TO@ VariableDeclarationFragment@@msg=exchange.getMessage(NettyHttpMessage.class) @AT@ 3465 @LENGTH@ 43
---------------MOV SimpleName@@Name:exchange @TO@ MethodInvocation@@exchange.getMessage(NettyHttpMessage.class) @AT@ 3607 @LENGTH@ 8
---------------MOV SimpleName@@MethodName:getIn:[NettyHttpMessage.class] @TO@ MethodInvocation@@exchange.getMessage(NettyHttpMessage.class) @AT@ 3616 @LENGTH@ 29
------DEL VariableDeclarationStatement@@NettyHttpMessage msg; @AT@ 3442 @LENGTH@ 21
---------DEL VariableDeclarationFragment@@msg @AT@ 3459 @LENGTH@ 3
------DEL IfStatement@@if (exchange.hasOut()) {  msg=exchange.getOut(NettyHttpMessage.class);} else {  msg=exchange.getIn(NettyHttpMessage.class);} @AT@ 3476 @LENGTH@ 184
---------DEL MethodInvocation@@exchange.hasOut() @AT@ 3480 @LENGTH@ 17
------------DEL SimpleName@@Name:exchange @AT@ 3480 @LENGTH@ 8
------------DEL SimpleName@@MethodName:hasOut:[] @AT@ 3489 @LENGTH@ 8
---------DEL Block@@ThenBody:{  msg=exchange.getOut(NettyHttpMessage.class);} @AT@ 3499 @LENGTH@ 78
------------DEL ExpressionStatement@@Assignment:msg=exchange.getOut(NettyHttpMessage.class) @AT@ 3517 @LENGTH@ 46
---------------DEL Assignment@@msg=exchange.getOut(NettyHttpMessage.class) @AT@ 3517 @LENGTH@ 45
------------------DEL SimpleName@@msg @AT@ 3517 @LENGTH@ 3
------------------DEL Operator@@= @AT@ 3520 @LENGTH@ 1
------------------DEL MethodInvocation@@exchange.getOut(NettyHttpMessage.class) @AT@ 3523 @LENGTH@ 39
---------------------DEL SimpleName@@Name:exchange @AT@ 3523 @LENGTH@ 8
---------------------DEL SimpleName@@MethodName:getOut:[NettyHttpMessage.class] @AT@ 3532 @LENGTH@ 30
------------------------DEL TypeLiteral@@NettyHttpMessage.class @AT@ 3539 @LENGTH@ 22
---------DEL Block@@ElseBody:{  msg=exchange.getIn(NettyHttpMessage.class);} @AT@ 3583 @LENGTH@ 77
------------DEL ExpressionStatement@@Assignment:msg=exchange.getIn(NettyHttpMessage.class) @AT@ 3601 @LENGTH@ 45
---------------DEL Assignment@@msg=exchange.getIn(NettyHttpMessage.class) @AT@ 3601 @LENGTH@ 44
------------------DEL SimpleName@@msg @AT@ 3601 @LENGTH@ 3
------------------DEL Operator@@= @AT@ 3604 @LENGTH@ 1
------------------DEL MethodInvocation@@exchange.getIn(NettyHttpMessage.class) @AT@ 3607 @LENGTH@ 38


INS MethodDeclaration@@public, void, MethodName:testVectorizedOrcMultipleSplits, Exception,  @TO@ TypeDeclaration@@[public]TestHiveIcebergSelects, HiveIcebergStorageHandlerWithEngineBase @AT@ 11462 @LENGTH@ 1145
---INS Modifier@@public @TO@ MethodDeclaration@@public, void, MethodName:testVectorizedOrcMultipleSplits, Exception,  @AT@ 11462 @LENGTH@ 6
---INS PrimitiveType@@void @TO@ MethodDeclaration@@public, void, MethodName:testVectorizedOrcMultipleSplits, Exception,  @AT@ 11469 @LENGTH@ 4
---INS SimpleName@@MethodName:testVectorizedOrcMultipleSplits @TO@ MethodDeclaration@@public, void, MethodName:testVectorizedOrcMultipleSplits, Exception,  @AT@ 11474 @LENGTH@ 31
---INS SimpleType@@Exception @TO@ MethodDeclaration@@public, void, MethodName:testVectorizedOrcMultipleSplits, Exception,  @AT@ 11515 @LENGTH@ 9
---INS ExpressionStatement@@MethodInvocation:assumeTrue(isVectorized && FileFormat.ORC.equals(fileFormat)) @TO@ MethodDeclaration@@public, void, MethodName:testVectorizedOrcMultipleSplits, Exception,  @AT@ 11531 @LENGTH@ 62
------INS MethodInvocation@@assumeTrue(isVectorized && FileFormat.ORC.equals(fileFormat)) @TO@ ExpressionStatement@@MethodInvocation:assumeTrue(isVectorized && FileFormat.ORC.equals(fileFormat)) @AT@ 11531 @LENGTH@ 61
---------INS SimpleName@@MethodName:assumeTrue:[isVectorized && FileFormat.ORC.equals(fileFormat)] @TO@ MethodInvocation@@assumeTrue(isVectorized && FileFormat.ORC.equals(fileFormat)) @AT@ 11531 @LENGTH@ 61
------------INS InfixExpression@@isVectorized && FileFormat.ORC.equals(fileFormat) @TO@ SimpleName@@MethodName:assumeTrue:[isVectorized && FileFormat.ORC.equals(fileFormat)] @AT@ 11542 @LENGTH@ 49
---------------INS SimpleName@@isVectorized @TO@ InfixExpression@@isVectorized && FileFormat.ORC.equals(fileFormat) @AT@ 11542 @LENGTH@ 12
---------------INS Operator@@&& @TO@ InfixExpression@@isVectorized && FileFormat.ORC.equals(fileFormat) @AT@ 11554 @LENGTH@ 2
---------------INS MethodInvocation@@FileFormat.ORC.equals(fileFormat) @TO@ InfixExpression@@isVectorized && FileFormat.ORC.equals(fileFormat) @AT@ 11558 @LENGTH@ 33
------------------INS QualifiedName@@Name:FileFormat.ORC @TO@ MethodInvocation@@FileFormat.ORC.equals(fileFormat) @AT@ 11558 @LENGTH@ 14
------------------INS SimpleName@@MethodName:equals:[fileFormat] @TO@ MethodInvocation@@FileFormat.ORC.equals(fileFormat) @AT@ 11573 @LENGTH@ 18
---------------------INS SimpleName@@fileFormat @TO@ SimpleName@@MethodName:equals:[fileFormat] @AT@ 11580 @LENGTH@ 10
---INS VariableDeclarationStatement@@List<Record> records=TestHelper.generateRandomRecords(HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA,20000,0L); @TO@ MethodDeclaration@@public, void, MethodName:testVectorizedOrcMultipleSplits, Exception,  @AT@ 11650 @LENGTH@ 127
------INS ParameterizedType@@List<Record> @TO@ VariableDeclarationStatement@@List<Record> records=TestHelper.generateRandomRecords(HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA,20000,0L); @AT@ 11650 @LENGTH@ 12
---------INS SimpleType@@List @TO@ ParameterizedType@@List<Record> @AT@ 11650 @LENGTH@ 4
---------INS SimpleType@@Record @TO@ ParameterizedType@@List<Record> @AT@ 11655 @LENGTH@ 6
------INS VariableDeclarationFragment@@records=TestHelper.generateRandomRecords(HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA,20000,0L) @TO@ VariableDeclarationStatement@@List<Record> records=TestHelper.generateRandomRecords(HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA,20000,0L); @AT@ 11663 @LENGTH@ 113
---------INS SimpleName@@records @TO@ VariableDeclarationFragment@@records=TestHelper.generateRandomRecords(HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA,20000,0L) @AT@ 11663 @LENGTH@ 7
---------INS MethodInvocation@@TestHelper.generateRandomRecords(HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA,20000,0L) @TO@ VariableDeclarationFragment@@records=TestHelper.generateRandomRecords(HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA,20000,0L) @AT@ 11673 @LENGTH@ 103
------------INS SimpleName@@Name:TestHelper @TO@ MethodInvocation@@TestHelper.generateRandomRecords(HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA,20000,0L) @AT@ 11673 @LENGTH@ 10
------------INS SimpleName@@MethodName:generateRandomRecords:[HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA, 20000, 0L] @TO@ MethodInvocation@@TestHelper.generateRandomRecords(HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA,20000,0L) @AT@ 11684 @LENGTH@ 92
---------------INS QualifiedName@@HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA @TO@ SimpleName@@MethodName:generateRandomRecords:[HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA, 20000, 0L] @AT@ 11706 @LENGTH@ 50
------------------INS SimpleName@@HiveIcebergStorageHandlerTestUtils @TO@ QualifiedName@@HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA @AT@ 11706 @LENGTH@ 34
------------------INS SimpleName@@CUSTOMER_SCHEMA @TO@ QualifiedName@@HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA @AT@ 11741 @LENGTH@ 15
---------------INS NumberLiteral@@20000 @TO@ SimpleName@@MethodName:generateRandomRecords:[HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA, 20000, 0L] @AT@ 11766 @LENGTH@ 5
---------------INS NumberLiteral@@0L @TO@ SimpleName@@MethodName:generateRandomRecords:[HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA, 20000, 0L] @AT@ 11773 @LENGTH@ 2
---INS ExpressionStatement@@MethodInvocation:shell.setHiveSessionValue("orc.stripe.size","210000") @TO@ MethodDeclaration@@public, void, MethodName:testVectorizedOrcMultipleSplits, Exception,  @AT@ 12013 @LENGTH@ 55
------INS MethodInvocation@@shell.setHiveSessionValue("orc.stripe.size","210000") @TO@ ExpressionStatement@@MethodInvocation:shell.setHiveSessionValue("orc.stripe.size","210000") @AT@ 12013 @LENGTH@ 54
---------INS SimpleName@@Name:shell @TO@ MethodInvocation@@shell.setHiveSessionValue("orc.stripe.size","210000") @AT@ 12013 @LENGTH@ 5
---------INS SimpleName@@MethodName:setHiveSessionValue:["orc.stripe.size", "210000"] @TO@ MethodInvocation@@shell.setHiveSessionValue("orc.stripe.size","210000") @AT@ 12019 @LENGTH@ 48
------------INS StringLiteral@@"orc.stripe.size" @TO@ SimpleName@@MethodName:setHiveSessionValue:["orc.stripe.size", "210000"] @AT@ 12039 @LENGTH@ 17
------------INS StringLiteral@@"210000" @TO@ SimpleName@@MethodName:setHiveSessionValue:["orc.stripe.size", "210000"] @AT@ 12058 @LENGTH@ 8
---INS ExpressionStatement@@MethodInvocation:testTables.createTable(shell,"targettab",HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA,fileFormat,records) @TO@ MethodDeclaration@@public, void, MethodName:testVectorizedOrcMultipleSplits, Exception,  @AT@ 12074 @LENGTH@ 124
------INS MethodInvocation@@testTables.createTable(shell,"targettab",HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA,fileFormat,records) @TO@ ExpressionStatement@@MethodInvocation:testTables.createTable(shell,"targettab",HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA,fileFormat,records) @AT@ 12074 @LENGTH@ 123
---------INS SimpleName@@Name:testTables @TO@ MethodInvocation@@testTables.createTable(shell,"targettab",HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA,fileFormat,records) @AT@ 12074 @LENGTH@ 10
---------INS SimpleName@@MethodName:createTable:[shell, "targettab", HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA, fileFormat, records] @TO@ MethodInvocation@@testTables.createTable(shell,"targettab",HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA,fileFormat,records) @AT@ 12085 @LENGTH@ 112
------------INS SimpleName@@shell @TO@ SimpleName@@MethodName:createTable:[shell, "targettab", HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA, fileFormat, records] @AT@ 12097 @LENGTH@ 5
------------INS StringLiteral@@"targettab" @TO@ SimpleName@@MethodName:createTable:[shell, "targettab", HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA, fileFormat, records] @AT@ 12104 @LENGTH@ 11
------------INS QualifiedName@@HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA @TO@ SimpleName@@MethodName:createTable:[shell, "targettab", HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA, fileFormat, records] @AT@ 12117 @LENGTH@ 50
---------------INS SimpleName@@HiveIcebergStorageHandlerTestUtils @TO@ QualifiedName@@HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA @AT@ 12117 @LENGTH@ 34
---------------INS SimpleName@@CUSTOMER_SCHEMA @TO@ QualifiedName@@HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA @AT@ 12152 @LENGTH@ 15
------------INS SimpleName@@fileFormat @TO@ SimpleName@@MethodName:createTable:[shell, "targettab", HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA, fileFormat, records] @AT@ 12177 @LENGTH@ 10
------------INS SimpleName@@records @TO@ SimpleName@@MethodName:createTable:[shell, "targettab", HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA, fileFormat, records] @AT@ 12189 @LENGTH@ 7
---INS ExpressionStatement@@MethodInvocation:shell.setHiveSessionValue(InputFormatConfig.SPLIT_SIZE,"210000") @TO@ MethodDeclaration@@public, void, MethodName:testVectorizedOrcMultipleSplits, Exception,  @AT@ 12390 @LENGTH@ 66
------INS MethodInvocation@@shell.setHiveSessionValue(InputFormatConfig.SPLIT_SIZE,"210000") @TO@ ExpressionStatement@@MethodInvocation:shell.setHiveSessionValue(InputFormatConfig.SPLIT_SIZE,"210000") @AT@ 12390 @LENGTH@ 65
---------INS SimpleName@@Name:shell @TO@ MethodInvocation@@shell.setHiveSessionValue(InputFormatConfig.SPLIT_SIZE,"210000") @AT@ 12390 @LENGTH@ 5
---------INS SimpleName@@MethodName:setHiveSessionValue:[InputFormatConfig.SPLIT_SIZE, "210000"] @TO@ MethodInvocation@@shell.setHiveSessionValue(InputFormatConfig.SPLIT_SIZE,"210000") @AT@ 12396 @LENGTH@ 59
------------INS QualifiedName@@InputFormatConfig.SPLIT_SIZE @TO@ SimpleName@@MethodName:setHiveSessionValue:[InputFormatConfig.SPLIT_SIZE, "210000"] @AT@ 12416 @LENGTH@ 28
---------------INS SimpleName@@InputFormatConfig @TO@ QualifiedName@@InputFormatConfig.SPLIT_SIZE @AT@ 12416 @LENGTH@ 17
---------------INS SimpleName@@SPLIT_SIZE @TO@ QualifiedName@@InputFormatConfig.SPLIT_SIZE @AT@ 12434 @LENGTH@ 10
------------INS StringLiteral@@"210000" @TO@ SimpleName@@MethodName:setHiveSessionValue:[InputFormatConfig.SPLIT_SIZE, "210000"] @AT@ 12446 @LENGTH@ 8
---INS VariableDeclarationStatement@@List<Object[]> result=shell.executeStatement("SELECT * FROM targettab ORDER BY last_name"); @TO@ MethodDeclaration@@public, void, MethodName:testVectorizedOrcMultipleSplits, Exception,  @AT@ 12461 @LENGTH@ 93
------INS ParameterizedType@@List<Object[]> @TO@ VariableDeclarationStatement@@List<Object[]> result=shell.executeStatement("SELECT * FROM targettab ORDER BY last_name"); @AT@ 12461 @LENGTH@ 14
---------INS SimpleType@@List @TO@ ParameterizedType@@List<Object[]> @AT@ 12461 @LENGTH@ 4
---------INS ArrayType@@Object[] @TO@ ParameterizedType@@List<Object[]> @AT@ 12466 @LENGTH@ 8
------------INS SimpleType@@Object @TO@ ArrayType@@Object[] @AT@ 12466 @LENGTH@ 6
------INS VariableDeclarationFragment@@result=shell.executeStatement("SELECT * FROM targettab ORDER BY last_name") @TO@ VariableDeclarationStatement@@List<Object[]> result=shell.executeStatement("SELECT * FROM targettab ORDER BY last_name"); @AT@ 12476 @LENGTH@ 77
---------INS SimpleName@@result @TO@ VariableDeclarationFragment@@result=shell.executeStatement("SELECT * FROM targettab ORDER BY last_name") @AT@ 12476 @LENGTH@ 6
---------INS MethodInvocation@@shell.executeStatement("SELECT * FROM targettab ORDER BY last_name") @TO@ VariableDeclarationFragment@@result=shell.executeStatement("SELECT * FROM targettab ORDER BY last_name") @AT@ 12485 @LENGTH@ 68
------------INS SimpleName@@Name:shell @TO@ MethodInvocation@@shell.executeStatement("SELECT * FROM targettab ORDER BY last_name") @AT@ 12485 @LENGTH@ 5
------------INS SimpleName@@MethodName:executeStatement:["SELECT * FROM targettab ORDER BY last_name"] @TO@ MethodInvocation@@shell.executeStatement("SELECT * FROM targettab ORDER BY last_name") @AT@ 12491 @LENGTH@ 62
---------------INS StringLiteral@@"SELECT * FROM targettab ORDER BY last_name" @TO@ SimpleName@@MethodName:executeStatement:["SELECT * FROM targettab ORDER BY last_name"] @AT@ 12508 @LENGTH@ 44
---INS ExpressionStatement@@MethodInvocation:Assert.assertEquals(20000,result.size()) @TO@ MethodDeclaration@@public, void, MethodName:testVectorizedOrcMultipleSplits, Exception,  @AT@ 12560 @LENGTH@ 42
------INS MethodInvocation@@Assert.assertEquals(20000,result.size()) @TO@ ExpressionStatement@@MethodInvocation:Assert.assertEquals(20000,result.size()) @AT@ 12560 @LENGTH@ 41
---------INS SimpleName@@Name:Assert @TO@ MethodInvocation@@Assert.assertEquals(20000,result.size()) @AT@ 12560 @LENGTH@ 6
---------INS SimpleName@@MethodName:assertEquals:[20000, result.size()] @TO@ MethodInvocation@@Assert.assertEquals(20000,result.size()) @AT@ 12567 @LENGTH@ 34
------------INS NumberLiteral@@20000 @TO@ SimpleName@@MethodName:assertEquals:[20000, result.size()] @AT@ 12580 @LENGTH@ 5
------------INS MethodInvocation@@result.size() @TO@ SimpleName@@MethodName:assertEquals:[20000, result.size()] @AT@ 12587 @LENGTH@ 13
---------------INS SimpleName@@Name:result @TO@ MethodInvocation@@result.size() @AT@ 12587 @LENGTH@ 6
---------------INS SimpleName@@MethodName:size:[] @TO@ MethodInvocation@@result.size() @AT@ 12594 @LENGTH@ 6


INS ReturnStatement@@BooleanLiteral:true @TO@ MethodDeclaration@@public, boolean, MethodName:canContinue,  @AT@ 2056 @LENGTH@ 12
---INS BooleanLiteral@@true @TO@ ReturnStatement@@BooleanLiteral:true @AT@ 2063 @LENGTH@ 4


UPD IfStatement@@if ((this.publisherConfirms || this.confirmCallback != null) && channel instanceof PublisherCallbackChannel) {  PublisherCallbackChannel publisherCallbackChannel=(PublisherCallbackChannel)channel;  CorrelationData correlationData=this.correlationDataPostProcessor != null ? this.correlationDataPostProcessor.postProcess(message,correlationDataArg) : correlationDataArg;  long nextPublishSeqNo=channel.getNextPublishSeqNo();  message.getMessageProperties().setPublishSequenceNumber(nextPublishSeqNo);  publisherCallbackChannel.addPendingConfirm(this,nextPublishSeqNo,new PendingConfirm(correlationData,System.currentTimeMillis()));  if (correlationData != null && StringUtils.hasText(correlationData.getId())) {    message.getMessageProperties().setHeader(PublisherCallbackChannel.RETURNED_MESSAGE_CORRELATION_KEY,correlationData.getId());  }} else if (channel instanceof ChannelProxy && ((ChannelProxy)channel).isConfirmSelected()) {  long nextPublishSeqNo=channel.getNextPublishSeqNo();  message.getMessageProperties().setPublishSequenceNumber(nextPublishSeqNo);} @TO@ if ((this.publisherConfirms || this.confirmCallback != null) && channel instanceof PublisherCallbackChannel) {  long nextPublishSeqNo=channel.getNextPublishSeqNo();  if (nextPublishSeqNo > 0) {    PublisherCallbackChannel publisherCallbackChannel=(PublisherCallbackChannel)channel;    CorrelationData correlationData=this.correlationDataPostProcessor != null ? this.correlationDataPostProcessor.postProcess(message,correlationDataArg) : correlationDataArg;    message.getMessageProperties().setPublishSequenceNumber(nextPublishSeqNo);    publisherCallbackChannel.addPendingConfirm(this,nextPublishSeqNo,new PendingConfirm(correlationData,System.currentTimeMillis()));    if (correlationData != null && StringUtils.hasText(correlationData.getId())) {      message.getMessageProperties().setHeader(PublisherCallbackChannel.RETURNED_MESSAGE_CORRELATION_KEY,correlationData.getId());    }  } else {    logger.debug("Factory does not have confirms enabled");  }} else if (channel instanceof ChannelProxy && ((ChannelProxy)channel).isConfirmSelected()) {  long nextPublishSeqNo=channel.getNextPublishSeqNo();  message.getMessageProperties().setPublishSequenceNumber(nextPublishSeqNo);} @AT@ 90199 @LENGTH@ 1128
---INS Block@@ThenBody:{  long nextPublishSeqNo=channel.getNextPublishSeqNo();  if (nextPublishSeqNo > 0) {    PublisherCallbackChannel publisherCallbackChannel=(PublisherCallbackChannel)channel;    CorrelationData correlationData=this.correlationDataPostProcessor != null ? this.correlationDataPostProcessor.postProcess(message,correlationDataArg) : correlationDataArg;    message.getMessageProperties().setPublishSequenceNumber(nextPublishSeqNo);    publisherCallbackChannel.addPendingConfirm(this,nextPublishSeqNo,new PendingConfirm(correlationData,System.currentTimeMillis()));    if (correlationData != null && StringUtils.hasText(correlationData.getId())) {      message.getMessageProperties().setHeader(PublisherCallbackChannel.RETURNED_MESSAGE_CORRELATION_KEY,correlationData.getId());    }  } else {    logger.debug("Factory does not have confirms enabled");  }} @TO@ IfStatement@@if ((this.publisherConfirms || this.confirmCallback != null) && channel instanceof PublisherCallbackChannel) {  PublisherCallbackChannel publisherCallbackChannel=(PublisherCallbackChannel)channel;  CorrelationData correlationData=this.correlationDataPostProcessor != null ? this.correlationDataPostProcessor.postProcess(message,correlationDataArg) : correlationDataArg;  long nextPublishSeqNo=channel.getNextPublishSeqNo();  message.getMessageProperties().setPublishSequenceNumber(nextPublishSeqNo);  publisherCallbackChannel.addPendingConfirm(this,nextPublishSeqNo,new PendingConfirm(correlationData,System.currentTimeMillis()));  if (correlationData != null && StringUtils.hasText(correlationData.getId())) {    message.getMessageProperties().setHeader(PublisherCallbackChannel.RETURNED_MESSAGE_CORRELATION_KEY,correlationData.getId());  }} else if (channel instanceof ChannelProxy && ((ChannelProxy)channel).isConfirmSelected()) {  long nextPublishSeqNo=channel.getNextPublishSeqNo();  message.getMessageProperties().setPublishSequenceNumber(nextPublishSeqNo);} @AT@ 90308 @LENGTH@ 907
------INS IfStatement@@if (nextPublishSeqNo > 0) {  PublisherCallbackChannel publisherCallbackChannel=(PublisherCallbackChannel)channel;  CorrelationData correlationData=this.correlationDataPostProcessor != null ? this.correlationDataPostProcessor.postProcess(message,correlationDataArg) : correlationDataArg;  message.getMessageProperties().setPublishSequenceNumber(nextPublishSeqNo);  publisherCallbackChannel.addPendingConfirm(this,nextPublishSeqNo,new PendingConfirm(correlationData,System.currentTimeMillis()));  if (correlationData != null && StringUtils.hasText(correlationData.getId())) {    message.getMessageProperties().setHeader(PublisherCallbackChannel.RETURNED_MESSAGE_CORRELATION_KEY,correlationData.getId());  }} else {  logger.debug("Factory does not have confirms enabled");} @TO@ Block@@ThenBody:{  long nextPublishSeqNo=channel.getNextPublishSeqNo();  if (nextPublishSeqNo > 0) {    PublisherCallbackChannel publisherCallbackChannel=(PublisherCallbackChannel)channel;    CorrelationData correlationData=this.correlationDataPostProcessor != null ? this.correlationDataPostProcessor.postProcess(message,correlationDataArg) : correlationDataArg;    message.getMessageProperties().setPublishSequenceNumber(nextPublishSeqNo);    publisherCallbackChannel.addPendingConfirm(this,nextPublishSeqNo,new PendingConfirm(correlationData,System.currentTimeMillis()));    if (correlationData != null && StringUtils.hasText(correlationData.getId())) {      message.getMessageProperties().setHeader(PublisherCallbackChannel.RETURNED_MESSAGE_CORRELATION_KEY,correlationData.getId());    }  } else {    logger.debug("Factory does not have confirms enabled");  }} @AT@ 90372 @LENGTH@ 839
---------MOV Block@@ThenBody:{  PublisherCallbackChannel publisherCallbackChannel=(PublisherCallbackChannel)channel;  CorrelationData correlationData=this.correlationDataPostProcessor != null ? this.correlationDataPostProcessor.postProcess(message,correlationDataArg) : correlationDataArg;  long nextPublishSeqNo=channel.getNextPublishSeqNo();  message.getMessageProperties().setPublishSequenceNumber(nextPublishSeqNo);  publisherCallbackChannel.addPendingConfirm(this,nextPublishSeqNo,new PendingConfirm(correlationData,System.currentTimeMillis()));  if (correlationData != null && StringUtils.hasText(correlationData.getId())) {    message.getMessageProperties().setHeader(PublisherCallbackChannel.RETURNED_MESSAGE_CORRELATION_KEY,correlationData.getId());  }} @TO@ IfStatement@@if (nextPublishSeqNo > 0) {  PublisherCallbackChannel publisherCallbackChannel=(PublisherCallbackChannel)channel;  CorrelationData correlationData=this.correlationDataPostProcessor != null ? this.correlationDataPostProcessor.postProcess(message,correlationDataArg) : correlationDataArg;  message.getMessageProperties().setPublishSequenceNumber(nextPublishSeqNo);  publisherCallbackChannel.addPendingConfirm(this,nextPublishSeqNo,new PendingConfirm(correlationData,System.currentTimeMillis()));  if (correlationData != null && StringUtils.hasText(correlationData.getId())) {    message.getMessageProperties().setHeader(PublisherCallbackChannel.RETURNED_MESSAGE_CORRELATION_KEY,correlationData.getId());  }} else {  logger.debug("Factory does not have confirms enabled");} @AT@ 90308 @LENGTH@ 785
---------INS InfixExpression@@nextPublishSeqNo > 0 @TO@ IfStatement@@if (nextPublishSeqNo > 0) {  PublisherCallbackChannel publisherCallbackChannel=(PublisherCallbackChannel)channel;  CorrelationData correlationData=this.correlationDataPostProcessor != null ? this.correlationDataPostProcessor.postProcess(message,correlationDataArg) : correlationDataArg;  message.getMessageProperties().setPublishSequenceNumber(nextPublishSeqNo);  publisherCallbackChannel.addPendingConfirm(this,nextPublishSeqNo,new PendingConfirm(correlationData,System.currentTimeMillis()));  if (correlationData != null && StringUtils.hasText(correlationData.getId())) {    message.getMessageProperties().setHeader(PublisherCallbackChannel.RETURNED_MESSAGE_CORRELATION_KEY,correlationData.getId());  }} else {  logger.debug("Factory does not have confirms enabled");} @AT@ 90376 @LENGTH@ 20
------------INS SimpleName@@nextPublishSeqNo @TO@ InfixExpression@@nextPublishSeqNo > 0 @AT@ 90376 @LENGTH@ 16
------------INS Operator@@> @TO@ InfixExpression@@nextPublishSeqNo > 0 @AT@ 90392 @LENGTH@ 1
------------INS NumberLiteral@@0 @TO@ InfixExpression@@nextPublishSeqNo > 0 @AT@ 90395 @LENGTH@ 1
---------INS Block@@ElseBody:{  logger.debug("Factory does not have confirms enabled");} @TO@ IfStatement@@if (nextPublishSeqNo > 0) {  PublisherCallbackChannel publisherCallbackChannel=(PublisherCallbackChannel)channel;  CorrelationData correlationData=this.correlationDataPostProcessor != null ? this.correlationDataPostProcessor.postProcess(message,correlationDataArg) : correlationDataArg;  message.getMessageProperties().setPublishSequenceNumber(nextPublishSeqNo);  publisherCallbackChannel.addPendingConfirm(this,nextPublishSeqNo,new PendingConfirm(correlationData,System.currentTimeMillis()));  if (correlationData != null && StringUtils.hasText(correlationData.getId())) {    message.getMessageProperties().setHeader(PublisherCallbackChannel.RETURNED_MESSAGE_CORRELATION_KEY,correlationData.getId());  }} else {  logger.debug("Factory does not have confirms enabled");} @AT@ 91145 @LENGTH@ 66
------------INS ExpressionStatement@@MethodInvocation:logger.debug("Factory does not have confirms enabled") @TO@ Block@@ElseBody:{  logger.debug("Factory does not have confirms enabled");} @AT@ 91151 @LENGTH@ 55
---------------INS MethodInvocation@@logger.debug("Factory does not have confirms enabled") @TO@ ExpressionStatement@@MethodInvocation:logger.debug("Factory does not have confirms enabled") @AT@ 91151 @LENGTH@ 54
------------------INS SimpleName@@Name:logger @TO@ MethodInvocation@@logger.debug("Factory does not have confirms enabled") @AT@ 91151 @LENGTH@ 6
------------------INS SimpleName@@MethodName:debug:["Factory does not have confirms enabled"] @TO@ MethodInvocation@@logger.debug("Factory does not have confirms enabled") @AT@ 91158 @LENGTH@ 47
---------------------INS StringLiteral@@"Factory does not have confirms enabled" @TO@ SimpleName@@MethodName:debug:["Factory does not have confirms enabled"] @AT@ 91164 @LENGTH@ 40
------MOV VariableDeclarationStatement@@long nextPublishSeqNo=channel.getNextPublishSeqNo(); @TO@ Block@@ThenBody:{  long nextPublishSeqNo=channel.getNextPublishSeqNo();  if (nextPublishSeqNo > 0) {    PublisherCallbackChannel publisherCallbackChannel=(PublisherCallbackChannel)channel;    CorrelationData correlationData=this.correlationDataPostProcessor != null ? this.correlationDataPostProcessor.postProcess(message,correlationDataArg) : correlationDataArg;    message.getMessageProperties().setPublishSequenceNumber(nextPublishSeqNo);    publisherCallbackChannel.addPendingConfirm(this,nextPublishSeqNo,new PendingConfirm(correlationData,System.currentTimeMillis()));    if (correlationData != null && StringUtils.hasText(correlationData.getId())) {      message.getMessageProperties().setHeader(PublisherCallbackChannel.RETURNED_MESSAGE_CORRELATION_KEY,correlationData.getId());    }  } else {    logger.debug("Factory does not have confirms enabled");  }} @AT@ 90593 @LENGTH@ 54
---UPD Block@@ThenBody:{  PublisherCallbackChannel publisherCallbackChannel=(PublisherCallbackChannel)channel;  CorrelationData correlationData=this.correlationDataPostProcessor != null ? this.correlationDataPostProcessor.postProcess(message,correlationDataArg) : correlationDataArg;  long nextPublishSeqNo=channel.getNextPublishSeqNo();  message.getMessageProperties().setPublishSequenceNumber(nextPublishSeqNo);  publisherCallbackChannel.addPendingConfirm(this,nextPublishSeqNo,new PendingConfirm(correlationData,System.currentTimeMillis()));  if (correlationData != null && StringUtils.hasText(correlationData.getId())) {    message.getMessageProperties().setHeader(PublisherCallbackChannel.RETURNED_MESSAGE_CORRELATION_KEY,correlationData.getId());  }} @TO@ ThenBody:{  PublisherCallbackChannel publisherCallbackChannel=(PublisherCallbackChannel)channel;  CorrelationData correlationData=this.correlationDataPostProcessor != null ? this.correlationDataPostProcessor.postProcess(message,correlationDataArg) : correlationDataArg;  message.getMessageProperties().setPublishSequenceNumber(nextPublishSeqNo);  publisherCallbackChannel.addPendingConfirm(this,nextPublishSeqNo,new PendingConfirm(correlationData,System.currentTimeMillis()));  if (correlationData != null && StringUtils.hasText(correlationData.getId())) {    message.getMessageProperties().setHeader(PublisherCallbackChannel.RETURNED_MESSAGE_CORRELATION_KEY,correlationData.getId());  }} @AT@ 90308 @LENGTH@ 785


UPD Block@@FinallyBody:{  IOUtils.closeStream(outStream);} @TO@ FinallyBody:{  if (outStream != null) {    outStream.close();  }} @AT@ 8120 @LENGTH@ 53
---UPD ExpressionStatement@@MethodInvocation:IOUtils.closeStream(outStream) @TO@ MethodInvocation:outStream.close() @AT@ 8132 @LENGTH@ 31
---INS IfStatement@@if (outStream != null) {  outStream.close();} @TO@ Block@@FinallyBody:{  IOUtils.closeStream(outStream);} @AT@ 8168 @LENGTH@ 67
------INS InfixExpression@@outStream != null @TO@ IfStatement@@if (outStream != null) {  outStream.close();} @AT@ 8172 @LENGTH@ 17
---------INS SimpleName@@outStream @TO@ InfixExpression@@outStream != null @AT@ 8172 @LENGTH@ 9
---------INS Operator@@!= @TO@ InfixExpression@@outStream != null @AT@ 8181 @LENGTH@ 2
---------INS NullLiteral@@null @TO@ InfixExpression@@outStream != null @AT@ 8185 @LENGTH@ 4
------INS Block@@ThenBody:{  outStream.close();} @TO@ IfStatement@@if (outStream != null) {  outStream.close();} @AT@ 8191 @LENGTH@ 44
---------MOV ExpressionStatement@@MethodInvocation:IOUtils.closeStream(outStream) @TO@ Block@@ThenBody:{  outStream.close();} @AT@ 8132 @LENGTH@ 31
------------UPD MethodInvocation@@IOUtils.closeStream(outStream) @TO@ outStream.close() @AT@ 8132 @LENGTH@ 30
---------------UPD SimpleName@@Name:IOUtils @TO@ Name:outStream @AT@ 8132 @LENGTH@ 7
---------------UPD SimpleName@@MethodName:closeStream:[outStream] @TO@ MethodName:close:[] @AT@ 8140 @LENGTH@ 22
------------------DEL SimpleName@@outStream @AT@ 8152 @LENGTH@ 9


DEL IfStatement@@if (endpointConfiguration.getClient() == null) {  endpointConfiguration.setClient(createClient(endpointConfiguration));} @AT@ 2308 @LENGTH@ 140
---DEL Block@@ThenBody:{  endpointConfiguration.setClient(createClient(endpointConfiguration));} @AT@ 2355 @LENGTH@ 93


UPD ExpressionStatement@@MethodInvocation:jedisConnectionFactory.setPort(port) @TO@ MethodInvocation:jedisConnectionFactory.getStandaloneConfiguration().setPort(port) @AT@ 4891 @LENGTH@ 37
---UPD MethodInvocation@@jedisConnectionFactory.setPort(port) @TO@ jedisConnectionFactory.getStandaloneConfiguration().setPort(port) @AT@ 4891 @LENGTH@ 36
------INS MethodInvocation@@MethodName:getStandaloneConfiguration:[] @TO@ MethodInvocation@@jedisConnectionFactory.setPort(port) @AT@ 4920 @LENGTH@ 51


UPD LambdaExpression@@idAndEntity -> {
  Long relatedInternalId=idAndEntity.getT1().get();
  Entity savedEntity=idAndEntity.getT2().get();
  PersistentPropertyAccessor<?> targetPropertyAccessor=targetEntity.getPropertyAccessor(newRelatedObject);
  if (targetEntity.isUsingInternalIds()) {
    Neo4jPersistentProperty requiredIdProperty=targetEntity.getRequiredIdProperty();
    if (relatedInternalId == null && targetPropertyAccessor.getProperty(requiredIdProperty) != null) {
      relatedInternalId=(Long)targetPropertyAccessor.getProperty(requiredIdProperty);
    }
 else     if (targetPropertyAccessor.getProperty(requiredIdProperty) == null) {
      targetPropertyAccessor.setProperty(requiredIdProperty,relatedInternalId);
    }
  }
  if (savedEntity != null) {
    TemplateSupport.updateVersionPropertyIfPossible(targetEntity,targetPropertyAccessor,savedEntity);
  }
  stateMachine.markValueAsProcessedAs(relatedObjectBeforeCallbacksApplied,targetPropertyAccessor.getBean());
  stateMachine.markRelationshipAsProcessed(relatedInternalId,relationshipDescription.getRelationshipObverse());
  Object idValue=idProperty != null ? relationshipContext.getRelationshipPropertiesPropertyAccessor(relatedValueToStore).getProperty(idProperty) : null;
  boolean isNewRelationship=idValue == null;
  CreateRelationshipStatementHolder statementHolder=neo4jMappingContext.createStatement(sourceEntity,relationshipContext,relatedValueToStore,isNewRelationship);
  return neo4jClient.query(renderer.render(statementHolder.getStatement())).bind(convertIdValues(sourceEntity.getRequiredIdProperty(),fromId)).to(Constants.FROM_ID_PARAMETER_NAME).bind(relatedInternalId).to(Constants.TO_ID_PARAMETER_NAME).bind(idValue).to(Constants.NAME_OF_KNOWN_RELATIONSHIP_PARAM).bindAll(statementHolder.getProperties()).fetchAs(Long.class).one().flatMap(relationshipInternalId -> {
    if (idProperty != null && isNewRelationship) {
      relationshipContext.getRelationshipPropertiesPropertyAccessor(relatedValueToStore).setProperty(idProperty,relationshipInternalId);
    }
    Mono<Object> nestedRelationshipsSignal=null;
    if (processState != ProcessState.PROCESSED_ALL_VALUES) {
      nestedRelationshipsSignal=processNestedRelations(targetEntity,targetPropertyAccessor,targetEntity.isNew(newRelatedObject),stateMachine,dynamicRelationship ? PropertyFilter.acceptAll() : includeProperty,currentPropertyPath);
    }
    Mono<Object> getRelationshipOrRelationshipPropertiesObject=Mono.fromSupplier(() -> MappingSupport.getRelationshipOrRelationshipPropertiesObject(neo4jMappingContext,relationshipDescription.hasRelationshipProperties(),relationshipProperty.isDynamicAssociation(),relatedValueToStore,targetPropertyAccessor));
    return nestedRelationshipsSignal == null ? getRelationshipOrRelationshipPropertiesObject : nestedRelationshipsSignal.then(getRelationshipOrRelationshipPropertiesObject);
  }
);
}
 @TO@ idAndEntity -> {
  Long relatedInternalId=idAndEntity.getT1().get();
  Entity savedEntity=idAndEntity.getT2().get();
  Neo4jPersistentProperty requiredIdProperty=targetEntity.getRequiredIdProperty();
  PersistentPropertyAccessor<?> targetPropertyAccessor=targetEntity.getPropertyAccessor(newRelatedObject);
  Object actualRelatedId=targetPropertyAccessor.getProperty(requiredIdProperty);
  if (targetEntity.isUsingInternalIds()) {
    if (relatedInternalId == null && actualRelatedId != null) {
      relatedInternalId=(Long)targetPropertyAccessor.getProperty(requiredIdProperty);
    }
 else     if (actualRelatedId == null) {
      targetPropertyAccessor.setProperty(requiredIdProperty,relatedInternalId);
    }
  }
  if (savedEntity != null) {
    TemplateSupport.updateVersionPropertyIfPossible(targetEntity,targetPropertyAccessor,savedEntity);
  }
  stateMachine.markValueAsProcessedAs(relatedObjectBeforeCallbacksApplied,targetPropertyAccessor.getBean());
  stateMachine.markRelationshipAsProcessed(actualRelatedId == null ? relatedInternalId : actualRelatedId,relationshipDescription.getRelationshipObverse());
  Object idValue=idProperty != null ? relationshipContext.getRelationshipPropertiesPropertyAccessor(relatedValueToStore).getProperty(idProperty) : null;
  boolean isNewRelationship=idValue == null;
  CreateRelationshipStatementHolder statementHolder=neo4jMappingContext.createStatement(sourceEntity,relationshipContext,relatedValueToStore,isNewRelationship);
  return neo4jClient.query(renderer.render(statementHolder.getStatement())).bind(convertIdValues(sourceEntity.getRequiredIdProperty(),fromId)).to(Constants.FROM_ID_PARAMETER_NAME).bind(relatedInternalId).to(Constants.TO_ID_PARAMETER_NAME).bind(idValue).to(Constants.NAME_OF_KNOWN_RELATIONSHIP_PARAM).bindAll(statementHolder.getProperties()).fetchAs(Long.class).one().flatMap(relationshipInternalId -> {
    if (idProperty != null && isNewRelationship) {
      relationshipContext.getRelationshipPropertiesPropertyAccessor(relatedValueToStore).setProperty(idProperty,relationshipInternalId);
    }
    Mono<Object> nestedRelationshipsSignal=null;
    if (processState != ProcessState.PROCESSED_ALL_VALUES) {
      nestedRelationshipsSignal=processNestedRelations(targetEntity,targetPropertyAccessor,targetEntity.isNew(newRelatedObject),stateMachine,dynamicRelationship ? PropertyFilter.acceptAll() : includeProperty,currentPropertyPath);
    }
    Mono<Object> getRelationshipOrRelationshipPropertiesObject=Mono.fromSupplier(() -> MappingSupport.getRelationshipOrRelationshipPropertiesObject(neo4jMappingContext,relationshipDescription.hasRelationshipProperties(),relationshipProperty.isDynamicAssociation(),relatedValueToStore,targetPropertyAccessor));
    return nestedRelationshipsSignal == null ? getRelationshipOrRelationshipPropertiesObject : nestedRelationshipsSignal.then(getRelationshipOrRelationshipPropertiesObject);
  }
);
}
 @AT@ 43805 @LENGTH@ 3625
---INS VariableDeclarationStatement@@Object actualRelatedId=targetPropertyAccessor.getProperty(requiredIdProperty); @TO@ LambdaExpression@@idAndEntity -> {
  Long relatedInternalId=idAndEntity.getT1().get();
  Entity savedEntity=idAndEntity.getT2().get();
  PersistentPropertyAccessor<?> targetPropertyAccessor=targetEntity.getPropertyAccessor(newRelatedObject);
  if (targetEntity.isUsingInternalIds()) {
    Neo4jPersistentProperty requiredIdProperty=targetEntity.getRequiredIdProperty();
    if (relatedInternalId == null && targetPropertyAccessor.getProperty(requiredIdProperty) != null) {
      relatedInternalId=(Long)targetPropertyAccessor.getProperty(requiredIdProperty);
    }
 else     if (targetPropertyAccessor.getProperty(requiredIdProperty) == null) {
      targetPropertyAccessor.setProperty(requiredIdProperty,relatedInternalId);
    }
  }
  if (savedEntity != null) {
    TemplateSupport.updateVersionPropertyIfPossible(targetEntity,targetPropertyAccessor,savedEntity);
  }
  stateMachine.markValueAsProcessedAs(relatedObjectBeforeCallbacksApplied,targetPropertyAccessor.getBean());
  stateMachine.markRelationshipAsProcessed(relatedInternalId,relationshipDescription.getRelationshipObverse());
  Object idValue=idProperty != null ? relationshipContext.getRelationshipPropertiesPropertyAccessor(relatedValueToStore).getProperty(idProperty) : null;
  boolean isNewRelationship=idValue == null;
  CreateRelationshipStatementHolder statementHolder=neo4jMappingContext.createStatement(sourceEntity,relationshipContext,relatedValueToStore,isNewRelationship);
  return neo4jClient.query(renderer.render(statementHolder.getStatement())).bind(convertIdValues(sourceEntity.getRequiredIdProperty(),fromId)).to(Constants.FROM_ID_PARAMETER_NAME).bind(relatedInternalId).to(Constants.TO_ID_PARAMETER_NAME).bind(idValue).to(Constants.NAME_OF_KNOWN_RELATIONSHIP_PARAM).bindAll(statementHolder.getProperties()).fetchAs(Long.class).one().flatMap(relationshipInternalId -> {
    if (idProperty != null && isNewRelationship) {
      relationshipContext.getRelationshipPropertiesPropertyAccessor(relatedValueToStore).setProperty(idProperty,relationshipInternalId);
    }
    Mono<Object> nestedRelationshipsSignal=null;
    if (processState != ProcessState.PROCESSED_ALL_VALUES) {
      nestedRelationshipsSignal=processNestedRelations(targetEntity,targetPropertyAccessor,targetEntity.isNew(newRelatedObject),stateMachine,dynamicRelationship ? PropertyFilter.acceptAll() : includeProperty,currentPropertyPath);
    }
    Mono<Object> getRelationshipOrRelationshipPropertiesObject=Mono.fromSupplier(() -> MappingSupport.getRelationshipOrRelationshipPropertiesObject(neo4jMappingContext,relationshipDescription.hasRelationshipProperties(),relationshipProperty.isDynamicAssociation(),relatedValueToStore,targetPropertyAccessor));
    return nestedRelationshipsSignal == null ? getRelationshipOrRelationshipPropertiesObject : nestedRelationshipsSignal.then(getRelationshipOrRelationshipPropertiesObject);
  }
);
}
 @AT@ 44157 @LENGTH@ 80
------INS SimpleType@@Object @TO@ VariableDeclarationStatement@@Object actualRelatedId=targetPropertyAccessor.getProperty(requiredIdProperty); @AT@ 44157 @LENGTH@ 6
------INS VariableDeclarationFragment@@actualRelatedId=targetPropertyAccessor.getProperty(requiredIdProperty) @TO@ VariableDeclarationStatement@@Object actualRelatedId=targetPropertyAccessor.getProperty(requiredIdProperty); @AT@ 44164 @LENGTH@ 72
---------INS SimpleName@@actualRelatedId @TO@ VariableDeclarationFragment@@actualRelatedId=targetPropertyAccessor.getProperty(requiredIdProperty) @AT@ 44164 @LENGTH@ 15
---------MOV MethodInvocation@@targetPropertyAccessor.getProperty(requiredIdProperty) @TO@ VariableDeclarationFragment@@actualRelatedId=targetPropertyAccessor.getProperty(requiredIdProperty) @AT@ 44350 @LENGTH@ 54
---UPD IfStatement@@if (targetEntity.isUsingInternalIds()) {  Neo4jPersistentProperty requiredIdProperty=targetEntity.getRequiredIdProperty();  if (relatedInternalId == null && targetPropertyAccessor.getProperty(requiredIdProperty) != null) {    relatedInternalId=(Long)targetPropertyAccessor.getProperty(requiredIdProperty);  } else   if (targetPropertyAccessor.getProperty(requiredIdProperty) == null) {    targetPropertyAccessor.setProperty(requiredIdProperty,relatedInternalId);  }} @TO@ if (targetEntity.isUsingInternalIds()) {  if (relatedInternalId == null && actualRelatedId != null) {    relatedInternalId=(Long)targetPropertyAccessor.getProperty(requiredIdProperty);  } else   if (actualRelatedId == null) {    targetPropertyAccessor.setProperty(requiredIdProperty,relatedInternalId);  }} @AT@ 44162 @LENGTH@ 543
------UPD Block@@ThenBody:{  Neo4jPersistentProperty requiredIdProperty=targetEntity.getRequiredIdProperty();  if (relatedInternalId == null && targetPropertyAccessor.getProperty(requiredIdProperty) != null) {    relatedInternalId=(Long)targetPropertyAccessor.getProperty(requiredIdProperty);  } else   if (targetPropertyAccessor.getProperty(requiredIdProperty) == null) {    targetPropertyAccessor.setProperty(requiredIdProperty,relatedInternalId);  }} @TO@ ThenBody:{  if (relatedInternalId == null && actualRelatedId != null) {    relatedInternalId=(Long)targetPropertyAccessor.getProperty(requiredIdProperty);  } else   if (actualRelatedId == null) {    targetPropertyAccessor.setProperty(requiredIdProperty,relatedInternalId);  }} @AT@ 44201 @LENGTH@ 504
---------UPD IfStatement@@if (relatedInternalId == null && targetPropertyAccessor.getProperty(requiredIdProperty) != null) {  relatedInternalId=(Long)targetPropertyAccessor.getProperty(requiredIdProperty);} else if (targetPropertyAccessor.getProperty(requiredIdProperty) == null) {  targetPropertyAccessor.setProperty(requiredIdProperty,relatedInternalId);} @TO@ if (relatedInternalId == null && actualRelatedId != null) {  relatedInternalId=(Long)targetPropertyAccessor.getProperty(requiredIdProperty);} else if (actualRelatedId == null) {  targetPropertyAccessor.setProperty(requiredIdProperty,relatedInternalId);} @AT@ 44306 @LENGTH@ 388
------------UPD InfixExpression@@relatedInternalId == null && targetPropertyAccessor.getProperty(requiredIdProperty) != null @TO@ relatedInternalId == null && actualRelatedId != null @AT@ 44310 @LENGTH@ 102
---------------UPD InfixExpression@@targetPropertyAccessor.getProperty(requiredIdProperty) != null @TO@ actualRelatedId != null @AT@ 44350 @LENGTH@ 62
------------------INS SimpleName@@actualRelatedId @TO@ InfixExpression@@targetPropertyAccessor.getProperty(requiredIdProperty) != null @AT@ 44428 @LENGTH@ 15
------------UPD Block@@ElseBody:if (targetPropertyAccessor.getProperty(requiredIdProperty) == null) {  targetPropertyAccessor.setProperty(requiredIdProperty,relatedInternalId);} @TO@ ElseBody:if (actualRelatedId == null) {  targetPropertyAccessor.setProperty(requiredIdProperty,relatedInternalId);} @AT@ 44527 @LENGTH@ 167
---------------UPD IfStatement@@if (targetPropertyAccessor.getProperty(requiredIdProperty) == null) {  targetPropertyAccessor.setProperty(requiredIdProperty,relatedInternalId);} @TO@ if (actualRelatedId == null) {  targetPropertyAccessor.setProperty(requiredIdProperty,relatedInternalId);} @AT@ 44527 @LENGTH@ 167
------------------UPD InfixExpression@@targetPropertyAccessor.getProperty(requiredIdProperty) == null @TO@ actualRelatedId == null @AT@ 44531 @LENGTH@ 62
---------------------DEL MethodInvocation@@targetPropertyAccessor.getProperty(requiredIdProperty) @AT@ 44531 @LENGTH@ 54
------------------------DEL SimpleName@@Name:targetPropertyAccessor @AT@ 44531 @LENGTH@ 22
------------------------DEL SimpleName@@MethodName:getProperty:[requiredIdProperty] @AT@ 44554 @LENGTH@ 31
---------------------------DEL SimpleName@@requiredIdProperty @AT@ 44566 @LENGTH@ 18
---------------------INS SimpleName@@actualRelatedId @TO@ InfixExpression@@targetPropertyAccessor.getProperty(requiredIdProperty) == null @AT@ 44570 @LENGTH@ 15
---MOV VariableDeclarationStatement@@Neo4jPersistentProperty requiredIdProperty=targetEntity.getRequiredIdProperty(); @TO@ LambdaExpression@@idAndEntity -> {
  Long relatedInternalId=idAndEntity.getT1().get();
  Entity savedEntity=idAndEntity.getT2().get();
  PersistentPropertyAccessor<?> targetPropertyAccessor=targetEntity.getPropertyAccessor(newRelatedObject);
  if (targetEntity.isUsingInternalIds()) {
    Neo4jPersistentProperty requiredIdProperty=targetEntity.getRequiredIdProperty();
    if (relatedInternalId == null && targetPropertyAccessor.getProperty(requiredIdProperty) != null) {
      relatedInternalId=(Long)targetPropertyAccessor.getProperty(requiredIdProperty);
    }
 else     if (targetPropertyAccessor.getProperty(requiredIdProperty) == null) {
      targetPropertyAccessor.setProperty(requiredIdProperty,relatedInternalId);
    }
  }
  if (savedEntity != null) {
    TemplateSupport.updateVersionPropertyIfPossible(targetEntity,targetPropertyAccessor,savedEntity);
  }
  stateMachine.markValueAsProcessedAs(relatedObjectBeforeCallbacksApplied,targetPropertyAccessor.getBean());
  stateMachine.markRelationshipAsProcessed(relatedInternalId,relationshipDescription.getRelationshipObverse());
  Object idValue=idProperty != null ? relationshipContext.getRelationshipPropertiesPropertyAccessor(relatedValueToStore).getProperty(idProperty) : null;
  boolean isNewRelationship=idValue == null;
  CreateRelationshipStatementHolder statementHolder=neo4jMappingContext.createStatement(sourceEntity,relationshipContext,relatedValueToStore,isNewRelationship);
  return neo4jClient.query(renderer.render(statementHolder.getStatement())).bind(convertIdValues(sourceEntity.getRequiredIdProperty(),fromId)).to(Constants.FROM_ID_PARAMETER_NAME).bind(relatedInternalId).to(Constants.TO_ID_PARAMETER_NAME).bind(idValue).to(Constants.NAME_OF_KNOWN_RELATIONSHIP_PARAM).bindAll(statementHolder.getProperties()).fetchAs(Long.class).one().flatMap(relationshipInternalId -> {
    if (idProperty != null && isNewRelationship) {
      relationshipContext.getRelationshipPropertiesPropertyAccessor(relatedValueToStore).setProperty(idProperty,relationshipInternalId);
    }
    Mono<Object> nestedRelationshipsSignal=null;
    if (processState != ProcessState.PROCESSED_ALL_VALUES) {
      nestedRelationshipsSignal=processNestedRelations(targetEntity,targetPropertyAccessor,targetEntity.isNew(newRelatedObject),stateMachine,dynamicRelationship ? PropertyFilter.acceptAll() : includeProperty,currentPropertyPath);
    }
    Mono<Object> getRelationshipOrRelationshipPropertiesObject=Mono.fromSupplier(() -> MappingSupport.getRelationshipOrRelationshipPropertiesObject(neo4jMappingContext,relationshipDescription.hasRelationshipProperties(),relationshipProperty.isDynamicAssociation(),relatedValueToStore,targetPropertyAccessor));
    return nestedRelationshipsSignal == null ? getRelationshipOrRelationshipPropertiesObject : nestedRelationshipsSignal.then(getRelationshipOrRelationshipPropertiesObject);
  }
);
}
 @AT@ 44213 @LENGTH@ 82
---UPD ExpressionStatement@@MethodInvocation:stateMachine.markRelationshipAsProcessed(relatedInternalId,relationshipDescription.getRelationshipObverse()) @TO@ MethodInvocation:stateMachine.markRelationshipAsProcessed(actualRelatedId == null ? relatedInternalId : actualRelatedId,relationshipDescription.getRelationshipObverse()) @AT@ 44989 @LENGTH@ 110
------UPD MethodInvocation@@stateMachine.markRelationshipAsProcessed(relatedInternalId,relationshipDescription.getRelationshipObverse()) @TO@ stateMachine.markRelationshipAsProcessed(actualRelatedId == null ? relatedInternalId : actualRelatedId,relationshipDescription.getRelationshipObverse()) @AT@ 44989 @LENGTH@ 109
---------UPD SimpleName@@MethodName:markRelationshipAsProcessed:[relatedInternalId, relationshipDescription.getRelationshipObverse()] @TO@ MethodName:markRelationshipAsProcessed:[actualRelatedId == null ? relatedInternalId : actualRelatedId, relationshipDescription.getRelationshipObverse()] @AT@ 45002 @LENGTH@ 96
------------DEL SimpleName@@relatedInternalId @AT@ 45030 @LENGTH@ 17
------------INS ConditionalExpression@@actualRelatedId == null ? relatedInternalId : actualRelatedId @TO@ SimpleName@@MethodName:markRelationshipAsProcessed:[relatedInternalId, relationshipDescription.getRelationshipObverse()] @AT@ 45031 @LENGTH@ 61
---------------INS InfixExpression@@actualRelatedId == null @TO@ ConditionalExpression@@actualRelatedId == null ? relatedInternalId : actualRelatedId @AT@ 45031 @LENGTH@ 23
------------------INS SimpleName@@actualRelatedId @TO@ InfixExpression@@actualRelatedId == null @AT@ 45031 @LENGTH@ 15
------------------INS Operator@@== @TO@ InfixExpression@@actualRelatedId == null @AT@ 45046 @LENGTH@ 2
------------------INS NullLiteral@@null @TO@ InfixExpression@@actualRelatedId == null @AT@ 45050 @LENGTH@ 4
---------------INS SimpleName@@relatedInternalId @TO@ ConditionalExpression@@actualRelatedId == null ? relatedInternalId : actualRelatedId @AT@ 45057 @LENGTH@ 17
---------------INS SimpleName@@actualRelatedId @TO@ ConditionalExpression@@actualRelatedId == null ? relatedInternalId : actualRelatedId @AT@ 45077 @LENGTH@ 15


UPD TypeDeclaration@@[private]TestComparator, [Comparator<T>] @TO@ [private, static]TestComparator, [Comparator<T>] @AT@ 1111 @LENGTH@ 218
---INS Modifier@@static @TO@ TypeDeclaration@@[private]TestComparator, [Comparator<T>] @AT@ 1119 @LENGTH@ 6


UPD ReturnStatement@@ClassInstanceCreation:new GenericAppenderHelper(table,fileFormat,tmp) @TO@ ClassInstanceCreation:new GenericAppenderHelper(table,fileFormat,tmp,conf) @AT@ 4470 @LENGTH@ 57
---UPD ClassInstanceCreation@@GenericAppenderHelper[table, fileFormat, tmp] @TO@ GenericAppenderHelper[table, fileFormat, tmp, conf] @AT@ 4477 @LENGTH@ 49
------INS SimpleName@@conf @TO@ ClassInstanceCreation@@GenericAppenderHelper[table, fileFormat, tmp] @AT@ 4527 @LENGTH@ 4


UPD ExpressionStatement@@MethodInvocation:assertEquals(3,m.keySet().size()) @TO@ MethodInvocation:assertEquals(3,m.size()) @AT@ 7715 @LENGTH@ 35
---UPD MethodInvocation@@assertEquals(3,m.keySet().size()) @TO@ assertEquals(3,m.size()) @AT@ 7715 @LENGTH@ 34
------UPD SimpleName@@MethodName:assertEquals:[3, m.keySet().size()] @TO@ MethodName:assertEquals:[3, m.size()] @AT@ 7715 @LENGTH@ 34
---------UPD MethodInvocation@@m.keySet().size() @TO@ m.size() @AT@ 7731 @LENGTH@ 17
------------DEL MethodInvocation@@MethodName:keySet:[] @AT@ 7731 @LENGTH@ 10


UPD VariableDeclarationStatement@@final String yaml=type.equals("yaml") ? RestDslGenerator.toYaml(document).generate(context) : RestDslGenerator.toXml(document).generate(context); @TO@ final String yaml=type.equals("yaml") ? RestDslGenerator.toYaml(document).generate(context,generateRoutes) : RestDslGenerator.toXml(document).generate(context); @AT@ 2560 @LENGTH@ 187
---UPD VariableDeclarationFragment@@yaml=type.equals("yaml") ? RestDslGenerator.toYaml(document).generate(context) : RestDslGenerator.toXml(document).generate(context) @TO@ yaml=type.equals("yaml") ? RestDslGenerator.toYaml(document).generate(context,generateRoutes) : RestDslGenerator.toXml(document).generate(context) @AT@ 2573 @LENGTH@ 173
------UPD ConditionalExpression@@type.equals("yaml") ? RestDslGenerator.toYaml(document).generate(context) : RestDslGenerator.toXml(document).generate(context) @TO@ type.equals("yaml") ? RestDslGenerator.toYaml(document).generate(context,generateRoutes) : RestDslGenerator.toXml(document).generate(context) @AT@ 2580 @LENGTH@ 166
---------UPD MethodInvocation@@RestDslGenerator.toYaml(document).generate(context) @TO@ RestDslGenerator.toYaml(document).generate(context,generateRoutes) @AT@ 2622 @LENGTH@ 51
------------UPD SimpleName@@MethodName:generate:[context] @TO@ MethodName:generate:[context, generateRoutes] @AT@ 2656 @LENGTH@ 17
---------------INS SimpleName@@generateRoutes @TO@ SimpleName@@MethodName:generate:[context] @AT@ 2804 @LENGTH@ 14


INS MethodDeclaration@@public, static, MethodTarget, MethodName:of, String name, Object bean, String description, String group,  @TO@ TypeDeclaration@@[public]MethodTarget, [Command] @AT@ 2703 @LENGTH@ 149
---INS Modifier@@public @TO@ MethodDeclaration@@public, static, MethodTarget, MethodName:of, String name, Object bean, String description, String group,  @AT@ 2703 @LENGTH@ 6
---INS Modifier@@static @TO@ MethodDeclaration@@public, static, MethodTarget, MethodName:of, String name, Object bean, String description, String group,  @AT@ 2710 @LENGTH@ 6
---INS SimpleType@@MethodTarget @TO@ MethodDeclaration@@public, static, MethodTarget, MethodName:of, String name, Object bean, String description, String group,  @AT@ 2717 @LENGTH@ 12
---INS SimpleName@@MethodName:of @TO@ MethodDeclaration@@public, static, MethodTarget, MethodName:of, String name, Object bean, String description, String group,  @AT@ 2730 @LENGTH@ 2
---INS SingleVariableDeclaration@@String name @TO@ MethodDeclaration@@public, static, MethodTarget, MethodName:of, String name, Object bean, String description, String group,  @AT@ 2733 @LENGTH@ 11
------INS SimpleType@@String @TO@ SingleVariableDeclaration@@String name @AT@ 2733 @LENGTH@ 6
------INS SimpleName@@name @TO@ SingleVariableDeclaration@@String name @AT@ 2740 @LENGTH@ 4
---INS SingleVariableDeclaration@@Object bean @TO@ MethodDeclaration@@public, static, MethodTarget, MethodName:of, String name, Object bean, String description, String group,  @AT@ 2746 @LENGTH@ 11
------INS SimpleType@@Object @TO@ SingleVariableDeclaration@@Object bean @AT@ 2746 @LENGTH@ 6
------INS SimpleName@@bean @TO@ SingleVariableDeclaration@@Object bean @AT@ 2753 @LENGTH@ 4
---INS SingleVariableDeclaration@@String description @TO@ MethodDeclaration@@public, static, MethodTarget, MethodName:of, String name, Object bean, String description, String group,  @AT@ 2759 @LENGTH@ 18
------INS SimpleType@@String @TO@ SingleVariableDeclaration@@String description @AT@ 2759 @LENGTH@ 6
------INS SimpleName@@description @TO@ SingleVariableDeclaration@@String description @AT@ 2766 @LENGTH@ 11
---INS SingleVariableDeclaration@@String group @TO@ MethodDeclaration@@public, static, MethodTarget, MethodName:of, String name, Object bean, String description, String group,  @AT@ 2779 @LENGTH@ 12
------INS SimpleType@@String @TO@ SingleVariableDeclaration@@String group @AT@ 2779 @LENGTH@ 6
------INS SimpleName@@group @TO@ SingleVariableDeclaration@@String group @AT@ 2786 @LENGTH@ 5
---INS ReturnStatement@@MethodInvocation:of(name,bean,new Help(description,group)) @TO@ MethodDeclaration@@public, static, MethodTarget, MethodName:of, String name, Object bean, String description, String group,  @AT@ 2797 @LENGTH@ 52
------INS MethodInvocation@@of(name,bean,new Help(description,group)) @TO@ ReturnStatement@@MethodInvocation:of(name,bean,new Help(description,group)) @AT@ 2804 @LENGTH@ 44
---------INS SimpleName@@MethodName:of:[name, bean, new Help(description,group)] @TO@ MethodInvocation@@of(name,bean,new Help(description,group)) @AT@ 2804 @LENGTH@ 44
------------INS SimpleName@@name @TO@ SimpleName@@MethodName:of:[name, bean, new Help(description,group)] @AT@ 2807 @LENGTH@ 4
------------INS SimpleName@@bean @TO@ SimpleName@@MethodName:of:[name, bean, new Help(description,group)] @AT@ 2813 @LENGTH@ 4
------------INS ClassInstanceCreation@@Help[description, group] @TO@ SimpleName@@MethodName:of:[name, bean, new Help(description,group)] @AT@ 2819 @LENGTH@ 28
---------------INS New@@new @TO@ ClassInstanceCreation@@Help[description, group] @AT@ 2819 @LENGTH@ 3
---------------INS SimpleType@@Help @TO@ ClassInstanceCreation@@Help[description, group] @AT@ 2823 @LENGTH@ 4
---------------INS SimpleName@@description @TO@ ClassInstanceCreation@@Help[description, group] @AT@ 2828 @LENGTH@ 11
---------------INS SimpleName@@group @TO@ ClassInstanceCreation@@Help[description, group] @AT@ 2841 @LENGTH@ 5


INS IfStatement@@if (commonElementType == TemplateSupport.EmptyIterable.class) {  return Collections.emptyList();} @TO@ MethodDeclaration@@public, List<R>, T, R, MethodName:saveAllAs, Iterable<T> instances, Class<R> resultType,  @AT@ 22117 @LENGTH@ 102
---INS InfixExpression@@commonElementType == TemplateSupport.EmptyIterable.class @TO@ IfStatement@@if (commonElementType == TemplateSupport.EmptyIterable.class) {  return Collections.emptyList();} @AT@ 22121 @LENGTH@ 56
------INS SimpleName@@commonElementType @TO@ InfixExpression@@commonElementType == TemplateSupport.EmptyIterable.class @AT@ 22121 @LENGTH@ 17
------INS Operator@@== @TO@ InfixExpression@@commonElementType == TemplateSupport.EmptyIterable.class @AT@ 22138 @LENGTH@ 2
------INS TypeLiteral@@TemplateSupport.EmptyIterable.class @TO@ InfixExpression@@commonElementType == TemplateSupport.EmptyIterable.class @AT@ 22142 @LENGTH@ 35
---INS Block@@ThenBody:{  return Collections.emptyList();} @TO@ IfStatement@@if (commonElementType == TemplateSupport.EmptyIterable.class) {  return Collections.emptyList();} @AT@ 22179 @LENGTH@ 40
------INS ReturnStatement@@MethodInvocation:Collections.emptyList() @TO@ Block@@ThenBody:{  return Collections.emptyList();} @AT@ 22184 @LENGTH@ 31
---------INS MethodInvocation@@Collections.emptyList() @TO@ ReturnStatement@@MethodInvocation:Collections.emptyList() @AT@ 22191 @LENGTH@ 23
------------INS SimpleName@@Name:Collections @TO@ MethodInvocation@@Collections.emptyList() @AT@ 22191 @LENGTH@ 11
------------INS SimpleName@@MethodName:emptyList:[] @TO@ MethodInvocation@@Collections.emptyList() @AT@ 22203 @LENGTH@ 11


INS MethodDeclaration@@public, static, Path, MethodName:makeRelative, Path parentPath, Path childPath,  @TO@ TypeDeclaration@@[public, final]FileUtils,  @AT@ 13174 @LENGTH@ 425
---INS Modifier@@public @TO@ MethodDeclaration@@public, static, Path, MethodName:makeRelative, Path parentPath, Path childPath,  @AT@ 13174 @LENGTH@ 6
---INS Modifier@@static @TO@ MethodDeclaration@@public, static, Path, MethodName:makeRelative, Path parentPath, Path childPath,  @AT@ 13181 @LENGTH@ 6
---INS SimpleType@@Path @TO@ MethodDeclaration@@public, static, Path, MethodName:makeRelative, Path parentPath, Path childPath,  @AT@ 13188 @LENGTH@ 4
---INS SimpleName@@MethodName:makeRelative @TO@ MethodDeclaration@@public, static, Path, MethodName:makeRelative, Path parentPath, Path childPath,  @AT@ 13193 @LENGTH@ 12
---INS SingleVariableDeclaration@@Path parentPath @TO@ MethodDeclaration@@public, static, Path, MethodName:makeRelative, Path parentPath, Path childPath,  @AT@ 13206 @LENGTH@ 15
------INS SimpleType@@Path @TO@ SingleVariableDeclaration@@Path parentPath @AT@ 13206 @LENGTH@ 4
------INS SimpleName@@parentPath @TO@ SingleVariableDeclaration@@Path parentPath @AT@ 13211 @LENGTH@ 10
---INS SingleVariableDeclaration@@Path childPath @TO@ MethodDeclaration@@public, static, Path, MethodName:makeRelative, Path parentPath, Path childPath,  @AT@ 13223 @LENGTH@ 14
------INS SimpleType@@Path @TO@ SingleVariableDeclaration@@Path childPath @AT@ 13223 @LENGTH@ 4
------INS SimpleName@@childPath @TO@ SingleVariableDeclaration@@Path childPath @AT@ 13228 @LENGTH@ 9
---INS VariableDeclarationStatement@@String parentString=parentPath.toString().endsWith(Path.SEPARATOR) ? parentPath.toString() : parentPath.toString() + Path.SEPARATOR; @TO@ MethodDeclaration@@public, static, Path, MethodName:makeRelative, Path parentPath, Path childPath,  @AT@ 13245 @LENGTH@ 142
------INS SimpleType@@String @TO@ VariableDeclarationStatement@@String parentString=parentPath.toString().endsWith(Path.SEPARATOR) ? parentPath.toString() : parentPath.toString() + Path.SEPARATOR; @AT@ 13245 @LENGTH@ 6
------INS VariableDeclarationFragment@@parentString=parentPath.toString().endsWith(Path.SEPARATOR) ? parentPath.toString() : parentPath.toString() + Path.SEPARATOR @TO@ VariableDeclarationStatement@@String parentString=parentPath.toString().endsWith(Path.SEPARATOR) ? parentPath.toString() : parentPath.toString() + Path.SEPARATOR; @AT@ 13252 @LENGTH@ 134
---------INS SimpleName@@parentString @TO@ VariableDeclarationFragment@@parentString=parentPath.toString().endsWith(Path.SEPARATOR) ? parentPath.toString() : parentPath.toString() + Path.SEPARATOR @AT@ 13252 @LENGTH@ 12
---------INS ConditionalExpression@@parentPath.toString().endsWith(Path.SEPARATOR) ? parentPath.toString() : parentPath.toString() + Path.SEPARATOR @TO@ VariableDeclarationFragment@@parentString=parentPath.toString().endsWith(Path.SEPARATOR) ? parentPath.toString() : parentPath.toString() + Path.SEPARATOR @AT@ 13275 @LENGTH@ 111
------------INS MethodInvocation@@parentPath.toString().endsWith(Path.SEPARATOR) @TO@ ConditionalExpression@@parentPath.toString().endsWith(Path.SEPARATOR) ? parentPath.toString() : parentPath.toString() + Path.SEPARATOR @AT@ 13275 @LENGTH@ 46
---------------INS MethodInvocation@@MethodName:toString:[] @TO@ MethodInvocation@@parentPath.toString().endsWith(Path.SEPARATOR) @AT@ 13275 @LENGTH@ 21
---------------INS SimpleName@@Name:parentPath @TO@ MethodInvocation@@parentPath.toString().endsWith(Path.SEPARATOR) @AT@ 13275 @LENGTH@ 10
---------------INS SimpleName@@MethodName:endsWith:[Path.SEPARATOR] @TO@ MethodInvocation@@parentPath.toString().endsWith(Path.SEPARATOR) @AT@ 13297 @LENGTH@ 24
------------------INS QualifiedName@@Path.SEPARATOR @TO@ SimpleName@@MethodName:endsWith:[Path.SEPARATOR] @AT@ 13306 @LENGTH@ 14
---------------------INS SimpleName@@Path @TO@ QualifiedName@@Path.SEPARATOR @AT@ 13306 @LENGTH@ 4
---------------------INS SimpleName@@SEPARATOR @TO@ QualifiedName@@Path.SEPARATOR @AT@ 13311 @LENGTH@ 9
------------INS MethodInvocation@@parentPath.toString() @TO@ ConditionalExpression@@parentPath.toString().endsWith(Path.SEPARATOR) ? parentPath.toString() : parentPath.toString() + Path.SEPARATOR @AT@ 13324 @LENGTH@ 21
---------------INS SimpleName@@Name:parentPath @TO@ MethodInvocation@@parentPath.toString() @AT@ 13324 @LENGTH@ 10
---------------INS SimpleName@@MethodName:toString:[] @TO@ MethodInvocation@@parentPath.toString() @AT@ 13335 @LENGTH@ 10
------------INS InfixExpression@@parentPath.toString() + Path.SEPARATOR @TO@ ConditionalExpression@@parentPath.toString().endsWith(Path.SEPARATOR) ? parentPath.toString() : parentPath.toString() + Path.SEPARATOR @AT@ 13348 @LENGTH@ 38
---------------INS MethodInvocation@@parentPath.toString() @TO@ InfixExpression@@parentPath.toString() + Path.SEPARATOR @AT@ 13348 @LENGTH@ 21
------------------INS SimpleName@@Name:parentPath @TO@ MethodInvocation@@parentPath.toString() @AT@ 13348 @LENGTH@ 10
------------------INS SimpleName@@MethodName:toString:[] @TO@ MethodInvocation@@parentPath.toString() @AT@ 13359 @LENGTH@ 10
---------------INS Operator@@+ @TO@ InfixExpression@@parentPath.toString() + Path.SEPARATOR @AT@ 13369 @LENGTH@ 1
---------------INS QualifiedName@@Path.SEPARATOR @TO@ InfixExpression@@parentPath.toString() + Path.SEPARATOR @AT@ 13372 @LENGTH@ 14
------------------INS SimpleName@@Path @TO@ QualifiedName@@Path.SEPARATOR @AT@ 13372 @LENGTH@ 4
------------------INS SimpleName@@SEPARATOR @TO@ QualifiedName@@Path.SEPARATOR @AT@ 13377 @LENGTH@ 9
---INS VariableDeclarationStatement@@String childString=childPath.toString().endsWith(Path.SEPARATOR) ? childPath.toString() : childPath.toString() + Path.SEPARATOR; @TO@ MethodDeclaration@@public, static, Path, MethodName:makeRelative, Path parentPath, Path childPath,  @AT@ 13392 @LENGTH@ 138
------INS SimpleType@@String @TO@ VariableDeclarationStatement@@String childString=childPath.toString().endsWith(Path.SEPARATOR) ? childPath.toString() : childPath.toString() + Path.SEPARATOR; @AT@ 13392 @LENGTH@ 6
------INS VariableDeclarationFragment@@childString=childPath.toString().endsWith(Path.SEPARATOR) ? childPath.toString() : childPath.toString() + Path.SEPARATOR @TO@ VariableDeclarationStatement@@String childString=childPath.toString().endsWith(Path.SEPARATOR) ? childPath.toString() : childPath.toString() + Path.SEPARATOR; @AT@ 13399 @LENGTH@ 130
---------INS SimpleName@@childString @TO@ VariableDeclarationFragment@@childString=childPath.toString().endsWith(Path.SEPARATOR) ? childPath.toString() : childPath.toString() + Path.SEPARATOR @AT@ 13399 @LENGTH@ 11
---------INS ConditionalExpression@@childPath.toString().endsWith(Path.SEPARATOR) ? childPath.toString() : childPath.toString() + Path.SEPARATOR @TO@ VariableDeclarationFragment@@childString=childPath.toString().endsWith(Path.SEPARATOR) ? childPath.toString() : childPath.toString() + Path.SEPARATOR @AT@ 13421 @LENGTH@ 108
------------INS MethodInvocation@@childPath.toString().endsWith(Path.SEPARATOR) @TO@ ConditionalExpression@@childPath.toString().endsWith(Path.SEPARATOR) ? childPath.toString() : childPath.toString() + Path.SEPARATOR @AT@ 13421 @LENGTH@ 45
---------------INS MethodInvocation@@MethodName:toString:[] @TO@ MethodInvocation@@childPath.toString().endsWith(Path.SEPARATOR) @AT@ 13421 @LENGTH@ 20
---------------INS SimpleName@@Name:childPath @TO@ MethodInvocation@@childPath.toString().endsWith(Path.SEPARATOR) @AT@ 13421 @LENGTH@ 9
---------------INS SimpleName@@MethodName:endsWith:[Path.SEPARATOR] @TO@ MethodInvocation@@childPath.toString().endsWith(Path.SEPARATOR) @AT@ 13442 @LENGTH@ 24
------------------INS QualifiedName@@Path.SEPARATOR @TO@ SimpleName@@MethodName:endsWith:[Path.SEPARATOR] @AT@ 13451 @LENGTH@ 14
---------------------INS SimpleName@@Path @TO@ QualifiedName@@Path.SEPARATOR @AT@ 13451 @LENGTH@ 4
---------------------INS SimpleName@@SEPARATOR @TO@ QualifiedName@@Path.SEPARATOR @AT@ 13456 @LENGTH@ 9
------------INS MethodInvocation@@childPath.toString() @TO@ ConditionalExpression@@childPath.toString().endsWith(Path.SEPARATOR) ? childPath.toString() : childPath.toString() + Path.SEPARATOR @AT@ 13469 @LENGTH@ 20
---------------INS SimpleName@@Name:childPath @TO@ MethodInvocation@@childPath.toString() @AT@ 13469 @LENGTH@ 9
---------------INS SimpleName@@MethodName:toString:[] @TO@ MethodInvocation@@childPath.toString() @AT@ 13479 @LENGTH@ 10
------------INS InfixExpression@@childPath.toString() + Path.SEPARATOR @TO@ ConditionalExpression@@childPath.toString().endsWith(Path.SEPARATOR) ? childPath.toString() : childPath.toString() + Path.SEPARATOR @AT@ 13492 @LENGTH@ 37
---------------INS MethodInvocation@@childPath.toString() @TO@ InfixExpression@@childPath.toString() + Path.SEPARATOR @AT@ 13492 @LENGTH@ 20
------------------INS SimpleName@@Name:childPath @TO@ MethodInvocation@@childPath.toString() @AT@ 13492 @LENGTH@ 9
------------------INS SimpleName@@MethodName:toString:[] @TO@ MethodInvocation@@childPath.toString() @AT@ 13502 @LENGTH@ 10
---------------INS Operator@@+ @TO@ InfixExpression@@childPath.toString() + Path.SEPARATOR @AT@ 13512 @LENGTH@ 1
---------------INS QualifiedName@@Path.SEPARATOR @TO@ InfixExpression@@childPath.toString() + Path.SEPARATOR @AT@ 13515 @LENGTH@ 14
------------------INS SimpleName@@Path @TO@ QualifiedName@@Path.SEPARATOR @AT@ 13515 @LENGTH@ 4
------------------INS SimpleName@@SEPARATOR @TO@ QualifiedName@@Path.SEPARATOR @AT@ 13520 @LENGTH@ 9
---INS ReturnStatement@@ClassInstanceCreation:new Path(childString.replaceFirst(parentString,"")) @TO@ MethodDeclaration@@public, static, Path, MethodName:makeRelative, Path parentPath, Path childPath,  @AT@ 13535 @LENGTH@ 60
------INS ClassInstanceCreation@@Path[childString.replaceFirst(parentString,"")] @TO@ ReturnStatement@@ClassInstanceCreation:new Path(childString.replaceFirst(parentString,"")) @AT@ 13542 @LENGTH@ 52
---------INS New@@new @TO@ ClassInstanceCreation@@Path[childString.replaceFirst(parentString,"")] @AT@ 13542 @LENGTH@ 3
---------INS SimpleType@@Path @TO@ ClassInstanceCreation@@Path[childString.replaceFirst(parentString,"")] @AT@ 13546 @LENGTH@ 4
---------INS MethodInvocation@@childString.replaceFirst(parentString,"") @TO@ ClassInstanceCreation@@Path[childString.replaceFirst(parentString,"")] @AT@ 13551 @LENGTH@ 42
------------INS SimpleName@@Name:childString @TO@ MethodInvocation@@childString.replaceFirst(parentString,"") @AT@ 13551 @LENGTH@ 11
------------INS SimpleName@@MethodName:replaceFirst:[parentString, ""] @TO@ MethodInvocation@@childString.replaceFirst(parentString,"") @AT@ 13563 @LENGTH@ 30
---------------INS SimpleName@@parentString @TO@ SimpleName@@MethodName:replaceFirst:[parentString, ""] @AT@ 13576 @LENGTH@ 12
---------------INS StringLiteral@@"" @TO@ SimpleName@@MethodName:replaceFirst:[parentString, ""] @AT@ 13590 @LENGTH@ 2


INS IfStatement@@if (!preserveAbsolutePath) {  final String property=System.getProperty("os.name");  if (property != null) {    final String osName=property.toLowerCase(Locale.ROOT);    if (osName.startsWith("windows")) {      if (fileName.length() > 2) {        final char ch1=fileName.charAt(0);        final char ch2=fileName.charAt(1);        if (ch2 == ':' && (ch1 >= 'a' && ch1 <= 'z' || ch1 >= 'A' && ch1 <= 'Z')) {          fileName=fileName.substring(2);        }      }    } else     if (osName.contains("netware")) {      final int colon=fileName.indexOf(':');      if (colon != -1) {        fileName=fileName.substring(colon + 1);      }    }  }} @TO@ MethodDeclaration@@private, static, String, MethodName:normalizeFileName, String fileName, final boolean preserveAbsolutePath,  @AT@ 57613 @LENGTH@ 1048
---INS PrefixExpression@@!preserveAbsolutePath @TO@ IfStatement@@if (!preserveAbsolutePath) {  final String property=System.getProperty("os.name");  if (property != null) {    final String osName=property.toLowerCase(Locale.ROOT);    if (osName.startsWith("windows")) {      if (fileName.length() > 2) {        final char ch1=fileName.charAt(0);        final char ch2=fileName.charAt(1);        if (ch2 == ':' && (ch1 >= 'a' && ch1 <= 'z' || ch1 >= 'A' && ch1 <= 'Z')) {          fileName=fileName.substring(2);        }      }    } else     if (osName.contains("netware")) {      final int colon=fileName.indexOf(':');      if (colon != -1) {        fileName=fileName.substring(colon + 1);      }    }  }} @AT@ 57617 @LENGTH@ 21
------INS Operator@@! @TO@ PrefixExpression@@!preserveAbsolutePath @AT@ 57617 @LENGTH@ 1
------INS SimpleName@@preserveAbsolutePath @TO@ PrefixExpression@@!preserveAbsolutePath @AT@ 57618 @LENGTH@ 20
---INS Block@@ThenBody:{  final String property=System.getProperty("os.name");  if (property != null) {    final String osName=property.toLowerCase(Locale.ROOT);    if (osName.startsWith("windows")) {      if (fileName.length() > 2) {        final char ch1=fileName.charAt(0);        final char ch2=fileName.charAt(1);        if (ch2 == ':' && (ch1 >= 'a' && ch1 <= 'z' || ch1 >= 'A' && ch1 <= 'Z')) {          fileName=fileName.substring(2);        }      }    } else     if (osName.contains("netware")) {      final int colon=fileName.indexOf(':');      if (colon != -1) {        fileName=fileName.substring(colon + 1);      }    }  }} @TO@ IfStatement@@if (!preserveAbsolutePath) {  final String property=System.getProperty("os.name");  if (property != null) {    final String osName=property.toLowerCase(Locale.ROOT);    if (osName.startsWith("windows")) {      if (fileName.length() > 2) {        final char ch1=fileName.charAt(0);        final char ch2=fileName.charAt(1);        if (ch2 == ':' && (ch1 >= 'a' && ch1 <= 'z' || ch1 >= 'A' && ch1 <= 'Z')) {          fileName=fileName.substring(2);        }      }    } else     if (osName.contains("netware")) {      final int colon=fileName.indexOf(':');      if (colon != -1) {        fileName=fileName.substring(colon + 1);      }    }  }} @AT@ 57640 @LENGTH@ 1021
------INS VariableDeclarationStatement@@final String property=System.getProperty("os.name"); @TO@ Block@@ThenBody:{  final String property=System.getProperty("os.name");  if (property != null) {    final String osName=property.toLowerCase(Locale.ROOT);    if (osName.startsWith("windows")) {      if (fileName.length() > 2) {        final char ch1=fileName.charAt(0);        final char ch2=fileName.charAt(1);        if (ch2 == ':' && (ch1 >= 'a' && ch1 <= 'z' || ch1 >= 'A' && ch1 <= 'Z')) {          fileName=fileName.substring(2);        }      }    } else     if (osName.contains("netware")) {      final int colon=fileName.indexOf(':');      if (colon != -1) {        fileName=fileName.substring(colon + 1);      }    }  }} @AT@ 57654 @LENGTH@ 54
---------INS Modifier@@final @TO@ VariableDeclarationStatement@@final String property=System.getProperty("os.name"); @AT@ 57654 @LENGTH@ 5
---------INS SimpleType@@String @TO@ VariableDeclarationStatement@@final String property=System.getProperty("os.name"); @AT@ 57660 @LENGTH@ 6
---------INS VariableDeclarationFragment@@property=System.getProperty("os.name") @TO@ VariableDeclarationStatement@@final String property=System.getProperty("os.name"); @AT@ 57667 @LENGTH@ 40
------------INS SimpleName@@property @TO@ VariableDeclarationFragment@@property=System.getProperty("os.name") @AT@ 57667 @LENGTH@ 8
------------INS MethodInvocation@@System.getProperty("os.name") @TO@ VariableDeclarationFragment@@property=System.getProperty("os.name") @AT@ 57678 @LENGTH@ 29
---------------INS SimpleName@@Name:System @TO@ MethodInvocation@@System.getProperty("os.name") @AT@ 57678 @LENGTH@ 6
---------------INS SimpleName@@MethodName:getProperty:["os.name"] @TO@ MethodInvocation@@System.getProperty("os.name") @AT@ 57685 @LENGTH@ 22
------------------INS StringLiteral@@"os.name" @TO@ SimpleName@@MethodName:getProperty:["os.name"] @AT@ 57697 @LENGTH@ 9
------MOV IfStatement@@if (!preserveAbsolutePath) {  final String osname=System.getProperty("os.name").toLowerCase(Locale.ENGLISH);  if (osname.startsWith("windows")) {    if (fileName.length() > 2) {      final char ch1=fileName.charAt(0);      final char ch2=fileName.charAt(1);      if (ch2 == ':' && (ch1 >= 'a' && ch1 <= 'z' || ch1 >= 'A' && ch1 <= 'Z')) {        fileName=fileName.substring(2);      }    }  } else   if (osname.contains("netware")) {    final int colon=fileName.indexOf(':');    if (colon != -1) {      fileName=fileName.substring(colon + 1);    }  }} @TO@ Block@@ThenBody:{  final String property=System.getProperty("os.name");  if (property != null) {    final String osName=property.toLowerCase(Locale.ROOT);    if (osName.startsWith("windows")) {      if (fileName.length() > 2) {        final char ch1=fileName.charAt(0);        final char ch2=fileName.charAt(1);        if (ch2 == ':' && (ch1 >= 'a' && ch1 <= 'z' || ch1 >= 'A' && ch1 <= 'Z')) {          fileName=fileName.substring(2);        }      }    } else     if (osName.contains("netware")) {      final int colon=fileName.indexOf(':');      if (colon != -1) {        fileName=fileName.substring(colon + 1);      }    }  }} @AT@ 57663 @LENGTH@ 939
---------INS InfixExpression@@property != null @TO@ IfStatement@@if (!preserveAbsolutePath) {  final String osname=System.getProperty("os.name").toLowerCase(Locale.ENGLISH);  if (osname.startsWith("windows")) {    if (fileName.length() > 2) {      final char ch1=fileName.charAt(0);      final char ch2=fileName.charAt(1);      if (ch2 == ':' && (ch1 >= 'a' && ch1 <= 'z' || ch1 >= 'A' && ch1 <= 'Z')) {        fileName=fileName.substring(2);      }    }  } else   if (osname.contains("netware")) {    final int colon=fileName.indexOf(':');    if (colon != -1) {      fileName=fileName.substring(colon + 1);    }  }} @AT@ 57725 @LENGTH@ 16
------------INS SimpleName@@property @TO@ InfixExpression@@property != null @AT@ 57725 @LENGTH@ 8
------------INS Operator@@!= @TO@ InfixExpression@@property != null @AT@ 57733 @LENGTH@ 2
------------INS NullLiteral@@null @TO@ InfixExpression@@property != null @AT@ 57737 @LENGTH@ 4


UPD ExpressionStatement@@MethodInvocation:exchange.getOut().setBody("Bye " + body) @TO@ MethodInvocation:exchange.getMessage().setBody("Bye " + body) @AT@ 1811 @LENGTH@ 41
---UPD MethodInvocation@@exchange.getOut().setBody("Bye " + body) @TO@ exchange.getMessage().setBody("Bye " + body) @AT@ 1811 @LENGTH@ 40
------UPD MethodInvocation@@MethodName:getOut:[] @TO@ MethodName:getMessage:[] @AT@ 1811 @LENGTH@ 17


UPD ReturnStatement@@ConditionalExpression:metadata instanceof DefaultRevisionEntity ? new DefaultRevisionMetadata((DefaultRevisionEntity)metadata,revisionType) : new AnnotationRevisionMetadata<>(metadata,RevisionNumber.class,RevisionTimestamp.class,revisionType) @TO@ ConditionalExpression:metadata instanceof DefaultRevisionEntity ? new DefaultRevisionMetadata((DefaultRevisionEntity)metadata,revisionType) : new AnnotationRevisionMetadata<>(Hibernate.unproxy(metadata),RevisionNumber.class,RevisionTimestamp.class,revisionType) @AT@ 6975 @LENGTH@ 249
---UPD ConditionalExpression@@metadata instanceof DefaultRevisionEntity ? new DefaultRevisionMetadata((DefaultRevisionEntity)metadata,revisionType) : new AnnotationRevisionMetadata<>(metadata,RevisionNumber.class,RevisionTimestamp.class,revisionType) @TO@ metadata instanceof DefaultRevisionEntity ? new DefaultRevisionMetadata((DefaultRevisionEntity)metadata,revisionType) : new AnnotationRevisionMetadata<>(Hibernate.unproxy(metadata),RevisionNumber.class,RevisionTimestamp.class,revisionType) @AT@ 6982 @LENGTH@ 241
------UPD ClassInstanceCreation@@AnnotationRevisionMetadata<>[metadata, RevisionNumber.class, RevisionTimestamp.class, revisionType] @TO@ AnnotationRevisionMetadata<>[Hibernate.unproxy(metadata), RevisionNumber.class, RevisionTimestamp.class, revisionType] @AT@ 7120 @LENGTH@ 103
---------DEL SimpleName@@metadata @AT@ 7153 @LENGTH@ 8
---------INS MethodInvocation@@Hibernate.unproxy(metadata) @TO@ ClassInstanceCreation@@AnnotationRevisionMetadata<>[metadata, RevisionNumber.class, RevisionTimestamp.class, revisionType] @AT@ 7184 @LENGTH@ 27
------------INS SimpleName@@Name:Hibernate @TO@ MethodInvocation@@Hibernate.unproxy(metadata) @AT@ 7184 @LENGTH@ 9
------------INS SimpleName@@MethodName:unproxy:[metadata] @TO@ MethodInvocation@@Hibernate.unproxy(metadata) @AT@ 7194 @LENGTH@ 17
---------------INS SimpleName@@metadata @TO@ SimpleName@@MethodName:unproxy:[metadata] @AT@ 7202 @LENGTH@ 8


UPD VariableDeclarationStatement@@final Object[] result=new Object[]{"one","one","two","two","three","three"}; @TO@ final Object[] result={"one","one","two","two","three","three"}; @AT@ 4643 @LENGTH@ 118
---UPD VariableDeclarationFragment@@result=new Object[]{"one","one","two","two","three","three"} @TO@ result={"one","one","two","two","three","three"} @AT@ 4658 @LENGTH@ 102
------DEL ArrayCreation@@new Object[]{"one","one","two","two","three","three"} @AT@ 4667 @LENGTH@ 93
---------DEL ArrayType@@Object[] @AT@ 4671 @LENGTH@ 8
------------DEL SimpleType@@Object @AT@ 4671 @LENGTH@ 6
---------DEL ArrayInitializer@@{"one","one","two","two","three","three"} @AT@ 4680 @LENGTH@ 80
------INS ArrayInitializer@@{"one","one","two","two","three","three"} @TO@ VariableDeclarationFragment@@result=new Object[]{"one","one","two","two","three","three"} @AT@ 4667 @LENGTH@ 80
---------MOV StringLiteral@@"one" @TO@ ArrayInitializer@@{"one","one","two","two","three","three"} @AT@ 4694 @LENGTH@ 5
---------MOV StringLiteral@@"one" @TO@ ArrayInitializer@@{"one","one","two","two","three","three"} @AT@ 4701 @LENGTH@ 5
---------MOV StringLiteral@@"two" @TO@ ArrayInitializer@@{"one","one","two","two","three","three"} @AT@ 4708 @LENGTH@ 5
---------MOV StringLiteral@@"two" @TO@ ArrayInitializer@@{"one","one","two","two","three","three"} @AT@ 4715 @LENGTH@ 5
---------MOV StringLiteral@@"three" @TO@ ArrayInitializer@@{"one","one","two","two","three","three"} @AT@ 4734 @LENGTH@ 7
---------MOV StringLiteral@@"three" @TO@ ArrayInitializer@@{"one","one","two","two","three","three"} @AT@ 4743 @LENGTH@ 7


UPD Block@@ElseBody:{  messageConverter.populateRabbitExchange(exchange,null,holder.getProperties(),holder.getMessage(),true,endpoint.isAllowMessageBodySerialization());  if (holder.getOriginalCorrelationId() != null) {    if (exchange.hasOut()) {      exchange.getOut().setHeader(RabbitMQConstants.CORRELATIONID,holder.getOriginalCorrelationId());    } else {      exchange.getIn().setHeader(RabbitMQConstants.CORRELATIONID,holder.getOriginalCorrelationId());    }  }} @TO@ ElseBody:{  messageConverter.populateRabbitExchange(exchange,null,holder.getProperties(),holder.getMessage(),true,endpoint.isAllowMessageBodySerialization());  if (holder.getOriginalCorrelationId() != null) {    exchange.getMessage().setHeader(RabbitMQConstants.CORRELATIONID,holder.getOriginalCorrelationId());  }} @AT@ 7299 @LENGTH@ 851
---DEL IfStatement@@if (holder.getOriginalCorrelationId() != null) {  if (exchange.hasOut()) {    exchange.getOut().setHeader(RabbitMQConstants.CORRELATIONID,holder.getOriginalCorrelationId());  } else {    exchange.getIn().setHeader(RabbitMQConstants.CORRELATIONID,holder.getOriginalCorrelationId());  }} @AT@ 7633 @LENGTH@ 499
------DEL Block@@ThenBody:{  if (exchange.hasOut()) {    exchange.getOut().setHeader(RabbitMQConstants.CORRELATIONID,holder.getOriginalCorrelationId());  } else {    exchange.getIn().setHeader(RabbitMQConstants.CORRELATIONID,holder.getOriginalCorrelationId());  }} @AT@ 7680 @LENGTH@ 452
---MOV IfStatement@@if (exchange.hasOut()) {  exchange.getOut().setHeader(RabbitMQConstants.CORRELATIONID,holder.getOriginalCorrelationId());} else {  exchange.getIn().setHeader(RabbitMQConstants.CORRELATIONID,holder.getOriginalCorrelationId());} @TO@ Block@@ElseBody:{  messageConverter.populateRabbitExchange(exchange,null,holder.getProperties(),holder.getMessage(),true,endpoint.isAllowMessageBodySerialization());  if (holder.getOriginalCorrelationId() != null) {    if (exchange.hasOut()) {      exchange.getOut().setHeader(RabbitMQConstants.CORRELATIONID,holder.getOriginalCorrelationId());    } else {      exchange.getIn().setHeader(RabbitMQConstants.CORRELATIONID,holder.getOriginalCorrelationId());    }  }} @AT@ 7706 @LENGTH@ 404
------MOV InfixExpression@@holder.getOriginalCorrelationId() != null @TO@ IfStatement@@if (exchange.hasOut()) {  exchange.getOut().setHeader(RabbitMQConstants.CORRELATIONID,holder.getOriginalCorrelationId());} else {  exchange.getIn().setHeader(RabbitMQConstants.CORRELATIONID,holder.getOriginalCorrelationId());} @AT@ 7637 @LENGTH@ 41
------DEL MethodInvocation@@exchange.hasOut() @AT@ 7710 @LENGTH@ 17
---------DEL SimpleName@@Name:exchange @AT@ 7710 @LENGTH@ 8
---------DEL SimpleName@@MethodName:hasOut:[] @AT@ 7719 @LENGTH@ 8
------UPD Block@@ThenBody:{  exchange.getOut().setHeader(RabbitMQConstants.CORRELATIONID,holder.getOriginalCorrelationId());} @TO@ ThenBody:{  exchange.getMessage().setHeader(RabbitMQConstants.CORRELATIONID,holder.getOriginalCorrelationId());} @AT@ 7729 @LENGTH@ 188
---------UPD ExpressionStatement@@MethodInvocation:exchange.getOut().setHeader(RabbitMQConstants.CORRELATIONID,holder.getOriginalCorrelationId()) @TO@ MethodInvocation:exchange.getMessage().setHeader(RabbitMQConstants.CORRELATIONID,holder.getOriginalCorrelationId()) @AT@ 7759 @LENGTH@ 132
------------UPD MethodInvocation@@exchange.getOut().setHeader(RabbitMQConstants.CORRELATIONID,holder.getOriginalCorrelationId()) @TO@ exchange.getMessage().setHeader(RabbitMQConstants.CORRELATIONID,holder.getOriginalCorrelationId()) @AT@ 7759 @LENGTH@ 131
---------------UPD MethodInvocation@@MethodName:getOut:[] @TO@ MethodName:getMessage:[] @AT@ 7759 @LENGTH@ 17
------DEL Block@@ElseBody:{  exchange.getIn().setHeader(RabbitMQConstants.CORRELATIONID,holder.getOriginalCorrelationId());} @AT@ 7923 @LENGTH@ 187
---------DEL ExpressionStatement@@MethodInvocation:exchange.getIn().setHeader(RabbitMQConstants.CORRELATIONID,holder.getOriginalCorrelationId()) @AT@ 7953 @LENGTH@ 131
------------DEL MethodInvocation@@exchange.getIn().setHeader(RabbitMQConstants.CORRELATIONID,holder.getOriginalCorrelationId()) @AT@ 7953 @LENGTH@ 130
---------------DEL MethodInvocation@@MethodName:getIn:[] @AT@ 7953 @LENGTH@ 16
---------------DEL SimpleName@@Name:exchange @AT@ 7953 @LENGTH@ 8
---------------DEL SimpleName@@MethodName:setHeader:[RabbitMQConstants.CORRELATIONID, holder.getOriginalCorrelationId()] @AT@ 7970 @LENGTH@ 113
------------------DEL QualifiedName@@RabbitMQConstants.CORRELATIONID @AT@ 7980 @LENGTH@ 31
---------------------DEL SimpleName@@RabbitMQConstants @AT@ 7980 @LENGTH@ 17
---------------------DEL SimpleName@@CORRELATIONID @AT@ 7998 @LENGTH@ 13
------------------DEL MethodInvocation@@holder.getOriginalCorrelationId() @AT@ 8049 @LENGTH@ 33
---------------------DEL SimpleName@@Name:holder @AT@ 8049 @LENGTH@ 6
---------------------DEL SimpleName@@MethodName:getOriginalCorrelationId:[] @AT@ 8056 @LENGTH@ 26


UPD VariableDeclarationStatement@@final ByteBuffer encoded=PASSWORD_ENCODER.encode(CharBuffer.wrap(chars)); @TO@ final ByteBuffer encoded=UTF_16LE.encode(CharBuffer.wrap(chars)); @AT@ 85512 @LENGTH@ 75
---UPD VariableDeclarationFragment@@encoded=PASSWORD_ENCODER.encode(CharBuffer.wrap(chars)) @TO@ encoded=UTF_16LE.encode(CharBuffer.wrap(chars)) @AT@ 85529 @LENGTH@ 57
------UPD MethodInvocation@@PASSWORD_ENCODER.encode(CharBuffer.wrap(chars)) @TO@ UTF_16LE.encode(CharBuffer.wrap(chars)) @AT@ 85539 @LENGTH@ 47
---------UPD SimpleName@@Name:PASSWORD_ENCODER @TO@ Name:UTF_16LE @AT@ 85539 @LENGTH@ 16


UPD IfStatement@@if (separatorIndex != -1) {  int consumersToSet=Integer.parseInt(concurrency.substring(0,separatorIndex));  int maxConsumersToSet=Integer.parseInt(concurrency.substring(separatorIndex + 1));  Assert.isTrue(maxConsumersToSet >= consumersToSet,"'maxConcurrentConsumers' value must be at least 'concurrentConsumers'");  this.concurrentConsumers=1;  this.maxConcurrentConsumers=null;  setConcurrentConsumers(consumersToSet);  setMaxConcurrentConsumers(maxConsumersToSet);} else {  setConcurrentConsumers(Integer.parseInt(concurrency));} @TO@ if (separatorIndex != -1) {  int consumersToSet=Integer.parseInt(concurrency.substring(0,separatorIndex));  int maxConsumersToSet=Integer.parseInt(concurrency.substring(separatorIndex + 1));  Assert.isTrue(maxConsumersToSet >= consumersToSet,"'maxConcurrentConsumers' value must be at least 'concurrentConsumers'");  this.maxConcurrentConsumers=null;  setConcurrentConsumers(consumersToSet);  setMaxConcurrentConsumers(maxConsumersToSet);} else {  setConcurrentConsumers(Integer.parseInt(concurrency));} @AT@ 8952 @LENGTH@ 583
---UPD Block@@ThenBody:{  int consumersToSet=Integer.parseInt(concurrency.substring(0,separatorIndex));  int maxConsumersToSet=Integer.parseInt(concurrency.substring(separatorIndex + 1));  Assert.isTrue(maxConsumersToSet >= consumersToSet,"'maxConcurrentConsumers' value must be at least 'concurrentConsumers'");  this.concurrentConsumers=1;  this.maxConcurrentConsumers=null;  setConcurrentConsumers(consumersToSet);  setMaxConcurrentConsumers(maxConsumersToSet);} @TO@ ThenBody:{  int consumersToSet=Integer.parseInt(concurrency.substring(0,separatorIndex));  int maxConsumersToSet=Integer.parseInt(concurrency.substring(separatorIndex + 1));  Assert.isTrue(maxConsumersToSet >= consumersToSet,"'maxConcurrentConsumers' value must be at least 'concurrentConsumers'");  this.maxConcurrentConsumers=null;  setConcurrentConsumers(consumersToSet);  setMaxConcurrentConsumers(maxConsumersToSet);} @AT@ 8978 @LENGTH@ 483
------DEL ExpressionStatement@@Assignment:this.concurrentConsumers=1 @AT@ 9293 @LENGTH@ 29
---------DEL Assignment@@this.concurrentConsumers=1 @AT@ 9293 @LENGTH@ 28
------------DEL FieldAccess@@this.concurrentConsumers @AT@ 9293 @LENGTH@ 24
---------------DEL ThisExpression@@this @AT@ 9293 @LENGTH@ 4
---------------DEL SimpleName@@concurrentConsumers @AT@ 9298 @LENGTH@ 19
------------DEL Operator@@= @AT@ 9317 @LENGTH@ 1
------------DEL NumberLiteral@@1 @AT@ 9320 @LENGTH@ 1


UPD TryStatement@@try (Transaction transaction=driver.session().beginTransaction()){  long numberOfRelations=transaction.run(("MATCH (t:%s) WHERE id(t) = $id RETURN size((t)-->(:Person)) as numberOfRelations").formatted(labelOfTestSubject),Values.parameters("id",newPerson.getId())).single().get("numberOfRelations").asLong();  assertThat(numberOfRelations).isEqualTo(2L);  numberOfRelations=transaction.run(("MATCH (t:%s) WHERE id(t) = $id RETURN size((t)-->(:Club)) as numberOfRelations").formatted(labelOfTestSubject),Values.parameters("id",newPerson.getId())).single().get("numberOfRelations").asLong();  assertThat(numberOfRelations).isEqualTo(2L);}  @TO@ try (Transaction transaction=driver.session(bookmarkCapture.createSessionConfig()).beginTransaction()){  long numberOfRelations=transaction.run(("MATCH (t:%s)-[r]->(:Person) WHERE id(t) = $id RETURN count(r) as numberOfRelations").formatted(labelOfTestSubject),Values.parameters("id",newPerson.getId())).single().get("numberOfRelations").asLong();  assertThat(numberOfRelations).isEqualTo(2L);  numberOfRelations=transaction.run(("MATCH (t:%s)-[r]->(:Club) WHERE id(t) = $id RETURN count(r) as numberOfRelations").formatted(labelOfTestSubject),Values.parameters("id",newPerson.getId())).single().get("numberOfRelations").asLong();  assertThat(numberOfRelations).isEqualTo(2L);}  @AT@ 9894 @LENGTH@ 682
---UPD VariableDeclarationExpression@@Transaction transaction=driver.session().beginTransaction() @TO@ Transaction transaction=driver.session(bookmarkCapture.createSessionConfig()).beginTransaction() @AT@ 9899 @LENGTH@ 61
------UPD VariableDeclarationFragment@@transaction=driver.session().beginTransaction() @TO@ transaction=driver.session(bookmarkCapture.createSessionConfig()).beginTransaction() @AT@ 9911 @LENGTH@ 49
---------UPD MethodInvocation@@driver.session().beginTransaction() @TO@ driver.session(bookmarkCapture.createSessionConfig()).beginTransaction() @AT@ 9925 @LENGTH@ 35
------------UPD MethodInvocation@@MethodName:session:[] @TO@ MethodName:session:[bookmarkCapture.createSessionConfig()] @AT@ 9925 @LENGTH@ 16
---------------INS MethodInvocation@@bookmarkCapture.createSessionConfig() @TO@ MethodInvocation@@MethodName:session:[] @AT@ 9940 @LENGTH@ 37
------------------INS SimpleName@@Name:bookmarkCapture @TO@ MethodInvocation@@bookmarkCapture.createSessionConfig() @AT@ 9940 @LENGTH@ 15
------------------INS SimpleName@@MethodName:createSessionConfig:[] @TO@ MethodInvocation@@bookmarkCapture.createSessionConfig() @AT@ 9956 @LENGTH@ 21
---UPD VariableDeclarationStatement@@long numberOfRelations=transaction.run(("MATCH (t:%s) WHERE id(t) = $id RETURN size((t)-->(:Person)) as numberOfRelations").formatted(labelOfTestSubject),Values.parameters("id",newPerson.getId())).single().get("numberOfRelations").asLong(); @TO@ long numberOfRelations=transaction.run(("MATCH (t:%s)-[r]->(:Person) WHERE id(t) = $id RETURN count(r) as numberOfRelations").formatted(labelOfTestSubject),Values.parameters("id",newPerson.getId())).single().get("numberOfRelations").asLong(); @AT@ 9967 @LENGTH@ 256
------UPD VariableDeclarationFragment@@numberOfRelations=transaction.run(("MATCH (t:%s) WHERE id(t) = $id RETURN size((t)-->(:Person)) as numberOfRelations").formatted(labelOfTestSubject),Values.parameters("id",newPerson.getId())).single().get("numberOfRelations").asLong() @TO@ numberOfRelations=transaction.run(("MATCH (t:%s)-[r]->(:Person) WHERE id(t) = $id RETURN count(r) as numberOfRelations").formatted(labelOfTestSubject),Values.parameters("id",newPerson.getId())).single().get("numberOfRelations").asLong() @AT@ 9972 @LENGTH@ 250
---------UPD MethodInvocation@@transaction.run(("MATCH (t:%s) WHERE id(t) = $id RETURN size((t)-->(:Person)) as numberOfRelations").formatted(labelOfTestSubject),Values.parameters("id",newPerson.getId())).single().get("numberOfRelations").asLong() @TO@ transaction.run(("MATCH (t:%s)-[r]->(:Person) WHERE id(t) = $id RETURN count(r) as numberOfRelations").formatted(labelOfTestSubject),Values.parameters("id",newPerson.getId())).single().get("numberOfRelations").asLong() @AT@ 9992 @LENGTH@ 230
------------UPD MethodInvocation@@MethodName:run:[("MATCH (t:%s) WHERE id(t) = $id RETURN size((t)-->(:Person)) as numberOfRelations").formatted(labelOfTestSubject), Values.parameters("id",newPerson.getId())] @TO@ MethodName:run:[("MATCH (t:%s)-[r]->(:Person) WHERE id(t) = $id RETURN count(r) as numberOfRelations").formatted(labelOfTestSubject), Values.parameters("id",newPerson.getId())] @AT@ 9992 @LENGTH@ 181
---------------UPD MethodInvocation@@("MATCH (t:%s) WHERE id(t) = $id RETURN size((t)-->(:Person)) as numberOfRelations").formatted(labelOfTestSubject) @TO@ ("MATCH (t:%s)-[r]->(:Person) WHERE id(t) = $id RETURN count(r) as numberOfRelations").formatted(labelOfTestSubject) @AT@ 10014 @LENGTH@ 114
------------------UPD ParenthesizedExpression@@("MATCH (t:%s) WHERE id(t) = $id RETURN size((t)-->(:Person)) as numberOfRelations") @TO@ ("MATCH (t:%s)-[r]->(:Person) WHERE id(t) = $id RETURN count(r) as numberOfRelations") @AT@ 10014 @LENGTH@ 84
---------------------UPD StringLiteral@@"MATCH (t:%s) WHERE id(t) = $id RETURN size((t)-->(:Person)) as numberOfRelations" @TO@ "MATCH (t:%s)-[r]->(:Person) WHERE id(t) = $id RETURN count(r) as numberOfRelations" @AT@ 10015 @LENGTH@ 82
---UPD ExpressionStatement@@Assignment:numberOfRelations=transaction.run(("MATCH (t:%s) WHERE id(t) = $id RETURN size((t)-->(:Club)) as numberOfRelations").formatted(labelOfTestSubject),Values.parameters("id",newPerson.getId())).single().get("numberOfRelations").asLong() @TO@ Assignment:numberOfRelations=transaction.run(("MATCH (t:%s)-[r]->(:Club) WHERE id(t) = $id RETURN count(r) as numberOfRelations").formatted(labelOfTestSubject),Values.parameters("id",newPerson.getId())).single().get("numberOfRelations").asLong() @AT@ 10275 @LENGTH@ 249
------UPD Assignment@@numberOfRelations=transaction.run(("MATCH (t:%s) WHERE id(t) = $id RETURN size((t)-->(:Club)) as numberOfRelations").formatted(labelOfTestSubject),Values.parameters("id",newPerson.getId())).single().get("numberOfRelations").asLong() @TO@ numberOfRelations=transaction.run(("MATCH (t:%s)-[r]->(:Club) WHERE id(t) = $id RETURN count(r) as numberOfRelations").formatted(labelOfTestSubject),Values.parameters("id",newPerson.getId())).single().get("numberOfRelations").asLong() @AT@ 10275 @LENGTH@ 248
---------UPD MethodInvocation@@transaction.run(("MATCH (t:%s) WHERE id(t) = $id RETURN size((t)-->(:Club)) as numberOfRelations").formatted(labelOfTestSubject),Values.parameters("id",newPerson.getId())).single().get("numberOfRelations").asLong() @TO@ transaction.run(("MATCH (t:%s)-[r]->(:Club) WHERE id(t) = $id RETURN count(r) as numberOfRelations").formatted(labelOfTestSubject),Values.parameters("id",newPerson.getId())).single().get("numberOfRelations").asLong() @AT@ 10295 @LENGTH@ 228
------------UPD MethodInvocation@@MethodName:run:[("MATCH (t:%s) WHERE id(t) = $id RETURN size((t)-->(:Club)) as numberOfRelations").formatted(labelOfTestSubject), Values.parameters("id",newPerson.getId())] @TO@ MethodName:run:[("MATCH (t:%s)-[r]->(:Club) WHERE id(t) = $id RETURN count(r) as numberOfRelations").formatted(labelOfTestSubject), Values.parameters("id",newPerson.getId())] @AT@ 10295 @LENGTH@ 179
---------------UPD MethodInvocation@@("MATCH (t:%s) WHERE id(t) = $id RETURN size((t)-->(:Club)) as numberOfRelations").formatted(labelOfTestSubject) @TO@ ("MATCH (t:%s)-[r]->(:Club) WHERE id(t) = $id RETURN count(r) as numberOfRelations").formatted(labelOfTestSubject) @AT@ 10317 @LENGTH@ 112
------------------UPD ParenthesizedExpression@@("MATCH (t:%s) WHERE id(t) = $id RETURN size((t)-->(:Club)) as numberOfRelations") @TO@ ("MATCH (t:%s)-[r]->(:Club) WHERE id(t) = $id RETURN count(r) as numberOfRelations") @AT@ 10317 @LENGTH@ 82
---------------------UPD StringLiteral@@"MATCH (t:%s) WHERE id(t) = $id RETURN size((t)-->(:Club)) as numberOfRelations" @TO@ "MATCH (t:%s)-[r]->(:Club) WHERE id(t) = $id RETURN count(r) as numberOfRelations" @AT@ 10318 @LENGTH@ 80


UPD TryStatement@@try (Transaction transaction=driver.session(bookmarkCapture.createSessionConfig()).beginTransaction()){  long numberOfRelations=transaction.run("MATCH (t:%s) WHERE id(t) = $id RETURN size((t)-->(:Person)) as numberOfRelations".formatted(labelOfTestSubject),Values.parameters("id",newPerson.getId())).single().get("numberOfRelations").asLong();  assertThat(numberOfRelations).isEqualTo(2L);  numberOfRelations=transaction.run("MATCH (t:%s) WHERE id(t) = $id RETURN size((t)-->(:Club)) as numberOfRelations".formatted(labelOfTestSubject),Values.parameters("id",newPerson.getId())).single().get("numberOfRelations").asLong();  assertThat(numberOfRelations).isEqualTo(2L);}  @TO@ try (Transaction transaction=driver.session(bookmarkCapture.createSessionConfig()).beginTransaction()){  long numberOfRelations=transaction.run(("MATCH (t:%s)-[r]->(:Person) WHERE id(t) = $id RETURN count(r) as numberOfRelations").formatted(labelOfTestSubject),Values.parameters("id",newPerson.getId())).single().get("numberOfRelations").asLong();  assertThat(numberOfRelations).isEqualTo(2L);  numberOfRelations=transaction.run(("MATCH (t:%s)-[r]->(:Club) WHERE id(t) = $id RETURN count(r) as numberOfRelations").formatted(labelOfTestSubject),Values.parameters("id",newPerson.getId())).single().get("numberOfRelations").asLong();  assertThat(numberOfRelations).isEqualTo(2L);}  @AT@ 9100 @LENGTH@ 715
---UPD VariableDeclarationStatement@@long numberOfRelations=transaction.run("MATCH (t:%s) WHERE id(t) = $id RETURN size((t)-->(:Person)) as numberOfRelations".formatted(labelOfTestSubject),Values.parameters("id",newPerson.getId())).single().get("numberOfRelations").asLong(); @TO@ long numberOfRelations=transaction.run(("MATCH (t:%s)-[r]->(:Person) WHERE id(t) = $id RETURN count(r) as numberOfRelations").formatted(labelOfTestSubject),Values.parameters("id",newPerson.getId())).single().get("numberOfRelations").asLong(); @AT@ 9210 @LENGTH@ 254
------UPD VariableDeclarationFragment@@numberOfRelations=transaction.run("MATCH (t:%s) WHERE id(t) = $id RETURN size((t)-->(:Person)) as numberOfRelations".formatted(labelOfTestSubject),Values.parameters("id",newPerson.getId())).single().get("numberOfRelations").asLong() @TO@ numberOfRelations=transaction.run(("MATCH (t:%s)-[r]->(:Person) WHERE id(t) = $id RETURN count(r) as numberOfRelations").formatted(labelOfTestSubject),Values.parameters("id",newPerson.getId())).single().get("numberOfRelations").asLong() @AT@ 9215 @LENGTH@ 248
---------UPD MethodInvocation@@transaction.run("MATCH (t:%s) WHERE id(t) = $id RETURN size((t)-->(:Person)) as numberOfRelations".formatted(labelOfTestSubject),Values.parameters("id",newPerson.getId())).single().get("numberOfRelations").asLong() @TO@ transaction.run(("MATCH (t:%s)-[r]->(:Person) WHERE id(t) = $id RETURN count(r) as numberOfRelations").formatted(labelOfTestSubject),Values.parameters("id",newPerson.getId())).single().get("numberOfRelations").asLong() @AT@ 9235 @LENGTH@ 228
------------UPD MethodInvocation@@MethodName:run:["MATCH (t:%s) WHERE id(t) = $id RETURN size((t)-->(:Person)) as numberOfRelations".formatted(labelOfTestSubject), Values.parameters("id",newPerson.getId())] @TO@ MethodName:run:[("MATCH (t:%s)-[r]->(:Person) WHERE id(t) = $id RETURN count(r) as numberOfRelations").formatted(labelOfTestSubject), Values.parameters("id",newPerson.getId())] @AT@ 9235 @LENGTH@ 179
---------------UPD MethodInvocation@@"MATCH (t:%s) WHERE id(t) = $id RETURN size((t)-->(:Person)) as numberOfRelations".formatted(labelOfTestSubject) @TO@ ("MATCH (t:%s)-[r]->(:Person) WHERE id(t) = $id RETURN count(r) as numberOfRelations").formatted(labelOfTestSubject) @AT@ 9257 @LENGTH@ 112
------------------INS ParenthesizedExpression@@("MATCH (t:%s)-[r]->(:Person) WHERE id(t) = $id RETURN count(r) as numberOfRelations") @TO@ MethodInvocation@@"MATCH (t:%s) WHERE id(t) = $id RETURN size((t)-->(:Person)) as numberOfRelations".formatted(labelOfTestSubject) @AT@ 9257 @LENGTH@ 86
---------------------INS StringLiteral@@"MATCH (t:%s)-[r]->(:Person) WHERE id(t) = $id RETURN count(r) as numberOfRelations" @TO@ ParenthesizedExpression@@("MATCH (t:%s)-[r]->(:Person) WHERE id(t) = $id RETURN count(r) as numberOfRelations") @AT@ 9258 @LENGTH@ 84
------------------DEL StringLiteral@@"MATCH (t:%s) WHERE id(t) = $id RETURN size((t)-->(:Person)) as numberOfRelations" @AT@ 9257 @LENGTH@ 82
---UPD ExpressionStatement@@Assignment:numberOfRelations=transaction.run("MATCH (t:%s) WHERE id(t) = $id RETURN size((t)-->(:Club)) as numberOfRelations".formatted(labelOfTestSubject),Values.parameters("id",newPerson.getId())).single().get("numberOfRelations").asLong() @TO@ Assignment:numberOfRelations=transaction.run(("MATCH (t:%s)-[r]->(:Club) WHERE id(t) = $id RETURN count(r) as numberOfRelations").formatted(labelOfTestSubject),Values.parameters("id",newPerson.getId())).single().get("numberOfRelations").asLong() @AT@ 9516 @LENGTH@ 247
------UPD Assignment@@numberOfRelations=transaction.run("MATCH (t:%s) WHERE id(t) = $id RETURN size((t)-->(:Club)) as numberOfRelations".formatted(labelOfTestSubject),Values.parameters("id",newPerson.getId())).single().get("numberOfRelations").asLong() @TO@ numberOfRelations=transaction.run(("MATCH (t:%s)-[r]->(:Club) WHERE id(t) = $id RETURN count(r) as numberOfRelations").formatted(labelOfTestSubject),Values.parameters("id",newPerson.getId())).single().get("numberOfRelations").asLong() @AT@ 9516 @LENGTH@ 246
---------UPD MethodInvocation@@transaction.run("MATCH (t:%s) WHERE id(t) = $id RETURN size((t)-->(:Club)) as numberOfRelations".formatted(labelOfTestSubject),Values.parameters("id",newPerson.getId())).single().get("numberOfRelations").asLong() @TO@ transaction.run(("MATCH (t:%s)-[r]->(:Club) WHERE id(t) = $id RETURN count(r) as numberOfRelations").formatted(labelOfTestSubject),Values.parameters("id",newPerson.getId())).single().get("numberOfRelations").asLong() @AT@ 9536 @LENGTH@ 226
------------UPD MethodInvocation@@MethodName:run:["MATCH (t:%s) WHERE id(t) = $id RETURN size((t)-->(:Club)) as numberOfRelations".formatted(labelOfTestSubject), Values.parameters("id",newPerson.getId())] @TO@ MethodName:run:[("MATCH (t:%s)-[r]->(:Club) WHERE id(t) = $id RETURN count(r) as numberOfRelations").formatted(labelOfTestSubject), Values.parameters("id",newPerson.getId())] @AT@ 9536 @LENGTH@ 177
---------------UPD MethodInvocation@@"MATCH (t:%s) WHERE id(t) = $id RETURN size((t)-->(:Club)) as numberOfRelations".formatted(labelOfTestSubject) @TO@ ("MATCH (t:%s)-[r]->(:Club) WHERE id(t) = $id RETURN count(r) as numberOfRelations").formatted(labelOfTestSubject) @AT@ 9558 @LENGTH@ 110
------------------DEL StringLiteral@@"MATCH (t:%s) WHERE id(t) = $id RETURN size((t)-->(:Club)) as numberOfRelations" @AT@ 9558 @LENGTH@ 80
------------------INS ParenthesizedExpression@@("MATCH (t:%s)-[r]->(:Club) WHERE id(t) = $id RETURN count(r) as numberOfRelations") @TO@ MethodInvocation@@"MATCH (t:%s) WHERE id(t) = $id RETURN size((t)-->(:Club)) as numberOfRelations".formatted(labelOfTestSubject) @AT@ 9562 @LENGTH@ 84
---------------------INS StringLiteral@@"MATCH (t:%s)-[r]->(:Club) WHERE id(t) = $id RETURN count(r) as numberOfRelations" @TO@ ParenthesizedExpression@@("MATCH (t:%s)-[r]->(:Club) WHERE id(t) = $id RETURN count(r) as numberOfRelations") @AT@ 9563 @LENGTH@ 82


UPD ExpressionStatement@@MethodInvocation:new CompressorStreamFactory().createCompressorOutputStream("TestOutput1",new ByteArrayOutputStream()) @TO@ MethodInvocation:assertThrows(InvocationConfirmationException.class,() -> new CompressorStreamFactory().createCompressorOutputStream("TestOutput1",new ByteArrayOutputStream())) @AT@ 1406 @LENGTH@ 103
---INS MethodInvocation@@assertThrows(InvocationConfirmationException.class,() -> new CompressorStreamFactory().createCompressorOutputStream("TestOutput1",new ByteArrayOutputStream())) @TO@ ExpressionStatement@@MethodInvocation:new CompressorStreamFactory().createCompressorOutputStream("TestOutput1",new ByteArrayOutputStream()) @AT@ 1581 @LENGTH@ 173
------INS SimpleName@@MethodName:assertThrows:[InvocationConfirmationException.class, () -> new CompressorStreamFactory().createCompressorOutputStream("TestOutput1",new ByteArrayOutputStream())] @TO@ MethodInvocation@@assertThrows(InvocationConfirmationException.class,() -> new CompressorStreamFactory().createCompressorOutputStream("TestOutput1",new ByteArrayOutputStream())) @AT@ 1581 @LENGTH@ 173
---------INS TypeLiteral@@InvocationConfirmationException.class @TO@ SimpleName@@MethodName:assertThrows:[InvocationConfirmationException.class, () -> new CompressorStreamFactory().createCompressorOutputStream("TestOutput1",new ByteArrayOutputStream())] @AT@ 1594 @LENGTH@ 37
---------INS LambdaExpression@@() -> new CompressorStreamFactory().createCompressorOutputStream("TestOutput1",new ByteArrayOutputStream()) @TO@ SimpleName@@MethodName:assertThrows:[InvocationConfirmationException.class, () -> new CompressorStreamFactory().createCompressorOutputStream("TestOutput1",new ByteArrayOutputStream())] @AT@ 1645 @LENGTH@ 108
------------MOV MethodInvocation@@new CompressorStreamFactory().createCompressorOutputStream("TestOutput1",new ByteArrayOutputStream()) @TO@ LambdaExpression@@() -> new CompressorStreamFactory().createCompressorOutputStream("TestOutput1",new ByteArrayOutputStream()) @AT@ 1406 @LENGTH@ 102


INS ExpressionStatement@@MethodInvocation:exchange.getMessage().setBody(doc) @TO@ MethodDeclaration@@public, void, MethodName:process, Exchange exchange, Exception,  @AT@ 1779 @LENGTH@ 35
---MOV MethodInvocation@@exchange.getIn().setBody(doc) @TO@ ExpressionStatement@@MethodInvocation:exchange.getMessage().setBody(doc) @AT@ 1895 @LENGTH@ 29


MOV IfStatement@@if (clusterCommandExecutor != null) {  try {    clusterCommandExecutor.destroy();  } catch (  Exception ex) {    log.warn("Cannot properly close cluster command executor",ex);  }} @TO@ MethodDeclaration@@public, void, MethodName:destroy,  @AT@ 13974 @LENGTH@ 190


UPD ExpressionStatement@@MethodInvocation:httpHeaders.put("x-ms-request-id","12345") @TO@ MethodInvocation:httpHeaders.set("x-ms-request-id","12345") @AT@ 7094 @LENGTH@ 44
---UPD MethodInvocation@@httpHeaders.put("x-ms-request-id","12345") @TO@ httpHeaders.set("x-ms-request-id","12345") @AT@ 7094 @LENGTH@ 43
------UPD SimpleName@@MethodName:put:["x-ms-request-id", "12345"] @TO@ MethodName:set:["x-ms-request-id", "12345"] @AT@ 7106 @LENGTH@ 31


UPD ExpressionStatement@@MethodInvocation:assertThat(type).isNull() @TO@ MethodInvocation:assertThat(type).isEqualTo(TemplateSupport.EmptyIterable.class) @AT@ 1941 @LENGTH@ 26
---UPD MethodInvocation@@assertThat(type).isNull() @TO@ assertThat(type).isEqualTo(TemplateSupport.EmptyIterable.class) @AT@ 1941 @LENGTH@ 25
------UPD SimpleName@@MethodName:isNull:[] @TO@ MethodName:isEqualTo:[TemplateSupport.EmptyIterable.class] @AT@ 1958 @LENGTH@ 8
---------INS TypeLiteral@@TemplateSupport.EmptyIterable.class @TO@ SimpleName@@MethodName:isNull:[] @AT@ 1968 @LENGTH@ 35


UPD ExpressionStatement@@MethodInvocation:assertEquals(5,StreamSupport.stream(MockConsumerInterceptor.recordsCaptured.get(0).records(TOPIC).spliterator(),false).count()) @TO@ MethodInvocation:assertEquals(5,MockConsumerInterceptor.recordsCaptured.stream().flatMap(i -> StreamSupport.stream(i.records(TOPIC).spliterator(),false)).count()) @AT@ 6889 @LENGTH@ 147
---UPD MethodInvocation@@assertEquals(5,StreamSupport.stream(MockConsumerInterceptor.recordsCaptured.get(0).records(TOPIC).spliterator(),false).count()) @TO@ assertEquals(5,MockConsumerInterceptor.recordsCaptured.stream().flatMap(i -> StreamSupport.stream(i.records(TOPIC).spliterator(),false)).count()) @AT@ 6889 @LENGTH@ 146
------UPD SimpleName@@MethodName:assertEquals:[5, StreamSupport.stream(MockConsumerInterceptor.recordsCaptured.get(0).records(TOPIC).spliterator(),false).count()] @TO@ MethodName:assertEquals:[5, MockConsumerInterceptor.recordsCaptured.stream().flatMap(i -> StreamSupport.stream(i.records(TOPIC).spliterator(),false)).count()] @AT@ 6889 @LENGTH@ 146
---------UPD MethodInvocation@@StreamSupport.stream(MockConsumerInterceptor.recordsCaptured.get(0).records(TOPIC).spliterator(),false).count() @TO@ MockConsumerInterceptor.recordsCaptured.stream().flatMap(i -> StreamSupport.stream(i.records(TOPIC).spliterator(),false)).count() @AT@ 6905 @LENGTH@ 129
------------DEL MethodInvocation@@MethodName:stream:[MockConsumerInterceptor.recordsCaptured.get(0).records(TOPIC).spliterator(), false] @AT@ 6905 @LENGTH@ 104
---------------DEL MethodInvocation@@MockConsumerInterceptor.recordsCaptured.get(0).records(TOPIC).spliterator() @AT@ 6926 @LENGTH@ 75
------------------DEL MethodInvocation@@MethodName:get:[0] @AT@ 6926 @LENGTH@ 46
---------------------DEL NumberLiteral@@0 @AT@ 6970 @LENGTH@ 1
------------------DEL QualifiedName@@Name:MockConsumerInterceptor.recordsCaptured @AT@ 6926 @LENGTH@ 39
---------------DEL BooleanLiteral@@false @AT@ 7003 @LENGTH@ 5
------------INS MethodInvocation@@MethodName:stream:[] @TO@ MethodInvocation@@StreamSupport.stream(MockConsumerInterceptor.recordsCaptured.get(0).records(TOPIC).spliterator(),false).count() @AT@ 6905 @LENGTH@ 48
------------INS QualifiedName@@Name:MockConsumerInterceptor.recordsCaptured @TO@ MethodInvocation@@StreamSupport.stream(MockConsumerInterceptor.recordsCaptured.get(0).records(TOPIC).spliterator(),false).count() @AT@ 6905 @LENGTH@ 39
------------DEL SimpleName@@Name:StreamSupport @AT@ 6905 @LENGTH@ 13
------------INS MethodInvocation@@MethodName:flatMap:[i -> StreamSupport.stream(i.records(TOPIC).spliterator(),false)] @TO@ MethodInvocation@@StreamSupport.stream(MockConsumerInterceptor.recordsCaptured.get(0).records(TOPIC).spliterator(),false).count() @AT@ 6905 @LENGTH@ 139
---------------INS LambdaExpression@@i -> StreamSupport.stream(i.records(TOPIC).spliterator(),false) @TO@ MethodInvocation@@MethodName:flatMap:[i -> StreamSupport.stream(i.records(TOPIC).spliterator(),false)] @AT@ 6979 @LENGTH@ 64
------------------INS VariableDeclarationFragment@@i @TO@ LambdaExpression@@i -> StreamSupport.stream(i.records(TOPIC).spliterator(),false) @AT@ 6979 @LENGTH@ 1
---------------------INS SimpleName@@i @TO@ VariableDeclarationFragment@@i @AT@ 6979 @LENGTH@ 1
---------------------INS SimpleName@@i @TO@ VariableDeclarationFragment@@i @AT@ 6979 @LENGTH@ 1
---------------------INS SimpleName@@i @TO@ VariableDeclarationFragment@@i @AT@ 6979 @LENGTH@ 1
---------------------INS SimpleName@@i @TO@ VariableDeclarationFragment@@i @AT@ 6979 @LENGTH@ 1
---------------------INS SimpleName@@i @TO@ VariableDeclarationFragment@@i @AT@ 6979 @LENGTH@ 1
------------------INS MethodInvocation@@StreamSupport.stream(i.records(TOPIC).spliterator(),false) @TO@ LambdaExpression@@i -> StreamSupport.stream(i.records(TOPIC).spliterator(),false) @AT@ 6984 @LENGTH@ 59
---------------------INS SimpleName@@Name:StreamSupport @TO@ MethodInvocation@@StreamSupport.stream(i.records(TOPIC).spliterator(),false) @AT@ 6984 @LENGTH@ 13
---------------------INS SimpleName@@MethodName:stream:[i.records(TOPIC).spliterator(), false] @TO@ MethodInvocation@@StreamSupport.stream(i.records(TOPIC).spliterator(),false) @AT@ 6998 @LENGTH@ 45
------------------------INS MethodInvocation@@i.records(TOPIC).spliterator() @TO@ SimpleName@@MethodName:stream:[i.records(TOPIC).spliterator(), false] @AT@ 7005 @LENGTH@ 30
---------------------------MOV MethodInvocation@@MethodName:records:[TOPIC] @TO@ MethodInvocation@@i.records(TOPIC).spliterator() @AT@ 6926 @LENGTH@ 61
---------------------------MOV MethodInvocation@@MethodName:records:[TOPIC] @TO@ MethodInvocation@@i.records(TOPIC).spliterator() @AT@ 6926 @LENGTH@ 61
---------------------------MOV MethodInvocation@@MethodName:records:[TOPIC] @TO@ MethodInvocation@@i.records(TOPIC).spliterator() @AT@ 6926 @LENGTH@ 61
---------------------------MOV MethodInvocation@@MethodName:records:[TOPIC] @TO@ MethodInvocation@@i.records(TOPIC).spliterator() @AT@ 6926 @LENGTH@ 61
---------------------------MOV MethodInvocation@@MethodName:records:[TOPIC] @TO@ MethodInvocation@@i.records(TOPIC).spliterator() @AT@ 6926 @LENGTH@ 61
---------------------------MOV SimpleName@@MethodName:spliterator:[] @TO@ MethodInvocation@@i.records(TOPIC).spliterator() @AT@ 6988 @LENGTH@ 13
---------------------------MOV SimpleName@@MethodName:spliterator:[] @TO@ MethodInvocation@@i.records(TOPIC).spliterator() @AT@ 6988 @LENGTH@ 13
---------------------------MOV SimpleName@@MethodName:spliterator:[] @TO@ MethodInvocation@@i.records(TOPIC).spliterator() @AT@ 6988 @LENGTH@ 13
---------------------------MOV SimpleName@@MethodName:spliterator:[] @TO@ MethodInvocation@@i.records(TOPIC).spliterator() @AT@ 6988 @LENGTH@ 13
---------------------------MOV SimpleName@@MethodName:spliterator:[] @TO@ MethodInvocation@@i.records(TOPIC).spliterator() @AT@ 6988 @LENGTH@ 13
---------------------------INS SimpleName@@Name:i @TO@ MethodInvocation@@i.records(TOPIC).spliterator() @AT@ 7005 @LENGTH@ 1
------------------------INS BooleanLiteral@@false @TO@ SimpleName@@MethodName:stream:[i.records(TOPIC).spliterator(), false] @AT@ 7037 @LENGTH@ 5
------------INS MethodInvocation@@MethodName:flatMap:[i -> StreamSupport.stream(i.records(TOPIC).spliterator(),false)] @TO@ MethodInvocation@@StreamSupport.stream(MockConsumerInterceptor.recordsCaptured.get(0).records(TOPIC).spliterator(),false).count() @AT@ 6905 @LENGTH@ 139
---------------INS LambdaExpression@@i -> StreamSupport.stream(i.records(TOPIC).spliterator(),false) @TO@ MethodInvocation@@MethodName:flatMap:[i -> StreamSupport.stream(i.records(TOPIC).spliterator(),false)] @AT@ 6979 @LENGTH@ 64
------------------INS VariableDeclarationFragment@@i @TO@ LambdaExpression@@i -> StreamSupport.stream(i.records(TOPIC).spliterator(),false) @AT@ 6979 @LENGTH@ 1
---------------------INS SimpleName@@i @TO@ VariableDeclarationFragment@@i @AT@ 6979 @LENGTH@ 1
---------------------INS SimpleName@@i @TO@ VariableDeclarationFragment@@i @AT@ 6979 @LENGTH@ 1
---------------------INS SimpleName@@i @TO@ VariableDeclarationFragment@@i @AT@ 6979 @LENGTH@ 1
---------------------INS SimpleName@@i @TO@ VariableDeclarationFragment@@i @AT@ 6979 @LENGTH@ 1
---------------------INS SimpleName@@i @TO@ VariableDeclarationFragment@@i @AT@ 6979 @LENGTH@ 1
------------------INS MethodInvocation@@StreamSupport.stream(i.records(TOPIC).spliterator(),false) @TO@ LambdaExpression@@i -> StreamSupport.stream(i.records(TOPIC).spliterator(),false) @AT@ 6984 @LENGTH@ 59
---------------------INS SimpleName@@Name:StreamSupport @TO@ MethodInvocation@@StreamSupport.stream(i.records(TOPIC).spliterator(),false) @AT@ 6984 @LENGTH@ 13
---------------------INS SimpleName@@MethodName:stream:[i.records(TOPIC).spliterator(), false] @TO@ MethodInvocation@@StreamSupport.stream(i.records(TOPIC).spliterator(),false) @AT@ 6998 @LENGTH@ 45
------------------------INS MethodInvocation@@i.records(TOPIC).spliterator() @TO@ SimpleName@@MethodName:stream:[i.records(TOPIC).spliterator(), false] @AT@ 7005 @LENGTH@ 30
---------------------------MOV MethodInvocation@@MethodName:records:[TOPIC] @TO@ MethodInvocation@@i.records(TOPIC).spliterator() @AT@ 6926 @LENGTH@ 61
---------------------------MOV MethodInvocation@@MethodName:records:[TOPIC] @TO@ MethodInvocation@@i.records(TOPIC).spliterator() @AT@ 6926 @LENGTH@ 61
---------------------------MOV MethodInvocation@@MethodName:records:[TOPIC] @TO@ MethodInvocation@@i.records(TOPIC).spliterator() @AT@ 6926 @LENGTH@ 61
---------------------------MOV MethodInvocation@@MethodName:records:[TOPIC] @TO@ MethodInvocation@@i.records(TOPIC).spliterator() @AT@ 6926 @LENGTH@ 61
---------------------------MOV MethodInvocation@@MethodName:records:[TOPIC] @TO@ MethodInvocation@@i.records(TOPIC).spliterator() @AT@ 6926 @LENGTH@ 61
---------------------------MOV SimpleName@@MethodName:spliterator:[] @TO@ MethodInvocation@@i.records(TOPIC).spliterator() @AT@ 6988 @LENGTH@ 13
---------------------------MOV SimpleName@@MethodName:spliterator:[] @TO@ MethodInvocation@@i.records(TOPIC).spliterator() @AT@ 6988 @LENGTH@ 13
---------------------------MOV SimpleName@@MethodName:spliterator:[] @TO@ MethodInvocation@@i.records(TOPIC).spliterator() @AT@ 6988 @LENGTH@ 13
---------------------------MOV SimpleName@@MethodName:spliterator:[] @TO@ MethodInvocation@@i.records(TOPIC).spliterator() @AT@ 6988 @LENGTH@ 13
---------------------------MOV SimpleName@@MethodName:spliterator:[] @TO@ MethodInvocation@@i.records(TOPIC).spliterator() @AT@ 6988 @LENGTH@ 13
---------------------------INS SimpleName@@Name:i @TO@ MethodInvocation@@i.records(TOPIC).spliterator() @AT@ 7005 @LENGTH@ 1
------------------------INS BooleanLiteral@@false @TO@ SimpleName@@MethodName:stream:[i.records(TOPIC).spliterator(), false] @AT@ 7037 @LENGTH@ 5


UPD ExpressionStatement@@MethodInvocation:PropertyBindingSupport.build().withConfigurer(configurer).withIgnoreCase(true).bind(camelContext,bean,parameters) @TO@ MethodInvocation:PropertyBindingSupport.build().withConfigurer(configurer).withIgnoreCase(true).withOptional(isLenientProperties()).bind(camelContext,bean,parameters) @AT@ 17806 @LENGTH@ 116
---UPD MethodInvocation@@PropertyBindingSupport.build().withConfigurer(configurer).withIgnoreCase(true).bind(camelContext,bean,parameters) @TO@ PropertyBindingSupport.build().withConfigurer(configurer).withIgnoreCase(true).withOptional(isLenientProperties()).bind(camelContext,bean,parameters) @AT@ 17806 @LENGTH@ 115
------INS MethodInvocation@@MethodName:withOptional:[isLenientProperties()] @TO@ MethodInvocation@@PropertyBindingSupport.build().withConfigurer(configurer).withIgnoreCase(true).bind(camelContext,bean,parameters) @AT@ 17806 @LENGTH@ 195
---------INS MethodInvocation@@MethodName:isLenientProperties:[] @TO@ MethodInvocation@@MethodName:withOptional:[isLenientProperties()] @AT@ 17979 @LENGTH@ 21


UPD IfStatement@@if (getConfiguration().isIncludeFolders()) {  return true;} @TO@ if (folder && !getConfiguration().isIncludeFolders()) {  return false;} @AT@ 5286 @LENGTH@ 79
---DEL MethodInvocation@@getConfiguration().isIncludeFolders() @AT@ 5290 @LENGTH@ 37
---UPD Block@@ThenBody:{  return true;} @TO@ ThenBody:{  return false;} @AT@ 5329 @LENGTH@ 36
------UPD ReturnStatement@@BooleanLiteral:true @TO@ BooleanLiteral:false @AT@ 5343 @LENGTH@ 12
---------UPD BooleanLiteral@@true @TO@ false @AT@ 5350 @LENGTH@ 4
---INS InfixExpression@@folder && !getConfiguration().isIncludeFolders() @TO@ IfStatement@@if (getConfiguration().isIncludeFolders()) {  return true;} @AT@ 5378 @LENGTH@ 48
------INS SimpleName@@folder @TO@ InfixExpression@@folder && !getConfiguration().isIncludeFolders() @AT@ 5378 @LENGTH@ 6
------INS Operator@@&& @TO@ InfixExpression@@folder && !getConfiguration().isIncludeFolders() @AT@ 5384 @LENGTH@ 2
------INS PrefixExpression@@!getConfiguration().isIncludeFolders() @TO@ InfixExpression@@folder && !getConfiguration().isIncludeFolders() @AT@ 5388 @LENGTH@ 38
---------INS Operator@@! @TO@ PrefixExpression@@!getConfiguration().isIncludeFolders() @AT@ 5388 @LENGTH@ 1
---------INS MethodInvocation@@getConfiguration().isIncludeFolders() @TO@ PrefixExpression@@!getConfiguration().isIncludeFolders() @AT@ 5389 @LENGTH@ 37
------------MOV MethodInvocation@@MethodName:getConfiguration:[] @TO@ MethodInvocation@@getConfiguration().isIncludeFolders() @AT@ 5290 @LENGTH@ 18
------------MOV SimpleName@@MethodName:isIncludeFolders:[] @TO@ MethodInvocation@@getConfiguration().isIncludeFolders() @AT@ 5309 @LENGTH@ 18


UPD VariableDeclarationStatement@@final Object[] elements=new Object[]{"1","3","5","7","2","4","6"}; @TO@ final Object[] elements={"1","3","5","7","2","4","6"}; @AT@ 3157 @LENGTH@ 75
---UPD VariableDeclarationFragment@@elements=new Object[]{"1","3","5","7","2","4","6"} @TO@ elements={"1","3","5","7","2","4","6"} @AT@ 3172 @LENGTH@ 59
------INS ArrayInitializer@@{"1","3","5","7","2","4","6"} @TO@ VariableDeclarationFragment@@elements=new Object[]{"1","3","5","7","2","4","6"} @AT@ 3170 @LENGTH@ 35
---------MOV StringLiteral@@"1" @TO@ ArrayInitializer@@{"1","3","5","7","2","4","6"} @AT@ 3197 @LENGTH@ 3
---------MOV StringLiteral@@"3" @TO@ ArrayInitializer@@{"1","3","5","7","2","4","6"} @AT@ 3202 @LENGTH@ 3
---------MOV StringLiteral@@"5" @TO@ ArrayInitializer@@{"1","3","5","7","2","4","6"} @AT@ 3207 @LENGTH@ 3
---------MOV StringLiteral@@"7" @TO@ ArrayInitializer@@{"1","3","5","7","2","4","6"} @AT@ 3212 @LENGTH@ 3
---------MOV StringLiteral@@"2" @TO@ ArrayInitializer@@{"1","3","5","7","2","4","6"} @AT@ 3217 @LENGTH@ 3
---------MOV StringLiteral@@"4" @TO@ ArrayInitializer@@{"1","3","5","7","2","4","6"} @AT@ 3222 @LENGTH@ 3
---------MOV StringLiteral@@"6" @TO@ ArrayInitializer@@{"1","3","5","7","2","4","6"} @AT@ 3227 @LENGTH@ 3
------DEL ArrayCreation@@new Object[]{"1","3","5","7","2","4","6"} @AT@ 3183 @LENGTH@ 48
---------DEL ArrayType@@Object[] @AT@ 3187 @LENGTH@ 8
------------DEL SimpleType@@Object @AT@ 3187 @LENGTH@ 6
---------DEL ArrayInitializer@@{"1","3","5","7","2","4","6"} @AT@ 3196 @LENGTH@ 35


UPD VariableDeclarationStatement@@final String[] testData=new String[]{"a","b","c"}; @TO@ final String[] testData={"a","b","c"}; @AT@ 2947 @LENGTH@ 57
---UPD VariableDeclarationFragment@@testData=new String[]{"a","b","c"} @TO@ testData={"a","b","c"} @AT@ 2962 @LENGTH@ 41
------DEL ArrayCreation@@new String[]{"a","b","c"} @AT@ 2973 @LENGTH@ 30
---------DEL ArrayType@@String[] @AT@ 2977 @LENGTH@ 8
------------DEL SimpleType@@String @AT@ 2977 @LENGTH@ 6
---------DEL ArrayInitializer@@{"a","b","c"} @AT@ 2986 @LENGTH@ 17
------INS ArrayInitializer@@{"a","b","c"} @TO@ VariableDeclarationFragment@@testData=new String[]{"a","b","c"} @AT@ 2973 @LENGTH@ 17
---------MOV StringLiteral@@"a" @TO@ ArrayInitializer@@{"a","b","c"} @AT@ 2988 @LENGTH@ 3
---------MOV StringLiteral@@"b" @TO@ ArrayInitializer@@{"a","b","c"} @AT@ 2993 @LENGTH@ 3
---------MOV StringLiteral@@"c" @TO@ ArrayInitializer@@{"a","b","c"} @AT@ 2998 @LENGTH@ 3


UPD Block@@ThenBody:{  DefaultBatchConfigurer configurer=new DefaultBatchConfigurer(this.dataSource);  configurer.initialize();  this.configurer=configurer;  return configurer;} @TO@ ThenBody:{  DataSource dataSource;  try {    dataSource=this.context.getBean(DataSource.class);  } catch (  NoUniqueBeanDefinitionException exception) {    throw new IllegalStateException("Multiple data sources are defined in the application context and no primary candidate was found. " + "To use the default BatchConfigurer, one of the data sources should be annotated with '@Primary'.",exception);  }catch (  NoSuchBeanDefinitionException exception) {    throw new IllegalStateException("To use the default BatchConfigurer, the application context must contain at least one data source.",exception);  }  DefaultBatchConfigurer configurer=new DefaultBatchConfigurer(dataSource);  configurer.initialize();  this.configurer=configurer;  return configurer;} @AT@ 5634 @LENGTH@ 172
---UPD VariableDeclarationStatement@@DefaultBatchConfigurer configurer=new DefaultBatchConfigurer(this.dataSource); @TO@ DefaultBatchConfigurer configurer=new DefaultBatchConfigurer(dataSource); @AT@ 5639 @LENGTH@ 80
------UPD VariableDeclarationFragment@@configurer=new DefaultBatchConfigurer(this.dataSource) @TO@ configurer=new DefaultBatchConfigurer(dataSource) @AT@ 5662 @LENGTH@ 56
---------UPD ClassInstanceCreation@@DefaultBatchConfigurer[this.dataSource] @TO@ DefaultBatchConfigurer[dataSource] @AT@ 5675 @LENGTH@ 43
------------DEL FieldAccess@@this.dataSource @AT@ 5702 @LENGTH@ 15
---------------DEL ThisExpression@@this @AT@ 5702 @LENGTH@ 4
---------------DEL SimpleName@@dataSource @AT@ 5707 @LENGTH@ 10
------------INS SimpleName@@dataSource @TO@ ClassInstanceCreation@@DefaultBatchConfigurer[this.dataSource] @AT@ 6550 @LENGTH@ 10
---INS VariableDeclarationStatement@@DataSource dataSource; @TO@ Block@@ThenBody:{  DefaultBatchConfigurer configurer=new DefaultBatchConfigurer(this.dataSource);  configurer.initialize();  this.configurer=configurer;  return configurer;} @AT@ 5845 @LENGTH@ 22
------INS SimpleType@@DataSource @TO@ VariableDeclarationStatement@@DataSource dataSource; @AT@ 5845 @LENGTH@ 10
------INS VariableDeclarationFragment@@dataSource @TO@ VariableDeclarationStatement@@DataSource dataSource; @AT@ 5856 @LENGTH@ 10
---------INS SimpleName@@dataSource @TO@ VariableDeclarationFragment@@dataSource @AT@ 5856 @LENGTH@ 10
---INS TryStatement@@try {  dataSource=this.context.getBean(DataSource.class);} catch (NoUniqueBeanDefinitionException exception) {  throw new IllegalStateException("Multiple data sources are defined in the application context and no primary candidate was found. " + "To use the default BatchConfigurer, one of the data sources should be annotated with '@Primary'.",exception);}catch (NoSuchBeanDefinitionException exception) {  throw new IllegalStateException("To use the default BatchConfigurer, the application context must contain at least one data source.",exception);} @TO@ Block@@ThenBody:{  DefaultBatchConfigurer configurer=new DefaultBatchConfigurer(this.dataSource);  configurer.initialize();  this.configurer=configurer;  return configurer;} @AT@ 5871 @LENGTH@ 612
------INS ExpressionStatement@@Assignment:dataSource=this.context.getBean(DataSource.class) @TO@ TryStatement@@try {  dataSource=this.context.getBean(DataSource.class);} catch (NoUniqueBeanDefinitionException exception) {  throw new IllegalStateException("Multiple data sources are defined in the application context and no primary candidate was found. " + "To use the default BatchConfigurer, one of the data sources should be annotated with '@Primary'.",exception);}catch (NoSuchBeanDefinitionException exception) {  throw new IllegalStateException("To use the default BatchConfigurer, the application context must contain at least one data source.",exception);} @AT@ 5881 @LENGTH@ 52
---------INS Assignment@@dataSource=this.context.getBean(DataSource.class) @TO@ ExpressionStatement@@Assignment:dataSource=this.context.getBean(DataSource.class) @AT@ 5881 @LENGTH@ 51
------------INS SimpleName@@dataSource @TO@ Assignment@@dataSource=this.context.getBean(DataSource.class) @AT@ 5881 @LENGTH@ 10
------------INS Operator@@= @TO@ Assignment@@dataSource=this.context.getBean(DataSource.class) @AT@ 5891 @LENGTH@ 1
------------INS MethodInvocation@@this.context.getBean(DataSource.class) @TO@ Assignment@@dataSource=this.context.getBean(DataSource.class) @AT@ 5894 @LENGTH@ 38
---------------INS FieldAccess@@this.context @TO@ MethodInvocation@@this.context.getBean(DataSource.class) @AT@ 5894 @LENGTH@ 12
------------------INS ThisExpression@@this @TO@ FieldAccess@@this.context @AT@ 5894 @LENGTH@ 4
------------------INS SimpleName@@context @TO@ FieldAccess@@this.context @AT@ 5899 @LENGTH@ 7
---------------INS SimpleName@@MethodName:getBean:[DataSource.class] @TO@ MethodInvocation@@this.context.getBean(DataSource.class) @AT@ 5907 @LENGTH@ 25
------------------INS TypeLiteral@@DataSource.class @TO@ SimpleName@@MethodName:getBean:[DataSource.class] @AT@ 5915 @LENGTH@ 16
------INS CatchClause@@catch (NoUniqueBeanDefinitionException exception) {  throw new IllegalStateException("Multiple data sources are defined in the application context and no primary candidate was found. " + "To use the default BatchConfigurer, one of the data sources should be annotated with '@Primary'.",exception);} @TO@ TryStatement@@try {  dataSource=this.context.getBean(DataSource.class);} catch (NoUniqueBeanDefinitionException exception) {  throw new IllegalStateException("Multiple data sources are defined in the application context and no primary candidate was found. " + "To use the default BatchConfigurer, one of the data sources should be annotated with '@Primary'.",exception);}catch (NoSuchBeanDefinitionException exception) {  throw new IllegalStateException("To use the default BatchConfigurer, the application context must contain at least one data source.",exception);} @AT@ 5940 @LENGTH@ 325
---------INS SingleVariableDeclaration@@NoUniqueBeanDefinitionException exception @TO@ CatchClause@@catch (NoUniqueBeanDefinitionException exception) {  throw new IllegalStateException("Multiple data sources are defined in the application context and no primary candidate was found. " + "To use the default BatchConfigurer, one of the data sources should be annotated with '@Primary'.",exception);} @AT@ 5947 @LENGTH@ 41
------------INS SimpleType@@NoUniqueBeanDefinitionException @TO@ SingleVariableDeclaration@@NoUniqueBeanDefinitionException exception @AT@ 5947 @LENGTH@ 31
------------INS SimpleName@@exception @TO@ SingleVariableDeclaration@@NoUniqueBeanDefinitionException exception @AT@ 5979 @LENGTH@ 9
---------INS ThrowStatement@@ClassInstanceCreation:new IllegalStateException("Multiple data sources are defined in the application context and no primary candidate was found. " + "To use the default BatchConfigurer, one of the data sources should be annotated with '@Primary'.",exception) @TO@ CatchClause@@catch (NoUniqueBeanDefinitionException exception) {  throw new IllegalStateException("Multiple data sources are defined in the application context and no primary candidate was found. " + "To use the default BatchConfigurer, one of the data sources should be annotated with '@Primary'.",exception);} @AT@ 5996 @LENGTH@ 264
------------INS ClassInstanceCreation@@IllegalStateException["Multiple data sources are defined in the application context and no primary candidate was found. " + "To use the default BatchConfigurer, one of the data sources should be annotated with '@Primary'.", exception] @TO@ ThrowStatement@@ClassInstanceCreation:new IllegalStateException("Multiple data sources are defined in the application context and no primary candidate was found. " + "To use the default BatchConfigurer, one of the data sources should be annotated with '@Primary'.",exception) @AT@ 6002 @LENGTH@ 257
---------------INS New@@new @TO@ ClassInstanceCreation@@IllegalStateException["Multiple data sources are defined in the application context and no primary candidate was found. " + "To use the default BatchConfigurer, one of the data sources should be annotated with '@Primary'.", exception] @AT@ 6002 @LENGTH@ 3
---------------INS SimpleType@@IllegalStateException @TO@ ClassInstanceCreation@@IllegalStateException["Multiple data sources are defined in the application context and no primary candidate was found. " + "To use the default BatchConfigurer, one of the data sources should be annotated with '@Primary'.", exception] @AT@ 6006 @LENGTH@ 21
---------------INS InfixExpression@@"Multiple data sources are defined in the application context and no primary candidate was found. " + "To use the default BatchConfigurer, one of the data sources should be annotated with '@Primary'." @TO@ ClassInstanceCreation@@IllegalStateException["Multiple data sources are defined in the application context and no primary candidate was found. " + "To use the default BatchConfigurer, one of the data sources should be annotated with '@Primary'.", exception] @AT@ 6035 @LENGTH@ 206
------------------INS StringLiteral@@"Multiple data sources are defined in the application context and no primary candidate was found. " @TO@ InfixExpression@@"Multiple data sources are defined in the application context and no primary candidate was found. " + "To use the default BatchConfigurer, one of the data sources should be annotated with '@Primary'." @AT@ 6035 @LENGTH@ 99
------------------INS Operator@@+ @TO@ InfixExpression@@"Multiple data sources are defined in the application context and no primary candidate was found. " + "To use the default BatchConfigurer, one of the data sources should be annotated with '@Primary'." @AT@ 6134 @LENGTH@ 1
------------------INS StringLiteral@@"To use the default BatchConfigurer, one of the data sources should be annotated with '@Primary'." @TO@ InfixExpression@@"Multiple data sources are defined in the application context and no primary candidate was found. " + "To use the default BatchConfigurer, one of the data sources should be annotated with '@Primary'." @AT@ 6143 @LENGTH@ 98
---------------INS SimpleName@@exception @TO@ ClassInstanceCreation@@IllegalStateException["Multiple data sources are defined in the application context and no primary candidate was found. " + "To use the default BatchConfigurer, one of the data sources should be annotated with '@Primary'.", exception] @AT@ 6249 @LENGTH@ 9
------INS CatchClause@@catch (NoSuchBeanDefinitionException exception) {  throw new IllegalStateException("To use the default BatchConfigurer, the application context must contain at least one data source.",exception);} @TO@ TryStatement@@try {  dataSource=this.context.getBean(DataSource.class);} catch (NoUniqueBeanDefinitionException exception) {  throw new IllegalStateException("Multiple data sources are defined in the application context and no primary candidate was found. " + "To use the default BatchConfigurer, one of the data sources should be annotated with '@Primary'.",exception);}catch (NoSuchBeanDefinitionException exception) {  throw new IllegalStateException("To use the default BatchConfigurer, the application context must contain at least one data source.",exception);} @AT@ 6266 @LENGTH@ 217
---------INS SingleVariableDeclaration@@NoSuchBeanDefinitionException exception @TO@ CatchClause@@catch (NoSuchBeanDefinitionException exception) {  throw new IllegalStateException("To use the default BatchConfigurer, the application context must contain at least one data source.",exception);} @AT@ 6273 @LENGTH@ 39
------------INS SimpleType@@NoSuchBeanDefinitionException @TO@ SingleVariableDeclaration@@NoSuchBeanDefinitionException exception @AT@ 6273 @LENGTH@ 29
------------INS SimpleName@@exception @TO@ SingleVariableDeclaration@@NoSuchBeanDefinitionException exception @AT@ 6303 @LENGTH@ 9
---------INS ThrowStatement@@ClassInstanceCreation:new IllegalStateException("To use the default BatchConfigurer, the application context must contain at least one data source.",exception) @TO@ CatchClause@@catch (NoSuchBeanDefinitionException exception) {  throw new IllegalStateException("To use the default BatchConfigurer, the application context must contain at least one data source.",exception);} @AT@ 6320 @LENGTH@ 158
------------INS ClassInstanceCreation@@IllegalStateException["To use the default BatchConfigurer, the application context must contain at least one data source.", exception] @TO@ ThrowStatement@@ClassInstanceCreation:new IllegalStateException("To use the default BatchConfigurer, the application context must contain at least one data source.",exception) @AT@ 6326 @LENGTH@ 151
---------------INS New@@new @TO@ ClassInstanceCreation@@IllegalStateException["To use the default BatchConfigurer, the application context must contain at least one data source.", exception] @AT@ 6326 @LENGTH@ 3
---------------INS SimpleType@@IllegalStateException @TO@ ClassInstanceCreation@@IllegalStateException["To use the default BatchConfigurer, the application context must contain at least one data source.", exception] @AT@ 6330 @LENGTH@ 21
---------------INS StringLiteral@@"To use the default BatchConfigurer, the application context must contain at least one data source." @TO@ ClassInstanceCreation@@IllegalStateException["To use the default BatchConfigurer, the application context must contain at least one data source.", exception] @AT@ 6359 @LENGTH@ 100
---------------INS SimpleName@@exception @TO@ ClassInstanceCreation@@IllegalStateException["To use the default BatchConfigurer, the application context must contain at least one data source.", exception] @AT@ 6467 @LENGTH@ 9


UPD IfStatement@@if (sendReply && exchange.getPattern().isOutCapable()) {  if (exchange.hasOut()) {    body=exchange.getOut();  } else {    body=exchange.getIn();  }} @TO@ if (sendReply && exchange.getPattern().isOutCapable()) {  body=exchange.getMessage();} @AT@ 10158 @LENGTH@ 269
---DEL Block@@ThenBody:{  if (exchange.hasOut()) {    body=exchange.getOut();  } else {    body=exchange.getIn();  }} @AT@ 10213 @LENGTH@ 214
------DEL IfStatement@@if (exchange.hasOut()) {  body=exchange.getOut();} else {  body=exchange.getIn();} @AT@ 10235 @LENGTH@ 174
---------DEL MethodInvocation@@exchange.hasOut() @AT@ 10239 @LENGTH@ 17
------------DEL SimpleName@@Name:exchange @AT@ 10239 @LENGTH@ 8
------------DEL SimpleName@@MethodName:hasOut:[] @AT@ 10248 @LENGTH@ 8
---------DEL Block@@ElseBody:{  body=exchange.getIn();} @AT@ 10337 @LENGTH@ 72
------------DEL ExpressionStatement@@Assignment:body=exchange.getIn() @AT@ 10363 @LENGTH@ 24
---------------DEL Assignment@@body=exchange.getIn() @AT@ 10363 @LENGTH@ 23
------------------DEL SimpleName@@body @AT@ 10363 @LENGTH@ 4
------------------DEL Operator@@= @AT@ 10367 @LENGTH@ 1
------------------DEL MethodInvocation@@exchange.getIn() @AT@ 10370 @LENGTH@ 16
---------------------DEL SimpleName@@Name:exchange @AT@ 10370 @LENGTH@ 8
---------------------DEL SimpleName@@MethodName:getIn:[] @AT@ 10379 @LENGTH@ 7
---MOV Block@@ThenBody:{  body=exchange.getOut();} @TO@ IfStatement@@if (sendReply && exchange.getPattern().isOutCapable()) {  if (exchange.hasOut()) {    body=exchange.getOut();  } else {    body=exchange.getIn();  }} @AT@ 10258 @LENGTH@ 73
------UPD ExpressionStatement@@Assignment:body=exchange.getOut() @TO@ Assignment:body=exchange.getMessage() @AT@ 10284 @LENGTH@ 25
---------UPD Assignment@@body=exchange.getOut() @TO@ body=exchange.getMessage() @AT@ 10284 @LENGTH@ 24
------------UPD MethodInvocation@@exchange.getOut() @TO@ exchange.getMessage() @AT@ 10291 @LENGTH@ 17
---------------UPD SimpleName@@MethodName:getOut:[] @TO@ MethodName:getMessage:[] @AT@ 10300 @LENGTH@ 8


UPD FieldDeclaration@@private, static, final, Pattern, [SECRETS=Pattern.compile("([?&][^=]*(?:passphrase|password|secretKey|accessToken|clientSecret|authorizationToken|saslJaasConfig)[^=]*)=(RAW[({].*[)}]|[^&]*)",Pattern.CASE_INSENSITIVE)] @TO@ private, static, final, Pattern, [SECRETS=Pattern.compile("([?&][^=]*(?:passphrase|password|secretKey|accessToken|clientSecret|authorizationToken|saslJaasConfig)[^=]*)=(RAW(([{][^}]*[}])|([(][^)]*[)]))|[^&]*)",Pattern.CASE_INSENSITIVE)] @AT@ 1683 @LENGTH@ 240
---UPD VariableDeclarationFragment@@SECRETS=Pattern.compile("([?&][^=]*(?:passphrase|password|secretKey|accessToken|clientSecret|authorizationToken|saslJaasConfig)[^=]*)=(RAW[({].*[)}]|[^&]*)",Pattern.CASE_INSENSITIVE) @TO@ SECRETS=Pattern.compile("([?&][^=]*(?:passphrase|password|secretKey|accessToken|clientSecret|authorizationToken|saslJaasConfig)[^=]*)=(RAW(([{][^}]*[}])|([(][^)]*[)]))|[^&]*)",Pattern.CASE_INSENSITIVE) @AT@ 1712 @LENGTH@ 210
------UPD MethodInvocation@@Pattern.compile("([?&][^=]*(?:passphrase|password|secretKey|accessToken|clientSecret|authorizationToken|saslJaasConfig)[^=]*)=(RAW[({].*[)}]|[^&]*)",Pattern.CASE_INSENSITIVE) @TO@ Pattern.compile("([?&][^=]*(?:passphrase|password|secretKey|accessToken|clientSecret|authorizationToken|saslJaasConfig)[^=]*)=(RAW(([{][^}]*[}])|([(][^)]*[)]))|[^&]*)",Pattern.CASE_INSENSITIVE) @AT@ 1722 @LENGTH@ 200
---------UPD SimpleName@@MethodName:compile:["([?&][^=]*(?:passphrase|password|secretKey|accessToken|clientSecret|authorizationToken|saslJaasConfig)[^=]*)=(RAW[({].*[)}]|[^&]*)", Pattern.CASE_INSENSITIVE] @TO@ MethodName:compile:["([?&][^=]*(?:passphrase|password|secretKey|accessToken|clientSecret|authorizationToken|saslJaasConfig)[^=]*)=(RAW(([{][^}]*[}])|([(][^)]*[)]))|[^&]*)", Pattern.CASE_INSENSITIVE] @AT@ 1730 @LENGTH@ 192
------------UPD StringLiteral@@"([?&][^=]*(?:passphrase|password|secretKey|accessToken|clientSecret|authorizationToken|saslJaasConfig)[^=]*)=(RAW[({].*[)}]|[^&]*)" @TO@ "([?&][^=]*(?:passphrase|password|secretKey|accessToken|clientSecret|authorizationToken|saslJaasConfig)[^=]*)=(RAW(([{][^}]*[}])|([(][^)]*[)]))|[^&]*)" @AT@ 1751 @LENGTH@ 132


UPD FieldDeclaration@@private, String, [beanName] @TO@ private, String, [beanName="not.a.Spring.bean"] @AT@ 6798 @LENGTH@ 24
---UPD VariableDeclarationFragment@@beanName @TO@ beanName="not.a.Spring.bean" @AT@ 6813 @LENGTH@ 8
------INS StringLiteral@@"not.a.Spring.bean" @TO@ VariableDeclarationFragment@@beanName @AT@ 6824 @LENGTH@ 19


UPD IfStatement@@if (message == null) {  channel.basicAck(deliveryTag,false);  if (this.logger.isDebugEnabled()) {    this.logger.debug("Message Post Processor returned 'null', discarding message " + original);  }  break;} @TO@ if (message == null) {  if (this.logger.isDebugEnabled()) {    this.logger.debug("Message Post Processor returned 'null', discarding message " + original);  }  break;} @AT@ 34649 @LENGTH@ 253
---UPD Block@@ThenBody:{  channel.basicAck(deliveryTag,false);  if (this.logger.isDebugEnabled()) {    this.logger.debug("Message Post Processor returned 'null', discarding message " + original);  }  break;} @TO@ ThenBody:{  if (this.logger.isDebugEnabled()) {    this.logger.debug("Message Post Processor returned 'null', discarding message " + original);  }  break;} @AT@ 34670 @LENGTH@ 232
------DEL ExpressionStatement@@MethodInvocation:channel.basicAck(deliveryTag,false) @AT@ 34679 @LENGTH@ 37
---------DEL MethodInvocation@@channel.basicAck(deliveryTag,false) @AT@ 34679 @LENGTH@ 36
------------DEL SimpleName@@Name:channel @AT@ 34679 @LENGTH@ 7
------------DEL SimpleName@@MethodName:basicAck:[deliveryTag, false] @AT@ 34687 @LENGTH@ 28
---------------DEL SimpleName@@deliveryTag @AT@ 34696 @LENGTH@ 11
---------------DEL BooleanLiteral@@false @AT@ 34709 @LENGTH@ 5


UPD ExpressionStatement@@MethodInvocation:out.setBigNumberMode(TarArchiveOutputStream.BIGNUMBER_STAR) @TO@ MethodInvocation:out.setBigNumberMode(TarArchiveOutputStream.BIGNUMBER_POSIX) @AT@ 11046 @LENGTH@ 60
---UPD MethodInvocation@@out.setBigNumberMode(TarArchiveOutputStream.BIGNUMBER_STAR) @TO@ out.setBigNumberMode(TarArchiveOutputStream.BIGNUMBER_POSIX) @AT@ 11046 @LENGTH@ 59
------UPD SimpleName@@MethodName:setBigNumberMode:[TarArchiveOutputStream.BIGNUMBER_STAR] @TO@ MethodName:setBigNumberMode:[TarArchiveOutputStream.BIGNUMBER_POSIX] @AT@ 11050 @LENGTH@ 55
---------UPD QualifiedName@@TarArchiveOutputStream.BIGNUMBER_STAR @TO@ TarArchiveOutputStream.BIGNUMBER_POSIX @AT@ 11067 @LENGTH@ 37
------------UPD SimpleName@@BIGNUMBER_STAR @TO@ BIGNUMBER_POSIX @AT@ 11090 @LENGTH@ 14


UPD ExpressionStatement@@MethodInvocation:downloader.download(LOG,() -> {
  LOG.debug("Downloading: {}",gav);
  Grape.grab(map);
}
,gav) @TO@ MethodInvocation:DOWNLOAD_THREAD_POOL.download(LOG,() -> {
  LOG.debug("Downloading: {}",gav);
  Grape.grab(map);
}
,gav) @AT@ 2684 @LENGTH@ 125
---UPD MethodInvocation@@downloader.download(LOG,() -> {
  LOG.debug("Downloading: {}",gav);
  Grape.grab(map);
}
,gav) @TO@ DOWNLOAD_THREAD_POOL.download(LOG,() -> {
  LOG.debug("Downloading: {}",gav);
  Grape.grab(map);
}
,gav) @AT@ 2684 @LENGTH@ 124
------UPD SimpleName@@Name:downloader @TO@ Name:DOWNLOAD_THREAD_POOL @AT@ 2684 @LENGTH@ 10


UPD IfStatement@@if ("force-null-out-body".equals(in)) {  e.getOut().setBody(null);} else if ("force-exception".equals(in)) {  e.getOut().setBody(null);  throw new IllegalArgumentException("Forced exception");} else {  e.getOut().setBody("Hello " + in);} @TO@ if ("force-null-out-body".equals(in)) {  e.getMessage().setBody(null);} else if ("force-exception".equals(in)) {  e.getMessage().setBody(null);  throw new IllegalArgumentException("Forced exception");} else {  e.getMessage().setBody("Hello " + in);} @AT@ 4674 @LENGTH@ 542
---UPD Block@@ThenBody:{  e.getOut().setBody(null);} @TO@ ThenBody:{  e.getMessage().setBody(null);} @AT@ 4712 @LENGTH@ 136
------UPD ExpressionStatement@@MethodInvocation:e.getOut().setBody(null) @TO@ MethodInvocation:e.getMessage().setBody(null) @AT@ 4797 @LENGTH@ 25
---------UPD MethodInvocation@@e.getOut().setBody(null) @TO@ e.getMessage().setBody(null) @AT@ 4797 @LENGTH@ 24
------------UPD MethodInvocation@@MethodName:getOut:[] @TO@ MethodName:getMessage:[] @AT@ 4797 @LENGTH@ 10
---UPD Block@@ElseBody:if ("force-exception".equals(in)) {  e.getOut().setBody(null);  throw new IllegalArgumentException("Forced exception");} else {  e.getOut().setBody("Hello " + in);} @TO@ ElseBody:if ("force-exception".equals(in)) {  e.getMessage().setBody(null);  throw new IllegalArgumentException("Forced exception");} else {  e.getMessage().setBody("Hello " + in);} @AT@ 4854 @LENGTH@ 362
------UPD IfStatement@@if ("force-exception".equals(in)) {  e.getOut().setBody(null);  throw new IllegalArgumentException("Forced exception");} else {  e.getOut().setBody("Hello " + in);} @TO@ if ("force-exception".equals(in)) {  e.getMessage().setBody(null);  throw new IllegalArgumentException("Forced exception");} else {  e.getMessage().setBody("Hello " + in);} @AT@ 4854 @LENGTH@ 362
---------UPD Block@@ThenBody:{  e.getOut().setBody(null);  throw new IllegalArgumentException("Forced exception");} @TO@ ThenBody:{  e.getMessage().setBody(null);  throw new IllegalArgumentException("Forced exception");} @AT@ 4888 @LENGTH@ 232
------------UPD ExpressionStatement@@MethodInvocation:e.getOut().setBody(null) @TO@ MethodInvocation:e.getMessage().setBody(null) @AT@ 4985 @LENGTH@ 25
---------------UPD MethodInvocation@@e.getOut().setBody(null) @TO@ e.getMessage().setBody(null) @AT@ 4985 @LENGTH@ 24
------------------UPD MethodInvocation@@MethodName:getOut:[] @TO@ MethodName:getMessage:[] @AT@ 4985 @LENGTH@ 10
---------UPD Block@@ElseBody:{  e.getOut().setBody("Hello " + in);} @TO@ ElseBody:{  e.getMessage().setBody("Hello " + in);} @AT@ 5126 @LENGTH@ 90
------------UPD ExpressionStatement@@MethodInvocation:e.getOut().setBody("Hello " + in) @TO@ MethodInvocation:e.getMessage().setBody("Hello " + in) @AT@ 5156 @LENGTH@ 34
---------------UPD MethodInvocation@@e.getOut().setBody("Hello " + in) @TO@ e.getMessage().setBody("Hello " + in) @AT@ 5156 @LENGTH@ 33
------------------UPD MethodInvocation@@MethodName:getOut:[] @TO@ MethodName:getMessage:[] @AT@ 5156 @LENGTH@ 10


UPD ExpressionStatement@@MethodInvocation:p.setCompressionLevel(-2) @TO@ MethodInvocation:assertThrows(IllegalArgumentException.class,() -> p.setCompressionLevel(DeflateParameters.MIN_LEVEL - 1)) @AT@ 1338 @LENGTH@ 26
---DEL MethodInvocation@@p.setCompressionLevel(-2) @AT@ 1338 @LENGTH@ 25
---INS MethodInvocation@@assertThrows(IllegalArgumentException.class,() -> p.setCompressionLevel(DeflateParameters.MIN_LEVEL - 1)) @TO@ ExpressionStatement@@MethodInvocation:p.setCompressionLevel(-2) @AT@ 1429 @LENGTH@ 106
------INS SimpleName@@MethodName:assertThrows:[IllegalArgumentException.class, () -> p.setCompressionLevel(DeflateParameters.MIN_LEVEL - 1)] @TO@ MethodInvocation@@assertThrows(IllegalArgumentException.class,() -> p.setCompressionLevel(DeflateParameters.MIN_LEVEL - 1)) @AT@ 1429 @LENGTH@ 106
---------INS TypeLiteral@@IllegalArgumentException.class @TO@ SimpleName@@MethodName:assertThrows:[IllegalArgumentException.class, () -> p.setCompressionLevel(DeflateParameters.MIN_LEVEL - 1)] @AT@ 1442 @LENGTH@ 30
---------INS LambdaExpression@@() -> p.setCompressionLevel(DeflateParameters.MIN_LEVEL - 1) @TO@ SimpleName@@MethodName:assertThrows:[IllegalArgumentException.class, () -> p.setCompressionLevel(DeflateParameters.MIN_LEVEL - 1)] @AT@ 1474 @LENGTH@ 60
------------INS MethodInvocation@@p.setCompressionLevel(DeflateParameters.MIN_LEVEL - 1) @TO@ LambdaExpression@@() -> p.setCompressionLevel(DeflateParameters.MIN_LEVEL - 1) @AT@ 1480 @LENGTH@ 54
---------------MOV SimpleName@@Name:p @TO@ MethodInvocation@@p.setCompressionLevel(DeflateParameters.MIN_LEVEL - 1) @AT@ 1338 @LENGTH@ 1
---------------MOV SimpleName@@MethodName:setCompressionLevel:[-2] @TO@ MethodInvocation@@p.setCompressionLevel(DeflateParameters.MIN_LEVEL - 1) @AT@ 1340 @LENGTH@ 23
------------------DEL PrefixExpression@@-2 @AT@ 1360 @LENGTH@ 2
---------------------DEL Operator@@- @AT@ 1360 @LENGTH@ 1
---------------------DEL NumberLiteral@@2 @AT@ 1361 @LENGTH@ 1
------------------INS InfixExpression@@DeflateParameters.MIN_LEVEL - 1 @TO@ SimpleName@@MethodName:setCompressionLevel:[-2] @AT@ 1502 @LENGTH@ 31
---------------------INS QualifiedName@@DeflateParameters.MIN_LEVEL @TO@ InfixExpression@@DeflateParameters.MIN_LEVEL - 1 @AT@ 1502 @LENGTH@ 27
------------------------INS SimpleName@@DeflateParameters @TO@ QualifiedName@@DeflateParameters.MIN_LEVEL @AT@ 1502 @LENGTH@ 17
------------------------INS SimpleName@@MIN_LEVEL @TO@ QualifiedName@@DeflateParameters.MIN_LEVEL @AT@ 1520 @LENGTH@ 9
---------------------INS Operator@@- @TO@ InfixExpression@@DeflateParameters.MIN_LEVEL - 1 @AT@ 1529 @LENGTH@ 1
---------------------INS NumberLiteral@@1 @TO@ InfixExpression@@DeflateParameters.MIN_LEVEL - 1 @AT@ 1532 @LENGTH@ 1


UPD VariableDeclarationStatement@@final Object[] els=new Object[]{"1","3","5","7","2","4","6"}; @TO@ final Object[] els={"1","3","5","7","2","4","6"}; @AT@ 2629 @LENGTH@ 70
---UPD VariableDeclarationFragment@@els=new Object[]{"1","3","5","7","2","4","6"} @TO@ els={"1","3","5","7","2","4","6"} @AT@ 2644 @LENGTH@ 54
------INS ArrayInitializer@@{"1","3","5","7","2","4","6"} @TO@ VariableDeclarationFragment@@els=new Object[]{"1","3","5","7","2","4","6"} @AT@ 2637 @LENGTH@ 35
---------MOV StringLiteral@@"1" @TO@ ArrayInitializer@@{"1","3","5","7","2","4","6"} @AT@ 2664 @LENGTH@ 3
---------MOV StringLiteral@@"3" @TO@ ArrayInitializer@@{"1","3","5","7","2","4","6"} @AT@ 2669 @LENGTH@ 3
---------MOV StringLiteral@@"5" @TO@ ArrayInitializer@@{"1","3","5","7","2","4","6"} @AT@ 2674 @LENGTH@ 3
---------MOV StringLiteral@@"7" @TO@ ArrayInitializer@@{"1","3","5","7","2","4","6"} @AT@ 2679 @LENGTH@ 3
---------MOV StringLiteral@@"2" @TO@ ArrayInitializer@@{"1","3","5","7","2","4","6"} @AT@ 2684 @LENGTH@ 3
---------MOV StringLiteral@@"4" @TO@ ArrayInitializer@@{"1","3","5","7","2","4","6"} @AT@ 2689 @LENGTH@ 3
---------MOV StringLiteral@@"6" @TO@ ArrayInitializer@@{"1","3","5","7","2","4","6"} @AT@ 2694 @LENGTH@ 3
------DEL ArrayCreation@@new Object[]{"1","3","5","7","2","4","6"} @AT@ 2650 @LENGTH@ 48
---------DEL ArrayType@@Object[] @AT@ 2654 @LENGTH@ 8
------------DEL SimpleType@@Object @AT@ 2654 @LENGTH@ 6
---------DEL ArrayInitializer@@{"1","3","5","7","2","4","6"} @AT@ 2663 @LENGTH@ 35


UPD ExpressionStatement@@MethodInvocation:await().atMost(Duration.ofSeconds(1)).untilAsserted(() -> assertEquals("D",keys.get(0))) @TO@ MethodInvocation:await().atMost(Duration.ofSeconds(2)).untilAsserted(() -> assertEquals("D",keys.get(0))) @AT@ 4705 @LENGTH@ 107
---UPD MethodInvocation@@await().atMost(Duration.ofSeconds(1)).untilAsserted(() -> assertEquals("D",keys.get(0))) @TO@ await().atMost(Duration.ofSeconds(2)).untilAsserted(() -> assertEquals("D",keys.get(0))) @AT@ 4705 @LENGTH@ 106
------UPD MethodInvocation@@MethodName:atMost:[Duration.ofSeconds(1)] @TO@ MethodName:atMost:[Duration.ofSeconds(2)] @AT@ 4705 @LENGTH@ 37
---------UPD MethodInvocation@@Duration.ofSeconds(1) @TO@ Duration.ofSeconds(2) @AT@ 4720 @LENGTH@ 21
------------UPD SimpleName@@MethodName:ofSeconds:[1] @TO@ MethodName:ofSeconds:[2] @AT@ 4729 @LENGTH@ 12
---------------UPD NumberLiteral@@1 @TO@ 2 @AT@ 4739 @LENGTH@ 1


UPD VariableDeclarationStatement@@final HttpHeaders httpHeaders=new HttpHeaders().put("x-test-header","123"); @TO@ final HttpHeaders httpHeaders=new HttpHeaders().set("x-test-header","123"); @AT@ 3638 @LENGTH@ 78
---UPD VariableDeclarationFragment@@httpHeaders=new HttpHeaders().put("x-test-header","123") @TO@ httpHeaders=new HttpHeaders().set("x-test-header","123") @AT@ 3656 @LENGTH@ 59
------UPD MethodInvocation@@new HttpHeaders().put("x-test-header","123") @TO@ new HttpHeaders().set("x-test-header","123") @AT@ 3670 @LENGTH@ 45
---------UPD SimpleName@@MethodName:put:["x-test-header", "123"] @TO@ MethodName:set:["x-test-header", "123"] @AT@ 3688 @LENGTH@ 27


UPD MethodDeclaration@@public, void, MethodName:testNullSorts,  @TO@ public, void, MethodName:testNullSortsWithQueryString,  @AT@ 6947 @LENGTH@ 247
---UPD SimpleName@@MethodName:testNullSorts @TO@ MethodName:testNullSortsWithQueryString @AT@ 6959 @LENGTH@ 13


UPD ExpressionStatement@@MethodInvocation:exchange.getOut().setBody("Bye " + body) @TO@ MethodInvocation:exchange.getMessage().setBody("Bye " + body) @AT@ 4205 @LENGTH@ 41
---UPD MethodInvocation@@exchange.getOut().setBody("Bye " + body) @TO@ exchange.getMessage().setBody("Bye " + body) @AT@ 4205 @LENGTH@ 40
------UPD MethodInvocation@@MethodName:getOut:[] @TO@ MethodName:getMessage:[] @AT@ 4205 @LENGTH@ 17


UPD IfStatement@@if (exchange.hasOut()) {  exchange.getOut().setHeader(RabbitMQConstants.CORRELATIONID,holder.getOriginalCorrelationId());} else {  exchange.getIn().setHeader(RabbitMQConstants.CORRELATIONID,holder.getOriginalCorrelationId());} @TO@ if (holder.getOriginalCorrelationId() != null) {  exchange.getMessage().setHeader(RabbitMQConstants.CORRELATIONID,holder.getOriginalCorrelationId());} @AT@ 7706 @LENGTH@ 404


UPD FieldDeclaration@@private, static, String[], [ACCEPTED_FILE_EXT=new String[]{"properties","java","groovy","js","jsh","kts","xml","yaml"}] @TO@ private, static, final, String[], [ACCEPTED_FILE_EXT=new String[]{"properties","java","groovy","js","jsh","kts","xml","yaml"}] @AT@ 1934 @LENGTH@ 139
---INS Modifier@@final @TO@ FieldDeclaration@@private, static, String[], [ACCEPTED_FILE_EXT=new String[]{"properties","java","groovy","js","jsh","kts","xml","yaml"}] @AT@ 1949 @LENGTH@ 5


INS MethodDeclaration@@void, MethodName:shouldNotFailOnMultipleEscapedHops,  @TO@ TypeDeclaration@@CypherGeneratorTest,  @AT@ 8426 @LENGTH@ 222
---INS PrimitiveType@@void @TO@ MethodDeclaration@@void, MethodName:shouldNotFailOnMultipleEscapedHops,  @AT@ 8421 @LENGTH@ 4
---INS SimpleName@@MethodName:shouldNotFailOnMultipleEscapedHops @TO@ MethodDeclaration@@void, MethodName:shouldNotFailOnMultipleEscapedHops,  @AT@ 8426 @LENGTH@ 34
---INS VariableDeclarationStatement@@Optional<String> fragment=Optional.ofNullable(CypherGenerator.INSTANCE.createOrderByFragment(Sort.by("n.`a.b.c`"))); @TO@ MethodDeclaration@@void, MethodName:shouldNotFailOnMultipleEscapedHops,  @AT@ 8468 @LENGTH@ 118
------INS ParameterizedType@@Optional<String> @TO@ VariableDeclarationStatement@@Optional<String> fragment=Optional.ofNullable(CypherGenerator.INSTANCE.createOrderByFragment(Sort.by("n.`a.b.c`"))); @AT@ 8468 @LENGTH@ 16
---------INS SimpleType@@Optional @TO@ ParameterizedType@@Optional<String> @AT@ 8468 @LENGTH@ 8
---------INS SimpleType@@String @TO@ ParameterizedType@@Optional<String> @AT@ 8477 @LENGTH@ 6
------INS VariableDeclarationFragment@@fragment=Optional.ofNullable(CypherGenerator.INSTANCE.createOrderByFragment(Sort.by("n.`a.b.c`"))) @TO@ VariableDeclarationStatement@@Optional<String> fragment=Optional.ofNullable(CypherGenerator.INSTANCE.createOrderByFragment(Sort.by("n.`a.b.c`"))); @AT@ 8485 @LENGTH@ 100
---------INS SimpleName@@fragment @TO@ VariableDeclarationFragment@@fragment=Optional.ofNullable(CypherGenerator.INSTANCE.createOrderByFragment(Sort.by("n.`a.b.c`"))) @AT@ 8485 @LENGTH@ 8
---------INS MethodInvocation@@Optional.ofNullable(CypherGenerator.INSTANCE.createOrderByFragment(Sort.by("n.`a.b.c`"))) @TO@ VariableDeclarationFragment@@fragment=Optional.ofNullable(CypherGenerator.INSTANCE.createOrderByFragment(Sort.by("n.`a.b.c`"))) @AT@ 8496 @LENGTH@ 89
------------INS SimpleName@@Name:Optional @TO@ MethodInvocation@@Optional.ofNullable(CypherGenerator.INSTANCE.createOrderByFragment(Sort.by("n.`a.b.c`"))) @AT@ 8496 @LENGTH@ 8
------------INS SimpleName@@MethodName:ofNullable:[CypherGenerator.INSTANCE.createOrderByFragment(Sort.by("n.`a.b.c`"))] @TO@ MethodInvocation@@Optional.ofNullable(CypherGenerator.INSTANCE.createOrderByFragment(Sort.by("n.`a.b.c`"))) @AT@ 8505 @LENGTH@ 80
---------------INS MethodInvocation@@CypherGenerator.INSTANCE.createOrderByFragment(Sort.by("n.`a.b.c`")) @TO@ SimpleName@@MethodName:ofNullable:[CypherGenerator.INSTANCE.createOrderByFragment(Sort.by("n.`a.b.c`"))] @AT@ 8516 @LENGTH@ 68
------------------INS QualifiedName@@Name:CypherGenerator.INSTANCE @TO@ MethodInvocation@@CypherGenerator.INSTANCE.createOrderByFragment(Sort.by("n.`a.b.c`")) @AT@ 8516 @LENGTH@ 24
------------------INS SimpleName@@MethodName:createOrderByFragment:[Sort.by("n.`a.b.c`")] @TO@ MethodInvocation@@CypherGenerator.INSTANCE.createOrderByFragment(Sort.by("n.`a.b.c`")) @AT@ 8541 @LENGTH@ 43
---------------------INS MethodInvocation@@Sort.by("n.`a.b.c`") @TO@ SimpleName@@MethodName:createOrderByFragment:[Sort.by("n.`a.b.c`")] @AT@ 8563 @LENGTH@ 20
------------------------INS SimpleName@@Name:Sort @TO@ MethodInvocation@@Sort.by("n.`a.b.c`") @AT@ 8563 @LENGTH@ 4
------------------------INS SimpleName@@MethodName:by:["n.`a.b.c`"] @TO@ MethodInvocation@@Sort.by("n.`a.b.c`") @AT@ 8568 @LENGTH@ 15
---------------------------INS StringLiteral@@"n.`a.b.c`" @TO@ SimpleName@@MethodName:by:["n.`a.b.c`"] @AT@ 8571 @LENGTH@ 11
---INS ExpressionStatement@@MethodInvocation:assertThat(fragment).hasValue("ORDER BY n.`a.b.c` ASC") @TO@ MethodDeclaration@@void, MethodName:shouldNotFailOnMultipleEscapedHops,  @AT@ 8589 @LENGTH@ 56
------INS MethodInvocation@@assertThat(fragment).hasValue("ORDER BY n.`a.b.c` ASC") @TO@ ExpressionStatement@@MethodInvocation:assertThat(fragment).hasValue("ORDER BY n.`a.b.c` ASC") @AT@ 8589 @LENGTH@ 55
---------INS MethodInvocation@@MethodName:assertThat:[fragment] @TO@ MethodInvocation@@assertThat(fragment).hasValue("ORDER BY n.`a.b.c` ASC") @AT@ 8589 @LENGTH@ 20
------------INS SimpleName@@fragment @TO@ MethodInvocation@@MethodName:assertThat:[fragment] @AT@ 8600 @LENGTH@ 8
---------INS SimpleName@@MethodName:hasValue:["ORDER BY n.`a.b.c` ASC"] @TO@ MethodInvocation@@assertThat(fragment).hasValue("ORDER BY n.`a.b.c` ASC") @AT@ 8610 @LENGTH@ 34
------------INS StringLiteral@@"ORDER BY n.`a.b.c` ASC" @TO@ SimpleName@@MethodName:hasValue:["ORDER BY n.`a.b.c` ASC"] @AT@ 8619 @LENGTH@ 24


UPD TypeDeclaration@@[public]KafkaConsumerManualCommitIT, BaseEmbeddedKafkaTestSupport @TO@ [@TestInstance(TestInstance.Lifecycle.PER_METHOD), public]KafkaConsumerManualCommitIT, BaseEmbeddedKafkaTestSupport @AT@ 1460 @LENGTH@ 4467
---INS SingleMemberAnnotation@@@TestInstance(TestInstance.Lifecycle.PER_METHOD) @TO@ TypeDeclaration@@[public]KafkaConsumerManualCommitIT, BaseEmbeddedKafkaTestSupport @AT@ 1503 @LENGTH@ 48


UPD TryStatement@@try (Transaction transaction=driver.session().beginTransaction()){  long numberOfRelations=transaction.run("MATCH (t:%s) WHERE id(t) = $id RETURN size((t)-->(:Pet)) as numberOfRelations".formatted(labelOfTestSubject),Values.parameters("id",recorded.get(0).getId())).single().get("numberOfRelations").asLong();  assertThat(numberOfRelations).isEqualTo(3L);  numberOfRelations=transaction.run("MATCH (t:%s) WHERE id(t) = $id RETURN size((t)-->(:Hobby)) as numberOfRelations".formatted(labelOfTestSubject),Values.parameters("id",newPerson.getId())).single().get("numberOfRelations").asLong();  assertThat(numberOfRelations).isEqualTo(2L);}  @TO@ try (Transaction transaction=driver.session(bookmarkCapture.createSessionConfig()).beginTransaction()){  long numberOfRelations=transaction.run(("MATCH (t:%s)-[r]->(:Pet) WHERE id(t) = $id RETURN count(r) as numberOfRelations").formatted(labelOfTestSubject),Values.parameters("id",newPerson.getId())).single().get("numberOfRelations").asLong();  assertThat(numberOfRelations).isEqualTo(3L);  numberOfRelations=transaction.run(("MATCH (t:%s)-[r]->(:Hobby) WHERE id(t) = $id RETURN count(r) as numberOfRelations").formatted(labelOfTestSubject),Values.parameters("id",newPerson.getId())).single().get("numberOfRelations").asLong();  assertThat(numberOfRelations).isEqualTo(2L);}  @AT@ 12802 @LENGTH@ 682
---UPD VariableDeclarationExpression@@Transaction transaction=driver.session().beginTransaction() @TO@ Transaction transaction=driver.session(bookmarkCapture.createSessionConfig()).beginTransaction() @AT@ 12807 @LENGTH@ 61
------UPD VariableDeclarationFragment@@transaction=driver.session().beginTransaction() @TO@ transaction=driver.session(bookmarkCapture.createSessionConfig()).beginTransaction() @AT@ 12819 @LENGTH@ 49
---------UPD MethodInvocation@@driver.session().beginTransaction() @TO@ driver.session(bookmarkCapture.createSessionConfig()).beginTransaction() @AT@ 12833 @LENGTH@ 35
------------UPD MethodInvocation@@MethodName:session:[] @TO@ MethodName:session:[bookmarkCapture.createSessionConfig()] @AT@ 12833 @LENGTH@ 16
---------------INS MethodInvocation@@bookmarkCapture.createSessionConfig() @TO@ MethodInvocation@@MethodName:session:[] @AT@ 12887 @LENGTH@ 37
------------------INS SimpleName@@Name:bookmarkCapture @TO@ MethodInvocation@@bookmarkCapture.createSessionConfig() @AT@ 12887 @LENGTH@ 15
------------------INS SimpleName@@MethodName:createSessionConfig:[] @TO@ MethodInvocation@@bookmarkCapture.createSessionConfig() @AT@ 12903 @LENGTH@ 21
---UPD VariableDeclarationStatement@@long numberOfRelations=transaction.run("MATCH (t:%s) WHERE id(t) = $id RETURN size((t)-->(:Pet)) as numberOfRelations".formatted(labelOfTestSubject),Values.parameters("id",recorded.get(0).getId())).single().get("numberOfRelations").asLong(); @TO@ long numberOfRelations=transaction.run(("MATCH (t:%s)-[r]->(:Pet) WHERE id(t) = $id RETURN count(r) as numberOfRelations").formatted(labelOfTestSubject),Values.parameters("id",newPerson.getId())).single().get("numberOfRelations").asLong(); @AT@ 12875 @LENGTH@ 257
------UPD VariableDeclarationFragment@@numberOfRelations=transaction.run("MATCH (t:%s) WHERE id(t) = $id RETURN size((t)-->(:Pet)) as numberOfRelations".formatted(labelOfTestSubject),Values.parameters("id",recorded.get(0).getId())).single().get("numberOfRelations").asLong() @TO@ numberOfRelations=transaction.run(("MATCH (t:%s)-[r]->(:Pet) WHERE id(t) = $id RETURN count(r) as numberOfRelations").formatted(labelOfTestSubject),Values.parameters("id",newPerson.getId())).single().get("numberOfRelations").asLong() @AT@ 12880 @LENGTH@ 251
---------UPD MethodInvocation@@transaction.run("MATCH (t:%s) WHERE id(t) = $id RETURN size((t)-->(:Pet)) as numberOfRelations".formatted(labelOfTestSubject),Values.parameters("id",recorded.get(0).getId())).single().get("numberOfRelations").asLong() @TO@ transaction.run(("MATCH (t:%s)-[r]->(:Pet) WHERE id(t) = $id RETURN count(r) as numberOfRelations").formatted(labelOfTestSubject),Values.parameters("id",newPerson.getId())).single().get("numberOfRelations").asLong() @AT@ 12900 @LENGTH@ 231
------------UPD MethodInvocation@@MethodName:run:["MATCH (t:%s) WHERE id(t) = $id RETURN size((t)-->(:Pet)) as numberOfRelations".formatted(labelOfTestSubject), Values.parameters("id",recorded.get(0).getId())] @TO@ MethodName:run:[("MATCH (t:%s)-[r]->(:Pet) WHERE id(t) = $id RETURN count(r) as numberOfRelations").formatted(labelOfTestSubject), Values.parameters("id",newPerson.getId())] @AT@ 12900 @LENGTH@ 182
---------------UPD MethodInvocation@@"MATCH (t:%s) WHERE id(t) = $id RETURN size((t)-->(:Pet)) as numberOfRelations".formatted(labelOfTestSubject) @TO@ ("MATCH (t:%s)-[r]->(:Pet) WHERE id(t) = $id RETURN count(r) as numberOfRelations").formatted(labelOfTestSubject) @AT@ 12922 @LENGTH@ 109
------------------DEL StringLiteral@@"MATCH (t:%s) WHERE id(t) = $id RETURN size((t)-->(:Pet)) as numberOfRelations" @AT@ 12922 @LENGTH@ 79
------------------INS ParenthesizedExpression@@("MATCH (t:%s)-[r]->(:Pet) WHERE id(t) = $id RETURN count(r) as numberOfRelations") @TO@ MethodInvocation@@"MATCH (t:%s) WHERE id(t) = $id RETURN size((t)-->(:Pet)) as numberOfRelations".formatted(labelOfTestSubject) @AT@ 12998 @LENGTH@ 83
---------------------INS StringLiteral@@"MATCH (t:%s)-[r]->(:Pet) WHERE id(t) = $id RETURN count(r) as numberOfRelations" @TO@ ParenthesizedExpression@@("MATCH (t:%s)-[r]->(:Pet) WHERE id(t) = $id RETURN count(r) as numberOfRelations") @AT@ 12999 @LENGTH@ 81
---------------UPD MethodInvocation@@Values.parameters("id",recorded.get(0).getId()) @TO@ Values.parameters("id",newPerson.getId()) @AT@ 13033 @LENGTH@ 48
------------------UPD SimpleName@@MethodName:parameters:["id", recorded.get(0).getId()] @TO@ MethodName:parameters:["id", newPerson.getId()] @AT@ 13040 @LENGTH@ 41
---------------------UPD MethodInvocation@@recorded.get(0).getId() @TO@ newPerson.getId() @AT@ 13057 @LENGTH@ 23
------------------------DEL MethodInvocation@@MethodName:get:[0] @AT@ 13057 @LENGTH@ 15
---------------------------DEL NumberLiteral@@0 @AT@ 13070 @LENGTH@ 1
------------------------UPD SimpleName@@Name:recorded @TO@ Name:newPerson @AT@ 13057 @LENGTH@ 8
---UPD ExpressionStatement@@Assignment:numberOfRelations=transaction.run("MATCH (t:%s) WHERE id(t) = $id RETURN size((t)-->(:Hobby)) as numberOfRelations".formatted(labelOfTestSubject),Values.parameters("id",newPerson.getId())).single().get("numberOfRelations").asLong() @TO@ Assignment:numberOfRelations=transaction.run(("MATCH (t:%s)-[r]->(:Hobby) WHERE id(t) = $id RETURN count(r) as numberOfRelations").formatted(labelOfTestSubject),Values.parameters("id",newPerson.getId())).single().get("numberOfRelations").asLong() @AT@ 13184 @LENGTH@ 248
------UPD Assignment@@numberOfRelations=transaction.run("MATCH (t:%s) WHERE id(t) = $id RETURN size((t)-->(:Hobby)) as numberOfRelations".formatted(labelOfTestSubject),Values.parameters("id",newPerson.getId())).single().get("numberOfRelations").asLong() @TO@ numberOfRelations=transaction.run(("MATCH (t:%s)-[r]->(:Hobby) WHERE id(t) = $id RETURN count(r) as numberOfRelations").formatted(labelOfTestSubject),Values.parameters("id",newPerson.getId())).single().get("numberOfRelations").asLong() @AT@ 13184 @LENGTH@ 247
---------UPD MethodInvocation@@transaction.run("MATCH (t:%s) WHERE id(t) = $id RETURN size((t)-->(:Hobby)) as numberOfRelations".formatted(labelOfTestSubject),Values.parameters("id",newPerson.getId())).single().get("numberOfRelations").asLong() @TO@ transaction.run(("MATCH (t:%s)-[r]->(:Hobby) WHERE id(t) = $id RETURN count(r) as numberOfRelations").formatted(labelOfTestSubject),Values.parameters("id",newPerson.getId())).single().get("numberOfRelations").asLong() @AT@ 13204 @LENGTH@ 227
------------UPD MethodInvocation@@MethodName:run:["MATCH (t:%s) WHERE id(t) = $id RETURN size((t)-->(:Hobby)) as numberOfRelations".formatted(labelOfTestSubject), Values.parameters("id",newPerson.getId())] @TO@ MethodName:run:[("MATCH (t:%s)-[r]->(:Hobby) WHERE id(t) = $id RETURN count(r) as numberOfRelations").formatted(labelOfTestSubject), Values.parameters("id",newPerson.getId())] @AT@ 13204 @LENGTH@ 178
---------------UPD MethodInvocation@@"MATCH (t:%s) WHERE id(t) = $id RETURN size((t)-->(:Hobby)) as numberOfRelations".formatted(labelOfTestSubject) @TO@ ("MATCH (t:%s)-[r]->(:Hobby) WHERE id(t) = $id RETURN count(r) as numberOfRelations").formatted(labelOfTestSubject) @AT@ 13226 @LENGTH@ 111
------------------DEL StringLiteral@@"MATCH (t:%s) WHERE id(t) = $id RETURN size((t)-->(:Hobby)) as numberOfRelations" @AT@ 13226 @LENGTH@ 81
------------------INS ParenthesizedExpression@@("MATCH (t:%s)-[r]->(:Hobby) WHERE id(t) = $id RETURN count(r) as numberOfRelations") @TO@ MethodInvocation@@"MATCH (t:%s) WHERE id(t) = $id RETURN size((t)-->(:Hobby)) as numberOfRelations".formatted(labelOfTestSubject) @AT@ 13307 @LENGTH@ 85
---------------------INS StringLiteral@@"MATCH (t:%s)-[r]->(:Hobby) WHERE id(t) = $id RETURN count(r) as numberOfRelations" @TO@ ParenthesizedExpression@@("MATCH (t:%s)-[r]->(:Hobby) WHERE id(t) = $id RETURN count(r) as numberOfRelations") @AT@ 13308 @LENGTH@ 83


UPD ReturnStatement@@MethodInvocation:Flux.fromIterable(instances).flatMap(instance -> {
  EntityFromDtoInstantiatingConverter<T> converter=new EntityFromDtoInstantiatingConverter<>(domainType,neo4jMappingContext);
  T domainObject=converter.convert(instance);
  @SuppressWarnings("unchecked") Mono<R> result=saveImpl(domainObject,pps,stateMachine).map(savedEntity -> (R)new DtoInstantiatingConverter(resultType,neo4jMappingContext).convertDirectly(savedEntity));
  return result;
}
) @TO@ MethodInvocation:Flux.fromIterable(instances).flatMap(instance -> {
  T domainObject=converter.convert(instance);
  @SuppressWarnings("unchecked") Mono<R> result=saveImpl(domainObject,pps,stateMachine).map(savedEntity -> (R)new DtoInstantiatingConverter(resultType,neo4jMappingContext).convertDirectly(savedEntity));
  return result;
}
) @AT@ 15616 @LENGTH@ 491
---UPD MethodInvocation@@Flux.fromIterable(instances).flatMap(instance -> {
  EntityFromDtoInstantiatingConverter<T> converter=new EntityFromDtoInstantiatingConverter<>(domainType,neo4jMappingContext);
  T domainObject=converter.convert(instance);
  @SuppressWarnings("unchecked") Mono<R> result=saveImpl(domainObject,pps,stateMachine).map(savedEntity -> (R)new DtoInstantiatingConverter(resultType,neo4jMappingContext).convertDirectly(savedEntity));
  return result;
}
) @TO@ Flux.fromIterable(instances).flatMap(instance -> {
  T domainObject=converter.convert(instance);
  @SuppressWarnings("unchecked") Mono<R> result=saveImpl(domainObject,pps,stateMachine).map(savedEntity -> (R)new DtoInstantiatingConverter(resultType,neo4jMappingContext).convertDirectly(savedEntity));
  return result;
}
) @AT@ 15623 @LENGTH@ 483
------UPD SimpleName@@MethodName:flatMap:[instance -> {
  EntityFromDtoInstantiatingConverter<T> converter=new EntityFromDtoInstantiatingConverter<>(domainType,neo4jMappingContext);
  T domainObject=converter.convert(instance);
  @SuppressWarnings("unchecked") Mono<R> result=saveImpl(domainObject,pps,stateMachine).map(savedEntity -> (R)new DtoInstantiatingConverter(resultType,neo4jMappingContext).convertDirectly(savedEntity));
  return result;
}
] @TO@ MethodName:flatMap:[instance -> {
  T domainObject=converter.convert(instance);
  @SuppressWarnings("unchecked") Mono<R> result=saveImpl(domainObject,pps,stateMachine).map(savedEntity -> (R)new DtoInstantiatingConverter(resultType,neo4jMappingContext).convertDirectly(savedEntity));
  return result;
}
] @AT@ 15656 @LENGTH@ 450
---------UPD LambdaExpression@@instance -> {
  EntityFromDtoInstantiatingConverter<T> converter=new EntityFromDtoInstantiatingConverter<>(domainType,neo4jMappingContext);
  T domainObject=converter.convert(instance);
  @SuppressWarnings("unchecked") Mono<R> result=saveImpl(domainObject,pps,stateMachine).map(savedEntity -> (R)new DtoInstantiatingConverter(resultType,neo4jMappingContext).convertDirectly(savedEntity));
  return result;
}
 @TO@ instance -> {
  T domainObject=converter.convert(instance);
  @SuppressWarnings("unchecked") Mono<R> result=saveImpl(domainObject,pps,stateMachine).map(savedEntity -> (R)new DtoInstantiatingConverter(resultType,neo4jMappingContext).convertDirectly(savedEntity));
  return result;
}
 @AT@ 15664 @LENGTH@ 441


UPD ExpressionStatement@@Assignment:query=IOHelper.loadText(ObjectHelper.loadResourceAsStream(queryFile)) @TO@ Assignment:query=IOHelper.loadText(ObjectHelper.loadResourceAsStream(queryFile,getClass().getClassLoader())) @AT@ 6148 @LENGTH@ 72
---UPD Assignment@@query=IOHelper.loadText(ObjectHelper.loadResourceAsStream(queryFile)) @TO@ query=IOHelper.loadText(ObjectHelper.loadResourceAsStream(queryFile,getClass().getClassLoader())) @AT@ 6148 @LENGTH@ 71
------UPD MethodInvocation@@IOHelper.loadText(ObjectHelper.loadResourceAsStream(queryFile)) @TO@ IOHelper.loadText(ObjectHelper.loadResourceAsStream(queryFile,getClass().getClassLoader())) @AT@ 6156 @LENGTH@ 63
---------UPD SimpleName@@MethodName:loadText:[ObjectHelper.loadResourceAsStream(queryFile)] @TO@ MethodName:loadText:[ObjectHelper.loadResourceAsStream(queryFile,getClass().getClassLoader())] @AT@ 6165 @LENGTH@ 54
------------UPD MethodInvocation@@ObjectHelper.loadResourceAsStream(queryFile) @TO@ ObjectHelper.loadResourceAsStream(queryFile,getClass().getClassLoader()) @AT@ 6174 @LENGTH@ 44
---------------UPD SimpleName@@MethodName:loadResourceAsStream:[queryFile] @TO@ MethodName:loadResourceAsStream:[queryFile, getClass().getClassLoader()] @AT@ 6187 @LENGTH@ 31
------------------INS MethodInvocation@@getClass().getClassLoader() @TO@ SimpleName@@MethodName:loadResourceAsStream:[queryFile] @AT@ 6219 @LENGTH@ 27
---------------------INS MethodInvocation@@MethodName:getClass:[] @TO@ MethodInvocation@@getClass().getClassLoader() @AT@ 6219 @LENGTH@ 10
---------------------INS SimpleName@@MethodName:getClassLoader:[] @TO@ MethodInvocation@@getClass().getClassLoader() @AT@ 6230 @LENGTH@ 16


UPD VariableDeclarationStatement@@final String[] result=new String[]{"0","1","2"}; @TO@ final String[] result={"0","1","2"}; @AT@ 2955 @LENGTH@ 55
---UPD VariableDeclarationFragment@@result=new String[]{"0","1","2"} @TO@ result={"0","1","2"} @AT@ 2970 @LENGTH@ 39
------INS ArrayInitializer@@{"0","1","2"} @TO@ VariableDeclarationFragment@@result=new String[]{"0","1","2"} @AT@ 2966 @LENGTH@ 17
---------MOV StringLiteral@@"0" @TO@ ArrayInitializer@@{"0","1","2"} @AT@ 2994 @LENGTH@ 3
---------MOV StringLiteral@@"1" @TO@ ArrayInitializer@@{"0","1","2"} @AT@ 2999 @LENGTH@ 3
---------MOV StringLiteral@@"2" @TO@ ArrayInitializer@@{"0","1","2"} @AT@ 3004 @LENGTH@ 3
------DEL ArrayCreation@@new String[]{"0","1","2"} @AT@ 2979 @LENGTH@ 30
---------DEL ArrayType@@String[] @AT@ 2983 @LENGTH@ 8
------------DEL SimpleType@@String @AT@ 2983 @LENGTH@ 6
---------DEL ArrayInitializer@@{"0","1","2"} @AT@ 2992 @LENGTH@ 17


UPD TryStatement@@try {  if (budget.maxDuration() == TimeBoundedBudget.UNLIMITED_DURATION) {    latch.await();    completed=true;  } else {    if (!latch.await(budget.maxDuration(),TimeUnit.MILLISECONDS)) {      LOG.debug("Timeout out waiting for the completion of the task");    } else {      LOG.debug("The task has finished the execution and it is ready to continue");      completed=true;    }  }  service.shutdown();  service.awaitTermination(1,TimeUnit.SECONDS);} catch (InterruptedException e) {  LOG.warn("Interrupted while waiting for the repeatable task to execute");  Thread.currentThread().interrupt();} finally {  elapsed=budget.elapsed();  service.shutdownNow();} @TO@ try {  if (budget.maxDuration() == TimeBoundedBudget.UNLIMITED_DURATION) {    latch.await();    completed=true;  } else {    if (!latch.await(budget.maxDuration(),TimeUnit.MILLISECONDS)) {      LOG.debug("Timeout out waiting for the completion of the task");    } else {      LOG.debug("The task has finished the execution and it is ready to continue");      completed=true;    }  }  service.shutdown();  if (!service.awaitTermination(1,TimeUnit.SECONDS)) {    LOG.warn("The tasks did not finish with the specified time");  }} catch (InterruptedException e) {  LOG.warn("Interrupted while waiting for the repeatable task to execute: {}",e.getMessage(),e);  Thread.currentThread().interrupt();} finally {  elapsed=budget.elapsed();  service.shutdownNow();} @AT@ 5501 @LENGTH@ 905
---INS IfStatement@@if (!service.awaitTermination(1,TimeUnit.SECONDS)) {  LOG.warn("The tasks did not finish with the specified time");} @TO@ TryStatement@@try {  if (budget.maxDuration() == TimeBoundedBudget.UNLIMITED_DURATION) {    latch.await();    completed=true;  } else {    if (!latch.await(budget.maxDuration(),TimeUnit.MILLISECONDS)) {      LOG.debug("Timeout out waiting for the completion of the task");    } else {      LOG.debug("The task has finished the execution and it is ready to continue");      completed=true;    }  }  service.shutdown();  service.awaitTermination(1,TimeUnit.SECONDS);} catch (InterruptedException e) {  LOG.warn("Interrupted while waiting for the repeatable task to execute");  Thread.currentThread().interrupt();} finally {  elapsed=budget.elapsed();  service.shutdownNow();} @AT@ 6078 @LENGTH@ 145
------INS PrefixExpression@@!service.awaitTermination(1,TimeUnit.SECONDS) @TO@ IfStatement@@if (!service.awaitTermination(1,TimeUnit.SECONDS)) {  LOG.warn("The tasks did not finish with the specified time");} @AT@ 6082 @LENGTH@ 46
---------MOV MethodInvocation@@service.awaitTermination(1,TimeUnit.SECONDS) @TO@ PrefixExpression@@!service.awaitTermination(1,TimeUnit.SECONDS) @AT@ 6078 @LENGTH@ 45
---------INS Operator@@! @TO@ PrefixExpression@@!service.awaitTermination(1,TimeUnit.SECONDS) @AT@ 6082 @LENGTH@ 1
------INS Block@@ThenBody:{  LOG.warn("The tasks did not finish with the specified time");} @TO@ IfStatement@@if (!service.awaitTermination(1,TimeUnit.SECONDS)) {  LOG.warn("The tasks did not finish with the specified time");} @AT@ 6130 @LENGTH@ 93
---------INS ExpressionStatement@@MethodInvocation:LOG.warn("The tasks did not finish with the specified time") @TO@ Block@@ThenBody:{  LOG.warn("The tasks did not finish with the specified time");} @AT@ 6148 @LENGTH@ 61
------------INS MethodInvocation@@LOG.warn("The tasks did not finish with the specified time") @TO@ ExpressionStatement@@MethodInvocation:LOG.warn("The tasks did not finish with the specified time") @AT@ 6148 @LENGTH@ 60
---------------INS SimpleName@@Name:LOG @TO@ MethodInvocation@@LOG.warn("The tasks did not finish with the specified time") @AT@ 6148 @LENGTH@ 3
---------------INS SimpleName@@MethodName:warn:["The tasks did not finish with the specified time"] @TO@ MethodInvocation@@LOG.warn("The tasks did not finish with the specified time") @AT@ 6152 @LENGTH@ 56
------------------INS StringLiteral@@"The tasks did not finish with the specified time" @TO@ SimpleName@@MethodName:warn:["The tasks did not finish with the specified time"] @AT@ 6157 @LENGTH@ 50
---DEL ExpressionStatement@@MethodInvocation:service.awaitTermination(1,TimeUnit.SECONDS) @AT@ 6078 @LENGTH@ 46
---UPD CatchClause@@catch (InterruptedException e) {  LOG.warn("Interrupted while waiting for the repeatable task to execute");  Thread.currentThread().interrupt();} @TO@ catch (InterruptedException e) {  LOG.warn("Interrupted while waiting for the repeatable task to execute: {}",e.getMessage(),e);  Thread.currentThread().interrupt();} @AT@ 6135 @LENGTH@ 176
------UPD ExpressionStatement@@MethodInvocation:LOG.warn("Interrupted while waiting for the repeatable task to execute") @TO@ MethodInvocation:LOG.warn("Interrupted while waiting for the repeatable task to execute: {}",e.getMessage(),e) @AT@ 6180 @LENGTH@ 73
---------UPD MethodInvocation@@LOG.warn("Interrupted while waiting for the repeatable task to execute") @TO@ LOG.warn("Interrupted while waiting for the repeatable task to execute: {}",e.getMessage(),e) @AT@ 6180 @LENGTH@ 72
------------UPD SimpleName@@MethodName:warn:["Interrupted while waiting for the repeatable task to execute"] @TO@ MethodName:warn:["Interrupted while waiting for the repeatable task to execute: {}", e.getMessage(), e] @AT@ 6184 @LENGTH@ 68
---------------UPD StringLiteral@@"Interrupted while waiting for the repeatable task to execute" @TO@ "Interrupted while waiting for the repeatable task to execute: {}" @AT@ 6189 @LENGTH@ 62
---------------INS MethodInvocation@@e.getMessage() @TO@ SimpleName@@MethodName:warn:["Interrupted while waiting for the repeatable task to execute"] @AT@ 6356 @LENGTH@ 14
------------------INS SimpleName@@Name:e @TO@ MethodInvocation@@e.getMessage() @AT@ 6356 @LENGTH@ 1
------------------INS SimpleName@@MethodName:getMessage:[] @TO@ MethodInvocation@@e.getMessage() @AT@ 6358 @LENGTH@ 12
---------------INS SimpleName@@e @TO@ SimpleName@@MethodName:warn:["Interrupted while waiting for the repeatable task to execute"] @AT@ 6372 @LENGTH@ 1


UPD ExpressionStatement@@MethodInvocation:from("direct:apexCallPatch").to("salesforce:apexCall/Merchandise/" + "&apexMethod=PATCH&sObjectClass=" + MerchandiseResponse.class.getName()) @TO@ MethodInvocation:from("direct:apexCallPatch").to("salesforce:apexCall/Merchandise/" + "?apexMethod=PATCH&sObjectClass=" + MerchandiseResponse.class.getName()) @AT@ 35801 @LENGTH@ 190
---UPD MethodInvocation@@from("direct:apexCallPatch").to("salesforce:apexCall/Merchandise/" + "&apexMethod=PATCH&sObjectClass=" + MerchandiseResponse.class.getName()) @TO@ from("direct:apexCallPatch").to("salesforce:apexCall/Merchandise/" + "?apexMethod=PATCH&sObjectClass=" + MerchandiseResponse.class.getName()) @AT@ 35801 @LENGTH@ 189
------UPD SimpleName@@MethodName:to:["salesforce:apexCall/Merchandise/" + "&apexMethod=PATCH&sObjectClass=" + MerchandiseResponse.class.getName()] @TO@ MethodName:to:["salesforce:apexCall/Merchandise/" + "?apexMethod=PATCH&sObjectClass=" + MerchandiseResponse.class.getName()] @AT@ 35830 @LENGTH@ 160
---------UPD InfixExpression@@"salesforce:apexCall/Merchandise/" + "&apexMethod=PATCH&sObjectClass=" + MerchandiseResponse.class.getName() @TO@ "salesforce:apexCall/Merchandise/" + "?apexMethod=PATCH&sObjectClass=" + MerchandiseResponse.class.getName() @AT@ 35833 @LENGTH@ 156
------------UPD StringLiteral@@"&apexMethod=PATCH&sObjectClass=" @TO@ "?apexMethod=PATCH&sObjectClass=" @AT@ 35918 @LENGTH@ 33


UPD ReturnStatement@@ConditionalExpression:(cacheSecurityContext) ? result.cache() : result @TO@ ConditionalExpression:(this.cacheSecurityContext) ? result.cache() : result @AT@ 3826 @LENGTH@ 56
---UPD ConditionalExpression@@(cacheSecurityContext) ? result.cache() : result @TO@ (this.cacheSecurityContext) ? result.cache() : result @AT@ 3833 @LENGTH@ 48
------UPD ParenthesizedExpression@@(cacheSecurityContext) @TO@ (this.cacheSecurityContext) @AT@ 3833 @LENGTH@ 22
---------INS FieldAccess@@this.cacheSecurityContext @TO@ ParenthesizedExpression@@(cacheSecurityContext) @AT@ 3834 @LENGTH@ 25
------------INS ThisExpression@@this @TO@ FieldAccess@@this.cacheSecurityContext @AT@ 3834 @LENGTH@ 4
------------INS SimpleName@@cacheSecurityContext @TO@ FieldAccess@@this.cacheSecurityContext @AT@ 3839 @LENGTH@ 20
---------DEL SimpleName@@cacheSecurityContext @AT@ 3834 @LENGTH@ 20


INS MethodDeclaration@@public, void, MethodName:addCommand, String name, MethodTarget target,  @TO@ TypeDeclaration@@[public]ConfigurableCommandRegistry, [CommandRegistry] @AT@ 2056 @LENGTH@ 91
---INS Modifier@@public @TO@ MethodDeclaration@@public, void, MethodName:addCommand, String name, MethodTarget target,  @AT@ 2056 @LENGTH@ 6
---INS PrimitiveType@@void @TO@ MethodDeclaration@@public, void, MethodName:addCommand, String name, MethodTarget target,  @AT@ 2063 @LENGTH@ 4
---INS SimpleName@@MethodName:addCommand @TO@ MethodDeclaration@@public, void, MethodName:addCommand, String name, MethodTarget target,  @AT@ 2068 @LENGTH@ 10
---INS SingleVariableDeclaration@@String name @TO@ MethodDeclaration@@public, void, MethodName:addCommand, String name, MethodTarget target,  @AT@ 2079 @LENGTH@ 11
------INS SimpleType@@String @TO@ SingleVariableDeclaration@@String name @AT@ 2079 @LENGTH@ 6
------INS SimpleName@@name @TO@ SingleVariableDeclaration@@String name @AT@ 2086 @LENGTH@ 4
---INS SingleVariableDeclaration@@MethodTarget target @TO@ MethodDeclaration@@public, void, MethodName:addCommand, String name, MethodTarget target,  @AT@ 2092 @LENGTH@ 19
------INS SimpleType@@MethodTarget @TO@ SingleVariableDeclaration@@MethodTarget target @AT@ 2092 @LENGTH@ 12
------INS SimpleName@@target @TO@ SingleVariableDeclaration@@MethodTarget target @AT@ 2105 @LENGTH@ 6
---INS ExpressionStatement@@MethodInvocation:commands.put(name,target) @TO@ MethodDeclaration@@public, void, MethodName:addCommand, String name, MethodTarget target,  @AT@ 2117 @LENGTH@ 27
------INS MethodInvocation@@commands.put(name,target) @TO@ ExpressionStatement@@MethodInvocation:commands.put(name,target) @AT@ 2117 @LENGTH@ 26
---------INS SimpleName@@Name:commands @TO@ MethodInvocation@@commands.put(name,target) @AT@ 2117 @LENGTH@ 8
---------INS SimpleName@@MethodName:put:[name, target] @TO@ MethodInvocation@@commands.put(name,target) @AT@ 2126 @LENGTH@ 17
------------INS SimpleName@@name @TO@ SimpleName@@MethodName:put:[name, target] @AT@ 2130 @LENGTH@ 4
------------INS SimpleName@@target @TO@ SimpleName@@MethodName:put:[name, target] @AT@ 2136 @LENGTH@ 6


UPD ExpressionStatement@@MethodInvocation:Mockito.when(mockExchange.getOut()).thenReturn(mockOutboundCamelMessage) @TO@ MethodInvocation:Mockito.when(mockExchange.getMessage()).thenReturn(mockOutboundCamelMessage) @AT@ 5583 @LENGTH@ 73
---UPD MethodInvocation@@Mockito.when(mockExchange.getOut()).thenReturn(mockOutboundCamelMessage) @TO@ Mockito.when(mockExchange.getMessage()).thenReturn(mockOutboundCamelMessage) @AT@ 5583 @LENGTH@ 72
------UPD MethodInvocation@@MethodName:when:[mockExchange.getOut()] @TO@ MethodName:when:[mockExchange.getMessage()] @AT@ 5583 @LENGTH@ 35
---------UPD MethodInvocation@@mockExchange.getOut() @TO@ mockExchange.getMessage() @AT@ 5596 @LENGTH@ 21
------------UPD SimpleName@@MethodName:getOut:[] @TO@ MethodName:getMessage:[] @AT@ 5609 @LENGTH@ 8


INS TryStatement@@try {  read.lock();  Optional<E> entity=persistentEntities.get(typeInformation);  if (entity != null) {    return entity.isPresent();  }  TypeInformation<?> userTypeInformation=typeInformation.getUserTypeInformation();  if (userTypeInformation.equals(typeInformation)) {    return false;  }  entity=persistentEntities.get(typeInformation.getUserTypeInformation());  return entity == null ? false : entity.isPresent();}  finally {  read.unlock();} @TO@ MethodDeclaration@@public, boolean, MethodName:hasPersistentEntityFor, Class<?> type,  @AT@ 7976 @LENGTH@ 574
---MOV ReturnStatement@@ConditionalExpression:entity == null ? false : entity.isPresent() @TO@ TryStatement@@try {  read.lock();  Optional<E> entity=persistentEntities.get(typeInformation);  if (entity != null) {    return entity.isPresent();  }  TypeInformation<?> userTypeInformation=typeInformation.getUserTypeInformation();  if (userTypeInformation.equals(typeInformation)) {    return false;  }  entity=persistentEntities.get(typeInformation.getUserTypeInformation());  return entity == null ? false : entity.isPresent();}  finally {  read.unlock();} @AT@ 7984 @LENGTH@ 51
---INS ExpressionStatement@@MethodInvocation:read.lock() @TO@ TryStatement@@try {  read.lock();  Optional<E> entity=persistentEntities.get(typeInformation);  if (entity != null) {    return entity.isPresent();  }  TypeInformation<?> userTypeInformation=typeInformation.getUserTypeInformation();  if (userTypeInformation.equals(typeInformation)) {    return false;  }  entity=persistentEntities.get(typeInformation.getUserTypeInformation());  return entity == null ? false : entity.isPresent();}  finally {  read.unlock();} @AT@ 7986 @LENGTH@ 12
------INS MethodInvocation@@read.lock() @TO@ ExpressionStatement@@MethodInvocation:read.lock() @AT@ 7986 @LENGTH@ 11
---------INS SimpleName@@Name:read @TO@ MethodInvocation@@read.lock() @AT@ 7986 @LENGTH@ 4
---------INS SimpleName@@MethodName:lock:[] @TO@ MethodInvocation@@read.lock() @AT@ 7991 @LENGTH@ 6
---INS VariableDeclarationStatement@@Optional<E> entity=persistentEntities.get(typeInformation); @TO@ TryStatement@@try {  read.lock();  Optional<E> entity=persistentEntities.get(typeInformation);  if (entity != null) {    return entity.isPresent();  }  TypeInformation<?> userTypeInformation=typeInformation.getUserTypeInformation();  if (userTypeInformation.equals(typeInformation)) {    return false;  }  entity=persistentEntities.get(typeInformation.getUserTypeInformation());  return entity == null ? false : entity.isPresent();}  finally {  read.unlock();} @AT@ 8037 @LENGTH@ 61
------INS ParameterizedType@@Optional<E> @TO@ VariableDeclarationStatement@@Optional<E> entity=persistentEntities.get(typeInformation); @AT@ 8037 @LENGTH@ 11
---------INS SimpleType@@Optional @TO@ ParameterizedType@@Optional<E> @AT@ 8037 @LENGTH@ 8
---------INS SimpleType@@E @TO@ ParameterizedType@@Optional<E> @AT@ 8046 @LENGTH@ 1
------INS VariableDeclarationFragment@@entity=persistentEntities.get(typeInformation) @TO@ VariableDeclarationStatement@@Optional<E> entity=persistentEntities.get(typeInformation); @AT@ 8049 @LENGTH@ 48
---------INS SimpleName@@entity @TO@ VariableDeclarationFragment@@entity=persistentEntities.get(typeInformation) @AT@ 8049 @LENGTH@ 6
---------INS MethodInvocation@@persistentEntities.get(typeInformation) @TO@ VariableDeclarationFragment@@entity=persistentEntities.get(typeInformation) @AT@ 8058 @LENGTH@ 39
------------INS SimpleName@@Name:persistentEntities @TO@ MethodInvocation@@persistentEntities.get(typeInformation) @AT@ 8058 @LENGTH@ 18
------------INS SimpleName@@MethodName:get:[typeInformation] @TO@ MethodInvocation@@persistentEntities.get(typeInformation) @AT@ 8077 @LENGTH@ 20
---------------INS SimpleName@@typeInformation @TO@ SimpleName@@MethodName:get:[typeInformation] @AT@ 8081 @LENGTH@ 15
---INS IfStatement@@if (entity != null) {  return entity.isPresent();} @TO@ TryStatement@@try {  read.lock();  Optional<E> entity=persistentEntities.get(typeInformation);  if (entity != null) {    return entity.isPresent();  }  TypeInformation<?> userTypeInformation=typeInformation.getUserTypeInformation();  if (userTypeInformation.equals(typeInformation)) {    return false;  }  entity=persistentEntities.get(typeInformation.getUserTypeInformation());  return entity == null ? false : entity.isPresent();}  finally {  read.unlock();} @AT@ 8103 @LENGTH@ 57
------INS InfixExpression@@entity != null @TO@ IfStatement@@if (entity != null) {  return entity.isPresent();} @AT@ 8107 @LENGTH@ 14
---------INS SimpleName@@entity @TO@ InfixExpression@@entity != null @AT@ 8107 @LENGTH@ 6
---------INS Operator@@!= @TO@ InfixExpression@@entity != null @AT@ 8113 @LENGTH@ 2
---------INS NullLiteral@@null @TO@ InfixExpression@@entity != null @AT@ 8117 @LENGTH@ 4
------INS Block@@ThenBody:{  return entity.isPresent();} @TO@ IfStatement@@if (entity != null) {  return entity.isPresent();} @AT@ 8123 @LENGTH@ 37
---------INS ReturnStatement@@MethodInvocation:entity.isPresent() @TO@ Block@@ThenBody:{  return entity.isPresent();} @AT@ 8129 @LENGTH@ 26
------------INS MethodInvocation@@entity.isPresent() @TO@ ReturnStatement@@MethodInvocation:entity.isPresent() @AT@ 8136 @LENGTH@ 18
---------------INS SimpleName@@Name:entity @TO@ MethodInvocation@@entity.isPresent() @AT@ 8136 @LENGTH@ 6
---------------INS SimpleName@@MethodName:isPresent:[] @TO@ MethodInvocation@@entity.isPresent() @AT@ 8143 @LENGTH@ 11
---INS VariableDeclarationStatement@@TypeInformation<?> userTypeInformation=typeInformation.getUserTypeInformation(); @TO@ TryStatement@@try {  read.lock();  Optional<E> entity=persistentEntities.get(typeInformation);  if (entity != null) {    return entity.isPresent();  }  TypeInformation<?> userTypeInformation=typeInformation.getUserTypeInformation();  if (userTypeInformation.equals(typeInformation)) {    return false;  }  entity=persistentEntities.get(typeInformation.getUserTypeInformation());  return entity == null ? false : entity.isPresent();}  finally {  read.unlock();} @AT@ 8194 @LENGTH@ 82
------INS ParameterizedType@@TypeInformation<?> @TO@ VariableDeclarationStatement@@TypeInformation<?> userTypeInformation=typeInformation.getUserTypeInformation(); @AT@ 8194 @LENGTH@ 18
---------INS SimpleType@@TypeInformation @TO@ ParameterizedType@@TypeInformation<?> @AT@ 8194 @LENGTH@ 15
---------INS WildcardType@@? @TO@ ParameterizedType@@TypeInformation<?> @AT@ 8210 @LENGTH@ 1
------INS VariableDeclarationFragment@@userTypeInformation=typeInformation.getUserTypeInformation() @TO@ VariableDeclarationStatement@@TypeInformation<?> userTypeInformation=typeInformation.getUserTypeInformation(); @AT@ 8213 @LENGTH@ 62
---------INS SimpleName@@userTypeInformation @TO@ VariableDeclarationFragment@@userTypeInformation=typeInformation.getUserTypeInformation() @AT@ 8213 @LENGTH@ 19
---------INS MethodInvocation@@typeInformation.getUserTypeInformation() @TO@ VariableDeclarationFragment@@userTypeInformation=typeInformation.getUserTypeInformation() @AT@ 8235 @LENGTH@ 40
------------INS SimpleName@@Name:typeInformation @TO@ MethodInvocation@@typeInformation.getUserTypeInformation() @AT@ 8235 @LENGTH@ 15
------------INS SimpleName@@MethodName:getUserTypeInformation:[] @TO@ MethodInvocation@@typeInformation.getUserTypeInformation() @AT@ 8251 @LENGTH@ 24
---INS IfStatement@@if (userTypeInformation.equals(typeInformation)) {  return false;} @TO@ TryStatement@@try {  read.lock();  Optional<E> entity=persistentEntities.get(typeInformation);  if (entity != null) {    return entity.isPresent();  }  TypeInformation<?> userTypeInformation=typeInformation.getUserTypeInformation();  if (userTypeInformation.equals(typeInformation)) {    return false;  }  entity=persistentEntities.get(typeInformation.getUserTypeInformation());  return entity == null ? false : entity.isPresent();}  finally {  read.unlock();} @AT@ 8281 @LENGTH@ 73
------INS MethodInvocation@@userTypeInformation.equals(typeInformation) @TO@ IfStatement@@if (userTypeInformation.equals(typeInformation)) {  return false;} @AT@ 8285 @LENGTH@ 43
---------INS SimpleName@@Name:userTypeInformation @TO@ MethodInvocation@@userTypeInformation.equals(typeInformation) @AT@ 8285 @LENGTH@ 19
---------INS SimpleName@@MethodName:equals:[typeInformation] @TO@ MethodInvocation@@userTypeInformation.equals(typeInformation) @AT@ 8305 @LENGTH@ 23
------------INS SimpleName@@typeInformation @TO@ SimpleName@@MethodName:equals:[typeInformation] @AT@ 8312 @LENGTH@ 15
------INS Block@@ThenBody:{  return false;} @TO@ IfStatement@@if (userTypeInformation.equals(typeInformation)) {  return false;} @AT@ 8330 @LENGTH@ 24
---------INS ReturnStatement@@BooleanLiteral:false @TO@ Block@@ThenBody:{  return false;} @AT@ 8336 @LENGTH@ 13
------------INS BooleanLiteral@@false @TO@ ReturnStatement@@BooleanLiteral:false @AT@ 8343 @LENGTH@ 5
---INS ExpressionStatement@@Assignment:entity=persistentEntities.get(typeInformation.getUserTypeInformation()) @TO@ TryStatement@@try {  read.lock();  Optional<E> entity=persistentEntities.get(typeInformation);  if (entity != null) {    return entity.isPresent();  }  TypeInformation<?> userTypeInformation=typeInformation.getUserTypeInformation();  if (userTypeInformation.equals(typeInformation)) {    return false;  }  entity=persistentEntities.get(typeInformation.getUserTypeInformation());  return entity == null ? false : entity.isPresent();}  finally {  read.unlock();} @AT@ 8383 @LENGTH@ 74
------INS Assignment@@entity=persistentEntities.get(typeInformation.getUserTypeInformation()) @TO@ ExpressionStatement@@Assignment:entity=persistentEntities.get(typeInformation.getUserTypeInformation()) @AT@ 8383 @LENGTH@ 73
---------INS SimpleName@@entity @TO@ Assignment@@entity=persistentEntities.get(typeInformation.getUserTypeInformation()) @AT@ 8383 @LENGTH@ 6
---------INS Operator@@= @TO@ Assignment@@entity=persistentEntities.get(typeInformation.getUserTypeInformation()) @AT@ 8389 @LENGTH@ 1
---------INS MethodInvocation@@persistentEntities.get(typeInformation.getUserTypeInformation()) @TO@ Assignment@@entity=persistentEntities.get(typeInformation.getUserTypeInformation()) @AT@ 8392 @LENGTH@ 64
------------INS SimpleName@@Name:persistentEntities @TO@ MethodInvocation@@persistentEntities.get(typeInformation.getUserTypeInformation()) @AT@ 8392 @LENGTH@ 18
------------INS SimpleName@@MethodName:get:[typeInformation.getUserTypeInformation()] @TO@ MethodInvocation@@persistentEntities.get(typeInformation.getUserTypeInformation()) @AT@ 8411 @LENGTH@ 45
---------------INS MethodInvocation@@typeInformation.getUserTypeInformation() @TO@ SimpleName@@MethodName:get:[typeInformation.getUserTypeInformation()] @AT@ 8415 @LENGTH@ 40
------------------INS SimpleName@@Name:typeInformation @TO@ MethodInvocation@@typeInformation.getUserTypeInformation() @AT@ 8415 @LENGTH@ 15
------------------INS SimpleName@@MethodName:getUserTypeInformation:[] @TO@ MethodInvocation@@typeInformation.getUserTypeInformation() @AT@ 8431 @LENGTH@ 24
---INS Block@@FinallyBody:{  read.unlock();} @TO@ TryStatement@@try {  read.lock();  Optional<E> entity=persistentEntities.get(typeInformation);  if (entity != null) {    return entity.isPresent();  }  TypeInformation<?> userTypeInformation=typeInformation.getUserTypeInformation();  if (userTypeInformation.equals(typeInformation)) {    return false;  }  entity=persistentEntities.get(typeInformation.getUserTypeInformation());  return entity == null ? false : entity.isPresent();}  finally {  read.unlock();} @AT@ 8527 @LENGTH@ 23
------INS ExpressionStatement@@MethodInvocation:read.unlock() @TO@ Block@@FinallyBody:{  read.unlock();} @AT@ 8532 @LENGTH@ 14
---------INS MethodInvocation@@read.unlock() @TO@ ExpressionStatement@@MethodInvocation:read.unlock() @AT@ 8532 @LENGTH@ 13
------------INS SimpleName@@Name:read @TO@ MethodInvocation@@read.unlock() @AT@ 8532 @LENGTH@ 4
------------INS SimpleName@@MethodName:unlock:[] @TO@ MethodInvocation@@read.unlock() @AT@ 8537 @LENGTH@ 8


UPD ExpressionStatement@@Assignment:this.idType=ResolvableType.forType(repositoryMetadata.getIdTypeInformation().getGenericType()) @TO@ Assignment:this.idType=repositoryMetadata.getIdTypeInformation().toTypeDescriptor().getResolvableType() @AT@ 5005 @LENGTH@ 97
---UPD Assignment@@this.idType=ResolvableType.forType(repositoryMetadata.getIdTypeInformation().getGenericType()) @TO@ this.idType=repositoryMetadata.getIdTypeInformation().toTypeDescriptor().getResolvableType() @AT@ 5005 @LENGTH@ 96
------UPD MethodInvocation@@ResolvableType.forType(repositoryMetadata.getIdTypeInformation().getGenericType()) @TO@ repositoryMetadata.getIdTypeInformation().toTypeDescriptor().getResolvableType() @AT@ 5019 @LENGTH@ 82
---------INS MethodInvocation@@MethodName:toTypeDescriptor:[] @TO@ MethodInvocation@@ResolvableType.forType(repositoryMetadata.getIdTypeInformation().getGenericType()) @AT@ 5017 @LENGTH@ 60
---------DEL SimpleName@@Name:ResolvableType @AT@ 5019 @LENGTH@ 14
---------DEL SimpleName@@MethodName:forType:[repositoryMetadata.getIdTypeInformation().getGenericType()] @AT@ 5034 @LENGTH@ 67
------------DEL MethodInvocation@@repositoryMetadata.getIdTypeInformation().getGenericType() @AT@ 5042 @LENGTH@ 58
---------MOV MethodInvocation@@MethodName:getIdTypeInformation:[] @TO@ MethodInvocation@@ResolvableType.forType(repositoryMetadata.getIdTypeInformation().getGenericType()) @AT@ 5042 @LENGTH@ 41
---------MOV SimpleName@@Name:repositoryMetadata @TO@ MethodInvocation@@ResolvableType.forType(repositoryMetadata.getIdTypeInformation().getGenericType()) @AT@ 5042 @LENGTH@ 18
---------MOV SimpleName@@MethodName:getGenericType:[] @TO@ MethodInvocation@@ResolvableType.forType(repositoryMetadata.getIdTypeInformation().getGenericType()) @AT@ 5084 @LENGTH@ 16


INS MethodDeclaration@@public, void, MethodName:checkWhenHasCustomAuthorityAndAuthenticatedAndWrongAuthoritiesThenReturnFalse,  @TO@ TypeDeclaration@@[@ExtendWith(MockitoExtension.class), public]AuthorityReactiveAuthorizationManagerTests,  @AT@ 3688 @LENGTH@ 413
---INS Modifier@@public @TO@ MethodDeclaration@@public, void, MethodName:checkWhenHasCustomAuthorityAndAuthenticatedAndWrongAuthoritiesThenReturnFalse,  @AT@ 3688 @LENGTH@ 6
---INS PrimitiveType@@void @TO@ MethodDeclaration@@public, void, MethodName:checkWhenHasCustomAuthorityAndAuthenticatedAndWrongAuthoritiesThenReturnFalse,  @AT@ 3695 @LENGTH@ 4
---INS SimpleName@@MethodName:checkWhenHasCustomAuthorityAndAuthenticatedAndWrongAuthoritiesThenReturnFalse @TO@ MethodDeclaration@@public, void, MethodName:checkWhenHasCustomAuthorityAndAuthenticatedAndWrongAuthoritiesThenReturnFalse,  @AT@ 3700 @LENGTH@ 77
---INS VariableDeclarationStatement@@GrantedAuthority customGrantedAuthority=() -> "USER"; @TO@ MethodDeclaration@@public, void, MethodName:checkWhenHasCustomAuthorityAndAuthenticatedAndWrongAuthoritiesThenReturnFalse,  @AT@ 3784 @LENGTH@ 55
------INS SimpleType@@GrantedAuthority @TO@ VariableDeclarationStatement@@GrantedAuthority customGrantedAuthority=() -> "USER"; @AT@ 3784 @LENGTH@ 16
------INS VariableDeclarationFragment@@customGrantedAuthority=() -> "USER" @TO@ VariableDeclarationStatement@@GrantedAuthority customGrantedAuthority=() -> "USER"; @AT@ 3801 @LENGTH@ 37
---------INS SimpleName@@customGrantedAuthority @TO@ VariableDeclarationFragment@@customGrantedAuthority=() -> "USER" @AT@ 3801 @LENGTH@ 22
---------INS LambdaExpression@@() -> "USER" @TO@ VariableDeclarationFragment@@customGrantedAuthority=() -> "USER" @AT@ 3826 @LENGTH@ 12
------------INS StringLiteral@@"USER" @TO@ LambdaExpression@@() -> "USER" @AT@ 3832 @LENGTH@ 6
---INS ExpressionStatement@@Assignment:this.authentication=new TestingAuthenticationToken("rob","secret",Collections.singletonList(customGrantedAuthority)) @TO@ MethodDeclaration@@public, void, MethodName:checkWhenHasCustomAuthorityAndAuthenticatedAndWrongAuthoritiesThenReturnFalse,  @AT@ 3842 @LENGTH@ 125
------INS Assignment@@this.authentication=new TestingAuthenticationToken("rob","secret",Collections.singletonList(customGrantedAuthority)) @TO@ ExpressionStatement@@Assignment:this.authentication=new TestingAuthenticationToken("rob","secret",Collections.singletonList(customGrantedAuthority)) @AT@ 3842 @LENGTH@ 124
---------INS FieldAccess@@this.authentication @TO@ Assignment@@this.authentication=new TestingAuthenticationToken("rob","secret",Collections.singletonList(customGrantedAuthority)) @AT@ 3842 @LENGTH@ 19
------------INS ThisExpression@@this @TO@ FieldAccess@@this.authentication @AT@ 3842 @LENGTH@ 4
------------INS SimpleName@@authentication @TO@ FieldAccess@@this.authentication @AT@ 3847 @LENGTH@ 14
---------INS Operator@@= @TO@ Assignment@@this.authentication=new TestingAuthenticationToken("rob","secret",Collections.singletonList(customGrantedAuthority)) @AT@ 3861 @LENGTH@ 1
---------INS ClassInstanceCreation@@TestingAuthenticationToken["rob", "secret", Collections.singletonList(customGrantedAuthority)] @TO@ Assignment@@this.authentication=new TestingAuthenticationToken("rob","secret",Collections.singletonList(customGrantedAuthority)) @AT@ 3864 @LENGTH@ 102
------------INS New@@new @TO@ ClassInstanceCreation@@TestingAuthenticationToken["rob", "secret", Collections.singletonList(customGrantedAuthority)] @AT@ 3864 @LENGTH@ 3
------------INS SimpleType@@TestingAuthenticationToken @TO@ ClassInstanceCreation@@TestingAuthenticationToken["rob", "secret", Collections.singletonList(customGrantedAuthority)] @AT@ 3868 @LENGTH@ 26
------------INS StringLiteral@@"rob" @TO@ ClassInstanceCreation@@TestingAuthenticationToken["rob", "secret", Collections.singletonList(customGrantedAuthority)] @AT@ 3895 @LENGTH@ 5
------------INS StringLiteral@@"secret" @TO@ ClassInstanceCreation@@TestingAuthenticationToken["rob", "secret", Collections.singletonList(customGrantedAuthority)] @AT@ 3902 @LENGTH@ 8
------------INS MethodInvocation@@Collections.singletonList(customGrantedAuthority) @TO@ ClassInstanceCreation@@TestingAuthenticationToken["rob", "secret", Collections.singletonList(customGrantedAuthority)] @AT@ 3916 @LENGTH@ 49
---------------INS SimpleName@@Name:Collections @TO@ MethodInvocation@@Collections.singletonList(customGrantedAuthority) @AT@ 3916 @LENGTH@ 11
---------------INS SimpleName@@MethodName:singletonList:[customGrantedAuthority] @TO@ MethodInvocation@@Collections.singletonList(customGrantedAuthority) @AT@ 3928 @LENGTH@ 37
------------------INS SimpleName@@customGrantedAuthority @TO@ SimpleName@@MethodName:singletonList:[customGrantedAuthority] @AT@ 3942 @LENGTH@ 22
---INS VariableDeclarationStatement@@boolean granted=this.manager.check(Mono.just(this.authentication),null).block().isGranted(); @TO@ MethodDeclaration@@public, void, MethodName:checkWhenHasCustomAuthorityAndAuthenticatedAndWrongAuthoritiesThenReturnFalse,  @AT@ 3970 @LENGTH@ 95
------INS PrimitiveType@@boolean @TO@ VariableDeclarationStatement@@boolean granted=this.manager.check(Mono.just(this.authentication),null).block().isGranted(); @AT@ 3970 @LENGTH@ 7
------INS VariableDeclarationFragment@@granted=this.manager.check(Mono.just(this.authentication),null).block().isGranted() @TO@ VariableDeclarationStatement@@boolean granted=this.manager.check(Mono.just(this.authentication),null).block().isGranted(); @AT@ 3978 @LENGTH@ 86
---------INS SimpleName@@granted @TO@ VariableDeclarationFragment@@granted=this.manager.check(Mono.just(this.authentication),null).block().isGranted() @AT@ 3978 @LENGTH@ 7
---------INS MethodInvocation@@this.manager.check(Mono.just(this.authentication),null).block().isGranted() @TO@ VariableDeclarationFragment@@granted=this.manager.check(Mono.just(this.authentication),null).block().isGranted() @AT@ 3988 @LENGTH@ 76
------------INS MethodInvocation@@MethodName:block:[] @TO@ MethodInvocation@@this.manager.check(Mono.just(this.authentication),null).block().isGranted() @AT@ 3988 @LENGTH@ 64
------------INS MethodInvocation@@MethodName:check:[Mono.just(this.authentication), null] @TO@ MethodInvocation@@this.manager.check(Mono.just(this.authentication),null).block().isGranted() @AT@ 3988 @LENGTH@ 56
---------------INS MethodInvocation@@Mono.just(this.authentication) @TO@ MethodInvocation@@MethodName:check:[Mono.just(this.authentication), null] @AT@ 4007 @LENGTH@ 30
------------------INS SimpleName@@Name:Mono @TO@ MethodInvocation@@Mono.just(this.authentication) @AT@ 4007 @LENGTH@ 4
------------------INS SimpleName@@MethodName:just:[this.authentication] @TO@ MethodInvocation@@Mono.just(this.authentication) @AT@ 4012 @LENGTH@ 25
---------------------INS FieldAccess@@this.authentication @TO@ SimpleName@@MethodName:just:[this.authentication] @AT@ 4017 @LENGTH@ 19
------------------------INS ThisExpression@@this @TO@ FieldAccess@@this.authentication @AT@ 4017 @LENGTH@ 4
------------------------INS SimpleName@@authentication @TO@ FieldAccess@@this.authentication @AT@ 4022 @LENGTH@ 14
---------------INS NullLiteral@@null @TO@ MethodInvocation@@MethodName:check:[Mono.just(this.authentication), null] @AT@ 4039 @LENGTH@ 4
------------INS FieldAccess@@this.manager @TO@ MethodInvocation@@this.manager.check(Mono.just(this.authentication),null).block().isGranted() @AT@ 3988 @LENGTH@ 12
---------------INS ThisExpression@@this @TO@ FieldAccess@@this.manager @AT@ 3988 @LENGTH@ 4
---------------INS SimpleName@@manager @TO@ FieldAccess@@this.manager @AT@ 3993 @LENGTH@ 7
------------INS SimpleName@@MethodName:isGranted:[] @TO@ MethodInvocation@@this.manager.check(Mono.just(this.authentication),null).block().isGranted() @AT@ 4053 @LENGTH@ 11
---INS ExpressionStatement@@MethodInvocation:assertThat(granted).isFalse() @TO@ MethodDeclaration@@public, void, MethodName:checkWhenHasCustomAuthorityAndAuthenticatedAndWrongAuthoritiesThenReturnFalse,  @AT@ 4068 @LENGTH@ 30
------INS MethodInvocation@@assertThat(granted).isFalse() @TO@ ExpressionStatement@@MethodInvocation:assertThat(granted).isFalse() @AT@ 4068 @LENGTH@ 29
---------INS MethodInvocation@@MethodName:assertThat:[granted] @TO@ MethodInvocation@@assertThat(granted).isFalse() @AT@ 4068 @LENGTH@ 19
------------INS SimpleName@@granted @TO@ MethodInvocation@@MethodName:assertThat:[granted] @AT@ 4079 @LENGTH@ 7
---------INS SimpleName@@MethodName:isFalse:[] @TO@ MethodInvocation@@assertThat(granted).isFalse() @AT@ 4088 @LENGTH@ 9


INS MethodDeclaration@@protected, void, MethodName:afterPropertiesSet, FhirConfiguration endpointConfiguration,  @TO@ TypeDeclaration@@[@Component("fhir"), public]FhirComponent, AbstractApiComponent<FhirApiName,FhirConfiguration,FhirApiCollection> @AT@ 1989 @LENGTH@ 689
---INS Modifier@@protected @TO@ MethodDeclaration@@protected, void, MethodName:afterPropertiesSet, FhirConfiguration endpointConfiguration,  @AT@ 1989 @LENGTH@ 9
---INS PrimitiveType@@void @TO@ MethodDeclaration@@protected, void, MethodName:afterPropertiesSet, FhirConfiguration endpointConfiguration,  @AT@ 1999 @LENGTH@ 4
---INS SimpleName@@MethodName:afterPropertiesSet @TO@ MethodDeclaration@@protected, void, MethodName:afterPropertiesSet, FhirConfiguration endpointConfiguration,  @AT@ 2004 @LENGTH@ 18
---INS SingleVariableDeclaration@@FhirConfiguration endpointConfiguration @TO@ MethodDeclaration@@protected, void, MethodName:afterPropertiesSet, FhirConfiguration endpointConfiguration,  @AT@ 2023 @LENGTH@ 39
------INS SimpleType@@FhirConfiguration @TO@ SingleVariableDeclaration@@FhirConfiguration endpointConfiguration @AT@ 2023 @LENGTH@ 17
------INS SimpleName@@endpointConfiguration @TO@ SingleVariableDeclaration@@FhirConfiguration endpointConfiguration @AT@ 2041 @LENGTH@ 21
---INS IfStatement@@if (endpointConfiguration.getClient() == null) {  if (configuration != null && configuration.getClient() != null) {    endpointConfiguration.setClient(configuration.getClient());    return;  } else   if (configuration != null) {    endpointConfiguration.setServerUrl(configuration.getServerUrl());    endpointConfiguration.setFhirContext(configuration.getFhirContext());  }  endpointConfiguration.setClient(createClient(endpointConfiguration));} @TO@ MethodDeclaration@@protected, void, MethodName:afterPropertiesSet, FhirConfiguration endpointConfiguration,  @AT@ 2122 @LENGTH@ 550
------INS Block@@ThenBody:{  if (configuration != null && configuration.getClient() != null) {    endpointConfiguration.setClient(configuration.getClient());    return;  } else   if (configuration != null) {    endpointConfiguration.setServerUrl(configuration.getServerUrl());    endpointConfiguration.setFhirContext(configuration.getFhirContext());  }  endpointConfiguration.setClient(createClient(endpointConfiguration));} @TO@ IfStatement@@if (endpointConfiguration.getClient() == null) {  if (configuration != null && configuration.getClient() != null) {    endpointConfiguration.setClient(configuration.getClient());    return;  } else   if (configuration != null) {    endpointConfiguration.setServerUrl(configuration.getServerUrl());    endpointConfiguration.setFhirContext(configuration.getFhirContext());  }  endpointConfiguration.setClient(createClient(endpointConfiguration));} @AT@ 2169 @LENGTH@ 503
---------INS IfStatement@@if (configuration != null && configuration.getClient() != null) {  endpointConfiguration.setClient(configuration.getClient());  return;} else if (configuration != null) {  endpointConfiguration.setServerUrl(configuration.getServerUrl());  endpointConfiguration.setFhirContext(configuration.getFhirContext());} @TO@ Block@@ThenBody:{  if (configuration != null && configuration.getClient() != null) {    endpointConfiguration.setClient(configuration.getClient());    return;  } else   if (configuration != null) {    endpointConfiguration.setServerUrl(configuration.getServerUrl());    endpointConfiguration.setFhirContext(configuration.getFhirContext());  }  endpointConfiguration.setClient(createClient(endpointConfiguration));} @AT@ 2183 @LENGTH@ 396
------------INS InfixExpression@@configuration != null && configuration.getClient() != null @TO@ IfStatement@@if (configuration != null && configuration.getClient() != null) {  endpointConfiguration.setClient(configuration.getClient());  return;} else if (configuration != null) {  endpointConfiguration.setServerUrl(configuration.getServerUrl());  endpointConfiguration.setFhirContext(configuration.getFhirContext());} @AT@ 2187 @LENGTH@ 58
---------------INS InfixExpression@@configuration != null @TO@ InfixExpression@@configuration != null && configuration.getClient() != null @AT@ 2187 @LENGTH@ 21
------------------INS SimpleName@@configuration @TO@ InfixExpression@@configuration != null @AT@ 2187 @LENGTH@ 13
------------------INS Operator@@!= @TO@ InfixExpression@@configuration != null @AT@ 2200 @LENGTH@ 2
------------------INS NullLiteral@@null @TO@ InfixExpression@@configuration != null @AT@ 2204 @LENGTH@ 4
---------------INS Operator@@&& @TO@ InfixExpression@@configuration != null && configuration.getClient() != null @AT@ 2208 @LENGTH@ 2
---------------INS InfixExpression@@configuration.getClient() != null @TO@ InfixExpression@@configuration != null && configuration.getClient() != null @AT@ 2212 @LENGTH@ 33
------------------INS MethodInvocation@@configuration.getClient() @TO@ InfixExpression@@configuration.getClient() != null @AT@ 2212 @LENGTH@ 25
---------------------INS SimpleName@@Name:configuration @TO@ MethodInvocation@@configuration.getClient() @AT@ 2212 @LENGTH@ 13
---------------------INS SimpleName@@MethodName:getClient:[] @TO@ MethodInvocation@@configuration.getClient() @AT@ 2226 @LENGTH@ 11
------------------INS Operator@@!= @TO@ InfixExpression@@configuration.getClient() != null @AT@ 2237 @LENGTH@ 2
------------------INS NullLiteral@@null @TO@ InfixExpression@@configuration.getClient() != null @AT@ 2241 @LENGTH@ 4
------------INS Block@@ThenBody:{  endpointConfiguration.setClient(configuration.getClient());  return;} @TO@ IfStatement@@if (configuration != null && configuration.getClient() != null) {  endpointConfiguration.setClient(configuration.getClient());  return;} else if (configuration != null) {  endpointConfiguration.setServerUrl(configuration.getServerUrl());  endpointConfiguration.setFhirContext(configuration.getFhirContext());} @AT@ 2247 @LENGTH@ 116
---------------INS ExpressionStatement@@MethodInvocation:endpointConfiguration.setClient(configuration.getClient()) @TO@ Block@@ThenBody:{  endpointConfiguration.setClient(configuration.getClient());  return;} @AT@ 2265 @LENGTH@ 59
------------------INS MethodInvocation@@endpointConfiguration.setClient(configuration.getClient()) @TO@ ExpressionStatement@@MethodInvocation:endpointConfiguration.setClient(configuration.getClient()) @AT@ 2265 @LENGTH@ 58
---------------------INS SimpleName@@Name:endpointConfiguration @TO@ MethodInvocation@@endpointConfiguration.setClient(configuration.getClient()) @AT@ 2265 @LENGTH@ 21
---------------------INS SimpleName@@MethodName:setClient:[configuration.getClient()] @TO@ MethodInvocation@@endpointConfiguration.setClient(configuration.getClient()) @AT@ 2287 @LENGTH@ 36
------------------------INS MethodInvocation@@configuration.getClient() @TO@ SimpleName@@MethodName:setClient:[configuration.getClient()] @AT@ 2297 @LENGTH@ 25
---------------------------INS SimpleName@@Name:configuration @TO@ MethodInvocation@@configuration.getClient() @AT@ 2297 @LENGTH@ 13
---------------------------INS SimpleName@@MethodName:getClient:[] @TO@ MethodInvocation@@configuration.getClient() @AT@ 2311 @LENGTH@ 11
---------------INS ReturnStatement@@ @TO@ Block@@ThenBody:{  endpointConfiguration.setClient(configuration.getClient());  return;} @AT@ 2342 @LENGTH@ 7
------------INS Block@@ElseBody:if (configuration != null) {  endpointConfiguration.setServerUrl(configuration.getServerUrl());  endpointConfiguration.setFhirContext(configuration.getFhirContext());} @TO@ IfStatement@@if (configuration != null && configuration.getClient() != null) {  endpointConfiguration.setClient(configuration.getClient());  return;} else if (configuration != null) {  endpointConfiguration.setServerUrl(configuration.getServerUrl());  endpointConfiguration.setFhirContext(configuration.getFhirContext());} @AT@ 2369 @LENGTH@ 210
---------------INS IfStatement@@if (configuration != null) {  endpointConfiguration.setServerUrl(configuration.getServerUrl());  endpointConfiguration.setFhirContext(configuration.getFhirContext());} @TO@ Block@@ElseBody:if (configuration != null) {  endpointConfiguration.setServerUrl(configuration.getServerUrl());  endpointConfiguration.setFhirContext(configuration.getFhirContext());} @AT@ 2369 @LENGTH@ 210
------------------INS InfixExpression@@configuration != null @TO@ IfStatement@@if (configuration != null) {  endpointConfiguration.setServerUrl(configuration.getServerUrl());  endpointConfiguration.setFhirContext(configuration.getFhirContext());} @AT@ 2373 @LENGTH@ 21
---------------------INS SimpleName@@configuration @TO@ InfixExpression@@configuration != null @AT@ 2373 @LENGTH@ 13
---------------------INS Operator@@!= @TO@ InfixExpression@@configuration != null @AT@ 2386 @LENGTH@ 2
---------------------INS NullLiteral@@null @TO@ InfixExpression@@configuration != null @AT@ 2390 @LENGTH@ 4
------------------INS Block@@ThenBody:{  endpointConfiguration.setServerUrl(configuration.getServerUrl());  endpointConfiguration.setFhirContext(configuration.getFhirContext());} @TO@ IfStatement@@if (configuration != null) {  endpointConfiguration.setServerUrl(configuration.getServerUrl());  endpointConfiguration.setFhirContext(configuration.getFhirContext());} @AT@ 2396 @LENGTH@ 183
---------------------INS ExpressionStatement@@MethodInvocation:endpointConfiguration.setServerUrl(configuration.getServerUrl()) @TO@ Block@@ThenBody:{  endpointConfiguration.setServerUrl(configuration.getServerUrl());  endpointConfiguration.setFhirContext(configuration.getFhirContext());} @AT@ 2414 @LENGTH@ 65
------------------------INS MethodInvocation@@endpointConfiguration.setServerUrl(configuration.getServerUrl()) @TO@ ExpressionStatement@@MethodInvocation:endpointConfiguration.setServerUrl(configuration.getServerUrl()) @AT@ 2414 @LENGTH@ 64
---------------------------INS SimpleName@@Name:endpointConfiguration @TO@ MethodInvocation@@endpointConfiguration.setServerUrl(configuration.getServerUrl()) @AT@ 2414 @LENGTH@ 21
---------------------------INS SimpleName@@MethodName:setServerUrl:[configuration.getServerUrl()] @TO@ MethodInvocation@@endpointConfiguration.setServerUrl(configuration.getServerUrl()) @AT@ 2436 @LENGTH@ 42
------------------------------INS MethodInvocation@@configuration.getServerUrl() @TO@ SimpleName@@MethodName:setServerUrl:[configuration.getServerUrl()] @AT@ 2449 @LENGTH@ 28
---------------------------------INS SimpleName@@Name:configuration @TO@ MethodInvocation@@configuration.getServerUrl() @AT@ 2449 @LENGTH@ 13
---------------------------------INS SimpleName@@MethodName:getServerUrl:[] @TO@ MethodInvocation@@configuration.getServerUrl() @AT@ 2463 @LENGTH@ 14
---------------------INS ExpressionStatement@@MethodInvocation:endpointConfiguration.setFhirContext(configuration.getFhirContext()) @TO@ Block@@ThenBody:{  endpointConfiguration.setServerUrl(configuration.getServerUrl());  endpointConfiguration.setFhirContext(configuration.getFhirContext());} @AT@ 2496 @LENGTH@ 69
------------------------INS MethodInvocation@@endpointConfiguration.setFhirContext(configuration.getFhirContext()) @TO@ ExpressionStatement@@MethodInvocation:endpointConfiguration.setFhirContext(configuration.getFhirContext()) @AT@ 2496 @LENGTH@ 68
---------------------------INS SimpleName@@Name:endpointConfiguration @TO@ MethodInvocation@@endpointConfiguration.setFhirContext(configuration.getFhirContext()) @AT@ 2496 @LENGTH@ 21
---------------------------INS SimpleName@@MethodName:setFhirContext:[configuration.getFhirContext()] @TO@ MethodInvocation@@endpointConfiguration.setFhirContext(configuration.getFhirContext()) @AT@ 2518 @LENGTH@ 46
------------------------------INS MethodInvocation@@configuration.getFhirContext() @TO@ SimpleName@@MethodName:setFhirContext:[configuration.getFhirContext()] @AT@ 2533 @LENGTH@ 30
---------------------------------INS SimpleName@@Name:configuration @TO@ MethodInvocation@@configuration.getFhirContext() @AT@ 2533 @LENGTH@ 13
---------------------------------INS SimpleName@@MethodName:getFhirContext:[] @TO@ MethodInvocation@@configuration.getFhirContext() @AT@ 2547 @LENGTH@ 16
---------MOV ExpressionStatement@@MethodInvocation:endpointConfiguration.setClient(createClient(endpointConfiguration)) @TO@ Block@@ThenBody:{  if (configuration != null && configuration.getClient() != null) {    endpointConfiguration.setClient(configuration.getClient());    return;  } else   if (configuration != null) {    endpointConfiguration.setServerUrl(configuration.getServerUrl());    endpointConfiguration.setFhirContext(configuration.getFhirContext());  }  endpointConfiguration.setClient(createClient(endpointConfiguration));} @AT@ 2369 @LENGTH@ 69
------MOV InfixExpression@@endpointConfiguration.getClient() == null @TO@ IfStatement@@if (endpointConfiguration.getClient() == null) {  if (configuration != null && configuration.getClient() != null) {    endpointConfiguration.setClient(configuration.getClient());    return;  } else   if (configuration != null) {    endpointConfiguration.setServerUrl(configuration.getServerUrl());    endpointConfiguration.setFhirContext(configuration.getFhirContext());  }  endpointConfiguration.setClient(createClient(endpointConfiguration));} @AT@ 2312 @LENGTH@ 41


UPD ExpressionStatement@@MethodInvocation:bis.readBits(64) @TO@ MethodInvocation:assertThrows(IOException.class,() -> bis.readBits(64)) @AT@ 1507 @LENGTH@ 17
---INS MethodInvocation@@assertThrows(IOException.class,() -> bis.readBits(64)) @TO@ ExpressionStatement@@MethodInvocation:bis.readBits(64) @AT@ 1591 @LENGTH@ 55
------INS SimpleName@@MethodName:assertThrows:[IOException.class, () -> bis.readBits(64)] @TO@ MethodInvocation@@assertThrows(IOException.class,() -> bis.readBits(64)) @AT@ 1591 @LENGTH@ 55
---------INS TypeLiteral@@IOException.class @TO@ SimpleName@@MethodName:assertThrows:[IOException.class, () -> bis.readBits(64)] @AT@ 1604 @LENGTH@ 17
---------INS LambdaExpression@@() -> bis.readBits(64) @TO@ SimpleName@@MethodName:assertThrows:[IOException.class, () -> bis.readBits(64)] @AT@ 1623 @LENGTH@ 22
------------MOV MethodInvocation@@bis.readBits(64) @TO@ LambdaExpression@@() -> bis.readBits(64) @AT@ 1507 @LENGTH@ 16


UPD ExpressionStatement@@Assignment:offset+=actualSkip @TO@ Assignment:offset=Math.addExact(offset,Math.toIntExact(n)) @AT@ 5165 @LENGTH@ 21
---UPD Assignment@@offset+=actualSkip @TO@ offset=Math.addExact(offset,Math.toIntExact(n)) @AT@ 5165 @LENGTH@ 20
------UPD Operator@@+= @TO@ = @AT@ 5171 @LENGTH@ 2
------INS MethodInvocation@@Math.addExact(offset,Math.toIntExact(n)) @TO@ Assignment@@offset+=actualSkip @AT@ 5174 @LENGTH@ 41
---------INS SimpleName@@Name:Math @TO@ MethodInvocation@@Math.addExact(offset,Math.toIntExact(n)) @AT@ 5174 @LENGTH@ 4
---------INS SimpleName@@MethodName:addExact:[offset, Math.toIntExact(n)] @TO@ MethodInvocation@@Math.addExact(offset,Math.toIntExact(n)) @AT@ 5179 @LENGTH@ 36
------------INS SimpleName@@offset @TO@ SimpleName@@MethodName:addExact:[offset, Math.toIntExact(n)] @AT@ 5188 @LENGTH@ 6
------------INS MethodInvocation@@Math.toIntExact(n) @TO@ SimpleName@@MethodName:addExact:[offset, Math.toIntExact(n)] @AT@ 5196 @LENGTH@ 18
---------------INS SimpleName@@Name:Math @TO@ MethodInvocation@@Math.toIntExact(n) @AT@ 5196 @LENGTH@ 4
---------------INS SimpleName@@MethodName:toIntExact:[n] @TO@ MethodInvocation@@Math.toIntExact(n) @AT@ 5201 @LENGTH@ 13
------------------INS SimpleName@@n @TO@ SimpleName@@MethodName:toIntExact:[n] @AT@ 5212 @LENGTH@ 1
------DEL SimpleName@@actualSkip @AT@ 5175 @LENGTH@ 10


UPD EnhancedForStatement@@for (Object relatedValueToStore : relatedValuesToStore) {  Object relatedObjectBeforeCallbacksApplied=relationshipContext.identifyAndExtractRelationshipTargetNode(relatedValueToStore);  Neo4jPersistentEntity<?> targetEntity=neo4jMappingContext.getRequiredPersistentEntity(relatedObjectBeforeCallbacksApplied.getClass());  boolean isEntityNew=targetEntity.isNew(relatedObjectBeforeCallbacksApplied);  Object newRelatedObject=stateMachine.hasProcessedValue(relatedObjectBeforeCallbacksApplied) ? stateMachine.getProcessedAs(relatedObjectBeforeCallbacksApplied) : eventSupport.maybeCallBeforeBind(relatedObjectBeforeCallbacksApplied);  Long relatedInternalId;  Entity savedEntity=null;  if (stateMachine.hasProcessedValue(relatedValueToStore)) {    relatedInternalId=stateMachine.getInternalId(relatedValueToStore);  } else {    savedEntity=saveRelatedNode(newRelatedObject,targetEntity,includeProperty,currentPropertyPath);    relatedInternalId=savedEntity.id();    stateMachine.markValueAsProcessed(relatedValueToStore,relatedInternalId);    if (relatedValueToStore instanceof MappingSupport.RelationshipPropertiesWithEntityHolder) {      Object entity=((MappingSupport.RelationshipPropertiesWithEntityHolder)relatedValueToStore).getRelatedEntity();      stateMachine.markValueAsProcessedAs(entity,relatedInternalId);    }  }  PersistentPropertyAccessor<?> targetPropertyAccessor=targetEntity.getPropertyAccessor(newRelatedObject);  if (targetEntity.isUsingInternalIds()) {    Neo4jPersistentProperty requiredIdProperty=targetEntity.getRequiredIdProperty();    if (relatedInternalId == null && targetPropertyAccessor.getProperty(requiredIdProperty) != null) {      relatedInternalId=(Long)targetPropertyAccessor.getProperty(requiredIdProperty);    } else     if (targetPropertyAccessor.getProperty(requiredIdProperty) == null) {      targetPropertyAccessor.setProperty(requiredIdProperty,relatedInternalId);    }  }  if (savedEntity != null) {    TemplateSupport.updateVersionPropertyIfPossible(targetEntity,targetPropertyAccessor,savedEntity);  }  stateMachine.markValueAsProcessedAs(relatedObjectBeforeCallbacksApplied,targetPropertyAccessor.getBean());  stateMachine.markRelationshipAsProcessed(relatedInternalId,relationshipDescription.getRelationshipObverse());  Object idValue=idProperty != null ? relationshipContext.getRelationshipPropertiesPropertyAccessor(relatedValueToStore).getProperty(idProperty) : null;  boolean isNewRelationship=idValue == null;  CreateRelationshipStatementHolder statementHolder=neo4jMappingContext.createStatement(sourceEntity,relationshipContext,relatedValueToStore,isNewRelationship);  Optional<Long> relationshipInternalId=neo4jClient.query(renderer.render(statementHolder.getStatement())).bind(convertIdValues(sourceEntity.getRequiredIdProperty(),fromId)).to(Constants.FROM_ID_PARAMETER_NAME).bind(relatedInternalId).to(Constants.TO_ID_PARAMETER_NAME).bind(idValue).to(Constants.NAME_OF_KNOWN_RELATIONSHIP_PARAM).bindAll(statementHolder.getProperties()).fetchAs(Long.class).one();  if (idProperty != null && isNewRelationship) {    relationshipContext.getRelationshipPropertiesPropertyAccessor(relatedValueToStore).setProperty(idProperty,relationshipInternalId.get());  }  if (processState != ProcessState.PROCESSED_ALL_VALUES) {    processNestedRelations(targetEntity,targetPropertyAccessor,isEntityNew,stateMachine,dynamicRelationship ? PropertyFilter.acceptAll() : includeProperty,currentPropertyPath);  }  Object potentiallyRecreatedNewRelatedObject=MappingSupport.getRelationshipOrRelationshipPropertiesObject(neo4jMappingContext,relationshipDescription.hasRelationshipProperties(),relationshipProperty.isDynamicAssociation(),relatedValueToStore,targetPropertyAccessor);  relationshipHandler.handle(relatedValueToStore,relatedObjectBeforeCallbacksApplied,potentiallyRecreatedNewRelatedObject);} @TO@ for (Object relatedValueToStore : relatedValuesToStore) {  Object relatedObjectBeforeCallbacksApplied=relationshipContext.identifyAndExtractRelationshipTargetNode(relatedValueToStore);  Neo4jPersistentEntity<?> targetEntity=neo4jMappingContext.getRequiredPersistentEntity(relatedObjectBeforeCallbacksApplied.getClass());  boolean isEntityNew=targetEntity.isNew(relatedObjectBeforeCallbacksApplied);  Object newRelatedObject=stateMachine.hasProcessedValue(relatedObjectBeforeCallbacksApplied) ? stateMachine.getProcessedAs(relatedObjectBeforeCallbacksApplied) : eventSupport.maybeCallBeforeBind(relatedObjectBeforeCallbacksApplied);  Long relatedInternalId;  Entity savedEntity=null;  if (stateMachine.hasProcessedValue(relatedValueToStore)) {    relatedInternalId=stateMachine.getInternalId(relatedValueToStore);  } else {    savedEntity=saveRelatedNode(newRelatedObject,targetEntity,includeProperty,currentPropertyPath);    relatedInternalId=savedEntity.id();    stateMachine.markValueAsProcessed(relatedValueToStore,relatedInternalId);    if (relatedValueToStore instanceof MappingSupport.RelationshipPropertiesWithEntityHolder) {      Object entity=((MappingSupport.RelationshipPropertiesWithEntityHolder)relatedValueToStore).getRelatedEntity();      stateMachine.markValueAsProcessedAs(entity,relatedInternalId);    }  }  Neo4jPersistentProperty requiredIdProperty=targetEntity.getRequiredIdProperty();  PersistentPropertyAccessor<?> targetPropertyAccessor=targetEntity.getPropertyAccessor(newRelatedObject);  Object actualRelatedId=targetPropertyAccessor.getProperty(requiredIdProperty);  if (targetEntity.isUsingInternalIds()) {    if (relatedInternalId == null && actualRelatedId != null) {      relatedInternalId=(Long)targetPropertyAccessor.getProperty(requiredIdProperty);    } else     if (actualRelatedId == null) {      targetPropertyAccessor.setProperty(requiredIdProperty,relatedInternalId);    }  }  if (savedEntity != null) {    TemplateSupport.updateVersionPropertyIfPossible(targetEntity,targetPropertyAccessor,savedEntity);  }  stateMachine.markValueAsProcessedAs(relatedObjectBeforeCallbacksApplied,targetPropertyAccessor.getBean());  stateMachine.markRelationshipAsProcessed(actualRelatedId == null ? relatedInternalId : actualRelatedId,relationshipDescription.getRelationshipObverse());  Object idValue=idProperty != null ? relationshipContext.getRelationshipPropertiesPropertyAccessor(relatedValueToStore).getProperty(idProperty) : null;  boolean isNewRelationship=idValue == null;  CreateRelationshipStatementHolder statementHolder=neo4jMappingContext.createStatement(sourceEntity,relationshipContext,relatedValueToStore,isNewRelationship);  Optional<Long> relationshipInternalId=neo4jClient.query(renderer.render(statementHolder.getStatement())).bind(convertIdValues(sourceEntity.getRequiredIdProperty(),fromId)).to(Constants.FROM_ID_PARAMETER_NAME).bind(relatedInternalId).to(Constants.TO_ID_PARAMETER_NAME).bind(idValue).to(Constants.NAME_OF_KNOWN_RELATIONSHIP_PARAM).bindAll(statementHolder.getProperties()).fetchAs(Long.class).one();  if (idProperty != null && isNewRelationship) {    relationshipContext.getRelationshipPropertiesPropertyAccessor(relatedValueToStore).setProperty(idProperty,relationshipInternalId.get());  }  if (processState != ProcessState.PROCESSED_ALL_VALUES) {    processNestedRelations(targetEntity,targetPropertyAccessor,isEntityNew,stateMachine,dynamicRelationship ? PropertyFilter.acceptAll() : includeProperty,currentPropertyPath);  }  Object potentiallyRecreatedNewRelatedObject=MappingSupport.getRelationshipOrRelationshipPropertiesObject(neo4jMappingContext,relationshipDescription.hasRelationshipProperties(),relationshipProperty.isDynamicAssociation(),relatedValueToStore,targetPropertyAccessor);  relationshipHandler.handle(relatedValueToStore,relatedObjectBeforeCallbacksApplied,potentiallyRecreatedNewRelatedObject);} @AT@ 33750 @LENGTH@ 4388
---INS VariableDeclarationStatement@@Object actualRelatedId=targetPropertyAccessor.getProperty(requiredIdProperty); @TO@ EnhancedForStatement@@for (Object relatedValueToStore : relatedValuesToStore) {  Object relatedObjectBeforeCallbacksApplied=relationshipContext.identifyAndExtractRelationshipTargetNode(relatedValueToStore);  Neo4jPersistentEntity<?> targetEntity=neo4jMappingContext.getRequiredPersistentEntity(relatedObjectBeforeCallbacksApplied.getClass());  boolean isEntityNew=targetEntity.isNew(relatedObjectBeforeCallbacksApplied);  Object newRelatedObject=stateMachine.hasProcessedValue(relatedObjectBeforeCallbacksApplied) ? stateMachine.getProcessedAs(relatedObjectBeforeCallbacksApplied) : eventSupport.maybeCallBeforeBind(relatedObjectBeforeCallbacksApplied);  Long relatedInternalId;  Entity savedEntity=null;  if (stateMachine.hasProcessedValue(relatedValueToStore)) {    relatedInternalId=stateMachine.getInternalId(relatedValueToStore);  } else {    savedEntity=saveRelatedNode(newRelatedObject,targetEntity,includeProperty,currentPropertyPath);    relatedInternalId=savedEntity.id();    stateMachine.markValueAsProcessed(relatedValueToStore,relatedInternalId);    if (relatedValueToStore instanceof MappingSupport.RelationshipPropertiesWithEntityHolder) {      Object entity=((MappingSupport.RelationshipPropertiesWithEntityHolder)relatedValueToStore).getRelatedEntity();      stateMachine.markValueAsProcessedAs(entity,relatedInternalId);    }  }  PersistentPropertyAccessor<?> targetPropertyAccessor=targetEntity.getPropertyAccessor(newRelatedObject);  if (targetEntity.isUsingInternalIds()) {    Neo4jPersistentProperty requiredIdProperty=targetEntity.getRequiredIdProperty();    if (relatedInternalId == null && targetPropertyAccessor.getProperty(requiredIdProperty) != null) {      relatedInternalId=(Long)targetPropertyAccessor.getProperty(requiredIdProperty);    } else     if (targetPropertyAccessor.getProperty(requiredIdProperty) == null) {      targetPropertyAccessor.setProperty(requiredIdProperty,relatedInternalId);    }  }  if (savedEntity != null) {    TemplateSupport.updateVersionPropertyIfPossible(targetEntity,targetPropertyAccessor,savedEntity);  }  stateMachine.markValueAsProcessedAs(relatedObjectBeforeCallbacksApplied,targetPropertyAccessor.getBean());  stateMachine.markRelationshipAsProcessed(relatedInternalId,relationshipDescription.getRelationshipObverse());  Object idValue=idProperty != null ? relationshipContext.getRelationshipPropertiesPropertyAccessor(relatedValueToStore).getProperty(idProperty) : null;  boolean isNewRelationship=idValue == null;  CreateRelationshipStatementHolder statementHolder=neo4jMappingContext.createStatement(sourceEntity,relationshipContext,relatedValueToStore,isNewRelationship);  Optional<Long> relationshipInternalId=neo4jClient.query(renderer.render(statementHolder.getStatement())).bind(convertIdValues(sourceEntity.getRequiredIdProperty(),fromId)).to(Constants.FROM_ID_PARAMETER_NAME).bind(relatedInternalId).to(Constants.TO_ID_PARAMETER_NAME).bind(idValue).to(Constants.NAME_OF_KNOWN_RELATIONSHIP_PARAM).bindAll(statementHolder.getProperties()).fetchAs(Long.class).one();  if (idProperty != null && isNewRelationship) {    relationshipContext.getRelationshipPropertiesPropertyAccessor(relatedValueToStore).setProperty(idProperty,relationshipInternalId.get());  }  if (processState != ProcessState.PROCESSED_ALL_VALUES) {    processNestedRelations(targetEntity,targetPropertyAccessor,isEntityNew,stateMachine,dynamicRelationship ? PropertyFilter.acceptAll() : includeProperty,currentPropertyPath);  }  Object potentiallyRecreatedNewRelatedObject=MappingSupport.getRelationshipOrRelationshipPropertiesObject(neo4jMappingContext,relationshipDescription.hasRelationshipProperties(),relationshipProperty.isDynamicAssociation(),relatedValueToStore,targetPropertyAccessor);  relationshipHandler.handle(relatedValueToStore,relatedObjectBeforeCallbacksApplied,potentiallyRecreatedNewRelatedObject);} @AT@ 35470 @LENGTH@ 80
------INS SimpleType@@Object @TO@ VariableDeclarationStatement@@Object actualRelatedId=targetPropertyAccessor.getProperty(requiredIdProperty); @AT@ 35470 @LENGTH@ 6
------INS VariableDeclarationFragment@@actualRelatedId=targetPropertyAccessor.getProperty(requiredIdProperty) @TO@ VariableDeclarationStatement@@Object actualRelatedId=targetPropertyAccessor.getProperty(requiredIdProperty); @AT@ 35477 @LENGTH@ 72
---------INS SimpleName@@actualRelatedId @TO@ VariableDeclarationFragment@@actualRelatedId=targetPropertyAccessor.getProperty(requiredIdProperty) @AT@ 35477 @LENGTH@ 15
---------MOV MethodInvocation@@targetPropertyAccessor.getProperty(requiredIdProperty) @TO@ VariableDeclarationFragment@@actualRelatedId=targetPropertyAccessor.getProperty(requiredIdProperty) @AT@ 35642 @LENGTH@ 54
---UPD IfStatement@@if (targetEntity.isUsingInternalIds()) {  Neo4jPersistentProperty requiredIdProperty=targetEntity.getRequiredIdProperty();  if (relatedInternalId == null && targetPropertyAccessor.getProperty(requiredIdProperty) != null) {    relatedInternalId=(Long)targetPropertyAccessor.getProperty(requiredIdProperty);  } else   if (targetPropertyAccessor.getProperty(requiredIdProperty) == null) {    targetPropertyAccessor.setProperty(requiredIdProperty,relatedInternalId);  }} @TO@ if (targetEntity.isUsingInternalIds()) {  if (relatedInternalId == null && actualRelatedId != null) {    relatedInternalId=(Long)targetPropertyAccessor.getProperty(requiredIdProperty);  } else   if (actualRelatedId == null) {    targetPropertyAccessor.setProperty(requiredIdProperty,relatedInternalId);  }} @AT@ 35475 @LENGTH@ 497
------UPD Block@@ThenBody:{  Neo4jPersistentProperty requiredIdProperty=targetEntity.getRequiredIdProperty();  if (relatedInternalId == null && targetPropertyAccessor.getProperty(requiredIdProperty) != null) {    relatedInternalId=(Long)targetPropertyAccessor.getProperty(requiredIdProperty);  } else   if (targetPropertyAccessor.getProperty(requiredIdProperty) == null) {    targetPropertyAccessor.setProperty(requiredIdProperty,relatedInternalId);  }} @TO@ ThenBody:{  if (relatedInternalId == null && actualRelatedId != null) {    relatedInternalId=(Long)targetPropertyAccessor.getProperty(requiredIdProperty);  } else   if (actualRelatedId == null) {    targetPropertyAccessor.setProperty(requiredIdProperty,relatedInternalId);  }} @AT@ 35514 @LENGTH@ 458
---------UPD IfStatement@@if (relatedInternalId == null && targetPropertyAccessor.getProperty(requiredIdProperty) != null) {  relatedInternalId=(Long)targetPropertyAccessor.getProperty(requiredIdProperty);} else if (targetPropertyAccessor.getProperty(requiredIdProperty) == null) {  targetPropertyAccessor.setProperty(requiredIdProperty,relatedInternalId);} @TO@ if (relatedInternalId == null && actualRelatedId != null) {  relatedInternalId=(Long)targetPropertyAccessor.getProperty(requiredIdProperty);} else if (actualRelatedId == null) {  targetPropertyAccessor.setProperty(requiredIdProperty,relatedInternalId);} @AT@ 35609 @LENGTH@ 357
------------UPD InfixExpression@@relatedInternalId == null && targetPropertyAccessor.getProperty(requiredIdProperty) != null @TO@ relatedInternalId == null && actualRelatedId != null @AT@ 35613 @LENGTH@ 91
---------------UPD InfixExpression@@targetPropertyAccessor.getProperty(requiredIdProperty) != null @TO@ actualRelatedId != null @AT@ 35642 @LENGTH@ 62
------------------INS SimpleName@@actualRelatedId @TO@ InfixExpression@@targetPropertyAccessor.getProperty(requiredIdProperty) != null @AT@ 35726 @LENGTH@ 15
------------UPD Block@@ElseBody:if (targetPropertyAccessor.getProperty(requiredIdProperty) == null) {  targetPropertyAccessor.setProperty(requiredIdProperty,relatedInternalId);} @TO@ ElseBody:if (actualRelatedId == null) {  targetPropertyAccessor.setProperty(requiredIdProperty,relatedInternalId);} @AT@ 35809 @LENGTH@ 157
---------------UPD IfStatement@@if (targetPropertyAccessor.getProperty(requiredIdProperty) == null) {  targetPropertyAccessor.setProperty(requiredIdProperty,relatedInternalId);} @TO@ if (actualRelatedId == null) {  targetPropertyAccessor.setProperty(requiredIdProperty,relatedInternalId);} @AT@ 35809 @LENGTH@ 157
------------------UPD InfixExpression@@targetPropertyAccessor.getProperty(requiredIdProperty) == null @TO@ actualRelatedId == null @AT@ 35813 @LENGTH@ 62
---------------------DEL MethodInvocation@@targetPropertyAccessor.getProperty(requiredIdProperty) @AT@ 35813 @LENGTH@ 54
------------------------DEL SimpleName@@Name:targetPropertyAccessor @AT@ 35813 @LENGTH@ 22
------------------------DEL SimpleName@@MethodName:getProperty:[requiredIdProperty] @AT@ 35836 @LENGTH@ 31
---------------------------DEL SimpleName@@requiredIdProperty @AT@ 35848 @LENGTH@ 18
---------------------INS SimpleName@@actualRelatedId @TO@ InfixExpression@@targetPropertyAccessor.getProperty(requiredIdProperty) == null @AT@ 35858 @LENGTH@ 15
---MOV VariableDeclarationStatement@@Neo4jPersistentProperty requiredIdProperty=targetEntity.getRequiredIdProperty(); @TO@ EnhancedForStatement@@for (Object relatedValueToStore : relatedValuesToStore) {  Object relatedObjectBeforeCallbacksApplied=relationshipContext.identifyAndExtractRelationshipTargetNode(relatedValueToStore);  Neo4jPersistentEntity<?> targetEntity=neo4jMappingContext.getRequiredPersistentEntity(relatedObjectBeforeCallbacksApplied.getClass());  boolean isEntityNew=targetEntity.isNew(relatedObjectBeforeCallbacksApplied);  Object newRelatedObject=stateMachine.hasProcessedValue(relatedObjectBeforeCallbacksApplied) ? stateMachine.getProcessedAs(relatedObjectBeforeCallbacksApplied) : eventSupport.maybeCallBeforeBind(relatedObjectBeforeCallbacksApplied);  Long relatedInternalId;  Entity savedEntity=null;  if (stateMachine.hasProcessedValue(relatedValueToStore)) {    relatedInternalId=stateMachine.getInternalId(relatedValueToStore);  } else {    savedEntity=saveRelatedNode(newRelatedObject,targetEntity,includeProperty,currentPropertyPath);    relatedInternalId=savedEntity.id();    stateMachine.markValueAsProcessed(relatedValueToStore,relatedInternalId);    if (relatedValueToStore instanceof MappingSupport.RelationshipPropertiesWithEntityHolder) {      Object entity=((MappingSupport.RelationshipPropertiesWithEntityHolder)relatedValueToStore).getRelatedEntity();      stateMachine.markValueAsProcessedAs(entity,relatedInternalId);    }  }  PersistentPropertyAccessor<?> targetPropertyAccessor=targetEntity.getPropertyAccessor(newRelatedObject);  if (targetEntity.isUsingInternalIds()) {    Neo4jPersistentProperty requiredIdProperty=targetEntity.getRequiredIdProperty();    if (relatedInternalId == null && targetPropertyAccessor.getProperty(requiredIdProperty) != null) {      relatedInternalId=(Long)targetPropertyAccessor.getProperty(requiredIdProperty);    } else     if (targetPropertyAccessor.getProperty(requiredIdProperty) == null) {      targetPropertyAccessor.setProperty(requiredIdProperty,relatedInternalId);    }  }  if (savedEntity != null) {    TemplateSupport.updateVersionPropertyIfPossible(targetEntity,targetPropertyAccessor,savedEntity);  }  stateMachine.markValueAsProcessedAs(relatedObjectBeforeCallbacksApplied,targetPropertyAccessor.getBean());  stateMachine.markRelationshipAsProcessed(relatedInternalId,relationshipDescription.getRelationshipObverse());  Object idValue=idProperty != null ? relationshipContext.getRelationshipPropertiesPropertyAccessor(relatedValueToStore).getProperty(idProperty) : null;  boolean isNewRelationship=idValue == null;  CreateRelationshipStatementHolder statementHolder=neo4jMappingContext.createStatement(sourceEntity,relationshipContext,relatedValueToStore,isNewRelationship);  Optional<Long> relationshipInternalId=neo4jClient.query(renderer.render(statementHolder.getStatement())).bind(convertIdValues(sourceEntity.getRequiredIdProperty(),fromId)).to(Constants.FROM_ID_PARAMETER_NAME).bind(relatedInternalId).to(Constants.TO_ID_PARAMETER_NAME).bind(idValue).to(Constants.NAME_OF_KNOWN_RELATIONSHIP_PARAM).bindAll(statementHolder.getProperties()).fetchAs(Long.class).one();  if (idProperty != null && isNewRelationship) {    relationshipContext.getRelationshipPropertiesPropertyAccessor(relatedValueToStore).setProperty(idProperty,relationshipInternalId.get());  }  if (processState != ProcessState.PROCESSED_ALL_VALUES) {    processNestedRelations(targetEntity,targetPropertyAccessor,isEntityNew,stateMachine,dynamicRelationship ? PropertyFilter.acceptAll() : includeProperty,currentPropertyPath);  }  Object potentiallyRecreatedNewRelatedObject=MappingSupport.getRelationshipOrRelationshipPropertiesObject(neo4jMappingContext,relationshipDescription.hasRelationshipProperties(),relationshipProperty.isDynamicAssociation(),relatedValueToStore,targetPropertyAccessor);  relationshipHandler.handle(relatedValueToStore,relatedObjectBeforeCallbacksApplied,potentiallyRecreatedNewRelatedObject);} @AT@ 35521 @LENGTH@ 82
---UPD ExpressionStatement@@MethodInvocation:stateMachine.markRelationshipAsProcessed(relatedInternalId,relationshipDescription.getRelationshipObverse()) @TO@ MethodInvocation:stateMachine.markRelationshipAsProcessed(actualRelatedId == null ? relatedInternalId : actualRelatedId,relationshipDescription.getRelationshipObverse()) @AT@ 36231 @LENGTH@ 110
------UPD MethodInvocation@@stateMachine.markRelationshipAsProcessed(relatedInternalId,relationshipDescription.getRelationshipObverse()) @TO@ stateMachine.markRelationshipAsProcessed(actualRelatedId == null ? relatedInternalId : actualRelatedId,relationshipDescription.getRelationshipObverse()) @AT@ 36231 @LENGTH@ 109
---------UPD SimpleName@@MethodName:markRelationshipAsProcessed:[relatedInternalId, relationshipDescription.getRelationshipObverse()] @TO@ MethodName:markRelationshipAsProcessed:[actualRelatedId == null ? relatedInternalId : actualRelatedId, relationshipDescription.getRelationshipObverse()] @AT@ 36244 @LENGTH@ 96
------------DEL SimpleName@@relatedInternalId @AT@ 36272 @LENGTH@ 17
------------INS ConditionalExpression@@actualRelatedId == null ? relatedInternalId : actualRelatedId @TO@ SimpleName@@MethodName:markRelationshipAsProcessed:[relatedInternalId, relationshipDescription.getRelationshipObverse()] @AT@ 36278 @LENGTH@ 61
---------------INS InfixExpression@@actualRelatedId == null @TO@ ConditionalExpression@@actualRelatedId == null ? relatedInternalId : actualRelatedId @AT@ 36278 @LENGTH@ 23
------------------INS SimpleName@@actualRelatedId @TO@ InfixExpression@@actualRelatedId == null @AT@ 36278 @LENGTH@ 15
------------------INS Operator@@== @TO@ InfixExpression@@actualRelatedId == null @AT@ 36293 @LENGTH@ 2
------------------INS NullLiteral@@null @TO@ InfixExpression@@actualRelatedId == null @AT@ 36297 @LENGTH@ 4
---------------INS SimpleName@@relatedInternalId @TO@ ConditionalExpression@@actualRelatedId == null ? relatedInternalId : actualRelatedId @AT@ 36304 @LENGTH@ 17
---------------INS SimpleName@@actualRelatedId @TO@ ConditionalExpression@@actualRelatedId == null ? relatedInternalId : actualRelatedId @AT@ 36324 @LENGTH@ 15


UPD ExpressionStatement@@MethodInvocation:c.prefill(Arrays.copyOfRange(BLA,2,4)) @TO@ MethodInvocation:assertThrows(IllegalStateException.class,() -> c.prefill(Arrays.copyOfRange(BLA,2,4))) @AT@ 11888 @LENGTH@ 41
---INS MethodInvocation@@assertThrows(IllegalStateException.class,() -> c.prefill(Arrays.copyOfRange(BLA,2,4))) @TO@ ExpressionStatement@@MethodInvocation:c.prefill(Arrays.copyOfRange(BLA,2,4)) @AT@ 11924 @LENGTH@ 89
------INS SimpleName@@MethodName:assertThrows:[IllegalStateException.class, () -> c.prefill(Arrays.copyOfRange(BLA,2,4))] @TO@ MethodInvocation@@assertThrows(IllegalStateException.class,() -> c.prefill(Arrays.copyOfRange(BLA,2,4))) @AT@ 11924 @LENGTH@ 89
---------INS TypeLiteral@@IllegalStateException.class @TO@ SimpleName@@MethodName:assertThrows:[IllegalStateException.class, () -> c.prefill(Arrays.copyOfRange(BLA,2,4))] @AT@ 11937 @LENGTH@ 27
---------INS LambdaExpression@@() -> c.prefill(Arrays.copyOfRange(BLA,2,4)) @TO@ SimpleName@@MethodName:assertThrows:[IllegalStateException.class, () -> c.prefill(Arrays.copyOfRange(BLA,2,4))] @AT@ 11966 @LENGTH@ 46
------------MOV MethodInvocation@@c.prefill(Arrays.copyOfRange(BLA,2,4)) @TO@ LambdaExpression@@() -> c.prefill(Arrays.copyOfRange(BLA,2,4)) @AT@ 11888 @LENGTH@ 40


UPD IfStatement@@if (charset != null) {  Reader in=exchange.getContext().getTypeConverter().tryConvertTo(Reader.class,exchange,exchange.getIn().getBody());  if (in == null) {    InputStream is=exchange.getIn().getMandatoryBody(InputStream.class);    in=new InputStreamReader(is);  }  in=IOHelper.buffered(in);  writeFileByReaderWithCharset(in,file,charset);} else {  InputStream in=exchange.getIn().getMandatoryBody(InputStream.class);  writeFileByStream(in,file);} @TO@ if (charset != null) {  Reader in=exchange.getContext().getTypeConverter().tryConvertTo(Reader.class,exchange,exchange.getIn().getBody());  if (in == null) {    InputStream is=exchange.getIn().getMandatoryBody(InputStream.class);    in=new InputStreamReader(is);  }  in=IOHelper.buffered(in);  writeFileByReaderWithCharset(in,file,charset);} else if (exchange.getIn().getBody() instanceof String) {  String stringBody=(String)exchange.getIn().getBody();  writeFileByString(stringBody,file);} else {  InputStream in=exchange.getIn().getMandatoryBody(InputStream.class);  writeFileByStream(in,file);} @AT@ 14794 @LENGTH@ 986
---INS Block@@ElseBody:if (exchange.getIn().getBody() instanceof String) {  String stringBody=(String)exchange.getIn().getBody();  writeFileByString(stringBody,file);} else {  InputStream in=exchange.getIn().getMandatoryBody(InputStream.class);  writeFileByStream(in,file);} @TO@ IfStatement@@if (charset != null) {  Reader in=exchange.getContext().getTypeConverter().tryConvertTo(Reader.class,exchange,exchange.getIn().getBody());  if (in == null) {    InputStream is=exchange.getIn().getMandatoryBody(InputStream.class);    in=new InputStreamReader(is);  }  in=IOHelper.buffered(in);  writeFileByReaderWithCharset(in,file,charset);} else {  InputStream in=exchange.getIn().getMandatoryBody(InputStream.class);  writeFileByStream(in,file);} @AT@ 15584 @LENGTH@ 455
------INS IfStatement@@if (exchange.getIn().getBody() instanceof String) {  String stringBody=(String)exchange.getIn().getBody();  writeFileByString(stringBody,file);} else {  InputStream in=exchange.getIn().getMandatoryBody(InputStream.class);  writeFileByStream(in,file);} @TO@ Block@@ElseBody:if (exchange.getIn().getBody() instanceof String) {  String stringBody=(String)exchange.getIn().getBody();  writeFileByString(stringBody,file);} else {  InputStream in=exchange.getIn().getMandatoryBody(InputStream.class);  writeFileByStream(in,file);} @AT@ 15584 @LENGTH@ 455
---------MOV Block@@ElseBody:{  InputStream in=exchange.getIn().getMandatoryBody(InputStream.class);  writeFileByStream(in,file);} @TO@ IfStatement@@if (exchange.getIn().getBody() instanceof String) {  String stringBody=(String)exchange.getIn().getBody();  writeFileByString(stringBody,file);} else {  InputStream in=exchange.getIn().getMandatoryBody(InputStream.class);  writeFileByStream(in,file);} @AT@ 15584 @LENGTH@ 196
---------INS InstanceofExpression@@exchange.getIn().getBody() instanceof String @TO@ IfStatement@@if (exchange.getIn().getBody() instanceof String) {  String stringBody=(String)exchange.getIn().getBody();  writeFileByString(stringBody,file);} else {  InputStream in=exchange.getIn().getMandatoryBody(InputStream.class);  writeFileByStream(in,file);} @AT@ 15588 @LENGTH@ 44
------------INS MethodInvocation@@exchange.getIn().getBody() @TO@ InstanceofExpression@@exchange.getIn().getBody() instanceof String @AT@ 15588 @LENGTH@ 26
---------------INS MethodInvocation@@MethodName:getIn:[] @TO@ MethodInvocation@@exchange.getIn().getBody() @AT@ 15588 @LENGTH@ 16
---------------INS SimpleName@@Name:exchange @TO@ MethodInvocation@@exchange.getIn().getBody() @AT@ 15588 @LENGTH@ 8
---------------INS SimpleName@@MethodName:getBody:[] @TO@ MethodInvocation@@exchange.getIn().getBody() @AT@ 15605 @LENGTH@ 9
------------INS Instanceof@@instanceof @TO@ InstanceofExpression@@exchange.getIn().getBody() instanceof String @AT@ 15615 @LENGTH@ 10
------------INS SimpleType@@String @TO@ InstanceofExpression@@exchange.getIn().getBody() instanceof String @AT@ 15626 @LENGTH@ 6
---------INS Block@@ThenBody:{  String stringBody=(String)exchange.getIn().getBody();  writeFileByString(stringBody,file);} @TO@ IfStatement@@if (exchange.getIn().getBody() instanceof String) {  String stringBody=(String)exchange.getIn().getBody();  writeFileByString(stringBody,file);} else {  InputStream in=exchange.getIn().getMandatoryBody(InputStream.class);  writeFileByStream(in,file);} @AT@ 15634 @LENGTH@ 203
------------INS VariableDeclarationStatement@@String stringBody=(String)exchange.getIn().getBody(); @TO@ Block@@ThenBody:{  String stringBody=(String)exchange.getIn().getBody();  writeFileByString(stringBody,file);} @AT@ 15714 @LENGTH@ 56
---------------INS SimpleType@@String @TO@ VariableDeclarationStatement@@String stringBody=(String)exchange.getIn().getBody(); @AT@ 15714 @LENGTH@ 6
---------------INS VariableDeclarationFragment@@stringBody=(String)exchange.getIn().getBody() @TO@ VariableDeclarationStatement@@String stringBody=(String)exchange.getIn().getBody(); @AT@ 15721 @LENGTH@ 48
------------------INS SimpleName@@stringBody @TO@ VariableDeclarationFragment@@stringBody=(String)exchange.getIn().getBody() @AT@ 15721 @LENGTH@ 10
------------------INS CastExpression@@(String)exchange.getIn().getBody() @TO@ VariableDeclarationFragment@@stringBody=(String)exchange.getIn().getBody() @AT@ 15734 @LENGTH@ 35
---------------------INS SimpleType@@String @TO@ CastExpression@@(String)exchange.getIn().getBody() @AT@ 15735 @LENGTH@ 6
---------------------INS MethodInvocation@@exchange.getIn().getBody() @TO@ CastExpression@@(String)exchange.getIn().getBody() @AT@ 15743 @LENGTH@ 26
------------------------INS MethodInvocation@@MethodName:getIn:[] @TO@ MethodInvocation@@exchange.getIn().getBody() @AT@ 15743 @LENGTH@ 16
------------------------INS SimpleName@@Name:exchange @TO@ MethodInvocation@@exchange.getIn().getBody() @AT@ 15743 @LENGTH@ 8
------------------------INS SimpleName@@MethodName:getBody:[] @TO@ MethodInvocation@@exchange.getIn().getBody() @AT@ 15760 @LENGTH@ 9
------------INS ExpressionStatement@@MethodInvocation:writeFileByString(stringBody,file) @TO@ Block@@ThenBody:{  String stringBody=(String)exchange.getIn().getBody();  writeFileByString(stringBody,file);} @AT@ 15787 @LENGTH@ 36
---------------INS MethodInvocation@@writeFileByString(stringBody,file) @TO@ ExpressionStatement@@MethodInvocation:writeFileByString(stringBody,file) @AT@ 15787 @LENGTH@ 35
------------------INS SimpleName@@MethodName:writeFileByString:[stringBody, file] @TO@ MethodInvocation@@writeFileByString(stringBody,file) @AT@ 15787 @LENGTH@ 35
---------------------INS SimpleName@@stringBody @TO@ SimpleName@@MethodName:writeFileByString:[stringBody, file] @AT@ 15805 @LENGTH@ 10
---------------------INS SimpleName@@file @TO@ SimpleName@@MethodName:writeFileByString:[stringBody, file] @AT@ 15817 @LENGTH@ 4
------------------INS SimpleName@@MethodName:writeFileByString:[stringBody, file] @TO@ MethodInvocation@@writeFileByString(stringBody,file) @AT@ 15787 @LENGTH@ 35
---------------------INS SimpleName@@stringBody @TO@ SimpleName@@MethodName:writeFileByString:[stringBody, file] @AT@ 15805 @LENGTH@ 10
---------------------INS SimpleName@@file @TO@ SimpleName@@MethodName:writeFileByString:[stringBody, file] @AT@ 15817 @LENGTH@ 4


UPD VariableDeclarationStatement@@final Object[] els=new Object[]{"1","3","5","7","2","4","6"}; @TO@ final Object[] els={"1","3","5","7","2","4","6"}; @AT@ 3161 @LENGTH@ 72
---UPD VariableDeclarationFragment@@els=new Object[]{"1","3","5","7","2","4","6"} @TO@ els={"1","3","5","7","2","4","6"} @AT@ 3176 @LENGTH@ 56
------INS ArrayInitializer@@{"1","3","5","7","2","4","6"} @TO@ VariableDeclarationFragment@@els=new Object[]{"1","3","5","7","2","4","6"} @AT@ 3169 @LENGTH@ 37
---------MOV StringLiteral@@"1" @TO@ ArrayInitializer@@{"1","3","5","7","2","4","6"} @AT@ 3197 @LENGTH@ 3
---------MOV StringLiteral@@"3" @TO@ ArrayInitializer@@{"1","3","5","7","2","4","6"} @AT@ 3202 @LENGTH@ 3
---------MOV StringLiteral@@"5" @TO@ ArrayInitializer@@{"1","3","5","7","2","4","6"} @AT@ 3207 @LENGTH@ 3
---------MOV StringLiteral@@"7" @TO@ ArrayInitializer@@{"1","3","5","7","2","4","6"} @AT@ 3212 @LENGTH@ 3
---------MOV StringLiteral@@"2" @TO@ ArrayInitializer@@{"1","3","5","7","2","4","6"} @AT@ 3217 @LENGTH@ 3
---------MOV StringLiteral@@"4" @TO@ ArrayInitializer@@{"1","3","5","7","2","4","6"} @AT@ 3222 @LENGTH@ 3
---------MOV StringLiteral@@"6" @TO@ ArrayInitializer@@{"1","3","5","7","2","4","6"} @AT@ 3227 @LENGTH@ 3
------DEL ArrayCreation@@new Object[]{"1","3","5","7","2","4","6"} @AT@ 3182 @LENGTH@ 50
---------DEL ArrayType@@Object[] @AT@ 3186 @LENGTH@ 8
------------DEL SimpleType@@Object @AT@ 3186 @LENGTH@ 6
---------DEL ArrayInitializer@@{"1","3","5","7","2","4","6"} @AT@ 3195 @LENGTH@ 37


UPD ExpressionStatement@@ClassInstanceCreation:new SevenZMethodConfiguration(SevenZMethod.LZMA,"") @TO@ MethodInvocation:assertThrows(IllegalArgumentException.class,() -> new SevenZMethodConfiguration(SevenZMethod.LZMA,"")) @AT@ 2580 @LENGTH@ 53
---INS MethodInvocation@@assertThrows(IllegalArgumentException.class,() -> new SevenZMethodConfiguration(SevenZMethod.LZMA,"")) @TO@ ExpressionStatement@@ClassInstanceCreation:new SevenZMethodConfiguration(SevenZMethod.LZMA,"") @AT@ 2626 @LENGTH@ 104
------INS SimpleName@@MethodName:assertThrows:[IllegalArgumentException.class, () -> new SevenZMethodConfiguration(SevenZMethod.LZMA,"")] @TO@ MethodInvocation@@assertThrows(IllegalArgumentException.class,() -> new SevenZMethodConfiguration(SevenZMethod.LZMA,"")) @AT@ 2626 @LENGTH@ 104
---------INS TypeLiteral@@IllegalArgumentException.class @TO@ SimpleName@@MethodName:assertThrows:[IllegalArgumentException.class, () -> new SevenZMethodConfiguration(SevenZMethod.LZMA,"")] @AT@ 2639 @LENGTH@ 30
---------INS LambdaExpression@@() -> new SevenZMethodConfiguration(SevenZMethod.LZMA,"") @TO@ SimpleName@@MethodName:assertThrows:[IllegalArgumentException.class, () -> new SevenZMethodConfiguration(SevenZMethod.LZMA,"")] @AT@ 2671 @LENGTH@ 58
------------MOV ClassInstanceCreation@@SevenZMethodConfiguration[SevenZMethod.LZMA, ""] @TO@ LambdaExpression@@() -> new SevenZMethodConfiguration(SevenZMethod.LZMA,"") @AT@ 2580 @LENGTH@ 52


UPD TypeDeclaration@@[public]SecurityContextPersistenceFilter, GenericFilterBean @TO@ [@Deprecated, public]SecurityContextPersistenceFilter, GenericFilterBean @AT@ 2632 @LENGTH@ 2485
---INS MarkerAnnotation@@@Deprecated @TO@ TypeDeclaration@@[public]SecurityContextPersistenceFilter, GenericFilterBean @AT@ 2687 @LENGTH@ 11


MOV VariableDeclarationStatement@@EntityFromDtoInstantiatingConverter<T> converter=new EntityFromDtoInstantiatingConverter<>(domainType,neo4jMappingContext); @TO@ MethodDeclaration@@Flux<R>, T, R, MethodName:doSave, Iterable<R> instances, Class<T> domainType,  @AT@ 15682 @LENGTH@ 126


UPD FieldDeclaration@@private, static, final, String, [PARAM_ON_SPECIAL=format("You must not user @%s on a parameter typed %s or %s",Param.class.getSimpleName(),Pageable.class.getSimpleName(),Sort.class.getSimpleName())] @TO@ private, static, final, String, [PARAM_ON_SPECIAL=format("You must not use @%s on a parameter typed %s or %s",Param.class.getSimpleName(),Pageable.class.getSimpleName(),Sort.class.getSimpleName())] @AT@ 1618 @LENGTH@ 201
---UPD VariableDeclarationFragment@@PARAM_ON_SPECIAL=format("You must not user @%s on a parameter typed %s or %s",Param.class.getSimpleName(),Pageable.class.getSimpleName(),Sort.class.getSimpleName()) @TO@ PARAM_ON_SPECIAL=format("You must not use @%s on a parameter typed %s or %s",Param.class.getSimpleName(),Pageable.class.getSimpleName(),Sort.class.getSimpleName()) @AT@ 1646 @LENGTH@ 172
------UPD MethodInvocation@@format("You must not user @%s on a parameter typed %s or %s",Param.class.getSimpleName(),Pageable.class.getSimpleName(),Sort.class.getSimpleName()) @TO@ format("You must not use @%s on a parameter typed %s or %s",Param.class.getSimpleName(),Pageable.class.getSimpleName(),Sort.class.getSimpleName()) @AT@ 1665 @LENGTH@ 153
---------UPD SimpleName@@MethodName:format:["You must not user @%s on a parameter typed %s or %s", Param.class.getSimpleName(), Pageable.class.getSimpleName(), Sort.class.getSimpleName()] @TO@ MethodName:format:["You must not use @%s on a parameter typed %s or %s", Param.class.getSimpleName(), Pageable.class.getSimpleName(), Sort.class.getSimpleName()] @AT@ 1665 @LENGTH@ 153
------------UPD StringLiteral@@"You must not user @%s on a parameter typed %s or %s" @TO@ "You must not use @%s on a parameter typed %s or %s" @AT@ 1672 @LENGTH@ 53


UPD VariableDeclarationStatement@@Path relativePath=new Path(each.getPath().toString().replace(base.toString(),"")); @TO@ Path relativePath=makeRelative(base.getPath(),each.getPath()); @AT@ 12734 @LENGTH@ 85
---UPD VariableDeclarationFragment@@relativePath=new Path(each.getPath().toString().replace(base.toString(),"")) @TO@ relativePath=makeRelative(base.getPath(),each.getPath()) @AT@ 12739 @LENGTH@ 79
------DEL ClassInstanceCreation@@Path[each.getPath().toString().replace(base.toString(),"")] @AT@ 12754 @LENGTH@ 64
---------DEL New@@new @AT@ 12754 @LENGTH@ 3
---------DEL SimpleType@@Path @AT@ 12758 @LENGTH@ 4
---------DEL MethodInvocation@@each.getPath().toString().replace(base.toString(),"") @AT@ 12763 @LENGTH@ 54
------------DEL MethodInvocation@@MethodName:toString:[] @AT@ 12763 @LENGTH@ 25
------------DEL MethodInvocation@@MethodName:getPath:[] @AT@ 12763 @LENGTH@ 14
------------DEL SimpleName@@Name:each @AT@ 12763 @LENGTH@ 4
------INS MethodInvocation@@makeRelative(base.getPath(),each.getPath()) @TO@ VariableDeclarationFragment@@relativePath=new Path(each.getPath().toString().replace(base.toString(),"")) @AT@ 12754 @LENGTH@ 44
---------MOV SimpleName@@MethodName:replace:[base.toString(), ""] @TO@ MethodInvocation@@makeRelative(base.getPath(),each.getPath()) @AT@ 12789 @LENGTH@ 28
------------INS MethodInvocation@@each.getPath() @TO@ SimpleName@@MethodName:replace:[base.toString(), ""] @AT@ 12783 @LENGTH@ 14
---------------INS SimpleName@@Name:each @TO@ MethodInvocation@@each.getPath() @AT@ 12783 @LENGTH@ 4
---------------INS SimpleName@@MethodName:getPath:[] @TO@ MethodInvocation@@each.getPath() @AT@ 12788 @LENGTH@ 9


UPD IfStatement@@if (StringUtils.hasText(this.jsonQuery)) {  Assert.notNull(this.sorts,"sorts map is required.");} @TO@ if (StringUtils.hasText(this.jsonQuery) || this.query != null) {  Assert.notNull(this.sorts,"sorts map is required.");} @AT@ 8084 @LENGTH@ 102
---INS InfixExpression@@StringUtils.hasText(this.jsonQuery) || this.query != null @TO@ IfStatement@@if (StringUtils.hasText(this.jsonQuery)) {  Assert.notNull(this.sorts,"sorts map is required.");} @AT@ 8088 @LENGTH@ 57
------MOV MethodInvocation@@StringUtils.hasText(this.jsonQuery) @TO@ InfixExpression@@StringUtils.hasText(this.jsonQuery) || this.query != null @AT@ 8087 @LENGTH@ 35
------INS Operator@@|| @TO@ InfixExpression@@StringUtils.hasText(this.jsonQuery) || this.query != null @AT@ 8123 @LENGTH@ 2
------INS InfixExpression@@this.query != null @TO@ InfixExpression@@StringUtils.hasText(this.jsonQuery) || this.query != null @AT@ 8127 @LENGTH@ 18
---------INS FieldAccess@@this.query @TO@ InfixExpression@@this.query != null @AT@ 8127 @LENGTH@ 10
------------INS ThisExpression@@this @TO@ FieldAccess@@this.query @AT@ 8127 @LENGTH@ 4
------------INS SimpleName@@query @TO@ FieldAccess@@this.query @AT@ 8132 @LENGTH@ 5
---------INS Operator@@!= @TO@ InfixExpression@@this.query != null @AT@ 8137 @LENGTH@ 2
---------INS NullLiteral@@null @TO@ InfixExpression@@this.query != null @AT@ 8141 @LENGTH@ 4


UPD Block@@ThenBody:{  @SuppressWarnings("unchecked") Map<String,Object> propertyMap=(Map<String,Object>)sink.get(Constants.NAME_OF_PROPERTIES_PARAM);  PropertyHandlerSupport.of(entity).doWithProperties(p -> {    if (p.isAnnotationPresent(TargetNode.class)) {      Map<String,Object> target=this.writeImpl(propertyAccessor.getProperty(p),new HashMap<>(),seenObjects,false);      propertyMap.put("__target__",Values.value(target));    }  });} @TO@ ThenBody:{  PropertyHandlerSupport.of(entity).doWithProperties(p -> {    if (p.isAnnotationPresent(TargetNode.class)) {      Value target=Values.value(this.writeImpl(propertyAccessor.getProperty(p),new HashMap<>(),seenObjects,false));      sink.put("__target__",target);    }  });} @AT@ 4884 @LENGTH@ 447
---DEL VariableDeclarationStatement@@@SuppressWarnings("unchecked") Map<String,Object> propertyMap=(Map<String,Object>)sink.get(Constants.NAME_OF_PROPERTIES_PARAM); @AT@ 4889 @LENGTH@ 135
------DEL ParameterizedType@@Map<String,Object> @AT@ 4923 @LENGTH@ 19
---------DEL SimpleType@@Map @AT@ 4923 @LENGTH@ 3
---------DEL SimpleType@@String @AT@ 4927 @LENGTH@ 6
---------DEL SimpleType@@Object @AT@ 4935 @LENGTH@ 6
------DEL VariableDeclarationFragment@@propertyMap=(Map<String,Object>)sink.get(Constants.NAME_OF_PROPERTIES_PARAM) @AT@ 4943 @LENGTH@ 80
---------DEL SimpleName@@propertyMap @AT@ 4943 @LENGTH@ 11
---------DEL CastExpression@@(Map<String,Object>)sink.get(Constants.NAME_OF_PROPERTIES_PARAM) @AT@ 4957 @LENGTH@ 66
------------DEL ParameterizedType@@Map<String,Object> @AT@ 4958 @LENGTH@ 19
---------------DEL SimpleType@@Map @AT@ 4958 @LENGTH@ 3
---------------DEL SimpleType@@String @AT@ 4962 @LENGTH@ 6
---------------DEL SimpleType@@Object @AT@ 4970 @LENGTH@ 6
------------DEL MethodInvocation@@sink.get(Constants.NAME_OF_PROPERTIES_PARAM) @AT@ 4979 @LENGTH@ 44
---------------DEL SimpleName@@Name:sink @AT@ 4979 @LENGTH@ 4
---------------DEL SimpleName@@MethodName:get:[Constants.NAME_OF_PROPERTIES_PARAM] @AT@ 4984 @LENGTH@ 39
------------------DEL QualifiedName@@Constants.NAME_OF_PROPERTIES_PARAM @AT@ 4988 @LENGTH@ 34
---------------------DEL SimpleName@@Constants @AT@ 4988 @LENGTH@ 9
---------------------DEL SimpleName@@NAME_OF_PROPERTIES_PARAM @AT@ 4998 @LENGTH@ 24
---UPD ExpressionStatement@@MethodInvocation:PropertyHandlerSupport.of(entity).doWithProperties(p -> {
  if (p.isAnnotationPresent(TargetNode.class)) {
    Map<String,Object> target=this.writeImpl(propertyAccessor.getProperty(p),new HashMap<>(),seenObjects,false);
    propertyMap.put("__target__",Values.value(target));
  }
}
) @TO@ MethodInvocation:PropertyHandlerSupport.of(entity).doWithProperties(p -> {
  if (p.isAnnotationPresent(TargetNode.class)) {
    Value target=Values.value(this.writeImpl(propertyAccessor.getProperty(p),new HashMap<>(),seenObjects,false));
    sink.put("__target__",target);
  }
}
) @AT@ 5028 @LENGTH@ 299
------UPD MethodInvocation@@PropertyHandlerSupport.of(entity).doWithProperties(p -> {
  if (p.isAnnotationPresent(TargetNode.class)) {
    Map<String,Object> target=this.writeImpl(propertyAccessor.getProperty(p),new HashMap<>(),seenObjects,false);
    propertyMap.put("__target__",Values.value(target));
  }
}
) @TO@ PropertyHandlerSupport.of(entity).doWithProperties(p -> {
  if (p.isAnnotationPresent(TargetNode.class)) {
    Value target=Values.value(this.writeImpl(propertyAccessor.getProperty(p),new HashMap<>(),seenObjects,false));
    sink.put("__target__",target);
  }
}
) @AT@ 5028 @LENGTH@ 298
---------UPD SimpleName@@MethodName:doWithProperties:[p -> {
  if (p.isAnnotationPresent(TargetNode.class)) {
    Map<String,Object> target=this.writeImpl(propertyAccessor.getProperty(p),new HashMap<>(),seenObjects,false);
    propertyMap.put("__target__",Values.value(target));
  }
}
] @TO@ MethodName:doWithProperties:[p -> {
  if (p.isAnnotationPresent(TargetNode.class)) {
    Value target=Values.value(this.writeImpl(propertyAccessor.getProperty(p),new HashMap<>(),seenObjects,false));
    sink.put("__target__",target);
  }
}
] @AT@ 5062 @LENGTH@ 264
------------UPD LambdaExpression@@p -> {
  if (p.isAnnotationPresent(TargetNode.class)) {
    Map<String,Object> target=this.writeImpl(propertyAccessor.getProperty(p),new HashMap<>(),seenObjects,false);
    propertyMap.put("__target__",Values.value(target));
  }
}
 @TO@ p -> {
  if (p.isAnnotationPresent(TargetNode.class)) {
    Value target=Values.value(this.writeImpl(propertyAccessor.getProperty(p),new HashMap<>(),seenObjects,false));
    sink.put("__target__",target);
  }
}
 @AT@ 5079 @LENGTH@ 246
---------------UPD IfStatement@@if (p.isAnnotationPresent(TargetNode.class)) {  Map<String,Object> target=this.writeImpl(propertyAccessor.getProperty(p),new HashMap<>(),seenObjects,false);  propertyMap.put("__target__",Values.value(target));} @TO@ if (p.isAnnotationPresent(TargetNode.class)) {  Value target=Values.value(this.writeImpl(propertyAccessor.getProperty(p),new HashMap<>(),seenObjects,false));  sink.put("__target__",target);} @AT@ 5090 @LENGTH@ 230
------------------UPD Block@@ThenBody:{  Map<String,Object> target=this.writeImpl(propertyAccessor.getProperty(p),new HashMap<>(),seenObjects,false);  propertyMap.put("__target__",Values.value(target));} @TO@ ThenBody:{  Value target=Values.value(this.writeImpl(propertyAccessor.getProperty(p),new HashMap<>(),seenObjects,false));  sink.put("__target__",target);} @AT@ 5135 @LENGTH@ 185
---------------------UPD VariableDeclarationStatement@@Map<String,Object> target=this.writeImpl(propertyAccessor.getProperty(p),new HashMap<>(),seenObjects,false); @TO@ Value target=Values.value(this.writeImpl(propertyAccessor.getProperty(p),new HashMap<>(),seenObjects,false)); @AT@ 5142 @LENGTH@ 114
------------------------INS SimpleType@@Value @TO@ VariableDeclarationStatement@@Map<String,Object> target=this.writeImpl(propertyAccessor.getProperty(p),new HashMap<>(),seenObjects,false); @AT@ 5003 @LENGTH@ 5
------------------------DEL ParameterizedType@@Map<String,Object> @AT@ 5142 @LENGTH@ 19
---------------------------DEL SimpleType@@Map @AT@ 5142 @LENGTH@ 3
---------------------------DEL SimpleType@@String @AT@ 5146 @LENGTH@ 6
---------------------------DEL SimpleType@@Object @AT@ 5154 @LENGTH@ 6
------------------------UPD VariableDeclarationFragment@@target=this.writeImpl(propertyAccessor.getProperty(p),new HashMap<>(),seenObjects,false) @TO@ target=Values.value(this.writeImpl(propertyAccessor.getProperty(p),new HashMap<>(),seenObjects,false)) @AT@ 5162 @LENGTH@ 93
---------------------------INS MethodInvocation@@Values.value(this.writeImpl(propertyAccessor.getProperty(p),new HashMap<>(),seenObjects,false)) @TO@ VariableDeclarationFragment@@target=this.writeImpl(propertyAccessor.getProperty(p),new HashMap<>(),seenObjects,false) @AT@ 5018 @LENGTH@ 98
------------------------------INS SimpleName@@Name:Values @TO@ MethodInvocation@@Values.value(this.writeImpl(propertyAccessor.getProperty(p),new HashMap<>(),seenObjects,false)) @AT@ 5018 @LENGTH@ 6
------------------------------INS SimpleName@@MethodName:value:[this.writeImpl(propertyAccessor.getProperty(p),new HashMap<>(),seenObjects,false)] @TO@ MethodInvocation@@Values.value(this.writeImpl(propertyAccessor.getProperty(p),new HashMap<>(),seenObjects,false)) @AT@ 5025 @LENGTH@ 91
---------------------------------MOV MethodInvocation@@this.writeImpl(propertyAccessor.getProperty(p),new HashMap<>(),seenObjects,false) @TO@ SimpleName@@MethodName:value:[this.writeImpl(propertyAccessor.getProperty(p),new HashMap<>(),seenObjects,false)] @AT@ 5171 @LENGTH@ 84
---------------------UPD ExpressionStatement@@MethodInvocation:propertyMap.put("__target__",Values.value(target)) @TO@ MethodInvocation:sink.put("__target__",target) @AT@ 5262 @LENGTH@ 52
------------------------UPD MethodInvocation@@propertyMap.put("__target__",Values.value(target)) @TO@ sink.put("__target__",target) @AT@ 5262 @LENGTH@ 51
---------------------------UPD SimpleName@@Name:propertyMap @TO@ Name:sink @AT@ 5262 @LENGTH@ 11
---------------------------UPD SimpleName@@MethodName:put:["__target__", Values.value(target)] @TO@ MethodName:put:["__target__", target] @AT@ 5274 @LENGTH@ 39
------------------------------DEL MethodInvocation@@Values.value(target) @AT@ 5292 @LENGTH@ 20
---------------------------------DEL SimpleName@@Name:Values @AT@ 5292 @LENGTH@ 6
---------------------------------DEL SimpleName@@MethodName:value:[target] @AT@ 5299 @LENGTH@ 13
------------------------------MOV SimpleName@@target @TO@ SimpleName@@MethodName:put:["__target__", Values.value(target)] @AT@ 5305 @LENGTH@ 6


UPD ExpressionStatement@@MethodInvocation:assertEquals(3,m.values().size()) @TO@ MethodInvocation:assertEquals(3,m.size()) @AT@ 8421 @LENGTH@ 35
---UPD MethodInvocation@@assertEquals(3,m.values().size()) @TO@ assertEquals(3,m.size()) @AT@ 8421 @LENGTH@ 34
------UPD SimpleName@@MethodName:assertEquals:[3, m.values().size()] @TO@ MethodName:assertEquals:[3, m.size()] @AT@ 8421 @LENGTH@ 34
---------UPD MethodInvocation@@m.values().size() @TO@ m.size() @AT@ 8437 @LENGTH@ 17
------------DEL MethodInvocation@@MethodName:values:[] @AT@ 8437 @LENGTH@ 10


UPD IfStatement@@if (!kafkaProducer.isReady()) {  builder.down();  builder.message("KafkaProducer is not ready");  KafkaConfiguration cfg=kafkaProducer.getEndpoint().getConfiguration();  Properties props=kafkaProducer.getProps();  builder.detail("bootstrap.servers",props.getProperty(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG));  builder.detail("client.id",clientId);  String gid=props.getProperty(ConsumerConfig.GROUP_ID_CONFIG);  if (gid != null) {    builder.detail("group.id",gid);  }  builder.detail("topic",cfg.getTopic());} @TO@ if (!kafkaProducer.isReady()) {  builder.down();  builder.message("KafkaProducer is not ready");  KafkaConfiguration cfg=kafkaProducer.getEndpoint().getConfiguration();  Properties props=kafkaProducer.getProps();  builder.detail("bootstrap.servers",props.getProperty(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG));  builder.detail("client.id",clientId);  String gid=props.getProperty(ConsumerConfig.GROUP_ID_CONFIG);  if (gid != null) {    builder.detail("group.id",gid);  }  builder.detail("topic",cfg.getTopic());} else {  builder.up();} @AT@ 1731 @LENGTH@ 655
---INS Block@@ElseBody:{  builder.up();} @TO@ IfStatement@@if (!kafkaProducer.isReady()) {  builder.down();  builder.message("KafkaProducer is not ready");  KafkaConfiguration cfg=kafkaProducer.getEndpoint().getConfiguration();  Properties props=kafkaProducer.getProps();  builder.detail("bootstrap.servers",props.getProperty(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG));  builder.detail("client.id",clientId);  String gid=props.getProperty(ConsumerConfig.GROUP_ID_CONFIG);  if (gid != null) {    builder.detail("group.id",gid);  }  builder.detail("topic",cfg.getTopic());} @AT@ 2392 @LENGTH@ 37
------INS ExpressionStatement@@MethodInvocation:builder.up() @TO@ Block@@ElseBody:{  builder.up();} @AT@ 2406 @LENGTH@ 13
---------INS MethodInvocation@@builder.up() @TO@ ExpressionStatement@@MethodInvocation:builder.up() @AT@ 2406 @LENGTH@ 12
------------INS SimpleName@@Name:builder @TO@ MethodInvocation@@builder.up() @AT@ 2406 @LENGTH@ 7
------------INS SimpleName@@MethodName:up:[] @TO@ MethodInvocation@@builder.up() @AT@ 2414 @LENGTH@ 4


UPD IfStatement@@if (isSessionClosed(session)) {  try {    LOG.info("Trying to reconnect to {}",getEndpoint().getConnectionString());    session=createSession();    return true;  } catch (  IOException e) {    LOG.warn("Failed to reconnect to {}",getEndpoint().getConnectionString());    closeSession();    return false;  }} @TO@ if (isSessionClosed(session)) {  try {    LOG.info("Creating a new session to {}",getEndpoint().getConnectionString());    session=createSession();    LOG.info("Reconnected to {}",getEndpoint().getConnectionString());    return true;  } catch (  IOException e) {    LOG.warn("Failed to reconnect to {}",getEndpoint().getConnectionString());    closeSession();    return false;  }} @AT@ 5938 @LENGTH@ 430


UPD VariableDeclarationStatement@@String payload=IOUtils.toString(ClassLoader.getSystemResourceAsStream("xml/article-2.xml")); @TO@ String payload=IOUtils.toString(ClassLoader.getSystemResourceAsStream("xml/article-2.xml"),Charset.defaultCharset()); @AT@ 2353 @LENGTH@ 94
---UPD VariableDeclarationFragment@@payload=IOUtils.toString(ClassLoader.getSystemResourceAsStream("xml/article-2.xml")) @TO@ payload=IOUtils.toString(ClassLoader.getSystemResourceAsStream("xml/article-2.xml"),Charset.defaultCharset()) @AT@ 2360 @LENGTH@ 86
------UPD MethodInvocation@@IOUtils.toString(ClassLoader.getSystemResourceAsStream("xml/article-2.xml")) @TO@ IOUtils.toString(ClassLoader.getSystemResourceAsStream("xml/article-2.xml"),Charset.defaultCharset()) @AT@ 2370 @LENGTH@ 76
---------UPD SimpleName@@MethodName:toString:[ClassLoader.getSystemResourceAsStream("xml/article-2.xml")] @TO@ MethodName:toString:[ClassLoader.getSystemResourceAsStream("xml/article-2.xml"), Charset.defaultCharset()] @AT@ 2378 @LENGTH@ 68
------------INS MethodInvocation@@Charset.defaultCharset() @TO@ SimpleName@@MethodName:toString:[ClassLoader.getSystemResourceAsStream("xml/article-2.xml")] @AT@ 2539 @LENGTH@ 24
---------------INS SimpleName@@Name:Charset @TO@ MethodInvocation@@Charset.defaultCharset() @AT@ 2539 @LENGTH@ 7
---------------INS SimpleName@@MethodName:defaultCharset:[] @TO@ MethodInvocation@@Charset.defaultCharset() @AT@ 2547 @LENGTH@ 16


UPD ExpressionStatement@@MethodInvocation:assertThat(cat.getName(),not(isEmptyOrNullString())) @TO@ MethodInvocation:assertThat(cat.getName(),not(emptyOrNullString())) @AT@ 2355 @LENGTH@ 54
---UPD MethodInvocation@@assertThat(cat.getName(),not(isEmptyOrNullString())) @TO@ assertThat(cat.getName(),not(emptyOrNullString())) @AT@ 2355 @LENGTH@ 53
------UPD SimpleName@@MethodName:assertThat:[cat.getName(), not(isEmptyOrNullString())] @TO@ MethodName:assertThat:[cat.getName(), not(emptyOrNullString())] @AT@ 2355 @LENGTH@ 53
---------UPD MethodInvocation@@not(isEmptyOrNullString()) @TO@ not(emptyOrNullString()) @AT@ 2381 @LENGTH@ 26
------------UPD SimpleName@@MethodName:not:[isEmptyOrNullString()] @TO@ MethodName:not:[emptyOrNullString()] @AT@ 2381 @LENGTH@ 26
---------------UPD MethodInvocation@@MethodName:isEmptyOrNullString:[] @TO@ MethodName:emptyOrNullString:[] @AT@ 2385 @LENGTH@ 21
------------UPD SimpleName@@MethodName:not:[isEmptyOrNullString()] @TO@ MethodName:not:[emptyOrNullString()] @AT@ 2381 @LENGTH@ 26
---------------UPD MethodInvocation@@MethodName:isEmptyOrNullString:[] @TO@ MethodName:emptyOrNullString:[] @AT@ 2385 @LENGTH@ 21


UPD ReturnStatement@@MethodInvocation:Long.signum(b.getHighWatermark() - (a.getInvalidWriteIds()[minLen] - 1)) @TO@ MethodInvocation:Long.signum((a.getInvalidWriteIds()[minLen] - 1) - b.getHighWatermark()) @AT@ 3047 @LENGTH@ 79
---UPD MethodInvocation@@Long.signum(b.getHighWatermark() - (a.getInvalidWriteIds()[minLen] - 1)) @TO@ Long.signum((a.getInvalidWriteIds()[minLen] - 1) - b.getHighWatermark()) @AT@ 3054 @LENGTH@ 71
------UPD SimpleName@@MethodName:signum:[b.getHighWatermark() - (a.getInvalidWriteIds()[minLen] - 1)] @TO@ MethodName:signum:[(a.getInvalidWriteIds()[minLen] - 1) - b.getHighWatermark()] @AT@ 3059 @LENGTH@ 66
---------UPD InfixExpression@@b.getHighWatermark() - (a.getInvalidWriteIds()[minLen] - 1) @TO@ (a.getInvalidWriteIds()[minLen] - 1) - b.getHighWatermark() @AT@ 3066 @LENGTH@ 58
------------MOV MethodInvocation@@b.getHighWatermark() @TO@ InfixExpression@@b.getHighWatermark() - (a.getInvalidWriteIds()[minLen] - 1) @AT@ 3066 @LENGTH@ 20
------------DEL Operator@@- @AT@ 3086 @LENGTH@ 1
------------INS Operator@@- @TO@ InfixExpression@@b.getHighWatermark() - (a.getInvalidWriteIds()[minLen] - 1) @AT@ 3102 @LENGTH@ 1


UPD FieldDeclaration@@private, DataSource, [dataSource] @TO@ private, ApplicationContext, [context] @AT@ 2174 @LENGTH@ 30
---UPD SimpleType@@DataSource @TO@ ApplicationContext @AT@ 2182 @LENGTH@ 10
---UPD VariableDeclarationFragment@@dataSource @TO@ context @AT@ 2193 @LENGTH@ 10
------UPD SimpleName@@dataSource @TO@ context @AT@ 2193 @LENGTH@ 10


UPD ExpressionStatement@@MethodInvocation:bis.readBits(-1) @TO@ MethodInvocation:assertThrows(IOException.class,() -> bis.readBits(-1)) @AT@ 1266 @LENGTH@ 17
---INS MethodInvocation@@assertThrows(IOException.class,() -> bis.readBits(-1)) @TO@ ExpressionStatement@@MethodInvocation:bis.readBits(-1) @AT@ 1311 @LENGTH@ 55
------INS SimpleName@@MethodName:assertThrows:[IOException.class, () -> bis.readBits(-1)] @TO@ MethodInvocation@@assertThrows(IOException.class,() -> bis.readBits(-1)) @AT@ 1311 @LENGTH@ 55
---------INS TypeLiteral@@IOException.class @TO@ SimpleName@@MethodName:assertThrows:[IOException.class, () -> bis.readBits(-1)] @AT@ 1324 @LENGTH@ 17
---------INS LambdaExpression@@() -> bis.readBits(-1) @TO@ SimpleName@@MethodName:assertThrows:[IOException.class, () -> bis.readBits(-1)] @AT@ 1343 @LENGTH@ 22
------------MOV MethodInvocation@@bis.readBits(-1) @TO@ LambdaExpression@@() -> bis.readBits(-1) @AT@ 1266 @LENGTH@ 16


UPD FieldDeclaration@@private, static, final, String, [topCities[]=new String[]{"Tokyo","Mexico City","Mumbai","Sao Paulo","New York","Shanghai","Lagos","Los Angeles","Calcutta","Buenos Aires"}] @TO@ private, static, final, String, [topCities[]={"Tokyo","Mexico City","Mumbai","Sao Paulo","New York","Shanghai","Lagos","Los Angeles","Calcutta","Buenos Aires"}] @AT@ 1292 @LENGTH@ 265
---UPD VariableDeclarationFragment@@topCities[]=new String[]{"Tokyo","Mexico City","Mumbai","Sao Paulo","New York","Shanghai","Lagos","Los Angeles","Calcutta","Buenos Aires"} @TO@ topCities[]={"Tokyo","Mexico City","Mumbai","Sao Paulo","New York","Shanghai","Lagos","Los Angeles","Calcutta","Buenos Aires"} @AT@ 1320 @LENGTH@ 236
------DEL ArrayCreation@@new String[]{"Tokyo","Mexico City","Mumbai","Sao Paulo","New York","Shanghai","Lagos","Los Angeles","Calcutta","Buenos Aires"} @AT@ 1334 @LENGTH@ 222
---------DEL ArrayType@@String[] @AT@ 1338 @LENGTH@ 8
------------DEL SimpleType@@String @AT@ 1338 @LENGTH@ 6
---------DEL ArrayInitializer@@{"Tokyo","Mexico City","Mumbai","Sao Paulo","New York","Shanghai","Lagos","Los Angeles","Calcutta","Buenos Aires"} @AT@ 1347 @LENGTH@ 209
------INS ArrayInitializer@@{"Tokyo","Mexico City","Mumbai","Sao Paulo","New York","Shanghai","Lagos","Los Angeles","Calcutta","Buenos Aires"} @TO@ VariableDeclarationFragment@@topCities[]=new String[]{"Tokyo","Mexico City","Mumbai","Sao Paulo","New York","Shanghai","Lagos","Los Angeles","Calcutta","Buenos Aires"} @AT@ 1334 @LENGTH@ 209
---------MOV StringLiteral@@"Tokyo" @TO@ ArrayInitializer@@{"Tokyo","Mexico City","Mumbai","Sao Paulo","New York","Shanghai","Lagos","Los Angeles","Calcutta","Buenos Aires"} @AT@ 1357 @LENGTH@ 7
---------MOV StringLiteral@@"Mexico City" @TO@ ArrayInitializer@@{"Tokyo","Mexico City","Mumbai","Sao Paulo","New York","Shanghai","Lagos","Los Angeles","Calcutta","Buenos Aires"} @AT@ 1374 @LENGTH@ 13
---------MOV StringLiteral@@"Mumbai" @TO@ ArrayInitializer@@{"Tokyo","Mexico City","Mumbai","Sao Paulo","New York","Shanghai","Lagos","Los Angeles","Calcutta","Buenos Aires"} @AT@ 1397 @LENGTH@ 8
---------MOV StringLiteral@@"Sao Paulo" @TO@ ArrayInitializer@@{"Tokyo","Mexico City","Mumbai","Sao Paulo","New York","Shanghai","Lagos","Los Angeles","Calcutta","Buenos Aires"} @AT@ 1415 @LENGTH@ 11
---------MOV StringLiteral@@"New York" @TO@ ArrayInitializer@@{"Tokyo","Mexico City","Mumbai","Sao Paulo","New York","Shanghai","Lagos","Los Angeles","Calcutta","Buenos Aires"} @AT@ 1436 @LENGTH@ 10
---------MOV StringLiteral@@"Shanghai" @TO@ ArrayInitializer@@{"Tokyo","Mexico City","Mumbai","Sao Paulo","New York","Shanghai","Lagos","Los Angeles","Calcutta","Buenos Aires"} @AT@ 1456 @LENGTH@ 10
---------MOV StringLiteral@@"Lagos" @TO@ ArrayInitializer@@{"Tokyo","Mexico City","Mumbai","Sao Paulo","New York","Shanghai","Lagos","Los Angeles","Calcutta","Buenos Aires"} @AT@ 1476 @LENGTH@ 7
---------MOV StringLiteral@@"Los Angeles" @TO@ ArrayInitializer@@{"Tokyo","Mexico City","Mumbai","Sao Paulo","New York","Shanghai","Lagos","Los Angeles","Calcutta","Buenos Aires"} @AT@ 1493 @LENGTH@ 13
---------MOV StringLiteral@@"Calcutta" @TO@ ArrayInitializer@@{"Tokyo","Mexico City","Mumbai","Sao Paulo","New York","Shanghai","Lagos","Los Angeles","Calcutta","Buenos Aires"} @AT@ 1516 @LENGTH@ 10
---------MOV StringLiteral@@"Buenos Aires" @TO@ ArrayInitializer@@{"Tokyo","Mexico City","Mumbai","Sao Paulo","New York","Shanghai","Lagos","Los Angeles","Calcutta","Buenos Aires"} @AT@ 1536 @LENGTH@ 14


UPD ExpressionStatement@@MethodInvocation:war.addAsWebInfResource(EmptyAsset.INSTANCE,"beans.xml") @TO@ MethodInvocation:war.addAsWebInfResource(new StringAsset("<beans bean-discovery-mode=\"all\"></beans>"),"beans.xml") @AT@ 2060 @LENGTH@ 58
---UPD MethodInvocation@@war.addAsWebInfResource(EmptyAsset.INSTANCE,"beans.xml") @TO@ war.addAsWebInfResource(new StringAsset("<beans bean-discovery-mode=\"all\"></beans>"),"beans.xml") @AT@ 2060 @LENGTH@ 57
------UPD SimpleName@@MethodName:addAsWebInfResource:[EmptyAsset.INSTANCE, "beans.xml"] @TO@ MethodName:addAsWebInfResource:[new StringAsset("<beans bean-discovery-mode=\"all\"></beans>"), "beans.xml"] @AT@ 2064 @LENGTH@ 53
---------DEL QualifiedName@@EmptyAsset.INSTANCE @AT@ 2084 @LENGTH@ 19
------------DEL SimpleName@@EmptyAsset @AT@ 2084 @LENGTH@ 10
------------DEL SimpleName@@INSTANCE @AT@ 2095 @LENGTH@ 8
---------INS ClassInstanceCreation@@StringAsset["<beans bean-discovery-mode=\"all\"></beans>"] @TO@ SimpleName@@MethodName:addAsWebInfResource:[EmptyAsset.INSTANCE, "beans.xml"] @AT@ 2085 @LENGTH@ 62
------------INS New@@new @TO@ ClassInstanceCreation@@StringAsset["<beans bean-discovery-mode=\"all\"></beans>"] @AT@ 2085 @LENGTH@ 3
------------INS SimpleType@@StringAsset @TO@ ClassInstanceCreation@@StringAsset["<beans bean-discovery-mode=\"all\"></beans>"] @AT@ 2089 @LENGTH@ 11
------------INS StringLiteral@@"<beans bean-discovery-mode=\"all\"></beans>" @TO@ ClassInstanceCreation@@StringAsset["<beans bean-discovery-mode=\"all\"></beans>"] @AT@ 2101 @LENGTH@ 45


UPD ExpressionStatement@@MethodInvocation:serviceLoaderIterator.remove() @TO@ MethodInvocation:assertThrows(UnsupportedOperationException.class,() -> serviceLoaderIterator.remove()) @AT@ 2003 @LENGTH@ 31
---DEL MethodInvocation@@serviceLoaderIterator.remove() @AT@ 2003 @LENGTH@ 30
---INS MethodInvocation@@assertThrows(UnsupportedOperationException.class,() -> serviceLoaderIterator.remove()) @TO@ ExpressionStatement@@MethodInvocation:serviceLoaderIterator.remove() @AT@ 2098 @LENGTH@ 87
------INS SimpleName@@MethodName:assertThrows:[UnsupportedOperationException.class, () -> serviceLoaderIterator.remove()] @TO@ MethodInvocation@@assertThrows(UnsupportedOperationException.class,() -> serviceLoaderIterator.remove()) @AT@ 2098 @LENGTH@ 87
---------INS TypeLiteral@@UnsupportedOperationException.class @TO@ SimpleName@@MethodName:assertThrows:[UnsupportedOperationException.class, () -> serviceLoaderIterator.remove()] @AT@ 2111 @LENGTH@ 35
---------INS LambdaExpression@@() -> serviceLoaderIterator.remove() @TO@ SimpleName@@MethodName:assertThrows:[UnsupportedOperationException.class, () -> serviceLoaderIterator.remove()] @AT@ 2148 @LENGTH@ 36
------------INS MethodInvocation@@serviceLoaderIterator.remove() @TO@ LambdaExpression@@() -> serviceLoaderIterator.remove() @AT@ 2154 @LENGTH@ 30
---------------MOV SimpleName@@Name:serviceLoaderIterator @TO@ MethodInvocation@@serviceLoaderIterator.remove() @AT@ 2003 @LENGTH@ 21
---------------MOV SimpleName@@MethodName:remove:[] @TO@ MethodInvocation@@serviceLoaderIterator.remove() @AT@ 2025 @LENGTH@ 8


UPD VariableDeclarationStatement@@final Object[] els=new Object[]{"1","3","5","7","2","4","6"}; @TO@ final Object[] els={"1","3","5","7","2","4","6"}; @AT@ 3017 @LENGTH@ 70
---UPD VariableDeclarationFragment@@els=new Object[]{"1","3","5","7","2","4","6"} @TO@ els={"1","3","5","7","2","4","6"} @AT@ 3032 @LENGTH@ 54
------DEL ArrayCreation@@new Object[]{"1","3","5","7","2","4","6"} @AT@ 3038 @LENGTH@ 48
---------DEL ArrayType@@Object[] @AT@ 3042 @LENGTH@ 8
------------DEL SimpleType@@Object @AT@ 3042 @LENGTH@ 6
---------DEL ArrayInitializer@@{"1","3","5","7","2","4","6"} @AT@ 3051 @LENGTH@ 35
------INS ArrayInitializer@@{"1","3","5","7","2","4","6"} @TO@ VariableDeclarationFragment@@els=new Object[]{"1","3","5","7","2","4","6"} @AT@ 3038 @LENGTH@ 35
---------MOV StringLiteral@@"1" @TO@ ArrayInitializer@@{"1","3","5","7","2","4","6"} @AT@ 3052 @LENGTH@ 3
---------MOV StringLiteral@@"3" @TO@ ArrayInitializer@@{"1","3","5","7","2","4","6"} @AT@ 3057 @LENGTH@ 3
---------MOV StringLiteral@@"5" @TO@ ArrayInitializer@@{"1","3","5","7","2","4","6"} @AT@ 3062 @LENGTH@ 3
---------MOV StringLiteral@@"7" @TO@ ArrayInitializer@@{"1","3","5","7","2","4","6"} @AT@ 3067 @LENGTH@ 3
---------MOV StringLiteral@@"2" @TO@ ArrayInitializer@@{"1","3","5","7","2","4","6"} @AT@ 3072 @LENGTH@ 3
---------MOV StringLiteral@@"4" @TO@ ArrayInitializer@@{"1","3","5","7","2","4","6"} @AT@ 3077 @LENGTH@ 3
---------MOV StringLiteral@@"6" @TO@ ArrayInitializer@@{"1","3","5","7","2","4","6"} @AT@ 3082 @LENGTH@ 3


UPD ExpressionStatement@@MethodInvocation:s.prefill(new byte[]{1,2,3}) @TO@ MethodInvocation:assertThrows(IllegalArgumentException.class,() -> s.prefill(new byte[]{1,2,3})) @AT@ 2079 @LENGTH@ 34
---INS MethodInvocation@@assertThrows(IllegalArgumentException.class,() -> s.prefill(new byte[]{1,2,3})) @TO@ ExpressionStatement@@MethodInvocation:s.prefill(new byte[]{1,2,3}) @AT@ 2149 @LENGTH@ 83
------INS SimpleName@@MethodName:assertThrows:[IllegalArgumentException.class, () -> s.prefill(new byte[]{1,2,3})] @TO@ MethodInvocation@@assertThrows(IllegalArgumentException.class,() -> s.prefill(new byte[]{1,2,3})) @AT@ 2149 @LENGTH@ 83
---------INS TypeLiteral@@IllegalArgumentException.class @TO@ SimpleName@@MethodName:assertThrows:[IllegalArgumentException.class, () -> s.prefill(new byte[]{1,2,3})] @AT@ 2162 @LENGTH@ 30
---------INS LambdaExpression@@() -> s.prefill(new byte[]{1,2,3}) @TO@ SimpleName@@MethodName:assertThrows:[IllegalArgumentException.class, () -> s.prefill(new byte[]{1,2,3})] @AT@ 2194 @LENGTH@ 37
------------MOV MethodInvocation@@s.prefill(new byte[]{1,2,3}) @TO@ LambdaExpression@@() -> s.prefill(new byte[]{1,2,3}) @AT@ 2079 @LENGTH@ 33


UPD TypeDeclaration@@[public, abstract]SaveContextOnUpdateOrErrorResponseWrapper, OnCommittedResponseWrapper @TO@ [@Deprecated, public, abstract]SaveContextOnUpdateOrErrorResponseWrapper, OnCommittedResponseWrapper @AT@ 1696 @LENGTH@ 2308
---INS MarkerAnnotation@@@Deprecated @TO@ TypeDeclaration@@[public, abstract]SaveContextOnUpdateOrErrorResponseWrapper, OnCommittedResponseWrapper @AT@ 1841 @LENGTH@ 11


UPD FieldDeclaration@@CommandContext, [ctx=CommandContext.of(null,null,null)] @TO@ CommandContext, [ctx=CommandContext.of(null,null,null,null)] @AT@ 827 @LENGTH@ 57
---UPD VariableDeclarationFragment@@ctx=CommandContext.of(null,null,null) @TO@ ctx=CommandContext.of(null,null,null,null) @AT@ 842 @LENGTH@ 41
------UPD MethodInvocation@@CommandContext.of(null,null,null) @TO@ CommandContext.of(null,null,null,null) @AT@ 848 @LENGTH@ 35
---------UPD SimpleName@@MethodName:of:[null, null, null] @TO@ MethodName:of:[null, null, null, null] @AT@ 863 @LENGTH@ 20
------------INS NullLiteral@@null @TO@ SimpleName@@MethodName:of:[null, null, null] @AT@ 884 @LENGTH@ 4


UPD ExpressionStatement@@MethodInvocation:exchange.getOut().setBody(result) @TO@ MethodInvocation:exchange.getMessage().setBody(result) @AT@ 2289 @LENGTH@ 34
---UPD MethodInvocation@@exchange.getOut().setBody(result) @TO@ exchange.getMessage().setBody(result) @AT@ 2289 @LENGTH@ 33
------UPD MethodInvocation@@MethodName:getOut:[] @TO@ MethodName:getMessage:[] @AT@ 2289 @LENGTH@ 17


DEL IfStatement@@if (exchange.getIn().getHeader("setin") != null && exchange.getIn().getHeader("setin").equals("true")) {  exchange.getIn().setBody(doc);} else {  exchange.getOut().setBody(doc);} @AT@ 1778 @LENGTH@ 218
---DEL InfixExpression@@exchange.getIn().getHeader("setin") != null && exchange.getIn().getHeader("setin").equals("true") @AT@ 1782 @LENGTH@ 97
------DEL InfixExpression@@exchange.getIn().getHeader("setin") != null @AT@ 1782 @LENGTH@ 43
---------DEL MethodInvocation@@exchange.getIn().getHeader("setin") @AT@ 1782 @LENGTH@ 35
------------DEL MethodInvocation@@MethodName:getIn:[] @AT@ 1782 @LENGTH@ 16
------------DEL SimpleName@@Name:exchange @AT@ 1782 @LENGTH@ 8
------------DEL SimpleName@@MethodName:getHeader:["setin"] @AT@ 1799 @LENGTH@ 18
---------------DEL StringLiteral@@"setin" @AT@ 1809 @LENGTH@ 7
---------DEL Operator@@!= @AT@ 1817 @LENGTH@ 2
---------DEL NullLiteral@@null @AT@ 1821 @LENGTH@ 4
------DEL Operator@@&& @AT@ 1825 @LENGTH@ 2
------DEL MethodInvocation@@exchange.getIn().getHeader("setin").equals("true") @AT@ 1829 @LENGTH@ 50
---------DEL MethodInvocation@@MethodName:getHeader:["setin"] @AT@ 1829 @LENGTH@ 35
------------DEL StringLiteral@@"setin" @AT@ 1856 @LENGTH@ 7
---------DEL MethodInvocation@@MethodName:getIn:[] @AT@ 1829 @LENGTH@ 16
---------DEL SimpleName@@Name:exchange @AT@ 1829 @LENGTH@ 8
---------DEL SimpleName@@MethodName:equals:["true"] @AT@ 1865 @LENGTH@ 14
------------DEL StringLiteral@@"true" @AT@ 1872 @LENGTH@ 6
---DEL Block@@ThenBody:{  exchange.getIn().setBody(doc);} @AT@ 1881 @LENGTH@ 54
------DEL ExpressionStatement@@MethodInvocation:exchange.getIn().setBody(doc) @AT@ 1895 @LENGTH@ 30
---DEL Block@@ElseBody:{  exchange.getOut().setBody(doc);} @AT@ 1941 @LENGTH@ 55
------DEL ExpressionStatement@@MethodInvocation:exchange.getOut().setBody(doc) @AT@ 1955 @LENGTH@ 31
---------DEL MethodInvocation@@exchange.getOut().setBody(doc) @AT@ 1955 @LENGTH@ 30
------------DEL MethodInvocation@@MethodName:getOut:[] @AT@ 1955 @LENGTH@ 17
------------DEL SimpleName@@Name:exchange @AT@ 1955 @LENGTH@ 8
------------DEL SimpleName@@MethodName:setBody:[doc] @AT@ 1973 @LENGTH@ 12
---------------DEL SimpleName@@doc @AT@ 1981 @LENGTH@ 3


UPD ExpressionStatement@@MethodInvocation:properties.append("# " + GENERATED_MSG + NL) @TO@ MethodInvocation:properties.append("# ").append(GENERATED_MSG).append(NL) @AT@ 4778 @LENGTH@ 45
---UPD MethodInvocation@@properties.append("# " + GENERATED_MSG + NL) @TO@ properties.append("# ").append(GENERATED_MSG).append(NL) @AT@ 4778 @LENGTH@ 44
------INS MethodInvocation@@MethodName:append:[GENERATED_MSG] @TO@ MethodInvocation@@properties.append("# " + GENERATED_MSG + NL) @AT@ 4781 @LENGTH@ 45
---------INS SimpleName@@GENERATED_MSG @TO@ MethodInvocation@@MethodName:append:[GENERATED_MSG] @AT@ 4812 @LENGTH@ 13
------INS MethodInvocation@@MethodName:append:["# "] @TO@ MethodInvocation@@properties.append("# " + GENERATED_MSG + NL) @AT@ 4781 @LENGTH@ 23
---------INS StringLiteral@@"# " @TO@ MethodInvocation@@MethodName:append:["# "] @AT@ 4799 @LENGTH@ 4
------DEL SimpleName@@MethodName:append:["# " + GENERATED_MSG + NL] @AT@ 4789 @LENGTH@ 33
---------DEL InfixExpression@@"# " + GENERATED_MSG + NL @AT@ 4796 @LENGTH@ 25
------------DEL StringLiteral@@"# " @AT@ 4796 @LENGTH@ 4
------------DEL Operator@@+ @AT@ 4800 @LENGTH@ 1
------------DEL SimpleName@@GENERATED_MSG @AT@ 4803 @LENGTH@ 13
------------DEL SimpleName@@NL @AT@ 4819 @LENGTH@ 2
------INS SimpleName@@MethodName:append:[NL] @TO@ MethodInvocation@@properties.append("# " + GENERATED_MSG + NL) @AT@ 4827 @LENGTH@ 10
---------INS SimpleName@@NL @TO@ SimpleName@@MethodName:append:[NL] @AT@ 4834 @LENGTH@ 2


UPD CatchClause@@catch (Exception e) {  LOG.error("Caught exception when cleaning, unable to complete cleaning of " + ci + " "+ StringUtils.stringifyException(e));  ci.errorMessage=e.getMessage();  txnHandler.markFailed(ci);} @TO@ catch (Exception e) {  LOG.error("Caught exception when cleaning, unable to complete cleaning of " + ci + " "+ StringUtils.stringifyException(e));  ci.errorMessage=e.getMessage();  if (metricsEnabled) {    Metrics.getOrCreateCounter(MetricsConstants.COMPACTION_CLEANER_FAILURE_COUNTER).inc();  }  txnHandler.markFailed(ci);} @AT@ 13074 @LENGTH@ 241
---INS IfStatement@@if (metricsEnabled) {  Metrics.getOrCreateCounter(MetricsConstants.COMPACTION_CLEANER_FAILURE_COUNTER).inc();} @TO@ CatchClause@@catch (Exception e) {  LOG.error("Caught exception when cleaning, unable to complete cleaning of " + ci + " "+ StringUtils.stringifyException(e));  ci.errorMessage=e.getMessage();  txnHandler.markFailed(ci);} @AT@ 13604 @LENGTH@ 124
------INS SimpleName@@metricsEnabled @TO@ IfStatement@@if (metricsEnabled) {  Metrics.getOrCreateCounter(MetricsConstants.COMPACTION_CLEANER_FAILURE_COUNTER).inc();} @AT@ 13608 @LENGTH@ 14
------INS Block@@ThenBody:{  Metrics.getOrCreateCounter(MetricsConstants.COMPACTION_CLEANER_FAILURE_COUNTER).inc();} @TO@ IfStatement@@if (metricsEnabled) {  Metrics.getOrCreateCounter(MetricsConstants.COMPACTION_CLEANER_FAILURE_COUNTER).inc();} @AT@ 13624 @LENGTH@ 104
---------INS ExpressionStatement@@MethodInvocation:Metrics.getOrCreateCounter(MetricsConstants.COMPACTION_CLEANER_FAILURE_COUNTER).inc() @TO@ Block@@ThenBody:{  Metrics.getOrCreateCounter(MetricsConstants.COMPACTION_CLEANER_FAILURE_COUNTER).inc();} @AT@ 13634 @LENGTH@ 86
------------INS MethodInvocation@@Metrics.getOrCreateCounter(MetricsConstants.COMPACTION_CLEANER_FAILURE_COUNTER).inc() @TO@ ExpressionStatement@@MethodInvocation:Metrics.getOrCreateCounter(MetricsConstants.COMPACTION_CLEANER_FAILURE_COUNTER).inc() @AT@ 13634 @LENGTH@ 85
---------------INS MethodInvocation@@MethodName:getOrCreateCounter:[MetricsConstants.COMPACTION_CLEANER_FAILURE_COUNTER] @TO@ MethodInvocation@@Metrics.getOrCreateCounter(MetricsConstants.COMPACTION_CLEANER_FAILURE_COUNTER).inc() @AT@ 13634 @LENGTH@ 79
------------------INS QualifiedName@@MetricsConstants.COMPACTION_CLEANER_FAILURE_COUNTER @TO@ MethodInvocation@@MethodName:getOrCreateCounter:[MetricsConstants.COMPACTION_CLEANER_FAILURE_COUNTER] @AT@ 13661 @LENGTH@ 51
---------------------INS SimpleName@@MetricsConstants @TO@ QualifiedName@@MetricsConstants.COMPACTION_CLEANER_FAILURE_COUNTER @AT@ 13661 @LENGTH@ 16
---------------------INS SimpleName@@COMPACTION_CLEANER_FAILURE_COUNTER @TO@ QualifiedName@@MetricsConstants.COMPACTION_CLEANER_FAILURE_COUNTER @AT@ 13678 @LENGTH@ 34
---------------INS SimpleName@@Name:Metrics @TO@ MethodInvocation@@Metrics.getOrCreateCounter(MetricsConstants.COMPACTION_CLEANER_FAILURE_COUNTER).inc() @AT@ 13634 @LENGTH@ 7
---------------INS SimpleName@@MethodName:inc:[] @TO@ MethodInvocation@@Metrics.getOrCreateCounter(MetricsConstants.COMPACTION_CLEANER_FAILURE_COUNTER).inc() @AT@ 13714 @LENGTH@ 5


INS MethodDeclaration@@private, void, MethodName:writeFileByString, String body, File target, IOException,  @TO@ TypeDeclaration@@[public]FileOperations, [GenericFileOperations<File>] @AT@ 21199 @LENGTH@ 571
---INS Modifier@@private @TO@ MethodDeclaration@@private, void, MethodName:writeFileByString, String body, File target, IOException,  @AT@ 21199 @LENGTH@ 7
---INS PrimitiveType@@void @TO@ MethodDeclaration@@private, void, MethodName:writeFileByString, String body, File target, IOException,  @AT@ 21207 @LENGTH@ 4
---INS SimpleName@@MethodName:writeFileByString @TO@ MethodDeclaration@@private, void, MethodName:writeFileByString, String body, File target, IOException,  @AT@ 21212 @LENGTH@ 17
---INS SingleVariableDeclaration@@String body @TO@ MethodDeclaration@@private, void, MethodName:writeFileByString, String body, File target, IOException,  @AT@ 21230 @LENGTH@ 11
------INS SimpleType@@String @TO@ SingleVariableDeclaration@@String body @AT@ 21230 @LENGTH@ 6
------INS SimpleName@@body @TO@ SingleVariableDeclaration@@String body @AT@ 21237 @LENGTH@ 4
---INS SingleVariableDeclaration@@File target @TO@ MethodDeclaration@@private, void, MethodName:writeFileByString, String body, File target, IOException,  @AT@ 21243 @LENGTH@ 11
------INS SimpleType@@File @TO@ SingleVariableDeclaration@@File target @AT@ 21243 @LENGTH@ 4
------INS SimpleName@@target @TO@ SingleVariableDeclaration@@File target @AT@ 21248 @LENGTH@ 6
---INS SimpleType@@IOException @TO@ MethodDeclaration@@private, void, MethodName:writeFileByString, String body, File target, IOException,  @AT@ 21263 @LENGTH@ 11
---INS VariableDeclarationStatement@@boolean append=endpoint.getFileExist() == GenericFileExist.Append; @TO@ MethodDeclaration@@private, void, MethodName:writeFileByString, String body, File target, IOException,  @AT@ 21285 @LENGTH@ 68
------INS PrimitiveType@@boolean @TO@ VariableDeclarationStatement@@boolean append=endpoint.getFileExist() == GenericFileExist.Append; @AT@ 21285 @LENGTH@ 7
------INS VariableDeclarationFragment@@append=endpoint.getFileExist() == GenericFileExist.Append @TO@ VariableDeclarationStatement@@boolean append=endpoint.getFileExist() == GenericFileExist.Append; @AT@ 21293 @LENGTH@ 59
---------INS SimpleName@@append @TO@ VariableDeclarationFragment@@append=endpoint.getFileExist() == GenericFileExist.Append @AT@ 21293 @LENGTH@ 6
---------INS InfixExpression@@endpoint.getFileExist() == GenericFileExist.Append @TO@ VariableDeclarationFragment@@append=endpoint.getFileExist() == GenericFileExist.Append @AT@ 21302 @LENGTH@ 50
------------INS MethodInvocation@@endpoint.getFileExist() @TO@ InfixExpression@@endpoint.getFileExist() == GenericFileExist.Append @AT@ 21302 @LENGTH@ 23
---------------INS SimpleName@@Name:endpoint @TO@ MethodInvocation@@endpoint.getFileExist() @AT@ 21302 @LENGTH@ 8
---------------INS SimpleName@@MethodName:getFileExist:[] @TO@ MethodInvocation@@endpoint.getFileExist() @AT@ 21311 @LENGTH@ 14
------------INS Operator@@== @TO@ InfixExpression@@endpoint.getFileExist() == GenericFileExist.Append @AT@ 21325 @LENGTH@ 2
------------INS QualifiedName@@GenericFileExist.Append @TO@ InfixExpression@@endpoint.getFileExist() == GenericFileExist.Append @AT@ 21329 @LENGTH@ 23
---------------INS SimpleName@@GenericFileExist @TO@ QualifiedName@@GenericFileExist.Append @AT@ 21329 @LENGTH@ 16
---------------INS SimpleName@@Append @TO@ QualifiedName@@GenericFileExist.Append @AT@ 21346 @LENGTH@ 6
---INS ExpressionStatement@@MethodInvocation:Files.writeString(target.toPath(),body,StandardOpenOption.WRITE,append ? StandardOpenOption.APPEND : StandardOpenOption.TRUNCATE_EXISTING,StandardOpenOption.CREATE) @TO@ MethodDeclaration@@private, void, MethodName:writeFileByString, String body, File target, IOException,  @AT@ 21362 @LENGTH@ 185
------INS MethodInvocation@@Files.writeString(target.toPath(),body,StandardOpenOption.WRITE,append ? StandardOpenOption.APPEND : StandardOpenOption.TRUNCATE_EXISTING,StandardOpenOption.CREATE) @TO@ ExpressionStatement@@MethodInvocation:Files.writeString(target.toPath(),body,StandardOpenOption.WRITE,append ? StandardOpenOption.APPEND : StandardOpenOption.TRUNCATE_EXISTING,StandardOpenOption.CREATE) @AT@ 21362 @LENGTH@ 184
---------INS SimpleName@@Name:Files @TO@ MethodInvocation@@Files.writeString(target.toPath(),body,StandardOpenOption.WRITE,append ? StandardOpenOption.APPEND : StandardOpenOption.TRUNCATE_EXISTING,StandardOpenOption.CREATE) @AT@ 21362 @LENGTH@ 5
---------INS SimpleName@@MethodName:writeString:[target.toPath(), body, StandardOpenOption.WRITE, append ? StandardOpenOption.APPEND : StandardOpenOption.TRUNCATE_EXISTING, StandardOpenOption.CREATE] @TO@ MethodInvocation@@Files.writeString(target.toPath(),body,StandardOpenOption.WRITE,append ? StandardOpenOption.APPEND : StandardOpenOption.TRUNCATE_EXISTING,StandardOpenOption.CREATE) @AT@ 21368 @LENGTH@ 178
------------INS MethodInvocation@@target.toPath() @TO@ SimpleName@@MethodName:writeString:[target.toPath(), body, StandardOpenOption.WRITE, append ? StandardOpenOption.APPEND : StandardOpenOption.TRUNCATE_EXISTING, StandardOpenOption.CREATE] @AT@ 21380 @LENGTH@ 15
---------------INS SimpleName@@Name:target @TO@ MethodInvocation@@target.toPath() @AT@ 21380 @LENGTH@ 6
---------------INS SimpleName@@MethodName:toPath:[] @TO@ MethodInvocation@@target.toPath() @AT@ 21387 @LENGTH@ 8
------------INS SimpleName@@body @TO@ SimpleName@@MethodName:writeString:[target.toPath(), body, StandardOpenOption.WRITE, append ? StandardOpenOption.APPEND : StandardOpenOption.TRUNCATE_EXISTING, StandardOpenOption.CREATE] @AT@ 21397 @LENGTH@ 4
------------INS QualifiedName@@StandardOpenOption.WRITE @TO@ SimpleName@@MethodName:writeString:[target.toPath(), body, StandardOpenOption.WRITE, append ? StandardOpenOption.APPEND : StandardOpenOption.TRUNCATE_EXISTING, StandardOpenOption.CREATE] @AT@ 21403 @LENGTH@ 24
---------------INS SimpleName@@StandardOpenOption @TO@ QualifiedName@@StandardOpenOption.WRITE @AT@ 21403 @LENGTH@ 18
---------------INS SimpleName@@WRITE @TO@ QualifiedName@@StandardOpenOption.WRITE @AT@ 21422 @LENGTH@ 5
------------INS ConditionalExpression@@append ? StandardOpenOption.APPEND : StandardOpenOption.TRUNCATE_EXISTING @TO@ SimpleName@@MethodName:writeString:[target.toPath(), body, StandardOpenOption.WRITE, append ? StandardOpenOption.APPEND : StandardOpenOption.TRUNCATE_EXISTING, StandardOpenOption.CREATE] @AT@ 21445 @LENGTH@ 73
---------------INS SimpleName@@append @TO@ ConditionalExpression@@append ? StandardOpenOption.APPEND : StandardOpenOption.TRUNCATE_EXISTING @AT@ 21445 @LENGTH@ 6
---------------INS QualifiedName@@StandardOpenOption.APPEND @TO@ ConditionalExpression@@append ? StandardOpenOption.APPEND : StandardOpenOption.TRUNCATE_EXISTING @AT@ 21454 @LENGTH@ 25
------------------INS SimpleName@@StandardOpenOption @TO@ QualifiedName@@StandardOpenOption.APPEND @AT@ 21454 @LENGTH@ 18
------------------INS SimpleName@@APPEND @TO@ QualifiedName@@StandardOpenOption.APPEND @AT@ 21473 @LENGTH@ 6
---------------INS QualifiedName@@StandardOpenOption.TRUNCATE_EXISTING @TO@ ConditionalExpression@@append ? StandardOpenOption.APPEND : StandardOpenOption.TRUNCATE_EXISTING @AT@ 21482 @LENGTH@ 36
------------------INS SimpleName@@StandardOpenOption @TO@ QualifiedName@@StandardOpenOption.TRUNCATE_EXISTING @AT@ 21482 @LENGTH@ 18
------------------INS SimpleName@@TRUNCATE_EXISTING @TO@ QualifiedName@@StandardOpenOption.TRUNCATE_EXISTING @AT@ 21501 @LENGTH@ 17
------------INS QualifiedName@@StandardOpenOption.CREATE @TO@ SimpleName@@MethodName:writeString:[target.toPath(), body, StandardOpenOption.WRITE, append ? StandardOpenOption.APPEND : StandardOpenOption.TRUNCATE_EXISTING, StandardOpenOption.CREATE] @AT@ 21520 @LENGTH@ 25
---------------INS SimpleName@@StandardOpenOption @TO@ QualifiedName@@StandardOpenOption.CREATE @AT@ 21520 @LENGTH@ 18
---------------INS SimpleName@@CREATE @TO@ QualifiedName@@StandardOpenOption.CREATE @AT@ 21539 @LENGTH@ 6
---INS IfStatement@@if (append && endpoint.getAppendChars() != null) {  Files.writeString(target.toPath(),endpoint.getAppendChars(),StandardOpenOption.WRITE,StandardOpenOption.APPEND);} @TO@ MethodDeclaration@@private, void, MethodName:writeFileByString, String body, File target, IOException,  @AT@ 21556 @LENGTH@ 208
------INS InfixExpression@@append && endpoint.getAppendChars() != null @TO@ IfStatement@@if (append && endpoint.getAppendChars() != null) {  Files.writeString(target.toPath(),endpoint.getAppendChars(),StandardOpenOption.WRITE,StandardOpenOption.APPEND);} @AT@ 21560 @LENGTH@ 43
---------INS SimpleName@@append @TO@ InfixExpression@@append && endpoint.getAppendChars() != null @AT@ 21560 @LENGTH@ 6
---------INS Operator@@&& @TO@ InfixExpression@@append && endpoint.getAppendChars() != null @AT@ 21566 @LENGTH@ 2
---------INS InfixExpression@@endpoint.getAppendChars() != null @TO@ InfixExpression@@append && endpoint.getAppendChars() != null @AT@ 21570 @LENGTH@ 33
------------INS MethodInvocation@@endpoint.getAppendChars() @TO@ InfixExpression@@endpoint.getAppendChars() != null @AT@ 21570 @LENGTH@ 25
---------------INS SimpleName@@Name:endpoint @TO@ MethodInvocation@@endpoint.getAppendChars() @AT@ 21570 @LENGTH@ 8
---------------INS SimpleName@@MethodName:getAppendChars:[] @TO@ MethodInvocation@@endpoint.getAppendChars() @AT@ 21579 @LENGTH@ 16
------------INS Operator@@!= @TO@ InfixExpression@@endpoint.getAppendChars() != null @AT@ 21595 @LENGTH@ 2
------------INS NullLiteral@@null @TO@ InfixExpression@@endpoint.getAppendChars() != null @AT@ 21599 @LENGTH@ 4
------INS Block@@ThenBody:{  Files.writeString(target.toPath(),endpoint.getAppendChars(),StandardOpenOption.WRITE,StandardOpenOption.APPEND);} @TO@ IfStatement@@if (append && endpoint.getAppendChars() != null) {  Files.writeString(target.toPath(),endpoint.getAppendChars(),StandardOpenOption.WRITE,StandardOpenOption.APPEND);} @AT@ 21605 @LENGTH@ 159
---------INS ExpressionStatement@@MethodInvocation:Files.writeString(target.toPath(),endpoint.getAppendChars(),StandardOpenOption.WRITE,StandardOpenOption.APPEND) @TO@ Block@@ThenBody:{  Files.writeString(target.toPath(),endpoint.getAppendChars(),StandardOpenOption.WRITE,StandardOpenOption.APPEND);} @AT@ 21619 @LENGTH@ 135
------------INS MethodInvocation@@Files.writeString(target.toPath(),endpoint.getAppendChars(),StandardOpenOption.WRITE,StandardOpenOption.APPEND) @TO@ ExpressionStatement@@MethodInvocation:Files.writeString(target.toPath(),endpoint.getAppendChars(),StandardOpenOption.WRITE,StandardOpenOption.APPEND) @AT@ 21619 @LENGTH@ 134
---------------INS SimpleName@@Name:Files @TO@ MethodInvocation@@Files.writeString(target.toPath(),endpoint.getAppendChars(),StandardOpenOption.WRITE,StandardOpenOption.APPEND) @AT@ 21619 @LENGTH@ 5
---------------INS SimpleName@@MethodName:writeString:[target.toPath(), endpoint.getAppendChars(), StandardOpenOption.WRITE, StandardOpenOption.APPEND] @TO@ MethodInvocation@@Files.writeString(target.toPath(),endpoint.getAppendChars(),StandardOpenOption.WRITE,StandardOpenOption.APPEND) @AT@ 21625 @LENGTH@ 128
------------------INS MethodInvocation@@target.toPath() @TO@ SimpleName@@MethodName:writeString:[target.toPath(), endpoint.getAppendChars(), StandardOpenOption.WRITE, StandardOpenOption.APPEND] @AT@ 21637 @LENGTH@ 15
---------------------INS SimpleName@@Name:target @TO@ MethodInvocation@@target.toPath() @AT@ 21637 @LENGTH@ 6
---------------------INS SimpleName@@MethodName:toPath:[] @TO@ MethodInvocation@@target.toPath() @AT@ 21644 @LENGTH@ 8
------------------INS MethodInvocation@@endpoint.getAppendChars() @TO@ SimpleName@@MethodName:writeString:[target.toPath(), endpoint.getAppendChars(), StandardOpenOption.WRITE, StandardOpenOption.APPEND] @AT@ 21654 @LENGTH@ 25
---------------------INS SimpleName@@Name:endpoint @TO@ MethodInvocation@@endpoint.getAppendChars() @AT@ 21654 @LENGTH@ 8
---------------------INS SimpleName@@MethodName:getAppendChars:[] @TO@ MethodInvocation@@endpoint.getAppendChars() @AT@ 21663 @LENGTH@ 16
------------------INS QualifiedName@@StandardOpenOption.WRITE @TO@ SimpleName@@MethodName:writeString:[target.toPath(), endpoint.getAppendChars(), StandardOpenOption.WRITE, StandardOpenOption.APPEND] @AT@ 21681 @LENGTH@ 24
---------------------INS SimpleName@@StandardOpenOption @TO@ QualifiedName@@StandardOpenOption.WRITE @AT@ 21681 @LENGTH@ 18
---------------------INS SimpleName@@WRITE @TO@ QualifiedName@@StandardOpenOption.WRITE @AT@ 21700 @LENGTH@ 5
------------------INS QualifiedName@@StandardOpenOption.APPEND @TO@ SimpleName@@MethodName:writeString:[target.toPath(), endpoint.getAppendChars(), StandardOpenOption.WRITE, StandardOpenOption.APPEND] @AT@ 21727 @LENGTH@ 25
---------------------INS SimpleName@@StandardOpenOption @TO@ QualifiedName@@StandardOpenOption.APPEND @AT@ 21727 @LENGTH@ 18
---------------------INS SimpleName@@APPEND @TO@ QualifiedName@@StandardOpenOption.APPEND @AT@ 21746 @LENGTH@ 6


UPD LambdaExpression@@it -> {
  Page<Revision<Integer,License>> page=licenseRepository.findRevisions(license.id,PageRequest.of(0,10));
  Revisions<Integer,License> revisions=Revisions.of(page.getContent());
  assertThat(revisions.getLatestRevision()).isEqualTo(it);
}
 @TO@ it -> {
  Page<Revision<Integer,License>> page=licenseRepository.findRevisions(license.id,PageRequest.of(0,10));
  Revisions<Integer,License> revisions=Revisions.of(page.getContent());
  Revision<Integer,License> latestRevision=revisions.getLatestRevision();
  assertThat(latestRevision.getRequiredRevisionNumber()).isEqualTo(it.getRequiredRevisionNumber());
  assertThat(latestRevision.getEntity()).isEqualTo(it.getEntity());
}
 @AT@ 3015 @LENGTH@ 259
---INS VariableDeclarationStatement@@Revision<Integer,License> latestRevision=revisions.getLatestRevision(); @TO@ LambdaExpression@@it -> {
  Page<Revision<Integer,License>> page=licenseRepository.findRevisions(license.id,PageRequest.of(0,10));
  Revisions<Integer,License> revisions=Revisions.of(page.getContent());
  assertThat(revisions.getLatestRevision()).isEqualTo(it);
}
 @AT@ 3214 @LENGTH@ 74
------INS ParameterizedType@@Revision<Integer,License> @TO@ VariableDeclarationStatement@@Revision<Integer,License> latestRevision=revisions.getLatestRevision(); @AT@ 3214 @LENGTH@ 26
---------INS SimpleType@@Revision @TO@ ParameterizedType@@Revision<Integer,License> @AT@ 3214 @LENGTH@ 8
---------INS SimpleType@@Integer @TO@ ParameterizedType@@Revision<Integer,License> @AT@ 3223 @LENGTH@ 7
---------INS SimpleType@@License @TO@ ParameterizedType@@Revision<Integer,License> @AT@ 3232 @LENGTH@ 7
------INS VariableDeclarationFragment@@latestRevision=revisions.getLatestRevision() @TO@ VariableDeclarationStatement@@Revision<Integer,License> latestRevision=revisions.getLatestRevision(); @AT@ 3241 @LENGTH@ 46
---------INS SimpleName@@latestRevision @TO@ VariableDeclarationFragment@@latestRevision=revisions.getLatestRevision() @AT@ 3241 @LENGTH@ 14
---------INS MethodInvocation@@revisions.getLatestRevision() @TO@ VariableDeclarationFragment@@latestRevision=revisions.getLatestRevision() @AT@ 3258 @LENGTH@ 29
------------INS SimpleName@@Name:revisions @TO@ MethodInvocation@@revisions.getLatestRevision() @AT@ 3258 @LENGTH@ 9
------------INS SimpleName@@MethodName:getLatestRevision:[] @TO@ MethodInvocation@@revisions.getLatestRevision() @AT@ 3268 @LENGTH@ 19
---UPD ExpressionStatement@@MethodInvocation:assertThat(revisions.getLatestRevision()).isEqualTo(it) @TO@ MethodInvocation:assertThat(latestRevision.getEntity()).isEqualTo(it.getEntity()) @AT@ 3214 @LENGTH@ 56
------UPD MethodInvocation@@assertThat(revisions.getLatestRevision()).isEqualTo(it) @TO@ assertThat(latestRevision.getEntity()).isEqualTo(it.getEntity()) @AT@ 3214 @LENGTH@ 55
---------UPD MethodInvocation@@MethodName:assertThat:[revisions.getLatestRevision()] @TO@ MethodName:assertThat:[latestRevision.getEntity()] @AT@ 3214 @LENGTH@ 41
------------UPD MethodInvocation@@revisions.getLatestRevision() @TO@ latestRevision.getEntity() @AT@ 3225 @LENGTH@ 29
---------------UPD SimpleName@@Name:revisions @TO@ Name:latestRevision @AT@ 3225 @LENGTH@ 9
---------------UPD SimpleName@@MethodName:getLatestRevision:[] @TO@ MethodName:getEntity:[] @AT@ 3235 @LENGTH@ 19
---------UPD SimpleName@@MethodName:isEqualTo:[it] @TO@ MethodName:isEqualTo:[it.getEntity()] @AT@ 3256 @LENGTH@ 13
------------DEL SimpleName@@it @AT@ 3266 @LENGTH@ 2
------------INS MethodInvocation@@it.getEntity() @TO@ SimpleName@@MethodName:isEqualTo:[it] @AT@ 3443 @LENGTH@ 14
---------------INS SimpleName@@Name:it @TO@ MethodInvocation@@it.getEntity() @AT@ 3443 @LENGTH@ 2
---------------INS SimpleName@@MethodName:getEntity:[] @TO@ MethodInvocation@@it.getEntity() @AT@ 3446 @LENGTH@ 11
---INS ExpressionStatement@@MethodInvocation:assertThat(latestRevision.getRequiredRevisionNumber()).isEqualTo(it.getRequiredRevisionNumber()) @TO@ LambdaExpression@@it -> {
  Page<Revision<Integer,License>> page=licenseRepository.findRevisions(license.id,PageRequest.of(0,10));
  Revisions<Integer,License> revisions=Revisions.of(page.getContent());
  assertThat(revisions.getLatestRevision()).isEqualTo(it);
}
 @AT@ 3293 @LENGTH@ 97
------INS MethodInvocation@@assertThat(latestRevision.getRequiredRevisionNumber()).isEqualTo(it.getRequiredRevisionNumber()) @TO@ ExpressionStatement@@MethodInvocation:assertThat(latestRevision.getRequiredRevisionNumber()).isEqualTo(it.getRequiredRevisionNumber()) @AT@ 3293 @LENGTH@ 96
---------INS MethodInvocation@@MethodName:assertThat:[latestRevision.getRequiredRevisionNumber()] @TO@ MethodInvocation@@assertThat(latestRevision.getRequiredRevisionNumber()).isEqualTo(it.getRequiredRevisionNumber()) @AT@ 3293 @LENGTH@ 54
------------INS MethodInvocation@@latestRevision.getRequiredRevisionNumber() @TO@ MethodInvocation@@MethodName:assertThat:[latestRevision.getRequiredRevisionNumber()] @AT@ 3304 @LENGTH@ 42
---------------INS SimpleName@@Name:latestRevision @TO@ MethodInvocation@@latestRevision.getRequiredRevisionNumber() @AT@ 3304 @LENGTH@ 14
---------------INS SimpleName@@MethodName:getRequiredRevisionNumber:[] @TO@ MethodInvocation@@latestRevision.getRequiredRevisionNumber() @AT@ 3319 @LENGTH@ 27
---------INS SimpleName@@MethodName:isEqualTo:[it.getRequiredRevisionNumber()] @TO@ MethodInvocation@@assertThat(latestRevision.getRequiredRevisionNumber()).isEqualTo(it.getRequiredRevisionNumber()) @AT@ 3348 @LENGTH@ 41
------------INS MethodInvocation@@it.getRequiredRevisionNumber() @TO@ SimpleName@@MethodName:isEqualTo:[it.getRequiredRevisionNumber()] @AT@ 3358 @LENGTH@ 30
---------------INS SimpleName@@Name:it @TO@ MethodInvocation@@it.getRequiredRevisionNumber() @AT@ 3358 @LENGTH@ 2
---------------INS SimpleName@@MethodName:getRequiredRevisionNumber:[] @TO@ MethodInvocation@@it.getRequiredRevisionNumber() @AT@ 3361 @LENGTH@ 27


UPD IfStatement@@if (sendReply && exchange.getPattern().isOutCapable()) {  if (exchange.hasOut()) {    body=exchange.getOut();  } else {    body=exchange.getIn();  }  cause=null;} @TO@ if (sendReply && exchange.getPattern().isOutCapable()) {  body=exchange.getMessage();  cause=null;} @AT@ 18461 @LENGTH@ 303
---DEL Block@@ThenBody:{  if (exchange.hasOut()) {    body=exchange.getOut();  } else {    body=exchange.getIn();  }  cause=null;} @AT@ 18516 @LENGTH@ 248
------DEL IfStatement@@if (exchange.hasOut()) {  body=exchange.getOut();} else {  body=exchange.getIn();} @AT@ 18538 @LENGTH@ 174
---------DEL MethodInvocation@@exchange.hasOut() @AT@ 18542 @LENGTH@ 17
------------DEL SimpleName@@Name:exchange @AT@ 18542 @LENGTH@ 8
------------DEL SimpleName@@MethodName:hasOut:[] @AT@ 18551 @LENGTH@ 8
---------DEL Block@@ElseBody:{  body=exchange.getIn();} @AT@ 18640 @LENGTH@ 72
------------DEL ExpressionStatement@@Assignment:body=exchange.getIn() @AT@ 18666 @LENGTH@ 24
---------------DEL Assignment@@body=exchange.getIn() @AT@ 18666 @LENGTH@ 23
------------------DEL SimpleName@@body @AT@ 18666 @LENGTH@ 4
------------------DEL Operator@@= @AT@ 18670 @LENGTH@ 1
------------------DEL MethodInvocation@@exchange.getIn() @AT@ 18673 @LENGTH@ 16
---------------------DEL SimpleName@@Name:exchange @AT@ 18673 @LENGTH@ 8
---------------------DEL SimpleName@@MethodName:getIn:[] @AT@ 18682 @LENGTH@ 7
---MOV Block@@ThenBody:{  body=exchange.getOut();} @TO@ IfStatement@@if (sendReply && exchange.getPattern().isOutCapable()) {  if (exchange.hasOut()) {    body=exchange.getOut();  } else {    body=exchange.getIn();  }  cause=null;} @AT@ 18561 @LENGTH@ 73
------UPD ExpressionStatement@@Assignment:body=exchange.getOut() @TO@ Assignment:body=exchange.getMessage() @AT@ 18587 @LENGTH@ 25
---------UPD Assignment@@body=exchange.getOut() @TO@ body=exchange.getMessage() @AT@ 18587 @LENGTH@ 24
------------UPD MethodInvocation@@exchange.getOut() @TO@ exchange.getMessage() @AT@ 18594 @LENGTH@ 17
---------------UPD SimpleName@@MethodName:getOut:[] @TO@ MethodName:getMessage:[] @AT@ 18603 @LENGTH@ 8
------MOV ExpressionStatement@@Assignment:cause=null @TO@ Block@@ThenBody:{  body=exchange.getOut();} @AT@ 18733 @LENGTH@ 13


UPD TryStatement@@try (InputStream resourceAsStream=org.apache.camel.util.ObjectHelper.loadResourceAsStream(pomProps)){  props.load(resourceAsStream);  return props.getProperty("version",UNKNOWN_VERSION);} catch (Exception e) {  LOG.debug("Could not find version for Jira Rest Java Client maven artifact {}:{}. Error: {}",groupId,artifactId,e.getMessage());  return UNKNOWN_VERSION;} @TO@ try (InputStream resourceAsStream=org.apache.camel.util.ObjectHelper.loadResourceAsStream(pomProps,OAuthAsynchronousHttpClientFactory.class.getClassLoader())){  props.load(resourceAsStream);  return props.getProperty("version",UNKNOWN_VERSION);} catch (Exception e) {  LOG.debug("Could not find version for Jira Rest Java Client maven artifact {}:{}. Error: {}",groupId,artifactId,e.getMessage());  return UNKNOWN_VERSION;} @AT@ 5487 @LENGTH@ 482
---UPD VariableDeclarationExpression@@InputStream resourceAsStream=org.apache.camel.util.ObjectHelper.loadResourceAsStream(pomProps) @TO@ InputStream resourceAsStream=org.apache.camel.util.ObjectHelper.loadResourceAsStream(pomProps,OAuthAsynchronousHttpClientFactory.class.getClassLoader()) @AT@ 5492 @LENGTH@ 96
------UPD VariableDeclarationFragment@@resourceAsStream=org.apache.camel.util.ObjectHelper.loadResourceAsStream(pomProps) @TO@ resourceAsStream=org.apache.camel.util.ObjectHelper.loadResourceAsStream(pomProps,OAuthAsynchronousHttpClientFactory.class.getClassLoader()) @AT@ 5504 @LENGTH@ 84
---------UPD MethodInvocation@@org.apache.camel.util.ObjectHelper.loadResourceAsStream(pomProps) @TO@ org.apache.camel.util.ObjectHelper.loadResourceAsStream(pomProps,OAuthAsynchronousHttpClientFactory.class.getClassLoader()) @AT@ 5523 @LENGTH@ 65
------------UPD SimpleName@@MethodName:loadResourceAsStream:[pomProps] @TO@ MethodName:loadResourceAsStream:[pomProps, OAuthAsynchronousHttpClientFactory.class.getClassLoader()] @AT@ 5558 @LENGTH@ 30
---------------INS MethodInvocation@@OAuthAsynchronousHttpClientFactory.class.getClassLoader() @TO@ SimpleName@@MethodName:loadResourceAsStream:[pomProps] @AT@ 5609 @LENGTH@ 57
------------------INS TypeLiteral@@OAuthAsynchronousHttpClientFactory.class @TO@ MethodInvocation@@OAuthAsynchronousHttpClientFactory.class.getClassLoader() @AT@ 5609 @LENGTH@ 40
------------------INS SimpleName@@MethodName:getClassLoader:[] @TO@ MethodInvocation@@OAuthAsynchronousHttpClientFactory.class.getClassLoader() @AT@ 5650 @LENGTH@ 16


UPD ExpressionStatement@@MethodInvocation:context.exchange.setOut(out) @TO@ MethodInvocation:context.exchange.setMessage(out) @AT@ 6378 @LENGTH@ 29
---UPD MethodInvocation@@context.exchange.setOut(out) @TO@ context.exchange.setMessage(out) @AT@ 6378 @LENGTH@ 28
------UPD SimpleName@@MethodName:setOut:[out] @TO@ MethodName:setMessage:[out] @AT@ 6395 @LENGTH@ 11


UPD VariableDeclarationStatement@@Optional<E> entity=persistentEntities.get(ClassTypeInformation.from(type)); @TO@ TypeInformation<?> typeInformation=ClassTypeInformation.from(type); @AT@ 7903 @LENGTH@ 77
---UPD ParameterizedType@@Optional<E> @TO@ TypeInformation<?> @AT@ 7903 @LENGTH@ 11
------UPD SimpleType@@Optional @TO@ TypeInformation @AT@ 7903 @LENGTH@ 8
------DEL SimpleType@@E @AT@ 7912 @LENGTH@ 1
------INS WildcardType@@? @TO@ ParameterizedType@@Optional<E> @AT@ 7919 @LENGTH@ 1
---UPD VariableDeclarationFragment@@entity=persistentEntities.get(ClassTypeInformation.from(type)) @TO@ typeInformation=ClassTypeInformation.from(type) @AT@ 7915 @LENGTH@ 64
------DEL SimpleName@@entity @AT@ 7915 @LENGTH@ 6
------INS SimpleName@@typeInformation @TO@ VariableDeclarationFragment@@entity=persistentEntities.get(ClassTypeInformation.from(type)) @AT@ 7922 @LENGTH@ 15
------DEL MethodInvocation@@persistentEntities.get(ClassTypeInformation.from(type)) @AT@ 7924 @LENGTH@ 55
---------DEL SimpleName@@Name:persistentEntities @AT@ 7924 @LENGTH@ 18
---------DEL SimpleName@@MethodName:get:[ClassTypeInformation.from(type)] @AT@ 7943 @LENGTH@ 36
------MOV MethodInvocation@@ClassTypeInformation.from(type) @TO@ VariableDeclarationFragment@@entity=persistentEntities.get(ClassTypeInformation.from(type)) @AT@ 7947 @LENGTH@ 31


UPD VariableDeclarationStatement@@Message out=exchange.getOut(); @TO@ Message out=exchange.getMessage(); @AT@ 5909 @LENGTH@ 32
---UPD VariableDeclarationFragment@@out=exchange.getOut() @TO@ out=exchange.getMessage() @AT@ 5917 @LENGTH@ 23
------UPD MethodInvocation@@exchange.getOut() @TO@ exchange.getMessage() @AT@ 5923 @LENGTH@ 17
---------UPD SimpleName@@MethodName:getOut:[] @TO@ MethodName:getMessage:[] @AT@ 5932 @LENGTH@ 8


INS IfStatement@@if (!configuration.isUseDefaultCredentialsProvider() && configuration.getAmazonSQSClient() == null && (configuration.getAccessKey() == null || configuration.getSecretKey() == null)) {  throw new IllegalArgumentException("AmazonSQSClient or accessKey and secretKey must be specified.");} @TO@ MethodDeclaration@@protected, Endpoint, MethodName:createEndpoint, String uri, String remaining, Map<String,Object> parameters, Exception,  @AT@ 2969 @LENGTH@ 322
---INS InfixExpression@@!configuration.isUseDefaultCredentialsProvider() && configuration.getAmazonSQSClient() == null && (configuration.getAccessKey() == null || configuration.getSecretKey() == null) @TO@ IfStatement@@if (!configuration.isUseDefaultCredentialsProvider() && configuration.getAmazonSQSClient() == null && (configuration.getAccessKey() == null || configuration.getSecretKey() == null)) {  throw new IllegalArgumentException("AmazonSQSClient or accessKey and secretKey must be specified.");} @AT@ 2973 @LENGTH@ 192
------INS InfixExpression@@!configuration.isUseDefaultCredentialsProvider() && configuration.getAmazonSQSClient() == null @TO@ InfixExpression@@!configuration.isUseDefaultCredentialsProvider() && configuration.getAmazonSQSClient() == null && (configuration.getAccessKey() == null || configuration.getSecretKey() == null) @AT@ 2973 @LENGTH@ 94
---------INS PrefixExpression@@!configuration.isUseDefaultCredentialsProvider() @TO@ InfixExpression@@!configuration.isUseDefaultCredentialsProvider() && configuration.getAmazonSQSClient() == null @AT@ 2973 @LENGTH@ 48
------------INS Operator@@! @TO@ PrefixExpression@@!configuration.isUseDefaultCredentialsProvider() @AT@ 2973 @LENGTH@ 1
------------INS MethodInvocation@@configuration.isUseDefaultCredentialsProvider() @TO@ PrefixExpression@@!configuration.isUseDefaultCredentialsProvider() @AT@ 2974 @LENGTH@ 47
---------------INS SimpleName@@Name:configuration @TO@ MethodInvocation@@configuration.isUseDefaultCredentialsProvider() @AT@ 2974 @LENGTH@ 13
---------------INS SimpleName@@MethodName:isUseDefaultCredentialsProvider:[] @TO@ MethodInvocation@@configuration.isUseDefaultCredentialsProvider() @AT@ 2988 @LENGTH@ 33
---------INS Operator@@&& @TO@ InfixExpression@@!configuration.isUseDefaultCredentialsProvider() && configuration.getAmazonSQSClient() == null @AT@ 3021 @LENGTH@ 2
---------INS InfixExpression@@configuration.getAmazonSQSClient() == null @TO@ InfixExpression@@!configuration.isUseDefaultCredentialsProvider() && configuration.getAmazonSQSClient() == null @AT@ 3025 @LENGTH@ 42
------------INS MethodInvocation@@configuration.getAmazonSQSClient() @TO@ InfixExpression@@configuration.getAmazonSQSClient() == null @AT@ 3025 @LENGTH@ 34
---------------INS SimpleName@@Name:configuration @TO@ MethodInvocation@@configuration.getAmazonSQSClient() @AT@ 3025 @LENGTH@ 13
---------------INS SimpleName@@MethodName:getAmazonSQSClient:[] @TO@ MethodInvocation@@configuration.getAmazonSQSClient() @AT@ 3039 @LENGTH@ 20
------------INS Operator@@== @TO@ InfixExpression@@configuration.getAmazonSQSClient() == null @AT@ 3059 @LENGTH@ 2
------------INS NullLiteral@@null @TO@ InfixExpression@@configuration.getAmazonSQSClient() == null @AT@ 3063 @LENGTH@ 4
------INS Operator@@&& @TO@ InfixExpression@@!configuration.isUseDefaultCredentialsProvider() && configuration.getAmazonSQSClient() == null && (configuration.getAccessKey() == null || configuration.getSecretKey() == null) @AT@ 3067 @LENGTH@ 2
------INS ParenthesizedExpression@@(configuration.getAccessKey() == null || configuration.getSecretKey() == null) @TO@ InfixExpression@@!configuration.isUseDefaultCredentialsProvider() && configuration.getAmazonSQSClient() == null && (configuration.getAccessKey() == null || configuration.getSecretKey() == null) @AT@ 3087 @LENGTH@ 78
---------INS InfixExpression@@configuration.getAccessKey() == null || configuration.getSecretKey() == null @TO@ ParenthesizedExpression@@(configuration.getAccessKey() == null || configuration.getSecretKey() == null) @AT@ 3088 @LENGTH@ 76
------------INS InfixExpression@@configuration.getAccessKey() == null @TO@ InfixExpression@@configuration.getAccessKey() == null || configuration.getSecretKey() == null @AT@ 3088 @LENGTH@ 36
---------------INS MethodInvocation@@configuration.getAccessKey() @TO@ InfixExpression@@configuration.getAccessKey() == null @AT@ 3088 @LENGTH@ 28
------------------INS SimpleName@@Name:configuration @TO@ MethodInvocation@@configuration.getAccessKey() @AT@ 3088 @LENGTH@ 13
------------------INS SimpleName@@MethodName:getAccessKey:[] @TO@ MethodInvocation@@configuration.getAccessKey() @AT@ 3102 @LENGTH@ 14
---------------INS Operator@@== @TO@ InfixExpression@@configuration.getAccessKey() == null @AT@ 3116 @LENGTH@ 2
---------------INS NullLiteral@@null @TO@ InfixExpression@@configuration.getAccessKey() == null @AT@ 3120 @LENGTH@ 4
------------INS Operator@@|| @TO@ InfixExpression@@configuration.getAccessKey() == null || configuration.getSecretKey() == null @AT@ 3124 @LENGTH@ 2
------------INS InfixExpression@@configuration.getSecretKey() == null @TO@ InfixExpression@@configuration.getAccessKey() == null || configuration.getSecretKey() == null @AT@ 3128 @LENGTH@ 36
---------------INS MethodInvocation@@configuration.getSecretKey() @TO@ InfixExpression@@configuration.getSecretKey() == null @AT@ 3128 @LENGTH@ 28
------------------INS SimpleName@@Name:configuration @TO@ MethodInvocation@@configuration.getSecretKey() @AT@ 3128 @LENGTH@ 13
------------------INS SimpleName@@MethodName:getSecretKey:[] @TO@ MethodInvocation@@configuration.getSecretKey() @AT@ 3142 @LENGTH@ 14
---------------INS Operator@@== @TO@ InfixExpression@@configuration.getSecretKey() == null @AT@ 3156 @LENGTH@ 2
---------------INS NullLiteral@@null @TO@ InfixExpression@@configuration.getSecretKey() == null @AT@ 3160 @LENGTH@ 4
---INS Block@@ThenBody:{  throw new IllegalArgumentException("AmazonSQSClient or accessKey and secretKey must be specified.");} @TO@ IfStatement@@if (!configuration.isUseDefaultCredentialsProvider() && configuration.getAmazonSQSClient() == null && (configuration.getAccessKey() == null || configuration.getSecretKey() == null)) {  throw new IllegalArgumentException("AmazonSQSClient or accessKey and secretKey must be specified.");} @AT@ 3167 @LENGTH@ 124
------INS ThrowStatement@@ClassInstanceCreation:new IllegalArgumentException("AmazonSQSClient or accessKey and secretKey must be specified.") @TO@ Block@@ThenBody:{  throw new IllegalArgumentException("AmazonSQSClient or accessKey and secretKey must be specified.");} @AT@ 3181 @LENGTH@ 100
---------INS ClassInstanceCreation@@IllegalArgumentException["AmazonSQSClient or accessKey and secretKey must be specified."] @TO@ ThrowStatement@@ClassInstanceCreation:new IllegalArgumentException("AmazonSQSClient or accessKey and secretKey must be specified.") @AT@ 3187 @LENGTH@ 93
------------INS New@@new @TO@ ClassInstanceCreation@@IllegalArgumentException["AmazonSQSClient or accessKey and secretKey must be specified."] @AT@ 3187 @LENGTH@ 3
------------INS SimpleType@@IllegalArgumentException @TO@ ClassInstanceCreation@@IllegalArgumentException["AmazonSQSClient or accessKey and secretKey must be specified."] @AT@ 3191 @LENGTH@ 24
------------INS StringLiteral@@"AmazonSQSClient or accessKey and secretKey must be specified." @TO@ ClassInstanceCreation@@IllegalArgumentException["AmazonSQSClient or accessKey and secretKey must be specified."] @AT@ 3216 @LENGTH@ 63


UPD Block@@ThenBody:{  String variable=matcher.matches() ? matcher.group(VARIABLE_NAME_GROUP_INDEX) : null;  boolean useVariable=StringUtils.hasText(variable) && !variable.startsWith(" new") && !variable.startsWith("count(")&& !variable.contains(",")&& !variable.contains("*");  String complexCountValue=matcher.matches() && StringUtils.hasText(matcher.group(COMPLEX_COUNT_FIRST_INDEX)) ? COMPLEX_COUNT_VALUE : COMPLEX_COUNT_LAST_VALUE;  String replacement=useVariable ? SIMPLE_COUNT_VALUE : complexCountValue;  countQuery=matcher.replaceFirst(String.format(COUNT_REPLACEMENT_TEMPLATE,replacement));} @TO@ ThenBody:{  String variable=matcher.matches() ? matcher.group(VARIABLE_NAME_GROUP_INDEX) : null;  boolean useVariable=StringUtils.hasText(variable) && !variable.startsWith(" new") && !variable.startsWith("count(")&& !variable.contains(",");  String complexCountValue=matcher.matches() && StringUtils.hasText(matcher.group(COMPLEX_COUNT_FIRST_INDEX)) ? COMPLEX_COUNT_VALUE : COMPLEX_COUNT_LAST_VALUE;  String replacement=useVariable ? SIMPLE_COUNT_VALUE : complexCountValue;  String alias=QueryUtils.detectAlias(originalQuery);  if ("*".equals(variable) && alias != null) {    replacement=alias;  }  countQuery=matcher.replaceFirst(String.format(COUNT_REPLACEMENT_TEMPLATE,replacement));} @AT@ 18278 @LENGTH@ 651
---UPD VariableDeclarationStatement@@boolean useVariable=StringUtils.hasText(variable) && !variable.startsWith(" new") && !variable.startsWith("count(")&& !variable.contains(",")&& !variable.contains("*"); @TO@ boolean useVariable=StringUtils.hasText(variable) && !variable.startsWith(" new") && !variable.startsWith("count(")&& !variable.contains(","); @AT@ 18374 @LENGTH@ 204
------UPD VariableDeclarationFragment@@useVariable=StringUtils.hasText(variable) && !variable.startsWith(" new") && !variable.startsWith("count(")&& !variable.contains(",")&& !variable.contains("*") @TO@ useVariable=StringUtils.hasText(variable) && !variable.startsWith(" new") && !variable.startsWith("count(")&& !variable.contains(",") @AT@ 18382 @LENGTH@ 195
---------UPD InfixExpression@@StringUtils.hasText(variable) && !variable.startsWith(" new") && !variable.startsWith("count(")&& !variable.contains(",")&& !variable.contains("*") @TO@ StringUtils.hasText(variable) && !variable.startsWith(" new") && !variable.startsWith("count(")&& !variable.contains(",") @AT@ 18396 @LENGTH@ 181
------------DEL PrefixExpression@@!variable.contains("*") @AT@ 18554 @LENGTH@ 23
---------------DEL Operator@@! @AT@ 18554 @LENGTH@ 1
---------------DEL MethodInvocation@@variable.contains("*") @AT@ 18555 @LENGTH@ 22
------------------DEL SimpleName@@Name:variable @AT@ 18555 @LENGTH@ 8
------------------DEL SimpleName@@MethodName:contains:["*"] @AT@ 18564 @LENGTH@ 13
---------------------DEL StringLiteral@@"*" @AT@ 18573 @LENGTH@ 3
---INS VariableDeclarationStatement@@String alias=QueryUtils.detectAlias(originalQuery); @TO@ Block@@ThenBody:{  String variable=matcher.matches() ? matcher.group(VARIABLE_NAME_GROUP_INDEX) : null;  boolean useVariable=StringUtils.hasText(variable) && !variable.startsWith(" new") && !variable.startsWith("count(")&& !variable.contains(",")&& !variable.contains("*");  String complexCountValue=matcher.matches() && StringUtils.hasText(matcher.group(COMPLEX_COUNT_FIRST_INDEX)) ? COMPLEX_COUNT_VALUE : COMPLEX_COUNT_LAST_VALUE;  String replacement=useVariable ? SIMPLE_COUNT_VALUE : complexCountValue;  countQuery=matcher.replaceFirst(String.format(COUNT_REPLACEMENT_TEMPLATE,replacement));} @AT@ 18801 @LENGTH@ 53
------INS SimpleType@@String @TO@ VariableDeclarationStatement@@String alias=QueryUtils.detectAlias(originalQuery); @AT@ 18801 @LENGTH@ 6
------INS VariableDeclarationFragment@@alias=QueryUtils.detectAlias(originalQuery) @TO@ VariableDeclarationStatement@@String alias=QueryUtils.detectAlias(originalQuery); @AT@ 18808 @LENGTH@ 45
---------INS SimpleName@@alias @TO@ VariableDeclarationFragment@@alias=QueryUtils.detectAlias(originalQuery) @AT@ 18808 @LENGTH@ 5
---------INS MethodInvocation@@QueryUtils.detectAlias(originalQuery) @TO@ VariableDeclarationFragment@@alias=QueryUtils.detectAlias(originalQuery) @AT@ 18816 @LENGTH@ 37
------------INS SimpleName@@Name:QueryUtils @TO@ MethodInvocation@@QueryUtils.detectAlias(originalQuery) @AT@ 18816 @LENGTH@ 10
------------INS SimpleName@@MethodName:detectAlias:[originalQuery] @TO@ MethodInvocation@@QueryUtils.detectAlias(originalQuery) @AT@ 18827 @LENGTH@ 26
---------------INS SimpleName@@originalQuery @TO@ SimpleName@@MethodName:detectAlias:[originalQuery] @AT@ 18839 @LENGTH@ 13
---INS IfStatement@@if ("*".equals(variable) && alias != null) {  replacement=alias;} @TO@ Block@@ThenBody:{  String variable=matcher.matches() ? matcher.group(VARIABLE_NAME_GROUP_INDEX) : null;  boolean useVariable=StringUtils.hasText(variable) && !variable.startsWith(" new") && !variable.startsWith("count(")&& !variable.contains(",")&& !variable.contains("*");  String complexCountValue=matcher.matches() && StringUtils.hasText(matcher.group(COMPLEX_COUNT_FIRST_INDEX)) ? COMPLEX_COUNT_VALUE : COMPLEX_COUNT_LAST_VALUE;  String replacement=useVariable ? SIMPLE_COUNT_VALUE : complexCountValue;  countQuery=matcher.replaceFirst(String.format(COUNT_REPLACEMENT_TEMPLATE,replacement));} @AT@ 18858 @LENGTH@ 73
------INS InfixExpression@@"*".equals(variable) && alias != null @TO@ IfStatement@@if ("*".equals(variable) && alias != null) {  replacement=alias;} @AT@ 18861 @LENGTH@ 37
---------INS MethodInvocation@@"*".equals(variable) @TO@ InfixExpression@@"*".equals(variable) && alias != null @AT@ 18861 @LENGTH@ 20
------------INS StringLiteral@@"*" @TO@ MethodInvocation@@"*".equals(variable) @AT@ 18861 @LENGTH@ 3
------------INS SimpleName@@MethodName:equals:[variable] @TO@ MethodInvocation@@"*".equals(variable) @AT@ 18865 @LENGTH@ 16
---------------INS SimpleName@@variable @TO@ SimpleName@@MethodName:equals:[variable] @AT@ 18872 @LENGTH@ 8
---------INS Operator@@&& @TO@ InfixExpression@@"*".equals(variable) && alias != null @AT@ 18881 @LENGTH@ 2
---------INS InfixExpression@@alias != null @TO@ InfixExpression@@"*".equals(variable) && alias != null @AT@ 18885 @LENGTH@ 13
------------INS SimpleName@@alias @TO@ InfixExpression@@alias != null @AT@ 18885 @LENGTH@ 5
------------INS Operator@@!= @TO@ InfixExpression@@alias != null @AT@ 18890 @LENGTH@ 2
------------INS NullLiteral@@null @TO@ InfixExpression@@alias != null @AT@ 18894 @LENGTH@ 4
------INS Block@@ThenBody:{  replacement=alias;} @TO@ IfStatement@@if ("*".equals(variable) && alias != null) {  replacement=alias;} @AT@ 18900 @LENGTH@ 31
---------INS ExpressionStatement@@Assignment:replacement=alias @TO@ Block@@ThenBody:{  replacement=alias;} @AT@ 18906 @LENGTH@ 20
------------INS Assignment@@replacement=alias @TO@ ExpressionStatement@@Assignment:replacement=alias @AT@ 18906 @LENGTH@ 19
---------------INS SimpleName@@replacement @TO@ Assignment@@replacement=alias @AT@ 18906 @LENGTH@ 11
---------------INS Operator@@= @TO@ Assignment@@replacement=alias @AT@ 18917 @LENGTH@ 1
---------------INS SimpleName@@alias @TO@ Assignment@@replacement=alias @AT@ 18920 @LENGTH@ 5


UPD TryStatement@@try (Transaction transaction=driver.session().beginTransaction()){  long numberOfRelations=transaction.run(("MATCH (t:%s) WHERE id(t) = $id RETURN size((t)-->(:Pet)) as numberOfRelations").formatted(labelOfTestSubject),Values.parameters("id",newPerson.getId())).single().get("numberOfRelations").asLong();  assertThat(numberOfRelations).isEqualTo(3L);  numberOfRelations=transaction.run(("MATCH (t:%s) WHERE id(t) = $id RETURN size((t)-->(:Hobby)) as numberOfRelations").formatted(labelOfTestSubject),Values.parameters("id",newPerson.getId())).single().get("numberOfRelations").asLong();  assertThat(numberOfRelations).isEqualTo(2L);}  @TO@ try (Transaction transaction=driver.session(bookmarkCapture.createSessionConfig()).beginTransaction()){  long numberOfRelations=transaction.run(("MATCH (t:%s)-[r]->(:Pet) WHERE id(t) = $id RETURN count(r) as numberOfRelations").formatted(labelOfTestSubject),Values.parameters("id",newPerson.getId())).single().get("numberOfRelations").asLong();  assertThat(numberOfRelations).isEqualTo(3L);  numberOfRelations=transaction.run(("MATCH (t:%s)-[r]->(:Hobby) WHERE id(t) = $id RETURN count(r) as numberOfRelations").formatted(labelOfTestSubject),Values.parameters("id",newPerson.getId())).single().get("numberOfRelations").asLong();  assertThat(numberOfRelations).isEqualTo(2L);}  @AT@ 11935 @LENGTH@ 694
---UPD VariableDeclarationExpression@@Transaction transaction=driver.session().beginTransaction() @TO@ Transaction transaction=driver.session(bookmarkCapture.createSessionConfig()).beginTransaction() @AT@ 11940 @LENGTH@ 61
------UPD VariableDeclarationFragment@@transaction=driver.session().beginTransaction() @TO@ transaction=driver.session(bookmarkCapture.createSessionConfig()).beginTransaction() @AT@ 11952 @LENGTH@ 49
---------UPD MethodInvocation@@driver.session().beginTransaction() @TO@ driver.session(bookmarkCapture.createSessionConfig()).beginTransaction() @AT@ 11966 @LENGTH@ 35
------------UPD MethodInvocation@@MethodName:session:[] @TO@ MethodName:session:[bookmarkCapture.createSessionConfig()] @AT@ 11966 @LENGTH@ 16
---------------INS MethodInvocation@@bookmarkCapture.createSessionConfig() @TO@ MethodInvocation@@MethodName:session:[] @AT@ 12022 @LENGTH@ 37
------------------INS SimpleName@@Name:bookmarkCapture @TO@ MethodInvocation@@bookmarkCapture.createSessionConfig() @AT@ 12022 @LENGTH@ 15
------------------INS SimpleName@@MethodName:createSessionConfig:[] @TO@ MethodInvocation@@bookmarkCapture.createSessionConfig() @AT@ 12038 @LENGTH@ 21
---UPD VariableDeclarationStatement@@long numberOfRelations=transaction.run(("MATCH (t:%s) WHERE id(t) = $id RETURN size((t)-->(:Pet)) as numberOfRelations").formatted(labelOfTestSubject),Values.parameters("id",newPerson.getId())).single().get("numberOfRelations").asLong(); @TO@ long numberOfRelations=transaction.run(("MATCH (t:%s)-[r]->(:Pet) WHERE id(t) = $id RETURN count(r) as numberOfRelations").formatted(labelOfTestSubject),Values.parameters("id",newPerson.getId())).single().get("numberOfRelations").asLong(); @AT@ 12008 @LENGTH@ 260
------UPD VariableDeclarationFragment@@numberOfRelations=transaction.run(("MATCH (t:%s) WHERE id(t) = $id RETURN size((t)-->(:Pet)) as numberOfRelations").formatted(labelOfTestSubject),Values.parameters("id",newPerson.getId())).single().get("numberOfRelations").asLong() @TO@ numberOfRelations=transaction.run(("MATCH (t:%s)-[r]->(:Pet) WHERE id(t) = $id RETURN count(r) as numberOfRelations").formatted(labelOfTestSubject),Values.parameters("id",newPerson.getId())).single().get("numberOfRelations").asLong() @AT@ 12013 @LENGTH@ 254
---------UPD MethodInvocation@@transaction.run(("MATCH (t:%s) WHERE id(t) = $id RETURN size((t)-->(:Pet)) as numberOfRelations").formatted(labelOfTestSubject),Values.parameters("id",newPerson.getId())).single().get("numberOfRelations").asLong() @TO@ transaction.run(("MATCH (t:%s)-[r]->(:Pet) WHERE id(t) = $id RETURN count(r) as numberOfRelations").formatted(labelOfTestSubject),Values.parameters("id",newPerson.getId())).single().get("numberOfRelations").asLong() @AT@ 12033 @LENGTH@ 234
------------UPD MethodInvocation@@MethodName:run:[("MATCH (t:%s) WHERE id(t) = $id RETURN size((t)-->(:Pet)) as numberOfRelations").formatted(labelOfTestSubject), Values.parameters("id",newPerson.getId())] @TO@ MethodName:run:[("MATCH (t:%s)-[r]->(:Pet) WHERE id(t) = $id RETURN count(r) as numberOfRelations").formatted(labelOfTestSubject), Values.parameters("id",newPerson.getId())] @AT@ 12033 @LENGTH@ 185
---------------UPD MethodInvocation@@("MATCH (t:%s) WHERE id(t) = $id RETURN size((t)-->(:Pet)) as numberOfRelations").formatted(labelOfTestSubject) @TO@ ("MATCH (t:%s)-[r]->(:Pet) WHERE id(t) = $id RETURN count(r) as numberOfRelations").formatted(labelOfTestSubject) @AT@ 12055 @LENGTH@ 111
------------------UPD ParenthesizedExpression@@("MATCH (t:%s) WHERE id(t) = $id RETURN size((t)-->(:Pet)) as numberOfRelations") @TO@ ("MATCH (t:%s)-[r]->(:Pet) WHERE id(t) = $id RETURN count(r) as numberOfRelations") @AT@ 12055 @LENGTH@ 81
---------------------UPD StringLiteral@@"MATCH (t:%s) WHERE id(t) = $id RETURN size((t)-->(:Pet)) as numberOfRelations" @TO@ "MATCH (t:%s)-[r]->(:Pet) WHERE id(t) = $id RETURN count(r) as numberOfRelations" @AT@ 12056 @LENGTH@ 79
---UPD ExpressionStatement@@Assignment:numberOfRelations=transaction.run(("MATCH (t:%s) WHERE id(t) = $id RETURN size((t)-->(:Hobby)) as numberOfRelations").formatted(labelOfTestSubject),Values.parameters("id",newPerson.getId())).single().get("numberOfRelations").asLong() @TO@ Assignment:numberOfRelations=transaction.run(("MATCH (t:%s)-[r]->(:Hobby) WHERE id(t) = $id RETURN count(r) as numberOfRelations").formatted(labelOfTestSubject),Values.parameters("id",newPerson.getId())).single().get("numberOfRelations").asLong() @AT@ 12320 @LENGTH@ 257
------UPD Assignment@@numberOfRelations=transaction.run(("MATCH (t:%s) WHERE id(t) = $id RETURN size((t)-->(:Hobby)) as numberOfRelations").formatted(labelOfTestSubject),Values.parameters("id",newPerson.getId())).single().get("numberOfRelations").asLong() @TO@ numberOfRelations=transaction.run(("MATCH (t:%s)-[r]->(:Hobby) WHERE id(t) = $id RETURN count(r) as numberOfRelations").formatted(labelOfTestSubject),Values.parameters("id",newPerson.getId())).single().get("numberOfRelations").asLong() @AT@ 12320 @LENGTH@ 256
---------UPD MethodInvocation@@transaction.run(("MATCH (t:%s) WHERE id(t) = $id RETURN size((t)-->(:Hobby)) as numberOfRelations").formatted(labelOfTestSubject),Values.parameters("id",newPerson.getId())).single().get("numberOfRelations").asLong() @TO@ transaction.run(("MATCH (t:%s)-[r]->(:Hobby) WHERE id(t) = $id RETURN count(r) as numberOfRelations").formatted(labelOfTestSubject),Values.parameters("id",newPerson.getId())).single().get("numberOfRelations").asLong() @AT@ 12340 @LENGTH@ 236
------------UPD MethodInvocation@@MethodName:run:[("MATCH (t:%s) WHERE id(t) = $id RETURN size((t)-->(:Hobby)) as numberOfRelations").formatted(labelOfTestSubject), Values.parameters("id",newPerson.getId())] @TO@ MethodName:run:[("MATCH (t:%s)-[r]->(:Hobby) WHERE id(t) = $id RETURN count(r) as numberOfRelations").formatted(labelOfTestSubject), Values.parameters("id",newPerson.getId())] @AT@ 12340 @LENGTH@ 187
---------------UPD MethodInvocation@@("MATCH (t:%s) WHERE id(t) = $id RETURN size((t)-->(:Hobby)) as numberOfRelations").formatted(labelOfTestSubject) @TO@ ("MATCH (t:%s)-[r]->(:Hobby) WHERE id(t) = $id RETURN count(r) as numberOfRelations").formatted(labelOfTestSubject) @AT@ 12362 @LENGTH@ 113
------------------UPD ParenthesizedExpression@@("MATCH (t:%s) WHERE id(t) = $id RETURN size((t)-->(:Hobby)) as numberOfRelations") @TO@ ("MATCH (t:%s)-[r]->(:Hobby) WHERE id(t) = $id RETURN count(r) as numberOfRelations") @AT@ 12362 @LENGTH@ 83
---------------------UPD StringLiteral@@"MATCH (t:%s) WHERE id(t) = $id RETURN size((t)-->(:Hobby)) as numberOfRelations" @TO@ "MATCH (t:%s)-[r]->(:Hobby) WHERE id(t) = $id RETURN count(r) as numberOfRelations" @AT@ 12363 @LENGTH@ 81


DEL FieldDeclaration@@private, ResourceLoader, [resourceLoader] @AT@ 1791 @LENGTH@ 38
---DEL Modifier@@private @AT@ 1791 @LENGTH@ 7
---DEL SimpleType@@ResourceLoader @AT@ 1799 @LENGTH@ 14
---DEL VariableDeclarationFragment@@resourceLoader @AT@ 1814 @LENGTH@ 14
------DEL SimpleName@@resourceLoader @AT@ 1814 @LENGTH@ 14


UPD IfStatement@@if (endpointUri.startsWith(verbUri) && preVerbUri.length() < verbUri.length()) {  preVerbUri=verbUri;  ret=verb;} @TO@ if (target.startsWith(verbUri) && preVerbUri.length() < verbUri.length()) {  preVerbUri=verbUri;  ret=verb;} @AT@ 9708 @LENGTH@ 508
---UPD InfixExpression@@endpointUri.startsWith(verbUri) && preVerbUri.length() < verbUri.length() @TO@ target.startsWith(verbUri) && preVerbUri.length() < verbUri.length() @AT@ 9712 @LENGTH@ 73
------UPD MethodInvocation@@endpointUri.startsWith(verbUri) @TO@ target.startsWith(verbUri) @AT@ 9712 @LENGTH@ 31
---------UPD SimpleName@@Name:endpointUri @TO@ Name:target @AT@ 9712 @LENGTH@ 11


UPD ExpressionStatement@@MethodInvocation:exchange.getOut().setBody(exchange.getIn().getBody(String.class)) @TO@ MethodInvocation:exchange.getMessage().setBody(exchange.getIn().getBody(String.class)) @AT@ 4401 @LENGTH@ 66
---UPD MethodInvocation@@exchange.getOut().setBody(exchange.getIn().getBody(String.class)) @TO@ exchange.getMessage().setBody(exchange.getIn().getBody(String.class)) @AT@ 4401 @LENGTH@ 65
------UPD MethodInvocation@@MethodName:getOut:[] @TO@ MethodName:getMessage:[] @AT@ 4401 @LENGTH@ 17


UPD VariableDeclarationStatement@@boolean exists=DownloaderHelper.alreadyOnClasspath(camelContext,mg.getArtifactId()); @TO@ boolean exists=DownloaderHelper.alreadyOnClasspath(camelContext,mg.getArtifactId(),mg.getVersion()); @AT@ 2516 @LENGTH@ 87
---UPD VariableDeclarationFragment@@exists=DownloaderHelper.alreadyOnClasspath(camelContext,mg.getArtifactId()) @TO@ exists=DownloaderHelper.alreadyOnClasspath(camelContext,mg.getArtifactId(),mg.getVersion()) @AT@ 2524 @LENGTH@ 78
------UPD MethodInvocation@@DownloaderHelper.alreadyOnClasspath(camelContext,mg.getArtifactId()) @TO@ DownloaderHelper.alreadyOnClasspath(camelContext,mg.getArtifactId(),mg.getVersion()) @AT@ 2533 @LENGTH@ 69
---------UPD SimpleName@@MethodName:alreadyOnClasspath:[camelContext, mg.getArtifactId()] @TO@ MethodName:alreadyOnClasspath:[camelContext, mg.getArtifactId(), mg.getVersion()] @AT@ 2550 @LENGTH@ 52
------------INS MethodInvocation@@mg.getVersion() @TO@ SimpleName@@MethodName:alreadyOnClasspath:[camelContext, mg.getArtifactId()] @AT@ 2603 @LENGTH@ 15
---------------INS SimpleName@@Name:mg @TO@ MethodInvocation@@mg.getVersion() @AT@ 2603 @LENGTH@ 2
---------------INS SimpleName@@MethodName:getVersion:[] @TO@ MethodInvocation@@mg.getVersion() @AT@ 2606 @LENGTH@ 12


UPD ExpressionStatement@@Assignment:loggerName=name @TO@ Assignment:name=loggerName @AT@ 11817 @LENGTH@ 18
---UPD Assignment@@loggerName=name @TO@ name=loggerName @AT@ 11817 @LENGTH@ 17
------UPD SimpleName@@loggerName @TO@ name @AT@ 11817 @LENGTH@ 10
------UPD SimpleName@@name @TO@ loggerName @AT@ 11830 @LENGTH@ 4


UPD IfStatement@@if (model != null && !DownloaderHelper.alreadyOnClasspath(camelContext,model.getArtifactId())) {  DownloaderHelper.downloadDependency(camelContext,model.getGroupId(),model.getArtifactId(),model.getVersion());} @TO@ if (model != null && !DownloaderHelper.alreadyOnClasspath(camelContext,model.getArtifactId(),model.getVersion())) {  DownloaderHelper.downloadDependency(camelContext,model.getGroupId(),model.getArtifactId(),model.getVersion());} @AT@ 1974 @LENGTH@ 233
---UPD InfixExpression@@model != null && !DownloaderHelper.alreadyOnClasspath(camelContext,model.getArtifactId()) @TO@ model != null && !DownloaderHelper.alreadyOnClasspath(camelContext,model.getArtifactId(),model.getVersion()) @AT@ 1978 @LENGTH@ 90
------UPD PrefixExpression@@!DownloaderHelper.alreadyOnClasspath(camelContext,model.getArtifactId()) @TO@ !DownloaderHelper.alreadyOnClasspath(camelContext,model.getArtifactId(),model.getVersion()) @AT@ 1995 @LENGTH@ 73
---------UPD MethodInvocation@@DownloaderHelper.alreadyOnClasspath(camelContext,model.getArtifactId()) @TO@ DownloaderHelper.alreadyOnClasspath(camelContext,model.getArtifactId(),model.getVersion()) @AT@ 1996 @LENGTH@ 72
------------UPD SimpleName@@MethodName:alreadyOnClasspath:[camelContext, model.getArtifactId()] @TO@ MethodName:alreadyOnClasspath:[camelContext, model.getArtifactId(), model.getVersion()] @AT@ 2013 @LENGTH@ 55
---------------INS MethodInvocation@@model.getVersion() @TO@ SimpleName@@MethodName:alreadyOnClasspath:[camelContext, model.getArtifactId()] @AT@ 2069 @LENGTH@ 18
------------------INS SimpleName@@Name:model @TO@ MethodInvocation@@model.getVersion() @AT@ 2069 @LENGTH@ 5
------------------INS SimpleName@@MethodName:getVersion:[] @TO@ MethodInvocation@@model.getVersion() @AT@ 2075 @LENGTH@ 12


UPD VariableDeclarationStatement@@SslContextFactory answer=new SslContextFactory(); @TO@ SslContextFactory answer; @AT@ 28667 @LENGTH@ 51
---UPD VariableDeclarationFragment@@answer=new SslContextFactory() @TO@ answer @AT@ 28685 @LENGTH@ 32
------DEL ClassInstanceCreation@@SslContextFactory[] @AT@ 28694 @LENGTH@ 23
---------DEL New@@new @AT@ 28694 @LENGTH@ 3
---------DEL SimpleType@@SslContextFactory @AT@ 28698 @LENGTH@ 17


INS MethodDeclaration@@protected, ProjectionFactory, MethodName:getProjectionFactory,  @TO@ TypeDeclaration@@[final]Neo4jRepositoryFactory, RepositoryFactorySupport @AT@ 5445 @LENGTH@ 418
---INS Modifier@@protected @TO@ MethodDeclaration@@protected, ProjectionFactory, MethodName:getProjectionFactory,  @AT@ 5445 @LENGTH@ 9
---INS SimpleType@@ProjectionFactory @TO@ MethodDeclaration@@protected, ProjectionFactory, MethodName:getProjectionFactory,  @AT@ 5455 @LENGTH@ 17
---INS SimpleName@@MethodName:getProjectionFactory @TO@ MethodDeclaration@@protected, ProjectionFactory, MethodName:getProjectionFactory,  @AT@ 5473 @LENGTH@ 20
---INS VariableDeclarationStatement@@ProjectionFactory projectionFactory=super.getProjectionFactory(); @TO@ MethodDeclaration@@protected, ProjectionFactory, MethodName:getProjectionFactory,  @AT@ 5501 @LENGTH@ 67
------INS SimpleType@@ProjectionFactory @TO@ VariableDeclarationStatement@@ProjectionFactory projectionFactory=super.getProjectionFactory(); @AT@ 5501 @LENGTH@ 17
------INS VariableDeclarationFragment@@projectionFactory=super.getProjectionFactory() @TO@ VariableDeclarationStatement@@ProjectionFactory projectionFactory=super.getProjectionFactory(); @AT@ 5519 @LENGTH@ 48
---------INS SimpleName@@projectionFactory @TO@ VariableDeclarationFragment@@projectionFactory=super.getProjectionFactory() @AT@ 5519 @LENGTH@ 17
---------INS SuperMethodInvocation@@super.getProjectionFactory() @TO@ VariableDeclarationFragment@@projectionFactory=super.getProjectionFactory() @AT@ 5539 @LENGTH@ 28
------------INS SimpleName@@MethodName:getProjectionFactory:[] @TO@ SuperMethodInvocation@@super.getProjectionFactory() @AT@ 5545 @LENGTH@ 20
---INS IfStatement@@if (projectionFactory instanceof SpelAwareProxyProjectionFactory) {  ((SpelAwareProxyProjectionFactory)projectionFactory).registerMethodInvokerFactory(EntityAndGraphPropertyAccessingMethodInterceptor.createMethodInterceptorFactory(mappingContext));} @TO@ MethodDeclaration@@protected, ProjectionFactory, MethodName:getProjectionFactory,  @AT@ 5571 @LENGTH@ 261
------INS InstanceofExpression@@projectionFactory instanceof SpelAwareProxyProjectionFactory @TO@ IfStatement@@if (projectionFactory instanceof SpelAwareProxyProjectionFactory) {  ((SpelAwareProxyProjectionFactory)projectionFactory).registerMethodInvokerFactory(EntityAndGraphPropertyAccessingMethodInterceptor.createMethodInterceptorFactory(mappingContext));} @AT@ 5575 @LENGTH@ 60
---------INS SimpleName@@projectionFactory @TO@ InstanceofExpression@@projectionFactory instanceof SpelAwareProxyProjectionFactory @AT@ 5575 @LENGTH@ 17
---------INS Instanceof@@instanceof @TO@ InstanceofExpression@@projectionFactory instanceof SpelAwareProxyProjectionFactory @AT@ 5593 @LENGTH@ 10
---------INS SimpleType@@SpelAwareProxyProjectionFactory @TO@ InstanceofExpression@@projectionFactory instanceof SpelAwareProxyProjectionFactory @AT@ 5604 @LENGTH@ 31
------INS Block@@ThenBody:{  ((SpelAwareProxyProjectionFactory)projectionFactory).registerMethodInvokerFactory(EntityAndGraphPropertyAccessingMethodInterceptor.createMethodInterceptorFactory(mappingContext));} @TO@ IfStatement@@if (projectionFactory instanceof SpelAwareProxyProjectionFactory) {  ((SpelAwareProxyProjectionFactory)projectionFactory).registerMethodInvokerFactory(EntityAndGraphPropertyAccessingMethodInterceptor.createMethodInterceptorFactory(mappingContext));} @AT@ 5637 @LENGTH@ 195
---------INS ExpressionStatement@@MethodInvocation:((SpelAwareProxyProjectionFactory)projectionFactory).registerMethodInvokerFactory(EntityAndGraphPropertyAccessingMethodInterceptor.createMethodInterceptorFactory(mappingContext)) @TO@ Block@@ThenBody:{  ((SpelAwareProxyProjectionFactory)projectionFactory).registerMethodInvokerFactory(EntityAndGraphPropertyAccessingMethodInterceptor.createMethodInterceptorFactory(mappingContext));} @AT@ 5642 @LENGTH@ 186
------------INS MethodInvocation@@((SpelAwareProxyProjectionFactory)projectionFactory).registerMethodInvokerFactory(EntityAndGraphPropertyAccessingMethodInterceptor.createMethodInterceptorFactory(mappingContext)) @TO@ ExpressionStatement@@MethodInvocation:((SpelAwareProxyProjectionFactory)projectionFactory).registerMethodInvokerFactory(EntityAndGraphPropertyAccessingMethodInterceptor.createMethodInterceptorFactory(mappingContext)) @AT@ 5642 @LENGTH@ 185
---------------INS ParenthesizedExpression@@((SpelAwareProxyProjectionFactory)projectionFactory) @TO@ MethodInvocation@@((SpelAwareProxyProjectionFactory)projectionFactory).registerMethodInvokerFactory(EntityAndGraphPropertyAccessingMethodInterceptor.createMethodInterceptorFactory(mappingContext)) @AT@ 5642 @LENGTH@ 53
------------------INS CastExpression@@(SpelAwareProxyProjectionFactory)projectionFactory @TO@ ParenthesizedExpression@@((SpelAwareProxyProjectionFactory)projectionFactory) @AT@ 5643 @LENGTH@ 51
---------------------INS SimpleType@@SpelAwareProxyProjectionFactory @TO@ CastExpression@@(SpelAwareProxyProjectionFactory)projectionFactory @AT@ 5644 @LENGTH@ 31
---------------------INS SimpleName@@projectionFactory @TO@ CastExpression@@(SpelAwareProxyProjectionFactory)projectionFactory @AT@ 5677 @LENGTH@ 17
---------------INS SimpleName@@MethodName:registerMethodInvokerFactory:[EntityAndGraphPropertyAccessingMethodInterceptor.createMethodInterceptorFactory(mappingContext)] @TO@ MethodInvocation@@((SpelAwareProxyProjectionFactory)projectionFactory).registerMethodInvokerFactory(EntityAndGraphPropertyAccessingMethodInterceptor.createMethodInterceptorFactory(mappingContext)) @AT@ 5696 @LENGTH@ 131
------------------INS MethodInvocation@@EntityAndGraphPropertyAccessingMethodInterceptor.createMethodInterceptorFactory(mappingContext) @TO@ SimpleName@@MethodName:registerMethodInvokerFactory:[EntityAndGraphPropertyAccessingMethodInterceptor.createMethodInterceptorFactory(mappingContext)] @AT@ 5731 @LENGTH@ 95
---------------------INS SimpleName@@Name:EntityAndGraphPropertyAccessingMethodInterceptor @TO@ MethodInvocation@@EntityAndGraphPropertyAccessingMethodInterceptor.createMethodInterceptorFactory(mappingContext) @AT@ 5731 @LENGTH@ 48
---------------------INS SimpleName@@MethodName:createMethodInterceptorFactory:[mappingContext] @TO@ MethodInvocation@@EntityAndGraphPropertyAccessingMethodInterceptor.createMethodInterceptorFactory(mappingContext) @AT@ 5780 @LENGTH@ 46
------------------------INS SimpleName@@mappingContext @TO@ SimpleName@@MethodName:createMethodInterceptorFactory:[mappingContext] @AT@ 5811 @LENGTH@ 14
---INS ReturnStatement@@SimpleName:projectionFactory @TO@ MethodDeclaration@@protected, ProjectionFactory, MethodName:getProjectionFactory,  @AT@ 5835 @LENGTH@ 25
------INS SimpleName@@projectionFactory @TO@ ReturnStatement@@SimpleName:projectionFactory @AT@ 5842 @LENGTH@ 17


INS MethodDeclaration@@public, static, OpenShiftConfig, MethodName:getOpenShiftConfig, String server, String username, String password, String token,  @TO@ TypeDeclaration@@[public, final]KubernetesHelper,  @AT@ 8418 @LENGTH@ 464
---INS Modifier@@public @TO@ MethodDeclaration@@public, static, OpenShiftConfig, MethodName:getOpenShiftConfig, String server, String username, String password, String token,  @AT@ 8418 @LENGTH@ 6
---INS Modifier@@static @TO@ MethodDeclaration@@public, static, OpenShiftConfig, MethodName:getOpenShiftConfig, String server, String username, String password, String token,  @AT@ 8425 @LENGTH@ 6
---INS SimpleType@@OpenShiftConfig @TO@ MethodDeclaration@@public, static, OpenShiftConfig, MethodName:getOpenShiftConfig, String server, String username, String password, String token,  @AT@ 8432 @LENGTH@ 15
---INS SimpleName@@MethodName:getOpenShiftConfig @TO@ MethodDeclaration@@public, static, OpenShiftConfig, MethodName:getOpenShiftConfig, String server, String username, String password, String token,  @AT@ 8448 @LENGTH@ 18
---INS SingleVariableDeclaration@@String server @TO@ MethodDeclaration@@public, static, OpenShiftConfig, MethodName:getOpenShiftConfig, String server, String username, String password, String token,  @AT@ 8467 @LENGTH@ 13
------INS SimpleType@@String @TO@ SingleVariableDeclaration@@String server @AT@ 8467 @LENGTH@ 6
------INS SimpleName@@server @TO@ SingleVariableDeclaration@@String server @AT@ 8474 @LENGTH@ 6
---INS SingleVariableDeclaration@@String username @TO@ MethodDeclaration@@public, static, OpenShiftConfig, MethodName:getOpenShiftConfig, String server, String username, String password, String token,  @AT@ 8482 @LENGTH@ 15
------INS SimpleType@@String @TO@ SingleVariableDeclaration@@String username @AT@ 8482 @LENGTH@ 6
------INS SimpleName@@username @TO@ SingleVariableDeclaration@@String username @AT@ 8489 @LENGTH@ 8
---INS SingleVariableDeclaration@@String password @TO@ MethodDeclaration@@public, static, OpenShiftConfig, MethodName:getOpenShiftConfig, String server, String username, String password, String token,  @AT@ 8499 @LENGTH@ 15
------INS SimpleType@@String @TO@ SingleVariableDeclaration@@String password @AT@ 8499 @LENGTH@ 6
------INS SimpleName@@password @TO@ SingleVariableDeclaration@@String password @AT@ 8506 @LENGTH@ 8
---INS SingleVariableDeclaration@@String token @TO@ MethodDeclaration@@public, static, OpenShiftConfig, MethodName:getOpenShiftConfig, String server, String username, String password, String token,  @AT@ 8516 @LENGTH@ 12
------INS SimpleType@@String @TO@ SingleVariableDeclaration@@String token @AT@ 8516 @LENGTH@ 6
------INS SimpleName@@token @TO@ SingleVariableDeclaration@@String token @AT@ 8523 @LENGTH@ 5
---INS IfStatement@@if (token != null) {  return new OpenShiftConfigBuilder().withMasterUrl(server).withOauthToken(token).withTrustCerts(true).build();} else {  return new OpenShiftConfigBuilder().withMasterUrl(server).withUsername(username).withPassword(password).withTrustCerts(true).build();} @TO@ MethodDeclaration@@public, static, OpenShiftConfig, MethodName:getOpenShiftConfig, String server, String username, String password, String token,  @AT@ 8540 @LENGTH@ 336
------INS InfixExpression@@token != null @TO@ IfStatement@@if (token != null) {  return new OpenShiftConfigBuilder().withMasterUrl(server).withOauthToken(token).withTrustCerts(true).build();} else {  return new OpenShiftConfigBuilder().withMasterUrl(server).withUsername(username).withPassword(password).withTrustCerts(true).build();} @AT@ 8544 @LENGTH@ 13
---------INS SimpleName@@token @TO@ InfixExpression@@token != null @AT@ 8544 @LENGTH@ 5
---------INS Operator@@!= @TO@ InfixExpression@@token != null @AT@ 8549 @LENGTH@ 2
---------INS NullLiteral@@null @TO@ InfixExpression@@token != null @AT@ 8553 @LENGTH@ 4
------INS Block@@ThenBody:{  return new OpenShiftConfigBuilder().withMasterUrl(server).withOauthToken(token).withTrustCerts(true).build();} @TO@ IfStatement@@if (token != null) {  return new OpenShiftConfigBuilder().withMasterUrl(server).withOauthToken(token).withTrustCerts(true).build();} else {  return new OpenShiftConfigBuilder().withMasterUrl(server).withUsername(username).withPassword(password).withTrustCerts(true).build();} @AT@ 8559 @LENGTH@ 133
---------INS ReturnStatement@@MethodInvocation:new OpenShiftConfigBuilder().withMasterUrl(server).withOauthToken(token).withTrustCerts(true).build() @TO@ Block@@ThenBody:{  return new OpenShiftConfigBuilder().withMasterUrl(server).withOauthToken(token).withTrustCerts(true).build();} @AT@ 8573 @LENGTH@ 109
------------INS MethodInvocation@@new OpenShiftConfigBuilder().withMasterUrl(server).withOauthToken(token).withTrustCerts(true).build() @TO@ ReturnStatement@@MethodInvocation:new OpenShiftConfigBuilder().withMasterUrl(server).withOauthToken(token).withTrustCerts(true).build() @AT@ 8580 @LENGTH@ 101
---------------INS MethodInvocation@@MethodName:withTrustCerts:[true] @TO@ MethodInvocation@@new OpenShiftConfigBuilder().withMasterUrl(server).withOauthToken(token).withTrustCerts(true).build() @AT@ 8580 @LENGTH@ 93
------------------INS BooleanLiteral@@true @TO@ MethodInvocation@@MethodName:withTrustCerts:[true] @AT@ 8668 @LENGTH@ 4
---------------INS MethodInvocation@@MethodName:withOauthToken:[token] @TO@ MethodInvocation@@new OpenShiftConfigBuilder().withMasterUrl(server).withOauthToken(token).withTrustCerts(true).build() @AT@ 8580 @LENGTH@ 72
------------------INS SimpleName@@token @TO@ MethodInvocation@@MethodName:withOauthToken:[token] @AT@ 8646 @LENGTH@ 5
---------------INS MethodInvocation@@MethodName:withMasterUrl:[server] @TO@ MethodInvocation@@new OpenShiftConfigBuilder().withMasterUrl(server).withOauthToken(token).withTrustCerts(true).build() @AT@ 8580 @LENGTH@ 50
------------------INS SimpleName@@server @TO@ MethodInvocation@@MethodName:withMasterUrl:[server] @AT@ 8623 @LENGTH@ 6
---------------INS ClassInstanceCreation@@OpenShiftConfigBuilder[] @TO@ MethodInvocation@@new OpenShiftConfigBuilder().withMasterUrl(server).withOauthToken(token).withTrustCerts(true).build() @AT@ 8580 @LENGTH@ 28
------------------INS New@@new @TO@ ClassInstanceCreation@@OpenShiftConfigBuilder[] @AT@ 8580 @LENGTH@ 3
------------------INS SimpleType@@OpenShiftConfigBuilder @TO@ ClassInstanceCreation@@OpenShiftConfigBuilder[] @AT@ 8584 @LENGTH@ 22
---------------INS SimpleName@@MethodName:build:[] @TO@ MethodInvocation@@new OpenShiftConfigBuilder().withMasterUrl(server).withOauthToken(token).withTrustCerts(true).build() @AT@ 8674 @LENGTH@ 7
------INS Block@@ElseBody:{  return new OpenShiftConfigBuilder().withMasterUrl(server).withUsername(username).withPassword(password).withTrustCerts(true).build();} @TO@ IfStatement@@if (token != null) {  return new OpenShiftConfigBuilder().withMasterUrl(server).withOauthToken(token).withTrustCerts(true).build();} else {  return new OpenShiftConfigBuilder().withMasterUrl(server).withUsername(username).withPassword(password).withTrustCerts(true).build();} @AT@ 8698 @LENGTH@ 178
---------INS ReturnStatement@@MethodInvocation:new OpenShiftConfigBuilder().withMasterUrl(server).withUsername(username).withPassword(password).withTrustCerts(true).build() @TO@ Block@@ElseBody:{  return new OpenShiftConfigBuilder().withMasterUrl(server).withUsername(username).withPassword(password).withTrustCerts(true).build();} @AT@ 8712 @LENGTH@ 154
------------INS MethodInvocation@@new OpenShiftConfigBuilder().withMasterUrl(server).withUsername(username).withPassword(password).withTrustCerts(true).build() @TO@ ReturnStatement@@MethodInvocation:new OpenShiftConfigBuilder().withMasterUrl(server).withUsername(username).withPassword(password).withTrustCerts(true).build() @AT@ 8719 @LENGTH@ 146
---------------INS MethodInvocation@@MethodName:withTrustCerts:[true] @TO@ MethodInvocation@@new OpenShiftConfigBuilder().withMasterUrl(server).withUsername(username).withPassword(password).withTrustCerts(true).build() @AT@ 8719 @LENGTH@ 138
------------------INS BooleanLiteral@@true @TO@ MethodInvocation@@MethodName:withTrustCerts:[true] @AT@ 8852 @LENGTH@ 4
---------------INS MethodInvocation@@MethodName:withPassword:[password] @TO@ MethodInvocation@@new OpenShiftConfigBuilder().withMasterUrl(server).withUsername(username).withPassword(password).withTrustCerts(true).build() @AT@ 8719 @LENGTH@ 96
------------------INS SimpleName@@password @TO@ MethodInvocation@@MethodName:withPassword:[password] @AT@ 8806 @LENGTH@ 8
---------------INS MethodInvocation@@MethodName:withUsername:[username] @TO@ MethodInvocation@@new OpenShiftConfigBuilder().withMasterUrl(server).withUsername(username).withPassword(password).withTrustCerts(true).build() @AT@ 8719 @LENGTH@ 73
------------------INS SimpleName@@username @TO@ MethodInvocation@@MethodName:withUsername:[username] @AT@ 8783 @LENGTH@ 8
---------------INS MethodInvocation@@MethodName:withMasterUrl:[server] @TO@ MethodInvocation@@new OpenShiftConfigBuilder().withMasterUrl(server).withUsername(username).withPassword(password).withTrustCerts(true).build() @AT@ 8719 @LENGTH@ 50
------------------INS SimpleName@@server @TO@ MethodInvocation@@MethodName:withMasterUrl:[server] @AT@ 8762 @LENGTH@ 6
---------------INS ClassInstanceCreation@@OpenShiftConfigBuilder[] @TO@ MethodInvocation@@new OpenShiftConfigBuilder().withMasterUrl(server).withUsername(username).withPassword(password).withTrustCerts(true).build() @AT@ 8719 @LENGTH@ 28
------------------INS New@@new @TO@ ClassInstanceCreation@@OpenShiftConfigBuilder[] @AT@ 8719 @LENGTH@ 3
------------------INS SimpleType@@OpenShiftConfigBuilder @TO@ ClassInstanceCreation@@OpenShiftConfigBuilder[] @AT@ 8723 @LENGTH@ 22
---------------INS SimpleName@@MethodName:build:[] @TO@ MethodInvocation@@new OpenShiftConfigBuilder().withMasterUrl(server).withUsername(username).withPassword(password).withTrustCerts(true).build() @AT@ 8858 @LENGTH@ 7


UPD ExpressionStatement@@MethodInvocation:exchange.getOut().setBody("Bye " + body) @TO@ MethodInvocation:exchange.getMessage().setBody("Bye " + body) @AT@ 1798 @LENGTH@ 41
---UPD MethodInvocation@@exchange.getOut().setBody("Bye " + body) @TO@ exchange.getMessage().setBody("Bye " + body) @AT@ 1798 @LENGTH@ 40
------UPD MethodInvocation@@MethodName:getOut:[] @TO@ MethodName:getMessage:[] @AT@ 1798 @LENGTH@ 17


UPD ExpressionStatement@@MethodInvocation:assertThatExceptionOfType(IllegalArgumentException.class).isThrownBy(() -> new PartTreeJpaQuery(method,entityManager)).withMessageContaining("findByNoSuchProperty").withMessageContaining(" noSuchProperty ").withMessageContaining("UserRepository") @TO@ MethodInvocation:assertThatExceptionOfType(IllegalArgumentException.class).isThrownBy(() -> new PartTreeJpaQuery(method,entityManager)).withMessageContaining("findByNoSuchProperty").withMessageContaining("'noSuchProperty'").withMessageContaining("UserRepository") @AT@ 8221 @LENGTH@ 338
---UPD MethodInvocation@@assertThatExceptionOfType(IllegalArgumentException.class).isThrownBy(() -> new PartTreeJpaQuery(method,entityManager)).withMessageContaining("findByNoSuchProperty").withMessageContaining(" noSuchProperty ").withMessageContaining("UserRepository") @TO@ assertThatExceptionOfType(IllegalArgumentException.class).isThrownBy(() -> new PartTreeJpaQuery(method,entityManager)).withMessageContaining("findByNoSuchProperty").withMessageContaining("'noSuchProperty'").withMessageContaining("UserRepository") @AT@ 8221 @LENGTH@ 337
------UPD MethodInvocation@@MethodName:withMessageContaining:[" noSuchProperty "] @TO@ MethodName:withMessageContaining:["'noSuchProperty'"] @AT@ 8221 @LENGTH@ 257
---------UPD StringLiteral@@" noSuchProperty " @TO@ "'noSuchProperty'" @AT@ 8459 @LENGTH@ 18


UPD Block@@FinallyBody:{  IOUtils.closeStream(outStream);} @TO@ FinallyBody:{  if (outStream != null) {    outStream.close();  }} @AT@ 5850 @LENGTH@ 53
---INS IfStatement@@if (outStream != null) {  outStream.close();} @TO@ Block@@FinallyBody:{  IOUtils.closeStream(outStream);} @AT@ 5862 @LENGTH@ 67
------INS InfixExpression@@outStream != null @TO@ IfStatement@@if (outStream != null) {  outStream.close();} @AT@ 5866 @LENGTH@ 17
---------INS SimpleName@@outStream @TO@ InfixExpression@@outStream != null @AT@ 5866 @LENGTH@ 9
---------INS Operator@@!= @TO@ InfixExpression@@outStream != null @AT@ 5875 @LENGTH@ 2
---------INS NullLiteral@@null @TO@ InfixExpression@@outStream != null @AT@ 5879 @LENGTH@ 4
------INS Block@@ThenBody:{  outStream.close();} @TO@ IfStatement@@if (outStream != null) {  outStream.close();} @AT@ 5885 @LENGTH@ 44
---------MOV ExpressionStatement@@MethodInvocation:IOUtils.closeStream(outStream) @TO@ Block@@ThenBody:{  outStream.close();} @AT@ 5862 @LENGTH@ 31
------------UPD MethodInvocation@@IOUtils.closeStream(outStream) @TO@ outStream.close() @AT@ 5862 @LENGTH@ 30
---------------UPD SimpleName@@Name:IOUtils @TO@ Name:outStream @AT@ 5862 @LENGTH@ 7
---------------UPD SimpleName@@MethodName:closeStream:[outStream] @TO@ MethodName:close:[] @AT@ 5870 @LENGTH@ 22
------------------DEL SimpleName@@outStream @AT@ 5882 @LENGTH@ 9
---UPD ExpressionStatement@@MethodInvocation:IOUtils.closeStream(outStream) @TO@ MethodInvocation:outStream.close() @AT@ 5862 @LENGTH@ 31


UPD LambdaExpression@@client -> {
  EnvironmentContext envContext=new EnvironmentContext(ImmutableMap.of(StatsSetupConst.DO_NOT_UPDATE_STATS,StatsSetupConst.TRUE));
  ALTER_TABLE.invoke(client,database,tableName,hmsTable,envContext);
  return null;
}
 @TO@ client -> {
  MetastoreUtil.alterTable(client,database,tableName,hmsTable);
  return null;
}
 @AT@ 14409 @LENGTH@ 281
---DEL VariableDeclarationStatement@@EnvironmentContext envContext=new EnvironmentContext(ImmutableMap.of(StatsSetupConst.DO_NOT_UPDATE_STATS,StatsSetupConst.TRUE)); @AT@ 14429 @LENGTH@ 153
------DEL SimpleType@@EnvironmentContext @AT@ 14429 @LENGTH@ 18
------DEL VariableDeclarationFragment@@envContext=new EnvironmentContext(ImmutableMap.of(StatsSetupConst.DO_NOT_UPDATE_STATS,StatsSetupConst.TRUE)) @AT@ 14448 @LENGTH@ 133
---------DEL SimpleName@@envContext @AT@ 14448 @LENGTH@ 10
---------DEL ClassInstanceCreation@@EnvironmentContext[ImmutableMap.of(StatsSetupConst.DO_NOT_UPDATE_STATS,StatsSetupConst.TRUE)] @AT@ 14461 @LENGTH@ 120
------------DEL New@@new @AT@ 14461 @LENGTH@ 3
------------DEL SimpleType@@EnvironmentContext @AT@ 14465 @LENGTH@ 18
------------DEL MethodInvocation@@ImmutableMap.of(StatsSetupConst.DO_NOT_UPDATE_STATS,StatsSetupConst.TRUE) @AT@ 14497 @LENGTH@ 74
---------------DEL SimpleName@@Name:ImmutableMap @AT@ 14497 @LENGTH@ 12
---------------DEL SimpleName@@MethodName:of:[StatsSetupConst.DO_NOT_UPDATE_STATS, StatsSetupConst.TRUE] @AT@ 14510 @LENGTH@ 61
------------------DEL QualifiedName@@StatsSetupConst.DO_NOT_UPDATE_STATS @AT@ 14513 @LENGTH@ 35
---------------------DEL SimpleName@@StatsSetupConst @AT@ 14513 @LENGTH@ 15
---------------------DEL SimpleName@@DO_NOT_UPDATE_STATS @AT@ 14529 @LENGTH@ 19
------------------DEL QualifiedName@@StatsSetupConst.TRUE @AT@ 14550 @LENGTH@ 20
---------------------DEL SimpleName@@StatsSetupConst @AT@ 14550 @LENGTH@ 15
---------------------DEL SimpleName@@TRUE @AT@ 14566 @LENGTH@ 4
---UPD ExpressionStatement@@MethodInvocation:ALTER_TABLE.invoke(client,database,tableName,hmsTable,envContext) @TO@ MethodInvocation:MetastoreUtil.alterTable(client,database,tableName,hmsTable) @AT@ 14591 @LENGTH@ 70
------UPD MethodInvocation@@ALTER_TABLE.invoke(client,database,tableName,hmsTable,envContext) @TO@ MetastoreUtil.alterTable(client,database,tableName,hmsTable) @AT@ 14591 @LENGTH@ 69
---------UPD SimpleName@@Name:ALTER_TABLE @TO@ Name:MetastoreUtil @AT@ 14591 @LENGTH@ 11
---------UPD SimpleName@@MethodName:invoke:[client, database, tableName, hmsTable, envContext] @TO@ MethodName:alterTable:[client, database, tableName, hmsTable] @AT@ 14603 @LENGTH@ 57
------------DEL SimpleName@@envContext @AT@ 14649 @LENGTH@ 10


UPD ReturnStatement@@MethodInvocation:CamelContextHelper.findByType(context,Vertx.class) @TO@ MethodInvocation:CamelContextHelper.findSingleByType(context,Vertx.class) @AT@ 4120 @LENGTH@ 59
---UPD MethodInvocation@@CamelContextHelper.findByType(context,Vertx.class) @TO@ CamelContextHelper.findSingleByType(context,Vertx.class) @AT@ 4127 @LENGTH@ 51
------UPD SimpleName@@MethodName:findByType:[context, Vertx.class] @TO@ MethodName:findSingleByType:[context, Vertx.class] @AT@ 4146 @LENGTH@ 32


INS FieldDeclaration@@private, String, [middleName] @TO@ TypeDeclaration@@[@Getter, @Setter, @Node, @ToString, public]PersonWithNoConstructor,  @AT@ 1268 @LENGTH@ 26
---INS Modifier@@private @TO@ FieldDeclaration@@private, String, [middleName] @AT@ 1268 @LENGTH@ 7
---INS SimpleType@@String @TO@ FieldDeclaration@@private, String, [middleName] @AT@ 1276 @LENGTH@ 6
---INS VariableDeclarationFragment@@middleName @TO@ FieldDeclaration@@private, String, [middleName] @AT@ 1283 @LENGTH@ 10
------INS SimpleName@@middleName @TO@ VariableDeclarationFragment@@middleName @AT@ 1283 @LENGTH@ 10


UPD VariableDeclarationStatement@@final Object[] els=new Object[]{"1","3","5","7","2","4","6"}; @TO@ final Object[] els={"1","3","5","7","2","4","6"}; @AT@ 4049 @LENGTH@ 70
---UPD VariableDeclarationFragment@@els=new Object[]{"1","3","5","7","2","4","6"} @TO@ els={"1","3","5","7","2","4","6"} @AT@ 4064 @LENGTH@ 54
------DEL ArrayCreation@@new Object[]{"1","3","5","7","2","4","6"} @AT@ 4070 @LENGTH@ 48
---------DEL ArrayType@@Object[] @AT@ 4074 @LENGTH@ 8
------------DEL SimpleType@@Object @AT@ 4074 @LENGTH@ 6
---------DEL ArrayInitializer@@{"1","3","5","7","2","4","6"} @AT@ 4083 @LENGTH@ 35
------INS ArrayInitializer@@{"1","3","5","7","2","4","6"} @TO@ VariableDeclarationFragment@@els=new Object[]{"1","3","5","7","2","4","6"} @AT@ 4070 @LENGTH@ 35
---------MOV StringLiteral@@"1" @TO@ ArrayInitializer@@{"1","3","5","7","2","4","6"} @AT@ 4084 @LENGTH@ 3
---------MOV StringLiteral@@"3" @TO@ ArrayInitializer@@{"1","3","5","7","2","4","6"} @AT@ 4089 @LENGTH@ 3
---------MOV StringLiteral@@"5" @TO@ ArrayInitializer@@{"1","3","5","7","2","4","6"} @AT@ 4094 @LENGTH@ 3
---------MOV StringLiteral@@"7" @TO@ ArrayInitializer@@{"1","3","5","7","2","4","6"} @AT@ 4099 @LENGTH@ 3
---------MOV StringLiteral@@"2" @TO@ ArrayInitializer@@{"1","3","5","7","2","4","6"} @AT@ 4104 @LENGTH@ 3
---------MOV StringLiteral@@"4" @TO@ ArrayInitializer@@{"1","3","5","7","2","4","6"} @AT@ 4109 @LENGTH@ 3
---------MOV StringLiteral@@"6" @TO@ ArrayInitializer@@{"1","3","5","7","2","4","6"} @AT@ 4114 @LENGTH@ 3


UPD IfStatement@@if (model != null && !DownloaderHelper.alreadyOnClasspath(camelContext,model.getArtifactId())) {  DownloaderHelper.downloadDependency(camelContext,model.getGroupId(),model.getArtifactId(),model.getVersion());} @TO@ if (model != null && !DownloaderHelper.alreadyOnClasspath(camelContext,model.getArtifactId(),model.getVersion())) {  DownloaderHelper.downloadDependency(camelContext,model.getGroupId(),model.getArtifactId(),model.getVersion());} @AT@ 2030 @LENGTH@ 233
---UPD InfixExpression@@model != null && !DownloaderHelper.alreadyOnClasspath(camelContext,model.getArtifactId()) @TO@ model != null && !DownloaderHelper.alreadyOnClasspath(camelContext,model.getArtifactId(),model.getVersion()) @AT@ 2034 @LENGTH@ 90
------UPD PrefixExpression@@!DownloaderHelper.alreadyOnClasspath(camelContext,model.getArtifactId()) @TO@ !DownloaderHelper.alreadyOnClasspath(camelContext,model.getArtifactId(),model.getVersion()) @AT@ 2051 @LENGTH@ 73
---------UPD MethodInvocation@@DownloaderHelper.alreadyOnClasspath(camelContext,model.getArtifactId()) @TO@ DownloaderHelper.alreadyOnClasspath(camelContext,model.getArtifactId(),model.getVersion()) @AT@ 2052 @LENGTH@ 72
------------UPD SimpleName@@MethodName:alreadyOnClasspath:[camelContext, model.getArtifactId()] @TO@ MethodName:alreadyOnClasspath:[camelContext, model.getArtifactId(), model.getVersion()] @AT@ 2069 @LENGTH@ 55
---------------INS MethodInvocation@@model.getVersion() @TO@ SimpleName@@MethodName:alreadyOnClasspath:[camelContext, model.getArtifactId()] @AT@ 2125 @LENGTH@ 18
------------------INS SimpleName@@Name:model @TO@ MethodInvocation@@model.getVersion() @AT@ 2125 @LENGTH@ 5
------------------INS SimpleName@@MethodName:getVersion:[] @TO@ MethodInvocation@@model.getVersion() @AT@ 2131 @LENGTH@ 12


UPD EnhancedForStatement@@for (GrantedAuthority grantedAuthority : authentication.getAuthorities()) {  if (this.authorities.contains(grantedAuthority)) {    return true;  }} @TO@ for (GrantedAuthority grantedAuthority : authentication.getAuthorities()) {  for (  GrantedAuthority authority : this.authorities) {    if (authority.getAuthority().equals(grantedAuthority.getAuthority())) {      return true;    }  }} @AT@ 5075 @LENGTH@ 155
---INS EnhancedForStatement@@for (GrantedAuthority authority : this.authorities) {  if (authority.getAuthority().equals(grantedAuthority.getAuthority())) {    return true;  }} @TO@ EnhancedForStatement@@for (GrantedAuthority grantedAuthority : authentication.getAuthorities()) {  if (this.authorities.contains(grantedAuthority)) {    return true;  }} @AT@ 5154 @LENGTH@ 158
------INS SingleVariableDeclaration@@GrantedAuthority authority @TO@ EnhancedForStatement@@for (GrantedAuthority authority : this.authorities) {  if (authority.getAuthority().equals(grantedAuthority.getAuthority())) {    return true;  }} @AT@ 5159 @LENGTH@ 26
---------INS SimpleType@@GrantedAuthority @TO@ SingleVariableDeclaration@@GrantedAuthority authority @AT@ 5159 @LENGTH@ 16
---------INS SimpleName@@authority @TO@ SingleVariableDeclaration@@GrantedAuthority authority @AT@ 5176 @LENGTH@ 9
------INS FieldAccess@@this.authorities @TO@ EnhancedForStatement@@for (GrantedAuthority authority : this.authorities) {  if (authority.getAuthority().equals(grantedAuthority.getAuthority())) {    return true;  }} @AT@ 5188 @LENGTH@ 16
---------MOV ThisExpression@@this @TO@ FieldAccess@@this.authorities @AT@ 5158 @LENGTH@ 4
---------MOV SimpleName@@authorities @TO@ FieldAccess@@this.authorities @AT@ 5163 @LENGTH@ 11
------INS IfStatement@@if (authority.getAuthority().equals(grantedAuthority.getAuthority())) {  return true;} @TO@ EnhancedForStatement@@for (GrantedAuthority authority : this.authorities) {  if (authority.getAuthority().equals(grantedAuthority.getAuthority())) {    return true;  }} @AT@ 5212 @LENGTH@ 95
---------MOV Block@@ThenBody:{  return true;} @TO@ IfStatement@@if (authority.getAuthority().equals(grantedAuthority.getAuthority())) {  return true;} @AT@ 5203 @LENGTH@ 23
---------INS MethodInvocation@@authority.getAuthority().equals(grantedAuthority.getAuthority()) @TO@ IfStatement@@if (authority.getAuthority().equals(grantedAuthority.getAuthority())) {  return true;} @AT@ 5216 @LENGTH@ 64
------------MOV SimpleName@@MethodName:contains:[grantedAuthority] @TO@ MethodInvocation@@authority.getAuthority().equals(grantedAuthority.getAuthority()) @AT@ 5175 @LENGTH@ 26
---------------DEL SimpleName@@grantedAuthority @AT@ 5184 @LENGTH@ 16
---------------INS MethodInvocation@@grantedAuthority.getAuthority() @TO@ SimpleName@@MethodName:contains:[grantedAuthority] @AT@ 5248 @LENGTH@ 31
------------------INS SimpleName@@Name:grantedAuthority @TO@ MethodInvocation@@grantedAuthority.getAuthority() @AT@ 5248 @LENGTH@ 16
------------------INS SimpleName@@MethodName:getAuthority:[] @TO@ MethodInvocation@@grantedAuthority.getAuthority() @AT@ 5265 @LENGTH@ 14
------------INS MethodInvocation@@MethodName:getAuthority:[] @TO@ MethodInvocation@@authority.getAuthority().equals(grantedAuthority.getAuthority()) @AT@ 5216 @LENGTH@ 24
------------INS SimpleName@@Name:authority @TO@ MethodInvocation@@authority.getAuthority().equals(grantedAuthority.getAuthority()) @AT@ 5216 @LENGTH@ 9
---DEL IfStatement@@if (this.authorities.contains(grantedAuthority)) {  return true;} @AT@ 5154 @LENGTH@ 72
------DEL MethodInvocation@@this.authorities.contains(grantedAuthority) @AT@ 5158 @LENGTH@ 43
---------DEL FieldAccess@@this.authorities @AT@ 5158 @LENGTH@ 16


UPD ExpressionStatement@@MethodInvocation:ArchiveUtils.toAsciiString(byteArray,940,2730) @TO@ MethodInvocation:assertThrows(StringIndexOutOfBoundsException.class,() -> ArchiveUtils.toAsciiString(byteArray,940,2730)) @AT@ 5386 @LENGTH@ 49
---INS MethodInvocation@@assertThrows(StringIndexOutOfBoundsException.class,() -> ArchiveUtils.toAsciiString(byteArray,940,2730)) @TO@ ExpressionStatement@@MethodInvocation:ArchiveUtils.toAsciiString(byteArray,940,2730) @AT@ 5480 @LENGTH@ 107
------INS SimpleName@@MethodName:assertThrows:[StringIndexOutOfBoundsException.class, () -> ArchiveUtils.toAsciiString(byteArray,940,2730)] @TO@ MethodInvocation@@assertThrows(StringIndexOutOfBoundsException.class,() -> ArchiveUtils.toAsciiString(byteArray,940,2730)) @AT@ 5480 @LENGTH@ 107
---------INS TypeLiteral@@StringIndexOutOfBoundsException.class @TO@ SimpleName@@MethodName:assertThrows:[StringIndexOutOfBoundsException.class, () -> ArchiveUtils.toAsciiString(byteArray,940,2730)] @AT@ 5493 @LENGTH@ 37
---------INS LambdaExpression@@() -> ArchiveUtils.toAsciiString(byteArray,940,2730) @TO@ SimpleName@@MethodName:assertThrows:[StringIndexOutOfBoundsException.class, () -> ArchiveUtils.toAsciiString(byteArray,940,2730)] @AT@ 5532 @LENGTH@ 54
------------MOV MethodInvocation@@ArchiveUtils.toAsciiString(byteArray,940,2730) @TO@ LambdaExpression@@() -> ArchiveUtils.toAsciiString(byteArray,940,2730) @AT@ 5386 @LENGTH@ 48


UPD VariableDeclarationStatement@@String[] tokens=statement.split("\\s"); @TO@ String[] tokens=command.split("\\s"); @AT@ 4429 @LENGTH@ 41
---UPD VariableDeclarationFragment@@tokens=statement.split("\\s") @TO@ tokens=command.split("\\s") @AT@ 4438 @LENGTH@ 31
------UPD MethodInvocation@@statement.split("\\s") @TO@ command.split("\\s") @AT@ 4447 @LENGTH@ 22
---------UPD SimpleName@@Name:statement @TO@ Name:command @AT@ 4447 @LENGTH@ 9


UPD TryStatement@@try (InputStream is=getCamelContext().getClassResolver().loadResourceAsStream("/global-camel-routes.xml")){  if (is != null) {    ExtendedCamelContext ecc=camelContext.adapt(ExtendedCamelContext.class);    RoutesDefinition routes=(RoutesDefinition)ecc.getXMLRoutesDefinitionLoader().loadRoutesDefinition(camelContext,is);    camelContext.addRouteDefinitions(routes.getRoutes());  }} catch (Exception e) {  LOGGER.error("Error while adding Camel context for KIE Server",e);} @TO@ try (InputStream is=org.apache.camel.util.ObjectHelper.loadResourceAsStream("/global-camel-routes.xml",getClass().getClassLoader())){  if (is != null) {    ExtendedCamelContext ecc=camelContext.adapt(ExtendedCamelContext.class);    RoutesDefinition routes=(RoutesDefinition)ecc.getXMLRoutesDefinitionLoader().loadRoutesDefinition(camelContext,is);    camelContext.addRouteDefinitions(routes.getRoutes());  }} catch (Exception e) {  LOGGER.error("Error while adding Camel context for KIE Server",e);} @AT@ 3803 @LENGTH@ 653
---UPD VariableDeclarationExpression@@InputStream is=getCamelContext().getClassResolver().loadResourceAsStream("/global-camel-routes.xml") @TO@ InputStream is=org.apache.camel.util.ObjectHelper.loadResourceAsStream("/global-camel-routes.xml",getClass().getClassLoader()) @AT@ 3808 @LENGTH@ 122
------UPD VariableDeclarationFragment@@is=getCamelContext().getClassResolver().loadResourceAsStream("/global-camel-routes.xml") @TO@ is=org.apache.camel.util.ObjectHelper.loadResourceAsStream("/global-camel-routes.xml",getClass().getClassLoader()) @AT@ 3820 @LENGTH@ 110
---------UPD MethodInvocation@@getCamelContext().getClassResolver().loadResourceAsStream("/global-camel-routes.xml") @TO@ org.apache.camel.util.ObjectHelper.loadResourceAsStream("/global-camel-routes.xml",getClass().getClassLoader()) @AT@ 3845 @LENGTH@ 85
------------DEL MethodInvocation@@MethodName:getClassResolver:[] @AT@ 3845 @LENGTH@ 36
------------INS QualifiedName@@Name:org.apache.camel.util.ObjectHelper @TO@ MethodInvocation@@getCamelContext().getClassResolver().loadResourceAsStream("/global-camel-routes.xml") @AT@ 3845 @LENGTH@ 34
------------DEL MethodInvocation@@MethodName:getCamelContext:[] @AT@ 3845 @LENGTH@ 17
------------UPD SimpleName@@MethodName:loadResourceAsStream:["/global-camel-routes.xml"] @TO@ MethodName:loadResourceAsStream:["/global-camel-routes.xml", getClass().getClassLoader()] @AT@ 3882 @LENGTH@ 48
---------------INS MethodInvocation@@getClass().getClassLoader() @TO@ SimpleName@@MethodName:loadResourceAsStream:["/global-camel-routes.xml"] @AT@ 3957 @LENGTH@ 27
------------------INS MethodInvocation@@MethodName:getClass:[] @TO@ MethodInvocation@@getClass().getClassLoader() @AT@ 3957 @LENGTH@ 10
------------------INS SimpleName@@MethodName:getClassLoader:[] @TO@ MethodInvocation@@getClass().getClassLoader() @AT@ 3968 @LENGTH@ 16


UPD ExpressionStatement@@MethodInvocation:exchange.getOut().setBody("Bye " + body) @TO@ MethodInvocation:exchange.getMessage().setBody("Bye " + body) @AT@ 3756 @LENGTH@ 41
---UPD MethodInvocation@@exchange.getOut().setBody("Bye " + body) @TO@ exchange.getMessage().setBody("Bye " + body) @AT@ 3756 @LENGTH@ 40
------UPD MethodInvocation@@MethodName:getOut:[] @TO@ MethodName:getMessage:[] @AT@ 3756 @LENGTH@ 17


UPD ExpressionStatement@@MethodInvocation:ArchiveStreamFactory.DEFAULT.createArchiveOutputStream("ArchiveTestOutput1",new ByteArrayOutputStream()) @TO@ MethodInvocation:assertThrows(ArchiveException.class,() -> ArchiveStreamFactory.DEFAULT.createArchiveOutputStream("ArchiveTestOutput1",new ByteArrayOutputStream())) @AT@ 1400 @LENGTH@ 106
---INS MethodInvocation@@assertThrows(ArchiveException.class,() -> ArchiveStreamFactory.DEFAULT.createArchiveOutputStream("ArchiveTestOutput1",new ByteArrayOutputStream())) @TO@ ExpressionStatement@@MethodInvocation:ArchiveStreamFactory.DEFAULT.createArchiveOutputStream("ArchiveTestOutput1",new ByteArrayOutputStream()) @AT@ 1367 @LENGTH@ 149
------INS SimpleName@@MethodName:assertThrows:[ArchiveException.class, () -> ArchiveStreamFactory.DEFAULT.createArchiveOutputStream("ArchiveTestOutput1",new ByteArrayOutputStream())] @TO@ MethodInvocation@@assertThrows(ArchiveException.class,() -> ArchiveStreamFactory.DEFAULT.createArchiveOutputStream("ArchiveTestOutput1",new ByteArrayOutputStream())) @AT@ 1367 @LENGTH@ 149
---------INS TypeLiteral@@ArchiveException.class @TO@ SimpleName@@MethodName:assertThrows:[ArchiveException.class, () -> ArchiveStreamFactory.DEFAULT.createArchiveOutputStream("ArchiveTestOutput1",new ByteArrayOutputStream())] @AT@ 1380 @LENGTH@ 22
---------INS LambdaExpression@@() -> ArchiveStreamFactory.DEFAULT.createArchiveOutputStream("ArchiveTestOutput1",new ByteArrayOutputStream()) @TO@ SimpleName@@MethodName:assertThrows:[ArchiveException.class, () -> ArchiveStreamFactory.DEFAULT.createArchiveOutputStream("ArchiveTestOutput1",new ByteArrayOutputStream())] @AT@ 1404 @LENGTH@ 111
------------MOV MethodInvocation@@ArchiveStreamFactory.DEFAULT.createArchiveOutputStream("ArchiveTestOutput1",new ByteArrayOutputStream()) @TO@ LambdaExpression@@() -> ArchiveStreamFactory.DEFAULT.createArchiveOutputStream("ArchiveTestOutput1",new ByteArrayOutputStream()) @AT@ 1400 @LENGTH@ 105
------------MOV MethodInvocation@@ArchiveStreamFactory.DEFAULT.createArchiveOutputStream("ArchiveTestOutput1",new ByteArrayOutputStream()) @TO@ LambdaExpression@@() -> ArchiveStreamFactory.DEFAULT.createArchiveOutputStream("ArchiveTestOutput1",new ByteArrayOutputStream()) @AT@ 1400 @LENGTH@ 105
------------MOV MethodInvocation@@ArchiveStreamFactory.DEFAULT.createArchiveOutputStream("ArchiveTestOutput1",new ByteArrayOutputStream()) @TO@ LambdaExpression@@() -> ArchiveStreamFactory.DEFAULT.createArchiveOutputStream("ArchiveTestOutput1",new ByteArrayOutputStream()) @AT@ 1400 @LENGTH@ 105


UPD TypeDeclaration@@[@Singleton, public]LocalizationService,  @TO@ [@ApplicationScoped, public]LocalizationService,  @AT@ 1203 @LENGTH@ 1686
---UPD MarkerAnnotation@@@Singleton @TO@ @ApplicationScoped @AT@ 1203 @LENGTH@ 10


UPD IfStatement@@if (isClient && exchange.hasOut()) {  message=exchange.getOut();} else {  message=exchange.getIn();} @TO@ if (isClient) {  message=exchange.getMessage();} else {  message=exchange.getIn();} @AT@ 1739 @LENGTH@ 144
---DEL InfixExpression@@isClient && exchange.hasOut() @AT@ 1743 @LENGTH@ 29
------DEL SimpleName@@isClient @AT@ 1743 @LENGTH@ 8
------DEL Operator@@&& @AT@ 1751 @LENGTH@ 2
------DEL MethodInvocation@@exchange.hasOut() @AT@ 1755 @LENGTH@ 17
---------DEL SimpleName@@Name:exchange @AT@ 1755 @LENGTH@ 8
---------DEL SimpleName@@MethodName:hasOut:[] @AT@ 1764 @LENGTH@ 8
---INS SimpleName@@isClient @TO@ IfStatement@@if (isClient && exchange.hasOut()) {  message=exchange.getOut();} else {  message=exchange.getIn();} @AT@ 1743 @LENGTH@ 8
---UPD Block@@ThenBody:{  message=exchange.getOut();} @TO@ ThenBody:{  message=exchange.getMessage();} @AT@ 1774 @LENGTH@ 52
------UPD ExpressionStatement@@Assignment:message=exchange.getOut() @TO@ Assignment:message=exchange.getMessage() @AT@ 1788 @LENGTH@ 28
---------UPD Assignment@@message=exchange.getOut() @TO@ message=exchange.getMessage() @AT@ 1788 @LENGTH@ 27
------------UPD MethodInvocation@@exchange.getOut() @TO@ exchange.getMessage() @AT@ 1798 @LENGTH@ 17
---------------UPD SimpleName@@MethodName:getOut:[] @TO@ MethodName:getMessage:[] @AT@ 1807 @LENGTH@ 8


UPD ThrowStatement@@ClassInstanceCreation:new RuntimeException(ex.getMessage(),ex) @TO@ ClassInstanceCreation:new UncheckedIOException(ex.getMessage(),ex) @AT@ 36147 @LENGTH@ 48
---UPD ClassInstanceCreation@@RuntimeException[ex.getMessage(), ex] @TO@ UncheckedIOException[ex.getMessage(), ex] @AT@ 36153 @LENGTH@ 41
------UPD SimpleType@@RuntimeException @TO@ UncheckedIOException @AT@ 36157 @LENGTH@ 16


UPD ExpressionStatement@@MethodInvocation:assertMockEndpointsSatisfied(2000,TimeUnit.MILLISECONDS) @TO@ MethodInvocation:out.setSleepForEmptyTest(2_000) @AT@ 3010 @LENGTH@ 58
---UPD MethodInvocation@@assertMockEndpointsSatisfied(2000,TimeUnit.MILLISECONDS) @TO@ out.setSleepForEmptyTest(2_000) @AT@ 3010 @LENGTH@ 57
------INS SimpleName@@Name:out @TO@ MethodInvocation@@assertMockEndpointsSatisfied(2000,TimeUnit.MILLISECONDS) @AT@ 3010 @LENGTH@ 3
------UPD SimpleName@@MethodName:assertMockEndpointsSatisfied:[2000, TimeUnit.MILLISECONDS] @TO@ MethodName:setSleepForEmptyTest:[2_000] @AT@ 3010 @LENGTH@ 57
---------UPD NumberLiteral@@2000 @TO@ 2_000 @AT@ 3039 @LENGTH@ 4
---------DEL QualifiedName@@TimeUnit.MILLISECONDS @AT@ 3045 @LENGTH@ 21
------------DEL SimpleName@@TimeUnit @AT@ 3045 @LENGTH@ 8
------------DEL SimpleName@@MILLISECONDS @AT@ 3054 @LENGTH@ 12


INS MethodDeclaration@@void, MethodName:saveAllAsWithEmptyList, @Autowired ReactiveNeo4jTemplate template,  @TO@ TypeDeclaration@@[@Neo4jIntegrationTest, @Tag(Neo4jExtension.NEEDS_REACTIVE_SUPPORT)]ReactiveNeo4jTemplateIT,  @AT@ 26102 @LENGTH@ 194
---INS PrimitiveType@@void @TO@ MethodDeclaration@@void, MethodName:saveAllAsWithEmptyList, @Autowired ReactiveNeo4jTemplate template,  @AT@ 26097 @LENGTH@ 4
---INS SimpleName@@MethodName:saveAllAsWithEmptyList @TO@ MethodDeclaration@@void, MethodName:saveAllAsWithEmptyList, @Autowired ReactiveNeo4jTemplate template,  @AT@ 26102 @LENGTH@ 22
---INS SingleVariableDeclaration@@@Autowired ReactiveNeo4jTemplate template @TO@ MethodDeclaration@@void, MethodName:saveAllAsWithEmptyList, @Autowired ReactiveNeo4jTemplate template,  @AT@ 26125 @LENGTH@ 41
------INS SimpleType@@ReactiveNeo4jTemplate @TO@ SingleVariableDeclaration@@@Autowired ReactiveNeo4jTemplate template @AT@ 26136 @LENGTH@ 21
------INS SimpleName@@template @TO@ SingleVariableDeclaration@@@Autowired ReactiveNeo4jTemplate template @AT@ 26158 @LENGTH@ 8
---INS ExpressionStatement@@MethodInvocation:template.saveAllAs(Collections.emptyList(),ClosedProjection.class).as(StepVerifier::create).verifyComplete() @TO@ MethodDeclaration@@void, MethodName:saveAllAsWithEmptyList, @Autowired ReactiveNeo4jTemplate template,  @AT@ 26173 @LENGTH@ 120
------INS MethodInvocation@@template.saveAllAs(Collections.emptyList(),ClosedProjection.class).as(StepVerifier::create).verifyComplete() @TO@ ExpressionStatement@@MethodInvocation:template.saveAllAs(Collections.emptyList(),ClosedProjection.class).as(StepVerifier::create).verifyComplete() @AT@ 26173 @LENGTH@ 119
---------INS MethodInvocation@@MethodName:as:[StepVerifier::create] @TO@ MethodInvocation@@template.saveAllAs(Collections.emptyList(),ClosedProjection.class).as(StepVerifier::create).verifyComplete() @AT@ 26173 @LENGTH@ 97
---------INS MethodInvocation@@MethodName:saveAllAs:[Collections.emptyList(), ClosedProjection.class] @TO@ MethodInvocation@@template.saveAllAs(Collections.emptyList(),ClosedProjection.class).as(StepVerifier::create).verifyComplete() @AT@ 26173 @LENGTH@ 67
------------INS MethodInvocation@@Collections.emptyList() @TO@ MethodInvocation@@MethodName:saveAllAs:[Collections.emptyList(), ClosedProjection.class] @AT@ 26192 @LENGTH@ 23
---------------INS SimpleName@@Name:Collections @TO@ MethodInvocation@@Collections.emptyList() @AT@ 26192 @LENGTH@ 11
---------------INS SimpleName@@MethodName:emptyList:[] @TO@ MethodInvocation@@Collections.emptyList() @AT@ 26204 @LENGTH@ 11
------------INS TypeLiteral@@ClosedProjection.class @TO@ MethodInvocation@@MethodName:saveAllAs:[Collections.emptyList(), ClosedProjection.class] @AT@ 26217 @LENGTH@ 22
---------INS SimpleName@@Name:template @TO@ MethodInvocation@@template.saveAllAs(Collections.emptyList(),ClosedProjection.class).as(StepVerifier::create).verifyComplete() @AT@ 26173 @LENGTH@ 8
---------INS SimpleName@@MethodName:verifyComplete:[] @TO@ MethodInvocation@@template.saveAllAs(Collections.emptyList(),ClosedProjection.class).as(StepVerifier::create).verifyComplete() @AT@ 26276 @LENGTH@ 16


INS MethodDeclaration@@List<String>, MethodName:findAllAndSortByFunctionResultPositionalParameter, @Param("positionalParameter1") String positionalParameter1, @Param("positionalParameter2") String positionalParameter2, Sort sort,  @TO@ TypeDeclaration@@[public]UserRepository, [JpaRepository<User,Integer>, JpaSpecificationExecutor<User>, UserRepositoryCustom] @AT@ 21746 @LENGTH@ 188
---INS ParameterizedType@@List<String> @TO@ MethodDeclaration@@List<String>, MethodName:findAllAndSortByFunctionResultPositionalParameter, @Param("positionalParameter1") String positionalParameter1, @Param("positionalParameter2") String positionalParameter2, Sort sort,  @AT@ 21733 @LENGTH@ 12
------INS SimpleType@@List @TO@ ParameterizedType@@List<String> @AT@ 21733 @LENGTH@ 4
------INS SimpleType@@String @TO@ ParameterizedType@@List<String> @AT@ 21738 @LENGTH@ 6
---INS SimpleName@@MethodName:findAllAndSortByFunctionResultPositionalParameter @TO@ MethodDeclaration@@List<String>, MethodName:findAllAndSortByFunctionResultPositionalParameter, @Param("positionalParameter1") String positionalParameter1, @Param("positionalParameter2") String positionalParameter2, Sort sort,  @AT@ 21746 @LENGTH@ 49
---INS SingleVariableDeclaration@@@Param("positionalParameter1") String positionalParameter1 @TO@ MethodDeclaration@@List<String>, MethodName:findAllAndSortByFunctionResultPositionalParameter, @Param("positionalParameter1") String positionalParameter1, @Param("positionalParameter2") String positionalParameter2, Sort sort,  @AT@ 21800 @LENGTH@ 58
------INS SimpleType@@String @TO@ SingleVariableDeclaration@@@Param("positionalParameter1") String positionalParameter1 @AT@ 21831 @LENGTH@ 6
------INS SimpleName@@positionalParameter1 @TO@ SingleVariableDeclaration@@@Param("positionalParameter1") String positionalParameter1 @AT@ 21838 @LENGTH@ 20
---INS SingleVariableDeclaration@@@Param("positionalParameter2") String positionalParameter2 @TO@ MethodDeclaration@@List<String>, MethodName:findAllAndSortByFunctionResultPositionalParameter, @Param("positionalParameter1") String positionalParameter1, @Param("positionalParameter2") String positionalParameter2, Sort sort,  @AT@ 21863 @LENGTH@ 58
------INS SimpleType@@String @TO@ SingleVariableDeclaration@@@Param("positionalParameter2") String positionalParameter2 @AT@ 21894 @LENGTH@ 6
------INS SimpleName@@positionalParameter2 @TO@ SingleVariableDeclaration@@@Param("positionalParameter2") String positionalParameter2 @AT@ 21901 @LENGTH@ 20
---INS SingleVariableDeclaration@@Sort sort @TO@ MethodDeclaration@@List<String>, MethodName:findAllAndSortByFunctionResultPositionalParameter, @Param("positionalParameter1") String positionalParameter1, @Param("positionalParameter2") String positionalParameter2, Sort sort,  @AT@ 21923 @LENGTH@ 9
------INS SimpleType@@Sort @TO@ SingleVariableDeclaration@@Sort sort @AT@ 21923 @LENGTH@ 4
------INS SimpleName@@sort @TO@ SingleVariableDeclaration@@Sort sort @AT@ 21928 @LENGTH@ 4


UPD MethodDeclaration@@private, void, MethodName:createCircularOsSymLink, final String linkName, final String targetName, IOException,  @TO@ private, Path, MethodName:createCircularOsSymLink, final String linkName, final String targetName, IOException,  @AT@ 6698 @LENGTH@ 599
---DEL PrimitiveType@@void @AT@ 6706 @LENGTH@ 4
---INS SimpleType@@Path @TO@ MethodDeclaration@@private, void, MethodName:createCircularOsSymLink, final String linkName, final String targetName, IOException,  @AT@ 6706 @LENGTH@ 4
---DEL IfStatement@@if (FilenameUtils.isSystemWindows()) {  try {    Runtime.getRuntime().exec("mklink /D " + linkName + " "+ targetName);  } catch (  final IOException ioe) {    ioe.printStackTrace();  }} else {  Runtime.getRuntime().exec("ln -s " + targetName + " "+ linkName);} @AT@ 6812 @LENGTH@ 479
------DEL MethodInvocation@@FilenameUtils.isSystemWindows() @AT@ 6816 @LENGTH@ 31
---------DEL SimpleName@@MethodName:isSystemWindows:[] @AT@ 6830 @LENGTH@ 17
------DEL Block@@ThenBody:{  try {    Runtime.getRuntime().exec("mklink /D " + linkName + " "+ targetName);  } catch (  final IOException ioe) {    ioe.printStackTrace();  }} @AT@ 6849 @LENGTH@ 305
---------DEL TryStatement@@try {  Runtime.getRuntime().exec("mklink /D " + linkName + " "+ targetName);} catch (final IOException ioe) {  ioe.printStackTrace();} @AT@ 6886 @LENGTH@ 258
------------DEL ExpressionStatement@@MethodInvocation:Runtime.getRuntime().exec("mklink /D " + linkName + " "+ targetName) @AT@ 6908 @LENGTH@ 70
---------------DEL MethodInvocation@@Runtime.getRuntime().exec("mklink /D " + linkName + " "+ targetName) @AT@ 6908 @LENGTH@ 69
------------------DEL MethodInvocation@@MethodName:getRuntime:[] @AT@ 6908 @LENGTH@ 20
------------DEL CatchClause@@catch (final IOException ioe) {  ioe.printStackTrace();} @AT@ 6993 @LENGTH@ 151
---------------DEL SingleVariableDeclaration@@final IOException ioe @AT@ 7000 @LENGTH@ 21
------------------DEL Modifier@@final @AT@ 7000 @LENGTH@ 5
------------------DEL SimpleType@@IOException @AT@ 7006 @LENGTH@ 11
------------------DEL SimpleName@@ioe @AT@ 7018 @LENGTH@ 3
---------------DEL ExpressionStatement@@MethodInvocation:ioe.printStackTrace() @AT@ 7108 @LENGTH@ 22
------------------DEL MethodInvocation@@ioe.printStackTrace() @AT@ 7108 @LENGTH@ 21
---------------------DEL SimpleName@@Name:ioe @AT@ 7108 @LENGTH@ 3
---------------------DEL SimpleName@@MethodName:printStackTrace:[] @AT@ 7112 @LENGTH@ 17
------DEL Block@@ElseBody:{  Runtime.getRuntime().exec("ln -s " + targetName + " "+ linkName);} @AT@ 7160 @LENGTH@ 131
---------DEL ExpressionStatement@@MethodInvocation:Runtime.getRuntime().exec("ln -s " + targetName + " "+ linkName) @AT@ 7215 @LENGTH@ 66
------------DEL MethodInvocation@@Runtime.getRuntime().exec("ln -s " + targetName + " "+ linkName) @AT@ 7215 @LENGTH@ 65
---------------DEL MethodInvocation@@MethodName:getRuntime:[] @AT@ 7215 @LENGTH@ 20
---INS ReturnStatement@@MethodInvocation:Files.createSymbolicLink(Paths.get(linkName),Paths.get(targetName)) @TO@ MethodDeclaration@@private, void, MethodName:createCircularOsSymLink, final String linkName, final String targetName, IOException,  @AT@ 6812 @LENGTH@ 76
------INS MethodInvocation@@Files.createSymbolicLink(Paths.get(linkName),Paths.get(targetName)) @TO@ ReturnStatement@@MethodInvocation:Files.createSymbolicLink(Paths.get(linkName),Paths.get(targetName)) @AT@ 6819 @LENGTH@ 68
---------MOV SimpleName@@Name:FilenameUtils @TO@ MethodInvocation@@Files.createSymbolicLink(Paths.get(linkName),Paths.get(targetName)) @AT@ 6816 @LENGTH@ 13
---------INS SimpleName@@MethodName:createSymbolicLink:[Paths.get(linkName), Paths.get(targetName)] @TO@ MethodInvocation@@Files.createSymbolicLink(Paths.get(linkName),Paths.get(targetName)) @AT@ 6825 @LENGTH@ 62
------------INS MethodInvocation@@Paths.get(linkName) @TO@ SimpleName@@MethodName:createSymbolicLink:[Paths.get(linkName), Paths.get(targetName)] @AT@ 6844 @LENGTH@ 19
---------------MOV SimpleName@@Name:Runtime @TO@ MethodInvocation@@Paths.get(linkName) @AT@ 6908 @LENGTH@ 7
---------------MOV SimpleName@@MethodName:exec:["mklink /D " + linkName + " "+ targetName] @TO@ MethodInvocation@@Paths.get(linkName) @AT@ 6929 @LENGTH@ 48
------------------INS SimpleName@@linkName @TO@ SimpleName@@MethodName:exec:["mklink /D " + linkName + " "+ targetName] @AT@ 6854 @LENGTH@ 8
------------INS MethodInvocation@@Paths.get(targetName) @TO@ SimpleName@@MethodName:createSymbolicLink:[Paths.get(linkName), Paths.get(targetName)] @AT@ 6865 @LENGTH@ 21
---------------MOV SimpleName@@Name:Runtime @TO@ MethodInvocation@@Paths.get(targetName) @AT@ 7215 @LENGTH@ 7
---------------MOV SimpleName@@MethodName:exec:["ln -s " + targetName + " "+ linkName] @TO@ MethodInvocation@@Paths.get(targetName) @AT@ 7236 @LENGTH@ 44
------------------INS SimpleName@@targetName @TO@ SimpleName@@MethodName:exec:["ln -s " + targetName + " "+ linkName] @AT@ 6875 @LENGTH@ 10


UPD ReturnStatement@@MethodInvocation:singleInputs.stream().map(input -> {
  List<SelectorItem<String>> selectorItems=input.getSelectItems().entrySet().stream().map(e -> SelectorItem.of(e.getKey(),e.getValue())).collect(Collectors.toList());
  SingleItemSelector<String,SelectorItem<String>> selector=new SingleItemSelector<>(terminal,selectorItems,input.getName(),input.getComparator());
  Function<ComponentContext<?>,ComponentContext<?>> operation=(context) -> {
    if (input.getResultMode() == ResultMode.ACCEPT && input.isStoreResult() && StringUtils.hasText(input.getResultValue())) {
      context.put(input.getId(),input.getResultValue());
      return context;
    }
    selector.setResourceLoader(resourceLoader);
    selector.setTemplateExecutor(templateExecutor);
    if (StringUtils.hasText(input.getTemplateLocation())) {
      selector.setTemplateLocation(input.getTemplateLocation());
    }
    if (input.getRenderer() != null) {
      selector.setRenderer(input.getRenderer());
    }
    if (input.getMaxItems() != null) {
      selector.setMaxItems(input.getMaxItems());
    }
    if (input.isStoreResult()) {
      selector.addPostRunHandler(c -> {
        c.getValue().ifPresent(v -> {
          c.put(input.getId(),v);
        }
);
      }
);
    }
    for (    Consumer<SingleItemSelectorContext<String,SelectorItem<String>>> handler : input.getPreHandlers()) {
      selector.addPreRunHandler(handler);
    }
    for (    Consumer<SingleItemSelectorContext<String,SelectorItem<String>>> handler : input.getPostHandlers()) {
      selector.addPostRunHandler(handler);
    }
    return selector.run(context);
  }
;
  Function<SingleItemSelectorContext<String,SelectorItem<String>>,String> f1=input.getNext();
  Function<ComponentContext<?>,Optional<String>> f2=context -> f1 != null ? Optional.ofNullable(f1.apply(selector.getThisContext(context))) : Optional.empty();
  return OrderedInputOperation.of(input.getId(),input.getOrder(),operation,f2);
}
) @TO@ MethodInvocation:singleInputs.stream().map(input -> {
  List<SelectorItem<String>> selectorItems=input.getSelectItems().entrySet().stream().map(e -> SelectorItem.of(e.getKey(),e.getValue())).collect(Collectors.toList());
  String defaultSelect=input.getDefaultSelect();
  Stream<SelectorItem<String>> defaultCheckStream=StringUtils.hasText(defaultSelect) ? selectorItems.stream() : Stream.empty();
  SelectorItem<String> defaultExpose=defaultCheckStream.filter(si -> ObjectUtils.nullSafeEquals(defaultSelect,si.getName())).findFirst().orElse(null);
  SingleItemSelector<String,SelectorItem<String>> selector=new SingleItemSelector<>(terminal,selectorItems,input.getName(),input.getComparator());
  selector.setDefaultExpose(defaultExpose);
  Function<ComponentContext<?>,ComponentContext<?>> operation=(context) -> {
    if (input.getResultMode() == ResultMode.ACCEPT && input.isStoreResult() && StringUtils.hasText(input.getResultValue())) {
      context.put(input.getId(),input.getResultValue());
      return context;
    }
    selector.setResourceLoader(resourceLoader);
    selector.setTemplateExecutor(templateExecutor);
    if (StringUtils.hasText(input.getTemplateLocation())) {
      selector.setTemplateLocation(input.getTemplateLocation());
    }
    if (input.getRenderer() != null) {
      selector.setRenderer(input.getRenderer());
    }
    if (input.getMaxItems() != null) {
      selector.setMaxItems(input.getMaxItems());
    }
    if (input.isStoreResult()) {
      selector.addPostRunHandler(c -> {
        c.getValue().ifPresent(v -> {
          c.put(input.getId(),v);
        }
);
      }
);
    }
    for (    Consumer<SingleItemSelectorContext<String,SelectorItem<String>>> handler : input.getPreHandlers()) {
      selector.addPreRunHandler(handler);
    }
    for (    Consumer<SingleItemSelectorContext<String,SelectorItem<String>>> handler : input.getPostHandlers()) {
      selector.addPostRunHandler(handler);
    }
    return selector.run(context);
  }
;
  Function<SingleItemSelectorContext<String,SelectorItem<String>>,String> f1=input.getNext();
  Function<ComponentContext<?>,Optional<String>> f2=context -> f1 != null ? Optional.ofNullable(f1.apply(selector.getThisContext(context))) : Optional.empty();
  return OrderedInputOperation.of(input.getId(),input.getOrder(),operation,f2);
}
) @AT@ 16882 @LENGTH@ 2025
---UPD MethodInvocation@@singleInputs.stream().map(input -> {
  List<SelectorItem<String>> selectorItems=input.getSelectItems().entrySet().stream().map(e -> SelectorItem.of(e.getKey(),e.getValue())).collect(Collectors.toList());
  SingleItemSelector<String,SelectorItem<String>> selector=new SingleItemSelector<>(terminal,selectorItems,input.getName(),input.getComparator());
  Function<ComponentContext<?>,ComponentContext<?>> operation=(context) -> {
    if (input.getResultMode() == ResultMode.ACCEPT && input.isStoreResult() && StringUtils.hasText(input.getResultValue())) {
      context.put(input.getId(),input.getResultValue());
      return context;
    }
    selector.setResourceLoader(resourceLoader);
    selector.setTemplateExecutor(templateExecutor);
    if (StringUtils.hasText(input.getTemplateLocation())) {
      selector.setTemplateLocation(input.getTemplateLocation());
    }
    if (input.getRenderer() != null) {
      selector.setRenderer(input.getRenderer());
    }
    if (input.getMaxItems() != null) {
      selector.setMaxItems(input.getMaxItems());
    }
    if (input.isStoreResult()) {
      selector.addPostRunHandler(c -> {
        c.getValue().ifPresent(v -> {
          c.put(input.getId(),v);
        }
);
      }
);
    }
    for (    Consumer<SingleItemSelectorContext<String,SelectorItem<String>>> handler : input.getPreHandlers()) {
      selector.addPreRunHandler(handler);
    }
    for (    Consumer<SingleItemSelectorContext<String,SelectorItem<String>>> handler : input.getPostHandlers()) {
      selector.addPostRunHandler(handler);
    }
    return selector.run(context);
  }
;
  Function<SingleItemSelectorContext<String,SelectorItem<String>>,String> f1=input.getNext();
  Function<ComponentContext<?>,Optional<String>> f2=context -> f1 != null ? Optional.ofNullable(f1.apply(selector.getThisContext(context))) : Optional.empty();
  return OrderedInputOperation.of(input.getId(),input.getOrder(),operation,f2);
}
) @TO@ singleInputs.stream().map(input -> {
  List<SelectorItem<String>> selectorItems=input.getSelectItems().entrySet().stream().map(e -> SelectorItem.of(e.getKey(),e.getValue())).collect(Collectors.toList());
  String defaultSelect=input.getDefaultSelect();
  Stream<SelectorItem<String>> defaultCheckStream=StringUtils.hasText(defaultSelect) ? selectorItems.stream() : Stream.empty();
  SelectorItem<String> defaultExpose=defaultCheckStream.filter(si -> ObjectUtils.nullSafeEquals(defaultSelect,si.getName())).findFirst().orElse(null);
  SingleItemSelector<String,SelectorItem<String>> selector=new SingleItemSelector<>(terminal,selectorItems,input.getName(),input.getComparator());
  selector.setDefaultExpose(defaultExpose);
  Function<ComponentContext<?>,ComponentContext<?>> operation=(context) -> {
    if (input.getResultMode() == ResultMode.ACCEPT && input.isStoreResult() && StringUtils.hasText(input.getResultValue())) {
      context.put(input.getId(),input.getResultValue());
      return context;
    }
    selector.setResourceLoader(resourceLoader);
    selector.setTemplateExecutor(templateExecutor);
    if (StringUtils.hasText(input.getTemplateLocation())) {
      selector.setTemplateLocation(input.getTemplateLocation());
    }
    if (input.getRenderer() != null) {
      selector.setRenderer(input.getRenderer());
    }
    if (input.getMaxItems() != null) {
      selector.setMaxItems(input.getMaxItems());
    }
    if (input.isStoreResult()) {
      selector.addPostRunHandler(c -> {
        c.getValue().ifPresent(v -> {
          c.put(input.getId(),v);
        }
);
      }
);
    }
    for (    Consumer<SingleItemSelectorContext<String,SelectorItem<String>>> handler : input.getPreHandlers()) {
      selector.addPreRunHandler(handler);
    }
    for (    Consumer<SingleItemSelectorContext<String,SelectorItem<String>>> handler : input.getPostHandlers()) {
      selector.addPostRunHandler(handler);
    }
    return selector.run(context);
  }
;
  Function<SingleItemSelectorContext<String,SelectorItem<String>>,String> f1=input.getNext();
  Function<ComponentContext<?>,Optional<String>> f2=context -> f1 != null ? Optional.ofNullable(f1.apply(selector.getThisContext(context))) : Optional.empty();
  return OrderedInputOperation.of(input.getId(),input.getOrder(),operation,f2);
}
) @AT@ 16889 @LENGTH@ 2017
------UPD SimpleName@@MethodName:map:[input -> {
  List<SelectorItem<String>> selectorItems=input.getSelectItems().entrySet().stream().map(e -> SelectorItem.of(e.getKey(),e.getValue())).collect(Collectors.toList());
  SingleItemSelector<String,SelectorItem<String>> selector=new SingleItemSelector<>(terminal,selectorItems,input.getName(),input.getComparator());
  Function<ComponentContext<?>,ComponentContext<?>> operation=(context) -> {
    if (input.getResultMode() == ResultMode.ACCEPT && input.isStoreResult() && StringUtils.hasText(input.getResultValue())) {
      context.put(input.getId(),input.getResultValue());
      return context;
    }
    selector.setResourceLoader(resourceLoader);
    selector.setTemplateExecutor(templateExecutor);
    if (StringUtils.hasText(input.getTemplateLocation())) {
      selector.setTemplateLocation(input.getTemplateLocation());
    }
    if (input.getRenderer() != null) {
      selector.setRenderer(input.getRenderer());
    }
    if (input.getMaxItems() != null) {
      selector.setMaxItems(input.getMaxItems());
    }
    if (input.isStoreResult()) {
      selector.addPostRunHandler(c -> {
        c.getValue().ifPresent(v -> {
          c.put(input.getId(),v);
        }
);
      }
);
    }
    for (    Consumer<SingleItemSelectorContext<String,SelectorItem<String>>> handler : input.getPreHandlers()) {
      selector.addPreRunHandler(handler);
    }
    for (    Consumer<SingleItemSelectorContext<String,SelectorItem<String>>> handler : input.getPostHandlers()) {
      selector.addPostRunHandler(handler);
    }
    return selector.run(context);
  }
;
  Function<SingleItemSelectorContext<String,SelectorItem<String>>,String> f1=input.getNext();
  Function<ComponentContext<?>,Optional<String>> f2=context -> f1 != null ? Optional.ofNullable(f1.apply(selector.getThisContext(context))) : Optional.empty();
  return OrderedInputOperation.of(input.getId(),input.getOrder(),operation,f2);
}
] @TO@ MethodName:map:[input -> {
  List<SelectorItem<String>> selectorItems=input.getSelectItems().entrySet().stream().map(e -> SelectorItem.of(e.getKey(),e.getValue())).collect(Collectors.toList());
  String defaultSelect=input.getDefaultSelect();
  Stream<SelectorItem<String>> defaultCheckStream=StringUtils.hasText(defaultSelect) ? selectorItems.stream() : Stream.empty();
  SelectorItem<String> defaultExpose=defaultCheckStream.filter(si -> ObjectUtils.nullSafeEquals(defaultSelect,si.getName())).findFirst().orElse(null);
  SingleItemSelector<String,SelectorItem<String>> selector=new SingleItemSelector<>(terminal,selectorItems,input.getName(),input.getComparator());
  selector.setDefaultExpose(defaultExpose);
  Function<ComponentContext<?>,ComponentContext<?>> operation=(context) -> {
    if (input.getResultMode() == ResultMode.ACCEPT && input.isStoreResult() && StringUtils.hasText(input.getResultValue())) {
      context.put(input.getId(),input.getResultValue());
      return context;
    }
    selector.setResourceLoader(resourceLoader);
    selector.setTemplateExecutor(templateExecutor);
    if (StringUtils.hasText(input.getTemplateLocation())) {
      selector.setTemplateLocation(input.getTemplateLocation());
    }
    if (input.getRenderer() != null) {
      selector.setRenderer(input.getRenderer());
    }
    if (input.getMaxItems() != null) {
      selector.setMaxItems(input.getMaxItems());
    }
    if (input.isStoreResult()) {
      selector.addPostRunHandler(c -> {
        c.getValue().ifPresent(v -> {
          c.put(input.getId(),v);
        }
);
      }
);
    }
    for (    Consumer<SingleItemSelectorContext<String,SelectorItem<String>>> handler : input.getPreHandlers()) {
      selector.addPreRunHandler(handler);
    }
    for (    Consumer<SingleItemSelectorContext<String,SelectorItem<String>>> handler : input.getPostHandlers()) {
      selector.addPostRunHandler(handler);
    }
    return selector.run(context);
  }
;
  Function<SingleItemSelectorContext<String,SelectorItem<String>>,String> f1=input.getNext();
  Function<ComponentContext<?>,Optional<String>> f2=context -> f1 != null ? Optional.ofNullable(f1.apply(selector.getThisContext(context))) : Optional.empty();
  return OrderedInputOperation.of(input.getId(),input.getOrder(),operation,f2);
}
] @AT@ 16911 @LENGTH@ 1995
---------UPD LambdaExpression@@input -> {
  List<SelectorItem<String>> selectorItems=input.getSelectItems().entrySet().stream().map(e -> SelectorItem.of(e.getKey(),e.getValue())).collect(Collectors.toList());
  SingleItemSelector<String,SelectorItem<String>> selector=new SingleItemSelector<>(terminal,selectorItems,input.getName(),input.getComparator());
  Function<ComponentContext<?>,ComponentContext<?>> operation=(context) -> {
    if (input.getResultMode() == ResultMode.ACCEPT && input.isStoreResult() && StringUtils.hasText(input.getResultValue())) {
      context.put(input.getId(),input.getResultValue());
      return context;
    }
    selector.setResourceLoader(resourceLoader);
    selector.setTemplateExecutor(templateExecutor);
    if (StringUtils.hasText(input.getTemplateLocation())) {
      selector.setTemplateLocation(input.getTemplateLocation());
    }
    if (input.getRenderer() != null) {
      selector.setRenderer(input.getRenderer());
    }
    if (input.getMaxItems() != null) {
      selector.setMaxItems(input.getMaxItems());
    }
    if (input.isStoreResult()) {
      selector.addPostRunHandler(c -> {
        c.getValue().ifPresent(v -> {
          c.put(input.getId(),v);
        }
);
      }
);
    }
    for (    Consumer<SingleItemSelectorContext<String,SelectorItem<String>>> handler : input.getPreHandlers()) {
      selector.addPreRunHandler(handler);
    }
    for (    Consumer<SingleItemSelectorContext<String,SelectorItem<String>>> handler : input.getPostHandlers()) {
      selector.addPostRunHandler(handler);
    }
    return selector.run(context);
  }
;
  Function<SingleItemSelectorContext<String,SelectorItem<String>>,String> f1=input.getNext();
  Function<ComponentContext<?>,Optional<String>> f2=context -> f1 != null ? Optional.ofNullable(f1.apply(selector.getThisContext(context))) : Optional.empty();
  return OrderedInputOperation.of(input.getId(),input.getOrder(),operation,f2);
}
 @TO@ input -> {
  List<SelectorItem<String>> selectorItems=input.getSelectItems().entrySet().stream().map(e -> SelectorItem.of(e.getKey(),e.getValue())).collect(Collectors.toList());
  String defaultSelect=input.getDefaultSelect();
  Stream<SelectorItem<String>> defaultCheckStream=StringUtils.hasText(defaultSelect) ? selectorItems.stream() : Stream.empty();
  SelectorItem<String> defaultExpose=defaultCheckStream.filter(si -> ObjectUtils.nullSafeEquals(defaultSelect,si.getName())).findFirst().orElse(null);
  SingleItemSelector<String,SelectorItem<String>> selector=new SingleItemSelector<>(terminal,selectorItems,input.getName(),input.getComparator());
  selector.setDefaultExpose(defaultExpose);
  Function<ComponentContext<?>,ComponentContext<?>> operation=(context) -> {
    if (input.getResultMode() == ResultMode.ACCEPT && input.isStoreResult() && StringUtils.hasText(input.getResultValue())) {
      context.put(input.getId(),input.getResultValue());
      return context;
    }
    selector.setResourceLoader(resourceLoader);
    selector.setTemplateExecutor(templateExecutor);
    if (StringUtils.hasText(input.getTemplateLocation())) {
      selector.setTemplateLocation(input.getTemplateLocation());
    }
    if (input.getRenderer() != null) {
      selector.setRenderer(input.getRenderer());
    }
    if (input.getMaxItems() != null) {
      selector.setMaxItems(input.getMaxItems());
    }
    if (input.isStoreResult()) {
      selector.addPostRunHandler(c -> {
        c.getValue().ifPresent(v -> {
          c.put(input.getId(),v);
        }
);
      }
);
    }
    for (    Consumer<SingleItemSelectorContext<String,SelectorItem<String>>> handler : input.getPreHandlers()) {
      selector.addPreRunHandler(handler);
    }
    for (    Consumer<SingleItemSelectorContext<String,SelectorItem<String>>> handler : input.getPostHandlers()) {
      selector.addPostRunHandler(handler);
    }
    return selector.run(context);
  }
;
  Function<SingleItemSelectorContext<String,SelectorItem<String>>,String> f1=input.getNext();
  Function<ComponentContext<?>,Optional<String>> f2=context -> f1 != null ? Optional.ofNullable(f1.apply(selector.getThisContext(context))) : Optional.empty();
  return OrderedInputOperation.of(input.getId(),input.getOrder(),operation,f2);
}
 @AT@ 16915 @LENGTH@ 1990
------------INS VariableDeclarationStatement@@String defaultSelect=input.getDefaultSelect(); @TO@ LambdaExpression@@input -> {
  List<SelectorItem<String>> selectorItems=input.getSelectItems().entrySet().stream().map(e -> SelectorItem.of(e.getKey(),e.getValue())).collect(Collectors.toList());
  SingleItemSelector<String,SelectorItem<String>> selector=new SingleItemSelector<>(terminal,selectorItems,input.getName(),input.getComparator());
  Function<ComponentContext<?>,ComponentContext<?>> operation=(context) -> {
    if (input.getResultMode() == ResultMode.ACCEPT && input.isStoreResult() && StringUtils.hasText(input.getResultValue())) {
      context.put(input.getId(),input.getResultValue());
      return context;
    }
    selector.setResourceLoader(resourceLoader);
    selector.setTemplateExecutor(templateExecutor);
    if (StringUtils.hasText(input.getTemplateLocation())) {
      selector.setTemplateLocation(input.getTemplateLocation());
    }
    if (input.getRenderer() != null) {
      selector.setRenderer(input.getRenderer());
    }
    if (input.getMaxItems() != null) {
      selector.setMaxItems(input.getMaxItems());
    }
    if (input.isStoreResult()) {
      selector.addPostRunHandler(c -> {
        c.getValue().ifPresent(v -> {
          c.put(input.getId(),v);
        }
);
      }
);
    }
    for (    Consumer<SingleItemSelectorContext<String,SelectorItem<String>>> handler : input.getPreHandlers()) {
      selector.addPreRunHandler(handler);
    }
    for (    Consumer<SingleItemSelectorContext<String,SelectorItem<String>>> handler : input.getPostHandlers()) {
      selector.addPostRunHandler(handler);
    }
    return selector.run(context);
  }
;
  Function<SingleItemSelectorContext<String,SelectorItem<String>>,String> f1=input.getNext();
  Function<ComponentContext<?>,Optional<String>> f2=context -> f1 != null ? Optional.ofNullable(f1.apply(selector.getThisContext(context))) : Optional.empty();
  return OrderedInputOperation.of(input.getId(),input.getOrder(),operation,f2);
}
 @AT@ 17161 @LENGTH@ 48
---------------INS SimpleType@@String @TO@ VariableDeclarationStatement@@String defaultSelect=input.getDefaultSelect(); @AT@ 17161 @LENGTH@ 6
---------------INS VariableDeclarationFragment@@defaultSelect=input.getDefaultSelect() @TO@ VariableDeclarationStatement@@String defaultSelect=input.getDefaultSelect(); @AT@ 17168 @LENGTH@ 40
------------------INS SimpleName@@defaultSelect @TO@ VariableDeclarationFragment@@defaultSelect=input.getDefaultSelect() @AT@ 17168 @LENGTH@ 13
------------------INS MethodInvocation@@input.getDefaultSelect() @TO@ VariableDeclarationFragment@@defaultSelect=input.getDefaultSelect() @AT@ 17184 @LENGTH@ 24
---------------------INS SimpleName@@Name:input @TO@ MethodInvocation@@input.getDefaultSelect() @AT@ 17184 @LENGTH@ 5
---------------------INS SimpleName@@MethodName:getDefaultSelect:[] @TO@ MethodInvocation@@input.getDefaultSelect() @AT@ 17190 @LENGTH@ 18
------------INS VariableDeclarationStatement@@Stream<SelectorItem<String>> defaultCheckStream=StringUtils.hasText(defaultSelect) ? selectorItems.stream() : Stream.empty(); @TO@ LambdaExpression@@input -> {
  List<SelectorItem<String>> selectorItems=input.getSelectItems().entrySet().stream().map(e -> SelectorItem.of(e.getKey(),e.getValue())).collect(Collectors.toList());
  SingleItemSelector<String,SelectorItem<String>> selector=new SingleItemSelector<>(terminal,selectorItems,input.getName(),input.getComparator());
  Function<ComponentContext<?>,ComponentContext<?>> operation=(context) -> {
    if (input.getResultMode() == ResultMode.ACCEPT && input.isStoreResult() && StringUtils.hasText(input.getResultValue())) {
      context.put(input.getId(),input.getResultValue());
      return context;
    }
    selector.setResourceLoader(resourceLoader);
    selector.setTemplateExecutor(templateExecutor);
    if (StringUtils.hasText(input.getTemplateLocation())) {
      selector.setTemplateLocation(input.getTemplateLocation());
    }
    if (input.getRenderer() != null) {
      selector.setRenderer(input.getRenderer());
    }
    if (input.getMaxItems() != null) {
      selector.setMaxItems(input.getMaxItems());
    }
    if (input.isStoreResult()) {
      selector.addPostRunHandler(c -> {
        c.getValue().ifPresent(v -> {
          c.put(input.getId(),v);
        }
);
      }
);
    }
    for (    Consumer<SingleItemSelectorContext<String,SelectorItem<String>>> handler : input.getPreHandlers()) {
      selector.addPreRunHandler(handler);
    }
    for (    Consumer<SingleItemSelectorContext<String,SelectorItem<String>>> handler : input.getPostHandlers()) {
      selector.addPostRunHandler(handler);
    }
    return selector.run(context);
  }
;
  Function<SingleItemSelectorContext<String,SelectorItem<String>>,String> f1=input.getNext();
  Function<ComponentContext<?>,Optional<String>> f2=context -> f1 != null ? Optional.ofNullable(f1.apply(selector.getThisContext(context))) : Optional.empty();
  return OrderedInputOperation.of(input.getId(),input.getOrder(),operation,f2);
}
 @AT@ 17214 @LENGTH@ 139
---------------INS ParameterizedType@@Stream<SelectorItem<String>> @TO@ VariableDeclarationStatement@@Stream<SelectorItem<String>> defaultCheckStream=StringUtils.hasText(defaultSelect) ? selectorItems.stream() : Stream.empty(); @AT@ 17214 @LENGTH@ 28
------------------INS SimpleType@@Stream @TO@ ParameterizedType@@Stream<SelectorItem<String>> @AT@ 17214 @LENGTH@ 6
------------------INS ParameterizedType@@SelectorItem<String> @TO@ ParameterizedType@@Stream<SelectorItem<String>> @AT@ 17221 @LENGTH@ 20
---------------------INS SimpleType@@SelectorItem @TO@ ParameterizedType@@SelectorItem<String> @AT@ 17221 @LENGTH@ 12
---------------------INS SimpleType@@String @TO@ ParameterizedType@@SelectorItem<String> @AT@ 17234 @LENGTH@ 6
---------------INS VariableDeclarationFragment@@defaultCheckStream=StringUtils.hasText(defaultSelect) ? selectorItems.stream() : Stream.empty() @TO@ VariableDeclarationStatement@@Stream<SelectorItem<String>> defaultCheckStream=StringUtils.hasText(defaultSelect) ? selectorItems.stream() : Stream.empty(); @AT@ 17243 @LENGTH@ 109
------------------INS SimpleName@@defaultCheckStream @TO@ VariableDeclarationFragment@@defaultCheckStream=StringUtils.hasText(defaultSelect) ? selectorItems.stream() : Stream.empty() @AT@ 17243 @LENGTH@ 18
------------------INS ConditionalExpression@@StringUtils.hasText(defaultSelect) ? selectorItems.stream() : Stream.empty() @TO@ VariableDeclarationFragment@@defaultCheckStream=StringUtils.hasText(defaultSelect) ? selectorItems.stream() : Stream.empty() @AT@ 17264 @LENGTH@ 88
---------------------INS MethodInvocation@@StringUtils.hasText(defaultSelect) @TO@ ConditionalExpression@@StringUtils.hasText(defaultSelect) ? selectorItems.stream() : Stream.empty() @AT@ 17264 @LENGTH@ 34
------------------------INS SimpleName@@Name:StringUtils @TO@ MethodInvocation@@StringUtils.hasText(defaultSelect) @AT@ 17264 @LENGTH@ 11
------------------------INS SimpleName@@MethodName:hasText:[defaultSelect] @TO@ MethodInvocation@@StringUtils.hasText(defaultSelect) @AT@ 17276 @LENGTH@ 22
---------------------------INS SimpleName@@defaultSelect @TO@ SimpleName@@MethodName:hasText:[defaultSelect] @AT@ 17284 @LENGTH@ 13
---------------------INS MethodInvocation@@selectorItems.stream() @TO@ ConditionalExpression@@StringUtils.hasText(defaultSelect) ? selectorItems.stream() : Stream.empty() @AT@ 17307 @LENGTH@ 22
------------------------INS SimpleName@@Name:selectorItems @TO@ MethodInvocation@@selectorItems.stream() @AT@ 17307 @LENGTH@ 13
------------------------INS SimpleName@@MethodName:stream:[] @TO@ MethodInvocation@@selectorItems.stream() @AT@ 17321 @LENGTH@ 8
---------------------INS MethodInvocation@@Stream.empty() @TO@ ConditionalExpression@@StringUtils.hasText(defaultSelect) ? selectorItems.stream() : Stream.empty() @AT@ 17338 @LENGTH@ 14
------------------------INS SimpleName@@Name:Stream @TO@ MethodInvocation@@Stream.empty() @AT@ 17338 @LENGTH@ 6
------------------------INS SimpleName@@MethodName:empty:[] @TO@ MethodInvocation@@Stream.empty() @AT@ 17345 @LENGTH@ 7
------------INS VariableDeclarationStatement@@SelectorItem<String> defaultExpose=defaultCheckStream.filter(si -> ObjectUtils.nullSafeEquals(defaultSelect,si.getName())).findFirst().orElse(null); @TO@ LambdaExpression@@input -> {
  List<SelectorItem<String>> selectorItems=input.getSelectItems().entrySet().stream().map(e -> SelectorItem.of(e.getKey(),e.getValue())).collect(Collectors.toList());
  SingleItemSelector<String,SelectorItem<String>> selector=new SingleItemSelector<>(terminal,selectorItems,input.getName(),input.getComparator());
  Function<ComponentContext<?>,ComponentContext<?>> operation=(context) -> {
    if (input.getResultMode() == ResultMode.ACCEPT && input.isStoreResult() && StringUtils.hasText(input.getResultValue())) {
      context.put(input.getId(),input.getResultValue());
      return context;
    }
    selector.setResourceLoader(resourceLoader);
    selector.setTemplateExecutor(templateExecutor);
    if (StringUtils.hasText(input.getTemplateLocation())) {
      selector.setTemplateLocation(input.getTemplateLocation());
    }
    if (input.getRenderer() != null) {
      selector.setRenderer(input.getRenderer());
    }
    if (input.getMaxItems() != null) {
      selector.setMaxItems(input.getMaxItems());
    }
    if (input.isStoreResult()) {
      selector.addPostRunHandler(c -> {
        c.getValue().ifPresent(v -> {
          c.put(input.getId(),v);
        }
);
      }
);
    }
    for (    Consumer<SingleItemSelectorContext<String,SelectorItem<String>>> handler : input.getPreHandlers()) {
      selector.addPreRunHandler(handler);
    }
    for (    Consumer<SingleItemSelectorContext<String,SelectorItem<String>>> handler : input.getPostHandlers()) {
      selector.addPostRunHandler(handler);
    }
    return selector.run(context);
  }
;
  Function<SingleItemSelectorContext<String,SelectorItem<String>>,String> f1=input.getNext();
  Function<ComponentContext<?>,Optional<String>> f2=context -> f1 != null ? Optional.ofNullable(f1.apply(selector.getThisContext(context))) : Optional.empty();
  return OrderedInputOperation.of(input.getId(),input.getOrder(),operation,f2);
}
 @AT@ 17358 @LENGTH@ 169
---------------INS ParameterizedType@@SelectorItem<String> @TO@ VariableDeclarationStatement@@SelectorItem<String> defaultExpose=defaultCheckStream.filter(si -> ObjectUtils.nullSafeEquals(defaultSelect,si.getName())).findFirst().orElse(null); @AT@ 17358 @LENGTH@ 20
------------------INS SimpleType@@SelectorItem @TO@ ParameterizedType@@SelectorItem<String> @AT@ 17358 @LENGTH@ 12
------------------INS SimpleType@@String @TO@ ParameterizedType@@SelectorItem<String> @AT@ 17371 @LENGTH@ 6
---------------INS VariableDeclarationFragment@@defaultExpose=defaultCheckStream.filter(si -> ObjectUtils.nullSafeEquals(defaultSelect,si.getName())).findFirst().orElse(null) @TO@ VariableDeclarationStatement@@SelectorItem<String> defaultExpose=defaultCheckStream.filter(si -> ObjectUtils.nullSafeEquals(defaultSelect,si.getName())).findFirst().orElse(null); @AT@ 17379 @LENGTH@ 147
------------------INS SimpleName@@defaultExpose @TO@ VariableDeclarationFragment@@defaultExpose=defaultCheckStream.filter(si -> ObjectUtils.nullSafeEquals(defaultSelect,si.getName())).findFirst().orElse(null) @AT@ 17379 @LENGTH@ 13
------------------INS MethodInvocation@@defaultCheckStream.filter(si -> ObjectUtils.nullSafeEquals(defaultSelect,si.getName())).findFirst().orElse(null) @TO@ VariableDeclarationFragment@@defaultExpose=defaultCheckStream.filter(si -> ObjectUtils.nullSafeEquals(defaultSelect,si.getName())).findFirst().orElse(null) @AT@ 17395 @LENGTH@ 131
---------------------INS MethodInvocation@@MethodName:findFirst:[] @TO@ MethodInvocation@@defaultCheckStream.filter(si -> ObjectUtils.nullSafeEquals(defaultSelect,si.getName())).findFirst().orElse(null) @AT@ 17395 @LENGTH@ 112
---------------------INS MethodInvocation@@MethodName:filter:[si -> ObjectUtils.nullSafeEquals(defaultSelect,si.getName())] @TO@ MethodInvocation@@defaultCheckStream.filter(si -> ObjectUtils.nullSafeEquals(defaultSelect,si.getName())).findFirst().orElse(null) @AT@ 17395 @LENGTH@ 94
------------------------INS LambdaExpression@@si -> ObjectUtils.nullSafeEquals(defaultSelect,si.getName()) @TO@ MethodInvocation@@MethodName:filter:[si -> ObjectUtils.nullSafeEquals(defaultSelect,si.getName())] @AT@ 17427 @LENGTH@ 61
---------------------------INS VariableDeclarationFragment@@si @TO@ LambdaExpression@@si -> ObjectUtils.nullSafeEquals(defaultSelect,si.getName()) @AT@ 17427 @LENGTH@ 2
------------------------------INS SimpleName@@si @TO@ VariableDeclarationFragment@@si @AT@ 17427 @LENGTH@ 2
---------------------------INS MethodInvocation@@ObjectUtils.nullSafeEquals(defaultSelect,si.getName()) @TO@ LambdaExpression@@si -> ObjectUtils.nullSafeEquals(defaultSelect,si.getName()) @AT@ 17433 @LENGTH@ 55
------------------------------INS SimpleName@@Name:ObjectUtils @TO@ MethodInvocation@@ObjectUtils.nullSafeEquals(defaultSelect,si.getName()) @AT@ 17433 @LENGTH@ 11
------------------------------INS SimpleName@@MethodName:nullSafeEquals:[defaultSelect, si.getName()] @TO@ MethodInvocation@@ObjectUtils.nullSafeEquals(defaultSelect,si.getName()) @AT@ 17445 @LENGTH@ 43
---------------------------------INS SimpleName@@defaultSelect @TO@ SimpleName@@MethodName:nullSafeEquals:[defaultSelect, si.getName()] @AT@ 17460 @LENGTH@ 13
---------------------------------INS MethodInvocation@@si.getName() @TO@ SimpleName@@MethodName:nullSafeEquals:[defaultSelect, si.getName()] @AT@ 17475 @LENGTH@ 12
------------------------------------INS SimpleName@@Name:si @TO@ MethodInvocation@@si.getName() @AT@ 17475 @LENGTH@ 2
------------------------------------INS SimpleName@@MethodName:getName:[] @TO@ MethodInvocation@@si.getName() @AT@ 17478 @LENGTH@ 9
---------------------INS SimpleName@@Name:defaultCheckStream @TO@ MethodInvocation@@defaultCheckStream.filter(si -> ObjectUtils.nullSafeEquals(defaultSelect,si.getName())).findFirst().orElse(null) @AT@ 17395 @LENGTH@ 18
---------------------INS SimpleName@@MethodName:orElse:[null] @TO@ MethodInvocation@@defaultCheckStream.filter(si -> ObjectUtils.nullSafeEquals(defaultSelect,si.getName())).findFirst().orElse(null) @AT@ 17514 @LENGTH@ 12
------------------------INS NullLiteral@@null @TO@ SimpleName@@MethodName:orElse:[null] @AT@ 17521 @LENGTH@ 4
------------INS ExpressionStatement@@MethodInvocation:selector.setDefaultExpose(defaultExpose) @TO@ LambdaExpression@@input -> {
  List<SelectorItem<String>> selectorItems=input.getSelectItems().entrySet().stream().map(e -> SelectorItem.of(e.getKey(),e.getValue())).collect(Collectors.toList());
  SingleItemSelector<String,SelectorItem<String>> selector=new SingleItemSelector<>(terminal,selectorItems,input.getName(),input.getComparator());
  Function<ComponentContext<?>,ComponentContext<?>> operation=(context) -> {
    if (input.getResultMode() == ResultMode.ACCEPT && input.isStoreResult() && StringUtils.hasText(input.getResultValue())) {
      context.put(input.getId(),input.getResultValue());
      return context;
    }
    selector.setResourceLoader(resourceLoader);
    selector.setTemplateExecutor(templateExecutor);
    if (StringUtils.hasText(input.getTemplateLocation())) {
      selector.setTemplateLocation(input.getTemplateLocation());
    }
    if (input.getRenderer() != null) {
      selector.setRenderer(input.getRenderer());
    }
    if (input.getMaxItems() != null) {
      selector.setMaxItems(input.getMaxItems());
    }
    if (input.isStoreResult()) {
      selector.addPostRunHandler(c -> {
        c.getValue().ifPresent(v -> {
          c.put(input.getId(),v);
        }
);
      }
);
    }
    for (    Consumer<SingleItemSelectorContext<String,SelectorItem<String>>> handler : input.getPreHandlers()) {
      selector.addPreRunHandler(handler);
    }
    for (    Consumer<SingleItemSelectorContext<String,SelectorItem<String>>> handler : input.getPostHandlers()) {
      selector.addPostRunHandler(handler);
    }
    return selector.run(context);
  }
;
  Function<SingleItemSelectorContext<String,SelectorItem<String>>,String> f1=input.getNext();
  Function<ComponentContext<?>,Optional<String>> f2=context -> f1 != null ? Optional.ofNullable(f1.apply(selector.getThisContext(context))) : Optional.empty();
  return OrderedInputOperation.of(input.getId(),input.getOrder(),operation,f2);
}
 @AT@ 17694 @LENGTH@ 41
---------------INS MethodInvocation@@selector.setDefaultExpose(defaultExpose) @TO@ ExpressionStatement@@MethodInvocation:selector.setDefaultExpose(defaultExpose) @AT@ 17694 @LENGTH@ 40
------------------INS SimpleName@@Name:selector @TO@ MethodInvocation@@selector.setDefaultExpose(defaultExpose) @AT@ 17694 @LENGTH@ 8
------------------INS SimpleName@@MethodName:setDefaultExpose:[defaultExpose] @TO@ MethodInvocation@@selector.setDefaultExpose(defaultExpose) @AT@ 17703 @LENGTH@ 31
---------------------INS SimpleName@@defaultExpose @TO@ SimpleName@@MethodName:setDefaultExpose:[defaultExpose] @AT@ 17720 @LENGTH@ 13


UPD TryStatement@@try {  LOG.info("Waiting up to {} milliseconds for the processing to finish",timeout);  if (!lock.tryLock(timeout,TimeUnit.MILLISECONDS)) {    LOG.warn("The processing of the current record did not finish within {} seconds",timeout);  }  consumer.wakeup();} catch (InterruptedException e) {  consumer.wakeup();  Thread.currentThread().interrupt();} finally {  lock.unlock();} @TO@ try {  LOG.info("Waiting up to {} milliseconds for the processing to finish",timeout);  if (!lock.tryLock(timeout,TimeUnit.MILLISECONDS)) {    LOG.warn("The processing of the current record did not finish within {} seconds",timeout);  }  consumer.wakeup();} catch (InterruptedException e) {  consumer.wakeup();  Thread.currentThread().interrupt();} finally {  if (lock.isHeldByCurrentThread()) {    lock.unlock();  }} @AT@ 20607 @LENGTH@ 807
---INS Block@@FinallyBody:{  if (lock.isHeldByCurrentThread()) {    lock.unlock();  }} @TO@ TryStatement@@try {  LOG.info("Waiting up to {} milliseconds for the processing to finish",timeout);  if (!lock.tryLock(timeout,TimeUnit.MILLISECONDS)) {    LOG.warn("The processing of the current record did not finish within {} seconds",timeout);  }  consumer.wakeup();} catch (InterruptedException e) {  consumer.wakeup();  Thread.currentThread().interrupt();} finally {  lock.unlock();} @AT@ 21376 @LENGTH@ 104
------INS IfStatement@@if (lock.isHeldByCurrentThread()) {  lock.unlock();} @TO@ Block@@FinallyBody:{  if (lock.isHeldByCurrentThread()) {    lock.unlock();  }} @AT@ 21390 @LENGTH@ 80
---------MOV Block@@FinallyBody:{  lock.unlock();} @TO@ IfStatement@@if (lock.isHeldByCurrentThread()) {  lock.unlock();} @AT@ 21376 @LENGTH@ 38
---------INS MethodInvocation@@lock.isHeldByCurrentThread() @TO@ IfStatement@@if (lock.isHeldByCurrentThread()) {  lock.unlock();} @AT@ 21394 @LENGTH@ 28
------------INS SimpleName@@Name:lock @TO@ MethodInvocation@@lock.isHeldByCurrentThread() @AT@ 21394 @LENGTH@ 4
------------INS SimpleName@@MethodName:isHeldByCurrentThread:[] @TO@ MethodInvocation@@lock.isHeldByCurrentThread() @AT@ 21399 @LENGTH@ 23
---UPD Block@@FinallyBody:{  lock.unlock();} @TO@ ThenBody:{  lock.unlock();} @AT@ 21376 @LENGTH@ 38


UPD ExpressionStatement@@MethodInvocation:tos.putArchiveEntry(t) @TO@ MethodInvocation:assertThrows(IllegalArgumentException.class,() -> tos.putArchiveEntry(t)) @AT@ 33922 @LENGTH@ 23
---INS MethodInvocation@@assertThrows(IllegalArgumentException.class,() -> tos.putArchiveEntry(t)) @TO@ ExpressionStatement@@MethodInvocation:tos.putArchiveEntry(t) @AT@ 33958 @LENGTH@ 74
------INS SimpleName@@MethodName:assertThrows:[IllegalArgumentException.class, () -> tos.putArchiveEntry(t)] @TO@ MethodInvocation@@assertThrows(IllegalArgumentException.class,() -> tos.putArchiveEntry(t)) @AT@ 33958 @LENGTH@ 74
---------INS TypeLiteral@@IllegalArgumentException.class @TO@ SimpleName@@MethodName:assertThrows:[IllegalArgumentException.class, () -> tos.putArchiveEntry(t)] @AT@ 33971 @LENGTH@ 30
---------INS LambdaExpression@@() -> tos.putArchiveEntry(t) @TO@ SimpleName@@MethodName:assertThrows:[IllegalArgumentException.class, () -> tos.putArchiveEntry(t)] @AT@ 34003 @LENGTH@ 28
------------MOV MethodInvocation@@tos.putArchiveEntry(t) @TO@ LambdaExpression@@() -> tos.putArchiveEntry(t) @AT@ 33922 @LENGTH@ 22


UPD ExpressionStatement@@MethodInvocation:exchange.getOut().setHeader(NettyConstants.NETTY_CLOSE_CHANNEL_WHEN_COMPLETE,true) @TO@ MethodInvocation:exchange.getMessage().setHeader(NettyConstants.NETTY_CLOSE_CHANNEL_WHEN_COMPLETE,true) @AT@ 1864 @LENGTH@ 84
---UPD MethodInvocation@@exchange.getOut().setHeader(NettyConstants.NETTY_CLOSE_CHANNEL_WHEN_COMPLETE,true) @TO@ exchange.getMessage().setHeader(NettyConstants.NETTY_CLOSE_CHANNEL_WHEN_COMPLETE,true) @AT@ 1864 @LENGTH@ 83
------UPD MethodInvocation@@MethodName:getOut:[] @TO@ MethodName:getMessage:[] @AT@ 1864 @LENGTH@ 17


INS IfStatement@@if (lazyLogin) {  return;} @TO@ MethodDeclaration@@public, void, MethodName:validate,  @AT@ 7955 @LENGTH@ 46
---INS SimpleName@@lazyLogin @TO@ IfStatement@@if (lazyLogin) {  return;} @AT@ 7959 @LENGTH@ 9
---INS Block@@ThenBody:{  return;} @TO@ IfStatement@@if (lazyLogin) {  return;} @AT@ 7970 @LENGTH@ 31
------INS ReturnStatement@@ @TO@ Block@@ThenBody:{  return;} @AT@ 7984 @LENGTH@ 7


MOV FieldDeclaration@@private, static, final, int, [RANDOM_VALUE=ThreadLocalRandom.current().nextInt(1,1000)] @TO@ TypeDeclaration@@[public]KafkaConsumerWithResumeRouteStrategyIT, BaseEmbeddedKafkaTestSupport @AT@ 2581 @LENGTH@ 85


UPD ReturnStatement@@MethodInvocation:endpoint.getArango().db(database).collection(collection) @TO@ MethodInvocation:endpoint.getArango().db(DbName.of(database)).collection(collection) @AT@ 14951 @LENGTH@ 64
---UPD MethodInvocation@@endpoint.getArango().db(database).collection(collection) @TO@ endpoint.getArango().db(DbName.of(database)).collection(collection) @AT@ 14958 @LENGTH@ 56
------UPD MethodInvocation@@MethodName:db:[database] @TO@ MethodName:db:[DbName.of(database)] @AT@ 14958 @LENGTH@ 33
---------DEL SimpleName@@database @AT@ 14982 @LENGTH@ 8
---------INS MethodInvocation@@DbName.of(database) @TO@ MethodInvocation@@MethodName:db:[database] @AT@ 14993 @LENGTH@ 19
------------INS SimpleName@@Name:DbName @TO@ MethodInvocation@@DbName.of(database) @AT@ 14993 @LENGTH@ 6
------------INS SimpleName@@MethodName:of:[database] @TO@ MethodInvocation@@DbName.of(database) @AT@ 15000 @LENGTH@ 12
---------------INS SimpleName@@database @TO@ SimpleName@@MethodName:of:[database] @AT@ 15003 @LENGTH@ 8


DEL MethodDeclaration@@public, voidMethodName:Neo4jTemplate, Neo4jClient neo4jClient, Neo4jMappingContext neo4jMappingContext, DatabaseSelectionProvider databaseSelectionProvider,  @AT@ 5688 @LENGTH@ 428
---DEL Modifier@@public @AT@ 5688 @LENGTH@ 6
---DEL SimpleName@@MethodName:Neo4jTemplate @AT@ 5695 @LENGTH@ 13
---DEL SingleVariableDeclaration@@Neo4jClient neo4jClient @AT@ 5709 @LENGTH@ 23
------DEL SimpleType@@Neo4jClient @AT@ 5709 @LENGTH@ 11
------DEL SimpleName@@neo4jClient @AT@ 5721 @LENGTH@ 11
---DEL SingleVariableDeclaration@@Neo4jMappingContext neo4jMappingContext @AT@ 5734 @LENGTH@ 39
------DEL SimpleType@@Neo4jMappingContext @AT@ 5734 @LENGTH@ 19
------DEL SimpleName@@neo4jMappingContext @AT@ 5754 @LENGTH@ 19
---DEL SingleVariableDeclaration@@DatabaseSelectionProvider databaseSelectionProvider @AT@ 5782 @LENGTH@ 51
------DEL SimpleType@@DatabaseSelectionProvider @AT@ 5782 @LENGTH@ 25
------DEL SimpleName@@databaseSelectionProvider @AT@ 5808 @LENGTH@ 25
---DEL ConstructorInvocation@@this(neo4jClient,neo4jMappingContext,EntityCallbacks.create()); @AT@ 5840 @LENGTH@ 65
------DEL SimpleName@@neo4jClient @AT@ 5845 @LENGTH@ 11
------DEL SimpleName@@neo4jMappingContext @AT@ 5858 @LENGTH@ 19
------DEL MethodInvocation@@EntityCallbacks.create() @AT@ 5879 @LENGTH@ 24
---------DEL SimpleName@@Name:EntityCallbacks @AT@ 5879 @LENGTH@ 15
---------DEL SimpleName@@MethodName:create:[] @AT@ 5895 @LENGTH@ 8
---DEL IfStatement@@if (databaseSelectionProvider != neo4jClient.getDatabaseSelectionProvider()) {  throw new IllegalStateException("The provided database selection provider differs from the Neo4jClient's one.");} @AT@ 5909 @LENGTH@ 204
------DEL InfixExpression@@databaseSelectionProvider != neo4jClient.getDatabaseSelectionProvider() @AT@ 5913 @LENGTH@ 71
---------DEL SimpleName@@databaseSelectionProvider @AT@ 5913 @LENGTH@ 25
---------DEL Operator@@!= @AT@ 5938 @LENGTH@ 2
---------DEL MethodInvocation@@neo4jClient.getDatabaseSelectionProvider() @AT@ 5942 @LENGTH@ 42
------------DEL SimpleName@@Name:neo4jClient @AT@ 5942 @LENGTH@ 11
------------DEL SimpleName@@MethodName:getDatabaseSelectionProvider:[] @AT@ 5954 @LENGTH@ 30
------DEL Block@@ThenBody:{  throw new IllegalStateException("The provided database selection provider differs from the Neo4jClient's one.");} @AT@ 5986 @LENGTH@ 127
---------DEL ThrowStatement@@ClassInstanceCreation:new IllegalStateException("The provided database selection provider differs from the Neo4jClient's one.") @AT@ 5991 @LENGTH@ 118
------------DEL ClassInstanceCreation@@IllegalStateException["The provided database selection provider differs from the Neo4jClient's one."] @AT@ 5997 @LENGTH@ 111
---------------DEL New@@new @AT@ 5997 @LENGTH@ 3
---------------DEL SimpleType@@IllegalStateException @AT@ 6001 @LENGTH@ 21
---------------DEL StringLiteral@@"The provided database selection provider differs from the Neo4jClient's one." @AT@ 6029 @LENGTH@ 78


UPD VariableDeclarationStatement@@DeadLetterChannel answer=new DeadLetterChannel(camelContext,processor,logger,getBean(Processor.class,definition.getOnRedelivery(),definition.getOnRedeliveryRef()),redeliveryPolicy,deadLetterProcessor,definition.getDeadLetterUri(),definition.isDeadLetterHandleNewException(),definition.isUseOriginalMessage(),definition.isUseOriginalBody(),definition.getRetryWhilePolicy(camelContext),getExecutorService(definition.getExecutorService(),definition.getExecutorServiceRef()),getBean(Processor.class,definition.getOnPrepareFailure(),definition.getOnPrepareFailureRef()),getBean(Processor.class,definition.getOnExceptionOccurred(),definition.getOnExceptionOccurredRef())); @TO@ DeadLetterChannel answer=new DeadLetterChannel(camelContext,processor,logger,getProcessor(definition.getOnRedelivery(),definition.getOnRedeliveryRef()),redeliveryPolicy,deadLetterProcessor,definition.getDeadLetterUri(),definition.isDeadLetterHandleNewException(),definition.isUseOriginalMessage(),definition.isUseOriginalBody(),definition.getRetryWhilePolicy(camelContext),getExecutorService(definition.getExecutorService(),definition.getExecutorServiceRef()),getProcessor(definition.getOnPrepareFailure(),definition.getOnPrepareFailureRef()),getProcessor(definition.getOnExceptionOccurred(),definition.getOnExceptionOccurredRef())); @AT@ 2264 @LENGTH@ 833
---UPD VariableDeclarationFragment@@answer=new DeadLetterChannel(camelContext,processor,logger,getBean(Processor.class,definition.getOnRedelivery(),definition.getOnRedeliveryRef()),redeliveryPolicy,deadLetterProcessor,definition.getDeadLetterUri(),definition.isDeadLetterHandleNewException(),definition.isUseOriginalMessage(),definition.isUseOriginalBody(),definition.getRetryWhilePolicy(camelContext),getExecutorService(definition.getExecutorService(),definition.getExecutorServiceRef()),getBean(Processor.class,definition.getOnPrepareFailure(),definition.getOnPrepareFailureRef()),getBean(Processor.class,definition.getOnExceptionOccurred(),definition.getOnExceptionOccurredRef())) @TO@ answer=new DeadLetterChannel(camelContext,processor,logger,getProcessor(definition.getOnRedelivery(),definition.getOnRedeliveryRef()),redeliveryPolicy,deadLetterProcessor,definition.getDeadLetterUri(),definition.isDeadLetterHandleNewException(),definition.isUseOriginalMessage(),definition.isUseOriginalBody(),definition.getRetryWhilePolicy(camelContext),getExecutorService(definition.getExecutorService(),definition.getExecutorServiceRef()),getProcessor(definition.getOnPrepareFailure(),definition.getOnPrepareFailureRef()),getProcessor(definition.getOnExceptionOccurred(),definition.getOnExceptionOccurredRef())) @AT@ 2282 @LENGTH@ 814
------UPD ClassInstanceCreation@@DeadLetterChannel[camelContext, processor, logger, getBean(Processor.class,definition.getOnRedelivery(),definition.getOnRedeliveryRef()), redeliveryPolicy, deadLetterProcessor, definition.getDeadLetterUri(), definition.isDeadLetterHandleNewException(), definition.isUseOriginalMessage(), definition.isUseOriginalBody(), definition.getRetryWhilePolicy(camelContext), getExecutorService(definition.getExecutorService(),definition.getExecutorServiceRef()), getBean(Processor.class,definition.getOnPrepareFailure(),definition.getOnPrepareFailureRef()), getBean(Processor.class,definition.getOnExceptionOccurred(),definition.getOnExceptionOccurredRef())] @TO@ DeadLetterChannel[camelContext, processor, logger, getProcessor(definition.getOnRedelivery(),definition.getOnRedeliveryRef()), redeliveryPolicy, deadLetterProcessor, definition.getDeadLetterUri(), definition.isDeadLetterHandleNewException(), definition.isUseOriginalMessage(), definition.isUseOriginalBody(), definition.getRetryWhilePolicy(camelContext), getExecutorService(definition.getExecutorService(),definition.getExecutorServiceRef()), getProcessor(definition.getOnPrepareFailure(),definition.getOnPrepareFailureRef()), getProcessor(definition.getOnExceptionOccurred(),definition.getOnExceptionOccurredRef())] @AT@ 2291 @LENGTH@ 805
---------UPD MethodInvocation@@getBean(Processor.class,definition.getOnRedelivery(),definition.getOnRedeliveryRef()) @TO@ getProcessor(definition.getOnRedelivery(),definition.getOnRedeliveryRef()) @AT@ 2379 @LENGTH@ 87
------------UPD SimpleName@@MethodName:getBean:[Processor.class, definition.getOnRedelivery(), definition.getOnRedeliveryRef()] @TO@ MethodName:getProcessor:[definition.getOnRedelivery(), definition.getOnRedeliveryRef()] @AT@ 2379 @LENGTH@ 87
---------------DEL TypeLiteral@@Processor.class @AT@ 2387 @LENGTH@ 15
---------UPD MethodInvocation@@getBean(Processor.class,definition.getOnPrepareFailure(),definition.getOnPrepareFailureRef()) @TO@ getProcessor(definition.getOnPrepareFailure(),definition.getOnPrepareFailureRef()) @AT@ 2881 @LENGTH@ 95
------------UPD SimpleName@@MethodName:getBean:[Processor.class, definition.getOnPrepareFailure(), definition.getOnPrepareFailureRef()] @TO@ MethodName:getProcessor:[definition.getOnPrepareFailure(), definition.getOnPrepareFailureRef()] @AT@ 2881 @LENGTH@ 95
---------------DEL TypeLiteral@@Processor.class @AT@ 2889 @LENGTH@ 15
---------UPD MethodInvocation@@getBean(Processor.class,definition.getOnExceptionOccurred(),definition.getOnExceptionOccurredRef()) @TO@ getProcessor(definition.getOnExceptionOccurred(),definition.getOnExceptionOccurredRef()) @AT@ 2994 @LENGTH@ 101
------------UPD SimpleName@@MethodName:getBean:[Processor.class, definition.getOnExceptionOccurred(), definition.getOnExceptionOccurredRef()] @TO@ MethodName:getProcessor:[definition.getOnExceptionOccurred(), definition.getOnExceptionOccurredRef()] @AT@ 2994 @LENGTH@ 101
---------------DEL TypeLiteral@@Processor.class @AT@ 3002 @LENGTH@ 15


UPD EnhancedForStatement@@for (String path : extraServerContentDirs) {  Path extraContent=Paths.get(path);  extraContent=resolvePath(project,extraContent);  if (Files.notExists(extraContent)) {    throw new MojoExecutionException("Extra content dir " + extraContent + " doesn't exist");  }  warnExtraConfig(extraContent);  IoUtils.copy(extraContent,target);} @TO@ for (String path : extraServerContentDirs) {  Path extraContent=Paths.get(path);  extraContent=resolvePath(project,extraContent);  if (Files.notExists(extraContent)) {    throw new MojoExecutionException("Extra content dir " + extraContent + " doesn't exist");  }  if (!Files.isDirectory(extraContent)) {    throw new MojoExecutionException("Extra content dir " + extraContent + " is not a directory");  }  warnExtraConfig(extraContent);  IoUtils.copy(extraContent,target);} @AT@ 13068 @LENGTH@ 489
---INS IfStatement@@if (!Files.isDirectory(extraContent)) {  throw new MojoExecutionException("Extra content dir " + extraContent + " is not a directory");} @TO@ EnhancedForStatement@@for (String path : extraServerContentDirs) {  Path extraContent=Paths.get(path);  extraContent=resolvePath(project,extraContent);  if (Files.notExists(extraContent)) {    throw new MojoExecutionException("Extra content dir " + extraContent + " doesn't exist");  }  warnExtraConfig(extraContent);  IoUtils.copy(extraContent,target);} @AT@ 13406 @LENGTH@ 164
------INS PrefixExpression@@!Files.isDirectory(extraContent) @TO@ IfStatement@@if (!Files.isDirectory(extraContent)) {  throw new MojoExecutionException("Extra content dir " + extraContent + " is not a directory");} @AT@ 13410 @LENGTH@ 32
---------INS Operator@@! @TO@ PrefixExpression@@!Files.isDirectory(extraContent) @AT@ 13410 @LENGTH@ 1
---------INS MethodInvocation@@Files.isDirectory(extraContent) @TO@ PrefixExpression@@!Files.isDirectory(extraContent) @AT@ 13411 @LENGTH@ 31
------------INS SimpleName@@Name:Files @TO@ MethodInvocation@@Files.isDirectory(extraContent) @AT@ 13411 @LENGTH@ 5
------------INS SimpleName@@MethodName:isDirectory:[extraContent] @TO@ MethodInvocation@@Files.isDirectory(extraContent) @AT@ 13417 @LENGTH@ 25
---------------INS SimpleName@@extraContent @TO@ SimpleName@@MethodName:isDirectory:[extraContent] @AT@ 13429 @LENGTH@ 12
------INS Block@@ThenBody:{  throw new MojoExecutionException("Extra content dir " + extraContent + " is not a directory");} @TO@ IfStatement@@if (!Files.isDirectory(extraContent)) {  throw new MojoExecutionException("Extra content dir " + extraContent + " is not a directory");} @AT@ 13444 @LENGTH@ 126
---------INS ThrowStatement@@ClassInstanceCreation:new MojoExecutionException("Extra content dir " + extraContent + " is not a directory") @TO@ Block@@ThenBody:{  throw new MojoExecutionException("Extra content dir " + extraContent + " is not a directory");} @AT@ 13462 @LENGTH@ 94
------------INS ClassInstanceCreation@@MojoExecutionException["Extra content dir " + extraContent + " is not a directory"] @TO@ ThrowStatement@@ClassInstanceCreation:new MojoExecutionException("Extra content dir " + extraContent + " is not a directory") @AT@ 13468 @LENGTH@ 87
---------------INS New@@new @TO@ ClassInstanceCreation@@MojoExecutionException["Extra content dir " + extraContent + " is not a directory"] @AT@ 13468 @LENGTH@ 3
---------------INS SimpleType@@MojoExecutionException @TO@ ClassInstanceCreation@@MojoExecutionException["Extra content dir " + extraContent + " is not a directory"] @AT@ 13472 @LENGTH@ 22
---------------INS InfixExpression@@"Extra content dir " + extraContent + " is not a directory" @TO@ ClassInstanceCreation@@MojoExecutionException["Extra content dir " + extraContent + " is not a directory"] @AT@ 13495 @LENGTH@ 59
------------------INS StringLiteral@@"Extra content dir " @TO@ InfixExpression@@"Extra content dir " + extraContent + " is not a directory" @AT@ 13495 @LENGTH@ 20
------------------INS Operator@@+ @TO@ InfixExpression@@"Extra content dir " + extraContent + " is not a directory" @AT@ 13515 @LENGTH@ 1
------------------INS SimpleName@@extraContent @TO@ InfixExpression@@"Extra content dir " + extraContent + " is not a directory" @AT@ 13518 @LENGTH@ 12
------------------INS StringLiteral@@" is not a directory" @TO@ InfixExpression@@"Extra content dir " + extraContent + " is not a directory" @AT@ 13533 @LENGTH@ 21


UPD VariableDeclarationStatement@@String templateResource=resourceAsString(resourceLoader.getResource(template)); @TO@ String templateResource=resourceAsString(getResourceLoader().getResource(template)); @AT@ 2410 @LENGTH@ 81
---UPD VariableDeclarationFragment@@templateResource=resourceAsString(resourceLoader.getResource(template)) @TO@ templateResource=resourceAsString(getResourceLoader().getResource(template)) @AT@ 2417 @LENGTH@ 73
------UPD MethodInvocation@@resourceAsString(resourceLoader.getResource(template)) @TO@ resourceAsString(getResourceLoader().getResource(template)) @AT@ 2436 @LENGTH@ 54
---------UPD SimpleName@@MethodName:resourceAsString:[resourceLoader.getResource(template)] @TO@ MethodName:resourceAsString:[getResourceLoader().getResource(template)] @AT@ 2436 @LENGTH@ 54
------------UPD MethodInvocation@@resourceLoader.getResource(template) @TO@ getResourceLoader().getResource(template) @AT@ 2453 @LENGTH@ 36
---------------INS MethodInvocation@@MethodName:getResourceLoader:[] @TO@ MethodInvocation@@resourceLoader.getResource(template) @AT@ 2413 @LENGTH@ 19
---------------DEL SimpleName@@Name:resourceLoader @AT@ 2453 @LENGTH@ 14


UPD VariableDeclarationStatement@@List<ShowCompactResponseElement> filteredElements=compactions.getCompacts().stream().filter(e -> e.getDbname().equals(ci.dbname) && e.getTablename().equals(ci.tableName) && (e.getPartitionname() == null && ci.partName == null || e.getPartitionname().equals(ci.partName))).collect(Collectors.toList()); @TO@ List<ShowCompactResponseElement> filteredElements=compactions.getCompacts().stream().filter(e -> e.getDbname().equals(ci.dbname) && e.getTablename().equals(ci.tableName) && (e.getPartitionname() == null && ci.partName == null || (Objects.equals(e.getPartitionname(),ci.partName)))).collect(Collectors.toList()); @AT@ 15068 @LENGTH@ 333
---UPD VariableDeclarationFragment@@filteredElements=compactions.getCompacts().stream().filter(e -> e.getDbname().equals(ci.dbname) && e.getTablename().equals(ci.tableName) && (e.getPartitionname() == null && ci.partName == null || e.getPartitionname().equals(ci.partName))).collect(Collectors.toList()) @TO@ filteredElements=compactions.getCompacts().stream().filter(e -> e.getDbname().equals(ci.dbname) && e.getTablename().equals(ci.tableName) && (e.getPartitionname() == null && ci.partName == null || (Objects.equals(e.getPartitionname(),ci.partName)))).collect(Collectors.toList()) @AT@ 15101 @LENGTH@ 299
------UPD MethodInvocation@@compactions.getCompacts().stream().filter(e -> e.getDbname().equals(ci.dbname) && e.getTablename().equals(ci.tableName) && (e.getPartitionname() == null && ci.partName == null || e.getPartitionname().equals(ci.partName))).collect(Collectors.toList()) @TO@ compactions.getCompacts().stream().filter(e -> e.getDbname().equals(ci.dbname) && e.getTablename().equals(ci.tableName) && (e.getPartitionname() == null && ci.partName == null || (Objects.equals(e.getPartitionname(),ci.partName)))).collect(Collectors.toList()) @AT@ 15120 @LENGTH@ 280
---------UPD MethodInvocation@@MethodName:filter:[e -> e.getDbname().equals(ci.dbname) && e.getTablename().equals(ci.tableName) && (e.getPartitionname() == null && ci.partName == null || e.getPartitionname().equals(ci.partName))] @TO@ MethodName:filter:[e -> e.getDbname().equals(ci.dbname) && e.getTablename().equals(ci.tableName) && (e.getPartitionname() == null && ci.partName == null || (Objects.equals(e.getPartitionname(),ci.partName)))] @AT@ 15120 @LENGTH@ 244
------------UPD LambdaExpression@@e -> e.getDbname().equals(ci.dbname) && e.getTablename().equals(ci.tableName) && (e.getPartitionname() == null && ci.partName == null || e.getPartitionname().equals(ci.partName)) @TO@ e -> e.getDbname().equals(ci.dbname) && e.getTablename().equals(ci.tableName) && (e.getPartitionname() == null && ci.partName == null || (Objects.equals(e.getPartitionname(),ci.partName))) @AT@ 15169 @LENGTH@ 194
---------------UPD InfixExpression@@e.getDbname().equals(ci.dbname) && e.getTablename().equals(ci.tableName) && (e.getPartitionname() == null && ci.partName == null || e.getPartitionname().equals(ci.partName)) @TO@ e.getDbname().equals(ci.dbname) && e.getTablename().equals(ci.tableName) && (e.getPartitionname() == null && ci.partName == null || (Objects.equals(e.getPartitionname(),ci.partName))) @AT@ 15174 @LENGTH@ 189
------------------UPD ParenthesizedExpression@@(e.getPartitionname() == null && ci.partName == null || e.getPartitionname().equals(ci.partName)) @TO@ (e.getPartitionname() == null && ci.partName == null || (Objects.equals(e.getPartitionname(),ci.partName))) @AT@ 15266 @LENGTH@ 97
---------------------UPD InfixExpression@@e.getPartitionname() == null && ci.partName == null || e.getPartitionname().equals(ci.partName) @TO@ e.getPartitionname() == null && ci.partName == null || (Objects.equals(e.getPartitionname(),ci.partName)) @AT@ 15267 @LENGTH@ 95
------------------------DEL MethodInvocation@@e.getPartitionname().equals(ci.partName) @AT@ 15322 @LENGTH@ 40
---------------------------DEL MethodInvocation@@MethodName:getPartitionname:[] @AT@ 15322 @LENGTH@ 20
------------------------INS ParenthesizedExpression@@(Objects.equals(e.getPartitionname(),ci.partName)) @TO@ InfixExpression@@e.getPartitionname() == null && ci.partName == null || e.getPartitionname().equals(ci.partName) @AT@ 16064 @LENGTH@ 50
---------------------------INS MethodInvocation@@Objects.equals(e.getPartitionname(),ci.partName) @TO@ ParenthesizedExpression@@(Objects.equals(e.getPartitionname(),ci.partName)) @AT@ 16065 @LENGTH@ 48
------------------------------MOV SimpleName@@Name:e @TO@ MethodInvocation@@Objects.equals(e.getPartitionname(),ci.partName) @AT@ 15322 @LENGTH@ 1
------------------------------MOV SimpleName@@MethodName:equals:[ci.partName] @TO@ MethodInvocation@@Objects.equals(e.getPartitionname(),ci.partName) @AT@ 15343 @LENGTH@ 19
---------------------------------INS MethodInvocation@@e.getPartitionname() @TO@ SimpleName@@MethodName:equals:[ci.partName] @AT@ 16080 @LENGTH@ 20
------------------------------------INS SimpleName@@Name:e @TO@ MethodInvocation@@e.getPartitionname() @AT@ 16080 @LENGTH@ 1
------------------------------------INS SimpleName@@MethodName:getPartitionname:[] @TO@ MethodInvocation@@e.getPartitionname() @AT@ 16082 @LENGTH@ 18


UPD VariableDeclarationStatement@@Object[] a=new Object[]{new Object(),null,null}; @TO@ Object[] a={new Object(),null,null}; @AT@ 41803 @LENGTH@ 55
---UPD VariableDeclarationFragment@@a=new Object[]{new Object(),null,null} @TO@ a={new Object(),null,null} @AT@ 41812 @LENGTH@ 45
------DEL ArrayCreation@@new Object[]{new Object(),null,null} @AT@ 41816 @LENGTH@ 41
---------DEL ArrayType@@Object[] @AT@ 41820 @LENGTH@ 8
------------DEL SimpleType@@Object @AT@ 41820 @LENGTH@ 6
------MOV ArrayInitializer@@{new Object(),null,null} @TO@ VariableDeclarationFragment@@a=new Object[]{new Object(),null,null} @AT@ 41829 @LENGTH@ 28


UPD ReturnStatement@@FieldAccess:this.domainType @TO@ ConditionalExpression:domainType == null ? super.getDomainTypeInformation() : domainType @AT@ 10991 @LENGTH@ 23
---DEL FieldAccess@@this.domainType @AT@ 10998 @LENGTH@ 15
------DEL ThisExpression@@this @AT@ 10998 @LENGTH@ 4
------DEL SimpleName@@domainType @AT@ 11003 @LENGTH@ 10
---INS ConditionalExpression@@domainType == null ? super.getDomainTypeInformation() : domainType @TO@ ReturnStatement@@FieldAccess:this.domainType @AT@ 11004 @LENGTH@ 66
------INS InfixExpression@@domainType == null @TO@ ConditionalExpression@@domainType == null ? super.getDomainTypeInformation() : domainType @AT@ 11004 @LENGTH@ 18
---------INS SimpleName@@domainType @TO@ InfixExpression@@domainType == null @AT@ 11004 @LENGTH@ 10
---------INS Operator@@== @TO@ InfixExpression@@domainType == null @AT@ 11014 @LENGTH@ 2
---------INS NullLiteral@@null @TO@ InfixExpression@@domainType == null @AT@ 11018 @LENGTH@ 4
------INS SuperMethodInvocation@@super.getDomainTypeInformation() @TO@ ConditionalExpression@@domainType == null ? super.getDomainTypeInformation() : domainType @AT@ 11025 @LENGTH@ 32
---------INS SimpleName@@MethodName:getDomainTypeInformation:[] @TO@ SuperMethodInvocation@@super.getDomainTypeInformation() @AT@ 11031 @LENGTH@ 24
------INS SimpleName@@domainType @TO@ ConditionalExpression@@domainType == null ? super.getDomainTypeInformation() : domainType @AT@ 11060 @LENGTH@ 10


UPD ReturnStatement@@ConditionalExpression:this.returnTuple == null ? PropertyFilter.acceptAll().contains(fieldName.toDotPath(),fieldName.getType()) : this.returnTuple.filteredProperties.contains(fieldName.toDotPath(),fieldName.getType()) @TO@ InfixExpression:this.returnTuple == null || this.returnTuple.include(fieldName) @AT@ 3028 @LENGTH@ 213
---DEL ConditionalExpression@@this.returnTuple == null ? PropertyFilter.acceptAll().contains(fieldName.toDotPath(),fieldName.getType()) : this.returnTuple.filteredProperties.contains(fieldName.toDotPath(),fieldName.getType()) @AT@ 3035 @LENGTH@ 205
------DEL MethodInvocation@@PropertyFilter.acceptAll().contains(fieldName.toDotPath(),fieldName.getType()) @AT@ 3066 @LENGTH@ 79
---------DEL MethodInvocation@@MethodName:acceptAll:[] @AT@ 3066 @LENGTH@ 26
---------DEL SimpleName@@Name:PropertyFilter @AT@ 3066 @LENGTH@ 14
---------DEL SimpleName@@MethodName:contains:[fieldName.toDotPath(), fieldName.getType()] @AT@ 3093 @LENGTH@ 52
------------DEL MethodInvocation@@fieldName.toDotPath() @AT@ 3102 @LENGTH@ 21
---------------DEL SimpleName@@Name:fieldName @AT@ 3102 @LENGTH@ 9
---------------DEL SimpleName@@MethodName:toDotPath:[] @AT@ 3112 @LENGTH@ 11
------------DEL MethodInvocation@@fieldName.getType() @AT@ 3125 @LENGTH@ 19
---------------DEL SimpleName@@Name:fieldName @AT@ 3125 @LENGTH@ 9
---------------DEL SimpleName@@MethodName:getType:[] @AT@ 3135 @LENGTH@ 9
------DEL MethodInvocation@@this.returnTuple.filteredProperties.contains(fieldName.toDotPath(),fieldName.getType()) @AT@ 3152 @LENGTH@ 88
---------DEL FieldAccess@@this.returnTuple.filteredProperties @AT@ 3152 @LENGTH@ 35
------------DEL FieldAccess@@this.returnTuple @AT@ 3152 @LENGTH@ 16
------------DEL SimpleName@@filteredProperties @AT@ 3169 @LENGTH@ 18
---INS InfixExpression@@this.returnTuple == null || this.returnTuple.include(fieldName) @TO@ ReturnStatement@@ConditionalExpression:this.returnTuple == null ? PropertyFilter.acceptAll().contains(fieldName.toDotPath(),fieldName.getType()) : this.returnTuple.filteredProperties.contains(fieldName.toDotPath(),fieldName.getType()) @AT@ 3171 @LENGTH@ 63
------MOV InfixExpression@@this.returnTuple == null @TO@ InfixExpression@@this.returnTuple == null || this.returnTuple.include(fieldName) @AT@ 3035 @LENGTH@ 24
------INS Operator@@|| @TO@ InfixExpression@@this.returnTuple == null || this.returnTuple.include(fieldName) @AT@ 3195 @LENGTH@ 2
------INS MethodInvocation@@this.returnTuple.include(fieldName) @TO@ InfixExpression@@this.returnTuple == null || this.returnTuple.include(fieldName) @AT@ 3199 @LENGTH@ 35
---------MOV SimpleName@@MethodName:contains:[fieldName.toDotPath(), fieldName.getType()] @TO@ MethodInvocation@@this.returnTuple.include(fieldName) @AT@ 3188 @LENGTH@ 52
------------DEL MethodInvocation@@fieldName.toDotPath() @AT@ 3197 @LENGTH@ 21
---------------DEL SimpleName@@Name:fieldName @AT@ 3197 @LENGTH@ 9
---------------DEL SimpleName@@MethodName:toDotPath:[] @AT@ 3207 @LENGTH@ 11
------------DEL MethodInvocation@@fieldName.getType() @AT@ 3220 @LENGTH@ 19
---------------DEL SimpleName@@Name:fieldName @AT@ 3220 @LENGTH@ 9
---------------DEL SimpleName@@MethodName:getType:[] @AT@ 3230 @LENGTH@ 9
------------INS SimpleName@@fieldName @TO@ SimpleName@@MethodName:contains:[fieldName.toDotPath(), fieldName.getType()] @AT@ 3224 @LENGTH@ 9
---------INS FieldAccess@@this.returnTuple @TO@ MethodInvocation@@this.returnTuple.include(fieldName) @AT@ 3199 @LENGTH@ 16
------------MOV ThisExpression@@this @TO@ FieldAccess@@this.returnTuple @AT@ 3152 @LENGTH@ 4
------------MOV SimpleName@@returnTuple @TO@ FieldAccess@@this.returnTuple @AT@ 3157 @LENGTH@ 11


MOV FieldDeclaration@@private, String, [compileDirectory] @TO@ TypeDeclaration@@[public, abstract]ExtendedRouteBuilderLoaderSupport, RouteBuilderLoaderSupport[ExtendedRoutesBuilderLoader] @AT@ 1418 @LENGTH@ 32


UPD VariableDeclarationStatement@@final Object[] els=new Object[]{"1","3","5","7","2","4","6"}; @TO@ final Object[] els={"1","3","5","7","2","4","6"}; @AT@ 1774 @LENGTH@ 72
---UPD VariableDeclarationFragment@@els=new Object[]{"1","3","5","7","2","4","6"} @TO@ els={"1","3","5","7","2","4","6"} @AT@ 1789 @LENGTH@ 56
------DEL ArrayCreation@@new Object[]{"1","3","5","7","2","4","6"} @AT@ 1795 @LENGTH@ 50
---------DEL ArrayType@@Object[] @AT@ 1799 @LENGTH@ 8
------------DEL SimpleType@@Object @AT@ 1799 @LENGTH@ 6
---------DEL ArrayInitializer@@{"1","3","5","7","2","4","6"} @AT@ 1808 @LENGTH@ 37
------INS ArrayInitializer@@{"1","3","5","7","2","4","6"} @TO@ VariableDeclarationFragment@@els=new Object[]{"1","3","5","7","2","4","6"} @AT@ 1795 @LENGTH@ 37
---------MOV StringLiteral@@"1" @TO@ ArrayInitializer@@{"1","3","5","7","2","4","6"} @AT@ 1810 @LENGTH@ 3
---------MOV StringLiteral@@"3" @TO@ ArrayInitializer@@{"1","3","5","7","2","4","6"} @AT@ 1815 @LENGTH@ 3
---------MOV StringLiteral@@"5" @TO@ ArrayInitializer@@{"1","3","5","7","2","4","6"} @AT@ 1820 @LENGTH@ 3
---------MOV StringLiteral@@"7" @TO@ ArrayInitializer@@{"1","3","5","7","2","4","6"} @AT@ 1825 @LENGTH@ 3
---------MOV StringLiteral@@"2" @TO@ ArrayInitializer@@{"1","3","5","7","2","4","6"} @AT@ 1830 @LENGTH@ 3
---------MOV StringLiteral@@"4" @TO@ ArrayInitializer@@{"1","3","5","7","2","4","6"} @AT@ 1835 @LENGTH@ 3
---------MOV StringLiteral@@"6" @TO@ ArrayInitializer@@{"1","3","5","7","2","4","6"} @AT@ 1840 @LENGTH@ 3


INS ExpressionStatement@@MethodInvocation:assertThrows(NoSuchElementException.class,() -> iter.nextInt(),"Should have thrown NoSuchElementException") @TO@ MethodDeclaration@@public, void, MethodName:buildTest_Empty,  @AT@ 2508 @LENGTH@ 110
---INS MethodInvocation@@assertThrows(NoSuchElementException.class,() -> iter.nextInt(),"Should have thrown NoSuchElementException") @TO@ ExpressionStatement@@MethodInvocation:assertThrows(NoSuchElementException.class,() -> iter.nextInt(),"Should have thrown NoSuchElementException") @AT@ 2508 @LENGTH@ 109
------INS SimpleName@@MethodName:assertThrows:[NoSuchElementException.class, () -> iter.nextInt(), "Should have thrown NoSuchElementException"] @TO@ MethodInvocation@@assertThrows(NoSuchElementException.class,() -> iter.nextInt(),"Should have thrown NoSuchElementException") @AT@ 2508 @LENGTH@ 109
---------INS TypeLiteral@@NoSuchElementException.class @TO@ SimpleName@@MethodName:assertThrows:[NoSuchElementException.class, () -> iter.nextInt(), "Should have thrown NoSuchElementException"] @AT@ 2521 @LENGTH@ 28
---------MOV StringLiteral@@"Should have thrown NoSuchElementException" @TO@ SimpleName@@MethodName:assertThrows:[NoSuchElementException.class, () -> iter.nextInt(), "Should have thrown NoSuchElementException"] @AT@ 2550 @LENGTH@ 43
---------INS LambdaExpression@@() -> iter.nextInt() @TO@ SimpleName@@MethodName:assertThrows:[NoSuchElementException.class, () -> iter.nextInt(), "Should have thrown NoSuchElementException"] @AT@ 2551 @LENGTH@ 20
------------INS MethodInvocation@@iter.nextInt() @TO@ LambdaExpression@@() -> iter.nextInt() @AT@ 2557 @LENGTH@ 14
---------------MOV SimpleName@@Name:iter @TO@ MethodInvocation@@iter.nextInt() @AT@ 2517 @LENGTH@ 4
---------------MOV SimpleName@@Name:iter @TO@ MethodInvocation@@iter.nextInt() @AT@ 2517 @LENGTH@ 4
---------------MOV SimpleName@@MethodName:nextInt:[] @TO@ MethodInvocation@@iter.nextInt() @AT@ 2522 @LENGTH@ 9
---------------MOV SimpleName@@MethodName:nextInt:[] @TO@ MethodInvocation@@iter.nextInt() @AT@ 2522 @LENGTH@ 9


UPD ExpressionStatement@@MethodInvocation:exchange.getOut().setBody("When You Go Home, Tell Them Of Us And Say, For Your Tomorrow, We Gave Our Today.") @TO@ MethodInvocation:exchange.getMessage().setBody("When You Go Home, Tell Them Of Us And Say, For Your Tomorrow, We Gave Our Today.") @AT@ 2069 @LENGTH@ 151
---UPD MethodInvocation@@exchange.getOut().setBody("When You Go Home, Tell Them Of Us And Say, For Your Tomorrow, We Gave Our Today.") @TO@ exchange.getMessage().setBody("When You Go Home, Tell Them Of Us And Say, For Your Tomorrow, We Gave Our Today.") @AT@ 2069 @LENGTH@ 150
------UPD MethodInvocation@@MethodName:getOut:[] @TO@ MethodName:getMessage:[] @AT@ 2069 @LENGTH@ 17


INS VariableDeclarationStatement@@String target=URISupport.normalizeUri(endpointUri); @TO@ MethodDeclaration@@private, static, VerbDefinition, MethodName:findVerbDefinition, RestDefinition rest, String endpointUri, Exception,  @AT@ 9571 @LENGTH@ 53
---INS SimpleType@@String @TO@ VariableDeclarationStatement@@String target=URISupport.normalizeUri(endpointUri); @AT@ 9571 @LENGTH@ 6
---INS VariableDeclarationFragment@@target=URISupport.normalizeUri(endpointUri) @TO@ VariableDeclarationStatement@@String target=URISupport.normalizeUri(endpointUri); @AT@ 9578 @LENGTH@ 45
------INS SimpleName@@target @TO@ VariableDeclarationFragment@@target=URISupport.normalizeUri(endpointUri) @AT@ 9578 @LENGTH@ 6
------INS MethodInvocation@@URISupport.normalizeUri(endpointUri) @TO@ VariableDeclarationFragment@@target=URISupport.normalizeUri(endpointUri) @AT@ 9587 @LENGTH@ 36
---------INS SimpleName@@Name:URISupport @TO@ MethodInvocation@@URISupport.normalizeUri(endpointUri) @AT@ 9587 @LENGTH@ 10
---------INS SimpleName@@MethodName:normalizeUri:[endpointUri] @TO@ MethodInvocation@@URISupport.normalizeUri(endpointUri) @AT@ 9598 @LENGTH@ 25
------------INS SimpleName@@endpointUri @TO@ SimpleName@@MethodName:normalizeUri:[endpointUri] @AT@ 9611 @LENGTH@ 11


UPD VariableDeclarationStatement@@final Object[] els=new Object[]{"1","3","5","7","2","4","6"}; @TO@ final Object[] els={"1","3","5","7","2","4","6"}; @AT@ 2037 @LENGTH@ 70
---UPD VariableDeclarationFragment@@els=new Object[]{"1","3","5","7","2","4","6"} @TO@ els={"1","3","5","7","2","4","6"} @AT@ 2052 @LENGTH@ 54
------DEL ArrayCreation@@new Object[]{"1","3","5","7","2","4","6"} @AT@ 2058 @LENGTH@ 48
---------DEL ArrayType@@Object[] @AT@ 2062 @LENGTH@ 8
------------DEL SimpleType@@Object @AT@ 2062 @LENGTH@ 6
---------DEL ArrayInitializer@@{"1","3","5","7","2","4","6"} @AT@ 2071 @LENGTH@ 35
------INS ArrayInitializer@@{"1","3","5","7","2","4","6"} @TO@ VariableDeclarationFragment@@els=new Object[]{"1","3","5","7","2","4","6"} @AT@ 2058 @LENGTH@ 35
---------MOV StringLiteral@@"1" @TO@ ArrayInitializer@@{"1","3","5","7","2","4","6"} @AT@ 2072 @LENGTH@ 3
---------MOV StringLiteral@@"3" @TO@ ArrayInitializer@@{"1","3","5","7","2","4","6"} @AT@ 2077 @LENGTH@ 3
---------MOV StringLiteral@@"5" @TO@ ArrayInitializer@@{"1","3","5","7","2","4","6"} @AT@ 2082 @LENGTH@ 3
---------MOV StringLiteral@@"7" @TO@ ArrayInitializer@@{"1","3","5","7","2","4","6"} @AT@ 2087 @LENGTH@ 3
---------MOV StringLiteral@@"2" @TO@ ArrayInitializer@@{"1","3","5","7","2","4","6"} @AT@ 2092 @LENGTH@ 3
---------MOV StringLiteral@@"4" @TO@ ArrayInitializer@@{"1","3","5","7","2","4","6"} @AT@ 2097 @LENGTH@ 3
---------MOV StringLiteral@@"6" @TO@ ArrayInitializer@@{"1","3","5","7","2","4","6"} @AT@ 2102 @LENGTH@ 3


UPD ExpressionStatement@@Assignment:COUNT_MATCH=compile(builder.toString(),CASE_INSENSITIVE) @TO@ Assignment:COUNT_MATCH=compile(builder.toString(),CASE_INSENSITIVE | DOTALL) @AT@ 6307 @LENGTH@ 60
---UPD Assignment@@COUNT_MATCH=compile(builder.toString(),CASE_INSENSITIVE) @TO@ COUNT_MATCH=compile(builder.toString(),CASE_INSENSITIVE | DOTALL) @AT@ 6307 @LENGTH@ 59
------UPD MethodInvocation@@compile(builder.toString(),CASE_INSENSITIVE) @TO@ compile(builder.toString(),CASE_INSENSITIVE | DOTALL) @AT@ 6321 @LENGTH@ 45
---------UPD SimpleName@@MethodName:compile:[builder.toString(), CASE_INSENSITIVE] @TO@ MethodName:compile:[builder.toString(), CASE_INSENSITIVE | DOTALL] @AT@ 6321 @LENGTH@ 45
------------INS InfixExpression@@CASE_INSENSITIVE | DOTALL @TO@ SimpleName@@MethodName:compile:[builder.toString(), CASE_INSENSITIVE] @AT@ 6349 @LENGTH@ 25
---------------INS SimpleName@@CASE_INSENSITIVE @TO@ InfixExpression@@CASE_INSENSITIVE | DOTALL @AT@ 6349 @LENGTH@ 16
---------------INS Operator@@| @TO@ InfixExpression@@CASE_INSENSITIVE | DOTALL @AT@ 6365 @LENGTH@ 1
---------------INS SimpleName@@DOTALL @TO@ InfixExpression@@CASE_INSENSITIVE | DOTALL @AT@ 6368 @LENGTH@ 6
------------DEL SimpleName@@CASE_INSENSITIVE @AT@ 6349 @LENGTH@ 16


UPD MethodDeclaration@@protected, abstract, T, MethodName:getThisContext, ComponentContext<?> context,  @TO@ public, abstract, T, MethodName:getThisContext, ComponentContext<?> context,  @AT@ 6632 @LENGTH@ 65
---UPD Modifier@@protected @TO@ public @AT@ 6632 @LENGTH@ 9


UPD ReturnStatement@@InfixExpression:createQuery(predicate).fetchCount() > 0 @TO@ InfixExpression:createQuery(predicate).select(Expressions.ONE).fetchFirst() != null @AT@ 7882 @LENGTH@ 47
---UPD InfixExpression@@createQuery(predicate).fetchCount() > 0 @TO@ createQuery(predicate).select(Expressions.ONE).fetchFirst() != null @AT@ 7889 @LENGTH@ 39
------UPD MethodInvocation@@createQuery(predicate).fetchCount() @TO@ createQuery(predicate).select(Expressions.ONE).fetchFirst() @AT@ 7889 @LENGTH@ 35
---------UPD SimpleName@@MethodName:fetchCount:[] @TO@ MethodName:fetchFirst:[] @AT@ 7912 @LENGTH@ 12
---------INS MethodInvocation@@MethodName:select:[Expressions.ONE] @TO@ MethodInvocation@@createQuery(predicate).fetchCount() @AT@ 7937 @LENGTH@ 46
------------INS QualifiedName@@Expressions.ONE @TO@ MethodInvocation@@MethodName:select:[Expressions.ONE] @AT@ 7967 @LENGTH@ 15
---------------INS SimpleName@@Expressions @TO@ QualifiedName@@Expressions.ONE @AT@ 7967 @LENGTH@ 11
---------------INS SimpleName@@ONE @TO@ QualifiedName@@Expressions.ONE @AT@ 7979 @LENGTH@ 3
------UPD Operator@@> @TO@ != @AT@ 7924 @LENGTH@ 1
------DEL NumberLiteral@@0 @AT@ 7927 @LENGTH@ 1
------INS NullLiteral@@null @TO@ InfixExpression@@createQuery(predicate).fetchCount() > 0 @AT@ 8000 @LENGTH@ 4


UPD ExpressionStatement@@MethodInvocation:exchange.getOut().setBody("When You Go Home, Tell Them Of Us And Say, For Your Tomorrow, We Gave Our Today.") @TO@ MethodInvocation:exchange.getMessage().setBody("When You Go Home, Tell Them Of Us And Say, For Your Tomorrow, We Gave Our Today.") @AT@ 2037 @LENGTH@ 151
---UPD MethodInvocation@@exchange.getOut().setBody("When You Go Home, Tell Them Of Us And Say, For Your Tomorrow, We Gave Our Today.") @TO@ exchange.getMessage().setBody("When You Go Home, Tell Them Of Us And Say, For Your Tomorrow, We Gave Our Today.") @AT@ 2037 @LENGTH@ 150
------UPD MethodInvocation@@MethodName:getOut:[] @TO@ MethodName:getMessage:[] @AT@ 2037 @LENGTH@ 17


DEL VariableDeclarationStatement@@Expression expression=createExpression(definition.getExpression()); @AT@ 1790 @LENGTH@ 69
---DEL SimpleType@@Expression @AT@ 1790 @LENGTH@ 10
---DEL VariableDeclarationFragment@@expression=createExpression(definition.getExpression()) @AT@ 1801 @LENGTH@ 57
------DEL SimpleName@@expression @AT@ 1801 @LENGTH@ 10
------DEL MethodInvocation@@createExpression(definition.getExpression()) @AT@ 1814 @LENGTH@ 44
---------DEL SimpleName@@MethodName:createExpression:[definition.getExpression()] @AT@ 1814 @LENGTH@ 44
------------DEL MethodInvocation@@definition.getExpression() @AT@ 1831 @LENGTH@ 26
---------------DEL SimpleName@@Name:definition @AT@ 1831 @LENGTH@ 10
---------------DEL SimpleName@@MethodName:getExpression:[] @AT@ 1842 @LENGTH@ 15


UPD MethodDeclaration@@public, void, MethodName:setUp,  @TO@ public, void, MethodName:setUp, Exception,  @AT@ 1589 @LENGTH@ 207
---INS SimpleType@@Exception @TO@ MethodDeclaration@@public, void, MethodName:setUp,  @AT@ 1616 @LENGTH@ 9


DEL VariableDeclarationStatement@@String loginUrl=config.getLoginUrl(); @AT@ 4118 @LENGTH@ 39
---DEL SimpleType@@String @AT@ 4118 @LENGTH@ 6
---DEL VariableDeclarationFragment@@loginUrl=config.getLoginUrl() @AT@ 4125 @LENGTH@ 31
------DEL SimpleName@@loginUrl @AT@ 4125 @LENGTH@ 8
------DEL MethodInvocation@@config.getLoginUrl() @AT@ 4136 @LENGTH@ 20
---------DEL SimpleName@@Name:config @AT@ 4136 @LENGTH@ 6
---------DEL SimpleName@@MethodName:getLoginUrl:[] @AT@ 4143 @LENGTH@ 13


INS MethodDeclaration@@void, MethodName:countQueryUsesCorrectVariable,  @TO@ TypeDeclaration@@QueryEnhancerUnitTests,  @AT@ 25976 @LENGTH@ 881
---INS PrimitiveType@@void @TO@ MethodDeclaration@@void, MethodName:countQueryUsesCorrectVariable,  @AT@ 25971 @LENGTH@ 4
---INS SimpleName@@MethodName:countQueryUsesCorrectVariable @TO@ MethodDeclaration@@void, MethodName:countQueryUsesCorrectVariable,  @AT@ 25976 @LENGTH@ 29
---INS VariableDeclarationStatement@@StringQuery nativeQuery=new StringQuery("SELECT * FROM User WHERE created_at > $1",true); @TO@ MethodDeclaration@@void, MethodName:countQueryUsesCorrectVariable,  @AT@ 26012 @LENGTH@ 92
------INS SimpleType@@StringQuery @TO@ VariableDeclarationStatement@@StringQuery nativeQuery=new StringQuery("SELECT * FROM User WHERE created_at > $1",true); @AT@ 26012 @LENGTH@ 11
------INS VariableDeclarationFragment@@nativeQuery=new StringQuery("SELECT * FROM User WHERE created_at > $1",true) @TO@ VariableDeclarationStatement@@StringQuery nativeQuery=new StringQuery("SELECT * FROM User WHERE created_at > $1",true); @AT@ 26024 @LENGTH@ 79
---------INS SimpleName@@nativeQuery @TO@ VariableDeclarationFragment@@nativeQuery=new StringQuery("SELECT * FROM User WHERE created_at > $1",true) @AT@ 26024 @LENGTH@ 11
---------INS ClassInstanceCreation@@StringQuery["SELECT * FROM User WHERE created_at > $1", true] @TO@ VariableDeclarationFragment@@nativeQuery=new StringQuery("SELECT * FROM User WHERE created_at > $1",true) @AT@ 26038 @LENGTH@ 65
------------INS New@@new @TO@ ClassInstanceCreation@@StringQuery["SELECT * FROM User WHERE created_at > $1", true] @AT@ 26038 @LENGTH@ 3
------------INS SimpleType@@StringQuery @TO@ ClassInstanceCreation@@StringQuery["SELECT * FROM User WHERE created_at > $1", true] @AT@ 26042 @LENGTH@ 11
------------INS StringLiteral@@"SELECT * FROM User WHERE created_at > $1" @TO@ ClassInstanceCreation@@StringQuery["SELECT * FROM User WHERE created_at > $1", true] @AT@ 26054 @LENGTH@ 42
------------INS BooleanLiteral@@true @TO@ ClassInstanceCreation@@StringQuery["SELECT * FROM User WHERE created_at > $1", true] @AT@ 26098 @LENGTH@ 4
---INS VariableDeclarationStatement@@QueryEnhancer queryEnhancer=getEnhancer(nativeQuery); @TO@ MethodDeclaration@@void, MethodName:countQueryUsesCorrectVariable,  @AT@ 26107 @LENGTH@ 55
------INS SimpleType@@QueryEnhancer @TO@ VariableDeclarationStatement@@QueryEnhancer queryEnhancer=getEnhancer(nativeQuery); @AT@ 26107 @LENGTH@ 13
------INS VariableDeclarationFragment@@queryEnhancer=getEnhancer(nativeQuery) @TO@ VariableDeclarationStatement@@QueryEnhancer queryEnhancer=getEnhancer(nativeQuery); @AT@ 26121 @LENGTH@ 40
---------INS SimpleName@@queryEnhancer @TO@ VariableDeclarationFragment@@queryEnhancer=getEnhancer(nativeQuery) @AT@ 26121 @LENGTH@ 13
---------INS MethodInvocation@@getEnhancer(nativeQuery) @TO@ VariableDeclarationFragment@@queryEnhancer=getEnhancer(nativeQuery) @AT@ 26137 @LENGTH@ 24
------------INS SimpleName@@MethodName:getEnhancer:[nativeQuery] @TO@ MethodInvocation@@getEnhancer(nativeQuery) @AT@ 26137 @LENGTH@ 24
---------------INS SimpleName@@nativeQuery @TO@ SimpleName@@MethodName:getEnhancer:[nativeQuery] @AT@ 26149 @LENGTH@ 11
---INS VariableDeclarationStatement@@String countQueryFor=queryEnhancer.createCountQueryFor(); @TO@ MethodDeclaration@@void, MethodName:countQueryUsesCorrectVariable,  @AT@ 26165 @LENGTH@ 59
------INS SimpleType@@String @TO@ VariableDeclarationStatement@@String countQueryFor=queryEnhancer.createCountQueryFor(); @AT@ 26165 @LENGTH@ 6
------INS VariableDeclarationFragment@@countQueryFor=queryEnhancer.createCountQueryFor() @TO@ VariableDeclarationStatement@@String countQueryFor=queryEnhancer.createCountQueryFor(); @AT@ 26172 @LENGTH@ 51
---------INS SimpleName@@countQueryFor @TO@ VariableDeclarationFragment@@countQueryFor=queryEnhancer.createCountQueryFor() @AT@ 26172 @LENGTH@ 13
---------INS MethodInvocation@@queryEnhancer.createCountQueryFor() @TO@ VariableDeclarationFragment@@countQueryFor=queryEnhancer.createCountQueryFor() @AT@ 26188 @LENGTH@ 35
------------INS SimpleName@@Name:queryEnhancer @TO@ MethodInvocation@@queryEnhancer.createCountQueryFor() @AT@ 26188 @LENGTH@ 13
------------INS SimpleName@@MethodName:createCountQueryFor:[] @TO@ MethodInvocation@@queryEnhancer.createCountQueryFor() @AT@ 26202 @LENGTH@ 21
---INS ExpressionStatement@@MethodInvocation:assertThat(countQueryFor).isEqualTo("SELECT count(*) FROM User WHERE created_at > $1") @TO@ MethodDeclaration@@void, MethodName:countQueryUsesCorrectVariable,  @AT@ 26227 @LENGTH@ 87
------INS MethodInvocation@@assertThat(countQueryFor).isEqualTo("SELECT count(*) FROM User WHERE created_at > $1") @TO@ ExpressionStatement@@MethodInvocation:assertThat(countQueryFor).isEqualTo("SELECT count(*) FROM User WHERE created_at > $1") @AT@ 26227 @LENGTH@ 86
---------INS MethodInvocation@@MethodName:assertThat:[countQueryFor] @TO@ MethodInvocation@@assertThat(countQueryFor).isEqualTo("SELECT count(*) FROM User WHERE created_at > $1") @AT@ 26227 @LENGTH@ 25
------------INS SimpleName@@countQueryFor @TO@ MethodInvocation@@MethodName:assertThat:[countQueryFor] @AT@ 26238 @LENGTH@ 13
---------INS SimpleName@@MethodName:isEqualTo:["SELECT count(*) FROM User WHERE created_at > $1"] @TO@ MethodInvocation@@assertThat(countQueryFor).isEqualTo("SELECT count(*) FROM User WHERE created_at > $1") @AT@ 26253 @LENGTH@ 60
------------INS StringLiteral@@"SELECT count(*) FROM User WHERE created_at > $1" @TO@ SimpleName@@MethodName:isEqualTo:["SELECT count(*) FROM User WHERE created_at > $1"] @AT@ 26263 @LENGTH@ 49
---INS ExpressionStatement@@Assignment:nativeQuery=new StringQuery("SELECT * FROM (select * from test) ",true) @TO@ MethodDeclaration@@void, MethodName:countQueryUsesCorrectVariable,  @AT@ 26318 @LENGTH@ 74
------INS Assignment@@nativeQuery=new StringQuery("SELECT * FROM (select * from test) ",true) @TO@ ExpressionStatement@@Assignment:nativeQuery=new StringQuery("SELECT * FROM (select * from test) ",true) @AT@ 26318 @LENGTH@ 73
---------INS SimpleName@@nativeQuery @TO@ Assignment@@nativeQuery=new StringQuery("SELECT * FROM (select * from test) ",true) @AT@ 26318 @LENGTH@ 11
---------INS Operator@@= @TO@ Assignment@@nativeQuery=new StringQuery("SELECT * FROM (select * from test) ",true) @AT@ 26329 @LENGTH@ 1
---------INS ClassInstanceCreation@@StringQuery["SELECT * FROM (select * from test) ", true] @TO@ Assignment@@nativeQuery=new StringQuery("SELECT * FROM (select * from test) ",true) @AT@ 26332 @LENGTH@ 59
------------INS New@@new @TO@ ClassInstanceCreation@@StringQuery["SELECT * FROM (select * from test) ", true] @AT@ 26332 @LENGTH@ 3
------------INS SimpleType@@StringQuery @TO@ ClassInstanceCreation@@StringQuery["SELECT * FROM (select * from test) ", true] @AT@ 26336 @LENGTH@ 11
------------INS StringLiteral@@"SELECT * FROM (select * from test) " @TO@ ClassInstanceCreation@@StringQuery["SELECT * FROM (select * from test) ", true] @AT@ 26348 @LENGTH@ 37
------------INS BooleanLiteral@@true @TO@ ClassInstanceCreation@@StringQuery["SELECT * FROM (select * from test) ", true] @AT@ 26386 @LENGTH@ 4
---INS ExpressionStatement@@Assignment:queryEnhancer=getEnhancer(nativeQuery) @TO@ MethodDeclaration@@void, MethodName:countQueryUsesCorrectVariable,  @AT@ 26395 @LENGTH@ 41
------INS Assignment@@queryEnhancer=getEnhancer(nativeQuery) @TO@ ExpressionStatement@@Assignment:queryEnhancer=getEnhancer(nativeQuery) @AT@ 26395 @LENGTH@ 40
---------INS SimpleName@@queryEnhancer @TO@ Assignment@@queryEnhancer=getEnhancer(nativeQuery) @AT@ 26395 @LENGTH@ 13
---------INS Operator@@= @TO@ Assignment@@queryEnhancer=getEnhancer(nativeQuery) @AT@ 26408 @LENGTH@ 1
---------INS MethodInvocation@@getEnhancer(nativeQuery) @TO@ Assignment@@queryEnhancer=getEnhancer(nativeQuery) @AT@ 26411 @LENGTH@ 24
------------INS SimpleName@@MethodName:getEnhancer:[nativeQuery] @TO@ MethodInvocation@@getEnhancer(nativeQuery) @AT@ 26411 @LENGTH@ 24
---------------INS SimpleName@@nativeQuery @TO@ SimpleName@@MethodName:getEnhancer:[nativeQuery] @AT@ 26423 @LENGTH@ 11
---INS ExpressionStatement@@Assignment:countQueryFor=queryEnhancer.createCountQueryFor() @TO@ MethodDeclaration@@void, MethodName:countQueryUsesCorrectVariable,  @AT@ 26439 @LENGTH@ 52
------INS Assignment@@countQueryFor=queryEnhancer.createCountQueryFor() @TO@ ExpressionStatement@@Assignment:countQueryFor=queryEnhancer.createCountQueryFor() @AT@ 26439 @LENGTH@ 51
---------INS SimpleName@@countQueryFor @TO@ Assignment@@countQueryFor=queryEnhancer.createCountQueryFor() @AT@ 26439 @LENGTH@ 13
---------INS Operator@@= @TO@ Assignment@@countQueryFor=queryEnhancer.createCountQueryFor() @AT@ 26452 @LENGTH@ 1
---------INS MethodInvocation@@queryEnhancer.createCountQueryFor() @TO@ Assignment@@countQueryFor=queryEnhancer.createCountQueryFor() @AT@ 26455 @LENGTH@ 35
------------INS SimpleName@@Name:queryEnhancer @TO@ MethodInvocation@@queryEnhancer.createCountQueryFor() @AT@ 26455 @LENGTH@ 13
------------INS SimpleName@@MethodName:createCountQueryFor:[] @TO@ MethodInvocation@@queryEnhancer.createCountQueryFor() @AT@ 26469 @LENGTH@ 21
---INS ExpressionStatement@@MethodInvocation:assertThat(countQueryFor).isEqualTo("SELECT count(*) FROM (SELECT * FROM test)") @TO@ MethodDeclaration@@void, MethodName:countQueryUsesCorrectVariable,  @AT@ 26494 @LENGTH@ 81
------INS MethodInvocation@@assertThat(countQueryFor).isEqualTo("SELECT count(*) FROM (SELECT * FROM test)") @TO@ ExpressionStatement@@MethodInvocation:assertThat(countQueryFor).isEqualTo("SELECT count(*) FROM (SELECT * FROM test)") @AT@ 26494 @LENGTH@ 80
---------INS MethodInvocation@@MethodName:assertThat:[countQueryFor] @TO@ MethodInvocation@@assertThat(countQueryFor).isEqualTo("SELECT count(*) FROM (SELECT * FROM test)") @AT@ 26494 @LENGTH@ 25
------------INS SimpleName@@countQueryFor @TO@ MethodInvocation@@MethodName:assertThat:[countQueryFor] @AT@ 26505 @LENGTH@ 13
---------INS SimpleName@@MethodName:isEqualTo:["SELECT count(*) FROM (SELECT * FROM test)"] @TO@ MethodInvocation@@assertThat(countQueryFor).isEqualTo("SELECT count(*) FROM (SELECT * FROM test)") @AT@ 26520 @LENGTH@ 54
------------INS StringLiteral@@"SELECT count(*) FROM (SELECT * FROM test)" @TO@ SimpleName@@MethodName:isEqualTo:["SELECT count(*) FROM (SELECT * FROM test)"] @AT@ 26530 @LENGTH@ 43
---INS ExpressionStatement@@Assignment:nativeQuery=new StringQuery("SELECT * FROM (select * from test) as test",true) @TO@ MethodDeclaration@@void, MethodName:countQueryUsesCorrectVariable,  @AT@ 26579 @LENGTH@ 81
------INS Assignment@@nativeQuery=new StringQuery("SELECT * FROM (select * from test) as test",true) @TO@ ExpressionStatement@@Assignment:nativeQuery=new StringQuery("SELECT * FROM (select * from test) as test",true) @AT@ 26579 @LENGTH@ 80
---------INS SimpleName@@nativeQuery @TO@ Assignment@@nativeQuery=new StringQuery("SELECT * FROM (select * from test) as test",true) @AT@ 26579 @LENGTH@ 11
---------INS Operator@@= @TO@ Assignment@@nativeQuery=new StringQuery("SELECT * FROM (select * from test) as test",true) @AT@ 26590 @LENGTH@ 1
---------INS ClassInstanceCreation@@StringQuery["SELECT * FROM (select * from test) as test", true] @TO@ Assignment@@nativeQuery=new StringQuery("SELECT * FROM (select * from test) as test",true) @AT@ 26593 @LENGTH@ 66
------------INS New@@new @TO@ ClassInstanceCreation@@StringQuery["SELECT * FROM (select * from test) as test", true] @AT@ 26593 @LENGTH@ 3
------------INS SimpleType@@StringQuery @TO@ ClassInstanceCreation@@StringQuery["SELECT * FROM (select * from test) as test", true] @AT@ 26597 @LENGTH@ 11
------------INS StringLiteral@@"SELECT * FROM (select * from test) as test" @TO@ ClassInstanceCreation@@StringQuery["SELECT * FROM (select * from test) as test", true] @AT@ 26609 @LENGTH@ 44
------------INS BooleanLiteral@@true @TO@ ClassInstanceCreation@@StringQuery["SELECT * FROM (select * from test) as test", true] @AT@ 26654 @LENGTH@ 4
---INS ExpressionStatement@@Assignment:queryEnhancer=getEnhancer(nativeQuery) @TO@ MethodDeclaration@@void, MethodName:countQueryUsesCorrectVariable,  @AT@ 26663 @LENGTH@ 41
------INS Assignment@@queryEnhancer=getEnhancer(nativeQuery) @TO@ ExpressionStatement@@Assignment:queryEnhancer=getEnhancer(nativeQuery) @AT@ 26663 @LENGTH@ 40
---------INS SimpleName@@queryEnhancer @TO@ Assignment@@queryEnhancer=getEnhancer(nativeQuery) @AT@ 26663 @LENGTH@ 13
---------INS Operator@@= @TO@ Assignment@@queryEnhancer=getEnhancer(nativeQuery) @AT@ 26676 @LENGTH@ 1
---------INS MethodInvocation@@getEnhancer(nativeQuery) @TO@ Assignment@@queryEnhancer=getEnhancer(nativeQuery) @AT@ 26679 @LENGTH@ 24
------------INS SimpleName@@MethodName:getEnhancer:[nativeQuery] @TO@ MethodInvocation@@getEnhancer(nativeQuery) @AT@ 26679 @LENGTH@ 24
---------------INS SimpleName@@nativeQuery @TO@ SimpleName@@MethodName:getEnhancer:[nativeQuery] @AT@ 26691 @LENGTH@ 11
---INS ExpressionStatement@@Assignment:countQueryFor=queryEnhancer.createCountQueryFor() @TO@ MethodDeclaration@@void, MethodName:countQueryUsesCorrectVariable,  @AT@ 26707 @LENGTH@ 52
------INS Assignment@@countQueryFor=queryEnhancer.createCountQueryFor() @TO@ ExpressionStatement@@Assignment:countQueryFor=queryEnhancer.createCountQueryFor() @AT@ 26707 @LENGTH@ 51
---------INS SimpleName@@countQueryFor @TO@ Assignment@@countQueryFor=queryEnhancer.createCountQueryFor() @AT@ 26707 @LENGTH@ 13
---------INS Operator@@= @TO@ Assignment@@countQueryFor=queryEnhancer.createCountQueryFor() @AT@ 26720 @LENGTH@ 1
---------INS MethodInvocation@@queryEnhancer.createCountQueryFor() @TO@ Assignment@@countQueryFor=queryEnhancer.createCountQueryFor() @AT@ 26723 @LENGTH@ 35
------------INS SimpleName@@Name:queryEnhancer @TO@ MethodInvocation@@queryEnhancer.createCountQueryFor() @AT@ 26723 @LENGTH@ 13
------------INS SimpleName@@MethodName:createCountQueryFor:[] @TO@ MethodInvocation@@queryEnhancer.createCountQueryFor() @AT@ 26737 @LENGTH@ 21
---INS ExpressionStatement@@MethodInvocation:assertThat(countQueryFor).isEqualTo("SELECT count(test) FROM (SELECT * FROM test) AS test") @TO@ MethodDeclaration@@void, MethodName:countQueryUsesCorrectVariable,  @AT@ 26762 @LENGTH@ 92
------INS MethodInvocation@@assertThat(countQueryFor).isEqualTo("SELECT count(test) FROM (SELECT * FROM test) AS test") @TO@ ExpressionStatement@@MethodInvocation:assertThat(countQueryFor).isEqualTo("SELECT count(test) FROM (SELECT * FROM test) AS test") @AT@ 26762 @LENGTH@ 91
---------INS MethodInvocation@@MethodName:assertThat:[countQueryFor] @TO@ MethodInvocation@@assertThat(countQueryFor).isEqualTo("SELECT count(test) FROM (SELECT * FROM test) AS test") @AT@ 26762 @LENGTH@ 25
------------INS SimpleName@@countQueryFor @TO@ MethodInvocation@@MethodName:assertThat:[countQueryFor] @AT@ 26773 @LENGTH@ 13
---------INS SimpleName@@MethodName:isEqualTo:["SELECT count(test) FROM (SELECT * FROM test) AS test"] @TO@ MethodInvocation@@assertThat(countQueryFor).isEqualTo("SELECT count(test) FROM (SELECT * FROM test) AS test") @AT@ 26788 @LENGTH@ 65
------------INS StringLiteral@@"SELECT count(test) FROM (SELECT * FROM test) AS test" @TO@ SimpleName@@MethodName:isEqualTo:["SELECT count(test) FROM (SELECT * FROM test) AS test"] @AT@ 26798 @LENGTH@ 54


INS MethodDeclaration@@void, MethodName:saveWeirdHierarchy,  @TO@ TypeDeclaration@@[@Neo4jIntegrationTest]Neo4jTemplateIT,  @AT@ 31789 @LENGTH@ 312
---INS PrimitiveType@@void @TO@ MethodDeclaration@@void, MethodName:saveWeirdHierarchy,  @AT@ 31784 @LENGTH@ 4
---INS SimpleName@@MethodName:saveWeirdHierarchy @TO@ MethodDeclaration@@void, MethodName:saveWeirdHierarchy,  @AT@ 31789 @LENGTH@ 18
---INS VariableDeclarationStatement@@List<Object> things=new ArrayList<>(); @TO@ MethodDeclaration@@void, MethodName:saveWeirdHierarchy,  @AT@ 31815 @LENGTH@ 40
------INS ParameterizedType@@List<Object> @TO@ VariableDeclarationStatement@@List<Object> things=new ArrayList<>(); @AT@ 31815 @LENGTH@ 12
---------INS SimpleType@@List @TO@ ParameterizedType@@List<Object> @AT@ 31815 @LENGTH@ 4
---------INS SimpleType@@Object @TO@ ParameterizedType@@List<Object> @AT@ 31820 @LENGTH@ 6
------INS VariableDeclarationFragment@@things=new ArrayList<>() @TO@ VariableDeclarationStatement@@List<Object> things=new ArrayList<>(); @AT@ 31828 @LENGTH@ 26
---------INS SimpleName@@things @TO@ VariableDeclarationFragment@@things=new ArrayList<>() @AT@ 31828 @LENGTH@ 6
---------INS ClassInstanceCreation@@ArrayList<>[] @TO@ VariableDeclarationFragment@@things=new ArrayList<>() @AT@ 31837 @LENGTH@ 17
------------INS New@@new @TO@ ClassInstanceCreation@@ArrayList<>[] @AT@ 31837 @LENGTH@ 3
------------INS ParameterizedType@@ArrayList<> @TO@ ClassInstanceCreation@@ArrayList<>[] @AT@ 31841 @LENGTH@ 11
---------------INS SimpleType@@ArrayList @TO@ ParameterizedType@@ArrayList<> @AT@ 31841 @LENGTH@ 9
---INS ExpressionStatement@@MethodInvocation:things.add(1) @TO@ MethodDeclaration@@void, MethodName:saveWeirdHierarchy,  @AT@ 31858 @LENGTH@ 14
------INS MethodInvocation@@things.add(1) @TO@ ExpressionStatement@@MethodInvocation:things.add(1) @AT@ 31858 @LENGTH@ 13
---------INS SimpleName@@Name:things @TO@ MethodInvocation@@things.add(1) @AT@ 31858 @LENGTH@ 6
---------INS SimpleName@@MethodName:add:[1] @TO@ MethodInvocation@@things.add(1) @AT@ 31865 @LENGTH@ 6
------------INS NumberLiteral@@1 @TO@ SimpleName@@MethodName:add:[1] @AT@ 31869 @LENGTH@ 1
---INS ExpressionStatement@@MethodInvocation:things.add("eins") @TO@ MethodDeclaration@@void, MethodName:saveWeirdHierarchy,  @AT@ 31875 @LENGTH@ 19
------INS MethodInvocation@@things.add("eins") @TO@ ExpressionStatement@@MethodInvocation:things.add("eins") @AT@ 31875 @LENGTH@ 18
---------INS SimpleName@@Name:things @TO@ MethodInvocation@@things.add("eins") @AT@ 31875 @LENGTH@ 6
---------INS SimpleName@@MethodName:add:["eins"] @TO@ MethodInvocation@@things.add("eins") @AT@ 31882 @LENGTH@ 11
------------INS StringLiteral@@"eins" @TO@ SimpleName@@MethodName:add:["eins"] @AT@ 31886 @LENGTH@ 6
---INS ExpressionStatement@@MethodInvocation:assertThatIllegalArgumentException().isThrownBy(() -> neo4jTemplate.saveAllAs(things,ClosedProjection.class)).withMessage("Could not determine a common element of an heterogeneous collection.") @TO@ MethodDeclaration@@void, MethodName:saveWeirdHierarchy,  @AT@ 31898 @LENGTH@ 200
------INS MethodInvocation@@assertThatIllegalArgumentException().isThrownBy(() -> neo4jTemplate.saveAllAs(things,ClosedProjection.class)).withMessage("Could not determine a common element of an heterogeneous collection.") @TO@ ExpressionStatement@@MethodInvocation:assertThatIllegalArgumentException().isThrownBy(() -> neo4jTemplate.saveAllAs(things,ClosedProjection.class)).withMessage("Could not determine a common element of an heterogeneous collection.") @AT@ 31898 @LENGTH@ 199
---------INS MethodInvocation@@MethodName:isThrownBy:[() -> neo4jTemplate.saveAllAs(things,ClosedProjection.class)] @TO@ MethodInvocation@@assertThatIllegalArgumentException().isThrownBy(() -> neo4jTemplate.saveAllAs(things,ClosedProjection.class)).withMessage("Could not determine a common element of an heterogeneous collection.") @AT@ 31898 @LENGTH@ 110
------------INS LambdaExpression@@() -> neo4jTemplate.saveAllAs(things,ClosedProjection.class) @TO@ MethodInvocation@@MethodName:isThrownBy:[() -> neo4jTemplate.saveAllAs(things,ClosedProjection.class)] @AT@ 31946 @LENGTH@ 61
---------------INS MethodInvocation@@neo4jTemplate.saveAllAs(things,ClosedProjection.class) @TO@ LambdaExpression@@() -> neo4jTemplate.saveAllAs(things,ClosedProjection.class) @AT@ 31952 @LENGTH@ 55
------------------INS SimpleName@@Name:neo4jTemplate @TO@ MethodInvocation@@neo4jTemplate.saveAllAs(things,ClosedProjection.class) @AT@ 31952 @LENGTH@ 13
------------------INS SimpleName@@MethodName:saveAllAs:[things, ClosedProjection.class] @TO@ MethodInvocation@@neo4jTemplate.saveAllAs(things,ClosedProjection.class) @AT@ 31966 @LENGTH@ 41
---------------------INS SimpleName@@things @TO@ SimpleName@@MethodName:saveAllAs:[things, ClosedProjection.class] @AT@ 31976 @LENGTH@ 6
---------------------INS TypeLiteral@@ClosedProjection.class @TO@ SimpleName@@MethodName:saveAllAs:[things, ClosedProjection.class] @AT@ 31984 @LENGTH@ 22
---------INS MethodInvocation@@MethodName:assertThatIllegalArgumentException:[] @TO@ MethodInvocation@@assertThatIllegalArgumentException().isThrownBy(() -> neo4jTemplate.saveAllAs(things,ClosedProjection.class)).withMessage("Could not determine a common element of an heterogeneous collection.") @AT@ 31898 @LENGTH@ 36
---------INS SimpleName@@MethodName:withMessage:["Could not determine a common element of an heterogeneous collection."] @TO@ MethodInvocation@@assertThatIllegalArgumentException().isThrownBy(() -> neo4jTemplate.saveAllAs(things,ClosedProjection.class)).withMessage("Could not determine a common element of an heterogeneous collection.") @AT@ 32014 @LENGTH@ 83
------------INS StringLiteral@@"Could not determine a common element of an heterogeneous collection." @TO@ SimpleName@@MethodName:withMessage:["Could not determine a common element of an heterogeneous collection."] @AT@ 32026 @LENGTH@ 70


UPD TypeDeclaration@@[public, final]HttpRequestResponseHolder,  @TO@ [@Deprecated, public, final]HttpRequestResponseHolder,  @AT@ 1063 @LENGTH@ 593
---INS MarkerAnnotation@@@Deprecated @TO@ TypeDeclaration@@[public, final]HttpRequestResponseHolder,  @AT@ 1148 @LENGTH@ 11


UPD ExpressionStatement@@MethodInvocation:updateCycleDurationMetric(MetricsConstants.COMPACTION_INITIATOR_CYCLE_DURATION,startedAt) @TO@ MethodInvocation:updateCycleDurationMetric(MetricsConstants.COMPACTION_CLEANER_CYCLE_DURATION,startedAt) @AT@ 8864 @LENGTH@ 91
---UPD MethodInvocation@@updateCycleDurationMetric(MetricsConstants.COMPACTION_INITIATOR_CYCLE_DURATION,startedAt) @TO@ updateCycleDurationMetric(MetricsConstants.COMPACTION_CLEANER_CYCLE_DURATION,startedAt) @AT@ 8864 @LENGTH@ 90
------UPD SimpleName@@MethodName:updateCycleDurationMetric:[MetricsConstants.COMPACTION_INITIATOR_CYCLE_DURATION, startedAt] @TO@ MethodName:updateCycleDurationMetric:[MetricsConstants.COMPACTION_CLEANER_CYCLE_DURATION, startedAt] @AT@ 8864 @LENGTH@ 90
---------UPD QualifiedName@@MetricsConstants.COMPACTION_INITIATOR_CYCLE_DURATION @TO@ MetricsConstants.COMPACTION_CLEANER_CYCLE_DURATION @AT@ 8890 @LENGTH@ 52
------------UPD SimpleName@@COMPACTION_INITIATOR_CYCLE_DURATION @TO@ COMPACTION_CLEANER_CYCLE_DURATION @AT@ 8907 @LENGTH@ 35


UPD ExpressionStatement@@MethodInvocation:httpHeaders.put("x-ms-request-id","12345") @TO@ MethodInvocation:httpHeaders.set("x-ms-request-id","12345") @AT@ 6892 @LENGTH@ 44
---UPD MethodInvocation@@httpHeaders.put("x-ms-request-id","12345") @TO@ httpHeaders.set("x-ms-request-id","12345") @AT@ 6892 @LENGTH@ 43
------UPD SimpleName@@MethodName:put:["x-ms-request-id", "12345"] @TO@ MethodName:set:["x-ms-request-id", "12345"] @AT@ 6904 @LENGTH@ 31


UPD ReturnStatement@@LambdaExpression:() -> {
  Map<String,MethodTarget> result=new HashMap<>();
  MethodTarget methodTarget=MethodTarget.of("firstCommand",commands(),new Command.Help("A rather extensive description of some command."));
  result.put("first-command",methodTarget);
  result.put("1st-command",methodTarget);
  methodTarget=MethodTarget.of("secondCommand",commands(),new Command.Help("The second command. This one is known under several aliases as well."));
  result.put("second-command",methodTarget);
  result.put("yet-another-command",methodTarget);
  methodTarget=MethodTarget.of("thirdCommand",commands(),new Command.Help("The last command."));
  result.put("third-command",methodTarget);
  methodTarget=MethodTarget.of("firstCommandInGroup",commands(),new Command.Help("The first command in a separate group.","Example Group"));
  result.put("first-group-command",methodTarget);
  methodTarget=MethodTarget.of("secondCommandInGroup",commands(),new Command.Help("The second command in a separate group.","Example Group"));
  result.put("second-group-command",methodTarget);
  return result;
}
 @TO@ ClassInstanceCreation:new CommandRegistry(){
  @Override public Map<String,MethodTarget> listCommands(){
    Map<String,MethodTarget> result=new HashMap<>();
    MethodTarget methodTarget=MethodTarget.of("firstCommand",commands(),new Command.Help("A rather extensive description of some command."));
    result.put("first-command",methodTarget);
    result.put("1st-command",methodTarget);
    methodTarget=MethodTarget.of("secondCommand",commands(),new Command.Help("The second command. This one is known under several aliases as well."));
    result.put("second-command",methodTarget);
    result.put("yet-another-command",methodTarget);
    methodTarget=MethodTarget.of("thirdCommand",commands(),new Command.Help("The last command."));
    result.put("third-command",methodTarget);
    methodTarget=MethodTarget.of("firstCommandInGroup",commands(),new Command.Help("The first command in a separate group.","Example Group"));
    result.put("first-group-command",methodTarget);
    methodTarget=MethodTarget.of("secondCommandInGroup",commands(),new Command.Help("The second command in a separate group.","Example Group"));
    result.put("second-group-command",methodTarget);
    return result;
  }
  @Override public void addCommand(  String name,  MethodTarget target){
  }
  @Override public void removeCommand(  String name){
  }
}
 @AT@ 3926 @LENGTH@ 1149
---DEL LambdaExpression@@() -> {
  Map<String,MethodTarget> result=new HashMap<>();
  MethodTarget methodTarget=MethodTarget.of("firstCommand",commands(),new Command.Help("A rather extensive description of some command."));
  result.put("first-command",methodTarget);
  result.put("1st-command",methodTarget);
  methodTarget=MethodTarget.of("secondCommand",commands(),new Command.Help("The second command. This one is known under several aliases as well."));
  result.put("second-command",methodTarget);
  result.put("yet-another-command",methodTarget);
  methodTarget=MethodTarget.of("thirdCommand",commands(),new Command.Help("The last command."));
  result.put("third-command",methodTarget);
  methodTarget=MethodTarget.of("firstCommandInGroup",commands(),new Command.Help("The first command in a separate group.","Example Group"));
  result.put("first-group-command",methodTarget);
  methodTarget=MethodTarget.of("secondCommandInGroup",commands(),new Command.Help("The second command in a separate group.","Example Group"));
  result.put("second-group-command",methodTarget);
  return result;
}
 @AT@ 3933 @LENGTH@ 1141
------DEL ReturnStatement@@SimpleName:result @AT@ 5055 @LENGTH@ 14
---INS ClassInstanceCreation@@CommandRegistry[] @TO@ ReturnStatement@@LambdaExpression:() -> {
  Map<String,MethodTarget> result=new HashMap<>();
  MethodTarget methodTarget=MethodTarget.of("firstCommand",commands(),new Command.Help("A rather extensive description of some command."));
  result.put("first-command",methodTarget);
  result.put("1st-command",methodTarget);
  methodTarget=MethodTarget.of("secondCommand",commands(),new Command.Help("The second command. This one is known under several aliases as well."));
  result.put("second-command",methodTarget);
  result.put("yet-another-command",methodTarget);
  methodTarget=MethodTarget.of("thirdCommand",commands(),new Command.Help("The last command."));
  result.put("third-command",methodTarget);
  methodTarget=MethodTarget.of("firstCommandInGroup",commands(),new Command.Help("The first command in a separate group.","Example Group"));
  result.put("first-group-command",methodTarget);
  methodTarget=MethodTarget.of("secondCommandInGroup",commands(),new Command.Help("The second command in a separate group.","Example Group"));
  result.put("second-group-command",methodTarget);
  return result;
}
 @AT@ 3934 @LENGTH@ 1396
------INS New@@new @TO@ ClassInstanceCreation@@CommandRegistry[] @AT@ 3934 @LENGTH@ 3
------INS SimpleType@@CommandRegistry @TO@ ClassInstanceCreation@@CommandRegistry[] @AT@ 3938 @LENGTH@ 15
------INS AnonymousClassDeclaration@@AnonymousClass @TO@ ClassInstanceCreation@@CommandRegistry[] @AT@ 3956 @LENGTH@ 1374
---------INS MethodDeclaration@@public, Map<String,MethodTarget>, MethodName:listCommands,  @TO@ AnonymousClassDeclaration@@AnonymousClass @AT@ 3977 @LENGTH@ 1198
------------MOV VariableDeclarationStatement@@Map<String,MethodTarget> result=new HashMap<>(); @TO@ MethodDeclaration@@public, Map<String,MethodTarget>, MethodName:listCommands,  @AT@ 3945 @LENGTH@ 51
------------INS Modifier@@public @TO@ MethodDeclaration@@public, Map<String,MethodTarget>, MethodName:listCommands,  @AT@ 3977 @LENGTH@ 6
------------INS ParameterizedType@@Map<String,MethodTarget> @TO@ MethodDeclaration@@public, Map<String,MethodTarget>, MethodName:listCommands,  @AT@ 3984 @LENGTH@ 25
---------------INS SimpleType@@Map @TO@ ParameterizedType@@Map<String,MethodTarget> @AT@ 3984 @LENGTH@ 3
---------------INS SimpleType@@String @TO@ ParameterizedType@@Map<String,MethodTarget> @AT@ 3988 @LENGTH@ 6
---------------INS SimpleType@@MethodTarget @TO@ ParameterizedType@@Map<String,MethodTarget> @AT@ 3996 @LENGTH@ 12
------------MOV VariableDeclarationStatement@@MethodTarget methodTarget=MethodTarget.of("firstCommand",commands(),new Command.Help("A rather extensive description of some command.")); @TO@ MethodDeclaration@@public, Map<String,MethodTarget>, MethodName:listCommands,  @AT@ 4001 @LENGTH@ 141
------------INS SimpleName@@MethodName:listCommands @TO@ MethodDeclaration@@public, Map<String,MethodTarget>, MethodName:listCommands,  @AT@ 4010 @LENGTH@ 12
------------MOV ExpressionStatement@@MethodInvocation:result.put("first-command",methodTarget) @TO@ MethodDeclaration@@public, Map<String,MethodTarget>, MethodName:listCommands,  @AT@ 4147 @LENGTH@ 42
------------MOV ExpressionStatement@@MethodInvocation:result.put("1st-command",methodTarget) @TO@ MethodDeclaration@@public, Map<String,MethodTarget>, MethodName:listCommands,  @AT@ 4194 @LENGTH@ 40
------------MOV ExpressionStatement@@Assignment:methodTarget=MethodTarget.of("secondCommand",commands(),new Command.Help("The second command. This one is known under several aliases as well.")) @TO@ MethodDeclaration@@public, Map<String,MethodTarget>, MethodName:listCommands,  @AT@ 4240 @LENGTH@ 150
------------MOV ExpressionStatement@@MethodInvocation:result.put("second-command",methodTarget) @TO@ MethodDeclaration@@public, Map<String,MethodTarget>, MethodName:listCommands,  @AT@ 4395 @LENGTH@ 43
------------MOV ExpressionStatement@@MethodInvocation:result.put("yet-another-command",methodTarget) @TO@ MethodDeclaration@@public, Map<String,MethodTarget>, MethodName:listCommands,  @AT@ 4443 @LENGTH@ 48
------------MOV ExpressionStatement@@Assignment:methodTarget=MethodTarget.of("thirdCommand",commands(),new Command.Help("The last command.")) @TO@ MethodDeclaration@@public, Map<String,MethodTarget>, MethodName:listCommands,  @AT@ 4497 @LENGTH@ 98
------------MOV ExpressionStatement@@MethodInvocation:result.put("third-command",methodTarget) @TO@ MethodDeclaration@@public, Map<String,MethodTarget>, MethodName:listCommands,  @AT@ 4600 @LENGTH@ 42
------------MOV ExpressionStatement@@Assignment:methodTarget=MethodTarget.of("firstCommandInGroup",commands(),new Command.Help("The first command in a separate group.","Example Group")) @TO@ MethodDeclaration@@public, Map<String,MethodTarget>, MethodName:listCommands,  @AT@ 4648 @LENGTH@ 143
------------MOV ExpressionStatement@@MethodInvocation:result.put("first-group-command",methodTarget) @TO@ MethodDeclaration@@public, Map<String,MethodTarget>, MethodName:listCommands,  @AT@ 4796 @LENGTH@ 48
------------MOV ExpressionStatement@@Assignment:methodTarget=MethodTarget.of("secondCommandInGroup",commands(),new Command.Help("The second command in a separate group.","Example Group")) @TO@ MethodDeclaration@@public, Map<String,MethodTarget>, MethodName:listCommands,  @AT@ 4850 @LENGTH@ 145
------------MOV ExpressionStatement@@MethodInvocation:result.put("second-group-command",methodTarget) @TO@ MethodDeclaration@@public, Map<String,MethodTarget>, MethodName:listCommands,  @AT@ 5000 @LENGTH@ 49
------------INS ReturnStatement@@SimpleName:result @TO@ MethodDeclaration@@public, Map<String,MethodTarget>, MethodName:listCommands,  @AT@ 5155 @LENGTH@ 14
---------------MOV SimpleName@@result @TO@ ReturnStatement@@SimpleName:result @AT@ 5062 @LENGTH@ 6
---------INS MethodDeclaration@@public, void, MethodName:addCommand, String name, MethodTarget target,  @TO@ AnonymousClassDeclaration@@AnonymousClass @AT@ 5195 @LENGTH@ 64
------------INS Modifier@@public @TO@ MethodDeclaration@@public, void, MethodName:addCommand, String name, MethodTarget target,  @AT@ 5195 @LENGTH@ 6
------------INS PrimitiveType@@void @TO@ MethodDeclaration@@public, void, MethodName:addCommand, String name, MethodTarget target,  @AT@ 5202 @LENGTH@ 4
------------INS SimpleName@@MethodName:addCommand @TO@ MethodDeclaration@@public, void, MethodName:addCommand, String name, MethodTarget target,  @AT@ 5207 @LENGTH@ 10
------------INS SingleVariableDeclaration@@String name @TO@ MethodDeclaration@@public, void, MethodName:addCommand, String name, MethodTarget target,  @AT@ 5218 @LENGTH@ 11
---------------INS SimpleType@@String @TO@ SingleVariableDeclaration@@String name @AT@ 5218 @LENGTH@ 6
---------------INS SimpleName@@name @TO@ SingleVariableDeclaration@@String name @AT@ 5225 @LENGTH@ 4
------------INS SingleVariableDeclaration@@MethodTarget target @TO@ MethodDeclaration@@public, void, MethodName:addCommand, String name, MethodTarget target,  @AT@ 5231 @LENGTH@ 19
---------------INS SimpleType@@MethodTarget @TO@ SingleVariableDeclaration@@MethodTarget target @AT@ 5231 @LENGTH@ 12
---------------INS SimpleName@@target @TO@ SingleVariableDeclaration@@MethodTarget target @AT@ 5244 @LENGTH@ 6
---------INS MethodDeclaration@@public, void, MethodName:removeCommand, String name,  @TO@ AnonymousClassDeclaration@@AnonymousClass @AT@ 5279 @LENGTH@ 46
------------INS Modifier@@public @TO@ MethodDeclaration@@public, void, MethodName:removeCommand, String name,  @AT@ 5279 @LENGTH@ 6
------------INS PrimitiveType@@void @TO@ MethodDeclaration@@public, void, MethodName:removeCommand, String name,  @AT@ 5286 @LENGTH@ 4
------------INS SimpleName@@MethodName:removeCommand @TO@ MethodDeclaration@@public, void, MethodName:removeCommand, String name,  @AT@ 5291 @LENGTH@ 13
------------INS SingleVariableDeclaration@@String name @TO@ MethodDeclaration@@public, void, MethodName:removeCommand, String name,  @AT@ 5305 @LENGTH@ 11
---------------INS SimpleType@@String @TO@ SingleVariableDeclaration@@String name @AT@ 5305 @LENGTH@ 6
---------------INS SimpleName@@name @TO@ SingleVariableDeclaration@@String name @AT@ 5312 @LENGTH@ 4


UPD TryStatement@@try (Reader reader=OrcFile.createReader(fs,inputPath);RecordReader rr=reader.rows()){  List<StripeInformation> stripes=reader.getStripes();  RecordIdentifier[] keyIndex=OrcRecordUpdater.parseKeyIndex(reader);  StructObjectInspector soi=(StructObjectInspector)reader.getObjectInspector();  List<? extends StructField> structFields=soi.getAllStructFieldRefs();  StructField transactionField=structFields.get(1);  LongObjectInspector transactionOI=(LongObjectInspector)transactionField.getFieldObjectInspector();  StructField bucketField=structFields.get(2);  IntObjectInspector bucketOI=(IntObjectInspector)bucketField.getFieldObjectInspector();  StructField rowIdField=structFields.get(3);  LongObjectInspector rowIdOI=(LongObjectInspector)rowIdField.getFieldObjectInspector();  long rowsProcessed=0;  for (int i=0; i < stripes.size(); i++) {    rowsProcessed+=stripes.get(i).getNumberOfRows();    rr.seekToRow(rowsProcessed - 1);    OrcStruct row=(OrcStruct)rr.next(null);    long lastTransaction=transactionOI.get(soi.getStructFieldData(row,transactionField));    int lastBucket=bucketOI.get(soi.getStructFieldData(row,bucketField));    long lastRowId=rowIdOI.get(soi.getStructFieldData(row,rowIdField));    RecordIdentifier recordIdentifier=new RecordIdentifier(lastTransaction,lastBucket,lastRowId);    result.recordIdentifiers.add(recordIdentifier);    if (stripes.size() != keyIndex.length || keyIndex[i] == null || recordIdentifier.compareTo(keyIndex[i]) != 0) {      result.isValid=false;    }  }}  @TO@ try (Reader reader=OrcFile.createReader(fs,inputPath);RecordReader rr=reader.rows()){  List<StripeInformation> stripes=reader.getStripes();  RecordIdentifier[] keyIndex=OrcRecordUpdater.parseKeyIndex(reader);  if (keyIndex == null) {    result.isValid=false;  }  StructObjectInspector soi=(StructObjectInspector)reader.getObjectInspector();  List<? extends StructField> structFields=soi.getAllStructFieldRefs();  StructField transactionField=structFields.get(1);  LongObjectInspector transactionOI=(LongObjectInspector)transactionField.getFieldObjectInspector();  StructField bucketField=structFields.get(2);  IntObjectInspector bucketOI=(IntObjectInspector)bucketField.getFieldObjectInspector();  StructField rowIdField=structFields.get(3);  LongObjectInspector rowIdOI=(LongObjectInspector)rowIdField.getFieldObjectInspector();  long rowsProcessed=0;  for (int i=0; i < stripes.size(); i++) {    rowsProcessed+=stripes.get(i).getNumberOfRows();    rr.seekToRow(rowsProcessed - 1);    OrcStruct row=(OrcStruct)rr.next(null);    long lastTransaction=transactionOI.get(soi.getStructFieldData(row,transactionField));    int lastBucket=bucketOI.get(soi.getStructFieldData(row,bucketField));    long lastRowId=rowIdOI.get(soi.getStructFieldData(row,rowIdField));    RecordIdentifier recordIdentifier=new RecordIdentifier(lastTransaction,lastBucket,lastRowId);    result.recordIdentifiers.add(recordIdentifier);    if (result.isValid && (stripes.size() != keyIndex.length || keyIndex[i] == null || recordIdentifier.compareTo(keyIndex[i]) != 0)) {      result.isValid=false;    }  }}  @AT@ 5809 @LENGTH@ 1803
---INS IfStatement@@if (keyIndex == null) {  result.isValid=false;} @TO@ TryStatement@@try (Reader reader=OrcFile.createReader(fs,inputPath);RecordReader rr=reader.rows()){  List<StripeInformation> stripes=reader.getStripes();  RecordIdentifier[] keyIndex=OrcRecordUpdater.parseKeyIndex(reader);  StructObjectInspector soi=(StructObjectInspector)reader.getObjectInspector();  List<? extends StructField> structFields=soi.getAllStructFieldRefs();  StructField transactionField=structFields.get(1);  LongObjectInspector transactionOI=(LongObjectInspector)transactionField.getFieldObjectInspector();  StructField bucketField=structFields.get(2);  IntObjectInspector bucketOI=(IntObjectInspector)bucketField.getFieldObjectInspector();  StructField rowIdField=structFields.get(3);  LongObjectInspector rowIdOI=(LongObjectInspector)rowIdField.getFieldObjectInspector();  long rowsProcessed=0;  for (int i=0; i < stripes.size(); i++) {    rowsProcessed+=stripes.get(i).getNumberOfRows();    rr.seekToRow(rowsProcessed - 1);    OrcStruct row=(OrcStruct)rr.next(null);    long lastTransaction=transactionOI.get(soi.getStructFieldData(row,transactionField));    int lastBucket=bucketOI.get(soi.getStructFieldData(row,bucketField));    long lastRowId=rowIdOI.get(soi.getStructFieldData(row,rowIdField));    RecordIdentifier recordIdentifier=new RecordIdentifier(lastTransaction,lastBucket,lastRowId);    result.recordIdentifiers.add(recordIdentifier);    if (stripes.size() != keyIndex.length || keyIndex[i] == null || recordIdentifier.compareTo(keyIndex[i]) != 0) {      result.isValid=false;    }  }}  @AT@ 6054 @LENGTH@ 63
------INS InfixExpression@@keyIndex == null @TO@ IfStatement@@if (keyIndex == null) {  result.isValid=false;} @AT@ 6058 @LENGTH@ 16
---------INS SimpleName@@keyIndex @TO@ InfixExpression@@keyIndex == null @AT@ 6058 @LENGTH@ 8
---------INS Operator@@== @TO@ InfixExpression@@keyIndex == null @AT@ 6066 @LENGTH@ 2
---------INS NullLiteral@@null @TO@ InfixExpression@@keyIndex == null @AT@ 6070 @LENGTH@ 4
------INS Block@@ThenBody:{  result.isValid=false;} @TO@ IfStatement@@if (keyIndex == null) {  result.isValid=false;} @AT@ 6076 @LENGTH@ 41
---------INS ExpressionStatement@@Assignment:result.isValid=false @TO@ Block@@ThenBody:{  result.isValid=false;} @AT@ 6086 @LENGTH@ 23
------------INS Assignment@@result.isValid=false @TO@ ExpressionStatement@@Assignment:result.isValid=false @AT@ 6086 @LENGTH@ 22
---------------INS QualifiedName@@result.isValid @TO@ Assignment@@result.isValid=false @AT@ 6086 @LENGTH@ 14
------------------INS SimpleName@@result @TO@ QualifiedName@@result.isValid @AT@ 6086 @LENGTH@ 6
------------------INS SimpleName@@isValid @TO@ QualifiedName@@result.isValid @AT@ 6093 @LENGTH@ 7
---------------INS Operator@@= @TO@ Assignment@@result.isValid=false @AT@ 6100 @LENGTH@ 1
---------------INS BooleanLiteral@@false @TO@ Assignment@@result.isValid=false @AT@ 6103 @LENGTH@ 5
---UPD ForStatement@@for (int i=0; i < stripes.size(); i++) {  rowsProcessed+=stripes.get(i).getNumberOfRows();  rr.seekToRow(rowsProcessed - 1);  OrcStruct row=(OrcStruct)rr.next(null);  long lastTransaction=transactionOI.get(soi.getStructFieldData(row,transactionField));  int lastBucket=bucketOI.get(soi.getStructFieldData(row,bucketField));  long lastRowId=rowIdOI.get(soi.getStructFieldData(row,rowIdField));  RecordIdentifier recordIdentifier=new RecordIdentifier(lastTransaction,lastBucket,lastRowId);  result.recordIdentifiers.add(recordIdentifier);  if (stripes.size() != keyIndex.length || keyIndex[i] == null || recordIdentifier.compareTo(keyIndex[i]) != 0) {    result.isValid=false;  }} @TO@ for (int i=0; i < stripes.size(); i++) {  rowsProcessed+=stripes.get(i).getNumberOfRows();  rr.seekToRow(rowsProcessed - 1);  OrcStruct row=(OrcStruct)rr.next(null);  long lastTransaction=transactionOI.get(soi.getStructFieldData(row,transactionField));  int lastBucket=bucketOI.get(soi.getStructFieldData(row,bucketField));  long lastRowId=rowIdOI.get(soi.getStructFieldData(row,rowIdField));  RecordIdentifier recordIdentifier=new RecordIdentifier(lastTransaction,lastBucket,lastRowId);  result.recordIdentifiers.add(recordIdentifier);  if (result.isValid && (stripes.size() != keyIndex.length || keyIndex[i] == null || recordIdentifier.compareTo(keyIndex[i]) != 0)) {    result.isValid=false;  }} @AT@ 6819 @LENGTH@ 787
------UPD IfStatement@@if (stripes.size() != keyIndex.length || keyIndex[i] == null || recordIdentifier.compareTo(keyIndex[i]) != 0) {  result.isValid=false;} @TO@ if (result.isValid && (stripes.size() != keyIndex.length || keyIndex[i] == null || recordIdentifier.compareTo(keyIndex[i]) != 0)) {  result.isValid=false;} @AT@ 7443 @LENGTH@ 155
---------INS InfixExpression@@result.isValid && (stripes.size() != keyIndex.length || keyIndex[i] == null || recordIdentifier.compareTo(keyIndex[i]) != 0) @TO@ IfStatement@@if (stripes.size() != keyIndex.length || keyIndex[i] == null || recordIdentifier.compareTo(keyIndex[i]) != 0) {  result.isValid=false;} @AT@ 7519 @LENGTH@ 136
------------INS QualifiedName@@result.isValid @TO@ InfixExpression@@result.isValid && (stripes.size() != keyIndex.length || keyIndex[i] == null || recordIdentifier.compareTo(keyIndex[i]) != 0) @AT@ 7519 @LENGTH@ 14
---------------INS SimpleName@@result @TO@ QualifiedName@@result.isValid @AT@ 7519 @LENGTH@ 6
---------------INS SimpleName@@isValid @TO@ QualifiedName@@result.isValid @AT@ 7526 @LENGTH@ 7
------------INS Operator@@&& @TO@ InfixExpression@@result.isValid && (stripes.size() != keyIndex.length || keyIndex[i] == null || recordIdentifier.compareTo(keyIndex[i]) != 0) @AT@ 7533 @LENGTH@ 2
------------INS ParenthesizedExpression@@(stripes.size() != keyIndex.length || keyIndex[i] == null || recordIdentifier.compareTo(keyIndex[i]) != 0) @TO@ InfixExpression@@result.isValid && (stripes.size() != keyIndex.length || keyIndex[i] == null || recordIdentifier.compareTo(keyIndex[i]) != 0) @AT@ 7537 @LENGTH@ 118
---------------MOV InfixExpression@@stripes.size() != keyIndex.length || keyIndex[i] == null || recordIdentifier.compareTo(keyIndex[i]) != 0 @TO@ ParenthesizedExpression@@(stripes.size() != keyIndex.length || keyIndex[i] == null || recordIdentifier.compareTo(keyIndex[i]) != 0) @AT@ 7447 @LENGTH@ 104


UPD ExpressionStatement@@MethodInvocation:exchange.getIn().getHeaders().put("headerAttributeElement",new QName("http://shouldBeInHeader","<myElement />")) @TO@ MethodInvocation:exchange.getIn().getHeaders().put("headerAttributeElement",new QName("http://shouldBeInHeader","myElement")) @AT@ 5545 @LENGTH@ 115
---UPD MethodInvocation@@exchange.getIn().getHeaders().put("headerAttributeElement",new QName("http://shouldBeInHeader","<myElement />")) @TO@ exchange.getIn().getHeaders().put("headerAttributeElement",new QName("http://shouldBeInHeader","myElement")) @AT@ 5545 @LENGTH@ 114
------UPD SimpleName@@MethodName:put:["headerAttributeElement", new QName("http://shouldBeInHeader","<myElement />")] @TO@ MethodName:put:["headerAttributeElement", new QName("http://shouldBeInHeader","myElement")] @AT@ 5575 @LENGTH@ 84
---------UPD ClassInstanceCreation@@QName["http://shouldBeInHeader", "<myElement />"] @TO@ QName["http://shouldBeInHeader", "myElement"] @AT@ 5605 @LENGTH@ 53
------------UPD StringLiteral@@"<myElement />" @TO@ "myElement" @AT@ 5642 @LENGTH@ 15


UPD CatchClause@@catch (Throwable e) {  LOG.error("Caught exception while checking compaction eligibility.",e);  try {    ci.errorMessage=e.getMessage();    txnHandler.markFailed(ci);  } catch (  MetaException ex) {    LOG.error("Caught exception while marking compaction as failed.",e);    return false;  }} @TO@ catch (Throwable e) {  LOG.error("Caught exception while checking compaction eligibility.",e);  try {    ci.errorMessage=e.getMessage();    txnHandler.markFailed(ci);  } catch (  MetaException ex) {    LOG.error("Caught exception while marking compaction as failed.",e);  }  return false;} @AT@ 27521 @LENGTH@ 338
---UPD TryStatement@@try {  ci.errorMessage=e.getMessage();  txnHandler.markFailed(ci);} catch (MetaException ex) {  LOG.error("Caught exception while marking compaction as failed.",e);  return false;} @TO@ try {  ci.errorMessage=e.getMessage();  txnHandler.markFailed(ci);} catch (MetaException ex) {  LOG.error("Caught exception while marking compaction as failed.",e);} @AT@ 27628 @LENGTH@ 225
------UPD CatchClause@@catch (MetaException ex) {  LOG.error("Caught exception while marking compaction as failed.",e);  return false;} @TO@ catch (MetaException ex) {  LOG.error("Caught exception while marking compaction as failed.",e);} @AT@ 27719 @LENGTH@ 134
---------DEL ReturnStatement@@BooleanLiteral:false @AT@ 27832 @LENGTH@ 13
------------DEL BooleanLiteral@@false @AT@ 27839 @LENGTH@ 5
---INS ReturnStatement@@BooleanLiteral:false @TO@ CatchClause@@catch (Throwable e) {  LOG.error("Caught exception while checking compaction eligibility.",e);  try {    ci.errorMessage=e.getMessage();    txnHandler.markFailed(ci);  } catch (  MetaException ex) {    LOG.error("Caught exception while marking compaction as failed.",e);    return false;  }} @AT@ 28590 @LENGTH@ 13
------INS BooleanLiteral@@false @TO@ ReturnStatement@@BooleanLiteral:false @AT@ 28597 @LENGTH@ 5


DEL FieldDeclaration@@private, static, final, DynMethods.UnboundMethod, [ALTER_TABLE=DynMethods.builder("alter_table").impl(IMetaStoreClient.class,"alter_table_with_environmentContext",String.class,String.class,Table.class,EnvironmentContext.class).impl(IMetaStoreClient.class,"alter_table",String.class,String.class,Table.class,EnvironmentContext.class).impl(IMetaStoreClient.class,"alter_table",String.class,String.class,Table.class).build()] @AT@ 4767 @LENGTH@ 491
---DEL Modifier@@private @AT@ 4767 @LENGTH@ 7
---DEL Modifier@@static @AT@ 4775 @LENGTH@ 6
---DEL Modifier@@final @AT@ 4782 @LENGTH@ 5
---DEL SimpleType@@DynMethods.UnboundMethod @AT@ 4788 @LENGTH@ 24
---DEL VariableDeclarationFragment@@ALTER_TABLE=DynMethods.builder("alter_table").impl(IMetaStoreClient.class,"alter_table_with_environmentContext",String.class,String.class,Table.class,EnvironmentContext.class).impl(IMetaStoreClient.class,"alter_table",String.class,String.class,Table.class,EnvironmentContext.class).impl(IMetaStoreClient.class,"alter_table",String.class,String.class,Table.class).build() @AT@ 4813 @LENGTH@ 444
------DEL SimpleName@@ALTER_TABLE @AT@ 4813 @LENGTH@ 11
------DEL MethodInvocation@@DynMethods.builder("alter_table").impl(IMetaStoreClient.class,"alter_table_with_environmentContext",String.class,String.class,Table.class,EnvironmentContext.class).impl(IMetaStoreClient.class,"alter_table",String.class,String.class,Table.class,EnvironmentContext.class).impl(IMetaStoreClient.class,"alter_table",String.class,String.class,Table.class).build() @AT@ 4827 @LENGTH@ 430
---------DEL MethodInvocation@@MethodName:impl:[IMetaStoreClient.class, "alter_table", String.class, String.class, Table.class] @AT@ 4827 @LENGTH@ 415
------------DEL TypeLiteral@@IMetaStoreClient.class @AT@ 5153 @LENGTH@ 22
------------DEL StringLiteral@@"alter_table" @AT@ 5177 @LENGTH@ 13
------------DEL TypeLiteral@@String.class @AT@ 5202 @LENGTH@ 12
------------DEL TypeLiteral@@String.class @AT@ 5216 @LENGTH@ 12
------------DEL TypeLiteral@@Table.class @AT@ 5230 @LENGTH@ 11
---------DEL MethodInvocation@@MethodName:impl:[IMetaStoreClient.class, "alter_table", String.class, String.class, Table.class, EnvironmentContext.class] @AT@ 4827 @LENGTH@ 313
------------DEL TypeLiteral@@IMetaStoreClient.class @AT@ 5025 @LENGTH@ 22
------------DEL StringLiteral@@"alter_table" @AT@ 5049 @LENGTH@ 13
------------DEL TypeLiteral@@String.class @AT@ 5074 @LENGTH@ 12
------------DEL TypeLiteral@@String.class @AT@ 5088 @LENGTH@ 12
------------DEL TypeLiteral@@Table.class @AT@ 5102 @LENGTH@ 11
------------DEL TypeLiteral@@EnvironmentContext.class @AT@ 5115 @LENGTH@ 24
---------DEL MethodInvocation@@MethodName:impl:[IMetaStoreClient.class, "alter_table_with_environmentContext", String.class, String.class, Table.class, EnvironmentContext.class] @AT@ 4827 @LENGTH@ 185
------------DEL TypeLiteral@@IMetaStoreClient.class @AT@ 4873 @LENGTH@ 22
------------DEL StringLiteral@@"alter_table_with_environmentContext" @AT@ 4897 @LENGTH@ 37
------------DEL TypeLiteral@@String.class @AT@ 4946 @LENGTH@ 12
------------DEL TypeLiteral@@String.class @AT@ 4960 @LENGTH@ 12
------------DEL TypeLiteral@@Table.class @AT@ 4974 @LENGTH@ 11
------------DEL TypeLiteral@@EnvironmentContext.class @AT@ 4987 @LENGTH@ 24
---------DEL MethodInvocation@@MethodName:builder:["alter_table"] @AT@ 4827 @LENGTH@ 33
------------DEL StringLiteral@@"alter_table" @AT@ 4846 @LENGTH@ 13
---------DEL SimpleName@@Name:DynMethods @AT@ 4827 @LENGTH@ 10
---------DEL SimpleName@@MethodName:build:[] @AT@ 5250 @LENGTH@ 7


UPD ExpressionStatement@@MethodInvocation:exchange.getOut().setBody("When You Go Home, Tell Them Of Us And Say, For Your Tomorrow, We Gave Our Today.") @TO@ MethodInvocation:exchange.getMessage().setBody("When You Go Home, Tell Them Of Us And Say, For Your Tomorrow, We Gave Our Today.") @AT@ 1937 @LENGTH@ 151
---UPD MethodInvocation@@exchange.getOut().setBody("When You Go Home, Tell Them Of Us And Say, For Your Tomorrow, We Gave Our Today.") @TO@ exchange.getMessage().setBody("When You Go Home, Tell Them Of Us And Say, For Your Tomorrow, We Gave Our Today.") @AT@ 1937 @LENGTH@ 150
------UPD MethodInvocation@@MethodName:getOut:[] @TO@ MethodName:getMessage:[] @AT@ 1937 @LENGTH@ 17


MOV MethodDeclaration@@private, static, TypeInformation<?>, MethodName:resolveTypeParameter, List<TypeInformation<?>> arguments, int index, Supplier<String> exceptionMessage,  @TO@ TypeDeclaration@@[public]DefaultRepositoryMetadata, AbstractRepositoryMetadata @AT@ 2364 @LENGTH@ 339
---UPD IfStatement@@if (arguments.size() <= index || arguments.get(index) == null) {  throw new IllegalArgumentException(exceptionMessage.get());} @TO@ if ((arguments.size() <= index) || (arguments.get(index) == null)) {  throw new IllegalArgumentException(exceptionMessage.get());} @AT@ 2509 @LENGTH@ 131
------UPD InfixExpression@@arguments.size() <= index || arguments.get(index) == null @TO@ (arguments.size() <= index) || (arguments.get(index) == null) @AT@ 2513 @LENGTH@ 57
---------INS ParenthesizedExpression@@(arguments.size() <= index) @TO@ InfixExpression@@arguments.size() <= index || arguments.get(index) == null @AT@ 2697 @LENGTH@ 27
------------MOV InfixExpression@@arguments.size() <= index @TO@ ParenthesizedExpression@@(arguments.size() <= index) @AT@ 2513 @LENGTH@ 25
---------INS ParenthesizedExpression@@(arguments.get(index) == null) @TO@ InfixExpression@@arguments.size() <= index || arguments.get(index) == null @AT@ 2728 @LENGTH@ 30
------------MOV InfixExpression@@arguments.get(index) == null @TO@ ParenthesizedExpression@@(arguments.get(index) == null) @AT@ 2542 @LENGTH@ 28
---UPD ReturnStatement@@MethodInvocation:arguments.get(index).getGenericTypeInformation() @TO@ MethodInvocation:arguments.get(index) @AT@ 2644 @LENGTH@ 56
------UPD MethodInvocation@@arguments.get(index).getGenericTypeInformation() @TO@ arguments.get(index) @AT@ 2651 @LENGTH@ 48
---------DEL MethodInvocation@@MethodName:get:[index] @AT@ 2651 @LENGTH@ 20
------------DEL SimpleName@@index @AT@ 2665 @LENGTH@ 5
---------DEL SimpleName@@MethodName:getGenericTypeInformation:[] @AT@ 2672 @LENGTH@ 27
---------INS SimpleName@@MethodName:get:[index] @TO@ MethodInvocation@@arguments.get(index).getGenericTypeInformation() @AT@ 2849 @LENGTH@ 10
------------INS SimpleName@@index @TO@ SimpleName@@MethodName:get:[index] @AT@ 2853 @LENGTH@ 5


UPD ExpressionStatement@@MethodInvocation:archive.read() @TO@ MethodInvocation:assertThrows(IllegalStateException.class,() -> archive.read()) @AT@ 5283 @LENGTH@ 15
---DEL MethodInvocation@@archive.read() @AT@ 5283 @LENGTH@ 14
---INS MethodInvocation@@assertThrows(IllegalStateException.class,() -> archive.read()) @TO@ ExpressionStatement@@MethodInvocation:archive.read() @AT@ 5328 @LENGTH@ 63
------INS SimpleName@@MethodName:assertThrows:[IllegalStateException.class, () -> archive.read()] @TO@ MethodInvocation@@assertThrows(IllegalStateException.class,() -> archive.read()) @AT@ 5328 @LENGTH@ 63
---------INS TypeLiteral@@IllegalStateException.class @TO@ SimpleName@@MethodName:assertThrows:[IllegalStateException.class, () -> archive.read()] @AT@ 5341 @LENGTH@ 27
---------INS LambdaExpression@@() -> archive.read() @TO@ SimpleName@@MethodName:assertThrows:[IllegalStateException.class, () -> archive.read()] @AT@ 5370 @LENGTH@ 20
------------INS MethodInvocation@@archive.read() @TO@ LambdaExpression@@() -> archive.read() @AT@ 5376 @LENGTH@ 14
---------------MOV SimpleName@@Name:archive @TO@ MethodInvocation@@archive.read() @AT@ 5283 @LENGTH@ 7
---------------MOV SimpleName@@MethodName:read:[] @TO@ MethodInvocation@@archive.read() @AT@ 5291 @LENGTH@ 6


UPD MethodDeclaration@@public, void, MethodName:testInputStream, ArchiveException,  @TO@ public, void, MethodName:testInputStream,  @AT@ 1133 @LENGTH@ 186
---DEL SimpleType@@ArchiveException @AT@ 1170 @LENGTH@ 16
---UPD ExpressionStatement@@MethodInvocation:ArchiveStreamFactory.DEFAULT.createArchiveInputStream("ArchiveTestInput1",new ByteArrayInputStream(new byte[]{})) @TO@ MethodInvocation:assertThrows(ArchiveException.class,() -> ArchiveStreamFactory.DEFAULT.createArchiveInputStream("ArchiveTestInput1",new ByteArrayInputStream(new byte[]{}))) @AT@ 1197 @LENGTH@ 116
------INS MethodInvocation@@assertThrows(ArchiveException.class,() -> ArchiveStreamFactory.DEFAULT.createArchiveInputStream("ArchiveTestInput1",new ByteArrayInputStream(new byte[]{}))) @TO@ ExpressionStatement@@MethodInvocation:ArchiveStreamFactory.DEFAULT.createArchiveInputStream("ArchiveTestInput1",new ByteArrayInputStream(new byte[]{})) @AT@ 1108 @LENGTH@ 171
---------INS SimpleName@@MethodName:assertThrows:[ArchiveException.class, () -> ArchiveStreamFactory.DEFAULT.createArchiveInputStream("ArchiveTestInput1",new ByteArrayInputStream(new byte[]{}))] @TO@ MethodInvocation@@assertThrows(ArchiveException.class,() -> ArchiveStreamFactory.DEFAULT.createArchiveInputStream("ArchiveTestInput1",new ByteArrayInputStream(new byte[]{}))) @AT@ 1108 @LENGTH@ 171
------------INS TypeLiteral@@ArchiveException.class @TO@ SimpleName@@MethodName:assertThrows:[ArchiveException.class, () -> ArchiveStreamFactory.DEFAULT.createArchiveInputStream("ArchiveTestInput1",new ByteArrayInputStream(new byte[]{}))] @AT@ 1121 @LENGTH@ 22
------------INS LambdaExpression@@() -> ArchiveStreamFactory.DEFAULT.createArchiveInputStream("ArchiveTestInput1",new ByteArrayInputStream(new byte[]{})) @TO@ SimpleName@@MethodName:assertThrows:[ArchiveException.class, () -> ArchiveStreamFactory.DEFAULT.createArchiveInputStream("ArchiveTestInput1",new ByteArrayInputStream(new byte[]{}))] @AT@ 1157 @LENGTH@ 121
---------------MOV MethodInvocation@@ArchiveStreamFactory.DEFAULT.createArchiveInputStream("ArchiveTestInput1",new ByteArrayInputStream(new byte[]{})) @TO@ LambdaExpression@@() -> ArchiveStreamFactory.DEFAULT.createArchiveInputStream("ArchiveTestInput1",new ByteArrayInputStream(new byte[]{})) @AT@ 1197 @LENGTH@ 115


INS MethodDeclaration@@SingleItemSelectorSpec, MethodName:defaultSelect, String name,  @TO@ TypeDeclaration@@[public]SingleItemSelectorSpec, [BaseInputSpec<SingleItemSelectorSpec>] @AT@ 2261 @LENGTH@ 27
---INS SimpleType@@SingleItemSelectorSpec @TO@ MethodDeclaration@@SingleItemSelectorSpec, MethodName:defaultSelect, String name,  @AT@ 2238 @LENGTH@ 22
---INS SimpleName@@MethodName:defaultSelect @TO@ MethodDeclaration@@SingleItemSelectorSpec, MethodName:defaultSelect, String name,  @AT@ 2261 @LENGTH@ 13
---INS SingleVariableDeclaration@@String name @TO@ MethodDeclaration@@SingleItemSelectorSpec, MethodName:defaultSelect, String name,  @AT@ 2275 @LENGTH@ 11
------INS SimpleType@@String @TO@ SingleVariableDeclaration@@String name @AT@ 2275 @LENGTH@ 6
------INS SimpleName@@name @TO@ SingleVariableDeclaration@@String name @AT@ 2282 @LENGTH@ 4


DEL MethodDeclaration@@public, void, MethodName:setContext, CamelContext context,  @AT@ 16071 @LENGTH@ 86
---DEL Modifier@@public @AT@ 16071 @LENGTH@ 6
---DEL PrimitiveType@@void @AT@ 16078 @LENGTH@ 4
---DEL SimpleName@@MethodName:setContext @AT@ 16083 @LENGTH@ 10
---DEL SingleVariableDeclaration@@CamelContext context @AT@ 16094 @LENGTH@ 20
------DEL SimpleType@@CamelContext @AT@ 16094 @LENGTH@ 12
------DEL SimpleName@@context @AT@ 16107 @LENGTH@ 7
---DEL ExpressionStatement@@MethodInvocation:setCamelContext(context) @AT@ 16126 @LENGTH@ 25
------DEL MethodInvocation@@setCamelContext(context) @AT@ 16126 @LENGTH@ 24
---------DEL SimpleName@@MethodName:setCamelContext:[context] @AT@ 16126 @LENGTH@ 24
------------DEL SimpleName@@context @AT@ 16142 @LENGTH@ 7


UPD TypeDeclaration@@[@Singleton, @Transactional, public, static]SearchBean,  @TO@ [@ApplicationScoped, @Transactional, public, static]SearchBean,  @AT@ 6194 @LENGTH@ 758
---UPD MarkerAnnotation@@@Singleton @TO@ @ApplicationScoped @AT@ 6194 @LENGTH@ 10


UPD ExpressionStatement@@MethodInvocation:exchange.getOut().setBody(notification) @TO@ MethodInvocation:exchange.getMessage().setBody(notification) @AT@ 1191 @LENGTH@ 40
---UPD MethodInvocation@@exchange.getOut().setBody(notification) @TO@ exchange.getMessage().setBody(notification) @AT@ 1191 @LENGTH@ 39
------UPD MethodInvocation@@MethodName:getOut:[] @TO@ MethodName:getMessage:[] @AT@ 1191 @LENGTH@ 17


UPD MethodDeclaration@@protected, StringInputContext, MethodName:getThisContext, ComponentContext<?> context,  @TO@ public, StringInputContext, MethodName:getThisContext, ComponentContext<?> context,  @AT@ 2361 @LENGTH@ 383
---UPD Modifier@@protected @TO@ public @AT@ 2361 @LENGTH@ 9


DEL ExpressionStatement@@MethodInvocation:config.setLoginUrl(loginUrl.endsWith("/") ? loginUrl.substring(0,loginUrl.length() - 1) : loginUrl) @AT@ 4166 @LENGTH@ 101
---DEL MethodInvocation@@config.setLoginUrl(loginUrl.endsWith("/") ? loginUrl.substring(0,loginUrl.length() - 1) : loginUrl) @AT@ 4166 @LENGTH@ 100
------DEL SimpleName@@Name:config @AT@ 4166 @LENGTH@ 6
------DEL SimpleName@@MethodName:setLoginUrl:[loginUrl.endsWith("/") ? loginUrl.substring(0,loginUrl.length() - 1) : loginUrl] @AT@ 4173 @LENGTH@ 93
---------DEL ConditionalExpression@@loginUrl.endsWith("/") ? loginUrl.substring(0,loginUrl.length() - 1) : loginUrl @AT@ 4185 @LENGTH@ 80
------------DEL MethodInvocation@@loginUrl.endsWith("/") @AT@ 4185 @LENGTH@ 22
---------------DEL SimpleName@@Name:loginUrl @AT@ 4185 @LENGTH@ 8
---------------DEL SimpleName@@MethodName:endsWith:["/"] @AT@ 4194 @LENGTH@ 13
------------------DEL StringLiteral@@"/" @AT@ 4203 @LENGTH@ 3
------------DEL MethodInvocation@@loginUrl.substring(0,loginUrl.length() - 1) @AT@ 4210 @LENGTH@ 44
---------------DEL SimpleName@@Name:loginUrl @AT@ 4210 @LENGTH@ 8
---------------DEL SimpleName@@MethodName:substring:[0, loginUrl.length() - 1] @AT@ 4219 @LENGTH@ 35
------------------DEL NumberLiteral@@0 @AT@ 4229 @LENGTH@ 1
------------------DEL InfixExpression@@loginUrl.length() - 1 @AT@ 4232 @LENGTH@ 21
---------------------DEL MethodInvocation@@loginUrl.length() @AT@ 4232 @LENGTH@ 17
------------------------DEL SimpleName@@Name:loginUrl @AT@ 4232 @LENGTH@ 8
------------------------DEL SimpleName@@MethodName:length:[] @AT@ 4241 @LENGTH@ 8
---------------------DEL Operator@@- @AT@ 4249 @LENGTH@ 1
---------------------DEL NumberLiteral@@1 @AT@ 4252 @LENGTH@ 1
------------DEL SimpleName@@loginUrl @AT@ 4257 @LENGTH@ 8


UPD IfStatement@@if (part != null) {  Exchange newExchange=processorExchangeFactory.createCorrelatedCopy(copy,false);  if (newExchange.getProperty(ExchangePropertyKey.STREAM_CACHE_UNIT_OF_WORK) == null) {    newExchange.setProperty(ExchangePropertyKey.STREAM_CACHE_UNIT_OF_WORK,original.getUnitOfWork());  }  if (isShareUnitOfWork()) {    prepareSharedUnitOfWork(newExchange,copy);  }  if (part instanceof Message) {    newExchange.setIn((Message)part);  } else {    Message in=newExchange.getIn();    in.setBody(part);  }  return createProcessorExchangePair(index++,processor,newExchange,route);} else {  return null;} @TO@ if (part != null) {  Exchange newExchange=processorExchangeFactory.createCorrelatedCopy(copy,false);  newExchange.adapt(ExtendedExchange.class).setTransacted(original.isTransacted());  if (newExchange.getProperty(ExchangePropertyKey.STREAM_CACHE_UNIT_OF_WORK) == null) {    newExchange.setProperty(ExchangePropertyKey.STREAM_CACHE_UNIT_OF_WORK,original.getUnitOfWork());  }  if (isShareUnitOfWork()) {    prepareSharedUnitOfWork(newExchange,copy);  }  if (part instanceof Message) {    newExchange.setIn((Message)part);  } else {    Message in=newExchange.getIn();    in.setBody(part);  }  return createProcessorExchangePair(index++,processor,newExchange,route);} else {  return null;} @AT@ 9641 @LENGTH@ 1785
---UPD Block@@ThenBody:{  Exchange newExchange=processorExchangeFactory.createCorrelatedCopy(copy,false);  if (newExchange.getProperty(ExchangePropertyKey.STREAM_CACHE_UNIT_OF_WORK) == null) {    newExchange.setProperty(ExchangePropertyKey.STREAM_CACHE_UNIT_OF_WORK,original.getUnitOfWork());  }  if (isShareUnitOfWork()) {    prepareSharedUnitOfWork(newExchange,copy);  }  if (part instanceof Message) {    newExchange.setIn((Message)part);  } else {    Message in=newExchange.getIn();    in.setBody(part);  }  return createProcessorExchangePair(index++,processor,newExchange,route);} @TO@ ThenBody:{  Exchange newExchange=processorExchangeFactory.createCorrelatedCopy(copy,false);  newExchange.adapt(ExtendedExchange.class).setTransacted(original.isTransacted());  if (newExchange.getProperty(ExchangePropertyKey.STREAM_CACHE_UNIT_OF_WORK) == null) {    newExchange.setProperty(ExchangePropertyKey.STREAM_CACHE_UNIT_OF_WORK,original.getUnitOfWork());  }  if (isShareUnitOfWork()) {    prepareSharedUnitOfWork(newExchange,copy);  }  if (part instanceof Message) {    newExchange.setIn((Message)part);  } else {    Message in=newExchange.getIn();    in.setBody(part);  }  return createProcessorExchangePair(index++,processor,newExchange,route);} @AT@ 9659 @LENGTH@ 1701
------INS ExpressionStatement@@MethodInvocation:newExchange.adapt(ExtendedExchange.class).setTransacted(original.isTransacted()) @TO@ Block@@ThenBody:{  Exchange newExchange=processorExchangeFactory.createCorrelatedCopy(copy,false);  if (newExchange.getProperty(ExchangePropertyKey.STREAM_CACHE_UNIT_OF_WORK) == null) {    newExchange.setProperty(ExchangePropertyKey.STREAM_CACHE_UNIT_OF_WORK,original.getUnitOfWork());  }  if (isShareUnitOfWork()) {    prepareSharedUnitOfWork(newExchange,copy);  }  if (part instanceof Message) {    newExchange.setIn((Message)part);  } else {    Message in=newExchange.getIn();    in.setBody(part);  }  return createProcessorExchangePair(index++,processor,newExchange,route);} @AT@ 10010 @LENGTH@ 81
---------INS MethodInvocation@@newExchange.adapt(ExtendedExchange.class).setTransacted(original.isTransacted()) @TO@ ExpressionStatement@@MethodInvocation:newExchange.adapt(ExtendedExchange.class).setTransacted(original.isTransacted()) @AT@ 10010 @LENGTH@ 80
------------INS MethodInvocation@@MethodName:adapt:[ExtendedExchange.class] @TO@ MethodInvocation@@newExchange.adapt(ExtendedExchange.class).setTransacted(original.isTransacted()) @AT@ 10010 @LENGTH@ 41
---------------INS TypeLiteral@@ExtendedExchange.class @TO@ MethodInvocation@@MethodName:adapt:[ExtendedExchange.class] @AT@ 10028 @LENGTH@ 22
------------INS SimpleName@@Name:newExchange @TO@ MethodInvocation@@newExchange.adapt(ExtendedExchange.class).setTransacted(original.isTransacted()) @AT@ 10010 @LENGTH@ 11
------------INS SimpleName@@MethodName:setTransacted:[original.isTransacted()] @TO@ MethodInvocation@@newExchange.adapt(ExtendedExchange.class).setTransacted(original.isTransacted()) @AT@ 10052 @LENGTH@ 38
---------------INS MethodInvocation@@original.isTransacted() @TO@ SimpleName@@MethodName:setTransacted:[original.isTransacted()] @AT@ 10066 @LENGTH@ 23
------------------INS SimpleName@@Name:original @TO@ MethodInvocation@@original.isTransacted() @AT@ 10066 @LENGTH@ 8
------------------INS SimpleName@@MethodName:isTransacted:[] @TO@ MethodInvocation@@original.isTransacted() @AT@ 10075 @LENGTH@ 14


UPD IfStatement@@if (rootObject != null) {  lookupKey=this.sendConnectionFactorySelectorExpression.getValue(this.evaluationContext,rootObject);} else {  lookupKey=this.sendConnectionFactorySelectorExpression.getValue(this.evaluationContext);} @TO@ if (rootObject != null) {  lookupKey=expression.getValue(this.evaluationContext,rootObject);} else {  lookupKey=expression.getValue(this.evaluationContext);} @AT@ 42399 @LENGTH@ 247
---UPD Block@@ThenBody:{  lookupKey=this.sendConnectionFactorySelectorExpression.getValue(this.evaluationContext,rootObject);} @TO@ ThenBody:{  lookupKey=expression.getValue(this.evaluationContext,rootObject);} @AT@ 42423 @LENGTH@ 113
------UPD ExpressionStatement@@Assignment:lookupKey=this.sendConnectionFactorySelectorExpression.getValue(this.evaluationContext,rootObject) @TO@ Assignment:lookupKey=expression.getValue(this.evaluationContext,rootObject) @AT@ 42429 @LENGTH@ 102
---------UPD Assignment@@lookupKey=this.sendConnectionFactorySelectorExpression.getValue(this.evaluationContext,rootObject) @TO@ lookupKey=expression.getValue(this.evaluationContext,rootObject) @AT@ 42429 @LENGTH@ 101
------------UPD MethodInvocation@@this.sendConnectionFactorySelectorExpression.getValue(this.evaluationContext,rootObject) @TO@ expression.getValue(this.evaluationContext,rootObject) @AT@ 42441 @LENGTH@ 89
---------------DEL FieldAccess@@this.sendConnectionFactorySelectorExpression @AT@ 42441 @LENGTH@ 44
------------------DEL ThisExpression@@this @AT@ 42441 @LENGTH@ 4
------------------DEL SimpleName@@sendConnectionFactorySelectorExpression @AT@ 42446 @LENGTH@ 39
---------------INS SimpleName@@Name:expression @TO@ MethodInvocation@@this.sendConnectionFactorySelectorExpression.getValue(this.evaluationContext,rootObject) @AT@ 42441 @LENGTH@ 10
---UPD Block@@ElseBody:{  lookupKey=this.sendConnectionFactorySelectorExpression.getValue(this.evaluationContext);} @TO@ ElseBody:{  lookupKey=expression.getValue(this.evaluationContext);} @AT@ 42545 @LENGTH@ 101
------UPD ExpressionStatement@@Assignment:lookupKey=this.sendConnectionFactorySelectorExpression.getValue(this.evaluationContext) @TO@ Assignment:lookupKey=expression.getValue(this.evaluationContext) @AT@ 42551 @LENGTH@ 90
---------UPD Assignment@@lookupKey=this.sendConnectionFactorySelectorExpression.getValue(this.evaluationContext) @TO@ lookupKey=expression.getValue(this.evaluationContext) @AT@ 42551 @LENGTH@ 89
------------UPD MethodInvocation@@this.sendConnectionFactorySelectorExpression.getValue(this.evaluationContext) @TO@ expression.getValue(this.evaluationContext) @AT@ 42563 @LENGTH@ 77
---------------INS SimpleName@@Name:expression @TO@ MethodInvocation@@this.sendConnectionFactorySelectorExpression.getValue(this.evaluationContext) @AT@ 42529 @LENGTH@ 10
---------------DEL FieldAccess@@this.sendConnectionFactorySelectorExpression @AT@ 42563 @LENGTH@ 44
------------------DEL ThisExpression@@this @AT@ 42563 @LENGTH@ 4
------------------DEL SimpleName@@sendConnectionFactorySelectorExpression @AT@ 42568 @LENGTH@ 39


INS MethodDeclaration@@Optional<CityModelDTO>, MethodName:findByCityId, UUID cityId,  @TO@ TypeDeclaration@@[public]CityModelRepository, [Neo4jRepository<CityModel,UUID>] @AT@ 1106 @LENGTH@ 26
---INS ParameterizedType@@Optional<CityModelDTO> @TO@ MethodDeclaration@@Optional<CityModelDTO>, MethodName:findByCityId, UUID cityId,  @AT@ 1083 @LENGTH@ 22
------INS SimpleType@@Optional @TO@ ParameterizedType@@Optional<CityModelDTO> @AT@ 1083 @LENGTH@ 8
------INS SimpleType@@CityModelDTO @TO@ ParameterizedType@@Optional<CityModelDTO> @AT@ 1092 @LENGTH@ 12
---INS SimpleName@@MethodName:findByCityId @TO@ MethodDeclaration@@Optional<CityModelDTO>, MethodName:findByCityId, UUID cityId,  @AT@ 1106 @LENGTH@ 12
---INS SingleVariableDeclaration@@UUID cityId @TO@ MethodDeclaration@@Optional<CityModelDTO>, MethodName:findByCityId, UUID cityId,  @AT@ 1119 @LENGTH@ 11
------INS SimpleType@@UUID @TO@ SingleVariableDeclaration@@UUID cityId @AT@ 1119 @LENGTH@ 4
------INS SimpleName@@cityId @TO@ SingleVariableDeclaration@@UUID cityId @AT@ 1124 @LENGTH@ 6


UPD Block@@ThenBody:{  String[] path=property.split("\\.");  if (path.length != 2) {    throw new IllegalArgumentException(String.format("Cannot handle order property `%s`, it must be a simple property or one-hop path.",property));  }  expression=Cypher.property(path[0],path[1]);} @TO@ ThenBody:{  int firstDot=property.indexOf('.');  String tail=property.substring(firstDot + 1);  if (tail.isEmpty() || property.lastIndexOf(".") != firstDot) {    if (tail.trim().matches("`.+`")) {      tail=tail.replaceFirst("`(.+)`","$1");    } else {      throw new IllegalArgumentException(String.format("Cannot handle order property `%s`, it must be a simple property or one-hop path.",property));    }  }  expression=Cypher.property(property.substring(0,firstDot),tail);} @AT@ 22332 @LENGTH@ 316
---UPD VariableDeclarationStatement@@String[] path=property.split("\\."); @TO@ String tail=property.substring(firstDot + 1); @AT@ 22340 @LENGTH@ 38
------DEL ArrayType@@String[] @AT@ 22340 @LENGTH@ 8
---------DEL SimpleType@@String @AT@ 22340 @LENGTH@ 6
------UPD VariableDeclarationFragment@@path=property.split("\\.") @TO@ tail=property.substring(firstDot + 1) @AT@ 22349 @LENGTH@ 28
---------UPD SimpleName@@path @TO@ tail @AT@ 22349 @LENGTH@ 4
---------UPD MethodInvocation@@property.split("\\.") @TO@ property.substring(firstDot + 1) @AT@ 22356 @LENGTH@ 21
------------UPD SimpleName@@MethodName:split:["\\."] @TO@ MethodName:substring:[firstDot + 1] @AT@ 22365 @LENGTH@ 12
---------------DEL StringLiteral@@"\\." @AT@ 22371 @LENGTH@ 5
---------------INS InfixExpression@@firstDot + 1 @TO@ SimpleName@@MethodName:split:["\\."] @AT@ 22417 @LENGTH@ 12
------------------INS SimpleName@@firstDot @TO@ InfixExpression@@firstDot + 1 @AT@ 22417 @LENGTH@ 8
------------------INS Operator@@+ @TO@ InfixExpression@@firstDot + 1 @AT@ 22425 @LENGTH@ 1
------------------INS NumberLiteral@@1 @TO@ InfixExpression@@firstDot + 1 @AT@ 22428 @LENGTH@ 1
------INS SimpleType@@String @TO@ VariableDeclarationStatement@@String[] path=property.split("\\."); @AT@ 22384 @LENGTH@ 6
---INS VariableDeclarationStatement@@int firstDot=property.indexOf('.'); @TO@ Block@@ThenBody:{  String[] path=property.split("\\.");  if (path.length != 2) {    throw new IllegalArgumentException(String.format("Cannot handle order property `%s`, it must be a simple property or one-hop path.",property));  }  expression=Cypher.property(path[0],path[1]);} @AT@ 22340 @LENGTH@ 37
------INS PrimitiveType@@int @TO@ VariableDeclarationStatement@@int firstDot=property.indexOf('.'); @AT@ 22340 @LENGTH@ 3
------INS VariableDeclarationFragment@@firstDot=property.indexOf('.') @TO@ VariableDeclarationStatement@@int firstDot=property.indexOf('.'); @AT@ 22344 @LENGTH@ 32
---------INS SimpleName@@firstDot @TO@ VariableDeclarationFragment@@firstDot=property.indexOf('.') @AT@ 22344 @LENGTH@ 8
---------INS MethodInvocation@@property.indexOf('.') @TO@ VariableDeclarationFragment@@firstDot=property.indexOf('.') @AT@ 22355 @LENGTH@ 21
------------INS SimpleName@@Name:property @TO@ MethodInvocation@@property.indexOf('.') @AT@ 22355 @LENGTH@ 8
------------INS SimpleName@@MethodName:indexOf:['.'] @TO@ MethodInvocation@@property.indexOf('.') @AT@ 22364 @LENGTH@ 12
---------------INS CharacterLiteral@@'.' @TO@ SimpleName@@MethodName:indexOf:['.'] @AT@ 22372 @LENGTH@ 3
---UPD IfStatement@@if (path.length != 2) {  throw new IllegalArgumentException(String.format("Cannot handle order property `%s`, it must be a simple property or one-hop path.",property));} @TO@ if (tail.trim().matches("`.+`")) {  tail=tail.replaceFirst("`(.+)`","$1");} else {  throw new IllegalArgumentException(String.format("Cannot handle order property `%s`, it must be a simple property or one-hop path.",property));} @AT@ 22385 @LENGTH@ 202
---INS IfStatement@@if (tail.isEmpty() || property.lastIndexOf(".") != firstDot) {  if (tail.trim().matches("`.+`")) {    tail=tail.replaceFirst("`(.+)`","$1");  } else {    throw new IllegalArgumentException(String.format("Cannot handle order property `%s`, it must be a simple property or one-hop path.",property));  }} @TO@ Block@@ThenBody:{  String[] path=property.split("\\.");  if (path.length != 2) {    throw new IllegalArgumentException(String.format("Cannot handle order property `%s`, it must be a simple property or one-hop path.",property));  }  expression=Cypher.property(path[0],path[1]);} @AT@ 22438 @LENGTH@ 361
------INS InfixExpression@@tail.isEmpty() || property.lastIndexOf(".") != firstDot @TO@ IfStatement@@if (tail.isEmpty() || property.lastIndexOf(".") != firstDot) {  if (tail.trim().matches("`.+`")) {    tail=tail.replaceFirst("`(.+)`","$1");  } else {    throw new IllegalArgumentException(String.format("Cannot handle order property `%s`, it must be a simple property or one-hop path.",property));  }} @AT@ 22442 @LENGTH@ 55
---------INS MethodInvocation@@tail.isEmpty() @TO@ InfixExpression@@tail.isEmpty() || property.lastIndexOf(".") != firstDot @AT@ 22442 @LENGTH@ 14
------------INS SimpleName@@Name:tail @TO@ MethodInvocation@@tail.isEmpty() @AT@ 22442 @LENGTH@ 4
------------INS SimpleName@@MethodName:isEmpty:[] @TO@ MethodInvocation@@tail.isEmpty() @AT@ 22447 @LENGTH@ 9
---------INS Operator@@|| @TO@ InfixExpression@@tail.isEmpty() || property.lastIndexOf(".") != firstDot @AT@ 22456 @LENGTH@ 2
---------INS InfixExpression@@property.lastIndexOf(".") != firstDot @TO@ InfixExpression@@tail.isEmpty() || property.lastIndexOf(".") != firstDot @AT@ 22460 @LENGTH@ 37
------------INS MethodInvocation@@property.lastIndexOf(".") @TO@ InfixExpression@@property.lastIndexOf(".") != firstDot @AT@ 22460 @LENGTH@ 25
---------------INS SimpleName@@Name:property @TO@ MethodInvocation@@property.lastIndexOf(".") @AT@ 22460 @LENGTH@ 8
---------------INS SimpleName@@MethodName:lastIndexOf:["."] @TO@ MethodInvocation@@property.lastIndexOf(".") @AT@ 22469 @LENGTH@ 16
------------------INS StringLiteral@@"." @TO@ SimpleName@@MethodName:lastIndexOf:["."] @AT@ 22481 @LENGTH@ 3
------------INS Operator@@!= @TO@ InfixExpression@@property.lastIndexOf(".") != firstDot @AT@ 22485 @LENGTH@ 2
------------INS SimpleName@@firstDot @TO@ InfixExpression@@property.lastIndexOf(".") != firstDot @AT@ 22489 @LENGTH@ 8
------INS Block@@ThenBody:{  if (tail.trim().matches("`.+`")) {    tail=tail.replaceFirst("`(.+)`","$1");  } else {    throw new IllegalArgumentException(String.format("Cannot handle order property `%s`, it must be a simple property or one-hop path.",property));  }} @TO@ IfStatement@@if (tail.isEmpty() || property.lastIndexOf(".") != firstDot) {  if (tail.trim().matches("`.+`")) {    tail=tail.replaceFirst("`(.+)`","$1");  } else {    throw new IllegalArgumentException(String.format("Cannot handle order property `%s`, it must be a simple property or one-hop path.",property));  }} @AT@ 22499 @LENGTH@ 300
---------MOV IfStatement@@if (path.length != 2) {  throw new IllegalArgumentException(String.format("Cannot handle order property `%s`, it must be a simple property or one-hop path.",property));} @TO@ Block@@ThenBody:{  if (tail.trim().matches("`.+`")) {    tail=tail.replaceFirst("`(.+)`","$1");  } else {    throw new IllegalArgumentException(String.format("Cannot handle order property `%s`, it must be a simple property or one-hop path.",property));  }} @AT@ 22385 @LENGTH@ 202
------------DEL InfixExpression@@path.length != 2 @AT@ 22389 @LENGTH@ 16
---------------DEL QualifiedName@@path.length @AT@ 22389 @LENGTH@ 11
------------------DEL SimpleName@@path @AT@ 22389 @LENGTH@ 4
------------------DEL SimpleName@@length @AT@ 22394 @LENGTH@ 6
---------------DEL Operator@@!= @AT@ 22400 @LENGTH@ 2
---------------DEL NumberLiteral@@2 @AT@ 22404 @LENGTH@ 1
------------UPD Block@@ThenBody:{  throw new IllegalArgumentException(String.format("Cannot handle order property `%s`, it must be a simple property or one-hop path.",property));} @TO@ ElseBody:{  throw new IllegalArgumentException(String.format("Cannot handle order property `%s`, it must be a simple property or one-hop path.",property));} @AT@ 22407 @LENGTH@ 180
------------INS MethodInvocation@@tail.trim().matches("`.+`") @TO@ IfStatement@@if (path.length != 2) {  throw new IllegalArgumentException(String.format("Cannot handle order property `%s`, it must be a simple property or one-hop path.",property));} @AT@ 22512 @LENGTH@ 27
---------------INS MethodInvocation@@MethodName:trim:[] @TO@ MethodInvocation@@tail.trim().matches("`.+`") @AT@ 22512 @LENGTH@ 11
---------------INS SimpleName@@Name:tail @TO@ MethodInvocation@@tail.trim().matches("`.+`") @AT@ 22512 @LENGTH@ 4
---------------INS SimpleName@@MethodName:matches:["`.+`"] @TO@ MethodInvocation@@tail.trim().matches("`.+`") @AT@ 22524 @LENGTH@ 15
------------------INS StringLiteral@@"`.+`" @TO@ SimpleName@@MethodName:matches:["`.+`"] @AT@ 22532 @LENGTH@ 6
------------INS Block@@ThenBody:{  tail=tail.replaceFirst("`(.+)`","$1");} @TO@ IfStatement@@if (path.length != 2) {  throw new IllegalArgumentException(String.format("Cannot handle order property `%s`, it must be a simple property or one-hop path.",property));} @AT@ 22541 @LENGTH@ 60
---------------INS ExpressionStatement@@Assignment:tail=tail.replaceFirst("`(.+)`","$1") @TO@ Block@@ThenBody:{  tail=tail.replaceFirst("`(.+)`","$1");} @AT@ 22551 @LENGTH@ 41
------------------INS Assignment@@tail=tail.replaceFirst("`(.+)`","$1") @TO@ ExpressionStatement@@Assignment:tail=tail.replaceFirst("`(.+)`","$1") @AT@ 22551 @LENGTH@ 40
---------------------INS SimpleName@@tail @TO@ Assignment@@tail=tail.replaceFirst("`(.+)`","$1") @AT@ 22551 @LENGTH@ 4
---------------------INS Operator@@= @TO@ Assignment@@tail=tail.replaceFirst("`(.+)`","$1") @AT@ 22555 @LENGTH@ 1
---------------------INS MethodInvocation@@tail.replaceFirst("`(.+)`","$1") @TO@ Assignment@@tail=tail.replaceFirst("`(.+)`","$1") @AT@ 22558 @LENGTH@ 33
------------------------INS SimpleName@@Name:tail @TO@ MethodInvocation@@tail.replaceFirst("`(.+)`","$1") @AT@ 22558 @LENGTH@ 4
------------------------INS SimpleName@@MethodName:replaceFirst:["`(.+)`", "$1"] @TO@ MethodInvocation@@tail.replaceFirst("`(.+)`","$1") @AT@ 22563 @LENGTH@ 28
---------------------------INS StringLiteral@@"`(.+)`" @TO@ SimpleName@@MethodName:replaceFirst:["`(.+)`", "$1"] @AT@ 22576 @LENGTH@ 8
---------------------------INS StringLiteral@@"$1" @TO@ SimpleName@@MethodName:replaceFirst:["`(.+)`", "$1"] @AT@ 22586 @LENGTH@ 4
---------MOV IfStatement@@if (path.length != 2) {  throw new IllegalArgumentException(String.format("Cannot handle order property `%s`, it must be a simple property or one-hop path.",property));} @TO@ Block@@ThenBody:{  if (tail.trim().matches("`.+`")) {    tail=tail.replaceFirst("`(.+)`","$1");  } else {    throw new IllegalArgumentException(String.format("Cannot handle order property `%s`, it must be a simple property or one-hop path.",property));  }} @AT@ 22385 @LENGTH@ 202
------------DEL InfixExpression@@path.length != 2 @AT@ 22389 @LENGTH@ 16
---------------DEL QualifiedName@@path.length @AT@ 22389 @LENGTH@ 11
------------------DEL SimpleName@@path @AT@ 22389 @LENGTH@ 4
------------------DEL SimpleName@@length @AT@ 22394 @LENGTH@ 6
---------------DEL Operator@@!= @AT@ 22400 @LENGTH@ 2
---------------DEL NumberLiteral@@2 @AT@ 22404 @LENGTH@ 1
------------UPD Block@@ThenBody:{  throw new IllegalArgumentException(String.format("Cannot handle order property `%s`, it must be a simple property or one-hop path.",property));} @TO@ ElseBody:{  throw new IllegalArgumentException(String.format("Cannot handle order property `%s`, it must be a simple property or one-hop path.",property));} @AT@ 22407 @LENGTH@ 180
------------INS MethodInvocation@@tail.trim().matches("`.+`") @TO@ IfStatement@@if (path.length != 2) {  throw new IllegalArgumentException(String.format("Cannot handle order property `%s`, it must be a simple property or one-hop path.",property));} @AT@ 22512 @LENGTH@ 27
---------------INS MethodInvocation@@MethodName:trim:[] @TO@ MethodInvocation@@tail.trim().matches("`.+`") @AT@ 22512 @LENGTH@ 11
---------------INS SimpleName@@Name:tail @TO@ MethodInvocation@@tail.trim().matches("`.+`") @AT@ 22512 @LENGTH@ 4
---------------INS SimpleName@@MethodName:matches:["`.+`"] @TO@ MethodInvocation@@tail.trim().matches("`.+`") @AT@ 22524 @LENGTH@ 15
------------------INS StringLiteral@@"`.+`" @TO@ SimpleName@@MethodName:matches:["`.+`"] @AT@ 22532 @LENGTH@ 6
------------INS Block@@ThenBody:{  tail=tail.replaceFirst("`(.+)`","$1");} @TO@ IfStatement@@if (path.length != 2) {  throw new IllegalArgumentException(String.format("Cannot handle order property `%s`, it must be a simple property or one-hop path.",property));} @AT@ 22541 @LENGTH@ 60
---------------INS ExpressionStatement@@Assignment:tail=tail.replaceFirst("`(.+)`","$1") @TO@ Block@@ThenBody:{  tail=tail.replaceFirst("`(.+)`","$1");} @AT@ 22551 @LENGTH@ 41
------------------INS Assignment@@tail=tail.replaceFirst("`(.+)`","$1") @TO@ ExpressionStatement@@Assignment:tail=tail.replaceFirst("`(.+)`","$1") @AT@ 22551 @LENGTH@ 40
---------------------INS SimpleName@@tail @TO@ Assignment@@tail=tail.replaceFirst("`(.+)`","$1") @AT@ 22551 @LENGTH@ 4
---------------------INS Operator@@= @TO@ Assignment@@tail=tail.replaceFirst("`(.+)`","$1") @AT@ 22555 @LENGTH@ 1
---------------------INS MethodInvocation@@tail.replaceFirst("`(.+)`","$1") @TO@ Assignment@@tail=tail.replaceFirst("`(.+)`","$1") @AT@ 22558 @LENGTH@ 33
------------------------INS SimpleName@@Name:tail @TO@ MethodInvocation@@tail.replaceFirst("`(.+)`","$1") @AT@ 22558 @LENGTH@ 4
------------------------INS SimpleName@@MethodName:replaceFirst:["`(.+)`", "$1"] @TO@ MethodInvocation@@tail.replaceFirst("`(.+)`","$1") @AT@ 22563 @LENGTH@ 28
---------------------------INS StringLiteral@@"`(.+)`" @TO@ SimpleName@@MethodName:replaceFirst:["`(.+)`", "$1"] @AT@ 22576 @LENGTH@ 8
---------------------------INS StringLiteral@@"$1" @TO@ SimpleName@@MethodName:replaceFirst:["`(.+)`", "$1"] @AT@ 22586 @LENGTH@ 4
---UPD ExpressionStatement@@Assignment:expression=Cypher.property(path[0],path[1]) @TO@ Assignment:expression=Cypher.property(property.substring(0,firstDot),tail) @AT@ 22594 @LENGTH@ 47
------UPD Assignment@@expression=Cypher.property(path[0],path[1]) @TO@ expression=Cypher.property(property.substring(0,firstDot),tail) @AT@ 22594 @LENGTH@ 46
---------UPD MethodInvocation@@Cypher.property(path[0],path[1]) @TO@ Cypher.property(property.substring(0,firstDot),tail) @AT@ 22607 @LENGTH@ 33
------------UPD SimpleName@@MethodName:property:[path[0], path[1]] @TO@ MethodName:property:[property.substring(0,firstDot), tail] @AT@ 22614 @LENGTH@ 26
---------------DEL ArrayAccess@@path[0] @AT@ 22623 @LENGTH@ 7
------------------DEL SimpleName@@path @AT@ 22623 @LENGTH@ 4
------------------DEL NumberLiteral@@0 @AT@ 22628 @LENGTH@ 1
---------------DEL ArrayAccess@@path[1] @AT@ 22632 @LENGTH@ 7
------------------DEL SimpleName@@path @AT@ 22632 @LENGTH@ 4
------------------DEL NumberLiteral@@1 @AT@ 22637 @LENGTH@ 1
---------------INS MethodInvocation@@property.substring(0,firstDot) @TO@ SimpleName@@MethodName:property:[path[0], path[1]] @AT@ 22835 @LENGTH@ 31
------------------INS SimpleName@@Name:property @TO@ MethodInvocation@@property.substring(0,firstDot) @AT@ 22835 @LENGTH@ 8
------------------INS SimpleName@@MethodName:substring:[0, firstDot] @TO@ MethodInvocation@@property.substring(0,firstDot) @AT@ 22844 @LENGTH@ 22
---------------------INS NumberLiteral@@0 @TO@ SimpleName@@MethodName:substring:[0, firstDot] @AT@ 22854 @LENGTH@ 1
---------------------INS SimpleName@@firstDot @TO@ SimpleName@@MethodName:substring:[0, firstDot] @AT@ 22857 @LENGTH@ 8
---------------INS SimpleName@@tail @TO@ SimpleName@@MethodName:property:[path[0], path[1]] @AT@ 22868 @LENGTH@ 4


UPD VariableDeclarationStatement@@IHistoryTyped<T> tiHistoryTyped=client.history().onServer().andReturnBundle(returnType); @TO@ IHistoryTyped<T> tiHistoryTyped=client.history().onServer().returnBundle(returnType); @AT@ 2746 @LENGTH@ 90
---UPD VariableDeclarationFragment@@tiHistoryTyped=client.history().onServer().andReturnBundle(returnType) @TO@ tiHistoryTyped=client.history().onServer().returnBundle(returnType) @AT@ 2763 @LENGTH@ 72
------UPD MethodInvocation@@client.history().onServer().andReturnBundle(returnType) @TO@ client.history().onServer().returnBundle(returnType) @AT@ 2780 @LENGTH@ 55
---------UPD SimpleName@@MethodName:andReturnBundle:[returnType] @TO@ MethodName:returnBundle:[returnType] @AT@ 2808 @LENGTH@ 27


DEL MethodDeclaration@@public, void, MethodName:setBinding, HttpBinding httpBinding,  @AT@ 14162 @LENGTH@ 92
---DEL Modifier@@public @AT@ 14162 @LENGTH@ 6
---DEL PrimitiveType@@void @AT@ 14169 @LENGTH@ 4
---DEL SimpleName@@MethodName:setBinding @AT@ 14174 @LENGTH@ 10
---DEL SingleVariableDeclaration@@HttpBinding httpBinding @AT@ 14185 @LENGTH@ 23
------DEL SimpleType@@HttpBinding @AT@ 14185 @LENGTH@ 11
------DEL SimpleName@@httpBinding @AT@ 14197 @LENGTH@ 11
---DEL ExpressionStatement@@MethodInvocation:setHttpBinding(httpBinding) @AT@ 14220 @LENGTH@ 28
------DEL MethodInvocation@@setHttpBinding(httpBinding) @AT@ 14220 @LENGTH@ 27
---------DEL SimpleName@@MethodName:setHttpBinding:[httpBinding] @AT@ 14220 @LENGTH@ 27
------------DEL SimpleName@@httpBinding @AT@ 14235 @LENGTH@ 11


UPD ExpressionStatement@@MethodInvocation:c.prefill(Arrays.copyOfRange(BLA,2,4)) @TO@ MethodInvocation:assertThrows(IllegalStateException.class,() -> c.prefill(Arrays.copyOfRange(BLA,2,4))) @AT@ 12165 @LENGTH@ 41
---INS MethodInvocation@@assertThrows(IllegalStateException.class,() -> c.prefill(Arrays.copyOfRange(BLA,2,4))) @TO@ ExpressionStatement@@MethodInvocation:c.prefill(Arrays.copyOfRange(BLA,2,4)) @AT@ 12241 @LENGTH@ 89
------INS SimpleName@@MethodName:assertThrows:[IllegalStateException.class, () -> c.prefill(Arrays.copyOfRange(BLA,2,4))] @TO@ MethodInvocation@@assertThrows(IllegalStateException.class,() -> c.prefill(Arrays.copyOfRange(BLA,2,4))) @AT@ 12241 @LENGTH@ 89
---------INS TypeLiteral@@IllegalStateException.class @TO@ SimpleName@@MethodName:assertThrows:[IllegalStateException.class, () -> c.prefill(Arrays.copyOfRange(BLA,2,4))] @AT@ 12254 @LENGTH@ 27
---------INS LambdaExpression@@() -> c.prefill(Arrays.copyOfRange(BLA,2,4)) @TO@ SimpleName@@MethodName:assertThrows:[IllegalStateException.class, () -> c.prefill(Arrays.copyOfRange(BLA,2,4))] @AT@ 12283 @LENGTH@ 46
------------MOV MethodInvocation@@c.prefill(Arrays.copyOfRange(BLA,2,4)) @TO@ LambdaExpression@@() -> c.prefill(Arrays.copyOfRange(BLA,2,4)) @AT@ 12165 @LENGTH@ 40


DEL MethodDeclaration@@public, void, MethodName:testAddExistingComponent,  @AT@ 10348 @LENGTH@ 1106
---DEL Modifier@@public @AT@ 10348 @LENGTH@ 6
---DEL PrimitiveType@@void @AT@ 10355 @LENGTH@ 4
---DEL SimpleName@@MethodName:testAddExistingComponent @AT@ 10360 @LENGTH@ 24
---DEL VariableDeclarationStatement@@EEModuleDescription eeModuleDescription=new EEModuleDescription("appName","module1","ear1",false); @AT@ 10396 @LENGTH@ 117
------DEL SimpleType@@EEModuleDescription @AT@ 10396 @LENGTH@ 19
------DEL VariableDeclarationFragment@@eeModuleDescription=new EEModuleDescription("appName","module1","ear1",false) @AT@ 10416 @LENGTH@ 96
---------DEL SimpleName@@eeModuleDescription @AT@ 10416 @LENGTH@ 19
---------DEL ClassInstanceCreation@@EEModuleDescription["appName", "module1", "ear1", false] @AT@ 10438 @LENGTH@ 74
------------DEL New@@new @AT@ 10438 @LENGTH@ 3
------------DEL SimpleType@@EEModuleDescription @AT@ 10442 @LENGTH@ 19
------------DEL StringLiteral@@"appName" @AT@ 10462 @LENGTH@ 9
------------DEL StringLiteral@@"module1" @AT@ 10472 @LENGTH@ 9
------------DEL StringLiteral@@"ear1" @AT@ 10499 @LENGTH@ 6
------------DEL BooleanLiteral@@false @AT@ 10506 @LENGTH@ 5
---DEL VariableDeclarationStatement@@ComponentDescription description1=new ComponentDescription("comp1","org.test.comp1",eeModuleDescription,ServiceName.of("name")); @AT@ 10522 @LENGTH@ 181
------DEL SimpleType@@ComponentDescription @AT@ 10522 @LENGTH@ 20
------DEL VariableDeclarationFragment@@description1=new ComponentDescription("comp1","org.test.comp1",eeModuleDescription,ServiceName.of("name")) @AT@ 10543 @LENGTH@ 159
---------DEL SimpleName@@description1 @AT@ 10543 @LENGTH@ 12
---------DEL ClassInstanceCreation@@ComponentDescription["comp1", "org.test.comp1", eeModuleDescription, ServiceName.of("name")] @AT@ 10558 @LENGTH@ 144
------------DEL New@@new @AT@ 10558 @LENGTH@ 3
------------DEL SimpleType@@ComponentDescription @AT@ 10562 @LENGTH@ 20
------------DEL StringLiteral@@"comp1" @AT@ 10583 @LENGTH@ 7
------------DEL StringLiteral@@"org.test.comp1" @AT@ 10608 @LENGTH@ 16
------------DEL SimpleName@@eeModuleDescription @AT@ 10642 @LENGTH@ 19
------------DEL MethodInvocation@@ServiceName.of("name") @AT@ 10679 @LENGTH@ 22
---------------DEL SimpleName@@Name:ServiceName @AT@ 10679 @LENGTH@ 11
---------------DEL SimpleName@@MethodName:of:["name"] @AT@ 10691 @LENGTH@ 10
------------------DEL StringLiteral@@"name" @AT@ 10694 @LENGTH@ 6
---DEL VariableDeclarationStatement@@ComponentDescription description2=new ComponentDescription("comp1","org.test.comp2",eeModuleDescription,ServiceName.of("name")); @AT@ 10712 @LENGTH@ 181
------DEL SimpleType@@ComponentDescription @AT@ 10712 @LENGTH@ 20
------DEL VariableDeclarationFragment@@description2=new ComponentDescription("comp1","org.test.comp2",eeModuleDescription,ServiceName.of("name")) @AT@ 10733 @LENGTH@ 159
---------DEL SimpleName@@description2 @AT@ 10733 @LENGTH@ 12
---------DEL ClassInstanceCreation@@ComponentDescription["comp1", "org.test.comp2", eeModuleDescription, ServiceName.of("name")] @AT@ 10748 @LENGTH@ 144
------------DEL New@@new @AT@ 10748 @LENGTH@ 3
------------DEL SimpleType@@ComponentDescription @AT@ 10752 @LENGTH@ 20
------------DEL StringLiteral@@"comp1" @AT@ 10773 @LENGTH@ 7
------------DEL StringLiteral@@"org.test.comp2" @AT@ 10798 @LENGTH@ 16
------------DEL SimpleName@@eeModuleDescription @AT@ 10832 @LENGTH@ 19
------------DEL MethodInvocation@@ServiceName.of("name") @AT@ 10869 @LENGTH@ 22
---------------DEL SimpleName@@Name:ServiceName @AT@ 10869 @LENGTH@ 11
---------------DEL SimpleName@@MethodName:of:["name"] @AT@ 10881 @LENGTH@ 10
------------------DEL StringLiteral@@"name" @AT@ 10884 @LENGTH@ 6
---DEL ExpressionStatement@@MethodInvocation:eeModuleDescription.addComponent(description1) @AT@ 10903 @LENGTH@ 47
------DEL MethodInvocation@@eeModuleDescription.addComponent(description1) @AT@ 10903 @LENGTH@ 46
---------DEL SimpleName@@Name:eeModuleDescription @AT@ 10903 @LENGTH@ 19
---------DEL SimpleName@@MethodName:addComponent:[description1] @AT@ 10923 @LENGTH@ 26
------------DEL SimpleName@@description1 @AT@ 10936 @LENGTH@ 12
---DEL VariableDeclarationStatement@@Exception exception=assertThrows(RuntimeException.class,() -> {
  eeModuleDescription.addComponent(description2);
}
); @AT@ 10959 @LENGTH@ 138
------DEL SimpleType@@Exception @AT@ 10959 @LENGTH@ 9
------DEL VariableDeclarationFragment@@exception=assertThrows(RuntimeException.class,() -> {
  eeModuleDescription.addComponent(description2);
}
) @AT@ 10969 @LENGTH@ 127
---------DEL SimpleName@@exception @AT@ 10969 @LENGTH@ 9
---------DEL MethodInvocation@@assertThrows(RuntimeException.class,() -> {
  eeModuleDescription.addComponent(description2);
}
) @AT@ 10981 @LENGTH@ 115
------------DEL SimpleName@@MethodName:assertThrows:[RuntimeException.class, () -> {
  eeModuleDescription.addComponent(description2);
}
] @AT@ 10981 @LENGTH@ 115
---------------DEL TypeLiteral@@RuntimeException.class @AT@ 10994 @LENGTH@ 22
---------------DEL LambdaExpression@@() -> {
  eeModuleDescription.addComponent(description2);
}
 @AT@ 11018 @LENGTH@ 77
------------------DEL ExpressionStatement@@MethodInvocation:eeModuleDescription.addComponent(description2) @AT@ 11038 @LENGTH@ 47
---------------------DEL MethodInvocation@@eeModuleDescription.addComponent(description2) @AT@ 11038 @LENGTH@ 46
------------------------DEL SimpleName@@Name:eeModuleDescription @AT@ 11038 @LENGTH@ 19
------------------------DEL SimpleName@@MethodName:addComponent:[description2] @AT@ 11058 @LENGTH@ 26
---------------------------DEL SimpleName@@description2 @AT@ 11071 @LENGTH@ 12
---DEL VariableDeclarationStatement@@String expectedMessage="WFLYEE0040: Component 'comp1' in class 'org.test.comp2' " + "is already defined in class 'org.test.comp1'"; @AT@ 11107 @LENGTH@ 149
------DEL SimpleType@@String @AT@ 11107 @LENGTH@ 6
------DEL VariableDeclarationFragment@@expectedMessage="WFLYEE0040: Component 'comp1' in class 'org.test.comp2' " + "is already defined in class 'org.test.comp1'" @AT@ 11114 @LENGTH@ 141
---------DEL SimpleName@@expectedMessage @AT@ 11114 @LENGTH@ 15
---------DEL InfixExpression@@"WFLYEE0040: Component 'comp1' in class 'org.test.comp2' " + "is already defined in class 'org.test.comp1'" @AT@ 11132 @LENGTH@ 123
------------DEL StringLiteral@@"WFLYEE0040: Component 'comp1' in class 'org.test.comp2' " @AT@ 11132 @LENGTH@ 58
------------DEL Operator@@+ @AT@ 11190 @LENGTH@ 1
------------DEL StringLiteral@@"is already defined in class 'org.test.comp1'" @AT@ 11209 @LENGTH@ 46
---DEL VariableDeclarationStatement@@String actualMessage=exception.getMessage(); @AT@ 11265 @LENGTH@ 46
------DEL SimpleType@@String @AT@ 11265 @LENGTH@ 6
------DEL VariableDeclarationFragment@@actualMessage=exception.getMessage() @AT@ 11272 @LENGTH@ 38
---------DEL SimpleName@@actualMessage @AT@ 11272 @LENGTH@ 13
---------DEL MethodInvocation@@exception.getMessage() @AT@ 11288 @LENGTH@ 22
------------DEL SimpleName@@Name:exception @AT@ 11288 @LENGTH@ 9
------------DEL SimpleName@@MethodName:getMessage:[] @AT@ 11298 @LENGTH@ 12
---DEL ExpressionStatement@@MethodInvocation:assertTrue(actualMessage.equalsIgnoreCase(expectedMessage)) @AT@ 11320 @LENGTH@ 60
------DEL MethodInvocation@@assertTrue(actualMessage.equalsIgnoreCase(expectedMessage)) @AT@ 11320 @LENGTH@ 59
---------DEL SimpleName@@MethodName:assertTrue:[actualMessage.equalsIgnoreCase(expectedMessage)] @AT@ 11320 @LENGTH@ 59
------------DEL MethodInvocation@@actualMessage.equalsIgnoreCase(expectedMessage) @AT@ 11331 @LENGTH@ 47
---------------DEL SimpleName@@Name:actualMessage @AT@ 11331 @LENGTH@ 13
---------------DEL SimpleName@@MethodName:equalsIgnoreCase:[expectedMessage] @AT@ 11345 @LENGTH@ 33
------------------DEL SimpleName@@expectedMessage @AT@ 11362 @LENGTH@ 15
---DEL ExpressionStatement@@MethodInvocation:assertTrue(exception instanceof IllegalArgumentException) @AT@ 11389 @LENGTH@ 58
------DEL MethodInvocation@@assertTrue(exception instanceof IllegalArgumentException) @AT@ 11389 @LENGTH@ 57
---------DEL SimpleName@@MethodName:assertTrue:[exception instanceof IllegalArgumentException] @AT@ 11389 @LENGTH@ 57
------------DEL InstanceofExpression@@exception instanceof IllegalArgumentException @AT@ 11400 @LENGTH@ 45
---------------DEL SimpleName@@exception @AT@ 11400 @LENGTH@ 9
---------------DEL Instanceof@@instanceof @AT@ 11410 @LENGTH@ 10
---------------DEL SimpleType@@IllegalArgumentException @AT@ 11421 @LENGTH@ 24


DEL MethodDeclaration@@public, voidMethodName:Neo4jTemplate, Neo4jClient neo4jClient, Neo4jMappingContext neo4jMappingContext, DatabaseSelectionProvider databaseSelectionProvider, EntityCallbacks entityCallbacks,  @AT@ 6132 @LENGTH@ 452
---DEL Modifier@@public @AT@ 6132 @LENGTH@ 6
---DEL SimpleName@@MethodName:Neo4jTemplate @AT@ 6139 @LENGTH@ 13
---DEL SingleVariableDeclaration@@Neo4jClient neo4jClient @AT@ 6153 @LENGTH@ 23
------DEL SimpleType@@Neo4jClient @AT@ 6153 @LENGTH@ 11
------DEL SimpleName@@neo4jClient @AT@ 6165 @LENGTH@ 11
---DEL SingleVariableDeclaration@@Neo4jMappingContext neo4jMappingContext @AT@ 6178 @LENGTH@ 39
------DEL SimpleType@@Neo4jMappingContext @AT@ 6178 @LENGTH@ 19
------DEL SimpleName@@neo4jMappingContext @AT@ 6198 @LENGTH@ 19
---DEL SingleVariableDeclaration@@DatabaseSelectionProvider databaseSelectionProvider @AT@ 6226 @LENGTH@ 51
------DEL SimpleType@@DatabaseSelectionProvider @AT@ 6226 @LENGTH@ 25
------DEL SimpleName@@databaseSelectionProvider @AT@ 6252 @LENGTH@ 25
---DEL SingleVariableDeclaration@@EntityCallbacks entityCallbacks @AT@ 6279 @LENGTH@ 31
------DEL SimpleType@@EntityCallbacks @AT@ 6279 @LENGTH@ 15
------DEL SimpleName@@entityCallbacks @AT@ 6295 @LENGTH@ 15
---DEL ConstructorInvocation@@this(neo4jClient,neo4jMappingContext,entityCallbacks); @AT@ 6317 @LENGTH@ 56
------DEL SimpleName@@neo4jClient @AT@ 6322 @LENGTH@ 11
------DEL SimpleName@@neo4jMappingContext @AT@ 6335 @LENGTH@ 19
------DEL SimpleName@@entityCallbacks @AT@ 6356 @LENGTH@ 15
---DEL IfStatement@@if (databaseSelectionProvider != neo4jClient.getDatabaseSelectionProvider()) {  throw new IllegalStateException("The provided database selection provider differs from the Neo4jClient's one.");} @AT@ 6377 @LENGTH@ 204
------DEL InfixExpression@@databaseSelectionProvider != neo4jClient.getDatabaseSelectionProvider() @AT@ 6381 @LENGTH@ 71
---------DEL SimpleName@@databaseSelectionProvider @AT@ 6381 @LENGTH@ 25
---------DEL Operator@@!= @AT@ 6406 @LENGTH@ 2
---------DEL MethodInvocation@@neo4jClient.getDatabaseSelectionProvider() @AT@ 6410 @LENGTH@ 42
------------DEL SimpleName@@Name:neo4jClient @AT@ 6410 @LENGTH@ 11
------------DEL SimpleName@@MethodName:getDatabaseSelectionProvider:[] @AT@ 6422 @LENGTH@ 30
------DEL Block@@ThenBody:{  throw new IllegalStateException("The provided database selection provider differs from the Neo4jClient's one.");} @AT@ 6454 @LENGTH@ 127
---------DEL ThrowStatement@@ClassInstanceCreation:new IllegalStateException("The provided database selection provider differs from the Neo4jClient's one.") @AT@ 6459 @LENGTH@ 118
------------DEL ClassInstanceCreation@@IllegalStateException["The provided database selection provider differs from the Neo4jClient's one."] @AT@ 6465 @LENGTH@ 111
---------------DEL New@@new @AT@ 6465 @LENGTH@ 3
---------------DEL SimpleType@@IllegalStateException @AT@ 6469 @LENGTH@ 21
---------------DEL StringLiteral@@"The provided database selection provider differs from the Neo4jClient's one." @AT@ 6497 @LENGTH@ 78


INS MethodDeclaration@@public, void, MethodName:testIteratorLastEntryCanBeRemovedAfterHasNext,  @TO@ TypeDeclaration@@[public]ReferenceMapTest, AbstractIterableMapTest<K,V> @AT@ 11942 @LENGTH@ 475
---INS Modifier@@public @TO@ MethodDeclaration@@public, void, MethodName:testIteratorLastEntryCanBeRemovedAfterHasNext,  @AT@ 11942 @LENGTH@ 6
---INS PrimitiveType@@void @TO@ MethodDeclaration@@public, void, MethodName:testIteratorLastEntryCanBeRemovedAfterHasNext,  @AT@ 11949 @LENGTH@ 4
---INS SimpleName@@MethodName:testIteratorLastEntryCanBeRemovedAfterHasNext @TO@ MethodDeclaration@@public, void, MethodName:testIteratorLastEntryCanBeRemovedAfterHasNext,  @AT@ 11954 @LENGTH@ 45
---INS VariableDeclarationStatement@@ReferenceMap<Integer,Integer> map=new ReferenceMap<>(); @TO@ MethodDeclaration@@public, void, MethodName:testIteratorLastEntryCanBeRemovedAfterHasNext,  @AT@ 12012 @LENGTH@ 58
------INS ParameterizedType@@ReferenceMap<Integer,Integer> @TO@ VariableDeclarationStatement@@ReferenceMap<Integer,Integer> map=new ReferenceMap<>(); @AT@ 12012 @LENGTH@ 30
---------INS SimpleType@@ReferenceMap @TO@ ParameterizedType@@ReferenceMap<Integer,Integer> @AT@ 12012 @LENGTH@ 12
---------INS SimpleType@@Integer @TO@ ParameterizedType@@ReferenceMap<Integer,Integer> @AT@ 12025 @LENGTH@ 7
---------INS SimpleType@@Integer @TO@ ParameterizedType@@ReferenceMap<Integer,Integer> @AT@ 12034 @LENGTH@ 7
------INS VariableDeclarationFragment@@map=new ReferenceMap<>() @TO@ VariableDeclarationStatement@@ReferenceMap<Integer,Integer> map=new ReferenceMap<>(); @AT@ 12043 @LENGTH@ 26
---------INS SimpleName@@map @TO@ VariableDeclarationFragment@@map=new ReferenceMap<>() @AT@ 12043 @LENGTH@ 3
---------INS ClassInstanceCreation@@ReferenceMap<>[] @TO@ VariableDeclarationFragment@@map=new ReferenceMap<>() @AT@ 12049 @LENGTH@ 20
------------INS New@@new @TO@ ClassInstanceCreation@@ReferenceMap<>[] @AT@ 12049 @LENGTH@ 3
------------INS ParameterizedType@@ReferenceMap<> @TO@ ClassInstanceCreation@@ReferenceMap<>[] @AT@ 12053 @LENGTH@ 14
---------------INS SimpleType@@ReferenceMap @TO@ ParameterizedType@@ReferenceMap<> @AT@ 12053 @LENGTH@ 12
---INS ExpressionStatement@@MethodInvocation:map.put(1,2) @TO@ MethodDeclaration@@public, void, MethodName:testIteratorLastEntryCanBeRemovedAfterHasNext,  @AT@ 12079 @LENGTH@ 14
------INS MethodInvocation@@map.put(1,2) @TO@ ExpressionStatement@@MethodInvocation:map.put(1,2) @AT@ 12079 @LENGTH@ 13
---------INS SimpleName@@Name:map @TO@ MethodInvocation@@map.put(1,2) @AT@ 12079 @LENGTH@ 3
---------INS SimpleName@@MethodName:put:[1, 2] @TO@ MethodInvocation@@map.put(1,2) @AT@ 12083 @LENGTH@ 9
------------INS NumberLiteral@@1 @TO@ SimpleName@@MethodName:put:[1, 2] @AT@ 12087 @LENGTH@ 1
------------INS NumberLiteral@@2 @TO@ SimpleName@@MethodName:put:[1, 2] @AT@ 12090 @LENGTH@ 1
---INS VariableDeclarationStatement@@Iterator<Map.Entry<Integer,Integer>> iter=map.entrySet().iterator(); @TO@ MethodDeclaration@@public, void, MethodName:testIteratorLastEntryCanBeRemovedAfterHasNext,  @AT@ 12102 @LENGTH@ 71
------INS ParameterizedType@@Iterator<Map.Entry<Integer,Integer>> @TO@ VariableDeclarationStatement@@Iterator<Map.Entry<Integer,Integer>> iter=map.entrySet().iterator(); @AT@ 12102 @LENGTH@ 37
---------INS SimpleType@@Iterator @TO@ ParameterizedType@@Iterator<Map.Entry<Integer,Integer>> @AT@ 12102 @LENGTH@ 8
---------INS ParameterizedType@@Map.Entry<Integer,Integer> @TO@ ParameterizedType@@Iterator<Map.Entry<Integer,Integer>> @AT@ 12111 @LENGTH@ 27
------------INS SimpleType@@Map.Entry @TO@ ParameterizedType@@Map.Entry<Integer,Integer> @AT@ 12111 @LENGTH@ 9
------------INS SimpleType@@Integer @TO@ ParameterizedType@@Map.Entry<Integer,Integer> @AT@ 12121 @LENGTH@ 7
------------INS SimpleType@@Integer @TO@ ParameterizedType@@Map.Entry<Integer,Integer> @AT@ 12130 @LENGTH@ 7
------INS VariableDeclarationFragment@@iter=map.entrySet().iterator() @TO@ VariableDeclarationStatement@@Iterator<Map.Entry<Integer,Integer>> iter=map.entrySet().iterator(); @AT@ 12140 @LENGTH@ 32
---------INS SimpleName@@iter @TO@ VariableDeclarationFragment@@iter=map.entrySet().iterator() @AT@ 12140 @LENGTH@ 4
---------INS MethodInvocation@@map.entrySet().iterator() @TO@ VariableDeclarationFragment@@iter=map.entrySet().iterator() @AT@ 12147 @LENGTH@ 25
------------INS MethodInvocation@@MethodName:entrySet:[] @TO@ MethodInvocation@@map.entrySet().iterator() @AT@ 12147 @LENGTH@ 14
------------INS SimpleName@@Name:map @TO@ MethodInvocation@@map.entrySet().iterator() @AT@ 12147 @LENGTH@ 3
------------INS SimpleName@@MethodName:iterator:[] @TO@ MethodInvocation@@map.entrySet().iterator() @AT@ 12162 @LENGTH@ 10
---INS ExpressionStatement@@MethodInvocation:assertTrue(iter.hasNext()) @TO@ MethodDeclaration@@public, void, MethodName:testIteratorLastEntryCanBeRemovedAfterHasNext,  @AT@ 12182 @LENGTH@ 27
------INS MethodInvocation@@assertTrue(iter.hasNext()) @TO@ ExpressionStatement@@MethodInvocation:assertTrue(iter.hasNext()) @AT@ 12182 @LENGTH@ 26
---------INS SimpleName@@MethodName:assertTrue:[iter.hasNext()] @TO@ MethodInvocation@@assertTrue(iter.hasNext()) @AT@ 12182 @LENGTH@ 26
------------INS MethodInvocation@@iter.hasNext() @TO@ SimpleName@@MethodName:assertTrue:[iter.hasNext()] @AT@ 12193 @LENGTH@ 14
---------------INS SimpleName@@Name:iter @TO@ MethodInvocation@@iter.hasNext() @AT@ 12193 @LENGTH@ 4
---------------INS SimpleName@@MethodName:hasNext:[] @TO@ MethodInvocation@@iter.hasNext() @AT@ 12198 @LENGTH@ 9
---INS ExpressionStatement@@MethodInvocation:iter.next() @TO@ MethodDeclaration@@public, void, MethodName:testIteratorLastEntryCanBeRemovedAfterHasNext,  @AT@ 12218 @LENGTH@ 12
------INS MethodInvocation@@iter.next() @TO@ ExpressionStatement@@MethodInvocation:iter.next() @AT@ 12218 @LENGTH@ 11
---------INS SimpleName@@Name:iter @TO@ MethodInvocation@@iter.next() @AT@ 12218 @LENGTH@ 4
---------INS SimpleName@@MethodName:next:[] @TO@ MethodInvocation@@iter.next() @AT@ 12223 @LENGTH@ 6
---INS ExpressionStatement@@MethodInvocation:assertFalse(iter.hasNext()) @TO@ MethodDeclaration@@public, void, MethodName:testIteratorLastEntryCanBeRemovedAfterHasNext,  @AT@ 12286 @LENGTH@ 28
------INS MethodInvocation@@assertFalse(iter.hasNext()) @TO@ ExpressionStatement@@MethodInvocation:assertFalse(iter.hasNext()) @AT@ 12286 @LENGTH@ 27
---------INS SimpleName@@MethodName:assertFalse:[iter.hasNext()] @TO@ MethodInvocation@@assertFalse(iter.hasNext()) @AT@ 12286 @LENGTH@ 27
------------INS MethodInvocation@@iter.hasNext() @TO@ SimpleName@@MethodName:assertFalse:[iter.hasNext()] @AT@ 12298 @LENGTH@ 14
---------------INS SimpleName@@Name:iter @TO@ MethodInvocation@@iter.hasNext() @AT@ 12298 @LENGTH@ 4
---------------INS SimpleName@@MethodName:hasNext:[] @TO@ MethodInvocation@@iter.hasNext() @AT@ 12303 @LENGTH@ 9
---INS ExpressionStatement@@MethodInvocation:iter.remove() @TO@ MethodDeclaration@@public, void, MethodName:testIteratorLastEntryCanBeRemovedAfterHasNext,  @AT@ 12323 @LENGTH@ 14
------INS MethodInvocation@@iter.remove() @TO@ ExpressionStatement@@MethodInvocation:iter.remove() @AT@ 12323 @LENGTH@ 13
---------INS SimpleName@@Name:iter @TO@ MethodInvocation@@iter.remove() @AT@ 12323 @LENGTH@ 4
---------INS SimpleName@@MethodName:remove:[] @TO@ MethodInvocation@@iter.remove() @AT@ 12328 @LENGTH@ 8
---INS ExpressionStatement@@MethodInvocation:assertTrue("Expect empty but have entry: " + map,map.isEmpty()) @TO@ MethodDeclaration@@public, void, MethodName:testIteratorLastEntryCanBeRemovedAfterHasNext,  @AT@ 12346 @LENGTH@ 65
------INS MethodInvocation@@assertTrue("Expect empty but have entry: " + map,map.isEmpty()) @TO@ ExpressionStatement@@MethodInvocation:assertTrue("Expect empty but have entry: " + map,map.isEmpty()) @AT@ 12346 @LENGTH@ 64
---------INS SimpleName@@MethodName:assertTrue:["Expect empty but have entry: " + map, map.isEmpty()] @TO@ MethodInvocation@@assertTrue("Expect empty but have entry: " + map,map.isEmpty()) @AT@ 12346 @LENGTH@ 64
------------INS InfixExpression@@"Expect empty but have entry: " + map @TO@ SimpleName@@MethodName:assertTrue:["Expect empty but have entry: " + map, map.isEmpty()] @AT@ 12357 @LENGTH@ 37
---------------INS StringLiteral@@"Expect empty but have entry: " @TO@ InfixExpression@@"Expect empty but have entry: " + map @AT@ 12357 @LENGTH@ 31
---------------INS Operator@@+ @TO@ InfixExpression@@"Expect empty but have entry: " + map @AT@ 12388 @LENGTH@ 1
---------------INS SimpleName@@map @TO@ InfixExpression@@"Expect empty but have entry: " + map @AT@ 12391 @LENGTH@ 3
------------INS MethodInvocation@@map.isEmpty() @TO@ SimpleName@@MethodName:assertTrue:["Expect empty but have entry: " + map, map.isEmpty()] @AT@ 12396 @LENGTH@ 13
---------------INS SimpleName@@Name:map @TO@ MethodInvocation@@map.isEmpty() @AT@ 12396 @LENGTH@ 3
---------------INS SimpleName@@MethodName:isEmpty:[] @TO@ MethodInvocation@@map.isEmpty() @AT@ 12400 @LENGTH@ 9


UPD VariableDeclarationStatement@@ValidationProviderResolverFactory factory=CamelContextHelper.findByType(camelContext,ValidationProviderResolverFactory.class); @TO@ ValidationProviderResolverFactory factory=CamelContextHelper.findSingleByType(camelContext,ValidationProviderResolverFactory.class); @AT@ 1916 @LENGTH@ 149
---UPD VariableDeclarationFragment@@factory=CamelContextHelper.findByType(camelContext,ValidationProviderResolverFactory.class) @TO@ factory=CamelContextHelper.findSingleByType(camelContext,ValidationProviderResolverFactory.class) @AT@ 1950 @LENGTH@ 114
------UPD MethodInvocation@@CamelContextHelper.findByType(camelContext,ValidationProviderResolverFactory.class) @TO@ CamelContextHelper.findSingleByType(camelContext,ValidationProviderResolverFactory.class) @AT@ 1980 @LENGTH@ 84
---------UPD SimpleName@@MethodName:findByType:[camelContext, ValidationProviderResolverFactory.class] @TO@ MethodName:findSingleByType:[camelContext, ValidationProviderResolverFactory.class] @AT@ 1999 @LENGTH@ 65


UPD IfStatement@@if (model != null && !DownloaderHelper.alreadyOnClasspath(camelContext,model.getArtifactId())) {  DownloaderHelper.downloadDependency(camelContext,model.getGroupId(),model.getArtifactId(),model.getVersion());} @TO@ if (model != null && !DownloaderHelper.alreadyOnClasspath(camelContext,model.getArtifactId(),model.getVersion())) {  DownloaderHelper.downloadDependency(camelContext,model.getGroupId(),model.getArtifactId(),model.getVersion());} @AT@ 1952 @LENGTH@ 233
---UPD InfixExpression@@model != null && !DownloaderHelper.alreadyOnClasspath(camelContext,model.getArtifactId()) @TO@ model != null && !DownloaderHelper.alreadyOnClasspath(camelContext,model.getArtifactId(),model.getVersion()) @AT@ 1956 @LENGTH@ 90
------UPD PrefixExpression@@!DownloaderHelper.alreadyOnClasspath(camelContext,model.getArtifactId()) @TO@ !DownloaderHelper.alreadyOnClasspath(camelContext,model.getArtifactId(),model.getVersion()) @AT@ 1973 @LENGTH@ 73
---------UPD MethodInvocation@@DownloaderHelper.alreadyOnClasspath(camelContext,model.getArtifactId()) @TO@ DownloaderHelper.alreadyOnClasspath(camelContext,model.getArtifactId(),model.getVersion()) @AT@ 1974 @LENGTH@ 72
------------UPD SimpleName@@MethodName:alreadyOnClasspath:[camelContext, model.getArtifactId()] @TO@ MethodName:alreadyOnClasspath:[camelContext, model.getArtifactId(), model.getVersion()] @AT@ 1991 @LENGTH@ 55
---------------INS MethodInvocation@@model.getVersion() @TO@ SimpleName@@MethodName:alreadyOnClasspath:[camelContext, model.getArtifactId()] @AT@ 2047 @LENGTH@ 18
------------------INS SimpleName@@Name:model @TO@ MethodInvocation@@model.getVersion() @AT@ 2047 @LENGTH@ 5
------------------INS SimpleName@@MethodName:getVersion:[] @TO@ MethodInvocation@@model.getVersion() @AT@ 2053 @LENGTH@ 12


UPD ExpressionStatement@@MethodInvocation:value.keys().forEach(k -> properties.put(k,value.get(k))) @TO@ MethodInvocation:properties.put(p.getPropertyName(),new MapValueWrapper(value)) @AT@ 7851 @LENGTH@ 59
---DEL MethodInvocation@@value.keys().forEach(k -> properties.put(k,value.get(k))) @AT@ 7851 @LENGTH@ 58
------DEL MethodInvocation@@MethodName:keys:[] @AT@ 7851 @LENGTH@ 12
------DEL SimpleName@@Name:value @AT@ 7851 @LENGTH@ 5
------DEL SimpleName@@MethodName:forEach:[k -> properties.put(k,value.get(k))] @AT@ 7864 @LENGTH@ 45
---------DEL LambdaExpression@@k -> properties.put(k,value.get(k)) @AT@ 7872 @LENGTH@ 36
------------DEL VariableDeclarationFragment@@k @AT@ 7872 @LENGTH@ 1
---------------DEL SimpleName@@k @AT@ 7872 @LENGTH@ 1
------------DEL MethodInvocation@@properties.put(k,value.get(k)) @AT@ 7877 @LENGTH@ 31
---INS MethodInvocation@@properties.put(p.getPropertyName(),new MapValueWrapper(value)) @TO@ ExpressionStatement@@MethodInvocation:value.keys().forEach(k -> properties.put(k,value.get(k))) @AT@ 7851 @LENGTH@ 63
------MOV SimpleName@@Name:properties @TO@ MethodInvocation@@properties.put(p.getPropertyName(),new MapValueWrapper(value)) @AT@ 7877 @LENGTH@ 10
------MOV SimpleName@@MethodName:put:[k, value.get(k)] @TO@ MethodInvocation@@properties.put(p.getPropertyName(),new MapValueWrapper(value)) @AT@ 7888 @LENGTH@ 20
---------INS ClassInstanceCreation@@MapValueWrapper[value] @TO@ SimpleName@@MethodName:put:[k, value.get(k)] @AT@ 7887 @LENGTH@ 26
------------INS New@@new @TO@ ClassInstanceCreation@@MapValueWrapper[value] @AT@ 7887 @LENGTH@ 3
------------INS SimpleType@@MapValueWrapper @TO@ ClassInstanceCreation@@MapValueWrapper[value] @AT@ 7891 @LENGTH@ 15
------------INS SimpleName@@value @TO@ ClassInstanceCreation@@MapValueWrapper[value] @AT@ 7907 @LENGTH@ 5
---------INS ClassInstanceCreation@@MapValueWrapper[value] @TO@ SimpleName@@MethodName:put:[k, value.get(k)] @AT@ 7887 @LENGTH@ 26
------------INS New@@new @TO@ ClassInstanceCreation@@MapValueWrapper[value] @AT@ 7887 @LENGTH@ 3
------------INS SimpleType@@MapValueWrapper @TO@ ClassInstanceCreation@@MapValueWrapper[value] @AT@ 7891 @LENGTH@ 15
------------INS SimpleName@@value @TO@ ClassInstanceCreation@@MapValueWrapper[value] @AT@ 7907 @LENGTH@ 5


UPD ExpressionStatement@@MethodInvocation:ArchiveStreamFactory.DEFAULT.createArchiveInputStream(ArchiveStreamFactory.SEVEN_Z,new ByteArrayInputStream(ByteUtils.EMPTY_BYTE_ARRAY)) @TO@ MethodInvocation:assertThrows(StreamingNotSupportedException.class,() -> ArchiveStreamFactory.DEFAULT.createArchiveInputStream(ArchiveStreamFactory.SEVEN_Z,new ByteArrayInputStream(ByteUtils.EMPTY_BYTE_ARRAY))) @AT@ 3777 @LENGTH@ 189
---INS MethodInvocation@@assertThrows(StreamingNotSupportedException.class,() -> ArchiveStreamFactory.DEFAULT.createArchiveInputStream(ArchiveStreamFactory.SEVEN_Z,new ByteArrayInputStream(ByteUtils.EMPTY_BYTE_ARRAY))) @TO@ ExpressionStatement@@MethodInvocation:ArchiveStreamFactory.DEFAULT.createArchiveInputStream(ArchiveStreamFactory.SEVEN_Z,new ByteArrayInputStream(ByteUtils.EMPTY_BYTE_ARRAY)) @AT@ 3822 @LENGTH@ 207
------INS SimpleName@@MethodName:assertThrows:[StreamingNotSupportedException.class, () -> ArchiveStreamFactory.DEFAULT.createArchiveInputStream(ArchiveStreamFactory.SEVEN_Z,new ByteArrayInputStream(ByteUtils.EMPTY_BYTE_ARRAY))] @TO@ MethodInvocation@@assertThrows(StreamingNotSupportedException.class,() -> ArchiveStreamFactory.DEFAULT.createArchiveInputStream(ArchiveStreamFactory.SEVEN_Z,new ByteArrayInputStream(ByteUtils.EMPTY_BYTE_ARRAY))) @AT@ 3822 @LENGTH@ 207
---------INS TypeLiteral@@StreamingNotSupportedException.class @TO@ SimpleName@@MethodName:assertThrows:[StreamingNotSupportedException.class, () -> ArchiveStreamFactory.DEFAULT.createArchiveInputStream(ArchiveStreamFactory.SEVEN_Z,new ByteArrayInputStream(ByteUtils.EMPTY_BYTE_ARRAY))] @AT@ 3835 @LENGTH@ 36
---------INS LambdaExpression@@() -> ArchiveStreamFactory.DEFAULT.createArchiveInputStream(ArchiveStreamFactory.SEVEN_Z,new ByteArrayInputStream(ByteUtils.EMPTY_BYTE_ARRAY)) @TO@ SimpleName@@MethodName:assertThrows:[StreamingNotSupportedException.class, () -> ArchiveStreamFactory.DEFAULT.createArchiveInputStream(ArchiveStreamFactory.SEVEN_Z,new ByteArrayInputStream(ByteUtils.EMPTY_BYTE_ARRAY))] @AT@ 3885 @LENGTH@ 143
------------MOV MethodInvocation@@ArchiveStreamFactory.DEFAULT.createArchiveInputStream(ArchiveStreamFactory.SEVEN_Z,new ByteArrayInputStream(ByteUtils.EMPTY_BYTE_ARRAY)) @TO@ LambdaExpression@@() -> ArchiveStreamFactory.DEFAULT.createArchiveInputStream(ArchiveStreamFactory.SEVEN_Z,new ByteArrayInputStream(ByteUtils.EMPTY_BYTE_ARRAY)) @AT@ 3777 @LENGTH@ 188


UPD IfStatement@@if (!DownloaderHelper.alreadyOnClasspath(getCamelContext(),artifactId)) {  DownloaderHelper.downloadDependency(getCamelContext(),"org.apache.camel",artifactId,getCamelContext().getVersion());} @TO@ if (!DownloaderHelper.alreadyOnClasspath(getCamelContext(),artifactId,getCamelContext().getVersion())) {  DownloaderHelper.downloadDependency(getCamelContext(),"org.apache.camel",artifactId,getCamelContext().getVersion());} @AT@ 3259 @LENGTH@ 236
---UPD PrefixExpression@@!DownloaderHelper.alreadyOnClasspath(getCamelContext(),artifactId) @TO@ !DownloaderHelper.alreadyOnClasspath(getCamelContext(),artifactId,getCamelContext().getVersion()) @AT@ 3263 @LENGTH@ 67
------UPD MethodInvocation@@DownloaderHelper.alreadyOnClasspath(getCamelContext(),artifactId) @TO@ DownloaderHelper.alreadyOnClasspath(getCamelContext(),artifactId,getCamelContext().getVersion()) @AT@ 3264 @LENGTH@ 66
---------UPD SimpleName@@MethodName:alreadyOnClasspath:[getCamelContext(), artifactId] @TO@ MethodName:alreadyOnClasspath:[getCamelContext(), artifactId, getCamelContext().getVersion()] @AT@ 3281 @LENGTH@ 49
------------INS MethodInvocation@@getCamelContext().getVersion() @TO@ SimpleName@@MethodName:alreadyOnClasspath:[getCamelContext(), artifactId] @AT@ 3331 @LENGTH@ 30
---------------INS MethodInvocation@@MethodName:getCamelContext:[] @TO@ MethodInvocation@@getCamelContext().getVersion() @AT@ 3331 @LENGTH@ 17
---------------INS SimpleName@@MethodName:getVersion:[] @TO@ MethodInvocation@@getCamelContext().getVersion() @AT@ 3349 @LENGTH@ 12


INS MethodDeclaration@@void, MethodName:returnsComponentAndValueTypesForVavrMapExtensions,  @TO@ TypeDeclaration@@[@ExtendWith(MockitoExtension.class), public]TypeDiscovererUnitTests,  @AT@ 5760 @LENGTH@ 288
---INS PrimitiveType@@void @TO@ MethodDeclaration@@void, MethodName:returnsComponentAndValueTypesForVavrMapExtensions,  @AT@ 5755 @LENGTH@ 4
---INS SimpleName@@MethodName:returnsComponentAndValueTypesForVavrMapExtensions @TO@ MethodDeclaration@@void, MethodName:returnsComponentAndValueTypesForVavrMapExtensions,  @AT@ 5760 @LENGTH@ 49
---INS VariableDeclarationStatement@@var discoverer=new TypeDiscoverer<>(CustomVavrMap.class,EMPTY_MAP); @TO@ MethodDeclaration@@void, MethodName:returnsComponentAndValueTypesForVavrMapExtensions,  @AT@ 5817 @LENGTH@ 70
------INS SimpleType@@var @TO@ VariableDeclarationStatement@@var discoverer=new TypeDiscoverer<>(CustomVavrMap.class,EMPTY_MAP); @AT@ 5817 @LENGTH@ 3
------INS VariableDeclarationFragment@@discoverer=new TypeDiscoverer<>(CustomVavrMap.class,EMPTY_MAP) @TO@ VariableDeclarationStatement@@var discoverer=new TypeDiscoverer<>(CustomVavrMap.class,EMPTY_MAP); @AT@ 5821 @LENGTH@ 65
---------INS SimpleName@@discoverer @TO@ VariableDeclarationFragment@@discoverer=new TypeDiscoverer<>(CustomVavrMap.class,EMPTY_MAP) @AT@ 5821 @LENGTH@ 10
---------INS ClassInstanceCreation@@TypeDiscoverer<>[CustomVavrMap.class, EMPTY_MAP] @TO@ VariableDeclarationFragment@@discoverer=new TypeDiscoverer<>(CustomVavrMap.class,EMPTY_MAP) @AT@ 5834 @LENGTH@ 52
------------INS New@@new @TO@ ClassInstanceCreation@@TypeDiscoverer<>[CustomVavrMap.class, EMPTY_MAP] @AT@ 5834 @LENGTH@ 3
------------INS ParameterizedType@@TypeDiscoverer<> @TO@ ClassInstanceCreation@@TypeDiscoverer<>[CustomVavrMap.class, EMPTY_MAP] @AT@ 5838 @LENGTH@ 16
---------------INS SimpleType@@TypeDiscoverer @TO@ ParameterizedType@@TypeDiscoverer<> @AT@ 5838 @LENGTH@ 14
------------INS TypeLiteral@@CustomVavrMap.class @TO@ ClassInstanceCreation@@TypeDiscoverer<>[CustomVavrMap.class, EMPTY_MAP] @AT@ 5855 @LENGTH@ 19
------------INS SimpleName@@EMPTY_MAP @TO@ ClassInstanceCreation@@TypeDiscoverer<>[CustomVavrMap.class, EMPTY_MAP] @AT@ 5876 @LENGTH@ 9
---INS ExpressionStatement@@MethodInvocation:assertThat(discoverer.getMapValueType().getType()).isEqualTo(Locale.class) @TO@ MethodDeclaration@@void, MethodName:returnsComponentAndValueTypesForVavrMapExtensions,  @AT@ 5891 @LENGTH@ 75
------INS MethodInvocation@@assertThat(discoverer.getMapValueType().getType()).isEqualTo(Locale.class) @TO@ ExpressionStatement@@MethodInvocation:assertThat(discoverer.getMapValueType().getType()).isEqualTo(Locale.class) @AT@ 5891 @LENGTH@ 74
---------INS MethodInvocation@@MethodName:assertThat:[discoverer.getMapValueType().getType()] @TO@ MethodInvocation@@assertThat(discoverer.getMapValueType().getType()).isEqualTo(Locale.class) @AT@ 5891 @LENGTH@ 50
------------INS MethodInvocation@@discoverer.getMapValueType().getType() @TO@ MethodInvocation@@MethodName:assertThat:[discoverer.getMapValueType().getType()] @AT@ 5902 @LENGTH@ 38
---------------INS MethodInvocation@@MethodName:getMapValueType:[] @TO@ MethodInvocation@@discoverer.getMapValueType().getType() @AT@ 5902 @LENGTH@ 28
---------------INS SimpleName@@Name:discoverer @TO@ MethodInvocation@@discoverer.getMapValueType().getType() @AT@ 5902 @LENGTH@ 10
---------------INS SimpleName@@MethodName:getType:[] @TO@ MethodInvocation@@discoverer.getMapValueType().getType() @AT@ 5931 @LENGTH@ 9
---------INS SimpleName@@MethodName:isEqualTo:[Locale.class] @TO@ MethodInvocation@@assertThat(discoverer.getMapValueType().getType()).isEqualTo(Locale.class) @AT@ 5942 @LENGTH@ 23
------------INS TypeLiteral@@Locale.class @TO@ SimpleName@@MethodName:isEqualTo:[Locale.class] @AT@ 5952 @LENGTH@ 12
---INS ExpressionStatement@@MethodInvocation:assertThat(discoverer.getComponentType().getType()).isEqualTo(String.class) @TO@ MethodDeclaration@@void, MethodName:returnsComponentAndValueTypesForVavrMapExtensions,  @AT@ 5969 @LENGTH@ 76
------INS MethodInvocation@@assertThat(discoverer.getComponentType().getType()).isEqualTo(String.class) @TO@ ExpressionStatement@@MethodInvocation:assertThat(discoverer.getComponentType().getType()).isEqualTo(String.class) @AT@ 5969 @LENGTH@ 75
---------INS MethodInvocation@@MethodName:assertThat:[discoverer.getComponentType().getType()] @TO@ MethodInvocation@@assertThat(discoverer.getComponentType().getType()).isEqualTo(String.class) @AT@ 5969 @LENGTH@ 51
------------INS MethodInvocation@@discoverer.getComponentType().getType() @TO@ MethodInvocation@@MethodName:assertThat:[discoverer.getComponentType().getType()] @AT@ 5980 @LENGTH@ 39
---------------INS MethodInvocation@@MethodName:getComponentType:[] @TO@ MethodInvocation@@discoverer.getComponentType().getType() @AT@ 5980 @LENGTH@ 29
---------------INS SimpleName@@Name:discoverer @TO@ MethodInvocation@@discoverer.getComponentType().getType() @AT@ 5980 @LENGTH@ 10
---------------INS SimpleName@@MethodName:getType:[] @TO@ MethodInvocation@@discoverer.getComponentType().getType() @AT@ 6010 @LENGTH@ 9
---------INS SimpleName@@MethodName:isEqualTo:[String.class] @TO@ MethodInvocation@@assertThat(discoverer.getComponentType().getType()).isEqualTo(String.class) @AT@ 6021 @LENGTH@ 23
------------INS TypeLiteral@@String.class @TO@ SimpleName@@MethodName:isEqualTo:[String.class] @AT@ 6031 @LENGTH@ 12


UPD ExpressionStatement@@MethodInvocation:assertArrayEquals(expected.toByteArray(),actual.toByteArray(),() -> new String(expected.toByteArray())) @TO@ MethodInvocation:assertArrayEquals(expected.toByteArray(),actual.toByteArray(),() -> {
  String s=null;
  try {
    s=new String(expected.toByteArray(),"UTF-8");
  }
 catch (  UnsupportedEncodingException e) {
    fail(e.getMessage(),e);
  }
  return String.format("Expected String '%s' with length '%s'",s,s.length());
}
) @AT@ 9807 @LENGTH@ 106
---UPD MethodInvocation@@assertArrayEquals(expected.toByteArray(),actual.toByteArray(),() -> new String(expected.toByteArray())) @TO@ assertArrayEquals(expected.toByteArray(),actual.toByteArray(),() -> {
  String s=null;
  try {
    s=new String(expected.toByteArray(),"UTF-8");
  }
 catch (  UnsupportedEncodingException e) {
    fail(e.getMessage(),e);
  }
  return String.format("Expected String '%s' with length '%s'",s,s.length());
}
) @AT@ 9807 @LENGTH@ 105
------UPD SimpleName@@MethodName:assertArrayEquals:[expected.toByteArray(), actual.toByteArray(), () -> new String(expected.toByteArray())] @TO@ MethodName:assertArrayEquals:[expected.toByteArray(), actual.toByteArray(), () -> {
  String s=null;
  try {
    s=new String(expected.toByteArray(),"UTF-8");
  }
 catch (  UnsupportedEncodingException e) {
    fail(e.getMessage(),e);
  }
  return String.format("Expected String '%s' with length '%s'",s,s.length());
}
] @AT@ 9807 @LENGTH@ 105
---------UPD LambdaExpression@@() -> new String(expected.toByteArray()) @TO@ () -> {
  String s=null;
  try {
    s=new String(expected.toByteArray(),"UTF-8");
  }
 catch (  UnsupportedEncodingException e) {
    fail(e.getMessage(),e);
  }
  return String.format("Expected String '%s' with length '%s'",s,s.length());
}
 @AT@ 9871 @LENGTH@ 40
------------DEL ClassInstanceCreation@@String[expected.toByteArray()] @AT@ 9877 @LENGTH@ 34
------------INS VariableDeclarationStatement@@String s=null; @TO@ LambdaExpression@@() -> new String(expected.toByteArray()) @AT@ 9944 @LENGTH@ 16
---------------INS SimpleType@@String @TO@ VariableDeclarationStatement@@String s=null; @AT@ 9944 @LENGTH@ 6
---------------INS VariableDeclarationFragment@@s=null @TO@ VariableDeclarationStatement@@String s=null; @AT@ 9951 @LENGTH@ 8
------------------INS SimpleName@@s @TO@ VariableDeclarationFragment@@s=null @AT@ 9951 @LENGTH@ 1
------------------INS NullLiteral@@null @TO@ VariableDeclarationFragment@@s=null @AT@ 9955 @LENGTH@ 4
------------INS TryStatement@@try {  s=new String(expected.toByteArray(),"UTF-8");} catch (UnsupportedEncodingException e) {  fail(e.getMessage(),e);} @TO@ LambdaExpression@@() -> new String(expected.toByteArray()) @AT@ 9981 @LENGTH@ 212
---------------INS ExpressionStatement@@Assignment:s=new String(expected.toByteArray(),"UTF-8") @TO@ TryStatement@@try {  s=new String(expected.toByteArray(),"UTF-8");} catch (UnsupportedEncodingException e) {  fail(e.getMessage(),e);} @AT@ 10011 @LENGTH@ 48
------------------INS Assignment@@s=new String(expected.toByteArray(),"UTF-8") @TO@ ExpressionStatement@@Assignment:s=new String(expected.toByteArray(),"UTF-8") @AT@ 10011 @LENGTH@ 47
---------------------INS SimpleName@@s @TO@ Assignment@@s=new String(expected.toByteArray(),"UTF-8") @AT@ 10011 @LENGTH@ 1
---------------------INS Operator@@= @TO@ Assignment@@s=new String(expected.toByteArray(),"UTF-8") @AT@ 10012 @LENGTH@ 1
---------------------INS ClassInstanceCreation@@String[expected.toByteArray(), "UTF-8"] @TO@ Assignment@@s=new String(expected.toByteArray(),"UTF-8") @AT@ 10015 @LENGTH@ 43
------------------------MOV New@@new @TO@ ClassInstanceCreation@@String[expected.toByteArray(), "UTF-8"] @AT@ 9877 @LENGTH@ 3
------------------------MOV New@@new @TO@ ClassInstanceCreation@@String[expected.toByteArray(), "UTF-8"] @AT@ 9877 @LENGTH@ 3
------------------------MOV SimpleType@@String @TO@ ClassInstanceCreation@@String[expected.toByteArray(), "UTF-8"] @AT@ 9881 @LENGTH@ 6
------------------------MOV SimpleType@@String @TO@ ClassInstanceCreation@@String[expected.toByteArray(), "UTF-8"] @AT@ 9881 @LENGTH@ 6
------------------------MOV MethodInvocation@@expected.toByteArray() @TO@ ClassInstanceCreation@@String[expected.toByteArray(), "UTF-8"] @AT@ 9888 @LENGTH@ 22
------------------------MOV MethodInvocation@@expected.toByteArray() @TO@ ClassInstanceCreation@@String[expected.toByteArray(), "UTF-8"] @AT@ 9888 @LENGTH@ 22
------------------------INS StringLiteral@@"UTF-8" @TO@ ClassInstanceCreation@@String[expected.toByteArray(), "UTF-8"] @AT@ 10050 @LENGTH@ 7
---------------INS CatchClause@@catch (UnsupportedEncodingException e) {  fail(e.getMessage(),e);} @TO@ TryStatement@@try {  s=new String(expected.toByteArray(),"UTF-8");} catch (UnsupportedEncodingException e) {  fail(e.getMessage(),e);} @AT@ 10082 @LENGTH@ 111
------------------INS SingleVariableDeclaration@@UnsupportedEncodingException e @TO@ CatchClause@@catch (UnsupportedEncodingException e) {  fail(e.getMessage(),e);} @AT@ 10089 @LENGTH@ 30
---------------------INS SimpleType@@UnsupportedEncodingException @TO@ SingleVariableDeclaration@@UnsupportedEncodingException e @AT@ 10089 @LENGTH@ 28
---------------------INS SimpleName@@e @TO@ SingleVariableDeclaration@@UnsupportedEncodingException e @AT@ 10118 @LENGTH@ 1
------------------INS ExpressionStatement@@MethodInvocation:fail(e.getMessage(),e) @TO@ CatchClause@@catch (UnsupportedEncodingException e) {  fail(e.getMessage(),e);} @AT@ 10147 @LENGTH@ 24
---------------------INS MethodInvocation@@fail(e.getMessage(),e) @TO@ ExpressionStatement@@MethodInvocation:fail(e.getMessage(),e) @AT@ 10147 @LENGTH@ 23
------------------------INS SimpleName@@MethodName:fail:[e.getMessage(), e] @TO@ MethodInvocation@@fail(e.getMessage(),e) @AT@ 10147 @LENGTH@ 23
---------------------------INS MethodInvocation@@e.getMessage() @TO@ SimpleName@@MethodName:fail:[e.getMessage(), e] @AT@ 10152 @LENGTH@ 14
------------------------------INS SimpleName@@Name:e @TO@ MethodInvocation@@e.getMessage() @AT@ 10152 @LENGTH@ 1
------------------------------INS SimpleName@@MethodName:getMessage:[] @TO@ MethodInvocation@@e.getMessage() @AT@ 10154 @LENGTH@ 12
---------------------------INS SimpleName@@e @TO@ SimpleName@@MethodName:fail:[e.getMessage(), e] @AT@ 10168 @LENGTH@ 1
------------------------INS SimpleName@@MethodName:fail:[e.getMessage(), e] @TO@ MethodInvocation@@fail(e.getMessage(),e) @AT@ 10147 @LENGTH@ 23
---------------------------INS MethodInvocation@@e.getMessage() @TO@ SimpleName@@MethodName:fail:[e.getMessage(), e] @AT@ 10152 @LENGTH@ 14
------------------------------INS SimpleName@@Name:e @TO@ MethodInvocation@@e.getMessage() @AT@ 10152 @LENGTH@ 1
------------------------------INS SimpleName@@MethodName:getMessage:[] @TO@ MethodInvocation@@e.getMessage() @AT@ 10154 @LENGTH@ 12
---------------------------INS SimpleName@@e @TO@ SimpleName@@MethodName:fail:[e.getMessage(), e] @AT@ 10168 @LENGTH@ 1
------------INS ReturnStatement@@MethodInvocation:String.format("Expected String '%s' with length '%s'",s,s.length()) @TO@ LambdaExpression@@() -> new String(expected.toByteArray()) @AT@ 10214 @LENGTH@ 77
---------------INS MethodInvocation@@String.format("Expected String '%s' with length '%s'",s,s.length()) @TO@ ReturnStatement@@MethodInvocation:String.format("Expected String '%s' with length '%s'",s,s.length()) @AT@ 10221 @LENGTH@ 69
------------------INS SimpleName@@Name:String @TO@ MethodInvocation@@String.format("Expected String '%s' with length '%s'",s,s.length()) @AT@ 10221 @LENGTH@ 6
------------------INS SimpleName@@MethodName:format:["Expected String '%s' with length '%s'", s, s.length()] @TO@ MethodInvocation@@String.format("Expected String '%s' with length '%s'",s,s.length()) @AT@ 10228 @LENGTH@ 62
---------------------INS StringLiteral@@"Expected String '%s' with length '%s'" @TO@ SimpleName@@MethodName:format:["Expected String '%s' with length '%s'", s, s.length()] @AT@ 10235 @LENGTH@ 39
---------------------INS SimpleName@@s @TO@ SimpleName@@MethodName:format:["Expected String '%s' with length '%s'", s, s.length()] @AT@ 10276 @LENGTH@ 1
---------------------INS MethodInvocation@@s.length() @TO@ SimpleName@@MethodName:format:["Expected String '%s' with length '%s'", s, s.length()] @AT@ 10279 @LENGTH@ 10
------------------------INS SimpleName@@Name:s @TO@ MethodInvocation@@s.length() @AT@ 10279 @LENGTH@ 1
------------------------INS SimpleName@@MethodName:length:[] @TO@ MethodInvocation@@s.length() @AT@ 10281 @LENGTH@ 8


UPD ExpressionStatement@@MethodInvocation:serviceLoaderIterator.next() @TO@ MethodInvocation:assertThrows(NoSuchElementException.class,() -> serviceLoaderIterator.next()) @AT@ 1417 @LENGTH@ 29
---DEL MethodInvocation@@serviceLoaderIterator.next() @AT@ 1417 @LENGTH@ 28
---INS MethodInvocation@@assertThrows(NoSuchElementException.class,() -> serviceLoaderIterator.next()) @TO@ ExpressionStatement@@MethodInvocation:serviceLoaderIterator.next() @AT@ 1462 @LENGTH@ 78
------INS SimpleName@@MethodName:assertThrows:[NoSuchElementException.class, () -> serviceLoaderIterator.next()] @TO@ MethodInvocation@@assertThrows(NoSuchElementException.class,() -> serviceLoaderIterator.next()) @AT@ 1462 @LENGTH@ 78
---------INS TypeLiteral@@NoSuchElementException.class @TO@ SimpleName@@MethodName:assertThrows:[NoSuchElementException.class, () -> serviceLoaderIterator.next()] @AT@ 1475 @LENGTH@ 28
---------INS LambdaExpression@@() -> serviceLoaderIterator.next() @TO@ SimpleName@@MethodName:assertThrows:[NoSuchElementException.class, () -> serviceLoaderIterator.next()] @AT@ 1505 @LENGTH@ 34
------------INS MethodInvocation@@serviceLoaderIterator.next() @TO@ LambdaExpression@@() -> serviceLoaderIterator.next() @AT@ 1511 @LENGTH@ 28
---------------MOV SimpleName@@Name:serviceLoaderIterator @TO@ MethodInvocation@@serviceLoaderIterator.next() @AT@ 1417 @LENGTH@ 21
---------------MOV SimpleName@@MethodName:next:[] @TO@ MethodInvocation@@serviceLoaderIterator.next() @AT@ 1439 @LENGTH@ 6


UPD MethodDeclaration@@public, static, boolean, MethodName:alreadyOnClasspath, CamelContext camelContext, String artifactId,  @TO@ public, static, boolean, MethodName:alreadyOnClasspath, CamelContext camelContext, String artifactId, String version,  @AT@ 2096 @LENGTH@ 987
---INS SingleVariableDeclaration@@String version @TO@ MethodDeclaration@@public, static, boolean, MethodName:alreadyOnClasspath, CamelContext camelContext, String artifactId,  @AT@ 2183 @LENGTH@ 14
------INS SimpleType@@String @TO@ SingleVariableDeclaration@@String version @AT@ 2183 @LENGTH@ 6
------INS SimpleName@@version @TO@ SingleVariableDeclaration@@String version @AT@ 2190 @LENGTH@ 7
---UPD IfStatement@@if (CP != null) {  if (CP.contains(artifactId)) {    return true;  }} @TO@ if (CP != null) {  if (CP.contains(target)) {    return true;  }} @AT@ 2314 @LENGTH@ 195
------UPD Block@@ThenBody:{  if (CP.contains(artifactId)) {    return true;  }} @TO@ ThenBody:{  if (CP.contains(target)) {    return true;  }} @AT@ 2330 @LENGTH@ 179
---------UPD IfStatement@@if (CP.contains(artifactId)) {  return true;} @TO@ if (CP.contains(target)) {  return true;} @AT@ 2386 @LENGTH@ 113
------------UPD MethodInvocation@@CP.contains(artifactId) @TO@ CP.contains(target) @AT@ 2390 @LENGTH@ 23
---------------UPD SimpleName@@MethodName:contains:[artifactId] @TO@ MethodName:contains:[target] @AT@ 2393 @LENGTH@ 20
------------------UPD SimpleName@@artifactId @TO@ target @AT@ 2402 @LENGTH@ 10
---INS VariableDeclarationStatement@@String target=artifactId; @TO@ MethodDeclaration@@public, static, boolean, MethodName:alreadyOnClasspath, CamelContext camelContext, String artifactId,  @AT@ 2330 @LENGTH@ 27
------INS SimpleType@@String @TO@ VariableDeclarationStatement@@String target=artifactId; @AT@ 2330 @LENGTH@ 6
------INS VariableDeclarationFragment@@target=artifactId @TO@ VariableDeclarationStatement@@String target=artifactId; @AT@ 2337 @LENGTH@ 19
---------INS SimpleName@@target @TO@ VariableDeclarationFragment@@target=artifactId @AT@ 2337 @LENGTH@ 6
---------INS SimpleName@@artifactId @TO@ VariableDeclarationFragment@@target=artifactId @AT@ 2346 @LENGTH@ 10
---INS IfStatement@@if (version != null) {  target=target + "-" + version;} @TO@ MethodDeclaration@@public, static, boolean, MethodName:alreadyOnClasspath, CamelContext camelContext, String artifactId,  @AT@ 2366 @LENGTH@ 77
------INS InfixExpression@@version != null @TO@ IfStatement@@if (version != null) {  target=target + "-" + version;} @AT@ 2370 @LENGTH@ 15
---------INS SimpleName@@version @TO@ InfixExpression@@version != null @AT@ 2370 @LENGTH@ 7
---------INS Operator@@!= @TO@ InfixExpression@@version != null @AT@ 2377 @LENGTH@ 2
---------INS NullLiteral@@null @TO@ InfixExpression@@version != null @AT@ 2381 @LENGTH@ 4
------INS Block@@ThenBody:{  target=target + "-" + version;} @TO@ IfStatement@@if (version != null) {  target=target + "-" + version;} @AT@ 2387 @LENGTH@ 56
---------INS ExpressionStatement@@Assignment:target=target + "-" + version @TO@ Block@@ThenBody:{  target=target + "-" + version;} @AT@ 2401 @LENGTH@ 32
------------INS Assignment@@target=target + "-" + version @TO@ ExpressionStatement@@Assignment:target=target + "-" + version @AT@ 2401 @LENGTH@ 31
---------------INS SimpleName@@target @TO@ Assignment@@target=target + "-" + version @AT@ 2401 @LENGTH@ 6
---------------INS Operator@@= @TO@ Assignment@@target=target + "-" + version @AT@ 2407 @LENGTH@ 1
---------------INS InfixExpression@@target + "-" + version @TO@ Assignment@@target=target + "-" + version @AT@ 2410 @LENGTH@ 22
------------------INS SimpleName@@target @TO@ InfixExpression@@target + "-" + version @AT@ 2410 @LENGTH@ 6
------------------INS Operator@@+ @TO@ InfixExpression@@target + "-" + version @AT@ 2416 @LENGTH@ 1
------------------INS StringLiteral@@"-" @TO@ InfixExpression@@target + "-" + version @AT@ 2419 @LENGTH@ 3
------------------INS SimpleName@@version @TO@ InfixExpression@@target + "-" + version @AT@ 2425 @LENGTH@ 7
---UPD IfStatement@@if (camelContext.getApplicationContextClassLoader() != null) {  ClassLoader cl=camelContext.getApplicationContextClassLoader();  if (cl instanceof URLClassLoader) {    URLClassLoader ucl=(URLClassLoader)cl;    for (    URL u : ucl.getURLs()) {      String s=u.toString();      if (s.contains(artifactId)) {        return true;      }    }  }} @TO@ if (camelContext.getApplicationContextClassLoader() != null) {  ClassLoader cl=camelContext.getApplicationContextClassLoader();  if (cl instanceof URLClassLoader) {    URLClassLoader ucl=(URLClassLoader)cl;    for (    URL u : ucl.getURLs()) {      String s=u.toString();      if (s.contains(target)) {        return true;      }    }  }} @AT@ 2519 @LENGTH@ 536
------UPD Block@@ThenBody:{  ClassLoader cl=camelContext.getApplicationContextClassLoader();  if (cl instanceof URLClassLoader) {    URLClassLoader ucl=(URLClassLoader)cl;    for (    URL u : ucl.getURLs()) {      String s=u.toString();      if (s.contains(artifactId)) {        return true;      }    }  }} @TO@ ThenBody:{  ClassLoader cl=camelContext.getApplicationContextClassLoader();  if (cl instanceof URLClassLoader) {    URLClassLoader ucl=(URLClassLoader)cl;    for (    URL u : ucl.getURLs()) {      String s=u.toString();      if (s.contains(target)) {        return true;      }    }  }} @AT@ 2580 @LENGTH@ 475
---------UPD IfStatement@@if (cl instanceof URLClassLoader) {  URLClassLoader ucl=(URLClassLoader)cl;  for (  URL u : ucl.getURLs()) {    String s=u.toString();    if (s.contains(artifactId)) {      return true;    }  }} @TO@ if (cl instanceof URLClassLoader) {  URLClassLoader ucl=(URLClassLoader)cl;  for (  URL u : ucl.getURLs()) {    String s=u.toString();    if (s.contains(target)) {      return true;    }  }} @AT@ 2672 @LENGTH@ 373
------------UPD Block@@ThenBody:{  URLClassLoader ucl=(URLClassLoader)cl;  for (  URL u : ucl.getURLs()) {    String s=u.toString();    if (s.contains(artifactId)) {      return true;    }  }} @TO@ ThenBody:{  URLClassLoader ucl=(URLClassLoader)cl;  for (  URL u : ucl.getURLs()) {    String s=u.toString();    if (s.contains(target)) {      return true;    }  }} @AT@ 2706 @LENGTH@ 339
---------------UPD EnhancedForStatement@@for (URL u : ucl.getURLs()) {  String s=u.toString();  if (s.contains(artifactId)) {    return true;  }} @TO@ for (URL u : ucl.getURLs()) {  String s=u.toString();  if (s.contains(target)) {    return true;  }} @AT@ 2782 @LENGTH@ 249
------------------UPD IfStatement@@if (s.contains(artifactId)) {  return true;} @TO@ if (s.contains(target)) {  return true;} @AT@ 2877 @LENGTH@ 136
---------------------UPD MethodInvocation@@s.contains(artifactId) @TO@ s.contains(target) @AT@ 2881 @LENGTH@ 22
------------------------UPD SimpleName@@MethodName:contains:[artifactId] @TO@ MethodName:contains:[target] @AT@ 2883 @LENGTH@ 20
---------------------------UPD SimpleName@@artifactId @TO@ target @AT@ 2892 @LENGTH@ 10


UPD TryStatement@@try {  Marshaller marshaller=createMarshaller();  if (isPrettyPrint()) {    marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT,Boolean.TRUE);  }  String charset=exchange.getProperty(ExchangePropertyKey.CHARSET_NAME,String.class);  if (charset == null) {    charset=encoding;    if (charset != null) {      exchange.setProperty(ExchangePropertyKey.CHARSET_NAME,charset);    }  }  if (charset != null) {    marshaller.setProperty(Marshaller.JAXB_ENCODING,charset);  }  if (isFragment()) {    marshaller.setProperty(Marshaller.JAXB_FRAGMENT,Boolean.TRUE);  }  if (ObjectHelper.isNotEmpty(schemaLocation)) {    marshaller.setProperty(Marshaller.JAXB_SCHEMA_LOCATION,schemaLocation);  }  if (ObjectHelper.isNotEmpty(noNamespaceSchemaLocation)) {    marshaller.setProperty(Marshaller.JAXB_NO_NAMESPACE_SCHEMA_LOCATION,noNamespaceSchemaLocation);  }  if (namespacePrefixMapper != null) {    marshaller.setProperty(namespacePrefixMapper.getRegistrationKey(),namespacePrefixMapper);  }  Map<String,Object> customProperties=exchange.getProperty(JaxbConstants.JAXB_PROVIDER_PROPERTIES,Map.class);  if (customProperties == null) {    customProperties=getJaxbProviderProperties();  }  if (customProperties != null) {    for (    Entry<String,Object> property : customProperties.entrySet()) {      if (LOG.isDebugEnabled()) {        LOG.debug("Using JAXB Provider Property {}={}",property.getKey(),property.getValue());      }      marshaller.setProperty(property.getKey(),property.getValue());    }  }  doMarshal(exchange,graph,stream,marshaller,charset);  if (contentTypeHeader) {    if (exchange.hasOut()) {      exchange.getOut().setHeader(Exchange.CONTENT_TYPE,"application/xml");    } else {      exchange.getIn().setHeader(Exchange.CONTENT_TYPE,"application/xml");    }  }} catch (Exception e) {  throw new IOException(e);} @TO@ try {  Marshaller marshaller=createMarshaller();  if (isPrettyPrint()) {    marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT,Boolean.TRUE);  }  String charset=exchange.getProperty(ExchangePropertyKey.CHARSET_NAME,String.class);  if (charset == null) {    charset=encoding;    if (charset != null) {      exchange.setProperty(ExchangePropertyKey.CHARSET_NAME,charset);    }  }  if (charset != null) {    marshaller.setProperty(Marshaller.JAXB_ENCODING,charset);  }  if (isFragment()) {    marshaller.setProperty(Marshaller.JAXB_FRAGMENT,Boolean.TRUE);  }  if (ObjectHelper.isNotEmpty(schemaLocation)) {    marshaller.setProperty(Marshaller.JAXB_SCHEMA_LOCATION,schemaLocation);  }  if (ObjectHelper.isNotEmpty(noNamespaceSchemaLocation)) {    marshaller.setProperty(Marshaller.JAXB_NO_NAMESPACE_SCHEMA_LOCATION,noNamespaceSchemaLocation);  }  if (namespacePrefixMapper != null) {    marshaller.setProperty(namespacePrefixMapper.getRegistrationKey(),namespacePrefixMapper);  }  Map<String,Object> customProperties=exchange.getProperty(JaxbConstants.JAXB_PROVIDER_PROPERTIES,Map.class);  if (customProperties == null) {    customProperties=getJaxbProviderProperties();  }  if (customProperties != null) {    for (    Entry<String,Object> property : customProperties.entrySet()) {      if (LOG.isDebugEnabled()) {        LOG.debug("Using JAXB Provider Property {}={}",property.getKey(),property.getValue());      }      marshaller.setProperty(property.getKey(),property.getValue());    }  }  doMarshal(exchange,graph,stream,marshaller,charset);  if (contentTypeHeader) {    exchange.getMessage().setHeader(Exchange.CONTENT_TYPE,"application/xml");  }} catch (Exception e) {  throw new IOException(e);} @AT@ 4748 @LENGTH@ 2751
---DEL IfStatement@@if (contentTypeHeader) {  if (exchange.hasOut()) {    exchange.getOut().setHeader(Exchange.CONTENT_TYPE,"application/xml");  } else {    exchange.getIn().setHeader(Exchange.CONTENT_TYPE,"application/xml");  }} @AT@ 7116 @LENGTH@ 303
------DEL SimpleName@@contentTypeHeader @AT@ 7120 @LENGTH@ 17
------DEL Block@@ThenBody:{  if (exchange.hasOut()) {    exchange.getOut().setHeader(Exchange.CONTENT_TYPE,"application/xml");  } else {    exchange.getIn().setHeader(Exchange.CONTENT_TYPE,"application/xml");  }} @AT@ 7139 @LENGTH@ 280
---MOV IfStatement@@if (exchange.hasOut()) {  exchange.getOut().setHeader(Exchange.CONTENT_TYPE,"application/xml");} else {  exchange.getIn().setHeader(Exchange.CONTENT_TYPE,"application/xml");} @TO@ TryStatement@@try {  Marshaller marshaller=createMarshaller();  if (isPrettyPrint()) {    marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT,Boolean.TRUE);  }  String charset=exchange.getProperty(ExchangePropertyKey.CHARSET_NAME,String.class);  if (charset == null) {    charset=encoding;    if (charset != null) {      exchange.setProperty(ExchangePropertyKey.CHARSET_NAME,charset);    }  }  if (charset != null) {    marshaller.setProperty(Marshaller.JAXB_ENCODING,charset);  }  if (isFragment()) {    marshaller.setProperty(Marshaller.JAXB_FRAGMENT,Boolean.TRUE);  }  if (ObjectHelper.isNotEmpty(schemaLocation)) {    marshaller.setProperty(Marshaller.JAXB_SCHEMA_LOCATION,schemaLocation);  }  if (ObjectHelper.isNotEmpty(noNamespaceSchemaLocation)) {    marshaller.setProperty(Marshaller.JAXB_NO_NAMESPACE_SCHEMA_LOCATION,noNamespaceSchemaLocation);  }  if (namespacePrefixMapper != null) {    marshaller.setProperty(namespacePrefixMapper.getRegistrationKey(),namespacePrefixMapper);  }  Map<String,Object> customProperties=exchange.getProperty(JaxbConstants.JAXB_PROVIDER_PROPERTIES,Map.class);  if (customProperties == null) {    customProperties=getJaxbProviderProperties();  }  if (customProperties != null) {    for (    Entry<String,Object> property : customProperties.entrySet()) {      if (LOG.isDebugEnabled()) {        LOG.debug("Using JAXB Provider Property {}={}",property.getKey(),property.getValue());      }      marshaller.setProperty(property.getKey(),property.getValue());    }  }  doMarshal(exchange,graph,stream,marshaller,charset);  if (contentTypeHeader) {    if (exchange.hasOut()) {      exchange.getOut().setHeader(Exchange.CONTENT_TYPE,"application/xml");    } else {      exchange.getIn().setHeader(Exchange.CONTENT_TYPE,"application/xml");    }  }} catch (Exception e) {  throw new IOException(e);} @AT@ 7157 @LENGTH@ 248
------INS SimpleName@@contentTypeHeader @TO@ IfStatement@@if (exchange.hasOut()) {  exchange.getOut().setHeader(Exchange.CONTENT_TYPE,"application/xml");} else {  exchange.getIn().setHeader(Exchange.CONTENT_TYPE,"application/xml");} @AT@ 7120 @LENGTH@ 17
------DEL MethodInvocation@@exchange.hasOut() @AT@ 7161 @LENGTH@ 17
---------DEL SimpleName@@Name:exchange @AT@ 7161 @LENGTH@ 8
---------DEL SimpleName@@MethodName:hasOut:[] @AT@ 7170 @LENGTH@ 8
------UPD Block@@ThenBody:{  exchange.getOut().setHeader(Exchange.CONTENT_TYPE,"application/xml");} @TO@ ThenBody:{  exchange.getMessage().setHeader(Exchange.CONTENT_TYPE,"application/xml");} @AT@ 7180 @LENGTH@ 110
---------UPD ExpressionStatement@@MethodInvocation:exchange.getOut().setHeader(Exchange.CONTENT_TYPE,"application/xml") @TO@ MethodInvocation:exchange.getMessage().setHeader(Exchange.CONTENT_TYPE,"application/xml") @AT@ 7202 @LENGTH@ 70
------------UPD MethodInvocation@@exchange.getOut().setHeader(Exchange.CONTENT_TYPE,"application/xml") @TO@ exchange.getMessage().setHeader(Exchange.CONTENT_TYPE,"application/xml") @AT@ 7202 @LENGTH@ 69
---------------UPD MethodInvocation@@MethodName:getOut:[] @TO@ MethodName:getMessage:[] @AT@ 7202 @LENGTH@ 17
------DEL Block@@ElseBody:{  exchange.getIn().setHeader(Exchange.CONTENT_TYPE,"application/xml");} @AT@ 7296 @LENGTH@ 109
---------DEL ExpressionStatement@@MethodInvocation:exchange.getIn().setHeader(Exchange.CONTENT_TYPE,"application/xml") @AT@ 7318 @LENGTH@ 69
------------DEL MethodInvocation@@exchange.getIn().setHeader(Exchange.CONTENT_TYPE,"application/xml") @AT@ 7318 @LENGTH@ 68
---------------DEL MethodInvocation@@MethodName:getIn:[] @AT@ 7318 @LENGTH@ 16
---------------DEL SimpleName@@Name:exchange @AT@ 7318 @LENGTH@ 8
---------------DEL SimpleName@@MethodName:setHeader:[Exchange.CONTENT_TYPE, "application/xml"] @AT@ 7335 @LENGTH@ 51
------------------DEL QualifiedName@@Exchange.CONTENT_TYPE @AT@ 7345 @LENGTH@ 21
---------------------DEL SimpleName@@Exchange @AT@ 7345 @LENGTH@ 8
---------------------DEL SimpleName@@CONTENT_TYPE @AT@ 7354 @LENGTH@ 12
------------------DEL StringLiteral@@"application/xml" @AT@ 7368 @LENGTH@ 17


UPD ExpressionStatement@@MethodInvocation:assertThat(result).containsExactly(entry("res",2),entry("res2",null)) @TO@ MethodInvocation:assertThat(result).containsOnly(entry("res",2),entry("res2",null)) @AT@ 3450 @LENGTH@ 73
---UPD MethodInvocation@@assertThat(result).containsExactly(entry("res",2),entry("res2",null)) @TO@ assertThat(result).containsOnly(entry("res",2),entry("res2",null)) @AT@ 3450 @LENGTH@ 72
------UPD SimpleName@@MethodName:containsExactly:[entry("res",2), entry("res2",null)] @TO@ MethodName:containsOnly:[entry("res",2), entry("res2",null)] @AT@ 3469 @LENGTH@ 53


UPD IfStatement@@if (sslContext != null) {  String kmName=sslContext.get(Util.KEY_MANAGER).asString();  ModelNode km=getChildResource(kmName,Util.KEY_MANAGER,context);  String ksName=km.get(Util.KEY_STORE).asString();  KeyStore keyStore=new KeyStore(ksName,null,true);  KeyManager keyManager=new KeyManager(kmName,keyStore,true);  KeyManager trustManager=null;  if (sslContext.hasDefined(Util.TRUST_MANAGER)) {    trustManager=new KeyManager(sslContext.get(Util.TRUST_MANAGER).asString(),keyStore,true);  }  ctx=new ServerSSLContext(ksName,keyManager,trustManager,true);} @TO@ if (sslContext != null) {  String kmName=sslContext.get(Util.KEY_MANAGER).asString();  ModelNode km=getChildResource(kmName,Util.KEY_MANAGER,context);  if (km == null) {    throw new IllegalArgumentException("The ServerSSLContext " + sslContextName + " references the KeyManager "+ kmName+ " that doesn't exist.");  }  String ksName=km.get(Util.KEY_STORE).asString();  KeyStore keyStore=new KeyStore(ksName,null,true);  KeyManager keyManager=new KeyManager(kmName,keyStore,true);  KeyManager trustManager=null;  if (sslContext.hasDefined(Util.TRUST_MANAGER)) {    trustManager=new KeyManager(sslContext.get(Util.TRUST_MANAGER).asString(),keyStore,true);  }  ctx=new ServerSSLContext(ksName,keyManager,trustManager,true);} @AT@ 22303 @LENGTH@ 702
---UPD Block@@ThenBody:{  String kmName=sslContext.get(Util.KEY_MANAGER).asString();  ModelNode km=getChildResource(kmName,Util.KEY_MANAGER,context);  String ksName=km.get(Util.KEY_STORE).asString();  KeyStore keyStore=new KeyStore(ksName,null,true);  KeyManager keyManager=new KeyManager(kmName,keyStore,true);  KeyManager trustManager=null;  if (sslContext.hasDefined(Util.TRUST_MANAGER)) {    trustManager=new KeyManager(sslContext.get(Util.TRUST_MANAGER).asString(),keyStore,true);  }  ctx=new ServerSSLContext(ksName,keyManager,trustManager,true);} @TO@ ThenBody:{  String kmName=sslContext.get(Util.KEY_MANAGER).asString();  ModelNode km=getChildResource(kmName,Util.KEY_MANAGER,context);  if (km == null) {    throw new IllegalArgumentException("The ServerSSLContext " + sslContextName + " references the KeyManager "+ kmName+ " that doesn't exist.");  }  String ksName=km.get(Util.KEY_STORE).asString();  KeyStore keyStore=new KeyStore(ksName,null,true);  KeyManager keyManager=new KeyManager(kmName,keyStore,true);  KeyManager trustManager=null;  if (sslContext.hasDefined(Util.TRUST_MANAGER)) {    trustManager=new KeyManager(sslContext.get(Util.TRUST_MANAGER).asString(),keyStore,true);  }  ctx=new ServerSSLContext(ksName,keyManager,trustManager,true);} @AT@ 22327 @LENGTH@ 678
------INS IfStatement@@if (km == null) {  throw new IllegalArgumentException("The ServerSSLContext " + sslContextName + " references the KeyManager "+ kmName+ " that doesn't exist.");} @TO@ Block@@ThenBody:{  String kmName=sslContext.get(Util.KEY_MANAGER).asString();  ModelNode km=getChildResource(kmName,Util.KEY_MANAGER,context);  String ksName=km.get(Util.KEY_STORE).asString();  KeyStore keyStore=new KeyStore(ksName,null,true);  KeyManager keyManager=new KeyManager(kmName,keyStore,true);  KeyManager trustManager=null;  if (sslContext.hasDefined(Util.TRUST_MANAGER)) {    trustManager=new KeyManager(sslContext.get(Util.TRUST_MANAGER).asString(),keyStore,true);  }  ctx=new ServerSSLContext(ksName,keyManager,trustManager,true);} @AT@ 22494 @LENGTH@ 191
---------INS InfixExpression@@km == null @TO@ IfStatement@@if (km == null) {  throw new IllegalArgumentException("The ServerSSLContext " + sslContextName + " references the KeyManager "+ kmName+ " that doesn't exist.");} @AT@ 22498 @LENGTH@ 10
------------INS SimpleName@@km @TO@ InfixExpression@@km == null @AT@ 22498 @LENGTH@ 2
------------INS Operator@@== @TO@ InfixExpression@@km == null @AT@ 22500 @LENGTH@ 2
------------INS NullLiteral@@null @TO@ InfixExpression@@km == null @AT@ 22504 @LENGTH@ 4
---------INS Block@@ThenBody:{  throw new IllegalArgumentException("The ServerSSLContext " + sslContextName + " references the KeyManager "+ kmName+ " that doesn't exist.");} @TO@ IfStatement@@if (km == null) {  throw new IllegalArgumentException("The ServerSSLContext " + sslContextName + " references the KeyManager "+ kmName+ " that doesn't exist.");} @AT@ 22510 @LENGTH@ 175
------------INS ThrowStatement@@ClassInstanceCreation:new IllegalArgumentException("The ServerSSLContext " + sslContextName + " references the KeyManager "+ kmName+ " that doesn't exist.") @TO@ Block@@ThenBody:{  throw new IllegalArgumentException("The ServerSSLContext " + sslContextName + " references the KeyManager "+ kmName+ " that doesn't exist.");} @AT@ 22528 @LENGTH@ 143
---------------INS ClassInstanceCreation@@IllegalArgumentException["The ServerSSLContext " + sslContextName + " references the KeyManager "+ kmName+ " that doesn't exist."] @TO@ ThrowStatement@@ClassInstanceCreation:new IllegalArgumentException("The ServerSSLContext " + sslContextName + " references the KeyManager "+ kmName+ " that doesn't exist.") @AT@ 22534 @LENGTH@ 136
------------------INS New@@new @TO@ ClassInstanceCreation@@IllegalArgumentException["The ServerSSLContext " + sslContextName + " references the KeyManager "+ kmName+ " that doesn't exist."] @AT@ 22534 @LENGTH@ 3
------------------INS SimpleType@@IllegalArgumentException @TO@ ClassInstanceCreation@@IllegalArgumentException["The ServerSSLContext " + sslContextName + " references the KeyManager "+ kmName+ " that doesn't exist."] @AT@ 22538 @LENGTH@ 24
------------------INS InfixExpression@@"The ServerSSLContext " + sslContextName + " references the KeyManager "+ kmName+ " that doesn't exist." @TO@ ClassInstanceCreation@@IllegalArgumentException["The ServerSSLContext " + sslContextName + " references the KeyManager "+ kmName+ " that doesn't exist."] @AT@ 22563 @LENGTH@ 106
---------------------INS StringLiteral@@"The ServerSSLContext " @TO@ InfixExpression@@"The ServerSSLContext " + sslContextName + " references the KeyManager "+ kmName+ " that doesn't exist." @AT@ 22563 @LENGTH@ 23
---------------------INS Operator@@+ @TO@ InfixExpression@@"The ServerSSLContext " + sslContextName + " references the KeyManager "+ kmName+ " that doesn't exist." @AT@ 22586 @LENGTH@ 1
---------------------INS SimpleName@@sslContextName @TO@ InfixExpression@@"The ServerSSLContext " + sslContextName + " references the KeyManager "+ kmName+ " that doesn't exist." @AT@ 22589 @LENGTH@ 14
---------------------INS StringLiteral@@" references the KeyManager " @TO@ InfixExpression@@"The ServerSSLContext " + sslContextName + " references the KeyManager "+ kmName+ " that doesn't exist." @AT@ 22606 @LENGTH@ 29
---------------------INS SimpleName@@kmName @TO@ InfixExpression@@"The ServerSSLContext " + sslContextName + " references the KeyManager "+ kmName+ " that doesn't exist." @AT@ 22638 @LENGTH@ 6
---------------------INS StringLiteral@@" that doesn't exist." @TO@ InfixExpression@@"The ServerSSLContext " + sslContextName + " references the KeyManager "+ kmName+ " that doesn't exist." @AT@ 22647 @LENGTH@ 22


INS MethodDeclaration@@private, static, Map<String,Object>, MethodName:unwrapMapValueWrapper, Map<String,Object> properties,  @TO@ TypeDeclaration@@[@API(status=API.Status.INTERNAL,since="6.0"), final]NamedParameters,  @AT@ 2688 @LENGTH@ 448
---INS Modifier@@private @TO@ MethodDeclaration@@private, static, Map<String,Object>, MethodName:unwrapMapValueWrapper, Map<String,Object> properties,  @AT@ 2688 @LENGTH@ 7
---INS Modifier@@static @TO@ MethodDeclaration@@private, static, Map<String,Object>, MethodName:unwrapMapValueWrapper, Map<String,Object> properties,  @AT@ 2696 @LENGTH@ 6
---INS ParameterizedType@@Map<String,Object> @TO@ MethodDeclaration@@private, static, Map<String,Object>, MethodName:unwrapMapValueWrapper, Map<String,Object> properties,  @AT@ 2703 @LENGTH@ 19
------INS SimpleType@@Map @TO@ ParameterizedType@@Map<String,Object> @AT@ 2703 @LENGTH@ 3
------INS SimpleType@@String @TO@ ParameterizedType@@Map<String,Object> @AT@ 2707 @LENGTH@ 6
------INS SimpleType@@Object @TO@ ParameterizedType@@Map<String,Object> @AT@ 2715 @LENGTH@ 6
---INS SimpleName@@MethodName:unwrapMapValueWrapper @TO@ MethodDeclaration@@private, static, Map<String,Object>, MethodName:unwrapMapValueWrapper, Map<String,Object> properties,  @AT@ 2723 @LENGTH@ 21
---INS SingleVariableDeclaration@@Map<String,Object> properties @TO@ MethodDeclaration@@private, static, Map<String,Object>, MethodName:unwrapMapValueWrapper, Map<String,Object> properties,  @AT@ 2745 @LENGTH@ 30
------INS ParameterizedType@@Map<String,Object> @TO@ SingleVariableDeclaration@@Map<String,Object> properties @AT@ 2745 @LENGTH@ 19
---------INS SimpleType@@Map @TO@ ParameterizedType@@Map<String,Object> @AT@ 2745 @LENGTH@ 3
---------INS SimpleType@@String @TO@ ParameterizedType@@Map<String,Object> @AT@ 2749 @LENGTH@ 6
---------INS SimpleType@@Object @TO@ ParameterizedType@@Map<String,Object> @AT@ 2757 @LENGTH@ 6
------INS SimpleName@@properties @TO@ SingleVariableDeclaration@@Map<String,Object> properties @AT@ 2765 @LENGTH@ 10
---INS VariableDeclarationStatement@@Map<String,Object> newProperties=new HashMap<>(properties.size()); @TO@ MethodDeclaration@@private, static, Map<String,Object>, MethodName:unwrapMapValueWrapper, Map<String,Object> properties,  @AT@ 2782 @LENGTH@ 69
------INS ParameterizedType@@Map<String,Object> @TO@ VariableDeclarationStatement@@Map<String,Object> newProperties=new HashMap<>(properties.size()); @AT@ 2782 @LENGTH@ 19
---------INS SimpleType@@Map @TO@ ParameterizedType@@Map<String,Object> @AT@ 2782 @LENGTH@ 3
---------INS SimpleType@@String @TO@ ParameterizedType@@Map<String,Object> @AT@ 2786 @LENGTH@ 6
---------INS SimpleType@@Object @TO@ ParameterizedType@@Map<String,Object> @AT@ 2794 @LENGTH@ 6
------INS VariableDeclarationFragment@@newProperties=new HashMap<>(properties.size()) @TO@ VariableDeclarationStatement@@Map<String,Object> newProperties=new HashMap<>(properties.size()); @AT@ 2802 @LENGTH@ 48
---------INS SimpleName@@newProperties @TO@ VariableDeclarationFragment@@newProperties=new HashMap<>(properties.size()) @AT@ 2802 @LENGTH@ 13
---------INS ClassInstanceCreation@@HashMap<>[properties.size()] @TO@ VariableDeclarationFragment@@newProperties=new HashMap<>(properties.size()) @AT@ 2818 @LENGTH@ 32
------------INS New@@new @TO@ ClassInstanceCreation@@HashMap<>[properties.size()] @AT@ 2818 @LENGTH@ 3
------------INS ParameterizedType@@HashMap<> @TO@ ClassInstanceCreation@@HashMap<>[properties.size()] @AT@ 2822 @LENGTH@ 9
---------------INS SimpleType@@HashMap @TO@ ParameterizedType@@HashMap<> @AT@ 2822 @LENGTH@ 7
------------INS MethodInvocation@@properties.size() @TO@ ClassInstanceCreation@@HashMap<>[properties.size()] @AT@ 2832 @LENGTH@ 17
---------------INS SimpleName@@Name:properties @TO@ MethodInvocation@@properties.size() @AT@ 2832 @LENGTH@ 10
---------------INS SimpleName@@MethodName:size:[] @TO@ MethodInvocation@@properties.size() @AT@ 2843 @LENGTH@ 6
---INS ExpressionStatement@@MethodInvocation:properties.forEach((k,v) -> {
  if (v instanceof MapValueWrapper) {
    Value mapValue=((MapValueWrapper)v).getMapValue();
    mapValue.keys().forEach(k2 -> newProperties.put(k2,mapValue.get(k2)));
  }
 else {
    newProperties.put(k,v);
  }
}
) @TO@ MethodDeclaration@@private, static, Map<String,Object>, MethodName:unwrapMapValueWrapper, Map<String,Object> properties,  @AT@ 2854 @LENGTH@ 255
------INS MethodInvocation@@properties.forEach((k,v) -> {
  if (v instanceof MapValueWrapper) {
    Value mapValue=((MapValueWrapper)v).getMapValue();
    mapValue.keys().forEach(k2 -> newProperties.put(k2,mapValue.get(k2)));
  }
 else {
    newProperties.put(k,v);
  }
}
) @TO@ ExpressionStatement@@MethodInvocation:properties.forEach((k,v) -> {
  if (v instanceof MapValueWrapper) {
    Value mapValue=((MapValueWrapper)v).getMapValue();
    mapValue.keys().forEach(k2 -> newProperties.put(k2,mapValue.get(k2)));
  }
 else {
    newProperties.put(k,v);
  }
}
) @AT@ 2854 @LENGTH@ 254
---------INS SimpleName@@Name:properties @TO@ MethodInvocation@@properties.forEach((k,v) -> {
  if (v instanceof MapValueWrapper) {
    Value mapValue=((MapValueWrapper)v).getMapValue();
    mapValue.keys().forEach(k2 -> newProperties.put(k2,mapValue.get(k2)));
  }
 else {
    newProperties.put(k,v);
  }
}
) @AT@ 2854 @LENGTH@ 10
---------INS SimpleName@@MethodName:forEach:[(k,v) -> {
  if (v instanceof MapValueWrapper) {
    Value mapValue=((MapValueWrapper)v).getMapValue();
    mapValue.keys().forEach(k2 -> newProperties.put(k2,mapValue.get(k2)));
  }
 else {
    newProperties.put(k,v);
  }
}
] @TO@ MethodInvocation@@properties.forEach((k,v) -> {
  if (v instanceof MapValueWrapper) {
    Value mapValue=((MapValueWrapper)v).getMapValue();
    mapValue.keys().forEach(k2 -> newProperties.put(k2,mapValue.get(k2)));
  }
 else {
    newProperties.put(k,v);
  }
}
) @AT@ 2865 @LENGTH@ 243
------------INS LambdaExpression@@(k,v) -> {
  if (v instanceof MapValueWrapper) {
    Value mapValue=((MapValueWrapper)v).getMapValue();
    mapValue.keys().forEach(k2 -> newProperties.put(k2,mapValue.get(k2)));
  }
 else {
    newProperties.put(k,v);
  }
}
 @TO@ SimpleName@@MethodName:forEach:[(k,v) -> {
  if (v instanceof MapValueWrapper) {
    Value mapValue=((MapValueWrapper)v).getMapValue();
    mapValue.keys().forEach(k2 -> newProperties.put(k2,mapValue.get(k2)));
  }
 else {
    newProperties.put(k,v);
  }
}
] @AT@ 2873 @LENGTH@ 234
---------------INS VariableDeclarationFragment@@k @TO@ LambdaExpression@@(k,v) -> {
  if (v instanceof MapValueWrapper) {
    Value mapValue=((MapValueWrapper)v).getMapValue();
    mapValue.keys().forEach(k2 -> newProperties.put(k2,mapValue.get(k2)));
  }
 else {
    newProperties.put(k,v);
  }
}
 @AT@ 2874 @LENGTH@ 1
------------------INS SimpleName@@k @TO@ VariableDeclarationFragment@@k @AT@ 2874 @LENGTH@ 1
---------------INS VariableDeclarationFragment@@v @TO@ LambdaExpression@@(k,v) -> {
  if (v instanceof MapValueWrapper) {
    Value mapValue=((MapValueWrapper)v).getMapValue();
    mapValue.keys().forEach(k2 -> newProperties.put(k2,mapValue.get(k2)));
  }
 else {
    newProperties.put(k,v);
  }
}
 @AT@ 2877 @LENGTH@ 1
------------------INS SimpleName@@v @TO@ VariableDeclarationFragment@@v @AT@ 2877 @LENGTH@ 1
---------------INS IfStatement@@if (v instanceof MapValueWrapper) {  Value mapValue=((MapValueWrapper)v).getMapValue();  mapValue.keys().forEach(k2 -> newProperties.put(k2,mapValue.get(k2)));} else {  newProperties.put(k,v);} @TO@ LambdaExpression@@(k,v) -> {
  if (v instanceof MapValueWrapper) {
    Value mapValue=((MapValueWrapper)v).getMapValue();
    mapValue.keys().forEach(k2 -> newProperties.put(k2,mapValue.get(k2)));
  }
 else {
    newProperties.put(k,v);
  }
}
 @AT@ 2888 @LENGTH@ 215
------------------INS InstanceofExpression@@v instanceof MapValueWrapper @TO@ IfStatement@@if (v instanceof MapValueWrapper) {  Value mapValue=((MapValueWrapper)v).getMapValue();  mapValue.keys().forEach(k2 -> newProperties.put(k2,mapValue.get(k2)));} else {  newProperties.put(k,v);} @AT@ 2892 @LENGTH@ 28
---------------------INS SimpleName@@v @TO@ InstanceofExpression@@v instanceof MapValueWrapper @AT@ 2892 @LENGTH@ 1
---------------------INS Instanceof@@instanceof @TO@ InstanceofExpression@@v instanceof MapValueWrapper @AT@ 2894 @LENGTH@ 10
---------------------INS SimpleType@@MapValueWrapper @TO@ InstanceofExpression@@v instanceof MapValueWrapper @AT@ 2905 @LENGTH@ 15
------------------INS Block@@ThenBody:{  Value mapValue=((MapValueWrapper)v).getMapValue();  mapValue.keys().forEach(k2 -> newProperties.put(k2,mapValue.get(k2)));} @TO@ IfStatement@@if (v instanceof MapValueWrapper) {  Value mapValue=((MapValueWrapper)v).getMapValue();  mapValue.keys().forEach(k2 -> newProperties.put(k2,mapValue.get(k2)));} else {  newProperties.put(k,v);} @AT@ 2922 @LENGTH@ 140
---------------------INS VariableDeclarationStatement@@Value mapValue=((MapValueWrapper)v).getMapValue(); @TO@ Block@@ThenBody:{  Value mapValue=((MapValueWrapper)v).getMapValue();  mapValue.keys().forEach(k2 -> newProperties.put(k2,mapValue.get(k2)));} @AT@ 2928 @LENGTH@ 53
------------------------INS SimpleType@@Value @TO@ VariableDeclarationStatement@@Value mapValue=((MapValueWrapper)v).getMapValue(); @AT@ 2928 @LENGTH@ 5
------------------------INS VariableDeclarationFragment@@mapValue=((MapValueWrapper)v).getMapValue() @TO@ VariableDeclarationStatement@@Value mapValue=((MapValueWrapper)v).getMapValue(); @AT@ 2934 @LENGTH@ 46
---------------------------INS SimpleName@@mapValue @TO@ VariableDeclarationFragment@@mapValue=((MapValueWrapper)v).getMapValue() @AT@ 2934 @LENGTH@ 8
---------------------------INS MethodInvocation@@((MapValueWrapper)v).getMapValue() @TO@ VariableDeclarationFragment@@mapValue=((MapValueWrapper)v).getMapValue() @AT@ 2945 @LENGTH@ 35
------------------------------INS ParenthesizedExpression@@((MapValueWrapper)v) @TO@ MethodInvocation@@((MapValueWrapper)v).getMapValue() @AT@ 2945 @LENGTH@ 21
---------------------------------INS CastExpression@@(MapValueWrapper)v @TO@ ParenthesizedExpression@@((MapValueWrapper)v) @AT@ 2946 @LENGTH@ 19
------------------------------------INS SimpleType@@MapValueWrapper @TO@ CastExpression@@(MapValueWrapper)v @AT@ 2947 @LENGTH@ 15
------------------------------------INS SimpleName@@v @TO@ CastExpression@@(MapValueWrapper)v @AT@ 2964 @LENGTH@ 1
------------------------------INS SimpleName@@MethodName:getMapValue:[] @TO@ MethodInvocation@@((MapValueWrapper)v).getMapValue() @AT@ 2967 @LENGTH@ 13
---------------------INS ExpressionStatement@@MethodInvocation:mapValue.keys().forEach(k2 -> newProperties.put(k2,mapValue.get(k2))) @TO@ Block@@ThenBody:{  Value mapValue=((MapValueWrapper)v).getMapValue();  mapValue.keys().forEach(k2 -> newProperties.put(k2,mapValue.get(k2)));} @AT@ 2986 @LENGTH@ 71
------------------------INS MethodInvocation@@mapValue.keys().forEach(k2 -> newProperties.put(k2,mapValue.get(k2))) @TO@ ExpressionStatement@@MethodInvocation:mapValue.keys().forEach(k2 -> newProperties.put(k2,mapValue.get(k2))) @AT@ 2986 @LENGTH@ 70
---------------------------INS MethodInvocation@@MethodName:keys:[] @TO@ MethodInvocation@@mapValue.keys().forEach(k2 -> newProperties.put(k2,mapValue.get(k2))) @AT@ 2986 @LENGTH@ 15
---------------------------INS SimpleName@@Name:mapValue @TO@ MethodInvocation@@mapValue.keys().forEach(k2 -> newProperties.put(k2,mapValue.get(k2))) @AT@ 2986 @LENGTH@ 8
---------------------------INS SimpleName@@MethodName:forEach:[k2 -> newProperties.put(k2,mapValue.get(k2))] @TO@ MethodInvocation@@mapValue.keys().forEach(k2 -> newProperties.put(k2,mapValue.get(k2))) @AT@ 3002 @LENGTH@ 54
------------------------------INS LambdaExpression@@k2 -> newProperties.put(k2,mapValue.get(k2)) @TO@ SimpleName@@MethodName:forEach:[k2 -> newProperties.put(k2,mapValue.get(k2))] @AT@ 3010 @LENGTH@ 45
---------------------------------INS VariableDeclarationFragment@@k2 @TO@ LambdaExpression@@k2 -> newProperties.put(k2,mapValue.get(k2)) @AT@ 3010 @LENGTH@ 2
------------------------------------INS SimpleName@@k2 @TO@ VariableDeclarationFragment@@k2 @AT@ 3010 @LENGTH@ 2
---------------------------------INS MethodInvocation@@newProperties.put(k2,mapValue.get(k2)) @TO@ LambdaExpression@@k2 -> newProperties.put(k2,mapValue.get(k2)) @AT@ 3016 @LENGTH@ 39
------------------------------------INS SimpleName@@Name:newProperties @TO@ MethodInvocation@@newProperties.put(k2,mapValue.get(k2)) @AT@ 3016 @LENGTH@ 13
------------------------------------INS SimpleName@@MethodName:put:[k2, mapValue.get(k2)] @TO@ MethodInvocation@@newProperties.put(k2,mapValue.get(k2)) @AT@ 3030 @LENGTH@ 25
---------------------------------------INS SimpleName@@k2 @TO@ SimpleName@@MethodName:put:[k2, mapValue.get(k2)] @AT@ 3034 @LENGTH@ 2
---------------------------------------INS MethodInvocation@@mapValue.get(k2) @TO@ SimpleName@@MethodName:put:[k2, mapValue.get(k2)] @AT@ 3038 @LENGTH@ 16
------------------------------------------INS SimpleName@@Name:mapValue @TO@ MethodInvocation@@mapValue.get(k2) @AT@ 3038 @LENGTH@ 8
------------------------------------------INS SimpleName@@MethodName:get:[k2] @TO@ MethodInvocation@@mapValue.get(k2) @AT@ 3047 @LENGTH@ 7
---------------------------------------------INS SimpleName@@k2 @TO@ SimpleName@@MethodName:get:[k2] @AT@ 3051 @LENGTH@ 2
------------------INS Block@@ElseBody:{  newProperties.put(k,v);} @TO@ IfStatement@@if (v instanceof MapValueWrapper) {  Value mapValue=((MapValueWrapper)v).getMapValue();  mapValue.keys().forEach(k2 -> newProperties.put(k2,mapValue.get(k2)));} else {  newProperties.put(k,v);} @AT@ 3068 @LENGTH@ 35
---------------------INS ExpressionStatement@@MethodInvocation:newProperties.put(k,v) @TO@ Block@@ElseBody:{  newProperties.put(k,v);} @AT@ 3074 @LENGTH@ 24
------------------------INS MethodInvocation@@newProperties.put(k,v) @TO@ ExpressionStatement@@MethodInvocation:newProperties.put(k,v) @AT@ 3074 @LENGTH@ 23
---------------------------INS SimpleName@@Name:newProperties @TO@ MethodInvocation@@newProperties.put(k,v) @AT@ 3074 @LENGTH@ 13
---------------------------INS SimpleName@@MethodName:put:[k, v] @TO@ MethodInvocation@@newProperties.put(k,v) @AT@ 3088 @LENGTH@ 9
------------------------------INS SimpleName@@k @TO@ SimpleName@@MethodName:put:[k, v] @AT@ 3092 @LENGTH@ 1
------------------------------INS SimpleName@@v @TO@ SimpleName@@MethodName:put:[k, v] @AT@ 3095 @LENGTH@ 1
---INS ReturnStatement@@SimpleName:newProperties @TO@ MethodDeclaration@@private, static, Map<String,Object>, MethodName:unwrapMapValueWrapper, Map<String,Object> properties,  @AT@ 3112 @LENGTH@ 21
------INS SimpleName@@newProperties @TO@ ReturnStatement@@SimpleName:newProperties @AT@ 3119 @LENGTH@ 13


UPD VariableDeclarationStatement@@Map<String,Object> headers=exchange.getOut().getHeaders(); @TO@ Map<String,Object> headers=exchange.getMessage().getHeaders(); @AT@ 5507 @LENGTH@ 61
---UPD VariableDeclarationFragment@@headers=exchange.getOut().getHeaders() @TO@ headers=exchange.getMessage().getHeaders() @AT@ 5527 @LENGTH@ 40
------UPD MethodInvocation@@exchange.getOut().getHeaders() @TO@ exchange.getMessage().getHeaders() @AT@ 5537 @LENGTH@ 30
---------UPD MethodInvocation@@MethodName:getOut:[] @TO@ MethodName:getMessage:[] @AT@ 5537 @LENGTH@ 17


UPD Block@@ThenBody:{  Message reply=callable.call();  exchange.getOut().getHeaders().putAll(camelMessage.getHeaders());  exchange.getOut().setBody(reply);} @TO@ ThenBody:{  Message reply=callable.call();  exchange.getMessage().getHeaders().putAll(camelMessage.getHeaders());  exchange.getMessage().setBody(reply);} @AT@ 3273 @LENGTH@ 180
---UPD ExpressionStatement@@MethodInvocation:exchange.getOut().getHeaders().putAll(camelMessage.getHeaders()) @TO@ MethodInvocation:exchange.getMessage().getHeaders().putAll(camelMessage.getHeaders()) @AT@ 3332 @LENGTH@ 65
------UPD MethodInvocation@@exchange.getOut().getHeaders().putAll(camelMessage.getHeaders()) @TO@ exchange.getMessage().getHeaders().putAll(camelMessage.getHeaders()) @AT@ 3332 @LENGTH@ 64
---------UPD MethodInvocation@@MethodName:getOut:[] @TO@ MethodName:getMessage:[] @AT@ 3332 @LENGTH@ 17
---UPD ExpressionStatement@@MethodInvocation:exchange.getOut().setBody(reply) @TO@ MethodInvocation:exchange.getMessage().setBody(reply) @AT@ 3410 @LENGTH@ 33
------UPD MethodInvocation@@exchange.getOut().setBody(reply) @TO@ exchange.getMessage().setBody(reply) @AT@ 3410 @LENGTH@ 32
---------UPD MethodInvocation@@MethodName:getOut:[] @TO@ MethodName:getMessage:[] @AT@ 3410 @LENGTH@ 17


UPD IfStatement@@if (!DownloaderHelper.alreadyOnClasspath(getCamelContext(),gav.getArtifactId())) {  DownloaderHelper.downloadDependency(getCamelContext(),gav.getGroupId(),gav.getArtifactId(),gav.getVersion());} @TO@ if (!DownloaderHelper.alreadyOnClasspath(getCamelContext(),gav.getArtifactId(),gav.getVersion())) {  DownloaderHelper.downloadDependency(getCamelContext(),gav.getGroupId(),gav.getArtifactId(),gav.getVersion());} @AT@ 1908 @LENGTH@ 262
---UPD PrefixExpression@@!DownloaderHelper.alreadyOnClasspath(getCamelContext(),gav.getArtifactId()) @TO@ !DownloaderHelper.alreadyOnClasspath(getCamelContext(),gav.getArtifactId(),gav.getVersion()) @AT@ 1912 @LENGTH@ 76
------UPD MethodInvocation@@DownloaderHelper.alreadyOnClasspath(getCamelContext(),gav.getArtifactId()) @TO@ DownloaderHelper.alreadyOnClasspath(getCamelContext(),gav.getArtifactId(),gav.getVersion()) @AT@ 1913 @LENGTH@ 75
---------UPD SimpleName@@MethodName:alreadyOnClasspath:[getCamelContext(), gav.getArtifactId()] @TO@ MethodName:alreadyOnClasspath:[getCamelContext(), gav.getArtifactId(), gav.getVersion()] @AT@ 1930 @LENGTH@ 58
------------INS MethodInvocation@@gav.getVersion() @TO@ SimpleName@@MethodName:alreadyOnClasspath:[getCamelContext(), gav.getArtifactId()] @AT@ 1989 @LENGTH@ 16
---------------INS SimpleName@@Name:gav @TO@ MethodInvocation@@gav.getVersion() @AT@ 1989 @LENGTH@ 3
---------------INS SimpleName@@MethodName:getVersion:[] @TO@ MethodInvocation@@gav.getVersion() @AT@ 1993 @LENGTH@ 12


UPD VariableDeclarationStatement@@final OrcRecordUpdater.KeyIndexBuilder watcher=new OrcRecordUpdater.KeyIndexBuilder("compactor"); @TO@ final OrcRecordUpdater.KeyIndexBuilder watcher=new OrcRecordUpdater.KeyIndexBuilder(); @AT@ 10970 @LENGTH@ 107
---UPD VariableDeclarationFragment@@watcher=new OrcRecordUpdater.KeyIndexBuilder("compactor") @TO@ watcher=new OrcRecordUpdater.KeyIndexBuilder() @AT@ 11009 @LENGTH@ 67
------UPD ClassInstanceCreation@@OrcRecordUpdater.KeyIndexBuilder["compactor"] @TO@ OrcRecordUpdater.KeyIndexBuilder[] @AT@ 11027 @LENGTH@ 49
---------DEL StringLiteral@@"compactor" @AT@ 11064 @LENGTH@ 11


UPD ExpressionStatement@@MethodInvocation:builder.setContext(loader.getCamelContext()) @TO@ MethodInvocation:builder.setCamelContext(loader.getCamelContext()) @AT@ 5749 @LENGTH@ 45
---UPD MethodInvocation@@builder.setContext(loader.getCamelContext()) @TO@ builder.setCamelContext(loader.getCamelContext()) @AT@ 5749 @LENGTH@ 44
------UPD SimpleName@@MethodName:setContext:[loader.getCamelContext()] @TO@ MethodName:setCamelContext:[loader.getCamelContext()] @AT@ 5757 @LENGTH@ 36


UPD VariableDeclarationStatement@@final Integer[] k=new Integer[]{0,1,2,3,4,5,6}; @TO@ final Integer[] k={0,1,2,3,4,5,6}; @AT@ 2056 @LENGTH@ 58
---UPD VariableDeclarationFragment@@k=new Integer[]{0,1,2,3,4,5,6} @TO@ k={0,1,2,3,4,5,6} @AT@ 2072 @LENGTH@ 41
------DEL ArrayCreation@@new Integer[]{0,1,2,3,4,5,6} @AT@ 2076 @LENGTH@ 37
---------DEL ArrayType@@Integer[] @AT@ 2080 @LENGTH@ 9
------------DEL SimpleType@@Integer @AT@ 2080 @LENGTH@ 7
---------DEL ArrayInitializer@@{0,1,2,3,4,5,6} @AT@ 2090 @LENGTH@ 23
------INS ArrayInitializer@@{0,1,2,3,4,5,6} @TO@ VariableDeclarationFragment@@k=new Integer[]{0,1,2,3,4,5,6} @AT@ 2076 @LENGTH@ 23
---------MOV NumberLiteral@@0 @TO@ ArrayInitializer@@{0,1,2,3,4,5,6} @AT@ 2092 @LENGTH@ 1
---------MOV NumberLiteral@@1 @TO@ ArrayInitializer@@{0,1,2,3,4,5,6} @AT@ 2095 @LENGTH@ 1
---------MOV NumberLiteral@@2 @TO@ ArrayInitializer@@{0,1,2,3,4,5,6} @AT@ 2098 @LENGTH@ 1
---------MOV NumberLiteral@@3 @TO@ ArrayInitializer@@{0,1,2,3,4,5,6} @AT@ 2101 @LENGTH@ 1
---------MOV NumberLiteral@@4 @TO@ ArrayInitializer@@{0,1,2,3,4,5,6} @AT@ 2104 @LENGTH@ 1
---------MOV NumberLiteral@@5 @TO@ ArrayInitializer@@{0,1,2,3,4,5,6} @AT@ 2107 @LENGTH@ 1
---------MOV NumberLiteral@@6 @TO@ ArrayInitializer@@{0,1,2,3,4,5,6} @AT@ 2110 @LENGTH@ 1


INS MethodDeclaration@@void, MethodName:monitorTaskThreadName,  @TO@ TypeDeclaration@@[public]DirectMessageListenerContainerMockTests,  @AT@ 14410 @LENGTH@ 869
---INS PrimitiveType@@void @TO@ MethodDeclaration@@void, MethodName:monitorTaskThreadName,  @AT@ 14405 @LENGTH@ 4
---INS SimpleName@@MethodName:monitorTaskThreadName @TO@ MethodDeclaration@@void, MethodName:monitorTaskThreadName,  @AT@ 14410 @LENGTH@ 21
---INS VariableDeclarationStatement@@DirectMessageListenerContainer container=new DirectMessageListenerContainer(mock(ConnectionFactory.class)); @TO@ MethodDeclaration@@void, MethodName:monitorTaskThreadName,  @AT@ 14438 @LENGTH@ 109
------INS SimpleType@@DirectMessageListenerContainer @TO@ VariableDeclarationStatement@@DirectMessageListenerContainer container=new DirectMessageListenerContainer(mock(ConnectionFactory.class)); @AT@ 14438 @LENGTH@ 30
------INS VariableDeclarationFragment@@container=new DirectMessageListenerContainer(mock(ConnectionFactory.class)) @TO@ VariableDeclarationStatement@@DirectMessageListenerContainer container=new DirectMessageListenerContainer(mock(ConnectionFactory.class)); @AT@ 14469 @LENGTH@ 77
---------INS SimpleName@@container @TO@ VariableDeclarationFragment@@container=new DirectMessageListenerContainer(mock(ConnectionFactory.class)) @AT@ 14469 @LENGTH@ 9
---------INS ClassInstanceCreation@@DirectMessageListenerContainer[mock(ConnectionFactory.class)] @TO@ VariableDeclarationFragment@@container=new DirectMessageListenerContainer(mock(ConnectionFactory.class)) @AT@ 14481 @LENGTH@ 65
------------INS New@@new @TO@ ClassInstanceCreation@@DirectMessageListenerContainer[mock(ConnectionFactory.class)] @AT@ 14481 @LENGTH@ 3
------------INS SimpleType@@DirectMessageListenerContainer @TO@ ClassInstanceCreation@@DirectMessageListenerContainer[mock(ConnectionFactory.class)] @AT@ 14485 @LENGTH@ 30
------------INS MethodInvocation@@mock(ConnectionFactory.class) @TO@ ClassInstanceCreation@@DirectMessageListenerContainer[mock(ConnectionFactory.class)] @AT@ 14516 @LENGTH@ 29
---------------INS SimpleName@@MethodName:mock:[ConnectionFactory.class] @TO@ MethodInvocation@@mock(ConnectionFactory.class) @AT@ 14516 @LENGTH@ 29
------------------INS TypeLiteral@@ConnectionFactory.class @TO@ SimpleName@@MethodName:mock:[ConnectionFactory.class] @AT@ 14521 @LENGTH@ 23
---INS ExpressionStatement@@MethodInvocation:assertThat(container.getListenerId()).isEqualTo("not.a.Spring.bean") @TO@ MethodDeclaration@@void, MethodName:monitorTaskThreadName,  @AT@ 14550 @LENGTH@ 69
------INS MethodInvocation@@assertThat(container.getListenerId()).isEqualTo("not.a.Spring.bean") @TO@ ExpressionStatement@@MethodInvocation:assertThat(container.getListenerId()).isEqualTo("not.a.Spring.bean") @AT@ 14550 @LENGTH@ 68
---------INS MethodInvocation@@MethodName:assertThat:[container.getListenerId()] @TO@ MethodInvocation@@assertThat(container.getListenerId()).isEqualTo("not.a.Spring.bean") @AT@ 14550 @LENGTH@ 37
------------INS MethodInvocation@@container.getListenerId() @TO@ MethodInvocation@@MethodName:assertThat:[container.getListenerId()] @AT@ 14561 @LENGTH@ 25
---------------INS SimpleName@@Name:container @TO@ MethodInvocation@@container.getListenerId() @AT@ 14561 @LENGTH@ 9
---------------INS SimpleName@@MethodName:getListenerId:[] @TO@ MethodInvocation@@container.getListenerId() @AT@ 14571 @LENGTH@ 15
---------INS SimpleName@@MethodName:isEqualTo:["not.a.Spring.bean"] @TO@ MethodInvocation@@assertThat(container.getListenerId()).isEqualTo("not.a.Spring.bean") @AT@ 14588 @LENGTH@ 30
------------INS StringLiteral@@"not.a.Spring.bean" @TO@ SimpleName@@MethodName:isEqualTo:["not.a.Spring.bean"] @AT@ 14598 @LENGTH@ 19
---INS ExpressionStatement@@MethodInvocation:container.setBeanName("aBean") @TO@ MethodDeclaration@@void, MethodName:monitorTaskThreadName,  @AT@ 14622 @LENGTH@ 31
------INS MethodInvocation@@container.setBeanName("aBean") @TO@ ExpressionStatement@@MethodInvocation:container.setBeanName("aBean") @AT@ 14622 @LENGTH@ 30
---------INS SimpleName@@Name:container @TO@ MethodInvocation@@container.setBeanName("aBean") @AT@ 14622 @LENGTH@ 9
---------INS SimpleName@@MethodName:setBeanName:["aBean"] @TO@ MethodInvocation@@container.setBeanName("aBean") @AT@ 14632 @LENGTH@ 20
------------INS StringLiteral@@"aBean" @TO@ SimpleName@@MethodName:setBeanName:["aBean"] @AT@ 14644 @LENGTH@ 7
---INS ExpressionStatement@@MethodInvocation:assertThat(container.getListenerId()).isEqualTo("aBean") @TO@ MethodDeclaration@@void, MethodName:monitorTaskThreadName,  @AT@ 14656 @LENGTH@ 57
------INS MethodInvocation@@assertThat(container.getListenerId()).isEqualTo("aBean") @TO@ ExpressionStatement@@MethodInvocation:assertThat(container.getListenerId()).isEqualTo("aBean") @AT@ 14656 @LENGTH@ 56
---------INS MethodInvocation@@MethodName:assertThat:[container.getListenerId()] @TO@ MethodInvocation@@assertThat(container.getListenerId()).isEqualTo("aBean") @AT@ 14656 @LENGTH@ 37
------------INS MethodInvocation@@container.getListenerId() @TO@ MethodInvocation@@MethodName:assertThat:[container.getListenerId()] @AT@ 14667 @LENGTH@ 25
---------------INS SimpleName@@Name:container @TO@ MethodInvocation@@container.getListenerId() @AT@ 14667 @LENGTH@ 9
---------------INS SimpleName@@MethodName:getListenerId:[] @TO@ MethodInvocation@@container.getListenerId() @AT@ 14677 @LENGTH@ 15
---------INS SimpleName@@MethodName:isEqualTo:["aBean"] @TO@ MethodInvocation@@assertThat(container.getListenerId()).isEqualTo("aBean") @AT@ 14694 @LENGTH@ 18
------------INS StringLiteral@@"aBean" @TO@ SimpleName@@MethodName:isEqualTo:["aBean"] @AT@ 14704 @LENGTH@ 7
---INS ExpressionStatement@@MethodInvocation:container.setListenerId("id") @TO@ MethodDeclaration@@void, MethodName:monitorTaskThreadName,  @AT@ 14716 @LENGTH@ 30
------INS MethodInvocation@@container.setListenerId("id") @TO@ ExpressionStatement@@MethodInvocation:container.setListenerId("id") @AT@ 14716 @LENGTH@ 29
---------INS SimpleName@@Name:container @TO@ MethodInvocation@@container.setListenerId("id") @AT@ 14716 @LENGTH@ 9
---------INS SimpleName@@MethodName:setListenerId:["id"] @TO@ MethodInvocation@@container.setListenerId("id") @AT@ 14726 @LENGTH@ 19
------------INS StringLiteral@@"id" @TO@ SimpleName@@MethodName:setListenerId:["id"] @AT@ 14740 @LENGTH@ 4
---INS ExpressionStatement@@MethodInvocation:assertThat(container.getListenerId()).isEqualTo("id") @TO@ MethodDeclaration@@void, MethodName:monitorTaskThreadName,  @AT@ 14749 @LENGTH@ 54
------INS MethodInvocation@@assertThat(container.getListenerId()).isEqualTo("id") @TO@ ExpressionStatement@@MethodInvocation:assertThat(container.getListenerId()).isEqualTo("id") @AT@ 14749 @LENGTH@ 53
---------INS MethodInvocation@@MethodName:assertThat:[container.getListenerId()] @TO@ MethodInvocation@@assertThat(container.getListenerId()).isEqualTo("id") @AT@ 14749 @LENGTH@ 37
------------INS MethodInvocation@@container.getListenerId() @TO@ MethodInvocation@@MethodName:assertThat:[container.getListenerId()] @AT@ 14760 @LENGTH@ 25
---------------INS SimpleName@@Name:container @TO@ MethodInvocation@@container.getListenerId() @AT@ 14760 @LENGTH@ 9
---------------INS SimpleName@@MethodName:getListenerId:[] @TO@ MethodInvocation@@container.getListenerId() @AT@ 14770 @LENGTH@ 15
---------INS SimpleName@@MethodName:isEqualTo:["id"] @TO@ MethodInvocation@@assertThat(container.getListenerId()).isEqualTo("id") @AT@ 14787 @LENGTH@ 15
------------INS StringLiteral@@"id" @TO@ SimpleName@@MethodName:isEqualTo:["id"] @AT@ 14797 @LENGTH@ 4
---INS ExpressionStatement@@MethodInvocation:container.afterPropertiesSet() @TO@ MethodDeclaration@@void, MethodName:monitorTaskThreadName,  @AT@ 14806 @LENGTH@ 31
------INS MethodInvocation@@container.afterPropertiesSet() @TO@ ExpressionStatement@@MethodInvocation:container.afterPropertiesSet() @AT@ 14806 @LENGTH@ 30
---------INS SimpleName@@Name:container @TO@ MethodInvocation@@container.afterPropertiesSet() @AT@ 14806 @LENGTH@ 9
---------INS SimpleName@@MethodName:afterPropertiesSet:[] @TO@ MethodInvocation@@container.afterPropertiesSet() @AT@ 14816 @LENGTH@ 20
---INS ExpressionStatement@@MethodInvocation:assertThat(container).extracting("taskScheduler").extracting("threadNamePrefix").asString().startsWith("id-consumerMonitor") @TO@ MethodDeclaration@@void, MethodName:monitorTaskThreadName,  @AT@ 14840 @LENGTH@ 140
------INS MethodInvocation@@assertThat(container).extracting("taskScheduler").extracting("threadNamePrefix").asString().startsWith("id-consumerMonitor") @TO@ ExpressionStatement@@MethodInvocation:assertThat(container).extracting("taskScheduler").extracting("threadNamePrefix").asString().startsWith("id-consumerMonitor") @AT@ 14840 @LENGTH@ 139
---------INS MethodInvocation@@MethodName:asString:[] @TO@ MethodInvocation@@assertThat(container).extracting("taskScheduler").extracting("threadNamePrefix").asString().startsWith("id-consumerMonitor") @AT@ 14840 @LENGTH@ 101
---------INS MethodInvocation@@MethodName:extracting:["threadNamePrefix"] @TO@ MethodInvocation@@assertThat(container).extracting("taskScheduler").extracting("threadNamePrefix").asString().startsWith("id-consumerMonitor") @AT@ 14840 @LENGTH@ 85
------------INS StringLiteral@@"threadNamePrefix" @TO@ MethodInvocation@@MethodName:extracting:["threadNamePrefix"] @AT@ 14906 @LENGTH@ 18
---------INS MethodInvocation@@MethodName:extracting:["taskScheduler"] @TO@ MethodInvocation@@assertThat(container).extracting("taskScheduler").extracting("threadNamePrefix").asString().startsWith("id-consumerMonitor") @AT@ 14840 @LENGTH@ 49
------------INS StringLiteral@@"taskScheduler" @TO@ MethodInvocation@@MethodName:extracting:["taskScheduler"] @AT@ 14873 @LENGTH@ 15
---------INS MethodInvocation@@MethodName:assertThat:[container] @TO@ MethodInvocation@@assertThat(container).extracting("taskScheduler").extracting("threadNamePrefix").asString().startsWith("id-consumerMonitor") @AT@ 14840 @LENGTH@ 21
------------INS SimpleName@@container @TO@ MethodInvocation@@MethodName:assertThat:[container] @AT@ 14851 @LENGTH@ 9
---------INS SimpleName@@MethodName:startsWith:["id-consumerMonitor"] @TO@ MethodInvocation@@assertThat(container).extracting("taskScheduler").extracting("threadNamePrefix").asString().startsWith("id-consumerMonitor") @AT@ 14947 @LENGTH@ 32
------------INS StringLiteral@@"id-consumerMonitor" @TO@ SimpleName@@MethodName:startsWith:["id-consumerMonitor"] @AT@ 14958 @LENGTH@ 20
---INS ExpressionStatement@@Assignment:container=new DirectMessageListenerContainer(mock(ConnectionFactory.class)) @TO@ MethodDeclaration@@void, MethodName:monitorTaskThreadName,  @AT@ 14984 @LENGTH@ 78
------INS Assignment@@container=new DirectMessageListenerContainer(mock(ConnectionFactory.class)) @TO@ ExpressionStatement@@Assignment:container=new DirectMessageListenerContainer(mock(ConnectionFactory.class)) @AT@ 14984 @LENGTH@ 77
---------INS SimpleName@@container @TO@ Assignment@@container=new DirectMessageListenerContainer(mock(ConnectionFactory.class)) @AT@ 14984 @LENGTH@ 9
---------INS Operator@@= @TO@ Assignment@@container=new DirectMessageListenerContainer(mock(ConnectionFactory.class)) @AT@ 14993 @LENGTH@ 1
---------INS ClassInstanceCreation@@DirectMessageListenerContainer[mock(ConnectionFactory.class)] @TO@ Assignment@@container=new DirectMessageListenerContainer(mock(ConnectionFactory.class)) @AT@ 14996 @LENGTH@ 65
------------INS New@@new @TO@ ClassInstanceCreation@@DirectMessageListenerContainer[mock(ConnectionFactory.class)] @AT@ 14996 @LENGTH@ 3
------------INS SimpleType@@DirectMessageListenerContainer @TO@ ClassInstanceCreation@@DirectMessageListenerContainer[mock(ConnectionFactory.class)] @AT@ 15000 @LENGTH@ 30
------------INS MethodInvocation@@mock(ConnectionFactory.class) @TO@ ClassInstanceCreation@@DirectMessageListenerContainer[mock(ConnectionFactory.class)] @AT@ 15031 @LENGTH@ 29
---------------INS SimpleName@@MethodName:mock:[ConnectionFactory.class] @TO@ MethodInvocation@@mock(ConnectionFactory.class) @AT@ 15031 @LENGTH@ 29
------------------INS TypeLiteral@@ConnectionFactory.class @TO@ SimpleName@@MethodName:mock:[ConnectionFactory.class] @AT@ 15036 @LENGTH@ 23
---INS ExpressionStatement@@MethodInvocation:container.setBeanName("aBean") @TO@ MethodDeclaration@@void, MethodName:monitorTaskThreadName,  @AT@ 15065 @LENGTH@ 31
------INS MethodInvocation@@container.setBeanName("aBean") @TO@ ExpressionStatement@@MethodInvocation:container.setBeanName("aBean") @AT@ 15065 @LENGTH@ 30
---------INS SimpleName@@Name:container @TO@ MethodInvocation@@container.setBeanName("aBean") @AT@ 15065 @LENGTH@ 9
---------INS SimpleName@@MethodName:setBeanName:["aBean"] @TO@ MethodInvocation@@container.setBeanName("aBean") @AT@ 15075 @LENGTH@ 20
------------INS StringLiteral@@"aBean" @TO@ SimpleName@@MethodName:setBeanName:["aBean"] @AT@ 15087 @LENGTH@ 7
---INS ExpressionStatement@@MethodInvocation:container.afterPropertiesSet() @TO@ MethodDeclaration@@void, MethodName:monitorTaskThreadName,  @AT@ 15099 @LENGTH@ 31
------INS MethodInvocation@@container.afterPropertiesSet() @TO@ ExpressionStatement@@MethodInvocation:container.afterPropertiesSet() @AT@ 15099 @LENGTH@ 30
---------INS SimpleName@@Name:container @TO@ MethodInvocation@@container.afterPropertiesSet() @AT@ 15099 @LENGTH@ 9
---------INS SimpleName@@MethodName:afterPropertiesSet:[] @TO@ MethodInvocation@@container.afterPropertiesSet() @AT@ 15109 @LENGTH@ 20
---INS ExpressionStatement@@MethodInvocation:assertThat(container).extracting("taskScheduler").extracting("threadNamePrefix").asString().startsWith("aBean-consumerMonitor") @TO@ MethodDeclaration@@void, MethodName:monitorTaskThreadName,  @AT@ 15133 @LENGTH@ 143
------INS MethodInvocation@@assertThat(container).extracting("taskScheduler").extracting("threadNamePrefix").asString().startsWith("aBean-consumerMonitor") @TO@ ExpressionStatement@@MethodInvocation:assertThat(container).extracting("taskScheduler").extracting("threadNamePrefix").asString().startsWith("aBean-consumerMonitor") @AT@ 15133 @LENGTH@ 142
---------INS MethodInvocation@@MethodName:asString:[] @TO@ MethodInvocation@@assertThat(container).extracting("taskScheduler").extracting("threadNamePrefix").asString().startsWith("aBean-consumerMonitor") @AT@ 15133 @LENGTH@ 101
---------INS MethodInvocation@@MethodName:extracting:["threadNamePrefix"] @TO@ MethodInvocation@@assertThat(container).extracting("taskScheduler").extracting("threadNamePrefix").asString().startsWith("aBean-consumerMonitor") @AT@ 15133 @LENGTH@ 85
------------INS StringLiteral@@"threadNamePrefix" @TO@ MethodInvocation@@MethodName:extracting:["threadNamePrefix"] @AT@ 15199 @LENGTH@ 18
---------INS MethodInvocation@@MethodName:extracting:["taskScheduler"] @TO@ MethodInvocation@@assertThat(container).extracting("taskScheduler").extracting("threadNamePrefix").asString().startsWith("aBean-consumerMonitor") @AT@ 15133 @LENGTH@ 49
------------INS StringLiteral@@"taskScheduler" @TO@ MethodInvocation@@MethodName:extracting:["taskScheduler"] @AT@ 15166 @LENGTH@ 15
---------INS MethodInvocation@@MethodName:assertThat:[container] @TO@ MethodInvocation@@assertThat(container).extracting("taskScheduler").extracting("threadNamePrefix").asString().startsWith("aBean-consumerMonitor") @AT@ 15133 @LENGTH@ 21
------------INS SimpleName@@container @TO@ MethodInvocation@@MethodName:assertThat:[container] @AT@ 15144 @LENGTH@ 9
---------INS SimpleName@@MethodName:startsWith:["aBean-consumerMonitor"] @TO@ MethodInvocation@@assertThat(container).extracting("taskScheduler").extracting("threadNamePrefix").asString().startsWith("aBean-consumerMonitor") @AT@ 15240 @LENGTH@ 35
------------INS StringLiteral@@"aBean-consumerMonitor" @TO@ SimpleName@@MethodName:startsWith:["aBean-consumerMonitor"] @AT@ 15251 @LENGTH@ 23


UPD ExpressionStatement@@MethodInvocation:assertThrows(IllegalArgumentException.class,() -> {
  Sqs2Endpoint endpoint=(Sqs2Endpoint)component.createEndpoint("aws2-sqs://MyQueue");
  endpoint.start();
}
) @TO@ MethodInvocation:assertThrows(IllegalArgumentException.class,() -> {
  Sqs2Endpoint endpoint=(Sqs2Endpoint)component.createEndpoint("aws2-sqs://MyQueue");
}
) @AT@ 1887 @LENGTH@ 193
---UPD MethodInvocation@@assertThrows(IllegalArgumentException.class,() -> {
  Sqs2Endpoint endpoint=(Sqs2Endpoint)component.createEndpoint("aws2-sqs://MyQueue");
  endpoint.start();
}
) @TO@ assertThrows(IllegalArgumentException.class,() -> {
  Sqs2Endpoint endpoint=(Sqs2Endpoint)component.createEndpoint("aws2-sqs://MyQueue");
}
) @AT@ 1887 @LENGTH@ 192
------UPD SimpleName@@MethodName:assertThrows:[IllegalArgumentException.class, () -> {
  Sqs2Endpoint endpoint=(Sqs2Endpoint)component.createEndpoint("aws2-sqs://MyQueue");
  endpoint.start();
}
] @TO@ MethodName:assertThrows:[IllegalArgumentException.class, () -> {
  Sqs2Endpoint endpoint=(Sqs2Endpoint)component.createEndpoint("aws2-sqs://MyQueue");
}
] @AT@ 1887 @LENGTH@ 192
---------UPD LambdaExpression@@() -> {
  Sqs2Endpoint endpoint=(Sqs2Endpoint)component.createEndpoint("aws2-sqs://MyQueue");
  endpoint.start();
}
 @TO@ () -> {
  Sqs2Endpoint endpoint=(Sqs2Endpoint)component.createEndpoint("aws2-sqs://MyQueue");
}
 @AT@ 1932 @LENGTH@ 146
------------DEL ExpressionStatement@@MethodInvocation:endpoint.start() @AT@ 2051 @LENGTH@ 17
---------------DEL MethodInvocation@@endpoint.start() @AT@ 2051 @LENGTH@ 16
------------------DEL SimpleName@@Name:endpoint @AT@ 2051 @LENGTH@ 8
------------------DEL SimpleName@@MethodName:start:[] @AT@ 2060 @LENGTH@ 7


INS MethodDeclaration@@public, void, MethodName:receiveDefaultDestinationOverride,  @TO@ TypeDeclaration@@[public]RabbitMessagingTemplateTests,  @AT@ 9374 @LENGTH@ 511
---INS Modifier@@public @TO@ MethodDeclaration@@public, void, MethodName:receiveDefaultDestinationOverride,  @AT@ 9374 @LENGTH@ 6
---INS PrimitiveType@@void @TO@ MethodDeclaration@@public, void, MethodName:receiveDefaultDestinationOverride,  @AT@ 9381 @LENGTH@ 4
---INS SimpleName@@MethodName:receiveDefaultDestinationOverride @TO@ MethodDeclaration@@public, void, MethodName:receiveDefaultDestinationOverride,  @AT@ 9386 @LENGTH@ 33
---INS ExpressionStatement@@MethodInvocation:messagingTemplate.setDefaultDestination("defaultDest") @TO@ MethodDeclaration@@public, void, MethodName:receiveDefaultDestinationOverride,  @AT@ 9426 @LENGTH@ 55
------INS MethodInvocation@@messagingTemplate.setDefaultDestination("defaultDest") @TO@ ExpressionStatement@@MethodInvocation:messagingTemplate.setDefaultDestination("defaultDest") @AT@ 9426 @LENGTH@ 54
---------INS SimpleName@@Name:messagingTemplate @TO@ MethodInvocation@@messagingTemplate.setDefaultDestination("defaultDest") @AT@ 9426 @LENGTH@ 17
---------INS SimpleName@@MethodName:setDefaultDestination:["defaultDest"] @TO@ MethodInvocation@@messagingTemplate.setDefaultDestination("defaultDest") @AT@ 9444 @LENGTH@ 36
------------INS StringLiteral@@"defaultDest" @TO@ SimpleName@@MethodName:setDefaultDestination:["defaultDest"] @AT@ 9466 @LENGTH@ 13
---INS ExpressionStatement@@MethodInvocation:messagingTemplate.setUseTemplateDefaultReceiveQueue(true) @TO@ MethodDeclaration@@public, void, MethodName:receiveDefaultDestinationOverride,  @AT@ 9484 @LENGTH@ 58
------INS MethodInvocation@@messagingTemplate.setUseTemplateDefaultReceiveQueue(true) @TO@ ExpressionStatement@@MethodInvocation:messagingTemplate.setUseTemplateDefaultReceiveQueue(true) @AT@ 9484 @LENGTH@ 57
---------INS SimpleName@@Name:messagingTemplate @TO@ MethodInvocation@@messagingTemplate.setUseTemplateDefaultReceiveQueue(true) @AT@ 9484 @LENGTH@ 17
---------INS SimpleName@@MethodName:setUseTemplateDefaultReceiveQueue:[true] @TO@ MethodInvocation@@messagingTemplate.setUseTemplateDefaultReceiveQueue(true) @AT@ 9502 @LENGTH@ 39
------------INS BooleanLiteral@@true @TO@ SimpleName@@MethodName:setUseTemplateDefaultReceiveQueue:[true] @AT@ 9536 @LENGTH@ 4
---INS VariableDeclarationStatement@@org.springframework.amqp.core.Message amqpMsg=createAmqpTextMessage(); @TO@ MethodDeclaration@@public, void, MethodName:receiveDefaultDestinationOverride,  @AT@ 9546 @LENGTH@ 72
------INS SimpleType@@org.springframework.amqp.core.Message @TO@ VariableDeclarationStatement@@org.springframework.amqp.core.Message amqpMsg=createAmqpTextMessage(); @AT@ 9546 @LENGTH@ 37
------INS VariableDeclarationFragment@@amqpMsg=createAmqpTextMessage() @TO@ VariableDeclarationStatement@@org.springframework.amqp.core.Message amqpMsg=createAmqpTextMessage(); @AT@ 9584 @LENGTH@ 33
---------INS SimpleName@@amqpMsg @TO@ VariableDeclarationFragment@@amqpMsg=createAmqpTextMessage() @AT@ 9584 @LENGTH@ 7
---------INS MethodInvocation@@MethodName:createAmqpTextMessage:[] @TO@ VariableDeclarationFragment@@amqpMsg=createAmqpTextMessage() @AT@ 9594 @LENGTH@ 23
---INS ExpressionStatement@@MethodInvocation:given(rabbitTemplate.getDefaultReceiveQueue()).willReturn("default") @TO@ MethodDeclaration@@public, void, MethodName:receiveDefaultDestinationOverride,  @AT@ 9621 @LENGTH@ 69
------INS MethodInvocation@@given(rabbitTemplate.getDefaultReceiveQueue()).willReturn("default") @TO@ ExpressionStatement@@MethodInvocation:given(rabbitTemplate.getDefaultReceiveQueue()).willReturn("default") @AT@ 9621 @LENGTH@ 68
---------INS MethodInvocation@@MethodName:given:[rabbitTemplate.getDefaultReceiveQueue()] @TO@ MethodInvocation@@given(rabbitTemplate.getDefaultReceiveQueue()).willReturn("default") @AT@ 9621 @LENGTH@ 46
------------INS MethodInvocation@@rabbitTemplate.getDefaultReceiveQueue() @TO@ MethodInvocation@@MethodName:given:[rabbitTemplate.getDefaultReceiveQueue()] @AT@ 9627 @LENGTH@ 39
---------------INS SimpleName@@Name:rabbitTemplate @TO@ MethodInvocation@@rabbitTemplate.getDefaultReceiveQueue() @AT@ 9627 @LENGTH@ 14
---------------INS SimpleName@@MethodName:getDefaultReceiveQueue:[] @TO@ MethodInvocation@@rabbitTemplate.getDefaultReceiveQueue() @AT@ 9642 @LENGTH@ 24
---------INS SimpleName@@MethodName:willReturn:["default"] @TO@ MethodInvocation@@given(rabbitTemplate.getDefaultReceiveQueue()).willReturn("default") @AT@ 9668 @LENGTH@ 21
------------INS StringLiteral@@"default" @TO@ SimpleName@@MethodName:willReturn:["default"] @AT@ 9679 @LENGTH@ 9
---INS ExpressionStatement@@MethodInvocation:given(rabbitTemplate.receive("default")).willReturn(amqpMsg) @TO@ MethodDeclaration@@public, void, MethodName:receiveDefaultDestinationOverride,  @AT@ 9693 @LENGTH@ 61
------INS MethodInvocation@@given(rabbitTemplate.receive("default")).willReturn(amqpMsg) @TO@ ExpressionStatement@@MethodInvocation:given(rabbitTemplate.receive("default")).willReturn(amqpMsg) @AT@ 9693 @LENGTH@ 60
---------INS MethodInvocation@@MethodName:given:[rabbitTemplate.receive("default")] @TO@ MethodInvocation@@given(rabbitTemplate.receive("default")).willReturn(amqpMsg) @AT@ 9693 @LENGTH@ 40
------------INS MethodInvocation@@rabbitTemplate.receive("default") @TO@ MethodInvocation@@MethodName:given:[rabbitTemplate.receive("default")] @AT@ 9699 @LENGTH@ 33
---------------INS SimpleName@@Name:rabbitTemplate @TO@ MethodInvocation@@rabbitTemplate.receive("default") @AT@ 9699 @LENGTH@ 14
---------------INS SimpleName@@MethodName:receive:["default"] @TO@ MethodInvocation@@rabbitTemplate.receive("default") @AT@ 9714 @LENGTH@ 18
------------------INS StringLiteral@@"default" @TO@ SimpleName@@MethodName:receive:["default"] @AT@ 9722 @LENGTH@ 9
---------INS SimpleName@@MethodName:willReturn:[amqpMsg] @TO@ MethodInvocation@@given(rabbitTemplate.receive("default")).willReturn(amqpMsg) @AT@ 9734 @LENGTH@ 19
------------INS SimpleName@@amqpMsg @TO@ SimpleName@@MethodName:willReturn:[amqpMsg] @AT@ 9745 @LENGTH@ 7
---INS VariableDeclarationStatement@@Message<?> message=messagingTemplate.receive(); @TO@ MethodDeclaration@@public, void, MethodName:receiveDefaultDestinationOverride,  @AT@ 9758 @LENGTH@ 49
------INS ParameterizedType@@Message<?> @TO@ VariableDeclarationStatement@@Message<?> message=messagingTemplate.receive(); @AT@ 9758 @LENGTH@ 10
---------INS SimpleType@@Message @TO@ ParameterizedType@@Message<?> @AT@ 9758 @LENGTH@ 7
---------INS WildcardType@@? @TO@ ParameterizedType@@Message<?> @AT@ 9766 @LENGTH@ 1
------INS VariableDeclarationFragment@@message=messagingTemplate.receive() @TO@ VariableDeclarationStatement@@Message<?> message=messagingTemplate.receive(); @AT@ 9769 @LENGTH@ 37
---------INS SimpleName@@message @TO@ VariableDeclarationFragment@@message=messagingTemplate.receive() @AT@ 9769 @LENGTH@ 7
---------INS MethodInvocation@@messagingTemplate.receive() @TO@ VariableDeclarationFragment@@message=messagingTemplate.receive() @AT@ 9779 @LENGTH@ 27
------------INS SimpleName@@Name:messagingTemplate @TO@ MethodInvocation@@messagingTemplate.receive() @AT@ 9779 @LENGTH@ 17
------------INS SimpleName@@MethodName:receive:[] @TO@ MethodInvocation@@messagingTemplate.receive() @AT@ 9797 @LENGTH@ 9
---INS ExpressionStatement@@MethodInvocation:verify(rabbitTemplate).receive("default") @TO@ MethodDeclaration@@public, void, MethodName:receiveDefaultDestinationOverride,  @AT@ 9810 @LENGTH@ 42
------INS MethodInvocation@@verify(rabbitTemplate).receive("default") @TO@ ExpressionStatement@@MethodInvocation:verify(rabbitTemplate).receive("default") @AT@ 9810 @LENGTH@ 41
---------INS MethodInvocation@@MethodName:verify:[rabbitTemplate] @TO@ MethodInvocation@@verify(rabbitTemplate).receive("default") @AT@ 9810 @LENGTH@ 22
------------INS SimpleName@@rabbitTemplate @TO@ MethodInvocation@@MethodName:verify:[rabbitTemplate] @AT@ 9817 @LENGTH@ 14
---------INS SimpleName@@MethodName:receive:["default"] @TO@ MethodInvocation@@verify(rabbitTemplate).receive("default") @AT@ 9833 @LENGTH@ 18
------------INS StringLiteral@@"default" @TO@ SimpleName@@MethodName:receive:["default"] @AT@ 9841 @LENGTH@ 9
---INS ExpressionStatement@@MethodInvocation:assertTextMessage(message) @TO@ MethodDeclaration@@public, void, MethodName:receiveDefaultDestinationOverride,  @AT@ 9855 @LENGTH@ 27
------INS MethodInvocation@@assertTextMessage(message) @TO@ ExpressionStatement@@MethodInvocation:assertTextMessage(message) @AT@ 9855 @LENGTH@ 26
---------INS SimpleName@@MethodName:assertTextMessage:[message] @TO@ MethodInvocation@@assertTextMessage(message) @AT@ 9855 @LENGTH@ 26
------------INS SimpleName@@message @TO@ SimpleName@@MethodName:assertTextMessage:[message] @AT@ 9873 @LENGTH@ 7


INS TypeDeclaration@@CustomVavrMap, [io.vavr.collection.Map<String,Locale>] @TO@ TypeDeclaration@@[@ExtendWith(MockitoExtension.class), public]TypeDiscovererUnitTests,  @AT@ 7310 @LENGTH@ 63
---INS SimpleName@@ClassName:CustomVavrMap @TO@ TypeDeclaration@@CustomVavrMap, [io.vavr.collection.Map<String,Locale>] @AT@ 7310 @LENGTH@ 13
---INS ParameterizedType@@io.vavr.collection.Map<String,Locale> @TO@ TypeDeclaration@@CustomVavrMap, [io.vavr.collection.Map<String,Locale>] @AT@ 7332 @LENGTH@ 38
------INS SimpleType@@io.vavr.collection.Map @TO@ ParameterizedType@@io.vavr.collection.Map<String,Locale> @AT@ 7332 @LENGTH@ 22
------INS SimpleType@@String @TO@ ParameterizedType@@io.vavr.collection.Map<String,Locale> @AT@ 7355 @LENGTH@ 6
------INS SimpleType@@Locale @TO@ ParameterizedType@@io.vavr.collection.Map<String,Locale> @AT@ 7363 @LENGTH@ 6


UPD VariableDeclarationStatement@@String header=result.getOut().getHeader(SpringWebserviceConstants.SPRING_WS_SOAP_HEADER,String.class); @TO@ String header=result.getMessage().getHeader(SpringWebserviceConstants.SPRING_WS_SOAP_HEADER,String.class); @AT@ 2582 @LENGTH@ 105
---UPD VariableDeclarationFragment@@header=result.getOut().getHeader(SpringWebserviceConstants.SPRING_WS_SOAP_HEADER,String.class) @TO@ header=result.getMessage().getHeader(SpringWebserviceConstants.SPRING_WS_SOAP_HEADER,String.class) @AT@ 2589 @LENGTH@ 97
------UPD MethodInvocation@@result.getOut().getHeader(SpringWebserviceConstants.SPRING_WS_SOAP_HEADER,String.class) @TO@ result.getMessage().getHeader(SpringWebserviceConstants.SPRING_WS_SOAP_HEADER,String.class) @AT@ 2598 @LENGTH@ 88
---------UPD MethodInvocation@@MethodName:getOut:[] @TO@ MethodName:getMessage:[] @AT@ 2598 @LENGTH@ 15


UPD ExpressionStatement@@MethodInvocation:exchange.getOut().setBody("When You Go Home, Tell Them Of Us And Say, For Your Tomorrow, We Gave Our Today.") @TO@ MethodInvocation:exchange.getMessage().setBody("When You Go Home, Tell Them Of Us And Say, For Your Tomorrow, We Gave Our Today.") @AT@ 3469 @LENGTH@ 151
---UPD MethodInvocation@@exchange.getOut().setBody("When You Go Home, Tell Them Of Us And Say, For Your Tomorrow, We Gave Our Today.") @TO@ exchange.getMessage().setBody("When You Go Home, Tell Them Of Us And Say, For Your Tomorrow, We Gave Our Today.") @AT@ 3469 @LENGTH@ 150
------UPD MethodInvocation@@MethodName:getOut:[] @TO@ MethodName:getMessage:[] @AT@ 3469 @LENGTH@ 17


UPD ExpressionStatement@@MethodInvocation:ZipUtil.checkRequestedFeatures(ze) @TO@ MethodInvocation:assertThrows(UnsupportedZipFeatureException.class,() -> ZipUtil.checkRequestedFeatures(ze)) @AT@ 9213 @LENGTH@ 35
---INS MethodInvocation@@assertThrows(UnsupportedZipFeatureException.class,() -> ZipUtil.checkRequestedFeatures(ze)) @TO@ ExpressionStatement@@MethodInvocation:ZipUtil.checkRequestedFeatures(ze) @AT@ 9326 @LENGTH@ 92
------INS SimpleName@@MethodName:assertThrows:[UnsupportedZipFeatureException.class, () -> ZipUtil.checkRequestedFeatures(ze)] @TO@ MethodInvocation@@assertThrows(UnsupportedZipFeatureException.class,() -> ZipUtil.checkRequestedFeatures(ze)) @AT@ 9326 @LENGTH@ 92
---------INS TypeLiteral@@UnsupportedZipFeatureException.class @TO@ SimpleName@@MethodName:assertThrows:[UnsupportedZipFeatureException.class, () -> ZipUtil.checkRequestedFeatures(ze)] @AT@ 9339 @LENGTH@ 36
---------INS LambdaExpression@@() -> ZipUtil.checkRequestedFeatures(ze) @TO@ SimpleName@@MethodName:assertThrows:[UnsupportedZipFeatureException.class, () -> ZipUtil.checkRequestedFeatures(ze)] @AT@ 9377 @LENGTH@ 40
------------MOV MethodInvocation@@ZipUtil.checkRequestedFeatures(ze) @TO@ LambdaExpression@@() -> ZipUtil.checkRequestedFeatures(ze) @AT@ 9213 @LENGTH@ 34


UPD ExpressionStatement@@MethodInvocation:result.append(prefix).append(String.join(", ",e.getValue()),AttributedStyle.BOLD).append(": ").append(e.getKey().getHelp()).append('\n') @TO@ MethodInvocation:result.append(prefix).append(String.join(", ",e.getValue()),AttributedStyle.BOLD).append(": ").append(e.getKey().getDescription()).append('\n') @AT@ 11125 @LENGTH@ 174
---UPD MethodInvocation@@result.append(prefix).append(String.join(", ",e.getValue()),AttributedStyle.BOLD).append(": ").append(e.getKey().getHelp()).append('\n') @TO@ result.append(prefix).append(String.join(", ",e.getValue()),AttributedStyle.BOLD).append(": ").append(e.getKey().getDescription()).append('\n') @AT@ 11125 @LENGTH@ 173
------UPD MethodInvocation@@MethodName:append:[e.getKey().getHelp()] @TO@ MethodName:append:[e.getKey().getDescription()] @AT@ 11125 @LENGTH@ 153
---------UPD MethodInvocation@@e.getKey().getHelp() @TO@ e.getKey().getDescription() @AT@ 11257 @LENGTH@ 20
------------UPD SimpleName@@MethodName:getHelp:[] @TO@ MethodName:getDescription:[] @AT@ 11268 @LENGTH@ 9


INS MethodDeclaration@@protected, CamelContext, MethodName:createCamelContextWithoutClient, Exception,  @TO@ TypeDeclaration@@[@TestInstance(TestInstance.Lifecycle.PER_CLASS), public, abstract]Aws2SQSBaseTest, CamelTestSupport @AT@ 2118 @LENGTH@ 124
---INS Modifier@@protected @TO@ MethodDeclaration@@protected, CamelContext, MethodName:createCamelContextWithoutClient, Exception,  @AT@ 2118 @LENGTH@ 9
---INS SimpleType@@CamelContext @TO@ MethodDeclaration@@protected, CamelContext, MethodName:createCamelContextWithoutClient, Exception,  @AT@ 2128 @LENGTH@ 12
---INS SimpleName@@MethodName:createCamelContextWithoutClient @TO@ MethodDeclaration@@protected, CamelContext, MethodName:createCamelContextWithoutClient, Exception,  @AT@ 2141 @LENGTH@ 31
---INS SimpleType@@Exception @TO@ MethodDeclaration@@protected, CamelContext, MethodName:createCamelContextWithoutClient, Exception,  @AT@ 2182 @LENGTH@ 9
---INS ReturnStatement@@SuperMethodInvocation:super.createCamelContext() @TO@ MethodDeclaration@@protected, CamelContext, MethodName:createCamelContextWithoutClient, Exception,  @AT@ 2202 @LENGTH@ 34
------INS SuperMethodInvocation@@super.createCamelContext() @TO@ ReturnStatement@@SuperMethodInvocation:super.createCamelContext() @AT@ 2209 @LENGTH@ 26
---------INS SimpleName@@MethodName:createCamelContext:[] @TO@ SuperMethodInvocation@@super.createCamelContext() @AT@ 2215 @LENGTH@ 18


INS MethodDeclaration@@public, static, Config, MethodName:getConfig, String server, String username, String password, String token,  @TO@ TypeDeclaration@@[public, final]KubernetesHelper,  @AT@ 8888 @LENGTH@ 568
---INS Modifier@@public @TO@ MethodDeclaration@@public, static, Config, MethodName:getConfig, String server, String username, String password, String token,  @AT@ 8888 @LENGTH@ 6
---INS Modifier@@static @TO@ MethodDeclaration@@public, static, Config, MethodName:getConfig, String server, String username, String password, String token,  @AT@ 8895 @LENGTH@ 6
---INS SimpleType@@Config @TO@ MethodDeclaration@@public, static, Config, MethodName:getConfig, String server, String username, String password, String token,  @AT@ 8902 @LENGTH@ 6
---INS SimpleName@@MethodName:getConfig @TO@ MethodDeclaration@@public, static, Config, MethodName:getConfig, String server, String username, String password, String token,  @AT@ 8909 @LENGTH@ 9
---INS SingleVariableDeclaration@@String server @TO@ MethodDeclaration@@public, static, Config, MethodName:getConfig, String server, String username, String password, String token,  @AT@ 8919 @LENGTH@ 13
------INS SimpleType@@String @TO@ SingleVariableDeclaration@@String server @AT@ 8919 @LENGTH@ 6
------INS SimpleName@@server @TO@ SingleVariableDeclaration@@String server @AT@ 8926 @LENGTH@ 6
---INS SingleVariableDeclaration@@String username @TO@ MethodDeclaration@@public, static, Config, MethodName:getConfig, String server, String username, String password, String token,  @AT@ 8934 @LENGTH@ 15
------INS SimpleType@@String @TO@ SingleVariableDeclaration@@String username @AT@ 8934 @LENGTH@ 6
------INS SimpleName@@username @TO@ SingleVariableDeclaration@@String username @AT@ 8941 @LENGTH@ 8
---INS SingleVariableDeclaration@@String password @TO@ MethodDeclaration@@public, static, Config, MethodName:getConfig, String server, String username, String password, String token,  @AT@ 8951 @LENGTH@ 15
------INS SimpleType@@String @TO@ SingleVariableDeclaration@@String password @AT@ 8951 @LENGTH@ 6
------INS SimpleName@@password @TO@ SingleVariableDeclaration@@String password @AT@ 8958 @LENGTH@ 8
---INS SingleVariableDeclaration@@String token @TO@ MethodDeclaration@@public, static, Config, MethodName:getConfig, String server, String username, String password, String token,  @AT@ 8968 @LENGTH@ 12
------INS SimpleType@@String @TO@ SingleVariableDeclaration@@String token @AT@ 8968 @LENGTH@ 6
------INS SimpleName@@token @TO@ SingleVariableDeclaration@@String token @AT@ 8975 @LENGTH@ 5
---INS IfStatement@@if (token != null && server != null) {  return new ConfigBuilder().withMasterUrl(server).withOauthToken(token).withTrustCerts(true).build();} else if (username != null && token != null && server != null) {  return new ConfigBuilder().withMasterUrl(server).withUsername(username).withPassword(password).withTrustCerts(true).build();} else {  return new ConfigBuilder().build();} @TO@ MethodDeclaration@@public, static, Config, MethodName:getConfig, String server, String username, String password, String token,  @AT@ 8992 @LENGTH@ 458
------INS InfixExpression@@token != null && server != null @TO@ IfStatement@@if (token != null && server != null) {  return new ConfigBuilder().withMasterUrl(server).withOauthToken(token).withTrustCerts(true).build();} else if (username != null && token != null && server != null) {  return new ConfigBuilder().withMasterUrl(server).withUsername(username).withPassword(password).withTrustCerts(true).build();} else {  return new ConfigBuilder().build();} @AT@ 8996 @LENGTH@ 31
---------INS InfixExpression@@token != null @TO@ InfixExpression@@token != null && server != null @AT@ 8996 @LENGTH@ 13
------------INS SimpleName@@token @TO@ InfixExpression@@token != null @AT@ 8996 @LENGTH@ 5
------------INS Operator@@!= @TO@ InfixExpression@@token != null @AT@ 9001 @LENGTH@ 2
------------INS NullLiteral@@null @TO@ InfixExpression@@token != null @AT@ 9005 @LENGTH@ 4
---------INS Operator@@&& @TO@ InfixExpression@@token != null && server != null @AT@ 9009 @LENGTH@ 2
---------INS InfixExpression@@server != null @TO@ InfixExpression@@token != null && server != null @AT@ 9013 @LENGTH@ 14
------------INS SimpleName@@server @TO@ InfixExpression@@server != null @AT@ 9013 @LENGTH@ 6
------------INS Operator@@!= @TO@ InfixExpression@@server != null @AT@ 9019 @LENGTH@ 2
------------INS NullLiteral@@null @TO@ InfixExpression@@server != null @AT@ 9023 @LENGTH@ 4
------INS Block@@ThenBody:{  return new ConfigBuilder().withMasterUrl(server).withOauthToken(token).withTrustCerts(true).build();} @TO@ IfStatement@@if (token != null && server != null) {  return new ConfigBuilder().withMasterUrl(server).withOauthToken(token).withTrustCerts(true).build();} else if (username != null && token != null && server != null) {  return new ConfigBuilder().withMasterUrl(server).withUsername(username).withPassword(password).withTrustCerts(true).build();} else {  return new ConfigBuilder().build();} @AT@ 9029 @LENGTH@ 124
---------INS ReturnStatement@@MethodInvocation:new ConfigBuilder().withMasterUrl(server).withOauthToken(token).withTrustCerts(true).build() @TO@ Block@@ThenBody:{  return new ConfigBuilder().withMasterUrl(server).withOauthToken(token).withTrustCerts(true).build();} @AT@ 9043 @LENGTH@ 100
------------INS MethodInvocation@@new ConfigBuilder().withMasterUrl(server).withOauthToken(token).withTrustCerts(true).build() @TO@ ReturnStatement@@MethodInvocation:new ConfigBuilder().withMasterUrl(server).withOauthToken(token).withTrustCerts(true).build() @AT@ 9050 @LENGTH@ 92
---------------INS MethodInvocation@@MethodName:withTrustCerts:[true] @TO@ MethodInvocation@@new ConfigBuilder().withMasterUrl(server).withOauthToken(token).withTrustCerts(true).build() @AT@ 9050 @LENGTH@ 84
------------------INS BooleanLiteral@@true @TO@ MethodInvocation@@MethodName:withTrustCerts:[true] @AT@ 9129 @LENGTH@ 4
---------------INS MethodInvocation@@MethodName:withOauthToken:[token] @TO@ MethodInvocation@@new ConfigBuilder().withMasterUrl(server).withOauthToken(token).withTrustCerts(true).build() @AT@ 9050 @LENGTH@ 63
------------------INS SimpleName@@token @TO@ MethodInvocation@@MethodName:withOauthToken:[token] @AT@ 9107 @LENGTH@ 5
---------------INS MethodInvocation@@MethodName:withMasterUrl:[server] @TO@ MethodInvocation@@new ConfigBuilder().withMasterUrl(server).withOauthToken(token).withTrustCerts(true).build() @AT@ 9050 @LENGTH@ 41
------------------INS SimpleName@@server @TO@ MethodInvocation@@MethodName:withMasterUrl:[server] @AT@ 9084 @LENGTH@ 6
---------------INS ClassInstanceCreation@@ConfigBuilder[] @TO@ MethodInvocation@@new ConfigBuilder().withMasterUrl(server).withOauthToken(token).withTrustCerts(true).build() @AT@ 9050 @LENGTH@ 19
------------------INS New@@new @TO@ ClassInstanceCreation@@ConfigBuilder[] @AT@ 9050 @LENGTH@ 3
------------------INS SimpleType@@ConfigBuilder @TO@ ClassInstanceCreation@@ConfigBuilder[] @AT@ 9054 @LENGTH@ 13
---------------INS SimpleName@@MethodName:build:[] @TO@ MethodInvocation@@new ConfigBuilder().withMasterUrl(server).withOauthToken(token).withTrustCerts(true).build() @AT@ 9135 @LENGTH@ 7
------INS Block@@ElseBody:if (username != null && token != null && server != null) {  return new ConfigBuilder().withMasterUrl(server).withUsername(username).withPassword(password).withTrustCerts(true).build();} else {  return new ConfigBuilder().build();} @TO@ IfStatement@@if (token != null && server != null) {  return new ConfigBuilder().withMasterUrl(server).withOauthToken(token).withTrustCerts(true).build();} else if (username != null && token != null && server != null) {  return new ConfigBuilder().withMasterUrl(server).withUsername(username).withPassword(password).withTrustCerts(true).build();} else {  return new ConfigBuilder().build();} @AT@ 9159 @LENGTH@ 291
---------INS IfStatement@@if (username != null && token != null && server != null) {  return new ConfigBuilder().withMasterUrl(server).withUsername(username).withPassword(password).withTrustCerts(true).build();} else {  return new ConfigBuilder().build();} @TO@ Block@@ElseBody:if (username != null && token != null && server != null) {  return new ConfigBuilder().withMasterUrl(server).withUsername(username).withPassword(password).withTrustCerts(true).build();} else {  return new ConfigBuilder().build();} @AT@ 9159 @LENGTH@ 291
------------INS InfixExpression@@username != null && token != null && server != null @TO@ IfStatement@@if (username != null && token != null && server != null) {  return new ConfigBuilder().withMasterUrl(server).withUsername(username).withPassword(password).withTrustCerts(true).build();} else {  return new ConfigBuilder().build();} @AT@ 9163 @LENGTH@ 51
---------------INS InfixExpression@@username != null && token != null @TO@ InfixExpression@@username != null && token != null && server != null @AT@ 9163 @LENGTH@ 33
------------------INS InfixExpression@@username != null @TO@ InfixExpression@@username != null && token != null @AT@ 9163 @LENGTH@ 16
---------------------INS SimpleName@@username @TO@ InfixExpression@@username != null @AT@ 9163 @LENGTH@ 8
---------------------INS Operator@@!= @TO@ InfixExpression@@username != null @AT@ 9171 @LENGTH@ 2
---------------------INS NullLiteral@@null @TO@ InfixExpression@@username != null @AT@ 9175 @LENGTH@ 4
------------------INS Operator@@&& @TO@ InfixExpression@@username != null && token != null @AT@ 9179 @LENGTH@ 2
------------------INS InfixExpression@@token != null @TO@ InfixExpression@@username != null && token != null @AT@ 9183 @LENGTH@ 13
---------------------INS SimpleName@@token @TO@ InfixExpression@@token != null @AT@ 9183 @LENGTH@ 5
---------------------INS Operator@@!= @TO@ InfixExpression@@token != null @AT@ 9188 @LENGTH@ 2
---------------------INS NullLiteral@@null @TO@ InfixExpression@@token != null @AT@ 9192 @LENGTH@ 4
---------------INS Operator@@&& @TO@ InfixExpression@@username != null && token != null && server != null @AT@ 9196 @LENGTH@ 2
---------------INS InfixExpression@@server != null @TO@ InfixExpression@@username != null && token != null && server != null @AT@ 9200 @LENGTH@ 14
------------------INS SimpleName@@server @TO@ InfixExpression@@server != null @AT@ 9200 @LENGTH@ 6
------------------INS Operator@@!= @TO@ InfixExpression@@server != null @AT@ 9206 @LENGTH@ 2
------------------INS NullLiteral@@null @TO@ InfixExpression@@server != null @AT@ 9210 @LENGTH@ 4
------------INS Block@@ThenBody:{  return new ConfigBuilder().withMasterUrl(server).withUsername(username).withPassword(password).withTrustCerts(true).build();} @TO@ IfStatement@@if (username != null && token != null && server != null) {  return new ConfigBuilder().withMasterUrl(server).withUsername(username).withPassword(password).withTrustCerts(true).build();} else {  return new ConfigBuilder().build();} @AT@ 9216 @LENGTH@ 169
---------------INS ReturnStatement@@MethodInvocation:new ConfigBuilder().withMasterUrl(server).withUsername(username).withPassword(password).withTrustCerts(true).build() @TO@ Block@@ThenBody:{  return new ConfigBuilder().withMasterUrl(server).withUsername(username).withPassword(password).withTrustCerts(true).build();} @AT@ 9230 @LENGTH@ 145
------------------INS MethodInvocation@@new ConfigBuilder().withMasterUrl(server).withUsername(username).withPassword(password).withTrustCerts(true).build() @TO@ ReturnStatement@@MethodInvocation:new ConfigBuilder().withMasterUrl(server).withUsername(username).withPassword(password).withTrustCerts(true).build() @AT@ 9237 @LENGTH@ 137
---------------------INS MethodInvocation@@MethodName:withTrustCerts:[true] @TO@ MethodInvocation@@new ConfigBuilder().withMasterUrl(server).withUsername(username).withPassword(password).withTrustCerts(true).build() @AT@ 9237 @LENGTH@ 108
------------------------INS BooleanLiteral@@true @TO@ MethodInvocation@@MethodName:withTrustCerts:[true] @AT@ 9340 @LENGTH@ 4
---------------------INS MethodInvocation@@MethodName:withPassword:[password] @TO@ MethodInvocation@@new ConfigBuilder().withMasterUrl(server).withUsername(username).withPassword(password).withTrustCerts(true).build() @AT@ 9237 @LENGTH@ 87
------------------------INS SimpleName@@password @TO@ MethodInvocation@@MethodName:withPassword:[password] @AT@ 9315 @LENGTH@ 8
---------------------INS MethodInvocation@@MethodName:withUsername:[username] @TO@ MethodInvocation@@new ConfigBuilder().withMasterUrl(server).withUsername(username).withPassword(password).withTrustCerts(true).build() @AT@ 9237 @LENGTH@ 64
------------------------INS SimpleName@@username @TO@ MethodInvocation@@MethodName:withUsername:[username] @AT@ 9292 @LENGTH@ 8
---------------------INS MethodInvocation@@MethodName:withMasterUrl:[server] @TO@ MethodInvocation@@new ConfigBuilder().withMasterUrl(server).withUsername(username).withPassword(password).withTrustCerts(true).build() @AT@ 9237 @LENGTH@ 41
------------------------INS SimpleName@@server @TO@ MethodInvocation@@MethodName:withMasterUrl:[server] @AT@ 9271 @LENGTH@ 6
---------------------INS ClassInstanceCreation@@ConfigBuilder[] @TO@ MethodInvocation@@new ConfigBuilder().withMasterUrl(server).withUsername(username).withPassword(password).withTrustCerts(true).build() @AT@ 9237 @LENGTH@ 19
------------------------INS New@@new @TO@ ClassInstanceCreation@@ConfigBuilder[] @AT@ 9237 @LENGTH@ 3
------------------------INS SimpleType@@ConfigBuilder @TO@ ClassInstanceCreation@@ConfigBuilder[] @AT@ 9241 @LENGTH@ 13
---------------------INS SimpleName@@MethodName:build:[] @TO@ MethodInvocation@@new ConfigBuilder().withMasterUrl(server).withUsername(username).withPassword(password).withTrustCerts(true).build() @AT@ 9367 @LENGTH@ 7
------------INS Block@@ElseBody:{  return new ConfigBuilder().build();} @TO@ IfStatement@@if (username != null && token != null && server != null) {  return new ConfigBuilder().withMasterUrl(server).withUsername(username).withPassword(password).withTrustCerts(true).build();} else {  return new ConfigBuilder().build();} @AT@ 9391 @LENGTH@ 59
---------------INS ReturnStatement@@MethodInvocation:new ConfigBuilder().build() @TO@ Block@@ElseBody:{  return new ConfigBuilder().build();} @AT@ 9405 @LENGTH@ 35
------------------INS MethodInvocation@@new ConfigBuilder().build() @TO@ ReturnStatement@@MethodInvocation:new ConfigBuilder().build() @AT@ 9412 @LENGTH@ 27
---------------------INS ClassInstanceCreation@@ConfigBuilder[] @TO@ MethodInvocation@@new ConfigBuilder().build() @AT@ 9412 @LENGTH@ 19
------------------------INS New@@new @TO@ ClassInstanceCreation@@ConfigBuilder[] @AT@ 9412 @LENGTH@ 3
------------------------INS SimpleType@@ConfigBuilder @TO@ ClassInstanceCreation@@ConfigBuilder[] @AT@ 9416 @LENGTH@ 13
---------------------INS SimpleName@@MethodName:build:[] @TO@ MethodInvocation@@new ConfigBuilder().build() @AT@ 9432 @LENGTH@ 7


UPD VariableDeclarationStatement@@final Object[] singletons=new Object[]{ExceptionFactory.INSTANCE}; @TO@ final Object[] singletons={ExceptionFactory.INSTANCE}; @AT@ 8368 @LENGTH@ 92
---UPD VariableDeclarationFragment@@singletons=new Object[]{ExceptionFactory.INSTANCE} @TO@ singletons={ExceptionFactory.INSTANCE} @AT@ 8383 @LENGTH@ 76
------DEL ArrayCreation@@new Object[]{ExceptionFactory.INSTANCE} @AT@ 8396 @LENGTH@ 63
---------DEL ArrayType@@Object[] @AT@ 8400 @LENGTH@ 8
------------DEL SimpleType@@Object @AT@ 8400 @LENGTH@ 6
------MOV ArrayInitializer@@{ExceptionFactory.INSTANCE} @TO@ VariableDeclarationFragment@@singletons=new Object[]{ExceptionFactory.INSTANCE} @AT@ 8409 @LENGTH@ 50


UPD ReturnStatement@@InfixExpression:path != null && Files.exists(path) && Files.isDirectory(path) && Files.exists(path.resolve("jboss-modules.jar")) @TO@ MethodInvocation:Utils.isValidHomeDirectory(path) @AT@ 2560 @LENGTH@ 168
---INS MethodInvocation@@Utils.isValidHomeDirectory(path) @TO@ ReturnStatement@@InfixExpression:path != null && Files.exists(path) && Files.isDirectory(path) && Files.exists(path.resolve("jboss-modules.jar")) @AT@ 2539 @LENGTH@ 32
------MOV SimpleName@@Name:Files @TO@ MethodInvocation@@Utils.isValidHomeDirectory(path) @AT@ 2637 @LENGTH@ 5
------MOV SimpleName@@MethodName:isDirectory:[path] @TO@ MethodInvocation@@Utils.isValidHomeDirectory(path) @AT@ 2643 @LENGTH@ 17
---DEL InfixExpression@@path != null && Files.exists(path) && Files.isDirectory(path) && Files.exists(path.resolve("jboss-modules.jar")) @AT@ 2567 @LENGTH@ 160
------DEL InfixExpression@@path != null && Files.exists(path) && Files.isDirectory(path) @AT@ 2567 @LENGTH@ 93
---------DEL InfixExpression@@path != null && Files.exists(path) @AT@ 2567 @LENGTH@ 50
------------DEL InfixExpression@@path != null @AT@ 2567 @LENGTH@ 12
---------------DEL SimpleName@@path @AT@ 2567 @LENGTH@ 4
---------------DEL Operator@@!= @AT@ 2571 @LENGTH@ 2
---------------DEL NullLiteral@@null @AT@ 2575 @LENGTH@ 4
------------DEL Operator@@&& @AT@ 2579 @LENGTH@ 2
------------DEL MethodInvocation@@Files.exists(path) @AT@ 2599 @LENGTH@ 18
---------------DEL SimpleName@@Name:Files @AT@ 2599 @LENGTH@ 5
---------------DEL SimpleName@@MethodName:exists:[path] @AT@ 2605 @LENGTH@ 12
------------------DEL SimpleName@@path @AT@ 2612 @LENGTH@ 4
---------DEL Operator@@&& @AT@ 2617 @LENGTH@ 2
---------DEL MethodInvocation@@Files.isDirectory(path) @AT@ 2637 @LENGTH@ 23
------DEL Operator@@&& @AT@ 2660 @LENGTH@ 2
------DEL MethodInvocation@@Files.exists(path.resolve("jboss-modules.jar")) @AT@ 2680 @LENGTH@ 47
---------DEL SimpleName@@Name:Files @AT@ 2680 @LENGTH@ 5
---------DEL SimpleName@@MethodName:exists:[path.resolve("jboss-modules.jar")] @AT@ 2686 @LENGTH@ 41
------------DEL MethodInvocation@@path.resolve("jboss-modules.jar") @AT@ 2693 @LENGTH@ 33
---------------DEL SimpleName@@Name:path @AT@ 2693 @LENGTH@ 4
---------------DEL SimpleName@@MethodName:resolve:["jboss-modules.jar"] @AT@ 2698 @LENGTH@ 28
------------------DEL StringLiteral@@"jboss-modules.jar" @AT@ 2706 @LENGTH@ 19


UPD Block@@ThenBody:{  Path conf=binDir.resolve(baseName + ".conf.bat");  try (BufferedWriter writer=Files.newBufferedWriter(conf,StandardOpenOption.APPEND)){    writer.newLine();    writer.write("set \"");    writer.write(envName);    writer.write("=-Dmaven.repo.local=");    writer.write(localRepo);    writer.write(" %");    writer.write(envName);    writer.write("%\"");    writer.newLine();  }   conf=binDir.resolve(baseName + ".conf.ps1");  try (BufferedWriter writer=Files.newBufferedWriter(conf,StandardOpenOption.APPEND)){    writer.newLine();    writer.write('$');    writer.write(envName);    writer.write(" += '-Dmaven.repo.local=");    writer.write(localRepo);    writer.write("'");    writer.newLine();  } } @TO@ ThenBody:{  Path conf=binDir.resolve(baseName + ".conf.bat");  OpenOption[] options;  if (Files.notExists(conf)) {    options=new OpenOption[]{StandardOpenOption.CREATE_NEW};  } else {    options=new OpenOption[]{StandardOpenOption.APPEND};  }  try (BufferedWriter writer=Files.newBufferedWriter(conf,options)){    writer.newLine();    writer.write("set \"");    writer.write(envName);    writer.write("=-Dmaven.repo.local=");    writer.write(localRepo);    writer.write(" %");    writer.write(envName);    writer.write("%\"");    writer.newLine();  }   conf=binDir.resolve(baseName + ".conf.ps1");  if (Files.notExists(conf)) {    options=new OpenOption[]{StandardOpenOption.CREATE_NEW};  } else {    options=new OpenOption[]{StandardOpenOption.APPEND};  }  try (BufferedWriter writer=Files.newBufferedWriter(conf,options)){    writer.newLine();    writer.write('$');    writer.write(envName);    writer.write(" += '-Dmaven.repo.local=");    writer.write(localRepo);    writer.write("'");    writer.newLine();  } } @AT@ 11897 @LENGTH@ 1151
---UPD TryStatement@@try (BufferedWriter writer=Files.newBufferedWriter(conf,StandardOpenOption.APPEND)){  writer.newLine();  writer.write("set \"");  writer.write(envName);  writer.write("=-Dmaven.repo.local=");  writer.write(localRepo);  writer.write(" %");  writer.write(envName);  writer.write("%\"");  writer.newLine();}  @TO@ try (BufferedWriter writer=Files.newBufferedWriter(conf,options)){  writer.newLine();  writer.write("set \"");  writer.write(envName);  writer.write("=-Dmaven.repo.local=");  writer.write(localRepo);  writer.write(" %");  writer.write(envName);  writer.write("%\"");  writer.newLine();}  @AT@ 12013 @LENGTH@ 496
------UPD VariableDeclarationExpression@@BufferedWriter writer=Files.newBufferedWriter(conf,StandardOpenOption.APPEND) @TO@ BufferedWriter writer=Files.newBufferedWriter(conf,options) @AT@ 12018 @LENGTH@ 80
---------UPD VariableDeclarationFragment@@writer=Files.newBufferedWriter(conf,StandardOpenOption.APPEND) @TO@ writer=Files.newBufferedWriter(conf,options) @AT@ 12033 @LENGTH@ 65
------------UPD MethodInvocation@@Files.newBufferedWriter(conf,StandardOpenOption.APPEND) @TO@ Files.newBufferedWriter(conf,options) @AT@ 12042 @LENGTH@ 56
---------------UPD SimpleName@@MethodName:newBufferedWriter:[conf, StandardOpenOption.APPEND] @TO@ MethodName:newBufferedWriter:[conf, options] @AT@ 12048 @LENGTH@ 50
------------------DEL QualifiedName@@StandardOpenOption.APPEND @AT@ 12072 @LENGTH@ 25
---------------------DEL SimpleName@@StandardOpenOption @AT@ 12072 @LENGTH@ 18
---------------------DEL SimpleName@@APPEND @AT@ 12091 @LENGTH@ 6
------------------INS SimpleName@@options @TO@ SimpleName@@MethodName:newBufferedWriter:[conf, StandardOpenOption.APPEND] @AT@ 12541 @LENGTH@ 7
---INS VariableDeclarationStatement@@OpenOption[] options; @TO@ Block@@ThenBody:{  Path conf=binDir.resolve(baseName + ".conf.bat");  try (BufferedWriter writer=Files.newBufferedWriter(conf,StandardOpenOption.APPEND)){    writer.newLine();    writer.write("set \"");    writer.write(envName);    writer.write("=-Dmaven.repo.local=");    writer.write(localRepo);    writer.write(" %");    writer.write(envName);    writer.write("%\"");    writer.newLine();  }   conf=binDir.resolve(baseName + ".conf.ps1");  try (BufferedWriter writer=Files.newBufferedWriter(conf,StandardOpenOption.APPEND)){    writer.newLine();    writer.write('$');    writer.write(envName);    writer.write(" += '-Dmaven.repo.local=");    writer.write(localRepo);    writer.write("'");    writer.newLine();  } } @AT@ 12200 @LENGTH@ 21
------INS ArrayType@@OpenOption[] @TO@ VariableDeclarationStatement@@OpenOption[] options; @AT@ 12200 @LENGTH@ 12
---------INS SimpleType@@OpenOption @TO@ ArrayType@@OpenOption[] @AT@ 12200 @LENGTH@ 10
------INS VariableDeclarationFragment@@options @TO@ VariableDeclarationStatement@@OpenOption[] options; @AT@ 12213 @LENGTH@ 7
---------INS SimpleName@@options @TO@ VariableDeclarationFragment@@options @AT@ 12213 @LENGTH@ 7
---INS IfStatement@@if (Files.notExists(conf)) {  options=new OpenOption[]{StandardOpenOption.CREATE_NEW};} else {  options=new OpenOption[]{StandardOpenOption.APPEND};} @TO@ Block@@ThenBody:{  Path conf=binDir.resolve(baseName + ".conf.bat");  try (BufferedWriter writer=Files.newBufferedWriter(conf,StandardOpenOption.APPEND)){    writer.newLine();    writer.write("set \"");    writer.write(envName);    writer.write("=-Dmaven.repo.local=");    writer.write(localRepo);    writer.write(" %");    writer.write(envName);    writer.write("%\"");    writer.newLine();  }   conf=binDir.resolve(baseName + ".conf.ps1");  try (BufferedWriter writer=Files.newBufferedWriter(conf,StandardOpenOption.APPEND)){    writer.newLine();    writer.write('$');    writer.write(envName);    writer.write(" += '-Dmaven.repo.local=");    writer.write(localRepo);    writer.write("'");    writer.newLine();  } } @AT@ 12238 @LENGTH@ 227
------INS MethodInvocation@@Files.notExists(conf) @TO@ IfStatement@@if (Files.notExists(conf)) {  options=new OpenOption[]{StandardOpenOption.CREATE_NEW};} else {  options=new OpenOption[]{StandardOpenOption.APPEND};} @AT@ 12242 @LENGTH@ 21
---------INS SimpleName@@Name:Files @TO@ MethodInvocation@@Files.notExists(conf) @AT@ 12242 @LENGTH@ 5
---------INS SimpleName@@MethodName:notExists:[conf] @TO@ MethodInvocation@@Files.notExists(conf) @AT@ 12248 @LENGTH@ 15
------------INS SimpleName@@conf @TO@ SimpleName@@MethodName:notExists:[conf] @AT@ 12258 @LENGTH@ 4
------INS Block@@ThenBody:{  options=new OpenOption[]{StandardOpenOption.CREATE_NEW};} @TO@ IfStatement@@if (Files.notExists(conf)) {  options=new OpenOption[]{StandardOpenOption.CREATE_NEW};} else {  options=new OpenOption[]{StandardOpenOption.APPEND};} @AT@ 12265 @LENGTH@ 99
---------INS ExpressionStatement@@Assignment:options=new OpenOption[]{StandardOpenOption.CREATE_NEW} @TO@ Block@@ThenBody:{  options=new OpenOption[]{StandardOpenOption.CREATE_NEW};} @AT@ 12287 @LENGTH@ 59
------------INS Assignment@@options=new OpenOption[]{StandardOpenOption.CREATE_NEW} @TO@ ExpressionStatement@@Assignment:options=new OpenOption[]{StandardOpenOption.CREATE_NEW} @AT@ 12287 @LENGTH@ 58
---------------INS SimpleName@@options @TO@ Assignment@@options=new OpenOption[]{StandardOpenOption.CREATE_NEW} @AT@ 12287 @LENGTH@ 7
---------------INS Operator@@= @TO@ Assignment@@options=new OpenOption[]{StandardOpenOption.CREATE_NEW} @AT@ 12294 @LENGTH@ 1
---------------INS ArrayCreation@@new OpenOption[]{StandardOpenOption.CREATE_NEW} @TO@ Assignment@@options=new OpenOption[]{StandardOpenOption.CREATE_NEW} @AT@ 12297 @LENGTH@ 48
------------------INS ArrayType@@OpenOption[] @TO@ ArrayCreation@@new OpenOption[]{StandardOpenOption.CREATE_NEW} @AT@ 12301 @LENGTH@ 12
---------------------INS SimpleType@@OpenOption @TO@ ArrayType@@OpenOption[] @AT@ 12301 @LENGTH@ 10
------------------INS ArrayInitializer@@{StandardOpenOption.CREATE_NEW} @TO@ ArrayCreation@@new OpenOption[]{StandardOpenOption.CREATE_NEW} @AT@ 12314 @LENGTH@ 31
---------------------INS QualifiedName@@StandardOpenOption.CREATE_NEW @TO@ ArrayInitializer@@{StandardOpenOption.CREATE_NEW} @AT@ 12315 @LENGTH@ 29
------------------------INS SimpleName@@StandardOpenOption @TO@ QualifiedName@@StandardOpenOption.CREATE_NEW @AT@ 12315 @LENGTH@ 18
------------------------INS SimpleName@@CREATE_NEW @TO@ QualifiedName@@StandardOpenOption.CREATE_NEW @AT@ 12334 @LENGTH@ 10
------INS Block@@ElseBody:{  options=new OpenOption[]{StandardOpenOption.APPEND};} @TO@ IfStatement@@if (Files.notExists(conf)) {  options=new OpenOption[]{StandardOpenOption.CREATE_NEW};} else {  options=new OpenOption[]{StandardOpenOption.APPEND};} @AT@ 12370 @LENGTH@ 95
---------INS ExpressionStatement@@Assignment:options=new OpenOption[]{StandardOpenOption.APPEND} @TO@ Block@@ElseBody:{  options=new OpenOption[]{StandardOpenOption.APPEND};} @AT@ 12392 @LENGTH@ 55
------------INS Assignment@@options=new OpenOption[]{StandardOpenOption.APPEND} @TO@ ExpressionStatement@@Assignment:options=new OpenOption[]{StandardOpenOption.APPEND} @AT@ 12392 @LENGTH@ 54
---------------INS SimpleName@@options @TO@ Assignment@@options=new OpenOption[]{StandardOpenOption.APPEND} @AT@ 12392 @LENGTH@ 7
---------------INS Operator@@= @TO@ Assignment@@options=new OpenOption[]{StandardOpenOption.APPEND} @AT@ 12399 @LENGTH@ 1
---------------INS ArrayCreation@@new OpenOption[]{StandardOpenOption.APPEND} @TO@ Assignment@@options=new OpenOption[]{StandardOpenOption.APPEND} @AT@ 12402 @LENGTH@ 44
------------------INS ArrayType@@OpenOption[] @TO@ ArrayCreation@@new OpenOption[]{StandardOpenOption.APPEND} @AT@ 12406 @LENGTH@ 12
---------------------INS SimpleType@@OpenOption @TO@ ArrayType@@OpenOption[] @AT@ 12406 @LENGTH@ 10
------------------INS ArrayInitializer@@{StandardOpenOption.APPEND} @TO@ ArrayCreation@@new OpenOption[]{StandardOpenOption.APPEND} @AT@ 12419 @LENGTH@ 27
---------------------INS QualifiedName@@StandardOpenOption.APPEND @TO@ ArrayInitializer@@{StandardOpenOption.APPEND} @AT@ 12420 @LENGTH@ 25
------------------------INS SimpleName@@StandardOpenOption @TO@ QualifiedName@@StandardOpenOption.APPEND @AT@ 12420 @LENGTH@ 18
------------------------INS SimpleName@@APPEND @TO@ QualifiedName@@StandardOpenOption.APPEND @AT@ 12439 @LENGTH@ 6
---UPD TryStatement@@try (BufferedWriter writer=Files.newBufferedWriter(conf,StandardOpenOption.APPEND)){  writer.newLine();  writer.write('$');  writer.write(envName);  writer.write(" += '-Dmaven.repo.local=");  writer.write(localRepo);  writer.write("'");  writer.newLine();}  @TO@ try (BufferedWriter writer=Files.newBufferedWriter(conf,options)){  writer.newLine();  writer.write('$');  writer.write(envName);  writer.write(" += '-Dmaven.repo.local=");  writer.write(localRepo);  writer.write("'");  writer.newLine();}  @AT@ 12624 @LENGTH@ 410
------UPD VariableDeclarationExpression@@BufferedWriter writer=Files.newBufferedWriter(conf,StandardOpenOption.APPEND) @TO@ BufferedWriter writer=Files.newBufferedWriter(conf,options) @AT@ 12629 @LENGTH@ 80
---------UPD VariableDeclarationFragment@@writer=Files.newBufferedWriter(conf,StandardOpenOption.APPEND) @TO@ writer=Files.newBufferedWriter(conf,options) @AT@ 12644 @LENGTH@ 65
------------UPD MethodInvocation@@Files.newBufferedWriter(conf,StandardOpenOption.APPEND) @TO@ Files.newBufferedWriter(conf,options) @AT@ 12653 @LENGTH@ 56
---------------UPD SimpleName@@MethodName:newBufferedWriter:[conf, StandardOpenOption.APPEND] @TO@ MethodName:newBufferedWriter:[conf, options] @AT@ 12659 @LENGTH@ 50
------------------DEL QualifiedName@@StandardOpenOption.APPEND @AT@ 12683 @LENGTH@ 25
---------------------DEL SimpleName@@StandardOpenOption @AT@ 12683 @LENGTH@ 18
---------------------DEL SimpleName@@APPEND @AT@ 12702 @LENGTH@ 6
------------------INS SimpleName@@options @TO@ SimpleName@@MethodName:newBufferedWriter:[conf, StandardOpenOption.APPEND] @AT@ 13378 @LENGTH@ 7
---INS IfStatement@@if (Files.notExists(conf)) {  options=new OpenOption[]{StandardOpenOption.CREATE_NEW};} else {  options=new OpenOption[]{StandardOpenOption.APPEND};} @TO@ Block@@ThenBody:{  Path conf=binDir.resolve(baseName + ".conf.bat");  try (BufferedWriter writer=Files.newBufferedWriter(conf,StandardOpenOption.APPEND)){    writer.newLine();    writer.write("set \"");    writer.write(envName);    writer.write("=-Dmaven.repo.local=");    writer.write(localRepo);    writer.write(" %");    writer.write(envName);    writer.write("%\"");    writer.newLine();  }   conf=binDir.resolve(baseName + ".conf.ps1");  try (BufferedWriter writer=Files.newBufferedWriter(conf,StandardOpenOption.APPEND)){    writer.newLine();    writer.write('$');    writer.write(envName);    writer.write(" += '-Dmaven.repo.local=");    writer.write(localRepo);    writer.write("'");    writer.newLine();  } } @AT@ 13075 @LENGTH@ 227
------INS MethodInvocation@@Files.notExists(conf) @TO@ IfStatement@@if (Files.notExists(conf)) {  options=new OpenOption[]{StandardOpenOption.CREATE_NEW};} else {  options=new OpenOption[]{StandardOpenOption.APPEND};} @AT@ 13079 @LENGTH@ 21
---------INS SimpleName@@Name:Files @TO@ MethodInvocation@@Files.notExists(conf) @AT@ 13079 @LENGTH@ 5
---------INS SimpleName@@MethodName:notExists:[conf] @TO@ MethodInvocation@@Files.notExists(conf) @AT@ 13085 @LENGTH@ 15
------------INS SimpleName@@conf @TO@ SimpleName@@MethodName:notExists:[conf] @AT@ 13095 @LENGTH@ 4
------INS Block@@ThenBody:{  options=new OpenOption[]{StandardOpenOption.CREATE_NEW};} @TO@ IfStatement@@if (Files.notExists(conf)) {  options=new OpenOption[]{StandardOpenOption.CREATE_NEW};} else {  options=new OpenOption[]{StandardOpenOption.APPEND};} @AT@ 13102 @LENGTH@ 99
---------INS ExpressionStatement@@Assignment:options=new OpenOption[]{StandardOpenOption.CREATE_NEW} @TO@ Block@@ThenBody:{  options=new OpenOption[]{StandardOpenOption.CREATE_NEW};} @AT@ 13124 @LENGTH@ 59
------------INS Assignment@@options=new OpenOption[]{StandardOpenOption.CREATE_NEW} @TO@ ExpressionStatement@@Assignment:options=new OpenOption[]{StandardOpenOption.CREATE_NEW} @AT@ 13124 @LENGTH@ 58
---------------INS SimpleName@@options @TO@ Assignment@@options=new OpenOption[]{StandardOpenOption.CREATE_NEW} @AT@ 13124 @LENGTH@ 7
---------------INS Operator@@= @TO@ Assignment@@options=new OpenOption[]{StandardOpenOption.CREATE_NEW} @AT@ 13131 @LENGTH@ 1
---------------INS ArrayCreation@@new OpenOption[]{StandardOpenOption.CREATE_NEW} @TO@ Assignment@@options=new OpenOption[]{StandardOpenOption.CREATE_NEW} @AT@ 13134 @LENGTH@ 48
------------------INS ArrayType@@OpenOption[] @TO@ ArrayCreation@@new OpenOption[]{StandardOpenOption.CREATE_NEW} @AT@ 13138 @LENGTH@ 12
---------------------INS SimpleType@@OpenOption @TO@ ArrayType@@OpenOption[] @AT@ 13138 @LENGTH@ 10
------------------INS ArrayInitializer@@{StandardOpenOption.CREATE_NEW} @TO@ ArrayCreation@@new OpenOption[]{StandardOpenOption.CREATE_NEW} @AT@ 13151 @LENGTH@ 31
---------------------INS QualifiedName@@StandardOpenOption.CREATE_NEW @TO@ ArrayInitializer@@{StandardOpenOption.CREATE_NEW} @AT@ 13152 @LENGTH@ 29
------------------------INS SimpleName@@StandardOpenOption @TO@ QualifiedName@@StandardOpenOption.CREATE_NEW @AT@ 13152 @LENGTH@ 18
------------------------INS SimpleName@@CREATE_NEW @TO@ QualifiedName@@StandardOpenOption.CREATE_NEW @AT@ 13171 @LENGTH@ 10
------INS Block@@ElseBody:{  options=new OpenOption[]{StandardOpenOption.APPEND};} @TO@ IfStatement@@if (Files.notExists(conf)) {  options=new OpenOption[]{StandardOpenOption.CREATE_NEW};} else {  options=new OpenOption[]{StandardOpenOption.APPEND};} @AT@ 13207 @LENGTH@ 95
---------INS ExpressionStatement@@Assignment:options=new OpenOption[]{StandardOpenOption.APPEND} @TO@ Block@@ElseBody:{  options=new OpenOption[]{StandardOpenOption.APPEND};} @AT@ 13229 @LENGTH@ 55
------------INS Assignment@@options=new OpenOption[]{StandardOpenOption.APPEND} @TO@ ExpressionStatement@@Assignment:options=new OpenOption[]{StandardOpenOption.APPEND} @AT@ 13229 @LENGTH@ 54
---------------INS SimpleName@@options @TO@ Assignment@@options=new OpenOption[]{StandardOpenOption.APPEND} @AT@ 13229 @LENGTH@ 7
---------------INS Operator@@= @TO@ Assignment@@options=new OpenOption[]{StandardOpenOption.APPEND} @AT@ 13236 @LENGTH@ 1
---------------INS ArrayCreation@@new OpenOption[]{StandardOpenOption.APPEND} @TO@ Assignment@@options=new OpenOption[]{StandardOpenOption.APPEND} @AT@ 13239 @LENGTH@ 44
------------------INS ArrayType@@OpenOption[] @TO@ ArrayCreation@@new OpenOption[]{StandardOpenOption.APPEND} @AT@ 13243 @LENGTH@ 12
---------------------INS SimpleType@@OpenOption @TO@ ArrayType@@OpenOption[] @AT@ 13243 @LENGTH@ 10
------------------INS ArrayInitializer@@{StandardOpenOption.APPEND} @TO@ ArrayCreation@@new OpenOption[]{StandardOpenOption.APPEND} @AT@ 13256 @LENGTH@ 27
---------------------INS QualifiedName@@StandardOpenOption.APPEND @TO@ ArrayInitializer@@{StandardOpenOption.APPEND} @AT@ 13257 @LENGTH@ 25
------------------------INS SimpleName@@StandardOpenOption @TO@ QualifiedName@@StandardOpenOption.APPEND @AT@ 13257 @LENGTH@ 18
------------------------INS SimpleName@@APPEND @TO@ QualifiedName@@StandardOpenOption.APPEND @AT@ 13276 @LENGTH@ 6


UPD ExpressionStatement@@MethodInvocation:assertTrue(PropertiesFactory.EMPTY_PROPERTIES.keySet().isEmpty()) @TO@ MethodInvocation:assertTrue(PropertiesFactory.EMPTY_PROPERTIES.isEmpty()) @AT@ 5160 @LENGTH@ 66
---UPD MethodInvocation@@assertTrue(PropertiesFactory.EMPTY_PROPERTIES.keySet().isEmpty()) @TO@ assertTrue(PropertiesFactory.EMPTY_PROPERTIES.isEmpty()) @AT@ 5160 @LENGTH@ 65
------UPD SimpleName@@MethodName:assertTrue:[PropertiesFactory.EMPTY_PROPERTIES.keySet().isEmpty()] @TO@ MethodName:assertTrue:[PropertiesFactory.EMPTY_PROPERTIES.isEmpty()] @AT@ 5160 @LENGTH@ 65
---------UPD MethodInvocation@@PropertiesFactory.EMPTY_PROPERTIES.keySet().isEmpty() @TO@ PropertiesFactory.EMPTY_PROPERTIES.isEmpty() @AT@ 5171 @LENGTH@ 53
------------DEL MethodInvocation@@MethodName:keySet:[] @AT@ 5171 @LENGTH@ 43


UPD VariableDeclarationStatement@@OrderedLocationProperties propPC=(OrderedLocationProperties)camelContext.getPropertiesComponent().loadProperties(name -> name.startsWith("camel."),MainHelper::optionKey); @TO@ OrderedLocationProperties propPC=(OrderedLocationProperties)camelContext.getPropertiesComponent().loadProperties(name -> name.startsWith("camel.")); @AT@ 67773 @LENGTH@ 191
---UPD VariableDeclarationFragment@@propPC=(OrderedLocationProperties)camelContext.getPropertiesComponent().loadProperties(name -> name.startsWith("camel."),MainHelper::optionKey) @TO@ propPC=(OrderedLocationProperties)camelContext.getPropertiesComponent().loadProperties(name -> name.startsWith("camel.")) @AT@ 67799 @LENGTH@ 164
------UPD CastExpression@@(OrderedLocationProperties)camelContext.getPropertiesComponent().loadProperties(name -> name.startsWith("camel."),MainHelper::optionKey) @TO@ (OrderedLocationProperties)camelContext.getPropertiesComponent().loadProperties(name -> name.startsWith("camel.")) @AT@ 67808 @LENGTH@ 155
---------UPD MethodInvocation@@camelContext.getPropertiesComponent().loadProperties(name -> name.startsWith("camel."),MainHelper::optionKey) @TO@ camelContext.getPropertiesComponent().loadProperties(name -> name.startsWith("camel.")) @AT@ 67836 @LENGTH@ 127
------------UPD SimpleName@@MethodName:loadProperties:[name -> name.startsWith("camel."), MainHelper::optionKey] @TO@ MethodName:loadProperties:[name -> name.startsWith("camel.")] @AT@ 67891 @LENGTH@ 72


INS TryStatement@@try {  LOG.info("Trying to reconnect to {}",getEndpoint().getConnectionString());  if (isServiceStopping(this)) {    return true;  }  if (isSessionClosed(session)) {    try {      LOG.info("Creating a new session to {}",getEndpoint().getConnectionString());      session=createSession();      LOG.info("Reconnected to {}",getEndpoint().getConnectionString());      return true;    } catch (    IOException e) {      LOG.warn("Failed to reconnect to {}",getEndpoint().getConnectionString());      closeSession();      return false;    }  }  LOG.info("Nothing to do: the session is not closed");} catch (Exception e) {  LOG.error("Unable to reconnect to {}: {}",getEndpoint().getConnectionString(),e.getMessage(),e);  return false;} @TO@ MethodDeclaration@@private, boolean, MethodName:doReconnect,  @AT@ 5863 @LENGTH@ 1001
---MOV IfStatement@@if (isServiceStopping(this)) {  return true;} @TO@ TryStatement@@try {  LOG.info("Trying to reconnect to {}",getEndpoint().getConnectionString());  if (isServiceStopping(this)) {    return true;  }  if (isSessionClosed(session)) {    try {      LOG.info("Creating a new session to {}",getEndpoint().getConnectionString());      session=createSession();      LOG.info("Reconnected to {}",getEndpoint().getConnectionString());      return true;    } catch (    IOException e) {      LOG.warn("Failed to reconnect to {}",getEndpoint().getConnectionString());      closeSession();      return false;    }  }  LOG.info("Nothing to do: the session is not closed");} catch (Exception e) {  LOG.error("Unable to reconnect to {}: {}",getEndpoint().getConnectionString(),e.getMessage(),e);  return false;} @AT@ 5863 @LENGTH@ 65
---MOV IfStatement@@if (isSessionClosed(session)) {  try {    LOG.info("Trying to reconnect to {}",getEndpoint().getConnectionString());    session=createSession();    return true;  } catch (  IOException e) {    LOG.warn("Failed to reconnect to {}",getEndpoint().getConnectionString());    closeSession();    return false;  }} @TO@ TryStatement@@try {  LOG.info("Trying to reconnect to {}",getEndpoint().getConnectionString());  if (isServiceStopping(this)) {    return true;  }  if (isSessionClosed(session)) {    try {      LOG.info("Creating a new session to {}",getEndpoint().getConnectionString());      session=createSession();      LOG.info("Reconnected to {}",getEndpoint().getConnectionString());      return true;    } catch (    IOException e) {      LOG.warn("Failed to reconnect to {}",getEndpoint().getConnectionString());      closeSession();      return false;    }  }  LOG.info("Nothing to do: the session is not closed");} catch (Exception e) {  LOG.error("Unable to reconnect to {}: {}",getEndpoint().getConnectionString(),e.getMessage(),e);  return false;} @AT@ 5938 @LENGTH@ 430
---MOV ExpressionStatement@@MethodInvocation:LOG.info("Trying to reconnect to {}",getEndpoint().getConnectionString()) @TO@ TryStatement@@try {  LOG.info("Trying to reconnect to {}",getEndpoint().getConnectionString());  if (isServiceStopping(this)) {    return true;  }  if (isSessionClosed(session)) {    try {      LOG.info("Creating a new session to {}",getEndpoint().getConnectionString());      session=createSession();      LOG.info("Reconnected to {}",getEndpoint().getConnectionString());      return true;    } catch (    IOException e) {      LOG.warn("Failed to reconnect to {}",getEndpoint().getConnectionString());      closeSession();      return false;    }  }  LOG.info("Nothing to do: the session is not closed");} catch (Exception e) {  LOG.error("Unable to reconnect to {}: {}",getEndpoint().getConnectionString(),e.getMessage(),e);  return false;} @AT@ 6004 @LENGTH@ 75
---INS ExpressionStatement@@MethodInvocation:LOG.info("Nothing to do: the session is not closed") @TO@ TryStatement@@try {  LOG.info("Trying to reconnect to {}",getEndpoint().getConnectionString());  if (isServiceStopping(this)) {    return true;  }  if (isSessionClosed(session)) {    try {      LOG.info("Creating a new session to {}",getEndpoint().getConnectionString());      session=createSession();      LOG.info("Reconnected to {}",getEndpoint().getConnectionString());      return true;    } catch (    IOException e) {      LOG.warn("Failed to reconnect to {}",getEndpoint().getConnectionString());      closeSession();      return false;    }  }  LOG.info("Nothing to do: the session is not closed");} catch (Exception e) {  LOG.error("Unable to reconnect to {}: {}",getEndpoint().getConnectionString(),e.getMessage(),e);  return false;} @AT@ 6631 @LENGTH@ 53
------INS MethodInvocation@@LOG.info("Nothing to do: the session is not closed") @TO@ ExpressionStatement@@MethodInvocation:LOG.info("Nothing to do: the session is not closed") @AT@ 6631 @LENGTH@ 52
---------INS SimpleName@@Name:LOG @TO@ MethodInvocation@@LOG.info("Nothing to do: the session is not closed") @AT@ 6631 @LENGTH@ 3
---------INS SimpleName@@MethodName:info:["Nothing to do: the session is not closed"] @TO@ MethodInvocation@@LOG.info("Nothing to do: the session is not closed") @AT@ 6635 @LENGTH@ 48
------------INS StringLiteral@@"Nothing to do: the session is not closed" @TO@ SimpleName@@MethodName:info:["Nothing to do: the session is not closed"] @AT@ 6640 @LENGTH@ 42
---INS CatchClause@@catch (Exception e) {  LOG.error("Unable to reconnect to {}: {}",getEndpoint().getConnectionString(),e.getMessage(),e);  return false;} @TO@ TryStatement@@try {  LOG.info("Trying to reconnect to {}",getEndpoint().getConnectionString());  if (isServiceStopping(this)) {    return true;  }  if (isSessionClosed(session)) {    try {      LOG.info("Creating a new session to {}",getEndpoint().getConnectionString());      session=createSession();      LOG.info("Reconnected to {}",getEndpoint().getConnectionString());      return true;    } catch (    IOException e) {      LOG.warn("Failed to reconnect to {}",getEndpoint().getConnectionString());      closeSession();      return false;    }  }  LOG.info("Nothing to do: the session is not closed");} catch (Exception e) {  LOG.error("Unable to reconnect to {}: {}",getEndpoint().getConnectionString(),e.getMessage(),e);  return false;} @AT@ 6695 @LENGTH@ 169
------INS SingleVariableDeclaration@@Exception e @TO@ CatchClause@@catch (Exception e) {  LOG.error("Unable to reconnect to {}: {}",getEndpoint().getConnectionString(),e.getMessage(),e);  return false;} @AT@ 6702 @LENGTH@ 11
---------INS SimpleType@@Exception @TO@ SingleVariableDeclaration@@Exception e @AT@ 6702 @LENGTH@ 9
---------INS SimpleName@@e @TO@ SingleVariableDeclaration@@Exception e @AT@ 6712 @LENGTH@ 1
------INS ExpressionStatement@@MethodInvocation:LOG.error("Unable to reconnect to {}: {}",getEndpoint().getConnectionString(),e.getMessage(),e) @TO@ CatchClause@@catch (Exception e) {  LOG.error("Unable to reconnect to {}: {}",getEndpoint().getConnectionString(),e.getMessage(),e);  return false;} @AT@ 6729 @LENGTH@ 99
---------INS MethodInvocation@@LOG.error("Unable to reconnect to {}: {}",getEndpoint().getConnectionString(),e.getMessage(),e) @TO@ ExpressionStatement@@MethodInvocation:LOG.error("Unable to reconnect to {}: {}",getEndpoint().getConnectionString(),e.getMessage(),e) @AT@ 6729 @LENGTH@ 98
------------INS SimpleName@@Name:LOG @TO@ MethodInvocation@@LOG.error("Unable to reconnect to {}: {}",getEndpoint().getConnectionString(),e.getMessage(),e) @AT@ 6729 @LENGTH@ 3
------------INS SimpleName@@MethodName:error:["Unable to reconnect to {}: {}", getEndpoint().getConnectionString(), e.getMessage(), e] @TO@ MethodInvocation@@LOG.error("Unable to reconnect to {}: {}",getEndpoint().getConnectionString(),e.getMessage(),e) @AT@ 6733 @LENGTH@ 94
---------------INS StringLiteral@@"Unable to reconnect to {}: {}" @TO@ SimpleName@@MethodName:error:["Unable to reconnect to {}: {}", getEndpoint().getConnectionString(), e.getMessage(), e] @AT@ 6739 @LENGTH@ 31
---------------INS MethodInvocation@@getEndpoint().getConnectionString() @TO@ SimpleName@@MethodName:error:["Unable to reconnect to {}: {}", getEndpoint().getConnectionString(), e.getMessage(), e] @AT@ 6772 @LENGTH@ 35
------------------INS MethodInvocation@@MethodName:getEndpoint:[] @TO@ MethodInvocation@@getEndpoint().getConnectionString() @AT@ 6772 @LENGTH@ 13
------------------INS SimpleName@@MethodName:getConnectionString:[] @TO@ MethodInvocation@@getEndpoint().getConnectionString() @AT@ 6786 @LENGTH@ 21
---------------INS MethodInvocation@@e.getMessage() @TO@ SimpleName@@MethodName:error:["Unable to reconnect to {}: {}", getEndpoint().getConnectionString(), e.getMessage(), e] @AT@ 6809 @LENGTH@ 14
------------------INS SimpleName@@Name:e @TO@ MethodInvocation@@e.getMessage() @AT@ 6809 @LENGTH@ 1
------------------INS SimpleName@@MethodName:getMessage:[] @TO@ MethodInvocation@@e.getMessage() @AT@ 6811 @LENGTH@ 12
---------------INS SimpleName@@e @TO@ SimpleName@@MethodName:error:["Unable to reconnect to {}: {}", getEndpoint().getConnectionString(), e.getMessage(), e] @AT@ 6825 @LENGTH@ 1
------INS ReturnStatement@@BooleanLiteral:false @TO@ CatchClause@@catch (Exception e) {  LOG.error("Unable to reconnect to {}: {}",getEndpoint().getConnectionString(),e.getMessage(),e);  return false;} @AT@ 6841 @LENGTH@ 13
---------INS BooleanLiteral@@false @TO@ ReturnStatement@@BooleanLiteral:false @AT@ 6848 @LENGTH@ 5


INS MethodDeclaration@@public, Map<String,Object>, MethodName:endpointLenientProperties, Exchange exchange, String uri, Exception,  @TO@ TypeDeclaration@@[@SendDynamic("http,https"), public]HttpSendDynamicAware, org.apache.camel.http.base.HttpSendDynamicAware @AT@ 1126 @LENGTH@ 533
---INS Modifier@@public @TO@ MethodDeclaration@@public, Map<String,Object>, MethodName:endpointLenientProperties, Exchange exchange, String uri, Exception,  @AT@ 1126 @LENGTH@ 6
---INS ParameterizedType@@Map<String,Object> @TO@ MethodDeclaration@@public, Map<String,Object>, MethodName:endpointLenientProperties, Exchange exchange, String uri, Exception,  @AT@ 1133 @LENGTH@ 19
------INS SimpleType@@Map @TO@ ParameterizedType@@Map<String,Object> @AT@ 1133 @LENGTH@ 3
------INS SimpleType@@String @TO@ ParameterizedType@@Map<String,Object> @AT@ 1137 @LENGTH@ 6
------INS SimpleType@@Object @TO@ ParameterizedType@@Map<String,Object> @AT@ 1145 @LENGTH@ 6
---INS SimpleName@@MethodName:endpointLenientProperties @TO@ MethodDeclaration@@public, Map<String,Object>, MethodName:endpointLenientProperties, Exchange exchange, String uri, Exception,  @AT@ 1153 @LENGTH@ 25
---INS SingleVariableDeclaration@@Exchange exchange @TO@ MethodDeclaration@@public, Map<String,Object>, MethodName:endpointLenientProperties, Exchange exchange, String uri, Exception,  @AT@ 1179 @LENGTH@ 17
------INS SimpleType@@Exchange @TO@ SingleVariableDeclaration@@Exchange exchange @AT@ 1179 @LENGTH@ 8
------INS SimpleName@@exchange @TO@ SingleVariableDeclaration@@Exchange exchange @AT@ 1188 @LENGTH@ 8
---INS SingleVariableDeclaration@@String uri @TO@ MethodDeclaration@@public, Map<String,Object>, MethodName:endpointLenientProperties, Exchange exchange, String uri, Exception,  @AT@ 1198 @LENGTH@ 10
------INS SimpleType@@String @TO@ SingleVariableDeclaration@@String uri @AT@ 1198 @LENGTH@ 6
------INS SimpleName@@uri @TO@ SingleVariableDeclaration@@String uri @AT@ 1205 @LENGTH@ 3
---INS SimpleType@@Exception @TO@ MethodDeclaration@@public, Map<String,Object>, MethodName:endpointLenientProperties, Exchange exchange, String uri, Exception,  @AT@ 1217 @LENGTH@ 9
---INS VariableDeclarationStatement@@Map<String,Object> answer=new LinkedHashMap<>(); @TO@ MethodDeclaration@@public, Map<String,Object>, MethodName:endpointLenientProperties, Exchange exchange, String uri, Exception,  @AT@ 1237 @LENGTH@ 51
------INS ParameterizedType@@Map<String,Object> @TO@ VariableDeclarationStatement@@Map<String,Object> answer=new LinkedHashMap<>(); @AT@ 1237 @LENGTH@ 19
---------INS SimpleType@@Map @TO@ ParameterizedType@@Map<String,Object> @AT@ 1237 @LENGTH@ 3
---------INS SimpleType@@String @TO@ ParameterizedType@@Map<String,Object> @AT@ 1241 @LENGTH@ 6
---------INS SimpleType@@Object @TO@ ParameterizedType@@Map<String,Object> @AT@ 1249 @LENGTH@ 6
------INS VariableDeclarationFragment@@answer=new LinkedHashMap<>() @TO@ VariableDeclarationStatement@@Map<String,Object> answer=new LinkedHashMap<>(); @AT@ 1257 @LENGTH@ 30
---------INS SimpleName@@answer @TO@ VariableDeclarationFragment@@answer=new LinkedHashMap<>() @AT@ 1257 @LENGTH@ 6
---------INS ClassInstanceCreation@@LinkedHashMap<>[] @TO@ VariableDeclarationFragment@@answer=new LinkedHashMap<>() @AT@ 1266 @LENGTH@ 21
------------INS New@@new @TO@ ClassInstanceCreation@@LinkedHashMap<>[] @AT@ 1266 @LENGTH@ 3
------------INS ParameterizedType@@LinkedHashMap<> @TO@ ClassInstanceCreation@@LinkedHashMap<>[] @AT@ 1270 @LENGTH@ 15
---------------INS SimpleType@@LinkedHashMap @TO@ ParameterizedType@@LinkedHashMap<> @AT@ 1270 @LENGTH@ 13
---INS VariableDeclarationStatement@@Map<String,Object> properties=super.endpointLenientProperties(exchange,uri); @TO@ MethodDeclaration@@public, Map<String,Object>, MethodName:endpointLenientProperties, Exchange exchange, String uri, Exception,  @AT@ 1403 @LENGTH@ 80
------INS ParameterizedType@@Map<String,Object> @TO@ VariableDeclarationStatement@@Map<String,Object> properties=super.endpointLenientProperties(exchange,uri); @AT@ 1403 @LENGTH@ 19
---------INS SimpleType@@Map @TO@ ParameterizedType@@Map<String,Object> @AT@ 1403 @LENGTH@ 3
---------INS SimpleType@@String @TO@ ParameterizedType@@Map<String,Object> @AT@ 1407 @LENGTH@ 6
---------INS SimpleType@@Object @TO@ ParameterizedType@@Map<String,Object> @AT@ 1415 @LENGTH@ 6
------INS VariableDeclarationFragment@@properties=super.endpointLenientProperties(exchange,uri) @TO@ VariableDeclarationStatement@@Map<String,Object> properties=super.endpointLenientProperties(exchange,uri); @AT@ 1423 @LENGTH@ 59
---------INS SimpleName@@properties @TO@ VariableDeclarationFragment@@properties=super.endpointLenientProperties(exchange,uri) @AT@ 1423 @LENGTH@ 10
---------INS SuperMethodInvocation@@super.endpointLenientProperties(exchange,uri) @TO@ VariableDeclarationFragment@@properties=super.endpointLenientProperties(exchange,uri) @AT@ 1436 @LENGTH@ 46
------------INS SimpleName@@MethodName:endpointLenientProperties:[exchange, uri] @TO@ SuperMethodInvocation@@super.endpointLenientProperties(exchange,uri) @AT@ 1442 @LENGTH@ 25
------------INS SimpleName@@exchange @TO@ SuperMethodInvocation@@super.endpointLenientProperties(exchange,uri) @AT@ 1468 @LENGTH@ 8
------------INS SimpleName@@uri @TO@ SuperMethodInvocation@@super.endpointLenientProperties(exchange,uri) @AT@ 1478 @LENGTH@ 3
---INS ExpressionStatement@@MethodInvocation:properties.forEach((k,v) -> {
  if (!k.startsWith("httpClient.")) {
    answer.put(k,v);
  }
}
) @TO@ MethodDeclaration@@public, Map<String,Object>, MethodName:endpointLenientProperties, Exchange exchange, String uri, Exception,  @AT@ 1492 @LENGTH@ 138
------INS MethodInvocation@@properties.forEach((k,v) -> {
  if (!k.startsWith("httpClient.")) {
    answer.put(k,v);
  }
}
) @TO@ ExpressionStatement@@MethodInvocation:properties.forEach((k,v) -> {
  if (!k.startsWith("httpClient.")) {
    answer.put(k,v);
  }
}
) @AT@ 1492 @LENGTH@ 137
---------INS SimpleName@@Name:properties @TO@ MethodInvocation@@properties.forEach((k,v) -> {
  if (!k.startsWith("httpClient.")) {
    answer.put(k,v);
  }
}
) @AT@ 1492 @LENGTH@ 10
---------INS SimpleName@@MethodName:forEach:[(k,v) -> {
  if (!k.startsWith("httpClient.")) {
    answer.put(k,v);
  }
}
] @TO@ MethodInvocation@@properties.forEach((k,v) -> {
  if (!k.startsWith("httpClient.")) {
    answer.put(k,v);
  }
}
) @AT@ 1503 @LENGTH@ 126
------------INS LambdaExpression@@(k,v) -> {
  if (!k.startsWith("httpClient.")) {
    answer.put(k,v);
  }
}
 @TO@ SimpleName@@MethodName:forEach:[(k,v) -> {
  if (!k.startsWith("httpClient.")) {
    answer.put(k,v);
  }
}
] @AT@ 1511 @LENGTH@ 117
---------------INS VariableDeclarationFragment@@k @TO@ LambdaExpression@@(k,v) -> {
  if (!k.startsWith("httpClient.")) {
    answer.put(k,v);
  }
}
 @AT@ 1512 @LENGTH@ 1
------------------INS SimpleName@@k @TO@ VariableDeclarationFragment@@k @AT@ 1512 @LENGTH@ 1
---------------INS VariableDeclarationFragment@@v @TO@ LambdaExpression@@(k,v) -> {
  if (!k.startsWith("httpClient.")) {
    answer.put(k,v);
  }
}
 @AT@ 1515 @LENGTH@ 1
------------------INS SimpleName@@v @TO@ VariableDeclarationFragment@@v @AT@ 1515 @LENGTH@ 1
---------------INS IfStatement@@if (!k.startsWith("httpClient.")) {  answer.put(k,v);} @TO@ LambdaExpression@@(k,v) -> {
  if (!k.startsWith("httpClient.")) {
    answer.put(k,v);
  }
}
 @AT@ 1535 @LENGTH@ 83
------------------INS PrefixExpression@@!k.startsWith("httpClient.") @TO@ IfStatement@@if (!k.startsWith("httpClient.")) {  answer.put(k,v);} @AT@ 1539 @LENGTH@ 28
---------------------INS Operator@@! @TO@ PrefixExpression@@!k.startsWith("httpClient.") @AT@ 1539 @LENGTH@ 1
---------------------INS MethodInvocation@@k.startsWith("httpClient.") @TO@ PrefixExpression@@!k.startsWith("httpClient.") @AT@ 1540 @LENGTH@ 27
------------------------INS SimpleName@@Name:k @TO@ MethodInvocation@@k.startsWith("httpClient.") @AT@ 1540 @LENGTH@ 1
------------------------INS SimpleName@@MethodName:startsWith:["httpClient."] @TO@ MethodInvocation@@k.startsWith("httpClient.") @AT@ 1542 @LENGTH@ 25
---------------------------INS StringLiteral@@"httpClient." @TO@ SimpleName@@MethodName:startsWith:["httpClient."] @AT@ 1553 @LENGTH@ 13
------------------INS Block@@ThenBody:{  answer.put(k,v);} @TO@ IfStatement@@if (!k.startsWith("httpClient.")) {  answer.put(k,v);} @AT@ 1569 @LENGTH@ 49
---------------------INS ExpressionStatement@@MethodInvocation:answer.put(k,v) @TO@ Block@@ThenBody:{  answer.put(k,v);} @AT@ 1587 @LENGTH@ 17
------------------------INS MethodInvocation@@answer.put(k,v) @TO@ ExpressionStatement@@MethodInvocation:answer.put(k,v) @AT@ 1587 @LENGTH@ 16
---------------------------INS SimpleName@@Name:answer @TO@ MethodInvocation@@answer.put(k,v) @AT@ 1587 @LENGTH@ 6
---------------------------INS SimpleName@@MethodName:put:[k, v] @TO@ MethodInvocation@@answer.put(k,v) @AT@ 1594 @LENGTH@ 9
------------------------------INS SimpleName@@k @TO@ SimpleName@@MethodName:put:[k, v] @AT@ 1598 @LENGTH@ 1
------------------------------INS SimpleName@@v @TO@ SimpleName@@MethodName:put:[k, v] @AT@ 1601 @LENGTH@ 1
---INS ReturnStatement@@SimpleName:answer @TO@ MethodDeclaration@@public, Map<String,Object>, MethodName:endpointLenientProperties, Exchange exchange, String uri, Exception,  @AT@ 1639 @LENGTH@ 14
------INS SimpleName@@answer @TO@ ReturnStatement@@SimpleName:answer @AT@ 1646 @LENGTH@ 6


UPD MethodDeclaration@@private, ConnectionFactory, MethodName:obtainTargetConnectionFactory, Expression expression, Object rootObject,  @TO@ private, ConnectionFactory, MethodName:obtainTargetConnectionFactory, Expression expression, @Nullable Object rootObject,  @AT@ 41980 @LENGTH@ 974
---UPD SingleVariableDeclaration@@Object rootObject @TO@ @Nullable Object rootObject @AT@ 42059 @LENGTH@ 17


MOV MethodDeclaration@@protected, voidMethodName:ExtendedRouteBuilderLoaderSupport, String extension,  @TO@ TypeDeclaration@@[public, abstract]ExtendedRouteBuilderLoaderSupport, RouteBuilderLoaderSupport[ExtendedRoutesBuilderLoader] @AT@ 1317 @LENGTH@ 95


UPD ExpressionStatement@@MethodInvocation:exchange.getOut().setBody("Bye " + body) @TO@ MethodInvocation:exchange.getMessage().setBody("Bye " + body) @AT@ 3202 @LENGTH@ 41
---UPD MethodInvocation@@exchange.getOut().setBody("Bye " + body) @TO@ exchange.getMessage().setBody("Bye " + body) @AT@ 3202 @LENGTH@ 40
------UPD MethodInvocation@@MethodName:getOut:[] @TO@ MethodName:getMessage:[] @AT@ 3202 @LENGTH@ 17


MOV MethodDeclaration@@default, Class<?>, MethodName:getDomainType,  @TO@ TypeDeclaration@@[public]RepositoryMetadata,  @AT@ 1936 @LENGTH@ 84


INS MethodDeclaration@@public, void, MethodName:hasAuthorityWhenUserHasNotCustomAuthorityThenDeniedDecision,  @TO@ TypeDeclaration@@[public]AuthorityAuthorizationManagerTests,  @AT@ 5476 @LENGTH@ 505
---INS Modifier@@public @TO@ MethodDeclaration@@public, void, MethodName:hasAuthorityWhenUserHasNotCustomAuthorityThenDeniedDecision,  @AT@ 5476 @LENGTH@ 6
---INS PrimitiveType@@void @TO@ MethodDeclaration@@public, void, MethodName:hasAuthorityWhenUserHasNotCustomAuthorityThenDeniedDecision,  @AT@ 5483 @LENGTH@ 4
---INS SimpleName@@MethodName:hasAuthorityWhenUserHasNotCustomAuthorityThenDeniedDecision @TO@ MethodDeclaration@@public, void, MethodName:hasAuthorityWhenUserHasNotCustomAuthorityThenDeniedDecision,  @AT@ 5488 @LENGTH@ 59
---INS VariableDeclarationStatement@@AuthorityAuthorizationManager<Object> manager=AuthorityAuthorizationManager.hasAuthority("ADMIN"); @TO@ MethodDeclaration@@public, void, MethodName:hasAuthorityWhenUserHasNotCustomAuthorityThenDeniedDecision,  @AT@ 5554 @LENGTH@ 100
------INS ParameterizedType@@AuthorityAuthorizationManager<Object> @TO@ VariableDeclarationStatement@@AuthorityAuthorizationManager<Object> manager=AuthorityAuthorizationManager.hasAuthority("ADMIN"); @AT@ 5554 @LENGTH@ 37
---------INS SimpleType@@AuthorityAuthorizationManager @TO@ ParameterizedType@@AuthorityAuthorizationManager<Object> @AT@ 5554 @LENGTH@ 29
---------INS SimpleType@@Object @TO@ ParameterizedType@@AuthorityAuthorizationManager<Object> @AT@ 5584 @LENGTH@ 6
------INS VariableDeclarationFragment@@manager=AuthorityAuthorizationManager.hasAuthority("ADMIN") @TO@ VariableDeclarationStatement@@AuthorityAuthorizationManager<Object> manager=AuthorityAuthorizationManager.hasAuthority("ADMIN"); @AT@ 5592 @LENGTH@ 61
---------INS SimpleName@@manager @TO@ VariableDeclarationFragment@@manager=AuthorityAuthorizationManager.hasAuthority("ADMIN") @AT@ 5592 @LENGTH@ 7
---------INS MethodInvocation@@AuthorityAuthorizationManager.hasAuthority("ADMIN") @TO@ VariableDeclarationFragment@@manager=AuthorityAuthorizationManager.hasAuthority("ADMIN") @AT@ 5602 @LENGTH@ 51
------------INS SimpleName@@Name:AuthorityAuthorizationManager @TO@ MethodInvocation@@AuthorityAuthorizationManager.hasAuthority("ADMIN") @AT@ 5602 @LENGTH@ 29
------------INS SimpleName@@MethodName:hasAuthority:["ADMIN"] @TO@ MethodInvocation@@AuthorityAuthorizationManager.hasAuthority("ADMIN") @AT@ 5632 @LENGTH@ 21
---------------INS StringLiteral@@"ADMIN" @TO@ SimpleName@@MethodName:hasAuthority:["ADMIN"] @AT@ 5645 @LENGTH@ 7
---INS VariableDeclarationStatement@@GrantedAuthority customGrantedAuthority=() -> "USER"; @TO@ MethodDeclaration@@public, void, MethodName:hasAuthorityWhenUserHasNotCustomAuthorityThenDeniedDecision,  @AT@ 5657 @LENGTH@ 55
------INS SimpleType@@GrantedAuthority @TO@ VariableDeclarationStatement@@GrantedAuthority customGrantedAuthority=() -> "USER"; @AT@ 5657 @LENGTH@ 16
------INS VariableDeclarationFragment@@customGrantedAuthority=() -> "USER" @TO@ VariableDeclarationStatement@@GrantedAuthority customGrantedAuthority=() -> "USER"; @AT@ 5674 @LENGTH@ 37
---------INS SimpleName@@customGrantedAuthority @TO@ VariableDeclarationFragment@@customGrantedAuthority=() -> "USER" @AT@ 5674 @LENGTH@ 22
---------INS LambdaExpression@@() -> "USER" @TO@ VariableDeclarationFragment@@customGrantedAuthority=() -> "USER" @AT@ 5699 @LENGTH@ 12
------------INS StringLiteral@@"USER" @TO@ LambdaExpression@@() -> "USER" @AT@ 5705 @LENGTH@ 6
---INS VariableDeclarationStatement@@Supplier<Authentication> authentication=() -> new TestingAuthenticationToken("user","password",Collections.singletonList(customGrantedAuthority)); @TO@ MethodDeclaration@@public, void, MethodName:hasAuthorityWhenUserHasNotCustomAuthorityThenDeniedDecision,  @AT@ 5716 @LENGTH@ 154
------INS ParameterizedType@@Supplier<Authentication> @TO@ VariableDeclarationStatement@@Supplier<Authentication> authentication=() -> new TestingAuthenticationToken("user","password",Collections.singletonList(customGrantedAuthority)); @AT@ 5716 @LENGTH@ 24
---------INS SimpleType@@Supplier @TO@ ParameterizedType@@Supplier<Authentication> @AT@ 5716 @LENGTH@ 8
---------INS SimpleType@@Authentication @TO@ ParameterizedType@@Supplier<Authentication> @AT@ 5725 @LENGTH@ 14
------INS VariableDeclarationFragment@@authentication=() -> new TestingAuthenticationToken("user","password",Collections.singletonList(customGrantedAuthority)) @TO@ VariableDeclarationStatement@@Supplier<Authentication> authentication=() -> new TestingAuthenticationToken("user","password",Collections.singletonList(customGrantedAuthority)); @AT@ 5741 @LENGTH@ 128
---------INS SimpleName@@authentication @TO@ VariableDeclarationFragment@@authentication=() -> new TestingAuthenticationToken("user","password",Collections.singletonList(customGrantedAuthority)) @AT@ 5741 @LENGTH@ 14
---------INS LambdaExpression@@() -> new TestingAuthenticationToken("user","password",Collections.singletonList(customGrantedAuthority)) @TO@ VariableDeclarationFragment@@authentication=() -> new TestingAuthenticationToken("user","password",Collections.singletonList(customGrantedAuthority)) @AT@ 5758 @LENGTH@ 111
------------INS ClassInstanceCreation@@TestingAuthenticationToken["user", "password", Collections.singletonList(customGrantedAuthority)] @TO@ LambdaExpression@@() -> new TestingAuthenticationToken("user","password",Collections.singletonList(customGrantedAuthority)) @AT@ 5764 @LENGTH@ 105
---------------INS New@@new @TO@ ClassInstanceCreation@@TestingAuthenticationToken["user", "password", Collections.singletonList(customGrantedAuthority)] @AT@ 5764 @LENGTH@ 3
---------------INS SimpleType@@TestingAuthenticationToken @TO@ ClassInstanceCreation@@TestingAuthenticationToken["user", "password", Collections.singletonList(customGrantedAuthority)] @AT@ 5768 @LENGTH@ 26
---------------INS StringLiteral@@"user" @TO@ ClassInstanceCreation@@TestingAuthenticationToken["user", "password", Collections.singletonList(customGrantedAuthority)] @AT@ 5795 @LENGTH@ 6
---------------INS StringLiteral@@"password" @TO@ ClassInstanceCreation@@TestingAuthenticationToken["user", "password", Collections.singletonList(customGrantedAuthority)] @AT@ 5803 @LENGTH@ 10
---------------INS MethodInvocation@@Collections.singletonList(customGrantedAuthority) @TO@ ClassInstanceCreation@@TestingAuthenticationToken["user", "password", Collections.singletonList(customGrantedAuthority)] @AT@ 5819 @LENGTH@ 49
------------------INS SimpleName@@Name:Collections @TO@ MethodInvocation@@Collections.singletonList(customGrantedAuthority) @AT@ 5819 @LENGTH@ 11
------------------INS SimpleName@@MethodName:singletonList:[customGrantedAuthority] @TO@ MethodInvocation@@Collections.singletonList(customGrantedAuthority) @AT@ 5831 @LENGTH@ 37
---------------------INS SimpleName@@customGrantedAuthority @TO@ SimpleName@@MethodName:singletonList:[customGrantedAuthority] @AT@ 5845 @LENGTH@ 22
---INS VariableDeclarationStatement@@Object object=new Object(); @TO@ MethodDeclaration@@public, void, MethodName:hasAuthorityWhenUserHasNotCustomAuthorityThenDeniedDecision,  @AT@ 5873 @LENGTH@ 29
------INS SimpleType@@Object @TO@ VariableDeclarationStatement@@Object object=new Object(); @AT@ 5873 @LENGTH@ 6
------INS VariableDeclarationFragment@@object=new Object() @TO@ VariableDeclarationStatement@@Object object=new Object(); @AT@ 5880 @LENGTH@ 21
---------INS SimpleName@@object @TO@ VariableDeclarationFragment@@object=new Object() @AT@ 5880 @LENGTH@ 6
---------INS ClassInstanceCreation@@Object[] @TO@ VariableDeclarationFragment@@object=new Object() @AT@ 5889 @LENGTH@ 12
------------INS New@@new @TO@ ClassInstanceCreation@@Object[] @AT@ 5889 @LENGTH@ 3
------------INS SimpleType@@Object @TO@ ClassInstanceCreation@@Object[] @AT@ 5893 @LENGTH@ 6
---INS ExpressionStatement@@MethodInvocation:assertThat(manager.check(authentication,object).isGranted()).isFalse() @TO@ MethodDeclaration@@public, void, MethodName:hasAuthorityWhenUserHasNotCustomAuthorityThenDeniedDecision,  @AT@ 5906 @LENGTH@ 72
------INS MethodInvocation@@assertThat(manager.check(authentication,object).isGranted()).isFalse() @TO@ ExpressionStatement@@MethodInvocation:assertThat(manager.check(authentication,object).isGranted()).isFalse() @AT@ 5906 @LENGTH@ 71
---------INS MethodInvocation@@MethodName:assertThat:[manager.check(authentication,object).isGranted()] @TO@ MethodInvocation@@assertThat(manager.check(authentication,object).isGranted()).isFalse() @AT@ 5906 @LENGTH@ 61
------------INS MethodInvocation@@manager.check(authentication,object).isGranted() @TO@ MethodInvocation@@MethodName:assertThat:[manager.check(authentication,object).isGranted()] @AT@ 5917 @LENGTH@ 49
---------------INS MethodInvocation@@MethodName:check:[authentication, object] @TO@ MethodInvocation@@manager.check(authentication,object).isGranted() @AT@ 5917 @LENGTH@ 37
------------------INS SimpleName@@authentication @TO@ MethodInvocation@@MethodName:check:[authentication, object] @AT@ 5931 @LENGTH@ 14
------------------INS SimpleName@@object @TO@ MethodInvocation@@MethodName:check:[authentication, object] @AT@ 5947 @LENGTH@ 6
---------------INS SimpleName@@Name:manager @TO@ MethodInvocation@@manager.check(authentication,object).isGranted() @AT@ 5917 @LENGTH@ 7
---------------INS SimpleName@@MethodName:isGranted:[] @TO@ MethodInvocation@@manager.check(authentication,object).isGranted() @AT@ 5955 @LENGTH@ 11
---------INS SimpleName@@MethodName:isFalse:[] @TO@ MethodInvocation@@assertThat(manager.check(authentication,object).isGranted()).isFalse() @AT@ 5968 @LENGTH@ 9


UPD MethodDeclaration@@private, void, MethodName:scheduleCompactionIfRequired, CompactionInfo ci, Table t, Partition p, String runAs, MetaException,  @TO@ private, void, MethodName:scheduleCompactionIfRequired, CompactionInfo ci, Table t, Partition p, String runAs, boolean metricsEnabled, MetaException,  @AT@ 11063 @LENGTH@ 745
---UPD TryStatement@@try {  ValidWriteIdList validWriteIds=resolveValidWriteIds(t);  CompactionType type=checkForCompaction(ci,validWriteIds,sd,t.getParameters(),runAs);  if (type != null) {    requestCompaction(ci,runAs,type);  }} catch (Throwable ex) {  String errorMessage="Caught exception while trying to determine if we should compact " + ci + ". Marking "+ "failed to avoid repeated failures, "+ ex;  LOG.error(errorMessage);  ci.errorMessage=errorMessage;  txnHandler.markFailed(ci);} @TO@ try {  ValidWriteIdList validWriteIds=resolveValidWriteIds(t);  CompactionType type=checkForCompaction(ci,validWriteIds,sd,t.getParameters(),runAs);  if (type != null) {    requestCompaction(ci,runAs,type);  }} catch (Throwable ex) {  String errorMessage="Caught exception while trying to determine if we should compact " + ci + ". Marking "+ "failed to avoid repeated failures, "+ ex;  LOG.error(errorMessage);  ci.errorMessage=errorMessage;  if (metricsEnabled) {    Metrics.getOrCreateCounter(MetricsConstants.COMPACTION_INITIATOR_FAILURE_COUNTER).inc();  }  txnHandler.markFailed(ci);} @AT@ 11252 @LENGTH@ 552
------UPD CatchClause@@catch (Throwable ex) {  String errorMessage="Caught exception while trying to determine if we should compact " + ci + ". Marking "+ "failed to avoid repeated failures, "+ ex;  LOG.error(errorMessage);  ci.errorMessage=errorMessage;  txnHandler.markFailed(ci);} @TO@ catch (Throwable ex) {  String errorMessage="Caught exception while trying to determine if we should compact " + ci + ". Marking "+ "failed to avoid repeated failures, "+ ex;  LOG.error(errorMessage);  ci.errorMessage=errorMessage;  if (metricsEnabled) {    Metrics.getOrCreateCounter(MetricsConstants.COMPACTION_INITIATOR_FAILURE_COUNTER).inc();  }  txnHandler.markFailed(ci);} @AT@ 11503 @LENGTH@ 301
---------INS IfStatement@@if (metricsEnabled) {  Metrics.getOrCreateCounter(MetricsConstants.COMPACTION_INITIATOR_FAILURE_COUNTER).inc();} @TO@ CatchClause@@catch (Throwable ex) {  String errorMessage="Caught exception while trying to determine if we should compact " + ci + ". Marking "+ "failed to avoid repeated failures, "+ ex;  LOG.error(errorMessage);  ci.errorMessage=errorMessage;  txnHandler.markFailed(ci);} @AT@ 12002 @LENGTH@ 126
------------INS SimpleName@@metricsEnabled @TO@ IfStatement@@if (metricsEnabled) {  Metrics.getOrCreateCounter(MetricsConstants.COMPACTION_INITIATOR_FAILURE_COUNTER).inc();} @AT@ 12006 @LENGTH@ 14
------------INS Block@@ThenBody:{  Metrics.getOrCreateCounter(MetricsConstants.COMPACTION_INITIATOR_FAILURE_COUNTER).inc();} @TO@ IfStatement@@if (metricsEnabled) {  Metrics.getOrCreateCounter(MetricsConstants.COMPACTION_INITIATOR_FAILURE_COUNTER).inc();} @AT@ 12022 @LENGTH@ 106
---------------INS ExpressionStatement@@MethodInvocation:Metrics.getOrCreateCounter(MetricsConstants.COMPACTION_INITIATOR_FAILURE_COUNTER).inc() @TO@ Block@@ThenBody:{  Metrics.getOrCreateCounter(MetricsConstants.COMPACTION_INITIATOR_FAILURE_COUNTER).inc();} @AT@ 12032 @LENGTH@ 88
------------------INS MethodInvocation@@Metrics.getOrCreateCounter(MetricsConstants.COMPACTION_INITIATOR_FAILURE_COUNTER).inc() @TO@ ExpressionStatement@@MethodInvocation:Metrics.getOrCreateCounter(MetricsConstants.COMPACTION_INITIATOR_FAILURE_COUNTER).inc() @AT@ 12032 @LENGTH@ 87
---------------------INS MethodInvocation@@MethodName:getOrCreateCounter:[MetricsConstants.COMPACTION_INITIATOR_FAILURE_COUNTER] @TO@ MethodInvocation@@Metrics.getOrCreateCounter(MetricsConstants.COMPACTION_INITIATOR_FAILURE_COUNTER).inc() @AT@ 12032 @LENGTH@ 81
------------------------INS QualifiedName@@MetricsConstants.COMPACTION_INITIATOR_FAILURE_COUNTER @TO@ MethodInvocation@@MethodName:getOrCreateCounter:[MetricsConstants.COMPACTION_INITIATOR_FAILURE_COUNTER] @AT@ 12059 @LENGTH@ 53
---------------------------INS SimpleName@@MetricsConstants @TO@ QualifiedName@@MetricsConstants.COMPACTION_INITIATOR_FAILURE_COUNTER @AT@ 12059 @LENGTH@ 16
---------------------------INS SimpleName@@COMPACTION_INITIATOR_FAILURE_COUNTER @TO@ QualifiedName@@MetricsConstants.COMPACTION_INITIATOR_FAILURE_COUNTER @AT@ 12076 @LENGTH@ 36
---------------------INS SimpleName@@Name:Metrics @TO@ MethodInvocation@@Metrics.getOrCreateCounter(MetricsConstants.COMPACTION_INITIATOR_FAILURE_COUNTER).inc() @AT@ 12032 @LENGTH@ 7
---------------------INS SimpleName@@MethodName:inc:[] @TO@ MethodInvocation@@Metrics.getOrCreateCounter(MetricsConstants.COMPACTION_INITIATOR_FAILURE_COUNTER).inc() @AT@ 12114 @LENGTH@ 5
---INS SingleVariableDeclaration@@boolean metricsEnabled @TO@ MethodDeclaration@@private, void, MethodName:scheduleCompactionIfRequired, CompactionInfo ci, Table t, Partition p, String runAs, MetaException,  @AT@ 11366 @LENGTH@ 22
------INS PrimitiveType@@boolean @TO@ SingleVariableDeclaration@@boolean metricsEnabled @AT@ 11366 @LENGTH@ 7
------INS SimpleName@@metricsEnabled @TO@ SingleVariableDeclaration@@boolean metricsEnabled @AT@ 11374 @LENGTH@ 14


UPD ExpressionStatement@@MethodInvocation:assertThat(taxonomy.getName(),not(isEmptyOrNullString())) @TO@ MethodInvocation:assertThat(taxonomy.getName(),not(emptyOrNullString())) @AT@ 2186 @LENGTH@ 59
---UPD MethodInvocation@@assertThat(taxonomy.getName(),not(isEmptyOrNullString())) @TO@ assertThat(taxonomy.getName(),not(emptyOrNullString())) @AT@ 2186 @LENGTH@ 58
------UPD SimpleName@@MethodName:assertThat:[taxonomy.getName(), not(isEmptyOrNullString())] @TO@ MethodName:assertThat:[taxonomy.getName(), not(emptyOrNullString())] @AT@ 2186 @LENGTH@ 58
---------UPD MethodInvocation@@not(isEmptyOrNullString()) @TO@ not(emptyOrNullString()) @AT@ 2217 @LENGTH@ 26
------------UPD SimpleName@@MethodName:not:[isEmptyOrNullString()] @TO@ MethodName:not:[emptyOrNullString()] @AT@ 2217 @LENGTH@ 26
---------------UPD MethodInvocation@@MethodName:isEmptyOrNullString:[] @TO@ MethodName:emptyOrNullString:[] @AT@ 2221 @LENGTH@ 21
------------UPD SimpleName@@MethodName:not:[isEmptyOrNullString()] @TO@ MethodName:not:[emptyOrNullString()] @AT@ 2217 @LENGTH@ 26
---------------UPD MethodInvocation@@MethodName:isEmptyOrNullString:[] @TO@ MethodName:emptyOrNullString:[] @AT@ 2221 @LENGTH@ 21


UPD TryStatement@@try {  dbConn=getDbConn(Connection.TRANSACTION_READ_COMMITTED);  List<String> params=new ArrayList<>();  StringBuilder sb=new StringBuilder().append("SELECT * FROM (").append("   SELECT").append("   \"CC_ID\", \"CC_DATABASE\", \"CC_TABLE\", \"CC_PARTITION\", \"CC_TYPE\"").append("   FROM \"COMPLETED_COMPACTIONS\"").append("     WHERE \"CC_STATE\" = " + quoteChar(SUCCEEDED_STATE)).append("   UNION ALL").append("   SELECT").append("   \"CQ_ID\" AS \"CC_ID\", \"CQ_DATABASE\" AS \"CC_DATABASE\"").append("   ,\"CQ_TABLE\" AS \"CC_TABLE\", \"CQ_PARTITION\" AS \"CC_PARTITION\"").append("   ,\"CQ_TYPE\" AS \"CC_TYPE\"").append("   FROM \"COMPACTION_QUEUE\"").append("     WHERE \"CQ_STATE\" = " + quoteChar(READY_FOR_CLEANING)).append(") AS compactions ").append(" WHERE \"CC_DATABASE\" = ? AND \"CC_TABLE\" = ?");  params.add(rqst.getDbname());  params.add(rqst.getTablename());  if (rqst.getPartitionnamesSize() > 0) {    sb.append(" AND \"CC_PARTITION\" IN (");    sb.append(String.join(",",Collections.nCopies(rqst.getPartitionnamesSize(),"?")));    sb.append(")");    params.addAll(rqst.getPartitionnames());  }  if (rqst.isSetLastCompactionId()) {    sb.append(" AND \"CC_ID\" > ?");    params.add(String.valueOf(rqst.getLastCompactionId()));  }  sb.append(" ORDER BY \"CC_ID\" DESC");  pst=sqlGenerator.prepareStmtWithParameters(dbConn,sb.toString(),params);  LOG.debug("Going to execute query <" + sb.toString() + ">");  rs=pst.executeQuery();  Set<String> partitionSet=new HashSet<>();  while (rs.next()) {    CompactionInfoStruct lci=new CompactionInfoStruct();    lci.setId(rs.getLong(1));    lci.setDbname(rs.getString(2));    lci.setTablename(rs.getString(3));    String partition=rs.getString(4);    if (!rs.wasNull()) {      lci.setPartitionname(partition);    }    lci.setType(dbCompactionType2ThriftType(rs.getString(5).charAt(0)));    if (!partitionSet.contains(partition)) {      response.addToCompactions(lci);      partitionSet.add(partition);    }  }} catch (SQLException e) {  LOG.error("Unable to execute query " + e.getMessage());  checkRetryable(e,"getLatestCommittedCompactionInfo");} finally {  close(rs,pst,dbConn);} @TO@ try {  dbConn=getDbConn(Connection.TRANSACTION_READ_COMMITTED);  List<String> params=new ArrayList<>();  StringBuilder sb=new StringBuilder().append("SELECT * FROM (").append("   SELECT").append("   \"CC_ID\", \"CC_DATABASE\", \"CC_TABLE\", \"CC_PARTITION\", \"CC_TYPE\"").append("   FROM \"COMPLETED_COMPACTIONS\"").append("     WHERE \"CC_STATE\" = " + quoteChar(SUCCEEDED_STATE)).append("   UNION ALL").append("   SELECT").append("   \"CQ_ID\" AS \"CC_ID\", \"CQ_DATABASE\" AS \"CC_DATABASE\"").append("   ,\"CQ_TABLE\" AS \"CC_TABLE\", \"CQ_PARTITION\" AS \"CC_PARTITION\"").append("   ,\"CQ_TYPE\" AS \"CC_TYPE\"").append("   FROM \"COMPACTION_QUEUE\"").append("     WHERE \"CQ_STATE\" = " + quoteChar(READY_FOR_CLEANING)).append(") AS compactions ").append(" WHERE \"CC_DATABASE\" = ? AND \"CC_TABLE\" = ?");  params.add(rqst.getDbname());  params.add(rqst.getTablename());  if (rqst.getPartitionnamesSize() > 0) {    sb.append(" AND \"CC_PARTITION\" IN (");    sb.append(String.join(",",Collections.nCopies(rqst.getPartitionnamesSize(),"?")));    sb.append(")");    params.addAll(rqst.getPartitionnames());  }  if (rqst.isSetLastCompactionId()) {    sb.append(" AND \"CC_ID\" > ?");  }  sb.append(" ORDER BY \"CC_ID\" DESC");  pst=sqlGenerator.prepareStmtWithParameters(dbConn,sb.toString(),params);  if (rqst.isSetLastCompactionId()) {    pst.setLong(params.size() + 1,rqst.getLastCompactionId());  }  LOG.debug("Going to execute query <{}>",sb);  rs=pst.executeQuery();  Set<String> partitionSet=new HashSet<>();  while (rs.next()) {    CompactionInfoStruct lci=new CompactionInfoStruct();    lci.setId(rs.getLong(1));    lci.setDbname(rs.getString(2));    lci.setTablename(rs.getString(3));    String partition=rs.getString(4);    if (!rs.wasNull()) {      lci.setPartitionname(partition);    }    lci.setType(dbCompactionType2ThriftType(rs.getString(5).charAt(0)));    if (!partitionSet.contains(partition)) {      response.addToCompactions(lci);      partitionSet.add(partition);    }  }} catch (SQLException e) {  LOG.error("Unable to execute query",e);  checkRetryable(e,"getLatestCommittedCompactionInfo");} finally {  close(rs,pst,dbConn);} @AT@ 185840 @LENGTH@ 2987
---UPD IfStatement@@if (rqst.isSetLastCompactionId()) {  sb.append(" AND \"CC_ID\" > ?");  params.add(String.valueOf(rqst.getLastCompactionId()));} @TO@ if (rqst.isSetLastCompactionId()) {  sb.append(" AND \"CC_ID\" > ?");} @AT@ 187509 @LENGTH@ 154
------UPD Block@@ThenBody:{  sb.append(" AND \"CC_ID\" > ?");  params.add(String.valueOf(rqst.getLastCompactionId()));} @TO@ ThenBody:{  sb.append(" AND \"CC_ID\" > ?");} @AT@ 187543 @LENGTH@ 120
---------DEL ExpressionStatement@@MethodInvocation:params.add(String.valueOf(rqst.getLastCompactionId())) @AT@ 187598 @LENGTH@ 55
------------DEL MethodInvocation@@params.add(String.valueOf(rqst.getLastCompactionId())) @AT@ 187598 @LENGTH@ 54
---------------DEL SimpleName@@Name:params @AT@ 187598 @LENGTH@ 6
---------------DEL SimpleName@@MethodName:add:[String.valueOf(rqst.getLastCompactionId())] @AT@ 187605 @LENGTH@ 47
------------------DEL MethodInvocation@@String.valueOf(rqst.getLastCompactionId()) @AT@ 187609 @LENGTH@ 42
---------------------DEL SimpleName@@Name:String @AT@ 187609 @LENGTH@ 6
---------------------DEL SimpleName@@MethodName:valueOf:[rqst.getLastCompactionId()] @AT@ 187616 @LENGTH@ 35
------------------------DEL MethodInvocation@@rqst.getLastCompactionId() @AT@ 187624 @LENGTH@ 26
---------------------------DEL SimpleName@@Name:rqst @AT@ 187624 @LENGTH@ 4
---------------------------DEL SimpleName@@MethodName:getLastCompactionId:[] @AT@ 187629 @LENGTH@ 21
---INS IfStatement@@if (rqst.isSetLastCompactionId()) {  pst.setLong(params.size() + 1,rqst.getLastCompactionId());} @TO@ TryStatement@@try {  dbConn=getDbConn(Connection.TRANSACTION_READ_COMMITTED);  List<String> params=new ArrayList<>();  StringBuilder sb=new StringBuilder().append("SELECT * FROM (").append("   SELECT").append("   \"CC_ID\", \"CC_DATABASE\", \"CC_TABLE\", \"CC_PARTITION\", \"CC_TYPE\"").append("   FROM \"COMPLETED_COMPACTIONS\"").append("     WHERE \"CC_STATE\" = " + quoteChar(SUCCEEDED_STATE)).append("   UNION ALL").append("   SELECT").append("   \"CQ_ID\" AS \"CC_ID\", \"CQ_DATABASE\" AS \"CC_DATABASE\"").append("   ,\"CQ_TABLE\" AS \"CC_TABLE\", \"CQ_PARTITION\" AS \"CC_PARTITION\"").append("   ,\"CQ_TYPE\" AS \"CC_TYPE\"").append("   FROM \"COMPACTION_QUEUE\"").append("     WHERE \"CQ_STATE\" = " + quoteChar(READY_FOR_CLEANING)).append(") AS compactions ").append(" WHERE \"CC_DATABASE\" = ? AND \"CC_TABLE\" = ?");  params.add(rqst.getDbname());  params.add(rqst.getTablename());  if (rqst.getPartitionnamesSize() > 0) {    sb.append(" AND \"CC_PARTITION\" IN (");    sb.append(String.join(",",Collections.nCopies(rqst.getPartitionnamesSize(),"?")));    sb.append(")");    params.addAll(rqst.getPartitionnames());  }  if (rqst.isSetLastCompactionId()) {    sb.append(" AND \"CC_ID\" > ?");    params.add(String.valueOf(rqst.getLastCompactionId()));  }  sb.append(" ORDER BY \"CC_ID\" DESC");  pst=sqlGenerator.prepareStmtWithParameters(dbConn,sb.toString(),params);  LOG.debug("Going to execute query <" + sb.toString() + ">");  rs=pst.executeQuery();  Set<String> partitionSet=new HashSet<>();  while (rs.next()) {    CompactionInfoStruct lci=new CompactionInfoStruct();    lci.setId(rs.getLong(1));    lci.setDbname(rs.getString(2));    lci.setTablename(rs.getString(3));    String partition=rs.getString(4);    if (!rs.wasNull()) {      lci.setPartitionname(partition);    }    lci.setType(dbCompactionType2ThriftType(rs.getString(5).charAt(0)));    if (!partitionSet.contains(partition)) {      response.addToCompactions(lci);      partitionSet.add(partition);    }  }} catch (SQLException e) {  LOG.error("Unable to execute query " + e.getMessage());  checkRetryable(e,"getLatestCommittedCompactionInfo");} finally {  close(rs,pst,dbConn);} @AT@ 187739 @LENGTH@ 115
------INS MethodInvocation@@rqst.isSetLastCompactionId() @TO@ IfStatement@@if (rqst.isSetLastCompactionId()) {  pst.setLong(params.size() + 1,rqst.getLastCompactionId());} @AT@ 187743 @LENGTH@ 28
---------INS SimpleName@@Name:rqst @TO@ MethodInvocation@@rqst.isSetLastCompactionId() @AT@ 187743 @LENGTH@ 4
---------INS SimpleName@@MethodName:isSetLastCompactionId:[] @TO@ MethodInvocation@@rqst.isSetLastCompactionId() @AT@ 187748 @LENGTH@ 23
------INS Block@@ThenBody:{  pst.setLong(params.size() + 1,rqst.getLastCompactionId());} @TO@ IfStatement@@if (rqst.isSetLastCompactionId()) {  pst.setLong(params.size() + 1,rqst.getLastCompactionId());} @AT@ 187773 @LENGTH@ 81
---------INS ExpressionStatement@@MethodInvocation:pst.setLong(params.size() + 1,rqst.getLastCompactionId()) @TO@ Block@@ThenBody:{  pst.setLong(params.size() + 1,rqst.getLastCompactionId());} @AT@ 187785 @LENGTH@ 59
------------MOV MethodInvocation@@LOG.debug("Going to execute query <" + sb.toString() + ">") @TO@ ExpressionStatement@@MethodInvocation:pst.setLong(params.size() + 1,rqst.getLastCompactionId()) @AT@ 187805 @LENGTH@ 59
---DEL ExpressionStatement@@MethodInvocation:LOG.debug("Going to execute query <" + sb.toString() + ">") @AT@ 187805 @LENGTH@ 60
---INS ExpressionStatement@@MethodInvocation:LOG.debug("Going to execute query <{}>",sb) @TO@ TryStatement@@try {  dbConn=getDbConn(Connection.TRANSACTION_READ_COMMITTED);  List<String> params=new ArrayList<>();  StringBuilder sb=new StringBuilder().append("SELECT * FROM (").append("   SELECT").append("   \"CC_ID\", \"CC_DATABASE\", \"CC_TABLE\", \"CC_PARTITION\", \"CC_TYPE\"").append("   FROM \"COMPLETED_COMPACTIONS\"").append("     WHERE \"CC_STATE\" = " + quoteChar(SUCCEEDED_STATE)).append("   UNION ALL").append("   SELECT").append("   \"CQ_ID\" AS \"CC_ID\", \"CQ_DATABASE\" AS \"CC_DATABASE\"").append("   ,\"CQ_TABLE\" AS \"CC_TABLE\", \"CQ_PARTITION\" AS \"CC_PARTITION\"").append("   ,\"CQ_TYPE\" AS \"CC_TYPE\"").append("   FROM \"COMPACTION_QUEUE\"").append("     WHERE \"CQ_STATE\" = " + quoteChar(READY_FOR_CLEANING)).append(") AS compactions ").append(" WHERE \"CC_DATABASE\" = ? AND \"CC_TABLE\" = ?");  params.add(rqst.getDbname());  params.add(rqst.getTablename());  if (rqst.getPartitionnamesSize() > 0) {    sb.append(" AND \"CC_PARTITION\" IN (");    sb.append(String.join(",",Collections.nCopies(rqst.getPartitionnamesSize(),"?")));    sb.append(")");    params.addAll(rqst.getPartitionnames());  }  if (rqst.isSetLastCompactionId()) {    sb.append(" AND \"CC_ID\" > ?");    params.add(String.valueOf(rqst.getLastCompactionId()));  }  sb.append(" ORDER BY \"CC_ID\" DESC");  pst=sqlGenerator.prepareStmtWithParameters(dbConn,sb.toString(),params);  LOG.debug("Going to execute query <" + sb.toString() + ">");  rs=pst.executeQuery();  Set<String> partitionSet=new HashSet<>();  while (rs.next()) {    CompactionInfoStruct lci=new CompactionInfoStruct();    lci.setId(rs.getLong(1));    lci.setDbname(rs.getString(2));    lci.setTablename(rs.getString(3));    String partition=rs.getString(4);    if (!rs.wasNull()) {      lci.setPartitionname(partition);    }    lci.setType(dbCompactionType2ThriftType(rs.getString(5).charAt(0)));    if (!partitionSet.contains(partition)) {      response.addToCompactions(lci);      partitionSet.add(partition);    }  }} catch (SQLException e) {  LOG.error("Unable to execute query " + e.getMessage());  checkRetryable(e,"getLatestCommittedCompactionInfo");} finally {  close(rs,pst,dbConn);} @AT@ 187863 @LENGTH@ 45
------INS MethodInvocation@@LOG.debug("Going to execute query <{}>",sb) @TO@ ExpressionStatement@@MethodInvocation:LOG.debug("Going to execute query <{}>",sb) @AT@ 187863 @LENGTH@ 44
---------INS SimpleName@@Name:LOG @TO@ MethodInvocation@@LOG.debug("Going to execute query <{}>",sb) @AT@ 187863 @LENGTH@ 3
---------INS SimpleName@@MethodName:debug:["Going to execute query <{}>", sb] @TO@ MethodInvocation@@LOG.debug("Going to execute query <{}>",sb) @AT@ 187867 @LENGTH@ 40
------------INS StringLiteral@@"Going to execute query <{}>" @TO@ SimpleName@@MethodName:debug:["Going to execute query <{}>", sb] @AT@ 187873 @LENGTH@ 29
------------INS SimpleName@@sb @TO@ SimpleName@@MethodName:debug:["Going to execute query <{}>", sb] @AT@ 187904 @LENGTH@ 2
---UPD CatchClause@@catch (SQLException e) {  LOG.error("Unable to execute query " + e.getMessage());  checkRetryable(e,"getLatestCommittedCompactionInfo");} @TO@ catch (SQLException e) {  LOG.error("Unable to execute query",e);  checkRetryable(e,"getLatestCommittedCompactionInfo");} @AT@ 188618 @LENGTH@ 159
------UPD ExpressionStatement@@MethodInvocation:LOG.error("Unable to execute query " + e.getMessage()) @TO@ MethodInvocation:LOG.error("Unable to execute query",e) @AT@ 188651 @LENGTH@ 55
---------UPD MethodInvocation@@LOG.error("Unable to execute query " + e.getMessage()) @TO@ LOG.error("Unable to execute query",e) @AT@ 188651 @LENGTH@ 54
------------UPD SimpleName@@MethodName:error:["Unable to execute query " + e.getMessage()] @TO@ MethodName:error:["Unable to execute query", e] @AT@ 188655 @LENGTH@ 50
---------------DEL InfixExpression@@"Unable to execute query " + e.getMessage() @AT@ 188661 @LENGTH@ 43
------------------DEL StringLiteral@@"Unable to execute query " @AT@ 188661 @LENGTH@ 26
------------------DEL Operator@@+ @AT@ 188687 @LENGTH@ 1
------------------DEL MethodInvocation@@e.getMessage() @AT@ 188690 @LENGTH@ 14
---------------------DEL SimpleName@@Name:e @AT@ 188690 @LENGTH@ 1
---------------------DEL SimpleName@@MethodName:getMessage:[] @AT@ 188692 @LENGTH@ 12
---------------INS StringLiteral@@"Unable to execute query" @TO@ SimpleName@@MethodName:error:["Unable to execute query " + e.getMessage()] @AT@ 188704 @LENGTH@ 25
---------------INS SimpleName@@e @TO@ SimpleName@@MethodName:error:["Unable to execute query " + e.getMessage()] @AT@ 188731 @LENGTH@ 1


UPD Block@@ThenBody:{  final NodeWrapper<?> wrapper=(NodeWrapper<?>)bean;  return new ConfigurationNodePointer((ConfigurationNodePointer)parent,wrapper.getNode(),wrapper.getNodeHandler());} @TO@ ThenBody:{  final NodeWrapper<Object> wrapper=(NodeWrapper<Object>)bean;  return new ConfigurationNodePointer<>((ConfigurationNodePointer<Object>)parent,wrapper.getNode(),wrapper.getNodeHandler());} @AT@ 3908 @LENGTH@ 206
---UPD VariableDeclarationStatement@@final NodeWrapper<?> wrapper=(NodeWrapper<?>)bean; @TO@ final NodeWrapper<Object> wrapper=(NodeWrapper<Object>)bean; @AT@ 3922 @LENGTH@ 53
------UPD ParameterizedType@@NodeWrapper<?> @TO@ NodeWrapper<Object> @AT@ 3928 @LENGTH@ 14
---------DEL WildcardType@@? @AT@ 3940 @LENGTH@ 1
---------INS SimpleType@@Object @TO@ ParameterizedType@@NodeWrapper<?> @AT@ 3952 @LENGTH@ 6
------UPD VariableDeclarationFragment@@wrapper=(NodeWrapper<?>)bean @TO@ wrapper=(NodeWrapper<Object>)bean @AT@ 3943 @LENGTH@ 31
---------UPD CastExpression@@(NodeWrapper<?>)bean @TO@ (NodeWrapper<Object>)bean @AT@ 3953 @LENGTH@ 21
------------UPD ParameterizedType@@NodeWrapper<?> @TO@ NodeWrapper<Object> @AT@ 3954 @LENGTH@ 14
---------------DEL WildcardType@@? @AT@ 3966 @LENGTH@ 1
---------------INS SimpleType@@Object @TO@ ParameterizedType@@NodeWrapper<?> @AT@ 3983 @LENGTH@ 6
---UPD ReturnStatement@@ClassInstanceCreation:new ConfigurationNodePointer((ConfigurationNodePointer)parent,wrapper.getNode(),wrapper.getNodeHandler()) @TO@ ClassInstanceCreation:new ConfigurationNodePointer<>((ConfigurationNodePointer<Object>)parent,wrapper.getNode(),wrapper.getNodeHandler()) @AT@ 3988 @LENGTH@ 116
------UPD ClassInstanceCreation@@ConfigurationNodePointer[(ConfigurationNodePointer)parent, wrapper.getNode(), wrapper.getNodeHandler()] @TO@ ConfigurationNodePointer<>[(ConfigurationNodePointer<Object>)parent, wrapper.getNode(), wrapper.getNodeHandler()] @AT@ 3995 @LENGTH@ 108
---------DEL SimpleType@@ConfigurationNodePointer @AT@ 3999 @LENGTH@ 24
---------INS ParameterizedType@@ConfigurationNodePointer<> @TO@ ClassInstanceCreation@@ConfigurationNodePointer[(ConfigurationNodePointer)parent, wrapper.getNode(), wrapper.getNodeHandler()] @AT@ 4021 @LENGTH@ 26
------------INS SimpleType@@ConfigurationNodePointer @TO@ ParameterizedType@@ConfigurationNodePointer<> @AT@ 4021 @LENGTH@ 24
---------UPD CastExpression@@(ConfigurationNodePointer)parent @TO@ (ConfigurationNodePointer<Object>)parent @AT@ 4024 @LENGTH@ 33
------------DEL SimpleType@@ConfigurationNodePointer @AT@ 4025 @LENGTH@ 24
------------INS ParameterizedType@@ConfigurationNodePointer<Object> @TO@ CastExpression@@(ConfigurationNodePointer)parent @AT@ 4049 @LENGTH@ 32
---------------INS SimpleType@@ConfigurationNodePointer @TO@ ParameterizedType@@ConfigurationNodePointer<Object> @AT@ 4049 @LENGTH@ 24
---------------INS SimpleType@@Object @TO@ ParameterizedType@@ConfigurationNodePointer<Object> @AT@ 4074 @LENGTH@ 6


UPD VariableDeclarationStatement@@String payload=IOUtils.toString(ClassLoader.getSystemResourceAsStream("xml/article-1.xml")); @TO@ String payload=IOUtils.toString(ClassLoader.getSystemResourceAsStream("xml/article-1.xml"),Charset.defaultCharset()); @AT@ 1537 @LENGTH@ 94
---UPD VariableDeclarationFragment@@payload=IOUtils.toString(ClassLoader.getSystemResourceAsStream("xml/article-1.xml")) @TO@ payload=IOUtils.toString(ClassLoader.getSystemResourceAsStream("xml/article-1.xml"),Charset.defaultCharset()) @AT@ 1544 @LENGTH@ 86
------UPD MethodInvocation@@IOUtils.toString(ClassLoader.getSystemResourceAsStream("xml/article-1.xml")) @TO@ IOUtils.toString(ClassLoader.getSystemResourceAsStream("xml/article-1.xml"),Charset.defaultCharset()) @AT@ 1554 @LENGTH@ 76
---------UPD SimpleName@@MethodName:toString:[ClassLoader.getSystemResourceAsStream("xml/article-1.xml")] @TO@ MethodName:toString:[ClassLoader.getSystemResourceAsStream("xml/article-1.xml"), Charset.defaultCharset()] @AT@ 1562 @LENGTH@ 68
------------INS MethodInvocation@@Charset.defaultCharset() @TO@ SimpleName@@MethodName:toString:[ClassLoader.getSystemResourceAsStream("xml/article-1.xml")] @AT@ 1647 @LENGTH@ 24
---------------INS SimpleName@@Name:Charset @TO@ MethodInvocation@@Charset.defaultCharset() @AT@ 1647 @LENGTH@ 7
---------------INS SimpleName@@MethodName:defaultCharset:[] @TO@ MethodInvocation@@Charset.defaultCharset() @AT@ 1655 @LENGTH@ 16


INS MethodDeclaration@@protected, void, MethodName:afterPropertiesSet, T endpointConfiguration,  @TO@ TypeDeclaration@@[public, abstract]AbstractApiComponent, DefaultComponent @AT@ 4071 @LENGTH@ 83
---INS Modifier@@protected @TO@ MethodDeclaration@@protected, void, MethodName:afterPropertiesSet, T endpointConfiguration,  @AT@ 4071 @LENGTH@ 9
---INS PrimitiveType@@void @TO@ MethodDeclaration@@protected, void, MethodName:afterPropertiesSet, T endpointConfiguration,  @AT@ 4081 @LENGTH@ 4
---INS SimpleName@@MethodName:afterPropertiesSet @TO@ MethodDeclaration@@protected, void, MethodName:afterPropertiesSet, T endpointConfiguration,  @AT@ 4086 @LENGTH@ 18
---INS SingleVariableDeclaration@@T endpointConfiguration @TO@ MethodDeclaration@@protected, void, MethodName:afterPropertiesSet, T endpointConfiguration,  @AT@ 4105 @LENGTH@ 23
------INS SimpleType@@T @TO@ SingleVariableDeclaration@@T endpointConfiguration @AT@ 4105 @LENGTH@ 1
------INS SimpleName@@endpointConfiguration @TO@ SingleVariableDeclaration@@T endpointConfiguration @AT@ 4107 @LENGTH@ 21


UPD ExpressionStatement@@MethodInvocation:this.contextRunner.withUserConfiguration(Config1.class).run((context) -> {
  SpringShellProperties properties=context.getBean(SpringShellProperties.class);
  assertThat(properties.getScript().isEnabled()).isTrue();
  assertThat(properties.getInteractive().isEnabled()).isTrue();
  assertThat(properties.getNoninteractive().isEnabled()).isTrue();
  assertThat(properties.getTheme().getName()).isEqualTo("default");
  assertThat(properties.getCommand().getClear().isEnabled()).isTrue();
  assertThat(properties.getCommand().getHelp().isEnabled()).isTrue();
  assertThat(properties.getCommand().getHistory().isEnabled()).isTrue();
  assertThat(properties.getCommand().getQuit().isEnabled()).isTrue();
  assertThat(properties.getCommand().getScript().isEnabled()).isTrue();
  assertThat(properties.getCommand().getStacktrace().isEnabled()).isTrue();
  assertThat(properties.getCommand().getCompletion().isEnabled()).isTrue();
  assertThat(properties.getCommand().getCompletion().getRootCommand()).isNull();
  assertThat(properties.getCommand().getVersion().isEnabled()).isTrue();
  assertThat(properties.getCommand().getVersion().getTemplate()).isNotNull();
  assertThat(properties.getCommand().getVersion().isShowBuildArtifact()).isFalse();
  assertThat(properties.getCommand().getVersion().isShowBuildGroup()).isFalse();
  assertThat(properties.getCommand().getVersion().isShowBuildName()).isFalse();
  assertThat(properties.getCommand().getVersion().isShowBuildTime()).isFalse();
  assertThat(properties.getCommand().getVersion().isShowBuildVersion()).isTrue();
  assertThat(properties.getCommand().getVersion().isShowGitBranch()).isFalse();
  assertThat(properties.getCommand().getVersion().isShowGitCommitId()).isFalse();
  assertThat(properties.getCommand().getVersion().isShowGitShortCommitId()).isFalse();
  assertThat(properties.getCommand().getVersion().isShowGitCommitTime()).isFalse();
}
) @TO@ MethodInvocation:this.contextRunner.withUserConfiguration(Config1.class).run((context) -> {
  SpringShellProperties properties=context.getBean(SpringShellProperties.class);
  assertThat(properties.getScript().isEnabled()).isTrue();
  assertThat(properties.getInteractive().isEnabled()).isTrue();
  assertThat(properties.getNoninteractive().isEnabled()).isTrue();
  assertThat(properties.getTheme().getName()).isEqualTo("default");
  assertThat(properties.getCommand().getClear().isEnabled()).isTrue();
  assertThat(properties.getCommand().getHelp().isEnabled()).isTrue();
  assertThat(properties.getCommand().getHelp().getGroupingMode()).isEqualTo(GroupingMode.GROUP);
  assertThat(properties.getCommand().getHistory().isEnabled()).isTrue();
  assertThat(properties.getCommand().getQuit().isEnabled()).isTrue();
  assertThat(properties.getCommand().getScript().isEnabled()).isTrue();
  assertThat(properties.getCommand().getStacktrace().isEnabled()).isTrue();
  assertThat(properties.getCommand().getCompletion().isEnabled()).isTrue();
  assertThat(properties.getCommand().getCompletion().getRootCommand()).isNull();
  assertThat(properties.getCommand().getVersion().isEnabled()).isTrue();
  assertThat(properties.getCommand().getVersion().getTemplate()).isNotNull();
  assertThat(properties.getCommand().getVersion().isShowBuildArtifact()).isFalse();
  assertThat(properties.getCommand().getVersion().isShowBuildGroup()).isFalse();
  assertThat(properties.getCommand().getVersion().isShowBuildName()).isFalse();
  assertThat(properties.getCommand().getVersion().isShowBuildTime()).isFalse();
  assertThat(properties.getCommand().getVersion().isShowBuildVersion()).isTrue();
  assertThat(properties.getCommand().getVersion().isShowGitBranch()).isFalse();
  assertThat(properties.getCommand().getVersion().isShowGitCommitId()).isFalse();
  assertThat(properties.getCommand().getVersion().isShowGitShortCommitId()).isFalse();
  assertThat(properties.getCommand().getVersion().isShowGitCommitTime()).isFalse();
}
) @AT@ 1100 @LENGTH@ 1985
---UPD MethodInvocation@@this.contextRunner.withUserConfiguration(Config1.class).run((context) -> {
  SpringShellProperties properties=context.getBean(SpringShellProperties.class);
  assertThat(properties.getScript().isEnabled()).isTrue();
  assertThat(properties.getInteractive().isEnabled()).isTrue();
  assertThat(properties.getNoninteractive().isEnabled()).isTrue();
  assertThat(properties.getTheme().getName()).isEqualTo("default");
  assertThat(properties.getCommand().getClear().isEnabled()).isTrue();
  assertThat(properties.getCommand().getHelp().isEnabled()).isTrue();
  assertThat(properties.getCommand().getHistory().isEnabled()).isTrue();
  assertThat(properties.getCommand().getQuit().isEnabled()).isTrue();
  assertThat(properties.getCommand().getScript().isEnabled()).isTrue();
  assertThat(properties.getCommand().getStacktrace().isEnabled()).isTrue();
  assertThat(properties.getCommand().getCompletion().isEnabled()).isTrue();
  assertThat(properties.getCommand().getCompletion().getRootCommand()).isNull();
  assertThat(properties.getCommand().getVersion().isEnabled()).isTrue();
  assertThat(properties.getCommand().getVersion().getTemplate()).isNotNull();
  assertThat(properties.getCommand().getVersion().isShowBuildArtifact()).isFalse();
  assertThat(properties.getCommand().getVersion().isShowBuildGroup()).isFalse();
  assertThat(properties.getCommand().getVersion().isShowBuildName()).isFalse();
  assertThat(properties.getCommand().getVersion().isShowBuildTime()).isFalse();
  assertThat(properties.getCommand().getVersion().isShowBuildVersion()).isTrue();
  assertThat(properties.getCommand().getVersion().isShowGitBranch()).isFalse();
  assertThat(properties.getCommand().getVersion().isShowGitCommitId()).isFalse();
  assertThat(properties.getCommand().getVersion().isShowGitShortCommitId()).isFalse();
  assertThat(properties.getCommand().getVersion().isShowGitCommitTime()).isFalse();
}
) @TO@ this.contextRunner.withUserConfiguration(Config1.class).run((context) -> {
  SpringShellProperties properties=context.getBean(SpringShellProperties.class);
  assertThat(properties.getScript().isEnabled()).isTrue();
  assertThat(properties.getInteractive().isEnabled()).isTrue();
  assertThat(properties.getNoninteractive().isEnabled()).isTrue();
  assertThat(properties.getTheme().getName()).isEqualTo("default");
  assertThat(properties.getCommand().getClear().isEnabled()).isTrue();
  assertThat(properties.getCommand().getHelp().isEnabled()).isTrue();
  assertThat(properties.getCommand().getHelp().getGroupingMode()).isEqualTo(GroupingMode.GROUP);
  assertThat(properties.getCommand().getHistory().isEnabled()).isTrue();
  assertThat(properties.getCommand().getQuit().isEnabled()).isTrue();
  assertThat(properties.getCommand().getScript().isEnabled()).isTrue();
  assertThat(properties.getCommand().getStacktrace().isEnabled()).isTrue();
  assertThat(properties.getCommand().getCompletion().isEnabled()).isTrue();
  assertThat(properties.getCommand().getCompletion().getRootCommand()).isNull();
  assertThat(properties.getCommand().getVersion().isEnabled()).isTrue();
  assertThat(properties.getCommand().getVersion().getTemplate()).isNotNull();
  assertThat(properties.getCommand().getVersion().isShowBuildArtifact()).isFalse();
  assertThat(properties.getCommand().getVersion().isShowBuildGroup()).isFalse();
  assertThat(properties.getCommand().getVersion().isShowBuildName()).isFalse();
  assertThat(properties.getCommand().getVersion().isShowBuildTime()).isFalse();
  assertThat(properties.getCommand().getVersion().isShowBuildVersion()).isTrue();
  assertThat(properties.getCommand().getVersion().isShowGitBranch()).isFalse();
  assertThat(properties.getCommand().getVersion().isShowGitCommitId()).isFalse();
  assertThat(properties.getCommand().getVersion().isShowGitShortCommitId()).isFalse();
  assertThat(properties.getCommand().getVersion().isShowGitCommitTime()).isFalse();
}
) @AT@ 1100 @LENGTH@ 1984
------UPD SimpleName@@MethodName:run:[(context) -> {
  SpringShellProperties properties=context.getBean(SpringShellProperties.class);
  assertThat(properties.getScript().isEnabled()).isTrue();
  assertThat(properties.getInteractive().isEnabled()).isTrue();
  assertThat(properties.getNoninteractive().isEnabled()).isTrue();
  assertThat(properties.getTheme().getName()).isEqualTo("default");
  assertThat(properties.getCommand().getClear().isEnabled()).isTrue();
  assertThat(properties.getCommand().getHelp().isEnabled()).isTrue();
  assertThat(properties.getCommand().getHistory().isEnabled()).isTrue();
  assertThat(properties.getCommand().getQuit().isEnabled()).isTrue();
  assertThat(properties.getCommand().getScript().isEnabled()).isTrue();
  assertThat(properties.getCommand().getStacktrace().isEnabled()).isTrue();
  assertThat(properties.getCommand().getCompletion().isEnabled()).isTrue();
  assertThat(properties.getCommand().getCompletion().getRootCommand()).isNull();
  assertThat(properties.getCommand().getVersion().isEnabled()).isTrue();
  assertThat(properties.getCommand().getVersion().getTemplate()).isNotNull();
  assertThat(properties.getCommand().getVersion().isShowBuildArtifact()).isFalse();
  assertThat(properties.getCommand().getVersion().isShowBuildGroup()).isFalse();
  assertThat(properties.getCommand().getVersion().isShowBuildName()).isFalse();
  assertThat(properties.getCommand().getVersion().isShowBuildTime()).isFalse();
  assertThat(properties.getCommand().getVersion().isShowBuildVersion()).isTrue();
  assertThat(properties.getCommand().getVersion().isShowGitBranch()).isFalse();
  assertThat(properties.getCommand().getVersion().isShowGitCommitId()).isFalse();
  assertThat(properties.getCommand().getVersion().isShowGitShortCommitId()).isFalse();
  assertThat(properties.getCommand().getVersion().isShowGitCommitTime()).isFalse();
}
] @TO@ MethodName:run:[(context) -> {
  SpringShellProperties properties=context.getBean(SpringShellProperties.class);
  assertThat(properties.getScript().isEnabled()).isTrue();
  assertThat(properties.getInteractive().isEnabled()).isTrue();
  assertThat(properties.getNoninteractive().isEnabled()).isTrue();
  assertThat(properties.getTheme().getName()).isEqualTo("default");
  assertThat(properties.getCommand().getClear().isEnabled()).isTrue();
  assertThat(properties.getCommand().getHelp().isEnabled()).isTrue();
  assertThat(properties.getCommand().getHelp().getGroupingMode()).isEqualTo(GroupingMode.GROUP);
  assertThat(properties.getCommand().getHistory().isEnabled()).isTrue();
  assertThat(properties.getCommand().getQuit().isEnabled()).isTrue();
  assertThat(properties.getCommand().getScript().isEnabled()).isTrue();
  assertThat(properties.getCommand().getStacktrace().isEnabled()).isTrue();
  assertThat(properties.getCommand().getCompletion().isEnabled()).isTrue();
  assertThat(properties.getCommand().getCompletion().getRootCommand()).isNull();
  assertThat(properties.getCommand().getVersion().isEnabled()).isTrue();
  assertThat(properties.getCommand().getVersion().getTemplate()).isNotNull();
  assertThat(properties.getCommand().getVersion().isShowBuildArtifact()).isFalse();
  assertThat(properties.getCommand().getVersion().isShowBuildGroup()).isFalse();
  assertThat(properties.getCommand().getVersion().isShowBuildName()).isFalse();
  assertThat(properties.getCommand().getVersion().isShowBuildTime()).isFalse();
  assertThat(properties.getCommand().getVersion().isShowBuildVersion()).isTrue();
  assertThat(properties.getCommand().getVersion().isShowGitBranch()).isFalse();
  assertThat(properties.getCommand().getVersion().isShowGitCommitId()).isFalse();
  assertThat(properties.getCommand().getVersion().isShowGitShortCommitId()).isFalse();
  assertThat(properties.getCommand().getVersion().isShowGitCommitTime()).isFalse();
}
] @AT@ 1166 @LENGTH@ 1918
---------UPD LambdaExpression@@(context) -> {
  SpringShellProperties properties=context.getBean(SpringShellProperties.class);
  assertThat(properties.getScript().isEnabled()).isTrue();
  assertThat(properties.getInteractive().isEnabled()).isTrue();
  assertThat(properties.getNoninteractive().isEnabled()).isTrue();
  assertThat(properties.getTheme().getName()).isEqualTo("default");
  assertThat(properties.getCommand().getClear().isEnabled()).isTrue();
  assertThat(properties.getCommand().getHelp().isEnabled()).isTrue();
  assertThat(properties.getCommand().getHistory().isEnabled()).isTrue();
  assertThat(properties.getCommand().getQuit().isEnabled()).isTrue();
  assertThat(properties.getCommand().getScript().isEnabled()).isTrue();
  assertThat(properties.getCommand().getStacktrace().isEnabled()).isTrue();
  assertThat(properties.getCommand().getCompletion().isEnabled()).isTrue();
  assertThat(properties.getCommand().getCompletion().getRootCommand()).isNull();
  assertThat(properties.getCommand().getVersion().isEnabled()).isTrue();
  assertThat(properties.getCommand().getVersion().getTemplate()).isNotNull();
  assertThat(properties.getCommand().getVersion().isShowBuildArtifact()).isFalse();
  assertThat(properties.getCommand().getVersion().isShowBuildGroup()).isFalse();
  assertThat(properties.getCommand().getVersion().isShowBuildName()).isFalse();
  assertThat(properties.getCommand().getVersion().isShowBuildTime()).isFalse();
  assertThat(properties.getCommand().getVersion().isShowBuildVersion()).isTrue();
  assertThat(properties.getCommand().getVersion().isShowGitBranch()).isFalse();
  assertThat(properties.getCommand().getVersion().isShowGitCommitId()).isFalse();
  assertThat(properties.getCommand().getVersion().isShowGitShortCommitId()).isFalse();
  assertThat(properties.getCommand().getVersion().isShowGitCommitTime()).isFalse();
}
 @TO@ (context) -> {
  SpringShellProperties properties=context.getBean(SpringShellProperties.class);
  assertThat(properties.getScript().isEnabled()).isTrue();
  assertThat(properties.getInteractive().isEnabled()).isTrue();
  assertThat(properties.getNoninteractive().isEnabled()).isTrue();
  assertThat(properties.getTheme().getName()).isEqualTo("default");
  assertThat(properties.getCommand().getClear().isEnabled()).isTrue();
  assertThat(properties.getCommand().getHelp().isEnabled()).isTrue();
  assertThat(properties.getCommand().getHelp().getGroupingMode()).isEqualTo(GroupingMode.GROUP);
  assertThat(properties.getCommand().getHistory().isEnabled()).isTrue();
  assertThat(properties.getCommand().getQuit().isEnabled()).isTrue();
  assertThat(properties.getCommand().getScript().isEnabled()).isTrue();
  assertThat(properties.getCommand().getStacktrace().isEnabled()).isTrue();
  assertThat(properties.getCommand().getCompletion().isEnabled()).isTrue();
  assertThat(properties.getCommand().getCompletion().getRootCommand()).isNull();
  assertThat(properties.getCommand().getVersion().isEnabled()).isTrue();
  assertThat(properties.getCommand().getVersion().getTemplate()).isNotNull();
  assertThat(properties.getCommand().getVersion().isShowBuildArtifact()).isFalse();
  assertThat(properties.getCommand().getVersion().isShowBuildGroup()).isFalse();
  assertThat(properties.getCommand().getVersion().isShowBuildName()).isFalse();
  assertThat(properties.getCommand().getVersion().isShowBuildTime()).isFalse();
  assertThat(properties.getCommand().getVersion().isShowBuildVersion()).isTrue();
  assertThat(properties.getCommand().getVersion().isShowGitBranch()).isFalse();
  assertThat(properties.getCommand().getVersion().isShowGitCommitId()).isFalse();
  assertThat(properties.getCommand().getVersion().isShowGitShortCommitId()).isFalse();
  assertThat(properties.getCommand().getVersion().isShowGitCommitTime()).isFalse();
}
 @AT@ 1170 @LENGTH@ 1913
------------INS ExpressionStatement@@MethodInvocation:assertThat(properties.getCommand().getHelp().getGroupingMode()).isEqualTo(GroupingMode.GROUP) @TO@ LambdaExpression@@(context) -> {
  SpringShellProperties properties=context.getBean(SpringShellProperties.class);
  assertThat(properties.getScript().isEnabled()).isTrue();
  assertThat(properties.getInteractive().isEnabled()).isTrue();
  assertThat(properties.getNoninteractive().isEnabled()).isTrue();
  assertThat(properties.getTheme().getName()).isEqualTo("default");
  assertThat(properties.getCommand().getClear().isEnabled()).isTrue();
  assertThat(properties.getCommand().getHelp().isEnabled()).isTrue();
  assertThat(properties.getCommand().getHistory().isEnabled()).isTrue();
  assertThat(properties.getCommand().getQuit().isEnabled()).isTrue();
  assertThat(properties.getCommand().getScript().isEnabled()).isTrue();
  assertThat(properties.getCommand().getStacktrace().isEnabled()).isTrue();
  assertThat(properties.getCommand().getCompletion().isEnabled()).isTrue();
  assertThat(properties.getCommand().getCompletion().getRootCommand()).isNull();
  assertThat(properties.getCommand().getVersion().isEnabled()).isTrue();
  assertThat(properties.getCommand().getVersion().getTemplate()).isNotNull();
  assertThat(properties.getCommand().getVersion().isShowBuildArtifact()).isFalse();
  assertThat(properties.getCommand().getVersion().isShowBuildGroup()).isFalse();
  assertThat(properties.getCommand().getVersion().isShowBuildName()).isFalse();
  assertThat(properties.getCommand().getVersion().isShowBuildTime()).isFalse();
  assertThat(properties.getCommand().getVersion().isShowBuildVersion()).isTrue();
  assertThat(properties.getCommand().getVersion().isShowGitBranch()).isFalse();
  assertThat(properties.getCommand().getVersion().isShowGitCommitId()).isFalse();
  assertThat(properties.getCommand().getVersion().isShowGitShortCommitId()).isFalse();
  assertThat(properties.getCommand().getVersion().isShowGitCommitTime()).isFalse();
}
 @AT@ 1779 @LENGTH@ 94
---------------INS MethodInvocation@@assertThat(properties.getCommand().getHelp().getGroupingMode()).isEqualTo(GroupingMode.GROUP) @TO@ ExpressionStatement@@MethodInvocation:assertThat(properties.getCommand().getHelp().getGroupingMode()).isEqualTo(GroupingMode.GROUP) @AT@ 1779 @LENGTH@ 93
------------------INS MethodInvocation@@MethodName:assertThat:[properties.getCommand().getHelp().getGroupingMode()] @TO@ MethodInvocation@@assertThat(properties.getCommand().getHelp().getGroupingMode()).isEqualTo(GroupingMode.GROUP) @AT@ 1779 @LENGTH@ 63
---------------------INS MethodInvocation@@properties.getCommand().getHelp().getGroupingMode() @TO@ MethodInvocation@@MethodName:assertThat:[properties.getCommand().getHelp().getGroupingMode()] @AT@ 1790 @LENGTH@ 51
------------------------INS MethodInvocation@@MethodName:getHelp:[] @TO@ MethodInvocation@@properties.getCommand().getHelp().getGroupingMode() @AT@ 1790 @LENGTH@ 33
------------------------INS MethodInvocation@@MethodName:getCommand:[] @TO@ MethodInvocation@@properties.getCommand().getHelp().getGroupingMode() @AT@ 1790 @LENGTH@ 23
------------------------INS SimpleName@@Name:properties @TO@ MethodInvocation@@properties.getCommand().getHelp().getGroupingMode() @AT@ 1790 @LENGTH@ 10
------------------------INS SimpleName@@MethodName:getGroupingMode:[] @TO@ MethodInvocation@@properties.getCommand().getHelp().getGroupingMode() @AT@ 1824 @LENGTH@ 17
------------------INS SimpleName@@MethodName:isEqualTo:[GroupingMode.GROUP] @TO@ MethodInvocation@@assertThat(properties.getCommand().getHelp().getGroupingMode()).isEqualTo(GroupingMode.GROUP) @AT@ 1843 @LENGTH@ 29
---------------------INS QualifiedName@@GroupingMode.GROUP @TO@ SimpleName@@MethodName:isEqualTo:[GroupingMode.GROUP] @AT@ 1853 @LENGTH@ 18
------------------------INS SimpleName@@GroupingMode @TO@ QualifiedName@@GroupingMode.GROUP @AT@ 1853 @LENGTH@ 12
------------------------INS SimpleName@@GROUP @TO@ QualifiedName@@GroupingMode.GROUP @AT@ 1866 @LENGTH@ 5


UPD ExpressionStatement@@Assignment:kernelServices=kernelServices @TO@ Assignment:kernelServices=null @AT@ 8255 @LENGTH@ 32
---UPD Assignment@@kernelServices=kernelServices @TO@ kernelServices=null @AT@ 8255 @LENGTH@ 31
------DEL SimpleName@@kernelServices @AT@ 8272 @LENGTH@ 14
------INS NullLiteral@@null @TO@ Assignment@@kernelServices=kernelServices @AT@ 8272 @LENGTH@ 4


UPD VariableDeclarationStatement@@Map<String,String> map=new HashMap<>(151); @TO@ Map<String,String> map=new HashMap<>(152); @AT@ 317 @LENGTH@ 45
---UPD VariableDeclarationFragment@@map=new HashMap<>(151) @TO@ map=new HashMap<>(152) @AT@ 337 @LENGTH@ 24
------UPD ClassInstanceCreation@@HashMap<>[151] @TO@ HashMap<>[152] @AT@ 343 @LENGTH@ 18
---------UPD NumberLiteral@@151 @TO@ 152 @AT@ 357 @LENGTH@ 3


UPD VariableDeclarationStatement@@boolean isHeaderOrHeaders=methodParameter.hasParameterAnnotation(Header.class) || methodParameter.hasParameterAnnotation(Headers.class); @TO@ boolean isHeaderOrHeaders=methodParameter.hasParameterAnnotation(Header.class) || methodParameter.hasParameterAnnotation(Headers.class) || methodParameter.getParameterType().equals(MessageHeaders.class); @AT@ 13956 @LENGTH@ 144
---UPD VariableDeclarationFragment@@isHeaderOrHeaders=methodParameter.hasParameterAnnotation(Header.class) || methodParameter.hasParameterAnnotation(Headers.class) @TO@ isHeaderOrHeaders=methodParameter.hasParameterAnnotation(Header.class) || methodParameter.hasParameterAnnotation(Headers.class) || methodParameter.getParameterType().equals(MessageHeaders.class) @AT@ 13964 @LENGTH@ 135
------UPD InfixExpression@@methodParameter.hasParameterAnnotation(Header.class) || methodParameter.hasParameterAnnotation(Headers.class) @TO@ methodParameter.hasParameterAnnotation(Header.class) || methodParameter.hasParameterAnnotation(Headers.class) || methodParameter.getParameterType().equals(MessageHeaders.class) @AT@ 13984 @LENGTH@ 115
---------INS MethodInvocation@@methodParameter.getParameterType().equals(MessageHeaders.class) @TO@ InfixExpression@@methodParameter.hasParameterAnnotation(Header.class) || methodParameter.hasParameterAnnotation(Headers.class) @AT@ 14162 @LENGTH@ 63
------------INS MethodInvocation@@MethodName:getParameterType:[] @TO@ MethodInvocation@@methodParameter.getParameterType().equals(MessageHeaders.class) @AT@ 14162 @LENGTH@ 34
------------INS SimpleName@@Name:methodParameter @TO@ MethodInvocation@@methodParameter.getParameterType().equals(MessageHeaders.class) @AT@ 14162 @LENGTH@ 15
------------INS SimpleName@@MethodName:equals:[MessageHeaders.class] @TO@ MethodInvocation@@methodParameter.getParameterType().equals(MessageHeaders.class) @AT@ 14197 @LENGTH@ 28
---------------INS TypeLiteral@@MessageHeaders.class @TO@ SimpleName@@MethodName:equals:[MessageHeaders.class] @AT@ 14204 @LENGTH@ 20


UPD ExpressionStatement@@MethodInvocation:this.contextRunner.withPropertyValues("spring.shell.script.enabled=false").withPropertyValues("spring.shell.interactive.enabled=false").withPropertyValues("spring.shell.noninteractive.enabled=false").withPropertyValues("spring.shell.theme.name=fake").withPropertyValues("spring.shell.command.clear.enabled=false").withPropertyValues("spring.shell.command.help.enabled=false").withPropertyValues("spring.shell.command.history.enabled=false").withPropertyValues("spring.shell.command.quit.enabled=false").withPropertyValues("spring.shell.command.script.enabled=false").withPropertyValues("spring.shell.command.stacktrace.enabled=false").withPropertyValues("spring.shell.command.completion.enabled=false").withPropertyValues("spring.shell.command.completion.root-command=fake").withPropertyValues("spring.shell.command.version.enabled=false").withPropertyValues("spring.shell.command.version.template=fake").withPropertyValues("spring.shell.command.version.show-build-artifact=true").withPropertyValues("spring.shell.command.version.show-build-group=true").withPropertyValues("spring.shell.command.version.show-build-name=true").withPropertyValues("spring.shell.command.version.show-build-time=true").withPropertyValues("spring.shell.command.version.show-build-version=false").withPropertyValues("spring.shell.command.version.show-git-branch=true").withPropertyValues("spring.shell.command.version.show-git-commit-id=true").withPropertyValues("spring.shell.command.version.show-git-short-commit-id=true").withPropertyValues("spring.shell.command.version.show-git-commit-time=true").withUserConfiguration(Config1.class).run((context) -> {
  SpringShellProperties properties=context.getBean(SpringShellProperties.class);
  assertThat(properties.getScript().isEnabled()).isFalse();
  assertThat(properties.getInteractive().isEnabled()).isFalse();
  assertThat(properties.getNoninteractive().isEnabled()).isFalse();
  assertThat(properties.getTheme().getName()).isEqualTo("fake");
  assertThat(properties.getCommand().getClear().isEnabled()).isFalse();
  assertThat(properties.getCommand().getHelp().isEnabled()).isFalse();
  assertThat(properties.getCommand().getHistory().isEnabled()).isFalse();
  assertThat(properties.getCommand().getQuit().isEnabled()).isFalse();
  assertThat(properties.getCommand().getScript().isEnabled()).isFalse();
  assertThat(properties.getCommand().getStacktrace().isEnabled()).isFalse();
  assertThat(properties.getCommand().getCompletion().isEnabled()).isFalse();
  assertThat(properties.getCommand().getCompletion().getRootCommand()).isEqualTo("fake");
  assertThat(properties.getCommand().getVersion().isEnabled()).isFalse();
  assertThat(properties.getCommand().getVersion().getTemplate()).isEqualTo("fake");
  assertThat(properties.getCommand().getVersion().isShowBuildArtifact()).isTrue();
  assertThat(properties.getCommand().getVersion().isShowBuildGroup()).isTrue();
  assertThat(properties.getCommand().getVersion().isShowBuildName()).isTrue();
  assertThat(properties.getCommand().getVersion().isShowBuildTime()).isTrue();
  assertThat(properties.getCommand().getVersion().isShowBuildVersion()).isFalse();
  assertThat(properties.getCommand().getVersion().isShowGitBranch()).isTrue();
  assertThat(properties.getCommand().getVersion().isShowGitCommitId()).isTrue();
  assertThat(properties.getCommand().getVersion().isShowGitShortCommitId()).isTrue();
  assertThat(properties.getCommand().getVersion().isShowGitCommitTime()).isTrue();
}
) @TO@ MethodInvocation:this.contextRunner.withPropertyValues("spring.shell.script.enabled=false").withPropertyValues("spring.shell.interactive.enabled=false").withPropertyValues("spring.shell.noninteractive.enabled=false").withPropertyValues("spring.shell.theme.name=fake").withPropertyValues("spring.shell.command.clear.enabled=false").withPropertyValues("spring.shell.command.help.enabled=false").withPropertyValues("spring.shell.command.help.grouping-mode=flat").withPropertyValues("spring.shell.command.history.enabled=false").withPropertyValues("spring.shell.command.quit.enabled=false").withPropertyValues("spring.shell.command.script.enabled=false").withPropertyValues("spring.shell.command.stacktrace.enabled=false").withPropertyValues("spring.shell.command.completion.enabled=false").withPropertyValues("spring.shell.command.completion.root-command=fake").withPropertyValues("spring.shell.command.version.enabled=false").withPropertyValues("spring.shell.command.version.template=fake").withPropertyValues("spring.shell.command.version.show-build-artifact=true").withPropertyValues("spring.shell.command.version.show-build-group=true").withPropertyValues("spring.shell.command.version.show-build-name=true").withPropertyValues("spring.shell.command.version.show-build-time=true").withPropertyValues("spring.shell.command.version.show-build-version=false").withPropertyValues("spring.shell.command.version.show-git-branch=true").withPropertyValues("spring.shell.command.version.show-git-commit-id=true").withPropertyValues("spring.shell.command.version.show-git-short-commit-id=true").withPropertyValues("spring.shell.command.version.show-git-commit-time=true").withUserConfiguration(Config1.class).run((context) -> {
  SpringShellProperties properties=context.getBean(SpringShellProperties.class);
  assertThat(properties.getScript().isEnabled()).isFalse();
  assertThat(properties.getInteractive().isEnabled()).isFalse();
  assertThat(properties.getNoninteractive().isEnabled()).isFalse();
  assertThat(properties.getTheme().getName()).isEqualTo("fake");
  assertThat(properties.getCommand().getClear().isEnabled()).isFalse();
  assertThat(properties.getCommand().getHelp().isEnabled()).isFalse();
  assertThat(properties.getCommand().getHelp().getGroupingMode()).isEqualTo(GroupingMode.FLAT);
  assertThat(properties.getCommand().getHistory().isEnabled()).isFalse();
  assertThat(properties.getCommand().getQuit().isEnabled()).isFalse();
  assertThat(properties.getCommand().getScript().isEnabled()).isFalse();
  assertThat(properties.getCommand().getStacktrace().isEnabled()).isFalse();
  assertThat(properties.getCommand().getCompletion().isEnabled()).isFalse();
  assertThat(properties.getCommand().getCompletion().getRootCommand()).isEqualTo("fake");
  assertThat(properties.getCommand().getVersion().isEnabled()).isFalse();
  assertThat(properties.getCommand().getVersion().getTemplate()).isEqualTo("fake");
  assertThat(properties.getCommand().getVersion().isShowBuildArtifact()).isTrue();
  assertThat(properties.getCommand().getVersion().isShowBuildGroup()).isTrue();
  assertThat(properties.getCommand().getVersion().isShowBuildName()).isTrue();
  assertThat(properties.getCommand().getVersion().isShowBuildTime()).isTrue();
  assertThat(properties.getCommand().getVersion().isShowBuildVersion()).isFalse();
  assertThat(properties.getCommand().getVersion().isShowGitBranch()).isTrue();
  assertThat(properties.getCommand().getVersion().isShowGitCommitId()).isTrue();
  assertThat(properties.getCommand().getVersion().isShowGitShortCommitId()).isTrue();
  assertThat(properties.getCommand().getVersion().isShowGitCommitTime()).isTrue();
}
) @AT@ 3130 @LENGTH@ 3676
---UPD MethodInvocation@@this.contextRunner.withPropertyValues("spring.shell.script.enabled=false").withPropertyValues("spring.shell.interactive.enabled=false").withPropertyValues("spring.shell.noninteractive.enabled=false").withPropertyValues("spring.shell.theme.name=fake").withPropertyValues("spring.shell.command.clear.enabled=false").withPropertyValues("spring.shell.command.help.enabled=false").withPropertyValues("spring.shell.command.history.enabled=false").withPropertyValues("spring.shell.command.quit.enabled=false").withPropertyValues("spring.shell.command.script.enabled=false").withPropertyValues("spring.shell.command.stacktrace.enabled=false").withPropertyValues("spring.shell.command.completion.enabled=false").withPropertyValues("spring.shell.command.completion.root-command=fake").withPropertyValues("spring.shell.command.version.enabled=false").withPropertyValues("spring.shell.command.version.template=fake").withPropertyValues("spring.shell.command.version.show-build-artifact=true").withPropertyValues("spring.shell.command.version.show-build-group=true").withPropertyValues("spring.shell.command.version.show-build-name=true").withPropertyValues("spring.shell.command.version.show-build-time=true").withPropertyValues("spring.shell.command.version.show-build-version=false").withPropertyValues("spring.shell.command.version.show-git-branch=true").withPropertyValues("spring.shell.command.version.show-git-commit-id=true").withPropertyValues("spring.shell.command.version.show-git-short-commit-id=true").withPropertyValues("spring.shell.command.version.show-git-commit-time=true").withUserConfiguration(Config1.class).run((context) -> {
  SpringShellProperties properties=context.getBean(SpringShellProperties.class);
  assertThat(properties.getScript().isEnabled()).isFalse();
  assertThat(properties.getInteractive().isEnabled()).isFalse();
  assertThat(properties.getNoninteractive().isEnabled()).isFalse();
  assertThat(properties.getTheme().getName()).isEqualTo("fake");
  assertThat(properties.getCommand().getClear().isEnabled()).isFalse();
  assertThat(properties.getCommand().getHelp().isEnabled()).isFalse();
  assertThat(properties.getCommand().getHistory().isEnabled()).isFalse();
  assertThat(properties.getCommand().getQuit().isEnabled()).isFalse();
  assertThat(properties.getCommand().getScript().isEnabled()).isFalse();
  assertThat(properties.getCommand().getStacktrace().isEnabled()).isFalse();
  assertThat(properties.getCommand().getCompletion().isEnabled()).isFalse();
  assertThat(properties.getCommand().getCompletion().getRootCommand()).isEqualTo("fake");
  assertThat(properties.getCommand().getVersion().isEnabled()).isFalse();
  assertThat(properties.getCommand().getVersion().getTemplate()).isEqualTo("fake");
  assertThat(properties.getCommand().getVersion().isShowBuildArtifact()).isTrue();
  assertThat(properties.getCommand().getVersion().isShowBuildGroup()).isTrue();
  assertThat(properties.getCommand().getVersion().isShowBuildName()).isTrue();
  assertThat(properties.getCommand().getVersion().isShowBuildTime()).isTrue();
  assertThat(properties.getCommand().getVersion().isShowBuildVersion()).isFalse();
  assertThat(properties.getCommand().getVersion().isShowGitBranch()).isTrue();
  assertThat(properties.getCommand().getVersion().isShowGitCommitId()).isTrue();
  assertThat(properties.getCommand().getVersion().isShowGitShortCommitId()).isTrue();
  assertThat(properties.getCommand().getVersion().isShowGitCommitTime()).isTrue();
}
) @TO@ this.contextRunner.withPropertyValues("spring.shell.script.enabled=false").withPropertyValues("spring.shell.interactive.enabled=false").withPropertyValues("spring.shell.noninteractive.enabled=false").withPropertyValues("spring.shell.theme.name=fake").withPropertyValues("spring.shell.command.clear.enabled=false").withPropertyValues("spring.shell.command.help.enabled=false").withPropertyValues("spring.shell.command.help.grouping-mode=flat").withPropertyValues("spring.shell.command.history.enabled=false").withPropertyValues("spring.shell.command.quit.enabled=false").withPropertyValues("spring.shell.command.script.enabled=false").withPropertyValues("spring.shell.command.stacktrace.enabled=false").withPropertyValues("spring.shell.command.completion.enabled=false").withPropertyValues("spring.shell.command.completion.root-command=fake").withPropertyValues("spring.shell.command.version.enabled=false").withPropertyValues("spring.shell.command.version.template=fake").withPropertyValues("spring.shell.command.version.show-build-artifact=true").withPropertyValues("spring.shell.command.version.show-build-group=true").withPropertyValues("spring.shell.command.version.show-build-name=true").withPropertyValues("spring.shell.command.version.show-build-time=true").withPropertyValues("spring.shell.command.version.show-build-version=false").withPropertyValues("spring.shell.command.version.show-git-branch=true").withPropertyValues("spring.shell.command.version.show-git-commit-id=true").withPropertyValues("spring.shell.command.version.show-git-short-commit-id=true").withPropertyValues("spring.shell.command.version.show-git-commit-time=true").withUserConfiguration(Config1.class).run((context) -> {
  SpringShellProperties properties=context.getBean(SpringShellProperties.class);
  assertThat(properties.getScript().isEnabled()).isFalse();
  assertThat(properties.getInteractive().isEnabled()).isFalse();
  assertThat(properties.getNoninteractive().isEnabled()).isFalse();
  assertThat(properties.getTheme().getName()).isEqualTo("fake");
  assertThat(properties.getCommand().getClear().isEnabled()).isFalse();
  assertThat(properties.getCommand().getHelp().isEnabled()).isFalse();
  assertThat(properties.getCommand().getHelp().getGroupingMode()).isEqualTo(GroupingMode.FLAT);
  assertThat(properties.getCommand().getHistory().isEnabled()).isFalse();
  assertThat(properties.getCommand().getQuit().isEnabled()).isFalse();
  assertThat(properties.getCommand().getScript().isEnabled()).isFalse();
  assertThat(properties.getCommand().getStacktrace().isEnabled()).isFalse();
  assertThat(properties.getCommand().getCompletion().isEnabled()).isFalse();
  assertThat(properties.getCommand().getCompletion().getRootCommand()).isEqualTo("fake");
  assertThat(properties.getCommand().getVersion().isEnabled()).isFalse();
  assertThat(properties.getCommand().getVersion().getTemplate()).isEqualTo("fake");
  assertThat(properties.getCommand().getVersion().isShowBuildArtifact()).isTrue();
  assertThat(properties.getCommand().getVersion().isShowBuildGroup()).isTrue();
  assertThat(properties.getCommand().getVersion().isShowBuildName()).isTrue();
  assertThat(properties.getCommand().getVersion().isShowBuildTime()).isTrue();
  assertThat(properties.getCommand().getVersion().isShowBuildVersion()).isFalse();
  assertThat(properties.getCommand().getVersion().isShowGitBranch()).isTrue();
  assertThat(properties.getCommand().getVersion().isShowGitCommitId()).isTrue();
  assertThat(properties.getCommand().getVersion().isShowGitShortCommitId()).isTrue();
  assertThat(properties.getCommand().getVersion().isShowGitCommitTime()).isTrue();
}
) @AT@ 3130 @LENGTH@ 3675
------INS MethodInvocation@@MethodName:withPropertyValues:["spring.shell.command.help.grouping-mode=flat"] @TO@ MethodInvocation@@this.contextRunner.withPropertyValues("spring.shell.script.enabled=false").withPropertyValues("spring.shell.interactive.enabled=false").withPropertyValues("spring.shell.noninteractive.enabled=false").withPropertyValues("spring.shell.theme.name=fake").withPropertyValues("spring.shell.command.clear.enabled=false").withPropertyValues("spring.shell.command.help.enabled=false").withPropertyValues("spring.shell.command.history.enabled=false").withPropertyValues("spring.shell.command.quit.enabled=false").withPropertyValues("spring.shell.command.script.enabled=false").withPropertyValues("spring.shell.command.stacktrace.enabled=false").withPropertyValues("spring.shell.command.completion.enabled=false").withPropertyValues("spring.shell.command.completion.root-command=fake").withPropertyValues("spring.shell.command.version.enabled=false").withPropertyValues("spring.shell.command.version.template=fake").withPropertyValues("spring.shell.command.version.show-build-artifact=true").withPropertyValues("spring.shell.command.version.show-build-group=true").withPropertyValues("spring.shell.command.version.show-build-name=true").withPropertyValues("spring.shell.command.version.show-build-time=true").withPropertyValues("spring.shell.command.version.show-build-version=false").withPropertyValues("spring.shell.command.version.show-git-branch=true").withPropertyValues("spring.shell.command.version.show-git-commit-id=true").withPropertyValues("spring.shell.command.version.show-git-short-commit-id=true").withPropertyValues("spring.shell.command.version.show-git-commit-time=true").withUserConfiguration(Config1.class).run((context) -> {
  SpringShellProperties properties=context.getBean(SpringShellProperties.class);
  assertThat(properties.getScript().isEnabled()).isFalse();
  assertThat(properties.getInteractive().isEnabled()).isFalse();
  assertThat(properties.getNoninteractive().isEnabled()).isFalse();
  assertThat(properties.getTheme().getName()).isEqualTo("fake");
  assertThat(properties.getCommand().getClear().isEnabled()).isFalse();
  assertThat(properties.getCommand().getHelp().isEnabled()).isFalse();
  assertThat(properties.getCommand().getHistory().isEnabled()).isFalse();
  assertThat(properties.getCommand().getQuit().isEnabled()).isFalse();
  assertThat(properties.getCommand().getScript().isEnabled()).isFalse();
  assertThat(properties.getCommand().getStacktrace().isEnabled()).isFalse();
  assertThat(properties.getCommand().getCompletion().isEnabled()).isFalse();
  assertThat(properties.getCommand().getCompletion().getRootCommand()).isEqualTo("fake");
  assertThat(properties.getCommand().getVersion().isEnabled()).isFalse();
  assertThat(properties.getCommand().getVersion().getTemplate()).isEqualTo("fake");
  assertThat(properties.getCommand().getVersion().isShowBuildArtifact()).isTrue();
  assertThat(properties.getCommand().getVersion().isShowBuildGroup()).isTrue();
  assertThat(properties.getCommand().getVersion().isShowBuildName()).isTrue();
  assertThat(properties.getCommand().getVersion().isShowBuildTime()).isTrue();
  assertThat(properties.getCommand().getVersion().isShowBuildVersion()).isFalse();
  assertThat(properties.getCommand().getVersion().isShowGitBranch()).isTrue();
  assertThat(properties.getCommand().getVersion().isShowGitCommitId()).isTrue();
  assertThat(properties.getCommand().getVersion().isShowGitShortCommitId()).isTrue();
  assertThat(properties.getCommand().getVersion().isShowGitCommitTime()).isTrue();
}
) @AT@ 3316 @LENGTH@ 477
---------INS StringLiteral@@"spring.shell.command.help.grouping-mode=flat" @TO@ MethodInvocation@@MethodName:withPropertyValues:["spring.shell.command.help.grouping-mode=flat"] @AT@ 3746 @LENGTH@ 46
------UPD SimpleName@@MethodName:run:[(context) -> {
  SpringShellProperties properties=context.getBean(SpringShellProperties.class);
  assertThat(properties.getScript().isEnabled()).isFalse();
  assertThat(properties.getInteractive().isEnabled()).isFalse();
  assertThat(properties.getNoninteractive().isEnabled()).isFalse();
  assertThat(properties.getTheme().getName()).isEqualTo("fake");
  assertThat(properties.getCommand().getClear().isEnabled()).isFalse();
  assertThat(properties.getCommand().getHelp().isEnabled()).isFalse();
  assertThat(properties.getCommand().getHistory().isEnabled()).isFalse();
  assertThat(properties.getCommand().getQuit().isEnabled()).isFalse();
  assertThat(properties.getCommand().getScript().isEnabled()).isFalse();
  assertThat(properties.getCommand().getStacktrace().isEnabled()).isFalse();
  assertThat(properties.getCommand().getCompletion().isEnabled()).isFalse();
  assertThat(properties.getCommand().getCompletion().getRootCommand()).isEqualTo("fake");
  assertThat(properties.getCommand().getVersion().isEnabled()).isFalse();
  assertThat(properties.getCommand().getVersion().getTemplate()).isEqualTo("fake");
  assertThat(properties.getCommand().getVersion().isShowBuildArtifact()).isTrue();
  assertThat(properties.getCommand().getVersion().isShowBuildGroup()).isTrue();
  assertThat(properties.getCommand().getVersion().isShowBuildName()).isTrue();
  assertThat(properties.getCommand().getVersion().isShowBuildTime()).isTrue();
  assertThat(properties.getCommand().getVersion().isShowBuildVersion()).isFalse();
  assertThat(properties.getCommand().getVersion().isShowGitBranch()).isTrue();
  assertThat(properties.getCommand().getVersion().isShowGitCommitId()).isTrue();
  assertThat(properties.getCommand().getVersion().isShowGitShortCommitId()).isTrue();
  assertThat(properties.getCommand().getVersion().isShowGitCommitTime()).isTrue();
}
] @TO@ MethodName:run:[(context) -> {
  SpringShellProperties properties=context.getBean(SpringShellProperties.class);
  assertThat(properties.getScript().isEnabled()).isFalse();
  assertThat(properties.getInteractive().isEnabled()).isFalse();
  assertThat(properties.getNoninteractive().isEnabled()).isFalse();
  assertThat(properties.getTheme().getName()).isEqualTo("fake");
  assertThat(properties.getCommand().getClear().isEnabled()).isFalse();
  assertThat(properties.getCommand().getHelp().isEnabled()).isFalse();
  assertThat(properties.getCommand().getHelp().getGroupingMode()).isEqualTo(GroupingMode.FLAT);
  assertThat(properties.getCommand().getHistory().isEnabled()).isFalse();
  assertThat(properties.getCommand().getQuit().isEnabled()).isFalse();
  assertThat(properties.getCommand().getScript().isEnabled()).isFalse();
  assertThat(properties.getCommand().getStacktrace().isEnabled()).isFalse();
  assertThat(properties.getCommand().getCompletion().isEnabled()).isFalse();
  assertThat(properties.getCommand().getCompletion().getRootCommand()).isEqualTo("fake");
  assertThat(properties.getCommand().getVersion().isEnabled()).isFalse();
  assertThat(properties.getCommand().getVersion().getTemplate()).isEqualTo("fake");
  assertThat(properties.getCommand().getVersion().isShowBuildArtifact()).isTrue();
  assertThat(properties.getCommand().getVersion().isShowBuildGroup()).isTrue();
  assertThat(properties.getCommand().getVersion().isShowBuildName()).isTrue();
  assertThat(properties.getCommand().getVersion().isShowBuildTime()).isTrue();
  assertThat(properties.getCommand().getVersion().isShowBuildVersion()).isFalse();
  assertThat(properties.getCommand().getVersion().isShowGitBranch()).isTrue();
  assertThat(properties.getCommand().getVersion().isShowGitCommitId()).isTrue();
  assertThat(properties.getCommand().getVersion().isShowGitShortCommitId()).isTrue();
  assertThat(properties.getCommand().getVersion().isShowGitCommitTime()).isTrue();
}
] @AT@ 4871 @LENGTH@ 1934
---------UPD LambdaExpression@@(context) -> {
  SpringShellProperties properties=context.getBean(SpringShellProperties.class);
  assertThat(properties.getScript().isEnabled()).isFalse();
  assertThat(properties.getInteractive().isEnabled()).isFalse();
  assertThat(properties.getNoninteractive().isEnabled()).isFalse();
  assertThat(properties.getTheme().getName()).isEqualTo("fake");
  assertThat(properties.getCommand().getClear().isEnabled()).isFalse();
  assertThat(properties.getCommand().getHelp().isEnabled()).isFalse();
  assertThat(properties.getCommand().getHistory().isEnabled()).isFalse();
  assertThat(properties.getCommand().getQuit().isEnabled()).isFalse();
  assertThat(properties.getCommand().getScript().isEnabled()).isFalse();
  assertThat(properties.getCommand().getStacktrace().isEnabled()).isFalse();
  assertThat(properties.getCommand().getCompletion().isEnabled()).isFalse();
  assertThat(properties.getCommand().getCompletion().getRootCommand()).isEqualTo("fake");
  assertThat(properties.getCommand().getVersion().isEnabled()).isFalse();
  assertThat(properties.getCommand().getVersion().getTemplate()).isEqualTo("fake");
  assertThat(properties.getCommand().getVersion().isShowBuildArtifact()).isTrue();
  assertThat(properties.getCommand().getVersion().isShowBuildGroup()).isTrue();
  assertThat(properties.getCommand().getVersion().isShowBuildName()).isTrue();
  assertThat(properties.getCommand().getVersion().isShowBuildTime()).isTrue();
  assertThat(properties.getCommand().getVersion().isShowBuildVersion()).isFalse();
  assertThat(properties.getCommand().getVersion().isShowGitBranch()).isTrue();
  assertThat(properties.getCommand().getVersion().isShowGitCommitId()).isTrue();
  assertThat(properties.getCommand().getVersion().isShowGitShortCommitId()).isTrue();
  assertThat(properties.getCommand().getVersion().isShowGitCommitTime()).isTrue();
}
 @TO@ (context) -> {
  SpringShellProperties properties=context.getBean(SpringShellProperties.class);
  assertThat(properties.getScript().isEnabled()).isFalse();
  assertThat(properties.getInteractive().isEnabled()).isFalse();
  assertThat(properties.getNoninteractive().isEnabled()).isFalse();
  assertThat(properties.getTheme().getName()).isEqualTo("fake");
  assertThat(properties.getCommand().getClear().isEnabled()).isFalse();
  assertThat(properties.getCommand().getHelp().isEnabled()).isFalse();
  assertThat(properties.getCommand().getHelp().getGroupingMode()).isEqualTo(GroupingMode.FLAT);
  assertThat(properties.getCommand().getHistory().isEnabled()).isFalse();
  assertThat(properties.getCommand().getQuit().isEnabled()).isFalse();
  assertThat(properties.getCommand().getScript().isEnabled()).isFalse();
  assertThat(properties.getCommand().getStacktrace().isEnabled()).isFalse();
  assertThat(properties.getCommand().getCompletion().isEnabled()).isFalse();
  assertThat(properties.getCommand().getCompletion().getRootCommand()).isEqualTo("fake");
  assertThat(properties.getCommand().getVersion().isEnabled()).isFalse();
  assertThat(properties.getCommand().getVersion().getTemplate()).isEqualTo("fake");
  assertThat(properties.getCommand().getVersion().isShowBuildArtifact()).isTrue();
  assertThat(properties.getCommand().getVersion().isShowBuildGroup()).isTrue();
  assertThat(properties.getCommand().getVersion().isShowBuildName()).isTrue();
  assertThat(properties.getCommand().getVersion().isShowBuildTime()).isTrue();
  assertThat(properties.getCommand().getVersion().isShowBuildVersion()).isFalse();
  assertThat(properties.getCommand().getVersion().isShowGitBranch()).isTrue();
  assertThat(properties.getCommand().getVersion().isShowGitCommitId()).isTrue();
  assertThat(properties.getCommand().getVersion().isShowGitShortCommitId()).isTrue();
  assertThat(properties.getCommand().getVersion().isShowGitCommitTime()).isTrue();
}
 @AT@ 4875 @LENGTH@ 1929
------------INS ExpressionStatement@@MethodInvocation:assertThat(properties.getCommand().getHelp().getGroupingMode()).isEqualTo(GroupingMode.FLAT) @TO@ LambdaExpression@@(context) -> {
  SpringShellProperties properties=context.getBean(SpringShellProperties.class);
  assertThat(properties.getScript().isEnabled()).isFalse();
  assertThat(properties.getInteractive().isEnabled()).isFalse();
  assertThat(properties.getNoninteractive().isEnabled()).isFalse();
  assertThat(properties.getTheme().getName()).isEqualTo("fake");
  assertThat(properties.getCommand().getClear().isEnabled()).isFalse();
  assertThat(properties.getCommand().getHelp().isEnabled()).isFalse();
  assertThat(properties.getCommand().getHistory().isEnabled()).isFalse();
  assertThat(properties.getCommand().getQuit().isEnabled()).isFalse();
  assertThat(properties.getCommand().getScript().isEnabled()).isFalse();
  assertThat(properties.getCommand().getStacktrace().isEnabled()).isFalse();
  assertThat(properties.getCommand().getCompletion().isEnabled()).isFalse();
  assertThat(properties.getCommand().getCompletion().getRootCommand()).isEqualTo("fake");
  assertThat(properties.getCommand().getVersion().isEnabled()).isFalse();
  assertThat(properties.getCommand().getVersion().getTemplate()).isEqualTo("fake");
  assertThat(properties.getCommand().getVersion().isShowBuildArtifact()).isTrue();
  assertThat(properties.getCommand().getVersion().isShowBuildGroup()).isTrue();
  assertThat(properties.getCommand().getVersion().isShowBuildName()).isTrue();
  assertThat(properties.getCommand().getVersion().isShowBuildTime()).isTrue();
  assertThat(properties.getCommand().getVersion().isShowBuildVersion()).isFalse();
  assertThat(properties.getCommand().getVersion().isShowGitBranch()).isTrue();
  assertThat(properties.getCommand().getVersion().isShowGitCommitId()).isTrue();
  assertThat(properties.getCommand().getVersion().isShowGitShortCommitId()).isTrue();
  assertThat(properties.getCommand().getVersion().isShowGitCommitTime()).isTrue();
}
 @AT@ 5658 @LENGTH@ 93
---------------INS MethodInvocation@@assertThat(properties.getCommand().getHelp().getGroupingMode()).isEqualTo(GroupingMode.FLAT) @TO@ ExpressionStatement@@MethodInvocation:assertThat(properties.getCommand().getHelp().getGroupingMode()).isEqualTo(GroupingMode.FLAT) @AT@ 5658 @LENGTH@ 92
------------------INS MethodInvocation@@MethodName:assertThat:[properties.getCommand().getHelp().getGroupingMode()] @TO@ MethodInvocation@@assertThat(properties.getCommand().getHelp().getGroupingMode()).isEqualTo(GroupingMode.FLAT) @AT@ 5658 @LENGTH@ 63
---------------------INS MethodInvocation@@properties.getCommand().getHelp().getGroupingMode() @TO@ MethodInvocation@@MethodName:assertThat:[properties.getCommand().getHelp().getGroupingMode()] @AT@ 5669 @LENGTH@ 51
------------------------INS MethodInvocation@@MethodName:getHelp:[] @TO@ MethodInvocation@@properties.getCommand().getHelp().getGroupingMode() @AT@ 5669 @LENGTH@ 33
------------------------INS MethodInvocation@@MethodName:getCommand:[] @TO@ MethodInvocation@@properties.getCommand().getHelp().getGroupingMode() @AT@ 5669 @LENGTH@ 23
------------------------INS SimpleName@@Name:properties @TO@ MethodInvocation@@properties.getCommand().getHelp().getGroupingMode() @AT@ 5669 @LENGTH@ 10
------------------------INS SimpleName@@MethodName:getGroupingMode:[] @TO@ MethodInvocation@@properties.getCommand().getHelp().getGroupingMode() @AT@ 5703 @LENGTH@ 17
------------------INS SimpleName@@MethodName:isEqualTo:[GroupingMode.FLAT] @TO@ MethodInvocation@@assertThat(properties.getCommand().getHelp().getGroupingMode()).isEqualTo(GroupingMode.FLAT) @AT@ 5722 @LENGTH@ 28
---------------------INS QualifiedName@@GroupingMode.FLAT @TO@ SimpleName@@MethodName:isEqualTo:[GroupingMode.FLAT] @AT@ 5732 @LENGTH@ 17
------------------------INS SimpleName@@GroupingMode @TO@ QualifiedName@@GroupingMode.FLAT @AT@ 5732 @LENGTH@ 12
------------------------INS SimpleName@@FLAT @TO@ QualifiedName@@GroupingMode.FLAT @AT@ 5745 @LENGTH@ 4


UPD ExpressionStatement@@MethodInvocation:map.keySet().remove(key) @TO@ MethodInvocation:map.remove(key) @AT@ 9264 @LENGTH@ 25
---UPD MethodInvocation@@map.keySet().remove(key) @TO@ map.remove(key) @AT@ 9264 @LENGTH@ 24
------DEL MethodInvocation@@MethodName:keySet:[] @AT@ 9264 @LENGTH@ 12


INS MethodDeclaration@@boolean, MethodName:include, PropertyFilter.RelaxedPropertyPath fieldName,  @TO@ TypeDeclaration@@[final, static]ReturnTuple,  @AT@ 5760 @LENGTH@ 469
---INS PrimitiveType@@boolean @TO@ MethodDeclaration@@boolean, MethodName:include, PropertyFilter.RelaxedPropertyPath fieldName,  @AT@ 5752 @LENGTH@ 7
---INS SimpleName@@MethodName:include @TO@ MethodDeclaration@@boolean, MethodName:include, PropertyFilter.RelaxedPropertyPath fieldName,  @AT@ 5760 @LENGTH@ 7
---INS SingleVariableDeclaration@@PropertyFilter.RelaxedPropertyPath fieldName @TO@ MethodDeclaration@@boolean, MethodName:include, PropertyFilter.RelaxedPropertyPath fieldName,  @AT@ 5768 @LENGTH@ 44
------INS SimpleType@@PropertyFilter.RelaxedPropertyPath @TO@ SingleVariableDeclaration@@PropertyFilter.RelaxedPropertyPath fieldName @AT@ 5768 @LENGTH@ 34
------INS SimpleName@@fieldName @TO@ SingleVariableDeclaration@@PropertyFilter.RelaxedPropertyPath fieldName @AT@ 5803 @LENGTH@ 9
---INS VariableDeclarationStatement@@String dotPath=nodeDescription.getGraphProperty(fieldName.getSegment()).filter(Neo4jPersistentProperty.class::isInstance).map(Neo4jPersistentProperty.class::cast).filter(p -> p.findAnnotation(Property.class) != null).map(p -> fieldName.toDotPath(p.getPropertyName())).orElseGet(fieldName::toDotPath); @TO@ MethodDeclaration@@boolean, MethodName:include, PropertyFilter.RelaxedPropertyPath fieldName,  @AT@ 5819 @LENGTH@ 332
------INS SimpleType@@String @TO@ VariableDeclarationStatement@@String dotPath=nodeDescription.getGraphProperty(fieldName.getSegment()).filter(Neo4jPersistentProperty.class::isInstance).map(Neo4jPersistentProperty.class::cast).filter(p -> p.findAnnotation(Property.class) != null).map(p -> fieldName.toDotPath(p.getPropertyName())).orElseGet(fieldName::toDotPath); @AT@ 5819 @LENGTH@ 6
------INS VariableDeclarationFragment@@dotPath=nodeDescription.getGraphProperty(fieldName.getSegment()).filter(Neo4jPersistentProperty.class::isInstance).map(Neo4jPersistentProperty.class::cast).filter(p -> p.findAnnotation(Property.class) != null).map(p -> fieldName.toDotPath(p.getPropertyName())).orElseGet(fieldName::toDotPath) @TO@ VariableDeclarationStatement@@String dotPath=nodeDescription.getGraphProperty(fieldName.getSegment()).filter(Neo4jPersistentProperty.class::isInstance).map(Neo4jPersistentProperty.class::cast).filter(p -> p.findAnnotation(Property.class) != null).map(p -> fieldName.toDotPath(p.getPropertyName())).orElseGet(fieldName::toDotPath); @AT@ 5826 @LENGTH@ 324
---------INS SimpleName@@dotPath @TO@ VariableDeclarationFragment@@dotPath=nodeDescription.getGraphProperty(fieldName.getSegment()).filter(Neo4jPersistentProperty.class::isInstance).map(Neo4jPersistentProperty.class::cast).filter(p -> p.findAnnotation(Property.class) != null).map(p -> fieldName.toDotPath(p.getPropertyName())).orElseGet(fieldName::toDotPath) @AT@ 5826 @LENGTH@ 7
---------INS MethodInvocation@@nodeDescription.getGraphProperty(fieldName.getSegment()).filter(Neo4jPersistentProperty.class::isInstance).map(Neo4jPersistentProperty.class::cast).filter(p -> p.findAnnotation(Property.class) != null).map(p -> fieldName.toDotPath(p.getPropertyName())).orElseGet(fieldName::toDotPath) @TO@ VariableDeclarationFragment@@dotPath=nodeDescription.getGraphProperty(fieldName.getSegment()).filter(Neo4jPersistentProperty.class::isInstance).map(Neo4jPersistentProperty.class::cast).filter(p -> p.findAnnotation(Property.class) != null).map(p -> fieldName.toDotPath(p.getPropertyName())).orElseGet(fieldName::toDotPath) @AT@ 5836 @LENGTH@ 314
------------INS MethodInvocation@@MethodName:map:[p -> fieldName.toDotPath(p.getPropertyName())] @TO@ MethodInvocation@@nodeDescription.getGraphProperty(fieldName.getSegment()).filter(Neo4jPersistentProperty.class::isInstance).map(Neo4jPersistentProperty.class::cast).filter(p -> p.findAnnotation(Property.class) != null).map(p -> fieldName.toDotPath(p.getPropertyName())).orElseGet(fieldName::toDotPath) @AT@ 5836 @LENGTH@ 276
---------------INS LambdaExpression@@p -> fieldName.toDotPath(p.getPropertyName()) @TO@ MethodInvocation@@MethodName:map:[p -> fieldName.toDotPath(p.getPropertyName())] @AT@ 6066 @LENGTH@ 45
------------------INS VariableDeclarationFragment@@p @TO@ LambdaExpression@@p -> fieldName.toDotPath(p.getPropertyName()) @AT@ 6066 @LENGTH@ 1
---------------------INS SimpleName@@p @TO@ VariableDeclarationFragment@@p @AT@ 6066 @LENGTH@ 1
------------------INS MethodInvocation@@fieldName.toDotPath(p.getPropertyName()) @TO@ LambdaExpression@@p -> fieldName.toDotPath(p.getPropertyName()) @AT@ 6071 @LENGTH@ 40
---------------------INS SimpleName@@Name:fieldName @TO@ MethodInvocation@@fieldName.toDotPath(p.getPropertyName()) @AT@ 6071 @LENGTH@ 9
---------------------INS SimpleName@@MethodName:toDotPath:[p.getPropertyName()] @TO@ MethodInvocation@@fieldName.toDotPath(p.getPropertyName()) @AT@ 6081 @LENGTH@ 30
------------------------INS MethodInvocation@@p.getPropertyName() @TO@ SimpleName@@MethodName:toDotPath:[p.getPropertyName()] @AT@ 6091 @LENGTH@ 19
---------------------------INS SimpleName@@Name:p @TO@ MethodInvocation@@p.getPropertyName() @AT@ 6091 @LENGTH@ 1
---------------------------INS SimpleName@@MethodName:getPropertyName:[] @TO@ MethodInvocation@@p.getPropertyName() @AT@ 6093 @LENGTH@ 17
------------INS MethodInvocation@@MethodName:filter:[p -> p.findAnnotation(Property.class) != null] @TO@ MethodInvocation@@nodeDescription.getGraphProperty(fieldName.getSegment()).filter(Neo4jPersistentProperty.class::isInstance).map(Neo4jPersistentProperty.class::cast).filter(p -> p.findAnnotation(Property.class) != null).map(p -> fieldName.toDotPath(p.getPropertyName())).orElseGet(fieldName::toDotPath) @AT@ 5836 @LENGTH@ 219
---------------INS LambdaExpression@@p -> p.findAnnotation(Property.class) != null @TO@ MethodInvocation@@MethodName:filter:[p -> p.findAnnotation(Property.class) != null] @AT@ 6009 @LENGTH@ 45
------------------INS VariableDeclarationFragment@@p @TO@ LambdaExpression@@p -> p.findAnnotation(Property.class) != null @AT@ 6009 @LENGTH@ 1
---------------------INS SimpleName@@p @TO@ VariableDeclarationFragment@@p @AT@ 6009 @LENGTH@ 1
------------------INS InfixExpression@@p.findAnnotation(Property.class) != null @TO@ LambdaExpression@@p -> p.findAnnotation(Property.class) != null @AT@ 6014 @LENGTH@ 40
---------------------INS MethodInvocation@@p.findAnnotation(Property.class) @TO@ InfixExpression@@p.findAnnotation(Property.class) != null @AT@ 6014 @LENGTH@ 32
------------------------INS SimpleName@@Name:p @TO@ MethodInvocation@@p.findAnnotation(Property.class) @AT@ 6014 @LENGTH@ 1
------------------------INS SimpleName@@MethodName:findAnnotation:[Property.class] @TO@ MethodInvocation@@p.findAnnotation(Property.class) @AT@ 6016 @LENGTH@ 30
---------------------------INS TypeLiteral@@Property.class @TO@ SimpleName@@MethodName:findAnnotation:[Property.class] @AT@ 6031 @LENGTH@ 14
---------------------INS Operator@@!= @TO@ InfixExpression@@p.findAnnotation(Property.class) != null @AT@ 6046 @LENGTH@ 2
---------------------INS NullLiteral@@null @TO@ InfixExpression@@p.findAnnotation(Property.class) != null @AT@ 6050 @LENGTH@ 4
------------INS MethodInvocation@@MethodName:map:[Neo4jPersistentProperty.class::cast] @TO@ MethodInvocation@@nodeDescription.getGraphProperty(fieldName.getSegment()).filter(Neo4jPersistentProperty.class::isInstance).map(Neo4jPersistentProperty.class::cast).filter(p -> p.findAnnotation(Property.class) != null).map(p -> fieldName.toDotPath(p.getPropertyName())).orElseGet(fieldName::toDotPath) @AT@ 5836 @LENGTH@ 159
------------INS MethodInvocation@@MethodName:filter:[Neo4jPersistentProperty.class::isInstance] @TO@ MethodInvocation@@nodeDescription.getGraphProperty(fieldName.getSegment()).filter(Neo4jPersistentProperty.class::isInstance).map(Neo4jPersistentProperty.class::cast).filter(p -> p.findAnnotation(Property.class) != null).map(p -> fieldName.toDotPath(p.getPropertyName())).orElseGet(fieldName::toDotPath) @AT@ 5836 @LENGTH@ 112
------------INS MethodInvocation@@MethodName:getGraphProperty:[fieldName.getSegment()] @TO@ MethodInvocation@@nodeDescription.getGraphProperty(fieldName.getSegment()).filter(Neo4jPersistentProperty.class::isInstance).map(Neo4jPersistentProperty.class::cast).filter(p -> p.findAnnotation(Property.class) != null).map(p -> fieldName.toDotPath(p.getPropertyName())).orElseGet(fieldName::toDotPath) @AT@ 5836 @LENGTH@ 56
---------------INS MethodInvocation@@fieldName.getSegment() @TO@ MethodInvocation@@MethodName:getGraphProperty:[fieldName.getSegment()] @AT@ 5869 @LENGTH@ 22
------------------INS SimpleName@@Name:fieldName @TO@ MethodInvocation@@fieldName.getSegment() @AT@ 5869 @LENGTH@ 9
------------------INS SimpleName@@MethodName:getSegment:[] @TO@ MethodInvocation@@fieldName.getSegment() @AT@ 5879 @LENGTH@ 12
------------INS SimpleName@@Name:nodeDescription @TO@ MethodInvocation@@nodeDescription.getGraphProperty(fieldName.getSegment()).filter(Neo4jPersistentProperty.class::isInstance).map(Neo4jPersistentProperty.class::cast).filter(p -> p.findAnnotation(Property.class) != null).map(p -> fieldName.toDotPath(p.getPropertyName())).orElseGet(fieldName::toDotPath) @AT@ 5836 @LENGTH@ 15
------------INS SimpleName@@MethodName:orElseGet:[fieldName::toDotPath] @TO@ MethodInvocation@@nodeDescription.getGraphProperty(fieldName.getSegment()).filter(Neo4jPersistentProperty.class::isInstance).map(Neo4jPersistentProperty.class::cast).filter(p -> p.findAnnotation(Property.class) != null).map(p -> fieldName.toDotPath(p.getPropertyName())).orElseGet(fieldName::toDotPath) @AT@ 6119 @LENGTH@ 31
---INS ReturnStatement@@MethodInvocation:this.filteredProperties.contains(dotPath,fieldName.getType()) @TO@ MethodDeclaration@@boolean, MethodName:include, PropertyFilter.RelaxedPropertyPath fieldName,  @AT@ 6155 @LENGTH@ 70
------INS MethodInvocation@@this.filteredProperties.contains(dotPath,fieldName.getType()) @TO@ ReturnStatement@@MethodInvocation:this.filteredProperties.contains(dotPath,fieldName.getType()) @AT@ 6162 @LENGTH@ 62
---------INS FieldAccess@@this.filteredProperties @TO@ MethodInvocation@@this.filteredProperties.contains(dotPath,fieldName.getType()) @AT@ 6162 @LENGTH@ 23
------------INS ThisExpression@@this @TO@ FieldAccess@@this.filteredProperties @AT@ 6162 @LENGTH@ 4
------------INS SimpleName@@filteredProperties @TO@ FieldAccess@@this.filteredProperties @AT@ 6167 @LENGTH@ 18
---------INS SimpleName@@MethodName:contains:[dotPath, fieldName.getType()] @TO@ MethodInvocation@@this.filteredProperties.contains(dotPath,fieldName.getType()) @AT@ 6186 @LENGTH@ 38
------------INS SimpleName@@dotPath @TO@ SimpleName@@MethodName:contains:[dotPath, fieldName.getType()] @AT@ 6195 @LENGTH@ 7
------------INS MethodInvocation@@fieldName.getType() @TO@ SimpleName@@MethodName:contains:[dotPath, fieldName.getType()] @AT@ 6204 @LENGTH@ 19
---------------INS SimpleName@@Name:fieldName @TO@ MethodInvocation@@fieldName.getType() @AT@ 6204 @LENGTH@ 9
---------------INS SimpleName@@MethodName:getType:[] @TO@ MethodInvocation@@fieldName.getType() @AT@ 6214 @LENGTH@ 9


UPD ExpressionStatement@@MethodInvocation:documentCommandName(result,command,registration.getHelp()) @TO@ MethodInvocation:documentCommandName(result,command,registration.getDescription()) @AT@ 4392 @LENGTH@ 61
---UPD MethodInvocation@@documentCommandName(result,command,registration.getHelp()) @TO@ documentCommandName(result,command,registration.getDescription()) @AT@ 4392 @LENGTH@ 60
------UPD SimpleName@@MethodName:documentCommandName:[result, command, registration.getHelp()] @TO@ MethodName:documentCommandName:[result, command, registration.getDescription()] @AT@ 4392 @LENGTH@ 60
---------UPD MethodInvocation@@registration.getHelp() @TO@ registration.getDescription() @AT@ 4429 @LENGTH@ 22
------------UPD SimpleName@@MethodName:getHelp:[] @TO@ MethodName:getDescription:[] @AT@ 4442 @LENGTH@ 9


UPD ExpressionStatement@@MethodInvocation:client.alter_table(fromDatabase,fromName,table) @TO@ MethodInvocation:MetastoreUtil.alterTable(client,fromDatabase,fromName,table) @AT@ 8426 @LENGTH@ 50
---UPD MethodInvocation@@client.alter_table(fromDatabase,fromName,table) @TO@ MetastoreUtil.alterTable(client,fromDatabase,fromName,table) @AT@ 8426 @LENGTH@ 49
------UPD SimpleName@@Name:client @TO@ Name:MetastoreUtil @AT@ 8426 @LENGTH@ 6
------UPD SimpleName@@MethodName:alter_table:[fromDatabase, fromName, table] @TO@ MethodName:alterTable:[client, fromDatabase, fromName, table] @AT@ 8433 @LENGTH@ 42
---------INS SimpleName@@client @TO@ SimpleName@@MethodName:alter_table:[fromDatabase, fromName, table] @AT@ 8451 @LENGTH@ 6


MOV MethodDeclaration@@default, Class<?>, MethodName:getIdType,  @TO@ TypeDeclaration@@[public]RepositoryMetadata,  @AT@ 1716 @LENGTH@ 76


INS MethodDeclaration@@public, void, MethodName:removeCommand, String name,  @TO@ TypeDeclaration@@[public]ConfigurableCommandRegistry, [CommandRegistry] @AT@ 2161 @LENGTH@ 68
---INS Modifier@@public @TO@ MethodDeclaration@@public, void, MethodName:removeCommand, String name,  @AT@ 2161 @LENGTH@ 6
---INS PrimitiveType@@void @TO@ MethodDeclaration@@public, void, MethodName:removeCommand, String name,  @AT@ 2168 @LENGTH@ 4
---INS SimpleName@@MethodName:removeCommand @TO@ MethodDeclaration@@public, void, MethodName:removeCommand, String name,  @AT@ 2173 @LENGTH@ 13
---INS SingleVariableDeclaration@@String name @TO@ MethodDeclaration@@public, void, MethodName:removeCommand, String name,  @AT@ 2187 @LENGTH@ 11
------INS SimpleType@@String @TO@ SingleVariableDeclaration@@String name @AT@ 2187 @LENGTH@ 6
------INS SimpleName@@name @TO@ SingleVariableDeclaration@@String name @AT@ 2194 @LENGTH@ 4
---INS ExpressionStatement@@MethodInvocation:commands.remove(name) @TO@ MethodDeclaration@@public, void, MethodName:removeCommand, String name,  @AT@ 2204 @LENGTH@ 22
------INS MethodInvocation@@commands.remove(name) @TO@ ExpressionStatement@@MethodInvocation:commands.remove(name) @AT@ 2204 @LENGTH@ 21
---------INS SimpleName@@Name:commands @TO@ MethodInvocation@@commands.remove(name) @AT@ 2204 @LENGTH@ 8
---------INS SimpleName@@MethodName:remove:[name] @TO@ MethodInvocation@@commands.remove(name) @AT@ 2213 @LENGTH@ 12
------------INS SimpleName@@name @TO@ SimpleName@@MethodName:remove:[name] @AT@ 2220 @LENGTH@ 4


UPD TypeDeclaration@@[private]ReverseStringComparator, [Comparator<String>] @TO@ [private, static]ReverseStringComparator, [Comparator<String>] @AT@ 1537 @LENGTH@ 211
---INS Modifier@@static @TO@ TypeDeclaration@@[private]ReverseStringComparator, [Comparator<String>] @AT@ 1545 @LENGTH@ 6


INS MethodDeclaration@@public, void, MethodName:setKnownLanguages, List<Knows> knownLanguages,  @TO@ TypeDeclaration@@[@Node, public]Person,  @AT@ 1451 @LENGTH@ 102
---INS Modifier@@public @TO@ MethodDeclaration@@public, void, MethodName:setKnownLanguages, List<Knows> knownLanguages,  @AT@ 1451 @LENGTH@ 6
---INS PrimitiveType@@void @TO@ MethodDeclaration@@public, void, MethodName:setKnownLanguages, List<Knows> knownLanguages,  @AT@ 1458 @LENGTH@ 4
---INS SimpleName@@MethodName:setKnownLanguages @TO@ MethodDeclaration@@public, void, MethodName:setKnownLanguages, List<Knows> knownLanguages,  @AT@ 1463 @LENGTH@ 17
---INS SingleVariableDeclaration@@List<Knows> knownLanguages @TO@ MethodDeclaration@@public, void, MethodName:setKnownLanguages, List<Knows> knownLanguages,  @AT@ 1481 @LENGTH@ 26
------INS ParameterizedType@@List<Knows> @TO@ SingleVariableDeclaration@@List<Knows> knownLanguages @AT@ 1481 @LENGTH@ 11
---------INS SimpleType@@List @TO@ ParameterizedType@@List<Knows> @AT@ 1481 @LENGTH@ 4
---------INS SimpleType@@Knows @TO@ ParameterizedType@@List<Knows> @AT@ 1486 @LENGTH@ 5
------INS SimpleName@@knownLanguages @TO@ SingleVariableDeclaration@@List<Knows> knownLanguages @AT@ 1493 @LENGTH@ 14
---INS ExpressionStatement@@Assignment:this.knownLanguages=knownLanguages @TO@ MethodDeclaration@@public, void, MethodName:setKnownLanguages, List<Knows> knownLanguages,  @AT@ 1513 @LENGTH@ 37
------INS Assignment@@this.knownLanguages=knownLanguages @TO@ ExpressionStatement@@Assignment:this.knownLanguages=knownLanguages @AT@ 1513 @LENGTH@ 36
---------INS FieldAccess@@this.knownLanguages @TO@ Assignment@@this.knownLanguages=knownLanguages @AT@ 1513 @LENGTH@ 19
------------INS ThisExpression@@this @TO@ FieldAccess@@this.knownLanguages @AT@ 1513 @LENGTH@ 4
------------INS SimpleName@@knownLanguages @TO@ FieldAccess@@this.knownLanguages @AT@ 1518 @LENGTH@ 14
---------INS Operator@@= @TO@ Assignment@@this.knownLanguages=knownLanguages @AT@ 1532 @LENGTH@ 1
---------INS SimpleName@@knownLanguages @TO@ Assignment@@this.knownLanguages=knownLanguages @AT@ 1535 @LENGTH@ 14


UPD ExpressionStatement@@Assignment:arangoDatabase=arangoDb.db(DATABASE_NAME) @TO@ Assignment:arangoDatabase=arangoDb.db(DbName.of(DATABASE_NAME)) @AT@ 2096 @LENGTH@ 44
---UPD Assignment@@arangoDatabase=arangoDb.db(DATABASE_NAME) @TO@ arangoDatabase=arangoDb.db(DbName.of(DATABASE_NAME)) @AT@ 2096 @LENGTH@ 43
------UPD MethodInvocation@@arangoDb.db(DATABASE_NAME) @TO@ arangoDb.db(DbName.of(DATABASE_NAME)) @AT@ 2113 @LENGTH@ 26
---------UPD SimpleName@@MethodName:db:[DATABASE_NAME] @TO@ MethodName:of:[DATABASE_NAME] @AT@ 2122 @LENGTH@ 17
---------INS SimpleName@@MethodName:db:[DbName.of(DATABASE_NAME)] @TO@ MethodInvocation@@arangoDb.db(DATABASE_NAME) @AT@ 2161 @LENGTH@ 28
------------INS MethodInvocation@@DbName.of(DATABASE_NAME) @TO@ SimpleName@@MethodName:db:[DbName.of(DATABASE_NAME)] @AT@ 2164 @LENGTH@ 24
---------------MOV SimpleName@@MethodName:db:[DATABASE_NAME] @TO@ MethodInvocation@@DbName.of(DATABASE_NAME) @AT@ 2122 @LENGTH@ 17
---------------INS SimpleName@@Name:DbName @TO@ MethodInvocation@@DbName.of(DATABASE_NAME) @AT@ 2164 @LENGTH@ 6


UPD ExpressionStatement@@MethodInvocation:assertFalse(map.values().contains(null)) @TO@ MethodInvocation:assertFalse(map.containsValue(null)) @AT@ 3013 @LENGTH@ 41
---UPD MethodInvocation@@assertFalse(map.values().contains(null)) @TO@ assertFalse(map.containsValue(null)) @AT@ 3013 @LENGTH@ 40
------UPD SimpleName@@MethodName:assertFalse:[map.values().contains(null)] @TO@ MethodName:assertFalse:[map.containsValue(null)] @AT@ 3013 @LENGTH@ 40
---------UPD MethodInvocation@@map.values().contains(null) @TO@ map.containsValue(null) @AT@ 3025 @LENGTH@ 27
------------DEL MethodInvocation@@MethodName:values:[] @AT@ 3025 @LENGTH@ 12
------------UPD SimpleName@@MethodName:contains:[null] @TO@ MethodName:containsValue:[null] @AT@ 3038 @LENGTH@ 14


UPD ExpressionStatement@@MethodInvocation:assertEquals(5,StreamSupport.stream(MockConsumerInterceptor.recordsCaptured.get(0).records(TOPIC).spliterator(),false).count()) @TO@ MethodInvocation:assertEquals(5,MockConsumerInterceptor.recordsCaptured.stream().flatMap(i -> StreamSupport.stream(i.records(TOPIC).spliterator(),false)).count()) @AT@ 3630 @LENGTH@ 147
---UPD MethodInvocation@@assertEquals(5,StreamSupport.stream(MockConsumerInterceptor.recordsCaptured.get(0).records(TOPIC).spliterator(),false).count()) @TO@ assertEquals(5,MockConsumerInterceptor.recordsCaptured.stream().flatMap(i -> StreamSupport.stream(i.records(TOPIC).spliterator(),false)).count()) @AT@ 3630 @LENGTH@ 146
------UPD SimpleName@@MethodName:assertEquals:[5, StreamSupport.stream(MockConsumerInterceptor.recordsCaptured.get(0).records(TOPIC).spliterator(),false).count()] @TO@ MethodName:assertEquals:[5, MockConsumerInterceptor.recordsCaptured.stream().flatMap(i -> StreamSupport.stream(i.records(TOPIC).spliterator(),false)).count()] @AT@ 3630 @LENGTH@ 146
---------UPD MethodInvocation@@StreamSupport.stream(MockConsumerInterceptor.recordsCaptured.get(0).records(TOPIC).spliterator(),false).count() @TO@ MockConsumerInterceptor.recordsCaptured.stream().flatMap(i -> StreamSupport.stream(i.records(TOPIC).spliterator(),false)).count() @AT@ 3646 @LENGTH@ 129
------------INS MethodInvocation@@MethodName:flatMap:[i -> StreamSupport.stream(i.records(TOPIC).spliterator(),false)] @TO@ MethodInvocation@@StreamSupport.stream(MockConsumerInterceptor.recordsCaptured.get(0).records(TOPIC).spliterator(),false).count() @AT@ 3645 @LENGTH@ 139
---------------INS LambdaExpression@@i -> StreamSupport.stream(i.records(TOPIC).spliterator(),false) @TO@ MethodInvocation@@MethodName:flatMap:[i -> StreamSupport.stream(i.records(TOPIC).spliterator(),false)] @AT@ 3719 @LENGTH@ 64
------------------INS VariableDeclarationFragment@@i @TO@ LambdaExpression@@i -> StreamSupport.stream(i.records(TOPIC).spliterator(),false) @AT@ 3719 @LENGTH@ 1
---------------------INS SimpleName@@i @TO@ VariableDeclarationFragment@@i @AT@ 3719 @LENGTH@ 1
---------------------INS SimpleName@@i @TO@ VariableDeclarationFragment@@i @AT@ 3719 @LENGTH@ 1
---------------------INS SimpleName@@i @TO@ VariableDeclarationFragment@@i @AT@ 3719 @LENGTH@ 1
---------------------INS SimpleName@@i @TO@ VariableDeclarationFragment@@i @AT@ 3719 @LENGTH@ 1
---------------------INS SimpleName@@i @TO@ VariableDeclarationFragment@@i @AT@ 3719 @LENGTH@ 1
------------------INS MethodInvocation@@StreamSupport.stream(i.records(TOPIC).spliterator(),false) @TO@ LambdaExpression@@i -> StreamSupport.stream(i.records(TOPIC).spliterator(),false) @AT@ 3724 @LENGTH@ 59
---------------------INS SimpleName@@Name:StreamSupport @TO@ MethodInvocation@@StreamSupport.stream(i.records(TOPIC).spliterator(),false) @AT@ 3724 @LENGTH@ 13
---------------------INS SimpleName@@MethodName:stream:[i.records(TOPIC).spliterator(), false] @TO@ MethodInvocation@@StreamSupport.stream(i.records(TOPIC).spliterator(),false) @AT@ 3738 @LENGTH@ 45
------------------------INS MethodInvocation@@i.records(TOPIC).spliterator() @TO@ SimpleName@@MethodName:stream:[i.records(TOPIC).spliterator(), false] @AT@ 3745 @LENGTH@ 30
---------------------------MOV MethodInvocation@@MethodName:records:[TOPIC] @TO@ MethodInvocation@@i.records(TOPIC).spliterator() @AT@ 3667 @LENGTH@ 61
---------------------------MOV MethodInvocation@@MethodName:records:[TOPIC] @TO@ MethodInvocation@@i.records(TOPIC).spliterator() @AT@ 3667 @LENGTH@ 61
---------------------------MOV MethodInvocation@@MethodName:records:[TOPIC] @TO@ MethodInvocation@@i.records(TOPIC).spliterator() @AT@ 3667 @LENGTH@ 61
---------------------------MOV MethodInvocation@@MethodName:records:[TOPIC] @TO@ MethodInvocation@@i.records(TOPIC).spliterator() @AT@ 3667 @LENGTH@ 61
---------------------------MOV MethodInvocation@@MethodName:records:[TOPIC] @TO@ MethodInvocation@@i.records(TOPIC).spliterator() @AT@ 3667 @LENGTH@ 61
---------------------------MOV SimpleName@@MethodName:spliterator:[] @TO@ MethodInvocation@@i.records(TOPIC).spliterator() @AT@ 3729 @LENGTH@ 13
---------------------------MOV SimpleName@@MethodName:spliterator:[] @TO@ MethodInvocation@@i.records(TOPIC).spliterator() @AT@ 3729 @LENGTH@ 13
---------------------------MOV SimpleName@@MethodName:spliterator:[] @TO@ MethodInvocation@@i.records(TOPIC).spliterator() @AT@ 3729 @LENGTH@ 13
---------------------------MOV SimpleName@@MethodName:spliterator:[] @TO@ MethodInvocation@@i.records(TOPIC).spliterator() @AT@ 3729 @LENGTH@ 13
---------------------------MOV SimpleName@@MethodName:spliterator:[] @TO@ MethodInvocation@@i.records(TOPIC).spliterator() @AT@ 3729 @LENGTH@ 13
---------------------------INS SimpleName@@Name:i @TO@ MethodInvocation@@i.records(TOPIC).spliterator() @AT@ 3745 @LENGTH@ 1
------------------------INS BooleanLiteral@@false @TO@ SimpleName@@MethodName:stream:[i.records(TOPIC).spliterator(), false] @AT@ 3777 @LENGTH@ 5
------------INS MethodInvocation@@MethodName:flatMap:[i -> StreamSupport.stream(i.records(TOPIC).spliterator(),false)] @TO@ MethodInvocation@@StreamSupport.stream(MockConsumerInterceptor.recordsCaptured.get(0).records(TOPIC).spliterator(),false).count() @AT@ 3645 @LENGTH@ 139
---------------INS LambdaExpression@@i -> StreamSupport.stream(i.records(TOPIC).spliterator(),false) @TO@ MethodInvocation@@MethodName:flatMap:[i -> StreamSupport.stream(i.records(TOPIC).spliterator(),false)] @AT@ 3719 @LENGTH@ 64
------------------INS VariableDeclarationFragment@@i @TO@ LambdaExpression@@i -> StreamSupport.stream(i.records(TOPIC).spliterator(),false) @AT@ 3719 @LENGTH@ 1
---------------------INS SimpleName@@i @TO@ VariableDeclarationFragment@@i @AT@ 3719 @LENGTH@ 1
---------------------INS SimpleName@@i @TO@ VariableDeclarationFragment@@i @AT@ 3719 @LENGTH@ 1
---------------------INS SimpleName@@i @TO@ VariableDeclarationFragment@@i @AT@ 3719 @LENGTH@ 1
---------------------INS SimpleName@@i @TO@ VariableDeclarationFragment@@i @AT@ 3719 @LENGTH@ 1
---------------------INS SimpleName@@i @TO@ VariableDeclarationFragment@@i @AT@ 3719 @LENGTH@ 1
------------------INS MethodInvocation@@StreamSupport.stream(i.records(TOPIC).spliterator(),false) @TO@ LambdaExpression@@i -> StreamSupport.stream(i.records(TOPIC).spliterator(),false) @AT@ 3724 @LENGTH@ 59
---------------------INS SimpleName@@Name:StreamSupport @TO@ MethodInvocation@@StreamSupport.stream(i.records(TOPIC).spliterator(),false) @AT@ 3724 @LENGTH@ 13
---------------------INS SimpleName@@MethodName:stream:[i.records(TOPIC).spliterator(), false] @TO@ MethodInvocation@@StreamSupport.stream(i.records(TOPIC).spliterator(),false) @AT@ 3738 @LENGTH@ 45
------------------------INS MethodInvocation@@i.records(TOPIC).spliterator() @TO@ SimpleName@@MethodName:stream:[i.records(TOPIC).spliterator(), false] @AT@ 3745 @LENGTH@ 30
---------------------------MOV MethodInvocation@@MethodName:records:[TOPIC] @TO@ MethodInvocation@@i.records(TOPIC).spliterator() @AT@ 3667 @LENGTH@ 61
---------------------------MOV MethodInvocation@@MethodName:records:[TOPIC] @TO@ MethodInvocation@@i.records(TOPIC).spliterator() @AT@ 3667 @LENGTH@ 61
---------------------------MOV MethodInvocation@@MethodName:records:[TOPIC] @TO@ MethodInvocation@@i.records(TOPIC).spliterator() @AT@ 3667 @LENGTH@ 61
---------------------------MOV MethodInvocation@@MethodName:records:[TOPIC] @TO@ MethodInvocation@@i.records(TOPIC).spliterator() @AT@ 3667 @LENGTH@ 61
---------------------------MOV MethodInvocation@@MethodName:records:[TOPIC] @TO@ MethodInvocation@@i.records(TOPIC).spliterator() @AT@ 3667 @LENGTH@ 61
---------------------------MOV SimpleName@@MethodName:spliterator:[] @TO@ MethodInvocation@@i.records(TOPIC).spliterator() @AT@ 3729 @LENGTH@ 13
---------------------------MOV SimpleName@@MethodName:spliterator:[] @TO@ MethodInvocation@@i.records(TOPIC).spliterator() @AT@ 3729 @LENGTH@ 13
---------------------------MOV SimpleName@@MethodName:spliterator:[] @TO@ MethodInvocation@@i.records(TOPIC).spliterator() @AT@ 3729 @LENGTH@ 13
---------------------------MOV SimpleName@@MethodName:spliterator:[] @TO@ MethodInvocation@@i.records(TOPIC).spliterator() @AT@ 3729 @LENGTH@ 13
---------------------------MOV SimpleName@@MethodName:spliterator:[] @TO@ MethodInvocation@@i.records(TOPIC).spliterator() @AT@ 3729 @LENGTH@ 13
---------------------------INS SimpleName@@Name:i @TO@ MethodInvocation@@i.records(TOPIC).spliterator() @AT@ 3745 @LENGTH@ 1
------------------------INS BooleanLiteral@@false @TO@ SimpleName@@MethodName:stream:[i.records(TOPIC).spliterator(), false] @AT@ 3777 @LENGTH@ 5
------------INS MethodInvocation@@MethodName:stream:[] @TO@ MethodInvocation@@StreamSupport.stream(MockConsumerInterceptor.recordsCaptured.get(0).records(TOPIC).spliterator(),false).count() @AT@ 3645 @LENGTH@ 48
------------INS MethodInvocation@@MethodName:stream:[] @TO@ MethodInvocation@@StreamSupport.stream(MockConsumerInterceptor.recordsCaptured.get(0).records(TOPIC).spliterator(),false).count() @AT@ 3645 @LENGTH@ 48
------------INS QualifiedName@@Name:MockConsumerInterceptor.recordsCaptured @TO@ MethodInvocation@@StreamSupport.stream(MockConsumerInterceptor.recordsCaptured.get(0).records(TOPIC).spliterator(),false).count() @AT@ 3645 @LENGTH@ 39
------------INS QualifiedName@@Name:MockConsumerInterceptor.recordsCaptured @TO@ MethodInvocation@@StreamSupport.stream(MockConsumerInterceptor.recordsCaptured.get(0).records(TOPIC).spliterator(),false).count() @AT@ 3645 @LENGTH@ 39
------------DEL MethodInvocation@@MethodName:stream:[MockConsumerInterceptor.recordsCaptured.get(0).records(TOPIC).spliterator(), false] @AT@ 3646 @LENGTH@ 104
---------------DEL MethodInvocation@@MockConsumerInterceptor.recordsCaptured.get(0).records(TOPIC).spliterator() @AT@ 3667 @LENGTH@ 75
------------------DEL MethodInvocation@@MethodName:get:[0] @AT@ 3667 @LENGTH@ 46
---------------------DEL NumberLiteral@@0 @AT@ 3711 @LENGTH@ 1
------------------DEL QualifiedName@@Name:MockConsumerInterceptor.recordsCaptured @AT@ 3667 @LENGTH@ 39
---------------DEL BooleanLiteral@@false @AT@ 3744 @LENGTH@ 5
------------DEL SimpleName@@Name:StreamSupport @AT@ 3646 @LENGTH@ 13


DEL FieldDeclaration@@private, static, final, CharsetEncoder, [PASSWORD_ENCODER=UTF_16LE.newEncoder()] @AT@ 85282 @LENGTH@ 77
---DEL Modifier@@private @AT@ 85282 @LENGTH@ 7
---DEL Modifier@@static @AT@ 85290 @LENGTH@ 6
---DEL Modifier@@final @AT@ 85297 @LENGTH@ 5
---DEL SimpleType@@CharsetEncoder @AT@ 85303 @LENGTH@ 14
---DEL VariableDeclarationFragment@@PASSWORD_ENCODER=UTF_16LE.newEncoder() @AT@ 85318 @LENGTH@ 40
------DEL SimpleName@@PASSWORD_ENCODER @AT@ 85318 @LENGTH@ 16
------DEL MethodInvocation@@UTF_16LE.newEncoder() @AT@ 85337 @LENGTH@ 21
---------DEL SimpleName@@Name:UTF_16LE @AT@ 85337 @LENGTH@ 8
---------DEL SimpleName@@MethodName:newEncoder:[] @AT@ 85346 @LENGTH@ 12


UPD VariableDeclarationStatement@@Object answer=CamelContextHelper.findByType(camelContext,type); @TO@ Object answer=CamelContextHelper.findSingleByType(camelContext,type); @AT@ 3066 @LENGTH@ 66
---UPD VariableDeclarationFragment@@answer=CamelContextHelper.findByType(camelContext,type) @TO@ answer=CamelContextHelper.findSingleByType(camelContext,type) @AT@ 3073 @LENGTH@ 58
------UPD MethodInvocation@@CamelContextHelper.findByType(camelContext,type) @TO@ CamelContextHelper.findSingleByType(camelContext,type) @AT@ 3082 @LENGTH@ 49
---------UPD SimpleName@@MethodName:findByType:[camelContext, type] @TO@ MethodName:findSingleByType:[camelContext, type] @AT@ 3101 @LENGTH@ 30


UPD ExpressionStatement@@MethodInvocation:endpoint.setBinding(binding) @TO@ MethodInvocation:endpoint.setHttpBinding(binding) @AT@ 10692 @LENGTH@ 29
---UPD MethodInvocation@@endpoint.setBinding(binding) @TO@ endpoint.setHttpBinding(binding) @AT@ 10692 @LENGTH@ 28
------UPD SimpleName@@MethodName:setBinding:[binding] @TO@ MethodName:setHttpBinding:[binding] @AT@ 10701 @LENGTH@ 19


UPD ExpressionStatement@@MethodInvocation:assertThat(context.hasPersistentEntityFor(Base$$SpringProxy$873fa2e.class)).isFalse() @TO@ MethodInvocation:assertThat(context.hasPersistentEntityFor(Base$$SpringProxy$873fa2e.class)).isTrue() @AT@ 11508 @LENGTH@ 86
---UPD MethodInvocation@@assertThat(context.hasPersistentEntityFor(Base$$SpringProxy$873fa2e.class)).isFalse() @TO@ assertThat(context.hasPersistentEntityFor(Base$$SpringProxy$873fa2e.class)).isTrue() @AT@ 11508 @LENGTH@ 85
------UPD SimpleName@@MethodName:isFalse:[] @TO@ MethodName:isTrue:[] @AT@ 11584 @LENGTH@ 9


UPD ExpressionStatement@@MethodInvocation:exchange.setOut(exchange.getIn()) @TO@ MethodInvocation:exchange.setMessage(exchange.getIn()) @AT@ 1224 @LENGTH@ 34
---UPD MethodInvocation@@exchange.setOut(exchange.getIn()) @TO@ exchange.setMessage(exchange.getIn()) @AT@ 1224 @LENGTH@ 33
------UPD SimpleName@@MethodName:setOut:[exchange.getIn()] @TO@ MethodName:setMessage:[exchange.getIn()] @AT@ 1233 @LENGTH@ 24


UPD ExpressionStatement@@ClassInstanceCreation:new SevenZMethodConfiguration(SevenZMethod.LZMA2,"") @TO@ MethodInvocation:assertThrows(IllegalArgumentException.class,() -> new SevenZMethodConfiguration(SevenZMethod.LZMA2,"")) @AT@ 2715 @LENGTH@ 54
---INS MethodInvocation@@assertThrows(IllegalArgumentException.class,() -> new SevenZMethodConfiguration(SevenZMethod.LZMA2,"")) @TO@ ExpressionStatement@@ClassInstanceCreation:new SevenZMethodConfiguration(SevenZMethod.LZMA2,"") @AT@ 2813 @LENGTH@ 105
------INS SimpleName@@MethodName:assertThrows:[IllegalArgumentException.class, () -> new SevenZMethodConfiguration(SevenZMethod.LZMA2,"")] @TO@ MethodInvocation@@assertThrows(IllegalArgumentException.class,() -> new SevenZMethodConfiguration(SevenZMethod.LZMA2,"")) @AT@ 2813 @LENGTH@ 105
---------INS TypeLiteral@@IllegalArgumentException.class @TO@ SimpleName@@MethodName:assertThrows:[IllegalArgumentException.class, () -> new SevenZMethodConfiguration(SevenZMethod.LZMA2,"")] @AT@ 2826 @LENGTH@ 30
---------INS LambdaExpression@@() -> new SevenZMethodConfiguration(SevenZMethod.LZMA2,"") @TO@ SimpleName@@MethodName:assertThrows:[IllegalArgumentException.class, () -> new SevenZMethodConfiguration(SevenZMethod.LZMA2,"")] @AT@ 2858 @LENGTH@ 59
------------MOV ClassInstanceCreation@@SevenZMethodConfiguration[SevenZMethod.LZMA2, ""] @TO@ LambdaExpression@@() -> new SevenZMethodConfiguration(SevenZMethod.LZMA2,"") @AT@ 2715 @LENGTH@ 53


UPD VariableDeclarationStatement@@final Object[] singletons=new Object[]{ExceptionClosure.INSTANCE,NOPClosure.INSTANCE}; @TO@ final Object[] singletons={ExceptionClosure.INSTANCE,NOPClosure.INSTANCE}; @AT@ 14812 @LENGTH@ 125
---UPD VariableDeclarationFragment@@singletons=new Object[]{ExceptionClosure.INSTANCE,NOPClosure.INSTANCE} @TO@ singletons={ExceptionClosure.INSTANCE,NOPClosure.INSTANCE} @AT@ 14827 @LENGTH@ 109
------DEL ArrayCreation@@new Object[]{ExceptionClosure.INSTANCE,NOPClosure.INSTANCE} @AT@ 14840 @LENGTH@ 96
---------DEL ArrayType@@Object[] @AT@ 14844 @LENGTH@ 8
------------DEL SimpleType@@Object @AT@ 14844 @LENGTH@ 6
------MOV ArrayInitializer@@{ExceptionClosure.INSTANCE,NOPClosure.INSTANCE} @TO@ VariableDeclarationFragment@@singletons=new Object[]{ExceptionClosure.INSTANCE,NOPClosure.INSTANCE} @AT@ 14853 @LENGTH@ 83


DEL TryStatement@@try {  iter.nextInt();  fail("Should have thrown NoSuchElementException");} catch (final NoSuchElementException ignore) {} @AT@ 2499 @LENGTH@ 188
---DEL ExpressionStatement@@MethodInvocation:iter.nextInt() @AT@ 2517 @LENGTH@ 15
------DEL MethodInvocation@@iter.nextInt() @AT@ 2517 @LENGTH@ 14
---DEL ExpressionStatement@@MethodInvocation:fail("Should have thrown NoSuchElementException") @AT@ 2545 @LENGTH@ 50
------DEL MethodInvocation@@fail("Should have thrown NoSuchElementException") @AT@ 2545 @LENGTH@ 49
---------DEL SimpleName@@MethodName:fail:["Should have thrown NoSuchElementException"] @AT@ 2545 @LENGTH@ 49
---DEL CatchClause@@catch (final NoSuchElementException ignore) {} @AT@ 2606 @LENGTH@ 81
------DEL SingleVariableDeclaration@@final NoSuchElementException ignore @AT@ 2613 @LENGTH@ 35
---------DEL Modifier@@final @AT@ 2613 @LENGTH@ 5
---------DEL SimpleType@@NoSuchElementException @AT@ 2619 @LENGTH@ 22
---------DEL SimpleName@@ignore @AT@ 2642 @LENGTH@ 6


UPD TryStatement@@try (Transaction transaction=driver.session().beginTransaction()){  long numberOfRelations=transaction.run("MATCH (t:%s) WHERE id(t) = $id RETURN size((t)-->(:Person)) as numberOfRelations".formatted(labelOfTestSubject),Values.parameters("id",recorded.get(0).getId())).single().get("numberOfRelations").asLong();  assertThat(numberOfRelations).isEqualTo(2L);  numberOfRelations=transaction.run("MATCH (t:%s) WHERE id(t) = $id RETURN size((t)-->(:Club)) as numberOfRelations".formatted(labelOfTestSubject),Values.parameters("id",newPerson.getId())).single().get("numberOfRelations").asLong();  assertThat(numberOfRelations).isEqualTo(2L);}  @TO@ try (Transaction transaction=driver.session(bookmarkCapture.createSessionConfig()).beginTransaction()){  long numberOfRelations=transaction.run(("MATCH (t:%s)-[r]->(:Person) WHERE id(t) = $id RETURN count(r) as numberOfRelations").formatted(labelOfTestSubject),Values.parameters("id",newPerson.getId())).single().get("numberOfRelations").asLong();  assertThat(numberOfRelations).isEqualTo(2L);  numberOfRelations=transaction.run(("MATCH (t:%s)-[r]->(:Club) WHERE id(t) = $id RETURN count(r) as numberOfRelations").formatted(labelOfTestSubject),Values.parameters("id",newPerson.getId())).single().get("numberOfRelations").asLong();  assertThat(numberOfRelations).isEqualTo(2L);}  @AT@ 10548 @LENGTH@ 684
---UPD VariableDeclarationExpression@@Transaction transaction=driver.session().beginTransaction() @TO@ Transaction transaction=driver.session(bookmarkCapture.createSessionConfig()).beginTransaction() @AT@ 10553 @LENGTH@ 61
------UPD VariableDeclarationFragment@@transaction=driver.session().beginTransaction() @TO@ transaction=driver.session(bookmarkCapture.createSessionConfig()).beginTransaction() @AT@ 10565 @LENGTH@ 49
---------UPD MethodInvocation@@driver.session().beginTransaction() @TO@ driver.session(bookmarkCapture.createSessionConfig()).beginTransaction() @AT@ 10579 @LENGTH@ 35
------------UPD MethodInvocation@@MethodName:session:[] @TO@ MethodName:session:[bookmarkCapture.createSessionConfig()] @AT@ 10579 @LENGTH@ 16
---------------INS MethodInvocation@@bookmarkCapture.createSessionConfig() @TO@ MethodInvocation@@MethodName:session:[] @AT@ 10594 @LENGTH@ 37
------------------INS SimpleName@@Name:bookmarkCapture @TO@ MethodInvocation@@bookmarkCapture.createSessionConfig() @AT@ 10594 @LENGTH@ 15
------------------INS SimpleName@@MethodName:createSessionConfig:[] @TO@ MethodInvocation@@bookmarkCapture.createSessionConfig() @AT@ 10610 @LENGTH@ 21
---UPD VariableDeclarationStatement@@long numberOfRelations=transaction.run("MATCH (t:%s) WHERE id(t) = $id RETURN size((t)-->(:Person)) as numberOfRelations".formatted(labelOfTestSubject),Values.parameters("id",recorded.get(0).getId())).single().get("numberOfRelations").asLong(); @TO@ long numberOfRelations=transaction.run(("MATCH (t:%s)-[r]->(:Person) WHERE id(t) = $id RETURN count(r) as numberOfRelations").formatted(labelOfTestSubject),Values.parameters("id",newPerson.getId())).single().get("numberOfRelations").asLong(); @AT@ 10621 @LENGTH@ 260
------UPD VariableDeclarationFragment@@numberOfRelations=transaction.run("MATCH (t:%s) WHERE id(t) = $id RETURN size((t)-->(:Person)) as numberOfRelations".formatted(labelOfTestSubject),Values.parameters("id",recorded.get(0).getId())).single().get("numberOfRelations").asLong() @TO@ numberOfRelations=transaction.run(("MATCH (t:%s)-[r]->(:Person) WHERE id(t) = $id RETURN count(r) as numberOfRelations").formatted(labelOfTestSubject),Values.parameters("id",newPerson.getId())).single().get("numberOfRelations").asLong() @AT@ 10626 @LENGTH@ 254
---------UPD MethodInvocation@@transaction.run("MATCH (t:%s) WHERE id(t) = $id RETURN size((t)-->(:Person)) as numberOfRelations".formatted(labelOfTestSubject),Values.parameters("id",recorded.get(0).getId())).single().get("numberOfRelations").asLong() @TO@ transaction.run(("MATCH (t:%s)-[r]->(:Person) WHERE id(t) = $id RETURN count(r) as numberOfRelations").formatted(labelOfTestSubject),Values.parameters("id",newPerson.getId())).single().get("numberOfRelations").asLong() @AT@ 10646 @LENGTH@ 234
------------UPD MethodInvocation@@MethodName:run:["MATCH (t:%s) WHERE id(t) = $id RETURN size((t)-->(:Person)) as numberOfRelations".formatted(labelOfTestSubject), Values.parameters("id",recorded.get(0).getId())] @TO@ MethodName:run:[("MATCH (t:%s)-[r]->(:Person) WHERE id(t) = $id RETURN count(r) as numberOfRelations").formatted(labelOfTestSubject), Values.parameters("id",newPerson.getId())] @AT@ 10646 @LENGTH@ 185
---------------UPD MethodInvocation@@"MATCH (t:%s) WHERE id(t) = $id RETURN size((t)-->(:Person)) as numberOfRelations".formatted(labelOfTestSubject) @TO@ ("MATCH (t:%s)-[r]->(:Person) WHERE id(t) = $id RETURN count(r) as numberOfRelations").formatted(labelOfTestSubject) @AT@ 10668 @LENGTH@ 112
------------------DEL StringLiteral@@"MATCH (t:%s) WHERE id(t) = $id RETURN size((t)-->(:Person)) as numberOfRelations" @AT@ 10668 @LENGTH@ 82
------------------INS ParenthesizedExpression@@("MATCH (t:%s)-[r]->(:Person) WHERE id(t) = $id RETURN count(r) as numberOfRelations") @TO@ MethodInvocation@@"MATCH (t:%s) WHERE id(t) = $id RETURN size((t)-->(:Person)) as numberOfRelations".formatted(labelOfTestSubject) @AT@ 10705 @LENGTH@ 86
---------------------INS StringLiteral@@"MATCH (t:%s)-[r]->(:Person) WHERE id(t) = $id RETURN count(r) as numberOfRelations" @TO@ ParenthesizedExpression@@("MATCH (t:%s)-[r]->(:Person) WHERE id(t) = $id RETURN count(r) as numberOfRelations") @AT@ 10706 @LENGTH@ 84
---------------UPD MethodInvocation@@Values.parameters("id",recorded.get(0).getId()) @TO@ Values.parameters("id",newPerson.getId()) @AT@ 10782 @LENGTH@ 48
------------------UPD SimpleName@@MethodName:parameters:["id", recorded.get(0).getId()] @TO@ MethodName:parameters:["id", newPerson.getId()] @AT@ 10789 @LENGTH@ 41
---------------------UPD MethodInvocation@@recorded.get(0).getId() @TO@ newPerson.getId() @AT@ 10806 @LENGTH@ 23
------------------------DEL MethodInvocation@@MethodName:get:[0] @AT@ 10806 @LENGTH@ 15
---------------------------DEL NumberLiteral@@0 @AT@ 10819 @LENGTH@ 1
------------------------UPD SimpleName@@Name:recorded @TO@ Name:newPerson @AT@ 10806 @LENGTH@ 8
---UPD ExpressionStatement@@Assignment:numberOfRelations=transaction.run("MATCH (t:%s) WHERE id(t) = $id RETURN size((t)-->(:Club)) as numberOfRelations".formatted(labelOfTestSubject),Values.parameters("id",newPerson.getId())).single().get("numberOfRelations").asLong() @TO@ Assignment:numberOfRelations=transaction.run(("MATCH (t:%s)-[r]->(:Club) WHERE id(t) = $id RETURN count(r) as numberOfRelations").formatted(labelOfTestSubject),Values.parameters("id",newPerson.getId())).single().get("numberOfRelations").asLong() @AT@ 10933 @LENGTH@ 247
------UPD Assignment@@numberOfRelations=transaction.run("MATCH (t:%s) WHERE id(t) = $id RETURN size((t)-->(:Club)) as numberOfRelations".formatted(labelOfTestSubject),Values.parameters("id",newPerson.getId())).single().get("numberOfRelations").asLong() @TO@ numberOfRelations=transaction.run(("MATCH (t:%s)-[r]->(:Club) WHERE id(t) = $id RETURN count(r) as numberOfRelations").formatted(labelOfTestSubject),Values.parameters("id",newPerson.getId())).single().get("numberOfRelations").asLong() @AT@ 10933 @LENGTH@ 246
---------UPD MethodInvocation@@transaction.run("MATCH (t:%s) WHERE id(t) = $id RETURN size((t)-->(:Club)) as numberOfRelations".formatted(labelOfTestSubject),Values.parameters("id",newPerson.getId())).single().get("numberOfRelations").asLong() @TO@ transaction.run(("MATCH (t:%s)-[r]->(:Club) WHERE id(t) = $id RETURN count(r) as numberOfRelations").formatted(labelOfTestSubject),Values.parameters("id",newPerson.getId())).single().get("numberOfRelations").asLong() @AT@ 10953 @LENGTH@ 226
------------UPD MethodInvocation@@MethodName:run:["MATCH (t:%s) WHERE id(t) = $id RETURN size((t)-->(:Club)) as numberOfRelations".formatted(labelOfTestSubject), Values.parameters("id",newPerson.getId())] @TO@ MethodName:run:[("MATCH (t:%s)-[r]->(:Club) WHERE id(t) = $id RETURN count(r) as numberOfRelations").formatted(labelOfTestSubject), Values.parameters("id",newPerson.getId())] @AT@ 10953 @LENGTH@ 177
---------------UPD MethodInvocation@@"MATCH (t:%s) WHERE id(t) = $id RETURN size((t)-->(:Club)) as numberOfRelations".formatted(labelOfTestSubject) @TO@ ("MATCH (t:%s)-[r]->(:Club) WHERE id(t) = $id RETURN count(r) as numberOfRelations").formatted(labelOfTestSubject) @AT@ 10975 @LENGTH@ 110
------------------DEL StringLiteral@@"MATCH (t:%s) WHERE id(t) = $id RETURN size((t)-->(:Club)) as numberOfRelations" @AT@ 10975 @LENGTH@ 80
------------------INS ParenthesizedExpression@@("MATCH (t:%s)-[r]->(:Club) WHERE id(t) = $id RETURN count(r) as numberOfRelations") @TO@ MethodInvocation@@"MATCH (t:%s) WHERE id(t) = $id RETURN size((t)-->(:Club)) as numberOfRelations".formatted(labelOfTestSubject) @AT@ 11010 @LENGTH@ 84
---------------------INS StringLiteral@@"MATCH (t:%s)-[r]->(:Club) WHERE id(t) = $id RETURN count(r) as numberOfRelations" @TO@ ParenthesizedExpression@@("MATCH (t:%s)-[r]->(:Club) WHERE id(t) = $id RETURN count(r) as numberOfRelations") @AT@ 11011 @LENGTH@ 82


UPD ExpressionStatement@@MethodInvocation:threadPoolTaskScheduler.setThreadNamePrefix(getBeanName() + "-consumerMonitor-") @TO@ MethodInvocation:threadPoolTaskScheduler.setThreadNamePrefix(getListenerId() + "-consumerMonitor-") @AT@ 13231 @LENGTH@ 81
---UPD MethodInvocation@@threadPoolTaskScheduler.setThreadNamePrefix(getBeanName() + "-consumerMonitor-") @TO@ threadPoolTaskScheduler.setThreadNamePrefix(getListenerId() + "-consumerMonitor-") @AT@ 13231 @LENGTH@ 80
------UPD SimpleName@@MethodName:setThreadNamePrefix:[getBeanName() + "-consumerMonitor-"] @TO@ MethodName:setThreadNamePrefix:[getListenerId() + "-consumerMonitor-"] @AT@ 13255 @LENGTH@ 56
---------UPD InfixExpression@@getBeanName() + "-consumerMonitor-" @TO@ getListenerId() + "-consumerMonitor-" @AT@ 13275 @LENGTH@ 35
------------UPD MethodInvocation@@MethodName:getBeanName:[] @TO@ MethodName:getListenerId:[] @AT@ 13275 @LENGTH@ 13


UPD ReturnStatement@@ClassInstanceCreation:new ResumableProcessor(expression,resumeStrategy,childProcessor) @TO@ ClassInstanceCreation:new ResumableProcessor(resumeStrategy,childProcessor) @AT@ 1869 @LENGTH@ 74
---UPD ClassInstanceCreation@@ResumableProcessor[expression, resumeStrategy, childProcessor] @TO@ ResumableProcessor[resumeStrategy, childProcessor] @AT@ 1876 @LENGTH@ 66
------DEL SimpleName@@expression @AT@ 1899 @LENGTH@ 10


UPD VariableDeclarationStatement@@final Object[] v=new Object[]{"",new Object(),new HashMap<>(),0,BigInteger.TEN,null,new Object[0]}; @TO@ final Object[] v={"",new Object(),new HashMap<>(),0,BigInteger.TEN,null,new Object[0]}; @AT@ 2123 @LENGTH@ 122
---UPD VariableDeclarationFragment@@v=new Object[]{"",new Object(),new HashMap<>(),0,BigInteger.TEN,null,new Object[0]} @TO@ v={"",new Object(),new HashMap<>(),0,BigInteger.TEN,null,new Object[0]} @AT@ 2138 @LENGTH@ 106
------DEL ArrayCreation@@new Object[]{"",new Object(),new HashMap<>(),0,BigInteger.TEN,null,new Object[0]} @AT@ 2142 @LENGTH@ 102
---------DEL ArrayType@@Object[] @AT@ 2146 @LENGTH@ 8
------------DEL SimpleType@@Object @AT@ 2146 @LENGTH@ 6
------MOV ArrayInitializer@@{"",new Object(),new HashMap<>(),0,BigInteger.TEN,null,new Object[0]} @TO@ VariableDeclarationFragment@@v=new Object[]{"",new Object(),new HashMap<>(),0,BigInteger.TEN,null,new Object[0]} @AT@ 2155 @LENGTH@ 89


INS VariableDeclarationStatement@@BinaryData data=messageItem.getBody(); @TO@ MethodDeclaration@@private, Exchange, MethodName:createExchange, final QueueMessageItem messageItem,  @AT@ 6423 @LENGTH@ 40
---INS SimpleType@@BinaryData @TO@ VariableDeclarationStatement@@BinaryData data=messageItem.getBody(); @AT@ 6423 @LENGTH@ 10
---INS VariableDeclarationFragment@@data=messageItem.getBody() @TO@ VariableDeclarationStatement@@BinaryData data=messageItem.getBody(); @AT@ 6434 @LENGTH@ 28
------INS SimpleName@@data @TO@ VariableDeclarationFragment@@data=messageItem.getBody() @AT@ 6434 @LENGTH@ 4
------INS MethodInvocation@@messageItem.getBody() @TO@ VariableDeclarationFragment@@data=messageItem.getBody() @AT@ 6441 @LENGTH@ 21
---------INS SimpleName@@Name:messageItem @TO@ MethodInvocation@@messageItem.getBody() @AT@ 6441 @LENGTH@ 11
---------INS SimpleName@@MethodName:getBody:[] @TO@ MethodInvocation@@messageItem.getBody() @AT@ 6453 @LENGTH@ 9


UPD TryStatement@@try {  String msg="Starting hive metastore on port " + cli.port;  LOG.info(msg);  if (cli.isVerbose()) {    System.err.println(msg);  }  for (  Map.Entry<Object,Object> item : hiveconf.entrySet()) {    conf.set((String)item.getKey(),(String)item.getValue());  }  conf.set(ConfVars.THRIFT_URIS.getHiveName(),"");  shutdownHookMgr.addShutdownHook(() -> {    String shutdownMsg="Shutting down hive metastore.";    LOG.info(shutdownMsg);    if (isCliVerbose) {      System.err.println(shutdownMsg);    }    if (MetastoreConf.getBoolVar(conf,ConfVars.METRICS_ENABLED)) {      try {        Metrics.shutdown();        MetricsFactory.close();      } catch (      Exception e) {        LOG.error("error in Metrics deinit: " + e.getClass().getName() + " "+ e.getMessage(),e);      }    }    try {      if (MetastoreConf.getVar(conf,ConfVars.THRIFT_SERVICE_DISCOVERY_MODE).equalsIgnoreCase("zookeeper")) {        zooKeeperHelper.removeServerInstanceFromZooKeeper();      }    } catch (    Exception e) {      LOG.error("Error removing znode for this metastore instance from ZooKeeper.",e);    }    ThreadPool.shutdown();  },10);  if (MetastoreConf.getBoolVar(conf,ConfVars.METRICS_ENABLED)) {    try {      Metrics.initialize(conf);      MetricsFactory.init(conf);    } catch (    Exception e) {      LOG.error("error in Metrics init: " + e.getClass().getName() + " "+ e.getMessage(),e);    }  }  startMetaStore(cli.getPort(),HadoopThriftAuthBridge.getBridge(),conf,true,null);} catch (Throwable t) {  LOG.error("Metastore Thrift Server threw an exception...",t);  throw t;} @TO@ try {  String msg="Starting hive metastore on port " + cli.port;  LOG.info(msg);  if (cli.isVerbose()) {    System.err.println(msg);  }  for (  Map.Entry<Object,Object> item : hiveconf.entrySet()) {    conf.set((String)item.getKey(),(String)item.getValue());  }  conf.set(ConfVars.THRIFT_URIS.getHiveName(),"");  shutdownHookMgr.addShutdownHook(() -> {    String shutdownMsg="Shutting down hive metastore.";    LOG.info(shutdownMsg);    if (isCliVerbose) {      System.err.println(shutdownMsg);    }    if (MetastoreConf.getBoolVar(conf,ConfVars.METRICS_ENABLED)) {      try {        Metrics.shutdown();      } catch (      Exception e) {        LOG.error("error in Metrics deinit: " + e.getClass().getName() + " "+ e.getMessage(),e);      }    }    try {      if (MetastoreConf.getVar(conf,ConfVars.THRIFT_SERVICE_DISCOVERY_MODE).equalsIgnoreCase("zookeeper")) {        zooKeeperHelper.removeServerInstanceFromZooKeeper();      }    } catch (    Exception e) {      LOG.error("Error removing znode for this metastore instance from ZooKeeper.",e);    }    ThreadPool.shutdown();  },10);  if (MetastoreConf.getBoolVar(conf,ConfVars.METRICS_ENABLED)) {    try {      Metrics.initialize(conf);    } catch (    Exception e) {      LOG.error("error in Metrics init: " + e.getClass().getName() + " "+ e.getMessage(),e);    }  }  startMetaStore(cli.getPort(),HadoopThriftAuthBridge.getBridge(),conf,true,null);} catch (Throwable t) {  LOG.error("Metastore Thrift Server threw an exception...",t);  throw t;} @AT@ 9714 @LENGTH@ 2230
---UPD ExpressionStatement@@MethodInvocation:shutdownHookMgr.addShutdownHook(() -> {
  String shutdownMsg="Shutting down hive metastore.";
  LOG.info(shutdownMsg);
  if (isCliVerbose) {
    System.err.println(shutdownMsg);
  }
  if (MetastoreConf.getBoolVar(conf,ConfVars.METRICS_ENABLED)) {
    try {
      Metrics.shutdown();
      MetricsFactory.close();
    }
 catch (    Exception e) {
      LOG.error("error in Metrics deinit: " + e.getClass().getName() + " "+ e.getMessage(),e);
    }
  }
  try {
    if (MetastoreConf.getVar(conf,ConfVars.THRIFT_SERVICE_DISCOVERY_MODE).equalsIgnoreCase("zookeeper")) {
      zooKeeperHelper.removeServerInstanceFromZooKeeper();
    }
  }
 catch (  Exception e) {
    LOG.error("Error removing znode for this metastore instance from ZooKeeper.",e);
  }
  ThreadPool.shutdown();
}
,10) @TO@ MethodInvocation:shutdownHookMgr.addShutdownHook(() -> {
  String shutdownMsg="Shutting down hive metastore.";
  LOG.info(shutdownMsg);
  if (isCliVerbose) {
    System.err.println(shutdownMsg);
  }
  if (MetastoreConf.getBoolVar(conf,ConfVars.METRICS_ENABLED)) {
    try {
      Metrics.shutdown();
    }
 catch (    Exception e) {
      LOG.error("error in Metrics deinit: " + e.getClass().getName() + " "+ e.getMessage(),e);
    }
  }
  try {
    if (MetastoreConf.getVar(conf,ConfVars.THRIFT_SERVICE_DISCOVERY_MODE).equalsIgnoreCase("zookeeper")) {
      zooKeeperHelper.removeServerInstanceFromZooKeeper();
    }
  }
 catch (  Exception e) {
    LOG.error("Error removing znode for this metastore instance from ZooKeeper.",e);
  }
  ThreadPool.shutdown();
}
,10) @AT@ 10256 @LENGTH@ 995
------UPD MethodInvocation@@shutdownHookMgr.addShutdownHook(() -> {
  String shutdownMsg="Shutting down hive metastore.";
  LOG.info(shutdownMsg);
  if (isCliVerbose) {
    System.err.println(shutdownMsg);
  }
  if (MetastoreConf.getBoolVar(conf,ConfVars.METRICS_ENABLED)) {
    try {
      Metrics.shutdown();
      MetricsFactory.close();
    }
 catch (    Exception e) {
      LOG.error("error in Metrics deinit: " + e.getClass().getName() + " "+ e.getMessage(),e);
    }
  }
  try {
    if (MetastoreConf.getVar(conf,ConfVars.THRIFT_SERVICE_DISCOVERY_MODE).equalsIgnoreCase("zookeeper")) {
      zooKeeperHelper.removeServerInstanceFromZooKeeper();
    }
  }
 catch (  Exception e) {
    LOG.error("Error removing znode for this metastore instance from ZooKeeper.",e);
  }
  ThreadPool.shutdown();
}
,10) @TO@ shutdownHookMgr.addShutdownHook(() -> {
  String shutdownMsg="Shutting down hive metastore.";
  LOG.info(shutdownMsg);
  if (isCliVerbose) {
    System.err.println(shutdownMsg);
  }
  if (MetastoreConf.getBoolVar(conf,ConfVars.METRICS_ENABLED)) {
    try {
      Metrics.shutdown();
    }
 catch (    Exception e) {
      LOG.error("error in Metrics deinit: " + e.getClass().getName() + " "+ e.getMessage(),e);
    }
  }
  try {
    if (MetastoreConf.getVar(conf,ConfVars.THRIFT_SERVICE_DISCOVERY_MODE).equalsIgnoreCase("zookeeper")) {
      zooKeeperHelper.removeServerInstanceFromZooKeeper();
    }
  }
 catch (  Exception e) {
    LOG.error("Error removing znode for this metastore instance from ZooKeeper.",e);
  }
  ThreadPool.shutdown();
}
,10) @AT@ 10256 @LENGTH@ 994
---------UPD SimpleName@@MethodName:addShutdownHook:[() -> {
  String shutdownMsg="Shutting down hive metastore.";
  LOG.info(shutdownMsg);
  if (isCliVerbose) {
    System.err.println(shutdownMsg);
  }
  if (MetastoreConf.getBoolVar(conf,ConfVars.METRICS_ENABLED)) {
    try {
      Metrics.shutdown();
      MetricsFactory.close();
    }
 catch (    Exception e) {
      LOG.error("error in Metrics deinit: " + e.getClass().getName() + " "+ e.getMessage(),e);
    }
  }
  try {
    if (MetastoreConf.getVar(conf,ConfVars.THRIFT_SERVICE_DISCOVERY_MODE).equalsIgnoreCase("zookeeper")) {
      zooKeeperHelper.removeServerInstanceFromZooKeeper();
    }
  }
 catch (  Exception e) {
    LOG.error("Error removing znode for this metastore instance from ZooKeeper.",e);
  }
  ThreadPool.shutdown();
}
, 10] @TO@ MethodName:addShutdownHook:[() -> {
  String shutdownMsg="Shutting down hive metastore.";
  LOG.info(shutdownMsg);
  if (isCliVerbose) {
    System.err.println(shutdownMsg);
  }
  if (MetastoreConf.getBoolVar(conf,ConfVars.METRICS_ENABLED)) {
    try {
      Metrics.shutdown();
    }
 catch (    Exception e) {
      LOG.error("error in Metrics deinit: " + e.getClass().getName() + " "+ e.getMessage(),e);
    }
  }
  try {
    if (MetastoreConf.getVar(conf,ConfVars.THRIFT_SERVICE_DISCOVERY_MODE).equalsIgnoreCase("zookeeper")) {
      zooKeeperHelper.removeServerInstanceFromZooKeeper();
    }
  }
 catch (  Exception e) {
    LOG.error("Error removing znode for this metastore instance from ZooKeeper.",e);
  }
  ThreadPool.shutdown();
}
, 10] @AT@ 10272 @LENGTH@ 978
------------UPD LambdaExpression@@() -> {
  String shutdownMsg="Shutting down hive metastore.";
  LOG.info(shutdownMsg);
  if (isCliVerbose) {
    System.err.println(shutdownMsg);
  }
  if (MetastoreConf.getBoolVar(conf,ConfVars.METRICS_ENABLED)) {
    try {
      Metrics.shutdown();
      MetricsFactory.close();
    }
 catch (    Exception e) {
      LOG.error("error in Metrics deinit: " + e.getClass().getName() + " "+ e.getMessage(),e);
    }
  }
  try {
    if (MetastoreConf.getVar(conf,ConfVars.THRIFT_SERVICE_DISCOVERY_MODE).equalsIgnoreCase("zookeeper")) {
      zooKeeperHelper.removeServerInstanceFromZooKeeper();
    }
  }
 catch (  Exception e) {
    LOG.error("Error removing znode for this metastore instance from ZooKeeper.",e);
  }
  ThreadPool.shutdown();
}
 @TO@ () -> {
  String shutdownMsg="Shutting down hive metastore.";
  LOG.info(shutdownMsg);
  if (isCliVerbose) {
    System.err.println(shutdownMsg);
  }
  if (MetastoreConf.getBoolVar(conf,ConfVars.METRICS_ENABLED)) {
    try {
      Metrics.shutdown();
    }
 catch (    Exception e) {
      LOG.error("error in Metrics deinit: " + e.getClass().getName() + " "+ e.getMessage(),e);
    }
  }
  try {
    if (MetastoreConf.getVar(conf,ConfVars.THRIFT_SERVICE_DISCOVERY_MODE).equalsIgnoreCase("zookeeper")) {
      zooKeeperHelper.removeServerInstanceFromZooKeeper();
    }
  }
 catch (  Exception e) {
    LOG.error("Error removing znode for this metastore instance from ZooKeeper.",e);
  }
  ThreadPool.shutdown();
}
 @AT@ 10288 @LENGTH@ 957
---------------UPD IfStatement@@if (MetastoreConf.getBoolVar(conf,ConfVars.METRICS_ENABLED)) {  try {    Metrics.shutdown();    MetricsFactory.close();  } catch (  Exception e) {    LOG.error("error in Metrics deinit: " + e.getClass().getName() + " "+ e.getMessage(),e);  }} @TO@ if (MetastoreConf.getBoolVar(conf,ConfVars.METRICS_ENABLED)) {  try {    Metrics.shutdown();  } catch (  Exception e) {    LOG.error("error in Metrics deinit: " + e.getClass().getName() + " "+ e.getMessage(),e);  }} @AT@ 10478 @LENGTH@ 322
------------------UPD Block@@ThenBody:{  try {    Metrics.shutdown();    MetricsFactory.close();  } catch (  Exception e) {    LOG.error("error in Metrics deinit: " + e.getClass().getName() + " "+ e.getMessage(),e);  }} @TO@ ThenBody:{  try {    Metrics.shutdown();  } catch (  Exception e) {    LOG.error("error in Metrics deinit: " + e.getClass().getName() + " "+ e.getMessage(),e);  }} @AT@ 10540 @LENGTH@ 260
---------------------UPD TryStatement@@try {  Metrics.shutdown();  MetricsFactory.close();} catch (Exception e) {  LOG.error("error in Metrics deinit: " + e.getClass().getName() + " "+ e.getMessage(),e);} @TO@ try {  Metrics.shutdown();} catch (Exception e) {  LOG.error("error in Metrics deinit: " + e.getClass().getName() + " "+ e.getMessage(),e);} @AT@ 10552 @LENGTH@ 238
------------------------DEL ExpressionStatement@@MethodInvocation:MetricsFactory.close() @AT@ 10602 @LENGTH@ 23
---------------------------DEL MethodInvocation@@MetricsFactory.close() @AT@ 10602 @LENGTH@ 22
------------------------------DEL SimpleName@@Name:MetricsFactory @AT@ 10602 @LENGTH@ 14
------------------------------DEL SimpleName@@MethodName:close:[] @AT@ 10617 @LENGTH@ 7
---UPD IfStatement@@if (MetastoreConf.getBoolVar(conf,ConfVars.METRICS_ENABLED)) {  try {    Metrics.initialize(conf);    MetricsFactory.init(conf);  } catch (  Exception e) {    LOG.error("error in Metrics init: " + e.getClass().getName() + " "+ e.getMessage(),e);  }} @TO@ if (MetastoreConf.getBoolVar(conf,ConfVars.METRICS_ENABLED)) {  try {    Metrics.initialize(conf);  } catch (  Exception e) {    LOG.error("error in Metrics init: " + e.getClass().getName() + " "+ e.getMessage(),e);  }} @AT@ 11310 @LENGTH@ 371
------UPD Block@@ThenBody:{  try {    Metrics.initialize(conf);    MetricsFactory.init(conf);  } catch (  Exception e) {    LOG.error("error in Metrics init: " + e.getClass().getName() + " "+ e.getMessage(),e);  }} @TO@ ThenBody:{  try {    Metrics.initialize(conf);  } catch (  Exception e) {    LOG.error("error in Metrics init: " + e.getClass().getName() + " "+ e.getMessage(),e);  }} @AT@ 11372 @LENGTH@ 309
---------UPD TryStatement@@try {  Metrics.initialize(conf);  MetricsFactory.init(conf);} catch (Exception e) {  LOG.error("error in Metrics init: " + e.getClass().getName() + " "+ e.getMessage(),e);} @TO@ try {  Metrics.initialize(conf);} catch (Exception e) {  LOG.error("error in Metrics init: " + e.getClass().getName() + " "+ e.getMessage(),e);} @AT@ 11382 @LENGTH@ 291
------------DEL ExpressionStatement@@MethodInvocation:MetricsFactory.init(conf) @AT@ 11434 @LENGTH@ 26
---------------DEL MethodInvocation@@MetricsFactory.init(conf) @AT@ 11434 @LENGTH@ 25
------------------DEL SimpleName@@Name:MetricsFactory @AT@ 11434 @LENGTH@ 14
------------------DEL SimpleName@@MethodName:init:[conf] @AT@ 11449 @LENGTH@ 10
---------------------DEL SimpleName@@conf @AT@ 11454 @LENGTH@ 4


UPD ExpressionStatement@@MethodInvocation:builder.invocationBatching().enable(tx.transactionMode().isTransactional() && (tx.transactionManagerLookup().getTransactionManager() != ContextTransactionManager.getInstance())) @TO@ MethodInvocation:builder.invocationBatching().enable(tx.transactionMode().isTransactional() && (tx.transactionManagerLookup().getTransactionManager() == EmbeddedTransactionManager.getInstance())) @AT@ 6635 @LENGTH@ 178
---UPD MethodInvocation@@builder.invocationBatching().enable(tx.transactionMode().isTransactional() && (tx.transactionManagerLookup().getTransactionManager() != ContextTransactionManager.getInstance())) @TO@ builder.invocationBatching().enable(tx.transactionMode().isTransactional() && (tx.transactionManagerLookup().getTransactionManager() == EmbeddedTransactionManager.getInstance())) @AT@ 6635 @LENGTH@ 177
------UPD SimpleName@@MethodName:enable:[tx.transactionMode().isTransactional() && (tx.transactionManagerLookup().getTransactionManager() != ContextTransactionManager.getInstance())] @TO@ MethodName:enable:[tx.transactionMode().isTransactional() && (tx.transactionManagerLookup().getTransactionManager() == EmbeddedTransactionManager.getInstance())] @AT@ 6664 @LENGTH@ 148
---------UPD InfixExpression@@tx.transactionMode().isTransactional() && (tx.transactionManagerLookup().getTransactionManager() != ContextTransactionManager.getInstance()) @TO@ tx.transactionMode().isTransactional() && (tx.transactionManagerLookup().getTransactionManager() == EmbeddedTransactionManager.getInstance()) @AT@ 6671 @LENGTH@ 140
------------UPD ParenthesizedExpression@@(tx.transactionManagerLookup().getTransactionManager() != ContextTransactionManager.getInstance()) @TO@ (tx.transactionManagerLookup().getTransactionManager() == EmbeddedTransactionManager.getInstance()) @AT@ 6713 @LENGTH@ 98
---------------UPD InfixExpression@@tx.transactionManagerLookup().getTransactionManager() != ContextTransactionManager.getInstance() @TO@ tx.transactionManagerLookup().getTransactionManager() == EmbeddedTransactionManager.getInstance() @AT@ 6714 @LENGTH@ 96
------------------UPD Operator@@!= @TO@ == @AT@ 6767 @LENGTH@ 2
------------------UPD MethodInvocation@@ContextTransactionManager.getInstance() @TO@ EmbeddedTransactionManager.getInstance() @AT@ 6771 @LENGTH@ 39
---------------------UPD SimpleName@@Name:ContextTransactionManager @TO@ Name:EmbeddedTransactionManager @AT@ 6771 @LENGTH@ 25


INS FieldDeclaration@@String, [OFFSET="CamelOffset"] @TO@ TypeDeclaration@@[@ConstantProvider("org.apache.camel.ExchangeConstantProvider"), public]Exchange,  @AT@ 11179 @LENGTH@ 30
---INS SimpleType@@String @TO@ FieldDeclaration@@String, [OFFSET="CamelOffset"] @AT@ 11179 @LENGTH@ 6
---INS VariableDeclarationFragment@@OFFSET="CamelOffset" @TO@ FieldDeclaration@@String, [OFFSET="CamelOffset"] @AT@ 11186 @LENGTH@ 22
------INS SimpleName@@OFFSET @TO@ VariableDeclarationFragment@@OFFSET="CamelOffset" @AT@ 11186 @LENGTH@ 6
------INS StringLiteral@@"CamelOffset" @TO@ VariableDeclarationFragment@@OFFSET="CamelOffset" @AT@ 11195 @LENGTH@ 13


UPD IfStatement@@if (shouldDeclareQueue()) {  declareAndBindQueue(channel,endpoint.getQueue(),endpoint.getExchangeName(),endpoint.getRoutingKey(),resolvedQueueArguments(),endpoint.getBindingArgs());} @TO@ if (shouldDeclareQueue()) {  declareAndBindQueue(channel,endpoint.getQueue(),endpoint.getExchangeName(),endpoint.getRoutingKey(),resolvedQueueArguments(),endpoint.getBindingArgs());} else if (shouldBindQueue()) {  passivelyDeclareExchangeAndQueueAndBindThem(channel,endpoint.getQueue(),endpoint.getExchangeName(),endpoint.getRoutingKey(),endpoint.getBindingArgs());} @AT@ 2387 @LENGTH@ 326
---INS Block@@ElseBody:if (shouldBindQueue()) {  passivelyDeclareExchangeAndQueueAndBindThem(channel,endpoint.getQueue(),endpoint.getExchangeName(),endpoint.getRoutingKey(),endpoint.getBindingArgs());} @TO@ IfStatement@@if (shouldDeclareQueue()) {  declareAndBindQueue(channel,endpoint.getQueue(),endpoint.getExchangeName(),endpoint.getRoutingKey(),resolvedQueueArguments(),endpoint.getBindingArgs());} @AT@ 2719 @LENGTH@ 362
------INS IfStatement@@if (shouldBindQueue()) {  passivelyDeclareExchangeAndQueueAndBindThem(channel,endpoint.getQueue(),endpoint.getExchangeName(),endpoint.getRoutingKey(),endpoint.getBindingArgs());} @TO@ Block@@ElseBody:if (shouldBindQueue()) {  passivelyDeclareExchangeAndQueueAndBindThem(channel,endpoint.getQueue(),endpoint.getExchangeName(),endpoint.getRoutingKey(),endpoint.getBindingArgs());} @AT@ 2719 @LENGTH@ 362
---------INS MethodInvocation@@MethodName:shouldBindQueue:[] @TO@ IfStatement@@if (shouldBindQueue()) {  passivelyDeclareExchangeAndQueueAndBindThem(channel,endpoint.getQueue(),endpoint.getExchangeName(),endpoint.getRoutingKey(),endpoint.getBindingArgs());} @AT@ 2723 @LENGTH@ 17
---------INS Block@@ThenBody:{  passivelyDeclareExchangeAndQueueAndBindThem(channel,endpoint.getQueue(),endpoint.getExchangeName(),endpoint.getRoutingKey(),endpoint.getBindingArgs());} @TO@ IfStatement@@if (shouldBindQueue()) {  passivelyDeclareExchangeAndQueueAndBindThem(channel,endpoint.getQueue(),endpoint.getExchangeName(),endpoint.getRoutingKey(),endpoint.getBindingArgs());} @AT@ 2742 @LENGTH@ 339
------------INS ExpressionStatement@@MethodInvocation:passivelyDeclareExchangeAndQueueAndBindThem(channel,endpoint.getQueue(),endpoint.getExchangeName(),endpoint.getRoutingKey(),endpoint.getBindingArgs()) @TO@ Block@@ThenBody:{  passivelyDeclareExchangeAndQueueAndBindThem(channel,endpoint.getQueue(),endpoint.getExchangeName(),endpoint.getRoutingKey(),endpoint.getBindingArgs());} @AT@ 2896 @LENGTH@ 175
---------------INS MethodInvocation@@passivelyDeclareExchangeAndQueueAndBindThem(channel,endpoint.getQueue(),endpoint.getExchangeName(),endpoint.getRoutingKey(),endpoint.getBindingArgs()) @TO@ ExpressionStatement@@MethodInvocation:passivelyDeclareExchangeAndQueueAndBindThem(channel,endpoint.getQueue(),endpoint.getExchangeName(),endpoint.getRoutingKey(),endpoint.getBindingArgs()) @AT@ 2896 @LENGTH@ 174
------------------INS SimpleName@@MethodName:passivelyDeclareExchangeAndQueueAndBindThem:[channel, endpoint.getQueue(), endpoint.getExchangeName(), endpoint.getRoutingKey(), endpoint.getBindingArgs()] @TO@ MethodInvocation@@passivelyDeclareExchangeAndQueueAndBindThem(channel,endpoint.getQueue(),endpoint.getExchangeName(),endpoint.getRoutingKey(),endpoint.getBindingArgs()) @AT@ 2896 @LENGTH@ 174
---------------------INS SimpleName@@channel @TO@ SimpleName@@MethodName:passivelyDeclareExchangeAndQueueAndBindThem:[channel, endpoint.getQueue(), endpoint.getExchangeName(), endpoint.getRoutingKey(), endpoint.getBindingArgs()] @AT@ 2940 @LENGTH@ 7
---------------------INS MethodInvocation@@endpoint.getQueue() @TO@ SimpleName@@MethodName:passivelyDeclareExchangeAndQueueAndBindThem:[channel, endpoint.getQueue(), endpoint.getExchangeName(), endpoint.getRoutingKey(), endpoint.getBindingArgs()] @AT@ 2949 @LENGTH@ 19
------------------------INS SimpleName@@Name:endpoint @TO@ MethodInvocation@@endpoint.getQueue() @AT@ 2949 @LENGTH@ 8
------------------------INS SimpleName@@MethodName:getQueue:[] @TO@ MethodInvocation@@endpoint.getQueue() @AT@ 2958 @LENGTH@ 10
---------------------INS MethodInvocation@@endpoint.getExchangeName() @TO@ SimpleName@@MethodName:passivelyDeclareExchangeAndQueueAndBindThem:[channel, endpoint.getQueue(), endpoint.getExchangeName(), endpoint.getRoutingKey(), endpoint.getBindingArgs()] @AT@ 2970 @LENGTH@ 26
------------------------INS SimpleName@@Name:endpoint @TO@ MethodInvocation@@endpoint.getExchangeName() @AT@ 2970 @LENGTH@ 8
------------------------INS SimpleName@@MethodName:getExchangeName:[] @TO@ MethodInvocation@@endpoint.getExchangeName() @AT@ 2979 @LENGTH@ 17
---------------------INS MethodInvocation@@endpoint.getRoutingKey() @TO@ SimpleName@@MethodName:passivelyDeclareExchangeAndQueueAndBindThem:[channel, endpoint.getQueue(), endpoint.getExchangeName(), endpoint.getRoutingKey(), endpoint.getBindingArgs()] @AT@ 3018 @LENGTH@ 24
------------------------INS SimpleName@@Name:endpoint @TO@ MethodInvocation@@endpoint.getRoutingKey() @AT@ 3018 @LENGTH@ 8
------------------------INS SimpleName@@MethodName:getRoutingKey:[] @TO@ MethodInvocation@@endpoint.getRoutingKey() @AT@ 3027 @LENGTH@ 15
---------------------INS MethodInvocation@@endpoint.getBindingArgs() @TO@ SimpleName@@MethodName:passivelyDeclareExchangeAndQueueAndBindThem:[channel, endpoint.getQueue(), endpoint.getExchangeName(), endpoint.getRoutingKey(), endpoint.getBindingArgs()] @AT@ 3044 @LENGTH@ 25
------------------------INS SimpleName@@Name:endpoint @TO@ MethodInvocation@@endpoint.getBindingArgs() @AT@ 3044 @LENGTH@ 8
------------------------INS SimpleName@@MethodName:getBindingArgs:[] @TO@ MethodInvocation@@endpoint.getBindingArgs() @AT@ 3053 @LENGTH@ 16
------------------INS SimpleName@@MethodName:passivelyDeclareExchangeAndQueueAndBindThem:[channel, endpoint.getQueue(), endpoint.getExchangeName(), endpoint.getRoutingKey(), endpoint.getBindingArgs()] @TO@ MethodInvocation@@passivelyDeclareExchangeAndQueueAndBindThem(channel,endpoint.getQueue(),endpoint.getExchangeName(),endpoint.getRoutingKey(),endpoint.getBindingArgs()) @AT@ 2896 @LENGTH@ 174
---------------------INS SimpleName@@channel @TO@ SimpleName@@MethodName:passivelyDeclareExchangeAndQueueAndBindThem:[channel, endpoint.getQueue(), endpoint.getExchangeName(), endpoint.getRoutingKey(), endpoint.getBindingArgs()] @AT@ 2940 @LENGTH@ 7
---------------------INS MethodInvocation@@endpoint.getQueue() @TO@ SimpleName@@MethodName:passivelyDeclareExchangeAndQueueAndBindThem:[channel, endpoint.getQueue(), endpoint.getExchangeName(), endpoint.getRoutingKey(), endpoint.getBindingArgs()] @AT@ 2949 @LENGTH@ 19
------------------------INS SimpleName@@Name:endpoint @TO@ MethodInvocation@@endpoint.getQueue() @AT@ 2949 @LENGTH@ 8
------------------------INS SimpleName@@MethodName:getQueue:[] @TO@ MethodInvocation@@endpoint.getQueue() @AT@ 2958 @LENGTH@ 10
---------------------INS MethodInvocation@@endpoint.getExchangeName() @TO@ SimpleName@@MethodName:passivelyDeclareExchangeAndQueueAndBindThem:[channel, endpoint.getQueue(), endpoint.getExchangeName(), endpoint.getRoutingKey(), endpoint.getBindingArgs()] @AT@ 2970 @LENGTH@ 26
------------------------INS SimpleName@@Name:endpoint @TO@ MethodInvocation@@endpoint.getExchangeName() @AT@ 2970 @LENGTH@ 8
------------------------INS SimpleName@@MethodName:getExchangeName:[] @TO@ MethodInvocation@@endpoint.getExchangeName() @AT@ 2979 @LENGTH@ 17
---------------------INS MethodInvocation@@endpoint.getRoutingKey() @TO@ SimpleName@@MethodName:passivelyDeclareExchangeAndQueueAndBindThem:[channel, endpoint.getQueue(), endpoint.getExchangeName(), endpoint.getRoutingKey(), endpoint.getBindingArgs()] @AT@ 3018 @LENGTH@ 24
------------------------INS SimpleName@@Name:endpoint @TO@ MethodInvocation@@endpoint.getRoutingKey() @AT@ 3018 @LENGTH@ 8
------------------------INS SimpleName@@MethodName:getRoutingKey:[] @TO@ MethodInvocation@@endpoint.getRoutingKey() @AT@ 3027 @LENGTH@ 15
---------------------INS MethodInvocation@@endpoint.getBindingArgs() @TO@ SimpleName@@MethodName:passivelyDeclareExchangeAndQueueAndBindThem:[channel, endpoint.getQueue(), endpoint.getExchangeName(), endpoint.getRoutingKey(), endpoint.getBindingArgs()] @AT@ 3044 @LENGTH@ 25
------------------------INS SimpleName@@Name:endpoint @TO@ MethodInvocation@@endpoint.getBindingArgs() @AT@ 3044 @LENGTH@ 8
------------------------INS SimpleName@@MethodName:getBindingArgs:[] @TO@ MethodInvocation@@endpoint.getBindingArgs() @AT@ 3053 @LENGTH@ 16


UPD ExpressionStatement@@MethodInvocation:checksumVerifyingInputStream.read() @TO@ MethodInvocation:assertThrows(IOException.class,() -> checksumVerifyingInputStream.read()) @AT@ 2287 @LENGTH@ 36
---DEL MethodInvocation@@checksumVerifyingInputStream.read() @AT@ 2287 @LENGTH@ 35
---INS MethodInvocation@@assertThrows(IOException.class,() -> checksumVerifyingInputStream.read()) @TO@ ExpressionStatement@@MethodInvocation:checksumVerifyingInputStream.read() @AT@ 2371 @LENGTH@ 74
------INS SimpleName@@MethodName:assertThrows:[IOException.class, () -> checksumVerifyingInputStream.read()] @TO@ MethodInvocation@@assertThrows(IOException.class,() -> checksumVerifyingInputStream.read()) @AT@ 2371 @LENGTH@ 74
---------INS TypeLiteral@@IOException.class @TO@ SimpleName@@MethodName:assertThrows:[IOException.class, () -> checksumVerifyingInputStream.read()] @AT@ 2384 @LENGTH@ 17
---------INS LambdaExpression@@() -> checksumVerifyingInputStream.read() @TO@ SimpleName@@MethodName:assertThrows:[IOException.class, () -> checksumVerifyingInputStream.read()] @AT@ 2403 @LENGTH@ 41
------------INS MethodInvocation@@checksumVerifyingInputStream.read() @TO@ LambdaExpression@@() -> checksumVerifyingInputStream.read() @AT@ 2409 @LENGTH@ 35
---------------MOV SimpleName@@Name:checksumVerifyingInputStream @TO@ MethodInvocation@@checksumVerifyingInputStream.read() @AT@ 2287 @LENGTH@ 28
---------------MOV SimpleName@@MethodName:read:[] @TO@ MethodInvocation@@checksumVerifyingInputStream.read() @AT@ 2316 @LENGTH@ 6


UPD ExpressionStatement@@MethodInvocation:war.addAsWebInfResource(EmptyAsset.INSTANCE,"beans.xml") @TO@ MethodInvocation:war.addAsWebInfResource(new StringAsset("<beans bean-discovery-mode=\"all\"></beans>"),"beans.xml") @AT@ 1842 @LENGTH@ 58
---UPD MethodInvocation@@war.addAsWebInfResource(EmptyAsset.INSTANCE,"beans.xml") @TO@ war.addAsWebInfResource(new StringAsset("<beans bean-discovery-mode=\"all\"></beans>"),"beans.xml") @AT@ 1842 @LENGTH@ 57
------UPD SimpleName@@MethodName:addAsWebInfResource:[EmptyAsset.INSTANCE, "beans.xml"] @TO@ MethodName:addAsWebInfResource:[new StringAsset("<beans bean-discovery-mode=\"all\"></beans>"), "beans.xml"] @AT@ 1846 @LENGTH@ 53
---------DEL QualifiedName@@EmptyAsset.INSTANCE @AT@ 1866 @LENGTH@ 19
------------DEL SimpleName@@EmptyAsset @AT@ 1866 @LENGTH@ 10
------------DEL SimpleName@@INSTANCE @AT@ 1877 @LENGTH@ 8
---------INS ClassInstanceCreation@@StringAsset["<beans bean-discovery-mode=\"all\"></beans>"] @TO@ SimpleName@@MethodName:addAsWebInfResource:[EmptyAsset.INSTANCE, "beans.xml"] @AT@ 1867 @LENGTH@ 62
------------INS New@@new @TO@ ClassInstanceCreation@@StringAsset["<beans bean-discovery-mode=\"all\"></beans>"] @AT@ 1867 @LENGTH@ 3
------------INS SimpleType@@StringAsset @TO@ ClassInstanceCreation@@StringAsset["<beans bean-discovery-mode=\"all\"></beans>"] @AT@ 1871 @LENGTH@ 11
------------INS StringLiteral@@"<beans bean-discovery-mode=\"all\"></beans>" @TO@ ClassInstanceCreation@@StringAsset["<beans bean-discovery-mode=\"all\"></beans>"] @AT@ 1883 @LENGTH@ 45


UPD TypeDeclaration@@[@Singleton, public]EntityWithCDIAwareBridgesDao,  @TO@ [@ApplicationScoped, public]EntityWithCDIAwareBridgesDao,  @AT@ 1447 @LENGTH@ 1747
---UPD MarkerAnnotation@@@Singleton @TO@ @ApplicationScoped @AT@ 1447 @LENGTH@ 10


UPD ExpressionStatement@@MethodInvocation:new Archiver().create("unknown format",c,dir) @TO@ MethodInvocation:assertThrows(ArchiveException.class,() -> new Archiver().create("unknown format",c,dir)) @AT@ 3269 @LENGTH@ 48
---INS MethodInvocation@@assertThrows(ArchiveException.class,() -> new Archiver().create("unknown format",c,dir)) @TO@ ExpressionStatement@@MethodInvocation:new Archiver().create("unknown format",c,dir) @AT@ 3314 @LENGTH@ 91
------INS SimpleName@@MethodName:assertThrows:[ArchiveException.class, () -> new Archiver().create("unknown format",c,dir)] @TO@ MethodInvocation@@assertThrows(ArchiveException.class,() -> new Archiver().create("unknown format",c,dir)) @AT@ 3314 @LENGTH@ 91
---------INS TypeLiteral@@ArchiveException.class @TO@ SimpleName@@MethodName:assertThrows:[ArchiveException.class, () -> new Archiver().create("unknown format",c,dir)] @AT@ 3327 @LENGTH@ 22
---------INS LambdaExpression@@() -> new Archiver().create("unknown format",c,dir) @TO@ SimpleName@@MethodName:assertThrows:[ArchiveException.class, () -> new Archiver().create("unknown format",c,dir)] @AT@ 3351 @LENGTH@ 53
------------MOV MethodInvocation@@new Archiver().create("unknown format",c,dir) @TO@ LambdaExpression@@() -> new Archiver().create("unknown format",c,dir) @AT@ 3269 @LENGTH@ 47


UPD VariableDeclarationStatement@@Class<?> typeToRead=returnedType.getTypeToRead(); @TO@ Class<?> typeToRead=returnedType.getReturnedType(); @AT@ 5748 @LENGTH@ 51
---UPD VariableDeclarationFragment@@typeToRead=returnedType.getTypeToRead() @TO@ typeToRead=returnedType.getReturnedType() @AT@ 5757 @LENGTH@ 41
------UPD MethodInvocation@@returnedType.getTypeToRead() @TO@ returnedType.getReturnedType() @AT@ 5770 @LENGTH@ 28
---------UPD SimpleName@@MethodName:getTypeToRead:[] @TO@ MethodName:getReturnedType:[] @AT@ 5783 @LENGTH@ 15


UPD ExpressionStatement@@MethodInvocation:assertThat(tag.getName(),not(isEmptyOrNullString())) @TO@ MethodInvocation:assertThat(tag.getName(),not(emptyOrNullString())) @AT@ 2298 @LENGTH@ 54
---UPD MethodInvocation@@assertThat(tag.getName(),not(isEmptyOrNullString())) @TO@ assertThat(tag.getName(),not(emptyOrNullString())) @AT@ 2298 @LENGTH@ 53
------UPD SimpleName@@MethodName:assertThat:[tag.getName(), not(isEmptyOrNullString())] @TO@ MethodName:assertThat:[tag.getName(), not(emptyOrNullString())] @AT@ 2298 @LENGTH@ 53
---------UPD MethodInvocation@@not(isEmptyOrNullString()) @TO@ not(emptyOrNullString()) @AT@ 2324 @LENGTH@ 26
------------UPD SimpleName@@MethodName:not:[isEmptyOrNullString()] @TO@ MethodName:not:[emptyOrNullString()] @AT@ 2324 @LENGTH@ 26
---------------UPD MethodInvocation@@MethodName:isEmptyOrNullString:[] @TO@ MethodName:emptyOrNullString:[] @AT@ 2328 @LENGTH@ 21
------------UPD SimpleName@@MethodName:not:[isEmptyOrNullString()] @TO@ MethodName:not:[emptyOrNullString()] @AT@ 2324 @LENGTH@ 26
---------------UPD MethodInvocation@@MethodName:isEmptyOrNullString:[] @TO@ MethodName:emptyOrNullString:[] @AT@ 2328 @LENGTH@ 21


UPD IfStatement@@if (endpoint != null) {  JavaUtils.INSTANCE.acceptIfNotNull(endpoint.getReplyPostProcessor(),messageListener::setReplyPostProcessor).acceptIfNotNull(endpoint.getReplyContentType(),messageListener::setReplyContentType);} @TO@ if (endpoint != null) {  JavaUtils.INSTANCE.acceptIfNotNull(endpoint.getReplyPostProcessor(),messageListener::setReplyPostProcessor).acceptIfNotNull(endpoint.getReplyContentType(),messageListener::setReplyContentType);  messageListener.setConverterWinsContentType(endpoint.isConverterWinsContentType());} @AT@ 4926 @LENGTH@ 242
---UPD Block@@ThenBody:{  JavaUtils.INSTANCE.acceptIfNotNull(endpoint.getReplyPostProcessor(),messageListener::setReplyPostProcessor).acceptIfNotNull(endpoint.getReplyContentType(),messageListener::setReplyContentType);} @TO@ ThenBody:{  JavaUtils.INSTANCE.acceptIfNotNull(endpoint.getReplyPostProcessor(),messageListener::setReplyPostProcessor).acceptIfNotNull(endpoint.getReplyContentType(),messageListener::setReplyContentType);  messageListener.setConverterWinsContentType(endpoint.isConverterWinsContentType());} @AT@ 4948 @LENGTH@ 220
------MOV ExpressionStatement@@MethodInvocation:messageListener.setConverterWinsContentType(endpoint.isConverterWinsContentType()) @TO@ Block@@ThenBody:{  JavaUtils.INSTANCE.acceptIfNotNull(endpoint.getReplyPostProcessor(),messageListener::setReplyPostProcessor).acceptIfNotNull(endpoint.getReplyContentType(),messageListener::setReplyContentType);} @AT@ 5172 @LENGTH@ 83


UPD VariableDeclarationStatement@@boolean answer=super.applyFilterToExternalHeaders(headerName,headerValue,exchange); @TO@ boolean answer=super.applyFilterToCamelHeaders(headerName,headerValue,exchange); @AT@ 1363 @LENGTH@ 87
---UPD VariableDeclarationFragment@@answer=super.applyFilterToExternalHeaders(headerName,headerValue,exchange) @TO@ answer=super.applyFilterToCamelHeaders(headerName,headerValue,exchange) @AT@ 1371 @LENGTH@ 78
------UPD SuperMethodInvocation@@super.applyFilterToExternalHeaders(headerName,headerValue,exchange) @TO@ super.applyFilterToCamelHeaders(headerName,headerValue,exchange) @AT@ 1380 @LENGTH@ 69
---------UPD SimpleName@@MethodName:applyFilterToExternalHeaders:[headerName, headerValue, exchange] @TO@ MethodName:applyFilterToCamelHeaders:[headerName, headerValue, exchange] @AT@ 1386 @LENGTH@ 28


UPD VariableDeclarationStatement@@final Object[] els=new Object[]{"1","3","5","7","2","4","6"}; @TO@ final Object[] els={"1","3","5","7","2","4","6"}; @AT@ 2308 @LENGTH@ 72
---UPD VariableDeclarationFragment@@els=new Object[]{"1","3","5","7","2","4","6"} @TO@ els={"1","3","5","7","2","4","6"} @AT@ 2323 @LENGTH@ 56
------DEL ArrayCreation@@new Object[]{"1","3","5","7","2","4","6"} @AT@ 2329 @LENGTH@ 50
---------DEL ArrayType@@Object[] @AT@ 2333 @LENGTH@ 8
------------DEL SimpleType@@Object @AT@ 2333 @LENGTH@ 6
---------DEL ArrayInitializer@@{"1","3","5","7","2","4","6"} @AT@ 2342 @LENGTH@ 37
------INS ArrayInitializer@@{"1","3","5","7","2","4","6"} @TO@ VariableDeclarationFragment@@els=new Object[]{"1","3","5","7","2","4","6"} @AT@ 2329 @LENGTH@ 37
---------MOV StringLiteral@@"1" @TO@ ArrayInitializer@@{"1","3","5","7","2","4","6"} @AT@ 2344 @LENGTH@ 3
---------MOV StringLiteral@@"3" @TO@ ArrayInitializer@@{"1","3","5","7","2","4","6"} @AT@ 2349 @LENGTH@ 3
---------MOV StringLiteral@@"5" @TO@ ArrayInitializer@@{"1","3","5","7","2","4","6"} @AT@ 2354 @LENGTH@ 3
---------MOV StringLiteral@@"7" @TO@ ArrayInitializer@@{"1","3","5","7","2","4","6"} @AT@ 2359 @LENGTH@ 3
---------MOV StringLiteral@@"2" @TO@ ArrayInitializer@@{"1","3","5","7","2","4","6"} @AT@ 2364 @LENGTH@ 3
---------MOV StringLiteral@@"4" @TO@ ArrayInitializer@@{"1","3","5","7","2","4","6"} @AT@ 2369 @LENGTH@ 3
---------MOV StringLiteral@@"6" @TO@ ArrayInitializer@@{"1","3","5","7","2","4","6"} @AT@ 2374 @LENGTH@ 3


UPD MethodDeclaration@@protected, MultiItemSelectorContext<T,I>, MethodName:getThisContext, ComponentContext<?> context,  @TO@ public, MultiItemSelectorContext<T,I>, MethodName:getThisContext, ComponentContext<?> context,  @AT@ 2148 @LENGTH@ 474
---UPD Modifier@@protected @TO@ public @AT@ 2148 @LENGTH@ 9


UPD TryStatement@@try {  Counter failuresCounter=Metrics.getOrCreateCounter(MetricsConstants.COMPACTION_CLEANER_FAILURE_COUNTER);  do {    TxnStore.MutexAPI.LockHandle handle=null;    long startedAt=-1;    boolean delayedCleanupEnabled=HiveConf.getBoolVar(conf,HIVE_COMPACTOR_DELAYED_CLEANUP_ENABLED);    long retentionTime=0;    if (delayedCleanupEnabled) {      retentionTime=HiveConf.getTimeVar(conf,HIVE_COMPACTOR_CLEANER_RETENTION_TIME,TimeUnit.MILLISECONDS);    }    try {      handle=txnHandler.getMutexAPI().acquireLock(TxnStore.MUTEX_KEY.Cleaner.name());      startedAt=System.currentTimeMillis();      if (metricsEnabled) {        stopCycleUpdater();        startCycleUpdater(HiveConf.getTimeVar(conf,HiveConf.ConfVars.HIVE_COMPACTOR_CLEANER_DURATION_UPDATE_INTERVAL,TimeUnit.MILLISECONDS),new CleanerCycleUpdater(MetricsConstants.COMPACTION_CLEANER_CYCLE_DURATION,startedAt));      }      long minOpenTxnId=txnHandler.findMinOpenTxnIdForCleaner();      List<CompactionInfo> readyToClean=txnHandler.findReadyToClean(minOpenTxnId,retentionTime);      if (!readyToClean.isEmpty()) {        long minTxnIdSeenOpen=txnHandler.findMinTxnIdSeenOpen();        final long cleanerWaterMark=minTxnIdSeenOpen < 0 ? minOpenTxnId : Math.min(minOpenTxnId,minTxnIdSeenOpen);        LOG.info("Cleaning based on min open txn id: " + cleanerWaterMark);        List<CompletableFuture<Void>> cleanerList=new ArrayList<>();        for (        CompactionInfo compactionInfo : readyToClean) {          cleanerList.add(CompletableFuture.runAsync(ThrowingRunnable.unchecked(() -> clean(compactionInfo,cleanerWaterMark,metricsEnabled)),cleanerExecutor));        }        CompletableFuture.allOf(cleanerList.toArray(new CompletableFuture[0])).join();      }    } catch (    Throwable t) {      if (metricsEnabled && handle != null) {        failuresCounter.inc();      }      LOG.error("Caught an exception in the main loop of compactor cleaner, " + StringUtils.stringifyException(t));    } finally {      if (handle != null) {        handle.releaseLocks();      }      if (metricsEnabled) {        updateCycleDurationMetric(MetricsConstants.COMPACTION_CLEANER_CYCLE_DURATION,startedAt);      }      stopCycleUpdater();    }    long elapsedTime=System.currentTimeMillis() - startedAt;    if (elapsedTime < cleanerCheckInterval && !stop.get()) {      Thread.sleep(cleanerCheckInterval - elapsedTime);    }    LOG.debug("Cleaner thread finished one loop.");  } while (!stop.get());} catch (InterruptedException ie) {  LOG.error("Compactor cleaner thread interrupted, exiting " + StringUtils.stringifyException(ie));} finally {  if (cleanerExecutor != null) {    this.cleanerExecutor.shutdownNow();  }} @TO@ try {  do {    TxnStore.MutexAPI.LockHandle handle=null;    long startedAt=-1;    boolean delayedCleanupEnabled=HiveConf.getBoolVar(conf,HIVE_COMPACTOR_DELAYED_CLEANUP_ENABLED);    long retentionTime=0;    if (delayedCleanupEnabled) {      retentionTime=HiveConf.getTimeVar(conf,HIVE_COMPACTOR_CLEANER_RETENTION_TIME,TimeUnit.MILLISECONDS);    }    try {      handle=txnHandler.getMutexAPI().acquireLock(TxnStore.MUTEX_KEY.Cleaner.name());      startedAt=System.currentTimeMillis();      if (metricsEnabled) {        stopCycleUpdater();        startCycleUpdater(HiveConf.getTimeVar(conf,HiveConf.ConfVars.HIVE_COMPACTOR_CLEANER_DURATION_UPDATE_INTERVAL,TimeUnit.MILLISECONDS),new CleanerCycleUpdater(MetricsConstants.COMPACTION_CLEANER_CYCLE_DURATION,startedAt));      }      long minOpenTxnId=txnHandler.findMinOpenTxnIdForCleaner();      List<CompactionInfo> readyToClean=txnHandler.findReadyToClean(minOpenTxnId,retentionTime);      if (!readyToClean.isEmpty()) {        long minTxnIdSeenOpen=txnHandler.findMinTxnIdSeenOpen();        final long cleanerWaterMark=minTxnIdSeenOpen < 0 ? minOpenTxnId : Math.min(minOpenTxnId,minTxnIdSeenOpen);        LOG.info("Cleaning based on min open txn id: " + cleanerWaterMark);        List<CompletableFuture<Void>> cleanerList=new ArrayList<>();        for (        CompactionInfo compactionInfo : readyToClean) {          String tableName=compactionInfo.getFullTableName();          String partition=compactionInfo.getFullPartitionName();          CompletableFuture<Void> asyncJob=CompletableFuture.runAsync(ThrowingRunnable.unchecked(() -> clean(compactionInfo,cleanerWaterMark,metricsEnabled)),cleanerExecutor).exceptionally(t -> {            LOG.error("Error during the cleaning the table {} / partition {}",tableName,partition,t);            return null;          });          cleanerList.add(asyncJob);        }        CompletableFuture.allOf(cleanerList.toArray(new CompletableFuture[0])).join();      }    } catch (    Throwable t) {      LOG.error("Caught an exception in the main loop of compactor cleaner, " + StringUtils.stringifyException(t));    } finally {      if (handle != null) {        handle.releaseLocks();      }      if (metricsEnabled) {        updateCycleDurationMetric(MetricsConstants.COMPACTION_CLEANER_CYCLE_DURATION,startedAt);      }      stopCycleUpdater();    }    long elapsedTime=System.currentTimeMillis() - startedAt;    if (elapsedTime < cleanerCheckInterval && !stop.get()) {      Thread.sleep(cleanerCheckInterval - elapsedTime);    }    LOG.debug("Cleaner thread finished one loop.");  } while (!stop.get());} catch (InterruptedException ie) {  LOG.error("Compactor cleaner thread interrupted, exiting " + StringUtils.stringifyException(ie));} finally {  if (cleanerExecutor != null) {    this.cleanerExecutor.shutdownNow();  }} @AT@ 5697 @LENGTH@ 3922
---DEL VariableDeclarationStatement@@Counter failuresCounter=Metrics.getOrCreateCounter(MetricsConstants.COMPACTION_CLEANER_FAILURE_COUNTER); @AT@ 5709 @LENGTH@ 106
------DEL SimpleType@@Counter @AT@ 5709 @LENGTH@ 7
------DEL VariableDeclarationFragment@@failuresCounter=Metrics.getOrCreateCounter(MetricsConstants.COMPACTION_CLEANER_FAILURE_COUNTER) @AT@ 5717 @LENGTH@ 97
---------DEL SimpleName@@failuresCounter @AT@ 5717 @LENGTH@ 15
---------DEL MethodInvocation@@Metrics.getOrCreateCounter(MetricsConstants.COMPACTION_CLEANER_FAILURE_COUNTER) @AT@ 5735 @LENGTH@ 79
------------DEL SimpleName@@Name:Metrics @AT@ 5735 @LENGTH@ 7
------------DEL SimpleName@@MethodName:getOrCreateCounter:[MetricsConstants.COMPACTION_CLEANER_FAILURE_COUNTER] @AT@ 5743 @LENGTH@ 71
---------------DEL QualifiedName@@MetricsConstants.COMPACTION_CLEANER_FAILURE_COUNTER @AT@ 5762 @LENGTH@ 51
------------------DEL SimpleName@@MetricsConstants @AT@ 5762 @LENGTH@ 16
------------------DEL SimpleName@@COMPACTION_CLEANER_FAILURE_COUNTER @AT@ 5779 @LENGTH@ 34
---UPD DoStatement@@do {  TxnStore.MutexAPI.LockHandle handle=null;  long startedAt=-1;  boolean delayedCleanupEnabled=HiveConf.getBoolVar(conf,HIVE_COMPACTOR_DELAYED_CLEANUP_ENABLED);  long retentionTime=0;  if (delayedCleanupEnabled) {    retentionTime=HiveConf.getTimeVar(conf,HIVE_COMPACTOR_CLEANER_RETENTION_TIME,TimeUnit.MILLISECONDS);  }  try {    handle=txnHandler.getMutexAPI().acquireLock(TxnStore.MUTEX_KEY.Cleaner.name());    startedAt=System.currentTimeMillis();    if (metricsEnabled) {      stopCycleUpdater();      startCycleUpdater(HiveConf.getTimeVar(conf,HiveConf.ConfVars.HIVE_COMPACTOR_CLEANER_DURATION_UPDATE_INTERVAL,TimeUnit.MILLISECONDS),new CleanerCycleUpdater(MetricsConstants.COMPACTION_CLEANER_CYCLE_DURATION,startedAt));    }    long minOpenTxnId=txnHandler.findMinOpenTxnIdForCleaner();    List<CompactionInfo> readyToClean=txnHandler.findReadyToClean(minOpenTxnId,retentionTime);    if (!readyToClean.isEmpty()) {      long minTxnIdSeenOpen=txnHandler.findMinTxnIdSeenOpen();      final long cleanerWaterMark=minTxnIdSeenOpen < 0 ? minOpenTxnId : Math.min(minOpenTxnId,minTxnIdSeenOpen);      LOG.info("Cleaning based on min open txn id: " + cleanerWaterMark);      List<CompletableFuture<Void>> cleanerList=new ArrayList<>();      for (      CompactionInfo compactionInfo : readyToClean) {        cleanerList.add(CompletableFuture.runAsync(ThrowingRunnable.unchecked(() -> clean(compactionInfo,cleanerWaterMark,metricsEnabled)),cleanerExecutor));      }      CompletableFuture.allOf(cleanerList.toArray(new CompletableFuture[0])).join();    }  } catch (  Throwable t) {    if (metricsEnabled && handle != null) {      failuresCounter.inc();    }    LOG.error("Caught an exception in the main loop of compactor cleaner, " + StringUtils.stringifyException(t));  } finally {    if (handle != null) {      handle.releaseLocks();    }    if (metricsEnabled) {      updateCycleDurationMetric(MetricsConstants.COMPACTION_CLEANER_CYCLE_DURATION,startedAt);    }    stopCycleUpdater();  }  long elapsedTime=System.currentTimeMillis() - startedAt;  if (elapsedTime < cleanerCheckInterval && !stop.get()) {    Thread.sleep(cleanerCheckInterval - elapsedTime);  }  LOG.debug("Cleaner thread finished one loop.");} while (!stop.get()); @TO@ do {  TxnStore.MutexAPI.LockHandle handle=null;  long startedAt=-1;  boolean delayedCleanupEnabled=HiveConf.getBoolVar(conf,HIVE_COMPACTOR_DELAYED_CLEANUP_ENABLED);  long retentionTime=0;  if (delayedCleanupEnabled) {    retentionTime=HiveConf.getTimeVar(conf,HIVE_COMPACTOR_CLEANER_RETENTION_TIME,TimeUnit.MILLISECONDS);  }  try {    handle=txnHandler.getMutexAPI().acquireLock(TxnStore.MUTEX_KEY.Cleaner.name());    startedAt=System.currentTimeMillis();    if (metricsEnabled) {      stopCycleUpdater();      startCycleUpdater(HiveConf.getTimeVar(conf,HiveConf.ConfVars.HIVE_COMPACTOR_CLEANER_DURATION_UPDATE_INTERVAL,TimeUnit.MILLISECONDS),new CleanerCycleUpdater(MetricsConstants.COMPACTION_CLEANER_CYCLE_DURATION,startedAt));    }    long minOpenTxnId=txnHandler.findMinOpenTxnIdForCleaner();    List<CompactionInfo> readyToClean=txnHandler.findReadyToClean(minOpenTxnId,retentionTime);    if (!readyToClean.isEmpty()) {      long minTxnIdSeenOpen=txnHandler.findMinTxnIdSeenOpen();      final long cleanerWaterMark=minTxnIdSeenOpen < 0 ? minOpenTxnId : Math.min(minOpenTxnId,minTxnIdSeenOpen);      LOG.info("Cleaning based on min open txn id: " + cleanerWaterMark);      List<CompletableFuture<Void>> cleanerList=new ArrayList<>();      for (      CompactionInfo compactionInfo : readyToClean) {        String tableName=compactionInfo.getFullTableName();        String partition=compactionInfo.getFullPartitionName();        CompletableFuture<Void> asyncJob=CompletableFuture.runAsync(ThrowingRunnable.unchecked(() -> clean(compactionInfo,cleanerWaterMark,metricsEnabled)),cleanerExecutor).exceptionally(t -> {          LOG.error("Error during the cleaning the table {} / partition {}",tableName,partition,t);          return null;        });        cleanerList.add(asyncJob);      }      CompletableFuture.allOf(cleanerList.toArray(new CompletableFuture[0])).join();    }  } catch (  Throwable t) {    LOG.error("Caught an exception in the main loop of compactor cleaner, " + StringUtils.stringifyException(t));  } finally {    if (handle != null) {      handle.releaseLocks();    }    if (metricsEnabled) {      updateCycleDurationMetric(MetricsConstants.COMPACTION_CLEANER_CYCLE_DURATION,startedAt);    }    stopCycleUpdater();  }  long elapsedTime=System.currentTimeMillis() - startedAt;  if (elapsedTime < cleanerCheckInterval && !stop.get()) {    Thread.sleep(cleanerCheckInterval - elapsedTime);  }  LOG.debug("Cleaner thread finished one loop.");} while (!stop.get()); @AT@ 5822 @LENGTH@ 3534
------UPD TryStatement@@try {  handle=txnHandler.getMutexAPI().acquireLock(TxnStore.MUTEX_KEY.Cleaner.name());  startedAt=System.currentTimeMillis();  if (metricsEnabled) {    stopCycleUpdater();    startCycleUpdater(HiveConf.getTimeVar(conf,HiveConf.ConfVars.HIVE_COMPACTOR_CLEANER_DURATION_UPDATE_INTERVAL,TimeUnit.MILLISECONDS),new CleanerCycleUpdater(MetricsConstants.COMPACTION_CLEANER_CYCLE_DURATION,startedAt));  }  long minOpenTxnId=txnHandler.findMinOpenTxnIdForCleaner();  List<CompactionInfo> readyToClean=txnHandler.findReadyToClean(minOpenTxnId,retentionTime);  if (!readyToClean.isEmpty()) {    long minTxnIdSeenOpen=txnHandler.findMinTxnIdSeenOpen();    final long cleanerWaterMark=minTxnIdSeenOpen < 0 ? minOpenTxnId : Math.min(minOpenTxnId,minTxnIdSeenOpen);    LOG.info("Cleaning based on min open txn id: " + cleanerWaterMark);    List<CompletableFuture<Void>> cleanerList=new ArrayList<>();    for (    CompactionInfo compactionInfo : readyToClean) {      cleanerList.add(CompletableFuture.runAsync(ThrowingRunnable.unchecked(() -> clean(compactionInfo,cleanerWaterMark,metricsEnabled)),cleanerExecutor));    }    CompletableFuture.allOf(cleanerList.toArray(new CompletableFuture[0])).join();  }} catch (Throwable t) {  if (metricsEnabled && handle != null) {    failuresCounter.inc();  }  LOG.error("Caught an exception in the main loop of compactor cleaner, " + StringUtils.stringifyException(t));} finally {  if (handle != null) {    handle.releaseLocks();  }  if (metricsEnabled) {    updateCycleDurationMetric(MetricsConstants.COMPACTION_CLEANER_CYCLE_DURATION,startedAt);  }  stopCycleUpdater();} @TO@ try {  handle=txnHandler.getMutexAPI().acquireLock(TxnStore.MUTEX_KEY.Cleaner.name());  startedAt=System.currentTimeMillis();  if (metricsEnabled) {    stopCycleUpdater();    startCycleUpdater(HiveConf.getTimeVar(conf,HiveConf.ConfVars.HIVE_COMPACTOR_CLEANER_DURATION_UPDATE_INTERVAL,TimeUnit.MILLISECONDS),new CleanerCycleUpdater(MetricsConstants.COMPACTION_CLEANER_CYCLE_DURATION,startedAt));  }  long minOpenTxnId=txnHandler.findMinOpenTxnIdForCleaner();  List<CompactionInfo> readyToClean=txnHandler.findReadyToClean(minOpenTxnId,retentionTime);  if (!readyToClean.isEmpty()) {    long minTxnIdSeenOpen=txnHandler.findMinTxnIdSeenOpen();    final long cleanerWaterMark=minTxnIdSeenOpen < 0 ? minOpenTxnId : Math.min(minOpenTxnId,minTxnIdSeenOpen);    LOG.info("Cleaning based on min open txn id: " + cleanerWaterMark);    List<CompletableFuture<Void>> cleanerList=new ArrayList<>();    for (    CompactionInfo compactionInfo : readyToClean) {      String tableName=compactionInfo.getFullTableName();      String partition=compactionInfo.getFullPartitionName();      CompletableFuture<Void> asyncJob=CompletableFuture.runAsync(ThrowingRunnable.unchecked(() -> clean(compactionInfo,cleanerWaterMark,metricsEnabled)),cleanerExecutor).exceptionally(t -> {        LOG.error("Error during the cleaning the table {} / partition {}",tableName,partition,t);        return null;      });      cleanerList.add(asyncJob);    }    CompletableFuture.allOf(cleanerList.toArray(new CompletableFuture[0])).join();  }} catch (Throwable t) {  LOG.error("Caught an exception in the main loop of compactor cleaner, " + StringUtils.stringifyException(t));} finally {  if (handle != null) {    handle.releaseLocks();  }  if (metricsEnabled) {    updateCycleDurationMetric(MetricsConstants.COMPACTION_CLEANER_CYCLE_DURATION,startedAt);  }  stopCycleUpdater();} @AT@ 6362 @LENGTH@ 2643
---------UPD IfStatement@@if (!readyToClean.isEmpty()) {  long minTxnIdSeenOpen=txnHandler.findMinTxnIdSeenOpen();  final long cleanerWaterMark=minTxnIdSeenOpen < 0 ? minOpenTxnId : Math.min(minOpenTxnId,minTxnIdSeenOpen);  LOG.info("Cleaning based on min open txn id: " + cleanerWaterMark);  List<CompletableFuture<Void>> cleanerList=new ArrayList<>();  for (  CompactionInfo compactionInfo : readyToClean) {    cleanerList.add(CompletableFuture.runAsync(ThrowingRunnable.unchecked(() -> clean(compactionInfo,cleanerWaterMark,metricsEnabled)),cleanerExecutor));  }  CompletableFuture.allOf(cleanerList.toArray(new CompletableFuture[0])).join();} @TO@ if (!readyToClean.isEmpty()) {  long minTxnIdSeenOpen=txnHandler.findMinTxnIdSeenOpen();  final long cleanerWaterMark=minTxnIdSeenOpen < 0 ? minOpenTxnId : Math.min(minOpenTxnId,minTxnIdSeenOpen);  LOG.info("Cleaning based on min open txn id: " + cleanerWaterMark);  List<CompletableFuture<Void>> cleanerList=new ArrayList<>();  for (  CompactionInfo compactionInfo : readyToClean) {    String tableName=compactionInfo.getFullTableName();    String partition=compactionInfo.getFullPartitionName();    CompletableFuture<Void> asyncJob=CompletableFuture.runAsync(ThrowingRunnable.unchecked(() -> clean(compactionInfo,cleanerWaterMark,metricsEnabled)),cleanerExecutor).exceptionally(t -> {      LOG.error("Error during the cleaning the table {} / partition {}",tableName,partition,t);      return null;    });    cleanerList.add(asyncJob);  }  CompletableFuture.allOf(cleanerList.toArray(new CompletableFuture[0])).join();} @AT@ 7050 @LENGTH@ 1341
------------UPD Block@@ThenBody:{  long minTxnIdSeenOpen=txnHandler.findMinTxnIdSeenOpen();  final long cleanerWaterMark=minTxnIdSeenOpen < 0 ? minOpenTxnId : Math.min(minOpenTxnId,minTxnIdSeenOpen);  LOG.info("Cleaning based on min open txn id: " + cleanerWaterMark);  List<CompletableFuture<Void>> cleanerList=new ArrayList<>();  for (  CompactionInfo compactionInfo : readyToClean) {    cleanerList.add(CompletableFuture.runAsync(ThrowingRunnable.unchecked(() -> clean(compactionInfo,cleanerWaterMark,metricsEnabled)),cleanerExecutor));  }  CompletableFuture.allOf(cleanerList.toArray(new CompletableFuture[0])).join();} @TO@ ThenBody:{  long minTxnIdSeenOpen=txnHandler.findMinTxnIdSeenOpen();  final long cleanerWaterMark=minTxnIdSeenOpen < 0 ? minOpenTxnId : Math.min(minOpenTxnId,minTxnIdSeenOpen);  LOG.info("Cleaning based on min open txn id: " + cleanerWaterMark);  List<CompletableFuture<Void>> cleanerList=new ArrayList<>();  for (  CompactionInfo compactionInfo : readyToClean) {    String tableName=compactionInfo.getFullTableName();    String partition=compactionInfo.getFullPartitionName();    CompletableFuture<Void> asyncJob=CompletableFuture.runAsync(ThrowingRunnable.unchecked(() -> clean(compactionInfo,cleanerWaterMark,metricsEnabled)),cleanerExecutor).exceptionally(t -> {      LOG.error("Error during the cleaning the table {} / partition {}",tableName,partition,t);      return null;    });    cleanerList.add(asyncJob);  }  CompletableFuture.allOf(cleanerList.toArray(new CompletableFuture[0])).join();} @AT@ 7079 @LENGTH@ 1312
---------------UPD EnhancedForStatement@@for (CompactionInfo compactionInfo : readyToClean) {  cleanerList.add(CompletableFuture.runAsync(ThrowingRunnable.unchecked(() -> clean(compactionInfo,cleanerWaterMark,metricsEnabled)),cleanerExecutor));} @TO@ for (CompactionInfo compactionInfo : readyToClean) {  String tableName=compactionInfo.getFullTableName();  String partition=compactionInfo.getFullPartitionName();  CompletableFuture<Void> asyncJob=CompletableFuture.runAsync(ThrowingRunnable.unchecked(() -> clean(compactionInfo,cleanerWaterMark,metricsEnabled)),cleanerExecutor).exceptionally(t -> {    LOG.error("Error during the cleaning the table {} / partition {}",tableName,partition,t);    return null;  });  cleanerList.add(asyncJob);} @AT@ 8036 @LENGTH@ 252
------------------UPD ExpressionStatement@@MethodInvocation:cleanerList.add(CompletableFuture.runAsync(ThrowingRunnable.unchecked(() -> clean(compactionInfo,cleanerWaterMark,metricsEnabled)),cleanerExecutor)) @TO@ MethodInvocation:cleanerList.add(asyncJob) @AT@ 8103 @LENGTH@ 171
---------------------UPD MethodInvocation@@cleanerList.add(CompletableFuture.runAsync(ThrowingRunnable.unchecked(() -> clean(compactionInfo,cleanerWaterMark,metricsEnabled)),cleanerExecutor)) @TO@ CompletableFuture.runAsync(ThrowingRunnable.unchecked(() -> clean(compactionInfo,cleanerWaterMark,metricsEnabled)),cleanerExecutor).exceptionally(t -> {
  LOG.error("Error during the cleaning the table {} / partition {}",tableName,partition,t);
  return null;
}
) @AT@ 8103 @LENGTH@ 170
---------------------INS MethodInvocation@@cleanerList.add(asyncJob) @TO@ ExpressionStatement@@MethodInvocation:cleanerList.add(CompletableFuture.runAsync(ThrowingRunnable.unchecked(() -> clean(compactionInfo,cleanerWaterMark,metricsEnabled)),cleanerExecutor)) @AT@ 8732 @LENGTH@ 25
------------------------INS SimpleName@@Name:cleanerList @TO@ MethodInvocation@@cleanerList.add(asyncJob) @AT@ 8732 @LENGTH@ 11
------------------------INS SimpleName@@MethodName:add:[asyncJob] @TO@ MethodInvocation@@cleanerList.add(asyncJob) @AT@ 8744 @LENGTH@ 13
---------------------------INS SimpleName@@asyncJob @TO@ SimpleName@@MethodName:add:[asyncJob] @AT@ 8748 @LENGTH@ 8
------------------INS VariableDeclarationStatement@@String tableName=compactionInfo.getFullTableName(); @TO@ EnhancedForStatement@@for (CompactionInfo compactionInfo : readyToClean) {  cleanerList.add(CompletableFuture.runAsync(ThrowingRunnable.unchecked(() -> clean(compactionInfo,cleanerWaterMark,metricsEnabled)),cleanerExecutor));} @AT@ 8113 @LENGTH@ 53
---------------------INS SimpleType@@String @TO@ VariableDeclarationStatement@@String tableName=compactionInfo.getFullTableName(); @AT@ 8113 @LENGTH@ 6
---------------------INS VariableDeclarationFragment@@tableName=compactionInfo.getFullTableName() @TO@ VariableDeclarationStatement@@String tableName=compactionInfo.getFullTableName(); @AT@ 8120 @LENGTH@ 45
------------------------INS SimpleName@@tableName @TO@ VariableDeclarationFragment@@tableName=compactionInfo.getFullTableName() @AT@ 8120 @LENGTH@ 9
------------------------INS MethodInvocation@@compactionInfo.getFullTableName() @TO@ VariableDeclarationFragment@@tableName=compactionInfo.getFullTableName() @AT@ 8132 @LENGTH@ 33
---------------------------INS SimpleName@@Name:compactionInfo @TO@ MethodInvocation@@compactionInfo.getFullTableName() @AT@ 8132 @LENGTH@ 14
---------------------------INS SimpleName@@MethodName:getFullTableName:[] @TO@ MethodInvocation@@compactionInfo.getFullTableName() @AT@ 8147 @LENGTH@ 18
------------------INS VariableDeclarationStatement@@String partition=compactionInfo.getFullPartitionName(); @TO@ EnhancedForStatement@@for (CompactionInfo compactionInfo : readyToClean) {  cleanerList.add(CompletableFuture.runAsync(ThrowingRunnable.unchecked(() -> clean(compactionInfo,cleanerWaterMark,metricsEnabled)),cleanerExecutor));} @AT@ 8181 @LENGTH@ 57
---------------------INS SimpleType@@String @TO@ VariableDeclarationStatement@@String partition=compactionInfo.getFullPartitionName(); @AT@ 8181 @LENGTH@ 6
---------------------INS VariableDeclarationFragment@@partition=compactionInfo.getFullPartitionName() @TO@ VariableDeclarationStatement@@String partition=compactionInfo.getFullPartitionName(); @AT@ 8188 @LENGTH@ 49
------------------------INS SimpleName@@partition @TO@ VariableDeclarationFragment@@partition=compactionInfo.getFullPartitionName() @AT@ 8188 @LENGTH@ 9
------------------------INS MethodInvocation@@compactionInfo.getFullPartitionName() @TO@ VariableDeclarationFragment@@partition=compactionInfo.getFullPartitionName() @AT@ 8200 @LENGTH@ 37
---------------------------INS SimpleName@@Name:compactionInfo @TO@ MethodInvocation@@compactionInfo.getFullPartitionName() @AT@ 8200 @LENGTH@ 14
---------------------------INS SimpleName@@MethodName:getFullPartitionName:[] @TO@ MethodInvocation@@compactionInfo.getFullPartitionName() @AT@ 8215 @LENGTH@ 22
------------------INS VariableDeclarationStatement@@CompletableFuture<Void> asyncJob=CompletableFuture.runAsync(ThrowingRunnable.unchecked(() -> clean(compactionInfo,cleanerWaterMark,metricsEnabled)),cleanerExecutor).exceptionally(t -> {
  LOG.error("Error during the cleaning the table {} / partition {}",tableName,partition,t);
  return null;
}
); @TO@ EnhancedForStatement@@for (CompactionInfo compactionInfo : readyToClean) {  cleanerList.add(CompletableFuture.runAsync(ThrowingRunnable.unchecked(() -> clean(compactionInfo,cleanerWaterMark,metricsEnabled)),cleanerExecutor));} @AT@ 8253 @LENGTH@ 464
---------------------INS ParameterizedType@@CompletableFuture<Void> @TO@ VariableDeclarationStatement@@CompletableFuture<Void> asyncJob=CompletableFuture.runAsync(ThrowingRunnable.unchecked(() -> clean(compactionInfo,cleanerWaterMark,metricsEnabled)),cleanerExecutor).exceptionally(t -> {
  LOG.error("Error during the cleaning the table {} / partition {}",tableName,partition,t);
  return null;
}
); @AT@ 8253 @LENGTH@ 23
------------------------INS SimpleType@@CompletableFuture @TO@ ParameterizedType@@CompletableFuture<Void> @AT@ 8253 @LENGTH@ 17
------------------------INS SimpleType@@Void @TO@ ParameterizedType@@CompletableFuture<Void> @AT@ 8271 @LENGTH@ 4
---------------------INS VariableDeclarationFragment@@asyncJob=CompletableFuture.runAsync(ThrowingRunnable.unchecked(() -> clean(compactionInfo,cleanerWaterMark,metricsEnabled)),cleanerExecutor).exceptionally(t -> {
  LOG.error("Error during the cleaning the table {} / partition {}",tableName,partition,t);
  return null;
}
) @TO@ VariableDeclarationStatement@@CompletableFuture<Void> asyncJob=CompletableFuture.runAsync(ThrowingRunnable.unchecked(() -> clean(compactionInfo,cleanerWaterMark,metricsEnabled)),cleanerExecutor).exceptionally(t -> {
  LOG.error("Error during the cleaning the table {} / partition {}",tableName,partition,t);
  return null;
}
); @AT@ 8277 @LENGTH@ 439
------------------------MOV MethodInvocation@@cleanerList.add(CompletableFuture.runAsync(ThrowingRunnable.unchecked(() -> clean(compactionInfo,cleanerWaterMark,metricsEnabled)),cleanerExecutor)) @TO@ VariableDeclarationFragment@@asyncJob=CompletableFuture.runAsync(ThrowingRunnable.unchecked(() -> clean(compactionInfo,cleanerWaterMark,metricsEnabled)),cleanerExecutor).exceptionally(t -> {
  LOG.error("Error during the cleaning the table {} / partition {}",tableName,partition,t);
  return null;
}
) @AT@ 8103 @LENGTH@ 170
---------------------------UPD SimpleName@@Name:cleanerList @TO@ Name:LOG @AT@ 8103 @LENGTH@ 11
---------------------------UPD SimpleName@@MethodName:add:[CompletableFuture.runAsync(ThrowingRunnable.unchecked(() -> clean(compactionInfo,cleanerWaterMark,metricsEnabled)),cleanerExecutor)] @TO@ MethodName:error:["Error during the cleaning the table {} / partition {}", tableName, partition, t] @AT@ 8115 @LENGTH@ 158
---------------------------MOV MethodInvocation@@CompletableFuture.runAsync(ThrowingRunnable.unchecked(() -> clean(compactionInfo,cleanerWaterMark,metricsEnabled)),cleanerExecutor) @TO@ MethodInvocation@@cleanerList.add(CompletableFuture.runAsync(ThrowingRunnable.unchecked(() -> clean(compactionInfo,cleanerWaterMark,metricsEnabled)),cleanerExecutor)) @AT@ 8119 @LENGTH@ 153
------------------------------DEL SimpleName@@Name:CompletableFuture @AT@ 8119 @LENGTH@ 17
------------------------------DEL SimpleName@@MethodName:runAsync:[ThrowingRunnable.unchecked(() -> clean(compactionInfo,cleanerWaterMark,metricsEnabled)), cleanerExecutor] @AT@ 8137 @LENGTH@ 135
---------------------------------DEL SimpleName@@cleanerExecutor @AT@ 8256 @LENGTH@ 15
------------------------------MOV MethodInvocation@@ThrowingRunnable.unchecked(() -> clean(compactionInfo,cleanerWaterMark,metricsEnabled)) @TO@ MethodInvocation@@CompletableFuture.runAsync(ThrowingRunnable.unchecked(() -> clean(compactionInfo,cleanerWaterMark,metricsEnabled)),cleanerExecutor) @AT@ 8146 @LENGTH@ 108
------------------------------INS SimpleName@@cleanerExecutor @TO@ MethodInvocation@@CompletableFuture.runAsync(ThrowingRunnable.unchecked(() -> clean(compactionInfo,cleanerWaterMark,metricsEnabled)),cleanerExecutor) @AT@ 8477 @LENGTH@ 15
---------------------------INS SimpleName@@Name:CompletableFuture @TO@ MethodInvocation@@cleanerList.add(CompletableFuture.runAsync(ThrowingRunnable.unchecked(() -> clean(compactionInfo,cleanerWaterMark,metricsEnabled)),cleanerExecutor)) @AT@ 8306 @LENGTH@ 17
---------------------------INS SimpleName@@MethodName:exceptionally:[t -> {
  LOG.error("Error during the cleaning the table {} / partition {}",tableName,partition,t);
  return null;
}
] @TO@ MethodInvocation@@cleanerList.add(CompletableFuture.runAsync(ThrowingRunnable.unchecked(() -> clean(compactionInfo,cleanerWaterMark,metricsEnabled)),cleanerExecutor)) @AT@ 8517 @LENGTH@ 199
------------------------------INS LambdaExpression@@t -> {
  LOG.error("Error during the cleaning the table {} / partition {}",tableName,partition,t);
  return null;
}
 @TO@ SimpleName@@MethodName:exceptionally:[t -> {
  LOG.error("Error during the cleaning the table {} / partition {}",tableName,partition,t);
  return null;
}
] @AT@ 8531 @LENGTH@ 184
---------------------------------INS VariableDeclarationFragment@@t @TO@ LambdaExpression@@t -> {
  LOG.error("Error during the cleaning the table {} / partition {}",tableName,partition,t);
  return null;
}
 @AT@ 8531 @LENGTH@ 1
------------------------------------INS SimpleName@@t @TO@ VariableDeclarationFragment@@t @AT@ 8531 @LENGTH@ 1
------------------------------------INS SimpleName@@t @TO@ VariableDeclarationFragment@@t @AT@ 8531 @LENGTH@ 1
---------------------------------INS ExpressionStatement@@MethodInvocation:LOG.error("Error during the cleaning the table {} / partition {}",tableName,partition,t) @TO@ LambdaExpression@@t -> {
  LOG.error("Error during the cleaning the table {} / partition {}",tableName,partition,t);
  return null;
}
 @AT@ 8562 @LENGTH@ 92
------------------------------------INS MethodInvocation@@LOG.error("Error during the cleaning the table {} / partition {}",tableName,partition,t) @TO@ ExpressionStatement@@MethodInvocation:LOG.error("Error during the cleaning the table {} / partition {}",tableName,partition,t) @AT@ 8562 @LENGTH@ 91
---------------------------------------MOV SimpleName@@Name:cleanerList @TO@ MethodInvocation@@LOG.error("Error during the cleaning the table {} / partition {}",tableName,partition,t) @AT@ 8103 @LENGTH@ 11
---------------------------------------MOV SimpleName@@Name:cleanerList @TO@ MethodInvocation@@LOG.error("Error during the cleaning the table {} / partition {}",tableName,partition,t) @AT@ 8103 @LENGTH@ 11
---------------------------------------MOV SimpleName@@MethodName:add:[CompletableFuture.runAsync(ThrowingRunnable.unchecked(() -> clean(compactionInfo,cleanerWaterMark,metricsEnabled)),cleanerExecutor)] @TO@ MethodInvocation@@LOG.error("Error during the cleaning the table {} / partition {}",tableName,partition,t) @AT@ 8115 @LENGTH@ 158
------------------------------------------UPD MethodInvocation@@CompletableFuture.runAsync(ThrowingRunnable.unchecked(() -> clean(compactionInfo,cleanerWaterMark,metricsEnabled)),cleanerExecutor) @TO@ MethodName:runAsync:[ThrowingRunnable.unchecked(() -> clean(compactionInfo,cleanerWaterMark,metricsEnabled)), cleanerExecutor] @AT@ 8119 @LENGTH@ 153
------------------------------------------INS StringLiteral@@"Error during the cleaning the table {} / partition {}" @TO@ SimpleName@@MethodName:add:[CompletableFuture.runAsync(ThrowingRunnable.unchecked(() -> clean(compactionInfo,cleanerWaterMark,metricsEnabled)),cleanerExecutor)] @AT@ 8572 @LENGTH@ 55
------------------------------------------INS SimpleName@@tableName @TO@ SimpleName@@MethodName:add:[CompletableFuture.runAsync(ThrowingRunnable.unchecked(() -> clean(compactionInfo,cleanerWaterMark,metricsEnabled)),cleanerExecutor)] @AT@ 8629 @LENGTH@ 9
------------------------------------------INS SimpleName@@partition @TO@ SimpleName@@MethodName:add:[CompletableFuture.runAsync(ThrowingRunnable.unchecked(() -> clean(compactionInfo,cleanerWaterMark,metricsEnabled)),cleanerExecutor)] @AT@ 8640 @LENGTH@ 9
------------------------------------------INS SimpleName@@t @TO@ SimpleName@@MethodName:add:[CompletableFuture.runAsync(ThrowingRunnable.unchecked(() -> clean(compactionInfo,cleanerWaterMark,metricsEnabled)),cleanerExecutor)] @AT@ 8651 @LENGTH@ 1
---------------------------------------MOV SimpleName@@MethodName:add:[CompletableFuture.runAsync(ThrowingRunnable.unchecked(() -> clean(compactionInfo,cleanerWaterMark,metricsEnabled)),cleanerExecutor)] @TO@ MethodInvocation@@LOG.error("Error during the cleaning the table {} / partition {}",tableName,partition,t) @AT@ 8115 @LENGTH@ 158
------------------------------------------UPD MethodInvocation@@CompletableFuture.runAsync(ThrowingRunnable.unchecked(() -> clean(compactionInfo,cleanerWaterMark,metricsEnabled)),cleanerExecutor) @TO@ MethodName:runAsync:[ThrowingRunnable.unchecked(() -> clean(compactionInfo,cleanerWaterMark,metricsEnabled)), cleanerExecutor] @AT@ 8119 @LENGTH@ 153
------------------------------------------INS StringLiteral@@"Error during the cleaning the table {} / partition {}" @TO@ SimpleName@@MethodName:add:[CompletableFuture.runAsync(ThrowingRunnable.unchecked(() -> clean(compactionInfo,cleanerWaterMark,metricsEnabled)),cleanerExecutor)] @AT@ 8572 @LENGTH@ 55
------------------------------------------INS SimpleName@@tableName @TO@ SimpleName@@MethodName:add:[CompletableFuture.runAsync(ThrowingRunnable.unchecked(() -> clean(compactionInfo,cleanerWaterMark,metricsEnabled)),cleanerExecutor)] @AT@ 8629 @LENGTH@ 9
------------------------------------------INS SimpleName@@partition @TO@ SimpleName@@MethodName:add:[CompletableFuture.runAsync(ThrowingRunnable.unchecked(() -> clean(compactionInfo,cleanerWaterMark,metricsEnabled)),cleanerExecutor)] @AT@ 8640 @LENGTH@ 9
------------------------------------------INS SimpleName@@t @TO@ SimpleName@@MethodName:add:[CompletableFuture.runAsync(ThrowingRunnable.unchecked(() -> clean(compactionInfo,cleanerWaterMark,metricsEnabled)),cleanerExecutor)] @AT@ 8651 @LENGTH@ 1
---------------------------------INS ReturnStatement@@NullLiteral:null @TO@ LambdaExpression@@t -> {
  LOG.error("Error during the cleaning the table {} / partition {}",tableName,partition,t);
  return null;
}
 @AT@ 8679 @LENGTH@ 12
------------------------------------INS NullLiteral@@null @TO@ ReturnStatement@@NullLiteral:null @AT@ 8686 @LENGTH@ 4
------------------------INS SimpleName@@asyncJob @TO@ VariableDeclarationFragment@@asyncJob=CompletableFuture.runAsync(ThrowingRunnable.unchecked(() -> clean(compactionInfo,cleanerWaterMark,metricsEnabled)),cleanerExecutor).exceptionally(t -> {
  LOG.error("Error during the cleaning the table {} / partition {}",tableName,partition,t);
  return null;
}
) @AT@ 8277 @LENGTH@ 8
---------UPD CatchClause@@catch (Throwable t) {  if (metricsEnabled && handle != null) {    failuresCounter.inc();  }  LOG.error("Caught an exception in the main loop of compactor cleaner, " + StringUtils.stringifyException(t));} @TO@ catch (Throwable t) {  LOG.error("Caught an exception in the main loop of compactor cleaner, " + StringUtils.stringifyException(t));} @AT@ 8402 @LENGTH@ 328
------------DEL IfStatement@@if (metricsEnabled && handle != null) {  failuresCounter.inc();} @AT@ 8496 @LENGTH@ 86
---------------DEL InfixExpression@@metricsEnabled && handle != null @AT@ 8500 @LENGTH@ 32
------------------DEL SimpleName@@metricsEnabled @AT@ 8500 @LENGTH@ 14
------------------DEL Operator@@&& @AT@ 8514 @LENGTH@ 2
------------------DEL InfixExpression@@handle != null @AT@ 8518 @LENGTH@ 14
---------------------DEL SimpleName@@handle @AT@ 8518 @LENGTH@ 6
---------------------DEL Operator@@!= @AT@ 8524 @LENGTH@ 2
---------------------DEL NullLiteral@@null @AT@ 8528 @LENGTH@ 4
---------------DEL Block@@ThenBody:{  failuresCounter.inc();} @AT@ 8534 @LENGTH@ 48
------------------DEL ExpressionStatement@@MethodInvocation:failuresCounter.inc() @AT@ 8548 @LENGTH@ 22
---------------------DEL MethodInvocation@@failuresCounter.inc() @AT@ 8548 @LENGTH@ 21
------------------------DEL SimpleName@@Name:failuresCounter @AT@ 8548 @LENGTH@ 15
------------------------DEL SimpleName@@MethodName:inc:[] @AT@ 8564 @LENGTH@ 5


UPD ExpressionStatement@@MethodInvocation:assertThatIllegalStateException().isThrownBy(() -> this.decoder.decode(this.messageReadToken).block()).withStackTraceContaining(UnknownHostException.class.getName()) @TO@ MethodInvocation:assertThatIllegalStateException().isThrownBy(() -> this.decoder.decode(this.messageReadToken).block()).withStackTraceContaining(UnknownHostException.class.getSimpleName()) @AT@ 7126 @LENGTH@ 176
---UPD MethodInvocation@@assertThatIllegalStateException().isThrownBy(() -> this.decoder.decode(this.messageReadToken).block()).withStackTraceContaining(UnknownHostException.class.getName()) @TO@ assertThatIllegalStateException().isThrownBy(() -> this.decoder.decode(this.messageReadToken).block()).withStackTraceContaining(UnknownHostException.class.getSimpleName()) @AT@ 7126 @LENGTH@ 175
------UPD SimpleName@@MethodName:withStackTraceContaining:[UnknownHostException.class.getName()] @TO@ MethodName:withStackTraceContaining:[UnknownHostException.class.getSimpleName()] @AT@ 7239 @LENGTH@ 62
---------UPD MethodInvocation@@UnknownHostException.class.getName() @TO@ UnknownHostException.class.getSimpleName() @AT@ 7264 @LENGTH@ 36
------------UPD SimpleName@@MethodName:getName:[] @TO@ MethodName:getSimpleName:[] @AT@ 7291 @LENGTH@ 9


INS TryStatement@@try (AutoCloseable closeable=MockitoAnnotations.openMocks(this)){  super.setUp();}  @TO@ MethodDeclaration@@public, void, MethodName:setUp, Exception,  @AT@ 2397 @LENGTH@ 105
---INS VariableDeclarationExpression@@AutoCloseable closeable=MockitoAnnotations.openMocks(this) @TO@ TryStatement@@try (AutoCloseable closeable=MockitoAnnotations.openMocks(this)){  super.setUp();}  @AT@ 2402 @LENGTH@ 60
------INS SimpleType@@AutoCloseable @TO@ VariableDeclarationExpression@@AutoCloseable closeable=MockitoAnnotations.openMocks(this) @AT@ 2402 @LENGTH@ 13
------INS VariableDeclarationFragment@@closeable=MockitoAnnotations.openMocks(this) @TO@ VariableDeclarationExpression@@AutoCloseable closeable=MockitoAnnotations.openMocks(this) @AT@ 2416 @LENGTH@ 46
---------INS SimpleName@@closeable @TO@ VariableDeclarationFragment@@closeable=MockitoAnnotations.openMocks(this) @AT@ 2416 @LENGTH@ 9
---------INS MethodInvocation@@MockitoAnnotations.openMocks(this) @TO@ VariableDeclarationFragment@@closeable=MockitoAnnotations.openMocks(this) @AT@ 2428 @LENGTH@ 34
------------MOV SimpleName@@Name:MockitoAnnotations @TO@ MethodInvocation@@MockitoAnnotations.openMocks(this) @AT@ 2397 @LENGTH@ 18
------------MOV SimpleName@@MethodName:initMocks:[this] @TO@ MethodInvocation@@MockitoAnnotations.openMocks(this) @AT@ 2416 @LENGTH@ 15
---MOV ExpressionStatement@@SuperMethodInvocation:super.setUp() @TO@ TryStatement@@try (AutoCloseable closeable=MockitoAnnotations.openMocks(this)){  super.setUp();}  @AT@ 2441 @LENGTH@ 14


INS MethodDeclaration@@public, void, MethodName:writeHeadersWhenHeaderWrittenWithDifferentCaseThenDoesNotWriteHeaders,  @TO@ TypeDeclaration@@[public]StaticServerHttpHeadersWriterTests,  @AT@ 2264 @LENGTH@ 1042
---INS Modifier@@public @TO@ MethodDeclaration@@public, void, MethodName:writeHeadersWhenHeaderWrittenWithDifferentCaseThenDoesNotWriteHeaders,  @AT@ 2264 @LENGTH@ 6
---INS PrimitiveType@@void @TO@ MethodDeclaration@@public, void, MethodName:writeHeadersWhenHeaderWrittenWithDifferentCaseThenDoesNotWriteHeaders,  @AT@ 2271 @LENGTH@ 4
---INS SimpleName@@MethodName:writeHeadersWhenHeaderWrittenWithDifferentCaseThenDoesNotWriteHeaders @TO@ MethodDeclaration@@public, void, MethodName:writeHeadersWhenHeaderWrittenWithDifferentCaseThenDoesNotWriteHeaders,  @AT@ 2276 @LENGTH@ 69
---INS VariableDeclarationStatement@@String headerName=HttpHeaders.CACHE_CONTROL.toLowerCase(Locale.ROOT); @TO@ MethodDeclaration@@public, void, MethodName:writeHeadersWhenHeaderWrittenWithDifferentCaseThenDoesNotWriteHeaders,  @AT@ 2352 @LENGTH@ 71
------INS SimpleType@@String @TO@ VariableDeclarationStatement@@String headerName=HttpHeaders.CACHE_CONTROL.toLowerCase(Locale.ROOT); @AT@ 2352 @LENGTH@ 6
------INS VariableDeclarationFragment@@headerName=HttpHeaders.CACHE_CONTROL.toLowerCase(Locale.ROOT) @TO@ VariableDeclarationStatement@@String headerName=HttpHeaders.CACHE_CONTROL.toLowerCase(Locale.ROOT); @AT@ 2359 @LENGTH@ 63
---------INS SimpleName@@headerName @TO@ VariableDeclarationFragment@@headerName=HttpHeaders.CACHE_CONTROL.toLowerCase(Locale.ROOT) @AT@ 2359 @LENGTH@ 10
---------INS MethodInvocation@@HttpHeaders.CACHE_CONTROL.toLowerCase(Locale.ROOT) @TO@ VariableDeclarationFragment@@headerName=HttpHeaders.CACHE_CONTROL.toLowerCase(Locale.ROOT) @AT@ 2372 @LENGTH@ 50
------------INS QualifiedName@@Name:HttpHeaders.CACHE_CONTROL @TO@ MethodInvocation@@HttpHeaders.CACHE_CONTROL.toLowerCase(Locale.ROOT) @AT@ 2372 @LENGTH@ 25
------------INS SimpleName@@MethodName:toLowerCase:[Locale.ROOT] @TO@ MethodInvocation@@HttpHeaders.CACHE_CONTROL.toLowerCase(Locale.ROOT) @AT@ 2398 @LENGTH@ 24
---------------INS QualifiedName@@Locale.ROOT @TO@ SimpleName@@MethodName:toLowerCase:[Locale.ROOT] @AT@ 2410 @LENGTH@ 11
------------------INS SimpleName@@Locale @TO@ QualifiedName@@Locale.ROOT @AT@ 2410 @LENGTH@ 6
------------------INS SimpleName@@ROOT @TO@ QualifiedName@@Locale.ROOT @AT@ 2417 @LENGTH@ 4
---INS VariableDeclarationStatement@@String headerValue="max-age=120"; @TO@ MethodDeclaration@@public, void, MethodName:writeHeadersWhenHeaderWrittenWithDifferentCaseThenDoesNotWriteHeaders,  @AT@ 2426 @LENGTH@ 35
------INS SimpleType@@String @TO@ VariableDeclarationStatement@@String headerValue="max-age=120"; @AT@ 2426 @LENGTH@ 6
------INS VariableDeclarationFragment@@headerValue="max-age=120" @TO@ VariableDeclarationStatement@@String headerValue="max-age=120"; @AT@ 2433 @LENGTH@ 27
---------INS SimpleName@@headerValue @TO@ VariableDeclarationFragment@@headerValue="max-age=120" @AT@ 2433 @LENGTH@ 11
---------INS StringLiteral@@"max-age=120" @TO@ VariableDeclarationFragment@@headerValue="max-age=120" @AT@ 2447 @LENGTH@ 13
---INS ExpressionStatement@@MethodInvocation:this.headers.set(headerName,headerValue) @TO@ MethodDeclaration@@public, void, MethodName:writeHeadersWhenHeaderWrittenWithDifferentCaseThenDoesNotWriteHeaders,  @AT@ 2464 @LENGTH@ 42
------INS MethodInvocation@@this.headers.set(headerName,headerValue) @TO@ ExpressionStatement@@MethodInvocation:this.headers.set(headerName,headerValue) @AT@ 2464 @LENGTH@ 41
---------INS FieldAccess@@this.headers @TO@ MethodInvocation@@this.headers.set(headerName,headerValue) @AT@ 2464 @LENGTH@ 12
------------INS ThisExpression@@this @TO@ FieldAccess@@this.headers @AT@ 2464 @LENGTH@ 4
------------INS SimpleName@@headers @TO@ FieldAccess@@this.headers @AT@ 2469 @LENGTH@ 7
---------INS SimpleName@@MethodName:set:[headerName, headerValue] @TO@ MethodInvocation@@this.headers.set(headerName,headerValue) @AT@ 2477 @LENGTH@ 28
------------INS SimpleName@@headerName @TO@ SimpleName@@MethodName:set:[headerName, headerValue] @AT@ 2481 @LENGTH@ 10
------------INS SimpleName@@headerValue @TO@ SimpleName@@MethodName:set:[headerName, headerValue] @AT@ 2493 @LENGTH@ 11
---INS VariableDeclarationStatement@@HttpHeaders caseSensitiveHeaders=new HttpHeaders(new LinkedMultiValueMap<>()); @TO@ MethodDeclaration@@public, void, MethodName:writeHeadersWhenHeaderWrittenWithDifferentCaseThenDoesNotWriteHeaders,  @AT@ 2722 @LENGTH@ 80
------INS SimpleType@@HttpHeaders @TO@ VariableDeclarationStatement@@HttpHeaders caseSensitiveHeaders=new HttpHeaders(new LinkedMultiValueMap<>()); @AT@ 2722 @LENGTH@ 11
------INS VariableDeclarationFragment@@caseSensitiveHeaders=new HttpHeaders(new LinkedMultiValueMap<>()) @TO@ VariableDeclarationStatement@@HttpHeaders caseSensitiveHeaders=new HttpHeaders(new LinkedMultiValueMap<>()); @AT@ 2734 @LENGTH@ 67
---------INS SimpleName@@caseSensitiveHeaders @TO@ VariableDeclarationFragment@@caseSensitiveHeaders=new HttpHeaders(new LinkedMultiValueMap<>()) @AT@ 2734 @LENGTH@ 20
---------INS ClassInstanceCreation@@HttpHeaders[new LinkedMultiValueMap<>()] @TO@ VariableDeclarationFragment@@caseSensitiveHeaders=new HttpHeaders(new LinkedMultiValueMap<>()) @AT@ 2757 @LENGTH@ 44
------------INS New@@new @TO@ ClassInstanceCreation@@HttpHeaders[new LinkedMultiValueMap<>()] @AT@ 2757 @LENGTH@ 3
------------INS SimpleType@@HttpHeaders @TO@ ClassInstanceCreation@@HttpHeaders[new LinkedMultiValueMap<>()] @AT@ 2761 @LENGTH@ 11
------------INS ClassInstanceCreation@@LinkedMultiValueMap<>[] @TO@ ClassInstanceCreation@@HttpHeaders[new LinkedMultiValueMap<>()] @AT@ 2773 @LENGTH@ 27
---------------INS New@@new @TO@ ClassInstanceCreation@@LinkedMultiValueMap<>[] @AT@ 2773 @LENGTH@ 3
---------------INS ParameterizedType@@LinkedMultiValueMap<> @TO@ ClassInstanceCreation@@LinkedMultiValueMap<>[] @AT@ 2777 @LENGTH@ 21
------------------INS SimpleType@@LinkedMultiValueMap @TO@ ParameterizedType@@LinkedMultiValueMap<> @AT@ 2777 @LENGTH@ 19
---INS ExpressionStatement@@MethodInvocation:caseSensitiveHeaders.set(HttpHeaders.CACHE_CONTROL,CacheControlServerHttpHeadersWriter.CACHE_CONTRTOL_VALUE) @TO@ MethodDeclaration@@public, void, MethodName:writeHeadersWhenHeaderWrittenWithDifferentCaseThenDoesNotWriteHeaders,  @AT@ 2805 @LENGTH@ 110
------INS MethodInvocation@@caseSensitiveHeaders.set(HttpHeaders.CACHE_CONTROL,CacheControlServerHttpHeadersWriter.CACHE_CONTRTOL_VALUE) @TO@ ExpressionStatement@@MethodInvocation:caseSensitiveHeaders.set(HttpHeaders.CACHE_CONTROL,CacheControlServerHttpHeadersWriter.CACHE_CONTRTOL_VALUE) @AT@ 2805 @LENGTH@ 109
---------INS SimpleName@@Name:caseSensitiveHeaders @TO@ MethodInvocation@@caseSensitiveHeaders.set(HttpHeaders.CACHE_CONTROL,CacheControlServerHttpHeadersWriter.CACHE_CONTRTOL_VALUE) @AT@ 2805 @LENGTH@ 20
---------INS SimpleName@@MethodName:set:[HttpHeaders.CACHE_CONTROL, CacheControlServerHttpHeadersWriter.CACHE_CONTRTOL_VALUE] @TO@ MethodInvocation@@caseSensitiveHeaders.set(HttpHeaders.CACHE_CONTROL,CacheControlServerHttpHeadersWriter.CACHE_CONTRTOL_VALUE) @AT@ 2826 @LENGTH@ 88
------------INS QualifiedName@@HttpHeaders.CACHE_CONTROL @TO@ SimpleName@@MethodName:set:[HttpHeaders.CACHE_CONTROL, CacheControlServerHttpHeadersWriter.CACHE_CONTRTOL_VALUE] @AT@ 2830 @LENGTH@ 25
---------------INS SimpleName@@HttpHeaders @TO@ QualifiedName@@HttpHeaders.CACHE_CONTROL @AT@ 2830 @LENGTH@ 11
---------------INS SimpleName@@CACHE_CONTROL @TO@ QualifiedName@@HttpHeaders.CACHE_CONTROL @AT@ 2842 @LENGTH@ 13
------------INS QualifiedName@@CacheControlServerHttpHeadersWriter.CACHE_CONTRTOL_VALUE @TO@ SimpleName@@MethodName:set:[HttpHeaders.CACHE_CONTROL, CacheControlServerHttpHeadersWriter.CACHE_CONTRTOL_VALUE] @AT@ 2857 @LENGTH@ 56
---------------INS SimpleName@@CacheControlServerHttpHeadersWriter @TO@ QualifiedName@@CacheControlServerHttpHeadersWriter.CACHE_CONTRTOL_VALUE @AT@ 2857 @LENGTH@ 35
---------------INS SimpleName@@CACHE_CONTRTOL_VALUE @TO@ QualifiedName@@CacheControlServerHttpHeadersWriter.CACHE_CONTRTOL_VALUE @AT@ 2893 @LENGTH@ 20
---INS ExpressionStatement@@MethodInvocation:caseSensitiveHeaders.set(HttpHeaders.PRAGMA,CacheControlServerHttpHeadersWriter.PRAGMA_VALUE) @TO@ MethodDeclaration@@public, void, MethodName:writeHeadersWhenHeaderWrittenWithDifferentCaseThenDoesNotWriteHeaders,  @AT@ 2918 @LENGTH@ 95
------INS MethodInvocation@@caseSensitiveHeaders.set(HttpHeaders.PRAGMA,CacheControlServerHttpHeadersWriter.PRAGMA_VALUE) @TO@ ExpressionStatement@@MethodInvocation:caseSensitiveHeaders.set(HttpHeaders.PRAGMA,CacheControlServerHttpHeadersWriter.PRAGMA_VALUE) @AT@ 2918 @LENGTH@ 94
---------INS SimpleName@@Name:caseSensitiveHeaders @TO@ MethodInvocation@@caseSensitiveHeaders.set(HttpHeaders.PRAGMA,CacheControlServerHttpHeadersWriter.PRAGMA_VALUE) @AT@ 2918 @LENGTH@ 20
---------INS SimpleName@@MethodName:set:[HttpHeaders.PRAGMA, CacheControlServerHttpHeadersWriter.PRAGMA_VALUE] @TO@ MethodInvocation@@caseSensitiveHeaders.set(HttpHeaders.PRAGMA,CacheControlServerHttpHeadersWriter.PRAGMA_VALUE) @AT@ 2939 @LENGTH@ 73
------------INS QualifiedName@@HttpHeaders.PRAGMA @TO@ SimpleName@@MethodName:set:[HttpHeaders.PRAGMA, CacheControlServerHttpHeadersWriter.PRAGMA_VALUE] @AT@ 2943 @LENGTH@ 18
---------------INS SimpleName@@HttpHeaders @TO@ QualifiedName@@HttpHeaders.PRAGMA @AT@ 2943 @LENGTH@ 11
---------------INS SimpleName@@PRAGMA @TO@ QualifiedName@@HttpHeaders.PRAGMA @AT@ 2955 @LENGTH@ 6
------------INS QualifiedName@@CacheControlServerHttpHeadersWriter.PRAGMA_VALUE @TO@ SimpleName@@MethodName:set:[HttpHeaders.PRAGMA, CacheControlServerHttpHeadersWriter.PRAGMA_VALUE] @AT@ 2963 @LENGTH@ 48
---------------INS SimpleName@@CacheControlServerHttpHeadersWriter @TO@ QualifiedName@@CacheControlServerHttpHeadersWriter.PRAGMA_VALUE @AT@ 2963 @LENGTH@ 35
---------------INS SimpleName@@PRAGMA_VALUE @TO@ QualifiedName@@CacheControlServerHttpHeadersWriter.PRAGMA_VALUE @AT@ 2999 @LENGTH@ 12
---INS ExpressionStatement@@MethodInvocation:caseSensitiveHeaders.set(HttpHeaders.EXPIRES,CacheControlServerHttpHeadersWriter.EXPIRES_VALUE) @TO@ MethodDeclaration@@public, void, MethodName:writeHeadersWhenHeaderWrittenWithDifferentCaseThenDoesNotWriteHeaders,  @AT@ 3016 @LENGTH@ 97
------INS MethodInvocation@@caseSensitiveHeaders.set(HttpHeaders.EXPIRES,CacheControlServerHttpHeadersWriter.EXPIRES_VALUE) @TO@ ExpressionStatement@@MethodInvocation:caseSensitiveHeaders.set(HttpHeaders.EXPIRES,CacheControlServerHttpHeadersWriter.EXPIRES_VALUE) @AT@ 3016 @LENGTH@ 96
---------INS SimpleName@@Name:caseSensitiveHeaders @TO@ MethodInvocation@@caseSensitiveHeaders.set(HttpHeaders.EXPIRES,CacheControlServerHttpHeadersWriter.EXPIRES_VALUE) @AT@ 3016 @LENGTH@ 20
---------INS SimpleName@@MethodName:set:[HttpHeaders.EXPIRES, CacheControlServerHttpHeadersWriter.EXPIRES_VALUE] @TO@ MethodInvocation@@caseSensitiveHeaders.set(HttpHeaders.EXPIRES,CacheControlServerHttpHeadersWriter.EXPIRES_VALUE) @AT@ 3037 @LENGTH@ 75
------------INS QualifiedName@@HttpHeaders.EXPIRES @TO@ SimpleName@@MethodName:set:[HttpHeaders.EXPIRES, CacheControlServerHttpHeadersWriter.EXPIRES_VALUE] @AT@ 3041 @LENGTH@ 19
---------------INS SimpleName@@HttpHeaders @TO@ QualifiedName@@HttpHeaders.EXPIRES @AT@ 3041 @LENGTH@ 11
---------------INS SimpleName@@EXPIRES @TO@ QualifiedName@@HttpHeaders.EXPIRES @AT@ 3053 @LENGTH@ 7
------------INS QualifiedName@@CacheControlServerHttpHeadersWriter.EXPIRES_VALUE @TO@ SimpleName@@MethodName:set:[HttpHeaders.EXPIRES, CacheControlServerHttpHeadersWriter.EXPIRES_VALUE] @AT@ 3062 @LENGTH@ 49
---------------INS SimpleName@@CacheControlServerHttpHeadersWriter @TO@ QualifiedName@@CacheControlServerHttpHeadersWriter.EXPIRES_VALUE @AT@ 3062 @LENGTH@ 35
---------------INS SimpleName@@EXPIRES_VALUE @TO@ QualifiedName@@CacheControlServerHttpHeadersWriter.EXPIRES_VALUE @AT@ 3098 @LENGTH@ 13
---INS ExpressionStatement@@Assignment:this.writer=new StaticServerHttpHeadersWriter(caseSensitiveHeaders) @TO@ MethodDeclaration@@public, void, MethodName:writeHeadersWhenHeaderWrittenWithDifferentCaseThenDoesNotWriteHeaders,  @AT@ 3116 @LENGTH@ 70
------INS Assignment@@this.writer=new StaticServerHttpHeadersWriter(caseSensitiveHeaders) @TO@ ExpressionStatement@@Assignment:this.writer=new StaticServerHttpHeadersWriter(caseSensitiveHeaders) @AT@ 3116 @LENGTH@ 69
---------INS FieldAccess@@this.writer @TO@ Assignment@@this.writer=new StaticServerHttpHeadersWriter(caseSensitiveHeaders) @AT@ 3116 @LENGTH@ 11
------------INS ThisExpression@@this @TO@ FieldAccess@@this.writer @AT@ 3116 @LENGTH@ 4
------------INS SimpleName@@writer @TO@ FieldAccess@@this.writer @AT@ 3121 @LENGTH@ 6
---------INS Operator@@= @TO@ Assignment@@this.writer=new StaticServerHttpHeadersWriter(caseSensitiveHeaders) @AT@ 3127 @LENGTH@ 1
---------INS ClassInstanceCreation@@StaticServerHttpHeadersWriter[caseSensitiveHeaders] @TO@ Assignment@@this.writer=new StaticServerHttpHeadersWriter(caseSensitiveHeaders) @AT@ 3130 @LENGTH@ 55
------------INS New@@new @TO@ ClassInstanceCreation@@StaticServerHttpHeadersWriter[caseSensitiveHeaders] @AT@ 3130 @LENGTH@ 3
------------INS SimpleType@@StaticServerHttpHeadersWriter @TO@ ClassInstanceCreation@@StaticServerHttpHeadersWriter[caseSensitiveHeaders] @AT@ 3134 @LENGTH@ 29
------------INS SimpleName@@caseSensitiveHeaders @TO@ ClassInstanceCreation@@StaticServerHttpHeadersWriter[caseSensitiveHeaders] @AT@ 3164 @LENGTH@ 20
---INS ExpressionStatement@@MethodInvocation:this.writer.writeHttpHeaders(this.exchange) @TO@ MethodDeclaration@@public, void, MethodName:writeHeadersWhenHeaderWrittenWithDifferentCaseThenDoesNotWriteHeaders,  @AT@ 3189 @LENGTH@ 44
------INS MethodInvocation@@this.writer.writeHttpHeaders(this.exchange) @TO@ ExpressionStatement@@MethodInvocation:this.writer.writeHttpHeaders(this.exchange) @AT@ 3189 @LENGTH@ 43
---------INS FieldAccess@@this.writer @TO@ MethodInvocation@@this.writer.writeHttpHeaders(this.exchange) @AT@ 3189 @LENGTH@ 11
------------INS ThisExpression@@this @TO@ FieldAccess@@this.writer @AT@ 3189 @LENGTH@ 4
------------INS SimpleName@@writer @TO@ FieldAccess@@this.writer @AT@ 3194 @LENGTH@ 6
---------INS SimpleName@@MethodName:writeHttpHeaders:[this.exchange] @TO@ MethodInvocation@@this.writer.writeHttpHeaders(this.exchange) @AT@ 3201 @LENGTH@ 31
------------INS FieldAccess@@this.exchange @TO@ SimpleName@@MethodName:writeHttpHeaders:[this.exchange] @AT@ 3218 @LENGTH@ 13
---------------INS ThisExpression@@this @TO@ FieldAccess@@this.exchange @AT@ 3218 @LENGTH@ 4
---------------INS SimpleName@@exchange @TO@ FieldAccess@@this.exchange @AT@ 3223 @LENGTH@ 8
---INS ExpressionStatement@@MethodInvocation:assertThat(this.headers.get(headerName)).containsOnly(headerValue) @TO@ MethodDeclaration@@public, void, MethodName:writeHeadersWhenHeaderWrittenWithDifferentCaseThenDoesNotWriteHeaders,  @AT@ 3236 @LENGTH@ 67
------INS MethodInvocation@@assertThat(this.headers.get(headerName)).containsOnly(headerValue) @TO@ ExpressionStatement@@MethodInvocation:assertThat(this.headers.get(headerName)).containsOnly(headerValue) @AT@ 3236 @LENGTH@ 66
---------INS MethodInvocation@@MethodName:assertThat:[this.headers.get(headerName)] @TO@ MethodInvocation@@assertThat(this.headers.get(headerName)).containsOnly(headerValue) @AT@ 3236 @LENGTH@ 40
------------INS MethodInvocation@@this.headers.get(headerName) @TO@ MethodInvocation@@MethodName:assertThat:[this.headers.get(headerName)] @AT@ 3247 @LENGTH@ 28
---------------INS FieldAccess@@this.headers @TO@ MethodInvocation@@this.headers.get(headerName) @AT@ 3247 @LENGTH@ 12
------------------INS ThisExpression@@this @TO@ FieldAccess@@this.headers @AT@ 3247 @LENGTH@ 4
------------------INS SimpleName@@headers @TO@ FieldAccess@@this.headers @AT@ 3252 @LENGTH@ 7
---------------INS SimpleName@@MethodName:get:[headerName] @TO@ MethodInvocation@@this.headers.get(headerName) @AT@ 3260 @LENGTH@ 15
------------------INS SimpleName@@headerName @TO@ SimpleName@@MethodName:get:[headerName] @AT@ 3264 @LENGTH@ 10
---------INS SimpleName@@MethodName:containsOnly:[headerValue] @TO@ MethodInvocation@@assertThat(this.headers.get(headerName)).containsOnly(headerValue) @AT@ 3277 @LENGTH@ 25
------------INS SimpleName@@headerValue @TO@ SimpleName@@MethodName:containsOnly:[headerValue] @AT@ 3290 @LENGTH@ 11


UPD ReturnStatement@@MethodInvocation:new CompletionProposal(command).dontQuote(true).category("Available commands").description(registration.getHelp()) @TO@ MethodInvocation:new CompletionProposal(command).dontQuote(true).category("Available commands").description(registration.getDescription()) @AT@ 9140 @LENGTH@ 137
---UPD MethodInvocation@@new CompletionProposal(command).dontQuote(true).category("Available commands").description(registration.getHelp()) @TO@ new CompletionProposal(command).dontQuote(true).category("Available commands").description(registration.getDescription()) @AT@ 9147 @LENGTH@ 129
------UPD SimpleName@@MethodName:description:[registration.getHelp()] @TO@ MethodName:description:[registration.getDescription()] @AT@ 9241 @LENGTH@ 35
---------UPD MethodInvocation@@registration.getHelp() @TO@ registration.getDescription() @AT@ 9253 @LENGTH@ 22
------------UPD SimpleName@@MethodName:getHelp:[] @TO@ MethodName:getDescription:[] @AT@ 9266 @LENGTH@ 9


UPD ExpressionStatement@@MethodInvocation:e.getOut().setBody(-i) @TO@ MethodInvocation:e.getMessage().setBody(-i) @AT@ 7870 @LENGTH@ 23
---UPD MethodInvocation@@e.getOut().setBody(-i) @TO@ e.getMessage().setBody(-i) @AT@ 7870 @LENGTH@ 22
------UPD MethodInvocation@@MethodName:getOut:[] @TO@ MethodName:getMessage:[] @AT@ 7870 @LENGTH@ 10


UPD ExpressionStatement@@MethodInvocation:assertThat(matcher.matches(createRequest("/paskos/bleh/"))).isTrue() @TO@ MethodInvocation:assertThat(matcher.matches(createRequest("/paskos/bleh/"))).isFalse() @AT@ 4347 @LENGTH@ 69
---UPD MethodInvocation@@assertThat(matcher.matches(createRequest("/paskos/bleh/"))).isTrue() @TO@ assertThat(matcher.matches(createRequest("/paskos/bleh/"))).isFalse() @AT@ 4347 @LENGTH@ 68
------UPD SimpleName@@MethodName:isTrue:[] @TO@ MethodName:isFalse:[] @AT@ 4407 @LENGTH@ 8


INS IfStatement@@if (maxDuration == UNLIMITED_DURATION) {  return true;} @TO@ MethodDeclaration@@public, boolean, MethodName:canContinue,  @AT@ 1833 @LENGTH@ 75
---INS InfixExpression@@maxDuration == UNLIMITED_DURATION @TO@ IfStatement@@if (maxDuration == UNLIMITED_DURATION) {  return true;} @AT@ 1837 @LENGTH@ 33
------INS SimpleName@@maxDuration @TO@ InfixExpression@@maxDuration == UNLIMITED_DURATION @AT@ 1837 @LENGTH@ 11
------INS Operator@@== @TO@ InfixExpression@@maxDuration == UNLIMITED_DURATION @AT@ 1848 @LENGTH@ 2
------INS SimpleName@@UNLIMITED_DURATION @TO@ InfixExpression@@maxDuration == UNLIMITED_DURATION @AT@ 1852 @LENGTH@ 18
---INS Block@@ThenBody:{  return true;} @TO@ IfStatement@@if (maxDuration == UNLIMITED_DURATION) {  return true;} @AT@ 1872 @LENGTH@ 36
------INS ReturnStatement@@BooleanLiteral:true @TO@ Block@@ThenBody:{  return true;} @AT@ 1886 @LENGTH@ 12
---------MOV BooleanLiteral@@true @TO@ ReturnStatement@@BooleanLiteral:true @AT@ 1937 @LENGTH@ 4


UPD ExpressionStatement@@MethodInvocation:exchange.getOut().copyFrom(exchange.getIn()) @TO@ MethodInvocation:exchange.getMessage().copyFrom(exchange.getIn()) @AT@ 1772 @LENGTH@ 45
---UPD MethodInvocation@@exchange.getOut().copyFrom(exchange.getIn()) @TO@ exchange.getMessage().copyFrom(exchange.getIn()) @AT@ 1772 @LENGTH@ 44
------UPD MethodInvocation@@MethodName:getOut:[] @TO@ MethodName:getMessage:[] @AT@ 1772 @LENGTH@ 17


UPD ExpressionStatement@@MethodInvocation:script.start("mask","--salt","12345678","--iteration","123","--secret","supersecretstorepassword") @TO@ MethodInvocation:script.start(MAVEN_JAVA_OPTS,"mask","--salt","12345678","--iteration","123","--secret","supersecretstorepassword") @AT@ 1250 @LENGTH@ 105
---UPD MethodInvocation@@script.start("mask","--salt","12345678","--iteration","123","--secret","supersecretstorepassword") @TO@ script.start(MAVEN_JAVA_OPTS,"mask","--salt","12345678","--iteration","123","--secret","supersecretstorepassword") @AT@ 1250 @LENGTH@ 104
------UPD SimpleName@@MethodName:start:["mask", "--salt", "12345678", "--iteration", "123", "--secret", "supersecretstorepassword"] @TO@ MethodName:start:[MAVEN_JAVA_OPTS, "mask", "--salt", "12345678", "--iteration", "123", "--secret", "supersecretstorepassword"] @AT@ 1257 @LENGTH@ 97
---------INS SimpleName@@MAVEN_JAVA_OPTS @TO@ SimpleName@@MethodName:start:["mask", "--salt", "12345678", "--iteration", "123", "--secret", "supersecretstorepassword"] @AT@ 1263 @LENGTH@ 15


INS MethodDeclaration@@List<String>, MethodName:findAllAndSortByFunctionResultNamedParameter, @Param("namedParameter1") String namedParameter1, @Param("namedParameter2") String namedParameter2, Sort sort,  @TO@ TypeDeclaration@@[public]UserRepository, [JpaRepository<User,Integer>, JpaSpecificationExecutor<User>, UserRepositoryCustom] @AT@ 22082 @LENGTH@ 159
---INS ParameterizedType@@List<String> @TO@ MethodDeclaration@@List<String>, MethodName:findAllAndSortByFunctionResultNamedParameter, @Param("namedParameter1") String namedParameter1, @Param("namedParameter2") String namedParameter2, Sort sort,  @AT@ 22069 @LENGTH@ 12
------INS SimpleType@@List @TO@ ParameterizedType@@List<String> @AT@ 22069 @LENGTH@ 4
------INS SimpleType@@String @TO@ ParameterizedType@@List<String> @AT@ 22074 @LENGTH@ 6
---INS SimpleName@@MethodName:findAllAndSortByFunctionResultNamedParameter @TO@ MethodDeclaration@@List<String>, MethodName:findAllAndSortByFunctionResultNamedParameter, @Param("namedParameter1") String namedParameter1, @Param("namedParameter2") String namedParameter2, Sort sort,  @AT@ 22082 @LENGTH@ 44
---INS SingleVariableDeclaration@@@Param("namedParameter1") String namedParameter1 @TO@ MethodDeclaration@@List<String>, MethodName:findAllAndSortByFunctionResultNamedParameter, @Param("namedParameter1") String namedParameter1, @Param("namedParameter2") String namedParameter2, Sort sort,  @AT@ 22127 @LENGTH@ 48
------INS SimpleType@@String @TO@ SingleVariableDeclaration@@@Param("namedParameter1") String namedParameter1 @AT@ 22153 @LENGTH@ 6
------INS SimpleName@@namedParameter1 @TO@ SingleVariableDeclaration@@@Param("namedParameter1") String namedParameter1 @AT@ 22160 @LENGTH@ 15
---INS SingleVariableDeclaration@@@Param("namedParameter2") String namedParameter2 @TO@ MethodDeclaration@@List<String>, MethodName:findAllAndSortByFunctionResultNamedParameter, @Param("namedParameter1") String namedParameter1, @Param("namedParameter2") String namedParameter2, Sort sort,  @AT@ 22180 @LENGTH@ 48
------INS SimpleType@@String @TO@ SingleVariableDeclaration@@@Param("namedParameter2") String namedParameter2 @AT@ 22206 @LENGTH@ 6
------INS SimpleName@@namedParameter2 @TO@ SingleVariableDeclaration@@@Param("namedParameter2") String namedParameter2 @AT@ 22213 @LENGTH@ 15
---INS SingleVariableDeclaration@@Sort sort @TO@ MethodDeclaration@@List<String>, MethodName:findAllAndSortByFunctionResultNamedParameter, @Param("namedParameter1") String namedParameter1, @Param("namedParameter2") String namedParameter2, Sort sort,  @AT@ 22230 @LENGTH@ 9
------INS SimpleType@@Sort @TO@ SingleVariableDeclaration@@Sort sort @AT@ 22230 @LENGTH@ 4
------INS SimpleName@@sort @TO@ SingleVariableDeclaration@@Sort sort @AT@ 22235 @LENGTH@ 4


UPD VariableDeclarationStatement@@final Object[] result=new Object[]{"uno","un","dos","deux","tres","trois"}; @TO@ final Object[] result={"uno","un","dos","deux","tres","trois"}; @AT@ 5128 @LENGTH@ 117
---UPD VariableDeclarationFragment@@result=new Object[]{"uno","un","dos","deux","tres","trois"} @TO@ result={"uno","un","dos","deux","tres","trois"} @AT@ 5143 @LENGTH@ 101
------INS ArrayInitializer@@{"uno","un","dos","deux","tres","trois"} @TO@ VariableDeclarationFragment@@result=new Object[]{"uno","un","dos","deux","tres","trois"} @AT@ 5139 @LENGTH@ 79
---------MOV StringLiteral@@"uno" @TO@ ArrayInitializer@@{"uno","un","dos","deux","tres","trois"} @AT@ 5179 @LENGTH@ 5
---------MOV StringLiteral@@"un" @TO@ ArrayInitializer@@{"uno","un","dos","deux","tres","trois"} @AT@ 5186 @LENGTH@ 4
---------MOV StringLiteral@@"dos" @TO@ ArrayInitializer@@{"uno","un","dos","deux","tres","trois"} @AT@ 5192 @LENGTH@ 5
---------MOV StringLiteral@@"deux" @TO@ ArrayInitializer@@{"uno","un","dos","deux","tres","trois"} @AT@ 5199 @LENGTH@ 6
---------MOV StringLiteral@@"tres" @TO@ ArrayInitializer@@{"uno","un","dos","deux","tres","trois"} @AT@ 5219 @LENGTH@ 6
---------MOV StringLiteral@@"trois" @TO@ ArrayInitializer@@{"uno","un","dos","deux","tres","trois"} @AT@ 5227 @LENGTH@ 7
------DEL ArrayCreation@@new Object[]{"uno","un","dos","deux","tres","trois"} @AT@ 5152 @LENGTH@ 92
---------DEL ArrayType@@Object[] @AT@ 5156 @LENGTH@ 8
------------DEL SimpleType@@Object @AT@ 5156 @LENGTH@ 6
---------DEL ArrayInitializer@@{"uno","un","dos","deux","tres","trois"} @AT@ 5165 @LENGTH@ 79


UPD ExpressionStatement@@MethodInvocation:from("kafka:" + TOPIC + "?groupId="+ TOPIC+ "_GROUP&autoCommitIntervalMs=1000"+ "&autoOffsetReset=earliest&consumersCount=1").routeId("resume-strategy-route").setHeader("CamelOffset",constant(Resumables.of("key",RANDOM_VALUE))).resumable().header("CamelOffset").resumableStrategyRef("resumeStrategy").to("mock:result") @TO@ MethodInvocation:from("kafka:" + TOPIC + "?groupId="+ TOPIC+ "_GROUP&autoCommitIntervalMs=1000"+ "&autoOffsetReset=earliest&consumersCount=1").routeId("resume-strategy-route").setHeader(Exchange.OFFSET,constant(Resumables.of("key",RANDOM_VALUE))).resumable().resumableStrategyRef("resumeStrategy").to("mock:result") @AT@ 8107 @LENGTH@ 502
---UPD MethodInvocation@@from("kafka:" + TOPIC + "?groupId="+ TOPIC+ "_GROUP&autoCommitIntervalMs=1000"+ "&autoOffsetReset=earliest&consumersCount=1").routeId("resume-strategy-route").setHeader("CamelOffset",constant(Resumables.of("key",RANDOM_VALUE))).resumable().header("CamelOffset").resumableStrategyRef("resumeStrategy").to("mock:result") @TO@ from("kafka:" + TOPIC + "?groupId="+ TOPIC+ "_GROUP&autoCommitIntervalMs=1000"+ "&autoOffsetReset=earliest&consumersCount=1").routeId("resume-strategy-route").setHeader(Exchange.OFFSET,constant(Resumables.of("key",RANDOM_VALUE))).resumable().resumableStrategyRef("resumeStrategy").to("mock:result") @AT@ 8107 @LENGTH@ 501
------DEL MethodInvocation@@MethodName:header:["CamelOffset"] @AT@ 8107 @LENGTH@ 414
---------DEL StringLiteral@@"CamelOffset" @AT@ 8507 @LENGTH@ 13
------UPD MethodInvocation@@MethodName:setHeader:["CamelOffset", constant(Resumables.of("key",RANDOM_VALUE))] @TO@ MethodName:setHeader:[Exchange.OFFSET, constant(Resumables.of("key",RANDOM_VALUE))] @AT@ 8107 @LENGTH@ 350
---------DEL StringLiteral@@"CamelOffset" @AT@ 8360 @LENGTH@ 13
---------INS QualifiedName@@Exchange.OFFSET @TO@ MethodInvocation@@MethodName:setHeader:["CamelOffset", constant(Resumables.of("key",RANDOM_VALUE))] @AT@ 8394 @LENGTH@ 15
------------INS SimpleName@@Exchange @TO@ QualifiedName@@Exchange.OFFSET @AT@ 8394 @LENGTH@ 8
------------INS SimpleName@@OFFSET @TO@ QualifiedName@@Exchange.OFFSET @AT@ 8403 @LENGTH@ 6


UPD MethodDeclaration@@public, Help, MethodName:help,  @TO@ public, Help, MethodName:help, SpringShellProperties properties,  @AT@ 2555 @LENGTH@ 44
---DEL ReturnStatement@@ClassInstanceCreation:new Help() @AT@ 2578 @LENGTH@ 18
------DEL ClassInstanceCreation@@Help[] @AT@ 2585 @LENGTH@ 10
---INS SingleVariableDeclaration@@SpringShellProperties properties @TO@ MethodDeclaration@@public, Help, MethodName:help,  @AT@ 2658 @LENGTH@ 32
------INS SimpleType@@SpringShellProperties @TO@ SingleVariableDeclaration@@SpringShellProperties properties @AT@ 2658 @LENGTH@ 21
------INS SimpleName@@properties @TO@ SingleVariableDeclaration@@SpringShellProperties properties @AT@ 2680 @LENGTH@ 10
---INS VariableDeclarationStatement@@Help help=new Help(); @TO@ MethodDeclaration@@public, Help, MethodName:help,  @AT@ 2696 @LENGTH@ 23
------INS SimpleType@@Help @TO@ VariableDeclarationStatement@@Help help=new Help(); @AT@ 2696 @LENGTH@ 4
------INS VariableDeclarationFragment@@help=new Help() @TO@ VariableDeclarationStatement@@Help help=new Help(); @AT@ 2701 @LENGTH@ 17
---------INS SimpleName@@help @TO@ VariableDeclarationFragment@@help=new Help() @AT@ 2701 @LENGTH@ 4
---------INS ClassInstanceCreation@@Help[] @TO@ VariableDeclarationFragment@@help=new Help() @AT@ 2708 @LENGTH@ 10
------------MOV New@@new @TO@ ClassInstanceCreation@@Help[] @AT@ 2585 @LENGTH@ 3
------------MOV SimpleType@@Help @TO@ ClassInstanceCreation@@Help[] @AT@ 2589 @LENGTH@ 4
---INS IfStatement@@if (properties.getCommand().getHelp().getGroupingMode() == GroupingMode.FLAT) {  help.setShowGroups(false);} @TO@ MethodDeclaration@@public, Help, MethodName:help,  @AT@ 2722 @LENGTH@ 113
------INS InfixExpression@@properties.getCommand().getHelp().getGroupingMode() == GroupingMode.FLAT @TO@ IfStatement@@if (properties.getCommand().getHelp().getGroupingMode() == GroupingMode.FLAT) {  help.setShowGroups(false);} @AT@ 2726 @LENGTH@ 72
---------INS MethodInvocation@@properties.getCommand().getHelp().getGroupingMode() @TO@ InfixExpression@@properties.getCommand().getHelp().getGroupingMode() == GroupingMode.FLAT @AT@ 2726 @LENGTH@ 51
------------INS MethodInvocation@@MethodName:getHelp:[] @TO@ MethodInvocation@@properties.getCommand().getHelp().getGroupingMode() @AT@ 2726 @LENGTH@ 33
------------INS MethodInvocation@@MethodName:getCommand:[] @TO@ MethodInvocation@@properties.getCommand().getHelp().getGroupingMode() @AT@ 2726 @LENGTH@ 23
------------INS SimpleName@@Name:properties @TO@ MethodInvocation@@properties.getCommand().getHelp().getGroupingMode() @AT@ 2726 @LENGTH@ 10
------------INS SimpleName@@MethodName:getGroupingMode:[] @TO@ MethodInvocation@@properties.getCommand().getHelp().getGroupingMode() @AT@ 2760 @LENGTH@ 17
---------INS Operator@@== @TO@ InfixExpression@@properties.getCommand().getHelp().getGroupingMode() == GroupingMode.FLAT @AT@ 2777 @LENGTH@ 2
---------INS QualifiedName@@GroupingMode.FLAT @TO@ InfixExpression@@properties.getCommand().getHelp().getGroupingMode() == GroupingMode.FLAT @AT@ 2781 @LENGTH@ 17
------------INS SimpleName@@GroupingMode @TO@ QualifiedName@@GroupingMode.FLAT @AT@ 2781 @LENGTH@ 12
------------INS SimpleName@@FLAT @TO@ QualifiedName@@GroupingMode.FLAT @AT@ 2794 @LENGTH@ 4
------INS Block@@ThenBody:{  help.setShowGroups(false);} @TO@ IfStatement@@if (properties.getCommand().getHelp().getGroupingMode() == GroupingMode.FLAT) {  help.setShowGroups(false);} @AT@ 2800 @LENGTH@ 35
---------INS ExpressionStatement@@MethodInvocation:help.setShowGroups(false) @TO@ Block@@ThenBody:{  help.setShowGroups(false);} @AT@ 2805 @LENGTH@ 26
------------INS MethodInvocation@@help.setShowGroups(false) @TO@ ExpressionStatement@@MethodInvocation:help.setShowGroups(false) @AT@ 2805 @LENGTH@ 25
---------------INS SimpleName@@Name:help @TO@ MethodInvocation@@help.setShowGroups(false) @AT@ 2805 @LENGTH@ 4
---------------INS SimpleName@@MethodName:setShowGroups:[false] @TO@ MethodInvocation@@help.setShowGroups(false) @AT@ 2810 @LENGTH@ 20
------------------INS BooleanLiteral@@false @TO@ SimpleName@@MethodName:setShowGroups:[false] @AT@ 2824 @LENGTH@ 5
---INS ReturnStatement@@SimpleName:help @TO@ MethodDeclaration@@public, Help, MethodName:help,  @AT@ 2838 @LENGTH@ 12
------INS SimpleName@@help @TO@ ReturnStatement@@SimpleName:help @AT@ 2845 @LENGTH@ 4


UPD ExpressionStatement@@MethodInvocation:exchange.getOut().setBody("Bye " + body) @TO@ MethodInvocation:exchange.getMessage().setBody("Bye " + body) @AT@ 5085 @LENGTH@ 41
---UPD MethodInvocation@@exchange.getOut().setBody("Bye " + body) @TO@ exchange.getMessage().setBody("Bye " + body) @AT@ 5085 @LENGTH@ 40
------UPD MethodInvocation@@MethodName:getOut:[] @TO@ MethodName:getMessage:[] @AT@ 5085 @LENGTH@ 17


UPD VariableDeclarationStatement@@final String[] result=new String[]{"0","1","2"}; @TO@ final String[] result={"0","1","2"}; @AT@ 3014 @LENGTH@ 55
---UPD VariableDeclarationFragment@@result=new String[]{"0","1","2"} @TO@ result={"0","1","2"} @AT@ 3029 @LENGTH@ 39
------INS ArrayInitializer@@{"0","1","2"} @TO@ VariableDeclarationFragment@@result=new String[]{"0","1","2"} @AT@ 3025 @LENGTH@ 17
---------MOV StringLiteral@@"0" @TO@ ArrayInitializer@@{"0","1","2"} @AT@ 3053 @LENGTH@ 3
---------MOV StringLiteral@@"1" @TO@ ArrayInitializer@@{"0","1","2"} @AT@ 3058 @LENGTH@ 3
---------MOV StringLiteral@@"2" @TO@ ArrayInitializer@@{"0","1","2"} @AT@ 3063 @LENGTH@ 3
------DEL ArrayCreation@@new String[]{"0","1","2"} @AT@ 3038 @LENGTH@ 30
---------DEL ArrayType@@String[] @AT@ 3042 @LENGTH@ 8
------------DEL SimpleType@@String @AT@ 3042 @LENGTH@ 6
---------DEL ArrayInitializer@@{"0","1","2"} @AT@ 3051 @LENGTH@ 17


UPD ExpressionStatement@@MethodInvocation:assertTrue(sslContext instanceof OpenSslClientContext) @TO@ MethodInvocation:Assumptions.assumeTrue(sslContext instanceof OpenSslClientContext || sslContext instanceof JdkSslContext) @AT@ 3673 @LENGTH@ 55
---UPD MethodInvocation@@assertTrue(sslContext instanceof OpenSslClientContext) @TO@ Assumptions.assumeTrue(sslContext instanceof OpenSslClientContext || sslContext instanceof JdkSslContext) @AT@ 3673 @LENGTH@ 54
------UPD SimpleName@@MethodName:assertTrue:[sslContext instanceof OpenSslClientContext] @TO@ MethodName:assumeTrue:[sslContext instanceof OpenSslClientContext || sslContext instanceof JdkSslContext] @AT@ 3673 @LENGTH@ 54
---------DEL InstanceofExpression@@sslContext instanceof OpenSslClientContext @AT@ 3684 @LENGTH@ 42
---------INS InfixExpression@@sslContext instanceof OpenSslClientContext || sslContext instanceof JdkSslContext @TO@ SimpleName@@MethodName:assertTrue:[sslContext instanceof OpenSslClientContext] @AT@ 3722 @LENGTH@ 81
------------INS InstanceofExpression@@sslContext instanceof OpenSslClientContext @TO@ InfixExpression@@sslContext instanceof OpenSslClientContext || sslContext instanceof JdkSslContext @AT@ 3722 @LENGTH@ 42
---------------MOV SimpleName@@sslContext @TO@ InstanceofExpression@@sslContext instanceof OpenSslClientContext @AT@ 3684 @LENGTH@ 10
---------------MOV SimpleName@@sslContext @TO@ InstanceofExpression@@sslContext instanceof OpenSslClientContext @AT@ 3684 @LENGTH@ 10
---------------MOV Instanceof@@instanceof @TO@ InstanceofExpression@@sslContext instanceof OpenSslClientContext @AT@ 3695 @LENGTH@ 10
---------------MOV Instanceof@@instanceof @TO@ InstanceofExpression@@sslContext instanceof OpenSslClientContext @AT@ 3695 @LENGTH@ 10
---------------MOV SimpleType@@OpenSslClientContext @TO@ InstanceofExpression@@sslContext instanceof OpenSslClientContext @AT@ 3706 @LENGTH@ 20
---------------MOV SimpleType@@OpenSslClientContext @TO@ InstanceofExpression@@sslContext instanceof OpenSslClientContext @AT@ 3706 @LENGTH@ 20
------------INS Operator@@|| @TO@ InfixExpression@@sslContext instanceof OpenSslClientContext || sslContext instanceof JdkSslContext @AT@ 3764 @LENGTH@ 2
------------INS InstanceofExpression@@sslContext instanceof JdkSslContext @TO@ InfixExpression@@sslContext instanceof OpenSslClientContext || sslContext instanceof JdkSslContext @AT@ 3768 @LENGTH@ 35
---------------INS SimpleName@@sslContext @TO@ InstanceofExpression@@sslContext instanceof JdkSslContext @AT@ 3768 @LENGTH@ 10
---------------INS Instanceof@@instanceof @TO@ InstanceofExpression@@sslContext instanceof JdkSslContext @AT@ 3779 @LENGTH@ 10
---------------INS SimpleType@@JdkSslContext @TO@ InstanceofExpression@@sslContext instanceof JdkSslContext @AT@ 3790 @LENGTH@ 13
------INS SimpleName@@Name:Assumptions @TO@ MethodInvocation@@assertTrue(sslContext instanceof OpenSslClientContext) @AT@ 3699 @LENGTH@ 11


INS ExpressionStatement@@MethodInvocation:builder.up() @TO@ MethodDeclaration@@protected, void, MethodName:doCall, HealthCheckResultBuilder builder, Map<String,Object> options,  @AT@ 3432 @LENGTH@ 13
---INS MethodInvocation@@builder.up() @TO@ ExpressionStatement@@MethodInvocation:builder.up() @AT@ 3432 @LENGTH@ 12
------INS SimpleName@@Name:builder @TO@ MethodInvocation@@builder.up() @AT@ 3432 @LENGTH@ 7
------INS SimpleName@@MethodName:up:[] @TO@ MethodInvocation@@builder.up() @AT@ 3440 @LENGTH@ 4


UPD IfStatement@@if (instance.getMessageListener() instanceof AbstractAdaptableMessageListener) {  AbstractAdaptableMessageListener messageListener=(AbstractAdaptableMessageListener)instance.getMessageListener();  JavaUtils.INSTANCE.acceptIfNotNull(this.beforeSendReplyPostProcessors,messageListener::setBeforeSendReplyPostProcessors).acceptIfNotNull(this.retryTemplate,messageListener::setRetryTemplate).acceptIfCondition(this.retryTemplate != null && this.recoveryCallback != null,this.recoveryCallback,messageListener::setRecoveryCallback).acceptIfNotNull(this.defaultRequeueRejected,messageListener::setDefaultRequeueRejected).acceptIfNotNull(endpoint.getReplyPostProcessor(),messageListener::setReplyPostProcessor).acceptIfNotNull(endpoint.getReplyContentType(),messageListener::setReplyContentType);  messageListener.setConverterWinsContentType(endpoint.isConverterWinsContentType());} @TO@ if (iml instanceof AbstractAdaptableMessageListener) {  AbstractAdaptableMessageListener messageListener=(AbstractAdaptableMessageListener)iml;  JavaUtils.INSTANCE.acceptIfNotNull(this.beforeSendReplyPostProcessors,messageListener::setBeforeSendReplyPostProcessors).acceptIfNotNull(this.retryTemplate,messageListener::setRetryTemplate).acceptIfCondition(this.retryTemplate != null && this.recoveryCallback != null,this.recoveryCallback,messageListener::setRecoveryCallback).acceptIfNotNull(this.defaultRequeueRejected,messageListener::setDefaultRequeueRejected);  if (endpoint != null) {    JavaUtils.INSTANCE.acceptIfNotNull(endpoint.getReplyPostProcessor(),messageListener::setReplyPostProcessor).acceptIfNotNull(endpoint.getReplyContentType(),messageListener::setReplyContentType);  }  messageListener.setConverterWinsContentType(endpoint.isConverterWinsContentType());} @AT@ 4253 @LENGTH@ 960
---UPD InstanceofExpression@@instance.getMessageListener() instanceof AbstractAdaptableMessageListener @TO@ iml instanceof AbstractAdaptableMessageListener @AT@ 4257 @LENGTH@ 73
------DEL MethodInvocation@@instance.getMessageListener() @AT@ 4257 @LENGTH@ 29
---------DEL SimpleName@@Name:instance @AT@ 4257 @LENGTH@ 8
---------DEL SimpleName@@MethodName:getMessageListener:[] @AT@ 4266 @LENGTH@ 20
------INS SimpleName@@iml @TO@ InstanceofExpression@@instance.getMessageListener() instanceof AbstractAdaptableMessageListener @AT@ 4303 @LENGTH@ 3
---UPD Block@@ThenBody:{  AbstractAdaptableMessageListener messageListener=(AbstractAdaptableMessageListener)instance.getMessageListener();  JavaUtils.INSTANCE.acceptIfNotNull(this.beforeSendReplyPostProcessors,messageListener::setBeforeSendReplyPostProcessors).acceptIfNotNull(this.retryTemplate,messageListener::setRetryTemplate).acceptIfCondition(this.retryTemplate != null && this.recoveryCallback != null,this.recoveryCallback,messageListener::setRecoveryCallback).acceptIfNotNull(this.defaultRequeueRejected,messageListener::setDefaultRequeueRejected).acceptIfNotNull(endpoint.getReplyPostProcessor(),messageListener::setReplyPostProcessor).acceptIfNotNull(endpoint.getReplyContentType(),messageListener::setReplyContentType);  messageListener.setConverterWinsContentType(endpoint.isConverterWinsContentType());} @TO@ ThenBody:{  AbstractAdaptableMessageListener messageListener=(AbstractAdaptableMessageListener)iml;  JavaUtils.INSTANCE.acceptIfNotNull(this.beforeSendReplyPostProcessors,messageListener::setBeforeSendReplyPostProcessors).acceptIfNotNull(this.retryTemplate,messageListener::setRetryTemplate).acceptIfCondition(this.retryTemplate != null && this.recoveryCallback != null,this.recoveryCallback,messageListener::setRecoveryCallback).acceptIfNotNull(this.defaultRequeueRejected,messageListener::setDefaultRequeueRejected);  if (endpoint != null) {    JavaUtils.INSTANCE.acceptIfNotNull(endpoint.getReplyPostProcessor(),messageListener::setReplyPostProcessor).acceptIfNotNull(endpoint.getReplyContentType(),messageListener::setReplyContentType);  }  messageListener.setConverterWinsContentType(endpoint.isConverterWinsContentType());} @AT@ 4332 @LENGTH@ 881
------UPD VariableDeclarationStatement@@AbstractAdaptableMessageListener messageListener=(AbstractAdaptableMessageListener)instance.getMessageListener(); @TO@ AbstractAdaptableMessageListener messageListener=(AbstractAdaptableMessageListener)iml; @AT@ 4337 @LENGTH@ 122
---------UPD VariableDeclarationFragment@@messageListener=(AbstractAdaptableMessageListener)instance.getMessageListener() @TO@ messageListener=(AbstractAdaptableMessageListener)iml @AT@ 4370 @LENGTH@ 88
------------UPD CastExpression@@(AbstractAdaptableMessageListener)instance.getMessageListener() @TO@ (AbstractAdaptableMessageListener)iml @AT@ 4388 @LENGTH@ 70
---------------DEL MethodInvocation@@instance.getMessageListener() @AT@ 4423 @LENGTH@ 35
------------------DEL SimpleName@@Name:instance @AT@ 4423 @LENGTH@ 8
------------------DEL SimpleName@@MethodName:getMessageListener:[] @AT@ 4438 @LENGTH@ 20
---------------INS SimpleName@@iml @TO@ CastExpression@@(AbstractAdaptableMessageListener)instance.getMessageListener() @AT@ 4443 @LENGTH@ 3
------UPD ExpressionStatement@@MethodInvocation:JavaUtils.INSTANCE.acceptIfNotNull(this.beforeSendReplyPostProcessors,messageListener::setBeforeSendReplyPostProcessors).acceptIfNotNull(this.retryTemplate,messageListener::setRetryTemplate).acceptIfCondition(this.retryTemplate != null && this.recoveryCallback != null,this.recoveryCallback,messageListener::setRecoveryCallback).acceptIfNotNull(this.defaultRequeueRejected,messageListener::setDefaultRequeueRejected).acceptIfNotNull(endpoint.getReplyPostProcessor(),messageListener::setReplyPostProcessor).acceptIfNotNull(endpoint.getReplyContentType(),messageListener::setReplyContentType) @TO@ MethodInvocation:JavaUtils.INSTANCE.acceptIfNotNull(this.beforeSendReplyPostProcessors,messageListener::setBeforeSendReplyPostProcessors).acceptIfNotNull(this.retryTemplate,messageListener::setRetryTemplate).acceptIfCondition(this.retryTemplate != null && this.recoveryCallback != null,this.recoveryCallback,messageListener::setRecoveryCallback).acceptIfNotNull(this.defaultRequeueRejected,messageListener::setDefaultRequeueRejected) @AT@ 4463 @LENGTH@ 659
---------UPD MethodInvocation@@JavaUtils.INSTANCE.acceptIfNotNull(this.beforeSendReplyPostProcessors,messageListener::setBeforeSendReplyPostProcessors).acceptIfNotNull(this.retryTemplate,messageListener::setRetryTemplate).acceptIfCondition(this.retryTemplate != null && this.recoveryCallback != null,this.recoveryCallback,messageListener::setRecoveryCallback).acceptIfNotNull(this.defaultRequeueRejected,messageListener::setDefaultRequeueRejected).acceptIfNotNull(endpoint.getReplyPostProcessor(),messageListener::setReplyPostProcessor).acceptIfNotNull(endpoint.getReplyContentType(),messageListener::setReplyContentType) @TO@ JavaUtils.INSTANCE.acceptIfNotNull(this.beforeSendReplyPostProcessors,messageListener::setBeforeSendReplyPostProcessors).acceptIfNotNull(this.retryTemplate,messageListener::setRetryTemplate).acceptIfCondition(this.retryTemplate != null && this.recoveryCallback != null,this.recoveryCallback,messageListener::setRecoveryCallback).acceptIfNotNull(this.defaultRequeueRejected,messageListener::setDefaultRequeueRejected) @AT@ 4463 @LENGTH@ 658
------------DEL MethodInvocation@@MethodName:acceptIfNotNull:[this.defaultRequeueRejected, messageListener::setDefaultRequeueRejected] @AT@ 4463 @LENGTH@ 470
---------------DEL FieldAccess@@this.defaultRequeueRejected @AT@ 4861 @LENGTH@ 27
------------INS SimpleName@@MethodName:acceptIfNotNull:[this.defaultRequeueRejected, messageListener::setDefaultRequeueRejected] @TO@ MethodInvocation@@JavaUtils.INSTANCE.acceptIfNotNull(this.beforeSendReplyPostProcessors,messageListener::setBeforeSendReplyPostProcessors).acceptIfNotNull(this.retryTemplate,messageListener::setRetryTemplate).acceptIfCondition(this.retryTemplate != null && this.recoveryCallback != null,this.recoveryCallback,messageListener::setRecoveryCallback).acceptIfNotNull(this.defaultRequeueRejected,messageListener::setDefaultRequeueRejected).acceptIfNotNull(endpoint.getReplyPostProcessor(),messageListener::setReplyPostProcessor).acceptIfNotNull(endpoint.getReplyContentType(),messageListener::setReplyContentType) @AT@ 4833 @LENGTH@ 88
---------------INS FieldAccess@@this.defaultRequeueRejected @TO@ SimpleName@@MethodName:acceptIfNotNull:[this.defaultRequeueRejected, messageListener::setDefaultRequeueRejected] @AT@ 4849 @LENGTH@ 27
------------------MOV ThisExpression@@this @TO@ FieldAccess@@this.defaultRequeueRejected @AT@ 4861 @LENGTH@ 4
------------------MOV SimpleName@@defaultRequeueRejected @TO@ FieldAccess@@this.defaultRequeueRejected @AT@ 4866 @LENGTH@ 22
------INS IfStatement@@if (endpoint != null) {  JavaUtils.INSTANCE.acceptIfNotNull(endpoint.getReplyPostProcessor(),messageListener::setReplyPostProcessor).acceptIfNotNull(endpoint.getReplyContentType(),messageListener::setReplyContentType);} @TO@ Block@@ThenBody:{  AbstractAdaptableMessageListener messageListener=(AbstractAdaptableMessageListener)instance.getMessageListener();  JavaUtils.INSTANCE.acceptIfNotNull(this.beforeSendReplyPostProcessors,messageListener::setBeforeSendReplyPostProcessors).acceptIfNotNull(this.retryTemplate,messageListener::setRetryTemplate).acceptIfCondition(this.retryTemplate != null && this.recoveryCallback != null,this.recoveryCallback,messageListener::setRecoveryCallback).acceptIfNotNull(this.defaultRequeueRejected,messageListener::setDefaultRequeueRejected).acceptIfNotNull(endpoint.getReplyPostProcessor(),messageListener::setReplyPostProcessor).acceptIfNotNull(endpoint.getReplyContentType(),messageListener::setReplyContentType);  messageListener.setConverterWinsContentType(endpoint.isConverterWinsContentType());} @AT@ 4926 @LENGTH@ 242
---------INS InfixExpression@@endpoint != null @TO@ IfStatement@@if (endpoint != null) {  JavaUtils.INSTANCE.acceptIfNotNull(endpoint.getReplyPostProcessor(),messageListener::setReplyPostProcessor).acceptIfNotNull(endpoint.getReplyContentType(),messageListener::setReplyContentType);} @AT@ 4930 @LENGTH@ 16
------------INS SimpleName@@endpoint @TO@ InfixExpression@@endpoint != null @AT@ 4930 @LENGTH@ 8
------------INS Operator@@!= @TO@ InfixExpression@@endpoint != null @AT@ 4938 @LENGTH@ 2
------------INS NullLiteral@@null @TO@ InfixExpression@@endpoint != null @AT@ 4942 @LENGTH@ 4
---------INS Block@@ThenBody:{  JavaUtils.INSTANCE.acceptIfNotNull(endpoint.getReplyPostProcessor(),messageListener::setReplyPostProcessor).acceptIfNotNull(endpoint.getReplyContentType(),messageListener::setReplyContentType);} @TO@ IfStatement@@if (endpoint != null) {  JavaUtils.INSTANCE.acceptIfNotNull(endpoint.getReplyPostProcessor(),messageListener::setReplyPostProcessor).acceptIfNotNull(endpoint.getReplyContentType(),messageListener::setReplyContentType);} @AT@ 4948 @LENGTH@ 220
------------INS ExpressionStatement@@MethodInvocation:JavaUtils.INSTANCE.acceptIfNotNull(endpoint.getReplyPostProcessor(),messageListener::setReplyPostProcessor).acceptIfNotNull(endpoint.getReplyContentType(),messageListener::setReplyContentType) @TO@ Block@@ThenBody:{  JavaUtils.INSTANCE.acceptIfNotNull(endpoint.getReplyPostProcessor(),messageListener::setReplyPostProcessor).acceptIfNotNull(endpoint.getReplyContentType(),messageListener::setReplyContentType);} @AT@ 4954 @LENGTH@ 209
---------------INS MethodInvocation@@JavaUtils.INSTANCE.acceptIfNotNull(endpoint.getReplyPostProcessor(),messageListener::setReplyPostProcessor).acceptIfNotNull(endpoint.getReplyContentType(),messageListener::setReplyContentType) @TO@ ExpressionStatement@@MethodInvocation:JavaUtils.INSTANCE.acceptIfNotNull(endpoint.getReplyPostProcessor(),messageListener::setReplyPostProcessor).acceptIfNotNull(endpoint.getReplyContentType(),messageListener::setReplyContentType) @AT@ 4954 @LENGTH@ 208
------------------MOV MethodInvocation@@MethodName:acceptIfNotNull:[endpoint.getReplyPostProcessor(), messageListener::setReplyPostProcessor] @TO@ MethodInvocation@@JavaUtils.INSTANCE.acceptIfNotNull(endpoint.getReplyPostProcessor(),messageListener::setReplyPostProcessor).acceptIfNotNull(endpoint.getReplyContentType(),messageListener::setReplyContentType) @AT@ 4463 @LENGTH@ 566
------------------INS QualifiedName@@Name:JavaUtils.INSTANCE @TO@ MethodInvocation@@JavaUtils.INSTANCE.acceptIfNotNull(endpoint.getReplyPostProcessor(),messageListener::setReplyPostProcessor).acceptIfNotNull(endpoint.getReplyContentType(),messageListener::setReplyContentType) @AT@ 4954 @LENGTH@ 18
------------------MOV SimpleName@@MethodName:acceptIfNotNull:[endpoint.getReplyContentType(), messageListener::setReplyContentType] @TO@ MethodInvocation@@JavaUtils.INSTANCE.acceptIfNotNull(endpoint.getReplyPostProcessor(),messageListener::setReplyPostProcessor).acceptIfNotNull(endpoint.getReplyContentType(),messageListener::setReplyContentType) @AT@ 5036 @LENGTH@ 85


UPD EnhancedForStatement@@for (Processor processor : processors) {  Exchange copy=processorExchangeFactory.createCorrelatedCopy(exchange,false);  if (streamCache != null) {    if (index > 0) {      StreamCache copiedStreamCache=streamCache.copy(copy);      if (copiedStreamCache != null) {        copy.getIn().setBody(copiedStreamCache);      }    }  }  if (copy.getProperty(ExchangePropertyKey.STREAM_CACHE_UNIT_OF_WORK) == null) {    copy.setProperty(ExchangePropertyKey.STREAM_CACHE_UNIT_OF_WORK,exchange.getUnitOfWork());  }  if (isShareUnitOfWork()) {    prepareSharedUnitOfWork(copy,exchange);  }  Route route=ExchangeHelper.getRoute(exchange);  result.add(createProcessorExchangePair(index++,processor,copy,route));} @TO@ for (Processor processor : processors) {  Exchange copy=processorExchangeFactory.createCorrelatedCopy(exchange,false);  copy.adapt(ExtendedExchange.class).setTransacted(exchange.isTransacted());  if (streamCache != null) {    if (index > 0) {      StreamCache copiedStreamCache=streamCache.copy(copy);      if (copiedStreamCache != null) {        copy.getIn().setBody(copiedStreamCache);      }    }  }  if (copy.getProperty(ExchangePropertyKey.STREAM_CACHE_UNIT_OF_WORK) == null) {    copy.setProperty(ExchangePropertyKey.STREAM_CACHE_UNIT_OF_WORK,exchange.getUnitOfWork());  }  if (isShareUnitOfWork()) {    prepareSharedUnitOfWork(copy,exchange);  }  Route route=ExchangeHelper.getRoute(exchange);  result.add(createProcessorExchangePair(index++,processor,copy,route));} @AT@ 37308 @LENGTH@ 1729
---INS ExpressionStatement@@MethodInvocation:copy.adapt(ExtendedExchange.class).setTransacted(exchange.isTransacted()) @TO@ EnhancedForStatement@@for (Processor processor : processors) {  Exchange copy=processorExchangeFactory.createCorrelatedCopy(exchange,false);  if (streamCache != null) {    if (index > 0) {      StreamCache copiedStreamCache=streamCache.copy(copy);      if (copiedStreamCache != null) {        copy.getIn().setBody(copiedStreamCache);      }    }  }  if (copy.getProperty(ExchangePropertyKey.STREAM_CACHE_UNIT_OF_WORK) == null) {    copy.setProperty(ExchangePropertyKey.STREAM_CACHE_UNIT_OF_WORK,exchange.getUnitOfWork());  }  if (isShareUnitOfWork()) {    prepareSharedUnitOfWork(copy,exchange);  }  Route route=ExchangeHelper.getRoute(exchange);  result.add(createProcessorExchangePair(index++,processor,copy,route));} @AT@ 37517 @LENGTH@ 74
------INS MethodInvocation@@copy.adapt(ExtendedExchange.class).setTransacted(exchange.isTransacted()) @TO@ ExpressionStatement@@MethodInvocation:copy.adapt(ExtendedExchange.class).setTransacted(exchange.isTransacted()) @AT@ 37517 @LENGTH@ 73
---------INS MethodInvocation@@MethodName:adapt:[ExtendedExchange.class] @TO@ MethodInvocation@@copy.adapt(ExtendedExchange.class).setTransacted(exchange.isTransacted()) @AT@ 37517 @LENGTH@ 34
------------INS TypeLiteral@@ExtendedExchange.class @TO@ MethodInvocation@@MethodName:adapt:[ExtendedExchange.class] @AT@ 37528 @LENGTH@ 22
---------INS SimpleName@@Name:copy @TO@ MethodInvocation@@copy.adapt(ExtendedExchange.class).setTransacted(exchange.isTransacted()) @AT@ 37517 @LENGTH@ 4
---------INS SimpleName@@MethodName:setTransacted:[exchange.isTransacted()] @TO@ MethodInvocation@@copy.adapt(ExtendedExchange.class).setTransacted(exchange.isTransacted()) @AT@ 37552 @LENGTH@ 38
------------INS MethodInvocation@@exchange.isTransacted() @TO@ SimpleName@@MethodName:setTransacted:[exchange.isTransacted()] @AT@ 37566 @LENGTH@ 23
---------------INS SimpleName@@Name:exchange @TO@ MethodInvocation@@exchange.isTransacted() @AT@ 37566 @LENGTH@ 8
---------------INS SimpleName@@MethodName:isTransacted:[] @TO@ MethodInvocation@@exchange.isTransacted() @AT@ 37575 @LENGTH@ 14


UPD EnhancedForStatement@@for (R instance : instances) {  EntityFromDtoInstantiatingConverter<T> converter=new EntityFromDtoInstantiatingConverter<>(domainType,neo4jMappingContext);  T domainObject=converter.convert(instance);  T savedEntity=saveImpl(domainObject,pps,stateMachine);  @SuppressWarnings("unchecked") R convertedBack=(R)new DtoInstantiatingConverter(resultType,neo4jMappingContext).convertDirectly(savedEntity);  results.add(convertedBack);} @TO@ for (R instance : instances) {  T domainObject=converter.convert(instance);  T savedEntity=saveImpl(domainObject,pps,stateMachine);  @SuppressWarnings("unchecked") R convertedBack=(R)new DtoInstantiatingConverter(resultType,neo4jMappingContext).convertDirectly(savedEntity);  results.add(convertedBack);} @AT@ 42164 @LENGTH@ 460


UPD Block@@ThenBody:{  final NodeWrapper<?> wrapper=(NodeWrapper<?>)bean;  return new ConfigurationNodePointer(wrapper.getNode(),locale,wrapper.getNodeHandler());} @TO@ ThenBody:{  final NodeWrapper<Object> wrapper=(NodeWrapper<Object>)bean;  return new ConfigurationNodePointer<>(wrapper.getNode(),locale,wrapper.getNodeHandler());} @AT@ 3020 @LENGTH@ 179
---UPD VariableDeclarationStatement@@final NodeWrapper<?> wrapper=(NodeWrapper<?>)bean; @TO@ final NodeWrapper<Object> wrapper=(NodeWrapper<Object>)bean; @AT@ 3034 @LENGTH@ 53
------UPD ParameterizedType@@NodeWrapper<?> @TO@ NodeWrapper<Object> @AT@ 3040 @LENGTH@ 14
---------INS SimpleType@@Object @TO@ ParameterizedType@@NodeWrapper<?> @AT@ 3052 @LENGTH@ 6
---------DEL WildcardType@@? @AT@ 3052 @LENGTH@ 1
------UPD VariableDeclarationFragment@@wrapper=(NodeWrapper<?>)bean @TO@ wrapper=(NodeWrapper<Object>)bean @AT@ 3055 @LENGTH@ 31
---------UPD CastExpression@@(NodeWrapper<?>)bean @TO@ (NodeWrapper<Object>)bean @AT@ 3065 @LENGTH@ 21
------------UPD ParameterizedType@@NodeWrapper<?> @TO@ NodeWrapper<Object> @AT@ 3066 @LENGTH@ 14
---------------DEL WildcardType@@? @AT@ 3078 @LENGTH@ 1
---------------INS SimpleType@@Object @TO@ ParameterizedType@@NodeWrapper<?> @AT@ 3083 @LENGTH@ 6
---UPD ReturnStatement@@ClassInstanceCreation:new ConfigurationNodePointer(wrapper.getNode(),locale,wrapper.getNodeHandler()) @TO@ ClassInstanceCreation:new ConfigurationNodePointer<>(wrapper.getNode(),locale,wrapper.getNodeHandler()) @AT@ 3100 @LENGTH@ 89
------UPD ClassInstanceCreation@@ConfigurationNodePointer[wrapper.getNode(), locale, wrapper.getNodeHandler()] @TO@ ConfigurationNodePointer<>[wrapper.getNode(), locale, wrapper.getNodeHandler()] @AT@ 3107 @LENGTH@ 81
---------DEL SimpleType@@ConfigurationNodePointer @AT@ 3111 @LENGTH@ 24
---------INS ParameterizedType@@ConfigurationNodePointer<> @TO@ ClassInstanceCreation@@ConfigurationNodePointer[wrapper.getNode(), locale, wrapper.getNodeHandler()] @AT@ 3121 @LENGTH@ 26
------------INS SimpleType@@ConfigurationNodePointer @TO@ ParameterizedType@@ConfigurationNodePointer<> @AT@ 3121 @LENGTH@ 24


UPD ExpressionStatement@@MethodInvocation:IOUtils.copy(Files.newInputStream(input.toPath()),cos) @TO@ MethodInvocation:Files.copy(input.toPath(),cos) @AT@ 1905 @LENGTH@ 56
---UPD MethodInvocation@@IOUtils.copy(Files.newInputStream(input.toPath()),cos) @TO@ Files.copy(input.toPath(),cos) @AT@ 1905 @LENGTH@ 55
------UPD SimpleName@@Name:IOUtils @TO@ Name:Files @AT@ 1905 @LENGTH@ 7
------UPD SimpleName@@MethodName:copy:[Files.newInputStream(input.toPath()), cos] @TO@ MethodName:copy:[input.toPath(), cos] @AT@ 1913 @LENGTH@ 47
---------DEL MethodInvocation@@Files.newInputStream(input.toPath()) @AT@ 1918 @LENGTH@ 36
------------DEL SimpleName@@Name:Files @AT@ 1918 @LENGTH@ 5
------------DEL SimpleName@@MethodName:newInputStream:[input.toPath()] @AT@ 1924 @LENGTH@ 30
---------MOV MethodInvocation@@input.toPath() @TO@ SimpleName@@MethodName:copy:[Files.newInputStream(input.toPath()), cos] @AT@ 1939 @LENGTH@ 14


INS IfStatement@@if (loginUrl != null) {  this.loginUrl=loginUrl.endsWith("/") ? loginUrl.substring(0,loginUrl.length() - 1) : loginUrl;} @TO@ MethodDeclaration@@public, void, MethodName:setLoginUrl, String loginUrl,  @AT@ 3652 @LENGTH@ 179
---INS InfixExpression@@loginUrl != null @TO@ IfStatement@@if (loginUrl != null) {  this.loginUrl=loginUrl.endsWith("/") ? loginUrl.substring(0,loginUrl.length() - 1) : loginUrl;} @AT@ 3656 @LENGTH@ 16
------INS SimpleName@@loginUrl @TO@ InfixExpression@@loginUrl != null @AT@ 3656 @LENGTH@ 8
------INS Operator@@!= @TO@ InfixExpression@@loginUrl != null @AT@ 3664 @LENGTH@ 2
------INS NullLiteral@@null @TO@ InfixExpression@@loginUrl != null @AT@ 3668 @LENGTH@ 4
---INS Block@@ThenBody:{  this.loginUrl=loginUrl.endsWith("/") ? loginUrl.substring(0,loginUrl.length() - 1) : loginUrl;} @TO@ IfStatement@@if (loginUrl != null) {  this.loginUrl=loginUrl.endsWith("/") ? loginUrl.substring(0,loginUrl.length() - 1) : loginUrl;} @AT@ 3674 @LENGTH@ 157
------INS ExpressionStatement@@Assignment:this.loginUrl=loginUrl.endsWith("/") ? loginUrl.substring(0,loginUrl.length() - 1) : loginUrl @TO@ Block@@ThenBody:{  this.loginUrl=loginUrl.endsWith("/") ? loginUrl.substring(0,loginUrl.length() - 1) : loginUrl;} @AT@ 3724 @LENGTH@ 97
---------INS Assignment@@this.loginUrl=loginUrl.endsWith("/") ? loginUrl.substring(0,loginUrl.length() - 1) : loginUrl @TO@ ExpressionStatement@@Assignment:this.loginUrl=loginUrl.endsWith("/") ? loginUrl.substring(0,loginUrl.length() - 1) : loginUrl @AT@ 3724 @LENGTH@ 96
------------INS FieldAccess@@this.loginUrl @TO@ Assignment@@this.loginUrl=loginUrl.endsWith("/") ? loginUrl.substring(0,loginUrl.length() - 1) : loginUrl @AT@ 3724 @LENGTH@ 13
---------------INS ThisExpression@@this @TO@ FieldAccess@@this.loginUrl @AT@ 3724 @LENGTH@ 4
---------------INS SimpleName@@loginUrl @TO@ FieldAccess@@this.loginUrl @AT@ 3729 @LENGTH@ 8
------------INS Operator@@= @TO@ Assignment@@this.loginUrl=loginUrl.endsWith("/") ? loginUrl.substring(0,loginUrl.length() - 1) : loginUrl @AT@ 3737 @LENGTH@ 1
------------INS ConditionalExpression@@loginUrl.endsWith("/") ? loginUrl.substring(0,loginUrl.length() - 1) : loginUrl @TO@ Assignment@@this.loginUrl=loginUrl.endsWith("/") ? loginUrl.substring(0,loginUrl.length() - 1) : loginUrl @AT@ 3740 @LENGTH@ 80
---------------INS MethodInvocation@@loginUrl.endsWith("/") @TO@ ConditionalExpression@@loginUrl.endsWith("/") ? loginUrl.substring(0,loginUrl.length() - 1) : loginUrl @AT@ 3740 @LENGTH@ 22
------------------INS SimpleName@@Name:loginUrl @TO@ MethodInvocation@@loginUrl.endsWith("/") @AT@ 3740 @LENGTH@ 8
------------------INS SimpleName@@MethodName:endsWith:["/"] @TO@ MethodInvocation@@loginUrl.endsWith("/") @AT@ 3749 @LENGTH@ 13
---------------------INS StringLiteral@@"/" @TO@ SimpleName@@MethodName:endsWith:["/"] @AT@ 3758 @LENGTH@ 3
---------------INS MethodInvocation@@loginUrl.substring(0,loginUrl.length() - 1) @TO@ ConditionalExpression@@loginUrl.endsWith("/") ? loginUrl.substring(0,loginUrl.length() - 1) : loginUrl @AT@ 3765 @LENGTH@ 44
------------------INS SimpleName@@Name:loginUrl @TO@ MethodInvocation@@loginUrl.substring(0,loginUrl.length() - 1) @AT@ 3765 @LENGTH@ 8
------------------INS SimpleName@@MethodName:substring:[0, loginUrl.length() - 1] @TO@ MethodInvocation@@loginUrl.substring(0,loginUrl.length() - 1) @AT@ 3774 @LENGTH@ 35
---------------------INS NumberLiteral@@0 @TO@ SimpleName@@MethodName:substring:[0, loginUrl.length() - 1] @AT@ 3784 @LENGTH@ 1
---------------------INS InfixExpression@@loginUrl.length() - 1 @TO@ SimpleName@@MethodName:substring:[0, loginUrl.length() - 1] @AT@ 3787 @LENGTH@ 21
------------------------INS MethodInvocation@@loginUrl.length() @TO@ InfixExpression@@loginUrl.length() - 1 @AT@ 3787 @LENGTH@ 17
---------------------------INS SimpleName@@Name:loginUrl @TO@ MethodInvocation@@loginUrl.length() @AT@ 3787 @LENGTH@ 8
---------------------------INS SimpleName@@MethodName:length:[] @TO@ MethodInvocation@@loginUrl.length() @AT@ 3796 @LENGTH@ 8
------------------------INS Operator@@- @TO@ InfixExpression@@loginUrl.length() - 1 @AT@ 3804 @LENGTH@ 1
------------------------INS NumberLiteral@@1 @TO@ InfixExpression@@loginUrl.length() - 1 @AT@ 3807 @LENGTH@ 1
---------------INS SimpleName@@loginUrl @TO@ ConditionalExpression@@loginUrl.endsWith("/") ? loginUrl.substring(0,loginUrl.length() - 1) : loginUrl @AT@ 3812 @LENGTH@ 8


DEL MethodDeclaration@@private, static, MapJoinTableContainer, MethodName:getDefaultEmptyContainer, Configuration hconf, MapJoinObjectSerDeContext keyCtx, MapJoinObjectSerDeContext valCtx, SerDeException,  @AT@ 7108 @LENGTH@ 555
---DEL Modifier@@private @AT@ 7108 @LENGTH@ 7
---DEL Modifier@@static @AT@ 7116 @LENGTH@ 6
---DEL SimpleType@@MapJoinTableContainer @AT@ 7123 @LENGTH@ 21
---DEL SimpleName@@MethodName:getDefaultEmptyContainer @AT@ 7145 @LENGTH@ 24
---DEL SingleVariableDeclaration@@Configuration hconf @AT@ 7170 @LENGTH@ 19
------DEL SimpleType@@Configuration @AT@ 7170 @LENGTH@ 13
------DEL SimpleName@@hconf @AT@ 7184 @LENGTH@ 5
---DEL SingleVariableDeclaration@@MapJoinObjectSerDeContext keyCtx @AT@ 7197 @LENGTH@ 32
------DEL SimpleType@@MapJoinObjectSerDeContext @AT@ 7197 @LENGTH@ 25
------DEL SimpleName@@keyCtx @AT@ 7223 @LENGTH@ 6
---DEL SingleVariableDeclaration@@MapJoinObjectSerDeContext valCtx @AT@ 7231 @LENGTH@ 32
------DEL SimpleType@@MapJoinObjectSerDeContext @AT@ 7231 @LENGTH@ 25
------DEL SimpleName@@valCtx @AT@ 7257 @LENGTH@ 6
---DEL SimpleType@@SerDeException @AT@ 7272 @LENGTH@ 14
---DEL VariableDeclarationStatement@@boolean useOptimizedContainer=HiveConf.getBoolVar(hconf,HiveConf.ConfVars.HIVEMAPJOINUSEOPTIMIZEDTABLE); @AT@ 7293 @LENGTH@ 116
------DEL PrimitiveType@@boolean @AT@ 7293 @LENGTH@ 7
------DEL VariableDeclarationFragment@@useOptimizedContainer=HiveConf.getBoolVar(hconf,HiveConf.ConfVars.HIVEMAPJOINUSEOPTIMIZEDTABLE) @AT@ 7301 @LENGTH@ 107
---------DEL SimpleName@@useOptimizedContainer @AT@ 7301 @LENGTH@ 21
---------DEL MethodInvocation@@HiveConf.getBoolVar(hconf,HiveConf.ConfVars.HIVEMAPJOINUSEOPTIMIZEDTABLE) @AT@ 7325 @LENGTH@ 83
------------DEL SimpleName@@Name:HiveConf @AT@ 7325 @LENGTH@ 8
------------DEL SimpleName@@MethodName:getBoolVar:[hconf, HiveConf.ConfVars.HIVEMAPJOINUSEOPTIMIZEDTABLE] @AT@ 7334 @LENGTH@ 74
---------------DEL SimpleName@@hconf @AT@ 7354 @LENGTH@ 5
---------------DEL QualifiedName@@HiveConf.ConfVars.HIVEMAPJOINUSEOPTIMIZEDTABLE @AT@ 7361 @LENGTH@ 46
------------------DEL QualifiedName@@HiveConf.ConfVars @AT@ 7361 @LENGTH@ 17
---------------------DEL SimpleName@@HiveConf @AT@ 7361 @LENGTH@ 8
---------------------DEL SimpleName@@ConfVars @AT@ 7370 @LENGTH@ 8
------------------DEL SimpleName@@HIVEMAPJOINUSEOPTIMIZEDTABLE @AT@ 7379 @LENGTH@ 28
---DEL IfStatement@@if (useOptimizedContainer) {  return new MapJoinBytesTableContainer(hconf,valCtx,-1,0);} @AT@ 7414 @LENGTH@ 101
------DEL SimpleName@@useOptimizedContainer @AT@ 7418 @LENGTH@ 21
------DEL Block@@ThenBody:{  return new MapJoinBytesTableContainer(hconf,valCtx,-1,0);} @AT@ 7441 @LENGTH@ 74
---------DEL ReturnStatement@@ClassInstanceCreation:new MapJoinBytesTableContainer(hconf,valCtx,-1,0) @AT@ 7449 @LENGTH@ 60
------------DEL ClassInstanceCreation@@MapJoinBytesTableContainer[hconf, valCtx, -1, 0] @AT@ 7456 @LENGTH@ 52
---------------DEL New@@new @AT@ 7456 @LENGTH@ 3
---------------DEL SimpleType@@MapJoinBytesTableContainer @AT@ 7460 @LENGTH@ 26
---------------DEL SimpleName@@hconf @AT@ 7487 @LENGTH@ 5
---------------DEL SimpleName@@valCtx @AT@ 7494 @LENGTH@ 6
---------------DEL PrefixExpression@@-1 @AT@ 7502 @LENGTH@ 2
------------------DEL Operator@@- @AT@ 7502 @LENGTH@ 1
------------------DEL NumberLiteral@@1 @AT@ 7503 @LENGTH@ 1
---------------DEL NumberLiteral@@0 @AT@ 7506 @LENGTH@ 1
---DEL VariableDeclarationStatement@@MapJoinTableContainer container=new HashMapWrapper(); @AT@ 7520 @LENGTH@ 55
------DEL SimpleType@@MapJoinTableContainer @AT@ 7520 @LENGTH@ 21
------DEL VariableDeclarationFragment@@container=new HashMapWrapper() @AT@ 7542 @LENGTH@ 32
---------DEL SimpleName@@container @AT@ 7542 @LENGTH@ 9
---------DEL ClassInstanceCreation@@HashMapWrapper[] @AT@ 7554 @LENGTH@ 20
------------DEL New@@new @AT@ 7554 @LENGTH@ 3
------------DEL SimpleType@@HashMapWrapper @AT@ 7558 @LENGTH@ 14
---DEL ExpressionStatement@@MethodInvocation:container.setSerde(keyCtx,valCtx) @AT@ 7580 @LENGTH@ 35
------DEL MethodInvocation@@container.setSerde(keyCtx,valCtx) @AT@ 7580 @LENGTH@ 34
---------DEL SimpleName@@Name:container @AT@ 7580 @LENGTH@ 9
---------DEL SimpleName@@MethodName:setSerde:[keyCtx, valCtx] @AT@ 7590 @LENGTH@ 24
------------DEL SimpleName@@keyCtx @AT@ 7599 @LENGTH@ 6
------------DEL SimpleName@@valCtx @AT@ 7607 @LENGTH@ 6
---DEL ExpressionStatement@@MethodInvocation:container.seal() @AT@ 7620 @LENGTH@ 17
------DEL MethodInvocation@@container.seal() @AT@ 7620 @LENGTH@ 16
---------DEL SimpleName@@Name:container @AT@ 7620 @LENGTH@ 9
---------DEL SimpleName@@MethodName:seal:[] @AT@ 7630 @LENGTH@ 6
---DEL ReturnStatement@@SimpleName:container @AT@ 7642 @LENGTH@ 17
------DEL SimpleName@@container @AT@ 7649 @LENGTH@ 9


UPD ExpressionStatement@@MethodInvocation:checksumVerifyingInputStream.read(byteArray) @TO@ MethodInvocation:assertThrows(IOException.class,() -> checksumVerifyingInputStream.read(byteArray)) @AT@ 1795 @LENGTH@ 45
---INS MethodInvocation@@assertThrows(IOException.class,() -> checksumVerifyingInputStream.read(byteArray)) @TO@ ExpressionStatement@@MethodInvocation:checksumVerifyingInputStream.read(byteArray) @AT@ 1840 @LENGTH@ 83
------INS SimpleName@@MethodName:assertThrows:[IOException.class, () -> checksumVerifyingInputStream.read(byteArray)] @TO@ MethodInvocation@@assertThrows(IOException.class,() -> checksumVerifyingInputStream.read(byteArray)) @AT@ 1840 @LENGTH@ 83
---------INS TypeLiteral@@IOException.class @TO@ SimpleName@@MethodName:assertThrows:[IOException.class, () -> checksumVerifyingInputStream.read(byteArray)] @AT@ 1853 @LENGTH@ 17
---------INS LambdaExpression@@() -> checksumVerifyingInputStream.read(byteArray) @TO@ SimpleName@@MethodName:assertThrows:[IOException.class, () -> checksumVerifyingInputStream.read(byteArray)] @AT@ 1872 @LENGTH@ 50
------------MOV MethodInvocation@@checksumVerifyingInputStream.read(byteArray) @TO@ LambdaExpression@@() -> checksumVerifyingInputStream.read(byteArray) @AT@ 1795 @LENGTH@ 44


INS MethodDeclaration@@public, void, MethodName:correctlyBuildSortClauseWhenSortingByFunctionAliasAndFunctionContainsPositionalParameters,  @TO@ TypeDeclaration@@[@ExtendWith(SpringExtension.class), @ContextConfiguration("classpath:application-context.xml"), @Transactional, public]UserRepositoryTests,  @AT@ 79852 @LENGTH@ 226
---INS Modifier@@public @TO@ MethodDeclaration@@public, void, MethodName:correctlyBuildSortClauseWhenSortingByFunctionAliasAndFunctionContainsPositionalParameters,  @AT@ 79852 @LENGTH@ 6
---INS PrimitiveType@@void @TO@ MethodDeclaration@@public, void, MethodName:correctlyBuildSortClauseWhenSortingByFunctionAliasAndFunctionContainsPositionalParameters,  @AT@ 79859 @LENGTH@ 4
---INS SimpleName@@MethodName:correctlyBuildSortClauseWhenSortingByFunctionAliasAndFunctionContainsPositionalParameters @TO@ MethodDeclaration@@public, void, MethodName:correctlyBuildSortClauseWhenSortingByFunctionAliasAndFunctionContainsPositionalParameters,  @AT@ 79864 @LENGTH@ 89
---INS ExpressionStatement@@MethodInvocation:repository.findAllAndSortByFunctionResultPositionalParameter("prefix","suffix",Sort.by("idWithPrefixAndSuffix")) @TO@ MethodDeclaration@@public, void, MethodName:correctlyBuildSortClauseWhenSortingByFunctionAliasAndFunctionContainsPositionalParameters,  @AT@ 79960 @LENGTH@ 115
------INS MethodInvocation@@repository.findAllAndSortByFunctionResultPositionalParameter("prefix","suffix",Sort.by("idWithPrefixAndSuffix")) @TO@ ExpressionStatement@@MethodInvocation:repository.findAllAndSortByFunctionResultPositionalParameter("prefix","suffix",Sort.by("idWithPrefixAndSuffix")) @AT@ 79960 @LENGTH@ 114
---------INS SimpleName@@Name:repository @TO@ MethodInvocation@@repository.findAllAndSortByFunctionResultPositionalParameter("prefix","suffix",Sort.by("idWithPrefixAndSuffix")) @AT@ 79960 @LENGTH@ 10
---------INS SimpleName@@MethodName:findAllAndSortByFunctionResultPositionalParameter:["prefix", "suffix", Sort.by("idWithPrefixAndSuffix")] @TO@ MethodInvocation@@repository.findAllAndSortByFunctionResultPositionalParameter("prefix","suffix",Sort.by("idWithPrefixAndSuffix")) @AT@ 79971 @LENGTH@ 103
------------INS StringLiteral@@"prefix" @TO@ SimpleName@@MethodName:findAllAndSortByFunctionResultPositionalParameter:["prefix", "suffix", Sort.by("idWithPrefixAndSuffix")] @AT@ 80021 @LENGTH@ 8
------------INS StringLiteral@@"suffix" @TO@ SimpleName@@MethodName:findAllAndSortByFunctionResultPositionalParameter:["prefix", "suffix", Sort.by("idWithPrefixAndSuffix")] @AT@ 80031 @LENGTH@ 8
------------INS MethodInvocation@@Sort.by("idWithPrefixAndSuffix") @TO@ SimpleName@@MethodName:findAllAndSortByFunctionResultPositionalParameter:["prefix", "suffix", Sort.by("idWithPrefixAndSuffix")] @AT@ 80041 @LENGTH@ 32
---------------INS SimpleName@@Name:Sort @TO@ MethodInvocation@@Sort.by("idWithPrefixAndSuffix") @AT@ 80041 @LENGTH@ 4
---------------INS SimpleName@@MethodName:by:["idWithPrefixAndSuffix"] @TO@ MethodInvocation@@Sort.by("idWithPrefixAndSuffix") @AT@ 80046 @LENGTH@ 27
------------------INS StringLiteral@@"idWithPrefixAndSuffix" @TO@ SimpleName@@MethodName:by:["idWithPrefixAndSuffix"] @AT@ 80049 @LENGTH@ 23


UPD ExpressionStatement@@MethodInvocation:exchange.getOut().setBody("When You Go Home, Tell Them Of Us And Say, For Your Tomorrow, We Gave Our Today.") @TO@ MethodInvocation:exchange.getMessage().setBody("When You Go Home, Tell Them Of Us And Say, For Your Tomorrow, We Gave Our Today.") @AT@ 1476 @LENGTH@ 151
---UPD MethodInvocation@@exchange.getOut().setBody("When You Go Home, Tell Them Of Us And Say, For Your Tomorrow, We Gave Our Today.") @TO@ exchange.getMessage().setBody("When You Go Home, Tell Them Of Us And Say, For Your Tomorrow, We Gave Our Today.") @AT@ 1476 @LENGTH@ 150
------UPD MethodInvocation@@MethodName:getOut:[] @TO@ MethodName:getMessage:[] @AT@ 1476 @LENGTH@ 17


UPD VariableDeclarationStatement@@final Object[] singletons=new Object[]{ExceptionTransformer.INSTANCE,NOPTransformer.INSTANCE,StringValueTransformer.stringValueTransformer()}; @TO@ final Object[] singletons={ExceptionTransformer.INSTANCE,NOPTransformer.INSTANCE,StringValueTransformer.stringValueTransformer()}; @AT@ 21104 @LENGTH@ 194
---UPD VariableDeclarationFragment@@singletons=new Object[]{ExceptionTransformer.INSTANCE,NOPTransformer.INSTANCE,StringValueTransformer.stringValueTransformer()} @TO@ singletons={ExceptionTransformer.INSTANCE,NOPTransformer.INSTANCE,StringValueTransformer.stringValueTransformer()} @AT@ 21119 @LENGTH@ 178
------DEL ArrayCreation@@new Object[]{ExceptionTransformer.INSTANCE,NOPTransformer.INSTANCE,StringValueTransformer.stringValueTransformer()} @AT@ 21132 @LENGTH@ 165
---------DEL ArrayType@@Object[] @AT@ 21136 @LENGTH@ 8
------------DEL SimpleType@@Object @AT@ 21136 @LENGTH@ 6
------MOV ArrayInitializer@@{ExceptionTransformer.INSTANCE,NOPTransformer.INSTANCE,StringValueTransformer.stringValueTransformer()} @TO@ VariableDeclarationFragment@@singletons=new Object[]{ExceptionTransformer.INSTANCE,NOPTransformer.INSTANCE,StringValueTransformer.stringValueTransformer()} @AT@ 21145 @LENGTH@ 152


UPD ExpressionStatement@@MethodInvocation:assertEquals("dk19i21)@+#(OR\n",PackageHelper.loadText(file)) @TO@ MethodInvocation:assertEquals("dk19i21)@+#(OR",PackageHelper.loadText(file)) @AT@ 1380 @LENGTH@ 63
---UPD MethodInvocation@@assertEquals("dk19i21)@+#(OR\n",PackageHelper.loadText(file)) @TO@ assertEquals("dk19i21)@+#(OR",PackageHelper.loadText(file)) @AT@ 1380 @LENGTH@ 62
------UPD SimpleName@@MethodName:assertEquals:["dk19i21)@+#(OR\n", PackageHelper.loadText(file)] @TO@ MethodName:assertEquals:["dk19i21)@+#(OR", PackageHelper.loadText(file)] @AT@ 1380 @LENGTH@ 62
---------UPD StringLiteral@@"dk19i21)@+#(OR\n" @TO@ "dk19i21)@+#(OR" @AT@ 1393 @LENGTH@ 18


INS MethodDeclaration@@public, void, MethodName:testNullSortsWithQuery,  @TO@ TypeDeclaration@@[public]MongoItemReaderBuilderTests,  @AT@ 7395 @LENGTH@ 275
---INS Modifier@@public @TO@ MethodDeclaration@@public, void, MethodName:testNullSortsWithQuery,  @AT@ 7395 @LENGTH@ 6
---INS PrimitiveType@@void @TO@ MethodDeclaration@@public, void, MethodName:testNullSortsWithQuery,  @AT@ 7402 @LENGTH@ 4
---INS SimpleName@@MethodName:testNullSortsWithQuery @TO@ MethodDeclaration@@public, void, MethodName:testNullSortsWithQuery,  @AT@ 7407 @LENGTH@ 22
---INS ExpressionStatement@@MethodInvocation:validateExceptionMessage(new MongoItemReaderBuilder<String>().template(this.template).targetType(String.class).query(query(where("_id").is("10"))).name("mongoReaderTest").pageSize(50),"sorts map is required.") @TO@ MethodDeclaration@@public, void, MethodName:testNullSortsWithQuery,  @AT@ 7436 @LENGTH@ 231
------INS MethodInvocation@@validateExceptionMessage(new MongoItemReaderBuilder<String>().template(this.template).targetType(String.class).query(query(where("_id").is("10"))).name("mongoReaderTest").pageSize(50),"sorts map is required.") @TO@ ExpressionStatement@@MethodInvocation:validateExceptionMessage(new MongoItemReaderBuilder<String>().template(this.template).targetType(String.class).query(query(where("_id").is("10"))).name("mongoReaderTest").pageSize(50),"sorts map is required.") @AT@ 7436 @LENGTH@ 230
---------INS SimpleName@@MethodName:validateExceptionMessage:[new MongoItemReaderBuilder<String>().template(this.template).targetType(String.class).query(query(where("_id").is("10"))).name("mongoReaderTest").pageSize(50), "sorts map is required."] @TO@ MethodInvocation@@validateExceptionMessage(new MongoItemReaderBuilder<String>().template(this.template).targetType(String.class).query(query(where("_id").is("10"))).name("mongoReaderTest").pageSize(50),"sorts map is required.") @AT@ 7436 @LENGTH@ 230
------------INS MethodInvocation@@new MongoItemReaderBuilder<String>().template(this.template).targetType(String.class).query(query(where("_id").is("10"))).name("mongoReaderTest").pageSize(50) @TO@ SimpleName@@MethodName:validateExceptionMessage:[new MongoItemReaderBuilder<String>().template(this.template).targetType(String.class).query(query(where("_id").is("10"))).name("mongoReaderTest").pageSize(50), "sorts map is required."] @AT@ 7461 @LENGTH@ 178
---------------INS MethodInvocation@@MethodName:name:["mongoReaderTest"] @TO@ MethodInvocation@@new MongoItemReaderBuilder<String>().template(this.template).targetType(String.class).query(query(where("_id").is("10"))).name("mongoReaderTest").pageSize(50) @AT@ 7461 @LENGTH@ 160
------------------INS StringLiteral@@"mongoReaderTest" @TO@ MethodInvocation@@MethodName:name:["mongoReaderTest"] @AT@ 7603 @LENGTH@ 17
---------------INS MethodInvocation@@MethodName:query:[query(where("_id").is("10"))] @TO@ MethodInvocation@@new MongoItemReaderBuilder<String>().template(this.template).targetType(String.class).query(query(where("_id").is("10"))).name("mongoReaderTest").pageSize(50) @AT@ 7461 @LENGTH@ 131
------------------INS MethodInvocation@@query(where("_id").is("10")) @TO@ MethodInvocation@@MethodName:query:[query(where("_id").is("10"))] @AT@ 7563 @LENGTH@ 28
---------------------INS SimpleName@@MethodName:query:[where("_id").is("10")] @TO@ MethodInvocation@@query(where("_id").is("10")) @AT@ 7563 @LENGTH@ 28
------------------------INS MethodInvocation@@where("_id").is("10") @TO@ SimpleName@@MethodName:query:[where("_id").is("10")] @AT@ 7569 @LENGTH@ 21
---------------------------INS MethodInvocation@@MethodName:where:["_id"] @TO@ MethodInvocation@@where("_id").is("10") @AT@ 7569 @LENGTH@ 12
------------------------------INS StringLiteral@@"_id" @TO@ MethodInvocation@@MethodName:where:["_id"] @AT@ 7575 @LENGTH@ 5
---------------------------INS SimpleName@@MethodName:is:["10"] @TO@ MethodInvocation@@where("_id").is("10") @AT@ 7582 @LENGTH@ 8
------------------------------INS StringLiteral@@"10" @TO@ SimpleName@@MethodName:is:["10"] @AT@ 7585 @LENGTH@ 4
---------------------INS SimpleName@@MethodName:query:[where("_id").is("10")] @TO@ MethodInvocation@@query(where("_id").is("10")) @AT@ 7563 @LENGTH@ 28
------------------------INS MethodInvocation@@where("_id").is("10") @TO@ SimpleName@@MethodName:query:[where("_id").is("10")] @AT@ 7569 @LENGTH@ 21
---------------------------INS MethodInvocation@@MethodName:where:["_id"] @TO@ MethodInvocation@@where("_id").is("10") @AT@ 7569 @LENGTH@ 12
------------------------------INS StringLiteral@@"_id" @TO@ MethodInvocation@@MethodName:where:["_id"] @AT@ 7575 @LENGTH@ 5
---------------------------INS SimpleName@@MethodName:is:["10"] @TO@ MethodInvocation@@where("_id").is("10") @AT@ 7582 @LENGTH@ 8
------------------------------INS StringLiteral@@"10" @TO@ SimpleName@@MethodName:is:["10"] @AT@ 7585 @LENGTH@ 4
---------------INS MethodInvocation@@MethodName:targetType:[String.class] @TO@ MethodInvocation@@new MongoItemReaderBuilder<String>().template(this.template).targetType(String.class).query(query(where("_id").is("10"))).name("mongoReaderTest").pageSize(50) @AT@ 7461 @LENGTH@ 90
------------------INS TypeLiteral@@String.class @TO@ MethodInvocation@@MethodName:targetType:[String.class] @AT@ 7538 @LENGTH@ 12
---------------INS MethodInvocation@@MethodName:template:[this.template] @TO@ MethodInvocation@@new MongoItemReaderBuilder<String>().template(this.template).targetType(String.class).query(query(where("_id").is("10"))).name("mongoReaderTest").pageSize(50) @AT@ 7461 @LENGTH@ 60
------------------INS FieldAccess@@this.template @TO@ MethodInvocation@@MethodName:template:[this.template] @AT@ 7507 @LENGTH@ 13
---------------------INS ThisExpression@@this @TO@ FieldAccess@@this.template @AT@ 7507 @LENGTH@ 4
---------------------INS SimpleName@@template @TO@ FieldAccess@@this.template @AT@ 7512 @LENGTH@ 8
---------------INS ClassInstanceCreation@@MongoItemReaderBuilder<String>[] @TO@ MethodInvocation@@new MongoItemReaderBuilder<String>().template(this.template).targetType(String.class).query(query(where("_id").is("10"))).name("mongoReaderTest").pageSize(50) @AT@ 7461 @LENGTH@ 36
------------------INS New@@new @TO@ ClassInstanceCreation@@MongoItemReaderBuilder<String>[] @AT@ 7461 @LENGTH@ 3
------------------INS ParameterizedType@@MongoItemReaderBuilder<String> @TO@ ClassInstanceCreation@@MongoItemReaderBuilder<String>[] @AT@ 7465 @LENGTH@ 30
---------------------INS SimpleType@@MongoItemReaderBuilder @TO@ ParameterizedType@@MongoItemReaderBuilder<String> @AT@ 7465 @LENGTH@ 22
---------------------INS SimpleType@@String @TO@ ParameterizedType@@MongoItemReaderBuilder<String> @AT@ 7488 @LENGTH@ 6
---------------INS SimpleName@@MethodName:pageSize:[50] @TO@ MethodInvocation@@new MongoItemReaderBuilder<String>().template(this.template).targetType(String.class).query(query(where("_id").is("10"))).name("mongoReaderTest").pageSize(50) @AT@ 7627 @LENGTH@ 12
------------------INS NumberLiteral@@50 @TO@ SimpleName@@MethodName:pageSize:[50] @AT@ 7636 @LENGTH@ 2
------------INS StringLiteral@@"sorts map is required." @TO@ SimpleName@@MethodName:validateExceptionMessage:[new MongoItemReaderBuilder<String>().template(this.template).targetType(String.class).query(query(where("_id").is("10"))).name("mongoReaderTest").pageSize(50), "sorts map is required."] @AT@ 7641 @LENGTH@ 24


UPD IfStatement@@if (reconnectLock.tryLock()) {  BlockingTask task=newReconnectTask(reconnectService,RECONNECT_TASK_NAME,initialReconnectDelay,configuration.getReconnectDelay(),configuration.getMaxReconnect());  try {    task.run(this::doReconnect);  }  finally {    reconnectLock.unlock();  }} @TO@ if (reconnectLock.tryLock()) {  BlockingTask task=newReconnectTask(reconnectService,RECONNECT_TASK_NAME,initialReconnectDelay,configuration.getReconnectDelay(),configuration.getMaxReconnect());  try {    task.run(this::doReconnect);  }  finally {    reconnectLock.unlock();  }} else {  LOG.warn("Thread {} could not acquire a lock for creating the session during consumer reconnection",Thread.currentThread().getId());} @AT@ 7313 @LENGTH@ 402
---INS Block@@ElseBody:{  LOG.warn("Thread {} could not acquire a lock for creating the session during consumer reconnection",Thread.currentThread().getId());} @TO@ IfStatement@@if (reconnectLock.tryLock()) {  BlockingTask task=newReconnectTask(reconnectService,RECONNECT_TASK_NAME,initialReconnectDelay,configuration.getReconnectDelay(),configuration.getMaxReconnect());  try {    task.run(this::doReconnect);  }  finally {    reconnectLock.unlock();  }} @AT@ 7721 @LENGTH@ 177
------INS ExpressionStatement@@MethodInvocation:LOG.warn("Thread {} could not acquire a lock for creating the session during consumer reconnection",Thread.currentThread().getId()) @TO@ Block@@ElseBody:{  LOG.warn("Thread {} could not acquire a lock for creating the session during consumer reconnection",Thread.currentThread().getId());} @AT@ 7735 @LENGTH@ 153
---------INS MethodInvocation@@LOG.warn("Thread {} could not acquire a lock for creating the session during consumer reconnection",Thread.currentThread().getId()) @TO@ ExpressionStatement@@MethodInvocation:LOG.warn("Thread {} could not acquire a lock for creating the session during consumer reconnection",Thread.currentThread().getId()) @AT@ 7735 @LENGTH@ 152
------------INS SimpleName@@Name:LOG @TO@ MethodInvocation@@LOG.warn("Thread {} could not acquire a lock for creating the session during consumer reconnection",Thread.currentThread().getId()) @AT@ 7735 @LENGTH@ 3
------------INS SimpleName@@MethodName:warn:["Thread {} could not acquire a lock for creating the session during consumer reconnection", Thread.currentThread().getId()] @TO@ MethodInvocation@@LOG.warn("Thread {} could not acquire a lock for creating the session during consumer reconnection",Thread.currentThread().getId()) @AT@ 7739 @LENGTH@ 148
---------------INS StringLiteral@@"Thread {} could not acquire a lock for creating the session during consumer reconnection" @TO@ SimpleName@@MethodName:warn:["Thread {} could not acquire a lock for creating the session during consumer reconnection", Thread.currentThread().getId()] @AT@ 7744 @LENGTH@ 90
---------------INS MethodInvocation@@Thread.currentThread().getId() @TO@ SimpleName@@MethodName:warn:["Thread {} could not acquire a lock for creating the session during consumer reconnection", Thread.currentThread().getId()] @AT@ 7856 @LENGTH@ 30
------------------INS MethodInvocation@@MethodName:currentThread:[] @TO@ MethodInvocation@@Thread.currentThread().getId() @AT@ 7856 @LENGTH@ 22
------------------INS SimpleName@@Name:Thread @TO@ MethodInvocation@@Thread.currentThread().getId() @AT@ 7856 @LENGTH@ 6
------------------INS SimpleName@@MethodName:getId:[] @TO@ MethodInvocation@@Thread.currentThread().getId() @AT@ 7879 @LENGTH@ 7


UPD TypeDeclaration@@[@Stateful, @Transactional, public]SearchBean,  @TO@ [@ApplicationScoped, @Transactional, public]SearchBean,  @AT@ 1459 @LENGTH@ 1074
---UPD MarkerAnnotation@@@Stateful @TO@ @ApplicationScoped @AT@ 1459 @LENGTH@ 9


UPD VariableDeclarationStatement@@final HttpHeaders httpHeaders=new HttpHeaders().put("x-test-header","123"); @TO@ final HttpHeaders httpHeaders=new HttpHeaders().set("x-test-header","123"); @AT@ 6601 @LENGTH@ 78
---UPD VariableDeclarationFragment@@httpHeaders=new HttpHeaders().put("x-test-header","123") @TO@ httpHeaders=new HttpHeaders().set("x-test-header","123") @AT@ 6619 @LENGTH@ 59
------UPD MethodInvocation@@new HttpHeaders().put("x-test-header","123") @TO@ new HttpHeaders().set("x-test-header","123") @AT@ 6633 @LENGTH@ 45
---------UPD SimpleName@@MethodName:put:["x-test-header", "123"] @TO@ MethodName:set:["x-test-header", "123"] @AT@ 6651 @LENGTH@ 27


INS MethodDeclaration@@private, void, MethodName:passivelyDeclareExchangeAndQueueAndBindThem, final Channel channel, final String queue, final String exchange, final String routingKey, final Map<String,Object> bindingArgs, IOException,  @TO@ TypeDeclaration@@[public]RabbitMQDeclareSupport,  @AT@ 6989 @LENGTH@ 428
---INS Modifier@@private @TO@ MethodDeclaration@@private, void, MethodName:passivelyDeclareExchangeAndQueueAndBindThem, final Channel channel, final String queue, final String exchange, final String routingKey, final Map<String,Object> bindingArgs, IOException,  @AT@ 6989 @LENGTH@ 7
---INS PrimitiveType@@void @TO@ MethodDeclaration@@private, void, MethodName:passivelyDeclareExchangeAndQueueAndBindThem, final Channel channel, final String queue, final String exchange, final String routingKey, final Map<String,Object> bindingArgs, IOException,  @AT@ 6997 @LENGTH@ 4
---INS SimpleName@@MethodName:passivelyDeclareExchangeAndQueueAndBindThem @TO@ MethodDeclaration@@private, void, MethodName:passivelyDeclareExchangeAndQueueAndBindThem, final Channel channel, final String queue, final String exchange, final String routingKey, final Map<String,Object> bindingArgs, IOException,  @AT@ 7002 @LENGTH@ 43
---INS SingleVariableDeclaration@@final Channel channel @TO@ MethodDeclaration@@private, void, MethodName:passivelyDeclareExchangeAndQueueAndBindThem, final Channel channel, final String queue, final String exchange, final String routingKey, final Map<String,Object> bindingArgs, IOException,  @AT@ 7059 @LENGTH@ 21
------INS Modifier@@final @TO@ SingleVariableDeclaration@@final Channel channel @AT@ 7059 @LENGTH@ 5
------INS SimpleType@@Channel @TO@ SingleVariableDeclaration@@final Channel channel @AT@ 7065 @LENGTH@ 7
------INS SimpleName@@channel @TO@ SingleVariableDeclaration@@final Channel channel @AT@ 7073 @LENGTH@ 7
---INS SingleVariableDeclaration@@final String queue @TO@ MethodDeclaration@@private, void, MethodName:passivelyDeclareExchangeAndQueueAndBindThem, final Channel channel, final String queue, final String exchange, final String routingKey, final Map<String,Object> bindingArgs, IOException,  @AT@ 7082 @LENGTH@ 18
------INS Modifier@@final @TO@ SingleVariableDeclaration@@final String queue @AT@ 7082 @LENGTH@ 5
------INS SimpleType@@String @TO@ SingleVariableDeclaration@@final String queue @AT@ 7088 @LENGTH@ 6
------INS SimpleName@@queue @TO@ SingleVariableDeclaration@@final String queue @AT@ 7095 @LENGTH@ 5
---INS SingleVariableDeclaration@@final String exchange @TO@ MethodDeclaration@@private, void, MethodName:passivelyDeclareExchangeAndQueueAndBindThem, final Channel channel, final String queue, final String exchange, final String routingKey, final Map<String,Object> bindingArgs, IOException,  @AT@ 7102 @LENGTH@ 21
------INS Modifier@@final @TO@ SingleVariableDeclaration@@final String exchange @AT@ 7102 @LENGTH@ 5
------INS SimpleType@@String @TO@ SingleVariableDeclaration@@final String exchange @AT@ 7108 @LENGTH@ 6
------INS SimpleName@@exchange @TO@ SingleVariableDeclaration@@final String exchange @AT@ 7115 @LENGTH@ 8
---INS SingleVariableDeclaration@@final String routingKey @TO@ MethodDeclaration@@private, void, MethodName:passivelyDeclareExchangeAndQueueAndBindThem, final Channel channel, final String queue, final String exchange, final String routingKey, final Map<String,Object> bindingArgs, IOException,  @AT@ 7125 @LENGTH@ 23
------INS Modifier@@final @TO@ SingleVariableDeclaration@@final String routingKey @AT@ 7125 @LENGTH@ 5
------INS SimpleType@@String @TO@ SingleVariableDeclaration@@final String routingKey @AT@ 7131 @LENGTH@ 6
------INS SimpleName@@routingKey @TO@ SingleVariableDeclaration@@final String routingKey @AT@ 7138 @LENGTH@ 10
---INS SingleVariableDeclaration@@final Map<String,Object> bindingArgs @TO@ MethodDeclaration@@private, void, MethodName:passivelyDeclareExchangeAndQueueAndBindThem, final Channel channel, final String queue, final String exchange, final String routingKey, final Map<String,Object> bindingArgs, IOException,  @AT@ 7162 @LENGTH@ 37
------INS Modifier@@final @TO@ SingleVariableDeclaration@@final Map<String,Object> bindingArgs @AT@ 7162 @LENGTH@ 5
------INS ParameterizedType@@Map<String,Object> @TO@ SingleVariableDeclaration@@final Map<String,Object> bindingArgs @AT@ 7168 @LENGTH@ 19
---------INS SimpleType@@Map @TO@ ParameterizedType@@Map<String,Object> @AT@ 7168 @LENGTH@ 3
---------INS SimpleType@@String @TO@ ParameterizedType@@Map<String,Object> @AT@ 7172 @LENGTH@ 6
---------INS SimpleType@@Object @TO@ ParameterizedType@@Map<String,Object> @AT@ 7180 @LENGTH@ 6
------INS SimpleName@@bindingArgs @TO@ SingleVariableDeclaration@@final Map<String,Object> bindingArgs @AT@ 7188 @LENGTH@ 11
---INS SimpleType@@IOException @TO@ MethodDeclaration@@private, void, MethodName:passivelyDeclareExchangeAndQueueAndBindThem, final Channel channel, final String queue, final String exchange, final String routingKey, final Map<String,Object> bindingArgs, IOException,  @AT@ 7221 @LENGTH@ 11
---INS ExpressionStatement@@MethodInvocation:channel.exchangeDeclarePassive(exchange) @TO@ MethodDeclaration@@private, void, MethodName:passivelyDeclareExchangeAndQueueAndBindThem, final Channel channel, final String queue, final String exchange, final String routingKey, final Map<String,Object> bindingArgs, IOException,  @AT@ 7244 @LENGTH@ 41
------INS MethodInvocation@@channel.exchangeDeclarePassive(exchange) @TO@ ExpressionStatement@@MethodInvocation:channel.exchangeDeclarePassive(exchange) @AT@ 7244 @LENGTH@ 40
---------INS SimpleName@@Name:channel @TO@ MethodInvocation@@channel.exchangeDeclarePassive(exchange) @AT@ 7244 @LENGTH@ 7
---------INS SimpleName@@MethodName:exchangeDeclarePassive:[exchange] @TO@ MethodInvocation@@channel.exchangeDeclarePassive(exchange) @AT@ 7252 @LENGTH@ 32
------------INS SimpleName@@exchange @TO@ SimpleName@@MethodName:exchangeDeclarePassive:[exchange] @AT@ 7275 @LENGTH@ 8
---INS ExpressionStatement@@MethodInvocation:channel.queueDeclarePassive(queue) @TO@ MethodDeclaration@@private, void, MethodName:passivelyDeclareExchangeAndQueueAndBindThem, final Channel channel, final String queue, final String exchange, final String routingKey, final Map<String,Object> bindingArgs, IOException,  @AT@ 7294 @LENGTH@ 35
------INS MethodInvocation@@channel.queueDeclarePassive(queue) @TO@ ExpressionStatement@@MethodInvocation:channel.queueDeclarePassive(queue) @AT@ 7294 @LENGTH@ 34
---------INS SimpleName@@Name:channel @TO@ MethodInvocation@@channel.queueDeclarePassive(queue) @AT@ 7294 @LENGTH@ 7
---------INS SimpleName@@MethodName:queueDeclarePassive:[queue] @TO@ MethodInvocation@@channel.queueDeclarePassive(queue) @AT@ 7302 @LENGTH@ 26
------------INS SimpleName@@queue @TO@ SimpleName@@MethodName:queueDeclarePassive:[queue] @AT@ 7322 @LENGTH@ 5
---INS ExpressionStatement@@MethodInvocation:channel.queueBind(queue,exchange,emptyIfNull(routingKey),bindingArgs) @TO@ MethodDeclaration@@private, void, MethodName:passivelyDeclareExchangeAndQueueAndBindThem, final Channel channel, final String queue, final String exchange, final String routingKey, final Map<String,Object> bindingArgs, IOException,  @AT@ 7338 @LENGTH@ 73
------INS MethodInvocation@@channel.queueBind(queue,exchange,emptyIfNull(routingKey),bindingArgs) @TO@ ExpressionStatement@@MethodInvocation:channel.queueBind(queue,exchange,emptyIfNull(routingKey),bindingArgs) @AT@ 7338 @LENGTH@ 72
---------INS SimpleName@@Name:channel @TO@ MethodInvocation@@channel.queueBind(queue,exchange,emptyIfNull(routingKey),bindingArgs) @AT@ 7338 @LENGTH@ 7
---------INS SimpleName@@MethodName:queueBind:[queue, exchange, emptyIfNull(routingKey), bindingArgs] @TO@ MethodInvocation@@channel.queueBind(queue,exchange,emptyIfNull(routingKey),bindingArgs) @AT@ 7346 @LENGTH@ 64
------------INS SimpleName@@queue @TO@ SimpleName@@MethodName:queueBind:[queue, exchange, emptyIfNull(routingKey), bindingArgs] @AT@ 7356 @LENGTH@ 5
------------INS SimpleName@@exchange @TO@ SimpleName@@MethodName:queueBind:[queue, exchange, emptyIfNull(routingKey), bindingArgs] @AT@ 7363 @LENGTH@ 8
------------INS MethodInvocation@@emptyIfNull(routingKey) @TO@ SimpleName@@MethodName:queueBind:[queue, exchange, emptyIfNull(routingKey), bindingArgs] @AT@ 7373 @LENGTH@ 23
---------------INS SimpleName@@MethodName:emptyIfNull:[routingKey] @TO@ MethodInvocation@@emptyIfNull(routingKey) @AT@ 7373 @LENGTH@ 23
------------------INS SimpleName@@routingKey @TO@ SimpleName@@MethodName:emptyIfNull:[routingKey] @AT@ 7385 @LENGTH@ 10
------------INS SimpleName@@bindingArgs @TO@ SimpleName@@MethodName:queueBind:[queue, exchange, emptyIfNull(routingKey), bindingArgs] @AT@ 7398 @LENGTH@ 11


DEL ExpressionStatement@@MethodInvocation:MockitoAnnotations.initMocks(this) @AT@ 2397 @LENGTH@ 35
---DEL MethodInvocation@@MockitoAnnotations.initMocks(this) @AT@ 2397 @LENGTH@ 34


INS MethodDeclaration@@void, MethodName:shouldCount,  @TO@ TypeDeclaration@@CloseableIteratorUnitTests,  @AT@ 1449 @LENGTH@ 210
---INS PrimitiveType@@void @TO@ MethodDeclaration@@void, MethodName:shouldCount,  @AT@ 1444 @LENGTH@ 4
---INS SimpleName@@MethodName:shouldCount @TO@ MethodDeclaration@@void, MethodName:shouldCount,  @AT@ 1449 @LENGTH@ 11
---INS VariableDeclarationStatement@@CloseableIteratorImpl<String> iterator=new CloseableIteratorImpl<>(Arrays.asList("1","2","3").iterator()); @TO@ MethodDeclaration@@void, MethodName:shouldCount,  @AT@ 1468 @LENGTH@ 110
------INS ParameterizedType@@CloseableIteratorImpl<String> @TO@ VariableDeclarationStatement@@CloseableIteratorImpl<String> iterator=new CloseableIteratorImpl<>(Arrays.asList("1","2","3").iterator()); @AT@ 1468 @LENGTH@ 29
---------INS SimpleType@@CloseableIteratorImpl @TO@ ParameterizedType@@CloseableIteratorImpl<String> @AT@ 1468 @LENGTH@ 21
---------INS SimpleType@@String @TO@ ParameterizedType@@CloseableIteratorImpl<String> @AT@ 1490 @LENGTH@ 6
------INS VariableDeclarationFragment@@iterator=new CloseableIteratorImpl<>(Arrays.asList("1","2","3").iterator()) @TO@ VariableDeclarationStatement@@CloseableIteratorImpl<String> iterator=new CloseableIteratorImpl<>(Arrays.asList("1","2","3").iterator()); @AT@ 1498 @LENGTH@ 79
---------INS SimpleName@@iterator @TO@ VariableDeclarationFragment@@iterator=new CloseableIteratorImpl<>(Arrays.asList("1","2","3").iterator()) @AT@ 1498 @LENGTH@ 8
---------INS ClassInstanceCreation@@CloseableIteratorImpl<>[Arrays.asList("1","2","3").iterator()] @TO@ VariableDeclarationFragment@@iterator=new CloseableIteratorImpl<>(Arrays.asList("1","2","3").iterator()) @AT@ 1509 @LENGTH@ 68
------------INS New@@new @TO@ ClassInstanceCreation@@CloseableIteratorImpl<>[Arrays.asList("1","2","3").iterator()] @AT@ 1509 @LENGTH@ 3
------------INS ParameterizedType@@CloseableIteratorImpl<> @TO@ ClassInstanceCreation@@CloseableIteratorImpl<>[Arrays.asList("1","2","3").iterator()] @AT@ 1513 @LENGTH@ 23
---------------INS SimpleType@@CloseableIteratorImpl @TO@ ParameterizedType@@CloseableIteratorImpl<> @AT@ 1513 @LENGTH@ 21
------------INS MethodInvocation@@Arrays.asList("1","2","3").iterator() @TO@ ClassInstanceCreation@@CloseableIteratorImpl<>[Arrays.asList("1","2","3").iterator()] @AT@ 1537 @LENGTH@ 39
---------------INS MethodInvocation@@MethodName:asList:["1", "2", "3"] @TO@ MethodInvocation@@Arrays.asList("1","2","3").iterator() @AT@ 1537 @LENGTH@ 28
------------------INS StringLiteral@@"1" @TO@ MethodInvocation@@MethodName:asList:["1", "2", "3"] @AT@ 1551 @LENGTH@ 3
------------------INS StringLiteral@@"2" @TO@ MethodInvocation@@MethodName:asList:["1", "2", "3"] @AT@ 1556 @LENGTH@ 3
------------------INS StringLiteral@@"3" @TO@ MethodInvocation@@MethodName:asList:["1", "2", "3"] @AT@ 1561 @LENGTH@ 3
---------------INS SimpleName@@Name:Arrays @TO@ MethodInvocation@@Arrays.asList("1","2","3").iterator() @AT@ 1537 @LENGTH@ 6
---------------INS SimpleName@@MethodName:iterator:[] @TO@ MethodInvocation@@Arrays.asList("1","2","3").iterator() @AT@ 1566 @LENGTH@ 10
---INS VariableDeclarationStatement@@long count=iterator.stream().count(); @TO@ MethodDeclaration@@void, MethodName:shouldCount,  @AT@ 1582 @LENGTH@ 39
------INS PrimitiveType@@long @TO@ VariableDeclarationStatement@@long count=iterator.stream().count(); @AT@ 1582 @LENGTH@ 4
------INS VariableDeclarationFragment@@count=iterator.stream().count() @TO@ VariableDeclarationStatement@@long count=iterator.stream().count(); @AT@ 1587 @LENGTH@ 33
---------INS SimpleName@@count @TO@ VariableDeclarationFragment@@count=iterator.stream().count() @AT@ 1587 @LENGTH@ 5
---------INS MethodInvocation@@iterator.stream().count() @TO@ VariableDeclarationFragment@@count=iterator.stream().count() @AT@ 1595 @LENGTH@ 25
------------INS MethodInvocation@@MethodName:stream:[] @TO@ MethodInvocation@@iterator.stream().count() @AT@ 1595 @LENGTH@ 17
------------INS SimpleName@@Name:iterator @TO@ MethodInvocation@@iterator.stream().count() @AT@ 1595 @LENGTH@ 8
------------INS SimpleName@@MethodName:count:[] @TO@ MethodInvocation@@iterator.stream().count() @AT@ 1613 @LENGTH@ 7
---INS ExpressionStatement@@MethodInvocation:assertThat(count).isEqualTo(3) @TO@ MethodDeclaration@@void, MethodName:shouldCount,  @AT@ 1625 @LENGTH@ 31
------INS MethodInvocation@@assertThat(count).isEqualTo(3) @TO@ ExpressionStatement@@MethodInvocation:assertThat(count).isEqualTo(3) @AT@ 1625 @LENGTH@ 30
---------INS MethodInvocation@@MethodName:assertThat:[count] @TO@ MethodInvocation@@assertThat(count).isEqualTo(3) @AT@ 1625 @LENGTH@ 17
------------INS SimpleName@@count @TO@ MethodInvocation@@MethodName:assertThat:[count] @AT@ 1636 @LENGTH@ 5
---------INS SimpleName@@MethodName:isEqualTo:[3] @TO@ MethodInvocation@@assertThat(count).isEqualTo(3) @AT@ 1643 @LENGTH@ 12
------------INS NumberLiteral@@3 @TO@ SimpleName@@MethodName:isEqualTo:[3] @AT@ 1653 @LENGTH@ 1


UPD ExpressionStatement@@MethodInvocation:newParameters(100,200,300,400,500) @TO@ MethodInvocation:assertThrows(IllegalArgumentException.class,() -> newParameters(100,200,300,400,500)) @AT@ 4189 @LENGTH@ 39
---INS MethodInvocation@@assertThrows(IllegalArgumentException.class,() -> newParameters(100,200,300,400,500)) @TO@ ExpressionStatement@@MethodInvocation:newParameters(100,200,300,400,500) @AT@ 4286 @LENGTH@ 90
------INS SimpleName@@MethodName:assertThrows:[IllegalArgumentException.class, () -> newParameters(100,200,300,400,500)] @TO@ MethodInvocation@@assertThrows(IllegalArgumentException.class,() -> newParameters(100,200,300,400,500)) @AT@ 4286 @LENGTH@ 90
---------INS TypeLiteral@@IllegalArgumentException.class @TO@ SimpleName@@MethodName:assertThrows:[IllegalArgumentException.class, () -> newParameters(100,200,300,400,500)] @AT@ 4299 @LENGTH@ 30
---------INS LambdaExpression@@() -> newParameters(100,200,300,400,500) @TO@ SimpleName@@MethodName:assertThrows:[IllegalArgumentException.class, () -> newParameters(100,200,300,400,500)] @AT@ 4331 @LENGTH@ 44
------------MOV MethodInvocation@@newParameters(100,200,300,400,500) @TO@ LambdaExpression@@() -> newParameters(100,200,300,400,500) @AT@ 4189 @LENGTH@ 38


UPD ExpressionStatement@@MethodInvocation:ArchiveStreamFactory.DEFAULT.createArchiveOutputStream(ArchiveStreamFactory.SEVEN_Z,new ByteArrayOutputStream()) @TO@ MethodInvocation:assertThrows(StreamingNotSupportedException.class,() -> ArchiveStreamFactory.DEFAULT.createArchiveOutputStream(ArchiveStreamFactory.SEVEN_Z,new ByteArrayOutputStream())) @AT@ 4049 @LENGTH@ 166
---INS MethodInvocation@@assertThrows(StreamingNotSupportedException.class,() -> ArchiveStreamFactory.DEFAULT.createArchiveOutputStream(ArchiveStreamFactory.SEVEN_Z,new ByteArrayOutputStream())) @TO@ ExpressionStatement@@MethodInvocation:ArchiveStreamFactory.DEFAULT.createArchiveOutputStream(ArchiveStreamFactory.SEVEN_Z,new ByteArrayOutputStream()) @AT@ 4113 @LENGTH@ 183
------INS SimpleName@@MethodName:assertThrows:[StreamingNotSupportedException.class, () -> ArchiveStreamFactory.DEFAULT.createArchiveOutputStream(ArchiveStreamFactory.SEVEN_Z,new ByteArrayOutputStream())] @TO@ MethodInvocation@@assertThrows(StreamingNotSupportedException.class,() -> ArchiveStreamFactory.DEFAULT.createArchiveOutputStream(ArchiveStreamFactory.SEVEN_Z,new ByteArrayOutputStream())) @AT@ 4113 @LENGTH@ 183
---------INS TypeLiteral@@StreamingNotSupportedException.class @TO@ SimpleName@@MethodName:assertThrows:[StreamingNotSupportedException.class, () -> ArchiveStreamFactory.DEFAULT.createArchiveOutputStream(ArchiveStreamFactory.SEVEN_Z,new ByteArrayOutputStream())] @AT@ 4126 @LENGTH@ 36
---------INS LambdaExpression@@() -> ArchiveStreamFactory.DEFAULT.createArchiveOutputStream(ArchiveStreamFactory.SEVEN_Z,new ByteArrayOutputStream()) @TO@ SimpleName@@MethodName:assertThrows:[StreamingNotSupportedException.class, () -> ArchiveStreamFactory.DEFAULT.createArchiveOutputStream(ArchiveStreamFactory.SEVEN_Z,new ByteArrayOutputStream())] @AT@ 4176 @LENGTH@ 119
------------MOV MethodInvocation@@ArchiveStreamFactory.DEFAULT.createArchiveOutputStream(ArchiveStreamFactory.SEVEN_Z,new ByteArrayOutputStream()) @TO@ LambdaExpression@@() -> ArchiveStreamFactory.DEFAULT.createArchiveOutputStream(ArchiveStreamFactory.SEVEN_Z,new ByteArrayOutputStream()) @AT@ 4049 @LENGTH@ 165


INS ExpressionStatement@@MethodInvocation:send("Connected!") @TO@ MethodDeclaration@@public, void, MethodName:handleConnect, Session session,  @AT@ 1372 @LENGTH@ 19
---INS MethodInvocation@@send("Connected!") @TO@ ExpressionStatement@@MethodInvocation:send("Connected!") @AT@ 1372 @LENGTH@ 18
------INS SimpleName@@MethodName:send:["Connected!"] @TO@ MethodInvocation@@send("Connected!") @AT@ 1372 @LENGTH@ 18
---------INS StringLiteral@@"Connected!" @TO@ SimpleName@@MethodName:send:["Connected!"] @AT@ 1377 @LENGTH@ 12


INS IfStatement@@if (commonElementType == TemplateSupport.EmptyIterable.class) {  return Flux.empty();} @TO@ MethodDeclaration@@public, Flux<R>, T, R, MethodName:saveAllAs, Iterable<T> instances, Class<R> resultType,  @AT@ 20273 @LENGTH@ 91
---INS InfixExpression@@commonElementType == TemplateSupport.EmptyIterable.class @TO@ IfStatement@@if (commonElementType == TemplateSupport.EmptyIterable.class) {  return Flux.empty();} @AT@ 20277 @LENGTH@ 56
------INS SimpleName@@commonElementType @TO@ InfixExpression@@commonElementType == TemplateSupport.EmptyIterable.class @AT@ 20277 @LENGTH@ 17
------INS Operator@@== @TO@ InfixExpression@@commonElementType == TemplateSupport.EmptyIterable.class @AT@ 20294 @LENGTH@ 2
------INS TypeLiteral@@TemplateSupport.EmptyIterable.class @TO@ InfixExpression@@commonElementType == TemplateSupport.EmptyIterable.class @AT@ 20298 @LENGTH@ 35
---INS Block@@ThenBody:{  return Flux.empty();} @TO@ IfStatement@@if (commonElementType == TemplateSupport.EmptyIterable.class) {  return Flux.empty();} @AT@ 20335 @LENGTH@ 29
------INS ReturnStatement@@MethodInvocation:Flux.empty() @TO@ Block@@ThenBody:{  return Flux.empty();} @AT@ 20340 @LENGTH@ 20
---------INS MethodInvocation@@Flux.empty() @TO@ ReturnStatement@@MethodInvocation:Flux.empty() @AT@ 20347 @LENGTH@ 12
------------INS SimpleName@@Name:Flux @TO@ MethodInvocation@@Flux.empty() @AT@ 20347 @LENGTH@ 4
------------INS SimpleName@@MethodName:empty:[] @TO@ MethodInvocation@@Flux.empty() @AT@ 20352 @LENGTH@ 7


INS MethodDeclaration@@List<NameOnly>, MethodName:findAllInterfaceProjectedBy,  @TO@ TypeDeclaration@@[public]UserRepository, [JpaRepository<User,Integer>, JpaSpecificationExecutor<User>, UserRepositoryCustom] @AT@ 21323 @LENGTH@ 30
---INS ParameterizedType@@List<NameOnly> @TO@ MethodDeclaration@@List<NameOnly>, MethodName:findAllInterfaceProjectedBy,  @AT@ 21308 @LENGTH@ 14
------INS SimpleType@@List @TO@ ParameterizedType@@List<NameOnly> @AT@ 21308 @LENGTH@ 4
------INS SimpleType@@NameOnly @TO@ ParameterizedType@@List<NameOnly> @AT@ 21313 @LENGTH@ 8
---INS SimpleName@@MethodName:findAllInterfaceProjectedBy @TO@ MethodDeclaration@@List<NameOnly>, MethodName:findAllInterfaceProjectedBy,  @AT@ 21323 @LENGTH@ 27


UPD ExpressionStatement@@MethodInvocation:builder.append("(?<=from)") @TO@ MethodInvocation:builder.append("(?<=\\bfrom)") @AT@ 6003 @LENGTH@ 28
---UPD MethodInvocation@@builder.append("(?<=from)") @TO@ builder.append("(?<=\\bfrom)") @AT@ 6003 @LENGTH@ 27
------UPD SimpleName@@MethodName:append:["(?<=from)"] @TO@ MethodName:append:["(?<=\\bfrom)"] @AT@ 6011 @LENGTH@ 19
---------UPD StringLiteral@@"(?<=from)" @TO@ "(?<=\\bfrom)" @AT@ 6018 @LENGTH@ 11


INS MethodDeclaration@@public, void, MethodName:testMakeRelative,  @TO@ TypeDeclaration@@[public]TestFileUtils,  @AT@ 10972 @LENGTH@ 753
---INS Modifier@@public @TO@ MethodDeclaration@@public, void, MethodName:testMakeRelative,  @AT@ 10972 @LENGTH@ 6
---INS PrimitiveType@@void @TO@ MethodDeclaration@@public, void, MethodName:testMakeRelative,  @AT@ 10979 @LENGTH@ 4
---INS SimpleName@@MethodName:testMakeRelative @TO@ MethodDeclaration@@public, void, MethodName:testMakeRelative,  @AT@ 10984 @LENGTH@ 16
---INS VariableDeclarationStatement@@Path parentPath=new Path("/user/hive/database"); @TO@ MethodDeclaration@@public, void, MethodName:testMakeRelative,  @AT@ 11009 @LENGTH@ 50
------INS SimpleType@@Path @TO@ VariableDeclarationStatement@@Path parentPath=new Path("/user/hive/database"); @AT@ 11009 @LENGTH@ 4
------INS VariableDeclarationFragment@@parentPath=new Path("/user/hive/database") @TO@ VariableDeclarationStatement@@Path parentPath=new Path("/user/hive/database"); @AT@ 11014 @LENGTH@ 44
---------INS SimpleName@@parentPath @TO@ VariableDeclarationFragment@@parentPath=new Path("/user/hive/database") @AT@ 11014 @LENGTH@ 10
---------INS ClassInstanceCreation@@Path["/user/hive/database"] @TO@ VariableDeclarationFragment@@parentPath=new Path("/user/hive/database") @AT@ 11027 @LENGTH@ 31
------------INS New@@new @TO@ ClassInstanceCreation@@Path["/user/hive/database"] @AT@ 11027 @LENGTH@ 3
------------INS SimpleType@@Path @TO@ ClassInstanceCreation@@Path["/user/hive/database"] @AT@ 11031 @LENGTH@ 4
------------INS StringLiteral@@"/user/hive/database" @TO@ ClassInstanceCreation@@Path["/user/hive/database"] @AT@ 11036 @LENGTH@ 21
---INS VariableDeclarationStatement@@Path childPath=new Path(parentPath,"table/dir/subdir"); @TO@ MethodDeclaration@@public, void, MethodName:testMakeRelative,  @AT@ 11064 @LENGTH@ 58
------INS SimpleType@@Path @TO@ VariableDeclarationStatement@@Path childPath=new Path(parentPath,"table/dir/subdir"); @AT@ 11064 @LENGTH@ 4
------INS VariableDeclarationFragment@@childPath=new Path(parentPath,"table/dir/subdir") @TO@ VariableDeclarationStatement@@Path childPath=new Path(parentPath,"table/dir/subdir"); @AT@ 11069 @LENGTH@ 52
---------INS SimpleName@@childPath @TO@ VariableDeclarationFragment@@childPath=new Path(parentPath,"table/dir/subdir") @AT@ 11069 @LENGTH@ 9
---------INS ClassInstanceCreation@@Path[parentPath, "table/dir/subdir"] @TO@ VariableDeclarationFragment@@childPath=new Path(parentPath,"table/dir/subdir") @AT@ 11081 @LENGTH@ 40
------------INS New@@new @TO@ ClassInstanceCreation@@Path[parentPath, "table/dir/subdir"] @AT@ 11081 @LENGTH@ 3
------------INS SimpleType@@Path @TO@ ClassInstanceCreation@@Path[parentPath, "table/dir/subdir"] @AT@ 11085 @LENGTH@ 4
------------INS SimpleName@@parentPath @TO@ ClassInstanceCreation@@Path[parentPath, "table/dir/subdir"] @AT@ 11090 @LENGTH@ 10
------------INS StringLiteral@@"table/dir/subdir" @TO@ ClassInstanceCreation@@Path[parentPath, "table/dir/subdir"] @AT@ 11102 @LENGTH@ 18
---INS VariableDeclarationStatement@@Path relativePath=FileUtils.makeRelative(parentPath,childPath); @TO@ MethodDeclaration@@public, void, MethodName:testMakeRelative,  @AT@ 11127 @LENGTH@ 66
------INS SimpleType@@Path @TO@ VariableDeclarationStatement@@Path relativePath=FileUtils.makeRelative(parentPath,childPath); @AT@ 11127 @LENGTH@ 4
------INS VariableDeclarationFragment@@relativePath=FileUtils.makeRelative(parentPath,childPath) @TO@ VariableDeclarationStatement@@Path relativePath=FileUtils.makeRelative(parentPath,childPath); @AT@ 11132 @LENGTH@ 60
---------INS SimpleName@@relativePath @TO@ VariableDeclarationFragment@@relativePath=FileUtils.makeRelative(parentPath,childPath) @AT@ 11132 @LENGTH@ 12
---------INS MethodInvocation@@FileUtils.makeRelative(parentPath,childPath) @TO@ VariableDeclarationFragment@@relativePath=FileUtils.makeRelative(parentPath,childPath) @AT@ 11147 @LENGTH@ 45
------------INS SimpleName@@Name:FileUtils @TO@ MethodInvocation@@FileUtils.makeRelative(parentPath,childPath) @AT@ 11147 @LENGTH@ 9
------------INS SimpleName@@MethodName:makeRelative:[parentPath, childPath] @TO@ MethodInvocation@@FileUtils.makeRelative(parentPath,childPath) @AT@ 11157 @LENGTH@ 35
---------------INS SimpleName@@parentPath @TO@ SimpleName@@MethodName:makeRelative:[parentPath, childPath] @AT@ 11170 @LENGTH@ 10
---------------INS SimpleName@@childPath @TO@ SimpleName@@MethodName:makeRelative:[parentPath, childPath] @AT@ 11182 @LENGTH@ 9
---INS ExpressionStatement@@MethodInvocation:assertEquals("table/dir/subdir",relativePath.toString()) @TO@ MethodDeclaration@@public, void, MethodName:testMakeRelative,  @AT@ 11198 @LENGTH@ 58
------INS MethodInvocation@@assertEquals("table/dir/subdir",relativePath.toString()) @TO@ ExpressionStatement@@MethodInvocation:assertEquals("table/dir/subdir",relativePath.toString()) @AT@ 11198 @LENGTH@ 57
---------INS SimpleName@@MethodName:assertEquals:["table/dir/subdir", relativePath.toString()] @TO@ MethodInvocation@@assertEquals("table/dir/subdir",relativePath.toString()) @AT@ 11198 @LENGTH@ 57
------------INS StringLiteral@@"table/dir/subdir" @TO@ SimpleName@@MethodName:assertEquals:["table/dir/subdir", relativePath.toString()] @AT@ 11211 @LENGTH@ 18
------------INS MethodInvocation@@relativePath.toString() @TO@ SimpleName@@MethodName:assertEquals:["table/dir/subdir", relativePath.toString()] @AT@ 11231 @LENGTH@ 23
---------------INS SimpleName@@Name:relativePath @TO@ MethodInvocation@@relativePath.toString() @AT@ 11231 @LENGTH@ 12
---------------INS SimpleName@@MethodName:toString:[] @TO@ MethodInvocation@@relativePath.toString() @AT@ 11244 @LENGTH@ 10
---INS ExpressionStatement@@Assignment:relativePath=FileUtils.makeRelative(new Path(Path.SEPARATOR),childPath) @TO@ MethodDeclaration@@public, void, MethodName:testMakeRelative,  @AT@ 11294 @LENGTH@ 75
------INS Assignment@@relativePath=FileUtils.makeRelative(new Path(Path.SEPARATOR),childPath) @TO@ ExpressionStatement@@Assignment:relativePath=FileUtils.makeRelative(new Path(Path.SEPARATOR),childPath) @AT@ 11294 @LENGTH@ 74
---------INS SimpleName@@relativePath @TO@ Assignment@@relativePath=FileUtils.makeRelative(new Path(Path.SEPARATOR),childPath) @AT@ 11294 @LENGTH@ 12
---------INS Operator@@= @TO@ Assignment@@relativePath=FileUtils.makeRelative(new Path(Path.SEPARATOR),childPath) @AT@ 11306 @LENGTH@ 1
---------INS MethodInvocation@@FileUtils.makeRelative(new Path(Path.SEPARATOR),childPath) @TO@ Assignment@@relativePath=FileUtils.makeRelative(new Path(Path.SEPARATOR),childPath) @AT@ 11309 @LENGTH@ 59
------------INS SimpleName@@Name:FileUtils @TO@ MethodInvocation@@FileUtils.makeRelative(new Path(Path.SEPARATOR),childPath) @AT@ 11309 @LENGTH@ 9
------------INS SimpleName@@MethodName:makeRelative:[new Path(Path.SEPARATOR), childPath] @TO@ MethodInvocation@@FileUtils.makeRelative(new Path(Path.SEPARATOR),childPath) @AT@ 11319 @LENGTH@ 49
---------------INS ClassInstanceCreation@@Path[Path.SEPARATOR] @TO@ SimpleName@@MethodName:makeRelative:[new Path(Path.SEPARATOR), childPath] @AT@ 11332 @LENGTH@ 24
------------------INS New@@new @TO@ ClassInstanceCreation@@Path[Path.SEPARATOR] @AT@ 11332 @LENGTH@ 3
------------------INS SimpleType@@Path @TO@ ClassInstanceCreation@@Path[Path.SEPARATOR] @AT@ 11336 @LENGTH@ 4
------------------INS QualifiedName@@Path.SEPARATOR @TO@ ClassInstanceCreation@@Path[Path.SEPARATOR] @AT@ 11341 @LENGTH@ 14
---------------------INS SimpleName@@Path @TO@ QualifiedName@@Path.SEPARATOR @AT@ 11341 @LENGTH@ 4
---------------------INS SimpleName@@SEPARATOR @TO@ QualifiedName@@Path.SEPARATOR @AT@ 11346 @LENGTH@ 9
---------------INS SimpleName@@childPath @TO@ SimpleName@@MethodName:makeRelative:[new Path(Path.SEPARATOR), childPath] @AT@ 11358 @LENGTH@ 9
---INS ExpressionStatement@@MethodInvocation:assertEquals("user/hive/database/table/dir/subdir",relativePath.toString()) @TO@ MethodDeclaration@@public, void, MethodName:testMakeRelative,  @AT@ 11374 @LENGTH@ 77
------INS MethodInvocation@@assertEquals("user/hive/database/table/dir/subdir",relativePath.toString()) @TO@ ExpressionStatement@@MethodInvocation:assertEquals("user/hive/database/table/dir/subdir",relativePath.toString()) @AT@ 11374 @LENGTH@ 76
---------INS SimpleName@@MethodName:assertEquals:["user/hive/database/table/dir/subdir", relativePath.toString()] @TO@ MethodInvocation@@assertEquals("user/hive/database/table/dir/subdir",relativePath.toString()) @AT@ 11374 @LENGTH@ 76
------------INS StringLiteral@@"user/hive/database/table/dir/subdir" @TO@ SimpleName@@MethodName:assertEquals:["user/hive/database/table/dir/subdir", relativePath.toString()] @AT@ 11387 @LENGTH@ 37
------------INS MethodInvocation@@relativePath.toString() @TO@ SimpleName@@MethodName:assertEquals:["user/hive/database/table/dir/subdir", relativePath.toString()] @AT@ 11426 @LENGTH@ 23
---------------INS SimpleName@@Name:relativePath @TO@ MethodInvocation@@relativePath.toString() @AT@ 11426 @LENGTH@ 12
---------------INS SimpleName@@MethodName:toString:[] @TO@ MethodInvocation@@relativePath.toString() @AT@ 11439 @LENGTH@ 10
---INS ExpressionStatement@@Assignment:childPath=new Path("/user/hive/database1/table/dir/subdir") @TO@ MethodDeclaration@@public, void, MethodName:testMakeRelative,  @AT@ 11528 @LENGTH@ 62
------INS Assignment@@childPath=new Path("/user/hive/database1/table/dir/subdir") @TO@ ExpressionStatement@@Assignment:childPath=new Path("/user/hive/database1/table/dir/subdir") @AT@ 11528 @LENGTH@ 61
---------INS SimpleName@@childPath @TO@ Assignment@@childPath=new Path("/user/hive/database1/table/dir/subdir") @AT@ 11528 @LENGTH@ 9
---------INS Operator@@= @TO@ Assignment@@childPath=new Path("/user/hive/database1/table/dir/subdir") @AT@ 11537 @LENGTH@ 1
---------INS ClassInstanceCreation@@Path["/user/hive/database1/table/dir/subdir"] @TO@ Assignment@@childPath=new Path("/user/hive/database1/table/dir/subdir") @AT@ 11540 @LENGTH@ 49
------------INS New@@new @TO@ ClassInstanceCreation@@Path["/user/hive/database1/table/dir/subdir"] @AT@ 11540 @LENGTH@ 3
------------INS SimpleType@@Path @TO@ ClassInstanceCreation@@Path["/user/hive/database1/table/dir/subdir"] @AT@ 11544 @LENGTH@ 4
------------INS StringLiteral@@"/user/hive/database1/table/dir/subdir" @TO@ ClassInstanceCreation@@Path["/user/hive/database1/table/dir/subdir"] @AT@ 11549 @LENGTH@ 39
---INS ExpressionStatement@@Assignment:relativePath=FileUtils.makeRelative(parentPath,childPath) @TO@ MethodDeclaration@@public, void, MethodName:testMakeRelative,  @AT@ 11595 @LENGTH@ 61
------INS Assignment@@relativePath=FileUtils.makeRelative(parentPath,childPath) @TO@ ExpressionStatement@@Assignment:relativePath=FileUtils.makeRelative(parentPath,childPath) @AT@ 11595 @LENGTH@ 60
---------INS SimpleName@@relativePath @TO@ Assignment@@relativePath=FileUtils.makeRelative(parentPath,childPath) @AT@ 11595 @LENGTH@ 12
---------INS Operator@@= @TO@ Assignment@@relativePath=FileUtils.makeRelative(parentPath,childPath) @AT@ 11607 @LENGTH@ 1
---------INS MethodInvocation@@FileUtils.makeRelative(parentPath,childPath) @TO@ Assignment@@relativePath=FileUtils.makeRelative(parentPath,childPath) @AT@ 11610 @LENGTH@ 45
------------INS SimpleName@@Name:FileUtils @TO@ MethodInvocation@@FileUtils.makeRelative(parentPath,childPath) @AT@ 11610 @LENGTH@ 9
------------INS SimpleName@@MethodName:makeRelative:[parentPath, childPath] @TO@ MethodInvocation@@FileUtils.makeRelative(parentPath,childPath) @AT@ 11620 @LENGTH@ 35
---------------INS SimpleName@@parentPath @TO@ SimpleName@@MethodName:makeRelative:[parentPath, childPath] @AT@ 11633 @LENGTH@ 10
---------------INS SimpleName@@childPath @TO@ SimpleName@@MethodName:makeRelative:[parentPath, childPath] @AT@ 11645 @LENGTH@ 9
---INS ExpressionStatement@@MethodInvocation:assertEquals(childPath.toString(),relativePath.toString()) @TO@ MethodDeclaration@@public, void, MethodName:testMakeRelative,  @AT@ 11661 @LENGTH@ 60
------INS MethodInvocation@@assertEquals(childPath.toString(),relativePath.toString()) @TO@ ExpressionStatement@@MethodInvocation:assertEquals(childPath.toString(),relativePath.toString()) @AT@ 11661 @LENGTH@ 59
---------INS SimpleName@@MethodName:assertEquals:[childPath.toString(), relativePath.toString()] @TO@ MethodInvocation@@assertEquals(childPath.toString(),relativePath.toString()) @AT@ 11661 @LENGTH@ 59
------------INS MethodInvocation@@childPath.toString() @TO@ SimpleName@@MethodName:assertEquals:[childPath.toString(), relativePath.toString()] @AT@ 11674 @LENGTH@ 20
---------------INS SimpleName@@Name:childPath @TO@ MethodInvocation@@childPath.toString() @AT@ 11674 @LENGTH@ 9
---------------INS SimpleName@@MethodName:toString:[] @TO@ MethodInvocation@@childPath.toString() @AT@ 11684 @LENGTH@ 10
------------INS MethodInvocation@@relativePath.toString() @TO@ SimpleName@@MethodName:assertEquals:[childPath.toString(), relativePath.toString()] @AT@ 11696 @LENGTH@ 23
---------------INS SimpleName@@Name:relativePath @TO@ MethodInvocation@@relativePath.toString() @AT@ 11696 @LENGTH@ 12
---------------INS SimpleName@@MethodName:toString:[] @TO@ MethodInvocation@@relativePath.toString() @AT@ 11709 @LENGTH@ 10


UPD MethodDeclaration@@static, Path, MethodName:create, final CommandConfiguration config, IOException,  @TO@ static, Path, MethodName:create, final BaseCommandConfiguration config, IOException,  @AT@ 1355 @LENGTH@ 1205
---UPD SingleVariableDeclaration@@final CommandConfiguration config @TO@ final BaseCommandConfiguration config @AT@ 1374 @LENGTH@ 33
------UPD SimpleType@@CommandConfiguration @TO@ BaseCommandConfiguration @AT@ 1380 @LENGTH@ 20


UPD TypeDeclaration@@[@Stateful, @Transactional, public]SearchBean,  @TO@ [@ApplicationScoped, @Transactional, public]SearchBean,  @AT@ 1452 @LENGTH@ 1074
---UPD MarkerAnnotation@@@Stateful @TO@ @ApplicationScoped @AT@ 1452 @LENGTH@ 9


MOV FieldDeclaration@@private, static, final, Logger, [LOG=LoggerFactory.getLogger(KafkaConsumerAsyncManualCommitIT.class)] @TO@ TypeDeclaration@@[public]KafkaConsumerAsyncManualCommitIT, BaseEmbeddedKafkaTestSupport @AT@ 1958 @LENGTH@ 98


UPD VariableDeclarationStatement@@final Object[] els=new Object[]{"1","3","5","7","2","4","6"}; @TO@ final Object[] els={"1","3","5","7","2","4","6"}; @AT@ 2051 @LENGTH@ 70
---UPD VariableDeclarationFragment@@els=new Object[]{"1","3","5","7","2","4","6"} @TO@ els={"1","3","5","7","2","4","6"} @AT@ 2066 @LENGTH@ 54
------DEL ArrayCreation@@new Object[]{"1","3","5","7","2","4","6"} @AT@ 2072 @LENGTH@ 48
---------DEL ArrayType@@Object[] @AT@ 2076 @LENGTH@ 8
------------DEL SimpleType@@Object @AT@ 2076 @LENGTH@ 6
---------DEL ArrayInitializer@@{"1","3","5","7","2","4","6"} @AT@ 2085 @LENGTH@ 35
------INS ArrayInitializer@@{"1","3","5","7","2","4","6"} @TO@ VariableDeclarationFragment@@els=new Object[]{"1","3","5","7","2","4","6"} @AT@ 2072 @LENGTH@ 35
---------MOV StringLiteral@@"1" @TO@ ArrayInitializer@@{"1","3","5","7","2","4","6"} @AT@ 2086 @LENGTH@ 3
---------MOV StringLiteral@@"3" @TO@ ArrayInitializer@@{"1","3","5","7","2","4","6"} @AT@ 2091 @LENGTH@ 3
---------MOV StringLiteral@@"5" @TO@ ArrayInitializer@@{"1","3","5","7","2","4","6"} @AT@ 2096 @LENGTH@ 3
---------MOV StringLiteral@@"7" @TO@ ArrayInitializer@@{"1","3","5","7","2","4","6"} @AT@ 2101 @LENGTH@ 3
---------MOV StringLiteral@@"2" @TO@ ArrayInitializer@@{"1","3","5","7","2","4","6"} @AT@ 2106 @LENGTH@ 3
---------MOV StringLiteral@@"4" @TO@ ArrayInitializer@@{"1","3","5","7","2","4","6"} @AT@ 2111 @LENGTH@ 3
---------MOV StringLiteral@@"6" @TO@ ArrayInitializer@@{"1","3","5","7","2","4","6"} @AT@ 2116 @LENGTH@ 3


UPD MethodDeclaration@@public, ExpressionClause<ResumableDefinition>, MethodName:resumable,  @TO@ public, ResumableDefinition, MethodName:resumable,  @AT@ 158675 @LENGTH@ 203
---DEL ParameterizedType@@ExpressionClause<ResumableDefinition> @AT@ 158682 @LENGTH@ 37
------DEL SimpleType@@ExpressionClause @AT@ 158682 @LENGTH@ 16
------DEL SimpleType@@ResumableDefinition @AT@ 158699 @LENGTH@ 19
---INS SimpleType@@ResumableDefinition @TO@ MethodDeclaration@@public, ExpressionClause<ResumableDefinition>, MethodName:resumable,  @AT@ 158682 @LENGTH@ 19
---UPD ReturnStatement@@MethodInvocation:createAndSetExpression(answer) @TO@ SimpleName:answer @AT@ 158834 @LENGTH@ 38
------INS SimpleName@@answer @TO@ ReturnStatement@@MethodInvocation:createAndSetExpression(answer) @AT@ 158823 @LENGTH@ 6
------DEL MethodInvocation@@createAndSetExpression(answer) @AT@ 158841 @LENGTH@ 30
---------DEL SimpleName@@MethodName:createAndSetExpression:[answer] @AT@ 158841 @LENGTH@ 30
------------DEL SimpleName@@answer @AT@ 158864 @LENGTH@ 6


UPD IfStatement@@if (filter instanceof AuthorizationFilter) {  AuthorizationManager<HttpServletRequest> authorizationManager=((AuthorizationFilter)filter).getAuthorizationManager();  privilegeEvaluators.add(new AuthorizationManagerWebInvocationPrivilegeEvaluator(authorizationManager));} @TO@ if (filter instanceof AuthorizationFilter) {  AuthorizationManager<HttpServletRequest> authorizationManager=((AuthorizationFilter)filter).getAuthorizationManager();  AuthorizationManagerWebInvocationPrivilegeEvaluator evaluator=new AuthorizationManagerWebInvocationPrivilegeEvaluator(authorizationManager);  evaluator.setServletContext(this.servletContext);  privilegeEvaluators.add(evaluator);} @AT@ 15477 @LENGTH@ 290
---UPD Block@@ThenBody:{  AuthorizationManager<HttpServletRequest> authorizationManager=((AuthorizationFilter)filter).getAuthorizationManager();  privilegeEvaluators.add(new AuthorizationManagerWebInvocationPrivilegeEvaluator(authorizationManager));} @TO@ ThenBody:{  AuthorizationManager<HttpServletRequest> authorizationManager=((AuthorizationFilter)filter).getAuthorizationManager();  AuthorizationManagerWebInvocationPrivilegeEvaluator evaluator=new AuthorizationManagerWebInvocationPrivilegeEvaluator(authorizationManager);  evaluator.setServletContext(this.servletContext);  privilegeEvaluators.add(evaluator);} @AT@ 15520 @LENGTH@ 247
------INS VariableDeclarationStatement@@AuthorizationManagerWebInvocationPrivilegeEvaluator evaluator=new AuthorizationManagerWebInvocationPrivilegeEvaluator(authorizationManager); @TO@ Block@@ThenBody:{  AuthorizationManager<HttpServletRequest> authorizationManager=((AuthorizationFilter)filter).getAuthorizationManager();  privilegeEvaluators.add(new AuthorizationManagerWebInvocationPrivilegeEvaluator(authorizationManager));} @AT@ 15659 @LENGTH@ 149
---------INS SimpleType@@AuthorizationManagerWebInvocationPrivilegeEvaluator @TO@ VariableDeclarationStatement@@AuthorizationManagerWebInvocationPrivilegeEvaluator evaluator=new AuthorizationManagerWebInvocationPrivilegeEvaluator(authorizationManager); @AT@ 15659 @LENGTH@ 51
---------INS VariableDeclarationFragment@@evaluator=new AuthorizationManagerWebInvocationPrivilegeEvaluator(authorizationManager) @TO@ VariableDeclarationStatement@@AuthorizationManagerWebInvocationPrivilegeEvaluator evaluator=new AuthorizationManagerWebInvocationPrivilegeEvaluator(authorizationManager); @AT@ 15711 @LENGTH@ 96
------------INS SimpleName@@evaluator @TO@ VariableDeclarationFragment@@evaluator=new AuthorizationManagerWebInvocationPrivilegeEvaluator(authorizationManager) @AT@ 15711 @LENGTH@ 9
------------INS ClassInstanceCreation@@AuthorizationManagerWebInvocationPrivilegeEvaluator[authorizationManager] @TO@ VariableDeclarationFragment@@evaluator=new AuthorizationManagerWebInvocationPrivilegeEvaluator(authorizationManager) @AT@ 15723 @LENGTH@ 84
---------------MOV New@@new @TO@ ClassInstanceCreation@@AuthorizationManagerWebInvocationPrivilegeEvaluator[authorizationManager] @AT@ 15683 @LENGTH@ 3
---------------MOV SimpleType@@AuthorizationManagerWebInvocationPrivilegeEvaluator @TO@ ClassInstanceCreation@@AuthorizationManagerWebInvocationPrivilegeEvaluator[authorizationManager] @AT@ 15687 @LENGTH@ 51
---------------MOV SimpleName@@authorizationManager @TO@ ClassInstanceCreation@@AuthorizationManagerWebInvocationPrivilegeEvaluator[authorizationManager] @AT@ 15739 @LENGTH@ 20
------DEL ExpressionStatement@@MethodInvocation:privilegeEvaluators.add(new AuthorizationManagerWebInvocationPrivilegeEvaluator(authorizationManager)) @AT@ 15659 @LENGTH@ 103
---------DEL MethodInvocation@@privilegeEvaluators.add(new AuthorizationManagerWebInvocationPrivilegeEvaluator(authorizationManager)) @AT@ 15659 @LENGTH@ 102
------------DEL SimpleName@@Name:privilegeEvaluators @AT@ 15659 @LENGTH@ 19
------------DEL SimpleName@@MethodName:add:[new AuthorizationManagerWebInvocationPrivilegeEvaluator(authorizationManager)] @AT@ 15679 @LENGTH@ 82
---------------DEL ClassInstanceCreation@@AuthorizationManagerWebInvocationPrivilegeEvaluator[authorizationManager] @AT@ 15683 @LENGTH@ 77
------INS ExpressionStatement@@MethodInvocation:evaluator.setServletContext(this.servletContext) @TO@ Block@@ThenBody:{  AuthorizationManager<HttpServletRequest> authorizationManager=((AuthorizationFilter)filter).getAuthorizationManager();  privilegeEvaluators.add(new AuthorizationManagerWebInvocationPrivilegeEvaluator(authorizationManager));} @AT@ 15813 @LENGTH@ 49
---------INS MethodInvocation@@evaluator.setServletContext(this.servletContext) @TO@ ExpressionStatement@@MethodInvocation:evaluator.setServletContext(this.servletContext) @AT@ 15813 @LENGTH@ 48
------------INS SimpleName@@Name:evaluator @TO@ MethodInvocation@@evaluator.setServletContext(this.servletContext) @AT@ 15813 @LENGTH@ 9
------------INS SimpleName@@MethodName:setServletContext:[this.servletContext] @TO@ MethodInvocation@@evaluator.setServletContext(this.servletContext) @AT@ 15823 @LENGTH@ 38
---------------INS FieldAccess@@this.servletContext @TO@ SimpleName@@MethodName:setServletContext:[this.servletContext] @AT@ 15841 @LENGTH@ 19
------------------INS ThisExpression@@this @TO@ FieldAccess@@this.servletContext @AT@ 15841 @LENGTH@ 4
------------------INS SimpleName@@servletContext @TO@ FieldAccess@@this.servletContext @AT@ 15846 @LENGTH@ 14
------INS ExpressionStatement@@MethodInvocation:privilegeEvaluators.add(evaluator) @TO@ Block@@ThenBody:{  AuthorizationManager<HttpServletRequest> authorizationManager=((AuthorizationFilter)filter).getAuthorizationManager();  privilegeEvaluators.add(new AuthorizationManagerWebInvocationPrivilegeEvaluator(authorizationManager));} @AT@ 15867 @LENGTH@ 35
---------INS MethodInvocation@@privilegeEvaluators.add(evaluator) @TO@ ExpressionStatement@@MethodInvocation:privilegeEvaluators.add(evaluator) @AT@ 15867 @LENGTH@ 34
------------INS SimpleName@@Name:privilegeEvaluators @TO@ MethodInvocation@@privilegeEvaluators.add(evaluator) @AT@ 15867 @LENGTH@ 19
------------INS SimpleName@@MethodName:add:[evaluator] @TO@ MethodInvocation@@privilegeEvaluators.add(evaluator) @AT@ 15887 @LENGTH@ 14
---------------INS SimpleName@@evaluator @TO@ SimpleName@@MethodName:add:[evaluator] @AT@ 15891 @LENGTH@ 9


UPD ReturnStatement@@MethodInvocation:endpoint.getArango().db(database).graph(graph) @TO@ MethodInvocation:endpoint.getArango().db(DbName.of(database)).graph(graph) @AT@ 15284 @LENGTH@ 54
---UPD MethodInvocation@@endpoint.getArango().db(database).graph(graph) @TO@ endpoint.getArango().db(DbName.of(database)).graph(graph) @AT@ 15291 @LENGTH@ 46
------UPD MethodInvocation@@MethodName:db:[database] @TO@ MethodName:db:[DbName.of(database)] @AT@ 15291 @LENGTH@ 33
---------DEL SimpleName@@database @AT@ 15315 @LENGTH@ 8
---------INS MethodInvocation@@DbName.of(database) @TO@ MethodInvocation@@MethodName:db:[database] @AT@ 15343 @LENGTH@ 19
------------INS SimpleName@@Name:DbName @TO@ MethodInvocation@@DbName.of(database) @AT@ 15343 @LENGTH@ 6
------------INS SimpleName@@MethodName:of:[database] @TO@ MethodInvocation@@DbName.of(database) @AT@ 15350 @LENGTH@ 12
---------------INS SimpleName@@database @TO@ SimpleName@@MethodName:of:[database] @AT@ 15353 @LENGTH@ 8


INS ExpressionStatement@@MethodInvocation:assertMockEndpointsSatisfied() @TO@ MethodDeclaration@@public, void, MethodName:pollTimeout, InterruptedException,  @AT@ 3051 @LENGTH@ 31
---INS MethodInvocation@@MethodName:assertMockEndpointsSatisfied:[] @TO@ ExpressionStatement@@MethodInvocation:assertMockEndpointsSatisfied() @AT@ 3051 @LENGTH@ 30


UPD VariableDeclarationStatement@@BeanInfoTypeResolver typeResolver=CamelContextHelper.findByType(camelContext,BeanInfoTypeResolver.class); @TO@ BeanInfoTypeResolver typeResolver=CamelContextHelper.findSingleByType(camelContext,BeanInfoTypeResolver.class); @AT@ 4865 @LENGTH@ 108
---UPD VariableDeclarationFragment@@typeResolver=CamelContextHelper.findByType(camelContext,BeanInfoTypeResolver.class) @TO@ typeResolver=CamelContextHelper.findSingleByType(camelContext,BeanInfoTypeResolver.class) @AT@ 4886 @LENGTH@ 86
------UPD MethodInvocation@@CamelContextHelper.findByType(camelContext,BeanInfoTypeResolver.class) @TO@ CamelContextHelper.findSingleByType(camelContext,BeanInfoTypeResolver.class) @AT@ 4901 @LENGTH@ 71
---------UPD SimpleName@@MethodName:findByType:[camelContext, BeanInfoTypeResolver.class] @TO@ MethodName:findSingleByType:[camelContext, BeanInfoTypeResolver.class] @AT@ 4920 @LENGTH@ 52


UPD VariableDeclarationStatement@@ArangoDatabase database=endpoint.getArango().db(endpoint.getConfiguration().getDatabase()); @TO@ ArangoDatabase database=endpoint.getArango().db(DbName.of(endpoint.getConfiguration().getDatabase())); @AT@ 13209 @LENGTH@ 93
---UPD VariableDeclarationFragment@@database=endpoint.getArango().db(endpoint.getConfiguration().getDatabase()) @TO@ database=endpoint.getArango().db(DbName.of(endpoint.getConfiguration().getDatabase())) @AT@ 13224 @LENGTH@ 77
------UPD MethodInvocation@@endpoint.getArango().db(endpoint.getConfiguration().getDatabase()) @TO@ endpoint.getArango().db(DbName.of(endpoint.getConfiguration().getDatabase())) @AT@ 13235 @LENGTH@ 66
---------INS SimpleName@@MethodName:db:[DbName.of(endpoint.getConfiguration().getDatabase())] @TO@ MethodInvocation@@endpoint.getArango().db(endpoint.getConfiguration().getDatabase()) @AT@ 13256 @LENGTH@ 56
------------INS MethodInvocation@@DbName.of(endpoint.getConfiguration().getDatabase()) @TO@ SimpleName@@MethodName:db:[DbName.of(endpoint.getConfiguration().getDatabase())] @AT@ 13259 @LENGTH@ 52
---------------MOV SimpleName@@MethodName:db:[endpoint.getConfiguration().getDatabase()] @TO@ MethodInvocation@@DbName.of(endpoint.getConfiguration().getDatabase()) @AT@ 13256 @LENGTH@ 45
---------------INS SimpleName@@Name:DbName @TO@ MethodInvocation@@DbName.of(endpoint.getConfiguration().getDatabase()) @AT@ 13259 @LENGTH@ 6
---------UPD SimpleName@@MethodName:db:[endpoint.getConfiguration().getDatabase()] @TO@ MethodName:of:[endpoint.getConfiguration().getDatabase()] @AT@ 13256 @LENGTH@ 45


INS MethodDeclaration@@void, MethodName:shouldCountLargeStream,  @TO@ TypeDeclaration@@CloseableIteratorUnitTests,  @AT@ 1685 @LENGTH@ 229
---INS PrimitiveType@@void @TO@ MethodDeclaration@@void, MethodName:shouldCountLargeStream,  @AT@ 1680 @LENGTH@ 4
---INS SimpleName@@MethodName:shouldCountLargeStream @TO@ MethodDeclaration@@void, MethodName:shouldCountLargeStream,  @AT@ 1685 @LENGTH@ 22
---INS VariableDeclarationStatement@@CloseableIteratorImpl<Integer> iterator=new CloseableIteratorImpl<>(IntStream.range(0,2048).boxed().iterator()); @TO@ MethodDeclaration@@void, MethodName:shouldCountLargeStream,  @AT@ 1715 @LENGTH@ 115
------INS ParameterizedType@@CloseableIteratorImpl<Integer> @TO@ VariableDeclarationStatement@@CloseableIteratorImpl<Integer> iterator=new CloseableIteratorImpl<>(IntStream.range(0,2048).boxed().iterator()); @AT@ 1715 @LENGTH@ 30
---------INS SimpleType@@CloseableIteratorImpl @TO@ ParameterizedType@@CloseableIteratorImpl<Integer> @AT@ 1715 @LENGTH@ 21
---------INS SimpleType@@Integer @TO@ ParameterizedType@@CloseableIteratorImpl<Integer> @AT@ 1737 @LENGTH@ 7
------INS VariableDeclarationFragment@@iterator=new CloseableIteratorImpl<>(IntStream.range(0,2048).boxed().iterator()) @TO@ VariableDeclarationStatement@@CloseableIteratorImpl<Integer> iterator=new CloseableIteratorImpl<>(IntStream.range(0,2048).boxed().iterator()); @AT@ 1746 @LENGTH@ 83
---------INS SimpleName@@iterator @TO@ VariableDeclarationFragment@@iterator=new CloseableIteratorImpl<>(IntStream.range(0,2048).boxed().iterator()) @AT@ 1746 @LENGTH@ 8
---------INS ClassInstanceCreation@@CloseableIteratorImpl<>[IntStream.range(0,2048).boxed().iterator()] @TO@ VariableDeclarationFragment@@iterator=new CloseableIteratorImpl<>(IntStream.range(0,2048).boxed().iterator()) @AT@ 1757 @LENGTH@ 72
------------INS New@@new @TO@ ClassInstanceCreation@@CloseableIteratorImpl<>[IntStream.range(0,2048).boxed().iterator()] @AT@ 1757 @LENGTH@ 3
------------INS ParameterizedType@@CloseableIteratorImpl<> @TO@ ClassInstanceCreation@@CloseableIteratorImpl<>[IntStream.range(0,2048).boxed().iterator()] @AT@ 1761 @LENGTH@ 23
---------------INS SimpleType@@CloseableIteratorImpl @TO@ ParameterizedType@@CloseableIteratorImpl<> @AT@ 1761 @LENGTH@ 21
------------INS MethodInvocation@@IntStream.range(0,2048).boxed().iterator() @TO@ ClassInstanceCreation@@CloseableIteratorImpl<>[IntStream.range(0,2048).boxed().iterator()] @AT@ 1785 @LENGTH@ 43
---------------INS MethodInvocation@@MethodName:boxed:[] @TO@ MethodInvocation@@IntStream.range(0,2048).boxed().iterator() @AT@ 1785 @LENGTH@ 32
---------------INS MethodInvocation@@MethodName:range:[0, 2048] @TO@ MethodInvocation@@IntStream.range(0,2048).boxed().iterator() @AT@ 1785 @LENGTH@ 24
------------------INS NumberLiteral@@0 @TO@ MethodInvocation@@MethodName:range:[0, 2048] @AT@ 1801 @LENGTH@ 1
------------------INS NumberLiteral@@2048 @TO@ MethodInvocation@@MethodName:range:[0, 2048] @AT@ 1804 @LENGTH@ 4
---------------INS SimpleName@@Name:IntStream @TO@ MethodInvocation@@IntStream.range(0,2048).boxed().iterator() @AT@ 1785 @LENGTH@ 9
---------------INS SimpleName@@MethodName:iterator:[] @TO@ MethodInvocation@@IntStream.range(0,2048).boxed().iterator() @AT@ 1818 @LENGTH@ 10
---INS VariableDeclarationStatement@@long count=iterator.stream().count(); @TO@ MethodDeclaration@@void, MethodName:shouldCountLargeStream,  @AT@ 1834 @LENGTH@ 39
------INS PrimitiveType@@long @TO@ VariableDeclarationStatement@@long count=iterator.stream().count(); @AT@ 1834 @LENGTH@ 4
------INS VariableDeclarationFragment@@count=iterator.stream().count() @TO@ VariableDeclarationStatement@@long count=iterator.stream().count(); @AT@ 1839 @LENGTH@ 33
---------INS SimpleName@@count @TO@ VariableDeclarationFragment@@count=iterator.stream().count() @AT@ 1839 @LENGTH@ 5
---------INS MethodInvocation@@iterator.stream().count() @TO@ VariableDeclarationFragment@@count=iterator.stream().count() @AT@ 1847 @LENGTH@ 25
------------INS MethodInvocation@@MethodName:stream:[] @TO@ MethodInvocation@@iterator.stream().count() @AT@ 1847 @LENGTH@ 17
------------INS SimpleName@@Name:iterator @TO@ MethodInvocation@@iterator.stream().count() @AT@ 1847 @LENGTH@ 8
------------INS SimpleName@@MethodName:count:[] @TO@ MethodInvocation@@iterator.stream().count() @AT@ 1865 @LENGTH@ 7
---INS ExpressionStatement@@MethodInvocation:assertThat(count).isEqualTo(2048) @TO@ MethodDeclaration@@void, MethodName:shouldCountLargeStream,  @AT@ 1877 @LENGTH@ 34
------INS MethodInvocation@@assertThat(count).isEqualTo(2048) @TO@ ExpressionStatement@@MethodInvocation:assertThat(count).isEqualTo(2048) @AT@ 1877 @LENGTH@ 33
---------INS MethodInvocation@@MethodName:assertThat:[count] @TO@ MethodInvocation@@assertThat(count).isEqualTo(2048) @AT@ 1877 @LENGTH@ 17
------------INS SimpleName@@count @TO@ MethodInvocation@@MethodName:assertThat:[count] @AT@ 1888 @LENGTH@ 5
---------INS SimpleName@@MethodName:isEqualTo:[2048] @TO@ MethodInvocation@@assertThat(count).isEqualTo(2048) @AT@ 1895 @LENGTH@ 15
------------INS NumberLiteral@@2048 @TO@ SimpleName@@MethodName:isEqualTo:[2048] @AT@ 1905 @LENGTH@ 4


INS FieldDeclaration@@private, static, final, DynMethods.UnboundMethod, [ALTER_TABLE=DynMethods.builder("alter_table").impl(IMetaStoreClient.class,"alter_table_with_environmentContext",String.class,String.class,Table.class,EnvironmentContext.class).impl(IMetaStoreClient.class,"alter_table",String.class,String.class,Table.class,EnvironmentContext.class).impl(IMetaStoreClient.class,"alter_table",String.class,String.class,Table.class).build()] @TO@ TypeDeclaration@@[public]MetastoreUtil,  @AT@ 1472 @LENGTH@ 491
---INS Modifier@@private @TO@ FieldDeclaration@@private, static, final, DynMethods.UnboundMethod, [ALTER_TABLE=DynMethods.builder("alter_table").impl(IMetaStoreClient.class,"alter_table_with_environmentContext",String.class,String.class,Table.class,EnvironmentContext.class).impl(IMetaStoreClient.class,"alter_table",String.class,String.class,Table.class,EnvironmentContext.class).impl(IMetaStoreClient.class,"alter_table",String.class,String.class,Table.class).build()] @AT@ 1472 @LENGTH@ 7
---INS Modifier@@static @TO@ FieldDeclaration@@private, static, final, DynMethods.UnboundMethod, [ALTER_TABLE=DynMethods.builder("alter_table").impl(IMetaStoreClient.class,"alter_table_with_environmentContext",String.class,String.class,Table.class,EnvironmentContext.class).impl(IMetaStoreClient.class,"alter_table",String.class,String.class,Table.class,EnvironmentContext.class).impl(IMetaStoreClient.class,"alter_table",String.class,String.class,Table.class).build()] @AT@ 1480 @LENGTH@ 6
---INS Modifier@@final @TO@ FieldDeclaration@@private, static, final, DynMethods.UnboundMethod, [ALTER_TABLE=DynMethods.builder("alter_table").impl(IMetaStoreClient.class,"alter_table_with_environmentContext",String.class,String.class,Table.class,EnvironmentContext.class).impl(IMetaStoreClient.class,"alter_table",String.class,String.class,Table.class,EnvironmentContext.class).impl(IMetaStoreClient.class,"alter_table",String.class,String.class,Table.class).build()] @AT@ 1487 @LENGTH@ 5
---INS SimpleType@@DynMethods.UnboundMethod @TO@ FieldDeclaration@@private, static, final, DynMethods.UnboundMethod, [ALTER_TABLE=DynMethods.builder("alter_table").impl(IMetaStoreClient.class,"alter_table_with_environmentContext",String.class,String.class,Table.class,EnvironmentContext.class).impl(IMetaStoreClient.class,"alter_table",String.class,String.class,Table.class,EnvironmentContext.class).impl(IMetaStoreClient.class,"alter_table",String.class,String.class,Table.class).build()] @AT@ 1493 @LENGTH@ 24
---INS VariableDeclarationFragment@@ALTER_TABLE=DynMethods.builder("alter_table").impl(IMetaStoreClient.class,"alter_table_with_environmentContext",String.class,String.class,Table.class,EnvironmentContext.class).impl(IMetaStoreClient.class,"alter_table",String.class,String.class,Table.class,EnvironmentContext.class).impl(IMetaStoreClient.class,"alter_table",String.class,String.class,Table.class).build() @TO@ FieldDeclaration@@private, static, final, DynMethods.UnboundMethod, [ALTER_TABLE=DynMethods.builder("alter_table").impl(IMetaStoreClient.class,"alter_table_with_environmentContext",String.class,String.class,Table.class,EnvironmentContext.class).impl(IMetaStoreClient.class,"alter_table",String.class,String.class,Table.class,EnvironmentContext.class).impl(IMetaStoreClient.class,"alter_table",String.class,String.class,Table.class).build()] @AT@ 1518 @LENGTH@ 444
------INS SimpleName@@ALTER_TABLE @TO@ VariableDeclarationFragment@@ALTER_TABLE=DynMethods.builder("alter_table").impl(IMetaStoreClient.class,"alter_table_with_environmentContext",String.class,String.class,Table.class,EnvironmentContext.class).impl(IMetaStoreClient.class,"alter_table",String.class,String.class,Table.class,EnvironmentContext.class).impl(IMetaStoreClient.class,"alter_table",String.class,String.class,Table.class).build() @AT@ 1518 @LENGTH@ 11
------INS MethodInvocation@@DynMethods.builder("alter_table").impl(IMetaStoreClient.class,"alter_table_with_environmentContext",String.class,String.class,Table.class,EnvironmentContext.class).impl(IMetaStoreClient.class,"alter_table",String.class,String.class,Table.class,EnvironmentContext.class).impl(IMetaStoreClient.class,"alter_table",String.class,String.class,Table.class).build() @TO@ VariableDeclarationFragment@@ALTER_TABLE=DynMethods.builder("alter_table").impl(IMetaStoreClient.class,"alter_table_with_environmentContext",String.class,String.class,Table.class,EnvironmentContext.class).impl(IMetaStoreClient.class,"alter_table",String.class,String.class,Table.class,EnvironmentContext.class).impl(IMetaStoreClient.class,"alter_table",String.class,String.class,Table.class).build() @AT@ 1532 @LENGTH@ 430
---------INS MethodInvocation@@MethodName:impl:[IMetaStoreClient.class, "alter_table", String.class, String.class, Table.class] @TO@ MethodInvocation@@DynMethods.builder("alter_table").impl(IMetaStoreClient.class,"alter_table_with_environmentContext",String.class,String.class,Table.class,EnvironmentContext.class).impl(IMetaStoreClient.class,"alter_table",String.class,String.class,Table.class,EnvironmentContext.class).impl(IMetaStoreClient.class,"alter_table",String.class,String.class,Table.class).build() @AT@ 1532 @LENGTH@ 415
------------INS TypeLiteral@@IMetaStoreClient.class @TO@ MethodInvocation@@MethodName:impl:[IMetaStoreClient.class, "alter_table", String.class, String.class, Table.class] @AT@ 1858 @LENGTH@ 22
------------INS StringLiteral@@"alter_table" @TO@ MethodInvocation@@MethodName:impl:[IMetaStoreClient.class, "alter_table", String.class, String.class, Table.class] @AT@ 1882 @LENGTH@ 13
------------INS TypeLiteral@@String.class @TO@ MethodInvocation@@MethodName:impl:[IMetaStoreClient.class, "alter_table", String.class, String.class, Table.class] @AT@ 1907 @LENGTH@ 12
------------INS TypeLiteral@@String.class @TO@ MethodInvocation@@MethodName:impl:[IMetaStoreClient.class, "alter_table", String.class, String.class, Table.class] @AT@ 1921 @LENGTH@ 12
------------INS TypeLiteral@@Table.class @TO@ MethodInvocation@@MethodName:impl:[IMetaStoreClient.class, "alter_table", String.class, String.class, Table.class] @AT@ 1935 @LENGTH@ 11
---------INS MethodInvocation@@MethodName:impl:[IMetaStoreClient.class, "alter_table", String.class, String.class, Table.class, EnvironmentContext.class] @TO@ MethodInvocation@@DynMethods.builder("alter_table").impl(IMetaStoreClient.class,"alter_table_with_environmentContext",String.class,String.class,Table.class,EnvironmentContext.class).impl(IMetaStoreClient.class,"alter_table",String.class,String.class,Table.class,EnvironmentContext.class).impl(IMetaStoreClient.class,"alter_table",String.class,String.class,Table.class).build() @AT@ 1532 @LENGTH@ 313
------------INS TypeLiteral@@IMetaStoreClient.class @TO@ MethodInvocation@@MethodName:impl:[IMetaStoreClient.class, "alter_table", String.class, String.class, Table.class, EnvironmentContext.class] @AT@ 1730 @LENGTH@ 22
------------INS StringLiteral@@"alter_table" @TO@ MethodInvocation@@MethodName:impl:[IMetaStoreClient.class, "alter_table", String.class, String.class, Table.class, EnvironmentContext.class] @AT@ 1754 @LENGTH@ 13
------------INS TypeLiteral@@String.class @TO@ MethodInvocation@@MethodName:impl:[IMetaStoreClient.class, "alter_table", String.class, String.class, Table.class, EnvironmentContext.class] @AT@ 1779 @LENGTH@ 12
------------INS TypeLiteral@@String.class @TO@ MethodInvocation@@MethodName:impl:[IMetaStoreClient.class, "alter_table", String.class, String.class, Table.class, EnvironmentContext.class] @AT@ 1793 @LENGTH@ 12
------------INS TypeLiteral@@Table.class @TO@ MethodInvocation@@MethodName:impl:[IMetaStoreClient.class, "alter_table", String.class, String.class, Table.class, EnvironmentContext.class] @AT@ 1807 @LENGTH@ 11
------------INS TypeLiteral@@EnvironmentContext.class @TO@ MethodInvocation@@MethodName:impl:[IMetaStoreClient.class, "alter_table", String.class, String.class, Table.class, EnvironmentContext.class] @AT@ 1820 @LENGTH@ 24
---------INS MethodInvocation@@MethodName:impl:[IMetaStoreClient.class, "alter_table_with_environmentContext", String.class, String.class, Table.class, EnvironmentContext.class] @TO@ MethodInvocation@@DynMethods.builder("alter_table").impl(IMetaStoreClient.class,"alter_table_with_environmentContext",String.class,String.class,Table.class,EnvironmentContext.class).impl(IMetaStoreClient.class,"alter_table",String.class,String.class,Table.class,EnvironmentContext.class).impl(IMetaStoreClient.class,"alter_table",String.class,String.class,Table.class).build() @AT@ 1532 @LENGTH@ 185
------------INS TypeLiteral@@IMetaStoreClient.class @TO@ MethodInvocation@@MethodName:impl:[IMetaStoreClient.class, "alter_table_with_environmentContext", String.class, String.class, Table.class, EnvironmentContext.class] @AT@ 1578 @LENGTH@ 22
------------INS StringLiteral@@"alter_table_with_environmentContext" @TO@ MethodInvocation@@MethodName:impl:[IMetaStoreClient.class, "alter_table_with_environmentContext", String.class, String.class, Table.class, EnvironmentContext.class] @AT@ 1602 @LENGTH@ 37
------------INS TypeLiteral@@String.class @TO@ MethodInvocation@@MethodName:impl:[IMetaStoreClient.class, "alter_table_with_environmentContext", String.class, String.class, Table.class, EnvironmentContext.class] @AT@ 1651 @LENGTH@ 12
------------INS TypeLiteral@@String.class @TO@ MethodInvocation@@MethodName:impl:[IMetaStoreClient.class, "alter_table_with_environmentContext", String.class, String.class, Table.class, EnvironmentContext.class] @AT@ 1665 @LENGTH@ 12
------------INS TypeLiteral@@Table.class @TO@ MethodInvocation@@MethodName:impl:[IMetaStoreClient.class, "alter_table_with_environmentContext", String.class, String.class, Table.class, EnvironmentContext.class] @AT@ 1679 @LENGTH@ 11
------------INS TypeLiteral@@EnvironmentContext.class @TO@ MethodInvocation@@MethodName:impl:[IMetaStoreClient.class, "alter_table_with_environmentContext", String.class, String.class, Table.class, EnvironmentContext.class] @AT@ 1692 @LENGTH@ 24
---------INS MethodInvocation@@MethodName:builder:["alter_table"] @TO@ MethodInvocation@@DynMethods.builder("alter_table").impl(IMetaStoreClient.class,"alter_table_with_environmentContext",String.class,String.class,Table.class,EnvironmentContext.class).impl(IMetaStoreClient.class,"alter_table",String.class,String.class,Table.class,EnvironmentContext.class).impl(IMetaStoreClient.class,"alter_table",String.class,String.class,Table.class).build() @AT@ 1532 @LENGTH@ 33
------------INS StringLiteral@@"alter_table" @TO@ MethodInvocation@@MethodName:builder:["alter_table"] @AT@ 1551 @LENGTH@ 13
---------INS SimpleName@@Name:DynMethods @TO@ MethodInvocation@@DynMethods.builder("alter_table").impl(IMetaStoreClient.class,"alter_table_with_environmentContext",String.class,String.class,Table.class,EnvironmentContext.class).impl(IMetaStoreClient.class,"alter_table",String.class,String.class,Table.class,EnvironmentContext.class).impl(IMetaStoreClient.class,"alter_table",String.class,String.class,Table.class).build() @AT@ 1532 @LENGTH@ 10
---------INS SimpleName@@MethodName:build:[] @TO@ MethodInvocation@@DynMethods.builder("alter_table").impl(IMetaStoreClient.class,"alter_table_with_environmentContext",String.class,String.class,Table.class,EnvironmentContext.class).impl(IMetaStoreClient.class,"alter_table",String.class,String.class,Table.class,EnvironmentContext.class).impl(IMetaStoreClient.class,"alter_table",String.class,String.class,Table.class).build() @AT@ 1955 @LENGTH@ 7


UPD ExpressionStatement@@MethodInvocation:arangoDb.createDatabase(DATABASE_NAME) @TO@ MethodInvocation:arangoDb.createDatabase(DbName.of(DATABASE_NAME)) @AT@ 2048 @LENGTH@ 39
---UPD MethodInvocation@@arangoDb.createDatabase(DATABASE_NAME) @TO@ arangoDb.createDatabase(DbName.of(DATABASE_NAME)) @AT@ 2048 @LENGTH@ 38
------UPD SimpleName@@MethodName:createDatabase:[DATABASE_NAME] @TO@ MethodName:createDatabase:[DbName.of(DATABASE_NAME)] @AT@ 2057 @LENGTH@ 29
---------INS MethodInvocation@@DbName.of(DATABASE_NAME) @TO@ SimpleName@@MethodName:createDatabase:[DATABASE_NAME] @AT@ 2100 @LENGTH@ 24
------------INS SimpleName@@Name:DbName @TO@ MethodInvocation@@DbName.of(DATABASE_NAME) @AT@ 2100 @LENGTH@ 6
------------INS SimpleName@@MethodName:of:[DATABASE_NAME] @TO@ MethodInvocation@@DbName.of(DATABASE_NAME) @AT@ 2107 @LENGTH@ 17
---------------MOV SimpleName@@DATABASE_NAME @TO@ SimpleName@@MethodName:of:[DATABASE_NAME] @AT@ 2072 @LENGTH@ 13


UPD ExpressionStatement@@MethodInvocation:exchange.getOut().setBody(bodyOUT) @TO@ MethodInvocation:exchange.getMessage().setBody(bodyOUT) @AT@ 8054 @LENGTH@ 35
---UPD MethodInvocation@@exchange.getOut().setBody(bodyOUT) @TO@ exchange.getMessage().setBody(bodyOUT) @AT@ 8054 @LENGTH@ 34
------UPD MethodInvocation@@MethodName:getOut:[] @TO@ MethodName:getMessage:[] @AT@ 8054 @LENGTH@ 17


DEL MethodDeclaration@@public, Map<String,Object>, MethodName:endpointLenientProperties, Exchange exchange, String uri, Exception,  @AT@ 1126 @LENGTH@ 533
---DEL Modifier@@public @AT@ 1126 @LENGTH@ 6
---DEL ParameterizedType@@Map<String,Object> @AT@ 1133 @LENGTH@ 19
------DEL SimpleType@@Map @AT@ 1133 @LENGTH@ 3
------DEL SimpleType@@String @AT@ 1137 @LENGTH@ 6
------DEL SimpleType@@Object @AT@ 1145 @LENGTH@ 6
---DEL SimpleName@@MethodName:endpointLenientProperties @AT@ 1153 @LENGTH@ 25
---DEL SingleVariableDeclaration@@Exchange exchange @AT@ 1179 @LENGTH@ 17
------DEL SimpleType@@Exchange @AT@ 1179 @LENGTH@ 8
------DEL SimpleName@@exchange @AT@ 1188 @LENGTH@ 8
---DEL SingleVariableDeclaration@@String uri @AT@ 1198 @LENGTH@ 10
------DEL SimpleType@@String @AT@ 1198 @LENGTH@ 6
------DEL SimpleName@@uri @AT@ 1205 @LENGTH@ 3
---DEL SimpleType@@Exception @AT@ 1217 @LENGTH@ 9
---DEL VariableDeclarationStatement@@Map<String,Object> answer=new LinkedHashMap<>(); @AT@ 1237 @LENGTH@ 51
------DEL ParameterizedType@@Map<String,Object> @AT@ 1237 @LENGTH@ 19
---------DEL SimpleType@@Map @AT@ 1237 @LENGTH@ 3
---------DEL SimpleType@@String @AT@ 1241 @LENGTH@ 6
---------DEL SimpleType@@Object @AT@ 1249 @LENGTH@ 6
------DEL VariableDeclarationFragment@@answer=new LinkedHashMap<>() @AT@ 1257 @LENGTH@ 30
---------DEL SimpleName@@answer @AT@ 1257 @LENGTH@ 6
---------DEL ClassInstanceCreation@@LinkedHashMap<>[] @AT@ 1266 @LENGTH@ 21
------------DEL New@@new @AT@ 1266 @LENGTH@ 3
------------DEL ParameterizedType@@LinkedHashMap<> @AT@ 1270 @LENGTH@ 15
---------------DEL SimpleType@@LinkedHashMap @AT@ 1270 @LENGTH@ 13
---DEL VariableDeclarationStatement@@Map<String,Object> properties=super.endpointLenientProperties(exchange,uri); @AT@ 1403 @LENGTH@ 80
------DEL ParameterizedType@@Map<String,Object> @AT@ 1403 @LENGTH@ 19
---------DEL SimpleType@@Map @AT@ 1403 @LENGTH@ 3
---------DEL SimpleType@@String @AT@ 1407 @LENGTH@ 6
---------DEL SimpleType@@Object @AT@ 1415 @LENGTH@ 6
------DEL VariableDeclarationFragment@@properties=super.endpointLenientProperties(exchange,uri) @AT@ 1423 @LENGTH@ 59
---------DEL SimpleName@@properties @AT@ 1423 @LENGTH@ 10
---------DEL SuperMethodInvocation@@super.endpointLenientProperties(exchange,uri) @AT@ 1436 @LENGTH@ 46
------------DEL SimpleName@@MethodName:endpointLenientProperties:[exchange, uri] @AT@ 1442 @LENGTH@ 25
------------DEL SimpleName@@exchange @AT@ 1468 @LENGTH@ 8
------------DEL SimpleName@@uri @AT@ 1478 @LENGTH@ 3
---DEL ExpressionStatement@@MethodInvocation:properties.forEach((k,v) -> {
  if (!k.startsWith("httpClient.")) {
    answer.put(k,v);
  }
}
) @AT@ 1492 @LENGTH@ 138
------DEL MethodInvocation@@properties.forEach((k,v) -> {
  if (!k.startsWith("httpClient.")) {
    answer.put(k,v);
  }
}
) @AT@ 1492 @LENGTH@ 137
---------DEL SimpleName@@Name:properties @AT@ 1492 @LENGTH@ 10
---------DEL SimpleName@@MethodName:forEach:[(k,v) -> {
  if (!k.startsWith("httpClient.")) {
    answer.put(k,v);
  }
}
] @AT@ 1503 @LENGTH@ 126
------------DEL LambdaExpression@@(k,v) -> {
  if (!k.startsWith("httpClient.")) {
    answer.put(k,v);
  }
}
 @AT@ 1511 @LENGTH@ 117
---------------DEL VariableDeclarationFragment@@k @AT@ 1512 @LENGTH@ 1
------------------DEL SimpleName@@k @AT@ 1512 @LENGTH@ 1
---------------DEL VariableDeclarationFragment@@v @AT@ 1515 @LENGTH@ 1
------------------DEL SimpleName@@v @AT@ 1515 @LENGTH@ 1
---------------DEL IfStatement@@if (!k.startsWith("httpClient.")) {  answer.put(k,v);} @AT@ 1535 @LENGTH@ 83
------------------DEL PrefixExpression@@!k.startsWith("httpClient.") @AT@ 1539 @LENGTH@ 28
---------------------DEL Operator@@! @AT@ 1539 @LENGTH@ 1
---------------------DEL MethodInvocation@@k.startsWith("httpClient.") @AT@ 1540 @LENGTH@ 27
------------------------DEL SimpleName@@Name:k @AT@ 1540 @LENGTH@ 1
------------------------DEL SimpleName@@MethodName:startsWith:["httpClient."] @AT@ 1542 @LENGTH@ 25
---------------------------DEL StringLiteral@@"httpClient." @AT@ 1553 @LENGTH@ 13
------------------DEL Block@@ThenBody:{  answer.put(k,v);} @AT@ 1569 @LENGTH@ 49
---------------------DEL ExpressionStatement@@MethodInvocation:answer.put(k,v) @AT@ 1587 @LENGTH@ 17
------------------------DEL MethodInvocation@@answer.put(k,v) @AT@ 1587 @LENGTH@ 16
---------------------------DEL SimpleName@@Name:answer @AT@ 1587 @LENGTH@ 6
---------------------------DEL SimpleName@@MethodName:put:[k, v] @AT@ 1594 @LENGTH@ 9
------------------------------DEL SimpleName@@k @AT@ 1598 @LENGTH@ 1
------------------------------DEL SimpleName@@v @AT@ 1601 @LENGTH@ 1
---DEL ReturnStatement@@SimpleName:answer @AT@ 1639 @LENGTH@ 14
------DEL SimpleName@@answer @AT@ 1646 @LENGTH@ 6


UPD ExpressionStatement@@MethodInvocation:assertTrue(PropertiesFactory.EMPTY_PROPERTIES.values().isEmpty()) @TO@ MethodInvocation:assertTrue(PropertiesFactory.EMPTY_PROPERTIES.isEmpty()) @AT@ 13996 @LENGTH@ 66
---UPD MethodInvocation@@assertTrue(PropertiesFactory.EMPTY_PROPERTIES.values().isEmpty()) @TO@ assertTrue(PropertiesFactory.EMPTY_PROPERTIES.isEmpty()) @AT@ 13996 @LENGTH@ 65
------UPD SimpleName@@MethodName:assertTrue:[PropertiesFactory.EMPTY_PROPERTIES.values().isEmpty()] @TO@ MethodName:assertTrue:[PropertiesFactory.EMPTY_PROPERTIES.isEmpty()] @AT@ 13996 @LENGTH@ 65
---------UPD MethodInvocation@@PropertiesFactory.EMPTY_PROPERTIES.values().isEmpty() @TO@ PropertiesFactory.EMPTY_PROPERTIES.isEmpty() @AT@ 14007 @LENGTH@ 53
------------DEL MethodInvocation@@MethodName:values:[] @AT@ 14007 @LENGTH@ 43


INS MethodDeclaration@@protected, ProjectionFactory, MethodName:getProjectionFactory,  @TO@ TypeDeclaration@@[final]ReactiveNeo4jRepositoryFactory, ReactiveRepositoryFactorySupport @AT@ 5879 @LENGTH@ 418
---INS Modifier@@protected @TO@ MethodDeclaration@@protected, ProjectionFactory, MethodName:getProjectionFactory,  @AT@ 5879 @LENGTH@ 9
---INS SimpleType@@ProjectionFactory @TO@ MethodDeclaration@@protected, ProjectionFactory, MethodName:getProjectionFactory,  @AT@ 5889 @LENGTH@ 17
---INS SimpleName@@MethodName:getProjectionFactory @TO@ MethodDeclaration@@protected, ProjectionFactory, MethodName:getProjectionFactory,  @AT@ 5907 @LENGTH@ 20
---INS VariableDeclarationStatement@@ProjectionFactory projectionFactory=super.getProjectionFactory(); @TO@ MethodDeclaration@@protected, ProjectionFactory, MethodName:getProjectionFactory,  @AT@ 5935 @LENGTH@ 67
------INS SimpleType@@ProjectionFactory @TO@ VariableDeclarationStatement@@ProjectionFactory projectionFactory=super.getProjectionFactory(); @AT@ 5935 @LENGTH@ 17
------INS VariableDeclarationFragment@@projectionFactory=super.getProjectionFactory() @TO@ VariableDeclarationStatement@@ProjectionFactory projectionFactory=super.getProjectionFactory(); @AT@ 5953 @LENGTH@ 48
---------INS SimpleName@@projectionFactory @TO@ VariableDeclarationFragment@@projectionFactory=super.getProjectionFactory() @AT@ 5953 @LENGTH@ 17
---------INS SuperMethodInvocation@@super.getProjectionFactory() @TO@ VariableDeclarationFragment@@projectionFactory=super.getProjectionFactory() @AT@ 5973 @LENGTH@ 28
------------INS SimpleName@@MethodName:getProjectionFactory:[] @TO@ SuperMethodInvocation@@super.getProjectionFactory() @AT@ 5979 @LENGTH@ 20
---INS IfStatement@@if (projectionFactory instanceof SpelAwareProxyProjectionFactory) {  ((SpelAwareProxyProjectionFactory)projectionFactory).registerMethodInvokerFactory(EntityAndGraphPropertyAccessingMethodInterceptor.createMethodInterceptorFactory(mappingContext));} @TO@ MethodDeclaration@@protected, ProjectionFactory, MethodName:getProjectionFactory,  @AT@ 6005 @LENGTH@ 261
------INS InstanceofExpression@@projectionFactory instanceof SpelAwareProxyProjectionFactory @TO@ IfStatement@@if (projectionFactory instanceof SpelAwareProxyProjectionFactory) {  ((SpelAwareProxyProjectionFactory)projectionFactory).registerMethodInvokerFactory(EntityAndGraphPropertyAccessingMethodInterceptor.createMethodInterceptorFactory(mappingContext));} @AT@ 6009 @LENGTH@ 60
---------INS SimpleName@@projectionFactory @TO@ InstanceofExpression@@projectionFactory instanceof SpelAwareProxyProjectionFactory @AT@ 6009 @LENGTH@ 17
---------INS Instanceof@@instanceof @TO@ InstanceofExpression@@projectionFactory instanceof SpelAwareProxyProjectionFactory @AT@ 6027 @LENGTH@ 10
---------INS SimpleType@@SpelAwareProxyProjectionFactory @TO@ InstanceofExpression@@projectionFactory instanceof SpelAwareProxyProjectionFactory @AT@ 6038 @LENGTH@ 31
------INS Block@@ThenBody:{  ((SpelAwareProxyProjectionFactory)projectionFactory).registerMethodInvokerFactory(EntityAndGraphPropertyAccessingMethodInterceptor.createMethodInterceptorFactory(mappingContext));} @TO@ IfStatement@@if (projectionFactory instanceof SpelAwareProxyProjectionFactory) {  ((SpelAwareProxyProjectionFactory)projectionFactory).registerMethodInvokerFactory(EntityAndGraphPropertyAccessingMethodInterceptor.createMethodInterceptorFactory(mappingContext));} @AT@ 6071 @LENGTH@ 195
---------INS ExpressionStatement@@MethodInvocation:((SpelAwareProxyProjectionFactory)projectionFactory).registerMethodInvokerFactory(EntityAndGraphPropertyAccessingMethodInterceptor.createMethodInterceptorFactory(mappingContext)) @TO@ Block@@ThenBody:{  ((SpelAwareProxyProjectionFactory)projectionFactory).registerMethodInvokerFactory(EntityAndGraphPropertyAccessingMethodInterceptor.createMethodInterceptorFactory(mappingContext));} @AT@ 6076 @LENGTH@ 186
------------INS MethodInvocation@@((SpelAwareProxyProjectionFactory)projectionFactory).registerMethodInvokerFactory(EntityAndGraphPropertyAccessingMethodInterceptor.createMethodInterceptorFactory(mappingContext)) @TO@ ExpressionStatement@@MethodInvocation:((SpelAwareProxyProjectionFactory)projectionFactory).registerMethodInvokerFactory(EntityAndGraphPropertyAccessingMethodInterceptor.createMethodInterceptorFactory(mappingContext)) @AT@ 6076 @LENGTH@ 185
---------------INS ParenthesizedExpression@@((SpelAwareProxyProjectionFactory)projectionFactory) @TO@ MethodInvocation@@((SpelAwareProxyProjectionFactory)projectionFactory).registerMethodInvokerFactory(EntityAndGraphPropertyAccessingMethodInterceptor.createMethodInterceptorFactory(mappingContext)) @AT@ 6076 @LENGTH@ 53
------------------INS CastExpression@@(SpelAwareProxyProjectionFactory)projectionFactory @TO@ ParenthesizedExpression@@((SpelAwareProxyProjectionFactory)projectionFactory) @AT@ 6077 @LENGTH@ 51
---------------------INS SimpleType@@SpelAwareProxyProjectionFactory @TO@ CastExpression@@(SpelAwareProxyProjectionFactory)projectionFactory @AT@ 6078 @LENGTH@ 31
---------------------INS SimpleName@@projectionFactory @TO@ CastExpression@@(SpelAwareProxyProjectionFactory)projectionFactory @AT@ 6111 @LENGTH@ 17
---------------INS SimpleName@@MethodName:registerMethodInvokerFactory:[EntityAndGraphPropertyAccessingMethodInterceptor.createMethodInterceptorFactory(mappingContext)] @TO@ MethodInvocation@@((SpelAwareProxyProjectionFactory)projectionFactory).registerMethodInvokerFactory(EntityAndGraphPropertyAccessingMethodInterceptor.createMethodInterceptorFactory(mappingContext)) @AT@ 6130 @LENGTH@ 131
------------------INS MethodInvocation@@EntityAndGraphPropertyAccessingMethodInterceptor.createMethodInterceptorFactory(mappingContext) @TO@ SimpleName@@MethodName:registerMethodInvokerFactory:[EntityAndGraphPropertyAccessingMethodInterceptor.createMethodInterceptorFactory(mappingContext)] @AT@ 6165 @LENGTH@ 95
---------------------INS SimpleName@@Name:EntityAndGraphPropertyAccessingMethodInterceptor @TO@ MethodInvocation@@EntityAndGraphPropertyAccessingMethodInterceptor.createMethodInterceptorFactory(mappingContext) @AT@ 6165 @LENGTH@ 48
---------------------INS SimpleName@@MethodName:createMethodInterceptorFactory:[mappingContext] @TO@ MethodInvocation@@EntityAndGraphPropertyAccessingMethodInterceptor.createMethodInterceptorFactory(mappingContext) @AT@ 6214 @LENGTH@ 46
------------------------INS SimpleName@@mappingContext @TO@ SimpleName@@MethodName:createMethodInterceptorFactory:[mappingContext] @AT@ 6245 @LENGTH@ 14
---INS ReturnStatement@@SimpleName:projectionFactory @TO@ MethodDeclaration@@protected, ProjectionFactory, MethodName:getProjectionFactory,  @AT@ 6269 @LENGTH@ 25
------INS SimpleName@@projectionFactory @TO@ ReturnStatement@@SimpleName:projectionFactory @AT@ 6276 @LENGTH@ 17


UPD ExpressionStatement@@MethodInvocation:p.setCompressionLevel(12) @TO@ MethodInvocation:assertThrows(IllegalArgumentException.class,() -> p.setCompressionLevel(DeflateParameters.MAX_LEVEL + 1)) @AT@ 1527 @LENGTH@ 26
---DEL MethodInvocation@@p.setCompressionLevel(12) @AT@ 1527 @LENGTH@ 25
---INS MethodInvocation@@assertThrows(IllegalArgumentException.class,() -> p.setCompressionLevel(DeflateParameters.MAX_LEVEL + 1)) @TO@ ExpressionStatement@@MethodInvocation:p.setCompressionLevel(12) @AT@ 1699 @LENGTH@ 106
------INS SimpleName@@MethodName:assertThrows:[IllegalArgumentException.class, () -> p.setCompressionLevel(DeflateParameters.MAX_LEVEL + 1)] @TO@ MethodInvocation@@assertThrows(IllegalArgumentException.class,() -> p.setCompressionLevel(DeflateParameters.MAX_LEVEL + 1)) @AT@ 1699 @LENGTH@ 106
---------INS TypeLiteral@@IllegalArgumentException.class @TO@ SimpleName@@MethodName:assertThrows:[IllegalArgumentException.class, () -> p.setCompressionLevel(DeflateParameters.MAX_LEVEL + 1)] @AT@ 1712 @LENGTH@ 30
---------INS LambdaExpression@@() -> p.setCompressionLevel(DeflateParameters.MAX_LEVEL + 1) @TO@ SimpleName@@MethodName:assertThrows:[IllegalArgumentException.class, () -> p.setCompressionLevel(DeflateParameters.MAX_LEVEL + 1)] @AT@ 1744 @LENGTH@ 60
------------INS MethodInvocation@@p.setCompressionLevel(DeflateParameters.MAX_LEVEL + 1) @TO@ LambdaExpression@@() -> p.setCompressionLevel(DeflateParameters.MAX_LEVEL + 1) @AT@ 1750 @LENGTH@ 54
---------------MOV SimpleName@@Name:p @TO@ MethodInvocation@@p.setCompressionLevel(DeflateParameters.MAX_LEVEL + 1) @AT@ 1527 @LENGTH@ 1
---------------MOV SimpleName@@MethodName:setCompressionLevel:[12] @TO@ MethodInvocation@@p.setCompressionLevel(DeflateParameters.MAX_LEVEL + 1) @AT@ 1529 @LENGTH@ 23
------------------DEL NumberLiteral@@12 @AT@ 1549 @LENGTH@ 2
------------------INS InfixExpression@@DeflateParameters.MAX_LEVEL + 1 @TO@ SimpleName@@MethodName:setCompressionLevel:[12] @AT@ 1772 @LENGTH@ 31
---------------------INS QualifiedName@@DeflateParameters.MAX_LEVEL @TO@ InfixExpression@@DeflateParameters.MAX_LEVEL + 1 @AT@ 1772 @LENGTH@ 27
------------------------INS SimpleName@@DeflateParameters @TO@ QualifiedName@@DeflateParameters.MAX_LEVEL @AT@ 1772 @LENGTH@ 17
------------------------INS SimpleName@@MAX_LEVEL @TO@ QualifiedName@@DeflateParameters.MAX_LEVEL @AT@ 1790 @LENGTH@ 9
---------------------INS Operator@@+ @TO@ InfixExpression@@DeflateParameters.MAX_LEVEL + 1 @AT@ 1799 @LENGTH@ 1
---------------------INS NumberLiteral@@1 @TO@ InfixExpression@@DeflateParameters.MAX_LEVEL + 1 @AT@ 1802 @LENGTH@ 1


DEL MethodDeclaration@@public, static, T, T, MethodName:findByType, CamelContext camelContext, Class<T> type,  @AT@ 8278 @LENGTH@ 146
---DEL Modifier@@public @AT@ 8278 @LENGTH@ 6
---DEL Modifier@@static @AT@ 8285 @LENGTH@ 6
---DEL SimpleType@@T @AT@ 8296 @LENGTH@ 1
---DEL SimpleName@@MethodName:findByType @AT@ 8298 @LENGTH@ 10
---DEL SingleVariableDeclaration@@CamelContext camelContext @AT@ 8309 @LENGTH@ 25
------DEL SimpleType@@CamelContext @AT@ 8309 @LENGTH@ 12
------DEL SimpleName@@camelContext @AT@ 8322 @LENGTH@ 12
---DEL SingleVariableDeclaration@@Class<T> type @AT@ 8336 @LENGTH@ 13
------DEL ParameterizedType@@Class<T> @AT@ 8336 @LENGTH@ 8
---------DEL SimpleType@@Class @AT@ 8336 @LENGTH@ 5
---------DEL SimpleType@@T @AT@ 8342 @LENGTH@ 1
------DEL SimpleName@@type @AT@ 8345 @LENGTH@ 4
---DEL ReturnStatement@@MethodInvocation:camelContext.getRegistry().findSingleByType(type) @AT@ 8361 @LENGTH@ 57
------DEL MethodInvocation@@camelContext.getRegistry().findSingleByType(type) @AT@ 8368 @LENGTH@ 49
---------DEL MethodInvocation@@MethodName:getRegistry:[] @AT@ 8368 @LENGTH@ 26
---------DEL SimpleName@@Name:camelContext @AT@ 8368 @LENGTH@ 12
---------DEL SimpleName@@MethodName:findSingleByType:[type] @AT@ 8395 @LENGTH@ 22
------------DEL SimpleName@@type @AT@ 8412 @LENGTH@ 4


UPD MethodDeclaration@@public, ThrowableResultHandler, MethodName:throwableResultHandler, Terminal terminal, CommandCatalog commandCatalog, ObjectProvider<InteractiveShellRunner> interactiveApplicationRunner,  @TO@ public, ThrowableResultHandler, MethodName:throwableResultHandler, Terminal terminal, CommandCatalog commandCatalog, ShellContext shellContext, ObjectProvider<InteractiveShellRunner> interactiveApplicationRunner,  @AT@ 2226 @LENGTH@ 271
---INS SingleVariableDeclaration@@ShellContext shellContext @TO@ MethodDeclaration@@public, ThrowableResultHandler, MethodName:throwableResultHandler, Terminal terminal, CommandCatalog commandCatalog, ObjectProvider<InteractiveShellRunner> interactiveApplicationRunner,  @AT@ 2387 @LENGTH@ 25
------INS SimpleType@@ShellContext @TO@ SingleVariableDeclaration@@ShellContext shellContext @AT@ 2387 @LENGTH@ 12
------INS SimpleName@@shellContext @TO@ SingleVariableDeclaration@@ShellContext shellContext @AT@ 2400 @LENGTH@ 12
---UPD ReturnStatement@@ClassInstanceCreation:new ThrowableResultHandler(terminal,commandCatalog,interactiveApplicationRunner) @TO@ ClassInstanceCreation:new ThrowableResultHandler(terminal,commandCatalog,shellContext,interactiveApplicationRunner) @AT@ 2404 @LENGTH@ 90
------UPD ClassInstanceCreation@@ThrowableResultHandler[terminal, commandCatalog, interactiveApplicationRunner] @TO@ ThrowableResultHandler[terminal, commandCatalog, shellContext, interactiveApplicationRunner] @AT@ 2411 @LENGTH@ 82
---------INS SimpleName@@shellContext @TO@ ClassInstanceCreation@@ThrowableResultHandler[terminal, commandCatalog, interactiveApplicationRunner] @AT@ 2547 @LENGTH@ 12


UPD TryStatement@@try (InputStream is=getCamelContext().getClassResolver().loadResourceAsStream("camel-routes.xml")){  if (is != null) {    DefaultCamelContext context=(DefaultCamelContext)buildDeploymentContext(id,classloader);    context.setName("KIE Server Camel context for container " + kieContainerInstance.getContainerId());    ExtendedCamelContext ecc=context.adapt(ExtendedCamelContext.class);    RoutesDefinition routes=(RoutesDefinition)ecc.getXMLRoutesDefinitionLoader().loadRoutesDefinition(context,is);    annotateKJarRoutes(routes,id);    context.addRouteDefinitions(routes.getRoutes());    context.start();    camelContexts.put(id,context);    ServiceRegistry.get().register(id + JBPMConstants.DEPLOYMENT_CAMEL_CONTEXT_SERVICE_KEY_POSTFIX,context);  }} catch (Exception e) {  LOGGER.error("Error while adding Camel context for {}",kieContainerInstance.getContainerId(),e);} @TO@ try (InputStream is=org.apache.camel.util.ObjectHelper.loadResourceAsStream("camel-routes.xml",getClass().getClassLoader())){  if (is != null) {    DefaultCamelContext context=(DefaultCamelContext)buildDeploymentContext(id,classloader);    context.setName("KIE Server Camel context for container " + kieContainerInstance.getContainerId());    ExtendedCamelContext ecc=context.adapt(ExtendedCamelContext.class);    RoutesDefinition routes=(RoutesDefinition)ecc.getXMLRoutesDefinitionLoader().loadRoutesDefinition(context,is);    annotateKJarRoutes(routes,id);    context.addRouteDefinitions(routes.getRoutes());    context.start();    camelContexts.put(id,context);    ServiceRegistry.get().register(id + JBPMConstants.DEPLOYMENT_CAMEL_CONTEXT_SERVICE_KEY_POSTFIX,context);  }} catch (Exception e) {  LOGGER.error("Error while adding Camel context for {}",kieContainerInstance.getContainerId(),e);} @AT@ 5251 @LENGTH@ 1086
---UPD VariableDeclarationExpression@@InputStream is=getCamelContext().getClassResolver().loadResourceAsStream("camel-routes.xml") @TO@ InputStream is=org.apache.camel.util.ObjectHelper.loadResourceAsStream("camel-routes.xml",getClass().getClassLoader()) @AT@ 5256 @LENGTH@ 94
------UPD VariableDeclarationFragment@@is=getCamelContext().getClassResolver().loadResourceAsStream("camel-routes.xml") @TO@ is=org.apache.camel.util.ObjectHelper.loadResourceAsStream("camel-routes.xml",getClass().getClassLoader()) @AT@ 5268 @LENGTH@ 82
---------UPD MethodInvocation@@getCamelContext().getClassResolver().loadResourceAsStream("camel-routes.xml") @TO@ org.apache.camel.util.ObjectHelper.loadResourceAsStream("camel-routes.xml",getClass().getClassLoader()) @AT@ 5273 @LENGTH@ 77
------------DEL MethodInvocation@@MethodName:getClassResolver:[] @AT@ 5273 @LENGTH@ 36
------------DEL MethodInvocation@@MethodName:getCamelContext:[] @AT@ 5273 @LENGTH@ 17
------------UPD SimpleName@@MethodName:loadResourceAsStream:["camel-routes.xml"] @TO@ MethodName:loadResourceAsStream:["camel-routes.xml", getClass().getClassLoader()] @AT@ 5310 @LENGTH@ 40
---------------INS MethodInvocation@@getClass().getClassLoader() @TO@ SimpleName@@MethodName:loadResourceAsStream:["camel-routes.xml"] @AT@ 5420 @LENGTH@ 27
------------------INS MethodInvocation@@MethodName:getClass:[] @TO@ MethodInvocation@@getClass().getClassLoader() @AT@ 5420 @LENGTH@ 10
------------------INS SimpleName@@MethodName:getClassLoader:[] @TO@ MethodInvocation@@getClass().getClassLoader() @AT@ 5431 @LENGTH@ 16
------------INS QualifiedName@@Name:org.apache.camel.util.ObjectHelper @TO@ MethodInvocation@@getCamelContext().getClassResolver().loadResourceAsStream("camel-routes.xml") @AT@ 5344 @LENGTH@ 34


UPD MethodDeclaration@@public, void, MethodName:onClose, WebSocket websocket, int code, String reason,  @TO@ public, void, MethodName:onClose, WebSocket socket, int code, String reason,  @AT@ 5839 @LENGTH@ 563
---UPD SingleVariableDeclaration@@WebSocket websocket @TO@ WebSocket socket @AT@ 5859 @LENGTH@ 19
------UPD SimpleName@@websocket @TO@ socket @AT@ 5869 @LENGTH@ 9
---UPD TryStatement@@try {  reConnect();} catch (ExecutionException|InterruptedException e) {  LOG.warn("Error re-connecting to websocket",e);  ExceptionHandler exceptionHandler=getExceptionHandler();  if (exceptionHandler != null) {    exceptionHandler.handleException("Error re-connecting to websocket",e);  }} @TO@ try {  if (websocket != null) {    websocket.removeWebSocketListener(listener);    websocket.sendCloseFrame();    websocket=null;  }  reConnect();} catch (ExecutionException|InterruptedException e) {  LOG.warn("Error re-connecting to websocket",e);  ExceptionHandler exceptionHandler=getExceptionHandler();  if (exceptionHandler != null) {    exceptionHandler.handleException("Error re-connecting to websocket",e);  }} @AT@ 5977 @LENGTH@ 415
------INS IfStatement@@if (websocket != null) {  websocket.removeWebSocketListener(listener);  websocket.sendCloseFrame();  websocket=null;} @TO@ TryStatement@@try {  reConnect();} catch (ExecutionException|InterruptedException e) {  LOG.warn("Error re-connecting to websocket",e);  ExceptionHandler exceptionHandler=getExceptionHandler();  if (exceptionHandler != null) {    exceptionHandler.handleException("Error re-connecting to websocket",e);  }} @AT@ 5996 @LENGTH@ 262
---------INS InfixExpression@@websocket != null @TO@ IfStatement@@if (websocket != null) {  websocket.removeWebSocketListener(listener);  websocket.sendCloseFrame();  websocket=null;} @AT@ 6000 @LENGTH@ 17
------------INS SimpleName@@websocket @TO@ InfixExpression@@websocket != null @AT@ 6000 @LENGTH@ 9
------------INS Operator@@!= @TO@ InfixExpression@@websocket != null @AT@ 6009 @LENGTH@ 2
------------INS NullLiteral@@null @TO@ InfixExpression@@websocket != null @AT@ 6013 @LENGTH@ 4
---------INS Block@@ThenBody:{  websocket.removeWebSocketListener(listener);  websocket.sendCloseFrame();  websocket=null;} @TO@ IfStatement@@if (websocket != null) {  websocket.removeWebSocketListener(listener);  websocket.sendCloseFrame();  websocket=null;} @AT@ 6019 @LENGTH@ 239
------------INS ExpressionStatement@@MethodInvocation:websocket.removeWebSocketListener(listener) @TO@ Block@@ThenBody:{  websocket.removeWebSocketListener(listener);  websocket.sendCloseFrame();  websocket=null;} @AT@ 6110 @LENGTH@ 44
---------------INS MethodInvocation@@websocket.removeWebSocketListener(listener) @TO@ ExpressionStatement@@MethodInvocation:websocket.removeWebSocketListener(listener) @AT@ 6110 @LENGTH@ 43
------------------INS SimpleName@@Name:websocket @TO@ MethodInvocation@@websocket.removeWebSocketListener(listener) @AT@ 6110 @LENGTH@ 9
------------------INS SimpleName@@MethodName:removeWebSocketListener:[listener] @TO@ MethodInvocation@@websocket.removeWebSocketListener(listener) @AT@ 6120 @LENGTH@ 33
---------------------INS SimpleName@@listener @TO@ SimpleName@@MethodName:removeWebSocketListener:[listener] @AT@ 6144 @LENGTH@ 8
------------INS ExpressionStatement@@MethodInvocation:websocket.sendCloseFrame() @TO@ Block@@ThenBody:{  websocket.removeWebSocketListener(listener);  websocket.sendCloseFrame();  websocket=null;} @AT@ 6175 @LENGTH@ 27
---------------INS MethodInvocation@@websocket.sendCloseFrame() @TO@ ExpressionStatement@@MethodInvocation:websocket.sendCloseFrame() @AT@ 6175 @LENGTH@ 26
------------------INS SimpleName@@Name:websocket @TO@ MethodInvocation@@websocket.sendCloseFrame() @AT@ 6175 @LENGTH@ 9
------------------INS SimpleName@@MethodName:sendCloseFrame:[] @TO@ MethodInvocation@@websocket.sendCloseFrame() @AT@ 6185 @LENGTH@ 16
------------INS ExpressionStatement@@Assignment:websocket=null @TO@ Block@@ThenBody:{  websocket.removeWebSocketListener(listener);  websocket.sendCloseFrame();  websocket=null;} @AT@ 6223 @LENGTH@ 17
---------------INS Assignment@@websocket=null @TO@ ExpressionStatement@@Assignment:websocket=null @AT@ 6223 @LENGTH@ 16
------------------INS SimpleName@@websocket @TO@ Assignment@@websocket=null @AT@ 6223 @LENGTH@ 9
------------------INS Operator@@= @TO@ Assignment@@websocket=null @AT@ 6232 @LENGTH@ 1
------------------INS NullLiteral@@null @TO@ Assignment@@websocket=null @AT@ 6235 @LENGTH@ 4


UPD VariableDeclarationStatement@@String payload=IOUtils.toString(ClassLoader.getSystemResourceAsStream("xml/article-1.xml")); @TO@ String payload=IOUtils.toString(ClassLoader.getSystemResourceAsStream("xml/article-1.xml"),Charset.defaultCharset()); @AT@ 1588 @LENGTH@ 94
---UPD VariableDeclarationFragment@@payload=IOUtils.toString(ClassLoader.getSystemResourceAsStream("xml/article-1.xml")) @TO@ payload=IOUtils.toString(ClassLoader.getSystemResourceAsStream("xml/article-1.xml"),Charset.defaultCharset()) @AT@ 1595 @LENGTH@ 86
------UPD MethodInvocation@@IOUtils.toString(ClassLoader.getSystemResourceAsStream("xml/article-1.xml")) @TO@ IOUtils.toString(ClassLoader.getSystemResourceAsStream("xml/article-1.xml"),Charset.defaultCharset()) @AT@ 1605 @LENGTH@ 76
---------UPD SimpleName@@MethodName:toString:[ClassLoader.getSystemResourceAsStream("xml/article-1.xml")] @TO@ MethodName:toString:[ClassLoader.getSystemResourceAsStream("xml/article-1.xml"), Charset.defaultCharset()] @AT@ 1613 @LENGTH@ 68
------------INS MethodInvocation@@Charset.defaultCharset() @TO@ SimpleName@@MethodName:toString:[ClassLoader.getSystemResourceAsStream("xml/article-1.xml")] @AT@ 1732 @LENGTH@ 24
---------------INS SimpleName@@Name:Charset @TO@ MethodInvocation@@Charset.defaultCharset() @AT@ 1732 @LENGTH@ 7
---------------INS SimpleName@@MethodName:defaultCharset:[] @TO@ MethodInvocation@@Charset.defaultCharset() @AT@ 1740 @LENGTH@ 16


UPD TryStatement@@try (Transaction transaction=driver.session(bookmarkCapture.createSessionConfig()).beginTransaction()){  long numberOfRelations=transaction.run("MATCH (t:%s) WHERE id(t) = $id RETURN size((t)-->(:Pet)) as numberOfRelations".formatted(labelOfTestSubject),Values.parameters("id",newPerson.getId())).single().get("numberOfRelations").asLong();  assertThat(numberOfRelations).isEqualTo(3L);  numberOfRelations=transaction.run("MATCH (t:%s) WHERE id(t) = $id RETURN size((t)-->(:Hobby)) as numberOfRelations".formatted(labelOfTestSubject),Values.parameters("id",newPerson.getId())).single().get("numberOfRelations").asLong();  assertThat(numberOfRelations).isEqualTo(2L);}  @TO@ try (Transaction transaction=driver.session(bookmarkCapture.createSessionConfig()).beginTransaction()){  long numberOfRelations=transaction.run(("MATCH (t:%s)-[r]->(:Pet) WHERE id(t) = $id RETURN count(r) as numberOfRelations").formatted(labelOfTestSubject),Values.parameters("id",newPerson.getId())).single().get("numberOfRelations").asLong();  assertThat(numberOfRelations).isEqualTo(3L);  numberOfRelations=transaction.run(("MATCH (t:%s)-[r]->(:Hobby) WHERE id(t) = $id RETURN count(r) as numberOfRelations").formatted(labelOfTestSubject),Values.parameters("id",newPerson.getId())).single().get("numberOfRelations").asLong();  assertThat(numberOfRelations).isEqualTo(2L);}  @AT@ 11147 @LENGTH@ 713
---UPD VariableDeclarationStatement@@long numberOfRelations=transaction.run("MATCH (t:%s) WHERE id(t) = $id RETURN size((t)-->(:Pet)) as numberOfRelations".formatted(labelOfTestSubject),Values.parameters("id",newPerson.getId())).single().get("numberOfRelations").asLong(); @TO@ long numberOfRelations=transaction.run(("MATCH (t:%s)-[r]->(:Pet) WHERE id(t) = $id RETURN count(r) as numberOfRelations").formatted(labelOfTestSubject),Values.parameters("id",newPerson.getId())).single().get("numberOfRelations").asLong(); @AT@ 11257 @LENGTH@ 251
------UPD VariableDeclarationFragment@@numberOfRelations=transaction.run("MATCH (t:%s) WHERE id(t) = $id RETURN size((t)-->(:Pet)) as numberOfRelations".formatted(labelOfTestSubject),Values.parameters("id",newPerson.getId())).single().get("numberOfRelations").asLong() @TO@ numberOfRelations=transaction.run(("MATCH (t:%s)-[r]->(:Pet) WHERE id(t) = $id RETURN count(r) as numberOfRelations").formatted(labelOfTestSubject),Values.parameters("id",newPerson.getId())).single().get("numberOfRelations").asLong() @AT@ 11262 @LENGTH@ 245
---------UPD MethodInvocation@@transaction.run("MATCH (t:%s) WHERE id(t) = $id RETURN size((t)-->(:Pet)) as numberOfRelations".formatted(labelOfTestSubject),Values.parameters("id",newPerson.getId())).single().get("numberOfRelations").asLong() @TO@ transaction.run(("MATCH (t:%s)-[r]->(:Pet) WHERE id(t) = $id RETURN count(r) as numberOfRelations").formatted(labelOfTestSubject),Values.parameters("id",newPerson.getId())).single().get("numberOfRelations").asLong() @AT@ 11282 @LENGTH@ 225
------------UPD MethodInvocation@@MethodName:run:["MATCH (t:%s) WHERE id(t) = $id RETURN size((t)-->(:Pet)) as numberOfRelations".formatted(labelOfTestSubject), Values.parameters("id",newPerson.getId())] @TO@ MethodName:run:[("MATCH (t:%s)-[r]->(:Pet) WHERE id(t) = $id RETURN count(r) as numberOfRelations").formatted(labelOfTestSubject), Values.parameters("id",newPerson.getId())] @AT@ 11282 @LENGTH@ 176
---------------UPD MethodInvocation@@"MATCH (t:%s) WHERE id(t) = $id RETURN size((t)-->(:Pet)) as numberOfRelations".formatted(labelOfTestSubject) @TO@ ("MATCH (t:%s)-[r]->(:Pet) WHERE id(t) = $id RETURN count(r) as numberOfRelations").formatted(labelOfTestSubject) @AT@ 11304 @LENGTH@ 109
------------------DEL StringLiteral@@"MATCH (t:%s) WHERE id(t) = $id RETURN size((t)-->(:Pet)) as numberOfRelations" @AT@ 11304 @LENGTH@ 79
------------------INS ParenthesizedExpression@@("MATCH (t:%s)-[r]->(:Pet) WHERE id(t) = $id RETURN count(r) as numberOfRelations") @TO@ MethodInvocation@@"MATCH (t:%s) WHERE id(t) = $id RETURN size((t)-->(:Pet)) as numberOfRelations".formatted(labelOfTestSubject) @AT@ 11312 @LENGTH@ 83
---------------------INS StringLiteral@@"MATCH (t:%s)-[r]->(:Pet) WHERE id(t) = $id RETURN count(r) as numberOfRelations" @TO@ ParenthesizedExpression@@("MATCH (t:%s)-[r]->(:Pet) WHERE id(t) = $id RETURN count(r) as numberOfRelations") @AT@ 11313 @LENGTH@ 81
---UPD ExpressionStatement@@Assignment:numberOfRelations=transaction.run("MATCH (t:%s) WHERE id(t) = $id RETURN size((t)-->(:Hobby)) as numberOfRelations".formatted(labelOfTestSubject),Values.parameters("id",newPerson.getId())).single().get("numberOfRelations").asLong() @TO@ Assignment:numberOfRelations=transaction.run(("MATCH (t:%s)-[r]->(:Hobby) WHERE id(t) = $id RETURN count(r) as numberOfRelations").formatted(labelOfTestSubject),Values.parameters("id",newPerson.getId())).single().get("numberOfRelations").asLong() @AT@ 11560 @LENGTH@ 248
------UPD Assignment@@numberOfRelations=transaction.run("MATCH (t:%s) WHERE id(t) = $id RETURN size((t)-->(:Hobby)) as numberOfRelations".formatted(labelOfTestSubject),Values.parameters("id",newPerson.getId())).single().get("numberOfRelations").asLong() @TO@ numberOfRelations=transaction.run(("MATCH (t:%s)-[r]->(:Hobby) WHERE id(t) = $id RETURN count(r) as numberOfRelations").formatted(labelOfTestSubject),Values.parameters("id",newPerson.getId())).single().get("numberOfRelations").asLong() @AT@ 11560 @LENGTH@ 247
---------UPD MethodInvocation@@transaction.run("MATCH (t:%s) WHERE id(t) = $id RETURN size((t)-->(:Hobby)) as numberOfRelations".formatted(labelOfTestSubject),Values.parameters("id",newPerson.getId())).single().get("numberOfRelations").asLong() @TO@ transaction.run(("MATCH (t:%s)-[r]->(:Hobby) WHERE id(t) = $id RETURN count(r) as numberOfRelations").formatted(labelOfTestSubject),Values.parameters("id",newPerson.getId())).single().get("numberOfRelations").asLong() @AT@ 11580 @LENGTH@ 227
------------UPD MethodInvocation@@MethodName:run:["MATCH (t:%s) WHERE id(t) = $id RETURN size((t)-->(:Hobby)) as numberOfRelations".formatted(labelOfTestSubject), Values.parameters("id",newPerson.getId())] @TO@ MethodName:run:[("MATCH (t:%s)-[r]->(:Hobby) WHERE id(t) = $id RETURN count(r) as numberOfRelations").formatted(labelOfTestSubject), Values.parameters("id",newPerson.getId())] @AT@ 11580 @LENGTH@ 178
---------------UPD MethodInvocation@@"MATCH (t:%s) WHERE id(t) = $id RETURN size((t)-->(:Hobby)) as numberOfRelations".formatted(labelOfTestSubject) @TO@ ("MATCH (t:%s)-[r]->(:Hobby) WHERE id(t) = $id RETURN count(r) as numberOfRelations").formatted(labelOfTestSubject) @AT@ 11602 @LENGTH@ 111
------------------DEL StringLiteral@@"MATCH (t:%s) WHERE id(t) = $id RETURN size((t)-->(:Hobby)) as numberOfRelations" @AT@ 11602 @LENGTH@ 81
------------------INS ParenthesizedExpression@@("MATCH (t:%s)-[r]->(:Hobby) WHERE id(t) = $id RETURN count(r) as numberOfRelations") @TO@ MethodInvocation@@"MATCH (t:%s) WHERE id(t) = $id RETURN size((t)-->(:Hobby)) as numberOfRelations".formatted(labelOfTestSubject) @AT@ 11621 @LENGTH@ 85
---------------------INS StringLiteral@@"MATCH (t:%s)-[r]->(:Hobby) WHERE id(t) = $id RETURN count(r) as numberOfRelations" @TO@ ParenthesizedExpression@@("MATCH (t:%s)-[r]->(:Hobby) WHERE id(t) = $id RETURN count(r) as numberOfRelations") @AT@ 11622 @LENGTH@ 83


UPD TryStatement@@try (Session session=neo4jConnectionSupport.getDriver().session()){  session.run("MATCH (n) DETACH DELETE n");  session.run("CREATE CONSTRAINT TNC IF NOT EXISTS ON (tn:TestNode) ASSERT tn.name IS UNIQUE").consume();}  @TO@ try (Session session=neo4jConnectionSupport.getDriver().session()){  session.run("MATCH (n) DETACH DELETE n");  if (neo4jConnectionSupport.isCypher5SyntaxCompatible()) {    session.run("CREATE CONSTRAINT TNC IF NOT EXISTS FOR (tn:TestNode) REQUIRE tn.name IS UNIQUE").consume();  } else {    session.run("CREATE CONSTRAINT TNC IF NOT EXISTS ON (tn:TestNode) ASSERT tn.name IS UNIQUE").consume();  }}  @AT@ 2207 @LENGTH@ 226
---INS IfStatement@@if (neo4jConnectionSupport.isCypher5SyntaxCompatible()) {  session.run("CREATE CONSTRAINT TNC IF NOT EXISTS FOR (tn:TestNode) REQUIRE tn.name IS UNIQUE").consume();} else {  session.run("CREATE CONSTRAINT TNC IF NOT EXISTS ON (tn:TestNode) ASSERT tn.name IS UNIQUE").consume();} @TO@ TryStatement@@try (Session session=neo4jConnectionSupport.getDriver().session()){  session.run("MATCH (n) DETACH DELETE n");  session.run("CREATE CONSTRAINT TNC IF NOT EXISTS ON (tn:TestNode) ASSERT tn.name IS UNIQUE").consume();}  @AT@ 2326 @LENGTH@ 292
------INS MethodInvocation@@neo4jConnectionSupport.isCypher5SyntaxCompatible() @TO@ IfStatement@@if (neo4jConnectionSupport.isCypher5SyntaxCompatible()) {  session.run("CREATE CONSTRAINT TNC IF NOT EXISTS FOR (tn:TestNode) REQUIRE tn.name IS UNIQUE").consume();} else {  session.run("CREATE CONSTRAINT TNC IF NOT EXISTS ON (tn:TestNode) ASSERT tn.name IS UNIQUE").consume();} @AT@ 2330 @LENGTH@ 50
---------INS SimpleName@@Name:neo4jConnectionSupport @TO@ MethodInvocation@@neo4jConnectionSupport.isCypher5SyntaxCompatible() @AT@ 2330 @LENGTH@ 22
---------INS SimpleName@@MethodName:isCypher5SyntaxCompatible:[] @TO@ MethodInvocation@@neo4jConnectionSupport.isCypher5SyntaxCompatible() @AT@ 2353 @LENGTH@ 27
------INS Block@@ThenBody:{  session.run("CREATE CONSTRAINT TNC IF NOT EXISTS FOR (tn:TestNode) REQUIRE tn.name IS UNIQUE").consume();} @TO@ IfStatement@@if (neo4jConnectionSupport.isCypher5SyntaxCompatible()) {  session.run("CREATE CONSTRAINT TNC IF NOT EXISTS FOR (tn:TestNode) REQUIRE tn.name IS UNIQUE").consume();} else {  session.run("CREATE CONSTRAINT TNC IF NOT EXISTS ON (tn:TestNode) ASSERT tn.name IS UNIQUE").consume();} @AT@ 2382 @LENGTH@ 116
---------INS ExpressionStatement@@MethodInvocation:session.run("CREATE CONSTRAINT TNC IF NOT EXISTS FOR (tn:TestNode) REQUIRE tn.name IS UNIQUE").consume() @TO@ Block@@ThenBody:{  session.run("CREATE CONSTRAINT TNC IF NOT EXISTS FOR (tn:TestNode) REQUIRE tn.name IS UNIQUE").consume();} @AT@ 2388 @LENGTH@ 105
------------INS MethodInvocation@@session.run("CREATE CONSTRAINT TNC IF NOT EXISTS FOR (tn:TestNode) REQUIRE tn.name IS UNIQUE").consume() @TO@ ExpressionStatement@@MethodInvocation:session.run("CREATE CONSTRAINT TNC IF NOT EXISTS FOR (tn:TestNode) REQUIRE tn.name IS UNIQUE").consume() @AT@ 2388 @LENGTH@ 104
---------------INS MethodInvocation@@MethodName:run:["CREATE CONSTRAINT TNC IF NOT EXISTS FOR (tn:TestNode) REQUIRE tn.name IS UNIQUE"] @TO@ MethodInvocation@@session.run("CREATE CONSTRAINT TNC IF NOT EXISTS FOR (tn:TestNode) REQUIRE tn.name IS UNIQUE").consume() @AT@ 2388 @LENGTH@ 94
------------------INS StringLiteral@@"CREATE CONSTRAINT TNC IF NOT EXISTS FOR (tn:TestNode) REQUIRE tn.name IS UNIQUE" @TO@ MethodInvocation@@MethodName:run:["CREATE CONSTRAINT TNC IF NOT EXISTS FOR (tn:TestNode) REQUIRE tn.name IS UNIQUE"] @AT@ 2400 @LENGTH@ 81
---------------INS SimpleName@@Name:session @TO@ MethodInvocation@@session.run("CREATE CONSTRAINT TNC IF NOT EXISTS FOR (tn:TestNode) REQUIRE tn.name IS UNIQUE").consume() @AT@ 2388 @LENGTH@ 7
---------------INS SimpleName@@MethodName:consume:[] @TO@ MethodInvocation@@session.run("CREATE CONSTRAINT TNC IF NOT EXISTS FOR (tn:TestNode) REQUIRE tn.name IS UNIQUE").consume() @AT@ 2483 @LENGTH@ 9
------INS Block@@ElseBody:{  session.run("CREATE CONSTRAINT TNC IF NOT EXISTS ON (tn:TestNode) ASSERT tn.name IS UNIQUE").consume();} @TO@ IfStatement@@if (neo4jConnectionSupport.isCypher5SyntaxCompatible()) {  session.run("CREATE CONSTRAINT TNC IF NOT EXISTS FOR (tn:TestNode) REQUIRE tn.name IS UNIQUE").consume();} else {  session.run("CREATE CONSTRAINT TNC IF NOT EXISTS ON (tn:TestNode) ASSERT tn.name IS UNIQUE").consume();} @AT@ 2504 @LENGTH@ 114
---------MOV ExpressionStatement@@MethodInvocation:session.run("CREATE CONSTRAINT TNC IF NOT EXISTS ON (tn:TestNode) ASSERT tn.name IS UNIQUE").consume() @TO@ Block@@ElseBody:{  session.run("CREATE CONSTRAINT TNC IF NOT EXISTS ON (tn:TestNode) ASSERT tn.name IS UNIQUE").consume();} @AT@ 2326 @LENGTH@ 103


UPD ExpressionStatement@@MethodInvocation:exchange.getOut().setBody("When You Go Home, Tell Them Of Us And Say, For Your Tomorrow, We Gave Our Today.") @TO@ MethodInvocation:exchange.getMessage().setBody("When You Go Home, Tell Them Of Us And Say, For Your Tomorrow, We Gave Our Today.") @AT@ 2786 @LENGTH@ 151
---UPD MethodInvocation@@exchange.getOut().setBody("When You Go Home, Tell Them Of Us And Say, For Your Tomorrow, We Gave Our Today.") @TO@ exchange.getMessage().setBody("When You Go Home, Tell Them Of Us And Say, For Your Tomorrow, We Gave Our Today.") @AT@ 2786 @LENGTH@ 150
------UPD MethodInvocation@@MethodName:getOut:[] @TO@ MethodName:getMessage:[] @AT@ 2786 @LENGTH@ 17


UPD ExpressionStatement@@MethodInvocation:assertThat(cat.getName(),not(isEmptyOrNullString())) @TO@ MethodInvocation:assertThat(cat.getName(),not(emptyOrNullString())) @AT@ 2353 @LENGTH@ 54
---UPD MethodInvocation@@assertThat(cat.getName(),not(isEmptyOrNullString())) @TO@ assertThat(cat.getName(),not(emptyOrNullString())) @AT@ 2353 @LENGTH@ 53
------UPD SimpleName@@MethodName:assertThat:[cat.getName(), not(isEmptyOrNullString())] @TO@ MethodName:assertThat:[cat.getName(), not(emptyOrNullString())] @AT@ 2353 @LENGTH@ 53
---------UPD MethodInvocation@@not(isEmptyOrNullString()) @TO@ not(emptyOrNullString()) @AT@ 2379 @LENGTH@ 26
------------UPD SimpleName@@MethodName:not:[isEmptyOrNullString()] @TO@ MethodName:not:[emptyOrNullString()] @AT@ 2379 @LENGTH@ 26
---------------UPD MethodInvocation@@MethodName:isEmptyOrNullString:[] @TO@ MethodName:emptyOrNullString:[] @AT@ 2383 @LENGTH@ 21
------------UPD SimpleName@@MethodName:not:[isEmptyOrNullString()] @TO@ MethodName:not:[emptyOrNullString()] @AT@ 2379 @LENGTH@ 26
---------------UPD MethodInvocation@@MethodName:isEmptyOrNullString:[] @TO@ MethodName:emptyOrNullString:[] @AT@ 2383 @LENGTH@ 21


UPD FieldDeclaration@@private, static, final, String, [PROPERTY_PREFIX="camel-jbang"] @TO@ private, static, final, String, [PROPERTY_PREFIX="camel.jbang"] @AT@ 1432 @LENGTH@ 60
---UPD VariableDeclarationFragment@@PROPERTY_PREFIX="camel-jbang" @TO@ PROPERTY_PREFIX="camel.jbang" @AT@ 1460 @LENGTH@ 31
------UPD StringLiteral@@"camel-jbang" @TO@ "camel.jbang" @AT@ 1478 @LENGTH@ 13


UPD ExpressionStatement@@MethodInvocation:exchange.getOut().setBody("Bye " + body) @TO@ MethodInvocation:exchange.getMessage().setBody("Bye " + body) @AT@ 3694 @LENGTH@ 41
---UPD MethodInvocation@@exchange.getOut().setBody("Bye " + body) @TO@ exchange.getMessage().setBody("Bye " + body) @AT@ 3694 @LENGTH@ 40
------UPD MethodInvocation@@MethodName:getOut:[] @TO@ MethodName:getMessage:[] @AT@ 3694 @LENGTH@ 17


INS IfStatement@@if (Constants.NAME_OF_PROPERTIES_PARAM.equals(name) && value != null) {  this.parameters.put(name,unwrapMapValueWrapper((Map<String,Object>)value));} else {  this.parameters.put(name,value);} @TO@ MethodDeclaration@@void, MethodName:add, String name, @Nullable Object value,  @AT@ 2477 @LENGTH@ 205
---INS InfixExpression@@Constants.NAME_OF_PROPERTIES_PARAM.equals(name) && value != null @TO@ IfStatement@@if (Constants.NAME_OF_PROPERTIES_PARAM.equals(name) && value != null) {  this.parameters.put(name,unwrapMapValueWrapper((Map<String,Object>)value));} else {  this.parameters.put(name,value);} @AT@ 2481 @LENGTH@ 64
------INS MethodInvocation@@Constants.NAME_OF_PROPERTIES_PARAM.equals(name) @TO@ InfixExpression@@Constants.NAME_OF_PROPERTIES_PARAM.equals(name) && value != null @AT@ 2481 @LENGTH@ 47
---------INS QualifiedName@@Name:Constants.NAME_OF_PROPERTIES_PARAM @TO@ MethodInvocation@@Constants.NAME_OF_PROPERTIES_PARAM.equals(name) @AT@ 2481 @LENGTH@ 34
---------INS SimpleName@@MethodName:equals:[name] @TO@ MethodInvocation@@Constants.NAME_OF_PROPERTIES_PARAM.equals(name) @AT@ 2516 @LENGTH@ 12
------------INS SimpleName@@name @TO@ SimpleName@@MethodName:equals:[name] @AT@ 2523 @LENGTH@ 4
------INS Operator@@&& @TO@ InfixExpression@@Constants.NAME_OF_PROPERTIES_PARAM.equals(name) && value != null @AT@ 2528 @LENGTH@ 2
------INS InfixExpression@@value != null @TO@ InfixExpression@@Constants.NAME_OF_PROPERTIES_PARAM.equals(name) && value != null @AT@ 2532 @LENGTH@ 13
---------INS SimpleName@@value @TO@ InfixExpression@@value != null @AT@ 2532 @LENGTH@ 5
---------INS Operator@@!= @TO@ InfixExpression@@value != null @AT@ 2537 @LENGTH@ 2
---------INS NullLiteral@@null @TO@ InfixExpression@@value != null @AT@ 2541 @LENGTH@ 4
---INS Block@@ThenBody:{  this.parameters.put(name,unwrapMapValueWrapper((Map<String,Object>)value));} @TO@ IfStatement@@if (Constants.NAME_OF_PROPERTIES_PARAM.equals(name) && value != null) {  this.parameters.put(name,unwrapMapValueWrapper((Map<String,Object>)value));} else {  this.parameters.put(name,value);} @AT@ 2547 @LENGTH@ 87
------INS ExpressionStatement@@MethodInvocation:this.parameters.put(name,unwrapMapValueWrapper((Map<String,Object>)value)) @TO@ Block@@ThenBody:{  this.parameters.put(name,unwrapMapValueWrapper((Map<String,Object>)value));} @AT@ 2552 @LENGTH@ 78
---------INS MethodInvocation@@this.parameters.put(name,unwrapMapValueWrapper((Map<String,Object>)value)) @TO@ ExpressionStatement@@MethodInvocation:this.parameters.put(name,unwrapMapValueWrapper((Map<String,Object>)value)) @AT@ 2552 @LENGTH@ 77
------------INS FieldAccess@@this.parameters @TO@ MethodInvocation@@this.parameters.put(name,unwrapMapValueWrapper((Map<String,Object>)value)) @AT@ 2552 @LENGTH@ 15
---------------INS ThisExpression@@this @TO@ FieldAccess@@this.parameters @AT@ 2552 @LENGTH@ 4
---------------INS SimpleName@@parameters @TO@ FieldAccess@@this.parameters @AT@ 2557 @LENGTH@ 10
------------INS SimpleName@@MethodName:put:[name, unwrapMapValueWrapper((Map<String,Object>)value)] @TO@ MethodInvocation@@this.parameters.put(name,unwrapMapValueWrapper((Map<String,Object>)value)) @AT@ 2568 @LENGTH@ 61
---------------INS SimpleName@@name @TO@ SimpleName@@MethodName:put:[name, unwrapMapValueWrapper((Map<String,Object>)value)] @AT@ 2572 @LENGTH@ 4
---------------INS MethodInvocation@@unwrapMapValueWrapper((Map<String,Object>)value) @TO@ SimpleName@@MethodName:put:[name, unwrapMapValueWrapper((Map<String,Object>)value)] @AT@ 2578 @LENGTH@ 50
------------------INS SimpleName@@MethodName:unwrapMapValueWrapper:[(Map<String,Object>)value] @TO@ MethodInvocation@@unwrapMapValueWrapper((Map<String,Object>)value) @AT@ 2578 @LENGTH@ 50
---------------------INS CastExpression@@(Map<String,Object>)value @TO@ SimpleName@@MethodName:unwrapMapValueWrapper:[(Map<String,Object>)value] @AT@ 2600 @LENGTH@ 27
------------------------INS ParameterizedType@@Map<String,Object> @TO@ CastExpression@@(Map<String,Object>)value @AT@ 2601 @LENGTH@ 19
---------------------------INS SimpleType@@Map @TO@ ParameterizedType@@Map<String,Object> @AT@ 2601 @LENGTH@ 3
---------------------------INS SimpleType@@String @TO@ ParameterizedType@@Map<String,Object> @AT@ 2605 @LENGTH@ 6
---------------------------INS SimpleType@@Object @TO@ ParameterizedType@@Map<String,Object> @AT@ 2613 @LENGTH@ 6
------------------------INS SimpleName@@value @TO@ CastExpression@@(Map<String,Object>)value @AT@ 2622 @LENGTH@ 5
---INS Block@@ElseBody:{  this.parameters.put(name,value);} @TO@ IfStatement@@if (Constants.NAME_OF_PROPERTIES_PARAM.equals(name) && value != null) {  this.parameters.put(name,unwrapMapValueWrapper((Map<String,Object>)value));} else {  this.parameters.put(name,value);} @AT@ 2640 @LENGTH@ 42
------MOV ExpressionStatement@@MethodInvocation:this.parameters.put(name,value) @TO@ Block@@ElseBody:{  this.parameters.put(name,value);} @AT@ 2283 @LENGTH@ 33


INS FieldDeclaration@@int, [age] @TO@ TypeDeclaration@@[@Getter, static]Foo,  @AT@ 2887 @LENGTH@ 8
---INS PrimitiveType@@int @TO@ FieldDeclaration@@int, [age] @AT@ 2887 @LENGTH@ 3
---INS VariableDeclarationFragment@@age @TO@ FieldDeclaration@@int, [age] @AT@ 2891 @LENGTH@ 3
------INS SimpleName@@age @TO@ VariableDeclarationFragment@@age @AT@ 2891 @LENGTH@ 3


UPD IfStatement@@if (project.hasProperty("githubAccessToken")) {  githubCheckMilestoneHasNoOpenIssues.setGitHubAccessToken((String)project.findProperty("gitHubAccessToken"));} @TO@ if (project.hasProperty("gitHubAccessToken")) {  githubCheckMilestoneHasNoOpenIssues.setGitHubAccessToken((String)project.findProperty("gitHubAccessToken"));} @AT@ 1463 @LENGTH@ 168
---UPD MethodInvocation@@project.hasProperty("githubAccessToken") @TO@ project.hasProperty("gitHubAccessToken") @AT@ 1467 @LENGTH@ 40
------UPD SimpleName@@MethodName:hasProperty:["githubAccessToken"] @TO@ MethodName:hasProperty:["gitHubAccessToken"] @AT@ 1475 @LENGTH@ 32
---------UPD StringLiteral@@"githubAccessToken" @TO@ "gitHubAccessToken" @AT@ 1487 @LENGTH@ 19


INS ExpressionStatement@@MethodInvocation:Awaitility.await().atMost(Duration.ofSeconds(2)).untilAsserted(() -> {
  assertEquals(4,repo.getGet());
  assertEquals(0,repo.getAdd());
  assertEquals(0,repo.getRemove());
  assertEquals(4,repo.getConfirm());
}
) @TO@ MethodDeclaration@@public, void, MethodName:testOnlyOne, Exception,  @AT@ 1990 @LENGTH@ 479
---INS MethodInvocation@@Awaitility.await().atMost(Duration.ofSeconds(2)).untilAsserted(() -> {
  assertEquals(4,repo.getGet());
  assertEquals(0,repo.getAdd());
  assertEquals(0,repo.getRemove());
  assertEquals(4,repo.getConfirm());
}
) @TO@ ExpressionStatement@@MethodInvocation:Awaitility.await().atMost(Duration.ofSeconds(2)).untilAsserted(() -> {
  assertEquals(4,repo.getGet());
  assertEquals(0,repo.getAdd());
  assertEquals(0,repo.getRemove());
  assertEquals(4,repo.getConfirm());
}
) @AT@ 1990 @LENGTH@ 478
------INS MethodInvocation@@MethodName:atMost:[Duration.ofSeconds(2)] @TO@ MethodInvocation@@Awaitility.await().atMost(Duration.ofSeconds(2)).untilAsserted(() -> {
  assertEquals(4,repo.getGet());
  assertEquals(0,repo.getAdd());
  assertEquals(0,repo.getRemove());
  assertEquals(4,repo.getConfirm());
}
) @AT@ 1990 @LENGTH@ 48
---------INS MethodInvocation@@Duration.ofSeconds(2) @TO@ MethodInvocation@@MethodName:atMost:[Duration.ofSeconds(2)] @AT@ 2016 @LENGTH@ 21
------------INS SimpleName@@Name:Duration @TO@ MethodInvocation@@Duration.ofSeconds(2) @AT@ 2016 @LENGTH@ 8
------------INS SimpleName@@MethodName:ofSeconds:[2] @TO@ MethodInvocation@@Duration.ofSeconds(2) @AT@ 2025 @LENGTH@ 12
---------------INS NumberLiteral@@2 @TO@ SimpleName@@MethodName:ofSeconds:[2] @AT@ 2035 @LENGTH@ 1
------INS MethodInvocation@@MethodName:await:[] @TO@ MethodInvocation@@Awaitility.await().atMost(Duration.ofSeconds(2)).untilAsserted(() -> {
  assertEquals(4,repo.getGet());
  assertEquals(0,repo.getAdd());
  assertEquals(0,repo.getRemove());
  assertEquals(4,repo.getConfirm());
}
) @AT@ 1990 @LENGTH@ 18
------INS SimpleName@@Name:Awaitility @TO@ MethodInvocation@@Awaitility.await().atMost(Duration.ofSeconds(2)).untilAsserted(() -> {
  assertEquals(4,repo.getGet());
  assertEquals(0,repo.getAdd());
  assertEquals(0,repo.getRemove());
  assertEquals(4,repo.getConfirm());
}
) @AT@ 1990 @LENGTH@ 10
------INS SimpleName@@MethodName:untilAsserted:[() -> {
  assertEquals(4,repo.getGet());
  assertEquals(0,repo.getAdd());
  assertEquals(0,repo.getRemove());
  assertEquals(4,repo.getConfirm());
}
] @TO@ MethodInvocation@@Awaitility.await().atMost(Duration.ofSeconds(2)).untilAsserted(() -> {
  assertEquals(4,repo.getGet());
  assertEquals(0,repo.getAdd());
  assertEquals(0,repo.getRemove());
  assertEquals(4,repo.getConfirm());
}
) @AT@ 2056 @LENGTH@ 412
---------INS LambdaExpression@@() -> {
  assertEquals(4,repo.getGet());
  assertEquals(0,repo.getAdd());
  assertEquals(0,repo.getRemove());
  assertEquals(4,repo.getConfirm());
}
 @TO@ SimpleName@@MethodName:untilAsserted:[() -> {
  assertEquals(4,repo.getGet());
  assertEquals(0,repo.getAdd());
  assertEquals(0,repo.getRemove());
  assertEquals(4,repo.getConfirm());
}
] @AT@ 2095 @LENGTH@ 372
------------MOV ExpressionStatement@@MethodInvocation:assertEquals(4,repo.getGet()) @TO@ LambdaExpression@@() -> {
  assertEquals(4,repo.getGet());
  assertEquals(0,repo.getAdd());
  assertEquals(0,repo.getRemove());
  assertEquals(4,repo.getConfirm());
}
 @AT@ 1929 @LENGTH@ 31
------------MOV ExpressionStatement@@MethodInvocation:assertEquals(0,repo.getAdd()) @TO@ LambdaExpression@@() -> {
  assertEquals(4,repo.getGet());
  assertEquals(0,repo.getAdd());
  assertEquals(0,repo.getRemove());
  assertEquals(4,repo.getConfirm());
}
 @AT@ 2041 @LENGTH@ 31
------------MOV ExpressionStatement@@MethodInvocation:assertEquals(0,repo.getRemove()) @TO@ LambdaExpression@@() -> {
  assertEquals(4,repo.getGet());
  assertEquals(0,repo.getAdd());
  assertEquals(0,repo.getRemove());
  assertEquals(4,repo.getConfirm());
}
 @AT@ 2081 @LENGTH@ 34
------------MOV ExpressionStatement@@MethodInvocation:assertEquals(4,repo.getConfirm()) @TO@ LambdaExpression@@() -> {
  assertEquals(4,repo.getGet());
  assertEquals(0,repo.getAdd());
  assertEquals(0,repo.getRemove());
  assertEquals(4,repo.getConfirm());
}
 @AT@ 2124 @LENGTH@ 35


UPD VariableDeclarationStatement@@List<DomainBareJid> xmppServiceDomains=multiUserChatManager.getXMPPServiceDomains(); @TO@ List<DomainBareJid> xmppServiceDomains=multiUserChatManager.getMucServiceDomains(); @AT@ 9908 @LENGTH@ 86
---UPD VariableDeclarationFragment@@xmppServiceDomains=multiUserChatManager.getXMPPServiceDomains() @TO@ xmppServiceDomains=multiUserChatManager.getMucServiceDomains() @AT@ 9928 @LENGTH@ 65
------UPD MethodInvocation@@multiUserChatManager.getXMPPServiceDomains() @TO@ multiUserChatManager.getMucServiceDomains() @AT@ 9949 @LENGTH@ 44
---------UPD SimpleName@@MethodName:getXMPPServiceDomains:[] @TO@ MethodName:getMucServiceDomains:[] @AT@ 9970 @LENGTH@ 23


UPD ReturnStatement@@MethodInvocation:authentication.filter((a) -> a.isAuthenticated()).flatMapIterable(Authentication::getAuthorities).any(this.authorities::contains).map((granted) -> ((AuthorizationDecision)new AuthorityAuthorizationDecision(granted,this.authorities))).defaultIfEmpty(new AuthorityAuthorizationDecision(false,this.authorities)) @TO@ MethodInvocation:authentication.filter(Authentication::isAuthenticated).flatMapIterable(Authentication::getAuthorities).map(GrantedAuthority::getAuthority).any((grantedAuthority) -> this.authorities.stream().anyMatch((authority) -> authority.getAuthority().equals(grantedAuthority))).map((granted) -> ((AuthorizationDecision)new AuthorityAuthorizationDecision(granted,this.authorities))).defaultIfEmpty(new AuthorityAuthorizationDecision(false,this.authorities)) @AT@ 1669 @LENGTH@ 339
---UPD MethodInvocation@@authentication.filter((a) -> a.isAuthenticated()).flatMapIterable(Authentication::getAuthorities).any(this.authorities::contains).map((granted) -> ((AuthorizationDecision)new AuthorityAuthorizationDecision(granted,this.authorities))).defaultIfEmpty(new AuthorityAuthorizationDecision(false,this.authorities)) @TO@ authentication.filter(Authentication::isAuthenticated).flatMapIterable(Authentication::getAuthorities).map(GrantedAuthority::getAuthority).any((grantedAuthority) -> this.authorities.stream().anyMatch((authority) -> authority.getAuthority().equals(grantedAuthority))).map((granted) -> ((AuthorizationDecision)new AuthorityAuthorizationDecision(granted,this.authorities))).defaultIfEmpty(new AuthorityAuthorizationDecision(false,this.authorities)) @AT@ 1676 @LENGTH@ 331
------INS MethodInvocation@@MethodName:map:[GrantedAuthority::getAuthority] @TO@ MethodInvocation@@authentication.filter((a) -> a.isAuthenticated()).flatMapIterable(Authentication::getAuthorities).any(this.authorities::contains).map((granted) -> ((AuthorizationDecision)new AuthorityAuthorizationDecision(granted,this.authorities))).defaultIfEmpty(new AuthorityAuthorizationDecision(false,this.authorities)) @AT@ 1676 @LENGTH@ 148
------DEL MethodInvocation@@MethodName:any:[this.authorities::contains] @AT@ 1676 @LENGTH@ 139
------INS MethodInvocation@@MethodName:flatMapIterable:[Authentication::getAuthorities] @TO@ MethodInvocation@@authentication.filter((a) -> a.isAuthenticated()).flatMapIterable(Authentication::getAuthorities).any(this.authorities::contains).map((granted) -> ((AuthorizationDecision)new AuthorityAuthorizationDecision(granted,this.authorities))).defaultIfEmpty(new AuthorityAuthorizationDecision(false,this.authorities)) @AT@ 1676 @LENGTH@ 107
------DEL MethodInvocation@@MethodName:flatMapIterable:[Authentication::getAuthorities] @AT@ 1676 @LENGTH@ 102
------INS MethodInvocation@@MethodName:filter:[Authentication::isAuthenticated] @TO@ MethodInvocation@@authentication.filter((a) -> a.isAuthenticated()).flatMapIterable(Authentication::getAuthorities).any(this.authorities::contains).map((granted) -> ((AuthorizationDecision)new AuthorityAuthorizationDecision(granted,this.authorities))).defaultIfEmpty(new AuthorityAuthorizationDecision(false,this.authorities)) @AT@ 1676 @LENGTH@ 54
------UPD MethodInvocation@@MethodName:filter:[(a) -> a.isAuthenticated()] @TO@ MethodName:any:[(grantedAuthority) -> this.authorities.stream().anyMatch((authority) -> authority.getAuthority().equals(grantedAuthority))] @AT@ 1676 @LENGTH@ 49
---------DEL LambdaExpression@@(a) -> a.isAuthenticated() @AT@ 1698 @LENGTH@ 26
---------INS LambdaExpression@@(grantedAuthority) -> this.authorities.stream().anyMatch((authority) -> authority.getAuthority().equals(grantedAuthority)) @TO@ MethodInvocation@@MethodName:filter:[(a) -> a.isAuthenticated()] @AT@ 1834 @LENGTH@ 122
------------INS VariableDeclarationFragment@@grantedAuthority @TO@ LambdaExpression@@(grantedAuthority) -> this.authorities.stream().anyMatch((authority) -> authority.getAuthority().equals(grantedAuthority)) @AT@ 1835 @LENGTH@ 16
---------------INS SimpleName@@grantedAuthority @TO@ VariableDeclarationFragment@@grantedAuthority @AT@ 1835 @LENGTH@ 16
------------INS MethodInvocation@@this.authorities.stream().anyMatch((authority) -> authority.getAuthority().equals(grantedAuthority)) @TO@ LambdaExpression@@(grantedAuthority) -> this.authorities.stream().anyMatch((authority) -> authority.getAuthority().equals(grantedAuthority)) @AT@ 1856 @LENGTH@ 100
---------------INS MethodInvocation@@MethodName:stream:[] @TO@ MethodInvocation@@this.authorities.stream().anyMatch((authority) -> authority.getAuthority().equals(grantedAuthority)) @AT@ 1856 @LENGTH@ 25
---------------INS FieldAccess@@this.authorities @TO@ MethodInvocation@@this.authorities.stream().anyMatch((authority) -> authority.getAuthority().equals(grantedAuthority)) @AT@ 1856 @LENGTH@ 16
------------------INS ThisExpression@@this @TO@ FieldAccess@@this.authorities @AT@ 1856 @LENGTH@ 4
------------------INS SimpleName@@authorities @TO@ FieldAccess@@this.authorities @AT@ 1861 @LENGTH@ 11
---------------INS SimpleName@@MethodName:anyMatch:[(authority) -> authority.getAuthority().equals(grantedAuthority)] @TO@ MethodInvocation@@this.authorities.stream().anyMatch((authority) -> authority.getAuthority().equals(grantedAuthority)) @AT@ 1882 @LENGTH@ 74
------------------INS LambdaExpression@@(authority) -> authority.getAuthority().equals(grantedAuthority) @TO@ SimpleName@@MethodName:anyMatch:[(authority) -> authority.getAuthority().equals(grantedAuthority)] @AT@ 1891 @LENGTH@ 64
---------------------MOV VariableDeclarationFragment@@a @TO@ LambdaExpression@@(authority) -> authority.getAuthority().equals(grantedAuthority) @AT@ 1699 @LENGTH@ 1
------------------------UPD SimpleName@@a @TO@ authority @AT@ 1699 @LENGTH@ 1
---------------------MOV MethodInvocation@@a.isAuthenticated() @TO@ LambdaExpression@@(authority) -> authority.getAuthority().equals(grantedAuthority) @AT@ 1705 @LENGTH@ 19
------------------------UPD SimpleName@@Name:a @TO@ Name:authority @AT@ 1705 @LENGTH@ 1
------------------------UPD SimpleName@@MethodName:isAuthenticated:[] @TO@ MethodName:equals:[grantedAuthority] @AT@ 1707 @LENGTH@ 17
---------------------------INS SimpleName@@grantedAuthority @TO@ SimpleName@@MethodName:isAuthenticated:[] @AT@ 1938 @LENGTH@ 16
------------------------INS MethodInvocation@@MethodName:getAuthority:[] @TO@ MethodInvocation@@a.isAuthenticated() @AT@ 1906 @LENGTH@ 24


UPD ExpressionStatement@@MethodInvocation:exchange.getOut().setBody("When You Go Home, Tell Them Of Us And Say, For Your Tomorrow, We Gave Our Today.") @TO@ MethodInvocation:exchange.getMessage().setBody("When You Go Home, Tell Them Of Us And Say, For Your Tomorrow, We Gave Our Today.") @AT@ 3639 @LENGTH@ 151
---UPD MethodInvocation@@exchange.getOut().setBody("When You Go Home, Tell Them Of Us And Say, For Your Tomorrow, We Gave Our Today.") @TO@ exchange.getMessage().setBody("When You Go Home, Tell Them Of Us And Say, For Your Tomorrow, We Gave Our Today.") @AT@ 3639 @LENGTH@ 150
------UPD MethodInvocation@@MethodName:getOut:[] @TO@ MethodName:getMessage:[] @AT@ 3639 @LENGTH@ 17


UPD MethodDeclaration@@protected, ConfirmationInputContext, MethodName:getThisContext, ComponentContext<?> context,  @TO@ public, ConfirmationInputContext, MethodName:getThisContext, ComponentContext<?> context,  @AT@ 2381 @LENGTH@ 380
---UPD Modifier@@protected @TO@ public @AT@ 2381 @LENGTH@ 9


UPD ExpressionStatement@@MethodInvocation:new Archiver().create("7z",os,dir) @TO@ MethodInvocation:assertThrows(StreamingNotSupportedException.class,() -> new Archiver().create("7z",os,dir)) @AT@ 2556 @LENGTH@ 37
---INS MethodInvocation@@assertThrows(StreamingNotSupportedException.class,() -> new Archiver().create("7z",os,dir)) @TO@ ExpressionStatement@@MethodInvocation:new Archiver().create("7z",os,dir) @AT@ 2633 @LENGTH@ 94
------INS SimpleName@@MethodName:assertThrows:[StreamingNotSupportedException.class, () -> new Archiver().create("7z",os,dir)] @TO@ MethodInvocation@@assertThrows(StreamingNotSupportedException.class,() -> new Archiver().create("7z",os,dir)) @AT@ 2633 @LENGTH@ 94
---------INS TypeLiteral@@StreamingNotSupportedException.class @TO@ SimpleName@@MethodName:assertThrows:[StreamingNotSupportedException.class, () -> new Archiver().create("7z",os,dir)] @AT@ 2646 @LENGTH@ 36
---------INS LambdaExpression@@() -> new Archiver().create("7z",os,dir) @TO@ SimpleName@@MethodName:assertThrows:[StreamingNotSupportedException.class, () -> new Archiver().create("7z",os,dir)] @AT@ 2684 @LENGTH@ 42
------------MOV MethodInvocation@@new Archiver().create("7z",os,dir) @TO@ LambdaExpression@@() -> new Archiver().create("7z",os,dir) @AT@ 2556 @LENGTH@ 36


UPD VariableDeclarationStatement@@StringBuilder properties=new StringBuilder(); @TO@ StringBuilder properties=new StringBuilder(256); @AT@ 4722 @LENGTH@ 47
---UPD VariableDeclarationFragment@@properties=new StringBuilder() @TO@ properties=new StringBuilder(256) @AT@ 4736 @LENGTH@ 32
------UPD ClassInstanceCreation@@StringBuilder[] @TO@ StringBuilder[256] @AT@ 4749 @LENGTH@ 19
---------INS NumberLiteral@@256 @TO@ ClassInstanceCreation@@StringBuilder[] @AT@ 4767 @LENGTH@ 3


INS MethodDeclaration@@void, MethodName:saveWeirdHierarchy, @Autowired ReactiveNeo4jTemplate template,  @TO@ TypeDeclaration@@[@Neo4jIntegrationTest, @Tag(Neo4jExtension.NEEDS_REACTIVE_SUPPORT)]ReactiveNeo4jTemplateIT,  @AT@ 26322 @LENGTH@ 399
---INS PrimitiveType@@void @TO@ MethodDeclaration@@void, MethodName:saveWeirdHierarchy, @Autowired ReactiveNeo4jTemplate template,  @AT@ 26317 @LENGTH@ 4
---INS SimpleName@@MethodName:saveWeirdHierarchy @TO@ MethodDeclaration@@void, MethodName:saveWeirdHierarchy, @Autowired ReactiveNeo4jTemplate template,  @AT@ 26322 @LENGTH@ 18
---INS SingleVariableDeclaration@@@Autowired ReactiveNeo4jTemplate template @TO@ MethodDeclaration@@void, MethodName:saveWeirdHierarchy, @Autowired ReactiveNeo4jTemplate template,  @AT@ 26341 @LENGTH@ 41
------INS SimpleType@@ReactiveNeo4jTemplate @TO@ SingleVariableDeclaration@@@Autowired ReactiveNeo4jTemplate template @AT@ 26352 @LENGTH@ 21
------INS SimpleName@@template @TO@ SingleVariableDeclaration@@@Autowired ReactiveNeo4jTemplate template @AT@ 26374 @LENGTH@ 8
---INS VariableDeclarationStatement@@List<Object> things=new ArrayList<>(); @TO@ MethodDeclaration@@void, MethodName:saveWeirdHierarchy, @Autowired ReactiveNeo4jTemplate template,  @AT@ 26389 @LENGTH@ 40
------INS ParameterizedType@@List<Object> @TO@ VariableDeclarationStatement@@List<Object> things=new ArrayList<>(); @AT@ 26389 @LENGTH@ 12
---------INS SimpleType@@List @TO@ ParameterizedType@@List<Object> @AT@ 26389 @LENGTH@ 4
---------INS SimpleType@@Object @TO@ ParameterizedType@@List<Object> @AT@ 26394 @LENGTH@ 6
------INS VariableDeclarationFragment@@things=new ArrayList<>() @TO@ VariableDeclarationStatement@@List<Object> things=new ArrayList<>(); @AT@ 26402 @LENGTH@ 26
---------INS SimpleName@@things @TO@ VariableDeclarationFragment@@things=new ArrayList<>() @AT@ 26402 @LENGTH@ 6
---------INS ClassInstanceCreation@@ArrayList<>[] @TO@ VariableDeclarationFragment@@things=new ArrayList<>() @AT@ 26411 @LENGTH@ 17
------------INS New@@new @TO@ ClassInstanceCreation@@ArrayList<>[] @AT@ 26411 @LENGTH@ 3
------------INS ParameterizedType@@ArrayList<> @TO@ ClassInstanceCreation@@ArrayList<>[] @AT@ 26415 @LENGTH@ 11
---------------INS SimpleType@@ArrayList @TO@ ParameterizedType@@ArrayList<> @AT@ 26415 @LENGTH@ 9
---INS ExpressionStatement@@MethodInvocation:things.add(1) @TO@ MethodDeclaration@@void, MethodName:saveWeirdHierarchy, @Autowired ReactiveNeo4jTemplate template,  @AT@ 26432 @LENGTH@ 14
------INS MethodInvocation@@things.add(1) @TO@ ExpressionStatement@@MethodInvocation:things.add(1) @AT@ 26432 @LENGTH@ 13
---------INS SimpleName@@Name:things @TO@ MethodInvocation@@things.add(1) @AT@ 26432 @LENGTH@ 6
---------INS SimpleName@@MethodName:add:[1] @TO@ MethodInvocation@@things.add(1) @AT@ 26439 @LENGTH@ 6
------------INS NumberLiteral@@1 @TO@ SimpleName@@MethodName:add:[1] @AT@ 26443 @LENGTH@ 1
---INS ExpressionStatement@@MethodInvocation:things.add("eins") @TO@ MethodDeclaration@@void, MethodName:saveWeirdHierarchy, @Autowired ReactiveNeo4jTemplate template,  @AT@ 26449 @LENGTH@ 19
------INS MethodInvocation@@things.add("eins") @TO@ ExpressionStatement@@MethodInvocation:things.add("eins") @AT@ 26449 @LENGTH@ 18
---------INS SimpleName@@Name:things @TO@ MethodInvocation@@things.add("eins") @AT@ 26449 @LENGTH@ 6
---------INS SimpleName@@MethodName:add:["eins"] @TO@ MethodInvocation@@things.add("eins") @AT@ 26456 @LENGTH@ 11
------------INS StringLiteral@@"eins" @TO@ SimpleName@@MethodName:add:["eins"] @AT@ 26460 @LENGTH@ 6
---INS ExpressionStatement@@MethodInvocation:template.saveAllAs(things,ClosedProjection.class).as(StepVerifier::create).verifyErrorMatches(t -> t instanceof IllegalArgumentException && t.getMessage().equals("Could not determine a common element of an heterogeneous collection.")) @TO@ MethodDeclaration@@void, MethodName:saveWeirdHierarchy, @Autowired ReactiveNeo4jTemplate template,  @AT@ 26472 @LENGTH@ 246
------INS MethodInvocation@@template.saveAllAs(things,ClosedProjection.class).as(StepVerifier::create).verifyErrorMatches(t -> t instanceof IllegalArgumentException && t.getMessage().equals("Could not determine a common element of an heterogeneous collection.")) @TO@ ExpressionStatement@@MethodInvocation:template.saveAllAs(things,ClosedProjection.class).as(StepVerifier::create).verifyErrorMatches(t -> t instanceof IllegalArgumentException && t.getMessage().equals("Could not determine a common element of an heterogeneous collection.")) @AT@ 26472 @LENGTH@ 245
---------INS MethodInvocation@@MethodName:as:[StepVerifier::create] @TO@ MethodInvocation@@template.saveAllAs(things,ClosedProjection.class).as(StepVerifier::create).verifyErrorMatches(t -> t instanceof IllegalArgumentException && t.getMessage().equals("Could not determine a common element of an heterogeneous collection.")) @AT@ 26472 @LENGTH@ 80
---------INS MethodInvocation@@MethodName:saveAllAs:[things, ClosedProjection.class] @TO@ MethodInvocation@@template.saveAllAs(things,ClosedProjection.class).as(StepVerifier::create).verifyErrorMatches(t -> t instanceof IllegalArgumentException && t.getMessage().equals("Could not determine a common element of an heterogeneous collection.")) @AT@ 26472 @LENGTH@ 50
------------INS SimpleName@@things @TO@ MethodInvocation@@MethodName:saveAllAs:[things, ClosedProjection.class] @AT@ 26491 @LENGTH@ 6
------------INS TypeLiteral@@ClosedProjection.class @TO@ MethodInvocation@@MethodName:saveAllAs:[things, ClosedProjection.class] @AT@ 26499 @LENGTH@ 22
---------INS SimpleName@@Name:template @TO@ MethodInvocation@@template.saveAllAs(things,ClosedProjection.class).as(StepVerifier::create).verifyErrorMatches(t -> t instanceof IllegalArgumentException && t.getMessage().equals("Could not determine a common element of an heterogeneous collection.")) @AT@ 26472 @LENGTH@ 8
---------INS SimpleName@@MethodName:verifyErrorMatches:[t -> t instanceof IllegalArgumentException && t.getMessage().equals("Could not determine a common element of an heterogeneous collection.")] @TO@ MethodInvocation@@template.saveAllAs(things,ClosedProjection.class).as(StepVerifier::create).verifyErrorMatches(t -> t instanceof IllegalArgumentException && t.getMessage().equals("Could not determine a common element of an heterogeneous collection.")) @AT@ 26558 @LENGTH@ 159
------------INS LambdaExpression@@t -> t instanceof IllegalArgumentException && t.getMessage().equals("Could not determine a common element of an heterogeneous collection.") @TO@ SimpleName@@MethodName:verifyErrorMatches:[t -> t instanceof IllegalArgumentException && t.getMessage().equals("Could not determine a common element of an heterogeneous collection.")] @AT@ 26577 @LENGTH@ 139
---------------INS VariableDeclarationFragment@@t @TO@ LambdaExpression@@t -> t instanceof IllegalArgumentException && t.getMessage().equals("Could not determine a common element of an heterogeneous collection.") @AT@ 26577 @LENGTH@ 1
------------------INS SimpleName@@t @TO@ VariableDeclarationFragment@@t @AT@ 26577 @LENGTH@ 1
---------------INS InfixExpression@@t instanceof IllegalArgumentException && t.getMessage().equals("Could not determine a common element of an heterogeneous collection.") @TO@ LambdaExpression@@t -> t instanceof IllegalArgumentException && t.getMessage().equals("Could not determine a common element of an heterogeneous collection.") @AT@ 26582 @LENGTH@ 134
------------------INS InstanceofExpression@@t instanceof IllegalArgumentException @TO@ InfixExpression@@t instanceof IllegalArgumentException && t.getMessage().equals("Could not determine a common element of an heterogeneous collection.") @AT@ 26582 @LENGTH@ 37
---------------------INS SimpleName@@t @TO@ InstanceofExpression@@t instanceof IllegalArgumentException @AT@ 26582 @LENGTH@ 1
---------------------INS Instanceof@@instanceof @TO@ InstanceofExpression@@t instanceof IllegalArgumentException @AT@ 26584 @LENGTH@ 10
---------------------INS SimpleType@@IllegalArgumentException @TO@ InstanceofExpression@@t instanceof IllegalArgumentException @AT@ 26595 @LENGTH@ 24
------------------INS Operator@@&& @TO@ InfixExpression@@t instanceof IllegalArgumentException && t.getMessage().equals("Could not determine a common element of an heterogeneous collection.") @AT@ 26619 @LENGTH@ 2
------------------INS MethodInvocation@@t.getMessage().equals("Could not determine a common element of an heterogeneous collection.") @TO@ InfixExpression@@t instanceof IllegalArgumentException && t.getMessage().equals("Could not determine a common element of an heterogeneous collection.") @AT@ 26623 @LENGTH@ 93
---------------------INS MethodInvocation@@MethodName:getMessage:[] @TO@ MethodInvocation@@t.getMessage().equals("Could not determine a common element of an heterogeneous collection.") @AT@ 26623 @LENGTH@ 14
---------------------INS SimpleName@@Name:t @TO@ MethodInvocation@@t.getMessage().equals("Could not determine a common element of an heterogeneous collection.") @AT@ 26623 @LENGTH@ 1
---------------------INS SimpleName@@MethodName:equals:["Could not determine a common element of an heterogeneous collection."] @TO@ MethodInvocation@@t.getMessage().equals("Could not determine a common element of an heterogeneous collection.") @AT@ 26638 @LENGTH@ 78
------------------------INS StringLiteral@@"Could not determine a common element of an heterogeneous collection." @TO@ SimpleName@@MethodName:equals:["Could not determine a common element of an heterogeneous collection."] @AT@ 26645 @LENGTH@ 70


UPD ExpressionStatement@@MethodInvocation:exchange.getOut().setBody(ANSWER) @TO@ MethodInvocation:exchange.getMessage().setBody(ANSWER) @AT@ 1969 @LENGTH@ 34
---UPD MethodInvocation@@exchange.getOut().setBody(ANSWER) @TO@ exchange.getMessage().setBody(ANSWER) @AT@ 1969 @LENGTH@ 33
------UPD MethodInvocation@@MethodName:getOut:[] @TO@ MethodName:getMessage:[] @AT@ 1969 @LENGTH@ 17


UPD FieldDeclaration@@private, static, final, String, [SEDA_WITH_OFFER_TIMEOUT_URI="seda:blockingFoo" + String.format(SIZE_PARAM,QUEUE_SIZE) + "&blockWhenFull=true&offerTimeout=100"] @TO@ private, static, final, String, [SEDA_WITH_OFFER_TIMEOUT_URI="seda:blockingFoo" + String.format(SIZE_PARAM,QUEUE_SIZE) + "&blockWhenFull=true&offerTimeout=200"] @AT@ 1537 @LENGTH@ 170
---UPD VariableDeclarationFragment@@SEDA_WITH_OFFER_TIMEOUT_URI="seda:blockingFoo" + String.format(SIZE_PARAM,QUEUE_SIZE) + "&blockWhenFull=true&offerTimeout=100" @TO@ SEDA_WITH_OFFER_TIMEOUT_URI="seda:blockingFoo" + String.format(SIZE_PARAM,QUEUE_SIZE) + "&blockWhenFull=true&offerTimeout=200" @AT@ 1565 @LENGTH@ 141
------UPD InfixExpression@@"seda:blockingFoo" + String.format(SIZE_PARAM,QUEUE_SIZE) + "&blockWhenFull=true&offerTimeout=100" @TO@ "seda:blockingFoo" + String.format(SIZE_PARAM,QUEUE_SIZE) + "&blockWhenFull=true&offerTimeout=200" @AT@ 1607 @LENGTH@ 99
---------UPD StringLiteral@@"&blockWhenFull=true&offerTimeout=100" @TO@ "&blockWhenFull=true&offerTimeout=200" @AT@ 1668 @LENGTH@ 38


UPD TypeDeclaration@@[@Singleton, @Transactional, public, static]SearchBean,  @TO@ [@ApplicationScoped, @Transactional, public, static]SearchBean,  @AT@ 5299 @LENGTH@ 636
---UPD MarkerAnnotation@@@Singleton @TO@ @ApplicationScoped @AT@ 5299 @LENGTH@ 10


INS FieldDeclaration@@private, boolean, [generateRoutes] @TO@ TypeDeclaration@@[@CommandLine.Command(name="rest",description="Generate REST DSL source code from OpenApi specification"), public]CodeRestGenerator, [Callable<Integer>] @AT@ 2268 @LENGTH@ 31
---INS Modifier@@private @TO@ FieldDeclaration@@private, boolean, [generateRoutes] @AT@ 2268 @LENGTH@ 7
---INS PrimitiveType@@boolean @TO@ FieldDeclaration@@private, boolean, [generateRoutes] @AT@ 2276 @LENGTH@ 7
---INS VariableDeclarationFragment@@generateRoutes @TO@ FieldDeclaration@@private, boolean, [generateRoutes] @AT@ 2284 @LENGTH@ 14
------INS SimpleName@@generateRoutes @TO@ VariableDeclarationFragment@@generateRoutes @AT@ 2284 @LENGTH@ 14


DEL ExpressionStatement@@Assignment:this.commandsFromInputArgs=(args) -> Collections.singletonList(String.join(" ",args.getSourceArgs())) @AT@ 2368 @LENGTH@ 109
---DEL Assignment@@this.commandsFromInputArgs=(args) -> Collections.singletonList(String.join(" ",args.getSourceArgs())) @AT@ 2368 @LENGTH@ 108
------DEL FieldAccess@@this.commandsFromInputArgs @AT@ 2368 @LENGTH@ 26
---------DEL ThisExpression@@this @AT@ 2368 @LENGTH@ 4
---------DEL SimpleName@@commandsFromInputArgs @AT@ 2373 @LENGTH@ 21
------DEL Operator@@= @AT@ 2394 @LENGTH@ 1


UPD FieldDeclaration@@private, static, final, DownloadThreadPool, [downloader=new DownloadThreadPool()] @TO@ private, static, final, DownloadThreadPool, [DOWNLOAD_THREAD_POOL=new DownloadThreadPool()] @AT@ 1267 @LENGTH@ 78
---UPD VariableDeclarationFragment@@downloader=new DownloadThreadPool() @TO@ DOWNLOAD_THREAD_POOL=new DownloadThreadPool() @AT@ 1307 @LENGTH@ 37
------UPD SimpleName@@downloader @TO@ DOWNLOAD_THREAD_POOL @AT@ 1307 @LENGTH@ 10


INS MethodDeclaration@@public, static, Path, MethodName:makeRelative, Path parentPath, Path childPath,  @TO@ TypeDeclaration@@[public]FileUtils,  @AT@ 16097 @LENGTH@ 425
---INS Modifier@@public @TO@ MethodDeclaration@@public, static, Path, MethodName:makeRelative, Path parentPath, Path childPath,  @AT@ 16097 @LENGTH@ 6
---INS Modifier@@static @TO@ MethodDeclaration@@public, static, Path, MethodName:makeRelative, Path parentPath, Path childPath,  @AT@ 16104 @LENGTH@ 6
---INS SimpleType@@Path @TO@ MethodDeclaration@@public, static, Path, MethodName:makeRelative, Path parentPath, Path childPath,  @AT@ 16111 @LENGTH@ 4
---INS SimpleName@@MethodName:makeRelative @TO@ MethodDeclaration@@public, static, Path, MethodName:makeRelative, Path parentPath, Path childPath,  @AT@ 16116 @LENGTH@ 12
---INS SingleVariableDeclaration@@Path parentPath @TO@ MethodDeclaration@@public, static, Path, MethodName:makeRelative, Path parentPath, Path childPath,  @AT@ 16129 @LENGTH@ 15
------INS SimpleType@@Path @TO@ SingleVariableDeclaration@@Path parentPath @AT@ 16129 @LENGTH@ 4
------INS SimpleName@@parentPath @TO@ SingleVariableDeclaration@@Path parentPath @AT@ 16134 @LENGTH@ 10
---INS SingleVariableDeclaration@@Path childPath @TO@ MethodDeclaration@@public, static, Path, MethodName:makeRelative, Path parentPath, Path childPath,  @AT@ 16146 @LENGTH@ 14
------INS SimpleType@@Path @TO@ SingleVariableDeclaration@@Path childPath @AT@ 16146 @LENGTH@ 4
------INS SimpleName@@childPath @TO@ SingleVariableDeclaration@@Path childPath @AT@ 16151 @LENGTH@ 9
---INS VariableDeclarationStatement@@String parentString=parentPath.toString().endsWith(Path.SEPARATOR) ? parentPath.toString() : parentPath.toString() + Path.SEPARATOR; @TO@ MethodDeclaration@@public, static, Path, MethodName:makeRelative, Path parentPath, Path childPath,  @AT@ 16168 @LENGTH@ 142
------INS SimpleType@@String @TO@ VariableDeclarationStatement@@String parentString=parentPath.toString().endsWith(Path.SEPARATOR) ? parentPath.toString() : parentPath.toString() + Path.SEPARATOR; @AT@ 16168 @LENGTH@ 6
------INS VariableDeclarationFragment@@parentString=parentPath.toString().endsWith(Path.SEPARATOR) ? parentPath.toString() : parentPath.toString() + Path.SEPARATOR @TO@ VariableDeclarationStatement@@String parentString=parentPath.toString().endsWith(Path.SEPARATOR) ? parentPath.toString() : parentPath.toString() + Path.SEPARATOR; @AT@ 16175 @LENGTH@ 134
---------INS SimpleName@@parentString @TO@ VariableDeclarationFragment@@parentString=parentPath.toString().endsWith(Path.SEPARATOR) ? parentPath.toString() : parentPath.toString() + Path.SEPARATOR @AT@ 16175 @LENGTH@ 12
---------INS ConditionalExpression@@parentPath.toString().endsWith(Path.SEPARATOR) ? parentPath.toString() : parentPath.toString() + Path.SEPARATOR @TO@ VariableDeclarationFragment@@parentString=parentPath.toString().endsWith(Path.SEPARATOR) ? parentPath.toString() : parentPath.toString() + Path.SEPARATOR @AT@ 16198 @LENGTH@ 111
------------INS MethodInvocation@@parentPath.toString().endsWith(Path.SEPARATOR) @TO@ ConditionalExpression@@parentPath.toString().endsWith(Path.SEPARATOR) ? parentPath.toString() : parentPath.toString() + Path.SEPARATOR @AT@ 16198 @LENGTH@ 46
---------------INS MethodInvocation@@MethodName:toString:[] @TO@ MethodInvocation@@parentPath.toString().endsWith(Path.SEPARATOR) @AT@ 16198 @LENGTH@ 21
---------------INS SimpleName@@Name:parentPath @TO@ MethodInvocation@@parentPath.toString().endsWith(Path.SEPARATOR) @AT@ 16198 @LENGTH@ 10
---------------INS SimpleName@@MethodName:endsWith:[Path.SEPARATOR] @TO@ MethodInvocation@@parentPath.toString().endsWith(Path.SEPARATOR) @AT@ 16220 @LENGTH@ 24
------------------INS QualifiedName@@Path.SEPARATOR @TO@ SimpleName@@MethodName:endsWith:[Path.SEPARATOR] @AT@ 16229 @LENGTH@ 14
---------------------INS SimpleName@@Path @TO@ QualifiedName@@Path.SEPARATOR @AT@ 16229 @LENGTH@ 4
---------------------INS SimpleName@@SEPARATOR @TO@ QualifiedName@@Path.SEPARATOR @AT@ 16234 @LENGTH@ 9
------------INS MethodInvocation@@parentPath.toString() @TO@ ConditionalExpression@@parentPath.toString().endsWith(Path.SEPARATOR) ? parentPath.toString() : parentPath.toString() + Path.SEPARATOR @AT@ 16247 @LENGTH@ 21
---------------INS SimpleName@@Name:parentPath @TO@ MethodInvocation@@parentPath.toString() @AT@ 16247 @LENGTH@ 10
---------------INS SimpleName@@MethodName:toString:[] @TO@ MethodInvocation@@parentPath.toString() @AT@ 16258 @LENGTH@ 10
------------INS InfixExpression@@parentPath.toString() + Path.SEPARATOR @TO@ ConditionalExpression@@parentPath.toString().endsWith(Path.SEPARATOR) ? parentPath.toString() : parentPath.toString() + Path.SEPARATOR @AT@ 16271 @LENGTH@ 38
---------------INS MethodInvocation@@parentPath.toString() @TO@ InfixExpression@@parentPath.toString() + Path.SEPARATOR @AT@ 16271 @LENGTH@ 21
------------------INS SimpleName@@Name:parentPath @TO@ MethodInvocation@@parentPath.toString() @AT@ 16271 @LENGTH@ 10
------------------INS SimpleName@@MethodName:toString:[] @TO@ MethodInvocation@@parentPath.toString() @AT@ 16282 @LENGTH@ 10
---------------INS Operator@@+ @TO@ InfixExpression@@parentPath.toString() + Path.SEPARATOR @AT@ 16292 @LENGTH@ 1
---------------INS QualifiedName@@Path.SEPARATOR @TO@ InfixExpression@@parentPath.toString() + Path.SEPARATOR @AT@ 16295 @LENGTH@ 14
------------------INS SimpleName@@Path @TO@ QualifiedName@@Path.SEPARATOR @AT@ 16295 @LENGTH@ 4
------------------INS SimpleName@@SEPARATOR @TO@ QualifiedName@@Path.SEPARATOR @AT@ 16300 @LENGTH@ 9
---INS VariableDeclarationStatement@@String childString=childPath.toString().endsWith(Path.SEPARATOR) ? childPath.toString() : childPath.toString() + Path.SEPARATOR; @TO@ MethodDeclaration@@public, static, Path, MethodName:makeRelative, Path parentPath, Path childPath,  @AT@ 16315 @LENGTH@ 138
------INS SimpleType@@String @TO@ VariableDeclarationStatement@@String childString=childPath.toString().endsWith(Path.SEPARATOR) ? childPath.toString() : childPath.toString() + Path.SEPARATOR; @AT@ 16315 @LENGTH@ 6
------INS VariableDeclarationFragment@@childString=childPath.toString().endsWith(Path.SEPARATOR) ? childPath.toString() : childPath.toString() + Path.SEPARATOR @TO@ VariableDeclarationStatement@@String childString=childPath.toString().endsWith(Path.SEPARATOR) ? childPath.toString() : childPath.toString() + Path.SEPARATOR; @AT@ 16322 @LENGTH@ 130
---------INS SimpleName@@childString @TO@ VariableDeclarationFragment@@childString=childPath.toString().endsWith(Path.SEPARATOR) ? childPath.toString() : childPath.toString() + Path.SEPARATOR @AT@ 16322 @LENGTH@ 11
---------INS ConditionalExpression@@childPath.toString().endsWith(Path.SEPARATOR) ? childPath.toString() : childPath.toString() + Path.SEPARATOR @TO@ VariableDeclarationFragment@@childString=childPath.toString().endsWith(Path.SEPARATOR) ? childPath.toString() : childPath.toString() + Path.SEPARATOR @AT@ 16344 @LENGTH@ 108
------------INS MethodInvocation@@childPath.toString().endsWith(Path.SEPARATOR) @TO@ ConditionalExpression@@childPath.toString().endsWith(Path.SEPARATOR) ? childPath.toString() : childPath.toString() + Path.SEPARATOR @AT@ 16344 @LENGTH@ 45
---------------INS MethodInvocation@@MethodName:toString:[] @TO@ MethodInvocation@@childPath.toString().endsWith(Path.SEPARATOR) @AT@ 16344 @LENGTH@ 20
---------------INS SimpleName@@Name:childPath @TO@ MethodInvocation@@childPath.toString().endsWith(Path.SEPARATOR) @AT@ 16344 @LENGTH@ 9
---------------INS SimpleName@@MethodName:endsWith:[Path.SEPARATOR] @TO@ MethodInvocation@@childPath.toString().endsWith(Path.SEPARATOR) @AT@ 16365 @LENGTH@ 24
------------------INS QualifiedName@@Path.SEPARATOR @TO@ SimpleName@@MethodName:endsWith:[Path.SEPARATOR] @AT@ 16374 @LENGTH@ 14
---------------------INS SimpleName@@Path @TO@ QualifiedName@@Path.SEPARATOR @AT@ 16374 @LENGTH@ 4
---------------------INS SimpleName@@SEPARATOR @TO@ QualifiedName@@Path.SEPARATOR @AT@ 16379 @LENGTH@ 9
------------INS MethodInvocation@@childPath.toString() @TO@ ConditionalExpression@@childPath.toString().endsWith(Path.SEPARATOR) ? childPath.toString() : childPath.toString() + Path.SEPARATOR @AT@ 16392 @LENGTH@ 20
---------------INS SimpleName@@Name:childPath @TO@ MethodInvocation@@childPath.toString() @AT@ 16392 @LENGTH@ 9
---------------INS SimpleName@@MethodName:toString:[] @TO@ MethodInvocation@@childPath.toString() @AT@ 16402 @LENGTH@ 10
------------INS InfixExpression@@childPath.toString() + Path.SEPARATOR @TO@ ConditionalExpression@@childPath.toString().endsWith(Path.SEPARATOR) ? childPath.toString() : childPath.toString() + Path.SEPARATOR @AT@ 16415 @LENGTH@ 37
---------------INS MethodInvocation@@childPath.toString() @TO@ InfixExpression@@childPath.toString() + Path.SEPARATOR @AT@ 16415 @LENGTH@ 20
------------------INS SimpleName@@Name:childPath @TO@ MethodInvocation@@childPath.toString() @AT@ 16415 @LENGTH@ 9
------------------INS SimpleName@@MethodName:toString:[] @TO@ MethodInvocation@@childPath.toString() @AT@ 16425 @LENGTH@ 10
---------------INS Operator@@+ @TO@ InfixExpression@@childPath.toString() + Path.SEPARATOR @AT@ 16435 @LENGTH@ 1
---------------INS QualifiedName@@Path.SEPARATOR @TO@ InfixExpression@@childPath.toString() + Path.SEPARATOR @AT@ 16438 @LENGTH@ 14
------------------INS SimpleName@@Path @TO@ QualifiedName@@Path.SEPARATOR @AT@ 16438 @LENGTH@ 4
------------------INS SimpleName@@SEPARATOR @TO@ QualifiedName@@Path.SEPARATOR @AT@ 16443 @LENGTH@ 9
---INS ReturnStatement@@ClassInstanceCreation:new Path(childString.replaceFirst(parentString,"")) @TO@ MethodDeclaration@@public, static, Path, MethodName:makeRelative, Path parentPath, Path childPath,  @AT@ 16458 @LENGTH@ 60
------INS ClassInstanceCreation@@Path[childString.replaceFirst(parentString,"")] @TO@ ReturnStatement@@ClassInstanceCreation:new Path(childString.replaceFirst(parentString,"")) @AT@ 16465 @LENGTH@ 52
---------INS New@@new @TO@ ClassInstanceCreation@@Path[childString.replaceFirst(parentString,"")] @AT@ 16465 @LENGTH@ 3
---------INS SimpleType@@Path @TO@ ClassInstanceCreation@@Path[childString.replaceFirst(parentString,"")] @AT@ 16469 @LENGTH@ 4
---------INS MethodInvocation@@childString.replaceFirst(parentString,"") @TO@ ClassInstanceCreation@@Path[childString.replaceFirst(parentString,"")] @AT@ 16474 @LENGTH@ 42
------------INS SimpleName@@Name:childString @TO@ MethodInvocation@@childString.replaceFirst(parentString,"") @AT@ 16474 @LENGTH@ 11
------------INS SimpleName@@MethodName:replaceFirst:[parentString, ""] @TO@ MethodInvocation@@childString.replaceFirst(parentString,"") @AT@ 16486 @LENGTH@ 30
---------------INS SimpleName@@parentString @TO@ SimpleName@@MethodName:replaceFirst:[parentString, ""] @AT@ 16499 @LENGTH@ 12
---------------INS StringLiteral@@"" @TO@ SimpleName@@MethodName:replaceFirst:[parentString, ""] @AT@ 16513 @LENGTH@ 2


INS MethodDeclaration@@public, String, MethodName:getDefaultReceiveQueue,  @TO@ TypeDeclaration@@[public]RabbitTemplate, RabbitAccessor[BeanFactoryAware, RabbitOperations, ChannelAwareMessageListener, ListenerContainerAware, PublisherCallbackChannel.Listener, BeanNameAware, DisposableBean] @AT@ 13785 @LENGTH@ 78
---INS Modifier@@public @TO@ MethodDeclaration@@public, String, MethodName:getDefaultReceiveQueue,  @AT@ 13785 @LENGTH@ 6
---INS SimpleType@@String @TO@ MethodDeclaration@@public, String, MethodName:getDefaultReceiveQueue,  @AT@ 13792 @LENGTH@ 6
---INS SimpleName@@MethodName:getDefaultReceiveQueue @TO@ MethodDeclaration@@public, String, MethodName:getDefaultReceiveQueue,  @AT@ 13799 @LENGTH@ 22
---INS ReturnStatement@@FieldAccess:this.defaultReceiveQueue @TO@ MethodDeclaration@@public, String, MethodName:getDefaultReceiveQueue,  @AT@ 13828 @LENGTH@ 32
------INS FieldAccess@@this.defaultReceiveQueue @TO@ ReturnStatement@@FieldAccess:this.defaultReceiveQueue @AT@ 13835 @LENGTH@ 24
---------INS ThisExpression@@this @TO@ FieldAccess@@this.defaultReceiveQueue @AT@ 13835 @LENGTH@ 4
---------INS SimpleName@@defaultReceiveQueue @TO@ FieldAccess@@this.defaultReceiveQueue @AT@ 13840 @LENGTH@ 19


UPD ExpressionStatement@@MethodInvocation:exchange.getOut().setBody("Hello " + s) @TO@ MethodInvocation:exchange.getMessage().setBody("Hello " + s) @AT@ 2942 @LENGTH@ 40
---UPD MethodInvocation@@exchange.getOut().setBody("Hello " + s) @TO@ exchange.getMessage().setBody("Hello " + s) @AT@ 2942 @LENGTH@ 39
------UPD MethodInvocation@@MethodName:getOut:[] @TO@ MethodName:getMessage:[] @AT@ 2942 @LENGTH@ 17


UPD ExpressionStatement@@MethodInvocation:bz2Channel.read(buffer) @TO@ MethodInvocation:assertThrows(IOException.class,() -> bz2Channel.read(buffer)) @AT@ 3633 @LENGTH@ 24
---INS MethodInvocation@@assertThrows(IOException.class,() -> bz2Channel.read(buffer)) @TO@ ExpressionStatement@@MethodInvocation:bz2Channel.read(buffer) @AT@ 3692 @LENGTH@ 62
------INS SimpleName@@MethodName:assertThrows:[IOException.class, () -> bz2Channel.read(buffer)] @TO@ MethodInvocation@@assertThrows(IOException.class,() -> bz2Channel.read(buffer)) @AT@ 3692 @LENGTH@ 62
---------INS TypeLiteral@@IOException.class @TO@ SimpleName@@MethodName:assertThrows:[IOException.class, () -> bz2Channel.read(buffer)] @AT@ 3705 @LENGTH@ 17
---------INS LambdaExpression@@() -> bz2Channel.read(buffer) @TO@ SimpleName@@MethodName:assertThrows:[IOException.class, () -> bz2Channel.read(buffer)] @AT@ 3724 @LENGTH@ 29
------------MOV MethodInvocation@@bz2Channel.read(buffer) @TO@ LambdaExpression@@() -> bz2Channel.read(buffer) @AT@ 3633 @LENGTH@ 23


INS MethodDeclaration@@public, static, void, MethodName:alterTable, IMetaStoreClient client, String databaseName, String tblName, Table table,  @TO@ TypeDeclaration@@[public]MetastoreUtil,  @AT@ 2448 @LENGTH@ 334
---INS Modifier@@public @TO@ MethodDeclaration@@public, static, void, MethodName:alterTable, IMetaStoreClient client, String databaseName, String tblName, Table table,  @AT@ 2448 @LENGTH@ 6
---INS Modifier@@static @TO@ MethodDeclaration@@public, static, void, MethodName:alterTable, IMetaStoreClient client, String databaseName, String tblName, Table table,  @AT@ 2455 @LENGTH@ 6
---INS PrimitiveType@@void @TO@ MethodDeclaration@@public, static, void, MethodName:alterTable, IMetaStoreClient client, String databaseName, String tblName, Table table,  @AT@ 2462 @LENGTH@ 4
---INS SimpleName@@MethodName:alterTable @TO@ MethodDeclaration@@public, static, void, MethodName:alterTable, IMetaStoreClient client, String databaseName, String tblName, Table table,  @AT@ 2467 @LENGTH@ 10
---INS SingleVariableDeclaration@@IMetaStoreClient client @TO@ MethodDeclaration@@public, static, void, MethodName:alterTable, IMetaStoreClient client, String databaseName, String tblName, Table table,  @AT@ 2478 @LENGTH@ 23
------INS SimpleType@@IMetaStoreClient @TO@ SingleVariableDeclaration@@IMetaStoreClient client @AT@ 2478 @LENGTH@ 16
------INS SimpleName@@client @TO@ SingleVariableDeclaration@@IMetaStoreClient client @AT@ 2495 @LENGTH@ 6
---INS SingleVariableDeclaration@@String databaseName @TO@ MethodDeclaration@@public, static, void, MethodName:alterTable, IMetaStoreClient client, String databaseName, String tblName, Table table,  @AT@ 2503 @LENGTH@ 19
------INS SimpleType@@String @TO@ SingleVariableDeclaration@@String databaseName @AT@ 2503 @LENGTH@ 6
------INS SimpleName@@databaseName @TO@ SingleVariableDeclaration@@String databaseName @AT@ 2510 @LENGTH@ 12
---INS SingleVariableDeclaration@@String tblName @TO@ MethodDeclaration@@public, static, void, MethodName:alterTable, IMetaStoreClient client, String databaseName, String tblName, Table table,  @AT@ 2524 @LENGTH@ 14
------INS SimpleType@@String @TO@ SingleVariableDeclaration@@String tblName @AT@ 2524 @LENGTH@ 6
------INS SimpleName@@tblName @TO@ SingleVariableDeclaration@@String tblName @AT@ 2531 @LENGTH@ 7
---INS SingleVariableDeclaration@@Table table @TO@ MethodDeclaration@@public, static, void, MethodName:alterTable, IMetaStoreClient client, String databaseName, String tblName, Table table,  @AT@ 2540 @LENGTH@ 11
------INS SimpleType@@Table @TO@ SingleVariableDeclaration@@Table table @AT@ 2540 @LENGTH@ 5
------INS SimpleName@@table @TO@ SingleVariableDeclaration@@Table table @AT@ 2546 @LENGTH@ 5
---INS VariableDeclarationStatement@@EnvironmentContext envContext=new EnvironmentContext(ImmutableMap.of(StatsSetupConst.DO_NOT_UPDATE_STATS,StatsSetupConst.TRUE)); @TO@ MethodDeclaration@@public, static, void, MethodName:alterTable, IMetaStoreClient client, String databaseName, String tblName, Table table,  @AT@ 2559 @LENGTH@ 145
------INS SimpleType@@EnvironmentContext @TO@ VariableDeclarationStatement@@EnvironmentContext envContext=new EnvironmentContext(ImmutableMap.of(StatsSetupConst.DO_NOT_UPDATE_STATS,StatsSetupConst.TRUE)); @AT@ 2559 @LENGTH@ 18
------INS VariableDeclarationFragment@@envContext=new EnvironmentContext(ImmutableMap.of(StatsSetupConst.DO_NOT_UPDATE_STATS,StatsSetupConst.TRUE)) @TO@ VariableDeclarationStatement@@EnvironmentContext envContext=new EnvironmentContext(ImmutableMap.of(StatsSetupConst.DO_NOT_UPDATE_STATS,StatsSetupConst.TRUE)); @AT@ 2578 @LENGTH@ 125
---------INS SimpleName@@envContext @TO@ VariableDeclarationFragment@@envContext=new EnvironmentContext(ImmutableMap.of(StatsSetupConst.DO_NOT_UPDATE_STATS,StatsSetupConst.TRUE)) @AT@ 2578 @LENGTH@ 10
---------INS ClassInstanceCreation@@EnvironmentContext[ImmutableMap.of(StatsSetupConst.DO_NOT_UPDATE_STATS,StatsSetupConst.TRUE)] @TO@ VariableDeclarationFragment@@envContext=new EnvironmentContext(ImmutableMap.of(StatsSetupConst.DO_NOT_UPDATE_STATS,StatsSetupConst.TRUE)) @AT@ 2591 @LENGTH@ 112
------------INS New@@new @TO@ ClassInstanceCreation@@EnvironmentContext[ImmutableMap.of(StatsSetupConst.DO_NOT_UPDATE_STATS,StatsSetupConst.TRUE)] @AT@ 2591 @LENGTH@ 3
------------INS SimpleType@@EnvironmentContext @TO@ ClassInstanceCreation@@EnvironmentContext[ImmutableMap.of(StatsSetupConst.DO_NOT_UPDATE_STATS,StatsSetupConst.TRUE)] @AT@ 2595 @LENGTH@ 18
------------INS MethodInvocation@@ImmutableMap.of(StatsSetupConst.DO_NOT_UPDATE_STATS,StatsSetupConst.TRUE) @TO@ ClassInstanceCreation@@EnvironmentContext[ImmutableMap.of(StatsSetupConst.DO_NOT_UPDATE_STATS,StatsSetupConst.TRUE)] @AT@ 2623 @LENGTH@ 74
---------------INS SimpleName@@Name:ImmutableMap @TO@ MethodInvocation@@ImmutableMap.of(StatsSetupConst.DO_NOT_UPDATE_STATS,StatsSetupConst.TRUE) @AT@ 2623 @LENGTH@ 12
---------------INS SimpleName@@MethodName:of:[StatsSetupConst.DO_NOT_UPDATE_STATS, StatsSetupConst.TRUE] @TO@ MethodInvocation@@ImmutableMap.of(StatsSetupConst.DO_NOT_UPDATE_STATS,StatsSetupConst.TRUE) @AT@ 2636 @LENGTH@ 61
------------------INS QualifiedName@@StatsSetupConst.DO_NOT_UPDATE_STATS @TO@ SimpleName@@MethodName:of:[StatsSetupConst.DO_NOT_UPDATE_STATS, StatsSetupConst.TRUE] @AT@ 2639 @LENGTH@ 35
---------------------INS SimpleName@@StatsSetupConst @TO@ QualifiedName@@StatsSetupConst.DO_NOT_UPDATE_STATS @AT@ 2639 @LENGTH@ 15
---------------------INS SimpleName@@DO_NOT_UPDATE_STATS @TO@ QualifiedName@@StatsSetupConst.DO_NOT_UPDATE_STATS @AT@ 2655 @LENGTH@ 19
------------------INS QualifiedName@@StatsSetupConst.TRUE @TO@ SimpleName@@MethodName:of:[StatsSetupConst.DO_NOT_UPDATE_STATS, StatsSetupConst.TRUE] @AT@ 2676 @LENGTH@ 20
---------------------INS SimpleName@@StatsSetupConst @TO@ QualifiedName@@StatsSetupConst.TRUE @AT@ 2676 @LENGTH@ 15
---------------------INS SimpleName@@TRUE @TO@ QualifiedName@@StatsSetupConst.TRUE @AT@ 2692 @LENGTH@ 4
---INS ExpressionStatement@@MethodInvocation:ALTER_TABLE.invoke(client,databaseName,tblName,table,envContext) @TO@ MethodDeclaration@@public, static, void, MethodName:alterTable, IMetaStoreClient client, String databaseName, String tblName, Table table,  @AT@ 2709 @LENGTH@ 69
------INS MethodInvocation@@ALTER_TABLE.invoke(client,databaseName,tblName,table,envContext) @TO@ ExpressionStatement@@MethodInvocation:ALTER_TABLE.invoke(client,databaseName,tblName,table,envContext) @AT@ 2709 @LENGTH@ 68
---------INS SimpleName@@Name:ALTER_TABLE @TO@ MethodInvocation@@ALTER_TABLE.invoke(client,databaseName,tblName,table,envContext) @AT@ 2709 @LENGTH@ 11
---------INS SimpleName@@MethodName:invoke:[client, databaseName, tblName, table, envContext] @TO@ MethodInvocation@@ALTER_TABLE.invoke(client,databaseName,tblName,table,envContext) @AT@ 2721 @LENGTH@ 56
------------INS SimpleName@@client @TO@ SimpleName@@MethodName:invoke:[client, databaseName, tblName, table, envContext] @AT@ 2728 @LENGTH@ 6
------------INS SimpleName@@databaseName @TO@ SimpleName@@MethodName:invoke:[client, databaseName, tblName, table, envContext] @AT@ 2736 @LENGTH@ 12
------------INS SimpleName@@tblName @TO@ SimpleName@@MethodName:invoke:[client, databaseName, tblName, table, envContext] @AT@ 2750 @LENGTH@ 7
------------INS SimpleName@@table @TO@ SimpleName@@MethodName:invoke:[client, databaseName, tblName, table, envContext] @AT@ 2759 @LENGTH@ 5
------------INS SimpleName@@envContext @TO@ SimpleName@@MethodName:invoke:[client, databaseName, tblName, table, envContext] @AT@ 2766 @LENGTH@ 10


UPD ExpressionStatement@@MethodInvocation:Assert.notNull(consumerMessageEndpoint) @TO@ MethodInvocation:Assert.notNull(consumerMessageEndpoint,"The required 'consumerMessageEndpoint' was not null") @AT@ 2053 @LENGTH@ 40
---UPD MethodInvocation@@Assert.notNull(consumerMessageEndpoint) @TO@ Assert.notNull(consumerMessageEndpoint,"The required 'consumerMessageEndpoint' was not null") @AT@ 2053 @LENGTH@ 39
------UPD SimpleName@@MethodName:notNull:[consumerMessageEndpoint] @TO@ MethodName:notNull:[consumerMessageEndpoint, "The required 'consumerMessageEndpoint' was not null"] @AT@ 2060 @LENGTH@ 32
---------INS StringLiteral@@"The required 'consumerMessageEndpoint' was not null" @TO@ SimpleName@@MethodName:notNull:[consumerMessageEndpoint] @AT@ 2093 @LENGTH@ 53


UPD FieldDeclaration@@private, Function<ApplicationArguments,List<String>>, [commandsFromInputArgs] @TO@ private, Function<ApplicationArguments,List<String>>, [commandsFromInputArgs=args -> args.getSourceArgs().length == 0 ? Collections.emptyList() : Collections.singletonList(String.join(" ",args.getSourceArgs()))] @AT@ 2114 @LENGTH@ 75
---UPD VariableDeclarationFragment@@commandsFromInputArgs @TO@ commandsFromInputArgs=args -> args.getSourceArgs().length == 0 ? Collections.emptyList() : Collections.singletonList(String.join(" ",args.getSourceArgs())) @AT@ 2167 @LENGTH@ 21
------MOV LambdaExpression@@(args) -> Collections.singletonList(String.join(" ",args.getSourceArgs())) @TO@ VariableDeclarationFragment@@commandsFromInputArgs @AT@ 2397 @LENGTH@ 79
---------INS ConditionalExpression@@args.getSourceArgs().length == 0 ? Collections.emptyList() : Collections.singletonList(String.join(" ",args.getSourceArgs())) @TO@ LambdaExpression@@(args) -> Collections.singletonList(String.join(" ",args.getSourceArgs())) @AT@ 2199 @LENGTH@ 135
------------INS InfixExpression@@args.getSourceArgs().length == 0 @TO@ ConditionalExpression@@args.getSourceArgs().length == 0 ? Collections.emptyList() : Collections.singletonList(String.join(" ",args.getSourceArgs())) @AT@ 2199 @LENGTH@ 36
---------------INS FieldAccess@@args.getSourceArgs().length @TO@ InfixExpression@@args.getSourceArgs().length == 0 @AT@ 2199 @LENGTH@ 31
------------------INS MethodInvocation@@args.getSourceArgs() @TO@ FieldAccess@@args.getSourceArgs().length @AT@ 2199 @LENGTH@ 24
---------------------INS SimpleName@@Name:args @TO@ MethodInvocation@@args.getSourceArgs() @AT@ 2199 @LENGTH@ 4
---------------------INS SimpleName@@MethodName:getSourceArgs:[] @TO@ MethodInvocation@@args.getSourceArgs() @AT@ 2208 @LENGTH@ 15
------------------INS SimpleName@@length @TO@ FieldAccess@@args.getSourceArgs().length @AT@ 2224 @LENGTH@ 6
---------------INS Operator@@== @TO@ InfixExpression@@args.getSourceArgs().length == 0 @AT@ 2230 @LENGTH@ 2
---------------INS NumberLiteral@@0 @TO@ InfixExpression@@args.getSourceArgs().length == 0 @AT@ 2234 @LENGTH@ 1
------------INS MethodInvocation@@Collections.emptyList() @TO@ ConditionalExpression@@args.getSourceArgs().length == 0 ? Collections.emptyList() : Collections.singletonList(String.join(" ",args.getSourceArgs())) @AT@ 2238 @LENGTH@ 23
---------------INS SimpleName@@Name:Collections @TO@ MethodInvocation@@Collections.emptyList() @AT@ 2238 @LENGTH@ 11
---------------INS SimpleName@@MethodName:emptyList:[] @TO@ MethodInvocation@@Collections.emptyList() @AT@ 2250 @LENGTH@ 11
------------MOV MethodInvocation@@Collections.singletonList(String.join(" ",args.getSourceArgs())) @TO@ ConditionalExpression@@args.getSourceArgs().length == 0 ? Collections.emptyList() : Collections.singletonList(String.join(" ",args.getSourceArgs())) @AT@ 2411 @LENGTH@ 65


UPD ExpressionStatement@@Assignment:this.entityType=ResolvableType.forType(repositoryMetadata.getDomainTypeInformation().getGenericType()) @TO@ Assignment:this.entityType=repositoryMetadata.getDomainTypeInformation().toTypeDescriptor().getResolvableType() @AT@ 4896 @LENGTH@ 105
---UPD Assignment@@this.entityType=ResolvableType.forType(repositoryMetadata.getDomainTypeInformation().getGenericType()) @TO@ this.entityType=repositoryMetadata.getDomainTypeInformation().toTypeDescriptor().getResolvableType() @AT@ 4896 @LENGTH@ 104
------UPD MethodInvocation@@ResolvableType.forType(repositoryMetadata.getDomainTypeInformation().getGenericType()) @TO@ repositoryMetadata.getDomainTypeInformation().toTypeDescriptor().getResolvableType() @AT@ 4914 @LENGTH@ 86
---------INS MethodInvocation@@MethodName:toTypeDescriptor:[] @TO@ MethodInvocation@@ResolvableType.forType(repositoryMetadata.getDomainTypeInformation().getGenericType()) @AT@ 4914 @LENGTH@ 64
---------DEL SimpleName@@Name:ResolvableType @AT@ 4914 @LENGTH@ 14
---------DEL SimpleName@@MethodName:forType:[repositoryMetadata.getDomainTypeInformation().getGenericType()] @AT@ 4929 @LENGTH@ 71
------------DEL MethodInvocation@@repositoryMetadata.getDomainTypeInformation().getGenericType() @AT@ 4937 @LENGTH@ 62
---------MOV MethodInvocation@@MethodName:getDomainTypeInformation:[] @TO@ MethodInvocation@@ResolvableType.forType(repositoryMetadata.getDomainTypeInformation().getGenericType()) @AT@ 4937 @LENGTH@ 45
---------MOV SimpleName@@Name:repositoryMetadata @TO@ MethodInvocation@@ResolvableType.forType(repositoryMetadata.getDomainTypeInformation().getGenericType()) @AT@ 4937 @LENGTH@ 18
---------MOV SimpleName@@MethodName:getGenericType:[] @TO@ MethodInvocation@@ResolvableType.forType(repositoryMetadata.getDomainTypeInformation().getGenericType()) @AT@ 4983 @LENGTH@ 16


DEL MethodDeclaration@@public, voidMethodName:ReactiveNeo4jTemplate, ReactiveNeo4jClient neo4jClient, Neo4jMappingContext neo4jMappingContext, ReactiveDatabaseSelectionProvider databaseSelectionProvider,  @AT@ 5904 @LENGTH@ 429
---DEL Modifier@@public @AT@ 5904 @LENGTH@ 6
---DEL SimpleName@@MethodName:ReactiveNeo4jTemplate @AT@ 5911 @LENGTH@ 21
---DEL SingleVariableDeclaration@@ReactiveNeo4jClient neo4jClient @AT@ 5933 @LENGTH@ 31
------DEL SimpleType@@ReactiveNeo4jClient @AT@ 5933 @LENGTH@ 19
------DEL SimpleName@@neo4jClient @AT@ 5953 @LENGTH@ 11
---DEL SingleVariableDeclaration@@Neo4jMappingContext neo4jMappingContext @AT@ 5966 @LENGTH@ 39
------DEL SimpleType@@Neo4jMappingContext @AT@ 5966 @LENGTH@ 19
------DEL SimpleName@@neo4jMappingContext @AT@ 5986 @LENGTH@ 19
---DEL SingleVariableDeclaration@@ReactiveDatabaseSelectionProvider databaseSelectionProvider @AT@ 6016 @LENGTH@ 59
------DEL SimpleType@@ReactiveDatabaseSelectionProvider @AT@ 6016 @LENGTH@ 33
------DEL SimpleName@@databaseSelectionProvider @AT@ 6050 @LENGTH@ 25
---DEL ConstructorInvocation@@this(neo4jClient,neo4jMappingContext); @AT@ 6082 @LENGTH@ 39
------DEL SimpleName@@neo4jClient @AT@ 6087 @LENGTH@ 11
------DEL SimpleName@@neo4jMappingContext @AT@ 6100 @LENGTH@ 19
---DEL IfStatement@@if (databaseSelectionProvider != neo4jClient.getDatabaseSelectionProvider()) {  throw new IllegalStateException("The provided database selection provider differs from the ReactiveNeo4jClient's one.");} @AT@ 6124 @LENGTH@ 206
------DEL InfixExpression@@databaseSelectionProvider != neo4jClient.getDatabaseSelectionProvider() @AT@ 6128 @LENGTH@ 71
---------DEL SimpleName@@databaseSelectionProvider @AT@ 6128 @LENGTH@ 25
---------DEL Operator@@!= @AT@ 6153 @LENGTH@ 2
---------DEL MethodInvocation@@neo4jClient.getDatabaseSelectionProvider() @AT@ 6157 @LENGTH@ 42
------------DEL SimpleName@@Name:neo4jClient @AT@ 6157 @LENGTH@ 11
------------DEL SimpleName@@MethodName:getDatabaseSelectionProvider:[] @AT@ 6169 @LENGTH@ 30
------DEL Block@@ThenBody:{  throw new IllegalStateException("The provided database selection provider differs from the ReactiveNeo4jClient's one.");} @AT@ 6201 @LENGTH@ 129
---------DEL ThrowStatement@@ClassInstanceCreation:new IllegalStateException("The provided database selection provider differs from the ReactiveNeo4jClient's one.") @AT@ 6206 @LENGTH@ 120
------------DEL ClassInstanceCreation@@IllegalStateException["The provided database selection provider differs from the ReactiveNeo4jClient's one."] @AT@ 6212 @LENGTH@ 113
---------------DEL New@@new @AT@ 6212 @LENGTH@ 3
---------------DEL SimpleType@@IllegalStateException @AT@ 6216 @LENGTH@ 21
---------------DEL StringLiteral@@"The provided database selection provider differs from the ReactiveNeo4jClient's one." @AT@ 6238 @LENGTH@ 86


UPD MethodDeclaration@@public, void, MethodName:testFailsToCreateZCompressorInputStreamAndThrowsIOException, IOException,  @TO@ public, void, MethodName:testFailsToCreateZCompressorInputStreamAndThrowsIOException,  @AT@ 1387 @LENGTH@ 324
---DEL SimpleType@@IOException @AT@ 1468 @LENGTH@ 11
---DEL VariableDeclarationStatement@@final ZCompressorInputStream zCompressorInputStream=new ZCompressorInputStream(sequenceInputStream); @AT@ 1603 @LENGTH@ 102
------DEL Modifier@@final @AT@ 1603 @LENGTH@ 5
------DEL SimpleType@@ZCompressorInputStream @AT@ 1609 @LENGTH@ 22
------DEL VariableDeclarationFragment@@zCompressorInputStream=new ZCompressorInputStream(sequenceInputStream) @AT@ 1632 @LENGTH@ 72
---------DEL SimpleName@@zCompressorInputStream @AT@ 1632 @LENGTH@ 22
---------DEL ClassInstanceCreation@@ZCompressorInputStream[sequenceInputStream] @AT@ 1657 @LENGTH@ 47
---INS ExpressionStatement@@MethodInvocation:assertThrows(IOException.class,() -> new ZCompressorInputStream(sequenceInputStream)) @TO@ MethodDeclaration@@public, void, MethodName:testFailsToCreateZCompressorInputStreamAndThrowsIOException, IOException,  @AT@ 1628 @LENGTH@ 87
------INS MethodInvocation@@assertThrows(IOException.class,() -> new ZCompressorInputStream(sequenceInputStream)) @TO@ ExpressionStatement@@MethodInvocation:assertThrows(IOException.class,() -> new ZCompressorInputStream(sequenceInputStream)) @AT@ 1628 @LENGTH@ 86
---------INS SimpleName@@MethodName:assertThrows:[IOException.class, () -> new ZCompressorInputStream(sequenceInputStream)] @TO@ MethodInvocation@@assertThrows(IOException.class,() -> new ZCompressorInputStream(sequenceInputStream)) @AT@ 1628 @LENGTH@ 86
------------INS TypeLiteral@@IOException.class @TO@ SimpleName@@MethodName:assertThrows:[IOException.class, () -> new ZCompressorInputStream(sequenceInputStream)] @AT@ 1641 @LENGTH@ 17
------------INS LambdaExpression@@() -> new ZCompressorInputStream(sequenceInputStream) @TO@ SimpleName@@MethodName:assertThrows:[IOException.class, () -> new ZCompressorInputStream(sequenceInputStream)] @AT@ 1660 @LENGTH@ 53
---------------INS ClassInstanceCreation@@ZCompressorInputStream[sequenceInputStream] @TO@ LambdaExpression@@() -> new ZCompressorInputStream(sequenceInputStream) @AT@ 1666 @LENGTH@ 47
------------------MOV New@@new @TO@ ClassInstanceCreation@@ZCompressorInputStream[sequenceInputStream] @AT@ 1657 @LENGTH@ 3
------------------MOV New@@new @TO@ ClassInstanceCreation@@ZCompressorInputStream[sequenceInputStream] @AT@ 1657 @LENGTH@ 3
------------------MOV SimpleType@@ZCompressorInputStream @TO@ ClassInstanceCreation@@ZCompressorInputStream[sequenceInputStream] @AT@ 1661 @LENGTH@ 22
------------------MOV SimpleType@@ZCompressorInputStream @TO@ ClassInstanceCreation@@ZCompressorInputStream[sequenceInputStream] @AT@ 1661 @LENGTH@ 22
------------------MOV SimpleName@@sequenceInputStream @TO@ ClassInstanceCreation@@ZCompressorInputStream[sequenceInputStream] @AT@ 1684 @LENGTH@ 19


UPD ExpressionStatement@@MethodInvocation:commitManager.forceCommit(getPartition(),getRecordOffset()) @TO@ MethodInvocation:commitManager.recordOffset(getPartition(),getRecordOffset()) @AT@ 1449 @LENGTH@ 61
---UPD MethodInvocation@@commitManager.forceCommit(getPartition(),getRecordOffset()) @TO@ commitManager.recordOffset(getPartition(),getRecordOffset()) @AT@ 1449 @LENGTH@ 60
------UPD SimpleName@@MethodName:forceCommit:[getPartition(), getRecordOffset()] @TO@ MethodName:recordOffset:[getPartition(), getRecordOffset()] @AT@ 1463 @LENGTH@ 46


UPD ExpressionStatement@@MethodInvocation:exchange.getOut().getHeaders().put("headerAttributeElement",new QName("http://shouldBeInHeader","<myElement />")) @TO@ MethodInvocation:exchange.getOut().getHeaders().put("headerAttributeElement",new QName("http://shouldBeInHeader","myElement")) @AT@ 4854 @LENGTH@ 116
---UPD MethodInvocation@@exchange.getOut().getHeaders().put("headerAttributeElement",new QName("http://shouldBeInHeader","<myElement />")) @TO@ exchange.getOut().getHeaders().put("headerAttributeElement",new QName("http://shouldBeInHeader","myElement")) @AT@ 4854 @LENGTH@ 115
------UPD SimpleName@@MethodName:put:["headerAttributeElement", new QName("http://shouldBeInHeader","<myElement />")] @TO@ MethodName:put:["headerAttributeElement", new QName("http://shouldBeInHeader","myElement")] @AT@ 4885 @LENGTH@ 84
---------UPD ClassInstanceCreation@@QName["http://shouldBeInHeader", "<myElement />"] @TO@ QName["http://shouldBeInHeader", "myElement"] @AT@ 4915 @LENGTH@ 53
------------UPD StringLiteral@@"<myElement />" @TO@ "myElement" @AT@ 4952 @LENGTH@ 15


UPD ExpressionStatement@@MethodInvocation:LOG.debug(String.format("Adding mapping file to persistence unit %s.",mappingFileName,persistenceUnitName)) @TO@ MethodInvocation:LOG.debug(String.format("Adding mapping file %s to persistence unit %s.",mappingFileName,persistenceUnitName)) @AT@ 2907 @LENGTH@ 110
---UPD MethodInvocation@@LOG.debug(String.format("Adding mapping file to persistence unit %s.",mappingFileName,persistenceUnitName)) @TO@ LOG.debug(String.format("Adding mapping file %s to persistence unit %s.",mappingFileName,persistenceUnitName)) @AT@ 2907 @LENGTH@ 109
------UPD SimpleName@@MethodName:debug:[String.format("Adding mapping file to persistence unit %s.",mappingFileName,persistenceUnitName)] @TO@ MethodName:debug:[String.format("Adding mapping file %s to persistence unit %s.",mappingFileName,persistenceUnitName)] @AT@ 2911 @LENGTH@ 105
---------UPD MethodInvocation@@String.format("Adding mapping file to persistence unit %s.",mappingFileName,persistenceUnitName) @TO@ String.format("Adding mapping file %s to persistence unit %s.",mappingFileName,persistenceUnitName) @AT@ 2917 @LENGTH@ 98
------------UPD SimpleName@@MethodName:format:["Adding mapping file to persistence unit %s.", mappingFileName, persistenceUnitName] @TO@ MethodName:format:["Adding mapping file %s to persistence unit %s.", mappingFileName, persistenceUnitName] @AT@ 2924 @LENGTH@ 91
---------------UPD StringLiteral@@"Adding mapping file to persistence unit %s." @TO@ "Adding mapping file %s to persistence unit %s." @AT@ 2931 @LENGTH@ 45


UPD ExpressionStatement@@Assignment:this.isEntity=Lazy.of(() -> metamodel.isJpaManaged(getActualType())) @TO@ Assignment:this.isEntity=Lazy.of(() -> metamodel.isMappedType(getActualType())) @AT@ 4264 @LENGTH@ 71
---UPD Assignment@@this.isEntity=Lazy.of(() -> metamodel.isJpaManaged(getActualType())) @TO@ this.isEntity=Lazy.of(() -> metamodel.isMappedType(getActualType())) @AT@ 4264 @LENGTH@ 70
------UPD MethodInvocation@@Lazy.of(() -> metamodel.isJpaManaged(getActualType())) @TO@ Lazy.of(() -> metamodel.isMappedType(getActualType())) @AT@ 4280 @LENGTH@ 54
---------UPD SimpleName@@MethodName:of:[() -> metamodel.isJpaManaged(getActualType())] @TO@ MethodName:of:[() -> metamodel.isMappedType(getActualType())] @AT@ 4285 @LENGTH@ 49
------------UPD LambdaExpression@@() -> metamodel.isJpaManaged(getActualType()) @TO@ () -> metamodel.isMappedType(getActualType()) @AT@ 4288 @LENGTH@ 45
---------------UPD MethodInvocation@@metamodel.isJpaManaged(getActualType()) @TO@ metamodel.isMappedType(getActualType()) @AT@ 4294 @LENGTH@ 39
------------------UPD SimpleName@@MethodName:isJpaManaged:[getActualType()] @TO@ MethodName:isMappedType:[getActualType()] @AT@ 4304 @LENGTH@ 29


UPD VariableDeclarationStatement@@final HttpHeaders httpHeaders=new HttpHeaders().put("x-test-header","123"); @TO@ final HttpHeaders httpHeaders=new HttpHeaders().set("x-test-header","123"); @AT@ 5453 @LENGTH@ 78
---UPD VariableDeclarationFragment@@httpHeaders=new HttpHeaders().put("x-test-header","123") @TO@ httpHeaders=new HttpHeaders().set("x-test-header","123") @AT@ 5471 @LENGTH@ 59
------UPD MethodInvocation@@new HttpHeaders().put("x-test-header","123") @TO@ new HttpHeaders().set("x-test-header","123") @AT@ 5485 @LENGTH@ 45
---------UPD SimpleName@@MethodName:put:["x-test-header", "123"] @TO@ MethodName:set:["x-test-header", "123"] @AT@ 5503 @LENGTH@ 27


INS VariableDeclarationStatement@@boolean folder=blob.getName().endsWith("/"); @TO@ MethodDeclaration@@protected, boolean, MethodName:includeObject, Blob blob,  @AT@ 5318 @LENGTH@ 46
---INS PrimitiveType@@boolean @TO@ VariableDeclarationStatement@@boolean folder=blob.getName().endsWith("/"); @AT@ 5318 @LENGTH@ 7
---INS VariableDeclarationFragment@@folder=blob.getName().endsWith("/") @TO@ VariableDeclarationStatement@@boolean folder=blob.getName().endsWith("/"); @AT@ 5326 @LENGTH@ 37
------INS SimpleName@@folder @TO@ VariableDeclarationFragment@@folder=blob.getName().endsWith("/") @AT@ 5326 @LENGTH@ 6
------MOV MethodInvocation@@blob.getName().endsWith("/") @TO@ VariableDeclarationFragment@@folder=blob.getName().endsWith("/") @AT@ 5434 @LENGTH@ 28


UPD ExpressionStatement@@MethodInvocation:exchange.getOut().setBody("When You Go Home, Tell Them Of Us And Say, For Your Tomorrow, We Gave Our Today.") @TO@ MethodInvocation:exchange.getMessage().setBody("When You Go Home, Tell Them Of Us And Say, For Your Tomorrow, We Gave Our Today.") @AT@ 1460 @LENGTH@ 151
---UPD MethodInvocation@@exchange.getOut().setBody("When You Go Home, Tell Them Of Us And Say, For Your Tomorrow, We Gave Our Today.") @TO@ exchange.getMessage().setBody("When You Go Home, Tell Them Of Us And Say, For Your Tomorrow, We Gave Our Today.") @AT@ 1460 @LENGTH@ 150
------UPD MethodInvocation@@MethodName:getOut:[] @TO@ MethodName:getMessage:[] @AT@ 1460 @LENGTH@ 17


UPD VariableDeclarationStatement@@final Object[] elements=new Object[]{"1","3","5","7","2","4","6"}; @TO@ final Object[] elements={"1","3","5","7","2","4","6"}; @AT@ 2499 @LENGTH@ 77
---UPD VariableDeclarationFragment@@elements=new Object[]{"1","3","5","7","2","4","6"} @TO@ elements={"1","3","5","7","2","4","6"} @AT@ 2514 @LENGTH@ 61
------DEL ArrayCreation@@new Object[]{"1","3","5","7","2","4","6"} @AT@ 2525 @LENGTH@ 50
---------DEL ArrayType@@Object[] @AT@ 2529 @LENGTH@ 8
------------DEL SimpleType@@Object @AT@ 2529 @LENGTH@ 6
---------DEL ArrayInitializer@@{"1","3","5","7","2","4","6"} @AT@ 2538 @LENGTH@ 37
------INS ArrayInitializer@@{"1","3","5","7","2","4","6"} @TO@ VariableDeclarationFragment@@elements=new Object[]{"1","3","5","7","2","4","6"} @AT@ 2525 @LENGTH@ 37
---------MOV StringLiteral@@"1" @TO@ ArrayInitializer@@{"1","3","5","7","2","4","6"} @AT@ 2540 @LENGTH@ 3
---------MOV StringLiteral@@"3" @TO@ ArrayInitializer@@{"1","3","5","7","2","4","6"} @AT@ 2545 @LENGTH@ 3
---------MOV StringLiteral@@"5" @TO@ ArrayInitializer@@{"1","3","5","7","2","4","6"} @AT@ 2550 @LENGTH@ 3
---------MOV StringLiteral@@"7" @TO@ ArrayInitializer@@{"1","3","5","7","2","4","6"} @AT@ 2555 @LENGTH@ 3
---------MOV StringLiteral@@"2" @TO@ ArrayInitializer@@{"1","3","5","7","2","4","6"} @AT@ 2560 @LENGTH@ 3
---------MOV StringLiteral@@"4" @TO@ ArrayInitializer@@{"1","3","5","7","2","4","6"} @AT@ 2565 @LENGTH@ 3
---------MOV StringLiteral@@"6" @TO@ ArrayInitializer@@{"1","3","5","7","2","4","6"} @AT@ 2570 @LENGTH@ 3


INS ExpressionStatement@@MethodInvocation:resumeStrategy.start() @TO@ MethodDeclaration@@public, Processor, MethodName:createProcessor, Exception,  @AT@ 1708 @LENGTH@ 23
---INS MethodInvocation@@resumeStrategy.start() @TO@ ExpressionStatement@@MethodInvocation:resumeStrategy.start() @AT@ 1708 @LENGTH@ 22
------INS SimpleName@@Name:resumeStrategy @TO@ MethodInvocation@@resumeStrategy.start() @AT@ 1708 @LENGTH@ 14
------INS SimpleName@@MethodName:start:[] @TO@ MethodInvocation@@resumeStrategy.start() @AT@ 1723 @LENGTH@ 7


UPD MethodDeclaration@@private, static, VerbDefinition, MethodName:findVerbDefinition, RestDefinition rest, String endpointUri,  @TO@ private, static, VerbDefinition, MethodName:findVerbDefinition, RestDefinition rest, String endpointUri, Exception,  @AT@ 9387 @LENGTH@ 823
---INS SimpleType@@Exception @TO@ MethodDeclaration@@private, static, VerbDefinition, MethodName:findVerbDefinition, RestDefinition rest, String endpointUri,  @AT@ 9484 @LENGTH@ 9
---UPD EnhancedForStatement@@for (VerbDefinition verb : rest.getVerbs()) {  String verbUri=rest.buildFromUri(verb);  if (endpointUri.startsWith(verbUri) && preVerbUri.length() < verbUri.length()) {    preVerbUri=verbUri;    ret=verb;  }} @TO@ for (VerbDefinition verb : rest.getVerbs()) {  String verbUri=URISupport.normalizeUri(rest.buildFromUri(verb));  if (endpointUri.startsWith(verbUri) && preVerbUri.length() < verbUri.length()) {    preVerbUri=verbUri;    ret=verb;  }} @AT@ 9554 @LENGTH@ 630
------UPD VariableDeclarationStatement@@String verbUri=rest.buildFromUri(verb); @TO@ String verbUri=URISupport.normalizeUri(rest.buildFromUri(verb)); @AT@ 9612 @LENGTH@ 41
---------UPD VariableDeclarationFragment@@verbUri=rest.buildFromUri(verb) @TO@ verbUri=URISupport.normalizeUri(rest.buildFromUri(verb)) @AT@ 9619 @LENGTH@ 33
------------INS MethodInvocation@@URISupport.normalizeUri(rest.buildFromUri(verb)) @TO@ VariableDeclarationFragment@@verbUri=rest.buildFromUri(verb) @AT@ 9646 @LENGTH@ 48
---------------INS SimpleName@@Name:URISupport @TO@ MethodInvocation@@URISupport.normalizeUri(rest.buildFromUri(verb)) @AT@ 9646 @LENGTH@ 10
---------------INS SimpleName@@MethodName:normalizeUri:[rest.buildFromUri(verb)] @TO@ MethodInvocation@@URISupport.normalizeUri(rest.buildFromUri(verb)) @AT@ 9657 @LENGTH@ 37
------------------MOV MethodInvocation@@rest.buildFromUri(verb) @TO@ SimpleName@@MethodName:normalizeUri:[rest.buildFromUri(verb)] @AT@ 9629 @LENGTH@ 23


INS MethodDeclaration@@private, voidMethodName:TestCustomOpenSamlObjects,  @TO@ TypeDeclaration@@[public]TestCustomOpenSamlObjects,  @AT@ 3380 @LENGTH@ 41
---INS Modifier@@private @TO@ MethodDeclaration@@private, voidMethodName:TestCustomOpenSamlObjects,  @AT@ 3380 @LENGTH@ 7
---INS SimpleName@@MethodName:TestCustomOpenSamlObjects @TO@ MethodDeclaration@@private, voidMethodName:TestCustomOpenSamlObjects,  @AT@ 3388 @LENGTH@ 25


UPD EnhancedForStatement@@for (long tid : rsp.getTxn_ids()) {  assert (awiResp.getTxnToWriteIds().get(i++).getTxnId() == tid);  if (lockReq != null) {    lockReq.setTxnid(tid);    txnHandler.lock(lockReq);  }  if (aborted != null && aborted.contains(tid)) {    txnHandler.abortTxn(new AbortTxnRequest(tid));  } else   if (open == null || (open != null && !open.contains(tid))) {    txnHandler.commitTxn(new CommitTxnRequest(tid));  }} @TO@ for (long tid : rsp.getTxn_ids()) {  assert (awiResp.getTxnToWriteIds().get(i).getTxnId() == tid);  ++i;  if (lockReq != null) {    lockReq.setTxnid(tid);    txnHandler.lock(lockReq);  }  if (aborted != null && aborted.contains(tid)) {    txnHandler.abortTxn(new AbortTxnRequest(tid));  } else   if (open == null || !open.contains(tid)) {    txnHandler.commitTxn(new CommitTxnRequest(tid));  }} @AT@ 12935 @LENGTH@ 459
---UPD AssertStatement@@ParenthesizedExpression:(awiResp.getTxnToWriteIds().get(i++).getTxnId() == tid) @TO@ ParenthesizedExpression:(awiResp.getTxnToWriteIds().get(i).getTxnId() == tid) @AT@ 12977 @LENGTH@ 62
------UPD ParenthesizedExpression@@(awiResp.getTxnToWriteIds().get(i++).getTxnId() == tid) @TO@ (awiResp.getTxnToWriteIds().get(i).getTxnId() == tid) @AT@ 12983 @LENGTH@ 55
---------UPD InfixExpression@@awiResp.getTxnToWriteIds().get(i++).getTxnId() == tid @TO@ awiResp.getTxnToWriteIds().get(i).getTxnId() == tid @AT@ 12984 @LENGTH@ 53
------------UPD MethodInvocation@@awiResp.getTxnToWriteIds().get(i++).getTxnId() @TO@ awiResp.getTxnToWriteIds().get(i).getTxnId() @AT@ 12984 @LENGTH@ 46
---------------UPD MethodInvocation@@MethodName:get:[i++] @TO@ MethodName:get:[i] @AT@ 12984 @LENGTH@ 35
------------------DEL PostfixExpression@@i++ @AT@ 13015 @LENGTH@ 3
---------------------DEL SimpleName@@i @AT@ 13015 @LENGTH@ 1
---------------------DEL Operator@@++ @AT@ 13017 @LENGTH@ 2
------------------INS SimpleName@@i @TO@ MethodInvocation@@MethodName:get:[i++] @AT@ 13022 @LENGTH@ 1
---INS ExpressionStatement@@PrefixExpression:++i @TO@ EnhancedForStatement@@for (long tid : rsp.getTxn_ids()) {  assert (awiResp.getTxnToWriteIds().get(i++).getTxnId() == tid);  if (lockReq != null) {    lockReq.setTxnid(tid);    txnHandler.lock(lockReq);  }  if (aborted != null && aborted.contains(tid)) {    txnHandler.abortTxn(new AbortTxnRequest(tid));  } else   if (open == null || (open != null && !open.contains(tid))) {    txnHandler.commitTxn(new CommitTxnRequest(tid));  }} @AT@ 13051 @LENGTH@ 4
------INS PrefixExpression@@++i @TO@ ExpressionStatement@@PrefixExpression:++i @AT@ 13051 @LENGTH@ 3
---------INS Operator@@++ @TO@ PrefixExpression@@++i @AT@ 13051 @LENGTH@ 2
---------INS SimpleName@@i @TO@ PrefixExpression@@++i @AT@ 13053 @LENGTH@ 1
---UPD IfStatement@@if (aborted != null && aborted.contains(tid)) {  txnHandler.abortTxn(new AbortTxnRequest(tid));} else if (open == null || (open != null && !open.contains(tid))) {  txnHandler.commitTxn(new CommitTxnRequest(tid));} @TO@ if (aborted != null && aborted.contains(tid)) {  txnHandler.abortTxn(new AbortTxnRequest(tid));} else if (open == null || !open.contains(tid)) {  txnHandler.commitTxn(new CommitTxnRequest(tid));} @AT@ 13147 @LENGTH@ 241
------UPD Block@@ElseBody:if (open == null || (open != null && !open.contains(tid))) {  txnHandler.commitTxn(new CommitTxnRequest(tid));} @TO@ ElseBody:if (open == null || !open.contains(tid)) {  txnHandler.commitTxn(new CommitTxnRequest(tid));} @AT@ 13263 @LENGTH@ 125
---------UPD IfStatement@@if (open == null || (open != null && !open.contains(tid))) {  txnHandler.commitTxn(new CommitTxnRequest(tid));} @TO@ if (open == null || !open.contains(tid)) {  txnHandler.commitTxn(new CommitTxnRequest(tid));} @AT@ 13263 @LENGTH@ 125
------------DEL InfixExpression@@open == null || (open != null && !open.contains(tid)) @AT@ 13267 @LENGTH@ 53
---------------DEL InfixExpression@@open == null @AT@ 13267 @LENGTH@ 12
------------------DEL SimpleName@@open @AT@ 13267 @LENGTH@ 4
------------------DEL Operator@@== @AT@ 13271 @LENGTH@ 2
------------------DEL NullLiteral@@null @AT@ 13275 @LENGTH@ 4
---------------DEL Operator@@|| @AT@ 13279 @LENGTH@ 2
---------------DEL ParenthesizedExpression@@(open != null && !open.contains(tid)) @AT@ 13283 @LENGTH@ 37
------------MOV InfixExpression@@open != null && !open.contains(tid) @TO@ IfStatement@@if (open == null || (open != null && !open.contains(tid))) {  txnHandler.commitTxn(new CommitTxnRequest(tid));} @AT@ 13284 @LENGTH@ 35
---------------UPD InfixExpression@@open != null @TO@ open == null @AT@ 13284 @LENGTH@ 12
------------------UPD Operator@@!= @TO@ == @AT@ 13288 @LENGTH@ 2
---------------UPD Operator@@&& @TO@ || @AT@ 13296 @LENGTH@ 2


DEL IfStatement@@if (!configuration.isUseDefaultCredentialsProvider() && configuration.getAmazonSQSClient() == null && (configuration.getAccessKey() == null || configuration.getSecretKey() == null)) {  throw new IllegalArgumentException("AmazonSQSClient or accessKey and secretKey must be specified.");} @AT@ 6176 @LENGTH@ 322
---DEL InfixExpression@@!configuration.isUseDefaultCredentialsProvider() && configuration.getAmazonSQSClient() == null && (configuration.getAccessKey() == null || configuration.getSecretKey() == null) @AT@ 6180 @LENGTH@ 192
------DEL InfixExpression@@!configuration.isUseDefaultCredentialsProvider() && configuration.getAmazonSQSClient() == null @AT@ 6180 @LENGTH@ 94
---------DEL PrefixExpression@@!configuration.isUseDefaultCredentialsProvider() @AT@ 6180 @LENGTH@ 48
------------DEL Operator@@! @AT@ 6180 @LENGTH@ 1
------------DEL MethodInvocation@@configuration.isUseDefaultCredentialsProvider() @AT@ 6181 @LENGTH@ 47
---------------DEL SimpleName@@Name:configuration @AT@ 6181 @LENGTH@ 13
---------------DEL SimpleName@@MethodName:isUseDefaultCredentialsProvider:[] @AT@ 6195 @LENGTH@ 33
---------DEL Operator@@&& @AT@ 6228 @LENGTH@ 2
---------DEL InfixExpression@@configuration.getAmazonSQSClient() == null @AT@ 6232 @LENGTH@ 42
------------DEL MethodInvocation@@configuration.getAmazonSQSClient() @AT@ 6232 @LENGTH@ 34
---------------DEL SimpleName@@Name:configuration @AT@ 6232 @LENGTH@ 13
---------------DEL SimpleName@@MethodName:getAmazonSQSClient:[] @AT@ 6246 @LENGTH@ 20
------------DEL Operator@@== @AT@ 6266 @LENGTH@ 2
------------DEL NullLiteral@@null @AT@ 6270 @LENGTH@ 4
------DEL Operator@@&& @AT@ 6274 @LENGTH@ 2
------DEL ParenthesizedExpression@@(configuration.getAccessKey() == null || configuration.getSecretKey() == null) @AT@ 6294 @LENGTH@ 78
---------DEL InfixExpression@@configuration.getAccessKey() == null || configuration.getSecretKey() == null @AT@ 6295 @LENGTH@ 76
------------DEL InfixExpression@@configuration.getAccessKey() == null @AT@ 6295 @LENGTH@ 36
---------------DEL MethodInvocation@@configuration.getAccessKey() @AT@ 6295 @LENGTH@ 28
------------------DEL SimpleName@@Name:configuration @AT@ 6295 @LENGTH@ 13
------------------DEL SimpleName@@MethodName:getAccessKey:[] @AT@ 6309 @LENGTH@ 14
---------------DEL Operator@@== @AT@ 6323 @LENGTH@ 2
---------------DEL NullLiteral@@null @AT@ 6327 @LENGTH@ 4
------------DEL Operator@@|| @AT@ 6331 @LENGTH@ 2
------------DEL InfixExpression@@configuration.getSecretKey() == null @AT@ 6335 @LENGTH@ 36
---------------DEL MethodInvocation@@configuration.getSecretKey() @AT@ 6335 @LENGTH@ 28
------------------DEL SimpleName@@Name:configuration @AT@ 6335 @LENGTH@ 13
------------------DEL SimpleName@@MethodName:getSecretKey:[] @AT@ 6349 @LENGTH@ 14
---------------DEL Operator@@== @AT@ 6363 @LENGTH@ 2
---------------DEL NullLiteral@@null @AT@ 6367 @LENGTH@ 4
---DEL Block@@ThenBody:{  throw new IllegalArgumentException("AmazonSQSClient or accessKey and secretKey must be specified.");} @AT@ 6374 @LENGTH@ 124
------DEL ThrowStatement@@ClassInstanceCreation:new IllegalArgumentException("AmazonSQSClient or accessKey and secretKey must be specified.") @AT@ 6388 @LENGTH@ 100
---------DEL ClassInstanceCreation@@IllegalArgumentException["AmazonSQSClient or accessKey and secretKey must be specified."] @AT@ 6394 @LENGTH@ 93
------------DEL New@@new @AT@ 6394 @LENGTH@ 3
------------DEL SimpleType@@IllegalArgumentException @AT@ 6398 @LENGTH@ 24
------------DEL StringLiteral@@"AmazonSQSClient or accessKey and secretKey must be specified." @AT@ 6423 @LENGTH@ 63


UPD ExpressionStatement@@MethodInvocation:exchange.getOut().setBody(person) @TO@ MethodInvocation:exchange.getMessage().setBody(person) @AT@ 1139 @LENGTH@ 34
---UPD MethodInvocation@@exchange.getOut().setBody(person) @TO@ exchange.getMessage().setBody(person) @AT@ 1139 @LENGTH@ 33
------UPD MethodInvocation@@MethodName:getOut:[] @TO@ MethodName:getMessage:[] @AT@ 1139 @LENGTH@ 17


UPD TryStatement@@try (Transaction transaction=driver.session(bookmarkCapture.createSessionConfig()).beginTransaction()){  long numberOfRelations=transaction.run("MATCH (t:%s) WHERE id(t) = $id RETURN size((t)-->(:Person)) as numberOfRelations".formatted(labelOfTestSubject),Values.parameters("id",recorded.get(0).getId())).single().get("numberOfRelations").asLong();  assertThat(numberOfRelations).isEqualTo(2L);  numberOfRelations=transaction.run("MATCH (t:%s) WHERE id(t) = $id RETURN size((t)-->(:Club)) as numberOfRelations".formatted(labelOfTestSubject),Values.parameters("id",newPerson.getId())).single().get("numberOfRelations").asLong();  assertThat(numberOfRelations).isEqualTo(2L);}  @TO@ try (Transaction transaction=driver.session(bookmarkCapture.createSessionConfig()).beginTransaction()){  long numberOfRelations=transaction.run(("MATCH (t:%s)-[r]->(:Person) WHERE id(t) = $id RETURN count(r) as numberOfRelations").formatted(labelOfTestSubject),Values.parameters("id",newPerson.getId())).single().get("numberOfRelations").asLong();  assertThat(numberOfRelations).isEqualTo(2L);  numberOfRelations=transaction.run(("MATCH (t:%s)-[r]->(:Club) WHERE id(t) = $id RETURN count(r) as numberOfRelations").formatted(labelOfTestSubject),Values.parameters("id",newPerson.getId())).single().get("numberOfRelations").asLong();  assertThat(numberOfRelations).isEqualTo(2L);}  @AT@ 9714 @LENGTH@ 721
---UPD VariableDeclarationStatement@@long numberOfRelations=transaction.run("MATCH (t:%s) WHERE id(t) = $id RETURN size((t)-->(:Person)) as numberOfRelations".formatted(labelOfTestSubject),Values.parameters("id",recorded.get(0).getId())).single().get("numberOfRelations").asLong(); @TO@ long numberOfRelations=transaction.run(("MATCH (t:%s)-[r]->(:Person) WHERE id(t) = $id RETURN count(r) as numberOfRelations").formatted(labelOfTestSubject),Values.parameters("id",newPerson.getId())).single().get("numberOfRelations").asLong(); @AT@ 9824 @LENGTH@ 260
------UPD VariableDeclarationFragment@@numberOfRelations=transaction.run("MATCH (t:%s) WHERE id(t) = $id RETURN size((t)-->(:Person)) as numberOfRelations".formatted(labelOfTestSubject),Values.parameters("id",recorded.get(0).getId())).single().get("numberOfRelations").asLong() @TO@ numberOfRelations=transaction.run(("MATCH (t:%s)-[r]->(:Person) WHERE id(t) = $id RETURN count(r) as numberOfRelations").formatted(labelOfTestSubject),Values.parameters("id",newPerson.getId())).single().get("numberOfRelations").asLong() @AT@ 9829 @LENGTH@ 254
---------UPD MethodInvocation@@transaction.run("MATCH (t:%s) WHERE id(t) = $id RETURN size((t)-->(:Person)) as numberOfRelations".formatted(labelOfTestSubject),Values.parameters("id",recorded.get(0).getId())).single().get("numberOfRelations").asLong() @TO@ transaction.run(("MATCH (t:%s)-[r]->(:Person) WHERE id(t) = $id RETURN count(r) as numberOfRelations").formatted(labelOfTestSubject),Values.parameters("id",newPerson.getId())).single().get("numberOfRelations").asLong() @AT@ 9849 @LENGTH@ 234
------------UPD MethodInvocation@@MethodName:run:["MATCH (t:%s) WHERE id(t) = $id RETURN size((t)-->(:Person)) as numberOfRelations".formatted(labelOfTestSubject), Values.parameters("id",recorded.get(0).getId())] @TO@ MethodName:run:[("MATCH (t:%s)-[r]->(:Person) WHERE id(t) = $id RETURN count(r) as numberOfRelations").formatted(labelOfTestSubject), Values.parameters("id",newPerson.getId())] @AT@ 9849 @LENGTH@ 185
---------------UPD MethodInvocation@@"MATCH (t:%s) WHERE id(t) = $id RETURN size((t)-->(:Person)) as numberOfRelations".formatted(labelOfTestSubject) @TO@ ("MATCH (t:%s)-[r]->(:Person) WHERE id(t) = $id RETURN count(r) as numberOfRelations").formatted(labelOfTestSubject) @AT@ 9871 @LENGTH@ 112
------------------INS ParenthesizedExpression@@("MATCH (t:%s)-[r]->(:Person) WHERE id(t) = $id RETURN count(r) as numberOfRelations") @TO@ MethodInvocation@@"MATCH (t:%s) WHERE id(t) = $id RETURN size((t)-->(:Person)) as numberOfRelations".formatted(labelOfTestSubject) @AT@ 9871 @LENGTH@ 86
---------------------INS StringLiteral@@"MATCH (t:%s)-[r]->(:Person) WHERE id(t) = $id RETURN count(r) as numberOfRelations" @TO@ ParenthesizedExpression@@("MATCH (t:%s)-[r]->(:Person) WHERE id(t) = $id RETURN count(r) as numberOfRelations") @AT@ 9872 @LENGTH@ 84
------------------DEL StringLiteral@@"MATCH (t:%s) WHERE id(t) = $id RETURN size((t)-->(:Person)) as numberOfRelations" @AT@ 9871 @LENGTH@ 82
---------------UPD MethodInvocation@@Values.parameters("id",recorded.get(0).getId()) @TO@ Values.parameters("id",newPerson.getId()) @AT@ 9985 @LENGTH@ 48
------------------UPD SimpleName@@MethodName:parameters:["id", recorded.get(0).getId()] @TO@ MethodName:parameters:["id", newPerson.getId()] @AT@ 9992 @LENGTH@ 41
---------------------UPD MethodInvocation@@recorded.get(0).getId() @TO@ newPerson.getId() @AT@ 10009 @LENGTH@ 23
------------------------DEL MethodInvocation@@MethodName:get:[0] @AT@ 10009 @LENGTH@ 15
---------------------------DEL NumberLiteral@@0 @AT@ 10022 @LENGTH@ 1
------------------------UPD SimpleName@@Name:recorded @TO@ Name:newPerson @AT@ 10009 @LENGTH@ 8
---UPD ExpressionStatement@@Assignment:numberOfRelations=transaction.run("MATCH (t:%s) WHERE id(t) = $id RETURN size((t)-->(:Club)) as numberOfRelations".formatted(labelOfTestSubject),Values.parameters("id",newPerson.getId())).single().get("numberOfRelations").asLong() @TO@ Assignment:numberOfRelations=transaction.run(("MATCH (t:%s)-[r]->(:Club) WHERE id(t) = $id RETURN count(r) as numberOfRelations").formatted(labelOfTestSubject),Values.parameters("id",newPerson.getId())).single().get("numberOfRelations").asLong() @AT@ 10136 @LENGTH@ 247
------UPD Assignment@@numberOfRelations=transaction.run("MATCH (t:%s) WHERE id(t) = $id RETURN size((t)-->(:Club)) as numberOfRelations".formatted(labelOfTestSubject),Values.parameters("id",newPerson.getId())).single().get("numberOfRelations").asLong() @TO@ numberOfRelations=transaction.run(("MATCH (t:%s)-[r]->(:Club) WHERE id(t) = $id RETURN count(r) as numberOfRelations").formatted(labelOfTestSubject),Values.parameters("id",newPerson.getId())).single().get("numberOfRelations").asLong() @AT@ 10136 @LENGTH@ 246
---------UPD MethodInvocation@@transaction.run("MATCH (t:%s) WHERE id(t) = $id RETURN size((t)-->(:Club)) as numberOfRelations".formatted(labelOfTestSubject),Values.parameters("id",newPerson.getId())).single().get("numberOfRelations").asLong() @TO@ transaction.run(("MATCH (t:%s)-[r]->(:Club) WHERE id(t) = $id RETURN count(r) as numberOfRelations").formatted(labelOfTestSubject),Values.parameters("id",newPerson.getId())).single().get("numberOfRelations").asLong() @AT@ 10156 @LENGTH@ 226
------------UPD MethodInvocation@@MethodName:run:["MATCH (t:%s) WHERE id(t) = $id RETURN size((t)-->(:Club)) as numberOfRelations".formatted(labelOfTestSubject), Values.parameters("id",newPerson.getId())] @TO@ MethodName:run:[("MATCH (t:%s)-[r]->(:Club) WHERE id(t) = $id RETURN count(r) as numberOfRelations").formatted(labelOfTestSubject), Values.parameters("id",newPerson.getId())] @AT@ 10156 @LENGTH@ 177
---------------UPD MethodInvocation@@"MATCH (t:%s) WHERE id(t) = $id RETURN size((t)-->(:Club)) as numberOfRelations".formatted(labelOfTestSubject) @TO@ ("MATCH (t:%s)-[r]->(:Club) WHERE id(t) = $id RETURN count(r) as numberOfRelations").formatted(labelOfTestSubject) @AT@ 10178 @LENGTH@ 110
------------------INS ParenthesizedExpression@@("MATCH (t:%s)-[r]->(:Club) WHERE id(t) = $id RETURN count(r) as numberOfRelations") @TO@ MethodInvocation@@"MATCH (t:%s) WHERE id(t) = $id RETURN size((t)-->(:Club)) as numberOfRelations".formatted(labelOfTestSubject) @AT@ 10176 @LENGTH@ 84
---------------------INS StringLiteral@@"MATCH (t:%s)-[r]->(:Club) WHERE id(t) = $id RETURN count(r) as numberOfRelations" @TO@ ParenthesizedExpression@@("MATCH (t:%s)-[r]->(:Club) WHERE id(t) = $id RETURN count(r) as numberOfRelations") @AT@ 10177 @LENGTH@ 82
------------------DEL StringLiteral@@"MATCH (t:%s) WHERE id(t) = $id RETURN size((t)-->(:Club)) as numberOfRelations" @AT@ 10178 @LENGTH@ 80


UPD VariableDeclarationStatement@@KafkaConsumerResumeStrategy resumableRouteStrategy=kafkaConsumer.getEndpoint().getCamelContext().hasService(KafkaConsumerResumeStrategy.class); @TO@ KafkaConsumerResumeStrategy resumableRouteStrategy=kafkaConsumer.getResumeStrategy(); @AT@ 2144 @LENGTH@ 161
---UPD VariableDeclarationFragment@@resumableRouteStrategy=kafkaConsumer.getEndpoint().getCamelContext().hasService(KafkaConsumerResumeStrategy.class) @TO@ resumableRouteStrategy=kafkaConsumer.getResumeStrategy() @AT@ 2172 @LENGTH@ 132
------UPD MethodInvocation@@kafkaConsumer.getEndpoint().getCamelContext().hasService(KafkaConsumerResumeStrategy.class) @TO@ kafkaConsumer.getResumeStrategy() @AT@ 2213 @LENGTH@ 91
---------DEL MethodInvocation@@MethodName:getCamelContext:[] @AT@ 2213 @LENGTH@ 45
---------DEL MethodInvocation@@MethodName:getEndpoint:[] @AT@ 2213 @LENGTH@ 27
---------UPD SimpleName@@MethodName:hasService:[KafkaConsumerResumeStrategy.class] @TO@ MethodName:getResumeStrategy:[] @AT@ 2259 @LENGTH@ 45
------------DEL TypeLiteral@@KafkaConsumerResumeStrategy.class @AT@ 2270 @LENGTH@ 33


MOV VariableDeclarationStatement@@EntityFromDtoInstantiatingConverter<T> converter=new EntityFromDtoInstantiatingConverter<>(domainType,neo4jMappingContext); @TO@ MethodDeclaration@@List<R>, T, R, MethodName:doSave, Iterable<R> instances, Class<T> domainType,  @AT@ 42198 @LENGTH@ 126


INS IfStatement@@if (isView) {  Map<String,String> params=t.getParameters();  if (params != null && params.containsKey(authorizedKeyword)) {    String authorizedValue=params.get(authorizedKeyword);    if ("false".equalsIgnoreCase(authorizedValue)) {      return true;    }  }} @TO@ MethodDeclaration@@private, static, boolean, MethodName:isDeferredAuthView, Table t,  @AT@ 7475 @LENGTH@ 304
---INS SimpleName@@isView @TO@ IfStatement@@if (isView) {  Map<String,String> params=t.getParameters();  if (params != null && params.containsKey(authorizedKeyword)) {    String authorizedValue=params.get(authorizedKeyword);    if ("false".equalsIgnoreCase(authorizedValue)) {      return true;    }  }} @AT@ 7479 @LENGTH@ 6
---INS Block@@ThenBody:{  Map<String,String> params=t.getParameters();  if (params != null && params.containsKey(authorizedKeyword)) {    String authorizedValue=params.get(authorizedKeyword);    if ("false".equalsIgnoreCase(authorizedValue)) {      return true;    }  }} @TO@ IfStatement@@if (isView) {  Map<String,String> params=t.getParameters();  if (params != null && params.containsKey(authorizedKeyword)) {    String authorizedValue=params.get(authorizedKeyword);    if ("false".equalsIgnoreCase(authorizedValue)) {      return true;    }  }} @AT@ 7487 @LENGTH@ 292
------INS VariableDeclarationStatement@@Map<String,String> params=t.getParameters(); @TO@ Block@@ThenBody:{  Map<String,String> params=t.getParameters();  if (params != null && params.containsKey(authorizedKeyword)) {    String authorizedValue=params.get(authorizedKeyword);    if ("false".equalsIgnoreCase(authorizedValue)) {      return true;    }  }} @AT@ 7495 @LENGTH@ 47
---------INS ParameterizedType@@Map<String,String> @TO@ VariableDeclarationStatement@@Map<String,String> params=t.getParameters(); @AT@ 7495 @LENGTH@ 19
------------INS SimpleType@@Map @TO@ ParameterizedType@@Map<String,String> @AT@ 7495 @LENGTH@ 3
------------INS SimpleType@@String @TO@ ParameterizedType@@Map<String,String> @AT@ 7499 @LENGTH@ 6
------------INS SimpleType@@String @TO@ ParameterizedType@@Map<String,String> @AT@ 7507 @LENGTH@ 6
---------INS VariableDeclarationFragment@@params=t.getParameters() @TO@ VariableDeclarationStatement@@Map<String,String> params=t.getParameters(); @AT@ 7515 @LENGTH@ 26
------------INS SimpleName@@params @TO@ VariableDeclarationFragment@@params=t.getParameters() @AT@ 7515 @LENGTH@ 6
------------INS MethodInvocation@@t.getParameters() @TO@ VariableDeclarationFragment@@params=t.getParameters() @AT@ 7524 @LENGTH@ 17
---------------INS SimpleName@@Name:t @TO@ MethodInvocation@@t.getParameters() @AT@ 7524 @LENGTH@ 1
---------------INS SimpleName@@MethodName:getParameters:[] @TO@ MethodInvocation@@t.getParameters() @AT@ 7526 @LENGTH@ 15
------INS IfStatement@@if (params != null && params.containsKey(authorizedKeyword)) {  String authorizedValue=params.get(authorizedKeyword);  if ("false".equalsIgnoreCase(authorizedValue)) {    return true;  }} @TO@ Block@@ThenBody:{  Map<String,String> params=t.getParameters();  if (params != null && params.containsKey(authorizedKeyword)) {    String authorizedValue=params.get(authorizedKeyword);    if ("false".equalsIgnoreCase(authorizedValue)) {      return true;    }  }} @AT@ 7549 @LENGTH@ 224
---------INS InfixExpression@@params != null && params.containsKey(authorizedKeyword) @TO@ IfStatement@@if (params != null && params.containsKey(authorizedKeyword)) {  String authorizedValue=params.get(authorizedKeyword);  if ("false".equalsIgnoreCase(authorizedValue)) {    return true;  }} @AT@ 7553 @LENGTH@ 55
------------INS InfixExpression@@params != null @TO@ InfixExpression@@params != null && params.containsKey(authorizedKeyword) @AT@ 7553 @LENGTH@ 14
---------------INS SimpleName@@params @TO@ InfixExpression@@params != null @AT@ 7553 @LENGTH@ 6
---------------INS Operator@@!= @TO@ InfixExpression@@params != null @AT@ 7559 @LENGTH@ 2
---------------INS NullLiteral@@null @TO@ InfixExpression@@params != null @AT@ 7563 @LENGTH@ 4
------------INS Operator@@&& @TO@ InfixExpression@@params != null && params.containsKey(authorizedKeyword) @AT@ 7567 @LENGTH@ 2
------------INS MethodInvocation@@params.containsKey(authorizedKeyword) @TO@ InfixExpression@@params != null && params.containsKey(authorizedKeyword) @AT@ 7571 @LENGTH@ 37
---------------INS SimpleName@@Name:params @TO@ MethodInvocation@@params.containsKey(authorizedKeyword) @AT@ 7571 @LENGTH@ 6
---------------INS SimpleName@@MethodName:containsKey:[authorizedKeyword] @TO@ MethodInvocation@@params.containsKey(authorizedKeyword) @AT@ 7578 @LENGTH@ 30
------------------INS SimpleName@@authorizedKeyword @TO@ SimpleName@@MethodName:containsKey:[authorizedKeyword] @AT@ 7590 @LENGTH@ 17
---------INS Block@@ThenBody:{  String authorizedValue=params.get(authorizedKeyword);  if ("false".equalsIgnoreCase(authorizedValue)) {    return true;  }} @TO@ IfStatement@@if (params != null && params.containsKey(authorizedKeyword)) {  String authorizedValue=params.get(authorizedKeyword);  if ("false".equalsIgnoreCase(authorizedValue)) {    return true;  }} @AT@ 7610 @LENGTH@ 163
------------INS VariableDeclarationStatement@@String authorizedValue=params.get(authorizedKeyword); @TO@ Block@@ThenBody:{  String authorizedValue=params.get(authorizedKeyword);  if ("false".equalsIgnoreCase(authorizedValue)) {    return true;  }} @AT@ 7620 @LENGTH@ 55
---------------INS SimpleType@@String @TO@ VariableDeclarationStatement@@String authorizedValue=params.get(authorizedKeyword); @AT@ 7620 @LENGTH@ 6
---------------INS VariableDeclarationFragment@@authorizedValue=params.get(authorizedKeyword) @TO@ VariableDeclarationStatement@@String authorizedValue=params.get(authorizedKeyword); @AT@ 7627 @LENGTH@ 47
------------------INS SimpleName@@authorizedValue @TO@ VariableDeclarationFragment@@authorizedValue=params.get(authorizedKeyword) @AT@ 7627 @LENGTH@ 15
------------------INS MethodInvocation@@params.get(authorizedKeyword) @TO@ VariableDeclarationFragment@@authorizedValue=params.get(authorizedKeyword) @AT@ 7645 @LENGTH@ 29
---------------------INS SimpleName@@Name:params @TO@ MethodInvocation@@params.get(authorizedKeyword) @AT@ 7645 @LENGTH@ 6
---------------------INS SimpleName@@MethodName:get:[authorizedKeyword] @TO@ MethodInvocation@@params.get(authorizedKeyword) @AT@ 7652 @LENGTH@ 22
------------------------INS SimpleName@@authorizedKeyword @TO@ SimpleName@@MethodName:get:[authorizedKeyword] @AT@ 7656 @LENGTH@ 17
------------INS IfStatement@@if ("false".equalsIgnoreCase(authorizedValue)) {  return true;} @TO@ Block@@ThenBody:{  String authorizedValue=params.get(authorizedKeyword);  if ("false".equalsIgnoreCase(authorizedValue)) {    return true;  }} @AT@ 7684 @LENGTH@ 81
---------------INS MethodInvocation@@"false".equalsIgnoreCase(authorizedValue) @TO@ IfStatement@@if ("false".equalsIgnoreCase(authorizedValue)) {  return true;} @AT@ 7688 @LENGTH@ 41
------------------INS StringLiteral@@"false" @TO@ MethodInvocation@@"false".equalsIgnoreCase(authorizedValue) @AT@ 7688 @LENGTH@ 7
------------------INS SimpleName@@MethodName:equalsIgnoreCase:[authorizedValue] @TO@ MethodInvocation@@"false".equalsIgnoreCase(authorizedValue) @AT@ 7696 @LENGTH@ 33
---------------------INS SimpleName@@authorizedValue @TO@ SimpleName@@MethodName:equalsIgnoreCase:[authorizedValue] @AT@ 7713 @LENGTH@ 15
---------------INS Block@@ThenBody:{  return true;} @TO@ IfStatement@@if ("false".equalsIgnoreCase(authorizedValue)) {  return true;} @AT@ 7731 @LENGTH@ 34
------------------INS ReturnStatement@@BooleanLiteral:true @TO@ Block@@ThenBody:{  return true;} @AT@ 7743 @LENGTH@ 12
---------------------INS BooleanLiteral@@true @TO@ ReturnStatement@@BooleanLiteral:true @AT@ 7750 @LENGTH@ 4


UPD VariableDeclarationStatement@@final Object[] els=new Object[]{"1","3","5","7","2","4","6"}; @TO@ final Object[] els={"1","3","5","7","2","4","6"}; @AT@ 2987 @LENGTH@ 70
---UPD VariableDeclarationFragment@@els=new Object[]{"1","3","5","7","2","4","6"} @TO@ els={"1","3","5","7","2","4","6"} @AT@ 3002 @LENGTH@ 54
------DEL ArrayCreation@@new Object[]{"1","3","5","7","2","4","6"} @AT@ 3008 @LENGTH@ 48
---------DEL ArrayType@@Object[] @AT@ 3012 @LENGTH@ 8
------------DEL SimpleType@@Object @AT@ 3012 @LENGTH@ 6
---------DEL ArrayInitializer@@{"1","3","5","7","2","4","6"} @AT@ 3021 @LENGTH@ 35
------INS ArrayInitializer@@{"1","3","5","7","2","4","6"} @TO@ VariableDeclarationFragment@@els=new Object[]{"1","3","5","7","2","4","6"} @AT@ 3008 @LENGTH@ 35
---------MOV StringLiteral@@"1" @TO@ ArrayInitializer@@{"1","3","5","7","2","4","6"} @AT@ 3022 @LENGTH@ 3
---------MOV StringLiteral@@"3" @TO@ ArrayInitializer@@{"1","3","5","7","2","4","6"} @AT@ 3027 @LENGTH@ 3
---------MOV StringLiteral@@"5" @TO@ ArrayInitializer@@{"1","3","5","7","2","4","6"} @AT@ 3032 @LENGTH@ 3
---------MOV StringLiteral@@"7" @TO@ ArrayInitializer@@{"1","3","5","7","2","4","6"} @AT@ 3037 @LENGTH@ 3
---------MOV StringLiteral@@"2" @TO@ ArrayInitializer@@{"1","3","5","7","2","4","6"} @AT@ 3042 @LENGTH@ 3
---------MOV StringLiteral@@"4" @TO@ ArrayInitializer@@{"1","3","5","7","2","4","6"} @AT@ 3047 @LENGTH@ 3
---------MOV StringLiteral@@"6" @TO@ ArrayInitializer@@{"1","3","5","7","2","4","6"} @AT@ 3052 @LENGTH@ 3


UPD ExpressionStatement@@MethodInvocation:new CompressorStreamFactory().createCompressorInputStream("TestInput1",new ByteArrayInputStream(new byte[]{})) @TO@ MethodInvocation:assertThrows(InvocationConfirmationException.class,() -> new CompressorStreamFactory().createCompressorInputStream("TestInput1",new ByteArrayInputStream(ArrayUtils.EMPTY_BYTE_ARRAY))) @AT@ 1203 @LENGTH@ 113
---DEL MethodInvocation@@new CompressorStreamFactory().createCompressorInputStream("TestInput1",new ByteArrayInputStream(new byte[]{})) @AT@ 1203 @LENGTH@ 112
---INS MethodInvocation@@assertThrows(InvocationConfirmationException.class,() -> new CompressorStreamFactory().createCompressorInputStream("TestInput1",new ByteArrayInputStream(ArrayUtils.EMPTY_BYTE_ARRAY))) @TO@ ExpressionStatement@@MethodInvocation:new CompressorStreamFactory().createCompressorInputStream("TestInput1",new ByteArrayInputStream(new byte[]{})) @AT@ 1293 @LENGTH@ 197
------INS SimpleName@@MethodName:assertThrows:[InvocationConfirmationException.class, () -> new CompressorStreamFactory().createCompressorInputStream("TestInput1",new ByteArrayInputStream(ArrayUtils.EMPTY_BYTE_ARRAY))] @TO@ MethodInvocation@@assertThrows(InvocationConfirmationException.class,() -> new CompressorStreamFactory().createCompressorInputStream("TestInput1",new ByteArrayInputStream(ArrayUtils.EMPTY_BYTE_ARRAY))) @AT@ 1293 @LENGTH@ 197
---------INS TypeLiteral@@InvocationConfirmationException.class @TO@ SimpleName@@MethodName:assertThrows:[InvocationConfirmationException.class, () -> new CompressorStreamFactory().createCompressorInputStream("TestInput1",new ByteArrayInputStream(ArrayUtils.EMPTY_BYTE_ARRAY))] @AT@ 1306 @LENGTH@ 37
---------INS LambdaExpression@@() -> new CompressorStreamFactory().createCompressorInputStream("TestInput1",new ByteArrayInputStream(ArrayUtils.EMPTY_BYTE_ARRAY)) @TO@ SimpleName@@MethodName:assertThrows:[InvocationConfirmationException.class, () -> new CompressorStreamFactory().createCompressorInputStream("TestInput1",new ByteArrayInputStream(ArrayUtils.EMPTY_BYTE_ARRAY))] @AT@ 1357 @LENGTH@ 132
------------INS MethodInvocation@@new CompressorStreamFactory().createCompressorInputStream("TestInput1",new ByteArrayInputStream(ArrayUtils.EMPTY_BYTE_ARRAY)) @TO@ LambdaExpression@@() -> new CompressorStreamFactory().createCompressorInputStream("TestInput1",new ByteArrayInputStream(ArrayUtils.EMPTY_BYTE_ARRAY)) @AT@ 1363 @LENGTH@ 126
---------------MOV ClassInstanceCreation@@CompressorStreamFactory[] @TO@ MethodInvocation@@new CompressorStreamFactory().createCompressorInputStream("TestInput1",new ByteArrayInputStream(ArrayUtils.EMPTY_BYTE_ARRAY)) @AT@ 1203 @LENGTH@ 29
---------------MOV SimpleName@@MethodName:createCompressorInputStream:["TestInput1", new ByteArrayInputStream(new byte[]{})] @TO@ MethodInvocation@@new CompressorStreamFactory().createCompressorInputStream("TestInput1",new ByteArrayInputStream(ArrayUtils.EMPTY_BYTE_ARRAY)) @AT@ 1233 @LENGTH@ 82
------------------UPD ClassInstanceCreation@@ByteArrayInputStream[new byte[]{}] @TO@ ByteArrayInputStream[ArrayUtils.EMPTY_BYTE_ARRAY] @AT@ 1275 @LENGTH@ 39
---------------------DEL ArrayCreation@@new byte[]{} @AT@ 1300 @LENGTH@ 13
------------------------DEL ArrayType@@byte[] @AT@ 1304 @LENGTH@ 6
---------------------------DEL PrimitiveType@@byte @AT@ 1304 @LENGTH@ 4
------------------------DEL ArrayInitializer@@{} @AT@ 1311 @LENGTH@ 2
---------------------INS QualifiedName@@ArrayUtils.EMPTY_BYTE_ARRAY @TO@ ClassInstanceCreation@@ByteArrayInputStream[new byte[]{}] @AT@ 1460 @LENGTH@ 27
------------------------INS SimpleName@@ArrayUtils @TO@ QualifiedName@@ArrayUtils.EMPTY_BYTE_ARRAY @AT@ 1460 @LENGTH@ 10
------------------------INS SimpleName@@EMPTY_BYTE_ARRAY @TO@ QualifiedName@@ArrayUtils.EMPTY_BYTE_ARRAY @AT@ 1471 @LENGTH@ 16


INS IfStatement@@if (commonElementType == null) {  throw new IllegalArgumentException("Could not determine a common element of an heterogeneous collection.");} @TO@ MethodDeclaration@@public, List<R>, T, R, MethodName:saveAllAs, Iterable<T> instances, Class<R> resultType,  @AT@ 21966 @LENGTH@ 147
---INS InfixExpression@@commonElementType == null @TO@ IfStatement@@if (commonElementType == null) {  throw new IllegalArgumentException("Could not determine a common element of an heterogeneous collection.");} @AT@ 21970 @LENGTH@ 25
------INS SimpleName@@commonElementType @TO@ InfixExpression@@commonElementType == null @AT@ 21970 @LENGTH@ 17
------INS Operator@@== @TO@ InfixExpression@@commonElementType == null @AT@ 21987 @LENGTH@ 2
------INS NullLiteral@@null @TO@ InfixExpression@@commonElementType == null @AT@ 21991 @LENGTH@ 4
---INS Block@@ThenBody:{  throw new IllegalArgumentException("Could not determine a common element of an heterogeneous collection.");} @TO@ IfStatement@@if (commonElementType == null) {  throw new IllegalArgumentException("Could not determine a common element of an heterogeneous collection.");} @AT@ 21997 @LENGTH@ 116
------INS ThrowStatement@@ClassInstanceCreation:new IllegalArgumentException("Could not determine a common element of an heterogeneous collection.") @TO@ Block@@ThenBody:{  throw new IllegalArgumentException("Could not determine a common element of an heterogeneous collection.");} @AT@ 22002 @LENGTH@ 107
---------INS ClassInstanceCreation@@IllegalArgumentException["Could not determine a common element of an heterogeneous collection."] @TO@ ThrowStatement@@ClassInstanceCreation:new IllegalArgumentException("Could not determine a common element of an heterogeneous collection.") @AT@ 22008 @LENGTH@ 100
------------INS New@@new @TO@ ClassInstanceCreation@@IllegalArgumentException["Could not determine a common element of an heterogeneous collection."] @AT@ 22008 @LENGTH@ 3
------------INS SimpleType@@IllegalArgumentException @TO@ ClassInstanceCreation@@IllegalArgumentException["Could not determine a common element of an heterogeneous collection."] @AT@ 22012 @LENGTH@ 24
------------INS StringLiteral@@"Could not determine a common element of an heterogeneous collection." @TO@ ClassInstanceCreation@@IllegalArgumentException["Could not determine a common element of an heterogeneous collection."] @AT@ 22037 @LENGTH@ 70


UPD MethodDeclaration@@protected, PathInputContext, MethodName:getThisContext, ComponentContext<?> context,  @TO@ public, PathInputContext, MethodName:getThisContext, ComponentContext<?> context,  @AT@ 2218 @LENGTH@ 355
---UPD Modifier@@protected @TO@ public @AT@ 2218 @LENGTH@ 9


UPD ExpressionStatement@@MethodInvocation:endpoint.setBinding(binding) @TO@ MethodInvocation:endpoint.setHttpBinding(binding) @AT@ 6711 @LENGTH@ 29
---UPD MethodInvocation@@endpoint.setBinding(binding) @TO@ endpoint.setHttpBinding(binding) @AT@ 6711 @LENGTH@ 28
------UPD SimpleName@@MethodName:setBinding:[binding] @TO@ MethodName:setHttpBinding:[binding] @AT@ 6720 @LENGTH@ 19


UPD ExpressionStatement@@MethodInvocation:ZipUtil.checkRequestedFeatures(ze) @TO@ MethodInvocation:assertThrows(UnsupportedZipFeatureException.class,() -> ZipUtil.checkRequestedFeatures(ze)) @AT@ 9012 @LENGTH@ 35
---INS MethodInvocation@@assertThrows(UnsupportedZipFeatureException.class,() -> ZipUtil.checkRequestedFeatures(ze)) @TO@ ExpressionStatement@@MethodInvocation:ZipUtil.checkRequestedFeatures(ze) @AT@ 9067 @LENGTH@ 92
------INS SimpleName@@MethodName:assertThrows:[UnsupportedZipFeatureException.class, () -> ZipUtil.checkRequestedFeatures(ze)] @TO@ MethodInvocation@@assertThrows(UnsupportedZipFeatureException.class,() -> ZipUtil.checkRequestedFeatures(ze)) @AT@ 9067 @LENGTH@ 92
---------INS TypeLiteral@@UnsupportedZipFeatureException.class @TO@ SimpleName@@MethodName:assertThrows:[UnsupportedZipFeatureException.class, () -> ZipUtil.checkRequestedFeatures(ze)] @AT@ 9080 @LENGTH@ 36
---------INS LambdaExpression@@() -> ZipUtil.checkRequestedFeatures(ze) @TO@ SimpleName@@MethodName:assertThrows:[UnsupportedZipFeatureException.class, () -> ZipUtil.checkRequestedFeatures(ze)] @AT@ 9118 @LENGTH@ 40
------------MOV MethodInvocation@@ZipUtil.checkRequestedFeatures(ze) @TO@ LambdaExpression@@() -> ZipUtil.checkRequestedFeatures(ze) @AT@ 9012 @LENGTH@ 34


UPD VariableDeclarationStatement@@final Source source=new SAXSource(reader,new InputSource(IOUtils.toInputStream(xml))); @TO@ final Source source=new SAXSource(reader,new InputSource(IOUtils.toInputStream(xml,Charset.defaultCharset()))); @AT@ 2105 @LENGTH@ 89
---UPD VariableDeclarationFragment@@source=new SAXSource(reader,new InputSource(IOUtils.toInputStream(xml))) @TO@ source=new SAXSource(reader,new InputSource(IOUtils.toInputStream(xml,Charset.defaultCharset()))) @AT@ 2118 @LENGTH@ 75
------UPD ClassInstanceCreation@@SAXSource[reader, new InputSource(IOUtils.toInputStream(xml))] @TO@ SAXSource[reader, new InputSource(IOUtils.toInputStream(xml,Charset.defaultCharset()))] @AT@ 2127 @LENGTH@ 66
---------UPD ClassInstanceCreation@@InputSource[IOUtils.toInputStream(xml)] @TO@ InputSource[IOUtils.toInputStream(xml,Charset.defaultCharset())] @AT@ 2149 @LENGTH@ 43
------------UPD MethodInvocation@@IOUtils.toInputStream(xml) @TO@ IOUtils.toInputStream(xml,Charset.defaultCharset()) @AT@ 2165 @LENGTH@ 26
---------------UPD SimpleName@@MethodName:toInputStream:[xml] @TO@ MethodName:toInputStream:[xml, Charset.defaultCharset()] @AT@ 2173 @LENGTH@ 18
------------------INS MethodInvocation@@Charset.defaultCharset() @TO@ SimpleName@@MethodName:toInputStream:[xml] @AT@ 2225 @LENGTH@ 24
---------------------INS SimpleName@@Name:Charset @TO@ MethodInvocation@@Charset.defaultCharset() @AT@ 2225 @LENGTH@ 7
---------------------INS SimpleName@@MethodName:defaultCharset:[] @TO@ MethodInvocation@@Charset.defaultCharset() @AT@ 2233 @LENGTH@ 16


INS ExpressionStatement@@MethodInvocation:copy.adapt(ExtendedExchange.class).setTransacted(exchange.isTransacted()) @TO@ MethodDeclaration@@protected, ProcessorExchangePair, MethodName:createProcessorExchangePair, int index, Endpoint endpoint, Producer producer, Exchange exchange, ExchangePattern pattern, boolean prototypeEndpoint,  @AT@ 12424 @LENGTH@ 74
---INS MethodInvocation@@copy.adapt(ExtendedExchange.class).setTransacted(exchange.isTransacted()) @TO@ ExpressionStatement@@MethodInvocation:copy.adapt(ExtendedExchange.class).setTransacted(exchange.isTransacted()) @AT@ 12424 @LENGTH@ 73
------INS MethodInvocation@@MethodName:adapt:[ExtendedExchange.class] @TO@ MethodInvocation@@copy.adapt(ExtendedExchange.class).setTransacted(exchange.isTransacted()) @AT@ 12424 @LENGTH@ 34
---------INS TypeLiteral@@ExtendedExchange.class @TO@ MethodInvocation@@MethodName:adapt:[ExtendedExchange.class] @AT@ 12435 @LENGTH@ 22
------INS SimpleName@@Name:copy @TO@ MethodInvocation@@copy.adapt(ExtendedExchange.class).setTransacted(exchange.isTransacted()) @AT@ 12424 @LENGTH@ 4
------INS SimpleName@@MethodName:setTransacted:[exchange.isTransacted()] @TO@ MethodInvocation@@copy.adapt(ExtendedExchange.class).setTransacted(exchange.isTransacted()) @AT@ 12459 @LENGTH@ 38
---------INS MethodInvocation@@exchange.isTransacted() @TO@ SimpleName@@MethodName:setTransacted:[exchange.isTransacted()] @AT@ 12473 @LENGTH@ 23
------------INS SimpleName@@Name:exchange @TO@ MethodInvocation@@exchange.isTransacted() @AT@ 12473 @LENGTH@ 8
------------INS SimpleName@@MethodName:isTransacted:[] @TO@ MethodInvocation@@exchange.isTransacted() @AT@ 12482 @LENGTH@ 14


UPD IfStatement@@if (getEndpoint().isTransform()) {  if (exchange.hasOut()) {    exchange.getOut().setBody(result);  } else {    exchange.getIn().setBody(result);  }} @TO@ if (getEndpoint().isTransform()) {  exchange.getMessage().setBody(result);} @AT@ 5125 @LENGTH@ 217
---DEL Block@@ThenBody:{  if (exchange.hasOut()) {    exchange.getOut().setBody(result);  } else {    exchange.getIn().setBody(result);  }} @AT@ 5158 @LENGTH@ 184
------DEL IfStatement@@if (exchange.hasOut()) {  exchange.getOut().setBody(result);} else {  exchange.getIn().setBody(result);} @AT@ 5172 @LENGTH@ 160
---------DEL MethodInvocation@@exchange.hasOut() @AT@ 5176 @LENGTH@ 17
------------DEL SimpleName@@Name:exchange @AT@ 5176 @LENGTH@ 8
------------DEL SimpleName@@MethodName:hasOut:[] @AT@ 5185 @LENGTH@ 8
---------DEL Block@@ElseBody:{  exchange.getIn().setBody(result);} @AT@ 5267 @LENGTH@ 65
------------DEL ExpressionStatement@@MethodInvocation:exchange.getIn().setBody(result) @AT@ 5285 @LENGTH@ 33
---------------DEL MethodInvocation@@exchange.getIn().setBody(result) @AT@ 5285 @LENGTH@ 32
------------------DEL MethodInvocation@@MethodName:getIn:[] @AT@ 5285 @LENGTH@ 16
------------------DEL SimpleName@@Name:exchange @AT@ 5285 @LENGTH@ 8
------------------DEL SimpleName@@MethodName:setBody:[result] @AT@ 5302 @LENGTH@ 15
---------------------DEL SimpleName@@result @AT@ 5310 @LENGTH@ 6
---MOV Block@@ThenBody:{  exchange.getOut().setBody(result);} @TO@ IfStatement@@if (getEndpoint().isTransform()) {  if (exchange.hasOut()) {    exchange.getOut().setBody(result);  } else {    exchange.getIn().setBody(result);  }} @AT@ 5195 @LENGTH@ 66
------UPD ExpressionStatement@@MethodInvocation:exchange.getOut().setBody(result) @TO@ MethodInvocation:exchange.getMessage().setBody(result) @AT@ 5213 @LENGTH@ 34
---------UPD MethodInvocation@@exchange.getOut().setBody(result) @TO@ exchange.getMessage().setBody(result) @AT@ 5213 @LENGTH@ 33
------------UPD MethodInvocation@@MethodName:getOut:[] @TO@ MethodName:getMessage:[] @AT@ 5213 @LENGTH@ 17


UPD ExpressionStatement@@MethodInvocation:component.createEndpoint("aws2-sqs://MyQueue?accessKey=xxx").start() @TO@ MethodInvocation:component.createEndpoint("aws2-sqs://MyQueue?accessKey=xxx") @AT@ 13411 @LENGTH@ 69
---UPD MethodInvocation@@component.createEndpoint("aws2-sqs://MyQueue?accessKey=xxx").start() @TO@ component.createEndpoint("aws2-sqs://MyQueue?accessKey=xxx") @AT@ 13411 @LENGTH@ 68
------DEL MethodInvocation@@MethodName:createEndpoint:["aws2-sqs://MyQueue?accessKey=xxx"] @AT@ 13411 @LENGTH@ 60
---------DEL StringLiteral@@"aws2-sqs://MyQueue?accessKey=xxx" @AT@ 13436 @LENGTH@ 34
------INS SimpleName@@MethodName:createEndpoint:["aws2-sqs://MyQueue?accessKey=xxx"] @TO@ MethodInvocation@@component.createEndpoint("aws2-sqs://MyQueue?accessKey=xxx").start() @AT@ 13413 @LENGTH@ 50
---------INS StringLiteral@@"aws2-sqs://MyQueue?accessKey=xxx" @TO@ SimpleName@@MethodName:createEndpoint:["aws2-sqs://MyQueue?accessKey=xxx"] @AT@ 13428 @LENGTH@ 34
------DEL SimpleName@@MethodName:start:[] @AT@ 13472 @LENGTH@ 7


UPD Block@@ThenBody:{  exchange.getOut().setHeaders(exchange.getIn().getHeaders());  exchange.getOut().getHeaders().putAll(headers);} @TO@ ThenBody:{  exchange.getMessage().setHeaders(exchange.getIn().getHeaders());  exchange.getMessage().getHeaders().putAll(headers);} @AT@ 3578 @LENGTH@ 144
---UPD ExpressionStatement@@MethodInvocation:exchange.getOut().setHeaders(exchange.getIn().getHeaders()) @TO@ MethodInvocation:exchange.getMessage().setHeaders(exchange.getIn().getHeaders()) @AT@ 3592 @LENGTH@ 60
------UPD MethodInvocation@@exchange.getOut().setHeaders(exchange.getIn().getHeaders()) @TO@ exchange.getMessage().setHeaders(exchange.getIn().getHeaders()) @AT@ 3592 @LENGTH@ 59
---------UPD MethodInvocation@@MethodName:getOut:[] @TO@ MethodName:getMessage:[] @AT@ 3592 @LENGTH@ 17
---UPD ExpressionStatement@@MethodInvocation:exchange.getOut().getHeaders().putAll(headers) @TO@ MethodInvocation:exchange.getMessage().getHeaders().putAll(headers) @AT@ 3665 @LENGTH@ 47
------UPD MethodInvocation@@exchange.getOut().getHeaders().putAll(headers) @TO@ exchange.getMessage().getHeaders().putAll(headers) @AT@ 3665 @LENGTH@ 46
---------UPD MethodInvocation@@MethodName:getOut:[] @TO@ MethodName:getMessage:[] @AT@ 3665 @LENGTH@ 17


INS MethodDeclaration@@public, void, MethodName:testSanitizeUriWithRawPasswordAndSimpleExpression,  @TO@ TypeDeclaration@@[public]URISupportTest,  @AT@ 13432 @LENGTH@ 680
---INS Modifier@@public @TO@ MethodDeclaration@@public, void, MethodName:testSanitizeUriWithRawPasswordAndSimpleExpression,  @AT@ 13432 @LENGTH@ 6
---INS PrimitiveType@@void @TO@ MethodDeclaration@@public, void, MethodName:testSanitizeUriWithRawPasswordAndSimpleExpression,  @AT@ 13439 @LENGTH@ 4
---INS SimpleName@@MethodName:testSanitizeUriWithRawPasswordAndSimpleExpression @TO@ MethodDeclaration@@public, void, MethodName:testSanitizeUriWithRawPasswordAndSimpleExpression,  @AT@ 13444 @LENGTH@ 49
---INS VariableDeclarationStatement@@String uriPlain="http://foo?username=me&password=RAW(me#@123)&foo=bar&port=21&tempFileName=${file:name.noext}.tmp&anotherOption=true"; @TO@ MethodDeclaration@@public, void, MethodName:testSanitizeUriWithRawPasswordAndSimpleExpression,  @AT@ 13506 @LENGTH@ 152
------INS SimpleType@@String @TO@ VariableDeclarationStatement@@String uriPlain="http://foo?username=me&password=RAW(me#@123)&foo=bar&port=21&tempFileName=${file:name.noext}.tmp&anotherOption=true"; @AT@ 13506 @LENGTH@ 6
------INS VariableDeclarationFragment@@uriPlain="http://foo?username=me&password=RAW(me#@123)&foo=bar&port=21&tempFileName=${file:name.noext}.tmp&anotherOption=true" @TO@ VariableDeclarationStatement@@String uriPlain="http://foo?username=me&password=RAW(me#@123)&foo=bar&port=21&tempFileName=${file:name.noext}.tmp&anotherOption=true"; @AT@ 13513 @LENGTH@ 144
---------INS SimpleName@@uriPlain @TO@ VariableDeclarationFragment@@uriPlain="http://foo?username=me&password=RAW(me#@123)&foo=bar&port=21&tempFileName=${file:name.noext}.tmp&anotherOption=true" @AT@ 13513 @LENGTH@ 8
---------INS StringLiteral@@"http://foo?username=me&password=RAW(me#@123)&foo=bar&port=21&tempFileName=${file:name.noext}.tmp&anotherOption=true" @TO@ VariableDeclarationFragment@@uriPlain="http://foo?username=me&password=RAW(me#@123)&foo=bar&port=21&tempFileName=${file:name.noext}.tmp&anotherOption=true" @AT@ 13540 @LENGTH@ 117
---INS VariableDeclarationStatement@@String uriCurly="http://foo?username=me&password=RAW{me#@123}&foo=bar&port=21&tempFileName=${file:name.noext}.tmp&anotherOption=true"; @TO@ MethodDeclaration@@public, void, MethodName:testSanitizeUriWithRawPasswordAndSimpleExpression,  @AT@ 13667 @LENGTH@ 152
------INS SimpleType@@String @TO@ VariableDeclarationStatement@@String uriCurly="http://foo?username=me&password=RAW{me#@123}&foo=bar&port=21&tempFileName=${file:name.noext}.tmp&anotherOption=true"; @AT@ 13667 @LENGTH@ 6
------INS VariableDeclarationFragment@@uriCurly="http://foo?username=me&password=RAW{me#@123}&foo=bar&port=21&tempFileName=${file:name.noext}.tmp&anotherOption=true" @TO@ VariableDeclarationStatement@@String uriCurly="http://foo?username=me&password=RAW{me#@123}&foo=bar&port=21&tempFileName=${file:name.noext}.tmp&anotherOption=true"; @AT@ 13674 @LENGTH@ 144
---------INS SimpleName@@uriCurly @TO@ VariableDeclarationFragment@@uriCurly="http://foo?username=me&password=RAW{me#@123}&foo=bar&port=21&tempFileName=${file:name.noext}.tmp&anotherOption=true" @AT@ 13674 @LENGTH@ 8
---------INS StringLiteral@@"http://foo?username=me&password=RAW{me#@123}&foo=bar&port=21&tempFileName=${file:name.noext}.tmp&anotherOption=true" @TO@ VariableDeclarationFragment@@uriCurly="http://foo?username=me&password=RAW{me#@123}&foo=bar&port=21&tempFileName=${file:name.noext}.tmp&anotherOption=true" @AT@ 13701 @LENGTH@ 117
---INS VariableDeclarationStatement@@String expected="http://foo?username=me&password=xxxxxx&foo=bar&port=21&tempFileName=${file:name.noext}.tmp&anotherOption=true"; @TO@ MethodDeclaration@@public, void, MethodName:testSanitizeUriWithRawPasswordAndSimpleExpression,  @AT@ 13828 @LENGTH@ 146
------INS SimpleType@@String @TO@ VariableDeclarationStatement@@String expected="http://foo?username=me&password=xxxxxx&foo=bar&port=21&tempFileName=${file:name.noext}.tmp&anotherOption=true"; @AT@ 13828 @LENGTH@ 6
------INS VariableDeclarationFragment@@expected="http://foo?username=me&password=xxxxxx&foo=bar&port=21&tempFileName=${file:name.noext}.tmp&anotherOption=true" @TO@ VariableDeclarationStatement@@String expected="http://foo?username=me&password=xxxxxx&foo=bar&port=21&tempFileName=${file:name.noext}.tmp&anotherOption=true"; @AT@ 13835 @LENGTH@ 138
---------INS SimpleName@@expected @TO@ VariableDeclarationFragment@@expected="http://foo?username=me&password=xxxxxx&foo=bar&port=21&tempFileName=${file:name.noext}.tmp&anotherOption=true" @AT@ 13835 @LENGTH@ 8
---------INS StringLiteral@@"http://foo?username=me&password=xxxxxx&foo=bar&port=21&tempFileName=${file:name.noext}.tmp&anotherOption=true" @TO@ VariableDeclarationFragment@@expected="http://foo?username=me&password=xxxxxx&foo=bar&port=21&tempFileName=${file:name.noext}.tmp&anotherOption=true" @AT@ 13862 @LENGTH@ 111
---INS ExpressionStatement@@MethodInvocation:assertEquals(expected,URISupport.sanitizeUri(uriPlain)) @TO@ MethodDeclaration@@public, void, MethodName:testSanitizeUriWithRawPasswordAndSimpleExpression,  @AT@ 13983 @LENGTH@ 57
------INS MethodInvocation@@assertEquals(expected,URISupport.sanitizeUri(uriPlain)) @TO@ ExpressionStatement@@MethodInvocation:assertEquals(expected,URISupport.sanitizeUri(uriPlain)) @AT@ 13983 @LENGTH@ 56
---------INS SimpleName@@MethodName:assertEquals:[expected, URISupport.sanitizeUri(uriPlain)] @TO@ MethodInvocation@@assertEquals(expected,URISupport.sanitizeUri(uriPlain)) @AT@ 13983 @LENGTH@ 56
------------INS SimpleName@@expected @TO@ SimpleName@@MethodName:assertEquals:[expected, URISupport.sanitizeUri(uriPlain)] @AT@ 13996 @LENGTH@ 8
------------INS MethodInvocation@@URISupport.sanitizeUri(uriPlain) @TO@ SimpleName@@MethodName:assertEquals:[expected, URISupport.sanitizeUri(uriPlain)] @AT@ 14006 @LENGTH@ 32
---------------INS SimpleName@@Name:URISupport @TO@ MethodInvocation@@URISupport.sanitizeUri(uriPlain) @AT@ 14006 @LENGTH@ 10
---------------INS SimpleName@@MethodName:sanitizeUri:[uriPlain] @TO@ MethodInvocation@@URISupport.sanitizeUri(uriPlain) @AT@ 14017 @LENGTH@ 21
------------------INS SimpleName@@uriPlain @TO@ SimpleName@@MethodName:sanitizeUri:[uriPlain] @AT@ 14029 @LENGTH@ 8
---INS ExpressionStatement@@MethodInvocation:assertEquals(expected,URISupport.sanitizeUri(uriCurly)) @TO@ MethodDeclaration@@public, void, MethodName:testSanitizeUriWithRawPasswordAndSimpleExpression,  @AT@ 14049 @LENGTH@ 57
------INS MethodInvocation@@assertEquals(expected,URISupport.sanitizeUri(uriCurly)) @TO@ ExpressionStatement@@MethodInvocation:assertEquals(expected,URISupport.sanitizeUri(uriCurly)) @AT@ 14049 @LENGTH@ 56
---------INS SimpleName@@MethodName:assertEquals:[expected, URISupport.sanitizeUri(uriCurly)] @TO@ MethodInvocation@@assertEquals(expected,URISupport.sanitizeUri(uriCurly)) @AT@ 14049 @LENGTH@ 56
------------INS SimpleName@@expected @TO@ SimpleName@@MethodName:assertEquals:[expected, URISupport.sanitizeUri(uriCurly)] @AT@ 14062 @LENGTH@ 8
------------INS MethodInvocation@@URISupport.sanitizeUri(uriCurly) @TO@ SimpleName@@MethodName:assertEquals:[expected, URISupport.sanitizeUri(uriCurly)] @AT@ 14072 @LENGTH@ 32
---------------INS SimpleName@@Name:URISupport @TO@ MethodInvocation@@URISupport.sanitizeUri(uriCurly) @AT@ 14072 @LENGTH@ 10
---------------INS SimpleName@@MethodName:sanitizeUri:[uriCurly] @TO@ MethodInvocation@@URISupport.sanitizeUri(uriCurly) @AT@ 14083 @LENGTH@ 21
------------------INS SimpleName@@uriCurly @TO@ SimpleName@@MethodName:sanitizeUri:[uriCurly] @AT@ 14095 @LENGTH@ 8


UPD ExpressionStatement@@MethodInvocation:exchange.getOut().setBody(obj) @TO@ MethodInvocation:exchange.getMessage().setBody(obj) @AT@ 4352 @LENGTH@ 31
---UPD MethodInvocation@@exchange.getOut().setBody(obj) @TO@ exchange.getMessage().setBody(obj) @AT@ 4352 @LENGTH@ 30
------UPD MethodInvocation@@MethodName:getOut:[] @TO@ MethodName:getMessage:[] @AT@ 4352 @LENGTH@ 17


UPD ExpressionStatement@@MethodInvocation:getCamelContext().getExecutorServiceManager().shutdownGraceful(executorService) @TO@ MethodInvocation:getCamelContext().getExecutorServiceManager().shutdown(executorService) @AT@ 8370 @LENGTH@ 80
---UPD MethodInvocation@@getCamelContext().getExecutorServiceManager().shutdownGraceful(executorService) @TO@ getCamelContext().getExecutorServiceManager().shutdown(executorService) @AT@ 8370 @LENGTH@ 79
------UPD SimpleName@@MethodName:shutdownGraceful:[executorService] @TO@ MethodName:shutdown:[executorService] @AT@ 8416 @LENGTH@ 33


UPD VariableDeclarationStatement@@Message message=exchange.getOut(); @TO@ Message message=exchange.getMessage(); @AT@ 3444 @LENGTH@ 36
---UPD VariableDeclarationFragment@@message=exchange.getOut() @TO@ message=exchange.getMessage() @AT@ 3452 @LENGTH@ 27
------UPD MethodInvocation@@exchange.getOut() @TO@ exchange.getMessage() @AT@ 3462 @LENGTH@ 17
---------UPD SimpleName@@MethodName:getOut:[] @TO@ MethodName:getMessage:[] @AT@ 3471 @LENGTH@ 8


INS MethodDeclaration@@public, void, MethodName:testHelpCommand,  @TO@ TypeDeclaration@@[public]StandardCommandsAutoConfigurationTests,  @AT@ 2166 @LENGTH@ 621
---INS Modifier@@public @TO@ MethodDeclaration@@public, void, MethodName:testHelpCommand,  @AT@ 2166 @LENGTH@ 6
---INS PrimitiveType@@void @TO@ MethodDeclaration@@public, void, MethodName:testHelpCommand,  @AT@ 2173 @LENGTH@ 4
---INS SimpleName@@MethodName:testHelpCommand @TO@ MethodDeclaration@@public, void, MethodName:testHelpCommand,  @AT@ 2178 @LENGTH@ 15
---INS ExpressionStatement@@MethodInvocation:this.contextRunner.with(disableCommands("clear","quit","stacktrace","script","history","completion")).withPropertyValues("spring.shell.command.help.grouping-mode=flat").run(context -> {
  assertThat(context).hasSingleBean(Help.class);
  Help help=context.getBean(Help.class);
  Field showGroupsField=ReflectionUtils.findField(Help.class,"showGroups");
  ReflectionUtils.makeAccessible(showGroupsField);
  ReflectionUtils.getField(showGroupsField,help);
  assertThat(ReflectionUtils.getField(showGroupsField,help)).isEqualTo(false);
}
) @TO@ MethodDeclaration@@public, void, MethodName:testHelpCommand,  @AT@ 2200 @LENGTH@ 584
------INS MethodInvocation@@this.contextRunner.with(disableCommands("clear","quit","stacktrace","script","history","completion")).withPropertyValues("spring.shell.command.help.grouping-mode=flat").run(context -> {
  assertThat(context).hasSingleBean(Help.class);
  Help help=context.getBean(Help.class);
  Field showGroupsField=ReflectionUtils.findField(Help.class,"showGroups");
  ReflectionUtils.makeAccessible(showGroupsField);
  ReflectionUtils.getField(showGroupsField,help);
  assertThat(ReflectionUtils.getField(showGroupsField,help)).isEqualTo(false);
}
) @TO@ ExpressionStatement@@MethodInvocation:this.contextRunner.with(disableCommands("clear","quit","stacktrace","script","history","completion")).withPropertyValues("spring.shell.command.help.grouping-mode=flat").run(context -> {
  assertThat(context).hasSingleBean(Help.class);
  Help help=context.getBean(Help.class);
  Field showGroupsField=ReflectionUtils.findField(Help.class,"showGroups");
  ReflectionUtils.makeAccessible(showGroupsField);
  ReflectionUtils.getField(showGroupsField,help);
  assertThat(ReflectionUtils.getField(showGroupsField,help)).isEqualTo(false);
}
) @AT@ 2200 @LENGTH@ 583
---------INS MethodInvocation@@MethodName:withPropertyValues:["spring.shell.command.help.grouping-mode=flat"] @TO@ MethodInvocation@@this.contextRunner.with(disableCommands("clear","quit","stacktrace","script","history","completion")).withPropertyValues("spring.shell.command.help.grouping-mode=flat").run(context -> {
  assertThat(context).hasSingleBean(Help.class);
  Help help=context.getBean(Help.class);
  Field showGroupsField=ReflectionUtils.findField(Help.class,"showGroups");
  ReflectionUtils.makeAccessible(showGroupsField);
  ReflectionUtils.getField(showGroupsField,help);
  assertThat(ReflectionUtils.getField(showGroupsField,help)).isEqualTo(false);
}
) @AT@ 2200 @LENGTH@ 183
------------INS StringLiteral@@"spring.shell.command.help.grouping-mode=flat" @TO@ MethodInvocation@@MethodName:withPropertyValues:["spring.shell.command.help.grouping-mode=flat"] @AT@ 2336 @LENGTH@ 46
---------INS MethodInvocation@@MethodName:with:[disableCommands("clear","quit","stacktrace","script","history","completion")] @TO@ MethodInvocation@@this.contextRunner.with(disableCommands("clear","quit","stacktrace","script","history","completion")).withPropertyValues("spring.shell.command.help.grouping-mode=flat").run(context -> {
  assertThat(context).hasSingleBean(Help.class);
  Help help=context.getBean(Help.class);
  Field showGroupsField=ReflectionUtils.findField(Help.class,"showGroups");
  ReflectionUtils.makeAccessible(showGroupsField);
  ReflectionUtils.getField(showGroupsField,help);
  assertThat(ReflectionUtils.getField(showGroupsField,help)).isEqualTo(false);
}
) @AT@ 2200 @LENGTH@ 111
------------INS MethodInvocation@@disableCommands("clear","quit","stacktrace","script","history","completion") @TO@ MethodInvocation@@MethodName:with:[disableCommands("clear","quit","stacktrace","script","history","completion")] @AT@ 2229 @LENGTH@ 81
---------------INS SimpleName@@MethodName:disableCommands:["clear", "quit", "stacktrace", "script", "history", "completion"] @TO@ MethodInvocation@@disableCommands("clear","quit","stacktrace","script","history","completion") @AT@ 2229 @LENGTH@ 81
------------------INS StringLiteral@@"clear" @TO@ SimpleName@@MethodName:disableCommands:["clear", "quit", "stacktrace", "script", "history", "completion"] @AT@ 2245 @LENGTH@ 7
------------------INS StringLiteral@@"quit" @TO@ SimpleName@@MethodName:disableCommands:["clear", "quit", "stacktrace", "script", "history", "completion"] @AT@ 2254 @LENGTH@ 6
------------------INS StringLiteral@@"stacktrace" @TO@ SimpleName@@MethodName:disableCommands:["clear", "quit", "stacktrace", "script", "history", "completion"] @AT@ 2262 @LENGTH@ 12
------------------INS StringLiteral@@"script" @TO@ SimpleName@@MethodName:disableCommands:["clear", "quit", "stacktrace", "script", "history", "completion"] @AT@ 2276 @LENGTH@ 8
------------------INS StringLiteral@@"history" @TO@ SimpleName@@MethodName:disableCommands:["clear", "quit", "stacktrace", "script", "history", "completion"] @AT@ 2286 @LENGTH@ 9
------------------INS StringLiteral@@"completion" @TO@ SimpleName@@MethodName:disableCommands:["clear", "quit", "stacktrace", "script", "history", "completion"] @AT@ 2297 @LENGTH@ 12
---------INS FieldAccess@@this.contextRunner @TO@ MethodInvocation@@this.contextRunner.with(disableCommands("clear","quit","stacktrace","script","history","completion")).withPropertyValues("spring.shell.command.help.grouping-mode=flat").run(context -> {
  assertThat(context).hasSingleBean(Help.class);
  Help help=context.getBean(Help.class);
  Field showGroupsField=ReflectionUtils.findField(Help.class,"showGroups");
  ReflectionUtils.makeAccessible(showGroupsField);
  ReflectionUtils.getField(showGroupsField,help);
  assertThat(ReflectionUtils.getField(showGroupsField,help)).isEqualTo(false);
}
) @AT@ 2200 @LENGTH@ 18
------------INS ThisExpression@@this @TO@ FieldAccess@@this.contextRunner @AT@ 2200 @LENGTH@ 4
------------INS SimpleName@@contextRunner @TO@ FieldAccess@@this.contextRunner @AT@ 2205 @LENGTH@ 13
---------INS SimpleName@@MethodName:run:[context -> {
  assertThat(context).hasSingleBean(Help.class);
  Help help=context.getBean(Help.class);
  Field showGroupsField=ReflectionUtils.findField(Help.class,"showGroups");
  ReflectionUtils.makeAccessible(showGroupsField);
  ReflectionUtils.getField(showGroupsField,help);
  assertThat(ReflectionUtils.getField(showGroupsField,help)).isEqualTo(false);
}
] @TO@ MethodInvocation@@this.contextRunner.with(disableCommands("clear","quit","stacktrace","script","history","completion")).withPropertyValues("spring.shell.command.help.grouping-mode=flat").run(context -> {
  assertThat(context).hasSingleBean(Help.class);
  Help help=context.getBean(Help.class);
  Field showGroupsField=ReflectionUtils.findField(Help.class,"showGroups");
  ReflectionUtils.makeAccessible(showGroupsField);
  ReflectionUtils.getField(showGroupsField,help);
  assertThat(ReflectionUtils.getField(showGroupsField,help)).isEqualTo(false);
}
) @AT@ 2389 @LENGTH@ 394
------------INS LambdaExpression@@context -> {
  assertThat(context).hasSingleBean(Help.class);
  Help help=context.getBean(Help.class);
  Field showGroupsField=ReflectionUtils.findField(Help.class,"showGroups");
  ReflectionUtils.makeAccessible(showGroupsField);
  ReflectionUtils.getField(showGroupsField,help);
  assertThat(ReflectionUtils.getField(showGroupsField,help)).isEqualTo(false);
}
 @TO@ SimpleName@@MethodName:run:[context -> {
  assertThat(context).hasSingleBean(Help.class);
  Help help=context.getBean(Help.class);
  Field showGroupsField=ReflectionUtils.findField(Help.class,"showGroups");
  ReflectionUtils.makeAccessible(showGroupsField);
  ReflectionUtils.getField(showGroupsField,help);
  assertThat(ReflectionUtils.getField(showGroupsField,help)).isEqualTo(false);
}
] @AT@ 2393 @LENGTH@ 389
---------------INS VariableDeclarationFragment@@context @TO@ LambdaExpression@@context -> {
  assertThat(context).hasSingleBean(Help.class);
  Help help=context.getBean(Help.class);
  Field showGroupsField=ReflectionUtils.findField(Help.class,"showGroups");
  ReflectionUtils.makeAccessible(showGroupsField);
  ReflectionUtils.getField(showGroupsField,help);
  assertThat(ReflectionUtils.getField(showGroupsField,help)).isEqualTo(false);
}
 @AT@ 2393 @LENGTH@ 7
------------------INS SimpleName@@context @TO@ VariableDeclarationFragment@@context @AT@ 2393 @LENGTH@ 7
---------------INS ExpressionStatement@@MethodInvocation:assertThat(context).hasSingleBean(Help.class) @TO@ LambdaExpression@@context -> {
  assertThat(context).hasSingleBean(Help.class);
  Help help=context.getBean(Help.class);
  Field showGroupsField=ReflectionUtils.findField(Help.class,"showGroups");
  ReflectionUtils.makeAccessible(showGroupsField);
  ReflectionUtils.getField(showGroupsField,help);
  assertThat(ReflectionUtils.getField(showGroupsField,help)).isEqualTo(false);
}
 @AT@ 2411 @LENGTH@ 46
------------------INS MethodInvocation@@assertThat(context).hasSingleBean(Help.class) @TO@ ExpressionStatement@@MethodInvocation:assertThat(context).hasSingleBean(Help.class) @AT@ 2411 @LENGTH@ 45
---------------------INS MethodInvocation@@MethodName:assertThat:[context] @TO@ MethodInvocation@@assertThat(context).hasSingleBean(Help.class) @AT@ 2411 @LENGTH@ 19
------------------------INS SimpleName@@context @TO@ MethodInvocation@@MethodName:assertThat:[context] @AT@ 2422 @LENGTH@ 7
---------------------INS SimpleName@@MethodName:hasSingleBean:[Help.class] @TO@ MethodInvocation@@assertThat(context).hasSingleBean(Help.class) @AT@ 2431 @LENGTH@ 25
------------------------INS TypeLiteral@@Help.class @TO@ SimpleName@@MethodName:hasSingleBean:[Help.class] @AT@ 2445 @LENGTH@ 10
---------------INS VariableDeclarationStatement@@Help help=context.getBean(Help.class); @TO@ LambdaExpression@@context -> {
  assertThat(context).hasSingleBean(Help.class);
  Help help=context.getBean(Help.class);
  Field showGroupsField=ReflectionUtils.findField(Help.class,"showGroups");
  ReflectionUtils.makeAccessible(showGroupsField);
  ReflectionUtils.getField(showGroupsField,help);
  assertThat(ReflectionUtils.getField(showGroupsField,help)).isEqualTo(false);
}
 @AT@ 2463 @LENGTH@ 40
------------------INS SimpleType@@Help @TO@ VariableDeclarationStatement@@Help help=context.getBean(Help.class); @AT@ 2463 @LENGTH@ 4
------------------INS VariableDeclarationFragment@@help=context.getBean(Help.class) @TO@ VariableDeclarationStatement@@Help help=context.getBean(Help.class); @AT@ 2468 @LENGTH@ 34
---------------------INS SimpleName@@help @TO@ VariableDeclarationFragment@@help=context.getBean(Help.class) @AT@ 2468 @LENGTH@ 4
---------------------INS MethodInvocation@@context.getBean(Help.class) @TO@ VariableDeclarationFragment@@help=context.getBean(Help.class) @AT@ 2475 @LENGTH@ 27
------------------------INS SimpleName@@Name:context @TO@ MethodInvocation@@context.getBean(Help.class) @AT@ 2475 @LENGTH@ 7
------------------------INS SimpleName@@MethodName:getBean:[Help.class] @TO@ MethodInvocation@@context.getBean(Help.class) @AT@ 2483 @LENGTH@ 19
---------------------------INS TypeLiteral@@Help.class @TO@ SimpleName@@MethodName:getBean:[Help.class] @AT@ 2491 @LENGTH@ 10
---------------INS VariableDeclarationStatement@@Field showGroupsField=ReflectionUtils.findField(Help.class,"showGroups"); @TO@ LambdaExpression@@context -> {
  assertThat(context).hasSingleBean(Help.class);
  Help help=context.getBean(Help.class);
  Field showGroupsField=ReflectionUtils.findField(Help.class,"showGroups");
  ReflectionUtils.makeAccessible(showGroupsField);
  ReflectionUtils.getField(showGroupsField,help);
  assertThat(ReflectionUtils.getField(showGroupsField,help)).isEqualTo(false);
}
 @AT@ 2509 @LENGTH@ 76
------------------INS SimpleType@@Field @TO@ VariableDeclarationStatement@@Field showGroupsField=ReflectionUtils.findField(Help.class,"showGroups"); @AT@ 2509 @LENGTH@ 5
------------------INS VariableDeclarationFragment@@showGroupsField=ReflectionUtils.findField(Help.class,"showGroups") @TO@ VariableDeclarationStatement@@Field showGroupsField=ReflectionUtils.findField(Help.class,"showGroups"); @AT@ 2515 @LENGTH@ 69
---------------------INS SimpleName@@showGroupsField @TO@ VariableDeclarationFragment@@showGroupsField=ReflectionUtils.findField(Help.class,"showGroups") @AT@ 2515 @LENGTH@ 15
---------------------INS MethodInvocation@@ReflectionUtils.findField(Help.class,"showGroups") @TO@ VariableDeclarationFragment@@showGroupsField=ReflectionUtils.findField(Help.class,"showGroups") @AT@ 2533 @LENGTH@ 51
------------------------INS SimpleName@@Name:ReflectionUtils @TO@ MethodInvocation@@ReflectionUtils.findField(Help.class,"showGroups") @AT@ 2533 @LENGTH@ 15
------------------------INS SimpleName@@MethodName:findField:[Help.class, "showGroups"] @TO@ MethodInvocation@@ReflectionUtils.findField(Help.class,"showGroups") @AT@ 2549 @LENGTH@ 35
---------------------------INS TypeLiteral@@Help.class @TO@ SimpleName@@MethodName:findField:[Help.class, "showGroups"] @AT@ 2559 @LENGTH@ 10
---------------------------INS StringLiteral@@"showGroups" @TO@ SimpleName@@MethodName:findField:[Help.class, "showGroups"] @AT@ 2571 @LENGTH@ 12
---------------INS ExpressionStatement@@MethodInvocation:ReflectionUtils.makeAccessible(showGroupsField) @TO@ LambdaExpression@@context -> {
  assertThat(context).hasSingleBean(Help.class);
  Help help=context.getBean(Help.class);
  Field showGroupsField=ReflectionUtils.findField(Help.class,"showGroups");
  ReflectionUtils.makeAccessible(showGroupsField);
  ReflectionUtils.getField(showGroupsField,help);
  assertThat(ReflectionUtils.getField(showGroupsField,help)).isEqualTo(false);
}
 @AT@ 2591 @LENGTH@ 48
------------------INS MethodInvocation@@ReflectionUtils.makeAccessible(showGroupsField) @TO@ ExpressionStatement@@MethodInvocation:ReflectionUtils.makeAccessible(showGroupsField) @AT@ 2591 @LENGTH@ 47
---------------------INS SimpleName@@Name:ReflectionUtils @TO@ MethodInvocation@@ReflectionUtils.makeAccessible(showGroupsField) @AT@ 2591 @LENGTH@ 15
---------------------INS SimpleName@@MethodName:makeAccessible:[showGroupsField] @TO@ MethodInvocation@@ReflectionUtils.makeAccessible(showGroupsField) @AT@ 2607 @LENGTH@ 31
------------------------INS SimpleName@@showGroupsField @TO@ SimpleName@@MethodName:makeAccessible:[showGroupsField] @AT@ 2622 @LENGTH@ 15
---------------INS ExpressionStatement@@MethodInvocation:ReflectionUtils.getField(showGroupsField,help) @TO@ LambdaExpression@@context -> {
  assertThat(context).hasSingleBean(Help.class);
  Help help=context.getBean(Help.class);
  Field showGroupsField=ReflectionUtils.findField(Help.class,"showGroups");
  ReflectionUtils.makeAccessible(showGroupsField);
  ReflectionUtils.getField(showGroupsField,help);
  assertThat(ReflectionUtils.getField(showGroupsField,help)).isEqualTo(false);
}
 @AT@ 2645 @LENGTH@ 48
------------------INS MethodInvocation@@ReflectionUtils.getField(showGroupsField,help) @TO@ ExpressionStatement@@MethodInvocation:ReflectionUtils.getField(showGroupsField,help) @AT@ 2645 @LENGTH@ 47
---------------------INS SimpleName@@Name:ReflectionUtils @TO@ MethodInvocation@@ReflectionUtils.getField(showGroupsField,help) @AT@ 2645 @LENGTH@ 15
---------------------INS SimpleName@@MethodName:getField:[showGroupsField, help] @TO@ MethodInvocation@@ReflectionUtils.getField(showGroupsField,help) @AT@ 2661 @LENGTH@ 31
------------------------INS SimpleName@@showGroupsField @TO@ SimpleName@@MethodName:getField:[showGroupsField, help] @AT@ 2670 @LENGTH@ 15
------------------------INS SimpleName@@help @TO@ SimpleName@@MethodName:getField:[showGroupsField, help] @AT@ 2687 @LENGTH@ 4
---------------INS ExpressionStatement@@MethodInvocation:assertThat(ReflectionUtils.getField(showGroupsField,help)).isEqualTo(false) @TO@ LambdaExpression@@context -> {
  assertThat(context).hasSingleBean(Help.class);
  Help help=context.getBean(Help.class);
  Field showGroupsField=ReflectionUtils.findField(Help.class,"showGroups");
  ReflectionUtils.makeAccessible(showGroupsField);
  ReflectionUtils.getField(showGroupsField,help);
  assertThat(ReflectionUtils.getField(showGroupsField,help)).isEqualTo(false);
}
 @AT@ 2699 @LENGTH@ 77
------------------INS MethodInvocation@@assertThat(ReflectionUtils.getField(showGroupsField,help)).isEqualTo(false) @TO@ ExpressionStatement@@MethodInvocation:assertThat(ReflectionUtils.getField(showGroupsField,help)).isEqualTo(false) @AT@ 2699 @LENGTH@ 76
---------------------INS MethodInvocation@@MethodName:assertThat:[ReflectionUtils.getField(showGroupsField,help)] @TO@ MethodInvocation@@assertThat(ReflectionUtils.getField(showGroupsField,help)).isEqualTo(false) @AT@ 2699 @LENGTH@ 59
------------------------INS MethodInvocation@@ReflectionUtils.getField(showGroupsField,help) @TO@ MethodInvocation@@MethodName:assertThat:[ReflectionUtils.getField(showGroupsField,help)] @AT@ 2710 @LENGTH@ 47
---------------------------INS SimpleName@@Name:ReflectionUtils @TO@ MethodInvocation@@ReflectionUtils.getField(showGroupsField,help) @AT@ 2710 @LENGTH@ 15
---------------------------INS SimpleName@@MethodName:getField:[showGroupsField, help] @TO@ MethodInvocation@@ReflectionUtils.getField(showGroupsField,help) @AT@ 2726 @LENGTH@ 31
------------------------------INS SimpleName@@showGroupsField @TO@ SimpleName@@MethodName:getField:[showGroupsField, help] @AT@ 2735 @LENGTH@ 15
------------------------------INS SimpleName@@help @TO@ SimpleName@@MethodName:getField:[showGroupsField, help] @AT@ 2752 @LENGTH@ 4
---------------------INS SimpleName@@MethodName:isEqualTo:[false] @TO@ MethodInvocation@@assertThat(ReflectionUtils.getField(showGroupsField,help)).isEqualTo(false) @AT@ 2759 @LENGTH@ 16
------------------------INS BooleanLiteral@@false @TO@ SimpleName@@MethodName:isEqualTo:[false] @AT@ 2769 @LENGTH@ 5


UPD ExpressionStatement@@MethodInvocation:assertThat(result).containsExactly(entry("res",2),entry("res2",3)) @TO@ MethodInvocation:assertThat(result).containsOnly(entry("res",2),entry("res2",3)) @AT@ 3189 @LENGTH@ 70
---UPD MethodInvocation@@assertThat(result).containsExactly(entry("res",2),entry("res2",3)) @TO@ assertThat(result).containsOnly(entry("res",2),entry("res2",3)) @AT@ 3189 @LENGTH@ 69
------UPD SimpleName@@MethodName:containsExactly:[entry("res",2), entry("res2",3)] @TO@ MethodName:containsOnly:[entry("res",2), entry("res2",3)] @AT@ 3208 @LENGTH@ 50


UPD ExpressionStatement@@MethodInvocation:exchange.getOut().setBody(RESPONSE) @TO@ MethodInvocation:exchange.getMessage().setBody(RESPONSE) @AT@ 2196 @LENGTH@ 36
---UPD MethodInvocation@@exchange.getOut().setBody(RESPONSE) @TO@ exchange.getMessage().setBody(RESPONSE) @AT@ 2196 @LENGTH@ 35
------UPD MethodInvocation@@MethodName:getOut:[] @TO@ MethodName:getMessage:[] @AT@ 2196 @LENGTH@ 17


UPD SwitchStatement@@switch (ignoreCase ? name.toLowerCase() : name) {case "multipartsubtype":case "multipartSubType":  dataformat.setMultipartSubType(property(camelContext,java.lang.String.class,value));return true;case "multipartwithoutattachment":case "multipartWithoutAttachment":dataformat.setMultipartWithoutAttachment(property(camelContext,boolean.class,value));return true;case "headersinline":case "headersInline":dataformat.setHeadersInline(property(camelContext,boolean.class,value));return true;case "binarycontent":case "binaryContent":dataformat.setBinaryContent(property(camelContext,boolean.class,value));return true;default :return false;} @TO@ switch (ignoreCase ? name.toLowerCase() : name) {case "multipartsubtype":case "multipartSubType":  dataformat.setMultipartSubType(property(camelContext,java.lang.String.class,value));return true;case "multipartwithoutattachment":case "multipartWithoutAttachment":dataformat.setMultipartWithoutAttachment(property(camelContext,boolean.class,value));return true;case "headersinline":case "headersInline":dataformat.setHeadersInline(property(camelContext,boolean.class,value));return true;case "includeheaders":case "includeHeaders":dataformat.setIncludeHeaders(property(camelContext,java.lang.String.class,value));return true;case "binarycontent":case "binaryContent":dataformat.setBinaryContent(property(camelContext,boolean.class,value));return true;default :return false;} @AT@ 771 @LENGTH@ 739
---INS SwitchCase@@case "includeheaders": @TO@ SwitchStatement@@switch (ignoreCase ? name.toLowerCase() : name) {case "multipartsubtype":case "multipartSubType":  dataformat.setMultipartSubType(property(camelContext,java.lang.String.class,value));return true;case "multipartwithoutattachment":case "multipartWithoutAttachment":dataformat.setMultipartWithoutAttachment(property(camelContext,boolean.class,value));return true;case "headersinline":case "headersInline":dataformat.setHeadersInline(property(camelContext,boolean.class,value));return true;case "binarycontent":case "binaryContent":dataformat.setBinaryContent(property(camelContext,boolean.class,value));return true;default :return false;} @AT@ 1330 @LENGTH@ 22
------INS StringLiteral@@"includeheaders" @TO@ SwitchCase@@case "includeheaders": @AT@ 1335 @LENGTH@ 16
---INS SwitchCase@@case "includeHeaders": @TO@ SwitchStatement@@switch (ignoreCase ? name.toLowerCase() : name) {case "multipartsubtype":case "multipartSubType":  dataformat.setMultipartSubType(property(camelContext,java.lang.String.class,value));return true;case "multipartwithoutattachment":case "multipartWithoutAttachment":dataformat.setMultipartWithoutAttachment(property(camelContext,boolean.class,value));return true;case "headersinline":case "headersInline":dataformat.setHeadersInline(property(camelContext,boolean.class,value));return true;case "binarycontent":case "binaryContent":dataformat.setBinaryContent(property(camelContext,boolean.class,value));return true;default :return false;} @AT@ 1361 @LENGTH@ 22
------INS StringLiteral@@"includeHeaders" @TO@ SwitchCase@@case "includeHeaders": @AT@ 1366 @LENGTH@ 16
---INS ExpressionStatement@@MethodInvocation:dataformat.setIncludeHeaders(property(camelContext,java.lang.String.class,value)) @TO@ SwitchStatement@@switch (ignoreCase ? name.toLowerCase() : name) {case "multipartsubtype":case "multipartSubType":  dataformat.setMultipartSubType(property(camelContext,java.lang.String.class,value));return true;case "multipartwithoutattachment":case "multipartWithoutAttachment":dataformat.setMultipartWithoutAttachment(property(camelContext,boolean.class,value));return true;case "headersinline":case "headersInline":dataformat.setHeadersInline(property(camelContext,boolean.class,value));return true;case "binarycontent":case "binaryContent":dataformat.setBinaryContent(property(camelContext,boolean.class,value));return true;default :return false;} @AT@ 1384 @LENGTH@ 84
------INS MethodInvocation@@dataformat.setIncludeHeaders(property(camelContext,java.lang.String.class,value)) @TO@ ExpressionStatement@@MethodInvocation:dataformat.setIncludeHeaders(property(camelContext,java.lang.String.class,value)) @AT@ 1384 @LENGTH@ 83
---------INS SimpleName@@Name:dataformat @TO@ MethodInvocation@@dataformat.setIncludeHeaders(property(camelContext,java.lang.String.class,value)) @AT@ 1384 @LENGTH@ 10
---------INS SimpleName@@MethodName:setIncludeHeaders:[property(camelContext,java.lang.String.class,value)] @TO@ MethodInvocation@@dataformat.setIncludeHeaders(property(camelContext,java.lang.String.class,value)) @AT@ 1395 @LENGTH@ 72
------------INS MethodInvocation@@property(camelContext,java.lang.String.class,value) @TO@ SimpleName@@MethodName:setIncludeHeaders:[property(camelContext,java.lang.String.class,value)] @AT@ 1413 @LENGTH@ 53
---------------INS SimpleName@@MethodName:property:[camelContext, java.lang.String.class, value] @TO@ MethodInvocation@@property(camelContext,java.lang.String.class,value) @AT@ 1413 @LENGTH@ 53
------------------INS SimpleName@@camelContext @TO@ SimpleName@@MethodName:property:[camelContext, java.lang.String.class, value] @AT@ 1422 @LENGTH@ 12
------------------INS TypeLiteral@@java.lang.String.class @TO@ SimpleName@@MethodName:property:[camelContext, java.lang.String.class, value] @AT@ 1436 @LENGTH@ 22
------------------INS SimpleName@@value @TO@ SimpleName@@MethodName:property:[camelContext, java.lang.String.class, value] @AT@ 1460 @LENGTH@ 5
---INS ReturnStatement@@BooleanLiteral:true @TO@ SwitchStatement@@switch (ignoreCase ? name.toLowerCase() : name) {case "multipartsubtype":case "multipartSubType":  dataformat.setMultipartSubType(property(camelContext,java.lang.String.class,value));return true;case "multipartwithoutattachment":case "multipartWithoutAttachment":dataformat.setMultipartWithoutAttachment(property(camelContext,boolean.class,value));return true;case "headersinline":case "headersInline":dataformat.setHeadersInline(property(camelContext,boolean.class,value));return true;case "binarycontent":case "binaryContent":dataformat.setBinaryContent(property(camelContext,boolean.class,value));return true;default :return false;} @AT@ 1469 @LENGTH@ 12
------INS BooleanLiteral@@true @TO@ ReturnStatement@@BooleanLiteral:true @AT@ 1476 @LENGTH@ 4


UPD ReturnStatement@@ConditionalExpression:ObjectHelper.isEmpty(name) ? CamelContextHelper.findByType(context,type) : CamelContextHelper.lookup(context,name,type) @TO@ ConditionalExpression:ObjectHelper.isEmpty(name) ? CamelContextHelper.findSingleByType(context,type) : CamelContextHelper.lookup(context,name,type) @AT@ 3340 @LENGTH@ 162
---UPD ConditionalExpression@@ObjectHelper.isEmpty(name) ? CamelContextHelper.findByType(context,type) : CamelContextHelper.lookup(context,name,type) @TO@ ObjectHelper.isEmpty(name) ? CamelContextHelper.findSingleByType(context,type) : CamelContextHelper.lookup(context,name,type) @AT@ 3347 @LENGTH@ 154
------UPD MethodInvocation@@CamelContextHelper.findByType(context,type) @TO@ CamelContextHelper.findSingleByType(context,type) @AT@ 3392 @LENGTH@ 44
---------UPD SimpleName@@MethodName:findByType:[context, type] @TO@ MethodName:findSingleByType:[context, type] @AT@ 3411 @LENGTH@ 25


INS MethodDeclaration@@void, MethodName:testRunNoMoreBooleanSupplierWithForever,  @TO@ TypeDeclaration@@[public]BackgroundIterationTimeTaskTest, TaskTestSupport @AT@ 6942 @LENGTH@ 759
---INS PrimitiveType@@void @TO@ MethodDeclaration@@void, MethodName:testRunNoMoreBooleanSupplierWithForever,  @AT@ 6937 @LENGTH@ 4
---INS SimpleName@@MethodName:testRunNoMoreBooleanSupplierWithForever @TO@ MethodDeclaration@@void, MethodName:testRunNoMoreBooleanSupplierWithForever,  @AT@ 6942 @LENGTH@ 39
---INS VariableDeclarationStatement@@BackgroundTask task=Tasks.backgroundTask().withScheduledExecutor(Executors.newSingleThreadScheduledExecutor()).withBudget(Budgets.iterationTimeBudget().withMaxIterations(Integer.MAX_VALUE).withInitialDelay(Duration.ofSeconds(1)).withUnlimitedDuration().build()).build(); @TO@ MethodDeclaration@@void, MethodName:testRunNoMoreBooleanSupplierWithForever,  @AT@ 6994 @LENGTH@ 423
------INS SimpleType@@BackgroundTask @TO@ VariableDeclarationStatement@@BackgroundTask task=Tasks.backgroundTask().withScheduledExecutor(Executors.newSingleThreadScheduledExecutor()).withBudget(Budgets.iterationTimeBudget().withMaxIterations(Integer.MAX_VALUE).withInitialDelay(Duration.ofSeconds(1)).withUnlimitedDuration().build()).build(); @AT@ 6994 @LENGTH@ 14
------INS VariableDeclarationFragment@@task=Tasks.backgroundTask().withScheduledExecutor(Executors.newSingleThreadScheduledExecutor()).withBudget(Budgets.iterationTimeBudget().withMaxIterations(Integer.MAX_VALUE).withInitialDelay(Duration.ofSeconds(1)).withUnlimitedDuration().build()).build() @TO@ VariableDeclarationStatement@@BackgroundTask task=Tasks.backgroundTask().withScheduledExecutor(Executors.newSingleThreadScheduledExecutor()).withBudget(Budgets.iterationTimeBudget().withMaxIterations(Integer.MAX_VALUE).withInitialDelay(Duration.ofSeconds(1)).withUnlimitedDuration().build()).build(); @AT@ 7009 @LENGTH@ 407
---------INS SimpleName@@task @TO@ VariableDeclarationFragment@@task=Tasks.backgroundTask().withScheduledExecutor(Executors.newSingleThreadScheduledExecutor()).withBudget(Budgets.iterationTimeBudget().withMaxIterations(Integer.MAX_VALUE).withInitialDelay(Duration.ofSeconds(1)).withUnlimitedDuration().build()).build() @AT@ 7009 @LENGTH@ 4
---------INS MethodInvocation@@Tasks.backgroundTask().withScheduledExecutor(Executors.newSingleThreadScheduledExecutor()).withBudget(Budgets.iterationTimeBudget().withMaxIterations(Integer.MAX_VALUE).withInitialDelay(Duration.ofSeconds(1)).withUnlimitedDuration().build()).build() @TO@ VariableDeclarationFragment@@task=Tasks.backgroundTask().withScheduledExecutor(Executors.newSingleThreadScheduledExecutor()).withBudget(Budgets.iterationTimeBudget().withMaxIterations(Integer.MAX_VALUE).withInitialDelay(Duration.ofSeconds(1)).withUnlimitedDuration().build()).build() @AT@ 7016 @LENGTH@ 400
------------INS MethodInvocation@@MethodName:withBudget:[Budgets.iterationTimeBudget().withMaxIterations(Integer.MAX_VALUE).withInitialDelay(Duration.ofSeconds(1)).withUnlimitedDuration().build()] @TO@ MethodInvocation@@Tasks.backgroundTask().withScheduledExecutor(Executors.newSingleThreadScheduledExecutor()).withBudget(Budgets.iterationTimeBudget().withMaxIterations(Integer.MAX_VALUE).withInitialDelay(Duration.ofSeconds(1)).withUnlimitedDuration().build()).build() @AT@ 7016 @LENGTH@ 375
---------------INS MethodInvocation@@Budgets.iterationTimeBudget().withMaxIterations(Integer.MAX_VALUE).withInitialDelay(Duration.ofSeconds(1)).withUnlimitedDuration().build() @TO@ MethodInvocation@@MethodName:withBudget:[Budgets.iterationTimeBudget().withMaxIterations(Integer.MAX_VALUE).withInitialDelay(Duration.ofSeconds(1)).withUnlimitedDuration().build()] @AT@ 7152 @LENGTH@ 238
------------------INS MethodInvocation@@MethodName:withUnlimitedDuration:[] @TO@ MethodInvocation@@Budgets.iterationTimeBudget().withMaxIterations(Integer.MAX_VALUE).withInitialDelay(Duration.ofSeconds(1)).withUnlimitedDuration().build() @AT@ 7152 @LENGTH@ 205
------------------INS MethodInvocation@@MethodName:withInitialDelay:[Duration.ofSeconds(1)] @TO@ MethodInvocation@@Budgets.iterationTimeBudget().withMaxIterations(Integer.MAX_VALUE).withInitialDelay(Duration.ofSeconds(1)).withUnlimitedDuration().build() @AT@ 7152 @LENGTH@ 156
---------------------INS MethodInvocation@@Duration.ofSeconds(1) @TO@ MethodInvocation@@MethodName:withInitialDelay:[Duration.ofSeconds(1)] @AT@ 7286 @LENGTH@ 21
------------------------INS SimpleName@@Name:Duration @TO@ MethodInvocation@@Duration.ofSeconds(1) @AT@ 7286 @LENGTH@ 8
------------------------INS SimpleName@@MethodName:ofSeconds:[1] @TO@ MethodInvocation@@Duration.ofSeconds(1) @AT@ 7295 @LENGTH@ 12
---------------------------INS NumberLiteral@@1 @TO@ SimpleName@@MethodName:ofSeconds:[1] @AT@ 7305 @LENGTH@ 1
------------------INS MethodInvocation@@MethodName:withMaxIterations:[Integer.MAX_VALUE] @TO@ MethodInvocation@@Budgets.iterationTimeBudget().withMaxIterations(Integer.MAX_VALUE).withInitialDelay(Duration.ofSeconds(1)).withUnlimitedDuration().build() @AT@ 7152 @LENGTH@ 91
---------------------INS QualifiedName@@Integer.MAX_VALUE @TO@ MethodInvocation@@MethodName:withMaxIterations:[Integer.MAX_VALUE] @AT@ 7225 @LENGTH@ 17
------------------------INS SimpleName@@Integer @TO@ QualifiedName@@Integer.MAX_VALUE @AT@ 7225 @LENGTH@ 7
------------------------INS SimpleName@@MAX_VALUE @TO@ QualifiedName@@Integer.MAX_VALUE @AT@ 7233 @LENGTH@ 9
------------------INS MethodInvocation@@MethodName:iterationTimeBudget:[] @TO@ MethodInvocation@@Budgets.iterationTimeBudget().withMaxIterations(Integer.MAX_VALUE).withInitialDelay(Duration.ofSeconds(1)).withUnlimitedDuration().build() @AT@ 7152 @LENGTH@ 29
------------------INS SimpleName@@Name:Budgets @TO@ MethodInvocation@@Budgets.iterationTimeBudget().withMaxIterations(Integer.MAX_VALUE).withInitialDelay(Duration.ofSeconds(1)).withUnlimitedDuration().build() @AT@ 7152 @LENGTH@ 7
------------------INS SimpleName@@MethodName:build:[] @TO@ MethodInvocation@@Budgets.iterationTimeBudget().withMaxIterations(Integer.MAX_VALUE).withInitialDelay(Duration.ofSeconds(1)).withUnlimitedDuration().build() @AT@ 7383 @LENGTH@ 7
------------INS MethodInvocation@@MethodName:withScheduledExecutor:[Executors.newSingleThreadScheduledExecutor()] @TO@ MethodInvocation@@Tasks.backgroundTask().withScheduledExecutor(Executors.newSingleThreadScheduledExecutor()).withBudget(Budgets.iterationTimeBudget().withMaxIterations(Integer.MAX_VALUE).withInitialDelay(Duration.ofSeconds(1)).withUnlimitedDuration().build()).build() @AT@ 7016 @LENGTH@ 107
---------------INS MethodInvocation@@Executors.newSingleThreadScheduledExecutor() @TO@ MethodInvocation@@MethodName:withScheduledExecutor:[Executors.newSingleThreadScheduledExecutor()] @AT@ 7078 @LENGTH@ 44
------------------INS SimpleName@@Name:Executors @TO@ MethodInvocation@@Executors.newSingleThreadScheduledExecutor() @AT@ 7078 @LENGTH@ 9
------------------INS SimpleName@@MethodName:newSingleThreadScheduledExecutor:[] @TO@ MethodInvocation@@Executors.newSingleThreadScheduledExecutor() @AT@ 7088 @LENGTH@ 34
------------INS MethodInvocation@@MethodName:backgroundTask:[] @TO@ MethodInvocation@@Tasks.backgroundTask().withScheduledExecutor(Executors.newSingleThreadScheduledExecutor()).withBudget(Budgets.iterationTimeBudget().withMaxIterations(Integer.MAX_VALUE).withInitialDelay(Duration.ofSeconds(1)).withUnlimitedDuration().build()).build() @AT@ 7016 @LENGTH@ 22
------------INS SimpleName@@Name:Tasks @TO@ MethodInvocation@@Tasks.backgroundTask().withScheduledExecutor(Executors.newSingleThreadScheduledExecutor()).withBudget(Budgets.iterationTimeBudget().withMaxIterations(Integer.MAX_VALUE).withInitialDelay(Duration.ofSeconds(1)).withUnlimitedDuration().build()).build() @AT@ 7016 @LENGTH@ 5
------------INS SimpleName@@MethodName:build:[] @TO@ MethodInvocation@@Tasks.backgroundTask().withScheduledExecutor(Executors.newSingleThreadScheduledExecutor()).withBudget(Budgets.iterationTimeBudget().withMaxIterations(Integer.MAX_VALUE).withInitialDelay(Duration.ofSeconds(1)).withUnlimitedDuration().build()).build() @AT@ 7409 @LENGTH@ 7
---INS VariableDeclarationStatement@@boolean completed=task.run(this::taskPredicateWithDeterministicStop,4); @TO@ MethodDeclaration@@void, MethodName:testRunNoMoreBooleanSupplierWithForever,  @AT@ 7427 @LENGTH@ 74
------INS PrimitiveType@@boolean @TO@ VariableDeclarationStatement@@boolean completed=task.run(this::taskPredicateWithDeterministicStop,4); @AT@ 7427 @LENGTH@ 7
------INS VariableDeclarationFragment@@completed=task.run(this::taskPredicateWithDeterministicStop,4) @TO@ VariableDeclarationStatement@@boolean completed=task.run(this::taskPredicateWithDeterministicStop,4); @AT@ 7435 @LENGTH@ 65
---------INS SimpleName@@completed @TO@ VariableDeclarationFragment@@completed=task.run(this::taskPredicateWithDeterministicStop,4) @AT@ 7435 @LENGTH@ 9
---------INS MethodInvocation@@task.run(this::taskPredicateWithDeterministicStop,4) @TO@ VariableDeclarationFragment@@completed=task.run(this::taskPredicateWithDeterministicStop,4) @AT@ 7447 @LENGTH@ 53
------------INS SimpleName@@Name:task @TO@ MethodInvocation@@task.run(this::taskPredicateWithDeterministicStop,4) @AT@ 7447 @LENGTH@ 4
------------INS SimpleName@@MethodName:run:[this::taskPredicateWithDeterministicStop, 4] @TO@ MethodInvocation@@task.run(this::taskPredicateWithDeterministicStop,4) @AT@ 7452 @LENGTH@ 48
---------------INS NumberLiteral@@4 @TO@ SimpleName@@MethodName:run:[this::taskPredicateWithDeterministicStop, 4] @AT@ 7498 @LENGTH@ 1
---INS ExpressionStatement@@MethodInvocation:assertTrue(maxIterations > taskCount,"The task execution should not exceed the max iterations") @TO@ MethodDeclaration@@void, MethodName:testRunNoMoreBooleanSupplierWithForever,  @AT@ 7510 @LENGTH@ 97
------INS MethodInvocation@@assertTrue(maxIterations > taskCount,"The task execution should not exceed the max iterations") @TO@ ExpressionStatement@@MethodInvocation:assertTrue(maxIterations > taskCount,"The task execution should not exceed the max iterations") @AT@ 7510 @LENGTH@ 96
---------INS SimpleName@@MethodName:assertTrue:[maxIterations > taskCount, "The task execution should not exceed the max iterations"] @TO@ MethodInvocation@@assertTrue(maxIterations > taskCount,"The task execution should not exceed the max iterations") @AT@ 7510 @LENGTH@ 96
------------INS InfixExpression@@maxIterations > taskCount @TO@ SimpleName@@MethodName:assertTrue:[maxIterations > taskCount, "The task execution should not exceed the max iterations"] @AT@ 7521 @LENGTH@ 25
---------------INS SimpleName@@maxIterations @TO@ InfixExpression@@maxIterations > taskCount @AT@ 7521 @LENGTH@ 13
---------------INS Operator@@> @TO@ InfixExpression@@maxIterations > taskCount @AT@ 7534 @LENGTH@ 1
---------------INS SimpleName@@taskCount @TO@ InfixExpression@@maxIterations > taskCount @AT@ 7537 @LENGTH@ 9
------------INS StringLiteral@@"The task execution should not exceed the max iterations" @TO@ SimpleName@@MethodName:assertTrue:[maxIterations > taskCount, "The task execution should not exceed the max iterations"] @AT@ 7548 @LENGTH@ 57
---INS ExpressionStatement@@MethodInvocation:assertTrue(completed,"The task did not complete, the return should be false") @TO@ MethodDeclaration@@void, MethodName:testRunNoMoreBooleanSupplierWithForever,  @AT@ 7616 @LENGTH@ 79
------INS MethodInvocation@@assertTrue(completed,"The task did not complete, the return should be false") @TO@ ExpressionStatement@@MethodInvocation:assertTrue(completed,"The task did not complete, the return should be false") @AT@ 7616 @LENGTH@ 78
---------INS SimpleName@@MethodName:assertTrue:[completed, "The task did not complete, the return should be false"] @TO@ MethodInvocation@@assertTrue(completed,"The task did not complete, the return should be false") @AT@ 7616 @LENGTH@ 78
------------INS SimpleName@@completed @TO@ SimpleName@@MethodName:assertTrue:[completed, "The task did not complete, the return should be false"] @AT@ 7627 @LENGTH@ 9
------------INS StringLiteral@@"The task did not complete, the return should be false" @TO@ SimpleName@@MethodName:assertTrue:[completed, "The task did not complete, the return should be false"] @AT@ 7638 @LENGTH@ 55


INS IfStatement@@if (expressionType == null) {  return value;} @TO@ MethodDeclaration@@public, Object, MethodName:prepare, Object value,  @AT@ 8430 @LENGTH@ 52
---INS InfixExpression@@expressionType == null @TO@ IfStatement@@if (expressionType == null) {  return value;} @AT@ 8434 @LENGTH@ 22
------INS SimpleName@@expressionType @TO@ InfixExpression@@expressionType == null @AT@ 8434 @LENGTH@ 14
------INS Operator@@== @TO@ InfixExpression@@expressionType == null @AT@ 8448 @LENGTH@ 2
------INS NullLiteral@@null @TO@ InfixExpression@@expressionType == null @AT@ 8452 @LENGTH@ 4
---INS Block@@ThenBody:{  return value;} @TO@ IfStatement@@if (expressionType == null) {  return value;} @AT@ 8458 @LENGTH@ 24
------INS ReturnStatement@@SimpleName:value @TO@ Block@@ThenBody:{  return value;} @AT@ 8464 @LENGTH@ 13
---------INS SimpleName@@value @TO@ ReturnStatement@@SimpleName:value @AT@ 8471 @LENGTH@ 5


UPD VariableDeclarationStatement@@JCacheManagerFactory factory=CamelContextHelper.findByType(camelContext,JCacheManagerFactory.class); @TO@ JCacheManagerFactory factory=CamelContextHelper.findSingleByType(camelContext,JCacheManagerFactory.class); @AT@ 1205 @LENGTH@ 103
---UPD VariableDeclarationFragment@@factory=CamelContextHelper.findByType(camelContext,JCacheManagerFactory.class) @TO@ factory=CamelContextHelper.findSingleByType(camelContext,JCacheManagerFactory.class) @AT@ 1226 @LENGTH@ 81
------UPD MethodInvocation@@CamelContextHelper.findByType(camelContext,JCacheManagerFactory.class) @TO@ CamelContextHelper.findSingleByType(camelContext,JCacheManagerFactory.class) @AT@ 1236 @LENGTH@ 71
---------UPD SimpleName@@MethodName:findByType:[camelContext, JCacheManagerFactory.class] @TO@ MethodName:findSingleByType:[camelContext, JCacheManagerFactory.class] @AT@ 1255 @LENGTH@ 52


UPD VariableDeclarationStatement@@final Object[] els=new Object[]{"1","3","5","7","2","4","6"}; @TO@ final Object[] els={"1","3","5","7","2","4","6"}; @AT@ 2069 @LENGTH@ 72
---UPD VariableDeclarationFragment@@els=new Object[]{"1","3","5","7","2","4","6"} @TO@ els={"1","3","5","7","2","4","6"} @AT@ 2084 @LENGTH@ 56
------DEL ArrayCreation@@new Object[]{"1","3","5","7","2","4","6"} @AT@ 2090 @LENGTH@ 50
---------DEL ArrayType@@Object[] @AT@ 2094 @LENGTH@ 8
------------DEL SimpleType@@Object @AT@ 2094 @LENGTH@ 6
---------DEL ArrayInitializer@@{"1","3","5","7","2","4","6"} @AT@ 2103 @LENGTH@ 37
------INS ArrayInitializer@@{"1","3","5","7","2","4","6"} @TO@ VariableDeclarationFragment@@els=new Object[]{"1","3","5","7","2","4","6"} @AT@ 2090 @LENGTH@ 37
---------MOV StringLiteral@@"1" @TO@ ArrayInitializer@@{"1","3","5","7","2","4","6"} @AT@ 2105 @LENGTH@ 3
---------MOV StringLiteral@@"3" @TO@ ArrayInitializer@@{"1","3","5","7","2","4","6"} @AT@ 2110 @LENGTH@ 3
---------MOV StringLiteral@@"5" @TO@ ArrayInitializer@@{"1","3","5","7","2","4","6"} @AT@ 2115 @LENGTH@ 3
---------MOV StringLiteral@@"7" @TO@ ArrayInitializer@@{"1","3","5","7","2","4","6"} @AT@ 2120 @LENGTH@ 3
---------MOV StringLiteral@@"2" @TO@ ArrayInitializer@@{"1","3","5","7","2","4","6"} @AT@ 2125 @LENGTH@ 3
---------MOV StringLiteral@@"4" @TO@ ArrayInitializer@@{"1","3","5","7","2","4","6"} @AT@ 2130 @LENGTH@ 3
---------MOV StringLiteral@@"6" @TO@ ArrayInitializer@@{"1","3","5","7","2","4","6"} @AT@ 2135 @LENGTH@ 3


UPD ExpressionStatement@@MethodInvocation:exchange.getOut().setBody(exchange.getIn().getBody(String.class)) @TO@ MethodInvocation:exchange.getMessage().setBody(exchange.getIn().getBody(String.class)) @AT@ 3923 @LENGTH@ 66
---UPD MethodInvocation@@exchange.getOut().setBody(exchange.getIn().getBody(String.class)) @TO@ exchange.getMessage().setBody(exchange.getIn().getBody(String.class)) @AT@ 3923 @LENGTH@ 65
------UPD MethodInvocation@@MethodName:getOut:[] @TO@ MethodName:getMessage:[] @AT@ 3923 @LENGTH@ 17


INS MethodDeclaration@@void, MethodName:templatePassesOnTimeSeriesOptionsWhenNoTypeGiven,  @TO@ TypeDeclaration@@[@MockitoSettings(strictness=Strictness.LENIENT), public]MongoTemplateUnitTests, MongoOperationsUnitTests @AT@ 86962 @LENGTH@ 478
---INS PrimitiveType@@void @TO@ MethodDeclaration@@void, MethodName:templatePassesOnTimeSeriesOptionsWhenNoTypeGiven,  @AT@ 86957 @LENGTH@ 4
---INS SimpleName@@MethodName:templatePassesOnTimeSeriesOptionsWhenNoTypeGiven @TO@ MethodDeclaration@@void, MethodName:templatePassesOnTimeSeriesOptionsWhenNoTypeGiven,  @AT@ 86962 @LENGTH@ 48
---INS ExpressionStatement@@MethodInvocation:template.createCollection("time-series-collection",CollectionOptions.timeSeries("time_stamp")) @TO@ MethodDeclaration@@void, MethodName:templatePassesOnTimeSeriesOptionsWhenNoTypeGiven,  @AT@ 87018 @LENGTH@ 96
------INS MethodInvocation@@template.createCollection("time-series-collection",CollectionOptions.timeSeries("time_stamp")) @TO@ ExpressionStatement@@MethodInvocation:template.createCollection("time-series-collection",CollectionOptions.timeSeries("time_stamp")) @AT@ 87018 @LENGTH@ 95
---------INS SimpleName@@Name:template @TO@ MethodInvocation@@template.createCollection("time-series-collection",CollectionOptions.timeSeries("time_stamp")) @AT@ 87018 @LENGTH@ 8
---------INS SimpleName@@MethodName:createCollection:["time-series-collection", CollectionOptions.timeSeries("time_stamp")] @TO@ MethodInvocation@@template.createCollection("time-series-collection",CollectionOptions.timeSeries("time_stamp")) @AT@ 87027 @LENGTH@ 86
------------INS StringLiteral@@"time-series-collection" @TO@ SimpleName@@MethodName:createCollection:["time-series-collection", CollectionOptions.timeSeries("time_stamp")] @AT@ 87044 @LENGTH@ 24
------------INS MethodInvocation@@CollectionOptions.timeSeries("time_stamp") @TO@ SimpleName@@MethodName:createCollection:["time-series-collection", CollectionOptions.timeSeries("time_stamp")] @AT@ 87070 @LENGTH@ 42
---------------INS SimpleName@@Name:CollectionOptions @TO@ MethodInvocation@@CollectionOptions.timeSeries("time_stamp") @AT@ 87070 @LENGTH@ 17
---------------INS SimpleName@@MethodName:timeSeries:["time_stamp"] @TO@ MethodInvocation@@CollectionOptions.timeSeries("time_stamp") @AT@ 87088 @LENGTH@ 24
------------------INS StringLiteral@@"time_stamp" @TO@ SimpleName@@MethodName:timeSeries:["time_stamp"] @AT@ 87099 @LENGTH@ 12
---INS VariableDeclarationStatement@@ArgumentCaptor<CreateCollectionOptions> options=ArgumentCaptor.forClass(CreateCollectionOptions.class); @TO@ MethodDeclaration@@void, MethodName:templatePassesOnTimeSeriesOptionsWhenNoTypeGiven,  @AT@ 87118 @LENGTH@ 105
------INS ParameterizedType@@ArgumentCaptor<CreateCollectionOptions> @TO@ VariableDeclarationStatement@@ArgumentCaptor<CreateCollectionOptions> options=ArgumentCaptor.forClass(CreateCollectionOptions.class); @AT@ 87118 @LENGTH@ 39
---------INS SimpleType@@ArgumentCaptor @TO@ ParameterizedType@@ArgumentCaptor<CreateCollectionOptions> @AT@ 87118 @LENGTH@ 14
---------INS SimpleType@@CreateCollectionOptions @TO@ ParameterizedType@@ArgumentCaptor<CreateCollectionOptions> @AT@ 87133 @LENGTH@ 23
------INS VariableDeclarationFragment@@options=ArgumentCaptor.forClass(CreateCollectionOptions.class) @TO@ VariableDeclarationStatement@@ArgumentCaptor<CreateCollectionOptions> options=ArgumentCaptor.forClass(CreateCollectionOptions.class); @AT@ 87158 @LENGTH@ 64
---------INS SimpleName@@options @TO@ VariableDeclarationFragment@@options=ArgumentCaptor.forClass(CreateCollectionOptions.class) @AT@ 87158 @LENGTH@ 7
---------INS MethodInvocation@@ArgumentCaptor.forClass(CreateCollectionOptions.class) @TO@ VariableDeclarationFragment@@options=ArgumentCaptor.forClass(CreateCollectionOptions.class) @AT@ 87168 @LENGTH@ 54
------------INS SimpleName@@Name:ArgumentCaptor @TO@ MethodInvocation@@ArgumentCaptor.forClass(CreateCollectionOptions.class) @AT@ 87168 @LENGTH@ 14
------------INS SimpleName@@MethodName:forClass:[CreateCollectionOptions.class] @TO@ MethodInvocation@@ArgumentCaptor.forClass(CreateCollectionOptions.class) @AT@ 87183 @LENGTH@ 39
---------------INS TypeLiteral@@CreateCollectionOptions.class @TO@ SimpleName@@MethodName:forClass:[CreateCollectionOptions.class] @AT@ 87192 @LENGTH@ 29
---INS ExpressionStatement@@MethodInvocation:verify(db).createCollection(any(),options.capture()) @TO@ MethodDeclaration@@void, MethodName:templatePassesOnTimeSeriesOptionsWhenNoTypeGiven,  @AT@ 87226 @LENGTH@ 54
------INS MethodInvocation@@verify(db).createCollection(any(),options.capture()) @TO@ ExpressionStatement@@MethodInvocation:verify(db).createCollection(any(),options.capture()) @AT@ 87226 @LENGTH@ 53
---------INS MethodInvocation@@MethodName:verify:[db] @TO@ MethodInvocation@@verify(db).createCollection(any(),options.capture()) @AT@ 87226 @LENGTH@ 10
------------INS SimpleName@@db @TO@ MethodInvocation@@MethodName:verify:[db] @AT@ 87233 @LENGTH@ 2
---------INS SimpleName@@MethodName:createCollection:[any(), options.capture()] @TO@ MethodInvocation@@verify(db).createCollection(any(),options.capture()) @AT@ 87237 @LENGTH@ 42
------------INS MethodInvocation@@MethodName:any:[] @TO@ SimpleName@@MethodName:createCollection:[any(), options.capture()] @AT@ 87254 @LENGTH@ 5
------------INS MethodInvocation@@options.capture() @TO@ SimpleName@@MethodName:createCollection:[any(), options.capture()] @AT@ 87261 @LENGTH@ 17
---------------INS SimpleName@@Name:options @TO@ MethodInvocation@@options.capture() @AT@ 87261 @LENGTH@ 7
---------------INS SimpleName@@MethodName:capture:[] @TO@ MethodInvocation@@options.capture() @AT@ 87269 @LENGTH@ 9
---INS ExpressionStatement@@MethodInvocation:assertThat(options.getValue().getTimeSeriesOptions().toString()).isEqualTo(new com.mongodb.client.model.TimeSeriesOptions("time_stamp").toString()) @TO@ MethodDeclaration@@void, MethodName:templatePassesOnTimeSeriesOptionsWhenNoTypeGiven,  @AT@ 87284 @LENGTH@ 153
------INS MethodInvocation@@assertThat(options.getValue().getTimeSeriesOptions().toString()).isEqualTo(new com.mongodb.client.model.TimeSeriesOptions("time_stamp").toString()) @TO@ ExpressionStatement@@MethodInvocation:assertThat(options.getValue().getTimeSeriesOptions().toString()).isEqualTo(new com.mongodb.client.model.TimeSeriesOptions("time_stamp").toString()) @AT@ 87284 @LENGTH@ 152
---------INS MethodInvocation@@MethodName:assertThat:[options.getValue().getTimeSeriesOptions().toString()] @TO@ MethodInvocation@@assertThat(options.getValue().getTimeSeriesOptions().toString()).isEqualTo(new com.mongodb.client.model.TimeSeriesOptions("time_stamp").toString()) @AT@ 87284 @LENGTH@ 64
------------INS MethodInvocation@@options.getValue().getTimeSeriesOptions().toString() @TO@ MethodInvocation@@MethodName:assertThat:[options.getValue().getTimeSeriesOptions().toString()] @AT@ 87295 @LENGTH@ 52
---------------INS MethodInvocation@@MethodName:getTimeSeriesOptions:[] @TO@ MethodInvocation@@options.getValue().getTimeSeriesOptions().toString() @AT@ 87295 @LENGTH@ 41
---------------INS MethodInvocation@@MethodName:getValue:[] @TO@ MethodInvocation@@options.getValue().getTimeSeriesOptions().toString() @AT@ 87295 @LENGTH@ 18
---------------INS SimpleName@@Name:options @TO@ MethodInvocation@@options.getValue().getTimeSeriesOptions().toString() @AT@ 87295 @LENGTH@ 7
---------------INS SimpleName@@MethodName:toString:[] @TO@ MethodInvocation@@options.getValue().getTimeSeriesOptions().toString() @AT@ 87337 @LENGTH@ 10
---------INS SimpleName@@MethodName:isEqualTo:[new com.mongodb.client.model.TimeSeriesOptions("time_stamp").toString()] @TO@ MethodInvocation@@assertThat(options.getValue().getTimeSeriesOptions().toString()).isEqualTo(new com.mongodb.client.model.TimeSeriesOptions("time_stamp").toString()) @AT@ 87354 @LENGTH@ 82
------------INS MethodInvocation@@new com.mongodb.client.model.TimeSeriesOptions("time_stamp").toString() @TO@ SimpleName@@MethodName:isEqualTo:[new com.mongodb.client.model.TimeSeriesOptions("time_stamp").toString()] @AT@ 87364 @LENGTH@ 71
---------------INS ClassInstanceCreation@@com.mongodb.client.model.TimeSeriesOptions["time_stamp"] @TO@ MethodInvocation@@new com.mongodb.client.model.TimeSeriesOptions("time_stamp").toString() @AT@ 87364 @LENGTH@ 60
------------------INS New@@new @TO@ ClassInstanceCreation@@com.mongodb.client.model.TimeSeriesOptions["time_stamp"] @AT@ 87364 @LENGTH@ 3
------------------INS SimpleType@@com.mongodb.client.model.TimeSeriesOptions @TO@ ClassInstanceCreation@@com.mongodb.client.model.TimeSeriesOptions["time_stamp"] @AT@ 87368 @LENGTH@ 42
------------------INS StringLiteral@@"time_stamp" @TO@ ClassInstanceCreation@@com.mongodb.client.model.TimeSeriesOptions["time_stamp"] @AT@ 87411 @LENGTH@ 12
---------------INS SimpleName@@MethodName:toString:[] @TO@ MethodInvocation@@new com.mongodb.client.model.TimeSeriesOptions("time_stamp").toString() @AT@ 87425 @LENGTH@ 10


UPD ExpressionStatement@@MethodInvocation:exchange.getOut().setBody(doc) @TO@ MethodInvocation:exchange.getMessage().setBody(doc) @AT@ 1826 @LENGTH@ 31
---UPD MethodInvocation@@exchange.getOut().setBody(doc) @TO@ exchange.getMessage().setBody(doc) @AT@ 1826 @LENGTH@ 30
------UPD MethodInvocation@@MethodName:getOut:[] @TO@ MethodName:getMessage:[] @AT@ 1826 @LENGTH@ 17


UPD ExpressionStatement@@MethodInvocation:archive.read() @TO@ MethodInvocation:assertThrows(IllegalStateException.class,() -> archive.read()) @AT@ 5579 @LENGTH@ 15
---DEL MethodInvocation@@archive.read() @AT@ 5579 @LENGTH@ 14
---INS MethodInvocation@@assertThrows(IllegalStateException.class,() -> archive.read()) @TO@ ExpressionStatement@@MethodInvocation:archive.read() @AT@ 5673 @LENGTH@ 63
------INS SimpleName@@MethodName:assertThrows:[IllegalStateException.class, () -> archive.read()] @TO@ MethodInvocation@@assertThrows(IllegalStateException.class,() -> archive.read()) @AT@ 5673 @LENGTH@ 63
---------INS TypeLiteral@@IllegalStateException.class @TO@ SimpleName@@MethodName:assertThrows:[IllegalStateException.class, () -> archive.read()] @AT@ 5686 @LENGTH@ 27
---------INS LambdaExpression@@() -> archive.read() @TO@ SimpleName@@MethodName:assertThrows:[IllegalStateException.class, () -> archive.read()] @AT@ 5715 @LENGTH@ 20
------------INS MethodInvocation@@archive.read() @TO@ LambdaExpression@@() -> archive.read() @AT@ 5721 @LENGTH@ 14
---------------MOV SimpleName@@Name:archive @TO@ MethodInvocation@@archive.read() @AT@ 5579 @LENGTH@ 7
---------------MOV SimpleName@@MethodName:read:[] @TO@ MethodInvocation@@archive.read() @AT@ 5587 @LENGTH@ 6


INS MethodDeclaration@@void, MethodName:registersLookupForPrimitiveValue,  @TO@ TypeDeclaration@@MethodInvocationRecorderUnitTests,  @AT@ 2586 @LENGTH@ 184
---INS PrimitiveType@@void @TO@ MethodDeclaration@@void, MethodName:registersLookupForPrimitiveValue,  @AT@ 2581 @LENGTH@ 4
---INS SimpleName@@MethodName:registersLookupForPrimitiveValue @TO@ MethodDeclaration@@void, MethodName:registersLookupForPrimitiveValue,  @AT@ 2586 @LENGTH@ 32
---INS VariableDeclarationStatement@@var recorder=MethodInvocationRecorder.forProxyOf(Foo.class); @TO@ MethodDeclaration@@void, MethodName:registersLookupForPrimitiveValue,  @AT@ 2626 @LENGTH@ 62
------INS SimpleType@@var @TO@ VariableDeclarationStatement@@var recorder=MethodInvocationRecorder.forProxyOf(Foo.class); @AT@ 2626 @LENGTH@ 3
------INS VariableDeclarationFragment@@recorder=MethodInvocationRecorder.forProxyOf(Foo.class) @TO@ VariableDeclarationStatement@@var recorder=MethodInvocationRecorder.forProxyOf(Foo.class); @AT@ 2630 @LENGTH@ 57
---------INS SimpleName@@recorder @TO@ VariableDeclarationFragment@@recorder=MethodInvocationRecorder.forProxyOf(Foo.class) @AT@ 2630 @LENGTH@ 8
---------INS MethodInvocation@@MethodInvocationRecorder.forProxyOf(Foo.class) @TO@ VariableDeclarationFragment@@recorder=MethodInvocationRecorder.forProxyOf(Foo.class) @AT@ 2641 @LENGTH@ 46
------------INS SimpleName@@Name:MethodInvocationRecorder @TO@ MethodInvocation@@MethodInvocationRecorder.forProxyOf(Foo.class) @AT@ 2641 @LENGTH@ 24
------------INS SimpleName@@MethodName:forProxyOf:[Foo.class] @TO@ MethodInvocation@@MethodInvocationRecorder.forProxyOf(Foo.class) @AT@ 2666 @LENGTH@ 21
---------------INS TypeLiteral@@Foo.class @TO@ SimpleName@@MethodName:forProxyOf:[Foo.class] @AT@ 2677 @LENGTH@ 9
---INS ExpressionStatement@@MethodInvocation:assertThat(recorder.record(Foo::getAge).getPropertyPath()).hasValue("age") @TO@ MethodDeclaration@@void, MethodName:registersLookupForPrimitiveValue,  @AT@ 2692 @LENGTH@ 75
------INS MethodInvocation@@assertThat(recorder.record(Foo::getAge).getPropertyPath()).hasValue("age") @TO@ ExpressionStatement@@MethodInvocation:assertThat(recorder.record(Foo::getAge).getPropertyPath()).hasValue("age") @AT@ 2692 @LENGTH@ 74
---------INS MethodInvocation@@MethodName:assertThat:[recorder.record(Foo::getAge).getPropertyPath()] @TO@ MethodInvocation@@assertThat(recorder.record(Foo::getAge).getPropertyPath()).hasValue("age") @AT@ 2692 @LENGTH@ 58
------------INS MethodInvocation@@recorder.record(Foo::getAge).getPropertyPath() @TO@ MethodInvocation@@MethodName:assertThat:[recorder.record(Foo::getAge).getPropertyPath()] @AT@ 2703 @LENGTH@ 46
---------------INS MethodInvocation@@MethodName:record:[Foo::getAge] @TO@ MethodInvocation@@recorder.record(Foo::getAge).getPropertyPath() @AT@ 2703 @LENGTH@ 28
---------------INS SimpleName@@Name:recorder @TO@ MethodInvocation@@recorder.record(Foo::getAge).getPropertyPath() @AT@ 2703 @LENGTH@ 8
---------------INS SimpleName@@MethodName:getPropertyPath:[] @TO@ MethodInvocation@@recorder.record(Foo::getAge).getPropertyPath() @AT@ 2732 @LENGTH@ 17
---------INS SimpleName@@MethodName:hasValue:["age"] @TO@ MethodInvocation@@assertThat(recorder.record(Foo::getAge).getPropertyPath()).hasValue("age") @AT@ 2751 @LENGTH@ 15
------------INS StringLiteral@@"age" @TO@ SimpleName@@MethodName:hasValue:["age"] @AT@ 2760 @LENGTH@ 5


UPD VariableDeclarationStatement@@final String[] ignored=new String[]{".testEmptyListSerialization",".testFullListSerialization",".testEmptyListCompatibility",".testFullListCompatibility",".testSimpleSerialization",".testCanonicalEmptyCollectionExists",".testCanonicalFullCollectionExists",".testSerializeDeserializeThenCompare"}; @TO@ final String[] ignored={".testEmptyListSerialization",".testFullListSerialization",".testEmptyListCompatibility",".testFullListCompatibility",".testSimpleSerialization",".testCanonicalEmptyCollectionExists",".testCanonicalFullCollectionExists",".testSerializeDeserializeThenCompare"}; @AT@ 48922 @LENGTH@ 412
---UPD VariableDeclarationFragment@@ignored=new String[]{".testEmptyListSerialization",".testFullListSerialization",".testEmptyListCompatibility",".testFullListCompatibility",".testSimpleSerialization",".testCanonicalEmptyCollectionExists",".testCanonicalFullCollectionExists",".testSerializeDeserializeThenCompare"} @TO@ ignored={".testEmptyListSerialization",".testFullListSerialization",".testEmptyListCompatibility",".testFullListCompatibility",".testSimpleSerialization",".testCanonicalEmptyCollectionExists",".testCanonicalFullCollectionExists",".testSerializeDeserializeThenCompare"} @AT@ 48937 @LENGTH@ 396
------DEL ArrayCreation@@new String[]{".testEmptyListSerialization",".testFullListSerialization",".testEmptyListCompatibility",".testFullListCompatibility",".testSimpleSerialization",".testCanonicalEmptyCollectionExists",".testCanonicalFullCollectionExists",".testSerializeDeserializeThenCompare"} @AT@ 48947 @LENGTH@ 386
---------DEL ArrayType@@String[] @AT@ 48951 @LENGTH@ 8
------------DEL SimpleType@@String @AT@ 48951 @LENGTH@ 6
---------DEL ArrayInitializer@@{".testEmptyListSerialization",".testFullListSerialization",".testEmptyListCompatibility",".testFullListCompatibility",".testSimpleSerialization",".testCanonicalEmptyCollectionExists",".testCanonicalFullCollectionExists",".testSerializeDeserializeThenCompare"} @AT@ 48960 @LENGTH@ 373
------INS ArrayInitializer@@{".testEmptyListSerialization",".testFullListSerialization",".testEmptyListCompatibility",".testFullListCompatibility",".testSimpleSerialization",".testCanonicalEmptyCollectionExists",".testCanonicalFullCollectionExists",".testSerializeDeserializeThenCompare"} @TO@ VariableDeclarationFragment@@ignored=new String[]{".testEmptyListSerialization",".testFullListSerialization",".testEmptyListCompatibility",".testFullListCompatibility",".testSimpleSerialization",".testCanonicalEmptyCollectionExists",".testCanonicalFullCollectionExists",".testSerializeDeserializeThenCompare"} @AT@ 48947 @LENGTH@ 373
---------MOV StringLiteral@@".testEmptyListSerialization" @TO@ ArrayInitializer@@{".testEmptyListSerialization",".testFullListSerialization",".testEmptyListCompatibility",".testFullListCompatibility",".testSimpleSerialization",".testCanonicalEmptyCollectionExists",".testCanonicalFullCollectionExists",".testSerializeDeserializeThenCompare"} @AT@ 48974 @LENGTH@ 29
---------MOV StringLiteral@@".testFullListSerialization" @TO@ ArrayInitializer@@{".testEmptyListSerialization",".testFullListSerialization",".testEmptyListCompatibility",".testFullListCompatibility",".testSimpleSerialization",".testCanonicalEmptyCollectionExists",".testCanonicalFullCollectionExists",".testSerializeDeserializeThenCompare"} @AT@ 49017 @LENGTH@ 28
---------MOV StringLiteral@@".testEmptyListCompatibility" @TO@ ArrayInitializer@@{".testEmptyListSerialization",".testFullListSerialization",".testEmptyListCompatibility",".testFullListCompatibility",".testSimpleSerialization",".testCanonicalEmptyCollectionExists",".testCanonicalFullCollectionExists",".testSerializeDeserializeThenCompare"} @AT@ 49059 @LENGTH@ 29
---------MOV StringLiteral@@".testFullListCompatibility" @TO@ ArrayInitializer@@{".testEmptyListSerialization",".testFullListSerialization",".testEmptyListCompatibility",".testFullListCompatibility",".testSimpleSerialization",".testCanonicalEmptyCollectionExists",".testCanonicalFullCollectionExists",".testSerializeDeserializeThenCompare"} @AT@ 49102 @LENGTH@ 28
---------MOV StringLiteral@@".testSimpleSerialization" @TO@ ArrayInitializer@@{".testEmptyListSerialization",".testFullListSerialization",".testEmptyListCompatibility",".testFullListCompatibility",".testSimpleSerialization",".testCanonicalEmptyCollectionExists",".testCanonicalFullCollectionExists",".testSerializeDeserializeThenCompare"} @AT@ 49144 @LENGTH@ 26
---------MOV StringLiteral@@".testCanonicalEmptyCollectionExists" @TO@ ArrayInitializer@@{".testEmptyListSerialization",".testFullListSerialization",".testEmptyListCompatibility",".testFullListCompatibility",".testSimpleSerialization",".testCanonicalEmptyCollectionExists",".testCanonicalFullCollectionExists",".testSerializeDeserializeThenCompare"} @AT@ 49184 @LENGTH@ 37
---------MOV StringLiteral@@".testCanonicalFullCollectionExists" @TO@ ArrayInitializer@@{".testEmptyListSerialization",".testFullListSerialization",".testEmptyListCompatibility",".testFullListCompatibility",".testSimpleSerialization",".testCanonicalEmptyCollectionExists",".testCanonicalFullCollectionExists",".testSerializeDeserializeThenCompare"} @AT@ 49235 @LENGTH@ 36
---------MOV StringLiteral@@".testSerializeDeserializeThenCompare" @TO@ ArrayInitializer@@{".testEmptyListSerialization",".testFullListSerialization",".testEmptyListCompatibility",".testFullListCompatibility",".testSimpleSerialization",".testCanonicalEmptyCollectionExists",".testCanonicalFullCollectionExists",".testSerializeDeserializeThenCompare"} @AT@ 49285 @LENGTH@ 38


UPD ExpressionStatement@@MethodInvocation:assertEquals(5,StreamSupport.stream(MockConsumerInterceptor.recordsCaptured.get(0).records(TOPIC).spliterator(),false).count()) @TO@ MethodInvocation:assertEquals(5,MockConsumerInterceptor.recordsCaptured.stream().flatMap(i -> StreamSupport.stream(i.records(TOPIC).spliterator(),false)).count()) @AT@ 5225 @LENGTH@ 147
---UPD MethodInvocation@@assertEquals(5,StreamSupport.stream(MockConsumerInterceptor.recordsCaptured.get(0).records(TOPIC).spliterator(),false).count()) @TO@ assertEquals(5,MockConsumerInterceptor.recordsCaptured.stream().flatMap(i -> StreamSupport.stream(i.records(TOPIC).spliterator(),false)).count()) @AT@ 5225 @LENGTH@ 146
------UPD SimpleName@@MethodName:assertEquals:[5, StreamSupport.stream(MockConsumerInterceptor.recordsCaptured.get(0).records(TOPIC).spliterator(),false).count()] @TO@ MethodName:assertEquals:[5, MockConsumerInterceptor.recordsCaptured.stream().flatMap(i -> StreamSupport.stream(i.records(TOPIC).spliterator(),false)).count()] @AT@ 5225 @LENGTH@ 146
---------UPD MethodInvocation@@StreamSupport.stream(MockConsumerInterceptor.recordsCaptured.get(0).records(TOPIC).spliterator(),false).count() @TO@ MockConsumerInterceptor.recordsCaptured.stream().flatMap(i -> StreamSupport.stream(i.records(TOPIC).spliterator(),false)).count() @AT@ 5241 @LENGTH@ 129
------------DEL MethodInvocation@@MethodName:stream:[MockConsumerInterceptor.recordsCaptured.get(0).records(TOPIC).spliterator(), false] @AT@ 5241 @LENGTH@ 104
---------------DEL MethodInvocation@@MockConsumerInterceptor.recordsCaptured.get(0).records(TOPIC).spliterator() @AT@ 5262 @LENGTH@ 75
------------------DEL MethodInvocation@@MethodName:get:[0] @AT@ 5262 @LENGTH@ 46
---------------------DEL NumberLiteral@@0 @AT@ 5306 @LENGTH@ 1
------------------DEL QualifiedName@@Name:MockConsumerInterceptor.recordsCaptured @AT@ 5262 @LENGTH@ 39
---------------DEL BooleanLiteral@@false @AT@ 5339 @LENGTH@ 5
------------INS MethodInvocation@@MethodName:stream:[] @TO@ MethodInvocation@@StreamSupport.stream(MockConsumerInterceptor.recordsCaptured.get(0).records(TOPIC).spliterator(),false).count() @AT@ 5241 @LENGTH@ 48
------------INS QualifiedName@@Name:MockConsumerInterceptor.recordsCaptured @TO@ MethodInvocation@@StreamSupport.stream(MockConsumerInterceptor.recordsCaptured.get(0).records(TOPIC).spliterator(),false).count() @AT@ 5241 @LENGTH@ 39
------------DEL SimpleName@@Name:StreamSupport @AT@ 5241 @LENGTH@ 13
------------INS MethodInvocation@@MethodName:flatMap:[i -> StreamSupport.stream(i.records(TOPIC).spliterator(),false)] @TO@ MethodInvocation@@StreamSupport.stream(MockConsumerInterceptor.recordsCaptured.get(0).records(TOPIC).spliterator(),false).count() @AT@ 5241 @LENGTH@ 139
---------------INS LambdaExpression@@i -> StreamSupport.stream(i.records(TOPIC).spliterator(),false) @TO@ MethodInvocation@@MethodName:flatMap:[i -> StreamSupport.stream(i.records(TOPIC).spliterator(),false)] @AT@ 5315 @LENGTH@ 64
------------------INS VariableDeclarationFragment@@i @TO@ LambdaExpression@@i -> StreamSupport.stream(i.records(TOPIC).spliterator(),false) @AT@ 5315 @LENGTH@ 1
---------------------INS SimpleName@@i @TO@ VariableDeclarationFragment@@i @AT@ 5315 @LENGTH@ 1
---------------------INS SimpleName@@i @TO@ VariableDeclarationFragment@@i @AT@ 5315 @LENGTH@ 1
---------------------INS SimpleName@@i @TO@ VariableDeclarationFragment@@i @AT@ 5315 @LENGTH@ 1
---------------------INS SimpleName@@i @TO@ VariableDeclarationFragment@@i @AT@ 5315 @LENGTH@ 1
---------------------INS SimpleName@@i @TO@ VariableDeclarationFragment@@i @AT@ 5315 @LENGTH@ 1
------------------INS MethodInvocation@@StreamSupport.stream(i.records(TOPIC).spliterator(),false) @TO@ LambdaExpression@@i -> StreamSupport.stream(i.records(TOPIC).spliterator(),false) @AT@ 5320 @LENGTH@ 59
---------------------INS SimpleName@@Name:StreamSupport @TO@ MethodInvocation@@StreamSupport.stream(i.records(TOPIC).spliterator(),false) @AT@ 5320 @LENGTH@ 13
---------------------INS SimpleName@@MethodName:stream:[i.records(TOPIC).spliterator(), false] @TO@ MethodInvocation@@StreamSupport.stream(i.records(TOPIC).spliterator(),false) @AT@ 5334 @LENGTH@ 45
------------------------INS MethodInvocation@@i.records(TOPIC).spliterator() @TO@ SimpleName@@MethodName:stream:[i.records(TOPIC).spliterator(), false] @AT@ 5341 @LENGTH@ 30
---------------------------MOV MethodInvocation@@MethodName:records:[TOPIC] @TO@ MethodInvocation@@i.records(TOPIC).spliterator() @AT@ 5262 @LENGTH@ 61
---------------------------MOV MethodInvocation@@MethodName:records:[TOPIC] @TO@ MethodInvocation@@i.records(TOPIC).spliterator() @AT@ 5262 @LENGTH@ 61
---------------------------MOV MethodInvocation@@MethodName:records:[TOPIC] @TO@ MethodInvocation@@i.records(TOPIC).spliterator() @AT@ 5262 @LENGTH@ 61
---------------------------MOV MethodInvocation@@MethodName:records:[TOPIC] @TO@ MethodInvocation@@i.records(TOPIC).spliterator() @AT@ 5262 @LENGTH@ 61
---------------------------MOV MethodInvocation@@MethodName:records:[TOPIC] @TO@ MethodInvocation@@i.records(TOPIC).spliterator() @AT@ 5262 @LENGTH@ 61
---------------------------MOV SimpleName@@MethodName:spliterator:[] @TO@ MethodInvocation@@i.records(TOPIC).spliterator() @AT@ 5324 @LENGTH@ 13
---------------------------MOV SimpleName@@MethodName:spliterator:[] @TO@ MethodInvocation@@i.records(TOPIC).spliterator() @AT@ 5324 @LENGTH@ 13
---------------------------MOV SimpleName@@MethodName:spliterator:[] @TO@ MethodInvocation@@i.records(TOPIC).spliterator() @AT@ 5324 @LENGTH@ 13
---------------------------MOV SimpleName@@MethodName:spliterator:[] @TO@ MethodInvocation@@i.records(TOPIC).spliterator() @AT@ 5324 @LENGTH@ 13
---------------------------MOV SimpleName@@MethodName:spliterator:[] @TO@ MethodInvocation@@i.records(TOPIC).spliterator() @AT@ 5324 @LENGTH@ 13
---------------------------INS SimpleName@@Name:i @TO@ MethodInvocation@@i.records(TOPIC).spliterator() @AT@ 5341 @LENGTH@ 1
------------------------INS BooleanLiteral@@false @TO@ SimpleName@@MethodName:stream:[i.records(TOPIC).spliterator(), false] @AT@ 5373 @LENGTH@ 5
------------INS MethodInvocation@@MethodName:flatMap:[i -> StreamSupport.stream(i.records(TOPIC).spliterator(),false)] @TO@ MethodInvocation@@StreamSupport.stream(MockConsumerInterceptor.recordsCaptured.get(0).records(TOPIC).spliterator(),false).count() @AT@ 5241 @LENGTH@ 139
---------------INS LambdaExpression@@i -> StreamSupport.stream(i.records(TOPIC).spliterator(),false) @TO@ MethodInvocation@@MethodName:flatMap:[i -> StreamSupport.stream(i.records(TOPIC).spliterator(),false)] @AT@ 5315 @LENGTH@ 64
------------------INS VariableDeclarationFragment@@i @TO@ LambdaExpression@@i -> StreamSupport.stream(i.records(TOPIC).spliterator(),false) @AT@ 5315 @LENGTH@ 1
---------------------INS SimpleName@@i @TO@ VariableDeclarationFragment@@i @AT@ 5315 @LENGTH@ 1
---------------------INS SimpleName@@i @TO@ VariableDeclarationFragment@@i @AT@ 5315 @LENGTH@ 1
---------------------INS SimpleName@@i @TO@ VariableDeclarationFragment@@i @AT@ 5315 @LENGTH@ 1
---------------------INS SimpleName@@i @TO@ VariableDeclarationFragment@@i @AT@ 5315 @LENGTH@ 1
---------------------INS SimpleName@@i @TO@ VariableDeclarationFragment@@i @AT@ 5315 @LENGTH@ 1
------------------INS MethodInvocation@@StreamSupport.stream(i.records(TOPIC).spliterator(),false) @TO@ LambdaExpression@@i -> StreamSupport.stream(i.records(TOPIC).spliterator(),false) @AT@ 5320 @LENGTH@ 59
---------------------INS SimpleName@@Name:StreamSupport @TO@ MethodInvocation@@StreamSupport.stream(i.records(TOPIC).spliterator(),false) @AT@ 5320 @LENGTH@ 13
---------------------INS SimpleName@@MethodName:stream:[i.records(TOPIC).spliterator(), false] @TO@ MethodInvocation@@StreamSupport.stream(i.records(TOPIC).spliterator(),false) @AT@ 5334 @LENGTH@ 45
------------------------INS MethodInvocation@@i.records(TOPIC).spliterator() @TO@ SimpleName@@MethodName:stream:[i.records(TOPIC).spliterator(), false] @AT@ 5341 @LENGTH@ 30
---------------------------MOV MethodInvocation@@MethodName:records:[TOPIC] @TO@ MethodInvocation@@i.records(TOPIC).spliterator() @AT@ 5262 @LENGTH@ 61
---------------------------MOV MethodInvocation@@MethodName:records:[TOPIC] @TO@ MethodInvocation@@i.records(TOPIC).spliterator() @AT@ 5262 @LENGTH@ 61
---------------------------MOV MethodInvocation@@MethodName:records:[TOPIC] @TO@ MethodInvocation@@i.records(TOPIC).spliterator() @AT@ 5262 @LENGTH@ 61
---------------------------MOV MethodInvocation@@MethodName:records:[TOPIC] @TO@ MethodInvocation@@i.records(TOPIC).spliterator() @AT@ 5262 @LENGTH@ 61
---------------------------MOV MethodInvocation@@MethodName:records:[TOPIC] @TO@ MethodInvocation@@i.records(TOPIC).spliterator() @AT@ 5262 @LENGTH@ 61
---------------------------MOV SimpleName@@MethodName:spliterator:[] @TO@ MethodInvocation@@i.records(TOPIC).spliterator() @AT@ 5324 @LENGTH@ 13
---------------------------MOV SimpleName@@MethodName:spliterator:[] @TO@ MethodInvocation@@i.records(TOPIC).spliterator() @AT@ 5324 @LENGTH@ 13
---------------------------MOV SimpleName@@MethodName:spliterator:[] @TO@ MethodInvocation@@i.records(TOPIC).spliterator() @AT@ 5324 @LENGTH@ 13
---------------------------MOV SimpleName@@MethodName:spliterator:[] @TO@ MethodInvocation@@i.records(TOPIC).spliterator() @AT@ 5324 @LENGTH@ 13
---------------------------MOV SimpleName@@MethodName:spliterator:[] @TO@ MethodInvocation@@i.records(TOPIC).spliterator() @AT@ 5324 @LENGTH@ 13
---------------------------INS SimpleName@@Name:i @TO@ MethodInvocation@@i.records(TOPIC).spliterator() @AT@ 5341 @LENGTH@ 1
------------------------INS BooleanLiteral@@false @TO@ SimpleName@@MethodName:stream:[i.records(TOPIC).spliterator(), false] @AT@ 5373 @LENGTH@ 5


INS MethodDeclaration@@public, CommandRegistration, MethodName:commandRegistration4,  @TO@ TypeDeclaration@@[@Configuration, public]FunctionCommands,  @AT@ 2496 @LENGTH@ 439
---INS Modifier@@public @TO@ MethodDeclaration@@public, CommandRegistration, MethodName:commandRegistration4,  @AT@ 2496 @LENGTH@ 6
---INS SimpleType@@CommandRegistration @TO@ MethodDeclaration@@public, CommandRegistration, MethodName:commandRegistration4,  @AT@ 2503 @LENGTH@ 19
---INS SimpleName@@MethodName:commandRegistration4 @TO@ MethodDeclaration@@public, CommandRegistration, MethodName:commandRegistration4,  @AT@ 2523 @LENGTH@ 20
---INS ReturnStatement@@MethodInvocation:CommandRegistration.builder().command("function","command4").help("function sample").group("Function Commands").withTarget().consumer(ctx -> {
  ctx.getTerminal().writer().println(String.format("hi, command is '%s'",ctx.getCommandRegistration().getCommand()));
}
).and().withOption().longNames("arg1").and().build() @TO@ MethodDeclaration@@public, CommandRegistration, MethodName:commandRegistration4,  @AT@ 2550 @LENGTH@ 382
------INS MethodInvocation@@CommandRegistration.builder().command("function","command4").help("function sample").group("Function Commands").withTarget().consumer(ctx -> {
  ctx.getTerminal().writer().println(String.format("hi, command is '%s'",ctx.getCommandRegistration().getCommand()));
}
).and().withOption().longNames("arg1").and().build() @TO@ ReturnStatement@@MethodInvocation:CommandRegistration.builder().command("function","command4").help("function sample").group("Function Commands").withTarget().consumer(ctx -> {
  ctx.getTerminal().writer().println(String.format("hi, command is '%s'",ctx.getCommandRegistration().getCommand()));
}
).and().withOption().longNames("arg1").and().build() @AT@ 2557 @LENGTH@ 374
---------INS MethodInvocation@@MethodName:and:[] @TO@ MethodInvocation@@CommandRegistration.builder().command("function","command4").help("function sample").group("Function Commands").withTarget().consumer(ctx -> {
  ctx.getTerminal().writer().println(String.format("hi, command is '%s'",ctx.getCommandRegistration().getCommand()));
}
).and().withOption().longNames("arg1").and().build() @AT@ 2557 @LENGTH@ 362
---------INS MethodInvocation@@MethodName:longNames:["arg1"] @TO@ MethodInvocation@@CommandRegistration.builder().command("function","command4").help("function sample").group("Function Commands").withTarget().consumer(ctx -> {
  ctx.getTerminal().writer().println(String.format("hi, command is '%s'",ctx.getCommandRegistration().getCommand()));
}
).and().withOption().longNames("arg1").and().build() @AT@ 2557 @LENGTH@ 351
------------INS StringLiteral@@"arg1" @TO@ MethodInvocation@@MethodName:longNames:["arg1"] @AT@ 2901 @LENGTH@ 6
---------INS MethodInvocation@@MethodName:withOption:[] @TO@ MethodInvocation@@CommandRegistration.builder().command("function","command4").help("function sample").group("Function Commands").withTarget().consumer(ctx -> {
  ctx.getTerminal().writer().println(String.format("hi, command is '%s'",ctx.getCommandRegistration().getCommand()));
}
).and().withOption().longNames("arg1").and().build() @AT@ 2557 @LENGTH@ 328
---------INS MethodInvocation@@MethodName:and:[] @TO@ MethodInvocation@@CommandRegistration.builder().command("function","command4").help("function sample").group("Function Commands").withTarget().consumer(ctx -> {
  ctx.getTerminal().writer().println(String.format("hi, command is '%s'",ctx.getCommandRegistration().getCommand()));
}
).and().withOption().longNames("arg1").and().build() @AT@ 2557 @LENGTH@ 311
---------INS MethodInvocation@@MethodName:consumer:[ctx -> {
  ctx.getTerminal().writer().println(String.format("hi, command is '%s'",ctx.getCommandRegistration().getCommand()));
}
] @TO@ MethodInvocation@@CommandRegistration.builder().command("function","command4").help("function sample").group("Function Commands").withTarget().consumer(ctx -> {
  ctx.getTerminal().writer().println(String.format("hi, command is '%s'",ctx.getCommandRegistration().getCommand()));
}
).and().withOption().longNames("arg1").and().build() @AT@ 2557 @LENGTH@ 300
------------INS LambdaExpression@@ctx -> {
  ctx.getTerminal().writer().println(String.format("hi, command is '%s'",ctx.getCommandRegistration().getCommand()));
}
 @TO@ MethodInvocation@@MethodName:consumer:[ctx -> {
  ctx.getTerminal().writer().println(String.format("hi, command is '%s'",ctx.getCommandRegistration().getCommand()));
}
] @AT@ 2713 @LENGTH@ 143
---------------INS VariableDeclarationFragment@@ctx @TO@ LambdaExpression@@ctx -> {
  ctx.getTerminal().writer().println(String.format("hi, command is '%s'",ctx.getCommandRegistration().getCommand()));
}
 @AT@ 2713 @LENGTH@ 3
------------------INS SimpleName@@ctx @TO@ VariableDeclarationFragment@@ctx @AT@ 2713 @LENGTH@ 3
---------------INS ExpressionStatement@@MethodInvocation:ctx.getTerminal().writer().println(String.format("hi, command is '%s'",ctx.getCommandRegistration().getCommand())) @TO@ LambdaExpression@@ctx -> {
  ctx.getTerminal().writer().println(String.format("hi, command is '%s'",ctx.getCommandRegistration().getCommand()));
}
 @AT@ 2727 @LENGTH@ 123
------------------INS MethodInvocation@@ctx.getTerminal().writer().println(String.format("hi, command is '%s'",ctx.getCommandRegistration().getCommand())) @TO@ ExpressionStatement@@MethodInvocation:ctx.getTerminal().writer().println(String.format("hi, command is '%s'",ctx.getCommandRegistration().getCommand())) @AT@ 2727 @LENGTH@ 122
---------------------INS MethodInvocation@@MethodName:writer:[] @TO@ MethodInvocation@@ctx.getTerminal().writer().println(String.format("hi, command is '%s'",ctx.getCommandRegistration().getCommand())) @AT@ 2727 @LENGTH@ 26
---------------------INS MethodInvocation@@MethodName:getTerminal:[] @TO@ MethodInvocation@@ctx.getTerminal().writer().println(String.format("hi, command is '%s'",ctx.getCommandRegistration().getCommand())) @AT@ 2727 @LENGTH@ 17
---------------------INS SimpleName@@Name:ctx @TO@ MethodInvocation@@ctx.getTerminal().writer().println(String.format("hi, command is '%s'",ctx.getCommandRegistration().getCommand())) @AT@ 2727 @LENGTH@ 3
---------------------INS SimpleName@@MethodName:println:[String.format("hi, command is '%s'",ctx.getCommandRegistration().getCommand())] @TO@ MethodInvocation@@ctx.getTerminal().writer().println(String.format("hi, command is '%s'",ctx.getCommandRegistration().getCommand())) @AT@ 2761 @LENGTH@ 88
------------------------INS MethodInvocation@@String.format("hi, command is '%s'",ctx.getCommandRegistration().getCommand()) @TO@ SimpleName@@MethodName:println:[String.format("hi, command is '%s'",ctx.getCommandRegistration().getCommand())] @AT@ 2769 @LENGTH@ 79
---------------------------INS SimpleName@@Name:String @TO@ MethodInvocation@@String.format("hi, command is '%s'",ctx.getCommandRegistration().getCommand()) @AT@ 2769 @LENGTH@ 6
---------------------------INS SimpleName@@MethodName:format:["hi, command is '%s'", ctx.getCommandRegistration().getCommand()] @TO@ MethodInvocation@@String.format("hi, command is '%s'",ctx.getCommandRegistration().getCommand()) @AT@ 2776 @LENGTH@ 72
------------------------------INS StringLiteral@@"hi, command is '%s'" @TO@ SimpleName@@MethodName:format:["hi, command is '%s'", ctx.getCommandRegistration().getCommand()] @AT@ 2783 @LENGTH@ 21
------------------------------INS MethodInvocation@@ctx.getCommandRegistration().getCommand() @TO@ SimpleName@@MethodName:format:["hi, command is '%s'", ctx.getCommandRegistration().getCommand()] @AT@ 2806 @LENGTH@ 41
---------------------------------INS MethodInvocation@@MethodName:getCommandRegistration:[] @TO@ MethodInvocation@@ctx.getCommandRegistration().getCommand() @AT@ 2806 @LENGTH@ 28
---------------------------------INS SimpleName@@Name:ctx @TO@ MethodInvocation@@ctx.getCommandRegistration().getCommand() @AT@ 2806 @LENGTH@ 3
---------------------------------INS SimpleName@@MethodName:getCommand:[] @TO@ MethodInvocation@@ctx.getCommandRegistration().getCommand() @AT@ 2835 @LENGTH@ 12
---------INS MethodInvocation@@MethodName:withTarget:[] @TO@ MethodInvocation@@CommandRegistration.builder().command("function","command4").help("function sample").group("Function Commands").withTarget().consumer(ctx -> {
  ctx.getTerminal().writer().println(String.format("hi, command is '%s'",ctx.getCommandRegistration().getCommand()));
}
).and().withOption().longNames("arg1").and().build() @AT@ 2557 @LENGTH@ 141
---------INS MethodInvocation@@MethodName:group:["Function Commands"] @TO@ MethodInvocation@@CommandRegistration.builder().command("function","command4").help("function sample").group("Function Commands").withTarget().consumer(ctx -> {
  ctx.getTerminal().writer().println(String.format("hi, command is '%s'",ctx.getCommandRegistration().getCommand()));
}
).and().withOption().longNames("arg1").and().build() @AT@ 2557 @LENGTH@ 124
------------INS StringLiteral@@"Function Commands" @TO@ MethodInvocation@@MethodName:group:["Function Commands"] @AT@ 2661 @LENGTH@ 19
---------INS MethodInvocation@@MethodName:help:["function sample"] @TO@ MethodInvocation@@CommandRegistration.builder().command("function","command4").help("function sample").group("Function Commands").withTarget().consumer(ctx -> {
  ctx.getTerminal().writer().println(String.format("hi, command is '%s'",ctx.getCommandRegistration().getCommand()));
}
).and().withOption().longNames("arg1").and().build() @AT@ 2557 @LENGTH@ 93
------------INS StringLiteral@@"function sample" @TO@ MethodInvocation@@MethodName:help:["function sample"] @AT@ 2632 @LENGTH@ 17
---------INS MethodInvocation@@MethodName:command:["function", "command4"] @TO@ MethodInvocation@@CommandRegistration.builder().command("function","command4").help("function sample").group("Function Commands").withTarget().consumer(ctx -> {
  ctx.getTerminal().writer().println(String.format("hi, command is '%s'",ctx.getCommandRegistration().getCommand()));
}
).and().withOption().longNames("arg1").and().build() @AT@ 2557 @LENGTH@ 65
------------INS StringLiteral@@"function" @TO@ MethodInvocation@@MethodName:command:["function", "command4"] @AT@ 2599 @LENGTH@ 10
------------INS StringLiteral@@"command4" @TO@ MethodInvocation@@MethodName:command:["function", "command4"] @AT@ 2611 @LENGTH@ 10
---------INS MethodInvocation@@MethodName:builder:[] @TO@ MethodInvocation@@CommandRegistration.builder().command("function","command4").help("function sample").group("Function Commands").withTarget().consumer(ctx -> {
  ctx.getTerminal().writer().println(String.format("hi, command is '%s'",ctx.getCommandRegistration().getCommand()));
}
).and().withOption().longNames("arg1").and().build() @AT@ 2557 @LENGTH@ 29
---------INS SimpleName@@Name:CommandRegistration @TO@ MethodInvocation@@CommandRegistration.builder().command("function","command4").help("function sample").group("Function Commands").withTarget().consumer(ctx -> {
  ctx.getTerminal().writer().println(String.format("hi, command is '%s'",ctx.getCommandRegistration().getCommand()));
}
).and().withOption().longNames("arg1").and().build() @AT@ 2557 @LENGTH@ 19
---------INS SimpleName@@MethodName:build:[] @TO@ MethodInvocation@@CommandRegistration.builder().command("function","command4").help("function sample").group("Function Commands").withTarget().consumer(ctx -> {
  ctx.getTerminal().writer().println(String.format("hi, command is '%s'",ctx.getCommandRegistration().getCommand()));
}
).and().withOption().longNames("arg1").and().build() @AT@ 2924 @LENGTH@ 7


UPD VariableDeclarationStatement@@final CommandConfiguration cmdConfig=CommandConfiguration.of(this::createClient,this::getClientConfiguration).addCommands(commands).addScripts(scripts).setJBossHome(commandBuilder.getWildFlyHome()).setFork(true).setStdout("none").setTimeout(timeout); @TO@ final CommandConfiguration cmdConfig=CommandConfiguration.of(this::createClient,this::getClientConfiguration).addCommands(commands).addScripts(scripts).setJBossHome(commandBuilder.getWildFlyHome()).setFork(true).setStdout("none").setTimeout(timeout).build(); @AT@ 10790 @LENGTH@ 403
---UPD VariableDeclarationFragment@@cmdConfig=CommandConfiguration.of(this::createClient,this::getClientConfiguration).addCommands(commands).addScripts(scripts).setJBossHome(commandBuilder.getWildFlyHome()).setFork(true).setStdout("none").setTimeout(timeout) @TO@ cmdConfig=CommandConfiguration.of(this::createClient,this::getClientConfiguration).addCommands(commands).addScripts(scripts).setJBossHome(commandBuilder.getWildFlyHome()).setFork(true).setStdout("none").setTimeout(timeout).build() @AT@ 10817 @LENGTH@ 375
------UPD MethodInvocation@@CommandConfiguration.of(this::createClient,this::getClientConfiguration).addCommands(commands).addScripts(scripts).setJBossHome(commandBuilder.getWildFlyHome()).setFork(true).setStdout("none").setTimeout(timeout) @TO@ CommandConfiguration.of(this::createClient,this::getClientConfiguration).addCommands(commands).addScripts(scripts).setJBossHome(commandBuilder.getWildFlyHome()).setFork(true).setStdout("none").setTimeout(timeout).build() @AT@ 10829 @LENGTH@ 363
---------INS MethodInvocation@@MethodName:setTimeout:[timeout] @TO@ MethodInvocation@@CommandConfiguration.of(this::createClient,this::getClientConfiguration).addCommands(commands).addScripts(scripts).setJBossHome(commandBuilder.getWildFlyHome()).setFork(true).setStdout("none").setTimeout(timeout) @AT@ 10829 @LENGTH@ 363
------------INS SimpleName@@timeout @TO@ MethodInvocation@@MethodName:setTimeout:[timeout] @AT@ 11184 @LENGTH@ 7
---------DEL SimpleName@@MethodName:setTimeout:[timeout] @AT@ 11173 @LENGTH@ 19
------------DEL SimpleName@@timeout @AT@ 11184 @LENGTH@ 7
---------INS SimpleName@@MethodName:build:[] @TO@ MethodInvocation@@CommandConfiguration.of(this::createClient,this::getClientConfiguration).addCommands(commands).addScripts(scripts).setJBossHome(commandBuilder.getWildFlyHome()).setFork(true).setStdout("none").setTimeout(timeout) @AT@ 11218 @LENGTH@ 7


UPD TryStatement@@try {  appendConf(ServerHelper.JBOSS_HOME,"domain","PROCESS_CONTROLLER_JAVA_OPTS");  appendConf(ServerHelper.JBOSS_HOME,"domain","HOST_CONTROLLER_JAVA_OPTS");  appendConf(ServerHelper.JBOSS_HOME,"standalone","JAVA_OPTS");} catch (IOException e) {  throw new UncheckedIOException("Failed to update the script config files.",e);} @TO@ try {  appendConf(ServerHelper.JBOSS_HOME,"domain","PROCESS_CONTROLLER_JAVA_OPTS");  appendConf(ServerHelper.JBOSS_HOME,"domain","HOST_CONTROLLER_JAVA_OPTS");  appendConf(ServerHelper.JBOSS_HOME,"standalone","JAVA_OPTS");  if (TestSuiteEnvironment.isWindows()) {    appendConf(ServerHelper.JBOSS_HOME,"common","JAVA_OPTS");  }} catch (IOException e) {  throw new UncheckedIOException("Failed to update the script config files.",e);} @AT@ 2404 @LENGTH@ 420
---INS IfStatement@@if (TestSuiteEnvironment.isWindows()) {  appendConf(ServerHelper.JBOSS_HOME,"common","JAVA_OPTS");} @TO@ TryStatement@@try {  appendConf(ServerHelper.JBOSS_HOME,"domain","PROCESS_CONTROLLER_JAVA_OPTS");  appendConf(ServerHelper.JBOSS_HOME,"domain","HOST_CONTROLLER_JAVA_OPTS");  appendConf(ServerHelper.JBOSS_HOME,"standalone","JAVA_OPTS");} catch (IOException e) {  throw new UncheckedIOException("Failed to update the script config files.",e);} @AT@ 2726 @LENGTH@ 137
------INS MethodInvocation@@TestSuiteEnvironment.isWindows() @TO@ IfStatement@@if (TestSuiteEnvironment.isWindows()) {  appendConf(ServerHelper.JBOSS_HOME,"common","JAVA_OPTS");} @AT@ 2730 @LENGTH@ 32
---------INS SimpleName@@Name:TestSuiteEnvironment @TO@ MethodInvocation@@TestSuiteEnvironment.isWindows() @AT@ 2730 @LENGTH@ 20
---------INS SimpleName@@MethodName:isWindows:[] @TO@ MethodInvocation@@TestSuiteEnvironment.isWindows() @AT@ 2751 @LENGTH@ 11
------INS Block@@ThenBody:{  appendConf(ServerHelper.JBOSS_HOME,"common","JAVA_OPTS");} @TO@ IfStatement@@if (TestSuiteEnvironment.isWindows()) {  appendConf(ServerHelper.JBOSS_HOME,"common","JAVA_OPTS");} @AT@ 2764 @LENGTH@ 99
---------INS ExpressionStatement@@MethodInvocation:appendConf(ServerHelper.JBOSS_HOME,"common","JAVA_OPTS") @TO@ Block@@ThenBody:{  appendConf(ServerHelper.JBOSS_HOME,"common","JAVA_OPTS");} @AT@ 2786 @LENGTH@ 59
------------INS MethodInvocation@@appendConf(ServerHelper.JBOSS_HOME,"common","JAVA_OPTS") @TO@ ExpressionStatement@@MethodInvocation:appendConf(ServerHelper.JBOSS_HOME,"common","JAVA_OPTS") @AT@ 2786 @LENGTH@ 58
---------------INS SimpleName@@MethodName:appendConf:[ServerHelper.JBOSS_HOME, "common", "JAVA_OPTS"] @TO@ MethodInvocation@@appendConf(ServerHelper.JBOSS_HOME,"common","JAVA_OPTS") @AT@ 2786 @LENGTH@ 58
------------------INS QualifiedName@@ServerHelper.JBOSS_HOME @TO@ SimpleName@@MethodName:appendConf:[ServerHelper.JBOSS_HOME, "common", "JAVA_OPTS"] @AT@ 2797 @LENGTH@ 23
---------------------INS SimpleName@@ServerHelper @TO@ QualifiedName@@ServerHelper.JBOSS_HOME @AT@ 2797 @LENGTH@ 12
---------------------INS SimpleName@@JBOSS_HOME @TO@ QualifiedName@@ServerHelper.JBOSS_HOME @AT@ 2810 @LENGTH@ 10
------------------INS StringLiteral@@"common" @TO@ SimpleName@@MethodName:appendConf:[ServerHelper.JBOSS_HOME, "common", "JAVA_OPTS"] @AT@ 2822 @LENGTH@ 8
------------------INS StringLiteral@@"JAVA_OPTS" @TO@ SimpleName@@MethodName:appendConf:[ServerHelper.JBOSS_HOME, "common", "JAVA_OPTS"] @AT@ 2832 @LENGTH@ 11


UPD ExpressionStatement@@MethodInvocation:assertFalse(map.keySet().contains(null)) @TO@ MethodInvocation:assertFalse(map.containsKey(null)) @AT@ 3803 @LENGTH@ 41
---UPD MethodInvocation@@assertFalse(map.keySet().contains(null)) @TO@ assertFalse(map.containsKey(null)) @AT@ 3803 @LENGTH@ 40
------UPD SimpleName@@MethodName:assertFalse:[map.keySet().contains(null)] @TO@ MethodName:assertFalse:[map.containsKey(null)] @AT@ 3803 @LENGTH@ 40
---------UPD MethodInvocation@@map.keySet().contains(null) @TO@ map.containsKey(null) @AT@ 3815 @LENGTH@ 27
------------DEL MethodInvocation@@MethodName:keySet:[] @AT@ 3815 @LENGTH@ 12
------------UPD SimpleName@@MethodName:contains:[null] @TO@ MethodName:containsKey:[null] @AT@ 3828 @LENGTH@ 14


MOV MethodDeclaration@@public, void, MethodName:PlusMinusMillis,  @TO@ TypeDeclaration@@[public]FileTimesTest,  @AT@ 1056 @LENGTH@ 273


UPD ExpressionStatement@@MethodInvocation:exchange.getOut().setBody("Forrest Gump: We was always taking long walks, and we was always looking for a guy named 'Charlie'") @TO@ MethodInvocation:exchange.getMessage().setBody("Forrest Gump: We was always taking long walks, and we was always looking for a guy named 'Charlie'") @AT@ 2462 @LENGTH@ 169
---UPD MethodInvocation@@exchange.getOut().setBody("Forrest Gump: We was always taking long walks, and we was always looking for a guy named 'Charlie'") @TO@ exchange.getMessage().setBody("Forrest Gump: We was always taking long walks, and we was always looking for a guy named 'Charlie'") @AT@ 2462 @LENGTH@ 168
------UPD MethodInvocation@@MethodName:getOut:[] @TO@ MethodName:getMessage:[] @AT@ 2462 @LENGTH@ 17


INS ExpressionStatement@@MethodInvocation:map.put("OFFSET","CamelOffset") @TO@ Initializer@@Initializer @AT@ 6962 @LENGTH@ 33
---INS MethodInvocation@@map.put("OFFSET","CamelOffset") @TO@ ExpressionStatement@@MethodInvocation:map.put("OFFSET","CamelOffset") @AT@ 6962 @LENGTH@ 32
------INS SimpleName@@Name:map @TO@ MethodInvocation@@map.put("OFFSET","CamelOffset") @AT@ 6962 @LENGTH@ 3
------INS SimpleName@@MethodName:put:["OFFSET", "CamelOffset"] @TO@ MethodInvocation@@map.put("OFFSET","CamelOffset") @AT@ 6966 @LENGTH@ 28
---------INS StringLiteral@@"OFFSET" @TO@ SimpleName@@MethodName:put:["OFFSET", "CamelOffset"] @AT@ 6970 @LENGTH@ 8
---------INS StringLiteral@@"CamelOffset" @TO@ SimpleName@@MethodName:put:["OFFSET", "CamelOffset"] @AT@ 6980 @LENGTH@ 13


UPD IfStatement@@if (!client) {  answer.setEndpointIdentificationAlgorithm(null);} @TO@ if (!client) {  answer=new SslContextFactory.Server();} else {  answer=new SslContextFactory.Client();} @AT@ 28727 @LENGTH@ 85
---UPD Block@@ThenBody:{  answer.setEndpointIdentificationAlgorithm(null);} @TO@ ThenBody:{  answer=new SslContextFactory.Server();} @AT@ 28740 @LENGTH@ 72
------UPD ExpressionStatement@@MethodInvocation:answer.setEndpointIdentificationAlgorithm(null) @TO@ Assignment:answer=new SslContextFactory.Server() @AT@ 28754 @LENGTH@ 48
---------INS Assignment@@answer=new SslContextFactory.Server() @TO@ ExpressionStatement@@MethodInvocation:answer.setEndpointIdentificationAlgorithm(null) @AT@ 28728 @LENGTH@ 39
------------INS SimpleName@@answer @TO@ Assignment@@answer=new SslContextFactory.Server() @AT@ 28728 @LENGTH@ 6
------------INS Operator@@= @TO@ Assignment@@answer=new SslContextFactory.Server() @AT@ 28734 @LENGTH@ 1
------------INS ClassInstanceCreation@@SslContextFactory.Server[] @TO@ Assignment@@answer=new SslContextFactory.Server() @AT@ 28737 @LENGTH@ 30
---------------INS New@@new @TO@ ClassInstanceCreation@@SslContextFactory.Server[] @AT@ 28737 @LENGTH@ 3
---------------INS SimpleType@@SslContextFactory.Server @TO@ ClassInstanceCreation@@SslContextFactory.Server[] @AT@ 28741 @LENGTH@ 24
---------DEL MethodInvocation@@answer.setEndpointIdentificationAlgorithm(null) @AT@ 28754 @LENGTH@ 47
------------DEL SimpleName@@Name:answer @AT@ 28754 @LENGTH@ 6
------------DEL SimpleName@@MethodName:setEndpointIdentificationAlgorithm:[null] @AT@ 28761 @LENGTH@ 40
---------------DEL NullLiteral@@null @AT@ 28796 @LENGTH@ 4
---INS Block@@ElseBody:{  answer=new SslContextFactory.Client();} @TO@ IfStatement@@if (!client) {  answer.setEndpointIdentificationAlgorithm(null);} @AT@ 28784 @LENGTH@ 64
------INS ExpressionStatement@@Assignment:answer=new SslContextFactory.Client() @TO@ Block@@ElseBody:{  answer=new SslContextFactory.Client();} @AT@ 28798 @LENGTH@ 40
---------INS Assignment@@answer=new SslContextFactory.Client() @TO@ ExpressionStatement@@Assignment:answer=new SslContextFactory.Client() @AT@ 28798 @LENGTH@ 39
------------INS SimpleName@@answer @TO@ Assignment@@answer=new SslContextFactory.Client() @AT@ 28798 @LENGTH@ 6
------------INS Operator@@= @TO@ Assignment@@answer=new SslContextFactory.Client() @AT@ 28804 @LENGTH@ 1
------------INS ClassInstanceCreation@@SslContextFactory.Client[] @TO@ Assignment@@answer=new SslContextFactory.Client() @AT@ 28807 @LENGTH@ 30
---------------INS New@@new @TO@ ClassInstanceCreation@@SslContextFactory.Client[] @AT@ 28807 @LENGTH@ 3
---------------INS SimpleType@@SslContextFactory.Client @TO@ ClassInstanceCreation@@SslContextFactory.Client[] @AT@ 28811 @LENGTH@ 24


UPD ExpressionStatement@@MethodInvocation:tos.putArchiveEntry(t) @TO@ MethodInvocation:assertThrows(IllegalArgumentException.class,() -> tos.putArchiveEntry(t)) @AT@ 3935 @LENGTH@ 23
---INS MethodInvocation@@assertThrows(IllegalArgumentException.class,() -> tos.putArchiveEntry(t)) @TO@ ExpressionStatement@@MethodInvocation:tos.putArchiveEntry(t) @AT@ 3919 @LENGTH@ 74
------INS SimpleName@@MethodName:assertThrows:[IllegalArgumentException.class, () -> tos.putArchiveEntry(t)] @TO@ MethodInvocation@@assertThrows(IllegalArgumentException.class,() -> tos.putArchiveEntry(t)) @AT@ 3919 @LENGTH@ 74
---------INS TypeLiteral@@IllegalArgumentException.class @TO@ SimpleName@@MethodName:assertThrows:[IllegalArgumentException.class, () -> tos.putArchiveEntry(t)] @AT@ 3932 @LENGTH@ 30
---------INS LambdaExpression@@() -> tos.putArchiveEntry(t) @TO@ SimpleName@@MethodName:assertThrows:[IllegalArgumentException.class, () -> tos.putArchiveEntry(t)] @AT@ 3964 @LENGTH@ 28
------------MOV MethodInvocation@@tos.putArchiveEntry(t) @TO@ LambdaExpression@@() -> tos.putArchiveEntry(t) @AT@ 3935 @LENGTH@ 22
------------MOV MethodInvocation@@tos.putArchiveEntry(t) @TO@ LambdaExpression@@() -> tos.putArchiveEntry(t) @AT@ 3935 @LENGTH@ 22
------------MOV MethodInvocation@@tos.putArchiveEntry(t) @TO@ LambdaExpression@@() -> tos.putArchiveEntry(t) @AT@ 3935 @LENGTH@ 22


INS MethodDeclaration@@public, void, MethodName:checkWhenHasCustomAuthorityAndAuthorizedThenReturnTrue,  @TO@ TypeDeclaration@@[@ExtendWith(MockitoExtension.class), public]AuthorityReactiveAuthorizationManagerTests,  @AT@ 3288 @LENGTH@ 390
---INS Modifier@@public @TO@ MethodDeclaration@@public, void, MethodName:checkWhenHasCustomAuthorityAndAuthorizedThenReturnTrue,  @AT@ 3288 @LENGTH@ 6
---INS PrimitiveType@@void @TO@ MethodDeclaration@@public, void, MethodName:checkWhenHasCustomAuthorityAndAuthorizedThenReturnTrue,  @AT@ 3295 @LENGTH@ 4
---INS SimpleName@@MethodName:checkWhenHasCustomAuthorityAndAuthorizedThenReturnTrue @TO@ MethodDeclaration@@public, void, MethodName:checkWhenHasCustomAuthorityAndAuthorizedThenReturnTrue,  @AT@ 3300 @LENGTH@ 54
---INS VariableDeclarationStatement@@GrantedAuthority customGrantedAuthority=() -> "ADMIN"; @TO@ MethodDeclaration@@public, void, MethodName:checkWhenHasCustomAuthorityAndAuthorizedThenReturnTrue,  @AT@ 3361 @LENGTH@ 56
------INS SimpleType@@GrantedAuthority @TO@ VariableDeclarationStatement@@GrantedAuthority customGrantedAuthority=() -> "ADMIN"; @AT@ 3361 @LENGTH@ 16
------INS VariableDeclarationFragment@@customGrantedAuthority=() -> "ADMIN" @TO@ VariableDeclarationStatement@@GrantedAuthority customGrantedAuthority=() -> "ADMIN"; @AT@ 3378 @LENGTH@ 38
---------INS SimpleName@@customGrantedAuthority @TO@ VariableDeclarationFragment@@customGrantedAuthority=() -> "ADMIN" @AT@ 3378 @LENGTH@ 22
---------INS LambdaExpression@@() -> "ADMIN" @TO@ VariableDeclarationFragment@@customGrantedAuthority=() -> "ADMIN" @AT@ 3403 @LENGTH@ 13
------------INS StringLiteral@@"ADMIN" @TO@ LambdaExpression@@() -> "ADMIN" @AT@ 3409 @LENGTH@ 7
---INS ExpressionStatement@@Assignment:this.authentication=new TestingAuthenticationToken("rob","secret",Collections.singletonList(customGrantedAuthority)) @TO@ MethodDeclaration@@public, void, MethodName:checkWhenHasCustomAuthorityAndAuthorizedThenReturnTrue,  @AT@ 3420 @LENGTH@ 125
------INS Assignment@@this.authentication=new TestingAuthenticationToken("rob","secret",Collections.singletonList(customGrantedAuthority)) @TO@ ExpressionStatement@@Assignment:this.authentication=new TestingAuthenticationToken("rob","secret",Collections.singletonList(customGrantedAuthority)) @AT@ 3420 @LENGTH@ 124
---------INS FieldAccess@@this.authentication @TO@ Assignment@@this.authentication=new TestingAuthenticationToken("rob","secret",Collections.singletonList(customGrantedAuthority)) @AT@ 3420 @LENGTH@ 19
------------INS ThisExpression@@this @TO@ FieldAccess@@this.authentication @AT@ 3420 @LENGTH@ 4
------------INS SimpleName@@authentication @TO@ FieldAccess@@this.authentication @AT@ 3425 @LENGTH@ 14
---------INS Operator@@= @TO@ Assignment@@this.authentication=new TestingAuthenticationToken("rob","secret",Collections.singletonList(customGrantedAuthority)) @AT@ 3439 @LENGTH@ 1
---------INS ClassInstanceCreation@@TestingAuthenticationToken["rob", "secret", Collections.singletonList(customGrantedAuthority)] @TO@ Assignment@@this.authentication=new TestingAuthenticationToken("rob","secret",Collections.singletonList(customGrantedAuthority)) @AT@ 3442 @LENGTH@ 102
------------INS New@@new @TO@ ClassInstanceCreation@@TestingAuthenticationToken["rob", "secret", Collections.singletonList(customGrantedAuthority)] @AT@ 3442 @LENGTH@ 3
------------INS SimpleType@@TestingAuthenticationToken @TO@ ClassInstanceCreation@@TestingAuthenticationToken["rob", "secret", Collections.singletonList(customGrantedAuthority)] @AT@ 3446 @LENGTH@ 26
------------INS StringLiteral@@"rob" @TO@ ClassInstanceCreation@@TestingAuthenticationToken["rob", "secret", Collections.singletonList(customGrantedAuthority)] @AT@ 3473 @LENGTH@ 5
------------INS StringLiteral@@"secret" @TO@ ClassInstanceCreation@@TestingAuthenticationToken["rob", "secret", Collections.singletonList(customGrantedAuthority)] @AT@ 3480 @LENGTH@ 8
------------INS MethodInvocation@@Collections.singletonList(customGrantedAuthority) @TO@ ClassInstanceCreation@@TestingAuthenticationToken["rob", "secret", Collections.singletonList(customGrantedAuthority)] @AT@ 3494 @LENGTH@ 49
---------------INS SimpleName@@Name:Collections @TO@ MethodInvocation@@Collections.singletonList(customGrantedAuthority) @AT@ 3494 @LENGTH@ 11
---------------INS SimpleName@@MethodName:singletonList:[customGrantedAuthority] @TO@ MethodInvocation@@Collections.singletonList(customGrantedAuthority) @AT@ 3506 @LENGTH@ 37
------------------INS SimpleName@@customGrantedAuthority @TO@ SimpleName@@MethodName:singletonList:[customGrantedAuthority] @AT@ 3520 @LENGTH@ 22
---INS VariableDeclarationStatement@@boolean granted=this.manager.check(Mono.just(this.authentication),null).block().isGranted(); @TO@ MethodDeclaration@@public, void, MethodName:checkWhenHasCustomAuthorityAndAuthorizedThenReturnTrue,  @AT@ 3548 @LENGTH@ 95
------INS PrimitiveType@@boolean @TO@ VariableDeclarationStatement@@boolean granted=this.manager.check(Mono.just(this.authentication),null).block().isGranted(); @AT@ 3548 @LENGTH@ 7
------INS VariableDeclarationFragment@@granted=this.manager.check(Mono.just(this.authentication),null).block().isGranted() @TO@ VariableDeclarationStatement@@boolean granted=this.manager.check(Mono.just(this.authentication),null).block().isGranted(); @AT@ 3556 @LENGTH@ 86
---------INS SimpleName@@granted @TO@ VariableDeclarationFragment@@granted=this.manager.check(Mono.just(this.authentication),null).block().isGranted() @AT@ 3556 @LENGTH@ 7
---------INS MethodInvocation@@this.manager.check(Mono.just(this.authentication),null).block().isGranted() @TO@ VariableDeclarationFragment@@granted=this.manager.check(Mono.just(this.authentication),null).block().isGranted() @AT@ 3566 @LENGTH@ 76
------------INS MethodInvocation@@MethodName:block:[] @TO@ MethodInvocation@@this.manager.check(Mono.just(this.authentication),null).block().isGranted() @AT@ 3566 @LENGTH@ 64
------------INS MethodInvocation@@MethodName:check:[Mono.just(this.authentication), null] @TO@ MethodInvocation@@this.manager.check(Mono.just(this.authentication),null).block().isGranted() @AT@ 3566 @LENGTH@ 56
---------------INS MethodInvocation@@Mono.just(this.authentication) @TO@ MethodInvocation@@MethodName:check:[Mono.just(this.authentication), null] @AT@ 3585 @LENGTH@ 30
------------------INS SimpleName@@Name:Mono @TO@ MethodInvocation@@Mono.just(this.authentication) @AT@ 3585 @LENGTH@ 4
------------------INS SimpleName@@MethodName:just:[this.authentication] @TO@ MethodInvocation@@Mono.just(this.authentication) @AT@ 3590 @LENGTH@ 25
---------------------INS FieldAccess@@this.authentication @TO@ SimpleName@@MethodName:just:[this.authentication] @AT@ 3595 @LENGTH@ 19
------------------------INS ThisExpression@@this @TO@ FieldAccess@@this.authentication @AT@ 3595 @LENGTH@ 4
------------------------INS SimpleName@@authentication @TO@ FieldAccess@@this.authentication @AT@ 3600 @LENGTH@ 14
---------------INS NullLiteral@@null @TO@ MethodInvocation@@MethodName:check:[Mono.just(this.authentication), null] @AT@ 3617 @LENGTH@ 4
------------INS FieldAccess@@this.manager @TO@ MethodInvocation@@this.manager.check(Mono.just(this.authentication),null).block().isGranted() @AT@ 3566 @LENGTH@ 12
---------------INS ThisExpression@@this @TO@ FieldAccess@@this.manager @AT@ 3566 @LENGTH@ 4
---------------INS SimpleName@@manager @TO@ FieldAccess@@this.manager @AT@ 3571 @LENGTH@ 7
------------INS SimpleName@@MethodName:isGranted:[] @TO@ MethodInvocation@@this.manager.check(Mono.just(this.authentication),null).block().isGranted() @AT@ 3631 @LENGTH@ 11
---INS ExpressionStatement@@MethodInvocation:assertThat(granted).isTrue() @TO@ MethodDeclaration@@public, void, MethodName:checkWhenHasCustomAuthorityAndAuthorizedThenReturnTrue,  @AT@ 3646 @LENGTH@ 29
------INS MethodInvocation@@assertThat(granted).isTrue() @TO@ ExpressionStatement@@MethodInvocation:assertThat(granted).isTrue() @AT@ 3646 @LENGTH@ 28
---------INS MethodInvocation@@MethodName:assertThat:[granted] @TO@ MethodInvocation@@assertThat(granted).isTrue() @AT@ 3646 @LENGTH@ 19
------------INS SimpleName@@granted @TO@ MethodInvocation@@MethodName:assertThat:[granted] @AT@ 3657 @LENGTH@ 7
---------INS SimpleName@@MethodName:isTrue:[] @TO@ MethodInvocation@@assertThat(granted).isTrue() @AT@ 3666 @LENGTH@ 8


UPD IfStatement@@if (!DownloaderHelper.alreadyOnClasspath(camelContext,gav.getArtifactId())) {  DownloaderHelper.downloadDependency(camelContext,gav.getGroupId(),gav.getArtifactId(),gav.getVersion());} @TO@ if (!DownloaderHelper.alreadyOnClasspath(camelContext,gav.getArtifactId(),gav.getVersion())) {  DownloaderHelper.downloadDependency(camelContext,gav.getGroupId(),gav.getArtifactId(),gav.getVersion());} @AT@ 1730 @LENGTH@ 252
---UPD PrefixExpression@@!DownloaderHelper.alreadyOnClasspath(camelContext,gav.getArtifactId()) @TO@ !DownloaderHelper.alreadyOnClasspath(camelContext,gav.getArtifactId(),gav.getVersion()) @AT@ 1734 @LENGTH@ 71
------UPD MethodInvocation@@DownloaderHelper.alreadyOnClasspath(camelContext,gav.getArtifactId()) @TO@ DownloaderHelper.alreadyOnClasspath(camelContext,gav.getArtifactId(),gav.getVersion()) @AT@ 1735 @LENGTH@ 70
---------UPD SimpleName@@MethodName:alreadyOnClasspath:[camelContext, gav.getArtifactId()] @TO@ MethodName:alreadyOnClasspath:[camelContext, gav.getArtifactId(), gav.getVersion()] @AT@ 1752 @LENGTH@ 53
------------INS MethodInvocation@@gav.getVersion() @TO@ SimpleName@@MethodName:alreadyOnClasspath:[camelContext, gav.getArtifactId()] @AT@ 1806 @LENGTH@ 16
---------------INS SimpleName@@Name:gav @TO@ MethodInvocation@@gav.getVersion() @AT@ 1806 @LENGTH@ 3
---------------INS SimpleName@@MethodName:getVersion:[] @TO@ MethodInvocation@@gav.getVersion() @AT@ 1810 @LENGTH@ 12


UPD IfStatement@@if (initDone.compareAndSet(false,true)) {  if (color) {    Configurator.initialize("CamelJBang","log4j2.properties");  } else {    Configurator.initialize("CamelJBang","log4j2-no-color.properties");  }} @TO@ if (INIT_DONE.compareAndSet(false,true)) {  if (color) {    Configurator.initialize("CamelJBang","log4j2.properties");  } else {    Configurator.initialize("CamelJBang","log4j2-no-color.properties");  }} @AT@ 1249 @LENGTH@ 273
---UPD MethodInvocation@@initDone.compareAndSet(false,true) @TO@ INIT_DONE.compareAndSet(false,true) @AT@ 1253 @LENGTH@ 35
------UPD SimpleName@@Name:initDone @TO@ Name:INIT_DONE @AT@ 1253 @LENGTH@ 8


UPD IfStatement@@if (session != null) {  X509Certificate cert=(X509Certificate)session.getPeerCertificates()[0];  Principal principal=cert.getSubjectDN();  log.info("Client Cert SubjectDN: {}",principal.getName());  exchange.getOut().setBody("When You Go Home, Tell Them Of Us And Say, For Your Tomorrow, We Gave Our Today.");} else {  exchange.getOut().setBody("Cannot start conversion without SSLSession");} @TO@ if (session != null) {  X509Certificate cert=(X509Certificate)session.getPeerCertificates()[0];  Principal principal=cert.getSubjectDN();  log.info("Client Cert SubjectDN: {}",principal.getName());  exchange.getMessage().setBody("When You Go Home, Tell Them Of Us And Say, For Your Tomorrow, We Gave Our Today.");} else {  exchange.getMessage().setBody("Cannot start conversion without SSLSession");} @AT@ 2653 @LENGTH@ 684
---UPD Block@@ThenBody:{  X509Certificate cert=(X509Certificate)session.getPeerCertificates()[0];  Principal principal=cert.getSubjectDN();  log.info("Client Cert SubjectDN: {}",principal.getName());  exchange.getOut().setBody("When You Go Home, Tell Them Of Us And Say, For Your Tomorrow, We Gave Our Today.");} @TO@ ThenBody:{  X509Certificate cert=(X509Certificate)session.getPeerCertificates()[0];  Principal principal=cert.getSubjectDN();  log.info("Client Cert SubjectDN: {}",principal.getName());  exchange.getMessage().setBody("When You Go Home, Tell Them Of Us And Say, For Your Tomorrow, We Gave Our Today.");} @AT@ 2674 @LENGTH@ 513
------UPD ExpressionStatement@@MethodInvocation:exchange.getOut().setBody("When You Go Home, Tell Them Of Us And Say, For Your Tomorrow, We Gave Our Today.") @TO@ MethodInvocation:exchange.getMessage().setBody("When You Go Home, Tell Them Of Us And Say, For Your Tomorrow, We Gave Our Today.") @AT@ 2998 @LENGTH@ 155
---------UPD MethodInvocation@@exchange.getOut().setBody("When You Go Home, Tell Them Of Us And Say, For Your Tomorrow, We Gave Our Today.") @TO@ exchange.getMessage().setBody("When You Go Home, Tell Them Of Us And Say, For Your Tomorrow, We Gave Our Today.") @AT@ 2998 @LENGTH@ 154
------------UPD MethodInvocation@@MethodName:getOut:[] @TO@ MethodName:getMessage:[] @AT@ 2998 @LENGTH@ 17
---UPD Block@@ElseBody:{  exchange.getOut().setBody("Cannot start conversion without SSLSession");} @TO@ ElseBody:{  exchange.getMessage().setBody("Cannot start conversion without SSLSession");} @AT@ 3193 @LENGTH@ 144
------UPD ExpressionStatement@@MethodInvocation:exchange.getOut().setBody("Cannot start conversion without SSLSession") @TO@ MethodInvocation:exchange.getMessage().setBody("Cannot start conversion without SSLSession") @AT@ 3231 @LENGTH@ 72
---------UPD MethodInvocation@@exchange.getOut().setBody("Cannot start conversion without SSLSession") @TO@ exchange.getMessage().setBody("Cannot start conversion without SSLSession") @AT@ 3231 @LENGTH@ 71
------------UPD MethodInvocation@@MethodName:getOut:[] @TO@ MethodName:getMessage:[] @AT@ 3231 @LENGTH@ 17


UPD TypeDeclaration@@[public]PackagePluginUtils,  @TO@ [public, final]PackagePluginUtils,  @AT@ 1166 @LENGTH@ 564
---INS Modifier@@final @TO@ TypeDeclaration@@[public]PackagePluginUtils,  @AT@ 1172 @LENGTH@ 5


UPD VariableDeclarationStatement@@final String[] testData=new String[]{"a","b","c"}; @TO@ final String[] testData={"a","b","c"}; @AT@ 2888 @LENGTH@ 57
---UPD VariableDeclarationFragment@@testData=new String[]{"a","b","c"} @TO@ testData={"a","b","c"} @AT@ 2903 @LENGTH@ 41
------DEL ArrayCreation@@new String[]{"a","b","c"} @AT@ 2914 @LENGTH@ 30
---------DEL ArrayType@@String[] @AT@ 2918 @LENGTH@ 8
------------DEL SimpleType@@String @AT@ 2918 @LENGTH@ 6
---------DEL ArrayInitializer@@{"a","b","c"} @AT@ 2927 @LENGTH@ 17
------INS ArrayInitializer@@{"a","b","c"} @TO@ VariableDeclarationFragment@@testData=new String[]{"a","b","c"} @AT@ 2914 @LENGTH@ 17
---------MOV StringLiteral@@"a" @TO@ ArrayInitializer@@{"a","b","c"} @AT@ 2929 @LENGTH@ 3
---------MOV StringLiteral@@"b" @TO@ ArrayInitializer@@{"a","b","c"} @AT@ 2934 @LENGTH@ 3
---------MOV StringLiteral@@"c" @TO@ ArrayInitializer@@{"a","b","c"} @AT@ 2939 @LENGTH@ 3


DEL FieldDeclaration@@public, final, ExpectedException, [thrown=ExpectedException.none()] @AT@ 2185 @LENGTH@ 65
---DEL Modifier@@public @AT@ 2185 @LENGTH@ 6
---DEL Modifier@@final @AT@ 2192 @LENGTH@ 5
---DEL SimpleType@@ExpectedException @AT@ 2198 @LENGTH@ 17
---DEL VariableDeclarationFragment@@thrown=ExpectedException.none() @AT@ 2216 @LENGTH@ 33
------DEL SimpleName@@thrown @AT@ 2216 @LENGTH@ 6
------DEL MethodInvocation@@ExpectedException.none() @AT@ 2225 @LENGTH@ 24
---------DEL SimpleName@@Name:ExpectedException @AT@ 2225 @LENGTH@ 17
---------DEL SimpleName@@MethodName:none:[] @AT@ 2243 @LENGTH@ 6


UPD IfStatement@@if (!preserveAbsolutePath) {  final String osname=System.getProperty("os.name").toLowerCase(Locale.ENGLISH);  if (osname.startsWith("windows")) {    if (fileName.length() > 2) {      final char ch1=fileName.charAt(0);      final char ch2=fileName.charAt(1);      if (ch2 == ':' && (ch1 >= 'a' && ch1 <= 'z' || ch1 >= 'A' && ch1 <= 'Z')) {        fileName=fileName.substring(2);      }    }  } else   if (osname.contains("netware")) {    final int colon=fileName.indexOf(':');    if (colon != -1) {      fileName=fileName.substring(colon + 1);    }  }} @TO@ if (property != null) {  final String osName=property.toLowerCase(Locale.ROOT);  if (osName.startsWith("windows")) {    if (fileName.length() > 2) {      final char ch1=fileName.charAt(0);      final char ch2=fileName.charAt(1);      if (ch2 == ':' && (ch1 >= 'a' && ch1 <= 'z' || ch1 >= 'A' && ch1 <= 'Z')) {        fileName=fileName.substring(2);      }    }  } else   if (osName.contains("netware")) {    final int colon=fileName.indexOf(':');    if (colon != -1) {      fileName=fileName.substring(colon + 1);    }  }} @AT@ 57663 @LENGTH@ 939


UPD ExpressionStatement@@MethodInvocation:assertThat(matcher.matches(createRequest("/paskos/blah/"))).isTrue() @TO@ MethodInvocation:assertThat(matcher.matches(createRequest("/paskos/blah/"))).isFalse() @AT@ 4130 @LENGTH@ 69
---UPD MethodInvocation@@assertThat(matcher.matches(createRequest("/paskos/blah/"))).isTrue() @TO@ assertThat(matcher.matches(createRequest("/paskos/blah/"))).isFalse() @AT@ 4130 @LENGTH@ 68
------UPD SimpleName@@MethodName:isTrue:[] @TO@ MethodName:isFalse:[] @AT@ 4190 @LENGTH@ 8


UPD ExpressionStatement@@MethodInvocation:component.createEndpoint("aws2-sqs://MyQueue?secretKey=yyy").start() @TO@ MethodInvocation:component.createEndpoint("aws2-sqs://MyQueue?secretKey=yyy") @AT@ 13069 @LENGTH@ 69
---UPD MethodInvocation@@component.createEndpoint("aws2-sqs://MyQueue?secretKey=yyy").start() @TO@ component.createEndpoint("aws2-sqs://MyQueue?secretKey=yyy") @AT@ 13069 @LENGTH@ 68
------DEL MethodInvocation@@MethodName:createEndpoint:["aws2-sqs://MyQueue?secretKey=yyy"] @AT@ 13069 @LENGTH@ 60
---------DEL StringLiteral@@"aws2-sqs://MyQueue?secretKey=yyy" @AT@ 13094 @LENGTH@ 34
------INS SimpleName@@MethodName:createEndpoint:["aws2-sqs://MyQueue?secretKey=yyy"] @TO@ MethodInvocation@@component.createEndpoint("aws2-sqs://MyQueue?secretKey=yyy").start() @AT@ 13079 @LENGTH@ 50
---------INS StringLiteral@@"aws2-sqs://MyQueue?secretKey=yyy" @TO@ SimpleName@@MethodName:createEndpoint:["aws2-sqs://MyQueue?secretKey=yyy"] @AT@ 13094 @LENGTH@ 34
------DEL SimpleName@@MethodName:start:[] @AT@ 13130 @LENGTH@ 7


UPD ReturnStatement@@MethodInvocation:String.format("rabbitmq:%s:%d/%s?routingKey=%s&username=%s&password=%s&skipQueueDeclare=true",connectionProperties.hostname(),connectionProperties.port(),EXCHANGE,route,connectionProperties.username(),connectionProperties.password()) @TO@ MethodInvocation:String.format("rabbitmq:%s:%d/%s?routingKey=%s&username=%s&password=%s&skipQueueDeclare=true&skipQueueBind=true",connectionProperties.hostname(),connectionProperties.port(),EXCHANGE,route,connectionProperties.username(),connectionProperties.password()) @AT@ 3689 @LENGTH@ 279
---UPD MethodInvocation@@String.format("rabbitmq:%s:%d/%s?routingKey=%s&username=%s&password=%s&skipQueueDeclare=true",connectionProperties.hostname(),connectionProperties.port(),EXCHANGE,route,connectionProperties.username(),connectionProperties.password()) @TO@ String.format("rabbitmq:%s:%d/%s?routingKey=%s&username=%s&password=%s&skipQueueDeclare=true&skipQueueBind=true",connectionProperties.hostname(),connectionProperties.port(),EXCHANGE,route,connectionProperties.username(),connectionProperties.password()) @AT@ 3696 @LENGTH@ 271
------UPD SimpleName@@MethodName:format:["rabbitmq:%s:%d/%s?routingKey=%s&username=%s&password=%s&skipQueueDeclare=true", connectionProperties.hostname(), connectionProperties.port(), EXCHANGE, route, connectionProperties.username(), connectionProperties.password()] @TO@ MethodName:format:["rabbitmq:%s:%d/%s?routingKey=%s&username=%s&password=%s&skipQueueDeclare=true&skipQueueBind=true", connectionProperties.hostname(), connectionProperties.port(), EXCHANGE, route, connectionProperties.username(), connectionProperties.password()] @AT@ 3703 @LENGTH@ 264
---------UPD StringLiteral@@"rabbitmq:%s:%d/%s?routingKey=%s&username=%s&password=%s&skipQueueDeclare=true" @TO@ "rabbitmq:%s:%d/%s?routingKey=%s&username=%s&password=%s&skipQueueDeclare=true&skipQueueBind=true" @AT@ 3710 @LENGTH@ 79


UPD TryStatement@@try (OutputStream out=new Pack200CompressorOutputStream(Files.newOutputStream(output.toPath()),mode);ArchiveOutputStream os=ArchiveStreamFactory.DEFAULT.createArchiveOutputStream("jar",out)){  os.putArchiveEntry(new ZipArchiveEntry("testdata/test1.xml"));  IOUtils.copy(Files.newInputStream(file1.toPath()),os);  os.closeArchiveEntry();  os.putArchiveEntry(new ZipArchiveEntry("testdata/test2.xml"));  IOUtils.copy(Files.newInputStream(file2.toPath()),os);  os.closeArchiveEntry();}  @TO@ try (OutputStream out=new Pack200CompressorOutputStream(Files.newOutputStream(output.toPath()),mode);ArchiveOutputStream os=ArchiveStreamFactory.DEFAULT.createArchiveOutputStream("jar",out)){  os.putArchiveEntry(new ZipArchiveEntry("testdata/test1.xml"));  try (InputStream inputStream=Files.newInputStream(file1.toPath())){    IOUtils.copy(inputStream,os);  }   os.closeArchiveEntry();  os.putArchiveEntry(new ZipArchiveEntry("testdata/test2.xml"));  try (InputStream inputStream=Files.newInputStream(file2.toPath())){    IOUtils.copy(inputStream,os);  }   os.closeArchiveEntry();}  @AT@ 4035 @LENGTH@ 582
---INS TryStatement@@try (InputStream inputStream=Files.newInputStream(file1.toPath())){  IOUtils.copy(inputStream,os);}  @TO@ TryStatement@@try (OutputStream out=new Pack200CompressorOutputStream(Files.newOutputStream(output.toPath()),mode);ArchiveOutputStream os=ArchiveStreamFactory.DEFAULT.createArchiveOutputStream("jar",out)){  os.putArchiveEntry(new ZipArchiveEntry("testdata/test1.xml"));  IOUtils.copy(Files.newInputStream(file1.toPath()),os);  os.closeArchiveEntry();  os.putArchiveEntry(new ZipArchiveEntry("testdata/test2.xml"));  IOUtils.copy(Files.newInputStream(file2.toPath()),os);  os.closeArchiveEntry();}  @AT@ 4336 @LENGTH@ 131
------MOV ExpressionStatement@@MethodInvocation:IOUtils.copy(Files.newInputStream(file1.toPath()),os) @TO@ TryStatement@@try (InputStream inputStream=Files.newInputStream(file1.toPath())){  IOUtils.copy(inputStream,os);}  @AT@ 4336 @LENGTH@ 55
------INS VariableDeclarationExpression@@InputStream inputStream=Files.newInputStream(file1.toPath()) @TO@ TryStatement@@try (InputStream inputStream=Files.newInputStream(file1.toPath())){  IOUtils.copy(inputStream,os);}  @AT@ 4341 @LENGTH@ 62
---------INS SimpleType@@InputStream @TO@ VariableDeclarationExpression@@InputStream inputStream=Files.newInputStream(file1.toPath()) @AT@ 4341 @LENGTH@ 11
---------INS VariableDeclarationFragment@@inputStream=Files.newInputStream(file1.toPath()) @TO@ VariableDeclarationExpression@@InputStream inputStream=Files.newInputStream(file1.toPath()) @AT@ 4353 @LENGTH@ 50
------------MOV MethodInvocation@@Files.newInputStream(file1.toPath()) @TO@ VariableDeclarationFragment@@inputStream=Files.newInputStream(file1.toPath()) @AT@ 4349 @LENGTH@ 36
------------INS SimpleName@@inputStream @TO@ VariableDeclarationFragment@@inputStream=Files.newInputStream(file1.toPath()) @AT@ 4353 @LENGTH@ 11
---UPD ExpressionStatement@@MethodInvocation:IOUtils.copy(Files.newInputStream(file1.toPath()),os) @TO@ MethodInvocation:IOUtils.copy(inputStream,os) @AT@ 4336 @LENGTH@ 55
---UPD ExpressionStatement@@MethodInvocation:IOUtils.copy(Files.newInputStream(file2.toPath()),os) @TO@ MethodInvocation:IOUtils.copy(inputStream,os) @AT@ 4516 @LENGTH@ 55
---INS TryStatement@@try (InputStream inputStream=Files.newInputStream(file2.toPath())){  IOUtils.copy(inputStream,os);}  @TO@ TryStatement@@try (OutputStream out=new Pack200CompressorOutputStream(Files.newOutputStream(output.toPath()),mode);ArchiveOutputStream os=ArchiveStreamFactory.DEFAULT.createArchiveOutputStream("jar",out)){  os.putArchiveEntry(new ZipArchiveEntry("testdata/test1.xml"));  IOUtils.copy(Files.newInputStream(file1.toPath()),os);  os.closeArchiveEntry();  os.putArchiveEntry(new ZipArchiveEntry("testdata/test2.xml"));  IOUtils.copy(Files.newInputStream(file2.toPath()),os);  os.closeArchiveEntry();}  @AT@ 4592 @LENGTH@ 131
------MOV ExpressionStatement@@MethodInvocation:IOUtils.copy(Files.newInputStream(file2.toPath()),os) @TO@ TryStatement@@try (InputStream inputStream=Files.newInputStream(file2.toPath())){  IOUtils.copy(inputStream,os);}  @AT@ 4516 @LENGTH@ 55
---------UPD MethodInvocation@@IOUtils.copy(Files.newInputStream(file2.toPath()),os) @TO@ IOUtils.copy(inputStream,os) @AT@ 4516 @LENGTH@ 54
------------UPD SimpleName@@MethodName:copy:[Files.newInputStream(file2.toPath()), os] @TO@ MethodName:copy:[inputStream, os] @AT@ 4524 @LENGTH@ 46
---------------INS SimpleName@@inputStream @TO@ SimpleName@@MethodName:copy:[Files.newInputStream(file2.toPath()), os] @AT@ 4692 @LENGTH@ 11
------INS VariableDeclarationExpression@@InputStream inputStream=Files.newInputStream(file2.toPath()) @TO@ TryStatement@@try (InputStream inputStream=Files.newInputStream(file2.toPath())){  IOUtils.copy(inputStream,os);}  @AT@ 4597 @LENGTH@ 62
---------INS SimpleType@@InputStream @TO@ VariableDeclarationExpression@@InputStream inputStream=Files.newInputStream(file2.toPath()) @AT@ 4597 @LENGTH@ 11
---------INS VariableDeclarationFragment@@inputStream=Files.newInputStream(file2.toPath()) @TO@ VariableDeclarationExpression@@InputStream inputStream=Files.newInputStream(file2.toPath()) @AT@ 4609 @LENGTH@ 50
------------MOV MethodInvocation@@Files.newInputStream(file2.toPath()) @TO@ VariableDeclarationFragment@@inputStream=Files.newInputStream(file2.toPath()) @AT@ 4529 @LENGTH@ 36
------------INS SimpleName@@inputStream @TO@ VariableDeclarationFragment@@inputStream=Files.newInputStream(file2.toPath()) @AT@ 4609 @LENGTH@ 11


UPD ExpressionStatement@@MethodInvocation:exchange.getOut().setBody("Forrest Gump: We was always taking long walks, and we was always looking for a guy named 'Charlie'") @TO@ MethodInvocation:exchange.getMessage().setBody("Forrest Gump: We was always taking long walks, and we was always looking for a guy named 'Charlie'") @AT@ 2418 @LENGTH@ 161
---UPD MethodInvocation@@exchange.getOut().setBody("Forrest Gump: We was always taking long walks, and we was always looking for a guy named 'Charlie'") @TO@ exchange.getMessage().setBody("Forrest Gump: We was always taking long walks, and we was always looking for a guy named 'Charlie'") @AT@ 2418 @LENGTH@ 160
------UPD MethodInvocation@@MethodName:getOut:[] @TO@ MethodName:getMessage:[] @AT@ 2418 @LENGTH@ 17


UPD ExpressionStatement@@MethodInvocation:assertThat(response,is(EXPECTED_PROPERTY_VALUE)) @TO@ MethodInvocation:MatcherAssert.assertThat(response,is(EXPECTED_PROPERTY_VALUE)) @AT@ 2078 @LENGTH@ 50
---UPD MethodInvocation@@assertThat(response,is(EXPECTED_PROPERTY_VALUE)) @TO@ MatcherAssert.assertThat(response,is(EXPECTED_PROPERTY_VALUE)) @AT@ 2078 @LENGTH@ 49
------INS SimpleName@@Name:MatcherAssert @TO@ MethodInvocation@@assertThat(response,is(EXPECTED_PROPERTY_VALUE)) @AT@ 2113 @LENGTH@ 13


UPD ExpressionStatement@@MethodInvocation:remote.deliver(serverSession,outMessage) @TO@ MethodInvocation:remote.deliver(serverSession,outMessage,Promise.noop()) @AT@ 4101 @LENGTH@ 42
---UPD MethodInvocation@@remote.deliver(serverSession,outMessage) @TO@ remote.deliver(serverSession,outMessage,Promise.noop()) @AT@ 4101 @LENGTH@ 41
------UPD SimpleName@@MethodName:deliver:[serverSession, outMessage] @TO@ MethodName:deliver:[serverSession, outMessage, Promise.noop()] @AT@ 4108 @LENGTH@ 34
---------INS MethodInvocation@@Promise.noop() @TO@ SimpleName@@MethodName:deliver:[serverSession, outMessage] @AT@ 4177 @LENGTH@ 14
------------INS SimpleName@@Name:Promise @TO@ MethodInvocation@@Promise.noop() @AT@ 4177 @LENGTH@ 7
------------INS SimpleName@@MethodName:noop:[] @TO@ MethodInvocation@@Promise.noop() @AT@ 4185 @LENGTH@ 6


INS MethodDeclaration@@public, void, MethodName:autoselect, @ShellOption(defaultValue="Field3") String defaultValue,  @TO@ TypeDeclaration@@[@ShellComponent, public]ComponentFlowCommands, AbstractShellComponent @AT@ 3316 @LENGTH@ 533
---INS Modifier@@public @TO@ MethodDeclaration@@public, void, MethodName:autoselect, @ShellOption(defaultValue="Field3") String defaultValue,  @AT@ 3316 @LENGTH@ 6
---INS PrimitiveType@@void @TO@ MethodDeclaration@@public, void, MethodName:autoselect, @ShellOption(defaultValue="Field3") String defaultValue,  @AT@ 3323 @LENGTH@ 4
---INS SimpleName@@MethodName:autoselect @TO@ MethodDeclaration@@public, void, MethodName:autoselect, @ShellOption(defaultValue="Field3") String defaultValue,  @AT@ 3328 @LENGTH@ 10
---INS SingleVariableDeclaration@@@ShellOption(defaultValue="Field3") String defaultValue @TO@ MethodDeclaration@@public, void, MethodName:autoselect, @ShellOption(defaultValue="Field3") String defaultValue,  @AT@ 3343 @LENGTH@ 57
------INS SimpleType@@String @TO@ SingleVariableDeclaration@@@ShellOption(defaultValue="Field3") String defaultValue @AT@ 3381 @LENGTH@ 6
------INS SimpleName@@defaultValue @TO@ SingleVariableDeclaration@@@ShellOption(defaultValue="Field3") String defaultValue @AT@ 3388 @LENGTH@ 12
---INS VariableDeclarationStatement@@Map<String,String> single1SelectItems=IntStream.range(1,10).boxed().collect(Collectors.toMap(i -> "Field" + i,i -> "field" + i)); @TO@ MethodDeclaration@@public, void, MethodName:autoselect, @ShellOption(defaultValue="Field3") String defaultValue,  @AT@ 3409 @LENGTH@ 142
------INS ParameterizedType@@Map<String,String> @TO@ VariableDeclarationStatement@@Map<String,String> single1SelectItems=IntStream.range(1,10).boxed().collect(Collectors.toMap(i -> "Field" + i,i -> "field" + i)); @AT@ 3409 @LENGTH@ 19
---------INS SimpleType@@Map @TO@ ParameterizedType@@Map<String,String> @AT@ 3409 @LENGTH@ 3
---------INS SimpleType@@String @TO@ ParameterizedType@@Map<String,String> @AT@ 3413 @LENGTH@ 6
---------INS SimpleType@@String @TO@ ParameterizedType@@Map<String,String> @AT@ 3421 @LENGTH@ 6
------INS VariableDeclarationFragment@@single1SelectItems=IntStream.range(1,10).boxed().collect(Collectors.toMap(i -> "Field" + i,i -> "field" + i)) @TO@ VariableDeclarationStatement@@Map<String,String> single1SelectItems=IntStream.range(1,10).boxed().collect(Collectors.toMap(i -> "Field" + i,i -> "field" + i)); @AT@ 3429 @LENGTH@ 121
---------INS SimpleName@@single1SelectItems @TO@ VariableDeclarationFragment@@single1SelectItems=IntStream.range(1,10).boxed().collect(Collectors.toMap(i -> "Field" + i,i -> "field" + i)) @AT@ 3429 @LENGTH@ 18
---------INS MethodInvocation@@IntStream.range(1,10).boxed().collect(Collectors.toMap(i -> "Field" + i,i -> "field" + i)) @TO@ VariableDeclarationFragment@@single1SelectItems=IntStream.range(1,10).boxed().collect(Collectors.toMap(i -> "Field" + i,i -> "field" + i)) @AT@ 3450 @LENGTH@ 100
------------INS MethodInvocation@@MethodName:boxed:[] @TO@ MethodInvocation@@IntStream.range(1,10).boxed().collect(Collectors.toMap(i -> "Field" + i,i -> "field" + i)) @AT@ 3450 @LENGTH@ 34
------------INS MethodInvocation@@MethodName:range:[1, 10] @TO@ MethodInvocation@@IntStream.range(1,10).boxed().collect(Collectors.toMap(i -> "Field" + i,i -> "field" + i)) @AT@ 3450 @LENGTH@ 22
---------------INS NumberLiteral@@1 @TO@ MethodInvocation@@MethodName:range:[1, 10] @AT@ 3466 @LENGTH@ 1
---------------INS NumberLiteral@@10 @TO@ MethodInvocation@@MethodName:range:[1, 10] @AT@ 3469 @LENGTH@ 2
------------INS SimpleName@@Name:IntStream @TO@ MethodInvocation@@IntStream.range(1,10).boxed().collect(Collectors.toMap(i -> "Field" + i,i -> "field" + i)) @AT@ 3450 @LENGTH@ 9
------------INS SimpleName@@MethodName:collect:[Collectors.toMap(i -> "Field" + i,i -> "field" + i)] @TO@ MethodInvocation@@IntStream.range(1,10).boxed().collect(Collectors.toMap(i -> "Field" + i,i -> "field" + i)) @AT@ 3489 @LENGTH@ 61
---------------INS MethodInvocation@@Collectors.toMap(i -> "Field" + i,i -> "field" + i) @TO@ SimpleName@@MethodName:collect:[Collectors.toMap(i -> "Field" + i,i -> "field" + i)] @AT@ 3497 @LENGTH@ 52
------------------INS SimpleName@@Name:Collectors @TO@ MethodInvocation@@Collectors.toMap(i -> "Field" + i,i -> "field" + i) @AT@ 3497 @LENGTH@ 10
------------------INS SimpleName@@MethodName:toMap:[i -> "Field" + i, i -> "field" + i] @TO@ MethodInvocation@@Collectors.toMap(i -> "Field" + i,i -> "field" + i) @AT@ 3508 @LENGTH@ 41
---------------------INS LambdaExpression@@i -> "Field" + i @TO@ SimpleName@@MethodName:toMap:[i -> "Field" + i, i -> "field" + i] @AT@ 3514 @LENGTH@ 16
------------------------INS VariableDeclarationFragment@@i @TO@ LambdaExpression@@i -> "Field" + i @AT@ 3514 @LENGTH@ 1
---------------------------INS SimpleName@@i @TO@ VariableDeclarationFragment@@i @AT@ 3514 @LENGTH@ 1
------------------------INS InfixExpression@@"Field" + i @TO@ LambdaExpression@@i -> "Field" + i @AT@ 3519 @LENGTH@ 11
---------------------------INS StringLiteral@@"Field" @TO@ InfixExpression@@"Field" + i @AT@ 3519 @LENGTH@ 7
---------------------------INS Operator@@+ @TO@ InfixExpression@@"Field" + i @AT@ 3526 @LENGTH@ 1
---------------------------INS SimpleName@@i @TO@ InfixExpression@@"Field" + i @AT@ 3529 @LENGTH@ 1
---------------------INS LambdaExpression@@i -> "field" + i @TO@ SimpleName@@MethodName:toMap:[i -> "Field" + i, i -> "field" + i] @AT@ 3532 @LENGTH@ 16
------------------------INS VariableDeclarationFragment@@i @TO@ LambdaExpression@@i -> "field" + i @AT@ 3532 @LENGTH@ 1
---------------------------INS SimpleName@@i @TO@ VariableDeclarationFragment@@i @AT@ 3532 @LENGTH@ 1
------------------------INS InfixExpression@@"field" + i @TO@ LambdaExpression@@i -> "field" + i @AT@ 3537 @LENGTH@ 11
---------------------------INS StringLiteral@@"field" @TO@ InfixExpression@@"field" + i @AT@ 3537 @LENGTH@ 7
---------------------------INS Operator@@+ @TO@ InfixExpression@@"field" + i @AT@ 3544 @LENGTH@ 1
---------------------------INS SimpleName@@i @TO@ InfixExpression@@"field" + i @AT@ 3547 @LENGTH@ 1
---INS VariableDeclarationStatement@@ComponentFlow flow=componentFlowBuilder.clone().reset().withSingleItemSelector("single1").name("Single1").selectItems(single1SelectItems).defaultSelect(defaultValue).sort((o1,o2) -> o1.getName().compareTo(o2.getName())).and().build(); @TO@ MethodDeclaration@@public, void, MethodName:autoselect, @ShellOption(defaultValue="Field3") String defaultValue,  @AT@ 3555 @LENGTH@ 277
------INS SimpleType@@ComponentFlow @TO@ VariableDeclarationStatement@@ComponentFlow flow=componentFlowBuilder.clone().reset().withSingleItemSelector("single1").name("Single1").selectItems(single1SelectItems).defaultSelect(defaultValue).sort((o1,o2) -> o1.getName().compareTo(o2.getName())).and().build(); @AT@ 3555 @LENGTH@ 13
------INS VariableDeclarationFragment@@flow=componentFlowBuilder.clone().reset().withSingleItemSelector("single1").name("Single1").selectItems(single1SelectItems).defaultSelect(defaultValue).sort((o1,o2) -> o1.getName().compareTo(o2.getName())).and().build() @TO@ VariableDeclarationStatement@@ComponentFlow flow=componentFlowBuilder.clone().reset().withSingleItemSelector("single1").name("Single1").selectItems(single1SelectItems).defaultSelect(defaultValue).sort((o1,o2) -> o1.getName().compareTo(o2.getName())).and().build(); @AT@ 3569 @LENGTH@ 262
---------INS SimpleName@@flow @TO@ VariableDeclarationFragment@@flow=componentFlowBuilder.clone().reset().withSingleItemSelector("single1").name("Single1").selectItems(single1SelectItems).defaultSelect(defaultValue).sort((o1,o2) -> o1.getName().compareTo(o2.getName())).and().build() @AT@ 3569 @LENGTH@ 4
---------INS MethodInvocation@@componentFlowBuilder.clone().reset().withSingleItemSelector("single1").name("Single1").selectItems(single1SelectItems).defaultSelect(defaultValue).sort((o1,o2) -> o1.getName().compareTo(o2.getName())).and().build() @TO@ VariableDeclarationFragment@@flow=componentFlowBuilder.clone().reset().withSingleItemSelector("single1").name("Single1").selectItems(single1SelectItems).defaultSelect(defaultValue).sort((o1,o2) -> o1.getName().compareTo(o2.getName())).and().build() @AT@ 3576 @LENGTH@ 255
------------INS MethodInvocation@@MethodName:and:[] @TO@ MethodInvocation@@componentFlowBuilder.clone().reset().withSingleItemSelector("single1").name("Single1").selectItems(single1SelectItems).defaultSelect(defaultValue).sort((o1,o2) -> o1.getName().compareTo(o2.getName())).and().build() @AT@ 3576 @LENGTH@ 242
------------INS MethodInvocation@@MethodName:sort:[(o1,o2) -> o1.getName().compareTo(o2.getName())] @TO@ MethodInvocation@@componentFlowBuilder.clone().reset().withSingleItemSelector("single1").name("Single1").selectItems(single1SelectItems).defaultSelect(defaultValue).sort((o1,o2) -> o1.getName().compareTo(o2.getName())).and().build() @AT@ 3576 @LENGTH@ 230
---------------INS LambdaExpression@@(o1,o2) -> o1.getName().compareTo(o2.getName()) @TO@ MethodInvocation@@MethodName:sort:[(o1,o2) -> o1.getName().compareTo(o2.getName())] @AT@ 3757 @LENGTH@ 48
------------------INS VariableDeclarationFragment@@o1 @TO@ LambdaExpression@@(o1,o2) -> o1.getName().compareTo(o2.getName()) @AT@ 3758 @LENGTH@ 2
---------------------INS SimpleName@@o1 @TO@ VariableDeclarationFragment@@o1 @AT@ 3758 @LENGTH@ 2
------------------INS VariableDeclarationFragment@@o2 @TO@ LambdaExpression@@(o1,o2) -> o1.getName().compareTo(o2.getName()) @AT@ 3762 @LENGTH@ 2
---------------------INS SimpleName@@o2 @TO@ VariableDeclarationFragment@@o2 @AT@ 3762 @LENGTH@ 2
------------------INS MethodInvocation@@o1.getName().compareTo(o2.getName()) @TO@ LambdaExpression@@(o1,o2) -> o1.getName().compareTo(o2.getName()) @AT@ 3769 @LENGTH@ 36
---------------------INS MethodInvocation@@MethodName:getName:[] @TO@ MethodInvocation@@o1.getName().compareTo(o2.getName()) @AT@ 3769 @LENGTH@ 12
---------------------INS SimpleName@@Name:o1 @TO@ MethodInvocation@@o1.getName().compareTo(o2.getName()) @AT@ 3769 @LENGTH@ 2
---------------------INS SimpleName@@MethodName:compareTo:[o2.getName()] @TO@ MethodInvocation@@o1.getName().compareTo(o2.getName()) @AT@ 3782 @LENGTH@ 23
------------------------INS MethodInvocation@@o2.getName() @TO@ SimpleName@@MethodName:compareTo:[o2.getName()] @AT@ 3792 @LENGTH@ 12
---------------------------INS SimpleName@@Name:o2 @TO@ MethodInvocation@@o2.getName() @AT@ 3792 @LENGTH@ 2
---------------------------INS SimpleName@@MethodName:getName:[] @TO@ MethodInvocation@@o2.getName() @AT@ 3795 @LENGTH@ 9
------------INS MethodInvocation@@MethodName:defaultSelect:[defaultValue] @TO@ MethodInvocation@@componentFlowBuilder.clone().reset().withSingleItemSelector("single1").name("Single1").selectItems(single1SelectItems).defaultSelect(defaultValue).sort((o1,o2) -> o1.getName().compareTo(o2.getName())).and().build() @AT@ 3576 @LENGTH@ 169
---------------INS SimpleName@@defaultValue @TO@ MethodInvocation@@MethodName:defaultSelect:[defaultValue] @AT@ 3732 @LENGTH@ 12
------------INS MethodInvocation@@MethodName:selectItems:[single1SelectItems] @TO@ MethodInvocation@@componentFlowBuilder.clone().reset().withSingleItemSelector("single1").name("Single1").selectItems(single1SelectItems).defaultSelect(defaultValue).sort((o1,o2) -> o1.getName().compareTo(o2.getName())).and().build() @AT@ 3576 @LENGTH@ 135
---------------INS SimpleName@@single1SelectItems @TO@ MethodInvocation@@MethodName:selectItems:[single1SelectItems] @AT@ 3692 @LENGTH@ 18
------------INS MethodInvocation@@MethodName:name:["Single1"] @TO@ MethodInvocation@@componentFlowBuilder.clone().reset().withSingleItemSelector("single1").name("Single1").selectItems(single1SelectItems).defaultSelect(defaultValue).sort((o1,o2) -> o1.getName().compareTo(o2.getName())).and().build() @AT@ 3576 @LENGTH@ 97
---------------INS StringLiteral@@"Single1" @TO@ MethodInvocation@@MethodName:name:["Single1"] @AT@ 3663 @LENGTH@ 9
------------INS MethodInvocation@@MethodName:withSingleItemSelector:["single1"] @TO@ MethodInvocation@@componentFlowBuilder.clone().reset().withSingleItemSelector("single1").name("Single1").selectItems(single1SelectItems).defaultSelect(defaultValue).sort((o1,o2) -> o1.getName().compareTo(o2.getName())).and().build() @AT@ 3576 @LENGTH@ 75
---------------INS StringLiteral@@"single1" @TO@ MethodInvocation@@MethodName:withSingleItemSelector:["single1"] @AT@ 3641 @LENGTH@ 9
------------INS MethodInvocation@@MethodName:reset:[] @TO@ MethodInvocation@@componentFlowBuilder.clone().reset().withSingleItemSelector("single1").name("Single1").selectItems(single1SelectItems).defaultSelect(defaultValue).sort((o1,o2) -> o1.getName().compareTo(o2.getName())).and().build() @AT@ 3576 @LENGTH@ 36
------------INS MethodInvocation@@MethodName:clone:[] @TO@ MethodInvocation@@componentFlowBuilder.clone().reset().withSingleItemSelector("single1").name("Single1").selectItems(single1SelectItems).defaultSelect(defaultValue).sort((o1,o2) -> o1.getName().compareTo(o2.getName())).and().build() @AT@ 3576 @LENGTH@ 28
------------INS SimpleName@@Name:componentFlowBuilder @TO@ MethodInvocation@@componentFlowBuilder.clone().reset().withSingleItemSelector("single1").name("Single1").selectItems(single1SelectItems).defaultSelect(defaultValue).sort((o1,o2) -> o1.getName().compareTo(o2.getName())).and().build() @AT@ 3576 @LENGTH@ 20
------------INS SimpleName@@MethodName:build:[] @TO@ MethodInvocation@@componentFlowBuilder.clone().reset().withSingleItemSelector("single1").name("Single1").selectItems(single1SelectItems).defaultSelect(defaultValue).sort((o1,o2) -> o1.getName().compareTo(o2.getName())).and().build() @AT@ 3824 @LENGTH@ 7
---INS ExpressionStatement@@MethodInvocation:flow.run() @TO@ MethodDeclaration@@public, void, MethodName:autoselect, @ShellOption(defaultValue="Field3") String defaultValue,  @AT@ 3835 @LENGTH@ 11
------INS MethodInvocation@@flow.run() @TO@ ExpressionStatement@@MethodInvocation:flow.run() @AT@ 3835 @LENGTH@ 10
---------INS SimpleName@@Name:flow @TO@ MethodInvocation@@flow.run() @AT@ 3835 @LENGTH@ 4
---------INS SimpleName@@MethodName:run:[] @TO@ MethodInvocation@@flow.run() @AT@ 3840 @LENGTH@ 5


UPD ExpressionStatement@@Assignment:this.queue=new LinkedBlockingQueue<Delivery>(prefetchCount) @TO@ Assignment:this.queue=new LinkedBlockingQueue<Delivery>(queues.length == 0 ? prefetchCount : prefetchCount * queues.length) @AT@ 12482 @LENGTH@ 62
---UPD Assignment@@this.queue=new LinkedBlockingQueue<Delivery>(prefetchCount) @TO@ this.queue=new LinkedBlockingQueue<Delivery>(queues.length == 0 ? prefetchCount : prefetchCount * queues.length) @AT@ 12482 @LENGTH@ 61
------UPD ClassInstanceCreation@@LinkedBlockingQueue<Delivery>[prefetchCount] @TO@ LinkedBlockingQueue<Delivery>[queues.length == 0 ? prefetchCount : prefetchCount * queues.length] @AT@ 12495 @LENGTH@ 48
---------INS ConditionalExpression@@queues.length == 0 ? prefetchCount : prefetchCount * queues.length @TO@ ClassInstanceCreation@@LinkedBlockingQueue<Delivery>[prefetchCount] @AT@ 12529 @LENGTH@ 66
------------INS InfixExpression@@queues.length == 0 @TO@ ConditionalExpression@@queues.length == 0 ? prefetchCount : prefetchCount * queues.length @AT@ 12529 @LENGTH@ 18
---------------INS QualifiedName@@queues.length @TO@ InfixExpression@@queues.length == 0 @AT@ 12529 @LENGTH@ 13
------------------INS SimpleName@@queues @TO@ QualifiedName@@queues.length @AT@ 12529 @LENGTH@ 6
------------------INS SimpleName@@length @TO@ QualifiedName@@queues.length @AT@ 12536 @LENGTH@ 6
---------------INS Operator@@== @TO@ InfixExpression@@queues.length == 0 @AT@ 12542 @LENGTH@ 2
---------------INS NumberLiteral@@0 @TO@ InfixExpression@@queues.length == 0 @AT@ 12546 @LENGTH@ 1
------------INS SimpleName@@prefetchCount @TO@ ConditionalExpression@@queues.length == 0 ? prefetchCount : prefetchCount * queues.length @AT@ 12550 @LENGTH@ 13
------------INS InfixExpression@@prefetchCount * queues.length @TO@ ConditionalExpression@@queues.length == 0 ? prefetchCount : prefetchCount * queues.length @AT@ 12566 @LENGTH@ 29
---------------INS SimpleName@@prefetchCount @TO@ InfixExpression@@prefetchCount * queues.length @AT@ 12566 @LENGTH@ 13
---------------INS Operator@@* @TO@ InfixExpression@@prefetchCount * queues.length @AT@ 12579 @LENGTH@ 1
---------------INS QualifiedName@@queues.length @TO@ InfixExpression@@prefetchCount * queues.length @AT@ 12582 @LENGTH@ 13
------------------INS SimpleName@@queues @TO@ QualifiedName@@queues.length @AT@ 12582 @LENGTH@ 6
------------------INS SimpleName@@length @TO@ QualifiedName@@queues.length @AT@ 12589 @LENGTH@ 6
---------DEL SimpleName@@prefetchCount @AT@ 12529 @LENGTH@ 13


UPD ExpressionStatement@@MethodInvocation:assertFalse(map.keySet().contains(null)) @TO@ MethodInvocation:assertFalse(map.containsKey(null)) @AT@ 2963 @LENGTH@ 41
---UPD MethodInvocation@@assertFalse(map.keySet().contains(null)) @TO@ assertFalse(map.containsKey(null)) @AT@ 2963 @LENGTH@ 40
------UPD SimpleName@@MethodName:assertFalse:[map.keySet().contains(null)] @TO@ MethodName:assertFalse:[map.containsKey(null)] @AT@ 2963 @LENGTH@ 40
---------UPD MethodInvocation@@map.keySet().contains(null) @TO@ map.containsKey(null) @AT@ 2975 @LENGTH@ 27
------------DEL MethodInvocation@@MethodName:keySet:[] @AT@ 2975 @LENGTH@ 12
------------UPD SimpleName@@MethodName:contains:[null] @TO@ MethodName:containsKey:[null] @AT@ 2988 @LENGTH@ 14


UPD ExpressionStatement@@MethodInvocation:mock.expectedBodyReceived().body().isNotNull() @TO@ MethodInvocation:mock.message(0).body().isNotNull() @AT@ 4654 @LENGTH@ 47
---UPD MethodInvocation@@mock.expectedBodyReceived().body().isNotNull() @TO@ mock.message(0).body().isNotNull() @AT@ 4654 @LENGTH@ 46
------UPD MethodInvocation@@MethodName:expectedBodyReceived:[] @TO@ MethodName:message:[0] @AT@ 4654 @LENGTH@ 27
---------INS NumberLiteral@@0 @TO@ MethodInvocation@@MethodName:expectedBodyReceived:[] @AT@ 4667 @LENGTH@ 1


UPD ExpressionStatement@@MethodInvocation:jedisConnectionFactory.setHostName(host) @TO@ MethodInvocation:jedisConnectionFactory.getStandaloneConfiguration().setHostName(host) @AT@ 4799 @LENGTH@ 41
---UPD MethodInvocation@@jedisConnectionFactory.setHostName(host) @TO@ jedisConnectionFactory.getStandaloneConfiguration().setHostName(host) @AT@ 4799 @LENGTH@ 40
------INS MethodInvocation@@MethodName:getStandaloneConfiguration:[] @TO@ MethodInvocation@@jedisConnectionFactory.setHostName(host) @AT@ 4799 @LENGTH@ 51


UPD ExpressionStatement@@Assignment:result=catalog.validateEndpointProperties("dataformat:zipdeflater:marshal?compressionLevel=2",true) @TO@ Assignment:result=catalog.validateEndpointProperties("dataformat:zipDeflater:marshal?compressionLevel=2",true) @AT@ 30489 @LENGTH@ 103
---UPD Assignment@@result=catalog.validateEndpointProperties("dataformat:zipdeflater:marshal?compressionLevel=2",true) @TO@ result=catalog.validateEndpointProperties("dataformat:zipDeflater:marshal?compressionLevel=2",true) @AT@ 30489 @LENGTH@ 102
------UPD MethodInvocation@@catalog.validateEndpointProperties("dataformat:zipdeflater:marshal?compressionLevel=2",true) @TO@ catalog.validateEndpointProperties("dataformat:zipDeflater:marshal?compressionLevel=2",true) @AT@ 30498 @LENGTH@ 93
---------UPD SimpleName@@MethodName:validateEndpointProperties:["dataformat:zipdeflater:marshal?compressionLevel=2", true] @TO@ MethodName:validateEndpointProperties:["dataformat:zipDeflater:marshal?compressionLevel=2", true] @AT@ 30506 @LENGTH@ 85
------------UPD StringLiteral@@"dataformat:zipdeflater:marshal?compressionLevel=2" @TO@ "dataformat:zipDeflater:marshal?compressionLevel=2" @AT@ 30533 @LENGTH@ 51


UPD TypeDeclaration@@[public]ChannelProxy, [Channel] @TO@ [public]ChannelProxy, [Channel, RawTargetAccess] @AT@ 949 @LENGTH@ 616
---INS SimpleType@@RawTargetAccess @TO@ TypeDeclaration@@[public]ChannelProxy, [Channel] @AT@ 1074 @LENGTH@ 15


UPD IfStatement@@if (exchange.hasOut()) {  exchange.getOut().setHeader(Exchange.CONTENT_TYPE,"application/xml");} else {  exchange.getIn().setHeader(Exchange.CONTENT_TYPE,"application/xml");} @TO@ if (contentTypeHeader) {  exchange.getMessage().setHeader(Exchange.CONTENT_TYPE,"application/xml");} @AT@ 7157 @LENGTH@ 248


UPD VariableDeclarationStatement@@InputStream stream=org.apache.camel.util.ObjectHelper.loadResourceAsStream(rulesDir.concat("/").concat(href)); @TO@ InputStream stream=org.apache.camel.util.ObjectHelper.loadResourceAsStream(rulesDir.concat("/").concat(href),getClass().getClassLoader()); @AT@ 1676 @LENGTH@ 128
---UPD VariableDeclarationFragment@@stream=org.apache.camel.util.ObjectHelper.loadResourceAsStream(rulesDir.concat("/").concat(href)) @TO@ stream=org.apache.camel.util.ObjectHelper.loadResourceAsStream(rulesDir.concat("/").concat(href),getClass().getClassLoader()) @AT@ 1688 @LENGTH@ 115
------UPD MethodInvocation@@org.apache.camel.util.ObjectHelper.loadResourceAsStream(rulesDir.concat("/").concat(href)) @TO@ org.apache.camel.util.ObjectHelper.loadResourceAsStream(rulesDir.concat("/").concat(href),getClass().getClassLoader()) @AT@ 1713 @LENGTH@ 90
---------UPD SimpleName@@MethodName:loadResourceAsStream:[rulesDir.concat("/").concat(href)] @TO@ MethodName:loadResourceAsStream:[rulesDir.concat("/").concat(href), getClass().getClassLoader()] @AT@ 1748 @LENGTH@ 55
------------INS MethodInvocation@@getClass().getClassLoader() @TO@ SimpleName@@MethodName:loadResourceAsStream:[rulesDir.concat("/").concat(href)] @AT@ 1870 @LENGTH@ 27
---------------INS MethodInvocation@@MethodName:getClass:[] @TO@ MethodInvocation@@getClass().getClassLoader() @AT@ 1870 @LENGTH@ 10
---------------INS SimpleName@@MethodName:getClassLoader:[] @TO@ MethodInvocation@@getClass().getClassLoader() @AT@ 1881 @LENGTH@ 16


INS IfStatement@@if (commonElementType == null) {  return Flux.error(() -> new IllegalArgumentException("Could not determine a common element of an heterogeneous collection."));} @TO@ MethodDeclaration@@public, Flux<R>, T, R, MethodName:saveAllAs, Iterable<T> instances, Class<R> resultType,  @AT@ 20097 @LENGTH@ 172
---INS InfixExpression@@commonElementType == null @TO@ IfStatement@@if (commonElementType == null) {  return Flux.error(() -> new IllegalArgumentException("Could not determine a common element of an heterogeneous collection."));} @AT@ 20101 @LENGTH@ 25
------INS SimpleName@@commonElementType @TO@ InfixExpression@@commonElementType == null @AT@ 20101 @LENGTH@ 17
------INS Operator@@== @TO@ InfixExpression@@commonElementType == null @AT@ 20118 @LENGTH@ 2
------INS NullLiteral@@null @TO@ InfixExpression@@commonElementType == null @AT@ 20122 @LENGTH@ 4
---INS Block@@ThenBody:{  return Flux.error(() -> new IllegalArgumentException("Could not determine a common element of an heterogeneous collection."));} @TO@ IfStatement@@if (commonElementType == null) {  return Flux.error(() -> new IllegalArgumentException("Could not determine a common element of an heterogeneous collection."));} @AT@ 20128 @LENGTH@ 141
------INS ReturnStatement@@MethodInvocation:Flux.error(() -> new IllegalArgumentException("Could not determine a common element of an heterogeneous collection.")) @TO@ Block@@ThenBody:{  return Flux.error(() -> new IllegalArgumentException("Could not determine a common element of an heterogeneous collection."));} @AT@ 20133 @LENGTH@ 132
---------INS MethodInvocation@@Flux.error(() -> new IllegalArgumentException("Could not determine a common element of an heterogeneous collection.")) @TO@ ReturnStatement@@MethodInvocation:Flux.error(() -> new IllegalArgumentException("Could not determine a common element of an heterogeneous collection.")) @AT@ 20140 @LENGTH@ 124
------------INS SimpleName@@Name:Flux @TO@ MethodInvocation@@Flux.error(() -> new IllegalArgumentException("Could not determine a common element of an heterogeneous collection.")) @AT@ 20140 @LENGTH@ 4
------------INS SimpleName@@MethodName:error:[() -> new IllegalArgumentException("Could not determine a common element of an heterogeneous collection.")] @TO@ MethodInvocation@@Flux.error(() -> new IllegalArgumentException("Could not determine a common element of an heterogeneous collection.")) @AT@ 20145 @LENGTH@ 119
---------------INS LambdaExpression@@() -> new IllegalArgumentException("Could not determine a common element of an heterogeneous collection.") @TO@ SimpleName@@MethodName:error:[() -> new IllegalArgumentException("Could not determine a common element of an heterogeneous collection.")] @AT@ 20151 @LENGTH@ 112
------------------INS ClassInstanceCreation@@IllegalArgumentException["Could not determine a common element of an heterogeneous collection."] @TO@ LambdaExpression@@() -> new IllegalArgumentException("Could not determine a common element of an heterogeneous collection.") @AT@ 20157 @LENGTH@ 106
---------------------INS New@@new @TO@ ClassInstanceCreation@@IllegalArgumentException["Could not determine a common element of an heterogeneous collection."] @AT@ 20157 @LENGTH@ 3
---------------------INS SimpleType@@IllegalArgumentException @TO@ ClassInstanceCreation@@IllegalArgumentException["Could not determine a common element of an heterogeneous collection."] @AT@ 20161 @LENGTH@ 24
---------------------INS StringLiteral@@"Could not determine a common element of an heterogeneous collection." @TO@ ClassInstanceCreation@@IllegalArgumentException["Could not determine a common element of an heterogeneous collection."] @AT@ 20192 @LENGTH@ 70


UPD VariableDeclarationStatement@@OrcRecordUpdater.KeyIndexBuilder indexBuilder=new OrcRecordUpdater.KeyIndexBuilder("test"); @TO@ OrcRecordUpdater.KeyIndexBuilder indexBuilder=new OrcRecordUpdater.KeyIndexBuilder(); @AT@ 175816 @LENGTH@ 93
---UPD VariableDeclarationFragment@@indexBuilder=new OrcRecordUpdater.KeyIndexBuilder("test") @TO@ indexBuilder=new OrcRecordUpdater.KeyIndexBuilder() @AT@ 175849 @LENGTH@ 59
------UPD ClassInstanceCreation@@OrcRecordUpdater.KeyIndexBuilder["test"] @TO@ OrcRecordUpdater.KeyIndexBuilder[] @AT@ 175864 @LENGTH@ 44
---------DEL StringLiteral@@"test" @AT@ 175901 @LENGTH@ 6


INS MethodDeclaration@@public, void, MethodName:hasAuthorityWhenUserHasCustomAuthorityThenGrantedDecision,  @TO@ TypeDeclaration@@[public]AuthorityAuthorizationManagerTests,  @AT@ 4963 @LENGTH@ 503
---INS Modifier@@public @TO@ MethodDeclaration@@public, void, MethodName:hasAuthorityWhenUserHasCustomAuthorityThenGrantedDecision,  @AT@ 4963 @LENGTH@ 6
---INS PrimitiveType@@void @TO@ MethodDeclaration@@public, void, MethodName:hasAuthorityWhenUserHasCustomAuthorityThenGrantedDecision,  @AT@ 4970 @LENGTH@ 4
---INS SimpleName@@MethodName:hasAuthorityWhenUserHasCustomAuthorityThenGrantedDecision @TO@ MethodDeclaration@@public, void, MethodName:hasAuthorityWhenUserHasCustomAuthorityThenGrantedDecision,  @AT@ 4975 @LENGTH@ 57
---INS VariableDeclarationStatement@@AuthorityAuthorizationManager<Object> manager=AuthorityAuthorizationManager.hasAuthority("ADMIN"); @TO@ MethodDeclaration@@public, void, MethodName:hasAuthorityWhenUserHasCustomAuthorityThenGrantedDecision,  @AT@ 5039 @LENGTH@ 100
------INS ParameterizedType@@AuthorityAuthorizationManager<Object> @TO@ VariableDeclarationStatement@@AuthorityAuthorizationManager<Object> manager=AuthorityAuthorizationManager.hasAuthority("ADMIN"); @AT@ 5039 @LENGTH@ 37
---------INS SimpleType@@AuthorityAuthorizationManager @TO@ ParameterizedType@@AuthorityAuthorizationManager<Object> @AT@ 5039 @LENGTH@ 29
---------INS SimpleType@@Object @TO@ ParameterizedType@@AuthorityAuthorizationManager<Object> @AT@ 5069 @LENGTH@ 6
------INS VariableDeclarationFragment@@manager=AuthorityAuthorizationManager.hasAuthority("ADMIN") @TO@ VariableDeclarationStatement@@AuthorityAuthorizationManager<Object> manager=AuthorityAuthorizationManager.hasAuthority("ADMIN"); @AT@ 5077 @LENGTH@ 61
---------INS SimpleName@@manager @TO@ VariableDeclarationFragment@@manager=AuthorityAuthorizationManager.hasAuthority("ADMIN") @AT@ 5077 @LENGTH@ 7
---------INS MethodInvocation@@AuthorityAuthorizationManager.hasAuthority("ADMIN") @TO@ VariableDeclarationFragment@@manager=AuthorityAuthorizationManager.hasAuthority("ADMIN") @AT@ 5087 @LENGTH@ 51
------------INS SimpleName@@Name:AuthorityAuthorizationManager @TO@ MethodInvocation@@AuthorityAuthorizationManager.hasAuthority("ADMIN") @AT@ 5087 @LENGTH@ 29
------------INS SimpleName@@MethodName:hasAuthority:["ADMIN"] @TO@ MethodInvocation@@AuthorityAuthorizationManager.hasAuthority("ADMIN") @AT@ 5117 @LENGTH@ 21
---------------INS StringLiteral@@"ADMIN" @TO@ SimpleName@@MethodName:hasAuthority:["ADMIN"] @AT@ 5130 @LENGTH@ 7
---INS VariableDeclarationStatement@@GrantedAuthority customGrantedAuthority=() -> "ADMIN"; @TO@ MethodDeclaration@@public, void, MethodName:hasAuthorityWhenUserHasCustomAuthorityThenGrantedDecision,  @AT@ 5142 @LENGTH@ 56
------INS SimpleType@@GrantedAuthority @TO@ VariableDeclarationStatement@@GrantedAuthority customGrantedAuthority=() -> "ADMIN"; @AT@ 5142 @LENGTH@ 16
------INS VariableDeclarationFragment@@customGrantedAuthority=() -> "ADMIN" @TO@ VariableDeclarationStatement@@GrantedAuthority customGrantedAuthority=() -> "ADMIN"; @AT@ 5159 @LENGTH@ 38
---------INS SimpleName@@customGrantedAuthority @TO@ VariableDeclarationFragment@@customGrantedAuthority=() -> "ADMIN" @AT@ 5159 @LENGTH@ 22
---------INS LambdaExpression@@() -> "ADMIN" @TO@ VariableDeclarationFragment@@customGrantedAuthority=() -> "ADMIN" @AT@ 5184 @LENGTH@ 13
------------INS StringLiteral@@"ADMIN" @TO@ LambdaExpression@@() -> "ADMIN" @AT@ 5190 @LENGTH@ 7
---INS VariableDeclarationStatement@@Supplier<Authentication> authentication=() -> new TestingAuthenticationToken("user","password",Collections.singletonList(customGrantedAuthority)); @TO@ MethodDeclaration@@public, void, MethodName:hasAuthorityWhenUserHasCustomAuthorityThenGrantedDecision,  @AT@ 5202 @LENGTH@ 154
------INS ParameterizedType@@Supplier<Authentication> @TO@ VariableDeclarationStatement@@Supplier<Authentication> authentication=() -> new TestingAuthenticationToken("user","password",Collections.singletonList(customGrantedAuthority)); @AT@ 5202 @LENGTH@ 24
---------INS SimpleType@@Supplier @TO@ ParameterizedType@@Supplier<Authentication> @AT@ 5202 @LENGTH@ 8
---------INS SimpleType@@Authentication @TO@ ParameterizedType@@Supplier<Authentication> @AT@ 5211 @LENGTH@ 14
------INS VariableDeclarationFragment@@authentication=() -> new TestingAuthenticationToken("user","password",Collections.singletonList(customGrantedAuthority)) @TO@ VariableDeclarationStatement@@Supplier<Authentication> authentication=() -> new TestingAuthenticationToken("user","password",Collections.singletonList(customGrantedAuthority)); @AT@ 5227 @LENGTH@ 128
---------INS SimpleName@@authentication @TO@ VariableDeclarationFragment@@authentication=() -> new TestingAuthenticationToken("user","password",Collections.singletonList(customGrantedAuthority)) @AT@ 5227 @LENGTH@ 14
---------INS LambdaExpression@@() -> new TestingAuthenticationToken("user","password",Collections.singletonList(customGrantedAuthority)) @TO@ VariableDeclarationFragment@@authentication=() -> new TestingAuthenticationToken("user","password",Collections.singletonList(customGrantedAuthority)) @AT@ 5244 @LENGTH@ 111
------------INS ClassInstanceCreation@@TestingAuthenticationToken["user", "password", Collections.singletonList(customGrantedAuthority)] @TO@ LambdaExpression@@() -> new TestingAuthenticationToken("user","password",Collections.singletonList(customGrantedAuthority)) @AT@ 5250 @LENGTH@ 105
---------------INS New@@new @TO@ ClassInstanceCreation@@TestingAuthenticationToken["user", "password", Collections.singletonList(customGrantedAuthority)] @AT@ 5250 @LENGTH@ 3
---------------INS SimpleType@@TestingAuthenticationToken @TO@ ClassInstanceCreation@@TestingAuthenticationToken["user", "password", Collections.singletonList(customGrantedAuthority)] @AT@ 5254 @LENGTH@ 26
---------------INS StringLiteral@@"user" @TO@ ClassInstanceCreation@@TestingAuthenticationToken["user", "password", Collections.singletonList(customGrantedAuthority)] @AT@ 5281 @LENGTH@ 6
---------------INS StringLiteral@@"password" @TO@ ClassInstanceCreation@@TestingAuthenticationToken["user", "password", Collections.singletonList(customGrantedAuthority)] @AT@ 5289 @LENGTH@ 10
---------------INS MethodInvocation@@Collections.singletonList(customGrantedAuthority) @TO@ ClassInstanceCreation@@TestingAuthenticationToken["user", "password", Collections.singletonList(customGrantedAuthority)] @AT@ 5305 @LENGTH@ 49
------------------INS SimpleName@@Name:Collections @TO@ MethodInvocation@@Collections.singletonList(customGrantedAuthority) @AT@ 5305 @LENGTH@ 11
------------------INS SimpleName@@MethodName:singletonList:[customGrantedAuthority] @TO@ MethodInvocation@@Collections.singletonList(customGrantedAuthority) @AT@ 5317 @LENGTH@ 37
---------------------INS SimpleName@@customGrantedAuthority @TO@ SimpleName@@MethodName:singletonList:[customGrantedAuthority] @AT@ 5331 @LENGTH@ 22
---INS VariableDeclarationStatement@@Object object=new Object(); @TO@ MethodDeclaration@@public, void, MethodName:hasAuthorityWhenUserHasCustomAuthorityThenGrantedDecision,  @AT@ 5359 @LENGTH@ 29
------INS SimpleType@@Object @TO@ VariableDeclarationStatement@@Object object=new Object(); @AT@ 5359 @LENGTH@ 6
------INS VariableDeclarationFragment@@object=new Object() @TO@ VariableDeclarationStatement@@Object object=new Object(); @AT@ 5366 @LENGTH@ 21
---------INS SimpleName@@object @TO@ VariableDeclarationFragment@@object=new Object() @AT@ 5366 @LENGTH@ 6
---------INS ClassInstanceCreation@@Object[] @TO@ VariableDeclarationFragment@@object=new Object() @AT@ 5375 @LENGTH@ 12
------------INS New@@new @TO@ ClassInstanceCreation@@Object[] @AT@ 5375 @LENGTH@ 3
------------INS SimpleType@@Object @TO@ ClassInstanceCreation@@Object[] @AT@ 5379 @LENGTH@ 6
---INS ExpressionStatement@@MethodInvocation:assertThat(manager.check(authentication,object).isGranted()).isTrue() @TO@ MethodDeclaration@@public, void, MethodName:hasAuthorityWhenUserHasCustomAuthorityThenGrantedDecision,  @AT@ 5392 @LENGTH@ 71
------INS MethodInvocation@@assertThat(manager.check(authentication,object).isGranted()).isTrue() @TO@ ExpressionStatement@@MethodInvocation:assertThat(manager.check(authentication,object).isGranted()).isTrue() @AT@ 5392 @LENGTH@ 70
---------INS MethodInvocation@@MethodName:assertThat:[manager.check(authentication,object).isGranted()] @TO@ MethodInvocation@@assertThat(manager.check(authentication,object).isGranted()).isTrue() @AT@ 5392 @LENGTH@ 61
------------INS MethodInvocation@@manager.check(authentication,object).isGranted() @TO@ MethodInvocation@@MethodName:assertThat:[manager.check(authentication,object).isGranted()] @AT@ 5403 @LENGTH@ 49
---------------INS MethodInvocation@@MethodName:check:[authentication, object] @TO@ MethodInvocation@@manager.check(authentication,object).isGranted() @AT@ 5403 @LENGTH@ 37
------------------INS SimpleName@@authentication @TO@ MethodInvocation@@MethodName:check:[authentication, object] @AT@ 5417 @LENGTH@ 14
------------------INS SimpleName@@object @TO@ MethodInvocation@@MethodName:check:[authentication, object] @AT@ 5433 @LENGTH@ 6
---------------INS SimpleName@@Name:manager @TO@ MethodInvocation@@manager.check(authentication,object).isGranted() @AT@ 5403 @LENGTH@ 7
---------------INS SimpleName@@MethodName:isGranted:[] @TO@ MethodInvocation@@manager.check(authentication,object).isGranted() @AT@ 5441 @LENGTH@ 11
---------INS SimpleName@@MethodName:isTrue:[] @TO@ MethodInvocation@@assertThat(manager.check(authentication,object).isGranted()).isTrue() @AT@ 5454 @LENGTH@ 8


UPD TryStatement@@try {  recoverFailedCompactions(false);  int abortedThreshold=HiveConf.getIntVar(conf,HiveConf.ConfVars.HIVE_COMPACTOR_ABORTEDTXN_THRESHOLD);  long abortedTimeThreshold=HiveConf.getTimeVar(conf,HiveConf.ConfVars.HIVE_COMPACTOR_ABORTEDTXN_TIME_THRESHOLD,TimeUnit.MILLISECONDS);  Counter failuresCounter=Metrics.getOrCreateCounter(MetricsConstants.COMPACTION_INITIATOR_FAILURE_COUNTER);  do {    PerfLogger perfLogger=PerfLogger.getPerfLogger(false);    long startedAt=-1;    long prevStart;    TxnStore.MutexAPI.LockHandle handle=null;    try {      handle=txnHandler.getMutexAPI().acquireLock(TxnStore.MUTEX_KEY.Initiator.name());      startedAt=System.currentTimeMillis();      prevStart=handle.getLastUpdateTime();      long compactionInterval=(prevStart <= 0) ? prevStart : (startedAt - prevStart) / 1000;      if (metricsEnabled) {        perfLogger.perfLogBegin(CLASS_NAME,MetricsConstants.COMPACTION_INITIATOR_CYCLE);        stopCycleUpdater();        startCycleUpdater(HiveConf.getTimeVar(conf,HiveConf.ConfVars.HIVE_COMPACTOR_INITIATOR_DURATION_UPDATE_INTERVAL,TimeUnit.MILLISECONDS),new InitiatorCycleUpdater(MetricsConstants.COMPACTION_INITIATOR_CYCLE_DURATION,startedAt,MetastoreConf.getTimeVar(conf,MetastoreConf.ConfVars.COMPACTOR_LONG_RUNNING_INITIATOR_THRESHOLD_WARNING,TimeUnit.MILLISECONDS),MetastoreConf.getTimeVar(conf,MetastoreConf.ConfVars.COMPACTOR_LONG_RUNNING_INITIATOR_THRESHOLD_ERROR,TimeUnit.MILLISECONDS)));      }      final ShowCompactResponse currentCompactions=txnHandler.showCompact(new ShowCompactRequest());      tableCache.ifPresent(c -> c.invalidateAll());      Set<String> skipDBs=Sets.newConcurrentHashSet();      Set<String> skipTables=Sets.newConcurrentHashSet();      Set<CompactionInfo> potentials=compactionExecutor.submit(() -> txnHandler.findPotentialCompactions(abortedThreshold,abortedTimeThreshold,compactionInterval).parallelStream().filter(ci -> isEligibleForCompaction(ci,currentCompactions,skipDBs,skipTables)).collect(Collectors.toSet())).get();      LOG.debug("Found " + potentials.size() + " potential compactions, "+ "checking to see if we should compact any of them");      Map<String,String> tblNameOwners=new HashMap<>();      List<CompletableFuture<Void>> compactionList=new ArrayList<>();      if (!potentials.isEmpty()) {        ValidTxnList validTxnList=TxnCommonUtils.createValidReadTxnList(txnHandler.getOpenTxns(),0);        conf.set(ValidTxnList.VALID_TXNS_KEY,validTxnList.writeToString());      }      for (      CompactionInfo ci : potentials) {        try {          Table t=resolveTableAndCache(ci);          Partition p=resolvePartition(ci);          if (p == null && ci.partName != null) {            LOG.info("Can't find partition " + ci.getFullPartitionName() + ", assuming it has been dropped and moving on.");            continue;          }          String runAs=resolveUserToRunAs(tblNameOwners,t,p);          compactionList.add(CompletableFuture.runAsync(CompactorUtil.ThrowingRunnable.unchecked(() -> scheduleCompactionIfRequired(ci,t,p,runAs)),compactionExecutor));        } catch (        Throwable t) {          LOG.error("Caught exception while trying to determine if we should compact {}. " + "Marking failed to avoid repeated failures, {}",ci,t);          ci.errorMessage=t.getMessage();          txnHandler.markFailed(ci);        }      }      CompletableFuture.allOf(compactionList.toArray(new CompletableFuture[0])).join();      recoverFailedCompactions(true);    } catch (    Throwable t) {      if (metricsEnabled && handle != null) {        failuresCounter.inc();      }      LOG.error("Initiator loop caught unexpected exception this time through the loop: " + StringUtils.stringifyException(t));    } finally {      if (handle != null) {        handle.releaseLocks(startedAt);      }      if (metricsEnabled) {        perfLogger.perfLogEnd(CLASS_NAME,MetricsConstants.COMPACTION_INITIATOR_CYCLE);        updateCycleDurationMetric(MetricsConstants.COMPACTION_INITIATOR_CYCLE_DURATION,startedAt);      }      stopCycleUpdater();    }    long elapsedTime=System.currentTimeMillis() - startedAt;    if (elapsedTime < checkInterval && !stop.get()) {      Thread.sleep(checkInterval - elapsedTime);    }    LOG.info("Initiator thread finished one loop.");  } while (!stop.get());} catch (Throwable t) {  LOG.error("Caught an exception in the main loop of compactor initiator, exiting " + StringUtils.stringifyException(t));} finally {  if (compactionExecutor != null) {    this.compactionExecutor.shutdownNow();  }} @TO@ try {  recoverFailedCompactions(false);  int abortedThreshold=HiveConf.getIntVar(conf,HiveConf.ConfVars.HIVE_COMPACTOR_ABORTEDTXN_THRESHOLD);  long abortedTimeThreshold=HiveConf.getTimeVar(conf,HiveConf.ConfVars.HIVE_COMPACTOR_ABORTEDTXN_TIME_THRESHOLD,TimeUnit.MILLISECONDS);  do {    PerfLogger perfLogger=PerfLogger.getPerfLogger(false);    long startedAt=-1;    long prevStart;    TxnStore.MutexAPI.LockHandle handle=null;    try {      handle=txnHandler.getMutexAPI().acquireLock(TxnStore.MUTEX_KEY.Initiator.name());      startedAt=System.currentTimeMillis();      prevStart=handle.getLastUpdateTime();      long compactionInterval=(prevStart <= 0) ? prevStart : (startedAt - prevStart) / 1000;      if (metricsEnabled) {        perfLogger.perfLogBegin(CLASS_NAME,MetricsConstants.COMPACTION_INITIATOR_CYCLE);        stopCycleUpdater();        startCycleUpdater(HiveConf.getTimeVar(conf,HiveConf.ConfVars.HIVE_COMPACTOR_INITIATOR_DURATION_UPDATE_INTERVAL,TimeUnit.MILLISECONDS),new InitiatorCycleUpdater(MetricsConstants.COMPACTION_INITIATOR_CYCLE_DURATION,startedAt,MetastoreConf.getTimeVar(conf,MetastoreConf.ConfVars.COMPACTOR_LONG_RUNNING_INITIATOR_THRESHOLD_WARNING,TimeUnit.MILLISECONDS),MetastoreConf.getTimeVar(conf,MetastoreConf.ConfVars.COMPACTOR_LONG_RUNNING_INITIATOR_THRESHOLD_ERROR,TimeUnit.MILLISECONDS)));      }      final ShowCompactResponse currentCompactions=txnHandler.showCompact(new ShowCompactRequest());      tableCache.ifPresent(c -> c.invalidateAll());      Set<String> skipDBs=Sets.newConcurrentHashSet();      Set<String> skipTables=Sets.newConcurrentHashSet();      Set<CompactionInfo> potentials=compactionExecutor.submit(() -> txnHandler.findPotentialCompactions(abortedThreshold,abortedTimeThreshold,compactionInterval).parallelStream().filter(ci -> isEligibleForCompaction(ci,currentCompactions,skipDBs,skipTables)).collect(Collectors.toSet())).get();      LOG.debug("Found " + potentials.size() + " potential compactions, "+ "checking to see if we should compact any of them");      Map<String,String> tblNameOwners=new HashMap<>();      List<CompletableFuture<Void>> compactionList=new ArrayList<>();      if (!potentials.isEmpty()) {        ValidTxnList validTxnList=TxnCommonUtils.createValidReadTxnList(txnHandler.getOpenTxns(),0);        conf.set(ValidTxnList.VALID_TXNS_KEY,validTxnList.writeToString());      }      for (      CompactionInfo ci : potentials) {        try {          Table t=resolveTableAndCache(ci);          Partition p=resolvePartition(ci);          if (p == null && ci.partName != null) {            LOG.info("Can't find partition " + ci.getFullPartitionName() + ", assuming it has been dropped and moving on.");            continue;          }          String runAs=resolveUserToRunAs(tblNameOwners,t,p);          String tableName=ci.getFullTableName();          String partition=ci.getFullPartitionName();          CompletableFuture<Void> asyncJob=CompletableFuture.runAsync(CompactorUtil.ThrowingRunnable.unchecked(() -> scheduleCompactionIfRequired(ci,t,p,runAs,metricsEnabled)),compactionExecutor).exceptionally(exc -> {            LOG.error("Error while running scheduling the compaction on the table {} / partition {}.",tableName,partition,exc);            return null;          });          compactionList.add(asyncJob);        } catch (        Throwable t) {          LOG.error("Caught exception while trying to determine if we should compact {}. " + "Marking failed to avoid repeated failures, {}",ci,t);          ci.errorMessage=t.getMessage();          txnHandler.markFailed(ci);        }      }      CompletableFuture.allOf(compactionList.toArray(new CompletableFuture[0])).join();      recoverFailedCompactions(true);    } catch (    Throwable t) {      LOG.error("Initiator loop caught unexpected exception this time through the loop: " + StringUtils.stringifyException(t));    } finally {      if (handle != null) {        handle.releaseLocks(startedAt);      }      if (metricsEnabled) {        perfLogger.perfLogEnd(CLASS_NAME,MetricsConstants.COMPACTION_INITIATOR_CYCLE);        updateCycleDurationMetric(MetricsConstants.COMPACTION_INITIATOR_CYCLE_DURATION,startedAt);      }      stopCycleUpdater();    }    long elapsedTime=System.currentTimeMillis() - startedAt;    if (elapsedTime < checkInterval && !stop.get()) {      Thread.sleep(checkInterval - elapsedTime);    }    LOG.info("Initiator thread finished one loop.");  } while (!stop.get());} catch (Throwable t) {  LOG.error("Caught an exception in the main loop of compactor initiator, exiting " + StringUtils.stringifyException(t));} finally {  if (compactionExecutor != null) {    this.compactionExecutor.shutdownNow();  }} @AT@ 4828 @LENGTH@ 6227
---DEL VariableDeclarationStatement@@Counter failuresCounter=Metrics.getOrCreateCounter(MetricsConstants.COMPACTION_INITIATOR_FAILURE_COUNTER); @AT@ 5169 @LENGTH@ 108
------DEL SimpleType@@Counter @AT@ 5169 @LENGTH@ 7
------DEL VariableDeclarationFragment@@failuresCounter=Metrics.getOrCreateCounter(MetricsConstants.COMPACTION_INITIATOR_FAILURE_COUNTER) @AT@ 5177 @LENGTH@ 99
---------DEL SimpleName@@failuresCounter @AT@ 5177 @LENGTH@ 15
---------DEL MethodInvocation@@Metrics.getOrCreateCounter(MetricsConstants.COMPACTION_INITIATOR_FAILURE_COUNTER) @AT@ 5195 @LENGTH@ 81
------------DEL SimpleName@@Name:Metrics @AT@ 5195 @LENGTH@ 7
------------DEL SimpleName@@MethodName:getOrCreateCounter:[MetricsConstants.COMPACTION_INITIATOR_FAILURE_COUNTER] @AT@ 5203 @LENGTH@ 73
---------------DEL QualifiedName@@MetricsConstants.COMPACTION_INITIATOR_FAILURE_COUNTER @AT@ 5222 @LENGTH@ 53
------------------DEL SimpleName@@MetricsConstants @AT@ 5222 @LENGTH@ 16
------------------DEL SimpleName@@COMPACTION_INITIATOR_FAILURE_COUNTER @AT@ 5239 @LENGTH@ 36
---UPD DoStatement@@do {  PerfLogger perfLogger=PerfLogger.getPerfLogger(false);  long startedAt=-1;  long prevStart;  TxnStore.MutexAPI.LockHandle handle=null;  try {    handle=txnHandler.getMutexAPI().acquireLock(TxnStore.MUTEX_KEY.Initiator.name());    startedAt=System.currentTimeMillis();    prevStart=handle.getLastUpdateTime();    long compactionInterval=(prevStart <= 0) ? prevStart : (startedAt - prevStart) / 1000;    if (metricsEnabled) {      perfLogger.perfLogBegin(CLASS_NAME,MetricsConstants.COMPACTION_INITIATOR_CYCLE);      stopCycleUpdater();      startCycleUpdater(HiveConf.getTimeVar(conf,HiveConf.ConfVars.HIVE_COMPACTOR_INITIATOR_DURATION_UPDATE_INTERVAL,TimeUnit.MILLISECONDS),new InitiatorCycleUpdater(MetricsConstants.COMPACTION_INITIATOR_CYCLE_DURATION,startedAt,MetastoreConf.getTimeVar(conf,MetastoreConf.ConfVars.COMPACTOR_LONG_RUNNING_INITIATOR_THRESHOLD_WARNING,TimeUnit.MILLISECONDS),MetastoreConf.getTimeVar(conf,MetastoreConf.ConfVars.COMPACTOR_LONG_RUNNING_INITIATOR_THRESHOLD_ERROR,TimeUnit.MILLISECONDS)));    }    final ShowCompactResponse currentCompactions=txnHandler.showCompact(new ShowCompactRequest());    tableCache.ifPresent(c -> c.invalidateAll());    Set<String> skipDBs=Sets.newConcurrentHashSet();    Set<String> skipTables=Sets.newConcurrentHashSet();    Set<CompactionInfo> potentials=compactionExecutor.submit(() -> txnHandler.findPotentialCompactions(abortedThreshold,abortedTimeThreshold,compactionInterval).parallelStream().filter(ci -> isEligibleForCompaction(ci,currentCompactions,skipDBs,skipTables)).collect(Collectors.toSet())).get();    LOG.debug("Found " + potentials.size() + " potential compactions, "+ "checking to see if we should compact any of them");    Map<String,String> tblNameOwners=new HashMap<>();    List<CompletableFuture<Void>> compactionList=new ArrayList<>();    if (!potentials.isEmpty()) {      ValidTxnList validTxnList=TxnCommonUtils.createValidReadTxnList(txnHandler.getOpenTxns(),0);      conf.set(ValidTxnList.VALID_TXNS_KEY,validTxnList.writeToString());    }    for (    CompactionInfo ci : potentials) {      try {        Table t=resolveTableAndCache(ci);        Partition p=resolvePartition(ci);        if (p == null && ci.partName != null) {          LOG.info("Can't find partition " + ci.getFullPartitionName() + ", assuming it has been dropped and moving on.");          continue;        }        String runAs=resolveUserToRunAs(tblNameOwners,t,p);        compactionList.add(CompletableFuture.runAsync(CompactorUtil.ThrowingRunnable.unchecked(() -> scheduleCompactionIfRequired(ci,t,p,runAs)),compactionExecutor));      } catch (      Throwable t) {        LOG.error("Caught exception while trying to determine if we should compact {}. " + "Marking failed to avoid repeated failures, {}",ci,t);        ci.errorMessage=t.getMessage();        txnHandler.markFailed(ci);      }    }    CompletableFuture.allOf(compactionList.toArray(new CompletableFuture[0])).join();    recoverFailedCompactions(true);  } catch (  Throwable t) {    if (metricsEnabled && handle != null) {      failuresCounter.inc();    }    LOG.error("Initiator loop caught unexpected exception this time through the loop: " + StringUtils.stringifyException(t));  } finally {    if (handle != null) {      handle.releaseLocks(startedAt);    }    if (metricsEnabled) {      perfLogger.perfLogEnd(CLASS_NAME,MetricsConstants.COMPACTION_INITIATOR_CYCLE);      updateCycleDurationMetric(MetricsConstants.COMPACTION_INITIATOR_CYCLE_DURATION,startedAt);    }    stopCycleUpdater();  }  long elapsedTime=System.currentTimeMillis() - startedAt;  if (elapsedTime < checkInterval && !stop.get()) {    Thread.sleep(checkInterval - elapsedTime);  }  LOG.info("Initiator thread finished one loop.");} while (!stop.get()); @TO@ do {  PerfLogger perfLogger=PerfLogger.getPerfLogger(false);  long startedAt=-1;  long prevStart;  TxnStore.MutexAPI.LockHandle handle=null;  try {    handle=txnHandler.getMutexAPI().acquireLock(TxnStore.MUTEX_KEY.Initiator.name());    startedAt=System.currentTimeMillis();    prevStart=handle.getLastUpdateTime();    long compactionInterval=(prevStart <= 0) ? prevStart : (startedAt - prevStart) / 1000;    if (metricsEnabled) {      perfLogger.perfLogBegin(CLASS_NAME,MetricsConstants.COMPACTION_INITIATOR_CYCLE);      stopCycleUpdater();      startCycleUpdater(HiveConf.getTimeVar(conf,HiveConf.ConfVars.HIVE_COMPACTOR_INITIATOR_DURATION_UPDATE_INTERVAL,TimeUnit.MILLISECONDS),new InitiatorCycleUpdater(MetricsConstants.COMPACTION_INITIATOR_CYCLE_DURATION,startedAt,MetastoreConf.getTimeVar(conf,MetastoreConf.ConfVars.COMPACTOR_LONG_RUNNING_INITIATOR_THRESHOLD_WARNING,TimeUnit.MILLISECONDS),MetastoreConf.getTimeVar(conf,MetastoreConf.ConfVars.COMPACTOR_LONG_RUNNING_INITIATOR_THRESHOLD_ERROR,TimeUnit.MILLISECONDS)));    }    final ShowCompactResponse currentCompactions=txnHandler.showCompact(new ShowCompactRequest());    tableCache.ifPresent(c -> c.invalidateAll());    Set<String> skipDBs=Sets.newConcurrentHashSet();    Set<String> skipTables=Sets.newConcurrentHashSet();    Set<CompactionInfo> potentials=compactionExecutor.submit(() -> txnHandler.findPotentialCompactions(abortedThreshold,abortedTimeThreshold,compactionInterval).parallelStream().filter(ci -> isEligibleForCompaction(ci,currentCompactions,skipDBs,skipTables)).collect(Collectors.toSet())).get();    LOG.debug("Found " + potentials.size() + " potential compactions, "+ "checking to see if we should compact any of them");    Map<String,String> tblNameOwners=new HashMap<>();    List<CompletableFuture<Void>> compactionList=new ArrayList<>();    if (!potentials.isEmpty()) {      ValidTxnList validTxnList=TxnCommonUtils.createValidReadTxnList(txnHandler.getOpenTxns(),0);      conf.set(ValidTxnList.VALID_TXNS_KEY,validTxnList.writeToString());    }    for (    CompactionInfo ci : potentials) {      try {        Table t=resolveTableAndCache(ci);        Partition p=resolvePartition(ci);        if (p == null && ci.partName != null) {          LOG.info("Can't find partition " + ci.getFullPartitionName() + ", assuming it has been dropped and moving on.");          continue;        }        String runAs=resolveUserToRunAs(tblNameOwners,t,p);        String tableName=ci.getFullTableName();        String partition=ci.getFullPartitionName();        CompletableFuture<Void> asyncJob=CompletableFuture.runAsync(CompactorUtil.ThrowingRunnable.unchecked(() -> scheduleCompactionIfRequired(ci,t,p,runAs,metricsEnabled)),compactionExecutor).exceptionally(exc -> {          LOG.error("Error while running scheduling the compaction on the table {} / partition {}.",tableName,partition,exc);          return null;        });        compactionList.add(asyncJob);      } catch (      Throwable t) {        LOG.error("Caught exception while trying to determine if we should compact {}. " + "Marking failed to avoid repeated failures, {}",ci,t);        ci.errorMessage=t.getMessage();        txnHandler.markFailed(ci);      }    }    CompletableFuture.allOf(compactionList.toArray(new CompletableFuture[0])).join();    recoverFailedCompactions(true);  } catch (  Throwable t) {    LOG.error("Initiator loop caught unexpected exception this time through the loop: " + StringUtils.stringifyException(t));  } finally {    if (handle != null) {      handle.releaseLocks(startedAt);    }    if (metricsEnabled) {      perfLogger.perfLogEnd(CLASS_NAME,MetricsConstants.COMPACTION_INITIATOR_CYCLE);      updateCycleDurationMetric(MetricsConstants.COMPACTION_INITIATOR_CYCLE_DURATION,startedAt);    }    stopCycleUpdater();  }  long elapsedTime=System.currentTimeMillis() - startedAt;  if (elapsedTime < checkInterval && !stop.get()) {    Thread.sleep(checkInterval - elapsedTime);  }  LOG.info("Initiator thread finished one loop.");} while (!stop.get()); @AT@ 5498 @LENGTH@ 5276
------UPD TryStatement@@try {  handle=txnHandler.getMutexAPI().acquireLock(TxnStore.MUTEX_KEY.Initiator.name());  startedAt=System.currentTimeMillis();  prevStart=handle.getLastUpdateTime();  long compactionInterval=(prevStart <= 0) ? prevStart : (startedAt - prevStart) / 1000;  if (metricsEnabled) {    perfLogger.perfLogBegin(CLASS_NAME,MetricsConstants.COMPACTION_INITIATOR_CYCLE);    stopCycleUpdater();    startCycleUpdater(HiveConf.getTimeVar(conf,HiveConf.ConfVars.HIVE_COMPACTOR_INITIATOR_DURATION_UPDATE_INTERVAL,TimeUnit.MILLISECONDS),new InitiatorCycleUpdater(MetricsConstants.COMPACTION_INITIATOR_CYCLE_DURATION,startedAt,MetastoreConf.getTimeVar(conf,MetastoreConf.ConfVars.COMPACTOR_LONG_RUNNING_INITIATOR_THRESHOLD_WARNING,TimeUnit.MILLISECONDS),MetastoreConf.getTimeVar(conf,MetastoreConf.ConfVars.COMPACTOR_LONG_RUNNING_INITIATOR_THRESHOLD_ERROR,TimeUnit.MILLISECONDS)));  }  final ShowCompactResponse currentCompactions=txnHandler.showCompact(new ShowCompactRequest());  tableCache.ifPresent(c -> c.invalidateAll());  Set<String> skipDBs=Sets.newConcurrentHashSet();  Set<String> skipTables=Sets.newConcurrentHashSet();  Set<CompactionInfo> potentials=compactionExecutor.submit(() -> txnHandler.findPotentialCompactions(abortedThreshold,abortedTimeThreshold,compactionInterval).parallelStream().filter(ci -> isEligibleForCompaction(ci,currentCompactions,skipDBs,skipTables)).collect(Collectors.toSet())).get();  LOG.debug("Found " + potentials.size() + " potential compactions, "+ "checking to see if we should compact any of them");  Map<String,String> tblNameOwners=new HashMap<>();  List<CompletableFuture<Void>> compactionList=new ArrayList<>();  if (!potentials.isEmpty()) {    ValidTxnList validTxnList=TxnCommonUtils.createValidReadTxnList(txnHandler.getOpenTxns(),0);    conf.set(ValidTxnList.VALID_TXNS_KEY,validTxnList.writeToString());  }  for (  CompactionInfo ci : potentials) {    try {      Table t=resolveTableAndCache(ci);      Partition p=resolvePartition(ci);      if (p == null && ci.partName != null) {        LOG.info("Can't find partition " + ci.getFullPartitionName() + ", assuming it has been dropped and moving on.");        continue;      }      String runAs=resolveUserToRunAs(tblNameOwners,t,p);      compactionList.add(CompletableFuture.runAsync(CompactorUtil.ThrowingRunnable.unchecked(() -> scheduleCompactionIfRequired(ci,t,p,runAs)),compactionExecutor));    } catch (    Throwable t) {      LOG.error("Caught exception while trying to determine if we should compact {}. " + "Marking failed to avoid repeated failures, {}",ci,t);      ci.errorMessage=t.getMessage();      txnHandler.markFailed(ci);    }  }  CompletableFuture.allOf(compactionList.toArray(new CompletableFuture[0])).join();  recoverFailedCompactions(true);} catch (Throwable t) {  if (metricsEnabled && handle != null) {    failuresCounter.inc();  }  LOG.error("Initiator loop caught unexpected exception this time through the loop: " + StringUtils.stringifyException(t));} finally {  if (handle != null) {    handle.releaseLocks(startedAt);  }  if (metricsEnabled) {    perfLogger.perfLogEnd(CLASS_NAME,MetricsConstants.COMPACTION_INITIATOR_CYCLE);    updateCycleDurationMetric(MetricsConstants.COMPACTION_INITIATOR_CYCLE_DURATION,startedAt);  }  stopCycleUpdater();} @TO@ try {  handle=txnHandler.getMutexAPI().acquireLock(TxnStore.MUTEX_KEY.Initiator.name());  startedAt=System.currentTimeMillis();  prevStart=handle.getLastUpdateTime();  long compactionInterval=(prevStart <= 0) ? prevStart : (startedAt - prevStart) / 1000;  if (metricsEnabled) {    perfLogger.perfLogBegin(CLASS_NAME,MetricsConstants.COMPACTION_INITIATOR_CYCLE);    stopCycleUpdater();    startCycleUpdater(HiveConf.getTimeVar(conf,HiveConf.ConfVars.HIVE_COMPACTOR_INITIATOR_DURATION_UPDATE_INTERVAL,TimeUnit.MILLISECONDS),new InitiatorCycleUpdater(MetricsConstants.COMPACTION_INITIATOR_CYCLE_DURATION,startedAt,MetastoreConf.getTimeVar(conf,MetastoreConf.ConfVars.COMPACTOR_LONG_RUNNING_INITIATOR_THRESHOLD_WARNING,TimeUnit.MILLISECONDS),MetastoreConf.getTimeVar(conf,MetastoreConf.ConfVars.COMPACTOR_LONG_RUNNING_INITIATOR_THRESHOLD_ERROR,TimeUnit.MILLISECONDS)));  }  final ShowCompactResponse currentCompactions=txnHandler.showCompact(new ShowCompactRequest());  tableCache.ifPresent(c -> c.invalidateAll());  Set<String> skipDBs=Sets.newConcurrentHashSet();  Set<String> skipTables=Sets.newConcurrentHashSet();  Set<CompactionInfo> potentials=compactionExecutor.submit(() -> txnHandler.findPotentialCompactions(abortedThreshold,abortedTimeThreshold,compactionInterval).parallelStream().filter(ci -> isEligibleForCompaction(ci,currentCompactions,skipDBs,skipTables)).collect(Collectors.toSet())).get();  LOG.debug("Found " + potentials.size() + " potential compactions, "+ "checking to see if we should compact any of them");  Map<String,String> tblNameOwners=new HashMap<>();  List<CompletableFuture<Void>> compactionList=new ArrayList<>();  if (!potentials.isEmpty()) {    ValidTxnList validTxnList=TxnCommonUtils.createValidReadTxnList(txnHandler.getOpenTxns(),0);    conf.set(ValidTxnList.VALID_TXNS_KEY,validTxnList.writeToString());  }  for (  CompactionInfo ci : potentials) {    try {      Table t=resolveTableAndCache(ci);      Partition p=resolvePartition(ci);      if (p == null && ci.partName != null) {        LOG.info("Can't find partition " + ci.getFullPartitionName() + ", assuming it has been dropped and moving on.");        continue;      }      String runAs=resolveUserToRunAs(tblNameOwners,t,p);      String tableName=ci.getFullTableName();      String partition=ci.getFullPartitionName();      CompletableFuture<Void> asyncJob=CompletableFuture.runAsync(CompactorUtil.ThrowingRunnable.unchecked(() -> scheduleCompactionIfRequired(ci,t,p,runAs,metricsEnabled)),compactionExecutor).exceptionally(exc -> {        LOG.error("Error while running scheduling the compaction on the table {} / partition {}.",tableName,partition,exc);        return null;      });      compactionList.add(asyncJob);    } catch (    Throwable t) {      LOG.error("Caught exception while trying to determine if we should compact {}. " + "Marking failed to avoid repeated failures, {}",ci,t);      ci.errorMessage=t.getMessage();      txnHandler.markFailed(ci);    }  }  CompletableFuture.allOf(compactionList.toArray(new CompletableFuture[0])).join();  recoverFailedCompactions(true);} catch (Throwable t) {  LOG.error("Initiator loop caught unexpected exception this time through the loop: " + StringUtils.stringifyException(t));} finally {  if (handle != null) {    handle.releaseLocks(startedAt);  }  if (metricsEnabled) {    perfLogger.perfLogEnd(CLASS_NAME,MetricsConstants.COMPACTION_INITIATOR_CYCLE);    updateCycleDurationMetric(MetricsConstants.COMPACTION_INITIATOR_CYCLE_DURATION,startedAt);  }  stopCycleUpdater();} @AT@ 5819 @LENGTH@ 4679
---------UPD EnhancedForStatement@@for (CompactionInfo ci : potentials) {  try {    Table t=resolveTableAndCache(ci);    Partition p=resolvePartition(ci);    if (p == null && ci.partName != null) {      LOG.info("Can't find partition " + ci.getFullPartitionName() + ", assuming it has been dropped and moving on.");      continue;    }    String runAs=resolveUserToRunAs(tblNameOwners,t,p);    compactionList.add(CompletableFuture.runAsync(CompactorUtil.ThrowingRunnable.unchecked(() -> scheduleCompactionIfRequired(ci,t,p,runAs)),compactionExecutor));  } catch (  Throwable t) {    LOG.error("Caught exception while trying to determine if we should compact {}. " + "Marking failed to avoid repeated failures, {}",ci,t);    ci.errorMessage=t.getMessage();    txnHandler.markFailed(ci);  }} @TO@ for (CompactionInfo ci : potentials) {  try {    Table t=resolveTableAndCache(ci);    Partition p=resolvePartition(ci);    if (p == null && ci.partName != null) {      LOG.info("Can't find partition " + ci.getFullPartitionName() + ", assuming it has been dropped and moving on.");      continue;    }    String runAs=resolveUserToRunAs(tblNameOwners,t,p);    String tableName=ci.getFullTableName();    String partition=ci.getFullPartitionName();    CompletableFuture<Void> asyncJob=CompletableFuture.runAsync(CompactorUtil.ThrowingRunnable.unchecked(() -> scheduleCompactionIfRequired(ci,t,p,runAs,metricsEnabled)),compactionExecutor).exceptionally(exc -> {      LOG.error("Error while running scheduling the compaction on the table {} / partition {}.",tableName,partition,exc);      return null;    });    compactionList.add(asyncJob);  } catch (  Throwable t) {    LOG.error("Caught exception while trying to determine if we should compact {}. " + "Marking failed to avoid repeated failures, {}",ci,t);    ci.errorMessage=t.getMessage();    txnHandler.markFailed(ci);  }} @AT@ 8386 @LENGTH@ 1182
------------UPD TryStatement@@try {  Table t=resolveTableAndCache(ci);  Partition p=resolvePartition(ci);  if (p == null && ci.partName != null) {    LOG.info("Can't find partition " + ci.getFullPartitionName() + ", assuming it has been dropped and moving on.");    continue;  }  String runAs=resolveUserToRunAs(tblNameOwners,t,p);  compactionList.add(CompletableFuture.runAsync(CompactorUtil.ThrowingRunnable.unchecked(() -> scheduleCompactionIfRequired(ci,t,p,runAs)),compactionExecutor));} catch (Throwable t) {  LOG.error("Caught exception while trying to determine if we should compact {}. " + "Marking failed to avoid repeated failures, {}",ci,t);  ci.errorMessage=t.getMessage();  txnHandler.markFailed(ci);} @TO@ try {  Table t=resolveTableAndCache(ci);  Partition p=resolvePartition(ci);  if (p == null && ci.partName != null) {    LOG.info("Can't find partition " + ci.getFullPartitionName() + ", assuming it has been dropped and moving on.");    continue;  }  String runAs=resolveUserToRunAs(tblNameOwners,t,p);  String tableName=ci.getFullTableName();  String partition=ci.getFullPartitionName();  CompletableFuture<Void> asyncJob=CompletableFuture.runAsync(CompactorUtil.ThrowingRunnable.unchecked(() -> scheduleCompactionIfRequired(ci,t,p,runAs,metricsEnabled)),compactionExecutor).exceptionally(exc -> {    LOG.error("Error while running scheduling the compaction on the table {} / partition {}.",tableName,partition,exc);    return null;  });  compactionList.add(asyncJob);} catch (Throwable t) {  LOG.error("Caught exception while trying to determine if we should compact {}. " + "Marking failed to avoid repeated failures, {}",ci,t);  ci.errorMessage=t.getMessage();  txnHandler.markFailed(ci);} @AT@ 8437 @LENGTH@ 1119
---------------INS VariableDeclarationStatement@@String tableName=ci.getFullTableName(); @TO@ TryStatement@@try {  Table t=resolveTableAndCache(ci);  Partition p=resolvePartition(ci);  if (p == null && ci.partName != null) {    LOG.info("Can't find partition " + ci.getFullPartitionName() + ", assuming it has been dropped and moving on.");    continue;  }  String runAs=resolveUserToRunAs(tblNameOwners,t,p);  compactionList.add(CompletableFuture.runAsync(CompactorUtil.ThrowingRunnable.unchecked(() -> scheduleCompactionIfRequired(ci,t,p,runAs)),compactionExecutor));} catch (Throwable t) {  LOG.error("Caught exception while trying to determine if we should compact {}. " + "Marking failed to avoid repeated failures, {}",ci,t);  ci.errorMessage=t.getMessage();  txnHandler.markFailed(ci);} @AT@ 8950 @LENGTH@ 41
------------------INS SimpleType@@String @TO@ VariableDeclarationStatement@@String tableName=ci.getFullTableName(); @AT@ 8950 @LENGTH@ 6
------------------INS VariableDeclarationFragment@@tableName=ci.getFullTableName() @TO@ VariableDeclarationStatement@@String tableName=ci.getFullTableName(); @AT@ 8957 @LENGTH@ 33
---------------------INS SimpleName@@tableName @TO@ VariableDeclarationFragment@@tableName=ci.getFullTableName() @AT@ 8957 @LENGTH@ 9
---------------------INS MethodInvocation@@ci.getFullTableName() @TO@ VariableDeclarationFragment@@tableName=ci.getFullTableName() @AT@ 8969 @LENGTH@ 21
------------------------INS SimpleName@@MethodName:getFullTableName:[] @TO@ MethodInvocation@@ci.getFullTableName() @AT@ 8972 @LENGTH@ 18
------------------------MOV SimpleName@@Name:compactionList @TO@ MethodInvocation@@ci.getFullTableName() @AT@ 9065 @LENGTH@ 14
---------------INS VariableDeclarationStatement@@String partition=ci.getFullPartitionName(); @TO@ TryStatement@@try {  Table t=resolveTableAndCache(ci);  Partition p=resolvePartition(ci);  if (p == null && ci.partName != null) {    LOG.info("Can't find partition " + ci.getFullPartitionName() + ", assuming it has been dropped and moving on.");    continue;  }  String runAs=resolveUserToRunAs(tblNameOwners,t,p);  compactionList.add(CompletableFuture.runAsync(CompactorUtil.ThrowingRunnable.unchecked(() -> scheduleCompactionIfRequired(ci,t,p,runAs)),compactionExecutor));} catch (Throwable t) {  LOG.error("Caught exception while trying to determine if we should compact {}. " + "Marking failed to avoid repeated failures, {}",ci,t);  ci.errorMessage=t.getMessage();  txnHandler.markFailed(ci);} @AT@ 9006 @LENGTH@ 45
------------------INS SimpleType@@String @TO@ VariableDeclarationStatement@@String partition=ci.getFullPartitionName(); @AT@ 9006 @LENGTH@ 6
------------------INS VariableDeclarationFragment@@partition=ci.getFullPartitionName() @TO@ VariableDeclarationStatement@@String partition=ci.getFullPartitionName(); @AT@ 9013 @LENGTH@ 37
---------------------INS SimpleName@@partition @TO@ VariableDeclarationFragment@@partition=ci.getFullPartitionName() @AT@ 9013 @LENGTH@ 9
---------------------INS MethodInvocation@@ci.getFullPartitionName() @TO@ VariableDeclarationFragment@@partition=ci.getFullPartitionName() @AT@ 9025 @LENGTH@ 25
------------------------INS SimpleName@@Name:ci @TO@ MethodInvocation@@ci.getFullPartitionName() @AT@ 9025 @LENGTH@ 2
------------------------INS SimpleName@@MethodName:getFullPartitionName:[] @TO@ MethodInvocation@@ci.getFullPartitionName() @AT@ 9028 @LENGTH@ 22
---------------DEL ExpressionStatement@@MethodInvocation:compactionList.add(CompletableFuture.runAsync(CompactorUtil.ThrowingRunnable.unchecked(() -> scheduleCompactionIfRequired(ci,t,p,runAs)),compactionExecutor)) @AT@ 9065 @LENGTH@ 180
------------------DEL MethodInvocation@@compactionList.add(CompletableFuture.runAsync(CompactorUtil.ThrowingRunnable.unchecked(() -> scheduleCompactionIfRequired(ci,t,p,runAs)),compactionExecutor)) @AT@ 9065 @LENGTH@ 179
---------------------DEL SimpleName@@MethodName:add:[CompletableFuture.runAsync(CompactorUtil.ThrowingRunnable.unchecked(() -> scheduleCompactionIfRequired(ci,t,p,runAs)),compactionExecutor)] @AT@ 9080 @LENGTH@ 164
------------------------DEL MethodInvocation@@CompletableFuture.runAsync(CompactorUtil.ThrowingRunnable.unchecked(() -> scheduleCompactionIfRequired(ci,t,p,runAs)),compactionExecutor) @AT@ 9084 @LENGTH@ 159
---------------------------DEL SimpleName@@MethodName:runAsync:[CompactorUtil.ThrowingRunnable.unchecked(() -> scheduleCompactionIfRequired(ci,t,p,runAs)), compactionExecutor] @AT@ 9102 @LENGTH@ 141
------------------------------DEL MethodInvocation@@CompactorUtil.ThrowingRunnable.unchecked(() -> scheduleCompactionIfRequired(ci,t,p,runAs)) @AT@ 9111 @LENGTH@ 111
------------------------------DEL SimpleName@@compactionExecutor @AT@ 9224 @LENGTH@ 18
---------------INS VariableDeclarationStatement@@CompletableFuture<Void> asyncJob=CompletableFuture.runAsync(CompactorUtil.ThrowingRunnable.unchecked(() -> scheduleCompactionIfRequired(ci,t,p,runAs,metricsEnabled)),compactionExecutor).exceptionally(exc -> {
  LOG.error("Error while running scheduling the compaction on the table {} / partition {}.",tableName,partition,exc);
  return null;
}
); @TO@ TryStatement@@try {  Table t=resolveTableAndCache(ci);  Partition p=resolvePartition(ci);  if (p == null && ci.partName != null) {    LOG.info("Can't find partition " + ci.getFullPartitionName() + ", assuming it has been dropped and moving on.");    continue;  }  String runAs=resolveUserToRunAs(tblNameOwners,t,p);  compactionList.add(CompletableFuture.runAsync(CompactorUtil.ThrowingRunnable.unchecked(() -> scheduleCompactionIfRequired(ci,t,p,runAs)),compactionExecutor));} catch (Throwable t) {  LOG.error("Caught exception while trying to determine if we should compact {}. " + "Marking failed to avoid repeated failures, {}",ci,t);  ci.errorMessage=t.getMessage();  txnHandler.markFailed(ci);} @AT@ 9067 @LENGTH@ 519
------------------INS ParameterizedType@@CompletableFuture<Void> @TO@ VariableDeclarationStatement@@CompletableFuture<Void> asyncJob=CompletableFuture.runAsync(CompactorUtil.ThrowingRunnable.unchecked(() -> scheduleCompactionIfRequired(ci,t,p,runAs,metricsEnabled)),compactionExecutor).exceptionally(exc -> {
  LOG.error("Error while running scheduling the compaction on the table {} / partition {}.",tableName,partition,exc);
  return null;
}
); @AT@ 9067 @LENGTH@ 23
---------------------INS SimpleType@@CompletableFuture @TO@ ParameterizedType@@CompletableFuture<Void> @AT@ 9067 @LENGTH@ 17
---------------------INS SimpleType@@Void @TO@ ParameterizedType@@CompletableFuture<Void> @AT@ 9085 @LENGTH@ 4
------------------INS VariableDeclarationFragment@@asyncJob=CompletableFuture.runAsync(CompactorUtil.ThrowingRunnable.unchecked(() -> scheduleCompactionIfRequired(ci,t,p,runAs,metricsEnabled)),compactionExecutor).exceptionally(exc -> {
  LOG.error("Error while running scheduling the compaction on the table {} / partition {}.",tableName,partition,exc);
  return null;
}
) @TO@ VariableDeclarationStatement@@CompletableFuture<Void> asyncJob=CompletableFuture.runAsync(CompactorUtil.ThrowingRunnable.unchecked(() -> scheduleCompactionIfRequired(ci,t,p,runAs,metricsEnabled)),compactionExecutor).exceptionally(exc -> {
  LOG.error("Error while running scheduling the compaction on the table {} / partition {}.",tableName,partition,exc);
  return null;
}
); @AT@ 9091 @LENGTH@ 494
---------------------INS SimpleName@@asyncJob @TO@ VariableDeclarationFragment@@asyncJob=CompletableFuture.runAsync(CompactorUtil.ThrowingRunnable.unchecked(() -> scheduleCompactionIfRequired(ci,t,p,runAs,metricsEnabled)),compactionExecutor).exceptionally(exc -> {
  LOG.error("Error while running scheduling the compaction on the table {} / partition {}.",tableName,partition,exc);
  return null;
}
) @AT@ 9091 @LENGTH@ 8
---------------------INS MethodInvocation@@CompletableFuture.runAsync(CompactorUtil.ThrowingRunnable.unchecked(() -> scheduleCompactionIfRequired(ci,t,p,runAs,metricsEnabled)),compactionExecutor).exceptionally(exc -> {
  LOG.error("Error while running scheduling the compaction on the table {} / partition {}.",tableName,partition,exc);
  return null;
}
) @TO@ VariableDeclarationFragment@@asyncJob=CompletableFuture.runAsync(CompactorUtil.ThrowingRunnable.unchecked(() -> scheduleCompactionIfRequired(ci,t,p,runAs,metricsEnabled)),compactionExecutor).exceptionally(exc -> {
  LOG.error("Error while running scheduling the compaction on the table {} / partition {}.",tableName,partition,exc);
  return null;
}
) @AT@ 9120 @LENGTH@ 465
------------------------MOV SimpleName@@Name:CompletableFuture @TO@ MethodInvocation@@CompletableFuture.runAsync(CompactorUtil.ThrowingRunnable.unchecked(() -> scheduleCompactionIfRequired(ci,t,p,runAs,metricsEnabled)),compactionExecutor).exceptionally(exc -> {
  LOG.error("Error while running scheduling the compaction on the table {} / partition {}.",tableName,partition,exc);
  return null;
}
) @AT@ 9084 @LENGTH@ 17
------------------------INS MethodInvocation@@MethodName:runAsync:[CompactorUtil.ThrowingRunnable.unchecked(() -> scheduleCompactionIfRequired(ci,t,p,runAs,metricsEnabled)), compactionExecutor] @TO@ MethodInvocation@@CompletableFuture.runAsync(CompactorUtil.ThrowingRunnable.unchecked(() -> scheduleCompactionIfRequired(ci,t,p,runAs,metricsEnabled)),compactionExecutor).exceptionally(exc -> {
  LOG.error("Error while running scheduling the compaction on the table {} / partition {}.",tableName,partition,exc);
  return null;
}
) @AT@ 9120 @LENGTH@ 214
---------------------------INS MethodInvocation@@CompactorUtil.ThrowingRunnable.unchecked(() -> scheduleCompactionIfRequired(ci,t,p,runAs,metricsEnabled)) @TO@ MethodInvocation@@MethodName:runAsync:[CompactorUtil.ThrowingRunnable.unchecked(() -> scheduleCompactionIfRequired(ci,t,p,runAs,metricsEnabled)), compactionExecutor] @AT@ 9174 @LENGTH@ 139
------------------------------MOV QualifiedName@@Name:CompactorUtil.ThrowingRunnable @TO@ MethodInvocation@@CompactorUtil.ThrowingRunnable.unchecked(() -> scheduleCompactionIfRequired(ci,t,p,runAs,metricsEnabled)) @AT@ 9111 @LENGTH@ 30
------------------------------MOV SimpleName@@MethodName:unchecked:[() -> scheduleCompactionIfRequired(ci,t,p,runAs)] @TO@ MethodInvocation@@CompactorUtil.ThrowingRunnable.unchecked(() -> scheduleCompactionIfRequired(ci,t,p,runAs,metricsEnabled)) @AT@ 9142 @LENGTH@ 80
---------------------------------UPD LambdaExpression@@() -> scheduleCompactionIfRequired(ci,t,p,runAs) @TO@ () -> scheduleCompactionIfRequired(ci,t,p,runAs,metricsEnabled) @AT@ 9152 @LENGTH@ 69
------------------------------------UPD MethodInvocation@@scheduleCompactionIfRequired(ci,t,p,runAs) @TO@ scheduleCompactionIfRequired(ci,t,p,runAs,metricsEnabled) @AT@ 9176 @LENGTH@ 45
---------------------------------------UPD SimpleName@@MethodName:scheduleCompactionIfRequired:[ci, t, p, runAs] @TO@ MethodName:scheduleCompactionIfRequired:[ci, t, p, runAs, metricsEnabled] @AT@ 9176 @LENGTH@ 45
------------------------------------------INS SimpleName@@metricsEnabled @TO@ SimpleName@@MethodName:scheduleCompactionIfRequired:[ci, t, p, runAs] @AT@ 9297 @LENGTH@ 14
---------------------------INS SimpleName@@compactionExecutor @TO@ MethodInvocation@@MethodName:runAsync:[CompactorUtil.ThrowingRunnable.unchecked(() -> scheduleCompactionIfRequired(ci,t,p,runAs,metricsEnabled)), compactionExecutor] @AT@ 9315 @LENGTH@ 18
------------------------INS SimpleName@@MethodName:exceptionally:[exc -> {
  LOG.error("Error while running scheduling the compaction on the table {} / partition {}.",tableName,partition,exc);
  return null;
}
] @TO@ MethodInvocation@@CompletableFuture.runAsync(CompactorUtil.ThrowingRunnable.unchecked(() -> scheduleCompactionIfRequired(ci,t,p,runAs,metricsEnabled)),compactionExecutor).exceptionally(exc -> {
  LOG.error("Error while running scheduling the compaction on the table {} / partition {}.",tableName,partition,exc);
  return null;
}
) @AT@ 9358 @LENGTH@ 227
---------------------------INS LambdaExpression@@exc -> {
  LOG.error("Error while running scheduling the compaction on the table {} / partition {}.",tableName,partition,exc);
  return null;
}
 @TO@ SimpleName@@MethodName:exceptionally:[exc -> {
  LOG.error("Error while running scheduling the compaction on the table {} / partition {}.",tableName,partition,exc);
  return null;
}
] @AT@ 9372 @LENGTH@ 212
------------------------------INS VariableDeclarationFragment@@exc @TO@ LambdaExpression@@exc -> {
  LOG.error("Error while running scheduling the compaction on the table {} / partition {}.",tableName,partition,exc);
  return null;
}
 @AT@ 9372 @LENGTH@ 3
---------------------------------INS SimpleName@@exc @TO@ VariableDeclarationFragment@@exc @AT@ 9372 @LENGTH@ 3
------------------------------INS ExpressionStatement@@MethodInvocation:LOG.error("Error while running scheduling the compaction on the table {} / partition {}.",tableName,partition,exc) @TO@ LambdaExpression@@exc -> {
  LOG.error("Error while running scheduling the compaction on the table {} / partition {}.",tableName,partition,exc);
  return null;
}
 @AT@ 9405 @LENGTH@ 118
---------------------------------INS MethodInvocation@@LOG.error("Error while running scheduling the compaction on the table {} / partition {}.",tableName,partition,exc) @TO@ ExpressionStatement@@MethodInvocation:LOG.error("Error while running scheduling the compaction on the table {} / partition {}.",tableName,partition,exc) @AT@ 9405 @LENGTH@ 117
------------------------------------INS SimpleName@@Name:LOG @TO@ MethodInvocation@@LOG.error("Error while running scheduling the compaction on the table {} / partition {}.",tableName,partition,exc) @AT@ 9405 @LENGTH@ 3
------------------------------------INS SimpleName@@MethodName:error:["Error while running scheduling the compaction on the table {} / partition {}.", tableName, partition, exc] @TO@ MethodInvocation@@LOG.error("Error while running scheduling the compaction on the table {} / partition {}.",tableName,partition,exc) @AT@ 9409 @LENGTH@ 113
---------------------------------------INS StringLiteral@@"Error while running scheduling the compaction on the table {} / partition {}." @TO@ SimpleName@@MethodName:error:["Error while running scheduling the compaction on the table {} / partition {}.", tableName, partition, exc] @AT@ 9415 @LENGTH@ 79
---------------------------------------INS SimpleName@@tableName @TO@ SimpleName@@MethodName:error:["Error while running scheduling the compaction on the table {} / partition {}.", tableName, partition, exc] @AT@ 9496 @LENGTH@ 9
---------------------------------------INS SimpleName@@partition @TO@ SimpleName@@MethodName:error:["Error while running scheduling the compaction on the table {} / partition {}.", tableName, partition, exc] @AT@ 9507 @LENGTH@ 9
---------------------------------------INS SimpleName@@exc @TO@ SimpleName@@MethodName:error:["Error while running scheduling the compaction on the table {} / partition {}.", tableName, partition, exc] @AT@ 9518 @LENGTH@ 3
------------------------------INS ReturnStatement@@NullLiteral:null @TO@ LambdaExpression@@exc -> {
  LOG.error("Error while running scheduling the compaction on the table {} / partition {}.",tableName,partition,exc);
  return null;
}
 @AT@ 9548 @LENGTH@ 12
---------------------------------INS NullLiteral@@null @TO@ ReturnStatement@@NullLiteral:null @AT@ 9555 @LENGTH@ 4
---------------INS ExpressionStatement@@MethodInvocation:compactionList.add(asyncJob) @TO@ TryStatement@@try {  Table t=resolveTableAndCache(ci);  Partition p=resolvePartition(ci);  if (p == null && ci.partName != null) {    LOG.info("Can't find partition " + ci.getFullPartitionName() + ", assuming it has been dropped and moving on.");    continue;  }  String runAs=resolveUserToRunAs(tblNameOwners,t,p);  compactionList.add(CompletableFuture.runAsync(CompactorUtil.ThrowingRunnable.unchecked(() -> scheduleCompactionIfRequired(ci,t,p,runAs)),compactionExecutor));} catch (Throwable t) {  LOG.error("Caught exception while trying to determine if we should compact {}. " + "Marking failed to avoid repeated failures, {}",ci,t);  ci.errorMessage=t.getMessage();  txnHandler.markFailed(ci);} @AT@ 9601 @LENGTH@ 29
------------------INS MethodInvocation@@compactionList.add(asyncJob) @TO@ ExpressionStatement@@MethodInvocation:compactionList.add(asyncJob) @AT@ 9601 @LENGTH@ 28
---------------------INS SimpleName@@Name:compactionList @TO@ MethodInvocation@@compactionList.add(asyncJob) @AT@ 9601 @LENGTH@ 14
---------------------INS SimpleName@@MethodName:add:[asyncJob] @TO@ MethodInvocation@@compactionList.add(asyncJob) @AT@ 9616 @LENGTH@ 13
------------------------INS SimpleName@@asyncJob @TO@ SimpleName@@MethodName:add:[asyncJob] @AT@ 9620 @LENGTH@ 8
---------UPD CatchClause@@catch (Throwable t) {  if (metricsEnabled && handle != null) {    failuresCounter.inc();  }  LOG.error("Initiator loop caught unexpected exception this time through the loop: " + StringUtils.stringifyException(t));} @TO@ catch (Throwable t) {  LOG.error("Initiator loop caught unexpected exception this time through the loop: " + StringUtils.stringifyException(t));} @AT@ 9776 @LENGTH@ 336
------------DEL IfStatement@@if (metricsEnabled && handle != null) {  failuresCounter.inc();} @AT@ 9870 @LENGTH@ 86
---------------DEL InfixExpression@@metricsEnabled && handle != null @AT@ 9874 @LENGTH@ 32
------------------DEL SimpleName@@metricsEnabled @AT@ 9874 @LENGTH@ 14
------------------DEL Operator@@&& @AT@ 9888 @LENGTH@ 2
------------------DEL InfixExpression@@handle != null @AT@ 9892 @LENGTH@ 14
---------------------DEL SimpleName@@handle @AT@ 9892 @LENGTH@ 6
---------------------DEL Operator@@!= @AT@ 9898 @LENGTH@ 2
---------------------DEL NullLiteral@@null @AT@ 9902 @LENGTH@ 4
---------------DEL Block@@ThenBody:{  failuresCounter.inc();} @AT@ 9908 @LENGTH@ 48
------------------DEL ExpressionStatement@@MethodInvocation:failuresCounter.inc() @AT@ 9922 @LENGTH@ 22
---------------------DEL MethodInvocation@@failuresCounter.inc() @AT@ 9922 @LENGTH@ 21
------------------------DEL SimpleName@@Name:failuresCounter @AT@ 9922 @LENGTH@ 15
------------------------DEL SimpleName@@MethodName:inc:[] @AT@ 9938 @LENGTH@ 5


UPD VariableDeclarationStatement@@boolean useVariable=StringUtils.hasText(variable) && !variable.startsWith(" new") && !variable.startsWith("count(")&& !variable.contains(","); @TO@ boolean useVariable=StringUtils.hasText(variable) && !variable.startsWith(" new") && !variable.startsWith("count(")&& !variable.contains(",")&& !variable.contains("*"); @AT@ 17187 @LENGTH@ 169
---UPD VariableDeclarationFragment@@useVariable=StringUtils.hasText(variable) && !variable.startsWith(" new") && !variable.startsWith("count(")&& !variable.contains(",") @TO@ useVariable=StringUtils.hasText(variable) && !variable.startsWith(" new") && !variable.startsWith("count(")&& !variable.contains(",")&& !variable.contains("*") @AT@ 17195 @LENGTH@ 160
------UPD InfixExpression@@StringUtils.hasText(variable) && !variable.startsWith(" new") && !variable.startsWith("count(")&& !variable.contains(",") @TO@ StringUtils.hasText(variable) && !variable.startsWith(" new") && !variable.startsWith("count(")&& !variable.contains(",")&& !variable.contains("*") @AT@ 17209 @LENGTH@ 146
---------INS PrefixExpression@@!variable.contains("*") @TO@ InfixExpression@@StringUtils.hasText(variable) && !variable.startsWith(" new") && !variable.startsWith("count(")&& !variable.contains(",") @AT@ 17376 @LENGTH@ 23
------------INS Operator@@! @TO@ PrefixExpression@@!variable.contains("*") @AT@ 17376 @LENGTH@ 1
------------INS MethodInvocation@@variable.contains("*") @TO@ PrefixExpression@@!variable.contains("*") @AT@ 17377 @LENGTH@ 22
---------------INS SimpleName@@Name:variable @TO@ MethodInvocation@@variable.contains("*") @AT@ 17377 @LENGTH@ 8
---------------INS SimpleName@@MethodName:contains:["*"] @TO@ MethodInvocation@@variable.contains("*") @AT@ 17386 @LENGTH@ 13
------------------INS StringLiteral@@"*" @TO@ SimpleName@@MethodName:contains:["*"] @AT@ 17395 @LENGTH@ 3


UPD VariableDeclarationStatement@@String query="SELECT \"NEXT_VAL\" FROM \"SEQUENCE_TABLE\" WHERE \"SEQUENCE_NAME\"= " + quoteString("org.apache.hadoop.hive.metastore.model.MPartitionColumnStatistics") + " FOR UPDATE"; @TO@ String query=sqlGenerator.addForUpdateClause("SELECT \"NEXT_VAL\" FROM \"SEQUENCE_TABLE\" " + "WHERE \"SEQUENCE_NAME\"= " + quoteString("org.apache.hadoop.hive.metastore.model.MPartitionColumnStatistics")); @AT@ 27017 @LENGTH@ 218
---UPD VariableDeclarationFragment@@query="SELECT \"NEXT_VAL\" FROM \"SEQUENCE_TABLE\" WHERE \"SEQUENCE_NAME\"= " + quoteString("org.apache.hadoop.hive.metastore.model.MPartitionColumnStatistics") + " FOR UPDATE" @TO@ query=sqlGenerator.addForUpdateClause("SELECT \"NEXT_VAL\" FROM \"SEQUENCE_TABLE\" " + "WHERE \"SEQUENCE_NAME\"= " + quoteString("org.apache.hadoop.hive.metastore.model.MPartitionColumnStatistics")) @AT@ 27024 @LENGTH@ 210
------INS MethodInvocation@@sqlGenerator.addForUpdateClause("SELECT \"NEXT_VAL\" FROM \"SEQUENCE_TABLE\" " + "WHERE \"SEQUENCE_NAME\"= " + quoteString("org.apache.hadoop.hive.metastore.model.MPartitionColumnStatistics")) @TO@ VariableDeclarationFragment@@query="SELECT \"NEXT_VAL\" FROM \"SEQUENCE_TABLE\" WHERE \"SEQUENCE_NAME\"= " + quoteString("org.apache.hadoop.hive.metastore.model.MPartitionColumnStatistics") + " FOR UPDATE" @AT@ 27032 @LENGTH@ 224
---------INS SimpleName@@Name:sqlGenerator @TO@ MethodInvocation@@sqlGenerator.addForUpdateClause("SELECT \"NEXT_VAL\" FROM \"SEQUENCE_TABLE\" " + "WHERE \"SEQUENCE_NAME\"= " + quoteString("org.apache.hadoop.hive.metastore.model.MPartitionColumnStatistics")) @AT@ 27032 @LENGTH@ 12
---------INS SimpleName@@MethodName:addForUpdateClause:["SELECT \"NEXT_VAL\" FROM \"SEQUENCE_TABLE\" " + "WHERE \"SEQUENCE_NAME\"= " + quoteString("org.apache.hadoop.hive.metastore.model.MPartitionColumnStatistics")] @TO@ MethodInvocation@@sqlGenerator.addForUpdateClause("SELECT \"NEXT_VAL\" FROM \"SEQUENCE_TABLE\" " + "WHERE \"SEQUENCE_NAME\"= " + quoteString("org.apache.hadoop.hive.metastore.model.MPartitionColumnStatistics")) @AT@ 27045 @LENGTH@ 211
------------MOV InfixExpression@@"SELECT \"NEXT_VAL\" FROM \"SEQUENCE_TABLE\" WHERE \"SEQUENCE_NAME\"= " + quoteString("org.apache.hadoop.hive.metastore.model.MPartitionColumnStatistics") + " FOR UPDATE" @TO@ SimpleName@@MethodName:addForUpdateClause:["SELECT \"NEXT_VAL\" FROM \"SEQUENCE_TABLE\" " + "WHERE \"SEQUENCE_NAME\"= " + quoteString("org.apache.hadoop.hive.metastore.model.MPartitionColumnStatistics")] @AT@ 27032 @LENGTH@ 202
---------------UPD StringLiteral@@"SELECT \"NEXT_VAL\" FROM \"SEQUENCE_TABLE\" WHERE \"SEQUENCE_NAME\"= " @TO@ "SELECT \"NEXT_VAL\" FROM \"SEQUENCE_TABLE\" " @AT@ 27032 @LENGTH@ 71
---------------MOV MethodInvocation@@quoteString("org.apache.hadoop.hive.metastore.model.MPartitionColumnStatistics") @TO@ InfixExpression@@"SELECT \"NEXT_VAL\" FROM \"SEQUENCE_TABLE\" WHERE \"SEQUENCE_NAME\"= " + quoteString("org.apache.hadoop.hive.metastore.model.MPartitionColumnStatistics") + " FOR UPDATE" @AT@ 27122 @LENGTH@ 80
---------------UPD StringLiteral@@" FOR UPDATE" @TO@ "WHERE \"SEQUENCE_NAME\"= " @AT@ 27221 @LENGTH@ 13
------UPD InfixExpression@@"SELECT \"NEXT_VAL\" FROM \"SEQUENCE_TABLE\" WHERE \"SEQUENCE_NAME\"= " + quoteString("org.apache.hadoop.hive.metastore.model.MPartitionColumnStatistics") + " FOR UPDATE" @TO@ "SELECT \"NEXT_VAL\" FROM \"SEQUENCE_TABLE\" " + "WHERE \"SEQUENCE_NAME\"= " + quoteString("org.apache.hadoop.hive.metastore.model.MPartitionColumnStatistics") @AT@ 27032 @LENGTH@ 202


UPD VariableDeclarationStatement@@CamelCronService service=ObjectHelper.isEmpty(name) ? CamelContextHelper.findByType(context,CamelCronService.class) : CamelContextHelper.lookup(context,name,CamelCronService.class); @TO@ CamelCronService service=ObjectHelper.isEmpty(name) ? CamelContextHelper.findSingleByType(context,CamelCronService.class) : CamelContextHelper.lookup(context,name,CamelCronService.class); @AT@ 1720 @LENGTH@ 218
---UPD VariableDeclarationFragment@@service=ObjectHelper.isEmpty(name) ? CamelContextHelper.findByType(context,CamelCronService.class) : CamelContextHelper.lookup(context,name,CamelCronService.class) @TO@ service=ObjectHelper.isEmpty(name) ? CamelContextHelper.findSingleByType(context,CamelCronService.class) : CamelContextHelper.lookup(context,name,CamelCronService.class) @AT@ 1737 @LENGTH@ 200
------UPD ConditionalExpression@@ObjectHelper.isEmpty(name) ? CamelContextHelper.findByType(context,CamelCronService.class) : CamelContextHelper.lookup(context,name,CamelCronService.class) @TO@ ObjectHelper.isEmpty(name) ? CamelContextHelper.findSingleByType(context,CamelCronService.class) : CamelContextHelper.lookup(context,name,CamelCronService.class) @AT@ 1747 @LENGTH@ 190
---------UPD MethodInvocation@@CamelContextHelper.findByType(context,CamelCronService.class) @TO@ CamelContextHelper.findSingleByType(context,CamelCronService.class) @AT@ 1792 @LENGTH@ 62
------------UPD SimpleName@@MethodName:findByType:[context, CamelCronService.class] @TO@ MethodName:findSingleByType:[context, CamelCronService.class] @AT@ 1811 @LENGTH@ 43


UPD ExpressionStatement@@MethodInvocation:message.setBody(messageItem.getMessageText()) @TO@ MethodInvocation:message.setBody(data == null ? null : data.toString()) @AT@ 6384 @LENGTH@ 46
---UPD MethodInvocation@@message.setBody(messageItem.getMessageText()) @TO@ message.setBody(data == null ? null : data.toString()) @AT@ 6384 @LENGTH@ 45
------UPD SimpleName@@MethodName:setBody:[messageItem.getMessageText()] @TO@ MethodName:setBody:[data == null ? null : data.toString()] @AT@ 6392 @LENGTH@ 37
---------DEL MethodInvocation@@messageItem.getMessageText() @AT@ 6400 @LENGTH@ 28
---------INS ConditionalExpression@@data == null ? null : data.toString() @TO@ SimpleName@@MethodName:setBody:[messageItem.getMessageText()] @AT@ 6488 @LENGTH@ 37
------------INS InfixExpression@@data == null @TO@ ConditionalExpression@@data == null ? null : data.toString() @AT@ 6488 @LENGTH@ 12
---------------INS SimpleName@@data @TO@ InfixExpression@@data == null @AT@ 6488 @LENGTH@ 4
---------------INS Operator@@== @TO@ InfixExpression@@data == null @AT@ 6492 @LENGTH@ 2
---------------INS NullLiteral@@null @TO@ InfixExpression@@data == null @AT@ 6496 @LENGTH@ 4
------------INS NullLiteral@@null @TO@ ConditionalExpression@@data == null ? null : data.toString() @AT@ 6503 @LENGTH@ 4
------------INS MethodInvocation@@data.toString() @TO@ ConditionalExpression@@data == null ? null : data.toString() @AT@ 6510 @LENGTH@ 15
---------------MOV SimpleName@@Name:messageItem @TO@ MethodInvocation@@data.toString() @AT@ 6400 @LENGTH@ 11
---------------MOV SimpleName@@MethodName:getMessageText:[] @TO@ MethodInvocation@@data.toString() @AT@ 6412 @LENGTH@ 16


UPD TypeDeclaration@@[@Singleton, @Transactional, public, static]SearchBean,  @TO@ [@ApplicationScoped, @Transactional, public, static]SearchBean,  @AT@ 5552 @LENGTH@ 998
---UPD MarkerAnnotation@@@Singleton @TO@ @ApplicationScoped @AT@ 5552 @LENGTH@ 10


UPD MethodDeclaration@@protected, SingleItemSelectorContext<T,I>, MethodName:getThisContext, ComponentContext<?> context,  @TO@ public, SingleItemSelectorContext<T,I>, MethodName:getThisContext, ComponentContext<?> context,  @AT@ 2148 @LENGTH@ 476
---UPD Modifier@@protected @TO@ public @AT@ 2148 @LENGTH@ 9


UPD VariableDeclarationStatement@@Builder builder=CommandRegistration.builder().command(key).group(group).help(shellMapping.value()).interactionMode(shellMapping.interactionMode()).availability(availabilityIndicator); @TO@ Builder builder=CommandRegistration.builder().command(key).group(group).description(shellMapping.value()).interactionMode(shellMapping.interactionMode()).availability(availabilityIndicator); @AT@ 3395 @LENGTH@ 220
---UPD VariableDeclarationFragment@@builder=CommandRegistration.builder().command(key).group(group).help(shellMapping.value()).interactionMode(shellMapping.interactionMode()).availability(availabilityIndicator) @TO@ builder=CommandRegistration.builder().command(key).group(group).description(shellMapping.value()).interactionMode(shellMapping.interactionMode()).availability(availabilityIndicator) @AT@ 3403 @LENGTH@ 211
------UPD MethodInvocation@@CommandRegistration.builder().command(key).group(group).help(shellMapping.value()).interactionMode(shellMapping.interactionMode()).availability(availabilityIndicator) @TO@ CommandRegistration.builder().command(key).group(group).description(shellMapping.value()).interactionMode(shellMapping.interactionMode()).availability(availabilityIndicator) @AT@ 3413 @LENGTH@ 201
---------UPD MethodInvocation@@MethodName:help:[shellMapping.value()] @TO@ MethodName:description:[shellMapping.value()] @AT@ 3413 @LENGTH@ 103


UPD VariableDeclarationStatement@@final Object[] els=new Object[]{"1","3","5","7","2","4","6"}; @TO@ final Object[] els={"1","3","5","7","2","4","6"}; @AT@ 2525 @LENGTH@ 70
---UPD VariableDeclarationFragment@@els=new Object[]{"1","3","5","7","2","4","6"} @TO@ els={"1","3","5","7","2","4","6"} @AT@ 2540 @LENGTH@ 54
------INS ArrayInitializer@@{"1","3","5","7","2","4","6"} @TO@ VariableDeclarationFragment@@els=new Object[]{"1","3","5","7","2","4","6"} @AT@ 2533 @LENGTH@ 35
---------MOV StringLiteral@@"1" @TO@ ArrayInitializer@@{"1","3","5","7","2","4","6"} @AT@ 2560 @LENGTH@ 3
---------MOV StringLiteral@@"3" @TO@ ArrayInitializer@@{"1","3","5","7","2","4","6"} @AT@ 2565 @LENGTH@ 3
---------MOV StringLiteral@@"5" @TO@ ArrayInitializer@@{"1","3","5","7","2","4","6"} @AT@ 2570 @LENGTH@ 3
---------MOV StringLiteral@@"7" @TO@ ArrayInitializer@@{"1","3","5","7","2","4","6"} @AT@ 2575 @LENGTH@ 3
---------MOV StringLiteral@@"2" @TO@ ArrayInitializer@@{"1","3","5","7","2","4","6"} @AT@ 2580 @LENGTH@ 3
---------MOV StringLiteral@@"4" @TO@ ArrayInitializer@@{"1","3","5","7","2","4","6"} @AT@ 2585 @LENGTH@ 3
---------MOV StringLiteral@@"6" @TO@ ArrayInitializer@@{"1","3","5","7","2","4","6"} @AT@ 2590 @LENGTH@ 3
------DEL ArrayCreation@@new Object[]{"1","3","5","7","2","4","6"} @AT@ 2546 @LENGTH@ 48
---------DEL ArrayType@@Object[] @AT@ 2550 @LENGTH@ 8
------------DEL SimpleType@@Object @AT@ 2550 @LENGTH@ 6
---------DEL ArrayInitializer@@{"1","3","5","7","2","4","6"} @AT@ 2559 @LENGTH@ 35


UPD FieldDeclaration@@private, static, final, String, [BLOCK_WHEN_FULL_URI="seda:blockingBar" + String.format(SIZE_PARAM,QUEUE_SIZE) + "&blockWhenFull=true&timeout=0&offerTimeout=200"] @TO@ private, static, final, String, [BLOCK_WHEN_FULL_URI="seda:blockingBar" + String.format(SIZE_PARAM,QUEUE_SIZE) + "&blockWhenFull=true&timeout=0&offerTimeout=300"] @AT@ 1712 @LENGTH@ 172
---UPD VariableDeclarationFragment@@BLOCK_WHEN_FULL_URI="seda:blockingBar" + String.format(SIZE_PARAM,QUEUE_SIZE) + "&blockWhenFull=true&timeout=0&offerTimeout=200" @TO@ BLOCK_WHEN_FULL_URI="seda:blockingBar" + String.format(SIZE_PARAM,QUEUE_SIZE) + "&blockWhenFull=true&timeout=0&offerTimeout=300" @AT@ 1740 @LENGTH@ 143
------UPD InfixExpression@@"seda:blockingBar" + String.format(SIZE_PARAM,QUEUE_SIZE) + "&blockWhenFull=true&timeout=0&offerTimeout=200" @TO@ "seda:blockingBar" + String.format(SIZE_PARAM,QUEUE_SIZE) + "&blockWhenFull=true&timeout=0&offerTimeout=300" @AT@ 1774 @LENGTH@ 109
---------UPD StringLiteral@@"&blockWhenFull=true&timeout=0&offerTimeout=200" @TO@ "&blockWhenFull=true&timeout=0&offerTimeout=300" @AT@ 1835 @LENGTH@ 48


INS MethodDeclaration@@void, MethodName:readsDerivedInterfaceProjections,  @TO@ TypeDeclaration@@[@ExtendWith(SpringExtension.class), @ContextConfiguration("classpath:application-context.xml"), @Transactional, public]UserRepositoryTests,  @AT@ 72810 @LENGTH@ 128
---INS PrimitiveType@@void @TO@ MethodDeclaration@@void, MethodName:readsDerivedInterfaceProjections,  @AT@ 72805 @LENGTH@ 4
---INS SimpleName@@MethodName:readsDerivedInterfaceProjections @TO@ MethodDeclaration@@void, MethodName:readsDerivedInterfaceProjections,  @AT@ 72810 @LENGTH@ 32
---INS ExpressionStatement@@MethodInvocation:flushTestUsers() @TO@ MethodDeclaration@@void, MethodName:readsDerivedInterfaceProjections,  @AT@ 72850 @LENGTH@ 17
------INS MethodInvocation@@MethodName:flushTestUsers:[] @TO@ ExpressionStatement@@MethodInvocation:flushTestUsers() @AT@ 72850 @LENGTH@ 16
---INS ExpressionStatement@@MethodInvocation:assertThat(repository.findAllInterfaceProjectedBy()).hasSize(4) @TO@ MethodDeclaration@@void, MethodName:readsDerivedInterfaceProjections,  @AT@ 72871 @LENGTH@ 64
------INS MethodInvocation@@assertThat(repository.findAllInterfaceProjectedBy()).hasSize(4) @TO@ ExpressionStatement@@MethodInvocation:assertThat(repository.findAllInterfaceProjectedBy()).hasSize(4) @AT@ 72871 @LENGTH@ 63
---------INS MethodInvocation@@MethodName:assertThat:[repository.findAllInterfaceProjectedBy()] @TO@ MethodInvocation@@assertThat(repository.findAllInterfaceProjectedBy()).hasSize(4) @AT@ 72871 @LENGTH@ 52
------------INS MethodInvocation@@repository.findAllInterfaceProjectedBy() @TO@ MethodInvocation@@MethodName:assertThat:[repository.findAllInterfaceProjectedBy()] @AT@ 72882 @LENGTH@ 40
---------------INS SimpleName@@Name:repository @TO@ MethodInvocation@@repository.findAllInterfaceProjectedBy() @AT@ 72882 @LENGTH@ 10
---------------INS SimpleName@@MethodName:findAllInterfaceProjectedBy:[] @TO@ MethodInvocation@@repository.findAllInterfaceProjectedBy() @AT@ 72893 @LENGTH@ 29
---------INS SimpleName@@MethodName:hasSize:[4] @TO@ MethodInvocation@@assertThat(repository.findAllInterfaceProjectedBy()).hasSize(4) @AT@ 72924 @LENGTH@ 10
------------INS NumberLiteral@@4 @TO@ SimpleName@@MethodName:hasSize:[4] @AT@ 72932 @LENGTH@ 1


INS IfStatement@@if (endpoint.getConfiguration().isTopicIsPattern()) {  LOG.info("Stopping Kafka consumer on topic pattern: {}",endpoint.getConfiguration().getTopic());} else {  LOG.info("Stopping Kafka consumer on topic: {}",endpoint.getConfiguration().getTopic());} @TO@ MethodDeclaration@@protected, void, MethodName:doStop, Exception,  @AT@ 6332 @LENGTH@ 292
---INS MethodInvocation@@endpoint.getConfiguration().isTopicIsPattern() @TO@ IfStatement@@if (endpoint.getConfiguration().isTopicIsPattern()) {  LOG.info("Stopping Kafka consumer on topic pattern: {}",endpoint.getConfiguration().getTopic());} else {  LOG.info("Stopping Kafka consumer on topic: {}",endpoint.getConfiguration().getTopic());} @AT@ 6336 @LENGTH@ 46
------INS MethodInvocation@@MethodName:getConfiguration:[] @TO@ MethodInvocation@@endpoint.getConfiguration().isTopicIsPattern() @AT@ 6336 @LENGTH@ 27
------INS SimpleName@@Name:endpoint @TO@ MethodInvocation@@endpoint.getConfiguration().isTopicIsPattern() @AT@ 6336 @LENGTH@ 8
------INS SimpleName@@MethodName:isTopicIsPattern:[] @TO@ MethodInvocation@@endpoint.getConfiguration().isTopicIsPattern() @AT@ 6364 @LENGTH@ 18
---INS Block@@ThenBody:{  LOG.info("Stopping Kafka consumer on topic pattern: {}",endpoint.getConfiguration().getTopic());} @TO@ IfStatement@@if (endpoint.getConfiguration().isTopicIsPattern()) {  LOG.info("Stopping Kafka consumer on topic pattern: {}",endpoint.getConfiguration().getTopic());} else {  LOG.info("Stopping Kafka consumer on topic: {}",endpoint.getConfiguration().getTopic());} @AT@ 6384 @LENGTH@ 121
------INS ExpressionStatement@@MethodInvocation:LOG.info("Stopping Kafka consumer on topic pattern: {}",endpoint.getConfiguration().getTopic()) @TO@ Block@@ThenBody:{  LOG.info("Stopping Kafka consumer on topic pattern: {}",endpoint.getConfiguration().getTopic());} @AT@ 6398 @LENGTH@ 97
---------INS MethodInvocation@@LOG.info("Stopping Kafka consumer on topic pattern: {}",endpoint.getConfiguration().getTopic()) @TO@ ExpressionStatement@@MethodInvocation:LOG.info("Stopping Kafka consumer on topic pattern: {}",endpoint.getConfiguration().getTopic()) @AT@ 6398 @LENGTH@ 96
------------INS SimpleName@@Name:LOG @TO@ MethodInvocation@@LOG.info("Stopping Kafka consumer on topic pattern: {}",endpoint.getConfiguration().getTopic()) @AT@ 6398 @LENGTH@ 3
------------INS SimpleName@@MethodName:info:["Stopping Kafka consumer on topic pattern: {}", endpoint.getConfiguration().getTopic()] @TO@ MethodInvocation@@LOG.info("Stopping Kafka consumer on topic pattern: {}",endpoint.getConfiguration().getTopic()) @AT@ 6402 @LENGTH@ 92
---------------INS StringLiteral@@"Stopping Kafka consumer on topic pattern: {}" @TO@ SimpleName@@MethodName:info:["Stopping Kafka consumer on topic pattern: {}", endpoint.getConfiguration().getTopic()] @AT@ 6407 @LENGTH@ 46
---------------INS MethodInvocation@@endpoint.getConfiguration().getTopic() @TO@ SimpleName@@MethodName:info:["Stopping Kafka consumer on topic pattern: {}", endpoint.getConfiguration().getTopic()] @AT@ 6455 @LENGTH@ 38
------------------INS MethodInvocation@@MethodName:getConfiguration:[] @TO@ MethodInvocation@@endpoint.getConfiguration().getTopic() @AT@ 6455 @LENGTH@ 27
------------------INS SimpleName@@Name:endpoint @TO@ MethodInvocation@@endpoint.getConfiguration().getTopic() @AT@ 6455 @LENGTH@ 8
------------------INS SimpleName@@MethodName:getTopic:[] @TO@ MethodInvocation@@endpoint.getConfiguration().getTopic() @AT@ 6483 @LENGTH@ 10
---INS Block@@ElseBody:{  LOG.info("Stopping Kafka consumer on topic: {}",endpoint.getConfiguration().getTopic());} @TO@ IfStatement@@if (endpoint.getConfiguration().isTopicIsPattern()) {  LOG.info("Stopping Kafka consumer on topic pattern: {}",endpoint.getConfiguration().getTopic());} else {  LOG.info("Stopping Kafka consumer on topic: {}",endpoint.getConfiguration().getTopic());} @AT@ 6511 @LENGTH@ 113
------MOV ExpressionStatement@@MethodInvocation:LOG.info("Stopping Kafka consumer on topic: {}",endpoint.getConfiguration().getTopic()) @TO@ Block@@ElseBody:{  LOG.info("Stopping Kafka consumer on topic: {}",endpoint.getConfiguration().getTopic());} @AT@ 6332 @LENGTH@ 89


UPD VariableDeclarationStatement@@boolean exists=DownloaderHelper.alreadyOnClasspath(camelContext,mg.getArtifactId()); @TO@ boolean exists=DownloaderHelper.alreadyOnClasspath(camelContext,mg.getArtifactId(),mg.getVersion()); @AT@ 4422 @LENGTH@ 87
---UPD VariableDeclarationFragment@@exists=DownloaderHelper.alreadyOnClasspath(camelContext,mg.getArtifactId()) @TO@ exists=DownloaderHelper.alreadyOnClasspath(camelContext,mg.getArtifactId(),mg.getVersion()) @AT@ 4430 @LENGTH@ 78
------UPD MethodInvocation@@DownloaderHelper.alreadyOnClasspath(camelContext,mg.getArtifactId()) @TO@ DownloaderHelper.alreadyOnClasspath(camelContext,mg.getArtifactId(),mg.getVersion()) @AT@ 4439 @LENGTH@ 69
---------UPD SimpleName@@MethodName:alreadyOnClasspath:[camelContext, mg.getArtifactId()] @TO@ MethodName:alreadyOnClasspath:[camelContext, mg.getArtifactId(), mg.getVersion()] @AT@ 4456 @LENGTH@ 52
------------INS MethodInvocation@@mg.getVersion() @TO@ SimpleName@@MethodName:alreadyOnClasspath:[camelContext, mg.getArtifactId()] @AT@ 4509 @LENGTH@ 15
---------------INS SimpleName@@Name:mg @TO@ MethodInvocation@@mg.getVersion() @AT@ 4509 @LENGTH@ 2
---------------INS SimpleName@@MethodName:getVersion:[] @TO@ MethodInvocation@@mg.getVersion() @AT@ 4512 @LENGTH@ 12


UPD ExpressionStatement@@MethodInvocation:assertTrue(sslContext instanceof OpenSslServerContext) @TO@ MethodInvocation:Assumptions.assumeTrue(sslContext instanceof OpenSslClientContext || sslContext instanceof JdkSslContext) @AT@ 3120 @LENGTH@ 55
---UPD MethodInvocation@@assertTrue(sslContext instanceof OpenSslServerContext) @TO@ Assumptions.assumeTrue(sslContext instanceof OpenSslClientContext || sslContext instanceof JdkSslContext) @AT@ 3120 @LENGTH@ 54
------UPD SimpleName@@MethodName:assertTrue:[sslContext instanceof OpenSslServerContext] @TO@ MethodName:assumeTrue:[sslContext instanceof OpenSslClientContext || sslContext instanceof JdkSslContext] @AT@ 3120 @LENGTH@ 54
---------DEL InstanceofExpression@@sslContext instanceof OpenSslServerContext @AT@ 3131 @LENGTH@ 42
---------INS InfixExpression@@sslContext instanceof OpenSslClientContext || sslContext instanceof JdkSslContext @TO@ SimpleName@@MethodName:assertTrue:[sslContext instanceof OpenSslServerContext] @AT@ 3228 @LENGTH@ 81
------------INS InstanceofExpression@@sslContext instanceof OpenSslClientContext @TO@ InfixExpression@@sslContext instanceof OpenSslClientContext || sslContext instanceof JdkSslContext @AT@ 3228 @LENGTH@ 42
---------------MOV SimpleName@@sslContext @TO@ InstanceofExpression@@sslContext instanceof OpenSslClientContext @AT@ 3131 @LENGTH@ 10
---------------MOV SimpleName@@sslContext @TO@ InstanceofExpression@@sslContext instanceof OpenSslClientContext @AT@ 3131 @LENGTH@ 10
---------------MOV Instanceof@@instanceof @TO@ InstanceofExpression@@sslContext instanceof OpenSslClientContext @AT@ 3142 @LENGTH@ 10
---------------MOV Instanceof@@instanceof @TO@ InstanceofExpression@@sslContext instanceof OpenSslClientContext @AT@ 3142 @LENGTH@ 10
---------------MOV SimpleType@@OpenSslServerContext @TO@ InstanceofExpression@@sslContext instanceof OpenSslClientContext @AT@ 3153 @LENGTH@ 20
---------------MOV SimpleType@@OpenSslServerContext @TO@ InstanceofExpression@@sslContext instanceof OpenSslClientContext @AT@ 3153 @LENGTH@ 20
------------INS Operator@@|| @TO@ InfixExpression@@sslContext instanceof OpenSslClientContext || sslContext instanceof JdkSslContext @AT@ 3270 @LENGTH@ 2
------------INS InstanceofExpression@@sslContext instanceof JdkSslContext @TO@ InfixExpression@@sslContext instanceof OpenSslClientContext || sslContext instanceof JdkSslContext @AT@ 3274 @LENGTH@ 35
---------------INS SimpleName@@sslContext @TO@ InstanceofExpression@@sslContext instanceof JdkSslContext @AT@ 3274 @LENGTH@ 10
---------------INS Instanceof@@instanceof @TO@ InstanceofExpression@@sslContext instanceof JdkSslContext @AT@ 3285 @LENGTH@ 10
---------------INS SimpleType@@JdkSslContext @TO@ InstanceofExpression@@sslContext instanceof JdkSslContext @AT@ 3296 @LENGTH@ 13
------INS SimpleName@@Name:Assumptions @TO@ MethodInvocation@@assertTrue(sslContext instanceof OpenSslServerContext) @AT@ 3205 @LENGTH@ 11


UPD VariableDeclarationStatement@@String payload=IOUtils.toString(ClassLoader.getSystemResourceAsStream("xml/article-2.xml")); @TO@ String payload=IOUtils.toString(ClassLoader.getSystemResourceAsStream("xml/article-2.xml"),Charset.defaultCharset()); @AT@ 2168 @LENGTH@ 94
---UPD VariableDeclarationFragment@@payload=IOUtils.toString(ClassLoader.getSystemResourceAsStream("xml/article-2.xml")) @TO@ payload=IOUtils.toString(ClassLoader.getSystemResourceAsStream("xml/article-2.xml"),Charset.defaultCharset()) @AT@ 2175 @LENGTH@ 86
------UPD MethodInvocation@@IOUtils.toString(ClassLoader.getSystemResourceAsStream("xml/article-2.xml")) @TO@ IOUtils.toString(ClassLoader.getSystemResourceAsStream("xml/article-2.xml"),Charset.defaultCharset()) @AT@ 2185 @LENGTH@ 76
---------UPD SimpleName@@MethodName:toString:[ClassLoader.getSystemResourceAsStream("xml/article-2.xml")] @TO@ MethodName:toString:[ClassLoader.getSystemResourceAsStream("xml/article-2.xml"), Charset.defaultCharset()] @AT@ 2193 @LENGTH@ 68
------------INS MethodInvocation@@Charset.defaultCharset() @TO@ SimpleName@@MethodName:toString:[ClassLoader.getSystemResourceAsStream("xml/article-2.xml")] @AT@ 2312 @LENGTH@ 24
---------------INS SimpleName@@Name:Charset @TO@ MethodInvocation@@Charset.defaultCharset() @AT@ 2312 @LENGTH@ 7
---------------INS SimpleName@@MethodName:defaultCharset:[] @TO@ MethodInvocation@@Charset.defaultCharset() @AT@ 2320 @LENGTH@ 16


UPD VariableDeclarationStatement@@CommandContext ctx=CommandContext.of(args,results,terminal); @TO@ CommandContext ctx=CommandContext.of(args,results,terminal,registration); @AT@ 3966 @LENGTH@ 64
---UPD VariableDeclarationFragment@@ctx=CommandContext.of(args,results,terminal) @TO@ ctx=CommandContext.of(args,results,terminal,registration) @AT@ 3981 @LENGTH@ 48
------UPD MethodInvocation@@CommandContext.of(args,results,terminal) @TO@ CommandContext.of(args,results,terminal,registration) @AT@ 3987 @LENGTH@ 42
---------UPD SimpleName@@MethodName:of:[args, results, terminal] @TO@ MethodName:of:[args, results, terminal, registration] @AT@ 4002 @LENGTH@ 27
------------INS SimpleName@@registration @TO@ SimpleName@@MethodName:of:[args, results, terminal] @AT@ 4030 @LENGTH@ 12


UPD SwitchStatement@@switch (format) {case ORC:  job.setBoolean(OrcConf.FORCE_POSITIONAL_EVOLUTION.getHiveConfName(),false);SyntheticFileId fileId=new SyntheticFileId(path,task.file().fileSizeInBytes(),Long.MIN_VALUE);VectorizedReadUtils.handleIcebergProjection(inputFile,task,job,fileId);RecordReader<NullWritable,VectorizedRowBatch> recordReader=null;if (HiveConf.getBoolVar(job,HiveConf.ConfVars.LLAP_IO_ENABLED,LlapProxy.isDaemon()) && LlapProxy.getIo() != null) {recordReader=LlapProxy.getIo().llapVectorizedOrcReaderForPath(fileId,path,null,readColumnIds,job,task.start(),task.length(),reporter);}if (recordReader == null) {InputSplit split=new OrcSplit(path,fileId,task.start(),task.length(),(String[])null,null,false,false,com.google.common.collect.Lists.newArrayList(),0,task.length(),path.getParent(),null);recordReader=new VectorizedOrcInputFormat().getRecordReader(split,job,reporter);}return createVectorizedRowBatchIterable(recordReader,job,partitionColIndices,partitionValues);default :throw new UnsupportedOperationException("Vectorized Hive reading unimplemented for format: " + format);} @TO@ switch (format) {case ORC:  job.setBoolean(OrcConf.FORCE_POSITIONAL_EVOLUTION.getHiveConfName(),false);SyntheticFileId fileId=new SyntheticFileId(path,task.file().fileSizeInBytes(),Long.MIN_VALUE);ByteBuffer serializedOrcTail=VectorizedReadUtils.getSerializedOrcTail(inputFile,fileId,job);OrcTail orcTail=VectorizedReadUtils.deserializeToOrcTail(serializedOrcTail);VectorizedReadUtils.handleIcebergProjection(task,job,VectorizedReadUtils.deserializeToShadedOrcTail(serializedOrcTail).getSchema());RecordReader<NullWritable,VectorizedRowBatch> recordReader=null;long start=task.start();long length=task.length();if (HiveConf.getBoolVar(job,HiveConf.ConfVars.LLAP_IO_ENABLED,LlapProxy.isDaemon()) && LlapProxy.getIo() != null) {recordReader=LlapProxy.getIo().llapVectorizedOrcReaderForPath(fileId,path,null,readColumnIds,job,start,length,reporter);}if (recordReader == null) {InputSplit split=new OrcSplit(path,fileId,start,length,(String[])null,orcTail,false,false,com.google.common.collect.Lists.newArrayList(),0,length,path.getParent(),null);recordReader=new VectorizedOrcInputFormat().getRecordReader(split,job,reporter);}return createVectorizedRowBatchIterable(recordReader,job,partitionColIndices,partitionValues);default :throw new UnsupportedOperationException("Vectorized Hive reading unimplemented for format: " + format);} @AT@ 4888 @LENGTH@ 1893
---UPD ExpressionStatement@@MethodInvocation:VectorizedReadUtils.handleIcebergProjection(inputFile,task,job,fileId) @TO@ MethodInvocation:VectorizedReadUtils.handleIcebergProjection(task,job,VectorizedReadUtils.deserializeToShadedOrcTail(serializedOrcTail).getSchema()) @AT@ 5556 @LENGTH@ 74
------UPD MethodInvocation@@VectorizedReadUtils.handleIcebergProjection(inputFile,task,job,fileId) @TO@ VectorizedReadUtils.handleIcebergProjection(task,job,VectorizedReadUtils.deserializeToShadedOrcTail(serializedOrcTail).getSchema()) @AT@ 5556 @LENGTH@ 73
---------UPD SimpleName@@MethodName:handleIcebergProjection:[inputFile, task, job, fileId] @TO@ MethodName:handleIcebergProjection:[task, job, VectorizedReadUtils.deserializeToShadedOrcTail(serializedOrcTail).getSchema()] @AT@ 5576 @LENGTH@ 53
------------DEL SimpleName@@inputFile @AT@ 5600 @LENGTH@ 9
------------DEL SimpleName@@fileId @AT@ 5622 @LENGTH@ 6
------------INS MethodInvocation@@VectorizedReadUtils.deserializeToShadedOrcTail(serializedOrcTail).getSchema() @TO@ SimpleName@@MethodName:handleIcebergProjection:[inputFile, task, job, fileId] @AT@ 6119 @LENGTH@ 77
---------------INS MethodInvocation@@MethodName:deserializeToShadedOrcTail:[serializedOrcTail] @TO@ MethodInvocation@@VectorizedReadUtils.deserializeToShadedOrcTail(serializedOrcTail).getSchema() @AT@ 6119 @LENGTH@ 65
------------------INS SimpleName@@serializedOrcTail @TO@ MethodInvocation@@MethodName:deserializeToShadedOrcTail:[serializedOrcTail] @AT@ 6166 @LENGTH@ 17
---------------INS SimpleName@@Name:VectorizedReadUtils @TO@ MethodInvocation@@VectorizedReadUtils.deserializeToShadedOrcTail(serializedOrcTail).getSchema() @AT@ 6119 @LENGTH@ 19
---------------INS SimpleName@@MethodName:getSchema:[] @TO@ MethodInvocation@@VectorizedReadUtils.deserializeToShadedOrcTail(serializedOrcTail).getSchema() @AT@ 6185 @LENGTH@ 11
---UPD IfStatement@@if (HiveConf.getBoolVar(job,HiveConf.ConfVars.LLAP_IO_ENABLED,LlapProxy.isDaemon()) && LlapProxy.getIo() != null) {  recordReader=LlapProxy.getIo().llapVectorizedOrcReaderForPath(fileId,path,null,readColumnIds,job,task.start(),task.length(),reporter);} @TO@ if (HiveConf.getBoolVar(job,HiveConf.ConfVars.LLAP_IO_ENABLED,LlapProxy.isDaemon()) && LlapProxy.getIo() != null) {  recordReader=LlapProxy.getIo().llapVectorizedOrcReaderForPath(fileId,path,null,readColumnIds,job,start,length,reporter);} @AT@ 5838 @LENGTH@ 315
------UPD Block@@ThenBody:{  recordReader=LlapProxy.getIo().llapVectorizedOrcReaderForPath(fileId,path,null,readColumnIds,job,task.start(),task.length(),reporter);} @TO@ ThenBody:{  recordReader=LlapProxy.getIo().llapVectorizedOrcReaderForPath(fileId,path,null,readColumnIds,job,start,length,reporter);} @AT@ 5968 @LENGTH@ 185
---------UPD ExpressionStatement@@Assignment:recordReader=LlapProxy.getIo().llapVectorizedOrcReaderForPath(fileId,path,null,readColumnIds,job,task.start(),task.length(),reporter) @TO@ Assignment:recordReader=LlapProxy.getIo().llapVectorizedOrcReaderForPath(fileId,path,null,readColumnIds,job,start,length,reporter) @AT@ 5982 @LENGTH@ 159
------------UPD Assignment@@recordReader=LlapProxy.getIo().llapVectorizedOrcReaderForPath(fileId,path,null,readColumnIds,job,task.start(),task.length(),reporter) @TO@ recordReader=LlapProxy.getIo().llapVectorizedOrcReaderForPath(fileId,path,null,readColumnIds,job,start,length,reporter) @AT@ 5982 @LENGTH@ 158
---------------UPD MethodInvocation@@LlapProxy.getIo().llapVectorizedOrcReaderForPath(fileId,path,null,readColumnIds,job,task.start(),task.length(),reporter) @TO@ LlapProxy.getIo().llapVectorizedOrcReaderForPath(fileId,path,null,readColumnIds,job,start,length,reporter) @AT@ 5997 @LENGTH@ 143
------------------UPD SimpleName@@MethodName:llapVectorizedOrcReaderForPath:[fileId, path, null, readColumnIds, job, task.start(), task.length(), reporter] @TO@ MethodName:llapVectorizedOrcReaderForPath:[fileId, path, null, readColumnIds, job, start, length, reporter] @AT@ 6015 @LENGTH@ 125
---------------------DEL MethodInvocation@@task.start() @AT@ 6102 @LENGTH@ 12
------------------------DEL SimpleName@@Name:task @AT@ 6102 @LENGTH@ 4
------------------------DEL SimpleName@@MethodName:start:[] @AT@ 6107 @LENGTH@ 7
---------------------DEL MethodInvocation@@task.length() @AT@ 6116 @LENGTH@ 13
------------------------DEL SimpleName@@Name:task @AT@ 6116 @LENGTH@ 4
------------------------DEL SimpleName@@MethodName:length:[] @AT@ 6121 @LENGTH@ 8
---------------------INS SimpleName@@start @TO@ SimpleName@@MethodName:llapVectorizedOrcReaderForPath:[fileId, path, null, readColumnIds, job, task.start(), task.length(), reporter] @AT@ 6747 @LENGTH@ 5
---------------------INS SimpleName@@length @TO@ SimpleName@@MethodName:llapVectorizedOrcReaderForPath:[fileId, path, null, readColumnIds, job, task.start(), task.length(), reporter] @AT@ 6754 @LENGTH@ 6
---INS VariableDeclarationStatement@@ByteBuffer serializedOrcTail=VectorizedReadUtils.getSerializedOrcTail(inputFile,fileId,job); @TO@ SwitchStatement@@switch (format) {case ORC:  job.setBoolean(OrcConf.FORCE_POSITIONAL_EVOLUTION.getHiveConfName(),false);SyntheticFileId fileId=new SyntheticFileId(path,task.file().fileSizeInBytes(),Long.MIN_VALUE);VectorizedReadUtils.handleIcebergProjection(inputFile,task,job,fileId);RecordReader<NullWritable,VectorizedRowBatch> recordReader=null;if (HiveConf.getBoolVar(job,HiveConf.ConfVars.LLAP_IO_ENABLED,LlapProxy.isDaemon()) && LlapProxy.getIo() != null) {recordReader=LlapProxy.getIo().llapVectorizedOrcReaderForPath(fileId,path,null,readColumnIds,job,task.start(),task.length(),reporter);}if (recordReader == null) {InputSplit split=new OrcSplit(path,fileId,task.start(),task.length(),(String[])null,null,false,false,com.google.common.collect.Lists.newArrayList(),0,task.length(),path.getParent(),null);recordReader=new VectorizedOrcInputFormat().getRecordReader(split,job,reporter);}return createVectorizedRowBatchIterable(recordReader,job,partitionColIndices,partitionValues);default :throw new UnsupportedOperationException("Vectorized Hive reading unimplemented for format: " + format);} @AT@ 5853 @LENGTH@ 96
------INS SimpleType@@ByteBuffer @TO@ VariableDeclarationStatement@@ByteBuffer serializedOrcTail=VectorizedReadUtils.getSerializedOrcTail(inputFile,fileId,job); @AT@ 5853 @LENGTH@ 10
------INS VariableDeclarationFragment@@serializedOrcTail=VectorizedReadUtils.getSerializedOrcTail(inputFile,fileId,job) @TO@ VariableDeclarationStatement@@ByteBuffer serializedOrcTail=VectorizedReadUtils.getSerializedOrcTail(inputFile,fileId,job); @AT@ 5864 @LENGTH@ 84
---------INS SimpleName@@serializedOrcTail @TO@ VariableDeclarationFragment@@serializedOrcTail=VectorizedReadUtils.getSerializedOrcTail(inputFile,fileId,job) @AT@ 5864 @LENGTH@ 17
---------INS MethodInvocation@@VectorizedReadUtils.getSerializedOrcTail(inputFile,fileId,job) @TO@ VariableDeclarationFragment@@serializedOrcTail=VectorizedReadUtils.getSerializedOrcTail(inputFile,fileId,job) @AT@ 5884 @LENGTH@ 64
------------INS SimpleName@@Name:VectorizedReadUtils @TO@ MethodInvocation@@VectorizedReadUtils.getSerializedOrcTail(inputFile,fileId,job) @AT@ 5884 @LENGTH@ 19
------------INS SimpleName@@MethodName:getSerializedOrcTail:[inputFile, fileId, job] @TO@ MethodInvocation@@VectorizedReadUtils.getSerializedOrcTail(inputFile,fileId,job) @AT@ 5904 @LENGTH@ 44
---------------INS SimpleName@@inputFile @TO@ SimpleName@@MethodName:getSerializedOrcTail:[inputFile, fileId, job] @AT@ 5925 @LENGTH@ 9
---------------INS SimpleName@@fileId @TO@ SimpleName@@MethodName:getSerializedOrcTail:[inputFile, fileId, job] @AT@ 5936 @LENGTH@ 6
---------------INS SimpleName@@job @TO@ SimpleName@@MethodName:getSerializedOrcTail:[inputFile, fileId, job] @AT@ 5944 @LENGTH@ 3
---INS VariableDeclarationStatement@@OrcTail orcTail=VectorizedReadUtils.deserializeToOrcTail(serializedOrcTail); @TO@ SwitchStatement@@switch (format) {case ORC:  job.setBoolean(OrcConf.FORCE_POSITIONAL_EVOLUTION.getHiveConfName(),false);SyntheticFileId fileId=new SyntheticFileId(path,task.file().fileSizeInBytes(),Long.MIN_VALUE);VectorizedReadUtils.handleIcebergProjection(inputFile,task,job,fileId);RecordReader<NullWritable,VectorizedRowBatch> recordReader=null;if (HiveConf.getBoolVar(job,HiveConf.ConfVars.LLAP_IO_ENABLED,LlapProxy.isDaemon()) && LlapProxy.getIo() != null) {recordReader=LlapProxy.getIo().llapVectorizedOrcReaderForPath(fileId,path,null,readColumnIds,job,task.start(),task.length(),reporter);}if (recordReader == null) {InputSplit split=new OrcSplit(path,fileId,task.start(),task.length(),(String[])null,null,false,false,com.google.common.collect.Lists.newArrayList(),0,task.length(),path.getParent(),null);recordReader=new VectorizedOrcInputFormat().getRecordReader(split,job,reporter);}return createVectorizedRowBatchIterable(recordReader,job,partitionColIndices,partitionValues);default :throw new UnsupportedOperationException("Vectorized Hive reading unimplemented for format: " + format);} @AT@ 5960 @LENGTH@ 78
------INS SimpleType@@OrcTail @TO@ VariableDeclarationStatement@@OrcTail orcTail=VectorizedReadUtils.deserializeToOrcTail(serializedOrcTail); @AT@ 5960 @LENGTH@ 7
------INS VariableDeclarationFragment@@orcTail=VectorizedReadUtils.deserializeToOrcTail(serializedOrcTail) @TO@ VariableDeclarationStatement@@OrcTail orcTail=VectorizedReadUtils.deserializeToOrcTail(serializedOrcTail); @AT@ 5968 @LENGTH@ 69
---------INS SimpleName@@orcTail @TO@ VariableDeclarationFragment@@orcTail=VectorizedReadUtils.deserializeToOrcTail(serializedOrcTail) @AT@ 5968 @LENGTH@ 7
---------INS MethodInvocation@@VectorizedReadUtils.deserializeToOrcTail(serializedOrcTail) @TO@ VariableDeclarationFragment@@orcTail=VectorizedReadUtils.deserializeToOrcTail(serializedOrcTail) @AT@ 5978 @LENGTH@ 59
------------INS SimpleName@@Name:VectorizedReadUtils @TO@ MethodInvocation@@VectorizedReadUtils.deserializeToOrcTail(serializedOrcTail) @AT@ 5978 @LENGTH@ 19
------------INS SimpleName@@MethodName:deserializeToOrcTail:[serializedOrcTail] @TO@ MethodInvocation@@VectorizedReadUtils.deserializeToOrcTail(serializedOrcTail) @AT@ 5998 @LENGTH@ 39
---------------INS SimpleName@@serializedOrcTail @TO@ SimpleName@@MethodName:deserializeToOrcTail:[serializedOrcTail] @AT@ 6019 @LENGTH@ 17
---UPD IfStatement@@if (recordReader == null) {  InputSplit split=new OrcSplit(path,fileId,task.start(),task.length(),(String[])null,null,false,false,com.google.common.collect.Lists.newArrayList(),0,task.length(),path.getParent(),null);  recordReader=new VectorizedOrcInputFormat().getRecordReader(split,job,reporter);} @TO@ if (recordReader == null) {  InputSplit split=new OrcSplit(path,fileId,start,length,(String[])null,orcTail,false,false,com.google.common.collect.Lists.newArrayList(),0,length,path.getParent(),null);  recordReader=new VectorizedOrcInputFormat().getRecordReader(split,job,reporter);} @AT@ 6165 @LENGTH@ 368
------UPD Block@@ThenBody:{  InputSplit split=new OrcSplit(path,fileId,task.start(),task.length(),(String[])null,null,false,false,com.google.common.collect.Lists.newArrayList(),0,task.length(),path.getParent(),null);  recordReader=new VectorizedOrcInputFormat().getRecordReader(split,job,reporter);} @TO@ ThenBody:{  InputSplit split=new OrcSplit(path,fileId,start,length,(String[])null,orcTail,false,false,com.google.common.collect.Lists.newArrayList(),0,length,path.getParent(),null);  recordReader=new VectorizedOrcInputFormat().getRecordReader(split,job,reporter);} @AT@ 6191 @LENGTH@ 342
---------UPD VariableDeclarationStatement@@InputSplit split=new OrcSplit(path,fileId,task.start(),task.length(),(String[])null,null,false,false,com.google.common.collect.Lists.newArrayList(),0,task.length(),path.getParent(),null); @TO@ InputSplit split=new OrcSplit(path,fileId,start,length,(String[])null,orcTail,false,false,com.google.common.collect.Lists.newArrayList(),0,length,path.getParent(),null); @AT@ 6205 @LENGTH@ 219
------------UPD VariableDeclarationFragment@@split=new OrcSplit(path,fileId,task.start(),task.length(),(String[])null,null,false,false,com.google.common.collect.Lists.newArrayList(),0,task.length(),path.getParent(),null) @TO@ split=new OrcSplit(path,fileId,start,length,(String[])null,orcTail,false,false,com.google.common.collect.Lists.newArrayList(),0,length,path.getParent(),null) @AT@ 6216 @LENGTH@ 207
---------------UPD ClassInstanceCreation@@OrcSplit[path, fileId, task.start(), task.length(), (String[])null, null, false, false, com.google.common.collect.Lists.newArrayList(), 0, task.length(), path.getParent(), null] @TO@ OrcSplit[path, fileId, start, length, (String[])null, orcTail, false, false, com.google.common.collect.Lists.newArrayList(), 0, length, path.getParent(), null] @AT@ 6224 @LENGTH@ 199
------------------DEL MethodInvocation@@task.start() @AT@ 6251 @LENGTH@ 12
---------------------DEL SimpleName@@Name:task @AT@ 6251 @LENGTH@ 4
---------------------DEL SimpleName@@MethodName:start:[] @AT@ 6256 @LENGTH@ 7
------------------DEL MethodInvocation@@task.length() @AT@ 6265 @LENGTH@ 13
---------------------DEL SimpleName@@Name:task @AT@ 6265 @LENGTH@ 4
---------------------DEL SimpleName@@MethodName:length:[] @AT@ 6270 @LENGTH@ 8
------------------DEL NullLiteral@@null @AT@ 6297 @LENGTH@ 4
------------------DEL MethodInvocation@@task.length() @AT@ 6385 @LENGTH@ 13
---------------------DEL SimpleName@@Name:task @AT@ 6385 @LENGTH@ 4
---------------------DEL SimpleName@@MethodName:length:[] @AT@ 6390 @LENGTH@ 8
------------------INS SimpleName@@start @TO@ ClassInstanceCreation@@OrcSplit[path, fileId, task.start(), task.length(), (String[])null, null, false, false, com.google.common.collect.Lists.newArrayList(), 0, task.length(), path.getParent(), null] @AT@ 6882 @LENGTH@ 5
------------------INS SimpleName@@length @TO@ ClassInstanceCreation@@OrcSplit[path, fileId, task.start(), task.length(), (String[])null, null, false, false, com.google.common.collect.Lists.newArrayList(), 0, task.length(), path.getParent(), null] @AT@ 6889 @LENGTH@ 6
------------------INS SimpleName@@orcTail @TO@ ClassInstanceCreation@@OrcSplit[path, fileId, task.start(), task.length(), (String[])null, null, false, false, com.google.common.collect.Lists.newArrayList(), 0, task.length(), path.getParent(), null] @AT@ 6914 @LENGTH@ 7
------------------INS SimpleName@@length @TO@ ClassInstanceCreation@@OrcSplit[path, fileId, task.start(), task.length(), (String[])null, null, false, false, com.google.common.collect.Lists.newArrayList(), 0, task.length(), path.getParent(), null] @AT@ 7004 @LENGTH@ 6
---INS VariableDeclarationStatement@@long start=task.start(); @TO@ SwitchStatement@@switch (format) {case ORC:  job.setBoolean(OrcConf.FORCE_POSITIONAL_EVOLUTION.getHiveConfName(),false);SyntheticFileId fileId=new SyntheticFileId(path,task.file().fileSizeInBytes(),Long.MIN_VALUE);VectorizedReadUtils.handleIcebergProjection(inputFile,task,job,fileId);RecordReader<NullWritable,VectorizedRowBatch> recordReader=null;if (HiveConf.getBoolVar(job,HiveConf.ConfVars.LLAP_IO_ENABLED,LlapProxy.isDaemon()) && LlapProxy.getIo() != null) {recordReader=LlapProxy.getIo().llapVectorizedOrcReaderForPath(fileId,path,null,readColumnIds,job,task.start(),task.length(),reporter);}if (recordReader == null) {InputSplit split=new OrcSplit(path,fileId,task.start(),task.length(),(String[])null,null,false,false,com.google.common.collect.Lists.newArrayList(),0,task.length(),path.getParent(),null);recordReader=new VectorizedOrcInputFormat().getRecordReader(split,job,reporter);}return createVectorizedRowBatchIterable(recordReader,job,partitionColIndices,partitionValues);default :throw new UnsupportedOperationException("Vectorized Hive reading unimplemented for format: " + format);} @AT@ 6289 @LENGTH@ 26
------INS PrimitiveType@@long @TO@ VariableDeclarationStatement@@long start=task.start(); @AT@ 6289 @LENGTH@ 4
------INS VariableDeclarationFragment@@start=task.start() @TO@ VariableDeclarationStatement@@long start=task.start(); @AT@ 6294 @LENGTH@ 20
---------INS SimpleName@@start @TO@ VariableDeclarationFragment@@start=task.start() @AT@ 6294 @LENGTH@ 5
---------INS MethodInvocation@@task.start() @TO@ VariableDeclarationFragment@@start=task.start() @AT@ 6302 @LENGTH@ 12
------------INS SimpleName@@Name:task @TO@ MethodInvocation@@task.start() @AT@ 6302 @LENGTH@ 4
------------INS SimpleName@@MethodName:start:[] @TO@ MethodInvocation@@task.start() @AT@ 6307 @LENGTH@ 7
---INS VariableDeclarationStatement@@long length=task.length(); @TO@ SwitchStatement@@switch (format) {case ORC:  job.setBoolean(OrcConf.FORCE_POSITIONAL_EVOLUTION.getHiveConfName(),false);SyntheticFileId fileId=new SyntheticFileId(path,task.file().fileSizeInBytes(),Long.MIN_VALUE);VectorizedReadUtils.handleIcebergProjection(inputFile,task,job,fileId);RecordReader<NullWritable,VectorizedRowBatch> recordReader=null;if (HiveConf.getBoolVar(job,HiveConf.ConfVars.LLAP_IO_ENABLED,LlapProxy.isDaemon()) && LlapProxy.getIo() != null) {recordReader=LlapProxy.getIo().llapVectorizedOrcReaderForPath(fileId,path,null,readColumnIds,job,task.start(),task.length(),reporter);}if (recordReader == null) {InputSplit split=new OrcSplit(path,fileId,task.start(),task.length(),(String[])null,null,false,false,com.google.common.collect.Lists.newArrayList(),0,task.length(),path.getParent(),null);recordReader=new VectorizedOrcInputFormat().getRecordReader(split,job,reporter);}return createVectorizedRowBatchIterable(recordReader,job,partitionColIndices,partitionValues);default :throw new UnsupportedOperationException("Vectorized Hive reading unimplemented for format: " + format);} @AT@ 6326 @LENGTH@ 28
------INS PrimitiveType@@long @TO@ VariableDeclarationStatement@@long length=task.length(); @AT@ 6326 @LENGTH@ 4
------INS VariableDeclarationFragment@@length=task.length() @TO@ VariableDeclarationStatement@@long length=task.length(); @AT@ 6331 @LENGTH@ 22
---------INS SimpleName@@length @TO@ VariableDeclarationFragment@@length=task.length() @AT@ 6331 @LENGTH@ 6
---------INS MethodInvocation@@task.length() @TO@ VariableDeclarationFragment@@length=task.length() @AT@ 6340 @LENGTH@ 13
------------INS SimpleName@@Name:task @TO@ MethodInvocation@@task.length() @AT@ 6340 @LENGTH@ 4
------------INS SimpleName@@MethodName:length:[] @TO@ MethodInvocation@@task.length() @AT@ 6345 @LENGTH@ 8


INS MethodDeclaration@@void, MethodName:saveAllAsWithEmptyList,  @TO@ TypeDeclaration@@[@Neo4jIntegrationTest]Neo4jTemplateIT,  @AT@ 31583 @LENGTH@ 180
---INS PrimitiveType@@void @TO@ MethodDeclaration@@void, MethodName:saveAllAsWithEmptyList,  @AT@ 31578 @LENGTH@ 4
---INS SimpleName@@MethodName:saveAllAsWithEmptyList @TO@ MethodDeclaration@@void, MethodName:saveAllAsWithEmptyList,  @AT@ 31583 @LENGTH@ 22
---INS VariableDeclarationStatement@@List<ClosedProjection> projections=neo4jTemplate.saveAllAs(Collections.emptyList(),ClosedProjection.class); @TO@ MethodDeclaration@@void, MethodName:saveAllAsWithEmptyList,  @AT@ 31612 @LENGTH@ 110
------INS ParameterizedType@@List<ClosedProjection> @TO@ VariableDeclarationStatement@@List<ClosedProjection> projections=neo4jTemplate.saveAllAs(Collections.emptyList(),ClosedProjection.class); @AT@ 31612 @LENGTH@ 22
---------INS SimpleType@@List @TO@ ParameterizedType@@List<ClosedProjection> @AT@ 31612 @LENGTH@ 4
---------INS SimpleType@@ClosedProjection @TO@ ParameterizedType@@List<ClosedProjection> @AT@ 31617 @LENGTH@ 16
------INS VariableDeclarationFragment@@projections=neo4jTemplate.saveAllAs(Collections.emptyList(),ClosedProjection.class) @TO@ VariableDeclarationStatement@@List<ClosedProjection> projections=neo4jTemplate.saveAllAs(Collections.emptyList(),ClosedProjection.class); @AT@ 31635 @LENGTH@ 86
---------INS SimpleName@@projections @TO@ VariableDeclarationFragment@@projections=neo4jTemplate.saveAllAs(Collections.emptyList(),ClosedProjection.class) @AT@ 31635 @LENGTH@ 11
---------INS MethodInvocation@@neo4jTemplate.saveAllAs(Collections.emptyList(),ClosedProjection.class) @TO@ VariableDeclarationFragment@@projections=neo4jTemplate.saveAllAs(Collections.emptyList(),ClosedProjection.class) @AT@ 31649 @LENGTH@ 72
------------INS SimpleName@@Name:neo4jTemplate @TO@ MethodInvocation@@neo4jTemplate.saveAllAs(Collections.emptyList(),ClosedProjection.class) @AT@ 31649 @LENGTH@ 13
------------INS SimpleName@@MethodName:saveAllAs:[Collections.emptyList(), ClosedProjection.class] @TO@ MethodInvocation@@neo4jTemplate.saveAllAs(Collections.emptyList(),ClosedProjection.class) @AT@ 31663 @LENGTH@ 58
---------------INS MethodInvocation@@Collections.emptyList() @TO@ SimpleName@@MethodName:saveAllAs:[Collections.emptyList(), ClosedProjection.class] @AT@ 31673 @LENGTH@ 23
------------------INS SimpleName@@Name:Collections @TO@ MethodInvocation@@Collections.emptyList() @AT@ 31673 @LENGTH@ 11
------------------INS SimpleName@@MethodName:emptyList:[] @TO@ MethodInvocation@@Collections.emptyList() @AT@ 31685 @LENGTH@ 11
---------------INS TypeLiteral@@ClosedProjection.class @TO@ SimpleName@@MethodName:saveAllAs:[Collections.emptyList(), ClosedProjection.class] @AT@ 31698 @LENGTH@ 22
---INS ExpressionStatement@@MethodInvocation:assertThat(projections).isEmpty() @TO@ MethodDeclaration@@void, MethodName:saveAllAsWithEmptyList,  @AT@ 31726 @LENGTH@ 34
------INS MethodInvocation@@assertThat(projections).isEmpty() @TO@ ExpressionStatement@@MethodInvocation:assertThat(projections).isEmpty() @AT@ 31726 @LENGTH@ 33
---------INS MethodInvocation@@MethodName:assertThat:[projections] @TO@ MethodInvocation@@assertThat(projections).isEmpty() @AT@ 31726 @LENGTH@ 23
------------INS SimpleName@@projections @TO@ MethodInvocation@@MethodName:assertThat:[projections] @AT@ 31737 @LENGTH@ 11
---------INS SimpleName@@MethodName:isEmpty:[] @TO@ MethodInvocation@@assertThat(projections).isEmpty() @AT@ 31750 @LENGTH@ 9


UPD VariableDeclarationStatement@@final Object[] singletons=new Object[]{ExceptionPredicate.INSTANCE,FalsePredicate.INSTANCE,NotNullPredicate.INSTANCE,NullPredicate.INSTANCE,TruePredicate.INSTANCE}; @TO@ final Object[] singletons={ExceptionPredicate.INSTANCE,FalsePredicate.INSTANCE,NotNullPredicate.INSTANCE,NullPredicate.INSTANCE,TruePredicate.INSTANCE}; @AT@ 29269 @LENGTH@ 241
---UPD VariableDeclarationFragment@@singletons=new Object[]{ExceptionPredicate.INSTANCE,FalsePredicate.INSTANCE,NotNullPredicate.INSTANCE,NullPredicate.INSTANCE,TruePredicate.INSTANCE} @TO@ singletons={ExceptionPredicate.INSTANCE,FalsePredicate.INSTANCE,NotNullPredicate.INSTANCE,NullPredicate.INSTANCE,TruePredicate.INSTANCE} @AT@ 29284 @LENGTH@ 225
------DEL ArrayCreation@@new Object[]{ExceptionPredicate.INSTANCE,FalsePredicate.INSTANCE,NotNullPredicate.INSTANCE,NullPredicate.INSTANCE,TruePredicate.INSTANCE} @AT@ 29297 @LENGTH@ 212
---------DEL ArrayType@@Object[] @AT@ 29301 @LENGTH@ 8
------------DEL SimpleType@@Object @AT@ 29301 @LENGTH@ 6
------MOV ArrayInitializer@@{ExceptionPredicate.INSTANCE,FalsePredicate.INSTANCE,NotNullPredicate.INSTANCE,NullPredicate.INSTANCE,TruePredicate.INSTANCE} @TO@ VariableDeclarationFragment@@singletons=new Object[]{ExceptionPredicate.INSTANCE,FalsePredicate.INSTANCE,NotNullPredicate.INSTANCE,NullPredicate.INSTANCE,TruePredicate.INSTANCE} @AT@ 29310 @LENGTH@ 199


UPD ExpressionStatement@@MethodInvocation:neo4jClient.query(renderer.render(statement)).bindAll(parameters).fetch().one().ifPresent(iterateAndMapNextLevel(relationshipIds,relatedNodeIds,relationshipDescription,PropertyPathWalkStep.empty())) @TO@ MethodInvocation:neo4jClient.query(renderer.render(statement)).bindAll(usedParameters).fetch().one().ifPresent(iterateAndMapNextLevel(relationshipIds,relatedNodeIds,relationshipDescription,PropertyPathWalkStep.empty())) @AT@ 47855 @LENGTH@ 230
---UPD MethodInvocation@@neo4jClient.query(renderer.render(statement)).bindAll(parameters).fetch().one().ifPresent(iterateAndMapNextLevel(relationshipIds,relatedNodeIds,relationshipDescription,PropertyPathWalkStep.empty())) @TO@ neo4jClient.query(renderer.render(statement)).bindAll(usedParameters).fetch().one().ifPresent(iterateAndMapNextLevel(relationshipIds,relatedNodeIds,relationshipDescription,PropertyPathWalkStep.empty())) @AT@ 47855 @LENGTH@ 229
------UPD MethodInvocation@@MethodName:bindAll:[parameters] @TO@ MethodName:bindAll:[usedParameters] @AT@ 47855 @LENGTH@ 72
---------UPD SimpleName@@parameters @TO@ usedParameters @AT@ 47916 @LENGTH@ 10


UPD VariableDeclarationStatement@@Path deployment=targetDir.toPath().resolve(filename); @TO@ Path deployment=Paths.get(project.getBuild().getDirectory()).resolve(filename); @AT@ 13901 @LENGTH@ 55
---UPD VariableDeclarationFragment@@deployment=targetDir.toPath().resolve(filename) @TO@ deployment=Paths.get(project.getBuild().getDirectory()).resolve(filename) @AT@ 13906 @LENGTH@ 49
------UPD MethodInvocation@@targetDir.toPath().resolve(filename) @TO@ Paths.get(project.getBuild().getDirectory()).resolve(filename) @AT@ 13919 @LENGTH@ 36
---------UPD MethodInvocation@@MethodName:toPath:[] @TO@ MethodName:getBuild:[] @AT@ 13919 @LENGTH@ 18
---------UPD SimpleName@@Name:targetDir @TO@ Name:Paths @AT@ 13919 @LENGTH@ 9
---------INS MethodInvocation@@MethodName:get:[project.getBuild().getDirectory()] @TO@ MethodInvocation@@targetDir.toPath().resolve(filename) @AT@ 13919 @LENGTH@ 44
------------INS MethodInvocation@@project.getBuild().getDirectory() @TO@ MethodInvocation@@MethodName:get:[project.getBuild().getDirectory()] @AT@ 13929 @LENGTH@ 33
---------------MOV MethodInvocation@@MethodName:toPath:[] @TO@ MethodInvocation@@project.getBuild().getDirectory() @AT@ 13919 @LENGTH@ 18
---------------MOV MethodInvocation@@MethodName:toPath:[] @TO@ MethodInvocation@@project.getBuild().getDirectory() @AT@ 13919 @LENGTH@ 18
---------------INS SimpleName@@Name:project @TO@ MethodInvocation@@project.getBuild().getDirectory() @AT@ 13929 @LENGTH@ 7
---------------INS SimpleName@@MethodName:getDirectory:[] @TO@ MethodInvocation@@project.getBuild().getDirectory() @AT@ 13948 @LENGTH@ 14


INS MethodDeclaration@@public, void, MethodName:correctlyBuildSortClauseWhenSortingByFunctionAliasAndFunctionContainsNamedParameters,  @TO@ TypeDeclaration@@[@ExtendWith(SpringExtension.class), @ContextConfiguration("classpath:application-context.xml"), @Transactional, public]UserRepositoryTests,  @AT@ 80107 @LENGTH@ 216
---INS Modifier@@public @TO@ MethodDeclaration@@public, void, MethodName:correctlyBuildSortClauseWhenSortingByFunctionAliasAndFunctionContainsNamedParameters,  @AT@ 80107 @LENGTH@ 6
---INS PrimitiveType@@void @TO@ MethodDeclaration@@public, void, MethodName:correctlyBuildSortClauseWhenSortingByFunctionAliasAndFunctionContainsNamedParameters,  @AT@ 80114 @LENGTH@ 4
---INS SimpleName@@MethodName:correctlyBuildSortClauseWhenSortingByFunctionAliasAndFunctionContainsNamedParameters @TO@ MethodDeclaration@@public, void, MethodName:correctlyBuildSortClauseWhenSortingByFunctionAliasAndFunctionContainsNamedParameters,  @AT@ 80119 @LENGTH@ 84
---INS ExpressionStatement@@MethodInvocation:repository.findAllAndSortByFunctionResultNamedParameter("prefix","suffix",Sort.by("idWithPrefixAndSuffix")) @TO@ MethodDeclaration@@public, void, MethodName:correctlyBuildSortClauseWhenSortingByFunctionAliasAndFunctionContainsNamedParameters,  @AT@ 80210 @LENGTH@ 110
------INS MethodInvocation@@repository.findAllAndSortByFunctionResultNamedParameter("prefix","suffix",Sort.by("idWithPrefixAndSuffix")) @TO@ ExpressionStatement@@MethodInvocation:repository.findAllAndSortByFunctionResultNamedParameter("prefix","suffix",Sort.by("idWithPrefixAndSuffix")) @AT@ 80210 @LENGTH@ 109
---------INS SimpleName@@Name:repository @TO@ MethodInvocation@@repository.findAllAndSortByFunctionResultNamedParameter("prefix","suffix",Sort.by("idWithPrefixAndSuffix")) @AT@ 80210 @LENGTH@ 10
---------INS SimpleName@@MethodName:findAllAndSortByFunctionResultNamedParameter:["prefix", "suffix", Sort.by("idWithPrefixAndSuffix")] @TO@ MethodInvocation@@repository.findAllAndSortByFunctionResultNamedParameter("prefix","suffix",Sort.by("idWithPrefixAndSuffix")) @AT@ 80221 @LENGTH@ 98
------------INS StringLiteral@@"prefix" @TO@ SimpleName@@MethodName:findAllAndSortByFunctionResultNamedParameter:["prefix", "suffix", Sort.by("idWithPrefixAndSuffix")] @AT@ 80266 @LENGTH@ 8
------------INS StringLiteral@@"suffix" @TO@ SimpleName@@MethodName:findAllAndSortByFunctionResultNamedParameter:["prefix", "suffix", Sort.by("idWithPrefixAndSuffix")] @AT@ 80276 @LENGTH@ 8
------------INS MethodInvocation@@Sort.by("idWithPrefixAndSuffix") @TO@ SimpleName@@MethodName:findAllAndSortByFunctionResultNamedParameter:["prefix", "suffix", Sort.by("idWithPrefixAndSuffix")] @AT@ 80286 @LENGTH@ 32
---------------INS SimpleName@@Name:Sort @TO@ MethodInvocation@@Sort.by("idWithPrefixAndSuffix") @AT@ 80286 @LENGTH@ 4
---------------INS SimpleName@@MethodName:by:["idWithPrefixAndSuffix"] @TO@ MethodInvocation@@Sort.by("idWithPrefixAndSuffix") @AT@ 80291 @LENGTH@ 27
------------------INS StringLiteral@@"idWithPrefixAndSuffix" @TO@ SimpleName@@MethodName:by:["idWithPrefixAndSuffix"] @AT@ 80294 @LENGTH@ 23


UPD ExpressionStatement@@MethodInvocation:assertFalse(map.values().contains(null)) @TO@ MethodInvocation:assertFalse(map.containsValue(null)) @AT@ 3853 @LENGTH@ 41
---UPD MethodInvocation@@assertFalse(map.values().contains(null)) @TO@ assertFalse(map.containsValue(null)) @AT@ 3853 @LENGTH@ 40
------UPD SimpleName@@MethodName:assertFalse:[map.values().contains(null)] @TO@ MethodName:assertFalse:[map.containsValue(null)] @AT@ 3853 @LENGTH@ 40
---------UPD MethodInvocation@@map.values().contains(null) @TO@ map.containsValue(null) @AT@ 3865 @LENGTH@ 27
------------DEL MethodInvocation@@MethodName:values:[] @AT@ 3865 @LENGTH@ 12
------------UPD SimpleName@@MethodName:contains:[null] @TO@ MethodName:containsValue:[null] @AT@ 3878 @LENGTH@ 14


UPD ExpressionStatement@@MethodInvocation:exchange.getOut().setBody(obj) @TO@ MethodInvocation:exchange.getMessage().setBody(obj) @AT@ 3917 @LENGTH@ 31
---UPD MethodInvocation@@exchange.getOut().setBody(obj) @TO@ exchange.getMessage().setBody(obj) @AT@ 3917 @LENGTH@ 30
------UPD MethodInvocation@@MethodName:getOut:[] @TO@ MethodName:getMessage:[] @AT@ 3917 @LENGTH@ 17


UPD MethodDeclaration@@public, void, MethodName:testCompress197,  @TO@ public, void, MethodName:testCompress197, IOException,  @AT@ 3176 @LENGTH@ 221
---INS SimpleType@@IOException @TO@ MethodDeclaration@@public, void, MethodName:testCompress197,  @AT@ 3213 @LENGTH@ 11
---UPD TryStatement@@try (final TarFile tarFile=new TarFile(getPath("COMPRESS-197.tar"))){} catch (final IOException e) {  fail("COMPRESS-197: " + e.getMessage());} @TO@ try (final TarFile tarFile=new TarFile(getPath("COMPRESS-197.tar"))){}  @AT@ 3216 @LENGTH@ 175
------DEL CatchClause@@catch (final IOException e) {  fail("COMPRESS-197: " + e.getMessage());} @AT@ 3299 @LENGTH@ 92
---------DEL SingleVariableDeclaration@@final IOException e @AT@ 3306 @LENGTH@ 19
------------DEL Modifier@@final @AT@ 3306 @LENGTH@ 5
------------DEL SimpleType@@IOException @AT@ 3312 @LENGTH@ 11
------------DEL SimpleName@@e @AT@ 3324 @LENGTH@ 1
---------DEL ExpressionStatement@@MethodInvocation:fail("COMPRESS-197: " + e.getMessage()) @AT@ 3341 @LENGTH@ 40
------------DEL MethodInvocation@@fail("COMPRESS-197: " + e.getMessage()) @AT@ 3341 @LENGTH@ 39
---------------DEL SimpleName@@MethodName:fail:["COMPRESS-197: " + e.getMessage()] @AT@ 3341 @LENGTH@ 39
------------------DEL InfixExpression@@"COMPRESS-197: " + e.getMessage() @AT@ 3346 @LENGTH@ 33
---------------------DEL StringLiteral@@"COMPRESS-197: " @AT@ 3346 @LENGTH@ 16
---------------------DEL Operator@@+ @AT@ 3362 @LENGTH@ 1
---------------------DEL MethodInvocation@@e.getMessage() @AT@ 3365 @LENGTH@ 14
------------------------DEL SimpleName@@Name:e @AT@ 3365 @LENGTH@ 1
------------------------DEL SimpleName@@MethodName:getMessage:[] @AT@ 3367 @LENGTH@ 12


UPD MethodDeclaration@@public, void, MethodName:PlusMinusMillis,  @TO@ public, void, MethodName:testPlusMinusMillis,  @AT@ 1056 @LENGTH@ 273
---UPD SimpleName@@MethodName:PlusMinusMillis @TO@ MethodName:testPlusMinusMillis @AT@ 1068 @LENGTH@ 15


UPD VariableDeclarationStatement@@Path relativePath=new Path(each.getPath().toString().replace(base.toString(),"")); @TO@ Path relativePath=makeRelative(base,each.getPath()); @AT@ 15716 @LENGTH@ 85
---UPD VariableDeclarationFragment@@relativePath=new Path(each.getPath().toString().replace(base.toString(),"")) @TO@ relativePath=makeRelative(base,each.getPath()) @AT@ 15721 @LENGTH@ 79
------DEL ClassInstanceCreation@@Path[each.getPath().toString().replace(base.toString(),"")] @AT@ 15736 @LENGTH@ 64
---------DEL New@@new @AT@ 15736 @LENGTH@ 3
---------DEL SimpleType@@Path @AT@ 15740 @LENGTH@ 4
---------DEL MethodInvocation@@each.getPath().toString().replace(base.toString(),"") @AT@ 15745 @LENGTH@ 54
------------DEL MethodInvocation@@MethodName:toString:[] @AT@ 15745 @LENGTH@ 25
------------DEL MethodInvocation@@MethodName:getPath:[] @AT@ 15745 @LENGTH@ 14
------------DEL SimpleName@@Name:each @AT@ 15745 @LENGTH@ 4
------INS MethodInvocation@@makeRelative(base,each.getPath()) @TO@ VariableDeclarationFragment@@relativePath=new Path(each.getPath().toString().replace(base.toString(),"")) @AT@ 15736 @LENGTH@ 34
---------MOV SimpleName@@MethodName:replace:[base.toString(), ""] @TO@ MethodInvocation@@makeRelative(base,each.getPath()) @AT@ 15771 @LENGTH@ 28
------------INS SimpleName@@base @TO@ SimpleName@@MethodName:replace:[base.toString(), ""] @AT@ 15749 @LENGTH@ 4


UPD ExpressionStatement@@MethodInvocation:exchange.getOut().setBody("Bye " + body) @TO@ MethodInvocation:exchange.getMessage().setBody("Bye " + body) @AT@ 3787 @LENGTH@ 41
---UPD MethodInvocation@@exchange.getOut().setBody("Bye " + body) @TO@ exchange.getMessage().setBody("Bye " + body) @AT@ 3787 @LENGTH@ 40
------UPD MethodInvocation@@MethodName:getOut:[] @TO@ MethodName:getMessage:[] @AT@ 3787 @LENGTH@ 17


UPD VariableDeclarationStatement@@final Object[] els=new Object[]{"1","3","5","7","2","4","6"}; @TO@ final Object[] els={"1","3","5","7","2","4","6"}; @AT@ 2934 @LENGTH@ 70
---UPD VariableDeclarationFragment@@els=new Object[]{"1","3","5","7","2","4","6"} @TO@ els={"1","3","5","7","2","4","6"} @AT@ 2949 @LENGTH@ 54
------DEL ArrayCreation@@new Object[]{"1","3","5","7","2","4","6"} @AT@ 2955 @LENGTH@ 48
---------DEL ArrayType@@Object[] @AT@ 2959 @LENGTH@ 8
------------DEL SimpleType@@Object @AT@ 2959 @LENGTH@ 6
---------DEL ArrayInitializer@@{"1","3","5","7","2","4","6"} @AT@ 2968 @LENGTH@ 35
------INS ArrayInitializer@@{"1","3","5","7","2","4","6"} @TO@ VariableDeclarationFragment@@els=new Object[]{"1","3","5","7","2","4","6"} @AT@ 2955 @LENGTH@ 35
---------MOV StringLiteral@@"1" @TO@ ArrayInitializer@@{"1","3","5","7","2","4","6"} @AT@ 2969 @LENGTH@ 3
---------MOV StringLiteral@@"3" @TO@ ArrayInitializer@@{"1","3","5","7","2","4","6"} @AT@ 2974 @LENGTH@ 3
---------MOV StringLiteral@@"5" @TO@ ArrayInitializer@@{"1","3","5","7","2","4","6"} @AT@ 2979 @LENGTH@ 3
---------MOV StringLiteral@@"7" @TO@ ArrayInitializer@@{"1","3","5","7","2","4","6"} @AT@ 2984 @LENGTH@ 3
---------MOV StringLiteral@@"2" @TO@ ArrayInitializer@@{"1","3","5","7","2","4","6"} @AT@ 2989 @LENGTH@ 3
---------MOV StringLiteral@@"4" @TO@ ArrayInitializer@@{"1","3","5","7","2","4","6"} @AT@ 2994 @LENGTH@ 3
---------MOV StringLiteral@@"6" @TO@ ArrayInitializer@@{"1","3","5","7","2","4","6"} @AT@ 2999 @LENGTH@ 3


UPD ExpressionStatement@@MethodInvocation:assertThrows(IllegalArgumentException.class,() -> s.prefill(new byte[]{1,2,3})) @TO@ MethodInvocation:assertThrows(IllegalStateException.class,() -> s.prefill(new byte[]{1,2,3})) @AT@ 2149 @LENGTH@ 84
---UPD MethodInvocation@@assertThrows(IllegalArgumentException.class,() -> s.prefill(new byte[]{1,2,3})) @TO@ assertThrows(IllegalStateException.class,() -> s.prefill(new byte[]{1,2,3})) @AT@ 2149 @LENGTH@ 83
------UPD SimpleName@@MethodName:assertThrows:[IllegalArgumentException.class, () -> s.prefill(new byte[]{1,2,3})] @TO@ MethodName:assertThrows:[IllegalStateException.class, () -> s.prefill(new byte[]{1,2,3})] @AT@ 2149 @LENGTH@ 83
---------UPD TypeLiteral@@IllegalArgumentException.class @TO@ IllegalStateException.class @AT@ 2162 @LENGTH@ 30


UPD TryStatement@@try (Transaction transaction=driver.session(bookmarkCapture.createSessionConfig()).beginTransaction()){  long numberOfRelations=transaction.run("MATCH (t:%s) WHERE id(t) = $id RETURN size((t)-->(:Pet)) as numberOfRelations".formatted(labelOfTestSubject),Values.parameters("id",recorded.get(0).getId())).single().get("numberOfRelations").asLong();  assertThat(numberOfRelations).isEqualTo(3L);  numberOfRelations=transaction.run("MATCH (t:%s) WHERE id(t) = $id RETURN size((t)-->(:Hobby)) as numberOfRelations".formatted(labelOfTestSubject),Values.parameters("id",newPerson.getId())).single().get("numberOfRelations").asLong();  assertThat(numberOfRelations).isEqualTo(2L);}  @TO@ try (Transaction transaction=driver.session(bookmarkCapture.createSessionConfig()).beginTransaction()){  long numberOfRelations=transaction.run(("MATCH (t:%s)-[r]->(:Pet) WHERE id(t) = $id RETURN count(r) as numberOfRelations").formatted(labelOfTestSubject),Values.parameters("id",newPerson.getId())).single().get("numberOfRelations").asLong();  assertThat(numberOfRelations).isEqualTo(3L);  numberOfRelations=transaction.run(("MATCH (t:%s)-[r]->(:Hobby) WHERE id(t) = $id RETURN count(r) as numberOfRelations").formatted(labelOfTestSubject),Values.parameters("id",newPerson.getId())).single().get("numberOfRelations").asLong();  assertThat(numberOfRelations).isEqualTo(2L);}  @AT@ 11983 @LENGTH@ 719
---UPD VariableDeclarationStatement@@long numberOfRelations=transaction.run("MATCH (t:%s) WHERE id(t) = $id RETURN size((t)-->(:Pet)) as numberOfRelations".formatted(labelOfTestSubject),Values.parameters("id",recorded.get(0).getId())).single().get("numberOfRelations").asLong(); @TO@ long numberOfRelations=transaction.run(("MATCH (t:%s)-[r]->(:Pet) WHERE id(t) = $id RETURN count(r) as numberOfRelations").formatted(labelOfTestSubject),Values.parameters("id",newPerson.getId())).single().get("numberOfRelations").asLong(); @AT@ 12093 @LENGTH@ 257
------UPD VariableDeclarationFragment@@numberOfRelations=transaction.run("MATCH (t:%s) WHERE id(t) = $id RETURN size((t)-->(:Pet)) as numberOfRelations".formatted(labelOfTestSubject),Values.parameters("id",recorded.get(0).getId())).single().get("numberOfRelations").asLong() @TO@ numberOfRelations=transaction.run(("MATCH (t:%s)-[r]->(:Pet) WHERE id(t) = $id RETURN count(r) as numberOfRelations").formatted(labelOfTestSubject),Values.parameters("id",newPerson.getId())).single().get("numberOfRelations").asLong() @AT@ 12098 @LENGTH@ 251
---------UPD MethodInvocation@@transaction.run("MATCH (t:%s) WHERE id(t) = $id RETURN size((t)-->(:Pet)) as numberOfRelations".formatted(labelOfTestSubject),Values.parameters("id",recorded.get(0).getId())).single().get("numberOfRelations").asLong() @TO@ transaction.run(("MATCH (t:%s)-[r]->(:Pet) WHERE id(t) = $id RETURN count(r) as numberOfRelations").formatted(labelOfTestSubject),Values.parameters("id",newPerson.getId())).single().get("numberOfRelations").asLong() @AT@ 12118 @LENGTH@ 231
------------UPD MethodInvocation@@MethodName:run:["MATCH (t:%s) WHERE id(t) = $id RETURN size((t)-->(:Pet)) as numberOfRelations".formatted(labelOfTestSubject), Values.parameters("id",recorded.get(0).getId())] @TO@ MethodName:run:[("MATCH (t:%s)-[r]->(:Pet) WHERE id(t) = $id RETURN count(r) as numberOfRelations").formatted(labelOfTestSubject), Values.parameters("id",newPerson.getId())] @AT@ 12118 @LENGTH@ 182
---------------UPD MethodInvocation@@"MATCH (t:%s) WHERE id(t) = $id RETURN size((t)-->(:Pet)) as numberOfRelations".formatted(labelOfTestSubject) @TO@ ("MATCH (t:%s)-[r]->(:Pet) WHERE id(t) = $id RETURN count(r) as numberOfRelations").formatted(labelOfTestSubject) @AT@ 12140 @LENGTH@ 109
------------------DEL StringLiteral@@"MATCH (t:%s) WHERE id(t) = $id RETURN size((t)-->(:Pet)) as numberOfRelations" @AT@ 12140 @LENGTH@ 79
------------------INS ParenthesizedExpression@@("MATCH (t:%s)-[r]->(:Pet) WHERE id(t) = $id RETURN count(r) as numberOfRelations") @TO@ MethodInvocation@@"MATCH (t:%s) WHERE id(t) = $id RETURN size((t)-->(:Pet)) as numberOfRelations".formatted(labelOfTestSubject) @AT@ 12142 @LENGTH@ 83
---------------------INS StringLiteral@@"MATCH (t:%s)-[r]->(:Pet) WHERE id(t) = $id RETURN count(r) as numberOfRelations" @TO@ ParenthesizedExpression@@("MATCH (t:%s)-[r]->(:Pet) WHERE id(t) = $id RETURN count(r) as numberOfRelations") @AT@ 12143 @LENGTH@ 81
---------------UPD MethodInvocation@@Values.parameters("id",recorded.get(0).getId()) @TO@ Values.parameters("id",newPerson.getId()) @AT@ 12251 @LENGTH@ 48
------------------UPD SimpleName@@MethodName:parameters:["id", recorded.get(0).getId()] @TO@ MethodName:parameters:["id", newPerson.getId()] @AT@ 12258 @LENGTH@ 41
---------------------UPD MethodInvocation@@recorded.get(0).getId() @TO@ newPerson.getId() @AT@ 12275 @LENGTH@ 23
------------------------DEL MethodInvocation@@MethodName:get:[0] @AT@ 12275 @LENGTH@ 15
---------------------------DEL NumberLiteral@@0 @AT@ 12288 @LENGTH@ 1
------------------------UPD SimpleName@@Name:recorded @TO@ Name:newPerson @AT@ 12275 @LENGTH@ 8
---UPD ExpressionStatement@@Assignment:numberOfRelations=transaction.run("MATCH (t:%s) WHERE id(t) = $id RETURN size((t)-->(:Hobby)) as numberOfRelations".formatted(labelOfTestSubject),Values.parameters("id",newPerson.getId())).single().get("numberOfRelations").asLong() @TO@ Assignment:numberOfRelations=transaction.run(("MATCH (t:%s)-[r]->(:Hobby) WHERE id(t) = $id RETURN count(r) as numberOfRelations").formatted(labelOfTestSubject),Values.parameters("id",newPerson.getId())).single().get("numberOfRelations").asLong() @AT@ 12402 @LENGTH@ 248
------UPD Assignment@@numberOfRelations=transaction.run("MATCH (t:%s) WHERE id(t) = $id RETURN size((t)-->(:Hobby)) as numberOfRelations".formatted(labelOfTestSubject),Values.parameters("id",newPerson.getId())).single().get("numberOfRelations").asLong() @TO@ numberOfRelations=transaction.run(("MATCH (t:%s)-[r]->(:Hobby) WHERE id(t) = $id RETURN count(r) as numberOfRelations").formatted(labelOfTestSubject),Values.parameters("id",newPerson.getId())).single().get("numberOfRelations").asLong() @AT@ 12402 @LENGTH@ 247
---------UPD MethodInvocation@@transaction.run("MATCH (t:%s) WHERE id(t) = $id RETURN size((t)-->(:Hobby)) as numberOfRelations".formatted(labelOfTestSubject),Values.parameters("id",newPerson.getId())).single().get("numberOfRelations").asLong() @TO@ transaction.run(("MATCH (t:%s)-[r]->(:Hobby) WHERE id(t) = $id RETURN count(r) as numberOfRelations").formatted(labelOfTestSubject),Values.parameters("id",newPerson.getId())).single().get("numberOfRelations").asLong() @AT@ 12422 @LENGTH@ 227
------------UPD MethodInvocation@@MethodName:run:["MATCH (t:%s) WHERE id(t) = $id RETURN size((t)-->(:Hobby)) as numberOfRelations".formatted(labelOfTestSubject), Values.parameters("id",newPerson.getId())] @TO@ MethodName:run:[("MATCH (t:%s)-[r]->(:Hobby) WHERE id(t) = $id RETURN count(r) as numberOfRelations").formatted(labelOfTestSubject), Values.parameters("id",newPerson.getId())] @AT@ 12422 @LENGTH@ 178
---------------UPD MethodInvocation@@"MATCH (t:%s) WHERE id(t) = $id RETURN size((t)-->(:Hobby)) as numberOfRelations".formatted(labelOfTestSubject) @TO@ ("MATCH (t:%s)-[r]->(:Hobby) WHERE id(t) = $id RETURN count(r) as numberOfRelations").formatted(labelOfTestSubject) @AT@ 12444 @LENGTH@ 111
------------------DEL StringLiteral@@"MATCH (t:%s) WHERE id(t) = $id RETURN size((t)-->(:Hobby)) as numberOfRelations" @AT@ 12444 @LENGTH@ 81
------------------INS ParenthesizedExpression@@("MATCH (t:%s)-[r]->(:Hobby) WHERE id(t) = $id RETURN count(r) as numberOfRelations") @TO@ MethodInvocation@@"MATCH (t:%s) WHERE id(t) = $id RETURN size((t)-->(:Hobby)) as numberOfRelations".formatted(labelOfTestSubject) @AT@ 12451 @LENGTH@ 85
---------------------INS StringLiteral@@"MATCH (t:%s)-[r]->(:Hobby) WHERE id(t) = $id RETURN count(r) as numberOfRelations" @TO@ ParenthesizedExpression@@("MATCH (t:%s)-[r]->(:Hobby) WHERE id(t) = $id RETURN count(r) as numberOfRelations") @AT@ 12452 @LENGTH@ 83


UPD VariableDeclarationStatement@@VertxOptions options=CamelContextHelper.findByType(context,VertxOptions.class); @TO@ VertxOptions options=CamelContextHelper.findSingleByType(context,VertxOptions.class); @AT@ 4239 @LENGTH@ 82
---UPD VariableDeclarationFragment@@options=CamelContextHelper.findByType(context,VertxOptions.class) @TO@ options=CamelContextHelper.findSingleByType(context,VertxOptions.class) @AT@ 4252 @LENGTH@ 68
------UPD MethodInvocation@@CamelContextHelper.findByType(context,VertxOptions.class) @TO@ CamelContextHelper.findSingleByType(context,VertxOptions.class) @AT@ 4262 @LENGTH@ 58
---------UPD SimpleName@@MethodName:findByType:[context, VertxOptions.class] @TO@ MethodName:findSingleByType:[context, VertxOptions.class] @AT@ 4281 @LENGTH@ 39


UPD ReturnStatement@@MethodInvocation:Spliterators.spliterator(this,0,0) @TO@ ClassInstanceCreation:new IteratorSpliterator<>(this) @AT@ 2193 @LENGTH@ 44
---DEL MethodInvocation@@Spliterators.spliterator(this,0,0) @AT@ 2200 @LENGTH@ 36
------DEL SimpleName@@Name:Spliterators @AT@ 2200 @LENGTH@ 12
------DEL SimpleName@@MethodName:spliterator:[this, 0, 0] @AT@ 2213 @LENGTH@ 23
---------DEL ThisExpression@@this @AT@ 2225 @LENGTH@ 4
---------DEL NumberLiteral@@0 @AT@ 2231 @LENGTH@ 1
---------DEL NumberLiteral@@0 @AT@ 2234 @LENGTH@ 1
---INS ClassInstanceCreation@@IteratorSpliterator<>[this] @TO@ ReturnStatement@@MethodInvocation:Spliterators.spliterator(this,0,0) @AT@ 2232 @LENGTH@ 31
------INS New@@new @TO@ ClassInstanceCreation@@IteratorSpliterator<>[this] @AT@ 2232 @LENGTH@ 3
------INS ParameterizedType@@IteratorSpliterator<> @TO@ ClassInstanceCreation@@IteratorSpliterator<>[this] @AT@ 2236 @LENGTH@ 21
---------INS SimpleType@@IteratorSpliterator @TO@ ParameterizedType@@IteratorSpliterator<> @AT@ 2236 @LENGTH@ 19
------INS ThisExpression@@this @TO@ ClassInstanceCreation@@IteratorSpliterator<>[this] @AT@ 2258 @LENGTH@ 4


INS VariableDeclarationStatement@@Object iml=instance.getMessageListener(); @TO@ MethodDeclaration@@protected, void, MethodName:applyCommonOverrides, @Nullable RabbitListenerEndpoint endpoint, C instance,  @AT@ 4253 @LENGTH@ 43
---INS SimpleType@@Object @TO@ VariableDeclarationStatement@@Object iml=instance.getMessageListener(); @AT@ 4253 @LENGTH@ 6
---INS VariableDeclarationFragment@@iml=instance.getMessageListener() @TO@ VariableDeclarationStatement@@Object iml=instance.getMessageListener(); @AT@ 4260 @LENGTH@ 35
------INS SimpleName@@iml @TO@ VariableDeclarationFragment@@iml=instance.getMessageListener() @AT@ 4260 @LENGTH@ 3
------INS MethodInvocation@@instance.getMessageListener() @TO@ VariableDeclarationFragment@@iml=instance.getMessageListener() @AT@ 4266 @LENGTH@ 29
---------INS SimpleName@@Name:instance @TO@ MethodInvocation@@instance.getMessageListener() @AT@ 4266 @LENGTH@ 8
---------INS SimpleName@@MethodName:getMessageListener:[] @TO@ MethodInvocation@@instance.getMessageListener() @AT@ 4275 @LENGTH@ 20


UPD ExpressionStatement@@Assignment:this.idTypeDescriptor=new TypeDescriptor(ResolvableType.forType(idType.getGenericType()),null,idType.getType().getAnnotations()) @TO@ Assignment:this.idTypeDescriptor=idType.toTypeDescriptor() @AT@ 3190 @LENGTH@ 133
---UPD Assignment@@this.idTypeDescriptor=new TypeDescriptor(ResolvableType.forType(idType.getGenericType()),null,idType.getType().getAnnotations()) @TO@ this.idTypeDescriptor=idType.toTypeDescriptor() @AT@ 3190 @LENGTH@ 132
------INS MethodInvocation@@idType.toTypeDescriptor() @TO@ Assignment@@this.idTypeDescriptor=new TypeDescriptor(ResolvableType.forType(idType.getGenericType()),null,idType.getType().getAnnotations()) @AT@ 3166 @LENGTH@ 25
---------MOV SimpleName@@Name:idType @TO@ MethodInvocation@@idType.toTypeDescriptor() @AT@ 3256 @LENGTH@ 6
---------MOV SimpleName@@MethodName:getGenericType:[] @TO@ MethodInvocation@@idType.toTypeDescriptor() @AT@ 3263 @LENGTH@ 16
------DEL ClassInstanceCreation@@TypeDescriptor[ResolvableType.forType(idType.getGenericType()), null, idType.getType().getAnnotations()] @AT@ 3214 @LENGTH@ 108
---------DEL New@@new @AT@ 3214 @LENGTH@ 3
---------DEL SimpleType@@TypeDescriptor @AT@ 3218 @LENGTH@ 14
---------DEL MethodInvocation@@ResolvableType.forType(idType.getGenericType()) @AT@ 3233 @LENGTH@ 47
------------DEL SimpleName@@Name:ResolvableType @AT@ 3233 @LENGTH@ 14
------------DEL SimpleName@@MethodName:forType:[idType.getGenericType()] @AT@ 3248 @LENGTH@ 32
---------------DEL MethodInvocation@@idType.getGenericType() @AT@ 3256 @LENGTH@ 23
---------DEL NullLiteral@@null @AT@ 3282 @LENGTH@ 4
---------DEL MethodInvocation@@idType.getType().getAnnotations() @AT@ 3288 @LENGTH@ 33
------------DEL MethodInvocation@@MethodName:getType:[] @AT@ 3288 @LENGTH@ 16
------------DEL SimpleName@@Name:idType @AT@ 3288 @LENGTH@ 6
------------DEL SimpleName@@MethodName:getAnnotations:[] @AT@ 3305 @LENGTH@ 16


UPD VariableDeclarationStatement@@boolean allOrNone=Boolean.parseBoolean(getParameter(SalesforceEndpointConfig.ALL_OR_NONE,exchange,USE_BODY,IS_OPTIONAL)); @TO@ boolean allOrNone=Boolean.parseBoolean(getParameter(SalesforceEndpointConfig.ALL_OR_NONE,exchange,IGNORE_BODY,IS_OPTIONAL)); @AT@ 7465 @LENGTH@ 143
---UPD VariableDeclarationFragment@@allOrNone=Boolean.parseBoolean(getParameter(SalesforceEndpointConfig.ALL_OR_NONE,exchange,USE_BODY,IS_OPTIONAL)) @TO@ allOrNone=Boolean.parseBoolean(getParameter(SalesforceEndpointConfig.ALL_OR_NONE,exchange,IGNORE_BODY,IS_OPTIONAL)) @AT@ 7473 @LENGTH@ 134
------UPD MethodInvocation@@Boolean.parseBoolean(getParameter(SalesforceEndpointConfig.ALL_OR_NONE,exchange,USE_BODY,IS_OPTIONAL)) @TO@ Boolean.parseBoolean(getParameter(SalesforceEndpointConfig.ALL_OR_NONE,exchange,IGNORE_BODY,IS_OPTIONAL)) @AT@ 7485 @LENGTH@ 122
---------UPD SimpleName@@MethodName:parseBoolean:[getParameter(SalesforceEndpointConfig.ALL_OR_NONE,exchange,USE_BODY,IS_OPTIONAL)] @TO@ MethodName:parseBoolean:[getParameter(SalesforceEndpointConfig.ALL_OR_NONE,exchange,IGNORE_BODY,IS_OPTIONAL)] @AT@ 7493 @LENGTH@ 114
------------UPD MethodInvocation@@getParameter(SalesforceEndpointConfig.ALL_OR_NONE,exchange,USE_BODY,IS_OPTIONAL) @TO@ getParameter(SalesforceEndpointConfig.ALL_OR_NONE,exchange,IGNORE_BODY,IS_OPTIONAL) @AT@ 7523 @LENGTH@ 83
---------------UPD SimpleName@@MethodName:getParameter:[SalesforceEndpointConfig.ALL_OR_NONE, exchange, USE_BODY, IS_OPTIONAL] @TO@ MethodName:getParameter:[SalesforceEndpointConfig.ALL_OR_NONE, exchange, IGNORE_BODY, IS_OPTIONAL] @AT@ 7523 @LENGTH@ 83
------------------UPD SimpleName@@USE_BODY @TO@ IGNORE_BODY @AT@ 7584 @LENGTH@ 8


UPD IfStatement@@if (getCamelContext().getEndpoint(getEndpoint().getEndpointUri()) == null) {  getCamelContext().addEndpoint(getEndpoint().getEndpointUri(),endpoint);} @TO@ if (getCamelContext().getEndpoint(getEndpoint().getEndpointUri()) == null || getCamelContext().getEndpoint(getEndpoint().getEndpointUri()) != endpoint) {  getCamelContext().addEndpoint(getEndpoint().getEndpointUri(),endpoint);} @AT@ 2645 @LENGTH@ 179
---INS InfixExpression@@getCamelContext().getEndpoint(getEndpoint().getEndpointUri()) == null || getCamelContext().getEndpoint(getEndpoint().getEndpointUri()) != endpoint @TO@ IfStatement@@if (getCamelContext().getEndpoint(getEndpoint().getEndpointUri()) == null) {  getCamelContext().addEndpoint(getEndpoint().getEndpointUri(),endpoint);} @AT@ 2649 @LENGTH@ 166
------MOV InfixExpression@@getCamelContext().getEndpoint(getEndpoint().getEndpointUri()) == null @TO@ InfixExpression@@getCamelContext().getEndpoint(getEndpoint().getEndpointUri()) == null || getCamelContext().getEndpoint(getEndpoint().getEndpointUri()) != endpoint @AT@ 2649 @LENGTH@ 69
------INS Operator@@|| @TO@ InfixExpression@@getCamelContext().getEndpoint(getEndpoint().getEndpointUri()) == null || getCamelContext().getEndpoint(getEndpoint().getEndpointUri()) != endpoint @AT@ 2718 @LENGTH@ 2
------INS InfixExpression@@getCamelContext().getEndpoint(getEndpoint().getEndpointUri()) != endpoint @TO@ InfixExpression@@getCamelContext().getEndpoint(getEndpoint().getEndpointUri()) == null || getCamelContext().getEndpoint(getEndpoint().getEndpointUri()) != endpoint @AT@ 2742 @LENGTH@ 73
---------INS MethodInvocation@@getCamelContext().getEndpoint(getEndpoint().getEndpointUri()) @TO@ InfixExpression@@getCamelContext().getEndpoint(getEndpoint().getEndpointUri()) != endpoint @AT@ 2742 @LENGTH@ 61
------------INS MethodInvocation@@MethodName:getCamelContext:[] @TO@ MethodInvocation@@getCamelContext().getEndpoint(getEndpoint().getEndpointUri()) @AT@ 2742 @LENGTH@ 17
------------INS SimpleName@@MethodName:getEndpoint:[getEndpoint().getEndpointUri()] @TO@ MethodInvocation@@getCamelContext().getEndpoint(getEndpoint().getEndpointUri()) @AT@ 2760 @LENGTH@ 43
---------------INS MethodInvocation@@getEndpoint().getEndpointUri() @TO@ SimpleName@@MethodName:getEndpoint:[getEndpoint().getEndpointUri()] @AT@ 2772 @LENGTH@ 30
------------------INS MethodInvocation@@MethodName:getEndpoint:[] @TO@ MethodInvocation@@getEndpoint().getEndpointUri() @AT@ 2772 @LENGTH@ 13
------------------INS SimpleName@@MethodName:getEndpointUri:[] @TO@ MethodInvocation@@getEndpoint().getEndpointUri() @AT@ 2786 @LENGTH@ 16
---------INS Operator@@!= @TO@ InfixExpression@@getCamelContext().getEndpoint(getEndpoint().getEndpointUri()) != endpoint @AT@ 2803 @LENGTH@ 2
---------INS SimpleName@@endpoint @TO@ InfixExpression@@getCamelContext().getEndpoint(getEndpoint().getEndpointUri()) != endpoint @AT@ 2807 @LENGTH@ 8


UPD ExpressionStatement@@Assignment:sagaService=CamelContextHelper.findByType(endpoint.getCamelContext(),CamelSagaService.class) @TO@ Assignment:sagaService=CamelContextHelper.findSingleByType(endpoint.getCamelContext(),CamelSagaService.class) @AT@ 1542 @LENGTH@ 96
---UPD Assignment@@sagaService=CamelContextHelper.findByType(endpoint.getCamelContext(),CamelSagaService.class) @TO@ sagaService=CamelContextHelper.findSingleByType(endpoint.getCamelContext(),CamelSagaService.class) @AT@ 1542 @LENGTH@ 95
------UPD MethodInvocation@@CamelContextHelper.findByType(endpoint.getCamelContext(),CamelSagaService.class) @TO@ CamelContextHelper.findSingleByType(endpoint.getCamelContext(),CamelSagaService.class) @AT@ 1556 @LENGTH@ 81
---------UPD SimpleName@@MethodName:findByType:[endpoint.getCamelContext(), CamelSagaService.class] @TO@ MethodName:findSingleByType:[endpoint.getCamelContext(), CamelSagaService.class] @AT@ 1575 @LENGTH@ 62


UPD VariableDeclarationStatement@@DefaultErrorHandler answer=new DefaultErrorHandler(camelContext,processor,logger,getBean(Processor.class,definition.getOnRedelivery(),definition.getOnRedeliveryRef()),redeliveryPolicy,getPredicate(definition.getRetryWhile(),definition.getRetryWhileRef()),getExecutorService(definition.getExecutorService(),definition.getExecutorServiceRef()),getBean(Processor.class,definition.getOnPrepareFailure(),definition.getOnPrepareFailureRef()),getBean(Processor.class,definition.getOnExceptionOccurred(),definition.getOnExceptionOccurredRef())); @TO@ DefaultErrorHandler answer=new DefaultErrorHandler(camelContext,processor,logger,getProcessor(definition.getOnRedelivery(),definition.getOnRedeliveryRef()),redeliveryPolicy,getPredicate(definition.getRetryWhile(),definition.getRetryWhileRef()),getExecutorService(definition.getExecutorService(),definition.getExecutorServiceRef()),getProcessor(definition.getOnPrepareFailure(),definition.getOnPrepareFailureRef()),getProcessor(definition.getOnExceptionOccurred(),definition.getOnExceptionOccurredRef())); @AT@ 2053 @LENGTH@ 668
---UPD VariableDeclarationFragment@@answer=new DefaultErrorHandler(camelContext,processor,logger,getBean(Processor.class,definition.getOnRedelivery(),definition.getOnRedeliveryRef()),redeliveryPolicy,getPredicate(definition.getRetryWhile(),definition.getRetryWhileRef()),getExecutorService(definition.getExecutorService(),definition.getExecutorServiceRef()),getBean(Processor.class,definition.getOnPrepareFailure(),definition.getOnPrepareFailureRef()),getBean(Processor.class,definition.getOnExceptionOccurred(),definition.getOnExceptionOccurredRef())) @TO@ answer=new DefaultErrorHandler(camelContext,processor,logger,getProcessor(definition.getOnRedelivery(),definition.getOnRedeliveryRef()),redeliveryPolicy,getPredicate(definition.getRetryWhile(),definition.getRetryWhileRef()),getExecutorService(definition.getExecutorService(),definition.getExecutorServiceRef()),getProcessor(definition.getOnPrepareFailure(),definition.getOnPrepareFailureRef()),getProcessor(definition.getOnExceptionOccurred(),definition.getOnExceptionOccurredRef())) @AT@ 2073 @LENGTH@ 647
------UPD ClassInstanceCreation@@DefaultErrorHandler[camelContext, processor, logger, getBean(Processor.class,definition.getOnRedelivery(),definition.getOnRedeliveryRef()), redeliveryPolicy, getPredicate(definition.getRetryWhile(),definition.getRetryWhileRef()), getExecutorService(definition.getExecutorService(),definition.getExecutorServiceRef()), getBean(Processor.class,definition.getOnPrepareFailure(),definition.getOnPrepareFailureRef()), getBean(Processor.class,definition.getOnExceptionOccurred(),definition.getOnExceptionOccurredRef())] @TO@ DefaultErrorHandler[camelContext, processor, logger, getProcessor(definition.getOnRedelivery(),definition.getOnRedeliveryRef()), redeliveryPolicy, getPredicate(definition.getRetryWhile(),definition.getRetryWhileRef()), getExecutorService(definition.getExecutorService(),definition.getExecutorServiceRef()), getProcessor(definition.getOnPrepareFailure(),definition.getOnPrepareFailureRef()), getProcessor(definition.getOnExceptionOccurred(),definition.getOnExceptionOccurredRef())] @AT@ 2082 @LENGTH@ 638
---------UPD MethodInvocation@@getBean(Processor.class,definition.getOnRedelivery(),definition.getOnRedeliveryRef()) @TO@ getProcessor(definition.getOnRedelivery(),definition.getOnRedeliveryRef()) @AT@ 2172 @LENGTH@ 87
------------UPD SimpleName@@MethodName:getBean:[Processor.class, definition.getOnRedelivery(), definition.getOnRedeliveryRef()] @TO@ MethodName:getProcessor:[definition.getOnRedelivery(), definition.getOnRedeliveryRef()] @AT@ 2172 @LENGTH@ 87
---------------DEL TypeLiteral@@Processor.class @AT@ 2180 @LENGTH@ 15
---------UPD MethodInvocation@@getBean(Processor.class,definition.getOnPrepareFailure(),definition.getOnPrepareFailureRef()) @TO@ getProcessor(definition.getOnPrepareFailure(),definition.getOnPrepareFailureRef()) @AT@ 2505 @LENGTH@ 95
------------UPD SimpleName@@MethodName:getBean:[Processor.class, definition.getOnPrepareFailure(), definition.getOnPrepareFailureRef()] @TO@ MethodName:getProcessor:[definition.getOnPrepareFailure(), definition.getOnPrepareFailureRef()] @AT@ 2505 @LENGTH@ 95
---------------DEL TypeLiteral@@Processor.class @AT@ 2513 @LENGTH@ 15
---------UPD MethodInvocation@@getBean(Processor.class,definition.getOnExceptionOccurred(),definition.getOnExceptionOccurredRef()) @TO@ getProcessor(definition.getOnExceptionOccurred(),definition.getOnExceptionOccurredRef()) @AT@ 2618 @LENGTH@ 101
------------UPD SimpleName@@MethodName:getBean:[Processor.class, definition.getOnExceptionOccurred(), definition.getOnExceptionOccurredRef()] @TO@ MethodName:getProcessor:[definition.getOnExceptionOccurred(), definition.getOnExceptionOccurredRef()] @AT@ 2618 @LENGTH@ 101
---------------DEL TypeLiteral@@Processor.class @AT@ 2626 @LENGTH@ 15


UPD VariableDeclarationStatement@@Message out=exchange.getOut(); @TO@ Message out=exchange.getMessage(); @AT@ 10153 @LENGTH@ 32
---UPD VariableDeclarationFragment@@out=exchange.getOut() @TO@ out=exchange.getMessage() @AT@ 10161 @LENGTH@ 23
------UPD MethodInvocation@@exchange.getOut() @TO@ exchange.getMessage() @AT@ 10167 @LENGTH@ 17
---------UPD SimpleName@@MethodName:getOut:[] @TO@ MethodName:getMessage:[] @AT@ 10176 @LENGTH@ 8


UPD TypeDeclaration@@[public]TestCustomOpenSamlObjects,  @TO@ [public, final]TestCustomOpenSamlObjects,  @AT@ 1784 @LENGTH@ 5387
---INS Modifier@@final @TO@ TypeDeclaration@@[public]TestCustomOpenSamlObjects,  @AT@ 1791 @LENGTH@ 5


INS VariableDeclarationStatement@@Object header=out.getReceivedExchanges().get(0).getIn().getHeader("PersonID"); @TO@ MethodDeclaration@@public, void, MethodName:testSelectOne, Exception,  @AT@ 2379 @LENGTH@ 80
---INS SimpleType@@Object @TO@ VariableDeclarationStatement@@Object header=out.getReceivedExchanges().get(0).getIn().getHeader("PersonID"); @AT@ 2379 @LENGTH@ 6
---INS VariableDeclarationFragment@@header=out.getReceivedExchanges().get(0).getIn().getHeader("PersonID") @TO@ VariableDeclarationStatement@@Object header=out.getReceivedExchanges().get(0).getIn().getHeader("PersonID"); @AT@ 2386 @LENGTH@ 72
------INS SimpleName@@header @TO@ VariableDeclarationFragment@@header=out.getReceivedExchanges().get(0).getIn().getHeader("PersonID") @AT@ 2386 @LENGTH@ 6
------INS MethodInvocation@@out.getReceivedExchanges().get(0).getIn().getHeader("PersonID") @TO@ VariableDeclarationFragment@@header=out.getReceivedExchanges().get(0).getIn().getHeader("PersonID") @AT@ 2395 @LENGTH@ 63
---------INS MethodInvocation@@MethodName:getIn:[] @TO@ MethodInvocation@@out.getReceivedExchanges().get(0).getIn().getHeader("PersonID") @AT@ 2395 @LENGTH@ 41
---------INS MethodInvocation@@MethodName:get:[0] @TO@ MethodInvocation@@out.getReceivedExchanges().get(0).getIn().getHeader("PersonID") @AT@ 2395 @LENGTH@ 33
------------INS NumberLiteral@@0 @TO@ MethodInvocation@@MethodName:get:[0] @AT@ 2426 @LENGTH@ 1
---------INS MethodInvocation@@MethodName:getReceivedExchanges:[] @TO@ MethodInvocation@@out.getReceivedExchanges().get(0).getIn().getHeader("PersonID") @AT@ 2395 @LENGTH@ 26
---------INS SimpleName@@Name:out @TO@ MethodInvocation@@out.getReceivedExchanges().get(0).getIn().getHeader("PersonID") @AT@ 2395 @LENGTH@ 3
---------INS SimpleName@@MethodName:getHeader:["PersonID"] @TO@ MethodInvocation@@out.getReceivedExchanges().get(0).getIn().getHeader("PersonID") @AT@ 2437 @LENGTH@ 21
------------INS StringLiteral@@"PersonID" @TO@ SimpleName@@MethodName:getHeader:["PersonID"] @AT@ 2447 @LENGTH@ 10


UPD ExpressionStatement@@MethodInvocation:e.getOut().setBody(-i) @TO@ MethodInvocation:e.getMessage().setBody(-i) @AT@ 7337 @LENGTH@ 23
---UPD MethodInvocation@@e.getOut().setBody(-i) @TO@ e.getMessage().setBody(-i) @AT@ 7337 @LENGTH@ 22
------UPD MethodInvocation@@MethodName:getOut:[] @TO@ MethodName:getMessage:[] @AT@ 7337 @LENGTH@ 10


UPD IfStatement@@if (s != null && cache != null) {synchronized (cacheLock) {    cache.putIfAbsent(s,s);  }} @TO@ if (s != null && cache != null) {  if (isStoppingOrStopped()) {synchronized (cacheLock) {      cache.putIfAbsent(s,s);    }  } else {    cache.putIfAbsent(s,s);  }} @AT@ 4513 @LENGTH@ 137
---INS Block@@ThenBody:{  if (isStoppingOrStopped()) {synchronized (cacheLock) {      cache.putIfAbsent(s,s);    }  } else {    cache.putIfAbsent(s,s);  }} @TO@ IfStatement@@if (s != null && cache != null) {synchronized (cacheLock) {    cache.putIfAbsent(s,s);  }} @AT@ 4545 @LENGTH@ 359
------INS IfStatement@@if (isStoppingOrStopped()) {synchronized (cacheLock) {    cache.putIfAbsent(s,s);  }} else {  cache.putIfAbsent(s,s);} @TO@ Block@@ThenBody:{  if (isStoppingOrStopped()) {synchronized (cacheLock) {      cache.putIfAbsent(s,s);    }  } else {    cache.putIfAbsent(s,s);  }} @AT@ 4559 @LENGTH@ 335
---------MOV Block@@ThenBody:{synchronized (cacheLock) {    cache.putIfAbsent(s,s);  }} @TO@ IfStatement@@if (isStoppingOrStopped()) {synchronized (cacheLock) {    cache.putIfAbsent(s,s);  }} else {  cache.putIfAbsent(s,s);} @AT@ 4545 @LENGTH@ 105
---------INS MethodInvocation@@MethodName:isStoppingOrStopped:[] @TO@ IfStatement@@if (isStoppingOrStopped()) {synchronized (cacheLock) {    cache.putIfAbsent(s,s);  }} else {  cache.putIfAbsent(s,s);} @AT@ 4563 @LENGTH@ 21
---------INS Block@@ElseBody:{  cache.putIfAbsent(s,s);} @TO@ IfStatement@@if (isStoppingOrStopped()) {synchronized (cacheLock) {    cache.putIfAbsent(s,s);  }} else {  cache.putIfAbsent(s,s);} @AT@ 4789 @LENGTH@ 105
------------INS ExpressionStatement@@MethodInvocation:cache.putIfAbsent(s,s) @TO@ Block@@ElseBody:{  cache.putIfAbsent(s,s);} @AT@ 4856 @LENGTH@ 24
---------------INS MethodInvocation@@cache.putIfAbsent(s,s) @TO@ ExpressionStatement@@MethodInvocation:cache.putIfAbsent(s,s) @AT@ 4856 @LENGTH@ 23
------------------INS SimpleName@@Name:cache @TO@ MethodInvocation@@cache.putIfAbsent(s,s) @AT@ 4856 @LENGTH@ 5
------------------INS SimpleName@@MethodName:putIfAbsent:[s, s] @TO@ MethodInvocation@@cache.putIfAbsent(s,s) @AT@ 4862 @LENGTH@ 17
---------------------INS SimpleName@@s @TO@ SimpleName@@MethodName:putIfAbsent:[s, s] @AT@ 4874 @LENGTH@ 1
---------------------INS SimpleName@@s @TO@ SimpleName@@MethodName:putIfAbsent:[s, s] @AT@ 4877 @LENGTH@ 1


INS ExpressionStatement@@MethodInvocation:assertNull(header,"PersonID header should be null") @TO@ MethodDeclaration@@public, void, MethodName:testSelectOne, Exception,  @AT@ 2468 @LENGTH@ 53
---INS MethodInvocation@@assertNull(header,"PersonID header should be null") @TO@ ExpressionStatement@@MethodInvocation:assertNull(header,"PersonID header should be null") @AT@ 2468 @LENGTH@ 52
------INS SimpleName@@MethodName:assertNull:[header, "PersonID header should be null"] @TO@ MethodInvocation@@assertNull(header,"PersonID header should be null") @AT@ 2468 @LENGTH@ 52
---------INS SimpleName@@header @TO@ SimpleName@@MethodName:assertNull:[header, "PersonID header should be null"] @AT@ 2479 @LENGTH@ 6
---------INS StringLiteral@@"PersonID header should be null" @TO@ SimpleName@@MethodName:assertNull:[header, "PersonID header should be null"] @AT@ 2487 @LENGTH@ 32


INS MethodDeclaration@@public, List<String>, MethodName:getWords,  @TO@ TypeDeclaration@@[public]CommandNotFound, RuntimeException @AT@ 1242 @LENGTH@ 67
---INS Modifier@@public @TO@ MethodDeclaration@@public, List<String>, MethodName:getWords,  @AT@ 1242 @LENGTH@ 6
---INS ParameterizedType@@List<String> @TO@ MethodDeclaration@@public, List<String>, MethodName:getWords,  @AT@ 1249 @LENGTH@ 12
------INS SimpleType@@List @TO@ ParameterizedType@@List<String> @AT@ 1249 @LENGTH@ 4
------INS SimpleType@@String @TO@ ParameterizedType@@List<String> @AT@ 1254 @LENGTH@ 6
---INS SimpleName@@MethodName:getWords @TO@ MethodDeclaration@@public, List<String>, MethodName:getWords,  @AT@ 1262 @LENGTH@ 8
---INS ReturnStatement@@ClassInstanceCreation:new ArrayList<>(words) @TO@ MethodDeclaration@@public, List<String>, MethodName:getWords,  @AT@ 1276 @LENGTH@ 30
------INS ClassInstanceCreation@@ArrayList<>[words] @TO@ ReturnStatement@@ClassInstanceCreation:new ArrayList<>(words) @AT@ 1283 @LENGTH@ 22
---------INS New@@new @TO@ ClassInstanceCreation@@ArrayList<>[words] @AT@ 1283 @LENGTH@ 3
---------INS ParameterizedType@@ArrayList<> @TO@ ClassInstanceCreation@@ArrayList<>[words] @AT@ 1287 @LENGTH@ 11
------------INS SimpleType@@ArrayList @TO@ ParameterizedType@@ArrayList<> @AT@ 1287 @LENGTH@ 9
---------INS SimpleName@@words @TO@ ClassInstanceCreation@@ArrayList<>[words] @AT@ 1299 @LENGTH@ 5


UPD FieldDeclaration@@private, static, final, AtomicBoolean, [initDone=new AtomicBoolean()] @TO@ private, static, final, AtomicBoolean, [INIT_DONE=new AtomicBoolean()] @AT@ 1071 @LENGTH@ 66
---UPD VariableDeclarationFragment@@initDone=new AtomicBoolean() @TO@ INIT_DONE=new AtomicBoolean() @AT@ 1106 @LENGTH@ 30
------UPD SimpleName@@initDone @TO@ INIT_DONE @AT@ 1106 @LENGTH@ 8


UPD ExpressionStatement@@MethodInvocation:exchange.getOut().setBody(event.result().body()) @TO@ MethodInvocation:exchange.getMessage().setBody(event.result().body()) @AT@ 3833 @LENGTH@ 49
---UPD MethodInvocation@@exchange.getOut().setBody(event.result().body()) @TO@ exchange.getMessage().setBody(event.result().body()) @AT@ 3833 @LENGTH@ 48
------UPD MethodInvocation@@MethodName:getOut:[] @TO@ MethodName:getMessage:[] @AT@ 3833 @LENGTH@ 17


UPD ExpressionStatement@@MethodInvocation:newParameters(128,200,300,400,500) @TO@ MethodInvocation:assertThrows(IllegalArgumentException.class,() -> newParameters(128,200,300,400,500)) @AT@ 4076 @LENGTH@ 39
---INS MethodInvocation@@assertThrows(IllegalArgumentException.class,() -> newParameters(128,200,300,400,500)) @TO@ ExpressionStatement@@MethodInvocation:newParameters(128,200,300,400,500) @AT@ 4121 @LENGTH@ 90
------INS SimpleName@@MethodName:assertThrows:[IllegalArgumentException.class, () -> newParameters(128,200,300,400,500)] @TO@ MethodInvocation@@assertThrows(IllegalArgumentException.class,() -> newParameters(128,200,300,400,500)) @AT@ 4121 @LENGTH@ 90
---------INS TypeLiteral@@IllegalArgumentException.class @TO@ SimpleName@@MethodName:assertThrows:[IllegalArgumentException.class, () -> newParameters(128,200,300,400,500)] @AT@ 4134 @LENGTH@ 30
---------INS LambdaExpression@@() -> newParameters(128,200,300,400,500) @TO@ SimpleName@@MethodName:assertThrows:[IllegalArgumentException.class, () -> newParameters(128,200,300,400,500)] @AT@ 4166 @LENGTH@ 44
------------MOV MethodInvocation@@newParameters(128,200,300,400,500) @TO@ LambdaExpression@@() -> newParameters(128,200,300,400,500) @AT@ 4076 @LENGTH@ 38


UPD VariableDeclarationStatement@@Message out=exchange.getOut(); @TO@ Message out=exchange.getMessage(); @AT@ 4427 @LENGTH@ 32
---UPD VariableDeclarationFragment@@out=exchange.getOut() @TO@ out=exchange.getMessage() @AT@ 4435 @LENGTH@ 23
------UPD MethodInvocation@@exchange.getOut() @TO@ exchange.getMessage() @AT@ 4441 @LENGTH@ 17
---------UPD SimpleName@@MethodName:getOut:[] @TO@ MethodName:getMessage:[] @AT@ 4450 @LENGTH@ 8


UPD ExpressionStatement@@MethodInvocation:builder.append("\\w+\\s*\\([\\w\\.,\\s'=]+\\)") @TO@ MethodInvocation:builder.append("\\w+\\s*\\([\\w\\.,\\s'=:\\\\?]+\\)") @AT@ 7917 @LENGTH@ 48
---UPD MethodInvocation@@builder.append("\\w+\\s*\\([\\w\\.,\\s'=]+\\)") @TO@ builder.append("\\w+\\s*\\([\\w\\.,\\s'=:\\\\?]+\\)") @AT@ 7917 @LENGTH@ 47
------UPD SimpleName@@MethodName:append:["\\w+\\s*\\([\\w\\.,\\s'=]+\\)"] @TO@ MethodName:append:["\\w+\\s*\\([\\w\\.,\\s'=:\\\\?]+\\)"] @AT@ 7925 @LENGTH@ 39
---------UPD StringLiteral@@"\\w+\\s*\\([\\w\\.,\\s'=]+\\)" @TO@ "\\w+\\s*\\([\\w\\.,\\s'=:\\\\?]+\\)" @AT@ 7932 @LENGTH@ 31
