UPD SwitchStatement@@switch (part.getType()) {case BETWEEN:  return builder.between(root.<Comparable>get(part.getProperty().toDotPath()),nextAsComparable(iterator),nextAsComparable(iterator));case GREATER_THAN:return builder.greaterThan(getComparablePath(root,part),nextAsComparable(iterator));case LESS_THAN:return builder.lessThan(getComparablePath(root,part),nextAsComparable(iterator));case IS_NULL:return path.isNull();case IS_NOT_NULL:return path.isNotNull();case LIKE:return builder.like(root.<String>get(part.getProperty().toDotPath()),iterator.next().toString());case NOT_LIKE:return builder.not(builder.like(root.<String>get(part.getProperty().toDotPath()),iterator.next().toString()));case SIMPLE_PROPERTY:return builder.equal(path,iterator.next());case NEGATING_SIMPLE_PROPERTY:return builder.notEqual(path,iterator.next());default :throw new IllegalArgumentException("Unsupported keyword + " + part.getType());} @TO@ switch (part.getType()) {case BETWEEN:  return builder.between(root.<Comparable>get(part.getProperty().toDotPath()),nextAsComparable(iterator),nextAsComparable(iterator));case GREATER_THAN:return builder.greaterThan(getComparablePath(root,part),nextAsComparable(iterator));case LESS_THAN:return builder.lessThan(getComparablePath(root,part),nextAsComparable(iterator));case IS_NULL:return path.isNull();case IS_NOT_NULL:return path.isNotNull();case IN:return path.in(nextAsCollection(iterator));case LIKE:return builder.like(root.<String>get(part.getProperty().toDotPath()),iterator.next().toString());case NOT_LIKE:return builder.not(builder.like(root.<String>get(part.getProperty().toDotPath()),iterator.next().toString()));case SIMPLE_PROPERTY:return builder.equal(path,iterator.next());case NEGATING_SIMPLE_PROPERTY:return builder.notEqual(path,iterator.next());default :throw new IllegalArgumentException("Unsupported keyword + " + part.getType());} @AT@ 4891 @LENGTH@ 1286
---INS SwitchCase@@case IN: @TO@ SwitchStatement@@switch (part.getType()) {case BETWEEN:  return builder.between(root.<Comparable>get(part.getProperty().toDotPath()),nextAsComparable(iterator),nextAsComparable(iterator));case GREATER_THAN:return builder.greaterThan(getComparablePath(root,part),nextAsComparable(iterator));case LESS_THAN:return builder.lessThan(getComparablePath(root,part),nextAsComparable(iterator));case IS_NULL:return path.isNull();case IS_NOT_NULL:return path.isNotNull();case LIKE:return builder.like(root.<String>get(part.getProperty().toDotPath()),iterator.next().toString());case NOT_LIKE:return builder.not(builder.like(root.<String>get(part.getProperty().toDotPath()),iterator.next().toString()));case SIMPLE_PROPERTY:return builder.equal(path,iterator.next());case NEGATING_SIMPLE_PROPERTY:return builder.notEqual(path,iterator.next());default :throw new IllegalArgumentException("Unsupported keyword + " + part.getType());} @AT@ 5644 @LENGTH@ 8
------INS SimpleName@@IN @TO@ SwitchCase@@case IN: @AT@ 5649 @LENGTH@ 2
---INS ReturnStatement@@MethodInvocation:path.in(nextAsCollection(iterator)) @TO@ SwitchStatement@@switch (part.getType()) {case BETWEEN:  return builder.between(root.<Comparable>get(part.getProperty().toDotPath()),nextAsComparable(iterator),nextAsComparable(iterator));case GREATER_THAN:return builder.greaterThan(getComparablePath(root,part),nextAsComparable(iterator));case LESS_THAN:return builder.lessThan(getComparablePath(root,part),nextAsComparable(iterator));case IS_NULL:return path.isNull();case IS_NOT_NULL:return path.isNotNull();case LIKE:return builder.like(root.<String>get(part.getProperty().toDotPath()),iterator.next().toString());case NOT_LIKE:return builder.not(builder.like(root.<String>get(part.getProperty().toDotPath()),iterator.next().toString()));case SIMPLE_PROPERTY:return builder.equal(path,iterator.next());case NEGATING_SIMPLE_PROPERTY:return builder.notEqual(path,iterator.next());default :throw new IllegalArgumentException("Unsupported keyword + " + part.getType());} @AT@ 5665 @LENGTH@ 43
------INS MethodInvocation@@path.in(nextAsCollection(iterator)) @TO@ ReturnStatement@@MethodInvocation:path.in(nextAsCollection(iterator)) @AT@ 5672 @LENGTH@ 35
---------INS SimpleName@@Name:path @TO@ MethodInvocation@@path.in(nextAsCollection(iterator)) @AT@ 5672 @LENGTH@ 4
---------INS SimpleName@@MethodName:in:[nextAsCollection(iterator)] @TO@ MethodInvocation@@path.in(nextAsCollection(iterator)) @AT@ 5677 @LENGTH@ 30
------------INS MethodInvocation@@nextAsCollection(iterator) @TO@ SimpleName@@MethodName:in:[nextAsCollection(iterator)] @AT@ 5680 @LENGTH@ 26
---------------INS SimpleName@@MethodName:nextAsCollection:[iterator] @TO@ MethodInvocation@@nextAsCollection(iterator) @AT@ 5680 @LENGTH@ 26
------------------INS SimpleName@@iterator @TO@ SimpleName@@MethodName:nextAsCollection:[iterator] @AT@ 5697 @LENGTH@ 8


UPD MethodDeclaration@@private, String, MethodName:getFtpUrl,  @TO@ protected, String, MethodName:getFtpUrl,  @AT@ 1115 @LENGTH@ 212
---UPD Modifier@@private @TO@ protected @AT@ 1115 @LENGTH@ 7


INS ExpressionStatement@@MethodInvocation:establishSharedConnection() @TO@ MethodDeclaration@@protected, void, MethodName:doStart, Exception,  @AT@ 9961 @LENGTH@ 28
---INS MethodInvocation@@MethodName:establishSharedConnection:[] @TO@ ExpressionStatement@@MethodInvocation:establishSharedConnection() @AT@ 9961 @LENGTH@ 27


UPD ExpressionStatement@@MethodInvocation:componentDescription.setTransactionAttribute(methodIntf,className,transactionAttributeType) @TO@ MethodInvocation:componentDescription.setTransactionAttribute(methodIntf,methodIntf == null ? className : null,transactionAttributeType) @AT@ 4103 @LENGTH@ 94
---UPD MethodInvocation@@componentDescription.setTransactionAttribute(methodIntf,className,transactionAttributeType) @TO@ componentDescription.setTransactionAttribute(methodIntf,methodIntf == null ? className : null,transactionAttributeType) @AT@ 4103 @LENGTH@ 93
------UPD SimpleName@@MethodName:setTransactionAttribute:[methodIntf, className, transactionAttributeType] @TO@ MethodName:setTransactionAttribute:[methodIntf, methodIntf == null ? className : null, transactionAttributeType] @AT@ 4124 @LENGTH@ 72
---------INS ConditionalExpression@@methodIntf == null ? className : null @TO@ SimpleName@@MethodName:setTransactionAttribute:[methodIntf, className, transactionAttributeType] @AT@ 4160 @LENGTH@ 37
------------INS InfixExpression@@methodIntf == null @TO@ ConditionalExpression@@methodIntf == null ? className : null @AT@ 4160 @LENGTH@ 18
---------------INS SimpleName@@methodIntf @TO@ InfixExpression@@methodIntf == null @AT@ 4160 @LENGTH@ 10
---------------INS Operator@@== @TO@ InfixExpression@@methodIntf == null @AT@ 4170 @LENGTH@ 2
---------------INS NullLiteral@@null @TO@ InfixExpression@@methodIntf == null @AT@ 4174 @LENGTH@ 4
------------INS SimpleName@@className @TO@ ConditionalExpression@@methodIntf == null ? className : null @AT@ 4181 @LENGTH@ 9
------------INS NullLiteral@@null @TO@ ConditionalExpression@@methodIntf == null ? className : null @AT@ 4193 @LENGTH@ 4
---------DEL SimpleName@@className @AT@ 4160 @LENGTH@ 9


UPD ExpressionStatement@@MethodInvocation:contextData.put(valueContextKey,contextData) @TO@ MethodInvocation:contextData.put(valueContextKey,valueReference) @AT@ 2600 @LENGTH@ 46
---UPD MethodInvocation@@contextData.put(valueContextKey,contextData) @TO@ contextData.put(valueContextKey,valueReference) @AT@ 2600 @LENGTH@ 45
------UPD SimpleName@@MethodName:put:[valueContextKey, contextData] @TO@ MethodName:put:[valueContextKey, valueReference] @AT@ 2612 @LENGTH@ 33
---------UPD SimpleName@@contextData @TO@ valueReference @AT@ 2633 @LENGTH@ 11


INS ThrowStatement@@ClassInstanceCreation:new ImmediateAcknowledgeAmqpException("Recovered message forces ack (if ack mode requires it): " + message,cause) @TO@ MethodDeclaration@@public, Void, MethodName:recover, Object[] args, Throwable cause,  @AT@ 4625 @LENGTH@ 127
---INS ClassInstanceCreation@@ImmediateAcknowledgeAmqpException["Recovered message forces ack (if ack mode requires it): " + message, cause] @TO@ ThrowStatement@@ClassInstanceCreation:new ImmediateAcknowledgeAmqpException("Recovered message forces ack (if ack mode requires it): " + message,cause) @AT@ 4631 @LENGTH@ 120
------INS New@@new @TO@ ClassInstanceCreation@@ImmediateAcknowledgeAmqpException["Recovered message forces ack (if ack mode requires it): " + message, cause] @AT@ 4631 @LENGTH@ 3
------INS SimpleType@@ImmediateAcknowledgeAmqpException @TO@ ClassInstanceCreation@@ImmediateAcknowledgeAmqpException["Recovered message forces ack (if ack mode requires it): " + message, cause] @AT@ 4635 @LENGTH@ 33
------INS InfixExpression@@"Recovered message forces ack (if ack mode requires it): " + message @TO@ ClassInstanceCreation@@ImmediateAcknowledgeAmqpException["Recovered message forces ack (if ack mode requires it): " + message, cause] @AT@ 4669 @LENGTH@ 74
---------INS StringLiteral@@"Recovered message forces ack (if ack mode requires it): " @TO@ InfixExpression@@"Recovered message forces ack (if ack mode requires it): " + message @AT@ 4669 @LENGTH@ 58
---------INS Operator@@+ @TO@ InfixExpression@@"Recovered message forces ack (if ack mode requires it): " + message @AT@ 4727 @LENGTH@ 1
---------INS SimpleName@@message @TO@ InfixExpression@@"Recovered message forces ack (if ack mode requires it): " + message @AT@ 4736 @LENGTH@ 7
------INS SimpleName@@cause @TO@ ClassInstanceCreation@@ImmediateAcknowledgeAmqpException["Recovered message forces ack (if ack mode requires it): " + message, cause] @AT@ 4745 @LENGTH@ 5


UPD ExpressionStatement@@MethodInvocation:logger.debug("Retrieving delivery for " + this) @TO@ MethodInvocation:logger.trace("Retrieving delivery for " + this) @AT@ 4224 @LENGTH@ 48
---UPD MethodInvocation@@logger.debug("Retrieving delivery for " + this) @TO@ logger.trace("Retrieving delivery for " + this) @AT@ 4224 @LENGTH@ 47
------UPD SimpleName@@MethodName:debug:["Retrieving delivery for " + this] @TO@ MethodName:trace:["Retrieving delivery for " + this] @AT@ 4231 @LENGTH@ 40


UPD MethodDeclaration@@private, String[], MethodName:split, String text, String keyword,  @TO@ private, static, String[], MethodName:split, String text, String keyword,  @AT@ 3601 @LENGTH@ 197
---INS Modifier@@static @TO@ MethodDeclaration@@private, String[], MethodName:split, String text, String keyword,  @AT@ 3609 @LENGTH@ 6


UPD MethodDeclaration@@public, static, void, MethodName:addService, ServerEnvironment serverEnvironment, BatchBuilder batchBuilder,  @TO@ public, static, void, MethodName:addService, ServerEnvironment serverEnvironment, ServiceTarget target,  @AT@ 2892 @LENGTH@ 220
---UPD SingleVariableDeclaration@@BatchBuilder batchBuilder @TO@ ServiceTarget target @AT@ 2959 @LENGTH@ 25
------UPD SimpleType@@BatchBuilder @TO@ ServiceTarget @AT@ 2959 @LENGTH@ 12
------UPD SimpleName@@batchBuilder @TO@ target @AT@ 2972 @LENGTH@ 12
---UPD ExpressionStatement@@MethodInvocation:batchBuilder.addService(SERVICE_NAME,new ServerEnvironmentService(serverEnvironment)).install() @TO@ MethodInvocation:target.addService(SERVICE_NAME,new ServerEnvironmentService(serverEnvironment)).install() @AT@ 2996 @LENGTH@ 110
------UPD MethodInvocation@@batchBuilder.addService(SERVICE_NAME,new ServerEnvironmentService(serverEnvironment)).install() @TO@ target.addService(SERVICE_NAME,new ServerEnvironmentService(serverEnvironment)).install() @AT@ 2996 @LENGTH@ 109
---------UPD SimpleName@@Name:batchBuilder @TO@ Name:target @AT@ 2996 @LENGTH@ 12


UPD ReturnStatement@@SimpleName:memberDetails @TO@ MethodInvocation:decorateFields(memberDetails) @AT@ 1712 @LENGTH@ 21
---INS MethodInvocation@@decorateFields(memberDetails) @TO@ ReturnStatement@@SimpleName:memberDetails @AT@ 1641 @LENGTH@ 29
------INS SimpleName@@MethodName:decorateFields:[memberDetails] @TO@ MethodInvocation@@decorateFields(memberDetails) @AT@ 1641 @LENGTH@ 29
---------INS SimpleName@@memberDetails @TO@ SimpleName@@MethodName:decorateFields:[memberDetails] @AT@ 1656 @LENGTH@ 13
---DEL SimpleName@@memberDetails @AT@ 1719 @LENGTH@ 13


INS MethodDeclaration@@public, String, MethodName:toString,  @TO@ TypeDeclaration@@[public]Binding,  @AT@ 2100 @LENGTH@ 141
---INS Modifier@@public @TO@ MethodDeclaration@@public, String, MethodName:toString,  @AT@ 2100 @LENGTH@ 6
---INS SimpleType@@String @TO@ MethodDeclaration@@public, String, MethodName:toString,  @AT@ 2107 @LENGTH@ 6
---INS SimpleName@@MethodName:toString @TO@ MethodDeclaration@@public, String, MethodName:toString,  @AT@ 2114 @LENGTH@ 8
---INS ReturnStatement@@InfixExpression:"Binding [destination=" + destination + ", exchange="+ exchange+ ", routingKey="+ routingKey+ "]" @TO@ MethodDeclaration@@public, String, MethodName:toString,  @AT@ 2129 @LENGTH@ 109
------INS InfixExpression@@"Binding [destination=" + destination + ", exchange="+ exchange+ ", routingKey="+ routingKey+ "]" @TO@ ReturnStatement@@InfixExpression:"Binding [destination=" + destination + ", exchange="+ exchange+ ", routingKey="+ routingKey+ "]" @AT@ 2136 @LENGTH@ 101
---------INS StringLiteral@@"Binding [destination=" @TO@ InfixExpression@@"Binding [destination=" + destination + ", exchange="+ exchange+ ", routingKey="+ routingKey+ "]" @AT@ 2136 @LENGTH@ 23
---------INS Operator@@+ @TO@ InfixExpression@@"Binding [destination=" + destination + ", exchange="+ exchange+ ", routingKey="+ routingKey+ "]" @AT@ 2159 @LENGTH@ 1
---------INS SimpleName@@destination @TO@ InfixExpression@@"Binding [destination=" + destination + ", exchange="+ exchange+ ", routingKey="+ routingKey+ "]" @AT@ 2162 @LENGTH@ 11
---------INS StringLiteral@@", exchange=" @TO@ InfixExpression@@"Binding [destination=" + destination + ", exchange="+ exchange+ ", routingKey="+ routingKey+ "]" @AT@ 2176 @LENGTH@ 13
---------INS SimpleName@@exchange @TO@ InfixExpression@@"Binding [destination=" + destination + ", exchange="+ exchange+ ", routingKey="+ routingKey+ "]" @AT@ 2192 @LENGTH@ 8
---------INS StringLiteral@@", routingKey=" @TO@ InfixExpression@@"Binding [destination=" + destination + ", exchange="+ exchange+ ", routingKey="+ routingKey+ "]" @AT@ 2203 @LENGTH@ 15
---------INS SimpleName@@routingKey @TO@ InfixExpression@@"Binding [destination=" + destination + ", exchange="+ exchange+ ", routingKey="+ routingKey+ "]" @AT@ 2221 @LENGTH@ 10
---------INS StringLiteral@@"]" @TO@ InfixExpression@@"Binding [destination=" + destination + ", exchange="+ exchange+ ", routingKey="+ routingKey+ "]" @AT@ 2234 @LENGTH@ 3


UPD FieldDeclaration@@public, static, final, int, [PARSE_OSGI_XSERVICE_PROPERTIES=0x0550] @TO@ public, static, final, int, [PARSE_OSGI_PROPERTIES=0x0550] @AT@ 7687 @LENGTH@ 77
---UPD VariableDeclarationFragment@@PARSE_OSGI_XSERVICE_PROPERTIES=0x0550 @TO@ PARSE_OSGI_PROPERTIES=0x0550 @AT@ 7711 @LENGTH@ 52
------UPD SimpleName@@PARSE_OSGI_XSERVICE_PROPERTIES @TO@ PARSE_OSGI_PROPERTIES @AT@ 7711 @LENGTH@ 30


UPD ReturnStatement@@ClassInstanceCreation:new Property(head,type,tail + addTail) @TO@ MethodInvocation:create(head,type,tail + addTail) @AT@ 7590 @LENGTH@ 48
---DEL ClassInstanceCreation@@Property[head, type, tail + addTail] @AT@ 7597 @LENGTH@ 40
------DEL New@@new @AT@ 7597 @LENGTH@ 3
------DEL SimpleType@@Property @AT@ 7601 @LENGTH@ 8
------DEL SimpleName@@head @AT@ 7610 @LENGTH@ 4
------DEL SimpleName@@type @AT@ 7616 @LENGTH@ 4
------DEL InfixExpression@@tail + addTail @AT@ 7622 @LENGTH@ 14
---INS MethodInvocation@@create(head,type,tail + addTail) @TO@ ReturnStatement@@ClassInstanceCreation:new Property(head,type,tail + addTail) @AT@ 7606 @LENGTH@ 34
------INS SimpleName@@MethodName:create:[head, type, tail + addTail] @TO@ MethodInvocation@@create(head,type,tail + addTail) @AT@ 7606 @LENGTH@ 34
---------INS SimpleName@@head @TO@ SimpleName@@MethodName:create:[head, type, tail + addTail] @AT@ 7613 @LENGTH@ 4
---------INS SimpleName@@type @TO@ SimpleName@@MethodName:create:[head, type, tail + addTail] @AT@ 7619 @LENGTH@ 4
---------INS InfixExpression@@tail + addTail @TO@ SimpleName@@MethodName:create:[head, type, tail + addTail] @AT@ 7625 @LENGTH@ 14
------------MOV SimpleName@@tail @TO@ InfixExpression@@tail + addTail @AT@ 7622 @LENGTH@ 4
------------MOV SimpleName@@tail @TO@ InfixExpression@@tail + addTail @AT@ 7622 @LENGTH@ 4
------------MOV Operator@@+ @TO@ InfixExpression@@tail + addTail @AT@ 7626 @LENGTH@ 1
------------MOV SimpleName@@addTail @TO@ InfixExpression@@tail + addTail @AT@ 7629 @LENGTH@ 7


INS FieldDeclaration@@private, long, [bitWorkArea] @TO@ TypeDeclaration@@[public]Base32, BaseNCodec @AT@ 6469 @LENGTH@ 25
---INS Modifier@@private @TO@ FieldDeclaration@@private, long, [bitWorkArea] @AT@ 6469 @LENGTH@ 7
---INS PrimitiveType@@long @TO@ FieldDeclaration@@private, long, [bitWorkArea] @AT@ 6477 @LENGTH@ 4
---INS VariableDeclarationFragment@@bitWorkArea @TO@ FieldDeclaration@@private, long, [bitWorkArea] @AT@ 6482 @LENGTH@ 11
------INS SimpleName@@bitWorkArea @TO@ VariableDeclarationFragment@@bitWorkArea @AT@ 6482 @LENGTH@ 11


UPD FieldDeclaration@@private, final, BlockingDeque<String>, [bag=new LinkedBlockingDeque<String>(4)] @TO@ private, final, BlockingDeque<String>, [bag=new LinkedBlockingDeque<String>(99)] @AT@ 1985 @LENGTH@ 77
---UPD VariableDeclarationFragment@@bag=new LinkedBlockingDeque<String>(4) @TO@ bag=new LinkedBlockingDeque<String>(99) @AT@ 2021 @LENGTH@ 40
------UPD ClassInstanceCreation@@LinkedBlockingDeque<String>[4] @TO@ LinkedBlockingDeque<String>[99] @AT@ 2027 @LENGTH@ 34
---------UPD NumberLiteral@@4 @TO@ 99 @AT@ 2059 @LENGTH@ 1


INS MethodDeclaration@@protected, Class<?>, MethodName:resolveProxyClass, String[] interfaces, IOException, ClassNotFoundException,  @TO@ TypeDeclaration@@[public]ClassLoaderObjectInputStream, ObjectInputStream @AT@ 3253 @LENGTH@ 534
---INS Modifier@@protected @TO@ MethodDeclaration@@protected, Class<?>, MethodName:resolveProxyClass, String[] interfaces, IOException, ClassNotFoundException,  @AT@ 3253 @LENGTH@ 9
---INS ParameterizedType@@Class<?> @TO@ MethodDeclaration@@protected, Class<?>, MethodName:resolveProxyClass, String[] interfaces, IOException, ClassNotFoundException,  @AT@ 3263 @LENGTH@ 8
------INS SimpleType@@Class @TO@ ParameterizedType@@Class<?> @AT@ 3263 @LENGTH@ 5
------INS WildcardType@@? @TO@ ParameterizedType@@Class<?> @AT@ 3269 @LENGTH@ 1
---INS SimpleName@@MethodName:resolveProxyClass @TO@ MethodDeclaration@@protected, Class<?>, MethodName:resolveProxyClass, String[] interfaces, IOException, ClassNotFoundException,  @AT@ 3272 @LENGTH@ 17
---INS SingleVariableDeclaration@@String[] interfaces @TO@ MethodDeclaration@@protected, Class<?>, MethodName:resolveProxyClass, String[] interfaces, IOException, ClassNotFoundException,  @AT@ 3290 @LENGTH@ 19
------INS ArrayType@@String[] @TO@ SingleVariableDeclaration@@String[] interfaces @AT@ 3290 @LENGTH@ 8
---------INS SimpleType@@String @TO@ ArrayType@@String[] @AT@ 3290 @LENGTH@ 6
------INS SimpleName@@interfaces @TO@ SingleVariableDeclaration@@String[] interfaces @AT@ 3299 @LENGTH@ 10
---INS SimpleType@@IOException @TO@ MethodDeclaration@@protected, Class<?>, MethodName:resolveProxyClass, String[] interfaces, IOException, ClassNotFoundException,  @AT@ 3318 @LENGTH@ 11
---INS SimpleType@@ClassNotFoundException @TO@ MethodDeclaration@@protected, Class<?>, MethodName:resolveProxyClass, String[] interfaces, IOException, ClassNotFoundException,  @AT@ 3343 @LENGTH@ 22
---INS VariableDeclarationStatement@@Class<?>[] interfaceClasses=new Class[interfaces.length]; @TO@ MethodDeclaration@@protected, Class<?>, MethodName:resolveProxyClass, String[] interfaces, IOException, ClassNotFoundException,  @AT@ 3376 @LENGTH@ 59
------INS ArrayType@@Class<?>[] @TO@ VariableDeclarationStatement@@Class<?>[] interfaceClasses=new Class[interfaces.length]; @AT@ 3376 @LENGTH@ 10
---------INS ParameterizedType@@Class<?> @TO@ ArrayType@@Class<?>[] @AT@ 3376 @LENGTH@ 8
------------INS SimpleType@@Class @TO@ ParameterizedType@@Class<?> @AT@ 3376 @LENGTH@ 5
------------INS WildcardType@@? @TO@ ParameterizedType@@Class<?> @AT@ 3382 @LENGTH@ 1
------INS VariableDeclarationFragment@@interfaceClasses=new Class[interfaces.length] @TO@ VariableDeclarationStatement@@Class<?>[] interfaceClasses=new Class[interfaces.length]; @AT@ 3387 @LENGTH@ 47
---------INS SimpleName@@interfaceClasses @TO@ VariableDeclarationFragment@@interfaceClasses=new Class[interfaces.length] @AT@ 3387 @LENGTH@ 16
---------INS ArrayCreation@@new Class[interfaces.length] @TO@ VariableDeclarationFragment@@interfaceClasses=new Class[interfaces.length] @AT@ 3406 @LENGTH@ 28
------------INS ArrayType@@Class[] @TO@ ArrayCreation@@new Class[interfaces.length] @AT@ 3410 @LENGTH@ 24
---------------INS SimpleType@@Class @TO@ ArrayType@@Class[] @AT@ 3410 @LENGTH@ 5
------------INS QualifiedName@@interfaces.length @TO@ ArrayCreation@@new Class[interfaces.length] @AT@ 3416 @LENGTH@ 17
---------------INS SimpleName@@interfaces @TO@ QualifiedName@@interfaces.length @AT@ 3416 @LENGTH@ 10
---------------INS SimpleName@@length @TO@ QualifiedName@@interfaces.length @AT@ 3427 @LENGTH@ 6
---INS ForStatement@@for (int i=0; i < interfaces.length; i++) {  interfaceClasses[i]=Class.forName(interfaces[i],false,classLoader);} @TO@ MethodDeclaration@@protected, Class<?>, MethodName:resolveProxyClass, String[] interfaces, IOException, ClassNotFoundException,  @AT@ 3444 @LENGTH@ 139
------INS VariableDeclarationExpression@@int i=0 @TO@ ForStatement@@for (int i=0; i < interfaces.length; i++) {  interfaceClasses[i]=Class.forName(interfaces[i],false,classLoader);} @AT@ 3449 @LENGTH@ 9
---------INS PrimitiveType@@int @TO@ VariableDeclarationExpression@@int i=0 @AT@ 3449 @LENGTH@ 3
---------INS VariableDeclarationFragment@@i=0 @TO@ VariableDeclarationExpression@@int i=0 @AT@ 3453 @LENGTH@ 5
------------INS SimpleName@@i @TO@ VariableDeclarationFragment@@i=0 @AT@ 3453 @LENGTH@ 1
------------INS NumberLiteral@@0 @TO@ VariableDeclarationFragment@@i=0 @AT@ 3457 @LENGTH@ 1
------INS InfixExpression@@i < interfaces.length @TO@ ForStatement@@for (int i=0; i < interfaces.length; i++) {  interfaceClasses[i]=Class.forName(interfaces[i],false,classLoader);} @AT@ 3460 @LENGTH@ 21
---------INS SimpleName@@i @TO@ InfixExpression@@i < interfaces.length @AT@ 3460 @LENGTH@ 1
---------INS Operator@@< @TO@ InfixExpression@@i < interfaces.length @AT@ 3461 @LENGTH@ 1
---------INS QualifiedName@@interfaces.length @TO@ InfixExpression@@i < interfaces.length @AT@ 3464 @LENGTH@ 17
------------INS SimpleName@@interfaces @TO@ QualifiedName@@interfaces.length @AT@ 3464 @LENGTH@ 10
------------INS SimpleName@@length @TO@ QualifiedName@@interfaces.length @AT@ 3475 @LENGTH@ 6
------INS PostfixExpression@@i++ @TO@ ForStatement@@for (int i=0; i < interfaces.length; i++) {  interfaceClasses[i]=Class.forName(interfaces[i],false,classLoader);} @AT@ 3483 @LENGTH@ 3
---------INS SimpleName@@i @TO@ PostfixExpression@@i++ @AT@ 3483 @LENGTH@ 1
---------INS Operator@@++ @TO@ PostfixExpression@@i++ @AT@ 3485 @LENGTH@ 2
------INS ExpressionStatement@@Assignment:interfaceClasses[i]=Class.forName(interfaces[i],false,classLoader) @TO@ ForStatement@@for (int i=0; i < interfaces.length; i++) {  interfaceClasses[i]=Class.forName(interfaces[i],false,classLoader);} @AT@ 3502 @LENGTH@ 71
---------INS Assignment@@interfaceClasses[i]=Class.forName(interfaces[i],false,classLoader) @TO@ ExpressionStatement@@Assignment:interfaceClasses[i]=Class.forName(interfaces[i],false,classLoader) @AT@ 3502 @LENGTH@ 70
------------INS ArrayAccess@@interfaceClasses[i] @TO@ Assignment@@interfaceClasses[i]=Class.forName(interfaces[i],false,classLoader) @AT@ 3502 @LENGTH@ 19
---------------INS SimpleName@@interfaceClasses @TO@ ArrayAccess@@interfaceClasses[i] @AT@ 3502 @LENGTH@ 16
---------------INS SimpleName@@i @TO@ ArrayAccess@@interfaceClasses[i] @AT@ 3519 @LENGTH@ 1
------------INS Operator@@= @TO@ Assignment@@interfaceClasses[i]=Class.forName(interfaces[i],false,classLoader) @AT@ 3521 @LENGTH@ 1
------------INS MethodInvocation@@Class.forName(interfaces[i],false,classLoader) @TO@ Assignment@@interfaceClasses[i]=Class.forName(interfaces[i],false,classLoader) @AT@ 3524 @LENGTH@ 48
---------------INS SimpleName@@Name:Class @TO@ MethodInvocation@@Class.forName(interfaces[i],false,classLoader) @AT@ 3524 @LENGTH@ 5
---------------INS SimpleName@@MethodName:forName:[interfaces[i], false, classLoader] @TO@ MethodInvocation@@Class.forName(interfaces[i],false,classLoader) @AT@ 3530 @LENGTH@ 42
------------------INS ArrayAccess@@interfaces[i] @TO@ SimpleName@@MethodName:forName:[interfaces[i], false, classLoader] @AT@ 3538 @LENGTH@ 13
---------------------INS SimpleName@@interfaces @TO@ ArrayAccess@@interfaces[i] @AT@ 3538 @LENGTH@ 10
---------------------INS SimpleName@@i @TO@ ArrayAccess@@interfaces[i] @AT@ 3549 @LENGTH@ 1
------------------INS BooleanLiteral@@false @TO@ SimpleName@@MethodName:forName:[interfaces[i], false, classLoader] @AT@ 3553 @LENGTH@ 5
------------------INS SimpleName@@classLoader @TO@ SimpleName@@MethodName:forName:[interfaces[i], false, classLoader] @AT@ 3560 @LENGTH@ 11
---INS TryStatement@@try {  return Proxy.getProxyClass(classLoader,interfaceClasses);} catch (IllegalArgumentException e) {  return super.resolveProxyClass(interfaces);} @TO@ MethodDeclaration@@protected, Class<?>, MethodName:resolveProxyClass, String[] interfaces, IOException, ClassNotFoundException,  @AT@ 3592 @LENGTH@ 189
------INS ReturnStatement@@MethodInvocation:Proxy.getProxyClass(classLoader,interfaceClasses) @TO@ TryStatement@@try {  return Proxy.getProxyClass(classLoader,interfaceClasses);} catch (IllegalArgumentException e) {  return super.resolveProxyClass(interfaces);} @AT@ 3610 @LENGTH@ 58
---------INS MethodInvocation@@Proxy.getProxyClass(classLoader,interfaceClasses) @TO@ ReturnStatement@@MethodInvocation:Proxy.getProxyClass(classLoader,interfaceClasses) @AT@ 3617 @LENGTH@ 50
------------INS SimpleName@@Name:Proxy @TO@ MethodInvocation@@Proxy.getProxyClass(classLoader,interfaceClasses) @AT@ 3617 @LENGTH@ 5
------------INS SimpleName@@MethodName:getProxyClass:[classLoader, interfaceClasses] @TO@ MethodInvocation@@Proxy.getProxyClass(classLoader,interfaceClasses) @AT@ 3623 @LENGTH@ 44
---------------INS SimpleName@@classLoader @TO@ SimpleName@@MethodName:getProxyClass:[classLoader, interfaceClasses] @AT@ 3637 @LENGTH@ 11
---------------INS SimpleName@@interfaceClasses @TO@ SimpleName@@MethodName:getProxyClass:[classLoader, interfaceClasses] @AT@ 3650 @LENGTH@ 16
------INS CatchClause@@catch (IllegalArgumentException e) {  return super.resolveProxyClass(interfaces);} @TO@ TryStatement@@try {  return Proxy.getProxyClass(classLoader,interfaceClasses);} catch (IllegalArgumentException e) {  return super.resolveProxyClass(interfaces);} @AT@ 3679 @LENGTH@ 102
---------INS SingleVariableDeclaration@@IllegalArgumentException e @TO@ CatchClause@@catch (IllegalArgumentException e) {  return super.resolveProxyClass(interfaces);} @AT@ 3686 @LENGTH@ 26
------------INS SimpleType@@IllegalArgumentException @TO@ SingleVariableDeclaration@@IllegalArgumentException e @AT@ 3686 @LENGTH@ 24
------------INS SimpleName@@e @TO@ SingleVariableDeclaration@@IllegalArgumentException e @AT@ 3711 @LENGTH@ 1
---------INS ReturnStatement@@SuperMethodInvocation:super.resolveProxyClass(interfaces) @TO@ CatchClause@@catch (IllegalArgumentException e) {  return super.resolveProxyClass(interfaces);} @AT@ 3728 @LENGTH@ 43
------------INS SuperMethodInvocation@@super.resolveProxyClass(interfaces) @TO@ ReturnStatement@@SuperMethodInvocation:super.resolveProxyClass(interfaces) @AT@ 3735 @LENGTH@ 35
---------------INS SimpleName@@MethodName:resolveProxyClass:[interfaces] @TO@ SuperMethodInvocation@@super.resolveProxyClass(interfaces) @AT@ 3741 @LENGTH@ 17
---------------INS SimpleName@@interfaces @TO@ SuperMethodInvocation@@super.resolveProxyClass(interfaces) @AT@ 3759 @LENGTH@ 10


UPD TryStatement@@try {  ClassPathXmlApplicationContext ctx=new ClassPathXmlApplicationContext("org/apache/camel/spring/processor/filterNoChild.xml");  fail("Should thrown an exception");} catch (RuntimeCamelException e) {  FailedToCreateRouteException cause=assertIsInstanceOf(FailedToCreateRouteException.class,e.getCause());  IllegalArgumentException iae=assertIsInstanceOf(IllegalArgumentException.class,cause.getCause());  assertEquals("Definition has no children on Filter[xpath{$foo = 'bar'} -> []]",iae.getMessage());} @TO@ try {  new ClassPathXmlApplicationContext("org/apache/camel/spring/processor/filterNoChild.xml");  fail("Should thrown an exception");} catch (RuntimeCamelException e) {  FailedToCreateRouteException cause=assertIsInstanceOf(FailedToCreateRouteException.class,e.getCause());  IllegalArgumentException iae=assertIsInstanceOf(IllegalArgumentException.class,cause.getCause());  assertEquals("Definition has no children on Filter[xpath{$foo = 'bar'} -> []]",iae.getMessage());} @AT@ 1331 @LENGTH@ 590
---DEL VariableDeclarationStatement@@ClassPathXmlApplicationContext ctx=new ClassPathXmlApplicationContext("org/apache/camel/spring/processor/filterNoChild.xml"); @AT@ 1349 @LENGTH@ 127
------DEL SimpleType@@ClassPathXmlApplicationContext @AT@ 1349 @LENGTH@ 30
------DEL VariableDeclarationFragment@@ctx=new ClassPathXmlApplicationContext("org/apache/camel/spring/processor/filterNoChild.xml") @AT@ 1380 @LENGTH@ 95
---------DEL SimpleName@@ctx @AT@ 1380 @LENGTH@ 3
---------DEL ClassInstanceCreation@@ClassPathXmlApplicationContext["org/apache/camel/spring/processor/filterNoChild.xml"] @AT@ 1386 @LENGTH@ 89
---INS ExpressionStatement@@ClassInstanceCreation:new ClassPathXmlApplicationContext("org/apache/camel/spring/processor/filterNoChild.xml") @TO@ TryStatement@@try {  ClassPathXmlApplicationContext ctx=new ClassPathXmlApplicationContext("org/apache/camel/spring/processor/filterNoChild.xml");  fail("Should thrown an exception");} catch (RuntimeCamelException e) {  FailedToCreateRouteException cause=assertIsInstanceOf(FailedToCreateRouteException.class,e.getCause());  IllegalArgumentException iae=assertIsInstanceOf(IllegalArgumentException.class,cause.getCause());  assertEquals("Definition has no children on Filter[xpath{$foo = 'bar'} -> []]",iae.getMessage());} @AT@ 1349 @LENGTH@ 90
------INS ClassInstanceCreation@@ClassPathXmlApplicationContext["org/apache/camel/spring/processor/filterNoChild.xml"] @TO@ ExpressionStatement@@ClassInstanceCreation:new ClassPathXmlApplicationContext("org/apache/camel/spring/processor/filterNoChild.xml") @AT@ 1349 @LENGTH@ 89
---------MOV New@@new @TO@ ClassInstanceCreation@@ClassPathXmlApplicationContext["org/apache/camel/spring/processor/filterNoChild.xml"] @AT@ 1386 @LENGTH@ 3
---------MOV SimpleType@@ClassPathXmlApplicationContext @TO@ ClassInstanceCreation@@ClassPathXmlApplicationContext["org/apache/camel/spring/processor/filterNoChild.xml"] @AT@ 1390 @LENGTH@ 30
---------MOV StringLiteral@@"org/apache/camel/spring/processor/filterNoChild.xml" @TO@ ClassInstanceCreation@@ClassPathXmlApplicationContext["org/apache/camel/spring/processor/filterNoChild.xml"] @AT@ 1421 @LENGTH@ 53


UPD ExpressionStatement@@MethodInvocation:from("direct:marshalled").unmarshal().jaxb("org.apache.camel.example").to("mock:result") @TO@ MethodInvocation:from("direct:marshalled").unmarshal(example).to("mock:result") @AT@ 3344 @LENGTH@ 139
---UPD MethodInvocation@@from("direct:marshalled").unmarshal().jaxb("org.apache.camel.example").to("mock:result") @TO@ from("direct:marshalled").unmarshal(example).to("mock:result") @AT@ 3344 @LENGTH@ 138
------DEL MethodInvocation@@MethodName:jaxb:["org.apache.camel.example"] @AT@ 3344 @LENGTH@ 95
---------DEL StringLiteral@@"org.apache.camel.example" @AT@ 3412 @LENGTH@ 26
------UPD MethodInvocation@@MethodName:unmarshal:[] @TO@ MethodName:unmarshal:[example] @AT@ 3344 @LENGTH@ 62
---------INS SimpleName@@example @TO@ MethodInvocation@@MethodName:unmarshal:[] @AT@ 3395 @LENGTH@ 7


UPD SwitchStatement@@switch (part.getType()) {case BETWEEN:  return builder.between(root.<Comparable>get(part.getProperty().toDotPath()),nextAsComparable(iterator),nextAsComparable(iterator));case GREATER_THAN:return builder.greaterThan(getComparablePath(root,part),nextAsComparable(iterator));case LESS_THAN:return builder.lessThan(getComparablePath(root,part),nextAsComparable(iterator));case IS_NULL:return root.isNull();case IS_NOT_NULL:return root.isNotNull();case LIKE:return builder.like(root.<String>get(part.getProperty().toDotPath()),iterator.next().toString());case NOT_LIKE:return builder.not(builder.like(root.<String>get(part.getProperty().toDotPath()),iterator.next().toString()));case SIMPLE_PROPERTY:return builder.equal(path,iterator.next());case NEGATING_SIMPLE_PROPERTY:return builder.notEqual(path,iterator.next());default :throw new IllegalArgumentException("Unsupported keyword + " + part.getType());} @TO@ switch (part.getType()) {case BETWEEN:  return builder.between(root.<Comparable>get(part.getProperty().toDotPath()),nextAsComparable(iterator),nextAsComparable(iterator));case GREATER_THAN:return builder.greaterThan(getComparablePath(root,part),nextAsComparable(iterator));case LESS_THAN:return builder.lessThan(getComparablePath(root,part),nextAsComparable(iterator));case IS_NULL:return path.isNull();case IS_NOT_NULL:return path.isNotNull();case LIKE:return builder.like(root.<String>get(part.getProperty().toDotPath()),iterator.next().toString());case NOT_LIKE:return builder.not(builder.like(root.<String>get(part.getProperty().toDotPath()),iterator.next().toString()));case SIMPLE_PROPERTY:return builder.equal(path,iterator.next());case NEGATING_SIMPLE_PROPERTY:return builder.notEqual(path,iterator.next());default :throw new IllegalArgumentException("Unsupported keyword + " + part.getType());} @AT@ 5135 @LENGTH@ 1286
---UPD ReturnStatement@@MethodInvocation:root.isNull() @TO@ MethodInvocation:path.isNull() @AT@ 5692 @LENGTH@ 21
------UPD MethodInvocation@@root.isNull() @TO@ path.isNull() @AT@ 5699 @LENGTH@ 13
---------UPD SimpleName@@Name:root @TO@ Name:path @AT@ 5699 @LENGTH@ 4
---UPD ReturnStatement@@MethodInvocation:root.isNotNull() @TO@ MethodInvocation:path.isNotNull() @AT@ 5752 @LENGTH@ 24
------UPD MethodInvocation@@root.isNotNull() @TO@ path.isNotNull() @AT@ 5759 @LENGTH@ 16
---------UPD SimpleName@@Name:root @TO@ Name:path @AT@ 5759 @LENGTH@ 4


DEL FieldDeclaration@@private, Processor, [processor] @AT@ 1382 @LENGTH@ 28
---DEL Modifier@@private @AT@ 1382 @LENGTH@ 7
---DEL SimpleType@@Processor @AT@ 1390 @LENGTH@ 9
---DEL VariableDeclarationFragment@@processor @AT@ 1400 @LENGTH@ 9
------DEL SimpleName@@processor @AT@ 1400 @LENGTH@ 9


UPD ExpressionStatement@@MethodInvocation:from("activemq:queue:bar").to("log:bar?showAll=true","mock:bar") @TO@ MethodInvocation:from("activemq:queue:bar?disableReplyTo=true").to("log:bar?showAll=true","mock:bar") @AT@ 2533 @LENGTH@ 87
---UPD MethodInvocation@@from("activemq:queue:bar").to("log:bar?showAll=true","mock:bar") @TO@ from("activemq:queue:bar?disableReplyTo=true").to("log:bar?showAll=true","mock:bar") @AT@ 2533 @LENGTH@ 86
------UPD MethodInvocation@@MethodName:from:["activemq:queue:bar"] @TO@ MethodName:from:["activemq:queue:bar?disableReplyTo=true"] @AT@ 2533 @LENGTH@ 26
---------UPD StringLiteral@@"activemq:queue:bar" @TO@ "activemq:queue:bar?disableReplyTo=true" @AT@ 2538 @LENGTH@ 20


UPD IfStatement@@if (operation.hasDefined(attrName)) {  operation.get(attrName).set(subModel.get(attrName));} @TO@ if (subModel.has(attrName)) {  operation.get(attrName).set(subModel.get(attrName));} @AT@ 13124 @LENGTH@ 119
---UPD MethodInvocation@@operation.hasDefined(attrName) @TO@ subModel.has(attrName) @AT@ 13127 @LENGTH@ 30
------UPD SimpleName@@Name:operation @TO@ Name:subModel @AT@ 13127 @LENGTH@ 9
------UPD SimpleName@@MethodName:hasDefined:[attrName] @TO@ MethodName:has:[attrName] @AT@ 13137 @LENGTH@ 20


INS ExpressionStatement@@MethodInvocation:CurrentServiceRegistry.setServiceRegistry(context.getController().getServiceContainer()) @TO@ MethodDeclaration@@public, synchronized, void, MethodName:start, final StartContext context, StartException,  @AT@ 5281 @LENGTH@ 89
---INS MethodInvocation@@CurrentServiceRegistry.setServiceRegistry(context.getController().getServiceContainer()) @TO@ ExpressionStatement@@MethodInvocation:CurrentServiceRegistry.setServiceRegistry(context.getController().getServiceContainer()) @AT@ 5281 @LENGTH@ 88
------INS SimpleName@@Name:CurrentServiceRegistry @TO@ MethodInvocation@@CurrentServiceRegistry.setServiceRegistry(context.getController().getServiceContainer()) @AT@ 5281 @LENGTH@ 22
------INS SimpleName@@MethodName:setServiceRegistry:[context.getController().getServiceContainer()] @TO@ MethodInvocation@@CurrentServiceRegistry.setServiceRegistry(context.getController().getServiceContainer()) @AT@ 5304 @LENGTH@ 65
---------INS MethodInvocation@@context.getController().getServiceContainer() @TO@ SimpleName@@MethodName:setServiceRegistry:[context.getController().getServiceContainer()] @AT@ 5323 @LENGTH@ 45
------------INS MethodInvocation@@MethodName:getController:[] @TO@ MethodInvocation@@context.getController().getServiceContainer() @AT@ 5323 @LENGTH@ 23
------------INS SimpleName@@Name:context @TO@ MethodInvocation@@context.getController().getServiceContainer() @AT@ 5323 @LENGTH@ 7
------------INS SimpleName@@MethodName:getServiceContainer:[] @TO@ MethodInvocation@@context.getController().getServiceContainer() @AT@ 5347 @LENGTH@ 21


UPD MethodDeclaration@@public, static, void, MethodName:addService, final ServiceName name, final String relativePath, final String relativeTo, final ServiceTarget serviceTarget,  @TO@ public, static, ServiceController<String>, MethodName:addService, final ServiceName name, final String relativePath, final String relativeTo, final ServiceTarget serviceTarget,  @AT@ 1989 @LENGTH@ 396
---DEL PrimitiveType@@void @AT@ 2003 @LENGTH@ 4
---INS ParameterizedType@@ServiceController<String> @TO@ MethodDeclaration@@public, static, void, MethodName:addService, final ServiceName name, final String relativePath, final String relativeTo, final ServiceTarget serviceTarget,  @AT@ 2079 @LENGTH@ 25
------INS SimpleType@@ServiceController @TO@ ParameterizedType@@ServiceController<String> @AT@ 2079 @LENGTH@ 17
------INS SimpleType@@String @TO@ ParameterizedType@@ServiceController<String> @AT@ 2097 @LENGTH@ 6
---DEL ExpressionStatement@@MethodInvocation:serviceTarget.addService(name,service).addDependency(pathNameOf(relativeTo),String.class,service.injectedPath).install() @AT@ 2229 @LENGTH@ 150
---INS ReturnStatement@@MethodInvocation:serviceTarget.addService(name,service).addDependency(pathNameOf(relativeTo),String.class,service.injectedPath).install() @TO@ MethodDeclaration@@public, static, void, MethodName:addService, final ServiceName name, final String relativePath, final String relativeTo, final ServiceTarget serviceTarget,  @AT@ 2326 @LENGTH@ 157
------MOV MethodInvocation@@serviceTarget.addService(name,service).addDependency(pathNameOf(relativeTo),String.class,service.injectedPath).install() @TO@ ReturnStatement@@MethodInvocation:serviceTarget.addService(name,service).addDependency(pathNameOf(relativeTo),String.class,service.injectedPath).install() @AT@ 2229 @LENGTH@ 149


UPD IfStatement@@if (isPipelined()) {  pipeline.zinterstore(destKey,zparams,sets);} @TO@ if (isPipelined()) {  pipeline.zinterstore(destKey,zparams,sets);  return null;} @AT@ 35055 @LENGTH@ 75
---UPD Block@@ThenBody:{  pipeline.zinterstore(destKey,zparams,sets);} @TO@ ThenBody:{  pipeline.zinterstore(destKey,zparams,sets);  return null;} @AT@ 35074 @LENGTH@ 56
------INS ReturnStatement@@NullLiteral:null @TO@ Block@@ThenBody:{  pipeline.zinterstore(destKey,zparams,sets);} @AT@ 35130 @LENGTH@ 12
---------INS NullLiteral@@null @TO@ ReturnStatement@@NullLiteral:null @AT@ 35137 @LENGTH@ 4


DEL ExpressionStatement@@MethodInvocation:instantiators.addFirst(new ManagedReferenceInterceptorFactory(interceptorClassConfiguration.getInstantiator(),contextKey)) @AT@ 18702 @LENGTH@ 124
---DEL MethodInvocation@@instantiators.addFirst(new ManagedReferenceInterceptorFactory(interceptorClassConfiguration.getInstantiator(),contextKey)) @AT@ 18702 @LENGTH@ 123
------DEL SimpleName@@Name:instantiators @AT@ 18702 @LENGTH@ 13
------DEL SimpleName@@MethodName:addFirst:[new ManagedReferenceInterceptorFactory(interceptorClassConfiguration.getInstantiator(),contextKey)] @AT@ 18716 @LENGTH@ 109
---------DEL ClassInstanceCreation@@ManagedReferenceInterceptorFactory[interceptorClassConfiguration.getInstantiator(), contextKey] @AT@ 18725 @LENGTH@ 99
------------DEL New@@new @AT@ 18725 @LENGTH@ 3
------------DEL SimpleType@@ManagedReferenceInterceptorFactory @AT@ 18729 @LENGTH@ 34
------------DEL MethodInvocation@@interceptorClassConfiguration.getInstantiator() @AT@ 18764 @LENGTH@ 47
---------------DEL SimpleName@@Name:interceptorClassConfiguration @AT@ 18764 @LENGTH@ 29
---------------DEL SimpleName@@MethodName:getInstantiator:[] @AT@ 18794 @LENGTH@ 17
------------DEL SimpleName@@contextKey @AT@ 18813 @LENGTH@ 10


UPD ExpressionStatement@@MethodInvocation:assertEquals("Breakpoint at when caused by: IllegalArgumentException[Damn]",logs.get(0)) @TO@ MethodInvocation:assertEquals("Breakpoint at throwException caused by: IllegalArgumentException[Damn]",logs.get(0)) @AT@ 2892 @LENGTH@ 90
---UPD MethodInvocation@@assertEquals("Breakpoint at when caused by: IllegalArgumentException[Damn]",logs.get(0)) @TO@ assertEquals("Breakpoint at throwException caused by: IllegalArgumentException[Damn]",logs.get(0)) @AT@ 2892 @LENGTH@ 89
------UPD SimpleName@@MethodName:assertEquals:["Breakpoint at when caused by: IllegalArgumentException[Damn]", logs.get(0)] @TO@ MethodName:assertEquals:["Breakpoint at throwException caused by: IllegalArgumentException[Damn]", logs.get(0)] @AT@ 2892 @LENGTH@ 89
---------UPD StringLiteral@@"Breakpoint at when caused by: IllegalArgumentException[Damn]" @TO@ "Breakpoint at throwException caused by: IllegalArgumentException[Damn]" @AT@ 2905 @LENGTH@ 62


INS ExpressionStatement@@MethodInvocation:enterState('\\',EscapeCharacterState.INSTANCE) @TO@ MethodDeclaration@@public, voidMethodName:NodeState, final OperationState opState,  @AT@ 2869 @LENGTH@ 48
---INS MethodInvocation@@enterState('\\',EscapeCharacterState.INSTANCE) @TO@ ExpressionStatement@@MethodInvocation:enterState('\\',EscapeCharacterState.INSTANCE) @AT@ 2869 @LENGTH@ 47
------INS SimpleName@@MethodName:enterState:['\\', EscapeCharacterState.INSTANCE] @TO@ MethodInvocation@@enterState('\\',EscapeCharacterState.INSTANCE) @AT@ 2869 @LENGTH@ 47
---------INS CharacterLiteral@@'\\' @TO@ SimpleName@@MethodName:enterState:['\\', EscapeCharacterState.INSTANCE] @AT@ 2880 @LENGTH@ 4
---------INS QualifiedName@@EscapeCharacterState.INSTANCE @TO@ SimpleName@@MethodName:enterState:['\\', EscapeCharacterState.INSTANCE] @AT@ 2886 @LENGTH@ 29
------------INS SimpleName@@EscapeCharacterState @TO@ QualifiedName@@EscapeCharacterState.INSTANCE @AT@ 2886 @LENGTH@ 20
------------INS SimpleName@@INSTANCE @TO@ QualifiedName@@EscapeCharacterState.INSTANCE @AT@ 2907 @LENGTH@ 8


UPD IfStatement@@if (failure == null) {  model.get(INTERFACE).set(operation.get(INTERFACE));  model.get(PORT).set(operation.get(PORT));  model.get(FIXED_PORT).set(operation.get(FIXED_PORT));  model.get(MULTICAST_ADDRESS).set(operation.get(MULTICAST_ADDRESS));  model.get(MULTICAST_PORT).set(operation.get(MULTICAST_PORT));  ModelNode compensating=Util.getResourceRemoveOperation(operation.get(OP_ADDR));  installSocketBinding(name,operation,context,resultHandler,compensating);} @TO@ if (failure == null) {  PathAddress address=PathAddress.pathAddress(operation.require(OP_ADDR));  String name=address.getLastElement().getValue();  ModelNode model=context.getSubModel();  model.get(NAME).set(name);  model.get(INTERFACE).set(operation.get(INTERFACE));  model.get(PORT).set(operation.get(PORT));  model.get(FIXED_PORT).set(operation.get(FIXED_PORT));  model.get(MULTICAST_ADDRESS).set(operation.get(MULTICAST_ADDRESS));  model.get(MULTICAST_PORT).set(operation.get(MULTICAST_PORT));  ModelNode compensating=Util.getResourceRemoveOperation(operation.get(OP_ADDR));  installSocketBinding(name,operation,context,resultHandler,compensating);} @AT@ 5033 @LENGTH@ 585
---UPD Block@@ThenBody:{  model.get(INTERFACE).set(operation.get(INTERFACE));  model.get(PORT).set(operation.get(PORT));  model.get(FIXED_PORT).set(operation.get(FIXED_PORT));  model.get(MULTICAST_ADDRESS).set(operation.get(MULTICAST_ADDRESS));  model.get(MULTICAST_PORT).set(operation.get(MULTICAST_PORT));  ModelNode compensating=Util.getResourceRemoveOperation(operation.get(OP_ADDR));  installSocketBinding(name,operation,context,resultHandler,compensating);} @TO@ ThenBody:{  PathAddress address=PathAddress.pathAddress(operation.require(OP_ADDR));  String name=address.getLastElement().getValue();  ModelNode model=context.getSubModel();  model.get(NAME).set(name);  model.get(INTERFACE).set(operation.get(INTERFACE));  model.get(PORT).set(operation.get(PORT));  model.get(FIXED_PORT).set(operation.get(FIXED_PORT));  model.get(MULTICAST_ADDRESS).set(operation.get(MULTICAST_ADDRESS));  model.get(MULTICAST_PORT).set(operation.get(MULTICAST_PORT));  ModelNode compensating=Util.getResourceRemoveOperation(operation.get(OP_ADDR));  installSocketBinding(name,operation,context,resultHandler,compensating);} @AT@ 5054 @LENGTH@ 564
------MOV VariableDeclarationStatement@@PathAddress address=PathAddress.pathAddress(operation.require(OP_ADDR)); @TO@ Block@@ThenBody:{  model.get(INTERFACE).set(operation.get(INTERFACE));  model.get(PORT).set(operation.get(PORT));  model.get(FIXED_PORT).set(operation.get(FIXED_PORT));  model.get(MULTICAST_ADDRESS).set(operation.get(MULTICAST_ADDRESS));  model.get(MULTICAST_PORT).set(operation.get(MULTICAST_PORT));  ModelNode compensating=Util.getResourceRemoveOperation(operation.get(OP_ADDR));  installSocketBinding(name,operation,context,resultHandler,compensating);} @AT@ 4730 @LENGTH@ 74
------MOV VariableDeclarationStatement@@String name=address.getLastElement().getValue(); @TO@ Block@@ThenBody:{  model.get(INTERFACE).set(operation.get(INTERFACE));  model.get(PORT).set(operation.get(PORT));  model.get(FIXED_PORT).set(operation.get(FIXED_PORT));  model.get(MULTICAST_ADDRESS).set(operation.get(MULTICAST_ADDRESS));  model.get(MULTICAST_PORT).set(operation.get(MULTICAST_PORT));  ModelNode compensating=Util.getResourceRemoveOperation(operation.get(OP_ADDR));  installSocketBinding(name,operation,context,resultHandler,compensating);} @AT@ 4817 @LENGTH@ 50
------MOV VariableDeclarationStatement@@ModelNode model=context.getSubModel(); @TO@ Block@@ThenBody:{  model.get(INTERFACE).set(operation.get(INTERFACE));  model.get(PORT).set(operation.get(PORT));  model.get(FIXED_PORT).set(operation.get(FIXED_PORT));  model.get(MULTICAST_ADDRESS).set(operation.get(MULTICAST_ADDRESS));  model.get(MULTICAST_PORT).set(operation.get(MULTICAST_PORT));  ModelNode compensating=Util.getResourceRemoveOperation(operation.get(OP_ADDR));  installSocketBinding(name,operation,context,resultHandler,compensating);} @AT@ 4880 @LENGTH@ 40
------MOV ExpressionStatement@@MethodInvocation:model.get(NAME).set(name) @TO@ Block@@ThenBody:{  model.get(INTERFACE).set(operation.get(INTERFACE));  model.get(PORT).set(operation.get(PORT));  model.get(FIXED_PORT).set(operation.get(FIXED_PORT));  model.get(MULTICAST_ADDRESS).set(operation.get(MULTICAST_ADDRESS));  model.get(MULTICAST_PORT).set(operation.get(MULTICAST_PORT));  ModelNode compensating=Util.getResourceRemoveOperation(operation.get(OP_ADDR));  installSocketBinding(name,operation,context,resultHandler,compensating);} @AT@ 4933 @LENGTH@ 26


INS MethodDeclaration@@boolean, MethodName:hasAttachment, AttachmentKey<?> key,  @TO@ TypeDeclaration@@[public]Attachable,  @AT@ 1320 @LENGTH@ 36
---INS PrimitiveType@@boolean @TO@ MethodDeclaration@@boolean, MethodName:hasAttachment, AttachmentKey<?> key,  @AT@ 1312 @LENGTH@ 7
---INS SimpleName@@MethodName:hasAttachment @TO@ MethodDeclaration@@boolean, MethodName:hasAttachment, AttachmentKey<?> key,  @AT@ 1320 @LENGTH@ 13
---INS SingleVariableDeclaration@@AttachmentKey<?> key @TO@ MethodDeclaration@@boolean, MethodName:hasAttachment, AttachmentKey<?> key,  @AT@ 1334 @LENGTH@ 20
------INS ParameterizedType@@AttachmentKey<?> @TO@ SingleVariableDeclaration@@AttachmentKey<?> key @AT@ 1334 @LENGTH@ 16
---------INS SimpleType@@AttachmentKey @TO@ ParameterizedType@@AttachmentKey<?> @AT@ 1334 @LENGTH@ 13
---------INS WildcardType@@? @TO@ ParameterizedType@@AttachmentKey<?> @AT@ 1348 @LENGTH@ 1
------INS SimpleName@@key @TO@ SingleVariableDeclaration@@AttachmentKey<?> key @AT@ 1351 @LENGTH@ 3


UPD VariableDeclarationStatement@@MessageDrivenComponentDescription messageDrivenComponentDescription=new MessageDrivenComponentDescription(beanName,beanClassName,moduleDescription,deploymentUnit.getServiceName()); @TO@ MessageDrivenComponentDescription messageDrivenComponentDescription=new MessageDrivenComponentDescription(beanName,beanClassName,ejbJarDescription,deploymentUnit.getServiceName()); @AT@ 4368 @LENGTH@ 185
---UPD VariableDeclarationFragment@@messageDrivenComponentDescription=new MessageDrivenComponentDescription(beanName,beanClassName,moduleDescription,deploymentUnit.getServiceName()) @TO@ messageDrivenComponentDescription=new MessageDrivenComponentDescription(beanName,beanClassName,ejbJarDescription,deploymentUnit.getServiceName()) @AT@ 4402 @LENGTH@ 150
------UPD ClassInstanceCreation@@MessageDrivenComponentDescription[beanName, beanClassName, moduleDescription, deploymentUnit.getServiceName()] @TO@ MessageDrivenComponentDescription[beanName, beanClassName, ejbJarDescription, deploymentUnit.getServiceName()] @AT@ 4438 @LENGTH@ 114
---------UPD SimpleName@@moduleDescription @TO@ ejbJarDescription @AT@ 4501 @LENGTH@ 17


INS ExpressionStatement@@MethodInvocation:assertEquals("Craig Walls",profile.getName()) @TO@ MethodDeclaration@@public, void, MethodName:getUserProfile,  @AT@ 2873 @LENGTH@ 47
---INS MethodInvocation@@assertEquals("Craig Walls",profile.getName()) @TO@ ExpressionStatement@@MethodInvocation:assertEquals("Craig Walls",profile.getName()) @AT@ 2873 @LENGTH@ 46
------INS SimpleName@@MethodName:assertEquals:["Craig Walls", profile.getName()] @TO@ MethodInvocation@@assertEquals("Craig Walls",profile.getName()) @AT@ 2873 @LENGTH@ 46
---------INS StringLiteral@@"Craig Walls" @TO@ SimpleName@@MethodName:assertEquals:["Craig Walls", profile.getName()] @AT@ 2886 @LENGTH@ 13
---------INS MethodInvocation@@profile.getName() @TO@ SimpleName@@MethodName:assertEquals:["Craig Walls", profile.getName()] @AT@ 2901 @LENGTH@ 17
------------INS SimpleName@@Name:profile @TO@ MethodInvocation@@profile.getName() @AT@ 2901 @LENGTH@ 7
------------INS SimpleName@@MethodName:getName:[] @TO@ MethodInvocation@@profile.getName() @AT@ 2909 @LENGTH@ 9


UPD Block@@ThenBody:{  Map advice=message.getAdvice(true);  advice.put(Message.RECONNECT_FIELD,Message.RECONNECT_HANDSHAKE_VALUE);  Map ext=message.getExt(true);  Map authentication=new HashMap();  ext.put("authentication",authentication);  authentication.put("failed",true);  authentication.put("failureReason","invalid_credentials");} @TO@ ThenBody:{  Map<String,Object> advice=message.getAdvice(true);  advice.put(Message.RECONNECT_FIELD,Message.RECONNECT_HANDSHAKE_VALUE);  Map<String,Object> ext=message.getExt(true);  Map<String,Object> authentication=new HashMap<String,Object>();  ext.put("authentication",authentication);  authentication.put("failed",true);  authentication.put("failureReason","invalid_credentials");} @AT@ 4963 @LENGTH@ 477
---UPD VariableDeclarationStatement@@Map advice=message.getAdvice(true); @TO@ Map<String,Object> advice=message.getAdvice(true); @AT@ 4985 @LENGTH@ 37
------INS ParameterizedType@@Map<String,Object> @TO@ VariableDeclarationStatement@@Map advice=message.getAdvice(true); @AT@ 4985 @LENGTH@ 19
---------INS SimpleType@@Map @TO@ ParameterizedType@@Map<String,Object> @AT@ 4985 @LENGTH@ 3
---------INS SimpleType@@String @TO@ ParameterizedType@@Map<String,Object> @AT@ 4989 @LENGTH@ 6
---------INS SimpleType@@Object @TO@ ParameterizedType@@Map<String,Object> @AT@ 4997 @LENGTH@ 6
------DEL SimpleType@@Map @AT@ 4985 @LENGTH@ 3
---UPD VariableDeclarationStatement@@Map ext=message.getExt(true); @TO@ Map<String,Object> ext=message.getExt(true); @AT@ 5136 @LENGTH@ 31
------DEL SimpleType@@Map @AT@ 5136 @LENGTH@ 3
------INS ParameterizedType@@Map<String,Object> @TO@ VariableDeclarationStatement@@Map ext=message.getExt(true); @AT@ 5152 @LENGTH@ 19
---------INS SimpleType@@Map @TO@ ParameterizedType@@Map<String,Object> @AT@ 5152 @LENGTH@ 3
---------INS SimpleType@@String @TO@ ParameterizedType@@Map<String,Object> @AT@ 5156 @LENGTH@ 6
---------INS SimpleType@@Object @TO@ ParameterizedType@@Map<String,Object> @AT@ 5164 @LENGTH@ 6
---UPD VariableDeclarationStatement@@Map authentication=new HashMap(); @TO@ Map<String,Object> authentication=new HashMap<String,Object>(); @AT@ 5188 @LENGTH@ 35
------DEL SimpleType@@Map @AT@ 5188 @LENGTH@ 3
------UPD VariableDeclarationFragment@@authentication=new HashMap() @TO@ authentication=new HashMap<String,Object>() @AT@ 5192 @LENGTH@ 30
---------UPD ClassInstanceCreation@@HashMap[] @TO@ HashMap<String,Object>[] @AT@ 5209 @LENGTH@ 13
------------DEL SimpleType@@HashMap @AT@ 5213 @LENGTH@ 7
------------INS ParameterizedType@@HashMap<String,Object> @TO@ ClassInstanceCreation@@HashMap[] @AT@ 5261 @LENGTH@ 23
---------------INS SimpleType@@HashMap @TO@ ParameterizedType@@HashMap<String,Object> @AT@ 5261 @LENGTH@ 7
---------------INS SimpleType@@String @TO@ ParameterizedType@@HashMap<String,Object> @AT@ 5269 @LENGTH@ 6
---------------INS SimpleType@@Object @TO@ ParameterizedType@@HashMap<String,Object> @AT@ 5277 @LENGTH@ 6
------INS ParameterizedType@@Map<String,Object> @TO@ VariableDeclarationStatement@@Map authentication=new HashMap(); @AT@ 5220 @LENGTH@ 19
---------INS SimpleType@@Map @TO@ ParameterizedType@@Map<String,Object> @AT@ 5220 @LENGTH@ 3
---------INS SimpleType@@String @TO@ ParameterizedType@@Map<String,Object> @AT@ 5224 @LENGTH@ 6
---------INS SimpleType@@Object @TO@ ParameterizedType@@Map<String,Object> @AT@ 5232 @LENGTH@ 6


INS FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @TO@ TypeDeclaration@@[@Deprecated, public]AuthenticationDetails, [Serializable] @AT@ 313 @LENGTH@ 90
---INS Modifier@@private @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @AT@ 313 @LENGTH@ 7
---INS Modifier@@static @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @AT@ 321 @LENGTH@ 6
---INS Modifier@@final @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @AT@ 328 @LENGTH@ 5
---INS PrimitiveType@@long @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @AT@ 334 @LENGTH@ 4
---INS VariableDeclarationFragment@@serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @AT@ 339 @LENGTH@ 63
------INS SimpleName@@serialVersionUID @TO@ VariableDeclarationFragment@@serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID @AT@ 339 @LENGTH@ 16
------INS QualifiedName@@SpringSecurityCoreVersion.SERIAL_VERSION_UID @TO@ VariableDeclarationFragment@@serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID @AT@ 358 @LENGTH@ 44
---------INS SimpleName@@SpringSecurityCoreVersion @TO@ QualifiedName@@SpringSecurityCoreVersion.SERIAL_VERSION_UID @AT@ 358 @LENGTH@ 25
---------INS SimpleName@@SERIAL_VERSION_UID @TO@ QualifiedName@@SpringSecurityCoreVersion.SERIAL_VERSION_UID @AT@ 384 @LENGTH@ 18


UPD IfStatement@@if (deploymentElement != null) {  controller.setMode(ServiceController.Mode.NEVER);  if (resultHandler != null)   resultHandler.handleSuccess(null,param);} else if (resultHandler != null) {  resultHandler.handleSuccess(null,param);} @TO@ if (deploymentElement != null) {  final ServiceController<?> controller=serviceRegistry.getService(deploymentUnitServiceName);  controller.setMode(ServiceController.Mode.NEVER);  if (resultHandler != null)   resultHandler.handleSuccess(null,param);} else if (resultHandler != null) {  resultHandler.handleSuccess(null,param);} @AT@ 3605 @LENGTH@ 367
---UPD Block@@ThenBody:{  controller.setMode(ServiceController.Mode.NEVER);  if (resultHandler != null)   resultHandler.handleSuccess(null,param);} @TO@ ThenBody:{  final ServiceController<?> controller=serviceRegistry.getService(deploymentUnitServiceName);  controller.setMode(ServiceController.Mode.NEVER);  if (resultHandler != null)   resultHandler.handleSuccess(null,param);} @AT@ 3636 @LENGTH@ 230
------MOV VariableDeclarationStatement@@final ServiceController<?> controller=serviceRegistry.getService(deploymentUnitServiceName); @TO@ Block@@ThenBody:{  controller.setMode(ServiceController.Mode.NEVER);  if (resultHandler != null)   resultHandler.handleSuccess(null,param);} @AT@ 3502 @LENGTH@ 94


UPD MethodDeclaration@@public, voidMethodName:ScheduledPollConsumer, DefaultEndpoint endpoint, Processor processor,  @TO@ public, voidMethodName:ScheduledPollConsumer, Endpoint endpoint, Processor processor,  @AT@ 2008 @LENGTH@ 410
---UPD SingleVariableDeclaration@@DefaultEndpoint endpoint @TO@ Endpoint endpoint @AT@ 2037 @LENGTH@ 24
------UPD SimpleType@@DefaultEndpoint @TO@ Endpoint @AT@ 2037 @LENGTH@ 15


INS MethodDeclaration@@public, void, MethodName:undeploy, final DeploymentUnit context,  @TO@ TypeDeclaration@@[public]ServiceDeploymentParsingProcessor, [DeploymentUnitProcessor] @AT@ 4430 @LENGTH@ 58
---INS Modifier@@public @TO@ MethodDeclaration@@public, void, MethodName:undeploy, final DeploymentUnit context,  @AT@ 4430 @LENGTH@ 6
---INS PrimitiveType@@void @TO@ MethodDeclaration@@public, void, MethodName:undeploy, final DeploymentUnit context,  @AT@ 4437 @LENGTH@ 4
---INS SimpleName@@MethodName:undeploy @TO@ MethodDeclaration@@public, void, MethodName:undeploy, final DeploymentUnit context,  @AT@ 4442 @LENGTH@ 8
---INS SingleVariableDeclaration@@final DeploymentUnit context @TO@ MethodDeclaration@@public, void, MethodName:undeploy, final DeploymentUnit context,  @AT@ 4451 @LENGTH@ 28
------INS Modifier@@final @TO@ SingleVariableDeclaration@@final DeploymentUnit context @AT@ 4451 @LENGTH@ 5
------INS SimpleType@@DeploymentUnit @TO@ SingleVariableDeclaration@@final DeploymentUnit context @AT@ 4457 @LENGTH@ 14
------INS SimpleName@@context @TO@ SingleVariableDeclaration@@final DeploymentUnit context @AT@ 4472 @LENGTH@ 7


UPD TryStatement@@try {  final String loggerName=getLoggerName();  final LoggerService service=new LoggerService(loggerName);  service.setLevel(Level.parse(getLevelName()));  final BatchBuilder batchBuilder=updateContext.getServiceTarget();  batchBuilder.addService(LogServices.loggerName(loggerName),service).addListener(new UpdateResultHandler.ServiceStartListener<P>(resultHandler,param)).setInitialMode(ServiceController.Mode.ACTIVE).install();} catch (Throwable t) {  resultHandler.handleFailure(t,param);  return;} @TO@ try {  final String loggerName=getLoggerName();  final LoggerService service=new LoggerService(loggerName);  service.setLevel(Level.parse(getLevelName()));  final ServiceTarget target=updateContext.getServiceTarget();  target.addService(LogServices.loggerName(loggerName),service).addListener(new UpdateResultHandler.ServiceStartListener<P>(resultHandler,param)).setInitialMode(ServiceController.Mode.ACTIVE).install();} catch (Throwable t) {  resultHandler.handleFailure(t,param);  return;} @AT@ 2458 @LENGTH@ 657
---UPD VariableDeclarationStatement@@final BatchBuilder batchBuilder=updateContext.getServiceTarget(); @TO@ final ServiceTarget target=updateContext.getServiceTarget(); @AT@ 2663 @LENGTH@ 67
------UPD SimpleType@@BatchBuilder @TO@ ServiceTarget @AT@ 2669 @LENGTH@ 12
------UPD VariableDeclarationFragment@@batchBuilder=updateContext.getServiceTarget() @TO@ target=updateContext.getServiceTarget() @AT@ 2682 @LENGTH@ 47
---------UPD SimpleName@@batchBuilder @TO@ target @AT@ 2682 @LENGTH@ 12
---UPD ExpressionStatement@@MethodInvocation:batchBuilder.addService(LogServices.loggerName(loggerName),service).addListener(new UpdateResultHandler.ServiceStartListener<P>(resultHandler,param)).setInitialMode(ServiceController.Mode.ACTIVE).install() @TO@ MethodInvocation:target.addService(LogServices.loggerName(loggerName),service).addListener(new UpdateResultHandler.ServiceStartListener<P>(resultHandler,param)).setInitialMode(ServiceController.Mode.ACTIVE).install() @AT@ 2743 @LENGTH@ 259
------UPD MethodInvocation@@batchBuilder.addService(LogServices.loggerName(loggerName),service).addListener(new UpdateResultHandler.ServiceStartListener<P>(resultHandler,param)).setInitialMode(ServiceController.Mode.ACTIVE).install() @TO@ target.addService(LogServices.loggerName(loggerName),service).addListener(new UpdateResultHandler.ServiceStartListener<P>(resultHandler,param)).setInitialMode(ServiceController.Mode.ACTIVE).install() @AT@ 2743 @LENGTH@ 258
---------UPD SimpleName@@Name:batchBuilder @TO@ Name:target @AT@ 2743 @LENGTH@ 12


UPD MethodDeclaration@@private, String, MethodName:executeDeploymentPlan, DeploymentPlan plan, DeploymentAction deployAction, Exception,  @TO@ private, String, MethodName:executeDeploymentPlan, DeploymentPlan plan, DeploymentAction deployAction, Archive<?> archive, Exception,  @AT@ 7765 @LENGTH@ 662
---INS SingleVariableDeclaration@@Archive<?> archive @TO@ MethodDeclaration@@private, String, MethodName:executeDeploymentPlan, DeploymentPlan plan, DeploymentAction deployAction, Exception,  @AT@ 7792 @LENGTH@ 18
------INS ParameterizedType@@Archive<?> @TO@ SingleVariableDeclaration@@Archive<?> archive @AT@ 7792 @LENGTH@ 10
---------INS SimpleType@@Archive @TO@ ParameterizedType@@Archive<?> @AT@ 7792 @LENGTH@ 7
---------INS WildcardType@@? @TO@ ParameterizedType@@Archive<?> @AT@ 7800 @LENGTH@ 1
------INS SimpleName@@archive @TO@ SingleVariableDeclaration@@Archive<?> archive @AT@ 7803 @LENGTH@ 7
---INS ExpressionStatement@@MethodInvocation:registry.put(archive,deployAction.getDeploymentUnitUniqueName()) @TO@ MethodDeclaration@@private, String, MethodName:executeDeploymentPlan, DeploymentPlan plan, DeploymentAction deployAction, Exception,  @AT@ 7924 @LENGTH@ 66
------INS MethodInvocation@@registry.put(archive,deployAction.getDeploymentUnitUniqueName()) @TO@ ExpressionStatement@@MethodInvocation:registry.put(archive,deployAction.getDeploymentUnitUniqueName()) @AT@ 7924 @LENGTH@ 65
---------INS SimpleName@@Name:registry @TO@ MethodInvocation@@registry.put(archive,deployAction.getDeploymentUnitUniqueName()) @AT@ 7924 @LENGTH@ 8
---------INS SimpleName@@MethodName:put:[archive, deployAction.getDeploymentUnitUniqueName()] @TO@ MethodInvocation@@registry.put(archive,deployAction.getDeploymentUnitUniqueName()) @AT@ 7933 @LENGTH@ 56
------------INS SimpleName@@archive @TO@ SimpleName@@MethodName:put:[archive, deployAction.getDeploymentUnitUniqueName()] @AT@ 7937 @LENGTH@ 7
------------INS MethodInvocation@@deployAction.getDeploymentUnitUniqueName() @TO@ SimpleName@@MethodName:put:[archive, deployAction.getDeploymentUnitUniqueName()] @AT@ 7946 @LENGTH@ 42
---------------INS SimpleName@@Name:deployAction @TO@ MethodInvocation@@deployAction.getDeploymentUnitUniqueName() @AT@ 7946 @LENGTH@ 12
---------------INS SimpleName@@MethodName:getDeploymentUnitUniqueName:[] @TO@ MethodInvocation@@deployAction.getDeploymentUnitUniqueName() @AT@ 7959 @LENGTH@ 29


UPD MethodDeclaration@@private, String, MethodName:getFtpUrl,  @TO@ protected, String, MethodName:getFtpUrl,  @AT@ 1064 @LENGTH@ 145
---UPD Modifier@@private @TO@ protected @AT@ 1064 @LENGTH@ 7


UPD VariableDeclarationStatement@@final VirtualFile deploymentRoot=phaseContext.getAttachment(Attachments.DEPLOYMENT_ROOT); @TO@ final VirtualFile deploymentRoot=phaseContext.getAttachment(Attachments.DEPLOYMENT_ROOT).getRoot(); @AT@ 1928 @LENGTH@ 91
---UPD VariableDeclarationFragment@@deploymentRoot=phaseContext.getAttachment(Attachments.DEPLOYMENT_ROOT) @TO@ deploymentRoot=phaseContext.getAttachment(Attachments.DEPLOYMENT_ROOT).getRoot() @AT@ 1946 @LENGTH@ 72
------UPD MethodInvocation@@phaseContext.getAttachment(Attachments.DEPLOYMENT_ROOT) @TO@ phaseContext.getAttachment(Attachments.DEPLOYMENT_ROOT).getRoot() @AT@ 1963 @LENGTH@ 55
---------INS MethodInvocation@@MethodName:getAttachment:[Attachments.DEPLOYMENT_ROOT] @TO@ MethodInvocation@@phaseContext.getAttachment(Attachments.DEPLOYMENT_ROOT) @AT@ 1876 @LENGTH@ 55
------------INS QualifiedName@@Attachments.DEPLOYMENT_ROOT @TO@ MethodInvocation@@MethodName:getAttachment:[Attachments.DEPLOYMENT_ROOT] @AT@ 1903 @LENGTH@ 27
---------------MOV SimpleName@@Attachments @TO@ QualifiedName@@Attachments.DEPLOYMENT_ROOT @AT@ 1990 @LENGTH@ 11
---------------MOV SimpleName@@DEPLOYMENT_ROOT @TO@ QualifiedName@@Attachments.DEPLOYMENT_ROOT @AT@ 2002 @LENGTH@ 15
---------INS SimpleName@@MethodName:getRoot:[] @TO@ MethodInvocation@@phaseContext.getAttachment(Attachments.DEPLOYMENT_ROOT) @AT@ 1932 @LENGTH@ 9
---------DEL SimpleName@@MethodName:getAttachment:[Attachments.DEPLOYMENT_ROOT] @AT@ 1976 @LENGTH@ 42
------------DEL QualifiedName@@Attachments.DEPLOYMENT_ROOT @AT@ 1990 @LENGTH@ 27


UPD ThrowStatement@@ClassInstanceCreation:new TimeoutException(String.format("Managed server was not started within [%d] ms",timeout)) @TO@ ClassInstanceCreation:new TimeoutException(String.format("Managed server was not started within [%d] ms",config.getStartupTimeoutInSeconds() * 1000)) @AT@ 4849 @LENGTH@ 100
---UPD ClassInstanceCreation@@TimeoutException[String.format("Managed server was not started within [%d] ms",timeout)] @TO@ TimeoutException[String.format("Managed server was not started within [%d] ms",config.getStartupTimeoutInSeconds() * 1000)] @AT@ 4855 @LENGTH@ 93
------UPD MethodInvocation@@String.format("Managed server was not started within [%d] ms",timeout) @TO@ String.format("Managed server was not started within [%d] ms",config.getStartupTimeoutInSeconds() * 1000) @AT@ 4876 @LENGTH@ 71
---------UPD SimpleName@@MethodName:format:["Managed server was not started within [%d] ms", timeout] @TO@ MethodName:format:["Managed server was not started within [%d] ms", config.getStartupTimeoutInSeconds() * 1000] @AT@ 4883 @LENGTH@ 64
------------INS InfixExpression@@config.getStartupTimeoutInSeconds() * 1000 @TO@ SimpleName@@MethodName:format:["Managed server was not started within [%d] ms", timeout] @AT@ 4939 @LENGTH@ 40
---------------INS MethodInvocation@@config.getStartupTimeoutInSeconds() @TO@ InfixExpression@@config.getStartupTimeoutInSeconds() * 1000 @AT@ 4939 @LENGTH@ 35
------------------INS SimpleName@@Name:config @TO@ MethodInvocation@@config.getStartupTimeoutInSeconds() @AT@ 4939 @LENGTH@ 6
------------------INS SimpleName@@MethodName:getStartupTimeoutInSeconds:[] @TO@ MethodInvocation@@config.getStartupTimeoutInSeconds() @AT@ 4946 @LENGTH@ 28
---------------INS Operator@@* @TO@ InfixExpression@@config.getStartupTimeoutInSeconds() * 1000 @AT@ 4974 @LENGTH@ 1
---------------INS NumberLiteral@@1000 @TO@ InfixExpression@@config.getStartupTimeoutInSeconds() * 1000 @AT@ 4975 @LENGTH@ 4
------------DEL SimpleName@@timeout @AT@ 4939 @LENGTH@ 7


UPD MethodDeclaration@@public, RouteDefinition, MethodName:getRouteDefinition, String id,  @TO@ public, synchronized, RouteDefinition, MethodName:getRouteDefinition, String id,  @AT@ 43118 @LENGTH@ 236
---INS Modifier@@synchronized @TO@ MethodDeclaration@@public, RouteDefinition, MethodName:getRouteDefinition, String id,  @AT@ 43138 @LENGTH@ 12


DEL VariableDeclarationStatement@@String relative=relativePath.startsWith(File.separator) ? relativePath.substring(0,relativePath.length() - 1) : relativePath; @AT@ 3899 @LENGTH@ 127
---DEL SimpleType@@String @AT@ 3899 @LENGTH@ 6
---DEL VariableDeclarationFragment@@relative=relativePath.startsWith(File.separator) ? relativePath.substring(0,relativePath.length() - 1) : relativePath @AT@ 3906 @LENGTH@ 119
------DEL SimpleName@@relative @AT@ 3906 @LENGTH@ 8
------DEL ConditionalExpression@@relativePath.startsWith(File.separator) ? relativePath.substring(0,relativePath.length() - 1) : relativePath @AT@ 3917 @LENGTH@ 108
---------DEL MethodInvocation@@relativePath.startsWith(File.separator) @AT@ 3917 @LENGTH@ 39
------------DEL SimpleName@@Name:relativePath @AT@ 3917 @LENGTH@ 12
------------DEL SimpleName@@MethodName:startsWith:[File.separator] @AT@ 3930 @LENGTH@ 26
---------------DEL QualifiedName@@File.separator @AT@ 3941 @LENGTH@ 14
------------------DEL SimpleName@@File @AT@ 3941 @LENGTH@ 4
------------------DEL SimpleName@@separator @AT@ 3946 @LENGTH@ 9
---------DEL MethodInvocation@@relativePath.substring(0,relativePath.length() - 1) @AT@ 3959 @LENGTH@ 51
------------DEL SimpleName@@Name:relativePath @AT@ 3959 @LENGTH@ 12
------------DEL SimpleName@@MethodName:substring:[0, relativePath.length() - 1] @AT@ 3972 @LENGTH@ 38
---------------DEL NumberLiteral@@0 @AT@ 3982 @LENGTH@ 1
---------------DEL InfixExpression@@relativePath.length() - 1 @AT@ 3985 @LENGTH@ 24
------------------DEL MethodInvocation@@relativePath.length() @AT@ 3985 @LENGTH@ 21
---------------------DEL SimpleName@@Name:relativePath @AT@ 3985 @LENGTH@ 12
---------------------DEL SimpleName@@MethodName:length:[] @AT@ 3998 @LENGTH@ 8
------------------DEL Operator@@- @AT@ 4006 @LENGTH@ 1
------------------DEL NumberLiteral@@1 @AT@ 4008 @LENGTH@ 1
---------DEL SimpleName@@relativePath @AT@ 4013 @LENGTH@ 12


UPD IfStatement@@if (ModuleRootMarker.isModuleRoot(additionalRoot)) {  resourceRoots.add(additionalRoot);} @TO@ if (ModuleRootMarker.isModuleRoot(additionalRoot) && !SubDeploymentMarker.isSubDeployment(additionalRoot)) {  resourceRoots.add(additionalRoot);} @AT@ 3628 @LENGTH@ 125
---INS InfixExpression@@ModuleRootMarker.isModuleRoot(additionalRoot) && !SubDeploymentMarker.isSubDeployment(additionalRoot) @TO@ IfStatement@@if (ModuleRootMarker.isModuleRoot(additionalRoot)) {  resourceRoots.add(additionalRoot);} @AT@ 3691 @LENGTH@ 101
------MOV MethodInvocation@@ModuleRootMarker.isModuleRoot(additionalRoot) @TO@ InfixExpression@@ModuleRootMarker.isModuleRoot(additionalRoot) && !SubDeploymentMarker.isSubDeployment(additionalRoot) @AT@ 3632 @LENGTH@ 45
------MOV MethodInvocation@@ModuleRootMarker.isModuleRoot(additionalRoot) @TO@ InfixExpression@@ModuleRootMarker.isModuleRoot(additionalRoot) && !SubDeploymentMarker.isSubDeployment(additionalRoot) @AT@ 3632 @LENGTH@ 45
------INS Operator@@&& @TO@ InfixExpression@@ModuleRootMarker.isModuleRoot(additionalRoot) && !SubDeploymentMarker.isSubDeployment(additionalRoot) @AT@ 3736 @LENGTH@ 2
------INS PrefixExpression@@!SubDeploymentMarker.isSubDeployment(additionalRoot) @TO@ InfixExpression@@ModuleRootMarker.isModuleRoot(additionalRoot) && !SubDeploymentMarker.isSubDeployment(additionalRoot) @AT@ 3740 @LENGTH@ 52
---------INS Operator@@! @TO@ PrefixExpression@@!SubDeploymentMarker.isSubDeployment(additionalRoot) @AT@ 3740 @LENGTH@ 1
---------INS MethodInvocation@@SubDeploymentMarker.isSubDeployment(additionalRoot) @TO@ PrefixExpression@@!SubDeploymentMarker.isSubDeployment(additionalRoot) @AT@ 3741 @LENGTH@ 51
------------INS SimpleName@@Name:SubDeploymentMarker @TO@ MethodInvocation@@SubDeploymentMarker.isSubDeployment(additionalRoot) @AT@ 3741 @LENGTH@ 19
------------INS SimpleName@@MethodName:isSubDeployment:[additionalRoot] @TO@ MethodInvocation@@SubDeploymentMarker.isSubDeployment(additionalRoot) @AT@ 3761 @LENGTH@ 31
---------------INS SimpleName@@additionalRoot @TO@ SimpleName@@MethodName:isSubDeployment:[additionalRoot] @AT@ 3777 @LENGTH@ 14


UPD ExpressionStatement@@MethodInvocation:from("direct:camelClient").onException(NoSuchCustomerException.class).handled(true).unmarshal(soapDataFormat).end().marshal(soapDataFormat).to("direct:cxfEndpoint").unmarshal(soapDataFormat) @TO@ MethodInvocation:from("direct:camelClient").marshal(soapDataFormat).to("direct:cxfEndpoint").unmarshal(soapDataFormat) @AT@ 3255 @LENGTH@ 295
---UPD MethodInvocation@@from("direct:camelClient").onException(NoSuchCustomerException.class).handled(true).unmarshal(soapDataFormat).end().marshal(soapDataFormat).to("direct:cxfEndpoint").unmarshal(soapDataFormat) @TO@ from("direct:camelClient").marshal(soapDataFormat).to("direct:cxfEndpoint").unmarshal(soapDataFormat) @AT@ 3255 @LENGTH@ 294
------DEL MethodInvocation@@MethodName:end:[] @AT@ 3255 @LENGTH@ 187
------DEL MethodInvocation@@MethodName:unmarshal:[soapDataFormat] @AT@ 3255 @LENGTH@ 165
---------DEL SimpleName@@soapDataFormat @AT@ 3405 @LENGTH@ 14
------DEL MethodInvocation@@MethodName:handled:[true] @AT@ 3255 @LENGTH@ 119
---------DEL BooleanLiteral@@true @AT@ 3369 @LENGTH@ 4
------DEL MethodInvocation@@MethodName:onException:[NoSuchCustomerException.class] @AT@ 3255 @LENGTH@ 85
---------DEL TypeLiteral@@NoSuchCustomerException.class @AT@ 3310 @LENGTH@ 29


UPD MethodDeclaration@@static, void, MethodName:addService, final ServiceTarget serviceTarget, final ServiceName serviceName, final byte[] hash,  @TO@ static, ServiceController<VirtualFile>, MethodName:addService, final ServiceTarget serviceTarget, final ServiceName serviceName, final byte[] hash,  @AT@ 1752 @LENGTH@ 385
---DEL PrimitiveType@@void @AT@ 1759 @LENGTH@ 4
---INS ParameterizedType@@ServiceController<VirtualFile> @TO@ MethodDeclaration@@static, void, MethodName:addService, final ServiceTarget serviceTarget, final ServiceName serviceName, final byte[] hash,  @AT@ 1807 @LENGTH@ 30
------INS SimpleType@@ServiceController @TO@ ParameterizedType@@ServiceController<VirtualFile> @AT@ 1807 @LENGTH@ 17
------INS SimpleType@@VirtualFile @TO@ ParameterizedType@@ServiceController<VirtualFile> @AT@ 1825 @LENGTH@ 11
---DEL ExpressionStatement@@MethodInvocation:serviceTarget.addService(serviceName,service).addDependency(ContentRepository.SERVICE_NAME,ContentRepository.class,service.contentRepositoryInjectedValue).install() @AT@ 1937 @LENGTH@ 194
---INS ReturnStatement@@MethodInvocation:serviceTarget.addService(serviceName,service).addDependency(ContentRepository.SERVICE_NAME,ContentRepository.class,service.contentRepositoryInjectedValue).install() @TO@ MethodDeclaration@@static, void, MethodName:addService, final ServiceTarget serviceTarget, final ServiceName serviceName, final byte[] hash,  @AT@ 2011 @LENGTH@ 201
------MOV MethodInvocation@@serviceTarget.addService(serviceName,service).addDependency(ContentRepository.SERVICE_NAME,ContentRepository.class,service.contentRepositoryInjectedValue).install() @TO@ ReturnStatement@@MethodInvocation:serviceTarget.addService(serviceName,service).addDependency(ContentRepository.SERVICE_NAME,ContentRepository.class,service.contentRepositoryInjectedValue).install() @AT@ 1937 @LENGTH@ 193


UPD MethodDeclaration@@public, boolean, MethodName:canAppearNext, CommandContext ctx,  @TO@ public, boolean, MethodName:canAppearNext, CommandContext ctx, CommandFormatException,  @AT@ 4311 @LENGTH@ 254
---INS SimpleType@@CommandFormatException @TO@ MethodDeclaration@@public, boolean, MethodName:canAppearNext, CommandContext ctx,  @AT@ 4397 @LENGTH@ 22


UPD Block@@ThenBody:{  sslSocketConnector=new SslSocketConnector();  sslSocketConnector.setPassword(sslPassword);  sslSocketConnector.setKeyPassword(sslKeyPassword);  if (sslKeystore != null) {    sslSocketConnector.setKeystore(sslKeystore);  }} @TO@ ThenBody:{  sslSocketConnector=new SslSocketConnector();  sslSocketConnector.getSslContextFactory().setKeyManagerPassword(sslPassword);  sslSocketConnector.getSslContextFactory().setKeyStorePassword(sslKeyPassword);  if (sslKeystore != null) {    sslSocketConnector.getSslContextFactory().setKeyStore(sslKeystore);    ;  }} @AT@ 8275 @LENGTH@ 493
---UPD ExpressionStatement@@MethodInvocation:sslSocketConnector.setPassword(sslPassword) @TO@ MethodInvocation:sslSocketConnector.getSslContextFactory().setKeyManagerPassword(sslPassword) @AT@ 8537 @LENGTH@ 44
------UPD MethodInvocation@@sslSocketConnector.setPassword(sslPassword) @TO@ sslSocketConnector.getSslContextFactory().setKeyManagerPassword(sslPassword) @AT@ 8537 @LENGTH@ 43
---------INS MethodInvocation@@MethodName:getSslContextFactory:[] @TO@ MethodInvocation@@sslSocketConnector.setPassword(sslPassword) @AT@ 8481 @LENGTH@ 41
---------UPD SimpleName@@MethodName:setPassword:[sslPassword] @TO@ MethodName:setKeyManagerPassword:[sslPassword] @AT@ 8556 @LENGTH@ 24
---UPD ExpressionStatement@@MethodInvocation:sslSocketConnector.setKeyPassword(sslKeyPassword) @TO@ MethodInvocation:sslSocketConnector.getSslContextFactory().setKeyStorePassword(sslKeyPassword) @AT@ 8594 @LENGTH@ 50
------UPD MethodInvocation@@sslSocketConnector.setKeyPassword(sslKeyPassword) @TO@ sslSocketConnector.getSslContextFactory().setKeyStorePassword(sslKeyPassword) @AT@ 8594 @LENGTH@ 49
---------INS MethodInvocation@@MethodName:getSslContextFactory:[] @TO@ MethodInvocation@@sslSocketConnector.setKeyPassword(sslKeyPassword) @AT@ 8571 @LENGTH@ 41
---------UPD SimpleName@@MethodName:setKeyPassword:[sslKeyPassword] @TO@ MethodName:setKeyStorePassword:[sslKeyPassword] @AT@ 8613 @LENGTH@ 30
---UPD IfStatement@@if (sslKeystore != null) {  sslSocketConnector.setKeystore(sslKeystore);} @TO@ if (sslKeystore != null) {  sslSocketConnector.getSslContextFactory().setKeyStore(sslKeystore);  ;} @AT@ 8657 @LENGTH@ 101
------UPD Block@@ThenBody:{  sslSocketConnector.setKeystore(sslKeystore);} @TO@ ThenBody:{  sslSocketConnector.getSslContextFactory().setKeyStore(sslKeystore);  ;} @AT@ 8682 @LENGTH@ 76
---------UPD ExpressionStatement@@MethodInvocation:sslSocketConnector.setKeystore(sslKeystore) @TO@ MethodInvocation:sslSocketConnector.getSslContextFactory().setKeyStore(sslKeystore) @AT@ 8700 @LENGTH@ 44
------------UPD MethodInvocation@@sslSocketConnector.setKeystore(sslKeystore) @TO@ sslSocketConnector.getSslContextFactory().setKeyStore(sslKeystore) @AT@ 8700 @LENGTH@ 43
---------------INS MethodInvocation@@MethodName:getSslContextFactory:[] @TO@ MethodInvocation@@sslSocketConnector.setKeystore(sslKeystore) @AT@ 8705 @LENGTH@ 41
---------------UPD SimpleName@@MethodName:setKeystore:[sslKeystore] @TO@ MethodName:setKeyStore:[sslKeystore] @AT@ 8719 @LENGTH@ 24


INS MethodDeclaration@@public, boolean, MethodName:hasArgument, int index,  @TO@ TypeDeclaration@@[public]BatchMoveLineHandler, CommandHandlerWithHelp @AT@ 3688 @LENGTH@ 71
---INS Modifier@@public @TO@ MethodDeclaration@@public, boolean, MethodName:hasArgument, int index,  @AT@ 3688 @LENGTH@ 6
---INS PrimitiveType@@boolean @TO@ MethodDeclaration@@public, boolean, MethodName:hasArgument, int index,  @AT@ 3695 @LENGTH@ 7
---INS SimpleName@@MethodName:hasArgument @TO@ MethodDeclaration@@public, boolean, MethodName:hasArgument, int index,  @AT@ 3703 @LENGTH@ 11
---INS SingleVariableDeclaration@@int index @TO@ MethodDeclaration@@public, boolean, MethodName:hasArgument, int index,  @AT@ 3715 @LENGTH@ 9
------INS PrimitiveType@@int @TO@ SingleVariableDeclaration@@int index @AT@ 3715 @LENGTH@ 3
------INS SimpleName@@index @TO@ SingleVariableDeclaration@@int index @AT@ 3719 @LENGTH@ 5
---INS ReturnStatement@@InfixExpression:index < 2 @TO@ MethodDeclaration@@public, boolean, MethodName:hasArgument, int index,  @AT@ 3736 @LENGTH@ 17
------INS InfixExpression@@index < 2 @TO@ ReturnStatement@@InfixExpression:index < 2 @AT@ 3743 @LENGTH@ 9
---------INS SimpleName@@index @TO@ InfixExpression@@index < 2 @AT@ 3743 @LENGTH@ 5
---------INS Operator@@< @TO@ InfixExpression@@index < 2 @AT@ 3748 @LENGTH@ 1
---------INS NumberLiteral@@2 @TO@ InfixExpression@@index < 2 @AT@ 3751 @LENGTH@ 1


UPD IfStatement@@if (ArgumentState.ID.equals(id)) {  if (buffer.length() > 0) {    final int endIndex=ctx.getCharacter() == ' ' ? ctx.getLocation() : ctx.getLocation() + 1;    argHandler.argument(buffer.toString(),nameStart,null,-1,endIndex);  }  buffer.setLength(0);  name=null;  nameStart=-1;} else if (ArgumentValueState.ID.equals(id)) {  final int endIndex=ctx.getCharacter() == ' ' ? ctx.getLocation() : ctx.getLocation() + 1;  argHandler.argument(name,nameStart,buffer.toString(),valueStart,endIndex);  buffer.setLength(0);  valueStart=-1;} @TO@ if (ArgumentState.ID.equals(id)) {  if (buffer.length() > 0) {    final int endIndex=ctx.getLocation();    argHandler.argument(buffer.toString(),nameStart,null,-1,endIndex);  }  buffer.setLength(0);  name=null;  nameStart=-1;} else if (ArgumentValueState.ID.equals(id)) {  final int endIndex=ctx.getLocation();  argHandler.argument(name,nameStart,buffer.toString(),valueStart,endIndex);  buffer.setLength(0);  valueStart=-1;} @AT@ 3107 @LENGTH@ 791
---UPD Block@@ThenBody:{  if (buffer.length() > 0) {    final int endIndex=ctx.getCharacter() == ' ' ? ctx.getLocation() : ctx.getLocation() + 1;    argHandler.argument(buffer.toString(),nameStart,null,-1,endIndex);  }  buffer.setLength(0);  name=null;  nameStart=-1;} @TO@ ThenBody:{  if (buffer.length() > 0) {    final int endIndex=ctx.getLocation();    argHandler.argument(buffer.toString(),nameStart,null,-1,endIndex);  }  buffer.setLength(0);  name=null;  nameStart=-1;} @AT@ 3139 @LENGTH@ 408
------UPD IfStatement@@if (buffer.length() > 0) {  final int endIndex=ctx.getCharacter() == ' ' ? ctx.getLocation() : ctx.getLocation() + 1;  argHandler.argument(buffer.toString(),nameStart,null,-1,endIndex);} @TO@ if (buffer.length() > 0) {  final int endIndex=ctx.getLocation();  argHandler.argument(buffer.toString(),nameStart,null,-1,endIndex);} @AT@ 3161 @LENGTH@ 258
---------UPD Block@@ThenBody:{  final int endIndex=ctx.getCharacter() == ' ' ? ctx.getLocation() : ctx.getLocation() + 1;  argHandler.argument(buffer.toString(),nameStart,null,-1,endIndex);} @TO@ ThenBody:{  final int endIndex=ctx.getLocation();  argHandler.argument(buffer.toString(),nameStart,null,-1,endIndex);} @AT@ 3185 @LENGTH@ 234
------------UPD VariableDeclarationStatement@@final int endIndex=ctx.getCharacter() == ' ' ? ctx.getLocation() : ctx.getLocation() + 1; @TO@ final int endIndex=ctx.getLocation(); @AT@ 3211 @LENGTH@ 91
---------------UPD VariableDeclarationFragment@@endIndex=ctx.getCharacter() == ' ' ? ctx.getLocation() : ctx.getLocation() + 1 @TO@ endIndex=ctx.getLocation() @AT@ 3221 @LENGTH@ 80
------------------DEL ConditionalExpression@@ctx.getCharacter() == ' ' ? ctx.getLocation() : ctx.getLocation() + 1 @AT@ 3232 @LENGTH@ 69
---------------------DEL InfixExpression@@ctx.getCharacter() == ' ' @AT@ 3232 @LENGTH@ 25
------------------------DEL MethodInvocation@@ctx.getCharacter() @AT@ 3232 @LENGTH@ 18
---------------------------DEL SimpleName@@Name:ctx @AT@ 3232 @LENGTH@ 3
---------------------------DEL SimpleName@@MethodName:getCharacter:[] @AT@ 3236 @LENGTH@ 14
------------------------DEL Operator@@== @AT@ 3250 @LENGTH@ 2
------------------------DEL CharacterLiteral@@' ' @AT@ 3254 @LENGTH@ 3
---------------------DEL MethodInvocation@@ctx.getLocation() @AT@ 3260 @LENGTH@ 17
---------------------DEL InfixExpression@@ctx.getLocation() + 1 @AT@ 3280 @LENGTH@ 21
------------------------DEL MethodInvocation@@ctx.getLocation() @AT@ 3280 @LENGTH@ 17
---------------------------DEL SimpleName@@Name:ctx @AT@ 3280 @LENGTH@ 3
---------------------------DEL SimpleName@@MethodName:getLocation:[] @AT@ 3284 @LENGTH@ 13
------------------------DEL Operator@@+ @AT@ 3297 @LENGTH@ 1
------------------------DEL NumberLiteral@@1 @AT@ 3300 @LENGTH@ 1
------------------INS MethodInvocation@@ctx.getLocation() @TO@ VariableDeclarationFragment@@endIndex=ctx.getCharacter() == ' ' ? ctx.getLocation() : ctx.getLocation() + 1 @AT@ 3232 @LENGTH@ 17
---------------------MOV SimpleName@@Name:ctx @TO@ MethodInvocation@@ctx.getLocation() @AT@ 3260 @LENGTH@ 3
---------------------MOV SimpleName@@MethodName:getLocation:[] @TO@ MethodInvocation@@ctx.getLocation() @AT@ 3264 @LENGTH@ 13
---UPD Block@@ElseBody:if (ArgumentValueState.ID.equals(id)) {  final int endIndex=ctx.getCharacter() == ' ' ? ctx.getLocation() : ctx.getLocation() + 1;  argHandler.argument(name,nameStart,buffer.toString(),valueStart,endIndex);  buffer.setLength(0);  valueStart=-1;} @TO@ ElseBody:if (ArgumentValueState.ID.equals(id)) {  final int endIndex=ctx.getLocation();  argHandler.argument(name,nameStart,buffer.toString(),valueStart,endIndex);  buffer.setLength(0);  valueStart=-1;} @AT@ 3553 @LENGTH@ 345
------UPD IfStatement@@if (ArgumentValueState.ID.equals(id)) {  final int endIndex=ctx.getCharacter() == ' ' ? ctx.getLocation() : ctx.getLocation() + 1;  argHandler.argument(name,nameStart,buffer.toString(),valueStart,endIndex);  buffer.setLength(0);  valueStart=-1;} @TO@ if (ArgumentValueState.ID.equals(id)) {  final int endIndex=ctx.getLocation();  argHandler.argument(name,nameStart,buffer.toString(),valueStart,endIndex);  buffer.setLength(0);  valueStart=-1;} @AT@ 3553 @LENGTH@ 345
---------UPD Block@@ThenBody:{  final int endIndex=ctx.getCharacter() == ' ' ? ctx.getLocation() : ctx.getLocation() + 1;  argHandler.argument(name,nameStart,buffer.toString(),valueStart,endIndex);  buffer.setLength(0);  valueStart=-1;} @TO@ ThenBody:{  final int endIndex=ctx.getLocation();  argHandler.argument(name,nameStart,buffer.toString(),valueStart,endIndex);  buffer.setLength(0);  valueStart=-1;} @AT@ 3590 @LENGTH@ 308
------------UPD VariableDeclarationStatement@@final int endIndex=ctx.getCharacter() == ' ' ? ctx.getLocation() : ctx.getLocation() + 1; @TO@ final int endIndex=ctx.getLocation(); @AT@ 3612 @LENGTH@ 91
---------------UPD VariableDeclarationFragment@@endIndex=ctx.getCharacter() == ' ' ? ctx.getLocation() : ctx.getLocation() + 1 @TO@ endIndex=ctx.getLocation() @AT@ 3622 @LENGTH@ 80
------------------DEL ConditionalExpression@@ctx.getCharacter() == ' ' ? ctx.getLocation() : ctx.getLocation() + 1 @AT@ 3633 @LENGTH@ 69
---------------------DEL InfixExpression@@ctx.getCharacter() == ' ' @AT@ 3633 @LENGTH@ 25
------------------------DEL MethodInvocation@@ctx.getCharacter() @AT@ 3633 @LENGTH@ 18
---------------------------DEL SimpleName@@Name:ctx @AT@ 3633 @LENGTH@ 3
---------------------------DEL SimpleName@@MethodName:getCharacter:[] @AT@ 3637 @LENGTH@ 14
------------------------DEL Operator@@== @AT@ 3651 @LENGTH@ 2
------------------------DEL CharacterLiteral@@' ' @AT@ 3655 @LENGTH@ 3
---------------------DEL MethodInvocation@@ctx.getLocation() @AT@ 3661 @LENGTH@ 17
---------------------DEL InfixExpression@@ctx.getLocation() + 1 @AT@ 3681 @LENGTH@ 21
------------------------DEL MethodInvocation@@ctx.getLocation() @AT@ 3681 @LENGTH@ 17
---------------------------DEL SimpleName@@Name:ctx @AT@ 3681 @LENGTH@ 3
---------------------------DEL SimpleName@@MethodName:getLocation:[] @AT@ 3685 @LENGTH@ 13
------------------------DEL Operator@@+ @AT@ 3698 @LENGTH@ 1
------------------------DEL NumberLiteral@@1 @AT@ 3701 @LENGTH@ 1
------------------INS MethodInvocation@@ctx.getLocation() @TO@ VariableDeclarationFragment@@endIndex=ctx.getCharacter() == ' ' ? ctx.getLocation() : ctx.getLocation() + 1 @AT@ 3654 @LENGTH@ 17
---------------------MOV SimpleName@@Name:ctx @TO@ MethodInvocation@@ctx.getLocation() @AT@ 3661 @LENGTH@ 3
---------------------MOV SimpleName@@MethodName:getLocation:[] @TO@ MethodInvocation@@ctx.getLocation() @AT@ 3665 @LENGTH@ 13


UPD ExpressionStatement@@MethodInvocation:book.setId(new Long(123)) @TO@ MethodInvocation:book.setId(123) @AT@ 2167 @LENGTH@ 26
---UPD MethodInvocation@@book.setId(new Long(123)) @TO@ book.setId(123) @AT@ 2167 @LENGTH@ 25
------UPD SimpleName@@MethodName:setId:[new Long(123)] @TO@ MethodName:setId:[123] @AT@ 2172 @LENGTH@ 20
---------DEL ClassInstanceCreation@@Long[123] @AT@ 2178 @LENGTH@ 13
------------DEL New@@new @AT@ 2178 @LENGTH@ 3
------------DEL SimpleType@@Long @AT@ 2182 @LENGTH@ 4
------------DEL NumberLiteral@@123 @AT@ 2187 @LENGTH@ 3
---------INS NumberLiteral@@123 @TO@ SimpleName@@MethodName:setId:[new Long(123)] @AT@ 2178 @LENGTH@ 3


UPD VariableDeclarationStatement@@Message message=new GenericMessage(MESSAGE_BODY); @TO@ Message message=new GenericMessage<Object>(MESSAGE_BODY); @AT@ 2231 @LENGTH@ 51
---UPD VariableDeclarationFragment@@message=new GenericMessage(MESSAGE_BODY) @TO@ message=new GenericMessage<Object>(MESSAGE_BODY) @AT@ 2239 @LENGTH@ 42
------UPD ClassInstanceCreation@@GenericMessage[MESSAGE_BODY] @TO@ GenericMessage<Object>[MESSAGE_BODY] @AT@ 2249 @LENGTH@ 32
---------INS ParameterizedType@@GenericMessage<Object> @TO@ ClassInstanceCreation@@GenericMessage[MESSAGE_BODY] @AT@ 2253 @LENGTH@ 22
------------INS SimpleType@@GenericMessage @TO@ ParameterizedType@@GenericMessage<Object> @AT@ 2253 @LENGTH@ 14
------------INS SimpleType@@Object @TO@ ParameterizedType@@GenericMessage<Object> @AT@ 2268 @LENGTH@ 6
---------DEL SimpleType@@GenericMessage @AT@ 2253 @LENGTH@ 14


UPD ThrowStatement@@ClassInstanceCreation:new DeploymentUnitProcessingException("Multiple matching methods found for '" + className + "'") @TO@ ClassInstanceCreation:new DeploymentUnitProcessingException("More than one matching method found for method '" + name + "' on '"+ className+ "'") @AT@ 3578 @LENGTH@ 103
---UPD ClassInstanceCreation@@DeploymentUnitProcessingException["Multiple matching methods found for '" + className + "'"] @TO@ DeploymentUnitProcessingException["More than one matching method found for method '" + name + "' on '"+ className+ "'"] @AT@ 3584 @LENGTH@ 96
------UPD InfixExpression@@"Multiple matching methods found for '" + className + "'" @TO@ "More than one matching method found for method '" + name + "' on '"+ className+ "'" @AT@ 3622 @LENGTH@ 57
---------UPD StringLiteral@@"Multiple matching methods found for '" @TO@ "More than one matching method found for method '" @AT@ 3622 @LENGTH@ 39
---------INS SimpleName@@name @TO@ InfixExpression@@"Multiple matching methods found for '" + className + "'" @AT@ 3698 @LENGTH@ 4
---------INS StringLiteral@@"' on '" @TO@ InfixExpression@@"Multiple matching methods found for '" + className + "'" @AT@ 3704 @LENGTH@ 8


DEL MethodDeclaration@@public, ThreadFactory, MethodName:getThreadFactory,  @AT@ 2718 @LENGTH@ 77
---DEL Modifier@@public @AT@ 2718 @LENGTH@ 6
---DEL SimpleType@@ThreadFactory @AT@ 2725 @LENGTH@ 13
---DEL SimpleName@@MethodName:getThreadFactory @AT@ 2739 @LENGTH@ 16
---DEL ReturnStatement@@SimpleName:threadFactory @AT@ 2768 @LENGTH@ 21
------DEL SimpleName@@threadFactory @AT@ 2775 @LENGTH@ 13


UPD MethodDeclaration@@public, String, MethodName:postTweet, TweetForm tweetForm,  @TO@ public, String, MethodName:postTweet, Principal user, TweetForm tweetForm,  @AT@ 2118 @LENGTH@ 475
---UPD VariableDeclarationStatement@@List<ServiceProviderConnection<TwitterOperations>> connections=twitterProvider.getConnections(1); @TO@ List<ServiceProviderConnection<TwitterOperations>> connections=twitterProvider.getConnections(user.getName()); @AT@ 2167 @LENGTH@ 99
------UPD VariableDeclarationFragment@@connections=twitterProvider.getConnections(1) @TO@ connections=twitterProvider.getConnections(user.getName()) @AT@ 2218 @LENGTH@ 47
---------UPD MethodInvocation@@twitterProvider.getConnections(1) @TO@ twitterProvider.getConnections(user.getName()) @AT@ 2232 @LENGTH@ 33
------------UPD SimpleName@@MethodName:getConnections:[1] @TO@ MethodName:getConnections:[user.getName()] @AT@ 2248 @LENGTH@ 17
---------------DEL NumberLiteral@@1 @AT@ 2263 @LENGTH@ 1
---------------INS MethodInvocation@@user.getName() @TO@ SimpleName@@MethodName:getConnections:[1] @AT@ 2348 @LENGTH@ 14
------------------INS SimpleName@@Name:user @TO@ MethodInvocation@@user.getName() @AT@ 2348 @LENGTH@ 4
------------------INS SimpleName@@MethodName:getName:[] @TO@ MethodInvocation@@user.getName() @AT@ 2353 @LENGTH@ 9
---INS SingleVariableDeclaration@@Principal user @TO@ MethodDeclaration@@public, String, MethodName:postTweet, TweetForm tweetForm,  @AT@ 2211 @LENGTH@ 14
------INS SimpleType@@Principal @TO@ SingleVariableDeclaration@@Principal user @AT@ 2211 @LENGTH@ 9
------INS SimpleName@@user @TO@ SingleVariableDeclaration@@Principal user @AT@ 2221 @LENGTH@ 4


UPD IfStatement@@if (appArchive instanceof WebArchive) {  final ArchivePath webInfLib=ArchivePaths.create("WEB-INF","lib");  for (  Archive<?> aux : auxArchives) {    if (!excludedAuxillaryArchives.contains(aux.getName())) {      appArchive.add(aux,webInfLib);    }  }} else {  merge(appArchive,auxArchives);} @TO@ if (WebArchive.class.isAssignableFrom(appArchive.getClass())) {  final ArchivePath webInfLib=ArchivePaths.create("WEB-INF","lib");  for (  Archive<?> aux : auxArchives) {    if (!excludedAuxillaryArchives.contains(aux.getName())) {      appArchive.add(aux,webInfLib);    }  }} else {  merge(appArchive,auxArchives);} @AT@ 2334 @LENGTH@ 617
---DEL InstanceofExpression@@appArchive instanceof WebArchive @AT@ 2338 @LENGTH@ 32
------DEL SimpleName@@appArchive @AT@ 2338 @LENGTH@ 10
------DEL Instanceof@@instanceof @AT@ 2349 @LENGTH@ 10
------DEL SimpleType@@WebArchive @AT@ 2360 @LENGTH@ 10
---INS MethodInvocation@@WebArchive.class.isAssignableFrom(appArchive.getClass()) @TO@ IfStatement@@if (appArchive instanceof WebArchive) {  final ArchivePath webInfLib=ArchivePaths.create("WEB-INF","lib");  for (  Archive<?> aux : auxArchives) {    if (!excludedAuxillaryArchives.contains(aux.getName())) {      appArchive.add(aux,webInfLib);    }  }} else {  merge(appArchive,auxArchives);} @AT@ 2471 @LENGTH@ 56
------INS TypeLiteral@@WebArchive.class @TO@ MethodInvocation@@WebArchive.class.isAssignableFrom(appArchive.getClass()) @AT@ 2471 @LENGTH@ 16
------INS SimpleName@@MethodName:isAssignableFrom:[appArchive.getClass()] @TO@ MethodInvocation@@WebArchive.class.isAssignableFrom(appArchive.getClass()) @AT@ 2488 @LENGTH@ 39
---------INS MethodInvocation@@appArchive.getClass() @TO@ SimpleName@@MethodName:isAssignableFrom:[appArchive.getClass()] @AT@ 2505 @LENGTH@ 21
------------INS SimpleName@@Name:appArchive @TO@ MethodInvocation@@appArchive.getClass() @AT@ 2505 @LENGTH@ 10
------------INS SimpleName@@MethodName:getClass:[] @TO@ MethodInvocation@@appArchive.getClass() @AT@ 2516 @LENGTH@ 10


UPD ExpressionStatement@@MethodInvocation:mock.expectedMessageCount(1) @TO@ MethodInvocation:mock.expectedMinimumMessageCount(1) @AT@ 1342 @LENGTH@ 29
---UPD MethodInvocation@@mock.expectedMessageCount(1) @TO@ mock.expectedMinimumMessageCount(1) @AT@ 1342 @LENGTH@ 28
------UPD SimpleName@@MethodName:expectedMessageCount:[1] @TO@ MethodName:expectedMinimumMessageCount:[1] @AT@ 1347 @LENGTH@ 23


UPD MethodDeclaration@@public, static, void, MethodName:addService, final ServiceName sname, final String abstractPath, final ServiceTarget serviceTarget,  @TO@ public, static, ServiceController<String>, MethodName:addService, final ServiceName sname, final String abstractPath, final ServiceTarget serviceTarget,  @AT@ 1728 @LENGTH@ 261
---DEL PrimitiveType@@void @AT@ 1742 @LENGTH@ 4
---INS ParameterizedType@@ServiceController<String> @TO@ MethodDeclaration@@public, static, void, MethodName:addService, final ServiceName sname, final String abstractPath, final ServiceTarget serviceTarget,  @AT@ 1818 @LENGTH@ 25
------INS SimpleType@@ServiceController @TO@ ParameterizedType@@ServiceController<String> @AT@ 1818 @LENGTH@ 17
------INS SimpleType@@String @TO@ ParameterizedType@@ServiceController<String> @AT@ 1836 @LENGTH@ 6
---DEL ExpressionStatement@@MethodInvocation:serviceTarget.addService(sname,service).install() @AT@ 1932 @LENGTH@ 51
---INS ReturnStatement@@MethodInvocation:serviceTarget.addService(sname,service).install() @TO@ MethodDeclaration@@public, static, void, MethodName:addService, final ServiceName sname, final String abstractPath, final ServiceTarget serviceTarget,  @AT@ 2029 @LENGTH@ 58
------MOV MethodInvocation@@serviceTarget.addService(sname,service).install() @TO@ ReturnStatement@@MethodInvocation:serviceTarget.addService(sname,service).install() @AT@ 1932 @LENGTH@ 50


INS MethodDeclaration@@public, voidMethodName:EJBMethodDescription, Method method,  @TO@ TypeDeclaration@@[public]EJBMethodDescription,  @AT@ 1768 @LENGTH@ 390
---INS Modifier@@public @TO@ MethodDeclaration@@public, voidMethodName:EJBMethodDescription, Method method,  @AT@ 1768 @LENGTH@ 6
---INS SimpleName@@MethodName:EJBMethodDescription @TO@ MethodDeclaration@@public, voidMethodName:EJBMethodDescription, Method method,  @AT@ 1775 @LENGTH@ 20
---INS SingleVariableDeclaration@@Method method @TO@ MethodDeclaration@@public, voidMethodName:EJBMethodDescription, Method method,  @AT@ 1796 @LENGTH@ 13
------INS SimpleType@@Method @TO@ SingleVariableDeclaration@@Method method @AT@ 1796 @LENGTH@ 6
------INS SimpleName@@method @TO@ SingleVariableDeclaration@@Method method @AT@ 1803 @LENGTH@ 6
---INS IfStatement@@if (method == null) {  throw new IllegalArgumentException("Method cannot be null");} @TO@ MethodDeclaration@@public, voidMethodName:EJBMethodDescription, Method method,  @AT@ 1821 @LENGTH@ 104
------INS InfixExpression@@method == null @TO@ IfStatement@@if (method == null) {  throw new IllegalArgumentException("Method cannot be null");} @AT@ 1825 @LENGTH@ 14
---------INS SimpleName@@method @TO@ InfixExpression@@method == null @AT@ 1825 @LENGTH@ 6
---------INS Operator@@== @TO@ InfixExpression@@method == null @AT@ 1831 @LENGTH@ 2
---------INS NullLiteral@@null @TO@ InfixExpression@@method == null @AT@ 1835 @LENGTH@ 4
------INS Block@@ThenBody:{  throw new IllegalArgumentException("Method cannot be null");} @TO@ IfStatement@@if (method == null) {  throw new IllegalArgumentException("Method cannot be null");} @AT@ 1841 @LENGTH@ 84
---------INS ThrowStatement@@ClassInstanceCreation:new IllegalArgumentException("Method cannot be null") @TO@ Block@@ThenBody:{  throw new IllegalArgumentException("Method cannot be null");} @AT@ 1855 @LENGTH@ 60
------------INS ClassInstanceCreation@@IllegalArgumentException["Method cannot be null"] @TO@ ThrowStatement@@ClassInstanceCreation:new IllegalArgumentException("Method cannot be null") @AT@ 1861 @LENGTH@ 53
---------------INS New@@new @TO@ ClassInstanceCreation@@IllegalArgumentException["Method cannot be null"] @AT@ 1861 @LENGTH@ 3
---------------INS SimpleType@@IllegalArgumentException @TO@ ClassInstanceCreation@@IllegalArgumentException["Method cannot be null"] @AT@ 1865 @LENGTH@ 24
---------------INS StringLiteral@@"Method cannot be null" @TO@ ClassInstanceCreation@@IllegalArgumentException["Method cannot be null"] @AT@ 1890 @LENGTH@ 23
---INS ExpressionStatement@@Assignment:this.methodName=method.getName() @TO@ MethodDeclaration@@public, voidMethodName:EJBMethodDescription, Method method,  @AT@ 1934 @LENGTH@ 35
------INS Assignment@@this.methodName=method.getName() @TO@ ExpressionStatement@@Assignment:this.methodName=method.getName() @AT@ 1934 @LENGTH@ 34
---------INS FieldAccess@@this.methodName @TO@ Assignment@@this.methodName=method.getName() @AT@ 1934 @LENGTH@ 15
------------INS ThisExpression@@this @TO@ FieldAccess@@this.methodName @AT@ 1934 @LENGTH@ 4
------------INS SimpleName@@methodName @TO@ FieldAccess@@this.methodName @AT@ 1939 @LENGTH@ 10
---------INS Operator@@= @TO@ Assignment@@this.methodName=method.getName() @AT@ 1949 @LENGTH@ 1
---------INS MethodInvocation@@method.getName() @TO@ Assignment@@this.methodName=method.getName() @AT@ 1952 @LENGTH@ 16
------------INS SimpleName@@Name:method @TO@ MethodInvocation@@method.getName() @AT@ 1952 @LENGTH@ 6
------------INS SimpleName@@MethodName:getName:[] @TO@ MethodInvocation@@method.getName() @AT@ 1959 @LENGTH@ 9
---INS ExpressionStatement@@Assignment:this.viewType=MethodIntf.BEAN @TO@ MethodDeclaration@@public, voidMethodName:EJBMethodDescription, Method method,  @AT@ 1978 @LENGTH@ 32
------INS Assignment@@this.viewType=MethodIntf.BEAN @TO@ ExpressionStatement@@Assignment:this.viewType=MethodIntf.BEAN @AT@ 1978 @LENGTH@ 31
---------INS FieldAccess@@this.viewType @TO@ Assignment@@this.viewType=MethodIntf.BEAN @AT@ 1978 @LENGTH@ 13
------------INS ThisExpression@@this @TO@ FieldAccess@@this.viewType @AT@ 1978 @LENGTH@ 4
------------INS SimpleName@@viewType @TO@ FieldAccess@@this.viewType @AT@ 1983 @LENGTH@ 8
---------INS Operator@@= @TO@ Assignment@@this.viewType=MethodIntf.BEAN @AT@ 1991 @LENGTH@ 1
---------INS QualifiedName@@MethodIntf.BEAN @TO@ Assignment@@this.viewType=MethodIntf.BEAN @AT@ 1994 @LENGTH@ 15
------------INS SimpleName@@MethodIntf @TO@ QualifiedName@@MethodIntf.BEAN @AT@ 1994 @LENGTH@ 10
------------INS SimpleName@@BEAN @TO@ QualifiedName@@MethodIntf.BEAN @AT@ 2005 @LENGTH@ 4
---INS VariableDeclarationStatement@@String[] params=this.toString(method.getParameterTypes()); @TO@ MethodDeclaration@@public, voidMethodName:EJBMethodDescription, Method method,  @AT@ 2019 @LENGTH@ 60
------INS ArrayType@@String[] @TO@ VariableDeclarationStatement@@String[] params=this.toString(method.getParameterTypes()); @AT@ 2019 @LENGTH@ 8
---------INS SimpleType@@String @TO@ ArrayType@@String[] @AT@ 2019 @LENGTH@ 6
------INS VariableDeclarationFragment@@params=this.toString(method.getParameterTypes()) @TO@ VariableDeclarationStatement@@String[] params=this.toString(method.getParameterTypes()); @AT@ 2028 @LENGTH@ 50
---------INS SimpleName@@params @TO@ VariableDeclarationFragment@@params=this.toString(method.getParameterTypes()) @AT@ 2028 @LENGTH@ 6
---------INS MethodInvocation@@this.toString(method.getParameterTypes()) @TO@ VariableDeclarationFragment@@params=this.toString(method.getParameterTypes()) @AT@ 2037 @LENGTH@ 41
------------INS ThisExpression@@this @TO@ MethodInvocation@@this.toString(method.getParameterTypes()) @AT@ 2037 @LENGTH@ 4
------------INS SimpleName@@MethodName:toString:[method.getParameterTypes()] @TO@ MethodInvocation@@this.toString(method.getParameterTypes()) @AT@ 2042 @LENGTH@ 36
---------------INS MethodInvocation@@method.getParameterTypes() @TO@ SimpleName@@MethodName:toString:[method.getParameterTypes()] @AT@ 2051 @LENGTH@ 26
------------------INS SimpleName@@Name:method @TO@ MethodInvocation@@method.getParameterTypes() @AT@ 2051 @LENGTH@ 6
------------------INS SimpleName@@MethodName:getParameterTypes:[] @TO@ MethodInvocation@@method.getParameterTypes() @AT@ 2058 @LENGTH@ 19
---INS ExpressionStatement@@Assignment:this.methodParamTypes=params == null ? new String[0] : params @TO@ MethodDeclaration@@public, voidMethodName:EJBMethodDescription, Method method,  @AT@ 2088 @LENGTH@ 64
------INS Assignment@@this.methodParamTypes=params == null ? new String[0] : params @TO@ ExpressionStatement@@Assignment:this.methodParamTypes=params == null ? new String[0] : params @AT@ 2088 @LENGTH@ 63
---------INS FieldAccess@@this.methodParamTypes @TO@ Assignment@@this.methodParamTypes=params == null ? new String[0] : params @AT@ 2088 @LENGTH@ 21
------------INS ThisExpression@@this @TO@ FieldAccess@@this.methodParamTypes @AT@ 2088 @LENGTH@ 4
------------INS SimpleName@@methodParamTypes @TO@ FieldAccess@@this.methodParamTypes @AT@ 2093 @LENGTH@ 16
---------INS Operator@@= @TO@ Assignment@@this.methodParamTypes=params == null ? new String[0] : params @AT@ 2109 @LENGTH@ 1
---------INS ConditionalExpression@@params == null ? new String[0] : params @TO@ Assignment@@this.methodParamTypes=params == null ? new String[0] : params @AT@ 2112 @LENGTH@ 39
------------INS InfixExpression@@params == null @TO@ ConditionalExpression@@params == null ? new String[0] : params @AT@ 2112 @LENGTH@ 14
---------------INS SimpleName@@params @TO@ InfixExpression@@params == null @AT@ 2112 @LENGTH@ 6
---------------INS Operator@@== @TO@ InfixExpression@@params == null @AT@ 2118 @LENGTH@ 2
---------------INS NullLiteral@@null @TO@ InfixExpression@@params == null @AT@ 2122 @LENGTH@ 4
------------INS ArrayCreation@@new String[0] @TO@ ConditionalExpression@@params == null ? new String[0] : params @AT@ 2129 @LENGTH@ 13
---------------INS ArrayType@@String[] @TO@ ArrayCreation@@new String[0] @AT@ 2133 @LENGTH@ 9
------------------INS SimpleType@@String @TO@ ArrayType@@String[] @AT@ 2133 @LENGTH@ 6
---------------INS NumberLiteral@@0 @TO@ ArrayCreation@@new String[0] @AT@ 2140 @LENGTH@ 1
------------INS SimpleName@@params @TO@ ConditionalExpression@@params == null ? new String[0] : params @AT@ 2145 @LENGTH@ 6


INS FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @TO@ TypeDeclaration@@[public]WebAuthenticationDetails, [Serializable] @AT@ 1066 @LENGTH@ 90
---INS Modifier@@private @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @AT@ 1066 @LENGTH@ 7
---INS Modifier@@static @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @AT@ 1074 @LENGTH@ 6
---INS Modifier@@final @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @AT@ 1081 @LENGTH@ 5
---INS PrimitiveType@@long @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @AT@ 1087 @LENGTH@ 4
---INS VariableDeclarationFragment@@serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @AT@ 1092 @LENGTH@ 63
------INS SimpleName@@serialVersionUID @TO@ VariableDeclarationFragment@@serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID @AT@ 1092 @LENGTH@ 16
------INS QualifiedName@@SpringSecurityCoreVersion.SERIAL_VERSION_UID @TO@ VariableDeclarationFragment@@serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID @AT@ 1111 @LENGTH@ 44
---------INS SimpleName@@SpringSecurityCoreVersion @TO@ QualifiedName@@SpringSecurityCoreVersion.SERIAL_VERSION_UID @AT@ 1111 @LENGTH@ 25
---------INS SimpleName@@SERIAL_VERSION_UID @TO@ QualifiedName@@SpringSecurityCoreVersion.SERIAL_VERSION_UID @AT@ 1137 @LENGTH@ 18


UPD ExpressionStatement@@MethodInvocation:process(eeModuleDescription,targetDescription.getClassName(),annotation.beanName(),annotation.lookup(),methodInfo.declaringClass(),targetDescription,localContextName) @TO@ MethodInvocation:process(eeModuleDescription,targetDescription.getDeclaredValueClassName(),annotation.beanName(),annotation.lookup(),methodInfo.declaringClass(),targetDescription,localContextName) @AT@ 6222 @LENGTH@ 173
---UPD MethodInvocation@@process(eeModuleDescription,targetDescription.getClassName(),annotation.beanName(),annotation.lookup(),methodInfo.declaringClass(),targetDescription,localContextName) @TO@ process(eeModuleDescription,targetDescription.getDeclaredValueClassName(),annotation.beanName(),annotation.lookup(),methodInfo.declaringClass(),targetDescription,localContextName) @AT@ 6222 @LENGTH@ 172
------UPD SimpleName@@MethodName:process:[eeModuleDescription, targetDescription.getClassName(), annotation.beanName(), annotation.lookup(), methodInfo.declaringClass(), targetDescription, localContextName] @TO@ MethodName:process:[eeModuleDescription, targetDescription.getDeclaredValueClassName(), annotation.beanName(), annotation.lookup(), methodInfo.declaringClass(), targetDescription, localContextName] @AT@ 6222 @LENGTH@ 172
---------UPD MethodInvocation@@targetDescription.getClassName() @TO@ targetDescription.getDeclaredValueClassName() @AT@ 6251 @LENGTH@ 32
------------UPD SimpleName@@MethodName:getClassName:[] @TO@ MethodName:getDeclaredValueClassName:[] @AT@ 6269 @LENGTH@ 14


UPD EnhancedForStatement@@for (final ClassInfo clazz : allKnown) {  final DotName className=clazz.name();  if (!processedClasses.contains(className)) {    if (Modifier.isInterface(clazz.flags())) {      subInterfacesToProcess.add(className);    } else {      if (!allKnown.contains(clazz)) {        allKnown.add(clazz);        processedClasses.add(className);        getAllKnownSubClasses(className,allKnown,processedClasses);      }    }  }} @TO@ for (final ClassInfo clazz : list) {  final DotName className=clazz.name();  if (!processedClasses.contains(className)) {    if (Modifier.isInterface(clazz.flags())) {      subInterfacesToProcess.add(className);    } else {      if (!allKnown.contains(clazz)) {        allKnown.add(clazz);        processedClasses.add(className);        getAllKnownSubClasses(className,allKnown,processedClasses);      }    }  }} @AT@ 6928 @LENGTH@ 701
---UPD SimpleName@@allKnown @TO@ list @AT@ 6957 @LENGTH@ 8


UPD MethodDeclaration@@public, void, MethodName:handle, ParsingContext ctx, OperationFormatException,  @TO@ public, void, MethodName:handle, ParsingContext ctx, CommandFormatException,  @AT@ 1896 @LENGTH@ 153
---UPD SimpleType@@OperationFormatException @TO@ CommandFormatException @AT@ 1962 @LENGTH@ 24


UPD MethodDeclaration@@protected, voidMethodName:AbstractMemberHoldingTypeDetailsBuilder, String declaredbyMetadataId, ClassOrInterfaceTypeDetails existing,  @TO@ protected, voidMethodName:AbstractMemberHoldingTypeDetailsBuilder, String declaredbyMetadataId, MemberHoldingTypeDetails existing,  @AT@ 1417 @LENGTH@ 180
---UPD SingleVariableDeclaration@@ClassOrInterfaceTypeDetails existing @TO@ MemberHoldingTypeDetails existing @AT@ 1496 @LENGTH@ 36
------UPD SimpleType@@ClassOrInterfaceTypeDetails @TO@ MemberHoldingTypeDetails @AT@ 1496 @LENGTH@ 27


UPD MethodDeclaration@@private, String, MethodName:executeDeploymentPlan, DeploymentPlan plan, DeploymentAction deployAction, Exception,  @TO@ private, String, MethodName:executeDeploymentPlan, DeploymentPlan plan, DeploymentAction deployAction, Archive<?> archive, Exception,  @AT@ 7765 @LENGTH@ 662
---INS SingleVariableDeclaration@@Archive<?> archive @TO@ MethodDeclaration@@private, String, MethodName:executeDeploymentPlan, DeploymentPlan plan, DeploymentAction deployAction, Exception,  @AT@ 7792 @LENGTH@ 18
------INS ParameterizedType@@Archive<?> @TO@ SingleVariableDeclaration@@Archive<?> archive @AT@ 7792 @LENGTH@ 10
---------INS SimpleType@@Archive @TO@ ParameterizedType@@Archive<?> @AT@ 7792 @LENGTH@ 7
---------INS WildcardType@@? @TO@ ParameterizedType@@Archive<?> @AT@ 7800 @LENGTH@ 1
------INS SimpleName@@archive @TO@ SingleVariableDeclaration@@Archive<?> archive @AT@ 7803 @LENGTH@ 7
---INS ExpressionStatement@@MethodInvocation:registry.put(archive,deployAction.getDeploymentUnitUniqueName()) @TO@ MethodDeclaration@@private, String, MethodName:executeDeploymentPlan, DeploymentPlan plan, DeploymentAction deployAction, Exception,  @AT@ 7924 @LENGTH@ 66
------INS MethodInvocation@@registry.put(archive,deployAction.getDeploymentUnitUniqueName()) @TO@ ExpressionStatement@@MethodInvocation:registry.put(archive,deployAction.getDeploymentUnitUniqueName()) @AT@ 7924 @LENGTH@ 65
---------INS SimpleName@@Name:registry @TO@ MethodInvocation@@registry.put(archive,deployAction.getDeploymentUnitUniqueName()) @AT@ 7924 @LENGTH@ 8
---------INS SimpleName@@MethodName:put:[archive, deployAction.getDeploymentUnitUniqueName()] @TO@ MethodInvocation@@registry.put(archive,deployAction.getDeploymentUnitUniqueName()) @AT@ 7933 @LENGTH@ 56
------------INS SimpleName@@archive @TO@ SimpleName@@MethodName:put:[archive, deployAction.getDeploymentUnitUniqueName()] @AT@ 7937 @LENGTH@ 7
------------INS MethodInvocation@@deployAction.getDeploymentUnitUniqueName() @TO@ SimpleName@@MethodName:put:[archive, deployAction.getDeploymentUnitUniqueName()] @AT@ 7946 @LENGTH@ 42
---------------INS SimpleName@@Name:deployAction @TO@ MethodInvocation@@deployAction.getDeploymentUnitUniqueName() @AT@ 7946 @LENGTH@ 12
---------------INS SimpleName@@MethodName:getDeploymentUnitUniqueName:[] @TO@ MethodInvocation@@deployAction.getDeploymentUnitUniqueName() @AT@ 7959 @LENGTH@ 29


UPD VariableDeclarationStatement@@final ModuleIdentifier moduleIdentifier=ModuleIdentifier.create("deployment." + deploymentUnit.getName()); @TO@ final ModuleIdentifier moduleIdentifier=deploymentUnit.getAttachment(Attachments.MODULE_IDENTIFIER); @AT@ 2426 @LENGTH@ 108
---UPD VariableDeclarationFragment@@moduleIdentifier=ModuleIdentifier.create("deployment." + deploymentUnit.getName()) @TO@ moduleIdentifier=deploymentUnit.getAttachment(Attachments.MODULE_IDENTIFIER) @AT@ 2449 @LENGTH@ 84
------UPD MethodInvocation@@ModuleIdentifier.create("deployment." + deploymentUnit.getName()) @TO@ deploymentUnit.getAttachment(Attachments.MODULE_IDENTIFIER) @AT@ 2468 @LENGTH@ 65
---------UPD SimpleName@@Name:ModuleIdentifier @TO@ Name:deploymentUnit @AT@ 2468 @LENGTH@ 16
---------UPD SimpleName@@MethodName:create:["deployment." + deploymentUnit.getName()] @TO@ MethodName:getAttachment:[Attachments.MODULE_IDENTIFIER] @AT@ 2485 @LENGTH@ 48
------------DEL InfixExpression@@"deployment." + deploymentUnit.getName() @AT@ 2492 @LENGTH@ 40
---------------DEL StringLiteral@@"deployment." @AT@ 2492 @LENGTH@ 13
---------------DEL Operator@@+ @AT@ 2505 @LENGTH@ 1
---------------DEL MethodInvocation@@deploymentUnit.getName() @AT@ 2508 @LENGTH@ 24
------------------DEL SimpleName@@Name:deploymentUnit @AT@ 2508 @LENGTH@ 14
------------------DEL SimpleName@@MethodName:getName:[] @AT@ 2523 @LENGTH@ 9
------------INS QualifiedName@@Attachments.MODULE_IDENTIFIER @TO@ SimpleName@@MethodName:create:["deployment." + deploymentUnit.getName()] @AT@ 2533 @LENGTH@ 29
---------------INS SimpleName@@Attachments @TO@ QualifiedName@@Attachments.MODULE_IDENTIFIER @AT@ 2533 @LENGTH@ 11
---------------INS SimpleName@@MODULE_IDENTIFIER @TO@ QualifiedName@@Attachments.MODULE_IDENTIFIER @AT@ 2545 @LENGTH@ 17


DEL ExpressionStatement@@Assignment:processor=mock(Processor.class) @AT@ 1762 @LENGTH@ 34
---DEL Assignment@@processor=mock(Processor.class) @AT@ 1762 @LENGTH@ 33
------DEL SimpleName@@processor @AT@ 1762 @LENGTH@ 9
------DEL Operator@@= @AT@ 1771 @LENGTH@ 1
------DEL MethodInvocation@@mock(Processor.class) @AT@ 1774 @LENGTH@ 21
---------DEL SimpleName@@MethodName:mock:[Processor.class] @AT@ 1774 @LENGTH@ 21
------------DEL TypeLiteral@@Processor.class @AT@ 1779 @LENGTH@ 15


UPD VariableDeclarationStatement@@final BatchBuilder batchBuilder=updateContext.getServiceTarget(); @TO@ final ServiceTarget target=updateContext.getServiceTarget(); @AT@ 2472 @LENGTH@ 67
---UPD SimpleType@@BatchBuilder @TO@ ServiceTarget @AT@ 2478 @LENGTH@ 12
---UPD VariableDeclarationFragment@@batchBuilder=updateContext.getServiceTarget() @TO@ target=updateContext.getServiceTarget() @AT@ 2491 @LENGTH@ 47
------UPD SimpleName@@batchBuilder @TO@ target @AT@ 2491 @LENGTH@ 12


UPD IfStatement@@if (modelNode.hasDefined(SYSTEM_PROPERTY)) {  writeProperties(writer,modelNode.get(SYSTEM_PROPERTY),Element.SYSTEM_PROPERTIES);} @TO@ if (modelNode.hasDefined(SYSTEM_PROPERTIES)) {  writeProperties(writer,modelNode.get(SYSTEM_PROPERTIES),Element.SYSTEM_PROPERTIES);} @AT@ 5343 @LENGTH@ 150
---UPD MethodInvocation@@modelNode.hasDefined(SYSTEM_PROPERTY) @TO@ modelNode.hasDefined(SYSTEM_PROPERTIES) @AT@ 5347 @LENGTH@ 37
------UPD SimpleName@@MethodName:hasDefined:[SYSTEM_PROPERTY] @TO@ MethodName:hasDefined:[SYSTEM_PROPERTIES] @AT@ 5357 @LENGTH@ 27
---------UPD SimpleName@@SYSTEM_PROPERTY @TO@ SYSTEM_PROPERTIES @AT@ 5368 @LENGTH@ 15
---UPD Block@@ThenBody:{  writeProperties(writer,modelNode.get(SYSTEM_PROPERTY),Element.SYSTEM_PROPERTIES);} @TO@ ThenBody:{  writeProperties(writer,modelNode.get(SYSTEM_PROPERTIES),Element.SYSTEM_PROPERTIES);} @AT@ 5386 @LENGTH@ 107
------UPD ExpressionStatement@@MethodInvocation:writeProperties(writer,modelNode.get(SYSTEM_PROPERTY),Element.SYSTEM_PROPERTIES) @TO@ MethodInvocation:writeProperties(writer,modelNode.get(SYSTEM_PROPERTIES),Element.SYSTEM_PROPERTIES) @AT@ 5400 @LENGTH@ 83
---------UPD MethodInvocation@@writeProperties(writer,modelNode.get(SYSTEM_PROPERTY),Element.SYSTEM_PROPERTIES) @TO@ writeProperties(writer,modelNode.get(SYSTEM_PROPERTIES),Element.SYSTEM_PROPERTIES) @AT@ 5400 @LENGTH@ 82
------------UPD SimpleName@@MethodName:writeProperties:[writer, modelNode.get(SYSTEM_PROPERTY), Element.SYSTEM_PROPERTIES] @TO@ MethodName:writeProperties:[writer, modelNode.get(SYSTEM_PROPERTIES), Element.SYSTEM_PROPERTIES] @AT@ 5400 @LENGTH@ 82
---------------UPD MethodInvocation@@modelNode.get(SYSTEM_PROPERTY) @TO@ modelNode.get(SYSTEM_PROPERTIES) @AT@ 5424 @LENGTH@ 30
------------------UPD SimpleName@@MethodName:get:[SYSTEM_PROPERTY] @TO@ MethodName:get:[SYSTEM_PROPERTIES] @AT@ 5434 @LENGTH@ 20
---------------------UPD SimpleName@@SYSTEM_PROPERTY @TO@ SYSTEM_PROPERTIES @AT@ 5438 @LENGTH@ 15


UPD VariableDeclarationStatement@@final ThreadFactory threadFactory=new JBossThreadFactory(new ThreadGroup("DeplooymentScanner-threads"),Boolean.FALSE,null,"%G - %t",null,null,AccessController.getContext()); @TO@ final ThreadFactory threadFactory=new JBossThreadFactory(new ThreadGroup("DeploymentScanner-threads"),Boolean.FALSE,null,"%G - %t",null,null,AccessController.getContext()); @AT@ 4419 @LENGTH@ 181
---UPD VariableDeclarationFragment@@threadFactory=new JBossThreadFactory(new ThreadGroup("DeplooymentScanner-threads"),Boolean.FALSE,null,"%G - %t",null,null,AccessController.getContext()) @TO@ threadFactory=new JBossThreadFactory(new ThreadGroup("DeploymentScanner-threads"),Boolean.FALSE,null,"%G - %t",null,null,AccessController.getContext()) @AT@ 4439 @LENGTH@ 160
------UPD ClassInstanceCreation@@JBossThreadFactory[new ThreadGroup("DeplooymentScanner-threads"), Boolean.FALSE, null, "%G - %t", null, null, AccessController.getContext()] @TO@ JBossThreadFactory[new ThreadGroup("DeploymentScanner-threads"), Boolean.FALSE, null, "%G - %t", null, null, AccessController.getContext()] @AT@ 4455 @LENGTH@ 144
---------UPD ClassInstanceCreation@@ThreadGroup["DeplooymentScanner-threads"] @TO@ ThreadGroup["DeploymentScanner-threads"] @AT@ 4478 @LENGTH@ 45
------------UPD StringLiteral@@"DeplooymentScanner-threads" @TO@ "DeploymentScanner-threads" @AT@ 4494 @LENGTH@ 28


DEL FieldDeclaration@@String, [DEFAULT_HOST="default-host"] @AT@ 1563 @LENGTH@ 37
---DEL SimpleType@@String @AT@ 1563 @LENGTH@ 6
---DEL VariableDeclarationFragment@@DEFAULT_HOST="default-host" @AT@ 1570 @LENGTH@ 29
------DEL SimpleName@@DEFAULT_HOST @AT@ 1570 @LENGTH@ 12
------DEL StringLiteral@@"default-host" @AT@ 1585 @LENGTH@ 14


UPD ExpressionStatement@@Assignment:server=EmbeddedServerFactory.create(jbossHomeDir,sysprops) @TO@ Assignment:server=EmbeddedServerFactory.create(jbossHomeDir,sysprops,System.getenv()) @AT@ 3157 @LENGTH@ 62
---UPD Assignment@@server=EmbeddedServerFactory.create(jbossHomeDir,sysprops) @TO@ server=EmbeddedServerFactory.create(jbossHomeDir,sysprops,System.getenv()) @AT@ 3157 @LENGTH@ 61
------UPD MethodInvocation@@EmbeddedServerFactory.create(jbossHomeDir,sysprops) @TO@ EmbeddedServerFactory.create(jbossHomeDir,sysprops,System.getenv()) @AT@ 3166 @LENGTH@ 52
---------UPD SimpleName@@MethodName:create:[jbossHomeDir, sysprops] @TO@ MethodName:create:[jbossHomeDir, sysprops, System.getenv()] @AT@ 3188 @LENGTH@ 30
------------INS MethodInvocation@@System.getenv() @TO@ SimpleName@@MethodName:create:[jbossHomeDir, sysprops] @AT@ 3219 @LENGTH@ 15
---------------INS SimpleName@@Name:System @TO@ MethodInvocation@@System.getenv() @AT@ 3219 @LENGTH@ 6
---------------INS SimpleName@@MethodName:getenv:[] @TO@ MethodInvocation@@System.getenv() @AT@ 3226 @LENGTH@ 8


UPD ExpressionStatement@@MethodInvocation:bootContext.addDeploymentProcessor(Phase.POST_MODULE,Phase.POST_MODULE_WELD_WEB_INTEGRATION,new WebIntegrationProcessor()) @TO@ MethodInvocation:bootContext.addDeploymentProcessor(Phase.PARSE,Phase.PARSE_WELD_WEB_INTEGRATION,new WebIntegrationProcessor()) @AT@ 3960 @LENGTH@ 125
---UPD MethodInvocation@@bootContext.addDeploymentProcessor(Phase.POST_MODULE,Phase.POST_MODULE_WELD_WEB_INTEGRATION,new WebIntegrationProcessor()) @TO@ bootContext.addDeploymentProcessor(Phase.PARSE,Phase.PARSE_WELD_WEB_INTEGRATION,new WebIntegrationProcessor()) @AT@ 3960 @LENGTH@ 124
------UPD SimpleName@@MethodName:addDeploymentProcessor:[Phase.POST_MODULE, Phase.POST_MODULE_WELD_WEB_INTEGRATION, new WebIntegrationProcessor()] @TO@ MethodName:addDeploymentProcessor:[Phase.PARSE, Phase.PARSE_WELD_WEB_INTEGRATION, new WebIntegrationProcessor()] @AT@ 3972 @LENGTH@ 112
---------UPD QualifiedName@@Phase.POST_MODULE @TO@ Phase.PARSE @AT@ 3995 @LENGTH@ 17
------------UPD SimpleName@@POST_MODULE @TO@ PARSE @AT@ 4001 @LENGTH@ 11
---------UPD QualifiedName@@Phase.POST_MODULE_WELD_WEB_INTEGRATION @TO@ Phase.PARSE_WELD_WEB_INTEGRATION @AT@ 4014 @LENGTH@ 38
------------UPD SimpleName@@POST_MODULE_WELD_WEB_INTEGRATION @TO@ PARSE_WELD_WEB_INTEGRATION @AT@ 4020 @LENGTH@ 32


UPD IfStatement@@if (exportFilters.isEmpty()) {  exportFilter=PathFilters.acceptAll();} else {  final MultiplePathFilterBuilder exportBuilder=PathFilters.multiplePathFilterBuilder(dependency.isExport());  for (  FilterSpecification filter : exportFilters) {    exportBuilder.addFilter(filter.getPathFilter(),filter.isInclude());  }  exportFilter=exportBuilder.create();} @TO@ if (exportFilters.isEmpty()) {  if (dependency.isExport()) {    exportFilter=PathFilters.acceptAll();  } else {    exportFilter=PathFilters.rejectAll();  }} else {  final MultiplePathFilterBuilder exportBuilder=PathFilters.multiplePathFilterBuilder(dependency.isExport());  for (  FilterSpecification filter : exportFilters) {    exportBuilder.addFilter(filter.getPathFilter(),filter.isInclude());  }  exportFilter=exportBuilder.create();} @AT@ 7150 @LENGTH@ 537
---INS Block@@ThenBody:{  if (dependency.isExport()) {    exportFilter=PathFilters.acceptAll();  } else {    exportFilter=PathFilters.rejectAll();  }} @TO@ IfStatement@@if (exportFilters.isEmpty()) {  exportFilter=PathFilters.acceptAll();} else {  final MultiplePathFilterBuilder exportBuilder=PathFilters.multiplePathFilterBuilder(dependency.isExport());  for (  FilterSpecification filter : exportFilters) {    exportBuilder.addFilter(filter.getPathFilter(),filter.isInclude());  }  exportFilter=exportBuilder.create();} @AT@ 7294 @LENGTH@ 247
------INS IfStatement@@if (dependency.isExport()) {  exportFilter=PathFilters.acceptAll();} else {  exportFilter=PathFilters.rejectAll();} @TO@ Block@@ThenBody:{  if (dependency.isExport()) {    exportFilter=PathFilters.acceptAll();  } else {    exportFilter=PathFilters.rejectAll();  }} @AT@ 7316 @LENGTH@ 207
---------MOV Block@@ThenBody:{  exportFilter=PathFilters.acceptAll();} @TO@ IfStatement@@if (dependency.isExport()) {  exportFilter=PathFilters.acceptAll();} else {  exportFilter=PathFilters.rejectAll();} @AT@ 7179 @LENGTH@ 79
---------MOV Block@@ThenBody:{  exportFilter=PathFilters.acceptAll();} @TO@ IfStatement@@if (dependency.isExport()) {  exportFilter=PathFilters.acceptAll();} else {  exportFilter=PathFilters.rejectAll();} @AT@ 7179 @LENGTH@ 79
---------INS MethodInvocation@@dependency.isExport() @TO@ IfStatement@@if (dependency.isExport()) {  exportFilter=PathFilters.acceptAll();} else {  exportFilter=PathFilters.rejectAll();} @AT@ 7320 @LENGTH@ 21
------------INS SimpleName@@Name:dependency @TO@ MethodInvocation@@dependency.isExport() @AT@ 7320 @LENGTH@ 10
------------INS SimpleName@@MethodName:isExport:[] @TO@ MethodInvocation@@dependency.isExport() @AT@ 7331 @LENGTH@ 10
---------INS Block@@ElseBody:{  exportFilter=PathFilters.rejectAll();} @TO@ IfStatement@@if (dependency.isExport()) {  exportFilter=PathFilters.acceptAll();} else {  exportFilter=PathFilters.rejectAll();} @AT@ 7436 @LENGTH@ 87
------------INS ExpressionStatement@@Assignment:exportFilter=PathFilters.rejectAll() @TO@ Block@@ElseBody:{  exportFilter=PathFilters.rejectAll();} @AT@ 7462 @LENGTH@ 39
---------------INS Assignment@@exportFilter=PathFilters.rejectAll() @TO@ ExpressionStatement@@Assignment:exportFilter=PathFilters.rejectAll() @AT@ 7462 @LENGTH@ 38
------------------INS SimpleName@@exportFilter @TO@ Assignment@@exportFilter=PathFilters.rejectAll() @AT@ 7462 @LENGTH@ 12
------------------INS Operator@@= @TO@ Assignment@@exportFilter=PathFilters.rejectAll() @AT@ 7474 @LENGTH@ 1
------------------INS MethodInvocation@@PathFilters.rejectAll() @TO@ Assignment@@exportFilter=PathFilters.rejectAll() @AT@ 7477 @LENGTH@ 23
---------------------INS SimpleName@@Name:PathFilters @TO@ MethodInvocation@@PathFilters.rejectAll() @AT@ 7477 @LENGTH@ 11
---------------------INS SimpleName@@MethodName:rejectAll:[] @TO@ MethodInvocation@@PathFilters.rejectAll() @AT@ 7489 @LENGTH@ 11


UPD IfStatement@@if (!isExtendedPersistenceContext(annotation) && (componentDescription instanceof StatefulComponentDescription || componentDescription instanceof StatelessComponentDescription)) {  componentDescription.addInterceptorFactory(SBInvocationInterceptorFactory.getInstance());} @TO@ if (!isExtendedPersistenceContext(annotation) && (componentDescription instanceof StatefulComponentDescription || componentDescription instanceof StatelessComponentDescription)) {  componentDescription.getConfigurators().add(new ComponentConfigurator(){    @Override public void configure(    DeploymentPhaseContext context,    ComponentDescription description,    ComponentConfiguration configuration) throws DeploymentUnitProcessingException {      for (      Method method : configuration.getDefinedComponentMethods()) {        configuration.getComponentInterceptorDeque(method).add(SBInvocationInterceptorFactory.getInstance());      }    }  });} @AT@ 20873 @LENGTH@ 316
---UPD Block@@ThenBody:{  componentDescription.addInterceptorFactory(SBInvocationInterceptorFactory.getInstance());} @TO@ ThenBody:{  componentDescription.getConfigurators().add(new ComponentConfigurator(){    @Override public void configure(    DeploymentPhaseContext context,    ComponentDescription description,    ComponentConfiguration configuration) throws DeploymentUnitProcessingException {      for (      Method method : configuration.getDefinedComponentMethods()) {        configuration.getComponentInterceptorDeque(method).add(SBInvocationInterceptorFactory.getInstance());      }    }  });} @AT@ 21076 @LENGTH@ 113
------DEL ExpressionStatement@@MethodInvocation:componentDescription.addInterceptorFactory(SBInvocationInterceptorFactory.getInstance()) @AT@ 21090 @LENGTH@ 89
------INS ExpressionStatement@@MethodInvocation:componentDescription.getConfigurators().add(new ComponentConfigurator(){
  @Override public void configure(  DeploymentPhaseContext context,  ComponentDescription description,  ComponentConfiguration configuration) throws DeploymentUnitProcessingException {
    for (    Method method : configuration.getDefinedComponentMethods()) {
      configuration.getComponentInterceptorDeque(method).add(SBInvocationInterceptorFactory.getInstance());
    }
  }
}
) @TO@ Block@@ThenBody:{  componentDescription.addInterceptorFactory(SBInvocationInterceptorFactory.getInstance());} @AT@ 21178 @LENGTH@ 553
---------INS MethodInvocation@@componentDescription.getConfigurators().add(new ComponentConfigurator(){
  @Override public void configure(  DeploymentPhaseContext context,  ComponentDescription description,  ComponentConfiguration configuration) throws DeploymentUnitProcessingException {
    for (    Method method : configuration.getDefinedComponentMethods()) {
      configuration.getComponentInterceptorDeque(method).add(SBInvocationInterceptorFactory.getInstance());
    }
  }
}
) @TO@ ExpressionStatement@@MethodInvocation:componentDescription.getConfigurators().add(new ComponentConfigurator(){
  @Override public void configure(  DeploymentPhaseContext context,  ComponentDescription description,  ComponentConfiguration configuration) throws DeploymentUnitProcessingException {
    for (    Method method : configuration.getDefinedComponentMethods()) {
      configuration.getComponentInterceptorDeque(method).add(SBInvocationInterceptorFactory.getInstance());
    }
  }
}
) @AT@ 21178 @LENGTH@ 552
------------INS MethodInvocation@@MethodName:getConfigurators:[] @TO@ MethodInvocation@@componentDescription.getConfigurators().add(new ComponentConfigurator(){
  @Override public void configure(  DeploymentPhaseContext context,  ComponentDescription description,  ComponentConfiguration configuration) throws DeploymentUnitProcessingException {
    for (    Method method : configuration.getDefinedComponentMethods()) {
      configuration.getComponentInterceptorDeque(method).add(SBInvocationInterceptorFactory.getInstance());
    }
  }
}
) @AT@ 21178 @LENGTH@ 39
------------INS SimpleName@@Name:componentDescription @TO@ MethodInvocation@@componentDescription.getConfigurators().add(new ComponentConfigurator(){
  @Override public void configure(  DeploymentPhaseContext context,  ComponentDescription description,  ComponentConfiguration configuration) throws DeploymentUnitProcessingException {
    for (    Method method : configuration.getDefinedComponentMethods()) {
      configuration.getComponentInterceptorDeque(method).add(SBInvocationInterceptorFactory.getInstance());
    }
  }
}
) @AT@ 21178 @LENGTH@ 20
------------INS SimpleName@@MethodName:add:[new ComponentConfigurator(){
  @Override public void configure(  DeploymentPhaseContext context,  ComponentDescription description,  ComponentConfiguration configuration) throws DeploymentUnitProcessingException {
    for (    Method method : configuration.getDefinedComponentMethods()) {
      configuration.getComponentInterceptorDeque(method).add(SBInvocationInterceptorFactory.getInstance());
    }
  }
}
] @TO@ MethodInvocation@@componentDescription.getConfigurators().add(new ComponentConfigurator(){
  @Override public void configure(  DeploymentPhaseContext context,  ComponentDescription description,  ComponentConfiguration configuration) throws DeploymentUnitProcessingException {
    for (    Method method : configuration.getDefinedComponentMethods()) {
      configuration.getComponentInterceptorDeque(method).add(SBInvocationInterceptorFactory.getInstance());
    }
  }
}
) @AT@ 21218 @LENGTH@ 512
---------------INS ClassInstanceCreation@@ComponentConfigurator[] @TO@ SimpleName@@MethodName:add:[new ComponentConfigurator(){
  @Override public void configure(  DeploymentPhaseContext context,  ComponentDescription description,  ComponentConfiguration configuration) throws DeploymentUnitProcessingException {
    for (    Method method : configuration.getDefinedComponentMethods()) {
      configuration.getComponentInterceptorDeque(method).add(SBInvocationInterceptorFactory.getInstance());
    }
  }
}
] @AT@ 21222 @LENGTH@ 507
------------------INS New@@new @TO@ ClassInstanceCreation@@ComponentConfigurator[] @AT@ 21222 @LENGTH@ 3
------------------INS SimpleType@@ComponentConfigurator @TO@ ClassInstanceCreation@@ComponentConfigurator[] @AT@ 21226 @LENGTH@ 21
------------------INS AnonymousClassDeclaration@@AnonymousClass @TO@ ClassInstanceCreation@@ComponentConfigurator[] @AT@ 21250 @LENGTH@ 479
---------------------INS MethodDeclaration@@public, void, MethodName:configure, DeploymentPhaseContext context, ComponentDescription description, ComponentConfiguration configuration, DeploymentUnitProcessingException,  @TO@ AnonymousClassDeclaration@@AnonymousClass @AT@ 21294 @LENGTH@ 421
------------------------INS Modifier@@public @TO@ MethodDeclaration@@public, void, MethodName:configure, DeploymentPhaseContext context, ComponentDescription description, ComponentConfiguration configuration, DeploymentUnitProcessingException,  @AT@ 21294 @LENGTH@ 6
------------------------INS PrimitiveType@@void @TO@ MethodDeclaration@@public, void, MethodName:configure, DeploymentPhaseContext context, ComponentDescription description, ComponentConfiguration configuration, DeploymentUnitProcessingException,  @AT@ 21301 @LENGTH@ 4
------------------------INS SimpleName@@MethodName:configure @TO@ MethodDeclaration@@public, void, MethodName:configure, DeploymentPhaseContext context, ComponentDescription description, ComponentConfiguration configuration, DeploymentUnitProcessingException,  @AT@ 21306 @LENGTH@ 9
------------------------INS SingleVariableDeclaration@@DeploymentPhaseContext context @TO@ MethodDeclaration@@public, void, MethodName:configure, DeploymentPhaseContext context, ComponentDescription description, ComponentConfiguration configuration, DeploymentUnitProcessingException,  @AT@ 21316 @LENGTH@ 30
---------------------------INS SimpleType@@DeploymentPhaseContext @TO@ SingleVariableDeclaration@@DeploymentPhaseContext context @AT@ 21316 @LENGTH@ 22
---------------------------INS SimpleName@@context @TO@ SingleVariableDeclaration@@DeploymentPhaseContext context @AT@ 21339 @LENGTH@ 7
------------------------INS SingleVariableDeclaration@@ComponentDescription description @TO@ MethodDeclaration@@public, void, MethodName:configure, DeploymentPhaseContext context, ComponentDescription description, ComponentConfiguration configuration, DeploymentUnitProcessingException,  @AT@ 21348 @LENGTH@ 32
---------------------------INS SimpleType@@ComponentDescription @TO@ SingleVariableDeclaration@@ComponentDescription description @AT@ 21348 @LENGTH@ 20
---------------------------INS SimpleName@@description @TO@ SingleVariableDeclaration@@ComponentDescription description @AT@ 21369 @LENGTH@ 11
------------------------INS SingleVariableDeclaration@@ComponentConfiguration configuration @TO@ MethodDeclaration@@public, void, MethodName:configure, DeploymentPhaseContext context, ComponentDescription description, ComponentConfiguration configuration, DeploymentUnitProcessingException,  @AT@ 21382 @LENGTH@ 36
---------------------------INS SimpleType@@ComponentConfiguration @TO@ SingleVariableDeclaration@@ComponentConfiguration configuration @AT@ 21382 @LENGTH@ 22
---------------------------INS SimpleName@@configuration @TO@ SingleVariableDeclaration@@ComponentConfiguration configuration @AT@ 21405 @LENGTH@ 13
------------------------INS SimpleType@@DeploymentUnitProcessingException @TO@ MethodDeclaration@@public, void, MethodName:configure, DeploymentPhaseContext context, ComponentDescription description, ComponentConfiguration configuration, DeploymentUnitProcessingException,  @AT@ 21427 @LENGTH@ 33
------------------------INS EnhancedForStatement@@for (Method method : configuration.getDefinedComponentMethods()) {  configuration.getComponentInterceptorDeque(method).add(SBInvocationInterceptorFactory.getInstance());} @TO@ MethodDeclaration@@public, void, MethodName:configure, DeploymentPhaseContext context, ComponentDescription description, ComponentConfiguration configuration, DeploymentUnitProcessingException,  @AT@ 21483 @LENGTH@ 214
---------------------------INS SingleVariableDeclaration@@Method method @TO@ EnhancedForStatement@@for (Method method : configuration.getDefinedComponentMethods()) {  configuration.getComponentInterceptorDeque(method).add(SBInvocationInterceptorFactory.getInstance());} @AT@ 21488 @LENGTH@ 13
------------------------------INS SimpleType@@Method @TO@ SingleVariableDeclaration@@Method method @AT@ 21488 @LENGTH@ 6
------------------------------INS SimpleName@@method @TO@ SingleVariableDeclaration@@Method method @AT@ 21495 @LENGTH@ 6
---------------------------INS MethodInvocation@@configuration.getDefinedComponentMethods() @TO@ EnhancedForStatement@@for (Method method : configuration.getDefinedComponentMethods()) {  configuration.getComponentInterceptorDeque(method).add(SBInvocationInterceptorFactory.getInstance());} @AT@ 21504 @LENGTH@ 42
------------------------------INS SimpleName@@Name:configuration @TO@ MethodInvocation@@configuration.getDefinedComponentMethods() @AT@ 21504 @LENGTH@ 13
------------------------------INS SimpleName@@MethodName:getDefinedComponentMethods:[] @TO@ MethodInvocation@@configuration.getDefinedComponentMethods() @AT@ 21518 @LENGTH@ 28
---------------------------INS ExpressionStatement@@MethodInvocation:configuration.getComponentInterceptorDeque(method).add(SBInvocationInterceptorFactory.getInstance()) @TO@ EnhancedForStatement@@for (Method method : configuration.getDefinedComponentMethods()) {  configuration.getComponentInterceptorDeque(method).add(SBInvocationInterceptorFactory.getInstance());} @AT@ 21574 @LENGTH@ 101
------------------------------MOV MethodInvocation@@componentDescription.addInterceptorFactory(SBInvocationInterceptorFactory.getInstance()) @TO@ ExpressionStatement@@MethodInvocation:configuration.getComponentInterceptorDeque(method).add(SBInvocationInterceptorFactory.getInstance()) @AT@ 21090 @LENGTH@ 88
---------------------------------UPD SimpleName@@Name:componentDescription @TO@ Name:configuration @AT@ 21090 @LENGTH@ 20
---------------------------------UPD SimpleName@@MethodName:addInterceptorFactory:[SBInvocationInterceptorFactory.getInstance()] @TO@ MethodName:add:[SBInvocationInterceptorFactory.getInstance()] @AT@ 21111 @LENGTH@ 67
---------------------------------INS MethodInvocation@@MethodName:getComponentInterceptorDeque:[method] @TO@ MethodInvocation@@componentDescription.addInterceptorFactory(SBInvocationInterceptorFactory.getInstance()) @AT@ 21574 @LENGTH@ 50
------------------------------------INS SimpleName@@method @TO@ MethodInvocation@@MethodName:getComponentInterceptorDeque:[method] @AT@ 21617 @LENGTH@ 6


UPD IfStatement@@if (failure == null && !locations.isDefined()) {  for (  ModelNode node : locations.asList()) {    if (uri.equals(node.asProperty().getName())) {      failure="Schema with URI " + uri + " already registered with location "+ node.asProperty().getValue().asString();    }  }} @TO@ if (failure == null && locations.isDefined()) {  for (  ModelNode node : locations.asList()) {    if (uri.equals(node.asProperty().getName())) {      failure="Schema with URI " + uri + " already registered with location "+ node.asProperty().getValue().asString();    }  }} @AT@ 4173 @LENGTH@ 346
---UPD InfixExpression@@failure == null && !locations.isDefined() @TO@ failure == null && locations.isDefined() @AT@ 4177 @LENGTH@ 41
------DEL PrefixExpression@@!locations.isDefined() @AT@ 4196 @LENGTH@ 22
---------DEL Operator@@! @AT@ 4196 @LENGTH@ 1
---------DEL MethodInvocation@@locations.isDefined() @AT@ 4197 @LENGTH@ 21
------INS MethodInvocation@@locations.isDefined() @TO@ InfixExpression@@failure == null && !locations.isDefined() @AT@ 4196 @LENGTH@ 21
---------MOV SimpleName@@Name:locations @TO@ MethodInvocation@@locations.isDefined() @AT@ 4197 @LENGTH@ 9
---------MOV SimpleName@@MethodName:isDefined:[] @TO@ MethodInvocation@@locations.isDefined() @AT@ 4207 @LENGTH@ 11


INS MethodDeclaration@@public, void, MethodName:testCodec101, Exception,  @TO@ TypeDeclaration@@[public]Base64InputStreamTest, TestCase @AT@ 1723 @LENGTH@ 548
---INS Modifier@@public @TO@ MethodDeclaration@@public, void, MethodName:testCodec101, Exception,  @AT@ 1723 @LENGTH@ 6
---INS PrimitiveType@@void @TO@ MethodDeclaration@@public, void, MethodName:testCodec101, Exception,  @AT@ 1730 @LENGTH@ 4
---INS SimpleName@@MethodName:testCodec101 @TO@ MethodDeclaration@@public, void, MethodName:testCodec101, Exception,  @AT@ 1735 @LENGTH@ 12
---INS SimpleType@@Exception @TO@ MethodDeclaration@@public, void, MethodName:testCodec101, Exception,  @AT@ 1757 @LENGTH@ 9
---INS VariableDeclarationStatement@@byte[] codec101=StringUtils.getBytesUtf8(Base64TestData.CODEC_101_MULTIPLE_OF_3); @TO@ MethodDeclaration@@public, void, MethodName:testCodec101, Exception,  @AT@ 1777 @LENGTH@ 83
------INS ArrayType@@byte[] @TO@ VariableDeclarationStatement@@byte[] codec101=StringUtils.getBytesUtf8(Base64TestData.CODEC_101_MULTIPLE_OF_3); @AT@ 1777 @LENGTH@ 6
---------INS PrimitiveType@@byte @TO@ ArrayType@@byte[] @AT@ 1777 @LENGTH@ 4
------INS VariableDeclarationFragment@@codec101=StringUtils.getBytesUtf8(Base64TestData.CODEC_101_MULTIPLE_OF_3) @TO@ VariableDeclarationStatement@@byte[] codec101=StringUtils.getBytesUtf8(Base64TestData.CODEC_101_MULTIPLE_OF_3); @AT@ 1784 @LENGTH@ 75
---------INS SimpleName@@codec101 @TO@ VariableDeclarationFragment@@codec101=StringUtils.getBytesUtf8(Base64TestData.CODEC_101_MULTIPLE_OF_3) @AT@ 1784 @LENGTH@ 8
---------INS MethodInvocation@@StringUtils.getBytesUtf8(Base64TestData.CODEC_101_MULTIPLE_OF_3) @TO@ VariableDeclarationFragment@@codec101=StringUtils.getBytesUtf8(Base64TestData.CODEC_101_MULTIPLE_OF_3) @AT@ 1795 @LENGTH@ 64
------------INS SimpleName@@Name:StringUtils @TO@ MethodInvocation@@StringUtils.getBytesUtf8(Base64TestData.CODEC_101_MULTIPLE_OF_3) @AT@ 1795 @LENGTH@ 11
------------INS SimpleName@@MethodName:getBytesUtf8:[Base64TestData.CODEC_101_MULTIPLE_OF_3] @TO@ MethodInvocation@@StringUtils.getBytesUtf8(Base64TestData.CODEC_101_MULTIPLE_OF_3) @AT@ 1807 @LENGTH@ 52
---------------INS QualifiedName@@Base64TestData.CODEC_101_MULTIPLE_OF_3 @TO@ SimpleName@@MethodName:getBytesUtf8:[Base64TestData.CODEC_101_MULTIPLE_OF_3] @AT@ 1820 @LENGTH@ 38
------------------INS SimpleName@@Base64TestData @TO@ QualifiedName@@Base64TestData.CODEC_101_MULTIPLE_OF_3 @AT@ 1820 @LENGTH@ 14
------------------INS SimpleName@@CODEC_101_MULTIPLE_OF_3 @TO@ QualifiedName@@Base64TestData.CODEC_101_MULTIPLE_OF_3 @AT@ 1835 @LENGTH@ 23
---INS VariableDeclarationStatement@@ByteArrayInputStream bais=new ByteArrayInputStream(codec101); @TO@ MethodDeclaration@@public, void, MethodName:testCodec101, Exception,  @AT@ 1869 @LENGTH@ 63
------INS SimpleType@@ByteArrayInputStream @TO@ VariableDeclarationStatement@@ByteArrayInputStream bais=new ByteArrayInputStream(codec101); @AT@ 1869 @LENGTH@ 20
------INS VariableDeclarationFragment@@bais=new ByteArrayInputStream(codec101) @TO@ VariableDeclarationStatement@@ByteArrayInputStream bais=new ByteArrayInputStream(codec101); @AT@ 1890 @LENGTH@ 41
---------INS SimpleName@@bais @TO@ VariableDeclarationFragment@@bais=new ByteArrayInputStream(codec101) @AT@ 1890 @LENGTH@ 4
---------INS ClassInstanceCreation@@ByteArrayInputStream[codec101] @TO@ VariableDeclarationFragment@@bais=new ByteArrayInputStream(codec101) @AT@ 1897 @LENGTH@ 34
------------INS New@@new @TO@ ClassInstanceCreation@@ByteArrayInputStream[codec101] @AT@ 1897 @LENGTH@ 3
------------INS SimpleType@@ByteArrayInputStream @TO@ ClassInstanceCreation@@ByteArrayInputStream[codec101] @AT@ 1901 @LENGTH@ 20
------------INS SimpleName@@codec101 @TO@ ClassInstanceCreation@@ByteArrayInputStream[codec101] @AT@ 1922 @LENGTH@ 8
---INS VariableDeclarationStatement@@Base64InputStream in=new Base64InputStream(bais); @TO@ MethodDeclaration@@public, void, MethodName:testCodec101, Exception,  @AT@ 1941 @LENGTH@ 51
------INS SimpleType@@Base64InputStream @TO@ VariableDeclarationStatement@@Base64InputStream in=new Base64InputStream(bais); @AT@ 1941 @LENGTH@ 17
------INS VariableDeclarationFragment@@in=new Base64InputStream(bais) @TO@ VariableDeclarationStatement@@Base64InputStream in=new Base64InputStream(bais); @AT@ 1959 @LENGTH@ 32
---------INS SimpleName@@in @TO@ VariableDeclarationFragment@@in=new Base64InputStream(bais) @AT@ 1959 @LENGTH@ 2
---------INS ClassInstanceCreation@@Base64InputStream[bais] @TO@ VariableDeclarationFragment@@in=new Base64InputStream(bais) @AT@ 1964 @LENGTH@ 27
------------INS New@@new @TO@ ClassInstanceCreation@@Base64InputStream[bais] @AT@ 1964 @LENGTH@ 3
------------INS SimpleType@@Base64InputStream @TO@ ClassInstanceCreation@@Base64InputStream[bais] @AT@ 1968 @LENGTH@ 17
------------INS SimpleName@@bais @TO@ ClassInstanceCreation@@Base64InputStream[bais] @AT@ 1986 @LENGTH@ 4
---INS VariableDeclarationStatement@@byte[] result=new byte[8192]; @TO@ MethodDeclaration@@public, void, MethodName:testCodec101, Exception,  @AT@ 2001 @LENGTH@ 31
------INS ArrayType@@byte[] @TO@ VariableDeclarationStatement@@byte[] result=new byte[8192]; @AT@ 2001 @LENGTH@ 6
---------INS PrimitiveType@@byte @TO@ ArrayType@@byte[] @AT@ 2001 @LENGTH@ 4
------INS VariableDeclarationFragment@@result=new byte[8192] @TO@ VariableDeclarationStatement@@byte[] result=new byte[8192]; @AT@ 2008 @LENGTH@ 23
---------INS SimpleName@@result @TO@ VariableDeclarationFragment@@result=new byte[8192] @AT@ 2008 @LENGTH@ 6
---------INS ArrayCreation@@new byte[8192] @TO@ VariableDeclarationFragment@@result=new byte[8192] @AT@ 2017 @LENGTH@ 14
------------INS ArrayType@@byte[] @TO@ ArrayCreation@@new byte[8192] @AT@ 2021 @LENGTH@ 10
---------------INS PrimitiveType@@byte @TO@ ArrayType@@byte[] @AT@ 2021 @LENGTH@ 4
------------INS NumberLiteral@@8192 @TO@ ArrayCreation@@new byte[8192] @AT@ 2026 @LENGTH@ 4
---INS VariableDeclarationStatement@@int c=in.read(result); @TO@ MethodDeclaration@@public, void, MethodName:testCodec101, Exception,  @AT@ 2041 @LENGTH@ 24
------INS PrimitiveType@@int @TO@ VariableDeclarationStatement@@int c=in.read(result); @AT@ 2041 @LENGTH@ 3
------INS VariableDeclarationFragment@@c=in.read(result) @TO@ VariableDeclarationStatement@@int c=in.read(result); @AT@ 2045 @LENGTH@ 19
---------INS SimpleName@@c @TO@ VariableDeclarationFragment@@c=in.read(result) @AT@ 2045 @LENGTH@ 1
---------INS MethodInvocation@@in.read(result) @TO@ VariableDeclarationFragment@@c=in.read(result) @AT@ 2049 @LENGTH@ 15
------------INS SimpleName@@Name:in @TO@ MethodInvocation@@in.read(result) @AT@ 2049 @LENGTH@ 2
------------INS SimpleName@@MethodName:read:[result] @TO@ MethodInvocation@@in.read(result) @AT@ 2052 @LENGTH@ 12
---------------INS SimpleName@@result @TO@ SimpleName@@MethodName:read:[result] @AT@ 2057 @LENGTH@ 6
---INS ExpressionStatement@@MethodInvocation:assertTrue("Codec101: First read successful [c=" + c + "]",c > 0) @TO@ MethodDeclaration@@public, void, MethodName:testCodec101, Exception,  @AT@ 2074 @LENGTH@ 67
------INS MethodInvocation@@assertTrue("Codec101: First read successful [c=" + c + "]",c > 0) @TO@ ExpressionStatement@@MethodInvocation:assertTrue("Codec101: First read successful [c=" + c + "]",c > 0) @AT@ 2074 @LENGTH@ 66
---------INS SimpleName@@MethodName:assertTrue:["Codec101: First read successful [c=" + c + "]", c > 0] @TO@ MethodInvocation@@assertTrue("Codec101: First read successful [c=" + c + "]",c > 0) @AT@ 2074 @LENGTH@ 66
------------INS InfixExpression@@"Codec101: First read successful [c=" + c + "]" @TO@ SimpleName@@MethodName:assertTrue:["Codec101: First read successful [c=" + c + "]", c > 0] @AT@ 2085 @LENGTH@ 47
---------------INS StringLiteral@@"Codec101: First read successful [c=" @TO@ InfixExpression@@"Codec101: First read successful [c=" + c + "]" @AT@ 2085 @LENGTH@ 37
---------------INS Operator@@+ @TO@ InfixExpression@@"Codec101: First read successful [c=" + c + "]" @AT@ 2122 @LENGTH@ 1
---------------INS SimpleName@@c @TO@ InfixExpression@@"Codec101: First read successful [c=" + c + "]" @AT@ 2125 @LENGTH@ 1
---------------INS StringLiteral@@"]" @TO@ InfixExpression@@"Codec101: First read successful [c=" + c + "]" @AT@ 2129 @LENGTH@ 3
------------INS InfixExpression@@c > 0 @TO@ SimpleName@@MethodName:assertTrue:["Codec101: First read successful [c=" + c + "]", c > 0] @AT@ 2134 @LENGTH@ 5
---------------INS SimpleName@@c @TO@ InfixExpression@@c > 0 @AT@ 2134 @LENGTH@ 1
---------------INS Operator@@> @TO@ InfixExpression@@c > 0 @AT@ 2135 @LENGTH@ 1
---------------INS NumberLiteral@@0 @TO@ InfixExpression@@c > 0 @AT@ 2138 @LENGTH@ 1
---INS ExpressionStatement@@Assignment:c=in.read(result) @TO@ MethodDeclaration@@public, void, MethodName:testCodec101, Exception,  @AT@ 2151 @LENGTH@ 20
------INS Assignment@@c=in.read(result) @TO@ ExpressionStatement@@Assignment:c=in.read(result) @AT@ 2151 @LENGTH@ 19
---------INS SimpleName@@c @TO@ Assignment@@c=in.read(result) @AT@ 2151 @LENGTH@ 1
---------INS Operator@@= @TO@ Assignment@@c=in.read(result) @AT@ 2152 @LENGTH@ 1
---------INS MethodInvocation@@in.read(result) @TO@ Assignment@@c=in.read(result) @AT@ 2155 @LENGTH@ 15
------------INS SimpleName@@Name:in @TO@ MethodInvocation@@in.read(result) @AT@ 2155 @LENGTH@ 2
------------INS SimpleName@@MethodName:read:[result] @TO@ MethodInvocation@@in.read(result) @AT@ 2158 @LENGTH@ 12
---------------INS SimpleName@@result @TO@ SimpleName@@MethodName:read:[result] @AT@ 2163 @LENGTH@ 6
---INS ExpressionStatement@@MethodInvocation:assertTrue("Codec101: Second read should report end-of-stream [c=" + c + "]",c < 0) @TO@ MethodDeclaration@@public, void, MethodName:testCodec101, Exception,  @AT@ 2180 @LENGTH@ 85
------INS MethodInvocation@@assertTrue("Codec101: Second read should report end-of-stream [c=" + c + "]",c < 0) @TO@ ExpressionStatement@@MethodInvocation:assertTrue("Codec101: Second read should report end-of-stream [c=" + c + "]",c < 0) @AT@ 2180 @LENGTH@ 84
---------INS SimpleName@@MethodName:assertTrue:["Codec101: Second read should report end-of-stream [c=" + c + "]", c < 0] @TO@ MethodInvocation@@assertTrue("Codec101: Second read should report end-of-stream [c=" + c + "]",c < 0) @AT@ 2180 @LENGTH@ 84
------------INS InfixExpression@@"Codec101: Second read should report end-of-stream [c=" + c + "]" @TO@ SimpleName@@MethodName:assertTrue:["Codec101: Second read should report end-of-stream [c=" + c + "]", c < 0] @AT@ 2191 @LENGTH@ 65
---------------INS StringLiteral@@"Codec101: Second read should report end-of-stream [c=" @TO@ InfixExpression@@"Codec101: Second read should report end-of-stream [c=" + c + "]" @AT@ 2191 @LENGTH@ 55
---------------INS Operator@@+ @TO@ InfixExpression@@"Codec101: Second read should report end-of-stream [c=" + c + "]" @AT@ 2246 @LENGTH@ 1
---------------INS SimpleName@@c @TO@ InfixExpression@@"Codec101: Second read should report end-of-stream [c=" + c + "]" @AT@ 2249 @LENGTH@ 1
---------------INS StringLiteral@@"]" @TO@ InfixExpression@@"Codec101: Second read should report end-of-stream [c=" + c + "]" @AT@ 2253 @LENGTH@ 3
------------INS InfixExpression@@c < 0 @TO@ SimpleName@@MethodName:assertTrue:["Codec101: Second read should report end-of-stream [c=" + c + "]", c < 0] @AT@ 2258 @LENGTH@ 5
---------------INS SimpleName@@c @TO@ InfixExpression@@c < 0 @AT@ 2258 @LENGTH@ 1
---------------INS Operator@@< @TO@ InfixExpression@@c < 0 @AT@ 2259 @LENGTH@ 1
---------------INS NumberLiteral@@0 @TO@ InfixExpression@@c < 0 @AT@ 2262 @LENGTH@ 1


UPD EnhancedForStatement@@for (ViewDescription view : componentDescription.getViews()) {  String viewClassName=view.getViewClassName();  localInterfaces.add(new BusinessInterfaceDescriptorImpl<Object>(beanDeploymentArchive,viewClassName));} @TO@ for (ViewDescription view : componentDescription.getViews()) {  String viewClassName=view.getViewClassName();  if (description == null || description.getMethodIntf(viewClassName) == MethodIntf.LOCAL) {    localInterfaces.add(new BusinessInterfaceDescriptorImpl<Object>(beanDeploymentArchive,viewClassName));  }} @AT@ 2622 @LENGTH@ 260
---INS IfStatement@@if (description == null || description.getMethodIntf(viewClassName) == MethodIntf.LOCAL) {  localInterfaces.add(new BusinessInterfaceDescriptorImpl<Object>(beanDeploymentArchive,viewClassName));} @TO@ EnhancedForStatement@@for (ViewDescription view : componentDescription.getViews()) {  String viewClassName=view.getViewClassName();  localInterfaces.add(new BusinessInterfaceDescriptorImpl<Object>(beanDeploymentArchive,viewClassName));} @AT@ 3077 @LENGTH@ 231
------INS InfixExpression@@description == null || description.getMethodIntf(viewClassName) == MethodIntf.LOCAL @TO@ IfStatement@@if (description == null || description.getMethodIntf(viewClassName) == MethodIntf.LOCAL) {  localInterfaces.add(new BusinessInterfaceDescriptorImpl<Object>(beanDeploymentArchive,viewClassName));} @AT@ 3080 @LENGTH@ 83
---------INS InfixExpression@@description == null @TO@ InfixExpression@@description == null || description.getMethodIntf(viewClassName) == MethodIntf.LOCAL @AT@ 3080 @LENGTH@ 19
------------INS SimpleName@@description @TO@ InfixExpression@@description == null @AT@ 3080 @LENGTH@ 11
------------INS Operator@@== @TO@ InfixExpression@@description == null @AT@ 3091 @LENGTH@ 2
------------INS NullLiteral@@null @TO@ InfixExpression@@description == null @AT@ 3095 @LENGTH@ 4
---------INS Operator@@|| @TO@ InfixExpression@@description == null || description.getMethodIntf(viewClassName) == MethodIntf.LOCAL @AT@ 3099 @LENGTH@ 2
---------INS InfixExpression@@description.getMethodIntf(viewClassName) == MethodIntf.LOCAL @TO@ InfixExpression@@description == null || description.getMethodIntf(viewClassName) == MethodIntf.LOCAL @AT@ 3103 @LENGTH@ 60
------------INS MethodInvocation@@description.getMethodIntf(viewClassName) @TO@ InfixExpression@@description.getMethodIntf(viewClassName) == MethodIntf.LOCAL @AT@ 3103 @LENGTH@ 40
---------------INS SimpleName@@Name:description @TO@ MethodInvocation@@description.getMethodIntf(viewClassName) @AT@ 3103 @LENGTH@ 11
---------------INS SimpleName@@MethodName:getMethodIntf:[viewClassName] @TO@ MethodInvocation@@description.getMethodIntf(viewClassName) @AT@ 3115 @LENGTH@ 28
------------------INS SimpleName@@viewClassName @TO@ SimpleName@@MethodName:getMethodIntf:[viewClassName] @AT@ 3129 @LENGTH@ 13
------------INS Operator@@== @TO@ InfixExpression@@description.getMethodIntf(viewClassName) == MethodIntf.LOCAL @AT@ 3143 @LENGTH@ 2
------------INS QualifiedName@@MethodIntf.LOCAL @TO@ InfixExpression@@description.getMethodIntf(viewClassName) == MethodIntf.LOCAL @AT@ 3147 @LENGTH@ 16
---------------INS SimpleName@@MethodIntf @TO@ QualifiedName@@MethodIntf.LOCAL @AT@ 3147 @LENGTH@ 10
---------------INS SimpleName@@LOCAL @TO@ QualifiedName@@MethodIntf.LOCAL @AT@ 3158 @LENGTH@ 5
------INS Block@@ThenBody:{  localInterfaces.add(new BusinessInterfaceDescriptorImpl<Object>(beanDeploymentArchive,viewClassName));} @TO@ IfStatement@@if (description == null || description.getMethodIntf(viewClassName) == MethodIntf.LOCAL) {  localInterfaces.add(new BusinessInterfaceDescriptorImpl<Object>(beanDeploymentArchive,viewClassName));} @AT@ 3165 @LENGTH@ 143
---------MOV ExpressionStatement@@MethodInvocation:localInterfaces.add(new BusinessInterfaceDescriptorImpl<Object>(beanDeploymentArchive,viewClassName)) @TO@ Block@@ThenBody:{  localInterfaces.add(new BusinessInterfaceDescriptorImpl<Object>(beanDeploymentArchive,viewClassName));} @AT@ 2765 @LENGTH@ 103


INS FieldDeclaration@@private, Bar, [bar] @TO@ TypeDeclaration@@[private]Sample,  @AT@ 4505 @LENGTH@ 16
---INS Modifier@@private @TO@ FieldDeclaration@@private, Bar, [bar] @AT@ 4505 @LENGTH@ 7
---INS SimpleType@@Bar @TO@ FieldDeclaration@@private, Bar, [bar] @AT@ 4513 @LENGTH@ 3
---INS VariableDeclarationFragment@@bar @TO@ FieldDeclaration@@private, Bar, [bar] @AT@ 4517 @LENGTH@ 3
------INS SimpleName@@bar @TO@ VariableDeclarationFragment@@bar @AT@ 4517 @LENGTH@ 3


UPD FieldDeclaration@@public, Log4jLevelAdjuster, [logLevels=new Log4jLevelAdjuster(Level.ERROR,RabbitTemplate.class,SimpleMessageListenerContainer.class)] @TO@ public, Log4jLevelAdjuster, [logLevels=new Log4jLevelAdjuster(Level.ERROR,RabbitTemplate.class,SimpleMessageListenerContainer.class,BlockingQueueConsumer.class)] @AT@ 1943 @LENGTH@ 138
---UPD VariableDeclarationFragment@@logLevels=new Log4jLevelAdjuster(Level.ERROR,RabbitTemplate.class,SimpleMessageListenerContainer.class) @TO@ logLevels=new Log4jLevelAdjuster(Level.ERROR,RabbitTemplate.class,SimpleMessageListenerContainer.class,BlockingQueueConsumer.class) @AT@ 1969 @LENGTH@ 111
------UPD ClassInstanceCreation@@Log4jLevelAdjuster[Level.ERROR, RabbitTemplate.class, SimpleMessageListenerContainer.class] @TO@ Log4jLevelAdjuster[Level.ERROR, RabbitTemplate.class, SimpleMessageListenerContainer.class, BlockingQueueConsumer.class] @AT@ 1981 @LENGTH@ 99
---------INS TypeLiteral@@BlockingQueueConsumer.class @TO@ ClassInstanceCreation@@Log4jLevelAdjuster[Level.ERROR, RabbitTemplate.class, SimpleMessageListenerContainer.class] @AT@ 2081 @LENGTH@ 27


UPD IfStatement@@if (DEPLOYMENT.equals(type)) {  String groupName=address.getElement(0).getValue();  Set<ServerIdentity> servers=getServersForGroup(groupName,host);  ModelNode serverOp=operation.clone();  PathAddress serverAddress=address.subAddress(1);  serverOp.get(OP_ADDR).set(serverAddress.toModelNode());  result=Collections.singletonMap(servers,serverOp);} @TO@ if (DEPLOYMENT.equals(type)) {  String groupName=address.getElement(0).getValue();  Set<ServerIdentity> servers=getServersForGroup(groupName,host);  ModelNode serverOp=operation.clone();  if (ADD.equals(serverOp.get(OP).asString())) {    ModelNode domainDeployment=domain.get(DEPLOYMENT,address.getElement(1).getValue());    serverOp.get(RUNTIME_NAME).set(domainDeployment.get(RUNTIME_NAME));    serverOp.get(HASH).set(domainDeployment.get(HASH));  }  PathAddress serverAddress=address.subAddress(1);  serverOp.get(OP_ADDR).set(serverAddress.toModelNode());  result=Collections.singletonMap(servers,serverOp);} @AT@ 15842 @LENGTH@ 461
---UPD Block@@ThenBody:{  String groupName=address.getElement(0).getValue();  Set<ServerIdentity> servers=getServersForGroup(groupName,host);  ModelNode serverOp=operation.clone();  PathAddress serverAddress=address.subAddress(1);  serverOp.get(OP_ADDR).set(serverAddress.toModelNode());  result=Collections.singletonMap(servers,serverOp);} @TO@ ThenBody:{  String groupName=address.getElement(0).getValue();  Set<ServerIdentity> servers=getServersForGroup(groupName,host);  ModelNode serverOp=operation.clone();  if (ADD.equals(serverOp.get(OP).asString())) {    ModelNode domainDeployment=domain.get(DEPLOYMENT,address.getElement(1).getValue());    serverOp.get(RUNTIME_NAME).set(domainDeployment.get(RUNTIME_NAME));    serverOp.get(HASH).set(domainDeployment.get(HASH));  }  PathAddress serverAddress=address.subAddress(1);  serverOp.get(OP_ADDR).set(serverAddress.toModelNode());  result=Collections.singletonMap(servers,serverOp);} @AT@ 15871 @LENGTH@ 432
------INS IfStatement@@if (ADD.equals(serverOp.get(OP).asString())) {  ModelNode domainDeployment=domain.get(DEPLOYMENT,address.getElement(1).getValue());  serverOp.get(RUNTIME_NAME).set(domainDeployment.get(RUNTIME_NAME));  serverOp.get(HASH).set(domainDeployment.get(HASH));} @TO@ Block@@ThenBody:{  String groupName=address.getElement(0).getValue();  Set<ServerIdentity> servers=getServersForGroup(groupName,host);  ModelNode serverOp=operation.clone();  PathAddress serverAddress=address.subAddress(1);  serverOp.get(OP_ADDR).set(serverAddress.toModelNode());  result=Collections.singletonMap(servers,serverOp);} @AT@ 16353 @LENGTH@ 431
---------INS MethodInvocation@@ADD.equals(serverOp.get(OP).asString()) @TO@ IfStatement@@if (ADD.equals(serverOp.get(OP).asString())) {  ModelNode domainDeployment=domain.get(DEPLOYMENT,address.getElement(1).getValue());  serverOp.get(RUNTIME_NAME).set(domainDeployment.get(RUNTIME_NAME));  serverOp.get(HASH).set(domainDeployment.get(HASH));} @AT@ 16357 @LENGTH@ 39
------------INS SimpleName@@Name:ADD @TO@ MethodInvocation@@ADD.equals(serverOp.get(OP).asString()) @AT@ 16357 @LENGTH@ 3
------------INS SimpleName@@MethodName:equals:[serverOp.get(OP).asString()] @TO@ MethodInvocation@@ADD.equals(serverOp.get(OP).asString()) @AT@ 16361 @LENGTH@ 35
---------------INS MethodInvocation@@serverOp.get(OP).asString() @TO@ SimpleName@@MethodName:equals:[serverOp.get(OP).asString()] @AT@ 16368 @LENGTH@ 27
------------------INS MethodInvocation@@MethodName:get:[OP] @TO@ MethodInvocation@@serverOp.get(OP).asString() @AT@ 16368 @LENGTH@ 16
---------------------INS SimpleName@@OP @TO@ MethodInvocation@@MethodName:get:[OP] @AT@ 16381 @LENGTH@ 2
------------------INS SimpleName@@Name:serverOp @TO@ MethodInvocation@@serverOp.get(OP).asString() @AT@ 16368 @LENGTH@ 8
------------------INS SimpleName@@MethodName:asString:[] @TO@ MethodInvocation@@serverOp.get(OP).asString() @AT@ 16385 @LENGTH@ 10
---------INS Block@@ThenBody:{  ModelNode domainDeployment=domain.get(DEPLOYMENT,address.getElement(1).getValue());  serverOp.get(RUNTIME_NAME).set(domainDeployment.get(RUNTIME_NAME));  serverOp.get(HASH).set(domainDeployment.get(HASH));} @TO@ IfStatement@@if (ADD.equals(serverOp.get(OP).asString())) {  ModelNode domainDeployment=domain.get(DEPLOYMENT,address.getElement(1).getValue());  serverOp.get(RUNTIME_NAME).set(domainDeployment.get(RUNTIME_NAME));  serverOp.get(HASH).set(domainDeployment.get(HASH));} @AT@ 16398 @LENGTH@ 386
------------INS VariableDeclarationStatement@@ModelNode domainDeployment=domain.get(DEPLOYMENT,address.getElement(1).getValue()); @TO@ Block@@ThenBody:{  ModelNode domainDeployment=domain.get(DEPLOYMENT,address.getElement(1).getValue());  serverOp.get(RUNTIME_NAME).set(domainDeployment.get(RUNTIME_NAME));  serverOp.get(HASH).set(domainDeployment.get(HASH));} @AT@ 16520 @LENGTH@ 86
---------------INS SimpleType@@ModelNode @TO@ VariableDeclarationStatement@@ModelNode domainDeployment=domain.get(DEPLOYMENT,address.getElement(1).getValue()); @AT@ 16520 @LENGTH@ 9
---------------INS VariableDeclarationFragment@@domainDeployment=domain.get(DEPLOYMENT,address.getElement(1).getValue()) @TO@ VariableDeclarationStatement@@ModelNode domainDeployment=domain.get(DEPLOYMENT,address.getElement(1).getValue()); @AT@ 16530 @LENGTH@ 75
------------------INS SimpleName@@domainDeployment @TO@ VariableDeclarationFragment@@domainDeployment=domain.get(DEPLOYMENT,address.getElement(1).getValue()) @AT@ 16530 @LENGTH@ 16
------------------INS MethodInvocation@@domain.get(DEPLOYMENT,address.getElement(1).getValue()) @TO@ VariableDeclarationFragment@@domainDeployment=domain.get(DEPLOYMENT,address.getElement(1).getValue()) @AT@ 16549 @LENGTH@ 56
---------------------INS SimpleName@@Name:domain @TO@ MethodInvocation@@domain.get(DEPLOYMENT,address.getElement(1).getValue()) @AT@ 16549 @LENGTH@ 6
---------------------INS SimpleName@@MethodName:get:[DEPLOYMENT, address.getElement(1).getValue()] @TO@ MethodInvocation@@domain.get(DEPLOYMENT,address.getElement(1).getValue()) @AT@ 16556 @LENGTH@ 49
------------------------INS SimpleName@@DEPLOYMENT @TO@ SimpleName@@MethodName:get:[DEPLOYMENT, address.getElement(1).getValue()] @AT@ 16560 @LENGTH@ 10
------------------------INS MethodInvocation@@address.getElement(1).getValue() @TO@ SimpleName@@MethodName:get:[DEPLOYMENT, address.getElement(1).getValue()] @AT@ 16572 @LENGTH@ 32
---------------------------INS MethodInvocation@@MethodName:getElement:[1] @TO@ MethodInvocation@@address.getElement(1).getValue() @AT@ 16572 @LENGTH@ 21
------------------------------INS NumberLiteral@@1 @TO@ MethodInvocation@@MethodName:getElement:[1] @AT@ 16591 @LENGTH@ 1
---------------------------INS SimpleName@@Name:address @TO@ MethodInvocation@@address.getElement(1).getValue() @AT@ 16572 @LENGTH@ 7
---------------------------INS SimpleName@@MethodName:getValue:[] @TO@ MethodInvocation@@address.getElement(1).getValue() @AT@ 16594 @LENGTH@ 10
------------INS ExpressionStatement@@MethodInvocation:serverOp.get(RUNTIME_NAME).set(domainDeployment.get(RUNTIME_NAME)) @TO@ Block@@ThenBody:{  ModelNode domainDeployment=domain.get(DEPLOYMENT,address.getElement(1).getValue());  serverOp.get(RUNTIME_NAME).set(domainDeployment.get(RUNTIME_NAME));  serverOp.get(HASH).set(domainDeployment.get(HASH));} @AT@ 16627 @LENGTH@ 67
---------------INS MethodInvocation@@serverOp.get(RUNTIME_NAME).set(domainDeployment.get(RUNTIME_NAME)) @TO@ ExpressionStatement@@MethodInvocation:serverOp.get(RUNTIME_NAME).set(domainDeployment.get(RUNTIME_NAME)) @AT@ 16627 @LENGTH@ 66
------------------INS MethodInvocation@@MethodName:get:[RUNTIME_NAME] @TO@ MethodInvocation@@serverOp.get(RUNTIME_NAME).set(domainDeployment.get(RUNTIME_NAME)) @AT@ 16627 @LENGTH@ 26
---------------------INS SimpleName@@RUNTIME_NAME @TO@ MethodInvocation@@MethodName:get:[RUNTIME_NAME] @AT@ 16640 @LENGTH@ 12
------------------INS SimpleName@@Name:serverOp @TO@ MethodInvocation@@serverOp.get(RUNTIME_NAME).set(domainDeployment.get(RUNTIME_NAME)) @AT@ 16627 @LENGTH@ 8
------------------INS SimpleName@@MethodName:set:[domainDeployment.get(RUNTIME_NAME)] @TO@ MethodInvocation@@serverOp.get(RUNTIME_NAME).set(domainDeployment.get(RUNTIME_NAME)) @AT@ 16654 @LENGTH@ 39
---------------------INS MethodInvocation@@domainDeployment.get(RUNTIME_NAME) @TO@ SimpleName@@MethodName:set:[domainDeployment.get(RUNTIME_NAME)] @AT@ 16658 @LENGTH@ 34
------------------------INS SimpleName@@Name:domainDeployment @TO@ MethodInvocation@@domainDeployment.get(RUNTIME_NAME) @AT@ 16658 @LENGTH@ 16
------------------------INS SimpleName@@MethodName:get:[RUNTIME_NAME] @TO@ MethodInvocation@@domainDeployment.get(RUNTIME_NAME) @AT@ 16675 @LENGTH@ 17
---------------------------INS SimpleName@@RUNTIME_NAME @TO@ SimpleName@@MethodName:get:[RUNTIME_NAME] @AT@ 16679 @LENGTH@ 12
------------INS ExpressionStatement@@MethodInvocation:serverOp.get(HASH).set(domainDeployment.get(HASH)) @TO@ Block@@ThenBody:{  ModelNode domainDeployment=domain.get(DEPLOYMENT,address.getElement(1).getValue());  serverOp.get(RUNTIME_NAME).set(domainDeployment.get(RUNTIME_NAME));  serverOp.get(HASH).set(domainDeployment.get(HASH));} @AT@ 16715 @LENGTH@ 51
---------------INS MethodInvocation@@serverOp.get(HASH).set(domainDeployment.get(HASH)) @TO@ ExpressionStatement@@MethodInvocation:serverOp.get(HASH).set(domainDeployment.get(HASH)) @AT@ 16715 @LENGTH@ 50
------------------INS MethodInvocation@@MethodName:get:[HASH] @TO@ MethodInvocation@@serverOp.get(HASH).set(domainDeployment.get(HASH)) @AT@ 16715 @LENGTH@ 18
---------------------INS SimpleName@@HASH @TO@ MethodInvocation@@MethodName:get:[HASH] @AT@ 16728 @LENGTH@ 4
------------------INS SimpleName@@Name:serverOp @TO@ MethodInvocation@@serverOp.get(HASH).set(domainDeployment.get(HASH)) @AT@ 16715 @LENGTH@ 8
------------------INS SimpleName@@MethodName:set:[domainDeployment.get(HASH)] @TO@ MethodInvocation@@serverOp.get(HASH).set(domainDeployment.get(HASH)) @AT@ 16734 @LENGTH@ 31
---------------------INS MethodInvocation@@domainDeployment.get(HASH) @TO@ SimpleName@@MethodName:set:[domainDeployment.get(HASH)] @AT@ 16738 @LENGTH@ 26
------------------------INS SimpleName@@Name:domainDeployment @TO@ MethodInvocation@@domainDeployment.get(HASH) @AT@ 16738 @LENGTH@ 16
------------------------INS SimpleName@@MethodName:get:[HASH] @TO@ MethodInvocation@@domainDeployment.get(HASH) @AT@ 16755 @LENGTH@ 9
---------------------------INS SimpleName@@HASH @TO@ SimpleName@@MethodName:get:[HASH] @AT@ 16759 @LENGTH@ 4


UPD IfStatement@@if (ssock == null) sb.append("stopped"); else sb.append(ssock.getLocalSocketAddress()); @TO@ if (ssock == null) {  sb.append("stopped");} else {  sb.append(ssock.getLocalSocketAddress());} @AT@ 10404 @LENGTH@ 119
---UPD Block@@ThenBody:sb.append("stopped"); @TO@ ThenBody:{  sb.append("stopped");} @AT@ 10435 @LENGTH@ 21
---UPD Block@@ElseBody:sb.append(ssock.getLocalSocketAddress()); @TO@ ElseBody:{  sb.append(ssock.getLocalSocketAddress());} @AT@ 10482 @LENGTH@ 41


UPD ExpressionStatement@@MethodInvocation:assertTrue(e.getMessage().startsWith("Failed to create route route2 at: >>> To[direct:result?foo=bar] <<< in route: Route[[From[direct:start]] -> [To[direct:result?foo=bar]]] because of")) @TO@ MethodInvocation:assertTrue(e.getMessage().startsWith("Failed to create route route2 at: >>> To[direct:result?foo=bar] <<< in route:" + " Route[[From[direct:start]] -> [To[direct:result?foo=bar]]] because of")) @AT@ 2189 @LENGTH@ 189
---UPD MethodInvocation@@assertTrue(e.getMessage().startsWith("Failed to create route route2 at: >>> To[direct:result?foo=bar] <<< in route: Route[[From[direct:start]] -> [To[direct:result?foo=bar]]] because of")) @TO@ assertTrue(e.getMessage().startsWith("Failed to create route route2 at: >>> To[direct:result?foo=bar] <<< in route:" + " Route[[From[direct:start]] -> [To[direct:result?foo=bar]]] because of")) @AT@ 2189 @LENGTH@ 188
------UPD SimpleName@@MethodName:assertTrue:[e.getMessage().startsWith("Failed to create route route2 at: >>> To[direct:result?foo=bar] <<< in route: Route[[From[direct:start]] -> [To[direct:result?foo=bar]]] because of")] @TO@ MethodName:assertTrue:[e.getMessage().startsWith("Failed to create route route2 at: >>> To[direct:result?foo=bar] <<< in route:" + " Route[[From[direct:start]] -> [To[direct:result?foo=bar]]] because of")] @AT@ 2189 @LENGTH@ 188
---------UPD MethodInvocation@@e.getMessage().startsWith("Failed to create route route2 at: >>> To[direct:result?foo=bar] <<< in route: Route[[From[direct:start]] -> [To[direct:result?foo=bar]]] because of") @TO@ e.getMessage().startsWith("Failed to create route route2 at: >>> To[direct:result?foo=bar] <<< in route:" + " Route[[From[direct:start]] -> [To[direct:result?foo=bar]]] because of") @AT@ 2200 @LENGTH@ 176
------------UPD SimpleName@@MethodName:startsWith:["Failed to create route route2 at: >>> To[direct:result?foo=bar] <<< in route: Route[[From[direct:start]] -> [To[direct:result?foo=bar]]] because of"] @TO@ MethodName:startsWith:["Failed to create route route2 at: >>> To[direct:result?foo=bar] <<< in route:" + " Route[[From[direct:start]] -> [To[direct:result?foo=bar]]] because of"] @AT@ 2215 @LENGTH@ 161
---------------INS InfixExpression@@"Failed to create route route2 at: >>> To[direct:result?foo=bar] <<< in route:" + " Route[[From[direct:start]] -> [To[direct:result?foo=bar]]] because of" @TO@ SimpleName@@MethodName:startsWith:["Failed to create route route2 at: >>> To[direct:result?foo=bar] <<< in route: Route[[From[direct:start]] -> [To[direct:result?foo=bar]]] because of"] @AT@ 2226 @LENGTH@ 174
------------------INS StringLiteral@@"Failed to create route route2 at: >>> To[direct:result?foo=bar] <<< in route:" @TO@ InfixExpression@@"Failed to create route route2 at: >>> To[direct:result?foo=bar] <<< in route:" + " Route[[From[direct:start]] -> [To[direct:result?foo=bar]]] because of" @AT@ 2226 @LENGTH@ 79
------------------INS Operator@@+ @TO@ InfixExpression@@"Failed to create route route2 at: >>> To[direct:result?foo=bar] <<< in route:" + " Route[[From[direct:start]] -> [To[direct:result?foo=bar]]] because of" @AT@ 2305 @LENGTH@ 1
------------------INS StringLiteral@@" Route[[From[direct:start]] -> [To[direct:result?foo=bar]]] because of" @TO@ InfixExpression@@"Failed to create route route2 at: >>> To[direct:result?foo=bar] <<< in route:" + " Route[[From[direct:start]] -> [To[direct:result?foo=bar]]] because of" @AT@ 2328 @LENGTH@ 72
---------------DEL StringLiteral@@"Failed to create route route2 at: >>> To[direct:result?foo=bar] <<< in route: Route[[From[direct:start]] -> [To[direct:result?foo=bar]]] because of" @AT@ 2226 @LENGTH@ 149


MOV FieldDeclaration@@public, static, final, int, [POST_MODULE_WELD_WEB_INTEGRATION=0x0100] @TO@ EnumDeclaration@@[public]Phase,  @AT@ 14481 @LENGTH@ 77


UPD ExpressionStatement@@MethodInvocation:server.register("/test/",new BasicValidationHandler("GET","my=%40+camel",null,getExpectedContent())) @TO@ MethodInvocation:server.register("/test/",new BasicValidationHandler("GET","my=@+camel",null,getExpectedContent())) @AT@ 2426 @LENGTH@ 105
---UPD MethodInvocation@@server.register("/test/",new BasicValidationHandler("GET","my=%40+camel",null,getExpectedContent())) @TO@ server.register("/test/",new BasicValidationHandler("GET","my=@+camel",null,getExpectedContent())) @AT@ 2426 @LENGTH@ 104
------UPD SimpleName@@MethodName:register:["/test/", new BasicValidationHandler("GET","my=%40+camel",null,getExpectedContent())] @TO@ MethodName:register:["/test/", new BasicValidationHandler("GET","my=@+camel",null,getExpectedContent())] @AT@ 2433 @LENGTH@ 97
---------UPD ClassInstanceCreation@@BasicValidationHandler["GET", "my=%40+camel", null, getExpectedContent()] @TO@ BasicValidationHandler["GET", "my=@+camel", null, getExpectedContent()] @AT@ 2452 @LENGTH@ 77
------------UPD StringLiteral@@"my=%40+camel" @TO@ "my=@+camel" @AT@ 2486 @LENGTH@ 14


UPD ExpressionStatement@@MethodInvocation:assertNotNull("Should get the content-lenghth ",headers.get("Content-Length")) @TO@ MethodInvocation:assertNotNull("Should get the content-length",headers.get("Content-Length")) @AT@ 2488 @LENGTH@ 80
---UPD MethodInvocation@@assertNotNull("Should get the content-lenghth ",headers.get("Content-Length")) @TO@ assertNotNull("Should get the content-length",headers.get("Content-Length")) @AT@ 2488 @LENGTH@ 79
------UPD SimpleName@@MethodName:assertNotNull:["Should get the content-lenghth ", headers.get("Content-Length")] @TO@ MethodName:assertNotNull:["Should get the content-length", headers.get("Content-Length")] @AT@ 2488 @LENGTH@ 79
---------UPD StringLiteral@@"Should get the content-lenghth " @TO@ "Should get the content-length" @AT@ 2502 @LENGTH@ 33


UPD IfStatement@@if (node.has(CommonAttributes.JMX_CONNECTOR)) {  context.startSubsystemElement(Namespace.CURRENT.getUriString(),false);  writer.writeStartElement(Element.JMX_CONNECTOR.getLocalName());  writer.writeAttribute(Attribute.SERVER_BINDING.getLocalName(),node.get(CommonAttributes.SERVER_BINDING).asString());  writer.writeAttribute(Attribute.REGISTRY_BINDING.getLocalName(),node.get(CommonAttributes.REGISTRY_BINDING).asString());  writer.writeEndElement();  writer.writeEndElement();} else {  context.startSubsystemElement(Namespace.CURRENT.getUriString(),false);  writer.writeEndElement();} @TO@ if (node.has(CommonAttributes.SERVER_BINDING)) {  context.startSubsystemElement(Namespace.CURRENT.getUriString(),false);  writer.writeStartElement(Element.JMX_CONNECTOR.getLocalName());  writer.writeAttribute(Attribute.SERVER_BINDING.getLocalName(),node.get(CommonAttributes.SERVER_BINDING).asString());  writer.writeAttribute(Attribute.REGISTRY_BINDING.getLocalName(),node.get(CommonAttributes.REGISTRY_BINDING).asString());  writer.writeEndElement();  writer.writeEndElement();} else {  context.startSubsystemElement(Namespace.CURRENT.getUriString(),false);  writer.writeEndElement();} @AT@ 6391 @LENGTH@ 962
---UPD MethodInvocation@@node.has(CommonAttributes.JMX_CONNECTOR) @TO@ node.has(CommonAttributes.SERVER_BINDING) @AT@ 6394 @LENGTH@ 40
------UPD SimpleName@@MethodName:has:[CommonAttributes.JMX_CONNECTOR] @TO@ MethodName:has:[CommonAttributes.SERVER_BINDING] @AT@ 6399 @LENGTH@ 35
---------UPD QualifiedName@@CommonAttributes.JMX_CONNECTOR @TO@ CommonAttributes.SERVER_BINDING @AT@ 6403 @LENGTH@ 30
------------UPD SimpleName@@JMX_CONNECTOR @TO@ SERVER_BINDING @AT@ 6420 @LENGTH@ 13


UPD ExpressionStatement@@Assignment:server=EmbeddedServerFactory.create(jbossHomeDir,sysprops,System.getenv()) @TO@ Assignment:server=EmbeddedServerFactory.create(jbossHomeDir,sysprops,System.getenv(),"org.jboss.logmanager") @AT@ 3157 @LENGTH@ 79
---UPD Assignment@@server=EmbeddedServerFactory.create(jbossHomeDir,sysprops,System.getenv()) @TO@ server=EmbeddedServerFactory.create(jbossHomeDir,sysprops,System.getenv(),"org.jboss.logmanager") @AT@ 3157 @LENGTH@ 78
------UPD MethodInvocation@@EmbeddedServerFactory.create(jbossHomeDir,sysprops,System.getenv()) @TO@ EmbeddedServerFactory.create(jbossHomeDir,sysprops,System.getenv(),"org.jboss.logmanager") @AT@ 3166 @LENGTH@ 69
---------UPD SimpleName@@MethodName:create:[jbossHomeDir, sysprops, System.getenv()] @TO@ MethodName:create:[jbossHomeDir, sysprops, System.getenv(), "org.jboss.logmanager"] @AT@ 3188 @LENGTH@ 47
------------INS StringLiteral@@"org.jboss.logmanager" @TO@ SimpleName@@MethodName:create:[jbossHomeDir, sysprops, System.getenv()] @AT@ 3236 @LENGTH@ 22


INS FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @TO@ TypeDeclaration@@[public]LdapUserDetailsImpl, [LdapUserDetails, PasswordPolicyData] @AT@ 2039 @LENGTH@ 90
---INS Modifier@@private @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @AT@ 2039 @LENGTH@ 7
---INS Modifier@@static @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @AT@ 2047 @LENGTH@ 6
---INS Modifier@@final @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @AT@ 2054 @LENGTH@ 5
---INS PrimitiveType@@long @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @AT@ 2060 @LENGTH@ 4
---INS VariableDeclarationFragment@@serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @AT@ 2065 @LENGTH@ 63
------INS SimpleName@@serialVersionUID @TO@ VariableDeclarationFragment@@serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID @AT@ 2065 @LENGTH@ 16
------INS QualifiedName@@SpringSecurityCoreVersion.SERIAL_VERSION_UID @TO@ VariableDeclarationFragment@@serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID @AT@ 2084 @LENGTH@ 44
---------INS SimpleName@@SpringSecurityCoreVersion @TO@ QualifiedName@@SpringSecurityCoreVersion.SERIAL_VERSION_UID @AT@ 2084 @LENGTH@ 25
---------INS SimpleName@@SERIAL_VERSION_UID @TO@ QualifiedName@@SpringSecurityCoreVersion.SERIAL_VERSION_UID @AT@ 2110 @LENGTH@ 18


UPD ExpressionStatement@@MethodInvocation:connection.setRequestProperty("Content-Type","multipart/form-data;boundary=-----------------------------261773107125236") @TO@ MethodInvocation:connection.setRequestProperty("Content-Type","multipart/form-data;boundary=---------------------------261773107125236") @AT@ 2312 @LENGTH@ 122
---UPD MethodInvocation@@connection.setRequestProperty("Content-Type","multipart/form-data;boundary=-----------------------------261773107125236") @TO@ connection.setRequestProperty("Content-Type","multipart/form-data;boundary=---------------------------261773107125236") @AT@ 2312 @LENGTH@ 121
------UPD SimpleName@@MethodName:setRequestProperty:["Content-Type", "multipart/form-data;boundary=-----------------------------261773107125236"] @TO@ MethodName:setRequestProperty:["Content-Type", "multipart/form-data;boundary=---------------------------261773107125236"] @AT@ 2323 @LENGTH@ 110
---------UPD StringLiteral@@"multipart/form-data;boundary=-----------------------------261773107125236" @TO@ "multipart/form-data;boundary=---------------------------261773107125236" @AT@ 2357 @LENGTH@ 75


INS MethodDeclaration@@public, ConsumerService, MethodName:getConsumerService,  @TO@ TypeDeclaration@@[public]CometdConsumer, DefaultConsumer[CometdProducerConsumer] @AT@ 2217 @LENGTH@ 75
---INS Modifier@@public @TO@ MethodDeclaration@@public, ConsumerService, MethodName:getConsumerService,  @AT@ 2217 @LENGTH@ 6
---INS SimpleType@@ConsumerService @TO@ MethodDeclaration@@public, ConsumerService, MethodName:getConsumerService,  @AT@ 2224 @LENGTH@ 15
---INS SimpleName@@MethodName:getConsumerService @TO@ MethodDeclaration@@public, ConsumerService, MethodName:getConsumerService,  @AT@ 2240 @LENGTH@ 18
---INS ReturnStatement@@SimpleName:service @TO@ MethodDeclaration@@public, ConsumerService, MethodName:getConsumerService,  @AT@ 2271 @LENGTH@ 15
------INS SimpleName@@service @TO@ ReturnStatement@@SimpleName:service @AT@ 2278 @LENGTH@ 7


UPD EnhancedForStatement@@for (final ClassInfo clazz : allKnown) {  final DotName className=clazz.name();  if (!processedClasses.contains(className)) {    allKnown.add(clazz);    subClassesToProcess.add(className);  }} @TO@ for (final ClassInfo clazz : list) {  final DotName className=clazz.name();  if (!processedClasses.contains(className)) {    allKnown.add(clazz);    subClassesToProcess.add(className);  }} @AT@ 4496 @LENGTH@ 310
---UPD SimpleName@@allKnown @TO@ list @AT@ 4525 @LENGTH@ 8


UPD ReturnStatement@@ConditionalExpression:map.isEmpty() ? null : wrapper @TO@ ConditionalExpression:map.isEmpty() || wrapper.get("jobExecution.stepExecutions.step1['resource']") == null ? null : wrapper @AT@ 3470 @LENGTH@ 38
---UPD ConditionalExpression@@map.isEmpty() ? null : wrapper @TO@ map.isEmpty() || wrapper.get("jobExecution.stepExecutions.step1['resource']") == null ? null : wrapper @AT@ 3477 @LENGTH@ 30
------DEL MethodInvocation@@map.isEmpty() @AT@ 3477 @LENGTH@ 13
------INS InfixExpression@@map.isEmpty() || wrapper.get("jobExecution.stepExecutions.step1['resource']") == null @TO@ ConditionalExpression@@map.isEmpty() ? null : wrapper @AT@ 3477 @LENGTH@ 83
---------INS MethodInvocation@@map.isEmpty() @TO@ InfixExpression@@map.isEmpty() || wrapper.get("jobExecution.stepExecutions.step1['resource']") == null @AT@ 3477 @LENGTH@ 13
------------MOV SimpleName@@Name:map @TO@ MethodInvocation@@map.isEmpty() @AT@ 3477 @LENGTH@ 3
------------MOV SimpleName@@MethodName:isEmpty:[] @TO@ MethodInvocation@@map.isEmpty() @AT@ 3481 @LENGTH@ 9
---------INS Operator@@|| @TO@ InfixExpression@@map.isEmpty() || wrapper.get("jobExecution.stepExecutions.step1['resource']") == null @AT@ 3490 @LENGTH@ 2
---------INS InfixExpression@@wrapper.get("jobExecution.stepExecutions.step1['resource']") == null @TO@ InfixExpression@@map.isEmpty() || wrapper.get("jobExecution.stepExecutions.step1['resource']") == null @AT@ 3494 @LENGTH@ 66
------------INS MethodInvocation@@wrapper.get("jobExecution.stepExecutions.step1['resource']") @TO@ InfixExpression@@wrapper.get("jobExecution.stepExecutions.step1['resource']") == null @AT@ 3494 @LENGTH@ 60
---------------INS SimpleName@@Name:wrapper @TO@ MethodInvocation@@wrapper.get("jobExecution.stepExecutions.step1['resource']") @AT@ 3494 @LENGTH@ 7
---------------INS SimpleName@@MethodName:get:["jobExecution.stepExecutions.step1['resource']"] @TO@ MethodInvocation@@wrapper.get("jobExecution.stepExecutions.step1['resource']") @AT@ 3502 @LENGTH@ 52
------------------INS StringLiteral@@"jobExecution.stepExecutions.step1['resource']" @TO@ SimpleName@@MethodName:get:["jobExecution.stepExecutions.step1['resource']"] @AT@ 3506 @LENGTH@ 47
------------INS Operator@@== @TO@ InfixExpression@@wrapper.get("jobExecution.stepExecutions.step1['resource']") == null @AT@ 3554 @LENGTH@ 2
------------INS NullLiteral@@null @TO@ InfixExpression@@wrapper.get("jobExecution.stepExecutions.step1['resource']") == null @AT@ 3556 @LENGTH@ 4
------DEL NullLiteral@@null @AT@ 3493 @LENGTH@ 4
------INS NullLiteral@@null @TO@ ConditionalExpression@@map.isEmpty() ? null : wrapper @AT@ 3563 @LENGTH@ 4


UPD IfStatement@@if (metaData.getServlets() != null) for (ServletMetaData servlet : metaData.getServlets()) {  classes.add(servlet.getServletClass());} @TO@ if (metaData.getServlets() != null) for (ServletMetaData servlet : metaData.getServlets()) {  if (servlet.getServletClass() != null) {    classes.add(servlet.getServletClass());  }} @AT@ 7287 @LENGTH@ 175
---UPD Block@@ThenBody:for (ServletMetaData servlet : metaData.getServlets()) {  classes.add(servlet.getServletClass());} @TO@ ThenBody:{  classes.add(servlet.getServletClass());} @AT@ 7335 @LENGTH@ 127
---INS Block@@ThenBody:for (ServletMetaData servlet : metaData.getServlets()) {  if (servlet.getServletClass() != null) {    classes.add(servlet.getServletClass());  }} @TO@ IfStatement@@if (metaData.getServlets() != null) for (ServletMetaData servlet : metaData.getServlets()) {  classes.add(servlet.getServletClass());} @AT@ 7416 @LENGTH@ 208
------INS EnhancedForStatement@@for (ServletMetaData servlet : metaData.getServlets()) {  if (servlet.getServletClass() != null) {    classes.add(servlet.getServletClass());  }} @TO@ Block@@ThenBody:for (ServletMetaData servlet : metaData.getServlets()) {  if (servlet.getServletClass() != null) {    classes.add(servlet.getServletClass());  }} @AT@ 7416 @LENGTH@ 208
---------INS SingleVariableDeclaration@@ServletMetaData servlet @TO@ EnhancedForStatement@@for (ServletMetaData servlet : metaData.getServlets()) {  if (servlet.getServletClass() != null) {    classes.add(servlet.getServletClass());  }} @AT@ 7420 @LENGTH@ 23
------------INS SimpleType@@ServletMetaData @TO@ SingleVariableDeclaration@@ServletMetaData servlet @AT@ 7420 @LENGTH@ 15
------------INS SimpleName@@servlet @TO@ SingleVariableDeclaration@@ServletMetaData servlet @AT@ 7436 @LENGTH@ 7
---------INS MethodInvocation@@metaData.getServlets() @TO@ EnhancedForStatement@@for (ServletMetaData servlet : metaData.getServlets()) {  if (servlet.getServletClass() != null) {    classes.add(servlet.getServletClass());  }} @AT@ 7446 @LENGTH@ 22
------------INS SimpleName@@Name:metaData @TO@ MethodInvocation@@metaData.getServlets() @AT@ 7446 @LENGTH@ 8
------------INS SimpleName@@MethodName:getServlets:[] @TO@ MethodInvocation@@metaData.getServlets() @AT@ 7455 @LENGTH@ 13
---------INS IfStatement@@if (servlet.getServletClass() != null) {  classes.add(servlet.getServletClass());} @TO@ EnhancedForStatement@@for (ServletMetaData servlet : metaData.getServlets()) {  if (servlet.getServletClass() != null) {    classes.add(servlet.getServletClass());  }} @AT@ 7489 @LENGTH@ 120
------------MOV Block@@ThenBody:for (ServletMetaData servlet : metaData.getServlets()) {  classes.add(servlet.getServletClass());} @TO@ IfStatement@@if (servlet.getServletClass() != null) {  classes.add(servlet.getServletClass());} @AT@ 7335 @LENGTH@ 127
---------------DEL EnhancedForStatement@@for (ServletMetaData servlet : metaData.getServlets()) {  classes.add(servlet.getServletClass());} @AT@ 7335 @LENGTH@ 127
------------------DEL SingleVariableDeclaration@@ServletMetaData servlet @AT@ 7339 @LENGTH@ 23
---------------------DEL SimpleType@@ServletMetaData @AT@ 7339 @LENGTH@ 15
---------------------DEL SimpleName@@servlet @AT@ 7355 @LENGTH@ 7
------------------DEL MethodInvocation@@metaData.getServlets() @AT@ 7365 @LENGTH@ 22
---------------------DEL SimpleName@@Name:metaData @AT@ 7365 @LENGTH@ 8
---------------------DEL SimpleName@@MethodName:getServlets:[] @AT@ 7374 @LENGTH@ 13
---------------MOV ExpressionStatement@@MethodInvocation:classes.add(servlet.getServletClass()) @TO@ Block@@ThenBody:for (ServletMetaData servlet : metaData.getServlets()) {  classes.add(servlet.getServletClass());} @AT@ 7408 @LENGTH@ 39
------------INS InfixExpression@@servlet.getServletClass() != null @TO@ IfStatement@@if (servlet.getServletClass() != null) {  classes.add(servlet.getServletClass());} @AT@ 7493 @LENGTH@ 33
---------------INS MethodInvocation@@servlet.getServletClass() @TO@ InfixExpression@@servlet.getServletClass() != null @AT@ 7493 @LENGTH@ 25
------------------INS SimpleName@@Name:servlet @TO@ MethodInvocation@@servlet.getServletClass() @AT@ 7493 @LENGTH@ 7
------------------INS SimpleName@@MethodName:getServletClass:[] @TO@ MethodInvocation@@servlet.getServletClass() @AT@ 7501 @LENGTH@ 17
---------------INS Operator@@!= @TO@ InfixExpression@@servlet.getServletClass() != null @AT@ 7518 @LENGTH@ 2
---------------INS NullLiteral@@null @TO@ InfixExpression@@servlet.getServletClass() != null @AT@ 7522 @LENGTH@ 4


UPD IfStatement@@if (column.getLength() > 0) {  columnElement.setAttribute("size",String.valueOf(column.getLength()));} else {  columnElement.setAttribute("size",column.getPrecision() + "," + column.getScale());} @TO@ if (column.getScale() == 0) {  columnElement.setAttribute("size",String.valueOf(column.getColumnSize()));} else {  columnElement.setAttribute("size",column.getColumnSize() + "," + column.getScale());} @AT@ 3081 @LENGTH@ 215
---UPD InfixExpression@@column.getLength() > 0 @TO@ column.getScale() == 0 @AT@ 3085 @LENGTH@ 22
------UPD MethodInvocation@@column.getLength() @TO@ column.getScale() @AT@ 3085 @LENGTH@ 18
---------UPD SimpleName@@MethodName:getLength:[] @TO@ MethodName:getScale:[] @AT@ 3092 @LENGTH@ 11
------UPD Operator@@> @TO@ == @AT@ 3103 @LENGTH@ 1
---UPD Block@@ThenBody:{  columnElement.setAttribute("size",String.valueOf(column.getLength()));} @TO@ ThenBody:{  columnElement.setAttribute("size",String.valueOf(column.getColumnSize()));} @AT@ 3109 @LENGTH@ 84
------UPD ExpressionStatement@@MethodInvocation:columnElement.setAttribute("size",String.valueOf(column.getLength())) @TO@ MethodInvocation:columnElement.setAttribute("size",String.valueOf(column.getColumnSize())) @AT@ 3116 @LENGTH@ 71
---------UPD MethodInvocation@@columnElement.setAttribute("size",String.valueOf(column.getLength())) @TO@ columnElement.setAttribute("size",String.valueOf(column.getColumnSize())) @AT@ 3116 @LENGTH@ 70
------------UPD SimpleName@@MethodName:setAttribute:["size", String.valueOf(column.getLength())] @TO@ MethodName:setAttribute:["size", String.valueOf(column.getColumnSize())] @AT@ 3130 @LENGTH@ 56
---------------UPD MethodInvocation@@String.valueOf(column.getLength()) @TO@ String.valueOf(column.getColumnSize()) @AT@ 3151 @LENGTH@ 34
------------------UPD SimpleName@@MethodName:valueOf:[column.getLength()] @TO@ MethodName:valueOf:[column.getColumnSize()] @AT@ 3158 @LENGTH@ 27
---------------------UPD MethodInvocation@@column.getLength() @TO@ column.getColumnSize() @AT@ 3166 @LENGTH@ 18
------------------------UPD SimpleName@@MethodName:getLength:[] @TO@ MethodName:getColumnSize:[] @AT@ 3173 @LENGTH@ 11
---UPD Block@@ElseBody:{  columnElement.setAttribute("size",column.getPrecision() + "," + column.getScale());} @TO@ ElseBody:{  columnElement.setAttribute("size",column.getColumnSize() + "," + column.getScale());} @AT@ 3199 @LENGTH@ 97
------UPD ExpressionStatement@@MethodInvocation:columnElement.setAttribute("size",column.getPrecision() + "," + column.getScale()) @TO@ MethodInvocation:columnElement.setAttribute("size",column.getColumnSize() + "," + column.getScale()) @AT@ 3206 @LENGTH@ 84
---------UPD MethodInvocation@@columnElement.setAttribute("size",column.getPrecision() + "," + column.getScale()) @TO@ columnElement.setAttribute("size",column.getColumnSize() + "," + column.getScale()) @AT@ 3206 @LENGTH@ 83
------------UPD SimpleName@@MethodName:setAttribute:["size", column.getPrecision() + "," + column.getScale()] @TO@ MethodName:setAttribute:["size", column.getColumnSize() + "," + column.getScale()] @AT@ 3220 @LENGTH@ 69
---------------UPD InfixExpression@@column.getPrecision() + "," + column.getScale() @TO@ column.getColumnSize() + "," + column.getScale() @AT@ 3241 @LENGTH@ 47
------------------UPD MethodInvocation@@column.getPrecision() @TO@ column.getColumnSize() @AT@ 3241 @LENGTH@ 21
---------------------UPD SimpleName@@MethodName:getPrecision:[] @TO@ MethodName:getColumnSize:[] @AT@ 3248 @LENGTH@ 14


UPD MethodDeclaration@@public, voidMethodName:QuotesState, boolean quotesInContent,  @TO@ public, voidMethodName:QuotesState, boolean quotesInContent, boolean escapeEnabled,  @AT@ 1324 @LENGTH@ 408
---INS SingleVariableDeclaration@@boolean escapeEnabled @TO@ MethodDeclaration@@public, voidMethodName:QuotesState, boolean quotesInContent,  @AT@ 1462 @LENGTH@ 21
------INS PrimitiveType@@boolean @TO@ SingleVariableDeclaration@@boolean escapeEnabled @AT@ 1462 @LENGTH@ 7
------INS SimpleName@@escapeEnabled @TO@ SingleVariableDeclaration@@boolean escapeEnabled @AT@ 1470 @LENGTH@ 13
---INS IfStatement@@if (escapeEnabled) {  this.enterState('\\',EscapeCharacterState.INSTANCE);} @TO@ MethodDeclaration@@public, voidMethodName:QuotesState, boolean quotesInContent,  @AT@ 1707 @LENGTH@ 95
------INS SimpleName@@escapeEnabled @TO@ IfStatement@@if (escapeEnabled) {  this.enterState('\\',EscapeCharacterState.INSTANCE);} @AT@ 1710 @LENGTH@ 13
------INS Block@@ThenBody:{  this.enterState('\\',EscapeCharacterState.INSTANCE);} @TO@ IfStatement@@if (escapeEnabled) {  this.enterState('\\',EscapeCharacterState.INSTANCE);} @AT@ 1725 @LENGTH@ 77
---------MOV ExpressionStatement@@MethodInvocation:this.enterState('\\',EscapeCharacterState.INSTANCE) @TO@ Block@@ThenBody:{  this.enterState('\\',EscapeCharacterState.INSTANCE);} @AT@ 1590 @LENGTH@ 53


UPD EnhancedForStatement@@for (SFSBContextHandle handle : currentSFSBCallStack()) {  List<EntityManager> xpcs=SFSBXPCMap.getINSTANCE().getXPC(handle);  if (xpcs == null)   continue;  for (  EntityManager xpc : xpcs) {    if (xpc.unwrap(EntityManagerMetadata.class).getScopedPuName().equals(puScopedName)) {      return xpc;    }  }} @TO@ for (SFSBContextHandle handle : currentSFSBCallStack()) {  List<WeakReference<EntityManager>> xpcs=SFSBXPCMap.getINSTANCE().getXPC(handle);  if (xpcs == null)   continue;  for (  WeakReference<EntityManager> xpc_ref : xpcs) {    EntityManager xpc=xpc_ref.get();    if (xpc != null && xpc.unwrap(EntityManagerMetadata.class).getScopedPuName().equals(puScopedName)) {      return xpc;    }  }} @AT@ 2286 @LENGTH@ 414
---UPD VariableDeclarationStatement@@List<EntityManager> xpcs=SFSBXPCMap.getINSTANCE().getXPC(handle); @TO@ List<WeakReference<EntityManager>> xpcs=SFSBXPCMap.getINSTANCE().getXPC(handle); @AT@ 2356 @LENGTH@ 67
------UPD ParameterizedType@@List<EntityManager> @TO@ List<WeakReference<EntityManager>> @AT@ 2356 @LENGTH@ 19
---------INS ParameterizedType@@WeakReference<EntityManager> @TO@ ParameterizedType@@List<EntityManager> @AT@ 2397 @LENGTH@ 28
------------MOV SimpleType@@EntityManager @TO@ ParameterizedType@@WeakReference<EntityManager> @AT@ 2361 @LENGTH@ 13
------------INS SimpleType@@WeakReference @TO@ ParameterizedType@@WeakReference<EntityManager> @AT@ 2397 @LENGTH@ 13
---UPD EnhancedForStatement@@for (EntityManager xpc : xpcs) {  if (xpc.unwrap(EntityManagerMetadata.class).getScopedPuName().equals(puScopedName)) {    return xpc;  }} @TO@ for (WeakReference<EntityManager> xpc_ref : xpcs) {  EntityManager xpc=xpc_ref.get();  if (xpc != null && xpc.unwrap(EntityManagerMetadata.class).getScopedPuName().equals(puScopedName)) {    return xpc;  }} @AT@ 2492 @LENGTH@ 198
------UPD SingleVariableDeclaration@@EntityManager xpc @TO@ WeakReference<EntityManager> xpc_ref @AT@ 2497 @LENGTH@ 17
---------DEL SimpleType@@EntityManager @AT@ 2497 @LENGTH@ 13
---------UPD SimpleName@@xpc @TO@ xpc_ref @AT@ 2511 @LENGTH@ 3
---------INS ParameterizedType@@WeakReference<EntityManager> @TO@ SingleVariableDeclaration@@EntityManager xpc @AT@ 2548 @LENGTH@ 28
------------INS SimpleType@@WeakReference @TO@ ParameterizedType@@WeakReference<EntityManager> @AT@ 2548 @LENGTH@ 13
------------INS SimpleType@@EntityManager @TO@ ParameterizedType@@WeakReference<EntityManager> @AT@ 2562 @LENGTH@ 13
------UPD IfStatement@@if (xpc.unwrap(EntityManagerMetadata.class).getScopedPuName().equals(puScopedName)) {  return xpc;} @TO@ if (xpc != null && xpc.unwrap(EntityManagerMetadata.class).getScopedPuName().equals(puScopedName)) {  return xpc;} @AT@ 2541 @LENGTH@ 135
---------INS InfixExpression@@xpc != null && xpc.unwrap(EntityManagerMetadata.class).getScopedPuName().equals(puScopedName) @TO@ IfStatement@@if (xpc.unwrap(EntityManagerMetadata.class).getScopedPuName().equals(puScopedName)) {  return xpc;} @AT@ 2666 @LENGTH@ 93
------------MOV MethodInvocation@@xpc.unwrap(EntityManagerMetadata.class).getScopedPuName().equals(puScopedName) @TO@ InfixExpression@@xpc != null && xpc.unwrap(EntityManagerMetadata.class).getScopedPuName().equals(puScopedName) @AT@ 2545 @LENGTH@ 78
------------INS InfixExpression@@xpc != null @TO@ InfixExpression@@xpc != null && xpc.unwrap(EntityManagerMetadata.class).getScopedPuName().equals(puScopedName) @AT@ 2666 @LENGTH@ 11
---------------INS SimpleName@@xpc @TO@ InfixExpression@@xpc != null @AT@ 2666 @LENGTH@ 3
---------------INS Operator@@!= @TO@ InfixExpression@@xpc != null @AT@ 2669 @LENGTH@ 2
---------------INS NullLiteral@@null @TO@ InfixExpression@@xpc != null @AT@ 2673 @LENGTH@ 4
------------INS Operator@@&& @TO@ InfixExpression@@xpc != null && xpc.unwrap(EntityManagerMetadata.class).getScopedPuName().equals(puScopedName) @AT@ 2677 @LENGTH@ 2
------INS VariableDeclarationStatement@@EntityManager xpc=xpc_ref.get(); @TO@ EnhancedForStatement@@for (EntityManager xpc : xpcs) {  if (xpc.unwrap(EntityManagerMetadata.class).getScopedPuName().equals(puScopedName)) {    return xpc;  }} @AT@ 2611 @LENGTH@ 34
---------INS SimpleType@@EntityManager @TO@ VariableDeclarationStatement@@EntityManager xpc=xpc_ref.get(); @AT@ 2611 @LENGTH@ 13
---------INS VariableDeclarationFragment@@xpc=xpc_ref.get() @TO@ VariableDeclarationStatement@@EntityManager xpc=xpc_ref.get(); @AT@ 2625 @LENGTH@ 19
------------INS SimpleName@@xpc @TO@ VariableDeclarationFragment@@xpc=xpc_ref.get() @AT@ 2625 @LENGTH@ 3
------------INS MethodInvocation@@xpc_ref.get() @TO@ VariableDeclarationFragment@@xpc=xpc_ref.get() @AT@ 2631 @LENGTH@ 13
---------------INS SimpleName@@Name:xpc_ref @TO@ MethodInvocation@@xpc_ref.get() @AT@ 2631 @LENGTH@ 7
---------------INS SimpleName@@MethodName:get:[] @TO@ MethodInvocation@@xpc_ref.get() @AT@ 2639 @LENGTH@ 5


UPD ExpressionStatement@@MethodInvocation:LOG.debug("Touched %s - Last modification at %s by %s",new Object[]{auditable,defaultedNow,defaultedAuditor}) @TO@ MethodInvocation:LOG.debug("Touched {} - Last modification at {} by {}",new Object[]{auditable,defaultedNow,defaultedAuditor}) @AT@ 4068 @LENGTH@ 132
---UPD MethodInvocation@@LOG.debug("Touched %s - Last modification at %s by %s",new Object[]{auditable,defaultedNow,defaultedAuditor}) @TO@ LOG.debug("Touched {} - Last modification at {} by {}",new Object[]{auditable,defaultedNow,defaultedAuditor}) @AT@ 4068 @LENGTH@ 131
------UPD SimpleName@@MethodName:debug:["Touched %s - Last modification at %s by %s", new Object[]{auditable,defaultedNow,defaultedAuditor}] @TO@ MethodName:debug:["Touched {} - Last modification at {} by {}", new Object[]{auditable,defaultedNow,defaultedAuditor}] @AT@ 4072 @LENGTH@ 127
---------UPD StringLiteral@@"Touched %s - Last modification at %s by %s" @TO@ "Touched {} - Last modification at {} by {}" @AT@ 4078 @LENGTH@ 44


UPD MethodDeclaration@@public, void, MethodName:handle, ParsingContext ctx, OperationFormatException,  @TO@ public, void, MethodName:handle, ParsingContext ctx, CommandFormatException,  @AT@ 1710 @LENGTH@ 197
---UPD SimpleType@@OperationFormatException @TO@ CommandFormatException @AT@ 1776 @LENGTH@ 24


UPD FieldDeclaration@@protected, SSLSocketFactory, [factory=null] @TO@ protected, SSLSocketFactory, [factory] @AT@ 954 @LENGTH@ 42
---UPD VariableDeclarationFragment@@factory=null @TO@ factory @AT@ 981 @LENGTH@ 14
------DEL NullLiteral@@null @AT@ 991 @LENGTH@ 4


UPD ReturnStatement@@InfixExpression:"http://www.gowalla.com/users/" + providerAccountId @TO@ InfixExpression:"https://github.com/" + providerAccountId @AT@ 1802 @LENGTH@ 59
---UPD InfixExpression@@"http://www.gowalla.com/users/" + providerAccountId @TO@ "https://github.com/" + providerAccountId @AT@ 1809 @LENGTH@ 51
------UPD StringLiteral@@"http://www.gowalla.com/users/" @TO@ "https://github.com/" @AT@ 1809 @LENGTH@ 31


UPD ExpressionStatement@@MethodInvocation:factory.setUsePool(false) @TO@ MethodInvocation:factory.setUsePool(true) @AT@ 1136 @LENGTH@ 26
---UPD MethodInvocation@@factory.setUsePool(false) @TO@ factory.setUsePool(true) @AT@ 1136 @LENGTH@ 25
------UPD SimpleName@@MethodName:setUsePool:[false] @TO@ MethodName:setUsePool:[true] @AT@ 1144 @LENGTH@ 17
---------UPD BooleanLiteral@@false @TO@ true @AT@ 1155 @LENGTH@ 5


UPD ExpressionStatement@@MethodInvocation:operation.get(XA_DATASOURCES).asList().add(xaDatasourcesNode) @TO@ MethodInvocation:operation.get(REQUEST_PROPERTIES,XA_DATASOURCES).set(xaDatasourcesNode) @AT@ 18802 @LENGTH@ 62
---UPD MethodInvocation@@operation.get(XA_DATASOURCES).asList().add(xaDatasourcesNode) @TO@ operation.get(REQUEST_PROPERTIES,XA_DATASOURCES).set(xaDatasourcesNode) @AT@ 18802 @LENGTH@ 61
------DEL MethodInvocation@@MethodName:asList:[] @AT@ 18802 @LENGTH@ 38
------UPD MethodInvocation@@MethodName:get:[XA_DATASOURCES] @TO@ MethodName:get:[REQUEST_PROPERTIES, XA_DATASOURCES] @AT@ 18802 @LENGTH@ 29
---------INS SimpleName@@REQUEST_PROPERTIES @TO@ MethodInvocation@@MethodName:get:[XA_DATASOURCES] @AT@ 18827 @LENGTH@ 18
------UPD SimpleName@@MethodName:add:[xaDatasourcesNode] @TO@ MethodName:set:[xaDatasourcesNode] @AT@ 18841 @LENGTH@ 22


UPD IfStatement@@if (ArgumentState.ID.equals(id)) {  if (buffer.length() > 0) {    final int endIndex=ctx.getCharacter() == ' ' ? ctx.getLocation() : ctx.getLocation() + 1;    argHandler.argument(buffer.toString(),nameStart,null,-1,endIndex);  }  buffer.setLength(0);  name=null;  nameStart=-1;} else if (ArgumentValueState.ID.equals(id)) {  final int endIndex=ctx.getCharacter() == ' ' ? ctx.getLocation() : ctx.getLocation() + 1;  argHandler.argument(name,nameStart,buffer.toString(),valueStart,endIndex);  buffer.setLength(0);  valueStart=-1;} @TO@ if (ArgumentState.ID.equals(id)) {  if (buffer.length() > 0) {    final int endIndex=ctx.getLocation();    argHandler.argument(buffer.toString(),nameStart,null,-1,endIndex);  }  buffer.setLength(0);  name=null;  nameStart=-1;} else if (ArgumentValueState.ID.equals(id)) {  final int endIndex=ctx.getLocation();  argHandler.argument(name,nameStart,buffer.toString(),valueStart,endIndex);  buffer.setLength(0);  valueStart=-1;} @AT@ 3107 @LENGTH@ 791
---UPD Block@@ThenBody:{  if (buffer.length() > 0) {    final int endIndex=ctx.getCharacter() == ' ' ? ctx.getLocation() : ctx.getLocation() + 1;    argHandler.argument(buffer.toString(),nameStart,null,-1,endIndex);  }  buffer.setLength(0);  name=null;  nameStart=-1;} @TO@ ThenBody:{  if (buffer.length() > 0) {    final int endIndex=ctx.getLocation();    argHandler.argument(buffer.toString(),nameStart,null,-1,endIndex);  }  buffer.setLength(0);  name=null;  nameStart=-1;} @AT@ 3139 @LENGTH@ 408
------UPD IfStatement@@if (buffer.length() > 0) {  final int endIndex=ctx.getCharacter() == ' ' ? ctx.getLocation() : ctx.getLocation() + 1;  argHandler.argument(buffer.toString(),nameStart,null,-1,endIndex);} @TO@ if (buffer.length() > 0) {  final int endIndex=ctx.getLocation();  argHandler.argument(buffer.toString(),nameStart,null,-1,endIndex);} @AT@ 3161 @LENGTH@ 258
---------UPD Block@@ThenBody:{  final int endIndex=ctx.getCharacter() == ' ' ? ctx.getLocation() : ctx.getLocation() + 1;  argHandler.argument(buffer.toString(),nameStart,null,-1,endIndex);} @TO@ ThenBody:{  final int endIndex=ctx.getLocation();  argHandler.argument(buffer.toString(),nameStart,null,-1,endIndex);} @AT@ 3185 @LENGTH@ 234
------------UPD VariableDeclarationStatement@@final int endIndex=ctx.getCharacter() == ' ' ? ctx.getLocation() : ctx.getLocation() + 1; @TO@ final int endIndex=ctx.getLocation(); @AT@ 3211 @LENGTH@ 91
---------------UPD VariableDeclarationFragment@@endIndex=ctx.getCharacter() == ' ' ? ctx.getLocation() : ctx.getLocation() + 1 @TO@ endIndex=ctx.getLocation() @AT@ 3221 @LENGTH@ 80
------------------DEL ConditionalExpression@@ctx.getCharacter() == ' ' ? ctx.getLocation() : ctx.getLocation() + 1 @AT@ 3232 @LENGTH@ 69
---------------------DEL InfixExpression@@ctx.getCharacter() == ' ' @AT@ 3232 @LENGTH@ 25
------------------------DEL MethodInvocation@@ctx.getCharacter() @AT@ 3232 @LENGTH@ 18
---------------------------DEL SimpleName@@Name:ctx @AT@ 3232 @LENGTH@ 3
---------------------------DEL SimpleName@@MethodName:getCharacter:[] @AT@ 3236 @LENGTH@ 14
------------------------DEL Operator@@== @AT@ 3250 @LENGTH@ 2
------------------------DEL CharacterLiteral@@' ' @AT@ 3254 @LENGTH@ 3
---------------------DEL MethodInvocation@@ctx.getLocation() @AT@ 3260 @LENGTH@ 17
---------------------DEL InfixExpression@@ctx.getLocation() + 1 @AT@ 3280 @LENGTH@ 21
------------------------DEL MethodInvocation@@ctx.getLocation() @AT@ 3280 @LENGTH@ 17
---------------------------DEL SimpleName@@Name:ctx @AT@ 3280 @LENGTH@ 3
---------------------------DEL SimpleName@@MethodName:getLocation:[] @AT@ 3284 @LENGTH@ 13
------------------------DEL Operator@@+ @AT@ 3297 @LENGTH@ 1
------------------------DEL NumberLiteral@@1 @AT@ 3300 @LENGTH@ 1
------------------INS MethodInvocation@@ctx.getLocation() @TO@ VariableDeclarationFragment@@endIndex=ctx.getCharacter() == ' ' ? ctx.getLocation() : ctx.getLocation() + 1 @AT@ 3232 @LENGTH@ 17
---------------------MOV SimpleName@@Name:ctx @TO@ MethodInvocation@@ctx.getLocation() @AT@ 3260 @LENGTH@ 3
---------------------MOV SimpleName@@MethodName:getLocation:[] @TO@ MethodInvocation@@ctx.getLocation() @AT@ 3264 @LENGTH@ 13
---UPD Block@@ElseBody:if (ArgumentValueState.ID.equals(id)) {  final int endIndex=ctx.getCharacter() == ' ' ? ctx.getLocation() : ctx.getLocation() + 1;  argHandler.argument(name,nameStart,buffer.toString(),valueStart,endIndex);  buffer.setLength(0);  valueStart=-1;} @TO@ ElseBody:if (ArgumentValueState.ID.equals(id)) {  final int endIndex=ctx.getLocation();  argHandler.argument(name,nameStart,buffer.toString(),valueStart,endIndex);  buffer.setLength(0);  valueStart=-1;} @AT@ 3553 @LENGTH@ 345
------UPD IfStatement@@if (ArgumentValueState.ID.equals(id)) {  final int endIndex=ctx.getCharacter() == ' ' ? ctx.getLocation() : ctx.getLocation() + 1;  argHandler.argument(name,nameStart,buffer.toString(),valueStart,endIndex);  buffer.setLength(0);  valueStart=-1;} @TO@ if (ArgumentValueState.ID.equals(id)) {  final int endIndex=ctx.getLocation();  argHandler.argument(name,nameStart,buffer.toString(),valueStart,endIndex);  buffer.setLength(0);  valueStart=-1;} @AT@ 3553 @LENGTH@ 345
---------UPD Block@@ThenBody:{  final int endIndex=ctx.getCharacter() == ' ' ? ctx.getLocation() : ctx.getLocation() + 1;  argHandler.argument(name,nameStart,buffer.toString(),valueStart,endIndex);  buffer.setLength(0);  valueStart=-1;} @TO@ ThenBody:{  final int endIndex=ctx.getLocation();  argHandler.argument(name,nameStart,buffer.toString(),valueStart,endIndex);  buffer.setLength(0);  valueStart=-1;} @AT@ 3590 @LENGTH@ 308
------------UPD VariableDeclarationStatement@@final int endIndex=ctx.getCharacter() == ' ' ? ctx.getLocation() : ctx.getLocation() + 1; @TO@ final int endIndex=ctx.getLocation(); @AT@ 3612 @LENGTH@ 91
---------------UPD VariableDeclarationFragment@@endIndex=ctx.getCharacter() == ' ' ? ctx.getLocation() : ctx.getLocation() + 1 @TO@ endIndex=ctx.getLocation() @AT@ 3622 @LENGTH@ 80
------------------DEL ConditionalExpression@@ctx.getCharacter() == ' ' ? ctx.getLocation() : ctx.getLocation() + 1 @AT@ 3633 @LENGTH@ 69
---------------------DEL InfixExpression@@ctx.getCharacter() == ' ' @AT@ 3633 @LENGTH@ 25
------------------------DEL MethodInvocation@@ctx.getCharacter() @AT@ 3633 @LENGTH@ 18
---------------------------DEL SimpleName@@Name:ctx @AT@ 3633 @LENGTH@ 3
---------------------------DEL SimpleName@@MethodName:getCharacter:[] @AT@ 3637 @LENGTH@ 14
------------------------DEL Operator@@== @AT@ 3651 @LENGTH@ 2
------------------------DEL CharacterLiteral@@' ' @AT@ 3655 @LENGTH@ 3
---------------------DEL MethodInvocation@@ctx.getLocation() @AT@ 3661 @LENGTH@ 17
---------------------DEL InfixExpression@@ctx.getLocation() + 1 @AT@ 3681 @LENGTH@ 21
------------------------DEL MethodInvocation@@ctx.getLocation() @AT@ 3681 @LENGTH@ 17
---------------------------DEL SimpleName@@Name:ctx @AT@ 3681 @LENGTH@ 3
---------------------------DEL SimpleName@@MethodName:getLocation:[] @AT@ 3685 @LENGTH@ 13
------------------------DEL Operator@@+ @AT@ 3698 @LENGTH@ 1
------------------------DEL NumberLiteral@@1 @AT@ 3701 @LENGTH@ 1
------------------INS MethodInvocation@@ctx.getLocation() @TO@ VariableDeclarationFragment@@endIndex=ctx.getCharacter() == ' ' ? ctx.getLocation() : ctx.getLocation() + 1 @AT@ 3654 @LENGTH@ 17
---------------------MOV SimpleName@@Name:ctx @TO@ MethodInvocation@@ctx.getLocation() @AT@ 3661 @LENGTH@ 3
---------------------MOV SimpleName@@MethodName:getLocation:[] @TO@ MethodInvocation@@ctx.getLocation() @AT@ 3665 @LENGTH@ 13


UPD TypeDeclaration@@[public, final]Rfc3164SyslogConverter,  @TO@ [@Converter, public, final]Rfc3164SyslogConverter,  @AT@ 1172 @LENGTH@ 8213
---INS MarkerAnnotation@@@Converter @TO@ TypeDeclaration@@[public, final]Rfc3164SyslogConverter,  @AT@ 1172 @LENGTH@ 10


INS IfStatement@@if (resourceRoots != null) {  for (  ResourceRoot resourceRoot : resourceRoots) {    final VirtualFile rootFile=resourceRoot.getRoot();    if (!SubDeploymentMarker.isSubDeployment(resourceRoot)) {      final VirtualFile sarDescriptor=rootFile.getChild(ServiceDeploymentParsingProcessor.SERVICE_DESCRIPTOR_PATH);      if (sarDescriptor.exists()) {        SubDeploymentMarker.mark(resourceRoot);      }    }  }} @TO@ MethodDeclaration@@public, void, MethodName:deploy, final DeploymentPhaseContext phaseContext, DeploymentUnitProcessingException,  @AT@ 2132 @LENGTH@ 572
---INS InfixExpression@@resourceRoots != null @TO@ IfStatement@@if (resourceRoots != null) {  for (  ResourceRoot resourceRoot : resourceRoots) {    final VirtualFile rootFile=resourceRoot.getRoot();    if (!SubDeploymentMarker.isSubDeployment(resourceRoot)) {      final VirtualFile sarDescriptor=rootFile.getChild(ServiceDeploymentParsingProcessor.SERVICE_DESCRIPTOR_PATH);      if (sarDescriptor.exists()) {        SubDeploymentMarker.mark(resourceRoot);      }    }  }} @AT@ 2136 @LENGTH@ 21
------INS SimpleName@@resourceRoots @TO@ InfixExpression@@resourceRoots != null @AT@ 2136 @LENGTH@ 13
------INS Operator@@!= @TO@ InfixExpression@@resourceRoots != null @AT@ 2149 @LENGTH@ 2
------INS NullLiteral@@null @TO@ InfixExpression@@resourceRoots != null @AT@ 2153 @LENGTH@ 4
---INS Block@@ThenBody:{  for (  ResourceRoot resourceRoot : resourceRoots) {    final VirtualFile rootFile=resourceRoot.getRoot();    if (!SubDeploymentMarker.isSubDeployment(resourceRoot)) {      final VirtualFile sarDescriptor=rootFile.getChild(ServiceDeploymentParsingProcessor.SERVICE_DESCRIPTOR_PATH);      if (sarDescriptor.exists()) {        SubDeploymentMarker.mark(resourceRoot);      }    }  }} @TO@ IfStatement@@if (resourceRoots != null) {  for (  ResourceRoot resourceRoot : resourceRoots) {    final VirtualFile rootFile=resourceRoot.getRoot();    if (!SubDeploymentMarker.isSubDeployment(resourceRoot)) {      final VirtualFile sarDescriptor=rootFile.getChild(ServiceDeploymentParsingProcessor.SERVICE_DESCRIPTOR_PATH);      if (sarDescriptor.exists()) {        SubDeploymentMarker.mark(resourceRoot);      }    }  }} @AT@ 2159 @LENGTH@ 545
------MOV EnhancedForStatement@@for (ResourceRoot resourceRoot : resourceRoots) {  final VirtualFile rootFile=resourceRoot.getRoot();  if (!SubDeploymentMarker.isSubDeployment(resourceRoot)) {    final VirtualFile sarDescriptor=rootFile.getChild(ServiceDeploymentParsingProcessor.SERVICE_DESCRIPTOR_PATH);    if (sarDescriptor.exists()) {      SubDeploymentMarker.mark(resourceRoot);    }  }} @TO@ Block@@ThenBody:{  for (  ResourceRoot resourceRoot : resourceRoots) {    final VirtualFile rootFile=resourceRoot.getRoot();    if (!SubDeploymentMarker.isSubDeployment(resourceRoot)) {      final VirtualFile sarDescriptor=rootFile.getChild(ServiceDeploymentParsingProcessor.SERVICE_DESCRIPTOR_PATH);      if (sarDescriptor.exists()) {        SubDeploymentMarker.mark(resourceRoot);      }    }  }} @AT@ 2132 @LENGTH@ 458


UPD Block@@ThenBody:{  upper.add(0,output);} @TO@ ThenBody:{  int index=0;  for (int i=0; i < upper.size(); i++) {    ProcessorDefinition up=upper.get(i);    if (!(up instanceof OnExceptionDefinition)) {      index=i;      break;    } else {      index++;    }  }  upper.add(index,output);} @AT@ 5824 @LENGTH@ 201
---UPD ExpressionStatement@@MethodInvocation:upper.add(0,output) @TO@ MethodInvocation:upper.add(index,output) @AT@ 5990 @LENGTH@ 21
------UPD MethodInvocation@@upper.add(0,output) @TO@ upper.add(index,output) @AT@ 5990 @LENGTH@ 20
---------UPD SimpleName@@MethodName:add:[0, output] @TO@ MethodName:add:[index, output] @AT@ 5996 @LENGTH@ 14
------------DEL NumberLiteral@@0 @AT@ 6000 @LENGTH@ 1
------------INS SimpleName@@index @TO@ SimpleName@@MethodName:add:[0, output] @AT@ 6486 @LENGTH@ 5
---INS VariableDeclarationStatement@@int index=0; @TO@ Block@@ThenBody:{  upper.add(0,output);} @AT@ 6095 @LENGTH@ 14
------INS PrimitiveType@@int @TO@ VariableDeclarationStatement@@int index=0; @AT@ 6095 @LENGTH@ 3
------INS VariableDeclarationFragment@@index=0 @TO@ VariableDeclarationStatement@@int index=0; @AT@ 6099 @LENGTH@ 9
---------INS SimpleName@@index @TO@ VariableDeclarationFragment@@index=0 @AT@ 6099 @LENGTH@ 5
---------INS NumberLiteral@@0 @TO@ VariableDeclarationFragment@@index=0 @AT@ 6107 @LENGTH@ 1
---INS ForStatement@@for (int i=0; i < upper.size(); i++) {  ProcessorDefinition up=upper.get(i);  if (!(up instanceof OnExceptionDefinition)) {    index=i;    break;  } else {    index++;  }} @TO@ Block@@ThenBody:{  upper.add(0,output);} @AT@ 6126 @LENGTH@ 333
------INS VariableDeclarationExpression@@int i=0 @TO@ ForStatement@@for (int i=0; i < upper.size(); i++) {  ProcessorDefinition up=upper.get(i);  if (!(up instanceof OnExceptionDefinition)) {    index=i;    break;  } else {    index++;  }} @AT@ 6131 @LENGTH@ 9
---------INS PrimitiveType@@int @TO@ VariableDeclarationExpression@@int i=0 @AT@ 6131 @LENGTH@ 3
---------INS VariableDeclarationFragment@@i=0 @TO@ VariableDeclarationExpression@@int i=0 @AT@ 6135 @LENGTH@ 5
------------INS SimpleName@@i @TO@ VariableDeclarationFragment@@i=0 @AT@ 6135 @LENGTH@ 1
------------INS NumberLiteral@@0 @TO@ VariableDeclarationFragment@@i=0 @AT@ 6139 @LENGTH@ 1
------INS InfixExpression@@i < upper.size() @TO@ ForStatement@@for (int i=0; i < upper.size(); i++) {  ProcessorDefinition up=upper.get(i);  if (!(up instanceof OnExceptionDefinition)) {    index=i;    break;  } else {    index++;  }} @AT@ 6142 @LENGTH@ 16
---------INS SimpleName@@i @TO@ InfixExpression@@i < upper.size() @AT@ 6142 @LENGTH@ 1
---------INS Operator@@< @TO@ InfixExpression@@i < upper.size() @AT@ 6143 @LENGTH@ 1
---------INS MethodInvocation@@upper.size() @TO@ InfixExpression@@i < upper.size() @AT@ 6146 @LENGTH@ 12
------------INS SimpleName@@Name:upper @TO@ MethodInvocation@@upper.size() @AT@ 6146 @LENGTH@ 5
------------INS SimpleName@@MethodName:size:[] @TO@ MethodInvocation@@upper.size() @AT@ 6152 @LENGTH@ 6
------INS PostfixExpression@@i++ @TO@ ForStatement@@for (int i=0; i < upper.size(); i++) {  ProcessorDefinition up=upper.get(i);  if (!(up instanceof OnExceptionDefinition)) {    index=i;    break;  } else {    index++;  }} @AT@ 6160 @LENGTH@ 3
---------INS SimpleName@@i @TO@ PostfixExpression@@i++ @AT@ 6160 @LENGTH@ 1
---------INS Operator@@++ @TO@ PostfixExpression@@i++ @AT@ 6162 @LENGTH@ 2
------INS VariableDeclarationStatement@@ProcessorDefinition up=upper.get(i); @TO@ ForStatement@@for (int i=0; i < upper.size(); i++) {  ProcessorDefinition up=upper.get(i);  if (!(up instanceof OnExceptionDefinition)) {    index=i;    break;  } else {    index++;  }} @AT@ 6187 @LENGTH@ 38
---------INS SimpleType@@ProcessorDefinition @TO@ VariableDeclarationStatement@@ProcessorDefinition up=upper.get(i); @AT@ 6187 @LENGTH@ 19
---------INS VariableDeclarationFragment@@up=upper.get(i) @TO@ VariableDeclarationStatement@@ProcessorDefinition up=upper.get(i); @AT@ 6207 @LENGTH@ 17
------------INS SimpleName@@up @TO@ VariableDeclarationFragment@@up=upper.get(i) @AT@ 6207 @LENGTH@ 2
------------INS MethodInvocation@@upper.get(i) @TO@ VariableDeclarationFragment@@up=upper.get(i) @AT@ 6212 @LENGTH@ 12
---------------INS SimpleName@@Name:upper @TO@ MethodInvocation@@upper.get(i) @AT@ 6212 @LENGTH@ 5
---------------INS SimpleName@@MethodName:get:[i] @TO@ MethodInvocation@@upper.get(i) @AT@ 6218 @LENGTH@ 6
------------------INS SimpleName@@i @TO@ SimpleName@@MethodName:get:[i] @AT@ 6222 @LENGTH@ 1
------INS IfStatement@@if (!(up instanceof OnExceptionDefinition)) {  index=i;  break;} else {  index++;} @TO@ ForStatement@@for (int i=0; i < upper.size(); i++) {  ProcessorDefinition up=upper.get(i);  if (!(up instanceof OnExceptionDefinition)) {    index=i;    break;  } else {    index++;  }} @AT@ 6246 @LENGTH@ 195
---------INS PrefixExpression@@!(up instanceof OnExceptionDefinition) @TO@ IfStatement@@if (!(up instanceof OnExceptionDefinition)) {  index=i;  break;} else {  index++;} @AT@ 6250 @LENGTH@ 38
------------INS Operator@@! @TO@ PrefixExpression@@!(up instanceof OnExceptionDefinition) @AT@ 6250 @LENGTH@ 1
------------INS ParenthesizedExpression@@(up instanceof OnExceptionDefinition) @TO@ PrefixExpression@@!(up instanceof OnExceptionDefinition) @AT@ 6251 @LENGTH@ 37
---------------INS InstanceofExpression@@up instanceof OnExceptionDefinition @TO@ ParenthesizedExpression@@(up instanceof OnExceptionDefinition) @AT@ 6252 @LENGTH@ 35
------------------INS SimpleName@@up @TO@ InstanceofExpression@@up instanceof OnExceptionDefinition @AT@ 6252 @LENGTH@ 2
------------------INS Instanceof@@instanceof @TO@ InstanceofExpression@@up instanceof OnExceptionDefinition @AT@ 6255 @LENGTH@ 10
------------------INS SimpleType@@OnExceptionDefinition @TO@ InstanceofExpression@@up instanceof OnExceptionDefinition @AT@ 6266 @LENGTH@ 21
---------INS Block@@ThenBody:{  index=i;  break;} @TO@ IfStatement@@if (!(up instanceof OnExceptionDefinition)) {  index=i;  break;} else {  index++;} @AT@ 6290 @LENGTH@ 89
------------INS ExpressionStatement@@Assignment:index=i @TO@ Block@@ThenBody:{  index=i;  break;} @AT@ 6316 @LENGTH@ 10
---------------INS Assignment@@index=i @TO@ ExpressionStatement@@Assignment:index=i @AT@ 6316 @LENGTH@ 9
------------------INS SimpleName@@index @TO@ Assignment@@index=i @AT@ 6316 @LENGTH@ 5
------------------INS Operator@@= @TO@ Assignment@@index=i @AT@ 6321 @LENGTH@ 1
------------------INS SimpleName@@i @TO@ Assignment@@index=i @AT@ 6324 @LENGTH@ 1
------------INS BreakStatement@@ @TO@ Block@@ThenBody:{  index=i;  break;} @AT@ 6351 @LENGTH@ 6
---------INS Block@@ElseBody:{  index++;} @TO@ IfStatement@@if (!(up instanceof OnExceptionDefinition)) {  index=i;  break;} else {  index++;} @AT@ 6385 @LENGTH@ 56
------------INS ExpressionStatement@@PostfixExpression:index++ @TO@ Block@@ElseBody:{  index++;} @AT@ 6411 @LENGTH@ 8
---------------INS PostfixExpression@@index++ @TO@ ExpressionStatement@@PostfixExpression:index++ @AT@ 6411 @LENGTH@ 7
------------------INS SimpleName@@index @TO@ PostfixExpression@@index++ @AT@ 6411 @LENGTH@ 5
------------------INS Operator@@++ @TO@ PostfixExpression@@index++ @AT@ 6417 @LENGTH@ 2


INS MethodDeclaration@@public, String, MethodName:toString,  @TO@ TypeDeclaration@@[public, final]ModuleDependency, [Serializable] @AT@ 1465 @LENGTH@ 555
---INS Modifier@@public @TO@ MethodDeclaration@@public, String, MethodName:toString,  @AT@ 1465 @LENGTH@ 6
---INS SimpleType@@String @TO@ MethodDeclaration@@public, String, MethodName:toString,  @AT@ 1472 @LENGTH@ 6
---INS SimpleName@@MethodName:toString @TO@ MethodDeclaration@@public, String, MethodName:toString,  @AT@ 1479 @LENGTH@ 8
---INS VariableDeclarationStatement@@StringBuilder builder=new StringBuilder(); @TO@ MethodDeclaration@@public, String, MethodName:toString,  @AT@ 1500 @LENGTH@ 44
------INS SimpleType@@StringBuilder @TO@ VariableDeclarationStatement@@StringBuilder builder=new StringBuilder(); @AT@ 1500 @LENGTH@ 13
------INS VariableDeclarationFragment@@builder=new StringBuilder() @TO@ VariableDeclarationStatement@@StringBuilder builder=new StringBuilder(); @AT@ 1514 @LENGTH@ 29
---------INS SimpleName@@builder @TO@ VariableDeclarationFragment@@builder=new StringBuilder() @AT@ 1514 @LENGTH@ 7
---------INS ClassInstanceCreation@@StringBuilder[] @TO@ VariableDeclarationFragment@@builder=new StringBuilder() @AT@ 1524 @LENGTH@ 19
------------INS New@@new @TO@ ClassInstanceCreation@@StringBuilder[] @AT@ 1524 @LENGTH@ 3
------------INS SimpleType@@StringBuilder @TO@ ClassInstanceCreation@@StringBuilder[] @AT@ 1528 @LENGTH@ 13
---INS ExpressionStatement@@MethodInvocation:builder.append("ModuleDependency [") @TO@ MethodDeclaration@@public, String, MethodName:toString,  @AT@ 1553 @LENGTH@ 37
------INS MethodInvocation@@builder.append("ModuleDependency [") @TO@ ExpressionStatement@@MethodInvocation:builder.append("ModuleDependency [") @AT@ 1553 @LENGTH@ 36
---------INS SimpleName@@Name:builder @TO@ MethodInvocation@@builder.append("ModuleDependency [") @AT@ 1553 @LENGTH@ 7
---------INS SimpleName@@MethodName:append:["ModuleDependency ["] @TO@ MethodInvocation@@builder.append("ModuleDependency [") @AT@ 1561 @LENGTH@ 28
------------INS StringLiteral@@"ModuleDependency [" @TO@ SimpleName@@MethodName:append:["ModuleDependency ["] @AT@ 1568 @LENGTH@ 20
---INS IfStatement@@if (identifier != null) builder.append("identifier=").append(identifier).append(", "); @TO@ MethodDeclaration@@public, String, MethodName:toString,  @AT@ 1599 @LENGTH@ 98
------INS InfixExpression@@identifier != null @TO@ IfStatement@@if (identifier != null) builder.append("identifier=").append(identifier).append(", "); @AT@ 1603 @LENGTH@ 18
---------INS SimpleName@@identifier @TO@ InfixExpression@@identifier != null @AT@ 1603 @LENGTH@ 10
---------INS Operator@@!= @TO@ InfixExpression@@identifier != null @AT@ 1613 @LENGTH@ 2
---------INS NullLiteral@@null @TO@ InfixExpression@@identifier != null @AT@ 1617 @LENGTH@ 4
------INS Block@@ThenBody:builder.append("identifier=").append(identifier).append(", "); @TO@ IfStatement@@if (identifier != null) builder.append("identifier=").append(identifier).append(", "); @AT@ 1635 @LENGTH@ 62
---------INS ExpressionStatement@@MethodInvocation:builder.append("identifier=").append(identifier).append(", ") @TO@ Block@@ThenBody:builder.append("identifier=").append(identifier).append(", "); @AT@ 1635 @LENGTH@ 62
------------INS MethodInvocation@@builder.append("identifier=").append(identifier).append(", ") @TO@ ExpressionStatement@@MethodInvocation:builder.append("identifier=").append(identifier).append(", ") @AT@ 1635 @LENGTH@ 61
---------------INS MethodInvocation@@MethodName:append:[identifier] @TO@ MethodInvocation@@builder.append("identifier=").append(identifier).append(", ") @AT@ 1635 @LENGTH@ 48
------------------INS SimpleName@@identifier @TO@ MethodInvocation@@MethodName:append:[identifier] @AT@ 1672 @LENGTH@ 10
---------------INS MethodInvocation@@MethodName:append:["identifier="] @TO@ MethodInvocation@@builder.append("identifier=").append(identifier).append(", ") @AT@ 1635 @LENGTH@ 29
------------------INS StringLiteral@@"identifier=" @TO@ MethodInvocation@@MethodName:append:["identifier="] @AT@ 1650 @LENGTH@ 13
---------------INS SimpleName@@Name:builder @TO@ MethodInvocation@@builder.append("identifier=").append(identifier).append(", ") @AT@ 1635 @LENGTH@ 7
---------------INS SimpleName@@MethodName:append:[", "] @TO@ MethodInvocation@@builder.append("identifier=").append(identifier).append(", ") @AT@ 1684 @LENGTH@ 12
------------------INS StringLiteral@@", " @TO@ SimpleName@@MethodName:append:[", "] @AT@ 1691 @LENGTH@ 4
---INS IfStatement@@if (moduleLoader != null) builder.append("moduleLoader=").append(moduleLoader).append(", "); @TO@ MethodDeclaration@@public, String, MethodName:toString,  @AT@ 1706 @LENGTH@ 104
------INS InfixExpression@@moduleLoader != null @TO@ IfStatement@@if (moduleLoader != null) builder.append("moduleLoader=").append(moduleLoader).append(", "); @AT@ 1710 @LENGTH@ 20
---------INS SimpleName@@moduleLoader @TO@ InfixExpression@@moduleLoader != null @AT@ 1710 @LENGTH@ 12
---------INS Operator@@!= @TO@ InfixExpression@@moduleLoader != null @AT@ 1722 @LENGTH@ 2
---------INS NullLiteral@@null @TO@ InfixExpression@@moduleLoader != null @AT@ 1726 @LENGTH@ 4
------INS Block@@ThenBody:builder.append("moduleLoader=").append(moduleLoader).append(", "); @TO@ IfStatement@@if (moduleLoader != null) builder.append("moduleLoader=").append(moduleLoader).append(", "); @AT@ 1744 @LENGTH@ 66
---------INS ExpressionStatement@@MethodInvocation:builder.append("moduleLoader=").append(moduleLoader).append(", ") @TO@ Block@@ThenBody:builder.append("moduleLoader=").append(moduleLoader).append(", "); @AT@ 1744 @LENGTH@ 66
------------INS MethodInvocation@@builder.append("moduleLoader=").append(moduleLoader).append(", ") @TO@ ExpressionStatement@@MethodInvocation:builder.append("moduleLoader=").append(moduleLoader).append(", ") @AT@ 1744 @LENGTH@ 65
---------------INS MethodInvocation@@MethodName:append:[moduleLoader] @TO@ MethodInvocation@@builder.append("moduleLoader=").append(moduleLoader).append(", ") @AT@ 1744 @LENGTH@ 52
------------------INS SimpleName@@moduleLoader @TO@ MethodInvocation@@MethodName:append:[moduleLoader] @AT@ 1783 @LENGTH@ 12
---------------INS MethodInvocation@@MethodName:append:["moduleLoader="] @TO@ MethodInvocation@@builder.append("moduleLoader=").append(moduleLoader).append(", ") @AT@ 1744 @LENGTH@ 31
------------------INS StringLiteral@@"moduleLoader=" @TO@ MethodInvocation@@MethodName:append:["moduleLoader="] @AT@ 1759 @LENGTH@ 15
---------------INS SimpleName@@Name:builder @TO@ MethodInvocation@@builder.append("moduleLoader=").append(moduleLoader).append(", ") @AT@ 1744 @LENGTH@ 7
---------------INS SimpleName@@MethodName:append:[", "] @TO@ MethodInvocation@@builder.append("moduleLoader=").append(moduleLoader).append(", ") @AT@ 1797 @LENGTH@ 12
------------------INS StringLiteral@@", " @TO@ SimpleName@@MethodName:append:[", "] @AT@ 1804 @LENGTH@ 4
---INS ExpressionStatement@@MethodInvocation:builder.append("export=").append(export).append(", optional=").append(optional).append(", importServices=").append(importServices).append("]") @TO@ MethodDeclaration@@public, String, MethodName:toString,  @AT@ 1819 @LENGTH@ 160
------INS MethodInvocation@@builder.append("export=").append(export).append(", optional=").append(optional).append(", importServices=").append(importServices).append("]") @TO@ ExpressionStatement@@MethodInvocation:builder.append("export=").append(export).append(", optional=").append(optional).append(", importServices=").append(importServices).append("]") @AT@ 1819 @LENGTH@ 159
---------INS MethodInvocation@@MethodName:append:[importServices] @TO@ MethodInvocation@@builder.append("export=").append(export).append(", optional=").append(optional).append(", importServices=").append(importServices).append("]") @AT@ 1819 @LENGTH@ 147
------------INS SimpleName@@importServices @TO@ MethodInvocation@@MethodName:append:[importServices] @AT@ 1951 @LENGTH@ 14
---------INS MethodInvocation@@MethodName:append:[", importServices="] @TO@ MethodInvocation@@builder.append("export=").append(export).append(", optional=").append(optional).append(", importServices=").append(importServices).append("]") @AT@ 1819 @LENGTH@ 107
------------INS StringLiteral@@", importServices=" @TO@ MethodInvocation@@MethodName:append:[", importServices="] @AT@ 1906 @LENGTH@ 19
---------INS MethodInvocation@@MethodName:append:[optional] @TO@ MethodInvocation@@builder.append("export=").append(export).append(", optional=").append(optional).append(", importServices=").append(importServices).append("]") @AT@ 1819 @LENGTH@ 79
------------INS SimpleName@@optional @TO@ MethodInvocation@@MethodName:append:[optional] @AT@ 1889 @LENGTH@ 8
---------INS MethodInvocation@@MethodName:append:[", optional="] @TO@ MethodInvocation@@builder.append("export=").append(export).append(", optional=").append(optional).append(", importServices=").append(importServices).append("]") @AT@ 1819 @LENGTH@ 62
------------INS StringLiteral@@", optional=" @TO@ MethodInvocation@@MethodName:append:[", optional="] @AT@ 1867 @LENGTH@ 13
---------INS MethodInvocation@@MethodName:append:[export] @TO@ MethodInvocation@@builder.append("export=").append(export).append(", optional=").append(optional).append(", importServices=").append(importServices).append("]") @AT@ 1819 @LENGTH@ 40
------------INS SimpleName@@export @TO@ MethodInvocation@@MethodName:append:[export] @AT@ 1852 @LENGTH@ 6
---------INS MethodInvocation@@MethodName:append:["export="] @TO@ MethodInvocation@@builder.append("export=").append(export).append(", optional=").append(optional).append(", importServices=").append(importServices).append("]") @AT@ 1819 @LENGTH@ 25
------------INS StringLiteral@@"export=" @TO@ MethodInvocation@@MethodName:append:["export="] @AT@ 1834 @LENGTH@ 9
---------INS SimpleName@@Name:builder @TO@ MethodInvocation@@builder.append("export=").append(export).append(", optional=").append(optional).append(", importServices=").append(importServices).append("]") @AT@ 1819 @LENGTH@ 7
---------INS SimpleName@@MethodName:append:["]"] @TO@ MethodInvocation@@builder.append("export=").append(export).append(", optional=").append(optional).append(", importServices=").append(importServices).append("]") @AT@ 1967 @LENGTH@ 11
------------INS StringLiteral@@"]" @TO@ SimpleName@@MethodName:append:["]"] @AT@ 1974 @LENGTH@ 3
---INS ReturnStatement@@MethodInvocation:builder.toString() @TO@ MethodDeclaration@@public, String, MethodName:toString,  @AT@ 1988 @LENGTH@ 26
------INS MethodInvocation@@builder.toString() @TO@ ReturnStatement@@MethodInvocation:builder.toString() @AT@ 1995 @LENGTH@ 18
---------INS SimpleName@@Name:builder @TO@ MethodInvocation@@builder.toString() @AT@ 1995 @LENGTH@ 7
---------INS SimpleName@@MethodName:toString:[] @TO@ MethodInvocation@@builder.toString() @AT@ 2003 @LENGTH@ 10


UPD MethodDeclaration@@PersistentProperty<?>, MethodName:createPersistentProperty, Field field, PropertyDescriptor descriptor, MappingConfigurationException,  @TO@ PersistentProperty<T>, T, MethodName:createPersistentProperty, Field field, PropertyDescriptor descriptor, Class<T> type, MappingConfigurationException,  @AT@ 1160 @LENGTH@ 106
---UPD ParameterizedType@@PersistentProperty<?> @TO@ PersistentProperty<T> @AT@ 1138 @LENGTH@ 21
------DEL WildcardType@@? @AT@ 1157 @LENGTH@ 1
------INS SimpleType@@T @TO@ ParameterizedType@@PersistentProperty<?> @AT@ 1161 @LENGTH@ 1
---INS SingleVariableDeclaration@@Class<T> type @TO@ MethodDeclaration@@PersistentProperty<?>, MethodName:createPersistentProperty, Field field, PropertyDescriptor descriptor, MappingConfigurationException,  @AT@ 1233 @LENGTH@ 13
------INS ParameterizedType@@Class<T> @TO@ SingleVariableDeclaration@@Class<T> type @AT@ 1233 @LENGTH@ 8
---------INS SimpleType@@Class @TO@ ParameterizedType@@Class<T> @AT@ 1233 @LENGTH@ 5
---------INS SimpleType@@T @TO@ ParameterizedType@@Class<T> @AT@ 1239 @LENGTH@ 1
------INS SimpleName@@type @TO@ SingleVariableDeclaration@@Class<T> type @AT@ 1242 @LENGTH@ 4


INS MethodDeclaration@@public, void, MethodName:testDbRef,  @TO@ TypeDeclaration@@[public]MappingTests,  @AT@ 9787 @LENGTH@ 369
---INS Modifier@@public @TO@ MethodDeclaration@@public, void, MethodName:testDbRef,  @AT@ 9787 @LENGTH@ 6
---INS PrimitiveType@@void @TO@ MethodDeclaration@@public, void, MethodName:testDbRef,  @AT@ 9794 @LENGTH@ 4
---INS SimpleName@@MethodName:testDbRef @TO@ MethodDeclaration@@public, void, MethodName:testDbRef,  @AT@ 9799 @LENGTH@ 9
---INS VariableDeclarationStatement@@GeoLocation geo=new GeoLocation(new double[]{37.0625,-95.677068}); @TO@ MethodDeclaration@@public, void, MethodName:testDbRef,  @AT@ 9815 @LENGTH@ 69
------INS SimpleType@@GeoLocation @TO@ VariableDeclarationStatement@@GeoLocation geo=new GeoLocation(new double[]{37.0625,-95.677068}); @AT@ 9815 @LENGTH@ 11
------INS VariableDeclarationFragment@@geo=new GeoLocation(new double[]{37.0625,-95.677068}) @TO@ VariableDeclarationStatement@@GeoLocation geo=new GeoLocation(new double[]{37.0625,-95.677068}); @AT@ 9827 @LENGTH@ 56
---------INS SimpleName@@geo @TO@ VariableDeclarationFragment@@geo=new GeoLocation(new double[]{37.0625,-95.677068}) @AT@ 9827 @LENGTH@ 3
---------INS ClassInstanceCreation@@GeoLocation[new double[]{37.0625,-95.677068}] @TO@ VariableDeclarationFragment@@geo=new GeoLocation(new double[]{37.0625,-95.677068}) @AT@ 9833 @LENGTH@ 50
------------INS New@@new @TO@ ClassInstanceCreation@@GeoLocation[new double[]{37.0625,-95.677068}] @AT@ 9833 @LENGTH@ 3
------------INS SimpleType@@GeoLocation @TO@ ClassInstanceCreation@@GeoLocation[new double[]{37.0625,-95.677068}] @AT@ 9837 @LENGTH@ 11
------------INS ArrayCreation@@new double[]{37.0625,-95.677068} @TO@ ClassInstanceCreation@@GeoLocation[new double[]{37.0625,-95.677068}] @AT@ 9849 @LENGTH@ 33
---------------INS ArrayType@@double[] @TO@ ArrayCreation@@new double[]{37.0625,-95.677068} @AT@ 9853 @LENGTH@ 8
------------------INS PrimitiveType@@double @TO@ ArrayType@@double[] @AT@ 9853 @LENGTH@ 6
---------------INS ArrayInitializer@@{37.0625,-95.677068} @TO@ ArrayCreation@@new double[]{37.0625,-95.677068} @AT@ 9861 @LENGTH@ 21
------------------INS NumberLiteral@@37.0625 @TO@ ArrayInitializer@@{37.0625,-95.677068} @AT@ 9862 @LENGTH@ 7
------------------INS PrefixExpression@@-95.677068 @TO@ ArrayInitializer@@{37.0625,-95.677068} @AT@ 9871 @LENGTH@ 10
---------------------INS Operator@@- @TO@ PrefixExpression@@-95.677068 @AT@ 9871 @LENGTH@ 1
---------------------INS NumberLiteral@@95.677068 @TO@ PrefixExpression@@-95.677068 @AT@ 9872 @LENGTH@ 9
---INS ExpressionStatement@@MethodInvocation:template.insert(geo) @TO@ MethodDeclaration@@public, void, MethodName:testDbRef,  @AT@ 9887 @LENGTH@ 21
------INS MethodInvocation@@template.insert(geo) @TO@ ExpressionStatement@@MethodInvocation:template.insert(geo) @AT@ 9887 @LENGTH@ 20
---------INS SimpleName@@Name:template @TO@ MethodInvocation@@template.insert(geo) @AT@ 9887 @LENGTH@ 8
---------INS SimpleName@@MethodName:insert:[geo] @TO@ MethodInvocation@@template.insert(geo) @AT@ 9896 @LENGTH@ 11
------------INS SimpleName@@geo @TO@ SimpleName@@MethodName:insert:[geo] @AT@ 9903 @LENGTH@ 3
---INS VariableDeclarationStatement@@PersonWithDbRef p=new PersonWithDbRef(4321,"With","DBRef",geo); @TO@ MethodDeclaration@@public, void, MethodName:testDbRef,  @AT@ 9912 @LENGTH@ 68
------INS SimpleType@@PersonWithDbRef @TO@ VariableDeclarationStatement@@PersonWithDbRef p=new PersonWithDbRef(4321,"With","DBRef",geo); @AT@ 9912 @LENGTH@ 15
------INS VariableDeclarationFragment@@p=new PersonWithDbRef(4321,"With","DBRef",geo) @TO@ VariableDeclarationStatement@@PersonWithDbRef p=new PersonWithDbRef(4321,"With","DBRef",geo); @AT@ 9928 @LENGTH@ 51
---------INS SimpleName@@p @TO@ VariableDeclarationFragment@@p=new PersonWithDbRef(4321,"With","DBRef",geo) @AT@ 9928 @LENGTH@ 1
---------INS ClassInstanceCreation@@PersonWithDbRef[4321, "With", "DBRef", geo] @TO@ VariableDeclarationFragment@@p=new PersonWithDbRef(4321,"With","DBRef",geo) @AT@ 9932 @LENGTH@ 47
------------INS New@@new @TO@ ClassInstanceCreation@@PersonWithDbRef[4321, "With", "DBRef", geo] @AT@ 9932 @LENGTH@ 3
------------INS SimpleType@@PersonWithDbRef @TO@ ClassInstanceCreation@@PersonWithDbRef[4321, "With", "DBRef", geo] @AT@ 9936 @LENGTH@ 15
------------INS NumberLiteral@@4321 @TO@ ClassInstanceCreation@@PersonWithDbRef[4321, "With", "DBRef", geo] @AT@ 9952 @LENGTH@ 4
------------INS StringLiteral@@"With" @TO@ ClassInstanceCreation@@PersonWithDbRef[4321, "With", "DBRef", geo] @AT@ 9958 @LENGTH@ 6
------------INS StringLiteral@@"DBRef" @TO@ ClassInstanceCreation@@PersonWithDbRef[4321, "With", "DBRef", geo] @AT@ 9966 @LENGTH@ 7
------------INS SimpleName@@geo @TO@ ClassInstanceCreation@@PersonWithDbRef[4321, "With", "DBRef", geo] @AT@ 9975 @LENGTH@ 3
---INS ExpressionStatement@@MethodInvocation:template.insert(p) @TO@ MethodDeclaration@@public, void, MethodName:testDbRef,  @AT@ 9983 @LENGTH@ 19
------INS MethodInvocation@@template.insert(p) @TO@ ExpressionStatement@@MethodInvocation:template.insert(p) @AT@ 9983 @LENGTH@ 18
---------INS SimpleName@@Name:template @TO@ MethodInvocation@@template.insert(p) @AT@ 9983 @LENGTH@ 8
---------INS SimpleName@@MethodName:insert:[p] @TO@ MethodInvocation@@template.insert(p) @AT@ 9992 @LENGTH@ 9
------------INS SimpleName@@p @TO@ SimpleName@@MethodName:insert:[p] @AT@ 9999 @LENGTH@ 1
---INS VariableDeclarationStatement@@List<PersonWithDbRef> result=template.find(new Query(Criteria.where("ssn").is(4321)),PersonWithDbRef.class); @TO@ MethodDeclaration@@public, void, MethodName:testDbRef,  @AT@ 10006 @LENGTH@ 111
------INS ParameterizedType@@List<PersonWithDbRef> @TO@ VariableDeclarationStatement@@List<PersonWithDbRef> result=template.find(new Query(Criteria.where("ssn").is(4321)),PersonWithDbRef.class); @AT@ 10006 @LENGTH@ 21
---------INS SimpleType@@List @TO@ ParameterizedType@@List<PersonWithDbRef> @AT@ 10006 @LENGTH@ 4
---------INS SimpleType@@PersonWithDbRef @TO@ ParameterizedType@@List<PersonWithDbRef> @AT@ 10011 @LENGTH@ 15
------INS VariableDeclarationFragment@@result=template.find(new Query(Criteria.where("ssn").is(4321)),PersonWithDbRef.class) @TO@ VariableDeclarationStatement@@List<PersonWithDbRef> result=template.find(new Query(Criteria.where("ssn").is(4321)),PersonWithDbRef.class); @AT@ 10028 @LENGTH@ 88
---------INS SimpleName@@result @TO@ VariableDeclarationFragment@@result=template.find(new Query(Criteria.where("ssn").is(4321)),PersonWithDbRef.class) @AT@ 10028 @LENGTH@ 6
---------INS MethodInvocation@@template.find(new Query(Criteria.where("ssn").is(4321)),PersonWithDbRef.class) @TO@ VariableDeclarationFragment@@result=template.find(new Query(Criteria.where("ssn").is(4321)),PersonWithDbRef.class) @AT@ 10037 @LENGTH@ 79
------------INS SimpleName@@Name:template @TO@ MethodInvocation@@template.find(new Query(Criteria.where("ssn").is(4321)),PersonWithDbRef.class) @AT@ 10037 @LENGTH@ 8
------------INS SimpleName@@MethodName:find:[new Query(Criteria.where("ssn").is(4321)), PersonWithDbRef.class] @TO@ MethodInvocation@@template.find(new Query(Criteria.where("ssn").is(4321)),PersonWithDbRef.class) @AT@ 10046 @LENGTH@ 70
---------------INS ClassInstanceCreation@@Query[Criteria.where("ssn").is(4321)] @TO@ SimpleName@@MethodName:find:[new Query(Criteria.where("ssn").is(4321)), PersonWithDbRef.class] @AT@ 10051 @LENGTH@ 41
------------------INS New@@new @TO@ ClassInstanceCreation@@Query[Criteria.where("ssn").is(4321)] @AT@ 10051 @LENGTH@ 3
------------------INS SimpleType@@Query @TO@ ClassInstanceCreation@@Query[Criteria.where("ssn").is(4321)] @AT@ 10055 @LENGTH@ 5
------------------INS MethodInvocation@@Criteria.where("ssn").is(4321) @TO@ ClassInstanceCreation@@Query[Criteria.where("ssn").is(4321)] @AT@ 10061 @LENGTH@ 30
---------------------INS MethodInvocation@@MethodName:where:["ssn"] @TO@ MethodInvocation@@Criteria.where("ssn").is(4321) @AT@ 10061 @LENGTH@ 21
------------------------INS StringLiteral@@"ssn" @TO@ MethodInvocation@@MethodName:where:["ssn"] @AT@ 10076 @LENGTH@ 5
---------------------INS SimpleName@@Name:Criteria @TO@ MethodInvocation@@Criteria.where("ssn").is(4321) @AT@ 10061 @LENGTH@ 8
---------------------INS SimpleName@@MethodName:is:[4321] @TO@ MethodInvocation@@Criteria.where("ssn").is(4321) @AT@ 10083 @LENGTH@ 8
------------------------INS NumberLiteral@@4321 @TO@ SimpleName@@MethodName:is:[4321] @AT@ 10086 @LENGTH@ 4
---------------INS TypeLiteral@@PersonWithDbRef.class @TO@ SimpleName@@MethodName:find:[new Query(Criteria.where("ssn").is(4321)), PersonWithDbRef.class] @AT@ 10094 @LENGTH@ 21
---INS ExpressionStatement@@MethodInvocation:assertThat(result.size(),is(1)) @TO@ MethodDeclaration@@public, void, MethodName:testDbRef,  @AT@ 10120 @LENGTH@ 33
------INS MethodInvocation@@assertThat(result.size(),is(1)) @TO@ ExpressionStatement@@MethodInvocation:assertThat(result.size(),is(1)) @AT@ 10120 @LENGTH@ 32
---------INS SimpleName@@MethodName:assertThat:[result.size(), is(1)] @TO@ MethodInvocation@@assertThat(result.size(),is(1)) @AT@ 10120 @LENGTH@ 32
------------INS MethodInvocation@@result.size() @TO@ SimpleName@@MethodName:assertThat:[result.size(), is(1)] @AT@ 10131 @LENGTH@ 13
---------------INS SimpleName@@Name:result @TO@ MethodInvocation@@result.size() @AT@ 10131 @LENGTH@ 6
---------------INS SimpleName@@MethodName:size:[] @TO@ MethodInvocation@@result.size() @AT@ 10138 @LENGTH@ 6
------------INS MethodInvocation@@is(1) @TO@ SimpleName@@MethodName:assertThat:[result.size(), is(1)] @AT@ 10146 @LENGTH@ 5
---------------INS SimpleName@@MethodName:is:[1] @TO@ MethodInvocation@@is(1) @AT@ 10146 @LENGTH@ 5
------------------INS NumberLiteral@@1 @TO@ SimpleName@@MethodName:is:[1] @AT@ 10149 @LENGTH@ 1


UPD EnhancedForStatement@@for (EnvironmentEntryMetaData envEntry : envEntries) {  final String name;  if (envEntry.getName().startsWith("java:")) {    name=envEntry.getName();  } else {    name=environment.getDefaultContext() + envEntry.getEnvEntryName();  }  Class<?> classType=null;  if (envEntry.getType() != null) {    try {      classType=this.loadClass(envEntry.getType(),classLoader);    } catch (    ClassNotFoundException e) {      throw new DeploymentUnitProcessingException("Could not load " + envEntry.getType() + " referenced in env-entry ",e);    }  }  final String value=envEntry.getValue();  if (isEmpty(value)) {    continue;  }  LookupInjectionSource injectionSource=new LookupInjectionSource(name);  classType=processInjectionTargets(moduleDescription,injectionSource,classLoader,deploymentReflectionIndex,envEntry,classType);  if (classType == null) {    throw new DeploymentUnitProcessingException("Could not determine type for <env-entry> " + name + " please specify the <env-entry-type>.");  }  final String type=classType.getName();  BindingConfiguration bindingConfiguration=null;  if (type.equals(String.class.getName())) {    bindingConfiguration=new BindingConfiguration(name,new EnvEntryInjectionSource(value));  } else   if (type.equals(Integer.class.getName()) || type.equals("int")) {    bindingConfiguration=new BindingConfiguration(name,new EnvEntryInjectionSource(Integer.valueOf(value)));  } else   if (type.equals(Short.class.getName()) || type.equals("short")) {    bindingConfiguration=new BindingConfiguration(name,new EnvEntryInjectionSource(Short.valueOf(value)));  } else   if (type.equals(Long.class.getName()) || type.equals("long")) {    bindingConfiguration=new BindingConfiguration(name,new EnvEntryInjectionSource(Long.valueOf(value)));  } else   if (type.equals(Byte.class.getName()) || type.equals("byte")) {    bindingConfiguration=new BindingConfiguration(name,new EnvEntryInjectionSource(Byte.valueOf(value)));  } else   if (type.equals(Double.class.getName()) || type.equals("double")) {    bindingConfiguration=new BindingConfiguration(name,new EnvEntryInjectionSource(Double.valueOf(value)));  } else   if (type.equals(Float.class.getName()) || type.equals("float")) {    bindingConfiguration=new BindingConfiguration(name,new EnvEntryInjectionSource(Float.valueOf(value)));  } else   if (type.equals(Boolean.class.getName()) || type.equals("boolean")) {    bindingConfiguration=new BindingConfiguration(name,new EnvEntryInjectionSource(Boolean.valueOf(value)));  } else   if (type.equals(Character.class.getName()) || type.equals("char")) {    if (value.length() != 1) {      throw new DeploymentUnitProcessingException("env-entry of type java.lang.Character is not exactly one character long " + value);    }    bindingConfiguration=new BindingConfiguration(name,new EnvEntryInjectionSource(value.charAt(0)));  } else   if (type.equals(Class.class.getName())) {    try {      bindingConfiguration=new BindingConfiguration(name,new EnvEntryInjectionSource(classLoader.loadClass(value)));    } catch (    ClassNotFoundException e) {      throw new DeploymentUnitProcessingException("Could not load class " + value + " specified in env-entry");    }  } else   if (classType.isEnum() || (classType.getEnclosingClass() != null && classType.getEnclosingClass().isEnum())) {    bindingConfiguration=new BindingConfiguration(name,new EnvEntryInjectionSource(Enum.valueOf((Class)classType,value)));  } else {    throw new DeploymentUnitProcessingException("Unkown env-entry type " + type);  }  bindings.add(bindingConfiguration);} @TO@ for (EnvironmentEntryMetaData envEntry : envEntries) {  final String name;  if (envEntry.getName().startsWith("java:")) {    name=envEntry.getName();  } else {    name=environment.getDefaultContext() + envEntry.getEnvEntryName();  }  Class<?> classType=null;  if (envEntry.getType() != null) {    try {      classType=this.loadClass(envEntry.getType(),classLoader);    } catch (    ClassNotFoundException e) {      throw new DeploymentUnitProcessingException("Could not load " + envEntry.getType() + " referenced in env-entry ",e);    }  }  final String value=envEntry.getValue();  final String lookup=envEntry.getLookupName();  if (!isEmpty(value) && !isEmpty(lookup)) {    throw new DeploymentUnitProcessingException("Cannot specify both a <env-entry-value> and a <lookup-name> in an environemnt entry.");  } else   if (isEmpty(lookup) && isEmpty(value)) {    continue;  }  LookupInjectionSource injectionSource=new LookupInjectionSource(name);  classType=processInjectionTargets(moduleDescription,injectionSource,classLoader,deploymentReflectionIndex,envEntry,classType);  if (classType == null) {    throw new DeploymentUnitProcessingException("Could not determine type for <env-entry> " + name + " please specify the <env-entry-type>.");  }  final String type=classType.getName();  BindingConfiguration bindingConfiguration=null;  if (!isEmpty(lookup)) {    bindingConfiguration=new BindingConfiguration(name,new LookupInjectionSource(lookup));  } else   if (type.equals(String.class.getName())) {    bindingConfiguration=new BindingConfiguration(name,new EnvEntryInjectionSource(value));  } else   if (type.equals(Integer.class.getName()) || type.equals("int")) {    bindingConfiguration=new BindingConfiguration(name,new EnvEntryInjectionSource(Integer.valueOf(value)));  } else   if (type.equals(Short.class.getName()) || type.equals("short")) {    bindingConfiguration=new BindingConfiguration(name,new EnvEntryInjectionSource(Short.valueOf(value)));  } else   if (type.equals(Long.class.getName()) || type.equals("long")) {    bindingConfiguration=new BindingConfiguration(name,new EnvEntryInjectionSource(Long.valueOf(value)));  } else   if (type.equals(Byte.class.getName()) || type.equals("byte")) {    bindingConfiguration=new BindingConfiguration(name,new EnvEntryInjectionSource(Byte.valueOf(value)));  } else   if (type.equals(Double.class.getName()) || type.equals("double")) {    bindingConfiguration=new BindingConfiguration(name,new EnvEntryInjectionSource(Double.valueOf(value)));  } else   if (type.equals(Float.class.getName()) || type.equals("float")) {    bindingConfiguration=new BindingConfiguration(name,new EnvEntryInjectionSource(Float.valueOf(value)));  } else   if (type.equals(Boolean.class.getName()) || type.equals("boolean")) {    bindingConfiguration=new BindingConfiguration(name,new EnvEntryInjectionSource(Boolean.valueOf(value)));  } else   if (type.equals(Character.class.getName()) || type.equals("char")) {    if (value.length() != 1) {      throw new DeploymentUnitProcessingException("env-entry of type java.lang.Character is not exactly one character long " + value);    }    bindingConfiguration=new BindingConfiguration(name,new EnvEntryInjectionSource(value.charAt(0)));  } else   if (type.equals(Class.class.getName())) {    try {      bindingConfiguration=new BindingConfiguration(name,new EnvEntryInjectionSource(classLoader.loadClass(value)));    } catch (    ClassNotFoundException e) {      throw new DeploymentUnitProcessingException("Could not load class " + value + " specified in env-entry");    }  } else   if (classType.isEnum() || (classType.getEnclosingClass() != null && classType.getEnclosingClass().isEnum())) {    bindingConfiguration=new BindingConfiguration(name,new EnvEntryInjectionSource(Enum.valueOf((Class)classType,value)));  } else {    throw new DeploymentUnitProcessingException("Unkown env-entry type " + type);  }  bindings.add(bindingConfiguration);} @AT@ 8665 @LENGTH@ 4573
---INS VariableDeclarationStatement@@final String lookup=envEntry.getLookupName(); @TO@ EnhancedForStatement@@for (EnvironmentEntryMetaData envEntry : envEntries) {  final String name;  if (envEntry.getName().startsWith("java:")) {    name=envEntry.getName();  } else {    name=environment.getDefaultContext() + envEntry.getEnvEntryName();  }  Class<?> classType=null;  if (envEntry.getType() != null) {    try {      classType=this.loadClass(envEntry.getType(),classLoader);    } catch (    ClassNotFoundException e) {      throw new DeploymentUnitProcessingException("Could not load " + envEntry.getType() + " referenced in env-entry ",e);    }  }  final String value=envEntry.getValue();  if (isEmpty(value)) {    continue;  }  LookupInjectionSource injectionSource=new LookupInjectionSource(name);  classType=processInjectionTargets(moduleDescription,injectionSource,classLoader,deploymentReflectionIndex,envEntry,classType);  if (classType == null) {    throw new DeploymentUnitProcessingException("Could not determine type for <env-entry> " + name + " please specify the <env-entry-type>.");  }  final String type=classType.getName();  BindingConfiguration bindingConfiguration=null;  if (type.equals(String.class.getName())) {    bindingConfiguration=new BindingConfiguration(name,new EnvEntryInjectionSource(value));  } else   if (type.equals(Integer.class.getName()) || type.equals("int")) {    bindingConfiguration=new BindingConfiguration(name,new EnvEntryInjectionSource(Integer.valueOf(value)));  } else   if (type.equals(Short.class.getName()) || type.equals("short")) {    bindingConfiguration=new BindingConfiguration(name,new EnvEntryInjectionSource(Short.valueOf(value)));  } else   if (type.equals(Long.class.getName()) || type.equals("long")) {    bindingConfiguration=new BindingConfiguration(name,new EnvEntryInjectionSource(Long.valueOf(value)));  } else   if (type.equals(Byte.class.getName()) || type.equals("byte")) {    bindingConfiguration=new BindingConfiguration(name,new EnvEntryInjectionSource(Byte.valueOf(value)));  } else   if (type.equals(Double.class.getName()) || type.equals("double")) {    bindingConfiguration=new BindingConfiguration(name,new EnvEntryInjectionSource(Double.valueOf(value)));  } else   if (type.equals(Float.class.getName()) || type.equals("float")) {    bindingConfiguration=new BindingConfiguration(name,new EnvEntryInjectionSource(Float.valueOf(value)));  } else   if (type.equals(Boolean.class.getName()) || type.equals("boolean")) {    bindingConfiguration=new BindingConfiguration(name,new EnvEntryInjectionSource(Boolean.valueOf(value)));  } else   if (type.equals(Character.class.getName()) || type.equals("char")) {    if (value.length() != 1) {      throw new DeploymentUnitProcessingException("env-entry of type java.lang.Character is not exactly one character long " + value);    }    bindingConfiguration=new BindingConfiguration(name,new EnvEntryInjectionSource(value.charAt(0)));  } else   if (type.equals(Class.class.getName())) {    try {      bindingConfiguration=new BindingConfiguration(name,new EnvEntryInjectionSource(classLoader.loadClass(value)));    } catch (    ClassNotFoundException e) {      throw new DeploymentUnitProcessingException("Could not load class " + value + " specified in env-entry");    }  } else   if (classType.isEnum() || (classType.getEnclosingClass() != null && classType.getEnclosingClass().isEnum())) {    bindingConfiguration=new BindingConfiguration(name,new EnvEntryInjectionSource(Enum.valueOf((Class)classType,value)));  } else {    throw new DeploymentUnitProcessingException("Unkown env-entry type " + type);  }  bindings.add(bindingConfiguration);} @AT@ 9450 @LENGTH@ 47
------INS Modifier@@final @TO@ VariableDeclarationStatement@@final String lookup=envEntry.getLookupName(); @AT@ 9450 @LENGTH@ 5
------INS SimpleType@@String @TO@ VariableDeclarationStatement@@final String lookup=envEntry.getLookupName(); @AT@ 9456 @LENGTH@ 6
------INS VariableDeclarationFragment@@lookup=envEntry.getLookupName() @TO@ VariableDeclarationStatement@@final String lookup=envEntry.getLookupName(); @AT@ 9463 @LENGTH@ 33
---------INS SimpleName@@lookup @TO@ VariableDeclarationFragment@@lookup=envEntry.getLookupName() @AT@ 9463 @LENGTH@ 6
---------INS MethodInvocation@@envEntry.getLookupName() @TO@ VariableDeclarationFragment@@lookup=envEntry.getLookupName() @AT@ 9472 @LENGTH@ 24
------------INS SimpleName@@Name:envEntry @TO@ MethodInvocation@@envEntry.getLookupName() @AT@ 9472 @LENGTH@ 8
------------INS SimpleName@@MethodName:getLookupName:[] @TO@ MethodInvocation@@envEntry.getLookupName() @AT@ 9481 @LENGTH@ 15
---DEL IfStatement@@if (isEmpty(value)) {  continue;} @AT@ 9451 @LENGTH@ 241
---INS IfStatement@@if (!isEmpty(value) && !isEmpty(lookup)) {  throw new DeploymentUnitProcessingException("Cannot specify both a <env-entry-value> and a <lookup-name> in an environemnt entry.");} else if (isEmpty(lookup) && isEmpty(value)) {  continue;} @TO@ EnhancedForStatement@@for (EnvironmentEntryMetaData envEntry : envEntries) {  final String name;  if (envEntry.getName().startsWith("java:")) {    name=envEntry.getName();  } else {    name=environment.getDefaultContext() + envEntry.getEnvEntryName();  }  Class<?> classType=null;  if (envEntry.getType() != null) {    try {      classType=this.loadClass(envEntry.getType(),classLoader);    } catch (    ClassNotFoundException e) {      throw new DeploymentUnitProcessingException("Could not load " + envEntry.getType() + " referenced in env-entry ",e);    }  }  final String value=envEntry.getValue();  if (isEmpty(value)) {    continue;  }  LookupInjectionSource injectionSource=new LookupInjectionSource(name);  classType=processInjectionTargets(moduleDescription,injectionSource,classLoader,deploymentReflectionIndex,envEntry,classType);  if (classType == null) {    throw new DeploymentUnitProcessingException("Could not determine type for <env-entry> " + name + " please specify the <env-entry-type>.");  }  final String type=classType.getName();  BindingConfiguration bindingConfiguration=null;  if (type.equals(String.class.getName())) {    bindingConfiguration=new BindingConfiguration(name,new EnvEntryInjectionSource(value));  } else   if (type.equals(Integer.class.getName()) || type.equals("int")) {    bindingConfiguration=new BindingConfiguration(name,new EnvEntryInjectionSource(Integer.valueOf(value)));  } else   if (type.equals(Short.class.getName()) || type.equals("short")) {    bindingConfiguration=new BindingConfiguration(name,new EnvEntryInjectionSource(Short.valueOf(value)));  } else   if (type.equals(Long.class.getName()) || type.equals("long")) {    bindingConfiguration=new BindingConfiguration(name,new EnvEntryInjectionSource(Long.valueOf(value)));  } else   if (type.equals(Byte.class.getName()) || type.equals("byte")) {    bindingConfiguration=new BindingConfiguration(name,new EnvEntryInjectionSource(Byte.valueOf(value)));  } else   if (type.equals(Double.class.getName()) || type.equals("double")) {    bindingConfiguration=new BindingConfiguration(name,new EnvEntryInjectionSource(Double.valueOf(value)));  } else   if (type.equals(Float.class.getName()) || type.equals("float")) {    bindingConfiguration=new BindingConfiguration(name,new EnvEntryInjectionSource(Float.valueOf(value)));  } else   if (type.equals(Boolean.class.getName()) || type.equals("boolean")) {    bindingConfiguration=new BindingConfiguration(name,new EnvEntryInjectionSource(Boolean.valueOf(value)));  } else   if (type.equals(Character.class.getName()) || type.equals("char")) {    if (value.length() != 1) {      throw new DeploymentUnitProcessingException("env-entry of type java.lang.Character is not exactly one character long " + value);    }    bindingConfiguration=new BindingConfiguration(name,new EnvEntryInjectionSource(value.charAt(0)));  } else   if (type.equals(Class.class.getName())) {    try {      bindingConfiguration=new BindingConfiguration(name,new EnvEntryInjectionSource(classLoader.loadClass(value)));    } catch (    ClassNotFoundException e) {      throw new DeploymentUnitProcessingException("Could not load class " + value + " specified in env-entry");    }  } else   if (classType.isEnum() || (classType.getEnclosingClass() != null && classType.getEnclosingClass().isEnum())) {    bindingConfiguration=new BindingConfiguration(name,new EnvEntryInjectionSource(Enum.valueOf((Class)classType,value)));  } else {    throw new DeploymentUnitProcessingException("Unkown env-entry type " + type);  }  bindings.add(bindingConfiguration);} @AT@ 9510 @LENGTH@ 469
------INS InfixExpression@@!isEmpty(value) && !isEmpty(lookup) @TO@ IfStatement@@if (!isEmpty(value) && !isEmpty(lookup)) {  throw new DeploymentUnitProcessingException("Cannot specify both a <env-entry-value> and a <lookup-name> in an environemnt entry.");} else if (isEmpty(lookup) && isEmpty(value)) {  continue;} @AT@ 9513 @LENGTH@ 35
---------INS PrefixExpression@@!isEmpty(value) @TO@ InfixExpression@@!isEmpty(value) && !isEmpty(lookup) @AT@ 9513 @LENGTH@ 15
------------MOV MethodInvocation@@isEmpty(value) @TO@ PrefixExpression@@!isEmpty(value) @AT@ 9455 @LENGTH@ 14
------------INS Operator@@! @TO@ PrefixExpression@@!isEmpty(value) @AT@ 9513 @LENGTH@ 1
---------INS Operator@@&& @TO@ InfixExpression@@!isEmpty(value) && !isEmpty(lookup) @AT@ 9528 @LENGTH@ 2
---------INS PrefixExpression@@!isEmpty(lookup) @TO@ InfixExpression@@!isEmpty(value) && !isEmpty(lookup) @AT@ 9532 @LENGTH@ 16
------------INS Operator@@! @TO@ PrefixExpression@@!isEmpty(lookup) @AT@ 9532 @LENGTH@ 1
------------INS MethodInvocation@@isEmpty(lookup) @TO@ PrefixExpression@@!isEmpty(lookup) @AT@ 9533 @LENGTH@ 15
---------------INS SimpleName@@MethodName:isEmpty:[lookup] @TO@ MethodInvocation@@isEmpty(lookup) @AT@ 9533 @LENGTH@ 15
------------------INS SimpleName@@lookup @TO@ SimpleName@@MethodName:isEmpty:[lookup] @AT@ 9541 @LENGTH@ 6
------INS Block@@ThenBody:{  throw new DeploymentUnitProcessingException("Cannot specify both a <env-entry-value> and a <lookup-name> in an environemnt entry.");} @TO@ IfStatement@@if (!isEmpty(value) && !isEmpty(lookup)) {  throw new DeploymentUnitProcessingException("Cannot specify both a <env-entry-value> and a <lookup-name> in an environemnt entry.");} else if (isEmpty(lookup) && isEmpty(value)) {  continue;} @AT@ 9550 @LENGTH@ 164
---------INS ThrowStatement@@ClassInstanceCreation:new DeploymentUnitProcessingException("Cannot specify both a <env-entry-value> and a <lookup-name> in an environemnt entry.") @TO@ Block@@ThenBody:{  throw new DeploymentUnitProcessingException("Cannot specify both a <env-entry-value> and a <lookup-name> in an environemnt entry.");} @AT@ 9568 @LENGTH@ 132
------------INS ClassInstanceCreation@@DeploymentUnitProcessingException["Cannot specify both a <env-entry-value> and a <lookup-name> in an environemnt entry."] @TO@ ThrowStatement@@ClassInstanceCreation:new DeploymentUnitProcessingException("Cannot specify both a <env-entry-value> and a <lookup-name> in an environemnt entry.") @AT@ 9574 @LENGTH@ 125
---------------INS New@@new @TO@ ClassInstanceCreation@@DeploymentUnitProcessingException["Cannot specify both a <env-entry-value> and a <lookup-name> in an environemnt entry."] @AT@ 9574 @LENGTH@ 3
---------------INS SimpleType@@DeploymentUnitProcessingException @TO@ ClassInstanceCreation@@DeploymentUnitProcessingException["Cannot specify both a <env-entry-value> and a <lookup-name> in an environemnt entry."] @AT@ 9578 @LENGTH@ 33
---------------INS StringLiteral@@"Cannot specify both a <env-entry-value> and a <lookup-name> in an environemnt entry." @TO@ ClassInstanceCreation@@DeploymentUnitProcessingException["Cannot specify both a <env-entry-value> and a <lookup-name> in an environemnt entry."] @AT@ 9612 @LENGTH@ 86
------INS Block@@ElseBody:if (isEmpty(lookup) && isEmpty(value)) {  continue;} @TO@ IfStatement@@if (!isEmpty(value) && !isEmpty(lookup)) {  throw new DeploymentUnitProcessingException("Cannot specify both a <env-entry-value> and a <lookup-name> in an environemnt entry.");} else if (isEmpty(lookup) && isEmpty(value)) {  continue;} @AT@ 9720 @LENGTH@ 259
---------INS IfStatement@@if (isEmpty(lookup) && isEmpty(value)) {  continue;} @TO@ Block@@ElseBody:if (isEmpty(lookup) && isEmpty(value)) {  continue;} @AT@ 9720 @LENGTH@ 259
------------MOV Block@@ThenBody:{  continue;} @TO@ IfStatement@@if (isEmpty(lookup) && isEmpty(value)) {  continue;} @AT@ 9471 @LENGTH@ 221
------------INS InfixExpression@@isEmpty(lookup) && isEmpty(value) @TO@ IfStatement@@if (isEmpty(lookup) && isEmpty(value)) {  continue;} @AT@ 9723 @LENGTH@ 33
---------------INS MethodInvocation@@isEmpty(lookup) @TO@ InfixExpression@@isEmpty(lookup) && isEmpty(value) @AT@ 9723 @LENGTH@ 15
------------------INS SimpleName@@MethodName:isEmpty:[lookup] @TO@ MethodInvocation@@isEmpty(lookup) @AT@ 9723 @LENGTH@ 15
---------------------INS SimpleName@@lookup @TO@ SimpleName@@MethodName:isEmpty:[lookup] @AT@ 9731 @LENGTH@ 6
------------------INS SimpleName@@MethodName:isEmpty:[lookup] @TO@ MethodInvocation@@isEmpty(lookup) @AT@ 9723 @LENGTH@ 15
---------------------INS SimpleName@@lookup @TO@ SimpleName@@MethodName:isEmpty:[lookup] @AT@ 9731 @LENGTH@ 6
---------------INS Operator@@&& @TO@ InfixExpression@@isEmpty(lookup) && isEmpty(value) @AT@ 9738 @LENGTH@ 2
---------------INS MethodInvocation@@isEmpty(value) @TO@ InfixExpression@@isEmpty(lookup) && isEmpty(value) @AT@ 9742 @LENGTH@ 14
------------------INS SimpleName@@MethodName:isEmpty:[value] @TO@ MethodInvocation@@isEmpty(value) @AT@ 9742 @LENGTH@ 14
---------------------INS SimpleName@@value @TO@ SimpleName@@MethodName:isEmpty:[value] @AT@ 9750 @LENGTH@ 5
------------------INS SimpleName@@MethodName:isEmpty:[value] @TO@ MethodInvocation@@isEmpty(value) @AT@ 9742 @LENGTH@ 14
---------------------INS SimpleName@@value @TO@ SimpleName@@MethodName:isEmpty:[value] @AT@ 9750 @LENGTH@ 5
---INS IfStatement@@if (!isEmpty(lookup)) {  bindingConfiguration=new BindingConfiguration(name,new LookupInjectionSource(lookup));} else if (type.equals(String.class.getName())) {  bindingConfiguration=new BindingConfiguration(name,new EnvEntryInjectionSource(value));} else if (type.equals(Integer.class.getName()) || type.equals("int")) {  bindingConfiguration=new BindingConfiguration(name,new EnvEntryInjectionSource(Integer.valueOf(value)));} else if (type.equals(Short.class.getName()) || type.equals("short")) {  bindingConfiguration=new BindingConfiguration(name,new EnvEntryInjectionSource(Short.valueOf(value)));} else if (type.equals(Long.class.getName()) || type.equals("long")) {  bindingConfiguration=new BindingConfiguration(name,new EnvEntryInjectionSource(Long.valueOf(value)));} else if (type.equals(Byte.class.getName()) || type.equals("byte")) {  bindingConfiguration=new BindingConfiguration(name,new EnvEntryInjectionSource(Byte.valueOf(value)));} else if (type.equals(Double.class.getName()) || type.equals("double")) {  bindingConfiguration=new BindingConfiguration(name,new EnvEntryInjectionSource(Double.valueOf(value)));} else if (type.equals(Float.class.getName()) || type.equals("float")) {  bindingConfiguration=new BindingConfiguration(name,new EnvEntryInjectionSource(Float.valueOf(value)));} else if (type.equals(Boolean.class.getName()) || type.equals("boolean")) {  bindingConfiguration=new BindingConfiguration(name,new EnvEntryInjectionSource(Boolean.valueOf(value)));} else if (type.equals(Character.class.getName()) || type.equals("char")) {  if (value.length() != 1) {    throw new DeploymentUnitProcessingException("env-entry of type java.lang.Character is not exactly one character long " + value);  }  bindingConfiguration=new BindingConfiguration(name,new EnvEntryInjectionSource(value.charAt(0)));} else if (type.equals(Class.class.getName())) {  try {    bindingConfiguration=new BindingConfiguration(name,new EnvEntryInjectionSource(classLoader.loadClass(value)));  } catch (  ClassNotFoundException e) {    throw new DeploymentUnitProcessingException("Could not load class " + value + " specified in env-entry");  }} else if (classType.isEnum() || (classType.getEnclosingClass() != null && classType.getEnclosingClass().isEnum())) {  bindingConfiguration=new BindingConfiguration(name,new EnvEntryInjectionSource(Enum.valueOf((Class)classType,value)));} else {  throw new DeploymentUnitProcessingException("Unkown env-entry type " + type);} @TO@ EnhancedForStatement@@for (EnvironmentEntryMetaData envEntry : envEntries) {  final String name;  if (envEntry.getName().startsWith("java:")) {    name=envEntry.getName();  } else {    name=environment.getDefaultContext() + envEntry.getEnvEntryName();  }  Class<?> classType=null;  if (envEntry.getType() != null) {    try {      classType=this.loadClass(envEntry.getType(),classLoader);    } catch (    ClassNotFoundException e) {      throw new DeploymentUnitProcessingException("Could not load " + envEntry.getType() + " referenced in env-entry ",e);    }  }  final String value=envEntry.getValue();  if (isEmpty(value)) {    continue;  }  LookupInjectionSource injectionSource=new LookupInjectionSource(name);  classType=processInjectionTargets(moduleDescription,injectionSource,classLoader,deploymentReflectionIndex,envEntry,classType);  if (classType == null) {    throw new DeploymentUnitProcessingException("Could not determine type for <env-entry> " + name + " please specify the <env-entry-type>.");  }  final String type=classType.getName();  BindingConfiguration bindingConfiguration=null;  if (type.equals(String.class.getName())) {    bindingConfiguration=new BindingConfiguration(name,new EnvEntryInjectionSource(value));  } else   if (type.equals(Integer.class.getName()) || type.equals("int")) {    bindingConfiguration=new BindingConfiguration(name,new EnvEntryInjectionSource(Integer.valueOf(value)));  } else   if (type.equals(Short.class.getName()) || type.equals("short")) {    bindingConfiguration=new BindingConfiguration(name,new EnvEntryInjectionSource(Short.valueOf(value)));  } else   if (type.equals(Long.class.getName()) || type.equals("long")) {    bindingConfiguration=new BindingConfiguration(name,new EnvEntryInjectionSource(Long.valueOf(value)));  } else   if (type.equals(Byte.class.getName()) || type.equals("byte")) {    bindingConfiguration=new BindingConfiguration(name,new EnvEntryInjectionSource(Byte.valueOf(value)));  } else   if (type.equals(Double.class.getName()) || type.equals("double")) {    bindingConfiguration=new BindingConfiguration(name,new EnvEntryInjectionSource(Double.valueOf(value)));  } else   if (type.equals(Float.class.getName()) || type.equals("float")) {    bindingConfiguration=new BindingConfiguration(name,new EnvEntryInjectionSource(Float.valueOf(value)));  } else   if (type.equals(Boolean.class.getName()) || type.equals("boolean")) {    bindingConfiguration=new BindingConfiguration(name,new EnvEntryInjectionSource(Boolean.valueOf(value)));  } else   if (type.equals(Character.class.getName()) || type.equals("char")) {    if (value.length() != 1) {      throw new DeploymentUnitProcessingException("env-entry of type java.lang.Character is not exactly one character long " + value);    }    bindingConfiguration=new BindingConfiguration(name,new EnvEntryInjectionSource(value.charAt(0)));  } else   if (type.equals(Class.class.getName())) {    try {      bindingConfiguration=new BindingConfiguration(name,new EnvEntryInjectionSource(classLoader.loadClass(value)));    } catch (    ClassNotFoundException e) {      throw new DeploymentUnitProcessingException("Could not load class " + value + " specified in env-entry");    }  } else   if (classType.isEnum() || (classType.getEnclosingClass() != null && classType.getEnclosingClass().isEnum())) {    bindingConfiguration=new BindingConfiguration(name,new EnvEntryInjectionSource(Enum.valueOf((Class)classType,value)));  } else {    throw new DeploymentUnitProcessingException("Unkown env-entry type " + type);  }  bindings.add(bindingConfiguration);} @AT@ 10636 @LENGTH@ 2979
------INS PrefixExpression@@!isEmpty(lookup) @TO@ IfStatement@@if (!isEmpty(lookup)) {  bindingConfiguration=new BindingConfiguration(name,new LookupInjectionSource(lookup));} else if (type.equals(String.class.getName())) {  bindingConfiguration=new BindingConfiguration(name,new EnvEntryInjectionSource(value));} else if (type.equals(Integer.class.getName()) || type.equals("int")) {  bindingConfiguration=new BindingConfiguration(name,new EnvEntryInjectionSource(Integer.valueOf(value)));} else if (type.equals(Short.class.getName()) || type.equals("short")) {  bindingConfiguration=new BindingConfiguration(name,new EnvEntryInjectionSource(Short.valueOf(value)));} else if (type.equals(Long.class.getName()) || type.equals("long")) {  bindingConfiguration=new BindingConfiguration(name,new EnvEntryInjectionSource(Long.valueOf(value)));} else if (type.equals(Byte.class.getName()) || type.equals("byte")) {  bindingConfiguration=new BindingConfiguration(name,new EnvEntryInjectionSource(Byte.valueOf(value)));} else if (type.equals(Double.class.getName()) || type.equals("double")) {  bindingConfiguration=new BindingConfiguration(name,new EnvEntryInjectionSource(Double.valueOf(value)));} else if (type.equals(Float.class.getName()) || type.equals("float")) {  bindingConfiguration=new BindingConfiguration(name,new EnvEntryInjectionSource(Float.valueOf(value)));} else if (type.equals(Boolean.class.getName()) || type.equals("boolean")) {  bindingConfiguration=new BindingConfiguration(name,new EnvEntryInjectionSource(Boolean.valueOf(value)));} else if (type.equals(Character.class.getName()) || type.equals("char")) {  if (value.length() != 1) {    throw new DeploymentUnitProcessingException("env-entry of type java.lang.Character is not exactly one character long " + value);  }  bindingConfiguration=new BindingConfiguration(name,new EnvEntryInjectionSource(value.charAt(0)));} else if (type.equals(Class.class.getName())) {  try {    bindingConfiguration=new BindingConfiguration(name,new EnvEntryInjectionSource(classLoader.loadClass(value)));  } catch (  ClassNotFoundException e) {    throw new DeploymentUnitProcessingException("Could not load class " + value + " specified in env-entry");  }} else if (classType.isEnum() || (classType.getEnclosingClass() != null && classType.getEnclosingClass().isEnum())) {  bindingConfiguration=new BindingConfiguration(name,new EnvEntryInjectionSource(Enum.valueOf((Class)classType,value)));} else {  throw new DeploymentUnitProcessingException("Unkown env-entry type " + type);} @AT@ 10639 @LENGTH@ 16
---------INS Operator@@! @TO@ PrefixExpression@@!isEmpty(lookup) @AT@ 10639 @LENGTH@ 1
---------INS MethodInvocation@@isEmpty(lookup) @TO@ PrefixExpression@@!isEmpty(lookup) @AT@ 10640 @LENGTH@ 15
------------INS SimpleName@@MethodName:isEmpty:[lookup] @TO@ MethodInvocation@@isEmpty(lookup) @AT@ 10640 @LENGTH@ 15
---------------INS SimpleName@@lookup @TO@ SimpleName@@MethodName:isEmpty:[lookup] @AT@ 10648 @LENGTH@ 6
------INS Block@@ThenBody:{  bindingConfiguration=new BindingConfiguration(name,new LookupInjectionSource(lookup));} @TO@ IfStatement@@if (!isEmpty(lookup)) {  bindingConfiguration=new BindingConfiguration(name,new LookupInjectionSource(lookup));} else if (type.equals(String.class.getName())) {  bindingConfiguration=new BindingConfiguration(name,new EnvEntryInjectionSource(value));} else if (type.equals(Integer.class.getName()) || type.equals("int")) {  bindingConfiguration=new BindingConfiguration(name,new EnvEntryInjectionSource(Integer.valueOf(value)));} else if (type.equals(Short.class.getName()) || type.equals("short")) {  bindingConfiguration=new BindingConfiguration(name,new EnvEntryInjectionSource(Short.valueOf(value)));} else if (type.equals(Long.class.getName()) || type.equals("long")) {  bindingConfiguration=new BindingConfiguration(name,new EnvEntryInjectionSource(Long.valueOf(value)));} else if (type.equals(Byte.class.getName()) || type.equals("byte")) {  bindingConfiguration=new BindingConfiguration(name,new EnvEntryInjectionSource(Byte.valueOf(value)));} else if (type.equals(Double.class.getName()) || type.equals("double")) {  bindingConfiguration=new BindingConfiguration(name,new EnvEntryInjectionSource(Double.valueOf(value)));} else if (type.equals(Float.class.getName()) || type.equals("float")) {  bindingConfiguration=new BindingConfiguration(name,new EnvEntryInjectionSource(Float.valueOf(value)));} else if (type.equals(Boolean.class.getName()) || type.equals("boolean")) {  bindingConfiguration=new BindingConfiguration(name,new EnvEntryInjectionSource(Boolean.valueOf(value)));} else if (type.equals(Character.class.getName()) || type.equals("char")) {  if (value.length() != 1) {    throw new DeploymentUnitProcessingException("env-entry of type java.lang.Character is not exactly one character long " + value);  }  bindingConfiguration=new BindingConfiguration(name,new EnvEntryInjectionSource(value.charAt(0)));} else if (type.equals(Class.class.getName())) {  try {    bindingConfiguration=new BindingConfiguration(name,new EnvEntryInjectionSource(classLoader.loadClass(value)));  } catch (  ClassNotFoundException e) {    throw new DeploymentUnitProcessingException("Could not load class " + value + " specified in env-entry");  }} else if (classType.isEnum() || (classType.getEnclosingClass() != null && classType.getEnclosingClass().isEnum())) {  bindingConfiguration=new BindingConfiguration(name,new EnvEntryInjectionSource(Enum.valueOf((Class)classType,value)));} else {  throw new DeploymentUnitProcessingException("Unkown env-entry type " + type);} @AT@ 10657 @LENGTH@ 121
---------INS ExpressionStatement@@Assignment:bindingConfiguration=new BindingConfiguration(name,new LookupInjectionSource(lookup)) @TO@ Block@@ThenBody:{  bindingConfiguration=new BindingConfiguration(name,new LookupInjectionSource(lookup));} @AT@ 10675 @LENGTH@ 89
------------INS Assignment@@bindingConfiguration=new BindingConfiguration(name,new LookupInjectionSource(lookup)) @TO@ ExpressionStatement@@Assignment:bindingConfiguration=new BindingConfiguration(name,new LookupInjectionSource(lookup)) @AT@ 10675 @LENGTH@ 88
---------------INS SimpleName@@bindingConfiguration @TO@ Assignment@@bindingConfiguration=new BindingConfiguration(name,new LookupInjectionSource(lookup)) @AT@ 10675 @LENGTH@ 20
---------------INS Operator@@= @TO@ Assignment@@bindingConfiguration=new BindingConfiguration(name,new LookupInjectionSource(lookup)) @AT@ 10695 @LENGTH@ 1
---------------INS ClassInstanceCreation@@BindingConfiguration[name, new LookupInjectionSource(lookup)] @TO@ Assignment@@bindingConfiguration=new BindingConfiguration(name,new LookupInjectionSource(lookup)) @AT@ 10698 @LENGTH@ 65
------------------INS New@@new @TO@ ClassInstanceCreation@@BindingConfiguration[name, new LookupInjectionSource(lookup)] @AT@ 10698 @LENGTH@ 3
------------------INS SimpleType@@BindingConfiguration @TO@ ClassInstanceCreation@@BindingConfiguration[name, new LookupInjectionSource(lookup)] @AT@ 10702 @LENGTH@ 20
------------------INS SimpleName@@name @TO@ ClassInstanceCreation@@BindingConfiguration[name, new LookupInjectionSource(lookup)] @AT@ 10723 @LENGTH@ 4
------------------INS ClassInstanceCreation@@LookupInjectionSource[lookup] @TO@ ClassInstanceCreation@@BindingConfiguration[name, new LookupInjectionSource(lookup)] @AT@ 10729 @LENGTH@ 33
---------------------INS New@@new @TO@ ClassInstanceCreation@@LookupInjectionSource[lookup] @AT@ 10729 @LENGTH@ 3
---------------------INS SimpleType@@LookupInjectionSource @TO@ ClassInstanceCreation@@LookupInjectionSource[lookup] @AT@ 10733 @LENGTH@ 21
---------------------INS SimpleName@@lookup @TO@ ClassInstanceCreation@@LookupInjectionSource[lookup] @AT@ 10755 @LENGTH@ 6
------INS Block@@ElseBody:if (type.equals(String.class.getName())) {  bindingConfiguration=new BindingConfiguration(name,new EnvEntryInjectionSource(value));} else if (type.equals(Integer.class.getName()) || type.equals("int")) {  bindingConfiguration=new BindingConfiguration(name,new EnvEntryInjectionSource(Integer.valueOf(value)));} else if (type.equals(Short.class.getName()) || type.equals("short")) {  bindingConfiguration=new BindingConfiguration(name,new EnvEntryInjectionSource(Short.valueOf(value)));} else if (type.equals(Long.class.getName()) || type.equals("long")) {  bindingConfiguration=new BindingConfiguration(name,new EnvEntryInjectionSource(Long.valueOf(value)));} else if (type.equals(Byte.class.getName()) || type.equals("byte")) {  bindingConfiguration=new BindingConfiguration(name,new EnvEntryInjectionSource(Byte.valueOf(value)));} else if (type.equals(Double.class.getName()) || type.equals("double")) {  bindingConfiguration=new BindingConfiguration(name,new EnvEntryInjectionSource(Double.valueOf(value)));} else if (type.equals(Float.class.getName()) || type.equals("float")) {  bindingConfiguration=new BindingConfiguration(name,new EnvEntryInjectionSource(Float.valueOf(value)));} else if (type.equals(Boolean.class.getName()) || type.equals("boolean")) {  bindingConfiguration=new BindingConfiguration(name,new EnvEntryInjectionSource(Boolean.valueOf(value)));} else if (type.equals(Character.class.getName()) || type.equals("char")) {  if (value.length() != 1) {    throw new DeploymentUnitProcessingException("env-entry of type java.lang.Character is not exactly one character long " + value);  }  bindingConfiguration=new BindingConfiguration(name,new EnvEntryInjectionSource(value.charAt(0)));} else if (type.equals(Class.class.getName())) {  try {    bindingConfiguration=new BindingConfiguration(name,new EnvEntryInjectionSource(classLoader.loadClass(value)));  } catch (  ClassNotFoundException e) {    throw new DeploymentUnitProcessingException("Could not load class " + value + " specified in env-entry");  }} else if (classType.isEnum() || (classType.getEnclosingClass() != null && classType.getEnclosingClass().isEnum())) {  bindingConfiguration=new BindingConfiguration(name,new EnvEntryInjectionSource(Enum.valueOf((Class)classType,value)));} else {  throw new DeploymentUnitProcessingException("Unkown env-entry type " + type);} @TO@ IfStatement@@if (!isEmpty(lookup)) {  bindingConfiguration=new BindingConfiguration(name,new LookupInjectionSource(lookup));} else if (type.equals(String.class.getName())) {  bindingConfiguration=new BindingConfiguration(name,new EnvEntryInjectionSource(value));} else if (type.equals(Integer.class.getName()) || type.equals("int")) {  bindingConfiguration=new BindingConfiguration(name,new EnvEntryInjectionSource(Integer.valueOf(value)));} else if (type.equals(Short.class.getName()) || type.equals("short")) {  bindingConfiguration=new BindingConfiguration(name,new EnvEntryInjectionSource(Short.valueOf(value)));} else if (type.equals(Long.class.getName()) || type.equals("long")) {  bindingConfiguration=new BindingConfiguration(name,new EnvEntryInjectionSource(Long.valueOf(value)));} else if (type.equals(Byte.class.getName()) || type.equals("byte")) {  bindingConfiguration=new BindingConfiguration(name,new EnvEntryInjectionSource(Byte.valueOf(value)));} else if (type.equals(Double.class.getName()) || type.equals("double")) {  bindingConfiguration=new BindingConfiguration(name,new EnvEntryInjectionSource(Double.valueOf(value)));} else if (type.equals(Float.class.getName()) || type.equals("float")) {  bindingConfiguration=new BindingConfiguration(name,new EnvEntryInjectionSource(Float.valueOf(value)));} else if (type.equals(Boolean.class.getName()) || type.equals("boolean")) {  bindingConfiguration=new BindingConfiguration(name,new EnvEntryInjectionSource(Boolean.valueOf(value)));} else if (type.equals(Character.class.getName()) || type.equals("char")) {  if (value.length() != 1) {    throw new DeploymentUnitProcessingException("env-entry of type java.lang.Character is not exactly one character long " + value);  }  bindingConfiguration=new BindingConfiguration(name,new EnvEntryInjectionSource(value.charAt(0)));} else if (type.equals(Class.class.getName())) {  try {    bindingConfiguration=new BindingConfiguration(name,new EnvEntryInjectionSource(classLoader.loadClass(value)));  } catch (  ClassNotFoundException e) {    throw new DeploymentUnitProcessingException("Could not load class " + value + " specified in env-entry");  }} else if (classType.isEnum() || (classType.getEnclosingClass() != null && classType.getEnclosingClass().isEnum())) {  bindingConfiguration=new BindingConfiguration(name,new EnvEntryInjectionSource(Enum.valueOf((Class)classType,value)));} else {  throw new DeploymentUnitProcessingException("Unkown env-entry type " + type);} @AT@ 10784 @LENGTH@ 2831
---------MOV IfStatement@@if (type.equals(String.class.getName())) {  bindingConfiguration=new BindingConfiguration(name,new EnvEntryInjectionSource(value));} else if (type.equals(Integer.class.getName()) || type.equals("int")) {  bindingConfiguration=new BindingConfiguration(name,new EnvEntryInjectionSource(Integer.valueOf(value)));} else if (type.equals(Short.class.getName()) || type.equals("short")) {  bindingConfiguration=new BindingConfiguration(name,new EnvEntryInjectionSource(Short.valueOf(value)));} else if (type.equals(Long.class.getName()) || type.equals("long")) {  bindingConfiguration=new BindingConfiguration(name,new EnvEntryInjectionSource(Long.valueOf(value)));} else if (type.equals(Byte.class.getName()) || type.equals("byte")) {  bindingConfiguration=new BindingConfiguration(name,new EnvEntryInjectionSource(Byte.valueOf(value)));} else if (type.equals(Double.class.getName()) || type.equals("double")) {  bindingConfiguration=new BindingConfiguration(name,new EnvEntryInjectionSource(Double.valueOf(value)));} else if (type.equals(Float.class.getName()) || type.equals("float")) {  bindingConfiguration=new BindingConfiguration(name,new EnvEntryInjectionSource(Float.valueOf(value)));} else if (type.equals(Boolean.class.getName()) || type.equals("boolean")) {  bindingConfiguration=new BindingConfiguration(name,new EnvEntryInjectionSource(Boolean.valueOf(value)));} else if (type.equals(Character.class.getName()) || type.equals("char")) {  if (value.length() != 1) {    throw new DeploymentUnitProcessingException("env-entry of type java.lang.Character is not exactly one character long " + value);  }  bindingConfiguration=new BindingConfiguration(name,new EnvEntryInjectionSource(value.charAt(0)));} else if (type.equals(Class.class.getName())) {  try {    bindingConfiguration=new BindingConfiguration(name,new EnvEntryInjectionSource(classLoader.loadClass(value)));  } catch (  ClassNotFoundException e) {    throw new DeploymentUnitProcessingException("Could not load class " + value + " specified in env-entry");  }} else if (classType.isEnum() || (classType.getEnclosingClass() != null && classType.getEnclosingClass().isEnum())) {  bindingConfiguration=new BindingConfiguration(name,new EnvEntryInjectionSource(Enum.valueOf((Class)classType,value)));} else {  throw new DeploymentUnitProcessingException("Unkown env-entry type " + type);} @TO@ Block@@ElseBody:if (type.equals(String.class.getName())) {  bindingConfiguration=new BindingConfiguration(name,new EnvEntryInjectionSource(value));} else if (type.equals(Integer.class.getName()) || type.equals("int")) {  bindingConfiguration=new BindingConfiguration(name,new EnvEntryInjectionSource(Integer.valueOf(value)));} else if (type.equals(Short.class.getName()) || type.equals("short")) {  bindingConfiguration=new BindingConfiguration(name,new EnvEntryInjectionSource(Short.valueOf(value)));} else if (type.equals(Long.class.getName()) || type.equals("long")) {  bindingConfiguration=new BindingConfiguration(name,new EnvEntryInjectionSource(Long.valueOf(value)));} else if (type.equals(Byte.class.getName()) || type.equals("byte")) {  bindingConfiguration=new BindingConfiguration(name,new EnvEntryInjectionSource(Byte.valueOf(value)));} else if (type.equals(Double.class.getName()) || type.equals("double")) {  bindingConfiguration=new BindingConfiguration(name,new EnvEntryInjectionSource(Double.valueOf(value)));} else if (type.equals(Float.class.getName()) || type.equals("float")) {  bindingConfiguration=new BindingConfiguration(name,new EnvEntryInjectionSource(Float.valueOf(value)));} else if (type.equals(Boolean.class.getName()) || type.equals("boolean")) {  bindingConfiguration=new BindingConfiguration(name,new EnvEntryInjectionSource(Boolean.valueOf(value)));} else if (type.equals(Character.class.getName()) || type.equals("char")) {  if (value.length() != 1) {    throw new DeploymentUnitProcessingException("env-entry of type java.lang.Character is not exactly one character long " + value);  }  bindingConfiguration=new BindingConfiguration(name,new EnvEntryInjectionSource(value.charAt(0)));} else if (type.equals(Class.class.getName())) {  try {    bindingConfiguration=new BindingConfiguration(name,new EnvEntryInjectionSource(classLoader.loadClass(value)));  } catch (  ClassNotFoundException e) {    throw new DeploymentUnitProcessingException("Could not load class " + value + " specified in env-entry");  }} else if (classType.isEnum() || (classType.getEnclosingClass() != null && classType.getEnclosingClass().isEnum())) {  bindingConfiguration=new BindingConfiguration(name,new EnvEntryInjectionSource(Enum.valueOf((Class)classType,value)));} else {  throw new DeploymentUnitProcessingException("Unkown env-entry type " + type);} @AT@ 10349 @LENGTH@ 2831


INS MethodDeclaration@@public, void, MethodName:testInputStreamReader, Exception,  @TO@ TypeDeclaration@@[public]Base64InputStreamTest, TestCase @AT@ 3308 @LENGTH@ 501
---INS Modifier@@public @TO@ MethodDeclaration@@public, void, MethodName:testInputStreamReader, Exception,  @AT@ 3308 @LENGTH@ 6
---INS PrimitiveType@@void @TO@ MethodDeclaration@@public, void, MethodName:testInputStreamReader, Exception,  @AT@ 3315 @LENGTH@ 4
---INS SimpleName@@MethodName:testInputStreamReader @TO@ MethodDeclaration@@public, void, MethodName:testInputStreamReader, Exception,  @AT@ 3320 @LENGTH@ 21
---INS SimpleType@@Exception @TO@ MethodDeclaration@@public, void, MethodName:testInputStreamReader, Exception,  @AT@ 3351 @LENGTH@ 9
---INS VariableDeclarationStatement@@byte[] codec101=StringUtils.getBytesUtf8(Base64TestData.CODEC_101_MULTIPLE_OF_3); @TO@ MethodDeclaration@@public, void, MethodName:testInputStreamReader, Exception,  @AT@ 3371 @LENGTH@ 83
------INS ArrayType@@byte[] @TO@ VariableDeclarationStatement@@byte[] codec101=StringUtils.getBytesUtf8(Base64TestData.CODEC_101_MULTIPLE_OF_3); @AT@ 3371 @LENGTH@ 6
---------INS PrimitiveType@@byte @TO@ ArrayType@@byte[] @AT@ 3371 @LENGTH@ 4
------INS VariableDeclarationFragment@@codec101=StringUtils.getBytesUtf8(Base64TestData.CODEC_101_MULTIPLE_OF_3) @TO@ VariableDeclarationStatement@@byte[] codec101=StringUtils.getBytesUtf8(Base64TestData.CODEC_101_MULTIPLE_OF_3); @AT@ 3378 @LENGTH@ 75
---------INS SimpleName@@codec101 @TO@ VariableDeclarationFragment@@codec101=StringUtils.getBytesUtf8(Base64TestData.CODEC_101_MULTIPLE_OF_3) @AT@ 3378 @LENGTH@ 8
---------INS MethodInvocation@@StringUtils.getBytesUtf8(Base64TestData.CODEC_101_MULTIPLE_OF_3) @TO@ VariableDeclarationFragment@@codec101=StringUtils.getBytesUtf8(Base64TestData.CODEC_101_MULTIPLE_OF_3) @AT@ 3389 @LENGTH@ 64
------------INS SimpleName@@Name:StringUtils @TO@ MethodInvocation@@StringUtils.getBytesUtf8(Base64TestData.CODEC_101_MULTIPLE_OF_3) @AT@ 3389 @LENGTH@ 11
------------INS SimpleName@@MethodName:getBytesUtf8:[Base64TestData.CODEC_101_MULTIPLE_OF_3] @TO@ MethodInvocation@@StringUtils.getBytesUtf8(Base64TestData.CODEC_101_MULTIPLE_OF_3) @AT@ 3401 @LENGTH@ 52
---------------INS QualifiedName@@Base64TestData.CODEC_101_MULTIPLE_OF_3 @TO@ SimpleName@@MethodName:getBytesUtf8:[Base64TestData.CODEC_101_MULTIPLE_OF_3] @AT@ 3414 @LENGTH@ 38
------------------INS SimpleName@@Base64TestData @TO@ QualifiedName@@Base64TestData.CODEC_101_MULTIPLE_OF_3 @AT@ 3414 @LENGTH@ 14
------------------INS SimpleName@@CODEC_101_MULTIPLE_OF_3 @TO@ QualifiedName@@Base64TestData.CODEC_101_MULTIPLE_OF_3 @AT@ 3429 @LENGTH@ 23
---INS VariableDeclarationStatement@@ByteArrayInputStream bais=new ByteArrayInputStream(codec101); @TO@ MethodDeclaration@@public, void, MethodName:testInputStreamReader, Exception,  @AT@ 3463 @LENGTH@ 63
------INS SimpleType@@ByteArrayInputStream @TO@ VariableDeclarationStatement@@ByteArrayInputStream bais=new ByteArrayInputStream(codec101); @AT@ 3463 @LENGTH@ 20
------INS VariableDeclarationFragment@@bais=new ByteArrayInputStream(codec101) @TO@ VariableDeclarationStatement@@ByteArrayInputStream bais=new ByteArrayInputStream(codec101); @AT@ 3484 @LENGTH@ 41
---------INS SimpleName@@bais @TO@ VariableDeclarationFragment@@bais=new ByteArrayInputStream(codec101) @AT@ 3484 @LENGTH@ 4
---------INS ClassInstanceCreation@@ByteArrayInputStream[codec101] @TO@ VariableDeclarationFragment@@bais=new ByteArrayInputStream(codec101) @AT@ 3491 @LENGTH@ 34
------------INS New@@new @TO@ ClassInstanceCreation@@ByteArrayInputStream[codec101] @AT@ 3491 @LENGTH@ 3
------------INS SimpleType@@ByteArrayInputStream @TO@ ClassInstanceCreation@@ByteArrayInputStream[codec101] @AT@ 3495 @LENGTH@ 20
------------INS SimpleName@@codec101 @TO@ ClassInstanceCreation@@ByteArrayInputStream[codec101] @AT@ 3516 @LENGTH@ 8
---INS VariableDeclarationStatement@@Base64InputStream in=new Base64InputStream(bais); @TO@ MethodDeclaration@@public, void, MethodName:testInputStreamReader, Exception,  @AT@ 3535 @LENGTH@ 51
------INS SimpleType@@Base64InputStream @TO@ VariableDeclarationStatement@@Base64InputStream in=new Base64InputStream(bais); @AT@ 3535 @LENGTH@ 17
------INS VariableDeclarationFragment@@in=new Base64InputStream(bais) @TO@ VariableDeclarationStatement@@Base64InputStream in=new Base64InputStream(bais); @AT@ 3553 @LENGTH@ 32
---------INS SimpleName@@in @TO@ VariableDeclarationFragment@@in=new Base64InputStream(bais) @AT@ 3553 @LENGTH@ 2
---------INS ClassInstanceCreation@@Base64InputStream[bais] @TO@ VariableDeclarationFragment@@in=new Base64InputStream(bais) @AT@ 3558 @LENGTH@ 27
------------INS New@@new @TO@ ClassInstanceCreation@@Base64InputStream[bais] @AT@ 3558 @LENGTH@ 3
------------INS SimpleType@@Base64InputStream @TO@ ClassInstanceCreation@@Base64InputStream[bais] @AT@ 3562 @LENGTH@ 17
------------INS SimpleName@@bais @TO@ ClassInstanceCreation@@Base64InputStream[bais] @AT@ 3580 @LENGTH@ 4
---INS VariableDeclarationStatement@@InputStreamReader isr=new InputStreamReader(in); @TO@ MethodDeclaration@@public, void, MethodName:testInputStreamReader, Exception,  @AT@ 3595 @LENGTH@ 50
------INS SimpleType@@InputStreamReader @TO@ VariableDeclarationStatement@@InputStreamReader isr=new InputStreamReader(in); @AT@ 3595 @LENGTH@ 17
------INS VariableDeclarationFragment@@isr=new InputStreamReader(in) @TO@ VariableDeclarationStatement@@InputStreamReader isr=new InputStreamReader(in); @AT@ 3613 @LENGTH@ 31
---------INS SimpleName@@isr @TO@ VariableDeclarationFragment@@isr=new InputStreamReader(in) @AT@ 3613 @LENGTH@ 3
---------INS ClassInstanceCreation@@InputStreamReader[in] @TO@ VariableDeclarationFragment@@isr=new InputStreamReader(in) @AT@ 3619 @LENGTH@ 25
------------INS New@@new @TO@ ClassInstanceCreation@@InputStreamReader[in] @AT@ 3619 @LENGTH@ 3
------------INS SimpleType@@InputStreamReader @TO@ ClassInstanceCreation@@InputStreamReader[in] @AT@ 3623 @LENGTH@ 17
------------INS SimpleName@@in @TO@ ClassInstanceCreation@@InputStreamReader[in] @AT@ 3641 @LENGTH@ 2
---INS VariableDeclarationStatement@@BufferedReader br=new BufferedReader(isr); @TO@ MethodDeclaration@@public, void, MethodName:testInputStreamReader, Exception,  @AT@ 3654 @LENGTH@ 44
------INS SimpleType@@BufferedReader @TO@ VariableDeclarationStatement@@BufferedReader br=new BufferedReader(isr); @AT@ 3654 @LENGTH@ 14
------INS VariableDeclarationFragment@@br=new BufferedReader(isr) @TO@ VariableDeclarationStatement@@BufferedReader br=new BufferedReader(isr); @AT@ 3669 @LENGTH@ 28
---------INS SimpleName@@br @TO@ VariableDeclarationFragment@@br=new BufferedReader(isr) @AT@ 3669 @LENGTH@ 2
---------INS ClassInstanceCreation@@BufferedReader[isr] @TO@ VariableDeclarationFragment@@br=new BufferedReader(isr) @AT@ 3674 @LENGTH@ 23
------------INS New@@new @TO@ ClassInstanceCreation@@BufferedReader[isr] @AT@ 3674 @LENGTH@ 3
------------INS SimpleType@@BufferedReader @TO@ ClassInstanceCreation@@BufferedReader[isr] @AT@ 3678 @LENGTH@ 14
------------INS SimpleName@@isr @TO@ ClassInstanceCreation@@BufferedReader[isr] @AT@ 3693 @LENGTH@ 3
---INS VariableDeclarationStatement@@String line=br.readLine(); @TO@ MethodDeclaration@@public, void, MethodName:testInputStreamReader, Exception,  @AT@ 3707 @LENGTH@ 28
------INS SimpleType@@String @TO@ VariableDeclarationStatement@@String line=br.readLine(); @AT@ 3707 @LENGTH@ 6
------INS VariableDeclarationFragment@@line=br.readLine() @TO@ VariableDeclarationStatement@@String line=br.readLine(); @AT@ 3714 @LENGTH@ 20
---------INS SimpleName@@line @TO@ VariableDeclarationFragment@@line=br.readLine() @AT@ 3714 @LENGTH@ 4
---------INS MethodInvocation@@br.readLine() @TO@ VariableDeclarationFragment@@line=br.readLine() @AT@ 3721 @LENGTH@ 13
------------INS SimpleName@@Name:br @TO@ MethodInvocation@@br.readLine() @AT@ 3721 @LENGTH@ 2
------------INS SimpleName@@MethodName:readLine:[] @TO@ MethodInvocation@@br.readLine() @AT@ 3724 @LENGTH@ 10
---INS ExpressionStatement@@MethodInvocation:assertNotNull("Codec101:  InputStreamReader works!",line) @TO@ MethodDeclaration@@public, void, MethodName:testInputStreamReader, Exception,  @AT@ 3744 @LENGTH@ 59
------INS MethodInvocation@@assertNotNull("Codec101:  InputStreamReader works!",line) @TO@ ExpressionStatement@@MethodInvocation:assertNotNull("Codec101:  InputStreamReader works!",line) @AT@ 3744 @LENGTH@ 58
---------INS SimpleName@@MethodName:assertNotNull:["Codec101:  InputStreamReader works!", line] @TO@ MethodInvocation@@assertNotNull("Codec101:  InputStreamReader works!",line) @AT@ 3744 @LENGTH@ 58
------------INS StringLiteral@@"Codec101:  InputStreamReader works!" @TO@ SimpleName@@MethodName:assertNotNull:["Codec101:  InputStreamReader works!", line] @AT@ 3758 @LENGTH@ 37
------------INS SimpleName@@line @TO@ SimpleName@@MethodName:assertNotNull:["Codec101:  InputStreamReader works!", line] @AT@ 3797 @LENGTH@ 4


INS FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @TO@ TypeDeclaration@@[public]PreAuthenticatedGrantedAuthoritiesWebAuthenticationDetails, WebAuthenticationDetails[GrantedAuthoritiesContainer] @AT@ 771 @LENGTH@ 90
---INS Modifier@@private @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @AT@ 771 @LENGTH@ 7
---INS Modifier@@static @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @AT@ 779 @LENGTH@ 6
---INS Modifier@@final @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @AT@ 786 @LENGTH@ 5
---INS PrimitiveType@@long @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @AT@ 792 @LENGTH@ 4
---INS VariableDeclarationFragment@@serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @AT@ 797 @LENGTH@ 63
------INS SimpleName@@serialVersionUID @TO@ VariableDeclarationFragment@@serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID @AT@ 797 @LENGTH@ 16
------INS QualifiedName@@SpringSecurityCoreVersion.SERIAL_VERSION_UID @TO@ VariableDeclarationFragment@@serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID @AT@ 816 @LENGTH@ 44
---------INS SimpleName@@SpringSecurityCoreVersion @TO@ QualifiedName@@SpringSecurityCoreVersion.SERIAL_VERSION_UID @AT@ 816 @LENGTH@ 25
---------INS SimpleName@@SERIAL_VERSION_UID @TO@ QualifiedName@@SpringSecurityCoreVersion.SERIAL_VERSION_UID @AT@ 842 @LENGTH@ 18


INS MethodDeclaration@@public, void, MethodName:testAychlmajrForCodec122, EncoderException,  @TO@ TypeDeclaration@@[public]ColognePhoneticTest, StringEncoderAbstractTest @AT@ 1698 @LENGTH@ 120
---INS Modifier@@public @TO@ MethodDeclaration@@public, void, MethodName:testAychlmajrForCodec122, EncoderException,  @AT@ 1698 @LENGTH@ 6
---INS PrimitiveType@@void @TO@ MethodDeclaration@@public, void, MethodName:testAychlmajrForCodec122, EncoderException,  @AT@ 1705 @LENGTH@ 4
---INS SimpleName@@MethodName:testAychlmajrForCodec122 @TO@ MethodDeclaration@@public, void, MethodName:testAychlmajrForCodec122, EncoderException,  @AT@ 1710 @LENGTH@ 24
---INS SimpleType@@EncoderException @TO@ MethodDeclaration@@public, void, MethodName:testAychlmajrForCodec122, EncoderException,  @AT@ 1744 @LENGTH@ 16
---INS ExpressionStatement@@MethodInvocation:this.checkEncoding("04567","Aychlmajr") @TO@ MethodDeclaration@@public, void, MethodName:testAychlmajrForCodec122, EncoderException,  @AT@ 1771 @LENGTH@ 41
------INS MethodInvocation@@this.checkEncoding("04567","Aychlmajr") @TO@ ExpressionStatement@@MethodInvocation:this.checkEncoding("04567","Aychlmajr") @AT@ 1771 @LENGTH@ 40
---------INS ThisExpression@@this @TO@ MethodInvocation@@this.checkEncoding("04567","Aychlmajr") @AT@ 1771 @LENGTH@ 4
---------INS SimpleName@@MethodName:checkEncoding:["04567", "Aychlmajr"] @TO@ MethodInvocation@@this.checkEncoding("04567","Aychlmajr") @AT@ 1776 @LENGTH@ 35
------------INS StringLiteral@@"04567" @TO@ SimpleName@@MethodName:checkEncoding:["04567", "Aychlmajr"] @AT@ 1790 @LENGTH@ 7
------------INS StringLiteral@@"Aychlmajr" @TO@ SimpleName@@MethodName:checkEncoding:["04567", "Aychlmajr"] @AT@ 1799 @LENGTH@ 11


UPD EnhancedForStatement@@for (Property prop : namespaces.asPropertyList()) {  final ModelNode sl=new ModelNode();  sl.get(prop.getName()).set(prop.getValue());  map.put(prop.getName(),SchemaLocationAddHandler.getAddSchemaLocationOperation(EMPTY,sl));} @TO@ for (Property prop : namespaces.asPropertyList()) {  map.put(prop.getName(),SchemaLocationAddHandler.getAddSchemaLocationOperation(EMPTY,prop));} @AT@ 11257 @LENGTH@ 288
---DEL VariableDeclarationStatement@@final ModelNode sl=new ModelNode(); @AT@ 11325 @LENGTH@ 37
------DEL Modifier@@final @AT@ 11325 @LENGTH@ 5
------DEL SimpleType@@ModelNode @AT@ 11331 @LENGTH@ 9
------DEL VariableDeclarationFragment@@sl=new ModelNode() @AT@ 11341 @LENGTH@ 20
---------DEL SimpleName@@sl @AT@ 11341 @LENGTH@ 2
---------DEL ClassInstanceCreation@@ModelNode[] @AT@ 11346 @LENGTH@ 15
------------DEL New@@new @AT@ 11346 @LENGTH@ 3
------------DEL SimpleType@@ModelNode @AT@ 11350 @LENGTH@ 9
---DEL ExpressionStatement@@MethodInvocation:sl.get(prop.getName()).set(prop.getValue()) @AT@ 11379 @LENGTH@ 44
------DEL MethodInvocation@@sl.get(prop.getName()).set(prop.getValue()) @AT@ 11379 @LENGTH@ 43
---------DEL MethodInvocation@@MethodName:get:[prop.getName()] @AT@ 11379 @LENGTH@ 22
------------DEL MethodInvocation@@prop.getName() @AT@ 11386 @LENGTH@ 14
---------------DEL SimpleName@@Name:prop @AT@ 11386 @LENGTH@ 4
---------------DEL SimpleName@@MethodName:getName:[] @AT@ 11391 @LENGTH@ 9
---------DEL SimpleName@@Name:sl @AT@ 11379 @LENGTH@ 2
---------DEL SimpleName@@MethodName:set:[prop.getValue()] @AT@ 11402 @LENGTH@ 20
------------DEL MethodInvocation@@prop.getValue() @AT@ 11406 @LENGTH@ 15
---------------DEL SimpleName@@Name:prop @AT@ 11406 @LENGTH@ 4
---------------DEL SimpleName@@MethodName:getValue:[] @AT@ 11411 @LENGTH@ 10
---UPD ExpressionStatement@@MethodInvocation:map.put(prop.getName(),SchemaLocationAddHandler.getAddSchemaLocationOperation(EMPTY,sl)) @TO@ MethodInvocation:map.put(prop.getName(),SchemaLocationAddHandler.getAddSchemaLocationOperation(EMPTY,prop)) @AT@ 11440 @LENGTH@ 91
------UPD MethodInvocation@@map.put(prop.getName(),SchemaLocationAddHandler.getAddSchemaLocationOperation(EMPTY,sl)) @TO@ map.put(prop.getName(),SchemaLocationAddHandler.getAddSchemaLocationOperation(EMPTY,prop)) @AT@ 11440 @LENGTH@ 90
---------UPD SimpleName@@MethodName:put:[prop.getName(), SchemaLocationAddHandler.getAddSchemaLocationOperation(EMPTY,sl)] @TO@ MethodName:put:[prop.getName(), SchemaLocationAddHandler.getAddSchemaLocationOperation(EMPTY,prop)] @AT@ 11444 @LENGTH@ 86
------------UPD MethodInvocation@@SchemaLocationAddHandler.getAddSchemaLocationOperation(EMPTY,sl) @TO@ SchemaLocationAddHandler.getAddSchemaLocationOperation(EMPTY,prop) @AT@ 11464 @LENGTH@ 65
---------------UPD SimpleName@@MethodName:getAddSchemaLocationOperation:[EMPTY, sl] @TO@ MethodName:getAddSchemaLocationOperation:[EMPTY, prop] @AT@ 11489 @LENGTH@ 40
------------------UPD SimpleName@@sl @TO@ prop @AT@ 11526 @LENGTH@ 2


UPD EnhancedForStatement@@for (Property prop : namespaces.asPropertyList()) {  final ModelNode sl=new ModelNode();  sl.get(prop.getName()).set(prop.getValue());  map.put(prop.getName(),SchemaLocationAddHandler.getAddSchemaLocationOperation(EMPTY,sl));} @TO@ for (Property prop : namespaces.asPropertyList()) {  map.put(prop.getName(),SchemaLocationAddHandler.getAddSchemaLocationOperation(EMPTY,prop));} @AT@ 11257 @LENGTH@ 288
---DEL VariableDeclarationStatement@@final ModelNode sl=new ModelNode(); @AT@ 11325 @LENGTH@ 37
------DEL Modifier@@final @AT@ 11325 @LENGTH@ 5
------DEL SimpleType@@ModelNode @AT@ 11331 @LENGTH@ 9
------DEL VariableDeclarationFragment@@sl=new ModelNode() @AT@ 11341 @LENGTH@ 20
---------DEL SimpleName@@sl @AT@ 11341 @LENGTH@ 2
---------DEL ClassInstanceCreation@@ModelNode[] @AT@ 11346 @LENGTH@ 15
------------DEL New@@new @AT@ 11346 @LENGTH@ 3
------------DEL SimpleType@@ModelNode @AT@ 11350 @LENGTH@ 9
---DEL ExpressionStatement@@MethodInvocation:sl.get(prop.getName()).set(prop.getValue()) @AT@ 11379 @LENGTH@ 44
------DEL MethodInvocation@@sl.get(prop.getName()).set(prop.getValue()) @AT@ 11379 @LENGTH@ 43
---------DEL MethodInvocation@@MethodName:get:[prop.getName()] @AT@ 11379 @LENGTH@ 22
------------DEL MethodInvocation@@prop.getName() @AT@ 11386 @LENGTH@ 14
---------------DEL SimpleName@@Name:prop @AT@ 11386 @LENGTH@ 4
---------------DEL SimpleName@@MethodName:getName:[] @AT@ 11391 @LENGTH@ 9
---------DEL SimpleName@@Name:sl @AT@ 11379 @LENGTH@ 2
---------DEL SimpleName@@MethodName:set:[prop.getValue()] @AT@ 11402 @LENGTH@ 20
------------DEL MethodInvocation@@prop.getValue() @AT@ 11406 @LENGTH@ 15
---------------DEL SimpleName@@Name:prop @AT@ 11406 @LENGTH@ 4
---------------DEL SimpleName@@MethodName:getValue:[] @AT@ 11411 @LENGTH@ 10
---UPD ExpressionStatement@@MethodInvocation:map.put(prop.getName(),SchemaLocationAddHandler.getAddSchemaLocationOperation(EMPTY,sl)) @TO@ MethodInvocation:map.put(prop.getName(),SchemaLocationAddHandler.getAddSchemaLocationOperation(EMPTY,prop)) @AT@ 11440 @LENGTH@ 91
------UPD MethodInvocation@@map.put(prop.getName(),SchemaLocationAddHandler.getAddSchemaLocationOperation(EMPTY,sl)) @TO@ map.put(prop.getName(),SchemaLocationAddHandler.getAddSchemaLocationOperation(EMPTY,prop)) @AT@ 11440 @LENGTH@ 90
---------UPD SimpleName@@MethodName:put:[prop.getName(), SchemaLocationAddHandler.getAddSchemaLocationOperation(EMPTY,sl)] @TO@ MethodName:put:[prop.getName(), SchemaLocationAddHandler.getAddSchemaLocationOperation(EMPTY,prop)] @AT@ 11444 @LENGTH@ 86
------------UPD MethodInvocation@@SchemaLocationAddHandler.getAddSchemaLocationOperation(EMPTY,sl) @TO@ SchemaLocationAddHandler.getAddSchemaLocationOperation(EMPTY,prop) @AT@ 11464 @LENGTH@ 65
---------------UPD SimpleName@@MethodName:getAddSchemaLocationOperation:[EMPTY, sl] @TO@ MethodName:getAddSchemaLocationOperation:[EMPTY, prop] @AT@ 11489 @LENGTH@ 40
------------------UPD SimpleName@@sl @TO@ prop @AT@ 11526 @LENGTH@ 2


DEL IfStatement@@if (reader.nextTag() != START_ELEMENT) {  throw unexpectedEndElement(reader);} @AT@ 3131 @LENGTH@ 98
---DEL InfixExpression@@reader.nextTag() != START_ELEMENT @AT@ 3135 @LENGTH@ 33
------DEL MethodInvocation@@reader.nextTag() @AT@ 3135 @LENGTH@ 16
---------DEL SimpleName@@Name:reader @AT@ 3135 @LENGTH@ 6
---------DEL SimpleName@@MethodName:nextTag:[] @AT@ 3142 @LENGTH@ 9
------DEL Operator@@!= @AT@ 3151 @LENGTH@ 2
------DEL SimpleName@@START_ELEMENT @AT@ 3155 @LENGTH@ 13
---DEL Block@@ThenBody:{  throw unexpectedEndElement(reader);} @AT@ 3170 @LENGTH@ 59
------DEL ThrowStatement@@MethodInvocation:unexpectedEndElement(reader) @AT@ 3184 @LENGTH@ 35
---------DEL MethodInvocation@@unexpectedEndElement(reader) @AT@ 3190 @LENGTH@ 28
------------DEL SimpleName@@MethodName:unexpectedEndElement:[reader] @AT@ 3190 @LENGTH@ 28
---------------DEL SimpleName@@reader @AT@ 3211 @LENGTH@ 6


UPD IfStatement@@if (ejbJarFile.exists()) {  SubDeploymentMarker.mark(resourceRoot);} else {  final Index index=resourceRoot.getAttachment(Attachments.ANNOTATION_INDEX);  if (index != null) {    if (!index.getAnnotations(STATEFULL).isEmpty() || !index.getAnnotations(STATELESS).isEmpty() || !index.getAnnotations(MESSAGE_DRIVEN).isEmpty()|| !index.getAnnotations(SINGLETON).isEmpty()|| !index.getAnnotations(MANAGED_BEAN_ANNOTATION_NAME).isEmpty()) {      SubDeploymentMarker.mark(resourceRoot);    }  }} @TO@ if (ejbJarFile.exists()) {  SubDeploymentMarker.mark(resourceRoot);  ModuleRootMarker.mark(resourceRoot);} else {  final Index index=resourceRoot.getAttachment(Attachments.ANNOTATION_INDEX);  if (index != null) {    if (!index.getAnnotations(STATEFULL).isEmpty() || !index.getAnnotations(STATELESS).isEmpty() || !index.getAnnotations(MESSAGE_DRIVEN).isEmpty()|| !index.getAnnotations(SINGLETON).isEmpty()|| !index.getAnnotations(MANAGED_BEAN_ANNOTATION_NAME).isEmpty()) {      SubDeploymentMarker.mark(resourceRoot);      ModuleRootMarker.mark(resourceRoot);    }  }} @AT@ 3330 @LENGTH@ 912
---UPD Block@@ThenBody:{  SubDeploymentMarker.mark(resourceRoot);} @TO@ ThenBody:{  SubDeploymentMarker.mark(resourceRoot);  ModuleRootMarker.mark(resourceRoot);} @AT@ 3355 @LENGTH@ 71
------INS ExpressionStatement@@MethodInvocation:ModuleRootMarker.mark(resourceRoot) @TO@ Block@@ThenBody:{  SubDeploymentMarker.mark(resourceRoot);} @AT@ 3429 @LENGTH@ 36
---------INS MethodInvocation@@ModuleRootMarker.mark(resourceRoot) @TO@ ExpressionStatement@@MethodInvocation:ModuleRootMarker.mark(resourceRoot) @AT@ 3429 @LENGTH@ 35
------------INS SimpleName@@Name:ModuleRootMarker @TO@ MethodInvocation@@ModuleRootMarker.mark(resourceRoot) @AT@ 3429 @LENGTH@ 16
------------INS SimpleName@@MethodName:mark:[resourceRoot] @TO@ MethodInvocation@@ModuleRootMarker.mark(resourceRoot) @AT@ 3446 @LENGTH@ 18
---------------INS SimpleName@@resourceRoot @TO@ SimpleName@@MethodName:mark:[resourceRoot] @AT@ 3451 @LENGTH@ 12
---UPD Block@@ElseBody:{  final Index index=resourceRoot.getAttachment(Attachments.ANNOTATION_INDEX);  if (index != null) {    if (!index.getAnnotations(STATEFULL).isEmpty() || !index.getAnnotations(STATELESS).isEmpty() || !index.getAnnotations(MESSAGE_DRIVEN).isEmpty()|| !index.getAnnotations(SINGLETON).isEmpty()|| !index.getAnnotations(MANAGED_BEAN_ANNOTATION_NAME).isEmpty()) {      SubDeploymentMarker.mark(resourceRoot);    }  }} @TO@ ElseBody:{  final Index index=resourceRoot.getAttachment(Attachments.ANNOTATION_INDEX);  if (index != null) {    if (!index.getAnnotations(STATEFULL).isEmpty() || !index.getAnnotations(STATELESS).isEmpty() || !index.getAnnotations(MESSAGE_DRIVEN).isEmpty()|| !index.getAnnotations(SINGLETON).isEmpty()|| !index.getAnnotations(MANAGED_BEAN_ANNOTATION_NAME).isEmpty()) {      SubDeploymentMarker.mark(resourceRoot);      ModuleRootMarker.mark(resourceRoot);    }  }} @AT@ 3432 @LENGTH@ 810
------UPD IfStatement@@if (index != null) {  if (!index.getAnnotations(STATEFULL).isEmpty() || !index.getAnnotations(STATELESS).isEmpty() || !index.getAnnotations(MESSAGE_DRIVEN).isEmpty()|| !index.getAnnotations(SINGLETON).isEmpty()|| !index.getAnnotations(MANAGED_BEAN_ANNOTATION_NAME).isEmpty()) {    SubDeploymentMarker.mark(resourceRoot);  }} @TO@ if (index != null) {  if (!index.getAnnotations(STATEFULL).isEmpty() || !index.getAnnotations(STATELESS).isEmpty() || !index.getAnnotations(MESSAGE_DRIVEN).isEmpty()|| !index.getAnnotations(SINGLETON).isEmpty()|| !index.getAnnotations(MANAGED_BEAN_ANNOTATION_NAME).isEmpty()) {    SubDeploymentMarker.mark(resourceRoot);    ModuleRootMarker.mark(resourceRoot);  }} @AT@ 3544 @LENGTH@ 684
---------UPD Block@@ThenBody:{  if (!index.getAnnotations(STATEFULL).isEmpty() || !index.getAnnotations(STATELESS).isEmpty() || !index.getAnnotations(MESSAGE_DRIVEN).isEmpty()|| !index.getAnnotations(SINGLETON).isEmpty()|| !index.getAnnotations(MANAGED_BEAN_ANNOTATION_NAME).isEmpty()) {    SubDeploymentMarker.mark(resourceRoot);  }} @TO@ ThenBody:{  if (!index.getAnnotations(STATEFULL).isEmpty() || !index.getAnnotations(STATELESS).isEmpty() || !index.getAnnotations(MESSAGE_DRIVEN).isEmpty()|| !index.getAnnotations(SINGLETON).isEmpty()|| !index.getAnnotations(MANAGED_BEAN_ANNOTATION_NAME).isEmpty()) {    SubDeploymentMarker.mark(resourceRoot);    ModuleRootMarker.mark(resourceRoot);  }} @AT@ 3563 @LENGTH@ 665
------------UPD IfStatement@@if (!index.getAnnotations(STATEFULL).isEmpty() || !index.getAnnotations(STATELESS).isEmpty() || !index.getAnnotations(MESSAGE_DRIVEN).isEmpty()|| !index.getAnnotations(SINGLETON).isEmpty()|| !index.getAnnotations(MANAGED_BEAN_ANNOTATION_NAME).isEmpty()) {  SubDeploymentMarker.mark(resourceRoot);} @TO@ if (!index.getAnnotations(STATEFULL).isEmpty() || !index.getAnnotations(STATELESS).isEmpty() || !index.getAnnotations(MESSAGE_DRIVEN).isEmpty()|| !index.getAnnotations(SINGLETON).isEmpty()|| !index.getAnnotations(MANAGED_BEAN_ANNOTATION_NAME).isEmpty()) {  SubDeploymentMarker.mark(resourceRoot);  ModuleRootMarker.mark(resourceRoot);} @AT@ 3585 @LENGTH@ 625
---------------UPD Block@@ThenBody:{  SubDeploymentMarker.mark(resourceRoot);} @TO@ ThenBody:{  SubDeploymentMarker.mark(resourceRoot);  ModuleRootMarker.mark(resourceRoot);} @AT@ 3952 @LENGTH@ 258
------------------INS ExpressionStatement@@MethodInvocation:ModuleRootMarker.mark(resourceRoot) @TO@ Block@@ThenBody:{  SubDeploymentMarker.mark(resourceRoot);} @AT@ 4266 @LENGTH@ 36
---------------------INS MethodInvocation@@ModuleRootMarker.mark(resourceRoot) @TO@ ExpressionStatement@@MethodInvocation:ModuleRootMarker.mark(resourceRoot) @AT@ 4266 @LENGTH@ 35
------------------------INS SimpleName@@Name:ModuleRootMarker @TO@ MethodInvocation@@ModuleRootMarker.mark(resourceRoot) @AT@ 4266 @LENGTH@ 16
------------------------INS SimpleName@@MethodName:mark:[resourceRoot] @TO@ MethodInvocation@@ModuleRootMarker.mark(resourceRoot) @AT@ 4283 @LENGTH@ 18
---------------------------INS SimpleName@@resourceRoot @TO@ SimpleName@@MethodName:mark:[resourceRoot] @AT@ 4288 @LENGTH@ 12


INS FieldDeclaration@@public, static, final, String, [AUTH_HEADER="oauth2 "] @TO@ TypeDeclaration@@[public]OAuth2ProtectedResourceFilter, GenericFilterBean @AT@ 1236 @LENGTH@ 51
---INS Modifier@@public @TO@ FieldDeclaration@@public, static, final, String, [AUTH_HEADER="oauth2 "] @AT@ 1236 @LENGTH@ 6
---INS Modifier@@static @TO@ FieldDeclaration@@public, static, final, String, [AUTH_HEADER="oauth2 "] @AT@ 1243 @LENGTH@ 6
---INS Modifier@@final @TO@ FieldDeclaration@@public, static, final, String, [AUTH_HEADER="oauth2 "] @AT@ 1250 @LENGTH@ 5
---INS SimpleType@@String @TO@ FieldDeclaration@@public, static, final, String, [AUTH_HEADER="oauth2 "] @AT@ 1256 @LENGTH@ 6
---INS VariableDeclarationFragment@@AUTH_HEADER="oauth2 " @TO@ FieldDeclaration@@public, static, final, String, [AUTH_HEADER="oauth2 "] @AT@ 1263 @LENGTH@ 23
------INS SimpleName@@AUTH_HEADER @TO@ VariableDeclarationFragment@@AUTH_HEADER="oauth2 " @AT@ 1263 @LENGTH@ 11
------INS StringLiteral@@"oauth2 " @TO@ VariableDeclarationFragment@@AUTH_HEADER="oauth2 " @AT@ 1277 @LENGTH@ 9


UPD Block@@SyncBody:{  outputStream.write(ModelControllerClientProtocol.PARAM_HANDLE_RESULT_COMPLETE);  outputStream.write(ModelControllerClientProtocol.PARAM_OPERATION);  result.getCompensatingOperation().writeExternal(outputStream);  outputStream.flush();} @TO@ SyncBody:{  outputStream.write(ModelControllerClientProtocol.PARAM_HANDLE_RESULT_COMPLETE);  outputStream.write(ModelControllerClientProtocol.PARAM_OPERATION);  ModelNode compensating=result.getCompensatingOperation() != null ? result.getCompensatingOperation() : new ModelNode();  compensating.writeExternal(outputStream);  outputStream.flush();} @AT@ 11030 @LENGTH@ 351
---INS VariableDeclarationStatement@@ModelNode compensating=result.getCompensatingOperation() != null ? result.getCompensatingOperation() : new ModelNode(); @TO@ Block@@SyncBody:{  outputStream.write(ModelControllerClientProtocol.PARAM_HANDLE_RESULT_COMPLETE);  outputStream.write(ModelControllerClientProtocol.PARAM_OPERATION);  result.getCompensatingOperation().writeExternal(outputStream);  outputStream.flush();} @AT@ 11251 @LENGTH@ 121
------INS SimpleType@@ModelNode @TO@ VariableDeclarationStatement@@ModelNode compensating=result.getCompensatingOperation() != null ? result.getCompensatingOperation() : new ModelNode(); @AT@ 11251 @LENGTH@ 9
------INS VariableDeclarationFragment@@compensating=result.getCompensatingOperation() != null ? result.getCompensatingOperation() : new ModelNode() @TO@ VariableDeclarationStatement@@ModelNode compensating=result.getCompensatingOperation() != null ? result.getCompensatingOperation() : new ModelNode(); @AT@ 11261 @LENGTH@ 110
---------INS SimpleName@@compensating @TO@ VariableDeclarationFragment@@compensating=result.getCompensatingOperation() != null ? result.getCompensatingOperation() : new ModelNode() @AT@ 11261 @LENGTH@ 12
---------INS ConditionalExpression@@result.getCompensatingOperation() != null ? result.getCompensatingOperation() : new ModelNode() @TO@ VariableDeclarationFragment@@compensating=result.getCompensatingOperation() != null ? result.getCompensatingOperation() : new ModelNode() @AT@ 11276 @LENGTH@ 95
------------INS InfixExpression@@result.getCompensatingOperation() != null @TO@ ConditionalExpression@@result.getCompensatingOperation() != null ? result.getCompensatingOperation() : new ModelNode() @AT@ 11276 @LENGTH@ 41
---------------INS MethodInvocation@@result.getCompensatingOperation() @TO@ InfixExpression@@result.getCompensatingOperation() != null @AT@ 11276 @LENGTH@ 33
------------------INS SimpleName@@Name:result @TO@ MethodInvocation@@result.getCompensatingOperation() @AT@ 11276 @LENGTH@ 6
------------------INS SimpleName@@MethodName:getCompensatingOperation:[] @TO@ MethodInvocation@@result.getCompensatingOperation() @AT@ 11283 @LENGTH@ 26
---------------INS Operator@@!= @TO@ InfixExpression@@result.getCompensatingOperation() != null @AT@ 11309 @LENGTH@ 2
---------------INS NullLiteral@@null @TO@ InfixExpression@@result.getCompensatingOperation() != null @AT@ 11313 @LENGTH@ 4
------------INS MethodInvocation@@result.getCompensatingOperation() @TO@ ConditionalExpression@@result.getCompensatingOperation() != null ? result.getCompensatingOperation() : new ModelNode() @AT@ 11320 @LENGTH@ 33
---------------INS SimpleName@@Name:result @TO@ MethodInvocation@@result.getCompensatingOperation() @AT@ 11320 @LENGTH@ 6
---------------INS SimpleName@@MethodName:getCompensatingOperation:[] @TO@ MethodInvocation@@result.getCompensatingOperation() @AT@ 11327 @LENGTH@ 26
------------INS ClassInstanceCreation@@ModelNode[] @TO@ ConditionalExpression@@result.getCompensatingOperation() != null ? result.getCompensatingOperation() : new ModelNode() @AT@ 11356 @LENGTH@ 15
---------------INS New@@new @TO@ ClassInstanceCreation@@ModelNode[] @AT@ 11356 @LENGTH@ 3
---------------INS SimpleType@@ModelNode @TO@ ClassInstanceCreation@@ModelNode[] @AT@ 11360 @LENGTH@ 9
---UPD ExpressionStatement@@MethodInvocation:result.getCompensatingOperation().writeExternal(outputStream) @TO@ MethodInvocation:compensating.writeExternal(outputStream) @AT@ 11251 @LENGTH@ 62
------UPD MethodInvocation@@result.getCompensatingOperation().writeExternal(outputStream) @TO@ compensating.writeExternal(outputStream) @AT@ 11251 @LENGTH@ 61
---------DEL MethodInvocation@@MethodName:getCompensatingOperation:[] @AT@ 11251 @LENGTH@ 33
---------UPD SimpleName@@Name:result @TO@ Name:compensating @AT@ 11251 @LENGTH@ 6


UPD VariableDeclarationStatement@@final ServiceName deploymentUnitServiceName=Services.JBOSS_DEPLOYMENT_UNIT.append(deploymentUnitName); @TO@ final ServiceName deploymentUnitServiceName=Services.JBOSS_DEPLOYMENT.append(deploymentUnitName); @AT@ 3305 @LENGTH@ 104
---UPD VariableDeclarationFragment@@deploymentUnitServiceName=Services.JBOSS_DEPLOYMENT_UNIT.append(deploymentUnitName) @TO@ deploymentUnitServiceName=Services.JBOSS_DEPLOYMENT.append(deploymentUnitName) @AT@ 3323 @LENGTH@ 85
------UPD MethodInvocation@@Services.JBOSS_DEPLOYMENT_UNIT.append(deploymentUnitName) @TO@ Services.JBOSS_DEPLOYMENT.append(deploymentUnitName) @AT@ 3351 @LENGTH@ 57
---------UPD QualifiedName@@Name:Services.JBOSS_DEPLOYMENT_UNIT @TO@ Name:Services.JBOSS_DEPLOYMENT @AT@ 3351 @LENGTH@ 30


UPD TypeDeclaration@@[public]ManagedBeanComponent, AbstractComponent<T> @TO@ [public]ManagedBeanComponent, AbstractComponent @AT@ 1539 @LENGTH@ 501
---INS SimpleType@@AbstractComponent @TO@ TypeDeclaration@@[public]ManagedBeanComponent, AbstractComponent<T> @AT@ 1535 @LENGTH@ 17
---DEL ParameterizedType@@AbstractComponent<T> @AT@ 1584 @LENGTH@ 20
------DEL SimpleType@@AbstractComponent @AT@ 1584 @LENGTH@ 17
------DEL SimpleType@@T @AT@ 1602 @LENGTH@ 1


UPD MethodDeclaration@@private, HttpPrincipal, MethodName:validateUser, Map<String,String> challengeParameters,  @TO@ private, HttpPrincipal, MethodName:validateUser, HttpExchange httpExchange, Map<String,String> challengeParameters,  @AT@ 5324 @LENGTH@ 2802
---INS SingleVariableDeclaration@@HttpExchange httpExchange @TO@ MethodDeclaration@@private, HttpPrincipal, MethodName:validateUser, Map<String,String> challengeParameters,  @AT@ 5373 @LENGTH@ 25
------INS SimpleType@@HttpExchange @TO@ SingleVariableDeclaration@@HttpExchange httpExchange @AT@ 5373 @LENGTH@ 12
------INS SimpleName@@httpExchange @TO@ SingleVariableDeclaration@@HttpExchange httpExchange @AT@ 5386 @LENGTH@ 12
---UPD TryStatement@@try {  MessageDigest md=MessageDigest.getInstance(MD5);  md.update(challengeParameters.get(USERNAME).getBytes());  md.update(COLON);  md.update(challengeParameters.get(REALM).getBytes());  md.update(COLON);  md.update(new String(pcb.getPassword()).getBytes());  byte[] ha1=HexUtil.convertToHexBytes(md.digest());  md.update(GET.getBytes());  md.update(COLON);  md.update(challengeParameters.get(URI).getBytes());  byte[] ha2=HexUtil.convertToHexBytes(md.digest());  md.update(ha1);  md.update(COLON);  md.update(challengeParameters.get(NONCE).getBytes());  md.update(COLON);  md.update(ha2);  byte[] expectedResponse=HexUtil.convertToHexBytes(md.digest());  byte[] actualResponse=challengeParameters.get(RESPONSE).getBytes();  if (MessageDigest.isEqual(expectedResponse,actualResponse)) {    return new HttpPrincipal(challengeParameters.get(USERNAME),challengeParameters.get(REALM));  }} catch (NoSuchAlgorithmException e) {  throw new IllegalStateException("Unable to perform digest validation as MD5 is unavailable.",e);} @TO@ try {  MessageDigest md=MessageDigest.getInstance(MD5);  md.update(challengeParameters.get(USERNAME).getBytes());  md.update(COLON);  md.update(challengeParameters.get(REALM).getBytes());  md.update(COLON);  md.update(new String(pcb.getPassword()).getBytes());  byte[] ha1=HexUtil.convertToHexBytes(md.digest());  md.update(httpExchange.getRequestMethod().getBytes());  md.update(COLON);  md.update(challengeParameters.get(URI).getBytes());  byte[] ha2=HexUtil.convertToHexBytes(md.digest());  md.update(ha1);  md.update(COLON);  md.update(challengeParameters.get(NONCE).getBytes());  md.update(COLON);  md.update(ha2);  byte[] expectedResponse=HexUtil.convertToHexBytes(md.digest());  byte[] actualResponse=challengeParameters.get(RESPONSE).getBytes();  if (MessageDigest.isEqual(expectedResponse,actualResponse)) {    return new HttpPrincipal(challengeParameters.get(USERNAME),challengeParameters.get(REALM));  }} catch (NoSuchAlgorithmException e) {  throw new IllegalStateException("Unable to perform digest validation as MD5 is unavailable.",e);} @AT@ 6649 @LENGTH@ 1449
------UPD ExpressionStatement@@MethodInvocation:md.update(GET.getBytes()) @TO@ MethodInvocation:md.update(httpExchange.getRequestMethod().getBytes()) @AT@ 7201 @LENGTH@ 26
---------UPD MethodInvocation@@md.update(GET.getBytes()) @TO@ md.update(httpExchange.getRequestMethod().getBytes()) @AT@ 7201 @LENGTH@ 25
------------UPD SimpleName@@MethodName:update:[GET.getBytes()] @TO@ MethodName:update:[httpExchange.getRequestMethod().getBytes()] @AT@ 7204 @LENGTH@ 22
---------------UPD MethodInvocation@@GET.getBytes() @TO@ httpExchange.getRequestMethod().getBytes() @AT@ 7211 @LENGTH@ 14
------------------UPD SimpleName@@Name:GET @TO@ Name:httpExchange @AT@ 7211 @LENGTH@ 3
------------------INS MethodInvocation@@MethodName:getRequestMethod:[] @TO@ MethodInvocation@@GET.getBytes() @AT@ 7252 @LENGTH@ 31


UPD MethodDeclaration@@String, MethodName:decode, String pString, DecoderException,  @TO@ String, MethodName:decode, String source, DecoderException,  @AT@ 1277 @LENGTH@ 47
---UPD SingleVariableDeclaration@@String pString @TO@ String source @AT@ 1284 @LENGTH@ 14
------UPD SimpleName@@pString @TO@ source @AT@ 1291 @LENGTH@ 7


UPD ExpressionStatement@@MethodInvocation:update.get(OP).set("set-server-name") @TO@ MethodInvocation:update.get(OP).set("write-server-name") @AT@ 15059 @LENGTH@ 38
---UPD MethodInvocation@@update.get(OP).set("set-server-name") @TO@ update.get(OP).set("write-server-name") @AT@ 15059 @LENGTH@ 37
------UPD SimpleName@@MethodName:set:["set-server-name"] @TO@ MethodName:set:["write-server-name"] @AT@ 15074 @LENGTH@ 22
---------UPD StringLiteral@@"set-server-name" @TO@ "write-server-name" @AT@ 15078 @LENGTH@ 17


UPD ExpressionStatement@@MethodInvocation:updateContext.addDeploymentProcessor(Phase.PARSE,new DataSourcesAttachmentProcessor(datasources),Phase.PARSE_DATA_SOURCES) @TO@ MethodInvocation:updateContext.addDeploymentProcessor(Phase.PARSE,Phase.PARSE_DATA_SOURCES,new DataSourcesAttachmentProcessor(datasources)) @AT@ 3174 @LENGTH@ 125
---UPD MethodInvocation@@updateContext.addDeploymentProcessor(Phase.PARSE,new DataSourcesAttachmentProcessor(datasources),Phase.PARSE_DATA_SOURCES) @TO@ updateContext.addDeploymentProcessor(Phase.PARSE,Phase.PARSE_DATA_SOURCES,new DataSourcesAttachmentProcessor(datasources)) @AT@ 3174 @LENGTH@ 124
------UPD SimpleName@@MethodName:addDeploymentProcessor:[Phase.PARSE, new DataSourcesAttachmentProcessor(datasources), Phase.PARSE_DATA_SOURCES] @TO@ MethodName:addDeploymentProcessor:[Phase.PARSE, Phase.PARSE_DATA_SOURCES, new DataSourcesAttachmentProcessor(datasources)] @AT@ 3188 @LENGTH@ 110
---------INS QualifiedName@@Phase.PARSE_DATA_SOURCES @TO@ SimpleName@@MethodName:addDeploymentProcessor:[Phase.PARSE, new DataSourcesAttachmentProcessor(datasources), Phase.PARSE_DATA_SOURCES] @AT@ 2850 @LENGTH@ 24
------------INS SimpleName@@Phase @TO@ QualifiedName@@Phase.PARSE_DATA_SOURCES @AT@ 2850 @LENGTH@ 5
------------INS SimpleName@@PARSE_DATA_SOURCES @TO@ QualifiedName@@Phase.PARSE_DATA_SOURCES @AT@ 2856 @LENGTH@ 18
---------DEL QualifiedName@@Phase.PARSE_DATA_SOURCES @AT@ 3273 @LENGTH@ 24
------------DEL SimpleName@@Phase @AT@ 3273 @LENGTH@ 5
------------DEL SimpleName@@PARSE_DATA_SOURCES @AT@ 3279 @LENGTH@ 18


INS MethodDeclaration@@public, void, MethodName:preventsZeroSize,  @TO@ TypeDeclaration@@[public]PageRequestUnitTests,  @AT@ 1246 @LENGTH@ 70
---INS Modifier@@public @TO@ MethodDeclaration@@public, void, MethodName:preventsZeroSize,  @AT@ 1246 @LENGTH@ 6
---INS PrimitiveType@@void @TO@ MethodDeclaration@@public, void, MethodName:preventsZeroSize,  @AT@ 1253 @LENGTH@ 4
---INS SimpleName@@MethodName:preventsZeroSize @TO@ MethodDeclaration@@public, void, MethodName:preventsZeroSize,  @AT@ 1258 @LENGTH@ 16
---INS ExpressionStatement@@ClassInstanceCreation:new PageRequest(0,0) @TO@ MethodDeclaration@@public, void, MethodName:preventsZeroSize,  @AT@ 1288 @LENGTH@ 22
------INS ClassInstanceCreation@@PageRequest[0, 0] @TO@ ExpressionStatement@@ClassInstanceCreation:new PageRequest(0,0) @AT@ 1288 @LENGTH@ 21
---------INS New@@new @TO@ ClassInstanceCreation@@PageRequest[0, 0] @AT@ 1288 @LENGTH@ 3
---------INS SimpleType@@PageRequest @TO@ ClassInstanceCreation@@PageRequest[0, 0] @AT@ 1292 @LENGTH@ 11
---------INS NumberLiteral@@0 @TO@ ClassInstanceCreation@@PageRequest[0, 0] @AT@ 1304 @LENGTH@ 1
---------INS NumberLiteral@@0 @TO@ ClassInstanceCreation@@PageRequest[0, 0] @AT@ 1307 @LENGTH@ 1


UPD IfStatement@@if (type.isArray() && MappingBeanHelper.isSimpleType(type.getComponentType())) {  dbList.add(propObjItem);} else {  BasicDBObject propDbObj=new BasicDBObject();  write(propObjItem,propDbObj,mappingContext.getPersistentEntity(prop.getTypeInformation()));  dbList.add(propDbObj);} @TO@ if (type.isArray() && MappingBeanHelper.isSimpleType(type.getComponentType())) {  dbList.add(propObjItem);} else if (MappingBeanHelper.isSimpleType(propObjItem.getClass())) {  dbList.add(propObjItem);} else {  BasicDBObject propDbObj=new BasicDBObject();  write(propObjItem,propDbObj,mappingContext.getPersistentEntity(prop.getTypeInformation()));  dbList.add(propDbObj);} @AT@ 14788 @LENGTH@ 308
---INS Block@@ElseBody:if (MappingBeanHelper.isSimpleType(propObjItem.getClass())) {  dbList.add(propObjItem);} else {  BasicDBObject propDbObj=new BasicDBObject();  write(propObjItem,propDbObj,mappingContext.getPersistentEntity(prop.getTypeInformation()));  dbList.add(propDbObj);} @TO@ IfStatement@@if (type.isArray() && MappingBeanHelper.isSimpleType(type.getComponentType())) {  dbList.add(propObjItem);} else {  BasicDBObject propDbObj=new BasicDBObject();  write(propObjItem,propDbObj,mappingContext.getPersistentEntity(prop.getTypeInformation()));  dbList.add(propDbObj);} @AT@ 14924 @LENGTH@ 295
------INS IfStatement@@if (MappingBeanHelper.isSimpleType(propObjItem.getClass())) {  dbList.add(propObjItem);} else {  BasicDBObject propDbObj=new BasicDBObject();  write(propObjItem,propDbObj,mappingContext.getPersistentEntity(prop.getTypeInformation()));  dbList.add(propDbObj);} @TO@ Block@@ElseBody:if (MappingBeanHelper.isSimpleType(propObjItem.getClass())) {  dbList.add(propObjItem);} else {  BasicDBObject propDbObj=new BasicDBObject();  write(propObjItem,propDbObj,mappingContext.getPersistentEntity(prop.getTypeInformation()));  dbList.add(propDbObj);} @AT@ 14924 @LENGTH@ 295
---------MOV Block@@ElseBody:{  BasicDBObject propDbObj=new BasicDBObject();  write(propObjItem,propDbObj,mappingContext.getPersistentEntity(prop.getTypeInformation()));  dbList.add(propDbObj);} @TO@ IfStatement@@if (MappingBeanHelper.isSimpleType(propObjItem.getClass())) {  dbList.add(propObjItem);} else {  BasicDBObject propDbObj=new BasicDBObject();  write(propObjItem,propDbObj,mappingContext.getPersistentEntity(prop.getTypeInformation()));  dbList.add(propDbObj);} @AT@ 14910 @LENGTH@ 186
---------INS MethodInvocation@@MappingBeanHelper.isSimpleType(propObjItem.getClass()) @TO@ IfStatement@@if (MappingBeanHelper.isSimpleType(propObjItem.getClass())) {  dbList.add(propObjItem);} else {  BasicDBObject propDbObj=new BasicDBObject();  write(propObjItem,propDbObj,mappingContext.getPersistentEntity(prop.getTypeInformation()));  dbList.add(propDbObj);} @AT@ 14928 @LENGTH@ 54
------------INS SimpleName@@Name:MappingBeanHelper @TO@ MethodInvocation@@MappingBeanHelper.isSimpleType(propObjItem.getClass()) @AT@ 14928 @LENGTH@ 17
------------INS SimpleName@@MethodName:isSimpleType:[propObjItem.getClass()] @TO@ MethodInvocation@@MappingBeanHelper.isSimpleType(propObjItem.getClass()) @AT@ 14946 @LENGTH@ 36
---------------INS MethodInvocation@@propObjItem.getClass() @TO@ SimpleName@@MethodName:isSimpleType:[propObjItem.getClass()] @AT@ 14959 @LENGTH@ 22
------------------INS SimpleName@@Name:propObjItem @TO@ MethodInvocation@@propObjItem.getClass() @AT@ 14959 @LENGTH@ 11
------------------INS SimpleName@@MethodName:getClass:[] @TO@ MethodInvocation@@propObjItem.getClass() @AT@ 14971 @LENGTH@ 10
---------INS Block@@ThenBody:{  dbList.add(propObjItem);} @TO@ IfStatement@@if (MappingBeanHelper.isSimpleType(propObjItem.getClass())) {  dbList.add(propObjItem);} else {  BasicDBObject propDbObj=new BasicDBObject();  write(propObjItem,propDbObj,mappingContext.getPersistentEntity(prop.getTypeInformation()));  dbList.add(propDbObj);} @AT@ 14984 @LENGTH@ 43
------------INS ExpressionStatement@@MethodInvocation:dbList.add(propObjItem) @TO@ Block@@ThenBody:{  dbList.add(propObjItem);} @AT@ 14997 @LENGTH@ 24
---------------INS MethodInvocation@@dbList.add(propObjItem) @TO@ ExpressionStatement@@MethodInvocation:dbList.add(propObjItem) @AT@ 14997 @LENGTH@ 23
------------------INS SimpleName@@Name:dbList @TO@ MethodInvocation@@dbList.add(propObjItem) @AT@ 14997 @LENGTH@ 6
------------------INS SimpleName@@MethodName:add:[propObjItem] @TO@ MethodInvocation@@dbList.add(propObjItem) @AT@ 15004 @LENGTH@ 16
---------------------INS SimpleName@@propObjItem @TO@ SimpleName@@MethodName:add:[propObjItem] @AT@ 15008 @LENGTH@ 11
------INS IfStatement@@if (MappingBeanHelper.isSimpleType(propObjItem.getClass())) {  dbList.add(propObjItem);} else {  BasicDBObject propDbObj=new BasicDBObject();  write(propObjItem,propDbObj,mappingContext.getPersistentEntity(prop.getTypeInformation()));  dbList.add(propDbObj);} @TO@ Block@@ElseBody:if (MappingBeanHelper.isSimpleType(propObjItem.getClass())) {  dbList.add(propObjItem);} else {  BasicDBObject propDbObj=new BasicDBObject();  write(propObjItem,propDbObj,mappingContext.getPersistentEntity(prop.getTypeInformation()));  dbList.add(propDbObj);} @AT@ 14924 @LENGTH@ 295
---------MOV Block@@ElseBody:{  BasicDBObject propDbObj=new BasicDBObject();  write(propObjItem,propDbObj,mappingContext.getPersistentEntity(prop.getTypeInformation()));  dbList.add(propDbObj);} @TO@ IfStatement@@if (MappingBeanHelper.isSimpleType(propObjItem.getClass())) {  dbList.add(propObjItem);} else {  BasicDBObject propDbObj=new BasicDBObject();  write(propObjItem,propDbObj,mappingContext.getPersistentEntity(prop.getTypeInformation()));  dbList.add(propDbObj);} @AT@ 14910 @LENGTH@ 186
---------INS MethodInvocation@@MappingBeanHelper.isSimpleType(propObjItem.getClass()) @TO@ IfStatement@@if (MappingBeanHelper.isSimpleType(propObjItem.getClass())) {  dbList.add(propObjItem);} else {  BasicDBObject propDbObj=new BasicDBObject();  write(propObjItem,propDbObj,mappingContext.getPersistentEntity(prop.getTypeInformation()));  dbList.add(propDbObj);} @AT@ 14928 @LENGTH@ 54
------------INS SimpleName@@Name:MappingBeanHelper @TO@ MethodInvocation@@MappingBeanHelper.isSimpleType(propObjItem.getClass()) @AT@ 14928 @LENGTH@ 17
------------INS SimpleName@@MethodName:isSimpleType:[propObjItem.getClass()] @TO@ MethodInvocation@@MappingBeanHelper.isSimpleType(propObjItem.getClass()) @AT@ 14946 @LENGTH@ 36
---------------INS MethodInvocation@@propObjItem.getClass() @TO@ SimpleName@@MethodName:isSimpleType:[propObjItem.getClass()] @AT@ 14959 @LENGTH@ 22
------------------INS SimpleName@@Name:propObjItem @TO@ MethodInvocation@@propObjItem.getClass() @AT@ 14959 @LENGTH@ 11
------------------INS SimpleName@@MethodName:getClass:[] @TO@ MethodInvocation@@propObjItem.getClass() @AT@ 14971 @LENGTH@ 10
---------INS Block@@ThenBody:{  dbList.add(propObjItem);} @TO@ IfStatement@@if (MappingBeanHelper.isSimpleType(propObjItem.getClass())) {  dbList.add(propObjItem);} else {  BasicDBObject propDbObj=new BasicDBObject();  write(propObjItem,propDbObj,mappingContext.getPersistentEntity(prop.getTypeInformation()));  dbList.add(propDbObj);} @AT@ 14984 @LENGTH@ 43
------------INS ExpressionStatement@@MethodInvocation:dbList.add(propObjItem) @TO@ Block@@ThenBody:{  dbList.add(propObjItem);} @AT@ 14997 @LENGTH@ 24
---------------INS MethodInvocation@@dbList.add(propObjItem) @TO@ ExpressionStatement@@MethodInvocation:dbList.add(propObjItem) @AT@ 14997 @LENGTH@ 23
------------------INS SimpleName@@Name:dbList @TO@ MethodInvocation@@dbList.add(propObjItem) @AT@ 14997 @LENGTH@ 6
------------------INS SimpleName@@MethodName:add:[propObjItem] @TO@ MethodInvocation@@dbList.add(propObjItem) @AT@ 15004 @LENGTH@ 16
---------------------INS SimpleName@@propObjItem @TO@ SimpleName@@MethodName:add:[propObjItem] @AT@ 15008 @LENGTH@ 11


UPD MethodDeclaration@@public, boolean, MethodName:canAppearNext, CommandContext ctx,  @TO@ public, boolean, MethodName:canAppearNext, CommandContext ctx, CommandFormatException,  @AT@ 3995 @LENGTH@ 207
---INS SimpleType@@CommandFormatException @TO@ MethodDeclaration@@public, boolean, MethodName:canAppearNext, CommandContext ctx,  @AT@ 4051 @LENGTH@ 22


UPD IfStatement@@if (osName.startsWith("macos")) {  bindingsName="keybindings/jline-mac-bindings.properties";} else {  bindingsName="keybindings/jline-default-bindings.properties";} @TO@ if (osName.startsWith("mac")) {  bindingsName="keybindings/jline-mac-bindings.properties";} else {  bindingsName="keybindings/jline-default-bindings.properties";} @AT@ 7844 @LENGTH@ 207
---UPD MethodInvocation@@osName.startsWith("macos") @TO@ osName.startsWith("mac") @AT@ 7847 @LENGTH@ 26
------UPD SimpleName@@MethodName:startsWith:["macos"] @TO@ MethodName:startsWith:["mac"] @AT@ 7854 @LENGTH@ 19
---------UPD StringLiteral@@"macos" @TO@ "mac" @AT@ 7865 @LENGTH@ 7


INS IfStatement@@if (controller != null) {  controller.setMode(ServiceController.Mode.REMOVE);  final MultipleRemoveListener<LifecycleContext> listener=MultipleRemoveListener.create(context);  controller.addListener(listener);  listener.done();} @TO@ MethodDeclaration@@public, synchronized, void, MethodName:stop, final StopContext context,  @AT@ 4661 @LENGTH@ 283
---INS InfixExpression@@controller != null @TO@ IfStatement@@if (controller != null) {  controller.setMode(ServiceController.Mode.REMOVE);  final MultipleRemoveListener<LifecycleContext> listener=MultipleRemoveListener.create(context);  controller.addListener(listener);  listener.done();} @AT@ 4665 @LENGTH@ 18
------INS SimpleName@@controller @TO@ InfixExpression@@controller != null @AT@ 4665 @LENGTH@ 10
------INS Operator@@!= @TO@ InfixExpression@@controller != null @AT@ 4675 @LENGTH@ 2
------INS NullLiteral@@null @TO@ InfixExpression@@controller != null @AT@ 4679 @LENGTH@ 4
---INS Block@@ThenBody:{  controller.setMode(ServiceController.Mode.REMOVE);  final MultipleRemoveListener<LifecycleContext> listener=MultipleRemoveListener.create(context);  controller.addListener(listener);  listener.done();} @TO@ IfStatement@@if (controller != null) {  controller.setMode(ServiceController.Mode.REMOVE);  final MultipleRemoveListener<LifecycleContext> listener=MultipleRemoveListener.create(context);  controller.addListener(listener);  listener.done();} @AT@ 4685 @LENGTH@ 259
------MOV ExpressionStatement@@MethodInvocation:controller.setMode(ServiceController.Mode.REMOVE) @TO@ Block@@ThenBody:{  controller.setMode(ServiceController.Mode.REMOVE);  final MultipleRemoveListener<LifecycleContext> listener=MultipleRemoveListener.create(context);  controller.addListener(listener);  listener.done();} @AT@ 4664 @LENGTH@ 50
------MOV VariableDeclarationStatement@@final MultipleRemoveListener<LifecycleContext> listener=MultipleRemoveListener.create(context); @TO@ Block@@ThenBody:{  controller.setMode(ServiceController.Mode.REMOVE);  final MultipleRemoveListener<LifecycleContext> listener=MultipleRemoveListener.create(context);  controller.addListener(listener);  listener.done();} @AT@ 4723 @LENGTH@ 97
------MOV ExpressionStatement@@MethodInvocation:controller.addListener(listener) @TO@ Block@@ThenBody:{  controller.setMode(ServiceController.Mode.REMOVE);  final MultipleRemoveListener<LifecycleContext> listener=MultipleRemoveListener.create(context);  controller.addListener(listener);  listener.done();} @AT@ 4829 @LENGTH@ 33
------MOV ExpressionStatement@@MethodInvocation:listener.done() @TO@ Block@@ThenBody:{  controller.setMode(ServiceController.Mode.REMOVE);  final MultipleRemoveListener<LifecycleContext> listener=MultipleRemoveListener.create(context);  controller.addListener(listener);  listener.done();} @AT@ 4871 @LENGTH@ 16


INS ExpressionStatement@@Assignment:directory=endpoint.getConfiguration().normalizePath(directory) @TO@ MethodDeclaration@@public, boolean, MethodName:buildDirectory, String directory, boolean absolute, GenericFileOperationFailedException,  @AT@ 10238 @LENGTH@ 65
---INS Assignment@@directory=endpoint.getConfiguration().normalizePath(directory) @TO@ ExpressionStatement@@Assignment:directory=endpoint.getConfiguration().normalizePath(directory) @AT@ 10238 @LENGTH@ 64
------INS SimpleName@@directory @TO@ Assignment@@directory=endpoint.getConfiguration().normalizePath(directory) @AT@ 10238 @LENGTH@ 9
------INS Operator@@= @TO@ Assignment@@directory=endpoint.getConfiguration().normalizePath(directory) @AT@ 10247 @LENGTH@ 1
------INS MethodInvocation@@endpoint.getConfiguration().normalizePath(directory) @TO@ Assignment@@directory=endpoint.getConfiguration().normalizePath(directory) @AT@ 10250 @LENGTH@ 52
---------INS MethodInvocation@@MethodName:getConfiguration:[] @TO@ MethodInvocation@@endpoint.getConfiguration().normalizePath(directory) @AT@ 10250 @LENGTH@ 27
---------INS SimpleName@@Name:endpoint @TO@ MethodInvocation@@endpoint.getConfiguration().normalizePath(directory) @AT@ 10250 @LENGTH@ 8
---------INS SimpleName@@MethodName:normalizePath:[directory] @TO@ MethodInvocation@@endpoint.getConfiguration().normalizePath(directory) @AT@ 10278 @LENGTH@ 24
------------INS SimpleName@@directory @TO@ SimpleName@@MethodName:normalizePath:[directory] @AT@ 10292 @LENGTH@ 9


DEL ForStatement@@for (; ; ) {switch (reader.nextTag()) {case START_ELEMENT:{      readHeadComment(reader,address,list);      if (Namespace.forUri(reader.getNamespaceURI()) != Namespace.DOMAIN_1_0) {        throw unexpectedElement(reader);      }switch (Element.forName(reader.getLocalName())) {default :        throw unexpectedElement(reader);    }  }case END_ELEMENT:{  readTailComment(reader,address,list);  return;}default :throw new IllegalStateException();}} @AT@ 6858 @LENGTH@ 723
---DEL SwitchStatement@@switch (reader.nextTag()) {case START_ELEMENT:{    readHeadComment(reader,address,list);    if (Namespace.forUri(reader.getNamespaceURI()) != Namespace.DOMAIN_1_0) {      throw unexpectedElement(reader);    }switch (Element.forName(reader.getLocalName())) {default :      throw unexpectedElement(reader);  }}case END_ELEMENT:{readTailComment(reader,address,list);return;}default :throw new IllegalStateException();} @AT@ 6881 @LENGTH@ 690
------DEL MethodInvocation@@reader.nextTag() @AT@ 6889 @LENGTH@ 16
---------DEL SimpleName@@Name:reader @AT@ 6889 @LENGTH@ 6
---------DEL SimpleName@@MethodName:nextTag:[] @AT@ 6896 @LENGTH@ 9
------DEL SwitchCase@@case START_ELEMENT: @AT@ 6925 @LENGTH@ 19
---------DEL SimpleName@@START_ELEMENT @AT@ 6930 @LENGTH@ 13
------DEL ExpressionStatement@@MethodInvocation:readHeadComment(reader,address,list) @AT@ 6967 @LENGTH@ 39
---------DEL MethodInvocation@@readHeadComment(reader,address,list) @AT@ 6967 @LENGTH@ 38
------------DEL SimpleName@@MethodName:readHeadComment:[reader, address, list] @AT@ 6967 @LENGTH@ 38
---------------DEL SimpleName@@reader @AT@ 6983 @LENGTH@ 6
---------------DEL SimpleName@@address @AT@ 6991 @LENGTH@ 7
---------------DEL SimpleName@@list @AT@ 7000 @LENGTH@ 4
------DEL IfStatement@@if (Namespace.forUri(reader.getNamespaceURI()) != Namespace.DOMAIN_1_0) {  throw unexpectedElement(reader);} @AT@ 7027 @LENGTH@ 152
---------DEL InfixExpression@@Namespace.forUri(reader.getNamespaceURI()) != Namespace.DOMAIN_1_0 @AT@ 7031 @LENGTH@ 66
------------DEL MethodInvocation@@Namespace.forUri(reader.getNamespaceURI()) @AT@ 7031 @LENGTH@ 42
---------------DEL SimpleName@@Name:Namespace @AT@ 7031 @LENGTH@ 9
---------------DEL SimpleName@@MethodName:forUri:[reader.getNamespaceURI()] @AT@ 7041 @LENGTH@ 32
------------------DEL MethodInvocation@@reader.getNamespaceURI() @AT@ 7048 @LENGTH@ 24
---------------------DEL SimpleName@@Name:reader @AT@ 7048 @LENGTH@ 6
---------------------DEL SimpleName@@MethodName:getNamespaceURI:[] @AT@ 7055 @LENGTH@ 17
------------DEL Operator@@!= @AT@ 7073 @LENGTH@ 2
------------DEL QualifiedName@@Namespace.DOMAIN_1_0 @AT@ 7077 @LENGTH@ 20
---------------DEL SimpleName@@Namespace @AT@ 7077 @LENGTH@ 9
---------------DEL SimpleName@@DOMAIN_1_0 @AT@ 7087 @LENGTH@ 10
---------DEL Block@@ThenBody:{  throw unexpectedElement(reader);} @AT@ 7099 @LENGTH@ 80
------------DEL ThrowStatement@@MethodInvocation:unexpectedElement(reader) @AT@ 7125 @LENGTH@ 32
---------------DEL MethodInvocation@@unexpectedElement(reader) @AT@ 7131 @LENGTH@ 25
------------------DEL SimpleName@@MethodName:unexpectedElement:[reader] @AT@ 7131 @LENGTH@ 25
---------------------DEL SimpleName@@reader @AT@ 7149 @LENGTH@ 6
------DEL SwitchStatement@@switch (Element.forName(reader.getLocalName())) {default :  throw unexpectedElement(reader);} @AT@ 7200 @LENGTH@ 137
---------DEL MethodInvocation@@Element.forName(reader.getLocalName()) @AT@ 7208 @LENGTH@ 38
------------DEL SimpleName@@Name:Element @AT@ 7208 @LENGTH@ 7
------------DEL SimpleName@@MethodName:forName:[reader.getLocalName()] @AT@ 7216 @LENGTH@ 30
---------------DEL MethodInvocation@@reader.getLocalName() @AT@ 7224 @LENGTH@ 21
------------------DEL SimpleName@@Name:reader @AT@ 7224 @LENGTH@ 6
------------------DEL SimpleName@@MethodName:getLocalName:[] @AT@ 7231 @LENGTH@ 14
---------DEL SwitchCase@@default @AT@ 7274 @LENGTH@ 8
---------DEL ThrowStatement@@MethodInvocation:unexpectedElement(reader) @AT@ 7283 @LENGTH@ 32
------------DEL MethodInvocation@@unexpectedElement(reader) @AT@ 7289 @LENGTH@ 25
---------------DEL SimpleName@@MethodName:unexpectedElement:[reader] @AT@ 7289 @LENGTH@ 25
------------------DEL SimpleName@@reader @AT@ 7307 @LENGTH@ 6
------DEL SwitchCase@@case END_ELEMENT: @AT@ 7372 @LENGTH@ 17
---------DEL SimpleName@@END_ELEMENT @AT@ 7377 @LENGTH@ 11
------DEL ExpressionStatement@@MethodInvocation:readTailComment(reader,address,list) @AT@ 7412 @LENGTH@ 39
---------DEL MethodInvocation@@readTailComment(reader,address,list) @AT@ 7412 @LENGTH@ 38
------------DEL SimpleName@@MethodName:readTailComment:[reader, address, list] @AT@ 7412 @LENGTH@ 38
---------------DEL SimpleName@@reader @AT@ 7428 @LENGTH@ 6
---------------DEL SimpleName@@address @AT@ 7436 @LENGTH@ 7
---------------DEL SimpleName@@list @AT@ 7445 @LENGTH@ 4
------DEL ReturnStatement@@ @AT@ 7472 @LENGTH@ 7
------DEL SwitchCase@@default @AT@ 7514 @LENGTH@ 8
------DEL ThrowStatement@@ClassInstanceCreation:new IllegalStateException() @AT@ 7523 @LENGTH@ 34
---------DEL ClassInstanceCreation@@IllegalStateException[] @AT@ 7529 @LENGTH@ 27
------------DEL New@@new @AT@ 7529 @LENGTH@ 3
------------DEL SimpleType@@IllegalStateException @AT@ 7533 @LENGTH@ 21


UPD ExpressionStatement@@MethodInvocation:deployers.get(Phase.INSTALL).add(new RegisteredProcessor(Phase.INSTALL_REFLECTION_INDEX,new InstallReflectionIndexProcessor())) @TO@ MethodInvocation:deployers.get(Phase.POST_MODULE).add(new RegisteredProcessor(Phase.POST_MODULE_REFLECTION_INDEX,new InstallReflectionIndexProcessor())) @AT@ 13700 @LENGTH@ 129
---UPD MethodInvocation@@deployers.get(Phase.INSTALL).add(new RegisteredProcessor(Phase.INSTALL_REFLECTION_INDEX,new InstallReflectionIndexProcessor())) @TO@ deployers.get(Phase.POST_MODULE).add(new RegisteredProcessor(Phase.POST_MODULE_REFLECTION_INDEX,new InstallReflectionIndexProcessor())) @AT@ 13700 @LENGTH@ 128
------UPD MethodInvocation@@MethodName:get:[Phase.INSTALL] @TO@ MethodName:get:[Phase.POST_MODULE] @AT@ 13700 @LENGTH@ 28
---------UPD QualifiedName@@Phase.INSTALL @TO@ Phase.POST_MODULE @AT@ 13714 @LENGTH@ 13
------------UPD SimpleName@@INSTALL @TO@ POST_MODULE @AT@ 13720 @LENGTH@ 7
------UPD SimpleName@@MethodName:add:[new RegisteredProcessor(Phase.INSTALL_REFLECTION_INDEX,new InstallReflectionIndexProcessor())] @TO@ MethodName:add:[new RegisteredProcessor(Phase.POST_MODULE_REFLECTION_INDEX,new InstallReflectionIndexProcessor())] @AT@ 13729 @LENGTH@ 99
---------UPD ClassInstanceCreation@@RegisteredProcessor[Phase.INSTALL_REFLECTION_INDEX, new InstallReflectionIndexProcessor()] @TO@ RegisteredProcessor[Phase.POST_MODULE_REFLECTION_INDEX, new InstallReflectionIndexProcessor()] @AT@ 13733 @LENGTH@ 94
------------UPD QualifiedName@@Phase.INSTALL_REFLECTION_INDEX @TO@ Phase.POST_MODULE_REFLECTION_INDEX @AT@ 13757 @LENGTH@ 30
---------------UPD SimpleName@@INSTALL_REFLECTION_INDEX @TO@ POST_MODULE_REFLECTION_INDEX @AT@ 13763 @LENGTH@ 24


UPD IfStatement@@if (!isWarDeployment(phaseContext)) {  return;} @TO@ if (!isWarDeployment(phaseContext.getDeploymentUnit())) {  return;} @AT@ 2112 @LENGTH@ 94
---UPD PrefixExpression@@!isWarDeployment(phaseContext) @TO@ !isWarDeployment(phaseContext.getDeploymentUnit()) @AT@ 2115 @LENGTH@ 30
------UPD MethodInvocation@@isWarDeployment(phaseContext) @TO@ isWarDeployment(phaseContext.getDeploymentUnit()) @AT@ 2116 @LENGTH@ 29
---------UPD SimpleName@@MethodName:isWarDeployment:[phaseContext] @TO@ MethodName:isWarDeployment:[phaseContext.getDeploymentUnit()] @AT@ 2116 @LENGTH@ 29
------------DEL SimpleName@@phaseContext @AT@ 2132 @LENGTH@ 12
------------INS MethodInvocation@@phaseContext.getDeploymentUnit() @TO@ SimpleName@@MethodName:isWarDeployment:[phaseContext] @AT@ 2192 @LENGTH@ 32
---------------INS SimpleName@@Name:phaseContext @TO@ MethodInvocation@@phaseContext.getDeploymentUnit() @AT@ 2192 @LENGTH@ 12
---------------INS SimpleName@@MethodName:getDeploymentUnit:[] @TO@ MethodInvocation@@phaseContext.getDeploymentUnit() @AT@ 2205 @LENGTH@ 19


UPD MethodDeclaration@@public, String, MethodName:home, Model model,  @TO@ public, String, MethodName:home, Principal user, Model model,  @AT@ 1474 @LENGTH@ 569
---UPD VariableDeclarationStatement@@List<ServiceProviderConnection<TwitterOperations>> connections=twitterProvider.getConnections(1); @TO@ List<ServiceProviderConnection<TwitterOperations>> connections=twitterProvider.getConnections(user.getName()); @AT@ 1510 @LENGTH@ 99
------UPD VariableDeclarationFragment@@connections=twitterProvider.getConnections(1) @TO@ connections=twitterProvider.getConnections(user.getName()) @AT@ 1561 @LENGTH@ 47
---------UPD MethodInvocation@@twitterProvider.getConnections(1) @TO@ twitterProvider.getConnections(user.getName()) @AT@ 1575 @LENGTH@ 33
------------UPD SimpleName@@MethodName:getConnections:[1] @TO@ MethodName:getConnections:[user.getName()] @AT@ 1591 @LENGTH@ 17
---------------DEL NumberLiteral@@1 @AT@ 1606 @LENGTH@ 1
---------------INS MethodInvocation@@user.getName() @TO@ SimpleName@@MethodName:getConnections:[1] @AT@ 1654 @LENGTH@ 14
------------------INS SimpleName@@Name:user @TO@ MethodInvocation@@user.getName() @AT@ 1654 @LENGTH@ 4
------------------INS SimpleName@@MethodName:getName:[] @TO@ MethodInvocation@@user.getName() @AT@ 1659 @LENGTH@ 9
---INS SingleVariableDeclaration@@Principal user @TO@ MethodDeclaration@@public, String, MethodName:home, Model model,  @AT@ 1525 @LENGTH@ 14
------INS SimpleType@@Principal @TO@ SingleVariableDeclaration@@Principal user @AT@ 1525 @LENGTH@ 9
------INS SimpleName@@user @TO@ SingleVariableDeclaration@@Principal user @AT@ 1535 @LENGTH@ 4
---UPD IfStatement@@if (connections.size() > 0) {  model.addAttribute("connections",connectionNames);  model.addAttribute(new TweetForm());  return "twitter";} @TO@ if (connections.size() > 0) {  model.addAttribute("connections",connectionNames);  model.addAttribute(new TweetForm());  return "twitter/twitter";} @AT@ 1852 @LENGTH@ 149
------UPD Block@@ThenBody:{  model.addAttribute("connections",connectionNames);  model.addAttribute(new TweetForm());  return "twitter";} @TO@ ThenBody:{  model.addAttribute("connections",connectionNames);  model.addAttribute(new TweetForm());  return "twitter/twitter";} @AT@ 1880 @LENGTH@ 121
---------UPD ReturnStatement@@StringLiteral:"twitter" @TO@ StringLiteral:"twitter/twitter" @AT@ 1980 @LENGTH@ 17
------------UPD StringLiteral@@"twitter" @TO@ "twitter/twitter" @AT@ 1987 @LENGTH@ 9


UPD ExpressionStatement@@MethodInvocation:System.out.println(zSet.rank(getT())) @TO@ MethodInvocation:assertNull(zSet.rank(getT())) @AT@ 3253 @LENGTH@ 38
---UPD MethodInvocation@@System.out.println(zSet.rank(getT())) @TO@ assertNull(zSet.rank(getT())) @AT@ 3253 @LENGTH@ 37
------DEL QualifiedName@@Name:System.out @AT@ 3253 @LENGTH@ 10
------UPD SimpleName@@MethodName:println:[zSet.rank(getT())] @TO@ MethodName:assertNull:[zSet.rank(getT())] @AT@ 3264 @LENGTH@ 26


UPD MethodDeclaration@@public, void, MethodName:testPubSub,  @TO@ public, void, MethodName:testPubSubWithNamedChannels,  @AT@ 1525 @LENGTH@ 1055
---UPD SimpleName@@MethodName:testPubSub @TO@ MethodName:testPubSubWithNamedChannels @AT@ 1537 @LENGTH@ 10


UPD VariableDeclarationStatement@@TransactionAttributeType txAttributeType=TransactionAttributeType.valueOf(txAttributeValue); @TO@ TransactionAttributeType txAttributeType=TransactionAttributeType.valueOf(txAttributeValue.toUpperCase(Locale.ENGLISH)); @AT@ 2706 @LENGTH@ 94
---UPD VariableDeclarationFragment@@txAttributeType=TransactionAttributeType.valueOf(txAttributeValue) @TO@ txAttributeType=TransactionAttributeType.valueOf(txAttributeValue.toUpperCase(Locale.ENGLISH)) @AT@ 2731 @LENGTH@ 68
------UPD MethodInvocation@@TransactionAttributeType.valueOf(txAttributeValue) @TO@ TransactionAttributeType.valueOf(txAttributeValue.toUpperCase(Locale.ENGLISH)) @AT@ 2749 @LENGTH@ 50
---------UPD SimpleName@@MethodName:valueOf:[txAttributeValue] @TO@ MethodName:valueOf:[txAttributeValue.toUpperCase(Locale.ENGLISH)] @AT@ 2774 @LENGTH@ 25
------------DEL SimpleName@@txAttributeValue @AT@ 2782 @LENGTH@ 16
------------INS MethodInvocation@@txAttributeValue.toUpperCase(Locale.ENGLISH) @TO@ SimpleName@@MethodName:valueOf:[txAttributeValue] @AT@ 2807 @LENGTH@ 44
---------------INS SimpleName@@Name:txAttributeValue @TO@ MethodInvocation@@txAttributeValue.toUpperCase(Locale.ENGLISH) @AT@ 2807 @LENGTH@ 16
---------------INS SimpleName@@MethodName:toUpperCase:[Locale.ENGLISH] @TO@ MethodInvocation@@txAttributeValue.toUpperCase(Locale.ENGLISH) @AT@ 2824 @LENGTH@ 27
------------------INS QualifiedName@@Locale.ENGLISH @TO@ SimpleName@@MethodName:toUpperCase:[Locale.ENGLISH] @AT@ 2836 @LENGTH@ 14
---------------------INS SimpleName@@Locale @TO@ QualifiedName@@Locale.ENGLISH @AT@ 2836 @LENGTH@ 6
---------------------INS SimpleName@@ENGLISH @TO@ QualifiedName@@Locale.ENGLISH @AT@ 2843 @LENGTH@ 7


DEL ExpressionStatement@@MethodInvocation:new JarDeploymentActivator().activate(deploymentChain) @AT@ 4465 @LENGTH@ 55
---DEL MethodInvocation@@new JarDeploymentActivator().activate(deploymentChain) @AT@ 4465 @LENGTH@ 54
------DEL ClassInstanceCreation@@JarDeploymentActivator[] @AT@ 4465 @LENGTH@ 28
---------DEL New@@new @AT@ 4465 @LENGTH@ 3
---------DEL SimpleType@@JarDeploymentActivator @AT@ 4469 @LENGTH@ 22
------DEL SimpleName@@MethodName:activate:[deploymentChain] @AT@ 4494 @LENGTH@ 25
---------DEL SimpleName@@deploymentChain @AT@ 4503 @LENGTH@ 15


UPD Block@@ElseBody:{  DBObject from=dbo;  if (dbo instanceof DBRef) {    from=((DBRef)dbo).fetch();  }  Object dbObj=from.get(name);  if (dbObj instanceof DBObject) {    if (prop.isMap() && dbObj instanceof DBObject) {      Class<?> toType=findTypeToBeUsed((DBObject)dbObj);      Map<String,Object> m=new LinkedHashMap<String,Object>();      for (      Map.Entry<String,Object> entry : ((Map<String,Object>)((DBObject)dbObj).toMap()).entrySet()) {        if (entry.getKey().equals(CUSTOM_TYPE_KEY)) {          continue;        }        if (null != entry.getValue() && entry.getValue() instanceof DBObject) {          m.put(entry.getKey(),read((null != toType ? toType : prop.getMapValueType()),(DBObject)entry.getValue()));        } else {          m.put(entry.getKey(),entry.getValue());        }      }      return m;    } else     if (prop.isArray() && dbObj instanceof BasicDBObject && ((DBObject)dbObj).keySet().size() == 0) {      return Array.newInstance(prop.getComponentType(),0);    } else     if (prop.isCollection() && dbObj instanceof BasicDBList) {      BasicDBList dbObjList=(BasicDBList)dbObj;      List<Object> items=new LinkedList<Object>();      for (int i=0; i < dbObjList.size(); i++) {        Object dbObjItem=dbObjList.get(i);        if (dbObjItem instanceof DBRef) {          items.add(read(prop.getComponentType(),((DBRef)dbObjItem).fetch()));        } else         if (dbObjItem instanceof DBObject) {          items.add(read(prop.getComponentType(),(DBObject)dbObjItem));        } else {          items.add(dbObjItem);        }      }      List<Object> itemsToReturn=new LinkedList<Object>();      for (      Object obj : items) {        itemsToReturn.add(obj);      }      return itemsToReturn;    }    Class<?> toType=findTypeToBeUsed((DBObject)dbObj);    if (toType != null) {      dbo.removeField(CUSTOM_TYPE_KEY);      o=read(toType,(DBObject)dbObj);    } else {      o=read(mappingContext.getPersistentEntity(prop.getTypeInformation()),(DBObject)dbObj);    }  } else {    o=dbObj;  }} @TO@ ElseBody:{  DBObject from=dbo;  Object dbObj=dbo.get(name);  if (dbObj instanceof DBRef) {    dbObj=((DBRef)dbObj).fetch();  }  if (dbObj instanceof DBObject) {    if (prop.isMap() && dbObj instanceof DBObject) {      Class<?> toType=findTypeToBeUsed((DBObject)dbObj);      Map<String,Object> m=new LinkedHashMap<String,Object>();      for (      Map.Entry<String,Object> entry : ((Map<String,Object>)((DBObject)dbObj).toMap()).entrySet()) {        if (entry.getKey().equals(CUSTOM_TYPE_KEY)) {          continue;        }        if (null != entry.getValue() && entry.getValue() instanceof DBObject) {          m.put(entry.getKey(),read((null != toType ? toType : prop.getMapValueType()),(DBObject)entry.getValue()));        } else {          m.put(entry.getKey(),entry.getValue());        }      }      return m;    } else     if (prop.isArray() && dbObj instanceof BasicDBObject && ((DBObject)dbObj).keySet().size() == 0) {      return Array.newInstance(prop.getComponentType(),0);    } else     if (prop.isCollection() && dbObj instanceof BasicDBList) {      BasicDBList dbObjList=(BasicDBList)dbObj;      List<Object> items=new LinkedList<Object>();      for (int i=0; i < dbObjList.size(); i++) {        Object dbObjItem=dbObjList.get(i);        if (dbObjItem instanceof DBRef) {          items.add(read(prop.getComponentType(),((DBRef)dbObjItem).fetch()));        } else         if (dbObjItem instanceof DBObject) {          items.add(read(prop.getComponentType(),(DBObject)dbObjItem));        } else {          items.add(dbObjItem);        }      }      List<Object> itemsToReturn=new LinkedList<Object>();      for (      Object obj : items) {        itemsToReturn.add(obj);      }      return itemsToReturn;    }    Class<?> toType=findTypeToBeUsed((DBObject)dbObj);    if (toType != null) {      dbo.removeField(CUSTOM_TYPE_KEY);      o=read(toType,(DBObject)dbObj);    } else {      o=read(mappingContext.getPersistentEntity(prop.getTypeInformation()),(DBObject)dbObj);    }  } else {    o=dbObj;  }} @AT@ 19385 @LENGTH@ 2167
---UPD IfStatement@@if (dbo instanceof DBRef) {  from=((DBRef)dbo).fetch();} @TO@ if (dbObj instanceof DBRef) {  dbObj=((DBRef)dbObj).fetch();} @AT@ 19414 @LENGTH@ 66
------UPD InstanceofExpression@@dbo instanceof DBRef @TO@ dbObj instanceof DBRef @AT@ 19418 @LENGTH@ 20
---------UPD SimpleName@@dbo @TO@ dbObj @AT@ 19418 @LENGTH@ 3
------UPD Block@@ThenBody:{  from=((DBRef)dbo).fetch();} @TO@ ThenBody:{  dbObj=((DBRef)dbObj).fetch();} @AT@ 19440 @LENGTH@ 40
---------UPD ExpressionStatement@@Assignment:from=((DBRef)dbo).fetch() @TO@ Assignment:dbObj=((DBRef)dbObj).fetch() @AT@ 19446 @LENGTH@ 29
------------UPD Assignment@@from=((DBRef)dbo).fetch() @TO@ dbObj=((DBRef)dbObj).fetch() @AT@ 19446 @LENGTH@ 28
---------------UPD SimpleName@@from @TO@ dbObj @AT@ 19446 @LENGTH@ 4
---------------UPD MethodInvocation@@((DBRef)dbo).fetch() @TO@ ((DBRef)dbObj).fetch() @AT@ 19453 @LENGTH@ 21
------------------UPD ParenthesizedExpression@@((DBRef)dbo) @TO@ ((DBRef)dbObj) @AT@ 19453 @LENGTH@ 13
---------------------UPD CastExpression@@(DBRef)dbo @TO@ (DBRef)dbObj @AT@ 19454 @LENGTH@ 11
------------------------UPD SimpleName@@dbo @TO@ dbObj @AT@ 19462 @LENGTH@ 3
---INS VariableDeclarationStatement@@Object dbObj=dbo.get(name); @TO@ Block@@ElseBody:{  DBObject from=dbo;  if (dbo instanceof DBRef) {    from=((DBRef)dbo).fetch();  }  Object dbObj=from.get(name);  if (dbObj instanceof DBObject) {    if (prop.isMap() && dbObj instanceof DBObject) {      Class<?> toType=findTypeToBeUsed((DBObject)dbObj);      Map<String,Object> m=new LinkedHashMap<String,Object>();      for (      Map.Entry<String,Object> entry : ((Map<String,Object>)((DBObject)dbObj).toMap()).entrySet()) {        if (entry.getKey().equals(CUSTOM_TYPE_KEY)) {          continue;        }        if (null != entry.getValue() && entry.getValue() instanceof DBObject) {          m.put(entry.getKey(),read((null != toType ? toType : prop.getMapValueType()),(DBObject)entry.getValue()));        } else {          m.put(entry.getKey(),entry.getValue());        }      }      return m;    } else     if (prop.isArray() && dbObj instanceof BasicDBObject && ((DBObject)dbObj).keySet().size() == 0) {      return Array.newInstance(prop.getComponentType(),0);    } else     if (prop.isCollection() && dbObj instanceof BasicDBList) {      BasicDBList dbObjList=(BasicDBList)dbObj;      List<Object> items=new LinkedList<Object>();      for (int i=0; i < dbObjList.size(); i++) {        Object dbObjItem=dbObjList.get(i);        if (dbObjItem instanceof DBRef) {          items.add(read(prop.getComponentType(),((DBRef)dbObjItem).fetch()));        } else         if (dbObjItem instanceof DBObject) {          items.add(read(prop.getComponentType(),(DBObject)dbObjItem));        } else {          items.add(dbObjItem);        }      }      List<Object> itemsToReturn=new LinkedList<Object>();      for (      Object obj : items) {        itemsToReturn.add(obj);      }      return itemsToReturn;    }    Class<?> toType=findTypeToBeUsed((DBObject)dbObj);    if (toType != null) {      dbo.removeField(CUSTOM_TYPE_KEY);      o=read(toType,(DBObject)dbObj);    } else {      o=read(mappingContext.getPersistentEntity(prop.getTypeInformation()),(DBObject)dbObj);    }  } else {    o=dbObj;  }} @AT@ 19414 @LENGTH@ 29
------INS SimpleType@@Object @TO@ VariableDeclarationStatement@@Object dbObj=dbo.get(name); @AT@ 19414 @LENGTH@ 6
------INS VariableDeclarationFragment@@dbObj=dbo.get(name) @TO@ VariableDeclarationStatement@@Object dbObj=dbo.get(name); @AT@ 19421 @LENGTH@ 21
---------INS SimpleName@@dbObj @TO@ VariableDeclarationFragment@@dbObj=dbo.get(name) @AT@ 19421 @LENGTH@ 5
---------INS MethodInvocation@@dbo.get(name) @TO@ VariableDeclarationFragment@@dbObj=dbo.get(name) @AT@ 19429 @LENGTH@ 13
------------INS SimpleName@@Name:dbo @TO@ MethodInvocation@@dbo.get(name) @AT@ 19429 @LENGTH@ 3
------------INS SimpleName@@MethodName:get:[name] @TO@ MethodInvocation@@dbo.get(name) @AT@ 19433 @LENGTH@ 9
---------------INS SimpleName@@name @TO@ SimpleName@@MethodName:get:[name] @AT@ 19437 @LENGTH@ 4
---DEL VariableDeclarationStatement@@Object dbObj=from.get(name); @AT@ 19484 @LENGTH@ 30
------DEL SimpleType@@Object @AT@ 19484 @LENGTH@ 6
------DEL VariableDeclarationFragment@@dbObj=from.get(name) @AT@ 19491 @LENGTH@ 22
---------DEL SimpleName@@dbObj @AT@ 19491 @LENGTH@ 5
---------DEL MethodInvocation@@from.get(name) @AT@ 19499 @LENGTH@ 14
------------DEL SimpleName@@Name:from @AT@ 19499 @LENGTH@ 4
------------DEL SimpleName@@MethodName:get:[name] @AT@ 19504 @LENGTH@ 9
---------------DEL SimpleName@@name @AT@ 19508 @LENGTH@ 4


INS MethodDeclaration@@Person, MethodName:findByLastnameAndAddress, String lastname, Address address,  @TO@ TypeDeclaration@@[private]SampleRepository,  @AT@ 4669 @LENGTH@ 59
---INS SimpleType@@Person @TO@ MethodDeclaration@@Person, MethodName:findByLastnameAndAddress, String lastname, Address address,  @AT@ 4662 @LENGTH@ 6
---INS SimpleName@@MethodName:findByLastnameAndAddress @TO@ MethodDeclaration@@Person, MethodName:findByLastnameAndAddress, String lastname, Address address,  @AT@ 4669 @LENGTH@ 24
---INS SingleVariableDeclaration@@String lastname @TO@ MethodDeclaration@@Person, MethodName:findByLastnameAndAddress, String lastname, Address address,  @AT@ 4694 @LENGTH@ 15
------INS SimpleType@@String @TO@ SingleVariableDeclaration@@String lastname @AT@ 4694 @LENGTH@ 6
------INS SimpleName@@lastname @TO@ SingleVariableDeclaration@@String lastname @AT@ 4701 @LENGTH@ 8
---INS SingleVariableDeclaration@@Address address @TO@ MethodDeclaration@@Person, MethodName:findByLastnameAndAddress, String lastname, Address address,  @AT@ 4711 @LENGTH@ 15
------INS SimpleType@@Address @TO@ SingleVariableDeclaration@@Address address @AT@ 4711 @LENGTH@ 7
------INS SimpleName@@address @TO@ SingleVariableDeclaration@@Address address @AT@ 4719 @LENGTH@ 7


INS TryStatement@@try {  target=new MappingJsonFactory().createJsonParser(content.replace("\\","/")).readValueAs(Map.class);} catch (JsonParseException e) {  throw new JsonMappingException("Cannot create wrapper for:\n" + content,e);} @TO@ MethodDeclaration@@public, voidMethodName:JsonWrapper, String content, Exception,  @AT@ 1410 @LENGTH@ 231
---INS ExpressionStatement@@Assignment:target=new MappingJsonFactory().createJsonParser(content.replace("\\","/")).readValueAs(Map.class) @TO@ TryStatement@@try {  target=new MappingJsonFactory().createJsonParser(content.replace("\\","/")).readValueAs(Map.class);} catch (JsonParseException e) {  throw new JsonMappingException("Cannot create wrapper for:\n" + content,e);} @AT@ 1420 @LENGTH@ 101
------MOV Assignment@@target=new MappingJsonFactory().createJsonParser(content).readValueAs(Map.class) @TO@ ExpressionStatement@@Assignment:target=new MappingJsonFactory().createJsonParser(content.replace("\\","/")).readValueAs(Map.class) @AT@ 1306 @LENGTH@ 82
---------UPD MethodInvocation@@new MappingJsonFactory().createJsonParser(content).readValueAs(Map.class) @TO@ new MappingJsonFactory().createJsonParser(content.replace("\\","/")).readValueAs(Map.class) @AT@ 1315 @LENGTH@ 73
------------UPD MethodInvocation@@MethodName:createJsonParser:[content] @TO@ MethodName:createJsonParser:[content.replace("\\","/")] @AT@ 1315 @LENGTH@ 50
---------------UPD SimpleName@@content @TO@ Name:content @AT@ 1357 @LENGTH@ 7
---------------INS MethodInvocation@@content.replace("\\","/") @TO@ MethodInvocation@@MethodName:createJsonParser:[content] @AT@ 1471 @LENGTH@ 25
------------------MOV SimpleName@@content @TO@ MethodInvocation@@content.replace("\\","/") @AT@ 1357 @LENGTH@ 7
------------------MOV SimpleName@@content @TO@ MethodInvocation@@content.replace("\\","/") @AT@ 1357 @LENGTH@ 7
------------------INS SimpleName@@MethodName:replace:["\\", "/"] @TO@ MethodInvocation@@content.replace("\\","/") @AT@ 1479 @LENGTH@ 17
---------------------INS StringLiteral@@"\\" @TO@ SimpleName@@MethodName:replace:["\\", "/"] @AT@ 1487 @LENGTH@ 4
---------------------INS StringLiteral@@"/" @TO@ SimpleName@@MethodName:replace:["\\", "/"] @AT@ 1492 @LENGTH@ 3
---INS CatchClause@@catch (JsonParseException e) {  throw new JsonMappingException("Cannot create wrapper for:\n" + content,e);} @TO@ TryStatement@@try {  target=new MappingJsonFactory().createJsonParser(content.replace("\\","/")).readValueAs(Map.class);} catch (JsonParseException e) {  throw new JsonMappingException("Cannot create wrapper for:\n" + content,e);} @AT@ 1527 @LENGTH@ 114
------INS SingleVariableDeclaration@@JsonParseException e @TO@ CatchClause@@catch (JsonParseException e) {  throw new JsonMappingException("Cannot create wrapper for:\n" + content,e);} @AT@ 1534 @LENGTH@ 20
---------INS SimpleType@@JsonParseException @TO@ SingleVariableDeclaration@@JsonParseException e @AT@ 1534 @LENGTH@ 18
---------INS SimpleName@@e @TO@ SingleVariableDeclaration@@JsonParseException e @AT@ 1553 @LENGTH@ 1
------INS ThrowStatement@@ClassInstanceCreation:new JsonMappingException("Cannot create wrapper for:\n" + content,e) @TO@ CatchClause@@catch (JsonParseException e) {  throw new JsonMappingException("Cannot create wrapper for:\n" + content,e);} @AT@ 1562 @LENGTH@ 74
---------INS ClassInstanceCreation@@JsonMappingException["Cannot create wrapper for:\n" + content, e] @TO@ ThrowStatement@@ClassInstanceCreation:new JsonMappingException("Cannot create wrapper for:\n" + content,e) @AT@ 1568 @LENGTH@ 67
------------INS New@@new @TO@ ClassInstanceCreation@@JsonMappingException["Cannot create wrapper for:\n" + content, e] @AT@ 1568 @LENGTH@ 3
------------INS SimpleType@@JsonMappingException @TO@ ClassInstanceCreation@@JsonMappingException["Cannot create wrapper for:\n" + content, e] @AT@ 1572 @LENGTH@ 20
------------INS InfixExpression@@"Cannot create wrapper for:\n" + content @TO@ ClassInstanceCreation@@JsonMappingException["Cannot create wrapper for:\n" + content, e] @AT@ 1593 @LENGTH@ 38
---------------INS StringLiteral@@"Cannot create wrapper for:\n" @TO@ InfixExpression@@"Cannot create wrapper for:\n" + content @AT@ 1593 @LENGTH@ 30
---------------INS Operator@@+ @TO@ InfixExpression@@"Cannot create wrapper for:\n" + content @AT@ 1623 @LENGTH@ 1
---------------INS SimpleName@@content @TO@ InfixExpression@@"Cannot create wrapper for:\n" + content @AT@ 1624 @LENGTH@ 7
------------INS SimpleName@@e @TO@ ClassInstanceCreation@@JsonMappingException["Cannot create wrapper for:\n" + content, e] @AT@ 1633 @LENGTH@ 1


UPD MethodDeclaration@@protected, void, MethodName:doHandle, CommandContext ctx,  @TO@ protected, void, MethodName:doHandle, CommandContext ctx, CommandFormatException,  @AT@ 1785 @LENGTH@ 1805
---INS SimpleType@@CommandFormatException @TO@ MethodDeclaration@@protected, void, MethodName:doHandle, CommandContext ctx,  @AT@ 1884 @LENGTH@ 22


INS FieldDeclaration@@public, static, final, int, [DEPENDENCIES_SUB_DEPLOYMENTS=0xD00] @TO@ EnumDeclaration@@[public]Phase,  @AT@ 10802 @LENGTH@ 76
---INS Modifier@@public @TO@ FieldDeclaration@@public, static, final, int, [DEPENDENCIES_SUB_DEPLOYMENTS=0xD00] @AT@ 10802 @LENGTH@ 6
---INS Modifier@@static @TO@ FieldDeclaration@@public, static, final, int, [DEPENDENCIES_SUB_DEPLOYMENTS=0xD00] @AT@ 10809 @LENGTH@ 6
---INS Modifier@@final @TO@ FieldDeclaration@@public, static, final, int, [DEPENDENCIES_SUB_DEPLOYMENTS=0xD00] @AT@ 10816 @LENGTH@ 5
---INS PrimitiveType@@int @TO@ FieldDeclaration@@public, static, final, int, [DEPENDENCIES_SUB_DEPLOYMENTS=0xD00] @AT@ 10822 @LENGTH@ 3
---INS VariableDeclarationFragment@@DEPENDENCIES_SUB_DEPLOYMENTS=0xD00 @TO@ FieldDeclaration@@public, static, final, int, [DEPENDENCIES_SUB_DEPLOYMENTS=0xD00] @AT@ 10826 @LENGTH@ 51
------INS SimpleName@@DEPENDENCIES_SUB_DEPLOYMENTS @TO@ VariableDeclarationFragment@@DEPENDENCIES_SUB_DEPLOYMENTS=0xD00 @AT@ 10826 @LENGTH@ 28
------INS NumberLiteral@@0xD00 @TO@ VariableDeclarationFragment@@DEPENDENCIES_SUB_DEPLOYMENTS=0xD00 @AT@ 10872 @LENGTH@ 5


INS MethodDeclaration@@private, Collection<H>, H, MethodName:deserializeHashKeys, Collection<byte[]> rawKeys, Class<? extends Collection> type,  @TO@ TypeDeclaration@@[public]RedisTemplate, RedisAccessor[RedisOperations<K,V>] @AT@ 15603 @LENGTH@ 385
---INS Modifier@@private @TO@ MethodDeclaration@@private, Collection<H>, H, MethodName:deserializeHashKeys, Collection<byte[]> rawKeys, Class<? extends Collection> type,  @AT@ 15603 @LENGTH@ 7
---INS ParameterizedType@@Collection<H> @TO@ MethodDeclaration@@private, Collection<H>, H, MethodName:deserializeHashKeys, Collection<byte[]> rawKeys, Class<? extends Collection> type,  @AT@ 15615 @LENGTH@ 13
------INS SimpleType@@Collection @TO@ ParameterizedType@@Collection<H> @AT@ 15615 @LENGTH@ 10
------INS SimpleType@@H @TO@ ParameterizedType@@Collection<H> @AT@ 15626 @LENGTH@ 1
---INS SimpleName@@MethodName:deserializeHashKeys @TO@ MethodDeclaration@@private, Collection<H>, H, MethodName:deserializeHashKeys, Collection<byte[]> rawKeys, Class<? extends Collection> type,  @AT@ 15629 @LENGTH@ 19
---INS SingleVariableDeclaration@@Collection<byte[]> rawKeys @TO@ MethodDeclaration@@private, Collection<H>, H, MethodName:deserializeHashKeys, Collection<byte[]> rawKeys, Class<? extends Collection> type,  @AT@ 15649 @LENGTH@ 26
------INS ParameterizedType@@Collection<byte[]> @TO@ SingleVariableDeclaration@@Collection<byte[]> rawKeys @AT@ 15649 @LENGTH@ 18
---------INS SimpleType@@Collection @TO@ ParameterizedType@@Collection<byte[]> @AT@ 15649 @LENGTH@ 10
---------INS ArrayType@@byte[] @TO@ ParameterizedType@@Collection<byte[]> @AT@ 15660 @LENGTH@ 6
------------INS PrimitiveType@@byte @TO@ ArrayType@@byte[] @AT@ 15660 @LENGTH@ 4
------INS SimpleName@@rawKeys @TO@ SingleVariableDeclaration@@Collection<byte[]> rawKeys @AT@ 15668 @LENGTH@ 7
---INS SingleVariableDeclaration@@Class<? extends Collection> type @TO@ MethodDeclaration@@private, Collection<H>, H, MethodName:deserializeHashKeys, Collection<byte[]> rawKeys, Class<? extends Collection> type,  @AT@ 15677 @LENGTH@ 32
------INS ParameterizedType@@Class<? extends Collection> @TO@ SingleVariableDeclaration@@Class<? extends Collection> type @AT@ 15677 @LENGTH@ 27
---------INS SimpleType@@Class @TO@ ParameterizedType@@Class<? extends Collection> @AT@ 15677 @LENGTH@ 5
---------INS WildcardType@@? @TO@ ParameterizedType@@Class<? extends Collection> @AT@ 15683 @LENGTH@ 20
------INS SimpleName@@type @TO@ SingleVariableDeclaration@@Class<? extends Collection> type @AT@ 15705 @LENGTH@ 4
---INS VariableDeclarationStatement@@Collection<H> values=(List.class.isAssignableFrom(type) ? new ArrayList<H>(rawKeys.size()) : new LinkedHashSet<H>(rawKeys.size())); @TO@ MethodDeclaration@@private, Collection<H>, H, MethodName:deserializeHashKeys, Collection<byte[]> rawKeys, Class<? extends Collection> type,  @AT@ 15715 @LENGTH@ 137
------INS ParameterizedType@@Collection<H> @TO@ VariableDeclarationStatement@@Collection<H> values=(List.class.isAssignableFrom(type) ? new ArrayList<H>(rawKeys.size()) : new LinkedHashSet<H>(rawKeys.size())); @AT@ 15715 @LENGTH@ 13
---------INS SimpleType@@Collection @TO@ ParameterizedType@@Collection<H> @AT@ 15715 @LENGTH@ 10
---------INS SimpleType@@H @TO@ ParameterizedType@@Collection<H> @AT@ 15726 @LENGTH@ 1
------INS VariableDeclarationFragment@@values=(List.class.isAssignableFrom(type) ? new ArrayList<H>(rawKeys.size()) : new LinkedHashSet<H>(rawKeys.size())) @TO@ VariableDeclarationStatement@@Collection<H> values=(List.class.isAssignableFrom(type) ? new ArrayList<H>(rawKeys.size()) : new LinkedHashSet<H>(rawKeys.size())); @AT@ 15729 @LENGTH@ 122
---------INS SimpleName@@values @TO@ VariableDeclarationFragment@@values=(List.class.isAssignableFrom(type) ? new ArrayList<H>(rawKeys.size()) : new LinkedHashSet<H>(rawKeys.size())) @AT@ 15729 @LENGTH@ 6
---------INS ParenthesizedExpression@@(List.class.isAssignableFrom(type) ? new ArrayList<H>(rawKeys.size()) : new LinkedHashSet<H>(rawKeys.size())) @TO@ VariableDeclarationFragment@@values=(List.class.isAssignableFrom(type) ? new ArrayList<H>(rawKeys.size()) : new LinkedHashSet<H>(rawKeys.size())) @AT@ 15738 @LENGTH@ 113
------------INS ConditionalExpression@@List.class.isAssignableFrom(type) ? new ArrayList<H>(rawKeys.size()) : new LinkedHashSet<H>(rawKeys.size()) @TO@ ParenthesizedExpression@@(List.class.isAssignableFrom(type) ? new ArrayList<H>(rawKeys.size()) : new LinkedHashSet<H>(rawKeys.size())) @AT@ 15739 @LENGTH@ 111
---------------INS MethodInvocation@@List.class.isAssignableFrom(type) @TO@ ConditionalExpression@@List.class.isAssignableFrom(type) ? new ArrayList<H>(rawKeys.size()) : new LinkedHashSet<H>(rawKeys.size()) @AT@ 15739 @LENGTH@ 33
------------------INS TypeLiteral@@List.class @TO@ MethodInvocation@@List.class.isAssignableFrom(type) @AT@ 15739 @LENGTH@ 10
------------------INS SimpleName@@MethodName:isAssignableFrom:[type] @TO@ MethodInvocation@@List.class.isAssignableFrom(type) @AT@ 15750 @LENGTH@ 22
---------------------INS SimpleName@@type @TO@ SimpleName@@MethodName:isAssignableFrom:[type] @AT@ 15767 @LENGTH@ 4
---------------INS ClassInstanceCreation@@ArrayList<H>[rawKeys.size()] @TO@ ConditionalExpression@@List.class.isAssignableFrom(type) ? new ArrayList<H>(rawKeys.size()) : new LinkedHashSet<H>(rawKeys.size()) @AT@ 15775 @LENGTH@ 32
------------------INS New@@new @TO@ ClassInstanceCreation@@ArrayList<H>[rawKeys.size()] @AT@ 15775 @LENGTH@ 3
------------------INS ParameterizedType@@ArrayList<H> @TO@ ClassInstanceCreation@@ArrayList<H>[rawKeys.size()] @AT@ 15779 @LENGTH@ 12
---------------------INS SimpleType@@ArrayList @TO@ ParameterizedType@@ArrayList<H> @AT@ 15779 @LENGTH@ 9
---------------------INS SimpleType@@H @TO@ ParameterizedType@@ArrayList<H> @AT@ 15789 @LENGTH@ 1
------------------INS MethodInvocation@@rawKeys.size() @TO@ ClassInstanceCreation@@ArrayList<H>[rawKeys.size()] @AT@ 15792 @LENGTH@ 14
---------------------INS SimpleName@@Name:rawKeys @TO@ MethodInvocation@@rawKeys.size() @AT@ 15792 @LENGTH@ 7
---------------------INS SimpleName@@MethodName:size:[] @TO@ MethodInvocation@@rawKeys.size() @AT@ 15800 @LENGTH@ 6
---------------INS ClassInstanceCreation@@LinkedHashSet<H>[rawKeys.size()] @TO@ ConditionalExpression@@List.class.isAssignableFrom(type) ? new ArrayList<H>(rawKeys.size()) : new LinkedHashSet<H>(rawKeys.size()) @AT@ 15814 @LENGTH@ 36
------------------INS New@@new @TO@ ClassInstanceCreation@@LinkedHashSet<H>[rawKeys.size()] @AT@ 15814 @LENGTH@ 3
------------------INS ParameterizedType@@LinkedHashSet<H> @TO@ ClassInstanceCreation@@LinkedHashSet<H>[rawKeys.size()] @AT@ 15818 @LENGTH@ 16
---------------------INS SimpleType@@LinkedHashSet @TO@ ParameterizedType@@LinkedHashSet<H> @AT@ 15818 @LENGTH@ 13
---------------------INS SimpleType@@H @TO@ ParameterizedType@@LinkedHashSet<H> @AT@ 15832 @LENGTH@ 1
------------------INS MethodInvocation@@rawKeys.size() @TO@ ClassInstanceCreation@@LinkedHashSet<H>[rawKeys.size()] @AT@ 15835 @LENGTH@ 14
---------------------INS SimpleName@@Name:rawKeys @TO@ MethodInvocation@@rawKeys.size() @AT@ 15835 @LENGTH@ 7
---------------------INS SimpleName@@MethodName:size:[] @TO@ MethodInvocation@@rawKeys.size() @AT@ 15843 @LENGTH@ 6
---INS EnhancedForStatement@@for (byte[] bs : rawKeys) {  if (bs != null) {    values.add((H)hashKeySerializer.deserialize(bs));  }} @TO@ MethodDeclaration@@private, Collection<H>, H, MethodName:deserializeHashKeys, Collection<byte[]> rawKeys, Class<? extends Collection> type,  @AT@ 15855 @LENGTH@ 112
------INS SingleVariableDeclaration@@byte[] bs @TO@ EnhancedForStatement@@for (byte[] bs : rawKeys) {  if (bs != null) {    values.add((H)hashKeySerializer.deserialize(bs));  }} @AT@ 15860 @LENGTH@ 9
---------INS ArrayType@@byte[] @TO@ SingleVariableDeclaration@@byte[] bs @AT@ 15860 @LENGTH@ 6
------------INS PrimitiveType@@byte @TO@ ArrayType@@byte[] @AT@ 15860 @LENGTH@ 4
---------INS SimpleName@@bs @TO@ SingleVariableDeclaration@@byte[] bs @AT@ 15867 @LENGTH@ 2
------INS SimpleName@@rawKeys @TO@ EnhancedForStatement@@for (byte[] bs : rawKeys) {  if (bs != null) {    values.add((H)hashKeySerializer.deserialize(bs));  }} @AT@ 15872 @LENGTH@ 7
------INS IfStatement@@if (bs != null) {  values.add((H)hashKeySerializer.deserialize(bs));} @TO@ EnhancedForStatement@@for (byte[] bs : rawKeys) {  if (bs != null) {    values.add((H)hashKeySerializer.deserialize(bs));  }} @AT@ 15886 @LENGTH@ 77
---------INS InfixExpression@@bs != null @TO@ IfStatement@@if (bs != null) {  values.add((H)hashKeySerializer.deserialize(bs));} @AT@ 15890 @LENGTH@ 10
------------INS SimpleName@@bs @TO@ InfixExpression@@bs != null @AT@ 15890 @LENGTH@ 2
------------INS Operator@@!= @TO@ InfixExpression@@bs != null @AT@ 15892 @LENGTH@ 2
------------INS NullLiteral@@null @TO@ InfixExpression@@bs != null @AT@ 15896 @LENGTH@ 4
---------INS Block@@ThenBody:{  values.add((H)hashKeySerializer.deserialize(bs));} @TO@ IfStatement@@if (bs != null) {  values.add((H)hashKeySerializer.deserialize(bs));} @AT@ 15902 @LENGTH@ 61
------------INS ExpressionStatement@@MethodInvocation:values.add((H)hashKeySerializer.deserialize(bs)) @TO@ Block@@ThenBody:{  values.add((H)hashKeySerializer.deserialize(bs));} @AT@ 15908 @LENGTH@ 50
---------------INS MethodInvocation@@values.add((H)hashKeySerializer.deserialize(bs)) @TO@ ExpressionStatement@@MethodInvocation:values.add((H)hashKeySerializer.deserialize(bs)) @AT@ 15908 @LENGTH@ 49
------------------INS SimpleName@@Name:values @TO@ MethodInvocation@@values.add((H)hashKeySerializer.deserialize(bs)) @AT@ 15908 @LENGTH@ 6
------------------INS SimpleName@@MethodName:add:[(H)hashKeySerializer.deserialize(bs)] @TO@ MethodInvocation@@values.add((H)hashKeySerializer.deserialize(bs)) @AT@ 15915 @LENGTH@ 42
---------------------INS CastExpression@@(H)hashKeySerializer.deserialize(bs) @TO@ SimpleName@@MethodName:add:[(H)hashKeySerializer.deserialize(bs)] @AT@ 15919 @LENGTH@ 37
------------------------INS SimpleType@@H @TO@ CastExpression@@(H)hashKeySerializer.deserialize(bs) @AT@ 15920 @LENGTH@ 1
------------------------INS MethodInvocation@@hashKeySerializer.deserialize(bs) @TO@ CastExpression@@(H)hashKeySerializer.deserialize(bs) @AT@ 15923 @LENGTH@ 33
---------------------------INS SimpleName@@Name:hashKeySerializer @TO@ MethodInvocation@@hashKeySerializer.deserialize(bs) @AT@ 15923 @LENGTH@ 17
---------------------------INS SimpleName@@MethodName:deserialize:[bs] @TO@ MethodInvocation@@hashKeySerializer.deserialize(bs) @AT@ 15941 @LENGTH@ 15
------------------------------INS SimpleName@@bs @TO@ SimpleName@@MethodName:deserialize:[bs] @AT@ 15953 @LENGTH@ 2
---INS ReturnStatement@@SimpleName:values @TO@ MethodDeclaration@@private, Collection<H>, H, MethodName:deserializeHashKeys, Collection<byte[]> rawKeys, Class<? extends Collection> type,  @AT@ 15971 @LENGTH@ 14
------INS SimpleName@@values @TO@ ReturnStatement@@SimpleName:values @AT@ 15978 @LENGTH@ 6


INS IfStatement@@if (ExchangeHelper.isOutCapable(exchange)) {  return exchange.getOut().getHeaders();} else {  return null;} @TO@ MethodDeclaration@@public, Object, MethodName:evaluate, Exchange exchange,  @AT@ 9550 @LENGTH@ 179
---INS MethodInvocation@@ExchangeHelper.isOutCapable(exchange) @TO@ IfStatement@@if (ExchangeHelper.isOutCapable(exchange)) {  return exchange.getOut().getHeaders();} else {  return null;} @AT@ 9554 @LENGTH@ 37
------INS SimpleName@@Name:ExchangeHelper @TO@ MethodInvocation@@ExchangeHelper.isOutCapable(exchange) @AT@ 9554 @LENGTH@ 14
------INS SimpleName@@MethodName:isOutCapable:[exchange] @TO@ MethodInvocation@@ExchangeHelper.isOutCapable(exchange) @AT@ 9569 @LENGTH@ 22
---------INS SimpleName@@exchange @TO@ SimpleName@@MethodName:isOutCapable:[exchange] @AT@ 9582 @LENGTH@ 8
---INS Block@@ThenBody:{  return exchange.getOut().getHeaders();} @TO@ IfStatement@@if (ExchangeHelper.isOutCapable(exchange)) {  return exchange.getOut().getHeaders();} else {  return null;} @AT@ 9593 @LENGTH@ 78
------MOV ReturnStatement@@MethodInvocation:exchange.getOut().getHeaders() @TO@ Block@@ThenBody:{  return exchange.getOut().getHeaders();} @AT@ 9418 @LENGTH@ 38
---INS Block@@ElseBody:{  return null;} @TO@ IfStatement@@if (ExchangeHelper.isOutCapable(exchange)) {  return exchange.getOut().getHeaders();} else {  return null;} @AT@ 9677 @LENGTH@ 52
------INS ReturnStatement@@NullLiteral:null @TO@ Block@@ElseBody:{  return null;} @AT@ 9699 @LENGTH@ 12
---------INS NullLiteral@@null @TO@ ReturnStatement@@NullLiteral:null @AT@ 9706 @LENGTH@ 4


INS ExpressionStatement@@MethodInvocation:results[0].get(10,TimeUnit.SECONDS) @TO@ MethodDeclaration@@public, void, MethodName:testLongWritesSingleton, Exception,  @AT@ 5844 @LENGTH@ 37
---INS MethodInvocation@@results[0].get(10,TimeUnit.SECONDS) @TO@ ExpressionStatement@@MethodInvocation:results[0].get(10,TimeUnit.SECONDS) @AT@ 5844 @LENGTH@ 36
------INS ArrayAccess@@results[0] @TO@ MethodInvocation@@results[0].get(10,TimeUnit.SECONDS) @AT@ 5844 @LENGTH@ 10
---------INS SimpleName@@results @TO@ ArrayAccess@@results[0] @AT@ 5844 @LENGTH@ 7
---------INS NumberLiteral@@0 @TO@ ArrayAccess@@results[0] @AT@ 5852 @LENGTH@ 1
------INS SimpleName@@MethodName:get:[10, TimeUnit.SECONDS] @TO@ MethodInvocation@@results[0].get(10,TimeUnit.SECONDS) @AT@ 5855 @LENGTH@ 25
---------INS NumberLiteral@@10 @TO@ SimpleName@@MethodName:get:[10, TimeUnit.SECONDS] @AT@ 5859 @LENGTH@ 2
---------INS QualifiedName@@TimeUnit.SECONDS @TO@ SimpleName@@MethodName:get:[10, TimeUnit.SECONDS] @AT@ 5863 @LENGTH@ 16
------------INS SimpleName@@TimeUnit @TO@ QualifiedName@@TimeUnit.SECONDS @AT@ 5863 @LENGTH@ 8
------------INS SimpleName@@SECONDS @TO@ QualifiedName@@TimeUnit.SECONDS @AT@ 5872 @LENGTH@ 7


UPD MethodDeclaration@@public, List<Object>, MethodName:closePipeline,  @TO@ public, List<byte[]>, MethodName:closePipeline,  @AT@ 27869 @LENGTH@ 75
---UPD ParameterizedType@@List<Object> @TO@ List<byte[]> @AT@ 27876 @LENGTH@ 12
------DEL SimpleType@@Object @AT@ 27881 @LENGTH@ 6
------INS ArrayType@@byte[] @TO@ ParameterizedType@@List<Object> @AT@ 27881 @LENGTH@ 6
---------INS PrimitiveType@@byte @TO@ ArrayType@@byte[] @AT@ 27881 @LENGTH@ 4


UPD ExpressionStatement@@MethodInvocation:assertTrue(e.getMessage().startsWith("Failed to create route route3 at: >>> Bean[ref:] <<< in route: Route[[From[direct:start]] -> [To[mock:foo], Bean[ref:]]] because of")) @TO@ MethodInvocation:assertTrue(e.getMessage(),e.getMessage().startsWith("Failed to create route route3 at: >>> Bean[ref:] <<< in route: Route[[From[direct://start]] -> [To[mock:foo], Bean[ref:]]] because of")) @AT@ 2783 @LENGTH@ 173
---UPD MethodInvocation@@assertTrue(e.getMessage().startsWith("Failed to create route route3 at: >>> Bean[ref:] <<< in route: Route[[From[direct:start]] -> [To[mock:foo], Bean[ref:]]] because of")) @TO@ assertTrue(e.getMessage(),e.getMessage().startsWith("Failed to create route route3 at: >>> Bean[ref:] <<< in route: Route[[From[direct://start]] -> [To[mock:foo], Bean[ref:]]] because of")) @AT@ 2783 @LENGTH@ 172
------UPD SimpleName@@MethodName:assertTrue:[e.getMessage().startsWith("Failed to create route route3 at: >>> Bean[ref:] <<< in route: Route[[From[direct:start]] -> [To[mock:foo], Bean[ref:]]] because of")] @TO@ MethodName:assertTrue:[e.getMessage(), e.getMessage().startsWith("Failed to create route route3 at: >>> Bean[ref:] <<< in route: Route[[From[direct://start]] -> [To[mock:foo], Bean[ref:]]] because of")] @AT@ 2783 @LENGTH@ 172
---------UPD MethodInvocation@@e.getMessage().startsWith("Failed to create route route3 at: >>> Bean[ref:] <<< in route: Route[[From[direct:start]] -> [To[mock:foo], Bean[ref:]]] because of") @TO@ e.getMessage().startsWith("Failed to create route route3 at: >>> Bean[ref:] <<< in route: Route[[From[direct://start]] -> [To[mock:foo], Bean[ref:]]] because of") @AT@ 2794 @LENGTH@ 160
------------UPD SimpleName@@MethodName:startsWith:["Failed to create route route3 at: >>> Bean[ref:] <<< in route: Route[[From[direct:start]] -> [To[mock:foo], Bean[ref:]]] because of"] @TO@ MethodName:startsWith:["Failed to create route route3 at: >>> Bean[ref:] <<< in route: Route[[From[direct://start]] -> [To[mock:foo], Bean[ref:]]] because of"] @AT@ 2809 @LENGTH@ 145
---------------UPD StringLiteral@@"Failed to create route route3 at: >>> Bean[ref:] <<< in route: Route[[From[direct:start]] -> [To[mock:foo], Bean[ref:]]] because of" @TO@ "Failed to create route route3 at: >>> Bean[ref:] <<< in route: Route[[From[direct://start]] -> [To[mock:foo], Bean[ref:]]] because of" @AT@ 2820 @LENGTH@ 133
---------INS MethodInvocation@@e.getMessage() @TO@ SimpleName@@MethodName:assertTrue:[e.getMessage().startsWith("Failed to create route route3 at: >>> Bean[ref:] <<< in route: Route[[From[direct:start]] -> [To[mock:foo], Bean[ref:]]] because of")] @AT@ 2812 @LENGTH@ 14
------------INS SimpleName@@Name:e @TO@ MethodInvocation@@e.getMessage() @AT@ 2812 @LENGTH@ 1
------------INS SimpleName@@MethodName:getMessage:[] @TO@ MethodInvocation@@e.getMessage() @AT@ 2814 @LENGTH@ 12


INS ExpressionStatement@@MethodInvocation:Thread.sleep(2000) @TO@ MethodDeclaration@@public, synchronized, void, MethodName:deploy, DuplicateDeploymentNameException, IOException, ExecutionException, InterruptedException,  @AT@ 4417 @LENGTH@ 19
---INS MethodInvocation@@Thread.sleep(2000) @TO@ ExpressionStatement@@MethodInvocation:Thread.sleep(2000) @AT@ 4417 @LENGTH@ 18
------INS SimpleName@@Name:Thread @TO@ MethodInvocation@@Thread.sleep(2000) @AT@ 4417 @LENGTH@ 6
------INS SimpleName@@MethodName:sleep:[2000] @TO@ MethodInvocation@@Thread.sleep(2000) @AT@ 4424 @LENGTH@ 11
---------INS NumberLiteral@@2000 @TO@ SimpleName@@MethodName:sleep:[2000] @AT@ 4430 @LENGTH@ 4


UPD IfStatement@@if (initialValue == null || this.operations.get(redisCounter) == null) {  set(0);} else {  set(initialValue);} @TO@ if (initialValue == null) {  if (this.operations.get(redisCounter) == null) {    set(0);  }} else {  set(initialValue);} @AT@ 3101 @LENGTH@ 122
---DEL InfixExpression@@initialValue == null || this.operations.get(redisCounter) == null @AT@ 3105 @LENGTH@ 65
------DEL InfixExpression@@initialValue == null @AT@ 3105 @LENGTH@ 20
------DEL Operator@@|| @AT@ 3125 @LENGTH@ 2
---INS InfixExpression@@initialValue == null @TO@ IfStatement@@if (initialValue == null || this.operations.get(redisCounter) == null) {  set(0);} else {  set(initialValue);} @AT@ 3105 @LENGTH@ 20
------MOV SimpleName@@initialValue @TO@ InfixExpression@@initialValue == null @AT@ 3105 @LENGTH@ 12
------MOV Operator@@== @TO@ InfixExpression@@initialValue == null @AT@ 3117 @LENGTH@ 2
------MOV NullLiteral@@null @TO@ InfixExpression@@initialValue == null @AT@ 3121 @LENGTH@ 4
---INS Block@@ThenBody:{  if (this.operations.get(redisCounter) == null) {    set(0);  }} @TO@ IfStatement@@if (initialValue == null || this.operations.get(redisCounter) == null) {  set(0);} else {  set(initialValue);} @AT@ 3127 @LENGTH@ 74
------INS IfStatement@@if (this.operations.get(redisCounter) == null) {  set(0);} @TO@ Block@@ThenBody:{  if (this.operations.get(redisCounter) == null) {    set(0);  }} @AT@ 3132 @LENGTH@ 65
---------MOV InfixExpression@@this.operations.get(redisCounter) == null @TO@ IfStatement@@if (this.operations.get(redisCounter) == null) {  set(0);} @AT@ 3129 @LENGTH@ 41
---------MOV Block@@ThenBody:{  set(0);} @TO@ IfStatement@@if (this.operations.get(redisCounter) == null) {  set(0);} @AT@ 3172 @LENGTH@ 16


UPD MethodDeclaration@@public, void, MethodName:render, P value, Object key, SafeHtmlBuilder sb,  @TO@ public, void, MethodName:render, Context context, P value, SafeHtmlBuilder sb,  @AT@ 1553 @LENGTH@ 98
---DEL SingleVariableDeclaration@@Object key @AT@ 1581 @LENGTH@ 10
------DEL SimpleType@@Object @AT@ 1581 @LENGTH@ 6
------DEL SimpleName@@key @AT@ 1588 @LENGTH@ 3
---INS SingleVariableDeclaration@@Context context @TO@ MethodDeclaration@@public, void, MethodName:render, P value, Object key, SafeHtmlBuilder sb,  @AT@ 1623 @LENGTH@ 15
------INS SimpleType@@Context @TO@ SingleVariableDeclaration@@Context context @AT@ 1623 @LENGTH@ 7
------INS SimpleName@@context @TO@ SingleVariableDeclaration@@Context context @AT@ 1631 @LENGTH@ 7


UPD IfStatement@@if (opsByGroup.size() == 0) {  handler.handleResultComplete();  return new BasicOperationResult(compensatingOperation);} @TO@ if (opsByGroup.size() == 0) {  final ModelNode result=hostResults.get(localHostName).get(RESULT);  if (result.hasDefined(DOMAIN_RESULTS) && !result.hasDefined(SERVER_OPERATIONS)) {    final List<Property> steps=result.get(DOMAIN_RESULTS).asPropertyList();    if (steps.size() == 1) {      final ModelNode fragment=result.get(DOMAIN_RESULTS).get("step-1");      handler.handleResultFragment(Util.NO_LOCATION,fragment);    }  }  handler.handleResultComplete();  return new BasicOperationResult(compensatingOperation);} @AT@ 17690 @LENGTH@ 162
---UPD Block@@ThenBody:{  handler.handleResultComplete();  return new BasicOperationResult(compensatingOperation);} @TO@ ThenBody:{  final ModelNode result=hostResults.get(localHostName).get(RESULT);  if (result.hasDefined(DOMAIN_RESULTS) && !result.hasDefined(SERVER_OPERATIONS)) {    final List<Property> steps=result.get(DOMAIN_RESULTS).asPropertyList();    if (steps.size() == 1) {      final ModelNode fragment=result.get(DOMAIN_RESULTS).get("step-1");      handler.handleResultFragment(Util.NO_LOCATION,fragment);    }  }  handler.handleResultComplete();  return new BasicOperationResult(compensatingOperation);} @AT@ 17717 @LENGTH@ 135
------INS VariableDeclarationStatement@@final ModelNode result=hostResults.get(localHostName).get(RESULT); @TO@ Block@@ThenBody:{  handler.handleResultComplete();  return new BasicOperationResult(compensatingOperation);} @AT@ 17971 @LENGTH@ 68
---------INS Modifier@@final @TO@ VariableDeclarationStatement@@final ModelNode result=hostResults.get(localHostName).get(RESULT); @AT@ 17971 @LENGTH@ 5
---------INS SimpleType@@ModelNode @TO@ VariableDeclarationStatement@@final ModelNode result=hostResults.get(localHostName).get(RESULT); @AT@ 17977 @LENGTH@ 9
---------INS VariableDeclarationFragment@@result=hostResults.get(localHostName).get(RESULT) @TO@ VariableDeclarationStatement@@final ModelNode result=hostResults.get(localHostName).get(RESULT); @AT@ 17987 @LENGTH@ 51
------------INS SimpleName@@result @TO@ VariableDeclarationFragment@@result=hostResults.get(localHostName).get(RESULT) @AT@ 17987 @LENGTH@ 6
------------INS MethodInvocation@@hostResults.get(localHostName).get(RESULT) @TO@ VariableDeclarationFragment@@result=hostResults.get(localHostName).get(RESULT) @AT@ 17996 @LENGTH@ 42
---------------INS MethodInvocation@@MethodName:get:[localHostName] @TO@ MethodInvocation@@hostResults.get(localHostName).get(RESULT) @AT@ 17996 @LENGTH@ 30
------------------INS SimpleName@@localHostName @TO@ MethodInvocation@@MethodName:get:[localHostName] @AT@ 18012 @LENGTH@ 13
---------------INS SimpleName@@Name:hostResults @TO@ MethodInvocation@@hostResults.get(localHostName).get(RESULT) @AT@ 17996 @LENGTH@ 11
---------------INS SimpleName@@MethodName:get:[RESULT] @TO@ MethodInvocation@@hostResults.get(localHostName).get(RESULT) @AT@ 18027 @LENGTH@ 11
------------------INS SimpleName@@RESULT @TO@ SimpleName@@MethodName:get:[RESULT] @AT@ 18031 @LENGTH@ 6
------INS IfStatement@@if (result.hasDefined(DOMAIN_RESULTS) && !result.hasDefined(SERVER_OPERATIONS)) {  final List<Property> steps=result.get(DOMAIN_RESULTS).asPropertyList();  if (steps.size() == 1) {    final ModelNode fragment=result.get(DOMAIN_RESULTS).get("step-1");    handler.handleResultFragment(Util.NO_LOCATION,fragment);  }} @TO@ Block@@ThenBody:{  handler.handleResultComplete();  return new BasicOperationResult(compensatingOperation);} @AT@ 18056 @LENGTH@ 434
---------INS InfixExpression@@result.hasDefined(DOMAIN_RESULTS) && !result.hasDefined(SERVER_OPERATIONS) @TO@ IfStatement@@if (result.hasDefined(DOMAIN_RESULTS) && !result.hasDefined(SERVER_OPERATIONS)) {  final List<Property> steps=result.get(DOMAIN_RESULTS).asPropertyList();  if (steps.size() == 1) {    final ModelNode fragment=result.get(DOMAIN_RESULTS).get("step-1");    handler.handleResultFragment(Util.NO_LOCATION,fragment);  }} @AT@ 18059 @LENGTH@ 75
------------INS MethodInvocation@@result.hasDefined(DOMAIN_RESULTS) @TO@ InfixExpression@@result.hasDefined(DOMAIN_RESULTS) && !result.hasDefined(SERVER_OPERATIONS) @AT@ 18059 @LENGTH@ 33
---------------INS SimpleName@@Name:result @TO@ MethodInvocation@@result.hasDefined(DOMAIN_RESULTS) @AT@ 18059 @LENGTH@ 6
---------------INS SimpleName@@MethodName:hasDefined:[DOMAIN_RESULTS] @TO@ MethodInvocation@@result.hasDefined(DOMAIN_RESULTS) @AT@ 18066 @LENGTH@ 26
------------------INS SimpleName@@DOMAIN_RESULTS @TO@ SimpleName@@MethodName:hasDefined:[DOMAIN_RESULTS] @AT@ 18077 @LENGTH@ 14
------------INS Operator@@&& @TO@ InfixExpression@@result.hasDefined(DOMAIN_RESULTS) && !result.hasDefined(SERVER_OPERATIONS) @AT@ 18092 @LENGTH@ 2
------------INS PrefixExpression@@!result.hasDefined(SERVER_OPERATIONS) @TO@ InfixExpression@@result.hasDefined(DOMAIN_RESULTS) && !result.hasDefined(SERVER_OPERATIONS) @AT@ 18096 @LENGTH@ 38
---------------INS Operator@@! @TO@ PrefixExpression@@!result.hasDefined(SERVER_OPERATIONS) @AT@ 18096 @LENGTH@ 1
---------------INS MethodInvocation@@result.hasDefined(SERVER_OPERATIONS) @TO@ PrefixExpression@@!result.hasDefined(SERVER_OPERATIONS) @AT@ 18098 @LENGTH@ 36
------------------INS SimpleName@@Name:result @TO@ MethodInvocation@@result.hasDefined(SERVER_OPERATIONS) @AT@ 18098 @LENGTH@ 6
------------------INS SimpleName@@MethodName:hasDefined:[SERVER_OPERATIONS] @TO@ MethodInvocation@@result.hasDefined(SERVER_OPERATIONS) @AT@ 18105 @LENGTH@ 29
---------------------INS SimpleName@@SERVER_OPERATIONS @TO@ SimpleName@@MethodName:hasDefined:[SERVER_OPERATIONS] @AT@ 18116 @LENGTH@ 17
---------INS Block@@ThenBody:{  final List<Property> steps=result.get(DOMAIN_RESULTS).asPropertyList();  if (steps.size() == 1) {    final ModelNode fragment=result.get(DOMAIN_RESULTS).get("step-1");    handler.handleResultFragment(Util.NO_LOCATION,fragment);  }} @TO@ IfStatement@@if (result.hasDefined(DOMAIN_RESULTS) && !result.hasDefined(SERVER_OPERATIONS)) {  final List<Property> steps=result.get(DOMAIN_RESULTS).asPropertyList();  if (steps.size() == 1) {    final ModelNode fragment=result.get(DOMAIN_RESULTS).get("step-1");    handler.handleResultFragment(Util.NO_LOCATION,fragment);  }} @AT@ 18136 @LENGTH@ 354
------------INS VariableDeclarationStatement@@final List<Property> steps=result.get(DOMAIN_RESULTS).asPropertyList(); @TO@ Block@@ThenBody:{  final List<Property> steps=result.get(DOMAIN_RESULTS).asPropertyList();  if (steps.size() == 1) {    final ModelNode fragment=result.get(DOMAIN_RESULTS).get("step-1");    handler.handleResultFragment(Util.NO_LOCATION,fragment);  }} @AT@ 18158 @LENGTH@ 73
---------------INS Modifier@@final @TO@ VariableDeclarationStatement@@final List<Property> steps=result.get(DOMAIN_RESULTS).asPropertyList(); @AT@ 18158 @LENGTH@ 5
---------------INS ParameterizedType@@List<Property> @TO@ VariableDeclarationStatement@@final List<Property> steps=result.get(DOMAIN_RESULTS).asPropertyList(); @AT@ 18164 @LENGTH@ 14
------------------INS SimpleType@@List @TO@ ParameterizedType@@List<Property> @AT@ 18164 @LENGTH@ 4
------------------INS SimpleType@@Property @TO@ ParameterizedType@@List<Property> @AT@ 18169 @LENGTH@ 8
---------------INS VariableDeclarationFragment@@steps=result.get(DOMAIN_RESULTS).asPropertyList() @TO@ VariableDeclarationStatement@@final List<Property> steps=result.get(DOMAIN_RESULTS).asPropertyList(); @AT@ 18179 @LENGTH@ 51
------------------INS SimpleName@@steps @TO@ VariableDeclarationFragment@@steps=result.get(DOMAIN_RESULTS).asPropertyList() @AT@ 18179 @LENGTH@ 5
------------------INS MethodInvocation@@result.get(DOMAIN_RESULTS).asPropertyList() @TO@ VariableDeclarationFragment@@steps=result.get(DOMAIN_RESULTS).asPropertyList() @AT@ 18187 @LENGTH@ 43
---------------------INS MethodInvocation@@MethodName:get:[DOMAIN_RESULTS] @TO@ MethodInvocation@@result.get(DOMAIN_RESULTS).asPropertyList() @AT@ 18187 @LENGTH@ 26
------------------------INS SimpleName@@DOMAIN_RESULTS @TO@ MethodInvocation@@MethodName:get:[DOMAIN_RESULTS] @AT@ 18198 @LENGTH@ 14
---------------------INS SimpleName@@Name:result @TO@ MethodInvocation@@result.get(DOMAIN_RESULTS).asPropertyList() @AT@ 18187 @LENGTH@ 6
---------------------INS SimpleName@@MethodName:asPropertyList:[] @TO@ MethodInvocation@@result.get(DOMAIN_RESULTS).asPropertyList() @AT@ 18214 @LENGTH@ 16
------------INS IfStatement@@if (steps.size() == 1) {  final ModelNode fragment=result.get(DOMAIN_RESULTS).get("step-1");  handler.handleResultFragment(Util.NO_LOCATION,fragment);} @TO@ Block@@ThenBody:{  final List<Property> steps=result.get(DOMAIN_RESULTS).asPropertyList();  if (steps.size() == 1) {    final ModelNode fragment=result.get(DOMAIN_RESULTS).get("step-1");    handler.handleResultFragment(Util.NO_LOCATION,fragment);  }} @AT@ 18252 @LENGTH@ 220
---------------INS InfixExpression@@steps.size() == 1 @TO@ IfStatement@@if (steps.size() == 1) {  final ModelNode fragment=result.get(DOMAIN_RESULTS).get("step-1");  handler.handleResultFragment(Util.NO_LOCATION,fragment);} @AT@ 18255 @LENGTH@ 17
------------------INS MethodInvocation@@steps.size() @TO@ InfixExpression@@steps.size() == 1 @AT@ 18255 @LENGTH@ 12
---------------------INS SimpleName@@Name:steps @TO@ MethodInvocation@@steps.size() @AT@ 18255 @LENGTH@ 5
---------------------INS SimpleName@@MethodName:size:[] @TO@ MethodInvocation@@steps.size() @AT@ 18261 @LENGTH@ 6
------------------INS Operator@@== @TO@ InfixExpression@@steps.size() == 1 @AT@ 18267 @LENGTH@ 2
------------------INS NumberLiteral@@1 @TO@ InfixExpression@@steps.size() == 1 @AT@ 18271 @LENGTH@ 1
---------------INS Block@@ThenBody:{  final ModelNode fragment=result.get(DOMAIN_RESULTS).get("step-1");  handler.handleResultFragment(Util.NO_LOCATION,fragment);} @TO@ IfStatement@@if (steps.size() == 1) {  final ModelNode fragment=result.get(DOMAIN_RESULTS).get("step-1");  handler.handleResultFragment(Util.NO_LOCATION,fragment);} @AT@ 18274 @LENGTH@ 198
------------------INS VariableDeclarationStatement@@final ModelNode fragment=result.get(DOMAIN_RESULTS).get("step-1"); @TO@ Block@@ThenBody:{  final ModelNode fragment=result.get(DOMAIN_RESULTS).get("step-1");  handler.handleResultFragment(Util.NO_LOCATION,fragment);} @AT@ 18300 @LENGTH@ 68
---------------------INS Modifier@@final @TO@ VariableDeclarationStatement@@final ModelNode fragment=result.get(DOMAIN_RESULTS).get("step-1"); @AT@ 18300 @LENGTH@ 5
---------------------INS SimpleType@@ModelNode @TO@ VariableDeclarationStatement@@final ModelNode fragment=result.get(DOMAIN_RESULTS).get("step-1"); @AT@ 18306 @LENGTH@ 9
---------------------INS VariableDeclarationFragment@@fragment=result.get(DOMAIN_RESULTS).get("step-1") @TO@ VariableDeclarationStatement@@final ModelNode fragment=result.get(DOMAIN_RESULTS).get("step-1"); @AT@ 18316 @LENGTH@ 51
------------------------INS SimpleName@@fragment @TO@ VariableDeclarationFragment@@fragment=result.get(DOMAIN_RESULTS).get("step-1") @AT@ 18316 @LENGTH@ 8
------------------------INS MethodInvocation@@result.get(DOMAIN_RESULTS).get("step-1") @TO@ VariableDeclarationFragment@@fragment=result.get(DOMAIN_RESULTS).get("step-1") @AT@ 18327 @LENGTH@ 40
---------------------------INS MethodInvocation@@MethodName:get:[DOMAIN_RESULTS] @TO@ MethodInvocation@@result.get(DOMAIN_RESULTS).get("step-1") @AT@ 18327 @LENGTH@ 26
------------------------------INS SimpleName@@DOMAIN_RESULTS @TO@ MethodInvocation@@MethodName:get:[DOMAIN_RESULTS] @AT@ 18338 @LENGTH@ 14
---------------------------INS SimpleName@@Name:result @TO@ MethodInvocation@@result.get(DOMAIN_RESULTS).get("step-1") @AT@ 18327 @LENGTH@ 6
---------------------------INS SimpleName@@MethodName:get:["step-1"] @TO@ MethodInvocation@@result.get(DOMAIN_RESULTS).get("step-1") @AT@ 18354 @LENGTH@ 13
------------------------------INS StringLiteral@@"step-1" @TO@ SimpleName@@MethodName:get:["step-1"] @AT@ 18358 @LENGTH@ 8
------------------INS ExpressionStatement@@MethodInvocation:handler.handleResultFragment(Util.NO_LOCATION,fragment) @TO@ Block@@ThenBody:{  final ModelNode fragment=result.get(DOMAIN_RESULTS).get("step-1");  handler.handleResultFragment(Util.NO_LOCATION,fragment);} @AT@ 18393 @LENGTH@ 57
---------------------INS MethodInvocation@@handler.handleResultFragment(Util.NO_LOCATION,fragment) @TO@ ExpressionStatement@@MethodInvocation:handler.handleResultFragment(Util.NO_LOCATION,fragment) @AT@ 18393 @LENGTH@ 56
------------------------INS SimpleName@@Name:handler @TO@ MethodInvocation@@handler.handleResultFragment(Util.NO_LOCATION,fragment) @AT@ 18393 @LENGTH@ 7
------------------------INS SimpleName@@MethodName:handleResultFragment:[Util.NO_LOCATION, fragment] @TO@ MethodInvocation@@handler.handleResultFragment(Util.NO_LOCATION,fragment) @AT@ 18401 @LENGTH@ 48
---------------------------INS QualifiedName@@Util.NO_LOCATION @TO@ SimpleName@@MethodName:handleResultFragment:[Util.NO_LOCATION, fragment] @AT@ 18422 @LENGTH@ 16
------------------------------INS SimpleName@@Util @TO@ QualifiedName@@Util.NO_LOCATION @AT@ 18422 @LENGTH@ 4
------------------------------INS SimpleName@@NO_LOCATION @TO@ QualifiedName@@Util.NO_LOCATION @AT@ 18427 @LENGTH@ 11
---------------------------INS SimpleName@@fragment @TO@ SimpleName@@MethodName:handleResultFragment:[Util.NO_LOCATION, fragment] @AT@ 18440 @LENGTH@ 8


UPD TryStatement@@try {  final BatchBuilder batchBuilder=updateContext.getServiceTarget();  final FileHandlerService service=new FileHandlerService();  final ServiceBuilder<Handler> serviceBuilder=batchBuilder.addService(LogServices.handlerName(getName()),service);  final String relativeTo=this.relativeTo;  if (relativeTo != null) {    serviceBuilder.addDependency(AbstractPathService.pathNameOf(relativeTo),String.class,service.getRelativeToInjector());  }  service.setLevel(Level.parse(getLevelName()));  final Boolean autoFlush=getAutoflush();  if (autoFlush != null)   service.setAutoflush(autoFlush.booleanValue());  try {    service.setEncoding(getEncoding());  } catch (  UnsupportedEncodingException e) {    handler.handleFailure(e,param);    return;  }  try {    service.setPath(path);  } catch (  FileNotFoundException e) {    handler.handleFailure(e,param);    return;  }  service.setFormatterSpec(getFormatter());  serviceBuilder.setInitialMode(ServiceController.Mode.ACTIVE);  serviceBuilder.addListener(new UpdateResultHandler.ServiceStartListener<P>(handler,param));  serviceBuilder.install();} catch (Throwable t) {  handler.handleFailure(t,param);  return;} @TO@ try {  final ServiceTarget target=updateContext.getServiceTarget();  final FileHandlerService service=new FileHandlerService();  final ServiceBuilder<Handler> serviceBuilder=target.addService(LogServices.handlerName(getName()),service);  final String relativeTo=this.relativeTo;  if (relativeTo != null) {    serviceBuilder.addDependency(AbstractPathService.pathNameOf(relativeTo),String.class,service.getRelativeToInjector());  }  service.setLevel(Level.parse(getLevelName()));  final Boolean autoFlush=getAutoflush();  if (autoFlush != null)   service.setAutoflush(autoFlush.booleanValue());  try {    service.setEncoding(getEncoding());  } catch (  UnsupportedEncodingException e) {    handler.handleFailure(e,param);    return;  }  try {    service.setPath(path);  } catch (  FileNotFoundException e) {    handler.handleFailure(e,param);    return;  }  service.setFormatterSpec(getFormatter());  serviceBuilder.setInitialMode(ServiceController.Mode.ACTIVE);  serviceBuilder.addListener(new UpdateResultHandler.ServiceStartListener<P>(handler,param));  serviceBuilder.install();} catch (Throwable t) {  handler.handleFailure(t,param);  return;} @AT@ 2698 @LENGTH@ 1509
---UPD VariableDeclarationStatement@@final BatchBuilder batchBuilder=updateContext.getServiceTarget(); @TO@ final ServiceTarget target=updateContext.getServiceTarget(); @AT@ 2716 @LENGTH@ 67
------UPD SimpleType@@BatchBuilder @TO@ ServiceTarget @AT@ 2722 @LENGTH@ 12
------UPD VariableDeclarationFragment@@batchBuilder=updateContext.getServiceTarget() @TO@ target=updateContext.getServiceTarget() @AT@ 2735 @LENGTH@ 47
---------UPD SimpleName@@batchBuilder @TO@ target @AT@ 2735 @LENGTH@ 12
---UPD VariableDeclarationStatement@@final ServiceBuilder<Handler> serviceBuilder=batchBuilder.addService(LogServices.handlerName(getName()),service); @TO@ final ServiceBuilder<Handler> serviceBuilder=target.addService(LogServices.handlerName(getName()),service); @AT@ 2869 @LENGTH@ 116
------UPD VariableDeclarationFragment@@serviceBuilder=batchBuilder.addService(LogServices.handlerName(getName()),service) @TO@ serviceBuilder=target.addService(LogServices.handlerName(getName()),service) @AT@ 2899 @LENGTH@ 85
---------UPD MethodInvocation@@batchBuilder.addService(LogServices.handlerName(getName()),service) @TO@ target.addService(LogServices.handlerName(getName()),service) @AT@ 2916 @LENGTH@ 68
------------UPD SimpleName@@Name:batchBuilder @TO@ Name:target @AT@ 2916 @LENGTH@ 12


UPD ExpressionStatement@@MethodInvocation:ServerDeploymentRepositoryImpl.addService(serviceTarget,serverEnvironment.getServerDeployDir(),serverEnvironment.getServerSystemDeployDir(),contentRepository) @TO@ MethodInvocation:ServerDeploymentRepositoryImpl.addService(serviceTarget,contentRepository) @AT@ 5770 @LENGTH@ 162
---UPD MethodInvocation@@ServerDeploymentRepositoryImpl.addService(serviceTarget,serverEnvironment.getServerDeployDir(),serverEnvironment.getServerSystemDeployDir(),contentRepository) @TO@ ServerDeploymentRepositoryImpl.addService(serviceTarget,contentRepository) @AT@ 5770 @LENGTH@ 161
------UPD SimpleName@@MethodName:addService:[serviceTarget, serverEnvironment.getServerDeployDir(), serverEnvironment.getServerSystemDeployDir(), contentRepository] @TO@ MethodName:addService:[serviceTarget, contentRepository] @AT@ 5801 @LENGTH@ 130
---------DEL MethodInvocation@@serverEnvironment.getServerDeployDir() @AT@ 5827 @LENGTH@ 38
------------DEL SimpleName@@Name:serverEnvironment @AT@ 5827 @LENGTH@ 17
------------DEL SimpleName@@MethodName:getServerDeployDir:[] @AT@ 5845 @LENGTH@ 20
---------DEL MethodInvocation@@serverEnvironment.getServerSystemDeployDir() @AT@ 5867 @LENGTH@ 44
------------DEL SimpleName@@Name:serverEnvironment @AT@ 5867 @LENGTH@ 17
------------DEL SimpleName@@MethodName:getServerSystemDeployDir:[] @AT@ 5885 @LENGTH@ 26


UPD MethodDeclaration@@protected, void, MethodName:doStart, Exception,  @TO@ public, void, MethodName:start, Exception,  @AT@ 1961 @LENGTH@ 742
---UPD Modifier@@protected @TO@ public @AT@ 1961 @LENGTH@ 9
---UPD SimpleName@@MethodName:doStart @TO@ MethodName:start @AT@ 1976 @LENGTH@ 7


DEL FieldDeclaration@@private, static, final, transient, Logger, [LOG=LoggerFactory.getLogger(BindySimpleKeyValuePairWithoutSectionMarshallDslTest.class)] @AT@ 1891 @LENGTH@ 128
---DEL Modifier@@private @AT@ 1891 @LENGTH@ 7
---DEL Modifier@@static @AT@ 1899 @LENGTH@ 6
---DEL Modifier@@final @AT@ 1906 @LENGTH@ 5
---DEL Modifier@@transient @AT@ 1912 @LENGTH@ 9
---DEL SimpleType@@Logger @AT@ 1922 @LENGTH@ 6
---DEL VariableDeclarationFragment@@LOG=LoggerFactory.getLogger(BindySimpleKeyValuePairWithoutSectionMarshallDslTest.class) @AT@ 1929 @LENGTH@ 89
------DEL SimpleName@@LOG @AT@ 1929 @LENGTH@ 3
------DEL MethodInvocation@@LoggerFactory.getLogger(BindySimpleKeyValuePairWithoutSectionMarshallDslTest.class) @AT@ 1935 @LENGTH@ 83
---------DEL SimpleName@@Name:LoggerFactory @AT@ 1935 @LENGTH@ 13
---------DEL SimpleName@@MethodName:getLogger:[BindySimpleKeyValuePairWithoutSectionMarshallDslTest.class] @AT@ 1949 @LENGTH@ 69
------------DEL TypeLiteral@@BindySimpleKeyValuePairWithoutSectionMarshallDslTest.class @AT@ 1959 @LENGTH@ 58


INS FieldDeclaration@@public, static, final, AttachmentKey<ModuleIdentifier>, [MODULE_IDENTIFIER=AttachmentKey.create(ModuleIdentifier.class)] @TO@ TypeDeclaration@@[public, final]Attachments,  @AT@ 6412 @LENGTH@ 117
---INS Modifier@@public @TO@ FieldDeclaration@@public, static, final, AttachmentKey<ModuleIdentifier>, [MODULE_IDENTIFIER=AttachmentKey.create(ModuleIdentifier.class)] @AT@ 6412 @LENGTH@ 6
---INS Modifier@@static @TO@ FieldDeclaration@@public, static, final, AttachmentKey<ModuleIdentifier>, [MODULE_IDENTIFIER=AttachmentKey.create(ModuleIdentifier.class)] @AT@ 6419 @LENGTH@ 6
---INS Modifier@@final @TO@ FieldDeclaration@@public, static, final, AttachmentKey<ModuleIdentifier>, [MODULE_IDENTIFIER=AttachmentKey.create(ModuleIdentifier.class)] @AT@ 6426 @LENGTH@ 5
---INS ParameterizedType@@AttachmentKey<ModuleIdentifier> @TO@ FieldDeclaration@@public, static, final, AttachmentKey<ModuleIdentifier>, [MODULE_IDENTIFIER=AttachmentKey.create(ModuleIdentifier.class)] @AT@ 6432 @LENGTH@ 31
------INS SimpleType@@AttachmentKey @TO@ ParameterizedType@@AttachmentKey<ModuleIdentifier> @AT@ 6432 @LENGTH@ 13
------INS SimpleType@@ModuleIdentifier @TO@ ParameterizedType@@AttachmentKey<ModuleIdentifier> @AT@ 6446 @LENGTH@ 16
---INS VariableDeclarationFragment@@MODULE_IDENTIFIER=AttachmentKey.create(ModuleIdentifier.class) @TO@ FieldDeclaration@@public, static, final, AttachmentKey<ModuleIdentifier>, [MODULE_IDENTIFIER=AttachmentKey.create(ModuleIdentifier.class)] @AT@ 6464 @LENGTH@ 64
------INS SimpleName@@MODULE_IDENTIFIER @TO@ VariableDeclarationFragment@@MODULE_IDENTIFIER=AttachmentKey.create(ModuleIdentifier.class) @AT@ 6464 @LENGTH@ 17
------INS MethodInvocation@@AttachmentKey.create(ModuleIdentifier.class) @TO@ VariableDeclarationFragment@@MODULE_IDENTIFIER=AttachmentKey.create(ModuleIdentifier.class) @AT@ 6484 @LENGTH@ 44
---------INS SimpleName@@Name:AttachmentKey @TO@ MethodInvocation@@AttachmentKey.create(ModuleIdentifier.class) @AT@ 6484 @LENGTH@ 13
---------INS SimpleName@@MethodName:create:[ModuleIdentifier.class] @TO@ MethodInvocation@@AttachmentKey.create(ModuleIdentifier.class) @AT@ 6498 @LENGTH@ 30
------------INS TypeLiteral@@ModuleIdentifier.class @TO@ SimpleName@@MethodName:create:[ModuleIdentifier.class] @AT@ 6505 @LENGTH@ 22


UPD IfStatement@@if (!isWarDeployment(phaseContext)) {  return;} @TO@ if (!isWarDeployment(phaseContext.getDeploymentUnit())) {  return;} @AT@ 2033 @LENGTH@ 94
---UPD PrefixExpression@@!isWarDeployment(phaseContext) @TO@ !isWarDeployment(phaseContext.getDeploymentUnit()) @AT@ 2036 @LENGTH@ 30
------UPD MethodInvocation@@isWarDeployment(phaseContext) @TO@ isWarDeployment(phaseContext.getDeploymentUnit()) @AT@ 2037 @LENGTH@ 29
---------UPD SimpleName@@MethodName:isWarDeployment:[phaseContext] @TO@ MethodName:isWarDeployment:[phaseContext.getDeploymentUnit()] @AT@ 2037 @LENGTH@ 29
------------DEL SimpleName@@phaseContext @AT@ 2053 @LENGTH@ 12
------------INS MethodInvocation@@phaseContext.getDeploymentUnit() @TO@ SimpleName@@MethodName:isWarDeployment:[phaseContext] @AT@ 2068 @LENGTH@ 32
---------------INS SimpleName@@Name:phaseContext @TO@ MethodInvocation@@phaseContext.getDeploymentUnit() @AT@ 2068 @LENGTH@ 12
---------------INS SimpleName@@MethodName:getDeploymentUnit:[] @TO@ MethodInvocation@@phaseContext.getDeploymentUnit() @AT@ 2081 @LENGTH@ 19


UPD MethodDeclaration@@protected, void, MethodName:doHandle, CommandContext ctx,  @TO@ protected, void, MethodName:doHandle, CommandContext ctx, CommandFormatException,  @AT@ 2106 @LENGTH@ 1134
---INS SimpleType@@CommandFormatException @TO@ MethodDeclaration@@protected, void, MethodName:doHandle, CommandContext ctx,  @AT@ 2157 @LENGTH@ 22


UPD ExpressionStatement@@MethodInvocation:phaseServiceBuilder.addDependencies(Services.deploymentUnitName(deploymentUnit.getParent().getName(),deploymentUnit.getName(),nextPhase)) @TO@ MethodInvocation:phaseServiceBuilder.addDependencies(Services.deploymentUnitName(deploymentUnit.getParent().getName(),nextPhase)) @AT@ 6975 @LENGTH@ 140
---UPD MethodInvocation@@phaseServiceBuilder.addDependencies(Services.deploymentUnitName(deploymentUnit.getParent().getName(),deploymentUnit.getName(),nextPhase)) @TO@ phaseServiceBuilder.addDependencies(Services.deploymentUnitName(deploymentUnit.getParent().getName(),nextPhase)) @AT@ 6975 @LENGTH@ 139
------UPD SimpleName@@MethodName:addDependencies:[Services.deploymentUnitName(deploymentUnit.getParent().getName(),deploymentUnit.getName(),nextPhase)] @TO@ MethodName:addDependencies:[Services.deploymentUnitName(deploymentUnit.getParent().getName(),nextPhase)] @AT@ 6995 @LENGTH@ 119
---------UPD MethodInvocation@@Services.deploymentUnitName(deploymentUnit.getParent().getName(),deploymentUnit.getName(),nextPhase) @TO@ Services.deploymentUnitName(deploymentUnit.getParent().getName(),nextPhase) @AT@ 7011 @LENGTH@ 102
------------UPD SimpleName@@MethodName:deploymentUnitName:[deploymentUnit.getParent().getName(), deploymentUnit.getName(), nextPhase] @TO@ MethodName:deploymentUnitName:[deploymentUnit.getParent().getName(), nextPhase] @AT@ 7020 @LENGTH@ 93
---------------DEL MethodInvocation@@deploymentUnit.getName() @AT@ 7077 @LENGTH@ 24
------------------DEL SimpleName@@Name:deploymentUnit @AT@ 7077 @LENGTH@ 14
------------------DEL SimpleName@@MethodName:getName:[] @AT@ 7092 @LENGTH@ 9


INS ExpressionStatement@@MethodInvocation:System.out.println(queue) @TO@ MethodDeclaration@@public, void, MethodName:testPubSub, Exception,  @AT@ 6737 @LENGTH@ 26
---INS MethodInvocation@@System.out.println(queue) @TO@ ExpressionStatement@@MethodInvocation:System.out.println(queue) @AT@ 6737 @LENGTH@ 25
------INS QualifiedName@@Name:System.out @TO@ MethodInvocation@@System.out.println(queue) @AT@ 6737 @LENGTH@ 10
------INS SimpleName@@MethodName:println:[queue] @TO@ MethodInvocation@@System.out.println(queue) @AT@ 6748 @LENGTH@ 14
---------INS SimpleName@@queue @TO@ SimpleName@@MethodName:println:[queue] @AT@ 6756 @LENGTH@ 5


UPD IfStatement@@if (stepExecutions != null) {  this.stepExecutions.addAll(stepExecutions);} @TO@ if (stepExecutions != null) {  this.stepExecutions.removeAll(stepExecutions);  this.stepExecutions.addAll(stepExecutions);} @AT@ 8370 @LENGTH@ 78
---UPD Block@@ThenBody:{  this.stepExecutions.addAll(stepExecutions);} @TO@ ThenBody:{  this.stepExecutions.removeAll(stepExecutions);  this.stepExecutions.addAll(stepExecutions);} @AT@ 8396 @LENGTH@ 52
------INS ExpressionStatement@@MethodInvocation:this.stepExecutions.removeAll(stepExecutions) @TO@ Block@@ThenBody:{  this.stepExecutions.addAll(stepExecutions);} @AT@ 8401 @LENGTH@ 46
---------INS MethodInvocation@@this.stepExecutions.removeAll(stepExecutions) @TO@ ExpressionStatement@@MethodInvocation:this.stepExecutions.removeAll(stepExecutions) @AT@ 8401 @LENGTH@ 45
------------INS FieldAccess@@this.stepExecutions @TO@ MethodInvocation@@this.stepExecutions.removeAll(stepExecutions) @AT@ 8401 @LENGTH@ 19
---------------INS ThisExpression@@this @TO@ FieldAccess@@this.stepExecutions @AT@ 8401 @LENGTH@ 4
---------------INS SimpleName@@stepExecutions @TO@ FieldAccess@@this.stepExecutions @AT@ 8406 @LENGTH@ 14
------------INS SimpleName@@MethodName:removeAll:[stepExecutions] @TO@ MethodInvocation@@this.stepExecutions.removeAll(stepExecutions) @AT@ 8421 @LENGTH@ 25
---------------INS SimpleName@@stepExecutions @TO@ SimpleName@@MethodName:removeAll:[stepExecutions] @AT@ 8431 @LENGTH@ 14


UPD TryStatement@@try {  if (additionalClasses.containsKey(name)) {    return additionalClasses.get(name);  }  return module.getClassLoader().loadClass(name);} catch (Exception e) {  throw new ResourceLoadingException(e);} @TO@ try {  if (additionalClasses.containsKey(name)) {    return additionalClasses.get(name);  }  return module.getClassLoader().loadClass(name);} catch (NoClassDefFoundError e) {  throw new ResourceLoadingException(e);}catch (ClassNotFoundException e) {  throw new ResourceLoadingException(e);}catch (LinkageError e) {  throw new ResourceLoadingException(e);} @AT@ 2293 @LENGTH@ 279
---UPD CatchClause@@catch (Exception e) {  throw new ResourceLoadingException(e);} @TO@ catch (NoClassDefFoundError e) {  throw new ResourceLoadingException(e);} @AT@ 2490 @LENGTH@ 82
------UPD SingleVariableDeclaration@@Exception e @TO@ NoClassDefFoundError e @AT@ 2497 @LENGTH@ 11
---------UPD SimpleType@@Exception @TO@ NoClassDefFoundError @AT@ 2497 @LENGTH@ 9
---INS CatchClause@@catch (ClassNotFoundException e) {  throw new ResourceLoadingException(e);} @TO@ TryStatement@@try {  if (additionalClasses.containsKey(name)) {    return additionalClasses.get(name);  }  return module.getClassLoader().loadClass(name);} catch (Exception e) {  throw new ResourceLoadingException(e);} @AT@ 2584 @LENGTH@ 95
------INS SingleVariableDeclaration@@ClassNotFoundException e @TO@ CatchClause@@catch (ClassNotFoundException e) {  throw new ResourceLoadingException(e);} @AT@ 2591 @LENGTH@ 24
---------INS SimpleType@@ClassNotFoundException @TO@ SingleVariableDeclaration@@ClassNotFoundException e @AT@ 2591 @LENGTH@ 22
---------INS SimpleName@@e @TO@ SingleVariableDeclaration@@ClassNotFoundException e @AT@ 2614 @LENGTH@ 1
------INS ThrowStatement@@ClassInstanceCreation:new ResourceLoadingException(e) @TO@ CatchClause@@catch (ClassNotFoundException e) {  throw new ResourceLoadingException(e);} @AT@ 2631 @LENGTH@ 38
---------INS ClassInstanceCreation@@ResourceLoadingException[e] @TO@ ThrowStatement@@ClassInstanceCreation:new ResourceLoadingException(e) @AT@ 2637 @LENGTH@ 31
------------INS New@@new @TO@ ClassInstanceCreation@@ResourceLoadingException[e] @AT@ 2637 @LENGTH@ 3
------------INS SimpleType@@ResourceLoadingException @TO@ ClassInstanceCreation@@ResourceLoadingException[e] @AT@ 2641 @LENGTH@ 24
------------INS SimpleName@@e @TO@ ClassInstanceCreation@@ResourceLoadingException[e] @AT@ 2666 @LENGTH@ 1
---INS CatchClause@@catch (LinkageError e) {  throw new ResourceLoadingException(e);} @TO@ TryStatement@@try {  if (additionalClasses.containsKey(name)) {    return additionalClasses.get(name);  }  return module.getClassLoader().loadClass(name);} catch (Exception e) {  throw new ResourceLoadingException(e);} @AT@ 2680 @LENGTH@ 85
------INS SingleVariableDeclaration@@LinkageError e @TO@ CatchClause@@catch (LinkageError e) {  throw new ResourceLoadingException(e);} @AT@ 2687 @LENGTH@ 14
---------INS SimpleType@@LinkageError @TO@ SingleVariableDeclaration@@LinkageError e @AT@ 2687 @LENGTH@ 12
---------INS SimpleName@@e @TO@ SingleVariableDeclaration@@LinkageError e @AT@ 2700 @LENGTH@ 1
------INS ThrowStatement@@ClassInstanceCreation:new ResourceLoadingException(e) @TO@ CatchClause@@catch (LinkageError e) {  throw new ResourceLoadingException(e);} @AT@ 2717 @LENGTH@ 38
---------INS ClassInstanceCreation@@ResourceLoadingException[e] @TO@ ThrowStatement@@ClassInstanceCreation:new ResourceLoadingException(e) @AT@ 2723 @LENGTH@ 31
------------INS New@@new @TO@ ClassInstanceCreation@@ResourceLoadingException[e] @AT@ 2723 @LENGTH@ 3
------------INS SimpleType@@ResourceLoadingException @TO@ ClassInstanceCreation@@ResourceLoadingException[e] @AT@ 2727 @LENGTH@ 24
------------INS SimpleName@@e @TO@ ClassInstanceCreation@@ResourceLoadingException[e] @AT@ 2752 @LENGTH@ 1


UPD IfStatement@@if (fileManager.exists(footerFileLocation)) {  footerFile=fileManager.updateFile(footerFileLocation);  footer=XmlUtils.getDocumentBuilder().parse(footerFile.getInputStream());} else {  new IllegalStateException("Could not aquire the footer.jspx file");} @TO@ if (fileManager.exists(footerFileLocation)) {  footerFile=fileManager.updateFile(footerFileLocation);  footer=XmlUtils.getDocumentBuilder().parse(footerFile.getInputStream());} else {  throw new IllegalStateException("Could not aquire the footer.jspx file");} @AT@ 24228 @LENGTH@ 274
---UPD Block@@ElseBody:{  new IllegalStateException("Could not aquire the footer.jspx file");} @TO@ ElseBody:{  throw new IllegalStateException("Could not aquire the footer.jspx file");} @AT@ 24424 @LENGTH@ 78
------INS ThrowStatement@@ClassInstanceCreation:new IllegalStateException("Could not aquire the footer.jspx file") @TO@ Block@@ElseBody:{  new IllegalStateException("Could not aquire the footer.jspx file");} @AT@ 24430 @LENGTH@ 73
---------INS ClassInstanceCreation@@IllegalStateException["Could not aquire the footer.jspx file"] @TO@ ThrowStatement@@ClassInstanceCreation:new IllegalStateException("Could not aquire the footer.jspx file") @AT@ 24436 @LENGTH@ 66
------------MOV New@@new @TO@ ClassInstanceCreation@@IllegalStateException["Could not aquire the footer.jspx file"] @AT@ 24430 @LENGTH@ 3
------------MOV SimpleType@@IllegalStateException @TO@ ClassInstanceCreation@@IllegalStateException["Could not aquire the footer.jspx file"] @AT@ 24434 @LENGTH@ 21
------------MOV StringLiteral@@"Could not aquire the footer.jspx file" @TO@ ClassInstanceCreation@@IllegalStateException["Could not aquire the footer.jspx file"] @AT@ 24456 @LENGTH@ 39
------DEL ExpressionStatement@@ClassInstanceCreation:new IllegalStateException("Could not aquire the footer.jspx file") @AT@ 24430 @LENGTH@ 67
---------DEL ClassInstanceCreation@@IllegalStateException["Could not aquire the footer.jspx file"] @AT@ 24430 @LENGTH@ 66


INS VariableDeclarationStatement@@final ServicesAttachment servicesAttachment=deploymentUnit.getAttachment(Attachments.SERVICES); @TO@ MethodDeclaration@@public, void, MethodName:deploy, DeploymentPhaseContext phaseContext, DeploymentUnitProcessingException,  @AT@ 2270 @LENGTH@ 97
---INS Modifier@@final @TO@ VariableDeclarationStatement@@final ServicesAttachment servicesAttachment=deploymentUnit.getAttachment(Attachments.SERVICES); @AT@ 2270 @LENGTH@ 5
---INS SimpleType@@ServicesAttachment @TO@ VariableDeclarationStatement@@final ServicesAttachment servicesAttachment=deploymentUnit.getAttachment(Attachments.SERVICES); @AT@ 2276 @LENGTH@ 18
---INS VariableDeclarationFragment@@servicesAttachment=deploymentUnit.getAttachment(Attachments.SERVICES) @TO@ VariableDeclarationStatement@@final ServicesAttachment servicesAttachment=deploymentUnit.getAttachment(Attachments.SERVICES); @AT@ 2295 @LENGTH@ 71
------INS SimpleName@@servicesAttachment @TO@ VariableDeclarationFragment@@servicesAttachment=deploymentUnit.getAttachment(Attachments.SERVICES) @AT@ 2295 @LENGTH@ 18
------INS MethodInvocation@@deploymentUnit.getAttachment(Attachments.SERVICES) @TO@ VariableDeclarationFragment@@servicesAttachment=deploymentUnit.getAttachment(Attachments.SERVICES) @AT@ 2316 @LENGTH@ 50
---------INS SimpleName@@Name:deploymentUnit @TO@ MethodInvocation@@deploymentUnit.getAttachment(Attachments.SERVICES) @AT@ 2316 @LENGTH@ 14
---------INS SimpleName@@MethodName:getAttachment:[Attachments.SERVICES] @TO@ MethodInvocation@@deploymentUnit.getAttachment(Attachments.SERVICES) @AT@ 2331 @LENGTH@ 35
------------INS QualifiedName@@Attachments.SERVICES @TO@ SimpleName@@MethodName:getAttachment:[Attachments.SERVICES] @AT@ 2345 @LENGTH@ 20
---------------INS SimpleName@@Attachments @TO@ QualifiedName@@Attachments.SERVICES @AT@ 2345 @LENGTH@ 11
---------------INS SimpleName@@SERVICES @TO@ QualifiedName@@Attachments.SERVICES @AT@ 2357 @LENGTH@ 8


UPD MethodDeclaration@@public, boolean, MethodName:canAppearNext, CommandContext ctx,  @TO@ public, boolean, MethodName:canAppearNext, CommandContext ctx, CommandFormatException,  @AT@ 2700 @LENGTH@ 254
---INS SimpleType@@CommandFormatException @TO@ MethodDeclaration@@public, boolean, MethodName:canAppearNext, CommandContext ctx,  @AT@ 2786 @LENGTH@ 22


UPD ExpressionStatement@@MethodInvocation:assertThat(clazz,equalTo(SimpleTrade.class)) @TO@ MethodInvocation:assertEquals(clazz,SimpleTrade.class) @AT@ 2370 @LENGTH@ 46
---UPD MethodInvocation@@assertThat(clazz,equalTo(SimpleTrade.class)) @TO@ assertEquals(clazz,SimpleTrade.class) @AT@ 2370 @LENGTH@ 45
------UPD SimpleName@@MethodName:assertThat:[clazz, equalTo(SimpleTrade.class)] @TO@ MethodName:assertEquals:[clazz, SimpleTrade.class] @AT@ 2370 @LENGTH@ 45
---------DEL MethodInvocation@@equalTo(SimpleTrade.class) @AT@ 2388 @LENGTH@ 26
------------DEL SimpleName@@MethodName:equalTo:[SimpleTrade.class] @AT@ 2388 @LENGTH@ 26
---------MOV TypeLiteral@@SimpleTrade.class @TO@ SimpleName@@MethodName:assertThat:[clazz, equalTo(SimpleTrade.class)] @AT@ 2396 @LENGTH@ 17


UPD MethodDeclaration@@byte[], MethodName:getRange, byte[] key, int begin, int end,  @TO@ byte[], MethodName:getRange, byte[] key, long begin, long end,  @AT@ 1358 @LENGTH@ 41
---UPD SingleVariableDeclaration@@int begin @TO@ long begin @AT@ 1379 @LENGTH@ 9
------UPD PrimitiveType@@int @TO@ long @AT@ 1379 @LENGTH@ 3
---UPD SingleVariableDeclaration@@int end @TO@ long end @AT@ 1390 @LENGTH@ 7
------UPD PrimitiveType@@int @TO@ long @AT@ 1390 @LENGTH@ 3


INS MethodDeclaration@@public, String, MethodName:getSymbolNameTurnedIntoMutatorMethodName,  @TO@ TypeDeclaration@@[public, final]JavaSymbolName, [Comparable<JavaSymbolName>] @AT@ 1561 @LENGTH@ 117
---INS Modifier@@public @TO@ MethodDeclaration@@public, String, MethodName:getSymbolNameTurnedIntoMutatorMethodName,  @AT@ 1561 @LENGTH@ 6
---INS SimpleType@@String @TO@ MethodDeclaration@@public, String, MethodName:getSymbolNameTurnedIntoMutatorMethodName,  @AT@ 1568 @LENGTH@ 6
---INS SimpleName@@MethodName:getSymbolNameTurnedIntoMutatorMethodName @TO@ MethodDeclaration@@public, String, MethodName:getSymbolNameTurnedIntoMutatorMethodName,  @AT@ 1575 @LENGTH@ 40
---INS ReturnStatement@@InfixExpression:"set" + getSymbolNameCapitalisedFirstLetter() @TO@ MethodDeclaration@@public, String, MethodName:getSymbolNameTurnedIntoMutatorMethodName,  @AT@ 1622 @LENGTH@ 53
------INS InfixExpression@@"set" + getSymbolNameCapitalisedFirstLetter() @TO@ ReturnStatement@@InfixExpression:"set" + getSymbolNameCapitalisedFirstLetter() @AT@ 1629 @LENGTH@ 45
---------INS StringLiteral@@"set" @TO@ InfixExpression@@"set" + getSymbolNameCapitalisedFirstLetter() @AT@ 1629 @LENGTH@ 5
---------INS Operator@@+ @TO@ InfixExpression@@"set" + getSymbolNameCapitalisedFirstLetter() @AT@ 1634 @LENGTH@ 1
---------INS MethodInvocation@@MethodName:getSymbolNameCapitalisedFirstLetter:[] @TO@ InfixExpression@@"set" + getSymbolNameCapitalisedFirstLetter() @AT@ 1637 @LENGTH@ 37


UPD ExpressionStatement@@MethodInvocation:template.remove(entityInformation.getCollectionName(),getIdQuery(entityInformation.getId(entity))) @TO@ MethodInvocation:template.remove(entityInformation.getCollectionName(),getIdQuery(entityInformation.getId(entity)),entity.getClass()) @AT@ 3771 @LENGTH@ 100
---UPD MethodInvocation@@template.remove(entityInformation.getCollectionName(),getIdQuery(entityInformation.getId(entity))) @TO@ template.remove(entityInformation.getCollectionName(),getIdQuery(entityInformation.getId(entity)),entity.getClass()) @AT@ 3771 @LENGTH@ 99
------UPD SimpleName@@MethodName:remove:[entityInformation.getCollectionName(), getIdQuery(entityInformation.getId(entity))] @TO@ MethodName:remove:[entityInformation.getCollectionName(), getIdQuery(entityInformation.getId(entity)), entity.getClass()] @AT@ 3780 @LENGTH@ 90
---------INS MethodInvocation@@entity.getClass() @TO@ SimpleName@@MethodName:remove:[entityInformation.getCollectionName(), getIdQuery(entityInformation.getId(entity))] @AT@ 3871 @LENGTH@ 17
------------INS SimpleName@@Name:entity @TO@ MethodInvocation@@entity.getClass() @AT@ 3871 @LENGTH@ 6
------------INS SimpleName@@MethodName:getClass:[] @TO@ MethodInvocation@@entity.getClass() @AT@ 3878 @LENGTH@ 10


UPD TypeDeclaration@@[@RunWith(JUnit4TestRunner.class), public]CamelJibxTest, AbstractFeatureTest @TO@ [@RunWith(JUnit4TestRunner.class), @Ignore("Disabled unit jibx bundles is in central maven repo"), public]CamelJibxTest, AbstractFeatureTest @AT@ 1140 @LENGTH@ 495
---INS SingleMemberAnnotation@@@Ignore("Disabled unit jibx bundles is in central maven repo") @TO@ TypeDeclaration@@[@RunWith(JUnit4TestRunner.class), public]CamelJibxTest, AbstractFeatureTest @AT@ 1198 @LENGTH@ 62


UPD SwitchStatement@@switch (element) {case ACCEPTORS:{    final ModelNode acceptors=processAcceptors(reader);    operation.get(ACCEPTOR).set(acceptors);    break;  }case ADDRESS_SETTINGS:{  final ModelNode addressSettings=processAddressSettings(reader);  operation.get(ADDRESS_SETTING).set(addressSettings);  break;}case ASYNC_CONNECTION_EXECUTION_ENABLED:unhandledElement(reader,element);break;case BACKUP:handleElementText(reader,element,operation);break;case BACKUP_CONNECTOR_REF:handleElementText(reader,element,operation);break;case BINDINGS_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(BINDINGS_DIRECTORY).set(directory);break;}case BROADCAST_PERIOD:handleElementText(reader,element,operation);break;case CLUSTERED:handleElementText(reader,element,operation);break;case CLUSTER_PASSWORD:handleElementText(reader,element,operation);break;case CLUSTER_USER:handleElementText(reader,element,operation);break;case CONNECTION_TTL_OVERRIDE:handleElementText(reader,element,operation);break;case CONNECTORS:{final ModelNode connectors=processConnectors(reader);operation.get(CONNECTOR).set(connectors);break;}case CONNECTOR_REF:unhandledElement(reader,element);break;case CREATE_BINDINGS_DIR:handleElementText(reader,element,operation);break;case CREATE_JOURNAL_DIR:handleElementText(reader,element,operation);break;case FILE_DEPLOYMENT_ENABLED:unhandledElement(reader,element);break;case GROUP_ADDRESS:unhandledElement(reader,element);break;case GROUP_PORT:unhandledElement(reader,element);break;case GROUPING_HANDLER:unhandledElement(reader,element);break;case ID_CACHE_SIZE:handleElementText(reader,element,operation);break;case JMX_DOMAIN:handleElementText(reader,element,operation);break;case JMX_MANAGEMENT_ENABLED:handleElementText(reader,element,operation);break;case JOURNAL_BUFFER_SIZE:unhandledElement(reader,element);break;case JOURNAL_BUFFER_TIMEOUT:handleElementText(reader,element,operation);break;case JOURNAL_COMPACT_MIN_FILES:handleElementText(reader,element,operation);break;case JOURNAL_COMPACT_PERCENTAGE:handleElementText(reader,element,operation);break;case JOURNAL_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(JOURNAL_DIRECTORY).set(directory);break;}case JOURNAL_MIN_FILES:{operation.get(JOURNAL_MIN_FILES).set(reader.getElementText());break;}case JOURNAL_SYNC_NON_TRANSACTIONAL:handleElementText(reader,element,operation);break;case JOURNAL_SYNC_TRANSACTIONAL:handleElementText(reader,element,operation);break;case JOURNAL_TYPE:{String journalType=reader.getElementText();if (journalType != null && journalType.length() > 0) {JournalType.valueOf(journalType.trim());operation.get(JOURNAL_TYPE).set(journalType.trim());}break;}case JOURNAL_FILE_SIZE:{String text=reader.getElementText();if (text != null && text.length() > 0) {operation.get(JOURNAL_FILE_SIZE).set(text.trim());}}break;case JOURNAL_MAX_IO:handleElementText(reader,element,operation);break;case LARGE_MESSAGES_DIRECTORY:{final ModelNode dir=parseDirectory(reader);operation.get(LARGE_MESSAGES_DIRECTORY).set(dir);break;}case LOCAL_BIND_ADDRESS:unhandledElement(reader,element);break;case LOCAL_BIND_PORT:unhandledElement(reader,element);break;case LOG_JOURNAL_WRITE_RATE:handleElementText(reader,element,operation);break;case MANAGEMENT_ADDRESS:unhandledElement(reader,element);break;case MANAGEMENT_NOTIFICATION_ADDRESS:unhandledElement(reader,element);break;case MEMORY_MEASURE_INTERVAL:unhandledElement(reader,element);break;case MEMORY_WARNING_THRESHOLD:unhandledElement(reader,element);break;case MESSAGE_COUNTER_ENABLED:unhandledElement(reader,element);break;case MESSAGE_COUNTER_MAX_DAY_HISTORY:unhandledElement(reader,element);break;case MESSAGE_COUNTER_SAMPLE_PERIOD:unhandledElement(reader,element);break;case MESSAGE_EXPIRY_SCAN_PERIOD:unhandledElement(reader,element);break;case MESSAGE_EXPIRY_THREAD_PRIORITY:unhandledElement(reader,element);break;case PAGING_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(PAGING_DIRECTORY).set(directory);break;}case PERF_BLAST_PAGES:unhandledElement(reader,element);break;case PERSIST_DELIVERY_COUNT_BEFORE_DELIVERY:unhandledElement(reader,element);break;case PERSIST_ID_CACHE:unhandledElement(reader,element);break;case PERSISTENCE_ENABLED:{final String value=reader.getElementText();if (value != null && value.length() > 0) {boolean enabled=Boolean.valueOf(value.trim());operation.get(PERSISTENCE_ENABLED).set(enabled);}break;}case REFRESH_TIMEOUT:unhandledElement(reader,element);break;case REMOTING_INTERCEPTORS:unhandledElement(reader,element);break;case RUN_SYNC_SPEED_TEST:unhandledElement(reader,element);break;case SECURITY_ENABLED:unhandledElement(reader,element);break;case SECURITY_INVALIDATION_INTERVAL:unhandledElement(reader,element);break;case SECURITY_SETTINGS:{final ModelNode securitySettings=processSecuritySettings(reader);operation.get(SECURITY_SETTING).set(securitySettings);break;}case SERVER_DUMP_INTERVAL:unhandledElement(reader,element);break;case SHARED_STORE:unhandledElement(reader,element);break;case TRANSACTION_TIMEOUT:unhandledElement(reader,element);break;case TRANSACTION_TIMEOUT_SCAN_PERIOD:unhandledElement(reader,element);break;case WILD_CARD_ROUTING_ENABLED:unhandledElement(reader,element);break;case DEAD_LETTER_ADDRESS_NODE_NAME:unhandledElement(reader,element);break;case EXPIRY_ADDRESS_NODE_NAME:unhandledElement(reader,element);break;case REDELIVERY_DELAY_NODE_NAME:unhandledElement(reader,element);break;case MAX_DELIVERY_ATTEMPTS:unhandledElement(reader,element);break;case MAX_SIZE_BYTES_NODE_NAME:unhandledElement(reader,element);break;case ADDRESS_FULL_MESSAGE_POLICY_NODE_NAME:unhandledElement(reader,element);break;case PAGE_SIZE_BYTES_NODE_NAME:unhandledElement(reader,element);break;case MESSAGE_COUNTER_HISTORY_DAY_LIMIT_NODE_NAME:unhandledElement(reader,element);break;case LVQ_NODE_NAME:unhandledElement(reader,element);break;case REDISTRIBUTION_DELAY_NODE_NAME:unhandledElement(reader,element);break;case SEND_TO_DLA_ON_NO_ROUTE:unhandledElement(reader,element);break;case QUEUES:{final ModelNode queues=parseQueues(reader);operation.get(QUEUE).set(queues);break;}case SUBSYSTEM:break;default :throw ParseUtils.unexpectedElement(reader);} @TO@ switch (element) {case ACCEPTORS:{    final ModelNode acceptors=processAcceptors(reader);    operation.get(ACCEPTOR).set(acceptors);    break;  }case ADDRESS_SETTINGS:{  final ModelNode addressSettings=processAddressSettings(reader);  operation.get(ADDRESS_SETTING).set(addressSettings);  break;}case ASYNC_CONNECTION_EXECUTION_ENABLED:unhandledElement(reader,element);break;case BACKUP:handleElementText(reader,element,operation);break;case BINDINGS_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(BINDINGS_DIRECTORY).set(directory);break;}case BROADCAST_PERIOD:handleElementText(reader,element,operation);break;case CLUSTERED:handleElementText(reader,element,operation);break;case CLUSTER_PASSWORD:handleElementText(reader,element,operation);break;case CLUSTER_USER:handleElementText(reader,element,operation);break;case CONNECTION_TTL_OVERRIDE:handleElementText(reader,element,operation);break;case CONNECTORS:{final ModelNode connectors=processConnectors(reader);operation.get(CONNECTOR).set(connectors);break;}case CONNECTOR_REF:unhandledElement(reader,element);break;case CREATE_BINDINGS_DIR:handleElementText(reader,element,operation);break;case CREATE_JOURNAL_DIR:handleElementText(reader,element,operation);break;case FILE_DEPLOYMENT_ENABLED:unhandledElement(reader,element);break;case GROUP_ADDRESS:unhandledElement(reader,element);break;case GROUP_PORT:unhandledElement(reader,element);break;case GROUPING_HANDLER:unhandledElement(reader,element);break;case ID_CACHE_SIZE:handleElementText(reader,element,operation);break;case JMX_DOMAIN:handleElementText(reader,element,operation);break;case JMX_MANAGEMENT_ENABLED:handleElementText(reader,element,operation);break;case JOURNAL_BUFFER_SIZE:unhandledElement(reader,element);break;case JOURNAL_BUFFER_TIMEOUT:handleElementText(reader,element,operation);break;case JOURNAL_COMPACT_MIN_FILES:handleElementText(reader,element,operation);break;case JOURNAL_COMPACT_PERCENTAGE:handleElementText(reader,element,operation);break;case JOURNAL_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(JOURNAL_DIRECTORY).set(directory);break;}case JOURNAL_MIN_FILES:{operation.get(JOURNAL_MIN_FILES).set(reader.getElementText());break;}case JOURNAL_SYNC_NON_TRANSACTIONAL:handleElementText(reader,element,operation);break;case JOURNAL_SYNC_TRANSACTIONAL:handleElementText(reader,element,operation);break;case JOURNAL_TYPE:{String journalType=reader.getElementText();if (journalType != null && journalType.length() > 0) {JournalType.valueOf(journalType.trim());operation.get(JOURNAL_TYPE).set(journalType.trim());}break;}case JOURNAL_FILE_SIZE:{String text=reader.getElementText();if (text != null && text.length() > 0) {operation.get(JOURNAL_FILE_SIZE).set(text.trim());}}break;case JOURNAL_MAX_IO:handleElementText(reader,element,operation);break;case LARGE_MESSAGES_DIRECTORY:{final ModelNode dir=parseDirectory(reader);operation.get(LARGE_MESSAGES_DIRECTORY).set(dir);break;}case LOCAL_BIND_ADDRESS:unhandledElement(reader,element);break;case LOCAL_BIND_PORT:unhandledElement(reader,element);break;case LOG_JOURNAL_WRITE_RATE:handleElementText(reader,element,operation);break;case MANAGEMENT_ADDRESS:unhandledElement(reader,element);break;case MANAGEMENT_NOTIFICATION_ADDRESS:unhandledElement(reader,element);break;case MEMORY_MEASURE_INTERVAL:unhandledElement(reader,element);break;case MEMORY_WARNING_THRESHOLD:unhandledElement(reader,element);break;case MESSAGE_COUNTER_ENABLED:unhandledElement(reader,element);break;case MESSAGE_COUNTER_MAX_DAY_HISTORY:unhandledElement(reader,element);break;case MESSAGE_COUNTER_SAMPLE_PERIOD:unhandledElement(reader,element);break;case MESSAGE_EXPIRY_SCAN_PERIOD:unhandledElement(reader,element);break;case MESSAGE_EXPIRY_THREAD_PRIORITY:unhandledElement(reader,element);break;case PAGING_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(PAGING_DIRECTORY).set(directory);break;}case PERF_BLAST_PAGES:unhandledElement(reader,element);break;case PERSIST_DELIVERY_COUNT_BEFORE_DELIVERY:unhandledElement(reader,element);break;case PERSIST_ID_CACHE:unhandledElement(reader,element);break;case PERSISTENCE_ENABLED:{final String value=reader.getElementText();if (value != null && value.length() > 0) {boolean enabled=Boolean.valueOf(value.trim());operation.get(PERSISTENCE_ENABLED).set(enabled);}break;}case REFRESH_TIMEOUT:unhandledElement(reader,element);break;case REMOTING_INTERCEPTORS:unhandledElement(reader,element);break;case RUN_SYNC_SPEED_TEST:unhandledElement(reader,element);break;case SECURITY_ENABLED:unhandledElement(reader,element);break;case SECURITY_INVALIDATION_INTERVAL:unhandledElement(reader,element);break;case SECURITY_SETTINGS:{final ModelNode securitySettings=processSecuritySettings(reader);operation.get(SECURITY_SETTING).set(securitySettings);break;}case SERVER_DUMP_INTERVAL:unhandledElement(reader,element);break;case SHARED_STORE:unhandledElement(reader,element);break;case TRANSACTION_TIMEOUT:unhandledElement(reader,element);break;case TRANSACTION_TIMEOUT_SCAN_PERIOD:unhandledElement(reader,element);break;case WILD_CARD_ROUTING_ENABLED:unhandledElement(reader,element);break;case DEAD_LETTER_ADDRESS_NODE_NAME:unhandledElement(reader,element);break;case EXPIRY_ADDRESS_NODE_NAME:unhandledElement(reader,element);break;case REDELIVERY_DELAY_NODE_NAME:unhandledElement(reader,element);break;case MAX_DELIVERY_ATTEMPTS:unhandledElement(reader,element);break;case MAX_SIZE_BYTES_NODE_NAME:unhandledElement(reader,element);break;case ADDRESS_FULL_MESSAGE_POLICY_NODE_NAME:unhandledElement(reader,element);break;case PAGE_SIZE_BYTES_NODE_NAME:unhandledElement(reader,element);break;case MESSAGE_COUNTER_HISTORY_DAY_LIMIT_NODE_NAME:unhandledElement(reader,element);break;case LVQ_NODE_NAME:unhandledElement(reader,element);break;case REDISTRIBUTION_DELAY_NODE_NAME:unhandledElement(reader,element);break;case SEND_TO_DLA_ON_NO_ROUTE:unhandledElement(reader,element);break;case QUEUES:{final ModelNode queues=parseQueues(reader);operation.get(QUEUE).set(queues);break;}case SUBSYSTEM:break;default :throw ParseUtils.unexpectedElement(reader);} @AT@ 6131 @LENGTH@ 11454
---DEL SwitchCase@@case BACKUP_CONNECTOR_REF: @AT@ 6935 @LENGTH@ 26
------DEL SimpleName@@BACKUP_CONNECTOR_REF @AT@ 6940 @LENGTH@ 20
---MOV ExpressionStatement@@MethodInvocation:handleElementText(reader,element,operation) @TO@ SwitchStatement@@switch (element) {case ACCEPTORS:{    final ModelNode acceptors=processAcceptors(reader);    operation.get(ACCEPTOR).set(acceptors);    break;  }case ADDRESS_SETTINGS:{  final ModelNode addressSettings=processAddressSettings(reader);  operation.get(ADDRESS_SETTING).set(addressSettings);  break;}case ASYNC_CONNECTION_EXECUTION_ENABLED:unhandledElement(reader,element);break;case BACKUP:handleElementText(reader,element,operation);break;case BACKUP_CONNECTOR_REF:handleElementText(reader,element,operation);break;case BINDINGS_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(BINDINGS_DIRECTORY).set(directory);break;}case BROADCAST_PERIOD:handleElementText(reader,element,operation);break;case CLUSTERED:handleElementText(reader,element,operation);break;case CLUSTER_PASSWORD:handleElementText(reader,element,operation);break;case CLUSTER_USER:handleElementText(reader,element,operation);break;case CONNECTION_TTL_OVERRIDE:handleElementText(reader,element,operation);break;case CONNECTORS:{final ModelNode connectors=processConnectors(reader);operation.get(CONNECTOR).set(connectors);break;}case CONNECTOR_REF:unhandledElement(reader,element);break;case CREATE_BINDINGS_DIR:handleElementText(reader,element,operation);break;case CREATE_JOURNAL_DIR:handleElementText(reader,element,operation);break;case FILE_DEPLOYMENT_ENABLED:unhandledElement(reader,element);break;case GROUP_ADDRESS:unhandledElement(reader,element);break;case GROUP_PORT:unhandledElement(reader,element);break;case GROUPING_HANDLER:unhandledElement(reader,element);break;case ID_CACHE_SIZE:handleElementText(reader,element,operation);break;case JMX_DOMAIN:handleElementText(reader,element,operation);break;case JMX_MANAGEMENT_ENABLED:handleElementText(reader,element,operation);break;case JOURNAL_BUFFER_SIZE:unhandledElement(reader,element);break;case JOURNAL_BUFFER_TIMEOUT:handleElementText(reader,element,operation);break;case JOURNAL_COMPACT_MIN_FILES:handleElementText(reader,element,operation);break;case JOURNAL_COMPACT_PERCENTAGE:handleElementText(reader,element,operation);break;case JOURNAL_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(JOURNAL_DIRECTORY).set(directory);break;}case JOURNAL_MIN_FILES:{operation.get(JOURNAL_MIN_FILES).set(reader.getElementText());break;}case JOURNAL_SYNC_NON_TRANSACTIONAL:handleElementText(reader,element,operation);break;case JOURNAL_SYNC_TRANSACTIONAL:handleElementText(reader,element,operation);break;case JOURNAL_TYPE:{String journalType=reader.getElementText();if (journalType != null && journalType.length() > 0) {JournalType.valueOf(journalType.trim());operation.get(JOURNAL_TYPE).set(journalType.trim());}break;}case JOURNAL_FILE_SIZE:{String text=reader.getElementText();if (text != null && text.length() > 0) {operation.get(JOURNAL_FILE_SIZE).set(text.trim());}}break;case JOURNAL_MAX_IO:handleElementText(reader,element,operation);break;case LARGE_MESSAGES_DIRECTORY:{final ModelNode dir=parseDirectory(reader);operation.get(LARGE_MESSAGES_DIRECTORY).set(dir);break;}case LOCAL_BIND_ADDRESS:unhandledElement(reader,element);break;case LOCAL_BIND_PORT:unhandledElement(reader,element);break;case LOG_JOURNAL_WRITE_RATE:handleElementText(reader,element,operation);break;case MANAGEMENT_ADDRESS:unhandledElement(reader,element);break;case MANAGEMENT_NOTIFICATION_ADDRESS:unhandledElement(reader,element);break;case MEMORY_MEASURE_INTERVAL:unhandledElement(reader,element);break;case MEMORY_WARNING_THRESHOLD:unhandledElement(reader,element);break;case MESSAGE_COUNTER_ENABLED:unhandledElement(reader,element);break;case MESSAGE_COUNTER_MAX_DAY_HISTORY:unhandledElement(reader,element);break;case MESSAGE_COUNTER_SAMPLE_PERIOD:unhandledElement(reader,element);break;case MESSAGE_EXPIRY_SCAN_PERIOD:unhandledElement(reader,element);break;case MESSAGE_EXPIRY_THREAD_PRIORITY:unhandledElement(reader,element);break;case PAGING_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(PAGING_DIRECTORY).set(directory);break;}case PERF_BLAST_PAGES:unhandledElement(reader,element);break;case PERSIST_DELIVERY_COUNT_BEFORE_DELIVERY:unhandledElement(reader,element);break;case PERSIST_ID_CACHE:unhandledElement(reader,element);break;case PERSISTENCE_ENABLED:{final String value=reader.getElementText();if (value != null && value.length() > 0) {boolean enabled=Boolean.valueOf(value.trim());operation.get(PERSISTENCE_ENABLED).set(enabled);}break;}case REFRESH_TIMEOUT:unhandledElement(reader,element);break;case REMOTING_INTERCEPTORS:unhandledElement(reader,element);break;case RUN_SYNC_SPEED_TEST:unhandledElement(reader,element);break;case SECURITY_ENABLED:unhandledElement(reader,element);break;case SECURITY_INVALIDATION_INTERVAL:unhandledElement(reader,element);break;case SECURITY_SETTINGS:{final ModelNode securitySettings=processSecuritySettings(reader);operation.get(SECURITY_SETTING).set(securitySettings);break;}case SERVER_DUMP_INTERVAL:unhandledElement(reader,element);break;case SHARED_STORE:unhandledElement(reader,element);break;case TRANSACTION_TIMEOUT:unhandledElement(reader,element);break;case TRANSACTION_TIMEOUT_SCAN_PERIOD:unhandledElement(reader,element);break;case WILD_CARD_ROUTING_ENABLED:unhandledElement(reader,element);break;case DEAD_LETTER_ADDRESS_NODE_NAME:unhandledElement(reader,element);break;case EXPIRY_ADDRESS_NODE_NAME:unhandledElement(reader,element);break;case REDELIVERY_DELAY_NODE_NAME:unhandledElement(reader,element);break;case MAX_DELIVERY_ATTEMPTS:unhandledElement(reader,element);break;case MAX_SIZE_BYTES_NODE_NAME:unhandledElement(reader,element);break;case ADDRESS_FULL_MESSAGE_POLICY_NODE_NAME:unhandledElement(reader,element);break;case PAGE_SIZE_BYTES_NODE_NAME:unhandledElement(reader,element);break;case MESSAGE_COUNTER_HISTORY_DAY_LIMIT_NODE_NAME:unhandledElement(reader,element);break;case LVQ_NODE_NAME:unhandledElement(reader,element);break;case REDISTRIBUTION_DELAY_NODE_NAME:unhandledElement(reader,element);break;case SEND_TO_DLA_ON_NO_ROUTE:unhandledElement(reader,element);break;case QUEUES:{final ModelNode queues=parseQueues(reader);operation.get(QUEUE).set(queues);break;}case SUBSYSTEM:break;default :throw ParseUtils.unexpectedElement(reader);} @AT@ 6982 @LENGTH@ 46
---DEL BreakStatement@@ @AT@ 7049 @LENGTH@ 6
---MOV ExpressionStatement@@MethodInvocation:handleElementText(reader,element,operation) @TO@ SwitchStatement@@switch (element) {case ACCEPTORS:{    final ModelNode acceptors=processAcceptors(reader);    operation.get(ACCEPTOR).set(acceptors);    break;  }case ADDRESS_SETTINGS:{  final ModelNode addressSettings=processAddressSettings(reader);  operation.get(ADDRESS_SETTING).set(addressSettings);  break;}case ASYNC_CONNECTION_EXECUTION_ENABLED:unhandledElement(reader,element);break;case BACKUP:handleElementText(reader,element,operation);break;case BACKUP_CONNECTOR_REF:handleElementText(reader,element,operation);break;case BINDINGS_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(BINDINGS_DIRECTORY).set(directory);break;}case BROADCAST_PERIOD:handleElementText(reader,element,operation);break;case CLUSTERED:handleElementText(reader,element,operation);break;case CLUSTER_PASSWORD:handleElementText(reader,element,operation);break;case CLUSTER_USER:handleElementText(reader,element,operation);break;case CONNECTION_TTL_OVERRIDE:handleElementText(reader,element,operation);break;case CONNECTORS:{final ModelNode connectors=processConnectors(reader);operation.get(CONNECTOR).set(connectors);break;}case CONNECTOR_REF:unhandledElement(reader,element);break;case CREATE_BINDINGS_DIR:handleElementText(reader,element,operation);break;case CREATE_JOURNAL_DIR:handleElementText(reader,element,operation);break;case FILE_DEPLOYMENT_ENABLED:unhandledElement(reader,element);break;case GROUP_ADDRESS:unhandledElement(reader,element);break;case GROUP_PORT:unhandledElement(reader,element);break;case GROUPING_HANDLER:unhandledElement(reader,element);break;case ID_CACHE_SIZE:handleElementText(reader,element,operation);break;case JMX_DOMAIN:handleElementText(reader,element,operation);break;case JMX_MANAGEMENT_ENABLED:handleElementText(reader,element,operation);break;case JOURNAL_BUFFER_SIZE:unhandledElement(reader,element);break;case JOURNAL_BUFFER_TIMEOUT:handleElementText(reader,element,operation);break;case JOURNAL_COMPACT_MIN_FILES:handleElementText(reader,element,operation);break;case JOURNAL_COMPACT_PERCENTAGE:handleElementText(reader,element,operation);break;case JOURNAL_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(JOURNAL_DIRECTORY).set(directory);break;}case JOURNAL_MIN_FILES:{operation.get(JOURNAL_MIN_FILES).set(reader.getElementText());break;}case JOURNAL_SYNC_NON_TRANSACTIONAL:handleElementText(reader,element,operation);break;case JOURNAL_SYNC_TRANSACTIONAL:handleElementText(reader,element,operation);break;case JOURNAL_TYPE:{String journalType=reader.getElementText();if (journalType != null && journalType.length() > 0) {JournalType.valueOf(journalType.trim());operation.get(JOURNAL_TYPE).set(journalType.trim());}break;}case JOURNAL_FILE_SIZE:{String text=reader.getElementText();if (text != null && text.length() > 0) {operation.get(JOURNAL_FILE_SIZE).set(text.trim());}}break;case JOURNAL_MAX_IO:handleElementText(reader,element,operation);break;case LARGE_MESSAGES_DIRECTORY:{final ModelNode dir=parseDirectory(reader);operation.get(LARGE_MESSAGES_DIRECTORY).set(dir);break;}case LOCAL_BIND_ADDRESS:unhandledElement(reader,element);break;case LOCAL_BIND_PORT:unhandledElement(reader,element);break;case LOG_JOURNAL_WRITE_RATE:handleElementText(reader,element,operation);break;case MANAGEMENT_ADDRESS:unhandledElement(reader,element);break;case MANAGEMENT_NOTIFICATION_ADDRESS:unhandledElement(reader,element);break;case MEMORY_MEASURE_INTERVAL:unhandledElement(reader,element);break;case MEMORY_WARNING_THRESHOLD:unhandledElement(reader,element);break;case MESSAGE_COUNTER_ENABLED:unhandledElement(reader,element);break;case MESSAGE_COUNTER_MAX_DAY_HISTORY:unhandledElement(reader,element);break;case MESSAGE_COUNTER_SAMPLE_PERIOD:unhandledElement(reader,element);break;case MESSAGE_EXPIRY_SCAN_PERIOD:unhandledElement(reader,element);break;case MESSAGE_EXPIRY_THREAD_PRIORITY:unhandledElement(reader,element);break;case PAGING_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(PAGING_DIRECTORY).set(directory);break;}case PERF_BLAST_PAGES:unhandledElement(reader,element);break;case PERSIST_DELIVERY_COUNT_BEFORE_DELIVERY:unhandledElement(reader,element);break;case PERSIST_ID_CACHE:unhandledElement(reader,element);break;case PERSISTENCE_ENABLED:{final String value=reader.getElementText();if (value != null && value.length() > 0) {boolean enabled=Boolean.valueOf(value.trim());operation.get(PERSISTENCE_ENABLED).set(enabled);}break;}case REFRESH_TIMEOUT:unhandledElement(reader,element);break;case REMOTING_INTERCEPTORS:unhandledElement(reader,element);break;case RUN_SYNC_SPEED_TEST:unhandledElement(reader,element);break;case SECURITY_ENABLED:unhandledElement(reader,element);break;case SECURITY_INVALIDATION_INTERVAL:unhandledElement(reader,element);break;case SECURITY_SETTINGS:{final ModelNode securitySettings=processSecuritySettings(reader);operation.get(SECURITY_SETTING).set(securitySettings);break;}case SERVER_DUMP_INTERVAL:unhandledElement(reader,element);break;case SHARED_STORE:unhandledElement(reader,element);break;case TRANSACTION_TIMEOUT:unhandledElement(reader,element);break;case TRANSACTION_TIMEOUT_SCAN_PERIOD:unhandledElement(reader,element);break;case WILD_CARD_ROUTING_ENABLED:unhandledElement(reader,element);break;case DEAD_LETTER_ADDRESS_NODE_NAME:unhandledElement(reader,element);break;case EXPIRY_ADDRESS_NODE_NAME:unhandledElement(reader,element);break;case REDELIVERY_DELAY_NODE_NAME:unhandledElement(reader,element);break;case MAX_DELIVERY_ATTEMPTS:unhandledElement(reader,element);break;case MAX_SIZE_BYTES_NODE_NAME:unhandledElement(reader,element);break;case ADDRESS_FULL_MESSAGE_POLICY_NODE_NAME:unhandledElement(reader,element);break;case PAGE_SIZE_BYTES_NODE_NAME:unhandledElement(reader,element);break;case MESSAGE_COUNTER_HISTORY_DAY_LIMIT_NODE_NAME:unhandledElement(reader,element);break;case LVQ_NODE_NAME:unhandledElement(reader,element);break;case REDISTRIBUTION_DELAY_NODE_NAME:unhandledElement(reader,element);break;case SEND_TO_DLA_ON_NO_ROUTE:unhandledElement(reader,element);break;case QUEUES:{final ModelNode queues=parseQueues(reader);operation.get(QUEUE).set(queues);break;}case SUBSYSTEM:break;default :throw ParseUtils.unexpectedElement(reader);} @AT@ 7329 @LENGTH@ 46
---MOV ExpressionStatement@@MethodInvocation:handleElementText(reader,element,operation) @TO@ SwitchStatement@@switch (element) {case ACCEPTORS:{    final ModelNode acceptors=processAcceptors(reader);    operation.get(ACCEPTOR).set(acceptors);    break;  }case ADDRESS_SETTINGS:{  final ModelNode addressSettings=processAddressSettings(reader);  operation.get(ADDRESS_SETTING).set(addressSettings);  break;}case ASYNC_CONNECTION_EXECUTION_ENABLED:unhandledElement(reader,element);break;case BACKUP:handleElementText(reader,element,operation);break;case BACKUP_CONNECTOR_REF:handleElementText(reader,element,operation);break;case BINDINGS_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(BINDINGS_DIRECTORY).set(directory);break;}case BROADCAST_PERIOD:handleElementText(reader,element,operation);break;case CLUSTERED:handleElementText(reader,element,operation);break;case CLUSTER_PASSWORD:handleElementText(reader,element,operation);break;case CLUSTER_USER:handleElementText(reader,element,operation);break;case CONNECTION_TTL_OVERRIDE:handleElementText(reader,element,operation);break;case CONNECTORS:{final ModelNode connectors=processConnectors(reader);operation.get(CONNECTOR).set(connectors);break;}case CONNECTOR_REF:unhandledElement(reader,element);break;case CREATE_BINDINGS_DIR:handleElementText(reader,element,operation);break;case CREATE_JOURNAL_DIR:handleElementText(reader,element,operation);break;case FILE_DEPLOYMENT_ENABLED:unhandledElement(reader,element);break;case GROUP_ADDRESS:unhandledElement(reader,element);break;case GROUP_PORT:unhandledElement(reader,element);break;case GROUPING_HANDLER:unhandledElement(reader,element);break;case ID_CACHE_SIZE:handleElementText(reader,element,operation);break;case JMX_DOMAIN:handleElementText(reader,element,operation);break;case JMX_MANAGEMENT_ENABLED:handleElementText(reader,element,operation);break;case JOURNAL_BUFFER_SIZE:unhandledElement(reader,element);break;case JOURNAL_BUFFER_TIMEOUT:handleElementText(reader,element,operation);break;case JOURNAL_COMPACT_MIN_FILES:handleElementText(reader,element,operation);break;case JOURNAL_COMPACT_PERCENTAGE:handleElementText(reader,element,operation);break;case JOURNAL_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(JOURNAL_DIRECTORY).set(directory);break;}case JOURNAL_MIN_FILES:{operation.get(JOURNAL_MIN_FILES).set(reader.getElementText());break;}case JOURNAL_SYNC_NON_TRANSACTIONAL:handleElementText(reader,element,operation);break;case JOURNAL_SYNC_TRANSACTIONAL:handleElementText(reader,element,operation);break;case JOURNAL_TYPE:{String journalType=reader.getElementText();if (journalType != null && journalType.length() > 0) {JournalType.valueOf(journalType.trim());operation.get(JOURNAL_TYPE).set(journalType.trim());}break;}case JOURNAL_FILE_SIZE:{String text=reader.getElementText();if (text != null && text.length() > 0) {operation.get(JOURNAL_FILE_SIZE).set(text.trim());}}break;case JOURNAL_MAX_IO:handleElementText(reader,element,operation);break;case LARGE_MESSAGES_DIRECTORY:{final ModelNode dir=parseDirectory(reader);operation.get(LARGE_MESSAGES_DIRECTORY).set(dir);break;}case LOCAL_BIND_ADDRESS:unhandledElement(reader,element);break;case LOCAL_BIND_PORT:unhandledElement(reader,element);break;case LOG_JOURNAL_WRITE_RATE:handleElementText(reader,element,operation);break;case MANAGEMENT_ADDRESS:unhandledElement(reader,element);break;case MANAGEMENT_NOTIFICATION_ADDRESS:unhandledElement(reader,element);break;case MEMORY_MEASURE_INTERVAL:unhandledElement(reader,element);break;case MEMORY_WARNING_THRESHOLD:unhandledElement(reader,element);break;case MESSAGE_COUNTER_ENABLED:unhandledElement(reader,element);break;case MESSAGE_COUNTER_MAX_DAY_HISTORY:unhandledElement(reader,element);break;case MESSAGE_COUNTER_SAMPLE_PERIOD:unhandledElement(reader,element);break;case MESSAGE_EXPIRY_SCAN_PERIOD:unhandledElement(reader,element);break;case MESSAGE_EXPIRY_THREAD_PRIORITY:unhandledElement(reader,element);break;case PAGING_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(PAGING_DIRECTORY).set(directory);break;}case PERF_BLAST_PAGES:unhandledElement(reader,element);break;case PERSIST_DELIVERY_COUNT_BEFORE_DELIVERY:unhandledElement(reader,element);break;case PERSIST_ID_CACHE:unhandledElement(reader,element);break;case PERSISTENCE_ENABLED:{final String value=reader.getElementText();if (value != null && value.length() > 0) {boolean enabled=Boolean.valueOf(value.trim());operation.get(PERSISTENCE_ENABLED).set(enabled);}break;}case REFRESH_TIMEOUT:unhandledElement(reader,element);break;case REMOTING_INTERCEPTORS:unhandledElement(reader,element);break;case RUN_SYNC_SPEED_TEST:unhandledElement(reader,element);break;case SECURITY_ENABLED:unhandledElement(reader,element);break;case SECURITY_INVALIDATION_INTERVAL:unhandledElement(reader,element);break;case SECURITY_SETTINGS:{final ModelNode securitySettings=processSecuritySettings(reader);operation.get(SECURITY_SETTING).set(securitySettings);break;}case SERVER_DUMP_INTERVAL:unhandledElement(reader,element);break;case SHARED_STORE:unhandledElement(reader,element);break;case TRANSACTION_TIMEOUT:unhandledElement(reader,element);break;case TRANSACTION_TIMEOUT_SCAN_PERIOD:unhandledElement(reader,element);break;case WILD_CARD_ROUTING_ENABLED:unhandledElement(reader,element);break;case DEAD_LETTER_ADDRESS_NODE_NAME:unhandledElement(reader,element);break;case EXPIRY_ADDRESS_NODE_NAME:unhandledElement(reader,element);break;case REDELIVERY_DELAY_NODE_NAME:unhandledElement(reader,element);break;case MAX_DELIVERY_ATTEMPTS:unhandledElement(reader,element);break;case MAX_SIZE_BYTES_NODE_NAME:unhandledElement(reader,element);break;case ADDRESS_FULL_MESSAGE_POLICY_NODE_NAME:unhandledElement(reader,element);break;case PAGE_SIZE_BYTES_NODE_NAME:unhandledElement(reader,element);break;case MESSAGE_COUNTER_HISTORY_DAY_LIMIT_NODE_NAME:unhandledElement(reader,element);break;case LVQ_NODE_NAME:unhandledElement(reader,element);break;case REDISTRIBUTION_DELAY_NODE_NAME:unhandledElement(reader,element);break;case SEND_TO_DLA_ON_NO_ROUTE:unhandledElement(reader,element);break;case QUEUES:{final ModelNode queues=parseQueues(reader);operation.get(QUEUE).set(queues);break;}case SUBSYSTEM:break;default :throw ParseUtils.unexpectedElement(reader);} @AT@ 7455 @LENGTH@ 46
---MOV ExpressionStatement@@MethodInvocation:handleElementText(reader,element,operation) @TO@ SwitchStatement@@switch (element) {case ACCEPTORS:{    final ModelNode acceptors=processAcceptors(reader);    operation.get(ACCEPTOR).set(acceptors);    break;  }case ADDRESS_SETTINGS:{  final ModelNode addressSettings=processAddressSettings(reader);  operation.get(ADDRESS_SETTING).set(addressSettings);  break;}case ASYNC_CONNECTION_EXECUTION_ENABLED:unhandledElement(reader,element);break;case BACKUP:handleElementText(reader,element,operation);break;case BACKUP_CONNECTOR_REF:handleElementText(reader,element,operation);break;case BINDINGS_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(BINDINGS_DIRECTORY).set(directory);break;}case BROADCAST_PERIOD:handleElementText(reader,element,operation);break;case CLUSTERED:handleElementText(reader,element,operation);break;case CLUSTER_PASSWORD:handleElementText(reader,element,operation);break;case CLUSTER_USER:handleElementText(reader,element,operation);break;case CONNECTION_TTL_OVERRIDE:handleElementText(reader,element,operation);break;case CONNECTORS:{final ModelNode connectors=processConnectors(reader);operation.get(CONNECTOR).set(connectors);break;}case CONNECTOR_REF:unhandledElement(reader,element);break;case CREATE_BINDINGS_DIR:handleElementText(reader,element,operation);break;case CREATE_JOURNAL_DIR:handleElementText(reader,element,operation);break;case FILE_DEPLOYMENT_ENABLED:unhandledElement(reader,element);break;case GROUP_ADDRESS:unhandledElement(reader,element);break;case GROUP_PORT:unhandledElement(reader,element);break;case GROUPING_HANDLER:unhandledElement(reader,element);break;case ID_CACHE_SIZE:handleElementText(reader,element,operation);break;case JMX_DOMAIN:handleElementText(reader,element,operation);break;case JMX_MANAGEMENT_ENABLED:handleElementText(reader,element,operation);break;case JOURNAL_BUFFER_SIZE:unhandledElement(reader,element);break;case JOURNAL_BUFFER_TIMEOUT:handleElementText(reader,element,operation);break;case JOURNAL_COMPACT_MIN_FILES:handleElementText(reader,element,operation);break;case JOURNAL_COMPACT_PERCENTAGE:handleElementText(reader,element,operation);break;case JOURNAL_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(JOURNAL_DIRECTORY).set(directory);break;}case JOURNAL_MIN_FILES:{operation.get(JOURNAL_MIN_FILES).set(reader.getElementText());break;}case JOURNAL_SYNC_NON_TRANSACTIONAL:handleElementText(reader,element,operation);break;case JOURNAL_SYNC_TRANSACTIONAL:handleElementText(reader,element,operation);break;case JOURNAL_TYPE:{String journalType=reader.getElementText();if (journalType != null && journalType.length() > 0) {JournalType.valueOf(journalType.trim());operation.get(JOURNAL_TYPE).set(journalType.trim());}break;}case JOURNAL_FILE_SIZE:{String text=reader.getElementText();if (text != null && text.length() > 0) {operation.get(JOURNAL_FILE_SIZE).set(text.trim());}}break;case JOURNAL_MAX_IO:handleElementText(reader,element,operation);break;case LARGE_MESSAGES_DIRECTORY:{final ModelNode dir=parseDirectory(reader);operation.get(LARGE_MESSAGES_DIRECTORY).set(dir);break;}case LOCAL_BIND_ADDRESS:unhandledElement(reader,element);break;case LOCAL_BIND_PORT:unhandledElement(reader,element);break;case LOG_JOURNAL_WRITE_RATE:handleElementText(reader,element,operation);break;case MANAGEMENT_ADDRESS:unhandledElement(reader,element);break;case MANAGEMENT_NOTIFICATION_ADDRESS:unhandledElement(reader,element);break;case MEMORY_MEASURE_INTERVAL:unhandledElement(reader,element);break;case MEMORY_WARNING_THRESHOLD:unhandledElement(reader,element);break;case MESSAGE_COUNTER_ENABLED:unhandledElement(reader,element);break;case MESSAGE_COUNTER_MAX_DAY_HISTORY:unhandledElement(reader,element);break;case MESSAGE_COUNTER_SAMPLE_PERIOD:unhandledElement(reader,element);break;case MESSAGE_EXPIRY_SCAN_PERIOD:unhandledElement(reader,element);break;case MESSAGE_EXPIRY_THREAD_PRIORITY:unhandledElement(reader,element);break;case PAGING_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(PAGING_DIRECTORY).set(directory);break;}case PERF_BLAST_PAGES:unhandledElement(reader,element);break;case PERSIST_DELIVERY_COUNT_BEFORE_DELIVERY:unhandledElement(reader,element);break;case PERSIST_ID_CACHE:unhandledElement(reader,element);break;case PERSISTENCE_ENABLED:{final String value=reader.getElementText();if (value != null && value.length() > 0) {boolean enabled=Boolean.valueOf(value.trim());operation.get(PERSISTENCE_ENABLED).set(enabled);}break;}case REFRESH_TIMEOUT:unhandledElement(reader,element);break;case REMOTING_INTERCEPTORS:unhandledElement(reader,element);break;case RUN_SYNC_SPEED_TEST:unhandledElement(reader,element);break;case SECURITY_ENABLED:unhandledElement(reader,element);break;case SECURITY_INVALIDATION_INTERVAL:unhandledElement(reader,element);break;case SECURITY_SETTINGS:{final ModelNode securitySettings=processSecuritySettings(reader);operation.get(SECURITY_SETTING).set(securitySettings);break;}case SERVER_DUMP_INTERVAL:unhandledElement(reader,element);break;case SHARED_STORE:unhandledElement(reader,element);break;case TRANSACTION_TIMEOUT:unhandledElement(reader,element);break;case TRANSACTION_TIMEOUT_SCAN_PERIOD:unhandledElement(reader,element);break;case WILD_CARD_ROUTING_ENABLED:unhandledElement(reader,element);break;case DEAD_LETTER_ADDRESS_NODE_NAME:unhandledElement(reader,element);break;case EXPIRY_ADDRESS_NODE_NAME:unhandledElement(reader,element);break;case REDELIVERY_DELAY_NODE_NAME:unhandledElement(reader,element);break;case MAX_DELIVERY_ATTEMPTS:unhandledElement(reader,element);break;case MAX_SIZE_BYTES_NODE_NAME:unhandledElement(reader,element);break;case ADDRESS_FULL_MESSAGE_POLICY_NODE_NAME:unhandledElement(reader,element);break;case PAGE_SIZE_BYTES_NODE_NAME:unhandledElement(reader,element);break;case MESSAGE_COUNTER_HISTORY_DAY_LIMIT_NODE_NAME:unhandledElement(reader,element);break;case LVQ_NODE_NAME:unhandledElement(reader,element);break;case REDISTRIBUTION_DELAY_NODE_NAME:unhandledElement(reader,element);break;case SEND_TO_DLA_ON_NO_ROUTE:unhandledElement(reader,element);break;case QUEUES:{final ModelNode queues=parseQueues(reader);operation.get(QUEUE).set(queues);break;}case SUBSYSTEM:break;default :throw ParseUtils.unexpectedElement(reader);} @AT@ 7588 @LENGTH@ 46
---MOV ExpressionStatement@@MethodInvocation:handleElementText(reader,element,operation) @TO@ SwitchStatement@@switch (element) {case ACCEPTORS:{    final ModelNode acceptors=processAcceptors(reader);    operation.get(ACCEPTOR).set(acceptors);    break;  }case ADDRESS_SETTINGS:{  final ModelNode addressSettings=processAddressSettings(reader);  operation.get(ADDRESS_SETTING).set(addressSettings);  break;}case ASYNC_CONNECTION_EXECUTION_ENABLED:unhandledElement(reader,element);break;case BACKUP:handleElementText(reader,element,operation);break;case BACKUP_CONNECTOR_REF:handleElementText(reader,element,operation);break;case BINDINGS_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(BINDINGS_DIRECTORY).set(directory);break;}case BROADCAST_PERIOD:handleElementText(reader,element,operation);break;case CLUSTERED:handleElementText(reader,element,operation);break;case CLUSTER_PASSWORD:handleElementText(reader,element,operation);break;case CLUSTER_USER:handleElementText(reader,element,operation);break;case CONNECTION_TTL_OVERRIDE:handleElementText(reader,element,operation);break;case CONNECTORS:{final ModelNode connectors=processConnectors(reader);operation.get(CONNECTOR).set(connectors);break;}case CONNECTOR_REF:unhandledElement(reader,element);break;case CREATE_BINDINGS_DIR:handleElementText(reader,element,operation);break;case CREATE_JOURNAL_DIR:handleElementText(reader,element,operation);break;case FILE_DEPLOYMENT_ENABLED:unhandledElement(reader,element);break;case GROUP_ADDRESS:unhandledElement(reader,element);break;case GROUP_PORT:unhandledElement(reader,element);break;case GROUPING_HANDLER:unhandledElement(reader,element);break;case ID_CACHE_SIZE:handleElementText(reader,element,operation);break;case JMX_DOMAIN:handleElementText(reader,element,operation);break;case JMX_MANAGEMENT_ENABLED:handleElementText(reader,element,operation);break;case JOURNAL_BUFFER_SIZE:unhandledElement(reader,element);break;case JOURNAL_BUFFER_TIMEOUT:handleElementText(reader,element,operation);break;case JOURNAL_COMPACT_MIN_FILES:handleElementText(reader,element,operation);break;case JOURNAL_COMPACT_PERCENTAGE:handleElementText(reader,element,operation);break;case JOURNAL_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(JOURNAL_DIRECTORY).set(directory);break;}case JOURNAL_MIN_FILES:{operation.get(JOURNAL_MIN_FILES).set(reader.getElementText());break;}case JOURNAL_SYNC_NON_TRANSACTIONAL:handleElementText(reader,element,operation);break;case JOURNAL_SYNC_TRANSACTIONAL:handleElementText(reader,element,operation);break;case JOURNAL_TYPE:{String journalType=reader.getElementText();if (journalType != null && journalType.length() > 0) {JournalType.valueOf(journalType.trim());operation.get(JOURNAL_TYPE).set(journalType.trim());}break;}case JOURNAL_FILE_SIZE:{String text=reader.getElementText();if (text != null && text.length() > 0) {operation.get(JOURNAL_FILE_SIZE).set(text.trim());}}break;case JOURNAL_MAX_IO:handleElementText(reader,element,operation);break;case LARGE_MESSAGES_DIRECTORY:{final ModelNode dir=parseDirectory(reader);operation.get(LARGE_MESSAGES_DIRECTORY).set(dir);break;}case LOCAL_BIND_ADDRESS:unhandledElement(reader,element);break;case LOCAL_BIND_PORT:unhandledElement(reader,element);break;case LOG_JOURNAL_WRITE_RATE:handleElementText(reader,element,operation);break;case MANAGEMENT_ADDRESS:unhandledElement(reader,element);break;case MANAGEMENT_NOTIFICATION_ADDRESS:unhandledElement(reader,element);break;case MEMORY_MEASURE_INTERVAL:unhandledElement(reader,element);break;case MEMORY_WARNING_THRESHOLD:unhandledElement(reader,element);break;case MESSAGE_COUNTER_ENABLED:unhandledElement(reader,element);break;case MESSAGE_COUNTER_MAX_DAY_HISTORY:unhandledElement(reader,element);break;case MESSAGE_COUNTER_SAMPLE_PERIOD:unhandledElement(reader,element);break;case MESSAGE_EXPIRY_SCAN_PERIOD:unhandledElement(reader,element);break;case MESSAGE_EXPIRY_THREAD_PRIORITY:unhandledElement(reader,element);break;case PAGING_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(PAGING_DIRECTORY).set(directory);break;}case PERF_BLAST_PAGES:unhandledElement(reader,element);break;case PERSIST_DELIVERY_COUNT_BEFORE_DELIVERY:unhandledElement(reader,element);break;case PERSIST_ID_CACHE:unhandledElement(reader,element);break;case PERSISTENCE_ENABLED:{final String value=reader.getElementText();if (value != null && value.length() > 0) {boolean enabled=Boolean.valueOf(value.trim());operation.get(PERSISTENCE_ENABLED).set(enabled);}break;}case REFRESH_TIMEOUT:unhandledElement(reader,element);break;case REMOTING_INTERCEPTORS:unhandledElement(reader,element);break;case RUN_SYNC_SPEED_TEST:unhandledElement(reader,element);break;case SECURITY_ENABLED:unhandledElement(reader,element);break;case SECURITY_INVALIDATION_INTERVAL:unhandledElement(reader,element);break;case SECURITY_SETTINGS:{final ModelNode securitySettings=processSecuritySettings(reader);operation.get(SECURITY_SETTING).set(securitySettings);break;}case SERVER_DUMP_INTERVAL:unhandledElement(reader,element);break;case SHARED_STORE:unhandledElement(reader,element);break;case TRANSACTION_TIMEOUT:unhandledElement(reader,element);break;case TRANSACTION_TIMEOUT_SCAN_PERIOD:unhandledElement(reader,element);break;case WILD_CARD_ROUTING_ENABLED:unhandledElement(reader,element);break;case DEAD_LETTER_ADDRESS_NODE_NAME:unhandledElement(reader,element);break;case EXPIRY_ADDRESS_NODE_NAME:unhandledElement(reader,element);break;case REDELIVERY_DELAY_NODE_NAME:unhandledElement(reader,element);break;case MAX_DELIVERY_ATTEMPTS:unhandledElement(reader,element);break;case MAX_SIZE_BYTES_NODE_NAME:unhandledElement(reader,element);break;case ADDRESS_FULL_MESSAGE_POLICY_NODE_NAME:unhandledElement(reader,element);break;case PAGE_SIZE_BYTES_NODE_NAME:unhandledElement(reader,element);break;case MESSAGE_COUNTER_HISTORY_DAY_LIMIT_NODE_NAME:unhandledElement(reader,element);break;case LVQ_NODE_NAME:unhandledElement(reader,element);break;case REDISTRIBUTION_DELAY_NODE_NAME:unhandledElement(reader,element);break;case SEND_TO_DLA_ON_NO_ROUTE:unhandledElement(reader,element);break;case QUEUES:{final ModelNode queues=parseQueues(reader);operation.get(QUEUE).set(queues);break;}case SUBSYSTEM:break;default :throw ParseUtils.unexpectedElement(reader);} @AT@ 7717 @LENGTH@ 46
---DEL ExpressionStatement@@MethodInvocation:handleElementText(reader,element,operation) @AT@ 7857 @LENGTH@ 46
------DEL MethodInvocation@@handleElementText(reader,element,operation) @AT@ 7857 @LENGTH@ 45
---------DEL SimpleName@@MethodName:handleElementText:[reader, element, operation] @AT@ 7857 @LENGTH@ 45
------------DEL SimpleName@@reader @AT@ 7875 @LENGTH@ 6
------------DEL SimpleName@@element @AT@ 7883 @LENGTH@ 7
------------DEL SimpleName@@operation @AT@ 7892 @LENGTH@ 9
---MOV ExpressionStatement@@MethodInvocation:handleElementText(reader,element,operation) @TO@ SwitchStatement@@switch (element) {case ACCEPTORS:{    final ModelNode acceptors=processAcceptors(reader);    operation.get(ACCEPTOR).set(acceptors);    break;  }case ADDRESS_SETTINGS:{  final ModelNode addressSettings=processAddressSettings(reader);  operation.get(ADDRESS_SETTING).set(addressSettings);  break;}case ASYNC_CONNECTION_EXECUTION_ENABLED:unhandledElement(reader,element);break;case BACKUP:handleElementText(reader,element,operation);break;case BACKUP_CONNECTOR_REF:handleElementText(reader,element,operation);break;case BINDINGS_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(BINDINGS_DIRECTORY).set(directory);break;}case BROADCAST_PERIOD:handleElementText(reader,element,operation);break;case CLUSTERED:handleElementText(reader,element,operation);break;case CLUSTER_PASSWORD:handleElementText(reader,element,operation);break;case CLUSTER_USER:handleElementText(reader,element,operation);break;case CONNECTION_TTL_OVERRIDE:handleElementText(reader,element,operation);break;case CONNECTORS:{final ModelNode connectors=processConnectors(reader);operation.get(CONNECTOR).set(connectors);break;}case CONNECTOR_REF:unhandledElement(reader,element);break;case CREATE_BINDINGS_DIR:handleElementText(reader,element,operation);break;case CREATE_JOURNAL_DIR:handleElementText(reader,element,operation);break;case FILE_DEPLOYMENT_ENABLED:unhandledElement(reader,element);break;case GROUP_ADDRESS:unhandledElement(reader,element);break;case GROUP_PORT:unhandledElement(reader,element);break;case GROUPING_HANDLER:unhandledElement(reader,element);break;case ID_CACHE_SIZE:handleElementText(reader,element,operation);break;case JMX_DOMAIN:handleElementText(reader,element,operation);break;case JMX_MANAGEMENT_ENABLED:handleElementText(reader,element,operation);break;case JOURNAL_BUFFER_SIZE:unhandledElement(reader,element);break;case JOURNAL_BUFFER_TIMEOUT:handleElementText(reader,element,operation);break;case JOURNAL_COMPACT_MIN_FILES:handleElementText(reader,element,operation);break;case JOURNAL_COMPACT_PERCENTAGE:handleElementText(reader,element,operation);break;case JOURNAL_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(JOURNAL_DIRECTORY).set(directory);break;}case JOURNAL_MIN_FILES:{operation.get(JOURNAL_MIN_FILES).set(reader.getElementText());break;}case JOURNAL_SYNC_NON_TRANSACTIONAL:handleElementText(reader,element,operation);break;case JOURNAL_SYNC_TRANSACTIONAL:handleElementText(reader,element,operation);break;case JOURNAL_TYPE:{String journalType=reader.getElementText();if (journalType != null && journalType.length() > 0) {JournalType.valueOf(journalType.trim());operation.get(JOURNAL_TYPE).set(journalType.trim());}break;}case JOURNAL_FILE_SIZE:{String text=reader.getElementText();if (text != null && text.length() > 0) {operation.get(JOURNAL_FILE_SIZE).set(text.trim());}}break;case JOURNAL_MAX_IO:handleElementText(reader,element,operation);break;case LARGE_MESSAGES_DIRECTORY:{final ModelNode dir=parseDirectory(reader);operation.get(LARGE_MESSAGES_DIRECTORY).set(dir);break;}case LOCAL_BIND_ADDRESS:unhandledElement(reader,element);break;case LOCAL_BIND_PORT:unhandledElement(reader,element);break;case LOG_JOURNAL_WRITE_RATE:handleElementText(reader,element,operation);break;case MANAGEMENT_ADDRESS:unhandledElement(reader,element);break;case MANAGEMENT_NOTIFICATION_ADDRESS:unhandledElement(reader,element);break;case MEMORY_MEASURE_INTERVAL:unhandledElement(reader,element);break;case MEMORY_WARNING_THRESHOLD:unhandledElement(reader,element);break;case MESSAGE_COUNTER_ENABLED:unhandledElement(reader,element);break;case MESSAGE_COUNTER_MAX_DAY_HISTORY:unhandledElement(reader,element);break;case MESSAGE_COUNTER_SAMPLE_PERIOD:unhandledElement(reader,element);break;case MESSAGE_EXPIRY_SCAN_PERIOD:unhandledElement(reader,element);break;case MESSAGE_EXPIRY_THREAD_PRIORITY:unhandledElement(reader,element);break;case PAGING_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(PAGING_DIRECTORY).set(directory);break;}case PERF_BLAST_PAGES:unhandledElement(reader,element);break;case PERSIST_DELIVERY_COUNT_BEFORE_DELIVERY:unhandledElement(reader,element);break;case PERSIST_ID_CACHE:unhandledElement(reader,element);break;case PERSISTENCE_ENABLED:{final String value=reader.getElementText();if (value != null && value.length() > 0) {boolean enabled=Boolean.valueOf(value.trim());operation.get(PERSISTENCE_ENABLED).set(enabled);}break;}case REFRESH_TIMEOUT:unhandledElement(reader,element);break;case REMOTING_INTERCEPTORS:unhandledElement(reader,element);break;case RUN_SYNC_SPEED_TEST:unhandledElement(reader,element);break;case SECURITY_ENABLED:unhandledElement(reader,element);break;case SECURITY_INVALIDATION_INTERVAL:unhandledElement(reader,element);break;case SECURITY_SETTINGS:{final ModelNode securitySettings=processSecuritySettings(reader);operation.get(SECURITY_SETTING).set(securitySettings);break;}case SERVER_DUMP_INTERVAL:unhandledElement(reader,element);break;case SHARED_STORE:unhandledElement(reader,element);break;case TRANSACTION_TIMEOUT:unhandledElement(reader,element);break;case TRANSACTION_TIMEOUT_SCAN_PERIOD:unhandledElement(reader,element);break;case WILD_CARD_ROUTING_ENABLED:unhandledElement(reader,element);break;case DEAD_LETTER_ADDRESS_NODE_NAME:unhandledElement(reader,element);break;case EXPIRY_ADDRESS_NODE_NAME:unhandledElement(reader,element);break;case REDELIVERY_DELAY_NODE_NAME:unhandledElement(reader,element);break;case MAX_DELIVERY_ATTEMPTS:unhandledElement(reader,element);break;case MAX_SIZE_BYTES_NODE_NAME:unhandledElement(reader,element);break;case ADDRESS_FULL_MESSAGE_POLICY_NODE_NAME:unhandledElement(reader,element);break;case PAGE_SIZE_BYTES_NODE_NAME:unhandledElement(reader,element);break;case MESSAGE_COUNTER_HISTORY_DAY_LIMIT_NODE_NAME:unhandledElement(reader,element);break;case LVQ_NODE_NAME:unhandledElement(reader,element);break;case REDISTRIBUTION_DELAY_NODE_NAME:unhandledElement(reader,element);break;case SEND_TO_DLA_ON_NO_ROUTE:unhandledElement(reader,element);break;case QUEUES:{final ModelNode queues=parseQueues(reader);operation.get(QUEUE).set(queues);break;}case SUBSYSTEM:break;default :throw ParseUtils.unexpectedElement(reader);} @AT@ 8313 @LENGTH@ 46
---MOV ExpressionStatement@@MethodInvocation:handleElementText(reader,element,operation) @TO@ SwitchStatement@@switch (element) {case ACCEPTORS:{    final ModelNode acceptors=processAcceptors(reader);    operation.get(ACCEPTOR).set(acceptors);    break;  }case ADDRESS_SETTINGS:{  final ModelNode addressSettings=processAddressSettings(reader);  operation.get(ADDRESS_SETTING).set(addressSettings);  break;}case ASYNC_CONNECTION_EXECUTION_ENABLED:unhandledElement(reader,element);break;case BACKUP:handleElementText(reader,element,operation);break;case BACKUP_CONNECTOR_REF:handleElementText(reader,element,operation);break;case BINDINGS_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(BINDINGS_DIRECTORY).set(directory);break;}case BROADCAST_PERIOD:handleElementText(reader,element,operation);break;case CLUSTERED:handleElementText(reader,element,operation);break;case CLUSTER_PASSWORD:handleElementText(reader,element,operation);break;case CLUSTER_USER:handleElementText(reader,element,operation);break;case CONNECTION_TTL_OVERRIDE:handleElementText(reader,element,operation);break;case CONNECTORS:{final ModelNode connectors=processConnectors(reader);operation.get(CONNECTOR).set(connectors);break;}case CONNECTOR_REF:unhandledElement(reader,element);break;case CREATE_BINDINGS_DIR:handleElementText(reader,element,operation);break;case CREATE_JOURNAL_DIR:handleElementText(reader,element,operation);break;case FILE_DEPLOYMENT_ENABLED:unhandledElement(reader,element);break;case GROUP_ADDRESS:unhandledElement(reader,element);break;case GROUP_PORT:unhandledElement(reader,element);break;case GROUPING_HANDLER:unhandledElement(reader,element);break;case ID_CACHE_SIZE:handleElementText(reader,element,operation);break;case JMX_DOMAIN:handleElementText(reader,element,operation);break;case JMX_MANAGEMENT_ENABLED:handleElementText(reader,element,operation);break;case JOURNAL_BUFFER_SIZE:unhandledElement(reader,element);break;case JOURNAL_BUFFER_TIMEOUT:handleElementText(reader,element,operation);break;case JOURNAL_COMPACT_MIN_FILES:handleElementText(reader,element,operation);break;case JOURNAL_COMPACT_PERCENTAGE:handleElementText(reader,element,operation);break;case JOURNAL_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(JOURNAL_DIRECTORY).set(directory);break;}case JOURNAL_MIN_FILES:{operation.get(JOURNAL_MIN_FILES).set(reader.getElementText());break;}case JOURNAL_SYNC_NON_TRANSACTIONAL:handleElementText(reader,element,operation);break;case JOURNAL_SYNC_TRANSACTIONAL:handleElementText(reader,element,operation);break;case JOURNAL_TYPE:{String journalType=reader.getElementText();if (journalType != null && journalType.length() > 0) {JournalType.valueOf(journalType.trim());operation.get(JOURNAL_TYPE).set(journalType.trim());}break;}case JOURNAL_FILE_SIZE:{String text=reader.getElementText();if (text != null && text.length() > 0) {operation.get(JOURNAL_FILE_SIZE).set(text.trim());}}break;case JOURNAL_MAX_IO:handleElementText(reader,element,operation);break;case LARGE_MESSAGES_DIRECTORY:{final ModelNode dir=parseDirectory(reader);operation.get(LARGE_MESSAGES_DIRECTORY).set(dir);break;}case LOCAL_BIND_ADDRESS:unhandledElement(reader,element);break;case LOCAL_BIND_PORT:unhandledElement(reader,element);break;case LOG_JOURNAL_WRITE_RATE:handleElementText(reader,element,operation);break;case MANAGEMENT_ADDRESS:unhandledElement(reader,element);break;case MANAGEMENT_NOTIFICATION_ADDRESS:unhandledElement(reader,element);break;case MEMORY_MEASURE_INTERVAL:unhandledElement(reader,element);break;case MEMORY_WARNING_THRESHOLD:unhandledElement(reader,element);break;case MESSAGE_COUNTER_ENABLED:unhandledElement(reader,element);break;case MESSAGE_COUNTER_MAX_DAY_HISTORY:unhandledElement(reader,element);break;case MESSAGE_COUNTER_SAMPLE_PERIOD:unhandledElement(reader,element);break;case MESSAGE_EXPIRY_SCAN_PERIOD:unhandledElement(reader,element);break;case MESSAGE_EXPIRY_THREAD_PRIORITY:unhandledElement(reader,element);break;case PAGING_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(PAGING_DIRECTORY).set(directory);break;}case PERF_BLAST_PAGES:unhandledElement(reader,element);break;case PERSIST_DELIVERY_COUNT_BEFORE_DELIVERY:unhandledElement(reader,element);break;case PERSIST_ID_CACHE:unhandledElement(reader,element);break;case PERSISTENCE_ENABLED:{final String value=reader.getElementText();if (value != null && value.length() > 0) {boolean enabled=Boolean.valueOf(value.trim());operation.get(PERSISTENCE_ENABLED).set(enabled);}break;}case REFRESH_TIMEOUT:unhandledElement(reader,element);break;case REMOTING_INTERCEPTORS:unhandledElement(reader,element);break;case RUN_SYNC_SPEED_TEST:unhandledElement(reader,element);break;case SECURITY_ENABLED:unhandledElement(reader,element);break;case SECURITY_INVALIDATION_INTERVAL:unhandledElement(reader,element);break;case SECURITY_SETTINGS:{final ModelNode securitySettings=processSecuritySettings(reader);operation.get(SECURITY_SETTING).set(securitySettings);break;}case SERVER_DUMP_INTERVAL:unhandledElement(reader,element);break;case SHARED_STORE:unhandledElement(reader,element);break;case TRANSACTION_TIMEOUT:unhandledElement(reader,element);break;case TRANSACTION_TIMEOUT_SCAN_PERIOD:unhandledElement(reader,element);break;case WILD_CARD_ROUTING_ENABLED:unhandledElement(reader,element);break;case DEAD_LETTER_ADDRESS_NODE_NAME:unhandledElement(reader,element);break;case EXPIRY_ADDRESS_NODE_NAME:unhandledElement(reader,element);break;case REDELIVERY_DELAY_NODE_NAME:unhandledElement(reader,element);break;case MAX_DELIVERY_ATTEMPTS:unhandledElement(reader,element);break;case MAX_SIZE_BYTES_NODE_NAME:unhandledElement(reader,element);break;case ADDRESS_FULL_MESSAGE_POLICY_NODE_NAME:unhandledElement(reader,element);break;case PAGE_SIZE_BYTES_NODE_NAME:unhandledElement(reader,element);break;case MESSAGE_COUNTER_HISTORY_DAY_LIMIT_NODE_NAME:unhandledElement(reader,element);break;case LVQ_NODE_NAME:unhandledElement(reader,element);break;case REDISTRIBUTION_DELAY_NODE_NAME:unhandledElement(reader,element);break;case SEND_TO_DLA_ON_NO_ROUTE:unhandledElement(reader,element);break;case QUEUES:{final ModelNode queues=parseQueues(reader);operation.get(QUEUE).set(queues);break;}case SUBSYSTEM:break;default :throw ParseUtils.unexpectedElement(reader);} @AT@ 8448 @LENGTH@ 46
---MOV ExpressionStatement@@MethodInvocation:unhandledElement(reader,element) @TO@ SwitchStatement@@switch (element) {case ACCEPTORS:{    final ModelNode acceptors=processAcceptors(reader);    operation.get(ACCEPTOR).set(acceptors);    break;  }case ADDRESS_SETTINGS:{  final ModelNode addressSettings=processAddressSettings(reader);  operation.get(ADDRESS_SETTING).set(addressSettings);  break;}case ASYNC_CONNECTION_EXECUTION_ENABLED:unhandledElement(reader,element);break;case BACKUP:handleElementText(reader,element,operation);break;case BACKUP_CONNECTOR_REF:handleElementText(reader,element,operation);break;case BINDINGS_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(BINDINGS_DIRECTORY).set(directory);break;}case BROADCAST_PERIOD:handleElementText(reader,element,operation);break;case CLUSTERED:handleElementText(reader,element,operation);break;case CLUSTER_PASSWORD:handleElementText(reader,element,operation);break;case CLUSTER_USER:handleElementText(reader,element,operation);break;case CONNECTION_TTL_OVERRIDE:handleElementText(reader,element,operation);break;case CONNECTORS:{final ModelNode connectors=processConnectors(reader);operation.get(CONNECTOR).set(connectors);break;}case CONNECTOR_REF:unhandledElement(reader,element);break;case CREATE_BINDINGS_DIR:handleElementText(reader,element,operation);break;case CREATE_JOURNAL_DIR:handleElementText(reader,element,operation);break;case FILE_DEPLOYMENT_ENABLED:unhandledElement(reader,element);break;case GROUP_ADDRESS:unhandledElement(reader,element);break;case GROUP_PORT:unhandledElement(reader,element);break;case GROUPING_HANDLER:unhandledElement(reader,element);break;case ID_CACHE_SIZE:handleElementText(reader,element,operation);break;case JMX_DOMAIN:handleElementText(reader,element,operation);break;case JMX_MANAGEMENT_ENABLED:handleElementText(reader,element,operation);break;case JOURNAL_BUFFER_SIZE:unhandledElement(reader,element);break;case JOURNAL_BUFFER_TIMEOUT:handleElementText(reader,element,operation);break;case JOURNAL_COMPACT_MIN_FILES:handleElementText(reader,element,operation);break;case JOURNAL_COMPACT_PERCENTAGE:handleElementText(reader,element,operation);break;case JOURNAL_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(JOURNAL_DIRECTORY).set(directory);break;}case JOURNAL_MIN_FILES:{operation.get(JOURNAL_MIN_FILES).set(reader.getElementText());break;}case JOURNAL_SYNC_NON_TRANSACTIONAL:handleElementText(reader,element,operation);break;case JOURNAL_SYNC_TRANSACTIONAL:handleElementText(reader,element,operation);break;case JOURNAL_TYPE:{String journalType=reader.getElementText();if (journalType != null && journalType.length() > 0) {JournalType.valueOf(journalType.trim());operation.get(JOURNAL_TYPE).set(journalType.trim());}break;}case JOURNAL_FILE_SIZE:{String text=reader.getElementText();if (text != null && text.length() > 0) {operation.get(JOURNAL_FILE_SIZE).set(text.trim());}}break;case JOURNAL_MAX_IO:handleElementText(reader,element,operation);break;case LARGE_MESSAGES_DIRECTORY:{final ModelNode dir=parseDirectory(reader);operation.get(LARGE_MESSAGES_DIRECTORY).set(dir);break;}case LOCAL_BIND_ADDRESS:unhandledElement(reader,element);break;case LOCAL_BIND_PORT:unhandledElement(reader,element);break;case LOG_JOURNAL_WRITE_RATE:handleElementText(reader,element,operation);break;case MANAGEMENT_ADDRESS:unhandledElement(reader,element);break;case MANAGEMENT_NOTIFICATION_ADDRESS:unhandledElement(reader,element);break;case MEMORY_MEASURE_INTERVAL:unhandledElement(reader,element);break;case MEMORY_WARNING_THRESHOLD:unhandledElement(reader,element);break;case MESSAGE_COUNTER_ENABLED:unhandledElement(reader,element);break;case MESSAGE_COUNTER_MAX_DAY_HISTORY:unhandledElement(reader,element);break;case MESSAGE_COUNTER_SAMPLE_PERIOD:unhandledElement(reader,element);break;case MESSAGE_EXPIRY_SCAN_PERIOD:unhandledElement(reader,element);break;case MESSAGE_EXPIRY_THREAD_PRIORITY:unhandledElement(reader,element);break;case PAGING_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(PAGING_DIRECTORY).set(directory);break;}case PERF_BLAST_PAGES:unhandledElement(reader,element);break;case PERSIST_DELIVERY_COUNT_BEFORE_DELIVERY:unhandledElement(reader,element);break;case PERSIST_ID_CACHE:unhandledElement(reader,element);break;case PERSISTENCE_ENABLED:{final String value=reader.getElementText();if (value != null && value.length() > 0) {boolean enabled=Boolean.valueOf(value.trim());operation.get(PERSISTENCE_ENABLED).set(enabled);}break;}case REFRESH_TIMEOUT:unhandledElement(reader,element);break;case REMOTING_INTERCEPTORS:unhandledElement(reader,element);break;case RUN_SYNC_SPEED_TEST:unhandledElement(reader,element);break;case SECURITY_ENABLED:unhandledElement(reader,element);break;case SECURITY_INVALIDATION_INTERVAL:unhandledElement(reader,element);break;case SECURITY_SETTINGS:{final ModelNode securitySettings=processSecuritySettings(reader);operation.get(SECURITY_SETTING).set(securitySettings);break;}case SERVER_DUMP_INTERVAL:unhandledElement(reader,element);break;case SHARED_STORE:unhandledElement(reader,element);break;case TRANSACTION_TIMEOUT:unhandledElement(reader,element);break;case TRANSACTION_TIMEOUT_SCAN_PERIOD:unhandledElement(reader,element);break;case WILD_CARD_ROUTING_ENABLED:unhandledElement(reader,element);break;case DEAD_LETTER_ADDRESS_NODE_NAME:unhandledElement(reader,element);break;case EXPIRY_ADDRESS_NODE_NAME:unhandledElement(reader,element);break;case REDELIVERY_DELAY_NODE_NAME:unhandledElement(reader,element);break;case MAX_DELIVERY_ATTEMPTS:unhandledElement(reader,element);break;case MAX_SIZE_BYTES_NODE_NAME:unhandledElement(reader,element);break;case ADDRESS_FULL_MESSAGE_POLICY_NODE_NAME:unhandledElement(reader,element);break;case PAGE_SIZE_BYTES_NODE_NAME:unhandledElement(reader,element);break;case MESSAGE_COUNTER_HISTORY_DAY_LIMIT_NODE_NAME:unhandledElement(reader,element);break;case LVQ_NODE_NAME:unhandledElement(reader,element);break;case REDISTRIBUTION_DELAY_NODE_NAME:unhandledElement(reader,element);break;case SEND_TO_DLA_ON_NO_ROUTE:unhandledElement(reader,element);break;case QUEUES:{final ModelNode queues=parseQueues(reader);operation.get(QUEUE).set(queues);break;}case SUBSYSTEM:break;default :throw ParseUtils.unexpectedElement(reader);} @AT@ 8588 @LENGTH@ 34
---MOV ExpressionStatement@@MethodInvocation:unhandledElement(reader,element) @TO@ SwitchStatement@@switch (element) {case ACCEPTORS:{    final ModelNode acceptors=processAcceptors(reader);    operation.get(ACCEPTOR).set(acceptors);    break;  }case ADDRESS_SETTINGS:{  final ModelNode addressSettings=processAddressSettings(reader);  operation.get(ADDRESS_SETTING).set(addressSettings);  break;}case ASYNC_CONNECTION_EXECUTION_ENABLED:unhandledElement(reader,element);break;case BACKUP:handleElementText(reader,element,operation);break;case BACKUP_CONNECTOR_REF:handleElementText(reader,element,operation);break;case BINDINGS_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(BINDINGS_DIRECTORY).set(directory);break;}case BROADCAST_PERIOD:handleElementText(reader,element,operation);break;case CLUSTERED:handleElementText(reader,element,operation);break;case CLUSTER_PASSWORD:handleElementText(reader,element,operation);break;case CLUSTER_USER:handleElementText(reader,element,operation);break;case CONNECTION_TTL_OVERRIDE:handleElementText(reader,element,operation);break;case CONNECTORS:{final ModelNode connectors=processConnectors(reader);operation.get(CONNECTOR).set(connectors);break;}case CONNECTOR_REF:unhandledElement(reader,element);break;case CREATE_BINDINGS_DIR:handleElementText(reader,element,operation);break;case CREATE_JOURNAL_DIR:handleElementText(reader,element,operation);break;case FILE_DEPLOYMENT_ENABLED:unhandledElement(reader,element);break;case GROUP_ADDRESS:unhandledElement(reader,element);break;case GROUP_PORT:unhandledElement(reader,element);break;case GROUPING_HANDLER:unhandledElement(reader,element);break;case ID_CACHE_SIZE:handleElementText(reader,element,operation);break;case JMX_DOMAIN:handleElementText(reader,element,operation);break;case JMX_MANAGEMENT_ENABLED:handleElementText(reader,element,operation);break;case JOURNAL_BUFFER_SIZE:unhandledElement(reader,element);break;case JOURNAL_BUFFER_TIMEOUT:handleElementText(reader,element,operation);break;case JOURNAL_COMPACT_MIN_FILES:handleElementText(reader,element,operation);break;case JOURNAL_COMPACT_PERCENTAGE:handleElementText(reader,element,operation);break;case JOURNAL_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(JOURNAL_DIRECTORY).set(directory);break;}case JOURNAL_MIN_FILES:{operation.get(JOURNAL_MIN_FILES).set(reader.getElementText());break;}case JOURNAL_SYNC_NON_TRANSACTIONAL:handleElementText(reader,element,operation);break;case JOURNAL_SYNC_TRANSACTIONAL:handleElementText(reader,element,operation);break;case JOURNAL_TYPE:{String journalType=reader.getElementText();if (journalType != null && journalType.length() > 0) {JournalType.valueOf(journalType.trim());operation.get(JOURNAL_TYPE).set(journalType.trim());}break;}case JOURNAL_FILE_SIZE:{String text=reader.getElementText();if (text != null && text.length() > 0) {operation.get(JOURNAL_FILE_SIZE).set(text.trim());}}break;case JOURNAL_MAX_IO:handleElementText(reader,element,operation);break;case LARGE_MESSAGES_DIRECTORY:{final ModelNode dir=parseDirectory(reader);operation.get(LARGE_MESSAGES_DIRECTORY).set(dir);break;}case LOCAL_BIND_ADDRESS:unhandledElement(reader,element);break;case LOCAL_BIND_PORT:unhandledElement(reader,element);break;case LOG_JOURNAL_WRITE_RATE:handleElementText(reader,element,operation);break;case MANAGEMENT_ADDRESS:unhandledElement(reader,element);break;case MANAGEMENT_NOTIFICATION_ADDRESS:unhandledElement(reader,element);break;case MEMORY_MEASURE_INTERVAL:unhandledElement(reader,element);break;case MEMORY_WARNING_THRESHOLD:unhandledElement(reader,element);break;case MESSAGE_COUNTER_ENABLED:unhandledElement(reader,element);break;case MESSAGE_COUNTER_MAX_DAY_HISTORY:unhandledElement(reader,element);break;case MESSAGE_COUNTER_SAMPLE_PERIOD:unhandledElement(reader,element);break;case MESSAGE_EXPIRY_SCAN_PERIOD:unhandledElement(reader,element);break;case MESSAGE_EXPIRY_THREAD_PRIORITY:unhandledElement(reader,element);break;case PAGING_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(PAGING_DIRECTORY).set(directory);break;}case PERF_BLAST_PAGES:unhandledElement(reader,element);break;case PERSIST_DELIVERY_COUNT_BEFORE_DELIVERY:unhandledElement(reader,element);break;case PERSIST_ID_CACHE:unhandledElement(reader,element);break;case PERSISTENCE_ENABLED:{final String value=reader.getElementText();if (value != null && value.length() > 0) {boolean enabled=Boolean.valueOf(value.trim());operation.get(PERSISTENCE_ENABLED).set(enabled);}break;}case REFRESH_TIMEOUT:unhandledElement(reader,element);break;case REMOTING_INTERCEPTORS:unhandledElement(reader,element);break;case RUN_SYNC_SPEED_TEST:unhandledElement(reader,element);break;case SECURITY_ENABLED:unhandledElement(reader,element);break;case SECURITY_INVALIDATION_INTERVAL:unhandledElement(reader,element);break;case SECURITY_SETTINGS:{final ModelNode securitySettings=processSecuritySettings(reader);operation.get(SECURITY_SETTING).set(securitySettings);break;}case SERVER_DUMP_INTERVAL:unhandledElement(reader,element);break;case SHARED_STORE:unhandledElement(reader,element);break;case TRANSACTION_TIMEOUT:unhandledElement(reader,element);break;case TRANSACTION_TIMEOUT_SCAN_PERIOD:unhandledElement(reader,element);break;case WILD_CARD_ROUTING_ENABLED:unhandledElement(reader,element);break;case DEAD_LETTER_ADDRESS_NODE_NAME:unhandledElement(reader,element);break;case EXPIRY_ADDRESS_NODE_NAME:unhandledElement(reader,element);break;case REDELIVERY_DELAY_NODE_NAME:unhandledElement(reader,element);break;case MAX_DELIVERY_ATTEMPTS:unhandledElement(reader,element);break;case MAX_SIZE_BYTES_NODE_NAME:unhandledElement(reader,element);break;case ADDRESS_FULL_MESSAGE_POLICY_NODE_NAME:unhandledElement(reader,element);break;case PAGE_SIZE_BYTES_NODE_NAME:unhandledElement(reader,element);break;case MESSAGE_COUNTER_HISTORY_DAY_LIMIT_NODE_NAME:unhandledElement(reader,element);break;case LVQ_NODE_NAME:unhandledElement(reader,element);break;case REDISTRIBUTION_DELAY_NODE_NAME:unhandledElement(reader,element);break;case SEND_TO_DLA_ON_NO_ROUTE:unhandledElement(reader,element);break;case QUEUES:{final ModelNode queues=parseQueues(reader);operation.get(QUEUE).set(queues);break;}case SUBSYSTEM:break;default :throw ParseUtils.unexpectedElement(reader);} @AT@ 8737 @LENGTH@ 34
---MOV ExpressionStatement@@MethodInvocation:unhandledElement(reader,element) @TO@ SwitchStatement@@switch (element) {case ACCEPTORS:{    final ModelNode acceptors=processAcceptors(reader);    operation.get(ACCEPTOR).set(acceptors);    break;  }case ADDRESS_SETTINGS:{  final ModelNode addressSettings=processAddressSettings(reader);  operation.get(ADDRESS_SETTING).set(addressSettings);  break;}case ASYNC_CONNECTION_EXECUTION_ENABLED:unhandledElement(reader,element);break;case BACKUP:handleElementText(reader,element,operation);break;case BACKUP_CONNECTOR_REF:handleElementText(reader,element,operation);break;case BINDINGS_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(BINDINGS_DIRECTORY).set(directory);break;}case BROADCAST_PERIOD:handleElementText(reader,element,operation);break;case CLUSTERED:handleElementText(reader,element,operation);break;case CLUSTER_PASSWORD:handleElementText(reader,element,operation);break;case CLUSTER_USER:handleElementText(reader,element,operation);break;case CONNECTION_TTL_OVERRIDE:handleElementText(reader,element,operation);break;case CONNECTORS:{final ModelNode connectors=processConnectors(reader);operation.get(CONNECTOR).set(connectors);break;}case CONNECTOR_REF:unhandledElement(reader,element);break;case CREATE_BINDINGS_DIR:handleElementText(reader,element,operation);break;case CREATE_JOURNAL_DIR:handleElementText(reader,element,operation);break;case FILE_DEPLOYMENT_ENABLED:unhandledElement(reader,element);break;case GROUP_ADDRESS:unhandledElement(reader,element);break;case GROUP_PORT:unhandledElement(reader,element);break;case GROUPING_HANDLER:unhandledElement(reader,element);break;case ID_CACHE_SIZE:handleElementText(reader,element,operation);break;case JMX_DOMAIN:handleElementText(reader,element,operation);break;case JMX_MANAGEMENT_ENABLED:handleElementText(reader,element,operation);break;case JOURNAL_BUFFER_SIZE:unhandledElement(reader,element);break;case JOURNAL_BUFFER_TIMEOUT:handleElementText(reader,element,operation);break;case JOURNAL_COMPACT_MIN_FILES:handleElementText(reader,element,operation);break;case JOURNAL_COMPACT_PERCENTAGE:handleElementText(reader,element,operation);break;case JOURNAL_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(JOURNAL_DIRECTORY).set(directory);break;}case JOURNAL_MIN_FILES:{operation.get(JOURNAL_MIN_FILES).set(reader.getElementText());break;}case JOURNAL_SYNC_NON_TRANSACTIONAL:handleElementText(reader,element,operation);break;case JOURNAL_SYNC_TRANSACTIONAL:handleElementText(reader,element,operation);break;case JOURNAL_TYPE:{String journalType=reader.getElementText();if (journalType != null && journalType.length() > 0) {JournalType.valueOf(journalType.trim());operation.get(JOURNAL_TYPE).set(journalType.trim());}break;}case JOURNAL_FILE_SIZE:{String text=reader.getElementText();if (text != null && text.length() > 0) {operation.get(JOURNAL_FILE_SIZE).set(text.trim());}}break;case JOURNAL_MAX_IO:handleElementText(reader,element,operation);break;case LARGE_MESSAGES_DIRECTORY:{final ModelNode dir=parseDirectory(reader);operation.get(LARGE_MESSAGES_DIRECTORY).set(dir);break;}case LOCAL_BIND_ADDRESS:unhandledElement(reader,element);break;case LOCAL_BIND_PORT:unhandledElement(reader,element);break;case LOG_JOURNAL_WRITE_RATE:handleElementText(reader,element,operation);break;case MANAGEMENT_ADDRESS:unhandledElement(reader,element);break;case MANAGEMENT_NOTIFICATION_ADDRESS:unhandledElement(reader,element);break;case MEMORY_MEASURE_INTERVAL:unhandledElement(reader,element);break;case MEMORY_WARNING_THRESHOLD:unhandledElement(reader,element);break;case MESSAGE_COUNTER_ENABLED:unhandledElement(reader,element);break;case MESSAGE_COUNTER_MAX_DAY_HISTORY:unhandledElement(reader,element);break;case MESSAGE_COUNTER_SAMPLE_PERIOD:unhandledElement(reader,element);break;case MESSAGE_EXPIRY_SCAN_PERIOD:unhandledElement(reader,element);break;case MESSAGE_EXPIRY_THREAD_PRIORITY:unhandledElement(reader,element);break;case PAGING_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(PAGING_DIRECTORY).set(directory);break;}case PERF_BLAST_PAGES:unhandledElement(reader,element);break;case PERSIST_DELIVERY_COUNT_BEFORE_DELIVERY:unhandledElement(reader,element);break;case PERSIST_ID_CACHE:unhandledElement(reader,element);break;case PERSISTENCE_ENABLED:{final String value=reader.getElementText();if (value != null && value.length() > 0) {boolean enabled=Boolean.valueOf(value.trim());operation.get(PERSISTENCE_ENABLED).set(enabled);}break;}case REFRESH_TIMEOUT:unhandledElement(reader,element);break;case REMOTING_INTERCEPTORS:unhandledElement(reader,element);break;case RUN_SYNC_SPEED_TEST:unhandledElement(reader,element);break;case SECURITY_ENABLED:unhandledElement(reader,element);break;case SECURITY_INVALIDATION_INTERVAL:unhandledElement(reader,element);break;case SECURITY_SETTINGS:{final ModelNode securitySettings=processSecuritySettings(reader);operation.get(SECURITY_SETTING).set(securitySettings);break;}case SERVER_DUMP_INTERVAL:unhandledElement(reader,element);break;case SHARED_STORE:unhandledElement(reader,element);break;case TRANSACTION_TIMEOUT:unhandledElement(reader,element);break;case TRANSACTION_TIMEOUT_SCAN_PERIOD:unhandledElement(reader,element);break;case WILD_CARD_ROUTING_ENABLED:unhandledElement(reader,element);break;case DEAD_LETTER_ADDRESS_NODE_NAME:unhandledElement(reader,element);break;case EXPIRY_ADDRESS_NODE_NAME:unhandledElement(reader,element);break;case REDELIVERY_DELAY_NODE_NAME:unhandledElement(reader,element);break;case MAX_DELIVERY_ATTEMPTS:unhandledElement(reader,element);break;case MAX_SIZE_BYTES_NODE_NAME:unhandledElement(reader,element);break;case ADDRESS_FULL_MESSAGE_POLICY_NODE_NAME:unhandledElement(reader,element);break;case PAGE_SIZE_BYTES_NODE_NAME:unhandledElement(reader,element);break;case MESSAGE_COUNTER_HISTORY_DAY_LIMIT_NODE_NAME:unhandledElement(reader,element);break;case LVQ_NODE_NAME:unhandledElement(reader,element);break;case REDISTRIBUTION_DELAY_NODE_NAME:unhandledElement(reader,element);break;case SEND_TO_DLA_ON_NO_ROUTE:unhandledElement(reader,element);break;case QUEUES:{final ModelNode queues=parseQueues(reader);operation.get(QUEUE).set(queues);break;}case SUBSYSTEM:break;default :throw ParseUtils.unexpectedElement(reader);} @AT@ 8852 @LENGTH@ 34
---MOV ExpressionStatement@@MethodInvocation:unhandledElement(reader,element) @TO@ SwitchStatement@@switch (element) {case ACCEPTORS:{    final ModelNode acceptors=processAcceptors(reader);    operation.get(ACCEPTOR).set(acceptors);    break;  }case ADDRESS_SETTINGS:{  final ModelNode addressSettings=processAddressSettings(reader);  operation.get(ADDRESS_SETTING).set(addressSettings);  break;}case ASYNC_CONNECTION_EXECUTION_ENABLED:unhandledElement(reader,element);break;case BACKUP:handleElementText(reader,element,operation);break;case BACKUP_CONNECTOR_REF:handleElementText(reader,element,operation);break;case BINDINGS_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(BINDINGS_DIRECTORY).set(directory);break;}case BROADCAST_PERIOD:handleElementText(reader,element,operation);break;case CLUSTERED:handleElementText(reader,element,operation);break;case CLUSTER_PASSWORD:handleElementText(reader,element,operation);break;case CLUSTER_USER:handleElementText(reader,element,operation);break;case CONNECTION_TTL_OVERRIDE:handleElementText(reader,element,operation);break;case CONNECTORS:{final ModelNode connectors=processConnectors(reader);operation.get(CONNECTOR).set(connectors);break;}case CONNECTOR_REF:unhandledElement(reader,element);break;case CREATE_BINDINGS_DIR:handleElementText(reader,element,operation);break;case CREATE_JOURNAL_DIR:handleElementText(reader,element,operation);break;case FILE_DEPLOYMENT_ENABLED:unhandledElement(reader,element);break;case GROUP_ADDRESS:unhandledElement(reader,element);break;case GROUP_PORT:unhandledElement(reader,element);break;case GROUPING_HANDLER:unhandledElement(reader,element);break;case ID_CACHE_SIZE:handleElementText(reader,element,operation);break;case JMX_DOMAIN:handleElementText(reader,element,operation);break;case JMX_MANAGEMENT_ENABLED:handleElementText(reader,element,operation);break;case JOURNAL_BUFFER_SIZE:unhandledElement(reader,element);break;case JOURNAL_BUFFER_TIMEOUT:handleElementText(reader,element,operation);break;case JOURNAL_COMPACT_MIN_FILES:handleElementText(reader,element,operation);break;case JOURNAL_COMPACT_PERCENTAGE:handleElementText(reader,element,operation);break;case JOURNAL_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(JOURNAL_DIRECTORY).set(directory);break;}case JOURNAL_MIN_FILES:{operation.get(JOURNAL_MIN_FILES).set(reader.getElementText());break;}case JOURNAL_SYNC_NON_TRANSACTIONAL:handleElementText(reader,element,operation);break;case JOURNAL_SYNC_TRANSACTIONAL:handleElementText(reader,element,operation);break;case JOURNAL_TYPE:{String journalType=reader.getElementText();if (journalType != null && journalType.length() > 0) {JournalType.valueOf(journalType.trim());operation.get(JOURNAL_TYPE).set(journalType.trim());}break;}case JOURNAL_FILE_SIZE:{String text=reader.getElementText();if (text != null && text.length() > 0) {operation.get(JOURNAL_FILE_SIZE).set(text.trim());}}break;case JOURNAL_MAX_IO:handleElementText(reader,element,operation);break;case LARGE_MESSAGES_DIRECTORY:{final ModelNode dir=parseDirectory(reader);operation.get(LARGE_MESSAGES_DIRECTORY).set(dir);break;}case LOCAL_BIND_ADDRESS:unhandledElement(reader,element);break;case LOCAL_BIND_PORT:unhandledElement(reader,element);break;case LOG_JOURNAL_WRITE_RATE:handleElementText(reader,element,operation);break;case MANAGEMENT_ADDRESS:unhandledElement(reader,element);break;case MANAGEMENT_NOTIFICATION_ADDRESS:unhandledElement(reader,element);break;case MEMORY_MEASURE_INTERVAL:unhandledElement(reader,element);break;case MEMORY_WARNING_THRESHOLD:unhandledElement(reader,element);break;case MESSAGE_COUNTER_ENABLED:unhandledElement(reader,element);break;case MESSAGE_COUNTER_MAX_DAY_HISTORY:unhandledElement(reader,element);break;case MESSAGE_COUNTER_SAMPLE_PERIOD:unhandledElement(reader,element);break;case MESSAGE_EXPIRY_SCAN_PERIOD:unhandledElement(reader,element);break;case MESSAGE_EXPIRY_THREAD_PRIORITY:unhandledElement(reader,element);break;case PAGING_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(PAGING_DIRECTORY).set(directory);break;}case PERF_BLAST_PAGES:unhandledElement(reader,element);break;case PERSIST_DELIVERY_COUNT_BEFORE_DELIVERY:unhandledElement(reader,element);break;case PERSIST_ID_CACHE:unhandledElement(reader,element);break;case PERSISTENCE_ENABLED:{final String value=reader.getElementText();if (value != null && value.length() > 0) {boolean enabled=Boolean.valueOf(value.trim());operation.get(PERSISTENCE_ENABLED).set(enabled);}break;}case REFRESH_TIMEOUT:unhandledElement(reader,element);break;case REMOTING_INTERCEPTORS:unhandledElement(reader,element);break;case RUN_SYNC_SPEED_TEST:unhandledElement(reader,element);break;case SECURITY_ENABLED:unhandledElement(reader,element);break;case SECURITY_INVALIDATION_INTERVAL:unhandledElement(reader,element);break;case SECURITY_SETTINGS:{final ModelNode securitySettings=processSecuritySettings(reader);operation.get(SECURITY_SETTING).set(securitySettings);break;}case SERVER_DUMP_INTERVAL:unhandledElement(reader,element);break;case SHARED_STORE:unhandledElement(reader,element);break;case TRANSACTION_TIMEOUT:unhandledElement(reader,element);break;case TRANSACTION_TIMEOUT_SCAN_PERIOD:unhandledElement(reader,element);break;case WILD_CARD_ROUTING_ENABLED:unhandledElement(reader,element);break;case DEAD_LETTER_ADDRESS_NODE_NAME:unhandledElement(reader,element);break;case EXPIRY_ADDRESS_NODE_NAME:unhandledElement(reader,element);break;case REDELIVERY_DELAY_NODE_NAME:unhandledElement(reader,element);break;case MAX_DELIVERY_ATTEMPTS:unhandledElement(reader,element);break;case MAX_SIZE_BYTES_NODE_NAME:unhandledElement(reader,element);break;case ADDRESS_FULL_MESSAGE_POLICY_NODE_NAME:unhandledElement(reader,element);break;case PAGE_SIZE_BYTES_NODE_NAME:unhandledElement(reader,element);break;case MESSAGE_COUNTER_HISTORY_DAY_LIMIT_NODE_NAME:unhandledElement(reader,element);break;case LVQ_NODE_NAME:unhandledElement(reader,element);break;case REDISTRIBUTION_DELAY_NODE_NAME:unhandledElement(reader,element);break;case SEND_TO_DLA_ON_NO_ROUTE:unhandledElement(reader,element);break;case QUEUES:{final ModelNode queues=parseQueues(reader);operation.get(QUEUE).set(queues);break;}case SUBSYSTEM:break;default :throw ParseUtils.unexpectedElement(reader);} @AT@ 8973 @LENGTH@ 34
---MOV ExpressionStatement@@MethodInvocation:handleElementText(reader,element,operation) @TO@ SwitchStatement@@switch (element) {case ACCEPTORS:{    final ModelNode acceptors=processAcceptors(reader);    operation.get(ACCEPTOR).set(acceptors);    break;  }case ADDRESS_SETTINGS:{  final ModelNode addressSettings=processAddressSettings(reader);  operation.get(ADDRESS_SETTING).set(addressSettings);  break;}case ASYNC_CONNECTION_EXECUTION_ENABLED:unhandledElement(reader,element);break;case BACKUP:handleElementText(reader,element,operation);break;case BACKUP_CONNECTOR_REF:handleElementText(reader,element,operation);break;case BINDINGS_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(BINDINGS_DIRECTORY).set(directory);break;}case BROADCAST_PERIOD:handleElementText(reader,element,operation);break;case CLUSTERED:handleElementText(reader,element,operation);break;case CLUSTER_PASSWORD:handleElementText(reader,element,operation);break;case CLUSTER_USER:handleElementText(reader,element,operation);break;case CONNECTION_TTL_OVERRIDE:handleElementText(reader,element,operation);break;case CONNECTORS:{final ModelNode connectors=processConnectors(reader);operation.get(CONNECTOR).set(connectors);break;}case CONNECTOR_REF:unhandledElement(reader,element);break;case CREATE_BINDINGS_DIR:handleElementText(reader,element,operation);break;case CREATE_JOURNAL_DIR:handleElementText(reader,element,operation);break;case FILE_DEPLOYMENT_ENABLED:unhandledElement(reader,element);break;case GROUP_ADDRESS:unhandledElement(reader,element);break;case GROUP_PORT:unhandledElement(reader,element);break;case GROUPING_HANDLER:unhandledElement(reader,element);break;case ID_CACHE_SIZE:handleElementText(reader,element,operation);break;case JMX_DOMAIN:handleElementText(reader,element,operation);break;case JMX_MANAGEMENT_ENABLED:handleElementText(reader,element,operation);break;case JOURNAL_BUFFER_SIZE:unhandledElement(reader,element);break;case JOURNAL_BUFFER_TIMEOUT:handleElementText(reader,element,operation);break;case JOURNAL_COMPACT_MIN_FILES:handleElementText(reader,element,operation);break;case JOURNAL_COMPACT_PERCENTAGE:handleElementText(reader,element,operation);break;case JOURNAL_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(JOURNAL_DIRECTORY).set(directory);break;}case JOURNAL_MIN_FILES:{operation.get(JOURNAL_MIN_FILES).set(reader.getElementText());break;}case JOURNAL_SYNC_NON_TRANSACTIONAL:handleElementText(reader,element,operation);break;case JOURNAL_SYNC_TRANSACTIONAL:handleElementText(reader,element,operation);break;case JOURNAL_TYPE:{String journalType=reader.getElementText();if (journalType != null && journalType.length() > 0) {JournalType.valueOf(journalType.trim());operation.get(JOURNAL_TYPE).set(journalType.trim());}break;}case JOURNAL_FILE_SIZE:{String text=reader.getElementText();if (text != null && text.length() > 0) {operation.get(JOURNAL_FILE_SIZE).set(text.trim());}}break;case JOURNAL_MAX_IO:handleElementText(reader,element,operation);break;case LARGE_MESSAGES_DIRECTORY:{final ModelNode dir=parseDirectory(reader);operation.get(LARGE_MESSAGES_DIRECTORY).set(dir);break;}case LOCAL_BIND_ADDRESS:unhandledElement(reader,element);break;case LOCAL_BIND_PORT:unhandledElement(reader,element);break;case LOG_JOURNAL_WRITE_RATE:handleElementText(reader,element,operation);break;case MANAGEMENT_ADDRESS:unhandledElement(reader,element);break;case MANAGEMENT_NOTIFICATION_ADDRESS:unhandledElement(reader,element);break;case MEMORY_MEASURE_INTERVAL:unhandledElement(reader,element);break;case MEMORY_WARNING_THRESHOLD:unhandledElement(reader,element);break;case MESSAGE_COUNTER_ENABLED:unhandledElement(reader,element);break;case MESSAGE_COUNTER_MAX_DAY_HISTORY:unhandledElement(reader,element);break;case MESSAGE_COUNTER_SAMPLE_PERIOD:unhandledElement(reader,element);break;case MESSAGE_EXPIRY_SCAN_PERIOD:unhandledElement(reader,element);break;case MESSAGE_EXPIRY_THREAD_PRIORITY:unhandledElement(reader,element);break;case PAGING_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(PAGING_DIRECTORY).set(directory);break;}case PERF_BLAST_PAGES:unhandledElement(reader,element);break;case PERSIST_DELIVERY_COUNT_BEFORE_DELIVERY:unhandledElement(reader,element);break;case PERSIST_ID_CACHE:unhandledElement(reader,element);break;case PERSISTENCE_ENABLED:{final String value=reader.getElementText();if (value != null && value.length() > 0) {boolean enabled=Boolean.valueOf(value.trim());operation.get(PERSISTENCE_ENABLED).set(enabled);}break;}case REFRESH_TIMEOUT:unhandledElement(reader,element);break;case REMOTING_INTERCEPTORS:unhandledElement(reader,element);break;case RUN_SYNC_SPEED_TEST:unhandledElement(reader,element);break;case SECURITY_ENABLED:unhandledElement(reader,element);break;case SECURITY_INVALIDATION_INTERVAL:unhandledElement(reader,element);break;case SECURITY_SETTINGS:{final ModelNode securitySettings=processSecuritySettings(reader);operation.get(SECURITY_SETTING).set(securitySettings);break;}case SERVER_DUMP_INTERVAL:unhandledElement(reader,element);break;case SHARED_STORE:unhandledElement(reader,element);break;case TRANSACTION_TIMEOUT:unhandledElement(reader,element);break;case TRANSACTION_TIMEOUT_SCAN_PERIOD:unhandledElement(reader,element);break;case WILD_CARD_ROUTING_ENABLED:unhandledElement(reader,element);break;case DEAD_LETTER_ADDRESS_NODE_NAME:unhandledElement(reader,element);break;case EXPIRY_ADDRESS_NODE_NAME:unhandledElement(reader,element);break;case REDELIVERY_DELAY_NODE_NAME:unhandledElement(reader,element);break;case MAX_DELIVERY_ATTEMPTS:unhandledElement(reader,element);break;case MAX_SIZE_BYTES_NODE_NAME:unhandledElement(reader,element);break;case ADDRESS_FULL_MESSAGE_POLICY_NODE_NAME:unhandledElement(reader,element);break;case PAGE_SIZE_BYTES_NODE_NAME:unhandledElement(reader,element);break;case MESSAGE_COUNTER_HISTORY_DAY_LIMIT_NODE_NAME:unhandledElement(reader,element);break;case LVQ_NODE_NAME:unhandledElement(reader,element);break;case REDISTRIBUTION_DELAY_NODE_NAME:unhandledElement(reader,element);break;case SEND_TO_DLA_ON_NO_ROUTE:unhandledElement(reader,element);break;case QUEUES:{final ModelNode queues=parseQueues(reader);operation.get(QUEUE).set(queues);break;}case SUBSYSTEM:break;default :throw ParseUtils.unexpectedElement(reader);} @AT@ 9091 @LENGTH@ 46
---MOV ExpressionStatement@@MethodInvocation:handleElementText(reader,element,operation) @TO@ SwitchStatement@@switch (element) {case ACCEPTORS:{    final ModelNode acceptors=processAcceptors(reader);    operation.get(ACCEPTOR).set(acceptors);    break;  }case ADDRESS_SETTINGS:{  final ModelNode addressSettings=processAddressSettings(reader);  operation.get(ADDRESS_SETTING).set(addressSettings);  break;}case ASYNC_CONNECTION_EXECUTION_ENABLED:unhandledElement(reader,element);break;case BACKUP:handleElementText(reader,element,operation);break;case BACKUP_CONNECTOR_REF:handleElementText(reader,element,operation);break;case BINDINGS_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(BINDINGS_DIRECTORY).set(directory);break;}case BROADCAST_PERIOD:handleElementText(reader,element,operation);break;case CLUSTERED:handleElementText(reader,element,operation);break;case CLUSTER_PASSWORD:handleElementText(reader,element,operation);break;case CLUSTER_USER:handleElementText(reader,element,operation);break;case CONNECTION_TTL_OVERRIDE:handleElementText(reader,element,operation);break;case CONNECTORS:{final ModelNode connectors=processConnectors(reader);operation.get(CONNECTOR).set(connectors);break;}case CONNECTOR_REF:unhandledElement(reader,element);break;case CREATE_BINDINGS_DIR:handleElementText(reader,element,operation);break;case CREATE_JOURNAL_DIR:handleElementText(reader,element,operation);break;case FILE_DEPLOYMENT_ENABLED:unhandledElement(reader,element);break;case GROUP_ADDRESS:unhandledElement(reader,element);break;case GROUP_PORT:unhandledElement(reader,element);break;case GROUPING_HANDLER:unhandledElement(reader,element);break;case ID_CACHE_SIZE:handleElementText(reader,element,operation);break;case JMX_DOMAIN:handleElementText(reader,element,operation);break;case JMX_MANAGEMENT_ENABLED:handleElementText(reader,element,operation);break;case JOURNAL_BUFFER_SIZE:unhandledElement(reader,element);break;case JOURNAL_BUFFER_TIMEOUT:handleElementText(reader,element,operation);break;case JOURNAL_COMPACT_MIN_FILES:handleElementText(reader,element,operation);break;case JOURNAL_COMPACT_PERCENTAGE:handleElementText(reader,element,operation);break;case JOURNAL_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(JOURNAL_DIRECTORY).set(directory);break;}case JOURNAL_MIN_FILES:{operation.get(JOURNAL_MIN_FILES).set(reader.getElementText());break;}case JOURNAL_SYNC_NON_TRANSACTIONAL:handleElementText(reader,element,operation);break;case JOURNAL_SYNC_TRANSACTIONAL:handleElementText(reader,element,operation);break;case JOURNAL_TYPE:{String journalType=reader.getElementText();if (journalType != null && journalType.length() > 0) {JournalType.valueOf(journalType.trim());operation.get(JOURNAL_TYPE).set(journalType.trim());}break;}case JOURNAL_FILE_SIZE:{String text=reader.getElementText();if (text != null && text.length() > 0) {operation.get(JOURNAL_FILE_SIZE).set(text.trim());}}break;case JOURNAL_MAX_IO:handleElementText(reader,element,operation);break;case LARGE_MESSAGES_DIRECTORY:{final ModelNode dir=parseDirectory(reader);operation.get(LARGE_MESSAGES_DIRECTORY).set(dir);break;}case LOCAL_BIND_ADDRESS:unhandledElement(reader,element);break;case LOCAL_BIND_PORT:unhandledElement(reader,element);break;case LOG_JOURNAL_WRITE_RATE:handleElementText(reader,element,operation);break;case MANAGEMENT_ADDRESS:unhandledElement(reader,element);break;case MANAGEMENT_NOTIFICATION_ADDRESS:unhandledElement(reader,element);break;case MEMORY_MEASURE_INTERVAL:unhandledElement(reader,element);break;case MEMORY_WARNING_THRESHOLD:unhandledElement(reader,element);break;case MESSAGE_COUNTER_ENABLED:unhandledElement(reader,element);break;case MESSAGE_COUNTER_MAX_DAY_HISTORY:unhandledElement(reader,element);break;case MESSAGE_COUNTER_SAMPLE_PERIOD:unhandledElement(reader,element);break;case MESSAGE_EXPIRY_SCAN_PERIOD:unhandledElement(reader,element);break;case MESSAGE_EXPIRY_THREAD_PRIORITY:unhandledElement(reader,element);break;case PAGING_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(PAGING_DIRECTORY).set(directory);break;}case PERF_BLAST_PAGES:unhandledElement(reader,element);break;case PERSIST_DELIVERY_COUNT_BEFORE_DELIVERY:unhandledElement(reader,element);break;case PERSIST_ID_CACHE:unhandledElement(reader,element);break;case PERSISTENCE_ENABLED:{final String value=reader.getElementText();if (value != null && value.length() > 0) {boolean enabled=Boolean.valueOf(value.trim());operation.get(PERSISTENCE_ENABLED).set(enabled);}break;}case REFRESH_TIMEOUT:unhandledElement(reader,element);break;case REMOTING_INTERCEPTORS:unhandledElement(reader,element);break;case RUN_SYNC_SPEED_TEST:unhandledElement(reader,element);break;case SECURITY_ENABLED:unhandledElement(reader,element);break;case SECURITY_INVALIDATION_INTERVAL:unhandledElement(reader,element);break;case SECURITY_SETTINGS:{final ModelNode securitySettings=processSecuritySettings(reader);operation.get(SECURITY_SETTING).set(securitySettings);break;}case SERVER_DUMP_INTERVAL:unhandledElement(reader,element);break;case SHARED_STORE:unhandledElement(reader,element);break;case TRANSACTION_TIMEOUT:unhandledElement(reader,element);break;case TRANSACTION_TIMEOUT_SCAN_PERIOD:unhandledElement(reader,element);break;case WILD_CARD_ROUTING_ENABLED:unhandledElement(reader,element);break;case DEAD_LETTER_ADDRESS_NODE_NAME:unhandledElement(reader,element);break;case EXPIRY_ADDRESS_NODE_NAME:unhandledElement(reader,element);break;case REDELIVERY_DELAY_NODE_NAME:unhandledElement(reader,element);break;case MAX_DELIVERY_ATTEMPTS:unhandledElement(reader,element);break;case MAX_SIZE_BYTES_NODE_NAME:unhandledElement(reader,element);break;case ADDRESS_FULL_MESSAGE_POLICY_NODE_NAME:unhandledElement(reader,element);break;case PAGE_SIZE_BYTES_NODE_NAME:unhandledElement(reader,element);break;case MESSAGE_COUNTER_HISTORY_DAY_LIMIT_NODE_NAME:unhandledElement(reader,element);break;case LVQ_NODE_NAME:unhandledElement(reader,element);break;case REDISTRIBUTION_DELAY_NODE_NAME:unhandledElement(reader,element);break;case SEND_TO_DLA_ON_NO_ROUTE:unhandledElement(reader,element);break;case QUEUES:{final ModelNode queues=parseQueues(reader);operation.get(QUEUE).set(queues);break;}case SUBSYSTEM:break;default :throw ParseUtils.unexpectedElement(reader);} @AT@ 9218 @LENGTH@ 46
---MOV ExpressionStatement@@MethodInvocation:handleElementText(reader,element,operation) @TO@ SwitchStatement@@switch (element) {case ACCEPTORS:{    final ModelNode acceptors=processAcceptors(reader);    operation.get(ACCEPTOR).set(acceptors);    break;  }case ADDRESS_SETTINGS:{  final ModelNode addressSettings=processAddressSettings(reader);  operation.get(ADDRESS_SETTING).set(addressSettings);  break;}case ASYNC_CONNECTION_EXECUTION_ENABLED:unhandledElement(reader,element);break;case BACKUP:handleElementText(reader,element,operation);break;case BACKUP_CONNECTOR_REF:handleElementText(reader,element,operation);break;case BINDINGS_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(BINDINGS_DIRECTORY).set(directory);break;}case BROADCAST_PERIOD:handleElementText(reader,element,operation);break;case CLUSTERED:handleElementText(reader,element,operation);break;case CLUSTER_PASSWORD:handleElementText(reader,element,operation);break;case CLUSTER_USER:handleElementText(reader,element,operation);break;case CONNECTION_TTL_OVERRIDE:handleElementText(reader,element,operation);break;case CONNECTORS:{final ModelNode connectors=processConnectors(reader);operation.get(CONNECTOR).set(connectors);break;}case CONNECTOR_REF:unhandledElement(reader,element);break;case CREATE_BINDINGS_DIR:handleElementText(reader,element,operation);break;case CREATE_JOURNAL_DIR:handleElementText(reader,element,operation);break;case FILE_DEPLOYMENT_ENABLED:unhandledElement(reader,element);break;case GROUP_ADDRESS:unhandledElement(reader,element);break;case GROUP_PORT:unhandledElement(reader,element);break;case GROUPING_HANDLER:unhandledElement(reader,element);break;case ID_CACHE_SIZE:handleElementText(reader,element,operation);break;case JMX_DOMAIN:handleElementText(reader,element,operation);break;case JMX_MANAGEMENT_ENABLED:handleElementText(reader,element,operation);break;case JOURNAL_BUFFER_SIZE:unhandledElement(reader,element);break;case JOURNAL_BUFFER_TIMEOUT:handleElementText(reader,element,operation);break;case JOURNAL_COMPACT_MIN_FILES:handleElementText(reader,element,operation);break;case JOURNAL_COMPACT_PERCENTAGE:handleElementText(reader,element,operation);break;case JOURNAL_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(JOURNAL_DIRECTORY).set(directory);break;}case JOURNAL_MIN_FILES:{operation.get(JOURNAL_MIN_FILES).set(reader.getElementText());break;}case JOURNAL_SYNC_NON_TRANSACTIONAL:handleElementText(reader,element,operation);break;case JOURNAL_SYNC_TRANSACTIONAL:handleElementText(reader,element,operation);break;case JOURNAL_TYPE:{String journalType=reader.getElementText();if (journalType != null && journalType.length() > 0) {JournalType.valueOf(journalType.trim());operation.get(JOURNAL_TYPE).set(journalType.trim());}break;}case JOURNAL_FILE_SIZE:{String text=reader.getElementText();if (text != null && text.length() > 0) {operation.get(JOURNAL_FILE_SIZE).set(text.trim());}}break;case JOURNAL_MAX_IO:handleElementText(reader,element,operation);break;case LARGE_MESSAGES_DIRECTORY:{final ModelNode dir=parseDirectory(reader);operation.get(LARGE_MESSAGES_DIRECTORY).set(dir);break;}case LOCAL_BIND_ADDRESS:unhandledElement(reader,element);break;case LOCAL_BIND_PORT:unhandledElement(reader,element);break;case LOG_JOURNAL_WRITE_RATE:handleElementText(reader,element,operation);break;case MANAGEMENT_ADDRESS:unhandledElement(reader,element);break;case MANAGEMENT_NOTIFICATION_ADDRESS:unhandledElement(reader,element);break;case MEMORY_MEASURE_INTERVAL:unhandledElement(reader,element);break;case MEMORY_WARNING_THRESHOLD:unhandledElement(reader,element);break;case MESSAGE_COUNTER_ENABLED:unhandledElement(reader,element);break;case MESSAGE_COUNTER_MAX_DAY_HISTORY:unhandledElement(reader,element);break;case MESSAGE_COUNTER_SAMPLE_PERIOD:unhandledElement(reader,element);break;case MESSAGE_EXPIRY_SCAN_PERIOD:unhandledElement(reader,element);break;case MESSAGE_EXPIRY_THREAD_PRIORITY:unhandledElement(reader,element);break;case PAGING_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(PAGING_DIRECTORY).set(directory);break;}case PERF_BLAST_PAGES:unhandledElement(reader,element);break;case PERSIST_DELIVERY_COUNT_BEFORE_DELIVERY:unhandledElement(reader,element);break;case PERSIST_ID_CACHE:unhandledElement(reader,element);break;case PERSISTENCE_ENABLED:{final String value=reader.getElementText();if (value != null && value.length() > 0) {boolean enabled=Boolean.valueOf(value.trim());operation.get(PERSISTENCE_ENABLED).set(enabled);}break;}case REFRESH_TIMEOUT:unhandledElement(reader,element);break;case REMOTING_INTERCEPTORS:unhandledElement(reader,element);break;case RUN_SYNC_SPEED_TEST:unhandledElement(reader,element);break;case SECURITY_ENABLED:unhandledElement(reader,element);break;case SECURITY_INVALIDATION_INTERVAL:unhandledElement(reader,element);break;case SECURITY_SETTINGS:{final ModelNode securitySettings=processSecuritySettings(reader);operation.get(SECURITY_SETTING).set(securitySettings);break;}case SERVER_DUMP_INTERVAL:unhandledElement(reader,element);break;case SHARED_STORE:unhandledElement(reader,element);break;case TRANSACTION_TIMEOUT:unhandledElement(reader,element);break;case TRANSACTION_TIMEOUT_SCAN_PERIOD:unhandledElement(reader,element);break;case WILD_CARD_ROUTING_ENABLED:unhandledElement(reader,element);break;case DEAD_LETTER_ADDRESS_NODE_NAME:unhandledElement(reader,element);break;case EXPIRY_ADDRESS_NODE_NAME:unhandledElement(reader,element);break;case REDELIVERY_DELAY_NODE_NAME:unhandledElement(reader,element);break;case MAX_DELIVERY_ATTEMPTS:unhandledElement(reader,element);break;case MAX_SIZE_BYTES_NODE_NAME:unhandledElement(reader,element);break;case ADDRESS_FULL_MESSAGE_POLICY_NODE_NAME:unhandledElement(reader,element);break;case PAGE_SIZE_BYTES_NODE_NAME:unhandledElement(reader,element);break;case MESSAGE_COUNTER_HISTORY_DAY_LIMIT_NODE_NAME:unhandledElement(reader,element);break;case LVQ_NODE_NAME:unhandledElement(reader,element);break;case REDISTRIBUTION_DELAY_NODE_NAME:unhandledElement(reader,element);break;case SEND_TO_DLA_ON_NO_ROUTE:unhandledElement(reader,element);break;case QUEUES:{final ModelNode queues=parseQueues(reader);operation.get(QUEUE).set(queues);break;}case SUBSYSTEM:break;default :throw ParseUtils.unexpectedElement(reader);} @AT@ 9357 @LENGTH@ 46
---MOV ExpressionStatement@@MethodInvocation:handleElementText(reader,element,operation) @TO@ SwitchStatement@@switch (element) {case ACCEPTORS:{    final ModelNode acceptors=processAcceptors(reader);    operation.get(ACCEPTOR).set(acceptors);    break;  }case ADDRESS_SETTINGS:{  final ModelNode addressSettings=processAddressSettings(reader);  operation.get(ADDRESS_SETTING).set(addressSettings);  break;}case ASYNC_CONNECTION_EXECUTION_ENABLED:unhandledElement(reader,element);break;case BACKUP:handleElementText(reader,element,operation);break;case BACKUP_CONNECTOR_REF:handleElementText(reader,element,operation);break;case BINDINGS_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(BINDINGS_DIRECTORY).set(directory);break;}case BROADCAST_PERIOD:handleElementText(reader,element,operation);break;case CLUSTERED:handleElementText(reader,element,operation);break;case CLUSTER_PASSWORD:handleElementText(reader,element,operation);break;case CLUSTER_USER:handleElementText(reader,element,operation);break;case CONNECTION_TTL_OVERRIDE:handleElementText(reader,element,operation);break;case CONNECTORS:{final ModelNode connectors=processConnectors(reader);operation.get(CONNECTOR).set(connectors);break;}case CONNECTOR_REF:unhandledElement(reader,element);break;case CREATE_BINDINGS_DIR:handleElementText(reader,element,operation);break;case CREATE_JOURNAL_DIR:handleElementText(reader,element,operation);break;case FILE_DEPLOYMENT_ENABLED:unhandledElement(reader,element);break;case GROUP_ADDRESS:unhandledElement(reader,element);break;case GROUP_PORT:unhandledElement(reader,element);break;case GROUPING_HANDLER:unhandledElement(reader,element);break;case ID_CACHE_SIZE:handleElementText(reader,element,operation);break;case JMX_DOMAIN:handleElementText(reader,element,operation);break;case JMX_MANAGEMENT_ENABLED:handleElementText(reader,element,operation);break;case JOURNAL_BUFFER_SIZE:unhandledElement(reader,element);break;case JOURNAL_BUFFER_TIMEOUT:handleElementText(reader,element,operation);break;case JOURNAL_COMPACT_MIN_FILES:handleElementText(reader,element,operation);break;case JOURNAL_COMPACT_PERCENTAGE:handleElementText(reader,element,operation);break;case JOURNAL_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(JOURNAL_DIRECTORY).set(directory);break;}case JOURNAL_MIN_FILES:{operation.get(JOURNAL_MIN_FILES).set(reader.getElementText());break;}case JOURNAL_SYNC_NON_TRANSACTIONAL:handleElementText(reader,element,operation);break;case JOURNAL_SYNC_TRANSACTIONAL:handleElementText(reader,element,operation);break;case JOURNAL_TYPE:{String journalType=reader.getElementText();if (journalType != null && journalType.length() > 0) {JournalType.valueOf(journalType.trim());operation.get(JOURNAL_TYPE).set(journalType.trim());}break;}case JOURNAL_FILE_SIZE:{String text=reader.getElementText();if (text != null && text.length() > 0) {operation.get(JOURNAL_FILE_SIZE).set(text.trim());}}break;case JOURNAL_MAX_IO:handleElementText(reader,element,operation);break;case LARGE_MESSAGES_DIRECTORY:{final ModelNode dir=parseDirectory(reader);operation.get(LARGE_MESSAGES_DIRECTORY).set(dir);break;}case LOCAL_BIND_ADDRESS:unhandledElement(reader,element);break;case LOCAL_BIND_PORT:unhandledElement(reader,element);break;case LOG_JOURNAL_WRITE_RATE:handleElementText(reader,element,operation);break;case MANAGEMENT_ADDRESS:unhandledElement(reader,element);break;case MANAGEMENT_NOTIFICATION_ADDRESS:unhandledElement(reader,element);break;case MEMORY_MEASURE_INTERVAL:unhandledElement(reader,element);break;case MEMORY_WARNING_THRESHOLD:unhandledElement(reader,element);break;case MESSAGE_COUNTER_ENABLED:unhandledElement(reader,element);break;case MESSAGE_COUNTER_MAX_DAY_HISTORY:unhandledElement(reader,element);break;case MESSAGE_COUNTER_SAMPLE_PERIOD:unhandledElement(reader,element);break;case MESSAGE_EXPIRY_SCAN_PERIOD:unhandledElement(reader,element);break;case MESSAGE_EXPIRY_THREAD_PRIORITY:unhandledElement(reader,element);break;case PAGING_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(PAGING_DIRECTORY).set(directory);break;}case PERF_BLAST_PAGES:unhandledElement(reader,element);break;case PERSIST_DELIVERY_COUNT_BEFORE_DELIVERY:unhandledElement(reader,element);break;case PERSIST_ID_CACHE:unhandledElement(reader,element);break;case PERSISTENCE_ENABLED:{final String value=reader.getElementText();if (value != null && value.length() > 0) {boolean enabled=Boolean.valueOf(value.trim());operation.get(PERSISTENCE_ENABLED).set(enabled);}break;}case REFRESH_TIMEOUT:unhandledElement(reader,element);break;case REMOTING_INTERCEPTORS:unhandledElement(reader,element);break;case RUN_SYNC_SPEED_TEST:unhandledElement(reader,element);break;case SECURITY_ENABLED:unhandledElement(reader,element);break;case SECURITY_INVALIDATION_INTERVAL:unhandledElement(reader,element);break;case SECURITY_SETTINGS:{final ModelNode securitySettings=processSecuritySettings(reader);operation.get(SECURITY_SETTING).set(securitySettings);break;}case SERVER_DUMP_INTERVAL:unhandledElement(reader,element);break;case SHARED_STORE:unhandledElement(reader,element);break;case TRANSACTION_TIMEOUT:unhandledElement(reader,element);break;case TRANSACTION_TIMEOUT_SCAN_PERIOD:unhandledElement(reader,element);break;case WILD_CARD_ROUTING_ENABLED:unhandledElement(reader,element);break;case DEAD_LETTER_ADDRESS_NODE_NAME:unhandledElement(reader,element);break;case EXPIRY_ADDRESS_NODE_NAME:unhandledElement(reader,element);break;case REDELIVERY_DELAY_NODE_NAME:unhandledElement(reader,element);break;case MAX_DELIVERY_ATTEMPTS:unhandledElement(reader,element);break;case MAX_SIZE_BYTES_NODE_NAME:unhandledElement(reader,element);break;case ADDRESS_FULL_MESSAGE_POLICY_NODE_NAME:unhandledElement(reader,element);break;case PAGE_SIZE_BYTES_NODE_NAME:unhandledElement(reader,element);break;case MESSAGE_COUNTER_HISTORY_DAY_LIMIT_NODE_NAME:unhandledElement(reader,element);break;case LVQ_NODE_NAME:unhandledElement(reader,element);break;case REDISTRIBUTION_DELAY_NODE_NAME:unhandledElement(reader,element);break;case SEND_TO_DLA_ON_NO_ROUTE:unhandledElement(reader,element);break;case QUEUES:{final ModelNode queues=parseQueues(reader);operation.get(QUEUE).set(queues);break;}case SUBSYSTEM:break;default :throw ParseUtils.unexpectedElement(reader);} @AT@ 9620 @LENGTH@ 46
---MOV ExpressionStatement@@MethodInvocation:handleElementText(reader,element,operation) @TO@ SwitchStatement@@switch (element) {case ACCEPTORS:{    final ModelNode acceptors=processAcceptors(reader);    operation.get(ACCEPTOR).set(acceptors);    break;  }case ADDRESS_SETTINGS:{  final ModelNode addressSettings=processAddressSettings(reader);  operation.get(ADDRESS_SETTING).set(addressSettings);  break;}case ASYNC_CONNECTION_EXECUTION_ENABLED:unhandledElement(reader,element);break;case BACKUP:handleElementText(reader,element,operation);break;case BACKUP_CONNECTOR_REF:handleElementText(reader,element,operation);break;case BINDINGS_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(BINDINGS_DIRECTORY).set(directory);break;}case BROADCAST_PERIOD:handleElementText(reader,element,operation);break;case CLUSTERED:handleElementText(reader,element,operation);break;case CLUSTER_PASSWORD:handleElementText(reader,element,operation);break;case CLUSTER_USER:handleElementText(reader,element,operation);break;case CONNECTION_TTL_OVERRIDE:handleElementText(reader,element,operation);break;case CONNECTORS:{final ModelNode connectors=processConnectors(reader);operation.get(CONNECTOR).set(connectors);break;}case CONNECTOR_REF:unhandledElement(reader,element);break;case CREATE_BINDINGS_DIR:handleElementText(reader,element,operation);break;case CREATE_JOURNAL_DIR:handleElementText(reader,element,operation);break;case FILE_DEPLOYMENT_ENABLED:unhandledElement(reader,element);break;case GROUP_ADDRESS:unhandledElement(reader,element);break;case GROUP_PORT:unhandledElement(reader,element);break;case GROUPING_HANDLER:unhandledElement(reader,element);break;case ID_CACHE_SIZE:handleElementText(reader,element,operation);break;case JMX_DOMAIN:handleElementText(reader,element,operation);break;case JMX_MANAGEMENT_ENABLED:handleElementText(reader,element,operation);break;case JOURNAL_BUFFER_SIZE:unhandledElement(reader,element);break;case JOURNAL_BUFFER_TIMEOUT:handleElementText(reader,element,operation);break;case JOURNAL_COMPACT_MIN_FILES:handleElementText(reader,element,operation);break;case JOURNAL_COMPACT_PERCENTAGE:handleElementText(reader,element,operation);break;case JOURNAL_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(JOURNAL_DIRECTORY).set(directory);break;}case JOURNAL_MIN_FILES:{operation.get(JOURNAL_MIN_FILES).set(reader.getElementText());break;}case JOURNAL_SYNC_NON_TRANSACTIONAL:handleElementText(reader,element,operation);break;case JOURNAL_SYNC_TRANSACTIONAL:handleElementText(reader,element,operation);break;case JOURNAL_TYPE:{String journalType=reader.getElementText();if (journalType != null && journalType.length() > 0) {JournalType.valueOf(journalType.trim());operation.get(JOURNAL_TYPE).set(journalType.trim());}break;}case JOURNAL_FILE_SIZE:{String text=reader.getElementText();if (text != null && text.length() > 0) {operation.get(JOURNAL_FILE_SIZE).set(text.trim());}}break;case JOURNAL_MAX_IO:handleElementText(reader,element,operation);break;case LARGE_MESSAGES_DIRECTORY:{final ModelNode dir=parseDirectory(reader);operation.get(LARGE_MESSAGES_DIRECTORY).set(dir);break;}case LOCAL_BIND_ADDRESS:unhandledElement(reader,element);break;case LOCAL_BIND_PORT:unhandledElement(reader,element);break;case LOG_JOURNAL_WRITE_RATE:handleElementText(reader,element,operation);break;case MANAGEMENT_ADDRESS:unhandledElement(reader,element);break;case MANAGEMENT_NOTIFICATION_ADDRESS:unhandledElement(reader,element);break;case MEMORY_MEASURE_INTERVAL:unhandledElement(reader,element);break;case MEMORY_WARNING_THRESHOLD:unhandledElement(reader,element);break;case MESSAGE_COUNTER_ENABLED:unhandledElement(reader,element);break;case MESSAGE_COUNTER_MAX_DAY_HISTORY:unhandledElement(reader,element);break;case MESSAGE_COUNTER_SAMPLE_PERIOD:unhandledElement(reader,element);break;case MESSAGE_EXPIRY_SCAN_PERIOD:unhandledElement(reader,element);break;case MESSAGE_EXPIRY_THREAD_PRIORITY:unhandledElement(reader,element);break;case PAGING_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(PAGING_DIRECTORY).set(directory);break;}case PERF_BLAST_PAGES:unhandledElement(reader,element);break;case PERSIST_DELIVERY_COUNT_BEFORE_DELIVERY:unhandledElement(reader,element);break;case PERSIST_ID_CACHE:unhandledElement(reader,element);break;case PERSISTENCE_ENABLED:{final String value=reader.getElementText();if (value != null && value.length() > 0) {boolean enabled=Boolean.valueOf(value.trim());operation.get(PERSISTENCE_ENABLED).set(enabled);}break;}case REFRESH_TIMEOUT:unhandledElement(reader,element);break;case REMOTING_INTERCEPTORS:unhandledElement(reader,element);break;case RUN_SYNC_SPEED_TEST:unhandledElement(reader,element);break;case SECURITY_ENABLED:unhandledElement(reader,element);break;case SECURITY_INVALIDATION_INTERVAL:unhandledElement(reader,element);break;case SECURITY_SETTINGS:{final ModelNode securitySettings=processSecuritySettings(reader);operation.get(SECURITY_SETTING).set(securitySettings);break;}case SERVER_DUMP_INTERVAL:unhandledElement(reader,element);break;case SHARED_STORE:unhandledElement(reader,element);break;case TRANSACTION_TIMEOUT:unhandledElement(reader,element);break;case TRANSACTION_TIMEOUT_SCAN_PERIOD:unhandledElement(reader,element);break;case WILD_CARD_ROUTING_ENABLED:unhandledElement(reader,element);break;case DEAD_LETTER_ADDRESS_NODE_NAME:unhandledElement(reader,element);break;case EXPIRY_ADDRESS_NODE_NAME:unhandledElement(reader,element);break;case REDELIVERY_DELAY_NODE_NAME:unhandledElement(reader,element);break;case MAX_DELIVERY_ATTEMPTS:unhandledElement(reader,element);break;case MAX_SIZE_BYTES_NODE_NAME:unhandledElement(reader,element);break;case ADDRESS_FULL_MESSAGE_POLICY_NODE_NAME:unhandledElement(reader,element);break;case PAGE_SIZE_BYTES_NODE_NAME:unhandledElement(reader,element);break;case MESSAGE_COUNTER_HISTORY_DAY_LIMIT_NODE_NAME:unhandledElement(reader,element);break;case LVQ_NODE_NAME:unhandledElement(reader,element);break;case REDISTRIBUTION_DELAY_NODE_NAME:unhandledElement(reader,element);break;case SEND_TO_DLA_ON_NO_ROUTE:unhandledElement(reader,element);break;case QUEUES:{final ModelNode queues=parseQueues(reader);operation.get(QUEUE).set(queues);break;}case SUBSYSTEM:break;default :throw ParseUtils.unexpectedElement(reader);} @AT@ 9762 @LENGTH@ 46
---MOV ExpressionStatement@@MethodInvocation:handleElementText(reader,element,operation) @TO@ SwitchStatement@@switch (element) {case ACCEPTORS:{    final ModelNode acceptors=processAcceptors(reader);    operation.get(ACCEPTOR).set(acceptors);    break;  }case ADDRESS_SETTINGS:{  final ModelNode addressSettings=processAddressSettings(reader);  operation.get(ADDRESS_SETTING).set(addressSettings);  break;}case ASYNC_CONNECTION_EXECUTION_ENABLED:unhandledElement(reader,element);break;case BACKUP:handleElementText(reader,element,operation);break;case BACKUP_CONNECTOR_REF:handleElementText(reader,element,operation);break;case BINDINGS_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(BINDINGS_DIRECTORY).set(directory);break;}case BROADCAST_PERIOD:handleElementText(reader,element,operation);break;case CLUSTERED:handleElementText(reader,element,operation);break;case CLUSTER_PASSWORD:handleElementText(reader,element,operation);break;case CLUSTER_USER:handleElementText(reader,element,operation);break;case CONNECTION_TTL_OVERRIDE:handleElementText(reader,element,operation);break;case CONNECTORS:{final ModelNode connectors=processConnectors(reader);operation.get(CONNECTOR).set(connectors);break;}case CONNECTOR_REF:unhandledElement(reader,element);break;case CREATE_BINDINGS_DIR:handleElementText(reader,element,operation);break;case CREATE_JOURNAL_DIR:handleElementText(reader,element,operation);break;case FILE_DEPLOYMENT_ENABLED:unhandledElement(reader,element);break;case GROUP_ADDRESS:unhandledElement(reader,element);break;case GROUP_PORT:unhandledElement(reader,element);break;case GROUPING_HANDLER:unhandledElement(reader,element);break;case ID_CACHE_SIZE:handleElementText(reader,element,operation);break;case JMX_DOMAIN:handleElementText(reader,element,operation);break;case JMX_MANAGEMENT_ENABLED:handleElementText(reader,element,operation);break;case JOURNAL_BUFFER_SIZE:unhandledElement(reader,element);break;case JOURNAL_BUFFER_TIMEOUT:handleElementText(reader,element,operation);break;case JOURNAL_COMPACT_MIN_FILES:handleElementText(reader,element,operation);break;case JOURNAL_COMPACT_PERCENTAGE:handleElementText(reader,element,operation);break;case JOURNAL_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(JOURNAL_DIRECTORY).set(directory);break;}case JOURNAL_MIN_FILES:{operation.get(JOURNAL_MIN_FILES).set(reader.getElementText());break;}case JOURNAL_SYNC_NON_TRANSACTIONAL:handleElementText(reader,element,operation);break;case JOURNAL_SYNC_TRANSACTIONAL:handleElementText(reader,element,operation);break;case JOURNAL_TYPE:{String journalType=reader.getElementText();if (journalType != null && journalType.length() > 0) {JournalType.valueOf(journalType.trim());operation.get(JOURNAL_TYPE).set(journalType.trim());}break;}case JOURNAL_FILE_SIZE:{String text=reader.getElementText();if (text != null && text.length() > 0) {operation.get(JOURNAL_FILE_SIZE).set(text.trim());}}break;case JOURNAL_MAX_IO:handleElementText(reader,element,operation);break;case LARGE_MESSAGES_DIRECTORY:{final ModelNode dir=parseDirectory(reader);operation.get(LARGE_MESSAGES_DIRECTORY).set(dir);break;}case LOCAL_BIND_ADDRESS:unhandledElement(reader,element);break;case LOCAL_BIND_PORT:unhandledElement(reader,element);break;case LOG_JOURNAL_WRITE_RATE:handleElementText(reader,element,operation);break;case MANAGEMENT_ADDRESS:unhandledElement(reader,element);break;case MANAGEMENT_NOTIFICATION_ADDRESS:unhandledElement(reader,element);break;case MEMORY_MEASURE_INTERVAL:unhandledElement(reader,element);break;case MEMORY_WARNING_THRESHOLD:unhandledElement(reader,element);break;case MESSAGE_COUNTER_ENABLED:unhandledElement(reader,element);break;case MESSAGE_COUNTER_MAX_DAY_HISTORY:unhandledElement(reader,element);break;case MESSAGE_COUNTER_SAMPLE_PERIOD:unhandledElement(reader,element);break;case MESSAGE_EXPIRY_SCAN_PERIOD:unhandledElement(reader,element);break;case MESSAGE_EXPIRY_THREAD_PRIORITY:unhandledElement(reader,element);break;case PAGING_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(PAGING_DIRECTORY).set(directory);break;}case PERF_BLAST_PAGES:unhandledElement(reader,element);break;case PERSIST_DELIVERY_COUNT_BEFORE_DELIVERY:unhandledElement(reader,element);break;case PERSIST_ID_CACHE:unhandledElement(reader,element);break;case PERSISTENCE_ENABLED:{final String value=reader.getElementText();if (value != null && value.length() > 0) {boolean enabled=Boolean.valueOf(value.trim());operation.get(PERSISTENCE_ENABLED).set(enabled);}break;}case REFRESH_TIMEOUT:unhandledElement(reader,element);break;case REMOTING_INTERCEPTORS:unhandledElement(reader,element);break;case RUN_SYNC_SPEED_TEST:unhandledElement(reader,element);break;case SECURITY_ENABLED:unhandledElement(reader,element);break;case SECURITY_INVALIDATION_INTERVAL:unhandledElement(reader,element);break;case SECURITY_SETTINGS:{final ModelNode securitySettings=processSecuritySettings(reader);operation.get(SECURITY_SETTING).set(securitySettings);break;}case SERVER_DUMP_INTERVAL:unhandledElement(reader,element);break;case SHARED_STORE:unhandledElement(reader,element);break;case TRANSACTION_TIMEOUT:unhandledElement(reader,element);break;case TRANSACTION_TIMEOUT_SCAN_PERIOD:unhandledElement(reader,element);break;case WILD_CARD_ROUTING_ENABLED:unhandledElement(reader,element);break;case DEAD_LETTER_ADDRESS_NODE_NAME:unhandledElement(reader,element);break;case EXPIRY_ADDRESS_NODE_NAME:unhandledElement(reader,element);break;case REDELIVERY_DELAY_NODE_NAME:unhandledElement(reader,element);break;case MAX_DELIVERY_ATTEMPTS:unhandledElement(reader,element);break;case MAX_SIZE_BYTES_NODE_NAME:unhandledElement(reader,element);break;case ADDRESS_FULL_MESSAGE_POLICY_NODE_NAME:unhandledElement(reader,element);break;case PAGE_SIZE_BYTES_NODE_NAME:unhandledElement(reader,element);break;case MESSAGE_COUNTER_HISTORY_DAY_LIMIT_NODE_NAME:unhandledElement(reader,element);break;case LVQ_NODE_NAME:unhandledElement(reader,element);break;case REDISTRIBUTION_DELAY_NODE_NAME:unhandledElement(reader,element);break;case SEND_TO_DLA_ON_NO_ROUTE:unhandledElement(reader,element);break;case QUEUES:{final ModelNode queues=parseQueues(reader);operation.get(QUEUE).set(queues);break;}case SUBSYSTEM:break;default :throw ParseUtils.unexpectedElement(reader);} @AT@ 9905 @LENGTH@ 46
---MOV ExpressionStatement@@MethodInvocation:handleElementText(reader,element,operation) @TO@ SwitchStatement@@switch (element) {case ACCEPTORS:{    final ModelNode acceptors=processAcceptors(reader);    operation.get(ACCEPTOR).set(acceptors);    break;  }case ADDRESS_SETTINGS:{  final ModelNode addressSettings=processAddressSettings(reader);  operation.get(ADDRESS_SETTING).set(addressSettings);  break;}case ASYNC_CONNECTION_EXECUTION_ENABLED:unhandledElement(reader,element);break;case BACKUP:handleElementText(reader,element,operation);break;case BACKUP_CONNECTOR_REF:handleElementText(reader,element,operation);break;case BINDINGS_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(BINDINGS_DIRECTORY).set(directory);break;}case BROADCAST_PERIOD:handleElementText(reader,element,operation);break;case CLUSTERED:handleElementText(reader,element,operation);break;case CLUSTER_PASSWORD:handleElementText(reader,element,operation);break;case CLUSTER_USER:handleElementText(reader,element,operation);break;case CONNECTION_TTL_OVERRIDE:handleElementText(reader,element,operation);break;case CONNECTORS:{final ModelNode connectors=processConnectors(reader);operation.get(CONNECTOR).set(connectors);break;}case CONNECTOR_REF:unhandledElement(reader,element);break;case CREATE_BINDINGS_DIR:handleElementText(reader,element,operation);break;case CREATE_JOURNAL_DIR:handleElementText(reader,element,operation);break;case FILE_DEPLOYMENT_ENABLED:unhandledElement(reader,element);break;case GROUP_ADDRESS:unhandledElement(reader,element);break;case GROUP_PORT:unhandledElement(reader,element);break;case GROUPING_HANDLER:unhandledElement(reader,element);break;case ID_CACHE_SIZE:handleElementText(reader,element,operation);break;case JMX_DOMAIN:handleElementText(reader,element,operation);break;case JMX_MANAGEMENT_ENABLED:handleElementText(reader,element,operation);break;case JOURNAL_BUFFER_SIZE:unhandledElement(reader,element);break;case JOURNAL_BUFFER_TIMEOUT:handleElementText(reader,element,operation);break;case JOURNAL_COMPACT_MIN_FILES:handleElementText(reader,element,operation);break;case JOURNAL_COMPACT_PERCENTAGE:handleElementText(reader,element,operation);break;case JOURNAL_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(JOURNAL_DIRECTORY).set(directory);break;}case JOURNAL_MIN_FILES:{operation.get(JOURNAL_MIN_FILES).set(reader.getElementText());break;}case JOURNAL_SYNC_NON_TRANSACTIONAL:handleElementText(reader,element,operation);break;case JOURNAL_SYNC_TRANSACTIONAL:handleElementText(reader,element,operation);break;case JOURNAL_TYPE:{String journalType=reader.getElementText();if (journalType != null && journalType.length() > 0) {JournalType.valueOf(journalType.trim());operation.get(JOURNAL_TYPE).set(journalType.trim());}break;}case JOURNAL_FILE_SIZE:{String text=reader.getElementText();if (text != null && text.length() > 0) {operation.get(JOURNAL_FILE_SIZE).set(text.trim());}}break;case JOURNAL_MAX_IO:handleElementText(reader,element,operation);break;case LARGE_MESSAGES_DIRECTORY:{final ModelNode dir=parseDirectory(reader);operation.get(LARGE_MESSAGES_DIRECTORY).set(dir);break;}case LOCAL_BIND_ADDRESS:unhandledElement(reader,element);break;case LOCAL_BIND_PORT:unhandledElement(reader,element);break;case LOG_JOURNAL_WRITE_RATE:handleElementText(reader,element,operation);break;case MANAGEMENT_ADDRESS:unhandledElement(reader,element);break;case MANAGEMENT_NOTIFICATION_ADDRESS:unhandledElement(reader,element);break;case MEMORY_MEASURE_INTERVAL:unhandledElement(reader,element);break;case MEMORY_WARNING_THRESHOLD:unhandledElement(reader,element);break;case MESSAGE_COUNTER_ENABLED:unhandledElement(reader,element);break;case MESSAGE_COUNTER_MAX_DAY_HISTORY:unhandledElement(reader,element);break;case MESSAGE_COUNTER_SAMPLE_PERIOD:unhandledElement(reader,element);break;case MESSAGE_EXPIRY_SCAN_PERIOD:unhandledElement(reader,element);break;case MESSAGE_EXPIRY_THREAD_PRIORITY:unhandledElement(reader,element);break;case PAGING_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(PAGING_DIRECTORY).set(directory);break;}case PERF_BLAST_PAGES:unhandledElement(reader,element);break;case PERSIST_DELIVERY_COUNT_BEFORE_DELIVERY:unhandledElement(reader,element);break;case PERSIST_ID_CACHE:unhandledElement(reader,element);break;case PERSISTENCE_ENABLED:{final String value=reader.getElementText();if (value != null && value.length() > 0) {boolean enabled=Boolean.valueOf(value.trim());operation.get(PERSISTENCE_ENABLED).set(enabled);}break;}case REFRESH_TIMEOUT:unhandledElement(reader,element);break;case REMOTING_INTERCEPTORS:unhandledElement(reader,element);break;case RUN_SYNC_SPEED_TEST:unhandledElement(reader,element);break;case SECURITY_ENABLED:unhandledElement(reader,element);break;case SECURITY_INVALIDATION_INTERVAL:unhandledElement(reader,element);break;case SECURITY_SETTINGS:{final ModelNode securitySettings=processSecuritySettings(reader);operation.get(SECURITY_SETTING).set(securitySettings);break;}case SERVER_DUMP_INTERVAL:unhandledElement(reader,element);break;case SHARED_STORE:unhandledElement(reader,element);break;case TRANSACTION_TIMEOUT:unhandledElement(reader,element);break;case TRANSACTION_TIMEOUT_SCAN_PERIOD:unhandledElement(reader,element);break;case WILD_CARD_ROUTING_ENABLED:unhandledElement(reader,element);break;case DEAD_LETTER_ADDRESS_NODE_NAME:unhandledElement(reader,element);break;case EXPIRY_ADDRESS_NODE_NAME:unhandledElement(reader,element);break;case REDELIVERY_DELAY_NODE_NAME:unhandledElement(reader,element);break;case MAX_DELIVERY_ATTEMPTS:unhandledElement(reader,element);break;case MAX_SIZE_BYTES_NODE_NAME:unhandledElement(reader,element);break;case ADDRESS_FULL_MESSAGE_POLICY_NODE_NAME:unhandledElement(reader,element);break;case PAGE_SIZE_BYTES_NODE_NAME:unhandledElement(reader,element);break;case MESSAGE_COUNTER_HISTORY_DAY_LIMIT_NODE_NAME:unhandledElement(reader,element);break;case LVQ_NODE_NAME:unhandledElement(reader,element);break;case REDISTRIBUTION_DELAY_NODE_NAME:unhandledElement(reader,element);break;case SEND_TO_DLA_ON_NO_ROUTE:unhandledElement(reader,element);break;case QUEUES:{final ModelNode queues=parseQueues(reader);operation.get(QUEUE).set(queues);break;}case SUBSYSTEM:break;default :throw ParseUtils.unexpectedElement(reader);} @AT@ 10434 @LENGTH@ 46
---MOV ExpressionStatement@@MethodInvocation:handleElementText(reader,element,operation) @TO@ SwitchStatement@@switch (element) {case ACCEPTORS:{    final ModelNode acceptors=processAcceptors(reader);    operation.get(ACCEPTOR).set(acceptors);    break;  }case ADDRESS_SETTINGS:{  final ModelNode addressSettings=processAddressSettings(reader);  operation.get(ADDRESS_SETTING).set(addressSettings);  break;}case ASYNC_CONNECTION_EXECUTION_ENABLED:unhandledElement(reader,element);break;case BACKUP:handleElementText(reader,element,operation);break;case BACKUP_CONNECTOR_REF:handleElementText(reader,element,operation);break;case BINDINGS_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(BINDINGS_DIRECTORY).set(directory);break;}case BROADCAST_PERIOD:handleElementText(reader,element,operation);break;case CLUSTERED:handleElementText(reader,element,operation);break;case CLUSTER_PASSWORD:handleElementText(reader,element,operation);break;case CLUSTER_USER:handleElementText(reader,element,operation);break;case CONNECTION_TTL_OVERRIDE:handleElementText(reader,element,operation);break;case CONNECTORS:{final ModelNode connectors=processConnectors(reader);operation.get(CONNECTOR).set(connectors);break;}case CONNECTOR_REF:unhandledElement(reader,element);break;case CREATE_BINDINGS_DIR:handleElementText(reader,element,operation);break;case CREATE_JOURNAL_DIR:handleElementText(reader,element,operation);break;case FILE_DEPLOYMENT_ENABLED:unhandledElement(reader,element);break;case GROUP_ADDRESS:unhandledElement(reader,element);break;case GROUP_PORT:unhandledElement(reader,element);break;case GROUPING_HANDLER:unhandledElement(reader,element);break;case ID_CACHE_SIZE:handleElementText(reader,element,operation);break;case JMX_DOMAIN:handleElementText(reader,element,operation);break;case JMX_MANAGEMENT_ENABLED:handleElementText(reader,element,operation);break;case JOURNAL_BUFFER_SIZE:unhandledElement(reader,element);break;case JOURNAL_BUFFER_TIMEOUT:handleElementText(reader,element,operation);break;case JOURNAL_COMPACT_MIN_FILES:handleElementText(reader,element,operation);break;case JOURNAL_COMPACT_PERCENTAGE:handleElementText(reader,element,operation);break;case JOURNAL_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(JOURNAL_DIRECTORY).set(directory);break;}case JOURNAL_MIN_FILES:{operation.get(JOURNAL_MIN_FILES).set(reader.getElementText());break;}case JOURNAL_SYNC_NON_TRANSACTIONAL:handleElementText(reader,element,operation);break;case JOURNAL_SYNC_TRANSACTIONAL:handleElementText(reader,element,operation);break;case JOURNAL_TYPE:{String journalType=reader.getElementText();if (journalType != null && journalType.length() > 0) {JournalType.valueOf(journalType.trim());operation.get(JOURNAL_TYPE).set(journalType.trim());}break;}case JOURNAL_FILE_SIZE:{String text=reader.getElementText();if (text != null && text.length() > 0) {operation.get(JOURNAL_FILE_SIZE).set(text.trim());}}break;case JOURNAL_MAX_IO:handleElementText(reader,element,operation);break;case LARGE_MESSAGES_DIRECTORY:{final ModelNode dir=parseDirectory(reader);operation.get(LARGE_MESSAGES_DIRECTORY).set(dir);break;}case LOCAL_BIND_ADDRESS:unhandledElement(reader,element);break;case LOCAL_BIND_PORT:unhandledElement(reader,element);break;case LOG_JOURNAL_WRITE_RATE:handleElementText(reader,element,operation);break;case MANAGEMENT_ADDRESS:unhandledElement(reader,element);break;case MANAGEMENT_NOTIFICATION_ADDRESS:unhandledElement(reader,element);break;case MEMORY_MEASURE_INTERVAL:unhandledElement(reader,element);break;case MEMORY_WARNING_THRESHOLD:unhandledElement(reader,element);break;case MESSAGE_COUNTER_ENABLED:unhandledElement(reader,element);break;case MESSAGE_COUNTER_MAX_DAY_HISTORY:unhandledElement(reader,element);break;case MESSAGE_COUNTER_SAMPLE_PERIOD:unhandledElement(reader,element);break;case MESSAGE_EXPIRY_SCAN_PERIOD:unhandledElement(reader,element);break;case MESSAGE_EXPIRY_THREAD_PRIORITY:unhandledElement(reader,element);break;case PAGING_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(PAGING_DIRECTORY).set(directory);break;}case PERF_BLAST_PAGES:unhandledElement(reader,element);break;case PERSIST_DELIVERY_COUNT_BEFORE_DELIVERY:unhandledElement(reader,element);break;case PERSIST_ID_CACHE:unhandledElement(reader,element);break;case PERSISTENCE_ENABLED:{final String value=reader.getElementText();if (value != null && value.length() > 0) {boolean enabled=Boolean.valueOf(value.trim());operation.get(PERSISTENCE_ENABLED).set(enabled);}break;}case REFRESH_TIMEOUT:unhandledElement(reader,element);break;case REMOTING_INTERCEPTORS:unhandledElement(reader,element);break;case RUN_SYNC_SPEED_TEST:unhandledElement(reader,element);break;case SECURITY_ENABLED:unhandledElement(reader,element);break;case SECURITY_INVALIDATION_INTERVAL:unhandledElement(reader,element);break;case SECURITY_SETTINGS:{final ModelNode securitySettings=processSecuritySettings(reader);operation.get(SECURITY_SETTING).set(securitySettings);break;}case SERVER_DUMP_INTERVAL:unhandledElement(reader,element);break;case SHARED_STORE:unhandledElement(reader,element);break;case TRANSACTION_TIMEOUT:unhandledElement(reader,element);break;case TRANSACTION_TIMEOUT_SCAN_PERIOD:unhandledElement(reader,element);break;case WILD_CARD_ROUTING_ENABLED:unhandledElement(reader,element);break;case DEAD_LETTER_ADDRESS_NODE_NAME:unhandledElement(reader,element);break;case EXPIRY_ADDRESS_NODE_NAME:unhandledElement(reader,element);break;case REDELIVERY_DELAY_NODE_NAME:unhandledElement(reader,element);break;case MAX_DELIVERY_ATTEMPTS:unhandledElement(reader,element);break;case MAX_SIZE_BYTES_NODE_NAME:unhandledElement(reader,element);break;case ADDRESS_FULL_MESSAGE_POLICY_NODE_NAME:unhandledElement(reader,element);break;case PAGE_SIZE_BYTES_NODE_NAME:unhandledElement(reader,element);break;case MESSAGE_COUNTER_HISTORY_DAY_LIMIT_NODE_NAME:unhandledElement(reader,element);break;case LVQ_NODE_NAME:unhandledElement(reader,element);break;case REDISTRIBUTION_DELAY_NODE_NAME:unhandledElement(reader,element);break;case SEND_TO_DLA_ON_NO_ROUTE:unhandledElement(reader,element);break;case QUEUES:{final ModelNode queues=parseQueues(reader);operation.get(QUEUE).set(queues);break;}case SUBSYSTEM:break;default :throw ParseUtils.unexpectedElement(reader);} @AT@ 10577 @LENGTH@ 46
---MOV ExpressionStatement@@MethodInvocation:unhandledElement(reader,element) @TO@ SwitchStatement@@switch (element) {case ACCEPTORS:{    final ModelNode acceptors=processAcceptors(reader);    operation.get(ACCEPTOR).set(acceptors);    break;  }case ADDRESS_SETTINGS:{  final ModelNode addressSettings=processAddressSettings(reader);  operation.get(ADDRESS_SETTING).set(addressSettings);  break;}case ASYNC_CONNECTION_EXECUTION_ENABLED:unhandledElement(reader,element);break;case BACKUP:handleElementText(reader,element,operation);break;case BACKUP_CONNECTOR_REF:handleElementText(reader,element,operation);break;case BINDINGS_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(BINDINGS_DIRECTORY).set(directory);break;}case BROADCAST_PERIOD:handleElementText(reader,element,operation);break;case CLUSTERED:handleElementText(reader,element,operation);break;case CLUSTER_PASSWORD:handleElementText(reader,element,operation);break;case CLUSTER_USER:handleElementText(reader,element,operation);break;case CONNECTION_TTL_OVERRIDE:handleElementText(reader,element,operation);break;case CONNECTORS:{final ModelNode connectors=processConnectors(reader);operation.get(CONNECTOR).set(connectors);break;}case CONNECTOR_REF:unhandledElement(reader,element);break;case CREATE_BINDINGS_DIR:handleElementText(reader,element,operation);break;case CREATE_JOURNAL_DIR:handleElementText(reader,element,operation);break;case FILE_DEPLOYMENT_ENABLED:unhandledElement(reader,element);break;case GROUP_ADDRESS:unhandledElement(reader,element);break;case GROUP_PORT:unhandledElement(reader,element);break;case GROUPING_HANDLER:unhandledElement(reader,element);break;case ID_CACHE_SIZE:handleElementText(reader,element,operation);break;case JMX_DOMAIN:handleElementText(reader,element,operation);break;case JMX_MANAGEMENT_ENABLED:handleElementText(reader,element,operation);break;case JOURNAL_BUFFER_SIZE:unhandledElement(reader,element);break;case JOURNAL_BUFFER_TIMEOUT:handleElementText(reader,element,operation);break;case JOURNAL_COMPACT_MIN_FILES:handleElementText(reader,element,operation);break;case JOURNAL_COMPACT_PERCENTAGE:handleElementText(reader,element,operation);break;case JOURNAL_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(JOURNAL_DIRECTORY).set(directory);break;}case JOURNAL_MIN_FILES:{operation.get(JOURNAL_MIN_FILES).set(reader.getElementText());break;}case JOURNAL_SYNC_NON_TRANSACTIONAL:handleElementText(reader,element,operation);break;case JOURNAL_SYNC_TRANSACTIONAL:handleElementText(reader,element,operation);break;case JOURNAL_TYPE:{String journalType=reader.getElementText();if (journalType != null && journalType.length() > 0) {JournalType.valueOf(journalType.trim());operation.get(JOURNAL_TYPE).set(journalType.trim());}break;}case JOURNAL_FILE_SIZE:{String text=reader.getElementText();if (text != null && text.length() > 0) {operation.get(JOURNAL_FILE_SIZE).set(text.trim());}}break;case JOURNAL_MAX_IO:handleElementText(reader,element,operation);break;case LARGE_MESSAGES_DIRECTORY:{final ModelNode dir=parseDirectory(reader);operation.get(LARGE_MESSAGES_DIRECTORY).set(dir);break;}case LOCAL_BIND_ADDRESS:unhandledElement(reader,element);break;case LOCAL_BIND_PORT:unhandledElement(reader,element);break;case LOG_JOURNAL_WRITE_RATE:handleElementText(reader,element,operation);break;case MANAGEMENT_ADDRESS:unhandledElement(reader,element);break;case MANAGEMENT_NOTIFICATION_ADDRESS:unhandledElement(reader,element);break;case MEMORY_MEASURE_INTERVAL:unhandledElement(reader,element);break;case MEMORY_WARNING_THRESHOLD:unhandledElement(reader,element);break;case MESSAGE_COUNTER_ENABLED:unhandledElement(reader,element);break;case MESSAGE_COUNTER_MAX_DAY_HISTORY:unhandledElement(reader,element);break;case MESSAGE_COUNTER_SAMPLE_PERIOD:unhandledElement(reader,element);break;case MESSAGE_EXPIRY_SCAN_PERIOD:unhandledElement(reader,element);break;case MESSAGE_EXPIRY_THREAD_PRIORITY:unhandledElement(reader,element);break;case PAGING_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(PAGING_DIRECTORY).set(directory);break;}case PERF_BLAST_PAGES:unhandledElement(reader,element);break;case PERSIST_DELIVERY_COUNT_BEFORE_DELIVERY:unhandledElement(reader,element);break;case PERSIST_ID_CACHE:unhandledElement(reader,element);break;case PERSISTENCE_ENABLED:{final String value=reader.getElementText();if (value != null && value.length() > 0) {boolean enabled=Boolean.valueOf(value.trim());operation.get(PERSISTENCE_ENABLED).set(enabled);}break;}case REFRESH_TIMEOUT:unhandledElement(reader,element);break;case REMOTING_INTERCEPTORS:unhandledElement(reader,element);break;case RUN_SYNC_SPEED_TEST:unhandledElement(reader,element);break;case SECURITY_ENABLED:unhandledElement(reader,element);break;case SECURITY_INVALIDATION_INTERVAL:unhandledElement(reader,element);break;case SECURITY_SETTINGS:{final ModelNode securitySettings=processSecuritySettings(reader);operation.get(SECURITY_SETTING).set(securitySettings);break;}case SERVER_DUMP_INTERVAL:unhandledElement(reader,element);break;case SHARED_STORE:unhandledElement(reader,element);break;case TRANSACTION_TIMEOUT:unhandledElement(reader,element);break;case TRANSACTION_TIMEOUT_SCAN_PERIOD:unhandledElement(reader,element);break;case WILD_CARD_ROUTING_ENABLED:unhandledElement(reader,element);break;case DEAD_LETTER_ADDRESS_NODE_NAME:unhandledElement(reader,element);break;case EXPIRY_ADDRESS_NODE_NAME:unhandledElement(reader,element);break;case REDELIVERY_DELAY_NODE_NAME:unhandledElement(reader,element);break;case MAX_DELIVERY_ATTEMPTS:unhandledElement(reader,element);break;case MAX_SIZE_BYTES_NODE_NAME:unhandledElement(reader,element);break;case ADDRESS_FULL_MESSAGE_POLICY_NODE_NAME:unhandledElement(reader,element);break;case PAGE_SIZE_BYTES_NODE_NAME:unhandledElement(reader,element);break;case MESSAGE_COUNTER_HISTORY_DAY_LIMIT_NODE_NAME:unhandledElement(reader,element);break;case LVQ_NODE_NAME:unhandledElement(reader,element);break;case REDISTRIBUTION_DELAY_NODE_NAME:unhandledElement(reader,element);break;case SEND_TO_DLA_ON_NO_ROUTE:unhandledElement(reader,element);break;case QUEUES:{final ModelNode queues=parseQueues(reader);operation.get(QUEUE).set(queues);break;}case SUBSYSTEM:break;default :throw ParseUtils.unexpectedElement(reader);} @AT@ 11732 @LENGTH@ 34
---MOV ExpressionStatement@@MethodInvocation:unhandledElement(reader,element) @TO@ SwitchStatement@@switch (element) {case ACCEPTORS:{    final ModelNode acceptors=processAcceptors(reader);    operation.get(ACCEPTOR).set(acceptors);    break;  }case ADDRESS_SETTINGS:{  final ModelNode addressSettings=processAddressSettings(reader);  operation.get(ADDRESS_SETTING).set(addressSettings);  break;}case ASYNC_CONNECTION_EXECUTION_ENABLED:unhandledElement(reader,element);break;case BACKUP:handleElementText(reader,element,operation);break;case BACKUP_CONNECTOR_REF:handleElementText(reader,element,operation);break;case BINDINGS_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(BINDINGS_DIRECTORY).set(directory);break;}case BROADCAST_PERIOD:handleElementText(reader,element,operation);break;case CLUSTERED:handleElementText(reader,element,operation);break;case CLUSTER_PASSWORD:handleElementText(reader,element,operation);break;case CLUSTER_USER:handleElementText(reader,element,operation);break;case CONNECTION_TTL_OVERRIDE:handleElementText(reader,element,operation);break;case CONNECTORS:{final ModelNode connectors=processConnectors(reader);operation.get(CONNECTOR).set(connectors);break;}case CONNECTOR_REF:unhandledElement(reader,element);break;case CREATE_BINDINGS_DIR:handleElementText(reader,element,operation);break;case CREATE_JOURNAL_DIR:handleElementText(reader,element,operation);break;case FILE_DEPLOYMENT_ENABLED:unhandledElement(reader,element);break;case GROUP_ADDRESS:unhandledElement(reader,element);break;case GROUP_PORT:unhandledElement(reader,element);break;case GROUPING_HANDLER:unhandledElement(reader,element);break;case ID_CACHE_SIZE:handleElementText(reader,element,operation);break;case JMX_DOMAIN:handleElementText(reader,element,operation);break;case JMX_MANAGEMENT_ENABLED:handleElementText(reader,element,operation);break;case JOURNAL_BUFFER_SIZE:unhandledElement(reader,element);break;case JOURNAL_BUFFER_TIMEOUT:handleElementText(reader,element,operation);break;case JOURNAL_COMPACT_MIN_FILES:handleElementText(reader,element,operation);break;case JOURNAL_COMPACT_PERCENTAGE:handleElementText(reader,element,operation);break;case JOURNAL_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(JOURNAL_DIRECTORY).set(directory);break;}case JOURNAL_MIN_FILES:{operation.get(JOURNAL_MIN_FILES).set(reader.getElementText());break;}case JOURNAL_SYNC_NON_TRANSACTIONAL:handleElementText(reader,element,operation);break;case JOURNAL_SYNC_TRANSACTIONAL:handleElementText(reader,element,operation);break;case JOURNAL_TYPE:{String journalType=reader.getElementText();if (journalType != null && journalType.length() > 0) {JournalType.valueOf(journalType.trim());operation.get(JOURNAL_TYPE).set(journalType.trim());}break;}case JOURNAL_FILE_SIZE:{String text=reader.getElementText();if (text != null && text.length() > 0) {operation.get(JOURNAL_FILE_SIZE).set(text.trim());}}break;case JOURNAL_MAX_IO:handleElementText(reader,element,operation);break;case LARGE_MESSAGES_DIRECTORY:{final ModelNode dir=parseDirectory(reader);operation.get(LARGE_MESSAGES_DIRECTORY).set(dir);break;}case LOCAL_BIND_ADDRESS:unhandledElement(reader,element);break;case LOCAL_BIND_PORT:unhandledElement(reader,element);break;case LOG_JOURNAL_WRITE_RATE:handleElementText(reader,element,operation);break;case MANAGEMENT_ADDRESS:unhandledElement(reader,element);break;case MANAGEMENT_NOTIFICATION_ADDRESS:unhandledElement(reader,element);break;case MEMORY_MEASURE_INTERVAL:unhandledElement(reader,element);break;case MEMORY_WARNING_THRESHOLD:unhandledElement(reader,element);break;case MESSAGE_COUNTER_ENABLED:unhandledElement(reader,element);break;case MESSAGE_COUNTER_MAX_DAY_HISTORY:unhandledElement(reader,element);break;case MESSAGE_COUNTER_SAMPLE_PERIOD:unhandledElement(reader,element);break;case MESSAGE_EXPIRY_SCAN_PERIOD:unhandledElement(reader,element);break;case MESSAGE_EXPIRY_THREAD_PRIORITY:unhandledElement(reader,element);break;case PAGING_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(PAGING_DIRECTORY).set(directory);break;}case PERF_BLAST_PAGES:unhandledElement(reader,element);break;case PERSIST_DELIVERY_COUNT_BEFORE_DELIVERY:unhandledElement(reader,element);break;case PERSIST_ID_CACHE:unhandledElement(reader,element);break;case PERSISTENCE_ENABLED:{final String value=reader.getElementText();if (value != null && value.length() > 0) {boolean enabled=Boolean.valueOf(value.trim());operation.get(PERSISTENCE_ENABLED).set(enabled);}break;}case REFRESH_TIMEOUT:unhandledElement(reader,element);break;case REMOTING_INTERCEPTORS:unhandledElement(reader,element);break;case RUN_SYNC_SPEED_TEST:unhandledElement(reader,element);break;case SECURITY_ENABLED:unhandledElement(reader,element);break;case SECURITY_INVALIDATION_INTERVAL:unhandledElement(reader,element);break;case SECURITY_SETTINGS:{final ModelNode securitySettings=processSecuritySettings(reader);operation.get(SECURITY_SETTING).set(securitySettings);break;}case SERVER_DUMP_INTERVAL:unhandledElement(reader,element);break;case SHARED_STORE:unhandledElement(reader,element);break;case TRANSACTION_TIMEOUT:unhandledElement(reader,element);break;case TRANSACTION_TIMEOUT_SCAN_PERIOD:unhandledElement(reader,element);break;case WILD_CARD_ROUTING_ENABLED:unhandledElement(reader,element);break;case DEAD_LETTER_ADDRESS_NODE_NAME:unhandledElement(reader,element);break;case EXPIRY_ADDRESS_NODE_NAME:unhandledElement(reader,element);break;case REDELIVERY_DELAY_NODE_NAME:unhandledElement(reader,element);break;case MAX_DELIVERY_ATTEMPTS:unhandledElement(reader,element);break;case MAX_SIZE_BYTES_NODE_NAME:unhandledElement(reader,element);break;case ADDRESS_FULL_MESSAGE_POLICY_NODE_NAME:unhandledElement(reader,element);break;case PAGE_SIZE_BYTES_NODE_NAME:unhandledElement(reader,element);break;case MESSAGE_COUNTER_HISTORY_DAY_LIMIT_NODE_NAME:unhandledElement(reader,element);break;case LVQ_NODE_NAME:unhandledElement(reader,element);break;case REDISTRIBUTION_DELAY_NODE_NAME:unhandledElement(reader,element);break;case SEND_TO_DLA_ON_NO_ROUTE:unhandledElement(reader,element);break;case QUEUES:{final ModelNode queues=parseQueues(reader);operation.get(QUEUE).set(queues);break;}case SUBSYSTEM:break;default :throw ParseUtils.unexpectedElement(reader);} @AT@ 11852 @LENGTH@ 34
---MOV ExpressionStatement@@MethodInvocation:unhandledElement(reader,element) @TO@ SwitchStatement@@switch (element) {case ACCEPTORS:{    final ModelNode acceptors=processAcceptors(reader);    operation.get(ACCEPTOR).set(acceptors);    break;  }case ADDRESS_SETTINGS:{  final ModelNode addressSettings=processAddressSettings(reader);  operation.get(ADDRESS_SETTING).set(addressSettings);  break;}case ASYNC_CONNECTION_EXECUTION_ENABLED:unhandledElement(reader,element);break;case BACKUP:handleElementText(reader,element,operation);break;case BACKUP_CONNECTOR_REF:handleElementText(reader,element,operation);break;case BINDINGS_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(BINDINGS_DIRECTORY).set(directory);break;}case BROADCAST_PERIOD:handleElementText(reader,element,operation);break;case CLUSTERED:handleElementText(reader,element,operation);break;case CLUSTER_PASSWORD:handleElementText(reader,element,operation);break;case CLUSTER_USER:handleElementText(reader,element,operation);break;case CONNECTION_TTL_OVERRIDE:handleElementText(reader,element,operation);break;case CONNECTORS:{final ModelNode connectors=processConnectors(reader);operation.get(CONNECTOR).set(connectors);break;}case CONNECTOR_REF:unhandledElement(reader,element);break;case CREATE_BINDINGS_DIR:handleElementText(reader,element,operation);break;case CREATE_JOURNAL_DIR:handleElementText(reader,element,operation);break;case FILE_DEPLOYMENT_ENABLED:unhandledElement(reader,element);break;case GROUP_ADDRESS:unhandledElement(reader,element);break;case GROUP_PORT:unhandledElement(reader,element);break;case GROUPING_HANDLER:unhandledElement(reader,element);break;case ID_CACHE_SIZE:handleElementText(reader,element,operation);break;case JMX_DOMAIN:handleElementText(reader,element,operation);break;case JMX_MANAGEMENT_ENABLED:handleElementText(reader,element,operation);break;case JOURNAL_BUFFER_SIZE:unhandledElement(reader,element);break;case JOURNAL_BUFFER_TIMEOUT:handleElementText(reader,element,operation);break;case JOURNAL_COMPACT_MIN_FILES:handleElementText(reader,element,operation);break;case JOURNAL_COMPACT_PERCENTAGE:handleElementText(reader,element,operation);break;case JOURNAL_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(JOURNAL_DIRECTORY).set(directory);break;}case JOURNAL_MIN_FILES:{operation.get(JOURNAL_MIN_FILES).set(reader.getElementText());break;}case JOURNAL_SYNC_NON_TRANSACTIONAL:handleElementText(reader,element,operation);break;case JOURNAL_SYNC_TRANSACTIONAL:handleElementText(reader,element,operation);break;case JOURNAL_TYPE:{String journalType=reader.getElementText();if (journalType != null && journalType.length() > 0) {JournalType.valueOf(journalType.trim());operation.get(JOURNAL_TYPE).set(journalType.trim());}break;}case JOURNAL_FILE_SIZE:{String text=reader.getElementText();if (text != null && text.length() > 0) {operation.get(JOURNAL_FILE_SIZE).set(text.trim());}}break;case JOURNAL_MAX_IO:handleElementText(reader,element,operation);break;case LARGE_MESSAGES_DIRECTORY:{final ModelNode dir=parseDirectory(reader);operation.get(LARGE_MESSAGES_DIRECTORY).set(dir);break;}case LOCAL_BIND_ADDRESS:unhandledElement(reader,element);break;case LOCAL_BIND_PORT:unhandledElement(reader,element);break;case LOG_JOURNAL_WRITE_RATE:handleElementText(reader,element,operation);break;case MANAGEMENT_ADDRESS:unhandledElement(reader,element);break;case MANAGEMENT_NOTIFICATION_ADDRESS:unhandledElement(reader,element);break;case MEMORY_MEASURE_INTERVAL:unhandledElement(reader,element);break;case MEMORY_WARNING_THRESHOLD:unhandledElement(reader,element);break;case MESSAGE_COUNTER_ENABLED:unhandledElement(reader,element);break;case MESSAGE_COUNTER_MAX_DAY_HISTORY:unhandledElement(reader,element);break;case MESSAGE_COUNTER_SAMPLE_PERIOD:unhandledElement(reader,element);break;case MESSAGE_EXPIRY_SCAN_PERIOD:unhandledElement(reader,element);break;case MESSAGE_EXPIRY_THREAD_PRIORITY:unhandledElement(reader,element);break;case PAGING_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(PAGING_DIRECTORY).set(directory);break;}case PERF_BLAST_PAGES:unhandledElement(reader,element);break;case PERSIST_DELIVERY_COUNT_BEFORE_DELIVERY:unhandledElement(reader,element);break;case PERSIST_ID_CACHE:unhandledElement(reader,element);break;case PERSISTENCE_ENABLED:{final String value=reader.getElementText();if (value != null && value.length() > 0) {boolean enabled=Boolean.valueOf(value.trim());operation.get(PERSISTENCE_ENABLED).set(enabled);}break;}case REFRESH_TIMEOUT:unhandledElement(reader,element);break;case REMOTING_INTERCEPTORS:unhandledElement(reader,element);break;case RUN_SYNC_SPEED_TEST:unhandledElement(reader,element);break;case SECURITY_ENABLED:unhandledElement(reader,element);break;case SECURITY_INVALIDATION_INTERVAL:unhandledElement(reader,element);break;case SECURITY_SETTINGS:{final ModelNode securitySettings=processSecuritySettings(reader);operation.get(SECURITY_SETTING).set(securitySettings);break;}case SERVER_DUMP_INTERVAL:unhandledElement(reader,element);break;case SHARED_STORE:unhandledElement(reader,element);break;case TRANSACTION_TIMEOUT:unhandledElement(reader,element);break;case TRANSACTION_TIMEOUT_SCAN_PERIOD:unhandledElement(reader,element);break;case WILD_CARD_ROUTING_ENABLED:unhandledElement(reader,element);break;case DEAD_LETTER_ADDRESS_NODE_NAME:unhandledElement(reader,element);break;case EXPIRY_ADDRESS_NODE_NAME:unhandledElement(reader,element);break;case REDELIVERY_DELAY_NODE_NAME:unhandledElement(reader,element);break;case MAX_DELIVERY_ATTEMPTS:unhandledElement(reader,element);break;case MAX_SIZE_BYTES_NODE_NAME:unhandledElement(reader,element);break;case ADDRESS_FULL_MESSAGE_POLICY_NODE_NAME:unhandledElement(reader,element);break;case PAGE_SIZE_BYTES_NODE_NAME:unhandledElement(reader,element);break;case MESSAGE_COUNTER_HISTORY_DAY_LIMIT_NODE_NAME:unhandledElement(reader,element);break;case LVQ_NODE_NAME:unhandledElement(reader,element);break;case REDISTRIBUTION_DELAY_NODE_NAME:unhandledElement(reader,element);break;case SEND_TO_DLA_ON_NO_ROUTE:unhandledElement(reader,element);break;case QUEUES:{final ModelNode queues=parseQueues(reader);operation.get(QUEUE).set(queues);break;}case SUBSYSTEM:break;default :throw ParseUtils.unexpectedElement(reader);} @AT@ 12114 @LENGTH@ 34
---MOV ExpressionStatement@@MethodInvocation:unhandledElement(reader,element) @TO@ SwitchStatement@@switch (element) {case ACCEPTORS:{    final ModelNode acceptors=processAcceptors(reader);    operation.get(ACCEPTOR).set(acceptors);    break;  }case ADDRESS_SETTINGS:{  final ModelNode addressSettings=processAddressSettings(reader);  operation.get(ADDRESS_SETTING).set(addressSettings);  break;}case ASYNC_CONNECTION_EXECUTION_ENABLED:unhandledElement(reader,element);break;case BACKUP:handleElementText(reader,element,operation);break;case BACKUP_CONNECTOR_REF:handleElementText(reader,element,operation);break;case BINDINGS_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(BINDINGS_DIRECTORY).set(directory);break;}case BROADCAST_PERIOD:handleElementText(reader,element,operation);break;case CLUSTERED:handleElementText(reader,element,operation);break;case CLUSTER_PASSWORD:handleElementText(reader,element,operation);break;case CLUSTER_USER:handleElementText(reader,element,operation);break;case CONNECTION_TTL_OVERRIDE:handleElementText(reader,element,operation);break;case CONNECTORS:{final ModelNode connectors=processConnectors(reader);operation.get(CONNECTOR).set(connectors);break;}case CONNECTOR_REF:unhandledElement(reader,element);break;case CREATE_BINDINGS_DIR:handleElementText(reader,element,operation);break;case CREATE_JOURNAL_DIR:handleElementText(reader,element,operation);break;case FILE_DEPLOYMENT_ENABLED:unhandledElement(reader,element);break;case GROUP_ADDRESS:unhandledElement(reader,element);break;case GROUP_PORT:unhandledElement(reader,element);break;case GROUPING_HANDLER:unhandledElement(reader,element);break;case ID_CACHE_SIZE:handleElementText(reader,element,operation);break;case JMX_DOMAIN:handleElementText(reader,element,operation);break;case JMX_MANAGEMENT_ENABLED:handleElementText(reader,element,operation);break;case JOURNAL_BUFFER_SIZE:unhandledElement(reader,element);break;case JOURNAL_BUFFER_TIMEOUT:handleElementText(reader,element,operation);break;case JOURNAL_COMPACT_MIN_FILES:handleElementText(reader,element,operation);break;case JOURNAL_COMPACT_PERCENTAGE:handleElementText(reader,element,operation);break;case JOURNAL_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(JOURNAL_DIRECTORY).set(directory);break;}case JOURNAL_MIN_FILES:{operation.get(JOURNAL_MIN_FILES).set(reader.getElementText());break;}case JOURNAL_SYNC_NON_TRANSACTIONAL:handleElementText(reader,element,operation);break;case JOURNAL_SYNC_TRANSACTIONAL:handleElementText(reader,element,operation);break;case JOURNAL_TYPE:{String journalType=reader.getElementText();if (journalType != null && journalType.length() > 0) {JournalType.valueOf(journalType.trim());operation.get(JOURNAL_TYPE).set(journalType.trim());}break;}case JOURNAL_FILE_SIZE:{String text=reader.getElementText();if (text != null && text.length() > 0) {operation.get(JOURNAL_FILE_SIZE).set(text.trim());}}break;case JOURNAL_MAX_IO:handleElementText(reader,element,operation);break;case LARGE_MESSAGES_DIRECTORY:{final ModelNode dir=parseDirectory(reader);operation.get(LARGE_MESSAGES_DIRECTORY).set(dir);break;}case LOCAL_BIND_ADDRESS:unhandledElement(reader,element);break;case LOCAL_BIND_PORT:unhandledElement(reader,element);break;case LOG_JOURNAL_WRITE_RATE:handleElementText(reader,element,operation);break;case MANAGEMENT_ADDRESS:unhandledElement(reader,element);break;case MANAGEMENT_NOTIFICATION_ADDRESS:unhandledElement(reader,element);break;case MEMORY_MEASURE_INTERVAL:unhandledElement(reader,element);break;case MEMORY_WARNING_THRESHOLD:unhandledElement(reader,element);break;case MESSAGE_COUNTER_ENABLED:unhandledElement(reader,element);break;case MESSAGE_COUNTER_MAX_DAY_HISTORY:unhandledElement(reader,element);break;case MESSAGE_COUNTER_SAMPLE_PERIOD:unhandledElement(reader,element);break;case MESSAGE_EXPIRY_SCAN_PERIOD:unhandledElement(reader,element);break;case MESSAGE_EXPIRY_THREAD_PRIORITY:unhandledElement(reader,element);break;case PAGING_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(PAGING_DIRECTORY).set(directory);break;}case PERF_BLAST_PAGES:unhandledElement(reader,element);break;case PERSIST_DELIVERY_COUNT_BEFORE_DELIVERY:unhandledElement(reader,element);break;case PERSIST_ID_CACHE:unhandledElement(reader,element);break;case PERSISTENCE_ENABLED:{final String value=reader.getElementText();if (value != null && value.length() > 0) {boolean enabled=Boolean.valueOf(value.trim());operation.get(PERSISTENCE_ENABLED).set(enabled);}break;}case REFRESH_TIMEOUT:unhandledElement(reader,element);break;case REMOTING_INTERCEPTORS:unhandledElement(reader,element);break;case RUN_SYNC_SPEED_TEST:unhandledElement(reader,element);break;case SECURITY_ENABLED:unhandledElement(reader,element);break;case SECURITY_INVALIDATION_INTERVAL:unhandledElement(reader,element);break;case SECURITY_SETTINGS:{final ModelNode securitySettings=processSecuritySettings(reader);operation.get(SECURITY_SETTING).set(securitySettings);break;}case SERVER_DUMP_INTERVAL:unhandledElement(reader,element);break;case SHARED_STORE:unhandledElement(reader,element);break;case TRANSACTION_TIMEOUT:unhandledElement(reader,element);break;case TRANSACTION_TIMEOUT_SCAN_PERIOD:unhandledElement(reader,element);break;case WILD_CARD_ROUTING_ENABLED:unhandledElement(reader,element);break;case DEAD_LETTER_ADDRESS_NODE_NAME:unhandledElement(reader,element);break;case EXPIRY_ADDRESS_NODE_NAME:unhandledElement(reader,element);break;case REDELIVERY_DELAY_NODE_NAME:unhandledElement(reader,element);break;case MAX_DELIVERY_ATTEMPTS:unhandledElement(reader,element);break;case MAX_SIZE_BYTES_NODE_NAME:unhandledElement(reader,element);break;case ADDRESS_FULL_MESSAGE_POLICY_NODE_NAME:unhandledElement(reader,element);break;case PAGE_SIZE_BYTES_NODE_NAME:unhandledElement(reader,element);break;case MESSAGE_COUNTER_HISTORY_DAY_LIMIT_NODE_NAME:unhandledElement(reader,element);break;case LVQ_NODE_NAME:unhandledElement(reader,element);break;case REDISTRIBUTION_DELAY_NODE_NAME:unhandledElement(reader,element);break;case SEND_TO_DLA_ON_NO_ROUTE:unhandledElement(reader,element);break;case QUEUES:{final ModelNode queues=parseQueues(reader);operation.get(QUEUE).set(queues);break;}case SUBSYSTEM:break;default :throw ParseUtils.unexpectedElement(reader);} @AT@ 12250 @LENGTH@ 34
---MOV ExpressionStatement@@MethodInvocation:unhandledElement(reader,element) @TO@ SwitchStatement@@switch (element) {case ACCEPTORS:{    final ModelNode acceptors=processAcceptors(reader);    operation.get(ACCEPTOR).set(acceptors);    break;  }case ADDRESS_SETTINGS:{  final ModelNode addressSettings=processAddressSettings(reader);  operation.get(ADDRESS_SETTING).set(addressSettings);  break;}case ASYNC_CONNECTION_EXECUTION_ENABLED:unhandledElement(reader,element);break;case BACKUP:handleElementText(reader,element,operation);break;case BACKUP_CONNECTOR_REF:handleElementText(reader,element,operation);break;case BINDINGS_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(BINDINGS_DIRECTORY).set(directory);break;}case BROADCAST_PERIOD:handleElementText(reader,element,operation);break;case CLUSTERED:handleElementText(reader,element,operation);break;case CLUSTER_PASSWORD:handleElementText(reader,element,operation);break;case CLUSTER_USER:handleElementText(reader,element,operation);break;case CONNECTION_TTL_OVERRIDE:handleElementText(reader,element,operation);break;case CONNECTORS:{final ModelNode connectors=processConnectors(reader);operation.get(CONNECTOR).set(connectors);break;}case CONNECTOR_REF:unhandledElement(reader,element);break;case CREATE_BINDINGS_DIR:handleElementText(reader,element,operation);break;case CREATE_JOURNAL_DIR:handleElementText(reader,element,operation);break;case FILE_DEPLOYMENT_ENABLED:unhandledElement(reader,element);break;case GROUP_ADDRESS:unhandledElement(reader,element);break;case GROUP_PORT:unhandledElement(reader,element);break;case GROUPING_HANDLER:unhandledElement(reader,element);break;case ID_CACHE_SIZE:handleElementText(reader,element,operation);break;case JMX_DOMAIN:handleElementText(reader,element,operation);break;case JMX_MANAGEMENT_ENABLED:handleElementText(reader,element,operation);break;case JOURNAL_BUFFER_SIZE:unhandledElement(reader,element);break;case JOURNAL_BUFFER_TIMEOUT:handleElementText(reader,element,operation);break;case JOURNAL_COMPACT_MIN_FILES:handleElementText(reader,element,operation);break;case JOURNAL_COMPACT_PERCENTAGE:handleElementText(reader,element,operation);break;case JOURNAL_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(JOURNAL_DIRECTORY).set(directory);break;}case JOURNAL_MIN_FILES:{operation.get(JOURNAL_MIN_FILES).set(reader.getElementText());break;}case JOURNAL_SYNC_NON_TRANSACTIONAL:handleElementText(reader,element,operation);break;case JOURNAL_SYNC_TRANSACTIONAL:handleElementText(reader,element,operation);break;case JOURNAL_TYPE:{String journalType=reader.getElementText();if (journalType != null && journalType.length() > 0) {JournalType.valueOf(journalType.trim());operation.get(JOURNAL_TYPE).set(journalType.trim());}break;}case JOURNAL_FILE_SIZE:{String text=reader.getElementText();if (text != null && text.length() > 0) {operation.get(JOURNAL_FILE_SIZE).set(text.trim());}}break;case JOURNAL_MAX_IO:handleElementText(reader,element,operation);break;case LARGE_MESSAGES_DIRECTORY:{final ModelNode dir=parseDirectory(reader);operation.get(LARGE_MESSAGES_DIRECTORY).set(dir);break;}case LOCAL_BIND_ADDRESS:unhandledElement(reader,element);break;case LOCAL_BIND_PORT:unhandledElement(reader,element);break;case LOG_JOURNAL_WRITE_RATE:handleElementText(reader,element,operation);break;case MANAGEMENT_ADDRESS:unhandledElement(reader,element);break;case MANAGEMENT_NOTIFICATION_ADDRESS:unhandledElement(reader,element);break;case MEMORY_MEASURE_INTERVAL:unhandledElement(reader,element);break;case MEMORY_WARNING_THRESHOLD:unhandledElement(reader,element);break;case MESSAGE_COUNTER_ENABLED:unhandledElement(reader,element);break;case MESSAGE_COUNTER_MAX_DAY_HISTORY:unhandledElement(reader,element);break;case MESSAGE_COUNTER_SAMPLE_PERIOD:unhandledElement(reader,element);break;case MESSAGE_EXPIRY_SCAN_PERIOD:unhandledElement(reader,element);break;case MESSAGE_EXPIRY_THREAD_PRIORITY:unhandledElement(reader,element);break;case PAGING_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(PAGING_DIRECTORY).set(directory);break;}case PERF_BLAST_PAGES:unhandledElement(reader,element);break;case PERSIST_DELIVERY_COUNT_BEFORE_DELIVERY:unhandledElement(reader,element);break;case PERSIST_ID_CACHE:unhandledElement(reader,element);break;case PERSISTENCE_ENABLED:{final String value=reader.getElementText();if (value != null && value.length() > 0) {boolean enabled=Boolean.valueOf(value.trim());operation.get(PERSISTENCE_ENABLED).set(enabled);}break;}case REFRESH_TIMEOUT:unhandledElement(reader,element);break;case REMOTING_INTERCEPTORS:unhandledElement(reader,element);break;case RUN_SYNC_SPEED_TEST:unhandledElement(reader,element);break;case SECURITY_ENABLED:unhandledElement(reader,element);break;case SECURITY_INVALIDATION_INTERVAL:unhandledElement(reader,element);break;case SECURITY_SETTINGS:{final ModelNode securitySettings=processSecuritySettings(reader);operation.get(SECURITY_SETTING).set(securitySettings);break;}case SERVER_DUMP_INTERVAL:unhandledElement(reader,element);break;case SHARED_STORE:unhandledElement(reader,element);break;case TRANSACTION_TIMEOUT:unhandledElement(reader,element);break;case TRANSACTION_TIMEOUT_SCAN_PERIOD:unhandledElement(reader,element);break;case WILD_CARD_ROUTING_ENABLED:unhandledElement(reader,element);break;case DEAD_LETTER_ADDRESS_NODE_NAME:unhandledElement(reader,element);break;case EXPIRY_ADDRESS_NODE_NAME:unhandledElement(reader,element);break;case REDELIVERY_DELAY_NODE_NAME:unhandledElement(reader,element);break;case MAX_DELIVERY_ATTEMPTS:unhandledElement(reader,element);break;case MAX_SIZE_BYTES_NODE_NAME:unhandledElement(reader,element);break;case ADDRESS_FULL_MESSAGE_POLICY_NODE_NAME:unhandledElement(reader,element);break;case PAGE_SIZE_BYTES_NODE_NAME:unhandledElement(reader,element);break;case MESSAGE_COUNTER_HISTORY_DAY_LIMIT_NODE_NAME:unhandledElement(reader,element);break;case LVQ_NODE_NAME:unhandledElement(reader,element);break;case REDISTRIBUTION_DELAY_NODE_NAME:unhandledElement(reader,element);break;case SEND_TO_DLA_ON_NO_ROUTE:unhandledElement(reader,element);break;case QUEUES:{final ModelNode queues=parseQueues(reader);operation.get(QUEUE).set(queues);break;}case SUBSYSTEM:break;default :throw ParseUtils.unexpectedElement(reader);} @AT@ 12378 @LENGTH@ 34
---MOV ExpressionStatement@@MethodInvocation:unhandledElement(reader,element) @TO@ SwitchStatement@@switch (element) {case ACCEPTORS:{    final ModelNode acceptors=processAcceptors(reader);    operation.get(ACCEPTOR).set(acceptors);    break;  }case ADDRESS_SETTINGS:{  final ModelNode addressSettings=processAddressSettings(reader);  operation.get(ADDRESS_SETTING).set(addressSettings);  break;}case ASYNC_CONNECTION_EXECUTION_ENABLED:unhandledElement(reader,element);break;case BACKUP:handleElementText(reader,element,operation);break;case BACKUP_CONNECTOR_REF:handleElementText(reader,element,operation);break;case BINDINGS_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(BINDINGS_DIRECTORY).set(directory);break;}case BROADCAST_PERIOD:handleElementText(reader,element,operation);break;case CLUSTERED:handleElementText(reader,element,operation);break;case CLUSTER_PASSWORD:handleElementText(reader,element,operation);break;case CLUSTER_USER:handleElementText(reader,element,operation);break;case CONNECTION_TTL_OVERRIDE:handleElementText(reader,element,operation);break;case CONNECTORS:{final ModelNode connectors=processConnectors(reader);operation.get(CONNECTOR).set(connectors);break;}case CONNECTOR_REF:unhandledElement(reader,element);break;case CREATE_BINDINGS_DIR:handleElementText(reader,element,operation);break;case CREATE_JOURNAL_DIR:handleElementText(reader,element,operation);break;case FILE_DEPLOYMENT_ENABLED:unhandledElement(reader,element);break;case GROUP_ADDRESS:unhandledElement(reader,element);break;case GROUP_PORT:unhandledElement(reader,element);break;case GROUPING_HANDLER:unhandledElement(reader,element);break;case ID_CACHE_SIZE:handleElementText(reader,element,operation);break;case JMX_DOMAIN:handleElementText(reader,element,operation);break;case JMX_MANAGEMENT_ENABLED:handleElementText(reader,element,operation);break;case JOURNAL_BUFFER_SIZE:unhandledElement(reader,element);break;case JOURNAL_BUFFER_TIMEOUT:handleElementText(reader,element,operation);break;case JOURNAL_COMPACT_MIN_FILES:handleElementText(reader,element,operation);break;case JOURNAL_COMPACT_PERCENTAGE:handleElementText(reader,element,operation);break;case JOURNAL_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(JOURNAL_DIRECTORY).set(directory);break;}case JOURNAL_MIN_FILES:{operation.get(JOURNAL_MIN_FILES).set(reader.getElementText());break;}case JOURNAL_SYNC_NON_TRANSACTIONAL:handleElementText(reader,element,operation);break;case JOURNAL_SYNC_TRANSACTIONAL:handleElementText(reader,element,operation);break;case JOURNAL_TYPE:{String journalType=reader.getElementText();if (journalType != null && journalType.length() > 0) {JournalType.valueOf(journalType.trim());operation.get(JOURNAL_TYPE).set(journalType.trim());}break;}case JOURNAL_FILE_SIZE:{String text=reader.getElementText();if (text != null && text.length() > 0) {operation.get(JOURNAL_FILE_SIZE).set(text.trim());}}break;case JOURNAL_MAX_IO:handleElementText(reader,element,operation);break;case LARGE_MESSAGES_DIRECTORY:{final ModelNode dir=parseDirectory(reader);operation.get(LARGE_MESSAGES_DIRECTORY).set(dir);break;}case LOCAL_BIND_ADDRESS:unhandledElement(reader,element);break;case LOCAL_BIND_PORT:unhandledElement(reader,element);break;case LOG_JOURNAL_WRITE_RATE:handleElementText(reader,element,operation);break;case MANAGEMENT_ADDRESS:unhandledElement(reader,element);break;case MANAGEMENT_NOTIFICATION_ADDRESS:unhandledElement(reader,element);break;case MEMORY_MEASURE_INTERVAL:unhandledElement(reader,element);break;case MEMORY_WARNING_THRESHOLD:unhandledElement(reader,element);break;case MESSAGE_COUNTER_ENABLED:unhandledElement(reader,element);break;case MESSAGE_COUNTER_MAX_DAY_HISTORY:unhandledElement(reader,element);break;case MESSAGE_COUNTER_SAMPLE_PERIOD:unhandledElement(reader,element);break;case MESSAGE_EXPIRY_SCAN_PERIOD:unhandledElement(reader,element);break;case MESSAGE_EXPIRY_THREAD_PRIORITY:unhandledElement(reader,element);break;case PAGING_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(PAGING_DIRECTORY).set(directory);break;}case PERF_BLAST_PAGES:unhandledElement(reader,element);break;case PERSIST_DELIVERY_COUNT_BEFORE_DELIVERY:unhandledElement(reader,element);break;case PERSIST_ID_CACHE:unhandledElement(reader,element);break;case PERSISTENCE_ENABLED:{final String value=reader.getElementText();if (value != null && value.length() > 0) {boolean enabled=Boolean.valueOf(value.trim());operation.get(PERSISTENCE_ENABLED).set(enabled);}break;}case REFRESH_TIMEOUT:unhandledElement(reader,element);break;case REMOTING_INTERCEPTORS:unhandledElement(reader,element);break;case RUN_SYNC_SPEED_TEST:unhandledElement(reader,element);break;case SECURITY_ENABLED:unhandledElement(reader,element);break;case SECURITY_INVALIDATION_INTERVAL:unhandledElement(reader,element);break;case SECURITY_SETTINGS:{final ModelNode securitySettings=processSecuritySettings(reader);operation.get(SECURITY_SETTING).set(securitySettings);break;}case SERVER_DUMP_INTERVAL:unhandledElement(reader,element);break;case SHARED_STORE:unhandledElement(reader,element);break;case TRANSACTION_TIMEOUT:unhandledElement(reader,element);break;case TRANSACTION_TIMEOUT_SCAN_PERIOD:unhandledElement(reader,element);break;case WILD_CARD_ROUTING_ENABLED:unhandledElement(reader,element);break;case DEAD_LETTER_ADDRESS_NODE_NAME:unhandledElement(reader,element);break;case EXPIRY_ADDRESS_NODE_NAME:unhandledElement(reader,element);break;case REDELIVERY_DELAY_NODE_NAME:unhandledElement(reader,element);break;case MAX_DELIVERY_ATTEMPTS:unhandledElement(reader,element);break;case MAX_SIZE_BYTES_NODE_NAME:unhandledElement(reader,element);break;case ADDRESS_FULL_MESSAGE_POLICY_NODE_NAME:unhandledElement(reader,element);break;case PAGE_SIZE_BYTES_NODE_NAME:unhandledElement(reader,element);break;case MESSAGE_COUNTER_HISTORY_DAY_LIMIT_NODE_NAME:unhandledElement(reader,element);break;case LVQ_NODE_NAME:unhandledElement(reader,element);break;case REDISTRIBUTION_DELAY_NODE_NAME:unhandledElement(reader,element);break;case SEND_TO_DLA_ON_NO_ROUTE:unhandledElement(reader,element);break;case QUEUES:{final ModelNode queues=parseQueues(reader);operation.get(QUEUE).set(queues);break;}case SUBSYSTEM:break;default :throw ParseUtils.unexpectedElement(reader);} @AT@ 12507 @LENGTH@ 34
---MOV ExpressionStatement@@MethodInvocation:unhandledElement(reader,element) @TO@ SwitchStatement@@switch (element) {case ACCEPTORS:{    final ModelNode acceptors=processAcceptors(reader);    operation.get(ACCEPTOR).set(acceptors);    break;  }case ADDRESS_SETTINGS:{  final ModelNode addressSettings=processAddressSettings(reader);  operation.get(ADDRESS_SETTING).set(addressSettings);  break;}case ASYNC_CONNECTION_EXECUTION_ENABLED:unhandledElement(reader,element);break;case BACKUP:handleElementText(reader,element,operation);break;case BACKUP_CONNECTOR_REF:handleElementText(reader,element,operation);break;case BINDINGS_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(BINDINGS_DIRECTORY).set(directory);break;}case BROADCAST_PERIOD:handleElementText(reader,element,operation);break;case CLUSTERED:handleElementText(reader,element,operation);break;case CLUSTER_PASSWORD:handleElementText(reader,element,operation);break;case CLUSTER_USER:handleElementText(reader,element,operation);break;case CONNECTION_TTL_OVERRIDE:handleElementText(reader,element,operation);break;case CONNECTORS:{final ModelNode connectors=processConnectors(reader);operation.get(CONNECTOR).set(connectors);break;}case CONNECTOR_REF:unhandledElement(reader,element);break;case CREATE_BINDINGS_DIR:handleElementText(reader,element,operation);break;case CREATE_JOURNAL_DIR:handleElementText(reader,element,operation);break;case FILE_DEPLOYMENT_ENABLED:unhandledElement(reader,element);break;case GROUP_ADDRESS:unhandledElement(reader,element);break;case GROUP_PORT:unhandledElement(reader,element);break;case GROUPING_HANDLER:unhandledElement(reader,element);break;case ID_CACHE_SIZE:handleElementText(reader,element,operation);break;case JMX_DOMAIN:handleElementText(reader,element,operation);break;case JMX_MANAGEMENT_ENABLED:handleElementText(reader,element,operation);break;case JOURNAL_BUFFER_SIZE:unhandledElement(reader,element);break;case JOURNAL_BUFFER_TIMEOUT:handleElementText(reader,element,operation);break;case JOURNAL_COMPACT_MIN_FILES:handleElementText(reader,element,operation);break;case JOURNAL_COMPACT_PERCENTAGE:handleElementText(reader,element,operation);break;case JOURNAL_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(JOURNAL_DIRECTORY).set(directory);break;}case JOURNAL_MIN_FILES:{operation.get(JOURNAL_MIN_FILES).set(reader.getElementText());break;}case JOURNAL_SYNC_NON_TRANSACTIONAL:handleElementText(reader,element,operation);break;case JOURNAL_SYNC_TRANSACTIONAL:handleElementText(reader,element,operation);break;case JOURNAL_TYPE:{String journalType=reader.getElementText();if (journalType != null && journalType.length() > 0) {JournalType.valueOf(journalType.trim());operation.get(JOURNAL_TYPE).set(journalType.trim());}break;}case JOURNAL_FILE_SIZE:{String text=reader.getElementText();if (text != null && text.length() > 0) {operation.get(JOURNAL_FILE_SIZE).set(text.trim());}}break;case JOURNAL_MAX_IO:handleElementText(reader,element,operation);break;case LARGE_MESSAGES_DIRECTORY:{final ModelNode dir=parseDirectory(reader);operation.get(LARGE_MESSAGES_DIRECTORY).set(dir);break;}case LOCAL_BIND_ADDRESS:unhandledElement(reader,element);break;case LOCAL_BIND_PORT:unhandledElement(reader,element);break;case LOG_JOURNAL_WRITE_RATE:handleElementText(reader,element,operation);break;case MANAGEMENT_ADDRESS:unhandledElement(reader,element);break;case MANAGEMENT_NOTIFICATION_ADDRESS:unhandledElement(reader,element);break;case MEMORY_MEASURE_INTERVAL:unhandledElement(reader,element);break;case MEMORY_WARNING_THRESHOLD:unhandledElement(reader,element);break;case MESSAGE_COUNTER_ENABLED:unhandledElement(reader,element);break;case MESSAGE_COUNTER_MAX_DAY_HISTORY:unhandledElement(reader,element);break;case MESSAGE_COUNTER_SAMPLE_PERIOD:unhandledElement(reader,element);break;case MESSAGE_EXPIRY_SCAN_PERIOD:unhandledElement(reader,element);break;case MESSAGE_EXPIRY_THREAD_PRIORITY:unhandledElement(reader,element);break;case PAGING_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(PAGING_DIRECTORY).set(directory);break;}case PERF_BLAST_PAGES:unhandledElement(reader,element);break;case PERSIST_DELIVERY_COUNT_BEFORE_DELIVERY:unhandledElement(reader,element);break;case PERSIST_ID_CACHE:unhandledElement(reader,element);break;case PERSISTENCE_ENABLED:{final String value=reader.getElementText();if (value != null && value.length() > 0) {boolean enabled=Boolean.valueOf(value.trim());operation.get(PERSISTENCE_ENABLED).set(enabled);}break;}case REFRESH_TIMEOUT:unhandledElement(reader,element);break;case REMOTING_INTERCEPTORS:unhandledElement(reader,element);break;case RUN_SYNC_SPEED_TEST:unhandledElement(reader,element);break;case SECURITY_ENABLED:unhandledElement(reader,element);break;case SECURITY_INVALIDATION_INTERVAL:unhandledElement(reader,element);break;case SECURITY_SETTINGS:{final ModelNode securitySettings=processSecuritySettings(reader);operation.get(SECURITY_SETTING).set(securitySettings);break;}case SERVER_DUMP_INTERVAL:unhandledElement(reader,element);break;case SHARED_STORE:unhandledElement(reader,element);break;case TRANSACTION_TIMEOUT:unhandledElement(reader,element);break;case TRANSACTION_TIMEOUT_SCAN_PERIOD:unhandledElement(reader,element);break;case WILD_CARD_ROUTING_ENABLED:unhandledElement(reader,element);break;case DEAD_LETTER_ADDRESS_NODE_NAME:unhandledElement(reader,element);break;case EXPIRY_ADDRESS_NODE_NAME:unhandledElement(reader,element);break;case REDELIVERY_DELAY_NODE_NAME:unhandledElement(reader,element);break;case MAX_DELIVERY_ATTEMPTS:unhandledElement(reader,element);break;case MAX_SIZE_BYTES_NODE_NAME:unhandledElement(reader,element);break;case ADDRESS_FULL_MESSAGE_POLICY_NODE_NAME:unhandledElement(reader,element);break;case PAGE_SIZE_BYTES_NODE_NAME:unhandledElement(reader,element);break;case MESSAGE_COUNTER_HISTORY_DAY_LIMIT_NODE_NAME:unhandledElement(reader,element);break;case LVQ_NODE_NAME:unhandledElement(reader,element);break;case REDISTRIBUTION_DELAY_NODE_NAME:unhandledElement(reader,element);break;case SEND_TO_DLA_ON_NO_ROUTE:unhandledElement(reader,element);break;case QUEUES:{final ModelNode queues=parseQueues(reader);operation.get(QUEUE).set(queues);break;}case SUBSYSTEM:break;default :throw ParseUtils.unexpectedElement(reader);} @AT@ 12635 @LENGTH@ 34
---MOV ExpressionStatement@@MethodInvocation:unhandledElement(reader,element) @TO@ SwitchStatement@@switch (element) {case ACCEPTORS:{    final ModelNode acceptors=processAcceptors(reader);    operation.get(ACCEPTOR).set(acceptors);    break;  }case ADDRESS_SETTINGS:{  final ModelNode addressSettings=processAddressSettings(reader);  operation.get(ADDRESS_SETTING).set(addressSettings);  break;}case ASYNC_CONNECTION_EXECUTION_ENABLED:unhandledElement(reader,element);break;case BACKUP:handleElementText(reader,element,operation);break;case BACKUP_CONNECTOR_REF:handleElementText(reader,element,operation);break;case BINDINGS_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(BINDINGS_DIRECTORY).set(directory);break;}case BROADCAST_PERIOD:handleElementText(reader,element,operation);break;case CLUSTERED:handleElementText(reader,element,operation);break;case CLUSTER_PASSWORD:handleElementText(reader,element,operation);break;case CLUSTER_USER:handleElementText(reader,element,operation);break;case CONNECTION_TTL_OVERRIDE:handleElementText(reader,element,operation);break;case CONNECTORS:{final ModelNode connectors=processConnectors(reader);operation.get(CONNECTOR).set(connectors);break;}case CONNECTOR_REF:unhandledElement(reader,element);break;case CREATE_BINDINGS_DIR:handleElementText(reader,element,operation);break;case CREATE_JOURNAL_DIR:handleElementText(reader,element,operation);break;case FILE_DEPLOYMENT_ENABLED:unhandledElement(reader,element);break;case GROUP_ADDRESS:unhandledElement(reader,element);break;case GROUP_PORT:unhandledElement(reader,element);break;case GROUPING_HANDLER:unhandledElement(reader,element);break;case ID_CACHE_SIZE:handleElementText(reader,element,operation);break;case JMX_DOMAIN:handleElementText(reader,element,operation);break;case JMX_MANAGEMENT_ENABLED:handleElementText(reader,element,operation);break;case JOURNAL_BUFFER_SIZE:unhandledElement(reader,element);break;case JOURNAL_BUFFER_TIMEOUT:handleElementText(reader,element,operation);break;case JOURNAL_COMPACT_MIN_FILES:handleElementText(reader,element,operation);break;case JOURNAL_COMPACT_PERCENTAGE:handleElementText(reader,element,operation);break;case JOURNAL_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(JOURNAL_DIRECTORY).set(directory);break;}case JOURNAL_MIN_FILES:{operation.get(JOURNAL_MIN_FILES).set(reader.getElementText());break;}case JOURNAL_SYNC_NON_TRANSACTIONAL:handleElementText(reader,element,operation);break;case JOURNAL_SYNC_TRANSACTIONAL:handleElementText(reader,element,operation);break;case JOURNAL_TYPE:{String journalType=reader.getElementText();if (journalType != null && journalType.length() > 0) {JournalType.valueOf(journalType.trim());operation.get(JOURNAL_TYPE).set(journalType.trim());}break;}case JOURNAL_FILE_SIZE:{String text=reader.getElementText();if (text != null && text.length() > 0) {operation.get(JOURNAL_FILE_SIZE).set(text.trim());}}break;case JOURNAL_MAX_IO:handleElementText(reader,element,operation);break;case LARGE_MESSAGES_DIRECTORY:{final ModelNode dir=parseDirectory(reader);operation.get(LARGE_MESSAGES_DIRECTORY).set(dir);break;}case LOCAL_BIND_ADDRESS:unhandledElement(reader,element);break;case LOCAL_BIND_PORT:unhandledElement(reader,element);break;case LOG_JOURNAL_WRITE_RATE:handleElementText(reader,element,operation);break;case MANAGEMENT_ADDRESS:unhandledElement(reader,element);break;case MANAGEMENT_NOTIFICATION_ADDRESS:unhandledElement(reader,element);break;case MEMORY_MEASURE_INTERVAL:unhandledElement(reader,element);break;case MEMORY_WARNING_THRESHOLD:unhandledElement(reader,element);break;case MESSAGE_COUNTER_ENABLED:unhandledElement(reader,element);break;case MESSAGE_COUNTER_MAX_DAY_HISTORY:unhandledElement(reader,element);break;case MESSAGE_COUNTER_SAMPLE_PERIOD:unhandledElement(reader,element);break;case MESSAGE_EXPIRY_SCAN_PERIOD:unhandledElement(reader,element);break;case MESSAGE_EXPIRY_THREAD_PRIORITY:unhandledElement(reader,element);break;case PAGING_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(PAGING_DIRECTORY).set(directory);break;}case PERF_BLAST_PAGES:unhandledElement(reader,element);break;case PERSIST_DELIVERY_COUNT_BEFORE_DELIVERY:unhandledElement(reader,element);break;case PERSIST_ID_CACHE:unhandledElement(reader,element);break;case PERSISTENCE_ENABLED:{final String value=reader.getElementText();if (value != null && value.length() > 0) {boolean enabled=Boolean.valueOf(value.trim());operation.get(PERSISTENCE_ENABLED).set(enabled);}break;}case REFRESH_TIMEOUT:unhandledElement(reader,element);break;case REMOTING_INTERCEPTORS:unhandledElement(reader,element);break;case RUN_SYNC_SPEED_TEST:unhandledElement(reader,element);break;case SECURITY_ENABLED:unhandledElement(reader,element);break;case SECURITY_INVALIDATION_INTERVAL:unhandledElement(reader,element);break;case SECURITY_SETTINGS:{final ModelNode securitySettings=processSecuritySettings(reader);operation.get(SECURITY_SETTING).set(securitySettings);break;}case SERVER_DUMP_INTERVAL:unhandledElement(reader,element);break;case SHARED_STORE:unhandledElement(reader,element);break;case TRANSACTION_TIMEOUT:unhandledElement(reader,element);break;case TRANSACTION_TIMEOUT_SCAN_PERIOD:unhandledElement(reader,element);break;case WILD_CARD_ROUTING_ENABLED:unhandledElement(reader,element);break;case DEAD_LETTER_ADDRESS_NODE_NAME:unhandledElement(reader,element);break;case EXPIRY_ADDRESS_NODE_NAME:unhandledElement(reader,element);break;case REDELIVERY_DELAY_NODE_NAME:unhandledElement(reader,element);break;case MAX_DELIVERY_ATTEMPTS:unhandledElement(reader,element);break;case MAX_SIZE_BYTES_NODE_NAME:unhandledElement(reader,element);break;case ADDRESS_FULL_MESSAGE_POLICY_NODE_NAME:unhandledElement(reader,element);break;case PAGE_SIZE_BYTES_NODE_NAME:unhandledElement(reader,element);break;case MESSAGE_COUNTER_HISTORY_DAY_LIMIT_NODE_NAME:unhandledElement(reader,element);break;case LVQ_NODE_NAME:unhandledElement(reader,element);break;case REDISTRIBUTION_DELAY_NODE_NAME:unhandledElement(reader,element);break;case SEND_TO_DLA_ON_NO_ROUTE:unhandledElement(reader,element);break;case QUEUES:{final ModelNode queues=parseQueues(reader);operation.get(QUEUE).set(queues);break;}case SUBSYSTEM:break;default :throw ParseUtils.unexpectedElement(reader);} @AT@ 12771 @LENGTH@ 34
---MOV ExpressionStatement@@MethodInvocation:unhandledElement(reader,element) @TO@ SwitchStatement@@switch (element) {case ACCEPTORS:{    final ModelNode acceptors=processAcceptors(reader);    operation.get(ACCEPTOR).set(acceptors);    break;  }case ADDRESS_SETTINGS:{  final ModelNode addressSettings=processAddressSettings(reader);  operation.get(ADDRESS_SETTING).set(addressSettings);  break;}case ASYNC_CONNECTION_EXECUTION_ENABLED:unhandledElement(reader,element);break;case BACKUP:handleElementText(reader,element,operation);break;case BACKUP_CONNECTOR_REF:handleElementText(reader,element,operation);break;case BINDINGS_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(BINDINGS_DIRECTORY).set(directory);break;}case BROADCAST_PERIOD:handleElementText(reader,element,operation);break;case CLUSTERED:handleElementText(reader,element,operation);break;case CLUSTER_PASSWORD:handleElementText(reader,element,operation);break;case CLUSTER_USER:handleElementText(reader,element,operation);break;case CONNECTION_TTL_OVERRIDE:handleElementText(reader,element,operation);break;case CONNECTORS:{final ModelNode connectors=processConnectors(reader);operation.get(CONNECTOR).set(connectors);break;}case CONNECTOR_REF:unhandledElement(reader,element);break;case CREATE_BINDINGS_DIR:handleElementText(reader,element,operation);break;case CREATE_JOURNAL_DIR:handleElementText(reader,element,operation);break;case FILE_DEPLOYMENT_ENABLED:unhandledElement(reader,element);break;case GROUP_ADDRESS:unhandledElement(reader,element);break;case GROUP_PORT:unhandledElement(reader,element);break;case GROUPING_HANDLER:unhandledElement(reader,element);break;case ID_CACHE_SIZE:handleElementText(reader,element,operation);break;case JMX_DOMAIN:handleElementText(reader,element,operation);break;case JMX_MANAGEMENT_ENABLED:handleElementText(reader,element,operation);break;case JOURNAL_BUFFER_SIZE:unhandledElement(reader,element);break;case JOURNAL_BUFFER_TIMEOUT:handleElementText(reader,element,operation);break;case JOURNAL_COMPACT_MIN_FILES:handleElementText(reader,element,operation);break;case JOURNAL_COMPACT_PERCENTAGE:handleElementText(reader,element,operation);break;case JOURNAL_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(JOURNAL_DIRECTORY).set(directory);break;}case JOURNAL_MIN_FILES:{operation.get(JOURNAL_MIN_FILES).set(reader.getElementText());break;}case JOURNAL_SYNC_NON_TRANSACTIONAL:handleElementText(reader,element,operation);break;case JOURNAL_SYNC_TRANSACTIONAL:handleElementText(reader,element,operation);break;case JOURNAL_TYPE:{String journalType=reader.getElementText();if (journalType != null && journalType.length() > 0) {JournalType.valueOf(journalType.trim());operation.get(JOURNAL_TYPE).set(journalType.trim());}break;}case JOURNAL_FILE_SIZE:{String text=reader.getElementText();if (text != null && text.length() > 0) {operation.get(JOURNAL_FILE_SIZE).set(text.trim());}}break;case JOURNAL_MAX_IO:handleElementText(reader,element,operation);break;case LARGE_MESSAGES_DIRECTORY:{final ModelNode dir=parseDirectory(reader);operation.get(LARGE_MESSAGES_DIRECTORY).set(dir);break;}case LOCAL_BIND_ADDRESS:unhandledElement(reader,element);break;case LOCAL_BIND_PORT:unhandledElement(reader,element);break;case LOG_JOURNAL_WRITE_RATE:handleElementText(reader,element,operation);break;case MANAGEMENT_ADDRESS:unhandledElement(reader,element);break;case MANAGEMENT_NOTIFICATION_ADDRESS:unhandledElement(reader,element);break;case MEMORY_MEASURE_INTERVAL:unhandledElement(reader,element);break;case MEMORY_WARNING_THRESHOLD:unhandledElement(reader,element);break;case MESSAGE_COUNTER_ENABLED:unhandledElement(reader,element);break;case MESSAGE_COUNTER_MAX_DAY_HISTORY:unhandledElement(reader,element);break;case MESSAGE_COUNTER_SAMPLE_PERIOD:unhandledElement(reader,element);break;case MESSAGE_EXPIRY_SCAN_PERIOD:unhandledElement(reader,element);break;case MESSAGE_EXPIRY_THREAD_PRIORITY:unhandledElement(reader,element);break;case PAGING_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(PAGING_DIRECTORY).set(directory);break;}case PERF_BLAST_PAGES:unhandledElement(reader,element);break;case PERSIST_DELIVERY_COUNT_BEFORE_DELIVERY:unhandledElement(reader,element);break;case PERSIST_ID_CACHE:unhandledElement(reader,element);break;case PERSISTENCE_ENABLED:{final String value=reader.getElementText();if (value != null && value.length() > 0) {boolean enabled=Boolean.valueOf(value.trim());operation.get(PERSISTENCE_ENABLED).set(enabled);}break;}case REFRESH_TIMEOUT:unhandledElement(reader,element);break;case REMOTING_INTERCEPTORS:unhandledElement(reader,element);break;case RUN_SYNC_SPEED_TEST:unhandledElement(reader,element);break;case SECURITY_ENABLED:unhandledElement(reader,element);break;case SECURITY_INVALIDATION_INTERVAL:unhandledElement(reader,element);break;case SECURITY_SETTINGS:{final ModelNode securitySettings=processSecuritySettings(reader);operation.get(SECURITY_SETTING).set(securitySettings);break;}case SERVER_DUMP_INTERVAL:unhandledElement(reader,element);break;case SHARED_STORE:unhandledElement(reader,element);break;case TRANSACTION_TIMEOUT:unhandledElement(reader,element);break;case TRANSACTION_TIMEOUT_SCAN_PERIOD:unhandledElement(reader,element);break;case WILD_CARD_ROUTING_ENABLED:unhandledElement(reader,element);break;case DEAD_LETTER_ADDRESS_NODE_NAME:unhandledElement(reader,element);break;case EXPIRY_ADDRESS_NODE_NAME:unhandledElement(reader,element);break;case REDELIVERY_DELAY_NODE_NAME:unhandledElement(reader,element);break;case MAX_DELIVERY_ATTEMPTS:unhandledElement(reader,element);break;case MAX_SIZE_BYTES_NODE_NAME:unhandledElement(reader,element);break;case ADDRESS_FULL_MESSAGE_POLICY_NODE_NAME:unhandledElement(reader,element);break;case PAGE_SIZE_BYTES_NODE_NAME:unhandledElement(reader,element);break;case MESSAGE_COUNTER_HISTORY_DAY_LIMIT_NODE_NAME:unhandledElement(reader,element);break;case LVQ_NODE_NAME:unhandledElement(reader,element);break;case REDISTRIBUTION_DELAY_NODE_NAME:unhandledElement(reader,element);break;case SEND_TO_DLA_ON_NO_ROUTE:unhandledElement(reader,element);break;case QUEUES:{final ModelNode queues=parseQueues(reader);operation.get(QUEUE).set(queues);break;}case SUBSYSTEM:break;default :throw ParseUtils.unexpectedElement(reader);} @AT@ 12905 @LENGTH@ 34
---MOV ExpressionStatement@@MethodInvocation:unhandledElement(reader,element) @TO@ SwitchStatement@@switch (element) {case ACCEPTORS:{    final ModelNode acceptors=processAcceptors(reader);    operation.get(ACCEPTOR).set(acceptors);    break;  }case ADDRESS_SETTINGS:{  final ModelNode addressSettings=processAddressSettings(reader);  operation.get(ADDRESS_SETTING).set(addressSettings);  break;}case ASYNC_CONNECTION_EXECUTION_ENABLED:unhandledElement(reader,element);break;case BACKUP:handleElementText(reader,element,operation);break;case BACKUP_CONNECTOR_REF:handleElementText(reader,element,operation);break;case BINDINGS_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(BINDINGS_DIRECTORY).set(directory);break;}case BROADCAST_PERIOD:handleElementText(reader,element,operation);break;case CLUSTERED:handleElementText(reader,element,operation);break;case CLUSTER_PASSWORD:handleElementText(reader,element,operation);break;case CLUSTER_USER:handleElementText(reader,element,operation);break;case CONNECTION_TTL_OVERRIDE:handleElementText(reader,element,operation);break;case CONNECTORS:{final ModelNode connectors=processConnectors(reader);operation.get(CONNECTOR).set(connectors);break;}case CONNECTOR_REF:unhandledElement(reader,element);break;case CREATE_BINDINGS_DIR:handleElementText(reader,element,operation);break;case CREATE_JOURNAL_DIR:handleElementText(reader,element,operation);break;case FILE_DEPLOYMENT_ENABLED:unhandledElement(reader,element);break;case GROUP_ADDRESS:unhandledElement(reader,element);break;case GROUP_PORT:unhandledElement(reader,element);break;case GROUPING_HANDLER:unhandledElement(reader,element);break;case ID_CACHE_SIZE:handleElementText(reader,element,operation);break;case JMX_DOMAIN:handleElementText(reader,element,operation);break;case JMX_MANAGEMENT_ENABLED:handleElementText(reader,element,operation);break;case JOURNAL_BUFFER_SIZE:unhandledElement(reader,element);break;case JOURNAL_BUFFER_TIMEOUT:handleElementText(reader,element,operation);break;case JOURNAL_COMPACT_MIN_FILES:handleElementText(reader,element,operation);break;case JOURNAL_COMPACT_PERCENTAGE:handleElementText(reader,element,operation);break;case JOURNAL_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(JOURNAL_DIRECTORY).set(directory);break;}case JOURNAL_MIN_FILES:{operation.get(JOURNAL_MIN_FILES).set(reader.getElementText());break;}case JOURNAL_SYNC_NON_TRANSACTIONAL:handleElementText(reader,element,operation);break;case JOURNAL_SYNC_TRANSACTIONAL:handleElementText(reader,element,operation);break;case JOURNAL_TYPE:{String journalType=reader.getElementText();if (journalType != null && journalType.length() > 0) {JournalType.valueOf(journalType.trim());operation.get(JOURNAL_TYPE).set(journalType.trim());}break;}case JOURNAL_FILE_SIZE:{String text=reader.getElementText();if (text != null && text.length() > 0) {operation.get(JOURNAL_FILE_SIZE).set(text.trim());}}break;case JOURNAL_MAX_IO:handleElementText(reader,element,operation);break;case LARGE_MESSAGES_DIRECTORY:{final ModelNode dir=parseDirectory(reader);operation.get(LARGE_MESSAGES_DIRECTORY).set(dir);break;}case LOCAL_BIND_ADDRESS:unhandledElement(reader,element);break;case LOCAL_BIND_PORT:unhandledElement(reader,element);break;case LOG_JOURNAL_WRITE_RATE:handleElementText(reader,element,operation);break;case MANAGEMENT_ADDRESS:unhandledElement(reader,element);break;case MANAGEMENT_NOTIFICATION_ADDRESS:unhandledElement(reader,element);break;case MEMORY_MEASURE_INTERVAL:unhandledElement(reader,element);break;case MEMORY_WARNING_THRESHOLD:unhandledElement(reader,element);break;case MESSAGE_COUNTER_ENABLED:unhandledElement(reader,element);break;case MESSAGE_COUNTER_MAX_DAY_HISTORY:unhandledElement(reader,element);break;case MESSAGE_COUNTER_SAMPLE_PERIOD:unhandledElement(reader,element);break;case MESSAGE_EXPIRY_SCAN_PERIOD:unhandledElement(reader,element);break;case MESSAGE_EXPIRY_THREAD_PRIORITY:unhandledElement(reader,element);break;case PAGING_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(PAGING_DIRECTORY).set(directory);break;}case PERF_BLAST_PAGES:unhandledElement(reader,element);break;case PERSIST_DELIVERY_COUNT_BEFORE_DELIVERY:unhandledElement(reader,element);break;case PERSIST_ID_CACHE:unhandledElement(reader,element);break;case PERSISTENCE_ENABLED:{final String value=reader.getElementText();if (value != null && value.length() > 0) {boolean enabled=Boolean.valueOf(value.trim());operation.get(PERSISTENCE_ENABLED).set(enabled);}break;}case REFRESH_TIMEOUT:unhandledElement(reader,element);break;case REMOTING_INTERCEPTORS:unhandledElement(reader,element);break;case RUN_SYNC_SPEED_TEST:unhandledElement(reader,element);break;case SECURITY_ENABLED:unhandledElement(reader,element);break;case SECURITY_INVALIDATION_INTERVAL:unhandledElement(reader,element);break;case SECURITY_SETTINGS:{final ModelNode securitySettings=processSecuritySettings(reader);operation.get(SECURITY_SETTING).set(securitySettings);break;}case SERVER_DUMP_INTERVAL:unhandledElement(reader,element);break;case SHARED_STORE:unhandledElement(reader,element);break;case TRANSACTION_TIMEOUT:unhandledElement(reader,element);break;case TRANSACTION_TIMEOUT_SCAN_PERIOD:unhandledElement(reader,element);break;case WILD_CARD_ROUTING_ENABLED:unhandledElement(reader,element);break;case DEAD_LETTER_ADDRESS_NODE_NAME:unhandledElement(reader,element);break;case EXPIRY_ADDRESS_NODE_NAME:unhandledElement(reader,element);break;case REDELIVERY_DELAY_NODE_NAME:unhandledElement(reader,element);break;case MAX_DELIVERY_ATTEMPTS:unhandledElement(reader,element);break;case MAX_SIZE_BYTES_NODE_NAME:unhandledElement(reader,element);break;case ADDRESS_FULL_MESSAGE_POLICY_NODE_NAME:unhandledElement(reader,element);break;case PAGE_SIZE_BYTES_NODE_NAME:unhandledElement(reader,element);break;case MESSAGE_COUNTER_HISTORY_DAY_LIMIT_NODE_NAME:unhandledElement(reader,element);break;case LVQ_NODE_NAME:unhandledElement(reader,element);break;case REDISTRIBUTION_DELAY_NODE_NAME:unhandledElement(reader,element);break;case SEND_TO_DLA_ON_NO_ROUTE:unhandledElement(reader,element);break;case QUEUES:{final ModelNode queues=parseQueues(reader);operation.get(QUEUE).set(queues);break;}case SUBSYSTEM:break;default :throw ParseUtils.unexpectedElement(reader);} @AT@ 13036 @LENGTH@ 34
---MOV ExpressionStatement@@MethodInvocation:unhandledElement(reader,element) @TO@ SwitchStatement@@switch (element) {case ACCEPTORS:{    final ModelNode acceptors=processAcceptors(reader);    operation.get(ACCEPTOR).set(acceptors);    break;  }case ADDRESS_SETTINGS:{  final ModelNode addressSettings=processAddressSettings(reader);  operation.get(ADDRESS_SETTING).set(addressSettings);  break;}case ASYNC_CONNECTION_EXECUTION_ENABLED:unhandledElement(reader,element);break;case BACKUP:handleElementText(reader,element,operation);break;case BACKUP_CONNECTOR_REF:handleElementText(reader,element,operation);break;case BINDINGS_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(BINDINGS_DIRECTORY).set(directory);break;}case BROADCAST_PERIOD:handleElementText(reader,element,operation);break;case CLUSTERED:handleElementText(reader,element,operation);break;case CLUSTER_PASSWORD:handleElementText(reader,element,operation);break;case CLUSTER_USER:handleElementText(reader,element,operation);break;case CONNECTION_TTL_OVERRIDE:handleElementText(reader,element,operation);break;case CONNECTORS:{final ModelNode connectors=processConnectors(reader);operation.get(CONNECTOR).set(connectors);break;}case CONNECTOR_REF:unhandledElement(reader,element);break;case CREATE_BINDINGS_DIR:handleElementText(reader,element,operation);break;case CREATE_JOURNAL_DIR:handleElementText(reader,element,operation);break;case FILE_DEPLOYMENT_ENABLED:unhandledElement(reader,element);break;case GROUP_ADDRESS:unhandledElement(reader,element);break;case GROUP_PORT:unhandledElement(reader,element);break;case GROUPING_HANDLER:unhandledElement(reader,element);break;case ID_CACHE_SIZE:handleElementText(reader,element,operation);break;case JMX_DOMAIN:handleElementText(reader,element,operation);break;case JMX_MANAGEMENT_ENABLED:handleElementText(reader,element,operation);break;case JOURNAL_BUFFER_SIZE:unhandledElement(reader,element);break;case JOURNAL_BUFFER_TIMEOUT:handleElementText(reader,element,operation);break;case JOURNAL_COMPACT_MIN_FILES:handleElementText(reader,element,operation);break;case JOURNAL_COMPACT_PERCENTAGE:handleElementText(reader,element,operation);break;case JOURNAL_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(JOURNAL_DIRECTORY).set(directory);break;}case JOURNAL_MIN_FILES:{operation.get(JOURNAL_MIN_FILES).set(reader.getElementText());break;}case JOURNAL_SYNC_NON_TRANSACTIONAL:handleElementText(reader,element,operation);break;case JOURNAL_SYNC_TRANSACTIONAL:handleElementText(reader,element,operation);break;case JOURNAL_TYPE:{String journalType=reader.getElementText();if (journalType != null && journalType.length() > 0) {JournalType.valueOf(journalType.trim());operation.get(JOURNAL_TYPE).set(journalType.trim());}break;}case JOURNAL_FILE_SIZE:{String text=reader.getElementText();if (text != null && text.length() > 0) {operation.get(JOURNAL_FILE_SIZE).set(text.trim());}}break;case JOURNAL_MAX_IO:handleElementText(reader,element,operation);break;case LARGE_MESSAGES_DIRECTORY:{final ModelNode dir=parseDirectory(reader);operation.get(LARGE_MESSAGES_DIRECTORY).set(dir);break;}case LOCAL_BIND_ADDRESS:unhandledElement(reader,element);break;case LOCAL_BIND_PORT:unhandledElement(reader,element);break;case LOG_JOURNAL_WRITE_RATE:handleElementText(reader,element,operation);break;case MANAGEMENT_ADDRESS:unhandledElement(reader,element);break;case MANAGEMENT_NOTIFICATION_ADDRESS:unhandledElement(reader,element);break;case MEMORY_MEASURE_INTERVAL:unhandledElement(reader,element);break;case MEMORY_WARNING_THRESHOLD:unhandledElement(reader,element);break;case MESSAGE_COUNTER_ENABLED:unhandledElement(reader,element);break;case MESSAGE_COUNTER_MAX_DAY_HISTORY:unhandledElement(reader,element);break;case MESSAGE_COUNTER_SAMPLE_PERIOD:unhandledElement(reader,element);break;case MESSAGE_EXPIRY_SCAN_PERIOD:unhandledElement(reader,element);break;case MESSAGE_EXPIRY_THREAD_PRIORITY:unhandledElement(reader,element);break;case PAGING_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(PAGING_DIRECTORY).set(directory);break;}case PERF_BLAST_PAGES:unhandledElement(reader,element);break;case PERSIST_DELIVERY_COUNT_BEFORE_DELIVERY:unhandledElement(reader,element);break;case PERSIST_ID_CACHE:unhandledElement(reader,element);break;case PERSISTENCE_ENABLED:{final String value=reader.getElementText();if (value != null && value.length() > 0) {boolean enabled=Boolean.valueOf(value.trim());operation.get(PERSISTENCE_ENABLED).set(enabled);}break;}case REFRESH_TIMEOUT:unhandledElement(reader,element);break;case REMOTING_INTERCEPTORS:unhandledElement(reader,element);break;case RUN_SYNC_SPEED_TEST:unhandledElement(reader,element);break;case SECURITY_ENABLED:unhandledElement(reader,element);break;case SECURITY_INVALIDATION_INTERVAL:unhandledElement(reader,element);break;case SECURITY_SETTINGS:{final ModelNode securitySettings=processSecuritySettings(reader);operation.get(SECURITY_SETTING).set(securitySettings);break;}case SERVER_DUMP_INTERVAL:unhandledElement(reader,element);break;case SHARED_STORE:unhandledElement(reader,element);break;case TRANSACTION_TIMEOUT:unhandledElement(reader,element);break;case TRANSACTION_TIMEOUT_SCAN_PERIOD:unhandledElement(reader,element);break;case WILD_CARD_ROUTING_ENABLED:unhandledElement(reader,element);break;case DEAD_LETTER_ADDRESS_NODE_NAME:unhandledElement(reader,element);break;case EXPIRY_ADDRESS_NODE_NAME:unhandledElement(reader,element);break;case REDELIVERY_DELAY_NODE_NAME:unhandledElement(reader,element);break;case MAX_DELIVERY_ATTEMPTS:unhandledElement(reader,element);break;case MAX_SIZE_BYTES_NODE_NAME:unhandledElement(reader,element);break;case ADDRESS_FULL_MESSAGE_POLICY_NODE_NAME:unhandledElement(reader,element);break;case PAGE_SIZE_BYTES_NODE_NAME:unhandledElement(reader,element);break;case MESSAGE_COUNTER_HISTORY_DAY_LIMIT_NODE_NAME:unhandledElement(reader,element);break;case LVQ_NODE_NAME:unhandledElement(reader,element);break;case REDISTRIBUTION_DELAY_NODE_NAME:unhandledElement(reader,element);break;case SEND_TO_DLA_ON_NO_ROUTE:unhandledElement(reader,element);break;case QUEUES:{final ModelNode queues=parseQueues(reader);operation.get(QUEUE).set(queues);break;}case SUBSYSTEM:break;default :throw ParseUtils.unexpectedElement(reader);} @AT@ 13171 @LENGTH@ 34
---MOV ExpressionStatement@@MethodInvocation:unhandledElement(reader,element) @TO@ SwitchStatement@@switch (element) {case ACCEPTORS:{    final ModelNode acceptors=processAcceptors(reader);    operation.get(ACCEPTOR).set(acceptors);    break;  }case ADDRESS_SETTINGS:{  final ModelNode addressSettings=processAddressSettings(reader);  operation.get(ADDRESS_SETTING).set(addressSettings);  break;}case ASYNC_CONNECTION_EXECUTION_ENABLED:unhandledElement(reader,element);break;case BACKUP:handleElementText(reader,element,operation);break;case BACKUP_CONNECTOR_REF:handleElementText(reader,element,operation);break;case BINDINGS_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(BINDINGS_DIRECTORY).set(directory);break;}case BROADCAST_PERIOD:handleElementText(reader,element,operation);break;case CLUSTERED:handleElementText(reader,element,operation);break;case CLUSTER_PASSWORD:handleElementText(reader,element,operation);break;case CLUSTER_USER:handleElementText(reader,element,operation);break;case CONNECTION_TTL_OVERRIDE:handleElementText(reader,element,operation);break;case CONNECTORS:{final ModelNode connectors=processConnectors(reader);operation.get(CONNECTOR).set(connectors);break;}case CONNECTOR_REF:unhandledElement(reader,element);break;case CREATE_BINDINGS_DIR:handleElementText(reader,element,operation);break;case CREATE_JOURNAL_DIR:handleElementText(reader,element,operation);break;case FILE_DEPLOYMENT_ENABLED:unhandledElement(reader,element);break;case GROUP_ADDRESS:unhandledElement(reader,element);break;case GROUP_PORT:unhandledElement(reader,element);break;case GROUPING_HANDLER:unhandledElement(reader,element);break;case ID_CACHE_SIZE:handleElementText(reader,element,operation);break;case JMX_DOMAIN:handleElementText(reader,element,operation);break;case JMX_MANAGEMENT_ENABLED:handleElementText(reader,element,operation);break;case JOURNAL_BUFFER_SIZE:unhandledElement(reader,element);break;case JOURNAL_BUFFER_TIMEOUT:handleElementText(reader,element,operation);break;case JOURNAL_COMPACT_MIN_FILES:handleElementText(reader,element,operation);break;case JOURNAL_COMPACT_PERCENTAGE:handleElementText(reader,element,operation);break;case JOURNAL_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(JOURNAL_DIRECTORY).set(directory);break;}case JOURNAL_MIN_FILES:{operation.get(JOURNAL_MIN_FILES).set(reader.getElementText());break;}case JOURNAL_SYNC_NON_TRANSACTIONAL:handleElementText(reader,element,operation);break;case JOURNAL_SYNC_TRANSACTIONAL:handleElementText(reader,element,operation);break;case JOURNAL_TYPE:{String journalType=reader.getElementText();if (journalType != null && journalType.length() > 0) {JournalType.valueOf(journalType.trim());operation.get(JOURNAL_TYPE).set(journalType.trim());}break;}case JOURNAL_FILE_SIZE:{String text=reader.getElementText();if (text != null && text.length() > 0) {operation.get(JOURNAL_FILE_SIZE).set(text.trim());}}break;case JOURNAL_MAX_IO:handleElementText(reader,element,operation);break;case LARGE_MESSAGES_DIRECTORY:{final ModelNode dir=parseDirectory(reader);operation.get(LARGE_MESSAGES_DIRECTORY).set(dir);break;}case LOCAL_BIND_ADDRESS:unhandledElement(reader,element);break;case LOCAL_BIND_PORT:unhandledElement(reader,element);break;case LOG_JOURNAL_WRITE_RATE:handleElementText(reader,element,operation);break;case MANAGEMENT_ADDRESS:unhandledElement(reader,element);break;case MANAGEMENT_NOTIFICATION_ADDRESS:unhandledElement(reader,element);break;case MEMORY_MEASURE_INTERVAL:unhandledElement(reader,element);break;case MEMORY_WARNING_THRESHOLD:unhandledElement(reader,element);break;case MESSAGE_COUNTER_ENABLED:unhandledElement(reader,element);break;case MESSAGE_COUNTER_MAX_DAY_HISTORY:unhandledElement(reader,element);break;case MESSAGE_COUNTER_SAMPLE_PERIOD:unhandledElement(reader,element);break;case MESSAGE_EXPIRY_SCAN_PERIOD:unhandledElement(reader,element);break;case MESSAGE_EXPIRY_THREAD_PRIORITY:unhandledElement(reader,element);break;case PAGING_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(PAGING_DIRECTORY).set(directory);break;}case PERF_BLAST_PAGES:unhandledElement(reader,element);break;case PERSIST_DELIVERY_COUNT_BEFORE_DELIVERY:unhandledElement(reader,element);break;case PERSIST_ID_CACHE:unhandledElement(reader,element);break;case PERSISTENCE_ENABLED:{final String value=reader.getElementText();if (value != null && value.length() > 0) {boolean enabled=Boolean.valueOf(value.trim());operation.get(PERSISTENCE_ENABLED).set(enabled);}break;}case REFRESH_TIMEOUT:unhandledElement(reader,element);break;case REMOTING_INTERCEPTORS:unhandledElement(reader,element);break;case RUN_SYNC_SPEED_TEST:unhandledElement(reader,element);break;case SECURITY_ENABLED:unhandledElement(reader,element);break;case SECURITY_INVALIDATION_INTERVAL:unhandledElement(reader,element);break;case SECURITY_SETTINGS:{final ModelNode securitySettings=processSecuritySettings(reader);operation.get(SECURITY_SETTING).set(securitySettings);break;}case SERVER_DUMP_INTERVAL:unhandledElement(reader,element);break;case SHARED_STORE:unhandledElement(reader,element);break;case TRANSACTION_TIMEOUT:unhandledElement(reader,element);break;case TRANSACTION_TIMEOUT_SCAN_PERIOD:unhandledElement(reader,element);break;case WILD_CARD_ROUTING_ENABLED:unhandledElement(reader,element);break;case DEAD_LETTER_ADDRESS_NODE_NAME:unhandledElement(reader,element);break;case EXPIRY_ADDRESS_NODE_NAME:unhandledElement(reader,element);break;case REDELIVERY_DELAY_NODE_NAME:unhandledElement(reader,element);break;case MAX_DELIVERY_ATTEMPTS:unhandledElement(reader,element);break;case MAX_SIZE_BYTES_NODE_NAME:unhandledElement(reader,element);break;case ADDRESS_FULL_MESSAGE_POLICY_NODE_NAME:unhandledElement(reader,element);break;case PAGE_SIZE_BYTES_NODE_NAME:unhandledElement(reader,element);break;case MESSAGE_COUNTER_HISTORY_DAY_LIMIT_NODE_NAME:unhandledElement(reader,element);break;case LVQ_NODE_NAME:unhandledElement(reader,element);break;case REDISTRIBUTION_DELAY_NODE_NAME:unhandledElement(reader,element);break;case SEND_TO_DLA_ON_NO_ROUTE:unhandledElement(reader,element);break;case QUEUES:{final ModelNode queues=parseQueues(reader);operation.get(QUEUE).set(queues);break;}case SUBSYSTEM:break;default :throw ParseUtils.unexpectedElement(reader);} @AT@ 13502 @LENGTH@ 34
---MOV ExpressionStatement@@MethodInvocation:unhandledElement(reader,element) @TO@ SwitchStatement@@switch (element) {case ACCEPTORS:{    final ModelNode acceptors=processAcceptors(reader);    operation.get(ACCEPTOR).set(acceptors);    break;  }case ADDRESS_SETTINGS:{  final ModelNode addressSettings=processAddressSettings(reader);  operation.get(ADDRESS_SETTING).set(addressSettings);  break;}case ASYNC_CONNECTION_EXECUTION_ENABLED:unhandledElement(reader,element);break;case BACKUP:handleElementText(reader,element,operation);break;case BACKUP_CONNECTOR_REF:handleElementText(reader,element,operation);break;case BINDINGS_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(BINDINGS_DIRECTORY).set(directory);break;}case BROADCAST_PERIOD:handleElementText(reader,element,operation);break;case CLUSTERED:handleElementText(reader,element,operation);break;case CLUSTER_PASSWORD:handleElementText(reader,element,operation);break;case CLUSTER_USER:handleElementText(reader,element,operation);break;case CONNECTION_TTL_OVERRIDE:handleElementText(reader,element,operation);break;case CONNECTORS:{final ModelNode connectors=processConnectors(reader);operation.get(CONNECTOR).set(connectors);break;}case CONNECTOR_REF:unhandledElement(reader,element);break;case CREATE_BINDINGS_DIR:handleElementText(reader,element,operation);break;case CREATE_JOURNAL_DIR:handleElementText(reader,element,operation);break;case FILE_DEPLOYMENT_ENABLED:unhandledElement(reader,element);break;case GROUP_ADDRESS:unhandledElement(reader,element);break;case GROUP_PORT:unhandledElement(reader,element);break;case GROUPING_HANDLER:unhandledElement(reader,element);break;case ID_CACHE_SIZE:handleElementText(reader,element,operation);break;case JMX_DOMAIN:handleElementText(reader,element,operation);break;case JMX_MANAGEMENT_ENABLED:handleElementText(reader,element,operation);break;case JOURNAL_BUFFER_SIZE:unhandledElement(reader,element);break;case JOURNAL_BUFFER_TIMEOUT:handleElementText(reader,element,operation);break;case JOURNAL_COMPACT_MIN_FILES:handleElementText(reader,element,operation);break;case JOURNAL_COMPACT_PERCENTAGE:handleElementText(reader,element,operation);break;case JOURNAL_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(JOURNAL_DIRECTORY).set(directory);break;}case JOURNAL_MIN_FILES:{operation.get(JOURNAL_MIN_FILES).set(reader.getElementText());break;}case JOURNAL_SYNC_NON_TRANSACTIONAL:handleElementText(reader,element,operation);break;case JOURNAL_SYNC_TRANSACTIONAL:handleElementText(reader,element,operation);break;case JOURNAL_TYPE:{String journalType=reader.getElementText();if (journalType != null && journalType.length() > 0) {JournalType.valueOf(journalType.trim());operation.get(JOURNAL_TYPE).set(journalType.trim());}break;}case JOURNAL_FILE_SIZE:{String text=reader.getElementText();if (text != null && text.length() > 0) {operation.get(JOURNAL_FILE_SIZE).set(text.trim());}}break;case JOURNAL_MAX_IO:handleElementText(reader,element,operation);break;case LARGE_MESSAGES_DIRECTORY:{final ModelNode dir=parseDirectory(reader);operation.get(LARGE_MESSAGES_DIRECTORY).set(dir);break;}case LOCAL_BIND_ADDRESS:unhandledElement(reader,element);break;case LOCAL_BIND_PORT:unhandledElement(reader,element);break;case LOG_JOURNAL_WRITE_RATE:handleElementText(reader,element,operation);break;case MANAGEMENT_ADDRESS:unhandledElement(reader,element);break;case MANAGEMENT_NOTIFICATION_ADDRESS:unhandledElement(reader,element);break;case MEMORY_MEASURE_INTERVAL:unhandledElement(reader,element);break;case MEMORY_WARNING_THRESHOLD:unhandledElement(reader,element);break;case MESSAGE_COUNTER_ENABLED:unhandledElement(reader,element);break;case MESSAGE_COUNTER_MAX_DAY_HISTORY:unhandledElement(reader,element);break;case MESSAGE_COUNTER_SAMPLE_PERIOD:unhandledElement(reader,element);break;case MESSAGE_EXPIRY_SCAN_PERIOD:unhandledElement(reader,element);break;case MESSAGE_EXPIRY_THREAD_PRIORITY:unhandledElement(reader,element);break;case PAGING_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(PAGING_DIRECTORY).set(directory);break;}case PERF_BLAST_PAGES:unhandledElement(reader,element);break;case PERSIST_DELIVERY_COUNT_BEFORE_DELIVERY:unhandledElement(reader,element);break;case PERSIST_ID_CACHE:unhandledElement(reader,element);break;case PERSISTENCE_ENABLED:{final String value=reader.getElementText();if (value != null && value.length() > 0) {boolean enabled=Boolean.valueOf(value.trim());operation.get(PERSISTENCE_ENABLED).set(enabled);}break;}case REFRESH_TIMEOUT:unhandledElement(reader,element);break;case REMOTING_INTERCEPTORS:unhandledElement(reader,element);break;case RUN_SYNC_SPEED_TEST:unhandledElement(reader,element);break;case SECURITY_ENABLED:unhandledElement(reader,element);break;case SECURITY_INVALIDATION_INTERVAL:unhandledElement(reader,element);break;case SECURITY_SETTINGS:{final ModelNode securitySettings=processSecuritySettings(reader);operation.get(SECURITY_SETTING).set(securitySettings);break;}case SERVER_DUMP_INTERVAL:unhandledElement(reader,element);break;case SHARED_STORE:unhandledElement(reader,element);break;case TRANSACTION_TIMEOUT:unhandledElement(reader,element);break;case TRANSACTION_TIMEOUT_SCAN_PERIOD:unhandledElement(reader,element);break;case WILD_CARD_ROUTING_ENABLED:unhandledElement(reader,element);break;case DEAD_LETTER_ADDRESS_NODE_NAME:unhandledElement(reader,element);break;case EXPIRY_ADDRESS_NODE_NAME:unhandledElement(reader,element);break;case REDELIVERY_DELAY_NODE_NAME:unhandledElement(reader,element);break;case MAX_DELIVERY_ATTEMPTS:unhandledElement(reader,element);break;case MAX_SIZE_BYTES_NODE_NAME:unhandledElement(reader,element);break;case ADDRESS_FULL_MESSAGE_POLICY_NODE_NAME:unhandledElement(reader,element);break;case PAGE_SIZE_BYTES_NODE_NAME:unhandledElement(reader,element);break;case MESSAGE_COUNTER_HISTORY_DAY_LIMIT_NODE_NAME:unhandledElement(reader,element);break;case LVQ_NODE_NAME:unhandledElement(reader,element);break;case REDISTRIBUTION_DELAY_NODE_NAME:unhandledElement(reader,element);break;case SEND_TO_DLA_ON_NO_ROUTE:unhandledElement(reader,element);break;case QUEUES:{final ModelNode queues=parseQueues(reader);operation.get(QUEUE).set(queues);break;}case SUBSYSTEM:break;default :throw ParseUtils.unexpectedElement(reader);} @AT@ 13645 @LENGTH@ 34
---MOV ExpressionStatement@@MethodInvocation:unhandledElement(reader,element) @TO@ SwitchStatement@@switch (element) {case ACCEPTORS:{    final ModelNode acceptors=processAcceptors(reader);    operation.get(ACCEPTOR).set(acceptors);    break;  }case ADDRESS_SETTINGS:{  final ModelNode addressSettings=processAddressSettings(reader);  operation.get(ADDRESS_SETTING).set(addressSettings);  break;}case ASYNC_CONNECTION_EXECUTION_ENABLED:unhandledElement(reader,element);break;case BACKUP:handleElementText(reader,element,operation);break;case BACKUP_CONNECTOR_REF:handleElementText(reader,element,operation);break;case BINDINGS_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(BINDINGS_DIRECTORY).set(directory);break;}case BROADCAST_PERIOD:handleElementText(reader,element,operation);break;case CLUSTERED:handleElementText(reader,element,operation);break;case CLUSTER_PASSWORD:handleElementText(reader,element,operation);break;case CLUSTER_USER:handleElementText(reader,element,operation);break;case CONNECTION_TTL_OVERRIDE:handleElementText(reader,element,operation);break;case CONNECTORS:{final ModelNode connectors=processConnectors(reader);operation.get(CONNECTOR).set(connectors);break;}case CONNECTOR_REF:unhandledElement(reader,element);break;case CREATE_BINDINGS_DIR:handleElementText(reader,element,operation);break;case CREATE_JOURNAL_DIR:handleElementText(reader,element,operation);break;case FILE_DEPLOYMENT_ENABLED:unhandledElement(reader,element);break;case GROUP_ADDRESS:unhandledElement(reader,element);break;case GROUP_PORT:unhandledElement(reader,element);break;case GROUPING_HANDLER:unhandledElement(reader,element);break;case ID_CACHE_SIZE:handleElementText(reader,element,operation);break;case JMX_DOMAIN:handleElementText(reader,element,operation);break;case JMX_MANAGEMENT_ENABLED:handleElementText(reader,element,operation);break;case JOURNAL_BUFFER_SIZE:unhandledElement(reader,element);break;case JOURNAL_BUFFER_TIMEOUT:handleElementText(reader,element,operation);break;case JOURNAL_COMPACT_MIN_FILES:handleElementText(reader,element,operation);break;case JOURNAL_COMPACT_PERCENTAGE:handleElementText(reader,element,operation);break;case JOURNAL_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(JOURNAL_DIRECTORY).set(directory);break;}case JOURNAL_MIN_FILES:{operation.get(JOURNAL_MIN_FILES).set(reader.getElementText());break;}case JOURNAL_SYNC_NON_TRANSACTIONAL:handleElementText(reader,element,operation);break;case JOURNAL_SYNC_TRANSACTIONAL:handleElementText(reader,element,operation);break;case JOURNAL_TYPE:{String journalType=reader.getElementText();if (journalType != null && journalType.length() > 0) {JournalType.valueOf(journalType.trim());operation.get(JOURNAL_TYPE).set(journalType.trim());}break;}case JOURNAL_FILE_SIZE:{String text=reader.getElementText();if (text != null && text.length() > 0) {operation.get(JOURNAL_FILE_SIZE).set(text.trim());}}break;case JOURNAL_MAX_IO:handleElementText(reader,element,operation);break;case LARGE_MESSAGES_DIRECTORY:{final ModelNode dir=parseDirectory(reader);operation.get(LARGE_MESSAGES_DIRECTORY).set(dir);break;}case LOCAL_BIND_ADDRESS:unhandledElement(reader,element);break;case LOCAL_BIND_PORT:unhandledElement(reader,element);break;case LOG_JOURNAL_WRITE_RATE:handleElementText(reader,element,operation);break;case MANAGEMENT_ADDRESS:unhandledElement(reader,element);break;case MANAGEMENT_NOTIFICATION_ADDRESS:unhandledElement(reader,element);break;case MEMORY_MEASURE_INTERVAL:unhandledElement(reader,element);break;case MEMORY_WARNING_THRESHOLD:unhandledElement(reader,element);break;case MESSAGE_COUNTER_ENABLED:unhandledElement(reader,element);break;case MESSAGE_COUNTER_MAX_DAY_HISTORY:unhandledElement(reader,element);break;case MESSAGE_COUNTER_SAMPLE_PERIOD:unhandledElement(reader,element);break;case MESSAGE_EXPIRY_SCAN_PERIOD:unhandledElement(reader,element);break;case MESSAGE_EXPIRY_THREAD_PRIORITY:unhandledElement(reader,element);break;case PAGING_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(PAGING_DIRECTORY).set(directory);break;}case PERF_BLAST_PAGES:unhandledElement(reader,element);break;case PERSIST_DELIVERY_COUNT_BEFORE_DELIVERY:unhandledElement(reader,element);break;case PERSIST_ID_CACHE:unhandledElement(reader,element);break;case PERSISTENCE_ENABLED:{final String value=reader.getElementText();if (value != null && value.length() > 0) {boolean enabled=Boolean.valueOf(value.trim());operation.get(PERSISTENCE_ENABLED).set(enabled);}break;}case REFRESH_TIMEOUT:unhandledElement(reader,element);break;case REMOTING_INTERCEPTORS:unhandledElement(reader,element);break;case RUN_SYNC_SPEED_TEST:unhandledElement(reader,element);break;case SECURITY_ENABLED:unhandledElement(reader,element);break;case SECURITY_INVALIDATION_INTERVAL:unhandledElement(reader,element);break;case SECURITY_SETTINGS:{final ModelNode securitySettings=processSecuritySettings(reader);operation.get(SECURITY_SETTING).set(securitySettings);break;}case SERVER_DUMP_INTERVAL:unhandledElement(reader,element);break;case SHARED_STORE:unhandledElement(reader,element);break;case TRANSACTION_TIMEOUT:unhandledElement(reader,element);break;case TRANSACTION_TIMEOUT_SCAN_PERIOD:unhandledElement(reader,element);break;case WILD_CARD_ROUTING_ENABLED:unhandledElement(reader,element);break;case DEAD_LETTER_ADDRESS_NODE_NAME:unhandledElement(reader,element);break;case EXPIRY_ADDRESS_NODE_NAME:unhandledElement(reader,element);break;case REDELIVERY_DELAY_NODE_NAME:unhandledElement(reader,element);break;case MAX_DELIVERY_ATTEMPTS:unhandledElement(reader,element);break;case MAX_SIZE_BYTES_NODE_NAME:unhandledElement(reader,element);break;case ADDRESS_FULL_MESSAGE_POLICY_NODE_NAME:unhandledElement(reader,element);break;case PAGE_SIZE_BYTES_NODE_NAME:unhandledElement(reader,element);break;case MESSAGE_COUNTER_HISTORY_DAY_LIMIT_NODE_NAME:unhandledElement(reader,element);break;case LVQ_NODE_NAME:unhandledElement(reader,element);break;case REDISTRIBUTION_DELAY_NODE_NAME:unhandledElement(reader,element);break;case SEND_TO_DLA_ON_NO_ROUTE:unhandledElement(reader,element);break;case QUEUES:{final ModelNode queues=parseQueues(reader);operation.get(QUEUE).set(queues);break;}case SUBSYSTEM:break;default :throw ParseUtils.unexpectedElement(reader);} @AT@ 13766 @LENGTH@ 34
---MOV ExpressionStatement@@MethodInvocation:unhandledElement(reader,element) @TO@ SwitchStatement@@switch (element) {case ACCEPTORS:{    final ModelNode acceptors=processAcceptors(reader);    operation.get(ACCEPTOR).set(acceptors);    break;  }case ADDRESS_SETTINGS:{  final ModelNode addressSettings=processAddressSettings(reader);  operation.get(ADDRESS_SETTING).set(addressSettings);  break;}case ASYNC_CONNECTION_EXECUTION_ENABLED:unhandledElement(reader,element);break;case BACKUP:handleElementText(reader,element,operation);break;case BACKUP_CONNECTOR_REF:handleElementText(reader,element,operation);break;case BINDINGS_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(BINDINGS_DIRECTORY).set(directory);break;}case BROADCAST_PERIOD:handleElementText(reader,element,operation);break;case CLUSTERED:handleElementText(reader,element,operation);break;case CLUSTER_PASSWORD:handleElementText(reader,element,operation);break;case CLUSTER_USER:handleElementText(reader,element,operation);break;case CONNECTION_TTL_OVERRIDE:handleElementText(reader,element,operation);break;case CONNECTORS:{final ModelNode connectors=processConnectors(reader);operation.get(CONNECTOR).set(connectors);break;}case CONNECTOR_REF:unhandledElement(reader,element);break;case CREATE_BINDINGS_DIR:handleElementText(reader,element,operation);break;case CREATE_JOURNAL_DIR:handleElementText(reader,element,operation);break;case FILE_DEPLOYMENT_ENABLED:unhandledElement(reader,element);break;case GROUP_ADDRESS:unhandledElement(reader,element);break;case GROUP_PORT:unhandledElement(reader,element);break;case GROUPING_HANDLER:unhandledElement(reader,element);break;case ID_CACHE_SIZE:handleElementText(reader,element,operation);break;case JMX_DOMAIN:handleElementText(reader,element,operation);break;case JMX_MANAGEMENT_ENABLED:handleElementText(reader,element,operation);break;case JOURNAL_BUFFER_SIZE:unhandledElement(reader,element);break;case JOURNAL_BUFFER_TIMEOUT:handleElementText(reader,element,operation);break;case JOURNAL_COMPACT_MIN_FILES:handleElementText(reader,element,operation);break;case JOURNAL_COMPACT_PERCENTAGE:handleElementText(reader,element,operation);break;case JOURNAL_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(JOURNAL_DIRECTORY).set(directory);break;}case JOURNAL_MIN_FILES:{operation.get(JOURNAL_MIN_FILES).set(reader.getElementText());break;}case JOURNAL_SYNC_NON_TRANSACTIONAL:handleElementText(reader,element,operation);break;case JOURNAL_SYNC_TRANSACTIONAL:handleElementText(reader,element,operation);break;case JOURNAL_TYPE:{String journalType=reader.getElementText();if (journalType != null && journalType.length() > 0) {JournalType.valueOf(journalType.trim());operation.get(JOURNAL_TYPE).set(journalType.trim());}break;}case JOURNAL_FILE_SIZE:{String text=reader.getElementText();if (text != null && text.length() > 0) {operation.get(JOURNAL_FILE_SIZE).set(text.trim());}}break;case JOURNAL_MAX_IO:handleElementText(reader,element,operation);break;case LARGE_MESSAGES_DIRECTORY:{final ModelNode dir=parseDirectory(reader);operation.get(LARGE_MESSAGES_DIRECTORY).set(dir);break;}case LOCAL_BIND_ADDRESS:unhandledElement(reader,element);break;case LOCAL_BIND_PORT:unhandledElement(reader,element);break;case LOG_JOURNAL_WRITE_RATE:handleElementText(reader,element,operation);break;case MANAGEMENT_ADDRESS:unhandledElement(reader,element);break;case MANAGEMENT_NOTIFICATION_ADDRESS:unhandledElement(reader,element);break;case MEMORY_MEASURE_INTERVAL:unhandledElement(reader,element);break;case MEMORY_WARNING_THRESHOLD:unhandledElement(reader,element);break;case MESSAGE_COUNTER_ENABLED:unhandledElement(reader,element);break;case MESSAGE_COUNTER_MAX_DAY_HISTORY:unhandledElement(reader,element);break;case MESSAGE_COUNTER_SAMPLE_PERIOD:unhandledElement(reader,element);break;case MESSAGE_EXPIRY_SCAN_PERIOD:unhandledElement(reader,element);break;case MESSAGE_EXPIRY_THREAD_PRIORITY:unhandledElement(reader,element);break;case PAGING_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(PAGING_DIRECTORY).set(directory);break;}case PERF_BLAST_PAGES:unhandledElement(reader,element);break;case PERSIST_DELIVERY_COUNT_BEFORE_DELIVERY:unhandledElement(reader,element);break;case PERSIST_ID_CACHE:unhandledElement(reader,element);break;case PERSISTENCE_ENABLED:{final String value=reader.getElementText();if (value != null && value.length() > 0) {boolean enabled=Boolean.valueOf(value.trim());operation.get(PERSISTENCE_ENABLED).set(enabled);}break;}case REFRESH_TIMEOUT:unhandledElement(reader,element);break;case REMOTING_INTERCEPTORS:unhandledElement(reader,element);break;case RUN_SYNC_SPEED_TEST:unhandledElement(reader,element);break;case SECURITY_ENABLED:unhandledElement(reader,element);break;case SECURITY_INVALIDATION_INTERVAL:unhandledElement(reader,element);break;case SECURITY_SETTINGS:{final ModelNode securitySettings=processSecuritySettings(reader);operation.get(SECURITY_SETTING).set(securitySettings);break;}case SERVER_DUMP_INTERVAL:unhandledElement(reader,element);break;case SHARED_STORE:unhandledElement(reader,element);break;case TRANSACTION_TIMEOUT:unhandledElement(reader,element);break;case TRANSACTION_TIMEOUT_SCAN_PERIOD:unhandledElement(reader,element);break;case WILD_CARD_ROUTING_ENABLED:unhandledElement(reader,element);break;case DEAD_LETTER_ADDRESS_NODE_NAME:unhandledElement(reader,element);break;case EXPIRY_ADDRESS_NODE_NAME:unhandledElement(reader,element);break;case REDELIVERY_DELAY_NODE_NAME:unhandledElement(reader,element);break;case MAX_DELIVERY_ATTEMPTS:unhandledElement(reader,element);break;case MAX_SIZE_BYTES_NODE_NAME:unhandledElement(reader,element);break;case ADDRESS_FULL_MESSAGE_POLICY_NODE_NAME:unhandledElement(reader,element);break;case PAGE_SIZE_BYTES_NODE_NAME:unhandledElement(reader,element);break;case MESSAGE_COUNTER_HISTORY_DAY_LIMIT_NODE_NAME:unhandledElement(reader,element);break;case LVQ_NODE_NAME:unhandledElement(reader,element);break;case REDISTRIBUTION_DELAY_NODE_NAME:unhandledElement(reader,element);break;case SEND_TO_DLA_ON_NO_ROUTE:unhandledElement(reader,element);break;case QUEUES:{final ModelNode queues=parseQueues(reader);operation.get(QUEUE).set(queues);break;}case SUBSYSTEM:break;default :throw ParseUtils.unexpectedElement(reader);} @AT@ 14255 @LENGTH@ 34
---MOV ExpressionStatement@@MethodInvocation:unhandledElement(reader,element) @TO@ SwitchStatement@@switch (element) {case ACCEPTORS:{    final ModelNode acceptors=processAcceptors(reader);    operation.get(ACCEPTOR).set(acceptors);    break;  }case ADDRESS_SETTINGS:{  final ModelNode addressSettings=processAddressSettings(reader);  operation.get(ADDRESS_SETTING).set(addressSettings);  break;}case ASYNC_CONNECTION_EXECUTION_ENABLED:unhandledElement(reader,element);break;case BACKUP:handleElementText(reader,element,operation);break;case BACKUP_CONNECTOR_REF:handleElementText(reader,element,operation);break;case BINDINGS_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(BINDINGS_DIRECTORY).set(directory);break;}case BROADCAST_PERIOD:handleElementText(reader,element,operation);break;case CLUSTERED:handleElementText(reader,element,operation);break;case CLUSTER_PASSWORD:handleElementText(reader,element,operation);break;case CLUSTER_USER:handleElementText(reader,element,operation);break;case CONNECTION_TTL_OVERRIDE:handleElementText(reader,element,operation);break;case CONNECTORS:{final ModelNode connectors=processConnectors(reader);operation.get(CONNECTOR).set(connectors);break;}case CONNECTOR_REF:unhandledElement(reader,element);break;case CREATE_BINDINGS_DIR:handleElementText(reader,element,operation);break;case CREATE_JOURNAL_DIR:handleElementText(reader,element,operation);break;case FILE_DEPLOYMENT_ENABLED:unhandledElement(reader,element);break;case GROUP_ADDRESS:unhandledElement(reader,element);break;case GROUP_PORT:unhandledElement(reader,element);break;case GROUPING_HANDLER:unhandledElement(reader,element);break;case ID_CACHE_SIZE:handleElementText(reader,element,operation);break;case JMX_DOMAIN:handleElementText(reader,element,operation);break;case JMX_MANAGEMENT_ENABLED:handleElementText(reader,element,operation);break;case JOURNAL_BUFFER_SIZE:unhandledElement(reader,element);break;case JOURNAL_BUFFER_TIMEOUT:handleElementText(reader,element,operation);break;case JOURNAL_COMPACT_MIN_FILES:handleElementText(reader,element,operation);break;case JOURNAL_COMPACT_PERCENTAGE:handleElementText(reader,element,operation);break;case JOURNAL_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(JOURNAL_DIRECTORY).set(directory);break;}case JOURNAL_MIN_FILES:{operation.get(JOURNAL_MIN_FILES).set(reader.getElementText());break;}case JOURNAL_SYNC_NON_TRANSACTIONAL:handleElementText(reader,element,operation);break;case JOURNAL_SYNC_TRANSACTIONAL:handleElementText(reader,element,operation);break;case JOURNAL_TYPE:{String journalType=reader.getElementText();if (journalType != null && journalType.length() > 0) {JournalType.valueOf(journalType.trim());operation.get(JOURNAL_TYPE).set(journalType.trim());}break;}case JOURNAL_FILE_SIZE:{String text=reader.getElementText();if (text != null && text.length() > 0) {operation.get(JOURNAL_FILE_SIZE).set(text.trim());}}break;case JOURNAL_MAX_IO:handleElementText(reader,element,operation);break;case LARGE_MESSAGES_DIRECTORY:{final ModelNode dir=parseDirectory(reader);operation.get(LARGE_MESSAGES_DIRECTORY).set(dir);break;}case LOCAL_BIND_ADDRESS:unhandledElement(reader,element);break;case LOCAL_BIND_PORT:unhandledElement(reader,element);break;case LOG_JOURNAL_WRITE_RATE:handleElementText(reader,element,operation);break;case MANAGEMENT_ADDRESS:unhandledElement(reader,element);break;case MANAGEMENT_NOTIFICATION_ADDRESS:unhandledElement(reader,element);break;case MEMORY_MEASURE_INTERVAL:unhandledElement(reader,element);break;case MEMORY_WARNING_THRESHOLD:unhandledElement(reader,element);break;case MESSAGE_COUNTER_ENABLED:unhandledElement(reader,element);break;case MESSAGE_COUNTER_MAX_DAY_HISTORY:unhandledElement(reader,element);break;case MESSAGE_COUNTER_SAMPLE_PERIOD:unhandledElement(reader,element);break;case MESSAGE_EXPIRY_SCAN_PERIOD:unhandledElement(reader,element);break;case MESSAGE_EXPIRY_THREAD_PRIORITY:unhandledElement(reader,element);break;case PAGING_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(PAGING_DIRECTORY).set(directory);break;}case PERF_BLAST_PAGES:unhandledElement(reader,element);break;case PERSIST_DELIVERY_COUNT_BEFORE_DELIVERY:unhandledElement(reader,element);break;case PERSIST_ID_CACHE:unhandledElement(reader,element);break;case PERSISTENCE_ENABLED:{final String value=reader.getElementText();if (value != null && value.length() > 0) {boolean enabled=Boolean.valueOf(value.trim());operation.get(PERSISTENCE_ENABLED).set(enabled);}break;}case REFRESH_TIMEOUT:unhandledElement(reader,element);break;case REMOTING_INTERCEPTORS:unhandledElement(reader,element);break;case RUN_SYNC_SPEED_TEST:unhandledElement(reader,element);break;case SECURITY_ENABLED:unhandledElement(reader,element);break;case SECURITY_INVALIDATION_INTERVAL:unhandledElement(reader,element);break;case SECURITY_SETTINGS:{final ModelNode securitySettings=processSecuritySettings(reader);operation.get(SECURITY_SETTING).set(securitySettings);break;}case SERVER_DUMP_INTERVAL:unhandledElement(reader,element);break;case SHARED_STORE:unhandledElement(reader,element);break;case TRANSACTION_TIMEOUT:unhandledElement(reader,element);break;case TRANSACTION_TIMEOUT_SCAN_PERIOD:unhandledElement(reader,element);break;case WILD_CARD_ROUTING_ENABLED:unhandledElement(reader,element);break;case DEAD_LETTER_ADDRESS_NODE_NAME:unhandledElement(reader,element);break;case EXPIRY_ADDRESS_NODE_NAME:unhandledElement(reader,element);break;case REDELIVERY_DELAY_NODE_NAME:unhandledElement(reader,element);break;case MAX_DELIVERY_ATTEMPTS:unhandledElement(reader,element);break;case MAX_SIZE_BYTES_NODE_NAME:unhandledElement(reader,element);break;case ADDRESS_FULL_MESSAGE_POLICY_NODE_NAME:unhandledElement(reader,element);break;case PAGE_SIZE_BYTES_NODE_NAME:unhandledElement(reader,element);break;case MESSAGE_COUNTER_HISTORY_DAY_LIMIT_NODE_NAME:unhandledElement(reader,element);break;case LVQ_NODE_NAME:unhandledElement(reader,element);break;case REDISTRIBUTION_DELAY_NODE_NAME:unhandledElement(reader,element);break;case SEND_TO_DLA_ON_NO_ROUTE:unhandledElement(reader,element);break;case QUEUES:{final ModelNode queues=parseQueues(reader);operation.get(QUEUE).set(queues);break;}case SUBSYSTEM:break;default :throw ParseUtils.unexpectedElement(reader);} @AT@ 14381 @LENGTH@ 34
---MOV ExpressionStatement@@MethodInvocation:unhandledElement(reader,element) @TO@ SwitchStatement@@switch (element) {case ACCEPTORS:{    final ModelNode acceptors=processAcceptors(reader);    operation.get(ACCEPTOR).set(acceptors);    break;  }case ADDRESS_SETTINGS:{  final ModelNode addressSettings=processAddressSettings(reader);  operation.get(ADDRESS_SETTING).set(addressSettings);  break;}case ASYNC_CONNECTION_EXECUTION_ENABLED:unhandledElement(reader,element);break;case BACKUP:handleElementText(reader,element,operation);break;case BACKUP_CONNECTOR_REF:handleElementText(reader,element,operation);break;case BINDINGS_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(BINDINGS_DIRECTORY).set(directory);break;}case BROADCAST_PERIOD:handleElementText(reader,element,operation);break;case CLUSTERED:handleElementText(reader,element,operation);break;case CLUSTER_PASSWORD:handleElementText(reader,element,operation);break;case CLUSTER_USER:handleElementText(reader,element,operation);break;case CONNECTION_TTL_OVERRIDE:handleElementText(reader,element,operation);break;case CONNECTORS:{final ModelNode connectors=processConnectors(reader);operation.get(CONNECTOR).set(connectors);break;}case CONNECTOR_REF:unhandledElement(reader,element);break;case CREATE_BINDINGS_DIR:handleElementText(reader,element,operation);break;case CREATE_JOURNAL_DIR:handleElementText(reader,element,operation);break;case FILE_DEPLOYMENT_ENABLED:unhandledElement(reader,element);break;case GROUP_ADDRESS:unhandledElement(reader,element);break;case GROUP_PORT:unhandledElement(reader,element);break;case GROUPING_HANDLER:unhandledElement(reader,element);break;case ID_CACHE_SIZE:handleElementText(reader,element,operation);break;case JMX_DOMAIN:handleElementText(reader,element,operation);break;case JMX_MANAGEMENT_ENABLED:handleElementText(reader,element,operation);break;case JOURNAL_BUFFER_SIZE:unhandledElement(reader,element);break;case JOURNAL_BUFFER_TIMEOUT:handleElementText(reader,element,operation);break;case JOURNAL_COMPACT_MIN_FILES:handleElementText(reader,element,operation);break;case JOURNAL_COMPACT_PERCENTAGE:handleElementText(reader,element,operation);break;case JOURNAL_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(JOURNAL_DIRECTORY).set(directory);break;}case JOURNAL_MIN_FILES:{operation.get(JOURNAL_MIN_FILES).set(reader.getElementText());break;}case JOURNAL_SYNC_NON_TRANSACTIONAL:handleElementText(reader,element,operation);break;case JOURNAL_SYNC_TRANSACTIONAL:handleElementText(reader,element,operation);break;case JOURNAL_TYPE:{String journalType=reader.getElementText();if (journalType != null && journalType.length() > 0) {JournalType.valueOf(journalType.trim());operation.get(JOURNAL_TYPE).set(journalType.trim());}break;}case JOURNAL_FILE_SIZE:{String text=reader.getElementText();if (text != null && text.length() > 0) {operation.get(JOURNAL_FILE_SIZE).set(text.trim());}}break;case JOURNAL_MAX_IO:handleElementText(reader,element,operation);break;case LARGE_MESSAGES_DIRECTORY:{final ModelNode dir=parseDirectory(reader);operation.get(LARGE_MESSAGES_DIRECTORY).set(dir);break;}case LOCAL_BIND_ADDRESS:unhandledElement(reader,element);break;case LOCAL_BIND_PORT:unhandledElement(reader,element);break;case LOG_JOURNAL_WRITE_RATE:handleElementText(reader,element,operation);break;case MANAGEMENT_ADDRESS:unhandledElement(reader,element);break;case MANAGEMENT_NOTIFICATION_ADDRESS:unhandledElement(reader,element);break;case MEMORY_MEASURE_INTERVAL:unhandledElement(reader,element);break;case MEMORY_WARNING_THRESHOLD:unhandledElement(reader,element);break;case MESSAGE_COUNTER_ENABLED:unhandledElement(reader,element);break;case MESSAGE_COUNTER_MAX_DAY_HISTORY:unhandledElement(reader,element);break;case MESSAGE_COUNTER_SAMPLE_PERIOD:unhandledElement(reader,element);break;case MESSAGE_EXPIRY_SCAN_PERIOD:unhandledElement(reader,element);break;case MESSAGE_EXPIRY_THREAD_PRIORITY:unhandledElement(reader,element);break;case PAGING_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(PAGING_DIRECTORY).set(directory);break;}case PERF_BLAST_PAGES:unhandledElement(reader,element);break;case PERSIST_DELIVERY_COUNT_BEFORE_DELIVERY:unhandledElement(reader,element);break;case PERSIST_ID_CACHE:unhandledElement(reader,element);break;case PERSISTENCE_ENABLED:{final String value=reader.getElementText();if (value != null && value.length() > 0) {boolean enabled=Boolean.valueOf(value.trim());operation.get(PERSISTENCE_ENABLED).set(enabled);}break;}case REFRESH_TIMEOUT:unhandledElement(reader,element);break;case REMOTING_INTERCEPTORS:unhandledElement(reader,element);break;case RUN_SYNC_SPEED_TEST:unhandledElement(reader,element);break;case SECURITY_ENABLED:unhandledElement(reader,element);break;case SECURITY_INVALIDATION_INTERVAL:unhandledElement(reader,element);break;case SECURITY_SETTINGS:{final ModelNode securitySettings=processSecuritySettings(reader);operation.get(SECURITY_SETTING).set(securitySettings);break;}case SERVER_DUMP_INTERVAL:unhandledElement(reader,element);break;case SHARED_STORE:unhandledElement(reader,element);break;case TRANSACTION_TIMEOUT:unhandledElement(reader,element);break;case TRANSACTION_TIMEOUT_SCAN_PERIOD:unhandledElement(reader,element);break;case WILD_CARD_ROUTING_ENABLED:unhandledElement(reader,element);break;case DEAD_LETTER_ADDRESS_NODE_NAME:unhandledElement(reader,element);break;case EXPIRY_ADDRESS_NODE_NAME:unhandledElement(reader,element);break;case REDELIVERY_DELAY_NODE_NAME:unhandledElement(reader,element);break;case MAX_DELIVERY_ATTEMPTS:unhandledElement(reader,element);break;case MAX_SIZE_BYTES_NODE_NAME:unhandledElement(reader,element);break;case ADDRESS_FULL_MESSAGE_POLICY_NODE_NAME:unhandledElement(reader,element);break;case PAGE_SIZE_BYTES_NODE_NAME:unhandledElement(reader,element);break;case MESSAGE_COUNTER_HISTORY_DAY_LIMIT_NODE_NAME:unhandledElement(reader,element);break;case LVQ_NODE_NAME:unhandledElement(reader,element);break;case REDISTRIBUTION_DELAY_NODE_NAME:unhandledElement(reader,element);break;case SEND_TO_DLA_ON_NO_ROUTE:unhandledElement(reader,element);break;case QUEUES:{final ModelNode queues=parseQueues(reader);operation.get(QUEUE).set(queues);break;}case SUBSYSTEM:break;default :throw ParseUtils.unexpectedElement(reader);} @AT@ 14505 @LENGTH@ 34
---MOV ExpressionStatement@@MethodInvocation:unhandledElement(reader,element) @TO@ SwitchStatement@@switch (element) {case ACCEPTORS:{    final ModelNode acceptors=processAcceptors(reader);    operation.get(ACCEPTOR).set(acceptors);    break;  }case ADDRESS_SETTINGS:{  final ModelNode addressSettings=processAddressSettings(reader);  operation.get(ADDRESS_SETTING).set(addressSettings);  break;}case ASYNC_CONNECTION_EXECUTION_ENABLED:unhandledElement(reader,element);break;case BACKUP:handleElementText(reader,element,operation);break;case BACKUP_CONNECTOR_REF:handleElementText(reader,element,operation);break;case BINDINGS_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(BINDINGS_DIRECTORY).set(directory);break;}case BROADCAST_PERIOD:handleElementText(reader,element,operation);break;case CLUSTERED:handleElementText(reader,element,operation);break;case CLUSTER_PASSWORD:handleElementText(reader,element,operation);break;case CLUSTER_USER:handleElementText(reader,element,operation);break;case CONNECTION_TTL_OVERRIDE:handleElementText(reader,element,operation);break;case CONNECTORS:{final ModelNode connectors=processConnectors(reader);operation.get(CONNECTOR).set(connectors);break;}case CONNECTOR_REF:unhandledElement(reader,element);break;case CREATE_BINDINGS_DIR:handleElementText(reader,element,operation);break;case CREATE_JOURNAL_DIR:handleElementText(reader,element,operation);break;case FILE_DEPLOYMENT_ENABLED:unhandledElement(reader,element);break;case GROUP_ADDRESS:unhandledElement(reader,element);break;case GROUP_PORT:unhandledElement(reader,element);break;case GROUPING_HANDLER:unhandledElement(reader,element);break;case ID_CACHE_SIZE:handleElementText(reader,element,operation);break;case JMX_DOMAIN:handleElementText(reader,element,operation);break;case JMX_MANAGEMENT_ENABLED:handleElementText(reader,element,operation);break;case JOURNAL_BUFFER_SIZE:unhandledElement(reader,element);break;case JOURNAL_BUFFER_TIMEOUT:handleElementText(reader,element,operation);break;case JOURNAL_COMPACT_MIN_FILES:handleElementText(reader,element,operation);break;case JOURNAL_COMPACT_PERCENTAGE:handleElementText(reader,element,operation);break;case JOURNAL_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(JOURNAL_DIRECTORY).set(directory);break;}case JOURNAL_MIN_FILES:{operation.get(JOURNAL_MIN_FILES).set(reader.getElementText());break;}case JOURNAL_SYNC_NON_TRANSACTIONAL:handleElementText(reader,element,operation);break;case JOURNAL_SYNC_TRANSACTIONAL:handleElementText(reader,element,operation);break;case JOURNAL_TYPE:{String journalType=reader.getElementText();if (journalType != null && journalType.length() > 0) {JournalType.valueOf(journalType.trim());operation.get(JOURNAL_TYPE).set(journalType.trim());}break;}case JOURNAL_FILE_SIZE:{String text=reader.getElementText();if (text != null && text.length() > 0) {operation.get(JOURNAL_FILE_SIZE).set(text.trim());}}break;case JOURNAL_MAX_IO:handleElementText(reader,element,operation);break;case LARGE_MESSAGES_DIRECTORY:{final ModelNode dir=parseDirectory(reader);operation.get(LARGE_MESSAGES_DIRECTORY).set(dir);break;}case LOCAL_BIND_ADDRESS:unhandledElement(reader,element);break;case LOCAL_BIND_PORT:unhandledElement(reader,element);break;case LOG_JOURNAL_WRITE_RATE:handleElementText(reader,element,operation);break;case MANAGEMENT_ADDRESS:unhandledElement(reader,element);break;case MANAGEMENT_NOTIFICATION_ADDRESS:unhandledElement(reader,element);break;case MEMORY_MEASURE_INTERVAL:unhandledElement(reader,element);break;case MEMORY_WARNING_THRESHOLD:unhandledElement(reader,element);break;case MESSAGE_COUNTER_ENABLED:unhandledElement(reader,element);break;case MESSAGE_COUNTER_MAX_DAY_HISTORY:unhandledElement(reader,element);break;case MESSAGE_COUNTER_SAMPLE_PERIOD:unhandledElement(reader,element);break;case MESSAGE_EXPIRY_SCAN_PERIOD:unhandledElement(reader,element);break;case MESSAGE_EXPIRY_THREAD_PRIORITY:unhandledElement(reader,element);break;case PAGING_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(PAGING_DIRECTORY).set(directory);break;}case PERF_BLAST_PAGES:unhandledElement(reader,element);break;case PERSIST_DELIVERY_COUNT_BEFORE_DELIVERY:unhandledElement(reader,element);break;case PERSIST_ID_CACHE:unhandledElement(reader,element);break;case PERSISTENCE_ENABLED:{final String value=reader.getElementText();if (value != null && value.length() > 0) {boolean enabled=Boolean.valueOf(value.trim());operation.get(PERSISTENCE_ENABLED).set(enabled);}break;}case REFRESH_TIMEOUT:unhandledElement(reader,element);break;case REMOTING_INTERCEPTORS:unhandledElement(reader,element);break;case RUN_SYNC_SPEED_TEST:unhandledElement(reader,element);break;case SECURITY_ENABLED:unhandledElement(reader,element);break;case SECURITY_INVALIDATION_INTERVAL:unhandledElement(reader,element);break;case SECURITY_SETTINGS:{final ModelNode securitySettings=processSecuritySettings(reader);operation.get(SECURITY_SETTING).set(securitySettings);break;}case SERVER_DUMP_INTERVAL:unhandledElement(reader,element);break;case SHARED_STORE:unhandledElement(reader,element);break;case TRANSACTION_TIMEOUT:unhandledElement(reader,element);break;case TRANSACTION_TIMEOUT_SCAN_PERIOD:unhandledElement(reader,element);break;case WILD_CARD_ROUTING_ENABLED:unhandledElement(reader,element);break;case DEAD_LETTER_ADDRESS_NODE_NAME:unhandledElement(reader,element);break;case EXPIRY_ADDRESS_NODE_NAME:unhandledElement(reader,element);break;case REDELIVERY_DELAY_NODE_NAME:unhandledElement(reader,element);break;case MAX_DELIVERY_ATTEMPTS:unhandledElement(reader,element);break;case MAX_SIZE_BYTES_NODE_NAME:unhandledElement(reader,element);break;case ADDRESS_FULL_MESSAGE_POLICY_NODE_NAME:unhandledElement(reader,element);break;case PAGE_SIZE_BYTES_NODE_NAME:unhandledElement(reader,element);break;case MESSAGE_COUNTER_HISTORY_DAY_LIMIT_NODE_NAME:unhandledElement(reader,element);break;case LVQ_NODE_NAME:unhandledElement(reader,element);break;case REDISTRIBUTION_DELAY_NODE_NAME:unhandledElement(reader,element);break;case SEND_TO_DLA_ON_NO_ROUTE:unhandledElement(reader,element);break;case QUEUES:{final ModelNode queues=parseQueues(reader);operation.get(QUEUE).set(queues);break;}case SUBSYSTEM:break;default :throw ParseUtils.unexpectedElement(reader);} @AT@ 14626 @LENGTH@ 34
---MOV ExpressionStatement@@MethodInvocation:unhandledElement(reader,element) @TO@ SwitchStatement@@switch (element) {case ACCEPTORS:{    final ModelNode acceptors=processAcceptors(reader);    operation.get(ACCEPTOR).set(acceptors);    break;  }case ADDRESS_SETTINGS:{  final ModelNode addressSettings=processAddressSettings(reader);  operation.get(ADDRESS_SETTING).set(addressSettings);  break;}case ASYNC_CONNECTION_EXECUTION_ENABLED:unhandledElement(reader,element);break;case BACKUP:handleElementText(reader,element,operation);break;case BACKUP_CONNECTOR_REF:handleElementText(reader,element,operation);break;case BINDINGS_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(BINDINGS_DIRECTORY).set(directory);break;}case BROADCAST_PERIOD:handleElementText(reader,element,operation);break;case CLUSTERED:handleElementText(reader,element,operation);break;case CLUSTER_PASSWORD:handleElementText(reader,element,operation);break;case CLUSTER_USER:handleElementText(reader,element,operation);break;case CONNECTION_TTL_OVERRIDE:handleElementText(reader,element,operation);break;case CONNECTORS:{final ModelNode connectors=processConnectors(reader);operation.get(CONNECTOR).set(connectors);break;}case CONNECTOR_REF:unhandledElement(reader,element);break;case CREATE_BINDINGS_DIR:handleElementText(reader,element,operation);break;case CREATE_JOURNAL_DIR:handleElementText(reader,element,operation);break;case FILE_DEPLOYMENT_ENABLED:unhandledElement(reader,element);break;case GROUP_ADDRESS:unhandledElement(reader,element);break;case GROUP_PORT:unhandledElement(reader,element);break;case GROUPING_HANDLER:unhandledElement(reader,element);break;case ID_CACHE_SIZE:handleElementText(reader,element,operation);break;case JMX_DOMAIN:handleElementText(reader,element,operation);break;case JMX_MANAGEMENT_ENABLED:handleElementText(reader,element,operation);break;case JOURNAL_BUFFER_SIZE:unhandledElement(reader,element);break;case JOURNAL_BUFFER_TIMEOUT:handleElementText(reader,element,operation);break;case JOURNAL_COMPACT_MIN_FILES:handleElementText(reader,element,operation);break;case JOURNAL_COMPACT_PERCENTAGE:handleElementText(reader,element,operation);break;case JOURNAL_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(JOURNAL_DIRECTORY).set(directory);break;}case JOURNAL_MIN_FILES:{operation.get(JOURNAL_MIN_FILES).set(reader.getElementText());break;}case JOURNAL_SYNC_NON_TRANSACTIONAL:handleElementText(reader,element,operation);break;case JOURNAL_SYNC_TRANSACTIONAL:handleElementText(reader,element,operation);break;case JOURNAL_TYPE:{String journalType=reader.getElementText();if (journalType != null && journalType.length() > 0) {JournalType.valueOf(journalType.trim());operation.get(JOURNAL_TYPE).set(journalType.trim());}break;}case JOURNAL_FILE_SIZE:{String text=reader.getElementText();if (text != null && text.length() > 0) {operation.get(JOURNAL_FILE_SIZE).set(text.trim());}}break;case JOURNAL_MAX_IO:handleElementText(reader,element,operation);break;case LARGE_MESSAGES_DIRECTORY:{final ModelNode dir=parseDirectory(reader);operation.get(LARGE_MESSAGES_DIRECTORY).set(dir);break;}case LOCAL_BIND_ADDRESS:unhandledElement(reader,element);break;case LOCAL_BIND_PORT:unhandledElement(reader,element);break;case LOG_JOURNAL_WRITE_RATE:handleElementText(reader,element,operation);break;case MANAGEMENT_ADDRESS:unhandledElement(reader,element);break;case MANAGEMENT_NOTIFICATION_ADDRESS:unhandledElement(reader,element);break;case MEMORY_MEASURE_INTERVAL:unhandledElement(reader,element);break;case MEMORY_WARNING_THRESHOLD:unhandledElement(reader,element);break;case MESSAGE_COUNTER_ENABLED:unhandledElement(reader,element);break;case MESSAGE_COUNTER_MAX_DAY_HISTORY:unhandledElement(reader,element);break;case MESSAGE_COUNTER_SAMPLE_PERIOD:unhandledElement(reader,element);break;case MESSAGE_EXPIRY_SCAN_PERIOD:unhandledElement(reader,element);break;case MESSAGE_EXPIRY_THREAD_PRIORITY:unhandledElement(reader,element);break;case PAGING_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(PAGING_DIRECTORY).set(directory);break;}case PERF_BLAST_PAGES:unhandledElement(reader,element);break;case PERSIST_DELIVERY_COUNT_BEFORE_DELIVERY:unhandledElement(reader,element);break;case PERSIST_ID_CACHE:unhandledElement(reader,element);break;case PERSISTENCE_ENABLED:{final String value=reader.getElementText();if (value != null && value.length() > 0) {boolean enabled=Boolean.valueOf(value.trim());operation.get(PERSISTENCE_ENABLED).set(enabled);}break;}case REFRESH_TIMEOUT:unhandledElement(reader,element);break;case REMOTING_INTERCEPTORS:unhandledElement(reader,element);break;case RUN_SYNC_SPEED_TEST:unhandledElement(reader,element);break;case SECURITY_ENABLED:unhandledElement(reader,element);break;case SECURITY_INVALIDATION_INTERVAL:unhandledElement(reader,element);break;case SECURITY_SETTINGS:{final ModelNode securitySettings=processSecuritySettings(reader);operation.get(SECURITY_SETTING).set(securitySettings);break;}case SERVER_DUMP_INTERVAL:unhandledElement(reader,element);break;case SHARED_STORE:unhandledElement(reader,element);break;case TRANSACTION_TIMEOUT:unhandledElement(reader,element);break;case TRANSACTION_TIMEOUT_SCAN_PERIOD:unhandledElement(reader,element);break;case WILD_CARD_ROUTING_ENABLED:unhandledElement(reader,element);break;case DEAD_LETTER_ADDRESS_NODE_NAME:unhandledElement(reader,element);break;case EXPIRY_ADDRESS_NODE_NAME:unhandledElement(reader,element);break;case REDELIVERY_DELAY_NODE_NAME:unhandledElement(reader,element);break;case MAX_DELIVERY_ATTEMPTS:unhandledElement(reader,element);break;case MAX_SIZE_BYTES_NODE_NAME:unhandledElement(reader,element);break;case ADDRESS_FULL_MESSAGE_POLICY_NODE_NAME:unhandledElement(reader,element);break;case PAGE_SIZE_BYTES_NODE_NAME:unhandledElement(reader,element);break;case MESSAGE_COUNTER_HISTORY_DAY_LIMIT_NODE_NAME:unhandledElement(reader,element);break;case LVQ_NODE_NAME:unhandledElement(reader,element);break;case REDISTRIBUTION_DELAY_NODE_NAME:unhandledElement(reader,element);break;case SEND_TO_DLA_ON_NO_ROUTE:unhandledElement(reader,element);break;case QUEUES:{final ModelNode queues=parseQueues(reader);operation.get(QUEUE).set(queues);break;}case SUBSYSTEM:break;default :throw ParseUtils.unexpectedElement(reader);} @AT@ 14761 @LENGTH@ 34
---MOV ExpressionStatement@@MethodInvocation:unhandledElement(reader,element) @TO@ SwitchStatement@@switch (element) {case ACCEPTORS:{    final ModelNode acceptors=processAcceptors(reader);    operation.get(ACCEPTOR).set(acceptors);    break;  }case ADDRESS_SETTINGS:{  final ModelNode addressSettings=processAddressSettings(reader);  operation.get(ADDRESS_SETTING).set(addressSettings);  break;}case ASYNC_CONNECTION_EXECUTION_ENABLED:unhandledElement(reader,element);break;case BACKUP:handleElementText(reader,element,operation);break;case BACKUP_CONNECTOR_REF:handleElementText(reader,element,operation);break;case BINDINGS_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(BINDINGS_DIRECTORY).set(directory);break;}case BROADCAST_PERIOD:handleElementText(reader,element,operation);break;case CLUSTERED:handleElementText(reader,element,operation);break;case CLUSTER_PASSWORD:handleElementText(reader,element,operation);break;case CLUSTER_USER:handleElementText(reader,element,operation);break;case CONNECTION_TTL_OVERRIDE:handleElementText(reader,element,operation);break;case CONNECTORS:{final ModelNode connectors=processConnectors(reader);operation.get(CONNECTOR).set(connectors);break;}case CONNECTOR_REF:unhandledElement(reader,element);break;case CREATE_BINDINGS_DIR:handleElementText(reader,element,operation);break;case CREATE_JOURNAL_DIR:handleElementText(reader,element,operation);break;case FILE_DEPLOYMENT_ENABLED:unhandledElement(reader,element);break;case GROUP_ADDRESS:unhandledElement(reader,element);break;case GROUP_PORT:unhandledElement(reader,element);break;case GROUPING_HANDLER:unhandledElement(reader,element);break;case ID_CACHE_SIZE:handleElementText(reader,element,operation);break;case JMX_DOMAIN:handleElementText(reader,element,operation);break;case JMX_MANAGEMENT_ENABLED:handleElementText(reader,element,operation);break;case JOURNAL_BUFFER_SIZE:unhandledElement(reader,element);break;case JOURNAL_BUFFER_TIMEOUT:handleElementText(reader,element,operation);break;case JOURNAL_COMPACT_MIN_FILES:handleElementText(reader,element,operation);break;case JOURNAL_COMPACT_PERCENTAGE:handleElementText(reader,element,operation);break;case JOURNAL_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(JOURNAL_DIRECTORY).set(directory);break;}case JOURNAL_MIN_FILES:{operation.get(JOURNAL_MIN_FILES).set(reader.getElementText());break;}case JOURNAL_SYNC_NON_TRANSACTIONAL:handleElementText(reader,element,operation);break;case JOURNAL_SYNC_TRANSACTIONAL:handleElementText(reader,element,operation);break;case JOURNAL_TYPE:{String journalType=reader.getElementText();if (journalType != null && journalType.length() > 0) {JournalType.valueOf(journalType.trim());operation.get(JOURNAL_TYPE).set(journalType.trim());}break;}case JOURNAL_FILE_SIZE:{String text=reader.getElementText();if (text != null && text.length() > 0) {operation.get(JOURNAL_FILE_SIZE).set(text.trim());}}break;case JOURNAL_MAX_IO:handleElementText(reader,element,operation);break;case LARGE_MESSAGES_DIRECTORY:{final ModelNode dir=parseDirectory(reader);operation.get(LARGE_MESSAGES_DIRECTORY).set(dir);break;}case LOCAL_BIND_ADDRESS:unhandledElement(reader,element);break;case LOCAL_BIND_PORT:unhandledElement(reader,element);break;case LOG_JOURNAL_WRITE_RATE:handleElementText(reader,element,operation);break;case MANAGEMENT_ADDRESS:unhandledElement(reader,element);break;case MANAGEMENT_NOTIFICATION_ADDRESS:unhandledElement(reader,element);break;case MEMORY_MEASURE_INTERVAL:unhandledElement(reader,element);break;case MEMORY_WARNING_THRESHOLD:unhandledElement(reader,element);break;case MESSAGE_COUNTER_ENABLED:unhandledElement(reader,element);break;case MESSAGE_COUNTER_MAX_DAY_HISTORY:unhandledElement(reader,element);break;case MESSAGE_COUNTER_SAMPLE_PERIOD:unhandledElement(reader,element);break;case MESSAGE_EXPIRY_SCAN_PERIOD:unhandledElement(reader,element);break;case MESSAGE_EXPIRY_THREAD_PRIORITY:unhandledElement(reader,element);break;case PAGING_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(PAGING_DIRECTORY).set(directory);break;}case PERF_BLAST_PAGES:unhandledElement(reader,element);break;case PERSIST_DELIVERY_COUNT_BEFORE_DELIVERY:unhandledElement(reader,element);break;case PERSIST_ID_CACHE:unhandledElement(reader,element);break;case PERSISTENCE_ENABLED:{final String value=reader.getElementText();if (value != null && value.length() > 0) {boolean enabled=Boolean.valueOf(value.trim());operation.get(PERSISTENCE_ENABLED).set(enabled);}break;}case REFRESH_TIMEOUT:unhandledElement(reader,element);break;case REMOTING_INTERCEPTORS:unhandledElement(reader,element);break;case RUN_SYNC_SPEED_TEST:unhandledElement(reader,element);break;case SECURITY_ENABLED:unhandledElement(reader,element);break;case SECURITY_INVALIDATION_INTERVAL:unhandledElement(reader,element);break;case SECURITY_SETTINGS:{final ModelNode securitySettings=processSecuritySettings(reader);operation.get(SECURITY_SETTING).set(securitySettings);break;}case SERVER_DUMP_INTERVAL:unhandledElement(reader,element);break;case SHARED_STORE:unhandledElement(reader,element);break;case TRANSACTION_TIMEOUT:unhandledElement(reader,element);break;case TRANSACTION_TIMEOUT_SCAN_PERIOD:unhandledElement(reader,element);break;case WILD_CARD_ROUTING_ENABLED:unhandledElement(reader,element);break;case DEAD_LETTER_ADDRESS_NODE_NAME:unhandledElement(reader,element);break;case EXPIRY_ADDRESS_NODE_NAME:unhandledElement(reader,element);break;case REDELIVERY_DELAY_NODE_NAME:unhandledElement(reader,element);break;case MAX_DELIVERY_ATTEMPTS:unhandledElement(reader,element);break;case MAX_SIZE_BYTES_NODE_NAME:unhandledElement(reader,element);break;case ADDRESS_FULL_MESSAGE_POLICY_NODE_NAME:unhandledElement(reader,element);break;case PAGE_SIZE_BYTES_NODE_NAME:unhandledElement(reader,element);break;case MESSAGE_COUNTER_HISTORY_DAY_LIMIT_NODE_NAME:unhandledElement(reader,element);break;case LVQ_NODE_NAME:unhandledElement(reader,element);break;case REDISTRIBUTION_DELAY_NODE_NAME:unhandledElement(reader,element);break;case SEND_TO_DLA_ON_NO_ROUTE:unhandledElement(reader,element);break;case QUEUES:{final ModelNode queues=parseQueues(reader);operation.get(QUEUE).set(queues);break;}case SUBSYSTEM:break;default :throw ParseUtils.unexpectedElement(reader);} @AT@ 15169 @LENGTH@ 34
---MOV ExpressionStatement@@MethodInvocation:unhandledElement(reader,element) @TO@ SwitchStatement@@switch (element) {case ACCEPTORS:{    final ModelNode acceptors=processAcceptors(reader);    operation.get(ACCEPTOR).set(acceptors);    break;  }case ADDRESS_SETTINGS:{  final ModelNode addressSettings=processAddressSettings(reader);  operation.get(ADDRESS_SETTING).set(addressSettings);  break;}case ASYNC_CONNECTION_EXECUTION_ENABLED:unhandledElement(reader,element);break;case BACKUP:handleElementText(reader,element,operation);break;case BACKUP_CONNECTOR_REF:handleElementText(reader,element,operation);break;case BINDINGS_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(BINDINGS_DIRECTORY).set(directory);break;}case BROADCAST_PERIOD:handleElementText(reader,element,operation);break;case CLUSTERED:handleElementText(reader,element,operation);break;case CLUSTER_PASSWORD:handleElementText(reader,element,operation);break;case CLUSTER_USER:handleElementText(reader,element,operation);break;case CONNECTION_TTL_OVERRIDE:handleElementText(reader,element,operation);break;case CONNECTORS:{final ModelNode connectors=processConnectors(reader);operation.get(CONNECTOR).set(connectors);break;}case CONNECTOR_REF:unhandledElement(reader,element);break;case CREATE_BINDINGS_DIR:handleElementText(reader,element,operation);break;case CREATE_JOURNAL_DIR:handleElementText(reader,element,operation);break;case FILE_DEPLOYMENT_ENABLED:unhandledElement(reader,element);break;case GROUP_ADDRESS:unhandledElement(reader,element);break;case GROUP_PORT:unhandledElement(reader,element);break;case GROUPING_HANDLER:unhandledElement(reader,element);break;case ID_CACHE_SIZE:handleElementText(reader,element,operation);break;case JMX_DOMAIN:handleElementText(reader,element,operation);break;case JMX_MANAGEMENT_ENABLED:handleElementText(reader,element,operation);break;case JOURNAL_BUFFER_SIZE:unhandledElement(reader,element);break;case JOURNAL_BUFFER_TIMEOUT:handleElementText(reader,element,operation);break;case JOURNAL_COMPACT_MIN_FILES:handleElementText(reader,element,operation);break;case JOURNAL_COMPACT_PERCENTAGE:handleElementText(reader,element,operation);break;case JOURNAL_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(JOURNAL_DIRECTORY).set(directory);break;}case JOURNAL_MIN_FILES:{operation.get(JOURNAL_MIN_FILES).set(reader.getElementText());break;}case JOURNAL_SYNC_NON_TRANSACTIONAL:handleElementText(reader,element,operation);break;case JOURNAL_SYNC_TRANSACTIONAL:handleElementText(reader,element,operation);break;case JOURNAL_TYPE:{String journalType=reader.getElementText();if (journalType != null && journalType.length() > 0) {JournalType.valueOf(journalType.trim());operation.get(JOURNAL_TYPE).set(journalType.trim());}break;}case JOURNAL_FILE_SIZE:{String text=reader.getElementText();if (text != null && text.length() > 0) {operation.get(JOURNAL_FILE_SIZE).set(text.trim());}}break;case JOURNAL_MAX_IO:handleElementText(reader,element,operation);break;case LARGE_MESSAGES_DIRECTORY:{final ModelNode dir=parseDirectory(reader);operation.get(LARGE_MESSAGES_DIRECTORY).set(dir);break;}case LOCAL_BIND_ADDRESS:unhandledElement(reader,element);break;case LOCAL_BIND_PORT:unhandledElement(reader,element);break;case LOG_JOURNAL_WRITE_RATE:handleElementText(reader,element,operation);break;case MANAGEMENT_ADDRESS:unhandledElement(reader,element);break;case MANAGEMENT_NOTIFICATION_ADDRESS:unhandledElement(reader,element);break;case MEMORY_MEASURE_INTERVAL:unhandledElement(reader,element);break;case MEMORY_WARNING_THRESHOLD:unhandledElement(reader,element);break;case MESSAGE_COUNTER_ENABLED:unhandledElement(reader,element);break;case MESSAGE_COUNTER_MAX_DAY_HISTORY:unhandledElement(reader,element);break;case MESSAGE_COUNTER_SAMPLE_PERIOD:unhandledElement(reader,element);break;case MESSAGE_EXPIRY_SCAN_PERIOD:unhandledElement(reader,element);break;case MESSAGE_EXPIRY_THREAD_PRIORITY:unhandledElement(reader,element);break;case PAGING_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(PAGING_DIRECTORY).set(directory);break;}case PERF_BLAST_PAGES:unhandledElement(reader,element);break;case PERSIST_DELIVERY_COUNT_BEFORE_DELIVERY:unhandledElement(reader,element);break;case PERSIST_ID_CACHE:unhandledElement(reader,element);break;case PERSISTENCE_ENABLED:{final String value=reader.getElementText();if (value != null && value.length() > 0) {boolean enabled=Boolean.valueOf(value.trim());operation.get(PERSISTENCE_ENABLED).set(enabled);}break;}case REFRESH_TIMEOUT:unhandledElement(reader,element);break;case REMOTING_INTERCEPTORS:unhandledElement(reader,element);break;case RUN_SYNC_SPEED_TEST:unhandledElement(reader,element);break;case SECURITY_ENABLED:unhandledElement(reader,element);break;case SECURITY_INVALIDATION_INTERVAL:unhandledElement(reader,element);break;case SECURITY_SETTINGS:{final ModelNode securitySettings=processSecuritySettings(reader);operation.get(SECURITY_SETTING).set(securitySettings);break;}case SERVER_DUMP_INTERVAL:unhandledElement(reader,element);break;case SHARED_STORE:unhandledElement(reader,element);break;case TRANSACTION_TIMEOUT:unhandledElement(reader,element);break;case TRANSACTION_TIMEOUT_SCAN_PERIOD:unhandledElement(reader,element);break;case WILD_CARD_ROUTING_ENABLED:unhandledElement(reader,element);break;case DEAD_LETTER_ADDRESS_NODE_NAME:unhandledElement(reader,element);break;case EXPIRY_ADDRESS_NODE_NAME:unhandledElement(reader,element);break;case REDELIVERY_DELAY_NODE_NAME:unhandledElement(reader,element);break;case MAX_DELIVERY_ATTEMPTS:unhandledElement(reader,element);break;case MAX_SIZE_BYTES_NODE_NAME:unhandledElement(reader,element);break;case ADDRESS_FULL_MESSAGE_POLICY_NODE_NAME:unhandledElement(reader,element);break;case PAGE_SIZE_BYTES_NODE_NAME:unhandledElement(reader,element);break;case MESSAGE_COUNTER_HISTORY_DAY_LIMIT_NODE_NAME:unhandledElement(reader,element);break;case LVQ_NODE_NAME:unhandledElement(reader,element);break;case REDISTRIBUTION_DELAY_NODE_NAME:unhandledElement(reader,element);break;case SEND_TO_DLA_ON_NO_ROUTE:unhandledElement(reader,element);break;case QUEUES:{final ModelNode queues=parseQueues(reader);operation.get(QUEUE).set(queues);break;}case SUBSYSTEM:break;default :throw ParseUtils.unexpectedElement(reader);} @AT@ 15286 @LENGTH@ 34
---MOV ExpressionStatement@@MethodInvocation:unhandledElement(reader,element) @TO@ SwitchStatement@@switch (element) {case ACCEPTORS:{    final ModelNode acceptors=processAcceptors(reader);    operation.get(ACCEPTOR).set(acceptors);    break;  }case ADDRESS_SETTINGS:{  final ModelNode addressSettings=processAddressSettings(reader);  operation.get(ADDRESS_SETTING).set(addressSettings);  break;}case ASYNC_CONNECTION_EXECUTION_ENABLED:unhandledElement(reader,element);break;case BACKUP:handleElementText(reader,element,operation);break;case BACKUP_CONNECTOR_REF:handleElementText(reader,element,operation);break;case BINDINGS_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(BINDINGS_DIRECTORY).set(directory);break;}case BROADCAST_PERIOD:handleElementText(reader,element,operation);break;case CLUSTERED:handleElementText(reader,element,operation);break;case CLUSTER_PASSWORD:handleElementText(reader,element,operation);break;case CLUSTER_USER:handleElementText(reader,element,operation);break;case CONNECTION_TTL_OVERRIDE:handleElementText(reader,element,operation);break;case CONNECTORS:{final ModelNode connectors=processConnectors(reader);operation.get(CONNECTOR).set(connectors);break;}case CONNECTOR_REF:unhandledElement(reader,element);break;case CREATE_BINDINGS_DIR:handleElementText(reader,element,operation);break;case CREATE_JOURNAL_DIR:handleElementText(reader,element,operation);break;case FILE_DEPLOYMENT_ENABLED:unhandledElement(reader,element);break;case GROUP_ADDRESS:unhandledElement(reader,element);break;case GROUP_PORT:unhandledElement(reader,element);break;case GROUPING_HANDLER:unhandledElement(reader,element);break;case ID_CACHE_SIZE:handleElementText(reader,element,operation);break;case JMX_DOMAIN:handleElementText(reader,element,operation);break;case JMX_MANAGEMENT_ENABLED:handleElementText(reader,element,operation);break;case JOURNAL_BUFFER_SIZE:unhandledElement(reader,element);break;case JOURNAL_BUFFER_TIMEOUT:handleElementText(reader,element,operation);break;case JOURNAL_COMPACT_MIN_FILES:handleElementText(reader,element,operation);break;case JOURNAL_COMPACT_PERCENTAGE:handleElementText(reader,element,operation);break;case JOURNAL_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(JOURNAL_DIRECTORY).set(directory);break;}case JOURNAL_MIN_FILES:{operation.get(JOURNAL_MIN_FILES).set(reader.getElementText());break;}case JOURNAL_SYNC_NON_TRANSACTIONAL:handleElementText(reader,element,operation);break;case JOURNAL_SYNC_TRANSACTIONAL:handleElementText(reader,element,operation);break;case JOURNAL_TYPE:{String journalType=reader.getElementText();if (journalType != null && journalType.length() > 0) {JournalType.valueOf(journalType.trim());operation.get(JOURNAL_TYPE).set(journalType.trim());}break;}case JOURNAL_FILE_SIZE:{String text=reader.getElementText();if (text != null && text.length() > 0) {operation.get(JOURNAL_FILE_SIZE).set(text.trim());}}break;case JOURNAL_MAX_IO:handleElementText(reader,element,operation);break;case LARGE_MESSAGES_DIRECTORY:{final ModelNode dir=parseDirectory(reader);operation.get(LARGE_MESSAGES_DIRECTORY).set(dir);break;}case LOCAL_BIND_ADDRESS:unhandledElement(reader,element);break;case LOCAL_BIND_PORT:unhandledElement(reader,element);break;case LOG_JOURNAL_WRITE_RATE:handleElementText(reader,element,operation);break;case MANAGEMENT_ADDRESS:unhandledElement(reader,element);break;case MANAGEMENT_NOTIFICATION_ADDRESS:unhandledElement(reader,element);break;case MEMORY_MEASURE_INTERVAL:unhandledElement(reader,element);break;case MEMORY_WARNING_THRESHOLD:unhandledElement(reader,element);break;case MESSAGE_COUNTER_ENABLED:unhandledElement(reader,element);break;case MESSAGE_COUNTER_MAX_DAY_HISTORY:unhandledElement(reader,element);break;case MESSAGE_COUNTER_SAMPLE_PERIOD:unhandledElement(reader,element);break;case MESSAGE_EXPIRY_SCAN_PERIOD:unhandledElement(reader,element);break;case MESSAGE_EXPIRY_THREAD_PRIORITY:unhandledElement(reader,element);break;case PAGING_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(PAGING_DIRECTORY).set(directory);break;}case PERF_BLAST_PAGES:unhandledElement(reader,element);break;case PERSIST_DELIVERY_COUNT_BEFORE_DELIVERY:unhandledElement(reader,element);break;case PERSIST_ID_CACHE:unhandledElement(reader,element);break;case PERSISTENCE_ENABLED:{final String value=reader.getElementText();if (value != null && value.length() > 0) {boolean enabled=Boolean.valueOf(value.trim());operation.get(PERSISTENCE_ENABLED).set(enabled);}break;}case REFRESH_TIMEOUT:unhandledElement(reader,element);break;case REMOTING_INTERCEPTORS:unhandledElement(reader,element);break;case RUN_SYNC_SPEED_TEST:unhandledElement(reader,element);break;case SECURITY_ENABLED:unhandledElement(reader,element);break;case SECURITY_INVALIDATION_INTERVAL:unhandledElement(reader,element);break;case SECURITY_SETTINGS:{final ModelNode securitySettings=processSecuritySettings(reader);operation.get(SECURITY_SETTING).set(securitySettings);break;}case SERVER_DUMP_INTERVAL:unhandledElement(reader,element);break;case SHARED_STORE:unhandledElement(reader,element);break;case TRANSACTION_TIMEOUT:unhandledElement(reader,element);break;case TRANSACTION_TIMEOUT_SCAN_PERIOD:unhandledElement(reader,element);break;case WILD_CARD_ROUTING_ENABLED:unhandledElement(reader,element);break;case DEAD_LETTER_ADDRESS_NODE_NAME:unhandledElement(reader,element);break;case EXPIRY_ADDRESS_NODE_NAME:unhandledElement(reader,element);break;case REDELIVERY_DELAY_NODE_NAME:unhandledElement(reader,element);break;case MAX_DELIVERY_ATTEMPTS:unhandledElement(reader,element);break;case MAX_SIZE_BYTES_NODE_NAME:unhandledElement(reader,element);break;case ADDRESS_FULL_MESSAGE_POLICY_NODE_NAME:unhandledElement(reader,element);break;case PAGE_SIZE_BYTES_NODE_NAME:unhandledElement(reader,element);break;case MESSAGE_COUNTER_HISTORY_DAY_LIMIT_NODE_NAME:unhandledElement(reader,element);break;case LVQ_NODE_NAME:unhandledElement(reader,element);break;case REDISTRIBUTION_DELAY_NODE_NAME:unhandledElement(reader,element);break;case SEND_TO_DLA_ON_NO_ROUTE:unhandledElement(reader,element);break;case QUEUES:{final ModelNode queues=parseQueues(reader);operation.get(QUEUE).set(queues);break;}case SUBSYSTEM:break;default :throw ParseUtils.unexpectedElement(reader);} @AT@ 15410 @LENGTH@ 34
---MOV ExpressionStatement@@MethodInvocation:unhandledElement(reader,element) @TO@ SwitchStatement@@switch (element) {case ACCEPTORS:{    final ModelNode acceptors=processAcceptors(reader);    operation.get(ACCEPTOR).set(acceptors);    break;  }case ADDRESS_SETTINGS:{  final ModelNode addressSettings=processAddressSettings(reader);  operation.get(ADDRESS_SETTING).set(addressSettings);  break;}case ASYNC_CONNECTION_EXECUTION_ENABLED:unhandledElement(reader,element);break;case BACKUP:handleElementText(reader,element,operation);break;case BACKUP_CONNECTOR_REF:handleElementText(reader,element,operation);break;case BINDINGS_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(BINDINGS_DIRECTORY).set(directory);break;}case BROADCAST_PERIOD:handleElementText(reader,element,operation);break;case CLUSTERED:handleElementText(reader,element,operation);break;case CLUSTER_PASSWORD:handleElementText(reader,element,operation);break;case CLUSTER_USER:handleElementText(reader,element,operation);break;case CONNECTION_TTL_OVERRIDE:handleElementText(reader,element,operation);break;case CONNECTORS:{final ModelNode connectors=processConnectors(reader);operation.get(CONNECTOR).set(connectors);break;}case CONNECTOR_REF:unhandledElement(reader,element);break;case CREATE_BINDINGS_DIR:handleElementText(reader,element,operation);break;case CREATE_JOURNAL_DIR:handleElementText(reader,element,operation);break;case FILE_DEPLOYMENT_ENABLED:unhandledElement(reader,element);break;case GROUP_ADDRESS:unhandledElement(reader,element);break;case GROUP_PORT:unhandledElement(reader,element);break;case GROUPING_HANDLER:unhandledElement(reader,element);break;case ID_CACHE_SIZE:handleElementText(reader,element,operation);break;case JMX_DOMAIN:handleElementText(reader,element,operation);break;case JMX_MANAGEMENT_ENABLED:handleElementText(reader,element,operation);break;case JOURNAL_BUFFER_SIZE:unhandledElement(reader,element);break;case JOURNAL_BUFFER_TIMEOUT:handleElementText(reader,element,operation);break;case JOURNAL_COMPACT_MIN_FILES:handleElementText(reader,element,operation);break;case JOURNAL_COMPACT_PERCENTAGE:handleElementText(reader,element,operation);break;case JOURNAL_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(JOURNAL_DIRECTORY).set(directory);break;}case JOURNAL_MIN_FILES:{operation.get(JOURNAL_MIN_FILES).set(reader.getElementText());break;}case JOURNAL_SYNC_NON_TRANSACTIONAL:handleElementText(reader,element,operation);break;case JOURNAL_SYNC_TRANSACTIONAL:handleElementText(reader,element,operation);break;case JOURNAL_TYPE:{String journalType=reader.getElementText();if (journalType != null && journalType.length() > 0) {JournalType.valueOf(journalType.trim());operation.get(JOURNAL_TYPE).set(journalType.trim());}break;}case JOURNAL_FILE_SIZE:{String text=reader.getElementText();if (text != null && text.length() > 0) {operation.get(JOURNAL_FILE_SIZE).set(text.trim());}}break;case JOURNAL_MAX_IO:handleElementText(reader,element,operation);break;case LARGE_MESSAGES_DIRECTORY:{final ModelNode dir=parseDirectory(reader);operation.get(LARGE_MESSAGES_DIRECTORY).set(dir);break;}case LOCAL_BIND_ADDRESS:unhandledElement(reader,element);break;case LOCAL_BIND_PORT:unhandledElement(reader,element);break;case LOG_JOURNAL_WRITE_RATE:handleElementText(reader,element,operation);break;case MANAGEMENT_ADDRESS:unhandledElement(reader,element);break;case MANAGEMENT_NOTIFICATION_ADDRESS:unhandledElement(reader,element);break;case MEMORY_MEASURE_INTERVAL:unhandledElement(reader,element);break;case MEMORY_WARNING_THRESHOLD:unhandledElement(reader,element);break;case MESSAGE_COUNTER_ENABLED:unhandledElement(reader,element);break;case MESSAGE_COUNTER_MAX_DAY_HISTORY:unhandledElement(reader,element);break;case MESSAGE_COUNTER_SAMPLE_PERIOD:unhandledElement(reader,element);break;case MESSAGE_EXPIRY_SCAN_PERIOD:unhandledElement(reader,element);break;case MESSAGE_EXPIRY_THREAD_PRIORITY:unhandledElement(reader,element);break;case PAGING_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(PAGING_DIRECTORY).set(directory);break;}case PERF_BLAST_PAGES:unhandledElement(reader,element);break;case PERSIST_DELIVERY_COUNT_BEFORE_DELIVERY:unhandledElement(reader,element);break;case PERSIST_ID_CACHE:unhandledElement(reader,element);break;case PERSISTENCE_ENABLED:{final String value=reader.getElementText();if (value != null && value.length() > 0) {boolean enabled=Boolean.valueOf(value.trim());operation.get(PERSISTENCE_ENABLED).set(enabled);}break;}case REFRESH_TIMEOUT:unhandledElement(reader,element);break;case REMOTING_INTERCEPTORS:unhandledElement(reader,element);break;case RUN_SYNC_SPEED_TEST:unhandledElement(reader,element);break;case SECURITY_ENABLED:unhandledElement(reader,element);break;case SECURITY_INVALIDATION_INTERVAL:unhandledElement(reader,element);break;case SECURITY_SETTINGS:{final ModelNode securitySettings=processSecuritySettings(reader);operation.get(SECURITY_SETTING).set(securitySettings);break;}case SERVER_DUMP_INTERVAL:unhandledElement(reader,element);break;case SHARED_STORE:unhandledElement(reader,element);break;case TRANSACTION_TIMEOUT:unhandledElement(reader,element);break;case TRANSACTION_TIMEOUT_SCAN_PERIOD:unhandledElement(reader,element);break;case WILD_CARD_ROUTING_ENABLED:unhandledElement(reader,element);break;case DEAD_LETTER_ADDRESS_NODE_NAME:unhandledElement(reader,element);break;case EXPIRY_ADDRESS_NODE_NAME:unhandledElement(reader,element);break;case REDELIVERY_DELAY_NODE_NAME:unhandledElement(reader,element);break;case MAX_DELIVERY_ATTEMPTS:unhandledElement(reader,element);break;case MAX_SIZE_BYTES_NODE_NAME:unhandledElement(reader,element);break;case ADDRESS_FULL_MESSAGE_POLICY_NODE_NAME:unhandledElement(reader,element);break;case PAGE_SIZE_BYTES_NODE_NAME:unhandledElement(reader,element);break;case MESSAGE_COUNTER_HISTORY_DAY_LIMIT_NODE_NAME:unhandledElement(reader,element);break;case LVQ_NODE_NAME:unhandledElement(reader,element);break;case REDISTRIBUTION_DELAY_NODE_NAME:unhandledElement(reader,element);break;case SEND_TO_DLA_ON_NO_ROUTE:unhandledElement(reader,element);break;case QUEUES:{final ModelNode queues=parseQueues(reader);operation.get(QUEUE).set(queues);break;}case SUBSYSTEM:break;default :throw ParseUtils.unexpectedElement(reader);} @AT@ 15546 @LENGTH@ 34
---MOV ExpressionStatement@@MethodInvocation:unhandledElement(reader,element) @TO@ SwitchStatement@@switch (element) {case ACCEPTORS:{    final ModelNode acceptors=processAcceptors(reader);    operation.get(ACCEPTOR).set(acceptors);    break;  }case ADDRESS_SETTINGS:{  final ModelNode addressSettings=processAddressSettings(reader);  operation.get(ADDRESS_SETTING).set(addressSettings);  break;}case ASYNC_CONNECTION_EXECUTION_ENABLED:unhandledElement(reader,element);break;case BACKUP:handleElementText(reader,element,operation);break;case BACKUP_CONNECTOR_REF:handleElementText(reader,element,operation);break;case BINDINGS_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(BINDINGS_DIRECTORY).set(directory);break;}case BROADCAST_PERIOD:handleElementText(reader,element,operation);break;case CLUSTERED:handleElementText(reader,element,operation);break;case CLUSTER_PASSWORD:handleElementText(reader,element,operation);break;case CLUSTER_USER:handleElementText(reader,element,operation);break;case CONNECTION_TTL_OVERRIDE:handleElementText(reader,element,operation);break;case CONNECTORS:{final ModelNode connectors=processConnectors(reader);operation.get(CONNECTOR).set(connectors);break;}case CONNECTOR_REF:unhandledElement(reader,element);break;case CREATE_BINDINGS_DIR:handleElementText(reader,element,operation);break;case CREATE_JOURNAL_DIR:handleElementText(reader,element,operation);break;case FILE_DEPLOYMENT_ENABLED:unhandledElement(reader,element);break;case GROUP_ADDRESS:unhandledElement(reader,element);break;case GROUP_PORT:unhandledElement(reader,element);break;case GROUPING_HANDLER:unhandledElement(reader,element);break;case ID_CACHE_SIZE:handleElementText(reader,element,operation);break;case JMX_DOMAIN:handleElementText(reader,element,operation);break;case JMX_MANAGEMENT_ENABLED:handleElementText(reader,element,operation);break;case JOURNAL_BUFFER_SIZE:unhandledElement(reader,element);break;case JOURNAL_BUFFER_TIMEOUT:handleElementText(reader,element,operation);break;case JOURNAL_COMPACT_MIN_FILES:handleElementText(reader,element,operation);break;case JOURNAL_COMPACT_PERCENTAGE:handleElementText(reader,element,operation);break;case JOURNAL_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(JOURNAL_DIRECTORY).set(directory);break;}case JOURNAL_MIN_FILES:{operation.get(JOURNAL_MIN_FILES).set(reader.getElementText());break;}case JOURNAL_SYNC_NON_TRANSACTIONAL:handleElementText(reader,element,operation);break;case JOURNAL_SYNC_TRANSACTIONAL:handleElementText(reader,element,operation);break;case JOURNAL_TYPE:{String journalType=reader.getElementText();if (journalType != null && journalType.length() > 0) {JournalType.valueOf(journalType.trim());operation.get(JOURNAL_TYPE).set(journalType.trim());}break;}case JOURNAL_FILE_SIZE:{String text=reader.getElementText();if (text != null && text.length() > 0) {operation.get(JOURNAL_FILE_SIZE).set(text.trim());}}break;case JOURNAL_MAX_IO:handleElementText(reader,element,operation);break;case LARGE_MESSAGES_DIRECTORY:{final ModelNode dir=parseDirectory(reader);operation.get(LARGE_MESSAGES_DIRECTORY).set(dir);break;}case LOCAL_BIND_ADDRESS:unhandledElement(reader,element);break;case LOCAL_BIND_PORT:unhandledElement(reader,element);break;case LOG_JOURNAL_WRITE_RATE:handleElementText(reader,element,operation);break;case MANAGEMENT_ADDRESS:unhandledElement(reader,element);break;case MANAGEMENT_NOTIFICATION_ADDRESS:unhandledElement(reader,element);break;case MEMORY_MEASURE_INTERVAL:unhandledElement(reader,element);break;case MEMORY_WARNING_THRESHOLD:unhandledElement(reader,element);break;case MESSAGE_COUNTER_ENABLED:unhandledElement(reader,element);break;case MESSAGE_COUNTER_MAX_DAY_HISTORY:unhandledElement(reader,element);break;case MESSAGE_COUNTER_SAMPLE_PERIOD:unhandledElement(reader,element);break;case MESSAGE_EXPIRY_SCAN_PERIOD:unhandledElement(reader,element);break;case MESSAGE_EXPIRY_THREAD_PRIORITY:unhandledElement(reader,element);break;case PAGING_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(PAGING_DIRECTORY).set(directory);break;}case PERF_BLAST_PAGES:unhandledElement(reader,element);break;case PERSIST_DELIVERY_COUNT_BEFORE_DELIVERY:unhandledElement(reader,element);break;case PERSIST_ID_CACHE:unhandledElement(reader,element);break;case PERSISTENCE_ENABLED:{final String value=reader.getElementText();if (value != null && value.length() > 0) {boolean enabled=Boolean.valueOf(value.trim());operation.get(PERSISTENCE_ENABLED).set(enabled);}break;}case REFRESH_TIMEOUT:unhandledElement(reader,element);break;case REMOTING_INTERCEPTORS:unhandledElement(reader,element);break;case RUN_SYNC_SPEED_TEST:unhandledElement(reader,element);break;case SECURITY_ENABLED:unhandledElement(reader,element);break;case SECURITY_INVALIDATION_INTERVAL:unhandledElement(reader,element);break;case SECURITY_SETTINGS:{final ModelNode securitySettings=processSecuritySettings(reader);operation.get(SECURITY_SETTING).set(securitySettings);break;}case SERVER_DUMP_INTERVAL:unhandledElement(reader,element);break;case SHARED_STORE:unhandledElement(reader,element);break;case TRANSACTION_TIMEOUT:unhandledElement(reader,element);break;case TRANSACTION_TIMEOUT_SCAN_PERIOD:unhandledElement(reader,element);break;case WILD_CARD_ROUTING_ENABLED:unhandledElement(reader,element);break;case DEAD_LETTER_ADDRESS_NODE_NAME:unhandledElement(reader,element);break;case EXPIRY_ADDRESS_NODE_NAME:unhandledElement(reader,element);break;case REDELIVERY_DELAY_NODE_NAME:unhandledElement(reader,element);break;case MAX_DELIVERY_ATTEMPTS:unhandledElement(reader,element);break;case MAX_SIZE_BYTES_NODE_NAME:unhandledElement(reader,element);break;case ADDRESS_FULL_MESSAGE_POLICY_NODE_NAME:unhandledElement(reader,element);break;case PAGE_SIZE_BYTES_NODE_NAME:unhandledElement(reader,element);break;case MESSAGE_COUNTER_HISTORY_DAY_LIMIT_NODE_NAME:unhandledElement(reader,element);break;case LVQ_NODE_NAME:unhandledElement(reader,element);break;case REDISTRIBUTION_DELAY_NODE_NAME:unhandledElement(reader,element);break;case SEND_TO_DLA_ON_NO_ROUTE:unhandledElement(reader,element);break;case QUEUES:{final ModelNode queues=parseQueues(reader);operation.get(QUEUE).set(queues);break;}case SUBSYSTEM:break;default :throw ParseUtils.unexpectedElement(reader);} @AT@ 15676 @LENGTH@ 34
---MOV ExpressionStatement@@MethodInvocation:unhandledElement(reader,element) @TO@ SwitchStatement@@switch (element) {case ACCEPTORS:{    final ModelNode acceptors=processAcceptors(reader);    operation.get(ACCEPTOR).set(acceptors);    break;  }case ADDRESS_SETTINGS:{  final ModelNode addressSettings=processAddressSettings(reader);  operation.get(ADDRESS_SETTING).set(addressSettings);  break;}case ASYNC_CONNECTION_EXECUTION_ENABLED:unhandledElement(reader,element);break;case BACKUP:handleElementText(reader,element,operation);break;case BACKUP_CONNECTOR_REF:handleElementText(reader,element,operation);break;case BINDINGS_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(BINDINGS_DIRECTORY).set(directory);break;}case BROADCAST_PERIOD:handleElementText(reader,element,operation);break;case CLUSTERED:handleElementText(reader,element,operation);break;case CLUSTER_PASSWORD:handleElementText(reader,element,operation);break;case CLUSTER_USER:handleElementText(reader,element,operation);break;case CONNECTION_TTL_OVERRIDE:handleElementText(reader,element,operation);break;case CONNECTORS:{final ModelNode connectors=processConnectors(reader);operation.get(CONNECTOR).set(connectors);break;}case CONNECTOR_REF:unhandledElement(reader,element);break;case CREATE_BINDINGS_DIR:handleElementText(reader,element,operation);break;case CREATE_JOURNAL_DIR:handleElementText(reader,element,operation);break;case FILE_DEPLOYMENT_ENABLED:unhandledElement(reader,element);break;case GROUP_ADDRESS:unhandledElement(reader,element);break;case GROUP_PORT:unhandledElement(reader,element);break;case GROUPING_HANDLER:unhandledElement(reader,element);break;case ID_CACHE_SIZE:handleElementText(reader,element,operation);break;case JMX_DOMAIN:handleElementText(reader,element,operation);break;case JMX_MANAGEMENT_ENABLED:handleElementText(reader,element,operation);break;case JOURNAL_BUFFER_SIZE:unhandledElement(reader,element);break;case JOURNAL_BUFFER_TIMEOUT:handleElementText(reader,element,operation);break;case JOURNAL_COMPACT_MIN_FILES:handleElementText(reader,element,operation);break;case JOURNAL_COMPACT_PERCENTAGE:handleElementText(reader,element,operation);break;case JOURNAL_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(JOURNAL_DIRECTORY).set(directory);break;}case JOURNAL_MIN_FILES:{operation.get(JOURNAL_MIN_FILES).set(reader.getElementText());break;}case JOURNAL_SYNC_NON_TRANSACTIONAL:handleElementText(reader,element,operation);break;case JOURNAL_SYNC_TRANSACTIONAL:handleElementText(reader,element,operation);break;case JOURNAL_TYPE:{String journalType=reader.getElementText();if (journalType != null && journalType.length() > 0) {JournalType.valueOf(journalType.trim());operation.get(JOURNAL_TYPE).set(journalType.trim());}break;}case JOURNAL_FILE_SIZE:{String text=reader.getElementText();if (text != null && text.length() > 0) {operation.get(JOURNAL_FILE_SIZE).set(text.trim());}}break;case JOURNAL_MAX_IO:handleElementText(reader,element,operation);break;case LARGE_MESSAGES_DIRECTORY:{final ModelNode dir=parseDirectory(reader);operation.get(LARGE_MESSAGES_DIRECTORY).set(dir);break;}case LOCAL_BIND_ADDRESS:unhandledElement(reader,element);break;case LOCAL_BIND_PORT:unhandledElement(reader,element);break;case LOG_JOURNAL_WRITE_RATE:handleElementText(reader,element,operation);break;case MANAGEMENT_ADDRESS:unhandledElement(reader,element);break;case MANAGEMENT_NOTIFICATION_ADDRESS:unhandledElement(reader,element);break;case MEMORY_MEASURE_INTERVAL:unhandledElement(reader,element);break;case MEMORY_WARNING_THRESHOLD:unhandledElement(reader,element);break;case MESSAGE_COUNTER_ENABLED:unhandledElement(reader,element);break;case MESSAGE_COUNTER_MAX_DAY_HISTORY:unhandledElement(reader,element);break;case MESSAGE_COUNTER_SAMPLE_PERIOD:unhandledElement(reader,element);break;case MESSAGE_EXPIRY_SCAN_PERIOD:unhandledElement(reader,element);break;case MESSAGE_EXPIRY_THREAD_PRIORITY:unhandledElement(reader,element);break;case PAGING_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(PAGING_DIRECTORY).set(directory);break;}case PERF_BLAST_PAGES:unhandledElement(reader,element);break;case PERSIST_DELIVERY_COUNT_BEFORE_DELIVERY:unhandledElement(reader,element);break;case PERSIST_ID_CACHE:unhandledElement(reader,element);break;case PERSISTENCE_ENABLED:{final String value=reader.getElementText();if (value != null && value.length() > 0) {boolean enabled=Boolean.valueOf(value.trim());operation.get(PERSISTENCE_ENABLED).set(enabled);}break;}case REFRESH_TIMEOUT:unhandledElement(reader,element);break;case REMOTING_INTERCEPTORS:unhandledElement(reader,element);break;case RUN_SYNC_SPEED_TEST:unhandledElement(reader,element);break;case SECURITY_ENABLED:unhandledElement(reader,element);break;case SECURITY_INVALIDATION_INTERVAL:unhandledElement(reader,element);break;case SECURITY_SETTINGS:{final ModelNode securitySettings=processSecuritySettings(reader);operation.get(SECURITY_SETTING).set(securitySettings);break;}case SERVER_DUMP_INTERVAL:unhandledElement(reader,element);break;case SHARED_STORE:unhandledElement(reader,element);break;case TRANSACTION_TIMEOUT:unhandledElement(reader,element);break;case TRANSACTION_TIMEOUT_SCAN_PERIOD:unhandledElement(reader,element);break;case WILD_CARD_ROUTING_ENABLED:unhandledElement(reader,element);break;case DEAD_LETTER_ADDRESS_NODE_NAME:unhandledElement(reader,element);break;case EXPIRY_ADDRESS_NODE_NAME:unhandledElement(reader,element);break;case REDELIVERY_DELAY_NODE_NAME:unhandledElement(reader,element);break;case MAX_DELIVERY_ATTEMPTS:unhandledElement(reader,element);break;case MAX_SIZE_BYTES_NODE_NAME:unhandledElement(reader,element);break;case ADDRESS_FULL_MESSAGE_POLICY_NODE_NAME:unhandledElement(reader,element);break;case PAGE_SIZE_BYTES_NODE_NAME:unhandledElement(reader,element);break;case MESSAGE_COUNTER_HISTORY_DAY_LIMIT_NODE_NAME:unhandledElement(reader,element);break;case LVQ_NODE_NAME:unhandledElement(reader,element);break;case REDISTRIBUTION_DELAY_NODE_NAME:unhandledElement(reader,element);break;case SEND_TO_DLA_ON_NO_ROUTE:unhandledElement(reader,element);break;case QUEUES:{final ModelNode queues=parseQueues(reader);operation.get(QUEUE).set(queues);break;}case SUBSYSTEM:break;default :throw ParseUtils.unexpectedElement(reader);} @AT@ 15810 @LENGTH@ 34
---MOV ExpressionStatement@@MethodInvocation:unhandledElement(reader,element) @TO@ SwitchStatement@@switch (element) {case ACCEPTORS:{    final ModelNode acceptors=processAcceptors(reader);    operation.get(ACCEPTOR).set(acceptors);    break;  }case ADDRESS_SETTINGS:{  final ModelNode addressSettings=processAddressSettings(reader);  operation.get(ADDRESS_SETTING).set(addressSettings);  break;}case ASYNC_CONNECTION_EXECUTION_ENABLED:unhandledElement(reader,element);break;case BACKUP:handleElementText(reader,element,operation);break;case BACKUP_CONNECTOR_REF:handleElementText(reader,element,operation);break;case BINDINGS_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(BINDINGS_DIRECTORY).set(directory);break;}case BROADCAST_PERIOD:handleElementText(reader,element,operation);break;case CLUSTERED:handleElementText(reader,element,operation);break;case CLUSTER_PASSWORD:handleElementText(reader,element,operation);break;case CLUSTER_USER:handleElementText(reader,element,operation);break;case CONNECTION_TTL_OVERRIDE:handleElementText(reader,element,operation);break;case CONNECTORS:{final ModelNode connectors=processConnectors(reader);operation.get(CONNECTOR).set(connectors);break;}case CONNECTOR_REF:unhandledElement(reader,element);break;case CREATE_BINDINGS_DIR:handleElementText(reader,element,operation);break;case CREATE_JOURNAL_DIR:handleElementText(reader,element,operation);break;case FILE_DEPLOYMENT_ENABLED:unhandledElement(reader,element);break;case GROUP_ADDRESS:unhandledElement(reader,element);break;case GROUP_PORT:unhandledElement(reader,element);break;case GROUPING_HANDLER:unhandledElement(reader,element);break;case ID_CACHE_SIZE:handleElementText(reader,element,operation);break;case JMX_DOMAIN:handleElementText(reader,element,operation);break;case JMX_MANAGEMENT_ENABLED:handleElementText(reader,element,operation);break;case JOURNAL_BUFFER_SIZE:unhandledElement(reader,element);break;case JOURNAL_BUFFER_TIMEOUT:handleElementText(reader,element,operation);break;case JOURNAL_COMPACT_MIN_FILES:handleElementText(reader,element,operation);break;case JOURNAL_COMPACT_PERCENTAGE:handleElementText(reader,element,operation);break;case JOURNAL_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(JOURNAL_DIRECTORY).set(directory);break;}case JOURNAL_MIN_FILES:{operation.get(JOURNAL_MIN_FILES).set(reader.getElementText());break;}case JOURNAL_SYNC_NON_TRANSACTIONAL:handleElementText(reader,element,operation);break;case JOURNAL_SYNC_TRANSACTIONAL:handleElementText(reader,element,operation);break;case JOURNAL_TYPE:{String journalType=reader.getElementText();if (journalType != null && journalType.length() > 0) {JournalType.valueOf(journalType.trim());operation.get(JOURNAL_TYPE).set(journalType.trim());}break;}case JOURNAL_FILE_SIZE:{String text=reader.getElementText();if (text != null && text.length() > 0) {operation.get(JOURNAL_FILE_SIZE).set(text.trim());}}break;case JOURNAL_MAX_IO:handleElementText(reader,element,operation);break;case LARGE_MESSAGES_DIRECTORY:{final ModelNode dir=parseDirectory(reader);operation.get(LARGE_MESSAGES_DIRECTORY).set(dir);break;}case LOCAL_BIND_ADDRESS:unhandledElement(reader,element);break;case LOCAL_BIND_PORT:unhandledElement(reader,element);break;case LOG_JOURNAL_WRITE_RATE:handleElementText(reader,element,operation);break;case MANAGEMENT_ADDRESS:unhandledElement(reader,element);break;case MANAGEMENT_NOTIFICATION_ADDRESS:unhandledElement(reader,element);break;case MEMORY_MEASURE_INTERVAL:unhandledElement(reader,element);break;case MEMORY_WARNING_THRESHOLD:unhandledElement(reader,element);break;case MESSAGE_COUNTER_ENABLED:unhandledElement(reader,element);break;case MESSAGE_COUNTER_MAX_DAY_HISTORY:unhandledElement(reader,element);break;case MESSAGE_COUNTER_SAMPLE_PERIOD:unhandledElement(reader,element);break;case MESSAGE_EXPIRY_SCAN_PERIOD:unhandledElement(reader,element);break;case MESSAGE_EXPIRY_THREAD_PRIORITY:unhandledElement(reader,element);break;case PAGING_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(PAGING_DIRECTORY).set(directory);break;}case PERF_BLAST_PAGES:unhandledElement(reader,element);break;case PERSIST_DELIVERY_COUNT_BEFORE_DELIVERY:unhandledElement(reader,element);break;case PERSIST_ID_CACHE:unhandledElement(reader,element);break;case PERSISTENCE_ENABLED:{final String value=reader.getElementText();if (value != null && value.length() > 0) {boolean enabled=Boolean.valueOf(value.trim());operation.get(PERSISTENCE_ENABLED).set(enabled);}break;}case REFRESH_TIMEOUT:unhandledElement(reader,element);break;case REMOTING_INTERCEPTORS:unhandledElement(reader,element);break;case RUN_SYNC_SPEED_TEST:unhandledElement(reader,element);break;case SECURITY_ENABLED:unhandledElement(reader,element);break;case SECURITY_INVALIDATION_INTERVAL:unhandledElement(reader,element);break;case SECURITY_SETTINGS:{final ModelNode securitySettings=processSecuritySettings(reader);operation.get(SECURITY_SETTING).set(securitySettings);break;}case SERVER_DUMP_INTERVAL:unhandledElement(reader,element);break;case SHARED_STORE:unhandledElement(reader,element);break;case TRANSACTION_TIMEOUT:unhandledElement(reader,element);break;case TRANSACTION_TIMEOUT_SCAN_PERIOD:unhandledElement(reader,element);break;case WILD_CARD_ROUTING_ENABLED:unhandledElement(reader,element);break;case DEAD_LETTER_ADDRESS_NODE_NAME:unhandledElement(reader,element);break;case EXPIRY_ADDRESS_NODE_NAME:unhandledElement(reader,element);break;case REDELIVERY_DELAY_NODE_NAME:unhandledElement(reader,element);break;case MAX_DELIVERY_ATTEMPTS:unhandledElement(reader,element);break;case MAX_SIZE_BYTES_NODE_NAME:unhandledElement(reader,element);break;case ADDRESS_FULL_MESSAGE_POLICY_NODE_NAME:unhandledElement(reader,element);break;case PAGE_SIZE_BYTES_NODE_NAME:unhandledElement(reader,element);break;case MESSAGE_COUNTER_HISTORY_DAY_LIMIT_NODE_NAME:unhandledElement(reader,element);break;case LVQ_NODE_NAME:unhandledElement(reader,element);break;case REDISTRIBUTION_DELAY_NODE_NAME:unhandledElement(reader,element);break;case SEND_TO_DLA_ON_NO_ROUTE:unhandledElement(reader,element);break;case QUEUES:{final ModelNode queues=parseQueues(reader);operation.get(QUEUE).set(queues);break;}case SUBSYSTEM:break;default :throw ParseUtils.unexpectedElement(reader);} @AT@ 15939 @LENGTH@ 34
---MOV ExpressionStatement@@MethodInvocation:unhandledElement(reader,element) @TO@ SwitchStatement@@switch (element) {case ACCEPTORS:{    final ModelNode acceptors=processAcceptors(reader);    operation.get(ACCEPTOR).set(acceptors);    break;  }case ADDRESS_SETTINGS:{  final ModelNode addressSettings=processAddressSettings(reader);  operation.get(ADDRESS_SETTING).set(addressSettings);  break;}case ASYNC_CONNECTION_EXECUTION_ENABLED:unhandledElement(reader,element);break;case BACKUP:handleElementText(reader,element,operation);break;case BACKUP_CONNECTOR_REF:handleElementText(reader,element,operation);break;case BINDINGS_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(BINDINGS_DIRECTORY).set(directory);break;}case BROADCAST_PERIOD:handleElementText(reader,element,operation);break;case CLUSTERED:handleElementText(reader,element,operation);break;case CLUSTER_PASSWORD:handleElementText(reader,element,operation);break;case CLUSTER_USER:handleElementText(reader,element,operation);break;case CONNECTION_TTL_OVERRIDE:handleElementText(reader,element,operation);break;case CONNECTORS:{final ModelNode connectors=processConnectors(reader);operation.get(CONNECTOR).set(connectors);break;}case CONNECTOR_REF:unhandledElement(reader,element);break;case CREATE_BINDINGS_DIR:handleElementText(reader,element,operation);break;case CREATE_JOURNAL_DIR:handleElementText(reader,element,operation);break;case FILE_DEPLOYMENT_ENABLED:unhandledElement(reader,element);break;case GROUP_ADDRESS:unhandledElement(reader,element);break;case GROUP_PORT:unhandledElement(reader,element);break;case GROUPING_HANDLER:unhandledElement(reader,element);break;case ID_CACHE_SIZE:handleElementText(reader,element,operation);break;case JMX_DOMAIN:handleElementText(reader,element,operation);break;case JMX_MANAGEMENT_ENABLED:handleElementText(reader,element,operation);break;case JOURNAL_BUFFER_SIZE:unhandledElement(reader,element);break;case JOURNAL_BUFFER_TIMEOUT:handleElementText(reader,element,operation);break;case JOURNAL_COMPACT_MIN_FILES:handleElementText(reader,element,operation);break;case JOURNAL_COMPACT_PERCENTAGE:handleElementText(reader,element,operation);break;case JOURNAL_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(JOURNAL_DIRECTORY).set(directory);break;}case JOURNAL_MIN_FILES:{operation.get(JOURNAL_MIN_FILES).set(reader.getElementText());break;}case JOURNAL_SYNC_NON_TRANSACTIONAL:handleElementText(reader,element,operation);break;case JOURNAL_SYNC_TRANSACTIONAL:handleElementText(reader,element,operation);break;case JOURNAL_TYPE:{String journalType=reader.getElementText();if (journalType != null && journalType.length() > 0) {JournalType.valueOf(journalType.trim());operation.get(JOURNAL_TYPE).set(journalType.trim());}break;}case JOURNAL_FILE_SIZE:{String text=reader.getElementText();if (text != null && text.length() > 0) {operation.get(JOURNAL_FILE_SIZE).set(text.trim());}}break;case JOURNAL_MAX_IO:handleElementText(reader,element,operation);break;case LARGE_MESSAGES_DIRECTORY:{final ModelNode dir=parseDirectory(reader);operation.get(LARGE_MESSAGES_DIRECTORY).set(dir);break;}case LOCAL_BIND_ADDRESS:unhandledElement(reader,element);break;case LOCAL_BIND_PORT:unhandledElement(reader,element);break;case LOG_JOURNAL_WRITE_RATE:handleElementText(reader,element,operation);break;case MANAGEMENT_ADDRESS:unhandledElement(reader,element);break;case MANAGEMENT_NOTIFICATION_ADDRESS:unhandledElement(reader,element);break;case MEMORY_MEASURE_INTERVAL:unhandledElement(reader,element);break;case MEMORY_WARNING_THRESHOLD:unhandledElement(reader,element);break;case MESSAGE_COUNTER_ENABLED:unhandledElement(reader,element);break;case MESSAGE_COUNTER_MAX_DAY_HISTORY:unhandledElement(reader,element);break;case MESSAGE_COUNTER_SAMPLE_PERIOD:unhandledElement(reader,element);break;case MESSAGE_EXPIRY_SCAN_PERIOD:unhandledElement(reader,element);break;case MESSAGE_EXPIRY_THREAD_PRIORITY:unhandledElement(reader,element);break;case PAGING_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(PAGING_DIRECTORY).set(directory);break;}case PERF_BLAST_PAGES:unhandledElement(reader,element);break;case PERSIST_DELIVERY_COUNT_BEFORE_DELIVERY:unhandledElement(reader,element);break;case PERSIST_ID_CACHE:unhandledElement(reader,element);break;case PERSISTENCE_ENABLED:{final String value=reader.getElementText();if (value != null && value.length() > 0) {boolean enabled=Boolean.valueOf(value.trim());operation.get(PERSISTENCE_ENABLED).set(enabled);}break;}case REFRESH_TIMEOUT:unhandledElement(reader,element);break;case REMOTING_INTERCEPTORS:unhandledElement(reader,element);break;case RUN_SYNC_SPEED_TEST:unhandledElement(reader,element);break;case SECURITY_ENABLED:unhandledElement(reader,element);break;case SECURITY_INVALIDATION_INTERVAL:unhandledElement(reader,element);break;case SECURITY_SETTINGS:{final ModelNode securitySettings=processSecuritySettings(reader);operation.get(SECURITY_SETTING).set(securitySettings);break;}case SERVER_DUMP_INTERVAL:unhandledElement(reader,element);break;case SHARED_STORE:unhandledElement(reader,element);break;case TRANSACTION_TIMEOUT:unhandledElement(reader,element);break;case TRANSACTION_TIMEOUT_SCAN_PERIOD:unhandledElement(reader,element);break;case WILD_CARD_ROUTING_ENABLED:unhandledElement(reader,element);break;case DEAD_LETTER_ADDRESS_NODE_NAME:unhandledElement(reader,element);break;case EXPIRY_ADDRESS_NODE_NAME:unhandledElement(reader,element);break;case REDELIVERY_DELAY_NODE_NAME:unhandledElement(reader,element);break;case MAX_DELIVERY_ATTEMPTS:unhandledElement(reader,element);break;case MAX_SIZE_BYTES_NODE_NAME:unhandledElement(reader,element);break;case ADDRESS_FULL_MESSAGE_POLICY_NODE_NAME:unhandledElement(reader,element);break;case PAGE_SIZE_BYTES_NODE_NAME:unhandledElement(reader,element);break;case MESSAGE_COUNTER_HISTORY_DAY_LIMIT_NODE_NAME:unhandledElement(reader,element);break;case LVQ_NODE_NAME:unhandledElement(reader,element);break;case REDISTRIBUTION_DELAY_NODE_NAME:unhandledElement(reader,element);break;case SEND_TO_DLA_ON_NO_ROUTE:unhandledElement(reader,element);break;case QUEUES:{final ModelNode queues=parseQueues(reader);operation.get(QUEUE).set(queues);break;}case SUBSYSTEM:break;default :throw ParseUtils.unexpectedElement(reader);} @AT@ 16070 @LENGTH@ 34
---MOV ExpressionStatement@@MethodInvocation:unhandledElement(reader,element) @TO@ SwitchStatement@@switch (element) {case ACCEPTORS:{    final ModelNode acceptors=processAcceptors(reader);    operation.get(ACCEPTOR).set(acceptors);    break;  }case ADDRESS_SETTINGS:{  final ModelNode addressSettings=processAddressSettings(reader);  operation.get(ADDRESS_SETTING).set(addressSettings);  break;}case ASYNC_CONNECTION_EXECUTION_ENABLED:unhandledElement(reader,element);break;case BACKUP:handleElementText(reader,element,operation);break;case BACKUP_CONNECTOR_REF:handleElementText(reader,element,operation);break;case BINDINGS_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(BINDINGS_DIRECTORY).set(directory);break;}case BROADCAST_PERIOD:handleElementText(reader,element,operation);break;case CLUSTERED:handleElementText(reader,element,operation);break;case CLUSTER_PASSWORD:handleElementText(reader,element,operation);break;case CLUSTER_USER:handleElementText(reader,element,operation);break;case CONNECTION_TTL_OVERRIDE:handleElementText(reader,element,operation);break;case CONNECTORS:{final ModelNode connectors=processConnectors(reader);operation.get(CONNECTOR).set(connectors);break;}case CONNECTOR_REF:unhandledElement(reader,element);break;case CREATE_BINDINGS_DIR:handleElementText(reader,element,operation);break;case CREATE_JOURNAL_DIR:handleElementText(reader,element,operation);break;case FILE_DEPLOYMENT_ENABLED:unhandledElement(reader,element);break;case GROUP_ADDRESS:unhandledElement(reader,element);break;case GROUP_PORT:unhandledElement(reader,element);break;case GROUPING_HANDLER:unhandledElement(reader,element);break;case ID_CACHE_SIZE:handleElementText(reader,element,operation);break;case JMX_DOMAIN:handleElementText(reader,element,operation);break;case JMX_MANAGEMENT_ENABLED:handleElementText(reader,element,operation);break;case JOURNAL_BUFFER_SIZE:unhandledElement(reader,element);break;case JOURNAL_BUFFER_TIMEOUT:handleElementText(reader,element,operation);break;case JOURNAL_COMPACT_MIN_FILES:handleElementText(reader,element,operation);break;case JOURNAL_COMPACT_PERCENTAGE:handleElementText(reader,element,operation);break;case JOURNAL_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(JOURNAL_DIRECTORY).set(directory);break;}case JOURNAL_MIN_FILES:{operation.get(JOURNAL_MIN_FILES).set(reader.getElementText());break;}case JOURNAL_SYNC_NON_TRANSACTIONAL:handleElementText(reader,element,operation);break;case JOURNAL_SYNC_TRANSACTIONAL:handleElementText(reader,element,operation);break;case JOURNAL_TYPE:{String journalType=reader.getElementText();if (journalType != null && journalType.length() > 0) {JournalType.valueOf(journalType.trim());operation.get(JOURNAL_TYPE).set(journalType.trim());}break;}case JOURNAL_FILE_SIZE:{String text=reader.getElementText();if (text != null && text.length() > 0) {operation.get(JOURNAL_FILE_SIZE).set(text.trim());}}break;case JOURNAL_MAX_IO:handleElementText(reader,element,operation);break;case LARGE_MESSAGES_DIRECTORY:{final ModelNode dir=parseDirectory(reader);operation.get(LARGE_MESSAGES_DIRECTORY).set(dir);break;}case LOCAL_BIND_ADDRESS:unhandledElement(reader,element);break;case LOCAL_BIND_PORT:unhandledElement(reader,element);break;case LOG_JOURNAL_WRITE_RATE:handleElementText(reader,element,operation);break;case MANAGEMENT_ADDRESS:unhandledElement(reader,element);break;case MANAGEMENT_NOTIFICATION_ADDRESS:unhandledElement(reader,element);break;case MEMORY_MEASURE_INTERVAL:unhandledElement(reader,element);break;case MEMORY_WARNING_THRESHOLD:unhandledElement(reader,element);break;case MESSAGE_COUNTER_ENABLED:unhandledElement(reader,element);break;case MESSAGE_COUNTER_MAX_DAY_HISTORY:unhandledElement(reader,element);break;case MESSAGE_COUNTER_SAMPLE_PERIOD:unhandledElement(reader,element);break;case MESSAGE_EXPIRY_SCAN_PERIOD:unhandledElement(reader,element);break;case MESSAGE_EXPIRY_THREAD_PRIORITY:unhandledElement(reader,element);break;case PAGING_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(PAGING_DIRECTORY).set(directory);break;}case PERF_BLAST_PAGES:unhandledElement(reader,element);break;case PERSIST_DELIVERY_COUNT_BEFORE_DELIVERY:unhandledElement(reader,element);break;case PERSIST_ID_CACHE:unhandledElement(reader,element);break;case PERSISTENCE_ENABLED:{final String value=reader.getElementText();if (value != null && value.length() > 0) {boolean enabled=Boolean.valueOf(value.trim());operation.get(PERSISTENCE_ENABLED).set(enabled);}break;}case REFRESH_TIMEOUT:unhandledElement(reader,element);break;case REMOTING_INTERCEPTORS:unhandledElement(reader,element);break;case RUN_SYNC_SPEED_TEST:unhandledElement(reader,element);break;case SECURITY_ENABLED:unhandledElement(reader,element);break;case SECURITY_INVALIDATION_INTERVAL:unhandledElement(reader,element);break;case SECURITY_SETTINGS:{final ModelNode securitySettings=processSecuritySettings(reader);operation.get(SECURITY_SETTING).set(securitySettings);break;}case SERVER_DUMP_INTERVAL:unhandledElement(reader,element);break;case SHARED_STORE:unhandledElement(reader,element);break;case TRANSACTION_TIMEOUT:unhandledElement(reader,element);break;case TRANSACTION_TIMEOUT_SCAN_PERIOD:unhandledElement(reader,element);break;case WILD_CARD_ROUTING_ENABLED:unhandledElement(reader,element);break;case DEAD_LETTER_ADDRESS_NODE_NAME:unhandledElement(reader,element);break;case EXPIRY_ADDRESS_NODE_NAME:unhandledElement(reader,element);break;case REDELIVERY_DELAY_NODE_NAME:unhandledElement(reader,element);break;case MAX_DELIVERY_ATTEMPTS:unhandledElement(reader,element);break;case MAX_SIZE_BYTES_NODE_NAME:unhandledElement(reader,element);break;case ADDRESS_FULL_MESSAGE_POLICY_NODE_NAME:unhandledElement(reader,element);break;case PAGE_SIZE_BYTES_NODE_NAME:unhandledElement(reader,element);break;case MESSAGE_COUNTER_HISTORY_DAY_LIMIT_NODE_NAME:unhandledElement(reader,element);break;case LVQ_NODE_NAME:unhandledElement(reader,element);break;case REDISTRIBUTION_DELAY_NODE_NAME:unhandledElement(reader,element);break;case SEND_TO_DLA_ON_NO_ROUTE:unhandledElement(reader,element);break;case QUEUES:{final ModelNode queues=parseQueues(reader);operation.get(QUEUE).set(queues);break;}case SUBSYSTEM:break;default :throw ParseUtils.unexpectedElement(reader);} @AT@ 16196 @LENGTH@ 34
---MOV ExpressionStatement@@MethodInvocation:unhandledElement(reader,element) @TO@ SwitchStatement@@switch (element) {case ACCEPTORS:{    final ModelNode acceptors=processAcceptors(reader);    operation.get(ACCEPTOR).set(acceptors);    break;  }case ADDRESS_SETTINGS:{  final ModelNode addressSettings=processAddressSettings(reader);  operation.get(ADDRESS_SETTING).set(addressSettings);  break;}case ASYNC_CONNECTION_EXECUTION_ENABLED:unhandledElement(reader,element);break;case BACKUP:handleElementText(reader,element,operation);break;case BACKUP_CONNECTOR_REF:handleElementText(reader,element,operation);break;case BINDINGS_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(BINDINGS_DIRECTORY).set(directory);break;}case BROADCAST_PERIOD:handleElementText(reader,element,operation);break;case CLUSTERED:handleElementText(reader,element,operation);break;case CLUSTER_PASSWORD:handleElementText(reader,element,operation);break;case CLUSTER_USER:handleElementText(reader,element,operation);break;case CONNECTION_TTL_OVERRIDE:handleElementText(reader,element,operation);break;case CONNECTORS:{final ModelNode connectors=processConnectors(reader);operation.get(CONNECTOR).set(connectors);break;}case CONNECTOR_REF:unhandledElement(reader,element);break;case CREATE_BINDINGS_DIR:handleElementText(reader,element,operation);break;case CREATE_JOURNAL_DIR:handleElementText(reader,element,operation);break;case FILE_DEPLOYMENT_ENABLED:unhandledElement(reader,element);break;case GROUP_ADDRESS:unhandledElement(reader,element);break;case GROUP_PORT:unhandledElement(reader,element);break;case GROUPING_HANDLER:unhandledElement(reader,element);break;case ID_CACHE_SIZE:handleElementText(reader,element,operation);break;case JMX_DOMAIN:handleElementText(reader,element,operation);break;case JMX_MANAGEMENT_ENABLED:handleElementText(reader,element,operation);break;case JOURNAL_BUFFER_SIZE:unhandledElement(reader,element);break;case JOURNAL_BUFFER_TIMEOUT:handleElementText(reader,element,operation);break;case JOURNAL_COMPACT_MIN_FILES:handleElementText(reader,element,operation);break;case JOURNAL_COMPACT_PERCENTAGE:handleElementText(reader,element,operation);break;case JOURNAL_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(JOURNAL_DIRECTORY).set(directory);break;}case JOURNAL_MIN_FILES:{operation.get(JOURNAL_MIN_FILES).set(reader.getElementText());break;}case JOURNAL_SYNC_NON_TRANSACTIONAL:handleElementText(reader,element,operation);break;case JOURNAL_SYNC_TRANSACTIONAL:handleElementText(reader,element,operation);break;case JOURNAL_TYPE:{String journalType=reader.getElementText();if (journalType != null && journalType.length() > 0) {JournalType.valueOf(journalType.trim());operation.get(JOURNAL_TYPE).set(journalType.trim());}break;}case JOURNAL_FILE_SIZE:{String text=reader.getElementText();if (text != null && text.length() > 0) {operation.get(JOURNAL_FILE_SIZE).set(text.trim());}}break;case JOURNAL_MAX_IO:handleElementText(reader,element,operation);break;case LARGE_MESSAGES_DIRECTORY:{final ModelNode dir=parseDirectory(reader);operation.get(LARGE_MESSAGES_DIRECTORY).set(dir);break;}case LOCAL_BIND_ADDRESS:unhandledElement(reader,element);break;case LOCAL_BIND_PORT:unhandledElement(reader,element);break;case LOG_JOURNAL_WRITE_RATE:handleElementText(reader,element,operation);break;case MANAGEMENT_ADDRESS:unhandledElement(reader,element);break;case MANAGEMENT_NOTIFICATION_ADDRESS:unhandledElement(reader,element);break;case MEMORY_MEASURE_INTERVAL:unhandledElement(reader,element);break;case MEMORY_WARNING_THRESHOLD:unhandledElement(reader,element);break;case MESSAGE_COUNTER_ENABLED:unhandledElement(reader,element);break;case MESSAGE_COUNTER_MAX_DAY_HISTORY:unhandledElement(reader,element);break;case MESSAGE_COUNTER_SAMPLE_PERIOD:unhandledElement(reader,element);break;case MESSAGE_EXPIRY_SCAN_PERIOD:unhandledElement(reader,element);break;case MESSAGE_EXPIRY_THREAD_PRIORITY:unhandledElement(reader,element);break;case PAGING_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(PAGING_DIRECTORY).set(directory);break;}case PERF_BLAST_PAGES:unhandledElement(reader,element);break;case PERSIST_DELIVERY_COUNT_BEFORE_DELIVERY:unhandledElement(reader,element);break;case PERSIST_ID_CACHE:unhandledElement(reader,element);break;case PERSISTENCE_ENABLED:{final String value=reader.getElementText();if (value != null && value.length() > 0) {boolean enabled=Boolean.valueOf(value.trim());operation.get(PERSISTENCE_ENABLED).set(enabled);}break;}case REFRESH_TIMEOUT:unhandledElement(reader,element);break;case REMOTING_INTERCEPTORS:unhandledElement(reader,element);break;case RUN_SYNC_SPEED_TEST:unhandledElement(reader,element);break;case SECURITY_ENABLED:unhandledElement(reader,element);break;case SECURITY_INVALIDATION_INTERVAL:unhandledElement(reader,element);break;case SECURITY_SETTINGS:{final ModelNode securitySettings=processSecuritySettings(reader);operation.get(SECURITY_SETTING).set(securitySettings);break;}case SERVER_DUMP_INTERVAL:unhandledElement(reader,element);break;case SHARED_STORE:unhandledElement(reader,element);break;case TRANSACTION_TIMEOUT:unhandledElement(reader,element);break;case TRANSACTION_TIMEOUT_SCAN_PERIOD:unhandledElement(reader,element);break;case WILD_CARD_ROUTING_ENABLED:unhandledElement(reader,element);break;case DEAD_LETTER_ADDRESS_NODE_NAME:unhandledElement(reader,element);break;case EXPIRY_ADDRESS_NODE_NAME:unhandledElement(reader,element);break;case REDELIVERY_DELAY_NODE_NAME:unhandledElement(reader,element);break;case MAX_DELIVERY_ATTEMPTS:unhandledElement(reader,element);break;case MAX_SIZE_BYTES_NODE_NAME:unhandledElement(reader,element);break;case ADDRESS_FULL_MESSAGE_POLICY_NODE_NAME:unhandledElement(reader,element);break;case PAGE_SIZE_BYTES_NODE_NAME:unhandledElement(reader,element);break;case MESSAGE_COUNTER_HISTORY_DAY_LIMIT_NODE_NAME:unhandledElement(reader,element);break;case LVQ_NODE_NAME:unhandledElement(reader,element);break;case REDISTRIBUTION_DELAY_NODE_NAME:unhandledElement(reader,element);break;case SEND_TO_DLA_ON_NO_ROUTE:unhandledElement(reader,element);break;case QUEUES:{final ModelNode queues=parseQueues(reader);operation.get(QUEUE).set(queues);break;}case SUBSYSTEM:break;default :throw ParseUtils.unexpectedElement(reader);} @AT@ 16325 @LENGTH@ 34
---MOV ExpressionStatement@@MethodInvocation:unhandledElement(reader,element) @TO@ SwitchStatement@@switch (element) {case ACCEPTORS:{    final ModelNode acceptors=processAcceptors(reader);    operation.get(ACCEPTOR).set(acceptors);    break;  }case ADDRESS_SETTINGS:{  final ModelNode addressSettings=processAddressSettings(reader);  operation.get(ADDRESS_SETTING).set(addressSettings);  break;}case ASYNC_CONNECTION_EXECUTION_ENABLED:unhandledElement(reader,element);break;case BACKUP:handleElementText(reader,element,operation);break;case BACKUP_CONNECTOR_REF:handleElementText(reader,element,operation);break;case BINDINGS_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(BINDINGS_DIRECTORY).set(directory);break;}case BROADCAST_PERIOD:handleElementText(reader,element,operation);break;case CLUSTERED:handleElementText(reader,element,operation);break;case CLUSTER_PASSWORD:handleElementText(reader,element,operation);break;case CLUSTER_USER:handleElementText(reader,element,operation);break;case CONNECTION_TTL_OVERRIDE:handleElementText(reader,element,operation);break;case CONNECTORS:{final ModelNode connectors=processConnectors(reader);operation.get(CONNECTOR).set(connectors);break;}case CONNECTOR_REF:unhandledElement(reader,element);break;case CREATE_BINDINGS_DIR:handleElementText(reader,element,operation);break;case CREATE_JOURNAL_DIR:handleElementText(reader,element,operation);break;case FILE_DEPLOYMENT_ENABLED:unhandledElement(reader,element);break;case GROUP_ADDRESS:unhandledElement(reader,element);break;case GROUP_PORT:unhandledElement(reader,element);break;case GROUPING_HANDLER:unhandledElement(reader,element);break;case ID_CACHE_SIZE:handleElementText(reader,element,operation);break;case JMX_DOMAIN:handleElementText(reader,element,operation);break;case JMX_MANAGEMENT_ENABLED:handleElementText(reader,element,operation);break;case JOURNAL_BUFFER_SIZE:unhandledElement(reader,element);break;case JOURNAL_BUFFER_TIMEOUT:handleElementText(reader,element,operation);break;case JOURNAL_COMPACT_MIN_FILES:handleElementText(reader,element,operation);break;case JOURNAL_COMPACT_PERCENTAGE:handleElementText(reader,element,operation);break;case JOURNAL_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(JOURNAL_DIRECTORY).set(directory);break;}case JOURNAL_MIN_FILES:{operation.get(JOURNAL_MIN_FILES).set(reader.getElementText());break;}case JOURNAL_SYNC_NON_TRANSACTIONAL:handleElementText(reader,element,operation);break;case JOURNAL_SYNC_TRANSACTIONAL:handleElementText(reader,element,operation);break;case JOURNAL_TYPE:{String journalType=reader.getElementText();if (journalType != null && journalType.length() > 0) {JournalType.valueOf(journalType.trim());operation.get(JOURNAL_TYPE).set(journalType.trim());}break;}case JOURNAL_FILE_SIZE:{String text=reader.getElementText();if (text != null && text.length() > 0) {operation.get(JOURNAL_FILE_SIZE).set(text.trim());}}break;case JOURNAL_MAX_IO:handleElementText(reader,element,operation);break;case LARGE_MESSAGES_DIRECTORY:{final ModelNode dir=parseDirectory(reader);operation.get(LARGE_MESSAGES_DIRECTORY).set(dir);break;}case LOCAL_BIND_ADDRESS:unhandledElement(reader,element);break;case LOCAL_BIND_PORT:unhandledElement(reader,element);break;case LOG_JOURNAL_WRITE_RATE:handleElementText(reader,element,operation);break;case MANAGEMENT_ADDRESS:unhandledElement(reader,element);break;case MANAGEMENT_NOTIFICATION_ADDRESS:unhandledElement(reader,element);break;case MEMORY_MEASURE_INTERVAL:unhandledElement(reader,element);break;case MEMORY_WARNING_THRESHOLD:unhandledElement(reader,element);break;case MESSAGE_COUNTER_ENABLED:unhandledElement(reader,element);break;case MESSAGE_COUNTER_MAX_DAY_HISTORY:unhandledElement(reader,element);break;case MESSAGE_COUNTER_SAMPLE_PERIOD:unhandledElement(reader,element);break;case MESSAGE_EXPIRY_SCAN_PERIOD:unhandledElement(reader,element);break;case MESSAGE_EXPIRY_THREAD_PRIORITY:unhandledElement(reader,element);break;case PAGING_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(PAGING_DIRECTORY).set(directory);break;}case PERF_BLAST_PAGES:unhandledElement(reader,element);break;case PERSIST_DELIVERY_COUNT_BEFORE_DELIVERY:unhandledElement(reader,element);break;case PERSIST_ID_CACHE:unhandledElement(reader,element);break;case PERSISTENCE_ENABLED:{final String value=reader.getElementText();if (value != null && value.length() > 0) {boolean enabled=Boolean.valueOf(value.trim());operation.get(PERSISTENCE_ENABLED).set(enabled);}break;}case REFRESH_TIMEOUT:unhandledElement(reader,element);break;case REMOTING_INTERCEPTORS:unhandledElement(reader,element);break;case RUN_SYNC_SPEED_TEST:unhandledElement(reader,element);break;case SECURITY_ENABLED:unhandledElement(reader,element);break;case SECURITY_INVALIDATION_INTERVAL:unhandledElement(reader,element);break;case SECURITY_SETTINGS:{final ModelNode securitySettings=processSecuritySettings(reader);operation.get(SECURITY_SETTING).set(securitySettings);break;}case SERVER_DUMP_INTERVAL:unhandledElement(reader,element);break;case SHARED_STORE:unhandledElement(reader,element);break;case TRANSACTION_TIMEOUT:unhandledElement(reader,element);break;case TRANSACTION_TIMEOUT_SCAN_PERIOD:unhandledElement(reader,element);break;case WILD_CARD_ROUTING_ENABLED:unhandledElement(reader,element);break;case DEAD_LETTER_ADDRESS_NODE_NAME:unhandledElement(reader,element);break;case EXPIRY_ADDRESS_NODE_NAME:unhandledElement(reader,element);break;case REDELIVERY_DELAY_NODE_NAME:unhandledElement(reader,element);break;case MAX_DELIVERY_ATTEMPTS:unhandledElement(reader,element);break;case MAX_SIZE_BYTES_NODE_NAME:unhandledElement(reader,element);break;case ADDRESS_FULL_MESSAGE_POLICY_NODE_NAME:unhandledElement(reader,element);break;case PAGE_SIZE_BYTES_NODE_NAME:unhandledElement(reader,element);break;case MESSAGE_COUNTER_HISTORY_DAY_LIMIT_NODE_NAME:unhandledElement(reader,element);break;case LVQ_NODE_NAME:unhandledElement(reader,element);break;case REDISTRIBUTION_DELAY_NODE_NAME:unhandledElement(reader,element);break;case SEND_TO_DLA_ON_NO_ROUTE:unhandledElement(reader,element);break;case QUEUES:{final ModelNode queues=parseQueues(reader);operation.get(QUEUE).set(queues);break;}case SUBSYSTEM:break;default :throw ParseUtils.unexpectedElement(reader);} @AT@ 16467 @LENGTH@ 34
---MOV ExpressionStatement@@MethodInvocation:unhandledElement(reader,element) @TO@ SwitchStatement@@switch (element) {case ACCEPTORS:{    final ModelNode acceptors=processAcceptors(reader);    operation.get(ACCEPTOR).set(acceptors);    break;  }case ADDRESS_SETTINGS:{  final ModelNode addressSettings=processAddressSettings(reader);  operation.get(ADDRESS_SETTING).set(addressSettings);  break;}case ASYNC_CONNECTION_EXECUTION_ENABLED:unhandledElement(reader,element);break;case BACKUP:handleElementText(reader,element,operation);break;case BACKUP_CONNECTOR_REF:handleElementText(reader,element,operation);break;case BINDINGS_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(BINDINGS_DIRECTORY).set(directory);break;}case BROADCAST_PERIOD:handleElementText(reader,element,operation);break;case CLUSTERED:handleElementText(reader,element,operation);break;case CLUSTER_PASSWORD:handleElementText(reader,element,operation);break;case CLUSTER_USER:handleElementText(reader,element,operation);break;case CONNECTION_TTL_OVERRIDE:handleElementText(reader,element,operation);break;case CONNECTORS:{final ModelNode connectors=processConnectors(reader);operation.get(CONNECTOR).set(connectors);break;}case CONNECTOR_REF:unhandledElement(reader,element);break;case CREATE_BINDINGS_DIR:handleElementText(reader,element,operation);break;case CREATE_JOURNAL_DIR:handleElementText(reader,element,operation);break;case FILE_DEPLOYMENT_ENABLED:unhandledElement(reader,element);break;case GROUP_ADDRESS:unhandledElement(reader,element);break;case GROUP_PORT:unhandledElement(reader,element);break;case GROUPING_HANDLER:unhandledElement(reader,element);break;case ID_CACHE_SIZE:handleElementText(reader,element,operation);break;case JMX_DOMAIN:handleElementText(reader,element,operation);break;case JMX_MANAGEMENT_ENABLED:handleElementText(reader,element,operation);break;case JOURNAL_BUFFER_SIZE:unhandledElement(reader,element);break;case JOURNAL_BUFFER_TIMEOUT:handleElementText(reader,element,operation);break;case JOURNAL_COMPACT_MIN_FILES:handleElementText(reader,element,operation);break;case JOURNAL_COMPACT_PERCENTAGE:handleElementText(reader,element,operation);break;case JOURNAL_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(JOURNAL_DIRECTORY).set(directory);break;}case JOURNAL_MIN_FILES:{operation.get(JOURNAL_MIN_FILES).set(reader.getElementText());break;}case JOURNAL_SYNC_NON_TRANSACTIONAL:handleElementText(reader,element,operation);break;case JOURNAL_SYNC_TRANSACTIONAL:handleElementText(reader,element,operation);break;case JOURNAL_TYPE:{String journalType=reader.getElementText();if (journalType != null && journalType.length() > 0) {JournalType.valueOf(journalType.trim());operation.get(JOURNAL_TYPE).set(journalType.trim());}break;}case JOURNAL_FILE_SIZE:{String text=reader.getElementText();if (text != null && text.length() > 0) {operation.get(JOURNAL_FILE_SIZE).set(text.trim());}}break;case JOURNAL_MAX_IO:handleElementText(reader,element,operation);break;case LARGE_MESSAGES_DIRECTORY:{final ModelNode dir=parseDirectory(reader);operation.get(LARGE_MESSAGES_DIRECTORY).set(dir);break;}case LOCAL_BIND_ADDRESS:unhandledElement(reader,element);break;case LOCAL_BIND_PORT:unhandledElement(reader,element);break;case LOG_JOURNAL_WRITE_RATE:handleElementText(reader,element,operation);break;case MANAGEMENT_ADDRESS:unhandledElement(reader,element);break;case MANAGEMENT_NOTIFICATION_ADDRESS:unhandledElement(reader,element);break;case MEMORY_MEASURE_INTERVAL:unhandledElement(reader,element);break;case MEMORY_WARNING_THRESHOLD:unhandledElement(reader,element);break;case MESSAGE_COUNTER_ENABLED:unhandledElement(reader,element);break;case MESSAGE_COUNTER_MAX_DAY_HISTORY:unhandledElement(reader,element);break;case MESSAGE_COUNTER_SAMPLE_PERIOD:unhandledElement(reader,element);break;case MESSAGE_EXPIRY_SCAN_PERIOD:unhandledElement(reader,element);break;case MESSAGE_EXPIRY_THREAD_PRIORITY:unhandledElement(reader,element);break;case PAGING_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(PAGING_DIRECTORY).set(directory);break;}case PERF_BLAST_PAGES:unhandledElement(reader,element);break;case PERSIST_DELIVERY_COUNT_BEFORE_DELIVERY:unhandledElement(reader,element);break;case PERSIST_ID_CACHE:unhandledElement(reader,element);break;case PERSISTENCE_ENABLED:{final String value=reader.getElementText();if (value != null && value.length() > 0) {boolean enabled=Boolean.valueOf(value.trim());operation.get(PERSISTENCE_ENABLED).set(enabled);}break;}case REFRESH_TIMEOUT:unhandledElement(reader,element);break;case REMOTING_INTERCEPTORS:unhandledElement(reader,element);break;case RUN_SYNC_SPEED_TEST:unhandledElement(reader,element);break;case SECURITY_ENABLED:unhandledElement(reader,element);break;case SECURITY_INVALIDATION_INTERVAL:unhandledElement(reader,element);break;case SECURITY_SETTINGS:{final ModelNode securitySettings=processSecuritySettings(reader);operation.get(SECURITY_SETTING).set(securitySettings);break;}case SERVER_DUMP_INTERVAL:unhandledElement(reader,element);break;case SHARED_STORE:unhandledElement(reader,element);break;case TRANSACTION_TIMEOUT:unhandledElement(reader,element);break;case TRANSACTION_TIMEOUT_SCAN_PERIOD:unhandledElement(reader,element);break;case WILD_CARD_ROUTING_ENABLED:unhandledElement(reader,element);break;case DEAD_LETTER_ADDRESS_NODE_NAME:unhandledElement(reader,element);break;case EXPIRY_ADDRESS_NODE_NAME:unhandledElement(reader,element);break;case REDELIVERY_DELAY_NODE_NAME:unhandledElement(reader,element);break;case MAX_DELIVERY_ATTEMPTS:unhandledElement(reader,element);break;case MAX_SIZE_BYTES_NODE_NAME:unhandledElement(reader,element);break;case ADDRESS_FULL_MESSAGE_POLICY_NODE_NAME:unhandledElement(reader,element);break;case PAGE_SIZE_BYTES_NODE_NAME:unhandledElement(reader,element);break;case MESSAGE_COUNTER_HISTORY_DAY_LIMIT_NODE_NAME:unhandledElement(reader,element);break;case LVQ_NODE_NAME:unhandledElement(reader,element);break;case REDISTRIBUTION_DELAY_NODE_NAME:unhandledElement(reader,element);break;case SEND_TO_DLA_ON_NO_ROUTE:unhandledElement(reader,element);break;case QUEUES:{final ModelNode queues=parseQueues(reader);operation.get(QUEUE).set(queues);break;}case SUBSYSTEM:break;default :throw ParseUtils.unexpectedElement(reader);} @AT@ 16597 @LENGTH@ 34
---MOV ExpressionStatement@@MethodInvocation:unhandledElement(reader,element) @TO@ SwitchStatement@@switch (element) {case ACCEPTORS:{    final ModelNode acceptors=processAcceptors(reader);    operation.get(ACCEPTOR).set(acceptors);    break;  }case ADDRESS_SETTINGS:{  final ModelNode addressSettings=processAddressSettings(reader);  operation.get(ADDRESS_SETTING).set(addressSettings);  break;}case ASYNC_CONNECTION_EXECUTION_ENABLED:unhandledElement(reader,element);break;case BACKUP:handleElementText(reader,element,operation);break;case BACKUP_CONNECTOR_REF:handleElementText(reader,element,operation);break;case BINDINGS_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(BINDINGS_DIRECTORY).set(directory);break;}case BROADCAST_PERIOD:handleElementText(reader,element,operation);break;case CLUSTERED:handleElementText(reader,element,operation);break;case CLUSTER_PASSWORD:handleElementText(reader,element,operation);break;case CLUSTER_USER:handleElementText(reader,element,operation);break;case CONNECTION_TTL_OVERRIDE:handleElementText(reader,element,operation);break;case CONNECTORS:{final ModelNode connectors=processConnectors(reader);operation.get(CONNECTOR).set(connectors);break;}case CONNECTOR_REF:unhandledElement(reader,element);break;case CREATE_BINDINGS_DIR:handleElementText(reader,element,operation);break;case CREATE_JOURNAL_DIR:handleElementText(reader,element,operation);break;case FILE_DEPLOYMENT_ENABLED:unhandledElement(reader,element);break;case GROUP_ADDRESS:unhandledElement(reader,element);break;case GROUP_PORT:unhandledElement(reader,element);break;case GROUPING_HANDLER:unhandledElement(reader,element);break;case ID_CACHE_SIZE:handleElementText(reader,element,operation);break;case JMX_DOMAIN:handleElementText(reader,element,operation);break;case JMX_MANAGEMENT_ENABLED:handleElementText(reader,element,operation);break;case JOURNAL_BUFFER_SIZE:unhandledElement(reader,element);break;case JOURNAL_BUFFER_TIMEOUT:handleElementText(reader,element,operation);break;case JOURNAL_COMPACT_MIN_FILES:handleElementText(reader,element,operation);break;case JOURNAL_COMPACT_PERCENTAGE:handleElementText(reader,element,operation);break;case JOURNAL_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(JOURNAL_DIRECTORY).set(directory);break;}case JOURNAL_MIN_FILES:{operation.get(JOURNAL_MIN_FILES).set(reader.getElementText());break;}case JOURNAL_SYNC_NON_TRANSACTIONAL:handleElementText(reader,element,operation);break;case JOURNAL_SYNC_TRANSACTIONAL:handleElementText(reader,element,operation);break;case JOURNAL_TYPE:{String journalType=reader.getElementText();if (journalType != null && journalType.length() > 0) {JournalType.valueOf(journalType.trim());operation.get(JOURNAL_TYPE).set(journalType.trim());}break;}case JOURNAL_FILE_SIZE:{String text=reader.getElementText();if (text != null && text.length() > 0) {operation.get(JOURNAL_FILE_SIZE).set(text.trim());}}break;case JOURNAL_MAX_IO:handleElementText(reader,element,operation);break;case LARGE_MESSAGES_DIRECTORY:{final ModelNode dir=parseDirectory(reader);operation.get(LARGE_MESSAGES_DIRECTORY).set(dir);break;}case LOCAL_BIND_ADDRESS:unhandledElement(reader,element);break;case LOCAL_BIND_PORT:unhandledElement(reader,element);break;case LOG_JOURNAL_WRITE_RATE:handleElementText(reader,element,operation);break;case MANAGEMENT_ADDRESS:unhandledElement(reader,element);break;case MANAGEMENT_NOTIFICATION_ADDRESS:unhandledElement(reader,element);break;case MEMORY_MEASURE_INTERVAL:unhandledElement(reader,element);break;case MEMORY_WARNING_THRESHOLD:unhandledElement(reader,element);break;case MESSAGE_COUNTER_ENABLED:unhandledElement(reader,element);break;case MESSAGE_COUNTER_MAX_DAY_HISTORY:unhandledElement(reader,element);break;case MESSAGE_COUNTER_SAMPLE_PERIOD:unhandledElement(reader,element);break;case MESSAGE_EXPIRY_SCAN_PERIOD:unhandledElement(reader,element);break;case MESSAGE_EXPIRY_THREAD_PRIORITY:unhandledElement(reader,element);break;case PAGING_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(PAGING_DIRECTORY).set(directory);break;}case PERF_BLAST_PAGES:unhandledElement(reader,element);break;case PERSIST_DELIVERY_COUNT_BEFORE_DELIVERY:unhandledElement(reader,element);break;case PERSIST_ID_CACHE:unhandledElement(reader,element);break;case PERSISTENCE_ENABLED:{final String value=reader.getElementText();if (value != null && value.length() > 0) {boolean enabled=Boolean.valueOf(value.trim());operation.get(PERSISTENCE_ENABLED).set(enabled);}break;}case REFRESH_TIMEOUT:unhandledElement(reader,element);break;case REMOTING_INTERCEPTORS:unhandledElement(reader,element);break;case RUN_SYNC_SPEED_TEST:unhandledElement(reader,element);break;case SECURITY_ENABLED:unhandledElement(reader,element);break;case SECURITY_INVALIDATION_INTERVAL:unhandledElement(reader,element);break;case SECURITY_SETTINGS:{final ModelNode securitySettings=processSecuritySettings(reader);operation.get(SECURITY_SETTING).set(securitySettings);break;}case SERVER_DUMP_INTERVAL:unhandledElement(reader,element);break;case SHARED_STORE:unhandledElement(reader,element);break;case TRANSACTION_TIMEOUT:unhandledElement(reader,element);break;case TRANSACTION_TIMEOUT_SCAN_PERIOD:unhandledElement(reader,element);break;case WILD_CARD_ROUTING_ENABLED:unhandledElement(reader,element);break;case DEAD_LETTER_ADDRESS_NODE_NAME:unhandledElement(reader,element);break;case EXPIRY_ADDRESS_NODE_NAME:unhandledElement(reader,element);break;case REDELIVERY_DELAY_NODE_NAME:unhandledElement(reader,element);break;case MAX_DELIVERY_ATTEMPTS:unhandledElement(reader,element);break;case MAX_SIZE_BYTES_NODE_NAME:unhandledElement(reader,element);break;case ADDRESS_FULL_MESSAGE_POLICY_NODE_NAME:unhandledElement(reader,element);break;case PAGE_SIZE_BYTES_NODE_NAME:unhandledElement(reader,element);break;case MESSAGE_COUNTER_HISTORY_DAY_LIMIT_NODE_NAME:unhandledElement(reader,element);break;case LVQ_NODE_NAME:unhandledElement(reader,element);break;case REDISTRIBUTION_DELAY_NODE_NAME:unhandledElement(reader,element);break;case SEND_TO_DLA_ON_NO_ROUTE:unhandledElement(reader,element);break;case QUEUES:{final ModelNode queues=parseQueues(reader);operation.get(QUEUE).set(queues);break;}case SUBSYSTEM:break;default :throw ParseUtils.unexpectedElement(reader);} @AT@ 16745 @LENGTH@ 34
---MOV ExpressionStatement@@MethodInvocation:unhandledElement(reader,element) @TO@ SwitchStatement@@switch (element) {case ACCEPTORS:{    final ModelNode acceptors=processAcceptors(reader);    operation.get(ACCEPTOR).set(acceptors);    break;  }case ADDRESS_SETTINGS:{  final ModelNode addressSettings=processAddressSettings(reader);  operation.get(ADDRESS_SETTING).set(addressSettings);  break;}case ASYNC_CONNECTION_EXECUTION_ENABLED:unhandledElement(reader,element);break;case BACKUP:handleElementText(reader,element,operation);break;case BACKUP_CONNECTOR_REF:handleElementText(reader,element,operation);break;case BINDINGS_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(BINDINGS_DIRECTORY).set(directory);break;}case BROADCAST_PERIOD:handleElementText(reader,element,operation);break;case CLUSTERED:handleElementText(reader,element,operation);break;case CLUSTER_PASSWORD:handleElementText(reader,element,operation);break;case CLUSTER_USER:handleElementText(reader,element,operation);break;case CONNECTION_TTL_OVERRIDE:handleElementText(reader,element,operation);break;case CONNECTORS:{final ModelNode connectors=processConnectors(reader);operation.get(CONNECTOR).set(connectors);break;}case CONNECTOR_REF:unhandledElement(reader,element);break;case CREATE_BINDINGS_DIR:handleElementText(reader,element,operation);break;case CREATE_JOURNAL_DIR:handleElementText(reader,element,operation);break;case FILE_DEPLOYMENT_ENABLED:unhandledElement(reader,element);break;case GROUP_ADDRESS:unhandledElement(reader,element);break;case GROUP_PORT:unhandledElement(reader,element);break;case GROUPING_HANDLER:unhandledElement(reader,element);break;case ID_CACHE_SIZE:handleElementText(reader,element,operation);break;case JMX_DOMAIN:handleElementText(reader,element,operation);break;case JMX_MANAGEMENT_ENABLED:handleElementText(reader,element,operation);break;case JOURNAL_BUFFER_SIZE:unhandledElement(reader,element);break;case JOURNAL_BUFFER_TIMEOUT:handleElementText(reader,element,operation);break;case JOURNAL_COMPACT_MIN_FILES:handleElementText(reader,element,operation);break;case JOURNAL_COMPACT_PERCENTAGE:handleElementText(reader,element,operation);break;case JOURNAL_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(JOURNAL_DIRECTORY).set(directory);break;}case JOURNAL_MIN_FILES:{operation.get(JOURNAL_MIN_FILES).set(reader.getElementText());break;}case JOURNAL_SYNC_NON_TRANSACTIONAL:handleElementText(reader,element,operation);break;case JOURNAL_SYNC_TRANSACTIONAL:handleElementText(reader,element,operation);break;case JOURNAL_TYPE:{String journalType=reader.getElementText();if (journalType != null && journalType.length() > 0) {JournalType.valueOf(journalType.trim());operation.get(JOURNAL_TYPE).set(journalType.trim());}break;}case JOURNAL_FILE_SIZE:{String text=reader.getElementText();if (text != null && text.length() > 0) {operation.get(JOURNAL_FILE_SIZE).set(text.trim());}}break;case JOURNAL_MAX_IO:handleElementText(reader,element,operation);break;case LARGE_MESSAGES_DIRECTORY:{final ModelNode dir=parseDirectory(reader);operation.get(LARGE_MESSAGES_DIRECTORY).set(dir);break;}case LOCAL_BIND_ADDRESS:unhandledElement(reader,element);break;case LOCAL_BIND_PORT:unhandledElement(reader,element);break;case LOG_JOURNAL_WRITE_RATE:handleElementText(reader,element,operation);break;case MANAGEMENT_ADDRESS:unhandledElement(reader,element);break;case MANAGEMENT_NOTIFICATION_ADDRESS:unhandledElement(reader,element);break;case MEMORY_MEASURE_INTERVAL:unhandledElement(reader,element);break;case MEMORY_WARNING_THRESHOLD:unhandledElement(reader,element);break;case MESSAGE_COUNTER_ENABLED:unhandledElement(reader,element);break;case MESSAGE_COUNTER_MAX_DAY_HISTORY:unhandledElement(reader,element);break;case MESSAGE_COUNTER_SAMPLE_PERIOD:unhandledElement(reader,element);break;case MESSAGE_EXPIRY_SCAN_PERIOD:unhandledElement(reader,element);break;case MESSAGE_EXPIRY_THREAD_PRIORITY:unhandledElement(reader,element);break;case PAGING_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(PAGING_DIRECTORY).set(directory);break;}case PERF_BLAST_PAGES:unhandledElement(reader,element);break;case PERSIST_DELIVERY_COUNT_BEFORE_DELIVERY:unhandledElement(reader,element);break;case PERSIST_ID_CACHE:unhandledElement(reader,element);break;case PERSISTENCE_ENABLED:{final String value=reader.getElementText();if (value != null && value.length() > 0) {boolean enabled=Boolean.valueOf(value.trim());operation.get(PERSISTENCE_ENABLED).set(enabled);}break;}case REFRESH_TIMEOUT:unhandledElement(reader,element);break;case REMOTING_INTERCEPTORS:unhandledElement(reader,element);break;case RUN_SYNC_SPEED_TEST:unhandledElement(reader,element);break;case SECURITY_ENABLED:unhandledElement(reader,element);break;case SECURITY_INVALIDATION_INTERVAL:unhandledElement(reader,element);break;case SECURITY_SETTINGS:{final ModelNode securitySettings=processSecuritySettings(reader);operation.get(SECURITY_SETTING).set(securitySettings);break;}case SERVER_DUMP_INTERVAL:unhandledElement(reader,element);break;case SHARED_STORE:unhandledElement(reader,element);break;case TRANSACTION_TIMEOUT:unhandledElement(reader,element);break;case TRANSACTION_TIMEOUT_SCAN_PERIOD:unhandledElement(reader,element);break;case WILD_CARD_ROUTING_ENABLED:unhandledElement(reader,element);break;case DEAD_LETTER_ADDRESS_NODE_NAME:unhandledElement(reader,element);break;case EXPIRY_ADDRESS_NODE_NAME:unhandledElement(reader,element);break;case REDELIVERY_DELAY_NODE_NAME:unhandledElement(reader,element);break;case MAX_DELIVERY_ATTEMPTS:unhandledElement(reader,element);break;case MAX_SIZE_BYTES_NODE_NAME:unhandledElement(reader,element);break;case ADDRESS_FULL_MESSAGE_POLICY_NODE_NAME:unhandledElement(reader,element);break;case PAGE_SIZE_BYTES_NODE_NAME:unhandledElement(reader,element);break;case MESSAGE_COUNTER_HISTORY_DAY_LIMIT_NODE_NAME:unhandledElement(reader,element);break;case LVQ_NODE_NAME:unhandledElement(reader,element);break;case REDISTRIBUTION_DELAY_NODE_NAME:unhandledElement(reader,element);break;case SEND_TO_DLA_ON_NO_ROUTE:unhandledElement(reader,element);break;case QUEUES:{final ModelNode queues=parseQueues(reader);operation.get(QUEUE).set(queues);break;}case SUBSYSTEM:break;default :throw ParseUtils.unexpectedElement(reader);} @AT@ 16863 @LENGTH@ 34
---MOV ExpressionStatement@@MethodInvocation:unhandledElement(reader,element) @TO@ SwitchStatement@@switch (element) {case ACCEPTORS:{    final ModelNode acceptors=processAcceptors(reader);    operation.get(ACCEPTOR).set(acceptors);    break;  }case ADDRESS_SETTINGS:{  final ModelNode addressSettings=processAddressSettings(reader);  operation.get(ADDRESS_SETTING).set(addressSettings);  break;}case ASYNC_CONNECTION_EXECUTION_ENABLED:unhandledElement(reader,element);break;case BACKUP:handleElementText(reader,element,operation);break;case BACKUP_CONNECTOR_REF:handleElementText(reader,element,operation);break;case BINDINGS_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(BINDINGS_DIRECTORY).set(directory);break;}case BROADCAST_PERIOD:handleElementText(reader,element,operation);break;case CLUSTERED:handleElementText(reader,element,operation);break;case CLUSTER_PASSWORD:handleElementText(reader,element,operation);break;case CLUSTER_USER:handleElementText(reader,element,operation);break;case CONNECTION_TTL_OVERRIDE:handleElementText(reader,element,operation);break;case CONNECTORS:{final ModelNode connectors=processConnectors(reader);operation.get(CONNECTOR).set(connectors);break;}case CONNECTOR_REF:unhandledElement(reader,element);break;case CREATE_BINDINGS_DIR:handleElementText(reader,element,operation);break;case CREATE_JOURNAL_DIR:handleElementText(reader,element,operation);break;case FILE_DEPLOYMENT_ENABLED:unhandledElement(reader,element);break;case GROUP_ADDRESS:unhandledElement(reader,element);break;case GROUP_PORT:unhandledElement(reader,element);break;case GROUPING_HANDLER:unhandledElement(reader,element);break;case ID_CACHE_SIZE:handleElementText(reader,element,operation);break;case JMX_DOMAIN:handleElementText(reader,element,operation);break;case JMX_MANAGEMENT_ENABLED:handleElementText(reader,element,operation);break;case JOURNAL_BUFFER_SIZE:unhandledElement(reader,element);break;case JOURNAL_BUFFER_TIMEOUT:handleElementText(reader,element,operation);break;case JOURNAL_COMPACT_MIN_FILES:handleElementText(reader,element,operation);break;case JOURNAL_COMPACT_PERCENTAGE:handleElementText(reader,element,operation);break;case JOURNAL_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(JOURNAL_DIRECTORY).set(directory);break;}case JOURNAL_MIN_FILES:{operation.get(JOURNAL_MIN_FILES).set(reader.getElementText());break;}case JOURNAL_SYNC_NON_TRANSACTIONAL:handleElementText(reader,element,operation);break;case JOURNAL_SYNC_TRANSACTIONAL:handleElementText(reader,element,operation);break;case JOURNAL_TYPE:{String journalType=reader.getElementText();if (journalType != null && journalType.length() > 0) {JournalType.valueOf(journalType.trim());operation.get(JOURNAL_TYPE).set(journalType.trim());}break;}case JOURNAL_FILE_SIZE:{String text=reader.getElementText();if (text != null && text.length() > 0) {operation.get(JOURNAL_FILE_SIZE).set(text.trim());}}break;case JOURNAL_MAX_IO:handleElementText(reader,element,operation);break;case LARGE_MESSAGES_DIRECTORY:{final ModelNode dir=parseDirectory(reader);operation.get(LARGE_MESSAGES_DIRECTORY).set(dir);break;}case LOCAL_BIND_ADDRESS:unhandledElement(reader,element);break;case LOCAL_BIND_PORT:unhandledElement(reader,element);break;case LOG_JOURNAL_WRITE_RATE:handleElementText(reader,element,operation);break;case MANAGEMENT_ADDRESS:unhandledElement(reader,element);break;case MANAGEMENT_NOTIFICATION_ADDRESS:unhandledElement(reader,element);break;case MEMORY_MEASURE_INTERVAL:unhandledElement(reader,element);break;case MEMORY_WARNING_THRESHOLD:unhandledElement(reader,element);break;case MESSAGE_COUNTER_ENABLED:unhandledElement(reader,element);break;case MESSAGE_COUNTER_MAX_DAY_HISTORY:unhandledElement(reader,element);break;case MESSAGE_COUNTER_SAMPLE_PERIOD:unhandledElement(reader,element);break;case MESSAGE_EXPIRY_SCAN_PERIOD:unhandledElement(reader,element);break;case MESSAGE_EXPIRY_THREAD_PRIORITY:unhandledElement(reader,element);break;case PAGING_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(PAGING_DIRECTORY).set(directory);break;}case PERF_BLAST_PAGES:unhandledElement(reader,element);break;case PERSIST_DELIVERY_COUNT_BEFORE_DELIVERY:unhandledElement(reader,element);break;case PERSIST_ID_CACHE:unhandledElement(reader,element);break;case PERSISTENCE_ENABLED:{final String value=reader.getElementText();if (value != null && value.length() > 0) {boolean enabled=Boolean.valueOf(value.trim());operation.get(PERSISTENCE_ENABLED).set(enabled);}break;}case REFRESH_TIMEOUT:unhandledElement(reader,element);break;case REMOTING_INTERCEPTORS:unhandledElement(reader,element);break;case RUN_SYNC_SPEED_TEST:unhandledElement(reader,element);break;case SECURITY_ENABLED:unhandledElement(reader,element);break;case SECURITY_INVALIDATION_INTERVAL:unhandledElement(reader,element);break;case SECURITY_SETTINGS:{final ModelNode securitySettings=processSecuritySettings(reader);operation.get(SECURITY_SETTING).set(securitySettings);break;}case SERVER_DUMP_INTERVAL:unhandledElement(reader,element);break;case SHARED_STORE:unhandledElement(reader,element);break;case TRANSACTION_TIMEOUT:unhandledElement(reader,element);break;case TRANSACTION_TIMEOUT_SCAN_PERIOD:unhandledElement(reader,element);break;case WILD_CARD_ROUTING_ENABLED:unhandledElement(reader,element);break;case DEAD_LETTER_ADDRESS_NODE_NAME:unhandledElement(reader,element);break;case EXPIRY_ADDRESS_NODE_NAME:unhandledElement(reader,element);break;case REDELIVERY_DELAY_NODE_NAME:unhandledElement(reader,element);break;case MAX_DELIVERY_ATTEMPTS:unhandledElement(reader,element);break;case MAX_SIZE_BYTES_NODE_NAME:unhandledElement(reader,element);break;case ADDRESS_FULL_MESSAGE_POLICY_NODE_NAME:unhandledElement(reader,element);break;case PAGE_SIZE_BYTES_NODE_NAME:unhandledElement(reader,element);break;case MESSAGE_COUNTER_HISTORY_DAY_LIMIT_NODE_NAME:unhandledElement(reader,element);break;case LVQ_NODE_NAME:unhandledElement(reader,element);break;case REDISTRIBUTION_DELAY_NODE_NAME:unhandledElement(reader,element);break;case SEND_TO_DLA_ON_NO_ROUTE:unhandledElement(reader,element);break;case QUEUES:{final ModelNode queues=parseQueues(reader);operation.get(QUEUE).set(queues);break;}case SUBSYSTEM:break;default :throw ParseUtils.unexpectedElement(reader);} @AT@ 16998 @LENGTH@ 34
---MOV ExpressionStatement@@MethodInvocation:unhandledElement(reader,element) @TO@ SwitchStatement@@switch (element) {case ACCEPTORS:{    final ModelNode acceptors=processAcceptors(reader);    operation.get(ACCEPTOR).set(acceptors);    break;  }case ADDRESS_SETTINGS:{  final ModelNode addressSettings=processAddressSettings(reader);  operation.get(ADDRESS_SETTING).set(addressSettings);  break;}case ASYNC_CONNECTION_EXECUTION_ENABLED:unhandledElement(reader,element);break;case BACKUP:handleElementText(reader,element,operation);break;case BACKUP_CONNECTOR_REF:handleElementText(reader,element,operation);break;case BINDINGS_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(BINDINGS_DIRECTORY).set(directory);break;}case BROADCAST_PERIOD:handleElementText(reader,element,operation);break;case CLUSTERED:handleElementText(reader,element,operation);break;case CLUSTER_PASSWORD:handleElementText(reader,element,operation);break;case CLUSTER_USER:handleElementText(reader,element,operation);break;case CONNECTION_TTL_OVERRIDE:handleElementText(reader,element,operation);break;case CONNECTORS:{final ModelNode connectors=processConnectors(reader);operation.get(CONNECTOR).set(connectors);break;}case CONNECTOR_REF:unhandledElement(reader,element);break;case CREATE_BINDINGS_DIR:handleElementText(reader,element,operation);break;case CREATE_JOURNAL_DIR:handleElementText(reader,element,operation);break;case FILE_DEPLOYMENT_ENABLED:unhandledElement(reader,element);break;case GROUP_ADDRESS:unhandledElement(reader,element);break;case GROUP_PORT:unhandledElement(reader,element);break;case GROUPING_HANDLER:unhandledElement(reader,element);break;case ID_CACHE_SIZE:handleElementText(reader,element,operation);break;case JMX_DOMAIN:handleElementText(reader,element,operation);break;case JMX_MANAGEMENT_ENABLED:handleElementText(reader,element,operation);break;case JOURNAL_BUFFER_SIZE:unhandledElement(reader,element);break;case JOURNAL_BUFFER_TIMEOUT:handleElementText(reader,element,operation);break;case JOURNAL_COMPACT_MIN_FILES:handleElementText(reader,element,operation);break;case JOURNAL_COMPACT_PERCENTAGE:handleElementText(reader,element,operation);break;case JOURNAL_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(JOURNAL_DIRECTORY).set(directory);break;}case JOURNAL_MIN_FILES:{operation.get(JOURNAL_MIN_FILES).set(reader.getElementText());break;}case JOURNAL_SYNC_NON_TRANSACTIONAL:handleElementText(reader,element,operation);break;case JOURNAL_SYNC_TRANSACTIONAL:handleElementText(reader,element,operation);break;case JOURNAL_TYPE:{String journalType=reader.getElementText();if (journalType != null && journalType.length() > 0) {JournalType.valueOf(journalType.trim());operation.get(JOURNAL_TYPE).set(journalType.trim());}break;}case JOURNAL_FILE_SIZE:{String text=reader.getElementText();if (text != null && text.length() > 0) {operation.get(JOURNAL_FILE_SIZE).set(text.trim());}}break;case JOURNAL_MAX_IO:handleElementText(reader,element,operation);break;case LARGE_MESSAGES_DIRECTORY:{final ModelNode dir=parseDirectory(reader);operation.get(LARGE_MESSAGES_DIRECTORY).set(dir);break;}case LOCAL_BIND_ADDRESS:unhandledElement(reader,element);break;case LOCAL_BIND_PORT:unhandledElement(reader,element);break;case LOG_JOURNAL_WRITE_RATE:handleElementText(reader,element,operation);break;case MANAGEMENT_ADDRESS:unhandledElement(reader,element);break;case MANAGEMENT_NOTIFICATION_ADDRESS:unhandledElement(reader,element);break;case MEMORY_MEASURE_INTERVAL:unhandledElement(reader,element);break;case MEMORY_WARNING_THRESHOLD:unhandledElement(reader,element);break;case MESSAGE_COUNTER_ENABLED:unhandledElement(reader,element);break;case MESSAGE_COUNTER_MAX_DAY_HISTORY:unhandledElement(reader,element);break;case MESSAGE_COUNTER_SAMPLE_PERIOD:unhandledElement(reader,element);break;case MESSAGE_EXPIRY_SCAN_PERIOD:unhandledElement(reader,element);break;case MESSAGE_EXPIRY_THREAD_PRIORITY:unhandledElement(reader,element);break;case PAGING_DIRECTORY:{final ModelNode directory=parseDirectory(reader);operation.get(PAGING_DIRECTORY).set(directory);break;}case PERF_BLAST_PAGES:unhandledElement(reader,element);break;case PERSIST_DELIVERY_COUNT_BEFORE_DELIVERY:unhandledElement(reader,element);break;case PERSIST_ID_CACHE:unhandledElement(reader,element);break;case PERSISTENCE_ENABLED:{final String value=reader.getElementText();if (value != null && value.length() > 0) {boolean enabled=Boolean.valueOf(value.trim());operation.get(PERSISTENCE_ENABLED).set(enabled);}break;}case REFRESH_TIMEOUT:unhandledElement(reader,element);break;case REMOTING_INTERCEPTORS:unhandledElement(reader,element);break;case RUN_SYNC_SPEED_TEST:unhandledElement(reader,element);break;case SECURITY_ENABLED:unhandledElement(reader,element);break;case SECURITY_INVALIDATION_INTERVAL:unhandledElement(reader,element);break;case SECURITY_SETTINGS:{final ModelNode securitySettings=processSecuritySettings(reader);operation.get(SECURITY_SETTING).set(securitySettings);break;}case SERVER_DUMP_INTERVAL:unhandledElement(reader,element);break;case SHARED_STORE:unhandledElement(reader,element);break;case TRANSACTION_TIMEOUT:unhandledElement(reader,element);break;case TRANSACTION_TIMEOUT_SCAN_PERIOD:unhandledElement(reader,element);break;case WILD_CARD_ROUTING_ENABLED:unhandledElement(reader,element);break;case DEAD_LETTER_ADDRESS_NODE_NAME:unhandledElement(reader,element);break;case EXPIRY_ADDRESS_NODE_NAME:unhandledElement(reader,element);break;case REDELIVERY_DELAY_NODE_NAME:unhandledElement(reader,element);break;case MAX_DELIVERY_ATTEMPTS:unhandledElement(reader,element);break;case MAX_SIZE_BYTES_NODE_NAME:unhandledElement(reader,element);break;case ADDRESS_FULL_MESSAGE_POLICY_NODE_NAME:unhandledElement(reader,element);break;case PAGE_SIZE_BYTES_NODE_NAME:unhandledElement(reader,element);break;case MESSAGE_COUNTER_HISTORY_DAY_LIMIT_NODE_NAME:unhandledElement(reader,element);break;case LVQ_NODE_NAME:unhandledElement(reader,element);break;case REDISTRIBUTION_DELAY_NODE_NAME:unhandledElement(reader,element);break;case SEND_TO_DLA_ON_NO_ROUTE:unhandledElement(reader,element);break;case QUEUES:{final ModelNode queues=parseQueues(reader);operation.get(QUEUE).set(queues);break;}case SUBSYSTEM:break;default :throw ParseUtils.unexpectedElement(reader);} @AT@ 17126 @LENGTH@ 34


UPD ExpressionStatement@@MethodInvocation:op.get("protocol").set("http") @TO@ MethodInvocation:op.get("protocol").set("HTTP/1.1") @AT@ 3971 @LENGTH@ 31
---UPD MethodInvocation@@op.get("protocol").set("http") @TO@ op.get("protocol").set("HTTP/1.1") @AT@ 3971 @LENGTH@ 30
------UPD SimpleName@@MethodName:set:["http"] @TO@ MethodName:set:["HTTP/1.1"] @AT@ 3990 @LENGTH@ 11
---------UPD StringLiteral@@"http" @TO@ "HTTP/1.1" @AT@ 3994 @LENGTH@ 6


UPD IfStatement@@if (part.startsWith("//http//") || part.startsWith("//https//")) {  throw new ResolveEndpointFailedException(uri,"The uri part is not configured correctly. You have duplicated the http(s) protocol.");} @TO@ if (part.startsWith("//http//") || part.startsWith("//https//") || part.startsWith("//http://")|| part.startsWith("//https://")) {  throw new ResolveEndpointFailedException(uri,"The uri part is not configured correctly. You have duplicated the http(s) protocol.");} @AT@ 12322 @LENGTH@ 254
---UPD InfixExpression@@part.startsWith("//http//") || part.startsWith("//https//") @TO@ part.startsWith("//http//") || part.startsWith("//https//") || part.startsWith("//http://")|| part.startsWith("//https://") @AT@ 12326 @LENGTH@ 59
------INS MethodInvocation@@part.startsWith("//http://") @TO@ InfixExpression@@part.startsWith("//http//") || part.startsWith("//https//") @AT@ 12389 @LENGTH@ 28
---------INS SimpleName@@Name:part @TO@ MethodInvocation@@part.startsWith("//http://") @AT@ 12389 @LENGTH@ 4
---------INS SimpleName@@MethodName:startsWith:["//http://"] @TO@ MethodInvocation@@part.startsWith("//http://") @AT@ 12394 @LENGTH@ 23
------------INS StringLiteral@@"//http://" @TO@ SimpleName@@MethodName:startsWith:["//http://"] @AT@ 12405 @LENGTH@ 11
------INS MethodInvocation@@part.startsWith("//https://") @TO@ InfixExpression@@part.startsWith("//http//") || part.startsWith("//https//") @AT@ 12421 @LENGTH@ 29
---------INS SimpleName@@Name:part @TO@ MethodInvocation@@part.startsWith("//https://") @AT@ 12421 @LENGTH@ 4
---------INS SimpleName@@MethodName:startsWith:["//https://"] @TO@ MethodInvocation@@part.startsWith("//https://") @AT@ 12426 @LENGTH@ 24
------------INS StringLiteral@@"//https://" @TO@ SimpleName@@MethodName:startsWith:["//https://"] @AT@ 12437 @LENGTH@ 12


UPD IfStatement@@if (managementRepoService != null) {  try {    final ManagementRepository repository=(ManagementRepository)managementRepoService.getValue();    if (repository.getDataSources() != null) {      for (      DataSource ds : repository.getDataSources()) {        if (jndiName.equalsIgnoreCase(ds.getJndiName())) {          if (MAX_POOL_SIZE.equals(parameterName)) {            ds.getPoolConfiguration().setMaxSize(newValue.asInt());          }          if (MIN_POOL_SIZE.equals(parameterName)) {            ds.getPoolConfiguration().setMinSize(newValue.asInt());          }          if (BLOCKING_TIMEOUT_WAIT_MILLIS.equals(parameterName)) {            ds.getPoolConfiguration().setBlockingTimeout(newValue.asLong());          }          if (POOL_USE_STRICT_MIN.equals(parameterName)) {            ds.getPoolConfiguration().setStrictMin(newValue.asBoolean());          }          if (USE_FAST_FAIL.equals(parameterName)) {            ds.getPoolConfiguration().setUseFastFail(newValue.asBoolean());          }        }      }    }    modelChanged(context,operation,resultHandler,parameterName,newValue,currentValue);  } catch (  Exception e) {    throw new OperationFailedException(new ModelNode().set("failed to set attribute" + e.getMessage()));  }} @TO@ if (managementRepoService != null) {  try {    final ManagementRepository repository=(ManagementRepository)managementRepoService.getValue();    if (repository.getDataSources() != null) {      for (      DataSource ds : repository.getDataSources()) {        if (jndiName.equalsIgnoreCase(ds.getJndiName())) {          if (MAX_POOL_SIZE.equals(parameterName)) {            ds.getPoolConfiguration().setMaxSize(newValue.asInt());          }          if (MIN_POOL_SIZE.equals(parameterName)) {            ds.getPoolConfiguration().setMinSize(newValue.asInt());          }          if (BLOCKING_TIMEOUT_WAIT_MILLIS.equals(parameterName)) {            ds.getPoolConfiguration().setBlockingTimeout(newValue.asLong());          }          if (POOL_USE_STRICT_MIN.equals(parameterName)) {            ds.getPoolConfiguration().setStrictMin(newValue.asBoolean());          }          if (USE_FAST_FAIL.equals(parameterName)) {            ds.getPoolConfiguration().setUseFastFail(newValue.asBoolean());          }        }      }    }    resultHandler.handleResultComplete();  } catch (  Exception e) {    throw new OperationFailedException(new ModelNode().set("failed to set attribute" + e.getMessage()));  }} else {  resultHandler.handleResultComplete();} @AT@ 9195 @LENGTH@ 2199
---UPD Block@@ThenBody:{  try {    final ManagementRepository repository=(ManagementRepository)managementRepoService.getValue();    if (repository.getDataSources() != null) {      for (      DataSource ds : repository.getDataSources()) {        if (jndiName.equalsIgnoreCase(ds.getJndiName())) {          if (MAX_POOL_SIZE.equals(parameterName)) {            ds.getPoolConfiguration().setMaxSize(newValue.asInt());          }          if (MIN_POOL_SIZE.equals(parameterName)) {            ds.getPoolConfiguration().setMinSize(newValue.asInt());          }          if (BLOCKING_TIMEOUT_WAIT_MILLIS.equals(parameterName)) {            ds.getPoolConfiguration().setBlockingTimeout(newValue.asLong());          }          if (POOL_USE_STRICT_MIN.equals(parameterName)) {            ds.getPoolConfiguration().setStrictMin(newValue.asBoolean());          }          if (USE_FAST_FAIL.equals(parameterName)) {            ds.getPoolConfiguration().setUseFastFail(newValue.asBoolean());          }        }      }    }    modelChanged(context,operation,resultHandler,parameterName,newValue,currentValue);  } catch (  Exception e) {    throw new OperationFailedException(new ModelNode().set("failed to set attribute" + e.getMessage()));  }} @TO@ ThenBody:{  try {    final ManagementRepository repository=(ManagementRepository)managementRepoService.getValue();    if (repository.getDataSources() != null) {      for (      DataSource ds : repository.getDataSources()) {        if (jndiName.equalsIgnoreCase(ds.getJndiName())) {          if (MAX_POOL_SIZE.equals(parameterName)) {            ds.getPoolConfiguration().setMaxSize(newValue.asInt());          }          if (MIN_POOL_SIZE.equals(parameterName)) {            ds.getPoolConfiguration().setMinSize(newValue.asInt());          }          if (BLOCKING_TIMEOUT_WAIT_MILLIS.equals(parameterName)) {            ds.getPoolConfiguration().setBlockingTimeout(newValue.asLong());          }          if (POOL_USE_STRICT_MIN.equals(parameterName)) {            ds.getPoolConfiguration().setStrictMin(newValue.asBoolean());          }          if (USE_FAST_FAIL.equals(parameterName)) {            ds.getPoolConfiguration().setUseFastFail(newValue.asBoolean());          }        }      }    }    resultHandler.handleResultComplete();  } catch (  Exception e) {    throw new OperationFailedException(new ModelNode().set("failed to set attribute" + e.getMessage()));  }} @AT@ 9230 @LENGTH@ 2164
------UPD TryStatement@@try {  final ManagementRepository repository=(ManagementRepository)managementRepoService.getValue();  if (repository.getDataSources() != null) {    for (    DataSource ds : repository.getDataSources()) {      if (jndiName.equalsIgnoreCase(ds.getJndiName())) {        if (MAX_POOL_SIZE.equals(parameterName)) {          ds.getPoolConfiguration().setMaxSize(newValue.asInt());        }        if (MIN_POOL_SIZE.equals(parameterName)) {          ds.getPoolConfiguration().setMinSize(newValue.asInt());        }        if (BLOCKING_TIMEOUT_WAIT_MILLIS.equals(parameterName)) {          ds.getPoolConfiguration().setBlockingTimeout(newValue.asLong());        }        if (POOL_USE_STRICT_MIN.equals(parameterName)) {          ds.getPoolConfiguration().setStrictMin(newValue.asBoolean());        }        if (USE_FAST_FAIL.equals(parameterName)) {          ds.getPoolConfiguration().setUseFastFail(newValue.asBoolean());        }      }    }  }  modelChanged(context,operation,resultHandler,parameterName,newValue,currentValue);} catch (Exception e) {  throw new OperationFailedException(new ModelNode().set("failed to set attribute" + e.getMessage()));} @TO@ try {  final ManagementRepository repository=(ManagementRepository)managementRepoService.getValue();  if (repository.getDataSources() != null) {    for (    DataSource ds : repository.getDataSources()) {      if (jndiName.equalsIgnoreCase(ds.getJndiName())) {        if (MAX_POOL_SIZE.equals(parameterName)) {          ds.getPoolConfiguration().setMaxSize(newValue.asInt());        }        if (MIN_POOL_SIZE.equals(parameterName)) {          ds.getPoolConfiguration().setMinSize(newValue.asInt());        }        if (BLOCKING_TIMEOUT_WAIT_MILLIS.equals(parameterName)) {          ds.getPoolConfiguration().setBlockingTimeout(newValue.asLong());        }        if (POOL_USE_STRICT_MIN.equals(parameterName)) {          ds.getPoolConfiguration().setStrictMin(newValue.asBoolean());        }        if (USE_FAST_FAIL.equals(parameterName)) {          ds.getPoolConfiguration().setUseFastFail(newValue.asBoolean());        }      }    }  }  resultHandler.handleResultComplete();} catch (Exception e) {  throw new OperationFailedException(new ModelNode().set("failed to set attribute" + e.getMessage()));} @AT@ 9260 @LENGTH@ 2108
---------UPD ExpressionStatement@@MethodInvocation:modelChanged(context,operation,resultHandler,parameterName,newValue,currentValue) @TO@ MethodInvocation:resultHandler.handleResultComplete() @AT@ 11025 @LENGTH@ 87
------------UPD MethodInvocation@@modelChanged(context,operation,resultHandler,parameterName,newValue,currentValue) @TO@ resultHandler.handleResultComplete() @AT@ 11025 @LENGTH@ 86
---------------INS SimpleName@@Name:resultHandler @TO@ MethodInvocation@@modelChanged(context,operation,resultHandler,parameterName,newValue,currentValue) @AT@ 11025 @LENGTH@ 13
---------------DEL SimpleName@@MethodName:modelChanged:[context, operation, resultHandler, parameterName, newValue, currentValue] @AT@ 11025 @LENGTH@ 86
------------------DEL SimpleName@@context @AT@ 11038 @LENGTH@ 7
------------------DEL SimpleName@@operation @AT@ 11047 @LENGTH@ 9
------------------DEL SimpleName@@resultHandler @AT@ 11058 @LENGTH@ 13
------------------DEL SimpleName@@parameterName @AT@ 11073 @LENGTH@ 13
------------------DEL SimpleName@@newValue @AT@ 11088 @LENGTH@ 8
------------------DEL SimpleName@@currentValue @AT@ 11098 @LENGTH@ 12
---------------INS SimpleName@@MethodName:handleResultComplete:[] @TO@ MethodInvocation@@modelChanged(context,operation,resultHandler,parameterName,newValue,currentValue) @AT@ 11039 @LENGTH@ 22
---INS Block@@ElseBody:{  resultHandler.handleResultComplete();} @TO@ IfStatement@@if (managementRepoService != null) {  try {    final ManagementRepository repository=(ManagementRepository)managementRepoService.getValue();    if (repository.getDataSources() != null) {      for (      DataSource ds : repository.getDataSources()) {        if (jndiName.equalsIgnoreCase(ds.getJndiName())) {          if (MAX_POOL_SIZE.equals(parameterName)) {            ds.getPoolConfiguration().setMaxSize(newValue.asInt());          }          if (MIN_POOL_SIZE.equals(parameterName)) {            ds.getPoolConfiguration().setMinSize(newValue.asInt());          }          if (BLOCKING_TIMEOUT_WAIT_MILLIS.equals(parameterName)) {            ds.getPoolConfiguration().setBlockingTimeout(newValue.asLong());          }          if (POOL_USE_STRICT_MIN.equals(parameterName)) {            ds.getPoolConfiguration().setStrictMin(newValue.asBoolean());          }          if (USE_FAST_FAIL.equals(parameterName)) {            ds.getPoolConfiguration().setUseFastFail(newValue.asBoolean());          }        }      }    }    modelChanged(context,operation,resultHandler,parameterName,newValue,currentValue);  } catch (  Exception e) {    throw new OperationFailedException(new ModelNode().set("failed to set attribute" + e.getMessage()));  }} @AT@ 11350 @LENGTH@ 93
------INS ExpressionStatement@@MethodInvocation:resultHandler.handleResultComplete() @TO@ Block@@ElseBody:{  resultHandler.handleResultComplete();} @AT@ 11380 @LENGTH@ 37
---------INS MethodInvocation@@resultHandler.handleResultComplete() @TO@ ExpressionStatement@@MethodInvocation:resultHandler.handleResultComplete() @AT@ 11380 @LENGTH@ 36
------------INS SimpleName@@Name:resultHandler @TO@ MethodInvocation@@resultHandler.handleResultComplete() @AT@ 11380 @LENGTH@ 13
------------INS SimpleName@@MethodName:handleResultComplete:[] @TO@ MethodInvocation@@resultHandler.handleResultComplete() @AT@ 11394 @LENGTH@ 22


INS MethodDeclaration@@public, void, MethodName:findsPeopleWithAndAndOr, Exception,  @TO@ TypeDeclaration@@[@RunWith(SpringJUnit4ClassRunner.class), public, abstract]AbstractPersonRepositoryIntegrationTests,  @AT@ 5482 @LENGTH@ 239
---INS Modifier@@public @TO@ MethodDeclaration@@public, void, MethodName:findsPeopleWithAndAndOr, Exception,  @AT@ 5482 @LENGTH@ 6
---INS PrimitiveType@@void @TO@ MethodDeclaration@@public, void, MethodName:findsPeopleWithAndAndOr, Exception,  @AT@ 5489 @LENGTH@ 4
---INS SimpleName@@MethodName:findsPeopleWithAndAndOr @TO@ MethodDeclaration@@public, void, MethodName:findsPeopleWithAndAndOr, Exception,  @AT@ 5494 @LENGTH@ 23
---INS SimpleType@@Exception @TO@ MethodDeclaration@@public, void, MethodName:findsPeopleWithAndAndOr, Exception,  @AT@ 5527 @LENGTH@ 9
---INS VariableDeclarationStatement@@List<Person> result=repository.findByAgeOrLastnameLikeAndFirstnameLike(45,"*ss*","*a*"); @TO@ MethodDeclaration@@public, void, MethodName:findsPeopleWithAndAndOr, Exception,  @AT@ 5544 @LENGTH@ 92
------INS ParameterizedType@@List<Person> @TO@ VariableDeclarationStatement@@List<Person> result=repository.findByAgeOrLastnameLikeAndFirstnameLike(45,"*ss*","*a*"); @AT@ 5544 @LENGTH@ 12
---------INS SimpleType@@List @TO@ ParameterizedType@@List<Person> @AT@ 5544 @LENGTH@ 4
---------INS SimpleType@@Person @TO@ ParameterizedType@@List<Person> @AT@ 5549 @LENGTH@ 6
------INS VariableDeclarationFragment@@result=repository.findByAgeOrLastnameLikeAndFirstnameLike(45,"*ss*","*a*") @TO@ VariableDeclarationStatement@@List<Person> result=repository.findByAgeOrLastnameLikeAndFirstnameLike(45,"*ss*","*a*"); @AT@ 5557 @LENGTH@ 78
---------INS SimpleName@@result @TO@ VariableDeclarationFragment@@result=repository.findByAgeOrLastnameLikeAndFirstnameLike(45,"*ss*","*a*") @AT@ 5557 @LENGTH@ 6
---------INS MethodInvocation@@repository.findByAgeOrLastnameLikeAndFirstnameLike(45,"*ss*","*a*") @TO@ VariableDeclarationFragment@@result=repository.findByAgeOrLastnameLikeAndFirstnameLike(45,"*ss*","*a*") @AT@ 5566 @LENGTH@ 69
------------INS SimpleName@@Name:repository @TO@ MethodInvocation@@repository.findByAgeOrLastnameLikeAndFirstnameLike(45,"*ss*","*a*") @AT@ 5566 @LENGTH@ 10
------------INS SimpleName@@MethodName:findByAgeOrLastnameLikeAndFirstnameLike:[45, "*ss*", "*a*"] @TO@ MethodInvocation@@repository.findByAgeOrLastnameLikeAndFirstnameLike(45,"*ss*","*a*") @AT@ 5577 @LENGTH@ 58
---------------INS NumberLiteral@@45 @TO@ SimpleName@@MethodName:findByAgeOrLastnameLikeAndFirstnameLike:[45, "*ss*", "*a*"] @AT@ 5617 @LENGTH@ 2
---------------INS StringLiteral@@"*ss*" @TO@ SimpleName@@MethodName:findByAgeOrLastnameLikeAndFirstnameLike:[45, "*ss*", "*a*"] @AT@ 5621 @LENGTH@ 6
---------------INS StringLiteral@@"*a*" @TO@ SimpleName@@MethodName:findByAgeOrLastnameLikeAndFirstnameLike:[45, "*ss*", "*a*"] @AT@ 5629 @LENGTH@ 5
---INS ExpressionStatement@@MethodInvocation:assertThat(result.size(),is(2)) @TO@ MethodDeclaration@@public, void, MethodName:findsPeopleWithAndAndOr, Exception,  @AT@ 5639 @LENGTH@ 33
------INS MethodInvocation@@assertThat(result.size(),is(2)) @TO@ ExpressionStatement@@MethodInvocation:assertThat(result.size(),is(2)) @AT@ 5639 @LENGTH@ 32
---------INS SimpleName@@MethodName:assertThat:[result.size(), is(2)] @TO@ MethodInvocation@@assertThat(result.size(),is(2)) @AT@ 5639 @LENGTH@ 32
------------INS MethodInvocation@@result.size() @TO@ SimpleName@@MethodName:assertThat:[result.size(), is(2)] @AT@ 5650 @LENGTH@ 13
---------------INS SimpleName@@Name:result @TO@ MethodInvocation@@result.size() @AT@ 5650 @LENGTH@ 6
---------------INS SimpleName@@MethodName:size:[] @TO@ MethodInvocation@@result.size() @AT@ 5657 @LENGTH@ 6
------------INS MethodInvocation@@is(2) @TO@ SimpleName@@MethodName:assertThat:[result.size(), is(2)] @AT@ 5665 @LENGTH@ 5
---------------INS SimpleName@@MethodName:is:[2] @TO@ MethodInvocation@@is(2) @AT@ 5665 @LENGTH@ 5
------------------INS NumberLiteral@@2 @TO@ SimpleName@@MethodName:is:[2] @AT@ 5668 @LENGTH@ 1
---------------INS SimpleName@@MethodName:is:[2] @TO@ MethodInvocation@@is(2) @AT@ 5665 @LENGTH@ 5
------------------INS NumberLiteral@@2 @TO@ SimpleName@@MethodName:is:[2] @AT@ 5668 @LENGTH@ 1
---INS ExpressionStatement@@MethodInvocation:assertThat(result,hasItems(boyd,stefan)) @TO@ MethodDeclaration@@public, void, MethodName:findsPeopleWithAndAndOr, Exception,  @AT@ 5675 @LENGTH@ 43
------INS MethodInvocation@@assertThat(result,hasItems(boyd,stefan)) @TO@ ExpressionStatement@@MethodInvocation:assertThat(result,hasItems(boyd,stefan)) @AT@ 5675 @LENGTH@ 42
---------INS SimpleName@@MethodName:assertThat:[result, hasItems(boyd,stefan)] @TO@ MethodInvocation@@assertThat(result,hasItems(boyd,stefan)) @AT@ 5675 @LENGTH@ 42
------------INS SimpleName@@result @TO@ SimpleName@@MethodName:assertThat:[result, hasItems(boyd,stefan)] @AT@ 5686 @LENGTH@ 6
------------INS MethodInvocation@@hasItems(boyd,stefan) @TO@ SimpleName@@MethodName:assertThat:[result, hasItems(boyd,stefan)] @AT@ 5694 @LENGTH@ 22
---------------INS SimpleName@@MethodName:hasItems:[boyd, stefan] @TO@ MethodInvocation@@hasItems(boyd,stefan) @AT@ 5694 @LENGTH@ 22
------------------INS SimpleName@@boyd @TO@ SimpleName@@MethodName:hasItems:[boyd, stefan] @AT@ 5703 @LENGTH@ 4
------------------INS SimpleName@@stefan @TO@ SimpleName@@MethodName:hasItems:[boyd, stefan] @AT@ 5709 @LENGTH@ 6


UPD Block@@WhileBody:{  requireSingleAttribute(reader,Attribute.NAME.getLocalName());  final String name=reader.getAttributeValue(0);  if (!names.add(name)) {    throw new XMLStreamException("Duplicate profile declaration " + name,reader.getLocation());  }  final List<ModelNode> subsystems=new ArrayList<ModelNode>();  final Set<String> includes=new HashSet<String>();  final ModelNode profileIncludes=new ModelNode();  final Set<String> configuredSubsystemTypes=new HashSet<String>();  while (reader.nextTag() != END_ELEMENT) {switch (Namespace.forUri(reader.getNamespaceURI())) {case UNKNOWN:{        if (Element.forName(reader.getLocalName()) != Element.SUBSYSTEM) {          throw unexpectedElement(reader);        }        if (!configuredSubsystemTypes.add(reader.getNamespaceURI())) {          throw new XMLStreamException("Duplicate subsystem declaration",reader.getLocation());        }        reader.handleAny(subsystems);        break;      }case DOMAIN_1_0:{      if (configuredSubsystemTypes.size() > 0) {        throw unexpectedElement(reader);      }      if (Element.forName(reader.getLocalName()) != Element.INCLUDE) {        throw unexpectedElement(reader);      }      final String includedName=readStringAttributeElement(reader,Attribute.PROFILE.getLocalName());      if (!names.contains(includedName)) {        throw new XMLStreamException("No profile found for inclusion",reader.getLocation());      }      if (!includes.add(includedName)) {        throw new XMLStreamException("Duplicate profile include",reader.getLocation());      }      profileIncludes.add(includedName);      break;    }default :{    throw unexpectedElement(reader);  }}}final ModelNode profile=new ModelNode();profile.get(OP).set("add-profile");profile.get(OP_ADDR).set(address.clone().add(name));profile.get(REQUEST_PROPERTIES).set(profileIncludes);list.add(profile);for (final ModelNode update : subsystems) {final ModelNode subsystemAddress=address.clone().add(name).add(update.require(OP_ADDR));update.get(OP_ADDR).set(subsystemAddress);list.add(update);}if (configuredSubsystemTypes.size() == 0) {throw new XMLStreamException("Profile has no subsystem configurations",reader.getLocation());}} @TO@ WhileBody:{  requireSingleAttribute(reader,Attribute.NAME.getLocalName());  final String name=reader.getAttributeValue(0);  if (!names.add(name)) {    throw new XMLStreamException("Duplicate profile declaration " + name,reader.getLocation());  }  final List<ModelNode> subsystems=new ArrayList<ModelNode>();  final Set<String> includes=new HashSet<String>();  final ModelNode profileIncludes=new ModelNode();  final Set<String> configuredSubsystemTypes=new HashSet<String>();  while (reader.nextTag() != END_ELEMENT) {switch (Namespace.forUri(reader.getNamespaceURI())) {case UNKNOWN:{        if (Element.forName(reader.getLocalName()) != Element.SUBSYSTEM) {          throw unexpectedElement(reader);        }        if (!configuredSubsystemTypes.add(reader.getNamespaceURI())) {          throw new XMLStreamException("Duplicate subsystem declaration",reader.getLocation());        }        reader.handleAny(subsystems);        break;      }case DOMAIN_1_0:{      if (configuredSubsystemTypes.size() > 0) {        throw unexpectedElement(reader);      }      if (Element.forName(reader.getLocalName()) != Element.INCLUDE) {        throw unexpectedElement(reader);      }      final String includedName=readStringAttributeElement(reader,Attribute.PROFILE.getLocalName());      if (!names.contains(includedName)) {        throw new XMLStreamException("No profile found for inclusion",reader.getLocation());      }      if (!includes.add(includedName)) {        throw new XMLStreamException("Duplicate profile include",reader.getLocation());      }      profileIncludes.add(includedName);      break;    }default :{    throw unexpectedElement(reader);  }}}final ModelNode profile=new ModelNode();profile.get(OP).set(ADD);profile.get(OP_ADDR).set(address).add(PROFILE,name);profile.get(REQUEST_PROPERTIES,"includes").set(profileIncludes);list.add(profile);for (final ModelNode update : subsystems) {final ModelNode subsystemAddress=address.clone().add(name).add(update.require(OP_ADDR));update.get(OP_ADDR).set(subsystemAddress);list.add(update);}if (configuredSubsystemTypes.size() == 0) {throw new XMLStreamException("Profile has no subsystem configurations",reader.getLocation());}} @AT@ 16368 @LENGTH@ 3385
---UPD ExpressionStatement@@MethodInvocation:profile.get(OP).set("add-profile") @TO@ MethodInvocation:profile.get(OP).set(ADD) @AT@ 19001 @LENGTH@ 35
------UPD MethodInvocation@@profile.get(OP).set("add-profile") @TO@ profile.get(OP).set(ADD) @AT@ 19001 @LENGTH@ 34
---------UPD SimpleName@@MethodName:set:["add-profile"] @TO@ MethodName:set:[ADD] @AT@ 19017 @LENGTH@ 18
------------DEL StringLiteral@@"add-profile" @AT@ 19021 @LENGTH@ 13
------------INS SimpleName@@ADD @TO@ SimpleName@@MethodName:set:["add-profile"] @AT@ 19307 @LENGTH@ 3
---UPD ExpressionStatement@@MethodInvocation:profile.get(OP_ADDR).set(address.clone().add(name)) @TO@ MethodInvocation:profile.get(OP_ADDR).set(address).add(PROFILE,name) @AT@ 19049 @LENGTH@ 52
------UPD MethodInvocation@@profile.get(OP_ADDR).set(address.clone().add(name)) @TO@ profile.get(OP_ADDR).set(address).add(PROFILE,name) @AT@ 19049 @LENGTH@ 51
---------DEL SimpleName@@MethodName:set:[address.clone().add(name)] @AT@ 19070 @LENGTH@ 30
------------DEL MethodInvocation@@address.clone().add(name) @AT@ 19074 @LENGTH@ 25
---------------DEL MethodInvocation@@MethodName:clone:[] @AT@ 19074 @LENGTH@ 15
---------MOV SimpleName@@MethodName:add:[name] @TO@ MethodInvocation@@profile.get(OP_ADDR).set(address.clone().add(name)) @AT@ 19090 @LENGTH@ 9
------------INS SimpleName@@PROFILE @TO@ SimpleName@@MethodName:add:[name] @AT@ 19363 @LENGTH@ 7
---------INS MethodInvocation@@MethodName:set:[address] @TO@ MethodInvocation@@profile.get(OP_ADDR).set(address.clone().add(name)) @AT@ 19325 @LENGTH@ 33
------------MOV SimpleName@@Name:address @TO@ MethodInvocation@@MethodName:set:[address] @AT@ 19074 @LENGTH@ 7
---UPD ExpressionStatement@@MethodInvocation:profile.get(REQUEST_PROPERTIES).set(profileIncludes) @TO@ MethodInvocation:profile.get(REQUEST_PROPERTIES,"includes").set(profileIncludes) @AT@ 19114 @LENGTH@ 53
------UPD MethodInvocation@@profile.get(REQUEST_PROPERTIES).set(profileIncludes) @TO@ profile.get(REQUEST_PROPERTIES,"includes").set(profileIncludes) @AT@ 19114 @LENGTH@ 52
---------UPD MethodInvocation@@MethodName:get:[REQUEST_PROPERTIES] @TO@ MethodName:get:[REQUEST_PROPERTIES, "includes"] @AT@ 19114 @LENGTH@ 31
------------INS StringLiteral@@"includes" @TO@ MethodInvocation@@MethodName:get:[REQUEST_PROPERTIES] @AT@ 19423 @LENGTH@ 10


UPD MethodDeclaration@@public, PersistentProperty<?>, MethodName:createPersistentProperty, Field field, PropertyDescriptor descriptor, MappingConfigurationException,  @TO@ public, PersistentProperty<T>, T, MethodName:createPersistentProperty, Field field, PropertyDescriptor descriptor, Class<T> type, MappingConfigurationException,  @AT@ 2656 @LENGTH@ 233
---INS SingleVariableDeclaration@@Class<T> type @TO@ MethodDeclaration@@public, PersistentProperty<?>, MethodName:createPersistentProperty, Field field, PropertyDescriptor descriptor, MappingConfigurationException,  @AT@ 2659 @LENGTH@ 13
------INS ParameterizedType@@Class<T> @TO@ SingleVariableDeclaration@@Class<T> type @AT@ 2659 @LENGTH@ 8
---------INS SimpleType@@Class @TO@ ParameterizedType@@Class<T> @AT@ 2659 @LENGTH@ 5
---------INS SimpleType@@T @TO@ ParameterizedType@@Class<T> @AT@ 2665 @LENGTH@ 1
------INS SimpleName@@type @TO@ SingleVariableDeclaration@@Class<T> type @AT@ 2668 @LENGTH@ 4
---UPD ParameterizedType@@PersistentProperty<?> @TO@ PersistentProperty<T> @AT@ 2663 @LENGTH@ 21
------INS SimpleType@@T @TO@ ParameterizedType@@PersistentProperty<?> @AT@ 2587 @LENGTH@ 1
------DEL WildcardType@@? @AT@ 2682 @LENGTH@ 1
---UPD ReturnStatement@@ClassInstanceCreation:new BasicPersistentProperty(field.getName(),field.getType(),field,descriptor) @TO@ ClassInstanceCreation:new BasicPersistentProperty<T>(field.getName(),type,field,descriptor) @AT@ 2797 @LENGTH@ 88
------UPD ClassInstanceCreation@@BasicPersistentProperty[field.getName(), field.getType(), field, descriptor] @TO@ BasicPersistentProperty<T>[field.getName(), type, field, descriptor] @AT@ 2804 @LENGTH@ 80
---------INS ParameterizedType@@BasicPersistentProperty<T> @TO@ ClassInstanceCreation@@BasicPersistentProperty[field.getName(), field.getType(), field, descriptor] @AT@ 2728 @LENGTH@ 26
------------INS SimpleType@@BasicPersistentProperty @TO@ ParameterizedType@@BasicPersistentProperty<T> @AT@ 2728 @LENGTH@ 23
------------INS SimpleType@@T @TO@ ParameterizedType@@BasicPersistentProperty<T> @AT@ 2752 @LENGTH@ 1
---------INS SimpleName@@type @TO@ ClassInstanceCreation@@BasicPersistentProperty[field.getName(), field.getType(), field, descriptor] @AT@ 2772 @LENGTH@ 4
---------DEL SimpleType@@BasicPersistentProperty @AT@ 2808 @LENGTH@ 23
---------DEL MethodInvocation@@field.getType() @AT@ 2849 @LENGTH@ 15
------------DEL SimpleName@@Name:field @AT@ 2849 @LENGTH@ 5
------------DEL SimpleName@@MethodName:getType:[] @AT@ 2855 @LENGTH@ 9


INS MethodDeclaration@@public, String, MethodName:toString,  @TO@ TypeDeclaration@@SimpleAttachmentKey, AttachmentKey<T> @AT@ 417 @LENGTH@ 316
---INS Modifier@@public @TO@ MethodDeclaration@@public, String, MethodName:toString,  @AT@ 417 @LENGTH@ 6
---INS SimpleType@@String @TO@ MethodDeclaration@@public, String, MethodName:toString,  @AT@ 424 @LENGTH@ 6
---INS SimpleName@@MethodName:toString @TO@ MethodDeclaration@@public, String, MethodName:toString,  @AT@ 431 @LENGTH@ 8
---INS IfStatement@@if (valueClass != null) {  StringBuilder sb=new StringBuilder(getClass().getName());  sb.append("<");  sb.append(valueClass.getName());  sb.append(">");  return sb.toString();} @TO@ MethodDeclaration@@public, String, MethodName:toString,  @AT@ 452 @LENGTH@ 242
------INS InfixExpression@@valueClass != null @TO@ IfStatement@@if (valueClass != null) {  StringBuilder sb=new StringBuilder(getClass().getName());  sb.append("<");  sb.append(valueClass.getName());  sb.append(">");  return sb.toString();} @AT@ 456 @LENGTH@ 18
---------INS SimpleName@@valueClass @TO@ InfixExpression@@valueClass != null @AT@ 456 @LENGTH@ 10
---------INS Operator@@!= @TO@ InfixExpression@@valueClass != null @AT@ 466 @LENGTH@ 2
---------INS NullLiteral@@null @TO@ InfixExpression@@valueClass != null @AT@ 470 @LENGTH@ 4
------INS Block@@ThenBody:{  StringBuilder sb=new StringBuilder(getClass().getName());  sb.append("<");  sb.append(valueClass.getName());  sb.append(">");  return sb.toString();} @TO@ IfStatement@@if (valueClass != null) {  StringBuilder sb=new StringBuilder(getClass().getName());  sb.append("<");  sb.append(valueClass.getName());  sb.append(">");  return sb.toString();} @AT@ 476 @LENGTH@ 218
---------INS VariableDeclarationStatement@@StringBuilder sb=new StringBuilder(getClass().getName()); @TO@ Block@@ThenBody:{  StringBuilder sb=new StringBuilder(getClass().getName());  sb.append("<");  sb.append(valueClass.getName());  sb.append(">");  return sb.toString();} @AT@ 490 @LENGTH@ 59
------------INS SimpleType@@StringBuilder @TO@ VariableDeclarationStatement@@StringBuilder sb=new StringBuilder(getClass().getName()); @AT@ 490 @LENGTH@ 13
------------INS VariableDeclarationFragment@@sb=new StringBuilder(getClass().getName()) @TO@ VariableDeclarationStatement@@StringBuilder sb=new StringBuilder(getClass().getName()); @AT@ 504 @LENGTH@ 44
---------------INS SimpleName@@sb @TO@ VariableDeclarationFragment@@sb=new StringBuilder(getClass().getName()) @AT@ 504 @LENGTH@ 2
---------------INS ClassInstanceCreation@@StringBuilder[getClass().getName()] @TO@ VariableDeclarationFragment@@sb=new StringBuilder(getClass().getName()) @AT@ 509 @LENGTH@ 39
------------------INS New@@new @TO@ ClassInstanceCreation@@StringBuilder[getClass().getName()] @AT@ 509 @LENGTH@ 3
------------------INS SimpleType@@StringBuilder @TO@ ClassInstanceCreation@@StringBuilder[getClass().getName()] @AT@ 513 @LENGTH@ 13
------------------INS MethodInvocation@@getClass().getName() @TO@ ClassInstanceCreation@@StringBuilder[getClass().getName()] @AT@ 527 @LENGTH@ 20
---------------------INS MethodInvocation@@MethodName:getClass:[] @TO@ MethodInvocation@@getClass().getName() @AT@ 527 @LENGTH@ 10
---------------------INS SimpleName@@MethodName:getName:[] @TO@ MethodInvocation@@getClass().getName() @AT@ 538 @LENGTH@ 9
---------INS ExpressionStatement@@MethodInvocation:sb.append("<") @TO@ Block@@ThenBody:{  StringBuilder sb=new StringBuilder(getClass().getName());  sb.append("<");  sb.append(valueClass.getName());  sb.append(">");  return sb.toString();} @AT@ 562 @LENGTH@ 15
------------INS MethodInvocation@@sb.append("<") @TO@ ExpressionStatement@@MethodInvocation:sb.append("<") @AT@ 562 @LENGTH@ 14
---------------INS SimpleName@@Name:sb @TO@ MethodInvocation@@sb.append("<") @AT@ 562 @LENGTH@ 2
---------------INS SimpleName@@MethodName:append:["<"] @TO@ MethodInvocation@@sb.append("<") @AT@ 565 @LENGTH@ 11
------------------INS StringLiteral@@"<" @TO@ SimpleName@@MethodName:append:["<"] @AT@ 572 @LENGTH@ 3
---------INS ExpressionStatement@@MethodInvocation:sb.append(valueClass.getName()) @TO@ Block@@ThenBody:{  StringBuilder sb=new StringBuilder(getClass().getName());  sb.append("<");  sb.append(valueClass.getName());  sb.append(">");  return sb.toString();} @AT@ 590 @LENGTH@ 32
------------INS MethodInvocation@@sb.append(valueClass.getName()) @TO@ ExpressionStatement@@MethodInvocation:sb.append(valueClass.getName()) @AT@ 590 @LENGTH@ 31
---------------INS SimpleName@@Name:sb @TO@ MethodInvocation@@sb.append(valueClass.getName()) @AT@ 590 @LENGTH@ 2
---------------INS SimpleName@@MethodName:append:[valueClass.getName()] @TO@ MethodInvocation@@sb.append(valueClass.getName()) @AT@ 593 @LENGTH@ 28
------------------INS MethodInvocation@@valueClass.getName() @TO@ SimpleName@@MethodName:append:[valueClass.getName()] @AT@ 600 @LENGTH@ 20
---------------------INS SimpleName@@Name:valueClass @TO@ MethodInvocation@@valueClass.getName() @AT@ 600 @LENGTH@ 10
---------------------INS SimpleName@@MethodName:getName:[] @TO@ MethodInvocation@@valueClass.getName() @AT@ 611 @LENGTH@ 9
---------INS ExpressionStatement@@MethodInvocation:sb.append(">") @TO@ Block@@ThenBody:{  StringBuilder sb=new StringBuilder(getClass().getName());  sb.append("<");  sb.append(valueClass.getName());  sb.append(">");  return sb.toString();} @AT@ 635 @LENGTH@ 15
------------INS MethodInvocation@@sb.append(">") @TO@ ExpressionStatement@@MethodInvocation:sb.append(">") @AT@ 635 @LENGTH@ 14
---------------INS SimpleName@@Name:sb @TO@ MethodInvocation@@sb.append(">") @AT@ 635 @LENGTH@ 2
---------------INS SimpleName@@MethodName:append:[">"] @TO@ MethodInvocation@@sb.append(">") @AT@ 638 @LENGTH@ 11
------------------INS StringLiteral@@">" @TO@ SimpleName@@MethodName:append:[">"] @AT@ 645 @LENGTH@ 3
---------INS ReturnStatement@@MethodInvocation:sb.toString() @TO@ Block@@ThenBody:{  StringBuilder sb=new StringBuilder(getClass().getName());  sb.append("<");  sb.append(valueClass.getName());  sb.append(">");  return sb.toString();} @AT@ 663 @LENGTH@ 21
------------INS MethodInvocation@@sb.toString() @TO@ ReturnStatement@@MethodInvocation:sb.toString() @AT@ 670 @LENGTH@ 13
---------------INS SimpleName@@Name:sb @TO@ MethodInvocation@@sb.toString() @AT@ 670 @LENGTH@ 2
---------------INS SimpleName@@MethodName:toString:[] @TO@ MethodInvocation@@sb.toString() @AT@ 673 @LENGTH@ 10
---INS ReturnStatement@@SuperMethodInvocation:super.toString() @TO@ MethodDeclaration@@public, String, MethodName:toString,  @AT@ 703 @LENGTH@ 24
------INS SuperMethodInvocation@@super.toString() @TO@ ReturnStatement@@SuperMethodInvocation:super.toString() @AT@ 710 @LENGTH@ 16
---------INS SimpleName@@MethodName:toString:[] @TO@ SuperMethodInvocation@@super.toString() @AT@ 716 @LENGTH@ 8


UPD VariableDeclarationStatement@@final InjectionTarget injectionTarget=new MethodInjectionTarget(methodName,methodInfo.declaringClass().name().toString(),methodInfo.returnType().name().toString()); @TO@ final InjectionTarget injectionTarget=new MethodInjectionTarget(methodInfo.declaringClass().name().toString(),methodName,methodInfo.returnType().name().toString()); @AT@ 13044 @LENGTH@ 168
---UPD VariableDeclarationFragment@@injectionTarget=new MethodInjectionTarget(methodName,methodInfo.declaringClass().name().toString(),methodInfo.returnType().name().toString()) @TO@ injectionTarget=new MethodInjectionTarget(methodInfo.declaringClass().name().toString(),methodName,methodInfo.returnType().name().toString()) @AT@ 13066 @LENGTH@ 145
------UPD ClassInstanceCreation@@MethodInjectionTarget[methodName, methodInfo.declaringClass().name().toString(), methodInfo.returnType().name().toString()] @TO@ MethodInjectionTarget[methodInfo.declaringClass().name().toString(), methodName, methodInfo.returnType().name().toString()] @AT@ 13084 @LENGTH@ 127
---------DEL SimpleName@@methodName @AT@ 13110 @LENGTH@ 10
---------INS SimpleName@@methodName @TO@ ClassInstanceCreation@@MethodInjectionTarget[methodName, methodInfo.declaringClass().name().toString(), methodInfo.returnType().name().toString()] @AT@ 13157 @LENGTH@ 10


UPD MethodDeclaration@@public, boolean, MethodName:canAppearNext, CommandContext ctx,  @TO@ public, boolean, MethodName:canAppearNext, CommandContext ctx, CommandFormatException,  @AT@ 3407 @LENGTH@ 254
---INS SimpleType@@CommandFormatException @TO@ MethodDeclaration@@public, boolean, MethodName:canAppearNext, CommandContext ctx,  @AT@ 3493 @LENGTH@ 22


UPD ReturnStatement@@MethodInvocation:deserializeValues(connection.lRange(rawKey,start,end),List.class) @TO@ MethodInvocation:deserializeValues(connection.lRange(rawKey,start,end)) @AT@ 3546 @LENGTH@ 76
---UPD MethodInvocation@@deserializeValues(connection.lRange(rawKey,start,end),List.class) @TO@ deserializeValues(connection.lRange(rawKey,start,end)) @AT@ 3553 @LENGTH@ 68
------UPD SimpleName@@MethodName:deserializeValues:[connection.lRange(rawKey,start,end), List.class] @TO@ MethodName:deserializeValues:[connection.lRange(rawKey,start,end)] @AT@ 3553 @LENGTH@ 68
---------DEL TypeLiteral@@List.class @AT@ 3610 @LENGTH@ 10


UPD MethodDeclaration@@public, static, void, MethodName:addService, BatchBuilder batchBuilder,  @TO@ public, static, void, MethodName:addService, ServiceTarget target,  @AT@ 1827 @LENGTH@ 196
---UPD SingleVariableDeclaration@@BatchBuilder batchBuilder @TO@ ServiceTarget target @AT@ 1857 @LENGTH@ 25
------UPD SimpleType@@BatchBuilder @TO@ ServiceTarget @AT@ 1857 @LENGTH@ 12
------UPD SimpleName@@batchBuilder @TO@ target @AT@ 1870 @LENGTH@ 12
---UPD ExpressionStatement@@MethodInvocation:batchBuilder.addService(SERVICE_NAME,service).install() @TO@ MethodInvocation:target.addService(SERVICE_NAME,service).install() @AT@ 1960 @LENGTH@ 57
------UPD MethodInvocation@@batchBuilder.addService(SERVICE_NAME,service).install() @TO@ target.addService(SERVICE_NAME,service).install() @AT@ 1960 @LENGTH@ 56
---------UPD SimpleName@@Name:batchBuilder @TO@ Name:target @AT@ 1960 @LENGTH@ 12


UPD MethodDeclaration@@public, voidMethodName:WeldManagedReferenceFactory, Class<?> componentClass, String ejbName, final InjectedValue<BeanManagerImpl> beanManager, final Set<Class<?>> interceptorClasses, final ClassLoader classLoader,  @TO@ public, voidMethodName:WeldManagedReferenceFactory, Class<?> componentClass, String ejbName, final Set<Class<?>> interceptorClasses, final ClassLoader classLoader,  @AT@ 2298 @LENGTH@ 416
---DEL SingleVariableDeclaration@@final InjectedValue<BeanManagerImpl> beanManager @AT@ 2374 @LENGTH@ 48
------DEL Modifier@@final @AT@ 2374 @LENGTH@ 5
------DEL ParameterizedType@@InjectedValue<BeanManagerImpl> @AT@ 2380 @LENGTH@ 30
---------DEL SimpleType@@InjectedValue @AT@ 2380 @LENGTH@ 13
---------DEL SimpleType@@BeanManagerImpl @AT@ 2394 @LENGTH@ 15
------DEL SimpleName@@beanManager @AT@ 2411 @LENGTH@ 11
---UPD ExpressionStatement@@Assignment:this.beanManager=beanManager @TO@ Assignment:this.beanManager=new InjectedValue<BeanManagerImpl>() @AT@ 2583 @LENGTH@ 31
------UPD Assignment@@this.beanManager=beanManager @TO@ this.beanManager=new InjectedValue<BeanManagerImpl>() @AT@ 2583 @LENGTH@ 30
---------INS ClassInstanceCreation@@InjectedValue<BeanManagerImpl>[] @TO@ Assignment@@this.beanManager=beanManager @AT@ 2552 @LENGTH@ 36
------------INS New@@new @TO@ ClassInstanceCreation@@InjectedValue<BeanManagerImpl>[] @AT@ 2552 @LENGTH@ 3
------------INS ParameterizedType@@InjectedValue<BeanManagerImpl> @TO@ ClassInstanceCreation@@InjectedValue<BeanManagerImpl>[] @AT@ 2556 @LENGTH@ 30
---------------INS SimpleType@@InjectedValue @TO@ ParameterizedType@@InjectedValue<BeanManagerImpl> @AT@ 2556 @LENGTH@ 13
---------------INS SimpleType@@BeanManagerImpl @TO@ ParameterizedType@@InjectedValue<BeanManagerImpl> @AT@ 2570 @LENGTH@ 15
---------DEL SimpleName@@beanManager @AT@ 2602 @LENGTH@ 11


UPD FieldDeclaration@@private, static, final, Logger, [LOG=LoggerFactory.getLog(MongoQueryCreator.class)] @TO@ private, static, final, Logger, [LOG=LoggerFactory.getLogger(MongoQueryCreator.class)] @AT@ 1739 @LENGTH@ 80
---UPD VariableDeclarationFragment@@LOG=LoggerFactory.getLog(MongoQueryCreator.class) @TO@ LOG=LoggerFactory.getLogger(MongoQueryCreator.class) @AT@ 1767 @LENGTH@ 51
------UPD MethodInvocation@@LoggerFactory.getLog(MongoQueryCreator.class) @TO@ LoggerFactory.getLogger(MongoQueryCreator.class) @AT@ 1773 @LENGTH@ 45
---------UPD SimpleName@@MethodName:getLog:[MongoQueryCreator.class] @TO@ MethodName:getLogger:[MongoQueryCreator.class] @AT@ 1787 @LENGTH@ 31


UPD EnhancedForStatement@@for (Map.Entry<Set<ServerIdentity>,ModelNode> entry : serverOps.entrySet()) {  ModelNode setNode=serverOpsNode.add();  ModelNode serverNode=setNode.get("servers");  for (  ServerIdentity server : entry.getKey()) {    serverNode.add(server.getServerName(),server.getServerGroupName());  }  setNode.get(OP).set(entry.getValue());} @TO@ for (Map.Entry<Set<ServerIdentity>,ModelNode> entry : serverOps.entrySet()) {  ModelNode setNode=serverOpsNode.add();  ModelNode serverNode=setNode.get("servers");  serverNode.setEmptyList();  for (  ServerIdentity server : entry.getKey()) {    serverNode.add(server.getServerName(),server.getServerGroupName());  }  setNode.get(OP).set(entry.getValue());} @AT@ 19123 @LENGTH@ 409
---INS ExpressionStatement@@MethodInvocation:serverNode.setEmptyList() @TO@ EnhancedForStatement@@for (Map.Entry<Set<ServerIdentity>,ModelNode> entry : serverOps.entrySet()) {  ModelNode setNode=serverOpsNode.add();  ModelNode serverNode=setNode.get("servers");  for (  ServerIdentity server : entry.getKey()) {    serverNode.add(server.getServerName(),server.getServerGroupName());  }  setNode.get(OP).set(entry.getValue());} @AT@ 19326 @LENGTH@ 26
------INS MethodInvocation@@serverNode.setEmptyList() @TO@ ExpressionStatement@@MethodInvocation:serverNode.setEmptyList() @AT@ 19326 @LENGTH@ 25
---------INS SimpleName@@Name:serverNode @TO@ MethodInvocation@@serverNode.setEmptyList() @AT@ 19326 @LENGTH@ 10
---------INS SimpleName@@MethodName:setEmptyList:[] @TO@ MethodInvocation@@serverNode.setEmptyList() @AT@ 19337 @LENGTH@ 14


INS IfStatement@@if (target instanceof CamelContextAware) {  ((CamelContextAware)target).setCamelContext(camelContext);} @TO@ MethodDeclaration@@public, void, MethodName:initChannel, ProcessorDefinition<?> outputDefinition, RouteContext routeContext, Exception,  @AT@ 5622 @LENGTH@ 124
---INS InstanceofExpression@@target instanceof CamelContextAware @TO@ IfStatement@@if (target instanceof CamelContextAware) {  ((CamelContextAware)target).setCamelContext(camelContext);} @AT@ 5626 @LENGTH@ 35
------INS SimpleName@@target @TO@ InstanceofExpression@@target instanceof CamelContextAware @AT@ 5626 @LENGTH@ 6
------INS Instanceof@@instanceof @TO@ InstanceofExpression@@target instanceof CamelContextAware @AT@ 5633 @LENGTH@ 10
------INS SimpleType@@CamelContextAware @TO@ InstanceofExpression@@target instanceof CamelContextAware @AT@ 5644 @LENGTH@ 17
---INS Block@@ThenBody:{  ((CamelContextAware)target).setCamelContext(camelContext);} @TO@ IfStatement@@if (target instanceof CamelContextAware) {  ((CamelContextAware)target).setCamelContext(camelContext);} @AT@ 5663 @LENGTH@ 83
------INS ExpressionStatement@@MethodInvocation:((CamelContextAware)target).setCamelContext(camelContext) @TO@ Block@@ThenBody:{  ((CamelContextAware)target).setCamelContext(camelContext);} @AT@ 5677 @LENGTH@ 59
---------INS MethodInvocation@@((CamelContextAware)target).setCamelContext(camelContext) @TO@ ExpressionStatement@@MethodInvocation:((CamelContextAware)target).setCamelContext(camelContext) @AT@ 5677 @LENGTH@ 58
------------INS ParenthesizedExpression@@((CamelContextAware)target) @TO@ MethodInvocation@@((CamelContextAware)target).setCamelContext(camelContext) @AT@ 5677 @LENGTH@ 28
---------------INS CastExpression@@(CamelContextAware)target @TO@ ParenthesizedExpression@@((CamelContextAware)target) @AT@ 5678 @LENGTH@ 26
------------------INS SimpleType@@CamelContextAware @TO@ CastExpression@@(CamelContextAware)target @AT@ 5679 @LENGTH@ 17
------------------INS SimpleName@@target @TO@ CastExpression@@(CamelContextAware)target @AT@ 5698 @LENGTH@ 6
------------INS SimpleName@@MethodName:setCamelContext:[camelContext] @TO@ MethodInvocation@@((CamelContextAware)target).setCamelContext(camelContext) @AT@ 5706 @LENGTH@ 29
---------------INS SimpleName@@camelContext @TO@ SimpleName@@MethodName:setCamelContext:[camelContext] @AT@ 5722 @LENGTH@ 12


INS IfStatement@@if (concurrentConsumers < 1) {  concurrentConsumers=1;} @TO@ MethodDeclaration@@protected, void, MethodName:validateConfiguration,  @AT@ 8203 @LENGTH@ 62
---INS InfixExpression@@concurrentConsumers < 1 @TO@ IfStatement@@if (concurrentConsumers < 1) {  concurrentConsumers=1;} @AT@ 8207 @LENGTH@ 23
------INS SimpleName@@concurrentConsumers @TO@ InfixExpression@@concurrentConsumers < 1 @AT@ 8207 @LENGTH@ 19
------INS Operator@@< @TO@ InfixExpression@@concurrentConsumers < 1 @AT@ 8226 @LENGTH@ 1
------INS NumberLiteral@@1 @TO@ InfixExpression@@concurrentConsumers < 1 @AT@ 8229 @LENGTH@ 1
---INS Block@@ThenBody:{  concurrentConsumers=1;} @TO@ IfStatement@@if (concurrentConsumers < 1) {  concurrentConsumers=1;} @AT@ 8232 @LENGTH@ 33
------INS ExpressionStatement@@Assignment:concurrentConsumers=1 @TO@ Block@@ThenBody:{  concurrentConsumers=1;} @AT@ 8237 @LENGTH@ 24
---------INS Assignment@@concurrentConsumers=1 @TO@ ExpressionStatement@@Assignment:concurrentConsumers=1 @AT@ 8237 @LENGTH@ 23
------------INS SimpleName@@concurrentConsumers @TO@ Assignment@@concurrentConsumers=1 @AT@ 8237 @LENGTH@ 19
------------INS Operator@@= @TO@ Assignment@@concurrentConsumers=1 @AT@ 8256 @LENGTH@ 1
------------INS NumberLiteral@@1 @TO@ Assignment@@concurrentConsumers=1 @AT@ 8259 @LENGTH@ 1


UPD TypeDeclaration@@[public]EnumConverter, [Converter<Enum<?>>] @TO@ [public]EnumConverter, [Converter<Enum>] @AT@ 283 @LENGTH@ 1033
---UPD ParameterizedType@@Converter<Enum<?>> @TO@ Converter<Enum> @AT@ 321 @LENGTH@ 18
------DEL ParameterizedType@@Enum<?> @AT@ 331 @LENGTH@ 7
---------DEL WildcardType@@? @AT@ 336 @LENGTH@ 1
------MOV SimpleType@@Enum @TO@ ParameterizedType@@Converter<Enum<?>> @AT@ 331 @LENGTH@ 4


INS FieldDeclaration@@public, static, final, int, [STRUCTURE_JDBC_DRIVER=0x0150] @TO@ EnumDeclaration@@[public]Phase,  @AT@ 6460 @LENGTH@ 77
---INS Modifier@@public @TO@ FieldDeclaration@@public, static, final, int, [STRUCTURE_JDBC_DRIVER=0x0150] @AT@ 6460 @LENGTH@ 6
---INS Modifier@@static @TO@ FieldDeclaration@@public, static, final, int, [STRUCTURE_JDBC_DRIVER=0x0150] @AT@ 6467 @LENGTH@ 6
---INS Modifier@@final @TO@ FieldDeclaration@@public, static, final, int, [STRUCTURE_JDBC_DRIVER=0x0150] @AT@ 6474 @LENGTH@ 5
---INS PrimitiveType@@int @TO@ FieldDeclaration@@public, static, final, int, [STRUCTURE_JDBC_DRIVER=0x0150] @AT@ 6480 @LENGTH@ 3
---INS VariableDeclarationFragment@@STRUCTURE_JDBC_DRIVER=0x0150 @TO@ FieldDeclaration@@public, static, final, int, [STRUCTURE_JDBC_DRIVER=0x0150] @AT@ 6484 @LENGTH@ 52
------INS SimpleName@@STRUCTURE_JDBC_DRIVER @TO@ VariableDeclarationFragment@@STRUCTURE_JDBC_DRIVER=0x0150 @AT@ 6484 @LENGTH@ 21
------INS NumberLiteral@@0x0150 @TO@ VariableDeclarationFragment@@STRUCTURE_JDBC_DRIVER=0x0150 @AT@ 6530 @LENGTH@ 6


UPD EnhancedForStatement@@for (ServiceActivator serviceActivator : module.loadService(ServiceActivator.class)) {  serviceActivator.activate(serviceActivatorContext);} @TO@ for (ServiceActivator serviceActivator : module.loadService(ServiceActivator.class)) {  try {    serviceActivator.activate(serviceActivatorContext);  } catch (  ServiceRegistryException e) {    throw new DeploymentUnitProcessingException(e);  }} @AT@ 2474 @LENGTH@ 159
---INS TryStatement@@try {  serviceActivator.activate(serviceActivatorContext);} catch (ServiceRegistryException e) {  throw new DeploymentUnitProcessingException(e);} @TO@ EnhancedForStatement@@for (ServiceActivator serviceActivator : module.loadService(ServiceActivator.class)) {  serviceActivator.activate(serviceActivatorContext);} @AT@ 2693 @LENGTH@ 202
------MOV ExpressionStatement@@MethodInvocation:serviceActivator.activate(serviceActivatorContext) @TO@ TryStatement@@try {  serviceActivator.activate(serviceActivatorContext);} catch (ServiceRegistryException e) {  throw new DeploymentUnitProcessingException(e);} @AT@ 2572 @LENGTH@ 51
------INS CatchClause@@catch (ServiceRegistryException e) {  throw new DeploymentUnitProcessingException(e);} @TO@ TryStatement@@try {  serviceActivator.activate(serviceActivatorContext);} catch (ServiceRegistryException e) {  throw new DeploymentUnitProcessingException(e);} @AT@ 2781 @LENGTH@ 114
---------INS SingleVariableDeclaration@@ServiceRegistryException e @TO@ CatchClause@@catch (ServiceRegistryException e) {  throw new DeploymentUnitProcessingException(e);} @AT@ 2788 @LENGTH@ 26
------------INS SimpleType@@ServiceRegistryException @TO@ SingleVariableDeclaration@@ServiceRegistryException e @AT@ 2788 @LENGTH@ 24
------------INS SimpleName@@e @TO@ SingleVariableDeclaration@@ServiceRegistryException e @AT@ 2813 @LENGTH@ 1
---------INS ThrowStatement@@ClassInstanceCreation:new DeploymentUnitProcessingException(e) @TO@ CatchClause@@catch (ServiceRegistryException e) {  throw new DeploymentUnitProcessingException(e);} @AT@ 2834 @LENGTH@ 47
------------INS ClassInstanceCreation@@DeploymentUnitProcessingException[e] @TO@ ThrowStatement@@ClassInstanceCreation:new DeploymentUnitProcessingException(e) @AT@ 2840 @LENGTH@ 40
---------------INS New@@new @TO@ ClassInstanceCreation@@DeploymentUnitProcessingException[e] @AT@ 2840 @LENGTH@ 3
---------------INS SimpleType@@DeploymentUnitProcessingException @TO@ ClassInstanceCreation@@DeploymentUnitProcessingException[e] @AT@ 2844 @LENGTH@ 33
---------------INS SimpleName@@e @TO@ ClassInstanceCreation@@DeploymentUnitProcessingException[e] @AT@ 2878 @LENGTH@ 1


INS TryStatement@@try {  context.setMethod(method);  return delegate.processInvocation(context);}  finally {  context.setMethod(oldMethod);} @TO@ MethodDeclaration@@public, Object, MethodName:processInvocation, InterceptorContext context, Exception,  @AT@ 2664 @LENGTH@ 192
---MOV ExpressionStatement@@MethodInvocation:context.setMethod(method) @TO@ TryStatement@@try {  context.setMethod(method);  return delegate.processInvocation(context);}  finally {  context.setMethod(oldMethod);} @AT@ 2606 @LENGTH@ 26
---MOV ReturnStatement@@MethodInvocation:delegate.processInvocation(context) @TO@ TryStatement@@try {  context.setMethod(method);  return delegate.processInvocation(context);}  finally {  context.setMethod(oldMethod);} @AT@ 2645 @LENGTH@ 43
---INS Block@@FinallyBody:{  context.setMethod(oldMethod);} @TO@ TryStatement@@try {  context.setMethod(method);  return delegate.processInvocation(context);}  finally {  context.setMethod(oldMethod);} @AT@ 2795 @LENGTH@ 61
------INS ExpressionStatement@@MethodInvocation:context.setMethod(oldMethod) @TO@ Block@@FinallyBody:{  context.setMethod(oldMethod);} @AT@ 2813 @LENGTH@ 29
---------INS MethodInvocation@@context.setMethod(oldMethod) @TO@ ExpressionStatement@@MethodInvocation:context.setMethod(oldMethod) @AT@ 2813 @LENGTH@ 28
------------INS SimpleName@@Name:context @TO@ MethodInvocation@@context.setMethod(oldMethod) @AT@ 2813 @LENGTH@ 7
------------INS SimpleName@@MethodName:setMethod:[oldMethod] @TO@ MethodInvocation@@context.setMethod(oldMethod) @AT@ 2821 @LENGTH@ 20
---------------INS SimpleName@@oldMethod @TO@ SimpleName@@MethodName:setMethod:[oldMethod] @AT@ 2831 @LENGTH@ 9


UPD ExpressionStatement@@MethodInvocation:connector.get(OP).set(ADD_CONNECTOR) @TO@ MethodInvocation:connector.get(OP).set(ADD) @AT@ 10744 @LENGTH@ 37
---UPD MethodInvocation@@connector.get(OP).set(ADD_CONNECTOR) @TO@ connector.get(OP).set(ADD) @AT@ 10744 @LENGTH@ 36
------UPD SimpleName@@MethodName:set:[ADD_CONNECTOR] @TO@ MethodName:set:[ADD] @AT@ 10762 @LENGTH@ 18
---------UPD SimpleName@@ADD_CONNECTOR @TO@ ADD @AT@ 10766 @LENGTH@ 13


UPD EnhancedForStatement@@for (Integer key : sortValues.keySet()) {  List<String> val=sortValues.get(key);  String value=(String)val.get(0);  if (value != null) {    temp.add(value);  } else {    temp.add("");  }} @TO@ for (Entry<Integer,List> entry : sortValues.entrySet()) {  List<String> val=entry.getValue();  String value=(String)val.get(0);  if (value != null) {    temp.add(value);  } else {    temp.add("");  }} @AT@ 9773 @LENGTH@ 502
---UPD SingleVariableDeclaration@@Integer key @TO@ Entry<Integer,List> entry @AT@ 9778 @LENGTH@ 11
------DEL SimpleType@@Integer @AT@ 9778 @LENGTH@ 7
------UPD SimpleName@@key @TO@ entry @AT@ 9786 @LENGTH@ 3
------INS ParameterizedType@@Entry<Integer,List> @TO@ SingleVariableDeclaration@@Integer key @AT@ 9806 @LENGTH@ 20
---------INS SimpleType@@Entry @TO@ ParameterizedType@@Entry<Integer,List> @AT@ 9806 @LENGTH@ 5
---------INS SimpleType@@Integer @TO@ ParameterizedType@@Entry<Integer,List> @AT@ 9812 @LENGTH@ 7
---------INS SimpleType@@List @TO@ ParameterizedType@@Entry<Integer,List> @AT@ 9821 @LENGTH@ 4
---UPD MethodInvocation@@sortValues.keySet() @TO@ sortValues.entrySet() @AT@ 9792 @LENGTH@ 19
------UPD SimpleName@@MethodName:keySet:[] @TO@ MethodName:entrySet:[] @AT@ 9803 @LENGTH@ 8
---UPD VariableDeclarationStatement@@List<String> val=sortValues.get(key); @TO@ List<String> val=entry.getValue(); @AT@ 9870 @LENGTH@ 39
------UPD VariableDeclarationFragment@@val=sortValues.get(key) @TO@ val=entry.getValue() @AT@ 9883 @LENGTH@ 25
---------UPD MethodInvocation@@sortValues.get(key) @TO@ entry.getValue() @AT@ 9889 @LENGTH@ 19
------------UPD SimpleName@@Name:sortValues @TO@ Name:entry @AT@ 9889 @LENGTH@ 10
------------UPD SimpleName@@MethodName:get:[key] @TO@ MethodName:getValue:[] @AT@ 9900 @LENGTH@ 8
---------------DEL SimpleName@@key @AT@ 9904 @LENGTH@ 3


UPD IfStatement@@if (!ObjectUtils.isArray(patterns)) {  for (  byte[] bs : patterns) {    this.patterns.add(bs);  }} @TO@ if (!ObjectUtils.isEmpty(patterns)) {  for (  byte[] bs : patterns) {    this.patterns.add(bs);  }} @AT@ 1673 @LENGTH@ 105
---UPD PrefixExpression@@!ObjectUtils.isArray(patterns) @TO@ !ObjectUtils.isEmpty(patterns) @AT@ 1677 @LENGTH@ 30
------UPD MethodInvocation@@ObjectUtils.isArray(patterns) @TO@ ObjectUtils.isEmpty(patterns) @AT@ 1678 @LENGTH@ 29
---------UPD SimpleName@@MethodName:isArray:[patterns] @TO@ MethodName:isEmpty:[patterns] @AT@ 1690 @LENGTH@ 17


UPD TryStatement@@try {  if (queueExists(queueName,sf)) {    throw new IllegalStateException();  }  ModelNode op=new ModelNode();  op.get("operation").set("add");  op.get("address").add("subsystem","messaging");  op.get("address").add("queue",queueName);  op.get("queue-address").set(queueName);  applyUpdate(op,client);  if (!queueExists(queueName,sf)) {    throw new IllegalStateException();  }  ClientSession session=null;  try {    session=sf.createSession();    ClientProducer producer=session.createProducer(queueName);    ClientMessage message=session.createMessage(false);    final String propName="myprop";    message.putStringProperty(propName,"Hello sent at " + new Date());    producer.send(message);    ClientConsumer messageConsumer=session.createConsumer(queueName);    session.start();    ClientMessage messageReceived=messageConsumer.receive(1000);  }  finally {    if (session != null) {      session.close();    }  }  op=new ModelNode();  op.get("operation").set("remove");  op.get("address").add("subsystem","messaging");  op.get("address").add("queue",queueName);  applyUpdate(op,client);  if (queueExists(queueName,sf)) {    throw new IllegalStateException();  }}  finally {  client.close();} @TO@ try {  if (queueExists(queueName,sf)) {    throw new IllegalStateException();  }  ModelNode op=new ModelNode();  op.get("operation").set("add");  op.get("address").add("subsystem","messaging");  op.get("address").add("queue",queueName);  op.get("queue-address").set(queueName);  applyUpdate(op,client);  if (!queueExists(queueName,sf)) {    throw new IllegalStateException();  }  ClientSession session=null;  try {    session=sf.createSession();    ClientProducer producer=session.createProducer(queueName);    ClientMessage message=session.createMessage(false);    final String propName="myprop";    message.putStringProperty(propName,"Hello sent at " + new Date());    producer.send(message);    ClientConsumer messageConsumer=session.createConsumer(queueName);    session.start();    ClientMessage messageReceived=messageConsumer.receive(1000);  }  finally {    if (session != null) {      session.close();    }  }  op=new ModelNode();  op.get("operation").set("remove");  op.get("address").add("subsystem","messaging");  op.get("address").add("queue",queueName);  applyUpdate(op,client);}  finally {  client.close();} @AT@ 3051 @LENGTH@ 1884
---DEL IfStatement@@if (queueExists(queueName,sf)) {  throw new IllegalStateException();} @AT@ 4780 @LENGTH@ 97
------DEL MethodInvocation@@queueExists(queueName,sf) @AT@ 4783 @LENGTH@ 26
---------DEL SimpleName@@MethodName:queueExists:[queueName, sf] @AT@ 4783 @LENGTH@ 26
------------DEL SimpleName@@queueName @AT@ 4795 @LENGTH@ 9
------------DEL SimpleName@@sf @AT@ 4806 @LENGTH@ 2
------DEL Block@@ThenBody:{  throw new IllegalStateException();} @AT@ 4811 @LENGTH@ 66
---------DEL ThrowStatement@@ClassInstanceCreation:new IllegalStateException() @AT@ 4829 @LENGTH@ 34
------------DEL ClassInstanceCreation@@IllegalStateException[] @AT@ 4835 @LENGTH@ 27
---------------DEL New@@new @AT@ 4835 @LENGTH@ 3
---------------DEL SimpleType@@IllegalStateException @AT@ 4839 @LENGTH@ 21


DEL IfStatement@@if (dbDoc.keySet().isEmpty()) {  return null;} @AT@ 25529 @LENGTH@ 51
---DEL MethodInvocation@@dbDoc.keySet().isEmpty() @AT@ 25533 @LENGTH@ 24
------DEL MethodInvocation@@MethodName:keySet:[] @AT@ 25533 @LENGTH@ 14
------DEL SimpleName@@Name:dbDoc @AT@ 25533 @LENGTH@ 5
------DEL SimpleName@@MethodName:isEmpty:[] @AT@ 25548 @LENGTH@ 9
---DEL Block@@ThenBody:{  return null;} @AT@ 25559 @LENGTH@ 21
------DEL ReturnStatement@@NullLiteral:null @AT@ 25564 @LENGTH@ 12
---------DEL NullLiteral@@null @AT@ 25571 @LENGTH@ 4


UPD IfStatement@@if (!isClustered()) {  trigger=getScheduler().getTrigger(name,group);  if (trigger != null) {    String msg="A Quartz job already exists with the name/group: " + name + "/"+ group;    throw new IllegalArgumentException(msg);  }} @TO@ if (!isClustered() && !stateful) {  trigger=getScheduler().getTrigger(name,group);  if (trigger != null) {    String msg="A Quartz job already exists with the name/group: " + name + "/"+ group;    throw new IllegalArgumentException(msg);  }} @AT@ 4230 @LENGTH@ 361
---DEL PrefixExpression@@!isClustered() @AT@ 4234 @LENGTH@ 14
---INS InfixExpression@@!isClustered() && !stateful @TO@ IfStatement@@if (!isClustered()) {  trigger=getScheduler().getTrigger(name,group);  if (trigger != null) {    String msg="A Quartz job already exists with the name/group: " + name + "/"+ group;    throw new IllegalArgumentException(msg);  }} @AT@ 4320 @LENGTH@ 27
------INS PrefixExpression@@!isClustered() @TO@ InfixExpression@@!isClustered() && !stateful @AT@ 4320 @LENGTH@ 14
---------MOV Operator@@! @TO@ PrefixExpression@@!isClustered() @AT@ 4234 @LENGTH@ 1
---------MOV MethodInvocation@@MethodName:isClustered:[] @TO@ PrefixExpression@@!isClustered() @AT@ 4235 @LENGTH@ 13
------INS Operator@@&& @TO@ InfixExpression@@!isClustered() && !stateful @AT@ 4334 @LENGTH@ 2
------INS PrefixExpression@@!stateful @TO@ InfixExpression@@!isClustered() && !stateful @AT@ 4338 @LENGTH@ 9
---------INS Operator@@! @TO@ PrefixExpression@@!stateful @AT@ 4338 @LENGTH@ 1
---------INS SimpleName@@stateful @TO@ PrefixExpression@@!stateful @AT@ 4339 @LENGTH@ 8


DEL VariableDeclarationStatement@@final HazelcastSedaEndpoint hzlqEndpoint=(HazelcastSedaEndpoint)hzlqComponent.createEndpoint("hazelcast:seda: ?concurrentConsumers=4"); @AT@ 3228 @LENGTH@ 138
---DEL Modifier@@final @AT@ 3228 @LENGTH@ 5
---DEL SimpleType@@HazelcastSedaEndpoint @AT@ 3234 @LENGTH@ 21
---DEL VariableDeclarationFragment@@hzlqEndpoint=(HazelcastSedaEndpoint)hzlqComponent.createEndpoint("hazelcast:seda: ?concurrentConsumers=4") @AT@ 3256 @LENGTH@ 109
------DEL SimpleName@@hzlqEndpoint @AT@ 3256 @LENGTH@ 12
------DEL CastExpression@@(HazelcastSedaEndpoint)hzlqComponent.createEndpoint("hazelcast:seda: ?concurrentConsumers=4") @AT@ 3271 @LENGTH@ 94
---------DEL SimpleType@@HazelcastSedaEndpoint @AT@ 3272 @LENGTH@ 21


UPD VariableDeclarationStatement@@String path=WebUtils.extractFullFilenameFromUrlPath(request.getPathInfo()); @TO@ String path=pathInfo == null ? "" : WebUtils.extractFullFilenameFromUrlPath(pathInfo); @AT@ 3419 @LENGTH@ 77
---UPD VariableDeclarationFragment@@path=WebUtils.extractFullFilenameFromUrlPath(request.getPathInfo()) @TO@ path=pathInfo == null ? "" : WebUtils.extractFullFilenameFromUrlPath(pathInfo) @AT@ 3426 @LENGTH@ 69
------DEL MethodInvocation@@WebUtils.extractFullFilenameFromUrlPath(request.getPathInfo()) @AT@ 3433 @LENGTH@ 62
------INS ConditionalExpression@@pathInfo == null ? "" : WebUtils.extractFullFilenameFromUrlPath(pathInfo) @TO@ VariableDeclarationFragment@@path=WebUtils.extractFullFilenameFromUrlPath(request.getPathInfo()) @AT@ 3476 @LENGTH@ 71
---------INS InfixExpression@@pathInfo == null @TO@ ConditionalExpression@@pathInfo == null ? "" : WebUtils.extractFullFilenameFromUrlPath(pathInfo) @AT@ 3476 @LENGTH@ 14
------------INS SimpleName@@pathInfo @TO@ InfixExpression@@pathInfo == null @AT@ 3476 @LENGTH@ 8
------------INS Operator@@== @TO@ InfixExpression@@pathInfo == null @AT@ 3484 @LENGTH@ 2
------------INS NullLiteral@@null @TO@ InfixExpression@@pathInfo == null @AT@ 3486 @LENGTH@ 4
---------INS StringLiteral@@"" @TO@ ConditionalExpression@@pathInfo == null ? "" : WebUtils.extractFullFilenameFromUrlPath(pathInfo) @AT@ 3493 @LENGTH@ 2
---------INS MethodInvocation@@WebUtils.extractFullFilenameFromUrlPath(pathInfo) @TO@ ConditionalExpression@@pathInfo == null ? "" : WebUtils.extractFullFilenameFromUrlPath(pathInfo) @AT@ 3498 @LENGTH@ 49
------------MOV SimpleName@@Name:WebUtils @TO@ MethodInvocation@@WebUtils.extractFullFilenameFromUrlPath(pathInfo) @AT@ 3433 @LENGTH@ 8
------------MOV SimpleName@@MethodName:extractFullFilenameFromUrlPath:[request.getPathInfo()] @TO@ MethodInvocation@@WebUtils.extractFullFilenameFromUrlPath(pathInfo) @AT@ 3442 @LENGTH@ 53
---------------DEL MethodInvocation@@request.getPathInfo() @AT@ 3473 @LENGTH@ 21
------------------DEL SimpleName@@Name:request @AT@ 3473 @LENGTH@ 7
------------------DEL SimpleName@@MethodName:getPathInfo:[] @AT@ 3481 @LENGTH@ 13
---------------INS SimpleName@@pathInfo @TO@ SimpleName@@MethodName:extractFullFilenameFromUrlPath:[request.getPathInfo()] @AT@ 3538 @LENGTH@ 8


UPD IfStatement@@if (!ObjectUtils.isArray(channels)) {  for (  byte[] bs : channels) {    this.channels.add(bs);  }} @TO@ if (!ObjectUtils.isEmpty(channels)) {  for (  byte[] bs : channels) {    this.channels.add(bs);  }} @AT@ 1564 @LENGTH@ 105
---UPD PrefixExpression@@!ObjectUtils.isArray(channels) @TO@ !ObjectUtils.isEmpty(channels) @AT@ 1568 @LENGTH@ 30
------UPD MethodInvocation@@ObjectUtils.isArray(channels) @TO@ ObjectUtils.isEmpty(channels) @AT@ 1569 @LENGTH@ 29
---------UPD SimpleName@@MethodName:isArray:[channels] @TO@ MethodName:isEmpty:[channels] @AT@ 1581 @LENGTH@ 17


UPD EnhancedForStatement@@for (ModelNode deployment : modelNode.asList()) {  String uniqueName=deployment.get(NAME).asString();  String runtimeName=deployment.get(RUNTIME_NAME).asString();  String sha1=HashUtil.bytesToHexString(deployment.get(HASH).asBytes());  boolean start=deployment.get(START).asBoolean();  writer.writeStartElement(Element.DEPLOYMENT.getLocalName());  writeAttribute(writer,Attribute.NAME,uniqueName);  writeAttribute(writer,Attribute.RUNTIME_NAME,runtimeName);  writeAttribute(writer,Attribute.SHA1,sha1);  if (!start) {    writeAttribute(writer,Attribute.START,"false");  }  writer.writeEndElement();} @TO@ for (String uniqueName : deploymentNames) {  ModelNode deployment=modelNode.get(uniqueName);  String runtimeName=deployment.get(RUNTIME_NAME).asString();  String sha1=HashUtil.bytesToHexString(deployment.get(HASH).asBytes());  boolean start=deployment.get(START).asBoolean();  writer.writeStartElement(Element.DEPLOYMENT.getLocalName());  writeAttribute(writer,Attribute.NAME,uniqueName);  writeAttribute(writer,Attribute.RUNTIME_NAME,runtimeName);  writeAttribute(writer,Attribute.SHA1,sha1);  if (!start) {    writeAttribute(writer,Attribute.START,"false");  }  writer.writeEndElement();} @AT@ 21556 @LENGTH@ 759
---UPD SingleVariableDeclaration@@ModelNode deployment @TO@ String uniqueName @AT@ 21561 @LENGTH@ 20
------UPD SimpleType@@ModelNode @TO@ String @AT@ 21561 @LENGTH@ 9
------UPD SimpleName@@deployment @TO@ uniqueName @AT@ 21571 @LENGTH@ 10
---DEL MethodInvocation@@modelNode.asList() @AT@ 21584 @LENGTH@ 18
------DEL SimpleName@@Name:modelNode @AT@ 21584 @LENGTH@ 9
------DEL SimpleName@@MethodName:asList:[] @AT@ 21594 @LENGTH@ 8
---UPD VariableDeclarationStatement@@String uniqueName=deployment.get(NAME).asString(); @TO@ ModelNode deployment=modelNode.get(uniqueName); @AT@ 21618 @LENGTH@ 52
------UPD SimpleType@@String @TO@ ModelNode @AT@ 21618 @LENGTH@ 6
------UPD VariableDeclarationFragment@@uniqueName=deployment.get(NAME).asString() @TO@ deployment=modelNode.get(uniqueName) @AT@ 21625 @LENGTH@ 44
---------UPD SimpleName@@uniqueName @TO@ deployment @AT@ 21625 @LENGTH@ 10
---------UPD MethodInvocation@@deployment.get(NAME).asString() @TO@ modelNode.get(uniqueName) @AT@ 21638 @LENGTH@ 31
------------DEL MethodInvocation@@MethodName:get:[NAME] @AT@ 21638 @LENGTH@ 20
---------------DEL SimpleName@@NAME @AT@ 21653 @LENGTH@ 4
------------UPD SimpleName@@Name:deployment @TO@ Name:modelNode @AT@ 21638 @LENGTH@ 10
------------UPD SimpleName@@MethodName:asString:[] @TO@ MethodName:get:[uniqueName] @AT@ 21659 @LENGTH@ 10
---------------INS SimpleName@@uniqueName @TO@ SimpleName@@MethodName:asString:[] @AT@ 21705 @LENGTH@ 10
---INS SimpleName@@deploymentNames @TO@ EnhancedForStatement@@for (ModelNode deployment : modelNode.asList()) {  String uniqueName=deployment.get(NAME).asString();  String runtimeName=deployment.get(RUNTIME_NAME).asString();  String sha1=HashUtil.bytesToHexString(deployment.get(HASH).asBytes());  boolean start=deployment.get(START).asBoolean();  writer.writeStartElement(Element.DEPLOYMENT.getLocalName());  writeAttribute(writer,Attribute.NAME,uniqueName);  writeAttribute(writer,Attribute.RUNTIME_NAME,runtimeName);  writeAttribute(writer,Attribute.SHA1,sha1);  if (!start) {    writeAttribute(writer,Attribute.START,"false");  }  writer.writeEndElement();} @AT@ 21637 @LENGTH@ 15


UPD ExpressionStatement@@MethodInvocation:query.setParameter(parameter.getIndex() + 1,value) @TO@ MethodInvocation:query.setParameter(queryParameterPosition++,value) @AT@ 3319 @LENGTH@ 52
---UPD MethodInvocation@@query.setParameter(parameter.getIndex() + 1,value) @TO@ query.setParameter(queryParameterPosition++,value) @AT@ 3319 @LENGTH@ 51
------UPD SimpleName@@MethodName:setParameter:[parameter.getIndex() + 1, value] @TO@ MethodName:setParameter:[queryParameterPosition++, value] @AT@ 3325 @LENGTH@ 45
---------DEL InfixExpression@@parameter.getIndex() + 1 @AT@ 3338 @LENGTH@ 24
------------DEL MethodInvocation@@parameter.getIndex() @AT@ 3338 @LENGTH@ 20
---------------DEL SimpleName@@Name:parameter @AT@ 3338 @LENGTH@ 9
---------------DEL SimpleName@@MethodName:getIndex:[] @AT@ 3348 @LENGTH@ 10
------------DEL Operator@@+ @AT@ 3358 @LENGTH@ 1
------------DEL NumberLiteral@@1 @AT@ 3361 @LENGTH@ 1
---------INS PostfixExpression@@queryParameterPosition++ @TO@ SimpleName@@MethodName:setParameter:[parameter.getIndex() + 1, value] @AT@ 3378 @LENGTH@ 24
------------INS SimpleName@@queryParameterPosition @TO@ PostfixExpression@@queryParameterPosition++ @AT@ 3378 @LENGTH@ 22
------------INS Operator@@++ @TO@ PostfixExpression@@queryParameterPosition++ @AT@ 3401 @LENGTH@ 2


UPD Block@@ThenBody:{  for (  Map.Entry<String,String> param : sd.getSerdeInfo().getParameters().entrySet()) {    schema.put(param.getKey(),(param.getValue() != null) ? param.getValue() : "");  }  if (sd.getSerdeInfo().getSerializationLib() != null) {    schema.setProperty(org.apache.hadoop.hive.serde.Constants.SERIALIZATION_LIB,sd.getSerdeInfo().getSerializationLib());  }} @TO@ ThenBody:{  String cols=org.apache.hadoop.hive.metastore.api.Constants.META_TABLE_COLUMNS;  String colTypes=org.apache.hadoop.hive.metastore.api.Constants.META_TABLE_COLUMN_TYPES;  String parts=org.apache.hadoop.hive.metastore.api.Constants.META_TABLE_PARTITION_COLUMNS;  for (  Map.Entry<String,String> param : sd.getSerdeInfo().getParameters().entrySet()) {    String key=param.getKey();    if (schema.get(key) != null && (key.equals(cols) || key.equals(colTypes) || key.equals(parts))) {      continue;    }    schema.put(key,(param.getValue() != null) ? param.getValue() : "");  }  if (sd.getSerdeInfo().getSerializationLib() != null) {    schema.setProperty(org.apache.hadoop.hive.serde.Constants.SERIALIZATION_LIB,sd.getSerdeInfo().getSerializationLib());  }} @AT@ 18397 @LENGTH@ 404
---UPD EnhancedForStatement@@for (Map.Entry<String,String> param : sd.getSerdeInfo().getParameters().entrySet()) {  schema.put(param.getKey(),(param.getValue() != null) ? param.getValue() : "");} @TO@ for (Map.Entry<String,String> param : sd.getSerdeInfo().getParameters().entrySet()) {  String key=param.getKey();  if (schema.get(key) != null && (key.equals(cols) || key.equals(colTypes) || key.equals(parts))) {    continue;  }  schema.put(key,(param.getValue() != null) ? param.getValue() : "");} @AT@ 18405 @LENGTH@ 181
------UPD ExpressionStatement@@MethodInvocation:schema.put(param.getKey(),(param.getValue() != null) ? param.getValue() : "") @TO@ MethodInvocation:schema.put(key,(param.getValue() != null) ? param.getValue() : "") @AT@ 18499 @LENGTH@ 79
---------UPD MethodInvocation@@schema.put(param.getKey(),(param.getValue() != null) ? param.getValue() : "") @TO@ schema.put(key,(param.getValue() != null) ? param.getValue() : "") @AT@ 18499 @LENGTH@ 78
------------UPD SimpleName@@MethodName:put:[param.getKey(), (param.getValue() != null) ? param.getValue() : ""] @TO@ MethodName:put:[key, (param.getValue() != null) ? param.getValue() : ""] @AT@ 18506 @LENGTH@ 71
---------------DEL MethodInvocation@@param.getKey() @AT@ 18510 @LENGTH@ 14
------------------DEL SimpleName@@Name:param @AT@ 18510 @LENGTH@ 5
------------------DEL SimpleName@@MethodName:getKey:[] @AT@ 18516 @LENGTH@ 8
---------------INS SimpleName@@key @TO@ SimpleName@@MethodName:put:[param.getKey(), (param.getValue() != null) ? param.getValue() : ""] @AT@ 20089 @LENGTH@ 3
------INS VariableDeclarationStatement@@String key=param.getKey(); @TO@ EnhancedForStatement@@for (Map.Entry<String,String> param : sd.getSerdeInfo().getParameters().entrySet()) {  schema.put(param.getKey(),(param.getValue() != null) ? param.getValue() : "");} @AT@ 19893 @LENGTH@ 28
---------INS SimpleType@@String @TO@ VariableDeclarationStatement@@String key=param.getKey(); @AT@ 19893 @LENGTH@ 6
---------INS VariableDeclarationFragment@@key=param.getKey() @TO@ VariableDeclarationStatement@@String key=param.getKey(); @AT@ 19900 @LENGTH@ 20
------------INS SimpleName@@key @TO@ VariableDeclarationFragment@@key=param.getKey() @AT@ 19900 @LENGTH@ 3
------------INS MethodInvocation@@param.getKey() @TO@ VariableDeclarationFragment@@key=param.getKey() @AT@ 19906 @LENGTH@ 14
---------------INS SimpleName@@Name:param @TO@ MethodInvocation@@param.getKey() @AT@ 19906 @LENGTH@ 5
---------------INS SimpleName@@MethodName:getKey:[] @TO@ MethodInvocation@@param.getKey() @AT@ 19912 @LENGTH@ 8
------INS IfStatement@@if (schema.get(key) != null && (key.equals(cols) || key.equals(colTypes) || key.equals(parts))) {  continue;} @TO@ EnhancedForStatement@@for (Map.Entry<String,String> param : sd.getSerdeInfo().getParameters().entrySet()) {  schema.put(param.getKey(),(param.getValue() != null) ? param.getValue() : "");} @AT@ 19930 @LENGTH@ 139
---------INS InfixExpression@@schema.get(key) != null && (key.equals(cols) || key.equals(colTypes) || key.equals(parts)) @TO@ IfStatement@@if (schema.get(key) != null && (key.equals(cols) || key.equals(colTypes) || key.equals(parts))) {  continue;} @AT@ 19934 @LENGTH@ 102
------------INS InfixExpression@@schema.get(key) != null @TO@ InfixExpression@@schema.get(key) != null && (key.equals(cols) || key.equals(colTypes) || key.equals(parts)) @AT@ 19934 @LENGTH@ 23
---------------INS MethodInvocation@@schema.get(key) @TO@ InfixExpression@@schema.get(key) != null @AT@ 19934 @LENGTH@ 15
------------------INS SimpleName@@Name:schema @TO@ MethodInvocation@@schema.get(key) @AT@ 19934 @LENGTH@ 6
------------------INS SimpleName@@MethodName:get:[key] @TO@ MethodInvocation@@schema.get(key) @AT@ 19941 @LENGTH@ 8
---------------------INS SimpleName@@key @TO@ SimpleName@@MethodName:get:[key] @AT@ 19945 @LENGTH@ 3
---------------INS Operator@@!= @TO@ InfixExpression@@schema.get(key) != null @AT@ 19949 @LENGTH@ 2
---------------INS NullLiteral@@null @TO@ InfixExpression@@schema.get(key) != null @AT@ 19953 @LENGTH@ 4
------------INS Operator@@&& @TO@ InfixExpression@@schema.get(key) != null && (key.equals(cols) || key.equals(colTypes) || key.equals(parts)) @AT@ 19957 @LENGTH@ 2
------------INS ParenthesizedExpression@@(key.equals(cols) || key.equals(colTypes) || key.equals(parts)) @TO@ InfixExpression@@schema.get(key) != null && (key.equals(cols) || key.equals(colTypes) || key.equals(parts)) @AT@ 19973 @LENGTH@ 63
---------------INS InfixExpression@@key.equals(cols) || key.equals(colTypes) || key.equals(parts) @TO@ ParenthesizedExpression@@(key.equals(cols) || key.equals(colTypes) || key.equals(parts)) @AT@ 19974 @LENGTH@ 61
------------------INS MethodInvocation@@key.equals(cols) @TO@ InfixExpression@@key.equals(cols) || key.equals(colTypes) || key.equals(parts) @AT@ 19974 @LENGTH@ 16
---------------------INS SimpleName@@Name:key @TO@ MethodInvocation@@key.equals(cols) @AT@ 19974 @LENGTH@ 3
---------------------INS SimpleName@@MethodName:equals:[cols] @TO@ MethodInvocation@@key.equals(cols) @AT@ 19978 @LENGTH@ 12
------------------------INS SimpleName@@cols @TO@ SimpleName@@MethodName:equals:[cols] @AT@ 19985 @LENGTH@ 4
------------------INS Operator@@|| @TO@ InfixExpression@@key.equals(cols) || key.equals(colTypes) || key.equals(parts) @AT@ 19990 @LENGTH@ 2
------------------INS MethodInvocation@@key.equals(colTypes) @TO@ InfixExpression@@key.equals(cols) || key.equals(colTypes) || key.equals(parts) @AT@ 19994 @LENGTH@ 20
---------------------INS SimpleName@@Name:key @TO@ MethodInvocation@@key.equals(colTypes) @AT@ 19994 @LENGTH@ 3
---------------------INS SimpleName@@MethodName:equals:[colTypes] @TO@ MethodInvocation@@key.equals(colTypes) @AT@ 19998 @LENGTH@ 16
------------------------INS SimpleName@@colTypes @TO@ SimpleName@@MethodName:equals:[colTypes] @AT@ 20005 @LENGTH@ 8
------------------INS MethodInvocation@@key.equals(parts) @TO@ InfixExpression@@key.equals(cols) || key.equals(colTypes) || key.equals(parts) @AT@ 20018 @LENGTH@ 17
---------------------INS SimpleName@@Name:key @TO@ MethodInvocation@@key.equals(parts) @AT@ 20018 @LENGTH@ 3
---------------------INS SimpleName@@MethodName:equals:[parts] @TO@ MethodInvocation@@key.equals(parts) @AT@ 20022 @LENGTH@ 13
------------------------INS SimpleName@@parts @TO@ SimpleName@@MethodName:equals:[parts] @AT@ 20029 @LENGTH@ 5
---------INS Block@@ThenBody:{  continue;} @TO@ IfStatement@@if (schema.get(key) != null && (key.equals(cols) || key.equals(colTypes) || key.equals(parts))) {  continue;} @AT@ 20038 @LENGTH@ 31
------------INS ContinueStatement@@ @TO@ Block@@ThenBody:{  continue;} @AT@ 20050 @LENGTH@ 9
---INS VariableDeclarationStatement@@String cols=org.apache.hadoop.hive.metastore.api.Constants.META_TABLE_COLUMNS; @TO@ Block@@ThenBody:{  for (  Map.Entry<String,String> param : sd.getSerdeInfo().getParameters().entrySet()) {    schema.put(param.getKey(),(param.getValue() != null) ? param.getValue() : "");  }  if (sd.getSerdeInfo().getSerializationLib() != null) {    schema.setProperty(org.apache.hadoop.hive.serde.Constants.SERIALIZATION_LIB,sd.getSerdeInfo().getSerializationLib());  }} @AT@ 19517 @LENGTH@ 80
------INS SimpleType@@String @TO@ VariableDeclarationStatement@@String cols=org.apache.hadoop.hive.metastore.api.Constants.META_TABLE_COLUMNS; @AT@ 19517 @LENGTH@ 6
------INS VariableDeclarationFragment@@cols=org.apache.hadoop.hive.metastore.api.Constants.META_TABLE_COLUMNS @TO@ VariableDeclarationStatement@@String cols=org.apache.hadoop.hive.metastore.api.Constants.META_TABLE_COLUMNS; @AT@ 19524 @LENGTH@ 72
---------INS SimpleName@@cols @TO@ VariableDeclarationFragment@@cols=org.apache.hadoop.hive.metastore.api.Constants.META_TABLE_COLUMNS @AT@ 19524 @LENGTH@ 4
---------INS QualifiedName@@org.apache.hadoop.hive.metastore.api.Constants.META_TABLE_COLUMNS @TO@ VariableDeclarationFragment@@cols=org.apache.hadoop.hive.metastore.api.Constants.META_TABLE_COLUMNS @AT@ 19531 @LENGTH@ 65
------------INS QualifiedName@@org.apache.hadoop.hive.metastore.api.Constants @TO@ QualifiedName@@org.apache.hadoop.hive.metastore.api.Constants.META_TABLE_COLUMNS @AT@ 19531 @LENGTH@ 46
---------------INS QualifiedName@@org.apache.hadoop.hive.metastore.api @TO@ QualifiedName@@org.apache.hadoop.hive.metastore.api.Constants @AT@ 19531 @LENGTH@ 36
------------------INS QualifiedName@@org.apache.hadoop.hive.metastore @TO@ QualifiedName@@org.apache.hadoop.hive.metastore.api @AT@ 19531 @LENGTH@ 32
---------------------INS QualifiedName@@org.apache.hadoop.hive @TO@ QualifiedName@@org.apache.hadoop.hive.metastore @AT@ 19531 @LENGTH@ 22
------------------------INS QualifiedName@@org.apache.hadoop @TO@ QualifiedName@@org.apache.hadoop.hive @AT@ 19531 @LENGTH@ 17
---------------------------INS QualifiedName@@org.apache @TO@ QualifiedName@@org.apache.hadoop @AT@ 19531 @LENGTH@ 10
------------------------------INS SimpleName@@org @TO@ QualifiedName@@org.apache @AT@ 19531 @LENGTH@ 3
------------------------------INS SimpleName@@apache @TO@ QualifiedName@@org.apache @AT@ 19535 @LENGTH@ 6
---------------------------INS SimpleName@@hadoop @TO@ QualifiedName@@org.apache.hadoop @AT@ 19542 @LENGTH@ 6
------------------------INS SimpleName@@hive @TO@ QualifiedName@@org.apache.hadoop.hive @AT@ 19549 @LENGTH@ 4
---------------------INS SimpleName@@metastore @TO@ QualifiedName@@org.apache.hadoop.hive.metastore @AT@ 19554 @LENGTH@ 9
------------------INS SimpleName@@api @TO@ QualifiedName@@org.apache.hadoop.hive.metastore.api @AT@ 19564 @LENGTH@ 3
---------------INS SimpleName@@Constants @TO@ QualifiedName@@org.apache.hadoop.hive.metastore.api.Constants @AT@ 19568 @LENGTH@ 9
------------INS SimpleName@@META_TABLE_COLUMNS @TO@ QualifiedName@@org.apache.hadoop.hive.metastore.api.Constants.META_TABLE_COLUMNS @AT@ 19578 @LENGTH@ 18
---INS VariableDeclarationStatement@@String colTypes=org.apache.hadoop.hive.metastore.api.Constants.META_TABLE_COLUMN_TYPES; @TO@ Block@@ThenBody:{  for (  Map.Entry<String,String> param : sd.getSerdeInfo().getParameters().entrySet()) {    schema.put(param.getKey(),(param.getValue() != null) ? param.getValue() : "");  }  if (sd.getSerdeInfo().getSerializationLib() != null) {    schema.setProperty(org.apache.hadoop.hive.serde.Constants.SERIALIZATION_LIB,sd.getSerdeInfo().getSerializationLib());  }} @AT@ 19604 @LENGTH@ 89
------INS SimpleType@@String @TO@ VariableDeclarationStatement@@String colTypes=org.apache.hadoop.hive.metastore.api.Constants.META_TABLE_COLUMN_TYPES; @AT@ 19604 @LENGTH@ 6
------INS VariableDeclarationFragment@@colTypes=org.apache.hadoop.hive.metastore.api.Constants.META_TABLE_COLUMN_TYPES @TO@ VariableDeclarationStatement@@String colTypes=org.apache.hadoop.hive.metastore.api.Constants.META_TABLE_COLUMN_TYPES; @AT@ 19611 @LENGTH@ 81
---------INS SimpleName@@colTypes @TO@ VariableDeclarationFragment@@colTypes=org.apache.hadoop.hive.metastore.api.Constants.META_TABLE_COLUMN_TYPES @AT@ 19611 @LENGTH@ 8
---------INS QualifiedName@@org.apache.hadoop.hive.metastore.api.Constants.META_TABLE_COLUMN_TYPES @TO@ VariableDeclarationFragment@@colTypes=org.apache.hadoop.hive.metastore.api.Constants.META_TABLE_COLUMN_TYPES @AT@ 19622 @LENGTH@ 70
------------INS QualifiedName@@org.apache.hadoop.hive.metastore.api.Constants @TO@ QualifiedName@@org.apache.hadoop.hive.metastore.api.Constants.META_TABLE_COLUMN_TYPES @AT@ 19622 @LENGTH@ 46
---------------INS QualifiedName@@org.apache.hadoop.hive.metastore.api @TO@ QualifiedName@@org.apache.hadoop.hive.metastore.api.Constants @AT@ 19622 @LENGTH@ 36
------------------INS QualifiedName@@org.apache.hadoop.hive.metastore @TO@ QualifiedName@@org.apache.hadoop.hive.metastore.api @AT@ 19622 @LENGTH@ 32
---------------------INS QualifiedName@@org.apache.hadoop.hive @TO@ QualifiedName@@org.apache.hadoop.hive.metastore @AT@ 19622 @LENGTH@ 22
------------------------INS QualifiedName@@org.apache.hadoop @TO@ QualifiedName@@org.apache.hadoop.hive @AT@ 19622 @LENGTH@ 17
---------------------------INS QualifiedName@@org.apache @TO@ QualifiedName@@org.apache.hadoop @AT@ 19622 @LENGTH@ 10
------------------------------INS SimpleName@@org @TO@ QualifiedName@@org.apache @AT@ 19622 @LENGTH@ 3
------------------------------INS SimpleName@@apache @TO@ QualifiedName@@org.apache @AT@ 19626 @LENGTH@ 6
---------------------------INS SimpleName@@hadoop @TO@ QualifiedName@@org.apache.hadoop @AT@ 19633 @LENGTH@ 6
------------------------INS SimpleName@@hive @TO@ QualifiedName@@org.apache.hadoop.hive @AT@ 19640 @LENGTH@ 4
---------------------INS SimpleName@@metastore @TO@ QualifiedName@@org.apache.hadoop.hive.metastore @AT@ 19645 @LENGTH@ 9
------------------INS SimpleName@@api @TO@ QualifiedName@@org.apache.hadoop.hive.metastore.api @AT@ 19655 @LENGTH@ 3
---------------INS SimpleName@@Constants @TO@ QualifiedName@@org.apache.hadoop.hive.metastore.api.Constants @AT@ 19659 @LENGTH@ 9
------------INS SimpleName@@META_TABLE_COLUMN_TYPES @TO@ QualifiedName@@org.apache.hadoop.hive.metastore.api.Constants.META_TABLE_COLUMN_TYPES @AT@ 19669 @LENGTH@ 23
---INS VariableDeclarationStatement@@String parts=org.apache.hadoop.hive.metastore.api.Constants.META_TABLE_PARTITION_COLUMNS; @TO@ Block@@ThenBody:{  for (  Map.Entry<String,String> param : sd.getSerdeInfo().getParameters().entrySet()) {    schema.put(param.getKey(),(param.getValue() != null) ? param.getValue() : "");  }  if (sd.getSerdeInfo().getSerializationLib() != null) {    schema.setProperty(org.apache.hadoop.hive.serde.Constants.SERIALIZATION_LIB,sd.getSerdeInfo().getSerializationLib());  }} @AT@ 19700 @LENGTH@ 91
------INS SimpleType@@String @TO@ VariableDeclarationStatement@@String parts=org.apache.hadoop.hive.metastore.api.Constants.META_TABLE_PARTITION_COLUMNS; @AT@ 19700 @LENGTH@ 6
------INS VariableDeclarationFragment@@parts=org.apache.hadoop.hive.metastore.api.Constants.META_TABLE_PARTITION_COLUMNS @TO@ VariableDeclarationStatement@@String parts=org.apache.hadoop.hive.metastore.api.Constants.META_TABLE_PARTITION_COLUMNS; @AT@ 19707 @LENGTH@ 83
---------INS SimpleName@@parts @TO@ VariableDeclarationFragment@@parts=org.apache.hadoop.hive.metastore.api.Constants.META_TABLE_PARTITION_COLUMNS @AT@ 19707 @LENGTH@ 5
---------INS QualifiedName@@org.apache.hadoop.hive.metastore.api.Constants.META_TABLE_PARTITION_COLUMNS @TO@ VariableDeclarationFragment@@parts=org.apache.hadoop.hive.metastore.api.Constants.META_TABLE_PARTITION_COLUMNS @AT@ 19715 @LENGTH@ 75
------------INS QualifiedName@@org.apache.hadoop.hive.metastore.api.Constants @TO@ QualifiedName@@org.apache.hadoop.hive.metastore.api.Constants.META_TABLE_PARTITION_COLUMNS @AT@ 19715 @LENGTH@ 46
---------------INS QualifiedName@@org.apache.hadoop.hive.metastore.api @TO@ QualifiedName@@org.apache.hadoop.hive.metastore.api.Constants @AT@ 19715 @LENGTH@ 36
------------------INS QualifiedName@@org.apache.hadoop.hive.metastore @TO@ QualifiedName@@org.apache.hadoop.hive.metastore.api @AT@ 19715 @LENGTH@ 32
---------------------INS QualifiedName@@org.apache.hadoop.hive @TO@ QualifiedName@@org.apache.hadoop.hive.metastore @AT@ 19715 @LENGTH@ 22
------------------------INS QualifiedName@@org.apache.hadoop @TO@ QualifiedName@@org.apache.hadoop.hive @AT@ 19715 @LENGTH@ 17
---------------------------INS QualifiedName@@org.apache @TO@ QualifiedName@@org.apache.hadoop @AT@ 19715 @LENGTH@ 10
------------------------------INS SimpleName@@org @TO@ QualifiedName@@org.apache @AT@ 19715 @LENGTH@ 3
------------------------------INS SimpleName@@apache @TO@ QualifiedName@@org.apache @AT@ 19719 @LENGTH@ 6
---------------------------INS SimpleName@@hadoop @TO@ QualifiedName@@org.apache.hadoop @AT@ 19726 @LENGTH@ 6
------------------------INS SimpleName@@hive @TO@ QualifiedName@@org.apache.hadoop.hive @AT@ 19733 @LENGTH@ 4
---------------------INS SimpleName@@metastore @TO@ QualifiedName@@org.apache.hadoop.hive.metastore @AT@ 19738 @LENGTH@ 9
------------------INS SimpleName@@api @TO@ QualifiedName@@org.apache.hadoop.hive.metastore.api @AT@ 19748 @LENGTH@ 3
---------------INS SimpleName@@Constants @TO@ QualifiedName@@org.apache.hadoop.hive.metastore.api.Constants @AT@ 19752 @LENGTH@ 9
------------INS SimpleName@@META_TABLE_PARTITION_COLUMNS @TO@ QualifiedName@@org.apache.hadoop.hive.metastore.api.Constants.META_TABLE_PARTITION_COLUMNS @AT@ 19762 @LENGTH@ 28


UPD MethodDeclaration@@protected, voidMethodName:StatefulSessionComponent, final EJBComponentCreateService ejbComponentCreateService,  @TO@ protected, voidMethodName:StatefulSessionComponent, final SessionBeanComponentCreateService ejbComponentCreateService,  @AT@ 2454 @LENGTH@ 707
---UPD SingleVariableDeclaration@@final EJBComponentCreateService ejbComponentCreateService @TO@ final SessionBeanComponentCreateService ejbComponentCreateService @AT@ 2489 @LENGTH@ 57
------UPD SimpleType@@EJBComponentCreateService @TO@ SessionBeanComponentCreateService @AT@ 2495 @LENGTH@ 25


UPD IfStatement@@if (element == Element.PATHS) {  System.out.println("Found paths");  parsePaths(reader,address,list,true);  element=nextElement(reader);} @TO@ if (element == Element.PATHS) {  parsePaths(reader,address,list,true);  element=nextElement(reader);} @AT@ 5996 @LENGTH@ 184
---UPD Block@@ThenBody:{  System.out.println("Found paths");  parsePaths(reader,address,list,true);  element=nextElement(reader);} @TO@ ThenBody:{  parsePaths(reader,address,list,true);  element=nextElement(reader);} @AT@ 6026 @LENGTH@ 154
------DEL ExpressionStatement@@MethodInvocation:System.out.println("Found paths") @AT@ 6040 @LENGTH@ 34
---------DEL MethodInvocation@@System.out.println("Found paths") @AT@ 6040 @LENGTH@ 33
------------DEL QualifiedName@@Name:System.out @AT@ 6040 @LENGTH@ 10
------------DEL SimpleName@@MethodName:println:["Found paths"] @AT@ 6051 @LENGTH@ 22
---------------DEL StringLiteral@@"Found paths" @AT@ 6059 @LENGTH@ 13


UPD TryStatement@@try {  final BatchBuilder builder=updateContext.getServiceTarget();  final ConsoleHandlerService service=new ConsoleHandlerService();  final ServiceBuilder<Handler> serviceBuilder=builder.addService(LogServices.handlerName(getName()),service);  service.setLevel(Level.parse(getLevelName()));  final Boolean autoFlush=getAutoflush();  if (autoFlush != null)   service.setAutoflush(autoFlush.booleanValue());  try {    service.setEncoding(getEncoding());  } catch (  UnsupportedEncodingException e) {    handler.handleFailure(e,param);    return;  }  service.setFormatterSpec(getFormatter());  serviceBuilder.setInitialMode(ServiceController.Mode.ACTIVE);  serviceBuilder.addListener(new UpdateResultHandler.ServiceStartListener<P>(handler,param));  serviceBuilder.install();} catch (Throwable t) {  handler.handleFailure(t,param);  return;} @TO@ try {  final ServiceTarget target=updateContext.getServiceTarget();  final ConsoleHandlerService service=new ConsoleHandlerService();  final ServiceBuilder<Handler> serviceBuilder=target.addService(LogServices.handlerName(getName()),service);  service.setLevel(Level.parse(getLevelName()));  final Boolean autoFlush=getAutoflush();  if (autoFlush != null)   service.setAutoflush(autoFlush.booleanValue());  try {    service.setEncoding(getEncoding());  } catch (  UnsupportedEncodingException e) {    handler.handleFailure(e,param);    return;  }  service.setFormatterSpec(getFormatter());  serviceBuilder.setInitialMode(ServiceController.Mode.ACTIVE);  serviceBuilder.addListener(new UpdateResultHandler.ServiceStartListener<P>(handler,param));  serviceBuilder.install();} catch (Throwable t) {  handler.handleFailure(t,param);  return;} @AT@ 2245 @LENGTH@ 1069
---UPD VariableDeclarationStatement@@final BatchBuilder builder=updateContext.getServiceTarget(); @TO@ final ServiceTarget target=updateContext.getServiceTarget(); @AT@ 2263 @LENGTH@ 62
------UPD SimpleType@@BatchBuilder @TO@ ServiceTarget @AT@ 2269 @LENGTH@ 12
------UPD VariableDeclarationFragment@@builder=updateContext.getServiceTarget() @TO@ target=updateContext.getServiceTarget() @AT@ 2282 @LENGTH@ 42
---------UPD SimpleName@@builder @TO@ target @AT@ 2282 @LENGTH@ 7
---UPD VariableDeclarationStatement@@final ServiceBuilder<Handler> serviceBuilder=builder.addService(LogServices.handlerName(getName()),service); @TO@ final ServiceBuilder<Handler> serviceBuilder=target.addService(LogServices.handlerName(getName()),service); @AT@ 2417 @LENGTH@ 111
------UPD VariableDeclarationFragment@@serviceBuilder=builder.addService(LogServices.handlerName(getName()),service) @TO@ serviceBuilder=target.addService(LogServices.handlerName(getName()),service) @AT@ 2447 @LENGTH@ 80
---------UPD MethodInvocation@@builder.addService(LogServices.handlerName(getName()),service) @TO@ target.addService(LogServices.handlerName(getName()),service) @AT@ 2464 @LENGTH@ 63
------------UPD SimpleName@@Name:builder @TO@ Name:target @AT@ 2464 @LENGTH@ 7


INS VariableDeclarationStatement@@final ServicesAttachment servicesAttachments=phaseContext.getDeploymentUnit().getAttachment(Attachments.SERVICES); @TO@ MethodDeclaration@@public, void, MethodName:deploy, DeploymentPhaseContext phaseContext, DeploymentUnitProcessingException,  @AT@ 2557 @LENGTH@ 116
---INS Modifier@@final @TO@ VariableDeclarationStatement@@final ServicesAttachment servicesAttachments=phaseContext.getDeploymentUnit().getAttachment(Attachments.SERVICES); @AT@ 2557 @LENGTH@ 5
---INS SimpleType@@ServicesAttachment @TO@ VariableDeclarationStatement@@final ServicesAttachment servicesAttachments=phaseContext.getDeploymentUnit().getAttachment(Attachments.SERVICES); @AT@ 2563 @LENGTH@ 18
---INS VariableDeclarationFragment@@servicesAttachments=phaseContext.getDeploymentUnit().getAttachment(Attachments.SERVICES) @TO@ VariableDeclarationStatement@@final ServicesAttachment servicesAttachments=phaseContext.getDeploymentUnit().getAttachment(Attachments.SERVICES); @AT@ 2582 @LENGTH@ 90
------INS SimpleName@@servicesAttachments @TO@ VariableDeclarationFragment@@servicesAttachments=phaseContext.getDeploymentUnit().getAttachment(Attachments.SERVICES) @AT@ 2582 @LENGTH@ 19
------INS MethodInvocation@@phaseContext.getDeploymentUnit().getAttachment(Attachments.SERVICES) @TO@ VariableDeclarationFragment@@servicesAttachments=phaseContext.getDeploymentUnit().getAttachment(Attachments.SERVICES) @AT@ 2604 @LENGTH@ 68
---------INS MethodInvocation@@MethodName:getDeploymentUnit:[] @TO@ MethodInvocation@@phaseContext.getDeploymentUnit().getAttachment(Attachments.SERVICES) @AT@ 2604 @LENGTH@ 32
---------INS SimpleName@@Name:phaseContext @TO@ MethodInvocation@@phaseContext.getDeploymentUnit().getAttachment(Attachments.SERVICES) @AT@ 2604 @LENGTH@ 12
---------INS SimpleName@@MethodName:getAttachment:[Attachments.SERVICES] @TO@ MethodInvocation@@phaseContext.getDeploymentUnit().getAttachment(Attachments.SERVICES) @AT@ 2637 @LENGTH@ 35
------------INS QualifiedName@@Attachments.SERVICES @TO@ SimpleName@@MethodName:getAttachment:[Attachments.SERVICES] @AT@ 2651 @LENGTH@ 20
---------------INS SimpleName@@Attachments @TO@ QualifiedName@@Attachments.SERVICES @AT@ 2651 @LENGTH@ 11
---------------INS SimpleName@@SERVICES @TO@ QualifiedName@@Attachments.SERVICES @AT@ 2663 @LENGTH@ 8


UPD VariableDeclarationStatement@@final Module module=context.getAttachment(Attachments.MODULE); @TO@ final ModuleIdentifier identifier=context.getAttachment(Attachments.MODULE_IDENTIFIER); @AT@ 7393 @LENGTH@ 64
---UPD SimpleType@@Module @TO@ ModuleIdentifier @AT@ 7399 @LENGTH@ 6
---UPD VariableDeclarationFragment@@module=context.getAttachment(Attachments.MODULE) @TO@ identifier=context.getAttachment(Attachments.MODULE_IDENTIFIER) @AT@ 7406 @LENGTH@ 50
------UPD SimpleName@@module @TO@ identifier @AT@ 7406 @LENGTH@ 6
------UPD MethodInvocation@@context.getAttachment(Attachments.MODULE) @TO@ context.getAttachment(Attachments.MODULE_IDENTIFIER) @AT@ 7415 @LENGTH@ 41
---------UPD SimpleName@@MethodName:getAttachment:[Attachments.MODULE] @TO@ MethodName:getAttachment:[Attachments.MODULE_IDENTIFIER] @AT@ 7423 @LENGTH@ 33
------------UPD QualifiedName@@Attachments.MODULE @TO@ Attachments.MODULE_IDENTIFIER @AT@ 7437 @LENGTH@ 18
---------------UPD SimpleName@@MODULE @TO@ MODULE_IDENTIFIER @AT@ 7449 @LENGTH@ 6


UPD VariableDeclarationStatement@@ObjectName on=ObjectName.getInstance("org.apache.camel:context=localhost/camel-1,type=threadpools,name=threads1(threads)"); @TO@ ObjectName on=ObjectName.getInstance("org.apache.camel:context=localhost/camel-1,type=threadpools,name=\"threads1(threads)\""); @AT@ 1331 @LENGTH@ 125
---UPD VariableDeclarationFragment@@on=ObjectName.getInstance("org.apache.camel:context=localhost/camel-1,type=threadpools,name=threads1(threads)") @TO@ on=ObjectName.getInstance("org.apache.camel:context=localhost/camel-1,type=threadpools,name=\"threads1(threads)\"") @AT@ 1342 @LENGTH@ 113
------UPD MethodInvocation@@ObjectName.getInstance("org.apache.camel:context=localhost/camel-1,type=threadpools,name=threads1(threads)") @TO@ ObjectName.getInstance("org.apache.camel:context=localhost/camel-1,type=threadpools,name=\"threads1(threads)\"") @AT@ 1347 @LENGTH@ 108
---------UPD SimpleName@@MethodName:getInstance:["org.apache.camel:context=localhost/camel-1,type=threadpools,name=threads1(threads)"] @TO@ MethodName:getInstance:["org.apache.camel:context=localhost/camel-1,type=threadpools,name=\"threads1(threads)\""] @AT@ 1358 @LENGTH@ 97
------------UPD StringLiteral@@"org.apache.camel:context=localhost/camel-1,type=threadpools,name=threads1(threads)" @TO@ "org.apache.camel:context=localhost/camel-1,type=threadpools,name=\"threads1(threads)\"" @AT@ 1370 @LENGTH@ 84


UPD Block@@ElseBody:{  AsyncCallback async=callback;  if (exchange.getUnitOfWork() != null) {    async=exchange.getUnitOfWork().beforeProcess(processor,exchange,callback);  }  sync=processor.process(exchange,async);  if (exchange.getUnitOfWork() != null) {    exchange.getUnitOfWork().afterProcess(processor,exchange,callback,sync);  }} @TO@ ElseBody:{  final UnitOfWork uow=exchange.getUnitOfWork();  AsyncCallback async=callback;  if (uow != null) {    async=uow.beforeProcess(processor,exchange,callback);  }  sync=processor.process(exchange,async);  if (uow != null) {    uow.afterProcess(processor,exchange,callback,sync);  }} @AT@ 2613 @LENGTH@ 675
---INS VariableDeclarationStatement@@final UnitOfWork uow=exchange.getUnitOfWork(); @TO@ Block@@ElseBody:{  AsyncCallback async=callback;  if (exchange.getUnitOfWork() != null) {    async=exchange.getUnitOfWork().beforeProcess(processor,exchange,callback);  }  sync=processor.process(exchange,async);  if (exchange.getUnitOfWork() != null) {    exchange.getUnitOfWork().afterProcess(processor,exchange,callback,sync);  }} @AT@ 2667 @LENGTH@ 48
------INS Modifier@@final @TO@ VariableDeclarationStatement@@final UnitOfWork uow=exchange.getUnitOfWork(); @AT@ 2667 @LENGTH@ 5
------INS SimpleType@@UnitOfWork @TO@ VariableDeclarationStatement@@final UnitOfWork uow=exchange.getUnitOfWork(); @AT@ 2673 @LENGTH@ 10
------INS VariableDeclarationFragment@@uow=exchange.getUnitOfWork() @TO@ VariableDeclarationStatement@@final UnitOfWork uow=exchange.getUnitOfWork(); @AT@ 2684 @LENGTH@ 30
---------INS SimpleName@@uow @TO@ VariableDeclarationFragment@@uow=exchange.getUnitOfWork() @AT@ 2684 @LENGTH@ 3
---------INS MethodInvocation@@exchange.getUnitOfWork() @TO@ VariableDeclarationFragment@@uow=exchange.getUnitOfWork() @AT@ 2690 @LENGTH@ 24
------------MOV SimpleName@@Name:exchange @TO@ MethodInvocation@@exchange.getUnitOfWork() @AT@ 2811 @LENGTH@ 8
------------MOV SimpleName@@MethodName:getUnitOfWork:[] @TO@ MethodInvocation@@exchange.getUnitOfWork() @AT@ 2820 @LENGTH@ 15
---DEL IfStatement@@if (exchange.getUnitOfWork() != null) {  async=exchange.getUnitOfWork().beforeProcess(processor,exchange,callback);} @AT@ 2807 @LENGTH@ 148
------DEL InfixExpression@@exchange.getUnitOfWork() != null @AT@ 2811 @LENGTH@ 32
---------DEL MethodInvocation@@exchange.getUnitOfWork() @AT@ 2811 @LENGTH@ 24
---INS IfStatement@@if (uow != null) {  async=uow.beforeProcess(processor,exchange,callback);} @TO@ Block@@ElseBody:{  AsyncCallback async=callback;  if (exchange.getUnitOfWork() != null) {    async=exchange.getUnitOfWork().beforeProcess(processor,exchange,callback);  }  sync=processor.process(exchange,async);  if (exchange.getUnitOfWork() != null) {    exchange.getUnitOfWork().afterProcess(processor,exchange,callback,sync);  }} @AT@ 2909 @LENGTH@ 106
------MOV Block@@ThenBody:{  async=exchange.getUnitOfWork().beforeProcess(processor,exchange,callback);} @TO@ IfStatement@@if (uow != null) {  async=uow.beforeProcess(processor,exchange,callback);} @AT@ 2845 @LENGTH@ 110
---------UPD ExpressionStatement@@Assignment:async=exchange.getUnitOfWork().beforeProcess(processor,exchange,callback) @TO@ Assignment:async=uow.beforeProcess(processor,exchange,callback) @AT@ 2863 @LENGTH@ 78
------------UPD Assignment@@async=exchange.getUnitOfWork().beforeProcess(processor,exchange,callback) @TO@ async=uow.beforeProcess(processor,exchange,callback) @AT@ 2863 @LENGTH@ 77
---------------UPD MethodInvocation@@exchange.getUnitOfWork().beforeProcess(processor,exchange,callback) @TO@ uow.beforeProcess(processor,exchange,callback) @AT@ 2871 @LENGTH@ 69
------------------DEL MethodInvocation@@MethodName:getUnitOfWork:[] @AT@ 2871 @LENGTH@ 24
------------------UPD SimpleName@@Name:exchange @TO@ Name:uow @AT@ 2871 @LENGTH@ 8
------INS InfixExpression@@uow != null @TO@ IfStatement@@if (uow != null) {  async=uow.beforeProcess(processor,exchange,callback);} @AT@ 2913 @LENGTH@ 11
---------MOV Operator@@!= @TO@ InfixExpression@@uow != null @AT@ 2835 @LENGTH@ 2
---------MOV NullLiteral@@null @TO@ InfixExpression@@uow != null @AT@ 2839 @LENGTH@ 4
---------INS SimpleName@@uow @TO@ InfixExpression@@uow != null @AT@ 2913 @LENGTH@ 3
---UPD IfStatement@@if (exchange.getUnitOfWork() != null) {  exchange.getUnitOfWork().afterProcess(processor,exchange,callback,sync);} @TO@ if (uow != null) {  uow.afterProcess(processor,exchange,callback,sync);} @AT@ 3133 @LENGTH@ 145
------UPD InfixExpression@@exchange.getUnitOfWork() != null @TO@ uow != null @AT@ 3137 @LENGTH@ 32
---------DEL MethodInvocation@@exchange.getUnitOfWork() @AT@ 3137 @LENGTH@ 24
------------DEL SimpleName@@Name:exchange @AT@ 3137 @LENGTH@ 8
------------DEL SimpleName@@MethodName:getUnitOfWork:[] @AT@ 3146 @LENGTH@ 15
---------INS SimpleName@@uow @TO@ InfixExpression@@exchange.getUnitOfWork() != null @AT@ 3238 @LENGTH@ 3
------UPD Block@@ThenBody:{  exchange.getUnitOfWork().afterProcess(processor,exchange,callback,sync);} @TO@ ThenBody:{  uow.afterProcess(processor,exchange,callback,sync);} @AT@ 3171 @LENGTH@ 107
---------UPD ExpressionStatement@@MethodInvocation:exchange.getUnitOfWork().afterProcess(processor,exchange,callback,sync) @TO@ MethodInvocation:uow.afterProcess(processor,exchange,callback,sync) @AT@ 3189 @LENGTH@ 75
------------UPD MethodInvocation@@exchange.getUnitOfWork().afterProcess(processor,exchange,callback,sync) @TO@ uow.afterProcess(processor,exchange,callback,sync) @AT@ 3189 @LENGTH@ 74
---------------DEL MethodInvocation@@MethodName:getUnitOfWork:[] @AT@ 3189 @LENGTH@ 24
---------------UPD SimpleName@@Name:exchange @TO@ Name:uow @AT@ 3189 @LENGTH@ 8


INS IfStatement@@if (params.size() != parameters.size()) {  throw new IllegalArgumentException("Parameters mismatch. Path template contains " + parameters.size() + " parameters, "+ params.size()+ " was given");} @TO@ MethodDeclaration@@public, String, MethodName:bindByName, Map<String,String> params,  @AT@ 1889 @LENGTH@ 232
---INS InfixExpression@@params.size() != parameters.size() @TO@ IfStatement@@if (params.size() != parameters.size()) {  throw new IllegalArgumentException("Parameters mismatch. Path template contains " + parameters.size() + " parameters, "+ params.size()+ " was given");} @AT@ 1893 @LENGTH@ 34
------INS MethodInvocation@@params.size() @TO@ InfixExpression@@params.size() != parameters.size() @AT@ 1893 @LENGTH@ 13
---------INS SimpleName@@Name:params @TO@ MethodInvocation@@params.size() @AT@ 1893 @LENGTH@ 6
---------INS SimpleName@@MethodName:size:[] @TO@ MethodInvocation@@params.size() @AT@ 1900 @LENGTH@ 6
------INS Operator@@!= @TO@ InfixExpression@@params.size() != parameters.size() @AT@ 1906 @LENGTH@ 2
------INS MethodInvocation@@parameters.size() @TO@ InfixExpression@@params.size() != parameters.size() @AT@ 1910 @LENGTH@ 17
---------INS SimpleName@@Name:parameters @TO@ MethodInvocation@@parameters.size() @AT@ 1910 @LENGTH@ 10
---------INS SimpleName@@MethodName:size:[] @TO@ MethodInvocation@@parameters.size() @AT@ 1921 @LENGTH@ 6
---INS Block@@ThenBody:{  throw new IllegalArgumentException("Parameters mismatch. Path template contains " + parameters.size() + " parameters, "+ params.size()+ " was given");} @TO@ IfStatement@@if (params.size() != parameters.size()) {  throw new IllegalArgumentException("Parameters mismatch. Path template contains " + parameters.size() + " parameters, "+ params.size()+ " was given");} @AT@ 1929 @LENGTH@ 192
------INS ThrowStatement@@ClassInstanceCreation:new IllegalArgumentException("Parameters mismatch. Path template contains " + parameters.size() + " parameters, "+ params.size()+ " was given") @TO@ Block@@ThenBody:{  throw new IllegalArgumentException("Parameters mismatch. Path template contains " + parameters.size() + " parameters, "+ params.size()+ " was given");} @AT@ 1943 @LENGTH@ 168
---------INS ClassInstanceCreation@@IllegalArgumentException["Parameters mismatch. Path template contains " + parameters.size() + " parameters, "+ params.size()+ " was given"] @TO@ ThrowStatement@@ClassInstanceCreation:new IllegalArgumentException("Parameters mismatch. Path template contains " + parameters.size() + " parameters, "+ params.size()+ " was given") @AT@ 1949 @LENGTH@ 161
------------INS New@@new @TO@ ClassInstanceCreation@@IllegalArgumentException["Parameters mismatch. Path template contains " + parameters.size() + " parameters, "+ params.size()+ " was given"] @AT@ 1949 @LENGTH@ 3
------------INS SimpleType@@IllegalArgumentException @TO@ ClassInstanceCreation@@IllegalArgumentException["Parameters mismatch. Path template contains " + parameters.size() + " parameters, "+ params.size()+ " was given"] @AT@ 1953 @LENGTH@ 24
------------INS InfixExpression@@"Parameters mismatch. Path template contains " + parameters.size() + " parameters, "+ params.size()+ " was given" @TO@ ClassInstanceCreation@@IllegalArgumentException["Parameters mismatch. Path template contains " + parameters.size() + " parameters, "+ params.size()+ " was given"] @AT@ 1978 @LENGTH@ 131
---------------INS StringLiteral@@"Parameters mismatch. Path template contains " @TO@ InfixExpression@@"Parameters mismatch. Path template contains " + parameters.size() + " parameters, "+ params.size()+ " was given" @AT@ 1978 @LENGTH@ 46
---------------INS Operator@@+ @TO@ InfixExpression@@"Parameters mismatch. Path template contains " + parameters.size() + " parameters, "+ params.size()+ " was given" @AT@ 2024 @LENGTH@ 1
---------------INS MethodInvocation@@parameters.size() @TO@ InfixExpression@@"Parameters mismatch. Path template contains " + parameters.size() + " parameters, "+ params.size()+ " was given" @AT@ 2027 @LENGTH@ 17
------------------INS SimpleName@@Name:parameters @TO@ MethodInvocation@@parameters.size() @AT@ 2027 @LENGTH@ 10
------------------INS SimpleName@@MethodName:size:[] @TO@ MethodInvocation@@parameters.size() @AT@ 2038 @LENGTH@ 6
---------------INS StringLiteral@@" parameters, " @TO@ InfixExpression@@"Parameters mismatch. Path template contains " + parameters.size() + " parameters, "+ params.size()+ " was given" @AT@ 2063 @LENGTH@ 15
---------------INS MethodInvocation@@params.size() @TO@ InfixExpression@@"Parameters mismatch. Path template contains " + parameters.size() + " parameters, "+ params.size()+ " was given" @AT@ 2081 @LENGTH@ 13
------------------INS SimpleName@@Name:params @TO@ MethodInvocation@@params.size() @AT@ 2081 @LENGTH@ 6
------------------INS SimpleName@@MethodName:size:[] @TO@ MethodInvocation@@params.size() @AT@ 2088 @LENGTH@ 6
---------------INS StringLiteral@@" was given" @TO@ InfixExpression@@"Parameters mismatch. Path template contains " + parameters.size() + " parameters, "+ params.size()+ " was given" @AT@ 2097 @LENGTH@ 12


UPD TryStatement@@try {  serverModel.update(update);} catch (UpdateFailedException e) {  resultHandler.handleFailure(e,param);  return;} @TO@ try {  serverModel.update(update);} catch (UpdateFailedException e) {  resultHandler.handleFailure(e,param);  return;}catch (Throwable t) {  resultHandler.handleFailure(t,param);  return;} @AT@ 5454 @LENGTH@ 190
---INS CatchClause@@catch (Throwable t) {  resultHandler.handleFailure(t,param);  return;} @TO@ TryStatement@@try {  serverModel.update(update);} catch (UpdateFailedException e) {  resultHandler.handleFailure(e,param);  return;} @AT@ 5645 @LENGTH@ 114
------INS SingleVariableDeclaration@@Throwable t @TO@ CatchClause@@catch (Throwable t) {  resultHandler.handleFailure(t,param);  return;} @AT@ 5652 @LENGTH@ 11
---------INS SimpleType@@Throwable @TO@ SingleVariableDeclaration@@Throwable t @AT@ 5652 @LENGTH@ 9
---------INS SimpleName@@t @TO@ SingleVariableDeclaration@@Throwable t @AT@ 5662 @LENGTH@ 1
------INS ExpressionStatement@@MethodInvocation:resultHandler.handleFailure(t,param) @TO@ CatchClause@@catch (Throwable t) {  resultHandler.handleFailure(t,param);  return;} @AT@ 5683 @LENGTH@ 38
---------INS MethodInvocation@@resultHandler.handleFailure(t,param) @TO@ ExpressionStatement@@MethodInvocation:resultHandler.handleFailure(t,param) @AT@ 5683 @LENGTH@ 37
------------INS SimpleName@@Name:resultHandler @TO@ MethodInvocation@@resultHandler.handleFailure(t,param) @AT@ 5683 @LENGTH@ 13
------------INS SimpleName@@MethodName:handleFailure:[t, param] @TO@ MethodInvocation@@resultHandler.handleFailure(t,param) @AT@ 5697 @LENGTH@ 23
---------------INS SimpleName@@t @TO@ SimpleName@@MethodName:handleFailure:[t, param] @AT@ 5711 @LENGTH@ 1
---------------INS SimpleName@@param @TO@ SimpleName@@MethodName:handleFailure:[t, param] @AT@ 5714 @LENGTH@ 5
------INS ReturnStatement@@ @TO@ CatchClause@@catch (Throwable t) {  resultHandler.handleFailure(t,param);  return;} @AT@ 5738 @LENGTH@ 7


INS FieldDeclaration@@public, static, final, AttachmentKey<Boolean>, [IGNORE_OSGI=AttachmentKey.create(Boolean.class)] @TO@ TypeDeclaration@@[public, final]Attachments,  @AT@ 4405 @LENGTH@ 93
---INS Modifier@@public @TO@ FieldDeclaration@@public, static, final, AttachmentKey<Boolean>, [IGNORE_OSGI=AttachmentKey.create(Boolean.class)] @AT@ 4405 @LENGTH@ 6
---INS Modifier@@static @TO@ FieldDeclaration@@public, static, final, AttachmentKey<Boolean>, [IGNORE_OSGI=AttachmentKey.create(Boolean.class)] @AT@ 4412 @LENGTH@ 6
---INS Modifier@@final @TO@ FieldDeclaration@@public, static, final, AttachmentKey<Boolean>, [IGNORE_OSGI=AttachmentKey.create(Boolean.class)] @AT@ 4419 @LENGTH@ 5
---INS ParameterizedType@@AttachmentKey<Boolean> @TO@ FieldDeclaration@@public, static, final, AttachmentKey<Boolean>, [IGNORE_OSGI=AttachmentKey.create(Boolean.class)] @AT@ 4425 @LENGTH@ 22
------INS SimpleType@@AttachmentKey @TO@ ParameterizedType@@AttachmentKey<Boolean> @AT@ 4425 @LENGTH@ 13
------INS SimpleType@@Boolean @TO@ ParameterizedType@@AttachmentKey<Boolean> @AT@ 4439 @LENGTH@ 7
---INS VariableDeclarationFragment@@IGNORE_OSGI=AttachmentKey.create(Boolean.class) @TO@ FieldDeclaration@@public, static, final, AttachmentKey<Boolean>, [IGNORE_OSGI=AttachmentKey.create(Boolean.class)] @AT@ 4448 @LENGTH@ 49
------INS SimpleName@@IGNORE_OSGI @TO@ VariableDeclarationFragment@@IGNORE_OSGI=AttachmentKey.create(Boolean.class) @AT@ 4448 @LENGTH@ 11
------INS MethodInvocation@@AttachmentKey.create(Boolean.class) @TO@ VariableDeclarationFragment@@IGNORE_OSGI=AttachmentKey.create(Boolean.class) @AT@ 4462 @LENGTH@ 35
---------INS SimpleName@@Name:AttachmentKey @TO@ MethodInvocation@@AttachmentKey.create(Boolean.class) @AT@ 4462 @LENGTH@ 13
---------INS SimpleName@@MethodName:create:[Boolean.class] @TO@ MethodInvocation@@AttachmentKey.create(Boolean.class) @AT@ 4476 @LENGTH@ 21
------------INS TypeLiteral@@Boolean.class @TO@ SimpleName@@MethodName:create:[Boolean.class] @AT@ 4483 @LENGTH@ 13


UPD MethodDeclaration@@public, void, MethodName:handle, ParsingContext ctx, OperationFormatException,  @TO@ public, void, MethodName:handle, ParsingContext ctx, CommandFormatException,  @AT@ 2235 @LENGTH@ 151
---UPD SimpleType@@OperationFormatException @TO@ CommandFormatException @AT@ 2297 @LENGTH@ 24


UPD TryStatement@@try {  JobExecution jobExecution=jobService.getJobExecution(jobExecutionId);  model.addAttribute(new JobExecutionInfo(jobExecution,timeZone));  String jobName=jobExecution.getJobInstance().getJobName();  Collection<String> stepNames=jobService.getStepNamesForJob(jobName);  Collection<StepExecution> stepExecutions=new ArrayList<StepExecution>(jobExecution.getStepExecutions());  Collection<StepExecutionInfo> stepExecutionInfos=new ArrayList<StepExecutionInfo>();  for (  String name : stepNames) {    boolean found=false;    for (Iterator<StepExecution> iterator=stepExecutions.iterator(); iterator.hasNext(); ) {      StepExecution stepExecution=iterator.next();      if (stepExecution.getStepName().equals(name)) {        stepExecutionInfos.add(new StepExecutionInfo(stepExecution,timeZone));        iterator.remove();        found=true;      }    }    if (!found) {      stepExecutionInfos.add(new StepExecutionInfo(jobName,jobExecutionId,name,timeZone));    }  }  model.addAttribute("stepExecutionInfos",stepExecutionInfos);} catch (NoSuchJobExecutionException e) {  errors.reject("no.such.job.execution",new Object[]{jobExecutionId},"There is no such job execution (" + jobExecutionId + ")");}catch (NoSuchJobException e) {  errors.reject("no.such.job",new Object[]{jobExecutionId},"There is no such job with exeuction id (" + jobExecutionId + ")");} @TO@ try {  JobExecution jobExecution=jobService.getJobExecution(jobExecutionId);  model.addAttribute(new JobExecutionInfo(jobExecution,timeZone));  String jobName=jobExecution.getJobInstance().getJobName();  Collection<String> stepNames=new HashSet<String>(jobService.getStepNamesForJob(jobName));  Collection<StepExecution> stepExecutions=new ArrayList<StepExecution>(jobExecution.getStepExecutions());  Collection<StepExecutionInfo> stepExecutionInfos=new ArrayList<StepExecutionInfo>();  for (  StepExecution stepExecution : stepExecutions) {    stepExecutionInfos.add(new StepExecutionInfo(stepExecution,timeZone));  }  for (  String name : stepNames) {    boolean found=false;    for (Iterator<StepExecution> iterator=stepExecutions.iterator(); iterator.hasNext(); ) {      StepExecution stepExecution=iterator.next();      if (stepExecution.getStepName().equals(name)) {        iterator.remove();        found=true;      }    }    if (!found) {      stepExecutionInfos.add(new StepExecutionInfo(jobName,jobExecutionId,name,timeZone));    }  }  model.addAttribute("stepExecutionInfos",stepExecutionInfos);} catch (NoSuchJobExecutionException e) {  errors.reject("no.such.job.execution",new Object[]{jobExecutionId},"There is no such job execution (" + jobExecutionId + ")");}catch (NoSuchJobException e) {  errors.reject("no.such.job",new Object[]{jobExecutionId},"There is no such job with exeuction id (" + jobExecutionId + ")");} @AT@ 12053 @LENGTH@ 1436
---UPD VariableDeclarationStatement@@Collection<String> stepNames=jobService.getStepNamesForJob(jobName); @TO@ Collection<String> stepNames=new HashSet<String>(jobService.getStepNamesForJob(jobName)); @AT@ 12270 @LENGTH@ 70
------UPD VariableDeclarationFragment@@stepNames=jobService.getStepNamesForJob(jobName) @TO@ stepNames=new HashSet<String>(jobService.getStepNamesForJob(jobName)) @AT@ 12289 @LENGTH@ 50
---------INS ClassInstanceCreation@@HashSet<String>[jobService.getStepNamesForJob(jobName)] @TO@ VariableDeclarationFragment@@stepNames=jobService.getStepNamesForJob(jobName) @AT@ 12327 @LENGTH@ 59
------------MOV MethodInvocation@@jobService.getStepNamesForJob(jobName) @TO@ ClassInstanceCreation@@HashSet<String>[jobService.getStepNamesForJob(jobName)] @AT@ 12301 @LENGTH@ 38
------------INS New@@new @TO@ ClassInstanceCreation@@HashSet<String>[jobService.getStepNamesForJob(jobName)] @AT@ 12327 @LENGTH@ 3
------------INS ParameterizedType@@HashSet<String> @TO@ ClassInstanceCreation@@HashSet<String>[jobService.getStepNamesForJob(jobName)] @AT@ 12331 @LENGTH@ 15
---------------INS SimpleType@@HashSet @TO@ ParameterizedType@@HashSet<String> @AT@ 12331 @LENGTH@ 7
---------------INS SimpleType@@String @TO@ ParameterizedType@@HashSet<String> @AT@ 12339 @LENGTH@ 6
---UPD EnhancedForStatement@@for (String name : stepNames) {  boolean found=false;  for (Iterator<StepExecution> iterator=stepExecutions.iterator(); iterator.hasNext(); ) {    StepExecution stepExecution=iterator.next();    if (stepExecution.getStepName().equals(name)) {      stepExecutionInfos.add(new StepExecutionInfo(stepExecution,timeZone));      iterator.remove();      found=true;    }  }  if (!found) {    stepExecutionInfos.add(new StepExecutionInfo(jobName,jobExecutionId,name,timeZone));  }} @TO@ for (String name : stepNames) {  boolean found=false;  for (Iterator<StepExecution> iterator=stepExecutions.iterator(); iterator.hasNext(); ) {    StepExecution stepExecution=iterator.next();    if (stepExecution.getStepName().equals(name)) {      iterator.remove();      found=true;    }  }  if (!found) {    stepExecutionInfos.add(new StepExecutionInfo(jobName,jobExecutionId,name,timeZone));  }} @AT@ 12544 @LENGTH@ 515
------UPD ForStatement@@for (Iterator<StepExecution> iterator=stepExecutions.iterator(); iterator.hasNext(); ) {  StepExecution stepExecution=iterator.next();  if (stepExecution.getStepName().equals(name)) {    stepExecutionInfos.add(new StepExecutionInfo(stepExecution,timeZone));    iterator.remove();    found=true;  }} @TO@ for (Iterator<StepExecution> iterator=stepExecutions.iterator(); iterator.hasNext(); ) {  StepExecution stepExecution=iterator.next();  if (stepExecution.getStepName().equals(name)) {    iterator.remove();    found=true;  }} @AT@ 12607 @LENGTH@ 330
---------UPD IfStatement@@if (stepExecution.getStepName().equals(name)) {  stepExecutionInfos.add(new StepExecutionInfo(stepExecution,timeZone));  iterator.remove();  found=true;} @TO@ if (stepExecution.getStepName().equals(name)) {  iterator.remove();  found=true;} @AT@ 12754 @LENGTH@ 177
------------UPD Block@@ThenBody:{  stepExecutionInfos.add(new StepExecutionInfo(stepExecution,timeZone));  iterator.remove();  found=true;} @TO@ ThenBody:{  iterator.remove();  found=true;} @AT@ 12800 @LENGTH@ 131
---INS EnhancedForStatement@@for (StepExecution stepExecution : stepExecutions) {  stepExecutionInfos.add(new StepExecutionInfo(stepExecution,timeZone));} @TO@ TryStatement@@try {  JobExecution jobExecution=jobService.getJobExecution(jobExecutionId);  model.addAttribute(new JobExecutionInfo(jobExecution,timeZone));  String jobName=jobExecution.getJobInstance().getJobName();  Collection<String> stepNames=jobService.getStepNamesForJob(jobName);  Collection<StepExecution> stepExecutions=new ArrayList<StepExecution>(jobExecution.getStepExecutions());  Collection<StepExecutionInfo> stepExecutionInfos=new ArrayList<StepExecutionInfo>();  for (  String name : stepNames) {    boolean found=false;    for (Iterator<StepExecution> iterator=stepExecutions.iterator(); iterator.hasNext(); ) {      StepExecution stepExecution=iterator.next();      if (stepExecution.getStepName().equals(name)) {        stepExecutionInfos.add(new StepExecutionInfo(stepExecution,timeZone));        iterator.remove();        found=true;      }    }    if (!found) {      stepExecutionInfos.add(new StepExecutionInfo(jobName,jobExecutionId,name,timeZone));    }  }  model.addAttribute("stepExecutionInfos",stepExecutionInfos);} catch (NoSuchJobExecutionException e) {  errors.reject("no.such.job.execution",new Object[]{jobExecutionId},"There is no such job execution (" + jobExecutionId + ")");}catch (NoSuchJobException e) {  errors.reject("no.such.job",new Object[]{jobExecutionId},"There is no such job with exeuction id (" + jobExecutionId + ")");} @AT@ 12591 @LENGTH@ 133
------INS SingleVariableDeclaration@@StepExecution stepExecution @TO@ EnhancedForStatement@@for (StepExecution stepExecution : stepExecutions) {  stepExecutionInfos.add(new StepExecutionInfo(stepExecution,timeZone));} @AT@ 12596 @LENGTH@ 27
---------INS SimpleType@@StepExecution @TO@ SingleVariableDeclaration@@StepExecution stepExecution @AT@ 12596 @LENGTH@ 13
---------INS SimpleName@@stepExecution @TO@ SingleVariableDeclaration@@StepExecution stepExecution @AT@ 12610 @LENGTH@ 13
------INS SimpleName@@stepExecutions @TO@ EnhancedForStatement@@for (StepExecution stepExecution : stepExecutions) {  stepExecutionInfos.add(new StepExecutionInfo(stepExecution,timeZone));} @AT@ 12626 @LENGTH@ 14
------MOV ExpressionStatement@@MethodInvocation:stepExecutionInfos.add(new StepExecutionInfo(stepExecution,timeZone)) @TO@ EnhancedForStatement@@for (StepExecution stepExecution : stepExecutions) {  stepExecutionInfos.add(new StepExecutionInfo(stepExecution,timeZone));} @AT@ 12808 @LENGTH@ 71


UPD FieldDeclaration@@private, static, final, Class<?>, [FACTORY_CLASS=RepositoryFactorySupport.class] @TO@ private, static, final, Class<?>, [FACTORY_CLASS=RepositoryFactoryBeanSupport.class] @AT@ 1481 @LENGTH@ 89
---UPD VariableDeclarationFragment@@FACTORY_CLASS=RepositoryFactorySupport.class @TO@ FACTORY_CLASS=RepositoryFactoryBeanSupport.class @AT@ 1511 @LENGTH@ 58
------UPD TypeLiteral@@RepositoryFactorySupport.class @TO@ RepositoryFactoryBeanSupport.class @AT@ 1539 @LENGTH@ 30


UPD ReturnStatement@@InfixExpression:"https://github.com/" + providerAccountId @TO@ MethodInvocation:github.getProfileUrl() @AT@ 1802 @LENGTH@ 49
---DEL InfixExpression@@"https://github.com/" + providerAccountId @AT@ 1809 @LENGTH@ 41
------DEL StringLiteral@@"https://github.com/" @AT@ 1809 @LENGTH@ 21
------DEL Operator@@+ @AT@ 1830 @LENGTH@ 1
------DEL SimpleName@@providerAccountId @AT@ 1833 @LENGTH@ 17
---INS MethodInvocation@@github.getProfileUrl() @TO@ ReturnStatement@@InfixExpression:"https://github.com/" + providerAccountId @AT@ 1809 @LENGTH@ 22
------INS SimpleName@@Name:github @TO@ MethodInvocation@@github.getProfileUrl() @AT@ 1809 @LENGTH@ 6
------INS SimpleName@@MethodName:getProfileUrl:[] @TO@ MethodInvocation@@github.getProfileUrl() @AT@ 1816 @LENGTH@ 15


INS TryStatement@@try {  args.parse(line);} catch (CommandFormatException e) {  org.junit.Assert.fail(e.getLocalizedMessage());} @TO@ MethodDeclaration@@protected, ParsedArguments, MethodName:parse, String line,  @AT@ 2245 @LENGTH@ 150
---MOV ExpressionStatement@@MethodInvocation:args.parse(line) @TO@ TryStatement@@try {  args.parse(line);} catch (CommandFormatException e) {  org.junit.Assert.fail(e.getLocalizedMessage());} @AT@ 2197 @LENGTH@ 17
---INS CatchClause@@catch (CommandFormatException e) {  org.junit.Assert.fail(e.getLocalizedMessage());} @TO@ TryStatement@@try {  args.parse(line);} catch (CommandFormatException e) {  org.junit.Assert.fail(e.getLocalizedMessage());} @AT@ 2291 @LENGTH@ 104
------INS SingleVariableDeclaration@@CommandFormatException e @TO@ CatchClause@@catch (CommandFormatException e) {  org.junit.Assert.fail(e.getLocalizedMessage());} @AT@ 2298 @LENGTH@ 24
---------INS SimpleType@@CommandFormatException @TO@ SingleVariableDeclaration@@CommandFormatException e @AT@ 2298 @LENGTH@ 22
---------INS SimpleName@@e @TO@ SingleVariableDeclaration@@CommandFormatException e @AT@ 2321 @LENGTH@ 1
------INS ExpressionStatement@@MethodInvocation:org.junit.Assert.fail(e.getLocalizedMessage()) @TO@ CatchClause@@catch (CommandFormatException e) {  org.junit.Assert.fail(e.getLocalizedMessage());} @AT@ 2338 @LENGTH@ 47
---------INS MethodInvocation@@org.junit.Assert.fail(e.getLocalizedMessage()) @TO@ ExpressionStatement@@MethodInvocation:org.junit.Assert.fail(e.getLocalizedMessage()) @AT@ 2338 @LENGTH@ 46
------------INS QualifiedName@@Name:org.junit.Assert @TO@ MethodInvocation@@org.junit.Assert.fail(e.getLocalizedMessage()) @AT@ 2338 @LENGTH@ 16
------------INS SimpleName@@MethodName:fail:[e.getLocalizedMessage()] @TO@ MethodInvocation@@org.junit.Assert.fail(e.getLocalizedMessage()) @AT@ 2355 @LENGTH@ 29
---------------INS MethodInvocation@@e.getLocalizedMessage() @TO@ SimpleName@@MethodName:fail:[e.getLocalizedMessage()] @AT@ 2360 @LENGTH@ 23
------------------INS SimpleName@@Name:e @TO@ MethodInvocation@@e.getLocalizedMessage() @AT@ 2360 @LENGTH@ 1
------------------INS SimpleName@@MethodName:getLocalizedMessage:[] @TO@ MethodInvocation@@e.getLocalizedMessage() @AT@ 2362 @LENGTH@ 21


UPD TypeDeclaration@@[@RunWith(JUnit4TestRunner.class), public]CamelSpringWebServiceTest, AbstractFeatureTest @TO@ [@RunWith(JUnit4TestRunner.class), @Ignore("Does not work"), public]CamelSpringWebServiceTest, AbstractFeatureTest @AT@ 1056 @LENGTH@ 371
---INS SingleMemberAnnotation@@@Ignore("Does not work") @TO@ TypeDeclaration@@[@RunWith(JUnit4TestRunner.class), public]CamelSpringWebServiceTest, AbstractFeatureTest @AT@ 1089 @LENGTH@ 24


UPD IfStatement@@if (Util.isSuccess(result)) {  batchManager.discardActiveBatch();  ctx.printLine("The batch executed successfully.");} @TO@ if (Util.isSuccess(result)) {  batchManager.discardActiveBatch();  ctx.printLine("The batch executed successfully.");} else {  ctx.printLine("Failed to execute batch: " + Util.getFailureDescription(result));} @AT@ 2797 @LENGTH@ 160
---INS Block@@ElseBody:{  ctx.printLine("Failed to execute batch: " + Util.getFailureDescription(result));} @TO@ IfStatement@@if (Util.isSuccess(result)) {  batchManager.discardActiveBatch();  ctx.printLine("The batch executed successfully.");} @AT@ 2963 @LENGTH@ 112
------INS ExpressionStatement@@MethodInvocation:ctx.printLine("Failed to execute batch: " + Util.getFailureDescription(result)) @TO@ Block@@ElseBody:{  ctx.printLine("Failed to execute batch: " + Util.getFailureDescription(result));} @AT@ 2981 @LENGTH@ 80
---------INS MethodInvocation@@ctx.printLine("Failed to execute batch: " + Util.getFailureDescription(result)) @TO@ ExpressionStatement@@MethodInvocation:ctx.printLine("Failed to execute batch: " + Util.getFailureDescription(result)) @AT@ 2981 @LENGTH@ 79
------------INS SimpleName@@Name:ctx @TO@ MethodInvocation@@ctx.printLine("Failed to execute batch: " + Util.getFailureDescription(result)) @AT@ 2981 @LENGTH@ 3
------------INS SimpleName@@MethodName:printLine:["Failed to execute batch: " + Util.getFailureDescription(result)] @TO@ MethodInvocation@@ctx.printLine("Failed to execute batch: " + Util.getFailureDescription(result)) @AT@ 2985 @LENGTH@ 75
---------------INS InfixExpression@@"Failed to execute batch: " + Util.getFailureDescription(result) @TO@ SimpleName@@MethodName:printLine:["Failed to execute batch: " + Util.getFailureDescription(result)] @AT@ 2995 @LENGTH@ 64
------------------INS StringLiteral@@"Failed to execute batch: " @TO@ InfixExpression@@"Failed to execute batch: " + Util.getFailureDescription(result) @AT@ 2995 @LENGTH@ 27
------------------INS Operator@@+ @TO@ InfixExpression@@"Failed to execute batch: " + Util.getFailureDescription(result) @AT@ 3022 @LENGTH@ 1
------------------INS MethodInvocation@@Util.getFailureDescription(result) @TO@ InfixExpression@@"Failed to execute batch: " + Util.getFailureDescription(result) @AT@ 3025 @LENGTH@ 34
---------------------INS SimpleName@@Name:Util @TO@ MethodInvocation@@Util.getFailureDescription(result) @AT@ 3025 @LENGTH@ 4
---------------------INS SimpleName@@MethodName:getFailureDescription:[result] @TO@ MethodInvocation@@Util.getFailureDescription(result) @AT@ 3030 @LENGTH@ 29
------------------------INS SimpleName@@result @TO@ SimpleName@@MethodName:getFailureDescription:[result] @AT@ 3052 @LENGTH@ 6


UPD VariableDeclarationStatement@@final VirtualFile deploymentRoot=phaseContext.getAttachment(Attachments.DEPLOYMENT_ROOT); @TO@ final VirtualFile deploymentRoot=phaseContext.getAttachment(Attachments.DEPLOYMENT_ROOT).getRoot(); @AT@ 2136 @LENGTH@ 91
---UPD VariableDeclarationFragment@@deploymentRoot=phaseContext.getAttachment(Attachments.DEPLOYMENT_ROOT) @TO@ deploymentRoot=phaseContext.getAttachment(Attachments.DEPLOYMENT_ROOT).getRoot() @AT@ 2154 @LENGTH@ 72
------UPD MethodInvocation@@phaseContext.getAttachment(Attachments.DEPLOYMENT_ROOT) @TO@ phaseContext.getAttachment(Attachments.DEPLOYMENT_ROOT).getRoot() @AT@ 2171 @LENGTH@ 55
---------DEL SimpleName@@MethodName:getAttachment:[Attachments.DEPLOYMENT_ROOT] @AT@ 2184 @LENGTH@ 42
------------DEL QualifiedName@@Attachments.DEPLOYMENT_ROOT @AT@ 2198 @LENGTH@ 27
---------INS MethodInvocation@@MethodName:getAttachment:[Attachments.DEPLOYMENT_ROOT] @TO@ MethodInvocation@@phaseContext.getAttachment(Attachments.DEPLOYMENT_ROOT) @AT@ 2206 @LENGTH@ 55
------------INS QualifiedName@@Attachments.DEPLOYMENT_ROOT @TO@ MethodInvocation@@MethodName:getAttachment:[Attachments.DEPLOYMENT_ROOT] @AT@ 2233 @LENGTH@ 27
---------------MOV SimpleName@@Attachments @TO@ QualifiedName@@Attachments.DEPLOYMENT_ROOT @AT@ 2198 @LENGTH@ 11
---------------MOV SimpleName@@DEPLOYMENT_ROOT @TO@ QualifiedName@@Attachments.DEPLOYMENT_ROOT @AT@ 2210 @LENGTH@ 15
---------INS SimpleName@@MethodName:getRoot:[] @TO@ MethodInvocation@@phaseContext.getAttachment(Attachments.DEPLOYMENT_ROOT) @AT@ 2262 @LENGTH@ 9


UPD ExpressionStatement@@MethodInvocation:bodyBuilder.appendFormalLine("if (" + entityName + " != null) {") @TO@ MethodInvocation:bodyBuilder.appendFormalLine("if (this." + entityIdName + " != null) {") @AT@ 17813 @LENGTH@ 66
---UPD MethodInvocation@@bodyBuilder.appendFormalLine("if (" + entityName + " != null) {") @TO@ bodyBuilder.appendFormalLine("if (this." + entityIdName + " != null) {") @AT@ 17813 @LENGTH@ 65
------UPD SimpleName@@MethodName:appendFormalLine:["if (" + entityName + " != null) {"] @TO@ MethodName:appendFormalLine:["if (this." + entityIdName + " != null) {"] @AT@ 17825 @LENGTH@ 53
---------UPD InfixExpression@@"if (" + entityName + " != null) {" @TO@ "if (this." + entityIdName + " != null) {" @AT@ 17842 @LENGTH@ 35
------------UPD StringLiteral@@"if (" @TO@ "if (this." @AT@ 17842 @LENGTH@ 6
------------UPD SimpleName@@entityName @TO@ entityIdName @AT@ 17851 @LENGTH@ 10


UPD ReturnStatement@@QualifiedName:SerializerUtils.EMPTY_ARRAY @TO@ QualifiedName:SerializationUtils.EMPTY_ARRAY @AT@ 2077 @LENGTH@ 35
---UPD QualifiedName@@SerializerUtils.EMPTY_ARRAY @TO@ SerializationUtils.EMPTY_ARRAY @AT@ 2084 @LENGTH@ 27
------UPD SimpleName@@SerializerUtils @TO@ SerializationUtils @AT@ 2084 @LENGTH@ 15


UPD MethodDeclaration@@public, boolean, MethodName:canAppearNext, CommandContext ctx,  @TO@ public, boolean, MethodName:canAppearNext, CommandContext ctx, CommandFormatException,  @AT@ 3411 @LENGTH@ 254
---INS SimpleType@@CommandFormatException @TO@ MethodDeclaration@@public, boolean, MethodName:canAppearNext, CommandContext ctx,  @AT@ 3497 @LENGTH@ 22


INS VariableDeclarationStatement@@String target=createFileName(exchange); @TO@ MethodDeclaration@@public, void, MethodName:process, Exchange exchange, Exception,  @AT@ 1822 @LENGTH@ 41
---INS SimpleType@@String @TO@ VariableDeclarationStatement@@String target=createFileName(exchange); @AT@ 1822 @LENGTH@ 6
---INS VariableDeclarationFragment@@target=createFileName(exchange) @TO@ VariableDeclarationStatement@@String target=createFileName(exchange); @AT@ 1829 @LENGTH@ 33
------INS SimpleName@@target @TO@ VariableDeclarationFragment@@target=createFileName(exchange) @AT@ 1829 @LENGTH@ 6
------INS MethodInvocation@@createFileName(exchange) @TO@ VariableDeclarationFragment@@target=createFileName(exchange) @AT@ 1838 @LENGTH@ 24
---------INS SimpleName@@MethodName:createFileName:[exchange] @TO@ MethodInvocation@@createFileName(exchange) @AT@ 1838 @LENGTH@ 24
------------INS SimpleName@@exchange @TO@ SimpleName@@MethodName:createFileName:[exchange] @AT@ 1853 @LENGTH@ 8


UPD Block@@WhileBody:{  String name=null;  String profile=null;  final int count=reader.getAttributeCount();  for (int i=0; i < count; i++) {    final String value=reader.getAttributeValue(i);    if (reader.getAttributeNamespace(i) != null) {      throw ParseUtils.unexpectedAttribute(reader,i);    } else {      final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));switch (attribute) {case NAME:{          if (name != null) {            throw ParseUtils.duplicateAttribute(reader,attribute.getLocalName());          }          if (!names.add(value)) {            throw ParseUtils.duplicateNamedElement(reader,value);          }          name=value;          break;        }case PROFILE:{        if (profile != null) {          throw ParseUtils.duplicateAttribute(reader,attribute.getLocalName());        }        profile=value;        break;      }default :    throw ParseUtils.unexpectedAttribute(reader,i);}}}if (name == null) {throw ParseUtils.missingRequired(reader,Collections.singleton(Attribute.NAME));}if (profile == null) {throw ParseUtils.missingRequired(reader,Collections.singleton(Attribute.PROFILE));}final ModelNode group=new ModelNode();group.get(OP).set("add-server-group");group.get(OP_ADDR).set(address.clone().add("server-group"));group.get(REQUEST_PROPERTIES,PROFILE).set(profile);list.add(group);boolean sawDeployments=false;while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {switch (Namespace.forUri(reader.getNamespaceURI())) {case DOMAIN_1_0:{  final Element element=Element.forName(reader.getLocalName());switch (element) {case JVM:{      parseJvm(reader,address,list,new HashSet<String>());      break;    }case SOCKET_BINDING_GROUP:{    parseSocketBindingGroupRef(reader,address,list);    break;  }case DEPLOYMENTS:{  if (sawDeployments) {    throw new XMLStreamException(element.getLocalName() + " already defined",reader.getLocation());  }  sawDeployments=true;  parseDeployments(reader,address,list);  break;}case SYSTEM_PROPERTIES:{parseSystemProperties(reader,address,list);break;}default :throw ParseUtils.unexpectedElement(reader);}break;}default :throw ParseUtils.unexpectedElement(reader);}}} @TO@ WhileBody:{  String name=null;  String profile=null;  final int count=reader.getAttributeCount();  for (int i=0; i < count; i++) {    final String value=reader.getAttributeValue(i);    if (reader.getAttributeNamespace(i) != null) {      throw ParseUtils.unexpectedAttribute(reader,i);    } else {      final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));switch (attribute) {case NAME:{          if (name != null) {            throw ParseUtils.duplicateAttribute(reader,attribute.getLocalName());          }          if (!names.add(value)) {            throw ParseUtils.duplicateNamedElement(reader,value);          }          name=value;          break;        }case PROFILE:{        if (profile != null) {          throw ParseUtils.duplicateAttribute(reader,attribute.getLocalName());        }        profile=value;        break;      }default :    throw ParseUtils.unexpectedAttribute(reader,i);}}}if (name == null) {throw ParseUtils.missingRequired(reader,Collections.singleton(Attribute.NAME));}if (profile == null) {throw ParseUtils.missingRequired(reader,Collections.singleton(Attribute.PROFILE));}final ModelNode group=new ModelNode();group.get(OP).set(ADD);group.get(OP_ADDR).set(address.clone().add("server-group",name));group.get(REQUEST_PROPERTIES,PROFILE).set(profile);list.add(group);boolean sawDeployments=false;while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {switch (Namespace.forUri(reader.getNamespaceURI())) {case DOMAIN_1_0:{  final Element element=Element.forName(reader.getLocalName());switch (element) {case JVM:{      parseJvm(reader,address,list,new HashSet<String>());      break;    }case SOCKET_BINDING_GROUP:{    parseSocketBindingGroupRef(reader,address,list);    break;  }case DEPLOYMENTS:{  if (sawDeployments) {    throw new XMLStreamException(element.getLocalName() + " already defined",reader.getLocation());  }  sawDeployments=true;  parseDeployments(reader,address,list);  break;}case SYSTEM_PROPERTIES:{parseSystemProperties(reader,address,list);break;}default :throw ParseUtils.unexpectedElement(reader);}break;}default :throw ParseUtils.unexpectedElement(reader);}}} @AT@ 8212 @LENGTH@ 3982
---UPD ExpressionStatement@@MethodInvocation:group.get(OP).set("add-server-group") @TO@ MethodInvocation:group.get(OP).set(ADD) @AT@ 10128 @LENGTH@ 38
------UPD MethodInvocation@@group.get(OP).set("add-server-group") @TO@ group.get(OP).set(ADD) @AT@ 10128 @LENGTH@ 37
---------UPD SimpleName@@MethodName:set:["add-server-group"] @TO@ MethodName:set:[ADD] @AT@ 10142 @LENGTH@ 23
------------DEL StringLiteral@@"add-server-group" @AT@ 10146 @LENGTH@ 18
------------INS SimpleName@@ADD @TO@ SimpleName@@MethodName:set:["add-server-group"] @AT@ 10228 @LENGTH@ 3
---UPD ExpressionStatement@@MethodInvocation:group.get(OP_ADDR).set(address.clone().add("server-group")) @TO@ MethodInvocation:group.get(OP_ADDR).set(address.clone().add("server-group",name)) @AT@ 10179 @LENGTH@ 60
------UPD MethodInvocation@@group.get(OP_ADDR).set(address.clone().add("server-group")) @TO@ group.get(OP_ADDR).set(address.clone().add("server-group",name)) @AT@ 10179 @LENGTH@ 59
---------UPD SimpleName@@MethodName:set:[address.clone().add("server-group")] @TO@ MethodName:set:[address.clone().add("server-group",name)] @AT@ 10198 @LENGTH@ 40
------------UPD MethodInvocation@@address.clone().add("server-group") @TO@ address.clone().add("server-group",name) @AT@ 10202 @LENGTH@ 35
---------------UPD SimpleName@@MethodName:add:["server-group"] @TO@ MethodName:add:["server-group", name] @AT@ 10218 @LENGTH@ 19
------------------INS SimpleName@@name @TO@ SimpleName@@MethodName:add:["server-group"] @AT@ 10305 @LENGTH@ 4


INS MethodDeclaration@@public, String, MethodName:toString,  @TO@ TypeDeclaration@@[public, final]ModuleDependency, [Serializable] @AT@ 1465 @LENGTH@ 555
---INS Modifier@@public @TO@ MethodDeclaration@@public, String, MethodName:toString,  @AT@ 1465 @LENGTH@ 6
---INS SimpleType@@String @TO@ MethodDeclaration@@public, String, MethodName:toString,  @AT@ 1472 @LENGTH@ 6
---INS SimpleName@@MethodName:toString @TO@ MethodDeclaration@@public, String, MethodName:toString,  @AT@ 1479 @LENGTH@ 8
---INS VariableDeclarationStatement@@StringBuilder builder=new StringBuilder(); @TO@ MethodDeclaration@@public, String, MethodName:toString,  @AT@ 1500 @LENGTH@ 44
------INS SimpleType@@StringBuilder @TO@ VariableDeclarationStatement@@StringBuilder builder=new StringBuilder(); @AT@ 1500 @LENGTH@ 13
------INS VariableDeclarationFragment@@builder=new StringBuilder() @TO@ VariableDeclarationStatement@@StringBuilder builder=new StringBuilder(); @AT@ 1514 @LENGTH@ 29
---------INS SimpleName@@builder @TO@ VariableDeclarationFragment@@builder=new StringBuilder() @AT@ 1514 @LENGTH@ 7
---------INS ClassInstanceCreation@@StringBuilder[] @TO@ VariableDeclarationFragment@@builder=new StringBuilder() @AT@ 1524 @LENGTH@ 19
------------INS New@@new @TO@ ClassInstanceCreation@@StringBuilder[] @AT@ 1524 @LENGTH@ 3
------------INS SimpleType@@StringBuilder @TO@ ClassInstanceCreation@@StringBuilder[] @AT@ 1528 @LENGTH@ 13
---INS ExpressionStatement@@MethodInvocation:builder.append("ModuleDependency [") @TO@ MethodDeclaration@@public, String, MethodName:toString,  @AT@ 1553 @LENGTH@ 37
------INS MethodInvocation@@builder.append("ModuleDependency [") @TO@ ExpressionStatement@@MethodInvocation:builder.append("ModuleDependency [") @AT@ 1553 @LENGTH@ 36
---------INS SimpleName@@Name:builder @TO@ MethodInvocation@@builder.append("ModuleDependency [") @AT@ 1553 @LENGTH@ 7
---------INS SimpleName@@MethodName:append:["ModuleDependency ["] @TO@ MethodInvocation@@builder.append("ModuleDependency [") @AT@ 1561 @LENGTH@ 28
------------INS StringLiteral@@"ModuleDependency [" @TO@ SimpleName@@MethodName:append:["ModuleDependency ["] @AT@ 1568 @LENGTH@ 20
---INS IfStatement@@if (identifier != null) builder.append("identifier=").append(identifier).append(", "); @TO@ MethodDeclaration@@public, String, MethodName:toString,  @AT@ 1599 @LENGTH@ 98
------INS InfixExpression@@identifier != null @TO@ IfStatement@@if (identifier != null) builder.append("identifier=").append(identifier).append(", "); @AT@ 1603 @LENGTH@ 18
---------INS SimpleName@@identifier @TO@ InfixExpression@@identifier != null @AT@ 1603 @LENGTH@ 10
---------INS Operator@@!= @TO@ InfixExpression@@identifier != null @AT@ 1613 @LENGTH@ 2
---------INS NullLiteral@@null @TO@ InfixExpression@@identifier != null @AT@ 1617 @LENGTH@ 4
------INS Block@@ThenBody:builder.append("identifier=").append(identifier).append(", "); @TO@ IfStatement@@if (identifier != null) builder.append("identifier=").append(identifier).append(", "); @AT@ 1635 @LENGTH@ 62
---------INS ExpressionStatement@@MethodInvocation:builder.append("identifier=").append(identifier).append(", ") @TO@ Block@@ThenBody:builder.append("identifier=").append(identifier).append(", "); @AT@ 1635 @LENGTH@ 62
------------INS MethodInvocation@@builder.append("identifier=").append(identifier).append(", ") @TO@ ExpressionStatement@@MethodInvocation:builder.append("identifier=").append(identifier).append(", ") @AT@ 1635 @LENGTH@ 61
---------------INS MethodInvocation@@MethodName:append:[identifier] @TO@ MethodInvocation@@builder.append("identifier=").append(identifier).append(", ") @AT@ 1635 @LENGTH@ 48
------------------INS SimpleName@@identifier @TO@ MethodInvocation@@MethodName:append:[identifier] @AT@ 1672 @LENGTH@ 10
---------------INS MethodInvocation@@MethodName:append:["identifier="] @TO@ MethodInvocation@@builder.append("identifier=").append(identifier).append(", ") @AT@ 1635 @LENGTH@ 29
------------------INS StringLiteral@@"identifier=" @TO@ MethodInvocation@@MethodName:append:["identifier="] @AT@ 1650 @LENGTH@ 13
---------------INS SimpleName@@Name:builder @TO@ MethodInvocation@@builder.append("identifier=").append(identifier).append(", ") @AT@ 1635 @LENGTH@ 7
---------------INS SimpleName@@MethodName:append:[", "] @TO@ MethodInvocation@@builder.append("identifier=").append(identifier).append(", ") @AT@ 1684 @LENGTH@ 12
------------------INS StringLiteral@@", " @TO@ SimpleName@@MethodName:append:[", "] @AT@ 1691 @LENGTH@ 4
---INS IfStatement@@if (moduleLoader != null) builder.append("moduleLoader=").append(moduleLoader).append(", "); @TO@ MethodDeclaration@@public, String, MethodName:toString,  @AT@ 1706 @LENGTH@ 104
------INS InfixExpression@@moduleLoader != null @TO@ IfStatement@@if (moduleLoader != null) builder.append("moduleLoader=").append(moduleLoader).append(", "); @AT@ 1710 @LENGTH@ 20
---------INS SimpleName@@moduleLoader @TO@ InfixExpression@@moduleLoader != null @AT@ 1710 @LENGTH@ 12
---------INS Operator@@!= @TO@ InfixExpression@@moduleLoader != null @AT@ 1722 @LENGTH@ 2
---------INS NullLiteral@@null @TO@ InfixExpression@@moduleLoader != null @AT@ 1726 @LENGTH@ 4
------INS Block@@ThenBody:builder.append("moduleLoader=").append(moduleLoader).append(", "); @TO@ IfStatement@@if (moduleLoader != null) builder.append("moduleLoader=").append(moduleLoader).append(", "); @AT@ 1744 @LENGTH@ 66
---------INS ExpressionStatement@@MethodInvocation:builder.append("moduleLoader=").append(moduleLoader).append(", ") @TO@ Block@@ThenBody:builder.append("moduleLoader=").append(moduleLoader).append(", "); @AT@ 1744 @LENGTH@ 66
------------INS MethodInvocation@@builder.append("moduleLoader=").append(moduleLoader).append(", ") @TO@ ExpressionStatement@@MethodInvocation:builder.append("moduleLoader=").append(moduleLoader).append(", ") @AT@ 1744 @LENGTH@ 65
---------------INS MethodInvocation@@MethodName:append:[moduleLoader] @TO@ MethodInvocation@@builder.append("moduleLoader=").append(moduleLoader).append(", ") @AT@ 1744 @LENGTH@ 52
------------------INS SimpleName@@moduleLoader @TO@ MethodInvocation@@MethodName:append:[moduleLoader] @AT@ 1783 @LENGTH@ 12
---------------INS MethodInvocation@@MethodName:append:["moduleLoader="] @TO@ MethodInvocation@@builder.append("moduleLoader=").append(moduleLoader).append(", ") @AT@ 1744 @LENGTH@ 31
------------------INS StringLiteral@@"moduleLoader=" @TO@ MethodInvocation@@MethodName:append:["moduleLoader="] @AT@ 1759 @LENGTH@ 15
---------------INS SimpleName@@Name:builder @TO@ MethodInvocation@@builder.append("moduleLoader=").append(moduleLoader).append(", ") @AT@ 1744 @LENGTH@ 7
---------------INS SimpleName@@MethodName:append:[", "] @TO@ MethodInvocation@@builder.append("moduleLoader=").append(moduleLoader).append(", ") @AT@ 1797 @LENGTH@ 12
------------------INS StringLiteral@@", " @TO@ SimpleName@@MethodName:append:[", "] @AT@ 1804 @LENGTH@ 4
---INS ExpressionStatement@@MethodInvocation:builder.append("export=").append(export).append(", optional=").append(optional).append(", importServices=").append(importServices).append("]") @TO@ MethodDeclaration@@public, String, MethodName:toString,  @AT@ 1819 @LENGTH@ 160
------INS MethodInvocation@@builder.append("export=").append(export).append(", optional=").append(optional).append(", importServices=").append(importServices).append("]") @TO@ ExpressionStatement@@MethodInvocation:builder.append("export=").append(export).append(", optional=").append(optional).append(", importServices=").append(importServices).append("]") @AT@ 1819 @LENGTH@ 159
---------INS MethodInvocation@@MethodName:append:[importServices] @TO@ MethodInvocation@@builder.append("export=").append(export).append(", optional=").append(optional).append(", importServices=").append(importServices).append("]") @AT@ 1819 @LENGTH@ 147
------------INS SimpleName@@importServices @TO@ MethodInvocation@@MethodName:append:[importServices] @AT@ 1951 @LENGTH@ 14
---------INS MethodInvocation@@MethodName:append:[", importServices="] @TO@ MethodInvocation@@builder.append("export=").append(export).append(", optional=").append(optional).append(", importServices=").append(importServices).append("]") @AT@ 1819 @LENGTH@ 107
------------INS StringLiteral@@", importServices=" @TO@ MethodInvocation@@MethodName:append:[", importServices="] @AT@ 1906 @LENGTH@ 19
---------INS MethodInvocation@@MethodName:append:[optional] @TO@ MethodInvocation@@builder.append("export=").append(export).append(", optional=").append(optional).append(", importServices=").append(importServices).append("]") @AT@ 1819 @LENGTH@ 79
------------INS SimpleName@@optional @TO@ MethodInvocation@@MethodName:append:[optional] @AT@ 1889 @LENGTH@ 8
---------INS MethodInvocation@@MethodName:append:[", optional="] @TO@ MethodInvocation@@builder.append("export=").append(export).append(", optional=").append(optional).append(", importServices=").append(importServices).append("]") @AT@ 1819 @LENGTH@ 62
------------INS StringLiteral@@", optional=" @TO@ MethodInvocation@@MethodName:append:[", optional="] @AT@ 1867 @LENGTH@ 13
---------INS MethodInvocation@@MethodName:append:[export] @TO@ MethodInvocation@@builder.append("export=").append(export).append(", optional=").append(optional).append(", importServices=").append(importServices).append("]") @AT@ 1819 @LENGTH@ 40
------------INS SimpleName@@export @TO@ MethodInvocation@@MethodName:append:[export] @AT@ 1852 @LENGTH@ 6
---------INS MethodInvocation@@MethodName:append:["export="] @TO@ MethodInvocation@@builder.append("export=").append(export).append(", optional=").append(optional).append(", importServices=").append(importServices).append("]") @AT@ 1819 @LENGTH@ 25
------------INS StringLiteral@@"export=" @TO@ MethodInvocation@@MethodName:append:["export="] @AT@ 1834 @LENGTH@ 9
---------INS SimpleName@@Name:builder @TO@ MethodInvocation@@builder.append("export=").append(export).append(", optional=").append(optional).append(", importServices=").append(importServices).append("]") @AT@ 1819 @LENGTH@ 7
---------INS SimpleName@@MethodName:append:["]"] @TO@ MethodInvocation@@builder.append("export=").append(export).append(", optional=").append(optional).append(", importServices=").append(importServices).append("]") @AT@ 1967 @LENGTH@ 11
------------INS StringLiteral@@"]" @TO@ SimpleName@@MethodName:append:["]"] @AT@ 1974 @LENGTH@ 3
---INS ReturnStatement@@MethodInvocation:builder.toString() @TO@ MethodDeclaration@@public, String, MethodName:toString,  @AT@ 1988 @LENGTH@ 26
------INS MethodInvocation@@builder.toString() @TO@ ReturnStatement@@MethodInvocation:builder.toString() @AT@ 1995 @LENGTH@ 18
---------INS SimpleName@@Name:builder @TO@ MethodInvocation@@builder.toString() @AT@ 1995 @LENGTH@ 7
---------INS SimpleName@@MethodName:toString:[] @TO@ MethodInvocation@@builder.toString() @AT@ 2003 @LENGTH@ 10


INS IfStatement@@if (properties.size() > 0) {  writer.writeStartElement(element.getLocalName());  for (  Property prop : properties) {    writer.writeStartElement(Element.PROPERTY.getLocalName());    writeAttribute(writer,Attribute.NAME,prop.getName());    writeAttribute(writer,Attribute.VALUE,prop.getValue().asString());    writer.writeEndElement();  }  writer.writeEndElement();} @TO@ MethodDeclaration@@protected, void, MethodName:writeProperties, final XMLExtendedStreamWriter writer, final ModelNode modelNode, Element element, XMLStreamException,  @AT@ 63310 @LENGTH@ 473
---INS InfixExpression@@properties.size() > 0 @TO@ IfStatement@@if (properties.size() > 0) {  writer.writeStartElement(element.getLocalName());  for (  Property prop : properties) {    writer.writeStartElement(Element.PROPERTY.getLocalName());    writeAttribute(writer,Attribute.NAME,prop.getName());    writeAttribute(writer,Attribute.VALUE,prop.getValue().asString());    writer.writeEndElement();  }  writer.writeEndElement();} @AT@ 63314 @LENGTH@ 21
------INS MethodInvocation@@properties.size() @TO@ InfixExpression@@properties.size() > 0 @AT@ 63314 @LENGTH@ 17
---------INS SimpleName@@Name:properties @TO@ MethodInvocation@@properties.size() @AT@ 63314 @LENGTH@ 10
---------INS SimpleName@@MethodName:size:[] @TO@ MethodInvocation@@properties.size() @AT@ 63325 @LENGTH@ 6
------INS Operator@@> @TO@ InfixExpression@@properties.size() > 0 @AT@ 63331 @LENGTH@ 1
------INS NumberLiteral@@0 @TO@ InfixExpression@@properties.size() > 0 @AT@ 63334 @LENGTH@ 1
---INS Block@@ThenBody:{  writer.writeStartElement(element.getLocalName());  for (  Property prop : properties) {    writer.writeStartElement(Element.PROPERTY.getLocalName());    writeAttribute(writer,Attribute.NAME,prop.getName());    writeAttribute(writer,Attribute.VALUE,prop.getValue().asString());    writer.writeEndElement();  }  writer.writeEndElement();} @TO@ IfStatement@@if (properties.size() > 0) {  writer.writeStartElement(element.getLocalName());  for (  Property prop : properties) {    writer.writeStartElement(Element.PROPERTY.getLocalName());    writeAttribute(writer,Attribute.NAME,prop.getName());    writeAttribute(writer,Attribute.VALUE,prop.getValue().asString());    writer.writeEndElement();  }  writer.writeEndElement();} @AT@ 63337 @LENGTH@ 446
------MOV ExpressionStatement@@MethodInvocation:writer.writeStartElement(element.getLocalName()) @TO@ Block@@ThenBody:{  writer.writeStartElement(element.getLocalName());  for (  Property prop : properties) {    writer.writeStartElement(Element.PROPERTY.getLocalName());    writeAttribute(writer,Attribute.NAME,prop.getName());    writeAttribute(writer,Attribute.VALUE,prop.getValue().asString());    writer.writeEndElement();  }  writer.writeEndElement();} @AT@ 63240 @LENGTH@ 49
------MOV EnhancedForStatement@@for (Property prop : properties) {  writer.writeStartElement(Element.PROPERTY.getLocalName());  writeAttribute(writer,Attribute.NAME,prop.getName());  writeAttribute(writer,Attribute.VALUE,prop.getValue().asString());  writer.writeEndElement();} @TO@ Block@@ThenBody:{  writer.writeStartElement(element.getLocalName());  for (  Property prop : properties) {    writer.writeStartElement(Element.PROPERTY.getLocalName());    writeAttribute(writer,Attribute.NAME,prop.getName());    writeAttribute(writer,Attribute.VALUE,prop.getValue().asString());    writer.writeEndElement();  }  writer.writeEndElement();} @AT@ 63368 @LENGTH@ 302
------MOV ExpressionStatement@@MethodInvocation:writer.writeEndElement() @TO@ Block@@ThenBody:{  writer.writeStartElement(element.getLocalName());  for (  Property prop : properties) {    writer.writeStartElement(Element.PROPERTY.getLocalName());    writeAttribute(writer,Attribute.NAME,prop.getName());    writeAttribute(writer,Attribute.VALUE,prop.getValue().asString());    writer.writeEndElement();  }  writer.writeEndElement();} @AT@ 63679 @LENGTH@ 25


INS MethodDeclaration@@boolean, MethodName:hasAttachment, AttachmentKey<?> key,  @TO@ TypeDeclaration@@[public]Attachable,  @AT@ 1320 @LENGTH@ 36
---INS PrimitiveType@@boolean @TO@ MethodDeclaration@@boolean, MethodName:hasAttachment, AttachmentKey<?> key,  @AT@ 1312 @LENGTH@ 7
---INS SimpleName@@MethodName:hasAttachment @TO@ MethodDeclaration@@boolean, MethodName:hasAttachment, AttachmentKey<?> key,  @AT@ 1320 @LENGTH@ 13
---INS SingleVariableDeclaration@@AttachmentKey<?> key @TO@ MethodDeclaration@@boolean, MethodName:hasAttachment, AttachmentKey<?> key,  @AT@ 1334 @LENGTH@ 20
------INS ParameterizedType@@AttachmentKey<?> @TO@ SingleVariableDeclaration@@AttachmentKey<?> key @AT@ 1334 @LENGTH@ 16
---------INS SimpleType@@AttachmentKey @TO@ ParameterizedType@@AttachmentKey<?> @AT@ 1334 @LENGTH@ 13
---------INS WildcardType@@? @TO@ ParameterizedType@@AttachmentKey<?> @AT@ 1348 @LENGTH@ 1
------INS SimpleName@@key @TO@ SingleVariableDeclaration@@AttachmentKey<?> key @AT@ 1351 @LENGTH@ 3


INS ExpressionStatement@@MethodInvocation:Mailbox.clearAll() @TO@ MethodDeclaration@@public, void, MethodName:testSendAndRecieveMailWithAttachments, Exception,  @AT@ 1542 @LENGTH@ 19
---INS MethodInvocation@@Mailbox.clearAll() @TO@ ExpressionStatement@@MethodInvocation:Mailbox.clearAll() @AT@ 1542 @LENGTH@ 18
------INS SimpleName@@Name:Mailbox @TO@ MethodInvocation@@Mailbox.clearAll() @AT@ 1542 @LENGTH@ 7
------INS SimpleName@@MethodName:clearAll:[] @TO@ MethodInvocation@@Mailbox.clearAll() @AT@ 1550 @LENGTH@ 10


UPD MethodDeclaration@@public, boolean, MethodName:canAppearNext, CommandContext ctx,  @TO@ public, boolean, MethodName:canAppearNext, CommandContext ctx, CommandFormatException,  @AT@ 2237 @LENGTH@ 207
---INS SimpleType@@CommandFormatException @TO@ MethodDeclaration@@public, boolean, MethodName:canAppearNext, CommandContext ctx,  @AT@ 2293 @LENGTH@ 22


UPD ExpressionStatement@@MethodInvocation:INDEX_FACTORY.setDeferredEncoding(true) @TO@ MethodInvocation:INDEX_FACTORY.setDeferredEncoding(false) @AT@ 2572 @LENGTH@ 40
---UPD MethodInvocation@@INDEX_FACTORY.setDeferredEncoding(true) @TO@ INDEX_FACTORY.setDeferredEncoding(false) @AT@ 2572 @LENGTH@ 39
------UPD SimpleName@@MethodName:setDeferredEncoding:[true] @TO@ MethodName:setDeferredEncoding:[false] @AT@ 2586 @LENGTH@ 25
---------UPD BooleanLiteral@@true @TO@ false @AT@ 2606 @LENGTH@ 4


INS MethodDeclaration@@protected, SessionType, MethodName:processSessionType, String sessionType,  @TO@ TypeDeclaration@@[public]SessionBean31MetaDataParser, SessionBean30MetaDataParser<SessionBean31MetaData> @AT@ 6524 @LENGTH@ 221
---INS Modifier@@protected @TO@ MethodDeclaration@@protected, SessionType, MethodName:processSessionType, String sessionType,  @AT@ 6524 @LENGTH@ 9
---INS SimpleType@@SessionType @TO@ MethodDeclaration@@protected, SessionType, MethodName:processSessionType, String sessionType,  @AT@ 6534 @LENGTH@ 11
---INS SimpleName@@MethodName:processSessionType @TO@ MethodDeclaration@@protected, SessionType, MethodName:processSessionType, String sessionType,  @AT@ 6546 @LENGTH@ 18
---INS SingleVariableDeclaration@@String sessionType @TO@ MethodDeclaration@@protected, SessionType, MethodName:processSessionType, String sessionType,  @AT@ 6565 @LENGTH@ 18
------INS SimpleType@@String @TO@ SingleVariableDeclaration@@String sessionType @AT@ 6565 @LENGTH@ 6
------INS SimpleName@@sessionType @TO@ SingleVariableDeclaration@@String sessionType @AT@ 6572 @LENGTH@ 11
---INS IfStatement@@if (sessionType.equals("Singleton")) {  return SessionType.Singleton;} @TO@ MethodDeclaration@@protected, SessionType, MethodName:processSessionType, String sessionType,  @AT@ 6596 @LENGTH@ 91
------MOV MethodInvocation@@sessionType.equals("Singleton") @TO@ IfStatement@@if (sessionType.equals("Singleton")) {  return SessionType.Singleton;} @AT@ 2738 @LENGTH@ 31
------INS Block@@ThenBody:{  return SessionType.Singleton;} @TO@ IfStatement@@if (sessionType.equals("Singleton")) {  return SessionType.Singleton;} @AT@ 6639 @LENGTH@ 48
---------INS ReturnStatement@@QualifiedName:SessionType.Singleton @TO@ Block@@ThenBody:{  return SessionType.Singleton;} @AT@ 6650 @LENGTH@ 29
------------INS QualifiedName@@SessionType.Singleton @TO@ ReturnStatement@@QualifiedName:SessionType.Singleton @AT@ 6657 @LENGTH@ 21
---------------INS SimpleName@@SessionType @TO@ QualifiedName@@SessionType.Singleton @AT@ 6657 @LENGTH@ 11
---------------INS SimpleName@@Singleton @TO@ QualifiedName@@SessionType.Singleton @AT@ 6669 @LENGTH@ 9
---INS ReturnStatement@@SuperMethodInvocation:super.processSessionType(sessionType) @TO@ MethodDeclaration@@protected, SessionType, MethodName:processSessionType, String sessionType,  @AT@ 6695 @LENGTH@ 45
------INS SuperMethodInvocation@@super.processSessionType(sessionType) @TO@ ReturnStatement@@SuperMethodInvocation:super.processSessionType(sessionType) @AT@ 6702 @LENGTH@ 37
---------INS SimpleName@@MethodName:processSessionType:[sessionType] @TO@ SuperMethodInvocation@@super.processSessionType(sessionType) @AT@ 6708 @LENGTH@ 18
---------INS SimpleName@@sessionType @TO@ SuperMethodInvocation@@super.processSessionType(sessionType) @AT@ 6727 @LENGTH@ 11


UPD ThrowStatement@@ClassInstanceCreation:new IllegalStateException("Failed on iteration: " + i,t) @TO@ ClassInstanceCreation:new IllegalStateException("Failed on iteration: " + i + " of "+ repeats+ " (started at 0)",t) @AT@ 3022 @LENGTH@ 64
---UPD ClassInstanceCreation@@IllegalStateException["Failed on iteration: " + i, t] @TO@ IllegalStateException["Failed on iteration: " + i + " of "+ repeats+ " (started at 0)", t] @AT@ 3028 @LENGTH@ 57
------UPD InfixExpression@@"Failed on iteration: " + i @TO@ "Failed on iteration: " + i + " of "+ repeats+ " (started at 0)" @AT@ 3054 @LENGTH@ 27
---------INS StringLiteral@@" of " @TO@ InfixExpression@@"Failed on iteration: " + i @AT@ 3084 @LENGTH@ 6
---------INS SimpleName@@repeats @TO@ InfixExpression@@"Failed on iteration: " + i @AT@ 3093 @LENGTH@ 7
---------INS StringLiteral@@" (started at 0)" @TO@ InfixExpression@@"Failed on iteration: " + i @AT@ 3103 @LENGTH@ 17


UPD Block@@ThenBody:{  ModelNode datasourcesNode=subsystem.get(DATASOURCES);  for (  DataSource ds : dataSources.getDataSource()) {    ModelNode dsModel=new ModelNode();    for (    Entry<String,String> entry : ds.getConnectionProperties().entrySet()) {      dsModel.get(CONNECTION_PROPERTIES,entry.getKey()).set(entry.getValue());    }    setIfNotNull(dsModel,CONNECTION_URL,ds.getConnectionUrl());    setIfNotNull(dsModel,DRIVER_CLASS,ds.getDriverClass());    setIfNotNull(dsModel,JNDINAME,ds.getJndiName());    setIfNotNull(dsModel,MODULE,ds.getModule());    setIfNotNull(dsModel,NEW_CONNECTION_SQL,ds.getNewConnectionSql());    setIfNotNull(dsModel,POOLNAME,ds.getPoolName());    setIfNotNull(dsModel,URL_DELIMITER,ds.getUrlDelimiter());    setIfNotNull(dsModel,URL_SELECTOR_STRATEGY_CLASS_NAME,ds.getUrlSelectorStrategyClassName());    setIfNotNull(dsModel,USE_JAVA_CONTEXT,ds.isUseJavaContext());    setIfNotNull(dsModel,ENABLED,ds.isEnabled());    CommonPool pool=ds.getPool();    if (pool != null) {      setIfNotNull(dsModel,MAX_POOL_SIZE,pool.getMaxPoolSize());      setIfNotNull(dsModel,MIN_POOL_SIZE,pool.getMinPoolSize());      setIfNotNull(dsModel,POOL_PREFILL,pool.isPrefill());      setIfNotNull(dsModel,POOL_USE_STRICT_MIN,pool.isUseStrictMin());    }    DsSecurity security=ds.getSecurity();    if (security != null) {      setIfNotNull(dsModel,USERNAME,security.getUserName());      setIfNotNull(dsModel,PASSWORD,security.getPassword());      setIfNotNull(dsModel,SECURITY_DOMAIN,security.getSecurityDomain());    }    Statement statement=ds.getStatement();    if (statement != null) {      setIfNotNull(dsModel,PREPAREDSTATEMENTSCACHESIZE,statement.getPreparedStatementsCacheSize());      setIfNotNull(dsModel,SHAREPREPAREDSTATEMENTS,statement.isSharePreparedStatements());      if (statement.getTrackStatements() != null) {        setIfNotNull(dsModel,TRACKSTATEMENTS,statement.getTrackStatements().name());      }    }    TimeOut timeout=ds.getTimeOut();    if (timeout != null) {      setIfNotNull(dsModel,ALLOCATION_RETRY,timeout.getAllocationRetry());      setIfNotNull(dsModel,ALLOCATION_RETRY_WAIT_MILLIS,timeout.getAllocationRetryWaitMillis());      setIfNotNull(dsModel,BLOCKING_TIMEOUT_WAIT_MILLIS,timeout.getBlockingTimeoutMillis());      setIfNotNull(dsModel,IDLETIMEOUTMINUTES,timeout.getIdleTimeoutMinutes());      setIfNotNull(dsModel,QUERYTIMEOUT,timeout.getQueryTimeout());      setIfNotNull(dsModel,USETRYLOCK,timeout.getUseTryLock());      setIfNotNull(dsModel,SETTXQUERTTIMEOUT,timeout.isSetTxQueryTimeout());    }    if (ds.getTransactionIsolation() != null) {      setIfNotNull(dsModel,TRANSACTION_ISOLOATION,ds.getTransactionIsolation().name());    }    if (ds.isSpy()) {      setIfNotNull(dsModel,SPY,ds.isSpy());    }    Validation validation=ds.getValidation();    if (validation != null) {      setIfNotNull(dsModel,CHECKVALIDCONNECTIONSQL,validation.getCheckValidConnectionSql());      setIfNotNull(dsModel,EXCEPTIONSORTERCLASSNAME,EXCEPTIONSORTER_PROPERTIES,validation.getExceptionSorter());      setIfNotNull(dsModel,STALECONNECTIONCHECKERCLASSNAME,STALECONNECTIONCHECKER_PROPERTIES,validation.getStaleConnectionChecker());      setIfNotNull(dsModel,VALIDCONNECTIONCHECKERCLASSNAME,VALIDCONNECTIONCHECKER_PROPERTIES,validation.getValidConnectionChecker());      setIfNotNull(dsModel,BACKGROUNDVALIDATIONMINUTES,validation.getBackgroundValidationMinutes());      setIfNotNull(dsModel,BACKGROUNDVALIDATION,validation.isBackgroundValidation());      setIfNotNull(dsModel,USE_FAST_FAIL,validation.isUseFastFail());      setIfNotNull(dsModel,VALIDATEONMATCH,validation.isValidateOnMatch());    }    datasourcesNode.add(dsModel);  }  ModelNode XAdatasourcesNode=subsystem.get(DATASOURCES);  for (  XaDataSource xads : dataSources.getXaDataSource()) {    ModelNode xadsModel=new ModelNode();    for (    Entry<String,String> entry : xads.getXaDataSourceProperty().entrySet()) {      xadsModel.get(XADATASOURCEPROPERTIES,entry.getKey()).set(entry.getValue());    }    setIfNotNull(xadsModel,XADATASOURCECLASS,xads.getXaDataSourceClass());    setIfNotNull(xadsModel,JNDINAME,xads.getJndiName());    setIfNotNull(xadsModel,MODULE,xads.getModule());    setIfNotNull(xadsModel,NEW_CONNECTION_SQL,xads.getNewConnectionSql());    setIfNotNull(xadsModel,POOLNAME,xads.getPoolName());    setIfNotNull(xadsModel,URL_DELIMITER,xads.getUrlDelimiter());    setIfNotNull(xadsModel,URL_SELECTOR_STRATEGY_CLASS_NAME,xads.getUrlSelectorStrategyClassName());    setIfNotNull(xadsModel,USE_JAVA_CONTEXT,xads.isUseJavaContext());    setIfNotNull(xadsModel,ENABLED,xads.isEnabled());    CommonXaPool pool=xads.getXaPool();    if (pool != null) {      setIfNotNull(xadsModel,MAX_POOL_SIZE,pool.getMaxPoolSize());      setIfNotNull(xadsModel,MIN_POOL_SIZE,pool.getMinPoolSize());      setIfNotNull(xadsModel,POOL_PREFILL,pool.isPrefill());      setIfNotNull(xadsModel,POOL_USE_STRICT_MIN,pool.isUseStrictMin());      setIfNotNull(xadsModel,INTERLIVING,pool.isInterleaving());      setIfNotNull(xadsModel,NOTXSEPARATEPOOL,pool.isNoTxSeparatePool());      setIfNotNull(xadsModel,PAD_XID,pool.isPadXid());      setIfNotNull(xadsModel,SAME_RM_OVERRIDE,pool.isSameRmOverride());      setIfNotNull(xadsModel,WRAP_XA_DATASOURCE,pool.isWrapXaDataSource());    }    DsSecurity security=xads.getSecurity();    if (security != null) {      setIfNotNull(xadsModel,USERNAME,security.getUserName());      setIfNotNull(xadsModel,PASSWORD,security.getPassword());      setIfNotNull(xadsModel,SECURITY_DOMAIN,security.getSecurityDomain());    }    Statement statement=xads.getStatement();    if (statement != null) {      setIfNotNull(xadsModel,PREPAREDSTATEMENTSCACHESIZE,statement.getPreparedStatementsCacheSize());      setIfNotNull(xadsModel,SHAREPREPAREDSTATEMENTS,statement.isSharePreparedStatements());      if (statement.getTrackStatements() != null) {        setIfNotNull(xadsModel,TRACKSTATEMENTS,statement.getTrackStatements().name());      }    }    TimeOut timeout=xads.getTimeOut();    if (timeout != null) {      setIfNotNull(xadsModel,ALLOCATION_RETRY,timeout.getAllocationRetry());      setIfNotNull(xadsModel,ALLOCATION_RETRY_WAIT_MILLIS,timeout.getAllocationRetryWaitMillis());      setIfNotNull(xadsModel,BLOCKING_TIMEOUT_WAIT_MILLIS,timeout.getBlockingTimeoutMillis());      setIfNotNull(xadsModel,IDLETIMEOUTMINUTES,timeout.getIdleTimeoutMinutes());      setIfNotNull(xadsModel,QUERYTIMEOUT,timeout.getQueryTimeout());      setIfNotNull(xadsModel,USETRYLOCK,timeout.getUseTryLock());      setIfNotNull(xadsModel,SETTXQUERTTIMEOUT,timeout.isSetTxQueryTimeout());      setIfNotNull(xadsModel,XA_RESOURCE_TIMEOUT,timeout.getXaResourceTimeout());    }    if (xads.getTransactionIsolation() != null) {      setIfNotNull(xadsModel,TRANSACTION_ISOLOATION,xads.getTransactionIsolation().name());    }    if (xads.isSpy()) {      setIfNotNull(xadsModel,SPY,xads.isSpy());    }    Validation validation=xads.getValidation();    if (xads.getValidation() != null) {      setIfNotNull(xadsModel,CHECKVALIDCONNECTIONSQL,validation.getCheckValidConnectionSql());      setIfNotNull(xadsModel,EXCEPTIONSORTERCLASSNAME,EXCEPTIONSORTER_PROPERTIES,validation.getExceptionSorter());      setIfNotNull(xadsModel,STALECONNECTIONCHECKERCLASSNAME,STALECONNECTIONCHECKER_PROPERTIES,validation.getStaleConnectionChecker());      setIfNotNull(xadsModel,VALIDCONNECTIONCHECKERCLASSNAME,VALIDCONNECTIONCHECKER_PROPERTIES,validation.getValidConnectionChecker());      setIfNotNull(xadsModel,BACKGROUNDVALIDATIONMINUTES,validation.getBackgroundValidationMinutes());      setIfNotNull(xadsModel,BACKGROUNDVALIDATION,validation.isBackgroundValidation());      setIfNotNull(xadsModel,USE_FAST_FAIL,validation.isUseFastFail());      setIfNotNull(xadsModel,VALIDATEONMATCH,validation.isValidateOnMatch());    }    XAdatasourcesNode.add(xadsModel);  }} @TO@ ThenBody:{  ModelNode datasourcesNode=subsystem.get(DATASOURCES);  for (  DataSource ds : dataSources.getDataSource()) {    ModelNode dsModel=new ModelNode();    for (    Entry<String,String> entry : ds.getConnectionProperties().entrySet()) {      dsModel.get(CONNECTION_PROPERTIES,entry.getKey()).set(entry.getValue());    }    setIfNotNull(dsModel,CONNECTION_URL,ds.getConnectionUrl());    setIfNotNull(dsModel,DRIVER_CLASS,ds.getDriverClass());    setIfNotNull(dsModel,JNDINAME,ds.getJndiName());    setIfNotNull(dsModel,MODULE,ds.getModule());    setIfNotNull(dsModel,NEW_CONNECTION_SQL,ds.getNewConnectionSql());    setIfNotNull(dsModel,POOLNAME,ds.getPoolName());    setIfNotNull(dsModel,URL_DELIMITER,ds.getUrlDelimiter());    setIfNotNull(dsModel,URL_SELECTOR_STRATEGY_CLASS_NAME,ds.getUrlSelectorStrategyClassName());    setIfNotNull(dsModel,USE_JAVA_CONTEXT,ds.isUseJavaContext());    setIfNotNull(dsModel,ENABLED,ds.isEnabled());    CommonPool pool=ds.getPool();    if (pool != null) {      setIfNotNull(dsModel,MAX_POOL_SIZE,pool.getMaxPoolSize());      setIfNotNull(dsModel,MIN_POOL_SIZE,pool.getMinPoolSize());      setIfNotNull(dsModel,POOL_PREFILL,pool.isPrefill());      setIfNotNull(dsModel,POOL_USE_STRICT_MIN,pool.isUseStrictMin());    }    DsSecurity security=ds.getSecurity();    if (security != null) {      setIfNotNull(dsModel,USERNAME,security.getUserName());      setIfNotNull(dsModel,PASSWORD,security.getPassword());      setIfNotNull(dsModel,SECURITY_DOMAIN,security.getSecurityDomain());    }    Statement statement=ds.getStatement();    if (statement != null) {      setIfNotNull(dsModel,PREPAREDSTATEMENTSCACHESIZE,statement.getPreparedStatementsCacheSize());      setIfNotNull(dsModel,SHAREPREPAREDSTATEMENTS,statement.isSharePreparedStatements());      if (statement.getTrackStatements() != null) {        setIfNotNull(dsModel,TRACKSTATEMENTS,statement.getTrackStatements().name());      }    }    TimeOut timeout=ds.getTimeOut();    if (timeout != null) {      setIfNotNull(dsModel,ALLOCATION_RETRY,timeout.getAllocationRetry());      setIfNotNull(dsModel,ALLOCATION_RETRY_WAIT_MILLIS,timeout.getAllocationRetryWaitMillis());      setIfNotNull(dsModel,BLOCKING_TIMEOUT_WAIT_MILLIS,timeout.getBlockingTimeoutMillis());      setIfNotNull(dsModel,IDLETIMEOUTMINUTES,timeout.getIdleTimeoutMinutes());      setIfNotNull(dsModel,QUERYTIMEOUT,timeout.getQueryTimeout());      setIfNotNull(dsModel,USETRYLOCK,timeout.getUseTryLock());      setIfNotNull(dsModel,SETTXQUERYTIMEOUT,timeout.isSetTxQueryTimeout());    }    if (ds.getTransactionIsolation() != null) {      setIfNotNull(dsModel,TRANSACTION_ISOLOATION,ds.getTransactionIsolation().name());    }    if (ds.isSpy()) {      setIfNotNull(dsModel,SPY,ds.isSpy());    }    Validation validation=ds.getValidation();    if (validation != null) {      setIfNotNull(dsModel,CHECKVALIDCONNECTIONSQL,validation.getCheckValidConnectionSql());      setIfNotNull(dsModel,EXCEPTIONSORTERCLASSNAME,EXCEPTIONSORTER_PROPERTIES,validation.getExceptionSorter());      setIfNotNull(dsModel,STALECONNECTIONCHECKERCLASSNAME,STALECONNECTIONCHECKER_PROPERTIES,validation.getStaleConnectionChecker());      setIfNotNull(dsModel,VALIDCONNECTIONCHECKERCLASSNAME,VALIDCONNECTIONCHECKER_PROPERTIES,validation.getValidConnectionChecker());      setIfNotNull(dsModel,BACKGROUNDVALIDATIONMINUTES,validation.getBackgroundValidationMinutes());      setIfNotNull(dsModel,BACKGROUNDVALIDATION,validation.isBackgroundValidation());      setIfNotNull(dsModel,USE_FAST_FAIL,validation.isUseFastFail());      setIfNotNull(dsModel,VALIDATEONMATCH,validation.isValidateOnMatch());    }    datasourcesNode.add(dsModel);  }  ModelNode XAdatasourcesNode=subsystem.get(DATASOURCES);  for (  XaDataSource xads : dataSources.getXaDataSource()) {    ModelNode xadsModel=new ModelNode();    for (    Entry<String,String> entry : xads.getXaDataSourceProperty().entrySet()) {      xadsModel.get(XADATASOURCEPROPERTIES,entry.getKey()).set(entry.getValue());    }    setIfNotNull(xadsModel,XADATASOURCECLASS,xads.getXaDataSourceClass());    setIfNotNull(xadsModel,JNDINAME,xads.getJndiName());    setIfNotNull(xadsModel,MODULE,xads.getModule());    setIfNotNull(xadsModel,NEW_CONNECTION_SQL,xads.getNewConnectionSql());    setIfNotNull(xadsModel,POOLNAME,xads.getPoolName());    setIfNotNull(xadsModel,URL_DELIMITER,xads.getUrlDelimiter());    setIfNotNull(xadsModel,URL_SELECTOR_STRATEGY_CLASS_NAME,xads.getUrlSelectorStrategyClassName());    setIfNotNull(xadsModel,USE_JAVA_CONTEXT,xads.isUseJavaContext());    setIfNotNull(xadsModel,ENABLED,xads.isEnabled());    CommonXaPool pool=xads.getXaPool();    if (pool != null) {      setIfNotNull(xadsModel,MAX_POOL_SIZE,pool.getMaxPoolSize());      setIfNotNull(xadsModel,MIN_POOL_SIZE,pool.getMinPoolSize());      setIfNotNull(xadsModel,POOL_PREFILL,pool.isPrefill());      setIfNotNull(xadsModel,POOL_USE_STRICT_MIN,pool.isUseStrictMin());      setIfNotNull(xadsModel,INTERLIVING,pool.isInterleaving());      setIfNotNull(xadsModel,NOTXSEPARATEPOOL,pool.isNoTxSeparatePool());      setIfNotNull(xadsModel,PAD_XID,pool.isPadXid());      setIfNotNull(xadsModel,SAME_RM_OVERRIDE,pool.isSameRmOverride());      setIfNotNull(xadsModel,WRAP_XA_DATASOURCE,pool.isWrapXaDataSource());    }    DsSecurity security=xads.getSecurity();    if (security != null) {      setIfNotNull(xadsModel,USERNAME,security.getUserName());      setIfNotNull(xadsModel,PASSWORD,security.getPassword());      setIfNotNull(xadsModel,SECURITY_DOMAIN,security.getSecurityDomain());    }    Statement statement=xads.getStatement();    if (statement != null) {      setIfNotNull(xadsModel,PREPAREDSTATEMENTSCACHESIZE,statement.getPreparedStatementsCacheSize());      setIfNotNull(xadsModel,SHAREPREPAREDSTATEMENTS,statement.isSharePreparedStatements());      if (statement.getTrackStatements() != null) {        setIfNotNull(xadsModel,TRACKSTATEMENTS,statement.getTrackStatements().name());      }    }    TimeOut timeout=xads.getTimeOut();    if (timeout != null) {      setIfNotNull(xadsModel,ALLOCATION_RETRY,timeout.getAllocationRetry());      setIfNotNull(xadsModel,ALLOCATION_RETRY_WAIT_MILLIS,timeout.getAllocationRetryWaitMillis());      setIfNotNull(xadsModel,BLOCKING_TIMEOUT_WAIT_MILLIS,timeout.getBlockingTimeoutMillis());      setIfNotNull(xadsModel,IDLETIMEOUTMINUTES,timeout.getIdleTimeoutMinutes());      setIfNotNull(xadsModel,QUERYTIMEOUT,timeout.getQueryTimeout());      setIfNotNull(xadsModel,USETRYLOCK,timeout.getUseTryLock());      setIfNotNull(xadsModel,SETTXQUERYTIMEOUT,timeout.isSetTxQueryTimeout());      setIfNotNull(xadsModel,XA_RESOURCE_TIMEOUT,timeout.getXaResourceTimeout());    }    if (xads.getTransactionIsolation() != null) {      setIfNotNull(xadsModel,TRANSACTION_ISOLOATION,xads.getTransactionIsolation().name());    }    if (xads.isSpy()) {      setIfNotNull(xadsModel,SPY,xads.isSpy());    }    Validation validation=xads.getValidation();    if (xads.getValidation() != null) {      setIfNotNull(xadsModel,CHECKVALIDCONNECTIONSQL,validation.getCheckValidConnectionSql());      setIfNotNull(xadsModel,EXCEPTIONSORTERCLASSNAME,EXCEPTIONSORTER_PROPERTIES,validation.getExceptionSorter());      setIfNotNull(xadsModel,STALECONNECTIONCHECKERCLASSNAME,STALECONNECTIONCHECKER_PROPERTIES,validation.getStaleConnectionChecker());      setIfNotNull(xadsModel,VALIDCONNECTIONCHECKERCLASSNAME,VALIDCONNECTIONCHECKER_PROPERTIES,validation.getValidConnectionChecker());      setIfNotNull(xadsModel,BACKGROUNDVALIDATIONMINUTES,validation.getBackgroundValidationMinutes());      setIfNotNull(xadsModel,BACKGROUNDVALIDATION,validation.isBackgroundValidation());      setIfNotNull(xadsModel,USE_FAST_FAIL,validation.isUseFastFail());      setIfNotNull(xadsModel,VALIDATEONMATCH,validation.isValidateOnMatch());    }    XAdatasourcesNode.add(xadsModel);  }} @AT@ 25272 @LENGTH@ 10669
---UPD EnhancedForStatement@@for (DataSource ds : dataSources.getDataSource()) {  ModelNode dsModel=new ModelNode();  for (  Entry<String,String> entry : ds.getConnectionProperties().entrySet()) {    dsModel.get(CONNECTION_PROPERTIES,entry.getKey()).set(entry.getValue());  }  setIfNotNull(dsModel,CONNECTION_URL,ds.getConnectionUrl());  setIfNotNull(dsModel,DRIVER_CLASS,ds.getDriverClass());  setIfNotNull(dsModel,JNDINAME,ds.getJndiName());  setIfNotNull(dsModel,MODULE,ds.getModule());  setIfNotNull(dsModel,NEW_CONNECTION_SQL,ds.getNewConnectionSql());  setIfNotNull(dsModel,POOLNAME,ds.getPoolName());  setIfNotNull(dsModel,URL_DELIMITER,ds.getUrlDelimiter());  setIfNotNull(dsModel,URL_SELECTOR_STRATEGY_CLASS_NAME,ds.getUrlSelectorStrategyClassName());  setIfNotNull(dsModel,USE_JAVA_CONTEXT,ds.isUseJavaContext());  setIfNotNull(dsModel,ENABLED,ds.isEnabled());  CommonPool pool=ds.getPool();  if (pool != null) {    setIfNotNull(dsModel,MAX_POOL_SIZE,pool.getMaxPoolSize());    setIfNotNull(dsModel,MIN_POOL_SIZE,pool.getMinPoolSize());    setIfNotNull(dsModel,POOL_PREFILL,pool.isPrefill());    setIfNotNull(dsModel,POOL_USE_STRICT_MIN,pool.isUseStrictMin());  }  DsSecurity security=ds.getSecurity();  if (security != null) {    setIfNotNull(dsModel,USERNAME,security.getUserName());    setIfNotNull(dsModel,PASSWORD,security.getPassword());    setIfNotNull(dsModel,SECURITY_DOMAIN,security.getSecurityDomain());  }  Statement statement=ds.getStatement();  if (statement != null) {    setIfNotNull(dsModel,PREPAREDSTATEMENTSCACHESIZE,statement.getPreparedStatementsCacheSize());    setIfNotNull(dsModel,SHAREPREPAREDSTATEMENTS,statement.isSharePreparedStatements());    if (statement.getTrackStatements() != null) {      setIfNotNull(dsModel,TRACKSTATEMENTS,statement.getTrackStatements().name());    }  }  TimeOut timeout=ds.getTimeOut();  if (timeout != null) {    setIfNotNull(dsModel,ALLOCATION_RETRY,timeout.getAllocationRetry());    setIfNotNull(dsModel,ALLOCATION_RETRY_WAIT_MILLIS,timeout.getAllocationRetryWaitMillis());    setIfNotNull(dsModel,BLOCKING_TIMEOUT_WAIT_MILLIS,timeout.getBlockingTimeoutMillis());    setIfNotNull(dsModel,IDLETIMEOUTMINUTES,timeout.getIdleTimeoutMinutes());    setIfNotNull(dsModel,QUERYTIMEOUT,timeout.getQueryTimeout());    setIfNotNull(dsModel,USETRYLOCK,timeout.getUseTryLock());    setIfNotNull(dsModel,SETTXQUERTTIMEOUT,timeout.isSetTxQueryTimeout());  }  if (ds.getTransactionIsolation() != null) {    setIfNotNull(dsModel,TRANSACTION_ISOLOATION,ds.getTransactionIsolation().name());  }  if (ds.isSpy()) {    setIfNotNull(dsModel,SPY,ds.isSpy());  }  Validation validation=ds.getValidation();  if (validation != null) {    setIfNotNull(dsModel,CHECKVALIDCONNECTIONSQL,validation.getCheckValidConnectionSql());    setIfNotNull(dsModel,EXCEPTIONSORTERCLASSNAME,EXCEPTIONSORTER_PROPERTIES,validation.getExceptionSorter());    setIfNotNull(dsModel,STALECONNECTIONCHECKERCLASSNAME,STALECONNECTIONCHECKER_PROPERTIES,validation.getStaleConnectionChecker());    setIfNotNull(dsModel,VALIDCONNECTIONCHECKERCLASSNAME,VALIDCONNECTIONCHECKER_PROPERTIES,validation.getValidConnectionChecker());    setIfNotNull(dsModel,BACKGROUNDVALIDATIONMINUTES,validation.getBackgroundValidationMinutes());    setIfNotNull(dsModel,BACKGROUNDVALIDATION,validation.isBackgroundValidation());    setIfNotNull(dsModel,USE_FAST_FAIL,validation.isUseFastFail());    setIfNotNull(dsModel,VALIDATEONMATCH,validation.isValidateOnMatch());  }  datasourcesNode.add(dsModel);} @TO@ for (DataSource ds : dataSources.getDataSource()) {  ModelNode dsModel=new ModelNode();  for (  Entry<String,String> entry : ds.getConnectionProperties().entrySet()) {    dsModel.get(CONNECTION_PROPERTIES,entry.getKey()).set(entry.getValue());  }  setIfNotNull(dsModel,CONNECTION_URL,ds.getConnectionUrl());  setIfNotNull(dsModel,DRIVER_CLASS,ds.getDriverClass());  setIfNotNull(dsModel,JNDINAME,ds.getJndiName());  setIfNotNull(dsModel,MODULE,ds.getModule());  setIfNotNull(dsModel,NEW_CONNECTION_SQL,ds.getNewConnectionSql());  setIfNotNull(dsModel,POOLNAME,ds.getPoolName());  setIfNotNull(dsModel,URL_DELIMITER,ds.getUrlDelimiter());  setIfNotNull(dsModel,URL_SELECTOR_STRATEGY_CLASS_NAME,ds.getUrlSelectorStrategyClassName());  setIfNotNull(dsModel,USE_JAVA_CONTEXT,ds.isUseJavaContext());  setIfNotNull(dsModel,ENABLED,ds.isEnabled());  CommonPool pool=ds.getPool();  if (pool != null) {    setIfNotNull(dsModel,MAX_POOL_SIZE,pool.getMaxPoolSize());    setIfNotNull(dsModel,MIN_POOL_SIZE,pool.getMinPoolSize());    setIfNotNull(dsModel,POOL_PREFILL,pool.isPrefill());    setIfNotNull(dsModel,POOL_USE_STRICT_MIN,pool.isUseStrictMin());  }  DsSecurity security=ds.getSecurity();  if (security != null) {    setIfNotNull(dsModel,USERNAME,security.getUserName());    setIfNotNull(dsModel,PASSWORD,security.getPassword());    setIfNotNull(dsModel,SECURITY_DOMAIN,security.getSecurityDomain());  }  Statement statement=ds.getStatement();  if (statement != null) {    setIfNotNull(dsModel,PREPAREDSTATEMENTSCACHESIZE,statement.getPreparedStatementsCacheSize());    setIfNotNull(dsModel,SHAREPREPAREDSTATEMENTS,statement.isSharePreparedStatements());    if (statement.getTrackStatements() != null) {      setIfNotNull(dsModel,TRACKSTATEMENTS,statement.getTrackStatements().name());    }  }  TimeOut timeout=ds.getTimeOut();  if (timeout != null) {    setIfNotNull(dsModel,ALLOCATION_RETRY,timeout.getAllocationRetry());    setIfNotNull(dsModel,ALLOCATION_RETRY_WAIT_MILLIS,timeout.getAllocationRetryWaitMillis());    setIfNotNull(dsModel,BLOCKING_TIMEOUT_WAIT_MILLIS,timeout.getBlockingTimeoutMillis());    setIfNotNull(dsModel,IDLETIMEOUTMINUTES,timeout.getIdleTimeoutMinutes());    setIfNotNull(dsModel,QUERYTIMEOUT,timeout.getQueryTimeout());    setIfNotNull(dsModel,USETRYLOCK,timeout.getUseTryLock());    setIfNotNull(dsModel,SETTXQUERYTIMEOUT,timeout.isSetTxQueryTimeout());  }  if (ds.getTransactionIsolation() != null) {    setIfNotNull(dsModel,TRANSACTION_ISOLOATION,ds.getTransactionIsolation().name());  }  if (ds.isSpy()) {    setIfNotNull(dsModel,SPY,ds.isSpy());  }  Validation validation=ds.getValidation();  if (validation != null) {    setIfNotNull(dsModel,CHECKVALIDCONNECTIONSQL,validation.getCheckValidConnectionSql());    setIfNotNull(dsModel,EXCEPTIONSORTERCLASSNAME,EXCEPTIONSORTER_PROPERTIES,validation.getExceptionSorter());    setIfNotNull(dsModel,STALECONNECTIONCHECKERCLASSNAME,STALECONNECTIONCHECKER_PROPERTIES,validation.getStaleConnectionChecker());    setIfNotNull(dsModel,VALIDCONNECTIONCHECKERCLASSNAME,VALIDCONNECTIONCHECKER_PROPERTIES,validation.getValidConnectionChecker());    setIfNotNull(dsModel,BACKGROUNDVALIDATIONMINUTES,validation.getBackgroundValidationMinutes());    setIfNotNull(dsModel,BACKGROUNDVALIDATION,validation.isBackgroundValidation());    setIfNotNull(dsModel,USE_FAST_FAIL,validation.isUseFastFail());    setIfNotNull(dsModel,VALIDATEONMATCH,validation.isValidateOnMatch());  }  datasourcesNode.add(dsModel);} @AT@ 25362 @LENGTH@ 4931
------UPD IfStatement@@if (timeout != null) {  setIfNotNull(dsModel,ALLOCATION_RETRY,timeout.getAllocationRetry());  setIfNotNull(dsModel,ALLOCATION_RETRY_WAIT_MILLIS,timeout.getAllocationRetryWaitMillis());  setIfNotNull(dsModel,BLOCKING_TIMEOUT_WAIT_MILLIS,timeout.getBlockingTimeoutMillis());  setIfNotNull(dsModel,IDLETIMEOUTMINUTES,timeout.getIdleTimeoutMinutes());  setIfNotNull(dsModel,QUERYTIMEOUT,timeout.getQueryTimeout());  setIfNotNull(dsModel,USETRYLOCK,timeout.getUseTryLock());  setIfNotNull(dsModel,SETTXQUERTTIMEOUT,timeout.isSetTxQueryTimeout());} @TO@ if (timeout != null) {  setIfNotNull(dsModel,ALLOCATION_RETRY,timeout.getAllocationRetry());  setIfNotNull(dsModel,ALLOCATION_RETRY_WAIT_MILLIS,timeout.getAllocationRetryWaitMillis());  setIfNotNull(dsModel,BLOCKING_TIMEOUT_WAIT_MILLIS,timeout.getBlockingTimeoutMillis());  setIfNotNull(dsModel,IDLETIMEOUTMINUTES,timeout.getIdleTimeoutMinutes());  setIfNotNull(dsModel,QUERYTIMEOUT,timeout.getQueryTimeout());  setIfNotNull(dsModel,USETRYLOCK,timeout.getUseTryLock());  setIfNotNull(dsModel,SETTXQUERYTIMEOUT,timeout.isSetTxQueryTimeout());} @AT@ 27968 @LENGTH@ 738
---------UPD Block@@ThenBody:{  setIfNotNull(dsModel,ALLOCATION_RETRY,timeout.getAllocationRetry());  setIfNotNull(dsModel,ALLOCATION_RETRY_WAIT_MILLIS,timeout.getAllocationRetryWaitMillis());  setIfNotNull(dsModel,BLOCKING_TIMEOUT_WAIT_MILLIS,timeout.getBlockingTimeoutMillis());  setIfNotNull(dsModel,IDLETIMEOUTMINUTES,timeout.getIdleTimeoutMinutes());  setIfNotNull(dsModel,QUERYTIMEOUT,timeout.getQueryTimeout());  setIfNotNull(dsModel,USETRYLOCK,timeout.getUseTryLock());  setIfNotNull(dsModel,SETTXQUERTTIMEOUT,timeout.isSetTxQueryTimeout());} @TO@ ThenBody:{  setIfNotNull(dsModel,ALLOCATION_RETRY,timeout.getAllocationRetry());  setIfNotNull(dsModel,ALLOCATION_RETRY_WAIT_MILLIS,timeout.getAllocationRetryWaitMillis());  setIfNotNull(dsModel,BLOCKING_TIMEOUT_WAIT_MILLIS,timeout.getBlockingTimeoutMillis());  setIfNotNull(dsModel,IDLETIMEOUTMINUTES,timeout.getIdleTimeoutMinutes());  setIfNotNull(dsModel,QUERYTIMEOUT,timeout.getQueryTimeout());  setIfNotNull(dsModel,USETRYLOCK,timeout.getUseTryLock());  setIfNotNull(dsModel,SETTXQUERYTIMEOUT,timeout.isSetTxQueryTimeout());} @AT@ 27989 @LENGTH@ 717
------------UPD ExpressionStatement@@MethodInvocation:setIfNotNull(dsModel,SETTXQUERTTIMEOUT,timeout.isSetTxQueryTimeout()) @TO@ MethodInvocation:setIfNotNull(dsModel,SETTXQUERYTIMEOUT,timeout.isSetTxQueryTimeout()) @AT@ 28612 @LENGTH@ 72
---------------UPD MethodInvocation@@setIfNotNull(dsModel,SETTXQUERTTIMEOUT,timeout.isSetTxQueryTimeout()) @TO@ setIfNotNull(dsModel,SETTXQUERYTIMEOUT,timeout.isSetTxQueryTimeout()) @AT@ 28612 @LENGTH@ 71
------------------UPD SimpleName@@MethodName:setIfNotNull:[dsModel, SETTXQUERTTIMEOUT, timeout.isSetTxQueryTimeout()] @TO@ MethodName:setIfNotNull:[dsModel, SETTXQUERYTIMEOUT, timeout.isSetTxQueryTimeout()] @AT@ 28612 @LENGTH@ 71
---------------------UPD SimpleName@@SETTXQUERTTIMEOUT @TO@ SETTXQUERYTIMEOUT @AT@ 28634 @LENGTH@ 17
---UPD EnhancedForStatement@@for (XaDataSource xads : dataSources.getXaDataSource()) {  ModelNode xadsModel=new ModelNode();  for (  Entry<String,String> entry : xads.getXaDataSourceProperty().entrySet()) {    xadsModel.get(XADATASOURCEPROPERTIES,entry.getKey()).set(entry.getValue());  }  setIfNotNull(xadsModel,XADATASOURCECLASS,xads.getXaDataSourceClass());  setIfNotNull(xadsModel,JNDINAME,xads.getJndiName());  setIfNotNull(xadsModel,MODULE,xads.getModule());  setIfNotNull(xadsModel,NEW_CONNECTION_SQL,xads.getNewConnectionSql());  setIfNotNull(xadsModel,POOLNAME,xads.getPoolName());  setIfNotNull(xadsModel,URL_DELIMITER,xads.getUrlDelimiter());  setIfNotNull(xadsModel,URL_SELECTOR_STRATEGY_CLASS_NAME,xads.getUrlSelectorStrategyClassName());  setIfNotNull(xadsModel,USE_JAVA_CONTEXT,xads.isUseJavaContext());  setIfNotNull(xadsModel,ENABLED,xads.isEnabled());  CommonXaPool pool=xads.getXaPool();  if (pool != null) {    setIfNotNull(xadsModel,MAX_POOL_SIZE,pool.getMaxPoolSize());    setIfNotNull(xadsModel,MIN_POOL_SIZE,pool.getMinPoolSize());    setIfNotNull(xadsModel,POOL_PREFILL,pool.isPrefill());    setIfNotNull(xadsModel,POOL_USE_STRICT_MIN,pool.isUseStrictMin());    setIfNotNull(xadsModel,INTERLIVING,pool.isInterleaving());    setIfNotNull(xadsModel,NOTXSEPARATEPOOL,pool.isNoTxSeparatePool());    setIfNotNull(xadsModel,PAD_XID,pool.isPadXid());    setIfNotNull(xadsModel,SAME_RM_OVERRIDE,pool.isSameRmOverride());    setIfNotNull(xadsModel,WRAP_XA_DATASOURCE,pool.isWrapXaDataSource());  }  DsSecurity security=xads.getSecurity();  if (security != null) {    setIfNotNull(xadsModel,USERNAME,security.getUserName());    setIfNotNull(xadsModel,PASSWORD,security.getPassword());    setIfNotNull(xadsModel,SECURITY_DOMAIN,security.getSecurityDomain());  }  Statement statement=xads.getStatement();  if (statement != null) {    setIfNotNull(xadsModel,PREPAREDSTATEMENTSCACHESIZE,statement.getPreparedStatementsCacheSize());    setIfNotNull(xadsModel,SHAREPREPAREDSTATEMENTS,statement.isSharePreparedStatements());    if (statement.getTrackStatements() != null) {      setIfNotNull(xadsModel,TRACKSTATEMENTS,statement.getTrackStatements().name());    }  }  TimeOut timeout=xads.getTimeOut();  if (timeout != null) {    setIfNotNull(xadsModel,ALLOCATION_RETRY,timeout.getAllocationRetry());    setIfNotNull(xadsModel,ALLOCATION_RETRY_WAIT_MILLIS,timeout.getAllocationRetryWaitMillis());    setIfNotNull(xadsModel,BLOCKING_TIMEOUT_WAIT_MILLIS,timeout.getBlockingTimeoutMillis());    setIfNotNull(xadsModel,IDLETIMEOUTMINUTES,timeout.getIdleTimeoutMinutes());    setIfNotNull(xadsModel,QUERYTIMEOUT,timeout.getQueryTimeout());    setIfNotNull(xadsModel,USETRYLOCK,timeout.getUseTryLock());    setIfNotNull(xadsModel,SETTXQUERTTIMEOUT,timeout.isSetTxQueryTimeout());    setIfNotNull(xadsModel,XA_RESOURCE_TIMEOUT,timeout.getXaResourceTimeout());  }  if (xads.getTransactionIsolation() != null) {    setIfNotNull(xadsModel,TRANSACTION_ISOLOATION,xads.getTransactionIsolation().name());  }  if (xads.isSpy()) {    setIfNotNull(xadsModel,SPY,xads.isSpy());  }  Validation validation=xads.getValidation();  if (xads.getValidation() != null) {    setIfNotNull(xadsModel,CHECKVALIDCONNECTIONSQL,validation.getCheckValidConnectionSql());    setIfNotNull(xadsModel,EXCEPTIONSORTERCLASSNAME,EXCEPTIONSORTER_PROPERTIES,validation.getExceptionSorter());    setIfNotNull(xadsModel,STALECONNECTIONCHECKERCLASSNAME,STALECONNECTIONCHECKER_PROPERTIES,validation.getStaleConnectionChecker());    setIfNotNull(xadsModel,VALIDCONNECTIONCHECKERCLASSNAME,VALIDCONNECTIONCHECKER_PROPERTIES,validation.getValidConnectionChecker());    setIfNotNull(xadsModel,BACKGROUNDVALIDATIONMINUTES,validation.getBackgroundValidationMinutes());    setIfNotNull(xadsModel,BACKGROUNDVALIDATION,validation.isBackgroundValidation());    setIfNotNull(xadsModel,USE_FAST_FAIL,validation.isUseFastFail());    setIfNotNull(xadsModel,VALIDATEONMATCH,validation.isValidateOnMatch());  }  XAdatasourcesNode.add(xadsModel);} @TO@ for (XaDataSource xads : dataSources.getXaDataSource()) {  ModelNode xadsModel=new ModelNode();  for (  Entry<String,String> entry : xads.getXaDataSourceProperty().entrySet()) {    xadsModel.get(XADATASOURCEPROPERTIES,entry.getKey()).set(entry.getValue());  }  setIfNotNull(xadsModel,XADATASOURCECLASS,xads.getXaDataSourceClass());  setIfNotNull(xadsModel,JNDINAME,xads.getJndiName());  setIfNotNull(xadsModel,MODULE,xads.getModule());  setIfNotNull(xadsModel,NEW_CONNECTION_SQL,xads.getNewConnectionSql());  setIfNotNull(xadsModel,POOLNAME,xads.getPoolName());  setIfNotNull(xadsModel,URL_DELIMITER,xads.getUrlDelimiter());  setIfNotNull(xadsModel,URL_SELECTOR_STRATEGY_CLASS_NAME,xads.getUrlSelectorStrategyClassName());  setIfNotNull(xadsModel,USE_JAVA_CONTEXT,xads.isUseJavaContext());  setIfNotNull(xadsModel,ENABLED,xads.isEnabled());  CommonXaPool pool=xads.getXaPool();  if (pool != null) {    setIfNotNull(xadsModel,MAX_POOL_SIZE,pool.getMaxPoolSize());    setIfNotNull(xadsModel,MIN_POOL_SIZE,pool.getMinPoolSize());    setIfNotNull(xadsModel,POOL_PREFILL,pool.isPrefill());    setIfNotNull(xadsModel,POOL_USE_STRICT_MIN,pool.isUseStrictMin());    setIfNotNull(xadsModel,INTERLIVING,pool.isInterleaving());    setIfNotNull(xadsModel,NOTXSEPARATEPOOL,pool.isNoTxSeparatePool());    setIfNotNull(xadsModel,PAD_XID,pool.isPadXid());    setIfNotNull(xadsModel,SAME_RM_OVERRIDE,pool.isSameRmOverride());    setIfNotNull(xadsModel,WRAP_XA_DATASOURCE,pool.isWrapXaDataSource());  }  DsSecurity security=xads.getSecurity();  if (security != null) {    setIfNotNull(xadsModel,USERNAME,security.getUserName());    setIfNotNull(xadsModel,PASSWORD,security.getPassword());    setIfNotNull(xadsModel,SECURITY_DOMAIN,security.getSecurityDomain());  }  Statement statement=xads.getStatement();  if (statement != null) {    setIfNotNull(xadsModel,PREPAREDSTATEMENTSCACHESIZE,statement.getPreparedStatementsCacheSize());    setIfNotNull(xadsModel,SHAREPREPAREDSTATEMENTS,statement.isSharePreparedStatements());    if (statement.getTrackStatements() != null) {      setIfNotNull(xadsModel,TRACKSTATEMENTS,statement.getTrackStatements().name());    }  }  TimeOut timeout=xads.getTimeOut();  if (timeout != null) {    setIfNotNull(xadsModel,ALLOCATION_RETRY,timeout.getAllocationRetry());    setIfNotNull(xadsModel,ALLOCATION_RETRY_WAIT_MILLIS,timeout.getAllocationRetryWaitMillis());    setIfNotNull(xadsModel,BLOCKING_TIMEOUT_WAIT_MILLIS,timeout.getBlockingTimeoutMillis());    setIfNotNull(xadsModel,IDLETIMEOUTMINUTES,timeout.getIdleTimeoutMinutes());    setIfNotNull(xadsModel,QUERYTIMEOUT,timeout.getQueryTimeout());    setIfNotNull(xadsModel,USETRYLOCK,timeout.getUseTryLock());    setIfNotNull(xadsModel,SETTXQUERYTIMEOUT,timeout.isSetTxQueryTimeout());    setIfNotNull(xadsModel,XA_RESOURCE_TIMEOUT,timeout.getXaResourceTimeout());  }  if (xads.getTransactionIsolation() != null) {    setIfNotNull(xadsModel,TRANSACTION_ISOLOATION,xads.getTransactionIsolation().name());  }  if (xads.isSpy()) {    setIfNotNull(xadsModel,SPY,xads.isSpy());  }  Validation validation=xads.getValidation();  if (xads.getValidation() != null) {    setIfNotNull(xadsModel,CHECKVALIDCONNECTIONSQL,validation.getCheckValidConnectionSql());    setIfNotNull(xadsModel,EXCEPTIONSORTERCLASSNAME,EXCEPTIONSORTER_PROPERTIES,validation.getExceptionSorter());    setIfNotNull(xadsModel,STALECONNECTIONCHECKERCLASSNAME,STALECONNECTIONCHECKER_PROPERTIES,validation.getStaleConnectionChecker());    setIfNotNull(xadsModel,VALIDCONNECTIONCHECKERCLASSNAME,VALIDCONNECTIONCHECKER_PROPERTIES,validation.getValidConnectionChecker());    setIfNotNull(xadsModel,BACKGROUNDVALIDATIONMINUTES,validation.getBackgroundValidationMinutes());    setIfNotNull(xadsModel,BACKGROUNDVALIDATION,validation.isBackgroundValidation());    setIfNotNull(xadsModel,USE_FAST_FAIL,validation.isUseFastFail());    setIfNotNull(xadsModel,VALIDATEONMATCH,validation.isValidateOnMatch());  }  XAdatasourcesNode.add(xadsModel);} @AT@ 30385 @LENGTH@ 5542
------UPD IfStatement@@if (timeout != null) {  setIfNotNull(xadsModel,ALLOCATION_RETRY,timeout.getAllocationRetry());  setIfNotNull(xadsModel,ALLOCATION_RETRY_WAIT_MILLIS,timeout.getAllocationRetryWaitMillis());  setIfNotNull(xadsModel,BLOCKING_TIMEOUT_WAIT_MILLIS,timeout.getBlockingTimeoutMillis());  setIfNotNull(xadsModel,IDLETIMEOUTMINUTES,timeout.getIdleTimeoutMinutes());  setIfNotNull(xadsModel,QUERYTIMEOUT,timeout.getQueryTimeout());  setIfNotNull(xadsModel,USETRYLOCK,timeout.getUseTryLock());  setIfNotNull(xadsModel,SETTXQUERTTIMEOUT,timeout.isSetTxQueryTimeout());  setIfNotNull(xadsModel,XA_RESOURCE_TIMEOUT,timeout.getXaResourceTimeout());} @TO@ if (timeout != null) {  setIfNotNull(xadsModel,ALLOCATION_RETRY,timeout.getAllocationRetry());  setIfNotNull(xadsModel,ALLOCATION_RETRY_WAIT_MILLIS,timeout.getAllocationRetryWaitMillis());  setIfNotNull(xadsModel,BLOCKING_TIMEOUT_WAIT_MILLIS,timeout.getBlockingTimeoutMillis());  setIfNotNull(xadsModel,IDLETIMEOUTMINUTES,timeout.getIdleTimeoutMinutes());  setIfNotNull(xadsModel,QUERYTIMEOUT,timeout.getQueryTimeout());  setIfNotNull(xadsModel,USETRYLOCK,timeout.getUseTryLock());  setIfNotNull(xadsModel,SETTXQUERYTIMEOUT,timeout.isSetTxQueryTimeout());  setIfNotNull(xadsModel,XA_RESOURCE_TIMEOUT,timeout.getXaResourceTimeout());} @AT@ 33442 @LENGTH@ 854
---------UPD Block@@ThenBody:{  setIfNotNull(xadsModel,ALLOCATION_RETRY,timeout.getAllocationRetry());  setIfNotNull(xadsModel,ALLOCATION_RETRY_WAIT_MILLIS,timeout.getAllocationRetryWaitMillis());  setIfNotNull(xadsModel,BLOCKING_TIMEOUT_WAIT_MILLIS,timeout.getBlockingTimeoutMillis());  setIfNotNull(xadsModel,IDLETIMEOUTMINUTES,timeout.getIdleTimeoutMinutes());  setIfNotNull(xadsModel,QUERYTIMEOUT,timeout.getQueryTimeout());  setIfNotNull(xadsModel,USETRYLOCK,timeout.getUseTryLock());  setIfNotNull(xadsModel,SETTXQUERTTIMEOUT,timeout.isSetTxQueryTimeout());  setIfNotNull(xadsModel,XA_RESOURCE_TIMEOUT,timeout.getXaResourceTimeout());} @TO@ ThenBody:{  setIfNotNull(xadsModel,ALLOCATION_RETRY,timeout.getAllocationRetry());  setIfNotNull(xadsModel,ALLOCATION_RETRY_WAIT_MILLIS,timeout.getAllocationRetryWaitMillis());  setIfNotNull(xadsModel,BLOCKING_TIMEOUT_WAIT_MILLIS,timeout.getBlockingTimeoutMillis());  setIfNotNull(xadsModel,IDLETIMEOUTMINUTES,timeout.getIdleTimeoutMinutes());  setIfNotNull(xadsModel,QUERYTIMEOUT,timeout.getQueryTimeout());  setIfNotNull(xadsModel,USETRYLOCK,timeout.getUseTryLock());  setIfNotNull(xadsModel,SETTXQUERYTIMEOUT,timeout.isSetTxQueryTimeout());  setIfNotNull(xadsModel,XA_RESOURCE_TIMEOUT,timeout.getXaResourceTimeout());} @AT@ 33463 @LENGTH@ 833
------------UPD ExpressionStatement@@MethodInvocation:setIfNotNull(xadsModel,SETTXQUERTTIMEOUT,timeout.isSetTxQueryTimeout()) @TO@ MethodInvocation:setIfNotNull(xadsModel,SETTXQUERYTIMEOUT,timeout.isSetTxQueryTimeout()) @AT@ 34098 @LENGTH@ 74
---------------UPD MethodInvocation@@setIfNotNull(xadsModel,SETTXQUERTTIMEOUT,timeout.isSetTxQueryTimeout()) @TO@ setIfNotNull(xadsModel,SETTXQUERYTIMEOUT,timeout.isSetTxQueryTimeout()) @AT@ 34098 @LENGTH@ 73
------------------UPD SimpleName@@MethodName:setIfNotNull:[xadsModel, SETTXQUERTTIMEOUT, timeout.isSetTxQueryTimeout()] @TO@ MethodName:setIfNotNull:[xadsModel, SETTXQUERYTIMEOUT, timeout.isSetTxQueryTimeout()] @AT@ 34098 @LENGTH@ 73
---------------------UPD SimpleName@@SETTXQUERTTIMEOUT @TO@ SETTXQUERYTIMEOUT @AT@ 34122 @LENGTH@ 17


UPD FieldDeclaration@@public, static, final, int, [POST_MODULE_WELD_WEB_INTEGRATION=0x0100] @TO@ public, static, final, int, [PARSE_WELD_WEB_INTEGRATION=0x2B10] @AT@ 14481 @LENGTH@ 77
---UPD VariableDeclarationFragment@@POST_MODULE_WELD_WEB_INTEGRATION=0x0100 @TO@ PARSE_WELD_WEB_INTEGRATION=0x2B10 @AT@ 14505 @LENGTH@ 52
------UPD SimpleName@@POST_MODULE_WELD_WEB_INTEGRATION @TO@ PARSE_WELD_WEB_INTEGRATION @AT@ 14505 @LENGTH@ 32
------UPD NumberLiteral@@0x0100 @TO@ 0x2B10 @AT@ 14551 @LENGTH@ 6


UPD ReturnStatement@@InfixExpression:"http://www.gowalla.com/users/" + providerAccountId @TO@ InfixExpression:"https://github.com/" + providerAccountId @AT@ 1802 @LENGTH@ 59
---UPD InfixExpression@@"http://www.gowalla.com/users/" + providerAccountId @TO@ "https://github.com/" + providerAccountId @AT@ 1809 @LENGTH@ 51
------UPD StringLiteral@@"http://www.gowalla.com/users/" @TO@ "https://github.com/" @AT@ 1809 @LENGTH@ 31


UPD MethodDeclaration@@public, static, ModelNode, MethodName:getAddNamespaceOperation, ModelNode address, ModelNode namespace,  @TO@ public, static, ModelNode, MethodName:getAddNamespaceOperation, ModelNode address, Property namespace,  @AT@ 2303 @LENGTH@ 275
---UPD SingleVariableDeclaration@@ModelNode namespace @TO@ Property namespace @AT@ 2371 @LENGTH@ 19
------UPD SimpleType@@ModelNode @TO@ Property @AT@ 2371 @LENGTH@ 9


UPD EnhancedForStatement@@for (String dir : dirs) {  sb.append(dir).append('/');  String directory=sb.toString();  if (!directory.equals("/")) {    if (log.isTraceEnabled()) {      log.trace("Trying to build remote directory by chunk: " + directory);    }    success=client.makeDirectory(directory);  }} @TO@ for (String dir : dirs) {  sb.append(dir).append('/');  String directory=endpoint.getConfiguration().normalizePath(sb.toString());  if (!(directory.equals("/") || directory.equals("\\"))) {    if (log.isTraceEnabled()) {      log.trace("Trying to build remote directory by chunk: " + directory);    }    success=client.makeDirectory(directory);  }} @AT@ 28413 @LENGTH@ 439
---UPD VariableDeclarationStatement@@String directory=sb.toString(); @TO@ String directory=endpoint.getConfiguration().normalizePath(sb.toString()); @AT@ 28491 @LENGTH@ 33
------UPD VariableDeclarationFragment@@directory=sb.toString() @TO@ directory=endpoint.getConfiguration().normalizePath(sb.toString()) @AT@ 28498 @LENGTH@ 25
---------DEL MethodInvocation@@sb.toString() @AT@ 28510 @LENGTH@ 13
---------INS MethodInvocation@@endpoint.getConfiguration().normalizePath(sb.toString()) @TO@ VariableDeclarationFragment@@directory=sb.toString() @AT@ 28676 @LENGTH@ 56
------------INS MethodInvocation@@MethodName:getConfiguration:[] @TO@ MethodInvocation@@endpoint.getConfiguration().normalizePath(sb.toString()) @AT@ 28676 @LENGTH@ 27
------------INS SimpleName@@Name:endpoint @TO@ MethodInvocation@@endpoint.getConfiguration().normalizePath(sb.toString()) @AT@ 28676 @LENGTH@ 8
------------INS SimpleName@@MethodName:normalizePath:[sb.toString()] @TO@ MethodInvocation@@endpoint.getConfiguration().normalizePath(sb.toString()) @AT@ 28704 @LENGTH@ 28
---------------INS MethodInvocation@@sb.toString() @TO@ SimpleName@@MethodName:normalizePath:[sb.toString()] @AT@ 28718 @LENGTH@ 13
------------------MOV SimpleName@@Name:sb @TO@ MethodInvocation@@sb.toString() @AT@ 28510 @LENGTH@ 2
------------------MOV SimpleName@@MethodName:toString:[] @TO@ MethodInvocation@@sb.toString() @AT@ 28513 @LENGTH@ 10
---UPD IfStatement@@if (!directory.equals("/")) {  if (log.isTraceEnabled()) {    log.trace("Trying to build remote directory by chunk: " + directory);  }  success=client.makeDirectory(directory);} @TO@ if (!(directory.equals("/") || directory.equals("\\"))) {  if (log.isTraceEnabled()) {    log.trace("Trying to build remote directory by chunk: " + directory);  }  success=client.makeDirectory(directory);} @AT@ 28587 @LENGTH@ 255
------UPD PrefixExpression@@!directory.equals("/") @TO@ !(directory.equals("/") || directory.equals("\\")) @AT@ 28591 @LENGTH@ 22
---------INS ParenthesizedExpression@@(directory.equals("/") || directory.equals("\\")) @TO@ PrefixExpression@@!directory.equals("/") @AT@ 28808 @LENGTH@ 49
------------INS InfixExpression@@directory.equals("/") || directory.equals("\\") @TO@ ParenthesizedExpression@@(directory.equals("/") || directory.equals("\\")) @AT@ 28809 @LENGTH@ 47
---------------MOV MethodInvocation@@directory.equals("/") @TO@ InfixExpression@@directory.equals("/") || directory.equals("\\") @AT@ 28592 @LENGTH@ 21
---------------INS Operator@@|| @TO@ InfixExpression@@directory.equals("/") || directory.equals("\\") @AT@ 28830 @LENGTH@ 2
---------------INS MethodInvocation@@directory.equals("\\") @TO@ InfixExpression@@directory.equals("/") || directory.equals("\\") @AT@ 28834 @LENGTH@ 22
------------------INS SimpleName@@Name:directory @TO@ MethodInvocation@@directory.equals("\\") @AT@ 28834 @LENGTH@ 9
------------------INS SimpleName@@MethodName:equals:["\\"] @TO@ MethodInvocation@@directory.equals("\\") @AT@ 28844 @LENGTH@ 12
---------------------INS StringLiteral@@"\\" @TO@ SimpleName@@MethodName:equals:["\\"] @AT@ 28851 @LENGTH@ 4


UPD ExpressionStatement@@Assignment:this.updater=(AtomicReferenceFieldUpdater<C,Map<K,V>>)updater @TO@ Assignment:this.updater=(AtomicReferenceFieldUpdater)updater @AT@ 1743 @LENGTH@ 67
---UPD Assignment@@this.updater=(AtomicReferenceFieldUpdater<C,Map<K,V>>)updater @TO@ this.updater=(AtomicReferenceFieldUpdater)updater @AT@ 1743 @LENGTH@ 66
------UPD CastExpression@@(AtomicReferenceFieldUpdater<C,Map<K,V>>)updater @TO@ (AtomicReferenceFieldUpdater)updater @AT@ 1758 @LENGTH@ 51
---------DEL ParameterizedType@@AtomicReferenceFieldUpdater<C,Map<K,V>> @AT@ 1759 @LENGTH@ 41
------------DEL SimpleType@@AtomicReferenceFieldUpdater @AT@ 1759 @LENGTH@ 27
------------DEL SimpleType@@C @AT@ 1787 @LENGTH@ 1
------------DEL ParameterizedType@@Map<K,V> @AT@ 1790 @LENGTH@ 9
---------------DEL SimpleType@@Map @AT@ 1790 @LENGTH@ 3
---------------DEL SimpleType@@K @AT@ 1794 @LENGTH@ 1
---------------DEL SimpleType@@V @AT@ 1797 @LENGTH@ 1
---------INS SimpleType@@AtomicReferenceFieldUpdater @TO@ CastExpression@@(AtomicReferenceFieldUpdater<C,Map<K,V>>)updater @AT@ 1759 @LENGTH@ 27


UPD IfStatement@@if (type.equals(PersistenceContextType.TRANSACTION)) {  entityManager=new TransactionScopedEntityManager(unitName,properties,emf);} else {  EntityManager entityManager1=SFSBCallStack.findPersistenceContext(unitName);  if (entityManager1 == null) {    entityManager1=emf.createEntityManager(properties);    entityManager=new ExtendedEntityManager(unitName,entityManager1);    SFSBXPCMap.RegisterPersistenceContext(entityManager);  } else {    entityManager=entityManager1;  }} @TO@ if (type.equals(PersistenceContextType.TRANSACTION)) {  entityManager=new TransactionScopedEntityManager(unitName,properties,emf);  if (log.isDebugEnabled())   log.debug("created new TransactionScopedEntityManager for unit name=" + unitName);} else {  EntityManager entityManager1=SFSBCallStack.findPersistenceContext(unitName);  if (entityManager1 == null) {    entityManager1=emf.createEntityManager(properties);    entityManager=new ExtendedEntityManager(unitName,entityManager1);    if (log.isDebugEnabled())     log.debug("created new ExtendedEntityManager for unit name=" + unitName);  } else {    entityManager=entityManager1;    if (log.isDebugEnabled())     log.debug("inherited existing ExtendedEntityManager from SFSB invocation stack, unit name=" + unitName);  }  SFSBXPCMap.RegisterPersistenceContext(entityManager);} @AT@ 5870 @LENGTH@ 752
---UPD Block@@ThenBody:{  entityManager=new TransactionScopedEntityManager(unitName,properties,emf);} @TO@ ThenBody:{  entityManager=new TransactionScopedEntityManager(unitName,properties,emf);  if (log.isDebugEnabled())   log.debug("created new TransactionScopedEntityManager for unit name=" + unitName);} @AT@ 5923 @LENGTH@ 110
------INS IfStatement@@if (log.isDebugEnabled()) log.debug("created new TransactionScopedEntityManager for unit name=" + unitName); @TO@ Block@@ThenBody:{  entityManager=new TransactionScopedEntityManager(unitName,properties,emf);} @AT@ 6145 @LENGTH@ 128
---------INS MethodInvocation@@log.isDebugEnabled() @TO@ IfStatement@@if (log.isDebugEnabled()) log.debug("created new TransactionScopedEntityManager for unit name=" + unitName); @AT@ 6149 @LENGTH@ 20
------------INS SimpleName@@Name:log @TO@ MethodInvocation@@log.isDebugEnabled() @AT@ 6149 @LENGTH@ 3
------------INS SimpleName@@MethodName:isDebugEnabled:[] @TO@ MethodInvocation@@log.isDebugEnabled() @AT@ 6153 @LENGTH@ 16
---------INS Block@@ThenBody:log.debug("created new TransactionScopedEntityManager for unit name=" + unitName); @TO@ IfStatement@@if (log.isDebugEnabled()) log.debug("created new TransactionScopedEntityManager for unit name=" + unitName); @AT@ 6191 @LENGTH@ 82
------------INS ExpressionStatement@@MethodInvocation:log.debug("created new TransactionScopedEntityManager for unit name=" + unitName) @TO@ Block@@ThenBody:log.debug("created new TransactionScopedEntityManager for unit name=" + unitName); @AT@ 6191 @LENGTH@ 82
---------------INS MethodInvocation@@log.debug("created new TransactionScopedEntityManager for unit name=" + unitName) @TO@ ExpressionStatement@@MethodInvocation:log.debug("created new TransactionScopedEntityManager for unit name=" + unitName) @AT@ 6191 @LENGTH@ 81
------------------INS SimpleName@@Name:log @TO@ MethodInvocation@@log.debug("created new TransactionScopedEntityManager for unit name=" + unitName) @AT@ 6191 @LENGTH@ 3
------------------INS SimpleName@@MethodName:debug:["created new TransactionScopedEntityManager for unit name=" + unitName] @TO@ MethodInvocation@@log.debug("created new TransactionScopedEntityManager for unit name=" + unitName) @AT@ 6195 @LENGTH@ 77
---------------------INS InfixExpression@@"created new TransactionScopedEntityManager for unit name=" + unitName @TO@ SimpleName@@MethodName:debug:["created new TransactionScopedEntityManager for unit name=" + unitName] @AT@ 6201 @LENGTH@ 70
------------------------INS StringLiteral@@"created new TransactionScopedEntityManager for unit name=" @TO@ InfixExpression@@"created new TransactionScopedEntityManager for unit name=" + unitName @AT@ 6201 @LENGTH@ 59
------------------------INS Operator@@+ @TO@ InfixExpression@@"created new TransactionScopedEntityManager for unit name=" + unitName @AT@ 6260 @LENGTH@ 1
------------------------INS SimpleName@@unitName @TO@ InfixExpression@@"created new TransactionScopedEntityManager for unit name=" + unitName @AT@ 6263 @LENGTH@ 8
---UPD Block@@ElseBody:{  EntityManager entityManager1=SFSBCallStack.findPersistenceContext(unitName);  if (entityManager1 == null) {    entityManager1=emf.createEntityManager(properties);    entityManager=new ExtendedEntityManager(unitName,entityManager1);    SFSBXPCMap.RegisterPersistenceContext(entityManager);  } else {    entityManager=entityManager1;  }} @TO@ ElseBody:{  EntityManager entityManager1=SFSBCallStack.findPersistenceContext(unitName);  if (entityManager1 == null) {    entityManager1=emf.createEntityManager(properties);    entityManager=new ExtendedEntityManager(unitName,entityManager1);    if (log.isDebugEnabled())     log.debug("created new ExtendedEntityManager for unit name=" + unitName);  } else {    entityManager=entityManager1;    if (log.isDebugEnabled())     log.debug("inherited existing ExtendedEntityManager from SFSB invocation stack, unit name=" + unitName);  }  SFSBXPCMap.RegisterPersistenceContext(entityManager);} @AT@ 6051 @LENGTH@ 571
------UPD IfStatement@@if (entityManager1 == null) {  entityManager1=emf.createEntityManager(properties);  entityManager=new ExtendedEntityManager(unitName,entityManager1);  SFSBXPCMap.RegisterPersistenceContext(entityManager);} else {  entityManager=entityManager1;} @TO@ if (entityManager1 == null) {  entityManager1=emf.createEntityManager(properties);  entityManager=new ExtendedEntityManager(unitName,entityManager1);  if (log.isDebugEnabled())   log.debug("created new ExtendedEntityManager for unit name=" + unitName);} else {  entityManager=entityManager1;  if (log.isDebugEnabled())   log.debug("inherited existing ExtendedEntityManager from SFSB invocation stack, unit name=" + unitName);} @AT@ 6164 @LENGTH@ 443
---------UPD Block@@ThenBody:{  entityManager1=emf.createEntityManager(properties);  entityManager=new ExtendedEntityManager(unitName,entityManager1);  SFSBXPCMap.RegisterPersistenceContext(entityManager);} @TO@ ThenBody:{  entityManager1=emf.createEntityManager(properties);  entityManager=new ExtendedEntityManager(unitName,entityManager1);  if (log.isDebugEnabled())   log.debug("created new ExtendedEntityManager for unit name=" + unitName);} @AT@ 6192 @LENGTH@ 322
------------INS IfStatement@@if (log.isDebugEnabled()) log.debug("created new ExtendedEntityManager for unit name=" + unitName); @TO@ Block@@ThenBody:{  entityManager1=emf.createEntityManager(properties);  entityManager=new ExtendedEntityManager(unitName,entityManager1);  SFSBXPCMap.RegisterPersistenceContext(entityManager);} @AT@ 6631 @LENGTH@ 123
---------------INS MethodInvocation@@log.isDebugEnabled() @TO@ IfStatement@@if (log.isDebugEnabled()) log.debug("created new ExtendedEntityManager for unit name=" + unitName); @AT@ 6635 @LENGTH@ 20
------------------INS SimpleName@@Name:log @TO@ MethodInvocation@@log.isDebugEnabled() @AT@ 6635 @LENGTH@ 3
------------------INS SimpleName@@MethodName:isDebugEnabled:[] @TO@ MethodInvocation@@log.isDebugEnabled() @AT@ 6639 @LENGTH@ 16
---------------INS Block@@ThenBody:log.debug("created new ExtendedEntityManager for unit name=" + unitName); @TO@ IfStatement@@if (log.isDebugEnabled()) log.debug("created new ExtendedEntityManager for unit name=" + unitName); @AT@ 6681 @LENGTH@ 73
------------------INS ExpressionStatement@@MethodInvocation:log.debug("created new ExtendedEntityManager for unit name=" + unitName) @TO@ Block@@ThenBody:log.debug("created new ExtendedEntityManager for unit name=" + unitName); @AT@ 6681 @LENGTH@ 73
---------------------INS MethodInvocation@@log.debug("created new ExtendedEntityManager for unit name=" + unitName) @TO@ ExpressionStatement@@MethodInvocation:log.debug("created new ExtendedEntityManager for unit name=" + unitName) @AT@ 6681 @LENGTH@ 72
------------------------INS SimpleName@@Name:log @TO@ MethodInvocation@@log.debug("created new ExtendedEntityManager for unit name=" + unitName) @AT@ 6681 @LENGTH@ 3
------------------------INS SimpleName@@MethodName:debug:["created new ExtendedEntityManager for unit name=" + unitName] @TO@ MethodInvocation@@log.debug("created new ExtendedEntityManager for unit name=" + unitName) @AT@ 6685 @LENGTH@ 68
---------------------------INS InfixExpression@@"created new ExtendedEntityManager for unit name=" + unitName @TO@ SimpleName@@MethodName:debug:["created new ExtendedEntityManager for unit name=" + unitName] @AT@ 6691 @LENGTH@ 61
------------------------------INS StringLiteral@@"created new ExtendedEntityManager for unit name=" @TO@ InfixExpression@@"created new ExtendedEntityManager for unit name=" + unitName @AT@ 6691 @LENGTH@ 50
------------------------------INS Operator@@+ @TO@ InfixExpression@@"created new ExtendedEntityManager for unit name=" + unitName @AT@ 6741 @LENGTH@ 1
------------------------------INS SimpleName@@unitName @TO@ InfixExpression@@"created new ExtendedEntityManager for unit name=" + unitName @AT@ 6744 @LENGTH@ 8
---------UPD Block@@ElseBody:{  entityManager=entityManager1;} @TO@ ElseBody:{  entityManager=entityManager1;  if (log.isDebugEnabled())   log.debug("inherited existing ExtendedEntityManager from SFSB invocation stack, unit name=" + unitName);} @AT@ 6536 @LENGTH@ 71
------------INS IfStatement@@if (log.isDebugEnabled()) log.debug("inherited existing ExtendedEntityManager from SFSB invocation stack, unit name=" + unitName); @TO@ Block@@ElseBody:{  entityManager=entityManager1;} @AT@ 6869 @LENGTH@ 154
---------------INS MethodInvocation@@log.isDebugEnabled() @TO@ IfStatement@@if (log.isDebugEnabled()) log.debug("inherited existing ExtendedEntityManager from SFSB invocation stack, unit name=" + unitName); @AT@ 6873 @LENGTH@ 20
------------------INS SimpleName@@Name:log @TO@ MethodInvocation@@log.isDebugEnabled() @AT@ 6873 @LENGTH@ 3
------------------INS SimpleName@@MethodName:isDebugEnabled:[] @TO@ MethodInvocation@@log.isDebugEnabled() @AT@ 6877 @LENGTH@ 16
---------------INS Block@@ThenBody:log.debug("inherited existing ExtendedEntityManager from SFSB invocation stack, unit name=" + unitName); @TO@ IfStatement@@if (log.isDebugEnabled()) log.debug("inherited existing ExtendedEntityManager from SFSB invocation stack, unit name=" + unitName); @AT@ 6919 @LENGTH@ 104
------------------INS ExpressionStatement@@MethodInvocation:log.debug("inherited existing ExtendedEntityManager from SFSB invocation stack, unit name=" + unitName) @TO@ Block@@ThenBody:log.debug("inherited existing ExtendedEntityManager from SFSB invocation stack, unit name=" + unitName); @AT@ 6919 @LENGTH@ 104
---------------------INS MethodInvocation@@log.debug("inherited existing ExtendedEntityManager from SFSB invocation stack, unit name=" + unitName) @TO@ ExpressionStatement@@MethodInvocation:log.debug("inherited existing ExtendedEntityManager from SFSB invocation stack, unit name=" + unitName) @AT@ 6919 @LENGTH@ 103
------------------------INS SimpleName@@Name:log @TO@ MethodInvocation@@log.debug("inherited existing ExtendedEntityManager from SFSB invocation stack, unit name=" + unitName) @AT@ 6919 @LENGTH@ 3
------------------------INS SimpleName@@MethodName:debug:["inherited existing ExtendedEntityManager from SFSB invocation stack, unit name=" + unitName] @TO@ MethodInvocation@@log.debug("inherited existing ExtendedEntityManager from SFSB invocation stack, unit name=" + unitName) @AT@ 6923 @LENGTH@ 99
---------------------------INS InfixExpression@@"inherited existing ExtendedEntityManager from SFSB invocation stack, unit name=" + unitName @TO@ SimpleName@@MethodName:debug:["inherited existing ExtendedEntityManager from SFSB invocation stack, unit name=" + unitName] @AT@ 6929 @LENGTH@ 92
------------------------------INS StringLiteral@@"inherited existing ExtendedEntityManager from SFSB invocation stack, unit name=" @TO@ InfixExpression@@"inherited existing ExtendedEntityManager from SFSB invocation stack, unit name=" + unitName @AT@ 6929 @LENGTH@ 81
------------------------------INS Operator@@+ @TO@ InfixExpression@@"inherited existing ExtendedEntityManager from SFSB invocation stack, unit name=" + unitName @AT@ 7010 @LENGTH@ 1
------------------------------INS SimpleName@@unitName @TO@ InfixExpression@@"inherited existing ExtendedEntityManager from SFSB invocation stack, unit name=" + unitName @AT@ 7013 @LENGTH@ 8
------MOV ExpressionStatement@@MethodInvocation:SFSBXPCMap.RegisterPersistenceContext(entityManager) @TO@ Block@@ElseBody:{  EntityManager entityManager1=SFSBCallStack.findPersistenceContext(unitName);  if (entityManager1 == null) {    entityManager1=emf.createEntityManager(properties);    entityManager=new ExtendedEntityManager(unitName,entityManager1);    SFSBXPCMap.RegisterPersistenceContext(entityManager);  } else {    entityManager=entityManager1;  }} @AT@ 6443 @LENGTH@ 53


INS VariableDeclarationStatement@@final DeploymentReplaceHandler drh=new DeploymentReplaceHandler(contentRepository); @TO@ MethodDeclaration@@public, static, void, MethodName:initOperations, final ModelNodeRegistration root, final ContentRepository contentRepository, final ExtensibleConfigurationPersister extensibleConfigurationPersister, ServerEnvironment serverEnvironment,  @AT@ 12760 @LENGTH@ 85
---INS Modifier@@final @TO@ VariableDeclarationStatement@@final DeploymentReplaceHandler drh=new DeploymentReplaceHandler(contentRepository); @AT@ 12760 @LENGTH@ 5
---INS SimpleType@@DeploymentReplaceHandler @TO@ VariableDeclarationStatement@@final DeploymentReplaceHandler drh=new DeploymentReplaceHandler(contentRepository); @AT@ 12766 @LENGTH@ 24
---INS VariableDeclarationFragment@@drh=new DeploymentReplaceHandler(contentRepository) @TO@ VariableDeclarationStatement@@final DeploymentReplaceHandler drh=new DeploymentReplaceHandler(contentRepository); @AT@ 12791 @LENGTH@ 53
------INS SimpleName@@drh @TO@ VariableDeclarationFragment@@drh=new DeploymentReplaceHandler(contentRepository) @AT@ 12791 @LENGTH@ 3
------INS ClassInstanceCreation@@DeploymentReplaceHandler[contentRepository] @TO@ VariableDeclarationFragment@@drh=new DeploymentReplaceHandler(contentRepository) @AT@ 12797 @LENGTH@ 47
---------INS New@@new @TO@ ClassInstanceCreation@@DeploymentReplaceHandler[contentRepository] @AT@ 12797 @LENGTH@ 3
---------INS SimpleType@@DeploymentReplaceHandler @TO@ ClassInstanceCreation@@DeploymentReplaceHandler[contentRepository] @AT@ 12801 @LENGTH@ 24
---------INS SimpleName@@contentRepository @TO@ ClassInstanceCreation@@DeploymentReplaceHandler[contentRepository] @AT@ 12826 @LENGTH@ 17


INS VariableDeclarationStatement@@String name=String.valueOf(profileMap.get("name")); @TO@ MethodDeclaration@@public, FacebookProfile, MethodName:getUserProfile, String facebookId,  @AT@ 2901 @LENGTH@ 53
---INS SimpleType@@String @TO@ VariableDeclarationStatement@@String name=String.valueOf(profileMap.get("name")); @AT@ 2901 @LENGTH@ 6
---INS VariableDeclarationFragment@@name=String.valueOf(profileMap.get("name")) @TO@ VariableDeclarationStatement@@String name=String.valueOf(profileMap.get("name")); @AT@ 2908 @LENGTH@ 45
------INS SimpleName@@name @TO@ VariableDeclarationFragment@@name=String.valueOf(profileMap.get("name")) @AT@ 2908 @LENGTH@ 4
------INS MethodInvocation@@String.valueOf(profileMap.get("name")) @TO@ VariableDeclarationFragment@@name=String.valueOf(profileMap.get("name")) @AT@ 2915 @LENGTH@ 38
---------INS SimpleName@@Name:String @TO@ MethodInvocation@@String.valueOf(profileMap.get("name")) @AT@ 2915 @LENGTH@ 6
---------INS SimpleName@@MethodName:valueOf:[profileMap.get("name")] @TO@ MethodInvocation@@String.valueOf(profileMap.get("name")) @AT@ 2922 @LENGTH@ 31
------------INS MethodInvocation@@profileMap.get("name") @TO@ SimpleName@@MethodName:valueOf:[profileMap.get("name")] @AT@ 2930 @LENGTH@ 22
---------------INS SimpleName@@Name:profileMap @TO@ MethodInvocation@@profileMap.get("name") @AT@ 2930 @LENGTH@ 10
---------------INS SimpleName@@MethodName:get:["name"] @TO@ MethodInvocation@@profileMap.get("name") @AT@ 2941 @LENGTH@ 11
------------------INS StringLiteral@@"name" @TO@ SimpleName@@MethodName:get:["name"] @AT@ 2945 @LENGTH@ 6


UPD FieldDeclaration@@private, Application, [application] @TO@ private, volatile, Application, [application] @AT@ 1087 @LENGTH@ 32
---INS Modifier@@volatile @TO@ FieldDeclaration@@private, Application, [application] @AT@ 1092 @LENGTH@ 8


UPD TypeDeclaration@@[private]MyCustomRoutePolicy, RoutePolicySupport @TO@ [private, final]MyCustomRoutePolicy, RoutePolicySupport @AT@ 1362 @LENGTH@ 348
---INS Modifier@@final @TO@ TypeDeclaration@@[private]MyCustomRoutePolicy, RoutePolicySupport @AT@ 1370 @LENGTH@ 5


DEL ExpressionStatement@@MethodInvocation:prepareMailbox() @AT@ 1495 @LENGTH@ 17
---DEL MethodInvocation@@MethodName:prepareMailbox:[] @AT@ 1495 @LENGTH@ 16


UPD MethodDeclaration@@public, voidMethodName:StatelessSessionComponent, final EJBComponentCreateService ejbComponentCreateService,  @TO@ public, voidMethodName:StatelessSessionComponent, final SessionBeanComponentCreateService ejbComponentCreateService,  @AT@ 2283 @LENGTH@ 721
---UPD SingleVariableDeclaration@@final EJBComponentCreateService ejbComponentCreateService @TO@ final SessionBeanComponentCreateService ejbComponentCreateService @AT@ 2316 @LENGTH@ 57
------UPD SimpleType@@EJBComponentCreateService @TO@ SessionBeanComponentCreateService @AT@ 2322 @LENGTH@ 25


INS MethodDeclaration@@public, static, ModelNode, MethodName:getShutdownOperationDescription, final Locale locale,  @TO@ TypeDeclaration@@[public]ServerRootDescription,  @AT@ 8576 @LENGTH@ 430
---INS Modifier@@public @TO@ MethodDeclaration@@public, static, ModelNode, MethodName:getShutdownOperationDescription, final Locale locale,  @AT@ 8576 @LENGTH@ 6
---INS Modifier@@static @TO@ MethodDeclaration@@public, static, ModelNode, MethodName:getShutdownOperationDescription, final Locale locale,  @AT@ 8583 @LENGTH@ 6
---INS SimpleType@@ModelNode @TO@ MethodDeclaration@@public, static, ModelNode, MethodName:getShutdownOperationDescription, final Locale locale,  @AT@ 8590 @LENGTH@ 9
---INS SimpleName@@MethodName:getShutdownOperationDescription @TO@ MethodDeclaration@@public, static, ModelNode, MethodName:getShutdownOperationDescription, final Locale locale,  @AT@ 8600 @LENGTH@ 31
---INS SingleVariableDeclaration@@final Locale locale @TO@ MethodDeclaration@@public, static, ModelNode, MethodName:getShutdownOperationDescription, final Locale locale,  @AT@ 8632 @LENGTH@ 19
------INS Modifier@@final @TO@ SingleVariableDeclaration@@final Locale locale @AT@ 8632 @LENGTH@ 5
------INS SimpleType@@Locale @TO@ SingleVariableDeclaration@@final Locale locale @AT@ 8638 @LENGTH@ 6
------INS SimpleName@@locale @TO@ SingleVariableDeclaration@@final Locale locale @AT@ 8645 @LENGTH@ 6
---INS VariableDeclarationStatement@@ResourceBundle bundle=getResourceBundle(locale); @TO@ MethodDeclaration@@public, static, ModelNode, MethodName:getShutdownOperationDescription, final Locale locale,  @AT@ 8663 @LENGTH@ 50
------INS SimpleType@@ResourceBundle @TO@ VariableDeclarationStatement@@ResourceBundle bundle=getResourceBundle(locale); @AT@ 8663 @LENGTH@ 14
------INS VariableDeclarationFragment@@bundle=getResourceBundle(locale) @TO@ VariableDeclarationStatement@@ResourceBundle bundle=getResourceBundle(locale); @AT@ 8678 @LENGTH@ 34
---------INS SimpleName@@bundle @TO@ VariableDeclarationFragment@@bundle=getResourceBundle(locale) @AT@ 8678 @LENGTH@ 6
---------INS MethodInvocation@@getResourceBundle(locale) @TO@ VariableDeclarationFragment@@bundle=getResourceBundle(locale) @AT@ 8687 @LENGTH@ 25
------------INS SimpleName@@MethodName:getResourceBundle:[locale] @TO@ MethodInvocation@@getResourceBundle(locale) @AT@ 8687 @LENGTH@ 25
---------------INS SimpleName@@locale @TO@ SimpleName@@MethodName:getResourceBundle:[locale] @AT@ 8705 @LENGTH@ 6
---INS VariableDeclarationStatement@@ModelNode node=new ModelNode(); @TO@ MethodDeclaration@@public, static, ModelNode, MethodName:getShutdownOperationDescription, final Locale locale,  @AT@ 8723 @LENGTH@ 33
------INS SimpleType@@ModelNode @TO@ VariableDeclarationStatement@@ModelNode node=new ModelNode(); @AT@ 8723 @LENGTH@ 9
------INS VariableDeclarationFragment@@node=new ModelNode() @TO@ VariableDeclarationStatement@@ModelNode node=new ModelNode(); @AT@ 8733 @LENGTH@ 22
---------INS SimpleName@@node @TO@ VariableDeclarationFragment@@node=new ModelNode() @AT@ 8733 @LENGTH@ 4
---------INS ClassInstanceCreation@@ModelNode[] @TO@ VariableDeclarationFragment@@node=new ModelNode() @AT@ 8740 @LENGTH@ 15
------------INS New@@new @TO@ ClassInstanceCreation@@ModelNode[] @AT@ 8740 @LENGTH@ 3
------------INS SimpleType@@ModelNode @TO@ ClassInstanceCreation@@ModelNode[] @AT@ 8744 @LENGTH@ 9
---INS ExpressionStatement@@MethodInvocation:node.get(OPERATION_NAME).set("shutdown") @TO@ MethodDeclaration@@public, static, ModelNode, MethodName:getShutdownOperationDescription, final Locale locale,  @AT@ 8765 @LENGTH@ 41
------INS MethodInvocation@@node.get(OPERATION_NAME).set("shutdown") @TO@ ExpressionStatement@@MethodInvocation:node.get(OPERATION_NAME).set("shutdown") @AT@ 8765 @LENGTH@ 40
---------INS MethodInvocation@@MethodName:get:[OPERATION_NAME] @TO@ MethodInvocation@@node.get(OPERATION_NAME).set("shutdown") @AT@ 8765 @LENGTH@ 24
------------INS SimpleName@@OPERATION_NAME @TO@ MethodInvocation@@MethodName:get:[OPERATION_NAME] @AT@ 8774 @LENGTH@ 14
---------INS SimpleName@@Name:node @TO@ MethodInvocation@@node.get(OPERATION_NAME).set("shutdown") @AT@ 8765 @LENGTH@ 4
---------INS SimpleName@@MethodName:set:["shutdown"] @TO@ MethodInvocation@@node.get(OPERATION_NAME).set("shutdown") @AT@ 8790 @LENGTH@ 15
------------INS StringLiteral@@"shutdown" @TO@ SimpleName@@MethodName:set:["shutdown"] @AT@ 8794 @LENGTH@ 10
---INS ExpressionStatement@@MethodInvocation:node.get(DESCRIPTION).set(bundle.getString("shutdown")) @TO@ MethodDeclaration@@public, static, ModelNode, MethodName:getShutdownOperationDescription, final Locale locale,  @AT@ 8815 @LENGTH@ 56
------INS MethodInvocation@@node.get(DESCRIPTION).set(bundle.getString("shutdown")) @TO@ ExpressionStatement@@MethodInvocation:node.get(DESCRIPTION).set(bundle.getString("shutdown")) @AT@ 8815 @LENGTH@ 55
---------INS MethodInvocation@@MethodName:get:[DESCRIPTION] @TO@ MethodInvocation@@node.get(DESCRIPTION).set(bundle.getString("shutdown")) @AT@ 8815 @LENGTH@ 21
------------INS SimpleName@@DESCRIPTION @TO@ MethodInvocation@@MethodName:get:[DESCRIPTION] @AT@ 8824 @LENGTH@ 11
---------INS SimpleName@@Name:node @TO@ MethodInvocation@@node.get(DESCRIPTION).set(bundle.getString("shutdown")) @AT@ 8815 @LENGTH@ 4
---------INS SimpleName@@MethodName:set:[bundle.getString("shutdown")] @TO@ MethodInvocation@@node.get(DESCRIPTION).set(bundle.getString("shutdown")) @AT@ 8837 @LENGTH@ 33
------------INS MethodInvocation@@bundle.getString("shutdown") @TO@ SimpleName@@MethodName:set:[bundle.getString("shutdown")] @AT@ 8841 @LENGTH@ 28
---------------INS SimpleName@@Name:bundle @TO@ MethodInvocation@@bundle.getString("shutdown") @AT@ 8841 @LENGTH@ 6
---------------INS SimpleName@@MethodName:getString:["shutdown"] @TO@ MethodInvocation@@bundle.getString("shutdown") @AT@ 8848 @LENGTH@ 21
------------------INS StringLiteral@@"shutdown" @TO@ SimpleName@@MethodName:getString:["shutdown"] @AT@ 8858 @LENGTH@ 10
---INS ExpressionStatement@@MethodInvocation:node.get(REQUEST_PROPERTIES).setEmptyObject() @TO@ MethodDeclaration@@public, static, ModelNode, MethodName:getShutdownOperationDescription, final Locale locale,  @AT@ 8880 @LENGTH@ 46
------INS MethodInvocation@@node.get(REQUEST_PROPERTIES).setEmptyObject() @TO@ ExpressionStatement@@MethodInvocation:node.get(REQUEST_PROPERTIES).setEmptyObject() @AT@ 8880 @LENGTH@ 45
---------INS MethodInvocation@@MethodName:get:[REQUEST_PROPERTIES] @TO@ MethodInvocation@@node.get(REQUEST_PROPERTIES).setEmptyObject() @AT@ 8880 @LENGTH@ 28
------------INS SimpleName@@REQUEST_PROPERTIES @TO@ MethodInvocation@@MethodName:get:[REQUEST_PROPERTIES] @AT@ 8889 @LENGTH@ 18
---------INS SimpleName@@Name:node @TO@ MethodInvocation@@node.get(REQUEST_PROPERTIES).setEmptyObject() @AT@ 8880 @LENGTH@ 4
---------INS SimpleName@@MethodName:setEmptyObject:[] @TO@ MethodInvocation@@node.get(REQUEST_PROPERTIES).setEmptyObject() @AT@ 8909 @LENGTH@ 16
---INS ExpressionStatement@@MethodInvocation:node.get(REPLY_PROPERTIES).setEmptyObject() @TO@ MethodDeclaration@@public, static, ModelNode, MethodName:getShutdownOperationDescription, final Locale locale,  @AT@ 8935 @LENGTH@ 44
------INS MethodInvocation@@node.get(REPLY_PROPERTIES).setEmptyObject() @TO@ ExpressionStatement@@MethodInvocation:node.get(REPLY_PROPERTIES).setEmptyObject() @AT@ 8935 @LENGTH@ 43
---------INS MethodInvocation@@MethodName:get:[REPLY_PROPERTIES] @TO@ MethodInvocation@@node.get(REPLY_PROPERTIES).setEmptyObject() @AT@ 8935 @LENGTH@ 26
------------INS SimpleName@@REPLY_PROPERTIES @TO@ MethodInvocation@@MethodName:get:[REPLY_PROPERTIES] @AT@ 8944 @LENGTH@ 16
---------INS SimpleName@@Name:node @TO@ MethodInvocation@@node.get(REPLY_PROPERTIES).setEmptyObject() @AT@ 8935 @LENGTH@ 4
---------INS SimpleName@@MethodName:setEmptyObject:[] @TO@ MethodInvocation@@node.get(REPLY_PROPERTIES).setEmptyObject() @AT@ 8962 @LENGTH@ 16
---INS ReturnStatement@@SimpleName:node @TO@ MethodDeclaration@@public, static, ModelNode, MethodName:getShutdownOperationDescription, final Locale locale,  @AT@ 8988 @LENGTH@ 12
------INS SimpleName@@node @TO@ ReturnStatement@@SimpleName:node @AT@ 8995 @LENGTH@ 4


UPD ExpressionStatement@@MethodInvocation:bootContext.addDeploymentProcessor(Phase.PARSE,Phase.PARSE_WELD_EJB_INTERCEPTORS_INTEGRATION,new WeldEjbInterceptorIntegrationProcessor()) @TO@ MethodInvocation:bootContext.addDeploymentProcessor(Phase.POST_MODULE,Phase.POST_MODULE_WELD_EJB_INTERCEPTORS_INTEGRATION,new WeldEjbInterceptorIntegrationProcessor()) @AT@ 3647 @LENGTH@ 141
---UPD MethodInvocation@@bootContext.addDeploymentProcessor(Phase.PARSE,Phase.PARSE_WELD_EJB_INTERCEPTORS_INTEGRATION,new WeldEjbInterceptorIntegrationProcessor()) @TO@ bootContext.addDeploymentProcessor(Phase.POST_MODULE,Phase.POST_MODULE_WELD_EJB_INTERCEPTORS_INTEGRATION,new WeldEjbInterceptorIntegrationProcessor()) @AT@ 3647 @LENGTH@ 140
------UPD SimpleName@@MethodName:addDeploymentProcessor:[Phase.PARSE, Phase.PARSE_WELD_EJB_INTERCEPTORS_INTEGRATION, new WeldEjbInterceptorIntegrationProcessor()] @TO@ MethodName:addDeploymentProcessor:[Phase.POST_MODULE, Phase.POST_MODULE_WELD_EJB_INTERCEPTORS_INTEGRATION, new WeldEjbInterceptorIntegrationProcessor()] @AT@ 3659 @LENGTH@ 128
---------UPD QualifiedName@@Phase.PARSE @TO@ Phase.POST_MODULE @AT@ 3682 @LENGTH@ 11
------------UPD SimpleName@@PARSE @TO@ POST_MODULE @AT@ 3688 @LENGTH@ 5
---------UPD QualifiedName@@Phase.PARSE_WELD_EJB_INTERCEPTORS_INTEGRATION @TO@ Phase.POST_MODULE_WELD_EJB_INTERCEPTORS_INTEGRATION @AT@ 3695 @LENGTH@ 45
------------UPD SimpleName@@PARSE_WELD_EJB_INTERCEPTORS_INTEGRATION @TO@ POST_MODULE_WELD_EJB_INTERCEPTORS_INTEGRATION @AT@ 3701 @LENGTH@ 39


UPD VariableDeclarationStatement@@ModelNode update=Util.getWriteAttributeOperation(address,"socket-binding-group",name); @TO@ ModelNode update=Util.getWriteAttributeOperation(address,SOCKET_BINDING_GROUP,name); @AT@ 51489 @LENGTH@ 90
---UPD VariableDeclarationFragment@@update=Util.getWriteAttributeOperation(address,"socket-binding-group",name) @TO@ update=Util.getWriteAttributeOperation(address,SOCKET_BINDING_GROUP,name) @AT@ 51499 @LENGTH@ 79
------UPD MethodInvocation@@Util.getWriteAttributeOperation(address,"socket-binding-group",name) @TO@ Util.getWriteAttributeOperation(address,SOCKET_BINDING_GROUP,name) @AT@ 51508 @LENGTH@ 70
---------UPD SimpleName@@MethodName:getWriteAttributeOperation:[address, "socket-binding-group", name] @TO@ MethodName:getWriteAttributeOperation:[address, SOCKET_BINDING_GROUP, name] @AT@ 51513 @LENGTH@ 65
------------DEL StringLiteral@@"socket-binding-group" @AT@ 51549 @LENGTH@ 22
------------INS SimpleName@@SOCKET_BINDING_GROUP @TO@ SimpleName@@MethodName:getWriteAttributeOperation:[address, "socket-binding-group", name] @AT@ 51753 @LENGTH@ 20


UPD IfStatement@@if (converter != null && beanFactory instanceof ConfigurableBeanFactory) {  ConfigurableBeanFactory cFB=(ConfigurableBeanFactory)beanFactory;  ConversionService conversionService=cFB.getConversionService();  converter=(conversionService != null ? new Converter(conversionService) : new Converter(cFB.getTypeConverter()));} @TO@ if (converter == null && beanFactory instanceof ConfigurableBeanFactory) {  ConfigurableBeanFactory cFB=(ConfigurableBeanFactory)beanFactory;  ConversionService conversionService=cFB.getConversionService();  converter=(conversionService != null ? new Converter(conversionService) : new Converter(cFB.getTypeConverter()));} @AT@ 2786 @LENGTH@ 345
---UPD InfixExpression@@converter != null && beanFactory instanceof ConfigurableBeanFactory @TO@ converter == null && beanFactory instanceof ConfigurableBeanFactory @AT@ 2790 @LENGTH@ 67
------UPD InfixExpression@@converter != null @TO@ converter == null @AT@ 2790 @LENGTH@ 17
---------UPD Operator@@!= @TO@ == @AT@ 2799 @LENGTH@ 2


UPD EnhancedForStatement@@for (InterceptorDescription interceptorDescription : interceptors.values()) {  final String interceptorClassName=interceptorDescription.getInterceptorClassName();  new ClassDescriptionTraversal(moduleConfiguration.getClassConfiguration(interceptorClassName),moduleConfiguration){    @Override public void handle(    EEModuleClassConfiguration interceptorClassConfiguration,    EEModuleClassDescription classDescription) throws DeploymentUnitProcessingException {      final ClassReflectionIndex<?> interceptorClassIndex=index.getClassIndex(interceptorClassConfiguration.getModuleClass());      final Object contextKey=new Object();      instantiators.addFirst(new ManagedReferenceInterceptorFactory(interceptorClassConfiguration.getInstantiator(),contextKey));      destructors.addLast(new ManagedReferenceReleaseInterceptorFactory(contextKey));      for (      final ResourceInjectionConfiguration injectionConfiguration : interceptorClassConfiguration.getInjectionConfigurations()) {        final Object valueContextKey=new Object();        final InjectedValue<ManagedReferenceFactory> managedReferenceFactoryValue=new InjectedValue<ManagedReferenceFactory>();        configuration.getStartDependencies().add(new InjectedConfigurator(injectionConfiguration,configuration,context,managedReferenceFactoryValue));        injectors.addFirst(injectionConfiguration.getTarget().createInjectionInterceptorFactory(contextKey,valueContextKey,managedReferenceFactoryValue,deploymentUnit));        uninjectors.addLast(new ManagedReferenceReleaseInterceptorFactory(valueContextKey));      }      final MethodIdentifier postConstructMethod=classDescription.getPostConstructMethod();      if (postConstructMethod != null) {        Method method=interceptorClassIndex.getMethod(postConstructMethod);        InterceptorFactory interceptorFactory=new ManagedReferenceLifecycleMethodInterceptorFactory(contextKey,method,true);        userPostConstruct.addLast(interceptorFactory);      }      final MethodIdentifier preDestroyMethod=classDescription.getPreDestroyMethod();      if (preDestroyMethod != null) {        Method method=interceptorClassIndex.getMethod(preDestroyMethod);        InterceptorFactory interceptorFactory=new ManagedReferenceLifecycleMethodInterceptorFactory(contextKey,method,true);        userPreDestroy.addLast(interceptorFactory);      }      final MethodIdentifier aroundInvokeMethod=classDescription.getAroundInvokeMethod();      if (aroundInvokeMethod != null) {        Method method=interceptorClassIndex.getMethod(aroundInvokeMethod);        List<InterceptorFactory> interceptors;        if ((interceptors=userAroundInvokesByInterceptorClass.get(interceptorClassName)) == null) {          userAroundInvokesByInterceptorClass.put(interceptorClassName,interceptors=new ArrayList<InterceptorFactory>());        }        interceptors.add(new ManagedReferenceLifecycleMethodInterceptorFactory(contextKey,method,false));      }    }  }.run();} @TO@ for (InterceptorDescription interceptorDescription : interceptors.values()) {  final String interceptorClassName=interceptorDescription.getInterceptorClassName();  final EEModuleClassConfiguration interceptorConfiguration=moduleConfiguration.getClassConfiguration(interceptorClassName);  final Object contextKey=new Object();  instantiators.addFirst(new ManagedReferenceInterceptorFactory(interceptorConfiguration.getInstantiator(),contextKey));  destructors.addLast(new ManagedReferenceReleaseInterceptorFactory(contextKey));  new ClassDescriptionTraversal(interceptorConfiguration,moduleConfiguration){    @Override public void handle(    EEModuleClassConfiguration interceptorClassConfiguration,    EEModuleClassDescription classDescription) throws DeploymentUnitProcessingException {      final ClassReflectionIndex<?> interceptorClassIndex=index.getClassIndex(interceptorClassConfiguration.getModuleClass());      for (      final ResourceInjectionConfiguration injectionConfiguration : interceptorClassConfiguration.getInjectionConfigurations()) {        final Object valueContextKey=new Object();        final InjectedValue<ManagedReferenceFactory> managedReferenceFactoryValue=new InjectedValue<ManagedReferenceFactory>();        configuration.getStartDependencies().add(new InjectedConfigurator(injectionConfiguration,configuration,context,managedReferenceFactoryValue));        injectors.addFirst(injectionConfiguration.getTarget().createInjectionInterceptorFactory(contextKey,valueContextKey,managedReferenceFactoryValue,deploymentUnit));        uninjectors.addLast(new ManagedReferenceReleaseInterceptorFactory(valueContextKey));      }      final MethodIdentifier postConstructMethod=classDescription.getPostConstructMethod();      if (postConstructMethod != null) {        Method method=interceptorClassIndex.getMethod(postConstructMethod);        InterceptorFactory interceptorFactory=new ManagedReferenceLifecycleMethodInterceptorFactory(contextKey,method,true);        userPostConstruct.addLast(interceptorFactory);      }      final MethodIdentifier preDestroyMethod=classDescription.getPreDestroyMethod();      if (preDestroyMethod != null) {        Method method=interceptorClassIndex.getMethod(preDestroyMethod);        InterceptorFactory interceptorFactory=new ManagedReferenceLifecycleMethodInterceptorFactory(contextKey,method,true);        userPreDestroy.addLast(interceptorFactory);      }      final MethodIdentifier aroundInvokeMethod=classDescription.getAroundInvokeMethod();      if (aroundInvokeMethod != null) {        Method method=interceptorClassIndex.getMethod(aroundInvokeMethod);        List<InterceptorFactory> interceptors;        if ((interceptors=userAroundInvokesByInterceptorClass.get(interceptorClassName)) == null) {          userAroundInvokesByInterceptorClass.put(interceptorClassName,interceptors=new ArrayList<InterceptorFactory>());        }        interceptors.add(new ManagedReferenceLifecycleMethodInterceptorFactory(contextKey,method,false));      }    }  }.run();} @AT@ 17939 @LENGTH@ 3742
---INS VariableDeclarationStatement@@final EEModuleClassConfiguration interceptorConfiguration=moduleConfiguration.getClassConfiguration(interceptorClassName); @TO@ EnhancedForStatement@@for (InterceptorDescription interceptorDescription : interceptors.values()) {  final String interceptorClassName=interceptorDescription.getInterceptorClassName();  new ClassDescriptionTraversal(moduleConfiguration.getClassConfiguration(interceptorClassName),moduleConfiguration){    @Override public void handle(    EEModuleClassConfiguration interceptorClassConfiguration,    EEModuleClassDescription classDescription) throws DeploymentUnitProcessingException {      final ClassReflectionIndex<?> interceptorClassIndex=index.getClassIndex(interceptorClassConfiguration.getModuleClass());      final Object contextKey=new Object();      instantiators.addFirst(new ManagedReferenceInterceptorFactory(interceptorClassConfiguration.getInstantiator(),contextKey));      destructors.addLast(new ManagedReferenceReleaseInterceptorFactory(contextKey));      for (      final ResourceInjectionConfiguration injectionConfiguration : interceptorClassConfiguration.getInjectionConfigurations()) {        final Object valueContextKey=new Object();        final InjectedValue<ManagedReferenceFactory> managedReferenceFactoryValue=new InjectedValue<ManagedReferenceFactory>();        configuration.getStartDependencies().add(new InjectedConfigurator(injectionConfiguration,configuration,context,managedReferenceFactoryValue));        injectors.addFirst(injectionConfiguration.getTarget().createInjectionInterceptorFactory(contextKey,valueContextKey,managedReferenceFactoryValue,deploymentUnit));        uninjectors.addLast(new ManagedReferenceReleaseInterceptorFactory(valueContextKey));      }      final MethodIdentifier postConstructMethod=classDescription.getPostConstructMethod();      if (postConstructMethod != null) {        Method method=interceptorClassIndex.getMethod(postConstructMethod);        InterceptorFactory interceptorFactory=new ManagedReferenceLifecycleMethodInterceptorFactory(contextKey,method,true);        userPostConstruct.addLast(interceptorFactory);      }      final MethodIdentifier preDestroyMethod=classDescription.getPreDestroyMethod();      if (preDestroyMethod != null) {        Method method=interceptorClassIndex.getMethod(preDestroyMethod);        InterceptorFactory interceptorFactory=new ManagedReferenceLifecycleMethodInterceptorFactory(contextKey,method,true);        userPreDestroy.addLast(interceptorFactory);      }      final MethodIdentifier aroundInvokeMethod=classDescription.getAroundInvokeMethod();      if (aroundInvokeMethod != null) {        Method method=interceptorClassIndex.getMethod(aroundInvokeMethod);        List<InterceptorFactory> interceptors;        if ((interceptors=userAroundInvokesByInterceptorClass.get(interceptorClassName)) == null) {          userAroundInvokesByInterceptorClass.put(interceptorClassName,interceptors=new ArrayList<InterceptorFactory>());        }        interceptors.add(new ManagedReferenceLifecycleMethodInterceptorFactory(contextKey,method,false));      }    }  }.run();} @AT@ 18135 @LENGTH@ 124
------INS Modifier@@final @TO@ VariableDeclarationStatement@@final EEModuleClassConfiguration interceptorConfiguration=moduleConfiguration.getClassConfiguration(interceptorClassName); @AT@ 18135 @LENGTH@ 5
------INS SimpleType@@EEModuleClassConfiguration @TO@ VariableDeclarationStatement@@final EEModuleClassConfiguration interceptorConfiguration=moduleConfiguration.getClassConfiguration(interceptorClassName); @AT@ 18141 @LENGTH@ 26
------INS VariableDeclarationFragment@@interceptorConfiguration=moduleConfiguration.getClassConfiguration(interceptorClassName) @TO@ VariableDeclarationStatement@@final EEModuleClassConfiguration interceptorConfiguration=moduleConfiguration.getClassConfiguration(interceptorClassName); @AT@ 18168 @LENGTH@ 90
---------MOV MethodInvocation@@moduleConfiguration.getClassConfiguration(interceptorClassName) @TO@ VariableDeclarationFragment@@interceptorConfiguration=moduleConfiguration.getClassConfiguration(interceptorClassName) @AT@ 18166 @LENGTH@ 63
---------INS SimpleName@@interceptorConfiguration @TO@ VariableDeclarationFragment@@interceptorConfiguration=moduleConfiguration.getClassConfiguration(interceptorClassName) @AT@ 18168 @LENGTH@ 24
---UPD ExpressionStatement@@MethodInvocation:new ClassDescriptionTraversal(moduleConfiguration.getClassConfiguration(interceptorClassName),moduleConfiguration){
  @Override public void handle(  EEModuleClassConfiguration interceptorClassConfiguration,  EEModuleClassDescription classDescription) throws DeploymentUnitProcessingException {
    final ClassReflectionIndex<?> interceptorClassIndex=index.getClassIndex(interceptorClassConfiguration.getModuleClass());
    final Object contextKey=new Object();
    instantiators.addFirst(new ManagedReferenceInterceptorFactory(interceptorClassConfiguration.getInstantiator(),contextKey));
    destructors.addLast(new ManagedReferenceReleaseInterceptorFactory(contextKey));
    for (    final ResourceInjectionConfiguration injectionConfiguration : interceptorClassConfiguration.getInjectionConfigurations()) {
      final Object valueContextKey=new Object();
      final InjectedValue<ManagedReferenceFactory> managedReferenceFactoryValue=new InjectedValue<ManagedReferenceFactory>();
      configuration.getStartDependencies().add(new InjectedConfigurator(injectionConfiguration,configuration,context,managedReferenceFactoryValue));
      injectors.addFirst(injectionConfiguration.getTarget().createInjectionInterceptorFactory(contextKey,valueContextKey,managedReferenceFactoryValue,deploymentUnit));
      uninjectors.addLast(new ManagedReferenceReleaseInterceptorFactory(valueContextKey));
    }
    final MethodIdentifier postConstructMethod=classDescription.getPostConstructMethod();
    if (postConstructMethod != null) {
      Method method=interceptorClassIndex.getMethod(postConstructMethod);
      InterceptorFactory interceptorFactory=new ManagedReferenceLifecycleMethodInterceptorFactory(contextKey,method,true);
      userPostConstruct.addLast(interceptorFactory);
    }
    final MethodIdentifier preDestroyMethod=classDescription.getPreDestroyMethod();
    if (preDestroyMethod != null) {
      Method method=interceptorClassIndex.getMethod(preDestroyMethod);
      InterceptorFactory interceptorFactory=new ManagedReferenceLifecycleMethodInterceptorFactory(contextKey,method,true);
      userPreDestroy.addLast(interceptorFactory);
    }
    final MethodIdentifier aroundInvokeMethod=classDescription.getAroundInvokeMethod();
    if (aroundInvokeMethod != null) {
      Method method=interceptorClassIndex.getMethod(aroundInvokeMethod);
      List<InterceptorFactory> interceptors;
      if ((interceptors=userAroundInvokesByInterceptorClass.get(interceptorClassName)) == null) {
        userAroundInvokesByInterceptorClass.put(interceptorClassName,interceptors=new ArrayList<InterceptorFactory>());
      }
      interceptors.add(new ManagedReferenceLifecycleMethodInterceptorFactory(contextKey,method,false));
    }
  }
}
.run() @TO@ MethodInvocation:new ClassDescriptionTraversal(interceptorConfiguration,moduleConfiguration){
  @Override public void handle(  EEModuleClassConfiguration interceptorClassConfiguration,  EEModuleClassDescription classDescription) throws DeploymentUnitProcessingException {
    final ClassReflectionIndex<?> interceptorClassIndex=index.getClassIndex(interceptorClassConfiguration.getModuleClass());
    for (    final ResourceInjectionConfiguration injectionConfiguration : interceptorClassConfiguration.getInjectionConfigurations()) {
      final Object valueContextKey=new Object();
      final InjectedValue<ManagedReferenceFactory> managedReferenceFactoryValue=new InjectedValue<ManagedReferenceFactory>();
      configuration.getStartDependencies().add(new InjectedConfigurator(injectionConfiguration,configuration,context,managedReferenceFactoryValue));
      injectors.addFirst(injectionConfiguration.getTarget().createInjectionInterceptorFactory(contextKey,valueContextKey,managedReferenceFactoryValue,deploymentUnit));
      uninjectors.addLast(new ManagedReferenceReleaseInterceptorFactory(valueContextKey));
    }
    final MethodIdentifier postConstructMethod=classDescription.getPostConstructMethod();
    if (postConstructMethod != null) {
      Method method=interceptorClassIndex.getMethod(postConstructMethod);
      InterceptorFactory interceptorFactory=new ManagedReferenceLifecycleMethodInterceptorFactory(contextKey,method,true);
      userPostConstruct.addLast(interceptorFactory);
    }
    final MethodIdentifier preDestroyMethod=classDescription.getPreDestroyMethod();
    if (preDestroyMethod != null) {
      Method method=interceptorClassIndex.getMethod(preDestroyMethod);
      InterceptorFactory interceptorFactory=new ManagedReferenceLifecycleMethodInterceptorFactory(contextKey,method,true);
      userPreDestroy.addLast(interceptorFactory);
    }
    final MethodIdentifier aroundInvokeMethod=classDescription.getAroundInvokeMethod();
    if (aroundInvokeMethod != null) {
      Method method=interceptorClassIndex.getMethod(aroundInvokeMethod);
      List<InterceptorFactory> interceptors;
      if ((interceptors=userAroundInvokesByInterceptorClass.get(interceptorClassName)) == null) {
        userAroundInvokesByInterceptorClass.put(interceptorClassName,interceptors=new ArrayList<InterceptorFactory>());
      }
      interceptors.add(new ManagedReferenceLifecycleMethodInterceptorFactory(contextKey,method,false));
    }
  }
}
.run() @AT@ 18136 @LENGTH@ 3531
------UPD MethodInvocation@@new ClassDescriptionTraversal(moduleConfiguration.getClassConfiguration(interceptorClassName),moduleConfiguration){
  @Override public void handle(  EEModuleClassConfiguration interceptorClassConfiguration,  EEModuleClassDescription classDescription) throws DeploymentUnitProcessingException {
    final ClassReflectionIndex<?> interceptorClassIndex=index.getClassIndex(interceptorClassConfiguration.getModuleClass());
    final Object contextKey=new Object();
    instantiators.addFirst(new ManagedReferenceInterceptorFactory(interceptorClassConfiguration.getInstantiator(),contextKey));
    destructors.addLast(new ManagedReferenceReleaseInterceptorFactory(contextKey));
    for (    final ResourceInjectionConfiguration injectionConfiguration : interceptorClassConfiguration.getInjectionConfigurations()) {
      final Object valueContextKey=new Object();
      final InjectedValue<ManagedReferenceFactory> managedReferenceFactoryValue=new InjectedValue<ManagedReferenceFactory>();
      configuration.getStartDependencies().add(new InjectedConfigurator(injectionConfiguration,configuration,context,managedReferenceFactoryValue));
      injectors.addFirst(injectionConfiguration.getTarget().createInjectionInterceptorFactory(contextKey,valueContextKey,managedReferenceFactoryValue,deploymentUnit));
      uninjectors.addLast(new ManagedReferenceReleaseInterceptorFactory(valueContextKey));
    }
    final MethodIdentifier postConstructMethod=classDescription.getPostConstructMethod();
    if (postConstructMethod != null) {
      Method method=interceptorClassIndex.getMethod(postConstructMethod);
      InterceptorFactory interceptorFactory=new ManagedReferenceLifecycleMethodInterceptorFactory(contextKey,method,true);
      userPostConstruct.addLast(interceptorFactory);
    }
    final MethodIdentifier preDestroyMethod=classDescription.getPreDestroyMethod();
    if (preDestroyMethod != null) {
      Method method=interceptorClassIndex.getMethod(preDestroyMethod);
      InterceptorFactory interceptorFactory=new ManagedReferenceLifecycleMethodInterceptorFactory(contextKey,method,true);
      userPreDestroy.addLast(interceptorFactory);
    }
    final MethodIdentifier aroundInvokeMethod=classDescription.getAroundInvokeMethod();
    if (aroundInvokeMethod != null) {
      Method method=interceptorClassIndex.getMethod(aroundInvokeMethod);
      List<InterceptorFactory> interceptors;
      if ((interceptors=userAroundInvokesByInterceptorClass.get(interceptorClassName)) == null) {
        userAroundInvokesByInterceptorClass.put(interceptorClassName,interceptors=new ArrayList<InterceptorFactory>());
      }
      interceptors.add(new ManagedReferenceLifecycleMethodInterceptorFactory(contextKey,method,false));
    }
  }
}
.run() @TO@ new ClassDescriptionTraversal(interceptorConfiguration,moduleConfiguration){
  @Override public void handle(  EEModuleClassConfiguration interceptorClassConfiguration,  EEModuleClassDescription classDescription) throws DeploymentUnitProcessingException {
    final ClassReflectionIndex<?> interceptorClassIndex=index.getClassIndex(interceptorClassConfiguration.getModuleClass());
    for (    final ResourceInjectionConfiguration injectionConfiguration : interceptorClassConfiguration.getInjectionConfigurations()) {
      final Object valueContextKey=new Object();
      final InjectedValue<ManagedReferenceFactory> managedReferenceFactoryValue=new InjectedValue<ManagedReferenceFactory>();
      configuration.getStartDependencies().add(new InjectedConfigurator(injectionConfiguration,configuration,context,managedReferenceFactoryValue));
      injectors.addFirst(injectionConfiguration.getTarget().createInjectionInterceptorFactory(contextKey,valueContextKey,managedReferenceFactoryValue,deploymentUnit));
      uninjectors.addLast(new ManagedReferenceReleaseInterceptorFactory(valueContextKey));
    }
    final MethodIdentifier postConstructMethod=classDescription.getPostConstructMethod();
    if (postConstructMethod != null) {
      Method method=interceptorClassIndex.getMethod(postConstructMethod);
      InterceptorFactory interceptorFactory=new ManagedReferenceLifecycleMethodInterceptorFactory(contextKey,method,true);
      userPostConstruct.addLast(interceptorFactory);
    }
    final MethodIdentifier preDestroyMethod=classDescription.getPreDestroyMethod();
    if (preDestroyMethod != null) {
      Method method=interceptorClassIndex.getMethod(preDestroyMethod);
      InterceptorFactory interceptorFactory=new ManagedReferenceLifecycleMethodInterceptorFactory(contextKey,method,true);
      userPreDestroy.addLast(interceptorFactory);
    }
    final MethodIdentifier aroundInvokeMethod=classDescription.getAroundInvokeMethod();
    if (aroundInvokeMethod != null) {
      Method method=interceptorClassIndex.getMethod(aroundInvokeMethod);
      List<InterceptorFactory> interceptors;
      if ((interceptors=userAroundInvokesByInterceptorClass.get(interceptorClassName)) == null) {
        userAroundInvokesByInterceptorClass.put(interceptorClassName,interceptors=new ArrayList<InterceptorFactory>());
      }
      interceptors.add(new ManagedReferenceLifecycleMethodInterceptorFactory(contextKey,method,false));
    }
  }
}
.run() @AT@ 18136 @LENGTH@ 3530
---------UPD ClassInstanceCreation@@ClassDescriptionTraversal[moduleConfiguration.getClassConfiguration(interceptorClassName), moduleConfiguration] @TO@ ClassDescriptionTraversal[interceptorConfiguration, moduleConfiguration] @AT@ 18136 @LENGTH@ 3524
------------INS SimpleName@@interceptorConfiguration @TO@ ClassInstanceCreation@@ClassDescriptionTraversal[moduleConfiguration.getClassConfiguration(interceptorClassName), moduleConfiguration] @AT@ 18595 @LENGTH@ 24
---INS ExpressionStatement@@MethodInvocation:instantiators.addFirst(new ManagedReferenceInterceptorFactory(interceptorConfiguration.getInstantiator(),contextKey)) @TO@ EnhancedForStatement@@for (InterceptorDescription interceptorDescription : interceptors.values()) {  final String interceptorClassName=interceptorDescription.getInterceptorClassName();  new ClassDescriptionTraversal(moduleConfiguration.getClassConfiguration(interceptorClassName),moduleConfiguration){    @Override public void handle(    EEModuleClassConfiguration interceptorClassConfiguration,    EEModuleClassDescription classDescription) throws DeploymentUnitProcessingException {      final ClassReflectionIndex<?> interceptorClassIndex=index.getClassIndex(interceptorClassConfiguration.getModuleClass());      final Object contextKey=new Object();      instantiators.addFirst(new ManagedReferenceInterceptorFactory(interceptorClassConfiguration.getInstantiator(),contextKey));      destructors.addLast(new ManagedReferenceReleaseInterceptorFactory(contextKey));      for (      final ResourceInjectionConfiguration injectionConfiguration : interceptorClassConfiguration.getInjectionConfigurations()) {        final Object valueContextKey=new Object();        final InjectedValue<ManagedReferenceFactory> managedReferenceFactoryValue=new InjectedValue<ManagedReferenceFactory>();        configuration.getStartDependencies().add(new InjectedConfigurator(injectionConfiguration,configuration,context,managedReferenceFactoryValue));        injectors.addFirst(injectionConfiguration.getTarget().createInjectionInterceptorFactory(contextKey,valueContextKey,managedReferenceFactoryValue,deploymentUnit));        uninjectors.addLast(new ManagedReferenceReleaseInterceptorFactory(valueContextKey));      }      final MethodIdentifier postConstructMethod=classDescription.getPostConstructMethod();      if (postConstructMethod != null) {        Method method=interceptorClassIndex.getMethod(postConstructMethod);        InterceptorFactory interceptorFactory=new ManagedReferenceLifecycleMethodInterceptorFactory(contextKey,method,true);        userPostConstruct.addLast(interceptorFactory);      }      final MethodIdentifier preDestroyMethod=classDescription.getPreDestroyMethod();      if (preDestroyMethod != null) {        Method method=interceptorClassIndex.getMethod(preDestroyMethod);        InterceptorFactory interceptorFactory=new ManagedReferenceLifecycleMethodInterceptorFactory(contextKey,method,true);        userPreDestroy.addLast(interceptorFactory);      }      final MethodIdentifier aroundInvokeMethod=classDescription.getAroundInvokeMethod();      if (aroundInvokeMethod != null) {        Method method=interceptorClassIndex.getMethod(aroundInvokeMethod);        List<InterceptorFactory> interceptors;        if ((interceptors=userAroundInvokesByInterceptorClass.get(interceptorClassName)) == null) {          userAroundInvokesByInterceptorClass.put(interceptorClassName,interceptors=new ArrayList<InterceptorFactory>());        }        interceptors.add(new ManagedReferenceLifecycleMethodInterceptorFactory(contextKey,method,false));      }    }  }.run();} @AT@ 18332 @LENGTH@ 119
------INS MethodInvocation@@instantiators.addFirst(new ManagedReferenceInterceptorFactory(interceptorConfiguration.getInstantiator(),contextKey)) @TO@ ExpressionStatement@@MethodInvocation:instantiators.addFirst(new ManagedReferenceInterceptorFactory(interceptorConfiguration.getInstantiator(),contextKey)) @AT@ 18332 @LENGTH@ 118
---------INS SimpleName@@Name:instantiators @TO@ MethodInvocation@@instantiators.addFirst(new ManagedReferenceInterceptorFactory(interceptorConfiguration.getInstantiator(),contextKey)) @AT@ 18332 @LENGTH@ 13
---------INS SimpleName@@MethodName:addFirst:[new ManagedReferenceInterceptorFactory(interceptorConfiguration.getInstantiator(),contextKey)] @TO@ MethodInvocation@@instantiators.addFirst(new ManagedReferenceInterceptorFactory(interceptorConfiguration.getInstantiator(),contextKey)) @AT@ 18346 @LENGTH@ 104
------------INS ClassInstanceCreation@@ManagedReferenceInterceptorFactory[interceptorConfiguration.getInstantiator(), contextKey] @TO@ SimpleName@@MethodName:addFirst:[new ManagedReferenceInterceptorFactory(interceptorConfiguration.getInstantiator(),contextKey)] @AT@ 18355 @LENGTH@ 94
---------------INS New@@new @TO@ ClassInstanceCreation@@ManagedReferenceInterceptorFactory[interceptorConfiguration.getInstantiator(), contextKey] @AT@ 18355 @LENGTH@ 3
---------------INS SimpleType@@ManagedReferenceInterceptorFactory @TO@ ClassInstanceCreation@@ManagedReferenceInterceptorFactory[interceptorConfiguration.getInstantiator(), contextKey] @AT@ 18359 @LENGTH@ 34
---------------INS MethodInvocation@@interceptorConfiguration.getInstantiator() @TO@ ClassInstanceCreation@@ManagedReferenceInterceptorFactory[interceptorConfiguration.getInstantiator(), contextKey] @AT@ 18394 @LENGTH@ 42
------------------INS SimpleName@@Name:interceptorConfiguration @TO@ MethodInvocation@@interceptorConfiguration.getInstantiator() @AT@ 18394 @LENGTH@ 24
------------------INS SimpleName@@MethodName:getInstantiator:[] @TO@ MethodInvocation@@interceptorConfiguration.getInstantiator() @AT@ 18419 @LENGTH@ 17
---------------INS SimpleName@@contextKey @TO@ ClassInstanceCreation@@ManagedReferenceInterceptorFactory[interceptorConfiguration.getInstantiator(), contextKey] @AT@ 18438 @LENGTH@ 10
---MOV VariableDeclarationStatement@@final Object contextKey=new Object(); @TO@ EnhancedForStatement@@for (InterceptorDescription interceptorDescription : interceptors.values()) {  final String interceptorClassName=interceptorDescription.getInterceptorClassName();  new ClassDescriptionTraversal(moduleConfiguration.getClassConfiguration(interceptorClassName),moduleConfiguration){    @Override public void handle(    EEModuleClassConfiguration interceptorClassConfiguration,    EEModuleClassDescription classDescription) throws DeploymentUnitProcessingException {      final ClassReflectionIndex<?> interceptorClassIndex=index.getClassIndex(interceptorClassConfiguration.getModuleClass());      final Object contextKey=new Object();      instantiators.addFirst(new ManagedReferenceInterceptorFactory(interceptorClassConfiguration.getInstantiator(),contextKey));      destructors.addLast(new ManagedReferenceReleaseInterceptorFactory(contextKey));      for (      final ResourceInjectionConfiguration injectionConfiguration : interceptorClassConfiguration.getInjectionConfigurations()) {        final Object valueContextKey=new Object();        final InjectedValue<ManagedReferenceFactory> managedReferenceFactoryValue=new InjectedValue<ManagedReferenceFactory>();        configuration.getStartDependencies().add(new InjectedConfigurator(injectionConfiguration,configuration,context,managedReferenceFactoryValue));        injectors.addFirst(injectionConfiguration.getTarget().createInjectionInterceptorFactory(contextKey,valueContextKey,managedReferenceFactoryValue,deploymentUnit));        uninjectors.addLast(new ManagedReferenceReleaseInterceptorFactory(valueContextKey));      }      final MethodIdentifier postConstructMethod=classDescription.getPostConstructMethod();      if (postConstructMethod != null) {        Method method=interceptorClassIndex.getMethod(postConstructMethod);        InterceptorFactory interceptorFactory=new ManagedReferenceLifecycleMethodInterceptorFactory(contextKey,method,true);        userPostConstruct.addLast(interceptorFactory);      }      final MethodIdentifier preDestroyMethod=classDescription.getPreDestroyMethod();      if (preDestroyMethod != null) {        Method method=interceptorClassIndex.getMethod(preDestroyMethod);        InterceptorFactory interceptorFactory=new ManagedReferenceLifecycleMethodInterceptorFactory(contextKey,method,true);        userPreDestroy.addLast(interceptorFactory);      }      final MethodIdentifier aroundInvokeMethod=classDescription.getAroundInvokeMethod();      if (aroundInvokeMethod != null) {        Method method=interceptorClassIndex.getMethod(aroundInvokeMethod);        List<InterceptorFactory> interceptors;        if ((interceptors=userAroundInvokesByInterceptorClass.get(interceptorClassName)) == null) {          userAroundInvokesByInterceptorClass.put(interceptorClassName,interceptors=new ArrayList<InterceptorFactory>());        }        interceptors.add(new ManagedReferenceLifecycleMethodInterceptorFactory(contextKey,method,false));      }    }  }.run();} @AT@ 18638 @LENGTH@ 39
---MOV ExpressionStatement@@MethodInvocation:destructors.addLast(new ManagedReferenceReleaseInterceptorFactory(contextKey)) @TO@ EnhancedForStatement@@for (InterceptorDescription interceptorDescription : interceptors.values()) {  final String interceptorClassName=interceptorDescription.getInterceptorClassName();  new ClassDescriptionTraversal(moduleConfiguration.getClassConfiguration(interceptorClassName),moduleConfiguration){    @Override public void handle(    EEModuleClassConfiguration interceptorClassConfiguration,    EEModuleClassDescription classDescription) throws DeploymentUnitProcessingException {      final ClassReflectionIndex<?> interceptorClassIndex=index.getClassIndex(interceptorClassConfiguration.getModuleClass());      final Object contextKey=new Object();      instantiators.addFirst(new ManagedReferenceInterceptorFactory(interceptorClassConfiguration.getInstantiator(),contextKey));      destructors.addLast(new ManagedReferenceReleaseInterceptorFactory(contextKey));      for (      final ResourceInjectionConfiguration injectionConfiguration : interceptorClassConfiguration.getInjectionConfigurations()) {        final Object valueContextKey=new Object();        final InjectedValue<ManagedReferenceFactory> managedReferenceFactoryValue=new InjectedValue<ManagedReferenceFactory>();        configuration.getStartDependencies().add(new InjectedConfigurator(injectionConfiguration,configuration,context,managedReferenceFactoryValue));        injectors.addFirst(injectionConfiguration.getTarget().createInjectionInterceptorFactory(contextKey,valueContextKey,managedReferenceFactoryValue,deploymentUnit));        uninjectors.addLast(new ManagedReferenceReleaseInterceptorFactory(valueContextKey));      }      final MethodIdentifier postConstructMethod=classDescription.getPostConstructMethod();      if (postConstructMethod != null) {        Method method=interceptorClassIndex.getMethod(postConstructMethod);        InterceptorFactory interceptorFactory=new ManagedReferenceLifecycleMethodInterceptorFactory(contextKey,method,true);        userPostConstruct.addLast(interceptorFactory);      }      final MethodIdentifier preDestroyMethod=classDescription.getPreDestroyMethod();      if (preDestroyMethod != null) {        Method method=interceptorClassIndex.getMethod(preDestroyMethod);        InterceptorFactory interceptorFactory=new ManagedReferenceLifecycleMethodInterceptorFactory(contextKey,method,true);        userPreDestroy.addLast(interceptorFactory);      }      final MethodIdentifier aroundInvokeMethod=classDescription.getAroundInvokeMethod();      if (aroundInvokeMethod != null) {        Method method=interceptorClassIndex.getMethod(aroundInvokeMethod);        List<InterceptorFactory> interceptors;        if ((interceptors=userAroundInvokesByInterceptorClass.get(interceptorClassName)) == null) {          userAroundInvokesByInterceptorClass.put(interceptorClassName,interceptors=new ArrayList<InterceptorFactory>());        }        interceptors.add(new ManagedReferenceLifecycleMethodInterceptorFactory(contextKey,method,false));      }    }  }.run();} @AT@ 18851 @LENGTH@ 79


UPD Block@@ThenBody:{  namespaces.add(param);  ModelNode compensating=NamespaceRemoveHandler.getRemoveNamespaceOperation(operation.get(OP_ADDR),param.asProperty().getName());  resultHandler.handleResultComplete(compensating);} @TO@ ThenBody:{  Property prop=param.asProperty();  namespaces.add(prop.getName(),prop.getValue());  ModelNode compensating=NamespaceRemoveHandler.getRemoveNamespaceOperation(operation.get(OP_ADDR),param.asProperty().getName());  resultHandler.handleResultComplete(compensating);} @AT@ 3170 @LENGTH@ 267
---UPD ExpressionStatement@@MethodInvocation:namespaces.add(param) @TO@ MethodInvocation:namespaces.add(prop.getName(),prop.getValue()) @AT@ 3188 @LENGTH@ 22
------UPD MethodInvocation@@namespaces.add(param) @TO@ namespaces.add(prop.getName(),prop.getValue()) @AT@ 3188 @LENGTH@ 21
---------UPD SimpleName@@MethodName:add:[param] @TO@ MethodName:add:[prop.getName(), prop.getValue()] @AT@ 3199 @LENGTH@ 10
------------DEL SimpleName@@param @AT@ 3203 @LENGTH@ 5
------------INS MethodInvocation@@prop.getName() @TO@ SimpleName@@MethodName:add:[param] @AT@ 3285 @LENGTH@ 14
---------------INS SimpleName@@Name:prop @TO@ MethodInvocation@@prop.getName() @AT@ 3285 @LENGTH@ 4
---------------INS SimpleName@@MethodName:getName:[] @TO@ MethodInvocation@@prop.getName() @AT@ 3290 @LENGTH@ 9
------------INS MethodInvocation@@prop.getValue() @TO@ SimpleName@@MethodName:add:[param] @AT@ 3301 @LENGTH@ 15
---------------INS SimpleName@@Name:prop @TO@ MethodInvocation@@prop.getValue() @AT@ 3301 @LENGTH@ 4
---------------INS SimpleName@@MethodName:getValue:[] @TO@ MethodInvocation@@prop.getValue() @AT@ 3306 @LENGTH@ 10
---INS VariableDeclarationStatement@@Property prop=param.asProperty(); @TO@ Block@@ThenBody:{  namespaces.add(param);  ModelNode compensating=NamespaceRemoveHandler.getRemoveNamespaceOperation(operation.get(OP_ADDR),param.asProperty().getName());  resultHandler.handleResultComplete(compensating);} @AT@ 3218 @LENGTH@ 35
------INS SimpleType@@Property @TO@ VariableDeclarationStatement@@Property prop=param.asProperty(); @AT@ 3218 @LENGTH@ 8
------INS VariableDeclarationFragment@@prop=param.asProperty() @TO@ VariableDeclarationStatement@@Property prop=param.asProperty(); @AT@ 3227 @LENGTH@ 25
---------INS SimpleName@@prop @TO@ VariableDeclarationFragment@@prop=param.asProperty() @AT@ 3227 @LENGTH@ 4
---------INS MethodInvocation@@param.asProperty() @TO@ VariableDeclarationFragment@@prop=param.asProperty() @AT@ 3234 @LENGTH@ 18
------------INS SimpleName@@Name:param @TO@ MethodInvocation@@param.asProperty() @AT@ 3234 @LENGTH@ 5
------------INS SimpleName@@MethodName:asProperty:[] @TO@ MethodInvocation@@param.asProperty() @AT@ 3240 @LENGTH@ 12


INS MethodDeclaration@@public, void, MethodName:testNoStatefulCollisionError, Exception,  @TO@ TypeDeclaration@@[public]QuartzNameCollisionTest,  @AT@ 2194 @LENGTH@ 685
---INS Modifier@@public @TO@ MethodDeclaration@@public, void, MethodName:testNoStatefulCollisionError, Exception,  @AT@ 2194 @LENGTH@ 6
---INS PrimitiveType@@void @TO@ MethodDeclaration@@public, void, MethodName:testNoStatefulCollisionError, Exception,  @AT@ 2201 @LENGTH@ 4
---INS SimpleName@@MethodName:testNoStatefulCollisionError @TO@ MethodDeclaration@@public, void, MethodName:testNoStatefulCollisionError, Exception,  @AT@ 2206 @LENGTH@ 28
---INS SimpleType@@Exception @TO@ MethodDeclaration@@public, void, MethodName:testNoStatefulCollisionError, Exception,  @AT@ 2244 @LENGTH@ 9
---INS ExpressionStatement@@Assignment:camel1=new DefaultCamelContext() @TO@ MethodDeclaration@@public, void, MethodName:testNoStatefulCollisionError, Exception,  @AT@ 2264 @LENGTH@ 35
------INS Assignment@@camel1=new DefaultCamelContext() @TO@ ExpressionStatement@@Assignment:camel1=new DefaultCamelContext() @AT@ 2264 @LENGTH@ 34
---------INS SimpleName@@camel1 @TO@ Assignment@@camel1=new DefaultCamelContext() @AT@ 2264 @LENGTH@ 6
---------INS Operator@@= @TO@ Assignment@@camel1=new DefaultCamelContext() @AT@ 2270 @LENGTH@ 1
---------INS ClassInstanceCreation@@DefaultCamelContext[] @TO@ Assignment@@camel1=new DefaultCamelContext() @AT@ 2273 @LENGTH@ 25
------------INS New@@new @TO@ ClassInstanceCreation@@DefaultCamelContext[] @AT@ 2273 @LENGTH@ 3
------------INS SimpleType@@DefaultCamelContext @TO@ ClassInstanceCreation@@DefaultCamelContext[] @AT@ 2277 @LENGTH@ 19
---INS ExpressionStatement@@MethodInvocation:camel1.setName("camel-1") @TO@ MethodDeclaration@@public, void, MethodName:testNoStatefulCollisionError, Exception,  @AT@ 2308 @LENGTH@ 26
------INS MethodInvocation@@camel1.setName("camel-1") @TO@ ExpressionStatement@@MethodInvocation:camel1.setName("camel-1") @AT@ 2308 @LENGTH@ 25
---------INS SimpleName@@Name:camel1 @TO@ MethodInvocation@@camel1.setName("camel-1") @AT@ 2308 @LENGTH@ 6
---------INS SimpleName@@MethodName:setName:["camel-1"] @TO@ MethodInvocation@@camel1.setName("camel-1") @AT@ 2315 @LENGTH@ 18
------------INS StringLiteral@@"camel-1" @TO@ SimpleName@@MethodName:setName:["camel-1"] @AT@ 2323 @LENGTH@ 9
---INS ExpressionStatement@@MethodInvocation:camel1.addRoutes(new RouteBuilder(){
  @Override public void configure() throws Exception {
    from("quartz://myGroup/myTimerName?stateful=true&cron=0/1+*+*+*+*+?").to("log:one","mock:one");
  }
}
) @TO@ MethodDeclaration@@public, void, MethodName:testNoStatefulCollisionError, Exception,  @AT@ 2343 @LENGTH@ 253
------INS MethodInvocation@@camel1.addRoutes(new RouteBuilder(){
  @Override public void configure() throws Exception {
    from("quartz://myGroup/myTimerName?stateful=true&cron=0/1+*+*+*+*+?").to("log:one","mock:one");
  }
}
) @TO@ ExpressionStatement@@MethodInvocation:camel1.addRoutes(new RouteBuilder(){
  @Override public void configure() throws Exception {
    from("quartz://myGroup/myTimerName?stateful=true&cron=0/1+*+*+*+*+?").to("log:one","mock:one");
  }
}
) @AT@ 2343 @LENGTH@ 252
---------INS SimpleName@@Name:camel1 @TO@ MethodInvocation@@camel1.addRoutes(new RouteBuilder(){
  @Override public void configure() throws Exception {
    from("quartz://myGroup/myTimerName?stateful=true&cron=0/1+*+*+*+*+?").to("log:one","mock:one");
  }
}
) @AT@ 2343 @LENGTH@ 6
---------INS SimpleName@@MethodName:addRoutes:[new RouteBuilder(){
  @Override public void configure() throws Exception {
    from("quartz://myGroup/myTimerName?stateful=true&cron=0/1+*+*+*+*+?").to("log:one","mock:one");
  }
}
] @TO@ MethodInvocation@@camel1.addRoutes(new RouteBuilder(){
  @Override public void configure() throws Exception {
    from("quartz://myGroup/myTimerName?stateful=true&cron=0/1+*+*+*+*+?").to("log:one","mock:one");
  }
}
) @AT@ 2350 @LENGTH@ 245
------------INS ClassInstanceCreation@@RouteBuilder[] @TO@ SimpleName@@MethodName:addRoutes:[new RouteBuilder(){
  @Override public void configure() throws Exception {
    from("quartz://myGroup/myTimerName?stateful=true&cron=0/1+*+*+*+*+?").to("log:one","mock:one");
  }
}
] @AT@ 2360 @LENGTH@ 234
---------------INS New@@new @TO@ ClassInstanceCreation@@RouteBuilder[] @AT@ 2360 @LENGTH@ 3
---------------INS SimpleType@@RouteBuilder @TO@ ClassInstanceCreation@@RouteBuilder[] @AT@ 2364 @LENGTH@ 12
---------------INS AnonymousClassDeclaration@@AnonymousClass @TO@ ClassInstanceCreation@@RouteBuilder[] @AT@ 2379 @LENGTH@ 215
------------------INS MethodDeclaration@@public, void, MethodName:configure, Exception,  @TO@ AnonymousClassDeclaration@@AnonymousClass @AT@ 2415 @LENGTH@ 169
---------------------INS Modifier@@public @TO@ MethodDeclaration@@public, void, MethodName:configure, Exception,  @AT@ 2415 @LENGTH@ 6
---------------------INS PrimitiveType@@void @TO@ MethodDeclaration@@public, void, MethodName:configure, Exception,  @AT@ 2422 @LENGTH@ 4
---------------------INS SimpleName@@MethodName:configure @TO@ MethodDeclaration@@public, void, MethodName:configure, Exception,  @AT@ 2427 @LENGTH@ 9
---------------------INS SimpleType@@Exception @TO@ MethodDeclaration@@public, void, MethodName:configure, Exception,  @AT@ 2446 @LENGTH@ 9
---------------------INS ExpressionStatement@@MethodInvocation:from("quartz://myGroup/myTimerName?stateful=true&cron=0/1+*+*+*+*+?").to("log:one","mock:one") @TO@ MethodDeclaration@@public, void, MethodName:configure, Exception,  @AT@ 2474 @LENGTH@ 96
------------------------INS MethodInvocation@@from("quartz://myGroup/myTimerName?stateful=true&cron=0/1+*+*+*+*+?").to("log:one","mock:one") @TO@ ExpressionStatement@@MethodInvocation:from("quartz://myGroup/myTimerName?stateful=true&cron=0/1+*+*+*+*+?").to("log:one","mock:one") @AT@ 2474 @LENGTH@ 95
---------------------------INS MethodInvocation@@MethodName:from:["quartz://myGroup/myTimerName?stateful=true&cron=0/1+*+*+*+*+?"] @TO@ MethodInvocation@@from("quartz://myGroup/myTimerName?stateful=true&cron=0/1+*+*+*+*+?").to("log:one","mock:one") @AT@ 2474 @LENGTH@ 69
------------------------------INS StringLiteral@@"quartz://myGroup/myTimerName?stateful=true&cron=0/1+*+*+*+*+?" @TO@ MethodInvocation@@MethodName:from:["quartz://myGroup/myTimerName?stateful=true&cron=0/1+*+*+*+*+?"] @AT@ 2479 @LENGTH@ 63
---------------------------INS SimpleName@@MethodName:to:["log:one", "mock:one"] @TO@ MethodInvocation@@from("quartz://myGroup/myTimerName?stateful=true&cron=0/1+*+*+*+*+?").to("log:one","mock:one") @AT@ 2544 @LENGTH@ 25
------------------------------INS StringLiteral@@"log:one" @TO@ SimpleName@@MethodName:to:["log:one", "mock:one"] @AT@ 2547 @LENGTH@ 9
------------------------------INS StringLiteral@@"mock:one" @TO@ SimpleName@@MethodName:to:["log:one", "mock:one"] @AT@ 2558 @LENGTH@ 10
---INS ExpressionStatement@@MethodInvocation:camel1.start() @TO@ MethodDeclaration@@public, void, MethodName:testNoStatefulCollisionError, Exception,  @AT@ 2605 @LENGTH@ 15
------INS MethodInvocation@@camel1.start() @TO@ ExpressionStatement@@MethodInvocation:camel1.start() @AT@ 2605 @LENGTH@ 14
---------INS SimpleName@@Name:camel1 @TO@ MethodInvocation@@camel1.start() @AT@ 2605 @LENGTH@ 6
---------INS SimpleName@@MethodName:start:[] @TO@ MethodInvocation@@camel1.start() @AT@ 2612 @LENGTH@ 7
---INS ExpressionStatement@@Assignment:camel2=new DefaultCamelContext() @TO@ MethodDeclaration@@public, void, MethodName:testNoStatefulCollisionError, Exception,  @AT@ 2630 @LENGTH@ 35
------INS Assignment@@camel2=new DefaultCamelContext() @TO@ ExpressionStatement@@Assignment:camel2=new DefaultCamelContext() @AT@ 2630 @LENGTH@ 34
---------INS SimpleName@@camel2 @TO@ Assignment@@camel2=new DefaultCamelContext() @AT@ 2630 @LENGTH@ 6
---------INS Operator@@= @TO@ Assignment@@camel2=new DefaultCamelContext() @AT@ 2636 @LENGTH@ 1
---------INS ClassInstanceCreation@@DefaultCamelContext[] @TO@ Assignment@@camel2=new DefaultCamelContext() @AT@ 2639 @LENGTH@ 25
------------INS New@@new @TO@ ClassInstanceCreation@@DefaultCamelContext[] @AT@ 2639 @LENGTH@ 3
------------INS SimpleType@@DefaultCamelContext @TO@ ClassInstanceCreation@@DefaultCamelContext[] @AT@ 2643 @LENGTH@ 19
---INS VariableDeclarationStatement@@QuartzComponent component2=new QuartzComponent(camel2); @TO@ MethodDeclaration@@public, void, MethodName:testNoStatefulCollisionError, Exception,  @AT@ 2674 @LENGTH@ 57
------INS SimpleType@@QuartzComponent @TO@ VariableDeclarationStatement@@QuartzComponent component2=new QuartzComponent(camel2); @AT@ 2674 @LENGTH@ 15
------INS VariableDeclarationFragment@@component2=new QuartzComponent(camel2) @TO@ VariableDeclarationStatement@@QuartzComponent component2=new QuartzComponent(camel2); @AT@ 2690 @LENGTH@ 40
---------INS SimpleName@@component2 @TO@ VariableDeclarationFragment@@component2=new QuartzComponent(camel2) @AT@ 2690 @LENGTH@ 10
---------INS ClassInstanceCreation@@QuartzComponent[camel2] @TO@ VariableDeclarationFragment@@component2=new QuartzComponent(camel2) @AT@ 2703 @LENGTH@ 27
------------INS New@@new @TO@ ClassInstanceCreation@@QuartzComponent[camel2] @AT@ 2703 @LENGTH@ 3
------------INS SimpleType@@QuartzComponent @TO@ ClassInstanceCreation@@QuartzComponent[camel2] @AT@ 2707 @LENGTH@ 15
------------INS SimpleName@@camel2 @TO@ ClassInstanceCreation@@QuartzComponent[camel2] @AT@ 2723 @LENGTH@ 6
---INS ExpressionStatement@@MethodInvocation:component2.createEndpoint("quartz://myGroup/myTimerName?stateful=true") @TO@ MethodDeclaration@@public, void, MethodName:testNoStatefulCollisionError, Exception,  @AT@ 2741 @LENGTH@ 72
------INS MethodInvocation@@component2.createEndpoint("quartz://myGroup/myTimerName?stateful=true") @TO@ ExpressionStatement@@MethodInvocation:component2.createEndpoint("quartz://myGroup/myTimerName?stateful=true") @AT@ 2741 @LENGTH@ 71
---------INS SimpleName@@Name:component2 @TO@ MethodInvocation@@component2.createEndpoint("quartz://myGroup/myTimerName?stateful=true") @AT@ 2741 @LENGTH@ 10
---------INS SimpleName@@MethodName:createEndpoint:["quartz://myGroup/myTimerName?stateful=true"] @TO@ MethodInvocation@@component2.createEndpoint("quartz://myGroup/myTimerName?stateful=true") @AT@ 2752 @LENGTH@ 60
------------INS StringLiteral@@"quartz://myGroup/myTimerName?stateful=true" @TO@ SimpleName@@MethodName:createEndpoint:["quartz://myGroup/myTimerName?stateful=true"] @AT@ 2767 @LENGTH@ 44


UPD VariableDeclarationStatement@@AnnotationValue nameValue=annotation.value("name"); @TO@ AnnotationValue nameValue=annotation.value("filterName"); @AT@ 12927 @LENGTH@ 53
---UPD VariableDeclarationFragment@@nameValue=annotation.value("name") @TO@ nameValue=annotation.value("filterName") @AT@ 12943 @LENGTH@ 36
------UPD MethodInvocation@@annotation.value("name") @TO@ annotation.value("filterName") @AT@ 12955 @LENGTH@ 24
---------UPD SimpleName@@MethodName:value:["name"] @TO@ MethodName:value:["filterName"] @AT@ 12966 @LENGTH@ 13
------------UPD StringLiteral@@"name" @TO@ "filterName" @AT@ 12972 @LENGTH@ 6


UPD MethodDeclaration@@protected, void, P, MethodName:applyUpdate, UpdateContext updateContext, UpdateResultHandler<Object,P> resultHandler, P param,  @TO@ protected, void, P, MethodName:applyUpdate, final UpdateContext updateContext, final UpdateResultHandler<? super Object,P> handler, final P param,  @AT@ 2127 @LENGTH@ 163
---UPD SingleVariableDeclaration@@UpdateContext updateContext @TO@ final UpdateContext updateContext @AT@ 2158 @LENGTH@ 27
------INS Modifier@@final @TO@ SingleVariableDeclaration@@UpdateContext updateContext @AT@ 2158 @LENGTH@ 5
---UPD SingleVariableDeclaration@@UpdateResultHandler<Object,P> resultHandler @TO@ final UpdateResultHandler<? super Object,P> handler @AT@ 2187 @LENGTH@ 44
------UPD ParameterizedType@@UpdateResultHandler<Object,P> @TO@ UpdateResultHandler<? super Object,P> @AT@ 2187 @LENGTH@ 30
---------DEL SimpleType@@Object @AT@ 2207 @LENGTH@ 6
---------INS WildcardType@@? @TO@ ParameterizedType@@UpdateResultHandler<Object,P> @AT@ 2219 @LENGTH@ 14
------INS Modifier@@final @TO@ SingleVariableDeclaration@@UpdateResultHandler<Object,P> resultHandler @AT@ 2193 @LENGTH@ 5
------UPD SimpleName@@resultHandler @TO@ handler @AT@ 2218 @LENGTH@ 13
---UPD SingleVariableDeclaration@@P param @TO@ final P param @AT@ 2233 @LENGTH@ 7
------INS Modifier@@final @TO@ SingleVariableDeclaration@@P param @AT@ 2247 @LENGTH@ 5


UPD ExpressionStatement@@MethodInvocation:op.get("address").set("host",host) @TO@ MethodInvocation:op.get("address").add("host",host) @AT@ 5412 @LENGTH@ 36
---UPD MethodInvocation@@op.get("address").set("host",host) @TO@ op.get("address").add("host",host) @AT@ 5412 @LENGTH@ 35
------UPD SimpleName@@MethodName:set:["host", host] @TO@ MethodName:add:["host", host] @AT@ 5430 @LENGTH@ 17


UPD ExpressionStatement@@MethodInvocation:operation.get(OPERATION_NAME).set(operationName) @TO@ MethodInvocation:operation.get(OP).set(operationName) @AT@ 36836 @LENGTH@ 49
---UPD MethodInvocation@@operation.get(OPERATION_NAME).set(operationName) @TO@ operation.get(OP).set(operationName) @AT@ 36836 @LENGTH@ 48
------UPD MethodInvocation@@MethodName:get:[OPERATION_NAME] @TO@ MethodName:get:[OP] @AT@ 36836 @LENGTH@ 29
---------UPD SimpleName@@OPERATION_NAME @TO@ OP @AT@ 36850 @LENGTH@ 14


UPD Block@@ElseBody:if (stateId.equals(OperationNameState.ID)) {  handler.operationName(buffer.toString().trim());} else if (stateId.equals(NodeState.ID)) {  char ch=ctx.getCharacter();  if (buffer.length() == 0) {    if (ch == '/') {      handler.rootNode();      handler.nodeSeparator(ctx.getLocation());    }  } else {    if (ch == '=') {      handler.nodeType(buffer.toString().trim());      handler.nodeTypeNameSeparator(ctx.getLocation());    } else     if (ch == ':') {      handler.nodeName(buffer.toString().trim());    } else {      final String value=buffer.toString().trim();      if (".".equals(value)) {      } else       if ("..".equals(value)) {        handler.parentNode();      } else       if (".type".equals(value)) {        handler.nodeType();      } else {        if (ch == '/') {          if ("".equals(value)) {            handler.rootNode();          } else {            handler.nodeName(value);          }        } else {          handler.nodeTypeOrName(value);        }      }      if (ch == '/') {        handler.nodeSeparator(ctx.getLocation());      }    }  }} @TO@ ElseBody:if (stateId.equals(OperationNameState.ID)) {  handler.operationName(buffer.toString().trim());} else if (stateId.equals(NodeState.ID)) {  char ch=ctx.getCharacter();  if (buffer.length() == 0) {    if (ch == '/') {      handler.rootNode();      handler.nodeSeparator(ctx.getLocation());    }  } else {    if (ch == '=') {      handler.nodeType(buffer.toString().trim());      handler.nodeTypeNameSeparator(ctx.getLocation());    } else     if (ch == ':') {      handler.nodeName(buffer.toString().trim());    } else {      final String value=buffer.toString().trim();      if (".".equals(value)) {      } else       if ("..".equals(value)) {        handler.parentNode();      } else       if (".type".equals(value)) {        handler.nodeType();      } else {        if (ch == '/') {          if ("".equals(value)) {            handler.rootNode();          } else {            handler.nodeName(value);          }        } else {          handler.nodeTypeOrName(value);        }      }      if (ch == '/') {        handler.nodeSeparator(ctx.getLocation());      }    }  }  propValueContent=false;} @AT@ 6195 @LENGTH@ 1986
---UPD IfStatement@@if (stateId.equals(OperationNameState.ID)) {  handler.operationName(buffer.toString().trim());} else if (stateId.equals(NodeState.ID)) {  char ch=ctx.getCharacter();  if (buffer.length() == 0) {    if (ch == '/') {      handler.rootNode();      handler.nodeSeparator(ctx.getLocation());    }  } else {    if (ch == '=') {      handler.nodeType(buffer.toString().trim());      handler.nodeTypeNameSeparator(ctx.getLocation());    } else     if (ch == ':') {      handler.nodeName(buffer.toString().trim());    } else {      final String value=buffer.toString().trim();      if (".".equals(value)) {      } else       if ("..".equals(value)) {        handler.parentNode();      } else       if (".type".equals(value)) {        handler.nodeType();      } else {        if (ch == '/') {          if ("".equals(value)) {            handler.rootNode();          } else {            handler.nodeName(value);          }        } else {          handler.nodeTypeOrName(value);        }      }      if (ch == '/') {        handler.nodeSeparator(ctx.getLocation());      }    }  }} @TO@ if (stateId.equals(OperationNameState.ID)) {  handler.operationName(buffer.toString().trim());} else if (stateId.equals(NodeState.ID)) {  char ch=ctx.getCharacter();  if (buffer.length() == 0) {    if (ch == '/') {      handler.rootNode();      handler.nodeSeparator(ctx.getLocation());    }  } else {    if (ch == '=') {      handler.nodeType(buffer.toString().trim());      handler.nodeTypeNameSeparator(ctx.getLocation());    } else     if (ch == ':') {      handler.nodeName(buffer.toString().trim());    } else {      final String value=buffer.toString().trim();      if (".".equals(value)) {      } else       if ("..".equals(value)) {        handler.parentNode();      } else       if (".type".equals(value)) {        handler.nodeType();      } else {        if (ch == '/') {          if ("".equals(value)) {            handler.rootNode();          } else {            handler.nodeName(value);          }        } else {          handler.nodeTypeOrName(value);        }      }      if (ch == '/') {        handler.nodeSeparator(ctx.getLocation());      }    }  }  propValueContent=false;} @AT@ 6195 @LENGTH@ 1986
------UPD Block@@ElseBody:if (stateId.equals(NodeState.ID)) {  char ch=ctx.getCharacter();  if (buffer.length() == 0) {    if (ch == '/') {      handler.rootNode();      handler.nodeSeparator(ctx.getLocation());    }  } else {    if (ch == '=') {      handler.nodeType(buffer.toString().trim());      handler.nodeTypeNameSeparator(ctx.getLocation());    } else     if (ch == ':') {      handler.nodeName(buffer.toString().trim());    } else {      final String value=buffer.toString().trim();      if (".".equals(value)) {      } else       if ("..".equals(value)) {        handler.parentNode();      } else       if (".type".equals(value)) {        handler.nodeType();      } else {        if (ch == '/') {          if ("".equals(value)) {            handler.rootNode();          } else {            handler.nodeName(value);          }        } else {          handler.nodeTypeOrName(value);        }      }      if (ch == '/') {        handler.nodeSeparator(ctx.getLocation());      }    }  }} @TO@ ElseBody:if (stateId.equals(NodeState.ID)) {  char ch=ctx.getCharacter();  if (buffer.length() == 0) {    if (ch == '/') {      handler.rootNode();      handler.nodeSeparator(ctx.getLocation());    }  } else {    if (ch == '=') {      handler.nodeType(buffer.toString().trim());      handler.nodeTypeNameSeparator(ctx.getLocation());    } else     if (ch == ':') {      handler.nodeName(buffer.toString().trim());    } else {      final String value=buffer.toString().trim();      if (".".equals(value)) {      } else       if ("..".equals(value)) {        handler.parentNode();      } else       if (".type".equals(value)) {        handler.nodeType();      } else {        if (ch == '/') {          if ("".equals(value)) {            handler.rootNode();          } else {            handler.nodeName(value);          }        } else {          handler.nodeTypeOrName(value);        }      }      if (ch == '/') {        handler.nodeSeparator(ctx.getLocation());      }    }  }  propValueContent=false;} @AT@ 6331 @LENGTH@ 1850
---------UPD IfStatement@@if (stateId.equals(NodeState.ID)) {  char ch=ctx.getCharacter();  if (buffer.length() == 0) {    if (ch == '/') {      handler.rootNode();      handler.nodeSeparator(ctx.getLocation());    }  } else {    if (ch == '=') {      handler.nodeType(buffer.toString().trim());      handler.nodeTypeNameSeparator(ctx.getLocation());    } else     if (ch == ':') {      handler.nodeName(buffer.toString().trim());    } else {      final String value=buffer.toString().trim();      if (".".equals(value)) {      } else       if ("..".equals(value)) {        handler.parentNode();      } else       if (".type".equals(value)) {        handler.nodeType();      } else {        if (ch == '/') {          if ("".equals(value)) {            handler.rootNode();          } else {            handler.nodeName(value);          }        } else {          handler.nodeTypeOrName(value);        }      }      if (ch == '/') {        handler.nodeSeparator(ctx.getLocation());      }    }  }} @TO@ if (stateId.equals(NodeState.ID)) {  char ch=ctx.getCharacter();  if (buffer.length() == 0) {    if (ch == '/') {      handler.rootNode();      handler.nodeSeparator(ctx.getLocation());    }  } else {    if (ch == '=') {      handler.nodeType(buffer.toString().trim());      handler.nodeTypeNameSeparator(ctx.getLocation());    } else     if (ch == ':') {      handler.nodeName(buffer.toString().trim());    } else {      final String value=buffer.toString().trim();      if (".".equals(value)) {      } else       if ("..".equals(value)) {        handler.parentNode();      } else       if (".type".equals(value)) {        handler.nodeType();      } else {        if (ch == '/') {          if ("".equals(value)) {            handler.rootNode();          } else {            handler.nodeName(value);          }        } else {          handler.nodeTypeOrName(value);        }      }      if (ch == '/') {        handler.nodeSeparator(ctx.getLocation());      }    }  }  propValueContent=false;} @AT@ 6331 @LENGTH@ 1850
------------UPD Block@@ThenBody:{  char ch=ctx.getCharacter();  if (buffer.length() == 0) {    if (ch == '/') {      handler.rootNode();      handler.nodeSeparator(ctx.getLocation());    }  } else {    if (ch == '=') {      handler.nodeType(buffer.toString().trim());      handler.nodeTypeNameSeparator(ctx.getLocation());    } else     if (ch == ':') {      handler.nodeName(buffer.toString().trim());    } else {      final String value=buffer.toString().trim();      if (".".equals(value)) {      } else       if ("..".equals(value)) {        handler.parentNode();      } else       if (".type".equals(value)) {        handler.nodeType();      } else {        if (ch == '/') {          if ("".equals(value)) {            handler.rootNode();          } else {            handler.nodeName(value);          }        } else {          handler.nodeTypeOrName(value);        }      }      if (ch == '/') {        handler.nodeSeparator(ctx.getLocation());      }    }  }} @TO@ ThenBody:{  char ch=ctx.getCharacter();  if (buffer.length() == 0) {    if (ch == '/') {      handler.rootNode();      handler.nodeSeparator(ctx.getLocation());    }  } else {    if (ch == '=') {      handler.nodeType(buffer.toString().trim());      handler.nodeTypeNameSeparator(ctx.getLocation());    } else     if (ch == ':') {      handler.nodeName(buffer.toString().trim());    } else {      final String value=buffer.toString().trim();      if (".".equals(value)) {      } else       if ("..".equals(value)) {        handler.parentNode();      } else       if (".type".equals(value)) {        handler.nodeType();      } else {        if (ch == '/') {          if ("".equals(value)) {            handler.rootNode();          } else {            handler.nodeName(value);          }        } else {          handler.nodeTypeOrName(value);        }      }      if (ch == '/') {        handler.nodeSeparator(ctx.getLocation());      }    }  }  propValueContent=false;} @AT@ 6364 @LENGTH@ 1817
---------------INS ExpressionStatement@@Assignment:propValueContent=false @TO@ Block@@ThenBody:{  char ch=ctx.getCharacter();  if (buffer.length() == 0) {    if (ch == '/') {      handler.rootNode();      handler.nodeSeparator(ctx.getLocation());    }  } else {    if (ch == '=') {      handler.nodeType(buffer.toString().trim());      handler.nodeTypeNameSeparator(ctx.getLocation());    } else     if (ch == ':') {      handler.nodeName(buffer.toString().trim());    } else {      final String value=buffer.toString().trim();      if (".".equals(value)) {      } else       if ("..".equals(value)) {        handler.parentNode();      } else       if (".type".equals(value)) {        handler.nodeType();      } else {        if (ch == '/') {          if ("".equals(value)) {            handler.rootNode();          } else {            handler.nodeName(value);          }        } else {          handler.nodeTypeOrName(value);        }      }      if (ch == '/') {        handler.nodeSeparator(ctx.getLocation());      }    }  }} @AT@ 8328 @LENGTH@ 25
------------------INS Assignment@@propValueContent=false @TO@ ExpressionStatement@@Assignment:propValueContent=false @AT@ 8328 @LENGTH@ 24
---------------------INS SimpleName@@propValueContent @TO@ Assignment@@propValueContent=false @AT@ 8328 @LENGTH@ 16
---------------------INS Operator@@= @TO@ Assignment@@propValueContent=false @AT@ 8344 @LENGTH@ 1
---------------------INS BooleanLiteral@@false @TO@ Assignment@@propValueContent=false @AT@ 8347 @LENGTH@ 5
---------UPD IfStatement@@if (stateId.equals(NodeState.ID)) {  char ch=ctx.getCharacter();  if (buffer.length() == 0) {    if (ch == '/') {      handler.rootNode();      handler.nodeSeparator(ctx.getLocation());    }  } else {    if (ch == '=') {      handler.nodeType(buffer.toString().trim());      handler.nodeTypeNameSeparator(ctx.getLocation());    } else     if (ch == ':') {      handler.nodeName(buffer.toString().trim());    } else {      final String value=buffer.toString().trim();      if (".".equals(value)) {      } else       if ("..".equals(value)) {        handler.parentNode();      } else       if (".type".equals(value)) {        handler.nodeType();      } else {        if (ch == '/') {          if ("".equals(value)) {            handler.rootNode();          } else {            handler.nodeName(value);          }        } else {          handler.nodeTypeOrName(value);        }      }      if (ch == '/') {        handler.nodeSeparator(ctx.getLocation());      }    }  }} @TO@ if (stateId.equals(NodeState.ID)) {  char ch=ctx.getCharacter();  if (buffer.length() == 0) {    if (ch == '/') {      handler.rootNode();      handler.nodeSeparator(ctx.getLocation());    }  } else {    if (ch == '=') {      handler.nodeType(buffer.toString().trim());      handler.nodeTypeNameSeparator(ctx.getLocation());    } else     if (ch == ':') {      handler.nodeName(buffer.toString().trim());    } else {      final String value=buffer.toString().trim();      if (".".equals(value)) {      } else       if ("..".equals(value)) {        handler.parentNode();      } else       if (".type".equals(value)) {        handler.nodeType();      } else {        if (ch == '/') {          if ("".equals(value)) {            handler.rootNode();          } else {            handler.nodeName(value);          }        } else {          handler.nodeTypeOrName(value);        }      }      if (ch == '/') {        handler.nodeSeparator(ctx.getLocation());      }    }  }  propValueContent=false;} @AT@ 6331 @LENGTH@ 1850
------------UPD Block@@ThenBody:{  char ch=ctx.getCharacter();  if (buffer.length() == 0) {    if (ch == '/') {      handler.rootNode();      handler.nodeSeparator(ctx.getLocation());    }  } else {    if (ch == '=') {      handler.nodeType(buffer.toString().trim());      handler.nodeTypeNameSeparator(ctx.getLocation());    } else     if (ch == ':') {      handler.nodeName(buffer.toString().trim());    } else {      final String value=buffer.toString().trim();      if (".".equals(value)) {      } else       if ("..".equals(value)) {        handler.parentNode();      } else       if (".type".equals(value)) {        handler.nodeType();      } else {        if (ch == '/') {          if ("".equals(value)) {            handler.rootNode();          } else {            handler.nodeName(value);          }        } else {          handler.nodeTypeOrName(value);        }      }      if (ch == '/') {        handler.nodeSeparator(ctx.getLocation());      }    }  }} @TO@ ThenBody:{  char ch=ctx.getCharacter();  if (buffer.length() == 0) {    if (ch == '/') {      handler.rootNode();      handler.nodeSeparator(ctx.getLocation());    }  } else {    if (ch == '=') {      handler.nodeType(buffer.toString().trim());      handler.nodeTypeNameSeparator(ctx.getLocation());    } else     if (ch == ':') {      handler.nodeName(buffer.toString().trim());    } else {      final String value=buffer.toString().trim();      if (".".equals(value)) {      } else       if ("..".equals(value)) {        handler.parentNode();      } else       if (".type".equals(value)) {        handler.nodeType();      } else {        if (ch == '/') {          if ("".equals(value)) {            handler.rootNode();          } else {            handler.nodeName(value);          }        } else {          handler.nodeTypeOrName(value);        }      }      if (ch == '/') {        handler.nodeSeparator(ctx.getLocation());      }    }  }  propValueContent=false;} @AT@ 6364 @LENGTH@ 1817
---------------INS ExpressionStatement@@Assignment:propValueContent=false @TO@ Block@@ThenBody:{  char ch=ctx.getCharacter();  if (buffer.length() == 0) {    if (ch == '/') {      handler.rootNode();      handler.nodeSeparator(ctx.getLocation());    }  } else {    if (ch == '=') {      handler.nodeType(buffer.toString().trim());      handler.nodeTypeNameSeparator(ctx.getLocation());    } else     if (ch == ':') {      handler.nodeName(buffer.toString().trim());    } else {      final String value=buffer.toString().trim();      if (".".equals(value)) {      } else       if ("..".equals(value)) {        handler.parentNode();      } else       if (".type".equals(value)) {        handler.nodeType();      } else {        if (ch == '/') {          if ("".equals(value)) {            handler.rootNode();          } else {            handler.nodeName(value);          }        } else {          handler.nodeTypeOrName(value);        }      }      if (ch == '/') {        handler.nodeSeparator(ctx.getLocation());      }    }  }} @AT@ 8328 @LENGTH@ 25
------------------INS Assignment@@propValueContent=false @TO@ ExpressionStatement@@Assignment:propValueContent=false @AT@ 8328 @LENGTH@ 24
---------------------INS SimpleName@@propValueContent @TO@ Assignment@@propValueContent=false @AT@ 8328 @LENGTH@ 16
---------------------INS Operator@@= @TO@ Assignment@@propValueContent=false @AT@ 8344 @LENGTH@ 1
---------------------INS BooleanLiteral@@false @TO@ Assignment@@propValueContent=false @AT@ 8347 @LENGTH@ 5
---------UPD IfStatement@@if (stateId.equals(NodeState.ID)) {  char ch=ctx.getCharacter();  if (buffer.length() == 0) {    if (ch == '/') {      handler.rootNode();      handler.nodeSeparator(ctx.getLocation());    }  } else {    if (ch == '=') {      handler.nodeType(buffer.toString().trim());      handler.nodeTypeNameSeparator(ctx.getLocation());    } else     if (ch == ':') {      handler.nodeName(buffer.toString().trim());    } else {      final String value=buffer.toString().trim();      if (".".equals(value)) {      } else       if ("..".equals(value)) {        handler.parentNode();      } else       if (".type".equals(value)) {        handler.nodeType();      } else {        if (ch == '/') {          if ("".equals(value)) {            handler.rootNode();          } else {            handler.nodeName(value);          }        } else {          handler.nodeTypeOrName(value);        }      }      if (ch == '/') {        handler.nodeSeparator(ctx.getLocation());      }    }  }} @TO@ if (stateId.equals(NodeState.ID)) {  char ch=ctx.getCharacter();  if (buffer.length() == 0) {    if (ch == '/') {      handler.rootNode();      handler.nodeSeparator(ctx.getLocation());    }  } else {    if (ch == '=') {      handler.nodeType(buffer.toString().trim());      handler.nodeTypeNameSeparator(ctx.getLocation());    } else     if (ch == ':') {      handler.nodeName(buffer.toString().trim());    } else {      final String value=buffer.toString().trim();      if (".".equals(value)) {      } else       if ("..".equals(value)) {        handler.parentNode();      } else       if (".type".equals(value)) {        handler.nodeType();      } else {        if (ch == '/') {          if ("".equals(value)) {            handler.rootNode();          } else {            handler.nodeName(value);          }        } else {          handler.nodeTypeOrName(value);        }      }      if (ch == '/') {        handler.nodeSeparator(ctx.getLocation());      }    }  }  propValueContent=false;} @AT@ 6331 @LENGTH@ 1850
------------UPD Block@@ThenBody:{  char ch=ctx.getCharacter();  if (buffer.length() == 0) {    if (ch == '/') {      handler.rootNode();      handler.nodeSeparator(ctx.getLocation());    }  } else {    if (ch == '=') {      handler.nodeType(buffer.toString().trim());      handler.nodeTypeNameSeparator(ctx.getLocation());    } else     if (ch == ':') {      handler.nodeName(buffer.toString().trim());    } else {      final String value=buffer.toString().trim();      if (".".equals(value)) {      } else       if ("..".equals(value)) {        handler.parentNode();      } else       if (".type".equals(value)) {        handler.nodeType();      } else {        if (ch == '/') {          if ("".equals(value)) {            handler.rootNode();          } else {            handler.nodeName(value);          }        } else {          handler.nodeTypeOrName(value);        }      }      if (ch == '/') {        handler.nodeSeparator(ctx.getLocation());      }    }  }} @TO@ ThenBody:{  char ch=ctx.getCharacter();  if (buffer.length() == 0) {    if (ch == '/') {      handler.rootNode();      handler.nodeSeparator(ctx.getLocation());    }  } else {    if (ch == '=') {      handler.nodeType(buffer.toString().trim());      handler.nodeTypeNameSeparator(ctx.getLocation());    } else     if (ch == ':') {      handler.nodeName(buffer.toString().trim());    } else {      final String value=buffer.toString().trim();      if (".".equals(value)) {      } else       if ("..".equals(value)) {        handler.parentNode();      } else       if (".type".equals(value)) {        handler.nodeType();      } else {        if (ch == '/') {          if ("".equals(value)) {            handler.rootNode();          } else {            handler.nodeName(value);          }        } else {          handler.nodeTypeOrName(value);        }      }      if (ch == '/') {        handler.nodeSeparator(ctx.getLocation());      }    }  }  propValueContent=false;} @AT@ 6364 @LENGTH@ 1817
---------------INS ExpressionStatement@@Assignment:propValueContent=false @TO@ Block@@ThenBody:{  char ch=ctx.getCharacter();  if (buffer.length() == 0) {    if (ch == '/') {      handler.rootNode();      handler.nodeSeparator(ctx.getLocation());    }  } else {    if (ch == '=') {      handler.nodeType(buffer.toString().trim());      handler.nodeTypeNameSeparator(ctx.getLocation());    } else     if (ch == ':') {      handler.nodeName(buffer.toString().trim());    } else {      final String value=buffer.toString().trim();      if (".".equals(value)) {      } else       if ("..".equals(value)) {        handler.parentNode();      } else       if (".type".equals(value)) {        handler.nodeType();      } else {        if (ch == '/') {          if ("".equals(value)) {            handler.rootNode();          } else {            handler.nodeName(value);          }        } else {          handler.nodeTypeOrName(value);        }      }      if (ch == '/') {        handler.nodeSeparator(ctx.getLocation());      }    }  }} @AT@ 8328 @LENGTH@ 25
------------------INS Assignment@@propValueContent=false @TO@ ExpressionStatement@@Assignment:propValueContent=false @AT@ 8328 @LENGTH@ 24
---------------------INS SimpleName@@propValueContent @TO@ Assignment@@propValueContent=false @AT@ 8328 @LENGTH@ 16
---------------------INS Operator@@= @TO@ Assignment@@propValueContent=false @AT@ 8344 @LENGTH@ 1
---------------------INS BooleanLiteral@@false @TO@ Assignment@@propValueContent=false @AT@ 8347 @LENGTH@ 5
---------UPD IfStatement@@if (stateId.equals(NodeState.ID)) {  char ch=ctx.getCharacter();  if (buffer.length() == 0) {    if (ch == '/') {      handler.rootNode();      handler.nodeSeparator(ctx.getLocation());    }  } else {    if (ch == '=') {      handler.nodeType(buffer.toString().trim());      handler.nodeTypeNameSeparator(ctx.getLocation());    } else     if (ch == ':') {      handler.nodeName(buffer.toString().trim());    } else {      final String value=buffer.toString().trim();      if (".".equals(value)) {      } else       if ("..".equals(value)) {        handler.parentNode();      } else       if (".type".equals(value)) {        handler.nodeType();      } else {        if (ch == '/') {          if ("".equals(value)) {            handler.rootNode();          } else {            handler.nodeName(value);          }        } else {          handler.nodeTypeOrName(value);        }      }      if (ch == '/') {        handler.nodeSeparator(ctx.getLocation());      }    }  }} @TO@ if (stateId.equals(NodeState.ID)) {  char ch=ctx.getCharacter();  if (buffer.length() == 0) {    if (ch == '/') {      handler.rootNode();      handler.nodeSeparator(ctx.getLocation());    }  } else {    if (ch == '=') {      handler.nodeType(buffer.toString().trim());      handler.nodeTypeNameSeparator(ctx.getLocation());    } else     if (ch == ':') {      handler.nodeName(buffer.toString().trim());    } else {      final String value=buffer.toString().trim();      if (".".equals(value)) {      } else       if ("..".equals(value)) {        handler.parentNode();      } else       if (".type".equals(value)) {        handler.nodeType();      } else {        if (ch == '/') {          if ("".equals(value)) {            handler.rootNode();          } else {            handler.nodeName(value);          }        } else {          handler.nodeTypeOrName(value);        }      }      if (ch == '/') {        handler.nodeSeparator(ctx.getLocation());      }    }  }  propValueContent=false;} @AT@ 6331 @LENGTH@ 1850
------------UPD Block@@ThenBody:{  char ch=ctx.getCharacter();  if (buffer.length() == 0) {    if (ch == '/') {      handler.rootNode();      handler.nodeSeparator(ctx.getLocation());    }  } else {    if (ch == '=') {      handler.nodeType(buffer.toString().trim());      handler.nodeTypeNameSeparator(ctx.getLocation());    } else     if (ch == ':') {      handler.nodeName(buffer.toString().trim());    } else {      final String value=buffer.toString().trim();      if (".".equals(value)) {      } else       if ("..".equals(value)) {        handler.parentNode();      } else       if (".type".equals(value)) {        handler.nodeType();      } else {        if (ch == '/') {          if ("".equals(value)) {            handler.rootNode();          } else {            handler.nodeName(value);          }        } else {          handler.nodeTypeOrName(value);        }      }      if (ch == '/') {        handler.nodeSeparator(ctx.getLocation());      }    }  }} @TO@ ThenBody:{  char ch=ctx.getCharacter();  if (buffer.length() == 0) {    if (ch == '/') {      handler.rootNode();      handler.nodeSeparator(ctx.getLocation());    }  } else {    if (ch == '=') {      handler.nodeType(buffer.toString().trim());      handler.nodeTypeNameSeparator(ctx.getLocation());    } else     if (ch == ':') {      handler.nodeName(buffer.toString().trim());    } else {      final String value=buffer.toString().trim();      if (".".equals(value)) {      } else       if ("..".equals(value)) {        handler.parentNode();      } else       if (".type".equals(value)) {        handler.nodeType();      } else {        if (ch == '/') {          if ("".equals(value)) {            handler.rootNode();          } else {            handler.nodeName(value);          }        } else {          handler.nodeTypeOrName(value);        }      }      if (ch == '/') {        handler.nodeSeparator(ctx.getLocation());      }    }  }  propValueContent=false;} @AT@ 6364 @LENGTH@ 1817
---------------INS ExpressionStatement@@Assignment:propValueContent=false @TO@ Block@@ThenBody:{  char ch=ctx.getCharacter();  if (buffer.length() == 0) {    if (ch == '/') {      handler.rootNode();      handler.nodeSeparator(ctx.getLocation());    }  } else {    if (ch == '=') {      handler.nodeType(buffer.toString().trim());      handler.nodeTypeNameSeparator(ctx.getLocation());    } else     if (ch == ':') {      handler.nodeName(buffer.toString().trim());    } else {      final String value=buffer.toString().trim();      if (".".equals(value)) {      } else       if ("..".equals(value)) {        handler.parentNode();      } else       if (".type".equals(value)) {        handler.nodeType();      } else {        if (ch == '/') {          if ("".equals(value)) {            handler.rootNode();          } else {            handler.nodeName(value);          }        } else {          handler.nodeTypeOrName(value);        }      }      if (ch == '/') {        handler.nodeSeparator(ctx.getLocation());      }    }  }} @AT@ 8328 @LENGTH@ 25
------------------INS Assignment@@propValueContent=false @TO@ ExpressionStatement@@Assignment:propValueContent=false @AT@ 8328 @LENGTH@ 24
---------------------INS SimpleName@@propValueContent @TO@ Assignment@@propValueContent=false @AT@ 8328 @LENGTH@ 16
---------------------INS Operator@@= @TO@ Assignment@@propValueContent=false @AT@ 8344 @LENGTH@ 1
---------------------INS BooleanLiteral@@false @TO@ Assignment@@propValueContent=false @AT@ 8347 @LENGTH@ 5
---------UPD IfStatement@@if (stateId.equals(NodeState.ID)) {  char ch=ctx.getCharacter();  if (buffer.length() == 0) {    if (ch == '/') {      handler.rootNode();      handler.nodeSeparator(ctx.getLocation());    }  } else {    if (ch == '=') {      handler.nodeType(buffer.toString().trim());      handler.nodeTypeNameSeparator(ctx.getLocation());    } else     if (ch == ':') {      handler.nodeName(buffer.toString().trim());    } else {      final String value=buffer.toString().trim();      if (".".equals(value)) {      } else       if ("..".equals(value)) {        handler.parentNode();      } else       if (".type".equals(value)) {        handler.nodeType();      } else {        if (ch == '/') {          if ("".equals(value)) {            handler.rootNode();          } else {            handler.nodeName(value);          }        } else {          handler.nodeTypeOrName(value);        }      }      if (ch == '/') {        handler.nodeSeparator(ctx.getLocation());      }    }  }} @TO@ if (stateId.equals(NodeState.ID)) {  char ch=ctx.getCharacter();  if (buffer.length() == 0) {    if (ch == '/') {      handler.rootNode();      handler.nodeSeparator(ctx.getLocation());    }  } else {    if (ch == '=') {      handler.nodeType(buffer.toString().trim());      handler.nodeTypeNameSeparator(ctx.getLocation());    } else     if (ch == ':') {      handler.nodeName(buffer.toString().trim());    } else {      final String value=buffer.toString().trim();      if (".".equals(value)) {      } else       if ("..".equals(value)) {        handler.parentNode();      } else       if (".type".equals(value)) {        handler.nodeType();      } else {        if (ch == '/') {          if ("".equals(value)) {            handler.rootNode();          } else {            handler.nodeName(value);          }        } else {          handler.nodeTypeOrName(value);        }      }      if (ch == '/') {        handler.nodeSeparator(ctx.getLocation());      }    }  }  propValueContent=false;} @AT@ 6331 @LENGTH@ 1850
------------UPD Block@@ThenBody:{  char ch=ctx.getCharacter();  if (buffer.length() == 0) {    if (ch == '/') {      handler.rootNode();      handler.nodeSeparator(ctx.getLocation());    }  } else {    if (ch == '=') {      handler.nodeType(buffer.toString().trim());      handler.nodeTypeNameSeparator(ctx.getLocation());    } else     if (ch == ':') {      handler.nodeName(buffer.toString().trim());    } else {      final String value=buffer.toString().trim();      if (".".equals(value)) {      } else       if ("..".equals(value)) {        handler.parentNode();      } else       if (".type".equals(value)) {        handler.nodeType();      } else {        if (ch == '/') {          if ("".equals(value)) {            handler.rootNode();          } else {            handler.nodeName(value);          }        } else {          handler.nodeTypeOrName(value);        }      }      if (ch == '/') {        handler.nodeSeparator(ctx.getLocation());      }    }  }} @TO@ ThenBody:{  char ch=ctx.getCharacter();  if (buffer.length() == 0) {    if (ch == '/') {      handler.rootNode();      handler.nodeSeparator(ctx.getLocation());    }  } else {    if (ch == '=') {      handler.nodeType(buffer.toString().trim());      handler.nodeTypeNameSeparator(ctx.getLocation());    } else     if (ch == ':') {      handler.nodeName(buffer.toString().trim());    } else {      final String value=buffer.toString().trim();      if (".".equals(value)) {      } else       if ("..".equals(value)) {        handler.parentNode();      } else       if (".type".equals(value)) {        handler.nodeType();      } else {        if (ch == '/') {          if ("".equals(value)) {            handler.rootNode();          } else {            handler.nodeName(value);          }        } else {          handler.nodeTypeOrName(value);        }      }      if (ch == '/') {        handler.nodeSeparator(ctx.getLocation());      }    }  }  propValueContent=false;} @AT@ 6364 @LENGTH@ 1817
---------------INS ExpressionStatement@@Assignment:propValueContent=false @TO@ Block@@ThenBody:{  char ch=ctx.getCharacter();  if (buffer.length() == 0) {    if (ch == '/') {      handler.rootNode();      handler.nodeSeparator(ctx.getLocation());    }  } else {    if (ch == '=') {      handler.nodeType(buffer.toString().trim());      handler.nodeTypeNameSeparator(ctx.getLocation());    } else     if (ch == ':') {      handler.nodeName(buffer.toString().trim());    } else {      final String value=buffer.toString().trim();      if (".".equals(value)) {      } else       if ("..".equals(value)) {        handler.parentNode();      } else       if (".type".equals(value)) {        handler.nodeType();      } else {        if (ch == '/') {          if ("".equals(value)) {            handler.rootNode();          } else {            handler.nodeName(value);          }        } else {          handler.nodeTypeOrName(value);        }      }      if (ch == '/') {        handler.nodeSeparator(ctx.getLocation());      }    }  }} @AT@ 8328 @LENGTH@ 25
------------------INS Assignment@@propValueContent=false @TO@ ExpressionStatement@@Assignment:propValueContent=false @AT@ 8328 @LENGTH@ 24
---------------------INS SimpleName@@propValueContent @TO@ Assignment@@propValueContent=false @AT@ 8328 @LENGTH@ 16
---------------------INS Operator@@= @TO@ Assignment@@propValueContent=false @AT@ 8344 @LENGTH@ 1
---------------------INS BooleanLiteral@@false @TO@ Assignment@@propValueContent=false @AT@ 8347 @LENGTH@ 5
---UPD IfStatement@@if (stateId.equals(OperationNameState.ID)) {  handler.operationName(buffer.toString().trim());} else if (stateId.equals(NodeState.ID)) {  char ch=ctx.getCharacter();  if (buffer.length() == 0) {    if (ch == '/') {      handler.rootNode();      handler.nodeSeparator(ctx.getLocation());    }  } else {    if (ch == '=') {      handler.nodeType(buffer.toString().trim());      handler.nodeTypeNameSeparator(ctx.getLocation());    } else     if (ch == ':') {      handler.nodeName(buffer.toString().trim());    } else {      final String value=buffer.toString().trim();      if (".".equals(value)) {      } else       if ("..".equals(value)) {        handler.parentNode();      } else       if (".type".equals(value)) {        handler.nodeType();      } else {        if (ch == '/') {          if ("".equals(value)) {            handler.rootNode();          } else {            handler.nodeName(value);          }        } else {          handler.nodeTypeOrName(value);        }      }      if (ch == '/') {        handler.nodeSeparator(ctx.getLocation());      }    }  }} @TO@ if (stateId.equals(OperationNameState.ID)) {  handler.operationName(buffer.toString().trim());} else if (stateId.equals(NodeState.ID)) {  char ch=ctx.getCharacter();  if (buffer.length() == 0) {    if (ch == '/') {      handler.rootNode();      handler.nodeSeparator(ctx.getLocation());    }  } else {    if (ch == '=') {      handler.nodeType(buffer.toString().trim());      handler.nodeTypeNameSeparator(ctx.getLocation());    } else     if (ch == ':') {      handler.nodeName(buffer.toString().trim());    } else {      final String value=buffer.toString().trim();      if (".".equals(value)) {      } else       if ("..".equals(value)) {        handler.parentNode();      } else       if (".type".equals(value)) {        handler.nodeType();      } else {        if (ch == '/') {          if ("".equals(value)) {            handler.rootNode();          } else {            handler.nodeName(value);          }        } else {          handler.nodeTypeOrName(value);        }      }      if (ch == '/') {        handler.nodeSeparator(ctx.getLocation());      }    }  }  propValueContent=false;} @AT@ 6195 @LENGTH@ 1986
------UPD Block@@ElseBody:if (stateId.equals(NodeState.ID)) {  char ch=ctx.getCharacter();  if (buffer.length() == 0) {    if (ch == '/') {      handler.rootNode();      handler.nodeSeparator(ctx.getLocation());    }  } else {    if (ch == '=') {      handler.nodeType(buffer.toString().trim());      handler.nodeTypeNameSeparator(ctx.getLocation());    } else     if (ch == ':') {      handler.nodeName(buffer.toString().trim());    } else {      final String value=buffer.toString().trim();      if (".".equals(value)) {      } else       if ("..".equals(value)) {        handler.parentNode();      } else       if (".type".equals(value)) {        handler.nodeType();      } else {        if (ch == '/') {          if ("".equals(value)) {            handler.rootNode();          } else {            handler.nodeName(value);          }        } else {          handler.nodeTypeOrName(value);        }      }      if (ch == '/') {        handler.nodeSeparator(ctx.getLocation());      }    }  }} @TO@ ElseBody:if (stateId.equals(NodeState.ID)) {  char ch=ctx.getCharacter();  if (buffer.length() == 0) {    if (ch == '/') {      handler.rootNode();      handler.nodeSeparator(ctx.getLocation());    }  } else {    if (ch == '=') {      handler.nodeType(buffer.toString().trim());      handler.nodeTypeNameSeparator(ctx.getLocation());    } else     if (ch == ':') {      handler.nodeName(buffer.toString().trim());    } else {      final String value=buffer.toString().trim();      if (".".equals(value)) {      } else       if ("..".equals(value)) {        handler.parentNode();      } else       if (".type".equals(value)) {        handler.nodeType();      } else {        if (ch == '/') {          if ("".equals(value)) {            handler.rootNode();          } else {            handler.nodeName(value);          }        } else {          handler.nodeTypeOrName(value);        }      }      if (ch == '/') {        handler.nodeSeparator(ctx.getLocation());      }    }  }  propValueContent=false;} @AT@ 6331 @LENGTH@ 1850
---------UPD IfStatement@@if (stateId.equals(NodeState.ID)) {  char ch=ctx.getCharacter();  if (buffer.length() == 0) {    if (ch == '/') {      handler.rootNode();      handler.nodeSeparator(ctx.getLocation());    }  } else {    if (ch == '=') {      handler.nodeType(buffer.toString().trim());      handler.nodeTypeNameSeparator(ctx.getLocation());    } else     if (ch == ':') {      handler.nodeName(buffer.toString().trim());    } else {      final String value=buffer.toString().trim();      if (".".equals(value)) {      } else       if ("..".equals(value)) {        handler.parentNode();      } else       if (".type".equals(value)) {        handler.nodeType();      } else {        if (ch == '/') {          if ("".equals(value)) {            handler.rootNode();          } else {            handler.nodeName(value);          }        } else {          handler.nodeTypeOrName(value);        }      }      if (ch == '/') {        handler.nodeSeparator(ctx.getLocation());      }    }  }} @TO@ if (stateId.equals(NodeState.ID)) {  char ch=ctx.getCharacter();  if (buffer.length() == 0) {    if (ch == '/') {      handler.rootNode();      handler.nodeSeparator(ctx.getLocation());    }  } else {    if (ch == '=') {      handler.nodeType(buffer.toString().trim());      handler.nodeTypeNameSeparator(ctx.getLocation());    } else     if (ch == ':') {      handler.nodeName(buffer.toString().trim());    } else {      final String value=buffer.toString().trim();      if (".".equals(value)) {      } else       if ("..".equals(value)) {        handler.parentNode();      } else       if (".type".equals(value)) {        handler.nodeType();      } else {        if (ch == '/') {          if ("".equals(value)) {            handler.rootNode();          } else {            handler.nodeName(value);          }        } else {          handler.nodeTypeOrName(value);        }      }      if (ch == '/') {        handler.nodeSeparator(ctx.getLocation());      }    }  }  propValueContent=false;} @AT@ 6331 @LENGTH@ 1850
------------UPD Block@@ThenBody:{  char ch=ctx.getCharacter();  if (buffer.length() == 0) {    if (ch == '/') {      handler.rootNode();      handler.nodeSeparator(ctx.getLocation());    }  } else {    if (ch == '=') {      handler.nodeType(buffer.toString().trim());      handler.nodeTypeNameSeparator(ctx.getLocation());    } else     if (ch == ':') {      handler.nodeName(buffer.toString().trim());    } else {      final String value=buffer.toString().trim();      if (".".equals(value)) {      } else       if ("..".equals(value)) {        handler.parentNode();      } else       if (".type".equals(value)) {        handler.nodeType();      } else {        if (ch == '/') {          if ("".equals(value)) {            handler.rootNode();          } else {            handler.nodeName(value);          }        } else {          handler.nodeTypeOrName(value);        }      }      if (ch == '/') {        handler.nodeSeparator(ctx.getLocation());      }    }  }} @TO@ ThenBody:{  char ch=ctx.getCharacter();  if (buffer.length() == 0) {    if (ch == '/') {      handler.rootNode();      handler.nodeSeparator(ctx.getLocation());    }  } else {    if (ch == '=') {      handler.nodeType(buffer.toString().trim());      handler.nodeTypeNameSeparator(ctx.getLocation());    } else     if (ch == ':') {      handler.nodeName(buffer.toString().trim());    } else {      final String value=buffer.toString().trim();      if (".".equals(value)) {      } else       if ("..".equals(value)) {        handler.parentNode();      } else       if (".type".equals(value)) {        handler.nodeType();      } else {        if (ch == '/') {          if ("".equals(value)) {            handler.rootNode();          } else {            handler.nodeName(value);          }        } else {          handler.nodeTypeOrName(value);        }      }      if (ch == '/') {        handler.nodeSeparator(ctx.getLocation());      }    }  }  propValueContent=false;} @AT@ 6364 @LENGTH@ 1817
---------------INS ExpressionStatement@@Assignment:propValueContent=false @TO@ Block@@ThenBody:{  char ch=ctx.getCharacter();  if (buffer.length() == 0) {    if (ch == '/') {      handler.rootNode();      handler.nodeSeparator(ctx.getLocation());    }  } else {    if (ch == '=') {      handler.nodeType(buffer.toString().trim());      handler.nodeTypeNameSeparator(ctx.getLocation());    } else     if (ch == ':') {      handler.nodeName(buffer.toString().trim());    } else {      final String value=buffer.toString().trim();      if (".".equals(value)) {      } else       if ("..".equals(value)) {        handler.parentNode();      } else       if (".type".equals(value)) {        handler.nodeType();      } else {        if (ch == '/') {          if ("".equals(value)) {            handler.rootNode();          } else {            handler.nodeName(value);          }        } else {          handler.nodeTypeOrName(value);        }      }      if (ch == '/') {        handler.nodeSeparator(ctx.getLocation());      }    }  }} @AT@ 8328 @LENGTH@ 25
------------------INS Assignment@@propValueContent=false @TO@ ExpressionStatement@@Assignment:propValueContent=false @AT@ 8328 @LENGTH@ 24
---------------------INS SimpleName@@propValueContent @TO@ Assignment@@propValueContent=false @AT@ 8328 @LENGTH@ 16
---------------------INS Operator@@= @TO@ Assignment@@propValueContent=false @AT@ 8344 @LENGTH@ 1
---------------------INS BooleanLiteral@@false @TO@ Assignment@@propValueContent=false @AT@ 8347 @LENGTH@ 5
---------UPD IfStatement@@if (stateId.equals(NodeState.ID)) {  char ch=ctx.getCharacter();  if (buffer.length() == 0) {    if (ch == '/') {      handler.rootNode();      handler.nodeSeparator(ctx.getLocation());    }  } else {    if (ch == '=') {      handler.nodeType(buffer.toString().trim());      handler.nodeTypeNameSeparator(ctx.getLocation());    } else     if (ch == ':') {      handler.nodeName(buffer.toString().trim());    } else {      final String value=buffer.toString().trim();      if (".".equals(value)) {      } else       if ("..".equals(value)) {        handler.parentNode();      } else       if (".type".equals(value)) {        handler.nodeType();      } else {        if (ch == '/') {          if ("".equals(value)) {            handler.rootNode();          } else {            handler.nodeName(value);          }        } else {          handler.nodeTypeOrName(value);        }      }      if (ch == '/') {        handler.nodeSeparator(ctx.getLocation());      }    }  }} @TO@ if (stateId.equals(NodeState.ID)) {  char ch=ctx.getCharacter();  if (buffer.length() == 0) {    if (ch == '/') {      handler.rootNode();      handler.nodeSeparator(ctx.getLocation());    }  } else {    if (ch == '=') {      handler.nodeType(buffer.toString().trim());      handler.nodeTypeNameSeparator(ctx.getLocation());    } else     if (ch == ':') {      handler.nodeName(buffer.toString().trim());    } else {      final String value=buffer.toString().trim();      if (".".equals(value)) {      } else       if ("..".equals(value)) {        handler.parentNode();      } else       if (".type".equals(value)) {        handler.nodeType();      } else {        if (ch == '/') {          if ("".equals(value)) {            handler.rootNode();          } else {            handler.nodeName(value);          }        } else {          handler.nodeTypeOrName(value);        }      }      if (ch == '/') {        handler.nodeSeparator(ctx.getLocation());      }    }  }  propValueContent=false;} @AT@ 6331 @LENGTH@ 1850
------------UPD Block@@ThenBody:{  char ch=ctx.getCharacter();  if (buffer.length() == 0) {    if (ch == '/') {      handler.rootNode();      handler.nodeSeparator(ctx.getLocation());    }  } else {    if (ch == '=') {      handler.nodeType(buffer.toString().trim());      handler.nodeTypeNameSeparator(ctx.getLocation());    } else     if (ch == ':') {      handler.nodeName(buffer.toString().trim());    } else {      final String value=buffer.toString().trim();      if (".".equals(value)) {      } else       if ("..".equals(value)) {        handler.parentNode();      } else       if (".type".equals(value)) {        handler.nodeType();      } else {        if (ch == '/') {          if ("".equals(value)) {            handler.rootNode();          } else {            handler.nodeName(value);          }        } else {          handler.nodeTypeOrName(value);        }      }      if (ch == '/') {        handler.nodeSeparator(ctx.getLocation());      }    }  }} @TO@ ThenBody:{  char ch=ctx.getCharacter();  if (buffer.length() == 0) {    if (ch == '/') {      handler.rootNode();      handler.nodeSeparator(ctx.getLocation());    }  } else {    if (ch == '=') {      handler.nodeType(buffer.toString().trim());      handler.nodeTypeNameSeparator(ctx.getLocation());    } else     if (ch == ':') {      handler.nodeName(buffer.toString().trim());    } else {      final String value=buffer.toString().trim();      if (".".equals(value)) {      } else       if ("..".equals(value)) {        handler.parentNode();      } else       if (".type".equals(value)) {        handler.nodeType();      } else {        if (ch == '/') {          if ("".equals(value)) {            handler.rootNode();          } else {            handler.nodeName(value);          }        } else {          handler.nodeTypeOrName(value);        }      }      if (ch == '/') {        handler.nodeSeparator(ctx.getLocation());      }    }  }  propValueContent=false;} @AT@ 6364 @LENGTH@ 1817
---------------INS ExpressionStatement@@Assignment:propValueContent=false @TO@ Block@@ThenBody:{  char ch=ctx.getCharacter();  if (buffer.length() == 0) {    if (ch == '/') {      handler.rootNode();      handler.nodeSeparator(ctx.getLocation());    }  } else {    if (ch == '=') {      handler.nodeType(buffer.toString().trim());      handler.nodeTypeNameSeparator(ctx.getLocation());    } else     if (ch == ':') {      handler.nodeName(buffer.toString().trim());    } else {      final String value=buffer.toString().trim();      if (".".equals(value)) {      } else       if ("..".equals(value)) {        handler.parentNode();      } else       if (".type".equals(value)) {        handler.nodeType();      } else {        if (ch == '/') {          if ("".equals(value)) {            handler.rootNode();          } else {            handler.nodeName(value);          }        } else {          handler.nodeTypeOrName(value);        }      }      if (ch == '/') {        handler.nodeSeparator(ctx.getLocation());      }    }  }} @AT@ 8328 @LENGTH@ 25
------------------INS Assignment@@propValueContent=false @TO@ ExpressionStatement@@Assignment:propValueContent=false @AT@ 8328 @LENGTH@ 24
---------------------INS SimpleName@@propValueContent @TO@ Assignment@@propValueContent=false @AT@ 8328 @LENGTH@ 16
---------------------INS Operator@@= @TO@ Assignment@@propValueContent=false @AT@ 8344 @LENGTH@ 1
---------------------INS BooleanLiteral@@false @TO@ Assignment@@propValueContent=false @AT@ 8347 @LENGTH@ 5
---------UPD IfStatement@@if (stateId.equals(NodeState.ID)) {  char ch=ctx.getCharacter();  if (buffer.length() == 0) {    if (ch == '/') {      handler.rootNode();      handler.nodeSeparator(ctx.getLocation());    }  } else {    if (ch == '=') {      handler.nodeType(buffer.toString().trim());      handler.nodeTypeNameSeparator(ctx.getLocation());    } else     if (ch == ':') {      handler.nodeName(buffer.toString().trim());    } else {      final String value=buffer.toString().trim();      if (".".equals(value)) {      } else       if ("..".equals(value)) {        handler.parentNode();      } else       if (".type".equals(value)) {        handler.nodeType();      } else {        if (ch == '/') {          if ("".equals(value)) {            handler.rootNode();          } else {            handler.nodeName(value);          }        } else {          handler.nodeTypeOrName(value);        }      }      if (ch == '/') {        handler.nodeSeparator(ctx.getLocation());      }    }  }} @TO@ if (stateId.equals(NodeState.ID)) {  char ch=ctx.getCharacter();  if (buffer.length() == 0) {    if (ch == '/') {      handler.rootNode();      handler.nodeSeparator(ctx.getLocation());    }  } else {    if (ch == '=') {      handler.nodeType(buffer.toString().trim());      handler.nodeTypeNameSeparator(ctx.getLocation());    } else     if (ch == ':') {      handler.nodeName(buffer.toString().trim());    } else {      final String value=buffer.toString().trim();      if (".".equals(value)) {      } else       if ("..".equals(value)) {        handler.parentNode();      } else       if (".type".equals(value)) {        handler.nodeType();      } else {        if (ch == '/') {          if ("".equals(value)) {            handler.rootNode();          } else {            handler.nodeName(value);          }        } else {          handler.nodeTypeOrName(value);        }      }      if (ch == '/') {        handler.nodeSeparator(ctx.getLocation());      }    }  }  propValueContent=false;} @AT@ 6331 @LENGTH@ 1850
------------UPD Block@@ThenBody:{  char ch=ctx.getCharacter();  if (buffer.length() == 0) {    if (ch == '/') {      handler.rootNode();      handler.nodeSeparator(ctx.getLocation());    }  } else {    if (ch == '=') {      handler.nodeType(buffer.toString().trim());      handler.nodeTypeNameSeparator(ctx.getLocation());    } else     if (ch == ':') {      handler.nodeName(buffer.toString().trim());    } else {      final String value=buffer.toString().trim();      if (".".equals(value)) {      } else       if ("..".equals(value)) {        handler.parentNode();      } else       if (".type".equals(value)) {        handler.nodeType();      } else {        if (ch == '/') {          if ("".equals(value)) {            handler.rootNode();          } else {            handler.nodeName(value);          }        } else {          handler.nodeTypeOrName(value);        }      }      if (ch == '/') {        handler.nodeSeparator(ctx.getLocation());      }    }  }} @TO@ ThenBody:{  char ch=ctx.getCharacter();  if (buffer.length() == 0) {    if (ch == '/') {      handler.rootNode();      handler.nodeSeparator(ctx.getLocation());    }  } else {    if (ch == '=') {      handler.nodeType(buffer.toString().trim());      handler.nodeTypeNameSeparator(ctx.getLocation());    } else     if (ch == ':') {      handler.nodeName(buffer.toString().trim());    } else {      final String value=buffer.toString().trim();      if (".".equals(value)) {      } else       if ("..".equals(value)) {        handler.parentNode();      } else       if (".type".equals(value)) {        handler.nodeType();      } else {        if (ch == '/') {          if ("".equals(value)) {            handler.rootNode();          } else {            handler.nodeName(value);          }        } else {          handler.nodeTypeOrName(value);        }      }      if (ch == '/') {        handler.nodeSeparator(ctx.getLocation());      }    }  }  propValueContent=false;} @AT@ 6364 @LENGTH@ 1817
---------------INS ExpressionStatement@@Assignment:propValueContent=false @TO@ Block@@ThenBody:{  char ch=ctx.getCharacter();  if (buffer.length() == 0) {    if (ch == '/') {      handler.rootNode();      handler.nodeSeparator(ctx.getLocation());    }  } else {    if (ch == '=') {      handler.nodeType(buffer.toString().trim());      handler.nodeTypeNameSeparator(ctx.getLocation());    } else     if (ch == ':') {      handler.nodeName(buffer.toString().trim());    } else {      final String value=buffer.toString().trim();      if (".".equals(value)) {      } else       if ("..".equals(value)) {        handler.parentNode();      } else       if (".type".equals(value)) {        handler.nodeType();      } else {        if (ch == '/') {          if ("".equals(value)) {            handler.rootNode();          } else {            handler.nodeName(value);          }        } else {          handler.nodeTypeOrName(value);        }      }      if (ch == '/') {        handler.nodeSeparator(ctx.getLocation());      }    }  }} @AT@ 8328 @LENGTH@ 25
------------------INS Assignment@@propValueContent=false @TO@ ExpressionStatement@@Assignment:propValueContent=false @AT@ 8328 @LENGTH@ 24
---------------------INS SimpleName@@propValueContent @TO@ Assignment@@propValueContent=false @AT@ 8328 @LENGTH@ 16
---------------------INS Operator@@= @TO@ Assignment@@propValueContent=false @AT@ 8344 @LENGTH@ 1
---------------------INS BooleanLiteral@@false @TO@ Assignment@@propValueContent=false @AT@ 8347 @LENGTH@ 5
---------UPD IfStatement@@if (stateId.equals(NodeState.ID)) {  char ch=ctx.getCharacter();  if (buffer.length() == 0) {    if (ch == '/') {      handler.rootNode();      handler.nodeSeparator(ctx.getLocation());    }  } else {    if (ch == '=') {      handler.nodeType(buffer.toString().trim());      handler.nodeTypeNameSeparator(ctx.getLocation());    } else     if (ch == ':') {      handler.nodeName(buffer.toString().trim());    } else {      final String value=buffer.toString().trim();      if (".".equals(value)) {      } else       if ("..".equals(value)) {        handler.parentNode();      } else       if (".type".equals(value)) {        handler.nodeType();      } else {        if (ch == '/') {          if ("".equals(value)) {            handler.rootNode();          } else {            handler.nodeName(value);          }        } else {          handler.nodeTypeOrName(value);        }      }      if (ch == '/') {        handler.nodeSeparator(ctx.getLocation());      }    }  }} @TO@ if (stateId.equals(NodeState.ID)) {  char ch=ctx.getCharacter();  if (buffer.length() == 0) {    if (ch == '/') {      handler.rootNode();      handler.nodeSeparator(ctx.getLocation());    }  } else {    if (ch == '=') {      handler.nodeType(buffer.toString().trim());      handler.nodeTypeNameSeparator(ctx.getLocation());    } else     if (ch == ':') {      handler.nodeName(buffer.toString().trim());    } else {      final String value=buffer.toString().trim();      if (".".equals(value)) {      } else       if ("..".equals(value)) {        handler.parentNode();      } else       if (".type".equals(value)) {        handler.nodeType();      } else {        if (ch == '/') {          if ("".equals(value)) {            handler.rootNode();          } else {            handler.nodeName(value);          }        } else {          handler.nodeTypeOrName(value);        }      }      if (ch == '/') {        handler.nodeSeparator(ctx.getLocation());      }    }  }  propValueContent=false;} @AT@ 6331 @LENGTH@ 1850
------------UPD Block@@ThenBody:{  char ch=ctx.getCharacter();  if (buffer.length() == 0) {    if (ch == '/') {      handler.rootNode();      handler.nodeSeparator(ctx.getLocation());    }  } else {    if (ch == '=') {      handler.nodeType(buffer.toString().trim());      handler.nodeTypeNameSeparator(ctx.getLocation());    } else     if (ch == ':') {      handler.nodeName(buffer.toString().trim());    } else {      final String value=buffer.toString().trim();      if (".".equals(value)) {      } else       if ("..".equals(value)) {        handler.parentNode();      } else       if (".type".equals(value)) {        handler.nodeType();      } else {        if (ch == '/') {          if ("".equals(value)) {            handler.rootNode();          } else {            handler.nodeName(value);          }        } else {          handler.nodeTypeOrName(value);        }      }      if (ch == '/') {        handler.nodeSeparator(ctx.getLocation());      }    }  }} @TO@ ThenBody:{  char ch=ctx.getCharacter();  if (buffer.length() == 0) {    if (ch == '/') {      handler.rootNode();      handler.nodeSeparator(ctx.getLocation());    }  } else {    if (ch == '=') {      handler.nodeType(buffer.toString().trim());      handler.nodeTypeNameSeparator(ctx.getLocation());    } else     if (ch == ':') {      handler.nodeName(buffer.toString().trim());    } else {      final String value=buffer.toString().trim();      if (".".equals(value)) {      } else       if ("..".equals(value)) {        handler.parentNode();      } else       if (".type".equals(value)) {        handler.nodeType();      } else {        if (ch == '/') {          if ("".equals(value)) {            handler.rootNode();          } else {            handler.nodeName(value);          }        } else {          handler.nodeTypeOrName(value);        }      }      if (ch == '/') {        handler.nodeSeparator(ctx.getLocation());      }    }  }  propValueContent=false;} @AT@ 6364 @LENGTH@ 1817
---------------INS ExpressionStatement@@Assignment:propValueContent=false @TO@ Block@@ThenBody:{  char ch=ctx.getCharacter();  if (buffer.length() == 0) {    if (ch == '/') {      handler.rootNode();      handler.nodeSeparator(ctx.getLocation());    }  } else {    if (ch == '=') {      handler.nodeType(buffer.toString().trim());      handler.nodeTypeNameSeparator(ctx.getLocation());    } else     if (ch == ':') {      handler.nodeName(buffer.toString().trim());    } else {      final String value=buffer.toString().trim();      if (".".equals(value)) {      } else       if ("..".equals(value)) {        handler.parentNode();      } else       if (".type".equals(value)) {        handler.nodeType();      } else {        if (ch == '/') {          if ("".equals(value)) {            handler.rootNode();          } else {            handler.nodeName(value);          }        } else {          handler.nodeTypeOrName(value);        }      }      if (ch == '/') {        handler.nodeSeparator(ctx.getLocation());      }    }  }} @AT@ 8328 @LENGTH@ 25
------------------INS Assignment@@propValueContent=false @TO@ ExpressionStatement@@Assignment:propValueContent=false @AT@ 8328 @LENGTH@ 24
---------------------INS SimpleName@@propValueContent @TO@ Assignment@@propValueContent=false @AT@ 8328 @LENGTH@ 16
---------------------INS Operator@@= @TO@ Assignment@@propValueContent=false @AT@ 8344 @LENGTH@ 1
---------------------INS BooleanLiteral@@false @TO@ Assignment@@propValueContent=false @AT@ 8347 @LENGTH@ 5
---------UPD IfStatement@@if (stateId.equals(NodeState.ID)) {  char ch=ctx.getCharacter();  if (buffer.length() == 0) {    if (ch == '/') {      handler.rootNode();      handler.nodeSeparator(ctx.getLocation());    }  } else {    if (ch == '=') {      handler.nodeType(buffer.toString().trim());      handler.nodeTypeNameSeparator(ctx.getLocation());    } else     if (ch == ':') {      handler.nodeName(buffer.toString().trim());    } else {      final String value=buffer.toString().trim();      if (".".equals(value)) {      } else       if ("..".equals(value)) {        handler.parentNode();      } else       if (".type".equals(value)) {        handler.nodeType();      } else {        if (ch == '/') {          if ("".equals(value)) {            handler.rootNode();          } else {            handler.nodeName(value);          }        } else {          handler.nodeTypeOrName(value);        }      }      if (ch == '/') {        handler.nodeSeparator(ctx.getLocation());      }    }  }} @TO@ if (stateId.equals(NodeState.ID)) {  char ch=ctx.getCharacter();  if (buffer.length() == 0) {    if (ch == '/') {      handler.rootNode();      handler.nodeSeparator(ctx.getLocation());    }  } else {    if (ch == '=') {      handler.nodeType(buffer.toString().trim());      handler.nodeTypeNameSeparator(ctx.getLocation());    } else     if (ch == ':') {      handler.nodeName(buffer.toString().trim());    } else {      final String value=buffer.toString().trim();      if (".".equals(value)) {      } else       if ("..".equals(value)) {        handler.parentNode();      } else       if (".type".equals(value)) {        handler.nodeType();      } else {        if (ch == '/') {          if ("".equals(value)) {            handler.rootNode();          } else {            handler.nodeName(value);          }        } else {          handler.nodeTypeOrName(value);        }      }      if (ch == '/') {        handler.nodeSeparator(ctx.getLocation());      }    }  }  propValueContent=false;} @AT@ 6331 @LENGTH@ 1850
------------UPD Block@@ThenBody:{  char ch=ctx.getCharacter();  if (buffer.length() == 0) {    if (ch == '/') {      handler.rootNode();      handler.nodeSeparator(ctx.getLocation());    }  } else {    if (ch == '=') {      handler.nodeType(buffer.toString().trim());      handler.nodeTypeNameSeparator(ctx.getLocation());    } else     if (ch == ':') {      handler.nodeName(buffer.toString().trim());    } else {      final String value=buffer.toString().trim();      if (".".equals(value)) {      } else       if ("..".equals(value)) {        handler.parentNode();      } else       if (".type".equals(value)) {        handler.nodeType();      } else {        if (ch == '/') {          if ("".equals(value)) {            handler.rootNode();          } else {            handler.nodeName(value);          }        } else {          handler.nodeTypeOrName(value);        }      }      if (ch == '/') {        handler.nodeSeparator(ctx.getLocation());      }    }  }} @TO@ ThenBody:{  char ch=ctx.getCharacter();  if (buffer.length() == 0) {    if (ch == '/') {      handler.rootNode();      handler.nodeSeparator(ctx.getLocation());    }  } else {    if (ch == '=') {      handler.nodeType(buffer.toString().trim());      handler.nodeTypeNameSeparator(ctx.getLocation());    } else     if (ch == ':') {      handler.nodeName(buffer.toString().trim());    } else {      final String value=buffer.toString().trim();      if (".".equals(value)) {      } else       if ("..".equals(value)) {        handler.parentNode();      } else       if (".type".equals(value)) {        handler.nodeType();      } else {        if (ch == '/') {          if ("".equals(value)) {            handler.rootNode();          } else {            handler.nodeName(value);          }        } else {          handler.nodeTypeOrName(value);        }      }      if (ch == '/') {        handler.nodeSeparator(ctx.getLocation());      }    }  }  propValueContent=false;} @AT@ 6364 @LENGTH@ 1817
---------------INS ExpressionStatement@@Assignment:propValueContent=false @TO@ Block@@ThenBody:{  char ch=ctx.getCharacter();  if (buffer.length() == 0) {    if (ch == '/') {      handler.rootNode();      handler.nodeSeparator(ctx.getLocation());    }  } else {    if (ch == '=') {      handler.nodeType(buffer.toString().trim());      handler.nodeTypeNameSeparator(ctx.getLocation());    } else     if (ch == ':') {      handler.nodeName(buffer.toString().trim());    } else {      final String value=buffer.toString().trim();      if (".".equals(value)) {      } else       if ("..".equals(value)) {        handler.parentNode();      } else       if (".type".equals(value)) {        handler.nodeType();      } else {        if (ch == '/') {          if ("".equals(value)) {            handler.rootNode();          } else {            handler.nodeName(value);          }        } else {          handler.nodeTypeOrName(value);        }      }      if (ch == '/') {        handler.nodeSeparator(ctx.getLocation());      }    }  }} @AT@ 8328 @LENGTH@ 25
------------------INS Assignment@@propValueContent=false @TO@ ExpressionStatement@@Assignment:propValueContent=false @AT@ 8328 @LENGTH@ 24
---------------------INS SimpleName@@propValueContent @TO@ Assignment@@propValueContent=false @AT@ 8328 @LENGTH@ 16
---------------------INS Operator@@= @TO@ Assignment@@propValueContent=false @AT@ 8344 @LENGTH@ 1
---------------------INS BooleanLiteral@@false @TO@ Assignment@@propValueContent=false @AT@ 8347 @LENGTH@ 5


INS MethodDeclaration@@private, static, Element, MethodName:getFirstElement, Source source,  @TO@ TypeDeclaration@@[public]DefaultCxfBinding, [CxfBinding, HeaderFilterStrategyAware] @AT@ 29711 @LENGTH@ 241
---INS Modifier@@private @TO@ MethodDeclaration@@private, static, Element, MethodName:getFirstElement, Source source,  @AT@ 29711 @LENGTH@ 7
---INS Modifier@@static @TO@ MethodDeclaration@@private, static, Element, MethodName:getFirstElement, Source source,  @AT@ 29719 @LENGTH@ 6
---INS SimpleType@@Element @TO@ MethodDeclaration@@private, static, Element, MethodName:getFirstElement, Source source,  @AT@ 29726 @LENGTH@ 7
---INS SimpleName@@MethodName:getFirstElement @TO@ MethodDeclaration@@private, static, Element, MethodName:getFirstElement, Source source,  @AT@ 29734 @LENGTH@ 15
---INS SingleVariableDeclaration@@Source source @TO@ MethodDeclaration@@private, static, Element, MethodName:getFirstElement, Source source,  @AT@ 29750 @LENGTH@ 13
------INS SimpleType@@Source @TO@ SingleVariableDeclaration@@Source source @AT@ 29750 @LENGTH@ 6
------INS SimpleName@@source @TO@ SingleVariableDeclaration@@Source source @AT@ 29757 @LENGTH@ 6
---INS TryStatement@@try {  return ((Document)XMLUtils.fromSource(source)).getDocumentElement();} catch (Exception e) {} @TO@ MethodDeclaration@@private, static, Element, MethodName:getFirstElement, Source source,  @AT@ 29775 @LENGTH@ 150
------INS ReturnStatement@@MethodInvocation:((Document)XMLUtils.fromSource(source)).getDocumentElement() @TO@ TryStatement@@try {  return ((Document)XMLUtils.fromSource(source)).getDocumentElement();} catch (Exception e) {} @AT@ 29793 @LENGTH@ 68
---------INS MethodInvocation@@((Document)XMLUtils.fromSource(source)).getDocumentElement() @TO@ ReturnStatement@@MethodInvocation:((Document)XMLUtils.fromSource(source)).getDocumentElement() @AT@ 29800 @LENGTH@ 60
------------INS ParenthesizedExpression@@((Document)XMLUtils.fromSource(source)) @TO@ MethodInvocation@@((Document)XMLUtils.fromSource(source)).getDocumentElement() @AT@ 29800 @LENGTH@ 39
---------------INS CastExpression@@(Document)XMLUtils.fromSource(source) @TO@ ParenthesizedExpression@@((Document)XMLUtils.fromSource(source)) @AT@ 29801 @LENGTH@ 37
------------------INS SimpleType@@Document @TO@ CastExpression@@(Document)XMLUtils.fromSource(source) @AT@ 29802 @LENGTH@ 8
------------------INS MethodInvocation@@XMLUtils.fromSource(source) @TO@ CastExpression@@(Document)XMLUtils.fromSource(source) @AT@ 29811 @LENGTH@ 27
---------------------INS SimpleName@@Name:XMLUtils @TO@ MethodInvocation@@XMLUtils.fromSource(source) @AT@ 29811 @LENGTH@ 8
---------------------INS SimpleName@@MethodName:fromSource:[source] @TO@ MethodInvocation@@XMLUtils.fromSource(source) @AT@ 29820 @LENGTH@ 18
------------------------INS SimpleName@@source @TO@ SimpleName@@MethodName:fromSource:[source] @AT@ 29831 @LENGTH@ 6
------------INS SimpleName@@MethodName:getDocumentElement:[] @TO@ MethodInvocation@@((Document)XMLUtils.fromSource(source)).getDocumentElement() @AT@ 29840 @LENGTH@ 20
------INS CatchClause@@catch (Exception e) {} @TO@ TryStatement@@try {  return ((Document)XMLUtils.fromSource(source)).getDocumentElement();} catch (Exception e) {} @AT@ 29872 @LENGTH@ 53
---------INS SingleVariableDeclaration@@Exception e @TO@ CatchClause@@catch (Exception e) {} @AT@ 29879 @LENGTH@ 11
------------INS SimpleType@@Exception @TO@ SingleVariableDeclaration@@Exception e @AT@ 29879 @LENGTH@ 9
------------INS SimpleName@@e @TO@ SingleVariableDeclaration@@Exception e @AT@ 29889 @LENGTH@ 1
---INS ReturnStatement@@NullLiteral:null @TO@ MethodDeclaration@@private, static, Element, MethodName:getFirstElement, Source source,  @AT@ 29934 @LENGTH@ 12
------INS NullLiteral@@null @TO@ ReturnStatement@@NullLiteral:null @AT@ 29941 @LENGTH@ 4


UPD MethodDeclaration@@public, static, void, MethodName:addService, final String name, final String abstractPath, final ServiceTarget serviceTarget,  @TO@ public, static, ServiceController<String>, MethodName:addService, final String name, final String abstractPath, final ServiceTarget serviceTarget,  @AT@ 1537 @LENGTH@ 185
---DEL PrimitiveType@@void @AT@ 1551 @LENGTH@ 4
---INS ParameterizedType@@ServiceController<String> @TO@ MethodDeclaration@@public, static, void, MethodName:addService, final String name, final String abstractPath, final ServiceTarget serviceTarget,  @AT@ 1599 @LENGTH@ 25
------INS SimpleType@@ServiceController @TO@ ParameterizedType@@ServiceController<String> @AT@ 1599 @LENGTH@ 17
------INS SimpleType@@String @TO@ ParameterizedType@@ServiceController<String> @AT@ 1617 @LENGTH@ 6
---DEL ExpressionStatement@@MethodInvocation:addService(pathNameOf(name),abstractPath,serviceTarget) @AT@ 1658 @LENGTH@ 58
---INS ReturnStatement@@MethodInvocation:addService(pathNameOf(name),abstractPath,serviceTarget) @TO@ MethodDeclaration@@public, static, void, MethodName:addService, final String name, final String abstractPath, final ServiceTarget serviceTarget,  @AT@ 1727 @LENGTH@ 65
------MOV MethodInvocation@@addService(pathNameOf(name),abstractPath,serviceTarget) @TO@ ReturnStatement@@MethodInvocation:addService(pathNameOf(name),abstractPath,serviceTarget) @AT@ 1658 @LENGTH@ 57


DEL IfStatement@@if (TransactionManagementType.BEAN.equals(description.getTransactionManagementType())) {  addComponentSystemInterceptorFactory(new ComponentInterceptorFactory(){    @Override protected Interceptor create(    final Component component,    final InterceptorFactoryContext context){      return new SingletonBMTInterceptor((SingletonComponent)component);    }  });} @AT@ 2411 @LENGTH@ 446
---DEL MethodInvocation@@TransactionManagementType.BEAN.equals(description.getTransactionManagementType()) @AT@ 2415 @LENGTH@ 81
------DEL QualifiedName@@Name:TransactionManagementType.BEAN @AT@ 2415 @LENGTH@ 30
------DEL SimpleName@@MethodName:equals:[description.getTransactionManagementType()] @AT@ 2446 @LENGTH@ 50
---------DEL MethodInvocation@@description.getTransactionManagementType() @AT@ 2453 @LENGTH@ 42
------------DEL SimpleName@@Name:description @AT@ 2453 @LENGTH@ 11
------------DEL SimpleName@@MethodName:getTransactionManagementType:[] @AT@ 2465 @LENGTH@ 30
---DEL Block@@ThenBody:{  addComponentSystemInterceptorFactory(new ComponentInterceptorFactory(){    @Override protected Interceptor create(    final Component component,    final InterceptorFactoryContext context){      return new SingletonBMTInterceptor((SingletonComponent)component);    }  });} @AT@ 2498 @LENGTH@ 359
------DEL ExpressionStatement@@MethodInvocation:addComponentSystemInterceptorFactory(new ComponentInterceptorFactory(){
  @Override protected Interceptor create(  final Component component,  final InterceptorFactoryContext context){
    return new SingletonBMTInterceptor((SingletonComponent)component);
  }
}
) @AT@ 2512 @LENGTH@ 335


UPD MethodDeclaration@@public, MongoOptions, MethodName:getObject, Exception,  @TO@ public, MongoOptions, MethodName:getObject,  @AT@ 4037 @LENGTH@ 77
---DEL SimpleType@@Exception @AT@ 4076 @LENGTH@ 9


UPD ExpressionStatement@@MethodInvocation:ServerControllerModelUtil.initOperations(getRegistry(),deploymentRepository,extensibleConfigurationPersister) @TO@ MethodInvocation:ServerControllerModelUtil.initOperations(getRegistry(),deploymentRepository,extensibleConfigurationPersister,serverEnvironment) @AT@ 5538 @LENGTH@ 112
---UPD MethodInvocation@@ServerControllerModelUtil.initOperations(getRegistry(),deploymentRepository,extensibleConfigurationPersister) @TO@ ServerControllerModelUtil.initOperations(getRegistry(),deploymentRepository,extensibleConfigurationPersister,serverEnvironment) @AT@ 5538 @LENGTH@ 111
------UPD SimpleName@@MethodName:initOperations:[getRegistry(), deploymentRepository, extensibleConfigurationPersister] @TO@ MethodName:initOperations:[getRegistry(), deploymentRepository, extensibleConfigurationPersister, serverEnvironment] @AT@ 5564 @LENGTH@ 85
---------INS SimpleName@@serverEnvironment @TO@ SimpleName@@MethodName:initOperations:[getRegistry(), deploymentRepository, extensibleConfigurationPersister] @AT@ 5650 @LENGTH@ 17


UPD ExpressionStatement@@MethodInvocation:assertEquals("Size of list",2,endpoint.qeueSize()) @TO@ MethodInvocation:assertEquals("Size of list",2,endpoint.queueSize()) @AT@ 2294 @LENGTH@ 53
---UPD MethodInvocation@@assertEquals("Size of list",2,endpoint.qeueSize()) @TO@ assertEquals("Size of list",2,endpoint.queueSize()) @AT@ 2294 @LENGTH@ 52
------UPD SimpleName@@MethodName:assertEquals:["Size of list", 2, endpoint.qeueSize()] @TO@ MethodName:assertEquals:["Size of list", 2, endpoint.queueSize()] @AT@ 2294 @LENGTH@ 52
---------UPD MethodInvocation@@endpoint.qeueSize() @TO@ endpoint.queueSize() @AT@ 2326 @LENGTH@ 19
------------UPD SimpleName@@MethodName:qeueSize:[] @TO@ MethodName:queueSize:[] @AT@ 2335 @LENGTH@ 10


INS ExpressionStatement@@MethodInvocation:repo.setRecoveryInterval(500) @TO@ MethodDeclaration@@public, void, MethodName:configure, Exception,  @AT@ 3502 @LENGTH@ 30
---INS MethodInvocation@@repo.setRecoveryInterval(500) @TO@ ExpressionStatement@@MethodInvocation:repo.setRecoveryInterval(500) @AT@ 3502 @LENGTH@ 29
------INS SimpleName@@Name:repo @TO@ MethodInvocation@@repo.setRecoveryInterval(500) @AT@ 3502 @LENGTH@ 4
------INS SimpleName@@MethodName:setRecoveryInterval:[500] @TO@ MethodInvocation@@repo.setRecoveryInterval(500) @AT@ 3507 @LENGTH@ 24
---------INS NumberLiteral@@500 @TO@ SimpleName@@MethodName:setRecoveryInterval:[500] @AT@ 3527 @LENGTH@ 3


UPD ReturnStatement@@MethodInvocation:memberHoldingTypeDetailsList.get(0) @TO@ MethodInvocation:memberHoldingTypeDetailsList.get(memberHoldingTypeDetailsList.size() - 1) @AT@ 16567 @LENGTH@ 43
---UPD MethodInvocation@@memberHoldingTypeDetailsList.get(0) @TO@ memberHoldingTypeDetailsList.get(memberHoldingTypeDetailsList.size() - 1) @AT@ 16574 @LENGTH@ 35
------UPD SimpleName@@MethodName:get:[0] @TO@ MethodName:get:[memberHoldingTypeDetailsList.size() - 1] @AT@ 16603 @LENGTH@ 6
---------INS InfixExpression@@memberHoldingTypeDetailsList.size() - 1 @TO@ SimpleName@@MethodName:get:[0] @AT@ 16607 @LENGTH@ 39
------------INS MethodInvocation@@memberHoldingTypeDetailsList.size() @TO@ InfixExpression@@memberHoldingTypeDetailsList.size() - 1 @AT@ 16607 @LENGTH@ 35
---------------INS SimpleName@@Name:memberHoldingTypeDetailsList @TO@ MethodInvocation@@memberHoldingTypeDetailsList.size() @AT@ 16607 @LENGTH@ 28
---------------INS SimpleName@@MethodName:size:[] @TO@ MethodInvocation@@memberHoldingTypeDetailsList.size() @AT@ 16636 @LENGTH@ 6
------------INS Operator@@- @TO@ InfixExpression@@memberHoldingTypeDetailsList.size() - 1 @AT@ 16642 @LENGTH@ 1
------------INS NumberLiteral@@1 @TO@ InfixExpression@@memberHoldingTypeDetailsList.size() - 1 @AT@ 16645 @LENGTH@ 1
---------DEL NumberLiteral@@0 @AT@ 16607 @LENGTH@ 1


UPD IfStatement@@if (!phaseContext.getDeploymentUnit().getAttachment(Attachments.SERVICES).getServiceImplementations(ServiceActivator.class.getName()).isEmpty()) {  phaseContext.getDeploymentUnit().addToAttachmentList(Attachments.MODULE_DEPENDENCIES,MSC_DEP);} @TO@ if (servicesAttachments != null && !servicesAttachments.getServiceImplementations(ServiceActivator.class.getName()).isEmpty()) {  phaseContext.getDeploymentUnit().addToAttachmentList(Attachments.MODULE_DEPENDENCIES,MSC_DEP);} @AT@ 2499 @LENGTH@ 264
---UPD PrefixExpression@@!phaseContext.getDeploymentUnit().getAttachment(Attachments.SERVICES).getServiceImplementations(ServiceActivator.class.getName()).isEmpty() @TO@ !servicesAttachments.getServiceImplementations(ServiceActivator.class.getName()).isEmpty() @AT@ 2502 @LENGTH@ 140
---INS InfixExpression@@servicesAttachments != null && !servicesAttachments.getServiceImplementations(ServiceActivator.class.getName()).isEmpty() @TO@ IfStatement@@if (!phaseContext.getDeploymentUnit().getAttachment(Attachments.SERVICES).getServiceImplementations(ServiceActivator.class.getName()).isEmpty()) {  phaseContext.getDeploymentUnit().addToAttachmentList(Attachments.MODULE_DEPENDENCIES,MSC_DEP);} @AT@ 2685 @LENGTH@ 121
------MOV PrefixExpression@@!phaseContext.getDeploymentUnit().getAttachment(Attachments.SERVICES).getServiceImplementations(ServiceActivator.class.getName()).isEmpty() @TO@ InfixExpression@@servicesAttachments != null && !servicesAttachments.getServiceImplementations(ServiceActivator.class.getName()).isEmpty() @AT@ 2502 @LENGTH@ 140
---------UPD MethodInvocation@@phaseContext.getDeploymentUnit().getAttachment(Attachments.SERVICES).getServiceImplementations(ServiceActivator.class.getName()).isEmpty() @TO@ servicesAttachments.getServiceImplementations(ServiceActivator.class.getName()).isEmpty() @AT@ 2504 @LENGTH@ 138
------------DEL MethodInvocation@@MethodName:getAttachment:[Attachments.SERVICES] @AT@ 2504 @LENGTH@ 68
---------------DEL QualifiedName@@Attachments.SERVICES @AT@ 2551 @LENGTH@ 20
------------------DEL SimpleName@@Attachments @AT@ 2551 @LENGTH@ 11
------------------DEL SimpleName@@SERVICES @AT@ 2563 @LENGTH@ 8
------------DEL MethodInvocation@@MethodName:getDeploymentUnit:[] @AT@ 2504 @LENGTH@ 32
------------DEL SimpleName@@Name:phaseContext @AT@ 2504 @LENGTH@ 12
------------INS SimpleName@@Name:servicesAttachments @TO@ MethodInvocation@@phaseContext.getDeploymentUnit().getAttachment(Attachments.SERVICES).getServiceImplementations(ServiceActivator.class.getName()).isEmpty() @AT@ 2717 @LENGTH@ 19
------INS InfixExpression@@servicesAttachments != null @TO@ InfixExpression@@servicesAttachments != null && !servicesAttachments.getServiceImplementations(ServiceActivator.class.getName()).isEmpty() @AT@ 2685 @LENGTH@ 27
---------INS SimpleName@@servicesAttachments @TO@ InfixExpression@@servicesAttachments != null @AT@ 2685 @LENGTH@ 19
---------INS Operator@@!= @TO@ InfixExpression@@servicesAttachments != null @AT@ 2704 @LENGTH@ 2
---------INS NullLiteral@@null @TO@ InfixExpression@@servicesAttachments != null @AT@ 2708 @LENGTH@ 4
------INS Operator@@&& @TO@ InfixExpression@@servicesAttachments != null && !servicesAttachments.getServiceImplementations(ServiceActivator.class.getName()).isEmpty() @AT@ 2712 @LENGTH@ 2


UPD ExpressionStatement@@MethodInvocation:step.get(INPUT_STREAM_INDEX).set(stream++) @TO@ MethodInvocation:step.get(CONTENT).get(0).get(INPUT_STREAM_INDEX).set(stream++) @AT@ 5936 @LENGTH@ 43
---UPD MethodInvocation@@step.get(INPUT_STREAM_INDEX).set(stream++) @TO@ step.get(CONTENT).get(0).get(INPUT_STREAM_INDEX).set(stream++) @AT@ 5936 @LENGTH@ 42
------INS MethodInvocation@@MethodName:get:[0] @TO@ MethodInvocation@@step.get(INPUT_STREAM_INDEX).set(stream++) @AT@ 5936 @LENGTH@ 24
---------INS NumberLiteral@@0 @TO@ MethodInvocation@@MethodName:get:[0] @AT@ 5958 @LENGTH@ 1
------INS MethodInvocation@@MethodName:get:[CONTENT] @TO@ MethodInvocation@@step.get(INPUT_STREAM_INDEX).set(stream++) @AT@ 5936 @LENGTH@ 17
---------INS SimpleName@@CONTENT @TO@ MethodInvocation@@MethodName:get:[CONTENT] @AT@ 5945 @LENGTH@ 7


INS MethodDeclaration@@public, void, MethodName:stop, Exception,  @TO@ TypeDeclaration@@[public]JdbcIdempotentRepository, [IdempotentRepository<String>] @AT@ 2039 @LENGTH@ 68
---INS Modifier@@public @TO@ MethodDeclaration@@public, void, MethodName:stop, Exception,  @AT@ 2039 @LENGTH@ 6
---INS PrimitiveType@@void @TO@ MethodDeclaration@@public, void, MethodName:stop, Exception,  @AT@ 2046 @LENGTH@ 4
---INS SimpleName@@MethodName:stop @TO@ MethodDeclaration@@public, void, MethodName:stop, Exception,  @AT@ 2051 @LENGTH@ 4
---INS SimpleType@@Exception @TO@ MethodDeclaration@@public, void, MethodName:stop, Exception,  @AT@ 2065 @LENGTH@ 9


INS MethodDeclaration@@public, String, MethodName:getDefaultControllerHost,  @TO@ TypeDeclaration@@[public]MockCommandContext, [CommandContext] @AT@ 5604 @LENGTH@ 69
---INS Modifier@@public @TO@ MethodDeclaration@@public, String, MethodName:getDefaultControllerHost,  @AT@ 5604 @LENGTH@ 6
---INS SimpleType@@String @TO@ MethodDeclaration@@public, String, MethodName:getDefaultControllerHost,  @AT@ 5611 @LENGTH@ 6
---INS SimpleName@@MethodName:getDefaultControllerHost @TO@ MethodDeclaration@@public, String, MethodName:getDefaultControllerHost,  @AT@ 5618 @LENGTH@ 24
---INS ReturnStatement@@NullLiteral:null @TO@ MethodDeclaration@@public, String, MethodName:getDefaultControllerHost,  @AT@ 5655 @LENGTH@ 12
------INS NullLiteral@@null @TO@ ReturnStatement@@NullLiteral:null @AT@ 5662 @LENGTH@ 4


UPD MethodDeclaration@@public, String, MethodName:postTweet, TweetForm tweetForm,  @TO@ public, String, MethodName:postTweet, Principal user, TweetForm tweetForm,  @AT@ 2118 @LENGTH@ 475
---UPD VariableDeclarationStatement@@List<ServiceProviderConnection<TwitterOperations>> connections=twitterProvider.getConnections(1); @TO@ List<ServiceProviderConnection<TwitterOperations>> connections=twitterProvider.getConnections(user.getName()); @AT@ 2167 @LENGTH@ 99
------UPD VariableDeclarationFragment@@connections=twitterProvider.getConnections(1) @TO@ connections=twitterProvider.getConnections(user.getName()) @AT@ 2218 @LENGTH@ 47
---------UPD MethodInvocation@@twitterProvider.getConnections(1) @TO@ twitterProvider.getConnections(user.getName()) @AT@ 2232 @LENGTH@ 33
------------UPD SimpleName@@MethodName:getConnections:[1] @TO@ MethodName:getConnections:[user.getName()] @AT@ 2248 @LENGTH@ 17
---------------DEL NumberLiteral@@1 @AT@ 2263 @LENGTH@ 1
---------------INS MethodInvocation@@user.getName() @TO@ SimpleName@@MethodName:getConnections:[1] @AT@ 2348 @LENGTH@ 14
------------------INS SimpleName@@Name:user @TO@ MethodInvocation@@user.getName() @AT@ 2348 @LENGTH@ 4
------------------INS SimpleName@@MethodName:getName:[] @TO@ MethodInvocation@@user.getName() @AT@ 2353 @LENGTH@ 9
---INS SingleVariableDeclaration@@Principal user @TO@ MethodDeclaration@@public, String, MethodName:postTweet, TweetForm tweetForm,  @AT@ 2211 @LENGTH@ 14
------INS SimpleType@@Principal @TO@ SingleVariableDeclaration@@Principal user @AT@ 2211 @LENGTH@ 9
------INS SimpleName@@user @TO@ SingleVariableDeclaration@@Principal user @AT@ 2221 @LENGTH@ 4


DEL FieldDeclaration@@private, static, final, transient, Logger, [LOG=LoggerFactory.getLogger(BindySimpleCsvUnmarshallTest.class)] @AT@ 1747 @LENGTH@ 104
---DEL Modifier@@private @AT@ 1747 @LENGTH@ 7
---DEL Modifier@@static @AT@ 1755 @LENGTH@ 6
---DEL Modifier@@final @AT@ 1762 @LENGTH@ 5
---DEL Modifier@@transient @AT@ 1768 @LENGTH@ 9
---DEL SimpleType@@Logger @AT@ 1778 @LENGTH@ 6
---DEL VariableDeclarationFragment@@LOG=LoggerFactory.getLogger(BindySimpleCsvUnmarshallTest.class) @AT@ 1785 @LENGTH@ 65
------DEL SimpleName@@LOG @AT@ 1785 @LENGTH@ 3
------DEL MethodInvocation@@LoggerFactory.getLogger(BindySimpleCsvUnmarshallTest.class) @AT@ 1791 @LENGTH@ 59
---------DEL SimpleName@@Name:LoggerFactory @AT@ 1791 @LENGTH@ 13
---------DEL SimpleName@@MethodName:getLogger:[BindySimpleCsvUnmarshallTest.class] @AT@ 1805 @LENGTH@ 45
------------DEL TypeLiteral@@BindySimpleCsvUnmarshallTest.class @AT@ 1815 @LENGTH@ 34


DEL FieldDeclaration@@private, final, List<BindingConfiguration>, [bindingConfigurations=new ArrayList<BindingConfiguration>()] @AT@ 2799 @LENGTH@ 103
---DEL Modifier@@private @AT@ 2799 @LENGTH@ 7
---DEL Modifier@@final @AT@ 2807 @LENGTH@ 5
---DEL ParameterizedType@@List<BindingConfiguration> @AT@ 2813 @LENGTH@ 26
------DEL SimpleType@@List @AT@ 2813 @LENGTH@ 4
------DEL SimpleType@@BindingConfiguration @AT@ 2818 @LENGTH@ 20
---DEL VariableDeclarationFragment@@bindingConfigurations=new ArrayList<BindingConfiguration>() @AT@ 2840 @LENGTH@ 61
------DEL SimpleName@@bindingConfigurations @AT@ 2840 @LENGTH@ 21
------DEL ClassInstanceCreation@@ArrayList<BindingConfiguration>[] @AT@ 2864 @LENGTH@ 37
---------DEL New@@new @AT@ 2864 @LENGTH@ 3
---------DEL ParameterizedType@@ArrayList<BindingConfiguration> @AT@ 2868 @LENGTH@ 31
------------DEL SimpleType@@ArrayList @AT@ 2868 @LENGTH@ 9
------------DEL SimpleType@@BindingConfiguration @AT@ 2878 @LENGTH@ 20


UPD ExpressionStatement@@MethodInvocation:Assert.isTrue(MetadataIdentificationUtils.getMetadataClass(localMid).equals(getProvidesType()),"Metadata identication string '" + localMid + "' is incompatible with this metadata provider's class") @TO@ MethodInvocation:Assert.isTrue(MetadataIdentificationUtils.getMetadataClass(localMid).equals(MetadataIdentificationUtils.getMetadataClass(getProvidesType())),"Metadata identication string '" + MetadataIdentificationUtils.getMetadataClass(localMid) + "' is incompatible with this metadata provider's class '"+ MetadataIdentificationUtils.getMetadataClass(getProvidesType())+ "'") @AT@ 4304 @LENGTH@ 199
---UPD MethodInvocation@@Assert.isTrue(MetadataIdentificationUtils.getMetadataClass(localMid).equals(getProvidesType()),"Metadata identication string '" + localMid + "' is incompatible with this metadata provider's class") @TO@ Assert.isTrue(MetadataIdentificationUtils.getMetadataClass(localMid).equals(MetadataIdentificationUtils.getMetadataClass(getProvidesType())),"Metadata identication string '" + MetadataIdentificationUtils.getMetadataClass(localMid) + "' is incompatible with this metadata provider's class '"+ MetadataIdentificationUtils.getMetadataClass(getProvidesType())+ "'") @AT@ 4304 @LENGTH@ 198
------UPD SimpleName@@MethodName:isTrue:[MetadataIdentificationUtils.getMetadataClass(localMid).equals(getProvidesType()), "Metadata identication string '" + localMid + "' is incompatible with this metadata provider's class"] @TO@ MethodName:isTrue:[MetadataIdentificationUtils.getMetadataClass(localMid).equals(MetadataIdentificationUtils.getMetadataClass(getProvidesType())), "Metadata identication string '" + MetadataIdentificationUtils.getMetadataClass(localMid) + "' is incompatible with this metadata provider's class '"+ MetadataIdentificationUtils.getMetadataClass(getProvidesType())+ "'"] @AT@ 4311 @LENGTH@ 191
---------UPD MethodInvocation@@MetadataIdentificationUtils.getMetadataClass(localMid).equals(getProvidesType()) @TO@ MetadataIdentificationUtils.getMetadataClass(localMid).equals(MetadataIdentificationUtils.getMetadataClass(getProvidesType())) @AT@ 4318 @LENGTH@ 80
------------INS SimpleName@@MethodName:equals:[MetadataIdentificationUtils.getMetadataClass(getProvidesType())] @TO@ MethodInvocation@@MetadataIdentificationUtils.getMetadataClass(localMid).equals(getProvidesType()) @AT@ 4373 @LENGTH@ 71
---------------INS MethodInvocation@@MetadataIdentificationUtils.getMetadataClass(getProvidesType()) @TO@ SimpleName@@MethodName:equals:[MetadataIdentificationUtils.getMetadataClass(getProvidesType())] @AT@ 4380 @LENGTH@ 63
------------------MOV SimpleName@@MethodName:equals:[getProvidesType()] @TO@ MethodInvocation@@MetadataIdentificationUtils.getMetadataClass(getProvidesType()) @AT@ 4373 @LENGTH@ 25
------------------INS SimpleName@@Name:MetadataIdentificationUtils @TO@ MethodInvocation@@MetadataIdentificationUtils.getMetadataClass(getProvidesType()) @AT@ 4380 @LENGTH@ 27
------------UPD SimpleName@@MethodName:equals:[getProvidesType()] @TO@ MethodName:getMetadataClass:[getProvidesType()] @AT@ 4373 @LENGTH@ 25
---------UPD InfixExpression@@"Metadata identication string '" + localMid + "' is incompatible with this metadata provider's class" @TO@ "Metadata identication string '" + MetadataIdentificationUtils.getMetadataClass(localMid) + "' is incompatible with this metadata provider's class '"+ MetadataIdentificationUtils.getMetadataClass(getProvidesType())+ "'" @AT@ 4400 @LENGTH@ 101
------------DEL SimpleName@@localMid @AT@ 4435 @LENGTH@ 8
------------UPD StringLiteral@@"' is incompatible with this metadata provider's class" @TO@ "' is incompatible with this metadata provider's class '" @AT@ 4446 @LENGTH@ 55
------------INS MethodInvocation@@MetadataIdentificationUtils.getMetadataClass(localMid) @TO@ InfixExpression@@"Metadata identication string '" + localMid + "' is incompatible with this metadata provider's class" @AT@ 4481 @LENGTH@ 54
---------------INS SimpleName@@Name:MetadataIdentificationUtils @TO@ MethodInvocation@@MetadataIdentificationUtils.getMetadataClass(localMid) @AT@ 4481 @LENGTH@ 27
---------------INS SimpleName@@MethodName:getMetadataClass:[localMid] @TO@ MethodInvocation@@MetadataIdentificationUtils.getMetadataClass(localMid) @AT@ 4509 @LENGTH@ 26
------------------INS SimpleName@@localMid @TO@ SimpleName@@MethodName:getMetadataClass:[localMid] @AT@ 4526 @LENGTH@ 8
------------INS MethodInvocation@@MetadataIdentificationUtils.getMetadataClass(getProvidesType()) @TO@ InfixExpression@@"Metadata identication string '" + localMid + "' is incompatible with this metadata provider's class" @AT@ 4598 @LENGTH@ 63
---------------INS SimpleName@@Name:MetadataIdentificationUtils @TO@ MethodInvocation@@MetadataIdentificationUtils.getMetadataClass(getProvidesType()) @AT@ 4598 @LENGTH@ 27
---------------INS SimpleName@@MethodName:getMetadataClass:[getProvidesType()] @TO@ MethodInvocation@@MetadataIdentificationUtils.getMetadataClass(getProvidesType()) @AT@ 4626 @LENGTH@ 35
------------------INS MethodInvocation@@MethodName:getProvidesType:[] @TO@ SimpleName@@MethodName:getMetadataClass:[getProvidesType()] @AT@ 4643 @LENGTH@ 17
------------INS StringLiteral@@"'" @TO@ InfixExpression@@"Metadata identication string '" + localMid + "' is incompatible with this metadata provider's class" @AT@ 4664 @LENGTH@ 3


INS MethodDeclaration@@public, StatefulInterface, MethodName:createSFSBOnInvocation, Exception,  @TO@ TypeDeclaration@@[@Stateful, @TransactionManagement(TransactionManagementType.BEAN), @Local, public]EPCStatefulBean, [StatefulInterface] @AT@ 3190 @LENGTH@ 95
---INS Modifier@@public @TO@ MethodDeclaration@@public, StatefulInterface, MethodName:createSFSBOnInvocation, Exception,  @AT@ 3190 @LENGTH@ 6
---INS SimpleType@@StatefulInterface @TO@ MethodDeclaration@@public, StatefulInterface, MethodName:createSFSBOnInvocation, Exception,  @AT@ 3197 @LENGTH@ 17
---INS SimpleName@@MethodName:createSFSBOnInvocation @TO@ MethodDeclaration@@public, StatefulInterface, MethodName:createSFSBOnInvocation, Exception,  @AT@ 3215 @LENGTH@ 22
---INS SimpleType@@Exception @TO@ MethodDeclaration@@public, StatefulInterface, MethodName:createSFSBOnInvocation, Exception,  @AT@ 3247 @LENGTH@ 9
---INS ReturnStatement@@NullLiteral:null @TO@ MethodDeclaration@@public, StatefulInterface, MethodName:createSFSBOnInvocation, Exception,  @AT@ 3267 @LENGTH@ 12
------INS NullLiteral@@null @TO@ ReturnStatement@@NullLiteral:null @AT@ 3274 @LENGTH@ 4


UPD FieldDeclaration@@private, LinkedHashMap<String,Object>, [criteria=new LinkedHashMap<String,Object>()] @TO@ private, HashMap<String,Object>, [criteria=new LinkedHashMap<String,Object>()] @AT@ 869 @LENGTH@ 85
---UPD ParameterizedType@@LinkedHashMap<String,Object> @TO@ HashMap<String,Object> @AT@ 877 @LENGTH@ 29
------UPD SimpleType@@LinkedHashMap @TO@ HashMap @AT@ 877 @LENGTH@ 13


UPD IfStatement@@if (usePool && pool != null) {  pool=null;} @TO@ if (usePool && pool != null) {  pool.quit();  pool=null;} @AT@ 3190 @LENGTH@ 68
---UPD Block@@ThenBody:{  pool=null;} @TO@ ThenBody:{  pool.quit();  pool=null;} @AT@ 3219 @LENGTH@ 39
------INS ExpressionStatement@@MethodInvocation:pool.quit() @TO@ Block@@ThenBody:{  pool=null;} @AT@ 3224 @LENGTH@ 12
---------INS MethodInvocation@@pool.quit() @TO@ ExpressionStatement@@MethodInvocation:pool.quit() @AT@ 3224 @LENGTH@ 11
------------INS SimpleName@@Name:pool @TO@ MethodInvocation@@pool.quit() @AT@ 3224 @LENGTH@ 4
------------INS SimpleName@@MethodName:quit:[] @TO@ MethodInvocation@@pool.quit() @AT@ 3229 @LENGTH@ 6


UPD FieldDeclaration@@private, static, final, Class<?>, [REPOSITORY_TYPE=RepositoryFactorySupport.class] @TO@ private, static, final, Class<?>, [REPOSITORY_TYPE=RepositoryFactoryBeanSupport.class] @AT@ 1752 @LENGTH@ 91
---UPD VariableDeclarationFragment@@REPOSITORY_TYPE=RepositoryFactorySupport.class @TO@ REPOSITORY_TYPE=RepositoryFactoryBeanSupport.class @AT@ 1782 @LENGTH@ 60
------UPD TypeLiteral@@RepositoryFactorySupport.class @TO@ RepositoryFactoryBeanSupport.class @AT@ 1812 @LENGTH@ 30


INS ExpressionStatement@@MethodInvocation:command.add("-jaxpmodule") @TO@ MethodDeclaration@@public, List<String>, MethodName:getServerLaunchCommand,  @AT@ 8879 @LENGTH@ 27
---INS MethodInvocation@@command.add("-jaxpmodule") @TO@ ExpressionStatement@@MethodInvocation:command.add("-jaxpmodule") @AT@ 8879 @LENGTH@ 26
------INS SimpleName@@Name:command @TO@ MethodInvocation@@command.add("-jaxpmodule") @AT@ 8879 @LENGTH@ 7
------INS SimpleName@@MethodName:add:["-jaxpmodule"] @TO@ MethodInvocation@@command.add("-jaxpmodule") @AT@ 8887 @LENGTH@ 18
---------INS StringLiteral@@"-jaxpmodule" @TO@ SimpleName@@MethodName:add:["-jaxpmodule"] @AT@ 8891 @LENGTH@ 13


MOV ExpressionStatement@@Assignment:started=true @TO@ MethodDeclaration@@public, synchronized, void, MethodName:start,  @AT@ 3305 @LENGTH@ 15


INS IfStatement@@if (application == null) {synchronized (this) {    if (application == null) {      application=new WeldApplication(delegate().getApplication());    }  }} @TO@ MethodDeclaration@@public, Application, MethodName:getApplication,  @AT@ 1429 @LENGTH@ 229
---INS InfixExpression@@application == null @TO@ IfStatement@@if (application == null) {synchronized (this) {    if (application == null) {      application=new WeldApplication(delegate().getApplication());    }  }} @AT@ 1433 @LENGTH@ 19
------INS SimpleName@@application @TO@ InfixExpression@@application == null @AT@ 1433 @LENGTH@ 11
------INS Operator@@== @TO@ InfixExpression@@application == null @AT@ 1444 @LENGTH@ 2
------INS NullLiteral@@null @TO@ InfixExpression@@application == null @AT@ 1448 @LENGTH@ 4
---INS Block@@ThenBody:{synchronized (this) {    if (application == null) {      application=new WeldApplication(delegate().getApplication());    }  }} @TO@ IfStatement@@if (application == null) {synchronized (this) {    if (application == null) {      application=new WeldApplication(delegate().getApplication());    }  }} @AT@ 1454 @LENGTH@ 204
------INS SynchronizedStatement@@synchronized (this) {  if (application == null) {    application=new WeldApplication(delegate().getApplication());  }} @TO@ Block@@ThenBody:{synchronized (this) {    if (application == null) {      application=new WeldApplication(delegate().getApplication());    }  }} @AT@ 1468 @LENGTH@ 180
---------INS ThisExpression@@this @TO@ SynchronizedStatement@@synchronized (this) {  if (application == null) {    application=new WeldApplication(delegate().getApplication());  }} @AT@ 1482 @LENGTH@ 4
---------INS Block@@SyncBody:{  if (application == null) {    application=new WeldApplication(delegate().getApplication());  }} @TO@ SynchronizedStatement@@synchronized (this) {  if (application == null) {    application=new WeldApplication(delegate().getApplication());  }} @AT@ 1488 @LENGTH@ 160
------------MOV IfStatement@@if (application == null) {  application=new WeldApplication(delegate().getApplication());} @TO@ Block@@SyncBody:{  if (application == null) {    application=new WeldApplication(delegate().getApplication());  }} @AT@ 1423 @LENGTH@ 112


UPD EnhancedForStatement@@for (String uniqueName : deploymentNames) {  final ModelNode deployment=modelNode.get(uniqueName);  final String runtimeName=deployment.get(RUNTIME_NAME).asString();  final String sha1=HashUtil.bytesToHexString(deployment.get(HASH).asBytes());  final boolean enabled=!deployment.hasDefined(ENABLED) || deployment.get(ENABLED).asBoolean();  writer.writeStartElement(Element.DEPLOYMENT.getLocalName());  writeAttribute(writer,Attribute.NAME,uniqueName);  writeAttribute(writer,Attribute.RUNTIME_NAME,runtimeName);  writeAttribute(writer,Attribute.SHA1,sha1);  if (!enabled) {    writeAttribute(writer,Attribute.ENABLED,Boolean.FALSE.toString());  }  writer.writeEndElement();} @TO@ for (String uniqueName : deploymentNames) {  final ModelNode deployment=modelNode.get(uniqueName);  final String runtimeName=deployment.get(RUNTIME_NAME).asString();  final boolean enabled=!deployment.hasDefined(ENABLED) || deployment.get(ENABLED).asBoolean();  writer.writeStartElement(Element.DEPLOYMENT.getLocalName());  writeAttribute(writer,Attribute.NAME,uniqueName);  writeAttribute(writer,Attribute.RUNTIME_NAME,runtimeName);  if (!enabled) {    writeAttribute(writer,Attribute.ENABLED,Boolean.FALSE.toString());  }  final List<ModelNode> contentItems=deployment.require(CONTENT).asList();  for (  ModelNode contentItem : contentItems) {    writeContentItem(writer,contentItem);  }  writer.writeEndElement();} @AT@ 29246 @LENGTH@ 885
---UPD VariableDeclarationStatement@@final String sha1=HashUtil.bytesToHexString(deployment.get(HASH).asBytes()); @TO@ final List<ModelNode> contentItems=deployment.require(CONTENT).asList(); @AT@ 29462 @LENGTH@ 78
------DEL SimpleType@@String @AT@ 29468 @LENGTH@ 6
------UPD VariableDeclarationFragment@@sha1=HashUtil.bytesToHexString(deployment.get(HASH).asBytes()) @TO@ contentItems=deployment.require(CONTENT).asList() @AT@ 29475 @LENGTH@ 64
---------UPD SimpleName@@sha1 @TO@ contentItems @AT@ 29475 @LENGTH@ 4
---------DEL MethodInvocation@@HashUtil.bytesToHexString(deployment.get(HASH).asBytes()) @AT@ 29482 @LENGTH@ 57
------------DEL SimpleName@@Name:HashUtil @AT@ 29482 @LENGTH@ 8
------------DEL SimpleName@@MethodName:bytesToHexString:[deployment.get(HASH).asBytes()] @AT@ 29491 @LENGTH@ 48
---------------DEL MethodInvocation@@deployment.get(HASH).asBytes() @AT@ 29508 @LENGTH@ 30
---------INS MethodInvocation@@deployment.require(CONTENT).asList() @TO@ VariableDeclarationFragment@@sha1=HashUtil.bytesToHexString(deployment.get(HASH).asBytes()) @AT@ 29972 @LENGTH@ 36
------------MOV MethodInvocation@@MethodName:get:[HASH] @TO@ MethodInvocation@@deployment.require(CONTENT).asList() @AT@ 29508 @LENGTH@ 20
---------------UPD SimpleName@@HASH @TO@ CONTENT @AT@ 29523 @LENGTH@ 4
------------MOV SimpleName@@Name:deployment @TO@ MethodInvocation@@deployment.require(CONTENT).asList() @AT@ 29508 @LENGTH@ 10
------------MOV SimpleName@@MethodName:asBytes:[] @TO@ MethodInvocation@@deployment.require(CONTENT).asList() @AT@ 29529 @LENGTH@ 9
------INS ParameterizedType@@List<ModelNode> @TO@ VariableDeclarationStatement@@final String sha1=HashUtil.bytesToHexString(deployment.get(HASH).asBytes()); @AT@ 29941 @LENGTH@ 15
---------INS SimpleType@@List @TO@ ParameterizedType@@List<ModelNode> @AT@ 29941 @LENGTH@ 4
---------INS SimpleType@@ModelNode @TO@ ParameterizedType@@List<ModelNode> @AT@ 29946 @LENGTH@ 9
---MOV VariableDeclarationStatement@@final String sha1=HashUtil.bytesToHexString(deployment.get(HASH).asBytes()); @TO@ EnhancedForStatement@@for (String uniqueName : deploymentNames) {  final ModelNode deployment=modelNode.get(uniqueName);  final String runtimeName=deployment.get(RUNTIME_NAME).asString();  final String sha1=HashUtil.bytesToHexString(deployment.get(HASH).asBytes());  final boolean enabled=!deployment.hasDefined(ENABLED) || deployment.get(ENABLED).asBoolean();  writer.writeStartElement(Element.DEPLOYMENT.getLocalName());  writeAttribute(writer,Attribute.NAME,uniqueName);  writeAttribute(writer,Attribute.RUNTIME_NAME,runtimeName);  writeAttribute(writer,Attribute.SHA1,sha1);  if (!enabled) {    writeAttribute(writer,Attribute.ENABLED,Boolean.FALSE.toString());  }  writer.writeEndElement();} @AT@ 29462 @LENGTH@ 78
---UPD ExpressionStatement@@MethodInvocation:writeAttribute(writer,Attribute.SHA1,sha1) @TO@ MethodInvocation:writeContentItem(writer,contentItem) @AT@ 29891 @LENGTH@ 45
---INS EnhancedForStatement@@for (ModelNode contentItem : contentItems) {  writeContentItem(writer,contentItem);} @TO@ EnhancedForStatement@@for (String uniqueName : deploymentNames) {  final ModelNode deployment=modelNode.get(uniqueName);  final String runtimeName=deployment.get(RUNTIME_NAME).asString();  final String sha1=HashUtil.bytesToHexString(deployment.get(HASH).asBytes());  final boolean enabled=!deployment.hasDefined(ENABLED) || deployment.get(ENABLED).asBoolean();  writer.writeStartElement(Element.DEPLOYMENT.getLocalName());  writeAttribute(writer,Attribute.NAME,uniqueName);  writeAttribute(writer,Attribute.RUNTIME_NAME,runtimeName);  writeAttribute(writer,Attribute.SHA1,sha1);  if (!enabled) {    writeAttribute(writer,Attribute.ENABLED,Boolean.FALSE.toString());  }  writer.writeEndElement();} @AT@ 30026 @LENGTH@ 121
------MOV ExpressionStatement@@MethodInvocation:writeAttribute(writer,Attribute.SHA1,sha1) @TO@ EnhancedForStatement@@for (ModelNode contentItem : contentItems) {  writeContentItem(writer,contentItem);} @AT@ 29891 @LENGTH@ 45
---------UPD MethodInvocation@@writeAttribute(writer,Attribute.SHA1,sha1) @TO@ writeContentItem(writer,contentItem) @AT@ 29891 @LENGTH@ 44
------------UPD SimpleName@@MethodName:writeAttribute:[writer, Attribute.SHA1, sha1] @TO@ MethodName:writeContentItem:[writer, contentItem] @AT@ 29891 @LENGTH@ 44
---------------DEL QualifiedName@@Attribute.SHA1 @AT@ 29914 @LENGTH@ 14
------------------DEL SimpleName@@Attribute @AT@ 29914 @LENGTH@ 9
------------------DEL SimpleName@@SHA1 @AT@ 29924 @LENGTH@ 4
---------------DEL SimpleName@@sha1 @AT@ 29930 @LENGTH@ 4
---------------INS SimpleName@@contentItem @TO@ SimpleName@@MethodName:writeAttribute:[writer, Attribute.SHA1, sha1] @AT@ 30116 @LENGTH@ 11
------INS SingleVariableDeclaration@@ModelNode contentItem @TO@ EnhancedForStatement@@for (ModelNode contentItem : contentItems) {  writeContentItem(writer,contentItem);} @AT@ 30031 @LENGTH@ 21
---------INS SimpleType@@ModelNode @TO@ SingleVariableDeclaration@@ModelNode contentItem @AT@ 30031 @LENGTH@ 9
---------INS SimpleName@@contentItem @TO@ SingleVariableDeclaration@@ModelNode contentItem @AT@ 30041 @LENGTH@ 11
------INS SimpleName@@contentItems @TO@ EnhancedForStatement@@for (ModelNode contentItem : contentItems) {  writeContentItem(writer,contentItem);} @AT@ 30055 @LENGTH@ 12


INS ExpressionStatement@@MethodInvocation:setComponentCreateServiceFactory(MessageDrivenComponentCreateService.FACTORY) @TO@ MethodDeclaration@@public, voidMethodName:MessageDrivenComponentConfiguration, final MessageDrivenComponentDescription description, final EEModuleClassConfiguration ejbClassConfiguration,  @AT@ 2682 @LENGTH@ 78
---INS MethodInvocation@@setComponentCreateServiceFactory(MessageDrivenComponentCreateService.FACTORY) @TO@ ExpressionStatement@@MethodInvocation:setComponentCreateServiceFactory(MessageDrivenComponentCreateService.FACTORY) @AT@ 2682 @LENGTH@ 77
------INS SimpleName@@MethodName:setComponentCreateServiceFactory:[MessageDrivenComponentCreateService.FACTORY] @TO@ MethodInvocation@@setComponentCreateServiceFactory(MessageDrivenComponentCreateService.FACTORY) @AT@ 2682 @LENGTH@ 77
---------INS QualifiedName@@MessageDrivenComponentCreateService.FACTORY @TO@ SimpleName@@MethodName:setComponentCreateServiceFactory:[MessageDrivenComponentCreateService.FACTORY] @AT@ 2715 @LENGTH@ 43
------------INS SimpleName@@MessageDrivenComponentCreateService @TO@ QualifiedName@@MessageDrivenComponentCreateService.FACTORY @AT@ 2715 @LENGTH@ 35
------------INS SimpleName@@FACTORY @TO@ QualifiedName@@MessageDrivenComponentCreateService.FACTORY @AT@ 2751 @LENGTH@ 7


UPD EnhancedForStatement@@for (String item : items) {  final VirtualFile classPathFile=resourceRoot.getRoot().getParent().getChild(item);  if (!classPathFile.exists()) {    throw new DeploymentUnitProcessingException("Class Path entry " + item + " in "+ resourceRoot.getRoot()+ "  not found. ");  }  if (isInside(classPathFile,toplevelRoot)) {    if (earLibJars.contains(classPathFile)) {      log.debugf("Class-Path entry %s in %s ignored, as target is in or referenced by /lib",classPathFile,resourceRoot.getRoot());      continue;    } else     if (additionalModules.containsKey(classPathFile)) {      target.addToAttachmentList(Attachments.CLASS_PATH_ENTRIES,additionalModules.get(classPathFile).getModuleIdentifier());    } else {      log.warn("Class Path entry " + item + " in "+ resourceRoot.getRoot()+ "  does not point to a valid jar for a Class-Path reference.");    }  } else   if (isInside(classPathFile,deploymentDirRoot)) {    if (classPathFile.getParent().equals(deploymentDirRoot)) {      target.addToAttachmentList(Attachments.CLASS_PATH_ENTRIES,ModuleIdentifier.create(ServiceModuleLoader.MODULE_PREFIX + classPathFile.getName()));    } else {      log.warn("Class Path entries that references nestled jars inside another deployment are disallowed");    }  } else {    ModuleIdentifier moduleIdentifier=externalModuleService.addExternalModule(classPathFile);    target.addToAttachmentList(Attachments.CLASS_PATH_ENTRIES,moduleIdentifier);    log.debugf("Resource %s added as external jar %s",classPathFile,resourceRoot.getRoot());  }} @TO@ for (String item : items) {  final VirtualFile classPathFile=resourceRoot.getRoot().getParent().getChild(item);  if (isInside(classPathFile,toplevelRoot)) {    if (earLibJars.contains(classPathFile)) {      log.debugf("Class-Path entry %s in %s ignored, as target is in or referenced by /lib",classPathFile,resourceRoot.getRoot());      continue;    } else     if (additionalModules.containsKey(classPathFile)) {      target.addToAttachmentList(Attachments.CLASS_PATH_ENTRIES,additionalModules.get(classPathFile).getModuleIdentifier());    } else {      log.warn("Class Path entry " + item + " in "+ resourceRoot.getRoot()+ "  does not point to a valid jar for a Class-Path reference.");    }  } else   if (!item.startsWith("/") && classPathFile.getParent().isRoot()) {    target.addToAttachmentList(Attachments.CLASS_PATH_ENTRIES,ModuleIdentifier.create(ServiceModuleLoader.MODULE_PREFIX + classPathFile.getName()));  } else   if (item.startsWith("/")) {    ModuleIdentifier moduleIdentifier=externalModuleService.addExternalModule(classPathFile);    target.addToAttachmentList(Attachments.CLASS_PATH_ENTRIES,moduleIdentifier);    log.debugf("Resource %s added as external jar %s",classPathFile,resourceRoot.getRoot());  } else {    log.warn("Class Path entry " + item + " in "+ resourceRoot.getRoot()+ "  does not point to a valid jar for a Class-Path reference.");  }} @AT@ 6082 @LENGTH@ 2173
---DEL IfStatement@@if (!classPathFile.exists()) {  throw new DeploymentUnitProcessingException("Class Path entry " + item + " in "+ resourceRoot.getRoot()+ "  not found. ");} @AT@ 6227 @LENGTH@ 221
------DEL PrefixExpression@@!classPathFile.exists() @AT@ 6231 @LENGTH@ 23
---------DEL Operator@@! @AT@ 6231 @LENGTH@ 1
---------DEL MethodInvocation@@classPathFile.exists() @AT@ 6232 @LENGTH@ 22
------------DEL SimpleName@@Name:classPathFile @AT@ 6232 @LENGTH@ 13
------------DEL SimpleName@@MethodName:exists:[] @AT@ 6246 @LENGTH@ 8
------DEL Block@@ThenBody:{  throw new DeploymentUnitProcessingException("Class Path entry " + item + " in "+ resourceRoot.getRoot()+ "  not found. ");} @AT@ 6256 @LENGTH@ 192
---------DEL ThrowStatement@@ClassInstanceCreation:new DeploymentUnitProcessingException("Class Path entry " + item + " in "+ resourceRoot.getRoot()+ "  not found. ") @AT@ 6278 @LENGTH@ 152
------------DEL ClassInstanceCreation@@DeploymentUnitProcessingException["Class Path entry " + item + " in "+ resourceRoot.getRoot()+ "  not found. "] @AT@ 6284 @LENGTH@ 145
---------------DEL New@@new @AT@ 6284 @LENGTH@ 3
---------------DEL SimpleType@@DeploymentUnitProcessingException @AT@ 6288 @LENGTH@ 33
---------------DEL InfixExpression@@"Class Path entry " + item + " in "+ resourceRoot.getRoot()+ "  not found. " @AT@ 6322 @LENGTH@ 106
------------------DEL StringLiteral@@"Class Path entry " @AT@ 6322 @LENGTH@ 19
------------------DEL Operator@@+ @AT@ 6341 @LENGTH@ 1
------------------DEL SimpleName@@item @AT@ 6344 @LENGTH@ 4
------------------DEL StringLiteral@@" in " @AT@ 6351 @LENGTH@ 6
------------------DEL MethodInvocation@@resourceRoot.getRoot() @AT@ 6360 @LENGTH@ 22
---------------------DEL SimpleName@@Name:resourceRoot @AT@ 6360 @LENGTH@ 12
---------------------DEL SimpleName@@MethodName:getRoot:[] @AT@ 6373 @LENGTH@ 9
------------------DEL StringLiteral@@"  not found. " @AT@ 6413 @LENGTH@ 15
---UPD IfStatement@@if (isInside(classPathFile,toplevelRoot)) {  if (earLibJars.contains(classPathFile)) {    log.debugf("Class-Path entry %s in %s ignored, as target is in or referenced by /lib",classPathFile,resourceRoot.getRoot());    continue;  } else   if (additionalModules.containsKey(classPathFile)) {    target.addToAttachmentList(Attachments.CLASS_PATH_ENTRIES,additionalModules.get(classPathFile).getModuleIdentifier());  } else {    log.warn("Class Path entry " + item + " in "+ resourceRoot.getRoot()+ "  does not point to a valid jar for a Class-Path reference.");  }} else if (isInside(classPathFile,deploymentDirRoot)) {  if (classPathFile.getParent().equals(deploymentDirRoot)) {    target.addToAttachmentList(Attachments.CLASS_PATH_ENTRIES,ModuleIdentifier.create(ServiceModuleLoader.MODULE_PREFIX + classPathFile.getName()));  } else {    log.warn("Class Path entries that references nestled jars inside another deployment are disallowed");  }} else {  ModuleIdentifier moduleIdentifier=externalModuleService.addExternalModule(classPathFile);  target.addToAttachmentList(Attachments.CLASS_PATH_ENTRIES,moduleIdentifier);  log.debugf("Resource %s added as external jar %s",classPathFile,resourceRoot.getRoot());} @TO@ if (isInside(classPathFile,toplevelRoot)) {  if (earLibJars.contains(classPathFile)) {    log.debugf("Class-Path entry %s in %s ignored, as target is in or referenced by /lib",classPathFile,resourceRoot.getRoot());    continue;  } else   if (additionalModules.containsKey(classPathFile)) {    target.addToAttachmentList(Attachments.CLASS_PATH_ENTRIES,additionalModules.get(classPathFile).getModuleIdentifier());  } else {    log.warn("Class Path entry " + item + " in "+ resourceRoot.getRoot()+ "  does not point to a valid jar for a Class-Path reference.");  }} else if (!item.startsWith("/") && classPathFile.getParent().isRoot()) {  target.addToAttachmentList(Attachments.CLASS_PATH_ENTRIES,ModuleIdentifier.create(ServiceModuleLoader.MODULE_PREFIX + classPathFile.getName()));} else if (item.startsWith("/")) {  ModuleIdentifier moduleIdentifier=externalModuleService.addExternalModule(classPathFile);  target.addToAttachmentList(Attachments.CLASS_PATH_ENTRIES,moduleIdentifier);  log.debugf("Resource %s added as external jar %s",classPathFile,resourceRoot.getRoot());} else {  log.warn("Class Path entry " + item + " in "+ resourceRoot.getRoot()+ "  does not point to a valid jar for a Class-Path reference.");} @AT@ 6465 @LENGTH@ 1776
------UPD Block@@ElseBody:if (isInside(classPathFile,deploymentDirRoot)) {  if (classPathFile.getParent().equals(deploymentDirRoot)) {    target.addToAttachmentList(Attachments.CLASS_PATH_ENTRIES,ModuleIdentifier.create(ServiceModuleLoader.MODULE_PREFIX + classPathFile.getName()));  } else {    log.warn("Class Path entries that references nestled jars inside another deployment are disallowed");  }} else {  ModuleIdentifier moduleIdentifier=externalModuleService.addExternalModule(classPathFile);  target.addToAttachmentList(Attachments.CLASS_PATH_ENTRIES,moduleIdentifier);  log.debugf("Resource %s added as external jar %s",classPathFile,resourceRoot.getRoot());} @TO@ ElseBody:if (!item.startsWith("/") && classPathFile.getParent().isRoot()) {  target.addToAttachmentList(Attachments.CLASS_PATH_ENTRIES,ModuleIdentifier.create(ServiceModuleLoader.MODULE_PREFIX + classPathFile.getName()));} else if (item.startsWith("/")) {  ModuleIdentifier moduleIdentifier=externalModuleService.addExternalModule(classPathFile);  target.addToAttachmentList(Attachments.CLASS_PATH_ENTRIES,moduleIdentifier);  log.debugf("Resource %s added as external jar %s",classPathFile,resourceRoot.getRoot());} else {  log.warn("Class Path entry " + item + " in "+ resourceRoot.getRoot()+ "  does not point to a valid jar for a Class-Path reference.");} @AT@ 7347 @LENGTH@ 894
---------UPD IfStatement@@if (isInside(classPathFile,deploymentDirRoot)) {  if (classPathFile.getParent().equals(deploymentDirRoot)) {    target.addToAttachmentList(Attachments.CLASS_PATH_ENTRIES,ModuleIdentifier.create(ServiceModuleLoader.MODULE_PREFIX + classPathFile.getName()));  } else {    log.warn("Class Path entries that references nestled jars inside another deployment are disallowed");  }} else {  ModuleIdentifier moduleIdentifier=externalModuleService.addExternalModule(classPathFile);  target.addToAttachmentList(Attachments.CLASS_PATH_ENTRIES,moduleIdentifier);  log.debugf("Resource %s added as external jar %s",classPathFile,resourceRoot.getRoot());} @TO@ if (!item.startsWith("/") && classPathFile.getParent().isRoot()) {  target.addToAttachmentList(Attachments.CLASS_PATH_ENTRIES,ModuleIdentifier.create(ServiceModuleLoader.MODULE_PREFIX + classPathFile.getName()));} else if (item.startsWith("/")) {  ModuleIdentifier moduleIdentifier=externalModuleService.addExternalModule(classPathFile);  target.addToAttachmentList(Attachments.CLASS_PATH_ENTRIES,moduleIdentifier);  log.debugf("Resource %s added as external jar %s",classPathFile,resourceRoot.getRoot());} else {  log.warn("Class Path entry " + item + " in "+ resourceRoot.getRoot()+ "  does not point to a valid jar for a Class-Path reference.");} @AT@ 7347 @LENGTH@ 894
------------INS InfixExpression@@!item.startsWith("/") && classPathFile.getParent().isRoot() @TO@ IfStatement@@if (isInside(classPathFile,deploymentDirRoot)) {  if (classPathFile.getParent().equals(deploymentDirRoot)) {    target.addToAttachmentList(Attachments.CLASS_PATH_ENTRIES,ModuleIdentifier.create(ServiceModuleLoader.MODULE_PREFIX + classPathFile.getName()));  } else {    log.warn("Class Path entries that references nestled jars inside another deployment are disallowed");  }} else {  ModuleIdentifier moduleIdentifier=externalModuleService.addExternalModule(classPathFile);  target.addToAttachmentList(Attachments.CLASS_PATH_ENTRIES,moduleIdentifier);  log.debugf("Resource %s added as external jar %s",classPathFile,resourceRoot.getRoot());} @AT@ 7150 @LENGTH@ 59
---------------INS PrefixExpression@@!item.startsWith("/") @TO@ InfixExpression@@!item.startsWith("/") && classPathFile.getParent().isRoot() @AT@ 7150 @LENGTH@ 21
------------------INS Operator@@! @TO@ PrefixExpression@@!item.startsWith("/") @AT@ 7150 @LENGTH@ 1
------------------INS MethodInvocation@@item.startsWith("/") @TO@ PrefixExpression@@!item.startsWith("/") @AT@ 7151 @LENGTH@ 20
---------------------INS SimpleName@@Name:item @TO@ MethodInvocation@@item.startsWith("/") @AT@ 7151 @LENGTH@ 4
---------------------INS SimpleName@@MethodName:startsWith:["/"] @TO@ MethodInvocation@@item.startsWith("/") @AT@ 7156 @LENGTH@ 15
------------------------INS StringLiteral@@"/" @TO@ SimpleName@@MethodName:startsWith:["/"] @AT@ 7167 @LENGTH@ 3
---------------INS Operator@@&& @TO@ InfixExpression@@!item.startsWith("/") && classPathFile.getParent().isRoot() @AT@ 7171 @LENGTH@ 2
---------------INS MethodInvocation@@classPathFile.getParent().isRoot() @TO@ InfixExpression@@!item.startsWith("/") && classPathFile.getParent().isRoot() @AT@ 7175 @LENGTH@ 34
------------------INS MethodInvocation@@MethodName:getParent:[] @TO@ MethodInvocation@@classPathFile.getParent().isRoot() @AT@ 7175 @LENGTH@ 25
------------------INS SimpleName@@Name:classPathFile @TO@ MethodInvocation@@classPathFile.getParent().isRoot() @AT@ 7175 @LENGTH@ 13
------------------INS SimpleName@@MethodName:isRoot:[] @TO@ MethodInvocation@@classPathFile.getParent().isRoot() @AT@ 7201 @LENGTH@ 8
------------DEL MethodInvocation@@isInside(classPathFile,deploymentDirRoot) @AT@ 7350 @LENGTH@ 41
---------------DEL SimpleName@@MethodName:isInside:[classPathFile, deploymentDirRoot] @AT@ 7350 @LENGTH@ 41
------------------DEL SimpleName@@classPathFile @AT@ 7359 @LENGTH@ 13
------------------DEL SimpleName@@deploymentDirRoot @AT@ 7373 @LENGTH@ 17
------------UPD Block@@ThenBody:{  if (classPathFile.getParent().equals(deploymentDirRoot)) {    target.addToAttachmentList(Attachments.CLASS_PATH_ENTRIES,ModuleIdentifier.create(ServiceModuleLoader.MODULE_PREFIX + classPathFile.getName()));  } else {    log.warn("Class Path entries that references nestled jars inside another deployment are disallowed");  }} @TO@ ElseBody:if (item.startsWith("/")) {  ModuleIdentifier moduleIdentifier=externalModuleService.addExternalModule(classPathFile);  target.addToAttachmentList(Attachments.CLASS_PATH_ENTRIES,moduleIdentifier);  log.debugf("Resource %s added as external jar %s",classPathFile,resourceRoot.getRoot());} else {  log.warn("Class Path entry " + item + " in "+ resourceRoot.getRoot()+ "  does not point to a valid jar for a Class-Path reference.");} @AT@ 7393 @LENGTH@ 502
---------------UPD IfStatement@@if (classPathFile.getParent().equals(deploymentDirRoot)) {  target.addToAttachmentList(Attachments.CLASS_PATH_ENTRIES,ModuleIdentifier.create(ServiceModuleLoader.MODULE_PREFIX + classPathFile.getName()));} else {  log.warn("Class Path entries that references nestled jars inside another deployment are disallowed");} @TO@ if (item.startsWith("/")) {  ModuleIdentifier moduleIdentifier=externalModuleService.addExternalModule(classPathFile);  target.addToAttachmentList(Attachments.CLASS_PATH_ENTRIES,moduleIdentifier);  log.debugf("Resource %s added as external jar %s",classPathFile,resourceRoot.getRoot());} else {  log.warn("Class Path entry " + item + " in "+ resourceRoot.getRoot()+ "  does not point to a valid jar for a Class-Path reference.");} @AT@ 7473 @LENGTH@ 404
------------------UPD MethodInvocation@@classPathFile.getParent().equals(deploymentDirRoot) @TO@ item.startsWith("/") @AT@ 7476 @LENGTH@ 51
---------------------DEL MethodInvocation@@MethodName:getParent:[] @AT@ 7476 @LENGTH@ 25
---------------------UPD SimpleName@@Name:classPathFile @TO@ Name:item @AT@ 7476 @LENGTH@ 13
---------------------UPD SimpleName@@MethodName:equals:[deploymentDirRoot] @TO@ MethodName:startsWith:["/"] @AT@ 7502 @LENGTH@ 25
------------------------INS StringLiteral@@"/" @TO@ SimpleName@@MethodName:equals:[deploymentDirRoot] @AT@ 7478 @LENGTH@ 3
------------------------INS StringLiteral@@"/" @TO@ SimpleName@@MethodName:equals:[deploymentDirRoot] @AT@ 7478 @LENGTH@ 3
------------------------DEL SimpleName@@deploymentDirRoot @AT@ 7509 @LENGTH@ 17
------------------UPD Block@@ElseBody:{  log.warn("Class Path entries that references nestled jars inside another deployment are disallowed");} @TO@ ElseBody:{  log.warn("Class Path entry " + item + " in "+ resourceRoot.getRoot()+ "  does not point to a valid jar for a Class-Path reference.");} @AT@ 7728 @LENGTH@ 149
---------------------UPD ExpressionStatement@@MethodInvocation:log.warn("Class Path entries that references nestled jars inside another deployment are disallowed") @TO@ MethodInvocation:log.warn("Class Path entry " + item + " in "+ resourceRoot.getRoot()+ "  does not point to a valid jar for a Class-Path reference.") @AT@ 7754 @LENGTH@ 101
------------------------UPD MethodInvocation@@log.warn("Class Path entries that references nestled jars inside another deployment are disallowed") @TO@ log.warn("Class Path entry " + item + " in "+ resourceRoot.getRoot()+ "  does not point to a valid jar for a Class-Path reference.") @AT@ 7754 @LENGTH@ 100
---------------------------UPD SimpleName@@MethodName:warn:["Class Path entries that references nestled jars inside another deployment are disallowed"] @TO@ MethodName:warn:["Class Path entry " + item + " in "+ resourceRoot.getRoot()+ "  does not point to a valid jar for a Class-Path reference."] @AT@ 7758 @LENGTH@ 96
------------------------------DEL StringLiteral@@"Class Path entries that references nestled jars inside another deployment are disallowed" @AT@ 7763 @LENGTH@ 90
------------------------------INS InfixExpression@@"Class Path entry " + item + " in "+ resourceRoot.getRoot()+ "  does not point to a valid jar for a Class-Path reference." @TO@ SimpleName@@MethodName:warn:["Class Path entries that references nestled jars inside another deployment are disallowed"] @AT@ 7861 @LENGTH@ 156
---------------------------------INS StringLiteral@@"Class Path entry " @TO@ InfixExpression@@"Class Path entry " + item + " in "+ resourceRoot.getRoot()+ "  does not point to a valid jar for a Class-Path reference." @AT@ 7861 @LENGTH@ 19
---------------------------------INS Operator@@+ @TO@ InfixExpression@@"Class Path entry " + item + " in "+ resourceRoot.getRoot()+ "  does not point to a valid jar for a Class-Path reference." @AT@ 7880 @LENGTH@ 1
---------------------------------INS SimpleName@@item @TO@ InfixExpression@@"Class Path entry " + item + " in "+ resourceRoot.getRoot()+ "  does not point to a valid jar for a Class-Path reference." @AT@ 7883 @LENGTH@ 4
---------------------------------INS StringLiteral@@" in " @TO@ InfixExpression@@"Class Path entry " + item + " in "+ resourceRoot.getRoot()+ "  does not point to a valid jar for a Class-Path reference." @AT@ 7890 @LENGTH@ 6
---------------------------------INS MethodInvocation@@resourceRoot.getRoot() @TO@ InfixExpression@@"Class Path entry " + item + " in "+ resourceRoot.getRoot()+ "  does not point to a valid jar for a Class-Path reference." @AT@ 7931 @LENGTH@ 22
------------------------------------INS SimpleName@@Name:resourceRoot @TO@ MethodInvocation@@resourceRoot.getRoot() @AT@ 7931 @LENGTH@ 12
------------------------------------INS SimpleName@@MethodName:getRoot:[] @TO@ MethodInvocation@@resourceRoot.getRoot() @AT@ 7944 @LENGTH@ 9
---------------------------------INS StringLiteral@@"  does not point to a valid jar for a Class-Path reference." @TO@ InfixExpression@@"Class Path entry " + item + " in "+ resourceRoot.getRoot()+ "  does not point to a valid jar for a Class-Path reference." @AT@ 7956 @LENGTH@ 61
------------------MOV Block@@ElseBody:{  ModuleIdentifier moduleIdentifier=externalModuleService.addExternalModule(classPathFile);  target.addToAttachmentList(Attachments.CLASS_PATH_ENTRIES,moduleIdentifier);  log.debugf("Resource %s added as external jar %s",classPathFile,resourceRoot.getRoot());} @TO@ IfStatement@@if (classPathFile.getParent().equals(deploymentDirRoot)) {  target.addToAttachmentList(Attachments.CLASS_PATH_ENTRIES,ModuleIdentifier.create(ServiceModuleLoader.MODULE_PREFIX + classPathFile.getName()));} else {  log.warn("Class Path entries that references nestled jars inside another deployment are disallowed");} @AT@ 7901 @LENGTH@ 340
------------MOV Block@@ThenBody:{  target.addToAttachmentList(Attachments.CLASS_PATH_ENTRIES,ModuleIdentifier.create(ServiceModuleLoader.MODULE_PREFIX + classPathFile.getName()));} @TO@ IfStatement@@if (isInside(classPathFile,deploymentDirRoot)) {  if (classPathFile.getParent().equals(deploymentDirRoot)) {    target.addToAttachmentList(Attachments.CLASS_PATH_ENTRIES,ModuleIdentifier.create(ServiceModuleLoader.MODULE_PREFIX + classPathFile.getName()));  } else {    log.warn("Class Path entries that references nestled jars inside another deployment are disallowed");  }} else {  ModuleIdentifier moduleIdentifier=externalModuleService.addExternalModule(classPathFile);  target.addToAttachmentList(Attachments.CLASS_PATH_ENTRIES,moduleIdentifier);  log.debugf("Resource %s added as external jar %s",classPathFile,resourceRoot.getRoot());} @AT@ 7529 @LENGTH@ 193
------------UPD Block@@ElseBody:{  ModuleIdentifier moduleIdentifier=externalModuleService.addExternalModule(classPathFile);  target.addToAttachmentList(Attachments.CLASS_PATH_ENTRIES,moduleIdentifier);  log.debugf("Resource %s added as external jar %s",classPathFile,resourceRoot.getRoot());} @TO@ ThenBody:{  ModuleIdentifier moduleIdentifier=externalModuleService.addExternalModule(classPathFile);  target.addToAttachmentList(Attachments.CLASS_PATH_ENTRIES,moduleIdentifier);  log.debugf("Resource %s added as external jar %s",classPathFile,resourceRoot.getRoot());} @AT@ 7901 @LENGTH@ 340


INS MethodDeclaration@@private, void, MethodName:addConcurrencyManagementInterceptor,  @TO@ TypeDeclaration@@[public]SingletonComponentDescription, SessionBeanComponentDescription @AT@ 7354 @LENGTH@ 920
---INS Modifier@@private @TO@ MethodDeclaration@@private, void, MethodName:addConcurrencyManagementInterceptor,  @AT@ 7354 @LENGTH@ 7
---INS PrimitiveType@@void @TO@ MethodDeclaration@@private, void, MethodName:addConcurrencyManagementInterceptor,  @AT@ 7362 @LENGTH@ 4
---INS SimpleName@@MethodName:addConcurrencyManagementInterceptor @TO@ MethodDeclaration@@private, void, MethodName:addConcurrencyManagementInterceptor,  @AT@ 7367 @LENGTH@ 35
---INS ExpressionStatement@@MethodInvocation:this.getConfigurators().add(new ComponentConfigurator(){
  @Override public void configure(  DeploymentPhaseContext context,  ComponentDescription description,  ComponentConfiguration configuration) throws DeploymentUnitProcessingException {
    final SingletonComponentDescription singletonComponentDescription=(SingletonComponentDescription)description;
    if (singletonComponentDescription.getConcurrencyManagementType() == ConcurrencyManagementType.BEAN) {
      return;
    }
    configuration.addComponentInterceptor(new ContainerManagedConcurrencyInterceptorFactory(),InterceptorOrder.Component.SINGLETON_CONTAINER_MANAGED_CONCURRENCY_INTERCEPTOR,true);
  }
}
) @TO@ MethodDeclaration@@private, void, MethodName:addConcurrencyManagementInterceptor,  @AT@ 7415 @LENGTH@ 853
------INS MethodInvocation@@this.getConfigurators().add(new ComponentConfigurator(){
  @Override public void configure(  DeploymentPhaseContext context,  ComponentDescription description,  ComponentConfiguration configuration) throws DeploymentUnitProcessingException {
    final SingletonComponentDescription singletonComponentDescription=(SingletonComponentDescription)description;
    if (singletonComponentDescription.getConcurrencyManagementType() == ConcurrencyManagementType.BEAN) {
      return;
    }
    configuration.addComponentInterceptor(new ContainerManagedConcurrencyInterceptorFactory(),InterceptorOrder.Component.SINGLETON_CONTAINER_MANAGED_CONCURRENCY_INTERCEPTOR,true);
  }
}
) @TO@ ExpressionStatement@@MethodInvocation:this.getConfigurators().add(new ComponentConfigurator(){
  @Override public void configure(  DeploymentPhaseContext context,  ComponentDescription description,  ComponentConfiguration configuration) throws DeploymentUnitProcessingException {
    final SingletonComponentDescription singletonComponentDescription=(SingletonComponentDescription)description;
    if (singletonComponentDescription.getConcurrencyManagementType() == ConcurrencyManagementType.BEAN) {
      return;
    }
    configuration.addComponentInterceptor(new ContainerManagedConcurrencyInterceptorFactory(),InterceptorOrder.Component.SINGLETON_CONTAINER_MANAGED_CONCURRENCY_INTERCEPTOR,true);
  }
}
) @AT@ 7415 @LENGTH@ 852
---------INS MethodInvocation@@MethodName:getConfigurators:[] @TO@ MethodInvocation@@this.getConfigurators().add(new ComponentConfigurator(){
  @Override public void configure(  DeploymentPhaseContext context,  ComponentDescription description,  ComponentConfiguration configuration) throws DeploymentUnitProcessingException {
    final SingletonComponentDescription singletonComponentDescription=(SingletonComponentDescription)description;
    if (singletonComponentDescription.getConcurrencyManagementType() == ConcurrencyManagementType.BEAN) {
      return;
    }
    configuration.addComponentInterceptor(new ContainerManagedConcurrencyInterceptorFactory(),InterceptorOrder.Component.SINGLETON_CONTAINER_MANAGED_CONCURRENCY_INTERCEPTOR,true);
  }
}
) @AT@ 7415 @LENGTH@ 23
---------INS ThisExpression@@this @TO@ MethodInvocation@@this.getConfigurators().add(new ComponentConfigurator(){
  @Override public void configure(  DeploymentPhaseContext context,  ComponentDescription description,  ComponentConfiguration configuration) throws DeploymentUnitProcessingException {
    final SingletonComponentDescription singletonComponentDescription=(SingletonComponentDescription)description;
    if (singletonComponentDescription.getConcurrencyManagementType() == ConcurrencyManagementType.BEAN) {
      return;
    }
    configuration.addComponentInterceptor(new ContainerManagedConcurrencyInterceptorFactory(),InterceptorOrder.Component.SINGLETON_CONTAINER_MANAGED_CONCURRENCY_INTERCEPTOR,true);
  }
}
) @AT@ 7415 @LENGTH@ 4
---------INS SimpleName@@MethodName:add:[new ComponentConfigurator(){
  @Override public void configure(  DeploymentPhaseContext context,  ComponentDescription description,  ComponentConfiguration configuration) throws DeploymentUnitProcessingException {
    final SingletonComponentDescription singletonComponentDescription=(SingletonComponentDescription)description;
    if (singletonComponentDescription.getConcurrencyManagementType() == ConcurrencyManagementType.BEAN) {
      return;
    }
    configuration.addComponentInterceptor(new ContainerManagedConcurrencyInterceptorFactory(),InterceptorOrder.Component.SINGLETON_CONTAINER_MANAGED_CONCURRENCY_INTERCEPTOR,true);
  }
}
] @TO@ MethodInvocation@@this.getConfigurators().add(new ComponentConfigurator(){
  @Override public void configure(  DeploymentPhaseContext context,  ComponentDescription description,  ComponentConfiguration configuration) throws DeploymentUnitProcessingException {
    final SingletonComponentDescription singletonComponentDescription=(SingletonComponentDescription)description;
    if (singletonComponentDescription.getConcurrencyManagementType() == ConcurrencyManagementType.BEAN) {
      return;
    }
    configuration.addComponentInterceptor(new ContainerManagedConcurrencyInterceptorFactory(),InterceptorOrder.Component.SINGLETON_CONTAINER_MANAGED_CONCURRENCY_INTERCEPTOR,true);
  }
}
) @AT@ 7439 @LENGTH@ 828
------------INS ClassInstanceCreation@@ComponentConfigurator[] @TO@ SimpleName@@MethodName:add:[new ComponentConfigurator(){
  @Override public void configure(  DeploymentPhaseContext context,  ComponentDescription description,  ComponentConfiguration configuration) throws DeploymentUnitProcessingException {
    final SingletonComponentDescription singletonComponentDescription=(SingletonComponentDescription)description;
    if (singletonComponentDescription.getConcurrencyManagementType() == ConcurrencyManagementType.BEAN) {
      return;
    }
    configuration.addComponentInterceptor(new ContainerManagedConcurrencyInterceptorFactory(),InterceptorOrder.Component.SINGLETON_CONTAINER_MANAGED_CONCURRENCY_INTERCEPTOR,true);
  }
}
] @AT@ 7443 @LENGTH@ 823
---------------INS New@@new @TO@ ClassInstanceCreation@@ComponentConfigurator[] @AT@ 7443 @LENGTH@ 3
---------------INS SimpleType@@ComponentConfigurator @TO@ ClassInstanceCreation@@ComponentConfigurator[] @AT@ 7447 @LENGTH@ 21
---------------INS AnonymousClassDeclaration@@AnonymousClass @TO@ ClassInstanceCreation@@ComponentConfigurator[] @AT@ 7471 @LENGTH@ 795
------------------INS MethodDeclaration@@public, void, MethodName:configure, DeploymentPhaseContext context, ComponentDescription description, ComponentConfiguration configuration, DeploymentUnitProcessingException,  @TO@ AnonymousClassDeclaration@@AnonymousClass @AT@ 7507 @LENGTH@ 749
---------------------INS Modifier@@public @TO@ MethodDeclaration@@public, void, MethodName:configure, DeploymentPhaseContext context, ComponentDescription description, ComponentConfiguration configuration, DeploymentUnitProcessingException,  @AT@ 7507 @LENGTH@ 6
---------------------INS PrimitiveType@@void @TO@ MethodDeclaration@@public, void, MethodName:configure, DeploymentPhaseContext context, ComponentDescription description, ComponentConfiguration configuration, DeploymentUnitProcessingException,  @AT@ 7514 @LENGTH@ 4
---------------------INS SimpleName@@MethodName:configure @TO@ MethodDeclaration@@public, void, MethodName:configure, DeploymentPhaseContext context, ComponentDescription description, ComponentConfiguration configuration, DeploymentUnitProcessingException,  @AT@ 7519 @LENGTH@ 9
---------------------INS SingleVariableDeclaration@@DeploymentPhaseContext context @TO@ MethodDeclaration@@public, void, MethodName:configure, DeploymentPhaseContext context, ComponentDescription description, ComponentConfiguration configuration, DeploymentUnitProcessingException,  @AT@ 7529 @LENGTH@ 30
------------------------INS SimpleType@@DeploymentPhaseContext @TO@ SingleVariableDeclaration@@DeploymentPhaseContext context @AT@ 7529 @LENGTH@ 22
------------------------INS SimpleName@@context @TO@ SingleVariableDeclaration@@DeploymentPhaseContext context @AT@ 7552 @LENGTH@ 7
---------------------INS SingleVariableDeclaration@@ComponentDescription description @TO@ MethodDeclaration@@public, void, MethodName:configure, DeploymentPhaseContext context, ComponentDescription description, ComponentConfiguration configuration, DeploymentUnitProcessingException,  @AT@ 7561 @LENGTH@ 32
------------------------INS SimpleType@@ComponentDescription @TO@ SingleVariableDeclaration@@ComponentDescription description @AT@ 7561 @LENGTH@ 20
------------------------INS SimpleName@@description @TO@ SingleVariableDeclaration@@ComponentDescription description @AT@ 7582 @LENGTH@ 11
---------------------INS SingleVariableDeclaration@@ComponentConfiguration configuration @TO@ MethodDeclaration@@public, void, MethodName:configure, DeploymentPhaseContext context, ComponentDescription description, ComponentConfiguration configuration, DeploymentUnitProcessingException,  @AT@ 7595 @LENGTH@ 36
------------------------INS SimpleType@@ComponentConfiguration @TO@ SingleVariableDeclaration@@ComponentConfiguration configuration @AT@ 7595 @LENGTH@ 22
------------------------INS SimpleName@@configuration @TO@ SingleVariableDeclaration@@ComponentConfiguration configuration @AT@ 7618 @LENGTH@ 13
---------------------INS SimpleType@@DeploymentUnitProcessingException @TO@ MethodDeclaration@@public, void, MethodName:configure, DeploymentPhaseContext context, ComponentDescription description, ComponentConfiguration configuration, DeploymentUnitProcessingException,  @AT@ 7640 @LENGTH@ 33
---------------------INS VariableDeclarationStatement@@final SingletonComponentDescription singletonComponentDescription=(SingletonComponentDescription)description; @TO@ MethodDeclaration@@public, void, MethodName:configure, DeploymentPhaseContext context, ComponentDescription description, ComponentConfiguration configuration, DeploymentUnitProcessingException,  @AT@ 7692 @LENGTH@ 112
------------------------INS Modifier@@final @TO@ VariableDeclarationStatement@@final SingletonComponentDescription singletonComponentDescription=(SingletonComponentDescription)description; @AT@ 7692 @LENGTH@ 5
------------------------INS SimpleType@@SingletonComponentDescription @TO@ VariableDeclarationStatement@@final SingletonComponentDescription singletonComponentDescription=(SingletonComponentDescription)description; @AT@ 7698 @LENGTH@ 29
------------------------INS VariableDeclarationFragment@@singletonComponentDescription=(SingletonComponentDescription)description @TO@ VariableDeclarationStatement@@final SingletonComponentDescription singletonComponentDescription=(SingletonComponentDescription)description; @AT@ 7728 @LENGTH@ 75
---------------------------INS SimpleName@@singletonComponentDescription @TO@ VariableDeclarationFragment@@singletonComponentDescription=(SingletonComponentDescription)description @AT@ 7728 @LENGTH@ 29
---------------------------INS CastExpression@@(SingletonComponentDescription)description @TO@ VariableDeclarationFragment@@singletonComponentDescription=(SingletonComponentDescription)description @AT@ 7760 @LENGTH@ 43
------------------------------INS SimpleType@@SingletonComponentDescription @TO@ CastExpression@@(SingletonComponentDescription)description @AT@ 7761 @LENGTH@ 29
------------------------------INS SimpleName@@description @TO@ CastExpression@@(SingletonComponentDescription)description @AT@ 7792 @LENGTH@ 11
---------------------INS IfStatement@@if (singletonComponentDescription.getConcurrencyManagementType() == ConcurrencyManagementType.BEAN) {  return;} @TO@ MethodDeclaration@@public, void, MethodName:configure, DeploymentPhaseContext context, ComponentDescription description, ComponentConfiguration configuration, DeploymentUnitProcessingException,  @AT@ 7901 @LENGTH@ 147
------------------------INS InfixExpression@@singletonComponentDescription.getConcurrencyManagementType() == ConcurrencyManagementType.BEAN @TO@ IfStatement@@if (singletonComponentDescription.getConcurrencyManagementType() == ConcurrencyManagementType.BEAN) {  return;} @AT@ 7905 @LENGTH@ 94
---------------------------INS MethodInvocation@@singletonComponentDescription.getConcurrencyManagementType() @TO@ InfixExpression@@singletonComponentDescription.getConcurrencyManagementType() == ConcurrencyManagementType.BEAN @AT@ 7905 @LENGTH@ 60
------------------------------INS SimpleName@@Name:singletonComponentDescription @TO@ MethodInvocation@@singletonComponentDescription.getConcurrencyManagementType() @AT@ 7905 @LENGTH@ 29
------------------------------INS SimpleName@@MethodName:getConcurrencyManagementType:[] @TO@ MethodInvocation@@singletonComponentDescription.getConcurrencyManagementType() @AT@ 7935 @LENGTH@ 30
---------------------------INS Operator@@== @TO@ InfixExpression@@singletonComponentDescription.getConcurrencyManagementType() == ConcurrencyManagementType.BEAN @AT@ 7965 @LENGTH@ 2
---------------------------INS QualifiedName@@ConcurrencyManagementType.BEAN @TO@ InfixExpression@@singletonComponentDescription.getConcurrencyManagementType() == ConcurrencyManagementType.BEAN @AT@ 7969 @LENGTH@ 30
------------------------------INS SimpleName@@ConcurrencyManagementType @TO@ QualifiedName@@ConcurrencyManagementType.BEAN @AT@ 7969 @LENGTH@ 25
------------------------------INS SimpleName@@BEAN @TO@ QualifiedName@@ConcurrencyManagementType.BEAN @AT@ 7995 @LENGTH@ 4
------------------------INS Block@@ThenBody:{  return;} @TO@ IfStatement@@if (singletonComponentDescription.getConcurrencyManagementType() == ConcurrencyManagementType.BEAN) {  return;} @AT@ 8001 @LENGTH@ 47
---------------------------INS ReturnStatement@@ @TO@ Block@@ThenBody:{  return;} @AT@ 8023 @LENGTH@ 7
---------------------INS ExpressionStatement@@MethodInvocation:configuration.addComponentInterceptor(new ContainerManagedConcurrencyInterceptorFactory(),InterceptorOrder.Component.SINGLETON_CONTAINER_MANAGED_CONCURRENCY_INTERCEPTOR,true) @TO@ MethodDeclaration@@public, void, MethodName:configure, DeploymentPhaseContext context, ComponentDescription description, ComponentConfiguration configuration, DeploymentUnitProcessingException,  @AT@ 8065 @LENGTH@ 177
------------------------INS MethodInvocation@@configuration.addComponentInterceptor(new ContainerManagedConcurrencyInterceptorFactory(),InterceptorOrder.Component.SINGLETON_CONTAINER_MANAGED_CONCURRENCY_INTERCEPTOR,true) @TO@ ExpressionStatement@@MethodInvocation:configuration.addComponentInterceptor(new ContainerManagedConcurrencyInterceptorFactory(),InterceptorOrder.Component.SINGLETON_CONTAINER_MANAGED_CONCURRENCY_INTERCEPTOR,true) @AT@ 8065 @LENGTH@ 176
---------------------------INS SimpleName@@Name:configuration @TO@ MethodInvocation@@configuration.addComponentInterceptor(new ContainerManagedConcurrencyInterceptorFactory(),InterceptorOrder.Component.SINGLETON_CONTAINER_MANAGED_CONCURRENCY_INTERCEPTOR,true) @AT@ 8065 @LENGTH@ 13
---------------------------INS SimpleName@@MethodName:addComponentInterceptor:[new ContainerManagedConcurrencyInterceptorFactory(), InterceptorOrder.Component.SINGLETON_CONTAINER_MANAGED_CONCURRENCY_INTERCEPTOR, true] @TO@ MethodInvocation@@configuration.addComponentInterceptor(new ContainerManagedConcurrencyInterceptorFactory(),InterceptorOrder.Component.SINGLETON_CONTAINER_MANAGED_CONCURRENCY_INTERCEPTOR,true) @AT@ 8079 @LENGTH@ 162
------------------------------INS ClassInstanceCreation@@ContainerManagedConcurrencyInterceptorFactory[] @TO@ SimpleName@@MethodName:addComponentInterceptor:[new ContainerManagedConcurrencyInterceptorFactory(), InterceptorOrder.Component.SINGLETON_CONTAINER_MANAGED_CONCURRENCY_INTERCEPTOR, true] @AT@ 8103 @LENGTH@ 51
---------------------------------INS New@@new @TO@ ClassInstanceCreation@@ContainerManagedConcurrencyInterceptorFactory[] @AT@ 8103 @LENGTH@ 3
---------------------------------INS SimpleType@@ContainerManagedConcurrencyInterceptorFactory @TO@ ClassInstanceCreation@@ContainerManagedConcurrencyInterceptorFactory[] @AT@ 8107 @LENGTH@ 45
------------------------------INS QualifiedName@@InterceptorOrder.Component.SINGLETON_CONTAINER_MANAGED_CONCURRENCY_INTERCEPTOR @TO@ SimpleName@@MethodName:addComponentInterceptor:[new ContainerManagedConcurrencyInterceptorFactory(), InterceptorOrder.Component.SINGLETON_CONTAINER_MANAGED_CONCURRENCY_INTERCEPTOR, true] @AT@ 8156 @LENGTH@ 78
---------------------------------INS QualifiedName@@InterceptorOrder.Component @TO@ QualifiedName@@InterceptorOrder.Component.SINGLETON_CONTAINER_MANAGED_CONCURRENCY_INTERCEPTOR @AT@ 8156 @LENGTH@ 26
------------------------------------INS SimpleName@@InterceptorOrder @TO@ QualifiedName@@InterceptorOrder.Component @AT@ 8156 @LENGTH@ 16
------------------------------------INS SimpleName@@Component @TO@ QualifiedName@@InterceptorOrder.Component @AT@ 8173 @LENGTH@ 9
---------------------------------INS SimpleName@@SINGLETON_CONTAINER_MANAGED_CONCURRENCY_INTERCEPTOR @TO@ QualifiedName@@InterceptorOrder.Component.SINGLETON_CONTAINER_MANAGED_CONCURRENCY_INTERCEPTOR @AT@ 8183 @LENGTH@ 51
------------------------------INS BooleanLiteral@@true @TO@ SimpleName@@MethodName:addComponentInterceptor:[new ContainerManagedConcurrencyInterceptorFactory(), InterceptorOrder.Component.SINGLETON_CONTAINER_MANAGED_CONCURRENCY_INTERCEPTOR, true] @AT@ 8236 @LENGTH@ 4


UPD TypeDeclaration@@[@RunWith(JUnit4TestRunner.class), public]CamelJasyptTest, AbstractFeatureTest @TO@ [@RunWith(JUnit4TestRunner.class), @Ignore("Does not work on JDK 1.5"), public]CamelJasyptTest, AbstractFeatureTest @AT@ 1031 @LENGTH@ 377
---INS SingleMemberAnnotation@@@Ignore("Does not work on JDK 1.5") @TO@ TypeDeclaration@@[@RunWith(JUnit4TestRunner.class), public]CamelJasyptTest, AbstractFeatureTest @AT@ 1089 @LENGTH@ 35


UPD EnhancedForStatement@@for (Property prop : namespaces.asPropertyList()) {  final ModelNode ns=new ModelNode();  ns.get(prop.getName()).set(prop.getValue());  map.put(prop.getName(),NamespaceAddHandler.getAddNamespaceOperation(EMPTY,ns));} @TO@ for (Property prop : namespaces.asPropertyList()) {  map.put(prop.getName(),NamespaceAddHandler.getAddNamespaceOperation(EMPTY,prop));} @AT@ 10354 @LENGTH@ 278
---DEL VariableDeclarationStatement@@final ModelNode ns=new ModelNode(); @AT@ 10422 @LENGTH@ 37
------DEL Modifier@@final @AT@ 10422 @LENGTH@ 5
------DEL SimpleType@@ModelNode @AT@ 10428 @LENGTH@ 9
------DEL VariableDeclarationFragment@@ns=new ModelNode() @AT@ 10438 @LENGTH@ 20
---------DEL SimpleName@@ns @AT@ 10438 @LENGTH@ 2
---------DEL ClassInstanceCreation@@ModelNode[] @AT@ 10443 @LENGTH@ 15
------------DEL New@@new @AT@ 10443 @LENGTH@ 3
------------DEL SimpleType@@ModelNode @AT@ 10447 @LENGTH@ 9
---DEL ExpressionStatement@@MethodInvocation:ns.get(prop.getName()).set(prop.getValue()) @AT@ 10476 @LENGTH@ 44
------DEL MethodInvocation@@ns.get(prop.getName()).set(prop.getValue()) @AT@ 10476 @LENGTH@ 43
---------DEL MethodInvocation@@MethodName:get:[prop.getName()] @AT@ 10476 @LENGTH@ 22
------------DEL MethodInvocation@@prop.getName() @AT@ 10483 @LENGTH@ 14
---------------DEL SimpleName@@Name:prop @AT@ 10483 @LENGTH@ 4
---------------DEL SimpleName@@MethodName:getName:[] @AT@ 10488 @LENGTH@ 9
---------DEL SimpleName@@Name:ns @AT@ 10476 @LENGTH@ 2
---------DEL SimpleName@@MethodName:set:[prop.getValue()] @AT@ 10499 @LENGTH@ 20
------------DEL MethodInvocation@@prop.getValue() @AT@ 10503 @LENGTH@ 15
---------------DEL SimpleName@@Name:prop @AT@ 10503 @LENGTH@ 4
---------------DEL SimpleName@@MethodName:getValue:[] @AT@ 10508 @LENGTH@ 10
---UPD ExpressionStatement@@MethodInvocation:map.put(prop.getName(),NamespaceAddHandler.getAddNamespaceOperation(EMPTY,ns)) @TO@ MethodInvocation:map.put(prop.getName(),NamespaceAddHandler.getAddNamespaceOperation(EMPTY,prop)) @AT@ 10537 @LENGTH@ 81
------UPD MethodInvocation@@map.put(prop.getName(),NamespaceAddHandler.getAddNamespaceOperation(EMPTY,ns)) @TO@ map.put(prop.getName(),NamespaceAddHandler.getAddNamespaceOperation(EMPTY,prop)) @AT@ 10537 @LENGTH@ 80
---------UPD SimpleName@@MethodName:put:[prop.getName(), NamespaceAddHandler.getAddNamespaceOperation(EMPTY,ns)] @TO@ MethodName:put:[prop.getName(), NamespaceAddHandler.getAddNamespaceOperation(EMPTY,prop)] @AT@ 10541 @LENGTH@ 76
------------UPD MethodInvocation@@NamespaceAddHandler.getAddNamespaceOperation(EMPTY,ns) @TO@ NamespaceAddHandler.getAddNamespaceOperation(EMPTY,prop) @AT@ 10561 @LENGTH@ 55
---------------UPD SimpleName@@MethodName:getAddNamespaceOperation:[EMPTY, ns] @TO@ MethodName:getAddNamespaceOperation:[EMPTY, prop] @AT@ 10581 @LENGTH@ 35
------------------UPD SimpleName@@ns @TO@ prop @AT@ 10613 @LENGTH@ 2


UPD IfStatement@@if (failure == null && !namespaces.isDefined()) {  for (  ModelNode node : namespaces.asList()) {    if (name.equals(node.asProperty().getName())) {      failure="Namespace with prefix " + name + " already registered with schema URI "+ node.asProperty().getValue().asString();    }  }} @TO@ if (failure == null && namespaces.isDefined()) {  for (  ModelNode node : namespaces.asList()) {    if (name.equals(node.asProperty().getName())) {      failure="Namespace with prefix " + name + " already registered with schema URI "+ node.asProperty().getValue().asString();    }  }} @AT@ 4075 @LENGTH@ 358
---UPD InfixExpression@@failure == null && !namespaces.isDefined() @TO@ failure == null && namespaces.isDefined() @AT@ 4079 @LENGTH@ 42
------DEL PrefixExpression@@!namespaces.isDefined() @AT@ 4098 @LENGTH@ 23
---------DEL Operator@@! @AT@ 4098 @LENGTH@ 1
---------DEL MethodInvocation@@namespaces.isDefined() @AT@ 4099 @LENGTH@ 22
------INS MethodInvocation@@namespaces.isDefined() @TO@ InfixExpression@@failure == null && !namespaces.isDefined() @AT@ 4098 @LENGTH@ 22
---------MOV SimpleName@@Name:namespaces @TO@ MethodInvocation@@namespaces.isDefined() @AT@ 4099 @LENGTH@ 10
---------MOV SimpleName@@MethodName:isDefined:[] @TO@ MethodInvocation@@namespaces.isDefined() @AT@ 4110 @LENGTH@ 11


UPD MethodDeclaration@@public, void, MethodName:setRange, byte[] key, int start, int end,  @TO@ public, void, MethodName:setRange, byte[] key, long start, byte[] value,  @AT@ 9228 @LENGTH@ 95
---UPD SingleVariableDeclaration@@int start @TO@ long start @AT@ 9261 @LENGTH@ 9
------UPD PrimitiveType@@int @TO@ long @AT@ 9261 @LENGTH@ 3
---UPD SingleVariableDeclaration@@int end @TO@ byte[] value @AT@ 9272 @LENGTH@ 7
------DEL PrimitiveType@@int @AT@ 9272 @LENGTH@ 3
------INS ArrayType@@byte[] @TO@ SingleVariableDeclaration@@int end @AT@ 9275 @LENGTH@ 6
---------INS PrimitiveType@@byte @TO@ ArrayType@@byte[] @AT@ 9275 @LENGTH@ 4
------UPD SimpleName@@end @TO@ value @AT@ 9276 @LENGTH@ 3
---UPD ExpressionStatement@@MethodInvocation:delegate.setRange(key,start,end) @TO@ MethodInvocation:delegate.setRange(key,start,value) @AT@ 9285 @LENGTH@ 35
------UPD MethodInvocation@@delegate.setRange(key,start,end) @TO@ delegate.setRange(key,start,value) @AT@ 9285 @LENGTH@ 34
---------UPD SimpleName@@MethodName:setRange:[key, start, end] @TO@ MethodName:setRange:[key, start, value] @AT@ 9294 @LENGTH@ 25
------------UPD SimpleName@@end @TO@ value @AT@ 9315 @LENGTH@ 3


UPD ExpressionStatement@@MethodInvocation:context.getBatchBuilder().addService(WebSubsystemElement.JBOSS_WEB_CONNECTOR.append(name),service).addDependency(WebSubsystemElement.JBOSS_WEB,WebServer.class,service.getServer()).addDependency(SocketBinding.JBOSS_BINDING_NAME.append(bindingRef),SocketBinding.class,service.getBinding()).addListener(new UpdateResultHandler.ServiceStartListener<P>(resultHandler,param)).setInitialMode(enabled ? Mode.IMMEDIATE : Mode.NEVER) @TO@ MethodInvocation:context.getBatchBuilder().addService(WebSubsystemElement.JBOSS_WEB_CONNECTOR.append(name),service).addDependency(WebSubsystemElement.JBOSS_WEB,WebServer.class,service.getServer()).addDependency(SocketBinding.JBOSS_BINDING_NAME.append(bindingRef),SocketBinding.class,service.getBinding()).addListener(new UpdateResultHandler.ServiceStartListener<P>(resultHandler,param)).setInitialMode(enabled ? Mode.ACTIVE : Mode.NEVER) @AT@ 3970 @LENGTH@ 482
---UPD MethodInvocation@@context.getBatchBuilder().addService(WebSubsystemElement.JBOSS_WEB_CONNECTOR.append(name),service).addDependency(WebSubsystemElement.JBOSS_WEB,WebServer.class,service.getServer()).addDependency(SocketBinding.JBOSS_BINDING_NAME.append(bindingRef),SocketBinding.class,service.getBinding()).addListener(new UpdateResultHandler.ServiceStartListener<P>(resultHandler,param)).setInitialMode(enabled ? Mode.IMMEDIATE : Mode.NEVER) @TO@ context.getBatchBuilder().addService(WebSubsystemElement.JBOSS_WEB_CONNECTOR.append(name),service).addDependency(WebSubsystemElement.JBOSS_WEB,WebServer.class,service.getServer()).addDependency(SocketBinding.JBOSS_BINDING_NAME.append(bindingRef),SocketBinding.class,service.getBinding()).addListener(new UpdateResultHandler.ServiceStartListener<P>(resultHandler,param)).setInitialMode(enabled ? Mode.ACTIVE : Mode.NEVER) @AT@ 3970 @LENGTH@ 481
------UPD SimpleName@@MethodName:setInitialMode:[enabled ? Mode.IMMEDIATE : Mode.NEVER] @TO@ MethodName:setInitialMode:[enabled ? Mode.ACTIVE : Mode.NEVER] @AT@ 4398 @LENGTH@ 53
---------UPD ConditionalExpression@@enabled ? Mode.IMMEDIATE : Mode.NEVER @TO@ enabled ? Mode.ACTIVE : Mode.NEVER @AT@ 4413 @LENGTH@ 37
------------UPD QualifiedName@@Mode.IMMEDIATE @TO@ Mode.ACTIVE @AT@ 4423 @LENGTH@ 14
---------------UPD SimpleName@@IMMEDIATE @TO@ ACTIVE @AT@ 4428 @LENGTH@ 9


UPD FieldDeclaration@@public, static, final, int, [INSTALL_OSGI_ATTACHMENTS=0x0500] @TO@ public, static, final, int, [INSTALL_OSGI_DEPLOYMENT=0x0500] @AT@ 10153 @LENGTH@ 77
---UPD VariableDeclarationFragment@@INSTALL_OSGI_ATTACHMENTS=0x0500 @TO@ INSTALL_OSGI_DEPLOYMENT=0x0500 @AT@ 10177 @LENGTH@ 52
------UPD SimpleName@@INSTALL_OSGI_ATTACHMENTS @TO@ INSTALL_OSGI_DEPLOYMENT @AT@ 10177 @LENGTH@ 24


INS FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @TO@ TypeDeclaration@@[public]UsernamePasswordAuthenticationToken, AbstractAuthenticationToken @AT@ 1376 @LENGTH@ 90
---INS Modifier@@private @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @AT@ 1376 @LENGTH@ 7
---INS Modifier@@static @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @AT@ 1384 @LENGTH@ 6
---INS Modifier@@final @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @AT@ 1391 @LENGTH@ 5
---INS PrimitiveType@@long @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @AT@ 1397 @LENGTH@ 4
---INS VariableDeclarationFragment@@serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @AT@ 1402 @LENGTH@ 63
------INS SimpleName@@serialVersionUID @TO@ VariableDeclarationFragment@@serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID @AT@ 1402 @LENGTH@ 16
------INS QualifiedName@@SpringSecurityCoreVersion.SERIAL_VERSION_UID @TO@ VariableDeclarationFragment@@serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID @AT@ 1421 @LENGTH@ 44
---------INS SimpleName@@SpringSecurityCoreVersion @TO@ QualifiedName@@SpringSecurityCoreVersion.SERIAL_VERSION_UID @AT@ 1421 @LENGTH@ 25
---------INS SimpleName@@SERIAL_VERSION_UID @TO@ QualifiedName@@SpringSecurityCoreVersion.SERIAL_VERSION_UID @AT@ 1447 @LENGTH@ 18


UPD MethodDeclaration@@public, static, OSGiMetaData, MethodName:getOSGiMetaDataAttachment, final DeploymentUnit context,  @TO@ public, static, OSGiMetaData, MethodName:getOSGiMetaData, final DeploymentUnit context,  @AT@ 1643 @LENGTH@ 133
---UPD SimpleName@@MethodName:getOSGiMetaDataAttachment @TO@ MethodName:getOSGiMetaData @AT@ 1670 @LENGTH@ 25


UPD VariableDeclarationStatement@@InputStream inputStream=new FileInputStream(fileDetails.getFile()); @TO@ InputStream inputStream=fileManager.getInputStream(persistenceXmlPath); @AT@ 45782 @LENGTH@ 69
---UPD VariableDeclarationFragment@@inputStream=new FileInputStream(fileDetails.getFile()) @TO@ inputStream=fileManager.getInputStream(persistenceXmlPath) @AT@ 45794 @LENGTH@ 56
------INS MethodInvocation@@fileManager.getInputStream(persistenceXmlPath) @TO@ VariableDeclarationFragment@@inputStream=new FileInputStream(fileDetails.getFile()) @AT@ 45738 @LENGTH@ 46
---------MOV SimpleName@@Name:fileDetails @TO@ MethodInvocation@@fileManager.getInputStream(persistenceXmlPath) @AT@ 45828 @LENGTH@ 11
---------MOV SimpleName@@MethodName:getFile:[] @TO@ MethodInvocation@@fileManager.getInputStream(persistenceXmlPath) @AT@ 45840 @LENGTH@ 9
------------INS SimpleName@@persistenceXmlPath @TO@ SimpleName@@MethodName:getFile:[] @AT@ 45765 @LENGTH@ 18
------------INS SimpleName@@persistenceXmlPath @TO@ SimpleName@@MethodName:getFile:[] @AT@ 45765 @LENGTH@ 18
------DEL ClassInstanceCreation@@FileInputStream[fileDetails.getFile()] @AT@ 45808 @LENGTH@ 42
---------DEL New@@new @AT@ 45808 @LENGTH@ 3
---------DEL SimpleType@@FileInputStream @AT@ 45812 @LENGTH@ 15
---------DEL MethodInvocation@@fileDetails.getFile() @AT@ 45828 @LENGTH@ 21


DEL ExpressionStatement@@MethodInvocation:establishSharedConnection() @AT@ 9592 @LENGTH@ 28
---DEL MethodInvocation@@MethodName:establishSharedConnection:[] @AT@ 9592 @LENGTH@ 27


INS FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @TO@ TypeDeclaration@@[public]JaasAuthenticationToken, UsernamePasswordAuthenticationToken @AT@ 1203 @LENGTH@ 90
---INS Modifier@@private @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @AT@ 1203 @LENGTH@ 7
---INS Modifier@@static @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @AT@ 1211 @LENGTH@ 6
---INS Modifier@@final @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @AT@ 1218 @LENGTH@ 5
---INS PrimitiveType@@long @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @AT@ 1224 @LENGTH@ 4
---INS VariableDeclarationFragment@@serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @AT@ 1229 @LENGTH@ 63
------INS SimpleName@@serialVersionUID @TO@ VariableDeclarationFragment@@serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID @AT@ 1229 @LENGTH@ 16
------INS QualifiedName@@SpringSecurityCoreVersion.SERIAL_VERSION_UID @TO@ VariableDeclarationFragment@@serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID @AT@ 1248 @LENGTH@ 44
---------INS SimpleName@@SpringSecurityCoreVersion @TO@ QualifiedName@@SpringSecurityCoreVersion.SERIAL_VERSION_UID @AT@ 1248 @LENGTH@ 25
---------INS SimpleName@@SERIAL_VERSION_UID @TO@ QualifiedName@@SpringSecurityCoreVersion.SERIAL_VERSION_UID @AT@ 1274 @LENGTH@ 18


UPD IfStatement@@if (part.startsWith("//http//") || part.startsWith("//https//")) {  throw new ResolveEndpointFailedException(uri,"The uri part is not configured correctly. You have duplicated the http(s) protocol.");} @TO@ if (part.startsWith("//http//") || part.startsWith("//https//") || part.startsWith("//http://")|| part.startsWith("//https://")) {  throw new ResolveEndpointFailedException(uri,"The uri part is not configured correctly. You have duplicated the http(s) protocol.");} @AT@ 8797 @LENGTH@ 254
---UPD InfixExpression@@part.startsWith("//http//") || part.startsWith("//https//") @TO@ part.startsWith("//http//") || part.startsWith("//https//") || part.startsWith("//http://")|| part.startsWith("//https://") @AT@ 8801 @LENGTH@ 59
------INS MethodInvocation@@part.startsWith("//http://") @TO@ InfixExpression@@part.startsWith("//http//") || part.startsWith("//https//") @AT@ 8864 @LENGTH@ 28
---------INS SimpleName@@Name:part @TO@ MethodInvocation@@part.startsWith("//http://") @AT@ 8864 @LENGTH@ 4
---------INS SimpleName@@MethodName:startsWith:["//http://"] @TO@ MethodInvocation@@part.startsWith("//http://") @AT@ 8869 @LENGTH@ 23
------------INS StringLiteral@@"//http://" @TO@ SimpleName@@MethodName:startsWith:["//http://"] @AT@ 8880 @LENGTH@ 11
------INS MethodInvocation@@part.startsWith("//https://") @TO@ InfixExpression@@part.startsWith("//http//") || part.startsWith("//https//") @AT@ 8896 @LENGTH@ 29
---------INS SimpleName@@Name:part @TO@ MethodInvocation@@part.startsWith("//https://") @AT@ 8896 @LENGTH@ 4
---------INS SimpleName@@MethodName:startsWith:["//https://"] @TO@ MethodInvocation@@part.startsWith("//https://") @AT@ 8901 @LENGTH@ 24
------------INS StringLiteral@@"//https://" @TO@ SimpleName@@MethodName:startsWith:["//https://"] @AT@ 8912 @LENGTH@ 12


DEL MethodDeclaration@@public, void, MethodName:doSetUp, Exception,  @AT@ 2745 @LENGTH@ 128
---DEL Modifier@@public @AT@ 2745 @LENGTH@ 6
---DEL PrimitiveType@@void @AT@ 2752 @LENGTH@ 4
---DEL SimpleName@@MethodName:doSetUp @AT@ 2757 @LENGTH@ 7
---DEL SimpleType@@Exception @AT@ 2774 @LENGTH@ 9
---DEL ExpressionStatement@@Assignment:applicationContext=createApplicationContext() @AT@ 2794 @LENGTH@ 48
------DEL Assignment@@applicationContext=createApplicationContext() @AT@ 2794 @LENGTH@ 47
---------DEL SimpleName@@applicationContext @AT@ 2794 @LENGTH@ 18
---------DEL Operator@@= @AT@ 2812 @LENGTH@ 1
---------DEL MethodInvocation@@MethodName:createApplicationContext:[] @AT@ 2815 @LENGTH@ 26
---DEL ExpressionStatement@@SuperMethodInvocation:super.doSetUp() @AT@ 2851 @LENGTH@ 16
------DEL SuperMethodInvocation@@super.doSetUp() @AT@ 2851 @LENGTH@ 15
---------DEL SimpleName@@MethodName:doSetUp:[] @AT@ 2857 @LENGTH@ 7


INS IfStatement@@if (resourceRoot != null) {  final Closeable mountHandle=resourceRoot.getMountHandle();  VFSUtils.safeClose(mountHandle);} @TO@ MethodDeclaration@@public, void, MethodName:undeploy, DeploymentUnit context,  @AT@ 3625 @LENGTH@ 155
---INS InfixExpression@@resourceRoot != null @TO@ IfStatement@@if (resourceRoot != null) {  final Closeable mountHandle=resourceRoot.getMountHandle();  VFSUtils.safeClose(mountHandle);} @AT@ 3629 @LENGTH@ 20
------INS SimpleName@@resourceRoot @TO@ InfixExpression@@resourceRoot != null @AT@ 3629 @LENGTH@ 12
------INS Operator@@!= @TO@ InfixExpression@@resourceRoot != null @AT@ 3641 @LENGTH@ 2
------INS NullLiteral@@null @TO@ InfixExpression@@resourceRoot != null @AT@ 3645 @LENGTH@ 4
---INS Block@@ThenBody:{  final Closeable mountHandle=resourceRoot.getMountHandle();  VFSUtils.safeClose(mountHandle);} @TO@ IfStatement@@if (resourceRoot != null) {  final Closeable mountHandle=resourceRoot.getMountHandle();  VFSUtils.safeClose(mountHandle);} @AT@ 3651 @LENGTH@ 129
------MOV VariableDeclarationStatement@@final Closeable mountHandle=resourceRoot.getMountHandle(); @TO@ Block@@ThenBody:{  final Closeable mountHandle=resourceRoot.getMountHandle();  VFSUtils.safeClose(mountHandle);} @AT@ 3622 @LENGTH@ 60
------MOV ExpressionStatement@@MethodInvocation:VFSUtils.safeClose(mountHandle) @TO@ Block@@ThenBody:{  final Closeable mountHandle=resourceRoot.getMountHandle();  VFSUtils.safeClose(mountHandle);} @AT@ 3691 @LENGTH@ 32


INS MethodDeclaration@@private, Collection<?>, MethodName:nextAsCollection, Iterator<Object> iterator,  @TO@ TypeDeclaration@@[public]JpaQueryCreator, AbstractQueryCreator<CriteriaQuery<Object>,Predicate> @AT@ 8120 @LENGTH@ 346
---INS Modifier@@private @TO@ MethodDeclaration@@private, Collection<?>, MethodName:nextAsCollection, Iterator<Object> iterator,  @AT@ 8120 @LENGTH@ 7
---INS ParameterizedType@@Collection<?> @TO@ MethodDeclaration@@private, Collection<?>, MethodName:nextAsCollection, Iterator<Object> iterator,  @AT@ 8128 @LENGTH@ 13
------INS SimpleType@@Collection @TO@ ParameterizedType@@Collection<?> @AT@ 8128 @LENGTH@ 10
------INS WildcardType@@? @TO@ ParameterizedType@@Collection<?> @AT@ 8139 @LENGTH@ 1
---INS SimpleName@@MethodName:nextAsCollection @TO@ MethodDeclaration@@private, Collection<?>, MethodName:nextAsCollection, Iterator<Object> iterator,  @AT@ 8142 @LENGTH@ 16
---INS SingleVariableDeclaration@@Iterator<Object> iterator @TO@ MethodDeclaration@@private, Collection<?>, MethodName:nextAsCollection, Iterator<Object> iterator,  @AT@ 8159 @LENGTH@ 25
------INS ParameterizedType@@Iterator<Object> @TO@ SingleVariableDeclaration@@Iterator<Object> iterator @AT@ 8159 @LENGTH@ 16
---------INS SimpleType@@Iterator @TO@ ParameterizedType@@Iterator<Object> @AT@ 8159 @LENGTH@ 8
---------INS SimpleType@@Object @TO@ ParameterizedType@@Iterator<Object> @AT@ 8168 @LENGTH@ 6
------INS SimpleName@@iterator @TO@ SingleVariableDeclaration@@Iterator<Object> iterator @AT@ 8176 @LENGTH@ 8
---INS VariableDeclarationStatement@@Object next=iterator.next(); @TO@ MethodDeclaration@@private, Collection<?>, MethodName:nextAsCollection, Iterator<Object> iterator,  @AT@ 8197 @LENGTH@ 30
------INS SimpleType@@Object @TO@ VariableDeclarationStatement@@Object next=iterator.next(); @AT@ 8197 @LENGTH@ 6
------INS VariableDeclarationFragment@@next=iterator.next() @TO@ VariableDeclarationStatement@@Object next=iterator.next(); @AT@ 8204 @LENGTH@ 22
---------INS SimpleName@@next @TO@ VariableDeclarationFragment@@next=iterator.next() @AT@ 8204 @LENGTH@ 4
---------INS MethodInvocation@@iterator.next() @TO@ VariableDeclarationFragment@@next=iterator.next() @AT@ 8211 @LENGTH@ 15
------------INS SimpleName@@Name:iterator @TO@ MethodInvocation@@iterator.next() @AT@ 8211 @LENGTH@ 8
------------INS SimpleName@@MethodName:next:[] @TO@ MethodInvocation@@iterator.next() @AT@ 8220 @LENGTH@ 6
---INS IfStatement@@if (next instanceof Collection) {  return (Collection<?>)next;} else if (next.getClass().isArray()) {  return CollectionUtils.arrayToList(next);} @TO@ MethodDeclaration@@private, Collection<?>, MethodName:nextAsCollection, Iterator<Object> iterator,  @AT@ 8237 @LENGTH@ 186
------INS InstanceofExpression@@next instanceof Collection @TO@ IfStatement@@if (next instanceof Collection) {  return (Collection<?>)next;} else if (next.getClass().isArray()) {  return CollectionUtils.arrayToList(next);} @AT@ 8241 @LENGTH@ 26
---------INS SimpleName@@next @TO@ InstanceofExpression@@next instanceof Collection @AT@ 8241 @LENGTH@ 4
---------INS Instanceof@@instanceof @TO@ InstanceofExpression@@next instanceof Collection @AT@ 8246 @LENGTH@ 10
---------INS SimpleType@@Collection @TO@ InstanceofExpression@@next instanceof Collection @AT@ 8257 @LENGTH@ 10
------INS Block@@ThenBody:{  return (Collection<?>)next;} @TO@ IfStatement@@if (next instanceof Collection) {  return (Collection<?>)next;} else if (next.getClass().isArray()) {  return CollectionUtils.arrayToList(next);} @AT@ 8269 @LENGTH@ 52
---------INS ReturnStatement@@CastExpression:(Collection<?>)next @TO@ Block@@ThenBody:{  return (Collection<?>)next;} @AT@ 8283 @LENGTH@ 28
------------INS CastExpression@@(Collection<?>)next @TO@ ReturnStatement@@CastExpression:(Collection<?>)next @AT@ 8290 @LENGTH@ 20
---------------INS ParameterizedType@@Collection<?> @TO@ CastExpression@@(Collection<?>)next @AT@ 8291 @LENGTH@ 13
------------------INS SimpleType@@Collection @TO@ ParameterizedType@@Collection<?> @AT@ 8291 @LENGTH@ 10
------------------INS WildcardType@@? @TO@ ParameterizedType@@Collection<?> @AT@ 8302 @LENGTH@ 1
---------------INS SimpleName@@next @TO@ CastExpression@@(Collection<?>)next @AT@ 8306 @LENGTH@ 4
------INS Block@@ElseBody:if (next.getClass().isArray()) {  return CollectionUtils.arrayToList(next);} @TO@ IfStatement@@if (next instanceof Collection) {  return (Collection<?>)next;} else if (next.getClass().isArray()) {  return CollectionUtils.arrayToList(next);} @AT@ 8327 @LENGTH@ 96
---------INS IfStatement@@if (next.getClass().isArray()) {  return CollectionUtils.arrayToList(next);} @TO@ Block@@ElseBody:if (next.getClass().isArray()) {  return CollectionUtils.arrayToList(next);} @AT@ 8327 @LENGTH@ 96
------------INS MethodInvocation@@next.getClass().isArray() @TO@ IfStatement@@if (next.getClass().isArray()) {  return CollectionUtils.arrayToList(next);} @AT@ 8331 @LENGTH@ 25
---------------INS MethodInvocation@@MethodName:getClass:[] @TO@ MethodInvocation@@next.getClass().isArray() @AT@ 8331 @LENGTH@ 15
---------------INS SimpleName@@Name:next @TO@ MethodInvocation@@next.getClass().isArray() @AT@ 8331 @LENGTH@ 4
---------------INS SimpleName@@MethodName:isArray:[] @TO@ MethodInvocation@@next.getClass().isArray() @AT@ 8347 @LENGTH@ 9
------------INS Block@@ThenBody:{  return CollectionUtils.arrayToList(next);} @TO@ IfStatement@@if (next.getClass().isArray()) {  return CollectionUtils.arrayToList(next);} @AT@ 8358 @LENGTH@ 65
---------------INS ReturnStatement@@MethodInvocation:CollectionUtils.arrayToList(next) @TO@ Block@@ThenBody:{  return CollectionUtils.arrayToList(next);} @AT@ 8372 @LENGTH@ 41
------------------INS MethodInvocation@@CollectionUtils.arrayToList(next) @TO@ ReturnStatement@@MethodInvocation:CollectionUtils.arrayToList(next) @AT@ 8379 @LENGTH@ 33
---------------------INS SimpleName@@Name:CollectionUtils @TO@ MethodInvocation@@CollectionUtils.arrayToList(next) @AT@ 8379 @LENGTH@ 15
---------------------INS SimpleName@@MethodName:arrayToList:[next] @TO@ MethodInvocation@@CollectionUtils.arrayToList(next) @AT@ 8395 @LENGTH@ 17
------------------------INS SimpleName@@next @TO@ SimpleName@@MethodName:arrayToList:[next] @AT@ 8407 @LENGTH@ 4
---INS ReturnStatement@@MethodInvocation:Arrays.asList(next) @TO@ MethodDeclaration@@private, Collection<?>, MethodName:nextAsCollection, Iterator<Object> iterator,  @AT@ 8433 @LENGTH@ 27
------INS MethodInvocation@@Arrays.asList(next) @TO@ ReturnStatement@@MethodInvocation:Arrays.asList(next) @AT@ 8440 @LENGTH@ 19
---------INS SimpleName@@Name:Arrays @TO@ MethodInvocation@@Arrays.asList(next) @AT@ 8440 @LENGTH@ 6
---------INS SimpleName@@MethodName:asList:[next] @TO@ MethodInvocation@@Arrays.asList(next) @AT@ 8447 @LENGTH@ 12
------------INS SimpleName@@next @TO@ SimpleName@@MethodName:asList:[next] @AT@ 8454 @LENGTH@ 4


INS MethodDeclaration@@public, void, MethodName:executesFindByNullLastnameCorrectly, Exception,  @TO@ TypeDeclaration@@[@RunWith(SpringJUnit4ClassRunner.class), @ContextConfiguration(locations={"classpath:application-context.xml"}), @Transactional, public]UserRepositoryTests,  @AT@ 21170 @LENGTH@ 367
---INS Modifier@@public @TO@ MethodDeclaration@@public, void, MethodName:executesFindByNullLastnameCorrectly, Exception,  @AT@ 21170 @LENGTH@ 6
---INS PrimitiveType@@void @TO@ MethodDeclaration@@public, void, MethodName:executesFindByNullLastnameCorrectly, Exception,  @AT@ 21177 @LENGTH@ 4
---INS SimpleName@@MethodName:executesFindByNullLastnameCorrectly @TO@ MethodDeclaration@@public, void, MethodName:executesFindByNullLastnameCorrectly, Exception,  @AT@ 21182 @LENGTH@ 35
---INS SimpleType@@Exception @TO@ MethodDeclaration@@public, void, MethodName:executesFindByNullLastnameCorrectly, Exception,  @AT@ 21227 @LENGTH@ 9
---INS ExpressionStatement@@MethodInvocation:flushTestUsers() @TO@ MethodDeclaration@@public, void, MethodName:executesFindByNullLastnameCorrectly, Exception,  @AT@ 21250 @LENGTH@ 17
------INS MethodInvocation@@MethodName:flushTestUsers:[] @TO@ ExpressionStatement@@MethodInvocation:flushTestUsers() @AT@ 21250 @LENGTH@ 16
---INS VariableDeclarationStatement@@User forthUser=repository.save(new User("Foo",null,"email@address.com")); @TO@ MethodDeclaration@@public, void, MethodName:executesFindByNullLastnameCorrectly, Exception,  @AT@ 21277 @LENGTH@ 94
------INS SimpleType@@User @TO@ VariableDeclarationStatement@@User forthUser=repository.save(new User("Foo",null,"email@address.com")); @AT@ 21277 @LENGTH@ 4
------INS VariableDeclarationFragment@@forthUser=repository.save(new User("Foo",null,"email@address.com")) @TO@ VariableDeclarationStatement@@User forthUser=repository.save(new User("Foo",null,"email@address.com")); @AT@ 21282 @LENGTH@ 88
---------INS SimpleName@@forthUser @TO@ VariableDeclarationFragment@@forthUser=repository.save(new User("Foo",null,"email@address.com")) @AT@ 21282 @LENGTH@ 9
---------INS MethodInvocation@@repository.save(new User("Foo",null,"email@address.com")) @TO@ VariableDeclarationFragment@@forthUser=repository.save(new User("Foo",null,"email@address.com")) @AT@ 21311 @LENGTH@ 59
------------INS SimpleName@@Name:repository @TO@ MethodInvocation@@repository.save(new User("Foo",null,"email@address.com")) @AT@ 21311 @LENGTH@ 10
------------INS SimpleName@@MethodName:save:[new User("Foo",null,"email@address.com")] @TO@ MethodInvocation@@repository.save(new User("Foo",null,"email@address.com")) @AT@ 21322 @LENGTH@ 48
---------------INS ClassInstanceCreation@@User["Foo", null, "email@address.com"] @TO@ SimpleName@@MethodName:save:[new User("Foo",null,"email@address.com")] @AT@ 21327 @LENGTH@ 42
------------------INS New@@new @TO@ ClassInstanceCreation@@User["Foo", null, "email@address.com"] @AT@ 21327 @LENGTH@ 3
------------------INS SimpleType@@User @TO@ ClassInstanceCreation@@User["Foo", null, "email@address.com"] @AT@ 21331 @LENGTH@ 4
------------------INS StringLiteral@@"Foo" @TO@ ClassInstanceCreation@@User["Foo", null, "email@address.com"] @AT@ 21336 @LENGTH@ 5
------------------INS NullLiteral@@null @TO@ ClassInstanceCreation@@User["Foo", null, "email@address.com"] @AT@ 21343 @LENGTH@ 4
------------------INS StringLiteral@@"email@address.com" @TO@ ClassInstanceCreation@@User["Foo", null, "email@address.com"] @AT@ 21349 @LENGTH@ 19
---INS VariableDeclarationStatement@@List<User> result=repository.findByLastnameNull(); @TO@ MethodDeclaration@@public, void, MethodName:executesFindByNullLastnameCorrectly, Exception,  @AT@ 21383 @LENGTH@ 52
------INS ParameterizedType@@List<User> @TO@ VariableDeclarationStatement@@List<User> result=repository.findByLastnameNull(); @AT@ 21383 @LENGTH@ 10
---------INS SimpleType@@List @TO@ ParameterizedType@@List<User> @AT@ 21383 @LENGTH@ 4
---------INS SimpleType@@User @TO@ ParameterizedType@@List<User> @AT@ 21388 @LENGTH@ 4
------INS VariableDeclarationFragment@@result=repository.findByLastnameNull() @TO@ VariableDeclarationStatement@@List<User> result=repository.findByLastnameNull(); @AT@ 21394 @LENGTH@ 40
---------INS SimpleName@@result @TO@ VariableDeclarationFragment@@result=repository.findByLastnameNull() @AT@ 21394 @LENGTH@ 6
---------INS MethodInvocation@@repository.findByLastnameNull() @TO@ VariableDeclarationFragment@@result=repository.findByLastnameNull() @AT@ 21403 @LENGTH@ 31
------------INS SimpleName@@Name:repository @TO@ MethodInvocation@@repository.findByLastnameNull() @AT@ 21403 @LENGTH@ 10
------------INS SimpleName@@MethodName:findByLastnameNull:[] @TO@ MethodInvocation@@repository.findByLastnameNull() @AT@ 21414 @LENGTH@ 20
---INS ExpressionStatement@@MethodInvocation:assertThat(result.size(),is(1)) @TO@ MethodDeclaration@@public, void, MethodName:executesFindByNullLastnameCorrectly, Exception,  @AT@ 21447 @LENGTH@ 33
------INS MethodInvocation@@assertThat(result.size(),is(1)) @TO@ ExpressionStatement@@MethodInvocation:assertThat(result.size(),is(1)) @AT@ 21447 @LENGTH@ 32
---------INS SimpleName@@MethodName:assertThat:[result.size(), is(1)] @TO@ MethodInvocation@@assertThat(result.size(),is(1)) @AT@ 21447 @LENGTH@ 32
------------INS MethodInvocation@@result.size() @TO@ SimpleName@@MethodName:assertThat:[result.size(), is(1)] @AT@ 21458 @LENGTH@ 13
---------------INS SimpleName@@Name:result @TO@ MethodInvocation@@result.size() @AT@ 21458 @LENGTH@ 6
---------------INS SimpleName@@MethodName:size:[] @TO@ MethodInvocation@@result.size() @AT@ 21465 @LENGTH@ 6
------------INS MethodInvocation@@is(1) @TO@ SimpleName@@MethodName:assertThat:[result.size(), is(1)] @AT@ 21473 @LENGTH@ 5
---------------INS SimpleName@@MethodName:is:[1] @TO@ MethodInvocation@@is(1) @AT@ 21473 @LENGTH@ 5
------------------INS NumberLiteral@@1 @TO@ SimpleName@@MethodName:is:[1] @AT@ 21476 @LENGTH@ 1
---INS ExpressionStatement@@MethodInvocation:assertThat(result,hasItems(forthUser)) @TO@ MethodDeclaration@@public, void, MethodName:executesFindByNullLastnameCorrectly, Exception,  @AT@ 21490 @LENGTH@ 40
------INS MethodInvocation@@assertThat(result,hasItems(forthUser)) @TO@ ExpressionStatement@@MethodInvocation:assertThat(result,hasItems(forthUser)) @AT@ 21490 @LENGTH@ 39
---------INS SimpleName@@MethodName:assertThat:[result, hasItems(forthUser)] @TO@ MethodInvocation@@assertThat(result,hasItems(forthUser)) @AT@ 21490 @LENGTH@ 39
------------INS SimpleName@@result @TO@ SimpleName@@MethodName:assertThat:[result, hasItems(forthUser)] @AT@ 21501 @LENGTH@ 6
------------INS MethodInvocation@@hasItems(forthUser) @TO@ SimpleName@@MethodName:assertThat:[result, hasItems(forthUser)] @AT@ 21509 @LENGTH@ 19
---------------INS SimpleName@@MethodName:hasItems:[forthUser] @TO@ MethodInvocation@@hasItems(forthUser) @AT@ 21509 @LENGTH@ 19
------------------INS SimpleName@@forthUser @TO@ SimpleName@@MethodName:hasItems:[forthUser] @AT@ 21518 @LENGTH@ 9


UPD ExpressionStatement@@Assignment:server=EmbeddedServerFactory.create(jbossHomeDir,sysprops,System.getenv()) @TO@ Assignment:server=EmbeddedServerFactory.create(jbossHomeDir,sysprops,System.getenv(),"org.jboss.logmanager") @AT@ 3157 @LENGTH@ 79
---UPD Assignment@@server=EmbeddedServerFactory.create(jbossHomeDir,sysprops,System.getenv()) @TO@ server=EmbeddedServerFactory.create(jbossHomeDir,sysprops,System.getenv(),"org.jboss.logmanager") @AT@ 3157 @LENGTH@ 78
------UPD MethodInvocation@@EmbeddedServerFactory.create(jbossHomeDir,sysprops,System.getenv()) @TO@ EmbeddedServerFactory.create(jbossHomeDir,sysprops,System.getenv(),"org.jboss.logmanager") @AT@ 3166 @LENGTH@ 69
---------UPD SimpleName@@MethodName:create:[jbossHomeDir, sysprops, System.getenv()] @TO@ MethodName:create:[jbossHomeDir, sysprops, System.getenv(), "org.jboss.logmanager"] @AT@ 3188 @LENGTH@ 47
------------INS StringLiteral@@"org.jboss.logmanager" @TO@ SimpleName@@MethodName:create:[jbossHomeDir, sysprops, System.getenv()] @AT@ 3236 @LENGTH@ 22


UPD TryStatement@@try {  InputStream input=archive.as(ZipExporter.class).exportZip();  DeploymentPlanBuilder builder=deploymentManager.newDeploymentPlan();  builder=builder.add(archive.getName(),input).andDeploy();  DeploymentPlan plan=builder.build();  DeploymentAction deployAction=builder.getLastAction();  String runtimeName=executeDeploymentPlan(plan,deployAction);  registry.put(archive,runtimeName);  return getContainerMethodExecutor(context);} catch (Exception e) {  throw new DeploymentException("Could not deploy to container",e);} @TO@ try {  InputStream input=archive.as(ZipExporter.class).exportZip();  DeploymentPlanBuilder builder=deploymentManager.newDeploymentPlan();  builder=builder.add(archive.getName(),input).andDeploy();  DeploymentPlan plan=builder.build();  DeploymentAction deployAction=builder.getLastAction();  executeDeploymentPlan(plan,deployAction,archive);  return getContainerMethodExecutor(context);} catch (Exception e) {  throw new DeploymentException("Could not deploy to container",e);} @AT@ 3889 @LENGTH@ 658
---INS ExpressionStatement@@MethodInvocation:executeDeploymentPlan(plan,deployAction,archive) @TO@ TryStatement@@try {  InputStream input=archive.as(ZipExporter.class).exportZip();  DeploymentPlanBuilder builder=deploymentManager.newDeploymentPlan();  builder=builder.add(archive.getName(),input).andDeploy();  DeploymentPlan plan=builder.build();  DeploymentAction deployAction=builder.getLastAction();  String runtimeName=executeDeploymentPlan(plan,deployAction);  registry.put(archive,runtimeName);  return getContainerMethodExecutor(context);} catch (Exception e) {  throw new DeploymentException("Could not deploy to container",e);} @AT@ 4257 @LENGTH@ 50
------INS MethodInvocation@@executeDeploymentPlan(plan,deployAction,archive) @TO@ ExpressionStatement@@MethodInvocation:executeDeploymentPlan(plan,deployAction,archive) @AT@ 4257 @LENGTH@ 49
---------MOV SimpleName@@MethodName:executeDeploymentPlan:[plan, deployAction] @TO@ MethodInvocation@@executeDeploymentPlan(plan,deployAction,archive) @AT@ 4279 @LENGTH@ 41
------------INS SimpleName@@archive @TO@ SimpleName@@MethodName:executeDeploymentPlan:[plan, deployAction] @AT@ 4298 @LENGTH@ 7
---DEL VariableDeclarationStatement@@String runtimeName=executeDeploymentPlan(plan,deployAction); @AT@ 4258 @LENGTH@ 63
------DEL SimpleType@@String @AT@ 4258 @LENGTH@ 6
------DEL VariableDeclarationFragment@@runtimeName=executeDeploymentPlan(plan,deployAction) @AT@ 4265 @LENGTH@ 55
---------DEL SimpleName@@runtimeName @AT@ 4265 @LENGTH@ 11
---------DEL MethodInvocation@@executeDeploymentPlan(plan,deployAction) @AT@ 4279 @LENGTH@ 41
---DEL ExpressionStatement@@MethodInvocation:registry.put(archive,runtimeName) @AT@ 4334 @LENGTH@ 35
------DEL MethodInvocation@@registry.put(archive,runtimeName) @AT@ 4334 @LENGTH@ 34
---------DEL SimpleName@@Name:registry @AT@ 4334 @LENGTH@ 8
---------DEL SimpleName@@MethodName:put:[archive, runtimeName] @AT@ 4343 @LENGTH@ 25
------------DEL SimpleName@@archive @AT@ 4347 @LENGTH@ 7
------------DEL SimpleName@@runtimeName @AT@ 4356 @LENGTH@ 11


UPD ReturnStatement@@InfixExpression:other instanceof ParamList && equals((ParamList)other) @TO@ InfixExpression:other instanceof ParamNameList && equals((ParamNameList)other) @AT@ 16663 @LENGTH@ 62
---UPD InfixExpression@@other instanceof ParamList && equals((ParamList)other) @TO@ other instanceof ParamNameList && equals((ParamNameList)other) @AT@ 16670 @LENGTH@ 54
------UPD InstanceofExpression@@other instanceof ParamList @TO@ other instanceof ParamNameList @AT@ 16670 @LENGTH@ 26
---------UPD SimpleType@@ParamList @TO@ ParamNameList @AT@ 16687 @LENGTH@ 9
------UPD MethodInvocation@@equals((ParamList)other) @TO@ equals((ParamNameList)other) @AT@ 16700 @LENGTH@ 24
---------UPD SimpleName@@MethodName:equals:[(ParamList)other] @TO@ MethodName:equals:[(ParamNameList)other] @AT@ 16700 @LENGTH@ 24
------------UPD CastExpression@@(ParamList)other @TO@ (ParamNameList)other @AT@ 16707 @LENGTH@ 16
---------------UPD SimpleType@@ParamList @TO@ ParamNameList @AT@ 16708 @LENGTH@ 9


UPD IfStatement@@if (deploymentUnit.getAttachment(Attachments.SERVICES).getServiceImplementations(ServiceActivator.class.getName()).isEmpty()) return; @TO@ if (servicesAttachment == null || servicesAttachment.getServiceImplementations(ServiceActivator.class.getName()).isEmpty()) return; @AT@ 2212 @LENGTH@ 144
---UPD MethodInvocation@@deploymentUnit.getAttachment(Attachments.SERVICES).getServiceImplementations(ServiceActivator.class.getName()).isEmpty() @TO@ servicesAttachment.getServiceImplementations(ServiceActivator.class.getName()).isEmpty() @AT@ 2215 @LENGTH@ 120
---INS InfixExpression@@servicesAttachment == null || servicesAttachment.getServiceImplementations(ServiceActivator.class.getName()).isEmpty() @TO@ IfStatement@@if (deploymentUnit.getAttachment(Attachments.SERVICES).getServiceImplementations(ServiceActivator.class.getName()).isEmpty()) return; @AT@ 2379 @LENGTH@ 118
------MOV MethodInvocation@@deploymentUnit.getAttachment(Attachments.SERVICES).getServiceImplementations(ServiceActivator.class.getName()).isEmpty() @TO@ InfixExpression@@servicesAttachment == null || servicesAttachment.getServiceImplementations(ServiceActivator.class.getName()).isEmpty() @AT@ 2215 @LENGTH@ 120
---------DEL MethodInvocation@@MethodName:getAttachment:[Attachments.SERVICES] @AT@ 2215 @LENGTH@ 50
------------DEL QualifiedName@@Attachments.SERVICES @AT@ 2244 @LENGTH@ 20
---------------DEL SimpleName@@Attachments @AT@ 2244 @LENGTH@ 11
---------------DEL SimpleName@@SERVICES @AT@ 2256 @LENGTH@ 8
---------DEL SimpleName@@Name:deploymentUnit @AT@ 2215 @LENGTH@ 14
---------INS SimpleName@@Name:servicesAttachment @TO@ MethodInvocation@@deploymentUnit.getAttachment(Attachments.SERVICES).getServiceImplementations(ServiceActivator.class.getName()).isEmpty() @AT@ 2409 @LENGTH@ 18
------INS InfixExpression@@servicesAttachment == null @TO@ InfixExpression@@servicesAttachment == null || servicesAttachment.getServiceImplementations(ServiceActivator.class.getName()).isEmpty() @AT@ 2379 @LENGTH@ 26
---------INS SimpleName@@servicesAttachment @TO@ InfixExpression@@servicesAttachment == null @AT@ 2379 @LENGTH@ 18
---------INS Operator@@== @TO@ InfixExpression@@servicesAttachment == null @AT@ 2397 @LENGTH@ 2
---------INS NullLiteral@@null @TO@ InfixExpression@@servicesAttachment == null @AT@ 2401 @LENGTH@ 4
------INS Operator@@|| @TO@ InfixExpression@@servicesAttachment == null || servicesAttachment.getServiceImplementations(ServiceActivator.class.getName()).isEmpty() @AT@ 2405 @LENGTH@ 2


UPD VariableDeclarationStatement@@final ServiceName deploymentUnitServiceName=Services.JBOSS_DEPLOYMENT_UNIT.append(deploymentUnitName); @TO@ final ServiceName deploymentUnitServiceName=Services.JBOSS_DEPLOYMENT.append(deploymentUnitName); @AT@ 3305 @LENGTH@ 104
---UPD VariableDeclarationFragment@@deploymentUnitServiceName=Services.JBOSS_DEPLOYMENT_UNIT.append(deploymentUnitName) @TO@ deploymentUnitServiceName=Services.JBOSS_DEPLOYMENT.append(deploymentUnitName) @AT@ 3323 @LENGTH@ 85
------UPD MethodInvocation@@Services.JBOSS_DEPLOYMENT_UNIT.append(deploymentUnitName) @TO@ Services.JBOSS_DEPLOYMENT.append(deploymentUnitName) @AT@ 3351 @LENGTH@ 57
---------UPD QualifiedName@@Name:Services.JBOSS_DEPLOYMENT_UNIT @TO@ Name:Services.JBOSS_DEPLOYMENT @AT@ 3351 @LENGTH@ 30


UPD TryStatement@@try {  final BatchBuilder builder=updateContext.getServiceTarget();  final AsyncHandlerService service=new AsyncHandlerService();  final ServiceBuilder<Handler> serviceBuilder=builder.addService(LogServices.handlerName(getName()),service);  final List<InjectedValue<Handler>> list=new ArrayList<InjectedValue<Handler>>();  for (  String handlerName : getSubhandlers()) {    final InjectedValue<Handler> injectedValue=new InjectedValue<Handler>();    serviceBuilder.addDependency(LogServices.handlerName(handlerName),Handler.class,injectedValue);    list.add(injectedValue);  }  service.addHandlers(list);  service.setQueueLength(queueLength);  service.setLevel(Level.parse(getLevelName()));  service.setOverflowAction(overflowAction);  serviceBuilder.setInitialMode(ServiceController.Mode.ACTIVE);  serviceBuilder.addListener(new UpdateResultHandler.ServiceStartListener<P>(resultHandler,param));  serviceBuilder.install();} catch (Throwable t) {  resultHandler.handleFailure(t,param);  return;} @TO@ try {  final ServiceTarget target=updateContext.getServiceTarget();  final AsyncHandlerService service=new AsyncHandlerService();  final ServiceBuilder<Handler> serviceBuilder=target.addService(LogServices.handlerName(getName()),service);  final List<InjectedValue<Handler>> list=new ArrayList<InjectedValue<Handler>>();  for (  String handlerName : getSubhandlers()) {    final InjectedValue<Handler> injectedValue=new InjectedValue<Handler>();    serviceBuilder.addDependency(LogServices.handlerName(handlerName),Handler.class,injectedValue);    list.add(injectedValue);  }  service.addHandlers(list);  service.setQueueLength(queueLength);  service.setLevel(Level.parse(getLevelName()));  service.setOverflowAction(overflowAction);  serviceBuilder.setInitialMode(ServiceController.Mode.ACTIVE);  serviceBuilder.addListener(new UpdateResultHandler.ServiceStartListener<P>(resultHandler,param));  serviceBuilder.install();} catch (Throwable t) {  resultHandler.handleFailure(t,param);  return;} @AT@ 2685 @LENGTH@ 1230
---UPD VariableDeclarationStatement@@final BatchBuilder builder=updateContext.getServiceTarget(); @TO@ final ServiceTarget target=updateContext.getServiceTarget(); @AT@ 2703 @LENGTH@ 62
------UPD SimpleType@@BatchBuilder @TO@ ServiceTarget @AT@ 2709 @LENGTH@ 12
------UPD VariableDeclarationFragment@@builder=updateContext.getServiceTarget() @TO@ target=updateContext.getServiceTarget() @AT@ 2722 @LENGTH@ 42
---------UPD SimpleName@@builder @TO@ target @AT@ 2722 @LENGTH@ 7
---UPD VariableDeclarationStatement@@final ServiceBuilder<Handler> serviceBuilder=builder.addService(LogServices.handlerName(getName()),service); @TO@ final ServiceBuilder<Handler> serviceBuilder=target.addService(LogServices.handlerName(getName()),service); @AT@ 2853 @LENGTH@ 111
------UPD VariableDeclarationFragment@@serviceBuilder=builder.addService(LogServices.handlerName(getName()),service) @TO@ serviceBuilder=target.addService(LogServices.handlerName(getName()),service) @AT@ 2883 @LENGTH@ 80
---------UPD MethodInvocation@@builder.addService(LogServices.handlerName(getName()),service) @TO@ target.addService(LogServices.handlerName(getName()),service) @AT@ 2900 @LENGTH@ 63
------------UPD SimpleName@@Name:builder @TO@ Name:target @AT@ 2900 @LENGTH@ 7


INS IfStatement@@if (null != object) {  maybeEmitEvent(new AfterLoadEvent<DBObject>(object));} @TO@ MethodDeclaration@@public, T, MethodName:doWith, DBObject object,  @AT@ 44635 @LENGTH@ 91
---INS InfixExpression@@null != object @TO@ IfStatement@@if (null != object) {  maybeEmitEvent(new AfterLoadEvent<DBObject>(object));} @AT@ 44639 @LENGTH@ 14
------INS NullLiteral@@null @TO@ InfixExpression@@null != object @AT@ 44639 @LENGTH@ 4
------INS Operator@@!= @TO@ InfixExpression@@null != object @AT@ 44643 @LENGTH@ 2
------INS SimpleName@@object @TO@ InfixExpression@@null != object @AT@ 44647 @LENGTH@ 6
---INS Block@@ThenBody:{  maybeEmitEvent(new AfterLoadEvent<DBObject>(object));} @TO@ IfStatement@@if (null != object) {  maybeEmitEvent(new AfterLoadEvent<DBObject>(object));} @AT@ 44655 @LENGTH@ 71
------MOV ExpressionStatement@@MethodInvocation:maybeEmitEvent(new AfterLoadEvent<DBObject>(object)) @TO@ Block@@ThenBody:{  maybeEmitEvent(new AfterLoadEvent<DBObject>(object));} @AT@ 44635 @LENGTH@ 53


MOV ExpressionStatement@@SuperMethodInvocation:super.setUp() @TO@ MethodDeclaration@@public, void, MethodName:setUp, Exception,  @AT@ 1343 @LENGTH@ 14


UPD FieldDeclaration@@static, final, String, [SETTXQUERTTIMEOUT="set-tx-quert-timeout"] @TO@ static, final, String, [SETTXQUERYTIMEOUT="set-tx-query-timeout"] @AT@ 3124 @LENGTH@ 63
---UPD VariableDeclarationFragment@@SETTXQUERTTIMEOUT="set-tx-quert-timeout" @TO@ SETTXQUERYTIMEOUT="set-tx-query-timeout" @AT@ 3144 @LENGTH@ 42
------UPD SimpleName@@SETTXQUERTTIMEOUT @TO@ SETTXQUERYTIMEOUT @AT@ 3144 @LENGTH@ 17
------UPD StringLiteral@@"set-tx-quert-timeout" @TO@ "set-tx-query-timeout" @AT@ 3164 @LENGTH@ 22


UPD MethodDeclaration@@public, void, MethodName:setRepositoryInterface, Class<T> repositoryInterface,  @TO@ public, void, MethodName:setRepositoryInterface, Class<? extends T> repositoryInterface,  @AT@ 2102 @LENGTH@ 174
---UPD SingleVariableDeclaration@@Class<T> repositoryInterface @TO@ Class<? extends T> repositoryInterface @AT@ 2137 @LENGTH@ 28
------UPD ParameterizedType@@Class<T> @TO@ Class<? extends T> @AT@ 2137 @LENGTH@ 8
---------INS WildcardType@@? @TO@ ParameterizedType@@Class<T> @AT@ 2143 @LENGTH@ 11
---------DEL SimpleType@@T @AT@ 2143 @LENGTH@ 1


UPD ExpressionStatement@@MethodInvocation:setSocketThreads.get(OP).set("set-server-management-socket-threads") @TO@ MethodInvocation:setSocketThreads.get(OP).set("write-server-management-socket-threads") @AT@ 14616 @LENGTH@ 69
---UPD MethodInvocation@@setSocketThreads.get(OP).set("set-server-management-socket-threads") @TO@ setSocketThreads.get(OP).set("write-server-management-socket-threads") @AT@ 14616 @LENGTH@ 68
------UPD SimpleName@@MethodName:set:["set-server-management-socket-threads"] @TO@ MethodName:set:["write-server-management-socket-threads"] @AT@ 14641 @LENGTH@ 43
---------UPD StringLiteral@@"set-server-management-socket-threads" @TO@ "write-server-management-socket-threads" @AT@ 14645 @LENGTH@ 38


UPD ReturnStatement@@InfixExpression:base + File.separatorChar + relative @TO@ InfixExpression:base + File.separatorChar + relativePath @AT@ 4035 @LENGTH@ 44
---UPD InfixExpression@@base + File.separatorChar + relative @TO@ base + File.separatorChar + relativePath @AT@ 4042 @LENGTH@ 36
------UPD SimpleName@@relative @TO@ relativePath @AT@ 4070 @LENGTH@ 8


INS MethodDeclaration@@public, ModelNode, MethodName:getModelDescription, Locale locale,  @TO@ TypeDeclaration@@[public]DeploymentRemoveHandler, [ModelRemoveOperationHandler] @AT@ 3932 @LENGTH@ 134
---INS Modifier@@public @TO@ MethodDeclaration@@public, ModelNode, MethodName:getModelDescription, Locale locale,  @AT@ 3932 @LENGTH@ 6
---INS SimpleType@@ModelNode @TO@ MethodDeclaration@@public, ModelNode, MethodName:getModelDescription, Locale locale,  @AT@ 3939 @LENGTH@ 9
---INS SimpleName@@MethodName:getModelDescription @TO@ MethodDeclaration@@public, ModelNode, MethodName:getModelDescription, Locale locale,  @AT@ 3949 @LENGTH@ 19
---INS SingleVariableDeclaration@@Locale locale @TO@ MethodDeclaration@@public, ModelNode, MethodName:getModelDescription, Locale locale,  @AT@ 3969 @LENGTH@ 13
------INS SimpleType@@Locale @TO@ SingleVariableDeclaration@@Locale locale @AT@ 3969 @LENGTH@ 6
------INS SimpleName@@locale @TO@ SingleVariableDeclaration@@Locale locale @AT@ 3976 @LENGTH@ 6
---INS ReturnStatement@@MethodInvocation:DomainRootDescription.getDeploymentRemoveOperation(locale) @TO@ MethodDeclaration@@public, ModelNode, MethodName:getModelDescription, Locale locale,  @AT@ 3994 @LENGTH@ 66
------INS MethodInvocation@@DomainRootDescription.getDeploymentRemoveOperation(locale) @TO@ ReturnStatement@@MethodInvocation:DomainRootDescription.getDeploymentRemoveOperation(locale) @AT@ 4001 @LENGTH@ 58
---------INS SimpleName@@Name:DomainRootDescription @TO@ MethodInvocation@@DomainRootDescription.getDeploymentRemoveOperation(locale) @AT@ 4001 @LENGTH@ 21
---------INS SimpleName@@MethodName:getDeploymentRemoveOperation:[locale] @TO@ MethodInvocation@@DomainRootDescription.getDeploymentRemoveOperation(locale) @AT@ 4023 @LENGTH@ 36
------------INS SimpleName@@locale @TO@ SimpleName@@MethodName:getDeploymentRemoveOperation:[locale] @AT@ 4052 @LENGTH@ 6


INS MethodDeclaration@@public, void, MethodName:undeploy, final DeploymentUnit context,  @TO@ TypeDeclaration@@[public]WebFragmentParsingDeploymentProcessor, [DeploymentUnitProcessor] @AT@ 4219 @LENGTH@ 58
---INS Modifier@@public @TO@ MethodDeclaration@@public, void, MethodName:undeploy, final DeploymentUnit context,  @AT@ 4219 @LENGTH@ 6
---INS PrimitiveType@@void @TO@ MethodDeclaration@@public, void, MethodName:undeploy, final DeploymentUnit context,  @AT@ 4226 @LENGTH@ 4
---INS SimpleName@@MethodName:undeploy @TO@ MethodDeclaration@@public, void, MethodName:undeploy, final DeploymentUnit context,  @AT@ 4231 @LENGTH@ 8
---INS SingleVariableDeclaration@@final DeploymentUnit context @TO@ MethodDeclaration@@public, void, MethodName:undeploy, final DeploymentUnit context,  @AT@ 4240 @LENGTH@ 28
------INS Modifier@@final @TO@ SingleVariableDeclaration@@final DeploymentUnit context @AT@ 4240 @LENGTH@ 5
------INS SimpleType@@DeploymentUnit @TO@ SingleVariableDeclaration@@final DeploymentUnit context @AT@ 4246 @LENGTH@ 14
------INS SimpleName@@context @TO@ SingleVariableDeclaration@@final DeploymentUnit context @AT@ 4261 @LENGTH@ 7


INS ExpressionStatement@@MethodInvocation:ctx.addDeploymentProcessor(Phase.PARSE,Phase.PARSE_EAR_CONTEXT_ROOT,new EarContextRootProcessor()) @TO@ MethodDeclaration@@public, void, MethodName:execute, RuntimeTaskContext context, OperationFailedException,  @AT@ 6910 @LENGTH@ 101
---INS MethodInvocation@@ctx.addDeploymentProcessor(Phase.PARSE,Phase.PARSE_EAR_CONTEXT_ROOT,new EarContextRootProcessor()) @TO@ ExpressionStatement@@MethodInvocation:ctx.addDeploymentProcessor(Phase.PARSE,Phase.PARSE_EAR_CONTEXT_ROOT,new EarContextRootProcessor()) @AT@ 6910 @LENGTH@ 100
------INS SimpleName@@Name:ctx @TO@ MethodInvocation@@ctx.addDeploymentProcessor(Phase.PARSE,Phase.PARSE_EAR_CONTEXT_ROOT,new EarContextRootProcessor()) @AT@ 6910 @LENGTH@ 3
------INS SimpleName@@MethodName:addDeploymentProcessor:[Phase.PARSE, Phase.PARSE_EAR_CONTEXT_ROOT, new EarContextRootProcessor()] @TO@ MethodInvocation@@ctx.addDeploymentProcessor(Phase.PARSE,Phase.PARSE_EAR_CONTEXT_ROOT,new EarContextRootProcessor()) @AT@ 6914 @LENGTH@ 96
---------INS QualifiedName@@Phase.PARSE @TO@ SimpleName@@MethodName:addDeploymentProcessor:[Phase.PARSE, Phase.PARSE_EAR_CONTEXT_ROOT, new EarContextRootProcessor()] @AT@ 6937 @LENGTH@ 11
------------INS SimpleName@@Phase @TO@ QualifiedName@@Phase.PARSE @AT@ 6937 @LENGTH@ 5
------------INS SimpleName@@PARSE @TO@ QualifiedName@@Phase.PARSE @AT@ 6943 @LENGTH@ 5
---------INS QualifiedName@@Phase.PARSE_EAR_CONTEXT_ROOT @TO@ SimpleName@@MethodName:addDeploymentProcessor:[Phase.PARSE, Phase.PARSE_EAR_CONTEXT_ROOT, new EarContextRootProcessor()] @AT@ 6950 @LENGTH@ 28
------------INS SimpleName@@Phase @TO@ QualifiedName@@Phase.PARSE_EAR_CONTEXT_ROOT @AT@ 6950 @LENGTH@ 5
------------INS SimpleName@@PARSE_EAR_CONTEXT_ROOT @TO@ QualifiedName@@Phase.PARSE_EAR_CONTEXT_ROOT @AT@ 6956 @LENGTH@ 22
---------INS ClassInstanceCreation@@EarContextRootProcessor[] @TO@ SimpleName@@MethodName:addDeploymentProcessor:[Phase.PARSE, Phase.PARSE_EAR_CONTEXT_ROOT, new EarContextRootProcessor()] @AT@ 6980 @LENGTH@ 29
------------INS New@@new @TO@ ClassInstanceCreation@@EarContextRootProcessor[] @AT@ 6980 @LENGTH@ 3
------------INS SimpleType@@EarContextRootProcessor @TO@ ClassInstanceCreation@@EarContextRootProcessor[] @AT@ 6984 @LENGTH@ 23


INS MethodDeclaration@@public, Set<String>, MethodName:getInititalEntityClasses, Element element, BeanDefinitionBuilder builder,  @TO@ TypeDeclaration@@[public]MongoMappingConverterParser, AbstractBeanDefinitionParser @AT@ 4847 @LENGTH@ 764
---INS Modifier@@public @TO@ MethodDeclaration@@public, Set<String>, MethodName:getInititalEntityClasses, Element element, BeanDefinitionBuilder builder,  @AT@ 4847 @LENGTH@ 6
---INS ParameterizedType@@Set<String> @TO@ MethodDeclaration@@public, Set<String>, MethodName:getInititalEntityClasses, Element element, BeanDefinitionBuilder builder,  @AT@ 4854 @LENGTH@ 11
------INS SimpleType@@Set @TO@ ParameterizedType@@Set<String> @AT@ 4854 @LENGTH@ 3
------INS SimpleType@@String @TO@ ParameterizedType@@Set<String> @AT@ 4858 @LENGTH@ 6
---INS SimpleName@@MethodName:getInititalEntityClasses @TO@ MethodDeclaration@@public, Set<String>, MethodName:getInititalEntityClasses, Element element, BeanDefinitionBuilder builder,  @AT@ 4866 @LENGTH@ 24
---INS SingleVariableDeclaration@@Element element @TO@ MethodDeclaration@@public, Set<String>, MethodName:getInititalEntityClasses, Element element, BeanDefinitionBuilder builder,  @AT@ 4891 @LENGTH@ 15
------INS SimpleType@@Element @TO@ SingleVariableDeclaration@@Element element @AT@ 4891 @LENGTH@ 7
------INS SimpleName@@element @TO@ SingleVariableDeclaration@@Element element @AT@ 4899 @LENGTH@ 7
---INS SingleVariableDeclaration@@BeanDefinitionBuilder builder @TO@ MethodDeclaration@@public, Set<String>, MethodName:getInititalEntityClasses, Element element, BeanDefinitionBuilder builder,  @AT@ 4908 @LENGTH@ 29
------INS SimpleType@@BeanDefinitionBuilder @TO@ SingleVariableDeclaration@@BeanDefinitionBuilder builder @AT@ 4908 @LENGTH@ 21
------INS SimpleName@@builder @TO@ SingleVariableDeclaration@@BeanDefinitionBuilder builder @AT@ 4930 @LENGTH@ 7
---INS VariableDeclarationStatement@@String basePackage=element.getAttribute(BASE_PACKAGE); @TO@ MethodDeclaration@@public, Set<String>, MethodName:getInititalEntityClasses, Element element, BeanDefinitionBuilder builder,  @AT@ 4950 @LENGTH@ 56
------INS SimpleType@@String @TO@ VariableDeclarationStatement@@String basePackage=element.getAttribute(BASE_PACKAGE); @AT@ 4950 @LENGTH@ 6
------INS VariableDeclarationFragment@@basePackage=element.getAttribute(BASE_PACKAGE) @TO@ VariableDeclarationStatement@@String basePackage=element.getAttribute(BASE_PACKAGE); @AT@ 4957 @LENGTH@ 48
---------INS SimpleName@@basePackage @TO@ VariableDeclarationFragment@@basePackage=element.getAttribute(BASE_PACKAGE) @AT@ 4957 @LENGTH@ 11
---------INS MethodInvocation@@element.getAttribute(BASE_PACKAGE) @TO@ VariableDeclarationFragment@@basePackage=element.getAttribute(BASE_PACKAGE) @AT@ 4971 @LENGTH@ 34
------------INS SimpleName@@Name:element @TO@ MethodInvocation@@element.getAttribute(BASE_PACKAGE) @AT@ 4971 @LENGTH@ 7
------------INS SimpleName@@MethodName:getAttribute:[BASE_PACKAGE] @TO@ MethodInvocation@@element.getAttribute(BASE_PACKAGE) @AT@ 4979 @LENGTH@ 26
---------------INS SimpleName@@BASE_PACKAGE @TO@ SimpleName@@MethodName:getAttribute:[BASE_PACKAGE] @AT@ 4992 @LENGTH@ 12
---INS IfStatement@@if (!StringUtils.hasText(basePackage)) {  return null;} @TO@ MethodDeclaration@@public, Set<String>, MethodName:getInititalEntityClasses, Element element, BeanDefinitionBuilder builder,  @AT@ 5016 @LENGTH@ 65
------INS PrefixExpression@@!StringUtils.hasText(basePackage) @TO@ IfStatement@@if (!StringUtils.hasText(basePackage)) {  return null;} @AT@ 5020 @LENGTH@ 33
---------INS Operator@@! @TO@ PrefixExpression@@!StringUtils.hasText(basePackage) @AT@ 5020 @LENGTH@ 1
---------INS MethodInvocation@@StringUtils.hasText(basePackage) @TO@ PrefixExpression@@!StringUtils.hasText(basePackage) @AT@ 5021 @LENGTH@ 32
------------INS SimpleName@@Name:StringUtils @TO@ MethodInvocation@@StringUtils.hasText(basePackage) @AT@ 5021 @LENGTH@ 11
------------INS SimpleName@@MethodName:hasText:[basePackage] @TO@ MethodInvocation@@StringUtils.hasText(basePackage) @AT@ 5033 @LENGTH@ 20
---------------INS SimpleName@@basePackage @TO@ SimpleName@@MethodName:hasText:[basePackage] @AT@ 5041 @LENGTH@ 11
------INS Block@@ThenBody:{  return null;} @TO@ IfStatement@@if (!StringUtils.hasText(basePackage)) {  return null;} @AT@ 5055 @LENGTH@ 26
---------INS ReturnStatement@@NullLiteral:null @TO@ Block@@ThenBody:{  return null;} @AT@ 5063 @LENGTH@ 12
------------INS NullLiteral@@null @TO@ ReturnStatement@@NullLiteral:null @AT@ 5070 @LENGTH@ 4
---INS VariableDeclarationStatement@@ClassPathScanningCandidateComponentProvider componentProvider=new ClassPathScanningCandidateComponentProvider(false); @TO@ MethodDeclaration@@public, Set<String>, MethodName:getInititalEntityClasses, Element element, BeanDefinitionBuilder builder,  @AT@ 5091 @LENGTH@ 119
------INS SimpleType@@ClassPathScanningCandidateComponentProvider @TO@ VariableDeclarationStatement@@ClassPathScanningCandidateComponentProvider componentProvider=new ClassPathScanningCandidateComponentProvider(false); @AT@ 5091 @LENGTH@ 43
------INS VariableDeclarationFragment@@componentProvider=new ClassPathScanningCandidateComponentProvider(false) @TO@ VariableDeclarationStatement@@ClassPathScanningCandidateComponentProvider componentProvider=new ClassPathScanningCandidateComponentProvider(false); @AT@ 5135 @LENGTH@ 74
---------INS SimpleName@@componentProvider @TO@ VariableDeclarationFragment@@componentProvider=new ClassPathScanningCandidateComponentProvider(false) @AT@ 5135 @LENGTH@ 17
---------INS ClassInstanceCreation@@ClassPathScanningCandidateComponentProvider[false] @TO@ VariableDeclarationFragment@@componentProvider=new ClassPathScanningCandidateComponentProvider(false) @AT@ 5155 @LENGTH@ 54
------------INS New@@new @TO@ ClassInstanceCreation@@ClassPathScanningCandidateComponentProvider[false] @AT@ 5155 @LENGTH@ 3
------------INS SimpleType@@ClassPathScanningCandidateComponentProvider @TO@ ClassInstanceCreation@@ClassPathScanningCandidateComponentProvider[false] @AT@ 5159 @LENGTH@ 43
------------INS BooleanLiteral@@false @TO@ ClassInstanceCreation@@ClassPathScanningCandidateComponentProvider[false] @AT@ 5203 @LENGTH@ 5
---INS ExpressionStatement@@MethodInvocation:componentProvider.addIncludeFilter(new AnnotationTypeFilter(Document.class)) @TO@ MethodDeclaration@@public, Set<String>, MethodName:getInititalEntityClasses, Element element, BeanDefinitionBuilder builder,  @AT@ 5215 @LENGTH@ 77
------INS MethodInvocation@@componentProvider.addIncludeFilter(new AnnotationTypeFilter(Document.class)) @TO@ ExpressionStatement@@MethodInvocation:componentProvider.addIncludeFilter(new AnnotationTypeFilter(Document.class)) @AT@ 5215 @LENGTH@ 76
---------INS SimpleName@@Name:componentProvider @TO@ MethodInvocation@@componentProvider.addIncludeFilter(new AnnotationTypeFilter(Document.class)) @AT@ 5215 @LENGTH@ 17
---------INS SimpleName@@MethodName:addIncludeFilter:[new AnnotationTypeFilter(Document.class)] @TO@ MethodInvocation@@componentProvider.addIncludeFilter(new AnnotationTypeFilter(Document.class)) @AT@ 5233 @LENGTH@ 58
------------INS ClassInstanceCreation@@AnnotationTypeFilter[Document.class] @TO@ SimpleName@@MethodName:addIncludeFilter:[new AnnotationTypeFilter(Document.class)] @AT@ 5250 @LENGTH@ 40
---------------INS New@@new @TO@ ClassInstanceCreation@@AnnotationTypeFilter[Document.class] @AT@ 5250 @LENGTH@ 3
---------------INS SimpleType@@AnnotationTypeFilter @TO@ ClassInstanceCreation@@AnnotationTypeFilter[Document.class] @AT@ 5254 @LENGTH@ 20
---------------INS TypeLiteral@@Document.class @TO@ ClassInstanceCreation@@AnnotationTypeFilter[Document.class] @AT@ 5275 @LENGTH@ 14
---INS ExpressionStatement@@MethodInvocation:componentProvider.addIncludeFilter(new AnnotationTypeFilter(Persistent.class)) @TO@ MethodDeclaration@@public, Set<String>, MethodName:getInititalEntityClasses, Element element, BeanDefinitionBuilder builder,  @AT@ 5297 @LENGTH@ 79
------INS MethodInvocation@@componentProvider.addIncludeFilter(new AnnotationTypeFilter(Persistent.class)) @TO@ ExpressionStatement@@MethodInvocation:componentProvider.addIncludeFilter(new AnnotationTypeFilter(Persistent.class)) @AT@ 5297 @LENGTH@ 78
---------INS SimpleName@@Name:componentProvider @TO@ MethodInvocation@@componentProvider.addIncludeFilter(new AnnotationTypeFilter(Persistent.class)) @AT@ 5297 @LENGTH@ 17
---------INS SimpleName@@MethodName:addIncludeFilter:[new AnnotationTypeFilter(Persistent.class)] @TO@ MethodInvocation@@componentProvider.addIncludeFilter(new AnnotationTypeFilter(Persistent.class)) @AT@ 5315 @LENGTH@ 60
------------INS ClassInstanceCreation@@AnnotationTypeFilter[Persistent.class] @TO@ SimpleName@@MethodName:addIncludeFilter:[new AnnotationTypeFilter(Persistent.class)] @AT@ 5332 @LENGTH@ 42
---------------INS New@@new @TO@ ClassInstanceCreation@@AnnotationTypeFilter[Persistent.class] @AT@ 5332 @LENGTH@ 3
---------------INS SimpleType@@AnnotationTypeFilter @TO@ ClassInstanceCreation@@AnnotationTypeFilter[Persistent.class] @AT@ 5336 @LENGTH@ 20
---------------INS TypeLiteral@@Persistent.class @TO@ ClassInstanceCreation@@AnnotationTypeFilter[Persistent.class] @AT@ 5357 @LENGTH@ 16
---INS VariableDeclarationStatement@@Set<String> classes=new ManagedSet<String>(); @TO@ MethodDeclaration@@public, Set<String>, MethodName:getInititalEntityClasses, Element element, BeanDefinitionBuilder builder,  @AT@ 5386 @LENGTH@ 47
------INS ParameterizedType@@Set<String> @TO@ VariableDeclarationStatement@@Set<String> classes=new ManagedSet<String>(); @AT@ 5386 @LENGTH@ 11
---------INS SimpleType@@Set @TO@ ParameterizedType@@Set<String> @AT@ 5386 @LENGTH@ 3
---------INS SimpleType@@String @TO@ ParameterizedType@@Set<String> @AT@ 5390 @LENGTH@ 6
------INS VariableDeclarationFragment@@classes=new ManagedSet<String>() @TO@ VariableDeclarationStatement@@Set<String> classes=new ManagedSet<String>(); @AT@ 5398 @LENGTH@ 34
---------INS SimpleName@@classes @TO@ VariableDeclarationFragment@@classes=new ManagedSet<String>() @AT@ 5398 @LENGTH@ 7
---------INS ClassInstanceCreation@@ManagedSet<String>[] @TO@ VariableDeclarationFragment@@classes=new ManagedSet<String>() @AT@ 5408 @LENGTH@ 24
------------INS New@@new @TO@ ClassInstanceCreation@@ManagedSet<String>[] @AT@ 5408 @LENGTH@ 3
------------INS ParameterizedType@@ManagedSet<String> @TO@ ClassInstanceCreation@@ManagedSet<String>[] @AT@ 5412 @LENGTH@ 18
---------------INS SimpleType@@ManagedSet @TO@ ParameterizedType@@ManagedSet<String> @AT@ 5412 @LENGTH@ 10
---------------INS SimpleType@@String @TO@ ParameterizedType@@ManagedSet<String> @AT@ 5423 @LENGTH@ 6
---INS EnhancedForStatement@@for (BeanDefinition candidate : componentProvider.findCandidateComponents(basePackage)) {  classes.add(candidate.getBeanClassName());} @TO@ MethodDeclaration@@public, Set<String>, MethodName:getInititalEntityClasses, Element element, BeanDefinitionBuilder builder,  @AT@ 5438 @LENGTH@ 144
------INS SingleVariableDeclaration@@BeanDefinition candidate @TO@ EnhancedForStatement@@for (BeanDefinition candidate : componentProvider.findCandidateComponents(basePackage)) {  classes.add(candidate.getBeanClassName());} @AT@ 5443 @LENGTH@ 24
---------INS SimpleType@@BeanDefinition @TO@ SingleVariableDeclaration@@BeanDefinition candidate @AT@ 5443 @LENGTH@ 14
---------INS SimpleName@@candidate @TO@ SingleVariableDeclaration@@BeanDefinition candidate @AT@ 5458 @LENGTH@ 9
------INS MethodInvocation@@componentProvider.findCandidateComponents(basePackage) @TO@ EnhancedForStatement@@for (BeanDefinition candidate : componentProvider.findCandidateComponents(basePackage)) {  classes.add(candidate.getBeanClassName());} @AT@ 5470 @LENGTH@ 54
---------INS SimpleName@@Name:componentProvider @TO@ MethodInvocation@@componentProvider.findCandidateComponents(basePackage) @AT@ 5470 @LENGTH@ 17
---------INS SimpleName@@MethodName:findCandidateComponents:[basePackage] @TO@ MethodInvocation@@componentProvider.findCandidateComponents(basePackage) @AT@ 5488 @LENGTH@ 36
------------INS SimpleName@@basePackage @TO@ SimpleName@@MethodName:findCandidateComponents:[basePackage] @AT@ 5512 @LENGTH@ 11
------INS ExpressionStatement@@MethodInvocation:classes.add(candidate.getBeanClassName()) @TO@ EnhancedForStatement@@for (BeanDefinition candidate : componentProvider.findCandidateComponents(basePackage)) {  classes.add(candidate.getBeanClassName());} @AT@ 5534 @LENGTH@ 42
---------INS MethodInvocation@@classes.add(candidate.getBeanClassName()) @TO@ ExpressionStatement@@MethodInvocation:classes.add(candidate.getBeanClassName()) @AT@ 5534 @LENGTH@ 41
------------INS SimpleName@@Name:classes @TO@ MethodInvocation@@classes.add(candidate.getBeanClassName()) @AT@ 5534 @LENGTH@ 7
------------INS SimpleName@@MethodName:add:[candidate.getBeanClassName()] @TO@ MethodInvocation@@classes.add(candidate.getBeanClassName()) @AT@ 5542 @LENGTH@ 33
---------------INS MethodInvocation@@candidate.getBeanClassName() @TO@ SimpleName@@MethodName:add:[candidate.getBeanClassName()] @AT@ 5546 @LENGTH@ 28
------------------INS SimpleName@@Name:candidate @TO@ MethodInvocation@@candidate.getBeanClassName() @AT@ 5546 @LENGTH@ 9
------------------INS SimpleName@@MethodName:getBeanClassName:[] @TO@ MethodInvocation@@candidate.getBeanClassName() @AT@ 5556 @LENGTH@ 18
---INS ReturnStatement@@SimpleName:classes @TO@ MethodDeclaration@@public, Set<String>, MethodName:getInititalEntityClasses, Element element, BeanDefinitionBuilder builder,  @AT@ 5592 @LENGTH@ 15
------INS SimpleName@@classes @TO@ ReturnStatement@@SimpleName:classes @AT@ 5599 @LENGTH@ 7


UPD IfStatement@@if (modelNode.has(REMOTE)) {  writer.writeStartElement(Element.REMOTE.getLocalName());  final ModelNode remote=modelNode.get(REMOTE);  if (remote.has(HOST)) {    writeAttribute(writer,Attribute.HOST,remote.get(HOST).asString());  }  if (remote.has(PORT)) {    writeAttribute(writer,Attribute.PORT,remote.get(PORT).asString());  }  writer.writeEndElement();} @TO@ if (modelNode.hasDefined(REMOTE)) {  writer.writeStartElement(Element.REMOTE.getLocalName());  final ModelNode remote=modelNode.get(REMOTE);  if (remote.has(HOST)) {    writeAttribute(writer,Attribute.HOST,remote.get(HOST).asString());  }  if (remote.has(PORT)) {    writeAttribute(writer,Attribute.PORT,remote.get(PORT).asString());  }  writer.writeEndElement();} @AT@ 22947 @LENGTH@ 475


UPD EnhancedForStatement@@for (Integer key : sortValues.keySet()) {  List<String> val=sortValues.get(key);  String value=val.get(0);  buffer.append(value);} @TO@ for (Entry<Integer,List> entry : sortValues.entrySet()) {  List<String> val=entry.getValue();  String value=val.get(0);  buffer.append(value);} @AT@ 10223 @LENGTH@ 224
---UPD SingleVariableDeclaration@@Integer key @TO@ Entry<Integer,List> entry @AT@ 10228 @LENGTH@ 11
------DEL SimpleType@@Integer @AT@ 10228 @LENGTH@ 7
------UPD SimpleName@@key @TO@ entry @AT@ 10236 @LENGTH@ 3
------INS ParameterizedType@@Entry<Integer,List> @TO@ SingleVariableDeclaration@@Integer key @AT@ 10256 @LENGTH@ 20
---------INS SimpleType@@Entry @TO@ ParameterizedType@@Entry<Integer,List> @AT@ 10256 @LENGTH@ 5
---------INS SimpleType@@Integer @TO@ ParameterizedType@@Entry<Integer,List> @AT@ 10262 @LENGTH@ 7
---------INS SimpleType@@List @TO@ ParameterizedType@@Entry<Integer,List> @AT@ 10271 @LENGTH@ 4
---UPD MethodInvocation@@sortValues.keySet() @TO@ sortValues.entrySet() @AT@ 10242 @LENGTH@ 19
------UPD SimpleName@@MethodName:keySet:[] @TO@ MethodName:entrySet:[] @AT@ 10253 @LENGTH@ 8
---UPD VariableDeclarationStatement@@List<String> val=sortValues.get(key); @TO@ List<String> val=entry.getValue(); @AT@ 10312 @LENGTH@ 39
------UPD VariableDeclarationFragment@@val=sortValues.get(key) @TO@ val=entry.getValue() @AT@ 10325 @LENGTH@ 25
---------UPD MethodInvocation@@sortValues.get(key) @TO@ entry.getValue() @AT@ 10331 @LENGTH@ 19
------------UPD SimpleName@@Name:sortValues @TO@ Name:entry @AT@ 10331 @LENGTH@ 10
------------UPD SimpleName@@MethodName:get:[key] @TO@ MethodName:getValue:[] @AT@ 10342 @LENGTH@ 8
---------------DEL SimpleName@@key @AT@ 10346 @LENGTH@ 3


INS FieldDeclaration@@private, List<String>, [list] @TO@ TypeDeclaration@@[public]HazelcastListProducerTest, CamelTestSupport @AT@ 1157 @LENGTH@ 26
---INS Modifier@@private @TO@ FieldDeclaration@@private, List<String>, [list] @AT@ 1157 @LENGTH@ 7
---INS ParameterizedType@@List<String> @TO@ FieldDeclaration@@private, List<String>, [list] @AT@ 1165 @LENGTH@ 12
------INS SimpleType@@List @TO@ ParameterizedType@@List<String> @AT@ 1165 @LENGTH@ 4
------INS SimpleType@@String @TO@ ParameterizedType@@List<String> @AT@ 1170 @LENGTH@ 6
---INS VariableDeclarationFragment@@list @TO@ FieldDeclaration@@private, List<String>, [list] @AT@ 1178 @LENGTH@ 4
------INS SimpleName@@list @TO@ VariableDeclarationFragment@@list @AT@ 1178 @LENGTH@ 4


INS MethodDeclaration@@public, void, MethodName:testReadExistingValue, Exception,  @TO@ TypeDeclaration@@[@RunWith(Parameterized.class), public]RedisAtomicTests,  @AT@ 3082 @LENGTH@ 209
---INS Modifier@@public @TO@ MethodDeclaration@@public, void, MethodName:testReadExistingValue, Exception,  @AT@ 3082 @LENGTH@ 6
---INS PrimitiveType@@void @TO@ MethodDeclaration@@public, void, MethodName:testReadExistingValue, Exception,  @AT@ 3089 @LENGTH@ 4
---INS SimpleName@@MethodName:testReadExistingValue @TO@ MethodDeclaration@@public, void, MethodName:testReadExistingValue, Exception,  @AT@ 3094 @LENGTH@ 21
---INS SimpleType@@Exception @TO@ MethodDeclaration@@public, void, MethodName:testReadExistingValue, Exception,  @AT@ 3125 @LENGTH@ 9
---INS ExpressionStatement@@MethodInvocation:longCounter.set(5) @TO@ MethodDeclaration@@public, void, MethodName:testReadExistingValue, Exception,  @AT@ 3139 @LENGTH@ 19
------INS MethodInvocation@@longCounter.set(5) @TO@ ExpressionStatement@@MethodInvocation:longCounter.set(5) @AT@ 3139 @LENGTH@ 18
---------INS SimpleName@@Name:longCounter @TO@ MethodInvocation@@longCounter.set(5) @AT@ 3139 @LENGTH@ 11
---------INS SimpleName@@MethodName:set:[5] @TO@ MethodInvocation@@longCounter.set(5) @AT@ 3151 @LENGTH@ 6
------------INS NumberLiteral@@5 @TO@ SimpleName@@MethodName:set:[5] @AT@ 3155 @LENGTH@ 1
---INS VariableDeclarationStatement@@RedisAtomicLong keyCopy=new RedisAtomicLong(longCounter.getKey(),factory); @TO@ MethodDeclaration@@public, void, MethodName:testReadExistingValue, Exception,  @AT@ 3161 @LENGTH@ 77
------INS SimpleType@@RedisAtomicLong @TO@ VariableDeclarationStatement@@RedisAtomicLong keyCopy=new RedisAtomicLong(longCounter.getKey(),factory); @AT@ 3161 @LENGTH@ 15
------INS VariableDeclarationFragment@@keyCopy=new RedisAtomicLong(longCounter.getKey(),factory) @TO@ VariableDeclarationStatement@@RedisAtomicLong keyCopy=new RedisAtomicLong(longCounter.getKey(),factory); @AT@ 3177 @LENGTH@ 60
---------INS SimpleName@@keyCopy @TO@ VariableDeclarationFragment@@keyCopy=new RedisAtomicLong(longCounter.getKey(),factory) @AT@ 3177 @LENGTH@ 7
---------INS ClassInstanceCreation@@RedisAtomicLong[longCounter.getKey(), factory] @TO@ VariableDeclarationFragment@@keyCopy=new RedisAtomicLong(longCounter.getKey(),factory) @AT@ 3187 @LENGTH@ 50
------------INS New@@new @TO@ ClassInstanceCreation@@RedisAtomicLong[longCounter.getKey(), factory] @AT@ 3187 @LENGTH@ 3
------------INS SimpleType@@RedisAtomicLong @TO@ ClassInstanceCreation@@RedisAtomicLong[longCounter.getKey(), factory] @AT@ 3191 @LENGTH@ 15
------------INS MethodInvocation@@longCounter.getKey() @TO@ ClassInstanceCreation@@RedisAtomicLong[longCounter.getKey(), factory] @AT@ 3207 @LENGTH@ 20
---------------INS SimpleName@@Name:longCounter @TO@ MethodInvocation@@longCounter.getKey() @AT@ 3207 @LENGTH@ 11
---------------INS SimpleName@@MethodName:getKey:[] @TO@ MethodInvocation@@longCounter.getKey() @AT@ 3219 @LENGTH@ 8
------------INS SimpleName@@factory @TO@ ClassInstanceCreation@@RedisAtomicLong[longCounter.getKey(), factory] @AT@ 3229 @LENGTH@ 7
---INS ExpressionStatement@@MethodInvocation:assertEquals(longCounter.get(),keyCopy.get()) @TO@ MethodDeclaration@@public, void, MethodName:testReadExistingValue, Exception,  @AT@ 3241 @LENGTH@ 47
------INS MethodInvocation@@assertEquals(longCounter.get(),keyCopy.get()) @TO@ ExpressionStatement@@MethodInvocation:assertEquals(longCounter.get(),keyCopy.get()) @AT@ 3241 @LENGTH@ 46
---------INS SimpleName@@MethodName:assertEquals:[longCounter.get(), keyCopy.get()] @TO@ MethodInvocation@@assertEquals(longCounter.get(),keyCopy.get()) @AT@ 3241 @LENGTH@ 46
------------INS MethodInvocation@@longCounter.get() @TO@ SimpleName@@MethodName:assertEquals:[longCounter.get(), keyCopy.get()] @AT@ 3254 @LENGTH@ 17
---------------INS SimpleName@@Name:longCounter @TO@ MethodInvocation@@longCounter.get() @AT@ 3254 @LENGTH@ 11
---------------INS SimpleName@@MethodName:get:[] @TO@ MethodInvocation@@longCounter.get() @AT@ 3266 @LENGTH@ 5
------------INS MethodInvocation@@keyCopy.get() @TO@ SimpleName@@MethodName:assertEquals:[longCounter.get(), keyCopy.get()] @AT@ 3273 @LENGTH@ 13
---------------INS SimpleName@@Name:keyCopy @TO@ MethodInvocation@@keyCopy.get() @AT@ 3273 @LENGTH@ 7
---------------INS SimpleName@@MethodName:get:[] @TO@ MethodInvocation@@keyCopy.get() @AT@ 3281 @LENGTH@ 5


INS ExpressionStatement@@Assignment:this.targetConnection=null @TO@ MethodDeclaration@@protected, void, MethodName:reset,  @AT@ 5999 @LENGTH@ 29
---INS Assignment@@this.targetConnection=null @TO@ ExpressionStatement@@Assignment:this.targetConnection=null @AT@ 5999 @LENGTH@ 28
------INS FieldAccess@@this.targetConnection @TO@ Assignment@@this.targetConnection=null @AT@ 5999 @LENGTH@ 21
---------INS ThisExpression@@this @TO@ FieldAccess@@this.targetConnection @AT@ 5999 @LENGTH@ 4
---------INS SimpleName@@targetConnection @TO@ FieldAccess@@this.targetConnection @AT@ 6004 @LENGTH@ 16
------INS Operator@@= @TO@ Assignment@@this.targetConnection=null @AT@ 6020 @LENGTH@ 1
------INS NullLiteral@@null @TO@ Assignment@@this.targetConnection=null @AT@ 6023 @LENGTH@ 4


UPD MethodDeclaration@@public, static, ModelNode, MethodName:getAddNamespaceOperation, ModelNode address, ModelNode namespace,  @TO@ public, static, ModelNode, MethodName:getAddNamespaceOperation, ModelNode address, Property namespace,  @AT@ 2303 @LENGTH@ 275
---UPD SingleVariableDeclaration@@ModelNode namespace @TO@ Property namespace @AT@ 2371 @LENGTH@ 19
------UPD SimpleType@@ModelNode @TO@ Property @AT@ 2371 @LENGTH@ 9


UPD MethodDeclaration@@void, MethodName:handle, ParsingContext ctx, OperationFormatException,  @TO@ void, MethodName:handle, ParsingContext ctx, CommandFormatException,  @AT@ 1215 @LENGTH@ 59
---UPD SimpleType@@OperationFormatException @TO@ CommandFormatException @AT@ 1249 @LENGTH@ 24


INS IfStatement@@if (ops.hasKey(key)) {  ops.rename(key,newKey);} @TO@ MethodDeclaration@@public, void, MethodName:rename, K newKey,  @AT@ 1607 @LENGTH@ 54
---INS MethodInvocation@@ops.hasKey(key) @TO@ IfStatement@@if (ops.hasKey(key)) {  ops.rename(key,newKey);} @AT@ 1611 @LENGTH@ 15
------INS SimpleName@@Name:ops @TO@ MethodInvocation@@ops.hasKey(key) @AT@ 1611 @LENGTH@ 3
------INS SimpleName@@MethodName:hasKey:[key] @TO@ MethodInvocation@@ops.hasKey(key) @AT@ 1615 @LENGTH@ 11
---------INS SimpleName@@key @TO@ SimpleName@@MethodName:hasKey:[key] @AT@ 1622 @LENGTH@ 3
---INS Block@@ThenBody:{  ops.rename(key,newKey);} @TO@ IfStatement@@if (ops.hasKey(key)) {  ops.rename(key,newKey);} @AT@ 1628 @LENGTH@ 33
------MOV ExpressionStatement@@MethodInvocation:ops.rename(key,newKey) @TO@ Block@@ThenBody:{  ops.rename(key,newKey);} @AT@ 1607 @LENGTH@ 24


UPD ReturnStatement@@MethodInvocation:query.select(builder.count(root)) @TO@ MethodInvocation:query.select(builder.count(root)).where(predicate) @AT@ 2155 @LENGTH@ 41
---INS MethodInvocation@@query.select(builder.count(root)).where(predicate) @TO@ ReturnStatement@@MethodInvocation:query.select(builder.count(root)) @AT@ 2162 @LENGTH@ 50
------MOV MethodInvocation@@query.select(builder.count(root)) @TO@ MethodInvocation@@query.select(builder.count(root)).where(predicate) @AT@ 2162 @LENGTH@ 33
---------MOV MethodInvocation@@builder.count(root) @TO@ MethodInvocation@@query.select(builder.count(root)) @AT@ 2175 @LENGTH@ 19
------INS SimpleName@@Name:query @TO@ MethodInvocation@@query.select(builder.count(root)).where(predicate) @AT@ 2162 @LENGTH@ 5
------INS SimpleName@@MethodName:where:[predicate] @TO@ MethodInvocation@@query.select(builder.count(root)).where(predicate) @AT@ 2196 @LENGTH@ 16
---------INS SimpleName@@predicate @TO@ SimpleName@@MethodName:where:[predicate] @AT@ 2202 @LENGTH@ 9
---UPD MethodInvocation@@query.select(builder.count(root)) @TO@ MethodName:select:[builder.count(root)] @AT@ 2162 @LENGTH@ 33


UPD FieldDeclaration@@private, CountDownLatch, [startStopLatch=new CountDownLatch(1)] @TO@ private, volatile, CountDownLatch, [startStopLatch=new CountDownLatch(1)] @AT@ 2612 @LENGTH@ 62
---INS Modifier@@volatile @TO@ FieldDeclaration@@private, CountDownLatch, [startStopLatch=new CountDownLatch(1)] @AT@ 2621 @LENGTH@ 8


UPD FieldDeclaration@@protected, RedisListenerContainer, [container] @TO@ protected, RedisMessageListenerContainer, [container] @AT@ 1755 @LENGTH@ 43
---UPD SimpleType@@RedisListenerContainer @TO@ RedisMessageListenerContainer @AT@ 1765 @LENGTH@ 22


UPD IfStatement@@if (ormProvider == OrmProvider.DATANUCLEUS || ormProvider == OrmProvider.DATANUCLEUS_2) {  if (jdbcDatabase == JdbcDatabase.VMFORCE) {    logger.warning("Please enter your database details in src/main/resources/config.properties.");  } else {    logger.warning("Please enter your database details in src/main/resources/META-INF/persistence.xml.");  }} else {  logger.warning("Please enter your database details in src/main/resources/META-INF/spring/database.properties.");} @TO@ if (ormProvider == OrmProvider.DATANUCLEUS || ormProvider == OrmProvider.DATANUCLEUS_2) {  if (jdbcDatabase == JdbcDatabase.VMFORCE) {    logger.warning("Please update your database details in src/main/resources/config.properties.");  } else {    logger.warning("Please update your database details in src/main/resources/META-INF/persistence.xml.");  }} else {  logger.warning("Please update your database details in src/main/resources/META-INF/spring/database.properties.");} @AT@ 4095 @LENGTH@ 502
---UPD Block@@ThenBody:{  if (jdbcDatabase == JdbcDatabase.VMFORCE) {    logger.warning("Please enter your database details in src/main/resources/config.properties.");  } else {    logger.warning("Please enter your database details in src/main/resources/META-INF/persistence.xml.");  }} @TO@ ThenBody:{  if (jdbcDatabase == JdbcDatabase.VMFORCE) {    logger.warning("Please update your database details in src/main/resources/config.properties.");  } else {    logger.warning("Please update your database details in src/main/resources/META-INF/persistence.xml.");  }} @AT@ 4183 @LENGTH@ 285
------UPD IfStatement@@if (jdbcDatabase == JdbcDatabase.VMFORCE) {  logger.warning("Please enter your database details in src/main/resources/config.properties.");} else {  logger.warning("Please enter your database details in src/main/resources/META-INF/persistence.xml.");} @TO@ if (jdbcDatabase == JdbcDatabase.VMFORCE) {  logger.warning("Please update your database details in src/main/resources/config.properties.");} else {  logger.warning("Please update your database details in src/main/resources/META-INF/persistence.xml.");} @AT@ 4189 @LENGTH@ 274
---------UPD Block@@ThenBody:{  logger.warning("Please enter your database details in src/main/resources/config.properties.");} @TO@ ThenBody:{  logger.warning("Please update your database details in src/main/resources/config.properties.");} @AT@ 4231 @LENGTH@ 112
------------UPD ExpressionStatement@@MethodInvocation:logger.warning("Please enter your database details in src/main/resources/config.properties.") @TO@ MethodInvocation:logger.warning("Please update your database details in src/main/resources/config.properties.") @AT@ 4238 @LENGTH@ 94
---------------UPD MethodInvocation@@logger.warning("Please enter your database details in src/main/resources/config.properties.") @TO@ logger.warning("Please update your database details in src/main/resources/config.properties.") @AT@ 4238 @LENGTH@ 93
------------------UPD SimpleName@@MethodName:warning:["Please enter your database details in src/main/resources/config.properties."] @TO@ MethodName:warning:["Please update your database details in src/main/resources/config.properties."] @AT@ 4245 @LENGTH@ 86
---------------------UPD StringLiteral@@"Please enter your database details in src/main/resources/config.properties." @TO@ "Please update your database details in src/main/resources/config.properties." @AT@ 4253 @LENGTH@ 77
---------UPD Block@@ElseBody:{  logger.warning("Please enter your database details in src/main/resources/META-INF/persistence.xml.");} @TO@ ElseBody:{  logger.warning("Please update your database details in src/main/resources/META-INF/persistence.xml.");} @AT@ 4349 @LENGTH@ 114
------------UPD ExpressionStatement@@MethodInvocation:logger.warning("Please enter your database details in src/main/resources/META-INF/persistence.xml.") @TO@ MethodInvocation:logger.warning("Please update your database details in src/main/resources/META-INF/persistence.xml.") @AT@ 4356 @LENGTH@ 101
---------------UPD MethodInvocation@@logger.warning("Please enter your database details in src/main/resources/META-INF/persistence.xml.") @TO@ logger.warning("Please update your database details in src/main/resources/META-INF/persistence.xml.") @AT@ 4356 @LENGTH@ 100
------------------UPD SimpleName@@MethodName:warning:["Please enter your database details in src/main/resources/META-INF/persistence.xml."] @TO@ MethodName:warning:["Please update your database details in src/main/resources/META-INF/persistence.xml."] @AT@ 4363 @LENGTH@ 93
---------------------UPD StringLiteral@@"Please enter your database details in src/main/resources/META-INF/persistence.xml." @TO@ "Please update your database details in src/main/resources/META-INF/persistence.xml." @AT@ 4371 @LENGTH@ 84
---UPD Block@@ElseBody:{  logger.warning("Please enter your database details in src/main/resources/META-INF/spring/database.properties.");} @TO@ ElseBody:{  logger.warning("Please update your database details in src/main/resources/META-INF/spring/database.properties.");} @AT@ 4474 @LENGTH@ 123
------UPD ExpressionStatement@@MethodInvocation:logger.warning("Please enter your database details in src/main/resources/META-INF/spring/database.properties.") @TO@ MethodInvocation:logger.warning("Please update your database details in src/main/resources/META-INF/spring/database.properties.") @AT@ 4480 @LENGTH@ 112
---------UPD MethodInvocation@@logger.warning("Please enter your database details in src/main/resources/META-INF/spring/database.properties.") @TO@ logger.warning("Please update your database details in src/main/resources/META-INF/spring/database.properties.") @AT@ 4480 @LENGTH@ 111
------------UPD SimpleName@@MethodName:warning:["Please enter your database details in src/main/resources/META-INF/spring/database.properties."] @TO@ MethodName:warning:["Please update your database details in src/main/resources/META-INF/spring/database.properties."] @AT@ 4487 @LENGTH@ 104
---------------UPD StringLiteral@@"Please enter your database details in src/main/resources/META-INF/spring/database.properties." @TO@ "Please update your database details in src/main/resources/META-INF/spring/database.properties." @AT@ 4495 @LENGTH@ 95


UPD MethodDeclaration@@public, boolean, MethodName:canAppearNext, CommandContext ctx,  @TO@ public, boolean, MethodName:canAppearNext, CommandContext ctx, CommandFormatException,  @AT@ 5228 @LENGTH@ 667
---INS SimpleType@@CommandFormatException @TO@ MethodDeclaration@@public, boolean, MethodName:canAppearNext, CommandContext ctx,  @AT@ 5314 @LENGTH@ 22


UPD MethodDeclaration@@public, boolean, MethodName:canAppearNext, CommandContext ctx,  @TO@ public, boolean, MethodName:canAppearNext, CommandContext ctx, CommandFormatException,  @AT@ 2293 @LENGTH@ 207
---INS SimpleType@@CommandFormatException @TO@ MethodDeclaration@@public, boolean, MethodName:canAppearNext, CommandContext ctx,  @AT@ 2349 @LENGTH@ 22


UPD IfStatement@@if (SerializerUtils.isEmpty(bytes)) {  return null;} @TO@ if (SerializationUtils.isEmpty(bytes)) {  return null;} @AT@ 1715 @LENGTH@ 57
---UPD MethodInvocation@@SerializerUtils.isEmpty(bytes) @TO@ SerializationUtils.isEmpty(bytes) @AT@ 1719 @LENGTH@ 30
------UPD SimpleName@@Name:SerializerUtils @TO@ Name:SerializationUtils @AT@ 1719 @LENGTH@ 15


UPD FieldDeclaration@@public, final, static, InetSocketAddress, [TEST_SERVER_ADDR=new InetSocketAddress("localhost",18080)] @TO@ public, static, final, InetSocketAddress, [TEST_SERVER_ADDR=new InetSocketAddress("localhost",18080)] @AT@ 2904 @LENGTH@ 107
---INS Modifier@@static @TO@ FieldDeclaration@@public, final, static, InetSocketAddress, [TEST_SERVER_ADDR=new InetSocketAddress("localhost",18080)] @AT@ 2911 @LENGTH@ 6
---DEL Modifier@@static @AT@ 2917 @LENGTH@ 6


MOV ExpressionStatement@@SuperMethodInvocation:super.setUp() @TO@ MethodDeclaration@@public, void, MethodName:setUp, Exception,  @AT@ 1298 @LENGTH@ 14


UPD ExpressionStatement@@MethodInvocation:error.expectedBodiesReceived("<foo/>") @TO@ MethodInvocation:error.message(0).body(String.class).contains("<foo/>") @AT@ 1792 @LENGTH@ 39
---UPD MethodInvocation@@error.expectedBodiesReceived("<foo/>") @TO@ error.message(0).body(String.class).contains("<foo/>") @AT@ 1792 @LENGTH@ 38
------UPD SimpleName@@MethodName:expectedBodiesReceived:["<foo/>"] @TO@ MethodName:contains:["<foo/>"] @AT@ 1798 @LENGTH@ 32
------INS MethodInvocation@@MethodName:body:[String.class] @TO@ MethodInvocation@@error.expectedBodiesReceived("<foo/>") @AT@ 1831 @LENGTH@ 35
---------INS TypeLiteral@@String.class @TO@ MethodInvocation@@MethodName:body:[String.class] @AT@ 1853 @LENGTH@ 12
------INS MethodInvocation@@MethodName:message:[0] @TO@ MethodInvocation@@error.expectedBodiesReceived("<foo/>") @AT@ 1831 @LENGTH@ 16
---------INS NumberLiteral@@0 @TO@ MethodInvocation@@MethodName:message:[0] @AT@ 1845 @LENGTH@ 1


UPD IfStatement@@if (managementRepoService != null) {  try {    final ManagementRepository repository=(ManagementRepository)managementRepoService.getValue();    if (repository.getConnectors() != null) {      for (      Connector conn : repository.getConnectors()) {        if (jndiName.equalsIgnoreCase(conn.getUniqueId())) {          if (conn.getConnectionFactories() == null || conn.getConnectionFactories().get(0) == null)           continue;          PoolConfiguration pc=conn.getConnectionFactories().get(0).getPoolConfiguration();          if (MAX_POOL_SIZE.equals(parameterName)) {            pc.setMaxSize(newValue.asInt());          }          if (MIN_POOL_SIZE.equals(parameterName)) {            pc.setMinSize(newValue.asInt());          }          if (BLOCKING_TIMEOUT_WAIT_MILLIS.equals(parameterName)) {            pc.setBlockingTimeout(newValue.asLong());          }          if (POOL_USE_STRICT_MIN.equals(parameterName)) {            pc.setStrictMin(newValue.asBoolean());          }          if (USE_FAST_FAIL.equals(parameterName)) {            pc.setUseFastFail(newValue.asBoolean());          }        }      }    }    modelChanged(context,operation,resultHandler,parameterName,newValue,currentValue);  } catch (  Exception e) {    throw new OperationFailedException(new ModelNode().set("failed to set attribute" + e.getMessage()));  }} @TO@ if (managementRepoService != null) {  try {    final ManagementRepository repository=(ManagementRepository)managementRepoService.getValue();    if (repository.getConnectors() != null) {      for (      Connector conn : repository.getConnectors()) {        if (jndiName.equalsIgnoreCase(conn.getUniqueId())) {          if (conn.getConnectionFactories() == null || conn.getConnectionFactories().get(0) == null)           continue;          PoolConfiguration pc=conn.getConnectionFactories().get(0).getPoolConfiguration();          if (MAX_POOL_SIZE.equals(parameterName)) {            pc.setMaxSize(newValue.asInt());          }          if (MIN_POOL_SIZE.equals(parameterName)) {            pc.setMinSize(newValue.asInt());          }          if (BLOCKING_TIMEOUT_WAIT_MILLIS.equals(parameterName)) {            pc.setBlockingTimeout(newValue.asLong());          }          if (POOL_USE_STRICT_MIN.equals(parameterName)) {            pc.setStrictMin(newValue.asBoolean());          }          if (USE_FAST_FAIL.equals(parameterName)) {            pc.setUseFastFail(newValue.asBoolean());          }        }      }    }    resultHandler.handleResultComplete();  } catch (  Exception e) {    throw new OperationFailedException(new ModelNode().set("failed to set attribute" + e.getMessage()));  }} else {  resultHandler.handleResultComplete();} @AT@ 5715 @LENGTH@ 2406
---UPD Block@@ThenBody:{  try {    final ManagementRepository repository=(ManagementRepository)managementRepoService.getValue();    if (repository.getConnectors() != null) {      for (      Connector conn : repository.getConnectors()) {        if (jndiName.equalsIgnoreCase(conn.getUniqueId())) {          if (conn.getConnectionFactories() == null || conn.getConnectionFactories().get(0) == null)           continue;          PoolConfiguration pc=conn.getConnectionFactories().get(0).getPoolConfiguration();          if (MAX_POOL_SIZE.equals(parameterName)) {            pc.setMaxSize(newValue.asInt());          }          if (MIN_POOL_SIZE.equals(parameterName)) {            pc.setMinSize(newValue.asInt());          }          if (BLOCKING_TIMEOUT_WAIT_MILLIS.equals(parameterName)) {            pc.setBlockingTimeout(newValue.asLong());          }          if (POOL_USE_STRICT_MIN.equals(parameterName)) {            pc.setStrictMin(newValue.asBoolean());          }          if (USE_FAST_FAIL.equals(parameterName)) {            pc.setUseFastFail(newValue.asBoolean());          }        }      }    }    modelChanged(context,operation,resultHandler,parameterName,newValue,currentValue);  } catch (  Exception e) {    throw new OperationFailedException(new ModelNode().set("failed to set attribute" + e.getMessage()));  }} @TO@ ThenBody:{  try {    final ManagementRepository repository=(ManagementRepository)managementRepoService.getValue();    if (repository.getConnectors() != null) {      for (      Connector conn : repository.getConnectors()) {        if (jndiName.equalsIgnoreCase(conn.getUniqueId())) {          if (conn.getConnectionFactories() == null || conn.getConnectionFactories().get(0) == null)           continue;          PoolConfiguration pc=conn.getConnectionFactories().get(0).getPoolConfiguration();          if (MAX_POOL_SIZE.equals(parameterName)) {            pc.setMaxSize(newValue.asInt());          }          if (MIN_POOL_SIZE.equals(parameterName)) {            pc.setMinSize(newValue.asInt());          }          if (BLOCKING_TIMEOUT_WAIT_MILLIS.equals(parameterName)) {            pc.setBlockingTimeout(newValue.asLong());          }          if (POOL_USE_STRICT_MIN.equals(parameterName)) {            pc.setStrictMin(newValue.asBoolean());          }          if (USE_FAST_FAIL.equals(parameterName)) {            pc.setUseFastFail(newValue.asBoolean());          }        }      }    }    resultHandler.handleResultComplete();  } catch (  Exception e) {    throw new OperationFailedException(new ModelNode().set("failed to set attribute" + e.getMessage()));  }} @AT@ 5750 @LENGTH@ 2371
------UPD TryStatement@@try {  final ManagementRepository repository=(ManagementRepository)managementRepoService.getValue();  if (repository.getConnectors() != null) {    for (    Connector conn : repository.getConnectors()) {      if (jndiName.equalsIgnoreCase(conn.getUniqueId())) {        if (conn.getConnectionFactories() == null || conn.getConnectionFactories().get(0) == null)         continue;        PoolConfiguration pc=conn.getConnectionFactories().get(0).getPoolConfiguration();        if (MAX_POOL_SIZE.equals(parameterName)) {          pc.setMaxSize(newValue.asInt());        }        if (MIN_POOL_SIZE.equals(parameterName)) {          pc.setMinSize(newValue.asInt());        }        if (BLOCKING_TIMEOUT_WAIT_MILLIS.equals(parameterName)) {          pc.setBlockingTimeout(newValue.asLong());        }        if (POOL_USE_STRICT_MIN.equals(parameterName)) {          pc.setStrictMin(newValue.asBoolean());        }        if (USE_FAST_FAIL.equals(parameterName)) {          pc.setUseFastFail(newValue.asBoolean());        }      }    }  }  modelChanged(context,operation,resultHandler,parameterName,newValue,currentValue);} catch (Exception e) {  throw new OperationFailedException(new ModelNode().set("failed to set attribute" + e.getMessage()));} @TO@ try {  final ManagementRepository repository=(ManagementRepository)managementRepoService.getValue();  if (repository.getConnectors() != null) {    for (    Connector conn : repository.getConnectors()) {      if (jndiName.equalsIgnoreCase(conn.getUniqueId())) {        if (conn.getConnectionFactories() == null || conn.getConnectionFactories().get(0) == null)         continue;        PoolConfiguration pc=conn.getConnectionFactories().get(0).getPoolConfiguration();        if (MAX_POOL_SIZE.equals(parameterName)) {          pc.setMaxSize(newValue.asInt());        }        if (MIN_POOL_SIZE.equals(parameterName)) {          pc.setMinSize(newValue.asInt());        }        if (BLOCKING_TIMEOUT_WAIT_MILLIS.equals(parameterName)) {          pc.setBlockingTimeout(newValue.asLong());        }        if (POOL_USE_STRICT_MIN.equals(parameterName)) {          pc.setStrictMin(newValue.asBoolean());        }        if (USE_FAST_FAIL.equals(parameterName)) {          pc.setUseFastFail(newValue.asBoolean());        }      }    }  }  resultHandler.handleResultComplete();} catch (Exception e) {  throw new OperationFailedException(new ModelNode().set("failed to set attribute" + e.getMessage()));} @AT@ 5780 @LENGTH@ 2315
---------UPD ExpressionStatement@@MethodInvocation:modelChanged(context,operation,resultHandler,parameterName,newValue,currentValue) @TO@ MethodInvocation:resultHandler.handleResultComplete() @AT@ 7752 @LENGTH@ 87
------------UPD MethodInvocation@@modelChanged(context,operation,resultHandler,parameterName,newValue,currentValue) @TO@ resultHandler.handleResultComplete() @AT@ 7752 @LENGTH@ 86
---------------DEL SimpleName@@MethodName:modelChanged:[context, operation, resultHandler, parameterName, newValue, currentValue] @AT@ 7752 @LENGTH@ 86
------------------DEL SimpleName@@context @AT@ 7765 @LENGTH@ 7
------------------DEL SimpleName@@operation @AT@ 7774 @LENGTH@ 9
------------------DEL SimpleName@@resultHandler @AT@ 7785 @LENGTH@ 13
------------------DEL SimpleName@@parameterName @AT@ 7800 @LENGTH@ 13
------------------DEL SimpleName@@newValue @AT@ 7815 @LENGTH@ 8
------------------DEL SimpleName@@currentValue @AT@ 7825 @LENGTH@ 12
---------------INS SimpleName@@Name:resultHandler @TO@ MethodInvocation@@modelChanged(context,operation,resultHandler,parameterName,newValue,currentValue) @AT@ 7799 @LENGTH@ 13
---------------INS SimpleName@@MethodName:handleResultComplete:[] @TO@ MethodInvocation@@modelChanged(context,operation,resultHandler,parameterName,newValue,currentValue) @AT@ 7813 @LENGTH@ 22
---INS Block@@ElseBody:{  resultHandler.handleResultComplete();} @TO@ IfStatement@@if (managementRepoService != null) {  try {    final ManagementRepository repository=(ManagementRepository)managementRepoService.getValue();    if (repository.getConnectors() != null) {      for (      Connector conn : repository.getConnectors()) {        if (jndiName.equalsIgnoreCase(conn.getUniqueId())) {          if (conn.getConnectionFactories() == null || conn.getConnectionFactories().get(0) == null)           continue;          PoolConfiguration pc=conn.getConnectionFactories().get(0).getPoolConfiguration();          if (MAX_POOL_SIZE.equals(parameterName)) {            pc.setMaxSize(newValue.asInt());          }          if (MIN_POOL_SIZE.equals(parameterName)) {            pc.setMinSize(newValue.asInt());          }          if (BLOCKING_TIMEOUT_WAIT_MILLIS.equals(parameterName)) {            pc.setBlockingTimeout(newValue.asLong());          }          if (POOL_USE_STRICT_MIN.equals(parameterName)) {            pc.setStrictMin(newValue.asBoolean());          }          if (USE_FAST_FAIL.equals(parameterName)) {            pc.setUseFastFail(newValue.asBoolean());          }        }      }    }    modelChanged(context,operation,resultHandler,parameterName,newValue,currentValue);  } catch (  Exception e) {    throw new OperationFailedException(new ModelNode().set("failed to set attribute" + e.getMessage()));  }} @AT@ 8124 @LENGTH@ 93
------INS ExpressionStatement@@MethodInvocation:resultHandler.handleResultComplete() @TO@ Block@@ElseBody:{  resultHandler.handleResultComplete();} @AT@ 8154 @LENGTH@ 37
---------INS MethodInvocation@@resultHandler.handleResultComplete() @TO@ ExpressionStatement@@MethodInvocation:resultHandler.handleResultComplete() @AT@ 8154 @LENGTH@ 36
------------INS SimpleName@@Name:resultHandler @TO@ MethodInvocation@@resultHandler.handleResultComplete() @AT@ 8154 @LENGTH@ 13
------------INS SimpleName@@MethodName:handleResultComplete:[] @TO@ MethodInvocation@@resultHandler.handleResultComplete() @AT@ 8168 @LENGTH@ 22


MOV ExpressionStatement@@MethodInvocation:bootContext.addDeploymentProcessor(Phase.PARSE,Phase.PARSE_WELD_EJB_INTERCEPTORS_INTEGRATION,new WeldEjbInterceptorIntegrationProcessor()) @TO@ MethodDeclaration@@public, void, MethodName:execute, RuntimeTaskContext context, OperationFailedException,  @AT@ 3647 @LENGTH@ 141


UPD ExpressionStatement@@MethodInvocation:assertEquals("https://www.someprovider.com/oauth/authorize?oauth_token=request_token&callback_url=http%3A%2F%2Fwww.someclient.com%2Foauth%2Fcallback",oauth10.buildAuthorizeUrl("request_token","http://www.someclient.com/oauth/callback")) @TO@ MethodInvocation:assertEquals("https://www.someprovider.com/oauth/authorize?oauth_token=request_token&oauth_callback=http%3A%2F%2Fwww.someclient.com%2Foauth%2Fcallback",oauth10.buildAuthorizeUrl("request_token","http://www.someclient.com/oauth/callback")) @AT@ 2310 @LENGTH@ 243
---UPD MethodInvocation@@assertEquals("https://www.someprovider.com/oauth/authorize?oauth_token=request_token&callback_url=http%3A%2F%2Fwww.someclient.com%2Foauth%2Fcallback",oauth10.buildAuthorizeUrl("request_token","http://www.someclient.com/oauth/callback")) @TO@ assertEquals("https://www.someprovider.com/oauth/authorize?oauth_token=request_token&oauth_callback=http%3A%2F%2Fwww.someclient.com%2Foauth%2Fcallback",oauth10.buildAuthorizeUrl("request_token","http://www.someclient.com/oauth/callback")) @AT@ 2310 @LENGTH@ 242
------UPD SimpleName@@MethodName:assertEquals:["https://www.someprovider.com/oauth/authorize?oauth_token=request_token&callback_url=http%3A%2F%2Fwww.someclient.com%2Foauth%2Fcallback", oauth10.buildAuthorizeUrl("request_token","http://www.someclient.com/oauth/callback")] @TO@ MethodName:assertEquals:["https://www.someprovider.com/oauth/authorize?oauth_token=request_token&oauth_callback=http%3A%2F%2Fwww.someclient.com%2Foauth%2Fcallback", oauth10.buildAuthorizeUrl("request_token","http://www.someclient.com/oauth/callback")] @AT@ 2310 @LENGTH@ 242
---------UPD StringLiteral@@"https://www.someprovider.com/oauth/authorize?oauth_token=request_token&callback_url=http%3A%2F%2Fwww.someclient.com%2Foauth%2Fcallback" @TO@ "https://www.someprovider.com/oauth/authorize?oauth_token=request_token&oauth_callback=http%3A%2F%2Fwww.someclient.com%2Foauth%2Fcallback" @AT@ 2323 @LENGTH@ 136


UPD MethodDeclaration@@public, voidMethodName:SingletonComponent, final EJBComponentCreateService ejbComponentCreateService,  @TO@ public, voidMethodName:SingletonComponent, final SingletonComponentCreateService singletonComponentCreateService,  @AT@ 2501 @LENGTH@ 513
---UPD SingleVariableDeclaration@@final EJBComponentCreateService ejbComponentCreateService @TO@ final SingletonComponentCreateService singletonComponentCreateService @AT@ 2527 @LENGTH@ 57
------UPD SimpleType@@EJBComponentCreateService @TO@ SingletonComponentCreateService @AT@ 2533 @LENGTH@ 25
------UPD SimpleName@@ejbComponentCreateService @TO@ singletonComponentCreateService @AT@ 2559 @LENGTH@ 25
---UPD SuperConstructorInvocation@@super(ejbComponentCreateService);
 @TO@ super(singletonComponentCreateService);
 @AT@ 2596 @LENGTH@ 33
------UPD SimpleName@@ejbComponentCreateService @TO@ singletonComponentCreateService @AT@ 2602 @LENGTH@ 25
---UPD ExpressionStatement@@Assignment:this.initOnStartup=false @TO@ Assignment:this.initOnStartup=singletonComponentCreateService.isInitOnStartup() @AT@ 2638 @LENGTH@ 27
------UPD Assignment@@this.initOnStartup=false @TO@ this.initOnStartup=singletonComponentCreateService.isInitOnStartup() @AT@ 2638 @LENGTH@ 26
---------INS MethodInvocation@@singletonComponentCreateService.isInitOnStartup() @TO@ Assignment@@this.initOnStartup=false @AT@ 2621 @LENGTH@ 49
------------INS SimpleName@@Name:singletonComponentCreateService @TO@ MethodInvocation@@singletonComponentCreateService.isInitOnStartup() @AT@ 2621 @LENGTH@ 31
------------INS SimpleName@@MethodName:isInitOnStartup:[] @TO@ MethodInvocation@@singletonComponentCreateService.isInitOnStartup() @AT@ 2653 @LENGTH@ 17
---------DEL BooleanLiteral@@false @AT@ 2659 @LENGTH@ 5


UPD IfStatement@@if (part instanceof DOMSource) {  Element element=getFirstElement(((DOMSource)part).getNode());  if (element != null) {    answer.add(element);  }  if (LOG.isTraceEnabled()) {    LOG.trace("Extract body element {}",element == null ? "null" : XMLUtils.toString(element));  }} else if (part instanceof Element) {  answer.add((Element)part);} else {  if (LOG.isDebugEnabled()) {    LOG.debug("Unhandled part type '" + part.getClass());  }} @TO@ if (part instanceof Source) {  Element element;  if (part instanceof DOMSource) {    element=getFirstElement(((DOMSource)part).getNode());  } else {    element=getFirstElement((Source)part);  }  if (element != null) {    answer.add(element);  }  if (LOG.isTraceEnabled()) {    LOG.trace("Extract body element {}",element == null ? "null" : XMLUtils.toString(element));  }} else if (part instanceof Element) {  answer.add((Element)part);} else {  if (LOG.isDebugEnabled()) {    LOG.debug("Unhandled part type '" + part.getClass());  }} @AT@ 28018 @LENGTH@ 714
---UPD InstanceofExpression@@part instanceof DOMSource @TO@ part instanceof Source @AT@ 28022 @LENGTH@ 25
------UPD SimpleType@@DOMSource @TO@ Source @AT@ 28038 @LENGTH@ 9
---UPD Block@@ThenBody:{  Element element=getFirstElement(((DOMSource)part).getNode());  if (element != null) {    answer.add(element);  }  if (LOG.isTraceEnabled()) {    LOG.trace("Extract body element {}",element == null ? "null" : XMLUtils.toString(element));  }} @TO@ ThenBody:{  Element element;  if (part instanceof DOMSource) {    element=getFirstElement(((DOMSource)part).getNode());  } else {    element=getFirstElement((Source)part);  }  if (element != null) {    answer.add(element);  }  if (LOG.isTraceEnabled()) {    LOG.trace("Extract body element {}",element == null ? "null" : XMLUtils.toString(element));  }} @AT@ 28049 @LENGTH@ 433
------UPD VariableDeclarationStatement@@Element element=getFirstElement(((DOMSource)part).getNode()); @TO@ Element element; @AT@ 28067 @LENGTH@ 63
---------UPD VariableDeclarationFragment@@element=getFirstElement(((DOMSource)part).getNode()) @TO@ element @AT@ 28075 @LENGTH@ 54
------INS IfStatement@@if (part instanceof DOMSource) {  element=getFirstElement(((DOMSource)part).getNode());} else {  element=getFirstElement((Source)part);} @TO@ Block@@ThenBody:{  Element element=getFirstElement(((DOMSource)part).getNode());  if (element != null) {    answer.add(element);  }  if (LOG.isTraceEnabled()) {    LOG.trace("Extract body element {}",element == null ? "null" : XMLUtils.toString(element));  }} @AT@ 28161 @LENGTH@ 212
---------INS InstanceofExpression@@part instanceof DOMSource @TO@ IfStatement@@if (part instanceof DOMSource) {  element=getFirstElement(((DOMSource)part).getNode());} else {  element=getFirstElement((Source)part);} @AT@ 28165 @LENGTH@ 25
------------INS SimpleName@@part @TO@ InstanceofExpression@@part instanceof DOMSource @AT@ 28165 @LENGTH@ 4
------------INS Instanceof@@instanceof @TO@ InstanceofExpression@@part instanceof DOMSource @AT@ 28170 @LENGTH@ 10
------------INS SimpleType@@DOMSource @TO@ InstanceofExpression@@part instanceof DOMSource @AT@ 28181 @LENGTH@ 9
---------INS Block@@ThenBody:{  element=getFirstElement(((DOMSource)part).getNode());} @TO@ IfStatement@@if (part instanceof DOMSource) {  element=getFirstElement(((DOMSource)part).getNode());} else {  element=getFirstElement((Source)part);} @AT@ 28192 @LENGTH@ 95
------------INS ExpressionStatement@@Assignment:element=getFirstElement(((DOMSource)part).getNode()) @TO@ Block@@ThenBody:{  element=getFirstElement(((DOMSource)part).getNode());} @AT@ 28214 @LENGTH@ 55
---------------INS Assignment@@element=getFirstElement(((DOMSource)part).getNode()) @TO@ ExpressionStatement@@Assignment:element=getFirstElement(((DOMSource)part).getNode()) @AT@ 28214 @LENGTH@ 54
------------------MOV MethodInvocation@@getFirstElement(((DOMSource)part).getNode()) @TO@ Assignment@@element=getFirstElement(((DOMSource)part).getNode()) @AT@ 28085 @LENGTH@ 44
------------------INS SimpleName@@element @TO@ Assignment@@element=getFirstElement(((DOMSource)part).getNode()) @AT@ 28214 @LENGTH@ 7
------------------INS Operator@@= @TO@ Assignment@@element=getFirstElement(((DOMSource)part).getNode()) @AT@ 28221 @LENGTH@ 1
---------INS Block@@ElseBody:{  element=getFirstElement((Source)part);} @TO@ IfStatement@@if (part instanceof DOMSource) {  element=getFirstElement(((DOMSource)part).getNode());} else {  element=getFirstElement((Source)part);} @AT@ 28293 @LENGTH@ 80
------------INS ExpressionStatement@@Assignment:element=getFirstElement((Source)part) @TO@ Block@@ElseBody:{  element=getFirstElement((Source)part);} @AT@ 28315 @LENGTH@ 40
---------------INS Assignment@@element=getFirstElement((Source)part) @TO@ ExpressionStatement@@Assignment:element=getFirstElement((Source)part) @AT@ 28315 @LENGTH@ 39
------------------INS SimpleName@@element @TO@ Assignment@@element=getFirstElement((Source)part) @AT@ 28315 @LENGTH@ 7
------------------INS Operator@@= @TO@ Assignment@@element=getFirstElement((Source)part) @AT@ 28322 @LENGTH@ 1
------------------INS MethodInvocation@@getFirstElement((Source)part) @TO@ Assignment@@element=getFirstElement((Source)part) @AT@ 28325 @LENGTH@ 29
---------------------INS SimpleName@@MethodName:getFirstElement:[(Source)part] @TO@ MethodInvocation@@getFirstElement((Source)part) @AT@ 28325 @LENGTH@ 29
------------------------INS CastExpression@@(Source)part @TO@ SimpleName@@MethodName:getFirstElement:[(Source)part] @AT@ 28341 @LENGTH@ 12
---------------------------INS SimpleType@@Source @TO@ CastExpression@@(Source)part @AT@ 28342 @LENGTH@ 6
---------------------------INS SimpleName@@part @TO@ CastExpression@@(Source)part @AT@ 28349 @LENGTH@ 4


UPD ExpressionStatement@@MethodInvocation:setSocketThreads.get(OP).set("set-server-management-socket-threads") @TO@ MethodInvocation:setSocketThreads.get(OP).set("write-server-management-socket-threads") @AT@ 14616 @LENGTH@ 69
---UPD MethodInvocation@@setSocketThreads.get(OP).set("set-server-management-socket-threads") @TO@ setSocketThreads.get(OP).set("write-server-management-socket-threads") @AT@ 14616 @LENGTH@ 68
------UPD SimpleName@@MethodName:set:["set-server-management-socket-threads"] @TO@ MethodName:set:["write-server-management-socket-threads"] @AT@ 14641 @LENGTH@ 43
---------UPD StringLiteral@@"set-server-management-socket-threads" @TO@ "write-server-management-socket-threads" @AT@ 14645 @LENGTH@ 38


DEL VariableDeclarationStatement@@DatagramSocket ds=new DatagramSocket(); @AT@ 2278 @LENGTH@ 41
---DEL SimpleType@@DatagramSocket @AT@ 2278 @LENGTH@ 14
---DEL VariableDeclarationFragment@@ds=new DatagramSocket() @AT@ 2293 @LENGTH@ 25
------DEL SimpleName@@ds @AT@ 2293 @LENGTH@ 2
------DEL ClassInstanceCreation@@DatagramSocket[] @AT@ 2298 @LENGTH@ 20
---------DEL New@@new @AT@ 2298 @LENGTH@ 3
---------DEL SimpleType@@DatagramSocket @AT@ 2302 @LENGTH@ 14


DEL MethodDeclaration@@public, void, MethodName:shouldInterceptLocalPartMatch, Exception,  @AT@ 3033 @LENGTH@ 343
---DEL Modifier@@public @AT@ 3033 @LENGTH@ 6
---DEL PrimitiveType@@void @AT@ 3040 @LENGTH@ 4
---DEL SimpleName@@MethodName:shouldInterceptLocalPartMatch @AT@ 3045 @LENGTH@ 29
---DEL SimpleType@@Exception @AT@ 3084 @LENGTH@ 9
---DEL VariableDeclarationStatement@@PayloadRootSmartEndpointInterceptor interceptor=new PayloadRootSmartEndpointInterceptor(delegate,null,localPart); @AT@ 3104 @LENGTH@ 133
------DEL SimpleType@@PayloadRootSmartEndpointInterceptor @AT@ 3104 @LENGTH@ 35
------DEL VariableDeclarationFragment@@interceptor=new PayloadRootSmartEndpointInterceptor(delegate,null,localPart) @AT@ 3140 @LENGTH@ 96
---------DEL SimpleName@@interceptor @AT@ 3140 @LENGTH@ 11
---------DEL ClassInstanceCreation@@PayloadRootSmartEndpointInterceptor[delegate, null, localPart] @AT@ 3170 @LENGTH@ 66
------------DEL New@@new @AT@ 3170 @LENGTH@ 3
------------DEL SimpleType@@PayloadRootSmartEndpointInterceptor @AT@ 3174 @LENGTH@ 35
------------DEL SimpleName@@delegate @AT@ 3210 @LENGTH@ 8
------------DEL NullLiteral@@null @AT@ 3220 @LENGTH@ 4
------------DEL SimpleName@@localPart @AT@ 3226 @LENGTH@ 9
---DEL VariableDeclarationStatement@@boolean result=interceptor.shouldIntercept(messageContext,null); @AT@ 3247 @LENGTH@ 67
------DEL PrimitiveType@@boolean @AT@ 3247 @LENGTH@ 7
------DEL VariableDeclarationFragment@@result=interceptor.shouldIntercept(messageContext,null) @AT@ 3255 @LENGTH@ 58
---------DEL SimpleName@@result @AT@ 3255 @LENGTH@ 6
---------DEL MethodInvocation@@interceptor.shouldIntercept(messageContext,null) @AT@ 3264 @LENGTH@ 49
------------DEL SimpleName@@Name:interceptor @AT@ 3264 @LENGTH@ 11
------------DEL SimpleName@@MethodName:shouldIntercept:[messageContext, null] @AT@ 3276 @LENGTH@ 37
---------------DEL SimpleName@@messageContext @AT@ 3292 @LENGTH@ 14
---------------DEL NullLiteral@@null @AT@ 3308 @LENGTH@ 4
---DEL ExpressionStatement@@MethodInvocation:assertTrue("Interceptor should apply",result) @AT@ 3323 @LENGTH@ 47
------DEL MethodInvocation@@assertTrue("Interceptor should apply",result) @AT@ 3323 @LENGTH@ 46
---------DEL SimpleName@@MethodName:assertTrue:["Interceptor should apply", result] @AT@ 3323 @LENGTH@ 46
------------DEL StringLiteral@@"Interceptor should apply" @AT@ 3334 @LENGTH@ 26
------------DEL SimpleName@@result @AT@ 3362 @LENGTH@ 6


UPD IfStatement@@if (noArgConstructor != null) {  log.info("Using " + c + " no-arg constructor");  StateProvider.setUnderlyingState(n);  T t=noArgConstructor.newInstance();  setState(t,n);  return t;} @TO@ if (noArgConstructor != null) {  log.info("Using " + c + " no-arg constructor");  StateProvider.setUnderlyingState(n);  T t;  try {    t=noArgConstructor.newInstance();    setState(t,n);  }  finally {    StateProvider.retrieveState();  }  return t;} @AT@ 1868 @LENGTH@ 214
---UPD Block@@ThenBody:{  log.info("Using " + c + " no-arg constructor");  StateProvider.setUnderlyingState(n);  T t=noArgConstructor.newInstance();  setState(t,n);  return t;} @TO@ ThenBody:{  log.info("Using " + c + " no-arg constructor");  StateProvider.setUnderlyingState(n);  T t;  try {    t=noArgConstructor.newInstance();    setState(t,n);  }  finally {    StateProvider.retrieveState();  }  return t;} @AT@ 1898 @LENGTH@ 184
------DEL VariableDeclarationStatement@@T t=noArgConstructor.newInstance(); @AT@ 2006 @LENGTH@ 37
---------DEL VariableDeclarationFragment@@t=noArgConstructor.newInstance() @AT@ 2008 @LENGTH@ 34
------------DEL MethodInvocation@@noArgConstructor.newInstance() @AT@ 2012 @LENGTH@ 30
------INS VariableDeclarationStatement@@T t; @TO@ Block@@ThenBody:{  log.info("Using " + c + " no-arg constructor");  StateProvider.setUnderlyingState(n);  T t=noArgConstructor.newInstance();  setState(t,n);  return t;} @AT@ 2015 @LENGTH@ 4
---------MOV SimpleType@@T @TO@ VariableDeclarationStatement@@T t; @AT@ 2006 @LENGTH@ 1
---------INS VariableDeclarationFragment@@t @TO@ VariableDeclarationStatement@@T t; @AT@ 2017 @LENGTH@ 1
------------MOV SimpleName@@t @TO@ VariableDeclarationFragment@@t @AT@ 2008 @LENGTH@ 1
------INS TryStatement@@try {  t=noArgConstructor.newInstance();  setState(t,n);}  finally {  StateProvider.retrieveState();} @TO@ Block@@ThenBody:{  log.info("Using " + c + " no-arg constructor");  StateProvider.setUnderlyingState(n);  T t=noArgConstructor.newInstance();  setState(t,n);  return t;} @AT@ 2033 @LENGTH@ 175
---------MOV ExpressionStatement@@MethodInvocation:setState(t,n) @TO@ TryStatement@@try {  t=noArgConstructor.newInstance();  setState(t,n);}  finally {  StateProvider.retrieveState();} @AT@ 2048 @LENGTH@ 15
---------INS ExpressionStatement@@Assignment:t=noArgConstructor.newInstance() @TO@ TryStatement@@try {  t=noArgConstructor.newInstance();  setState(t,n);}  finally {  StateProvider.retrieveState();} @AT@ 2056 @LENGTH@ 35
------------INS Assignment@@t=noArgConstructor.newInstance() @TO@ ExpressionStatement@@Assignment:t=noArgConstructor.newInstance() @AT@ 2056 @LENGTH@ 34
---------------INS SimpleName@@t @TO@ Assignment@@t=noArgConstructor.newInstance() @AT@ 2056 @LENGTH@ 1
---------------INS Operator@@= @TO@ Assignment@@t=noArgConstructor.newInstance() @AT@ 2057 @LENGTH@ 1
---------------INS MethodInvocation@@noArgConstructor.newInstance() @TO@ Assignment@@t=noArgConstructor.newInstance() @AT@ 2060 @LENGTH@ 30
------------------MOV SimpleName@@Name:noArgConstructor @TO@ MethodInvocation@@noArgConstructor.newInstance() @AT@ 2012 @LENGTH@ 16
------------------MOV SimpleName@@MethodName:newInstance:[] @TO@ MethodInvocation@@noArgConstructor.newInstance() @AT@ 2029 @LENGTH@ 13
---------INS Block@@FinallyBody:{  StateProvider.retrieveState();} @TO@ TryStatement@@try {  t=noArgConstructor.newInstance();  setState(t,n);}  finally {  StateProvider.retrieveState();} @AT@ 2148 @LENGTH@ 60
------------INS ExpressionStatement@@MethodInvocation:StateProvider.retrieveState() @TO@ Block@@FinallyBody:{  StateProvider.retrieveState();} @AT@ 2163 @LENGTH@ 30
---------------INS MethodInvocation@@StateProvider.retrieveState() @TO@ ExpressionStatement@@MethodInvocation:StateProvider.retrieveState() @AT@ 2163 @LENGTH@ 29
------------------INS SimpleName@@Name:StateProvider @TO@ MethodInvocation@@StateProvider.retrieveState() @AT@ 2163 @LENGTH@ 13
------------------INS SimpleName@@MethodName:retrieveState:[] @TO@ MethodInvocation@@StateProvider.retrieveState() @AT@ 2177 @LENGTH@ 15


UPD ExpressionStatement@@MethodInvocation:writeAttribute(writer,attribute,value) @TO@ MethodInvocation:writer.writeAttribute(attribute.getLocalName(),value) @AT@ 59419 @LENGTH@ 41
---UPD MethodInvocation@@writeAttribute(writer,attribute,value) @TO@ writer.writeAttribute(attribute.getLocalName(),value) @AT@ 59419 @LENGTH@ 40
------INS SimpleName@@Name:writer @TO@ MethodInvocation@@writeAttribute(writer,attribute,value) @AT@ 59419 @LENGTH@ 6
------UPD SimpleName@@MethodName:writeAttribute:[writer, attribute, value] @TO@ MethodName:writeAttribute:[attribute.getLocalName(), value] @AT@ 59419 @LENGTH@ 40
---------DEL SimpleName@@writer @AT@ 59434 @LENGTH@ 6
---------INS MethodInvocation@@attribute.getLocalName() @TO@ SimpleName@@MethodName:writeAttribute:[writer, attribute, value] @AT@ 59441 @LENGTH@ 24
------------INS SimpleName@@Name:attribute @TO@ MethodInvocation@@attribute.getLocalName() @AT@ 59441 @LENGTH@ 9
------------INS SimpleName@@MethodName:getLocalName:[] @TO@ MethodInvocation@@attribute.getLocalName() @AT@ 59451 @LENGTH@ 14
---------DEL SimpleName@@attribute @AT@ 59442 @LENGTH@ 9


UPD VariableDeclarationStatement@@final ThreadFactory threadFactory=new JBossThreadFactory(new ThreadGroup("DeplooymentScanner-threads"),Boolean.FALSE,null,"%G - %t",null,null,AccessController.getContext()); @TO@ final ThreadFactory threadFactory=new JBossThreadFactory(new ThreadGroup("DeploymentScanner-threads"),Boolean.FALSE,null,"%G - %t",null,null,AccessController.getContext()); @AT@ 4419 @LENGTH@ 181
---UPD VariableDeclarationFragment@@threadFactory=new JBossThreadFactory(new ThreadGroup("DeplooymentScanner-threads"),Boolean.FALSE,null,"%G - %t",null,null,AccessController.getContext()) @TO@ threadFactory=new JBossThreadFactory(new ThreadGroup("DeploymentScanner-threads"),Boolean.FALSE,null,"%G - %t",null,null,AccessController.getContext()) @AT@ 4439 @LENGTH@ 160
------UPD ClassInstanceCreation@@JBossThreadFactory[new ThreadGroup("DeplooymentScanner-threads"), Boolean.FALSE, null, "%G - %t", null, null, AccessController.getContext()] @TO@ JBossThreadFactory[new ThreadGroup("DeploymentScanner-threads"), Boolean.FALSE, null, "%G - %t", null, null, AccessController.getContext()] @AT@ 4455 @LENGTH@ 144
---------UPD ClassInstanceCreation@@ThreadGroup["DeplooymentScanner-threads"] @TO@ ThreadGroup["DeploymentScanner-threads"] @AT@ 4478 @LENGTH@ 45
------------UPD StringLiteral@@"DeplooymentScanner-threads" @TO@ "DeploymentScanner-threads" @AT@ 4494 @LENGTH@ 28


UPD VariableDeclarationStatement@@MountHandle mount=phaseContext.getDeploymentUnit().getAttachment(Attachments.DEPLOYMENT_ROOT_MOUNT_HANDLE); @TO@ MountHandle mount=phaseContext.getDeploymentUnit().getAttachment(Attachments.DEPLOYMENT_ROOT).getMountHandle(); @AT@ 4691 @LENGTH@ 109
---UPD VariableDeclarationFragment@@mount=phaseContext.getDeploymentUnit().getAttachment(Attachments.DEPLOYMENT_ROOT_MOUNT_HANDLE) @TO@ mount=phaseContext.getDeploymentUnit().getAttachment(Attachments.DEPLOYMENT_ROOT).getMountHandle() @AT@ 4703 @LENGTH@ 96
------UPD MethodInvocation@@phaseContext.getDeploymentUnit().getAttachment(Attachments.DEPLOYMENT_ROOT_MOUNT_HANDLE) @TO@ phaseContext.getDeploymentUnit().getAttachment(Attachments.DEPLOYMENT_ROOT).getMountHandle() @AT@ 4711 @LENGTH@ 88
---------INS MethodInvocation@@MethodName:getAttachment:[Attachments.DEPLOYMENT_ROOT] @TO@ MethodInvocation@@phaseContext.getDeploymentUnit().getAttachment(Attachments.DEPLOYMENT_ROOT_MOUNT_HANDLE) @AT@ 4711 @LENGTH@ 75
------------INS QualifiedName@@Attachments.DEPLOYMENT_ROOT @TO@ MethodInvocation@@MethodName:getAttachment:[Attachments.DEPLOYMENT_ROOT] @AT@ 4758 @LENGTH@ 27
---------------MOV SimpleName@@Attachments @TO@ QualifiedName@@Attachments.DEPLOYMENT_ROOT @AT@ 4758 @LENGTH@ 11
---------------MOV SimpleName@@DEPLOYMENT_ROOT_MOUNT_HANDLE @TO@ QualifiedName@@Attachments.DEPLOYMENT_ROOT @AT@ 4770 @LENGTH@ 28
---------DEL SimpleName@@MethodName:getAttachment:[Attachments.DEPLOYMENT_ROOT_MOUNT_HANDLE] @AT@ 4744 @LENGTH@ 55
------------DEL QualifiedName@@Attachments.DEPLOYMENT_ROOT_MOUNT_HANDLE @AT@ 4758 @LENGTH@ 40
---------INS SimpleName@@MethodName:getMountHandle:[] @TO@ MethodInvocation@@phaseContext.getDeploymentUnit().getAttachment(Attachments.DEPLOYMENT_ROOT_MOUNT_HANDLE) @AT@ 4787 @LENGTH@ 16


UPD ReturnStatement@@ClassInstanceCreation:new Property(source,type) @TO@ ClassInstanceCreation:new Property(source,type,addTail) @AT@ 7135 @LENGTH@ 34
---UPD ClassInstanceCreation@@Property[source, type] @TO@ Property[source, type, addTail] @AT@ 7142 @LENGTH@ 26
------INS SimpleName@@addTail @TO@ ClassInstanceCreation@@Property[source, type] @AT@ 7169 @LENGTH@ 7


INS MethodDeclaration@@public, static, void, MethodName:detachOSGiMetaData, final DeploymentUnit context,  @TO@ TypeDeclaration@@[public]OSGiMetaDataAttachment,  @AT@ 1772 @LENGTH@ 114
---INS Modifier@@public @TO@ MethodDeclaration@@public, static, void, MethodName:detachOSGiMetaData, final DeploymentUnit context,  @AT@ 1772 @LENGTH@ 6
---INS Modifier@@static @TO@ MethodDeclaration@@public, static, void, MethodName:detachOSGiMetaData, final DeploymentUnit context,  @AT@ 1779 @LENGTH@ 6
---INS PrimitiveType@@void @TO@ MethodDeclaration@@public, static, void, MethodName:detachOSGiMetaData, final DeploymentUnit context,  @AT@ 1786 @LENGTH@ 4
---INS SimpleName@@MethodName:detachOSGiMetaData @TO@ MethodDeclaration@@public, static, void, MethodName:detachOSGiMetaData, final DeploymentUnit context,  @AT@ 1791 @LENGTH@ 18
---INS SingleVariableDeclaration@@final DeploymentUnit context @TO@ MethodDeclaration@@public, static, void, MethodName:detachOSGiMetaData, final DeploymentUnit context,  @AT@ 1810 @LENGTH@ 28
------INS Modifier@@final @TO@ SingleVariableDeclaration@@final DeploymentUnit context @AT@ 1810 @LENGTH@ 5
------INS SimpleType@@DeploymentUnit @TO@ SingleVariableDeclaration@@final DeploymentUnit context @AT@ 1816 @LENGTH@ 14
------INS SimpleName@@context @TO@ SingleVariableDeclaration@@final DeploymentUnit context @AT@ 1831 @LENGTH@ 7
---INS ExpressionStatement@@MethodInvocation:context.removeAttachment(KEY) @TO@ MethodDeclaration@@public, static, void, MethodName:detachOSGiMetaData, final DeploymentUnit context,  @AT@ 1850 @LENGTH@ 30
------INS MethodInvocation@@context.removeAttachment(KEY) @TO@ ExpressionStatement@@MethodInvocation:context.removeAttachment(KEY) @AT@ 1850 @LENGTH@ 29
---------INS SimpleName@@Name:context @TO@ MethodInvocation@@context.removeAttachment(KEY) @AT@ 1850 @LENGTH@ 7
---------INS SimpleName@@MethodName:removeAttachment:[KEY] @TO@ MethodInvocation@@context.removeAttachment(KEY) @AT@ 1858 @LENGTH@ 21
------------INS SimpleName@@KEY @TO@ SimpleName@@MethodName:removeAttachment:[KEY] @AT@ 1875 @LENGTH@ 3


INS FieldDeclaration@@public, static, final, int, [DEPENDENCIES_SUB_DEPLOYMENTS=0xD00] @TO@ EnumDeclaration@@[public]Phase,  @AT@ 10802 @LENGTH@ 76
---INS Modifier@@public @TO@ FieldDeclaration@@public, static, final, int, [DEPENDENCIES_SUB_DEPLOYMENTS=0xD00] @AT@ 10802 @LENGTH@ 6
---INS Modifier@@static @TO@ FieldDeclaration@@public, static, final, int, [DEPENDENCIES_SUB_DEPLOYMENTS=0xD00] @AT@ 10809 @LENGTH@ 6
---INS Modifier@@final @TO@ FieldDeclaration@@public, static, final, int, [DEPENDENCIES_SUB_DEPLOYMENTS=0xD00] @AT@ 10816 @LENGTH@ 5
---INS PrimitiveType@@int @TO@ FieldDeclaration@@public, static, final, int, [DEPENDENCIES_SUB_DEPLOYMENTS=0xD00] @AT@ 10822 @LENGTH@ 3
---INS VariableDeclarationFragment@@DEPENDENCIES_SUB_DEPLOYMENTS=0xD00 @TO@ FieldDeclaration@@public, static, final, int, [DEPENDENCIES_SUB_DEPLOYMENTS=0xD00] @AT@ 10826 @LENGTH@ 51
------INS SimpleName@@DEPENDENCIES_SUB_DEPLOYMENTS @TO@ VariableDeclarationFragment@@DEPENDENCIES_SUB_DEPLOYMENTS=0xD00 @AT@ 10826 @LENGTH@ 28
------INS NumberLiteral@@0xD00 @TO@ VariableDeclarationFragment@@DEPENDENCIES_SUB_DEPLOYMENTS=0xD00 @AT@ 10872 @LENGTH@ 5


UPD ExpressionStatement@@MethodInvocation:serviceTarget.addService(ConnectorServices.RA_REPOSISTORY_SERVICE,raRepositoryService).install() @TO@ MethodInvocation:serviceTarget.addService(ConnectorServices.RA_REPOSISTORY_SERVICE,raRepositoryService).addDependency(ConnectorServices.IRONJACAMAR_MDR,MetadataRepository.class,raRepositoryService.getMdrInjector()).install() @AT@ 2742 @LENGTH@ 98
---UPD MethodInvocation@@serviceTarget.addService(ConnectorServices.RA_REPOSISTORY_SERVICE,raRepositoryService).install() @TO@ serviceTarget.addService(ConnectorServices.RA_REPOSISTORY_SERVICE,raRepositoryService).addDependency(ConnectorServices.IRONJACAMAR_MDR,MetadataRepository.class,raRepositoryService.getMdrInjector()).install() @AT@ 2742 @LENGTH@ 97
------INS MethodInvocation@@MethodName:addDependency:[ConnectorServices.IRONJACAMAR_MDR, MetadataRepository.class, raRepositoryService.getMdrInjector()] @TO@ MethodInvocation@@serviceTarget.addService(ConnectorServices.RA_REPOSISTORY_SERVICE,raRepositoryService).install() @AT@ 2796 @LENGTH@ 258
---------INS QualifiedName@@ConnectorServices.IRONJACAMAR_MDR @TO@ MethodInvocation@@MethodName:addDependency:[ConnectorServices.IRONJACAMAR_MDR, MetadataRepository.class, raRepositoryService.getMdrInjector()] @AT@ 2932 @LENGTH@ 33
------------INS SimpleName@@ConnectorServices @TO@ QualifiedName@@ConnectorServices.IRONJACAMAR_MDR @AT@ 2932 @LENGTH@ 17
------------INS SimpleName@@IRONJACAMAR_MDR @TO@ QualifiedName@@ConnectorServices.IRONJACAMAR_MDR @AT@ 2950 @LENGTH@ 15
---------INS TypeLiteral@@MetadataRepository.class @TO@ MethodInvocation@@MethodName:addDependency:[ConnectorServices.IRONJACAMAR_MDR, MetadataRepository.class, raRepositoryService.getMdrInjector()] @AT@ 2967 @LENGTH@ 24
---------INS MethodInvocation@@raRepositoryService.getMdrInjector() @TO@ MethodInvocation@@MethodName:addDependency:[ConnectorServices.IRONJACAMAR_MDR, MetadataRepository.class, raRepositoryService.getMdrInjector()] @AT@ 3017 @LENGTH@ 36
------------INS SimpleName@@Name:raRepositoryService @TO@ MethodInvocation@@raRepositoryService.getMdrInjector() @AT@ 3017 @LENGTH@ 19
------------INS SimpleName@@MethodName:getMdrInjector:[] @TO@ MethodInvocation@@raRepositoryService.getMdrInjector() @AT@ 3037 @LENGTH@ 16


UPD EnhancedForStatement@@for (ResourceRoot resourceRoot : allResourceRoots) {  if (!ModuleRootMarker.isModuleRoot(resourceRoot))   continue;  final AttachmentList<ExtensionListEntry> entries=resourceRoot.getAttachment(Attachments.EXTENSION_LIST_ENTRIES);  if (entries != null) {    for (    ExtensionListEntry entry : entries) {      final ModuleIdentifier extension=index.findExtension(entry.getName(),entry.getSpecificationVersion(),entry.getImplementationVersion(),entry.getImplementationVendorId());      if (extension != null) {        moduleSpecification.addDependency(new ModuleDependency(moduleLoader,extension,false,false,true));        nextPhaseDeps.add(ServiceModuleLoader.moduleSpecServiceName(extension));        nextPhaseDeps.add(ServiceModuleLoader.moduleSpecServiceName(extension));      } else {        log.warnf("Could not find Extension-List entry " + entry + " referenced from "+ resourceRoot);      }    }  }} @TO@ for (ResourceRoot resourceRoot : allResourceRoots) {  final AttachmentList<ExtensionListEntry> entries=resourceRoot.getAttachment(Attachments.EXTENSION_LIST_ENTRIES);  if (entries != null) {    for (    ExtensionListEntry entry : entries) {      final ModuleIdentifier extension=index.findExtension(entry.getName(),entry.getSpecificationVersion(),entry.getImplementationVersion(),entry.getImplementationVendorId());      if (extension != null) {        moduleSpecification.addDependency(new ModuleDependency(moduleLoader,extension,false,false,true));        nextPhaseDeps.add(ServiceModuleLoader.moduleSpecServiceName(extension));        nextPhaseDeps.add(ServiceModuleLoader.moduleSpecServiceName(extension));      } else {        log.warnf("Could not find Extension-List entry " + entry + " referenced from "+ resourceRoot);      }    }  }} @AT@ 3182 @LENGTH@ 1164
---DEL IfStatement@@if (!ModuleRootMarker.isModuleRoot(resourceRoot)) continue; @AT@ 3247 @LENGTH@ 75
------DEL PrefixExpression@@!ModuleRootMarker.isModuleRoot(resourceRoot) @AT@ 3251 @LENGTH@ 44
---------DEL Operator@@! @AT@ 3251 @LENGTH@ 1
---------DEL MethodInvocation@@ModuleRootMarker.isModuleRoot(resourceRoot) @AT@ 3252 @LENGTH@ 43
------------DEL SimpleName@@Name:ModuleRootMarker @AT@ 3252 @LENGTH@ 16
------------DEL SimpleName@@MethodName:isModuleRoot:[resourceRoot] @AT@ 3269 @LENGTH@ 26
---------------DEL SimpleName@@resourceRoot @AT@ 3282 @LENGTH@ 12
------DEL Block@@ThenBody:continue; @AT@ 3313 @LENGTH@ 9
---------DEL ContinueStatement@@ @AT@ 3313 @LENGTH@ 9


UPD TryStatement@@try {  ((DisposableBean)connectionFactory).destroy();  System.out.println("Succesfully cleaned up factory " + connectionFactory);} catch (Exception ex) {  System.err.println("Cannot clean factory " + connectionFactory + ex);} @TO@ try {  ((DisposableBean)connectionFactory).destroy();} catch (Exception ex) {  System.err.println("Cannot clean factory " + connectionFactory + ex);} @AT@ 1497 @LENGTH@ 248
---DEL ExpressionStatement@@MethodInvocation:System.out.println("Succesfully cleaned up factory " + connectionFactory) @AT@ 1561 @LENGTH@ 74
------DEL MethodInvocation@@System.out.println("Succesfully cleaned up factory " + connectionFactory) @AT@ 1561 @LENGTH@ 73
---------DEL QualifiedName@@Name:System.out @AT@ 1561 @LENGTH@ 10
---------DEL SimpleName@@MethodName:println:["Succesfully cleaned up factory " + connectionFactory] @AT@ 1572 @LENGTH@ 62
------------DEL InfixExpression@@"Succesfully cleaned up factory " + connectionFactory @AT@ 1580 @LENGTH@ 53
---------------DEL StringLiteral@@"Succesfully cleaned up factory " @AT@ 1580 @LENGTH@ 33
---------------DEL Operator@@+ @AT@ 1613 @LENGTH@ 1
---------------DEL SimpleName@@connectionFactory @AT@ 1616 @LENGTH@ 17


UPD IfStatement@@if (modelNode.has(LOCAL)) {  writer.writeEmptyElement(Element.LOCAL.getLocalName());} @TO@ if (modelNode.hasDefined(LOCAL)) {  writer.writeEmptyElement(Element.LOCAL.getLocalName());} else if (modelNode.hasDefined(REMOTE)) {  writer.writeStartElement(Element.REMOTE.getLocalName());  final ModelNode remote=modelNode.get(REMOTE);  if (remote.has(HOST)) {    writeAttribute(writer,Attribute.HOST,remote.get(HOST).asString());  }  if (remote.has(PORT)) {    writeAttribute(writer,Attribute.PORT,remote.get(PORT).asString());  }  writer.writeEndElement();} @AT@ 22833 @LENGTH@ 105
---UPD MethodInvocation@@modelNode.has(LOCAL) @TO@ modelNode.hasDefined(LOCAL) @AT@ 22837 @LENGTH@ 20
------UPD SimpleName@@MethodName:has:[LOCAL] @TO@ MethodName:hasDefined:[LOCAL] @AT@ 22847 @LENGTH@ 10
---INS Block@@ElseBody:if (modelNode.hasDefined(REMOTE)) {  writer.writeStartElement(Element.REMOTE.getLocalName());  final ModelNode remote=modelNode.get(REMOTE);  if (remote.has(HOST)) {    writeAttribute(writer,Attribute.HOST,remote.get(HOST).asString());  }  if (remote.has(PORT)) {    writeAttribute(writer,Attribute.PORT,remote.get(PORT).asString());  }  writer.writeEndElement();} @TO@ IfStatement@@if (modelNode.has(LOCAL)) {  writer.writeEmptyElement(Element.LOCAL.getLocalName());} @AT@ 22959 @LENGTH@ 482
------MOV IfStatement@@if (modelNode.has(REMOTE)) {  writer.writeStartElement(Element.REMOTE.getLocalName());  final ModelNode remote=modelNode.get(REMOTE);  if (remote.has(HOST)) {    writeAttribute(writer,Attribute.HOST,remote.get(HOST).asString());  }  if (remote.has(PORT)) {    writeAttribute(writer,Attribute.PORT,remote.get(PORT).asString());  }  writer.writeEndElement();} @TO@ Block@@ElseBody:if (modelNode.hasDefined(REMOTE)) {  writer.writeStartElement(Element.REMOTE.getLocalName());  final ModelNode remote=modelNode.get(REMOTE);  if (remote.has(HOST)) {    writeAttribute(writer,Attribute.HOST,remote.get(HOST).asString());  }  if (remote.has(PORT)) {    writeAttribute(writer,Attribute.PORT,remote.get(PORT).asString());  }  writer.writeEndElement();} @AT@ 22947 @LENGTH@ 475
---------UPD MethodInvocation@@modelNode.has(REMOTE) @TO@ modelNode.hasDefined(REMOTE) @AT@ 22951 @LENGTH@ 21
------------UPD SimpleName@@MethodName:has:[REMOTE] @TO@ MethodName:hasDefined:[REMOTE] @AT@ 22961 @LENGTH@ 11


INS MethodDeclaration@@public, void, MethodName:setUp, Exception,  @TO@ TypeDeclaration@@[public]MailProcessOnlyUnseenMessagesTest, CamelTestSupport @AT@ 1401 @LENGTH@ 93
---INS Modifier@@public @TO@ MethodDeclaration@@public, void, MethodName:setUp, Exception,  @AT@ 1401 @LENGTH@ 6
---INS PrimitiveType@@void @TO@ MethodDeclaration@@public, void, MethodName:setUp, Exception,  @AT@ 1408 @LENGTH@ 4
---INS SimpleName@@MethodName:setUp @TO@ MethodDeclaration@@public, void, MethodName:setUp, Exception,  @AT@ 1413 @LENGTH@ 5
---INS SimpleType@@Exception @TO@ MethodDeclaration@@public, void, MethodName:setUp, Exception,  @AT@ 1428 @LENGTH@ 9
---INS ExpressionStatement@@MethodInvocation:prepareMailbox() @TO@ MethodDeclaration@@public, void, MethodName:setUp, Exception,  @AT@ 1448 @LENGTH@ 17
------INS MethodInvocation@@MethodName:prepareMailbox:[] @TO@ ExpressionStatement@@MethodInvocation:prepareMailbox() @AT@ 1448 @LENGTH@ 16
---INS ExpressionStatement@@SuperMethodInvocation:super.setUp() @TO@ MethodDeclaration@@public, void, MethodName:setUp, Exception,  @AT@ 1474 @LENGTH@ 14
------INS SuperMethodInvocation@@super.setUp() @TO@ ExpressionStatement@@SuperMethodInvocation:super.setUp() @AT@ 1474 @LENGTH@ 13
---------INS SimpleName@@MethodName:setUp:[] @TO@ SuperMethodInvocation@@super.setUp() @AT@ 1480 @LENGTH@ 5


UPD MethodDeclaration@@public, static, void, MethodName:addService, final BatchBuilder batchBuilder,  @TO@ public, static, void, MethodName:addService, final ServiceTarget target,  @AT@ 2579 @LENGTH@ 385
---UPD SingleVariableDeclaration@@final BatchBuilder batchBuilder @TO@ final ServiceTarget target @AT@ 2609 @LENGTH@ 31
------UPD SimpleType@@BatchBuilder @TO@ ServiceTarget @AT@ 2615 @LENGTH@ 12
------UPD SimpleName@@batchBuilder @TO@ target @AT@ 2628 @LENGTH@ 12
---UPD ExpressionStatement@@MethodInvocation:batchBuilder.addService(SERVICE_NAME,service).addDependency(MBeanServerService.SERVICE_NAME,MBeanServer.class,service.injectedMBeanServer).setInitialMode(Mode.ACTIVE).install() @TO@ MethodInvocation:target.addService(SERVICE_NAME,service).addDependency(MBeanServerService.SERVICE_NAME,MBeanServer.class,service.injectedMBeanServer).setInitialMode(Mode.ACTIVE).install() @AT@ 2739 @LENGTH@ 219
------UPD MethodInvocation@@batchBuilder.addService(SERVICE_NAME,service).addDependency(MBeanServerService.SERVICE_NAME,MBeanServer.class,service.injectedMBeanServer).setInitialMode(Mode.ACTIVE).install() @TO@ target.addService(SERVICE_NAME,service).addDependency(MBeanServerService.SERVICE_NAME,MBeanServer.class,service.injectedMBeanServer).setInitialMode(Mode.ACTIVE).install() @AT@ 2739 @LENGTH@ 218
---------UPD SimpleName@@Name:batchBuilder @TO@ Name:target @AT@ 2739 @LENGTH@ 12


UPD ExpressionStatement@@Assignment:this.orderBySource=parts.length == 2 ? new OrderBySource(parts[1]) : null @TO@ Assignment:this.orderBySource=parts.length == 2 ? new OrderBySource(parts[1],domainClass) : null @AT@ 2666 @LENGTH@ 92
---UPD Assignment@@this.orderBySource=parts.length == 2 ? new OrderBySource(parts[1]) : null @TO@ this.orderBySource=parts.length == 2 ? new OrderBySource(parts[1],domainClass) : null @AT@ 2666 @LENGTH@ 91
------UPD ConditionalExpression@@parts.length == 2 ? new OrderBySource(parts[1]) : null @TO@ parts.length == 2 ? new OrderBySource(parts[1],domainClass) : null @AT@ 2703 @LENGTH@ 54
---------UPD ClassInstanceCreation@@OrderBySource[parts[1]] @TO@ OrderBySource[parts[1], domainClass] @AT@ 2723 @LENGTH@ 27
------------INS SimpleName@@domainClass @TO@ ClassInstanceCreation@@OrderBySource[parts[1]] @AT@ 2751 @LENGTH@ 11


DEL MethodDeclaration@@public, static, ClassLoader, MethodName:getClassLoaderForced, Bundle b,  @AT@ 4461 @LENGTH@ 219
---DEL Modifier@@public @AT@ 4461 @LENGTH@ 6
---DEL Modifier@@static @AT@ 4468 @LENGTH@ 6
---DEL SimpleType@@ClassLoader @AT@ 4475 @LENGTH@ 11
---DEL SimpleName@@MethodName:getClassLoaderForced @AT@ 4487 @LENGTH@ 20
---DEL SingleVariableDeclaration@@Bundle b @AT@ 4508 @LENGTH@ 8
------DEL SimpleType@@Bundle @AT@ 4508 @LENGTH@ 6
------DEL SimpleName@@b @AT@ 4515 @LENGTH@ 1
---DEL TryStatement@@try {  b.loadClass("java.lang.Object");} catch (ClassNotFoundException e) {} @AT@ 4528 @LENGTH@ 105
------DEL ExpressionStatement@@MethodInvocation:b.loadClass("java.lang.Object") @AT@ 4546 @LENGTH@ 32
---------DEL MethodInvocation@@b.loadClass("java.lang.Object") @AT@ 4546 @LENGTH@ 31
------------DEL SimpleName@@Name:b @AT@ 4546 @LENGTH@ 1
------------DEL SimpleName@@MethodName:loadClass:["java.lang.Object"] @AT@ 4548 @LENGTH@ 29
---------------DEL StringLiteral@@"java.lang.Object" @AT@ 4558 @LENGTH@ 18
------DEL CatchClause@@catch (ClassNotFoundException e) {} @AT@ 4589 @LENGTH@ 44
---------DEL SingleVariableDeclaration@@ClassNotFoundException e @AT@ 4596 @LENGTH@ 24
------------DEL SimpleType@@ClassNotFoundException @AT@ 4596 @LENGTH@ 22
------------DEL SimpleName@@e @AT@ 4619 @LENGTH@ 1
---DEL ReturnStatement@@MethodInvocation:WORKER.getClassLoader(b) @AT@ 4642 @LENGTH@ 32
------DEL MethodInvocation@@WORKER.getClassLoader(b) @AT@ 4649 @LENGTH@ 24
---------DEL SimpleName@@Name:WORKER @AT@ 4649 @LENGTH@ 6
---------DEL SimpleName@@MethodName:getClassLoader:[b] @AT@ 4656 @LENGTH@ 17
------------DEL SimpleName@@b @AT@ 4671 @LENGTH@ 1


UPD ExpressionStatement@@MethodInvocation:jredisConnFactory.setUsePool(false) @TO@ MethodInvocation:jredisConnFactory.setUsePool(true) @AT@ 1950 @LENGTH@ 36
---UPD MethodInvocation@@jredisConnFactory.setUsePool(false) @TO@ jredisConnFactory.setUsePool(true) @AT@ 1950 @LENGTH@ 35
------UPD SimpleName@@MethodName:setUsePool:[false] @TO@ MethodName:setUsePool:[true] @AT@ 1968 @LENGTH@ 17
---------UPD BooleanLiteral@@false @TO@ true @AT@ 1979 @LENGTH@ 5


INS ExpressionStatement@@MethodInvocation:EEResourceReferenceProcessorRegistry.registerResourceReferenceProcessor(new WebServiceContextResourceProcessor()) @TO@ MethodDeclaration@@static, void, MethodName:activate, final BootOperationContext updateContext,  @AT@ 3816 @LENGTH@ 114
---INS MethodInvocation@@EEResourceReferenceProcessorRegistry.registerResourceReferenceProcessor(new WebServiceContextResourceProcessor()) @TO@ ExpressionStatement@@MethodInvocation:EEResourceReferenceProcessorRegistry.registerResourceReferenceProcessor(new WebServiceContextResourceProcessor()) @AT@ 3816 @LENGTH@ 113
------INS SimpleName@@Name:EEResourceReferenceProcessorRegistry @TO@ MethodInvocation@@EEResourceReferenceProcessorRegistry.registerResourceReferenceProcessor(new WebServiceContextResourceProcessor()) @AT@ 3816 @LENGTH@ 36
------INS SimpleName@@MethodName:registerResourceReferenceProcessor:[new WebServiceContextResourceProcessor()] @TO@ MethodInvocation@@EEResourceReferenceProcessorRegistry.registerResourceReferenceProcessor(new WebServiceContextResourceProcessor()) @AT@ 3853 @LENGTH@ 76
---------INS ClassInstanceCreation@@WebServiceContextResourceProcessor[] @TO@ SimpleName@@MethodName:registerResourceReferenceProcessor:[new WebServiceContextResourceProcessor()] @AT@ 3888 @LENGTH@ 40
------------INS New@@new @TO@ ClassInstanceCreation@@WebServiceContextResourceProcessor[] @AT@ 3888 @LENGTH@ 3
------------INS SimpleType@@WebServiceContextResourceProcessor @TO@ ClassInstanceCreation@@WebServiceContextResourceProcessor[] @AT@ 3892 @LENGTH@ 34


UPD ExpressionStatement@@MethodInvocation:assertTrue(e.getMessage().startsWith("Failed to create route route2 at: >>> To[mock:result?foo=bar] <<< in route: Route[[From[direct:start]] -> [To[mock:result?foo=bar]]] because of")) @TO@ MethodInvocation:assertTrue(e.getMessage(),e.getMessage().startsWith("Failed to create route route2 at: >>> To[mock:result?foo=bar] <<< in route: Route[[From[direct://start]] -> [To[mock:result?foo=bar]]] because of")) @AT@ 2114 @LENGTH@ 185
---UPD MethodInvocation@@assertTrue(e.getMessage().startsWith("Failed to create route route2 at: >>> To[mock:result?foo=bar] <<< in route: Route[[From[direct:start]] -> [To[mock:result?foo=bar]]] because of")) @TO@ assertTrue(e.getMessage(),e.getMessage().startsWith("Failed to create route route2 at: >>> To[mock:result?foo=bar] <<< in route: Route[[From[direct://start]] -> [To[mock:result?foo=bar]]] because of")) @AT@ 2114 @LENGTH@ 184
------UPD SimpleName@@MethodName:assertTrue:[e.getMessage().startsWith("Failed to create route route2 at: >>> To[mock:result?foo=bar] <<< in route: Route[[From[direct:start]] -> [To[mock:result?foo=bar]]] because of")] @TO@ MethodName:assertTrue:[e.getMessage(), e.getMessage().startsWith("Failed to create route route2 at: >>> To[mock:result?foo=bar] <<< in route: Route[[From[direct://start]] -> [To[mock:result?foo=bar]]] because of")] @AT@ 2114 @LENGTH@ 184
---------UPD MethodInvocation@@e.getMessage().startsWith("Failed to create route route2 at: >>> To[mock:result?foo=bar] <<< in route: Route[[From[direct:start]] -> [To[mock:result?foo=bar]]] because of") @TO@ e.getMessage().startsWith("Failed to create route route2 at: >>> To[mock:result?foo=bar] <<< in route: Route[[From[direct://start]] -> [To[mock:result?foo=bar]]] because of") @AT@ 2125 @LENGTH@ 172
------------UPD SimpleName@@MethodName:startsWith:["Failed to create route route2 at: >>> To[mock:result?foo=bar] <<< in route: Route[[From[direct:start]] -> [To[mock:result?foo=bar]]] because of"] @TO@ MethodName:startsWith:["Failed to create route route2 at: >>> To[mock:result?foo=bar] <<< in route: Route[[From[direct://start]] -> [To[mock:result?foo=bar]]] because of"] @AT@ 2140 @LENGTH@ 157
---------------UPD StringLiteral@@"Failed to create route route2 at: >>> To[mock:result?foo=bar] <<< in route: Route[[From[direct:start]] -> [To[mock:result?foo=bar]]] because of" @TO@ "Failed to create route route2 at: >>> To[mock:result?foo=bar] <<< in route: Route[[From[direct://start]] -> [To[mock:result?foo=bar]]] because of" @AT@ 2151 @LENGTH@ 145
---------INS MethodInvocation@@e.getMessage() @TO@ SimpleName@@MethodName:assertTrue:[e.getMessage().startsWith("Failed to create route route2 at: >>> To[mock:result?foo=bar] <<< in route: Route[[From[direct:start]] -> [To[mock:result?foo=bar]]] because of")] @AT@ 2125 @LENGTH@ 14
------------INS SimpleName@@Name:e @TO@ MethodInvocation@@e.getMessage() @AT@ 2125 @LENGTH@ 1
------------INS SimpleName@@MethodName:getMessage:[] @TO@ MethodInvocation@@e.getMessage() @AT@ 2127 @LENGTH@ 12


UPD IfStatement@@if (componentDescription.getNamingMode() != ComponentNamingMode.CREATE) {  final EEModuleDescription moduleDescription=componentDescription.getModuleDescription();  moduleDescription.getConfigurators().add(new EEModuleConfigurator(){    @Override public void configure(    DeploymentPhaseContext context,    EEModuleDescription description,    EEModuleConfiguration configuration) throws DeploymentUnitProcessingException {      final BindingConfiguration ejbContextBinding=new BindingConfiguration("java:module/EJBContext",directEjbContextReferenceSource);      configuration.getBindingConfigurations().add(ejbContextBinding);    }  });} else {  componentDescription.getConfigurators().add(new ComponentConfigurator(){    @Override public void configure(    DeploymentPhaseContext context,    ComponentDescription description,    ComponentConfiguration configuration) throws DeploymentUnitProcessingException {      final BindingConfiguration ejbContextBinding=new BindingConfiguration("java:comp/EJBContext",directEjbContextReferenceSource);      configuration.getBindingConfigurations().add(ejbContextBinding);    }  });} @TO@ if (componentDescription.getNamingMode() != ComponentNamingMode.CREATE) {  final EEModuleDescription moduleDescription=componentDescription.getModuleDescription();  moduleDescription.getConfigurators().add(new EEModuleConfigurator(){    @Override public void configure(    DeploymentPhaseContext context,    EEModuleDescription description,    EEModuleConfiguration configuration) throws DeploymentUnitProcessingException {      final BindingConfiguration ejbContextBinding=new BindingConfiguration("java:module/EJBContext",directEjbContextReferenceSource);      configuration.getBindingConfigurations().add(ejbContextBinding);    }  });} else {  final BindingConfiguration ejbContextBinding=new BindingConfiguration("java:comp/EJBContext",directEjbContextReferenceSource);  componentDescription.getBindingConfigurations().add(ejbContextBinding);} @AT@ 2943 @LENGTH@ 2059
---UPD Block@@ElseBody:{  componentDescription.getConfigurators().add(new ComponentConfigurator(){    @Override public void configure(    DeploymentPhaseContext context,    ComponentDescription description,    ComponentConfiguration configuration) throws DeploymentUnitProcessingException {      final BindingConfiguration ejbContextBinding=new BindingConfiguration("java:comp/EJBContext",directEjbContextReferenceSource);      configuration.getBindingConfigurations().add(ejbContextBinding);    }  });} @TO@ ElseBody:{  final BindingConfiguration ejbContextBinding=new BindingConfiguration("java:comp/EJBContext",directEjbContextReferenceSource);  componentDescription.getBindingConfigurations().add(ejbContextBinding);} @AT@ 4225 @LENGTH@ 777
------DEL ExpressionStatement@@MethodInvocation:componentDescription.getConfigurators().add(new ComponentConfigurator(){
  @Override public void configure(  DeploymentPhaseContext context,  ComponentDescription description,  ComponentConfiguration configuration) throws DeploymentUnitProcessingException {
    final BindingConfiguration ejbContextBinding=new BindingConfiguration("java:comp/EJBContext",directEjbContextReferenceSource);
    configuration.getBindingConfigurations().add(ejbContextBinding);
  }
}
) @AT@ 4369 @LENGTH@ 623
---------DEL MethodInvocation@@componentDescription.getConfigurators().add(new ComponentConfigurator(){
  @Override public void configure(  DeploymentPhaseContext context,  ComponentDescription description,  ComponentConfiguration configuration) throws DeploymentUnitProcessingException {
    final BindingConfiguration ejbContextBinding=new BindingConfiguration("java:comp/EJBContext",directEjbContextReferenceSource);
    configuration.getBindingConfigurations().add(ejbContextBinding);
  }
}
) @AT@ 4369 @LENGTH@ 622
------------DEL MethodInvocation@@MethodName:getConfigurators:[] @AT@ 4369 @LENGTH@ 39
------------DEL SimpleName@@Name:componentDescription @AT@ 4369 @LENGTH@ 20
------------DEL SimpleName@@MethodName:add:[new ComponentConfigurator(){
  @Override public void configure(  DeploymentPhaseContext context,  ComponentDescription description,  ComponentConfiguration configuration) throws DeploymentUnitProcessingException {
    final BindingConfiguration ejbContextBinding=new BindingConfiguration("java:comp/EJBContext",directEjbContextReferenceSource);
    configuration.getBindingConfigurations().add(ejbContextBinding);
  }
}
] @AT@ 4409 @LENGTH@ 582
---------------DEL ClassInstanceCreation@@ComponentConfigurator[] @AT@ 4413 @LENGTH@ 577
------------------DEL New@@new @AT@ 4413 @LENGTH@ 3
------------------DEL SimpleType@@ComponentConfigurator @AT@ 4417 @LENGTH@ 21
------------------DEL AnonymousClassDeclaration@@AnonymousClass @AT@ 4441 @LENGTH@ 549
---------------------DEL MethodDeclaration@@public, void, MethodName:configure, DeploymentPhaseContext context, ComponentDescription description, ComponentConfiguration configuration, DeploymentUnitProcessingException,  @AT@ 4485 @LENGTH@ 491
------------------------DEL Modifier@@public @AT@ 4485 @LENGTH@ 6
------------------------DEL PrimitiveType@@void @AT@ 4492 @LENGTH@ 4
------------------------DEL SimpleName@@MethodName:configure @AT@ 4497 @LENGTH@ 9
------------------------DEL SingleVariableDeclaration@@DeploymentPhaseContext context @AT@ 4507 @LENGTH@ 30
---------------------------DEL SimpleType@@DeploymentPhaseContext @AT@ 4507 @LENGTH@ 22
---------------------------DEL SimpleName@@context @AT@ 4530 @LENGTH@ 7
------------------------DEL SingleVariableDeclaration@@ComponentDescription description @AT@ 4539 @LENGTH@ 32
---------------------------DEL SimpleType@@ComponentDescription @AT@ 4539 @LENGTH@ 20
---------------------------DEL SimpleName@@description @AT@ 4560 @LENGTH@ 11
------------------------DEL SingleVariableDeclaration@@ComponentConfiguration configuration @AT@ 4573 @LENGTH@ 36
---------------------------DEL SimpleType@@ComponentConfiguration @AT@ 4573 @LENGTH@ 22
---------------------------DEL SimpleName@@configuration @AT@ 4596 @LENGTH@ 13
------------------------DEL SimpleType@@DeploymentUnitProcessingException @AT@ 4618 @LENGTH@ 33
------------------------DEL ExpressionStatement@@MethodInvocation:configuration.getBindingConfigurations().add(ejbContextBinding) @AT@ 4894 @LENGTH@ 64
------INS ExpressionStatement@@MethodInvocation:componentDescription.getBindingConfigurations().add(ejbContextBinding) @TO@ Block@@ElseBody:{  componentDescription.getConfigurators().add(new ComponentConfigurator(){    @Override public void configure(    DeploymentPhaseContext context,    ComponentDescription description,    ComponentConfiguration configuration) throws DeploymentUnitProcessingException {      final BindingConfiguration ejbContextBinding=new BindingConfiguration("java:comp/EJBContext",directEjbContextReferenceSource);      configuration.getBindingConfigurations().add(ejbContextBinding);    }  });} @AT@ 4399 @LENGTH@ 71
---------MOV MethodInvocation@@configuration.getBindingConfigurations().add(ejbContextBinding) @TO@ ExpressionStatement@@MethodInvocation:componentDescription.getBindingConfigurations().add(ejbContextBinding) @AT@ 4894 @LENGTH@ 63
------MOV VariableDeclarationStatement@@final BindingConfiguration ejbContextBinding=new BindingConfiguration("java:comp/EJBContext",directEjbContextReferenceSource); @TO@ Block@@ElseBody:{  componentDescription.getConfigurators().add(new ComponentConfigurator(){    @Override public void configure(    DeploymentPhaseContext context,    ComponentDescription description,    ComponentConfiguration configuration) throws DeploymentUnitProcessingException {      final BindingConfiguration ejbContextBinding=new BindingConfiguration("java:comp/EJBContext",directEjbContextReferenceSource);      configuration.getBindingConfigurations().add(ejbContextBinding);    }  });} @AT@ 4744 @LENGTH@ 129


INS VariableDeclarationStatement@@boolean stateful="true".equals(parameters.get("stateful")); @TO@ MethodDeclaration@@protected, QuartzEndpoint, MethodName:createEndpoint, final String uri, final String remaining, final Map<String,Object> parameters, Exception,  @AT@ 4124 @LENGTH@ 61
---INS PrimitiveType@@boolean @TO@ VariableDeclarationStatement@@boolean stateful="true".equals(parameters.get("stateful")); @AT@ 4124 @LENGTH@ 7
---INS VariableDeclarationFragment@@stateful="true".equals(parameters.get("stateful")) @TO@ VariableDeclarationStatement@@boolean stateful="true".equals(parameters.get("stateful")); @AT@ 4132 @LENGTH@ 52
------INS SimpleName@@stateful @TO@ VariableDeclarationFragment@@stateful="true".equals(parameters.get("stateful")) @AT@ 4132 @LENGTH@ 8
------INS MethodInvocation@@"true".equals(parameters.get("stateful")) @TO@ VariableDeclarationFragment@@stateful="true".equals(parameters.get("stateful")) @AT@ 4143 @LENGTH@ 41
---------INS StringLiteral@@"true" @TO@ MethodInvocation@@"true".equals(parameters.get("stateful")) @AT@ 4143 @LENGTH@ 6
---------INS SimpleName@@MethodName:equals:[parameters.get("stateful")] @TO@ MethodInvocation@@"true".equals(parameters.get("stateful")) @AT@ 4150 @LENGTH@ 34
------------INS MethodInvocation@@parameters.get("stateful") @TO@ SimpleName@@MethodName:equals:[parameters.get("stateful")] @AT@ 4157 @LENGTH@ 26
---------------INS SimpleName@@Name:parameters @TO@ MethodInvocation@@parameters.get("stateful") @AT@ 4157 @LENGTH@ 10
---------------INS SimpleName@@MethodName:get:["stateful"] @TO@ MethodInvocation@@parameters.get("stateful") @AT@ 4168 @LENGTH@ 15
------------------INS StringLiteral@@"stateful" @TO@ SimpleName@@MethodName:get:["stateful"] @AT@ 4172 @LENGTH@ 10


INS FieldDeclaration@@public, static, final, AttachmentKey<Boolean>, [IGNORE_OSGI=AttachmentKey.create(Boolean.class)] @TO@ TypeDeclaration@@[public, final]Attachments,  @AT@ 4405 @LENGTH@ 93
---INS Modifier@@public @TO@ FieldDeclaration@@public, static, final, AttachmentKey<Boolean>, [IGNORE_OSGI=AttachmentKey.create(Boolean.class)] @AT@ 4405 @LENGTH@ 6
---INS Modifier@@static @TO@ FieldDeclaration@@public, static, final, AttachmentKey<Boolean>, [IGNORE_OSGI=AttachmentKey.create(Boolean.class)] @AT@ 4412 @LENGTH@ 6
---INS Modifier@@final @TO@ FieldDeclaration@@public, static, final, AttachmentKey<Boolean>, [IGNORE_OSGI=AttachmentKey.create(Boolean.class)] @AT@ 4419 @LENGTH@ 5
---INS ParameterizedType@@AttachmentKey<Boolean> @TO@ FieldDeclaration@@public, static, final, AttachmentKey<Boolean>, [IGNORE_OSGI=AttachmentKey.create(Boolean.class)] @AT@ 4425 @LENGTH@ 22
------INS SimpleType@@AttachmentKey @TO@ ParameterizedType@@AttachmentKey<Boolean> @AT@ 4425 @LENGTH@ 13
------INS SimpleType@@Boolean @TO@ ParameterizedType@@AttachmentKey<Boolean> @AT@ 4439 @LENGTH@ 7
---INS VariableDeclarationFragment@@IGNORE_OSGI=AttachmentKey.create(Boolean.class) @TO@ FieldDeclaration@@public, static, final, AttachmentKey<Boolean>, [IGNORE_OSGI=AttachmentKey.create(Boolean.class)] @AT@ 4448 @LENGTH@ 49
------INS SimpleName@@IGNORE_OSGI @TO@ VariableDeclarationFragment@@IGNORE_OSGI=AttachmentKey.create(Boolean.class) @AT@ 4448 @LENGTH@ 11
------INS MethodInvocation@@AttachmentKey.create(Boolean.class) @TO@ VariableDeclarationFragment@@IGNORE_OSGI=AttachmentKey.create(Boolean.class) @AT@ 4462 @LENGTH@ 35
---------INS SimpleName@@Name:AttachmentKey @TO@ MethodInvocation@@AttachmentKey.create(Boolean.class) @AT@ 4462 @LENGTH@ 13
---------INS SimpleName@@MethodName:create:[Boolean.class] @TO@ MethodInvocation@@AttachmentKey.create(Boolean.class) @AT@ 4476 @LENGTH@ 21
------------INS TypeLiteral@@Boolean.class @TO@ SimpleName@@MethodName:create:[Boolean.class] @AT@ 4483 @LENGTH@ 13


UPD MethodDeclaration@@protected, Query, MethodName:or, Query... queries,  @TO@ public, Query, MethodName:or, Query... queries,  @AT@ 1191 @LENGTH@ 109
---UPD Modifier@@protected @TO@ public @AT@ 1191 @LENGTH@ 9


INS FieldDeclaration@@public, static, final, String, [CODEC_101_MULTIPLE_OF_3="123"] @TO@ TypeDeclaration@@[public]Base64TestData,  @AT@ 1341 @LENGTH@ 59
---INS Modifier@@public @TO@ FieldDeclaration@@public, static, final, String, [CODEC_101_MULTIPLE_OF_3="123"] @AT@ 1341 @LENGTH@ 6
---INS Modifier@@static @TO@ FieldDeclaration@@public, static, final, String, [CODEC_101_MULTIPLE_OF_3="123"] @AT@ 1348 @LENGTH@ 6
---INS Modifier@@final @TO@ FieldDeclaration@@public, static, final, String, [CODEC_101_MULTIPLE_OF_3="123"] @AT@ 1355 @LENGTH@ 5
---INS SimpleType@@String @TO@ FieldDeclaration@@public, static, final, String, [CODEC_101_MULTIPLE_OF_3="123"] @AT@ 1361 @LENGTH@ 6
---INS VariableDeclarationFragment@@CODEC_101_MULTIPLE_OF_3="123" @TO@ FieldDeclaration@@public, static, final, String, [CODEC_101_MULTIPLE_OF_3="123"] @AT@ 1368 @LENGTH@ 31
------INS SimpleName@@CODEC_101_MULTIPLE_OF_3 @TO@ VariableDeclarationFragment@@CODEC_101_MULTIPLE_OF_3="123" @AT@ 1368 @LENGTH@ 23
------INS StringLiteral@@"123" @TO@ VariableDeclarationFragment@@CODEC_101_MULTIPLE_OF_3="123" @AT@ 1394 @LENGTH@ 5


INS MethodDeclaration@@public, Class<?>, MethodName:getProxyClass,  @TO@ TypeDeclaration@@View, [ComponentView] @AT@ 7533 @LENGTH@ 90
---INS Modifier@@public @TO@ MethodDeclaration@@public, Class<?>, MethodName:getProxyClass,  @AT@ 7533 @LENGTH@ 6
---INS ParameterizedType@@Class<?> @TO@ MethodDeclaration@@public, Class<?>, MethodName:getProxyClass,  @AT@ 7540 @LENGTH@ 8
------INS SimpleType@@Class @TO@ ParameterizedType@@Class<?> @AT@ 7540 @LENGTH@ 5
------INS WildcardType@@? @TO@ ParameterizedType@@Class<?> @AT@ 7546 @LENGTH@ 1
---INS SimpleName@@MethodName:getProxyClass @TO@ MethodDeclaration@@public, Class<?>, MethodName:getProxyClass,  @AT@ 7549 @LENGTH@ 13
---INS ReturnStatement@@MethodInvocation:proxyFactory.defineClass() @TO@ MethodDeclaration@@public, Class<?>, MethodName:getProxyClass,  @AT@ 7579 @LENGTH@ 34
------INS MethodInvocation@@proxyFactory.defineClass() @TO@ ReturnStatement@@MethodInvocation:proxyFactory.defineClass() @AT@ 7586 @LENGTH@ 26
---------INS SimpleName@@Name:proxyFactory @TO@ MethodInvocation@@proxyFactory.defineClass() @AT@ 7586 @LENGTH@ 12
---------INS SimpleName@@MethodName:defineClass:[] @TO@ MethodInvocation@@proxyFactory.defineClass() @AT@ 7599 @LENGTH@ 13


UPD ExpressionStatement@@Assignment:this.values=values @TO@ Assignment:this.values=values.clone() @AT@ 1702 @LENGTH@ 21
---UPD Assignment@@this.values=values @TO@ this.values=values.clone() @AT@ 1702 @LENGTH@ 20
------INS MethodInvocation@@values.clone() @TO@ Assignment@@this.values=values @AT@ 1716 @LENGTH@ 14
---------INS SimpleName@@Name:values @TO@ MethodInvocation@@values.clone() @AT@ 1716 @LENGTH@ 6
---------INS SimpleName@@MethodName:clone:[] @TO@ MethodInvocation@@values.clone() @AT@ 1723 @LENGTH@ 7
------DEL SimpleName@@values @AT@ 1716 @LENGTH@ 6


UPD MethodDeclaration@@voidMethodName:ServerControllerImpl, final ServerModel serverModel, final ServiceContainer container, final ServerEnvironment serverEnvironment, final EnumMap<Phase,List<DeploymentUnitProcessor>> deployers,  @TO@ voidMethodName:ServerControllerImpl, final ServerModel serverModel, final ServiceContainer container, final ServerEnvironment serverEnvironment,  @AT@ 3347 @LENGTH@ 424
---DEL SingleVariableDeclaration@@final EnumMap<Phase,List<DeploymentUnitProcessor>> deployers @AT@ 3476 @LENGTH@ 61
------DEL Modifier@@final @AT@ 3476 @LENGTH@ 5
------DEL ParameterizedType@@EnumMap<Phase,List<DeploymentUnitProcessor>> @AT@ 3482 @LENGTH@ 45
---------DEL SimpleType@@EnumMap @AT@ 3482 @LENGTH@ 7
---------DEL SimpleType@@Phase @AT@ 3490 @LENGTH@ 5
---------DEL ParameterizedType@@List<DeploymentUnitProcessor> @AT@ 3497 @LENGTH@ 29
------------DEL SimpleType@@List @AT@ 3497 @LENGTH@ 4
------------DEL SimpleType@@DeploymentUnitProcessor @AT@ 3502 @LENGTH@ 23
------DEL SimpleName@@deployers @AT@ 3528 @LENGTH@ 9
---DEL ExpressionStatement@@Assignment:this.deployers=deployers @AT@ 3677 @LENGTH@ 27
------DEL Assignment@@this.deployers=deployers @AT@ 3677 @LENGTH@ 26
---------DEL FieldAccess@@this.deployers @AT@ 3677 @LENGTH@ 14
------------DEL ThisExpression@@this @AT@ 3677 @LENGTH@ 4
------------DEL SimpleName@@deployers @AT@ 3682 @LENGTH@ 9
---------DEL Operator@@= @AT@ 3691 @LENGTH@ 1
---------DEL SimpleName@@deployers @AT@ 3694 @LENGTH@ 9


UPD ExpressionStatement@@MethodInvocation:marshaller.addAlias("trade",Trade.class) @TO@ MethodInvocation:marshaller.setAliases(Collections.singletonMap("trade",Trade.class)) @AT@ 409 @LENGTH@ 42
---UPD MethodInvocation@@marshaller.addAlias("trade",Trade.class) @TO@ marshaller.setAliases(Collections.singletonMap("trade",Trade.class)) @AT@ 409 @LENGTH@ 41
------UPD SimpleName@@MethodName:addAlias:["trade", Trade.class] @TO@ MethodName:singletonMap:["trade", Trade.class] @AT@ 420 @LENGTH@ 30
------INS SimpleName@@MethodName:setAliases:[Collections.singletonMap("trade",Trade.class)] @TO@ MethodInvocation@@marshaller.addAlias("trade",Trade.class) @AT@ 498 @LENGTH@ 58
---------INS MethodInvocation@@Collections.singletonMap("trade",Trade.class) @TO@ SimpleName@@MethodName:setAliases:[Collections.singletonMap("trade",Trade.class)] @AT@ 509 @LENGTH@ 46
------------MOV SimpleName@@MethodName:addAlias:["trade", Trade.class] @TO@ MethodInvocation@@Collections.singletonMap("trade",Trade.class) @AT@ 420 @LENGTH@ 30
------------INS SimpleName@@Name:Collections @TO@ MethodInvocation@@Collections.singletonMap("trade",Trade.class) @AT@ 509 @LENGTH@ 11


INS ExpressionStatement@@Assignment:this.jedisPubSub=jedisPubSub @TO@ MethodDeclaration@@voidMethodName:JedisSubscription, MessageListener listener, JedisPubSub jedisPubSub,  @AT@ 1491 @LENGTH@ 31
---INS Assignment@@this.jedisPubSub=jedisPubSub @TO@ ExpressionStatement@@Assignment:this.jedisPubSub=jedisPubSub @AT@ 1491 @LENGTH@ 30
------INS FieldAccess@@this.jedisPubSub @TO@ Assignment@@this.jedisPubSub=jedisPubSub @AT@ 1491 @LENGTH@ 16
---------INS ThisExpression@@this @TO@ FieldAccess@@this.jedisPubSub @AT@ 1491 @LENGTH@ 4
---------INS SimpleName@@jedisPubSub @TO@ FieldAccess@@this.jedisPubSub @AT@ 1496 @LENGTH@ 11
------INS Operator@@= @TO@ Assignment@@this.jedisPubSub=jedisPubSub @AT@ 1507 @LENGTH@ 1
------INS SimpleName@@jedisPubSub @TO@ Assignment@@this.jedisPubSub=jedisPubSub @AT@ 1510 @LENGTH@ 11


UPD TryStatement@@try {  clearWarnings();  resultSet=null;  client.execute(sql);} catch (HiveServerException e) {  throw new SQLException(e.getMessage(),e.getSQLState(),e.getErrorCode());}catch (Exception ex) {  throw new SQLException(ex.toString(),"08S01");} @TO@ try {  resultSet=null;  client.execute(sql);} catch (HiveServerException e) {  throw new SQLException(e.getMessage(),e.getSQLState(),e.getErrorCode());}catch (Exception ex) {  throw new SQLException(ex.toString(),"08S01");} @AT@ 4344 @LENGTH@ 287
---DEL ExpressionStatement@@MethodInvocation:clearWarnings() @AT@ 4356 @LENGTH@ 16
------DEL MethodInvocation@@MethodName:clearWarnings:[] @AT@ 4356 @LENGTH@ 15


UPD IfStatement@@if (useCompNamespace) {  return serviceNameOfContext(app,module,comp,envEntryName);} else {  return serviceNameOfContext(app,module,module,envEntryName);} @TO@ if (useCompNamespace) {  return serviceNameOfContext(app,module,comp,envEntryName);} else {  if (envEntryName.startsWith("java:comp")) {    return serviceNameOfContext(app,module,module,"java:module" + envEntryName.substring("java:comp".length()));  } else {    return serviceNameOfContext(app,module,module,envEntryName);  }} @AT@ 8046 @LENGTH@ 215
---INS Block@@ElseBody:{  if (envEntryName.startsWith("java:comp")) {    return serviceNameOfContext(app,module,module,"java:module" + envEntryName.substring("java:comp".length()));  } else {    return serviceNameOfContext(app,module,module,envEntryName);  }} @TO@ IfStatement@@if (useCompNamespace) {  return serviceNameOfContext(app,module,comp,envEntryName);} else {  return serviceNameOfContext(app,module,module,envEntryName);} @AT@ 8166 @LENGTH@ 333
------INS IfStatement@@if (envEntryName.startsWith("java:comp")) {  return serviceNameOfContext(app,module,module,"java:module" + envEntryName.substring("java:comp".length()));} else {  return serviceNameOfContext(app,module,module,envEntryName);} @TO@ Block@@ElseBody:{  if (envEntryName.startsWith("java:comp")) {    return serviceNameOfContext(app,module,module,"java:module" + envEntryName.substring("java:comp".length()));  } else {    return serviceNameOfContext(app,module,module,envEntryName);  }} @AT@ 8184 @LENGTH@ 301
---------MOV Block@@ElseBody:{  return serviceNameOfContext(app,module,module,envEntryName);} @TO@ IfStatement@@if (envEntryName.startsWith("java:comp")) {  return serviceNameOfContext(app,module,module,"java:module" + envEntryName.substring("java:comp".length()));} else {  return serviceNameOfContext(app,module,module,envEntryName);} @AT@ 8166 @LENGTH@ 95
---------INS MethodInvocation@@envEntryName.startsWith("java:comp") @TO@ IfStatement@@if (envEntryName.startsWith("java:comp")) {  return serviceNameOfContext(app,module,module,"java:module" + envEntryName.substring("java:comp".length()));} else {  return serviceNameOfContext(app,module,module,envEntryName);} @AT@ 8187 @LENGTH@ 36
------------INS SimpleName@@Name:envEntryName @TO@ MethodInvocation@@envEntryName.startsWith("java:comp") @AT@ 8187 @LENGTH@ 12
------------INS SimpleName@@MethodName:startsWith:["java:comp"] @TO@ MethodInvocation@@envEntryName.startsWith("java:comp") @AT@ 8200 @LENGTH@ 23
---------------INS StringLiteral@@"java:comp" @TO@ SimpleName@@MethodName:startsWith:["java:comp"] @AT@ 8211 @LENGTH@ 11
---------INS Block@@ThenBody:{  return serviceNameOfContext(app,module,module,"java:module" + envEntryName.substring("java:comp".length()));} @TO@ IfStatement@@if (envEntryName.startsWith("java:comp")) {  return serviceNameOfContext(app,module,module,"java:module" + envEntryName.substring("java:comp".length()));} else {  return serviceNameOfContext(app,module,module,envEntryName);} @AT@ 8225 @LENGTH@ 151
------------INS ReturnStatement@@MethodInvocation:serviceNameOfContext(app,module,module,"java:module" + envEntryName.substring("java:comp".length())) @TO@ Block@@ThenBody:{  return serviceNameOfContext(app,module,module,"java:module" + envEntryName.substring("java:comp".length()));} @AT@ 8247 @LENGTH@ 111
---------------INS MethodInvocation@@serviceNameOfContext(app,module,module,"java:module" + envEntryName.substring("java:comp".length())) @TO@ ReturnStatement@@MethodInvocation:serviceNameOfContext(app,module,module,"java:module" + envEntryName.substring("java:comp".length())) @AT@ 8254 @LENGTH@ 103
------------------INS SimpleName@@MethodName:serviceNameOfContext:[app, module, module, "java:module" + envEntryName.substring("java:comp".length())] @TO@ MethodInvocation@@serviceNameOfContext(app,module,module,"java:module" + envEntryName.substring("java:comp".length())) @AT@ 8254 @LENGTH@ 103
---------------------INS SimpleName@@app @TO@ SimpleName@@MethodName:serviceNameOfContext:[app, module, module, "java:module" + envEntryName.substring("java:comp".length())] @AT@ 8275 @LENGTH@ 3
---------------------INS SimpleName@@module @TO@ SimpleName@@MethodName:serviceNameOfContext:[app, module, module, "java:module" + envEntryName.substring("java:comp".length())] @AT@ 8280 @LENGTH@ 6
---------------------INS SimpleName@@module @TO@ SimpleName@@MethodName:serviceNameOfContext:[app, module, module, "java:module" + envEntryName.substring("java:comp".length())] @AT@ 8288 @LENGTH@ 6
---------------------INS InfixExpression@@"java:module" + envEntryName.substring("java:comp".length()) @TO@ SimpleName@@MethodName:serviceNameOfContext:[app, module, module, "java:module" + envEntryName.substring("java:comp".length())] @AT@ 8296 @LENGTH@ 60
------------------------INS StringLiteral@@"java:module" @TO@ InfixExpression@@"java:module" + envEntryName.substring("java:comp".length()) @AT@ 8296 @LENGTH@ 13
------------------------INS Operator@@+ @TO@ InfixExpression@@"java:module" + envEntryName.substring("java:comp".length()) @AT@ 8309 @LENGTH@ 1
------------------------INS MethodInvocation@@envEntryName.substring("java:comp".length()) @TO@ InfixExpression@@"java:module" + envEntryName.substring("java:comp".length()) @AT@ 8312 @LENGTH@ 44
---------------------------INS SimpleName@@Name:envEntryName @TO@ MethodInvocation@@envEntryName.substring("java:comp".length()) @AT@ 8312 @LENGTH@ 12
---------------------------INS SimpleName@@MethodName:substring:["java:comp".length()] @TO@ MethodInvocation@@envEntryName.substring("java:comp".length()) @AT@ 8325 @LENGTH@ 31
------------------------------INS MethodInvocation@@"java:comp".length() @TO@ SimpleName@@MethodName:substring:["java:comp".length()] @AT@ 8335 @LENGTH@ 20
---------------------------------INS StringLiteral@@"java:comp" @TO@ MethodInvocation@@"java:comp".length() @AT@ 8335 @LENGTH@ 11
---------------------------------INS SimpleName@@MethodName:length:[] @TO@ MethodInvocation@@"java:comp".length() @AT@ 8347 @LENGTH@ 8


UPD VariableDeclarationStatement@@final ServerControllerImpl serverController=new ServerControllerImpl(new ServerModel(serverEnvironment.getServerName(),configuration.getPortOffset()),container,serverEnvironment,finalDeployers); @TO@ final ServerControllerImpl serverController=new ServerControllerImpl(new ServerModel(serverEnvironment.getServerName(),configuration.getPortOffset()),container,serverEnvironment); @AT@ 6951 @LENGTH@ 200
---UPD VariableDeclarationFragment@@serverController=new ServerControllerImpl(new ServerModel(serverEnvironment.getServerName(),configuration.getPortOffset()),container,serverEnvironment,finalDeployers) @TO@ serverController=new ServerControllerImpl(new ServerModel(serverEnvironment.getServerName(),configuration.getPortOffset()),container,serverEnvironment) @AT@ 6978 @LENGTH@ 172
------UPD ClassInstanceCreation@@ServerControllerImpl[new ServerModel(serverEnvironment.getServerName(),configuration.getPortOffset()), container, serverEnvironment, finalDeployers] @TO@ ServerControllerImpl[new ServerModel(serverEnvironment.getServerName(),configuration.getPortOffset()), container, serverEnvironment] @AT@ 6997 @LENGTH@ 153
---------DEL SimpleName@@finalDeployers @AT@ 7135 @LENGTH@ 14


UPD MethodDeclaration@@public, void, MethodName:render, ProxyListPlace value, Object viewData, SafeHtmlBuilder sb,  @TO@ public, void, MethodName:render, Context context, ProxyListPlace value, SafeHtmlBuilder sb,  @AT@ 6219 @LENGTH@ 146
---UPD SingleVariableDeclaration@@ProxyListPlace value @TO@ Context context @AT@ 6238 @LENGTH@ 20
------UPD SimpleType@@ProxyListPlace @TO@ Context @AT@ 6238 @LENGTH@ 14
------UPD SimpleName@@value @TO@ context @AT@ 6253 @LENGTH@ 5
---UPD SingleVariableDeclaration@@Object viewData @TO@ ProxyListPlace value @AT@ 6260 @LENGTH@ 15
------UPD SimpleType@@Object @TO@ ProxyListPlace @AT@ 6260 @LENGTH@ 6
------UPD SimpleName@@viewData @TO@ value @AT@ 6267 @LENGTH@ 8


INS MethodDeclaration@@public, void, MethodName:start, Exception,  @TO@ TypeDeclaration@@[public]JdbcIdempotentRepository, [IdempotentRepository<String>] @AT@ 1964 @LENGTH@ 69
---INS Modifier@@public @TO@ MethodDeclaration@@public, void, MethodName:start, Exception,  @AT@ 1964 @LENGTH@ 6
---INS PrimitiveType@@void @TO@ MethodDeclaration@@public, void, MethodName:start, Exception,  @AT@ 1971 @LENGTH@ 4
---INS SimpleName@@MethodName:start @TO@ MethodDeclaration@@public, void, MethodName:start, Exception,  @AT@ 1976 @LENGTH@ 5
---INS SimpleType@@Exception @TO@ MethodDeclaration@@public, void, MethodName:start, Exception,  @AT@ 1991 @LENGTH@ 9


UPD FieldDeclaration@@PrinterConfiguration, [config] @TO@ private, PrinterConfiguration, [config] @AT@ 1093 @LENGTH@ 28
---INS Modifier@@private @TO@ FieldDeclaration@@PrinterConfiguration, [config] @AT@ 1093 @LENGTH@ 7


UPD ExpressionStatement@@MethodInvocation:factory.setUsePool(true) @TO@ MethodInvocation:factory.setUsePool(false) @AT@ 1307 @LENGTH@ 25
---UPD MethodInvocation@@factory.setUsePool(true) @TO@ factory.setUsePool(false) @AT@ 1307 @LENGTH@ 24
------UPD SimpleName@@MethodName:setUsePool:[true] @TO@ MethodName:setUsePool:[false] @AT@ 1315 @LENGTH@ 16
---------UPD BooleanLiteral@@true @TO@ false @AT@ 1326 @LENGTH@ 4


INS ExpressionStatement@@MethodInvocation:properties.setProperty("jboss.server.deploy.dir",properties.getProperty("jboss.home.dir") + "/domain/content") @TO@ MethodDeclaration@@public, voidMethodName:ServerStartTask, final String serverName, final int portOffset, final List<ServiceActivator> startServices, final List<AbstractServerModelUpdate<?>> updates,  @AT@ 2727 @LENGTH@ 112
---INS MethodInvocation@@properties.setProperty("jboss.server.deploy.dir",properties.getProperty("jboss.home.dir") + "/domain/content") @TO@ ExpressionStatement@@MethodInvocation:properties.setProperty("jboss.server.deploy.dir",properties.getProperty("jboss.home.dir") + "/domain/content") @AT@ 2727 @LENGTH@ 111
------INS SimpleName@@Name:properties @TO@ MethodInvocation@@properties.setProperty("jboss.server.deploy.dir",properties.getProperty("jboss.home.dir") + "/domain/content") @AT@ 2727 @LENGTH@ 10
------INS SimpleName@@MethodName:setProperty:["jboss.server.deploy.dir", properties.getProperty("jboss.home.dir") + "/domain/content"] @TO@ MethodInvocation@@properties.setProperty("jboss.server.deploy.dir",properties.getProperty("jboss.home.dir") + "/domain/content") @AT@ 2738 @LENGTH@ 100
---------INS StringLiteral@@"jboss.server.deploy.dir" @TO@ SimpleName@@MethodName:setProperty:["jboss.server.deploy.dir", properties.getProperty("jboss.home.dir") + "/domain/content"] @AT@ 2750 @LENGTH@ 25
---------INS InfixExpression@@properties.getProperty("jboss.home.dir") + "/domain/content" @TO@ SimpleName@@MethodName:setProperty:["jboss.server.deploy.dir", properties.getProperty("jboss.home.dir") + "/domain/content"] @AT@ 2777 @LENGTH@ 60
------------INS MethodInvocation@@properties.getProperty("jboss.home.dir") @TO@ InfixExpression@@properties.getProperty("jboss.home.dir") + "/domain/content" @AT@ 2777 @LENGTH@ 40
---------------INS SimpleName@@Name:properties @TO@ MethodInvocation@@properties.getProperty("jboss.home.dir") @AT@ 2777 @LENGTH@ 10
---------------INS SimpleName@@MethodName:getProperty:["jboss.home.dir"] @TO@ MethodInvocation@@properties.getProperty("jboss.home.dir") @AT@ 2788 @LENGTH@ 29
------------------INS StringLiteral@@"jboss.home.dir" @TO@ SimpleName@@MethodName:getProperty:["jboss.home.dir"] @AT@ 2800 @LENGTH@ 16
------------INS Operator@@+ @TO@ InfixExpression@@properties.getProperty("jboss.home.dir") + "/domain/content" @AT@ 2817 @LENGTH@ 1
------------INS StringLiteral@@"/domain/content" @TO@ InfixExpression@@properties.getProperty("jboss.home.dir") + "/domain/content" @AT@ 2820 @LENGTH@ 17


UPD ThrowStatement@@ClassInstanceCreation:new DeploymentUnitProcessingException("Failed to mount deployment content") @TO@ ClassInstanceCreation:new DeploymentUnitProcessingException("Failed to mount deployment content",e) @AT@ 3266 @LENGTH@ 82
---UPD ClassInstanceCreation@@DeploymentUnitProcessingException["Failed to mount deployment content"] @TO@ DeploymentUnitProcessingException["Failed to mount deployment content", e] @AT@ 3272 @LENGTH@ 75
------INS SimpleName@@e @TO@ ClassInstanceCreation@@DeploymentUnitProcessingException["Failed to mount deployment content"] @AT@ 3348 @LENGTH@ 1


UPD ReturnStatement@@InfixExpression:!attributeName.equals("xmlns") && !attributeName.startsWith("xmlns:") && !attributeName.equals("type")&& !attributeName.equals("onRedeliveryRef")&& !attributeName.equals("onRetryWhileRef")&& !attributeName.equals("redeliveryPolicyRef")&& !attributeName.equals("transactionTemplateRef")&& !attributeName.equals("transactionManagerRef") @TO@ InfixExpression:!attributeName.equals("type") && !attributeName.equals("onRedeliveryRef") && !attributeName.equals("onRetryWhileRef")&& !attributeName.equals("redeliveryPolicyRef")&& !attributeName.equals("transactionTemplateRef")&& !attributeName.equals("transactionManagerRef") @AT@ 2305 @LENGTH@ 443
---UPD InfixExpression@@!attributeName.equals("xmlns") && !attributeName.startsWith("xmlns:") && !attributeName.equals("type")&& !attributeName.equals("onRedeliveryRef")&& !attributeName.equals("onRetryWhileRef")&& !attributeName.equals("redeliveryPolicyRef")&& !attributeName.equals("transactionTemplateRef")&& !attributeName.equals("transactionManagerRef") @TO@ !attributeName.equals("type") && !attributeName.equals("onRedeliveryRef") && !attributeName.equals("onRetryWhileRef")&& !attributeName.equals("redeliveryPolicyRef")&& !attributeName.equals("transactionTemplateRef")&& !attributeName.equals("transactionManagerRef") @AT@ 2312 @LENGTH@ 435
------DEL PrefixExpression@@!attributeName.equals("xmlns") @AT@ 2312 @LENGTH@ 30
---------DEL Operator@@! @AT@ 2312 @LENGTH@ 1
------MOV Operator@@&& @TO@ InfixExpression@@!attributeName.equals("xmlns") && !attributeName.startsWith("xmlns:") && !attributeName.equals("type")&& !attributeName.equals("onRedeliveryRef")&& !attributeName.equals("onRetryWhileRef")&& !attributeName.equals("redeliveryPolicyRef")&& !attributeName.equals("transactionTemplateRef")&& !attributeName.equals("transactionManagerRef") @AT@ 2342 @LENGTH@ 2
------DEL PrefixExpression@@!attributeName.startsWith("xmlns:") @AT@ 2346 @LENGTH@ 35
---------DEL Operator@@! @AT@ 2346 @LENGTH@ 1


INS MethodDeclaration@@protected, abstract, boolean, MethodName:startsWithRoot, String path,  @TO@ TypeDeclaration@@[public, abstract]FilenameTabCompleter, [CommandLineCompleter] @AT@ 1273 @LENGTH@ 55
---INS Modifier@@protected @TO@ MethodDeclaration@@protected, abstract, boolean, MethodName:startsWithRoot, String path,  @AT@ 1273 @LENGTH@ 9
---INS Modifier@@abstract @TO@ MethodDeclaration@@protected, abstract, boolean, MethodName:startsWithRoot, String path,  @AT@ 1283 @LENGTH@ 8
---INS PrimitiveType@@boolean @TO@ MethodDeclaration@@protected, abstract, boolean, MethodName:startsWithRoot, String path,  @AT@ 1292 @LENGTH@ 7
---INS SimpleName@@MethodName:startsWithRoot @TO@ MethodDeclaration@@protected, abstract, boolean, MethodName:startsWithRoot, String path,  @AT@ 1300 @LENGTH@ 14
---INS SingleVariableDeclaration@@String path @TO@ MethodDeclaration@@protected, abstract, boolean, MethodName:startsWithRoot, String path,  @AT@ 1315 @LENGTH@ 11
------INS SimpleType@@String @TO@ SingleVariableDeclaration@@String path @AT@ 1315 @LENGTH@ 6
------INS SimpleName@@path @TO@ SingleVariableDeclaration@@String path @AT@ 1322 @LENGTH@ 4


UPD ExpressionStatement@@Assignment:result=input.replace(group,getParameterWithIndex(accessor,index)) @TO@ Assignment:result=result.replace(group,getParameterWithIndex(accessor,index)) @AT@ 2825 @LENGTH@ 70
---UPD Assignment@@result=input.replace(group,getParameterWithIndex(accessor,index)) @TO@ result=result.replace(group,getParameterWithIndex(accessor,index)) @AT@ 2825 @LENGTH@ 69
------UPD MethodInvocation@@input.replace(group,getParameterWithIndex(accessor,index)) @TO@ result.replace(group,getParameterWithIndex(accessor,index)) @AT@ 2834 @LENGTH@ 60
---------UPD SimpleName@@Name:input @TO@ Name:result @AT@ 2834 @LENGTH@ 5


UPD FieldDeclaration@@private, Bundle, [bundle] @TO@ private, final, Bundle, [bundle] @AT@ 1346 @LENGTH@ 22
---INS Modifier@@final @TO@ FieldDeclaration@@private, Bundle, [bundle] @AT@ 1355 @LENGTH@ 5


UPD VariableDeclarationStatement@@Manifest mf=processor.getOrCreateManifest(archive); @TO@ Manifest mf=ManifestUtils.getOrCreateManifest(archive); @AT@ 3020 @LENGTH@ 53
---UPD VariableDeclarationFragment@@mf=processor.getOrCreateManifest(archive) @TO@ mf=ManifestUtils.getOrCreateManifest(archive) @AT@ 3029 @LENGTH@ 43
------UPD MethodInvocation@@processor.getOrCreateManifest(archive) @TO@ ManifestUtils.getOrCreateManifest(archive) @AT@ 3034 @LENGTH@ 38
---------UPD SimpleName@@Name:processor @TO@ Name:ManifestUtils @AT@ 3034 @LENGTH@ 9


UPD ExpressionStatement@@MethodInvocation:connector.get(OP).set(ADD_CONNECTOR) @TO@ MethodInvocation:connector.get(OP).set(ADD) @AT@ 10744 @LENGTH@ 37
---UPD MethodInvocation@@connector.get(OP).set(ADD_CONNECTOR) @TO@ connector.get(OP).set(ADD) @AT@ 10744 @LENGTH@ 36
------UPD SimpleName@@MethodName:set:[ADD_CONNECTOR] @TO@ MethodName:set:[ADD] @AT@ 10762 @LENGTH@ 18
---------UPD SimpleName@@ADD_CONNECTOR @TO@ ADD @AT@ 10766 @LENGTH@ 13


UPD ReturnStatement@@InfixExpression:"https://github.com/" + providerAccountId @TO@ MethodInvocation:github.getProfileUrl() @AT@ 1802 @LENGTH@ 49
---DEL InfixExpression@@"https://github.com/" + providerAccountId @AT@ 1809 @LENGTH@ 41
------DEL StringLiteral@@"https://github.com/" @AT@ 1809 @LENGTH@ 21
------DEL Operator@@+ @AT@ 1830 @LENGTH@ 1
------DEL SimpleName@@providerAccountId @AT@ 1833 @LENGTH@ 17
---INS MethodInvocation@@github.getProfileUrl() @TO@ ReturnStatement@@InfixExpression:"https://github.com/" + providerAccountId @AT@ 1809 @LENGTH@ 22
------INS SimpleName@@Name:github @TO@ MethodInvocation@@github.getProfileUrl() @AT@ 1809 @LENGTH@ 6
------INS SimpleName@@MethodName:getProfileUrl:[] @TO@ MethodInvocation@@github.getProfileUrl() @AT@ 1816 @LENGTH@ 15


UPD VariableDeclarationStatement@@final ModelNode result=hostResults.get(localHostName).get(RESULT); @TO@ final ModelNode result=getSingleHostResult(hostResults); @AT@ 18452 @LENGTH@ 68
---UPD VariableDeclarationFragment@@result=hostResults.get(localHostName).get(RESULT) @TO@ result=getSingleHostResult(hostResults) @AT@ 18468 @LENGTH@ 51
------UPD MethodInvocation@@hostResults.get(localHostName).get(RESULT) @TO@ getSingleHostResult(hostResults) @AT@ 18477 @LENGTH@ 42
---------DEL MethodInvocation@@MethodName:get:[localHostName] @AT@ 18477 @LENGTH@ 30
------------DEL SimpleName@@localHostName @AT@ 18493 @LENGTH@ 13
---------DEL SimpleName@@Name:hostResults @AT@ 18477 @LENGTH@ 11
---------UPD SimpleName@@MethodName:get:[RESULT] @TO@ MethodName:getSingleHostResult:[hostResults] @AT@ 18508 @LENGTH@ 11
------------UPD SimpleName@@RESULT @TO@ hostResults @AT@ 18512 @LENGTH@ 6


UPD IfStatement@@if (Util.isSuccess(result)) {  batchManager.discardActiveBatch();  ctx.printLine("The batch executed successfully.");} @TO@ if (Util.isSuccess(result)) {  batchManager.discardActiveBatch();  ctx.printLine("The batch executed successfully.");} else {  ctx.printLine("Failed to execute batch: " + Util.getFailureDescription(result));} @AT@ 2797 @LENGTH@ 160
---INS Block@@ElseBody:{  ctx.printLine("Failed to execute batch: " + Util.getFailureDescription(result));} @TO@ IfStatement@@if (Util.isSuccess(result)) {  batchManager.discardActiveBatch();  ctx.printLine("The batch executed successfully.");} @AT@ 2963 @LENGTH@ 112
------INS ExpressionStatement@@MethodInvocation:ctx.printLine("Failed to execute batch: " + Util.getFailureDescription(result)) @TO@ Block@@ElseBody:{  ctx.printLine("Failed to execute batch: " + Util.getFailureDescription(result));} @AT@ 2981 @LENGTH@ 80
---------INS MethodInvocation@@ctx.printLine("Failed to execute batch: " + Util.getFailureDescription(result)) @TO@ ExpressionStatement@@MethodInvocation:ctx.printLine("Failed to execute batch: " + Util.getFailureDescription(result)) @AT@ 2981 @LENGTH@ 79
------------INS SimpleName@@Name:ctx @TO@ MethodInvocation@@ctx.printLine("Failed to execute batch: " + Util.getFailureDescription(result)) @AT@ 2981 @LENGTH@ 3
------------INS SimpleName@@MethodName:printLine:["Failed to execute batch: " + Util.getFailureDescription(result)] @TO@ MethodInvocation@@ctx.printLine("Failed to execute batch: " + Util.getFailureDescription(result)) @AT@ 2985 @LENGTH@ 75
---------------INS InfixExpression@@"Failed to execute batch: " + Util.getFailureDescription(result) @TO@ SimpleName@@MethodName:printLine:["Failed to execute batch: " + Util.getFailureDescription(result)] @AT@ 2995 @LENGTH@ 64
------------------INS StringLiteral@@"Failed to execute batch: " @TO@ InfixExpression@@"Failed to execute batch: " + Util.getFailureDescription(result) @AT@ 2995 @LENGTH@ 27
------------------INS Operator@@+ @TO@ InfixExpression@@"Failed to execute batch: " + Util.getFailureDescription(result) @AT@ 3022 @LENGTH@ 1
------------------INS MethodInvocation@@Util.getFailureDescription(result) @TO@ InfixExpression@@"Failed to execute batch: " + Util.getFailureDescription(result) @AT@ 3025 @LENGTH@ 34
---------------------INS SimpleName@@Name:Util @TO@ MethodInvocation@@Util.getFailureDescription(result) @AT@ 3025 @LENGTH@ 4
---------------------INS SimpleName@@MethodName:getFailureDescription:[result] @TO@ MethodInvocation@@Util.getFailureDescription(result) @AT@ 3030 @LENGTH@ 29
------------------------INS SimpleName@@result @TO@ SimpleName@@MethodName:getFailureDescription:[result] @AT@ 3052 @LENGTH@ 6


UPD VariableDeclarationStatement@@Manifest mf=processor.getOrCreateManifest(archive); @TO@ Manifest mf=ManifestUtils.getOrCreateManifest(archive); @AT@ 3020 @LENGTH@ 53
---UPD VariableDeclarationFragment@@mf=processor.getOrCreateManifest(archive) @TO@ mf=ManifestUtils.getOrCreateManifest(archive) @AT@ 3029 @LENGTH@ 43
------UPD MethodInvocation@@processor.getOrCreateManifest(archive) @TO@ ManifestUtils.getOrCreateManifest(archive) @AT@ 3034 @LENGTH@ 38
---------UPD SimpleName@@Name:processor @TO@ Name:ManifestUtils @AT@ 3034 @LENGTH@ 9


UPD TypeDeclaration@@[private]MyCustomRoutePolicy, RoutePolicySupport @TO@ [private, final]MyCustomRoutePolicy, RoutePolicySupport @AT@ 1645 @LENGTH@ 348
---INS Modifier@@final @TO@ TypeDeclaration@@[private]MyCustomRoutePolicy, RoutePolicySupport @AT@ 1653 @LENGTH@ 5


DEL FieldDeclaration@@private, static, final, transient, Logger, [LOG=LoggerFactory.getLogger(SimpleScheduledCombinedRoutePolicyTest.class)] @AT@ 1309 @LENGTH@ 114
---DEL Modifier@@private @AT@ 1309 @LENGTH@ 7
---DEL Modifier@@static @AT@ 1317 @LENGTH@ 6
---DEL Modifier@@final @AT@ 1324 @LENGTH@ 5
---DEL Modifier@@transient @AT@ 1330 @LENGTH@ 9
---DEL SimpleType@@Logger @AT@ 1340 @LENGTH@ 6
---DEL VariableDeclarationFragment@@LOG=LoggerFactory.getLogger(SimpleScheduledCombinedRoutePolicyTest.class) @AT@ 1347 @LENGTH@ 75
------DEL SimpleName@@LOG @AT@ 1347 @LENGTH@ 3
------DEL MethodInvocation@@LoggerFactory.getLogger(SimpleScheduledCombinedRoutePolicyTest.class) @AT@ 1353 @LENGTH@ 69
---------DEL SimpleName@@Name:LoggerFactory @AT@ 1353 @LENGTH@ 13
---------DEL SimpleName@@MethodName:getLogger:[SimpleScheduledCombinedRoutePolicyTest.class] @AT@ 1367 @LENGTH@ 55
------------DEL TypeLiteral@@SimpleScheduledCombinedRoutePolicyTest.class @AT@ 1377 @LENGTH@ 44


UPD ExpressionStatement@@MethodInvocation:factory.setUsePool(false) @TO@ MethodInvocation:factory.setUsePool(true) @AT@ 1288 @LENGTH@ 26
---UPD MethodInvocation@@factory.setUsePool(false) @TO@ factory.setUsePool(true) @AT@ 1288 @LENGTH@ 25
------UPD SimpleName@@MethodName:setUsePool:[false] @TO@ MethodName:setUsePool:[true] @AT@ 1296 @LENGTH@ 17
---------UPD BooleanLiteral@@false @TO@ true @AT@ 1307 @LENGTH@ 5


UPD VariableDeclarationStatement@@final ServiceActivatorContext serviceActivatorContext=new ServiceActivatorContextImpl(context.getBatchBuilder()); @TO@ final ServiceActivatorContext serviceActivatorContext=new ServiceActivatorContextImpl(context.getBatchBuilder(),null); @AT@ 2350 @LENGTH@ 115
---UPD VariableDeclarationFragment@@serviceActivatorContext=new ServiceActivatorContextImpl(context.getBatchBuilder()) @TO@ serviceActivatorContext=new ServiceActivatorContextImpl(context.getBatchBuilder(),null) @AT@ 2380 @LENGTH@ 84
------UPD ClassInstanceCreation@@ServiceActivatorContextImpl[context.getBatchBuilder()] @TO@ ServiceActivatorContextImpl[context.getBatchBuilder(), null] @AT@ 2406 @LENGTH@ 58
---------INS NullLiteral@@null @TO@ ClassInstanceCreation@@ServiceActivatorContextImpl[context.getBatchBuilder()] @AT@ 2520 @LENGTH@ 4


UPD MethodDeclaration@@public, static, void, MethodName:addService, final ServiceName name, final String relativePath, final String relativeTo, final ServiceTarget serviceTarget,  @TO@ public, static, ServiceController<String>, MethodName:addService, final ServiceName name, final String relativePath, final String relativeTo, final ServiceTarget serviceTarget,  @AT@ 1989 @LENGTH@ 396
---DEL PrimitiveType@@void @AT@ 2003 @LENGTH@ 4
---INS ParameterizedType@@ServiceController<String> @TO@ MethodDeclaration@@public, static, void, MethodName:addService, final ServiceName name, final String relativePath, final String relativeTo, final ServiceTarget serviceTarget,  @AT@ 2079 @LENGTH@ 25
------INS SimpleType@@ServiceController @TO@ ParameterizedType@@ServiceController<String> @AT@ 2079 @LENGTH@ 17
------INS SimpleType@@String @TO@ ParameterizedType@@ServiceController<String> @AT@ 2097 @LENGTH@ 6
---DEL ExpressionStatement@@MethodInvocation:serviceTarget.addService(name,service).addDependency(pathNameOf(relativeTo),String.class,service.injectedPath).install() @AT@ 2229 @LENGTH@ 150
---INS ReturnStatement@@MethodInvocation:serviceTarget.addService(name,service).addDependency(pathNameOf(relativeTo),String.class,service.injectedPath).install() @TO@ MethodDeclaration@@public, static, void, MethodName:addService, final ServiceName name, final String relativePath, final String relativeTo, final ServiceTarget serviceTarget,  @AT@ 2326 @LENGTH@ 157
------MOV MethodInvocation@@serviceTarget.addService(name,service).addDependency(pathNameOf(relativeTo),String.class,service.injectedPath).install() @TO@ ReturnStatement@@MethodInvocation:serviceTarget.addService(name,service).addDependency(pathNameOf(relativeTo),String.class,service.injectedPath).install() @AT@ 2229 @LENGTH@ 149


INS FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @TO@ TypeDeclaration@@[public]OpenIDAuthenticationToken, AbstractAuthenticationToken @AT@ 1105 @LENGTH@ 90
---INS Modifier@@private @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @AT@ 1105 @LENGTH@ 7
---INS Modifier@@static @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @AT@ 1113 @LENGTH@ 6
---INS Modifier@@final @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @AT@ 1120 @LENGTH@ 5
---INS PrimitiveType@@long @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @AT@ 1126 @LENGTH@ 4
---INS VariableDeclarationFragment@@serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @AT@ 1131 @LENGTH@ 63
------INS SimpleName@@serialVersionUID @TO@ VariableDeclarationFragment@@serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID @AT@ 1131 @LENGTH@ 16
------INS QualifiedName@@SpringSecurityCoreVersion.SERIAL_VERSION_UID @TO@ VariableDeclarationFragment@@serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID @AT@ 1150 @LENGTH@ 44
---------INS SimpleName@@SpringSecurityCoreVersion @TO@ QualifiedName@@SpringSecurityCoreVersion.SERIAL_VERSION_UID @AT@ 1150 @LENGTH@ 25
---------INS SimpleName@@SERIAL_VERSION_UID @TO@ QualifiedName@@SpringSecurityCoreVersion.SERIAL_VERSION_UID @AT@ 1176 @LENGTH@ 18


UPD ReturnStatement@@InfixExpression:other instanceof ParamList && equals((ParamList)other) @TO@ InfixExpression:other instanceof ParamNameList && equals((ParamNameList)other) @AT@ 16663 @LENGTH@ 62
---UPD InfixExpression@@other instanceof ParamList && equals((ParamList)other) @TO@ other instanceof ParamNameList && equals((ParamNameList)other) @AT@ 16670 @LENGTH@ 54
------UPD InstanceofExpression@@other instanceof ParamList @TO@ other instanceof ParamNameList @AT@ 16670 @LENGTH@ 26
---------UPD SimpleType@@ParamList @TO@ ParamNameList @AT@ 16687 @LENGTH@ 9
------UPD MethodInvocation@@equals((ParamList)other) @TO@ equals((ParamNameList)other) @AT@ 16700 @LENGTH@ 24
---------UPD SimpleName@@MethodName:equals:[(ParamList)other] @TO@ MethodName:equals:[(ParamNameList)other] @AT@ 16700 @LENGTH@ 24
------------UPD CastExpression@@(ParamList)other @TO@ (ParamNameList)other @AT@ 16707 @LENGTH@ 16
---------------UPD SimpleType@@ParamList @TO@ ParamNameList @AT@ 16708 @LENGTH@ 9


UPD MethodDeclaration@@public, void, MethodName:handle, ParsingContext ctx, OperationFormatException,  @TO@ public, void, MethodName:handle, ParsingContext ctx, CommandFormatException,  @AT@ 1391 @LENGTH@ 121
---UPD SimpleType@@OperationFormatException @TO@ CommandFormatException @AT@ 1449 @LENGTH@ 24


INS FieldDeclaration@@private, static, final, long, [serialVersionUID=1L] @TO@ TypeDeclaration@@[public]MappingConfigurationException, Throwable @AT@ 797 @LENGTH@ 48
---INS Modifier@@private @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=1L] @AT@ 797 @LENGTH@ 7
---INS Modifier@@static @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=1L] @AT@ 805 @LENGTH@ 6
---INS Modifier@@final @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=1L] @AT@ 812 @LENGTH@ 5
---INS PrimitiveType@@long @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=1L] @AT@ 818 @LENGTH@ 4
---INS VariableDeclarationFragment@@serialVersionUID=1L @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=1L] @AT@ 823 @LENGTH@ 21
------INS SimpleName@@serialVersionUID @TO@ VariableDeclarationFragment@@serialVersionUID=1L @AT@ 823 @LENGTH@ 16
------INS NumberLiteral@@1L @TO@ VariableDeclarationFragment@@serialVersionUID=1L @AT@ 842 @LENGTH@ 2


UPD TryStatement@@try {  StringWriter writer=new StringWriter();  createIndentingTransformer().transform(new DOMSource(node),new StreamResult(writer));  return writer.toString();} catch (TransformerException e) {  throw new IllegalStateException(e);} @TO@ try {  StringWriter writer=new StringWriter();  createIndentingTransformer().transform(new DOMSource(node),new StreamResult(writer));  StringBuilder sb=new StringBuilder();  for (  String line : writer.toString().split("\n")) {    sb.append(line.trim()).append("\n");  }  return sb.toString();} catch (TransformerException e) {  throw new IllegalStateException(e);} @AT@ 6629 @LENGTH@ 249
---INS VariableDeclarationStatement@@StringBuilder sb=new StringBuilder(); @TO@ TryStatement@@try {  StringWriter writer=new StringWriter();  createIndentingTransformer().transform(new DOMSource(node),new StreamResult(writer));  return writer.toString();} catch (TransformerException e) {  throw new IllegalStateException(e);} @AT@ 6773 @LENGTH@ 39
------INS SimpleType@@StringBuilder @TO@ VariableDeclarationStatement@@StringBuilder sb=new StringBuilder(); @AT@ 6773 @LENGTH@ 13
------INS VariableDeclarationFragment@@sb=new StringBuilder() @TO@ VariableDeclarationStatement@@StringBuilder sb=new StringBuilder(); @AT@ 6787 @LENGTH@ 24
---------INS SimpleName@@sb @TO@ VariableDeclarationFragment@@sb=new StringBuilder() @AT@ 6787 @LENGTH@ 2
---------INS ClassInstanceCreation@@StringBuilder[] @TO@ VariableDeclarationFragment@@sb=new StringBuilder() @AT@ 6792 @LENGTH@ 19
------------INS New@@new @TO@ ClassInstanceCreation@@StringBuilder[] @AT@ 6792 @LENGTH@ 3
------------INS SimpleType@@StringBuilder @TO@ ClassInstanceCreation@@StringBuilder[] @AT@ 6796 @LENGTH@ 13
---UPD ReturnStatement@@MethodInvocation:writer.toString() @TO@ MethodInvocation:sb.toString() @AT@ 6773 @LENGTH@ 25
------UPD MethodInvocation@@writer.toString() @TO@ sb.toString() @AT@ 6780 @LENGTH@ 17
---------UPD SimpleName@@Name:writer @TO@ Name:sb @AT@ 6780 @LENGTH@ 6
---INS EnhancedForStatement@@for (String line : writer.toString().split("\n")) {  sb.append(line.trim()).append("\n");} @TO@ TryStatement@@try {  StringWriter writer=new StringWriter();  createIndentingTransformer().transform(new DOMSource(node),new StreamResult(writer));  return writer.toString();} catch (TransformerException e) {  throw new IllegalStateException(e);} @AT@ 6816 @LENGTH@ 97
------INS SingleVariableDeclaration@@String line @TO@ EnhancedForStatement@@for (String line : writer.toString().split("\n")) {  sb.append(line.trim()).append("\n");} @AT@ 6821 @LENGTH@ 11
---------INS SimpleType@@String @TO@ SingleVariableDeclaration@@String line @AT@ 6821 @LENGTH@ 6
---------INS SimpleName@@line @TO@ SingleVariableDeclaration@@String line @AT@ 6828 @LENGTH@ 4
------INS MethodInvocation@@writer.toString().split("\n") @TO@ EnhancedForStatement@@for (String line : writer.toString().split("\n")) {  sb.append(line.trim()).append("\n");} @AT@ 6835 @LENGTH@ 29
---------INS MethodInvocation@@MethodName:toString:[] @TO@ MethodInvocation@@writer.toString().split("\n") @AT@ 6835 @LENGTH@ 17
---------INS SimpleName@@Name:writer @TO@ MethodInvocation@@writer.toString().split("\n") @AT@ 6835 @LENGTH@ 6
---------INS SimpleName@@MethodName:split:["\n"] @TO@ MethodInvocation@@writer.toString().split("\n") @AT@ 6853 @LENGTH@ 11
------------INS StringLiteral@@"\n" @TO@ SimpleName@@MethodName:split:["\n"] @AT@ 6859 @LENGTH@ 4
------INS ExpressionStatement@@MethodInvocation:sb.append(line.trim()).append("\n") @TO@ EnhancedForStatement@@for (String line : writer.toString().split("\n")) {  sb.append(line.trim()).append("\n");} @AT@ 6872 @LENGTH@ 36
---------INS MethodInvocation@@sb.append(line.trim()).append("\n") @TO@ ExpressionStatement@@MethodInvocation:sb.append(line.trim()).append("\n") @AT@ 6872 @LENGTH@ 35
------------INS MethodInvocation@@MethodName:append:[line.trim()] @TO@ MethodInvocation@@sb.append(line.trim()).append("\n") @AT@ 6872 @LENGTH@ 22
---------------INS MethodInvocation@@line.trim() @TO@ MethodInvocation@@MethodName:append:[line.trim()] @AT@ 6882 @LENGTH@ 11
------------------INS SimpleName@@Name:line @TO@ MethodInvocation@@line.trim() @AT@ 6882 @LENGTH@ 4
------------------INS SimpleName@@MethodName:trim:[] @TO@ MethodInvocation@@line.trim() @AT@ 6887 @LENGTH@ 6
------------INS SimpleName@@Name:sb @TO@ MethodInvocation@@sb.append(line.trim()).append("\n") @AT@ 6872 @LENGTH@ 2
------------INS SimpleName@@MethodName:append:["\n"] @TO@ MethodInvocation@@sb.append(line.trim()).append("\n") @AT@ 6895 @LENGTH@ 12
---------------INS StringLiteral@@"\n" @TO@ SimpleName@@MethodName:append:["\n"] @AT@ 6902 @LENGTH@ 4


DEL IfStatement@@if (unit.getParent() == null) {  unit.putAttachment(MARKER,Boolean.TRUE);} else {  unit.getParent().putAttachment(MARKER,Boolean.TRUE);} @AT@ 1621 @LENGTH@ 178
---DEL InfixExpression@@unit.getParent() == null @AT@ 1625 @LENGTH@ 24
------DEL MethodInvocation@@unit.getParent() @AT@ 1625 @LENGTH@ 16
---------DEL SimpleName@@Name:unit @AT@ 1625 @LENGTH@ 4
---------DEL SimpleName@@MethodName:getParent:[] @AT@ 1630 @LENGTH@ 11
------DEL Operator@@== @AT@ 1641 @LENGTH@ 2
------DEL NullLiteral@@null @AT@ 1645 @LENGTH@ 4
---DEL Block@@ThenBody:{  unit.putAttachment(MARKER,Boolean.TRUE);} @AT@ 1651 @LENGTH@ 65
---DEL Block@@ElseBody:{  unit.getParent().putAttachment(MARKER,Boolean.TRUE);} @AT@ 1722 @LENGTH@ 77
------DEL ExpressionStatement@@MethodInvocation:unit.getParent().putAttachment(MARKER,Boolean.TRUE) @AT@ 1736 @LENGTH@ 53
---------DEL MethodInvocation@@unit.getParent().putAttachment(MARKER,Boolean.TRUE) @AT@ 1736 @LENGTH@ 52
------------DEL MethodInvocation@@MethodName:getParent:[] @AT@ 1736 @LENGTH@ 16
------------DEL SimpleName@@Name:unit @AT@ 1736 @LENGTH@ 4
------------DEL SimpleName@@MethodName:putAttachment:[MARKER, Boolean.TRUE] @AT@ 1753 @LENGTH@ 35
---------------DEL SimpleName@@MARKER @AT@ 1767 @LENGTH@ 6
---------------DEL QualifiedName@@Boolean.TRUE @AT@ 1775 @LENGTH@ 12
------------------DEL SimpleName@@Boolean @AT@ 1775 @LENGTH@ 7
------------------DEL SimpleName@@TRUE @AT@ 1783 @LENGTH@ 4


INS ExpressionStatement@@MethodInvocation:this.addConcurrencyManagementInterceptor() @TO@ MethodDeclaration@@public, voidMethodName:SingletonComponentDescription, final String componentName, final String componentClassName, final EjbJarDescription ejbJarDescription, final ServiceName deploymentUnitServiceName,  @AT@ 3269 @LENGTH@ 43
---INS MethodInvocation@@this.addConcurrencyManagementInterceptor() @TO@ ExpressionStatement@@MethodInvocation:this.addConcurrencyManagementInterceptor() @AT@ 3269 @LENGTH@ 42
------INS ThisExpression@@this @TO@ MethodInvocation@@this.addConcurrencyManagementInterceptor() @AT@ 3269 @LENGTH@ 4
------INS SimpleName@@MethodName:addConcurrencyManagementInterceptor:[] @TO@ MethodInvocation@@this.addConcurrencyManagementInterceptor() @AT@ 3274 @LENGTH@ 37


UPD EnhancedForStatement@@for (Object key : beans.keySet()) {  Object bean=beans.get(key);  if (LOG.isTraceEnabled()) {    LOG.trace("Found RouteBuilder with id: " + key + " -> "+ bean);  }  if (shouldIgnoreBean(bean)) {    if (LOG.isDebugEnabled()) {      LOG.debug("Ignoring RouteBuilder id: " + key);    }    continue;  }  if (!isFilteredClass(bean)) {    if (LOG.isDebugEnabled()) {      LOG.debug("Ignoring filtered RouteBuilder id: " + key + " as class: "+ bean.getClass());    }    continue;  }  if (LOG.isDebugEnabled()) {    LOG.debug("Adding instantiated RouteBuilder id: " + key + " as class: "+ bean.getClass());  }  list.add((RoutesBuilder)bean);} @TO@ for (Object object : beans.entrySet()) {  Entry entry=(Entry)object;  Object bean=entry.getValue();  Object key=entry.getKey();  if (LOG.isTraceEnabled()) {    LOG.trace("Found RouteBuilder with id: " + key + " -> "+ bean);  }  if (shouldIgnoreBean(bean)) {    if (LOG.isDebugEnabled()) {      LOG.debug("Ignoring RouteBuilder id: " + key);    }    continue;  }  if (!isFilteredClass(bean)) {    if (LOG.isDebugEnabled()) {      LOG.debug("Ignoring filtered RouteBuilder id: " + key + " as class: "+ bean.getClass());    }    continue;  }  if (LOG.isDebugEnabled()) {    LOG.debug("Adding instantiated RouteBuilder id: " + key + " as class: "+ bean.getClass());  }  list.add((RoutesBuilder)bean);} @AT@ 2036 @LENGTH@ 944
---UPD SingleVariableDeclaration@@Object key @TO@ Object object @AT@ 2041 @LENGTH@ 10
------UPD SimpleName@@key @TO@ object @AT@ 2048 @LENGTH@ 3
---UPD MethodInvocation@@beans.keySet() @TO@ beans.entrySet() @AT@ 2054 @LENGTH@ 14
------UPD SimpleName@@MethodName:keySet:[] @TO@ MethodName:entrySet:[] @AT@ 2060 @LENGTH@ 8
---UPD VariableDeclarationStatement@@Object bean=beans.get(key); @TO@ Object bean=entry.getValue(); @AT@ 2084 @LENGTH@ 29
------UPD VariableDeclarationFragment@@bean=beans.get(key) @TO@ bean=entry.getValue() @AT@ 2091 @LENGTH@ 21
---------UPD MethodInvocation@@beans.get(key) @TO@ entry.getValue() @AT@ 2098 @LENGTH@ 14
------------UPD SimpleName@@Name:beans @TO@ Name:entry @AT@ 2098 @LENGTH@ 5
------------UPD SimpleName@@MethodName:get:[key] @TO@ MethodName:getValue:[] @AT@ 2104 @LENGTH@ 8
---------------DEL SimpleName@@key @AT@ 2108 @LENGTH@ 3
---INS VariableDeclarationStatement@@Entry entry=(Entry)object; @TO@ EnhancedForStatement@@for (Object key : beans.keySet()) {  Object bean=beans.get(key);  if (LOG.isTraceEnabled()) {    LOG.trace("Found RouteBuilder with id: " + key + " -> "+ bean);  }  if (shouldIgnoreBean(bean)) {    if (LOG.isDebugEnabled()) {      LOG.debug("Ignoring RouteBuilder id: " + key);    }    continue;  }  if (!isFilteredClass(bean)) {    if (LOG.isDebugEnabled()) {      LOG.debug("Ignoring filtered RouteBuilder id: " + key + " as class: "+ bean.getClass());    }    continue;  }  if (LOG.isDebugEnabled()) {    LOG.debug("Adding instantiated RouteBuilder id: " + key + " as class: "+ bean.getClass());  }  list.add((RoutesBuilder)bean);} @AT@ 2117 @LENGTH@ 29
------INS SimpleType@@Entry @TO@ VariableDeclarationStatement@@Entry entry=(Entry)object; @AT@ 2117 @LENGTH@ 5
------INS VariableDeclarationFragment@@entry=(Entry)object @TO@ VariableDeclarationStatement@@Entry entry=(Entry)object; @AT@ 2123 @LENGTH@ 22
---------INS SimpleName@@entry @TO@ VariableDeclarationFragment@@entry=(Entry)object @AT@ 2123 @LENGTH@ 5
---------INS CastExpression@@(Entry)object @TO@ VariableDeclarationFragment@@entry=(Entry)object @AT@ 2131 @LENGTH@ 14
------------INS SimpleType@@Entry @TO@ CastExpression@@(Entry)object @AT@ 2132 @LENGTH@ 5
------------INS SimpleName@@object @TO@ CastExpression@@(Entry)object @AT@ 2139 @LENGTH@ 6
---INS VariableDeclarationStatement@@Object key=entry.getKey(); @TO@ EnhancedForStatement@@for (Object key : beans.keySet()) {  Object bean=beans.get(key);  if (LOG.isTraceEnabled()) {    LOG.trace("Found RouteBuilder with id: " + key + " -> "+ bean);  }  if (shouldIgnoreBean(bean)) {    if (LOG.isDebugEnabled()) {      LOG.debug("Ignoring RouteBuilder id: " + key);    }    continue;  }  if (!isFilteredClass(bean)) {    if (LOG.isDebugEnabled()) {      LOG.debug("Ignoring filtered RouteBuilder id: " + key + " as class: "+ bean.getClass());    }    continue;  }  if (LOG.isDebugEnabled()) {    LOG.debug("Adding instantiated RouteBuilder id: " + key + " as class: "+ bean.getClass());  }  list.add((RoutesBuilder)bean);} @AT@ 2203 @LENGTH@ 28
------INS SimpleType@@Object @TO@ VariableDeclarationStatement@@Object key=entry.getKey(); @AT@ 2203 @LENGTH@ 6
------INS VariableDeclarationFragment@@key=entry.getKey() @TO@ VariableDeclarationStatement@@Object key=entry.getKey(); @AT@ 2210 @LENGTH@ 20
---------INS SimpleName@@key @TO@ VariableDeclarationFragment@@key=entry.getKey() @AT@ 2210 @LENGTH@ 3
---------INS MethodInvocation@@entry.getKey() @TO@ VariableDeclarationFragment@@key=entry.getKey() @AT@ 2216 @LENGTH@ 14
------------INS SimpleName@@Name:entry @TO@ MethodInvocation@@entry.getKey() @AT@ 2216 @LENGTH@ 5
------------INS SimpleName@@MethodName:getKey:[] @TO@ MethodInvocation@@entry.getKey() @AT@ 2222 @LENGTH@ 8


UPD TypeDeclaration@@[public, static]MyCustomRoutePolicy, RoutePolicySupport @TO@ [public, static, final]MyCustomRoutePolicy, RoutePolicySupport @AT@ 1895 @LENGTH@ 354
---INS Modifier@@final @TO@ TypeDeclaration@@[public, static]MyCustomRoutePolicy, RoutePolicySupport @AT@ 1909 @LENGTH@ 5


UPD MethodDeclaration@@public, void, MethodName:setSchema, final XsdSchema schema,  @TO@ public, void, MethodName:setSchema, XsdSchema schema,  @AT@ 3857 @LENGTH@ 94
---UPD SingleVariableDeclaration@@final XsdSchema schema @TO@ XsdSchema schema @AT@ 3879 @LENGTH@ 22
------DEL Modifier@@final @AT@ 3879 @LENGTH@ 5


UPD VariableDeclarationStatement@@final ServiceController<?> controller=context.getController().getServiceContainer().getRequiredService(Services.JBOSS_DEPLOYMENT_UNIT.append(name).append(FIRST_PHASE_NAME)); @TO@ final ServiceController<?> controller=context.getController().getServiceContainer().getService(deploymentUnit.getServiceName().append(FIRST_PHASE_NAME)); @AT@ 4480 @LENGTH@ 175
---UPD VariableDeclarationFragment@@controller=context.getController().getServiceContainer().getRequiredService(Services.JBOSS_DEPLOYMENT_UNIT.append(name).append(FIRST_PHASE_NAME)) @TO@ controller=context.getController().getServiceContainer().getService(deploymentUnit.getServiceName().append(FIRST_PHASE_NAME)) @AT@ 4507 @LENGTH@ 147
------UPD MethodInvocation@@context.getController().getServiceContainer().getRequiredService(Services.JBOSS_DEPLOYMENT_UNIT.append(name).append(FIRST_PHASE_NAME)) @TO@ context.getController().getServiceContainer().getService(deploymentUnit.getServiceName().append(FIRST_PHASE_NAME)) @AT@ 4520 @LENGTH@ 134
---------UPD SimpleName@@MethodName:getRequiredService:[Services.JBOSS_DEPLOYMENT_UNIT.append(name).append(FIRST_PHASE_NAME)] @TO@ MethodName:getService:[deploymentUnit.getServiceName().append(FIRST_PHASE_NAME)] @AT@ 4566 @LENGTH@ 88
------------UPD MethodInvocation@@Services.JBOSS_DEPLOYMENT_UNIT.append(name).append(FIRST_PHASE_NAME) @TO@ deploymentUnit.getServiceName().append(FIRST_PHASE_NAME) @AT@ 4585 @LENGTH@ 68
---------------UPD MethodInvocation@@MethodName:append:[name] @TO@ MethodName:getServiceName:[] @AT@ 4585 @LENGTH@ 43
------------------DEL SimpleName@@name @AT@ 4623 @LENGTH@ 4
---------------DEL QualifiedName@@Name:Services.JBOSS_DEPLOYMENT_UNIT @AT@ 4585 @LENGTH@ 30
---------------INS SimpleName@@Name:deploymentUnit @TO@ MethodInvocation@@Services.JBOSS_DEPLOYMENT_UNIT.append(name).append(FIRST_PHASE_NAME) @AT@ 4594 @LENGTH@ 14


UPD IfStatement@@if (MappingBeanHelper.isSimpleType(type.getComponentType())) {  dbList.add(propObjItem);} else {  BasicDBObject propDbObj=new BasicDBObject();  write(propObjItem,propDbObj,mappingContext.getPersistentEntity(prop.getTypeInformation()));  dbList.add(propDbObj);} @TO@ if (type.isArray() && MappingBeanHelper.isSimpleType(type.getComponentType())) {  dbList.add(propObjItem);} else {  BasicDBObject propDbObj=new BasicDBObject();  write(propObjItem,propDbObj,mappingContext.getPersistentEntity(prop.getTypeInformation()));  dbList.add(propDbObj);} @AT@ 15918 @LENGTH@ 318
---INS InfixExpression@@type.isArray() && MappingBeanHelper.isSimpleType(type.getComponentType()) @TO@ IfStatement@@if (MappingBeanHelper.isSimpleType(type.getComponentType())) {  dbList.add(propObjItem);} else {  BasicDBObject propDbObj=new BasicDBObject();  write(propObjItem,propDbObj,mappingContext.getPersistentEntity(prop.getTypeInformation()));  dbList.add(propDbObj);} @AT@ 15922 @LENGTH@ 73
------MOV MethodInvocation@@MappingBeanHelper.isSimpleType(type.getComponentType()) @TO@ InfixExpression@@type.isArray() && MappingBeanHelper.isSimpleType(type.getComponentType()) @AT@ 15922 @LENGTH@ 55
------INS MethodInvocation@@type.isArray() @TO@ InfixExpression@@type.isArray() && MappingBeanHelper.isSimpleType(type.getComponentType()) @AT@ 15922 @LENGTH@ 14
---------INS SimpleName@@Name:type @TO@ MethodInvocation@@type.isArray() @AT@ 15922 @LENGTH@ 4
---------INS SimpleName@@MethodName:isArray:[] @TO@ MethodInvocation@@type.isArray() @AT@ 15927 @LENGTH@ 9
------INS Operator@@&& @TO@ InfixExpression@@type.isArray() && MappingBeanHelper.isSimpleType(type.getComponentType()) @AT@ 15936 @LENGTH@ 2


UPD VariableDeclarationStatement@@ObjectName on=ObjectName.getInstance("org.apache.camel:context=localhost/camel-1,type=threadpools,name=threads1(threads)"); @TO@ ObjectName on=ObjectName.getInstance("org.apache.camel:context=localhost/camel-1,type=threadpools,name=\"threads1(threads)\""); @AT@ 1172 @LENGTH@ 125
---UPD VariableDeclarationFragment@@on=ObjectName.getInstance("org.apache.camel:context=localhost/camel-1,type=threadpools,name=threads1(threads)") @TO@ on=ObjectName.getInstance("org.apache.camel:context=localhost/camel-1,type=threadpools,name=\"threads1(threads)\"") @AT@ 1183 @LENGTH@ 113
------UPD MethodInvocation@@ObjectName.getInstance("org.apache.camel:context=localhost/camel-1,type=threadpools,name=threads1(threads)") @TO@ ObjectName.getInstance("org.apache.camel:context=localhost/camel-1,type=threadpools,name=\"threads1(threads)\"") @AT@ 1188 @LENGTH@ 108
---------UPD SimpleName@@MethodName:getInstance:["org.apache.camel:context=localhost/camel-1,type=threadpools,name=threads1(threads)"] @TO@ MethodName:getInstance:["org.apache.camel:context=localhost/camel-1,type=threadpools,name=\"threads1(threads)\""] @AT@ 1199 @LENGTH@ 97
------------UPD StringLiteral@@"org.apache.camel:context=localhost/camel-1,type=threadpools,name=threads1(threads)" @TO@ "org.apache.camel:context=localhost/camel-1,type=threadpools,name=\"threads1(threads)\"" @AT@ 1211 @LENGTH@ 84


UPD Block@@ElseBody:if (operation.hasDefined(HASH)) {  hash=operation.get(HASH).asBytes();} else {  throw new OperationFailedException(new ModelNode().set("Neither an attachment or a hash were passed in"));} @TO@ ElseBody:if (operation.hasDefined(HASH)) {  hash=operation.get(HASH).asBytes();} else {  throw new OperationFailedException(new ModelNode().set("Neither an attachment nor a hash were passed in"));} @AT@ 5280 @LENGTH@ 228
---UPD IfStatement@@if (operation.hasDefined(HASH)) {  hash=operation.get(HASH).asBytes();} else {  throw new OperationFailedException(new ModelNode().set("Neither an attachment or a hash were passed in"));} @TO@ if (operation.hasDefined(HASH)) {  hash=operation.get(HASH).asBytes();} else {  throw new OperationFailedException(new ModelNode().set("Neither an attachment nor a hash were passed in"));} @AT@ 5280 @LENGTH@ 228
------UPD Block@@ElseBody:{  throw new OperationFailedException(new ModelNode().set("Neither an attachment or a hash were passed in"));} @TO@ ElseBody:{  throw new OperationFailedException(new ModelNode().set("Neither an attachment nor a hash were passed in"));} @AT@ 5378 @LENGTH@ 130
---------UPD ThrowStatement@@ClassInstanceCreation:new OperationFailedException(new ModelNode().set("Neither an attachment or a hash were passed in")) @TO@ ClassInstanceCreation:new OperationFailedException(new ModelNode().set("Neither an attachment nor a hash were passed in")) @AT@ 5392 @LENGTH@ 106
------------UPD ClassInstanceCreation@@OperationFailedException[new ModelNode().set("Neither an attachment or a hash were passed in")] @TO@ OperationFailedException[new ModelNode().set("Neither an attachment nor a hash were passed in")] @AT@ 5398 @LENGTH@ 99
---------------UPD MethodInvocation@@new ModelNode().set("Neither an attachment or a hash were passed in") @TO@ new ModelNode().set("Neither an attachment nor a hash were passed in") @AT@ 5427 @LENGTH@ 69
------------------UPD SimpleName@@MethodName:set:["Neither an attachment or a hash were passed in"] @TO@ MethodName:set:["Neither an attachment nor a hash were passed in"] @AT@ 5443 @LENGTH@ 53
---------------------UPD StringLiteral@@"Neither an attachment or a hash were passed in" @TO@ "Neither an attachment nor a hash were passed in" @AT@ 5447 @LENGTH@ 48
---UPD IfStatement@@if (operation.hasDefined(HASH)) {  hash=operation.get(HASH).asBytes();} else {  throw new OperationFailedException(new ModelNode().set("Neither an attachment or a hash were passed in"));} @TO@ if (operation.hasDefined(HASH)) {  hash=operation.get(HASH).asBytes();} else {  throw new OperationFailedException(new ModelNode().set("Neither an attachment nor a hash were passed in"));} @AT@ 5280 @LENGTH@ 228
------UPD Block@@ElseBody:{  throw new OperationFailedException(new ModelNode().set("Neither an attachment or a hash were passed in"));} @TO@ ElseBody:{  throw new OperationFailedException(new ModelNode().set("Neither an attachment nor a hash were passed in"));} @AT@ 5378 @LENGTH@ 130
---------UPD ThrowStatement@@ClassInstanceCreation:new OperationFailedException(new ModelNode().set("Neither an attachment or a hash were passed in")) @TO@ ClassInstanceCreation:new OperationFailedException(new ModelNode().set("Neither an attachment nor a hash were passed in")) @AT@ 5392 @LENGTH@ 106
------------UPD ClassInstanceCreation@@OperationFailedException[new ModelNode().set("Neither an attachment or a hash were passed in")] @TO@ OperationFailedException[new ModelNode().set("Neither an attachment nor a hash were passed in")] @AT@ 5398 @LENGTH@ 99
---------------UPD MethodInvocation@@new ModelNode().set("Neither an attachment or a hash were passed in") @TO@ new ModelNode().set("Neither an attachment nor a hash were passed in") @AT@ 5427 @LENGTH@ 69
------------------UPD SimpleName@@MethodName:set:["Neither an attachment or a hash were passed in"] @TO@ MethodName:set:["Neither an attachment nor a hash were passed in"] @AT@ 5443 @LENGTH@ 53
---------------------UPD StringLiteral@@"Neither an attachment or a hash were passed in" @TO@ "Neither an attachment nor a hash were passed in" @AT@ 5447 @LENGTH@ 48


UPD ExpressionStatement@@MethodInvocation:controller.execute(ExecutionContextBuilder.Factory.create(update).build(),resultHandler) @TO@ MethodInvocation:domainModel.execute(ExecutionContextBuilder.Factory.create(update).build(),resultHandler) @AT@ 8570 @LENGTH@ 90
---UPD MethodInvocation@@controller.execute(ExecutionContextBuilder.Factory.create(update).build(),resultHandler) @TO@ domainModel.execute(ExecutionContextBuilder.Factory.create(update).build(),resultHandler) @AT@ 8570 @LENGTH@ 89
------UPD SimpleName@@Name:controller @TO@ Name:domainModel @AT@ 8570 @LENGTH@ 10


UPD ExpressionStatement@@MethodInvocation:log.errorf("started ResourceAdapterService %s",context.getController().getName()) @TO@ MethodInvocation:log.infof("started ResourceAdapterService %s",context.getController().getName()) @AT@ 1008 @LENGTH@ 83
---UPD MethodInvocation@@log.errorf("started ResourceAdapterService %s",context.getController().getName()) @TO@ log.infof("started ResourceAdapterService %s",context.getController().getName()) @AT@ 1008 @LENGTH@ 82
------UPD SimpleName@@MethodName:errorf:["started ResourceAdapterService %s", context.getController().getName()] @TO@ MethodName:infof:["started ResourceAdapterService %s", context.getController().getName()] @AT@ 1012 @LENGTH@ 78


UPD ExpressionStatement@@Assignment:server=EmbeddedServerFactory.create(jbossHomeDir,sysprops) @TO@ Assignment:server=EmbeddedServerFactory.create(jbossHomeDir,sysprops,System.getenv()) @AT@ 3157 @LENGTH@ 62
---UPD Assignment@@server=EmbeddedServerFactory.create(jbossHomeDir,sysprops) @TO@ server=EmbeddedServerFactory.create(jbossHomeDir,sysprops,System.getenv()) @AT@ 3157 @LENGTH@ 61
------UPD MethodInvocation@@EmbeddedServerFactory.create(jbossHomeDir,sysprops) @TO@ EmbeddedServerFactory.create(jbossHomeDir,sysprops,System.getenv()) @AT@ 3166 @LENGTH@ 52
---------UPD SimpleName@@MethodName:create:[jbossHomeDir, sysprops] @TO@ MethodName:create:[jbossHomeDir, sysprops, System.getenv()] @AT@ 3188 @LENGTH@ 30
------------INS MethodInvocation@@System.getenv() @TO@ SimpleName@@MethodName:create:[jbossHomeDir, sysprops] @AT@ 3219 @LENGTH@ 15
---------------INS SimpleName@@Name:System @TO@ MethodInvocation@@System.getenv() @AT@ 3219 @LENGTH@ 6
---------------INS SimpleName@@MethodName:getenv:[] @TO@ MethodInvocation@@System.getenv() @AT@ 3226 @LENGTH@ 8


UPD Block@@ElseBody:{  return "sample[1 Exchange per " + getSamplePeriod() + " "+ getUnits().toString().toLowerCase()+ "]";} @TO@ ElseBody:{  TimeUnit tu=getUnits() != null ? getUnits() : TimeUnit.SECONDS;  return "sample[1 Exchange per " + getSamplePeriod() + " "+ tu.name().toLowerCase()+ "]";} @AT@ 2793 @LENGTH@ 126
---UPD ReturnStatement@@InfixExpression:"sample[1 Exchange per " + getSamplePeriod() + " "+ getUnits().toString().toLowerCase()+ "]" @TO@ InfixExpression:"sample[1 Exchange per " + getSamplePeriod() + " "+ tu.name().toLowerCase()+ "]" @AT@ 2807 @LENGTH@ 102
------UPD InfixExpression@@"sample[1 Exchange per " + getSamplePeriod() + " "+ getUnits().toString().toLowerCase()+ "]" @TO@ "sample[1 Exchange per " + getSamplePeriod() + " "+ tu.name().toLowerCase()+ "]" @AT@ 2814 @LENGTH@ 94
---------UPD MethodInvocation@@getUnits().toString().toLowerCase() @TO@ tu.name().toLowerCase() @AT@ 2867 @LENGTH@ 35
------------DEL MethodInvocation@@MethodName:toString:[] @AT@ 2867 @LENGTH@ 21
------------UPD MethodInvocation@@MethodName:getUnits:[] @TO@ MethodName:name:[] @AT@ 2867 @LENGTH@ 10
------------INS SimpleName@@Name:tu @TO@ MethodInvocation@@getUnits().toString().toLowerCase() @AT@ 3009 @LENGTH@ 2
---INS VariableDeclarationStatement@@TimeUnit tu=getUnits() != null ? getUnits() : TimeUnit.SECONDS; @TO@ Block@@ElseBody:{  return "sample[1 Exchange per " + getSamplePeriod() + " "+ getUnits().toString().toLowerCase()+ "]";} @AT@ 2871 @LENGTH@ 65
------INS SimpleType@@TimeUnit @TO@ VariableDeclarationStatement@@TimeUnit tu=getUnits() != null ? getUnits() : TimeUnit.SECONDS; @AT@ 2871 @LENGTH@ 8
------INS VariableDeclarationFragment@@tu=getUnits() != null ? getUnits() : TimeUnit.SECONDS @TO@ VariableDeclarationStatement@@TimeUnit tu=getUnits() != null ? getUnits() : TimeUnit.SECONDS; @AT@ 2880 @LENGTH@ 55
---------INS SimpleName@@tu @TO@ VariableDeclarationFragment@@tu=getUnits() != null ? getUnits() : TimeUnit.SECONDS @AT@ 2880 @LENGTH@ 2
---------INS ConditionalExpression@@getUnits() != null ? getUnits() : TimeUnit.SECONDS @TO@ VariableDeclarationFragment@@tu=getUnits() != null ? getUnits() : TimeUnit.SECONDS @AT@ 2885 @LENGTH@ 50
------------INS InfixExpression@@getUnits() != null @TO@ ConditionalExpression@@getUnits() != null ? getUnits() : TimeUnit.SECONDS @AT@ 2885 @LENGTH@ 18
---------------INS MethodInvocation@@MethodName:getUnits:[] @TO@ InfixExpression@@getUnits() != null @AT@ 2885 @LENGTH@ 10
---------------INS Operator@@!= @TO@ InfixExpression@@getUnits() != null @AT@ 2895 @LENGTH@ 2
---------------INS NullLiteral@@null @TO@ InfixExpression@@getUnits() != null @AT@ 2899 @LENGTH@ 4
------------INS MethodInvocation@@MethodName:getUnits:[] @TO@ ConditionalExpression@@getUnits() != null ? getUnits() : TimeUnit.SECONDS @AT@ 2906 @LENGTH@ 10
------------INS QualifiedName@@TimeUnit.SECONDS @TO@ ConditionalExpression@@getUnits() != null ? getUnits() : TimeUnit.SECONDS @AT@ 2919 @LENGTH@ 16
---------------INS SimpleName@@TimeUnit @TO@ QualifiedName@@TimeUnit.SECONDS @AT@ 2919 @LENGTH@ 8
---------------INS SimpleName@@SECONDS @TO@ QualifiedName@@TimeUnit.SECONDS @AT@ 2928 @LENGTH@ 7


UPD TryStatement@@try {  final BatchBuilder batchBuilder=updateContext.getServiceTarget();  final PeriodicRotatingFileHandlerService service=new PeriodicRotatingFileHandlerService();  final ServiceBuilder<Handler> serviceBuilder=batchBuilder.addService(LogServices.handlerName(getName()),service);  final String relativeTo=getRelativeTo();  if (relativeTo != null) {    serviceBuilder.addDependency(AbstractPathService.pathNameOf(relativeTo),String.class,service.getRelativeToInjector());  }  service.setLevel(Level.parse(getLevelName()));  final Boolean autoFlush=getAutoflush();  if (autoFlush != null)   service.setAutoflush(autoFlush.booleanValue());  service.setEncoding(getEncoding());  service.setPath(getPath());  service.setFormatterSpec(getFormatter());  service.setSuffix(suffix);  serviceBuilder.setInitialMode(ServiceController.Mode.ACTIVE);  serviceBuilder.addListener(new UpdateResultHandler.ServiceStartListener<P>(handler,param));  serviceBuilder.install();} catch (Throwable t) {  handler.handleFailure(t,param);} @TO@ try {  final ServiceTarget target=updateContext.getServiceTarget();  final PeriodicRotatingFileHandlerService service=new PeriodicRotatingFileHandlerService();  final ServiceBuilder<Handler> serviceBuilder=target.addService(LogServices.handlerName(getName()),service);  final String relativeTo=getRelativeTo();  if (relativeTo != null) {    serviceBuilder.addDependency(AbstractPathService.pathNameOf(relativeTo),String.class,service.getRelativeToInjector());  }  service.setLevel(Level.parse(getLevelName()));  final Boolean autoFlush=getAutoflush();  if (autoFlush != null)   service.setAutoflush(autoFlush.booleanValue());  service.setEncoding(getEncoding());  service.setPath(getPath());  service.setFormatterSpec(getFormatter());  service.setSuffix(suffix);  serviceBuilder.setInitialMode(ServiceController.Mode.ACTIVE);  serviceBuilder.addListener(new UpdateResultHandler.ServiceStartListener<P>(handler,param));  serviceBuilder.install();} catch (Throwable t) {  handler.handleFailure(t,param);} @AT@ 2342 @LENGTH@ 1244
---UPD VariableDeclarationStatement@@final BatchBuilder batchBuilder=updateContext.getServiceTarget(); @TO@ final ServiceTarget target=updateContext.getServiceTarget(); @AT@ 2360 @LENGTH@ 67
------UPD SimpleType@@BatchBuilder @TO@ ServiceTarget @AT@ 2366 @LENGTH@ 12
------UPD VariableDeclarationFragment@@batchBuilder=updateContext.getServiceTarget() @TO@ target=updateContext.getServiceTarget() @AT@ 2379 @LENGTH@ 47
---------UPD SimpleName@@batchBuilder @TO@ target @AT@ 2379 @LENGTH@ 12
---UPD VariableDeclarationStatement@@final ServiceBuilder<Handler> serviceBuilder=batchBuilder.addService(LogServices.handlerName(getName()),service); @TO@ final ServiceBuilder<Handler> serviceBuilder=target.addService(LogServices.handlerName(getName()),service); @AT@ 2545 @LENGTH@ 116
------UPD VariableDeclarationFragment@@serviceBuilder=batchBuilder.addService(LogServices.handlerName(getName()),service) @TO@ serviceBuilder=target.addService(LogServices.handlerName(getName()),service) @AT@ 2575 @LENGTH@ 85
---------UPD MethodInvocation@@batchBuilder.addService(LogServices.handlerName(getName()),service) @TO@ target.addService(LogServices.handlerName(getName()),service) @AT@ 2592 @LENGTH@ 68
------------UPD SimpleName@@Name:batchBuilder @TO@ Name:target @AT@ 2592 @LENGTH@ 12


UPD ExpressionStatement@@MethodInvocation:DeploymentHandlerUtil.deploy(context,name,runtimeName,resultHandler,contents) @TO@ MethodInvocation:DeploymentHandlerUtil.deploy(context,runtimeName,name,resultHandler,contents) @AT@ 3474 @LENGTH@ 82
---UPD MethodInvocation@@DeploymentHandlerUtil.deploy(context,name,runtimeName,resultHandler,contents) @TO@ DeploymentHandlerUtil.deploy(context,runtimeName,name,resultHandler,contents) @AT@ 3474 @LENGTH@ 81
------UPD SimpleName@@MethodName:deploy:[context, name, runtimeName, resultHandler, contents] @TO@ MethodName:deploy:[context, runtimeName, name, resultHandler, contents] @AT@ 3496 @LENGTH@ 59
---------UPD SimpleName@@name @TO@ runtimeName @AT@ 3512 @LENGTH@ 4
---------UPD SimpleName@@runtimeName @TO@ name @AT@ 3518 @LENGTH@ 11


DEL ExpressionStatement@@MethodInvocation:prepareMailbox() @AT@ 1408 @LENGTH@ 17
---DEL MethodInvocation@@MethodName:prepareMailbox:[] @AT@ 1408 @LENGTH@ 16


UPD ExpressionStatement@@MethodInvocation:xaDataSources.registerReadWriteAttribute(attributeName,XaDataSourcePoolConfigurationReadHandler.INSTANCE,XaDataSourcePoolConfigurationWriteHandler.INSTANCE,Storage.RUNTIME) @TO@ MethodInvocation:xaDataSources.registerReadWriteAttribute(attributeName,XaDataSourcePoolConfigurationReadHandler.INSTANCE,XaDataSourcePoolConfigurationWriteHandler.INSTANCE,Storage.CONFIGURATION) @AT@ 14644 @LENGTH@ 196
---UPD MethodInvocation@@xaDataSources.registerReadWriteAttribute(attributeName,XaDataSourcePoolConfigurationReadHandler.INSTANCE,XaDataSourcePoolConfigurationWriteHandler.INSTANCE,Storage.RUNTIME) @TO@ xaDataSources.registerReadWriteAttribute(attributeName,XaDataSourcePoolConfigurationReadHandler.INSTANCE,XaDataSourcePoolConfigurationWriteHandler.INSTANCE,Storage.CONFIGURATION) @AT@ 14644 @LENGTH@ 195
------UPD SimpleName@@MethodName:registerReadWriteAttribute:[attributeName, XaDataSourcePoolConfigurationReadHandler.INSTANCE, XaDataSourcePoolConfigurationWriteHandler.INSTANCE, Storage.RUNTIME] @TO@ MethodName:registerReadWriteAttribute:[attributeName, XaDataSourcePoolConfigurationReadHandler.INSTANCE, XaDataSourcePoolConfigurationWriteHandler.INSTANCE, Storage.CONFIGURATION] @AT@ 14658 @LENGTH@ 181
---------UPD QualifiedName@@Storage.RUNTIME @TO@ Storage.CONFIGURATION @AT@ 14823 @LENGTH@ 15
------------UPD SimpleName@@RUNTIME @TO@ CONFIGURATION @AT@ 14831 @LENGTH@ 7


UPD VariableDeclarationStatement@@final Value<Constructor> constructorValue=cached(new LookupConstructorValue(classValue,constructorSignature)); @TO@ final Value<Constructor<?>> constructorValue=cached(new LookupConstructorValue(classValue,constructorSignature)); @AT@ 5900 @LENGTH@ 113
---UPD ParameterizedType@@Value<Constructor> @TO@ Value<Constructor<?>> @AT@ 5906 @LENGTH@ 18
------INS ParameterizedType@@Constructor<?> @TO@ ParameterizedType@@Value<Constructor> @AT@ 5912 @LENGTH@ 14
---------MOV SimpleType@@Constructor @TO@ ParameterizedType@@Constructor<?> @AT@ 5912 @LENGTH@ 11
---------INS WildcardType@@? @TO@ ParameterizedType@@Constructor<?> @AT@ 5924 @LENGTH@ 1


UPD TypeDeclaration@@[@Ignore("Work in progress"), public]HawtDBBigPayloadTest, CamelTestSupport @TO@ [public]HawtDBBigPayloadTest, CamelTestSupport @AT@ 1228 @LENGTH@ 1759
---DEL SingleMemberAnnotation@@@Ignore("Work in progress") @AT@ 1228 @LENGTH@ 27


INS FieldDeclaration@@private, static, final, long, [serialVersionUID=1172099106475265589L] @TO@ TypeDeclaration@@[public]CannotGetMongoDbConnectionException, DataAccessResourceFailureException @AT@ 832 @LENGTH@ 66
---INS Modifier@@private @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=1172099106475265589L] @AT@ 832 @LENGTH@ 7
---INS Modifier@@static @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=1172099106475265589L] @AT@ 840 @LENGTH@ 6
---INS Modifier@@final @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=1172099106475265589L] @AT@ 847 @LENGTH@ 5
---INS PrimitiveType@@long @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=1172099106475265589L] @AT@ 853 @LENGTH@ 4
---INS VariableDeclarationFragment@@serialVersionUID=1172099106475265589L @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=1172099106475265589L] @AT@ 858 @LENGTH@ 39
------INS SimpleName@@serialVersionUID @TO@ VariableDeclarationFragment@@serialVersionUID=1172099106475265589L @AT@ 858 @LENGTH@ 16
------INS NumberLiteral@@1172099106475265589L @TO@ VariableDeclarationFragment@@serialVersionUID=1172099106475265589L @AT@ 877 @LENGTH@ 20


UPD Block@@ThenBody:{  MessageHelper.resetStreamCache(exchange.getIn());  if (data.useOriginalInMessage) {    if (log.isTraceEnabled()) {      log.trace("Using the original IN message instead of current");    }    Message original=exchange.getUnitOfWork().getOriginalInMessage();    exchange.setIn(original);  }  if (log.isTraceEnabled()) {    log.trace("Failure processor " + processor + " is processing Exchange: "+ exchange);  }  exchange.setProperty(Exchange.FAILURE_ENDPOINT,exchange.getProperty(Exchange.TO_ENDPOINT));  AsyncProcessor afp=AsyncProcessorTypeConverter.convert(processor);  sync=AsyncProcessorHelper.process(afp,exchange,new AsyncCallback(){    public void done(    boolean sync){      if (log.isTraceEnabled()) {        log.trace("Failure processor done: " + processor + " processing Exchange: "+ exchange);      }      try {        prepareExchangeAfterFailure(exchange,data);        boolean deadLetterChannel=processor == data.deadLetterProcessor && data.deadLetterProcessor != null;        EventHelper.notifyExchangeFailureHandled(exchange.getContext(),exchange,processor,deadLetterChannel);      }  finally {        data.sync&=sync;        callback.done(data.sync);      }    }  });} @TO@ ThenBody:{  if (data.useOriginalInMessage) {    if (log.isTraceEnabled()) {      log.trace("Using the original IN message instead of current");    }    Message original=exchange.getUnitOfWork().getOriginalInMessage();    exchange.setIn(original);    if (exchange.hasOut()) {      if (log.isTraceEnabled()) {        log.trace("Removing the out message to avoid some uncertain behavior");      }      exchange.setOut(null);    }  }  MessageHelper.resetStreamCache(exchange.getIn());  if (log.isTraceEnabled()) {    log.trace("Failure processor " + processor + " is processing Exchange: "+ exchange);  }  exchange.setProperty(Exchange.FAILURE_ENDPOINT,exchange.getProperty(Exchange.TO_ENDPOINT));  AsyncProcessor afp=AsyncProcessorTypeConverter.convert(processor);  sync=AsyncProcessorHelper.process(afp,exchange,new AsyncCallback(){    public void done(    boolean sync){      if (log.isTraceEnabled()) {        log.trace("Failure processor done: " + processor + " processing Exchange: "+ exchange);      }      try {        prepareExchangeAfterFailure(exchange,data);        boolean deadLetterChannel=processor == data.deadLetterProcessor && data.deadLetterProcessor != null;        EventHelper.notifyExchangeFailureHandled(exchange.getContext(),exchange,processor,deadLetterChannel);      }  finally {        data.sync&=sync;        callback.done(data.sync);      }    }  });} @AT@ 25804 @LENGTH@ 2104
---MOV ExpressionStatement@@MethodInvocation:MessageHelper.resetStreamCache(exchange.getIn()) @TO@ Block@@ThenBody:{  MessageHelper.resetStreamCache(exchange.getIn());  if (data.useOriginalInMessage) {    if (log.isTraceEnabled()) {      log.trace("Using the original IN message instead of current");    }    Message original=exchange.getUnitOfWork().getOriginalInMessage();    exchange.setIn(original);  }  if (log.isTraceEnabled()) {    log.trace("Failure processor " + processor + " is processing Exchange: "+ exchange);  }  exchange.setProperty(Exchange.FAILURE_ENDPOINT,exchange.getProperty(Exchange.TO_ENDPOINT));  AsyncProcessor afp=AsyncProcessorTypeConverter.convert(processor);  sync=AsyncProcessorHelper.process(afp,exchange,new AsyncCallback(){    public void done(    boolean sync){      if (log.isTraceEnabled()) {        log.trace("Failure processor done: " + processor + " processing Exchange: "+ exchange);      }      try {        prepareExchangeAfterFailure(exchange,data);        boolean deadLetterChannel=processor == data.deadLetterProcessor && data.deadLetterProcessor != null;        EventHelper.notifyExchangeFailureHandled(exchange.getContext(),exchange,processor,deadLetterChannel);      }  finally {        data.sync&=sync;        callback.done(data.sync);      }    }  });} @AT@ 25881 @LENGTH@ 49
---UPD IfStatement@@if (data.useOriginalInMessage) {  if (log.isTraceEnabled()) {    log.trace("Using the original IN message instead of current");  }  Message original=exchange.getUnitOfWork().getOriginalInMessage();  exchange.setIn(original);} @TO@ if (data.useOriginalInMessage) {  if (log.isTraceEnabled()) {    log.trace("Using the original IN message instead of current");  }  Message original=exchange.getUnitOfWork().getOriginalInMessage();  exchange.setIn(original);  if (exchange.hasOut()) {    if (log.isTraceEnabled()) {      log.trace("Removing the out message to avoid some uncertain behavior");    }    exchange.setOut(null);  }} @AT@ 26030 @LENGTH@ 318
------UPD Block@@ThenBody:{  if (log.isTraceEnabled()) {    log.trace("Using the original IN message instead of current");  }  Message original=exchange.getUnitOfWork().getOriginalInMessage();  exchange.setIn(original);} @TO@ ThenBody:{  if (log.isTraceEnabled()) {    log.trace("Using the original IN message instead of current");  }  Message original=exchange.getUnitOfWork().getOriginalInMessage();  exchange.setIn(original);  if (exchange.hasOut()) {    if (log.isTraceEnabled()) {      log.trace("Removing the out message to avoid some uncertain behavior");    }    exchange.setOut(null);  }} @AT@ 26061 @LENGTH@ 287
---------INS IfStatement@@if (exchange.hasOut()) {  if (log.isTraceEnabled()) {    log.trace("Removing the out message to avoid some uncertain behavior");  }  exchange.setOut(null);} @TO@ Block@@ThenBody:{  if (log.isTraceEnabled()) {    log.trace("Using the original IN message instead of current");  }  Message original=exchange.getUnitOfWork().getOriginalInMessage();  exchange.setIn(original);} @AT@ 26225 @LENGTH@ 251
------------INS MethodInvocation@@exchange.hasOut() @TO@ IfStatement@@if (exchange.hasOut()) {  if (log.isTraceEnabled()) {    log.trace("Removing the out message to avoid some uncertain behavior");  }  exchange.setOut(null);} @AT@ 26229 @LENGTH@ 17
---------------INS SimpleName@@Name:exchange @TO@ MethodInvocation@@exchange.hasOut() @AT@ 26229 @LENGTH@ 8
---------------INS SimpleName@@MethodName:hasOut:[] @TO@ MethodInvocation@@exchange.hasOut() @AT@ 26238 @LENGTH@ 8
------------INS Block@@ThenBody:{  if (log.isTraceEnabled()) {    log.trace("Removing the out message to avoid some uncertain behavior");  }  exchange.setOut(null);} @TO@ IfStatement@@if (exchange.hasOut()) {  if (log.isTraceEnabled()) {    log.trace("Removing the out message to avoid some uncertain behavior");  }  exchange.setOut(null);} @AT@ 26248 @LENGTH@ 228
---------------INS IfStatement@@if (log.isTraceEnabled()) {  log.trace("Removing the out message to avoid some uncertain behavior");} @TO@ Block@@ThenBody:{  if (log.isTraceEnabled()) {    log.trace("Removing the out message to avoid some uncertain behavior");  }  exchange.setOut(null);} @AT@ 26270 @LENGTH@ 145
------------------INS MethodInvocation@@log.isTraceEnabled() @TO@ IfStatement@@if (log.isTraceEnabled()) {  log.trace("Removing the out message to avoid some uncertain behavior");} @AT@ 26274 @LENGTH@ 20
---------------------INS SimpleName@@Name:log @TO@ MethodInvocation@@log.isTraceEnabled() @AT@ 26274 @LENGTH@ 3
---------------------INS SimpleName@@MethodName:isTraceEnabled:[] @TO@ MethodInvocation@@log.isTraceEnabled() @AT@ 26278 @LENGTH@ 16
------------------INS Block@@ThenBody:{  log.trace("Removing the out message to avoid some uncertain behavior");} @TO@ IfStatement@@if (log.isTraceEnabled()) {  log.trace("Removing the out message to avoid some uncertain behavior");} @AT@ 26296 @LENGTH@ 119
---------------------INS ExpressionStatement@@MethodInvocation:log.trace("Removing the out message to avoid some uncertain behavior") @TO@ Block@@ThenBody:{  log.trace("Removing the out message to avoid some uncertain behavior");} @AT@ 26322 @LENGTH@ 71
------------------------INS MethodInvocation@@log.trace("Removing the out message to avoid some uncertain behavior") @TO@ ExpressionStatement@@MethodInvocation:log.trace("Removing the out message to avoid some uncertain behavior") @AT@ 26322 @LENGTH@ 70
---------------------------INS SimpleName@@Name:log @TO@ MethodInvocation@@log.trace("Removing the out message to avoid some uncertain behavior") @AT@ 26322 @LENGTH@ 3
---------------------------INS SimpleName@@MethodName:trace:["Removing the out message to avoid some uncertain behavior"] @TO@ MethodInvocation@@log.trace("Removing the out message to avoid some uncertain behavior") @AT@ 26326 @LENGTH@ 66
------------------------------INS StringLiteral@@"Removing the out message to avoid some uncertain behavior" @TO@ SimpleName@@MethodName:trace:["Removing the out message to avoid some uncertain behavior"] @AT@ 26332 @LENGTH@ 59
---------------INS ExpressionStatement@@MethodInvocation:exchange.setOut(null) @TO@ Block@@ThenBody:{  if (log.isTraceEnabled()) {    log.trace("Removing the out message to avoid some uncertain behavior");  }  exchange.setOut(null);} @AT@ 26436 @LENGTH@ 22
------------------INS MethodInvocation@@exchange.setOut(null) @TO@ ExpressionStatement@@MethodInvocation:exchange.setOut(null) @AT@ 26436 @LENGTH@ 21
---------------------INS SimpleName@@Name:exchange @TO@ MethodInvocation@@exchange.setOut(null) @AT@ 26436 @LENGTH@ 8
---------------------INS SimpleName@@MethodName:setOut:[null] @TO@ MethodInvocation@@exchange.setOut(null) @AT@ 26445 @LENGTH@ 12
------------------------INS NullLiteral@@null @TO@ SimpleName@@MethodName:setOut:[null] @AT@ 26452 @LENGTH@ 4


UPD MethodDeclaration@@protected, void, MethodName:doHandle, CommandContext ctx,  @TO@ protected, void, MethodName:doHandle, CommandContext ctx, CommandFormatException,  @AT@ 1946 @LENGTH@ 583
---INS SimpleType@@CommandFormatException @TO@ MethodDeclaration@@protected, void, MethodName:doHandle, CommandContext ctx,  @AT@ 2045 @LENGTH@ 22


UPD ExpressionStatement@@MethodInvocation:assertEquals(6,set.size()) @TO@ MethodInvocation:assertEquals(5,set.size()) @AT@ 1884 @LENGTH@ 28
---UPD MethodInvocation@@assertEquals(6,set.size()) @TO@ assertEquals(5,set.size()) @AT@ 1884 @LENGTH@ 27
------UPD SimpleName@@MethodName:assertEquals:[6, set.size()] @TO@ MethodName:assertEquals:[5, set.size()] @AT@ 1884 @LENGTH@ 27
---------UPD NumberLiteral@@6 @TO@ 5 @AT@ 1897 @LENGTH@ 1


UPD IfStatement@@if (topLevelResourceRoots != null) {  for (  ResourceRoot resourceRoot : topLevelResourceRoots) {    if (ModuleRootMarker.isModuleRoot(resourceRoot) && !SubDeploymentMarker.isSubDeployment(resourceRoot)) {      earLibJars.add(resourceRoot.getRoot());    }  }} @TO@ if (deploymentUnit.getParent() != null && topLevelResourceRoots != null) {  for (  ResourceRoot resourceRoot : topLevelResourceRoots) {    if (ModuleRootMarker.isModuleRoot(resourceRoot) && !SubDeploymentMarker.isSubDeployment(resourceRoot)) {      earLibJars.add(resourceRoot.getRoot());    }  }} @AT@ 4909 @LENGTH@ 329
---INS InfixExpression@@deploymentUnit.getParent() != null && topLevelResourceRoots != null @TO@ IfStatement@@if (topLevelResourceRoots != null) {  for (  ResourceRoot resourceRoot : topLevelResourceRoots) {    if (ModuleRootMarker.isModuleRoot(resourceRoot) && !SubDeploymentMarker.isSubDeployment(resourceRoot)) {      earLibJars.add(resourceRoot.getRoot());    }  }} @AT@ 4913 @LENGTH@ 67
------INS InfixExpression@@deploymentUnit.getParent() != null @TO@ InfixExpression@@deploymentUnit.getParent() != null && topLevelResourceRoots != null @AT@ 4913 @LENGTH@ 34
---------INS MethodInvocation@@deploymentUnit.getParent() @TO@ InfixExpression@@deploymentUnit.getParent() != null @AT@ 4913 @LENGTH@ 26
------------INS SimpleName@@Name:deploymentUnit @TO@ MethodInvocation@@deploymentUnit.getParent() @AT@ 4913 @LENGTH@ 14
------------INS SimpleName@@MethodName:getParent:[] @TO@ MethodInvocation@@deploymentUnit.getParent() @AT@ 4928 @LENGTH@ 11
---------INS Operator@@!= @TO@ InfixExpression@@deploymentUnit.getParent() != null @AT@ 4939 @LENGTH@ 2
---------INS NullLiteral@@null @TO@ InfixExpression@@deploymentUnit.getParent() != null @AT@ 4943 @LENGTH@ 4
------INS Operator@@&& @TO@ InfixExpression@@deploymentUnit.getParent() != null && topLevelResourceRoots != null @AT@ 4947 @LENGTH@ 2
------INS InfixExpression@@topLevelResourceRoots != null @TO@ InfixExpression@@deploymentUnit.getParent() != null && topLevelResourceRoots != null @AT@ 4951 @LENGTH@ 29
---------MOV SimpleName@@topLevelResourceRoots @TO@ InfixExpression@@topLevelResourceRoots != null @AT@ 4913 @LENGTH@ 21
---------MOV Operator@@!= @TO@ InfixExpression@@topLevelResourceRoots != null @AT@ 4934 @LENGTH@ 2
---------MOV NullLiteral@@null @TO@ InfixExpression@@topLevelResourceRoots != null @AT@ 4938 @LENGTH@ 4
---DEL InfixExpression@@topLevelResourceRoots != null @AT@ 4913 @LENGTH@ 29


UPD Block@@ThenBody:{  locations.add(param);  ModelNode compensating=SchemaLocationRemoveHandler.getRemoveSchemaLocationOperation(operation.get(OP_ADDR),param.asProperty().getName());  resultHandler.handleResultComplete(compensating);} @TO@ ThenBody:{  Property loc=param.asProperty();  locations.add(loc.getName(),loc.getValue());  ModelNode compensating=SchemaLocationRemoveHandler.getRemoveSchemaLocationOperation(operation.get(OP_ADDR),param.asProperty().getName());  resultHandler.handleResultComplete(compensating);} @AT@ 3250 @LENGTH@ 276
---UPD ExpressionStatement@@MethodInvocation:locations.add(param) @TO@ MethodInvocation:locations.add(loc.getName(),loc.getValue()) @AT@ 3268 @LENGTH@ 21
------UPD MethodInvocation@@locations.add(param) @TO@ locations.add(loc.getName(),loc.getValue()) @AT@ 3268 @LENGTH@ 20
---------UPD SimpleName@@MethodName:add:[param] @TO@ MethodName:add:[loc.getName(), loc.getValue()] @AT@ 3278 @LENGTH@ 10
------------DEL SimpleName@@param @AT@ 3282 @LENGTH@ 5
------------INS MethodInvocation@@loc.getName() @TO@ SimpleName@@MethodName:add:[param] @AT@ 3363 @LENGTH@ 13
---------------INS SimpleName@@Name:loc @TO@ MethodInvocation@@loc.getName() @AT@ 3363 @LENGTH@ 3
---------------INS SimpleName@@MethodName:getName:[] @TO@ MethodInvocation@@loc.getName() @AT@ 3367 @LENGTH@ 9
------------INS MethodInvocation@@loc.getValue() @TO@ SimpleName@@MethodName:add:[param] @AT@ 3378 @LENGTH@ 14
---------------INS SimpleName@@Name:loc @TO@ MethodInvocation@@loc.getValue() @AT@ 3378 @LENGTH@ 3
---------------INS SimpleName@@MethodName:getValue:[] @TO@ MethodInvocation@@loc.getValue() @AT@ 3382 @LENGTH@ 10
---INS VariableDeclarationStatement@@Property loc=param.asProperty(); @TO@ Block@@ThenBody:{  locations.add(param);  ModelNode compensating=SchemaLocationRemoveHandler.getRemoveSchemaLocationOperation(operation.get(OP_ADDR),param.asProperty().getName());  resultHandler.handleResultComplete(compensating);} @AT@ 3298 @LENGTH@ 34
------INS SimpleType@@Property @TO@ VariableDeclarationStatement@@Property loc=param.asProperty(); @AT@ 3298 @LENGTH@ 8
------INS VariableDeclarationFragment@@loc=param.asProperty() @TO@ VariableDeclarationStatement@@Property loc=param.asProperty(); @AT@ 3307 @LENGTH@ 24
---------INS SimpleName@@loc @TO@ VariableDeclarationFragment@@loc=param.asProperty() @AT@ 3307 @LENGTH@ 3
---------INS MethodInvocation@@param.asProperty() @TO@ VariableDeclarationFragment@@loc=param.asProperty() @AT@ 3313 @LENGTH@ 18
------------INS SimpleName@@Name:param @TO@ MethodInvocation@@param.asProperty() @AT@ 3313 @LENGTH@ 5
------------INS SimpleName@@MethodName:asProperty:[] @TO@ MethodInvocation@@param.asProperty() @AT@ 3319 @LENGTH@ 12


INS MethodDeclaration@@protected, String, MethodName:getFromEndpointUri,  @TO@ TypeDeclaration@@[public]CxfConsumerProviderTest, CamelTestSupport @AT@ 3858 @LENGTH@ 81
---INS Modifier@@protected @TO@ MethodDeclaration@@protected, String, MethodName:getFromEndpointUri,  @AT@ 3858 @LENGTH@ 9
---INS SimpleType@@String @TO@ MethodDeclaration@@protected, String, MethodName:getFromEndpointUri,  @AT@ 3868 @LENGTH@ 6
---INS SimpleName@@MethodName:getFromEndpointUri @TO@ MethodDeclaration@@protected, String, MethodName:getFromEndpointUri,  @AT@ 3875 @LENGTH@ 18
---INS ReturnStatement@@SimpleName:SIMPLE_ENDPOINT_URI @TO@ MethodDeclaration@@protected, String, MethodName:getFromEndpointUri,  @AT@ 3906 @LENGTH@ 27
------INS SimpleName@@SIMPLE_ENDPOINT_URI @TO@ ReturnStatement@@SimpleName:SIMPLE_ENDPOINT_URI @AT@ 3913 @LENGTH@ 19


UPD EnhancedForStatement@@for (String dir : dirs) {  sb.append(dir).append('/');  String directory=sb.toString();  if (LOG.isTraceEnabled()) {    LOG.trace("Trying to build remote directory by chunk: " + directory);  }  if (!directory.equals("/")) {    try {      channel.mkdir(directory);      success=true;    } catch (    SftpException e) {    }  }} @TO@ for (String dir : dirs) {  sb.append(dir).append('/');  String directory=endpoint.getConfiguration().normalizePath(sb.toString());  if (!(directory.equals("/") || directory.equals("\\"))) {    try {      if (LOG.isTraceEnabled()) {        LOG.trace("Trying to build remote directory by chunk: " + directory);      }      channel.mkdir(directory);      success=true;    } catch (    SftpException e) {    }  }} @AT@ 12560 @LENGTH@ 606
---UPD VariableDeclarationStatement@@String directory=sb.toString(); @TO@ String directory=endpoint.getConfiguration().normalizePath(sb.toString()); @AT@ 12638 @LENGTH@ 33
------UPD VariableDeclarationFragment@@directory=sb.toString() @TO@ directory=endpoint.getConfiguration().normalizePath(sb.toString()) @AT@ 12645 @LENGTH@ 25
---------DEL MethodInvocation@@sb.toString() @AT@ 12657 @LENGTH@ 13
---------INS MethodInvocation@@endpoint.getConfiguration().normalizePath(sb.toString()) @TO@ VariableDeclarationFragment@@directory=sb.toString() @AT@ 12823 @LENGTH@ 56
------------INS MethodInvocation@@MethodName:getConfiguration:[] @TO@ MethodInvocation@@endpoint.getConfiguration().normalizePath(sb.toString()) @AT@ 12823 @LENGTH@ 27
------------INS SimpleName@@Name:endpoint @TO@ MethodInvocation@@endpoint.getConfiguration().normalizePath(sb.toString()) @AT@ 12823 @LENGTH@ 8
------------INS SimpleName@@MethodName:normalizePath:[sb.toString()] @TO@ MethodInvocation@@endpoint.getConfiguration().normalizePath(sb.toString()) @AT@ 12851 @LENGTH@ 28
---------------INS MethodInvocation@@sb.toString() @TO@ SimpleName@@MethodName:normalizePath:[sb.toString()] @AT@ 12865 @LENGTH@ 13
------------------MOV SimpleName@@Name:sb @TO@ MethodInvocation@@sb.toString() @AT@ 12657 @LENGTH@ 2
------------------MOV SimpleName@@MethodName:toString:[] @TO@ MethodInvocation@@sb.toString() @AT@ 12660 @LENGTH@ 10
---UPD IfStatement@@if (!directory.equals("/")) {  try {    channel.mkdir(directory);    success=true;  } catch (  SftpException e) {  }} @TO@ if (!(directory.equals("/") || directory.equals("\\"))) {  try {    if (LOG.isTraceEnabled()) {      LOG.trace("Trying to build remote directory by chunk: " + directory);    }    channel.mkdir(directory);    success=true;  } catch (  SftpException e) {  }} @AT@ 12874 @LENGTH@ 282
------UPD PrefixExpression@@!directory.equals("/") @TO@ !(directory.equals("/") || directory.equals("\\")) @AT@ 12878 @LENGTH@ 22
---------INS ParenthesizedExpression@@(directory.equals("/") || directory.equals("\\")) @TO@ PrefixExpression@@!directory.equals("/") @AT@ 12955 @LENGTH@ 49
------------INS InfixExpression@@directory.equals("/") || directory.equals("\\") @TO@ ParenthesizedExpression@@(directory.equals("/") || directory.equals("\\")) @AT@ 12956 @LENGTH@ 47
---------------MOV MethodInvocation@@directory.equals("/") @TO@ InfixExpression@@directory.equals("/") || directory.equals("\\") @AT@ 12879 @LENGTH@ 21
---------------INS Operator@@|| @TO@ InfixExpression@@directory.equals("/") || directory.equals("\\") @AT@ 12977 @LENGTH@ 2
---------------INS MethodInvocation@@directory.equals("\\") @TO@ InfixExpression@@directory.equals("/") || directory.equals("\\") @AT@ 12981 @LENGTH@ 22
------------------INS SimpleName@@Name:directory @TO@ MethodInvocation@@directory.equals("\\") @AT@ 12981 @LENGTH@ 9
------------------INS SimpleName@@MethodName:equals:["\\"] @TO@ MethodInvocation@@directory.equals("\\") @AT@ 12991 @LENGTH@ 12
---------------------INS StringLiteral@@"\\" @TO@ SimpleName@@MethodName:equals:["\\"] @AT@ 12998 @LENGTH@ 4
------UPD Block@@ThenBody:{  try {    channel.mkdir(directory);    success=true;  } catch (  SftpException e) {  }} @TO@ ThenBody:{  try {    if (LOG.isTraceEnabled()) {      LOG.trace("Trying to build remote directory by chunk: " + directory);    }    channel.mkdir(directory);    success=true;  } catch (  SftpException e) {  }} @AT@ 12902 @LENGTH@ 254
---------UPD TryStatement@@try {  channel.mkdir(directory);  success=true;} catch (SftpException e) {} @TO@ try {  if (LOG.isTraceEnabled()) {    LOG.trace("Trying to build remote directory by chunk: " + directory);  }  channel.mkdir(directory);  success=true;} catch (SftpException e) {} @AT@ 12920 @LENGTH@ 222
------------MOV IfStatement@@if (LOG.isTraceEnabled()) {  LOG.trace("Trying to build remote directory by chunk: " + directory);} @TO@ TryStatement@@try {  channel.mkdir(directory);  success=true;} catch (SftpException e) {} @AT@ 12684 @LENGTH@ 127


INS VariableDeclarationStatement@@String name=String.valueOf(profileMap.get("name")); @TO@ MethodDeclaration@@public, FacebookProfile, MethodName:getUserProfile, String facebookId,  @AT@ 2901 @LENGTH@ 53
---INS SimpleType@@String @TO@ VariableDeclarationStatement@@String name=String.valueOf(profileMap.get("name")); @AT@ 2901 @LENGTH@ 6
---INS VariableDeclarationFragment@@name=String.valueOf(profileMap.get("name")) @TO@ VariableDeclarationStatement@@String name=String.valueOf(profileMap.get("name")); @AT@ 2908 @LENGTH@ 45
------INS SimpleName@@name @TO@ VariableDeclarationFragment@@name=String.valueOf(profileMap.get("name")) @AT@ 2908 @LENGTH@ 4
------INS MethodInvocation@@String.valueOf(profileMap.get("name")) @TO@ VariableDeclarationFragment@@name=String.valueOf(profileMap.get("name")) @AT@ 2915 @LENGTH@ 38
---------INS SimpleName@@Name:String @TO@ MethodInvocation@@String.valueOf(profileMap.get("name")) @AT@ 2915 @LENGTH@ 6
---------INS SimpleName@@MethodName:valueOf:[profileMap.get("name")] @TO@ MethodInvocation@@String.valueOf(profileMap.get("name")) @AT@ 2922 @LENGTH@ 31
------------INS MethodInvocation@@profileMap.get("name") @TO@ SimpleName@@MethodName:valueOf:[profileMap.get("name")] @AT@ 2930 @LENGTH@ 22
---------------INS SimpleName@@Name:profileMap @TO@ MethodInvocation@@profileMap.get("name") @AT@ 2930 @LENGTH@ 10
---------------INS SimpleName@@MethodName:get:["name"] @TO@ MethodInvocation@@profileMap.get("name") @AT@ 2941 @LENGTH@ 11
------------------INS StringLiteral@@"name" @TO@ SimpleName@@MethodName:get:["name"] @AT@ 2945 @LENGTH@ 6


UPD Block@@ThenBody:{  buffer.append("ID:" + messageProperties.getMessageId() + ";");  buffer.append("Content:" + messageProperties.getContentType() + ";");  buffer.append("Headers:" + messageProperties.getHeaders() + ";");  buffer.append("Exchange:" + messageProperties.getReceivedExchange() + ";");  buffer.append("Routing key:" + messageProperties.getReceivedRoutingKey() + ";");  buffer.append("Reply:" + messageProperties.getReplyTo() + ";");  buffer.append("Delivery mode:" + messageProperties.getDeliveryMode() + ";");} @TO@ ThenBody:{  buffer.append("; ID:" + messageProperties.getMessageId());  buffer.append("; Content:" + messageProperties.getContentType());  buffer.append("; Headers:" + messageProperties.getHeaders());  buffer.append("; Exchange:" + messageProperties.getReceivedExchange());  buffer.append("; RoutingKey:" + messageProperties.getReceivedRoutingKey());  buffer.append("; Reply:" + messageProperties.getReplyTo());  buffer.append("; DeliveryMode:" + messageProperties.getDeliveryMode());  buffer.append("; DeliveryTag:" + messageProperties.getDeliveryTag());} @AT@ 1917 @LENGTH@ 524
---UPD ExpressionStatement@@MethodInvocation:buffer.append("ID:" + messageProperties.getMessageId() + ";") @TO@ MethodInvocation:buffer.append("; ID:" + messageProperties.getMessageId()) @AT@ 1922 @LENGTH@ 62
------UPD MethodInvocation@@buffer.append("ID:" + messageProperties.getMessageId() + ";") @TO@ buffer.append("; ID:" + messageProperties.getMessageId()) @AT@ 1922 @LENGTH@ 61
---------UPD SimpleName@@MethodName:append:["ID:" + messageProperties.getMessageId() + ";"] @TO@ MethodName:append:["; ID:" + messageProperties.getMessageId()] @AT@ 1929 @LENGTH@ 54
------------UPD InfixExpression@@"ID:" + messageProperties.getMessageId() + ";" @TO@ "; ID:" + messageProperties.getMessageId() @AT@ 1936 @LENGTH@ 46
---------------UPD StringLiteral@@"ID:" @TO@ "; ID:" @AT@ 1936 @LENGTH@ 5
---------------DEL StringLiteral@@";" @AT@ 1979 @LENGTH@ 3
---UPD ExpressionStatement@@MethodInvocation:buffer.append("Content:" + messageProperties.getContentType() + ";") @TO@ MethodInvocation:buffer.append("; Content:" + messageProperties.getContentType()) @AT@ 1989 @LENGTH@ 69
------UPD MethodInvocation@@buffer.append("Content:" + messageProperties.getContentType() + ";") @TO@ buffer.append("; Content:" + messageProperties.getContentType()) @AT@ 1989 @LENGTH@ 68
---------UPD SimpleName@@MethodName:append:["Content:" + messageProperties.getContentType() + ";"] @TO@ MethodName:append:["; Content:" + messageProperties.getContentType()] @AT@ 1996 @LENGTH@ 61
------------UPD InfixExpression@@"Content:" + messageProperties.getContentType() + ";" @TO@ "; Content:" + messageProperties.getContentType() @AT@ 2003 @LENGTH@ 53
---------------UPD StringLiteral@@"Content:" @TO@ "; Content:" @AT@ 2003 @LENGTH@ 10
---------------DEL StringLiteral@@";" @AT@ 2053 @LENGTH@ 3
---UPD ExpressionStatement@@MethodInvocation:buffer.append("Headers:" + messageProperties.getHeaders() + ";") @TO@ MethodInvocation:buffer.append("; Headers:" + messageProperties.getHeaders()) @AT@ 2062 @LENGTH@ 65
------UPD MethodInvocation@@buffer.append("Headers:" + messageProperties.getHeaders() + ";") @TO@ buffer.append("; Headers:" + messageProperties.getHeaders()) @AT@ 2062 @LENGTH@ 64
---------UPD SimpleName@@MethodName:append:["Headers:" + messageProperties.getHeaders() + ";"] @TO@ MethodName:append:["; Headers:" + messageProperties.getHeaders()] @AT@ 2069 @LENGTH@ 57
------------UPD InfixExpression@@"Headers:" + messageProperties.getHeaders() + ";" @TO@ "; Headers:" + messageProperties.getHeaders() @AT@ 2076 @LENGTH@ 49
---------------UPD StringLiteral@@"Headers:" @TO@ "; Headers:" @AT@ 2076 @LENGTH@ 10
---------------DEL StringLiteral@@";" @AT@ 2122 @LENGTH@ 3
---UPD ExpressionStatement@@MethodInvocation:buffer.append("Exchange:" + messageProperties.getReceivedExchange() + ";") @TO@ MethodInvocation:buffer.append("; Exchange:" + messageProperties.getReceivedExchange()) @AT@ 2131 @LENGTH@ 75
------UPD MethodInvocation@@buffer.append("Exchange:" + messageProperties.getReceivedExchange() + ";") @TO@ buffer.append("; Exchange:" + messageProperties.getReceivedExchange()) @AT@ 2131 @LENGTH@ 74
---------UPD SimpleName@@MethodName:append:["Exchange:" + messageProperties.getReceivedExchange() + ";"] @TO@ MethodName:append:["; Exchange:" + messageProperties.getReceivedExchange()] @AT@ 2138 @LENGTH@ 67
------------UPD InfixExpression@@"Exchange:" + messageProperties.getReceivedExchange() + ";" @TO@ "; Exchange:" + messageProperties.getReceivedExchange() @AT@ 2145 @LENGTH@ 59
---------------UPD StringLiteral@@"Exchange:" @TO@ "; Exchange:" @AT@ 2145 @LENGTH@ 11
---------------DEL StringLiteral@@";" @AT@ 2201 @LENGTH@ 3
---UPD ExpressionStatement@@MethodInvocation:buffer.append("Routing key:" + messageProperties.getReceivedRoutingKey() + ";") @TO@ MethodInvocation:buffer.append("; RoutingKey:" + messageProperties.getReceivedRoutingKey()) @AT@ 2210 @LENGTH@ 80
------UPD MethodInvocation@@buffer.append("Routing key:" + messageProperties.getReceivedRoutingKey() + ";") @TO@ buffer.append("; RoutingKey:" + messageProperties.getReceivedRoutingKey()) @AT@ 2210 @LENGTH@ 79
---------UPD SimpleName@@MethodName:append:["Routing key:" + messageProperties.getReceivedRoutingKey() + ";"] @TO@ MethodName:append:["; RoutingKey:" + messageProperties.getReceivedRoutingKey()] @AT@ 2217 @LENGTH@ 72
------------UPD InfixExpression@@"Routing key:" + messageProperties.getReceivedRoutingKey() + ";" @TO@ "; RoutingKey:" + messageProperties.getReceivedRoutingKey() @AT@ 2224 @LENGTH@ 64
---------------UPD StringLiteral@@"Routing key:" @TO@ "; RoutingKey:" @AT@ 2224 @LENGTH@ 14
---------------DEL StringLiteral@@";" @AT@ 2285 @LENGTH@ 3
---UPD ExpressionStatement@@MethodInvocation:buffer.append("Reply:" + messageProperties.getReplyTo() + ";") @TO@ MethodInvocation:buffer.append("; Reply:" + messageProperties.getReplyTo()) @AT@ 2294 @LENGTH@ 63
------UPD MethodInvocation@@buffer.append("Reply:" + messageProperties.getReplyTo() + ";") @TO@ buffer.append("; Reply:" + messageProperties.getReplyTo()) @AT@ 2294 @LENGTH@ 62
---------UPD SimpleName@@MethodName:append:["Reply:" + messageProperties.getReplyTo() + ";"] @TO@ MethodName:append:["; Reply:" + messageProperties.getReplyTo()] @AT@ 2301 @LENGTH@ 55
------------UPD InfixExpression@@"Reply:" + messageProperties.getReplyTo() + ";" @TO@ "; Reply:" + messageProperties.getReplyTo() @AT@ 2308 @LENGTH@ 47
---------------UPD StringLiteral@@"Reply:" @TO@ "; Reply:" @AT@ 2308 @LENGTH@ 8
---------------DEL StringLiteral@@";" @AT@ 2352 @LENGTH@ 3
---UPD ExpressionStatement@@MethodInvocation:buffer.append("Delivery mode:" + messageProperties.getDeliveryMode() + ";") @TO@ MethodInvocation:buffer.append("; DeliveryMode:" + messageProperties.getDeliveryMode()) @AT@ 2361 @LENGTH@ 76
------UPD MethodInvocation@@buffer.append("Delivery mode:" + messageProperties.getDeliveryMode() + ";") @TO@ buffer.append("; DeliveryMode:" + messageProperties.getDeliveryMode()) @AT@ 2361 @LENGTH@ 75
---------UPD SimpleName@@MethodName:append:["Delivery mode:" + messageProperties.getDeliveryMode() + ";"] @TO@ MethodName:append:["; DeliveryMode:" + messageProperties.getDeliveryMode()] @AT@ 2368 @LENGTH@ 68
------------UPD InfixExpression@@"Delivery mode:" + messageProperties.getDeliveryMode() + ";" @TO@ "; DeliveryMode:" + messageProperties.getDeliveryMode() @AT@ 2375 @LENGTH@ 60
---------------UPD StringLiteral@@"Delivery mode:" @TO@ "; DeliveryMode:" @AT@ 2375 @LENGTH@ 16
---------------DEL StringLiteral@@";" @AT@ 2432 @LENGTH@ 3
---INS ExpressionStatement@@MethodInvocation:buffer.append("; DeliveryTag:" + messageProperties.getDeliveryTag()) @TO@ Block@@ThenBody:{  buffer.append("ID:" + messageProperties.getMessageId() + ";");  buffer.append("Content:" + messageProperties.getContentType() + ";");  buffer.append("Headers:" + messageProperties.getHeaders() + ";");  buffer.append("Exchange:" + messageProperties.getReceivedExchange() + ";");  buffer.append("Routing key:" + messageProperties.getReceivedRoutingKey() + ";");  buffer.append("Reply:" + messageProperties.getReplyTo() + ";");  buffer.append("Delivery mode:" + messageProperties.getDeliveryMode() + ";");} @AT@ 2429 @LENGTH@ 69
------INS MethodInvocation@@buffer.append("; DeliveryTag:" + messageProperties.getDeliveryTag()) @TO@ ExpressionStatement@@MethodInvocation:buffer.append("; DeliveryTag:" + messageProperties.getDeliveryTag()) @AT@ 2429 @LENGTH@ 68
---------INS SimpleName@@Name:buffer @TO@ MethodInvocation@@buffer.append("; DeliveryTag:" + messageProperties.getDeliveryTag()) @AT@ 2429 @LENGTH@ 6
---------INS SimpleName@@MethodName:append:["; DeliveryTag:" + messageProperties.getDeliveryTag()] @TO@ MethodInvocation@@buffer.append("; DeliveryTag:" + messageProperties.getDeliveryTag()) @AT@ 2436 @LENGTH@ 61
------------INS InfixExpression@@"; DeliveryTag:" + messageProperties.getDeliveryTag() @TO@ SimpleName@@MethodName:append:["; DeliveryTag:" + messageProperties.getDeliveryTag()] @AT@ 2443 @LENGTH@ 53
---------------INS StringLiteral@@"; DeliveryTag:" @TO@ InfixExpression@@"; DeliveryTag:" + messageProperties.getDeliveryTag() @AT@ 2443 @LENGTH@ 16
---------------INS Operator@@+ @TO@ InfixExpression@@"; DeliveryTag:" + messageProperties.getDeliveryTag() @AT@ 2459 @LENGTH@ 1
---------------INS MethodInvocation@@messageProperties.getDeliveryTag() @TO@ InfixExpression@@"; DeliveryTag:" + messageProperties.getDeliveryTag() @AT@ 2462 @LENGTH@ 34
------------------INS SimpleName@@Name:messageProperties @TO@ MethodInvocation@@messageProperties.getDeliveryTag() @AT@ 2462 @LENGTH@ 17
------------------INS SimpleName@@MethodName:getDeliveryTag:[] @TO@ MethodInvocation@@messageProperties.getDeliveryTag() @AT@ 2480 @LENGTH@ 16


UPD FieldDeclaration@@static, final, String[], [XA_DATASOURCE_ATTRIBUTE=new String[]{XADATASOURCECLASS,JNDINAME,MODULE,NEW_CONNECTION_SQL,POOLNAME,URL_DELIMITER,URL_SELECTOR_STRATEGY_CLASS_NAME,USE_JAVA_CONTEXT,ENABLED,MAX_POOL_SIZE,MIN_POOL_SIZE,POOL_PREFILL,POOL_USE_STRICT_MIN,INTERLIVING,NOTXSEPARATEPOOL,PAD_XID,SAME_RM_OVERRIDE,WRAP_XA_DATASOURCE,USERNAME,PASSWORD,PREPAREDSTATEMENTSCACHESIZE,SHAREPREPAREDSTATEMENTS,TRACKSTATEMENTS,ALLOCATION_RETRY,ALLOCATION_RETRY_WAIT_MILLIS,BLOCKING_TIMEOUT_WAIT_MILLIS,IDLETIMEOUTMINUTES,QUERYTIMEOUT,USETRYLOCK,SETTXQUERTTIMEOUT,TRANSACTION_ISOLOATION,CHECKVALIDCONNECTIONSQL,EXCEPTIONSORTERCLASSNAME,STALECONNECTIONCHECKERCLASSNAME,VALIDCONNECTIONCHECKERCLASSNAME,BACKGROUNDVALIDATIONMINUTES,BACKGROUNDVALIDATION,USE_FAST_FAIL,VALIDATEONMATCH,XA_RESOURCE_TIMEOUT}] @TO@ static, final, String[], [XA_DATASOURCE_ATTRIBUTE=new String[]{XADATASOURCECLASS,JNDINAME,MODULE,NEW_CONNECTION_SQL,POOLNAME,URL_DELIMITER,URL_SELECTOR_STRATEGY_CLASS_NAME,USE_JAVA_CONTEXT,ENABLED,MAX_POOL_SIZE,MIN_POOL_SIZE,POOL_PREFILL,POOL_USE_STRICT_MIN,INTERLIVING,NOTXSEPARATEPOOL,PAD_XID,SAME_RM_OVERRIDE,WRAP_XA_DATASOURCE,USERNAME,PASSWORD,PREPAREDSTATEMENTSCACHESIZE,SHAREPREPAREDSTATEMENTS,TRACKSTATEMENTS,ALLOCATION_RETRY,ALLOCATION_RETRY_WAIT_MILLIS,BLOCKING_TIMEOUT_WAIT_MILLIS,IDLETIMEOUTMINUTES,QUERYTIMEOUT,USETRYLOCK,SETTXQUERYTIMEOUT,TRANSACTION_ISOLOATION,CHECKVALIDCONNECTIONSQL,EXCEPTIONSORTERCLASSNAME,STALECONNECTIONCHECKERCLASSNAME,VALIDCONNECTIONCHECKERCLASSNAME,BACKGROUNDVALIDATIONMINUTES,BACKGROUNDVALIDATION,USE_FAST_FAIL,VALIDATEONMATCH,XA_RESOURCE_TIMEOUT}] @AT@ 2272 @LENGTH@ 913
---UPD VariableDeclarationFragment@@XA_DATASOURCE_ATTRIBUTE=new String[]{XADATASOURCECLASS,JNDINAME,MODULE,NEW_CONNECTION_SQL,POOLNAME,URL_DELIMITER,URL_SELECTOR_STRATEGY_CLASS_NAME,USE_JAVA_CONTEXT,ENABLED,MAX_POOL_SIZE,MIN_POOL_SIZE,POOL_PREFILL,POOL_USE_STRICT_MIN,INTERLIVING,NOTXSEPARATEPOOL,PAD_XID,SAME_RM_OVERRIDE,WRAP_XA_DATASOURCE,USERNAME,PASSWORD,PREPAREDSTATEMENTSCACHESIZE,SHAREPREPAREDSTATEMENTS,TRACKSTATEMENTS,ALLOCATION_RETRY,ALLOCATION_RETRY_WAIT_MILLIS,BLOCKING_TIMEOUT_WAIT_MILLIS,IDLETIMEOUTMINUTES,QUERYTIMEOUT,USETRYLOCK,SETTXQUERTTIMEOUT,TRANSACTION_ISOLOATION,CHECKVALIDCONNECTIONSQL,EXCEPTIONSORTERCLASSNAME,STALECONNECTIONCHECKERCLASSNAME,VALIDCONNECTIONCHECKERCLASSNAME,BACKGROUNDVALIDATIONMINUTES,BACKGROUNDVALIDATION,USE_FAST_FAIL,VALIDATEONMATCH,XA_RESOURCE_TIMEOUT} @TO@ XA_DATASOURCE_ATTRIBUTE=new String[]{XADATASOURCECLASS,JNDINAME,MODULE,NEW_CONNECTION_SQL,POOLNAME,URL_DELIMITER,URL_SELECTOR_STRATEGY_CLASS_NAME,USE_JAVA_CONTEXT,ENABLED,MAX_POOL_SIZE,MIN_POOL_SIZE,POOL_PREFILL,POOL_USE_STRICT_MIN,INTERLIVING,NOTXSEPARATEPOOL,PAD_XID,SAME_RM_OVERRIDE,WRAP_XA_DATASOURCE,USERNAME,PASSWORD,PREPAREDSTATEMENTSCACHESIZE,SHAREPREPAREDSTATEMENTS,TRACKSTATEMENTS,ALLOCATION_RETRY,ALLOCATION_RETRY_WAIT_MILLIS,BLOCKING_TIMEOUT_WAIT_MILLIS,IDLETIMEOUTMINUTES,QUERYTIMEOUT,USETRYLOCK,SETTXQUERYTIMEOUT,TRANSACTION_ISOLOATION,CHECKVALIDCONNECTIONSQL,EXCEPTIONSORTERCLASSNAME,STALECONNECTIONCHECKERCLASSNAME,VALIDCONNECTIONCHECKERCLASSNAME,BACKGROUNDVALIDATIONMINUTES,BACKGROUNDVALIDATION,USE_FAST_FAIL,VALIDATEONMATCH,XA_RESOURCE_TIMEOUT} @AT@ 2294 @LENGTH@ 890
------UPD ArrayCreation@@new String[]{XADATASOURCECLASS,JNDINAME,MODULE,NEW_CONNECTION_SQL,POOLNAME,URL_DELIMITER,URL_SELECTOR_STRATEGY_CLASS_NAME,USE_JAVA_CONTEXT,ENABLED,MAX_POOL_SIZE,MIN_POOL_SIZE,POOL_PREFILL,POOL_USE_STRICT_MIN,INTERLIVING,NOTXSEPARATEPOOL,PAD_XID,SAME_RM_OVERRIDE,WRAP_XA_DATASOURCE,USERNAME,PASSWORD,PREPAREDSTATEMENTSCACHESIZE,SHAREPREPAREDSTATEMENTS,TRACKSTATEMENTS,ALLOCATION_RETRY,ALLOCATION_RETRY_WAIT_MILLIS,BLOCKING_TIMEOUT_WAIT_MILLIS,IDLETIMEOUTMINUTES,QUERYTIMEOUT,USETRYLOCK,SETTXQUERTTIMEOUT,TRANSACTION_ISOLOATION,CHECKVALIDCONNECTIONSQL,EXCEPTIONSORTERCLASSNAME,STALECONNECTIONCHECKERCLASSNAME,VALIDCONNECTIONCHECKERCLASSNAME,BACKGROUNDVALIDATIONMINUTES,BACKGROUNDVALIDATION,USE_FAST_FAIL,VALIDATEONMATCH,XA_RESOURCE_TIMEOUT} @TO@ new String[]{XADATASOURCECLASS,JNDINAME,MODULE,NEW_CONNECTION_SQL,POOLNAME,URL_DELIMITER,URL_SELECTOR_STRATEGY_CLASS_NAME,USE_JAVA_CONTEXT,ENABLED,MAX_POOL_SIZE,MIN_POOL_SIZE,POOL_PREFILL,POOL_USE_STRICT_MIN,INTERLIVING,NOTXSEPARATEPOOL,PAD_XID,SAME_RM_OVERRIDE,WRAP_XA_DATASOURCE,USERNAME,PASSWORD,PREPAREDSTATEMENTSCACHESIZE,SHAREPREPAREDSTATEMENTS,TRACKSTATEMENTS,ALLOCATION_RETRY,ALLOCATION_RETRY_WAIT_MILLIS,BLOCKING_TIMEOUT_WAIT_MILLIS,IDLETIMEOUTMINUTES,QUERYTIMEOUT,USETRYLOCK,SETTXQUERYTIMEOUT,TRANSACTION_ISOLOATION,CHECKVALIDCONNECTIONSQL,EXCEPTIONSORTERCLASSNAME,STALECONNECTIONCHECKERCLASSNAME,VALIDCONNECTIONCHECKERCLASSNAME,BACKGROUNDVALIDATIONMINUTES,BACKGROUNDVALIDATION,USE_FAST_FAIL,VALIDATEONMATCH,XA_RESOURCE_TIMEOUT} @AT@ 2320 @LENGTH@ 864
---------UPD ArrayInitializer@@{XADATASOURCECLASS,JNDINAME,MODULE,NEW_CONNECTION_SQL,POOLNAME,URL_DELIMITER,URL_SELECTOR_STRATEGY_CLASS_NAME,USE_JAVA_CONTEXT,ENABLED,MAX_POOL_SIZE,MIN_POOL_SIZE,POOL_PREFILL,POOL_USE_STRICT_MIN,INTERLIVING,NOTXSEPARATEPOOL,PAD_XID,SAME_RM_OVERRIDE,WRAP_XA_DATASOURCE,USERNAME,PASSWORD,PREPAREDSTATEMENTSCACHESIZE,SHAREPREPAREDSTATEMENTS,TRACKSTATEMENTS,ALLOCATION_RETRY,ALLOCATION_RETRY_WAIT_MILLIS,BLOCKING_TIMEOUT_WAIT_MILLIS,IDLETIMEOUTMINUTES,QUERYTIMEOUT,USETRYLOCK,SETTXQUERTTIMEOUT,TRANSACTION_ISOLOATION,CHECKVALIDCONNECTIONSQL,EXCEPTIONSORTERCLASSNAME,STALECONNECTIONCHECKERCLASSNAME,VALIDCONNECTIONCHECKERCLASSNAME,BACKGROUNDVALIDATIONMINUTES,BACKGROUNDVALIDATION,USE_FAST_FAIL,VALIDATEONMATCH,XA_RESOURCE_TIMEOUT} @TO@ {XADATASOURCECLASS,JNDINAME,MODULE,NEW_CONNECTION_SQL,POOLNAME,URL_DELIMITER,URL_SELECTOR_STRATEGY_CLASS_NAME,USE_JAVA_CONTEXT,ENABLED,MAX_POOL_SIZE,MIN_POOL_SIZE,POOL_PREFILL,POOL_USE_STRICT_MIN,INTERLIVING,NOTXSEPARATEPOOL,PAD_XID,SAME_RM_OVERRIDE,WRAP_XA_DATASOURCE,USERNAME,PASSWORD,PREPAREDSTATEMENTSCACHESIZE,SHAREPREPAREDSTATEMENTS,TRACKSTATEMENTS,ALLOCATION_RETRY,ALLOCATION_RETRY_WAIT_MILLIS,BLOCKING_TIMEOUT_WAIT_MILLIS,IDLETIMEOUTMINUTES,QUERYTIMEOUT,USETRYLOCK,SETTXQUERYTIMEOUT,TRANSACTION_ISOLOATION,CHECKVALIDCONNECTIONSQL,EXCEPTIONSORTERCLASSNAME,STALECONNECTIONCHECKERCLASSNAME,VALIDCONNECTIONCHECKERCLASSNAME,BACKGROUNDVALIDATIONMINUTES,BACKGROUNDVALIDATION,USE_FAST_FAIL,VALIDATEONMATCH,XA_RESOURCE_TIMEOUT} @AT@ 2333 @LENGTH@ 851
------------UPD SimpleName@@SETTXQUERTTIMEOUT @TO@ SETTXQUERYTIMEOUT @AT@ 2896 @LENGTH@ 17


DEL VariableDeclarationStatement@@Date createdDate=profile.getCreatedDate(); @AT@ 3367 @LENGTH@ 44
---DEL SimpleType@@Date @AT@ 3367 @LENGTH@ 4
---DEL VariableDeclarationFragment@@createdDate=profile.getCreatedDate() @AT@ 3372 @LENGTH@ 38
------DEL SimpleName@@createdDate @AT@ 3372 @LENGTH@ 11
------DEL MethodInvocation@@profile.getCreatedDate() @AT@ 3386 @LENGTH@ 24
---------DEL SimpleName@@Name:profile @AT@ 3386 @LENGTH@ 7
---------DEL SimpleName@@MethodName:getCreatedDate:[] @AT@ 3394 @LENGTH@ 16


INS ExpressionStatement@@MethodInvocation:configuration.addViewInterceptorToFront(ComponentTypeIdentityInterceptorFactory.INSTANCE) @TO@ MethodDeclaration@@public, void, MethodName:configure, DeploymentPhaseContext context, ComponentConfiguration componentConfiguration, ViewDescription description, ViewConfiguration configuration, DeploymentUnitProcessingException,  @AT@ 4438 @LENGTH@ 90
---INS MethodInvocation@@configuration.addViewInterceptorToFront(ComponentTypeIdentityInterceptorFactory.INSTANCE) @TO@ ExpressionStatement@@MethodInvocation:configuration.addViewInterceptorToFront(ComponentTypeIdentityInterceptorFactory.INSTANCE) @AT@ 4438 @LENGTH@ 89
------INS SimpleName@@Name:configuration @TO@ MethodInvocation@@configuration.addViewInterceptorToFront(ComponentTypeIdentityInterceptorFactory.INSTANCE) @AT@ 4438 @LENGTH@ 13
------INS SimpleName@@MethodName:addViewInterceptorToFront:[ComponentTypeIdentityInterceptorFactory.INSTANCE] @TO@ MethodInvocation@@configuration.addViewInterceptorToFront(ComponentTypeIdentityInterceptorFactory.INSTANCE) @AT@ 4452 @LENGTH@ 75
---------INS QualifiedName@@ComponentTypeIdentityInterceptorFactory.INSTANCE @TO@ SimpleName@@MethodName:addViewInterceptorToFront:[ComponentTypeIdentityInterceptorFactory.INSTANCE] @AT@ 4478 @LENGTH@ 48
------------INS SimpleName@@ComponentTypeIdentityInterceptorFactory @TO@ QualifiedName@@ComponentTypeIdentityInterceptorFactory.INSTANCE @AT@ 4478 @LENGTH@ 39
------------INS SimpleName@@INSTANCE @TO@ QualifiedName@@ComponentTypeIdentityInterceptorFactory.INSTANCE @AT@ 4518 @LENGTH@ 8


INS IfStatement@@if (scope == null) {  scope=DependencyScope.COMPILE;} @TO@ MethodDeclaration@@public, final, void, MethodName:addDependency, String groupId, String artifactId, String version, DependencyScope scope,  @AT@ 7765 @LENGTH@ 60
---INS InfixExpression@@scope == null @TO@ IfStatement@@if (scope == null) {  scope=DependencyScope.COMPILE;} @AT@ 7769 @LENGTH@ 13
------INS SimpleName@@scope @TO@ InfixExpression@@scope == null @AT@ 7769 @LENGTH@ 5
------INS Operator@@== @TO@ InfixExpression@@scope == null @AT@ 7774 @LENGTH@ 2
------INS NullLiteral@@null @TO@ InfixExpression@@scope == null @AT@ 7778 @LENGTH@ 4
---INS Block@@ThenBody:{  scope=DependencyScope.COMPILE;} @TO@ IfStatement@@if (scope == null) {  scope=DependencyScope.COMPILE;} @AT@ 7784 @LENGTH@ 41
------INS ExpressionStatement@@Assignment:scope=DependencyScope.COMPILE @TO@ Block@@ThenBody:{  scope=DependencyScope.COMPILE;} @AT@ 7789 @LENGTH@ 32
---------INS Assignment@@scope=DependencyScope.COMPILE @TO@ ExpressionStatement@@Assignment:scope=DependencyScope.COMPILE @AT@ 7789 @LENGTH@ 31
------------INS SimpleName@@scope @TO@ Assignment@@scope=DependencyScope.COMPILE @AT@ 7789 @LENGTH@ 5
------------INS Operator@@= @TO@ Assignment@@scope=DependencyScope.COMPILE @AT@ 7794 @LENGTH@ 1
------------INS QualifiedName@@DependencyScope.COMPILE @TO@ Assignment@@scope=DependencyScope.COMPILE @AT@ 7797 @LENGTH@ 23
---------------INS SimpleName@@DependencyScope @TO@ QualifiedName@@DependencyScope.COMPILE @AT@ 7797 @LENGTH@ 15
---------------INS SimpleName@@COMPILE @TO@ QualifiedName@@DependencyScope.COMPILE @AT@ 7813 @LENGTH@ 7


UPD MethodDeclaration@@boolean, MethodName:isModifyingQuery,  @TO@ final, boolean, MethodName:isModifyingQuery,  @AT@ 3792 @LENGTH@ 107
---INS Modifier@@final @TO@ MethodDeclaration@@boolean, MethodName:isModifyingQuery,  @AT@ 3784 @LENGTH@ 5


UPD VariableDeclarationStatement@@String priority=reader.getAttributeValue("",PRIORITY); @TO@ String priority=reader.getAttributeValue(null,PRIORITY); @AT@ 5752 @LENGTH@ 57
---UPD VariableDeclarationFragment@@priority=reader.getAttributeValue("",PRIORITY) @TO@ priority=reader.getAttributeValue(null,PRIORITY) @AT@ 5759 @LENGTH@ 49
------UPD MethodInvocation@@reader.getAttributeValue("",PRIORITY) @TO@ reader.getAttributeValue(null,PRIORITY) @AT@ 5770 @LENGTH@ 38
---------UPD SimpleName@@MethodName:getAttributeValue:["", PRIORITY] @TO@ MethodName:getAttributeValue:[null, PRIORITY] @AT@ 5777 @LENGTH@ 31
------------INS NullLiteral@@null @TO@ SimpleName@@MethodName:getAttributeValue:["", PRIORITY] @AT@ 5795 @LENGTH@ 4
------------DEL StringLiteral@@"" @AT@ 5795 @LENGTH@ 2


INS VariableDeclarationStatement@@final Method oldMethod=context.getMethod(); @TO@ MethodDeclaration@@public, Object, MethodName:processInvocation, InterceptorContext context, Exception,  @AT@ 2606 @LENGTH@ 45
---INS Modifier@@final @TO@ VariableDeclarationStatement@@final Method oldMethod=context.getMethod(); @AT@ 2606 @LENGTH@ 5
---INS SimpleType@@Method @TO@ VariableDeclarationStatement@@final Method oldMethod=context.getMethod(); @AT@ 2612 @LENGTH@ 6
---INS VariableDeclarationFragment@@oldMethod=context.getMethod() @TO@ VariableDeclarationStatement@@final Method oldMethod=context.getMethod(); @AT@ 2619 @LENGTH@ 31
------INS SimpleName@@oldMethod @TO@ VariableDeclarationFragment@@oldMethod=context.getMethod() @AT@ 2619 @LENGTH@ 9
------INS MethodInvocation@@context.getMethod() @TO@ VariableDeclarationFragment@@oldMethod=context.getMethod() @AT@ 2631 @LENGTH@ 19
---------INS SimpleName@@Name:context @TO@ MethodInvocation@@context.getMethod() @AT@ 2631 @LENGTH@ 7
---------INS SimpleName@@MethodName:getMethod:[] @TO@ MethodInvocation@@context.getMethod() @AT@ 2639 @LENGTH@ 11


UPD IfStatement@@if (getIgnoreInvalidEndpoint() != null) {  routingSlip.setIgnoreInvalidEndpoints(getIgnoreInvalidEndpoint());} @TO@ if (getIgnoreInvalidEndpoints() != null) {  routingSlip.setIgnoreInvalidEndpoints(getIgnoreInvalidEndpoints());} @AT@ 2905 @LENGTH@ 130
---UPD InfixExpression@@getIgnoreInvalidEndpoint() != null @TO@ getIgnoreInvalidEndpoints() != null @AT@ 2909 @LENGTH@ 34
------UPD MethodInvocation@@MethodName:getIgnoreInvalidEndpoint:[] @TO@ MethodName:getIgnoreInvalidEndpoints:[] @AT@ 2909 @LENGTH@ 26
---UPD Block@@ThenBody:{  routingSlip.setIgnoreInvalidEndpoints(getIgnoreInvalidEndpoint());} @TO@ ThenBody:{  routingSlip.setIgnoreInvalidEndpoints(getIgnoreInvalidEndpoints());} @AT@ 2945 @LENGTH@ 90
------UPD ExpressionStatement@@MethodInvocation:routingSlip.setIgnoreInvalidEndpoints(getIgnoreInvalidEndpoint()) @TO@ MethodInvocation:routingSlip.setIgnoreInvalidEndpoints(getIgnoreInvalidEndpoints()) @AT@ 2959 @LENGTH@ 66
---------UPD MethodInvocation@@routingSlip.setIgnoreInvalidEndpoints(getIgnoreInvalidEndpoint()) @TO@ routingSlip.setIgnoreInvalidEndpoints(getIgnoreInvalidEndpoints()) @AT@ 2959 @LENGTH@ 65
------------UPD SimpleName@@MethodName:setIgnoreInvalidEndpoints:[getIgnoreInvalidEndpoint()] @TO@ MethodName:setIgnoreInvalidEndpoints:[getIgnoreInvalidEndpoints()] @AT@ 2971 @LENGTH@ 53
---------------UPD MethodInvocation@@MethodName:getIgnoreInvalidEndpoint:[] @TO@ MethodName:getIgnoreInvalidEndpoints:[] @AT@ 2997 @LENGTH@ 26


UPD ReturnStatement@@ClassInstanceCreation:new ServiceProviderConnectionData(rs.getString("providerId"),rs.getString("providerUserId"),rs.getString("profileName"),rs.getString("profileUrl"),rs.getString("profilePictureUrl"),decrypt(rs.getString("accessToken")),decrypt(rs.getString("secret")),decrypt(rs.getString("refreshToken")),rs.getLong("expireTime")) @TO@ ClassInstanceCreation:new ServiceProviderConnectionData(rs.getString("providerId"),rs.getString("providerUserId"),rs.getString("profileName"),rs.getString("profileUrl"),rs.getString("profilePictureUrl"),decrypt(rs.getString("accessToken")),decrypt(rs.getString("secret")),decrypt(rs.getString("refreshToken")),expireTime(rs.getLong("expireTime"))) @AT@ 10163 @LENGTH@ 334
---UPD ClassInstanceCreation@@ServiceProviderConnectionData[rs.getString("providerId"), rs.getString("providerUserId"), rs.getString("profileName"), rs.getString("profileUrl"), rs.getString("profilePictureUrl"), decrypt(rs.getString("accessToken")), decrypt(rs.getString("secret")), decrypt(rs.getString("refreshToken")), rs.getLong("expireTime")] @TO@ ServiceProviderConnectionData[rs.getString("providerId"), rs.getString("providerUserId"), rs.getString("profileName"), rs.getString("profileUrl"), rs.getString("profilePictureUrl"), decrypt(rs.getString("accessToken")), decrypt(rs.getString("secret")), decrypt(rs.getString("refreshToken")), expireTime(rs.getLong("expireTime"))] @AT@ 10170 @LENGTH@ 326
------INS MethodInvocation@@expireTime(rs.getLong("expireTime")) @TO@ ClassInstanceCreation@@ServiceProviderConnectionData[rs.getString("providerId"), rs.getString("providerUserId"), rs.getString("profileName"), rs.getString("profileUrl"), rs.getString("profilePictureUrl"), decrypt(rs.getString("accessToken")), decrypt(rs.getString("secret")), decrypt(rs.getString("refreshToken")), rs.getLong("expireTime")] @AT@ 10471 @LENGTH@ 36
---------INS SimpleName@@MethodName:expireTime:[rs.getLong("expireTime")] @TO@ MethodInvocation@@expireTime(rs.getLong("expireTime")) @AT@ 10471 @LENGTH@ 36
------------MOV MethodInvocation@@rs.getLong("expireTime") @TO@ SimpleName@@MethodName:expireTime:[rs.getLong("expireTime")] @AT@ 10471 @LENGTH@ 24


UPD MethodDeclaration@@protected, Class, MethodName:resolveClass, ObjectStreamClass classDesc, IOException, ClassNotFoundException,  @TO@ protected, Class<?>, MethodName:resolveClass, ObjectStreamClass classDesc, IOException, ClassNotFoundException,  @AT@ 1618 @LENGTH@ 227
---INS ParameterizedType@@Class<?> @TO@ MethodDeclaration@@protected, Class, MethodName:resolveClass, ObjectStreamClass classDesc, IOException, ClassNotFoundException,  @AT@ 1628 @LENGTH@ 8
------INS SimpleType@@Class @TO@ ParameterizedType@@Class<?> @AT@ 1628 @LENGTH@ 5
------INS WildcardType@@? @TO@ ParameterizedType@@Class<?> @AT@ 1634 @LENGTH@ 1
---DEL SimpleType@@Class @AT@ 1628 @LENGTH@ 5


UPD MethodDeclaration@@static, Collection<byte[]>, MethodName:convertCollection, Collection<String> keys,  @TO@ static, Set<byte[]>, MethodName:convertCollection, Collection<String> keys,  @AT@ 3250 @LENGTH@ 224
---UPD ParameterizedType@@Collection<byte[]> @TO@ Set<byte[]> @AT@ 3257 @LENGTH@ 18
------UPD SimpleType@@Collection @TO@ Set @AT@ 3257 @LENGTH@ 10
---UPD VariableDeclarationStatement@@Collection<byte[]> list=new ArrayList<byte[]>(keys.size()); @TO@ Set<byte[]> set=new LinkedHashSet<byte[]>(keys.size()); @AT@ 3323 @LENGTH@ 61
------UPD ParameterizedType@@Collection<byte[]> @TO@ Set<byte[]> @AT@ 3323 @LENGTH@ 18
---------UPD SimpleType@@Collection @TO@ Set @AT@ 3323 @LENGTH@ 10
------UPD VariableDeclarationFragment@@list=new ArrayList<byte[]>(keys.size()) @TO@ set=new LinkedHashSet<byte[]>(keys.size()) @AT@ 3342 @LENGTH@ 41
---------UPD SimpleName@@list @TO@ set @AT@ 3342 @LENGTH@ 4
---------UPD ClassInstanceCreation@@ArrayList<byte[]>[keys.size()] @TO@ LinkedHashSet<byte[]>[keys.size()] @AT@ 3349 @LENGTH@ 34
------------UPD ParameterizedType@@ArrayList<byte[]> @TO@ LinkedHashSet<byte[]> @AT@ 3353 @LENGTH@ 17
---------------UPD SimpleType@@ArrayList @TO@ LinkedHashSet @AT@ 3353 @LENGTH@ 9
---UPD EnhancedForStatement@@for (String string : keys) {  list.add(Base64.decode(string));} @TO@ for (String string : keys) {  set.add(Base64.decode(string));} @AT@ 3388 @LENGTH@ 68
------UPD ExpressionStatement@@MethodInvocation:list.add(Base64.decode(string)) @TO@ MethodInvocation:set.add(Base64.decode(string)) @AT@ 3420 @LENGTH@ 32
---------UPD MethodInvocation@@list.add(Base64.decode(string)) @TO@ set.add(Base64.decode(string)) @AT@ 3420 @LENGTH@ 31
------------UPD SimpleName@@Name:list @TO@ Name:set @AT@ 3420 @LENGTH@ 4
---UPD ReturnStatement@@SimpleName:list @TO@ SimpleName:set @AT@ 3459 @LENGTH@ 12
------UPD SimpleName@@list @TO@ set @AT@ 3466 @LENGTH@ 4


UPD EnhancedForStatement@@for (DBObject dbo : dbDocList) {  ids.add((ObjectId)dbo.get(ID));} @TO@ for (DBObject dbo : dbDocList) {  Object id=dbo.get(ID);  if (id instanceof ObjectId) {    ids.add((ObjectId)id);  } else {    ids.add(null);  }} @AT@ 14786 @LENGTH@ 72
---DEL ExpressionStatement@@MethodInvocation:ids.add((ObjectId)dbo.get(ID)) @AT@ 14822 @LENGTH@ 32
---INS VariableDeclarationStatement@@Object id=dbo.get(ID); @TO@ EnhancedForStatement@@for (DBObject dbo : dbDocList) {  ids.add((ObjectId)dbo.get(ID));} @AT@ 14822 @LENGTH@ 24
------INS SimpleType@@Object @TO@ VariableDeclarationStatement@@Object id=dbo.get(ID); @AT@ 14822 @LENGTH@ 6
------INS VariableDeclarationFragment@@id=dbo.get(ID) @TO@ VariableDeclarationStatement@@Object id=dbo.get(ID); @AT@ 14829 @LENGTH@ 16
---------INS SimpleName@@id @TO@ VariableDeclarationFragment@@id=dbo.get(ID) @AT@ 14829 @LENGTH@ 2
---------MOV MethodInvocation@@dbo.get(ID) @TO@ VariableDeclarationFragment@@id=dbo.get(ID) @AT@ 14841 @LENGTH@ 11
---INS IfStatement@@if (id instanceof ObjectId) {  ids.add((ObjectId)id);} else {  ids.add(null);} @TO@ EnhancedForStatement@@for (DBObject dbo : dbDocList) {  ids.add((ObjectId)dbo.get(ID));} @AT@ 14850 @LENGTH@ 123
------INS InstanceofExpression@@id instanceof ObjectId @TO@ IfStatement@@if (id instanceof ObjectId) {  ids.add((ObjectId)id);} else {  ids.add(null);} @AT@ 14854 @LENGTH@ 22
---------INS SimpleName@@id @TO@ InstanceofExpression@@id instanceof ObjectId @AT@ 14854 @LENGTH@ 2
---------INS Instanceof@@instanceof @TO@ InstanceofExpression@@id instanceof ObjectId @AT@ 14857 @LENGTH@ 10
---------INS SimpleType@@ObjectId @TO@ InstanceofExpression@@id instanceof ObjectId @AT@ 14868 @LENGTH@ 8
------INS Block@@ThenBody:{  ids.add((ObjectId)id);} @TO@ IfStatement@@if (id instanceof ObjectId) {  ids.add((ObjectId)id);} else {  ids.add(null);} @AT@ 14878 @LENGTH@ 34
---------INS ExpressionStatement@@MethodInvocation:ids.add((ObjectId)id) @TO@ Block@@ThenBody:{  ids.add((ObjectId)id);} @AT@ 14884 @LENGTH@ 23
------------MOV MethodInvocation@@ids.add((ObjectId)dbo.get(ID)) @TO@ ExpressionStatement@@MethodInvocation:ids.add((ObjectId)id) @AT@ 14822 @LENGTH@ 31
---------------UPD SimpleName@@MethodName:add:[(ObjectId)dbo.get(ID)] @TO@ MethodName:add:[(ObjectId)id] @AT@ 14826 @LENGTH@ 27
------------------UPD CastExpression@@(ObjectId)dbo.get(ID) @TO@ (ObjectId)id @AT@ 14830 @LENGTH@ 22
---------------------INS SimpleName@@id @TO@ CastExpression@@(ObjectId)dbo.get(ID) @AT@ 14903 @LENGTH@ 2
------INS Block@@ElseBody:{  ids.add(null);} @TO@ IfStatement@@if (id instanceof ObjectId) {  ids.add((ObjectId)id);} else {  ids.add(null);} @AT@ 14921 @LENGTH@ 52
---------INS ExpressionStatement@@MethodInvocation:ids.add(null) @TO@ Block@@ElseBody:{  ids.add(null);} @AT@ 14954 @LENGTH@ 14
------------INS MethodInvocation@@ids.add(null) @TO@ ExpressionStatement@@MethodInvocation:ids.add(null) @AT@ 14954 @LENGTH@ 13
---------------INS SimpleName@@Name:ids @TO@ MethodInvocation@@ids.add(null) @AT@ 14954 @LENGTH@ 3
---------------INS SimpleName@@MethodName:add:[null] @TO@ MethodInvocation@@ids.add(null) @AT@ 14958 @LENGTH@ 9
------------------INS NullLiteral@@null @TO@ SimpleName@@MethodName:add:[null] @AT@ 14962 @LENGTH@ 4


UPD MethodDeclaration@@protected, abstract, boolean, MethodName:isInAlphabet, byte b,  @TO@ protected, abstract, boolean, MethodName:isInAlphabet, byte value,  @AT@ 13164 @LENGTH@ 48
---UPD SingleVariableDeclaration@@byte b @TO@ byte value @AT@ 13204 @LENGTH@ 6
------UPD SimpleName@@b @TO@ value @AT@ 13209 @LENGTH@ 1


DEL IfStatement@@if (node.hasDefined(DEFAULT_HOST)) {  writer.writeAttribute(Attribute.DEFAULT_HOST.getLocalName(),node.get(DEFAULT_HOST).asString());} @AT@ 5779 @LENGTH@ 154
---DEL MethodInvocation@@node.hasDefined(DEFAULT_HOST) @AT@ 5782 @LENGTH@ 29
------DEL SimpleName@@Name:node @AT@ 5782 @LENGTH@ 4
------DEL SimpleName@@MethodName:hasDefined:[DEFAULT_HOST] @AT@ 5787 @LENGTH@ 24
---------DEL SimpleName@@DEFAULT_HOST @AT@ 5798 @LENGTH@ 12
---DEL Block@@ThenBody:{  writer.writeAttribute(Attribute.DEFAULT_HOST.getLocalName(),node.get(DEFAULT_HOST).asString());} @AT@ 5813 @LENGTH@ 120
------DEL ExpressionStatement@@MethodInvocation:writer.writeAttribute(Attribute.DEFAULT_HOST.getLocalName(),node.get(DEFAULT_HOST).asString()) @AT@ 5827 @LENGTH@ 96
---------DEL MethodInvocation@@writer.writeAttribute(Attribute.DEFAULT_HOST.getLocalName(),node.get(DEFAULT_HOST).asString()) @AT@ 5827 @LENGTH@ 95
------------DEL SimpleName@@Name:writer @AT@ 5827 @LENGTH@ 6
------------DEL SimpleName@@MethodName:writeAttribute:[Attribute.DEFAULT_HOST.getLocalName(), node.get(DEFAULT_HOST).asString()] @AT@ 5834 @LENGTH@ 88
---------------DEL MethodInvocation@@Attribute.DEFAULT_HOST.getLocalName() @AT@ 5849 @LENGTH@ 37
------------------DEL QualifiedName@@Name:Attribute.DEFAULT_HOST @AT@ 5849 @LENGTH@ 22
------------------DEL SimpleName@@MethodName:getLocalName:[] @AT@ 5872 @LENGTH@ 14
---------------DEL MethodInvocation@@node.get(DEFAULT_HOST).asString() @AT@ 5888 @LENGTH@ 33
------------------DEL MethodInvocation@@MethodName:get:[DEFAULT_HOST] @AT@ 5888 @LENGTH@ 22
---------------------DEL SimpleName@@DEFAULT_HOST @AT@ 5897 @LENGTH@ 12
------------------DEL SimpleName@@Name:node @AT@ 5888 @LENGTH@ 4
------------------DEL SimpleName@@MethodName:asString:[] @AT@ 5911 @LENGTH@ 10


UPD ReturnStatement@@MethodInvocation:configure(COMPONENT,false,true) @TO@ MethodInvocation:configure(COMPONENT) @AT@ 1377 @LENGTH@ 41
---UPD MethodInvocation@@configure(COMPONENT,false,true) @TO@ configure(COMPONENT) @AT@ 1384 @LENGTH@ 33
------UPD SimpleName@@MethodName:configure:[COMPONENT, false, true] @TO@ MethodName:configure:[COMPONENT] @AT@ 1384 @LENGTH@ 33
---------DEL BooleanLiteral@@false @AT@ 1405 @LENGTH@ 5
---------DEL BooleanLiteral@@true @AT@ 1412 @LENGTH@ 4


UPD ExpressionStatement@@MethodInvocation:exchange.getOut().setHeader(Constants.PROPERTY_HISTORYLENGTH,new Integer(hlength)) @TO@ MethodInvocation:exchange.getOut().setHeader(Constants.PROPERTY_HISTORYLENGTH,hlength) @AT@ 1558 @LENGTH@ 84
---UPD MethodInvocation@@exchange.getOut().setHeader(Constants.PROPERTY_HISTORYLENGTH,new Integer(hlength)) @TO@ exchange.getOut().setHeader(Constants.PROPERTY_HISTORYLENGTH,hlength) @AT@ 1558 @LENGTH@ 83
------UPD SimpleName@@MethodName:setHeader:[Constants.PROPERTY_HISTORYLENGTH, new Integer(hlength)] @TO@ MethodName:setHeader:[Constants.PROPERTY_HISTORYLENGTH, hlength] @AT@ 1576 @LENGTH@ 65
---------INS SimpleName@@hlength @TO@ SimpleName@@MethodName:setHeader:[Constants.PROPERTY_HISTORYLENGTH, new Integer(hlength)] @AT@ 1607 @LENGTH@ 7
---------DEL ClassInstanceCreation@@Integer[hlength] @AT@ 1620 @LENGTH@ 20
------------DEL New@@new @AT@ 1620 @LENGTH@ 3
------------DEL SimpleType@@Integer @AT@ 1624 @LENGTH@ 7
------------DEL SimpleName@@hlength @AT@ 1632 @LENGTH@ 7


UPD IfStatement@@if (managementRepoService != null) {  try {    final ManagementRepository repository=(ManagementRepository)managementRepoService.getValue();    if (repository.getDataSources() != null) {      for (      DataSource ds : repository.getDataSources()) {        if (jndiName.equalsIgnoreCase(ds.getJndiName())) {          if (MAX_POOL_SIZE.equals(parameterName)) {            ds.getPoolConfiguration().setMaxSize(newValue.asInt());          }          if (MIN_POOL_SIZE.equals(parameterName)) {            ds.getPoolConfiguration().setMinSize(newValue.asInt());          }          if (BLOCKING_TIMEOUT_WAIT_MILLIS.equals(parameterName)) {            ds.getPoolConfiguration().setBlockingTimeout(newValue.asLong());          }          if (POOL_USE_STRICT_MIN.equals(parameterName)) {            ds.getPoolConfiguration().setStrictMin(newValue.asBoolean());          }          if (USE_FAST_FAIL.equals(parameterName)) {            ds.getPoolConfiguration().setUseFastFail(newValue.asBoolean());          }        }      }    }    modelChanged(context,operation,resultHandler,parameterName,newValue,currentValue);  } catch (  Exception e) {    throw new OperationFailedException(new ModelNode().set("failed to set attribute" + e.getMessage()));  }} @TO@ if (managementRepoService != null) {  try {    final ManagementRepository repository=(ManagementRepository)managementRepoService.getValue();    if (repository.getDataSources() != null) {      for (      DataSource ds : repository.getDataSources()) {        if (jndiName.equalsIgnoreCase(ds.getJndiName())) {          if (MAX_POOL_SIZE.equals(parameterName)) {            ds.getPoolConfiguration().setMaxSize(newValue.asInt());          }          if (MIN_POOL_SIZE.equals(parameterName)) {            ds.getPoolConfiguration().setMinSize(newValue.asInt());          }          if (BLOCKING_TIMEOUT_WAIT_MILLIS.equals(parameterName)) {            ds.getPoolConfiguration().setBlockingTimeout(newValue.asLong());          }          if (POOL_USE_STRICT_MIN.equals(parameterName)) {            ds.getPoolConfiguration().setStrictMin(newValue.asBoolean());          }          if (USE_FAST_FAIL.equals(parameterName)) {            ds.getPoolConfiguration().setUseFastFail(newValue.asBoolean());          }        }      }    }    resultHandler.handleResultComplete();  } catch (  Exception e) {    throw new OperationFailedException(new ModelNode().set("failed to set attribute" + e.getMessage()));  }} else {  resultHandler.handleResultComplete();} @AT@ 5909 @LENGTH@ 2199
---UPD Block@@ThenBody:{  try {    final ManagementRepository repository=(ManagementRepository)managementRepoService.getValue();    if (repository.getDataSources() != null) {      for (      DataSource ds : repository.getDataSources()) {        if (jndiName.equalsIgnoreCase(ds.getJndiName())) {          if (MAX_POOL_SIZE.equals(parameterName)) {            ds.getPoolConfiguration().setMaxSize(newValue.asInt());          }          if (MIN_POOL_SIZE.equals(parameterName)) {            ds.getPoolConfiguration().setMinSize(newValue.asInt());          }          if (BLOCKING_TIMEOUT_WAIT_MILLIS.equals(parameterName)) {            ds.getPoolConfiguration().setBlockingTimeout(newValue.asLong());          }          if (POOL_USE_STRICT_MIN.equals(parameterName)) {            ds.getPoolConfiguration().setStrictMin(newValue.asBoolean());          }          if (USE_FAST_FAIL.equals(parameterName)) {            ds.getPoolConfiguration().setUseFastFail(newValue.asBoolean());          }        }      }    }    modelChanged(context,operation,resultHandler,parameterName,newValue,currentValue);  } catch (  Exception e) {    throw new OperationFailedException(new ModelNode().set("failed to set attribute" + e.getMessage()));  }} @TO@ ThenBody:{  try {    final ManagementRepository repository=(ManagementRepository)managementRepoService.getValue();    if (repository.getDataSources() != null) {      for (      DataSource ds : repository.getDataSources()) {        if (jndiName.equalsIgnoreCase(ds.getJndiName())) {          if (MAX_POOL_SIZE.equals(parameterName)) {            ds.getPoolConfiguration().setMaxSize(newValue.asInt());          }          if (MIN_POOL_SIZE.equals(parameterName)) {            ds.getPoolConfiguration().setMinSize(newValue.asInt());          }          if (BLOCKING_TIMEOUT_WAIT_MILLIS.equals(parameterName)) {            ds.getPoolConfiguration().setBlockingTimeout(newValue.asLong());          }          if (POOL_USE_STRICT_MIN.equals(parameterName)) {            ds.getPoolConfiguration().setStrictMin(newValue.asBoolean());          }          if (USE_FAST_FAIL.equals(parameterName)) {            ds.getPoolConfiguration().setUseFastFail(newValue.asBoolean());          }        }      }    }    resultHandler.handleResultComplete();  } catch (  Exception e) {    throw new OperationFailedException(new ModelNode().set("failed to set attribute" + e.getMessage()));  }} @AT@ 5944 @LENGTH@ 2164
------UPD TryStatement@@try {  final ManagementRepository repository=(ManagementRepository)managementRepoService.getValue();  if (repository.getDataSources() != null) {    for (    DataSource ds : repository.getDataSources()) {      if (jndiName.equalsIgnoreCase(ds.getJndiName())) {        if (MAX_POOL_SIZE.equals(parameterName)) {          ds.getPoolConfiguration().setMaxSize(newValue.asInt());        }        if (MIN_POOL_SIZE.equals(parameterName)) {          ds.getPoolConfiguration().setMinSize(newValue.asInt());        }        if (BLOCKING_TIMEOUT_WAIT_MILLIS.equals(parameterName)) {          ds.getPoolConfiguration().setBlockingTimeout(newValue.asLong());        }        if (POOL_USE_STRICT_MIN.equals(parameterName)) {          ds.getPoolConfiguration().setStrictMin(newValue.asBoolean());        }        if (USE_FAST_FAIL.equals(parameterName)) {          ds.getPoolConfiguration().setUseFastFail(newValue.asBoolean());        }      }    }  }  modelChanged(context,operation,resultHandler,parameterName,newValue,currentValue);} catch (Exception e) {  throw new OperationFailedException(new ModelNode().set("failed to set attribute" + e.getMessage()));} @TO@ try {  final ManagementRepository repository=(ManagementRepository)managementRepoService.getValue();  if (repository.getDataSources() != null) {    for (    DataSource ds : repository.getDataSources()) {      if (jndiName.equalsIgnoreCase(ds.getJndiName())) {        if (MAX_POOL_SIZE.equals(parameterName)) {          ds.getPoolConfiguration().setMaxSize(newValue.asInt());        }        if (MIN_POOL_SIZE.equals(parameterName)) {          ds.getPoolConfiguration().setMinSize(newValue.asInt());        }        if (BLOCKING_TIMEOUT_WAIT_MILLIS.equals(parameterName)) {          ds.getPoolConfiguration().setBlockingTimeout(newValue.asLong());        }        if (POOL_USE_STRICT_MIN.equals(parameterName)) {          ds.getPoolConfiguration().setStrictMin(newValue.asBoolean());        }        if (USE_FAST_FAIL.equals(parameterName)) {          ds.getPoolConfiguration().setUseFastFail(newValue.asBoolean());        }      }    }  }  resultHandler.handleResultComplete();} catch (Exception e) {  throw new OperationFailedException(new ModelNode().set("failed to set attribute" + e.getMessage()));} @AT@ 5974 @LENGTH@ 2108
---------UPD ExpressionStatement@@MethodInvocation:modelChanged(context,operation,resultHandler,parameterName,newValue,currentValue) @TO@ MethodInvocation:resultHandler.handleResultComplete() @AT@ 7739 @LENGTH@ 87
------------UPD MethodInvocation@@modelChanged(context,operation,resultHandler,parameterName,newValue,currentValue) @TO@ resultHandler.handleResultComplete() @AT@ 7739 @LENGTH@ 86
---------------DEL SimpleName@@MethodName:modelChanged:[context, operation, resultHandler, parameterName, newValue, currentValue] @AT@ 7739 @LENGTH@ 86
------------------DEL SimpleName@@context @AT@ 7752 @LENGTH@ 7
------------------DEL SimpleName@@operation @AT@ 7761 @LENGTH@ 9
------------------DEL SimpleName@@resultHandler @AT@ 7772 @LENGTH@ 13
------------------DEL SimpleName@@parameterName @AT@ 7787 @LENGTH@ 13
------------------DEL SimpleName@@newValue @AT@ 7802 @LENGTH@ 8
------------------DEL SimpleName@@currentValue @AT@ 7812 @LENGTH@ 12
---------------INS SimpleName@@Name:resultHandler @TO@ MethodInvocation@@modelChanged(context,operation,resultHandler,parameterName,newValue,currentValue) @AT@ 7751 @LENGTH@ 13
---------------INS SimpleName@@MethodName:handleResultComplete:[] @TO@ MethodInvocation@@modelChanged(context,operation,resultHandler,parameterName,newValue,currentValue) @AT@ 7765 @LENGTH@ 22
---INS Block@@ElseBody:{  resultHandler.handleResultComplete();} @TO@ IfStatement@@if (managementRepoService != null) {  try {    final ManagementRepository repository=(ManagementRepository)managementRepoService.getValue();    if (repository.getDataSources() != null) {      for (      DataSource ds : repository.getDataSources()) {        if (jndiName.equalsIgnoreCase(ds.getJndiName())) {          if (MAX_POOL_SIZE.equals(parameterName)) {            ds.getPoolConfiguration().setMaxSize(newValue.asInt());          }          if (MIN_POOL_SIZE.equals(parameterName)) {            ds.getPoolConfiguration().setMinSize(newValue.asInt());          }          if (BLOCKING_TIMEOUT_WAIT_MILLIS.equals(parameterName)) {            ds.getPoolConfiguration().setBlockingTimeout(newValue.asLong());          }          if (POOL_USE_STRICT_MIN.equals(parameterName)) {            ds.getPoolConfiguration().setStrictMin(newValue.asBoolean());          }          if (USE_FAST_FAIL.equals(parameterName)) {            ds.getPoolConfiguration().setUseFastFail(newValue.asBoolean());          }        }      }    }    modelChanged(context,operation,resultHandler,parameterName,newValue,currentValue);  } catch (  Exception e) {    throw new OperationFailedException(new ModelNode().set("failed to set attribute" + e.getMessage()));  }} @AT@ 8076 @LENGTH@ 93
------INS ExpressionStatement@@MethodInvocation:resultHandler.handleResultComplete() @TO@ Block@@ElseBody:{  resultHandler.handleResultComplete();} @AT@ 8106 @LENGTH@ 37
---------INS MethodInvocation@@resultHandler.handleResultComplete() @TO@ ExpressionStatement@@MethodInvocation:resultHandler.handleResultComplete() @AT@ 8106 @LENGTH@ 36
------------INS SimpleName@@Name:resultHandler @TO@ MethodInvocation@@resultHandler.handleResultComplete() @AT@ 8106 @LENGTH@ 13
------------INS SimpleName@@MethodName:handleResultComplete:[] @TO@ MethodInvocation@@resultHandler.handleResultComplete() @AT@ 8120 @LENGTH@ 22


UPD ThrowStatement@@ClassInstanceCreation:new DeploymentUnitProcessingException("Failed to mount deployment content") @TO@ ClassInstanceCreation:new DeploymentUnitProcessingException("Failed to mount deployment content",e) @AT@ 3266 @LENGTH@ 82
---UPD ClassInstanceCreation@@DeploymentUnitProcessingException["Failed to mount deployment content"] @TO@ DeploymentUnitProcessingException["Failed to mount deployment content", e] @AT@ 3272 @LENGTH@ 75
------INS SimpleName@@e @TO@ ClassInstanceCreation@@DeploymentUnitProcessingException["Failed to mount deployment content"] @AT@ 3348 @LENGTH@ 1


UPD EnhancedForStatement@@for (EJBLocalReferenceMetaData ejbRef : ejbLocalRefs) {  String name=ejbRef.getEjbRefName();  String ejbName=ejbRef.getLink();  String lookup=ejbRef.getLookupName();  String localInterface=ejbRef.getLocal();  Class<?> localInterfaceType=null;  if (!isEmpty(localInterface)) {    try {      classLoader.loadClass(localInterface);    } catch (    ClassNotFoundException e) {      throw new DeploymentUnitProcessingException("Could not load local interface type " + localInterface,e);    }  }  if (!name.startsWith("java:")) {    name=environment.getDefaultContext() + name;  }  LookupInjectionSource injectionSource=new LookupInjectionSource(name);  localInterfaceType=processInjectionTargets(moduleDescription,injectionSource,classLoader,deploymentReflectionIndex,ejbRef,localInterfaceType);  if (localInterfaceType == null) {    throw new DeploymentUnitProcessingException("Could not determine type of ejb-local-ref " + name + " for component "+ componentDescription);  }  BindingConfiguration bindingConfiguration=null;  if (!isEmpty(lookup)) {    bindingConfiguration=new BindingConfiguration(name,new LookupInjectionSource(lookup));  } else   if (!isEmpty(ejbName)) {    final ServiceName beanServiceName=deploymentUnit.getServiceName().append("component").append(ejbName).append("VIEW").append(localInterfaceType.getName());    bindingConfiguration=new BindingConfiguration(name,new ServiceInjectionSource(beanServiceName));  } else {    throw new RuntimeException("Support for ejb-local-ref without lookup or ejb-link isn't yet implemented");  }} @TO@ for (EJBLocalReferenceMetaData ejbRef : ejbLocalRefs) {  String name=ejbRef.getEjbRefName();  String ejbName=ejbRef.getLink();  String lookup=ejbRef.getLookupName();  String localInterface=ejbRef.getLocal();  Class<?> localInterfaceType=null;  if (!isEmpty(localInterface)) {    try {      classLoader.loadClass(localInterface);    } catch (    ClassNotFoundException e) {      throw new DeploymentUnitProcessingException("Could not load local interface type " + localInterface,e);    }  }  if (!name.startsWith("java:")) {    name=environment.getDefaultContext() + name;  }  LookupInjectionSource injectionSource=new LookupInjectionSource(name);  localInterfaceType=processInjectionTargets(moduleDescription,injectionSource,classLoader,deploymentReflectionIndex,ejbRef,localInterfaceType);  if (localInterfaceType == null) {    throw new DeploymentUnitProcessingException("Could not determine type of ejb-local-ref " + name + " for component "+ componentDescription);  }  final BindingConfiguration bindingConfiguration;  if (!isEmpty(lookup)) {    bindingConfiguration=new BindingConfiguration(name,new LookupInjectionSource(lookup));  } else   if (!isEmpty(ejbName)) {    final ServiceName beanServiceName=deploymentUnit.getServiceName().append("component").append(ejbName).append("VIEW").append(localInterfaceType.getName());    bindingConfiguration=new BindingConfiguration(name,new ViewBindingInjectionSource(beanServiceName));  } else {    throw new RuntimeException("Support for ejb-local-ref without lookup or ejb-link isn't yet implemented");  }  bindingDescriptions.add(bindingConfiguration);} @AT@ 3148 @LENGTH@ 2289
---UPD VariableDeclarationStatement@@BindingConfiguration bindingConfiguration=null; @TO@ final BindingConfiguration bindingConfiguration; @AT@ 4615 @LENGTH@ 49
------INS Modifier@@final @TO@ VariableDeclarationStatement@@BindingConfiguration bindingConfiguration=null; @AT@ 4619 @LENGTH@ 5
------UPD VariableDeclarationFragment@@bindingConfiguration=null @TO@ bindingConfiguration @AT@ 4636 @LENGTH@ 27
---------DEL NullLiteral@@null @AT@ 4659 @LENGTH@ 4
---UPD IfStatement@@if (!isEmpty(lookup)) {  bindingConfiguration=new BindingConfiguration(name,new LookupInjectionSource(lookup));} else if (!isEmpty(ejbName)) {  final ServiceName beanServiceName=deploymentUnit.getServiceName().append("component").append(ejbName).append("VIEW").append(localInterfaceType.getName());  bindingConfiguration=new BindingConfiguration(name,new ServiceInjectionSource(beanServiceName));} else {  throw new RuntimeException("Support for ejb-local-ref without lookup or ejb-link isn't yet implemented");} @TO@ if (!isEmpty(lookup)) {  bindingConfiguration=new BindingConfiguration(name,new LookupInjectionSource(lookup));} else if (!isEmpty(ejbName)) {  final ServiceName beanServiceName=deploymentUnit.getServiceName().append("component").append(ejbName).append("VIEW").append(localInterfaceType.getName());  bindingConfiguration=new BindingConfiguration(name,new ViewBindingInjectionSource(beanServiceName));} else {  throw new RuntimeException("Support for ejb-local-ref without lookup or ejb-link isn't yet implemented");} @AT@ 4681 @LENGTH@ 742
------UPD Block@@ElseBody:if (!isEmpty(ejbName)) {  final ServiceName beanServiceName=deploymentUnit.getServiceName().append("component").append(ejbName).append("VIEW").append(localInterfaceType.getName());  bindingConfiguration=new BindingConfiguration(name,new ServiceInjectionSource(beanServiceName));} else {  throw new RuntimeException("Support for ejb-local-ref without lookup or ejb-link isn't yet implemented");} @TO@ ElseBody:if (!isEmpty(ejbName)) {  final ServiceName beanServiceName=deploymentUnit.getServiceName().append("component").append(ejbName).append("VIEW").append(localInterfaceType.getName());  bindingConfiguration=new BindingConfiguration(name,new ViewBindingInjectionSource(beanServiceName));} else {  throw new RuntimeException("Support for ejb-local-ref without lookup or ejb-link isn't yet implemented");} @AT@ 4838 @LENGTH@ 585
---------UPD IfStatement@@if (!isEmpty(ejbName)) {  final ServiceName beanServiceName=deploymentUnit.getServiceName().append("component").append(ejbName).append("VIEW").append(localInterfaceType.getName());  bindingConfiguration=new BindingConfiguration(name,new ServiceInjectionSource(beanServiceName));} else {  throw new RuntimeException("Support for ejb-local-ref without lookup or ejb-link isn't yet implemented");} @TO@ if (!isEmpty(ejbName)) {  final ServiceName beanServiceName=deploymentUnit.getServiceName().append("component").append(ejbName).append("VIEW").append(localInterfaceType.getName());  bindingConfiguration=new BindingConfiguration(name,new ViewBindingInjectionSource(beanServiceName));} else {  throw new RuntimeException("Support for ejb-local-ref without lookup or ejb-link isn't yet implemented");} @AT@ 4838 @LENGTH@ 585
------------UPD Block@@ThenBody:{  final ServiceName beanServiceName=deploymentUnit.getServiceName().append("component").append(ejbName).append("VIEW").append(localInterfaceType.getName());  bindingConfiguration=new BindingConfiguration(name,new ServiceInjectionSource(beanServiceName));} @TO@ ThenBody:{  final ServiceName beanServiceName=deploymentUnit.getServiceName().append("component").append(ejbName).append("VIEW").append(localInterfaceType.getName());  bindingConfiguration=new BindingConfiguration(name,new ViewBindingInjectionSource(beanServiceName));} @AT@ 4861 @LENGTH@ 411
---------------UPD ExpressionStatement@@Assignment:bindingConfiguration=new BindingConfiguration(name,new ServiceInjectionSource(beanServiceName)) @TO@ Assignment:bindingConfiguration=new BindingConfiguration(name,new ViewBindingInjectionSource(beanServiceName)) @AT@ 5155 @LENGTH@ 99
------------------UPD Assignment@@bindingConfiguration=new BindingConfiguration(name,new ServiceInjectionSource(beanServiceName)) @TO@ bindingConfiguration=new BindingConfiguration(name,new ViewBindingInjectionSource(beanServiceName)) @AT@ 5155 @LENGTH@ 98
---------------------UPD ClassInstanceCreation@@BindingConfiguration[name, new ServiceInjectionSource(beanServiceName)] @TO@ BindingConfiguration[name, new ViewBindingInjectionSource(beanServiceName)] @AT@ 5178 @LENGTH@ 75
------------------------UPD ClassInstanceCreation@@ServiceInjectionSource[beanServiceName] @TO@ ViewBindingInjectionSource[beanServiceName] @AT@ 5209 @LENGTH@ 43
---------------------------UPD SimpleType@@ServiceInjectionSource @TO@ ViewBindingInjectionSource @AT@ 5213 @LENGTH@ 22
---INS ExpressionStatement@@MethodInvocation:bindingDescriptions.add(bindingConfiguration) @TO@ EnhancedForStatement@@for (EJBLocalReferenceMetaData ejbRef : ejbLocalRefs) {  String name=ejbRef.getEjbRefName();  String ejbName=ejbRef.getLink();  String lookup=ejbRef.getLookupName();  String localInterface=ejbRef.getLocal();  Class<?> localInterfaceType=null;  if (!isEmpty(localInterface)) {    try {      classLoader.loadClass(localInterface);    } catch (    ClassNotFoundException e) {      throw new DeploymentUnitProcessingException("Could not load local interface type " + localInterface,e);    }  }  if (!name.startsWith("java:")) {    name=environment.getDefaultContext() + name;  }  LookupInjectionSource injectionSource=new LookupInjectionSource(name);  localInterfaceType=processInjectionTargets(moduleDescription,injectionSource,classLoader,deploymentReflectionIndex,ejbRef,localInterfaceType);  if (localInterfaceType == null) {    throw new DeploymentUnitProcessingException("Could not determine type of ejb-local-ref " + name + " for component "+ componentDescription);  }  BindingConfiguration bindingConfiguration=null;  if (!isEmpty(lookup)) {    bindingConfiguration=new BindingConfiguration(name,new LookupInjectionSource(lookup));  } else   if (!isEmpty(ejbName)) {    final ServiceName beanServiceName=deploymentUnit.getServiceName().append("component").append(ejbName).append("VIEW").append(localInterfaceType.getName());    bindingConfiguration=new BindingConfiguration(name,new ServiceInjectionSource(beanServiceName));  } else {    throw new RuntimeException("Support for ejb-local-ref without lookup or ejb-link isn't yet implemented");  }} @AT@ 5447 @LENGTH@ 46
------INS MethodInvocation@@bindingDescriptions.add(bindingConfiguration) @TO@ ExpressionStatement@@MethodInvocation:bindingDescriptions.add(bindingConfiguration) @AT@ 5447 @LENGTH@ 45
---------INS SimpleName@@Name:bindingDescriptions @TO@ MethodInvocation@@bindingDescriptions.add(bindingConfiguration) @AT@ 5447 @LENGTH@ 19
---------INS SimpleName@@MethodName:add:[bindingConfiguration] @TO@ MethodInvocation@@bindingDescriptions.add(bindingConfiguration) @AT@ 5467 @LENGTH@ 25
------------INS SimpleName@@bindingConfiguration @TO@ SimpleName@@MethodName:add:[bindingConfiguration] @AT@ 5471 @LENGTH@ 20


UPD IfStatement@@if (failure == null && !locations.isDefined()) {  for (  ModelNode node : locations.asList()) {    if (uri.equals(node.asProperty().getName())) {      failure="Schema with URI " + uri + " already registered with location "+ node.asProperty().getValue().asString();    }  }} @TO@ if (failure == null && locations.isDefined()) {  for (  ModelNode node : locations.asList()) {    if (uri.equals(node.asProperty().getName())) {      failure="Schema with URI " + uri + " already registered with location "+ node.asProperty().getValue().asString();    }  }} @AT@ 4173 @LENGTH@ 346
---UPD InfixExpression@@failure == null && !locations.isDefined() @TO@ failure == null && locations.isDefined() @AT@ 4177 @LENGTH@ 41
------DEL PrefixExpression@@!locations.isDefined() @AT@ 4196 @LENGTH@ 22
---------DEL Operator@@! @AT@ 4196 @LENGTH@ 1
---------DEL MethodInvocation@@locations.isDefined() @AT@ 4197 @LENGTH@ 21
------INS MethodInvocation@@locations.isDefined() @TO@ InfixExpression@@failure == null && !locations.isDefined() @AT@ 4196 @LENGTH@ 21
---------MOV SimpleName@@Name:locations @TO@ MethodInvocation@@locations.isDefined() @AT@ 4197 @LENGTH@ 9
---------MOV SimpleName@@MethodName:isDefined:[] @TO@ MethodInvocation@@locations.isDefined() @AT@ 4207 @LENGTH@ 11


INS FieldDeclaration@@private, static, final, String[][], [BASE32_TEST_CASES_CHUNKED={{"",""},{"f","MY======\r\n"},{"fo","MZXQ====\r\n"},{"foo","MZXW6===\r\n"},{"foob","MZXW6YQ=\r\n"},{"fooba","MZXW6YTB\r\n"},{"foobar","MZXW6YTBOI======\r\n"}}] @TO@ TypeDeclaration@@[public]Base32Test, TestCase @AT@ 1569 @LENGTH@ 327
---INS Modifier@@private @TO@ FieldDeclaration@@private, static, final, String[][], [BASE32_TEST_CASES_CHUNKED={{"",""},{"f","MY======\r\n"},{"fo","MZXQ====\r\n"},{"foo","MZXW6===\r\n"},{"foob","MZXW6YQ=\r\n"},{"fooba","MZXW6YTB\r\n"},{"foobar","MZXW6YTBOI======\r\n"}}] @AT@ 1569 @LENGTH@ 7
---INS Modifier@@static @TO@ FieldDeclaration@@private, static, final, String[][], [BASE32_TEST_CASES_CHUNKED={{"",""},{"f","MY======\r\n"},{"fo","MZXQ====\r\n"},{"foo","MZXW6===\r\n"},{"foob","MZXW6YQ=\r\n"},{"fooba","MZXW6YTB\r\n"},{"foobar","MZXW6YTBOI======\r\n"}}] @AT@ 1577 @LENGTH@ 6
---INS Modifier@@final @TO@ FieldDeclaration@@private, static, final, String[][], [BASE32_TEST_CASES_CHUNKED={{"",""},{"f","MY======\r\n"},{"fo","MZXQ====\r\n"},{"foo","MZXW6===\r\n"},{"foob","MZXW6YQ=\r\n"},{"fooba","MZXW6YTB\r\n"},{"foobar","MZXW6YTBOI======\r\n"}}] @AT@ 1584 @LENGTH@ 5
---INS ArrayType@@String[][] @TO@ FieldDeclaration@@private, static, final, String[][], [BASE32_TEST_CASES_CHUNKED={{"",""},{"f","MY======\r\n"},{"fo","MZXQ====\r\n"},{"foo","MZXW6===\r\n"},{"foob","MZXW6YQ=\r\n"},{"fooba","MZXW6YTB\r\n"},{"foobar","MZXW6YTBOI======\r\n"}}] @AT@ 1590 @LENGTH@ 11
------INS SimpleType@@String @TO@ ArrayType@@String[][] @AT@ 1590 @LENGTH@ 6
---INS VariableDeclarationFragment@@BASE32_TEST_CASES_CHUNKED={{"",""},{"f","MY======\r\n"},{"fo","MZXQ====\r\n"},{"foo","MZXW6===\r\n"},{"foob","MZXW6YQ=\r\n"},{"fooba","MZXW6YTB\r\n"},{"foobar","MZXW6YTBOI======\r\n"}} @TO@ FieldDeclaration@@private, static, final, String[][], [BASE32_TEST_CASES_CHUNKED={{"",""},{"f","MY======\r\n"},{"fo","MZXQ====\r\n"},{"foo","MZXW6===\r\n"},{"foob","MZXW6YQ=\r\n"},{"fooba","MZXW6YTB\r\n"},{"foobar","MZXW6YTBOI======\r\n"}}] @AT@ 1602 @LENGTH@ 293
------INS SimpleName@@BASE32_TEST_CASES_CHUNKED @TO@ VariableDeclarationFragment@@BASE32_TEST_CASES_CHUNKED={{"",""},{"f","MY======\r\n"},{"fo","MZXQ====\r\n"},{"foo","MZXW6===\r\n"},{"foob","MZXW6YQ=\r\n"},{"fooba","MZXW6YTB\r\n"},{"foobar","MZXW6YTBOI======\r\n"}} @AT@ 1602 @LENGTH@ 25
------INS ArrayInitializer@@{{"",""},{"f","MY======\r\n"},{"fo","MZXQ====\r\n"},{"foo","MZXW6===\r\n"},{"foob","MZXW6YQ=\r\n"},{"fooba","MZXW6YTB\r\n"},{"foobar","MZXW6YTBOI======\r\n"}} @TO@ VariableDeclarationFragment@@BASE32_TEST_CASES_CHUNKED={{"",""},{"f","MY======\r\n"},{"fo","MZXQ====\r\n"},{"foo","MZXW6===\r\n"},{"foob","MZXW6YQ=\r\n"},{"fooba","MZXW6YTB\r\n"},{"foobar","MZXW6YTBOI======\r\n"}} @AT@ 1630 @LENGTH@ 265
---------INS ArrayInitializer@@{"",""} @TO@ ArrayInitializer@@{{"",""},{"f","MY======\r\n"},{"fo","MZXQ====\r\n"},{"foo","MZXW6===\r\n"},{"foob","MZXW6YQ=\r\n"},{"fooba","MZXW6YTB\r\n"},{"foobar","MZXW6YTBOI======\r\n"}} @AT@ 1650 @LENGTH@ 14
------------INS StringLiteral@@"" @TO@ ArrayInitializer@@{"",""} @AT@ 1651 @LENGTH@ 2
------------INS StringLiteral@@"" @TO@ ArrayInitializer@@{"",""} @AT@ 1661 @LENGTH@ 2
---------INS ArrayInitializer@@{"f","MY======\r\n"} @TO@ ArrayInitializer@@{{"",""},{"f","MY======\r\n"},{"fo","MZXQ====\r\n"},{"foo","MZXW6===\r\n"},{"foob","MZXW6YQ=\r\n"},{"fooba","MZXW6YTB\r\n"},{"foobar","MZXW6YTBOI======\r\n"}} @AT@ 1674 @LENGTH@ 26
------------INS StringLiteral@@"f" @TO@ ArrayInitializer@@{"f","MY======\r\n"} @AT@ 1675 @LENGTH@ 3
------------INS StringLiteral@@"MY======\r\n" @TO@ ArrayInitializer@@{"f","MY======\r\n"} @AT@ 1685 @LENGTH@ 14
---------INS ArrayInitializer@@{"fo","MZXQ====\r\n"} @TO@ ArrayInitializer@@{{"",""},{"f","MY======\r\n"},{"fo","MZXQ====\r\n"},{"foo","MZXW6===\r\n"},{"foob","MZXW6YQ=\r\n"},{"fooba","MZXW6YTB\r\n"},{"foobar","MZXW6YTBOI======\r\n"}} @AT@ 1710 @LENGTH@ 26
------------INS StringLiteral@@"fo" @TO@ ArrayInitializer@@{"fo","MZXQ====\r\n"} @AT@ 1711 @LENGTH@ 4
------------INS StringLiteral@@"MZXQ====\r\n" @TO@ ArrayInitializer@@{"fo","MZXQ====\r\n"} @AT@ 1721 @LENGTH@ 14
---------INS ArrayInitializer@@{"foo","MZXW6===\r\n"} @TO@ ArrayInitializer@@{{"",""},{"f","MY======\r\n"},{"fo","MZXQ====\r\n"},{"foo","MZXW6===\r\n"},{"foob","MZXW6YQ=\r\n"},{"fooba","MZXW6YTB\r\n"},{"foobar","MZXW6YTBOI======\r\n"}} @AT@ 1746 @LENGTH@ 26
------------INS StringLiteral@@"foo" @TO@ ArrayInitializer@@{"foo","MZXW6===\r\n"} @AT@ 1747 @LENGTH@ 5
------------INS StringLiteral@@"MZXW6===\r\n" @TO@ ArrayInitializer@@{"foo","MZXW6===\r\n"} @AT@ 1757 @LENGTH@ 14
---------INS ArrayInitializer@@{"foob","MZXW6YQ=\r\n"} @TO@ ArrayInitializer@@{{"",""},{"f","MY======\r\n"},{"fo","MZXQ====\r\n"},{"foo","MZXW6===\r\n"},{"foob","MZXW6YQ=\r\n"},{"fooba","MZXW6YTB\r\n"},{"foobar","MZXW6YTBOI======\r\n"}} @AT@ 1782 @LENGTH@ 26
------------INS StringLiteral@@"foob" @TO@ ArrayInitializer@@{"foob","MZXW6YQ=\r\n"} @AT@ 1783 @LENGTH@ 6
------------INS StringLiteral@@"MZXW6YQ=\r\n" @TO@ ArrayInitializer@@{"foob","MZXW6YQ=\r\n"} @AT@ 1793 @LENGTH@ 14
---------INS ArrayInitializer@@{"fooba","MZXW6YTB\r\n"} @TO@ ArrayInitializer@@{{"",""},{"f","MY======\r\n"},{"fo","MZXQ====\r\n"},{"foo","MZXW6===\r\n"},{"foob","MZXW6YQ=\r\n"},{"fooba","MZXW6YTB\r\n"},{"foobar","MZXW6YTBOI======\r\n"}} @AT@ 1818 @LENGTH@ 26
------------INS StringLiteral@@"fooba" @TO@ ArrayInitializer@@{"fooba","MZXW6YTB\r\n"} @AT@ 1819 @LENGTH@ 7
------------INS StringLiteral@@"MZXW6YTB\r\n" @TO@ ArrayInitializer@@{"fooba","MZXW6YTB\r\n"} @AT@ 1829 @LENGTH@ 14
---------INS ArrayInitializer@@{"foobar","MZXW6YTBOI======\r\n"} @TO@ ArrayInitializer@@{{"",""},{"f","MY======\r\n"},{"fo","MZXQ====\r\n"},{"foo","MZXW6===\r\n"},{"foob","MZXW6YQ=\r\n"},{"fooba","MZXW6YTB\r\n"},{"foobar","MZXW6YTBOI======\r\n"}} @AT@ 1854 @LENGTH@ 34
------------INS StringLiteral@@"foobar" @TO@ ArrayInitializer@@{"foobar","MZXW6YTBOI======\r\n"} @AT@ 1855 @LENGTH@ 8
------------INS StringLiteral@@"MZXW6YTBOI======\r\n" @TO@ ArrayInitializer@@{"foobar","MZXW6YTBOI======\r\n"} @AT@ 1865 @LENGTH@ 22


UPD VariableDeclarationStatement@@Collection<String> localBusinessInterfaces=this.getLocalBusinessInterfaces(compositeIndex,sessionBeanClass); @TO@ Collection<String> localBusinessInterfaces=this.getLocalBusinessInterfaces(sessionBeanComponentDescription,compositeIndex,sessionBeanClass); @AT@ 4099 @LENGTH@ 111
---UPD VariableDeclarationFragment@@localBusinessInterfaces=this.getLocalBusinessInterfaces(compositeIndex,sessionBeanClass) @TO@ localBusinessInterfaces=this.getLocalBusinessInterfaces(sessionBeanComponentDescription,compositeIndex,sessionBeanClass) @AT@ 4118 @LENGTH@ 91
------UPD MethodInvocation@@this.getLocalBusinessInterfaces(compositeIndex,sessionBeanClass) @TO@ this.getLocalBusinessInterfaces(sessionBeanComponentDescription,compositeIndex,sessionBeanClass) @AT@ 4144 @LENGTH@ 65
---------UPD SimpleName@@MethodName:getLocalBusinessInterfaces:[compositeIndex, sessionBeanClass] @TO@ MethodName:getLocalBusinessInterfaces:[sessionBeanComponentDescription, compositeIndex, sessionBeanClass] @AT@ 4149 @LENGTH@ 60
------------INS SimpleName@@sessionBeanComponentDescription @TO@ SimpleName@@MethodName:getLocalBusinessInterfaces:[compositeIndex, sessionBeanClass] @AT@ 4176 @LENGTH@ 31


UPD VariableDeclarationStatement@@ObjectName on=ObjectName.getInstance("org.apache.camel:context=localhost/camel-1,type=threadpools,name=myPool"); @TO@ ObjectName on=ObjectName.getInstance("org.apache.camel:context=localhost/camel-1,type=threadpools,name=\"myPool\""); @AT@ 1605 @LENGTH@ 114
---UPD VariableDeclarationFragment@@on=ObjectName.getInstance("org.apache.camel:context=localhost/camel-1,type=threadpools,name=myPool") @TO@ on=ObjectName.getInstance("org.apache.camel:context=localhost/camel-1,type=threadpools,name=\"myPool\"") @AT@ 1616 @LENGTH@ 102
------UPD MethodInvocation@@ObjectName.getInstance("org.apache.camel:context=localhost/camel-1,type=threadpools,name=myPool") @TO@ ObjectName.getInstance("org.apache.camel:context=localhost/camel-1,type=threadpools,name=\"myPool\"") @AT@ 1621 @LENGTH@ 97
---------UPD SimpleName@@MethodName:getInstance:["org.apache.camel:context=localhost/camel-1,type=threadpools,name=myPool"] @TO@ MethodName:getInstance:["org.apache.camel:context=localhost/camel-1,type=threadpools,name=\"myPool\""] @AT@ 1632 @LENGTH@ 86
------------UPD StringLiteral@@"org.apache.camel:context=localhost/camel-1,type=threadpools,name=myPool" @TO@ "org.apache.camel:context=localhost/camel-1,type=threadpools,name=\"myPool\"" @AT@ 1644 @LENGTH@ 73


INS ExpressionStatement@@MethodInvocation:Mailbox.clearAll() @TO@ MethodDeclaration@@public, void, MethodName:testSendAndRecieveMailWithAttachments, Exception,  @AT@ 1551 @LENGTH@ 19
---INS MethodInvocation@@Mailbox.clearAll() @TO@ ExpressionStatement@@MethodInvocation:Mailbox.clearAll() @AT@ 1551 @LENGTH@ 18
------INS SimpleName@@Name:Mailbox @TO@ MethodInvocation@@Mailbox.clearAll() @AT@ 1551 @LENGTH@ 7
------INS SimpleName@@MethodName:clearAll:[] @TO@ MethodInvocation@@Mailbox.clearAll() @AT@ 1559 @LENGTH@ 10


UPD TryStatement@@try {  clazz=Class.forName(className,false,getTccl());} catch (final ClassNotFoundException cnfe) {  throw new RuntimeException("Found .class on ClassPath which could not be found by the TCCL",cnfe);}catch (final NoClassDefFoundError ncdfe) {  log.warnf("Dev Hack Alert: Ignoring class on ClassPath which can't be loaded due to %s while loading %s; " + "configure an exclusion filter so %s is not processed",ncdfe.toString(),className,root);}catch (final SecurityException e) {  log.warnf("Can't load class %s (%s).",className,e.toString());} @TO@ try {  clazz=Class.forName(className,false,getTccl());} catch (final ClassNotFoundException cnfe) {  throw new RuntimeException("Found .class on ClassPath which could not be found by the TCCL",cnfe);}catch (final NoClassDefFoundError ncdfe) {  log.warnf("Dev Hack Alert: Ignoring class on ClassPath which can't be loaded due to %s while loading %s; " + "configure an exclusion filter so %s is not processed",ncdfe.toString(),className,root);}catch (final LinkageError e) {  log.warnf("Dev Hack Alert: Ignoring class on ClassPath which can't be loaded due to %s while loading %s; " + "configure an exclusion filter so %s is not processed",e.toString(),className,root);}catch (final SecurityException e) {  log.warnf("Can't load class %s (%s).",className,e.toString());} @AT@ 13928 @LENGTH@ 874
---INS CatchClause@@catch (final LinkageError e) {  log.warnf("Dev Hack Alert: Ignoring class on ClassPath which can't be loaded due to %s while loading %s; " + "configure an exclusion filter so %s is not processed",e.toString(),className,root);} @TO@ TryStatement@@try {  clazz=Class.forName(className,false,getTccl());} catch (final ClassNotFoundException cnfe) {  throw new RuntimeException("Found .class on ClassPath which could not be found by the TCCL",cnfe);}catch (final NoClassDefFoundError ncdfe) {  log.warnf("Dev Hack Alert: Ignoring class on ClassPath which can't be loaded due to %s while loading %s; " + "configure an exclusion filter so %s is not processed",ncdfe.toString(),className,root);}catch (final SecurityException e) {  log.warnf("Can't load class %s (%s).",className,e.toString());} @AT@ 14664 @LENGTH@ 500
------INS SingleVariableDeclaration@@final LinkageError e @TO@ CatchClause@@catch (final LinkageError e) {  log.warnf("Dev Hack Alert: Ignoring class on ClassPath which can't be loaded due to %s while loading %s; " + "configure an exclusion filter so %s is not processed",e.toString(),className,root);} @AT@ 14671 @LENGTH@ 20
---------INS Modifier@@final @TO@ SingleVariableDeclaration@@final LinkageError e @AT@ 14671 @LENGTH@ 5
---------INS SimpleType@@LinkageError @TO@ SingleVariableDeclaration@@final LinkageError e @AT@ 14677 @LENGTH@ 12
---------INS SimpleName@@e @TO@ SingleVariableDeclaration@@final LinkageError e @AT@ 14690 @LENGTH@ 1
------INS ExpressionStatement@@MethodInvocation:log.warnf("Dev Hack Alert: Ignoring class on ClassPath which can't be loaded due to %s while loading %s; " + "configure an exclusion filter so %s is not processed",e.toString(),className,root) @TO@ CatchClause@@catch (final LinkageError e) {  log.warnf("Dev Hack Alert: Ignoring class on ClassPath which can't be loaded due to %s while loading %s; " + "configure an exclusion filter so %s is not processed",e.toString(),className,root);} @AT@ 14885 @LENGTH@ 261
---------INS MethodInvocation@@log.warnf("Dev Hack Alert: Ignoring class on ClassPath which can't be loaded due to %s while loading %s; " + "configure an exclusion filter so %s is not processed",e.toString(),className,root) @TO@ ExpressionStatement@@MethodInvocation:log.warnf("Dev Hack Alert: Ignoring class on ClassPath which can't be loaded due to %s while loading %s; " + "configure an exclusion filter so %s is not processed",e.toString(),className,root) @AT@ 14885 @LENGTH@ 260
------------INS SimpleName@@Name:log @TO@ MethodInvocation@@log.warnf("Dev Hack Alert: Ignoring class on ClassPath which can't be loaded due to %s while loading %s; " + "configure an exclusion filter so %s is not processed",e.toString(),className,root) @AT@ 14885 @LENGTH@ 3
------------INS SimpleName@@MethodName:warnf:["Dev Hack Alert: Ignoring class on ClassPath which can't be loaded due to %s while loading %s; " + "configure an exclusion filter so %s is not processed", e.toString(), className, root] @TO@ MethodInvocation@@log.warnf("Dev Hack Alert: Ignoring class on ClassPath which can't be loaded due to %s while loading %s; " + "configure an exclusion filter so %s is not processed",e.toString(),className,root) @AT@ 14889 @LENGTH@ 256
---------------INS InfixExpression@@"Dev Hack Alert: Ignoring class on ClassPath which can't be loaded due to %s while loading %s; " + "configure an exclusion filter so %s is not processed" @TO@ SimpleName@@MethodName:warnf:["Dev Hack Alert: Ignoring class on ClassPath which can't be loaded due to %s while loading %s; " + "configure an exclusion filter so %s is not processed", e.toString(), className, root] @AT@ 14924 @LENGTH@ 189
------------------INS StringLiteral@@"Dev Hack Alert: Ignoring class on ClassPath which can't be loaded due to %s while loading %s; " @TO@ InfixExpression@@"Dev Hack Alert: Ignoring class on ClassPath which can't be loaded due to %s while loading %s; " + "configure an exclusion filter so %s is not processed" @AT@ 14924 @LENGTH@ 96
------------------INS Operator@@+ @TO@ InfixExpression@@"Dev Hack Alert: Ignoring class on ClassPath which can't be loaded due to %s while loading %s; " + "configure an exclusion filter so %s is not processed" @AT@ 15020 @LENGTH@ 1
------------------INS StringLiteral@@"configure an exclusion filter so %s is not processed" @TO@ InfixExpression@@"Dev Hack Alert: Ignoring class on ClassPath which can't be loaded due to %s while loading %s; " + "configure an exclusion filter so %s is not processed" @AT@ 15059 @LENGTH@ 54
---------------INS MethodInvocation@@e.toString() @TO@ SimpleName@@MethodName:warnf:["Dev Hack Alert: Ignoring class on ClassPath which can't be loaded due to %s while loading %s; " + "configure an exclusion filter so %s is not processed", e.toString(), className, root] @AT@ 15115 @LENGTH@ 12
------------------INS SimpleName@@Name:e @TO@ MethodInvocation@@e.toString() @AT@ 15115 @LENGTH@ 1
------------------INS SimpleName@@MethodName:toString:[] @TO@ MethodInvocation@@e.toString() @AT@ 15117 @LENGTH@ 10
---------------INS SimpleName@@className @TO@ SimpleName@@MethodName:warnf:["Dev Hack Alert: Ignoring class on ClassPath which can't be loaded due to %s while loading %s; " + "configure an exclusion filter so %s is not processed", e.toString(), className, root] @AT@ 15129 @LENGTH@ 9
---------------INS SimpleName@@root @TO@ SimpleName@@MethodName:warnf:["Dev Hack Alert: Ignoring class on ClassPath which can't be loaded due to %s while loading %s; " + "configure an exclusion filter so %s is not processed", e.toString(), className, root] @AT@ 15140 @LENGTH@ 4


UPD FieldDeclaration@@private, final, Map<ServiceName,StartException>, [startExceptions=new IdentityHashMap<ServiceName,StartException>()] @TO@ private, final, Map<ServiceName,StartException>, [startExceptions=Collections.synchronizedMap(new HashMap<ServiceName,StartException>())] @AT@ 5532 @LENGTH@ 116
---UPD VariableDeclarationFragment@@startExceptions=new IdentityHashMap<ServiceName,StartException>() @TO@ startExceptions=Collections.synchronizedMap(new HashMap<ServiceName,StartException>()) @AT@ 5579 @LENGTH@ 68
------DEL ClassInstanceCreation@@IdentityHashMap<ServiceName,StartException>[] @AT@ 5597 @LENGTH@ 50
------INS MethodInvocation@@Collections.synchronizedMap(new HashMap<ServiceName,StartException>()) @TO@ VariableDeclarationFragment@@startExceptions=new IdentityHashMap<ServiceName,StartException>() @AT@ 5653 @LENGTH@ 71
---------INS SimpleName@@Name:Collections @TO@ MethodInvocation@@Collections.synchronizedMap(new HashMap<ServiceName,StartException>()) @AT@ 5653 @LENGTH@ 11
---------INS SimpleName@@MethodName:synchronizedMap:[new HashMap<ServiceName,StartException>()] @TO@ MethodInvocation@@Collections.synchronizedMap(new HashMap<ServiceName,StartException>()) @AT@ 5665 @LENGTH@ 59
------------INS ClassInstanceCreation@@HashMap<ServiceName,StartException>[] @TO@ SimpleName@@MethodName:synchronizedMap:[new HashMap<ServiceName,StartException>()] @AT@ 5681 @LENGTH@ 42
---------------MOV New@@new @TO@ ClassInstanceCreation@@HashMap<ServiceName,StartException>[] @AT@ 5597 @LENGTH@ 3
---------------MOV ParameterizedType@@IdentityHashMap<ServiceName,StartException> @TO@ ClassInstanceCreation@@HashMap<ServiceName,StartException>[] @AT@ 5601 @LENGTH@ 44
------------------UPD SimpleType@@IdentityHashMap @TO@ HashMap @AT@ 5601 @LENGTH@ 15


DEL MethodDeclaration@@public, List<BindingConfiguration>, MethodName:getBindingConfigurations,  @AT@ 4861 @LENGTH@ 106
---DEL Modifier@@public @AT@ 4861 @LENGTH@ 6
---DEL ParameterizedType@@List<BindingConfiguration> @AT@ 4868 @LENGTH@ 26
------DEL SimpleType@@List @AT@ 4868 @LENGTH@ 4
------DEL SimpleType@@BindingConfiguration @AT@ 4873 @LENGTH@ 20
---DEL SimpleName@@MethodName:getBindingConfigurations @AT@ 4895 @LENGTH@ 24
---DEL ReturnStatement@@SimpleName:bindingConfigurations @AT@ 4932 @LENGTH@ 29
------DEL SimpleName@@bindingConfigurations @AT@ 4939 @LENGTH@ 21


INS TryStatement@@try {  uri=exchange.getContext().resolvePropertyPlaceholders(uri);} catch (Exception e) {  throw new RuntimeExchangeException("Cannot resolve property placeholders with uri: " + uri,exchange,e);} @TO@ MethodDeclaration@@public, static, String, MethodName:createURL, Exchange exchange, HttpEndpoint endpoint,  @AT@ 5932 @LENGTH@ 239
---INS ExpressionStatement@@Assignment:uri=exchange.getContext().resolvePropertyPlaceholders(uri) @TO@ TryStatement@@try {  uri=exchange.getContext().resolvePropertyPlaceholders(uri);} catch (Exception e) {  throw new RuntimeExchangeException("Cannot resolve property placeholders with uri: " + uri,exchange,e);} @AT@ 5950 @LENGTH@ 61
------INS Assignment@@uri=exchange.getContext().resolvePropertyPlaceholders(uri) @TO@ ExpressionStatement@@Assignment:uri=exchange.getContext().resolvePropertyPlaceholders(uri) @AT@ 5950 @LENGTH@ 60
---------INS SimpleName@@uri @TO@ Assignment@@uri=exchange.getContext().resolvePropertyPlaceholders(uri) @AT@ 5950 @LENGTH@ 3
---------INS Operator@@= @TO@ Assignment@@uri=exchange.getContext().resolvePropertyPlaceholders(uri) @AT@ 5953 @LENGTH@ 1
---------INS MethodInvocation@@exchange.getContext().resolvePropertyPlaceholders(uri) @TO@ Assignment@@uri=exchange.getContext().resolvePropertyPlaceholders(uri) @AT@ 5956 @LENGTH@ 54
------------INS MethodInvocation@@MethodName:getContext:[] @TO@ MethodInvocation@@exchange.getContext().resolvePropertyPlaceholders(uri) @AT@ 5956 @LENGTH@ 21
------------INS SimpleName@@Name:exchange @TO@ MethodInvocation@@exchange.getContext().resolvePropertyPlaceholders(uri) @AT@ 5956 @LENGTH@ 8
------------INS SimpleName@@MethodName:resolvePropertyPlaceholders:[uri] @TO@ MethodInvocation@@exchange.getContext().resolvePropertyPlaceholders(uri) @AT@ 5978 @LENGTH@ 32
---------------INS SimpleName@@uri @TO@ SimpleName@@MethodName:resolvePropertyPlaceholders:[uri] @AT@ 6006 @LENGTH@ 3
---INS CatchClause@@catch (Exception e) {  throw new RuntimeExchangeException("Cannot resolve property placeholders with uri: " + uri,exchange,e);} @TO@ TryStatement@@try {  uri=exchange.getContext().resolvePropertyPlaceholders(uri);} catch (Exception e) {  throw new RuntimeExchangeException("Cannot resolve property placeholders with uri: " + uri,exchange,e);} @AT@ 6022 @LENGTH@ 149
------INS SingleVariableDeclaration@@Exception e @TO@ CatchClause@@catch (Exception e) {  throw new RuntimeExchangeException("Cannot resolve property placeholders with uri: " + uri,exchange,e);} @AT@ 6029 @LENGTH@ 11
---------INS SimpleType@@Exception @TO@ SingleVariableDeclaration@@Exception e @AT@ 6029 @LENGTH@ 9
---------INS SimpleName@@e @TO@ SingleVariableDeclaration@@Exception e @AT@ 6039 @LENGTH@ 1
------INS ThrowStatement@@ClassInstanceCreation:new RuntimeExchangeException("Cannot resolve property placeholders with uri: " + uri,exchange,e) @TO@ CatchClause@@catch (Exception e) {  throw new RuntimeExchangeException("Cannot resolve property placeholders with uri: " + uri,exchange,e);} @AT@ 6056 @LENGTH@ 105
---------INS ClassInstanceCreation@@RuntimeExchangeException["Cannot resolve property placeholders with uri: " + uri, exchange, e] @TO@ ThrowStatement@@ClassInstanceCreation:new RuntimeExchangeException("Cannot resolve property placeholders with uri: " + uri,exchange,e) @AT@ 6062 @LENGTH@ 98
------------INS New@@new @TO@ ClassInstanceCreation@@RuntimeExchangeException["Cannot resolve property placeholders with uri: " + uri, exchange, e] @AT@ 6062 @LENGTH@ 3
------------INS SimpleType@@RuntimeExchangeException @TO@ ClassInstanceCreation@@RuntimeExchangeException["Cannot resolve property placeholders with uri: " + uri, exchange, e] @AT@ 6066 @LENGTH@ 24
------------INS InfixExpression@@"Cannot resolve property placeholders with uri: " + uri @TO@ ClassInstanceCreation@@RuntimeExchangeException["Cannot resolve property placeholders with uri: " + uri, exchange, e] @AT@ 6091 @LENGTH@ 55
---------------INS StringLiteral@@"Cannot resolve property placeholders with uri: " @TO@ InfixExpression@@"Cannot resolve property placeholders with uri: " + uri @AT@ 6091 @LENGTH@ 49
---------------INS Operator@@+ @TO@ InfixExpression@@"Cannot resolve property placeholders with uri: " + uri @AT@ 6140 @LENGTH@ 1
---------------INS SimpleName@@uri @TO@ InfixExpression@@"Cannot resolve property placeholders with uri: " + uri @AT@ 6143 @LENGTH@ 3
------------INS SimpleName@@exchange @TO@ ClassInstanceCreation@@RuntimeExchangeException["Cannot resolve property placeholders with uri: " + uri, exchange, e] @AT@ 6148 @LENGTH@ 8
------------INS SimpleName@@e @TO@ ClassInstanceCreation@@RuntimeExchangeException["Cannot resolve property placeholders with uri: " + uri, exchange, e] @AT@ 6158 @LENGTH@ 1


DEL ExpressionStatement@@Assignment:key=ServerEnvironment.SERVER_SYSTEM_DEPLOY_DIR @AT@ 22821 @LENGTH@ 49
---DEL Assignment@@key=ServerEnvironment.SERVER_SYSTEM_DEPLOY_DIR @AT@ 22821 @LENGTH@ 48
------DEL SimpleName@@key @AT@ 22821 @LENGTH@ 3
------DEL Operator@@= @AT@ 22824 @LENGTH@ 1
------DEL QualifiedName@@ServerEnvironment.SERVER_SYSTEM_DEPLOY_DIR @AT@ 22827 @LENGTH@ 42
---------DEL SimpleName@@ServerEnvironment @AT@ 22827 @LENGTH@ 17
---------DEL SimpleName@@SERVER_SYSTEM_DEPLOY_DIR @AT@ 22845 @LENGTH@ 24


UPD MethodDeclaration@@byte[], MethodName:getRange, byte[] key, int begin, int end,  @TO@ byte[], MethodName:getRange, byte[] key, long begin, long end,  @AT@ 1358 @LENGTH@ 41
---UPD SingleVariableDeclaration@@int begin @TO@ long begin @AT@ 1379 @LENGTH@ 9
------UPD PrimitiveType@@int @TO@ long @AT@ 1379 @LENGTH@ 3
---UPD SingleVariableDeclaration@@int end @TO@ long end @AT@ 1390 @LENGTH@ 7
------UPD PrimitiveType@@int @TO@ long @AT@ 1390 @LENGTH@ 3


INS MethodDeclaration@@public, String, MethodName:toString,  @TO@ TypeDeclaration@@[public]OperationFailedException, Exception @AT@ 3533 @LENGTH@ 101
---INS Modifier@@public @TO@ MethodDeclaration@@public, String, MethodName:toString,  @AT@ 3533 @LENGTH@ 6
---INS SimpleType@@String @TO@ MethodDeclaration@@public, String, MethodName:toString,  @AT@ 3540 @LENGTH@ 6
---INS SimpleName@@MethodName:toString @TO@ MethodDeclaration@@public, String, MethodName:toString,  @AT@ 3547 @LENGTH@ 8
---INS ReturnStatement@@InfixExpression:super.toString() + " [ " + failureDescription+ " ]" @TO@ MethodDeclaration@@public, String, MethodName:toString,  @AT@ 3568 @LENGTH@ 60
------INS InfixExpression@@super.toString() + " [ " + failureDescription+ " ]" @TO@ ReturnStatement@@InfixExpression:super.toString() + " [ " + failureDescription+ " ]" @AT@ 3575 @LENGTH@ 52
---------INS SuperMethodInvocation@@super.toString() @TO@ InfixExpression@@super.toString() + " [ " + failureDescription+ " ]" @AT@ 3575 @LENGTH@ 16
------------INS SimpleName@@MethodName:toString:[] @TO@ SuperMethodInvocation@@super.toString() @AT@ 3581 @LENGTH@ 8
---------INS Operator@@+ @TO@ InfixExpression@@super.toString() + " [ " + failureDescription+ " ]" @AT@ 3591 @LENGTH@ 1
---------INS StringLiteral@@" [ " @TO@ InfixExpression@@super.toString() + " [ " + failureDescription+ " ]" @AT@ 3594 @LENGTH@ 5
---------INS SimpleName@@failureDescription @TO@ InfixExpression@@super.toString() + " [ " + failureDescription+ " ]" @AT@ 3602 @LENGTH@ 18
---------INS StringLiteral@@" ]" @TO@ InfixExpression@@super.toString() + " [ " + failureDescription+ " ]" @AT@ 3623 @LENGTH@ 4


UPD MethodDeclaration@@public, String, MethodName:home, Model model,  @TO@ public, String, MethodName:home, Principal user, Model model,  @AT@ 1474 @LENGTH@ 569
---UPD VariableDeclarationStatement@@List<ServiceProviderConnection<TwitterOperations>> connections=twitterProvider.getConnections(1); @TO@ List<ServiceProviderConnection<TwitterOperations>> connections=twitterProvider.getConnections(user.getName()); @AT@ 1510 @LENGTH@ 99
------UPD VariableDeclarationFragment@@connections=twitterProvider.getConnections(1) @TO@ connections=twitterProvider.getConnections(user.getName()) @AT@ 1561 @LENGTH@ 47
---------UPD MethodInvocation@@twitterProvider.getConnections(1) @TO@ twitterProvider.getConnections(user.getName()) @AT@ 1575 @LENGTH@ 33
------------UPD SimpleName@@MethodName:getConnections:[1] @TO@ MethodName:getConnections:[user.getName()] @AT@ 1591 @LENGTH@ 17
---------------DEL NumberLiteral@@1 @AT@ 1606 @LENGTH@ 1
---------------INS MethodInvocation@@user.getName() @TO@ SimpleName@@MethodName:getConnections:[1] @AT@ 1654 @LENGTH@ 14
------------------INS SimpleName@@Name:user @TO@ MethodInvocation@@user.getName() @AT@ 1654 @LENGTH@ 4
------------------INS SimpleName@@MethodName:getName:[] @TO@ MethodInvocation@@user.getName() @AT@ 1659 @LENGTH@ 9
---INS SingleVariableDeclaration@@Principal user @TO@ MethodDeclaration@@public, String, MethodName:home, Model model,  @AT@ 1525 @LENGTH@ 14
------INS SimpleType@@Principal @TO@ SingleVariableDeclaration@@Principal user @AT@ 1525 @LENGTH@ 9
------INS SimpleName@@user @TO@ SingleVariableDeclaration@@Principal user @AT@ 1535 @LENGTH@ 4
---UPD IfStatement@@if (connections.size() > 0) {  model.addAttribute("connections",connectionNames);  model.addAttribute(new TweetForm());  return "twitter";} @TO@ if (connections.size() > 0) {  model.addAttribute("connections",connectionNames);  model.addAttribute(new TweetForm());  return "twitter/twitter";} @AT@ 1852 @LENGTH@ 149
------UPD Block@@ThenBody:{  model.addAttribute("connections",connectionNames);  model.addAttribute(new TweetForm());  return "twitter";} @TO@ ThenBody:{  model.addAttribute("connections",connectionNames);  model.addAttribute(new TweetForm());  return "twitter/twitter";} @AT@ 1880 @LENGTH@ 121
---------UPD ReturnStatement@@StringLiteral:"twitter" @TO@ StringLiteral:"twitter/twitter" @AT@ 1980 @LENGTH@ 17
------------UPD StringLiteral@@"twitter" @TO@ "twitter/twitter" @AT@ 1987 @LENGTH@ 9


UPD MethodDeclaration@@public, boolean, MethodName:canAppearNext, CommandContext ctx,  @TO@ public, boolean, MethodName:canAppearNext, CommandContext ctx, CommandFormatException,  @AT@ 2293 @LENGTH@ 207
---INS SimpleType@@CommandFormatException @TO@ MethodDeclaration@@public, boolean, MethodName:canAppearNext, CommandContext ctx,  @AT@ 2349 @LENGTH@ 22


INS MethodDeclaration@@public, String, MethodName:getRef,  @TO@ TypeDeclaration@@[@XmlRootElement(name="throwException"), @XmlAccessorType(XmlAccessType.FIELD), public]ThrowExceptionDefinition, NoOutputDefinition<ThrowExceptionDefinition> @AT@ 2338 @LENGTH@ 50
---INS Modifier@@public @TO@ MethodDeclaration@@public, String, MethodName:getRef,  @AT@ 2338 @LENGTH@ 6
---INS SimpleType@@String @TO@ MethodDeclaration@@public, String, MethodName:getRef,  @AT@ 2345 @LENGTH@ 6
---INS SimpleName@@MethodName:getRef @TO@ MethodDeclaration@@public, String, MethodName:getRef,  @AT@ 2352 @LENGTH@ 6
---INS ReturnStatement@@SimpleName:ref @TO@ MethodDeclaration@@public, String, MethodName:getRef,  @AT@ 2371 @LENGTH@ 11
------INS SimpleName@@ref @TO@ ReturnStatement@@SimpleName:ref @AT@ 2378 @LENGTH@ 3


INS MethodDeclaration@@public, boolean, MethodName:hasAttachment, AttachmentKey<?> key,  @TO@ TypeDeclaration@@[public]SimpleAttachable, [Attachable] @AT@ 1491 @LENGTH@ 166
---INS Modifier@@public @TO@ MethodDeclaration@@public, boolean, MethodName:hasAttachment, AttachmentKey<?> key,  @AT@ 1491 @LENGTH@ 6
---INS PrimitiveType@@boolean @TO@ MethodDeclaration@@public, boolean, MethodName:hasAttachment, AttachmentKey<?> key,  @AT@ 1498 @LENGTH@ 7
---INS SimpleName@@MethodName:hasAttachment @TO@ MethodDeclaration@@public, boolean, MethodName:hasAttachment, AttachmentKey<?> key,  @AT@ 1506 @LENGTH@ 13
---INS SingleVariableDeclaration@@AttachmentKey<?> key @TO@ MethodDeclaration@@public, boolean, MethodName:hasAttachment, AttachmentKey<?> key,  @AT@ 1520 @LENGTH@ 20
------INS ParameterizedType@@AttachmentKey<?> @TO@ SingleVariableDeclaration@@AttachmentKey<?> key @AT@ 1520 @LENGTH@ 16
---------INS SimpleType@@AttachmentKey @TO@ ParameterizedType@@AttachmentKey<?> @AT@ 1520 @LENGTH@ 13
---------INS WildcardType@@? @TO@ ParameterizedType@@AttachmentKey<?> @AT@ 1534 @LENGTH@ 1
------INS SimpleName@@key @TO@ SingleVariableDeclaration@@AttachmentKey<?> key @AT@ 1537 @LENGTH@ 3
---INS IfStatement@@if (key == null) {  return false;} @TO@ MethodDeclaration@@public, boolean, MethodName:hasAttachment, AttachmentKey<?> key,  @AT@ 1552 @LENGTH@ 54
------INS InfixExpression@@key == null @TO@ IfStatement@@if (key == null) {  return false;} @AT@ 1556 @LENGTH@ 11
---------INS SimpleName@@key @TO@ InfixExpression@@key == null @AT@ 1556 @LENGTH@ 3
---------INS Operator@@== @TO@ InfixExpression@@key == null @AT@ 1559 @LENGTH@ 2
---------INS NullLiteral@@null @TO@ InfixExpression@@key == null @AT@ 1563 @LENGTH@ 4
------INS Block@@ThenBody:{  return false;} @TO@ IfStatement@@if (key == null) {  return false;} @AT@ 1569 @LENGTH@ 37
---------INS ReturnStatement@@BooleanLiteral:false @TO@ Block@@ThenBody:{  return false;} @AT@ 1583 @LENGTH@ 13
------------INS BooleanLiteral@@false @TO@ ReturnStatement@@BooleanLiteral:false @AT@ 1590 @LENGTH@ 5
---INS ReturnStatement@@MethodInvocation:attachments.containsKey(key) @TO@ MethodDeclaration@@public, boolean, MethodName:hasAttachment, AttachmentKey<?> key,  @AT@ 1615 @LENGTH@ 36
------INS MethodInvocation@@attachments.containsKey(key) @TO@ ReturnStatement@@MethodInvocation:attachments.containsKey(key) @AT@ 1622 @LENGTH@ 28
---------INS SimpleName@@Name:attachments @TO@ MethodInvocation@@attachments.containsKey(key) @AT@ 1622 @LENGTH@ 11
---------INS SimpleName@@MethodName:containsKey:[key] @TO@ MethodInvocation@@attachments.containsKey(key) @AT@ 1634 @LENGTH@ 16
------------INS SimpleName@@key @TO@ SimpleName@@MethodName:containsKey:[key] @AT@ 1646 @LENGTH@ 3


UPD MethodDeclaration@@public, boolean, MethodName:canAppearNext, CommandContext ctx,  @TO@ public, boolean, MethodName:canAppearNext, CommandContext ctx, CommandFormatException,  @AT@ 3995 @LENGTH@ 207
---INS SimpleType@@CommandFormatException @TO@ MethodDeclaration@@public, boolean, MethodName:canAppearNext, CommandContext ctx,  @AT@ 4051 @LENGTH@ 22


UPD MethodDeclaration@@protected, ExecutorService, MethodName:createAggregateExecutorService, String name,  @TO@ protected, synchronized, ExecutorService, MethodName:createAggregateExecutorService, String name,  @AT@ 4608 @LENGTH@ 408
---INS Modifier@@synchronized @TO@ MethodDeclaration@@protected, ExecutorService, MethodName:createAggregateExecutorService, String name,  @AT@ 4618 @LENGTH@ 12


UPD ExpressionStatement@@MethodInvocation:LOG.debug("Looking up named query %s",queryName) @TO@ MethodInvocation:LOG.debug("Looking up named query {}",queryName) @AT@ 2224 @LENGTH@ 50
---UPD MethodInvocation@@LOG.debug("Looking up named query %s",queryName) @TO@ LOG.debug("Looking up named query {}",queryName) @AT@ 2224 @LENGTH@ 49
------UPD SimpleName@@MethodName:debug:["Looking up named query %s", queryName] @TO@ MethodName:debug:["Looking up named query {}", queryName] @AT@ 2228 @LENGTH@ 45
---------UPD StringLiteral@@"Looking up named query %s" @TO@ "Looking up named query {}" @AT@ 2234 @LENGTH@ 27


UPD EnhancedForStatement@@for (AnnotationInstance annotation : excludeDefaultAnnotations) {  final AnnotationTarget target=annotation.target();  if (target instanceof MethodInfo) {    final MethodInfo methodInfo=MethodInfo.class.cast(target);    final MethodIdentifier methodIdentifier=methodIdentifierFromMethodInfo(methodInfo);    componentConfiguration.excludeClassInterceptors(methodIdentifier);  } else {    throw new DeploymentUnitProcessingException("ExcludeClassInterceptors not applied to method: " + target);  }} @TO@ for (AnnotationInstance annotation : excludeClassAnnotations) {  final AnnotationTarget target=annotation.target();  if (target instanceof MethodInfo) {    final MethodInfo methodInfo=MethodInfo.class.cast(target);    final MethodIdentifier methodIdentifier=methodIdentifierFromMethodInfo(methodInfo);    componentConfiguration.excludeClassInterceptors(methodIdentifier);  } else {    throw new DeploymentUnitProcessingException("ExcludeClassInterceptors not applied to method: " + target);  }} @AT@ 5216 @LENGTH@ 642
---UPD SimpleName@@excludeDefaultAnnotations @TO@ excludeClassAnnotations @AT@ 5252 @LENGTH@ 25


UPD IfStatement@@if (annotation.value() != Object.class) ref.setServiceInterface(annotation.value().getName()); @TO@ if (annotation.value() != Object.class && annotation.value() != Service.class) ref.setServiceInterface(annotation.value().getName()); @AT@ 4488 @LENGTH@ 102
---INS InfixExpression@@annotation.value() != Object.class && annotation.value() != Service.class @TO@ IfStatement@@if (annotation.value() != Object.class) ref.setServiceInterface(annotation.value().getName()); @AT@ 4520 @LENGTH@ 73
------MOV InfixExpression@@annotation.value() != Object.class @TO@ InfixExpression@@annotation.value() != Object.class && annotation.value() != Service.class @AT@ 4491 @LENGTH@ 34
------INS Operator@@&& @TO@ InfixExpression@@annotation.value() != Object.class && annotation.value() != Service.class @AT@ 4554 @LENGTH@ 2
------INS InfixExpression@@annotation.value() != Service.class @TO@ InfixExpression@@annotation.value() != Object.class && annotation.value() != Service.class @AT@ 4558 @LENGTH@ 35
---------INS MethodInvocation@@annotation.value() @TO@ InfixExpression@@annotation.value() != Service.class @AT@ 4558 @LENGTH@ 18
------------INS SimpleName@@Name:annotation @TO@ MethodInvocation@@annotation.value() @AT@ 4558 @LENGTH@ 10
------------INS SimpleName@@MethodName:value:[] @TO@ MethodInvocation@@annotation.value() @AT@ 4569 @LENGTH@ 7
---------INS Operator@@!= @TO@ InfixExpression@@annotation.value() != Service.class @AT@ 4576 @LENGTH@ 2
---------INS TypeLiteral@@Service.class @TO@ InfixExpression@@annotation.value() != Service.class @AT@ 4580 @LENGTH@ 13


UPD IfStatement@@if (value != bean) {  bean=value;  processor=null;  if (!ObjectHelper.equal(ObjectHelper.type(bean),ObjectHelper.type(value))) {    beanInfo=null;  }  if (bean instanceof Class) {    bean=context.getInjector().newInstance((Class<?>)bean);    value=bean;  }} @TO@ if (value != bean) {  if (!ObjectHelper.equal(ObjectHelper.type(bean),ObjectHelper.type(value))) {    beanInfo=null;  }  bean=value;  processor=null;  if (bean instanceof Class) {    bean=context.getInjector().newInstance((Class<?>)bean);    value=bean;  }} @AT@ 2539 @LENGTH@ 508
---UPD Block@@ThenBody:{  bean=value;  processor=null;  if (!ObjectHelper.equal(ObjectHelper.type(bean),ObjectHelper.type(value))) {    beanInfo=null;  }  if (bean instanceof Class) {    bean=context.getInjector().newInstance((Class<?>)bean);    value=bean;  }} @TO@ ThenBody:{  if (!ObjectHelper.equal(ObjectHelper.type(bean),ObjectHelper.type(value))) {    beanInfo=null;  }  bean=value;  processor=null;  if (bean instanceof Class) {    bean=context.getInjector().newInstance((Class<?>)bean);    value=bean;  }} @AT@ 2558 @LENGTH@ 489
------MOV IfStatement@@if (!ObjectHelper.equal(ObjectHelper.type(bean),ObjectHelper.type(value))) {  beanInfo=null;} @TO@ Block@@ThenBody:{  bean=value;  processor=null;  if (!ObjectHelper.equal(ObjectHelper.type(bean),ObjectHelper.type(value))) {    beanInfo=null;  }  if (bean instanceof Class) {    bean=context.getInjector().newInstance((Class<?>)bean);    value=bean;  }} @AT@ 2628 @LENGTH@ 124


UPD IfStatement@@if (zooKeeper.exists(domainsPath) != null) {  for (  String child : zooKeeper.getChildren(domainsPath)) {    zooKeeper.delete(domainsPath + "/" + child);  }} @TO@ if (zooKeeper.exists(domainsPath) != null) {  zooKeeper.deleteWithChildren(domainsPath);} @AT@ 7923 @LENGTH@ 215
---UPD Block@@ThenBody:{  for (  String child : zooKeeper.getChildren(domainsPath)) {    zooKeeper.delete(domainsPath + "/" + child);  }} @TO@ ThenBody:{  zooKeeper.deleteWithChildren(domainsPath);} @AT@ 7966 @LENGTH@ 172
------DEL EnhancedForStatement@@for (String child : zooKeeper.getChildren(domainsPath)) {  zooKeeper.delete(domainsPath + "/" + child);} @AT@ 7984 @LENGTH@ 140
---------DEL SingleVariableDeclaration@@String child @AT@ 7989 @LENGTH@ 12
------------DEL SimpleType@@String @AT@ 7989 @LENGTH@ 6
------------DEL SimpleName@@child @AT@ 7996 @LENGTH@ 5
---------DEL MethodInvocation@@zooKeeper.getChildren(domainsPath) @AT@ 8004 @LENGTH@ 34
------------DEL SimpleName@@Name:zooKeeper @AT@ 8004 @LENGTH@ 9
------------DEL SimpleName@@MethodName:getChildren:[domainsPath] @AT@ 8014 @LENGTH@ 24
---------------DEL SimpleName@@domainsPath @AT@ 8026 @LENGTH@ 11
---------DEL ExpressionStatement@@MethodInvocation:zooKeeper.delete(domainsPath + "/" + child) @AT@ 8062 @LENGTH@ 44
------INS ExpressionStatement@@MethodInvocation:zooKeeper.deleteWithChildren(domainsPath) @TO@ Block@@ThenBody:{  for (  String child : zooKeeper.getChildren(domainsPath)) {    zooKeeper.delete(domainsPath + "/" + child);  }} @AT@ 7984 @LENGTH@ 42
---------MOV MethodInvocation@@zooKeeper.delete(domainsPath + "/" + child) @TO@ ExpressionStatement@@MethodInvocation:zooKeeper.deleteWithChildren(domainsPath) @AT@ 8062 @LENGTH@ 43


UPD Block@@ThenBody:{  velocityEngine=new VelocityEngine();  Properties properties=new Properties();  if (ObjectHelper.isNotEmpty(getPropertiesFile())) {    Resource resource=getResourceLoader().getResource(getPropertiesFile());    InputStream reader=resource.getInputStream();    properties.load(reader);    log.info("Loaded the velocity configuration file " + getPropertiesFile());  }  properties.setProperty(Velocity.FILE_RESOURCE_LOADER_CACHE,isLoaderCache() ? "true" : "false");  properties.setProperty(Velocity.RESOURCE_LOADER,"file, class");  properties.setProperty("class.resource.loader.description","Velocity Classpath Resource Loader");  properties.setProperty("class.resource.loader.class","org.apache.velocity.runtime.resource.loader.ClasspathResourceLoader");  properties.setProperty(Velocity.RUNTIME_LOG_LOGSYSTEM_CLASS,CommonsLogLogChute.class.getName());  properties.setProperty(CommonsLogLogChute.LOGCHUTE_COMMONS_LOG_NAME,VelocityEndpoint.class.getName());  velocityEngine.init(properties);} @TO@ ThenBody:{  velocityEngine=new VelocityEngine();  Properties properties=new Properties();  if (ObjectHelper.isNotEmpty(getPropertiesFile())) {    Resource resource=getResourceLoader().getResource(getPropertiesFile());    InputStream reader=resource.getInputStream();    properties.load(reader);    log.info("Loaded the velocity configuration file " + getPropertiesFile());  }  velocityEngine.addProperty("CamelClassResolver",getCamelContext().getClassResolver());  properties.setProperty(Velocity.FILE_RESOURCE_LOADER_CACHE,isLoaderCache() ? "true" : "false");  properties.setProperty(Velocity.RESOURCE_LOADER,"file, class");  properties.setProperty("class.resource.loader.description","Camel Velocity Classpath Resource Loader");  properties.setProperty("class.resource.loader.class",CamelVelocityClasspathResourceLoader.class.getName());  properties.setProperty(Velocity.RUNTIME_LOG_LOGSYSTEM_CLASS,CommonsLogLogChute.class.getName());  properties.setProperty(CommonsLogLogChute.LOGCHUTE_COMMONS_LOG_NAME,VelocityEndpoint.class.getName());  log.debug("Initializing VelocityEngine with properties {}",properties);  velocityEngine.init(properties);} @AT@ 2437 @LENGTH@ 1251
---INS ExpressionStatement@@MethodInvocation:velocityEngine.addProperty("CamelClassResolver",getCamelContext().getClassResolver()) @TO@ Block@@ThenBody:{  velocityEngine=new VelocityEngine();  Properties properties=new Properties();  if (ObjectHelper.isNotEmpty(getPropertiesFile())) {    Resource resource=getResourceLoader().getResource(getPropertiesFile());    InputStream reader=resource.getInputStream();    properties.load(reader);    log.info("Loaded the velocity configuration file " + getPropertiesFile());  }  properties.setProperty(Velocity.FILE_RESOURCE_LOADER_CACHE,isLoaderCache() ? "true" : "false");  properties.setProperty(Velocity.RESOURCE_LOADER,"file, class");  properties.setProperty("class.resource.loader.description","Velocity Classpath Resource Loader");  properties.setProperty("class.resource.loader.class","org.apache.velocity.runtime.resource.loader.ClasspathResourceLoader");  properties.setProperty(Velocity.RUNTIME_LOG_LOGSYSTEM_CLASS,CommonsLogLogChute.class.getName());  properties.setProperty(CommonsLogLogChute.LOGCHUTE_COMMONS_LOG_NAME,VelocityEndpoint.class.getName());  velocityEngine.init(properties);} @AT@ 3098 @LENGTH@ 87
------INS MethodInvocation@@velocityEngine.addProperty("CamelClassResolver",getCamelContext().getClassResolver()) @TO@ ExpressionStatement@@MethodInvocation:velocityEngine.addProperty("CamelClassResolver",getCamelContext().getClassResolver()) @AT@ 3098 @LENGTH@ 86
---------INS SimpleName@@Name:velocityEngine @TO@ MethodInvocation@@velocityEngine.addProperty("CamelClassResolver",getCamelContext().getClassResolver()) @AT@ 3098 @LENGTH@ 14
---------INS SimpleName@@MethodName:addProperty:["CamelClassResolver", getCamelContext().getClassResolver()] @TO@ MethodInvocation@@velocityEngine.addProperty("CamelClassResolver",getCamelContext().getClassResolver()) @AT@ 3113 @LENGTH@ 71
------------INS StringLiteral@@"CamelClassResolver" @TO@ SimpleName@@MethodName:addProperty:["CamelClassResolver", getCamelContext().getClassResolver()] @AT@ 3125 @LENGTH@ 20
------------INS MethodInvocation@@getCamelContext().getClassResolver() @TO@ SimpleName@@MethodName:addProperty:["CamelClassResolver", getCamelContext().getClassResolver()] @AT@ 3147 @LENGTH@ 36
---------------INS MethodInvocation@@MethodName:getCamelContext:[] @TO@ MethodInvocation@@getCamelContext().getClassResolver() @AT@ 3147 @LENGTH@ 17
---------------INS SimpleName@@MethodName:getClassResolver:[] @TO@ MethodInvocation@@getCamelContext().getClassResolver() @AT@ 3165 @LENGTH@ 18
---UPD ExpressionStatement@@MethodInvocation:properties.setProperty("class.resource.loader.description","Velocity Classpath Resource Loader") @TO@ MethodInvocation:properties.setProperty("class.resource.loader.description","Camel Velocity Classpath Resource Loader") @AT@ 3170 @LENGTH@ 98
------UPD MethodInvocation@@properties.setProperty("class.resource.loader.description","Velocity Classpath Resource Loader") @TO@ properties.setProperty("class.resource.loader.description","Camel Velocity Classpath Resource Loader") @AT@ 3170 @LENGTH@ 97
---------UPD SimpleName@@MethodName:setProperty:["class.resource.loader.description", "Velocity Classpath Resource Loader"] @TO@ MethodName:setProperty:["class.resource.loader.description", "Camel Velocity Classpath Resource Loader"] @AT@ 3181 @LENGTH@ 86
------------UPD StringLiteral@@"Velocity Classpath Resource Loader" @TO@ "Camel Velocity Classpath Resource Loader" @AT@ 3230 @LENGTH@ 36
---UPD ExpressionStatement@@MethodInvocation:properties.setProperty("class.resource.loader.class","org.apache.velocity.runtime.resource.loader.ClasspathResourceLoader") @TO@ MethodInvocation:properties.setProperty("class.resource.loader.class",CamelVelocityClasspathResourceLoader.class.getName()) @AT@ 3281 @LENGTH@ 125
------UPD MethodInvocation@@properties.setProperty("class.resource.loader.class","org.apache.velocity.runtime.resource.loader.ClasspathResourceLoader") @TO@ properties.setProperty("class.resource.loader.class",CamelVelocityClasspathResourceLoader.class.getName()) @AT@ 3281 @LENGTH@ 124
---------UPD SimpleName@@MethodName:setProperty:["class.resource.loader.class", "org.apache.velocity.runtime.resource.loader.ClasspathResourceLoader"] @TO@ MethodName:setProperty:["class.resource.loader.class", CamelVelocityClasspathResourceLoader.class.getName()] @AT@ 3292 @LENGTH@ 113
------------DEL StringLiteral@@"org.apache.velocity.runtime.resource.loader.ClasspathResourceLoader" @AT@ 3335 @LENGTH@ 69
------------INS MethodInvocation@@CamelVelocityClasspathResourceLoader.class.getName() @TO@ SimpleName@@MethodName:setProperty:["class.resource.loader.class", "org.apache.velocity.runtime.resource.loader.ClasspathResourceLoader"] @AT@ 3594 @LENGTH@ 52
---------------INS TypeLiteral@@CamelVelocityClasspathResourceLoader.class @TO@ MethodInvocation@@CamelVelocityClasspathResourceLoader.class.getName() @AT@ 3594 @LENGTH@ 42
---------------INS SimpleName@@MethodName:getName:[] @TO@ MethodInvocation@@CamelVelocityClasspathResourceLoader.class.getName() @AT@ 3637 @LENGTH@ 9
---INS ExpressionStatement@@MethodInvocation:log.debug("Initializing VelocityEngine with properties {}",properties) @TO@ Block@@ThenBody:{  velocityEngine=new VelocityEngine();  Properties properties=new Properties();  if (ObjectHelper.isNotEmpty(getPropertiesFile())) {    Resource resource=getResourceLoader().getResource(getPropertiesFile());    InputStream reader=resource.getInputStream();    properties.load(reader);    log.info("Loaded the velocity configuration file " + getPropertiesFile());  }  properties.setProperty(Velocity.FILE_RESOURCE_LOADER_CACHE,isLoaderCache() ? "true" : "false");  properties.setProperty(Velocity.RESOURCE_LOADER,"file, class");  properties.setProperty("class.resource.loader.description","Velocity Classpath Resource Loader");  properties.setProperty("class.resource.loader.class","org.apache.velocity.runtime.resource.loader.ClasspathResourceLoader");  properties.setProperty(Velocity.RUNTIME_LOG_LOGSYSTEM_CLASS,CommonsLogLogChute.class.getName());  properties.setProperty(CommonsLogLogChute.LOGCHUTE_COMMONS_LOG_NAME,VelocityEndpoint.class.getName());  velocityEngine.init(properties);} @AT@ 3888 @LENGTH@ 72
------INS MethodInvocation@@log.debug("Initializing VelocityEngine with properties {}",properties) @TO@ ExpressionStatement@@MethodInvocation:log.debug("Initializing VelocityEngine with properties {}",properties) @AT@ 3888 @LENGTH@ 71
---------INS SimpleName@@Name:log @TO@ MethodInvocation@@log.debug("Initializing VelocityEngine with properties {}",properties) @AT@ 3888 @LENGTH@ 3
---------INS SimpleName@@MethodName:debug:["Initializing VelocityEngine with properties {}", properties] @TO@ MethodInvocation@@log.debug("Initializing VelocityEngine with properties {}",properties) @AT@ 3892 @LENGTH@ 67
------------INS StringLiteral@@"Initializing VelocityEngine with properties {}" @TO@ SimpleName@@MethodName:debug:["Initializing VelocityEngine with properties {}", properties] @AT@ 3898 @LENGTH@ 48
------------INS SimpleName@@properties @TO@ SimpleName@@MethodName:debug:["Initializing VelocityEngine with properties {}", properties] @AT@ 3948 @LENGTH@ 10


UPD VariableDeclarationStatement@@Deployment osgiDeployment=OSGiDeploymentAttachment.getAttachment(phaseContext.getDeploymentUnit()); @TO@ Deployment osgiDeployment=OSGiDeploymentAttachment.getDeployment(phaseContext.getDeploymentUnit()); @AT@ 2975 @LENGTH@ 101
---UPD VariableDeclarationFragment@@osgiDeployment=OSGiDeploymentAttachment.getAttachment(phaseContext.getDeploymentUnit()) @TO@ osgiDeployment=OSGiDeploymentAttachment.getDeployment(phaseContext.getDeploymentUnit()) @AT@ 2986 @LENGTH@ 89
------UPD MethodInvocation@@OSGiDeploymentAttachment.getAttachment(phaseContext.getDeploymentUnit()) @TO@ OSGiDeploymentAttachment.getDeployment(phaseContext.getDeploymentUnit()) @AT@ 3003 @LENGTH@ 72
---------UPD SimpleName@@MethodName:getAttachment:[phaseContext.getDeploymentUnit()] @TO@ MethodName:getDeployment:[phaseContext.getDeploymentUnit()] @AT@ 3028 @LENGTH@ 47


UPD ExpressionStatement@@MethodInvocation:values.setProfileUrl(profile.getId()) @TO@ MethodInvocation:values.setProviderUserId(profile.getId()) @AT@ 1629 @LENGTH@ 38
---UPD MethodInvocation@@values.setProfileUrl(profile.getId()) @TO@ values.setProviderUserId(profile.getId()) @AT@ 1629 @LENGTH@ 37
------UPD SimpleName@@MethodName:setProfileUrl:[profile.getId()] @TO@ MethodName:setProviderUserId:[profile.getId()] @AT@ 1636 @LENGTH@ 30


UPD MethodDeclaration@@public, static, void, MethodName:addService, final String name, final String abstractPath, final ServiceTarget serviceTarget,  @TO@ public, static, ServiceController<String>, MethodName:addService, final String name, final String abstractPath, final ServiceTarget serviceTarget,  @AT@ 1537 @LENGTH@ 185
---DEL PrimitiveType@@void @AT@ 1551 @LENGTH@ 4
---INS ParameterizedType@@ServiceController<String> @TO@ MethodDeclaration@@public, static, void, MethodName:addService, final String name, final String abstractPath, final ServiceTarget serviceTarget,  @AT@ 1599 @LENGTH@ 25
------INS SimpleType@@ServiceController @TO@ ParameterizedType@@ServiceController<String> @AT@ 1599 @LENGTH@ 17
------INS SimpleType@@String @TO@ ParameterizedType@@ServiceController<String> @AT@ 1617 @LENGTH@ 6
---DEL ExpressionStatement@@MethodInvocation:addService(pathNameOf(name),abstractPath,serviceTarget) @AT@ 1658 @LENGTH@ 58
---INS ReturnStatement@@MethodInvocation:addService(pathNameOf(name),abstractPath,serviceTarget) @TO@ MethodDeclaration@@public, static, void, MethodName:addService, final String name, final String abstractPath, final ServiceTarget serviceTarget,  @AT@ 1727 @LENGTH@ 65
------MOV MethodInvocation@@addService(pathNameOf(name),abstractPath,serviceTarget) @TO@ ReturnStatement@@MethodInvocation:addService(pathNameOf(name),abstractPath,serviceTarget) @AT@ 1658 @LENGTH@ 57


UPD VariableDeclarationStatement@@HttpPrincipal principal=validateUser(challengeParameters); @TO@ HttpPrincipal principal=validateUser(httpExchange,challengeParameters); @AT@ 4383 @LENGTH@ 60
---UPD VariableDeclarationFragment@@principal=validateUser(challengeParameters) @TO@ principal=validateUser(httpExchange,challengeParameters) @AT@ 4397 @LENGTH@ 45
------UPD MethodInvocation@@validateUser(challengeParameters) @TO@ validateUser(httpExchange,challengeParameters) @AT@ 4409 @LENGTH@ 33
---------UPD SimpleName@@MethodName:validateUser:[challengeParameters] @TO@ MethodName:validateUser:[httpExchange, challengeParameters] @AT@ 4409 @LENGTH@ 33
------------INS SimpleName@@httpExchange @TO@ SimpleName@@MethodName:validateUser:[challengeParameters] @AT@ 4422 @LENGTH@ 12


UPD MethodDeclaration@@public, static, ModelNode, MethodName:getAddSchemaLocationOperation, ModelNode address, ModelNode schemaLocation,  @TO@ public, static, ModelNode, MethodName:getAddSchemaLocationOperation, ModelNode address, Property schemaLocation,  @AT@ 2342 @LENGTH@ 296
---UPD SingleVariableDeclaration@@ModelNode schemaLocation @TO@ Property schemaLocation @AT@ 2415 @LENGTH@ 24
------UPD SimpleType@@ModelNode @TO@ Property @AT@ 2415 @LENGTH@ 9


UPD EnhancedForStatement@@for (String item : items) {  final String extensionName=mainAttributes.getValue(item + "-" + EXTENSION_NAME);  if (extensionName == null) {    log.warnf("Extension %s is missing the required manifest attribute %s-%s (skipping extension)",item,item,EXTENSION_NAME);    continue;  }  final String specificationVersion=mainAttributes.getValue(item + "-" + SPECIFICATION_VERSION);  final String implementationVersion=mainAttributes.getValue(item + "-" + IMPLEMENTATION_VERSION);  final String implementationVendorId=mainAttributes.getValue(item + "-" + IMPLEMENTATION_VENDOR_ID);  final String implementationUrl=mainAttributes.getValue(item + "-" + IMPLEMENTATION_URL);  if (implementationUrl == null) {    log.debugf("Extension %s is missing the required manifest attribute %s-%s",item,item,IMPLEMENTATION_URL);  }  URI implementationUri=null;  try {    implementationUri=new URI(implementationUrl);  } catch (  URISyntaxException e) {    log.warnf("Extension %s URI syntax is invalid: %s",item,e);  }  deploymentUnit.addToAttachmentList(Attachments.EXTENSION_LIST_ENTRIES,new ExtensionListEntry(item,extensionName,specificationVersion,implementationVersion,implementationVendorId,implementationUri));  added=true;} @TO@ for (String item : items) {  final String extensionName=mainAttributes.getValue(item + "-" + EXTENSION_NAME);  if (extensionName == null) {    log.warnf("Extension %s is missing the required manifest attribute %s-%s (skipping extension)",item,item,EXTENSION_NAME);    continue;  }  final String specificationVersion=mainAttributes.getValue(item + "-" + SPECIFICATION_VERSION);  final String implementationVersion=mainAttributes.getValue(item + "-" + IMPLEMENTATION_VERSION);  final String implementationVendorId=mainAttributes.getValue(item + "-" + IMPLEMENTATION_VENDOR_ID);  final String implementationUrl=mainAttributes.getValue(item + "-" + IMPLEMENTATION_URL);  URI implementationUri=null;  if (implementationUrl == null) {    log.debugf("Extension %s is missing the required manifest attribute %s-%s",item,item,IMPLEMENTATION_URL);  } else   try {    implementationUri=new URI(implementationUrl);  } catch (  URISyntaxException e) {    log.warnf("Extension %s URI syntax is invalid: %s",item,e);  }  deploymentUnit.addToAttachmentList(Attachments.EXTENSION_LIST_ENTRIES,new ExtensionListEntry(item,extensionName,specificationVersion,implementationVersion,implementationVendorId,implementationUri));  added=true;} @AT@ 2793 @LENGTH@ 1479
---UPD IfStatement@@if (implementationUrl == null) {  log.debugf("Extension %s is missing the required manifest attribute %s-%s",item,item,IMPLEMENTATION_URL);} @TO@ if (implementationUrl == null) {  log.debugf("Extension %s is missing the required manifest attribute %s-%s",item,item,IMPLEMENTATION_URL);} else try {  implementationUri=new URI(implementationUrl);} catch (URISyntaxException e) {  log.warnf("Extension %s URI syntax is invalid: %s",item,e);} @AT@ 3587 @LENGTH@ 171
------INS Block@@ElseBody:try {  implementationUri=new URI(implementationUrl);} catch (URISyntaxException e) {  log.warnf("Extension %s URI syntax is invalid: %s",item,e);} @TO@ IfStatement@@if (implementationUrl == null) {  log.debugf("Extension %s is missing the required manifest attribute %s-%s",item,item,IMPLEMENTATION_URL);} @AT@ 3752 @LENGTH@ 206
---------MOV TryStatement@@try {  implementationUri=new URI(implementationUrl);} catch (URISyntaxException e) {  log.warnf("Extension %s URI syntax is invalid: %s",item,e);} @TO@ Block@@ElseBody:try {  implementationUri=new URI(implementationUrl);} catch (URISyntaxException e) {  log.warnf("Extension %s URI syntax is invalid: %s",item,e);} @AT@ 3813 @LENGTH@ 206
---MOV IfStatement@@if (implementationUrl == null) {  log.debugf("Extension %s is missing the required manifest attribute %s-%s",item,item,IMPLEMENTATION_URL);} @TO@ EnhancedForStatement@@for (String item : items) {  final String extensionName=mainAttributes.getValue(item + "-" + EXTENSION_NAME);  if (extensionName == null) {    log.warnf("Extension %s is missing the required manifest attribute %s-%s (skipping extension)",item,item,EXTENSION_NAME);    continue;  }  final String specificationVersion=mainAttributes.getValue(item + "-" + SPECIFICATION_VERSION);  final String implementationVersion=mainAttributes.getValue(item + "-" + IMPLEMENTATION_VERSION);  final String implementationVendorId=mainAttributes.getValue(item + "-" + IMPLEMENTATION_VENDOR_ID);  final String implementationUrl=mainAttributes.getValue(item + "-" + IMPLEMENTATION_URL);  if (implementationUrl == null) {    log.debugf("Extension %s is missing the required manifest attribute %s-%s",item,item,IMPLEMENTATION_URL);  }  URI implementationUri=null;  try {    implementationUri=new URI(implementationUrl);  } catch (  URISyntaxException e) {    log.warnf("Extension %s URI syntax is invalid: %s",item,e);  }  deploymentUnit.addToAttachmentList(Attachments.EXTENSION_LIST_ENTRIES,new ExtensionListEntry(item,extensionName,specificationVersion,implementationVersion,implementationVendorId,implementationUri));  added=true;} @AT@ 3587 @LENGTH@ 171


UPD MethodDeclaration@@public, static, BundleInfo, MethodName:getBundleInfoAttachment, final DeploymentUnit context,  @TO@ public, static, BundleInfo, MethodName:getBundleInfo, final DeploymentUnit context,  @AT@ 1621 @LENGTH@ 129
---UPD SimpleName@@MethodName:getBundleInfoAttachment @TO@ MethodName:getBundleInfo @AT@ 1646 @LENGTH@ 23


UPD ExpressionStatement@@MethodInvocation:Assert.notNull(physicalTypeMetadata,"Unable to obtain physical type metdata for type " + controller.getFullyQualifiedTypeName()) @TO@ MethodInvocation:Assert.notNull(physicalTypeMetadata,"Unable to obtain physical type metadata for type " + controller.getFullyQualifiedTypeName()) @AT@ 5774 @LENGTH@ 130
---UPD MethodInvocation@@Assert.notNull(physicalTypeMetadata,"Unable to obtain physical type metdata for type " + controller.getFullyQualifiedTypeName()) @TO@ Assert.notNull(physicalTypeMetadata,"Unable to obtain physical type metadata for type " + controller.getFullyQualifiedTypeName()) @AT@ 5774 @LENGTH@ 129
------UPD SimpleName@@MethodName:notNull:[physicalTypeMetadata, "Unable to obtain physical type metdata for type " + controller.getFullyQualifiedTypeName()] @TO@ MethodName:notNull:[physicalTypeMetadata, "Unable to obtain physical type metadata for type " + controller.getFullyQualifiedTypeName()] @AT@ 5781 @LENGTH@ 122
---------UPD InfixExpression@@"Unable to obtain physical type metdata for type " + controller.getFullyQualifiedTypeName() @TO@ "Unable to obtain physical type metadata for type " + controller.getFullyQualifiedTypeName() @AT@ 5811 @LENGTH@ 91
------------UPD StringLiteral@@"Unable to obtain physical type metdata for type " @TO@ "Unable to obtain physical type metadata for type " @AT@ 5811 @LENGTH@ 50


INS MethodDeclaration@@protected, boolean, MethodName:startsWithRoot, String path,  @TO@ TypeDeclaration@@[public]DefaultFilenameTabCompleter, FilenameTabCompleter @AT@ 2638 @LENGTH@ 99
---INS Modifier@@protected @TO@ MethodDeclaration@@protected, boolean, MethodName:startsWithRoot, String path,  @AT@ 2638 @LENGTH@ 9
---INS PrimitiveType@@boolean @TO@ MethodDeclaration@@protected, boolean, MethodName:startsWithRoot, String path,  @AT@ 2648 @LENGTH@ 7
---INS SimpleName@@MethodName:startsWithRoot @TO@ MethodDeclaration@@protected, boolean, MethodName:startsWithRoot, String path,  @AT@ 2656 @LENGTH@ 14
---INS SingleVariableDeclaration@@String path @TO@ MethodDeclaration@@protected, boolean, MethodName:startsWithRoot, String path,  @AT@ 2671 @LENGTH@ 11
------INS SimpleType@@String @TO@ SingleVariableDeclaration@@String path @AT@ 2671 @LENGTH@ 6
------INS SimpleName@@path @TO@ SingleVariableDeclaration@@String path @AT@ 2678 @LENGTH@ 4
---INS ReturnStatement@@MethodInvocation:path.startsWith(File.separator) @TO@ MethodDeclaration@@protected, boolean, MethodName:startsWithRoot, String path,  @AT@ 2693 @LENGTH@ 39
------INS MethodInvocation@@path.startsWith(File.separator) @TO@ ReturnStatement@@MethodInvocation:path.startsWith(File.separator) @AT@ 2700 @LENGTH@ 31
---------INS SimpleName@@Name:path @TO@ MethodInvocation@@path.startsWith(File.separator) @AT@ 2700 @LENGTH@ 4
---------INS SimpleName@@MethodName:startsWith:[File.separator] @TO@ MethodInvocation@@path.startsWith(File.separator) @AT@ 2705 @LENGTH@ 26
------------INS QualifiedName@@File.separator @TO@ SimpleName@@MethodName:startsWith:[File.separator] @AT@ 2716 @LENGTH@ 14
---------------INS SimpleName@@File @TO@ QualifiedName@@File.separator @AT@ 2716 @LENGTH@ 4
---------------INS SimpleName@@separator @TO@ QualifiedName@@File.separator @AT@ 2721 @LENGTH@ 9


UPD IfStatement@@if (fstatus.length > 0) {  Task<? extends Serializable> task=entry.getValue();  List<Task<? extends Serializable>> parentOps=task.getParentTasks();  if (parentOps != null) {    for (    Task<? extends Serializable> parentOp : parentOps) {      resTsks.add(parentOp);    }  } else {    resTsks.add(task);  }} @TO@ if (fstatus != null && fstatus.length > 0) {  Task<? extends Serializable> task=entry.getValue();  List<Task<? extends Serializable>> parentOps=task.getParentTasks();  if (parentOps != null) {    for (    Task<? extends Serializable> parentOp : parentOps) {      resTsks.add(parentOp);    }  } else {    resTsks.add(task);  }} @AT@ 3371 @LENGTH@ 433
---INS InfixExpression@@fstatus != null && fstatus.length > 0 @TO@ IfStatement@@if (fstatus.length > 0) {  Task<? extends Serializable> task=entry.getValue();  List<Task<? extends Serializable>> parentOps=task.getParentTasks();  if (parentOps != null) {    for (    Task<? extends Serializable> parentOp : parentOps) {      resTsks.add(parentOp);    }  } else {    resTsks.add(task);  }} @AT@ 3375 @LENGTH@ 37
------MOV InfixExpression@@fstatus.length > 0 @TO@ InfixExpression@@fstatus != null && fstatus.length > 0 @AT@ 3375 @LENGTH@ 18
------INS InfixExpression@@fstatus != null @TO@ InfixExpression@@fstatus != null && fstatus.length > 0 @AT@ 3375 @LENGTH@ 15
---------INS SimpleName@@fstatus @TO@ InfixExpression@@fstatus != null @AT@ 3375 @LENGTH@ 7
---------INS Operator@@!= @TO@ InfixExpression@@fstatus != null @AT@ 3382 @LENGTH@ 2
---------INS NullLiteral@@null @TO@ InfixExpression@@fstatus != null @AT@ 3386 @LENGTH@ 4
------INS Operator@@&& @TO@ InfixExpression@@fstatus != null && fstatus.length > 0 @AT@ 3390 @LENGTH@ 2


DEL FieldDeclaration@@public, static, final, AttachmentKey<MountHandle>, [DEPLOYMENT_ROOT_MOUNT_HANDLE=AttachmentKey.create(MountHandle.class)] @AT@ 2625 @LENGTH@ 118
---DEL Modifier@@public @AT@ 2625 @LENGTH@ 6
---DEL Modifier@@static @AT@ 2632 @LENGTH@ 6
---DEL Modifier@@final @AT@ 2639 @LENGTH@ 5
---DEL ParameterizedType@@AttachmentKey<MountHandle> @AT@ 2645 @LENGTH@ 26
------DEL SimpleType@@AttachmentKey @AT@ 2645 @LENGTH@ 13
------DEL SimpleType@@MountHandle @AT@ 2659 @LENGTH@ 11
---DEL VariableDeclarationFragment@@DEPLOYMENT_ROOT_MOUNT_HANDLE=AttachmentKey.create(MountHandle.class) @AT@ 2672 @LENGTH@ 70
------DEL SimpleName@@DEPLOYMENT_ROOT_MOUNT_HANDLE @AT@ 2672 @LENGTH@ 28
------DEL MethodInvocation@@AttachmentKey.create(MountHandle.class) @AT@ 2703 @LENGTH@ 39
---------DEL SimpleName@@Name:AttachmentKey @AT@ 2703 @LENGTH@ 13
---------DEL SimpleName@@MethodName:create:[MountHandle.class] @AT@ 2717 @LENGTH@ 25
------------DEL TypeLiteral@@MountHandle.class @AT@ 2724 @LENGTH@ 17


UPD ExpressionStatement@@Assignment:on=ObjectName.getInstance("org.apache.camel:context=localhost/camel-1,type=threadpools,name=myOtherThreads(threads)") @TO@ Assignment:on=ObjectName.getInstance("org.apache.camel:context=localhost/camel-1,type=threadpools,name=\"myOtherThreads(threads)\"") @AT@ 1932 @LENGTH@ 120
---UPD Assignment@@on=ObjectName.getInstance("org.apache.camel:context=localhost/camel-1,type=threadpools,name=myOtherThreads(threads)") @TO@ on=ObjectName.getInstance("org.apache.camel:context=localhost/camel-1,type=threadpools,name=\"myOtherThreads(threads)\"") @AT@ 1932 @LENGTH@ 119
------UPD MethodInvocation@@ObjectName.getInstance("org.apache.camel:context=localhost/camel-1,type=threadpools,name=myOtherThreads(threads)") @TO@ ObjectName.getInstance("org.apache.camel:context=localhost/camel-1,type=threadpools,name=\"myOtherThreads(threads)\"") @AT@ 1937 @LENGTH@ 114
---------UPD SimpleName@@MethodName:getInstance:["org.apache.camel:context=localhost/camel-1,type=threadpools,name=myOtherThreads(threads)"] @TO@ MethodName:getInstance:["org.apache.camel:context=localhost/camel-1,type=threadpools,name=\"myOtherThreads(threads)\""] @AT@ 1948 @LENGTH@ 103
------------UPD StringLiteral@@"org.apache.camel:context=localhost/camel-1,type=threadpools,name=myOtherThreads(threads)" @TO@ "org.apache.camel:context=localhost/camel-1,type=threadpools,name=\"myOtherThreads(threads)\"" @AT@ 1960 @LENGTH@ 90


UPD VariableDeclarationStatement@@final String ejbContainerName=newEJBContainerName(unit,component); @TO@ final String ejbContainerName=newEJBContainerName(unit,absCD); @AT@ 4751 @LENGTH@ 69
---UPD VariableDeclarationFragment@@ejbContainerName=newEJBContainerName(unit,component) @TO@ ejbContainerName=newEJBContainerName(unit,absCD) @AT@ 4764 @LENGTH@ 55
------UPD MethodInvocation@@newEJBContainerName(unit,component) @TO@ newEJBContainerName(unit,absCD) @AT@ 4783 @LENGTH@ 36
---------UPD SimpleName@@MethodName:newEJBContainerName:[unit, component] @TO@ MethodName:newEJBContainerName:[unit, absCD] @AT@ 4783 @LENGTH@ 36
------------UPD SimpleName@@component @TO@ absCD @AT@ 4809 @LENGTH@ 9


UPD TryStatement@@try {  serverModel.update(update);} catch (UpdateFailedException e) {  resultHandler.handleFailure(e,param);  return;} @TO@ try {  serverModel.update(update);} catch (UpdateFailedException e) {  resultHandler.handleFailure(e,param);  return;}catch (Throwable t) {  resultHandler.handleFailure(t,param);  return;} @AT@ 5454 @LENGTH@ 190
---INS CatchClause@@catch (Throwable t) {  resultHandler.handleFailure(t,param);  return;} @TO@ TryStatement@@try {  serverModel.update(update);} catch (UpdateFailedException e) {  resultHandler.handleFailure(e,param);  return;} @AT@ 5645 @LENGTH@ 114
------INS SingleVariableDeclaration@@Throwable t @TO@ CatchClause@@catch (Throwable t) {  resultHandler.handleFailure(t,param);  return;} @AT@ 5652 @LENGTH@ 11
---------INS SimpleType@@Throwable @TO@ SingleVariableDeclaration@@Throwable t @AT@ 5652 @LENGTH@ 9
---------INS SimpleName@@t @TO@ SingleVariableDeclaration@@Throwable t @AT@ 5662 @LENGTH@ 1
------INS ExpressionStatement@@MethodInvocation:resultHandler.handleFailure(t,param) @TO@ CatchClause@@catch (Throwable t) {  resultHandler.handleFailure(t,param);  return;} @AT@ 5683 @LENGTH@ 38
---------INS MethodInvocation@@resultHandler.handleFailure(t,param) @TO@ ExpressionStatement@@MethodInvocation:resultHandler.handleFailure(t,param) @AT@ 5683 @LENGTH@ 37
------------INS SimpleName@@Name:resultHandler @TO@ MethodInvocation@@resultHandler.handleFailure(t,param) @AT@ 5683 @LENGTH@ 13
------------INS SimpleName@@MethodName:handleFailure:[t, param] @TO@ MethodInvocation@@resultHandler.handleFailure(t,param) @AT@ 5697 @LENGTH@ 23
---------------INS SimpleName@@t @TO@ SimpleName@@MethodName:handleFailure:[t, param] @AT@ 5711 @LENGTH@ 1
---------------INS SimpleName@@param @TO@ SimpleName@@MethodName:handleFailure:[t, param] @AT@ 5714 @LENGTH@ 5
------INS ReturnStatement@@ @TO@ CatchClause@@catch (Throwable t) {  resultHandler.handleFailure(t,param);  return;} @AT@ 5738 @LENGTH@ 7


DEL ExpressionStatement@@MethodInvocation:LOGGER.fatal("TODO: remove this ugly hack (Thread.sleep(3000)") @AT@ 3070 @LENGTH@ 64
---DEL MethodInvocation@@LOGGER.fatal("TODO: remove this ugly hack (Thread.sleep(3000)") @AT@ 3070 @LENGTH@ 63
------DEL SimpleName@@Name:LOGGER @AT@ 3070 @LENGTH@ 6
------DEL SimpleName@@MethodName:fatal:["TODO: remove this ugly hack (Thread.sleep(3000)"] @AT@ 3077 @LENGTH@ 56
---------DEL StringLiteral@@"TODO: remove this ugly hack (Thread.sleep(3000)" @AT@ 3083 @LENGTH@ 49


MOV ExpressionStatement@@MethodInvocation:set.add(bag.poll(1,TimeUnit.SECONDS)) @TO@ MethodDeclaration@@public, void, MethodName:testContainerSubscribe, Exception,  @AT@ 3934 @LENGTH@ 39


UPD ExpressionStatement@@MethodInvocation:from("direct:start").to("mock:before").to("log:before").process(new Processor(){
  public void process(  Exchange exchange) throws Exception {
    beforeThreadName=Thread.currentThread().getName();
  }
}
).recipientList(constant("async:Hi Camel,direct:foo")).parallelProcessing() @TO@ MethodInvocation:from("direct:start").to("mock:before").to("log:before").process(new Processor(){
  public void process(  Exchange exchange) throws Exception {
    beforeThreadName=Thread.currentThread().getName();
  }
}
).recipientList(constant("async:Hi Camel?delay=2000,direct:foo")).parallelProcessing() @AT@ 2062 @LENGTH@ 484
---UPD MethodInvocation@@from("direct:start").to("mock:before").to("log:before").process(new Processor(){
  public void process(  Exchange exchange) throws Exception {
    beforeThreadName=Thread.currentThread().getName();
  }
}
).recipientList(constant("async:Hi Camel,direct:foo")).parallelProcessing() @TO@ from("direct:start").to("mock:before").to("log:before").process(new Processor(){
  public void process(  Exchange exchange) throws Exception {
    beforeThreadName=Thread.currentThread().getName();
  }
}
).recipientList(constant("async:Hi Camel?delay=2000,direct:foo")).parallelProcessing() @AT@ 2062 @LENGTH@ 483
------UPD MethodInvocation@@MethodName:recipientList:[constant("async:Hi Camel,direct:foo")] @TO@ MethodName:recipientList:[constant("async:Hi Camel?delay=2000,direct:foo")] @AT@ 2062 @LENGTH@ 462
---------UPD MethodInvocation@@constant("async:Hi Camel,direct:foo") @TO@ constant("async:Hi Camel?delay=2000,direct:foo") @AT@ 2486 @LENGTH@ 37
------------UPD SimpleName@@MethodName:constant:["async:Hi Camel,direct:foo"] @TO@ MethodName:constant:["async:Hi Camel?delay=2000,direct:foo"] @AT@ 2486 @LENGTH@ 37
---------------UPD StringLiteral@@"async:Hi Camel,direct:foo" @TO@ "async:Hi Camel?delay=2000,direct:foo" @AT@ 2495 @LENGTH@ 27


UPD EnhancedForStatement@@for (InterceptorDescription interceptorDescription : interceptors) {  final String interceptorClassName=interceptorDescription.getInterceptorClassName();  final EEModuleClassConfiguration interceptorConfiguration=moduleConfiguration.getClassConfiguration(interceptorClassName);  final Object contextKey=interceptorConfiguration.getModuleClass();  instantiators.addFirst(new ManagedReferenceInterceptorFactory(interceptorConfiguration.getInstantiator(),contextKey));  destructors.addLast(new ManagedReferenceReleaseInterceptorFactory(contextKey));  final boolean isClassLevelInterceptor=description.getClassInterceptors().contains(interceptorDescription);  new ClassDescriptionTraversal(interceptorConfiguration,moduleConfiguration){    @Override public void handle(    EEModuleClassConfiguration interceptorClassConfiguration,    EEModuleClassDescription classDescription) throws DeploymentUnitProcessingException {      final ClassReflectionIndex<?> interceptorClassIndex=index.getClassIndex(interceptorClassConfiguration.getModuleClass());      for (      final ResourceInjectionConfiguration injectionConfiguration : interceptorClassConfiguration.getInjectionConfigurations()) {        final Object valueContextKey=new Object();        final InjectedValue<ManagedReferenceFactory> managedReferenceFactoryValue=new InjectedValue<ManagedReferenceFactory>();        configuration.getStartDependencies().add(new InjectedConfigurator(injectionConfiguration,configuration,context,managedReferenceFactoryValue));        injectors.addFirst(injectionConfiguration.getTarget().createInjectionInterceptorFactory(contextKey,valueContextKey,managedReferenceFactoryValue,deploymentUnit));        uninjectors.addLast(new ManagedReferenceReleaseInterceptorFactory(valueContextKey));      }      if (isClassLevelInterceptor) {        final MethodIdentifier postConstructMethod=classDescription.getPostConstructMethod();        if (postConstructMethod != null) {          Method method=interceptorClassIndex.getMethod(postConstructMethod);          InterceptorFactory interceptorFactory=new ManagedReferenceLifecycleMethodInterceptorFactory(contextKey,method,true);          List<InterceptorFactory> userPostConstruct=userPostConstructByInterceptorClass.get(interceptorClassName);          if (userPostConstruct == null) {            userPostConstructByInterceptorClass.put(interceptorClassName,userPostConstruct=new ArrayList<InterceptorFactory>());          }          userPostConstruct.add(interceptorFactory);        }        final MethodIdentifier preDestroyMethod=classDescription.getPreDestroyMethod();        if (preDestroyMethod != null) {          Method method=interceptorClassIndex.getMethod(preDestroyMethod);          InterceptorFactory interceptorFactory=new ManagedReferenceLifecycleMethodInterceptorFactory(contextKey,method,true);          List<InterceptorFactory> userPreDestroy=userPreDestroyByInterceptorClass.get(interceptorClassName);          if (userPreDestroy == null) {            userPreDestroyByInterceptorClass.put(interceptorClassName,userPreDestroy=new ArrayList<InterceptorFactory>());          }          userPreDestroy.add(interceptorFactory);        }      }      final MethodIdentifier aroundInvokeMethod=classDescription.getAroundInvokeMethod();      if (aroundInvokeMethod != null) {        Method method=interceptorClassIndex.getMethod(aroundInvokeMethod);        List<InterceptorFactory> interceptors;        if ((interceptors=userAroundInvokesByInterceptorClass.get(interceptorClassName)) == null) {          userAroundInvokesByInterceptorClass.put(interceptorClassName,interceptors=new ArrayList<InterceptorFactory>());        }        interceptors.add(new ManagedReferenceLifecycleMethodInterceptorFactory(contextKey,method,false));      }    }  }.run();} @TO@ for (InterceptorDescription interceptorDescription : interceptors) {  final String interceptorClassName=interceptorDescription.getInterceptorClassName();  final EEModuleClassConfiguration interceptorConfiguration=moduleConfiguration.getClassConfiguration(interceptorClassName);  final Object contextKey=interceptorConfiguration.getModuleClass();  if (interceptorConfiguration.getInstantiator() == null) {    throw new DeploymentUnitProcessingException("No default constructor for interceptor class " + interceptorClassName + " on component "+ componentClassConfiguration.getModuleClass());  }  instantiators.addFirst(new ManagedReferenceInterceptorFactory(interceptorConfiguration.getInstantiator(),contextKey));  destructors.addLast(new ManagedReferenceReleaseInterceptorFactory(contextKey));  final boolean isClassLevelInterceptor=description.getClassInterceptors().contains(interceptorDescription);  new ClassDescriptionTraversal(interceptorConfiguration,moduleConfiguration){    @Override public void handle(    EEModuleClassConfiguration interceptorClassConfiguration,    EEModuleClassDescription classDescription) throws DeploymentUnitProcessingException {      final ClassReflectionIndex<?> interceptorClassIndex=index.getClassIndex(interceptorClassConfiguration.getModuleClass());      for (      final ResourceInjectionConfiguration injectionConfiguration : interceptorClassConfiguration.getInjectionConfigurations()) {        final Object valueContextKey=new Object();        final InjectedValue<ManagedReferenceFactory> managedReferenceFactoryValue=new InjectedValue<ManagedReferenceFactory>();        configuration.getStartDependencies().add(new InjectedConfigurator(injectionConfiguration,configuration,context,managedReferenceFactoryValue));        injectors.addFirst(injectionConfiguration.getTarget().createInjectionInterceptorFactory(contextKey,valueContextKey,managedReferenceFactoryValue,deploymentUnit));        uninjectors.addLast(new ManagedReferenceReleaseInterceptorFactory(valueContextKey));      }      if (isClassLevelInterceptor) {        final MethodIdentifier postConstructMethod=classDescription.getPostConstructMethod();        if (postConstructMethod != null) {          Method method=interceptorClassIndex.getMethod(postConstructMethod);          InterceptorFactory interceptorFactory=new ManagedReferenceLifecycleMethodInterceptorFactory(contextKey,method,true);          List<InterceptorFactory> userPostConstruct=userPostConstructByInterceptorClass.get(interceptorClassName);          if (userPostConstruct == null) {            userPostConstructByInterceptorClass.put(interceptorClassName,userPostConstruct=new ArrayList<InterceptorFactory>());          }          userPostConstruct.add(interceptorFactory);        }        final MethodIdentifier preDestroyMethod=classDescription.getPreDestroyMethod();        if (preDestroyMethod != null) {          Method method=interceptorClassIndex.getMethod(preDestroyMethod);          InterceptorFactory interceptorFactory=new ManagedReferenceLifecycleMethodInterceptorFactory(contextKey,method,true);          List<InterceptorFactory> userPreDestroy=userPreDestroyByInterceptorClass.get(interceptorClassName);          if (userPreDestroy == null) {            userPreDestroyByInterceptorClass.put(interceptorClassName,userPreDestroy=new ArrayList<InterceptorFactory>());          }          userPreDestroy.add(interceptorFactory);        }      }      final MethodIdentifier aroundInvokeMethod=classDescription.getAroundInvokeMethod();      if (aroundInvokeMethod != null) {        Method method=interceptorClassIndex.getMethod(aroundInvokeMethod);        List<InterceptorFactory> interceptors;        if ((interceptors=userAroundInvokesByInterceptorClass.get(interceptorClassName)) == null) {          userAroundInvokesByInterceptorClass.put(interceptorClassName,interceptors=new ArrayList<InterceptorFactory>());        }        interceptors.add(new ManagedReferenceLifecycleMethodInterceptorFactory(contextKey,method,false));      }    }  }.run();} @AT@ 19151 @LENGTH@ 5222
---INS IfStatement@@if (interceptorConfiguration.getInstantiator() == null) {  throw new DeploymentUnitProcessingException("No default constructor for interceptor class " + interceptorClassName + " on component "+ componentClassConfiguration.getModuleClass());} @TO@ EnhancedForStatement@@for (InterceptorDescription interceptorDescription : interceptors) {  final String interceptorClassName=interceptorDescription.getInterceptorClassName();  final EEModuleClassConfiguration interceptorConfiguration=moduleConfiguration.getClassConfiguration(interceptorClassName);  final Object contextKey=interceptorConfiguration.getModuleClass();  instantiators.addFirst(new ManagedReferenceInterceptorFactory(interceptorConfiguration.getInstantiator(),contextKey));  destructors.addLast(new ManagedReferenceReleaseInterceptorFactory(contextKey));  final boolean isClassLevelInterceptor=description.getClassInterceptors().contains(interceptorDescription);  new ClassDescriptionTraversal(interceptorConfiguration,moduleConfiguration){    @Override public void handle(    EEModuleClassConfiguration interceptorClassConfiguration,    EEModuleClassDescription classDescription) throws DeploymentUnitProcessingException {      final ClassReflectionIndex<?> interceptorClassIndex=index.getClassIndex(interceptorClassConfiguration.getModuleClass());      for (      final ResourceInjectionConfiguration injectionConfiguration : interceptorClassConfiguration.getInjectionConfigurations()) {        final Object valueContextKey=new Object();        final InjectedValue<ManagedReferenceFactory> managedReferenceFactoryValue=new InjectedValue<ManagedReferenceFactory>();        configuration.getStartDependencies().add(new InjectedConfigurator(injectionConfiguration,configuration,context,managedReferenceFactoryValue));        injectors.addFirst(injectionConfiguration.getTarget().createInjectionInterceptorFactory(contextKey,valueContextKey,managedReferenceFactoryValue,deploymentUnit));        uninjectors.addLast(new ManagedReferenceReleaseInterceptorFactory(valueContextKey));      }      if (isClassLevelInterceptor) {        final MethodIdentifier postConstructMethod=classDescription.getPostConstructMethod();        if (postConstructMethod != null) {          Method method=interceptorClassIndex.getMethod(postConstructMethod);          InterceptorFactory interceptorFactory=new ManagedReferenceLifecycleMethodInterceptorFactory(contextKey,method,true);          List<InterceptorFactory> userPostConstruct=userPostConstructByInterceptorClass.get(interceptorClassName);          if (userPostConstruct == null) {            userPostConstructByInterceptorClass.put(interceptorClassName,userPostConstruct=new ArrayList<InterceptorFactory>());          }          userPostConstruct.add(interceptorFactory);        }        final MethodIdentifier preDestroyMethod=classDescription.getPreDestroyMethod();        if (preDestroyMethod != null) {          Method method=interceptorClassIndex.getMethod(preDestroyMethod);          InterceptorFactory interceptorFactory=new ManagedReferenceLifecycleMethodInterceptorFactory(contextKey,method,true);          List<InterceptorFactory> userPreDestroy=userPreDestroyByInterceptorClass.get(interceptorClassName);          if (userPreDestroy == null) {            userPreDestroyByInterceptorClass.put(interceptorClassName,userPreDestroy=new ArrayList<InterceptorFactory>());          }          userPreDestroy.add(interceptorFactory);        }      }      final MethodIdentifier aroundInvokeMethod=classDescription.getAroundInvokeMethod();      if (aroundInvokeMethod != null) {        Method method=interceptorClassIndex.getMethod(aroundInvokeMethod);        List<InterceptorFactory> interceptors;        if ((interceptors=userAroundInvokesByInterceptorClass.get(interceptorClassName)) == null) {          userAroundInvokesByInterceptorClass.put(interceptorClassName,interceptors=new ArrayList<InterceptorFactory>());        }        interceptors.add(new ManagedReferenceLifecycleMethodInterceptorFactory(contextKey,method,false));      }    }  }.run();} @AT@ 19637 @LENGTH@ 277
------INS InfixExpression@@interceptorConfiguration.getInstantiator() == null @TO@ IfStatement@@if (interceptorConfiguration.getInstantiator() == null) {  throw new DeploymentUnitProcessingException("No default constructor for interceptor class " + interceptorClassName + " on component "+ componentClassConfiguration.getModuleClass());} @AT@ 19640 @LENGTH@ 50
---------INS MethodInvocation@@interceptorConfiguration.getInstantiator() @TO@ InfixExpression@@interceptorConfiguration.getInstantiator() == null @AT@ 19640 @LENGTH@ 42
------------INS SimpleName@@Name:interceptorConfiguration @TO@ MethodInvocation@@interceptorConfiguration.getInstantiator() @AT@ 19640 @LENGTH@ 24
------------INS SimpleName@@MethodName:getInstantiator:[] @TO@ MethodInvocation@@interceptorConfiguration.getInstantiator() @AT@ 19665 @LENGTH@ 17
---------INS Operator@@== @TO@ InfixExpression@@interceptorConfiguration.getInstantiator() == null @AT@ 19682 @LENGTH@ 2
---------INS NullLiteral@@null @TO@ InfixExpression@@interceptorConfiguration.getInstantiator() == null @AT@ 19686 @LENGTH@ 4
------INS Block@@ThenBody:{  throw new DeploymentUnitProcessingException("No default constructor for interceptor class " + interceptorClassName + " on component "+ componentClassConfiguration.getModuleClass());} @TO@ IfStatement@@if (interceptorConfiguration.getInstantiator() == null) {  throw new DeploymentUnitProcessingException("No default constructor for interceptor class " + interceptorClassName + " on component "+ componentClassConfiguration.getModuleClass());} @AT@ 19692 @LENGTH@ 222
---------INS ThrowStatement@@ClassInstanceCreation:new DeploymentUnitProcessingException("No default constructor for interceptor class " + interceptorClassName + " on component "+ componentClassConfiguration.getModuleClass()) @TO@ Block@@ThenBody:{  throw new DeploymentUnitProcessingException("No default constructor for interceptor class " + interceptorClassName + " on component "+ componentClassConfiguration.getModuleClass());} @AT@ 19714 @LENGTH@ 182
------------INS ClassInstanceCreation@@DeploymentUnitProcessingException["No default constructor for interceptor class " + interceptorClassName + " on component "+ componentClassConfiguration.getModuleClass()] @TO@ ThrowStatement@@ClassInstanceCreation:new DeploymentUnitProcessingException("No default constructor for interceptor class " + interceptorClassName + " on component "+ componentClassConfiguration.getModuleClass()) @AT@ 19720 @LENGTH@ 175
---------------INS New@@new @TO@ ClassInstanceCreation@@DeploymentUnitProcessingException["No default constructor for interceptor class " + interceptorClassName + " on component "+ componentClassConfiguration.getModuleClass()] @AT@ 19720 @LENGTH@ 3
---------------INS SimpleType@@DeploymentUnitProcessingException @TO@ ClassInstanceCreation@@DeploymentUnitProcessingException["No default constructor for interceptor class " + interceptorClassName + " on component "+ componentClassConfiguration.getModuleClass()] @AT@ 19724 @LENGTH@ 33
---------------INS InfixExpression@@"No default constructor for interceptor class " + interceptorClassName + " on component "+ componentClassConfiguration.getModuleClass() @TO@ ClassInstanceCreation@@DeploymentUnitProcessingException["No default constructor for interceptor class " + interceptorClassName + " on component "+ componentClassConfiguration.getModuleClass()] @AT@ 19758 @LENGTH@ 136
------------------INS StringLiteral@@"No default constructor for interceptor class " @TO@ InfixExpression@@"No default constructor for interceptor class " + interceptorClassName + " on component "+ componentClassConfiguration.getModuleClass() @AT@ 19758 @LENGTH@ 47
------------------INS Operator@@+ @TO@ InfixExpression@@"No default constructor for interceptor class " + interceptorClassName + " on component "+ componentClassConfiguration.getModuleClass() @AT@ 19805 @LENGTH@ 1
------------------INS SimpleName@@interceptorClassName @TO@ InfixExpression@@"No default constructor for interceptor class " + interceptorClassName + " on component "+ componentClassConfiguration.getModuleClass() @AT@ 19808 @LENGTH@ 20
------------------INS StringLiteral@@" on component " @TO@ InfixExpression@@"No default constructor for interceptor class " + interceptorClassName + " on component "+ componentClassConfiguration.getModuleClass() @AT@ 19831 @LENGTH@ 16
------------------INS MethodInvocation@@componentClassConfiguration.getModuleClass() @TO@ InfixExpression@@"No default constructor for interceptor class " + interceptorClassName + " on component "+ componentClassConfiguration.getModuleClass() @AT@ 19850 @LENGTH@ 44
---------------------INS SimpleName@@Name:componentClassConfiguration @TO@ MethodInvocation@@componentClassConfiguration.getModuleClass() @AT@ 19850 @LENGTH@ 27
---------------------INS SimpleName@@MethodName:getModuleClass:[] @TO@ MethodInvocation@@componentClassConfiguration.getModuleClass() @AT@ 19878 @LENGTH@ 16


INS IfStatement@@if (ops.hasKey(key)) {  ops.rename(key,newKey);} @TO@ MethodDeclaration@@public, void, MethodName:rename, K newKey,  @AT@ 1607 @LENGTH@ 54
---INS MethodInvocation@@ops.hasKey(key) @TO@ IfStatement@@if (ops.hasKey(key)) {  ops.rename(key,newKey);} @AT@ 1611 @LENGTH@ 15
------INS SimpleName@@Name:ops @TO@ MethodInvocation@@ops.hasKey(key) @AT@ 1611 @LENGTH@ 3
------INS SimpleName@@MethodName:hasKey:[key] @TO@ MethodInvocation@@ops.hasKey(key) @AT@ 1615 @LENGTH@ 11
---------INS SimpleName@@key @TO@ SimpleName@@MethodName:hasKey:[key] @AT@ 1622 @LENGTH@ 3
---INS Block@@ThenBody:{  ops.rename(key,newKey);} @TO@ IfStatement@@if (ops.hasKey(key)) {  ops.rename(key,newKey);} @AT@ 1628 @LENGTH@ 33
------MOV ExpressionStatement@@MethodInvocation:ops.rename(key,newKey) @TO@ Block@@ThenBody:{  ops.rename(key,newKey);} @AT@ 1607 @LENGTH@ 24


INS MethodDeclaration@@public, void, MethodName:testMessageBatch, Exception,  @TO@ TypeDeclaration@@[@RunWith(Parameterized.class), public]PubSubTests,  @AT@ 4106 @LENGTH@ 382
---INS Modifier@@public @TO@ MethodDeclaration@@public, void, MethodName:testMessageBatch, Exception,  @AT@ 4106 @LENGTH@ 6
---INS PrimitiveType@@void @TO@ MethodDeclaration@@public, void, MethodName:testMessageBatch, Exception,  @AT@ 4113 @LENGTH@ 4
---INS SimpleName@@MethodName:testMessageBatch @TO@ MethodDeclaration@@public, void, MethodName:testMessageBatch, Exception,  @AT@ 4118 @LENGTH@ 16
---INS SimpleType@@Exception @TO@ MethodDeclaration@@public, void, MethodName:testMessageBatch, Exception,  @AT@ 4144 @LENGTH@ 9
---INS ExpressionStatement@@MethodInvocation:container.addMessageListener(adapter,Arrays.asList(new ChannelTopic(CHANNEL))) @TO@ MethodDeclaration@@public, void, MethodName:testMessageBatch, Exception,  @AT@ 4159 @LENGTH@ 80
------INS MethodInvocation@@container.addMessageListener(adapter,Arrays.asList(new ChannelTopic(CHANNEL))) @TO@ ExpressionStatement@@MethodInvocation:container.addMessageListener(adapter,Arrays.asList(new ChannelTopic(CHANNEL))) @AT@ 4159 @LENGTH@ 79
---------INS SimpleName@@Name:container @TO@ MethodInvocation@@container.addMessageListener(adapter,Arrays.asList(new ChannelTopic(CHANNEL))) @AT@ 4159 @LENGTH@ 9
---------INS SimpleName@@MethodName:addMessageListener:[adapter, Arrays.asList(new ChannelTopic(CHANNEL))] @TO@ MethodInvocation@@container.addMessageListener(adapter,Arrays.asList(new ChannelTopic(CHANNEL))) @AT@ 4169 @LENGTH@ 69
------------INS SimpleName@@adapter @TO@ SimpleName@@MethodName:addMessageListener:[adapter, Arrays.asList(new ChannelTopic(CHANNEL))] @AT@ 4188 @LENGTH@ 7
------------INS MethodInvocation@@Arrays.asList(new ChannelTopic(CHANNEL)) @TO@ SimpleName@@MethodName:addMessageListener:[adapter, Arrays.asList(new ChannelTopic(CHANNEL))] @AT@ 4197 @LENGTH@ 40
---------------INS SimpleName@@Name:Arrays @TO@ MethodInvocation@@Arrays.asList(new ChannelTopic(CHANNEL)) @AT@ 4197 @LENGTH@ 6
---------------INS SimpleName@@MethodName:asList:[new ChannelTopic(CHANNEL)] @TO@ MethodInvocation@@Arrays.asList(new ChannelTopic(CHANNEL)) @AT@ 4204 @LENGTH@ 33
------------------INS ClassInstanceCreation@@ChannelTopic[CHANNEL] @TO@ SimpleName@@MethodName:asList:[new ChannelTopic(CHANNEL)] @AT@ 4211 @LENGTH@ 25
---------------------INS New@@new @TO@ ClassInstanceCreation@@ChannelTopic[CHANNEL] @AT@ 4211 @LENGTH@ 3
---------------------INS SimpleType@@ChannelTopic @TO@ ClassInstanceCreation@@ChannelTopic[CHANNEL] @AT@ 4215 @LENGTH@ 12
---------------------INS SimpleName@@CHANNEL @TO@ ClassInstanceCreation@@ChannelTopic[CHANNEL] @AT@ 4228 @LENGTH@ 7
---INS VariableDeclarationStatement@@int COUNT=10; @TO@ MethodDeclaration@@public, void, MethodName:testMessageBatch, Exception,  @AT@ 4298 @LENGTH@ 15
------INS PrimitiveType@@int @TO@ VariableDeclarationStatement@@int COUNT=10; @AT@ 4298 @LENGTH@ 3
------INS VariableDeclarationFragment@@COUNT=10 @TO@ VariableDeclarationStatement@@int COUNT=10; @AT@ 4302 @LENGTH@ 10
---------INS SimpleName@@COUNT @TO@ VariableDeclarationFragment@@COUNT=10 @AT@ 4302 @LENGTH@ 5
---------INS NumberLiteral@@10 @TO@ VariableDeclarationFragment@@COUNT=10 @AT@ 4310 @LENGTH@ 2
---INS ExpressionStatement@@MethodInvocation:Thread.sleep(500) @TO@ MethodDeclaration@@public, void, MethodName:testMessageBatch, Exception,  @AT@ 4316 @LENGTH@ 18
------INS MethodInvocation@@Thread.sleep(500) @TO@ ExpressionStatement@@MethodInvocation:Thread.sleep(500) @AT@ 4316 @LENGTH@ 17
---------INS SimpleName@@Name:Thread @TO@ MethodInvocation@@Thread.sleep(500) @AT@ 4316 @LENGTH@ 6
---------INS SimpleName@@MethodName:sleep:[500] @TO@ MethodInvocation@@Thread.sleep(500) @AT@ 4323 @LENGTH@ 10
------------INS NumberLiteral@@500 @TO@ SimpleName@@MethodName:sleep:[500] @AT@ 4329 @LENGTH@ 3
---INS ForStatement@@for (int i=0; i < COUNT; i++) {  template.convertAndSend(CHANNEL,"message=" + i);} @TO@ MethodDeclaration@@public, void, MethodName:testMessageBatch, Exception,  @AT@ 4337 @LENGTH@ 90
------INS VariableDeclarationExpression@@int i=0 @TO@ ForStatement@@for (int i=0; i < COUNT; i++) {  template.convertAndSend(CHANNEL,"message=" + i);} @AT@ 4342 @LENGTH@ 9
---------INS PrimitiveType@@int @TO@ VariableDeclarationExpression@@int i=0 @AT@ 4342 @LENGTH@ 3
---------INS VariableDeclarationFragment@@i=0 @TO@ VariableDeclarationExpression@@int i=0 @AT@ 4346 @LENGTH@ 5
------------INS SimpleName@@i @TO@ VariableDeclarationFragment@@i=0 @AT@ 4346 @LENGTH@ 1
------------INS NumberLiteral@@0 @TO@ VariableDeclarationFragment@@i=0 @AT@ 4350 @LENGTH@ 1
------INS InfixExpression@@i < COUNT @TO@ ForStatement@@for (int i=0; i < COUNT; i++) {  template.convertAndSend(CHANNEL,"message=" + i);} @AT@ 4353 @LENGTH@ 9
---------INS SimpleName@@i @TO@ InfixExpression@@i < COUNT @AT@ 4353 @LENGTH@ 1
---------INS Operator@@< @TO@ InfixExpression@@i < COUNT @AT@ 4354 @LENGTH@ 1
---------INS SimpleName@@COUNT @TO@ InfixExpression@@i < COUNT @AT@ 4357 @LENGTH@ 5
------INS PostfixExpression@@i++ @TO@ ForStatement@@for (int i=0; i < COUNT; i++) {  template.convertAndSend(CHANNEL,"message=" + i);} @AT@ 4364 @LENGTH@ 3
---------INS SimpleName@@i @TO@ PostfixExpression@@i++ @AT@ 4364 @LENGTH@ 1
---------INS Operator@@++ @TO@ PostfixExpression@@i++ @AT@ 4366 @LENGTH@ 2
------INS ExpressionStatement@@MethodInvocation:template.convertAndSend(CHANNEL,"message=" + i) @TO@ ForStatement@@for (int i=0; i < COUNT; i++) {  template.convertAndSend(CHANNEL,"message=" + i);} @AT@ 4374 @LENGTH@ 49
---------INS MethodInvocation@@template.convertAndSend(CHANNEL,"message=" + i) @TO@ ExpressionStatement@@MethodInvocation:template.convertAndSend(CHANNEL,"message=" + i) @AT@ 4374 @LENGTH@ 48
------------INS SimpleName@@Name:template @TO@ MethodInvocation@@template.convertAndSend(CHANNEL,"message=" + i) @AT@ 4374 @LENGTH@ 8
------------INS SimpleName@@MethodName:convertAndSend:[CHANNEL, "message=" + i] @TO@ MethodInvocation@@template.convertAndSend(CHANNEL,"message=" + i) @AT@ 4383 @LENGTH@ 39
---------------INS SimpleName@@CHANNEL @TO@ SimpleName@@MethodName:convertAndSend:[CHANNEL, "message=" + i] @AT@ 4398 @LENGTH@ 7
---------------INS InfixExpression@@"message=" + i @TO@ SimpleName@@MethodName:convertAndSend:[CHANNEL, "message=" + i] @AT@ 4407 @LENGTH@ 14
------------------INS StringLiteral@@"message=" @TO@ InfixExpression@@"message=" + i @AT@ 4407 @LENGTH@ 10
------------------INS Operator@@+ @TO@ InfixExpression@@"message=" + i @AT@ 4417 @LENGTH@ 1
------------------INS SimpleName@@i @TO@ InfixExpression@@"message=" + i @AT@ 4420 @LENGTH@ 1
---INS ExpressionStatement@@MethodInvocation:Thread.sleep(1000) @TO@ MethodDeclaration@@public, void, MethodName:testMessageBatch, Exception,  @AT@ 4431 @LENGTH@ 19
------INS MethodInvocation@@Thread.sleep(1000) @TO@ ExpressionStatement@@MethodInvocation:Thread.sleep(1000) @AT@ 4431 @LENGTH@ 18
---------INS SimpleName@@Name:Thread @TO@ MethodInvocation@@Thread.sleep(1000) @AT@ 4431 @LENGTH@ 6
---------INS SimpleName@@MethodName:sleep:[1000] @TO@ MethodInvocation@@Thread.sleep(1000) @AT@ 4438 @LENGTH@ 11
------------INS NumberLiteral@@1000 @TO@ SimpleName@@MethodName:sleep:[1000] @AT@ 4444 @LENGTH@ 4
---INS ExpressionStatement@@MethodInvocation:assertEquals(COUNT,bag.size()) @TO@ MethodDeclaration@@public, void, MethodName:testMessageBatch, Exception,  @AT@ 4453 @LENGTH@ 32
------INS MethodInvocation@@assertEquals(COUNT,bag.size()) @TO@ ExpressionStatement@@MethodInvocation:assertEquals(COUNT,bag.size()) @AT@ 4453 @LENGTH@ 31
---------INS SimpleName@@MethodName:assertEquals:[COUNT, bag.size()] @TO@ MethodInvocation@@assertEquals(COUNT,bag.size()) @AT@ 4453 @LENGTH@ 31
------------INS SimpleName@@COUNT @TO@ SimpleName@@MethodName:assertEquals:[COUNT, bag.size()] @AT@ 4466 @LENGTH@ 5
------------INS MethodInvocation@@bag.size() @TO@ SimpleName@@MethodName:assertEquals:[COUNT, bag.size()] @AT@ 4473 @LENGTH@ 10
---------------INS SimpleName@@Name:bag @TO@ MethodInvocation@@bag.size() @AT@ 4473 @LENGTH@ 3
---------------INS SimpleName@@MethodName:size:[] @TO@ MethodInvocation@@bag.size() @AT@ 4477 @LENGTH@ 6


MOV ExpressionStatement@@SuperMethodInvocation:super.setUp() @TO@ MethodDeclaration@@public, void, MethodName:setUp, Exception,  @AT@ 1379 @LENGTH@ 14


UPD IfStatement@@if (initialValue == null && this.operations.get(redisCounter) == null) {  set(0);} else {  set(initialValue);} @TO@ if (initialValue == null || this.operations.get(redisCounter) == null) {  set(0);} else {  set(initialValue);} @AT@ 2902 @LENGTH@ 122
---UPD InfixExpression@@initialValue == null && this.operations.get(redisCounter) == null @TO@ initialValue == null || this.operations.get(redisCounter) == null @AT@ 2906 @LENGTH@ 65
------UPD Operator@@&& @TO@ || @AT@ 2926 @LENGTH@ 2


UPD VariableDeclarationStatement@@Deployment osgiDeployment=OSGiDeploymentAttachment.getAttachment(phaseContext.getDeploymentUnit()); @TO@ Deployment osgiDeployment=OSGiDeploymentAttachment.getDeployment(phaseContext.getDeploymentUnit()); @AT@ 2975 @LENGTH@ 101
---UPD VariableDeclarationFragment@@osgiDeployment=OSGiDeploymentAttachment.getAttachment(phaseContext.getDeploymentUnit()) @TO@ osgiDeployment=OSGiDeploymentAttachment.getDeployment(phaseContext.getDeploymentUnit()) @AT@ 2986 @LENGTH@ 89
------UPD MethodInvocation@@OSGiDeploymentAttachment.getAttachment(phaseContext.getDeploymentUnit()) @TO@ OSGiDeploymentAttachment.getDeployment(phaseContext.getDeploymentUnit()) @AT@ 3003 @LENGTH@ 72
---------UPD SimpleName@@MethodName:getAttachment:[phaseContext.getDeploymentUnit()] @TO@ MethodName:getDeployment:[phaseContext.getDeploymentUnit()] @AT@ 3028 @LENGTH@ 47


UPD Block@@ElseBody:if (stateId.equals(OperationNameState.ID)) {  handler.operationName(buffer.toString().trim());} else if (stateId.equals(NodeState.ID)) {  char ch=ctx.getCharacter();  if (buffer.length() == 0) {    if (ch == '/') {      handler.rootNode();      handler.nodeSeparator(ctx.getLocation());    }  } else {    if (ch == '=') {      handler.nodeType(buffer.toString().trim());      handler.nodeTypeNameSeparator(ctx.getLocation());    } else     if (ch == ':') {      handler.nodeName(buffer.toString().trim());    } else {      final String value=buffer.toString().trim();      if (".".equals(value)) {      } else       if ("..".equals(value)) {        handler.parentNode();      } else       if (".type".equals(value)) {        handler.nodeType();      } else {        if (ch == '/') {          if ("".equals(value)) {            handler.rootNode();          } else {            handler.nodeName(value);          }        } else {          handler.nodeTypeOrName(value);        }      }      if (ch == '/') {        handler.nodeSeparator(ctx.getLocation());      }    }  }} @TO@ ElseBody:if (stateId.equals(OperationNameState.ID)) {  handler.operationName(buffer.toString().trim());} else if (stateId.equals(NodeState.ID)) {  char ch=ctx.getCharacter();  if (buffer.length() == 0) {    if (ch == '/') {      handler.rootNode();      handler.nodeSeparator(ctx.getLocation());    }  } else {    if (ch == '=') {      handler.nodeType(buffer.toString().trim());      handler.nodeTypeNameSeparator(ctx.getLocation());    } else     if (ch == ':') {      handler.nodeName(buffer.toString().trim());    } else {      final String value=buffer.toString().trim();      if (".".equals(value)) {      } else       if ("..".equals(value)) {        handler.parentNode();      } else       if (".type".equals(value)) {        handler.nodeType();      } else {        if (ch == '/') {          if ("".equals(value)) {            handler.rootNode();          } else {            handler.nodeName(value);          }        } else {          handler.nodeTypeOrName(value);        }      }      if (ch == '/') {        handler.nodeSeparator(ctx.getLocation());      }    }  }  propValueContent=false;} @AT@ 6195 @LENGTH@ 1986
---UPD IfStatement@@if (stateId.equals(OperationNameState.ID)) {  handler.operationName(buffer.toString().trim());} else if (stateId.equals(NodeState.ID)) {  char ch=ctx.getCharacter();  if (buffer.length() == 0) {    if (ch == '/') {      handler.rootNode();      handler.nodeSeparator(ctx.getLocation());    }  } else {    if (ch == '=') {      handler.nodeType(buffer.toString().trim());      handler.nodeTypeNameSeparator(ctx.getLocation());    } else     if (ch == ':') {      handler.nodeName(buffer.toString().trim());    } else {      final String value=buffer.toString().trim();      if (".".equals(value)) {      } else       if ("..".equals(value)) {        handler.parentNode();      } else       if (".type".equals(value)) {        handler.nodeType();      } else {        if (ch == '/') {          if ("".equals(value)) {            handler.rootNode();          } else {            handler.nodeName(value);          }        } else {          handler.nodeTypeOrName(value);        }      }      if (ch == '/') {        handler.nodeSeparator(ctx.getLocation());      }    }  }} @TO@ if (stateId.equals(OperationNameState.ID)) {  handler.operationName(buffer.toString().trim());} else if (stateId.equals(NodeState.ID)) {  char ch=ctx.getCharacter();  if (buffer.length() == 0) {    if (ch == '/') {      handler.rootNode();      handler.nodeSeparator(ctx.getLocation());    }  } else {    if (ch == '=') {      handler.nodeType(buffer.toString().trim());      handler.nodeTypeNameSeparator(ctx.getLocation());    } else     if (ch == ':') {      handler.nodeName(buffer.toString().trim());    } else {      final String value=buffer.toString().trim();      if (".".equals(value)) {      } else       if ("..".equals(value)) {        handler.parentNode();      } else       if (".type".equals(value)) {        handler.nodeType();      } else {        if (ch == '/') {          if ("".equals(value)) {            handler.rootNode();          } else {            handler.nodeName(value);          }        } else {          handler.nodeTypeOrName(value);        }      }      if (ch == '/') {        handler.nodeSeparator(ctx.getLocation());      }    }  }  propValueContent=false;} @AT@ 6195 @LENGTH@ 1986
------UPD Block@@ElseBody:if (stateId.equals(NodeState.ID)) {  char ch=ctx.getCharacter();  if (buffer.length() == 0) {    if (ch == '/') {      handler.rootNode();      handler.nodeSeparator(ctx.getLocation());    }  } else {    if (ch == '=') {      handler.nodeType(buffer.toString().trim());      handler.nodeTypeNameSeparator(ctx.getLocation());    } else     if (ch == ':') {      handler.nodeName(buffer.toString().trim());    } else {      final String value=buffer.toString().trim();      if (".".equals(value)) {      } else       if ("..".equals(value)) {        handler.parentNode();      } else       if (".type".equals(value)) {        handler.nodeType();      } else {        if (ch == '/') {          if ("".equals(value)) {            handler.rootNode();          } else {            handler.nodeName(value);          }        } else {          handler.nodeTypeOrName(value);        }      }      if (ch == '/') {        handler.nodeSeparator(ctx.getLocation());      }    }  }} @TO@ ElseBody:if (stateId.equals(NodeState.ID)) {  char ch=ctx.getCharacter();  if (buffer.length() == 0) {    if (ch == '/') {      handler.rootNode();      handler.nodeSeparator(ctx.getLocation());    }  } else {    if (ch == '=') {      handler.nodeType(buffer.toString().trim());      handler.nodeTypeNameSeparator(ctx.getLocation());    } else     if (ch == ':') {      handler.nodeName(buffer.toString().trim());    } else {      final String value=buffer.toString().trim();      if (".".equals(value)) {      } else       if ("..".equals(value)) {        handler.parentNode();      } else       if (".type".equals(value)) {        handler.nodeType();      } else {        if (ch == '/') {          if ("".equals(value)) {            handler.rootNode();          } else {            handler.nodeName(value);          }        } else {          handler.nodeTypeOrName(value);        }      }      if (ch == '/') {        handler.nodeSeparator(ctx.getLocation());      }    }  }  propValueContent=false;} @AT@ 6331 @LENGTH@ 1850
---------UPD IfStatement@@if (stateId.equals(NodeState.ID)) {  char ch=ctx.getCharacter();  if (buffer.length() == 0) {    if (ch == '/') {      handler.rootNode();      handler.nodeSeparator(ctx.getLocation());    }  } else {    if (ch == '=') {      handler.nodeType(buffer.toString().trim());      handler.nodeTypeNameSeparator(ctx.getLocation());    } else     if (ch == ':') {      handler.nodeName(buffer.toString().trim());    } else {      final String value=buffer.toString().trim();      if (".".equals(value)) {      } else       if ("..".equals(value)) {        handler.parentNode();      } else       if (".type".equals(value)) {        handler.nodeType();      } else {        if (ch == '/') {          if ("".equals(value)) {            handler.rootNode();          } else {            handler.nodeName(value);          }        } else {          handler.nodeTypeOrName(value);        }      }      if (ch == '/') {        handler.nodeSeparator(ctx.getLocation());      }    }  }} @TO@ if (stateId.equals(NodeState.ID)) {  char ch=ctx.getCharacter();  if (buffer.length() == 0) {    if (ch == '/') {      handler.rootNode();      handler.nodeSeparator(ctx.getLocation());    }  } else {    if (ch == '=') {      handler.nodeType(buffer.toString().trim());      handler.nodeTypeNameSeparator(ctx.getLocation());    } else     if (ch == ':') {      handler.nodeName(buffer.toString().trim());    } else {      final String value=buffer.toString().trim();      if (".".equals(value)) {      } else       if ("..".equals(value)) {        handler.parentNode();      } else       if (".type".equals(value)) {        handler.nodeType();      } else {        if (ch == '/') {          if ("".equals(value)) {            handler.rootNode();          } else {            handler.nodeName(value);          }        } else {          handler.nodeTypeOrName(value);        }      }      if (ch == '/') {        handler.nodeSeparator(ctx.getLocation());      }    }  }  propValueContent=false;} @AT@ 6331 @LENGTH@ 1850
------------UPD Block@@ThenBody:{  char ch=ctx.getCharacter();  if (buffer.length() == 0) {    if (ch == '/') {      handler.rootNode();      handler.nodeSeparator(ctx.getLocation());    }  } else {    if (ch == '=') {      handler.nodeType(buffer.toString().trim());      handler.nodeTypeNameSeparator(ctx.getLocation());    } else     if (ch == ':') {      handler.nodeName(buffer.toString().trim());    } else {      final String value=buffer.toString().trim();      if (".".equals(value)) {      } else       if ("..".equals(value)) {        handler.parentNode();      } else       if (".type".equals(value)) {        handler.nodeType();      } else {        if (ch == '/') {          if ("".equals(value)) {            handler.rootNode();          } else {            handler.nodeName(value);          }        } else {          handler.nodeTypeOrName(value);        }      }      if (ch == '/') {        handler.nodeSeparator(ctx.getLocation());      }    }  }} @TO@ ThenBody:{  char ch=ctx.getCharacter();  if (buffer.length() == 0) {    if (ch == '/') {      handler.rootNode();      handler.nodeSeparator(ctx.getLocation());    }  } else {    if (ch == '=') {      handler.nodeType(buffer.toString().trim());      handler.nodeTypeNameSeparator(ctx.getLocation());    } else     if (ch == ':') {      handler.nodeName(buffer.toString().trim());    } else {      final String value=buffer.toString().trim();      if (".".equals(value)) {      } else       if ("..".equals(value)) {        handler.parentNode();      } else       if (".type".equals(value)) {        handler.nodeType();      } else {        if (ch == '/') {          if ("".equals(value)) {            handler.rootNode();          } else {            handler.nodeName(value);          }        } else {          handler.nodeTypeOrName(value);        }      }      if (ch == '/') {        handler.nodeSeparator(ctx.getLocation());      }    }  }  propValueContent=false;} @AT@ 6364 @LENGTH@ 1817
---------------INS ExpressionStatement@@Assignment:propValueContent=false @TO@ Block@@ThenBody:{  char ch=ctx.getCharacter();  if (buffer.length() == 0) {    if (ch == '/') {      handler.rootNode();      handler.nodeSeparator(ctx.getLocation());    }  } else {    if (ch == '=') {      handler.nodeType(buffer.toString().trim());      handler.nodeTypeNameSeparator(ctx.getLocation());    } else     if (ch == ':') {      handler.nodeName(buffer.toString().trim());    } else {      final String value=buffer.toString().trim();      if (".".equals(value)) {      } else       if ("..".equals(value)) {        handler.parentNode();      } else       if (".type".equals(value)) {        handler.nodeType();      } else {        if (ch == '/') {          if ("".equals(value)) {            handler.rootNode();          } else {            handler.nodeName(value);          }        } else {          handler.nodeTypeOrName(value);        }      }      if (ch == '/') {        handler.nodeSeparator(ctx.getLocation());      }    }  }} @AT@ 8328 @LENGTH@ 25
------------------INS Assignment@@propValueContent=false @TO@ ExpressionStatement@@Assignment:propValueContent=false @AT@ 8328 @LENGTH@ 24
---------------------INS SimpleName@@propValueContent @TO@ Assignment@@propValueContent=false @AT@ 8328 @LENGTH@ 16
---------------------INS Operator@@= @TO@ Assignment@@propValueContent=false @AT@ 8344 @LENGTH@ 1
---------------------INS BooleanLiteral@@false @TO@ Assignment@@propValueContent=false @AT@ 8347 @LENGTH@ 5
---------UPD IfStatement@@if (stateId.equals(NodeState.ID)) {  char ch=ctx.getCharacter();  if (buffer.length() == 0) {    if (ch == '/') {      handler.rootNode();      handler.nodeSeparator(ctx.getLocation());    }  } else {    if (ch == '=') {      handler.nodeType(buffer.toString().trim());      handler.nodeTypeNameSeparator(ctx.getLocation());    } else     if (ch == ':') {      handler.nodeName(buffer.toString().trim());    } else {      final String value=buffer.toString().trim();      if (".".equals(value)) {      } else       if ("..".equals(value)) {        handler.parentNode();      } else       if (".type".equals(value)) {        handler.nodeType();      } else {        if (ch == '/') {          if ("".equals(value)) {            handler.rootNode();          } else {            handler.nodeName(value);          }        } else {          handler.nodeTypeOrName(value);        }      }      if (ch == '/') {        handler.nodeSeparator(ctx.getLocation());      }    }  }} @TO@ if (stateId.equals(NodeState.ID)) {  char ch=ctx.getCharacter();  if (buffer.length() == 0) {    if (ch == '/') {      handler.rootNode();      handler.nodeSeparator(ctx.getLocation());    }  } else {    if (ch == '=') {      handler.nodeType(buffer.toString().trim());      handler.nodeTypeNameSeparator(ctx.getLocation());    } else     if (ch == ':') {      handler.nodeName(buffer.toString().trim());    } else {      final String value=buffer.toString().trim();      if (".".equals(value)) {      } else       if ("..".equals(value)) {        handler.parentNode();      } else       if (".type".equals(value)) {        handler.nodeType();      } else {        if (ch == '/') {          if ("".equals(value)) {            handler.rootNode();          } else {            handler.nodeName(value);          }        } else {          handler.nodeTypeOrName(value);        }      }      if (ch == '/') {        handler.nodeSeparator(ctx.getLocation());      }    }  }  propValueContent=false;} @AT@ 6331 @LENGTH@ 1850
------------UPD Block@@ThenBody:{  char ch=ctx.getCharacter();  if (buffer.length() == 0) {    if (ch == '/') {      handler.rootNode();      handler.nodeSeparator(ctx.getLocation());    }  } else {    if (ch == '=') {      handler.nodeType(buffer.toString().trim());      handler.nodeTypeNameSeparator(ctx.getLocation());    } else     if (ch == ':') {      handler.nodeName(buffer.toString().trim());    } else {      final String value=buffer.toString().trim();      if (".".equals(value)) {      } else       if ("..".equals(value)) {        handler.parentNode();      } else       if (".type".equals(value)) {        handler.nodeType();      } else {        if (ch == '/') {          if ("".equals(value)) {            handler.rootNode();          } else {            handler.nodeName(value);          }        } else {          handler.nodeTypeOrName(value);        }      }      if (ch == '/') {        handler.nodeSeparator(ctx.getLocation());      }    }  }} @TO@ ThenBody:{  char ch=ctx.getCharacter();  if (buffer.length() == 0) {    if (ch == '/') {      handler.rootNode();      handler.nodeSeparator(ctx.getLocation());    }  } else {    if (ch == '=') {      handler.nodeType(buffer.toString().trim());      handler.nodeTypeNameSeparator(ctx.getLocation());    } else     if (ch == ':') {      handler.nodeName(buffer.toString().trim());    } else {      final String value=buffer.toString().trim();      if (".".equals(value)) {      } else       if ("..".equals(value)) {        handler.parentNode();      } else       if (".type".equals(value)) {        handler.nodeType();      } else {        if (ch == '/') {          if ("".equals(value)) {            handler.rootNode();          } else {            handler.nodeName(value);          }        } else {          handler.nodeTypeOrName(value);        }      }      if (ch == '/') {        handler.nodeSeparator(ctx.getLocation());      }    }  }  propValueContent=false;} @AT@ 6364 @LENGTH@ 1817
---------------INS ExpressionStatement@@Assignment:propValueContent=false @TO@ Block@@ThenBody:{  char ch=ctx.getCharacter();  if (buffer.length() == 0) {    if (ch == '/') {      handler.rootNode();      handler.nodeSeparator(ctx.getLocation());    }  } else {    if (ch == '=') {      handler.nodeType(buffer.toString().trim());      handler.nodeTypeNameSeparator(ctx.getLocation());    } else     if (ch == ':') {      handler.nodeName(buffer.toString().trim());    } else {      final String value=buffer.toString().trim();      if (".".equals(value)) {      } else       if ("..".equals(value)) {        handler.parentNode();      } else       if (".type".equals(value)) {        handler.nodeType();      } else {        if (ch == '/') {          if ("".equals(value)) {            handler.rootNode();          } else {            handler.nodeName(value);          }        } else {          handler.nodeTypeOrName(value);        }      }      if (ch == '/') {        handler.nodeSeparator(ctx.getLocation());      }    }  }} @AT@ 8328 @LENGTH@ 25
------------------INS Assignment@@propValueContent=false @TO@ ExpressionStatement@@Assignment:propValueContent=false @AT@ 8328 @LENGTH@ 24
---------------------INS SimpleName@@propValueContent @TO@ Assignment@@propValueContent=false @AT@ 8328 @LENGTH@ 16
---------------------INS Operator@@= @TO@ Assignment@@propValueContent=false @AT@ 8344 @LENGTH@ 1
---------------------INS BooleanLiteral@@false @TO@ Assignment@@propValueContent=false @AT@ 8347 @LENGTH@ 5
---------UPD IfStatement@@if (stateId.equals(NodeState.ID)) {  char ch=ctx.getCharacter();  if (buffer.length() == 0) {    if (ch == '/') {      handler.rootNode();      handler.nodeSeparator(ctx.getLocation());    }  } else {    if (ch == '=') {      handler.nodeType(buffer.toString().trim());      handler.nodeTypeNameSeparator(ctx.getLocation());    } else     if (ch == ':') {      handler.nodeName(buffer.toString().trim());    } else {      final String value=buffer.toString().trim();      if (".".equals(value)) {      } else       if ("..".equals(value)) {        handler.parentNode();      } else       if (".type".equals(value)) {        handler.nodeType();      } else {        if (ch == '/') {          if ("".equals(value)) {            handler.rootNode();          } else {            handler.nodeName(value);          }        } else {          handler.nodeTypeOrName(value);        }      }      if (ch == '/') {        handler.nodeSeparator(ctx.getLocation());      }    }  }} @TO@ if (stateId.equals(NodeState.ID)) {  char ch=ctx.getCharacter();  if (buffer.length() == 0) {    if (ch == '/') {      handler.rootNode();      handler.nodeSeparator(ctx.getLocation());    }  } else {    if (ch == '=') {      handler.nodeType(buffer.toString().trim());      handler.nodeTypeNameSeparator(ctx.getLocation());    } else     if (ch == ':') {      handler.nodeName(buffer.toString().trim());    } else {      final String value=buffer.toString().trim();      if (".".equals(value)) {      } else       if ("..".equals(value)) {        handler.parentNode();      } else       if (".type".equals(value)) {        handler.nodeType();      } else {        if (ch == '/') {          if ("".equals(value)) {            handler.rootNode();          } else {            handler.nodeName(value);          }        } else {          handler.nodeTypeOrName(value);        }      }      if (ch == '/') {        handler.nodeSeparator(ctx.getLocation());      }    }  }  propValueContent=false;} @AT@ 6331 @LENGTH@ 1850
------------UPD Block@@ThenBody:{  char ch=ctx.getCharacter();  if (buffer.length() == 0) {    if (ch == '/') {      handler.rootNode();      handler.nodeSeparator(ctx.getLocation());    }  } else {    if (ch == '=') {      handler.nodeType(buffer.toString().trim());      handler.nodeTypeNameSeparator(ctx.getLocation());    } else     if (ch == ':') {      handler.nodeName(buffer.toString().trim());    } else {      final String value=buffer.toString().trim();      if (".".equals(value)) {      } else       if ("..".equals(value)) {        handler.parentNode();      } else       if (".type".equals(value)) {        handler.nodeType();      } else {        if (ch == '/') {          if ("".equals(value)) {            handler.rootNode();          } else {            handler.nodeName(value);          }        } else {          handler.nodeTypeOrName(value);        }      }      if (ch == '/') {        handler.nodeSeparator(ctx.getLocation());      }    }  }} @TO@ ThenBody:{  char ch=ctx.getCharacter();  if (buffer.length() == 0) {    if (ch == '/') {      handler.rootNode();      handler.nodeSeparator(ctx.getLocation());    }  } else {    if (ch == '=') {      handler.nodeType(buffer.toString().trim());      handler.nodeTypeNameSeparator(ctx.getLocation());    } else     if (ch == ':') {      handler.nodeName(buffer.toString().trim());    } else {      final String value=buffer.toString().trim();      if (".".equals(value)) {      } else       if ("..".equals(value)) {        handler.parentNode();      } else       if (".type".equals(value)) {        handler.nodeType();      } else {        if (ch == '/') {          if ("".equals(value)) {            handler.rootNode();          } else {            handler.nodeName(value);          }        } else {          handler.nodeTypeOrName(value);        }      }      if (ch == '/') {        handler.nodeSeparator(ctx.getLocation());      }    }  }  propValueContent=false;} @AT@ 6364 @LENGTH@ 1817
---------------INS ExpressionStatement@@Assignment:propValueContent=false @TO@ Block@@ThenBody:{  char ch=ctx.getCharacter();  if (buffer.length() == 0) {    if (ch == '/') {      handler.rootNode();      handler.nodeSeparator(ctx.getLocation());    }  } else {    if (ch == '=') {      handler.nodeType(buffer.toString().trim());      handler.nodeTypeNameSeparator(ctx.getLocation());    } else     if (ch == ':') {      handler.nodeName(buffer.toString().trim());    } else {      final String value=buffer.toString().trim();      if (".".equals(value)) {      } else       if ("..".equals(value)) {        handler.parentNode();      } else       if (".type".equals(value)) {        handler.nodeType();      } else {        if (ch == '/') {          if ("".equals(value)) {            handler.rootNode();          } else {            handler.nodeName(value);          }        } else {          handler.nodeTypeOrName(value);        }      }      if (ch == '/') {        handler.nodeSeparator(ctx.getLocation());      }    }  }} @AT@ 8328 @LENGTH@ 25
------------------INS Assignment@@propValueContent=false @TO@ ExpressionStatement@@Assignment:propValueContent=false @AT@ 8328 @LENGTH@ 24
---------------------INS SimpleName@@propValueContent @TO@ Assignment@@propValueContent=false @AT@ 8328 @LENGTH@ 16
---------------------INS Operator@@= @TO@ Assignment@@propValueContent=false @AT@ 8344 @LENGTH@ 1
---------------------INS BooleanLiteral@@false @TO@ Assignment@@propValueContent=false @AT@ 8347 @LENGTH@ 5
---------UPD IfStatement@@if (stateId.equals(NodeState.ID)) {  char ch=ctx.getCharacter();  if (buffer.length() == 0) {    if (ch == '/') {      handler.rootNode();      handler.nodeSeparator(ctx.getLocation());    }  } else {    if (ch == '=') {      handler.nodeType(buffer.toString().trim());      handler.nodeTypeNameSeparator(ctx.getLocation());    } else     if (ch == ':') {      handler.nodeName(buffer.toString().trim());    } else {      final String value=buffer.toString().trim();      if (".".equals(value)) {      } else       if ("..".equals(value)) {        handler.parentNode();      } else       if (".type".equals(value)) {        handler.nodeType();      } else {        if (ch == '/') {          if ("".equals(value)) {            handler.rootNode();          } else {            handler.nodeName(value);          }        } else {          handler.nodeTypeOrName(value);        }      }      if (ch == '/') {        handler.nodeSeparator(ctx.getLocation());      }    }  }} @TO@ if (stateId.equals(NodeState.ID)) {  char ch=ctx.getCharacter();  if (buffer.length() == 0) {    if (ch == '/') {      handler.rootNode();      handler.nodeSeparator(ctx.getLocation());    }  } else {    if (ch == '=') {      handler.nodeType(buffer.toString().trim());      handler.nodeTypeNameSeparator(ctx.getLocation());    } else     if (ch == ':') {      handler.nodeName(buffer.toString().trim());    } else {      final String value=buffer.toString().trim();      if (".".equals(value)) {      } else       if ("..".equals(value)) {        handler.parentNode();      } else       if (".type".equals(value)) {        handler.nodeType();      } else {        if (ch == '/') {          if ("".equals(value)) {            handler.rootNode();          } else {            handler.nodeName(value);          }        } else {          handler.nodeTypeOrName(value);        }      }      if (ch == '/') {        handler.nodeSeparator(ctx.getLocation());      }    }  }  propValueContent=false;} @AT@ 6331 @LENGTH@ 1850
------------UPD Block@@ThenBody:{  char ch=ctx.getCharacter();  if (buffer.length() == 0) {    if (ch == '/') {      handler.rootNode();      handler.nodeSeparator(ctx.getLocation());    }  } else {    if (ch == '=') {      handler.nodeType(buffer.toString().trim());      handler.nodeTypeNameSeparator(ctx.getLocation());    } else     if (ch == ':') {      handler.nodeName(buffer.toString().trim());    } else {      final String value=buffer.toString().trim();      if (".".equals(value)) {      } else       if ("..".equals(value)) {        handler.parentNode();      } else       if (".type".equals(value)) {        handler.nodeType();      } else {        if (ch == '/') {          if ("".equals(value)) {            handler.rootNode();          } else {            handler.nodeName(value);          }        } else {          handler.nodeTypeOrName(value);        }      }      if (ch == '/') {        handler.nodeSeparator(ctx.getLocation());      }    }  }} @TO@ ThenBody:{  char ch=ctx.getCharacter();  if (buffer.length() == 0) {    if (ch == '/') {      handler.rootNode();      handler.nodeSeparator(ctx.getLocation());    }  } else {    if (ch == '=') {      handler.nodeType(buffer.toString().trim());      handler.nodeTypeNameSeparator(ctx.getLocation());    } else     if (ch == ':') {      handler.nodeName(buffer.toString().trim());    } else {      final String value=buffer.toString().trim();      if (".".equals(value)) {      } else       if ("..".equals(value)) {        handler.parentNode();      } else       if (".type".equals(value)) {        handler.nodeType();      } else {        if (ch == '/') {          if ("".equals(value)) {            handler.rootNode();          } else {            handler.nodeName(value);          }        } else {          handler.nodeTypeOrName(value);        }      }      if (ch == '/') {        handler.nodeSeparator(ctx.getLocation());      }    }  }  propValueContent=false;} @AT@ 6364 @LENGTH@ 1817
---------------INS ExpressionStatement@@Assignment:propValueContent=false @TO@ Block@@ThenBody:{  char ch=ctx.getCharacter();  if (buffer.length() == 0) {    if (ch == '/') {      handler.rootNode();      handler.nodeSeparator(ctx.getLocation());    }  } else {    if (ch == '=') {      handler.nodeType(buffer.toString().trim());      handler.nodeTypeNameSeparator(ctx.getLocation());    } else     if (ch == ':') {      handler.nodeName(buffer.toString().trim());    } else {      final String value=buffer.toString().trim();      if (".".equals(value)) {      } else       if ("..".equals(value)) {        handler.parentNode();      } else       if (".type".equals(value)) {        handler.nodeType();      } else {        if (ch == '/') {          if ("".equals(value)) {            handler.rootNode();          } else {            handler.nodeName(value);          }        } else {          handler.nodeTypeOrName(value);        }      }      if (ch == '/') {        handler.nodeSeparator(ctx.getLocation());      }    }  }} @AT@ 8328 @LENGTH@ 25
------------------INS Assignment@@propValueContent=false @TO@ ExpressionStatement@@Assignment:propValueContent=false @AT@ 8328 @LENGTH@ 24
---------------------INS SimpleName@@propValueContent @TO@ Assignment@@propValueContent=false @AT@ 8328 @LENGTH@ 16
---------------------INS Operator@@= @TO@ Assignment@@propValueContent=false @AT@ 8344 @LENGTH@ 1
---------------------INS BooleanLiteral@@false @TO@ Assignment@@propValueContent=false @AT@ 8347 @LENGTH@ 5
---------UPD IfStatement@@if (stateId.equals(NodeState.ID)) {  char ch=ctx.getCharacter();  if (buffer.length() == 0) {    if (ch == '/') {      handler.rootNode();      handler.nodeSeparator(ctx.getLocation());    }  } else {    if (ch == '=') {      handler.nodeType(buffer.toString().trim());      handler.nodeTypeNameSeparator(ctx.getLocation());    } else     if (ch == ':') {      handler.nodeName(buffer.toString().trim());    } else {      final String value=buffer.toString().trim();      if (".".equals(value)) {      } else       if ("..".equals(value)) {        handler.parentNode();      } else       if (".type".equals(value)) {        handler.nodeType();      } else {        if (ch == '/') {          if ("".equals(value)) {            handler.rootNode();          } else {            handler.nodeName(value);          }        } else {          handler.nodeTypeOrName(value);        }      }      if (ch == '/') {        handler.nodeSeparator(ctx.getLocation());      }    }  }} @TO@ if (stateId.equals(NodeState.ID)) {  char ch=ctx.getCharacter();  if (buffer.length() == 0) {    if (ch == '/') {      handler.rootNode();      handler.nodeSeparator(ctx.getLocation());    }  } else {    if (ch == '=') {      handler.nodeType(buffer.toString().trim());      handler.nodeTypeNameSeparator(ctx.getLocation());    } else     if (ch == ':') {      handler.nodeName(buffer.toString().trim());    } else {      final String value=buffer.toString().trim();      if (".".equals(value)) {      } else       if ("..".equals(value)) {        handler.parentNode();      } else       if (".type".equals(value)) {        handler.nodeType();      } else {        if (ch == '/') {          if ("".equals(value)) {            handler.rootNode();          } else {            handler.nodeName(value);          }        } else {          handler.nodeTypeOrName(value);        }      }      if (ch == '/') {        handler.nodeSeparator(ctx.getLocation());      }    }  }  propValueContent=false;} @AT@ 6331 @LENGTH@ 1850
------------UPD Block@@ThenBody:{  char ch=ctx.getCharacter();  if (buffer.length() == 0) {    if (ch == '/') {      handler.rootNode();      handler.nodeSeparator(ctx.getLocation());    }  } else {    if (ch == '=') {      handler.nodeType(buffer.toString().trim());      handler.nodeTypeNameSeparator(ctx.getLocation());    } else     if (ch == ':') {      handler.nodeName(buffer.toString().trim());    } else {      final String value=buffer.toString().trim();      if (".".equals(value)) {      } else       if ("..".equals(value)) {        handler.parentNode();      } else       if (".type".equals(value)) {        handler.nodeType();      } else {        if (ch == '/') {          if ("".equals(value)) {            handler.rootNode();          } else {            handler.nodeName(value);          }        } else {          handler.nodeTypeOrName(value);        }      }      if (ch == '/') {        handler.nodeSeparator(ctx.getLocation());      }    }  }} @TO@ ThenBody:{  char ch=ctx.getCharacter();  if (buffer.length() == 0) {    if (ch == '/') {      handler.rootNode();      handler.nodeSeparator(ctx.getLocation());    }  } else {    if (ch == '=') {      handler.nodeType(buffer.toString().trim());      handler.nodeTypeNameSeparator(ctx.getLocation());    } else     if (ch == ':') {      handler.nodeName(buffer.toString().trim());    } else {      final String value=buffer.toString().trim();      if (".".equals(value)) {      } else       if ("..".equals(value)) {        handler.parentNode();      } else       if (".type".equals(value)) {        handler.nodeType();      } else {        if (ch == '/') {          if ("".equals(value)) {            handler.rootNode();          } else {            handler.nodeName(value);          }        } else {          handler.nodeTypeOrName(value);        }      }      if (ch == '/') {        handler.nodeSeparator(ctx.getLocation());      }    }  }  propValueContent=false;} @AT@ 6364 @LENGTH@ 1817
---------------INS ExpressionStatement@@Assignment:propValueContent=false @TO@ Block@@ThenBody:{  char ch=ctx.getCharacter();  if (buffer.length() == 0) {    if (ch == '/') {      handler.rootNode();      handler.nodeSeparator(ctx.getLocation());    }  } else {    if (ch == '=') {      handler.nodeType(buffer.toString().trim());      handler.nodeTypeNameSeparator(ctx.getLocation());    } else     if (ch == ':') {      handler.nodeName(buffer.toString().trim());    } else {      final String value=buffer.toString().trim();      if (".".equals(value)) {      } else       if ("..".equals(value)) {        handler.parentNode();      } else       if (".type".equals(value)) {        handler.nodeType();      } else {        if (ch == '/') {          if ("".equals(value)) {            handler.rootNode();          } else {            handler.nodeName(value);          }        } else {          handler.nodeTypeOrName(value);        }      }      if (ch == '/') {        handler.nodeSeparator(ctx.getLocation());      }    }  }} @AT@ 8328 @LENGTH@ 25
------------------INS Assignment@@propValueContent=false @TO@ ExpressionStatement@@Assignment:propValueContent=false @AT@ 8328 @LENGTH@ 24
---------------------INS SimpleName@@propValueContent @TO@ Assignment@@propValueContent=false @AT@ 8328 @LENGTH@ 16
---------------------INS Operator@@= @TO@ Assignment@@propValueContent=false @AT@ 8344 @LENGTH@ 1
---------------------INS BooleanLiteral@@false @TO@ Assignment@@propValueContent=false @AT@ 8347 @LENGTH@ 5
---UPD IfStatement@@if (stateId.equals(OperationNameState.ID)) {  handler.operationName(buffer.toString().trim());} else if (stateId.equals(NodeState.ID)) {  char ch=ctx.getCharacter();  if (buffer.length() == 0) {    if (ch == '/') {      handler.rootNode();      handler.nodeSeparator(ctx.getLocation());    }  } else {    if (ch == '=') {      handler.nodeType(buffer.toString().trim());      handler.nodeTypeNameSeparator(ctx.getLocation());    } else     if (ch == ':') {      handler.nodeName(buffer.toString().trim());    } else {      final String value=buffer.toString().trim();      if (".".equals(value)) {      } else       if ("..".equals(value)) {        handler.parentNode();      } else       if (".type".equals(value)) {        handler.nodeType();      } else {        if (ch == '/') {          if ("".equals(value)) {            handler.rootNode();          } else {            handler.nodeName(value);          }        } else {          handler.nodeTypeOrName(value);        }      }      if (ch == '/') {        handler.nodeSeparator(ctx.getLocation());      }    }  }} @TO@ if (stateId.equals(OperationNameState.ID)) {  handler.operationName(buffer.toString().trim());} else if (stateId.equals(NodeState.ID)) {  char ch=ctx.getCharacter();  if (buffer.length() == 0) {    if (ch == '/') {      handler.rootNode();      handler.nodeSeparator(ctx.getLocation());    }  } else {    if (ch == '=') {      handler.nodeType(buffer.toString().trim());      handler.nodeTypeNameSeparator(ctx.getLocation());    } else     if (ch == ':') {      handler.nodeName(buffer.toString().trim());    } else {      final String value=buffer.toString().trim();      if (".".equals(value)) {      } else       if ("..".equals(value)) {        handler.parentNode();      } else       if (".type".equals(value)) {        handler.nodeType();      } else {        if (ch == '/') {          if ("".equals(value)) {            handler.rootNode();          } else {            handler.nodeName(value);          }        } else {          handler.nodeTypeOrName(value);        }      }      if (ch == '/') {        handler.nodeSeparator(ctx.getLocation());      }    }  }  propValueContent=false;} @AT@ 6195 @LENGTH@ 1986
------UPD Block@@ElseBody:if (stateId.equals(NodeState.ID)) {  char ch=ctx.getCharacter();  if (buffer.length() == 0) {    if (ch == '/') {      handler.rootNode();      handler.nodeSeparator(ctx.getLocation());    }  } else {    if (ch == '=') {      handler.nodeType(buffer.toString().trim());      handler.nodeTypeNameSeparator(ctx.getLocation());    } else     if (ch == ':') {      handler.nodeName(buffer.toString().trim());    } else {      final String value=buffer.toString().trim();      if (".".equals(value)) {      } else       if ("..".equals(value)) {        handler.parentNode();      } else       if (".type".equals(value)) {        handler.nodeType();      } else {        if (ch == '/') {          if ("".equals(value)) {            handler.rootNode();          } else {            handler.nodeName(value);          }        } else {          handler.nodeTypeOrName(value);        }      }      if (ch == '/') {        handler.nodeSeparator(ctx.getLocation());      }    }  }} @TO@ ElseBody:if (stateId.equals(NodeState.ID)) {  char ch=ctx.getCharacter();  if (buffer.length() == 0) {    if (ch == '/') {      handler.rootNode();      handler.nodeSeparator(ctx.getLocation());    }  } else {    if (ch == '=') {      handler.nodeType(buffer.toString().trim());      handler.nodeTypeNameSeparator(ctx.getLocation());    } else     if (ch == ':') {      handler.nodeName(buffer.toString().trim());    } else {      final String value=buffer.toString().trim();      if (".".equals(value)) {      } else       if ("..".equals(value)) {        handler.parentNode();      } else       if (".type".equals(value)) {        handler.nodeType();      } else {        if (ch == '/') {          if ("".equals(value)) {            handler.rootNode();          } else {            handler.nodeName(value);          }        } else {          handler.nodeTypeOrName(value);        }      }      if (ch == '/') {        handler.nodeSeparator(ctx.getLocation());      }    }  }  propValueContent=false;} @AT@ 6331 @LENGTH@ 1850
---------UPD IfStatement@@if (stateId.equals(NodeState.ID)) {  char ch=ctx.getCharacter();  if (buffer.length() == 0) {    if (ch == '/') {      handler.rootNode();      handler.nodeSeparator(ctx.getLocation());    }  } else {    if (ch == '=') {      handler.nodeType(buffer.toString().trim());      handler.nodeTypeNameSeparator(ctx.getLocation());    } else     if (ch == ':') {      handler.nodeName(buffer.toString().trim());    } else {      final String value=buffer.toString().trim();      if (".".equals(value)) {      } else       if ("..".equals(value)) {        handler.parentNode();      } else       if (".type".equals(value)) {        handler.nodeType();      } else {        if (ch == '/') {          if ("".equals(value)) {            handler.rootNode();          } else {            handler.nodeName(value);          }        } else {          handler.nodeTypeOrName(value);        }      }      if (ch == '/') {        handler.nodeSeparator(ctx.getLocation());      }    }  }} @TO@ if (stateId.equals(NodeState.ID)) {  char ch=ctx.getCharacter();  if (buffer.length() == 0) {    if (ch == '/') {      handler.rootNode();      handler.nodeSeparator(ctx.getLocation());    }  } else {    if (ch == '=') {      handler.nodeType(buffer.toString().trim());      handler.nodeTypeNameSeparator(ctx.getLocation());    } else     if (ch == ':') {      handler.nodeName(buffer.toString().trim());    } else {      final String value=buffer.toString().trim();      if (".".equals(value)) {      } else       if ("..".equals(value)) {        handler.parentNode();      } else       if (".type".equals(value)) {        handler.nodeType();      } else {        if (ch == '/') {          if ("".equals(value)) {            handler.rootNode();          } else {            handler.nodeName(value);          }        } else {          handler.nodeTypeOrName(value);        }      }      if (ch == '/') {        handler.nodeSeparator(ctx.getLocation());      }    }  }  propValueContent=false;} @AT@ 6331 @LENGTH@ 1850
------------UPD Block@@ThenBody:{  char ch=ctx.getCharacter();  if (buffer.length() == 0) {    if (ch == '/') {      handler.rootNode();      handler.nodeSeparator(ctx.getLocation());    }  } else {    if (ch == '=') {      handler.nodeType(buffer.toString().trim());      handler.nodeTypeNameSeparator(ctx.getLocation());    } else     if (ch == ':') {      handler.nodeName(buffer.toString().trim());    } else {      final String value=buffer.toString().trim();      if (".".equals(value)) {      } else       if ("..".equals(value)) {        handler.parentNode();      } else       if (".type".equals(value)) {        handler.nodeType();      } else {        if (ch == '/') {          if ("".equals(value)) {            handler.rootNode();          } else {            handler.nodeName(value);          }        } else {          handler.nodeTypeOrName(value);        }      }      if (ch == '/') {        handler.nodeSeparator(ctx.getLocation());      }    }  }} @TO@ ThenBody:{  char ch=ctx.getCharacter();  if (buffer.length() == 0) {    if (ch == '/') {      handler.rootNode();      handler.nodeSeparator(ctx.getLocation());    }  } else {    if (ch == '=') {      handler.nodeType(buffer.toString().trim());      handler.nodeTypeNameSeparator(ctx.getLocation());    } else     if (ch == ':') {      handler.nodeName(buffer.toString().trim());    } else {      final String value=buffer.toString().trim();      if (".".equals(value)) {      } else       if ("..".equals(value)) {        handler.parentNode();      } else       if (".type".equals(value)) {        handler.nodeType();      } else {        if (ch == '/') {          if ("".equals(value)) {            handler.rootNode();          } else {            handler.nodeName(value);          }        } else {          handler.nodeTypeOrName(value);        }      }      if (ch == '/') {        handler.nodeSeparator(ctx.getLocation());      }    }  }  propValueContent=false;} @AT@ 6364 @LENGTH@ 1817
---------------INS ExpressionStatement@@Assignment:propValueContent=false @TO@ Block@@ThenBody:{  char ch=ctx.getCharacter();  if (buffer.length() == 0) {    if (ch == '/') {      handler.rootNode();      handler.nodeSeparator(ctx.getLocation());    }  } else {    if (ch == '=') {      handler.nodeType(buffer.toString().trim());      handler.nodeTypeNameSeparator(ctx.getLocation());    } else     if (ch == ':') {      handler.nodeName(buffer.toString().trim());    } else {      final String value=buffer.toString().trim();      if (".".equals(value)) {      } else       if ("..".equals(value)) {        handler.parentNode();      } else       if (".type".equals(value)) {        handler.nodeType();      } else {        if (ch == '/') {          if ("".equals(value)) {            handler.rootNode();          } else {            handler.nodeName(value);          }        } else {          handler.nodeTypeOrName(value);        }      }      if (ch == '/') {        handler.nodeSeparator(ctx.getLocation());      }    }  }} @AT@ 8328 @LENGTH@ 25
------------------INS Assignment@@propValueContent=false @TO@ ExpressionStatement@@Assignment:propValueContent=false @AT@ 8328 @LENGTH@ 24
---------------------INS SimpleName@@propValueContent @TO@ Assignment@@propValueContent=false @AT@ 8328 @LENGTH@ 16
---------------------INS Operator@@= @TO@ Assignment@@propValueContent=false @AT@ 8344 @LENGTH@ 1
---------------------INS BooleanLiteral@@false @TO@ Assignment@@propValueContent=false @AT@ 8347 @LENGTH@ 5
---------UPD IfStatement@@if (stateId.equals(NodeState.ID)) {  char ch=ctx.getCharacter();  if (buffer.length() == 0) {    if (ch == '/') {      handler.rootNode();      handler.nodeSeparator(ctx.getLocation());    }  } else {    if (ch == '=') {      handler.nodeType(buffer.toString().trim());      handler.nodeTypeNameSeparator(ctx.getLocation());    } else     if (ch == ':') {      handler.nodeName(buffer.toString().trim());    } else {      final String value=buffer.toString().trim();      if (".".equals(value)) {      } else       if ("..".equals(value)) {        handler.parentNode();      } else       if (".type".equals(value)) {        handler.nodeType();      } else {        if (ch == '/') {          if ("".equals(value)) {            handler.rootNode();          } else {            handler.nodeName(value);          }        } else {          handler.nodeTypeOrName(value);        }      }      if (ch == '/') {        handler.nodeSeparator(ctx.getLocation());      }    }  }} @TO@ if (stateId.equals(NodeState.ID)) {  char ch=ctx.getCharacter();  if (buffer.length() == 0) {    if (ch == '/') {      handler.rootNode();      handler.nodeSeparator(ctx.getLocation());    }  } else {    if (ch == '=') {      handler.nodeType(buffer.toString().trim());      handler.nodeTypeNameSeparator(ctx.getLocation());    } else     if (ch == ':') {      handler.nodeName(buffer.toString().trim());    } else {      final String value=buffer.toString().trim();      if (".".equals(value)) {      } else       if ("..".equals(value)) {        handler.parentNode();      } else       if (".type".equals(value)) {        handler.nodeType();      } else {        if (ch == '/') {          if ("".equals(value)) {            handler.rootNode();          } else {            handler.nodeName(value);          }        } else {          handler.nodeTypeOrName(value);        }      }      if (ch == '/') {        handler.nodeSeparator(ctx.getLocation());      }    }  }  propValueContent=false;} @AT@ 6331 @LENGTH@ 1850
------------UPD Block@@ThenBody:{  char ch=ctx.getCharacter();  if (buffer.length() == 0) {    if (ch == '/') {      handler.rootNode();      handler.nodeSeparator(ctx.getLocation());    }  } else {    if (ch == '=') {      handler.nodeType(buffer.toString().trim());      handler.nodeTypeNameSeparator(ctx.getLocation());    } else     if (ch == ':') {      handler.nodeName(buffer.toString().trim());    } else {      final String value=buffer.toString().trim();      if (".".equals(value)) {      } else       if ("..".equals(value)) {        handler.parentNode();      } else       if (".type".equals(value)) {        handler.nodeType();      } else {        if (ch == '/') {          if ("".equals(value)) {            handler.rootNode();          } else {            handler.nodeName(value);          }        } else {          handler.nodeTypeOrName(value);        }      }      if (ch == '/') {        handler.nodeSeparator(ctx.getLocation());      }    }  }} @TO@ ThenBody:{  char ch=ctx.getCharacter();  if (buffer.length() == 0) {    if (ch == '/') {      handler.rootNode();      handler.nodeSeparator(ctx.getLocation());    }  } else {    if (ch == '=') {      handler.nodeType(buffer.toString().trim());      handler.nodeTypeNameSeparator(ctx.getLocation());    } else     if (ch == ':') {      handler.nodeName(buffer.toString().trim());    } else {      final String value=buffer.toString().trim();      if (".".equals(value)) {      } else       if ("..".equals(value)) {        handler.parentNode();      } else       if (".type".equals(value)) {        handler.nodeType();      } else {        if (ch == '/') {          if ("".equals(value)) {            handler.rootNode();          } else {            handler.nodeName(value);          }        } else {          handler.nodeTypeOrName(value);        }      }      if (ch == '/') {        handler.nodeSeparator(ctx.getLocation());      }    }  }  propValueContent=false;} @AT@ 6364 @LENGTH@ 1817
---------------INS ExpressionStatement@@Assignment:propValueContent=false @TO@ Block@@ThenBody:{  char ch=ctx.getCharacter();  if (buffer.length() == 0) {    if (ch == '/') {      handler.rootNode();      handler.nodeSeparator(ctx.getLocation());    }  } else {    if (ch == '=') {      handler.nodeType(buffer.toString().trim());      handler.nodeTypeNameSeparator(ctx.getLocation());    } else     if (ch == ':') {      handler.nodeName(buffer.toString().trim());    } else {      final String value=buffer.toString().trim();      if (".".equals(value)) {      } else       if ("..".equals(value)) {        handler.parentNode();      } else       if (".type".equals(value)) {        handler.nodeType();      } else {        if (ch == '/') {          if ("".equals(value)) {            handler.rootNode();          } else {            handler.nodeName(value);          }        } else {          handler.nodeTypeOrName(value);        }      }      if (ch == '/') {        handler.nodeSeparator(ctx.getLocation());      }    }  }} @AT@ 8328 @LENGTH@ 25
------------------INS Assignment@@propValueContent=false @TO@ ExpressionStatement@@Assignment:propValueContent=false @AT@ 8328 @LENGTH@ 24
---------------------INS SimpleName@@propValueContent @TO@ Assignment@@propValueContent=false @AT@ 8328 @LENGTH@ 16
---------------------INS Operator@@= @TO@ Assignment@@propValueContent=false @AT@ 8344 @LENGTH@ 1
---------------------INS BooleanLiteral@@false @TO@ Assignment@@propValueContent=false @AT@ 8347 @LENGTH@ 5
---------UPD IfStatement@@if (stateId.equals(NodeState.ID)) {  char ch=ctx.getCharacter();  if (buffer.length() == 0) {    if (ch == '/') {      handler.rootNode();      handler.nodeSeparator(ctx.getLocation());    }  } else {    if (ch == '=') {      handler.nodeType(buffer.toString().trim());      handler.nodeTypeNameSeparator(ctx.getLocation());    } else     if (ch == ':') {      handler.nodeName(buffer.toString().trim());    } else {      final String value=buffer.toString().trim();      if (".".equals(value)) {      } else       if ("..".equals(value)) {        handler.parentNode();      } else       if (".type".equals(value)) {        handler.nodeType();      } else {        if (ch == '/') {          if ("".equals(value)) {            handler.rootNode();          } else {            handler.nodeName(value);          }        } else {          handler.nodeTypeOrName(value);        }      }      if (ch == '/') {        handler.nodeSeparator(ctx.getLocation());      }    }  }} @TO@ if (stateId.equals(NodeState.ID)) {  char ch=ctx.getCharacter();  if (buffer.length() == 0) {    if (ch == '/') {      handler.rootNode();      handler.nodeSeparator(ctx.getLocation());    }  } else {    if (ch == '=') {      handler.nodeType(buffer.toString().trim());      handler.nodeTypeNameSeparator(ctx.getLocation());    } else     if (ch == ':') {      handler.nodeName(buffer.toString().trim());    } else {      final String value=buffer.toString().trim();      if (".".equals(value)) {      } else       if ("..".equals(value)) {        handler.parentNode();      } else       if (".type".equals(value)) {        handler.nodeType();      } else {        if (ch == '/') {          if ("".equals(value)) {            handler.rootNode();          } else {            handler.nodeName(value);          }        } else {          handler.nodeTypeOrName(value);        }      }      if (ch == '/') {        handler.nodeSeparator(ctx.getLocation());      }    }  }  propValueContent=false;} @AT@ 6331 @LENGTH@ 1850
------------UPD Block@@ThenBody:{  char ch=ctx.getCharacter();  if (buffer.length() == 0) {    if (ch == '/') {      handler.rootNode();      handler.nodeSeparator(ctx.getLocation());    }  } else {    if (ch == '=') {      handler.nodeType(buffer.toString().trim());      handler.nodeTypeNameSeparator(ctx.getLocation());    } else     if (ch == ':') {      handler.nodeName(buffer.toString().trim());    } else {      final String value=buffer.toString().trim();      if (".".equals(value)) {      } else       if ("..".equals(value)) {        handler.parentNode();      } else       if (".type".equals(value)) {        handler.nodeType();      } else {        if (ch == '/') {          if ("".equals(value)) {            handler.rootNode();          } else {            handler.nodeName(value);          }        } else {          handler.nodeTypeOrName(value);        }      }      if (ch == '/') {        handler.nodeSeparator(ctx.getLocation());      }    }  }} @TO@ ThenBody:{  char ch=ctx.getCharacter();  if (buffer.length() == 0) {    if (ch == '/') {      handler.rootNode();      handler.nodeSeparator(ctx.getLocation());    }  } else {    if (ch == '=') {      handler.nodeType(buffer.toString().trim());      handler.nodeTypeNameSeparator(ctx.getLocation());    } else     if (ch == ':') {      handler.nodeName(buffer.toString().trim());    } else {      final String value=buffer.toString().trim();      if (".".equals(value)) {      } else       if ("..".equals(value)) {        handler.parentNode();      } else       if (".type".equals(value)) {        handler.nodeType();      } else {        if (ch == '/') {          if ("".equals(value)) {            handler.rootNode();          } else {            handler.nodeName(value);          }        } else {          handler.nodeTypeOrName(value);        }      }      if (ch == '/') {        handler.nodeSeparator(ctx.getLocation());      }    }  }  propValueContent=false;} @AT@ 6364 @LENGTH@ 1817
---------------INS ExpressionStatement@@Assignment:propValueContent=false @TO@ Block@@ThenBody:{  char ch=ctx.getCharacter();  if (buffer.length() == 0) {    if (ch == '/') {      handler.rootNode();      handler.nodeSeparator(ctx.getLocation());    }  } else {    if (ch == '=') {      handler.nodeType(buffer.toString().trim());      handler.nodeTypeNameSeparator(ctx.getLocation());    } else     if (ch == ':') {      handler.nodeName(buffer.toString().trim());    } else {      final String value=buffer.toString().trim();      if (".".equals(value)) {      } else       if ("..".equals(value)) {        handler.parentNode();      } else       if (".type".equals(value)) {        handler.nodeType();      } else {        if (ch == '/') {          if ("".equals(value)) {            handler.rootNode();          } else {            handler.nodeName(value);          }        } else {          handler.nodeTypeOrName(value);        }      }      if (ch == '/') {        handler.nodeSeparator(ctx.getLocation());      }    }  }} @AT@ 8328 @LENGTH@ 25
------------------INS Assignment@@propValueContent=false @TO@ ExpressionStatement@@Assignment:propValueContent=false @AT@ 8328 @LENGTH@ 24
---------------------INS SimpleName@@propValueContent @TO@ Assignment@@propValueContent=false @AT@ 8328 @LENGTH@ 16
---------------------INS Operator@@= @TO@ Assignment@@propValueContent=false @AT@ 8344 @LENGTH@ 1
---------------------INS BooleanLiteral@@false @TO@ Assignment@@propValueContent=false @AT@ 8347 @LENGTH@ 5
---------UPD IfStatement@@if (stateId.equals(NodeState.ID)) {  char ch=ctx.getCharacter();  if (buffer.length() == 0) {    if (ch == '/') {      handler.rootNode();      handler.nodeSeparator(ctx.getLocation());    }  } else {    if (ch == '=') {      handler.nodeType(buffer.toString().trim());      handler.nodeTypeNameSeparator(ctx.getLocation());    } else     if (ch == ':') {      handler.nodeName(buffer.toString().trim());    } else {      final String value=buffer.toString().trim();      if (".".equals(value)) {      } else       if ("..".equals(value)) {        handler.parentNode();      } else       if (".type".equals(value)) {        handler.nodeType();      } else {        if (ch == '/') {          if ("".equals(value)) {            handler.rootNode();          } else {            handler.nodeName(value);          }        } else {          handler.nodeTypeOrName(value);        }      }      if (ch == '/') {        handler.nodeSeparator(ctx.getLocation());      }    }  }} @TO@ if (stateId.equals(NodeState.ID)) {  char ch=ctx.getCharacter();  if (buffer.length() == 0) {    if (ch == '/') {      handler.rootNode();      handler.nodeSeparator(ctx.getLocation());    }  } else {    if (ch == '=') {      handler.nodeType(buffer.toString().trim());      handler.nodeTypeNameSeparator(ctx.getLocation());    } else     if (ch == ':') {      handler.nodeName(buffer.toString().trim());    } else {      final String value=buffer.toString().trim();      if (".".equals(value)) {      } else       if ("..".equals(value)) {        handler.parentNode();      } else       if (".type".equals(value)) {        handler.nodeType();      } else {        if (ch == '/') {          if ("".equals(value)) {            handler.rootNode();          } else {            handler.nodeName(value);          }        } else {          handler.nodeTypeOrName(value);        }      }      if (ch == '/') {        handler.nodeSeparator(ctx.getLocation());      }    }  }  propValueContent=false;} @AT@ 6331 @LENGTH@ 1850
------------UPD Block@@ThenBody:{  char ch=ctx.getCharacter();  if (buffer.length() == 0) {    if (ch == '/') {      handler.rootNode();      handler.nodeSeparator(ctx.getLocation());    }  } else {    if (ch == '=') {      handler.nodeType(buffer.toString().trim());      handler.nodeTypeNameSeparator(ctx.getLocation());    } else     if (ch == ':') {      handler.nodeName(buffer.toString().trim());    } else {      final String value=buffer.toString().trim();      if (".".equals(value)) {      } else       if ("..".equals(value)) {        handler.parentNode();      } else       if (".type".equals(value)) {        handler.nodeType();      } else {        if (ch == '/') {          if ("".equals(value)) {            handler.rootNode();          } else {            handler.nodeName(value);          }        } else {          handler.nodeTypeOrName(value);        }      }      if (ch == '/') {        handler.nodeSeparator(ctx.getLocation());      }    }  }} @TO@ ThenBody:{  char ch=ctx.getCharacter();  if (buffer.length() == 0) {    if (ch == '/') {      handler.rootNode();      handler.nodeSeparator(ctx.getLocation());    }  } else {    if (ch == '=') {      handler.nodeType(buffer.toString().trim());      handler.nodeTypeNameSeparator(ctx.getLocation());    } else     if (ch == ':') {      handler.nodeName(buffer.toString().trim());    } else {      final String value=buffer.toString().trim();      if (".".equals(value)) {      } else       if ("..".equals(value)) {        handler.parentNode();      } else       if (".type".equals(value)) {        handler.nodeType();      } else {        if (ch == '/') {          if ("".equals(value)) {            handler.rootNode();          } else {            handler.nodeName(value);          }        } else {          handler.nodeTypeOrName(value);        }      }      if (ch == '/') {        handler.nodeSeparator(ctx.getLocation());      }    }  }  propValueContent=false;} @AT@ 6364 @LENGTH@ 1817
---------------INS ExpressionStatement@@Assignment:propValueContent=false @TO@ Block@@ThenBody:{  char ch=ctx.getCharacter();  if (buffer.length() == 0) {    if (ch == '/') {      handler.rootNode();      handler.nodeSeparator(ctx.getLocation());    }  } else {    if (ch == '=') {      handler.nodeType(buffer.toString().trim());      handler.nodeTypeNameSeparator(ctx.getLocation());    } else     if (ch == ':') {      handler.nodeName(buffer.toString().trim());    } else {      final String value=buffer.toString().trim();      if (".".equals(value)) {      } else       if ("..".equals(value)) {        handler.parentNode();      } else       if (".type".equals(value)) {        handler.nodeType();      } else {        if (ch == '/') {          if ("".equals(value)) {            handler.rootNode();          } else {            handler.nodeName(value);          }        } else {          handler.nodeTypeOrName(value);        }      }      if (ch == '/') {        handler.nodeSeparator(ctx.getLocation());      }    }  }} @AT@ 8328 @LENGTH@ 25
------------------INS Assignment@@propValueContent=false @TO@ ExpressionStatement@@Assignment:propValueContent=false @AT@ 8328 @LENGTH@ 24
---------------------INS SimpleName@@propValueContent @TO@ Assignment@@propValueContent=false @AT@ 8328 @LENGTH@ 16
---------------------INS Operator@@= @TO@ Assignment@@propValueContent=false @AT@ 8344 @LENGTH@ 1
---------------------INS BooleanLiteral@@false @TO@ Assignment@@propValueContent=false @AT@ 8347 @LENGTH@ 5
---------UPD IfStatement@@if (stateId.equals(NodeState.ID)) {  char ch=ctx.getCharacter();  if (buffer.length() == 0) {    if (ch == '/') {      handler.rootNode();      handler.nodeSeparator(ctx.getLocation());    }  } else {    if (ch == '=') {      handler.nodeType(buffer.toString().trim());      handler.nodeTypeNameSeparator(ctx.getLocation());    } else     if (ch == ':') {      handler.nodeName(buffer.toString().trim());    } else {      final String value=buffer.toString().trim();      if (".".equals(value)) {      } else       if ("..".equals(value)) {        handler.parentNode();      } else       if (".type".equals(value)) {        handler.nodeType();      } else {        if (ch == '/') {          if ("".equals(value)) {            handler.rootNode();          } else {            handler.nodeName(value);          }        } else {          handler.nodeTypeOrName(value);        }      }      if (ch == '/') {        handler.nodeSeparator(ctx.getLocation());      }    }  }} @TO@ if (stateId.equals(NodeState.ID)) {  char ch=ctx.getCharacter();  if (buffer.length() == 0) {    if (ch == '/') {      handler.rootNode();      handler.nodeSeparator(ctx.getLocation());    }  } else {    if (ch == '=') {      handler.nodeType(buffer.toString().trim());      handler.nodeTypeNameSeparator(ctx.getLocation());    } else     if (ch == ':') {      handler.nodeName(buffer.toString().trim());    } else {      final String value=buffer.toString().trim();      if (".".equals(value)) {      } else       if ("..".equals(value)) {        handler.parentNode();      } else       if (".type".equals(value)) {        handler.nodeType();      } else {        if (ch == '/') {          if ("".equals(value)) {            handler.rootNode();          } else {            handler.nodeName(value);          }        } else {          handler.nodeTypeOrName(value);        }      }      if (ch == '/') {        handler.nodeSeparator(ctx.getLocation());      }    }  }  propValueContent=false;} @AT@ 6331 @LENGTH@ 1850
------------UPD Block@@ThenBody:{  char ch=ctx.getCharacter();  if (buffer.length() == 0) {    if (ch == '/') {      handler.rootNode();      handler.nodeSeparator(ctx.getLocation());    }  } else {    if (ch == '=') {      handler.nodeType(buffer.toString().trim());      handler.nodeTypeNameSeparator(ctx.getLocation());    } else     if (ch == ':') {      handler.nodeName(buffer.toString().trim());    } else {      final String value=buffer.toString().trim();      if (".".equals(value)) {      } else       if ("..".equals(value)) {        handler.parentNode();      } else       if (".type".equals(value)) {        handler.nodeType();      } else {        if (ch == '/') {          if ("".equals(value)) {            handler.rootNode();          } else {            handler.nodeName(value);          }        } else {          handler.nodeTypeOrName(value);        }      }      if (ch == '/') {        handler.nodeSeparator(ctx.getLocation());      }    }  }} @TO@ ThenBody:{  char ch=ctx.getCharacter();  if (buffer.length() == 0) {    if (ch == '/') {      handler.rootNode();      handler.nodeSeparator(ctx.getLocation());    }  } else {    if (ch == '=') {      handler.nodeType(buffer.toString().trim());      handler.nodeTypeNameSeparator(ctx.getLocation());    } else     if (ch == ':') {      handler.nodeName(buffer.toString().trim());    } else {      final String value=buffer.toString().trim();      if (".".equals(value)) {      } else       if ("..".equals(value)) {        handler.parentNode();      } else       if (".type".equals(value)) {        handler.nodeType();      } else {        if (ch == '/') {          if ("".equals(value)) {            handler.rootNode();          } else {            handler.nodeName(value);          }        } else {          handler.nodeTypeOrName(value);        }      }      if (ch == '/') {        handler.nodeSeparator(ctx.getLocation());      }    }  }  propValueContent=false;} @AT@ 6364 @LENGTH@ 1817
---------------INS ExpressionStatement@@Assignment:propValueContent=false @TO@ Block@@ThenBody:{  char ch=ctx.getCharacter();  if (buffer.length() == 0) {    if (ch == '/') {      handler.rootNode();      handler.nodeSeparator(ctx.getLocation());    }  } else {    if (ch == '=') {      handler.nodeType(buffer.toString().trim());      handler.nodeTypeNameSeparator(ctx.getLocation());    } else     if (ch == ':') {      handler.nodeName(buffer.toString().trim());    } else {      final String value=buffer.toString().trim();      if (".".equals(value)) {      } else       if ("..".equals(value)) {        handler.parentNode();      } else       if (".type".equals(value)) {        handler.nodeType();      } else {        if (ch == '/') {          if ("".equals(value)) {            handler.rootNode();          } else {            handler.nodeName(value);          }        } else {          handler.nodeTypeOrName(value);        }      }      if (ch == '/') {        handler.nodeSeparator(ctx.getLocation());      }    }  }} @AT@ 8328 @LENGTH@ 25
------------------INS Assignment@@propValueContent=false @TO@ ExpressionStatement@@Assignment:propValueContent=false @AT@ 8328 @LENGTH@ 24
---------------------INS SimpleName@@propValueContent @TO@ Assignment@@propValueContent=false @AT@ 8328 @LENGTH@ 16
---------------------INS Operator@@= @TO@ Assignment@@propValueContent=false @AT@ 8344 @LENGTH@ 1
---------------------INS BooleanLiteral@@false @TO@ Assignment@@propValueContent=false @AT@ 8347 @LENGTH@ 5


UPD ThrowStatement@@ClassInstanceCreation:new DeploymentUnitProcessingException("No matching method found for '" + className + "'") @TO@ ClassInstanceCreation:new DeploymentUnitProcessingException("No matching method found for method '" + name + "' on '"+ className+ "'") @AT@ 3384 @LENGTH@ 96
---UPD ClassInstanceCreation@@DeploymentUnitProcessingException["No matching method found for '" + className + "'"] @TO@ DeploymentUnitProcessingException["No matching method found for method '" + name + "' on '"+ className+ "'"] @AT@ 3390 @LENGTH@ 89
------UPD InfixExpression@@"No matching method found for '" + className + "'" @TO@ "No matching method found for method '" + name + "' on '"+ className+ "'" @AT@ 3428 @LENGTH@ 50
---------UPD StringLiteral@@"No matching method found for '" @TO@ "No matching method found for method '" @AT@ 3428 @LENGTH@ 32
---------INS SimpleName@@name @TO@ InfixExpression@@"No matching method found for '" + className + "'" @AT@ 3470 @LENGTH@ 4
---------INS StringLiteral@@"' on '" @TO@ InfixExpression@@"No matching method found for '" + className + "'" @AT@ 3476 @LENGTH@ 8


INS MethodDeclaration@@protected, static, void, MethodName:writeElement, final XMLExtendedStreamWriter writer, final Element element, XMLStreamException,  @TO@ TypeDeclaration@@[public, abstract]CommonXml, [XMLElementReader<List<ModelNode>>, XMLElementWriter<ModelMarshallingContext>] @AT@ 11079 @LENGTH@ 187
---INS Modifier@@protected @TO@ MethodDeclaration@@protected, static, void, MethodName:writeElement, final XMLExtendedStreamWriter writer, final Element element, XMLStreamException,  @AT@ 11079 @LENGTH@ 9
---INS Modifier@@static @TO@ MethodDeclaration@@protected, static, void, MethodName:writeElement, final XMLExtendedStreamWriter writer, final Element element, XMLStreamException,  @AT@ 11089 @LENGTH@ 6
---INS PrimitiveType@@void @TO@ MethodDeclaration@@protected, static, void, MethodName:writeElement, final XMLExtendedStreamWriter writer, final Element element, XMLStreamException,  @AT@ 11096 @LENGTH@ 4
---INS SimpleName@@MethodName:writeElement @TO@ MethodDeclaration@@protected, static, void, MethodName:writeElement, final XMLExtendedStreamWriter writer, final Element element, XMLStreamException,  @AT@ 11101 @LENGTH@ 12
---INS SingleVariableDeclaration@@final XMLExtendedStreamWriter writer @TO@ MethodDeclaration@@protected, static, void, MethodName:writeElement, final XMLExtendedStreamWriter writer, final Element element, XMLStreamException,  @AT@ 11114 @LENGTH@ 36
------INS Modifier@@final @TO@ SingleVariableDeclaration@@final XMLExtendedStreamWriter writer @AT@ 11114 @LENGTH@ 5
------INS SimpleType@@XMLExtendedStreamWriter @TO@ SingleVariableDeclaration@@final XMLExtendedStreamWriter writer @AT@ 11120 @LENGTH@ 23
------INS SimpleName@@writer @TO@ SingleVariableDeclaration@@final XMLExtendedStreamWriter writer @AT@ 11144 @LENGTH@ 6
---INS SingleVariableDeclaration@@final Element element @TO@ MethodDeclaration@@protected, static, void, MethodName:writeElement, final XMLExtendedStreamWriter writer, final Element element, XMLStreamException,  @AT@ 11152 @LENGTH@ 21
------INS Modifier@@final @TO@ SingleVariableDeclaration@@final Element element @AT@ 11152 @LENGTH@ 5
------INS SimpleType@@Element @TO@ SingleVariableDeclaration@@final Element element @AT@ 11158 @LENGTH@ 7
------INS SimpleName@@element @TO@ SingleVariableDeclaration@@final Element element @AT@ 11166 @LENGTH@ 7
---INS SimpleType@@XMLStreamException @TO@ MethodDeclaration@@protected, static, void, MethodName:writeElement, final XMLExtendedStreamWriter writer, final Element element, XMLStreamException,  @AT@ 11182 @LENGTH@ 18
---INS ExpressionStatement@@MethodInvocation:writer.writeStartElement(element.getLocalName()) @TO@ MethodDeclaration@@protected, static, void, MethodName:writeElement, final XMLExtendedStreamWriter writer, final Element element, XMLStreamException,  @AT@ 11211 @LENGTH@ 49
------INS MethodInvocation@@writer.writeStartElement(element.getLocalName()) @TO@ ExpressionStatement@@MethodInvocation:writer.writeStartElement(element.getLocalName()) @AT@ 11211 @LENGTH@ 48
---------INS SimpleName@@Name:writer @TO@ MethodInvocation@@writer.writeStartElement(element.getLocalName()) @AT@ 11211 @LENGTH@ 6
---------INS SimpleName@@MethodName:writeStartElement:[element.getLocalName()] @TO@ MethodInvocation@@writer.writeStartElement(element.getLocalName()) @AT@ 11218 @LENGTH@ 41
------------INS MethodInvocation@@element.getLocalName() @TO@ SimpleName@@MethodName:writeStartElement:[element.getLocalName()] @AT@ 11236 @LENGTH@ 22
---------------INS SimpleName@@Name:element @TO@ MethodInvocation@@element.getLocalName() @AT@ 11236 @LENGTH@ 7
---------------INS SimpleName@@MethodName:getLocalName:[] @TO@ MethodInvocation@@element.getLocalName() @AT@ 11244 @LENGTH@ 14


UPD IfStatement@@if (failure == null && !namespaces.isDefined()) {  for (  ModelNode node : namespaces.asList()) {    if (name.equals(node.asProperty().getName())) {      failure="Namespace with prefix " + name + " already registered with schema URI "+ node.asProperty().getValue().asString();    }  }} @TO@ if (failure == null && namespaces.isDefined()) {  for (  ModelNode node : namespaces.asList()) {    if (name.equals(node.asProperty().getName())) {      failure="Namespace with prefix " + name + " already registered with schema URI "+ node.asProperty().getValue().asString();    }  }} @AT@ 4075 @LENGTH@ 358
---UPD InfixExpression@@failure == null && !namespaces.isDefined() @TO@ failure == null && namespaces.isDefined() @AT@ 4079 @LENGTH@ 42
------DEL PrefixExpression@@!namespaces.isDefined() @AT@ 4098 @LENGTH@ 23
---------DEL Operator@@! @AT@ 4098 @LENGTH@ 1
---------DEL MethodInvocation@@namespaces.isDefined() @AT@ 4099 @LENGTH@ 22
------INS MethodInvocation@@namespaces.isDefined() @TO@ InfixExpression@@failure == null && !namespaces.isDefined() @AT@ 4098 @LENGTH@ 22
---------MOV SimpleName@@Name:namespaces @TO@ MethodInvocation@@namespaces.isDefined() @AT@ 4099 @LENGTH@ 10
---------MOV SimpleName@@MethodName:isDefined:[] @TO@ MethodInvocation@@namespaces.isDefined() @AT@ 4110 @LENGTH@ 11


UPD TypeDeclaration@@[public]PayloadRootQNameEndpointMapping, AbstractQNameEndpointMapping @TO@ [@Deprecated, public]PayloadRootQNameEndpointMapping, AbstractQNameEndpointMapping @AT@ 1982 @LENGTH@ 464
---INS MarkerAnnotation@@@Deprecated @TO@ TypeDeclaration@@[public]PayloadRootQNameEndpointMapping, AbstractQNameEndpointMapping @AT@ 2087 @LENGTH@ 11


UPD ExpressionStatement@@MethodInvocation:writeAttribute(writer,attribute,value) @TO@ MethodInvocation:writer.writeAttribute(attribute.getLocalName(),value) @AT@ 59419 @LENGTH@ 41
---UPD MethodInvocation@@writeAttribute(writer,attribute,value) @TO@ writer.writeAttribute(attribute.getLocalName(),value) @AT@ 59419 @LENGTH@ 40
------INS SimpleName@@Name:writer @TO@ MethodInvocation@@writeAttribute(writer,attribute,value) @AT@ 59419 @LENGTH@ 6
------UPD SimpleName@@MethodName:writeAttribute:[writer, attribute, value] @TO@ MethodName:writeAttribute:[attribute.getLocalName(), value] @AT@ 59419 @LENGTH@ 40
---------DEL SimpleName@@writer @AT@ 59434 @LENGTH@ 6
---------INS MethodInvocation@@attribute.getLocalName() @TO@ SimpleName@@MethodName:writeAttribute:[writer, attribute, value] @AT@ 59441 @LENGTH@ 24
------------INS SimpleName@@Name:attribute @TO@ MethodInvocation@@attribute.getLocalName() @AT@ 59441 @LENGTH@ 9
------------INS SimpleName@@MethodName:getLocalName:[] @TO@ MethodInvocation@@attribute.getLocalName() @AT@ 59451 @LENGTH@ 14
---------DEL SimpleName@@attribute @AT@ 59442 @LENGTH@ 9


INS ExpressionStatement@@MethodInvocation:ctx.setApplicationContext(applicationContext) @TO@ MethodDeclaration@@public, void, MethodName:setup,  @AT@ 1493 @LENGTH@ 46
---INS MethodInvocation@@ctx.setApplicationContext(applicationContext) @TO@ ExpressionStatement@@MethodInvocation:ctx.setApplicationContext(applicationContext) @AT@ 1493 @LENGTH@ 45
------INS SimpleName@@Name:ctx @TO@ MethodInvocation@@ctx.setApplicationContext(applicationContext) @AT@ 1493 @LENGTH@ 3
------INS SimpleName@@MethodName:setApplicationContext:[applicationContext] @TO@ MethodInvocation@@ctx.setApplicationContext(applicationContext) @AT@ 1497 @LENGTH@ 41
---------INS SimpleName@@applicationContext @TO@ SimpleName@@MethodName:setApplicationContext:[applicationContext] @AT@ 1519 @LENGTH@ 18


UPD TypeDeclaration@@[@Component(immediate=true), @Service, public, final]DataOnDemandMetadataProvider, AbstractItdMetadataProvider @TO@ [@Component(immediate=true), @Service, public, final]DataOnDemandMetadataProvider, AbstractMemberDiscoveringItdMetadataProvider @AT@ 1458 @LENGTH@ 7116
---UPD SimpleType@@AbstractItdMetadataProvider @TO@ AbstractMemberDiscoveringItdMetadataProvider @AT@ 1552 @LENGTH@ 27


INS FieldDeclaration@@public, static, final, long, [SERIAL_VERSION_UID=310L] @TO@ TypeDeclaration@@[public]SpringSecurityCoreVersion,  @AT@ 662 @LENGTH@ 51
---INS Modifier@@public @TO@ FieldDeclaration@@public, static, final, long, [SERIAL_VERSION_UID=310L] @AT@ 662 @LENGTH@ 6
---INS Modifier@@static @TO@ FieldDeclaration@@public, static, final, long, [SERIAL_VERSION_UID=310L] @AT@ 669 @LENGTH@ 6
---INS Modifier@@final @TO@ FieldDeclaration@@public, static, final, long, [SERIAL_VERSION_UID=310L] @AT@ 676 @LENGTH@ 5
---INS PrimitiveType@@long @TO@ FieldDeclaration@@public, static, final, long, [SERIAL_VERSION_UID=310L] @AT@ 682 @LENGTH@ 4
---INS VariableDeclarationFragment@@SERIAL_VERSION_UID=310L @TO@ FieldDeclaration@@public, static, final, long, [SERIAL_VERSION_UID=310L] @AT@ 687 @LENGTH@ 25
------INS SimpleName@@SERIAL_VERSION_UID @TO@ VariableDeclarationFragment@@SERIAL_VERSION_UID=310L @AT@ 687 @LENGTH@ 18
------INS NumberLiteral@@310L @TO@ VariableDeclarationFragment@@SERIAL_VERSION_UID=310L @AT@ 708 @LENGTH@ 4


UPD ExpressionStatement@@Assignment:this.values=values @TO@ Assignment:this.values=values.clone() @AT@ 1483 @LENGTH@ 21
---UPD Assignment@@this.values=values @TO@ this.values=values.clone() @AT@ 1483 @LENGTH@ 20
------INS MethodInvocation@@values.clone() @TO@ Assignment@@this.values=values @AT@ 1497 @LENGTH@ 14
---------INS SimpleName@@Name:values @TO@ MethodInvocation@@values.clone() @AT@ 1497 @LENGTH@ 6
---------INS SimpleName@@MethodName:clone:[] @TO@ MethodInvocation@@values.clone() @AT@ 1504 @LENGTH@ 7
------DEL SimpleName@@values @AT@ 1497 @LENGTH@ 6


UPD ExpressionStatement@@MethodInvocation:LOG.debug("Registering custom repository implementation: %s %s",config.getImplementationBeanName(),beanDefinition.getBeanClassName()) @TO@ MethodInvocation:LOG.debug("Registering custom repository implementation: {} {}",config.getImplementationBeanName(),beanDefinition.getBeanClassName()) @AT@ 10186 @LENGTH@ 176
---UPD MethodInvocation@@LOG.debug("Registering custom repository implementation: %s %s",config.getImplementationBeanName(),beanDefinition.getBeanClassName()) @TO@ LOG.debug("Registering custom repository implementation: {} {}",config.getImplementationBeanName(),beanDefinition.getBeanClassName()) @AT@ 10186 @LENGTH@ 175
------UPD SimpleName@@MethodName:debug:["Registering custom repository implementation: %s %s", config.getImplementationBeanName(), beanDefinition.getBeanClassName()] @TO@ MethodName:debug:["Registering custom repository implementation: {} {}", config.getImplementationBeanName(), beanDefinition.getBeanClassName()] @AT@ 10190 @LENGTH@ 171
---------UPD StringLiteral@@"Registering custom repository implementation: %s %s" @TO@ "Registering custom repository implementation: {} {}" @AT@ 10196 @LENGTH@ 53


INS ExpressionStatement@@MethodInvocation:PrivateSubDeploymentMarker.mark(deploymentUnit) @TO@ MethodDeclaration@@public, void, MethodName:deploy, DeploymentPhaseContext phaseContext, DeploymentUnitProcessingException,  @AT@ 4292 @LENGTH@ 48
---INS MethodInvocation@@PrivateSubDeploymentMarker.mark(deploymentUnit) @TO@ ExpressionStatement@@MethodInvocation:PrivateSubDeploymentMarker.mark(deploymentUnit) @AT@ 4292 @LENGTH@ 47
------INS SimpleName@@Name:PrivateSubDeploymentMarker @TO@ MethodInvocation@@PrivateSubDeploymentMarker.mark(deploymentUnit) @AT@ 4292 @LENGTH@ 26
------INS SimpleName@@MethodName:mark:[deploymentUnit] @TO@ MethodInvocation@@PrivateSubDeploymentMarker.mark(deploymentUnit) @AT@ 4319 @LENGTH@ 20
---------INS SimpleName@@deploymentUnit @TO@ SimpleName@@MethodName:mark:[deploymentUnit] @AT@ 4324 @LENGTH@ 14


UPD ExpressionStatement@@Assignment:sf=HornetQClient.createClientSessionFactory(new TransportConfiguration(InVMConnectorFactory.class.getName())) @TO@ Assignment:sf=HornetQClient.createServerLocatorWithoutHA(new TransportConfiguration(InVMConnectorFactory.class.getName())).createSessionFactory() @AT@ 3583 @LENGTH@ 112
---UPD Assignment@@sf=HornetQClient.createClientSessionFactory(new TransportConfiguration(InVMConnectorFactory.class.getName())) @TO@ sf=HornetQClient.createServerLocatorWithoutHA(new TransportConfiguration(InVMConnectorFactory.class.getName())).createSessionFactory() @AT@ 3583 @LENGTH@ 111
------INS MethodInvocation@@HornetQClient.createServerLocatorWithoutHA(new TransportConfiguration(InVMConnectorFactory.class.getName())).createSessionFactory() @TO@ Assignment@@sf=HornetQClient.createClientSessionFactory(new TransportConfiguration(InVMConnectorFactory.class.getName())) @AT@ 3588 @LENGTH@ 131
---------MOV MethodInvocation@@HornetQClient.createClientSessionFactory(new TransportConfiguration(InVMConnectorFactory.class.getName())) @TO@ MethodInvocation@@HornetQClient.createServerLocatorWithoutHA(new TransportConfiguration(InVMConnectorFactory.class.getName())).createSessionFactory() @AT@ 3588 @LENGTH@ 106
------------MOV ClassInstanceCreation@@TransportConfiguration[InVMConnectorFactory.class.getName()] @TO@ MethodInvocation@@HornetQClient.createClientSessionFactory(new TransportConfiguration(InVMConnectorFactory.class.getName())) @AT@ 3629 @LENGTH@ 64
---------INS SimpleName@@Name:HornetQClient @TO@ MethodInvocation@@HornetQClient.createServerLocatorWithoutHA(new TransportConfiguration(InVMConnectorFactory.class.getName())).createSessionFactory() @AT@ 3588 @LENGTH@ 13
---------INS SimpleName@@MethodName:createSessionFactory:[] @TO@ MethodInvocation@@HornetQClient.createServerLocatorWithoutHA(new TransportConfiguration(InVMConnectorFactory.class.getName())).createSessionFactory() @AT@ 3697 @LENGTH@ 22
------UPD MethodInvocation@@HornetQClient.createClientSessionFactory(new TransportConfiguration(InVMConnectorFactory.class.getName())) @TO@ MethodName:createServerLocatorWithoutHA:[new TransportConfiguration(InVMConnectorFactory.class.getName())] @AT@ 3588 @LENGTH@ 106


UPD VariableDeclarationStatement@@final ServiceActivatorContext serviceActivatorContext=new ServiceActivatorContextImpl(batchBuilder); @TO@ final ServiceActivatorContext serviceActivatorContext=new ServiceActivatorContextImpl(batchBuilder,serviceContainer); @AT@ 9749 @LENGTH@ 102
---UPD VariableDeclarationFragment@@serviceActivatorContext=new ServiceActivatorContextImpl(batchBuilder) @TO@ serviceActivatorContext=new ServiceActivatorContextImpl(batchBuilder,serviceContainer) @AT@ 9779 @LENGTH@ 71
------UPD ClassInstanceCreation@@ServiceActivatorContextImpl[batchBuilder] @TO@ ServiceActivatorContextImpl[batchBuilder, serviceContainer] @AT@ 9805 @LENGTH@ 45
---------INS SimpleName@@serviceContainer @TO@ ClassInstanceCreation@@ServiceActivatorContextImpl[batchBuilder] @AT@ 9851 @LENGTH@ 16


UPD ExpressionStatement@@MethodInvocation:step.get(INPUT_STREAM_INDEX).set(stream++) @TO@ MethodInvocation:step.get(CONTENT).get(0).get(INPUT_STREAM_INDEX).set(stream++) @AT@ 5936 @LENGTH@ 43
---UPD MethodInvocation@@step.get(INPUT_STREAM_INDEX).set(stream++) @TO@ step.get(CONTENT).get(0).get(INPUT_STREAM_INDEX).set(stream++) @AT@ 5936 @LENGTH@ 42
------INS MethodInvocation@@MethodName:get:[0] @TO@ MethodInvocation@@step.get(INPUT_STREAM_INDEX).set(stream++) @AT@ 5936 @LENGTH@ 24
---------INS NumberLiteral@@0 @TO@ MethodInvocation@@MethodName:get:[0] @AT@ 5958 @LENGTH@ 1
------INS MethodInvocation@@MethodName:get:[CONTENT] @TO@ MethodInvocation@@step.get(INPUT_STREAM_INDEX).set(stream++) @AT@ 5936 @LENGTH@ 17
---------INS SimpleName@@CONTENT @TO@ MethodInvocation@@MethodName:get:[CONTENT] @AT@ 5945 @LENGTH@ 7


UPD EnhancedForStatement@@for (String uniqueName : deploymentNames) {  final ModelNode deployment=modelNode.get(uniqueName);  final String runtimeName=deployment.get(RUNTIME_NAME).asString();  final String sha1=HashUtil.bytesToHexString(deployment.get(HASH).asBytes());  final boolean enabled=!deployment.hasDefined(ENABLED) || deployment.get(ENABLED).asBoolean();  writer.writeStartElement(Element.DEPLOYMENT.getLocalName());  writeAttribute(writer,Attribute.NAME,uniqueName);  writeAttribute(writer,Attribute.RUNTIME_NAME,runtimeName);  writeAttribute(writer,Attribute.SHA1,sha1);  if (!enabled) {    writeAttribute(writer,Attribute.ENABLED,Boolean.FALSE.toString());  }  writer.writeEndElement();} @TO@ for (String uniqueName : deploymentNames) {  final ModelNode deployment=modelNode.get(uniqueName);  final String runtimeName=deployment.get(RUNTIME_NAME).asString();  final boolean enabled=!deployment.hasDefined(ENABLED) || deployment.get(ENABLED).asBoolean();  writer.writeStartElement(Element.DEPLOYMENT.getLocalName());  writeAttribute(writer,Attribute.NAME,uniqueName);  writeAttribute(writer,Attribute.RUNTIME_NAME,runtimeName);  if (!enabled) {    writeAttribute(writer,Attribute.ENABLED,Boolean.FALSE.toString());  }  final List<ModelNode> contentItems=deployment.require(CONTENT).asList();  for (  ModelNode contentItem : contentItems) {    writeContentItem(writer,contentItem);  }  writer.writeEndElement();} @AT@ 29246 @LENGTH@ 885
---UPD VariableDeclarationStatement@@final String sha1=HashUtil.bytesToHexString(deployment.get(HASH).asBytes()); @TO@ final List<ModelNode> contentItems=deployment.require(CONTENT).asList(); @AT@ 29462 @LENGTH@ 78
------DEL SimpleType@@String @AT@ 29468 @LENGTH@ 6
------UPD VariableDeclarationFragment@@sha1=HashUtil.bytesToHexString(deployment.get(HASH).asBytes()) @TO@ contentItems=deployment.require(CONTENT).asList() @AT@ 29475 @LENGTH@ 64
---------UPD SimpleName@@sha1 @TO@ contentItems @AT@ 29475 @LENGTH@ 4
---------DEL MethodInvocation@@HashUtil.bytesToHexString(deployment.get(HASH).asBytes()) @AT@ 29482 @LENGTH@ 57
------------DEL SimpleName@@Name:HashUtil @AT@ 29482 @LENGTH@ 8
------------DEL SimpleName@@MethodName:bytesToHexString:[deployment.get(HASH).asBytes()] @AT@ 29491 @LENGTH@ 48
---------------DEL MethodInvocation@@deployment.get(HASH).asBytes() @AT@ 29508 @LENGTH@ 30
---------INS MethodInvocation@@deployment.require(CONTENT).asList() @TO@ VariableDeclarationFragment@@sha1=HashUtil.bytesToHexString(deployment.get(HASH).asBytes()) @AT@ 29972 @LENGTH@ 36
------------MOV MethodInvocation@@MethodName:get:[HASH] @TO@ MethodInvocation@@deployment.require(CONTENT).asList() @AT@ 29508 @LENGTH@ 20
---------------UPD SimpleName@@HASH @TO@ CONTENT @AT@ 29523 @LENGTH@ 4
------------MOV SimpleName@@Name:deployment @TO@ MethodInvocation@@deployment.require(CONTENT).asList() @AT@ 29508 @LENGTH@ 10
------------MOV SimpleName@@MethodName:asBytes:[] @TO@ MethodInvocation@@deployment.require(CONTENT).asList() @AT@ 29529 @LENGTH@ 9
------INS ParameterizedType@@List<ModelNode> @TO@ VariableDeclarationStatement@@final String sha1=HashUtil.bytesToHexString(deployment.get(HASH).asBytes()); @AT@ 29941 @LENGTH@ 15
---------INS SimpleType@@List @TO@ ParameterizedType@@List<ModelNode> @AT@ 29941 @LENGTH@ 4
---------INS SimpleType@@ModelNode @TO@ ParameterizedType@@List<ModelNode> @AT@ 29946 @LENGTH@ 9
---MOV VariableDeclarationStatement@@final String sha1=HashUtil.bytesToHexString(deployment.get(HASH).asBytes()); @TO@ EnhancedForStatement@@for (String uniqueName : deploymentNames) {  final ModelNode deployment=modelNode.get(uniqueName);  final String runtimeName=deployment.get(RUNTIME_NAME).asString();  final String sha1=HashUtil.bytesToHexString(deployment.get(HASH).asBytes());  final boolean enabled=!deployment.hasDefined(ENABLED) || deployment.get(ENABLED).asBoolean();  writer.writeStartElement(Element.DEPLOYMENT.getLocalName());  writeAttribute(writer,Attribute.NAME,uniqueName);  writeAttribute(writer,Attribute.RUNTIME_NAME,runtimeName);  writeAttribute(writer,Attribute.SHA1,sha1);  if (!enabled) {    writeAttribute(writer,Attribute.ENABLED,Boolean.FALSE.toString());  }  writer.writeEndElement();} @AT@ 29462 @LENGTH@ 78
---UPD ExpressionStatement@@MethodInvocation:writeAttribute(writer,Attribute.SHA1,sha1) @TO@ MethodInvocation:writeContentItem(writer,contentItem) @AT@ 29891 @LENGTH@ 45
---INS EnhancedForStatement@@for (ModelNode contentItem : contentItems) {  writeContentItem(writer,contentItem);} @TO@ EnhancedForStatement@@for (String uniqueName : deploymentNames) {  final ModelNode deployment=modelNode.get(uniqueName);  final String runtimeName=deployment.get(RUNTIME_NAME).asString();  final String sha1=HashUtil.bytesToHexString(deployment.get(HASH).asBytes());  final boolean enabled=!deployment.hasDefined(ENABLED) || deployment.get(ENABLED).asBoolean();  writer.writeStartElement(Element.DEPLOYMENT.getLocalName());  writeAttribute(writer,Attribute.NAME,uniqueName);  writeAttribute(writer,Attribute.RUNTIME_NAME,runtimeName);  writeAttribute(writer,Attribute.SHA1,sha1);  if (!enabled) {    writeAttribute(writer,Attribute.ENABLED,Boolean.FALSE.toString());  }  writer.writeEndElement();} @AT@ 30026 @LENGTH@ 121
------MOV ExpressionStatement@@MethodInvocation:writeAttribute(writer,Attribute.SHA1,sha1) @TO@ EnhancedForStatement@@for (ModelNode contentItem : contentItems) {  writeContentItem(writer,contentItem);} @AT@ 29891 @LENGTH@ 45
---------UPD MethodInvocation@@writeAttribute(writer,Attribute.SHA1,sha1) @TO@ writeContentItem(writer,contentItem) @AT@ 29891 @LENGTH@ 44
------------UPD SimpleName@@MethodName:writeAttribute:[writer, Attribute.SHA1, sha1] @TO@ MethodName:writeContentItem:[writer, contentItem] @AT@ 29891 @LENGTH@ 44
---------------DEL QualifiedName@@Attribute.SHA1 @AT@ 29914 @LENGTH@ 14
------------------DEL SimpleName@@Attribute @AT@ 29914 @LENGTH@ 9
------------------DEL SimpleName@@SHA1 @AT@ 29924 @LENGTH@ 4
---------------DEL SimpleName@@sha1 @AT@ 29930 @LENGTH@ 4
---------------INS SimpleName@@contentItem @TO@ SimpleName@@MethodName:writeAttribute:[writer, Attribute.SHA1, sha1] @AT@ 30116 @LENGTH@ 11
------INS SingleVariableDeclaration@@ModelNode contentItem @TO@ EnhancedForStatement@@for (ModelNode contentItem : contentItems) {  writeContentItem(writer,contentItem);} @AT@ 30031 @LENGTH@ 21
---------INS SimpleType@@ModelNode @TO@ SingleVariableDeclaration@@ModelNode contentItem @AT@ 30031 @LENGTH@ 9
---------INS SimpleName@@contentItem @TO@ SingleVariableDeclaration@@ModelNode contentItem @AT@ 30041 @LENGTH@ 11
------INS SimpleName@@contentItems @TO@ EnhancedForStatement@@for (ModelNode contentItem : contentItems) {  writeContentItem(writer,contentItem);} @AT@ 30055 @LENGTH@ 12


UPD MethodDeclaration@@public, void, MethodName:setHostName, String host,  @TO@ public, void, MethodName:setHostName, String hostName,  @AT@ 3983 @LENGTH@ 65
---UPD SingleVariableDeclaration@@String host @TO@ String hostName @AT@ 4007 @LENGTH@ 11
------UPD SimpleName@@host @TO@ hostName @AT@ 4014 @LENGTH@ 4
---UPD ExpressionStatement@@Assignment:this.hostName=host @TO@ Assignment:this.hostName=hostName @AT@ 4024 @LENGTH@ 21
------UPD Assignment@@this.hostName=host @TO@ this.hostName=hostName @AT@ 4024 @LENGTH@ 20
---------UPD SimpleName@@host @TO@ hostName @AT@ 4040 @LENGTH@ 4


UPD EnhancedForStatement@@for (PersistenceContextReferenceMetaData puRef : persistenceUnitRefs) {  String name=puRef.getName();  String persistenceUnitName=puRef.getPersistenceUnitName();  String lookup=puRef.getLookupName();  if (!isEmpty(lookup) && !isEmpty(persistenceUnitName)) {    throw new DeploymentUnitProcessingException("Cannot specify both <lookup-name> (" + lookup + ") and persistence-unit-name ("+ persistenceUnitName+ ") in <persistence-context-ref/> for "+ componentDescription);  }  if (!name.startsWith("java:")) {    name=environment.getDefaultContext() + name;  }  LookupInjectionSource injectionSource=new LookupInjectionSource(name);  processInjectionTargets(moduleDescription,injectionSource,classLoader,deploymentReflectionIndex,puRef,EntityManager.class);  BindingConfiguration bindingConfiguration=null;  if (!isEmpty(lookup)) {    bindingConfiguration=new BindingConfiguration(name,new LookupInjectionSource(lookup));  } else   if (!isEmpty(persistenceUnitName)) {    PropertiesMetaData properties=puRef.getProperties();    Map map=new HashMap();    if (properties != null) {      for (      PropertyMetaData prop : properties) {        map.put(prop.getKey(),prop.getValue());      }    }    PersistenceContextType type=puRef.getPersistenceContextType() == null ? PersistenceContextType.TRANSACTION : puRef.getPersistenceContextType();    InjectionSource pcBindingSource=this.getPersistenceContextBindingSource(deploymentUnit,persistenceUnitName,type,map);    bindingConfiguration=new BindingConfiguration(name,pcBindingSource);  } else {    throw new RuntimeException("Support for persistence-context-ref without a lookup or persistence-unit-name, isn't yet implemented");  }} @TO@ for (PersistenceContextReferenceMetaData puRef : persistenceUnitRefs) {  String name=puRef.getName();  String persistenceUnitName=puRef.getPersistenceUnitName();  String lookup=puRef.getLookupName();  if (!isEmpty(lookup) && !isEmpty(persistenceUnitName)) {    throw new DeploymentUnitProcessingException("Cannot specify both <lookup-name> (" + lookup + ") and persistence-unit-name ("+ persistenceUnitName+ ") in <persistence-context-ref/> for "+ componentDescription);  }  if (!name.startsWith("java:")) {    name=environment.getDefaultContext() + name;  }  LookupInjectionSource injectionSource=new LookupInjectionSource(name);  processInjectionTargets(moduleDescription,injectionSource,classLoader,deploymentReflectionIndex,puRef,EntityManager.class);  BindingConfiguration bindingConfiguration=null;  if (!isEmpty(lookup)) {    bindingConfiguration=new BindingConfiguration(name,new LookupInjectionSource(lookup));  } else   if (!isEmpty(persistenceUnitName)) {    PropertiesMetaData properties=puRef.getProperties();    Map map=new HashMap();    if (properties != null) {      for (      PropertyMetaData prop : properties) {        map.put(prop.getKey(),prop.getValue());      }    }    PersistenceContextType type=puRef.getPersistenceContextType() == null ? PersistenceContextType.TRANSACTION : puRef.getPersistenceContextType();    InjectionSource pcBindingSource=this.getPersistenceContextBindingSource(deploymentUnit,persistenceUnitName,type,map);    bindingConfiguration=new BindingConfiguration(name,pcBindingSource);  } else {    throw new RuntimeException("Support for persistence-context-ref without a lookup or persistence-unit-name, isn't yet implemented");  }  bindingConfigurations.add(bindingConfiguration);} @AT@ 7797 @LENGTH@ 2318
---INS ExpressionStatement@@MethodInvocation:bindingConfigurations.add(bindingConfiguration) @TO@ EnhancedForStatement@@for (PersistenceContextReferenceMetaData puRef : persistenceUnitRefs) {  String name=puRef.getName();  String persistenceUnitName=puRef.getPersistenceUnitName();  String lookup=puRef.getLookupName();  if (!isEmpty(lookup) && !isEmpty(persistenceUnitName)) {    throw new DeploymentUnitProcessingException("Cannot specify both <lookup-name> (" + lookup + ") and persistence-unit-name ("+ persistenceUnitName+ ") in <persistence-context-ref/> for "+ componentDescription);  }  if (!name.startsWith("java:")) {    name=environment.getDefaultContext() + name;  }  LookupInjectionSource injectionSource=new LookupInjectionSource(name);  processInjectionTargets(moduleDescription,injectionSource,classLoader,deploymentReflectionIndex,puRef,EntityManager.class);  BindingConfiguration bindingConfiguration=null;  if (!isEmpty(lookup)) {    bindingConfiguration=new BindingConfiguration(name,new LookupInjectionSource(lookup));  } else   if (!isEmpty(persistenceUnitName)) {    PropertiesMetaData properties=puRef.getProperties();    Map map=new HashMap();    if (properties != null) {      for (      PropertyMetaData prop : properties) {        map.put(prop.getKey(),prop.getValue());      }    }    PersistenceContextType type=puRef.getPersistenceContextType() == null ? PersistenceContextType.TRANSACTION : puRef.getPersistenceContextType();    InjectionSource pcBindingSource=this.getPersistenceContextBindingSource(deploymentUnit,persistenceUnitName,type,map);    bindingConfiguration=new BindingConfiguration(name,pcBindingSource);  } else {    throw new RuntimeException("Support for persistence-context-ref without a lookup or persistence-unit-name, isn't yet implemented");  }} @AT@ 10118 @LENGTH@ 48
------INS MethodInvocation@@bindingConfigurations.add(bindingConfiguration) @TO@ ExpressionStatement@@MethodInvocation:bindingConfigurations.add(bindingConfiguration) @AT@ 10118 @LENGTH@ 47
---------INS SimpleName@@Name:bindingConfigurations @TO@ MethodInvocation@@bindingConfigurations.add(bindingConfiguration) @AT@ 10118 @LENGTH@ 21
---------INS SimpleName@@MethodName:add:[bindingConfiguration] @TO@ MethodInvocation@@bindingConfigurations.add(bindingConfiguration) @AT@ 10140 @LENGTH@ 25
------------INS SimpleName@@bindingConfiguration @TO@ SimpleName@@MethodName:add:[bindingConfiguration] @AT@ 10144 @LENGTH@ 20


UPD ExpressionStatement@@Assignment:container=new RedisListenerContainer() @TO@ Assignment:container=new RedisMessageListenerContainer() @AT@ 2421 @LENGTH@ 41
---UPD Assignment@@container=new RedisListenerContainer() @TO@ container=new RedisMessageListenerContainer() @AT@ 2421 @LENGTH@ 40
------UPD ClassInstanceCreation@@RedisListenerContainer[] @TO@ RedisMessageListenerContainer[] @AT@ 2433 @LENGTH@ 28
---------UPD SimpleType@@RedisListenerContainer @TO@ RedisMessageListenerContainer @AT@ 2437 @LENGTH@ 22


UPD MethodDeclaration@@public, boolean, MethodName:isPresent, ParsedArguments args,  @TO@ public, boolean, MethodName:isPresent, ParsedArguments args, CommandFormatException,  @AT@ 4700 @LENGTH@ 428
---INS SimpleType@@CommandFormatException @TO@ MethodDeclaration@@public, boolean, MethodName:isPresent, ParsedArguments args,  @AT@ 4754 @LENGTH@ 22


UPD EnhancedForStatement@@for (final String key : subModel.keys()) {  if (!ok.get()) {    break;  }  final PathAddress childAddress=address.append(PathElement.pathElement(childName,key));  final ModelNode readOp=operation.clone();  readOp.get(OP_ADDR).set(childAddress.toModelNode());  final ModelNode readResult=readModel(context,operation,new ResultHandler(){    public void handleResultFragment(    String[] location,    ModelNode result){    }    public void handleResultComplete(){    }    public void handleFailed(    ModelNode failureDescription){      ok.set(false);      resultHandler.handleFailed(failureDescription);    }    public void handleCancellation(){      ok.set(false);      resultHandler.handleCancellation();    }  },childAddress);  result.add(key,readResult);} @TO@ for (final String key : subModel.keys()) {  if (!ok.get()) {    break;  }  final PathAddress childAddress=address.append(PathElement.pathElement(childName,key));  final ModelNode readOp=operation.clone();  readOp.get(OP_ADDR).set(childAddress.toModelNode());  if (operation.has(INCLUDE_RUNTIME))   readOp.get(INCLUDE_RUNTIME).set(operation.get(INCLUDE_RUNTIME).asBoolean());  final ModelNode readResult=readModel(context,readOp,new ResultHandler(){    public void handleResultFragment(    String[] location,    ModelNode result){    }    public void handleResultComplete(){    }    public void handleFailed(    ModelNode failureDescription){      ok.set(false);      resultHandler.handleFailed(failureDescription);    }    public void handleCancellation(){      ok.set(false);      resultHandler.handleCancellation();    }  },childAddress);  result.add(key,readResult);} @AT@ 19080 @LENGTH@ 1477
---UPD VariableDeclarationStatement@@final ModelNode readResult=readModel(context,operation,new ResultHandler(){
  public void handleResultFragment(  String[] location,  ModelNode result){
  }
  public void handleResultComplete(){
  }
  public void handleFailed(  ModelNode failureDescription){
    ok.set(false);
    resultHandler.handleFailed(failureDescription);
  }
  public void handleCancellation(){
    ok.set(false);
    resultHandler.handleCancellation();
  }
}
,childAddress); @TO@ final ModelNode readResult=readModel(context,readOp,new ResultHandler(){
  public void handleResultFragment(  String[] location,  ModelNode result){
  }
  public void handleResultComplete(){
  }
  public void handleFailed(  ModelNode failureDescription){
    ok.set(false);
    resultHandler.handleFailed(failureDescription);
  }
  public void handleCancellation(){
    ok.set(false);
    resultHandler.handleCancellation();
  }
}
,childAddress); @AT@ 19537 @LENGTH@ 937
------UPD VariableDeclarationFragment@@readResult=readModel(context,operation,new ResultHandler(){
  public void handleResultFragment(  String[] location,  ModelNode result){
  }
  public void handleResultComplete(){
  }
  public void handleFailed(  ModelNode failureDescription){
    ok.set(false);
    resultHandler.handleFailed(failureDescription);
  }
  public void handleCancellation(){
    ok.set(false);
    resultHandler.handleCancellation();
  }
}
,childAddress) @TO@ readResult=readModel(context,readOp,new ResultHandler(){
  public void handleResultFragment(  String[] location,  ModelNode result){
  }
  public void handleResultComplete(){
  }
  public void handleFailed(  ModelNode failureDescription){
    ok.set(false);
    resultHandler.handleFailed(failureDescription);
  }
  public void handleCancellation(){
    ok.set(false);
    resultHandler.handleCancellation();
  }
}
,childAddress) @AT@ 19553 @LENGTH@ 920
---------UPD MethodInvocation@@readModel(context,operation,new ResultHandler(){
  public void handleResultFragment(  String[] location,  ModelNode result){
  }
  public void handleResultComplete(){
  }
  public void handleFailed(  ModelNode failureDescription){
    ok.set(false);
    resultHandler.handleFailed(failureDescription);
  }
  public void handleCancellation(){
    ok.set(false);
    resultHandler.handleCancellation();
  }
}
,childAddress) @TO@ readModel(context,readOp,new ResultHandler(){
  public void handleResultFragment(  String[] location,  ModelNode result){
  }
  public void handleResultComplete(){
  }
  public void handleFailed(  ModelNode failureDescription){
    ok.set(false);
    resultHandler.handleFailed(failureDescription);
  }
  public void handleCancellation(){
    ok.set(false);
    resultHandler.handleCancellation();
  }
}
,childAddress) @AT@ 19566 @LENGTH@ 907
------------UPD SimpleName@@MethodName:readModel:[context, operation, new ResultHandler(){
  public void handleResultFragment(  String[] location,  ModelNode result){
  }
  public void handleResultComplete(){
  }
  public void handleFailed(  ModelNode failureDescription){
    ok.set(false);
    resultHandler.handleFailed(failureDescription);
  }
  public void handleCancellation(){
    ok.set(false);
    resultHandler.handleCancellation();
  }
}
, childAddress] @TO@ MethodName:readModel:[context, readOp, new ResultHandler(){
  public void handleResultFragment(  String[] location,  ModelNode result){
  }
  public void handleResultComplete(){
  }
  public void handleFailed(  ModelNode failureDescription){
    ok.set(false);
    resultHandler.handleFailed(failureDescription);
  }
  public void handleCancellation(){
    ok.set(false);
    resultHandler.handleCancellation();
  }
}
, childAddress] @AT@ 19566 @LENGTH@ 907
---------------UPD SimpleName@@operation @TO@ readOp @AT@ 19585 @LENGTH@ 9
---INS IfStatement@@if (operation.has(INCLUDE_RUNTIME)) readOp.get(INCLUDE_RUNTIME).set(operation.get(INCLUDE_RUNTIME).asBoolean()); @TO@ EnhancedForStatement@@for (final String key : subModel.keys()) {  if (!ok.get()) {    break;  }  final PathAddress childAddress=address.append(PathElement.pathElement(childName,key));  final ModelNode readOp=operation.clone();  readOp.get(OP_ADDR).set(childAddress.toModelNode());  final ModelNode readResult=readModel(context,operation,new ResultHandler(){    public void handleResultFragment(    String[] location,    ModelNode result){    }    public void handleResultComplete(){    }    public void handleFailed(    ModelNode failureDescription){      ok.set(false);      resultHandler.handleFailed(failureDescription);    }    public void handleCancellation(){      ok.set(false);      resultHandler.handleCancellation();    }  },childAddress);  result.add(key,readResult);} @AT@ 19538 @LENGTH@ 143
------INS MethodInvocation@@operation.has(INCLUDE_RUNTIME) @TO@ IfStatement@@if (operation.has(INCLUDE_RUNTIME)) readOp.get(INCLUDE_RUNTIME).set(operation.get(INCLUDE_RUNTIME).asBoolean()); @AT@ 19541 @LENGTH@ 30
---------INS SimpleName@@Name:operation @TO@ MethodInvocation@@operation.has(INCLUDE_RUNTIME) @AT@ 19541 @LENGTH@ 9
---------INS SimpleName@@MethodName:has:[INCLUDE_RUNTIME] @TO@ MethodInvocation@@operation.has(INCLUDE_RUNTIME) @AT@ 19551 @LENGTH@ 20
------------INS SimpleName@@INCLUDE_RUNTIME @TO@ SimpleName@@MethodName:has:[INCLUDE_RUNTIME] @AT@ 19555 @LENGTH@ 15
------INS Block@@ThenBody:readOp.get(INCLUDE_RUNTIME).set(operation.get(INCLUDE_RUNTIME).asBoolean()); @TO@ IfStatement@@if (operation.has(INCLUDE_RUNTIME)) readOp.get(INCLUDE_RUNTIME).set(operation.get(INCLUDE_RUNTIME).asBoolean()); @AT@ 19605 @LENGTH@ 76
---------INS ExpressionStatement@@MethodInvocation:readOp.get(INCLUDE_RUNTIME).set(operation.get(INCLUDE_RUNTIME).asBoolean()) @TO@ Block@@ThenBody:readOp.get(INCLUDE_RUNTIME).set(operation.get(INCLUDE_RUNTIME).asBoolean()); @AT@ 19605 @LENGTH@ 76
------------INS MethodInvocation@@readOp.get(INCLUDE_RUNTIME).set(operation.get(INCLUDE_RUNTIME).asBoolean()) @TO@ ExpressionStatement@@MethodInvocation:readOp.get(INCLUDE_RUNTIME).set(operation.get(INCLUDE_RUNTIME).asBoolean()) @AT@ 19605 @LENGTH@ 75
---------------INS MethodInvocation@@MethodName:get:[INCLUDE_RUNTIME] @TO@ MethodInvocation@@readOp.get(INCLUDE_RUNTIME).set(operation.get(INCLUDE_RUNTIME).asBoolean()) @AT@ 19605 @LENGTH@ 27
------------------INS SimpleName@@INCLUDE_RUNTIME @TO@ MethodInvocation@@MethodName:get:[INCLUDE_RUNTIME] @AT@ 19616 @LENGTH@ 15
---------------INS SimpleName@@Name:readOp @TO@ MethodInvocation@@readOp.get(INCLUDE_RUNTIME).set(operation.get(INCLUDE_RUNTIME).asBoolean()) @AT@ 19605 @LENGTH@ 6
---------------INS SimpleName@@MethodName:set:[operation.get(INCLUDE_RUNTIME).asBoolean()] @TO@ MethodInvocation@@readOp.get(INCLUDE_RUNTIME).set(operation.get(INCLUDE_RUNTIME).asBoolean()) @AT@ 19633 @LENGTH@ 47
------------------INS MethodInvocation@@operation.get(INCLUDE_RUNTIME).asBoolean() @TO@ SimpleName@@MethodName:set:[operation.get(INCLUDE_RUNTIME).asBoolean()] @AT@ 19637 @LENGTH@ 42
---------------------INS MethodInvocation@@MethodName:get:[INCLUDE_RUNTIME] @TO@ MethodInvocation@@operation.get(INCLUDE_RUNTIME).asBoolean() @AT@ 19637 @LENGTH@ 30
------------------------INS SimpleName@@INCLUDE_RUNTIME @TO@ MethodInvocation@@MethodName:get:[INCLUDE_RUNTIME] @AT@ 19651 @LENGTH@ 15
---------------------INS SimpleName@@Name:operation @TO@ MethodInvocation@@operation.get(INCLUDE_RUNTIME).asBoolean() @AT@ 19637 @LENGTH@ 9
---------------------INS SimpleName@@MethodName:asBoolean:[] @TO@ MethodInvocation@@operation.get(INCLUDE_RUNTIME).asBoolean() @AT@ 19668 @LENGTH@ 11


UPD ExpressionStatement@@Assignment:newExtDirs[extDirs.length]=new File(serverEnvironment.getServerBaseDir(),"ext/lib") @TO@ Assignment:newExtDirs[extDirs.length]=new File(serverEnvironment.getServerBaseDir(),"lib/ext") @AT@ 8366 @LENGTH@ 87
---UPD Assignment@@newExtDirs[extDirs.length]=new File(serverEnvironment.getServerBaseDir(),"ext/lib") @TO@ newExtDirs[extDirs.length]=new File(serverEnvironment.getServerBaseDir(),"lib/ext") @AT@ 8366 @LENGTH@ 86
------UPD ClassInstanceCreation@@File[serverEnvironment.getServerBaseDir(), "ext/lib"] @TO@ File[serverEnvironment.getServerBaseDir(), "lib/ext"] @AT@ 8395 @LENGTH@ 57
---------UPD StringLiteral@@"ext/lib" @TO@ "lib/ext" @AT@ 8442 @LENGTH@ 9


UPD Block@@ThenBody:{  Class clazz;  if (value instanceof Class) {    clazz=((Class)value);  } else {    clazz=value.getClass();  }  return builder.isPersistentEntity(clazz);} @TO@ ThenBody:{  Class<?> clazz;  if (value instanceof Class) {    clazz=((Class<?>)value);  } else {    clazz=value.getClass();  }  return builder.isPersistentEntity(clazz);} @AT@ 6733 @LENGTH@ 200
---UPD VariableDeclarationStatement@@Class clazz; @TO@ Class<?> clazz; @AT@ 6741 @LENGTH@ 12
------INS ParameterizedType@@Class<?> @TO@ VariableDeclarationStatement@@Class clazz; @AT@ 6723 @LENGTH@ 8
---------INS SimpleType@@Class @TO@ ParameterizedType@@Class<?> @AT@ 6723 @LENGTH@ 5
---------INS WildcardType@@? @TO@ ParameterizedType@@Class<?> @AT@ 6729 @LENGTH@ 1
------DEL SimpleType@@Class @AT@ 6741 @LENGTH@ 5
---UPD IfStatement@@if (value instanceof Class) {  clazz=((Class)value);} else {  clazz=value.getClass();} @TO@ if (value instanceof Class) {  clazz=((Class<?>)value);} else {  clazz=value.getClass();} @AT@ 6760 @LENGTH@ 119
------UPD Block@@ThenBody:{  clazz=((Class)value);} @TO@ ThenBody:{  clazz=((Class<?>)value);} @AT@ 6788 @LENGTH@ 42
---------UPD ExpressionStatement@@Assignment:clazz=((Class)value) @TO@ Assignment:clazz=((Class<?>)value) @AT@ 6798 @LENGTH@ 24
------------UPD Assignment@@clazz=((Class)value) @TO@ clazz=((Class<?>)value) @AT@ 6798 @LENGTH@ 23
---------------UPD ParenthesizedExpression@@((Class)value) @TO@ ((Class<?>)value) @AT@ 6806 @LENGTH@ 15
------------------UPD CastExpression@@(Class)value @TO@ (Class<?>)value @AT@ 6807 @LENGTH@ 13
---------------------INS ParameterizedType@@Class<?> @TO@ CastExpression@@(Class)value @AT@ 6793 @LENGTH@ 8
------------------------INS SimpleType@@Class @TO@ ParameterizedType@@Class<?> @AT@ 6793 @LENGTH@ 5
------------------------INS WildcardType@@? @TO@ ParameterizedType@@Class<?> @AT@ 6799 @LENGTH@ 1
---------------------DEL SimpleType@@Class @AT@ 6808 @LENGTH@ 5


INS MethodDeclaration@@public, void, MethodName:findsPeopleByLastnameLikeAndAgeIn, Exception,  @TO@ TypeDeclaration@@[@RunWith(SpringJUnit4ClassRunner.class), public, abstract]AbstractPersonRepositoryIntegrationTests,  @AT@ 5234 @LENGTH@ 237
---INS Modifier@@public @TO@ MethodDeclaration@@public, void, MethodName:findsPeopleByLastnameLikeAndAgeIn, Exception,  @AT@ 5234 @LENGTH@ 6
---INS PrimitiveType@@void @TO@ MethodDeclaration@@public, void, MethodName:findsPeopleByLastnameLikeAndAgeIn, Exception,  @AT@ 5241 @LENGTH@ 4
---INS SimpleName@@MethodName:findsPeopleByLastnameLikeAndAgeIn @TO@ MethodDeclaration@@public, void, MethodName:findsPeopleByLastnameLikeAndAgeIn, Exception,  @AT@ 5246 @LENGTH@ 33
---INS SimpleType@@Exception @TO@ MethodDeclaration@@public, void, MethodName:findsPeopleByLastnameLikeAndAgeIn, Exception,  @AT@ 5289 @LENGTH@ 9
---INS VariableDeclarationStatement@@List<Person> result=repository.findByLastnameLikeAndAgeBetween("*e*",44,50); @TO@ MethodDeclaration@@public, void, MethodName:findsPeopleByLastnameLikeAndAgeIn, Exception,  @AT@ 5306 @LENGTH@ 80
------INS ParameterizedType@@List<Person> @TO@ VariableDeclarationStatement@@List<Person> result=repository.findByLastnameLikeAndAgeBetween("*e*",44,50); @AT@ 5306 @LENGTH@ 12
---------INS SimpleType@@List @TO@ ParameterizedType@@List<Person> @AT@ 5306 @LENGTH@ 4
---------INS SimpleType@@Person @TO@ ParameterizedType@@List<Person> @AT@ 5311 @LENGTH@ 6
------INS VariableDeclarationFragment@@result=repository.findByLastnameLikeAndAgeBetween("*e*",44,50) @TO@ VariableDeclarationStatement@@List<Person> result=repository.findByLastnameLikeAndAgeBetween("*e*",44,50); @AT@ 5319 @LENGTH@ 66
---------INS SimpleName@@result @TO@ VariableDeclarationFragment@@result=repository.findByLastnameLikeAndAgeBetween("*e*",44,50) @AT@ 5319 @LENGTH@ 6
---------INS MethodInvocation@@repository.findByLastnameLikeAndAgeBetween("*e*",44,50) @TO@ VariableDeclarationFragment@@result=repository.findByLastnameLikeAndAgeBetween("*e*",44,50) @AT@ 5328 @LENGTH@ 57
------------INS SimpleName@@Name:repository @TO@ MethodInvocation@@repository.findByLastnameLikeAndAgeBetween("*e*",44,50) @AT@ 5328 @LENGTH@ 10
------------INS SimpleName@@MethodName:findByLastnameLikeAndAgeBetween:["*e*", 44, 50] @TO@ MethodInvocation@@repository.findByLastnameLikeAndAgeBetween("*e*",44,50) @AT@ 5339 @LENGTH@ 46
---------------INS StringLiteral@@"*e*" @TO@ SimpleName@@MethodName:findByLastnameLikeAndAgeBetween:["*e*", 44, 50] @AT@ 5371 @LENGTH@ 5
---------------INS NumberLiteral@@44 @TO@ SimpleName@@MethodName:findByLastnameLikeAndAgeBetween:["*e*", 44, 50] @AT@ 5378 @LENGTH@ 2
---------------INS NumberLiteral@@50 @TO@ SimpleName@@MethodName:findByLastnameLikeAndAgeBetween:["*e*", 44, 50] @AT@ 5382 @LENGTH@ 2
---INS ExpressionStatement@@MethodInvocation:assertThat(result.size(),is(2)) @TO@ MethodDeclaration@@public, void, MethodName:findsPeopleByLastnameLikeAndAgeIn, Exception,  @AT@ 5389 @LENGTH@ 33
------INS MethodInvocation@@assertThat(result.size(),is(2)) @TO@ ExpressionStatement@@MethodInvocation:assertThat(result.size(),is(2)) @AT@ 5389 @LENGTH@ 32
---------INS SimpleName@@MethodName:assertThat:[result.size(), is(2)] @TO@ MethodInvocation@@assertThat(result.size(),is(2)) @AT@ 5389 @LENGTH@ 32
------------INS MethodInvocation@@result.size() @TO@ SimpleName@@MethodName:assertThat:[result.size(), is(2)] @AT@ 5400 @LENGTH@ 13
---------------INS SimpleName@@Name:result @TO@ MethodInvocation@@result.size() @AT@ 5400 @LENGTH@ 6
---------------INS SimpleName@@MethodName:size:[] @TO@ MethodInvocation@@result.size() @AT@ 5407 @LENGTH@ 6
------------INS MethodInvocation@@is(2) @TO@ SimpleName@@MethodName:assertThat:[result.size(), is(2)] @AT@ 5415 @LENGTH@ 5
---------------INS SimpleName@@MethodName:is:[2] @TO@ MethodInvocation@@is(2) @AT@ 5415 @LENGTH@ 5
------------------INS NumberLiteral@@2 @TO@ SimpleName@@MethodName:is:[2] @AT@ 5418 @LENGTH@ 1
---------------INS SimpleName@@MethodName:is:[2] @TO@ MethodInvocation@@is(2) @AT@ 5415 @LENGTH@ 5
------------------INS NumberLiteral@@2 @TO@ SimpleName@@MethodName:is:[2] @AT@ 5418 @LENGTH@ 1
---INS ExpressionStatement@@MethodInvocation:assertThat(result,hasItems(carter,boyd)) @TO@ MethodDeclaration@@public, void, MethodName:findsPeopleByLastnameLikeAndAgeIn, Exception,  @AT@ 5425 @LENGTH@ 43
------INS MethodInvocation@@assertThat(result,hasItems(carter,boyd)) @TO@ ExpressionStatement@@MethodInvocation:assertThat(result,hasItems(carter,boyd)) @AT@ 5425 @LENGTH@ 42
---------INS SimpleName@@MethodName:assertThat:[result, hasItems(carter,boyd)] @TO@ MethodInvocation@@assertThat(result,hasItems(carter,boyd)) @AT@ 5425 @LENGTH@ 42
------------INS SimpleName@@result @TO@ SimpleName@@MethodName:assertThat:[result, hasItems(carter,boyd)] @AT@ 5436 @LENGTH@ 6
------------INS MethodInvocation@@hasItems(carter,boyd) @TO@ SimpleName@@MethodName:assertThat:[result, hasItems(carter,boyd)] @AT@ 5444 @LENGTH@ 22
---------------INS SimpleName@@MethodName:hasItems:[carter, boyd] @TO@ MethodInvocation@@hasItems(carter,boyd) @AT@ 5444 @LENGTH@ 22
------------------INS SimpleName@@carter @TO@ SimpleName@@MethodName:hasItems:[carter, boyd] @AT@ 5453 @LENGTH@ 6
------------------INS SimpleName@@boyd @TO@ SimpleName@@MethodName:hasItems:[carter, boyd] @AT@ 5461 @LENGTH@ 4
---------------INS SimpleName@@MethodName:hasItems:[carter, boyd] @TO@ MethodInvocation@@hasItems(carter,boyd) @AT@ 5444 @LENGTH@ 22
------------------INS SimpleName@@carter @TO@ SimpleName@@MethodName:hasItems:[carter, boyd] @AT@ 5453 @LENGTH@ 6
------------------INS SimpleName@@boyd @TO@ SimpleName@@MethodName:hasItems:[carter, boyd] @AT@ 5461 @LENGTH@ 4


UPD MethodDeclaration@@static, ClientSessionFactory, MethodName:createClientSessionFactory, String host, int port,  @TO@ static, ClientSessionFactory, MethodName:createClientSessionFactory, String host, int port, Exception,  @AT@ 6081 @LENGTH@ 443
---INS SimpleType@@Exception @TO@ MethodDeclaration@@static, ClientSessionFactory, MethodName:createClientSessionFactory, String host, int port,  @AT@ 6166 @LENGTH@ 9
---UPD ReturnStatement@@MethodInvocation:HornetQClient.createClientSessionFactory(configuration) @TO@ MethodInvocation:HornetQClient.createServerLocatorWithoutHA(configuration).createSessionFactory() @AT@ 6455 @LENGTH@ 63
------UPD MethodInvocation@@HornetQClient.createClientSessionFactory(configuration) @TO@ HornetQClient.createServerLocatorWithoutHA(configuration).createSessionFactory() @AT@ 6462 @LENGTH@ 55
---------DEL SimpleName@@MethodName:createClientSessionFactory:[configuration] @AT@ 6476 @LENGTH@ 41
------------DEL SimpleName@@configuration @AT@ 6503 @LENGTH@ 13
---------INS MethodInvocation@@MethodName:createServerLocatorWithoutHA:[configuration] @TO@ MethodInvocation@@HornetQClient.createClientSessionFactory(configuration) @AT@ 6479 @LENGTH@ 57
------------INS SimpleName@@configuration @TO@ MethodInvocation@@MethodName:createServerLocatorWithoutHA:[configuration] @AT@ 6522 @LENGTH@ 13
---------INS SimpleName@@MethodName:createSessionFactory:[] @TO@ MethodInvocation@@HornetQClient.createClientSessionFactory(configuration) @AT@ 6537 @LENGTH@ 22


INS ExpressionStatement@@MethodInvocation:registrations.clear() @TO@ MethodDeclaration@@protected, void, MethodName:doStop, Exception,  @AT@ 3564 @LENGTH@ 22
---INS MethodInvocation@@registrations.clear() @TO@ ExpressionStatement@@MethodInvocation:registrations.clear() @AT@ 3564 @LENGTH@ 21
------INS SimpleName@@Name:registrations @TO@ MethodInvocation@@registrations.clear() @AT@ 3564 @LENGTH@ 13
------INS SimpleName@@MethodName:clear:[] @TO@ MethodInvocation@@registrations.clear() @AT@ 3578 @LENGTH@ 7


UPD ExpressionStatement@@Assignment:this.updater=(AtomicReferenceFieldUpdater<C,Map<K,V>>)updater @TO@ Assignment:this.updater=(AtomicReferenceFieldUpdater)updater @AT@ 1743 @LENGTH@ 67
---UPD Assignment@@this.updater=(AtomicReferenceFieldUpdater<C,Map<K,V>>)updater @TO@ this.updater=(AtomicReferenceFieldUpdater)updater @AT@ 1743 @LENGTH@ 66
------UPD CastExpression@@(AtomicReferenceFieldUpdater<C,Map<K,V>>)updater @TO@ (AtomicReferenceFieldUpdater)updater @AT@ 1758 @LENGTH@ 51
---------DEL ParameterizedType@@AtomicReferenceFieldUpdater<C,Map<K,V>> @AT@ 1759 @LENGTH@ 41
------------DEL SimpleType@@AtomicReferenceFieldUpdater @AT@ 1759 @LENGTH@ 27
------------DEL SimpleType@@C @AT@ 1787 @LENGTH@ 1
------------DEL ParameterizedType@@Map<K,V> @AT@ 1790 @LENGTH@ 9
---------------DEL SimpleType@@Map @AT@ 1790 @LENGTH@ 3
---------------DEL SimpleType@@K @AT@ 1794 @LENGTH@ 1
---------------DEL SimpleType@@V @AT@ 1797 @LENGTH@ 1
---------INS SimpleType@@AtomicReferenceFieldUpdater @TO@ CastExpression@@(AtomicReferenceFieldUpdater<C,Map<K,V>>)updater @AT@ 1759 @LENGTH@ 27


UPD VariableDeclarationStatement@@final MountHandle mountHandle=phaseContext.getDeploymentUnit().getAttachment(Attachments.DEPLOYMENT_ROOT_MOUNT_HANDLE); @TO@ final MountHandle mountHandle=phaseContext.getDeploymentUnit().getAttachment(Attachments.DEPLOYMENT_ROOT).getMountHandle(); @AT@ 3758 @LENGTH@ 121
---UPD VariableDeclarationFragment@@mountHandle=phaseContext.getDeploymentUnit().getAttachment(Attachments.DEPLOYMENT_ROOT_MOUNT_HANDLE) @TO@ mountHandle=phaseContext.getDeploymentUnit().getAttachment(Attachments.DEPLOYMENT_ROOT).getMountHandle() @AT@ 3776 @LENGTH@ 102
------UPD MethodInvocation@@phaseContext.getDeploymentUnit().getAttachment(Attachments.DEPLOYMENT_ROOT_MOUNT_HANDLE) @TO@ phaseContext.getDeploymentUnit().getAttachment(Attachments.DEPLOYMENT_ROOT).getMountHandle() @AT@ 3790 @LENGTH@ 88
---------INS MethodInvocation@@MethodName:getAttachment:[Attachments.DEPLOYMENT_ROOT] @TO@ MethodInvocation@@phaseContext.getDeploymentUnit().getAttachment(Attachments.DEPLOYMENT_ROOT_MOUNT_HANDLE) @AT@ 3790 @LENGTH@ 75
------------INS QualifiedName@@Attachments.DEPLOYMENT_ROOT @TO@ MethodInvocation@@MethodName:getAttachment:[Attachments.DEPLOYMENT_ROOT] @AT@ 3837 @LENGTH@ 27
---------------MOV SimpleName@@Attachments @TO@ QualifiedName@@Attachments.DEPLOYMENT_ROOT @AT@ 3837 @LENGTH@ 11
---------------MOV SimpleName@@DEPLOYMENT_ROOT_MOUNT_HANDLE @TO@ QualifiedName@@Attachments.DEPLOYMENT_ROOT @AT@ 3849 @LENGTH@ 28
---------DEL SimpleName@@MethodName:getAttachment:[Attachments.DEPLOYMENT_ROOT_MOUNT_HANDLE] @AT@ 3823 @LENGTH@ 55
------------DEL QualifiedName@@Attachments.DEPLOYMENT_ROOT_MOUNT_HANDLE @AT@ 3837 @LENGTH@ 40
---------INS SimpleName@@MethodName:getMountHandle:[] @TO@ MethodInvocation@@phaseContext.getDeploymentUnit().getAttachment(Attachments.DEPLOYMENT_ROOT_MOUNT_HANDLE) @AT@ 3866 @LENGTH@ 16


UPD MethodDeclaration@@public, boolean, MethodName:canAppearNext, CommandContext ctx,  @TO@ public, boolean, MethodName:canAppearNext, CommandContext ctx, CommandFormatException,  @AT@ 2228 @LENGTH@ 207
---INS SimpleType@@CommandFormatException @TO@ MethodDeclaration@@public, boolean, MethodName:canAppearNext, CommandContext ctx,  @AT@ 2284 @LENGTH@ 22


INS IfStatement@@if (value == null) {  return null;} @TO@ MethodDeclaration@@public, AttachmentList<T>, MethodName:cast, final Object value,  @AT@ 1415 @LENGTH@ 55
---INS InfixExpression@@value == null @TO@ IfStatement@@if (value == null) {  return null;} @AT@ 1419 @LENGTH@ 13
------INS SimpleName@@value @TO@ InfixExpression@@value == null @AT@ 1419 @LENGTH@ 5
------INS Operator@@== @TO@ InfixExpression@@value == null @AT@ 1424 @LENGTH@ 2
------INS NullLiteral@@null @TO@ InfixExpression@@value == null @AT@ 1428 @LENGTH@ 4
---INS Block@@ThenBody:{  return null;} @TO@ IfStatement@@if (value == null) {  return null;} @AT@ 1434 @LENGTH@ 36
------INS ReturnStatement@@NullLiteral:null @TO@ Block@@ThenBody:{  return null;} @AT@ 1448 @LENGTH@ 12
---------INS NullLiteral@@null @TO@ ReturnStatement@@NullLiteral:null @AT@ 1455 @LENGTH@ 4


UPD MethodDeclaration@@public, void, MethodName:handle, ParsingContext ctx, OperationFormatException,  @TO@ public, void, MethodName:handle, ParsingContext ctx, CommandFormatException,  @AT@ 1896 @LENGTH@ 153
---UPD SimpleType@@OperationFormatException @TO@ CommandFormatException @AT@ 1962 @LENGTH@ 24


DEL FieldDeclaration@@public, static, final, AttachmentKey<MountHandle>, [DEPLOYMENT_ROOT_MOUNT_HANDLE=AttachmentKey.create(MountHandle.class)] @AT@ 2625 @LENGTH@ 118
---DEL Modifier@@public @AT@ 2625 @LENGTH@ 6
---DEL Modifier@@static @AT@ 2632 @LENGTH@ 6
---DEL Modifier@@final @AT@ 2639 @LENGTH@ 5
---DEL ParameterizedType@@AttachmentKey<MountHandle> @AT@ 2645 @LENGTH@ 26
------DEL SimpleType@@AttachmentKey @AT@ 2645 @LENGTH@ 13
------DEL SimpleType@@MountHandle @AT@ 2659 @LENGTH@ 11
---DEL VariableDeclarationFragment@@DEPLOYMENT_ROOT_MOUNT_HANDLE=AttachmentKey.create(MountHandle.class) @AT@ 2672 @LENGTH@ 70
------DEL SimpleName@@DEPLOYMENT_ROOT_MOUNT_HANDLE @AT@ 2672 @LENGTH@ 28
------DEL MethodInvocation@@AttachmentKey.create(MountHandle.class) @AT@ 2703 @LENGTH@ 39
---------DEL SimpleName@@Name:AttachmentKey @AT@ 2703 @LENGTH@ 13
---------DEL SimpleName@@MethodName:create:[MountHandle.class] @AT@ 2717 @LENGTH@ 25
------------DEL TypeLiteral@@MountHandle.class @AT@ 2724 @LENGTH@ 17


INS FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @TO@ TypeDeclaration@@MutableUser, [MutableUserDetails] @AT@ 379 @LENGTH@ 90
---INS Modifier@@private @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @AT@ 379 @LENGTH@ 7
---INS Modifier@@static @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @AT@ 387 @LENGTH@ 6
---INS Modifier@@final @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @AT@ 394 @LENGTH@ 5
---INS PrimitiveType@@long @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @AT@ 400 @LENGTH@ 4
---INS VariableDeclarationFragment@@serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @AT@ 405 @LENGTH@ 63
------INS SimpleName@@serialVersionUID @TO@ VariableDeclarationFragment@@serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID @AT@ 405 @LENGTH@ 16
------INS QualifiedName@@SpringSecurityCoreVersion.SERIAL_VERSION_UID @TO@ VariableDeclarationFragment@@serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID @AT@ 424 @LENGTH@ 44
---------INS SimpleName@@SpringSecurityCoreVersion @TO@ QualifiedName@@SpringSecurityCoreVersion.SERIAL_VERSION_UID @AT@ 424 @LENGTH@ 25
---------INS SimpleName@@SERIAL_VERSION_UID @TO@ QualifiedName@@SpringSecurityCoreVersion.SERIAL_VERSION_UID @AT@ 450 @LENGTH@ 18


UPD MethodDeclaration@@public, static, void, MethodName:initOperations, final ModelNodeRegistration root, final DeploymentRepository deploymentRepository, final ExtensibleConfigurationPersister extensibleConfigurationPersister,  @TO@ public, static, void, MethodName:initOperations, final ModelNodeRegistration root, final DeploymentRepository deploymentRepository, final ExtensibleConfigurationPersister extensibleConfigurationPersister, ServerEnvironment serverEnvironment,  @AT@ 7363 @LENGTH@ 10052
---INS SingleVariableDeclaration@@ServerEnvironment serverEnvironment @TO@ MethodDeclaration@@public, static, void, MethodName:initOperations, final ModelNodeRegistration root, final DeploymentRepository deploymentRepository, final ExtensibleConfigurationPersister extensibleConfigurationPersister,  @AT@ 7614 @LENGTH@ 35
------INS SimpleType@@ServerEnvironment @TO@ SingleVariableDeclaration@@ServerEnvironment serverEnvironment @AT@ 7614 @LENGTH@ 17
------INS SimpleName@@serverEnvironment @TO@ SingleVariableDeclaration@@ServerEnvironment serverEnvironment @AT@ 7632 @LENGTH@ 17
---INS IfStatement@@if (serverEnvironment != null && serverEnvironment.isStandalone()) root.registerOperationHandler(ServerShutdownHandler.OPERATION_NAME,ServerShutdownHandler.INSTANCE,ServerShutdownHandler.INSTANCE,false); @TO@ MethodDeclaration@@public, static, void, MethodName:initOperations, final ModelNodeRegistration root, final DeploymentRepository deploymentRepository, final ExtensibleConfigurationPersister extensibleConfigurationPersister,  @AT@ 11957 @LENGTH@ 218
------INS InfixExpression@@serverEnvironment != null && serverEnvironment.isStandalone() @TO@ IfStatement@@if (serverEnvironment != null && serverEnvironment.isStandalone()) root.registerOperationHandler(ServerShutdownHandler.OPERATION_NAME,ServerShutdownHandler.INSTANCE,ServerShutdownHandler.INSTANCE,false); @AT@ 11961 @LENGTH@ 61
---------INS InfixExpression@@serverEnvironment != null @TO@ InfixExpression@@serverEnvironment != null && serverEnvironment.isStandalone() @AT@ 11961 @LENGTH@ 25
------------INS SimpleName@@serverEnvironment @TO@ InfixExpression@@serverEnvironment != null @AT@ 11961 @LENGTH@ 17
------------INS Operator@@!= @TO@ InfixExpression@@serverEnvironment != null @AT@ 11978 @LENGTH@ 2
------------INS NullLiteral@@null @TO@ InfixExpression@@serverEnvironment != null @AT@ 11982 @LENGTH@ 4
---------INS Operator@@&& @TO@ InfixExpression@@serverEnvironment != null && serverEnvironment.isStandalone() @AT@ 11986 @LENGTH@ 2
---------INS MethodInvocation@@serverEnvironment.isStandalone() @TO@ InfixExpression@@serverEnvironment != null && serverEnvironment.isStandalone() @AT@ 11990 @LENGTH@ 32
------------INS SimpleName@@Name:serverEnvironment @TO@ MethodInvocation@@serverEnvironment.isStandalone() @AT@ 11990 @LENGTH@ 17
------------INS SimpleName@@MethodName:isStandalone:[] @TO@ MethodInvocation@@serverEnvironment.isStandalone() @AT@ 12008 @LENGTH@ 14
------INS Block@@ThenBody:root.registerOperationHandler(ServerShutdownHandler.OPERATION_NAME,ServerShutdownHandler.INSTANCE,ServerShutdownHandler.INSTANCE,false); @TO@ IfStatement@@if (serverEnvironment != null && serverEnvironment.isStandalone()) root.registerOperationHandler(ServerShutdownHandler.OPERATION_NAME,ServerShutdownHandler.INSTANCE,ServerShutdownHandler.INSTANCE,false); @AT@ 12036 @LENGTH@ 139
---------INS ExpressionStatement@@MethodInvocation:root.registerOperationHandler(ServerShutdownHandler.OPERATION_NAME,ServerShutdownHandler.INSTANCE,ServerShutdownHandler.INSTANCE,false) @TO@ Block@@ThenBody:root.registerOperationHandler(ServerShutdownHandler.OPERATION_NAME,ServerShutdownHandler.INSTANCE,ServerShutdownHandler.INSTANCE,false); @AT@ 12036 @LENGTH@ 139
------------INS MethodInvocation@@root.registerOperationHandler(ServerShutdownHandler.OPERATION_NAME,ServerShutdownHandler.INSTANCE,ServerShutdownHandler.INSTANCE,false) @TO@ ExpressionStatement@@MethodInvocation:root.registerOperationHandler(ServerShutdownHandler.OPERATION_NAME,ServerShutdownHandler.INSTANCE,ServerShutdownHandler.INSTANCE,false) @AT@ 12036 @LENGTH@ 138
---------------INS SimpleName@@Name:root @TO@ MethodInvocation@@root.registerOperationHandler(ServerShutdownHandler.OPERATION_NAME,ServerShutdownHandler.INSTANCE,ServerShutdownHandler.INSTANCE,false) @AT@ 12036 @LENGTH@ 4
---------------INS SimpleName@@MethodName:registerOperationHandler:[ServerShutdownHandler.OPERATION_NAME, ServerShutdownHandler.INSTANCE, ServerShutdownHandler.INSTANCE, false] @TO@ MethodInvocation@@root.registerOperationHandler(ServerShutdownHandler.OPERATION_NAME,ServerShutdownHandler.INSTANCE,ServerShutdownHandler.INSTANCE,false) @AT@ 12041 @LENGTH@ 133
------------------INS QualifiedName@@ServerShutdownHandler.OPERATION_NAME @TO@ SimpleName@@MethodName:registerOperationHandler:[ServerShutdownHandler.OPERATION_NAME, ServerShutdownHandler.INSTANCE, ServerShutdownHandler.INSTANCE, false] @AT@ 12066 @LENGTH@ 36
---------------------INS SimpleName@@ServerShutdownHandler @TO@ QualifiedName@@ServerShutdownHandler.OPERATION_NAME @AT@ 12066 @LENGTH@ 21
---------------------INS SimpleName@@OPERATION_NAME @TO@ QualifiedName@@ServerShutdownHandler.OPERATION_NAME @AT@ 12088 @LENGTH@ 14
------------------INS QualifiedName@@ServerShutdownHandler.INSTANCE @TO@ SimpleName@@MethodName:registerOperationHandler:[ServerShutdownHandler.OPERATION_NAME, ServerShutdownHandler.INSTANCE, ServerShutdownHandler.INSTANCE, false] @AT@ 12104 @LENGTH@ 30
---------------------INS SimpleName@@ServerShutdownHandler @TO@ QualifiedName@@ServerShutdownHandler.INSTANCE @AT@ 12104 @LENGTH@ 21
---------------------INS SimpleName@@INSTANCE @TO@ QualifiedName@@ServerShutdownHandler.INSTANCE @AT@ 12126 @LENGTH@ 8
------------------INS QualifiedName@@ServerShutdownHandler.INSTANCE @TO@ SimpleName@@MethodName:registerOperationHandler:[ServerShutdownHandler.OPERATION_NAME, ServerShutdownHandler.INSTANCE, ServerShutdownHandler.INSTANCE, false] @AT@ 12136 @LENGTH@ 30
---------------------INS SimpleName@@ServerShutdownHandler @TO@ QualifiedName@@ServerShutdownHandler.INSTANCE @AT@ 12136 @LENGTH@ 21
---------------------INS SimpleName@@INSTANCE @TO@ QualifiedName@@ServerShutdownHandler.INSTANCE @AT@ 12158 @LENGTH@ 8
------------------INS BooleanLiteral@@false @TO@ SimpleName@@MethodName:registerOperationHandler:[ServerShutdownHandler.OPERATION_NAME, ServerShutdownHandler.INSTANCE, ServerShutdownHandler.INSTANCE, false] @AT@ 12168 @LENGTH@ 5


UPD MethodDeclaration@@public, void, MethodName:handle, ParsingContext ctx, OperationFormatException,  @TO@ public, void, MethodName:handle, ParsingContext ctx, CommandFormatException,  @AT@ 2235 @LENGTH@ 151
---UPD SimpleType@@OperationFormatException @TO@ CommandFormatException @AT@ 2297 @LENGTH@ 24


UPD VariableDeclarationStatement@@TransactionAttributeType txAttr=perMethod.get(new ArrayKey(method.getParameterTypes())); @TO@ TransactionAttributeType txAttr=perMethod.get(new ArrayKey((Object[])method.getParameterTypes())); @AT@ 4887 @LENGTH@ 90
---UPD VariableDeclarationFragment@@txAttr=perMethod.get(new ArrayKey(method.getParameterTypes())) @TO@ txAttr=perMethod.get(new ArrayKey((Object[])method.getParameterTypes())) @AT@ 4912 @LENGTH@ 64
------UPD MethodInvocation@@perMethod.get(new ArrayKey(method.getParameterTypes())) @TO@ perMethod.get(new ArrayKey((Object[])method.getParameterTypes())) @AT@ 4921 @LENGTH@ 55
---------UPD SimpleName@@MethodName:get:[new ArrayKey(method.getParameterTypes())] @TO@ MethodName:get:[new ArrayKey((Object[])method.getParameterTypes())] @AT@ 4931 @LENGTH@ 45
------------UPD ClassInstanceCreation@@ArrayKey[method.getParameterTypes()] @TO@ ArrayKey[(Object[])method.getParameterTypes()] @AT@ 4935 @LENGTH@ 40
---------------INS CastExpression@@(Object[])method.getParameterTypes() @TO@ ClassInstanceCreation@@ArrayKey[method.getParameterTypes()] @AT@ 4948 @LENGTH@ 37
------------------INS ArrayType@@Object[] @TO@ CastExpression@@(Object[])method.getParameterTypes() @AT@ 4949 @LENGTH@ 8
---------------------INS SimpleType@@Object @TO@ ArrayType@@Object[] @AT@ 4949 @LENGTH@ 6
------------------INS MethodInvocation@@method.getParameterTypes() @TO@ CastExpression@@(Object[])method.getParameterTypes() @AT@ 4959 @LENGTH@ 26
---------------------MOV SimpleName@@Name:method @TO@ MethodInvocation@@method.getParameterTypes() @AT@ 4948 @LENGTH@ 6
---------------------MOV SimpleName@@MethodName:getParameterTypes:[] @TO@ MethodInvocation@@method.getParameterTypes() @AT@ 4955 @LENGTH@ 19
---------------DEL MethodInvocation@@method.getParameterTypes() @AT@ 4948 @LENGTH@ 26


INS TryStatement@@try {  if (!ctx.getParsedArguments().hasArguments()) {    throw new OperationFormatException("Arguments are missing");  }} catch (CommandFormatException e) {  throw new OperationFormatException(e.getLocalizedMessage());} @TO@ MethodDeclaration@@public, ModelNode, MethodName:buildRequest, CommandContext ctx, OperationFormatException,  @AT@ 2592 @LENGTH@ 283
---MOV IfStatement@@if (!ctx.getParsedArguments().hasArguments()) {  throw new OperationFormatException("Arguments are missing");} @TO@ TryStatement@@try {  if (!ctx.getParsedArguments().hasArguments()) {    throw new OperationFormatException("Arguments are missing");  }} catch (CommandFormatException e) {  throw new OperationFormatException(e.getLocalizedMessage());} @AT@ 2544 @LENGTH@ 129
---INS CatchClause@@catch (CommandFormatException e) {  throw new OperationFormatException(e.getLocalizedMessage());} @TO@ TryStatement@@try {  if (!ctx.getParsedArguments().hasArguments()) {    throw new OperationFormatException("Arguments are missing");  }} catch (CommandFormatException e) {  throw new OperationFormatException(e.getLocalizedMessage());} @AT@ 2758 @LENGTH@ 117
------INS SingleVariableDeclaration@@CommandFormatException e @TO@ CatchClause@@catch (CommandFormatException e) {  throw new OperationFormatException(e.getLocalizedMessage());} @AT@ 2765 @LENGTH@ 24
---------INS SimpleType@@CommandFormatException @TO@ SingleVariableDeclaration@@CommandFormatException e @AT@ 2765 @LENGTH@ 22
---------INS SimpleName@@e @TO@ SingleVariableDeclaration@@CommandFormatException e @AT@ 2788 @LENGTH@ 1
------INS ThrowStatement@@ClassInstanceCreation:new OperationFormatException(e.getLocalizedMessage()) @TO@ CatchClause@@catch (CommandFormatException e) {  throw new OperationFormatException(e.getLocalizedMessage());} @AT@ 2805 @LENGTH@ 60
---------INS ClassInstanceCreation@@OperationFormatException[e.getLocalizedMessage()] @TO@ ThrowStatement@@ClassInstanceCreation:new OperationFormatException(e.getLocalizedMessage()) @AT@ 2811 @LENGTH@ 53
------------INS New@@new @TO@ ClassInstanceCreation@@OperationFormatException[e.getLocalizedMessage()] @AT@ 2811 @LENGTH@ 3
------------INS SimpleType@@OperationFormatException @TO@ ClassInstanceCreation@@OperationFormatException[e.getLocalizedMessage()] @AT@ 2815 @LENGTH@ 24
------------INS MethodInvocation@@e.getLocalizedMessage() @TO@ ClassInstanceCreation@@OperationFormatException[e.getLocalizedMessage()] @AT@ 2840 @LENGTH@ 23
---------------INS SimpleName@@Name:e @TO@ MethodInvocation@@e.getLocalizedMessage() @AT@ 2840 @LENGTH@ 1
---------------INS SimpleName@@MethodName:getLocalizedMessage:[] @TO@ MethodInvocation@@e.getLocalizedMessage() @AT@ 2842 @LENGTH@ 21


INS FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @TO@ TypeDeclaration@@[public]RememberMeAuthenticationToken, AbstractAuthenticationToken @AT@ 1198 @LENGTH@ 90
---INS Modifier@@private @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @AT@ 1198 @LENGTH@ 7
---INS Modifier@@static @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @AT@ 1206 @LENGTH@ 6
---INS Modifier@@final @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @AT@ 1213 @LENGTH@ 5
---INS PrimitiveType@@long @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @AT@ 1219 @LENGTH@ 4
---INS VariableDeclarationFragment@@serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @AT@ 1224 @LENGTH@ 63
------INS SimpleName@@serialVersionUID @TO@ VariableDeclarationFragment@@serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID @AT@ 1224 @LENGTH@ 16
------INS QualifiedName@@SpringSecurityCoreVersion.SERIAL_VERSION_UID @TO@ VariableDeclarationFragment@@serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID @AT@ 1243 @LENGTH@ 44
---------INS SimpleName@@SpringSecurityCoreVersion @TO@ QualifiedName@@SpringSecurityCoreVersion.SERIAL_VERSION_UID @AT@ 1243 @LENGTH@ 25
---------INS SimpleName@@SERIAL_VERSION_UID @TO@ QualifiedName@@SpringSecurityCoreVersion.SERIAL_VERSION_UID @AT@ 1269 @LENGTH@ 18


INS MethodDeclaration@@public, void, MethodName:testTest, Exception,  @TO@ TypeDeclaration@@[public]AddressOnlyParsingTestCase, TestCase @AT@ 23499 @LENGTH@ 717
---INS Modifier@@public @TO@ MethodDeclaration@@public, void, MethodName:testTest, Exception,  @AT@ 23499 @LENGTH@ 6
---INS PrimitiveType@@void @TO@ MethodDeclaration@@public, void, MethodName:testTest, Exception,  @AT@ 23506 @LENGTH@ 4
---INS SimpleName@@MethodName:testTest @TO@ MethodDeclaration@@public, void, MethodName:testTest, Exception,  @AT@ 23511 @LENGTH@ 8
---INS SimpleType@@Exception @TO@ MethodDeclaration@@public, void, MethodName:testTest, Exception,  @AT@ 23529 @LENGTH@ 9
---INS VariableDeclarationStatement@@DefaultOperationCallbackHandler handler=new DefaultOperationCallbackHandler(); @TO@ MethodDeclaration@@public, void, MethodName:testTest, Exception,  @AT@ 23550 @LENGTH@ 80
------INS SimpleType@@DefaultOperationCallbackHandler @TO@ VariableDeclarationStatement@@DefaultOperationCallbackHandler handler=new DefaultOperationCallbackHandler(); @AT@ 23550 @LENGTH@ 31
------INS VariableDeclarationFragment@@handler=new DefaultOperationCallbackHandler() @TO@ VariableDeclarationStatement@@DefaultOperationCallbackHandler handler=new DefaultOperationCallbackHandler(); @AT@ 23582 @LENGTH@ 47
---------INS SimpleName@@handler @TO@ VariableDeclarationFragment@@handler=new DefaultOperationCallbackHandler() @AT@ 23582 @LENGTH@ 7
---------INS ClassInstanceCreation@@DefaultOperationCallbackHandler[] @TO@ VariableDeclarationFragment@@handler=new DefaultOperationCallbackHandler() @AT@ 23592 @LENGTH@ 37
------------INS New@@new @TO@ ClassInstanceCreation@@DefaultOperationCallbackHandler[] @AT@ 23592 @LENGTH@ 3
------------INS SimpleType@@DefaultOperationCallbackHandler @TO@ ClassInstanceCreation@@DefaultOperationCallbackHandler[] @AT@ 23596 @LENGTH@ 31
---INS ExpressionStatement@@MethodInvocation:parser.parse("/subsystem=datasources/data-source=java\\:\\/H2DS",handler) @TO@ MethodDeclaration@@public, void, MethodName:testTest, Exception,  @AT@ 23640 @LENGTH@ 75
------INS MethodInvocation@@parser.parse("/subsystem=datasources/data-source=java\\:\\/H2DS",handler) @TO@ ExpressionStatement@@MethodInvocation:parser.parse("/subsystem=datasources/data-source=java\\:\\/H2DS",handler) @AT@ 23640 @LENGTH@ 74
---------INS SimpleName@@Name:parser @TO@ MethodInvocation@@parser.parse("/subsystem=datasources/data-source=java\\:\\/H2DS",handler) @AT@ 23640 @LENGTH@ 6
---------INS SimpleName@@MethodName:parse:["/subsystem=datasources/data-source=java\\:\\/H2DS", handler] @TO@ MethodInvocation@@parser.parse("/subsystem=datasources/data-source=java\\:\\/H2DS",handler) @AT@ 23647 @LENGTH@ 67
------------INS StringLiteral@@"/subsystem=datasources/data-source=java\\:\\/H2DS" @TO@ SimpleName@@MethodName:parse:["/subsystem=datasources/data-source=java\\:\\/H2DS", handler] @AT@ 23653 @LENGTH@ 51
------------INS SimpleName@@handler @TO@ SimpleName@@MethodName:parse:["/subsystem=datasources/data-source=java\\:\\/H2DS", handler] @AT@ 23706 @LENGTH@ 7
---INS VariableDeclarationStatement@@OperationRequestAddress address=handler.getAddress(); @TO@ MethodDeclaration@@public, void, MethodName:testTest, Exception,  @AT@ 23725 @LENGTH@ 55
------INS SimpleType@@OperationRequestAddress @TO@ VariableDeclarationStatement@@OperationRequestAddress address=handler.getAddress(); @AT@ 23725 @LENGTH@ 23
------INS VariableDeclarationFragment@@address=handler.getAddress() @TO@ VariableDeclarationStatement@@OperationRequestAddress address=handler.getAddress(); @AT@ 23749 @LENGTH@ 30
---------INS SimpleName@@address @TO@ VariableDeclarationFragment@@address=handler.getAddress() @AT@ 23749 @LENGTH@ 7
---------INS MethodInvocation@@handler.getAddress() @TO@ VariableDeclarationFragment@@address=handler.getAddress() @AT@ 23759 @LENGTH@ 20
------------INS SimpleName@@Name:handler @TO@ MethodInvocation@@handler.getAddress() @AT@ 23759 @LENGTH@ 7
------------INS SimpleName@@MethodName:getAddress:[] @TO@ MethodInvocation@@handler.getAddress() @AT@ 23767 @LENGTH@ 12
---INS ExpressionStatement@@MethodInvocation:assertNotNull(address) @TO@ MethodDeclaration@@public, void, MethodName:testTest, Exception,  @AT@ 23789 @LENGTH@ 23
------INS MethodInvocation@@assertNotNull(address) @TO@ ExpressionStatement@@MethodInvocation:assertNotNull(address) @AT@ 23789 @LENGTH@ 22
---------INS SimpleName@@MethodName:assertNotNull:[address] @TO@ MethodInvocation@@assertNotNull(address) @AT@ 23789 @LENGTH@ 22
------------INS SimpleName@@address @TO@ SimpleName@@MethodName:assertNotNull:[address] @AT@ 23803 @LENGTH@ 7
---INS VariableDeclarationStatement@@Iterator<Node> nodes=address.iterator(); @TO@ MethodDeclaration@@public, void, MethodName:testTest, Exception,  @AT@ 23821 @LENGTH@ 42
------INS ParameterizedType@@Iterator<Node> @TO@ VariableDeclarationStatement@@Iterator<Node> nodes=address.iterator(); @AT@ 23821 @LENGTH@ 14
---------INS SimpleType@@Iterator @TO@ ParameterizedType@@Iterator<Node> @AT@ 23821 @LENGTH@ 8
---------INS SimpleType@@Node @TO@ ParameterizedType@@Iterator<Node> @AT@ 23830 @LENGTH@ 4
------INS VariableDeclarationFragment@@nodes=address.iterator() @TO@ VariableDeclarationStatement@@Iterator<Node> nodes=address.iterator(); @AT@ 23836 @LENGTH@ 26
---------INS SimpleName@@nodes @TO@ VariableDeclarationFragment@@nodes=address.iterator() @AT@ 23836 @LENGTH@ 5
---------INS MethodInvocation@@address.iterator() @TO@ VariableDeclarationFragment@@nodes=address.iterator() @AT@ 23844 @LENGTH@ 18
------------INS SimpleName@@Name:address @TO@ MethodInvocation@@address.iterator() @AT@ 23844 @LENGTH@ 7
------------INS SimpleName@@MethodName:iterator:[] @TO@ MethodInvocation@@address.iterator() @AT@ 23852 @LENGTH@ 10
---INS ExpressionStatement@@MethodInvocation:assertTrue(nodes.hasNext()) @TO@ MethodDeclaration@@public, void, MethodName:testTest, Exception,  @AT@ 23872 @LENGTH@ 28
------INS MethodInvocation@@assertTrue(nodes.hasNext()) @TO@ ExpressionStatement@@MethodInvocation:assertTrue(nodes.hasNext()) @AT@ 23872 @LENGTH@ 27
---------INS SimpleName@@MethodName:assertTrue:[nodes.hasNext()] @TO@ MethodInvocation@@assertTrue(nodes.hasNext()) @AT@ 23872 @LENGTH@ 27
------------INS MethodInvocation@@nodes.hasNext() @TO@ SimpleName@@MethodName:assertTrue:[nodes.hasNext()] @AT@ 23883 @LENGTH@ 15
---------------INS SimpleName@@Name:nodes @TO@ MethodInvocation@@nodes.hasNext() @AT@ 23883 @LENGTH@ 5
---------------INS SimpleName@@MethodName:hasNext:[] @TO@ MethodInvocation@@nodes.hasNext() @AT@ 23889 @LENGTH@ 9
---INS VariableDeclarationStatement@@Node node=nodes.next(); @TO@ MethodDeclaration@@public, void, MethodName:testTest, Exception,  @AT@ 23909 @LENGTH@ 25
------INS SimpleType@@Node @TO@ VariableDeclarationStatement@@Node node=nodes.next(); @AT@ 23909 @LENGTH@ 4
------INS VariableDeclarationFragment@@node=nodes.next() @TO@ VariableDeclarationStatement@@Node node=nodes.next(); @AT@ 23914 @LENGTH@ 19
---------INS SimpleName@@node @TO@ VariableDeclarationFragment@@node=nodes.next() @AT@ 23914 @LENGTH@ 4
---------INS MethodInvocation@@nodes.next() @TO@ VariableDeclarationFragment@@node=nodes.next() @AT@ 23921 @LENGTH@ 12
------------INS SimpleName@@Name:nodes @TO@ MethodInvocation@@nodes.next() @AT@ 23921 @LENGTH@ 5
------------INS SimpleName@@MethodName:next:[] @TO@ MethodInvocation@@nodes.next() @AT@ 23927 @LENGTH@ 6
---INS ExpressionStatement@@MethodInvocation:assertEquals("subsystem",node.getType()) @TO@ MethodDeclaration@@public, void, MethodName:testTest, Exception,  @AT@ 23943 @LENGTH@ 42
------INS MethodInvocation@@assertEquals("subsystem",node.getType()) @TO@ ExpressionStatement@@MethodInvocation:assertEquals("subsystem",node.getType()) @AT@ 23943 @LENGTH@ 41
---------INS SimpleName@@MethodName:assertEquals:["subsystem", node.getType()] @TO@ MethodInvocation@@assertEquals("subsystem",node.getType()) @AT@ 23943 @LENGTH@ 41
------------INS StringLiteral@@"subsystem" @TO@ SimpleName@@MethodName:assertEquals:["subsystem", node.getType()] @AT@ 23956 @LENGTH@ 11
------------INS MethodInvocation@@node.getType() @TO@ SimpleName@@MethodName:assertEquals:["subsystem", node.getType()] @AT@ 23969 @LENGTH@ 14
---------------INS SimpleName@@Name:node @TO@ MethodInvocation@@node.getType() @AT@ 23969 @LENGTH@ 4
---------------INS SimpleName@@MethodName:getType:[] @TO@ MethodInvocation@@node.getType() @AT@ 23974 @LENGTH@ 9
---INS ExpressionStatement@@MethodInvocation:assertEquals("datasources",node.getName()) @TO@ MethodDeclaration@@public, void, MethodName:testTest, Exception,  @AT@ 23994 @LENGTH@ 44
------INS MethodInvocation@@assertEquals("datasources",node.getName()) @TO@ ExpressionStatement@@MethodInvocation:assertEquals("datasources",node.getName()) @AT@ 23994 @LENGTH@ 43
---------INS SimpleName@@MethodName:assertEquals:["datasources", node.getName()] @TO@ MethodInvocation@@assertEquals("datasources",node.getName()) @AT@ 23994 @LENGTH@ 43
------------INS StringLiteral@@"datasources" @TO@ SimpleName@@MethodName:assertEquals:["datasources", node.getName()] @AT@ 24007 @LENGTH@ 13
------------INS MethodInvocation@@node.getName() @TO@ SimpleName@@MethodName:assertEquals:["datasources", node.getName()] @AT@ 24022 @LENGTH@ 14
---------------INS SimpleName@@Name:node @TO@ MethodInvocation@@node.getName() @AT@ 24022 @LENGTH@ 4
---------------INS SimpleName@@MethodName:getName:[] @TO@ MethodInvocation@@node.getName() @AT@ 24027 @LENGTH@ 9
---INS ExpressionStatement@@MethodInvocation:assertTrue(nodes.hasNext()) @TO@ MethodDeclaration@@public, void, MethodName:testTest, Exception,  @AT@ 24048 @LENGTH@ 28
------INS MethodInvocation@@assertTrue(nodes.hasNext()) @TO@ ExpressionStatement@@MethodInvocation:assertTrue(nodes.hasNext()) @AT@ 24048 @LENGTH@ 27
---------INS SimpleName@@MethodName:assertTrue:[nodes.hasNext()] @TO@ MethodInvocation@@assertTrue(nodes.hasNext()) @AT@ 24048 @LENGTH@ 27
------------INS MethodInvocation@@nodes.hasNext() @TO@ SimpleName@@MethodName:assertTrue:[nodes.hasNext()] @AT@ 24059 @LENGTH@ 15
---------------INS SimpleName@@Name:nodes @TO@ MethodInvocation@@nodes.hasNext() @AT@ 24059 @LENGTH@ 5
---------------INS SimpleName@@MethodName:hasNext:[] @TO@ MethodInvocation@@nodes.hasNext() @AT@ 24065 @LENGTH@ 9
---INS ExpressionStatement@@Assignment:node=nodes.next() @TO@ MethodDeclaration@@public, void, MethodName:testTest, Exception,  @AT@ 24085 @LENGTH@ 20
------INS Assignment@@node=nodes.next() @TO@ ExpressionStatement@@Assignment:node=nodes.next() @AT@ 24085 @LENGTH@ 19
---------INS SimpleName@@node @TO@ Assignment@@node=nodes.next() @AT@ 24085 @LENGTH@ 4
---------INS Operator@@= @TO@ Assignment@@node=nodes.next() @AT@ 24089 @LENGTH@ 1
---------INS MethodInvocation@@nodes.next() @TO@ Assignment@@node=nodes.next() @AT@ 24092 @LENGTH@ 12
------------INS SimpleName@@Name:nodes @TO@ MethodInvocation@@nodes.next() @AT@ 24092 @LENGTH@ 5
------------INS SimpleName@@MethodName:next:[] @TO@ MethodInvocation@@nodes.next() @AT@ 24098 @LENGTH@ 6
---INS ExpressionStatement@@MethodInvocation:assertEquals("data-source",node.getType()) @TO@ MethodDeclaration@@public, void, MethodName:testTest, Exception,  @AT@ 24114 @LENGTH@ 44
------INS MethodInvocation@@assertEquals("data-source",node.getType()) @TO@ ExpressionStatement@@MethodInvocation:assertEquals("data-source",node.getType()) @AT@ 24114 @LENGTH@ 43
---------INS SimpleName@@MethodName:assertEquals:["data-source", node.getType()] @TO@ MethodInvocation@@assertEquals("data-source",node.getType()) @AT@ 24114 @LENGTH@ 43
------------INS StringLiteral@@"data-source" @TO@ SimpleName@@MethodName:assertEquals:["data-source", node.getType()] @AT@ 24127 @LENGTH@ 13
------------INS MethodInvocation@@node.getType() @TO@ SimpleName@@MethodName:assertEquals:["data-source", node.getType()] @AT@ 24142 @LENGTH@ 14
---------------INS SimpleName@@Name:node @TO@ MethodInvocation@@node.getType() @AT@ 24142 @LENGTH@ 4
---------------INS SimpleName@@MethodName:getType:[] @TO@ MethodInvocation@@node.getType() @AT@ 24147 @LENGTH@ 9
---INS ExpressionStatement@@MethodInvocation:assertEquals("java:/H2DS",node.getName()) @TO@ MethodDeclaration@@public, void, MethodName:testTest, Exception,  @AT@ 24167 @LENGTH@ 43
------INS MethodInvocation@@assertEquals("java:/H2DS",node.getName()) @TO@ ExpressionStatement@@MethodInvocation:assertEquals("java:/H2DS",node.getName()) @AT@ 24167 @LENGTH@ 42
---------INS SimpleName@@MethodName:assertEquals:["java:/H2DS", node.getName()] @TO@ MethodInvocation@@assertEquals("java:/H2DS",node.getName()) @AT@ 24167 @LENGTH@ 42
------------INS StringLiteral@@"java:/H2DS" @TO@ SimpleName@@MethodName:assertEquals:["java:/H2DS", node.getName()] @AT@ 24180 @LENGTH@ 12
------------INS MethodInvocation@@node.getName() @TO@ SimpleName@@MethodName:assertEquals:["java:/H2DS", node.getName()] @AT@ 24194 @LENGTH@ 14
---------------INS SimpleName@@Name:node @TO@ MethodInvocation@@node.getName() @AT@ 24194 @LENGTH@ 4
---------------INS SimpleName@@MethodName:getName:[] @TO@ MethodInvocation@@node.getName() @AT@ 24199 @LENGTH@ 9


UPD MethodDeclaration@@public, long, MethodName:qeueSize,  @TO@ public, long, MethodName:queueSize,  @AT@ 3869 @LENGTH@ 68
---UPD SimpleName@@MethodName:qeueSize @TO@ MethodName:queueSize @AT@ 3881 @LENGTH@ 8


UPD ExpressionStatement@@MethodInvocation:ctx.addDeploymentProcessor(Phase.PARSE,Phase.PARSE_JSF_MANAGED_BEANS,new JsfManagedBeanProcessor()) @TO@ MethodInvocation:ctx.addDeploymentProcessor(Phase.POST_MODULE,Phase.POST_MODULE_JSF_MANAGED_BEANS,new JsfManagedBeanProcessor()) @AT@ 6856 @LENGTH@ 102
---UPD MethodInvocation@@ctx.addDeploymentProcessor(Phase.PARSE,Phase.PARSE_JSF_MANAGED_BEANS,new JsfManagedBeanProcessor()) @TO@ ctx.addDeploymentProcessor(Phase.POST_MODULE,Phase.POST_MODULE_JSF_MANAGED_BEANS,new JsfManagedBeanProcessor()) @AT@ 6856 @LENGTH@ 101
------UPD SimpleName@@MethodName:addDeploymentProcessor:[Phase.PARSE, Phase.PARSE_JSF_MANAGED_BEANS, new JsfManagedBeanProcessor()] @TO@ MethodName:addDeploymentProcessor:[Phase.POST_MODULE, Phase.POST_MODULE_JSF_MANAGED_BEANS, new JsfManagedBeanProcessor()] @AT@ 6860 @LENGTH@ 97
---------UPD QualifiedName@@Phase.PARSE @TO@ Phase.POST_MODULE @AT@ 6883 @LENGTH@ 11
------------UPD SimpleName@@PARSE @TO@ POST_MODULE @AT@ 6889 @LENGTH@ 5
---------UPD QualifiedName@@Phase.PARSE_JSF_MANAGED_BEANS @TO@ Phase.POST_MODULE_JSF_MANAGED_BEANS @AT@ 6896 @LENGTH@ 29
------------UPD SimpleName@@PARSE_JSF_MANAGED_BEANS @TO@ POST_MODULE_JSF_MANAGED_BEANS @AT@ 6902 @LENGTH@ 23


UPD ExpressionStatement@@MethodInvocation:exchange.getOut().setHeader(Constants.PROPERTY_SCORE,new Integer(score)) @TO@ MethodInvocation:exchange.getOut().setHeader(Constants.PROPERTY_SCORE,score) @AT@ 1475 @LENGTH@ 74
---UPD MethodInvocation@@exchange.getOut().setHeader(Constants.PROPERTY_SCORE,new Integer(score)) @TO@ exchange.getOut().setHeader(Constants.PROPERTY_SCORE,score) @AT@ 1475 @LENGTH@ 73
------UPD SimpleName@@MethodName:setHeader:[Constants.PROPERTY_SCORE, new Integer(score)] @TO@ MethodName:setHeader:[Constants.PROPERTY_SCORE, score] @AT@ 1493 @LENGTH@ 55
---------DEL ClassInstanceCreation@@Integer[score] @AT@ 1529 @LENGTH@ 18
------------DEL New@@new @AT@ 1529 @LENGTH@ 3
------------DEL SimpleType@@Integer @AT@ 1533 @LENGTH@ 7
------------DEL SimpleName@@score @AT@ 1541 @LENGTH@ 5
---------INS SimpleName@@score @TO@ SimpleName@@MethodName:setHeader:[Constants.PROPERTY_SCORE, new Integer(score)] @AT@ 1529 @LENGTH@ 5


INS MethodDeclaration@@public, int, MethodName:getDefaultControllerPort,  @TO@ TypeDeclaration@@[public]MockCommandContext, [CommandContext] @AT@ 5693 @LENGTH@ 64
---INS Modifier@@public @TO@ MethodDeclaration@@public, int, MethodName:getDefaultControllerPort,  @AT@ 5693 @LENGTH@ 6
---INS PrimitiveType@@int @TO@ MethodDeclaration@@public, int, MethodName:getDefaultControllerPort,  @AT@ 5700 @LENGTH@ 3
---INS SimpleName@@MethodName:getDefaultControllerPort @TO@ MethodDeclaration@@public, int, MethodName:getDefaultControllerPort,  @AT@ 5704 @LENGTH@ 24
---INS ReturnStatement@@PrefixExpression:-1 @TO@ MethodDeclaration@@public, int, MethodName:getDefaultControllerPort,  @AT@ 5741 @LENGTH@ 10
------INS PrefixExpression@@-1 @TO@ ReturnStatement@@PrefixExpression:-1 @AT@ 5748 @LENGTH@ 2
---------INS Operator@@- @TO@ PrefixExpression@@-1 @AT@ 5748 @LENGTH@ 1
---------INS NumberLiteral@@1 @TO@ PrefixExpression@@-1 @AT@ 5749 @LENGTH@ 1


UPD IfStatement@@if (isDefaultPackage() && !Character.isUpperCase(fullyQualifiedTypeName.charAt(0))) {  return new JavaPackage("");} @TO@ if (isDefaultPackage()) {  return new JavaPackage("");} @AT@ 11327 @LENGTH@ 120
---DEL InfixExpression@@isDefaultPackage() && !Character.isUpperCase(fullyQualifiedTypeName.charAt(0)) @AT@ 11331 @LENGTH@ 78
------DEL MethodInvocation@@MethodName:isDefaultPackage:[] @AT@ 11331 @LENGTH@ 18
------DEL Operator@@&& @AT@ 11349 @LENGTH@ 2
------DEL PrefixExpression@@!Character.isUpperCase(fullyQualifiedTypeName.charAt(0)) @AT@ 11353 @LENGTH@ 56
---------DEL Operator@@! @AT@ 11353 @LENGTH@ 1
---------DEL MethodInvocation@@Character.isUpperCase(fullyQualifiedTypeName.charAt(0)) @AT@ 11354 @LENGTH@ 55
------------DEL SimpleName@@Name:Character @AT@ 11354 @LENGTH@ 9
------------DEL SimpleName@@MethodName:isUpperCase:[fullyQualifiedTypeName.charAt(0)] @AT@ 11364 @LENGTH@ 45
---------------DEL MethodInvocation@@fullyQualifiedTypeName.charAt(0) @AT@ 11376 @LENGTH@ 32
------------------DEL SimpleName@@Name:fullyQualifiedTypeName @AT@ 11376 @LENGTH@ 22
------------------DEL SimpleName@@MethodName:charAt:[0] @AT@ 11399 @LENGTH@ 9
---------------------DEL NumberLiteral@@0 @AT@ 11406 @LENGTH@ 1
---INS MethodInvocation@@MethodName:isDefaultPackage:[] @TO@ IfStatement@@if (isDefaultPackage() && !Character.isUpperCase(fullyQualifiedTypeName.charAt(0))) {  return new JavaPackage("");} @AT@ 11421 @LENGTH@ 18


INS FieldDeclaration@@private, boolean, [installed=false] @TO@ TypeDeclaration@@[public]LazyResourceInjection,  @AT@ 1772 @LENGTH@ 34
---INS Modifier@@private @TO@ FieldDeclaration@@private, boolean, [installed=false] @AT@ 1772 @LENGTH@ 7
---INS PrimitiveType@@boolean @TO@ FieldDeclaration@@private, boolean, [installed=false] @AT@ 1780 @LENGTH@ 7
---INS VariableDeclarationFragment@@installed=false @TO@ FieldDeclaration@@private, boolean, [installed=false] @AT@ 1788 @LENGTH@ 17
------INS SimpleName@@installed @TO@ VariableDeclarationFragment@@installed=false @AT@ 1788 @LENGTH@ 9
------INS BooleanLiteral@@false @TO@ VariableDeclarationFragment@@installed=false @AT@ 1800 @LENGTH@ 5


UPD MethodDeclaration@@protected, void, MethodName:doHandle, CommandContext ctx,  @TO@ protected, void, MethodName:doHandle, CommandContext ctx, CommandFormatException,  @AT@ 3106 @LENGTH@ 1966
---INS SimpleType@@CommandFormatException @TO@ MethodDeclaration@@protected, void, MethodName:doHandle, CommandContext ctx,  @AT@ 3205 @LENGTH@ 22


INS ExpressionStatement@@MethodInvocation:createIsNewStrategy(domainClass) @TO@ MethodDeclaration@@public, voidMethodName:SimpleMongoRepository, Class<T> domainClass, MongoTemplate template,  @AT@ 2281 @LENGTH@ 33
---INS MethodInvocation@@createIsNewStrategy(domainClass) @TO@ ExpressionStatement@@MethodInvocation:createIsNewStrategy(domainClass) @AT@ 2281 @LENGTH@ 32
------INS SimpleName@@MethodName:createIsNewStrategy:[domainClass] @TO@ MethodInvocation@@createIsNewStrategy(domainClass) @AT@ 2281 @LENGTH@ 32
---------INS SimpleName@@domainClass @TO@ SimpleName@@MethodName:createIsNewStrategy:[domainClass] @AT@ 2301 @LENGTH@ 11


UPD ExpressionStatement@@MethodInvocation:assertTrue("There should be 12 threads in diff, was: " + diff,diff == 12) @TO@ MethodInvocation:assertTrue("There should be 12 threads in diff, was: " + diff,diff >= 12 && diff <= 13) @AT@ 1968 @LENGTH@ 75
---UPD MethodInvocation@@assertTrue("There should be 12 threads in diff, was: " + diff,diff == 12) @TO@ assertTrue("There should be 12 threads in diff, was: " + diff,diff >= 12 && diff <= 13) @AT@ 1968 @LENGTH@ 74
------UPD SimpleName@@MethodName:assertTrue:["There should be 12 threads in diff, was: " + diff, diff == 12] @TO@ MethodName:assertTrue:["There should be 12 threads in diff, was: " + diff, diff >= 12 && diff <= 13] @AT@ 1968 @LENGTH@ 74
---------DEL InfixExpression@@diff == 12 @AT@ 2031 @LENGTH@ 10
---------INS InfixExpression@@diff >= 12 && diff <= 13 @TO@ SimpleName@@MethodName:assertTrue:["There should be 12 threads in diff, was: " + diff, diff == 12] @AT@ 2106 @LENGTH@ 24
------------INS InfixExpression@@diff >= 12 @TO@ InfixExpression@@diff >= 12 && diff <= 13 @AT@ 2106 @LENGTH@ 10
---------------MOV SimpleName@@diff @TO@ InfixExpression@@diff >= 12 @AT@ 2031 @LENGTH@ 4
---------------MOV SimpleName@@diff @TO@ InfixExpression@@diff >= 12 @AT@ 2031 @LENGTH@ 4
---------------MOV Operator@@== @TO@ InfixExpression@@diff >= 12 @AT@ 2035 @LENGTH@ 2
---------------MOV Operator@@== @TO@ InfixExpression@@diff >= 12 @AT@ 2035 @LENGTH@ 2
---------------MOV NumberLiteral@@12 @TO@ InfixExpression@@diff >= 12 @AT@ 2039 @LENGTH@ 2
---------------MOV NumberLiteral@@12 @TO@ InfixExpression@@diff >= 12 @AT@ 2039 @LENGTH@ 2
------------INS Operator@@&& @TO@ InfixExpression@@diff >= 12 && diff <= 13 @AT@ 2116 @LENGTH@ 2
------------INS InfixExpression@@diff <= 13 @TO@ InfixExpression@@diff >= 12 && diff <= 13 @AT@ 2120 @LENGTH@ 10
---------------INS SimpleName@@diff @TO@ InfixExpression@@diff <= 13 @AT@ 2120 @LENGTH@ 4
---------------INS Operator@@<= @TO@ InfixExpression@@diff <= 13 @AT@ 2124 @LENGTH@ 2
---------------INS NumberLiteral@@13 @TO@ InfixExpression@@diff <= 13 @AT@ 2128 @LENGTH@ 2


UPD ExpressionStatement@@MethodInvocation:Assert.notNull(formBackingObjectPhysicalTypeMetadata,"Unable to obtain physical type metdata for type " + formbackingObject.getFullyQualifiedTypeName()) @TO@ MethodInvocation:Assert.notNull(formBackingObjectPhysicalTypeMetadata,"Unable to obtain physical type metadata for type " + formbackingObject.getFullyQualifiedTypeName()) @AT@ 8080 @LENGTH@ 154
---UPD MethodInvocation@@Assert.notNull(formBackingObjectPhysicalTypeMetadata,"Unable to obtain physical type metdata for type " + formbackingObject.getFullyQualifiedTypeName()) @TO@ Assert.notNull(formBackingObjectPhysicalTypeMetadata,"Unable to obtain physical type metadata for type " + formbackingObject.getFullyQualifiedTypeName()) @AT@ 8080 @LENGTH@ 153
------UPD SimpleName@@MethodName:notNull:[formBackingObjectPhysicalTypeMetadata, "Unable to obtain physical type metdata for type " + formbackingObject.getFullyQualifiedTypeName()] @TO@ MethodName:notNull:[formBackingObjectPhysicalTypeMetadata, "Unable to obtain physical type metadata for type " + formbackingObject.getFullyQualifiedTypeName()] @AT@ 8087 @LENGTH@ 146
---------UPD InfixExpression@@"Unable to obtain physical type metdata for type " + formbackingObject.getFullyQualifiedTypeName() @TO@ "Unable to obtain physical type metadata for type " + formbackingObject.getFullyQualifiedTypeName() @AT@ 8134 @LENGTH@ 98
------------UPD StringLiteral@@"Unable to obtain physical type metdata for type " @TO@ "Unable to obtain physical type metadata for type " @AT@ 8134 @LENGTH@ 50


UPD MethodDeclaration@@public, static, void, MethodName:addService, final String name, final String relativePath, final String relativeTo, final ServiceTarget serviceTarget,  @TO@ public, static, ServiceController<String>, MethodName:addService, final String name, final String relativePath, final String relativeTo, final ServiceTarget serviceTarget,  @AT@ 1749 @LENGTH@ 234
---DEL PrimitiveType@@void @AT@ 1763 @LENGTH@ 4
---INS ParameterizedType@@ServiceController<String> @TO@ MethodDeclaration@@public, static, void, MethodName:addService, final String name, final String relativePath, final String relativeTo, final ServiceTarget serviceTarget,  @AT@ 1811 @LENGTH@ 25
------INS SimpleType@@ServiceController @TO@ ParameterizedType@@ServiceController<String> @AT@ 1811 @LENGTH@ 17
------INS SimpleType@@String @TO@ ParameterizedType@@ServiceController<String> @AT@ 1829 @LENGTH@ 6
---DEL ExpressionStatement@@MethodInvocation:addService(pathNameOf(name),relativePath,relativeTo,serviceTarget) @AT@ 1907 @LENGTH@ 70
---INS ReturnStatement@@MethodInvocation:addService(pathNameOf(name),relativePath,relativeTo,serviceTarget) @TO@ MethodDeclaration@@public, static, void, MethodName:addService, final String name, final String relativePath, final String relativeTo, final ServiceTarget serviceTarget,  @AT@ 1976 @LENGTH@ 77
------MOV MethodInvocation@@addService(pathNameOf(name),relativePath,relativeTo,serviceTarget) @TO@ ReturnStatement@@MethodInvocation:addService(pathNameOf(name),relativePath,relativeTo,serviceTarget) @AT@ 1907 @LENGTH@ 69


INS MethodDeclaration@@public, voidMethodName:PrinterEndpoint,  @TO@ TypeDeclaration@@[public]PrinterEndpoint, DefaultEndpoint @AT@ 1135 @LENGTH@ 32
---INS Modifier@@public @TO@ MethodDeclaration@@public, voidMethodName:PrinterEndpoint,  @AT@ 1135 @LENGTH@ 6
---INS SimpleName@@MethodName:PrinterEndpoint @TO@ MethodDeclaration@@public, voidMethodName:PrinterEndpoint,  @AT@ 1142 @LENGTH@ 15


UPD ExpressionStatement@@MethodInvocation:queueAddOperation.add("entries",queueName) @TO@ MethodInvocation:queueAddOperation.get("entries").add(queueName) @AT@ 41152 @LENGTH@ 44
---UPD MethodInvocation@@queueAddOperation.add("entries",queueName) @TO@ queueAddOperation.get("entries").add(queueName) @AT@ 41152 @LENGTH@ 43
------INS MethodInvocation@@MethodName:get:["entries"] @TO@ MethodInvocation@@queueAddOperation.add("entries",queueName) @AT@ 41152 @LENGTH@ 32
---------INS StringLiteral@@"entries" @TO@ MethodInvocation@@MethodName:get:["entries"] @AT@ 41174 @LENGTH@ 9
------DEL SimpleName@@MethodName:add:["entries", queueName] @AT@ 41170 @LENGTH@ 25
---------DEL StringLiteral@@"entries" @AT@ 41174 @LENGTH@ 9
------INS SimpleName@@MethodName:add:[queueName] @TO@ MethodInvocation@@queueAddOperation.add("entries",queueName) @AT@ 41185 @LENGTH@ 14
---------MOV SimpleName@@queueName @TO@ SimpleName@@MethodName:add:[queueName] @AT@ 41185 @LENGTH@ 9


UPD ReturnStatement@@MethodInvocation:jedis.lpop(key) @TO@ MethodInvocation:jedis.rpop(key) @AT@ 14089 @LENGTH@ 23
---UPD MethodInvocation@@jedis.lpop(key) @TO@ jedis.rpop(key) @AT@ 14096 @LENGTH@ 15
------UPD SimpleName@@MethodName:lpop:[key] @TO@ MethodName:rpop:[key] @AT@ 14102 @LENGTH@ 9


UPD MethodDeclaration@@public, byte[], MethodName:getRange, byte[] key, int start, int end,  @TO@ public, byte[], MethodName:getRange, byte[] key, long start, long end,  @AT@ 4112 @LENGTH@ 104
---UPD SingleVariableDeclaration@@int start @TO@ long start @AT@ 4147 @LENGTH@ 9
------UPD PrimitiveType@@int @TO@ long @AT@ 4147 @LENGTH@ 3
---UPD SingleVariableDeclaration@@int end @TO@ long end @AT@ 4158 @LENGTH@ 7
------UPD PrimitiveType@@int @TO@ long @AT@ 4158 @LENGTH@ 3


UPD MethodDeclaration@@public, boolean, MethodName:canAppearNext, CommandContext ctx,  @TO@ public, boolean, MethodName:canAppearNext, CommandContext ctx, CommandFormatException,  @AT@ 2384 @LENGTH@ 207
---INS SimpleType@@CommandFormatException @TO@ MethodDeclaration@@public, boolean, MethodName:canAppearNext, CommandContext ctx,  @AT@ 2440 @LENGTH@ 22


UPD MethodDeclaration@@List<Object>, MethodName:closePipeline,  @TO@ List<byte[]>, MethodName:closePipeline,  @AT@ 3272 @LENGTH@ 16
---UPD ParameterizedType@@List<Object> @TO@ List<byte[]> @AT@ 3259 @LENGTH@ 12
------DEL SimpleType@@Object @AT@ 3264 @LENGTH@ 6
------INS ArrayType@@byte[] @TO@ ParameterizedType@@List<Object> @AT@ 3264 @LENGTH@ 6
---------INS PrimitiveType@@byte @TO@ ArrayType@@byte[] @AT@ 3264 @LENGTH@ 4


UPD TryStatement@@try {  assertNotNull(connection);  assertTrue(connection.isOpen());}  finally {  connection.close();} @TO@ try {  assertNotNull(connection);  assertTrue(connection.isOpen());}  finally {  if (connection != null) {    connection.close();  }} @AT@ 1710 @LENGTH@ 163
---INS Block@@FinallyBody:{  if (connection != null) {    connection.close();  }} @TO@ TryStatement@@try {  assertNotNull(connection);  assertTrue(connection.isOpen());}  finally {  connection.close();} @AT@ 1810 @LENGTH@ 99
------INS IfStatement@@if (connection != null) {  connection.close();} @TO@ Block@@FinallyBody:{  if (connection != null) {    connection.close();  }} @AT@ 1824 @LENGTH@ 75
---------INS InfixExpression@@connection != null @TO@ IfStatement@@if (connection != null) {  connection.close();} @AT@ 1828 @LENGTH@ 18
------------INS SimpleName@@connection @TO@ InfixExpression@@connection != null @AT@ 1828 @LENGTH@ 10
------------INS Operator@@!= @TO@ InfixExpression@@connection != null @AT@ 1838 @LENGTH@ 2
------------INS NullLiteral@@null @TO@ InfixExpression@@connection != null @AT@ 1842 @LENGTH@ 4
---------MOV Block@@FinallyBody:{  connection.close();} @TO@ IfStatement@@if (connection != null) {  connection.close();} @AT@ 1830 @LENGTH@ 43
---UPD Block@@FinallyBody:{  connection.close();} @TO@ ThenBody:{  connection.close();} @AT@ 1830 @LENGTH@ 43


MOV ExpressionStatement@@MethodInvocation:container.addMessageListener(adapter,Arrays.asList(new ChannelTopic(CHANNEL))) @TO@ MethodDeclaration@@public, void, MethodName:setUp, Exception,  @AT@ 3577 @LENGTH@ 80


UPD Block@@ThenBody:{  TypeConverter tc=registry.lookup(NodeList.class,value.getClass());  if (tc != null) {    NodeList nodeList=tc.convertTo(NodeList.class,exchange,value);    return (T)nodeListToCxfPayload(nodeList,exchange);  }  tc=registry.lookup(Document.class,value.getClass());  if (tc != null) {    Document document=tc.convertTo(Document.class,exchange,value);    return (T)documentToCxfPayload(document,exchange);  }  CxfPayload<?> p=null;  p=convertVia(InputStream.class,exchange,value,registry);  if (p != null) {    return (T)p;  }  p=convertVia(String.class,exchange,value,registry);  if (p != null) {    return (T)p;  }} @TO@ ThenBody:{  TypeConverter tc=registry.lookup(NodeList.class,value.getClass());  if (tc != null) {    NodeList nodeList=tc.convertTo(NodeList.class,exchange,value);    return (T)nodeListToCxfPayload(nodeList,exchange);  }  tc=registry.lookup(Document.class,value.getClass());  if (tc != null) {    Document document=tc.convertTo(Document.class,exchange,value);    return (T)documentToCxfPayload(document,exchange);  }  CxfPayload<?> p;  p=convertVia(InputStream.class,exchange,value,registry);  if (p != null) {    return (T)p;  }  p=convertVia(String.class,exchange,value,registry);  if (p != null) {    return (T)p;  }  return (T)Void.TYPE;} @AT@ 2970 @LENGTH@ 987
---UPD VariableDeclarationStatement@@CxfPayload<?> p=null; @TO@ CxfPayload<?> p; @AT@ 3581 @LENGTH@ 23
------UPD VariableDeclarationFragment@@p=null @TO@ p @AT@ 3595 @LENGTH@ 8
---------DEL NullLiteral@@null @AT@ 3599 @LENGTH@ 4
---INS ReturnStatement@@CastExpression:(T)Void.TYPE @TO@ Block@@ThenBody:{  TypeConverter tc=registry.lookup(NodeList.class,value.getClass());  if (tc != null) {    NodeList nodeList=tc.convertTo(NodeList.class,exchange,value);    return (T)nodeListToCxfPayload(nodeList,exchange);  }  tc=registry.lookup(Document.class,value.getClass());  if (tc != null) {    Document document=tc.convertTo(Document.class,exchange,value);    return (T)documentToCxfPayload(document,exchange);  }  CxfPayload<?> p=null;  p=convertVia(InputStream.class,exchange,value,registry);  if (p != null) {    return (T)p;  }  p=convertVia(String.class,exchange,value,registry);  if (p != null) {    return (T)p;  }} @AT@ 4001 @LENGTH@ 21
------INS CastExpression@@(T)Void.TYPE @TO@ ReturnStatement@@CastExpression:(T)Void.TYPE @AT@ 4008 @LENGTH@ 13
---------INS SimpleType@@T @TO@ CastExpression@@(T)Void.TYPE @AT@ 4009 @LENGTH@ 1
---------INS QualifiedName@@Void.TYPE @TO@ CastExpression@@(T)Void.TYPE @AT@ 4012 @LENGTH@ 9
------------INS SimpleName@@Void @TO@ QualifiedName@@Void.TYPE @AT@ 4012 @LENGTH@ 4
------------INS SimpleName@@TYPE @TO@ QualifiedName@@Void.TYPE @AT@ 4017 @LENGTH@ 4


UPD EnhancedForStatement@@for (final String key : subModel.keys()) {  if (!ok.get()) {    break;  }  final PathAddress childAddress=address.append(PathElement.pathElement(childName,key));  final ModelNode readOp=operation.clone();  readOp.get(OP_ADDR).set(childAddress.toModelNode());  final ModelNode readResult=readModel(context,operation,new ResultHandler(){    public void handleResultFragment(    String[] location,    ModelNode result){    }    public void handleResultComplete(){    }    public void handleFailed(    ModelNode failureDescription){      ok.set(false);      resultHandler.handleFailed(failureDescription);    }    public void handleCancellation(){      ok.set(false);      resultHandler.handleCancellation();    }  },childAddress);  result.add(key,readResult);} @TO@ for (final String key : subModel.keys()) {  if (!ok.get()) {    break;  }  final PathAddress childAddress=address.append(PathElement.pathElement(childName,key));  final ModelNode readOp=operation.clone();  readOp.get(OP_ADDR).set(childAddress.toModelNode());  if (operation.has(INCLUDE_RUNTIME))   readOp.get(INCLUDE_RUNTIME).set(operation.get(INCLUDE_RUNTIME).asBoolean());  final ModelNode readResult=readModel(context,readOp,new ResultHandler(){    public void handleResultFragment(    String[] location,    ModelNode result){    }    public void handleResultComplete(){    }    public void handleFailed(    ModelNode failureDescription){      ok.set(false);      resultHandler.handleFailed(failureDescription);    }    public void handleCancellation(){      ok.set(false);      resultHandler.handleCancellation();    }  },childAddress);  result.add(key,readResult);} @AT@ 19080 @LENGTH@ 1477
---UPD VariableDeclarationStatement@@final ModelNode readResult=readModel(context,operation,new ResultHandler(){
  public void handleResultFragment(  String[] location,  ModelNode result){
  }
  public void handleResultComplete(){
  }
  public void handleFailed(  ModelNode failureDescription){
    ok.set(false);
    resultHandler.handleFailed(failureDescription);
  }
  public void handleCancellation(){
    ok.set(false);
    resultHandler.handleCancellation();
  }
}
,childAddress); @TO@ final ModelNode readResult=readModel(context,readOp,new ResultHandler(){
  public void handleResultFragment(  String[] location,  ModelNode result){
  }
  public void handleResultComplete(){
  }
  public void handleFailed(  ModelNode failureDescription){
    ok.set(false);
    resultHandler.handleFailed(failureDescription);
  }
  public void handleCancellation(){
    ok.set(false);
    resultHandler.handleCancellation();
  }
}
,childAddress); @AT@ 19537 @LENGTH@ 937
------UPD VariableDeclarationFragment@@readResult=readModel(context,operation,new ResultHandler(){
  public void handleResultFragment(  String[] location,  ModelNode result){
  }
  public void handleResultComplete(){
  }
  public void handleFailed(  ModelNode failureDescription){
    ok.set(false);
    resultHandler.handleFailed(failureDescription);
  }
  public void handleCancellation(){
    ok.set(false);
    resultHandler.handleCancellation();
  }
}
,childAddress) @TO@ readResult=readModel(context,readOp,new ResultHandler(){
  public void handleResultFragment(  String[] location,  ModelNode result){
  }
  public void handleResultComplete(){
  }
  public void handleFailed(  ModelNode failureDescription){
    ok.set(false);
    resultHandler.handleFailed(failureDescription);
  }
  public void handleCancellation(){
    ok.set(false);
    resultHandler.handleCancellation();
  }
}
,childAddress) @AT@ 19553 @LENGTH@ 920
---------UPD MethodInvocation@@readModel(context,operation,new ResultHandler(){
  public void handleResultFragment(  String[] location,  ModelNode result){
  }
  public void handleResultComplete(){
  }
  public void handleFailed(  ModelNode failureDescription){
    ok.set(false);
    resultHandler.handleFailed(failureDescription);
  }
  public void handleCancellation(){
    ok.set(false);
    resultHandler.handleCancellation();
  }
}
,childAddress) @TO@ readModel(context,readOp,new ResultHandler(){
  public void handleResultFragment(  String[] location,  ModelNode result){
  }
  public void handleResultComplete(){
  }
  public void handleFailed(  ModelNode failureDescription){
    ok.set(false);
    resultHandler.handleFailed(failureDescription);
  }
  public void handleCancellation(){
    ok.set(false);
    resultHandler.handleCancellation();
  }
}
,childAddress) @AT@ 19566 @LENGTH@ 907
------------UPD SimpleName@@MethodName:readModel:[context, operation, new ResultHandler(){
  public void handleResultFragment(  String[] location,  ModelNode result){
  }
  public void handleResultComplete(){
  }
  public void handleFailed(  ModelNode failureDescription){
    ok.set(false);
    resultHandler.handleFailed(failureDescription);
  }
  public void handleCancellation(){
    ok.set(false);
    resultHandler.handleCancellation();
  }
}
, childAddress] @TO@ MethodName:readModel:[context, readOp, new ResultHandler(){
  public void handleResultFragment(  String[] location,  ModelNode result){
  }
  public void handleResultComplete(){
  }
  public void handleFailed(  ModelNode failureDescription){
    ok.set(false);
    resultHandler.handleFailed(failureDescription);
  }
  public void handleCancellation(){
    ok.set(false);
    resultHandler.handleCancellation();
  }
}
, childAddress] @AT@ 19566 @LENGTH@ 907
---------------UPD SimpleName@@operation @TO@ readOp @AT@ 19585 @LENGTH@ 9
---INS IfStatement@@if (operation.has(INCLUDE_RUNTIME)) readOp.get(INCLUDE_RUNTIME).set(operation.get(INCLUDE_RUNTIME).asBoolean()); @TO@ EnhancedForStatement@@for (final String key : subModel.keys()) {  if (!ok.get()) {    break;  }  final PathAddress childAddress=address.append(PathElement.pathElement(childName,key));  final ModelNode readOp=operation.clone();  readOp.get(OP_ADDR).set(childAddress.toModelNode());  final ModelNode readResult=readModel(context,operation,new ResultHandler(){    public void handleResultFragment(    String[] location,    ModelNode result){    }    public void handleResultComplete(){    }    public void handleFailed(    ModelNode failureDescription){      ok.set(false);      resultHandler.handleFailed(failureDescription);    }    public void handleCancellation(){      ok.set(false);      resultHandler.handleCancellation();    }  },childAddress);  result.add(key,readResult);} @AT@ 19538 @LENGTH@ 143
------INS MethodInvocation@@operation.has(INCLUDE_RUNTIME) @TO@ IfStatement@@if (operation.has(INCLUDE_RUNTIME)) readOp.get(INCLUDE_RUNTIME).set(operation.get(INCLUDE_RUNTIME).asBoolean()); @AT@ 19541 @LENGTH@ 30
---------INS SimpleName@@Name:operation @TO@ MethodInvocation@@operation.has(INCLUDE_RUNTIME) @AT@ 19541 @LENGTH@ 9
---------INS SimpleName@@MethodName:has:[INCLUDE_RUNTIME] @TO@ MethodInvocation@@operation.has(INCLUDE_RUNTIME) @AT@ 19551 @LENGTH@ 20
------------INS SimpleName@@INCLUDE_RUNTIME @TO@ SimpleName@@MethodName:has:[INCLUDE_RUNTIME] @AT@ 19555 @LENGTH@ 15
------INS Block@@ThenBody:readOp.get(INCLUDE_RUNTIME).set(operation.get(INCLUDE_RUNTIME).asBoolean()); @TO@ IfStatement@@if (operation.has(INCLUDE_RUNTIME)) readOp.get(INCLUDE_RUNTIME).set(operation.get(INCLUDE_RUNTIME).asBoolean()); @AT@ 19605 @LENGTH@ 76
---------INS ExpressionStatement@@MethodInvocation:readOp.get(INCLUDE_RUNTIME).set(operation.get(INCLUDE_RUNTIME).asBoolean()) @TO@ Block@@ThenBody:readOp.get(INCLUDE_RUNTIME).set(operation.get(INCLUDE_RUNTIME).asBoolean()); @AT@ 19605 @LENGTH@ 76
------------INS MethodInvocation@@readOp.get(INCLUDE_RUNTIME).set(operation.get(INCLUDE_RUNTIME).asBoolean()) @TO@ ExpressionStatement@@MethodInvocation:readOp.get(INCLUDE_RUNTIME).set(operation.get(INCLUDE_RUNTIME).asBoolean()) @AT@ 19605 @LENGTH@ 75
---------------INS MethodInvocation@@MethodName:get:[INCLUDE_RUNTIME] @TO@ MethodInvocation@@readOp.get(INCLUDE_RUNTIME).set(operation.get(INCLUDE_RUNTIME).asBoolean()) @AT@ 19605 @LENGTH@ 27
------------------INS SimpleName@@INCLUDE_RUNTIME @TO@ MethodInvocation@@MethodName:get:[INCLUDE_RUNTIME] @AT@ 19616 @LENGTH@ 15
---------------INS SimpleName@@Name:readOp @TO@ MethodInvocation@@readOp.get(INCLUDE_RUNTIME).set(operation.get(INCLUDE_RUNTIME).asBoolean()) @AT@ 19605 @LENGTH@ 6
---------------INS SimpleName@@MethodName:set:[operation.get(INCLUDE_RUNTIME).asBoolean()] @TO@ MethodInvocation@@readOp.get(INCLUDE_RUNTIME).set(operation.get(INCLUDE_RUNTIME).asBoolean()) @AT@ 19633 @LENGTH@ 47
------------------INS MethodInvocation@@operation.get(INCLUDE_RUNTIME).asBoolean() @TO@ SimpleName@@MethodName:set:[operation.get(INCLUDE_RUNTIME).asBoolean()] @AT@ 19637 @LENGTH@ 42
---------------------INS MethodInvocation@@MethodName:get:[INCLUDE_RUNTIME] @TO@ MethodInvocation@@operation.get(INCLUDE_RUNTIME).asBoolean() @AT@ 19637 @LENGTH@ 30
------------------------INS SimpleName@@INCLUDE_RUNTIME @TO@ MethodInvocation@@MethodName:get:[INCLUDE_RUNTIME] @AT@ 19651 @LENGTH@ 15
---------------------INS SimpleName@@Name:operation @TO@ MethodInvocation@@operation.get(INCLUDE_RUNTIME).asBoolean() @AT@ 19637 @LENGTH@ 9
---------------------INS SimpleName@@MethodName:asBoolean:[] @TO@ MethodInvocation@@operation.get(INCLUDE_RUNTIME).asBoolean() @AT@ 19668 @LENGTH@ 11


INS MethodDeclaration@@public, boolean, MethodName:hasArgument, int index,  @TO@ TypeDeclaration@@[public]BatchRemoveLineHandler, CommandHandlerWithHelp @AT@ 3208 @LENGTH@ 71
---INS Modifier@@public @TO@ MethodDeclaration@@public, boolean, MethodName:hasArgument, int index,  @AT@ 3208 @LENGTH@ 6
---INS PrimitiveType@@boolean @TO@ MethodDeclaration@@public, boolean, MethodName:hasArgument, int index,  @AT@ 3215 @LENGTH@ 7
---INS SimpleName@@MethodName:hasArgument @TO@ MethodDeclaration@@public, boolean, MethodName:hasArgument, int index,  @AT@ 3223 @LENGTH@ 11
---INS SingleVariableDeclaration@@int index @TO@ MethodDeclaration@@public, boolean, MethodName:hasArgument, int index,  @AT@ 3235 @LENGTH@ 9
------INS PrimitiveType@@int @TO@ SingleVariableDeclaration@@int index @AT@ 3235 @LENGTH@ 3
------INS SimpleName@@index @TO@ SingleVariableDeclaration@@int index @AT@ 3239 @LENGTH@ 5
---INS ReturnStatement@@InfixExpression:index < 1 @TO@ MethodDeclaration@@public, boolean, MethodName:hasArgument, int index,  @AT@ 3256 @LENGTH@ 17
------INS InfixExpression@@index < 1 @TO@ ReturnStatement@@InfixExpression:index < 1 @AT@ 3263 @LENGTH@ 9
---------INS SimpleName@@index @TO@ InfixExpression@@index < 1 @AT@ 3263 @LENGTH@ 5
---------INS Operator@@< @TO@ InfixExpression@@index < 1 @AT@ 3268 @LENGTH@ 1
---------INS NumberLiteral@@1 @TO@ InfixExpression@@index < 1 @AT@ 3271 @LENGTH@ 1


INS TryStatement@@try {  return client.execute(executionContext,transaction);}  finally {} @TO@ MethodDeclaration@@public, ModelNode, MethodName:call, Exception,  @AT@ 23276 @LENGTH@ 216
---MOV ReturnStatement@@MethodInvocation:client.execute(executionContext,transaction) @TO@ TryStatement@@try {  return client.execute(executionContext,transaction);}  finally {} @AT@ 22879 @LENGTH@ 53
---INS Block@@FinallyBody:{} @TO@ TryStatement@@try {  return client.execute(executionContext,transaction);}  finally {} @AT@ 23390 @LENGTH@ 102


UPD TypeDeclaration@@[public]SecurityActions, org.jboss.as.naming.util.SecurityActions @TO@ [@Deprecated, public]SecurityActions, org.jboss.as.naming.util.SecurityActions @AT@ 1093 @LENGTH@ 382
---INS MarkerAnnotation@@@Deprecated @TO@ TypeDeclaration@@[public]SecurityActions, org.jboss.as.naming.util.SecurityActions @AT@ 1153 @LENGTH@ 11


UPD EnhancedForStatement@@for (String key : namespaces.keySet()) {  String namespaceURI=namespaces.get(key);  writer.writeNamespace(key,namespaceURI);} @TO@ for (Entry<String,String> entry : namespaces.entrySet()) {  String namespaceURI=entry.getValue();  writer.writeNamespace(entry.getKey(),namespaceURI);} @AT@ 5370 @LENGTH@ 171
---UPD SingleVariableDeclaration@@String key @TO@ Entry<String,String> entry @AT@ 5375 @LENGTH@ 10
------DEL SimpleType@@String @AT@ 5375 @LENGTH@ 6
------UPD SimpleName@@key @TO@ entry @AT@ 5382 @LENGTH@ 3
------INS ParameterizedType@@Entry<String,String> @TO@ SingleVariableDeclaration@@String key @AT@ 5403 @LENGTH@ 21
---------INS SimpleType@@Entry @TO@ ParameterizedType@@Entry<String,String> @AT@ 5403 @LENGTH@ 5
---------INS SimpleType@@String @TO@ ParameterizedType@@Entry<String,String> @AT@ 5409 @LENGTH@ 6
---------INS SimpleType@@String @TO@ ParameterizedType@@Entry<String,String> @AT@ 5417 @LENGTH@ 6
---UPD MethodInvocation@@namespaces.keySet() @TO@ namespaces.entrySet() @AT@ 5388 @LENGTH@ 19
------UPD SimpleName@@MethodName:keySet:[] @TO@ MethodName:entrySet:[] @AT@ 5399 @LENGTH@ 8
---UPD VariableDeclarationStatement@@String namespaceURI=namespaces.get(key); @TO@ String namespaceURI=entry.getValue(); @AT@ 5427 @LENGTH@ 42
------UPD VariableDeclarationFragment@@namespaceURI=namespaces.get(key) @TO@ namespaceURI=entry.getValue() @AT@ 5434 @LENGTH@ 34
---------UPD MethodInvocation@@namespaces.get(key) @TO@ entry.getValue() @AT@ 5449 @LENGTH@ 19
------------UPD SimpleName@@Name:namespaces @TO@ Name:entry @AT@ 5449 @LENGTH@ 10
------------UPD SimpleName@@MethodName:get:[key] @TO@ MethodName:getValue:[] @AT@ 5460 @LENGTH@ 8
---------------DEL SimpleName@@key @AT@ 5464 @LENGTH@ 3
---UPD ExpressionStatement@@MethodInvocation:writer.writeNamespace(key,namespaceURI) @TO@ MethodInvocation:writer.writeNamespace(entry.getKey(),namespaceURI) @AT@ 5486 @LENGTH@ 41
------UPD MethodInvocation@@writer.writeNamespace(key,namespaceURI) @TO@ writer.writeNamespace(entry.getKey(),namespaceURI) @AT@ 5486 @LENGTH@ 40
---------UPD SimpleName@@MethodName:writeNamespace:[key, namespaceURI] @TO@ MethodName:writeNamespace:[entry.getKey(), namespaceURI] @AT@ 5493 @LENGTH@ 33
------------DEL SimpleName@@key @AT@ 5508 @LENGTH@ 3
------------INS MethodInvocation@@entry.getKey() @TO@ SimpleName@@MethodName:writeNamespace:[key, namespaceURI] @AT@ 5552 @LENGTH@ 14
---------------INS SimpleName@@Name:entry @TO@ MethodInvocation@@entry.getKey() @AT@ 5552 @LENGTH@ 5
---------------INS SimpleName@@MethodName:getKey:[] @TO@ MethodInvocation@@entry.getKey() @AT@ 5558 @LENGTH@ 8


UPD ForStatement@@for (int i=0; i < SIZE; i++) {  final int value=1;  char id='A';  Map<String,Object> headers=new HashMap<String,Object>();  headers.put("id",id);  headers.put("seq",i);  if (LOG.isDebugEnabled()) {    LOG.debug("Sending " + value + " with id "+ id);  }  template.sendBodyAndHeaders("seda:start?size=" + SIZE,value,headers);  Thread.sleep(3);} @TO@ for (int i=0; i < SIZE; i++) {  final int value=1;  char id='A';  Map<String,Object> headers=new HashMap<String,Object>();  headers.put("id",id);  headers.put("seq",i);  if (LOG.isDebugEnabled()) {    LOG.debug("Sending " + value + " with id "+ id);  }  template.sendBodyAndHeaders("seda:start",value,headers);  Thread.sleep(5);} @AT@ 2083 @LENGTH@ 517
---UPD ExpressionStatement@@MethodInvocation:template.sendBodyAndHeaders("seda:start?size=" + SIZE,value,headers) @TO@ MethodInvocation:template.sendBodyAndHeaders("seda:start",value,headers) @AT@ 2451 @LENGTH@ 71
------UPD MethodInvocation@@template.sendBodyAndHeaders("seda:start?size=" + SIZE,value,headers) @TO@ template.sendBodyAndHeaders("seda:start",value,headers) @AT@ 2451 @LENGTH@ 70
---------UPD SimpleName@@MethodName:sendBodyAndHeaders:["seda:start?size=" + SIZE, value, headers] @TO@ MethodName:sendBodyAndHeaders:["seda:start", value, headers] @AT@ 2460 @LENGTH@ 61
------------DEL InfixExpression@@"seda:start?size=" + SIZE @AT@ 2479 @LENGTH@ 25
---------------DEL StringLiteral@@"seda:start?size=" @AT@ 2479 @LENGTH@ 18
---------------DEL Operator@@+ @AT@ 2497 @LENGTH@ 1
---------------DEL SimpleName@@SIZE @AT@ 2500 @LENGTH@ 4
------------INS StringLiteral@@"seda:start" @TO@ SimpleName@@MethodName:sendBodyAndHeaders:["seda:start?size=" + SIZE, value, headers] @AT@ 2479 @LENGTH@ 12
---UPD ExpressionStatement@@MethodInvocation:Thread.sleep(3) @TO@ MethodInvocation:Thread.sleep(5) @AT@ 2574 @LENGTH@ 16
------UPD MethodInvocation@@Thread.sleep(3) @TO@ Thread.sleep(5) @AT@ 2574 @LENGTH@ 15
---------UPD SimpleName@@MethodName:sleep:[3] @TO@ MethodName:sleep:[5] @AT@ 2581 @LENGTH@ 8
------------UPD NumberLiteral@@3 @TO@ 5 @AT@ 2587 @LENGTH@ 1


UPD ReturnStatement@@SuperMethodInvocation:super.createInstance() @TO@ ClassInstanceCreation:new SingletonComponentInstance(this) @AT@ 3305 @LENGTH@ 30
---INS ClassInstanceCreation@@SingletonComponentInstance[this] @TO@ ReturnStatement@@SuperMethodInvocation:super.createInstance() @AT@ 3312 @LENGTH@ 36
------INS New@@new @TO@ ClassInstanceCreation@@SingletonComponentInstance[this] @AT@ 3312 @LENGTH@ 3
------INS SimpleType@@SingletonComponentInstance @TO@ ClassInstanceCreation@@SingletonComponentInstance[this] @AT@ 3316 @LENGTH@ 26
------INS ThisExpression@@this @TO@ ClassInstanceCreation@@SingletonComponentInstance[this] @AT@ 3343 @LENGTH@ 4
---DEL SuperMethodInvocation@@super.createInstance() @AT@ 3312 @LENGTH@ 22
------DEL SimpleName@@MethodName:createInstance:[] @AT@ 3318 @LENGTH@ 14


DEL IfStatement@@if (isJava15()) {  throw new WebServiceIOException("Forced by JDK 1.5");} @AT@ 5237 @LENGTH@ 193
---DEL MethodInvocation@@MethodName:isJava15:[] @AT@ 5241 @LENGTH@ 10
---DEL Block@@ThenBody:{  throw new WebServiceIOException("Forced by JDK 1.5");} @AT@ 5253 @LENGTH@ 177
------DEL ThrowStatement@@ClassInstanceCreation:new WebServiceIOException("Forced by JDK 1.5") @AT@ 5367 @LENGTH@ 53
---------DEL ClassInstanceCreation@@WebServiceIOException["Forced by JDK 1.5"] @AT@ 5373 @LENGTH@ 46
------------DEL New@@new @AT@ 5373 @LENGTH@ 3
------------DEL SimpleType@@WebServiceIOException @AT@ 5377 @LENGTH@ 21
------------DEL StringLiteral@@"Forced by JDK 1.5" @AT@ 5399 @LENGTH@ 19


UPD MethodDeclaration@@public, String, MethodName:home, Model model,  @TO@ public, String, MethodName:home, Principal user, Model model,  @AT@ 1474 @LENGTH@ 569
---UPD VariableDeclarationStatement@@List<ServiceProviderConnection<TwitterOperations>> connections=twitterProvider.getConnections(1); @TO@ List<ServiceProviderConnection<TwitterOperations>> connections=twitterProvider.getConnections(user.getName()); @AT@ 1510 @LENGTH@ 99
------UPD VariableDeclarationFragment@@connections=twitterProvider.getConnections(1) @TO@ connections=twitterProvider.getConnections(user.getName()) @AT@ 1561 @LENGTH@ 47
---------UPD MethodInvocation@@twitterProvider.getConnections(1) @TO@ twitterProvider.getConnections(user.getName()) @AT@ 1575 @LENGTH@ 33
------------UPD SimpleName@@MethodName:getConnections:[1] @TO@ MethodName:getConnections:[user.getName()] @AT@ 1591 @LENGTH@ 17
---------------DEL NumberLiteral@@1 @AT@ 1606 @LENGTH@ 1
---------------INS MethodInvocation@@user.getName() @TO@ SimpleName@@MethodName:getConnections:[1] @AT@ 1654 @LENGTH@ 14
------------------INS SimpleName@@Name:user @TO@ MethodInvocation@@user.getName() @AT@ 1654 @LENGTH@ 4
------------------INS SimpleName@@MethodName:getName:[] @TO@ MethodInvocation@@user.getName() @AT@ 1659 @LENGTH@ 9
---INS SingleVariableDeclaration@@Principal user @TO@ MethodDeclaration@@public, String, MethodName:home, Model model,  @AT@ 1525 @LENGTH@ 14
------INS SimpleType@@Principal @TO@ SingleVariableDeclaration@@Principal user @AT@ 1525 @LENGTH@ 9
------INS SimpleName@@user @TO@ SingleVariableDeclaration@@Principal user @AT@ 1535 @LENGTH@ 4
---UPD IfStatement@@if (connections.size() > 0) {  model.addAttribute("connections",connectionNames);  model.addAttribute(new TweetForm());  return "twitter";} @TO@ if (connections.size() > 0) {  model.addAttribute("connections",connectionNames);  model.addAttribute(new TweetForm());  return "twitter/twitter";} @AT@ 1852 @LENGTH@ 149
------UPD Block@@ThenBody:{  model.addAttribute("connections",connectionNames);  model.addAttribute(new TweetForm());  return "twitter";} @TO@ ThenBody:{  model.addAttribute("connections",connectionNames);  model.addAttribute(new TweetForm());  return "twitter/twitter";} @AT@ 1880 @LENGTH@ 121
---------UPD ReturnStatement@@StringLiteral:"twitter" @TO@ StringLiteral:"twitter/twitter" @AT@ 1980 @LENGTH@ 17
------------UPD StringLiteral@@"twitter" @TO@ "twitter/twitter" @AT@ 1987 @LENGTH@ 9


UPD EnhancedForStatement@@for (Method method : view.getProxyFactory().getCachedMethods()) {  final Method componentMethod=getComponentMethod(componentConfiguration,method.getName(),method.getParameterTypes());  this.processTxAttr(ejbComponentDescription,viewType,componentMethod);} @TO@ for (Method method : view.getProxyFactory().getCachedMethods()) {  if (!Modifier.isPublic(method.getModifiers()))   continue;  final Method componentMethod=getComponentMethod(componentConfiguration,method.getName(),method.getParameterTypes());  this.processTxAttr(ejbComponentDescription,viewType,componentMethod);} @AT@ 3523 @LENGTH@ 316
---INS IfStatement@@if (!Modifier.isPublic(method.getModifiers())) continue; @TO@ EnhancedForStatement@@for (Method method : view.getProxyFactory().getCachedMethods()) {  final Method componentMethod=getComponentMethod(componentConfiguration,method.getName(),method.getParameterTypes());  this.processTxAttr(ejbComponentDescription,viewType,componentMethod);} @AT@ 3698 @LENGTH@ 80
------INS PrefixExpression@@!Modifier.isPublic(method.getModifiers()) @TO@ IfStatement@@if (!Modifier.isPublic(method.getModifiers())) continue; @AT@ 3702 @LENGTH@ 41
---------INS Operator@@! @TO@ PrefixExpression@@!Modifier.isPublic(method.getModifiers()) @AT@ 3702 @LENGTH@ 1
---------INS MethodInvocation@@Modifier.isPublic(method.getModifiers()) @TO@ PrefixExpression@@!Modifier.isPublic(method.getModifiers()) @AT@ 3703 @LENGTH@ 40
------------INS SimpleName@@Name:Modifier @TO@ MethodInvocation@@Modifier.isPublic(method.getModifiers()) @AT@ 3703 @LENGTH@ 8
------------INS SimpleName@@MethodName:isPublic:[method.getModifiers()] @TO@ MethodInvocation@@Modifier.isPublic(method.getModifiers()) @AT@ 3712 @LENGTH@ 31
---------------INS MethodInvocation@@method.getModifiers() @TO@ SimpleName@@MethodName:isPublic:[method.getModifiers()] @AT@ 3721 @LENGTH@ 21
------------------INS SimpleName@@Name:method @TO@ MethodInvocation@@method.getModifiers() @AT@ 3721 @LENGTH@ 6
------------------INS SimpleName@@MethodName:getModifiers:[] @TO@ MethodInvocation@@method.getModifiers() @AT@ 3728 @LENGTH@ 14
------INS Block@@ThenBody:continue; @TO@ IfStatement@@if (!Modifier.isPublic(method.getModifiers())) continue; @AT@ 3769 @LENGTH@ 9
---------INS ContinueStatement@@ @TO@ Block@@ThenBody:continue; @AT@ 3769 @LENGTH@ 9


MOV FieldDeclaration@@private, static, Logger, [logger=HandlerUtils.getLogger(GwtTypeServiceImpl.class)] @TO@ TypeDeclaration@@[@Component, @Service, public]GwtTypeServiceImpl, [GwtTypeService] @AT@ 3277 @LENGTH@ 80


INS ExpressionStatement@@MethodInvocation:backup(fileName) @TO@ MethodDeclaration@@public, void, MethodName:store, final ModelNode model, ConfigurationPersistenceException,  @AT@ 3209 @LENGTH@ 17
---INS MethodInvocation@@backup(fileName) @TO@ ExpressionStatement@@MethodInvocation:backup(fileName) @AT@ 3209 @LENGTH@ 16
------INS SimpleName@@MethodName:backup:[fileName] @TO@ MethodInvocation@@backup(fileName) @AT@ 3209 @LENGTH@ 16
---------INS SimpleName@@fileName @TO@ SimpleName@@MethodName:backup:[fileName] @AT@ 3216 @LENGTH@ 8


UPD MethodDeclaration@@protected, DBObject, MethodName:finalize, QueryBuilder criteria, Sort sort,  @TO@ protected, DBObject, MethodName:complete, QueryBuilder criteria, Sort sort,  @AT@ 3343 @LENGTH@ 101
---UPD SimpleName@@MethodName:finalize @TO@ MethodName:complete @AT@ 3362 @LENGTH@ 8


UPD ExpressionStatement@@MethodInvocation:getMockEndpoint("mock:foo").expectedMessageCount(1) @TO@ MethodInvocation:getMockEndpoint("mock:foo").expectedMinimumMessageCount(0) @AT@ 2533 @LENGTH@ 52
---UPD MethodInvocation@@getMockEndpoint("mock:foo").expectedMessageCount(1) @TO@ getMockEndpoint("mock:foo").expectedMinimumMessageCount(0) @AT@ 2533 @LENGTH@ 51
------UPD SimpleName@@MethodName:expectedMessageCount:[1] @TO@ MethodName:expectedMinimumMessageCount:[0] @AT@ 2561 @LENGTH@ 23
---------UPD NumberLiteral@@1 @TO@ 0 @AT@ 2582 @LENGTH@ 1


INS FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @TO@ TypeDeclaration@@[private, static]AuthorityComparator, [Comparator<GrantedAuthority>, Serializable] @AT@ 6329 @LENGTH@ 90
---INS Modifier@@private @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @AT@ 6329 @LENGTH@ 7
---INS Modifier@@static @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @AT@ 6337 @LENGTH@ 6
---INS Modifier@@final @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @AT@ 6344 @LENGTH@ 5
---INS PrimitiveType@@long @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @AT@ 6350 @LENGTH@ 4
---INS VariableDeclarationFragment@@serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @AT@ 6355 @LENGTH@ 63
------INS SimpleName@@serialVersionUID @TO@ VariableDeclarationFragment@@serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID @AT@ 6355 @LENGTH@ 16
------INS QualifiedName@@SpringSecurityCoreVersion.SERIAL_VERSION_UID @TO@ VariableDeclarationFragment@@serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID @AT@ 6374 @LENGTH@ 44
---------INS SimpleName@@SpringSecurityCoreVersion @TO@ QualifiedName@@SpringSecurityCoreVersion.SERIAL_VERSION_UID @AT@ 6374 @LENGTH@ 25
---------INS SimpleName@@SERIAL_VERSION_UID @TO@ QualifiedName@@SpringSecurityCoreVersion.SERIAL_VERSION_UID @AT@ 6400 @LENGTH@ 18


UPD MethodDeclaration@@public, static, void, MethodName:addService, final String name, final String relativePath, final String relativeTo, final ServiceTarget serviceTarget,  @TO@ public, static, ServiceController<String>, MethodName:addService, final String name, final String relativePath, final String relativeTo, final ServiceTarget serviceTarget,  @AT@ 1749 @LENGTH@ 234
---DEL PrimitiveType@@void @AT@ 1763 @LENGTH@ 4
---INS ParameterizedType@@ServiceController<String> @TO@ MethodDeclaration@@public, static, void, MethodName:addService, final String name, final String relativePath, final String relativeTo, final ServiceTarget serviceTarget,  @AT@ 1811 @LENGTH@ 25
------INS SimpleType@@ServiceController @TO@ ParameterizedType@@ServiceController<String> @AT@ 1811 @LENGTH@ 17
------INS SimpleType@@String @TO@ ParameterizedType@@ServiceController<String> @AT@ 1829 @LENGTH@ 6
---DEL ExpressionStatement@@MethodInvocation:addService(pathNameOf(name),relativePath,relativeTo,serviceTarget) @AT@ 1907 @LENGTH@ 70
---INS ReturnStatement@@MethodInvocation:addService(pathNameOf(name),relativePath,relativeTo,serviceTarget) @TO@ MethodDeclaration@@public, static, void, MethodName:addService, final String name, final String relativePath, final String relativeTo, final ServiceTarget serviceTarget,  @AT@ 1976 @LENGTH@ 77
------MOV MethodInvocation@@addService(pathNameOf(name),relativePath,relativeTo,serviceTarget) @TO@ ReturnStatement@@MethodInvocation:addService(pathNameOf(name),relativePath,relativeTo,serviceTarget) @AT@ 1907 @LENGTH@ 69


INS VariableDeclarationStatement@@Set<String> deploymentNames=modelNode.keys(); @TO@ MethodDeclaration@@private, void, MethodName:writeServerDeployments, final XMLExtendedStreamWriter writer, final ModelNode modelNode, XMLStreamException,  @AT@ 21556 @LENGTH@ 47
---INS ParameterizedType@@Set<String> @TO@ VariableDeclarationStatement@@Set<String> deploymentNames=modelNode.keys(); @AT@ 21556 @LENGTH@ 11
------INS SimpleType@@Set @TO@ ParameterizedType@@Set<String> @AT@ 21556 @LENGTH@ 3
------INS SimpleType@@String @TO@ ParameterizedType@@Set<String> @AT@ 21560 @LENGTH@ 6
---INS VariableDeclarationFragment@@deploymentNames=modelNode.keys() @TO@ VariableDeclarationStatement@@Set<String> deploymentNames=modelNode.keys(); @AT@ 21568 @LENGTH@ 34
------INS SimpleName@@deploymentNames @TO@ VariableDeclarationFragment@@deploymentNames=modelNode.keys() @AT@ 21568 @LENGTH@ 15
------INS MethodInvocation@@modelNode.keys() @TO@ VariableDeclarationFragment@@deploymentNames=modelNode.keys() @AT@ 21586 @LENGTH@ 16
---------INS SimpleName@@Name:modelNode @TO@ MethodInvocation@@modelNode.keys() @AT@ 21586 @LENGTH@ 9
---------INS SimpleName@@MethodName:keys:[] @TO@ MethodInvocation@@modelNode.keys() @AT@ 21596 @LENGTH@ 6


INS ExpressionStatement@@MethodInvocation:assertEquals("Craig Walls",profile.getName()) @TO@ MethodDeclaration@@public, void, MethodName:getUserProfile,  @AT@ 2873 @LENGTH@ 47
---INS MethodInvocation@@assertEquals("Craig Walls",profile.getName()) @TO@ ExpressionStatement@@MethodInvocation:assertEquals("Craig Walls",profile.getName()) @AT@ 2873 @LENGTH@ 46
------INS SimpleName@@MethodName:assertEquals:["Craig Walls", profile.getName()] @TO@ MethodInvocation@@assertEquals("Craig Walls",profile.getName()) @AT@ 2873 @LENGTH@ 46
---------INS StringLiteral@@"Craig Walls" @TO@ SimpleName@@MethodName:assertEquals:["Craig Walls", profile.getName()] @AT@ 2886 @LENGTH@ 13
---------INS MethodInvocation@@profile.getName() @TO@ SimpleName@@MethodName:assertEquals:["Craig Walls", profile.getName()] @AT@ 2901 @LENGTH@ 17
------------INS SimpleName@@Name:profile @TO@ MethodInvocation@@profile.getName() @AT@ 2901 @LENGTH@ 7
------------INS SimpleName@@MethodName:getName:[] @TO@ MethodInvocation@@profile.getName() @AT@ 2909 @LENGTH@ 9


UPD CatchClause@@catch (ClassNotFoundException e) {  throw new MappingException(e.getMessage(),e);} @TO@ catch (ClassNotFoundException e) {  return null;} @AT@ 26703 @LENGTH@ 88
---DEL ThrowStatement@@ClassInstanceCreation:new MappingException(e.getMessage(),e) @AT@ 26741 @LENGTH@ 46
------DEL ClassInstanceCreation@@MappingException[e.getMessage(), e] @AT@ 26747 @LENGTH@ 39
---------DEL New@@new @AT@ 26747 @LENGTH@ 3
---------DEL SimpleType@@MappingException @AT@ 26751 @LENGTH@ 16
---------DEL MethodInvocation@@e.getMessage() @AT@ 26768 @LENGTH@ 14
------------DEL SimpleName@@Name:e @AT@ 26768 @LENGTH@ 1
------------DEL SimpleName@@MethodName:getMessage:[] @AT@ 26770 @LENGTH@ 12
---------DEL SimpleName@@e @AT@ 26784 @LENGTH@ 1
---INS ReturnStatement@@NullLiteral:null @TO@ CatchClause@@catch (ClassNotFoundException e) {  throw new MappingException(e.getMessage(),e);} @AT@ 27056 @LENGTH@ 12
------INS NullLiteral@@null @TO@ ReturnStatement@@NullLiteral:null @AT@ 27063 @LENGTH@ 4


UPD ExpressionStatement@@MethodInvocation:binding.get(MULTICAST_ADDRESS).set(mcastAddr.toString()) @TO@ MethodInvocation:binding.get(MULTICAST_ADDRESS).set(value) @AT@ 55778 @LENGTH@ 57
---UPD MethodInvocation@@binding.get(MULTICAST_ADDRESS).set(mcastAddr.toString()) @TO@ binding.get(MULTICAST_ADDRESS).set(value) @AT@ 55778 @LENGTH@ 56
------UPD SimpleName@@MethodName:set:[mcastAddr.toString()] @TO@ MethodName:set:[value] @AT@ 55809 @LENGTH@ 25
---------DEL MethodInvocation@@mcastAddr.toString() @AT@ 55813 @LENGTH@ 20
------------DEL SimpleName@@Name:mcastAddr @AT@ 55813 @LENGTH@ 9
------------DEL SimpleName@@MethodName:toString:[] @AT@ 55823 @LENGTH@ 10
---------INS SimpleName@@value @TO@ SimpleName@@MethodName:set:[mcastAddr.toString()] @AT@ 55813 @LENGTH@ 5


DEL MethodDeclaration@@public, StatelessInterface, MethodName:createSLSBOnInvocation, Exception,  @AT@ 1514 @LENGTH@ 96
---DEL Modifier@@public @AT@ 1514 @LENGTH@ 6
---DEL SimpleType@@StatelessInterface @AT@ 1521 @LENGTH@ 18
---DEL SimpleName@@MethodName:createSLSBOnInvocation @AT@ 1540 @LENGTH@ 22
---DEL SimpleType@@Exception @AT@ 1572 @LENGTH@ 9
---DEL ReturnStatement@@NullLiteral:null @AT@ 1592 @LENGTH@ 12
------DEL NullLiteral@@null @AT@ 1599 @LENGTH@ 4


UPD ExpressionStatement@@MethodInvocation:attachDataSources(phaseContext.getDeploymentUnitContext(),dataSources) @TO@ MethodInvocation:attachDataSources(phaseContext.getDeploymentUnit(),dataSources) @AT@ 2236 @LENGTH@ 72
---UPD MethodInvocation@@attachDataSources(phaseContext.getDeploymentUnitContext(),dataSources) @TO@ attachDataSources(phaseContext.getDeploymentUnit(),dataSources) @AT@ 2236 @LENGTH@ 71
------UPD SimpleName@@MethodName:attachDataSources:[phaseContext.getDeploymentUnitContext(), dataSources] @TO@ MethodName:attachDataSources:[phaseContext.getDeploymentUnit(), dataSources] @AT@ 2236 @LENGTH@ 71
---------UPD MethodInvocation@@phaseContext.getDeploymentUnitContext() @TO@ phaseContext.getDeploymentUnit() @AT@ 2254 @LENGTH@ 39
------------UPD SimpleName@@MethodName:getDeploymentUnitContext:[] @TO@ MethodName:getDeploymentUnit:[] @AT@ 2267 @LENGTH@ 26


INS MethodDeclaration@@public, voidMethodName:TestingChunkOrientedTasklet, ItemReader<T> itemReader, ItemWriter<T> itemWriter, RepeatOperations repeatOperations,  @TO@ TypeDeclaration@@[public]TestingChunkOrientedTasklet, ChunkOrientedTasklet<T> @AT@ 2635 @LENGTH@ 214
---INS Modifier@@public @TO@ MethodDeclaration@@public, voidMethodName:TestingChunkOrientedTasklet, ItemReader<T> itemReader, ItemWriter<T> itemWriter, RepeatOperations repeatOperations,  @AT@ 2635 @LENGTH@ 6
---INS SimpleName@@MethodName:TestingChunkOrientedTasklet @TO@ MethodDeclaration@@public, voidMethodName:TestingChunkOrientedTasklet, ItemReader<T> itemReader, ItemWriter<T> itemWriter, RepeatOperations repeatOperations,  @AT@ 2642 @LENGTH@ 27
---INS SingleVariableDeclaration@@ItemReader<T> itemReader @TO@ MethodDeclaration@@public, voidMethodName:TestingChunkOrientedTasklet, ItemReader<T> itemReader, ItemWriter<T> itemWriter, RepeatOperations repeatOperations,  @AT@ 2670 @LENGTH@ 24
------INS ParameterizedType@@ItemReader<T> @TO@ SingleVariableDeclaration@@ItemReader<T> itemReader @AT@ 2670 @LENGTH@ 13
---------INS SimpleType@@ItemReader @TO@ ParameterizedType@@ItemReader<T> @AT@ 2670 @LENGTH@ 10
---------INS SimpleType@@T @TO@ ParameterizedType@@ItemReader<T> @AT@ 2681 @LENGTH@ 1
------INS SimpleName@@itemReader @TO@ SingleVariableDeclaration@@ItemReader<T> itemReader @AT@ 2684 @LENGTH@ 10
---INS SingleVariableDeclaration@@ItemWriter<T> itemWriter @TO@ MethodDeclaration@@public, voidMethodName:TestingChunkOrientedTasklet, ItemReader<T> itemReader, ItemWriter<T> itemWriter, RepeatOperations repeatOperations,  @AT@ 2696 @LENGTH@ 24
------INS ParameterizedType@@ItemWriter<T> @TO@ SingleVariableDeclaration@@ItemWriter<T> itemWriter @AT@ 2696 @LENGTH@ 13
---------INS SimpleType@@ItemWriter @TO@ ParameterizedType@@ItemWriter<T> @AT@ 2696 @LENGTH@ 10
---------INS SimpleType@@T @TO@ ParameterizedType@@ItemWriter<T> @AT@ 2707 @LENGTH@ 1
------INS SimpleName@@itemWriter @TO@ SingleVariableDeclaration@@ItemWriter<T> itemWriter @AT@ 2710 @LENGTH@ 10
---INS SingleVariableDeclaration@@RepeatOperations repeatOperations @TO@ MethodDeclaration@@public, voidMethodName:TestingChunkOrientedTasklet, ItemReader<T> itemReader, ItemWriter<T> itemWriter, RepeatOperations repeatOperations,  @AT@ 2725 @LENGTH@ 33
------INS SimpleType@@RepeatOperations @TO@ SingleVariableDeclaration@@RepeatOperations repeatOperations @AT@ 2725 @LENGTH@ 16
------INS SimpleName@@repeatOperations @TO@ SingleVariableDeclaration@@RepeatOperations repeatOperations @AT@ 2742 @LENGTH@ 16
---INS ConstructorInvocation@@this(itemReader,new PassThroughItemProcessor<T>(),itemWriter,repeatOperations); @TO@ MethodDeclaration@@public, voidMethodName:TestingChunkOrientedTasklet, ItemReader<T> itemReader, ItemWriter<T> itemWriter, RepeatOperations repeatOperations,  @AT@ 2764 @LENGTH@ 82
------MOV ClassInstanceCreation@@PassThroughItemProcessor<T>[] @TO@ ConstructorInvocation@@this(itemReader,new PassThroughItemProcessor<T>(),itemWriter,repeatOperations); @AT@ 2398 @LENGTH@ 33
------INS SimpleName@@itemReader @TO@ ConstructorInvocation@@this(itemReader,new PassThroughItemProcessor<T>(),itemWriter,repeatOperations); @AT@ 2769 @LENGTH@ 10
------INS SimpleName@@itemWriter @TO@ ConstructorInvocation@@this(itemReader,new PassThroughItemProcessor<T>(),itemWriter,repeatOperations); @AT@ 2816 @LENGTH@ 10
------INS SimpleName@@repeatOperations @TO@ ConstructorInvocation@@this(itemReader,new PassThroughItemProcessor<T>(),itemWriter,repeatOperations); @AT@ 2828 @LENGTH@ 16


UPD ExpressionStatement@@MethodInvocation:Assert.notNull(formBackingObjectPhysicalTypeMetadata,"Unable to obtain physical type metdata for type " + formBackingType.getFullyQualifiedTypeName()) @TO@ MethodInvocation:Assert.notNull(formBackingObjectPhysicalTypeMetadata,"Unable to obtain physical type metadata for type " + formBackingType.getFullyQualifiedTypeName()) @AT@ 5870 @LENGTH@ 152
---UPD MethodInvocation@@Assert.notNull(formBackingObjectPhysicalTypeMetadata,"Unable to obtain physical type metdata for type " + formBackingType.getFullyQualifiedTypeName()) @TO@ Assert.notNull(formBackingObjectPhysicalTypeMetadata,"Unable to obtain physical type metadata for type " + formBackingType.getFullyQualifiedTypeName()) @AT@ 5870 @LENGTH@ 151
------UPD SimpleName@@MethodName:notNull:[formBackingObjectPhysicalTypeMetadata, "Unable to obtain physical type metdata for type " + formBackingType.getFullyQualifiedTypeName()] @TO@ MethodName:notNull:[formBackingObjectPhysicalTypeMetadata, "Unable to obtain physical type metadata for type " + formBackingType.getFullyQualifiedTypeName()] @AT@ 5877 @LENGTH@ 144
---------UPD InfixExpression@@"Unable to obtain physical type metdata for type " + formBackingType.getFullyQualifiedTypeName() @TO@ "Unable to obtain physical type metadata for type " + formBackingType.getFullyQualifiedTypeName() @AT@ 5924 @LENGTH@ 96
------------UPD StringLiteral@@"Unable to obtain physical type metdata for type " @TO@ "Unable to obtain physical type metadata for type " @AT@ 5924 @LENGTH@ 50


UPD ReturnStatement@@MethodInvocation:deserializeValues(rawValues,List.class) @TO@ MethodInvocation:deserializeValues(rawValues) @AT@ 3531 @LENGTH@ 48
---UPD MethodInvocation@@deserializeValues(rawValues,List.class) @TO@ deserializeValues(rawValues) @AT@ 3538 @LENGTH@ 40
------UPD SimpleName@@MethodName:deserializeValues:[rawValues, List.class] @TO@ MethodName:deserializeValues:[rawValues] @AT@ 3538 @LENGTH@ 40
---------DEL TypeLiteral@@List.class @AT@ 3567 @LENGTH@ 10


UPD EnhancedForStatement@@for (final ClassInfo clazz : allKnown) {  final DotName className=clazz.name();  if (!processedClasses.contains(className)) {    allKnown.add(clazz);    subClassesToProcess.add(className);  }} @TO@ for (final ClassInfo clazz : list) {  final DotName className=clazz.name();  if (!processedClasses.contains(className)) {    allKnown.add(clazz);    subClassesToProcess.add(className);  }} @AT@ 4496 @LENGTH@ 310
---UPD SimpleName@@allKnown @TO@ list @AT@ 4525 @LENGTH@ 8


UPD ExpressionStatement@@MethodInvocation:op.get("address").set("host",host) @TO@ MethodInvocation:op.get("address").add("host",host) @AT@ 5412 @LENGTH@ 36
---UPD MethodInvocation@@op.get("address").set("host",host) @TO@ op.get("address").add("host",host) @AT@ 5412 @LENGTH@ 35
------UPD SimpleName@@MethodName:set:["host", host] @TO@ MethodName:add:["host", host] @AT@ 5430 @LENGTH@ 17


INS IfStatement@@if (addImport && ImportRegistrationResolverImpl.isPartOfJavaLang(typeToImport.getSimpleTypeName())) {  addImport=false;  useSimpleTypeName=false;} @TO@ MethodDeclaration@@public, static, final, NameExpr, MethodName:importTypeIfRequired, JavaType targetType, List<ImportDeclaration> imports, JavaType typeToImport,  @AT@ 28534 @LENGTH@ 272
---MOV InfixExpression@@addImport && ImportRegistrationResolverImpl.isPartOfJavaLang(typeToImport.getSimpleTypeName()) @TO@ IfStatement@@if (addImport && ImportRegistrationResolverImpl.isPartOfJavaLang(typeToImport.getSimpleTypeName())) {  addImport=false;  useSimpleTypeName=false;} @AT@ 28538 @LENGTH@ 94
---INS Block@@ThenBody:{  addImport=false;  useSimpleTypeName=false;} @TO@ IfStatement@@if (addImport && ImportRegistrationResolverImpl.isPartOfJavaLang(typeToImport.getSimpleTypeName())) {  addImport=false;  useSimpleTypeName=false;} @AT@ 28634 @LENGTH@ 172
------INS ExpressionStatement@@Assignment:addImport=false @TO@ Block@@ThenBody:{  addImport=false;  useSimpleTypeName=false;} @AT@ 28754 @LENGTH@ 18
---------INS Assignment@@addImport=false @TO@ ExpressionStatement@@Assignment:addImport=false @AT@ 28754 @LENGTH@ 17
------------INS SimpleName@@addImport @TO@ Assignment@@addImport=false @AT@ 28754 @LENGTH@ 9
------------INS Operator@@= @TO@ Assignment@@addImport=false @AT@ 28763 @LENGTH@ 1
------------INS BooleanLiteral@@false @TO@ Assignment@@addImport=false @AT@ 28766 @LENGTH@ 5
------INS ExpressionStatement@@Assignment:useSimpleTypeName=false @TO@ Block@@ThenBody:{  addImport=false;  useSimpleTypeName=false;} @AT@ 28776 @LENGTH@ 26
---------INS Assignment@@useSimpleTypeName=false @TO@ ExpressionStatement@@Assignment:useSimpleTypeName=false @AT@ 28776 @LENGTH@ 25
------------INS SimpleName@@useSimpleTypeName @TO@ Assignment@@useSimpleTypeName=false @AT@ 28776 @LENGTH@ 17
------------INS Operator@@= @TO@ Assignment@@useSimpleTypeName=false @AT@ 28793 @LENGTH@ 1
------------INS BooleanLiteral@@false @TO@ Assignment@@useSimpleTypeName=false @AT@ 28796 @LENGTH@ 5


INS MethodDeclaration@@public, voidMethodName:PersonCustomIdName, Integer ssn, String firstName,  @TO@ TypeDeclaration@@[public]PersonCustomIdName, BasePerson @AT@ 864 @LENGTH@ 109
---INS Modifier@@public @TO@ MethodDeclaration@@public, voidMethodName:PersonCustomIdName, Integer ssn, String firstName,  @AT@ 864 @LENGTH@ 6
---INS SimpleName@@MethodName:PersonCustomIdName @TO@ MethodDeclaration@@public, voidMethodName:PersonCustomIdName, Integer ssn, String firstName,  @AT@ 871 @LENGTH@ 18
---INS SingleVariableDeclaration@@Integer ssn @TO@ MethodDeclaration@@public, voidMethodName:PersonCustomIdName, Integer ssn, String firstName,  @AT@ 890 @LENGTH@ 11
------INS SimpleType@@Integer @TO@ SingleVariableDeclaration@@Integer ssn @AT@ 890 @LENGTH@ 7
------INS SimpleName@@ssn @TO@ SingleVariableDeclaration@@Integer ssn @AT@ 898 @LENGTH@ 3
---INS SingleVariableDeclaration@@String firstName @TO@ MethodDeclaration@@public, voidMethodName:PersonCustomIdName, Integer ssn, String firstName,  @AT@ 903 @LENGTH@ 16
------INS SimpleType@@String @TO@ SingleVariableDeclaration@@String firstName @AT@ 903 @LENGTH@ 6
------INS SimpleName@@firstName @TO@ SingleVariableDeclaration@@String firstName @AT@ 910 @LENGTH@ 9
---INS ExpressionStatement@@Assignment:this.ssn=ssn @TO@ MethodDeclaration@@public, voidMethodName:PersonCustomIdName, Integer ssn, String firstName,  @AT@ 925 @LENGTH@ 15
------INS Assignment@@this.ssn=ssn @TO@ ExpressionStatement@@Assignment:this.ssn=ssn @AT@ 925 @LENGTH@ 14
---------INS FieldAccess@@this.ssn @TO@ Assignment@@this.ssn=ssn @AT@ 925 @LENGTH@ 8
------------INS ThisExpression@@this @TO@ FieldAccess@@this.ssn @AT@ 925 @LENGTH@ 4
------------INS SimpleName@@ssn @TO@ FieldAccess@@this.ssn @AT@ 930 @LENGTH@ 3
---------INS Operator@@= @TO@ Assignment@@this.ssn=ssn @AT@ 933 @LENGTH@ 1
---------INS SimpleName@@ssn @TO@ Assignment@@this.ssn=ssn @AT@ 936 @LENGTH@ 3
---INS ExpressionStatement@@Assignment:this.firstName=firstName @TO@ MethodDeclaration@@public, voidMethodName:PersonCustomIdName, Integer ssn, String firstName,  @AT@ 943 @LENGTH@ 27
------INS Assignment@@this.firstName=firstName @TO@ ExpressionStatement@@Assignment:this.firstName=firstName @AT@ 943 @LENGTH@ 26
---------INS FieldAccess@@this.firstName @TO@ Assignment@@this.firstName=firstName @AT@ 943 @LENGTH@ 14
------------INS ThisExpression@@this @TO@ FieldAccess@@this.firstName @AT@ 943 @LENGTH@ 4
------------INS SimpleName@@firstName @TO@ FieldAccess@@this.firstName @AT@ 948 @LENGTH@ 9
---------INS Operator@@= @TO@ Assignment@@this.firstName=firstName @AT@ 957 @LENGTH@ 1
---------INS SimpleName@@firstName @TO@ Assignment@@this.firstName=firstName @AT@ 960 @LENGTH@ 9


UPD IfStatement@@if (failure == null) {  model.get(INTERFACE).set(operation.get(INTERFACE));  model.get(PORT).set(operation.get(PORT));  model.get(FIXED_PORT).set(operation.get(FIXED_PORT));  model.get(MULTICAST_ADDRESS).set(operation.get(MULTICAST_ADDRESS));  model.get(MULTICAST_PORT).set(operation.get(MULTICAST_PORT));  ModelNode compensating=Util.getResourceRemoveOperation(operation.get(OP_ADDR));  installSocketBinding(name,operation,context,resultHandler,compensating);} @TO@ if (failure == null) {  PathAddress address=PathAddress.pathAddress(operation.require(OP_ADDR));  String name=address.getLastElement().getValue();  ModelNode model=context.getSubModel();  model.get(NAME).set(name);  model.get(INTERFACE).set(operation.get(INTERFACE));  model.get(PORT).set(operation.get(PORT));  model.get(FIXED_PORT).set(operation.get(FIXED_PORT));  model.get(MULTICAST_ADDRESS).set(operation.get(MULTICAST_ADDRESS));  model.get(MULTICAST_PORT).set(operation.get(MULTICAST_PORT));  ModelNode compensating=Util.getResourceRemoveOperation(operation.get(OP_ADDR));  installSocketBinding(name,operation,context,resultHandler,compensating);} @AT@ 5033 @LENGTH@ 585
---UPD Block@@ThenBody:{  model.get(INTERFACE).set(operation.get(INTERFACE));  model.get(PORT).set(operation.get(PORT));  model.get(FIXED_PORT).set(operation.get(FIXED_PORT));  model.get(MULTICAST_ADDRESS).set(operation.get(MULTICAST_ADDRESS));  model.get(MULTICAST_PORT).set(operation.get(MULTICAST_PORT));  ModelNode compensating=Util.getResourceRemoveOperation(operation.get(OP_ADDR));  installSocketBinding(name,operation,context,resultHandler,compensating);} @TO@ ThenBody:{  PathAddress address=PathAddress.pathAddress(operation.require(OP_ADDR));  String name=address.getLastElement().getValue();  ModelNode model=context.getSubModel();  model.get(NAME).set(name);  model.get(INTERFACE).set(operation.get(INTERFACE));  model.get(PORT).set(operation.get(PORT));  model.get(FIXED_PORT).set(operation.get(FIXED_PORT));  model.get(MULTICAST_ADDRESS).set(operation.get(MULTICAST_ADDRESS));  model.get(MULTICAST_PORT).set(operation.get(MULTICAST_PORT));  ModelNode compensating=Util.getResourceRemoveOperation(operation.get(OP_ADDR));  installSocketBinding(name,operation,context,resultHandler,compensating);} @AT@ 5054 @LENGTH@ 564
------MOV VariableDeclarationStatement@@PathAddress address=PathAddress.pathAddress(operation.require(OP_ADDR)); @TO@ Block@@ThenBody:{  model.get(INTERFACE).set(operation.get(INTERFACE));  model.get(PORT).set(operation.get(PORT));  model.get(FIXED_PORT).set(operation.get(FIXED_PORT));  model.get(MULTICAST_ADDRESS).set(operation.get(MULTICAST_ADDRESS));  model.get(MULTICAST_PORT).set(operation.get(MULTICAST_PORT));  ModelNode compensating=Util.getResourceRemoveOperation(operation.get(OP_ADDR));  installSocketBinding(name,operation,context,resultHandler,compensating);} @AT@ 4730 @LENGTH@ 74
------MOV VariableDeclarationStatement@@String name=address.getLastElement().getValue(); @TO@ Block@@ThenBody:{  model.get(INTERFACE).set(operation.get(INTERFACE));  model.get(PORT).set(operation.get(PORT));  model.get(FIXED_PORT).set(operation.get(FIXED_PORT));  model.get(MULTICAST_ADDRESS).set(operation.get(MULTICAST_ADDRESS));  model.get(MULTICAST_PORT).set(operation.get(MULTICAST_PORT));  ModelNode compensating=Util.getResourceRemoveOperation(operation.get(OP_ADDR));  installSocketBinding(name,operation,context,resultHandler,compensating);} @AT@ 4817 @LENGTH@ 50
------MOV VariableDeclarationStatement@@ModelNode model=context.getSubModel(); @TO@ Block@@ThenBody:{  model.get(INTERFACE).set(operation.get(INTERFACE));  model.get(PORT).set(operation.get(PORT));  model.get(FIXED_PORT).set(operation.get(FIXED_PORT));  model.get(MULTICAST_ADDRESS).set(operation.get(MULTICAST_ADDRESS));  model.get(MULTICAST_PORT).set(operation.get(MULTICAST_PORT));  ModelNode compensating=Util.getResourceRemoveOperation(operation.get(OP_ADDR));  installSocketBinding(name,operation,context,resultHandler,compensating);} @AT@ 4880 @LENGTH@ 40
------MOV ExpressionStatement@@MethodInvocation:model.get(NAME).set(name) @TO@ Block@@ThenBody:{  model.get(INTERFACE).set(operation.get(INTERFACE));  model.get(PORT).set(operation.get(PORT));  model.get(FIXED_PORT).set(operation.get(FIXED_PORT));  model.get(MULTICAST_ADDRESS).set(operation.get(MULTICAST_ADDRESS));  model.get(MULTICAST_PORT).set(operation.get(MULTICAST_PORT));  ModelNode compensating=Util.getResourceRemoveOperation(operation.get(OP_ADDR));  installSocketBinding(name,operation,context,resultHandler,compensating);} @AT@ 4933 @LENGTH@ 26


UPD CatchClause@@catch (JBossXBException jbxbe) {  logger.debug("Caught expected failure: ",jbxbe);} @TO@ catch (XMLStreamException e) {  logger.debug("Caught expected failure: ",e);  String message=e.getMessage();  assertTrue(message.contains("session-type"));} @AT@ 3834 @LENGTH@ 331
---UPD SingleVariableDeclaration@@JBossXBException jbxbe @TO@ XMLStreamException e @AT@ 3841 @LENGTH@ 22
------UPD SimpleType@@JBossXBException @TO@ XMLStreamException @AT@ 3841 @LENGTH@ 16
------UPD SimpleName@@jbxbe @TO@ e @AT@ 3858 @LENGTH@ 5
---UPD ExpressionStatement@@MethodInvocation:logger.debug("Caught expected failure: ",jbxbe) @TO@ MethodInvocation:logger.debug("Caught expected failure: ",e) @AT@ 4108 @LENGTH@ 49
------UPD MethodInvocation@@logger.debug("Caught expected failure: ",jbxbe) @TO@ logger.debug("Caught expected failure: ",e) @AT@ 4108 @LENGTH@ 48
---------UPD SimpleName@@MethodName:debug:["Caught expected failure: ", jbxbe] @TO@ MethodName:debug:["Caught expected failure: ", e] @AT@ 4115 @LENGTH@ 41
------------UPD SimpleName@@jbxbe @TO@ e @AT@ 4150 @LENGTH@ 5
---INS VariableDeclarationStatement@@String message=e.getMessage(); @TO@ CatchClause@@catch (JBossXBException jbxbe) {  logger.debug("Caught expected failure: ",jbxbe);} @AT@ 4202 @LENGTH@ 32
------INS SimpleType@@String @TO@ VariableDeclarationStatement@@String message=e.getMessage(); @AT@ 4202 @LENGTH@ 6
------INS VariableDeclarationFragment@@message=e.getMessage() @TO@ VariableDeclarationStatement@@String message=e.getMessage(); @AT@ 4209 @LENGTH@ 24
---------INS SimpleName@@message @TO@ VariableDeclarationFragment@@message=e.getMessage() @AT@ 4209 @LENGTH@ 7
---------INS MethodInvocation@@e.getMessage() @TO@ VariableDeclarationFragment@@message=e.getMessage() @AT@ 4219 @LENGTH@ 14
------------INS SimpleName@@Name:e @TO@ MethodInvocation@@e.getMessage() @AT@ 4219 @LENGTH@ 1
------------INS SimpleName@@MethodName:getMessage:[] @TO@ MethodInvocation@@e.getMessage() @AT@ 4221 @LENGTH@ 12
---INS ExpressionStatement@@MethodInvocation:assertTrue(message.contains("session-type")) @TO@ CatchClause@@catch (JBossXBException jbxbe) {  logger.debug("Caught expected failure: ",jbxbe);} @AT@ 4244 @LENGTH@ 45
------INS MethodInvocation@@assertTrue(message.contains("session-type")) @TO@ ExpressionStatement@@MethodInvocation:assertTrue(message.contains("session-type")) @AT@ 4244 @LENGTH@ 44
---------INS SimpleName@@MethodName:assertTrue:[message.contains("session-type")] @TO@ MethodInvocation@@assertTrue(message.contains("session-type")) @AT@ 4244 @LENGTH@ 44
------------INS MethodInvocation@@message.contains("session-type") @TO@ SimpleName@@MethodName:assertTrue:[message.contains("session-type")] @AT@ 4255 @LENGTH@ 32
---------------INS SimpleName@@Name:message @TO@ MethodInvocation@@message.contains("session-type") @AT@ 4255 @LENGTH@ 7
---------------INS SimpleName@@MethodName:contains:["session-type"] @TO@ MethodInvocation@@message.contains("session-type") @AT@ 4263 @LENGTH@ 24
------------------INS StringLiteral@@"session-type" @TO@ SimpleName@@MethodName:contains:["session-type"] @AT@ 4272 @LENGTH@ 14


UPD ReturnStatement@@ClassInstanceCreation:new CustomEndpoint("custom",this) @TO@ ClassInstanceCreation:new CustomEndpoint(uri,this) @AT@ 4844 @LENGTH@ 42
---UPD ClassInstanceCreation@@CustomEndpoint["custom", this] @TO@ CustomEndpoint[uri, this] @AT@ 4851 @LENGTH@ 34
------DEL StringLiteral@@"custom" @AT@ 4870 @LENGTH@ 8
------INS SimpleName@@uri @TO@ ClassInstanceCreation@@CustomEndpoint["custom", this] @AT@ 4870 @LENGTH@ 3


UPD Block@@ThenBody:{  EndpointHelper.setReferenceProperties(getCamelContext(),consumer,consumerProperties);  EndpointHelper.setProperties(getCamelContext(),consumer,consumerProperties);  if (!this.isLenientProperties() && consumerProperties.size() > 0) {    throw new ResolveEndpointFailedException(this.getEndpointUri(),"There are " + consumerProperties.size() + " parameters that couldn't be set on the endpoint consumer."+ " Check the uri if the parameters are spelt correctly and that they are properties of the endpoint."+ " Unknown consumer parameters=["+ consumerProperties+ "]");  }} @TO@ ThenBody:{  Map<String,Object> copy=new HashMap<String,Object>(consumerProperties);  EndpointHelper.setReferenceProperties(getCamelContext(),consumer,copy);  EndpointHelper.setProperties(getCamelContext(),consumer,copy);  if (!this.isLenientProperties() && copy.size() > 0) {    throw new ResolveEndpointFailedException(this.getEndpointUri(),"There are " + copy.size() + " parameters that couldn't be set on the endpoint consumer."+ " Check the uri if the parameters are spelt correctly and that they are properties of the endpoint."+ " Unknown consumer parameters=["+ copy+ "]");  }} @AT@ 2136 @LENGTH@ 815
---UPD ExpressionStatement@@MethodInvocation:EndpointHelper.setReferenceProperties(getCamelContext(),consumer,consumerProperties) @TO@ MethodInvocation:EndpointHelper.setReferenceProperties(getCamelContext(),consumer,copy) @AT@ 2258 @LENGTH@ 87
------UPD MethodInvocation@@EndpointHelper.setReferenceProperties(getCamelContext(),consumer,consumerProperties) @TO@ EndpointHelper.setReferenceProperties(getCamelContext(),consumer,copy) @AT@ 2258 @LENGTH@ 86
---------UPD SimpleName@@MethodName:setReferenceProperties:[getCamelContext(), consumer, consumerProperties] @TO@ MethodName:setReferenceProperties:[getCamelContext(), consumer, copy] @AT@ 2273 @LENGTH@ 71
------------UPD SimpleName@@consumerProperties @TO@ copy @AT@ 2325 @LENGTH@ 18
---UPD ExpressionStatement@@MethodInvocation:EndpointHelper.setProperties(getCamelContext(),consumer,consumerProperties) @TO@ MethodInvocation:EndpointHelper.setProperties(getCamelContext(),consumer,copy) @AT@ 2358 @LENGTH@ 78
------UPD MethodInvocation@@EndpointHelper.setProperties(getCamelContext(),consumer,consumerProperties) @TO@ EndpointHelper.setProperties(getCamelContext(),consumer,copy) @AT@ 2358 @LENGTH@ 77
---------UPD SimpleName@@MethodName:setProperties:[getCamelContext(), consumer, consumerProperties] @TO@ MethodName:setProperties:[getCamelContext(), consumer, copy] @AT@ 2373 @LENGTH@ 62
------------UPD SimpleName@@consumerProperties @TO@ copy @AT@ 2416 @LENGTH@ 18
---INS VariableDeclarationStatement@@Map<String,Object> copy=new HashMap<String,Object>(consumerProperties); @TO@ Block@@ThenBody:{  EndpointHelper.setReferenceProperties(getCamelContext(),consumer,consumerProperties);  EndpointHelper.setProperties(getCamelContext(),consumer,consumerProperties);  if (!this.isLenientProperties() && consumerProperties.size() > 0) {    throw new ResolveEndpointFailedException(this.getEndpointUri(),"There are " + consumerProperties.size() + " parameters that couldn't be set on the endpoint consumer."+ " Check the uri if the parameters are spelt correctly and that they are properties of the endpoint."+ " Unknown consumer parameters=["+ consumerProperties+ "]");  }} @AT@ 2369 @LENGTH@ 75
------INS ParameterizedType@@Map<String,Object> @TO@ VariableDeclarationStatement@@Map<String,Object> copy=new HashMap<String,Object>(consumerProperties); @AT@ 2369 @LENGTH@ 19
---------INS SimpleType@@Map @TO@ ParameterizedType@@Map<String,Object> @AT@ 2369 @LENGTH@ 3
---------INS SimpleType@@String @TO@ ParameterizedType@@Map<String,Object> @AT@ 2373 @LENGTH@ 6
---------INS SimpleType@@Object @TO@ ParameterizedType@@Map<String,Object> @AT@ 2381 @LENGTH@ 6
------INS VariableDeclarationFragment@@copy=new HashMap<String,Object>(consumerProperties) @TO@ VariableDeclarationStatement@@Map<String,Object> copy=new HashMap<String,Object>(consumerProperties); @AT@ 2389 @LENGTH@ 54
---------INS SimpleName@@copy @TO@ VariableDeclarationFragment@@copy=new HashMap<String,Object>(consumerProperties) @AT@ 2389 @LENGTH@ 4
---------INS ClassInstanceCreation@@HashMap<String,Object>[consumerProperties] @TO@ VariableDeclarationFragment@@copy=new HashMap<String,Object>(consumerProperties) @AT@ 2396 @LENGTH@ 47
------------INS New@@new @TO@ ClassInstanceCreation@@HashMap<String,Object>[consumerProperties] @AT@ 2396 @LENGTH@ 3
------------INS ParameterizedType@@HashMap<String,Object> @TO@ ClassInstanceCreation@@HashMap<String,Object>[consumerProperties] @AT@ 2400 @LENGTH@ 23
---------------INS SimpleType@@HashMap @TO@ ParameterizedType@@HashMap<String,Object> @AT@ 2400 @LENGTH@ 7
---------------INS SimpleType@@String @TO@ ParameterizedType@@HashMap<String,Object> @AT@ 2408 @LENGTH@ 6
---------------INS SimpleType@@Object @TO@ ParameterizedType@@HashMap<String,Object> @AT@ 2416 @LENGTH@ 6
------------INS SimpleName@@consumerProperties @TO@ ClassInstanceCreation@@HashMap<String,Object>[consumerProperties] @AT@ 2424 @LENGTH@ 18
---UPD IfStatement@@if (!this.isLenientProperties() && consumerProperties.size() > 0) {  throw new ResolveEndpointFailedException(this.getEndpointUri(),"There are " + consumerProperties.size() + " parameters that couldn't be set on the endpoint consumer."+ " Check the uri if the parameters are spelt correctly and that they are properties of the endpoint."+ " Unknown consumer parameters=["+ consumerProperties+ "]");} @TO@ if (!this.isLenientProperties() && copy.size() > 0) {  throw new ResolveEndpointFailedException(this.getEndpointUri(),"There are " + copy.size() + " parameters that couldn't be set on the endpoint consumer."+ " Check the uri if the parameters are spelt correctly and that they are properties of the endpoint."+ " Unknown consumer parameters=["+ copy+ "]");} @AT@ 2449 @LENGTH@ 492
------UPD InfixExpression@@!this.isLenientProperties() && consumerProperties.size() > 0 @TO@ !this.isLenientProperties() && copy.size() > 0 @AT@ 2453 @LENGTH@ 60
---------UPD InfixExpression@@consumerProperties.size() > 0 @TO@ copy.size() > 0 @AT@ 2484 @LENGTH@ 29
------------UPD MethodInvocation@@consumerProperties.size() @TO@ copy.size() @AT@ 2484 @LENGTH@ 25
---------------UPD SimpleName@@Name:consumerProperties @TO@ Name:copy @AT@ 2484 @LENGTH@ 18
------UPD Block@@ThenBody:{  throw new ResolveEndpointFailedException(this.getEndpointUri(),"There are " + consumerProperties.size() + " parameters that couldn't be set on the endpoint consumer."+ " Check the uri if the parameters are spelt correctly and that they are properties of the endpoint."+ " Unknown consumer parameters=["+ consumerProperties+ "]");} @TO@ ThenBody:{  throw new ResolveEndpointFailedException(this.getEndpointUri(),"There are " + copy.size() + " parameters that couldn't be set on the endpoint consumer."+ " Check the uri if the parameters are spelt correctly and that they are properties of the endpoint."+ " Unknown consumer parameters=["+ copy+ "]");} @AT@ 2515 @LENGTH@ 426
---------UPD ThrowStatement@@ClassInstanceCreation:new ResolveEndpointFailedException(this.getEndpointUri(),"There are " + consumerProperties.size() + " parameters that couldn't be set on the endpoint consumer."+ " Check the uri if the parameters are spelt correctly and that they are properties of the endpoint."+ " Unknown consumer parameters=["+ consumerProperties+ "]") @TO@ ClassInstanceCreation:new ResolveEndpointFailedException(this.getEndpointUri(),"There are " + copy.size() + " parameters that couldn't be set on the endpoint consumer."+ " Check the uri if the parameters are spelt correctly and that they are properties of the endpoint."+ " Unknown consumer parameters=["+ copy+ "]") @AT@ 2533 @LENGTH@ 394
------------UPD ClassInstanceCreation@@ResolveEndpointFailedException[this.getEndpointUri(), "There are " + consumerProperties.size() + " parameters that couldn't be set on the endpoint consumer."+ " Check the uri if the parameters are spelt correctly and that they are properties of the endpoint."+ " Unknown consumer parameters=["+ consumerProperties+ "]"] @TO@ ResolveEndpointFailedException[this.getEndpointUri(), "There are " + copy.size() + " parameters that couldn't be set on the endpoint consumer."+ " Check the uri if the parameters are spelt correctly and that they are properties of the endpoint."+ " Unknown consumer parameters=["+ copy+ "]"] @AT@ 2539 @LENGTH@ 387
---------------UPD InfixExpression@@"There are " + consumerProperties.size() + " parameters that couldn't be set on the endpoint consumer."+ " Check the uri if the parameters are spelt correctly and that they are properties of the endpoint."+ " Unknown consumer parameters=["+ consumerProperties+ "]" @TO@ "There are " + copy.size() + " parameters that couldn't be set on the endpoint consumer."+ " Check the uri if the parameters are spelt correctly and that they are properties of the endpoint."+ " Unknown consumer parameters=["+ copy+ "]" @AT@ 2597 @LENGTH@ 328
------------------UPD MethodInvocation@@consumerProperties.size() @TO@ copy.size() @AT@ 2612 @LENGTH@ 25
---------------------UPD SimpleName@@Name:consumerProperties @TO@ Name:copy @AT@ 2612 @LENGTH@ 18
------------------UPD SimpleName@@consumerProperties @TO@ copy @AT@ 2901 @LENGTH@ 18


INS MethodDeclaration@@public, voidMethodName:IllegalMappingException, String s, Throwable throwable,  @TO@ TypeDeclaration@@[public]IllegalMappingException, RuntimeException @AT@ 844 @LENGTH@ 92
---INS Modifier@@public @TO@ MethodDeclaration@@public, voidMethodName:IllegalMappingException, String s, Throwable throwable,  @AT@ 844 @LENGTH@ 6
---INS SimpleName@@MethodName:IllegalMappingException @TO@ MethodDeclaration@@public, voidMethodName:IllegalMappingException, String s, Throwable throwable,  @AT@ 851 @LENGTH@ 23
---INS SingleVariableDeclaration@@String s @TO@ MethodDeclaration@@public, voidMethodName:IllegalMappingException, String s, Throwable throwable,  @AT@ 875 @LENGTH@ 8
------INS SimpleType@@String @TO@ SingleVariableDeclaration@@String s @AT@ 875 @LENGTH@ 6
------INS SimpleName@@s @TO@ SingleVariableDeclaration@@String s @AT@ 882 @LENGTH@ 1
---INS SingleVariableDeclaration@@Throwable throwable @TO@ MethodDeclaration@@public, voidMethodName:IllegalMappingException, String s, Throwable throwable,  @AT@ 885 @LENGTH@ 19
------INS SimpleType@@Throwable @TO@ SingleVariableDeclaration@@Throwable throwable @AT@ 885 @LENGTH@ 9
------INS SimpleName@@throwable @TO@ SingleVariableDeclaration@@Throwable throwable @AT@ 895 @LENGTH@ 9
---INS SuperConstructorInvocation@@super(s,throwable);
 @TO@ MethodDeclaration@@public, voidMethodName:IllegalMappingException, String s, Throwable throwable,  @AT@ 912 @LENGTH@ 20
------INS SimpleName@@s @TO@ SuperConstructorInvocation@@super(s,throwable);
 @AT@ 918 @LENGTH@ 1
------INS SimpleName@@throwable @TO@ SuperConstructorInvocation@@super(s,throwable);
 @AT@ 921 @LENGTH@ 9


UPD ExpressionStatement@@MethodInvocation:LOG.debug(String.format("Created query {}",query.getQueryObject())) @TO@ MethodInvocation:LOG.debug(String.format("Created query %s",query.getQueryObject())) @AT@ 2449 @LENGTH@ 69
---UPD MethodInvocation@@LOG.debug(String.format("Created query {}",query.getQueryObject())) @TO@ LOG.debug(String.format("Created query %s",query.getQueryObject())) @AT@ 2449 @LENGTH@ 68
------UPD SimpleName@@MethodName:debug:[String.format("Created query {}",query.getQueryObject())] @TO@ MethodName:debug:[String.format("Created query %s",query.getQueryObject())] @AT@ 2453 @LENGTH@ 64
---------UPD MethodInvocation@@String.format("Created query {}",query.getQueryObject()) @TO@ String.format("Created query %s",query.getQueryObject()) @AT@ 2459 @LENGTH@ 57
------------UPD SimpleName@@MethodName:format:["Created query {}", query.getQueryObject()] @TO@ MethodName:format:["Created query %s", query.getQueryObject()] @AT@ 2466 @LENGTH@ 50
---------------UPD StringLiteral@@"Created query {}" @TO@ "Created query %s" @AT@ 2473 @LENGTH@ 18


INS MethodDeclaration@@protected, ExecutorService, MethodName:createAggregateExecutorService, String name,  @TO@ TypeDeclaration@@[public]MulticastProcessor, ServiceSupport[AsyncProcessor, Navigate<Processor>, Traceable] @AT@ 42456 @LENGTH@ 183
---INS Modifier@@protected @TO@ MethodDeclaration@@protected, ExecutorService, MethodName:createAggregateExecutorService, String name,  @AT@ 42456 @LENGTH@ 9
---INS SimpleType@@ExecutorService @TO@ MethodDeclaration@@protected, ExecutorService, MethodName:createAggregateExecutorService, String name,  @AT@ 42466 @LENGTH@ 15
---INS SimpleName@@MethodName:createAggregateExecutorService @TO@ MethodDeclaration@@protected, ExecutorService, MethodName:createAggregateExecutorService, String name,  @AT@ 42482 @LENGTH@ 30
---INS SingleVariableDeclaration@@String name @TO@ MethodDeclaration@@protected, ExecutorService, MethodName:createAggregateExecutorService, String name,  @AT@ 42513 @LENGTH@ 11
------INS SimpleType@@String @TO@ SingleVariableDeclaration@@String name @AT@ 42513 @LENGTH@ 6
------INS SimpleName@@name @TO@ SingleVariableDeclaration@@String name @AT@ 42520 @LENGTH@ 4
---INS ReturnStatement@@MethodInvocation:camelContext.getExecutorServiceStrategy().newThreadPool(this,name,1,Integer.MAX_VALUE) @TO@ MethodDeclaration@@protected, ExecutorService, MethodName:createAggregateExecutorService, String name,  @AT@ 42536 @LENGTH@ 97
------MOV MethodInvocation@@camelContext.getExecutorServiceStrategy().newThreadPool(this,name,1,Integer.MAX_VALUE) @TO@ ReturnStatement@@MethodInvocation:camelContext.getExecutorServiceStrategy().newThreadPool(this,name,1,Integer.MAX_VALUE) @AT@ 42067 @LENGTH@ 89


UPD EnhancedForStatement@@for (ModelNode property : dataSourceNode.get(CONNECTION_PROPERTIES).asList()) {  connectionProperties.put(property.asProperty().getName(),property.asString());} @TO@ for (Property property : dataSourceNode.get(CONNECTION_PROPERTIES).asPropertyList()) {  connectionProperties.put(property.getName(),property.getValue().asString());} @AT@ 19514 @LENGTH@ 189
---UPD SingleVariableDeclaration@@ModelNode property @TO@ Property property @AT@ 19519 @LENGTH@ 18
------UPD SimpleType@@ModelNode @TO@ Property @AT@ 19519 @LENGTH@ 9
---UPD MethodInvocation@@dataSourceNode.get(CONNECTION_PROPERTIES).asList() @TO@ dataSourceNode.get(CONNECTION_PROPERTIES).asPropertyList() @AT@ 19540 @LENGTH@ 50
------UPD SimpleName@@MethodName:asList:[] @TO@ MethodName:asPropertyList:[] @AT@ 19582 @LENGTH@ 8
---UPD ExpressionStatement@@MethodInvocation:connectionProperties.put(property.asProperty().getName(),property.asString()) @TO@ MethodInvocation:connectionProperties.put(property.getName(),property.getValue().asString()) @AT@ 19610 @LENGTH@ 79
------UPD MethodInvocation@@connectionProperties.put(property.asProperty().getName(),property.asString()) @TO@ connectionProperties.put(property.getName(),property.getValue().asString()) @AT@ 19610 @LENGTH@ 78
---------UPD SimpleName@@MethodName:put:[property.asProperty().getName(), property.asString()] @TO@ MethodName:put:[property.getName(), property.getValue().asString()] @AT@ 19631 @LENGTH@ 57
------------UPD MethodInvocation@@property.asProperty().getName() @TO@ property.getName() @AT@ 19635 @LENGTH@ 31
---------------DEL MethodInvocation@@MethodName:asProperty:[] @AT@ 19635 @LENGTH@ 21
------------UPD MethodInvocation@@property.asString() @TO@ property.getValue().asString() @AT@ 19668 @LENGTH@ 19
---------------INS MethodInvocation@@MethodName:getValue:[] @TO@ MethodInvocation@@property.asString() @AT@ 19693 @LENGTH@ 19


UPD ReturnStatement@@InfixExpression:"http://www.gowalla.com/users/" + getProfileId() @TO@ InfixExpression:"https://github.com/" + getProfileId() @AT@ 2944 @LENGTH@ 56
---UPD InfixExpression@@"http://www.gowalla.com/users/" + getProfileId() @TO@ "https://github.com/" + getProfileId() @AT@ 2951 @LENGTH@ 48
------UPD StringLiteral@@"http://www.gowalla.com/users/" @TO@ "https://github.com/" @AT@ 2951 @LENGTH@ 31


UPD VariableDeclarationStatement@@final ServiceName beanServiceName=deploymentUnit.getServiceName().append("component").append(ejbName).append("VIEW").append(localInterfaceType.getName()); @TO@ final ServiceName beanServiceName=deploymentUnit.getServiceName().append("component").append(ejbName).append("VIEW").append(localInterfaceType.getName()).append(MethodIntf.LOCAL.toString()); @AT@ 4952 @LENGTH@ 185
---UPD VariableDeclarationFragment@@beanServiceName=deploymentUnit.getServiceName().append("component").append(ejbName).append("VIEW").append(localInterfaceType.getName()) @TO@ beanServiceName=deploymentUnit.getServiceName().append("component").append(ejbName).append("VIEW").append(localInterfaceType.getName()).append(MethodIntf.LOCAL.toString()) @AT@ 4970 @LENGTH@ 166
------UPD MethodInvocation@@deploymentUnit.getServiceName().append("component").append(ejbName).append("VIEW").append(localInterfaceType.getName()) @TO@ deploymentUnit.getServiceName().append("component").append(ejbName).append("VIEW").append(localInterfaceType.getName()).append(MethodIntf.LOCAL.toString()) @AT@ 4988 @LENGTH@ 148
---------INS MethodInvocation@@MethodName:append:[localInterfaceType.getName()] @TO@ MethodInvocation@@deploymentUnit.getServiceName().append("component").append(ejbName).append("VIEW").append(localInterfaceType.getName()) @AT@ 5035 @LENGTH@ 148
------------INS MethodInvocation@@localInterfaceType.getName() @TO@ MethodInvocation@@MethodName:append:[localInterfaceType.getName()] @AT@ 5154 @LENGTH@ 28
---------------MOV SimpleName@@Name:localInterfaceType @TO@ MethodInvocation@@localInterfaceType.getName() @AT@ 5107 @LENGTH@ 18
---------------MOV SimpleName@@Name:localInterfaceType @TO@ MethodInvocation@@localInterfaceType.getName() @AT@ 5107 @LENGTH@ 18
---------------MOV SimpleName@@MethodName:getName:[] @TO@ MethodInvocation@@localInterfaceType.getName() @AT@ 5126 @LENGTH@ 9
---------------MOV SimpleName@@MethodName:getName:[] @TO@ MethodInvocation@@localInterfaceType.getName() @AT@ 5126 @LENGTH@ 9
---------DEL SimpleName@@MethodName:append:[localInterfaceType.getName()] @AT@ 5100 @LENGTH@ 36
------------DEL MethodInvocation@@localInterfaceType.getName() @AT@ 5107 @LENGTH@ 28
---------INS SimpleName@@MethodName:append:[MethodIntf.LOCAL.toString()] @TO@ MethodInvocation@@deploymentUnit.getServiceName().append("component").append(ejbName).append("VIEW").append(localInterfaceType.getName()) @AT@ 5184 @LENGTH@ 35
------------INS MethodInvocation@@MethodIntf.LOCAL.toString() @TO@ SimpleName@@MethodName:append:[MethodIntf.LOCAL.toString()] @AT@ 5191 @LENGTH@ 27
---------------INS QualifiedName@@Name:MethodIntf.LOCAL @TO@ MethodInvocation@@MethodIntf.LOCAL.toString() @AT@ 5191 @LENGTH@ 16
---------------INS SimpleName@@MethodName:toString:[] @TO@ MethodInvocation@@MethodIntf.LOCAL.toString() @AT@ 5208 @LENGTH@ 10


UPD ReturnStatement@@InfixExpression:getType().isAssignableFrom(Collection.class) || getType().isAssignableFrom(List.class) || isArray() @TO@ InfixExpression:Collection.class.isAssignableFrom(getType()) || isArray() @AT@ 3657 @LENGTH@ 107
---UPD InfixExpression@@getType().isAssignableFrom(Collection.class) || getType().isAssignableFrom(List.class) || isArray() @TO@ Collection.class.isAssignableFrom(getType()) || isArray() @AT@ 3664 @LENGTH@ 99
------UPD MethodInvocation@@getType().isAssignableFrom(Collection.class) @TO@ Collection.class.isAssignableFrom(getType()) @AT@ 3664 @LENGTH@ 44
---------INS TypeLiteral@@Collection.class @TO@ MethodInvocation@@getType().isAssignableFrom(Collection.class) @AT@ 3664 @LENGTH@ 16
---------DEL MethodInvocation@@MethodName:getType:[] @AT@ 3664 @LENGTH@ 9
---------DEL SimpleName@@MethodName:isAssignableFrom:[Collection.class] @AT@ 3674 @LENGTH@ 34
------------DEL TypeLiteral@@Collection.class @AT@ 3691 @LENGTH@ 16
---------INS SimpleName@@MethodName:isAssignableFrom:[getType()] @TO@ MethodInvocation@@getType().isAssignableFrom(Collection.class) @AT@ 3681 @LENGTH@ 27
------------INS MethodInvocation@@MethodName:getType:[] @TO@ SimpleName@@MethodName:isAssignableFrom:[getType()] @AT@ 3698 @LENGTH@ 9
------DEL MethodInvocation@@getType().isAssignableFrom(List.class) @AT@ 3712 @LENGTH@ 38
---------DEL MethodInvocation@@MethodName:getType:[] @AT@ 3712 @LENGTH@ 9
---------DEL SimpleName@@MethodName:isAssignableFrom:[List.class] @AT@ 3722 @LENGTH@ 28
------------DEL TypeLiteral@@List.class @AT@ 3739 @LENGTH@ 10


DEL ExpressionStatement@@MethodInvocation:DeploymentUpdateService.addService(batchBuilder,updates,serverStartupListener) @AT@ 4805 @LENGTH@ 81
---DEL MethodInvocation@@DeploymentUpdateService.addService(batchBuilder,updates,serverStartupListener) @AT@ 4805 @LENGTH@ 80
------DEL SimpleName@@Name:DeploymentUpdateService @AT@ 4805 @LENGTH@ 23
------DEL SimpleName@@MethodName:addService:[batchBuilder, updates, serverStartupListener] @AT@ 4829 @LENGTH@ 56
---------DEL SimpleName@@batchBuilder @AT@ 4840 @LENGTH@ 12
---------DEL SimpleName@@updates @AT@ 4854 @LENGTH@ 7
---------DEL SimpleName@@serverStartupListener @AT@ 4863 @LENGTH@ 21


UPD MethodDeclaration@@public, static, void, MethodName:initOperations, final ModelNodeRegistration root, final DeploymentRepository deploymentRepository, final ExtensibleConfigurationPersister extensibleConfigurationPersister,  @TO@ public, static, void, MethodName:initOperations, final ModelNodeRegistration root, final DeploymentRepository deploymentRepository, final ExtensibleConfigurationPersister extensibleConfigurationPersister, ServerEnvironment serverEnvironment,  @AT@ 7363 @LENGTH@ 10052
---INS SingleVariableDeclaration@@ServerEnvironment serverEnvironment @TO@ MethodDeclaration@@public, static, void, MethodName:initOperations, final ModelNodeRegistration root, final DeploymentRepository deploymentRepository, final ExtensibleConfigurationPersister extensibleConfigurationPersister,  @AT@ 7614 @LENGTH@ 35
------INS SimpleType@@ServerEnvironment @TO@ SingleVariableDeclaration@@ServerEnvironment serverEnvironment @AT@ 7614 @LENGTH@ 17
------INS SimpleName@@serverEnvironment @TO@ SingleVariableDeclaration@@ServerEnvironment serverEnvironment @AT@ 7632 @LENGTH@ 17
---INS IfStatement@@if (serverEnvironment != null && serverEnvironment.isStandalone()) root.registerOperationHandler(ServerShutdownHandler.OPERATION_NAME,ServerShutdownHandler.INSTANCE,ServerShutdownHandler.INSTANCE,false); @TO@ MethodDeclaration@@public, static, void, MethodName:initOperations, final ModelNodeRegistration root, final DeploymentRepository deploymentRepository, final ExtensibleConfigurationPersister extensibleConfigurationPersister,  @AT@ 11957 @LENGTH@ 218
------INS InfixExpression@@serverEnvironment != null && serverEnvironment.isStandalone() @TO@ IfStatement@@if (serverEnvironment != null && serverEnvironment.isStandalone()) root.registerOperationHandler(ServerShutdownHandler.OPERATION_NAME,ServerShutdownHandler.INSTANCE,ServerShutdownHandler.INSTANCE,false); @AT@ 11961 @LENGTH@ 61
---------INS InfixExpression@@serverEnvironment != null @TO@ InfixExpression@@serverEnvironment != null && serverEnvironment.isStandalone() @AT@ 11961 @LENGTH@ 25
------------INS SimpleName@@serverEnvironment @TO@ InfixExpression@@serverEnvironment != null @AT@ 11961 @LENGTH@ 17
------------INS Operator@@!= @TO@ InfixExpression@@serverEnvironment != null @AT@ 11978 @LENGTH@ 2
------------INS NullLiteral@@null @TO@ InfixExpression@@serverEnvironment != null @AT@ 11982 @LENGTH@ 4
---------INS Operator@@&& @TO@ InfixExpression@@serverEnvironment != null && serverEnvironment.isStandalone() @AT@ 11986 @LENGTH@ 2
---------INS MethodInvocation@@serverEnvironment.isStandalone() @TO@ InfixExpression@@serverEnvironment != null && serverEnvironment.isStandalone() @AT@ 11990 @LENGTH@ 32
------------INS SimpleName@@Name:serverEnvironment @TO@ MethodInvocation@@serverEnvironment.isStandalone() @AT@ 11990 @LENGTH@ 17
------------INS SimpleName@@MethodName:isStandalone:[] @TO@ MethodInvocation@@serverEnvironment.isStandalone() @AT@ 12008 @LENGTH@ 14
------INS Block@@ThenBody:root.registerOperationHandler(ServerShutdownHandler.OPERATION_NAME,ServerShutdownHandler.INSTANCE,ServerShutdownHandler.INSTANCE,false); @TO@ IfStatement@@if (serverEnvironment != null && serverEnvironment.isStandalone()) root.registerOperationHandler(ServerShutdownHandler.OPERATION_NAME,ServerShutdownHandler.INSTANCE,ServerShutdownHandler.INSTANCE,false); @AT@ 12036 @LENGTH@ 139
---------INS ExpressionStatement@@MethodInvocation:root.registerOperationHandler(ServerShutdownHandler.OPERATION_NAME,ServerShutdownHandler.INSTANCE,ServerShutdownHandler.INSTANCE,false) @TO@ Block@@ThenBody:root.registerOperationHandler(ServerShutdownHandler.OPERATION_NAME,ServerShutdownHandler.INSTANCE,ServerShutdownHandler.INSTANCE,false); @AT@ 12036 @LENGTH@ 139
------------INS MethodInvocation@@root.registerOperationHandler(ServerShutdownHandler.OPERATION_NAME,ServerShutdownHandler.INSTANCE,ServerShutdownHandler.INSTANCE,false) @TO@ ExpressionStatement@@MethodInvocation:root.registerOperationHandler(ServerShutdownHandler.OPERATION_NAME,ServerShutdownHandler.INSTANCE,ServerShutdownHandler.INSTANCE,false) @AT@ 12036 @LENGTH@ 138
---------------INS SimpleName@@Name:root @TO@ MethodInvocation@@root.registerOperationHandler(ServerShutdownHandler.OPERATION_NAME,ServerShutdownHandler.INSTANCE,ServerShutdownHandler.INSTANCE,false) @AT@ 12036 @LENGTH@ 4
---------------INS SimpleName@@MethodName:registerOperationHandler:[ServerShutdownHandler.OPERATION_NAME, ServerShutdownHandler.INSTANCE, ServerShutdownHandler.INSTANCE, false] @TO@ MethodInvocation@@root.registerOperationHandler(ServerShutdownHandler.OPERATION_NAME,ServerShutdownHandler.INSTANCE,ServerShutdownHandler.INSTANCE,false) @AT@ 12041 @LENGTH@ 133
------------------INS QualifiedName@@ServerShutdownHandler.OPERATION_NAME @TO@ SimpleName@@MethodName:registerOperationHandler:[ServerShutdownHandler.OPERATION_NAME, ServerShutdownHandler.INSTANCE, ServerShutdownHandler.INSTANCE, false] @AT@ 12066 @LENGTH@ 36
---------------------INS SimpleName@@ServerShutdownHandler @TO@ QualifiedName@@ServerShutdownHandler.OPERATION_NAME @AT@ 12066 @LENGTH@ 21
---------------------INS SimpleName@@OPERATION_NAME @TO@ QualifiedName@@ServerShutdownHandler.OPERATION_NAME @AT@ 12088 @LENGTH@ 14
------------------INS QualifiedName@@ServerShutdownHandler.INSTANCE @TO@ SimpleName@@MethodName:registerOperationHandler:[ServerShutdownHandler.OPERATION_NAME, ServerShutdownHandler.INSTANCE, ServerShutdownHandler.INSTANCE, false] @AT@ 12104 @LENGTH@ 30
---------------------INS SimpleName@@ServerShutdownHandler @TO@ QualifiedName@@ServerShutdownHandler.INSTANCE @AT@ 12104 @LENGTH@ 21
---------------------INS SimpleName@@INSTANCE @TO@ QualifiedName@@ServerShutdownHandler.INSTANCE @AT@ 12126 @LENGTH@ 8
------------------INS QualifiedName@@ServerShutdownHandler.INSTANCE @TO@ SimpleName@@MethodName:registerOperationHandler:[ServerShutdownHandler.OPERATION_NAME, ServerShutdownHandler.INSTANCE, ServerShutdownHandler.INSTANCE, false] @AT@ 12136 @LENGTH@ 30
---------------------INS SimpleName@@ServerShutdownHandler @TO@ QualifiedName@@ServerShutdownHandler.INSTANCE @AT@ 12136 @LENGTH@ 21
---------------------INS SimpleName@@INSTANCE @TO@ QualifiedName@@ServerShutdownHandler.INSTANCE @AT@ 12158 @LENGTH@ 8
------------------INS BooleanLiteral@@false @TO@ SimpleName@@MethodName:registerOperationHandler:[ServerShutdownHandler.OPERATION_NAME, ServerShutdownHandler.INSTANCE, ServerShutdownHandler.INSTANCE, false] @AT@ 12168 @LENGTH@ 5


UPD Block@@ThenBody:{  namespaces.add(param);  ModelNode compensating=NamespaceRemoveHandler.getRemoveNamespaceOperation(operation.get(OP_ADDR),param.asProperty().getName());  resultHandler.handleResultComplete(compensating);} @TO@ ThenBody:{  Property prop=param.asProperty();  namespaces.add(prop.getName(),prop.getValue());  ModelNode compensating=NamespaceRemoveHandler.getRemoveNamespaceOperation(operation.get(OP_ADDR),param.asProperty().getName());  resultHandler.handleResultComplete(compensating);} @AT@ 3170 @LENGTH@ 267
---UPD ExpressionStatement@@MethodInvocation:namespaces.add(param) @TO@ MethodInvocation:namespaces.add(prop.getName(),prop.getValue()) @AT@ 3188 @LENGTH@ 22
------UPD MethodInvocation@@namespaces.add(param) @TO@ namespaces.add(prop.getName(),prop.getValue()) @AT@ 3188 @LENGTH@ 21
---------UPD SimpleName@@MethodName:add:[param] @TO@ MethodName:add:[prop.getName(), prop.getValue()] @AT@ 3199 @LENGTH@ 10
------------DEL SimpleName@@param @AT@ 3203 @LENGTH@ 5
------------INS MethodInvocation@@prop.getName() @TO@ SimpleName@@MethodName:add:[param] @AT@ 3285 @LENGTH@ 14
---------------INS SimpleName@@Name:prop @TO@ MethodInvocation@@prop.getName() @AT@ 3285 @LENGTH@ 4
---------------INS SimpleName@@MethodName:getName:[] @TO@ MethodInvocation@@prop.getName() @AT@ 3290 @LENGTH@ 9
------------INS MethodInvocation@@prop.getValue() @TO@ SimpleName@@MethodName:add:[param] @AT@ 3301 @LENGTH@ 15
---------------INS SimpleName@@Name:prop @TO@ MethodInvocation@@prop.getValue() @AT@ 3301 @LENGTH@ 4
---------------INS SimpleName@@MethodName:getValue:[] @TO@ MethodInvocation@@prop.getValue() @AT@ 3306 @LENGTH@ 10
---INS VariableDeclarationStatement@@Property prop=param.asProperty(); @TO@ Block@@ThenBody:{  namespaces.add(param);  ModelNode compensating=NamespaceRemoveHandler.getRemoveNamespaceOperation(operation.get(OP_ADDR),param.asProperty().getName());  resultHandler.handleResultComplete(compensating);} @AT@ 3218 @LENGTH@ 35
------INS SimpleType@@Property @TO@ VariableDeclarationStatement@@Property prop=param.asProperty(); @AT@ 3218 @LENGTH@ 8
------INS VariableDeclarationFragment@@prop=param.asProperty() @TO@ VariableDeclarationStatement@@Property prop=param.asProperty(); @AT@ 3227 @LENGTH@ 25
---------INS SimpleName@@prop @TO@ VariableDeclarationFragment@@prop=param.asProperty() @AT@ 3227 @LENGTH@ 4
---------INS MethodInvocation@@param.asProperty() @TO@ VariableDeclarationFragment@@prop=param.asProperty() @AT@ 3234 @LENGTH@ 18
------------INS SimpleName@@Name:param @TO@ MethodInvocation@@param.asProperty() @AT@ 3234 @LENGTH@ 5
------------INS SimpleName@@MethodName:asProperty:[] @TO@ MethodInvocation@@param.asProperty() @AT@ 3240 @LENGTH@ 12


UPD VariableDeclarationStatement@@OperationResult handlerResult=null; @TO@ OperationResult handlerResult=new BasicOperationResult(); @AT@ 11187 @LENGTH@ 37
---UPD VariableDeclarationFragment@@handlerResult=null @TO@ handlerResult=new BasicOperationResult() @AT@ 11203 @LENGTH@ 20
------INS ClassInstanceCreation@@BasicOperationResult[] @TO@ VariableDeclarationFragment@@handlerResult=null @AT@ 11219 @LENGTH@ 26
---------INS New@@new @TO@ ClassInstanceCreation@@BasicOperationResult[] @AT@ 11219 @LENGTH@ 3
---------INS SimpleType@@BasicOperationResult @TO@ ClassInstanceCreation@@BasicOperationResult[] @AT@ 11223 @LENGTH@ 20
------DEL NullLiteral@@null @AT@ 11219 @LENGTH@ 4


UPD ReturnStatement@@InfixExpression:"http://www.gowalla.com/users/" + providerAccountId @TO@ InfixExpression:"https://github.com/" + providerAccountId @AT@ 1802 @LENGTH@ 59
---UPD InfixExpression@@"http://www.gowalla.com/users/" + providerAccountId @TO@ "https://github.com/" + providerAccountId @AT@ 1809 @LENGTH@ 51
------UPD StringLiteral@@"http://www.gowalla.com/users/" @TO@ "https://github.com/" @AT@ 1809 @LENGTH@ 31


UPD EnhancedForStatement@@for (ModelNode dataSourceNode : node.get(DATASOURCES).asList()) {  boolean isXADataSource=hasAnyOf(dataSourceNode,XA_RESOURCE_TIMEOUT,XADATASOURCECLASS,XADATASOURCEPROPERTIES);  writer.writeStartElement(isXADataSource ? DataSources.Tag.XA_DATASOURCE.getLocalName() : DataSources.Tag.DATASOURCE.getLocalName());  writeAttributeIfHas(writer,dataSourceNode,DataSource.Attribute.JNDINAME,JNDINAME);  writeAttributeIfHas(writer,dataSourceNode,DataSource.Attribute.POOL_NAME,POOLNAME);  writeAttributeIfHas(writer,dataSourceNode,DataSource.Attribute.ENABLED,ENABLED);  writeAttributeIfHas(writer,dataSourceNode,DataSource.Attribute.USEJAVACONTEXT,USE_JAVA_CONTEXT);  writeAttributeIfHas(writer,dataSourceNode,DataSource.Attribute.SPY,SPY);  if (!isXADataSource) {    writeElementIfHas(writer,dataSourceNode,DataSource.Tag.CONNECTIONURL,CONNECTION_URL);    writeElementIfHas(writer,dataSourceNode,DataSource.Tag.DRIVERCLASS,DRIVER_CLASS);  }  if (isXADataSource) {    writeElementIfHas(writer,dataSourceNode,XaDataSource.Tag.XADATASOURCECLASS,XADATASOURCECLASS);  }  writeElementIfHas(writer,dataSourceNode,DataSource.Tag.MODULE,MODULE);  if (!isXADataSource) {  }  if (isXADataSource) {    writeElementIfHas(writer,dataSourceNode,XaDataSource.Tag.URLDELIMITER,URL_DELIMITER);    writeElementIfHas(writer,dataSourceNode,XaDataSource.Tag.URLSELECTORSTRATEGYCLASSNAME,URL_SELECTOR_STRATEGY_CLASS_NAME);  }  writeElementIfHas(writer,dataSourceNode,DataSource.Tag.NEWCONNECTIONSQL,NEW_CONNECTION_SQL);  writeElementIfHas(writer,dataSourceNode,DataSource.Tag.TRANSACTIONISOLATION,TRANSACTION_ISOLOATION);  if (!isXADataSource) {    writeElementIfHas(writer,dataSourceNode,DataSource.Tag.URLDELIMITER,URL_DELIMITER);    writeElementIfHas(writer,dataSourceNode,DataSource.Tag.URLSELECTORSTRATEGYCLASSNAME,URL_SELECTOR_STRATEGY_CLASS_NAME);  }  boolean poolRequired=hasAnyOf(dataSourceNode,MIN_POOL_SIZE,MAX_POOL_SIZE,POOL_PREFILL,POOL_USE_STRICT_MIN);  if (isXADataSource) {    poolRequired=poolRequired || hasAnyOf(dataSourceNode,SAME_RM_OVERRIDE,INTERLIVING,NOTXSEPARATEPOOL,PAD_XID,WRAP_XA_DATASOURCE);  }  if (poolRequired) {    writer.writeStartElement(isXADataSource ? XaDataSource.Tag.XA_POOL.getLocalName() : DataSource.Tag.POOL.getLocalName());    writeElementIfHas(writer,dataSourceNode,CommonPool.Tag.MIN_POOL_SIZE,MIN_POOL_SIZE);    writeElementIfHas(writer,dataSourceNode,CommonPool.Tag.MAXPOOLSIZE,MAX_POOL_SIZE);    writeElementIfHas(writer,dataSourceNode,CommonPool.Tag.PREFILL,POOL_PREFILL);    writeElementIfHas(writer,dataSourceNode,CommonPool.Tag.USE_STRICT_MIN,POOL_USE_STRICT_MIN);    if (isXADataSource) {      writeElementIfHas(writer,dataSourceNode,CommonXaPool.Tag.ISSAMERMOVERRIDEVALUE,SAME_RM_OVERRIDE);      writeEmptyElementIfHasAndTrue(writer,dataSourceNode,CommonXaPool.Tag.ISSAMERMOVERRIDEVALUE,SAME_RM_OVERRIDE);      writeEmptyElementIfHasAndTrue(writer,dataSourceNode,CommonXaPool.Tag.NO_TX_SEPARATE_POOLS,NOTXSEPARATEPOOL);      writeElementIfHas(writer,dataSourceNode,CommonXaPool.Tag.PAD_XID,PAD_XID);      writeElementIfHas(writer,dataSourceNode,CommonXaPool.Tag.WRAP_XA_RESOURCE,WRAP_XA_DATASOURCE);    }    writer.writeEndElement();  }  boolean securityRequired=hasAnyOf(dataSourceNode,USERNAME,PASSWORD);  if (securityRequired) {    writer.writeStartElement(DataSource.Tag.SECURITY.getLocalName());    writeElementIfHas(writer,dataSourceNode,DsSecurity.Tag.USERNAME,USERNAME);    writeElementIfHas(writer,dataSourceNode,DsSecurity.Tag.PASSWORD,PASSWORD);    writeElementIfHas(writer,dataSourceNode,DsSecurity.Tag.SECURITY_DOMAIN,SECURITY_DOMAIN);    writer.writeEndElement();  }  boolean validationRequired=hasAnyOf(dataSourceNode,VALIDCONNECTIONCHECKERCLASSNAME,CHECKVALIDCONNECTIONSQL,VALIDATEONMATCH,BACKGROUNDVALIDATION,BACKGROUNDVALIDATIONMINUTES,USE_FAST_FAIL,STALECONNECTIONCHECKERCLASSNAME,EXCEPTIONSORTERCLASSNAME);  if (validationRequired) {    writer.writeStartElement(DataSource.Tag.VALIDATION.getLocalName());    writeElementIfHas(writer,dataSourceNode,Validation.Tag.VALIDCONNECTIONCHECKER,VALIDCONNECTIONCHECKERCLASSNAME);    writeElementIfHas(writer,dataSourceNode,Validation.Tag.CHECKVALIDCONNECTIONSQL,CHECKVALIDCONNECTIONSQL);    writeElementIfHas(writer,dataSourceNode,Validation.Tag.VALIDATEONMATCH,VALIDATEONMATCH);    writeElementIfHas(writer,dataSourceNode,Validation.Tag.BACKGROUNDVALIDATION,BACKGROUNDVALIDATION);    writeElementIfHas(writer,dataSourceNode,Validation.Tag.BACKGROUNDVALIDATIONMINUTES,BACKGROUNDVALIDATIONMINUTES);    writeElementIfHas(writer,dataSourceNode,Validation.Tag.USEFASTFAIL,USE_FAST_FAIL);    writeElementIfHas(writer,dataSourceNode,Validation.Tag.STALECONNECTIONCHECKER,STALECONNECTIONCHECKERCLASSNAME);    writeElementIfHas(writer,dataSourceNode,Validation.Tag.EXCEPTIONSORTER,EXCEPTIONSORTERCLASSNAME);    writer.writeEndElement();  }  boolean timeoutRequired=hasAnyOf(dataSourceNode,BLOCKING_TIMEOUT_WAIT_MILLIS,IDLETIMEOUTMINUTES,SETTXQUERTTIMEOUT,QUERYTIMEOUT,USETRYLOCK,ALLOCATION_RETRY,ALLOCATION_RETRY_WAIT_MILLIS,XA_RESOURCE_TIMEOUT);  if (timeoutRequired) {    writeElementIfHas(writer,dataSourceNode,TimeOut.Tag.BLOCKINGTIMEOUTMILLIS,BLOCKING_TIMEOUT_WAIT_MILLIS);    writeElementIfHas(writer,dataSourceNode,TimeOut.Tag.IDLETIMEOUTMINUTES,IDLETIMEOUTMINUTES);    writeEmptyElementIfHasAndTrue(writer,dataSourceNode,TimeOut.Tag.SETTXQUERYTIMEOUT,SETTXQUERTTIMEOUT);    writeElementIfHas(writer,dataSourceNode,TimeOut.Tag.QUERYTIMEOUT,QUERYTIMEOUT);    writeElementIfHas(writer,dataSourceNode,TimeOut.Tag.USETRYLOCK,USETRYLOCK);    writeElementIfHas(writer,dataSourceNode,TimeOut.Tag.ALLOCATIONRETRY,ALLOCATION_RETRY);    writeElementIfHas(writer,dataSourceNode,TimeOut.Tag.ALLOCATIONRETRYWAITMILLIS,ALLOCATION_RETRY_WAIT_MILLIS);    writeElementIfHas(writer,dataSourceNode,TimeOut.Tag.XARESOURCETIMEOUT,XA_RESOURCE_TIMEOUT);  }  boolean statementRequired=hasAnyOf(dataSourceNode,TRACKSTATEMENTS,PREPAREDSTATEMENTSCACHESIZE,SHAREPREPAREDSTATEMENTS);  if (statementRequired) {    writer.writeStartElement(DataSource.Tag.STATEMENT.getLocalName());    writeElementIfHas(writer,dataSourceNode,Statement.Tag.TRACKSTATEMENTS,TRACKSTATEMENTS);    writeElementIfHas(writer,dataSourceNode,Statement.Tag.PREPAREDSTATEMENTCACHESIZE,PREPAREDSTATEMENTSCACHESIZE);    writeEmptyElementIfHasAndTrue(writer,dataSourceNode,Statement.Tag.SHAREPREPAREDSTATEMENTS,SHAREPREPAREDSTATEMENTS);    writer.writeEndElement();  }  writer.writeEndElement();} @TO@ for (ModelNode dataSourceNode : node.get(DATASOURCES).asList()) {  boolean isXADataSource=hasAnyOf(dataSourceNode,XA_RESOURCE_TIMEOUT,XADATASOURCECLASS,XADATASOURCEPROPERTIES);  writer.writeStartElement(isXADataSource ? DataSources.Tag.XA_DATASOURCE.getLocalName() : DataSources.Tag.DATASOURCE.getLocalName());  writeAttributeIfHas(writer,dataSourceNode,DataSource.Attribute.JNDINAME,JNDINAME);  writeAttributeIfHas(writer,dataSourceNode,DataSource.Attribute.POOL_NAME,POOLNAME);  writeAttributeIfHas(writer,dataSourceNode,DataSource.Attribute.ENABLED,ENABLED);  writeAttributeIfHas(writer,dataSourceNode,DataSource.Attribute.USEJAVACONTEXT,USE_JAVA_CONTEXT);  writeAttributeIfHas(writer,dataSourceNode,DataSource.Attribute.SPY,SPY);  if (!isXADataSource) {    writeElementIfHas(writer,dataSourceNode,DataSource.Tag.CONNECTIONURL,CONNECTION_URL);    writeElementIfHas(writer,dataSourceNode,DataSource.Tag.DRIVERCLASS,DRIVER_CLASS);  }  if (isXADataSource) {    writeElementIfHas(writer,dataSourceNode,XaDataSource.Tag.XADATASOURCECLASS,XADATASOURCECLASS);  }  writeElementIfHas(writer,dataSourceNode,DataSource.Tag.MODULE,MODULE);  if (!isXADataSource) {  }  if (isXADataSource) {    writeElementIfHas(writer,dataSourceNode,XaDataSource.Tag.URLDELIMITER,URL_DELIMITER);    writeElementIfHas(writer,dataSourceNode,XaDataSource.Tag.URLSELECTORSTRATEGYCLASSNAME,URL_SELECTOR_STRATEGY_CLASS_NAME);  }  writeElementIfHas(writer,dataSourceNode,DataSource.Tag.NEWCONNECTIONSQL,NEW_CONNECTION_SQL);  writeElementIfHas(writer,dataSourceNode,DataSource.Tag.TRANSACTIONISOLATION,TRANSACTION_ISOLOATION);  if (!isXADataSource) {    writeElementIfHas(writer,dataSourceNode,DataSource.Tag.URLDELIMITER,URL_DELIMITER);    writeElementIfHas(writer,dataSourceNode,DataSource.Tag.URLSELECTORSTRATEGYCLASSNAME,URL_SELECTOR_STRATEGY_CLASS_NAME);  }  boolean poolRequired=hasAnyOf(dataSourceNode,MIN_POOL_SIZE,MAX_POOL_SIZE,POOL_PREFILL,POOL_USE_STRICT_MIN);  if (isXADataSource) {    poolRequired=poolRequired || hasAnyOf(dataSourceNode,SAME_RM_OVERRIDE,INTERLIVING,NOTXSEPARATEPOOL,PAD_XID,WRAP_XA_DATASOURCE);  }  if (poolRequired) {    writer.writeStartElement(isXADataSource ? XaDataSource.Tag.XA_POOL.getLocalName() : DataSource.Tag.POOL.getLocalName());    writeElementIfHas(writer,dataSourceNode,CommonPool.Tag.MIN_POOL_SIZE,MIN_POOL_SIZE);    writeElementIfHas(writer,dataSourceNode,CommonPool.Tag.MAXPOOLSIZE,MAX_POOL_SIZE);    writeElementIfHas(writer,dataSourceNode,CommonPool.Tag.PREFILL,POOL_PREFILL);    writeElementIfHas(writer,dataSourceNode,CommonPool.Tag.USE_STRICT_MIN,POOL_USE_STRICT_MIN);    if (isXADataSource) {      writeElementIfHas(writer,dataSourceNode,CommonXaPool.Tag.ISSAMERMOVERRIDEVALUE,SAME_RM_OVERRIDE);      writeEmptyElementIfHasAndTrue(writer,dataSourceNode,CommonXaPool.Tag.ISSAMERMOVERRIDEVALUE,SAME_RM_OVERRIDE);      writeEmptyElementIfHasAndTrue(writer,dataSourceNode,CommonXaPool.Tag.NO_TX_SEPARATE_POOLS,NOTXSEPARATEPOOL);      writeElementIfHas(writer,dataSourceNode,CommonXaPool.Tag.PAD_XID,PAD_XID);      writeElementIfHas(writer,dataSourceNode,CommonXaPool.Tag.WRAP_XA_RESOURCE,WRAP_XA_DATASOURCE);    }    writer.writeEndElement();  }  boolean securityRequired=hasAnyOf(dataSourceNode,USERNAME,PASSWORD);  if (securityRequired) {    writer.writeStartElement(DataSource.Tag.SECURITY.getLocalName());    writeElementIfHas(writer,dataSourceNode,DsSecurity.Tag.USERNAME,USERNAME);    writeElementIfHas(writer,dataSourceNode,DsSecurity.Tag.PASSWORD,PASSWORD);    writeElementIfHas(writer,dataSourceNode,DsSecurity.Tag.SECURITY_DOMAIN,SECURITY_DOMAIN);    writer.writeEndElement();  }  boolean validationRequired=hasAnyOf(dataSourceNode,VALIDCONNECTIONCHECKERCLASSNAME,CHECKVALIDCONNECTIONSQL,VALIDATEONMATCH,BACKGROUNDVALIDATION,BACKGROUNDVALIDATIONMINUTES,USE_FAST_FAIL,STALECONNECTIONCHECKERCLASSNAME,EXCEPTIONSORTERCLASSNAME);  if (validationRequired) {    writer.writeStartElement(DataSource.Tag.VALIDATION.getLocalName());    writeElementIfHas(writer,dataSourceNode,Validation.Tag.VALIDCONNECTIONCHECKER,VALIDCONNECTIONCHECKERCLASSNAME);    writeElementIfHas(writer,dataSourceNode,Validation.Tag.CHECKVALIDCONNECTIONSQL,CHECKVALIDCONNECTIONSQL);    writeElementIfHas(writer,dataSourceNode,Validation.Tag.VALIDATEONMATCH,VALIDATEONMATCH);    writeElementIfHas(writer,dataSourceNode,Validation.Tag.BACKGROUNDVALIDATION,BACKGROUNDVALIDATION);    writeElementIfHas(writer,dataSourceNode,Validation.Tag.BACKGROUNDVALIDATIONMINUTES,BACKGROUNDVALIDATIONMINUTES);    writeElementIfHas(writer,dataSourceNode,Validation.Tag.USEFASTFAIL,USE_FAST_FAIL);    writeElementIfHas(writer,dataSourceNode,Validation.Tag.STALECONNECTIONCHECKER,STALECONNECTIONCHECKERCLASSNAME);    writeElementIfHas(writer,dataSourceNode,Validation.Tag.EXCEPTIONSORTER,EXCEPTIONSORTERCLASSNAME);    writer.writeEndElement();  }  boolean timeoutRequired=hasAnyOf(dataSourceNode,BLOCKING_TIMEOUT_WAIT_MILLIS,IDLETIMEOUTMINUTES,SETTXQUERYTIMEOUT,QUERYTIMEOUT,USETRYLOCK,ALLOCATION_RETRY,ALLOCATION_RETRY_WAIT_MILLIS,XA_RESOURCE_TIMEOUT);  if (timeoutRequired) {    writeElementIfHas(writer,dataSourceNode,TimeOut.Tag.BLOCKINGTIMEOUTMILLIS,BLOCKING_TIMEOUT_WAIT_MILLIS);    writeElementIfHas(writer,dataSourceNode,TimeOut.Tag.IDLETIMEOUTMINUTES,IDLETIMEOUTMINUTES);    writeEmptyElementIfHasAndTrue(writer,dataSourceNode,TimeOut.Tag.SETTXQUERYTIMEOUT,SETTXQUERYTIMEOUT);    writeElementIfHas(writer,dataSourceNode,TimeOut.Tag.QUERYTIMEOUT,QUERYTIMEOUT);    writeElementIfHas(writer,dataSourceNode,TimeOut.Tag.USETRYLOCK,USETRYLOCK);    writeElementIfHas(writer,dataSourceNode,TimeOut.Tag.ALLOCATIONRETRY,ALLOCATION_RETRY);    writeElementIfHas(writer,dataSourceNode,TimeOut.Tag.ALLOCATIONRETRYWAITMILLIS,ALLOCATION_RETRY_WAIT_MILLIS);    writeElementIfHas(writer,dataSourceNode,TimeOut.Tag.XARESOURCETIMEOUT,XA_RESOURCE_TIMEOUT);  }  boolean statementRequired=hasAnyOf(dataSourceNode,TRACKSTATEMENTS,PREPAREDSTATEMENTSCACHESIZE,SHAREPREPAREDSTATEMENTS);  if (statementRequired) {    writer.writeStartElement(DataSource.Tag.STATEMENT.getLocalName());    writeElementIfHas(writer,dataSourceNode,Statement.Tag.TRACKSTATEMENTS,TRACKSTATEMENTS);    writeElementIfHas(writer,dataSourceNode,Statement.Tag.PREPAREDSTATEMENTCACHESIZE,PREPAREDSTATEMENTSCACHESIZE);    writeEmptyElementIfHasAndTrue(writer,dataSourceNode,Statement.Tag.SHAREPREPAREDSTATEMENTS,SHAREPREPAREDSTATEMENTS);    writer.writeEndElement();  }  writer.writeEndElement();} @AT@ 10088 @LENGTH@ 9217
---UPD VariableDeclarationStatement@@boolean timeoutRequired=hasAnyOf(dataSourceNode,BLOCKING_TIMEOUT_WAIT_MILLIS,IDLETIMEOUTMINUTES,SETTXQUERTTIMEOUT,QUERYTIMEOUT,USETRYLOCK,ALLOCATION_RETRY,ALLOCATION_RETRY_WAIT_MILLIS,XA_RESOURCE_TIMEOUT); @TO@ boolean timeoutRequired=hasAnyOf(dataSourceNode,BLOCKING_TIMEOUT_WAIT_MILLIS,IDLETIMEOUTMINUTES,SETTXQUERYTIMEOUT,QUERYTIMEOUT,USETRYLOCK,ALLOCATION_RETRY,ALLOCATION_RETRY_WAIT_MILLIS,XA_RESOURCE_TIMEOUT); @AT@ 17039 @LENGTH@ 271
------UPD VariableDeclarationFragment@@timeoutRequired=hasAnyOf(dataSourceNode,BLOCKING_TIMEOUT_WAIT_MILLIS,IDLETIMEOUTMINUTES,SETTXQUERTTIMEOUT,QUERYTIMEOUT,USETRYLOCK,ALLOCATION_RETRY,ALLOCATION_RETRY_WAIT_MILLIS,XA_RESOURCE_TIMEOUT) @TO@ timeoutRequired=hasAnyOf(dataSourceNode,BLOCKING_TIMEOUT_WAIT_MILLIS,IDLETIMEOUTMINUTES,SETTXQUERYTIMEOUT,QUERYTIMEOUT,USETRYLOCK,ALLOCATION_RETRY,ALLOCATION_RETRY_WAIT_MILLIS,XA_RESOURCE_TIMEOUT) @AT@ 17047 @LENGTH@ 262
---------UPD MethodInvocation@@hasAnyOf(dataSourceNode,BLOCKING_TIMEOUT_WAIT_MILLIS,IDLETIMEOUTMINUTES,SETTXQUERTTIMEOUT,QUERYTIMEOUT,USETRYLOCK,ALLOCATION_RETRY,ALLOCATION_RETRY_WAIT_MILLIS,XA_RESOURCE_TIMEOUT) @TO@ hasAnyOf(dataSourceNode,BLOCKING_TIMEOUT_WAIT_MILLIS,IDLETIMEOUTMINUTES,SETTXQUERYTIMEOUT,QUERYTIMEOUT,USETRYLOCK,ALLOCATION_RETRY,ALLOCATION_RETRY_WAIT_MILLIS,XA_RESOURCE_TIMEOUT) @AT@ 17065 @LENGTH@ 244
------------UPD SimpleName@@MethodName:hasAnyOf:[dataSourceNode, BLOCKING_TIMEOUT_WAIT_MILLIS, IDLETIMEOUTMINUTES, SETTXQUERTTIMEOUT, QUERYTIMEOUT, USETRYLOCK, ALLOCATION_RETRY, ALLOCATION_RETRY_WAIT_MILLIS, XA_RESOURCE_TIMEOUT] @TO@ MethodName:hasAnyOf:[dataSourceNode, BLOCKING_TIMEOUT_WAIT_MILLIS, IDLETIMEOUTMINUTES, SETTXQUERYTIMEOUT, QUERYTIMEOUT, USETRYLOCK, ALLOCATION_RETRY, ALLOCATION_RETRY_WAIT_MILLIS, XA_RESOURCE_TIMEOUT] @AT@ 17065 @LENGTH@ 244
---------------UPD SimpleName@@SETTXQUERTTIMEOUT @TO@ SETTXQUERYTIMEOUT @AT@ 17168 @LENGTH@ 17
---UPD IfStatement@@if (timeoutRequired) {  writeElementIfHas(writer,dataSourceNode,TimeOut.Tag.BLOCKINGTIMEOUTMILLIS,BLOCKING_TIMEOUT_WAIT_MILLIS);  writeElementIfHas(writer,dataSourceNode,TimeOut.Tag.IDLETIMEOUTMINUTES,IDLETIMEOUTMINUTES);  writeEmptyElementIfHasAndTrue(writer,dataSourceNode,TimeOut.Tag.SETTXQUERYTIMEOUT,SETTXQUERTTIMEOUT);  writeElementIfHas(writer,dataSourceNode,TimeOut.Tag.QUERYTIMEOUT,QUERYTIMEOUT);  writeElementIfHas(writer,dataSourceNode,TimeOut.Tag.USETRYLOCK,USETRYLOCK);  writeElementIfHas(writer,dataSourceNode,TimeOut.Tag.ALLOCATIONRETRY,ALLOCATION_RETRY);  writeElementIfHas(writer,dataSourceNode,TimeOut.Tag.ALLOCATIONRETRYWAITMILLIS,ALLOCATION_RETRY_WAIT_MILLIS);  writeElementIfHas(writer,dataSourceNode,TimeOut.Tag.XARESOURCETIMEOUT,XA_RESOURCE_TIMEOUT);} @TO@ if (timeoutRequired) {  writeElementIfHas(writer,dataSourceNode,TimeOut.Tag.BLOCKINGTIMEOUTMILLIS,BLOCKING_TIMEOUT_WAIT_MILLIS);  writeElementIfHas(writer,dataSourceNode,TimeOut.Tag.IDLETIMEOUTMINUTES,IDLETIMEOUTMINUTES);  writeEmptyElementIfHasAndTrue(writer,dataSourceNode,TimeOut.Tag.SETTXQUERYTIMEOUT,SETTXQUERYTIMEOUT);  writeElementIfHas(writer,dataSourceNode,TimeOut.Tag.QUERYTIMEOUT,QUERYTIMEOUT);  writeElementIfHas(writer,dataSourceNode,TimeOut.Tag.USETRYLOCK,USETRYLOCK);  writeElementIfHas(writer,dataSourceNode,TimeOut.Tag.ALLOCATIONRETRY,ALLOCATION_RETRY);  writeElementIfHas(writer,dataSourceNode,TimeOut.Tag.ALLOCATIONRETRYWAITMILLIS,ALLOCATION_RETRY_WAIT_MILLIS);  writeElementIfHas(writer,dataSourceNode,TimeOut.Tag.XARESOURCETIMEOUT,XA_RESOURCE_TIMEOUT);} @AT@ 17331 @LENGTH@ 1067
------UPD Block@@ThenBody:{  writeElementIfHas(writer,dataSourceNode,TimeOut.Tag.BLOCKINGTIMEOUTMILLIS,BLOCKING_TIMEOUT_WAIT_MILLIS);  writeElementIfHas(writer,dataSourceNode,TimeOut.Tag.IDLETIMEOUTMINUTES,IDLETIMEOUTMINUTES);  writeEmptyElementIfHasAndTrue(writer,dataSourceNode,TimeOut.Tag.SETTXQUERYTIMEOUT,SETTXQUERTTIMEOUT);  writeElementIfHas(writer,dataSourceNode,TimeOut.Tag.QUERYTIMEOUT,QUERYTIMEOUT);  writeElementIfHas(writer,dataSourceNode,TimeOut.Tag.USETRYLOCK,USETRYLOCK);  writeElementIfHas(writer,dataSourceNode,TimeOut.Tag.ALLOCATIONRETRY,ALLOCATION_RETRY);  writeElementIfHas(writer,dataSourceNode,TimeOut.Tag.ALLOCATIONRETRYWAITMILLIS,ALLOCATION_RETRY_WAIT_MILLIS);  writeElementIfHas(writer,dataSourceNode,TimeOut.Tag.XARESOURCETIMEOUT,XA_RESOURCE_TIMEOUT);} @TO@ ThenBody:{  writeElementIfHas(writer,dataSourceNode,TimeOut.Tag.BLOCKINGTIMEOUTMILLIS,BLOCKING_TIMEOUT_WAIT_MILLIS);  writeElementIfHas(writer,dataSourceNode,TimeOut.Tag.IDLETIMEOUTMINUTES,IDLETIMEOUTMINUTES);  writeEmptyElementIfHasAndTrue(writer,dataSourceNode,TimeOut.Tag.SETTXQUERYTIMEOUT,SETTXQUERYTIMEOUT);  writeElementIfHas(writer,dataSourceNode,TimeOut.Tag.QUERYTIMEOUT,QUERYTIMEOUT);  writeElementIfHas(writer,dataSourceNode,TimeOut.Tag.USETRYLOCK,USETRYLOCK);  writeElementIfHas(writer,dataSourceNode,TimeOut.Tag.ALLOCATIONRETRY,ALLOCATION_RETRY);  writeElementIfHas(writer,dataSourceNode,TimeOut.Tag.ALLOCATIONRETRYWAITMILLIS,ALLOCATION_RETRY_WAIT_MILLIS);  writeElementIfHas(writer,dataSourceNode,TimeOut.Tag.XARESOURCETIMEOUT,XA_RESOURCE_TIMEOUT);} @AT@ 17352 @LENGTH@ 1046
---------UPD ExpressionStatement@@MethodInvocation:writeEmptyElementIfHasAndTrue(writer,dataSourceNode,TimeOut.Tag.SETTXQUERYTIMEOUT,SETTXQUERTTIMEOUT) @TO@ MethodInvocation:writeEmptyElementIfHasAndTrue(writer,dataSourceNode,TimeOut.Tag.SETTXQUERYTIMEOUT,SETTXQUERYTIMEOUT) @AT@ 17661 @LENGTH@ 104
------------UPD MethodInvocation@@writeEmptyElementIfHasAndTrue(writer,dataSourceNode,TimeOut.Tag.SETTXQUERYTIMEOUT,SETTXQUERTTIMEOUT) @TO@ writeEmptyElementIfHasAndTrue(writer,dataSourceNode,TimeOut.Tag.SETTXQUERYTIMEOUT,SETTXQUERYTIMEOUT) @AT@ 17661 @LENGTH@ 103
---------------UPD SimpleName@@MethodName:writeEmptyElementIfHasAndTrue:[writer, dataSourceNode, TimeOut.Tag.SETTXQUERYTIMEOUT, SETTXQUERTTIMEOUT] @TO@ MethodName:writeEmptyElementIfHasAndTrue:[writer, dataSourceNode, TimeOut.Tag.SETTXQUERYTIMEOUT, SETTXQUERYTIMEOUT] @AT@ 17661 @LENGTH@ 103
------------------UPD SimpleName@@SETTXQUERTTIMEOUT @TO@ SETTXQUERYTIMEOUT @AT@ 17746 @LENGTH@ 17


UPD ExpressionStatement@@MethodInvocation:buffer.append("Body:'" + this.getBodyContentAsString() + "';") @TO@ MethodInvocation:buffer.append("Body:'" + this.getBodyContentAsString() + "'") @AT@ 1820 @LENGTH@ 63
---UPD MethodInvocation@@buffer.append("Body:'" + this.getBodyContentAsString() + "';") @TO@ buffer.append("Body:'" + this.getBodyContentAsString() + "'") @AT@ 1820 @LENGTH@ 62
------UPD SimpleName@@MethodName:append:["Body:'" + this.getBodyContentAsString() + "';"] @TO@ MethodName:append:["Body:'" + this.getBodyContentAsString() + "'"] @AT@ 1827 @LENGTH@ 55
---------UPD InfixExpression@@"Body:'" + this.getBodyContentAsString() + "';" @TO@ "Body:'" + this.getBodyContentAsString() + "'" @AT@ 1834 @LENGTH@ 47
------------UPD StringLiteral@@"';" @TO@ "'" @AT@ 1877 @LENGTH@ 4


UPD ExpressionStatement@@MethodInvocation:deployers.get(Phase.INSTALL).add(new RegisteredProcessor(Phase.INSTALL_REFLECTION_INDEX,new InstallReflectionIndexProcessor())) @TO@ MethodInvocation:deployers.get(Phase.POST_MODULE).add(new RegisteredProcessor(Phase.POST_MODULE_REFLECTION_INDEX,new InstallReflectionIndexProcessor())) @AT@ 13700 @LENGTH@ 129
---UPD MethodInvocation@@deployers.get(Phase.INSTALL).add(new RegisteredProcessor(Phase.INSTALL_REFLECTION_INDEX,new InstallReflectionIndexProcessor())) @TO@ deployers.get(Phase.POST_MODULE).add(new RegisteredProcessor(Phase.POST_MODULE_REFLECTION_INDEX,new InstallReflectionIndexProcessor())) @AT@ 13700 @LENGTH@ 128
------UPD MethodInvocation@@MethodName:get:[Phase.INSTALL] @TO@ MethodName:get:[Phase.POST_MODULE] @AT@ 13700 @LENGTH@ 28
---------UPD QualifiedName@@Phase.INSTALL @TO@ Phase.POST_MODULE @AT@ 13714 @LENGTH@ 13
------------UPD SimpleName@@INSTALL @TO@ POST_MODULE @AT@ 13720 @LENGTH@ 7
------UPD SimpleName@@MethodName:add:[new RegisteredProcessor(Phase.INSTALL_REFLECTION_INDEX,new InstallReflectionIndexProcessor())] @TO@ MethodName:add:[new RegisteredProcessor(Phase.POST_MODULE_REFLECTION_INDEX,new InstallReflectionIndexProcessor())] @AT@ 13729 @LENGTH@ 99
---------UPD ClassInstanceCreation@@RegisteredProcessor[Phase.INSTALL_REFLECTION_INDEX, new InstallReflectionIndexProcessor()] @TO@ RegisteredProcessor[Phase.POST_MODULE_REFLECTION_INDEX, new InstallReflectionIndexProcessor()] @AT@ 13733 @LENGTH@ 94
------------UPD QualifiedName@@Phase.INSTALL_REFLECTION_INDEX @TO@ Phase.POST_MODULE_REFLECTION_INDEX @AT@ 13757 @LENGTH@ 30
---------------UPD SimpleName@@INSTALL_REFLECTION_INDEX @TO@ POST_MODULE_REFLECTION_INDEX @AT@ 13763 @LENGTH@ 24


INS FieldDeclaration@@ApplicationContext, [applicationContext] @TO@ TypeDeclaration@@[@RunWith(SpringJUnit4ClassRunner.class), @ContextConfiguration("classpath:mapping.xml"), public]MappingMetadataTests,  @AT@ 1378 @LENGTH@ 38
---INS SimpleType@@ApplicationContext @TO@ FieldDeclaration@@ApplicationContext, [applicationContext] @AT@ 1378 @LENGTH@ 18
---INS VariableDeclarationFragment@@applicationContext @TO@ FieldDeclaration@@ApplicationContext, [applicationContext] @AT@ 1397 @LENGTH@ 18
------INS SimpleName@@applicationContext @TO@ VariableDeclarationFragment@@applicationContext @AT@ 1397 @LENGTH@ 18


UPD MethodDeclaration@@public, void, MethodName:handle, ParsingContext ctx, OperationFormatException,  @TO@ public, void, MethodName:handle, ParsingContext ctx, CommandFormatException,  @AT@ 707 @LENGTH@ 182
---UPD SimpleType@@OperationFormatException @TO@ CommandFormatException @AT@ 773 @LENGTH@ 24


UPD ExpressionStatement@@MethodInvocation:redeploy(context,name,runtimeName,resultHandler,contents) @TO@ MethodInvocation:redeploy(context,runtimeName,name,resultHandler,contents) @AT@ 3313 @LENGTH@ 62
---UPD MethodInvocation@@redeploy(context,name,runtimeName,resultHandler,contents) @TO@ redeploy(context,runtimeName,name,resultHandler,contents) @AT@ 3313 @LENGTH@ 61
------UPD SimpleName@@MethodName:redeploy:[context, name, runtimeName, resultHandler, contents] @TO@ MethodName:redeploy:[context, runtimeName, name, resultHandler, contents] @AT@ 3313 @LENGTH@ 61
---------UPD SimpleName@@name @TO@ runtimeName @AT@ 3331 @LENGTH@ 4
---------UPD SimpleName@@runtimeName @TO@ name @AT@ 3337 @LENGTH@ 11


UPD IfStatement@@if (arrayContains(new char[]{'E','I','A','U','O','Y'},chr)) {  code='0';} else if (chr == 'H' || chr < 'A' || chr > 'Z') {  if (lastCode == '/') {    continue;  }  code='-';} else if (chr == 'B' || (chr == 'P' && nextChar != 'H')) {  code='1';} else if ((chr == 'D' || chr == 'T') && !arrayContains(new char[]{'S','C','Z'},nextChar)) {  code='2';} else if (arrayContains(new char[]{'W','F','P','V'},chr)) {  code='3';} else if (arrayContains(new char[]{'G','K','Q'},chr)) {  code='4';} else if (chr == 'X' && !arrayContains(new char[]{'C','K','Q'},lastChar)) {  code='4';  right.addLeft('S');  rightLength++;} else if (chr == 'S' || chr == 'Z') {  code='8';} else if (chr == 'C') {  if (lastCode == '/') {    if (arrayContains(new char[]{'A','H','L','O','R','U','K','X','Q'},nextChar)) {      code='4';    } else {      code='8';    }  } else {    if (arrayContains(new char[]{'S','Z'},lastChar) || !arrayContains(new char[]{'A','H','O','U','K','Q','X'},nextChar)) {      code='8';    } else {      code='4';    }  }} else if (arrayContains(new char[]{'T','D','X'},chr)) {  code='8';} else if (chr == 'R') {  code='7';} else if (chr == 'L') {  code='5';} else if (chr == 'M' || chr == 'N') {  code='6';} else {  code=chr;} @TO@ if (arrayContains(new char[]{'A','E','I','J','O','U','Y'},chr)) {  code='0';} else if (chr == 'H' || chr < 'A' || chr > 'Z') {  if (lastCode == '/') {    continue;  }  code='-';} else if (chr == 'B' || (chr == 'P' && nextChar != 'H')) {  code='1';} else if ((chr == 'D' || chr == 'T') && !arrayContains(new char[]{'S','C','Z'},nextChar)) {  code='2';} else if (arrayContains(new char[]{'W','F','P','V'},chr)) {  code='3';} else if (arrayContains(new char[]{'G','K','Q'},chr)) {  code='4';} else if (chr == 'X' && !arrayContains(new char[]{'C','K','Q'},lastChar)) {  code='4';  right.addLeft('S');  rightLength++;} else if (chr == 'S' || chr == 'Z') {  code='8';} else if (chr == 'C') {  if (lastCode == '/') {    if (arrayContains(new char[]{'A','H','L','O','R','U','K','X','Q'},nextChar)) {      code='4';    } else {      code='8';    }  } else {    if (arrayContains(new char[]{'S','Z'},lastChar) || !arrayContains(new char[]{'A','H','O','U','K','Q','X'},nextChar)) {      code='8';    } else {      code='4';    }  }} else if (arrayContains(new char[]{'T','D','X'},chr)) {  code='8';} else if (chr == 'R') {  code='7';} else if (chr == 'L') {  code='5';} else if (chr == 'M' || chr == 'N') {  code='6';} else {  code=chr;} @AT@ 7978 @LENGTH@ 2029
---UPD MethodInvocation@@arrayContains(new char[]{'E','I','A','U','O','Y'},chr) @TO@ arrayContains(new char[]{'A','E','I','J','O','U','Y'},chr) @AT@ 7982 @LENGTH@ 63
------UPD SimpleName@@MethodName:arrayContains:[new char[]{'E','I','A','U','O','Y'}, chr] @TO@ MethodName:arrayContains:[new char[]{'A','E','I','J','O','U','Y'}, chr] @AT@ 7982 @LENGTH@ 63
---------UPD ArrayCreation@@new char[]{'E','I','A','U','O','Y'} @TO@ new char[]{'A','E','I','J','O','U','Y'} @AT@ 7996 @LENGTH@ 43
------------UPD ArrayInitializer@@{'E','I','A','U','O','Y'} @TO@ {'A','E','I','J','O','U','Y'} @AT@ 8007 @LENGTH@ 32
---------------INS CharacterLiteral@@'A' @TO@ ArrayInitializer@@{'E','I','A','U','O','Y'} @AT@ 8009 @LENGTH@ 3
---------------UPD CharacterLiteral@@'A' @TO@ 'J' @AT@ 8019 @LENGTH@ 3
---------------UPD CharacterLiteral@@'U' @TO@ 'O' @AT@ 8024 @LENGTH@ 3
---------------UPD CharacterLiteral@@'O' @TO@ 'U' @AT@ 8029 @LENGTH@ 3


UPD IfStatement@@if (results.argValue != null) {  if (results.argValue.isEmpty()) {    chunk=null;    result=results.valueStart;    if (results.argName != null) {      ctx.setArgumentsString(buffer.substring(0,results.nameStart));      for (      CommandArgument arg : allArgs) {        if (results.argName.equals(arg.getDefaultName())) {          valueCompleter=arg.getValueCompleter();          break;        }      }    } else {      ctx.setArgumentsString(buffer.substring(0,results.valueStart));      for (      CommandArgument arg : allArgs) {        if (arg.getIndex() >= 0 && arg.canAppearNext(ctx)) {          valueCompleter=arg.getValueCompleter();          break;        }      }    }    if (valueCompleter == null) {      return -1;    }  } else {    if (results.endIndex < buffer.length() && Character.isWhitespace(buffer.charAt(results.endIndex))) {      chunk=null;    } else {      chunk=results.argValue;      result=results.valueStart;      if (results.argName != null) {        ctx.setArgumentsString(buffer.substring(0,results.nameStart));        for (        CommandArgument arg : allArgs) {          if (results.argName.equals(arg.getDefaultName())) {            valueCompleter=arg.getValueCompleter();            break;          }        }      } else {        ctx.setArgumentsString(buffer.substring(0,results.valueStart));        for (        CommandArgument arg : allArgs) {          if (arg.getIndex() >= 0 && arg.canAppearNext(ctx)) {            valueCompleter=arg.getValueCompleter();            break;          }        }      }      if (valueCompleter == null) {        return -1;      }    }  }} else {  if (results.endIndex < buffer.length() && Character.isWhitespace(buffer.charAt(results.endIndex))) {    chunk=null;  } else {    chunk=results.argName;    if (results.argName != null) {      result=results.nameStart;    }  }} @TO@ if (results.argValue != null) {  if (results.argValue.isEmpty()) {    chunk=null;    result=results.valueStart;    if (results.argName != null) {      ctx.setArgumentsString(buffer.substring(0,results.nameStart));      for (      CommandArgument arg : allArgs) {        if (results.argName.equals(arg.getDefaultName())) {          valueCompleter=arg.getValueCompleter();          break;        }      }    } else {      ctx.setArgumentsString(buffer.substring(0,results.valueStart));      for (      CommandArgument arg : allArgs) {        if (arg.getIndex() >= 0 && arg.canAppearNext(ctx)) {          valueCompleter=arg.getValueCompleter();          break;        }      }    }    if (valueCompleter == null) {      return -1;    }  } else {    if (results.endIndex < buffer.length()) {      chunk=null;    } else {      chunk=results.argValue;      result=results.valueStart;      if (results.argName != null) {        ctx.setArgumentsString(buffer.substring(0,results.nameStart));        for (        CommandArgument arg : allArgs) {          if (results.argName.equals(arg.getDefaultName())) {            valueCompleter=arg.getValueCompleter();            break;          }        }      } else {        ctx.setArgumentsString(buffer.substring(0,results.valueStart));        for (        CommandArgument arg : allArgs) {          if (arg.getIndex() >= 0 && arg.canAppearNext(ctx)) {            valueCompleter=arg.getValueCompleter();            break;          }        }      }      if (valueCompleter == null) {        return -1;      }    }  }} else {  if (results.endIndex < buffer.length()) {    chunk=null;  } else {    chunk=results.argName;    if (results.argName != null) {      result=results.nameStart;    }  }} @AT@ 3060 @LENGTH@ 3009
---UPD Block@@ThenBody:{  if (results.argValue.isEmpty()) {    chunk=null;    result=results.valueStart;    if (results.argName != null) {      ctx.setArgumentsString(buffer.substring(0,results.nameStart));      for (      CommandArgument arg : allArgs) {        if (results.argName.equals(arg.getDefaultName())) {          valueCompleter=arg.getValueCompleter();          break;        }      }    } else {      ctx.setArgumentsString(buffer.substring(0,results.valueStart));      for (      CommandArgument arg : allArgs) {        if (arg.getIndex() >= 0 && arg.canAppearNext(ctx)) {          valueCompleter=arg.getValueCompleter();          break;        }      }    }    if (valueCompleter == null) {      return -1;    }  } else {    if (results.endIndex < buffer.length() && Character.isWhitespace(buffer.charAt(results.endIndex))) {      chunk=null;    } else {      chunk=results.argValue;      result=results.valueStart;      if (results.argName != null) {        ctx.setArgumentsString(buffer.substring(0,results.nameStart));        for (        CommandArgument arg : allArgs) {          if (results.argName.equals(arg.getDefaultName())) {            valueCompleter=arg.getValueCompleter();            break;          }        }      } else {        ctx.setArgumentsString(buffer.substring(0,results.valueStart));        for (        CommandArgument arg : allArgs) {          if (arg.getIndex() >= 0 && arg.canAppearNext(ctx)) {            valueCompleter=arg.getValueCompleter();            break;          }        }      }      if (valueCompleter == null) {        return -1;      }    }  }} @TO@ ThenBody:{  if (results.argValue.isEmpty()) {    chunk=null;    result=results.valueStart;    if (results.argName != null) {      ctx.setArgumentsString(buffer.substring(0,results.nameStart));      for (      CommandArgument arg : allArgs) {        if (results.argName.equals(arg.getDefaultName())) {          valueCompleter=arg.getValueCompleter();          break;        }      }    } else {      ctx.setArgumentsString(buffer.substring(0,results.valueStart));      for (      CommandArgument arg : allArgs) {        if (arg.getIndex() >= 0 && arg.canAppearNext(ctx)) {          valueCompleter=arg.getValueCompleter();          break;        }      }    }    if (valueCompleter == null) {      return -1;    }  } else {    if (results.endIndex < buffer.length()) {      chunk=null;    } else {      chunk=results.argValue;      result=results.valueStart;      if (results.argName != null) {        ctx.setArgumentsString(buffer.substring(0,results.nameStart));        for (        CommandArgument arg : allArgs) {          if (results.argName.equals(arg.getDefaultName())) {            valueCompleter=arg.getValueCompleter();            break;          }        }      } else {        ctx.setArgumentsString(buffer.substring(0,results.valueStart));        for (        CommandArgument arg : allArgs) {          if (arg.getIndex() >= 0 && arg.canAppearNext(ctx)) {            valueCompleter=arg.getValueCompleter();            break;          }        }      }      if (valueCompleter == null) {        return -1;      }    }  }} @AT@ 3089 @LENGTH@ 2596
------UPD IfStatement@@if (results.argValue.isEmpty()) {  chunk=null;  result=results.valueStart;  if (results.argName != null) {    ctx.setArgumentsString(buffer.substring(0,results.nameStart));    for (    CommandArgument arg : allArgs) {      if (results.argName.equals(arg.getDefaultName())) {        valueCompleter=arg.getValueCompleter();        break;      }    }  } else {    ctx.setArgumentsString(buffer.substring(0,results.valueStart));    for (    CommandArgument arg : allArgs) {      if (arg.getIndex() >= 0 && arg.canAppearNext(ctx)) {        valueCompleter=arg.getValueCompleter();        break;      }    }  }  if (valueCompleter == null) {    return -1;  }} else {  if (results.endIndex < buffer.length() && Character.isWhitespace(buffer.charAt(results.endIndex))) {    chunk=null;  } else {    chunk=results.argValue;    result=results.valueStart;    if (results.argName != null) {      ctx.setArgumentsString(buffer.substring(0,results.nameStart));      for (      CommandArgument arg : allArgs) {        if (results.argName.equals(arg.getDefaultName())) {          valueCompleter=arg.getValueCompleter();          break;        }      }    } else {      ctx.setArgumentsString(buffer.substring(0,results.valueStart));      for (      CommandArgument arg : allArgs) {        if (arg.getIndex() >= 0 && arg.canAppearNext(ctx)) {          valueCompleter=arg.getValueCompleter();          break;        }      }    }    if (valueCompleter == null) {      return -1;    }  }} @TO@ if (results.argValue.isEmpty()) {  chunk=null;  result=results.valueStart;  if (results.argName != null) {    ctx.setArgumentsString(buffer.substring(0,results.nameStart));    for (    CommandArgument arg : allArgs) {      if (results.argName.equals(arg.getDefaultName())) {        valueCompleter=arg.getValueCompleter();        break;      }    }  } else {    ctx.setArgumentsString(buffer.substring(0,results.valueStart));    for (    CommandArgument arg : allArgs) {      if (arg.getIndex() >= 0 && arg.canAppearNext(ctx)) {        valueCompleter=arg.getValueCompleter();        break;      }    }  }  if (valueCompleter == null) {    return -1;  }} else {  if (results.endIndex < buffer.length()) {    chunk=null;  } else {    chunk=results.argValue;    result=results.valueStart;    if (results.argName != null) {      ctx.setArgumentsString(buffer.substring(0,results.nameStart));      for (      CommandArgument arg : allArgs) {        if (results.argName.equals(arg.getDefaultName())) {          valueCompleter=arg.getValueCompleter();          break;        }      }    } else {      ctx.setArgumentsString(buffer.substring(0,results.valueStart));      for (      CommandArgument arg : allArgs) {        if (arg.getIndex() >= 0 && arg.canAppearNext(ctx)) {          valueCompleter=arg.getValueCompleter();          break;        }      }    }    if (valueCompleter == null) {      return -1;    }  }} @AT@ 3107 @LENGTH@ 2564
---------UPD Block@@ElseBody:{  if (results.endIndex < buffer.length() && Character.isWhitespace(buffer.charAt(results.endIndex))) {    chunk=null;  } else {    chunk=results.argValue;    result=results.valueStart;    if (results.argName != null) {      ctx.setArgumentsString(buffer.substring(0,results.nameStart));      for (      CommandArgument arg : allArgs) {        if (results.argName.equals(arg.getDefaultName())) {          valueCompleter=arg.getValueCompleter();          break;        }      }    } else {      ctx.setArgumentsString(buffer.substring(0,results.valueStart));      for (      CommandArgument arg : allArgs) {        if (arg.getIndex() >= 0 && arg.canAppearNext(ctx)) {          valueCompleter=arg.getValueCompleter();          break;        }      }    }    if (valueCompleter == null) {      return -1;    }  }} @TO@ ElseBody:{  if (results.endIndex < buffer.length()) {    chunk=null;  } else {    chunk=results.argValue;    result=results.valueStart;    if (results.argName != null) {      ctx.setArgumentsString(buffer.substring(0,results.nameStart));      for (      CommandArgument arg : allArgs) {        if (results.argName.equals(arg.getDefaultName())) {          valueCompleter=arg.getValueCompleter();          break;        }      }    } else {      ctx.setArgumentsString(buffer.substring(0,results.valueStart));      for (      CommandArgument arg : allArgs) {        if (arg.getIndex() >= 0 && arg.canAppearNext(ctx)) {          valueCompleter=arg.getValueCompleter();          break;        }      }    }    if (valueCompleter == null) {      return -1;    }  }} @AT@ 4253 @LENGTH@ 1418
------------UPD IfStatement@@if (results.endIndex < buffer.length() && Character.isWhitespace(buffer.charAt(results.endIndex))) {  chunk=null;} else {  chunk=results.argValue;  result=results.valueStart;  if (results.argName != null) {    ctx.setArgumentsString(buffer.substring(0,results.nameStart));    for (    CommandArgument arg : allArgs) {      if (results.argName.equals(arg.getDefaultName())) {        valueCompleter=arg.getValueCompleter();        break;      }    }  } else {    ctx.setArgumentsString(buffer.substring(0,results.valueStart));    for (    CommandArgument arg : allArgs) {      if (arg.getIndex() >= 0 && arg.canAppearNext(ctx)) {        valueCompleter=arg.getValueCompleter();        break;      }    }  }  if (valueCompleter == null) {    return -1;  }} @TO@ if (results.endIndex < buffer.length()) {  chunk=null;} else {  chunk=results.argValue;  result=results.valueStart;  if (results.argName != null) {    ctx.setArgumentsString(buffer.substring(0,results.nameStart));    for (    CommandArgument arg : allArgs) {      if (results.argName.equals(arg.getDefaultName())) {        valueCompleter=arg.getValueCompleter();        break;      }    }  } else {    ctx.setArgumentsString(buffer.substring(0,results.valueStart));    for (    CommandArgument arg : allArgs) {      if (arg.getIndex() >= 0 && arg.canAppearNext(ctx)) {        valueCompleter=arg.getValueCompleter();        break;      }    }  }  if (valueCompleter == null) {    return -1;  }} @AT@ 4275 @LENGTH@ 1378
---------------DEL InfixExpression@@results.endIndex < buffer.length() && Character.isWhitespace(buffer.charAt(results.endIndex)) @AT@ 4278 @LENGTH@ 93
------------------DEL Operator@@&& @AT@ 4312 @LENGTH@ 2
------------------DEL MethodInvocation@@Character.isWhitespace(buffer.charAt(results.endIndex)) @AT@ 4316 @LENGTH@ 55
---------------------DEL SimpleName@@Name:Character @AT@ 4316 @LENGTH@ 9
---------------------DEL SimpleName@@MethodName:isWhitespace:[buffer.charAt(results.endIndex)] @AT@ 4326 @LENGTH@ 45
------------------------DEL MethodInvocation@@buffer.charAt(results.endIndex) @AT@ 4339 @LENGTH@ 31
---------------------------DEL SimpleName@@Name:buffer @AT@ 4339 @LENGTH@ 6
---------------------------DEL SimpleName@@MethodName:charAt:[results.endIndex] @AT@ 4346 @LENGTH@ 24
------------------------------DEL QualifiedName@@results.endIndex @AT@ 4353 @LENGTH@ 16
---------------------------------DEL SimpleName@@results @AT@ 4353 @LENGTH@ 7
---------------------------------DEL SimpleName@@endIndex @AT@ 4361 @LENGTH@ 8
---------------MOV InfixExpression@@results.endIndex < buffer.length() @TO@ IfStatement@@if (results.endIndex < buffer.length() && Character.isWhitespace(buffer.charAt(results.endIndex))) {  chunk=null;} else {  chunk=results.argValue;  result=results.valueStart;  if (results.argName != null) {    ctx.setArgumentsString(buffer.substring(0,results.nameStart));    for (    CommandArgument arg : allArgs) {      if (results.argName.equals(arg.getDefaultName())) {        valueCompleter=arg.getValueCompleter();        break;      }    }  } else {    ctx.setArgumentsString(buffer.substring(0,results.valueStart));    for (    CommandArgument arg : allArgs) {      if (arg.getIndex() >= 0 && arg.canAppearNext(ctx)) {        valueCompleter=arg.getValueCompleter();        break;      }    }  }  if (valueCompleter == null) {    return -1;  }} @AT@ 4278 @LENGTH@ 34
---UPD Block@@ElseBody:{  if (results.endIndex < buffer.length() && Character.isWhitespace(buffer.charAt(results.endIndex))) {    chunk=null;  } else {    chunk=results.argName;    if (results.argName != null) {      result=results.nameStart;    }  }} @TO@ ElseBody:{  if (results.endIndex < buffer.length()) {    chunk=null;  } else {    chunk=results.argName;    if (results.argName != null) {      result=results.nameStart;    }  }} @AT@ 5691 @LENGTH@ 378
------UPD IfStatement@@if (results.endIndex < buffer.length() && Character.isWhitespace(buffer.charAt(results.endIndex))) {  chunk=null;} else {  chunk=results.argName;  if (results.argName != null) {    result=results.nameStart;  }} @TO@ if (results.endIndex < buffer.length()) {  chunk=null;} else {  chunk=results.argName;  if (results.argName != null) {    result=results.nameStart;  }} @AT@ 5709 @LENGTH@ 346
---------DEL InfixExpression@@results.endIndex < buffer.length() && Character.isWhitespace(buffer.charAt(results.endIndex)) @AT@ 5712 @LENGTH@ 93
------------DEL Operator@@&& @AT@ 5746 @LENGTH@ 2
------------DEL MethodInvocation@@Character.isWhitespace(buffer.charAt(results.endIndex)) @AT@ 5750 @LENGTH@ 55
---------------DEL SimpleName@@Name:Character @AT@ 5750 @LENGTH@ 9
---------------DEL SimpleName@@MethodName:isWhitespace:[buffer.charAt(results.endIndex)] @AT@ 5760 @LENGTH@ 45
------------------DEL MethodInvocation@@buffer.charAt(results.endIndex) @AT@ 5773 @LENGTH@ 31
---------------------DEL SimpleName@@Name:buffer @AT@ 5773 @LENGTH@ 6
---------------------DEL SimpleName@@MethodName:charAt:[results.endIndex] @AT@ 5780 @LENGTH@ 24
------------------------DEL QualifiedName@@results.endIndex @AT@ 5787 @LENGTH@ 16
---------------------------DEL SimpleName@@results @AT@ 5787 @LENGTH@ 7
---------------------------DEL SimpleName@@endIndex @AT@ 5795 @LENGTH@ 8
---------MOV InfixExpression@@results.endIndex < buffer.length() @TO@ IfStatement@@if (results.endIndex < buffer.length() && Character.isWhitespace(buffer.charAt(results.endIndex))) {  chunk=null;} else {  chunk=results.argName;  if (results.argName != null) {    result=results.nameStart;  }} @AT@ 5712 @LENGTH@ 34


UPD IfStatement@@if (modelNode.hasDefined(SYSTEM_PROPERTY)) {  writeProperties(writer,modelNode.get(SYSTEM_PROPERTY),Element.SYSTEM_PROPERTIES);} @TO@ if (modelNode.hasDefined(SYSTEM_PROPERTIES)) {  writeProperties(writer,modelNode.get(SYSTEM_PROPERTIES),Element.SYSTEM_PROPERTIES);} @AT@ 5343 @LENGTH@ 150
---UPD MethodInvocation@@modelNode.hasDefined(SYSTEM_PROPERTY) @TO@ modelNode.hasDefined(SYSTEM_PROPERTIES) @AT@ 5347 @LENGTH@ 37
------UPD SimpleName@@MethodName:hasDefined:[SYSTEM_PROPERTY] @TO@ MethodName:hasDefined:[SYSTEM_PROPERTIES] @AT@ 5357 @LENGTH@ 27
---------UPD SimpleName@@SYSTEM_PROPERTY @TO@ SYSTEM_PROPERTIES @AT@ 5368 @LENGTH@ 15
---UPD Block@@ThenBody:{  writeProperties(writer,modelNode.get(SYSTEM_PROPERTY),Element.SYSTEM_PROPERTIES);} @TO@ ThenBody:{  writeProperties(writer,modelNode.get(SYSTEM_PROPERTIES),Element.SYSTEM_PROPERTIES);} @AT@ 5386 @LENGTH@ 107
------UPD ExpressionStatement@@MethodInvocation:writeProperties(writer,modelNode.get(SYSTEM_PROPERTY),Element.SYSTEM_PROPERTIES) @TO@ MethodInvocation:writeProperties(writer,modelNode.get(SYSTEM_PROPERTIES),Element.SYSTEM_PROPERTIES) @AT@ 5400 @LENGTH@ 83
---------UPD MethodInvocation@@writeProperties(writer,modelNode.get(SYSTEM_PROPERTY),Element.SYSTEM_PROPERTIES) @TO@ writeProperties(writer,modelNode.get(SYSTEM_PROPERTIES),Element.SYSTEM_PROPERTIES) @AT@ 5400 @LENGTH@ 82
------------UPD SimpleName@@MethodName:writeProperties:[writer, modelNode.get(SYSTEM_PROPERTY), Element.SYSTEM_PROPERTIES] @TO@ MethodName:writeProperties:[writer, modelNode.get(SYSTEM_PROPERTIES), Element.SYSTEM_PROPERTIES] @AT@ 5400 @LENGTH@ 82
---------------UPD MethodInvocation@@modelNode.get(SYSTEM_PROPERTY) @TO@ modelNode.get(SYSTEM_PROPERTIES) @AT@ 5424 @LENGTH@ 30
------------------UPD SimpleName@@MethodName:get:[SYSTEM_PROPERTY] @TO@ MethodName:get:[SYSTEM_PROPERTIES] @AT@ 5434 @LENGTH@ 20
---------------------UPD SimpleName@@SYSTEM_PROPERTY @TO@ SYSTEM_PROPERTIES @AT@ 5438 @LENGTH@ 15


UPD MethodDeclaration@@public, void, MethodName:setThreadFactory, ThreadFactory threadFactory,  @TO@ public, synchronized, void, MethodName:setThreadFactory, ThreadFactory threadFactory,  @AT@ 2902 @LENGTH@ 109
---INS Modifier@@synchronized @TO@ MethodDeclaration@@public, void, MethodName:setThreadFactory, ThreadFactory threadFactory,  @AT@ 2736 @LENGTH@ 12


DEL MethodDeclaration@@public, void, MethodName:tearDown, Exception,  @AT@ 1440 @LENGTH@ 100
---DEL Modifier@@public @AT@ 1440 @LENGTH@ 6
---DEL PrimitiveType@@void @AT@ 1447 @LENGTH@ 4
---DEL SimpleName@@MethodName:tearDown @AT@ 1452 @LENGTH@ 8
---DEL SimpleType@@Exception @AT@ 1470 @LENGTH@ 9
---DEL ExpressionStatement@@SuperMethodInvocation:super.tearDown() @AT@ 1490 @LENGTH@ 17
------DEL SuperMethodInvocation@@super.tearDown() @AT@ 1490 @LENGTH@ 16
---------DEL SimpleName@@MethodName:tearDown:[] @AT@ 1496 @LENGTH@ 8
---DEL ExpressionStatement@@MethodInvocation:this.map.clear() @AT@ 1517 @LENGTH@ 17
------DEL MethodInvocation@@this.map.clear() @AT@ 1517 @LENGTH@ 16
---------DEL FieldAccess@@this.map @AT@ 1517 @LENGTH@ 8
------------DEL ThisExpression@@this @AT@ 1517 @LENGTH@ 4
------------DEL SimpleName@@map @AT@ 1522 @LENGTH@ 3
---------DEL SimpleName@@MethodName:clear:[] @AT@ 1526 @LENGTH@ 7


UPD Block@@ThenBody:{  return new RedirectView(((OAuth2ConnectionFactory<?>)connectionFactory).getOAuthOperations().buildAuthenticateUrl(GrantType.AUTHORIZATION_CODE,new OAuth2Parameters(callbackUrl(providerId))));} @TO@ ThenBody:{  String scope=request.getParameter("scope");  return new RedirectView(((OAuth2ConnectionFactory<?>)connectionFactory).getOAuthOperations().buildAuthenticateUrl(GrantType.AUTHORIZATION_CODE,new OAuth2Parameters(callbackUrl(providerId),scope)));} @AT@ 6174 @LENGTH@ 202
---UPD ReturnStatement@@ClassInstanceCreation:new RedirectView(((OAuth2ConnectionFactory<?>)connectionFactory).getOAuthOperations().buildAuthenticateUrl(GrantType.AUTHORIZATION_CODE,new OAuth2Parameters(callbackUrl(providerId)))) @TO@ ClassInstanceCreation:new RedirectView(((OAuth2ConnectionFactory<?>)connectionFactory).getOAuthOperations().buildAuthenticateUrl(GrantType.AUTHORIZATION_CODE,new OAuth2Parameters(callbackUrl(providerId),scope))) @AT@ 6179 @LENGTH@ 193
------UPD ClassInstanceCreation@@RedirectView[((OAuth2ConnectionFactory<?>)connectionFactory).getOAuthOperations().buildAuthenticateUrl(GrantType.AUTHORIZATION_CODE,new OAuth2Parameters(callbackUrl(providerId)))] @TO@ RedirectView[((OAuth2ConnectionFactory<?>)connectionFactory).getOAuthOperations().buildAuthenticateUrl(GrantType.AUTHORIZATION_CODE,new OAuth2Parameters(callbackUrl(providerId),scope))] @AT@ 6186 @LENGTH@ 185
---------UPD MethodInvocation@@((OAuth2ConnectionFactory<?>)connectionFactory).getOAuthOperations().buildAuthenticateUrl(GrantType.AUTHORIZATION_CODE,new OAuth2Parameters(callbackUrl(providerId))) @TO@ ((OAuth2ConnectionFactory<?>)connectionFactory).getOAuthOperations().buildAuthenticateUrl(GrantType.AUTHORIZATION_CODE,new OAuth2Parameters(callbackUrl(providerId),scope)) @AT@ 6203 @LENGTH@ 167
------------UPD SimpleName@@MethodName:buildAuthenticateUrl:[GrantType.AUTHORIZATION_CODE, new OAuth2Parameters(callbackUrl(providerId))] @TO@ MethodName:buildAuthenticateUrl:[GrantType.AUTHORIZATION_CODE, new OAuth2Parameters(callbackUrl(providerId),scope)] @AT@ 6273 @LENGTH@ 97
---------------UPD ClassInstanceCreation@@OAuth2Parameters[callbackUrl(providerId)] @TO@ OAuth2Parameters[callbackUrl(providerId), scope] @AT@ 6324 @LENGTH@ 45
------------------INS SimpleName@@scope @TO@ ClassInstanceCreation@@OAuth2Parameters[callbackUrl(providerId)] @AT@ 6419 @LENGTH@ 5
---INS VariableDeclarationStatement@@String scope=request.getParameter("scope"); @TO@ Block@@ThenBody:{  return new RedirectView(((OAuth2ConnectionFactory<?>)connectionFactory).getOAuthOperations().buildAuthenticateUrl(GrantType.AUTHORIZATION_CODE,new OAuth2Parameters(callbackUrl(providerId))));} @AT@ 6179 @LENGTH@ 45
------INS SimpleType@@String @TO@ VariableDeclarationStatement@@String scope=request.getParameter("scope"); @AT@ 6179 @LENGTH@ 6
------INS VariableDeclarationFragment@@scope=request.getParameter("scope") @TO@ VariableDeclarationStatement@@String scope=request.getParameter("scope"); @AT@ 6186 @LENGTH@ 37
---------INS SimpleName@@scope @TO@ VariableDeclarationFragment@@scope=request.getParameter("scope") @AT@ 6186 @LENGTH@ 5
---------INS MethodInvocation@@request.getParameter("scope") @TO@ VariableDeclarationFragment@@scope=request.getParameter("scope") @AT@ 6194 @LENGTH@ 29
------------INS SimpleName@@Name:request @TO@ MethodInvocation@@request.getParameter("scope") @AT@ 6194 @LENGTH@ 7
------------INS SimpleName@@MethodName:getParameter:["scope"] @TO@ MethodInvocation@@request.getParameter("scope") @AT@ 6202 @LENGTH@ 21
---------------INS StringLiteral@@"scope" @TO@ SimpleName@@MethodName:getParameter:["scope"] @AT@ 6215 @LENGTH@ 7


UPD IfStatement@@if (path != null) {  f=new File(path);  if (!f.exists()) {    ctx.printLine("Path " + f.getAbsolutePath() + " doesn't exist.");    return;  }} else {  f=null;} @TO@ if (path != null) {  f=new File(path);  if (!f.exists()) {    ctx.printLine("Path " + f.getAbsolutePath() + " doesn't exist.");    return;  }  if (f.isDirectory()) {    ctx.printLine(f.getAbsolutePath() + " is a directory.");    return;  }} else {  f=null;} @AT@ 8560 @LENGTH@ 249
---UPD Block@@ThenBody:{  f=new File(path);  if (!f.exists()) {    ctx.printLine("Path " + f.getAbsolutePath() + " doesn't exist.");    return;  }} @TO@ ThenBody:{  f=new File(path);  if (!f.exists()) {    ctx.printLine("Path " + f.getAbsolutePath() + " doesn't exist.");    return;  }  if (f.isDirectory()) {    ctx.printLine(f.getAbsolutePath() + " is a directory.");    return;  }} @AT@ 8577 @LENGTH@ 193
------INS IfStatement@@if (f.isDirectory()) {  ctx.printLine(f.getAbsolutePath() + " is a directory.");  return;} @TO@ Block@@ThenBody:{  f=new File(path);  if (!f.exists()) {    ctx.printLine("Path " + f.getAbsolutePath() + " doesn't exist.");    return;  }} @AT@ 8773 @LENGTH@ 132
---------INS MethodInvocation@@f.isDirectory() @TO@ IfStatement@@if (f.isDirectory()) {  ctx.printLine(f.getAbsolutePath() + " is a directory.");  return;} @AT@ 8776 @LENGTH@ 15
------------INS SimpleName@@Name:f @TO@ MethodInvocation@@f.isDirectory() @AT@ 8776 @LENGTH@ 1
------------INS SimpleName@@MethodName:isDirectory:[] @TO@ MethodInvocation@@f.isDirectory() @AT@ 8778 @LENGTH@ 13
---------INS Block@@ThenBody:{  ctx.printLine(f.getAbsolutePath() + " is a directory.");  return;} @TO@ IfStatement@@if (f.isDirectory()) {  ctx.printLine(f.getAbsolutePath() + " is a directory.");  return;} @AT@ 8793 @LENGTH@ 112
------------INS ExpressionStatement@@MethodInvocation:ctx.printLine(f.getAbsolutePath() + " is a directory.") @TO@ Block@@ThenBody:{  ctx.printLine(f.getAbsolutePath() + " is a directory.");  return;} @AT@ 8811 @LENGTH@ 56
---------------INS MethodInvocation@@ctx.printLine(f.getAbsolutePath() + " is a directory.") @TO@ ExpressionStatement@@MethodInvocation:ctx.printLine(f.getAbsolutePath() + " is a directory.") @AT@ 8811 @LENGTH@ 55
------------------INS SimpleName@@Name:ctx @TO@ MethodInvocation@@ctx.printLine(f.getAbsolutePath() + " is a directory.") @AT@ 8811 @LENGTH@ 3
------------------INS SimpleName@@MethodName:printLine:[f.getAbsolutePath() + " is a directory."] @TO@ MethodInvocation@@ctx.printLine(f.getAbsolutePath() + " is a directory.") @AT@ 8815 @LENGTH@ 51
---------------------INS InfixExpression@@f.getAbsolutePath() + " is a directory." @TO@ SimpleName@@MethodName:printLine:[f.getAbsolutePath() + " is a directory."] @AT@ 8825 @LENGTH@ 40
------------------------INS MethodInvocation@@f.getAbsolutePath() @TO@ InfixExpression@@f.getAbsolutePath() + " is a directory." @AT@ 8825 @LENGTH@ 19
---------------------------INS SimpleName@@Name:f @TO@ MethodInvocation@@f.getAbsolutePath() @AT@ 8825 @LENGTH@ 1
---------------------------INS SimpleName@@MethodName:getAbsolutePath:[] @TO@ MethodInvocation@@f.getAbsolutePath() @AT@ 8827 @LENGTH@ 17
------------------------INS Operator@@+ @TO@ InfixExpression@@f.getAbsolutePath() + " is a directory." @AT@ 8844 @LENGTH@ 1
------------------------INS StringLiteral@@" is a directory." @TO@ InfixExpression@@f.getAbsolutePath() + " is a directory." @AT@ 8847 @LENGTH@ 18
------------INS ReturnStatement@@ @TO@ Block@@ThenBody:{  ctx.printLine(f.getAbsolutePath() + " is a directory.");  return;} @AT@ 8884 @LENGTH@ 7


UPD ExpressionStatement@@MethodInvocation:authorizeUrl.append('&').append("callback_url").append("=").append(formEncode(callbackUrl)) @TO@ MethodInvocation:authorizeUrl.append('&').append("oauth_callback").append("=").append(formEncode(callbackUrl)) @AT@ 6517 @LENGTH@ 92
---UPD MethodInvocation@@authorizeUrl.append('&').append("callback_url").append("=").append(formEncode(callbackUrl)) @TO@ authorizeUrl.append('&').append("oauth_callback").append("=").append(formEncode(callbackUrl)) @AT@ 6517 @LENGTH@ 91
------UPD MethodInvocation@@MethodName:append:["callback_url"] @TO@ MethodName:append:["oauth_callback"] @AT@ 6517 @LENGTH@ 47
---------UPD StringLiteral@@"callback_url" @TO@ "oauth_callback" @AT@ 6549 @LENGTH@ 14


UPD ReturnStatement@@InfixExpression:"http://www.gowalla.com/users/" + providerAccountId @TO@ InfixExpression:"https://github.com/" + providerAccountId @AT@ 1802 @LENGTH@ 59
---UPD InfixExpression@@"http://www.gowalla.com/users/" + providerAccountId @TO@ "https://github.com/" + providerAccountId @AT@ 1809 @LENGTH@ 51
------UPD StringLiteral@@"http://www.gowalla.com/users/" @TO@ "https://github.com/" @AT@ 1809 @LENGTH@ 31


UPD IfStatement@@if (!isGaeEnabled() && targetDirectory.contains(".gae")) {  return;} @TO@ if (!isGaeEnabled() && targetDirectory.contains("/gae")) {  return;} @AT@ 5575 @LENGTH@ 74
---UPD InfixExpression@@!isGaeEnabled() && targetDirectory.contains(".gae") @TO@ !isGaeEnabled() && targetDirectory.contains("/gae") @AT@ 5579 @LENGTH@ 51
------UPD MethodInvocation@@targetDirectory.contains(".gae") @TO@ targetDirectory.contains("/gae") @AT@ 5598 @LENGTH@ 32
---------UPD SimpleName@@MethodName:contains:[".gae"] @TO@ MethodName:contains:["/gae"] @AT@ 5614 @LENGTH@ 16
------------UPD StringLiteral@@".gae" @TO@ "/gae" @AT@ 5623 @LENGTH@ 6


INS MethodDeclaration@@public, void, MethodName:setId, String id,  @TO@ TypeDeclaration@@[@Persistent, public]Account,  @AT@ 984 @LENGTH@ 52
---INS Modifier@@public @TO@ MethodDeclaration@@public, void, MethodName:setId, String id,  @AT@ 984 @LENGTH@ 6
---INS PrimitiveType@@void @TO@ MethodDeclaration@@public, void, MethodName:setId, String id,  @AT@ 991 @LENGTH@ 4
---INS SimpleName@@MethodName:setId @TO@ MethodDeclaration@@public, void, MethodName:setId, String id,  @AT@ 996 @LENGTH@ 5
---INS SingleVariableDeclaration@@String id @TO@ MethodDeclaration@@public, void, MethodName:setId, String id,  @AT@ 1002 @LENGTH@ 9
------INS SimpleType@@String @TO@ SingleVariableDeclaration@@String id @AT@ 1002 @LENGTH@ 6
------INS SimpleName@@id @TO@ SingleVariableDeclaration@@String id @AT@ 1009 @LENGTH@ 2
---INS ExpressionStatement@@Assignment:this.id=id @TO@ MethodDeclaration@@public, void, MethodName:setId, String id,  @AT@ 1019 @LENGTH@ 13
------INS Assignment@@this.id=id @TO@ ExpressionStatement@@Assignment:this.id=id @AT@ 1019 @LENGTH@ 12
---------INS FieldAccess@@this.id @TO@ Assignment@@this.id=id @AT@ 1019 @LENGTH@ 7
------------INS ThisExpression@@this @TO@ FieldAccess@@this.id @AT@ 1019 @LENGTH@ 4
------------INS SimpleName@@id @TO@ FieldAccess@@this.id @AT@ 1024 @LENGTH@ 2
---------INS Operator@@= @TO@ Assignment@@this.id=id @AT@ 1026 @LENGTH@ 1
---------INS SimpleName@@id @TO@ Assignment@@this.id=id @AT@ 1029 @LENGTH@ 2


DEL FieldDeclaration@@private, MemberDetailsScanner, [memberDetailsScanner] @AT@ 2858 @LENGTH@ 50
---DEL Modifier@@private @AT@ 2858 @LENGTH@ 7
---DEL SimpleType@@MemberDetailsScanner @AT@ 2866 @LENGTH@ 20
---DEL VariableDeclarationFragment@@memberDetailsScanner @AT@ 2887 @LENGTH@ 20
------DEL SimpleName@@memberDetailsScanner @AT@ 2887 @LENGTH@ 20


UPD IfStatement@@if (event instanceof CamelContextStartedEvent) {  CamelContext context=((CamelContextStartedEvent)event).getContext();  Properties props=new Properties();  props.put(CONTEXT_SYMBOLIC_NAME_PROPERTY,bundleContext.getBundle().getSymbolicName());  props.put(CONTEXT_VERSION_PROPERTY,getBundleVersion(bundleContext.getBundle()));  ServiceRegistration reg=bundleContext.registerService(CamelContext.class.getName(),context,props);  registrations.put(context,reg);} else if (event instanceof CamelContextStoppingEvent) {  CamelContext context=((CamelContextStoppingEvent)event).getContext();  ServiceRegistration reg=registrations.get(context);  if (reg != null) {    reg.unregister();  }} @TO@ if (event instanceof CamelContextStartedEvent) {  CamelContext context=((CamelContextStartedEvent)event).getContext();  Properties props=new Properties();  props.put(CONTEXT_SYMBOLIC_NAME_PROPERTY,bundleContext.getBundle().getSymbolicName());  props.put(CONTEXT_VERSION_PROPERTY,getBundleVersion(bundleContext.getBundle()));  if (log.isDebugEnabled()) {    log.debug("Registering CamelContext [" + context.getName() + "] in OSGi registry");  }  ServiceRegistration reg=bundleContext.registerService(CamelContext.class.getName(),context,props);  registrations.put(context,reg);} else if (event instanceof CamelContextStoppingEvent) {  CamelContext context=((CamelContextStoppingEvent)event).getContext();  ServiceRegistration reg=registrations.get(context);  if (reg != null) {    if (log.isDebugEnabled()) {      log.debug("Unregistering CamelContext [" + context.getName() + "] from OSGi registry");    }    reg.unregister();  }} @AT@ 2136 @LENGTH@ 1015
---UPD Block@@ThenBody:{  CamelContext context=((CamelContextStartedEvent)event).getContext();  Properties props=new Properties();  props.put(CONTEXT_SYMBOLIC_NAME_PROPERTY,bundleContext.getBundle().getSymbolicName());  props.put(CONTEXT_VERSION_PROPERTY,getBundleVersion(bundleContext.getBundle()));  ServiceRegistration reg=bundleContext.registerService(CamelContext.class.getName(),context,props);  registrations.put(context,reg);} @TO@ ThenBody:{  CamelContext context=((CamelContextStartedEvent)event).getContext();  Properties props=new Properties();  props.put(CONTEXT_SYMBOLIC_NAME_PROPERTY,bundleContext.getBundle().getSymbolicName());  props.put(CONTEXT_VERSION_PROPERTY,getBundleVersion(bundleContext.getBundle()));  if (log.isDebugEnabled()) {    log.debug("Registering CamelContext [" + context.getName() + "] in OSGi registry");  }  ServiceRegistration reg=bundleContext.registerService(CamelContext.class.getName(),context,props);  registrations.put(context,reg);} @AT@ 2183 @LENGTH@ 671
------INS IfStatement@@if (log.isDebugEnabled()) {  log.debug("Registering CamelContext [" + context.getName() + "] in OSGi registry");} @TO@ Block@@ThenBody:{  CamelContext context=((CamelContextStartedEvent)event).getContext();  Properties props=new Properties();  props.put(CONTEXT_SYMBOLIC_NAME_PROPERTY,bundleContext.getBundle().getSymbolicName());  props.put(CONTEXT_VERSION_PROPERTY,getBundleVersion(bundleContext.getBundle()));  ServiceRegistration reg=bundleContext.registerService(CamelContext.class.getName(),context,props);  registrations.put(context,reg);} @AT@ 2564 @LENGTH@ 141
---------INS MethodInvocation@@log.isDebugEnabled() @TO@ IfStatement@@if (log.isDebugEnabled()) {  log.debug("Registering CamelContext [" + context.getName() + "] in OSGi registry");} @AT@ 2568 @LENGTH@ 20
------------INS SimpleName@@Name:log @TO@ MethodInvocation@@log.isDebugEnabled() @AT@ 2568 @LENGTH@ 3
------------INS SimpleName@@MethodName:isDebugEnabled:[] @TO@ MethodInvocation@@log.isDebugEnabled() @AT@ 2572 @LENGTH@ 16
---------INS Block@@ThenBody:{  log.debug("Registering CamelContext [" + context.getName() + "] in OSGi registry");} @TO@ IfStatement@@if (log.isDebugEnabled()) {  log.debug("Registering CamelContext [" + context.getName() + "] in OSGi registry");} @AT@ 2590 @LENGTH@ 115
------------INS ExpressionStatement@@MethodInvocation:log.debug("Registering CamelContext [" + context.getName() + "] in OSGi registry") @TO@ Block@@ThenBody:{  log.debug("Registering CamelContext [" + context.getName() + "] in OSGi registry");} @AT@ 2608 @LENGTH@ 83
---------------INS MethodInvocation@@log.debug("Registering CamelContext [" + context.getName() + "] in OSGi registry") @TO@ ExpressionStatement@@MethodInvocation:log.debug("Registering CamelContext [" + context.getName() + "] in OSGi registry") @AT@ 2608 @LENGTH@ 82
------------------INS SimpleName@@Name:log @TO@ MethodInvocation@@log.debug("Registering CamelContext [" + context.getName() + "] in OSGi registry") @AT@ 2608 @LENGTH@ 3
------------------INS SimpleName@@MethodName:debug:["Registering CamelContext [" + context.getName() + "] in OSGi registry"] @TO@ MethodInvocation@@log.debug("Registering CamelContext [" + context.getName() + "] in OSGi registry") @AT@ 2612 @LENGTH@ 78
---------------------INS InfixExpression@@"Registering CamelContext [" + context.getName() + "] in OSGi registry" @TO@ SimpleName@@MethodName:debug:["Registering CamelContext [" + context.getName() + "] in OSGi registry"] @AT@ 2618 @LENGTH@ 71
------------------------INS StringLiteral@@"Registering CamelContext [" @TO@ InfixExpression@@"Registering CamelContext [" + context.getName() + "] in OSGi registry" @AT@ 2618 @LENGTH@ 28
------------------------INS Operator@@+ @TO@ InfixExpression@@"Registering CamelContext [" + context.getName() + "] in OSGi registry" @AT@ 2646 @LENGTH@ 1
------------------------INS MethodInvocation@@context.getName() @TO@ InfixExpression@@"Registering CamelContext [" + context.getName() + "] in OSGi registry" @AT@ 2649 @LENGTH@ 17
---------------------------INS SimpleName@@Name:context @TO@ MethodInvocation@@context.getName() @AT@ 2649 @LENGTH@ 7
---------------------------INS SimpleName@@MethodName:getName:[] @TO@ MethodInvocation@@context.getName() @AT@ 2657 @LENGTH@ 9
------------------------INS StringLiteral@@"] in OSGi registry" @TO@ InfixExpression@@"Registering CamelContext [" + context.getName() + "] in OSGi registry" @AT@ 2669 @LENGTH@ 20
---UPD Block@@ElseBody:if (event instanceof CamelContextStoppingEvent) {  CamelContext context=((CamelContextStoppingEvent)event).getContext();  ServiceRegistration reg=registrations.get(context);  if (reg != null) {    reg.unregister();  }} @TO@ ElseBody:if (event instanceof CamelContextStoppingEvent) {  CamelContext context=((CamelContextStoppingEvent)event).getContext();  ServiceRegistration reg=registrations.get(context);  if (reg != null) {    if (log.isDebugEnabled()) {      log.debug("Unregistering CamelContext [" + context.getName() + "] from OSGi registry");    }    reg.unregister();  }} @AT@ 2860 @LENGTH@ 291
------UPD IfStatement@@if (event instanceof CamelContextStoppingEvent) {  CamelContext context=((CamelContextStoppingEvent)event).getContext();  ServiceRegistration reg=registrations.get(context);  if (reg != null) {    reg.unregister();  }} @TO@ if (event instanceof CamelContextStoppingEvent) {  CamelContext context=((CamelContextStoppingEvent)event).getContext();  ServiceRegistration reg=registrations.get(context);  if (reg != null) {    if (log.isDebugEnabled()) {      log.debug("Unregistering CamelContext [" + context.getName() + "] from OSGi registry");    }    reg.unregister();  }} @AT@ 2860 @LENGTH@ 291
---------UPD Block@@ThenBody:{  CamelContext context=((CamelContextStoppingEvent)event).getContext();  ServiceRegistration reg=registrations.get(context);  if (reg != null) {    reg.unregister();  }} @TO@ ThenBody:{  CamelContext context=((CamelContextStoppingEvent)event).getContext();  ServiceRegistration reg=registrations.get(context);  if (reg != null) {    if (log.isDebugEnabled()) {      log.debug("Unregistering CamelContext [" + context.getName() + "] from OSGi registry");    }    reg.unregister();  }} @AT@ 2908 @LENGTH@ 243
------------UPD IfStatement@@if (reg != null) {  reg.unregister();} @TO@ if (reg != null) {  if (log.isDebugEnabled()) {    log.debug("Unregistering CamelContext [" + context.getName() + "] from OSGi registry");  }  reg.unregister();} @AT@ 3075 @LENGTH@ 66
---------------UPD Block@@ThenBody:{  reg.unregister();} @TO@ ThenBody:{  log.debug("Unregistering CamelContext [" + context.getName() + "] from OSGi registry");} @AT@ 3092 @LENGTH@ 49
---------------INS Block@@ThenBody:{  if (log.isDebugEnabled()) {    log.debug("Unregistering CamelContext [" + context.getName() + "] from OSGi registry");  }  reg.unregister();} @TO@ IfStatement@@if (reg != null) {  reg.unregister();} @AT@ 3111 @LENGTH@ 219
------------------MOV ExpressionStatement@@MethodInvocation:reg.unregister() @TO@ Block@@ThenBody:{  if (log.isDebugEnabled()) {    log.debug("Unregistering CamelContext [" + context.getName() + "] from OSGi registry");  }  reg.unregister();} @AT@ 3110 @LENGTH@ 17
------------------MOV ExpressionStatement@@MethodInvocation:reg.unregister() @TO@ Block@@ThenBody:{  if (log.isDebugEnabled()) {    log.debug("Unregistering CamelContext [" + context.getName() + "] from OSGi registry");  }  reg.unregister();} @AT@ 3110 @LENGTH@ 17
------------------INS IfStatement@@if (log.isDebugEnabled()) {  log.debug("Unregistering CamelContext [" + context.getName() + "] from OSGi registry");} @TO@ Block@@ThenBody:{  if (log.isDebugEnabled()) {    log.debug("Unregistering CamelContext [" + context.getName() + "] from OSGi registry");  }  reg.unregister();} @AT@ 3129 @LENGTH@ 153
---------------------MOV Block@@ThenBody:{  reg.unregister();} @TO@ IfStatement@@if (log.isDebugEnabled()) {  log.debug("Unregistering CamelContext [" + context.getName() + "] from OSGi registry");} @AT@ 3092 @LENGTH@ 49
------------------------INS ExpressionStatement@@MethodInvocation:log.debug("Unregistering CamelContext [" + context.getName() + "] from OSGi registry") @TO@ Block@@ThenBody:{  reg.unregister();} @AT@ 3177 @LENGTH@ 87
---------------------------INS MethodInvocation@@log.debug("Unregistering CamelContext [" + context.getName() + "] from OSGi registry") @TO@ ExpressionStatement@@MethodInvocation:log.debug("Unregistering CamelContext [" + context.getName() + "] from OSGi registry") @AT@ 3177 @LENGTH@ 86
------------------------------INS SimpleName@@Name:log @TO@ MethodInvocation@@log.debug("Unregistering CamelContext [" + context.getName() + "] from OSGi registry") @AT@ 3177 @LENGTH@ 3
------------------------------INS SimpleName@@MethodName:debug:["Unregistering CamelContext [" + context.getName() + "] from OSGi registry"] @TO@ MethodInvocation@@log.debug("Unregistering CamelContext [" + context.getName() + "] from OSGi registry") @AT@ 3181 @LENGTH@ 82
---------------------------------INS InfixExpression@@"Unregistering CamelContext [" + context.getName() + "] from OSGi registry" @TO@ SimpleName@@MethodName:debug:["Unregistering CamelContext [" + context.getName() + "] from OSGi registry"] @AT@ 3187 @LENGTH@ 75
------------------------------------INS StringLiteral@@"Unregistering CamelContext [" @TO@ InfixExpression@@"Unregistering CamelContext [" + context.getName() + "] from OSGi registry" @AT@ 3187 @LENGTH@ 30
------------------------------------INS Operator@@+ @TO@ InfixExpression@@"Unregistering CamelContext [" + context.getName() + "] from OSGi registry" @AT@ 3217 @LENGTH@ 1
------------------------------------INS MethodInvocation@@context.getName() @TO@ InfixExpression@@"Unregistering CamelContext [" + context.getName() + "] from OSGi registry" @AT@ 3220 @LENGTH@ 17
---------------------------------------INS SimpleName@@Name:context @TO@ MethodInvocation@@context.getName() @AT@ 3220 @LENGTH@ 7
---------------------------------------INS SimpleName@@MethodName:getName:[] @TO@ MethodInvocation@@context.getName() @AT@ 3228 @LENGTH@ 9
------------------------------------INS StringLiteral@@"] from OSGi registry" @TO@ InfixExpression@@"Unregistering CamelContext [" + context.getName() + "] from OSGi registry" @AT@ 3240 @LENGTH@ 22
---------------------MOV Block@@ThenBody:{  reg.unregister();} @TO@ IfStatement@@if (log.isDebugEnabled()) {  log.debug("Unregistering CamelContext [" + context.getName() + "] from OSGi registry");} @AT@ 3092 @LENGTH@ 49
------------------------INS ExpressionStatement@@MethodInvocation:log.debug("Unregistering CamelContext [" + context.getName() + "] from OSGi registry") @TO@ Block@@ThenBody:{  reg.unregister();} @AT@ 3177 @LENGTH@ 87
---------------------------INS MethodInvocation@@log.debug("Unregistering CamelContext [" + context.getName() + "] from OSGi registry") @TO@ ExpressionStatement@@MethodInvocation:log.debug("Unregistering CamelContext [" + context.getName() + "] from OSGi registry") @AT@ 3177 @LENGTH@ 86
------------------------------INS SimpleName@@Name:log @TO@ MethodInvocation@@log.debug("Unregistering CamelContext [" + context.getName() + "] from OSGi registry") @AT@ 3177 @LENGTH@ 3
------------------------------INS SimpleName@@MethodName:debug:["Unregistering CamelContext [" + context.getName() + "] from OSGi registry"] @TO@ MethodInvocation@@log.debug("Unregistering CamelContext [" + context.getName() + "] from OSGi registry") @AT@ 3181 @LENGTH@ 82
---------------------------------INS InfixExpression@@"Unregistering CamelContext [" + context.getName() + "] from OSGi registry" @TO@ SimpleName@@MethodName:debug:["Unregistering CamelContext [" + context.getName() + "] from OSGi registry"] @AT@ 3187 @LENGTH@ 75
------------------------------------INS StringLiteral@@"Unregistering CamelContext [" @TO@ InfixExpression@@"Unregistering CamelContext [" + context.getName() + "] from OSGi registry" @AT@ 3187 @LENGTH@ 30
------------------------------------INS Operator@@+ @TO@ InfixExpression@@"Unregistering CamelContext [" + context.getName() + "] from OSGi registry" @AT@ 3217 @LENGTH@ 1
------------------------------------INS MethodInvocation@@context.getName() @TO@ InfixExpression@@"Unregistering CamelContext [" + context.getName() + "] from OSGi registry" @AT@ 3220 @LENGTH@ 17
---------------------------------------INS SimpleName@@Name:context @TO@ MethodInvocation@@context.getName() @AT@ 3220 @LENGTH@ 7
---------------------------------------INS SimpleName@@MethodName:getName:[] @TO@ MethodInvocation@@context.getName() @AT@ 3228 @LENGTH@ 9
------------------------------------INS StringLiteral@@"] from OSGi registry" @TO@ InfixExpression@@"Unregistering CamelContext [" + context.getName() + "] from OSGi registry" @AT@ 3240 @LENGTH@ 22
---------------------INS MethodInvocation@@log.isDebugEnabled() @TO@ IfStatement@@if (log.isDebugEnabled()) {  log.debug("Unregistering CamelContext [" + context.getName() + "] from OSGi registry");} @AT@ 3133 @LENGTH@ 20
------------------------INS SimpleName@@Name:log @TO@ MethodInvocation@@log.isDebugEnabled() @AT@ 3133 @LENGTH@ 3
------------------------INS SimpleName@@MethodName:isDebugEnabled:[] @TO@ MethodInvocation@@log.isDebugEnabled() @AT@ 3137 @LENGTH@ 16


UPD ReturnStatement@@BooleanLiteral:false @TO@ MethodInvocation:type.isEnum() @AT@ 3238 @LENGTH@ 13
---INS MethodInvocation@@type.isEnum() @TO@ ReturnStatement@@BooleanLiteral:false @AT@ 3245 @LENGTH@ 13
------INS SimpleName@@Name:type @TO@ MethodInvocation@@type.isEnum() @AT@ 3245 @LENGTH@ 4
------INS SimpleName@@MethodName:isEnum:[] @TO@ MethodInvocation@@type.isEnum() @AT@ 3250 @LENGTH@ 8
---DEL BooleanLiteral@@false @AT@ 3245 @LENGTH@ 5


UPD ExpressionStatement@@MethodInvocation:root.registerOperationHandler(DeploymentReplaceHandler.OPERATION_NAME,DeploymentReplaceHandler.INSTANCE,DeploymentReplaceHandler.INSTANCE,false) @TO@ MethodInvocation:root.registerOperationHandler(DeploymentReplaceHandler.OPERATION_NAME,drh,drh,false) @AT@ 12760 @LENGTH@ 148
---UPD MethodInvocation@@root.registerOperationHandler(DeploymentReplaceHandler.OPERATION_NAME,DeploymentReplaceHandler.INSTANCE,DeploymentReplaceHandler.INSTANCE,false) @TO@ root.registerOperationHandler(DeploymentReplaceHandler.OPERATION_NAME,drh,drh,false) @AT@ 12760 @LENGTH@ 147
------UPD SimpleName@@MethodName:registerOperationHandler:[DeploymentReplaceHandler.OPERATION_NAME, DeploymentReplaceHandler.INSTANCE, DeploymentReplaceHandler.INSTANCE, false] @TO@ MethodName:registerOperationHandler:[DeploymentReplaceHandler.OPERATION_NAME, drh, drh, false] @AT@ 12765 @LENGTH@ 142
---------DEL QualifiedName@@DeploymentReplaceHandler.INSTANCE @AT@ 12831 @LENGTH@ 33
------------DEL SimpleName@@DeploymentReplaceHandler @AT@ 12831 @LENGTH@ 24
------------DEL SimpleName@@INSTANCE @AT@ 12856 @LENGTH@ 8
---------DEL QualifiedName@@DeploymentReplaceHandler.INSTANCE @AT@ 12866 @LENGTH@ 33
------------DEL SimpleName@@DeploymentReplaceHandler @AT@ 12866 @LENGTH@ 24
------------DEL SimpleName@@INSTANCE @AT@ 12891 @LENGTH@ 8
---------INS SimpleName@@drh @TO@ SimpleName@@MethodName:registerOperationHandler:[DeploymentReplaceHandler.OPERATION_NAME, DeploymentReplaceHandler.INSTANCE, DeploymentReplaceHandler.INSTANCE, false] @AT@ 12925 @LENGTH@ 3
---------INS SimpleName@@drh @TO@ SimpleName@@MethodName:registerOperationHandler:[DeploymentReplaceHandler.OPERATION_NAME, DeploymentReplaceHandler.INSTANCE, DeploymentReplaceHandler.INSTANCE, false] @AT@ 12930 @LENGTH@ 3


UPD TryStatement@@try {  final RootLoggerService service=new RootLoggerService();  service.setLevel(Level.parse(getLevelName()));  final BatchBuilder batchBuilder=updateContext.getServiceTarget();  batchBuilder.addService(LogServices.ROOT_LOGGER,service).addListener(new UpdateResultHandler.ServiceStartListener<P>(resultHandler,param)).setInitialMode(ServiceController.Mode.ACTIVE).install();} catch (Throwable t) {  resultHandler.handleFailure(t,param);  return;} @TO@ try {  final RootLoggerService service=new RootLoggerService();  service.setLevel(Level.parse(getLevelName()));  final ServiceTarget target=updateContext.getServiceTarget();  target.addService(LogServices.ROOT_LOGGER,service).addListener(new UpdateResultHandler.ServiceStartListener<P>(resultHandler,param)).setInitialMode(ServiceController.Mode.ACTIVE).install();} catch (Throwable t) {  resultHandler.handleFailure(t,param);  return;} @AT@ 2153 @LENGTH@ 589
---UPD VariableDeclarationStatement@@final BatchBuilder batchBuilder=updateContext.getServiceTarget(); @TO@ final ServiceTarget target=updateContext.getServiceTarget(); @AT@ 2301 @LENGTH@ 67
------UPD SimpleType@@BatchBuilder @TO@ ServiceTarget @AT@ 2307 @LENGTH@ 12
------UPD VariableDeclarationFragment@@batchBuilder=updateContext.getServiceTarget() @TO@ target=updateContext.getServiceTarget() @AT@ 2320 @LENGTH@ 47
---------UPD SimpleName@@batchBuilder @TO@ target @AT@ 2320 @LENGTH@ 12
---UPD ExpressionStatement@@MethodInvocation:batchBuilder.addService(LogServices.ROOT_LOGGER,service).addListener(new UpdateResultHandler.ServiceStartListener<P>(resultHandler,param)).setInitialMode(ServiceController.Mode.ACTIVE).install() @TO@ MethodInvocation:target.addService(LogServices.ROOT_LOGGER,service).addListener(new UpdateResultHandler.ServiceStartListener<P>(resultHandler,param)).setInitialMode(ServiceController.Mode.ACTIVE).install() @AT@ 2381 @LENGTH@ 248
------UPD MethodInvocation@@batchBuilder.addService(LogServices.ROOT_LOGGER,service).addListener(new UpdateResultHandler.ServiceStartListener<P>(resultHandler,param)).setInitialMode(ServiceController.Mode.ACTIVE).install() @TO@ target.addService(LogServices.ROOT_LOGGER,service).addListener(new UpdateResultHandler.ServiceStartListener<P>(resultHandler,param)).setInitialMode(ServiceController.Mode.ACTIVE).install() @AT@ 2381 @LENGTH@ 247
---------UPD SimpleName@@Name:batchBuilder @TO@ Name:target @AT@ 2381 @LENGTH@ 12


UPD IfStatement@@if (!excludeFieldsSet.contains(StringUtils.uncapitalize(fieldName))) {  String accessorText=accessorName + "()";  if (accessor.getReturnType().isCommonCollectionType()) {    accessorText=accessorName + "() == null ? \"null\" : " + accessorName+ "().size()";  } else   if (accessor.getReturnType().isArray()) {    accessorText="java.util.Arrays.toString(" + accessorName + "())";  } else   if (Calendar.class.getName().equals(accessor.getReturnType().getFullyQualifiedTypeName())) {    accessorText=accessorName + "() == null ? \"null\" : " + accessorName+ "().getTime()";  }  map.put(fieldName,accessorText);  order.add(fieldName);} @TO@ if (!excludeFieldsSet.contains(StringUtils.uncapitalize(fieldName)) && !map.containsKey(fieldName)) {  String accessorText=accessorName + "()";  if (accessor.getReturnType().isCommonCollectionType()) {    accessorText=accessorName + "() == null ? \"null\" : " + accessorName+ "().size()";  } else   if (accessor.getReturnType().isArray()) {    accessorText="java.util.Arrays.toString(" + accessorName + "())";  } else   if (Calendar.class.getName().equals(accessor.getReturnType().getFullyQualifiedTypeName())) {    accessorText=accessorName + "() == null ? \"null\" : " + accessorName+ "().getTime()";  }  map.put(fieldName,accessorText);  order.add(fieldName);} @AT@ 4600 @LENGTH@ 681
---INS InfixExpression@@!excludeFieldsSet.contains(StringUtils.uncapitalize(fieldName)) && !map.containsKey(fieldName) @TO@ IfStatement@@if (!excludeFieldsSet.contains(StringUtils.uncapitalize(fieldName))) {  String accessorText=accessorName + "()";  if (accessor.getReturnType().isCommonCollectionType()) {    accessorText=accessorName + "() == null ? \"null\" : " + accessorName+ "().size()";  } else   if (accessor.getReturnType().isArray()) {    accessorText="java.util.Arrays.toString(" + accessorName + "())";  } else   if (Calendar.class.getName().equals(accessor.getReturnType().getFullyQualifiedTypeName())) {    accessorText=accessorName + "() == null ? \"null\" : " + accessorName+ "().getTime()";  }  map.put(fieldName,accessorText);  order.add(fieldName);} @AT@ 4604 @LENGTH@ 94
------MOV PrefixExpression@@!excludeFieldsSet.contains(StringUtils.uncapitalize(fieldName)) @TO@ InfixExpression@@!excludeFieldsSet.contains(StringUtils.uncapitalize(fieldName)) && !map.containsKey(fieldName) @AT@ 4604 @LENGTH@ 63
------INS Operator@@&& @TO@ InfixExpression@@!excludeFieldsSet.contains(StringUtils.uncapitalize(fieldName)) && !map.containsKey(fieldName) @AT@ 4667 @LENGTH@ 2
------INS PrefixExpression@@!map.containsKey(fieldName) @TO@ InfixExpression@@!excludeFieldsSet.contains(StringUtils.uncapitalize(fieldName)) && !map.containsKey(fieldName) @AT@ 4671 @LENGTH@ 27
---------INS Operator@@! @TO@ PrefixExpression@@!map.containsKey(fieldName) @AT@ 4671 @LENGTH@ 1
---------INS MethodInvocation@@map.containsKey(fieldName) @TO@ PrefixExpression@@!map.containsKey(fieldName) @AT@ 4672 @LENGTH@ 26
------------INS SimpleName@@Name:map @TO@ MethodInvocation@@map.containsKey(fieldName) @AT@ 4672 @LENGTH@ 3
------------INS SimpleName@@MethodName:containsKey:[fieldName] @TO@ MethodInvocation@@map.containsKey(fieldName) @AT@ 4676 @LENGTH@ 22
---------------INS SimpleName@@fieldName @TO@ SimpleName@@MethodName:containsKey:[fieldName] @AT@ 4688 @LENGTH@ 9


UPD TypeDeclaration@@[public]SoapActionEndpointMapping, AbstractMapBasedEndpointMapping[SoapEndpointMapping] @TO@ [@Deprecated, public]SoapActionEndpointMapping, AbstractMapBasedEndpointMapping[SoapEndpointMapping] @AT@ 2438 @LENGTH@ 2364
---INS MarkerAnnotation@@@Deprecated @TO@ TypeDeclaration@@[public]SoapActionEndpointMapping, AbstractMapBasedEndpointMapping[SoapEndpointMapping] @AT@ 2542 @LENGTH@ 11


INS VariableDeclarationStatement@@final ServicesAttachment servicesAttachment=deploymentUnit.getAttachment(Attachments.SERVICES); @TO@ MethodDeclaration@@public, void, MethodName:deploy, DeploymentPhaseContext phaseContext, DeploymentUnitProcessingException,  @AT@ 2270 @LENGTH@ 97
---INS Modifier@@final @TO@ VariableDeclarationStatement@@final ServicesAttachment servicesAttachment=deploymentUnit.getAttachment(Attachments.SERVICES); @AT@ 2270 @LENGTH@ 5
---INS SimpleType@@ServicesAttachment @TO@ VariableDeclarationStatement@@final ServicesAttachment servicesAttachment=deploymentUnit.getAttachment(Attachments.SERVICES); @AT@ 2276 @LENGTH@ 18
---INS VariableDeclarationFragment@@servicesAttachment=deploymentUnit.getAttachment(Attachments.SERVICES) @TO@ VariableDeclarationStatement@@final ServicesAttachment servicesAttachment=deploymentUnit.getAttachment(Attachments.SERVICES); @AT@ 2295 @LENGTH@ 71
------INS SimpleName@@servicesAttachment @TO@ VariableDeclarationFragment@@servicesAttachment=deploymentUnit.getAttachment(Attachments.SERVICES) @AT@ 2295 @LENGTH@ 18
------INS MethodInvocation@@deploymentUnit.getAttachment(Attachments.SERVICES) @TO@ VariableDeclarationFragment@@servicesAttachment=deploymentUnit.getAttachment(Attachments.SERVICES) @AT@ 2316 @LENGTH@ 50
---------INS SimpleName@@Name:deploymentUnit @TO@ MethodInvocation@@deploymentUnit.getAttachment(Attachments.SERVICES) @AT@ 2316 @LENGTH@ 14
---------INS SimpleName@@MethodName:getAttachment:[Attachments.SERVICES] @TO@ MethodInvocation@@deploymentUnit.getAttachment(Attachments.SERVICES) @AT@ 2331 @LENGTH@ 35
------------INS QualifiedName@@Attachments.SERVICES @TO@ SimpleName@@MethodName:getAttachment:[Attachments.SERVICES] @AT@ 2345 @LENGTH@ 20
---------------INS SimpleName@@Attachments @TO@ QualifiedName@@Attachments.SERVICES @AT@ 2345 @LENGTH@ 11
---------------INS SimpleName@@SERVICES @TO@ QualifiedName@@Attachments.SERVICES @AT@ 2357 @LENGTH@ 8


INS ExpressionStatement@@MethodInvocation:Mailbox.clearAll() @TO@ MethodDeclaration@@public, void, MethodName:testConsuming, Exception,  @AT@ 1372 @LENGTH@ 19
---INS MethodInvocation@@Mailbox.clearAll() @TO@ ExpressionStatement@@MethodInvocation:Mailbox.clearAll() @AT@ 1372 @LENGTH@ 18
------INS SimpleName@@Name:Mailbox @TO@ MethodInvocation@@Mailbox.clearAll() @AT@ 1372 @LENGTH@ 7
------INS SimpleName@@MethodName:clearAll:[] @TO@ MethodInvocation@@Mailbox.clearAll() @AT@ 1380 @LENGTH@ 10


INS MethodDeclaration@@public, void, MethodName:stop, Exception,  @TO@ TypeDeclaration@@[public]TestEndpoint, MockEndpoint @AT@ 2694 @LENGTH@ 43
---INS Modifier@@public @TO@ MethodDeclaration@@public, void, MethodName:stop, Exception,  @AT@ 2694 @LENGTH@ 6
---INS PrimitiveType@@void @TO@ MethodDeclaration@@public, void, MethodName:stop, Exception,  @AT@ 2701 @LENGTH@ 4
---INS SimpleName@@MethodName:stop @TO@ MethodDeclaration@@public, void, MethodName:stop, Exception,  @AT@ 2706 @LENGTH@ 4
---INS SimpleType@@Exception @TO@ MethodDeclaration@@public, void, MethodName:stop, Exception,  @AT@ 2720 @LENGTH@ 9


UPD IfStatement@@if ((value.toLowerCase().startsWith("oauth2 "))) {  String authHeaderValue=value.substring(6);  if (authHeaderValue.contains("oauth_signature_method")) {    continue;  }  int commaIndex=authHeaderValue.indexOf(',');  if (commaIndex > 0) {    authHeaderValue=authHeaderValue.substring(0,commaIndex);  }  return authHeaderValue;} else {} @TO@ if ((value.toLowerCase().startsWith(AUTH_HEADER))) {  String authHeaderValue=value.substring(AUTH_HEADER.length());  if (authHeaderValue.contains("oauth_signature_method")) {    continue;  }  int commaIndex=authHeaderValue.indexOf(',');  if (commaIndex > 0) {    authHeaderValue=authHeaderValue.substring(0,commaIndex);  }  return authHeaderValue;} else {} @AT@ 5468 @LENGTH@ 712
---UPD ParenthesizedExpression@@(value.toLowerCase().startsWith("oauth2 ")) @TO@ (value.toLowerCase().startsWith(AUTH_HEADER)) @AT@ 5472 @LENGTH@ 43
------UPD MethodInvocation@@value.toLowerCase().startsWith("oauth2 ") @TO@ value.toLowerCase().startsWith(AUTH_HEADER) @AT@ 5473 @LENGTH@ 41
---------UPD SimpleName@@MethodName:startsWith:["oauth2 "] @TO@ MethodName:startsWith:[AUTH_HEADER] @AT@ 5493 @LENGTH@ 21
------------DEL StringLiteral@@"oauth2 " @AT@ 5504 @LENGTH@ 9
------------INS SimpleName@@AUTH_HEADER @TO@ SimpleName@@MethodName:startsWith:["oauth2 "] @AT@ 5559 @LENGTH@ 11
---UPD Block@@ThenBody:{  String authHeaderValue=value.substring(6);  if (authHeaderValue.contains("oauth_signature_method")) {    continue;  }  int commaIndex=authHeaderValue.indexOf(',');  if (commaIndex > 0) {    authHeaderValue=authHeaderValue.substring(0,commaIndex);  }  return authHeaderValue;} @TO@ ThenBody:{  String authHeaderValue=value.substring(AUTH_HEADER.length());  if (authHeaderValue.contains("oauth_signature_method")) {    continue;  }  int commaIndex=authHeaderValue.indexOf(',');  if (commaIndex > 0) {    authHeaderValue=authHeaderValue.substring(0,commaIndex);  }  return authHeaderValue;} @AT@ 5517 @LENGTH@ 475
------UPD VariableDeclarationStatement@@String authHeaderValue=value.substring(6); @TO@ String authHeaderValue=value.substring(AUTH_HEADER.length()); @AT@ 5527 @LENGTH@ 44
---------UPD VariableDeclarationFragment@@authHeaderValue=value.substring(6) @TO@ authHeaderValue=value.substring(AUTH_HEADER.length()) @AT@ 5534 @LENGTH@ 36
------------UPD MethodInvocation@@value.substring(6) @TO@ value.substring(AUTH_HEADER.length()) @AT@ 5552 @LENGTH@ 18
---------------UPD SimpleName@@MethodName:substring:[6] @TO@ MethodName:substring:[AUTH_HEADER.length()] @AT@ 5558 @LENGTH@ 12
------------------DEL NumberLiteral@@6 @AT@ 5568 @LENGTH@ 1
------------------INS MethodInvocation@@AUTH_HEADER.length() @TO@ SimpleName@@MethodName:substring:[6] @AT@ 5625 @LENGTH@ 20
---------------------INS SimpleName@@Name:AUTH_HEADER @TO@ MethodInvocation@@AUTH_HEADER.length() @AT@ 5625 @LENGTH@ 11
---------------------INS SimpleName@@MethodName:length:[] @TO@ MethodInvocation@@AUTH_HEADER.length() @AT@ 5637 @LENGTH@ 8


UPD MethodDeclaration@@public, static, void, MethodName:addService, final BatchBuilder batchBuilder,  @TO@ public, static, void, MethodName:addService, final ServiceTarget batchBuilder,  @AT@ 1826 @LENGTH@ 244
---UPD SingleVariableDeclaration@@final BatchBuilder batchBuilder @TO@ final ServiceTarget batchBuilder @AT@ 1856 @LENGTH@ 31
------UPD SimpleType@@BatchBuilder @TO@ ServiceTarget @AT@ 1862 @LENGTH@ 12


UPD ExpressionStatement@@MethodInvocation:Assert.notNull(entityMethods,"EntityW methods required") @TO@ MethodInvocation:Assert.notNull(entityMethods,"Entity methods required") @AT@ 5765 @LENGTH@ 58
---UPD MethodInvocation@@Assert.notNull(entityMethods,"EntityW methods required") @TO@ Assert.notNull(entityMethods,"Entity methods required") @AT@ 5765 @LENGTH@ 57
------UPD SimpleName@@MethodName:notNull:[entityMethods, "EntityW methods required"] @TO@ MethodName:notNull:[entityMethods, "Entity methods required"] @AT@ 5772 @LENGTH@ 50
---------UPD StringLiteral@@"EntityW methods required" @TO@ "Entity methods required" @AT@ 5795 @LENGTH@ 26


UPD IfStatement@@if (!fieldMetadataBuilder.equals(newField)) {  fields.add(fieldMetadataBuilder);} @TO@ if (fieldMetadataBuilder.getDeclaredByMetadataId().equals(newField.getDeclaredByMetadataId()) && !fieldMetadataBuilder.getFieldName().equals(newField.getFieldName())) {  fields.add(fieldMetadataBuilder);} @AT@ 7428 @LENGTH@ 88
---INS InfixExpression@@fieldMetadataBuilder.getDeclaredByMetadataId().equals(newField.getDeclaredByMetadataId()) && !fieldMetadataBuilder.getFieldName().equals(newField.getFieldName()) @TO@ IfStatement@@if (!fieldMetadataBuilder.equals(newField)) {  fields.add(fieldMetadataBuilder);} @AT@ 7327 @LENGTH@ 161
------INS MethodInvocation@@fieldMetadataBuilder.getDeclaredByMetadataId().equals(newField.getDeclaredByMetadataId()) @TO@ InfixExpression@@fieldMetadataBuilder.getDeclaredByMetadataId().equals(newField.getDeclaredByMetadataId()) && !fieldMetadataBuilder.getFieldName().equals(newField.getFieldName()) @AT@ 7327 @LENGTH@ 89
---------INS MethodInvocation@@MethodName:getDeclaredByMetadataId:[] @TO@ MethodInvocation@@fieldMetadataBuilder.getDeclaredByMetadataId().equals(newField.getDeclaredByMetadataId()) @AT@ 7327 @LENGTH@ 46
---------INS SimpleName@@Name:fieldMetadataBuilder @TO@ MethodInvocation@@fieldMetadataBuilder.getDeclaredByMetadataId().equals(newField.getDeclaredByMetadataId()) @AT@ 7327 @LENGTH@ 20
---------INS SimpleName@@MethodName:equals:[newField.getDeclaredByMetadataId()] @TO@ MethodInvocation@@fieldMetadataBuilder.getDeclaredByMetadataId().equals(newField.getDeclaredByMetadataId()) @AT@ 7374 @LENGTH@ 42
------------INS MethodInvocation@@newField.getDeclaredByMetadataId() @TO@ SimpleName@@MethodName:equals:[newField.getDeclaredByMetadataId()] @AT@ 7381 @LENGTH@ 34
---------------INS SimpleName@@Name:newField @TO@ MethodInvocation@@newField.getDeclaredByMetadataId() @AT@ 7381 @LENGTH@ 8
---------------INS SimpleName@@MethodName:getDeclaredByMetadataId:[] @TO@ MethodInvocation@@newField.getDeclaredByMetadataId() @AT@ 7390 @LENGTH@ 25
------INS Operator@@&& @TO@ InfixExpression@@fieldMetadataBuilder.getDeclaredByMetadataId().equals(newField.getDeclaredByMetadataId()) && !fieldMetadataBuilder.getFieldName().equals(newField.getFieldName()) @AT@ 7416 @LENGTH@ 2
------INS PrefixExpression@@!fieldMetadataBuilder.getFieldName().equals(newField.getFieldName()) @TO@ InfixExpression@@fieldMetadataBuilder.getDeclaredByMetadataId().equals(newField.getDeclaredByMetadataId()) && !fieldMetadataBuilder.getFieldName().equals(newField.getFieldName()) @AT@ 7420 @LENGTH@ 68
---------MOV Operator@@! @TO@ PrefixExpression@@!fieldMetadataBuilder.getFieldName().equals(newField.getFieldName()) @AT@ 7432 @LENGTH@ 1
---------MOV MethodInvocation@@fieldMetadataBuilder.equals(newField) @TO@ PrefixExpression@@!fieldMetadataBuilder.getFieldName().equals(newField.getFieldName()) @AT@ 7433 @LENGTH@ 37
------------INS MethodInvocation@@MethodName:getFieldName:[] @TO@ MethodInvocation@@fieldMetadataBuilder.equals(newField) @AT@ 7421 @LENGTH@ 35
------------INS MethodInvocation@@MethodName:getFieldName:[] @TO@ MethodInvocation@@fieldMetadataBuilder.equals(newField) @AT@ 7421 @LENGTH@ 35
---DEL PrefixExpression@@!fieldMetadataBuilder.equals(newField) @AT@ 7432 @LENGTH@ 38


UPD EnhancedForStatement@@for (Class clazz : list) {  ExceptionPolicyKey key=new ExceptionPolicyKey(clazz,exceptionType.getOnWhen());  exceptionPolicies.put(key,exceptionType);} @TO@ for (Class clazz : list) {  RouteDefinition route=ProcessorDefinitionHelper.getRoute(exceptionType);  String routeId=route != null ? route.getId() : null;  ExceptionPolicyKey key=new ExceptionPolicyKey(routeId,clazz,exceptionType.getOnWhen());  exceptionPolicies.put(key,exceptionType);} @AT@ 2147 @LENGTH@ 186
---UPD VariableDeclarationStatement@@ExceptionPolicyKey key=new ExceptionPolicyKey(clazz,exceptionType.getOnWhen()); @TO@ ExceptionPolicyKey key=new ExceptionPolicyKey(routeId,clazz,exceptionType.getOnWhen()); @AT@ 2186 @LENGTH@ 82
------UPD VariableDeclarationFragment@@key=new ExceptionPolicyKey(clazz,exceptionType.getOnWhen()) @TO@ key=new ExceptionPolicyKey(routeId,clazz,exceptionType.getOnWhen()) @AT@ 2205 @LENGTH@ 62
---------UPD ClassInstanceCreation@@ExceptionPolicyKey[clazz, exceptionType.getOnWhen()] @TO@ ExceptionPolicyKey[routeId, clazz, exceptionType.getOnWhen()] @AT@ 2211 @LENGTH@ 56
------------INS SimpleName@@routeId @TO@ ClassInstanceCreation@@ExceptionPolicyKey[clazz, exceptionType.getOnWhen()] @AT@ 2492 @LENGTH@ 7
---INS VariableDeclarationStatement@@RouteDefinition route=ProcessorDefinitionHelper.getRoute(exceptionType); @TO@ EnhancedForStatement@@for (Class clazz : list) {  ExceptionPolicyKey key=new ExceptionPolicyKey(clazz,exceptionType.getOnWhen());  exceptionPolicies.put(key,exceptionType);} @AT@ 2290 @LENGTH@ 74
------INS SimpleType@@RouteDefinition @TO@ VariableDeclarationStatement@@RouteDefinition route=ProcessorDefinitionHelper.getRoute(exceptionType); @AT@ 2290 @LENGTH@ 15
------INS VariableDeclarationFragment@@route=ProcessorDefinitionHelper.getRoute(exceptionType) @TO@ VariableDeclarationStatement@@RouteDefinition route=ProcessorDefinitionHelper.getRoute(exceptionType); @AT@ 2306 @LENGTH@ 57
---------INS SimpleName@@route @TO@ VariableDeclarationFragment@@route=ProcessorDefinitionHelper.getRoute(exceptionType) @AT@ 2306 @LENGTH@ 5
---------INS MethodInvocation@@ProcessorDefinitionHelper.getRoute(exceptionType) @TO@ VariableDeclarationFragment@@route=ProcessorDefinitionHelper.getRoute(exceptionType) @AT@ 2314 @LENGTH@ 49
------------INS SimpleName@@Name:ProcessorDefinitionHelper @TO@ MethodInvocation@@ProcessorDefinitionHelper.getRoute(exceptionType) @AT@ 2314 @LENGTH@ 25
------------INS SimpleName@@MethodName:getRoute:[exceptionType] @TO@ MethodInvocation@@ProcessorDefinitionHelper.getRoute(exceptionType) @AT@ 2340 @LENGTH@ 23
---------------INS SimpleName@@exceptionType @TO@ SimpleName@@MethodName:getRoute:[exceptionType] @AT@ 2349 @LENGTH@ 13
---INS VariableDeclarationStatement@@String routeId=route != null ? route.getId() : null; @TO@ EnhancedForStatement@@for (Class clazz : list) {  ExceptionPolicyKey key=new ExceptionPolicyKey(clazz,exceptionType.getOnWhen());  exceptionPolicies.put(key,exceptionType);} @AT@ 2377 @LENGTH@ 54
------INS SimpleType@@String @TO@ VariableDeclarationStatement@@String routeId=route != null ? route.getId() : null; @AT@ 2377 @LENGTH@ 6
------INS VariableDeclarationFragment@@routeId=route != null ? route.getId() : null @TO@ VariableDeclarationStatement@@String routeId=route != null ? route.getId() : null; @AT@ 2384 @LENGTH@ 46
---------INS SimpleName@@routeId @TO@ VariableDeclarationFragment@@routeId=route != null ? route.getId() : null @AT@ 2384 @LENGTH@ 7
---------INS ConditionalExpression@@route != null ? route.getId() : null @TO@ VariableDeclarationFragment@@routeId=route != null ? route.getId() : null @AT@ 2394 @LENGTH@ 36
------------INS InfixExpression@@route != null @TO@ ConditionalExpression@@route != null ? route.getId() : null @AT@ 2394 @LENGTH@ 13
---------------INS SimpleName@@route @TO@ InfixExpression@@route != null @AT@ 2394 @LENGTH@ 5
---------------INS Operator@@!= @TO@ InfixExpression@@route != null @AT@ 2399 @LENGTH@ 2
---------------INS NullLiteral@@null @TO@ InfixExpression@@route != null @AT@ 2403 @LENGTH@ 4
------------INS MethodInvocation@@route.getId() @TO@ ConditionalExpression@@route != null ? route.getId() : null @AT@ 2410 @LENGTH@ 13
---------------INS SimpleName@@Name:route @TO@ MethodInvocation@@route.getId() @AT@ 2410 @LENGTH@ 5
---------------INS SimpleName@@MethodName:getId:[] @TO@ MethodInvocation@@route.getId() @AT@ 2416 @LENGTH@ 7
------------INS NullLiteral@@null @TO@ ConditionalExpression@@route != null ? route.getId() : null @AT@ 2426 @LENGTH@ 4


UPD MethodDeclaration@@public, void, MethodName:handle, ParsingContext ctx, OperationFormatException,  @TO@ public, void, MethodName:handle, ParsingContext ctx, CommandFormatException,  @AT@ 707 @LENGTH@ 182
---UPD SimpleType@@OperationFormatException @TO@ CommandFormatException @AT@ 773 @LENGTH@ 24


INS FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @TO@ TypeDeclaration@@[public]Person, LdapUserDetailsImpl @AT@ 1226 @LENGTH@ 90
---INS Modifier@@private @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @AT@ 1226 @LENGTH@ 7
---INS Modifier@@static @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @AT@ 1234 @LENGTH@ 6
---INS Modifier@@final @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @AT@ 1241 @LENGTH@ 5
---INS PrimitiveType@@long @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @AT@ 1247 @LENGTH@ 4
---INS VariableDeclarationFragment@@serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @AT@ 1252 @LENGTH@ 63
------INS SimpleName@@serialVersionUID @TO@ VariableDeclarationFragment@@serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID @AT@ 1252 @LENGTH@ 16
------INS QualifiedName@@SpringSecurityCoreVersion.SERIAL_VERSION_UID @TO@ VariableDeclarationFragment@@serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID @AT@ 1271 @LENGTH@ 44
---------INS SimpleName@@SpringSecurityCoreVersion @TO@ QualifiedName@@SpringSecurityCoreVersion.SERIAL_VERSION_UID @AT@ 1271 @LENGTH@ 25
---------INS SimpleName@@SERIAL_VERSION_UID @TO@ QualifiedName@@SpringSecurityCoreVersion.SERIAL_VERSION_UID @AT@ 1297 @LENGTH@ 18


UPD IfStatement@@if (!isGaeEnabled() && targetDirectory.contains(".gae.")) {  return;} @TO@ if (!isGaeEnabled() && targetDirectory.contains(".gae")) {  return;} @AT@ 5575 @LENGTH@ 75
---UPD InfixExpression@@!isGaeEnabled() && targetDirectory.contains(".gae.") @TO@ !isGaeEnabled() && targetDirectory.contains(".gae") @AT@ 5579 @LENGTH@ 52
------UPD MethodInvocation@@targetDirectory.contains(".gae.") @TO@ targetDirectory.contains(".gae") @AT@ 5598 @LENGTH@ 33
---------UPD SimpleName@@MethodName:contains:[".gae."] @TO@ MethodName:contains:[".gae"] @AT@ 5614 @LENGTH@ 17
------------UPD StringLiteral@@".gae." @TO@ ".gae" @AT@ 5623 @LENGTH@ 7


UPD VariableDeclarationStatement@@final ServiceController<?> controller=context.getController().getServiceContainer().getRequiredService(Services.JBOSS_DEPLOYMENT_UNIT.append(name).append(FIRST_PHASE_NAME)); @TO@ final ServiceController<?> controller=context.getController().getServiceContainer().getService(deploymentUnit.getServiceName().append(FIRST_PHASE_NAME)); @AT@ 4480 @LENGTH@ 175
---UPD VariableDeclarationFragment@@controller=context.getController().getServiceContainer().getRequiredService(Services.JBOSS_DEPLOYMENT_UNIT.append(name).append(FIRST_PHASE_NAME)) @TO@ controller=context.getController().getServiceContainer().getService(deploymentUnit.getServiceName().append(FIRST_PHASE_NAME)) @AT@ 4507 @LENGTH@ 147
------UPD MethodInvocation@@context.getController().getServiceContainer().getRequiredService(Services.JBOSS_DEPLOYMENT_UNIT.append(name).append(FIRST_PHASE_NAME)) @TO@ context.getController().getServiceContainer().getService(deploymentUnit.getServiceName().append(FIRST_PHASE_NAME)) @AT@ 4520 @LENGTH@ 134
---------UPD SimpleName@@MethodName:getRequiredService:[Services.JBOSS_DEPLOYMENT_UNIT.append(name).append(FIRST_PHASE_NAME)] @TO@ MethodName:getService:[deploymentUnit.getServiceName().append(FIRST_PHASE_NAME)] @AT@ 4566 @LENGTH@ 88
------------UPD MethodInvocation@@Services.JBOSS_DEPLOYMENT_UNIT.append(name).append(FIRST_PHASE_NAME) @TO@ deploymentUnit.getServiceName().append(FIRST_PHASE_NAME) @AT@ 4585 @LENGTH@ 68
---------------UPD MethodInvocation@@MethodName:append:[name] @TO@ MethodName:getServiceName:[] @AT@ 4585 @LENGTH@ 43
------------------DEL SimpleName@@name @AT@ 4623 @LENGTH@ 4
---------------DEL QualifiedName@@Name:Services.JBOSS_DEPLOYMENT_UNIT @AT@ 4585 @LENGTH@ 30
---------------INS SimpleName@@Name:deploymentUnit @TO@ MethodInvocation@@Services.JBOSS_DEPLOYMENT_UNIT.append(name).append(FIRST_PHASE_NAME) @AT@ 4594 @LENGTH@ 14


UPD TryStatement@@try {  SecurityActions.setContextClassLoader(deployment.getModule().getClassLoader());  bootstrap.startContainer(environment,deployment);  bootstrap.startInitialization();  bootstrap.deployBeans();  bootstrap.validateBeans();  bootstrap.endInitialization();  started=true;}  finally {  SecurityActions.setContextClassLoader(oldTccl);} @TO@ try {  SecurityActions.setContextClassLoader(deployment.getModule().getClassLoader());  bootstrap.startContainer(environment,deployment);  bootstrap.startInitialization();  bootstrap.deployBeans();  bootstrap.validateBeans();  bootstrap.endInitialization();}  finally {  SecurityActions.setContextClassLoader(oldTccl);} @AT@ 2968 @LENGTH@ 442


INS MethodDeclaration@@public, ComponentConfiguration, MethodName:createConfiguration, EEModuleConfiguration moduleConfiguration,  @TO@ TypeDeclaration@@[public]MessageDrivenComponentDescription, EJBComponentDescription @AT@ 2896 @LENGTH@ 230
---INS Modifier@@public @TO@ MethodDeclaration@@public, ComponentConfiguration, MethodName:createConfiguration, EEModuleConfiguration moduleConfiguration,  @AT@ 2896 @LENGTH@ 6
---INS SimpleType@@ComponentConfiguration @TO@ MethodDeclaration@@public, ComponentConfiguration, MethodName:createConfiguration, EEModuleConfiguration moduleConfiguration,  @AT@ 2903 @LENGTH@ 22
---INS SimpleName@@MethodName:createConfiguration @TO@ MethodDeclaration@@public, ComponentConfiguration, MethodName:createConfiguration, EEModuleConfiguration moduleConfiguration,  @AT@ 2926 @LENGTH@ 19
---INS SingleVariableDeclaration@@EEModuleConfiguration moduleConfiguration @TO@ MethodDeclaration@@public, ComponentConfiguration, MethodName:createConfiguration, EEModuleConfiguration moduleConfiguration,  @AT@ 2946 @LENGTH@ 41
------INS SimpleType@@EEModuleConfiguration @TO@ SingleVariableDeclaration@@EEModuleConfiguration moduleConfiguration @AT@ 2946 @LENGTH@ 21
------INS SimpleName@@moduleConfiguration @TO@ SingleVariableDeclaration@@EEModuleConfiguration moduleConfiguration @AT@ 2968 @LENGTH@ 19
---INS ReturnStatement@@ClassInstanceCreation:new MessageDrivenComponentConfiguration(this,moduleConfiguration.getClassConfiguration(getComponentClassName())) @TO@ MethodDeclaration@@public, ComponentConfiguration, MethodName:createConfiguration, EEModuleConfiguration moduleConfiguration,  @AT@ 2999 @LENGTH@ 121
------INS ClassInstanceCreation@@MessageDrivenComponentConfiguration[this, moduleConfiguration.getClassConfiguration(getComponentClassName())] @TO@ ReturnStatement@@ClassInstanceCreation:new MessageDrivenComponentConfiguration(this,moduleConfiguration.getClassConfiguration(getComponentClassName())) @AT@ 3006 @LENGTH@ 113
---------INS New@@new @TO@ ClassInstanceCreation@@MessageDrivenComponentConfiguration[this, moduleConfiguration.getClassConfiguration(getComponentClassName())] @AT@ 3006 @LENGTH@ 3
---------INS SimpleType@@MessageDrivenComponentConfiguration @TO@ ClassInstanceCreation@@MessageDrivenComponentConfiguration[this, moduleConfiguration.getClassConfiguration(getComponentClassName())] @AT@ 3010 @LENGTH@ 35
---------INS ThisExpression@@this @TO@ ClassInstanceCreation@@MessageDrivenComponentConfiguration[this, moduleConfiguration.getClassConfiguration(getComponentClassName())] @AT@ 3046 @LENGTH@ 4
---------INS MethodInvocation@@moduleConfiguration.getClassConfiguration(getComponentClassName()) @TO@ ClassInstanceCreation@@MessageDrivenComponentConfiguration[this, moduleConfiguration.getClassConfiguration(getComponentClassName())] @AT@ 3052 @LENGTH@ 66
------------INS SimpleName@@Name:moduleConfiguration @TO@ MethodInvocation@@moduleConfiguration.getClassConfiguration(getComponentClassName()) @AT@ 3052 @LENGTH@ 19
------------INS SimpleName@@MethodName:getClassConfiguration:[getComponentClassName()] @TO@ MethodInvocation@@moduleConfiguration.getClassConfiguration(getComponentClassName()) @AT@ 3072 @LENGTH@ 46
---------------INS MethodInvocation@@MethodName:getComponentClassName:[] @TO@ SimpleName@@MethodName:getClassConfiguration:[getComponentClassName()] @AT@ 3094 @LENGTH@ 23


INS MethodDeclaration@@public, void, MethodName:testPrimitivesAsIds,  @TO@ TypeDeclaration@@[public]MappingTests,  @AT@ 12748 @LENGTH@ 230
---INS Modifier@@public @TO@ MethodDeclaration@@public, void, MethodName:testPrimitivesAsIds,  @AT@ 12748 @LENGTH@ 6
---INS PrimitiveType@@void @TO@ MethodDeclaration@@public, void, MethodName:testPrimitivesAsIds,  @AT@ 12755 @LENGTH@ 4
---INS SimpleName@@MethodName:testPrimitivesAsIds @TO@ MethodDeclaration@@public, void, MethodName:testPrimitivesAsIds,  @AT@ 12760 @LENGTH@ 19
---INS VariableDeclarationStatement@@PrimitiveId p=new PrimitiveId(1); @TO@ MethodDeclaration@@public, void, MethodName:testPrimitivesAsIds,  @AT@ 12786 @LENGTH@ 35
------INS SimpleType@@PrimitiveId @TO@ VariableDeclarationStatement@@PrimitiveId p=new PrimitiveId(1); @AT@ 12786 @LENGTH@ 11
------INS VariableDeclarationFragment@@p=new PrimitiveId(1) @TO@ VariableDeclarationStatement@@PrimitiveId p=new PrimitiveId(1); @AT@ 12798 @LENGTH@ 22
---------INS SimpleName@@p @TO@ VariableDeclarationFragment@@p=new PrimitiveId(1) @AT@ 12798 @LENGTH@ 1
---------INS ClassInstanceCreation@@PrimitiveId[1] @TO@ VariableDeclarationFragment@@p=new PrimitiveId(1) @AT@ 12802 @LENGTH@ 18
------------INS New@@new @TO@ ClassInstanceCreation@@PrimitiveId[1] @AT@ 12802 @LENGTH@ 3
------------INS SimpleType@@PrimitiveId @TO@ ClassInstanceCreation@@PrimitiveId[1] @AT@ 12806 @LENGTH@ 11
------------INS NumberLiteral@@1 @TO@ ClassInstanceCreation@@PrimitiveId[1] @AT@ 12818 @LENGTH@ 1
---INS ExpressionStatement@@MethodInvocation:p.setText("test text") @TO@ MethodDeclaration@@public, void, MethodName:testPrimitivesAsIds,  @AT@ 12824 @LENGTH@ 23
------INS MethodInvocation@@p.setText("test text") @TO@ ExpressionStatement@@MethodInvocation:p.setText("test text") @AT@ 12824 @LENGTH@ 22
---------INS SimpleName@@Name:p @TO@ MethodInvocation@@p.setText("test text") @AT@ 12824 @LENGTH@ 1
---------INS SimpleName@@MethodName:setText:["test text"] @TO@ MethodInvocation@@p.setText("test text") @AT@ 12826 @LENGTH@ 20
------------INS StringLiteral@@"test text" @TO@ SimpleName@@MethodName:setText:["test text"] @AT@ 12834 @LENGTH@ 11
---INS ExpressionStatement@@MethodInvocation:template.save(p) @TO@ MethodDeclaration@@public, void, MethodName:testPrimitivesAsIds,  @AT@ 12851 @LENGTH@ 17
------INS MethodInvocation@@template.save(p) @TO@ ExpressionStatement@@MethodInvocation:template.save(p) @AT@ 12851 @LENGTH@ 16
---------INS SimpleName@@Name:template @TO@ MethodInvocation@@template.save(p) @AT@ 12851 @LENGTH@ 8
---------INS SimpleName@@MethodName:save:[p] @TO@ MethodInvocation@@template.save(p) @AT@ 12860 @LENGTH@ 7
------------INS SimpleName@@p @TO@ SimpleName@@MethodName:save:[p] @AT@ 12865 @LENGTH@ 1
---INS VariableDeclarationStatement@@PrimitiveId p2=template.findOne(query(where("id").is(1)),PrimitiveId.class); @TO@ MethodDeclaration@@public, void, MethodName:testPrimitivesAsIds,  @AT@ 12872 @LENGTH@ 79
------INS SimpleType@@PrimitiveId @TO@ VariableDeclarationStatement@@PrimitiveId p2=template.findOne(query(where("id").is(1)),PrimitiveId.class); @AT@ 12872 @LENGTH@ 11
------INS VariableDeclarationFragment@@p2=template.findOne(query(where("id").is(1)),PrimitiveId.class) @TO@ VariableDeclarationStatement@@PrimitiveId p2=template.findOne(query(where("id").is(1)),PrimitiveId.class); @AT@ 12884 @LENGTH@ 66
---------INS SimpleName@@p2 @TO@ VariableDeclarationFragment@@p2=template.findOne(query(where("id").is(1)),PrimitiveId.class) @AT@ 12884 @LENGTH@ 2
---------INS MethodInvocation@@template.findOne(query(where("id").is(1)),PrimitiveId.class) @TO@ VariableDeclarationFragment@@p2=template.findOne(query(where("id").is(1)),PrimitiveId.class) @AT@ 12889 @LENGTH@ 61
------------INS SimpleName@@Name:template @TO@ MethodInvocation@@template.findOne(query(where("id").is(1)),PrimitiveId.class) @AT@ 12889 @LENGTH@ 8
------------INS SimpleName@@MethodName:findOne:[query(where("id").is(1)), PrimitiveId.class] @TO@ MethodInvocation@@template.findOne(query(where("id").is(1)),PrimitiveId.class) @AT@ 12898 @LENGTH@ 52
---------------INS MethodInvocation@@query(where("id").is(1)) @TO@ SimpleName@@MethodName:findOne:[query(where("id").is(1)), PrimitiveId.class] @AT@ 12906 @LENGTH@ 24
------------------INS SimpleName@@MethodName:query:[where("id").is(1)] @TO@ MethodInvocation@@query(where("id").is(1)) @AT@ 12906 @LENGTH@ 24
---------------------INS MethodInvocation@@where("id").is(1) @TO@ SimpleName@@MethodName:query:[where("id").is(1)] @AT@ 12912 @LENGTH@ 17
------------------------INS MethodInvocation@@MethodName:where:["id"] @TO@ MethodInvocation@@where("id").is(1) @AT@ 12912 @LENGTH@ 11
---------------------------INS StringLiteral@@"id" @TO@ MethodInvocation@@MethodName:where:["id"] @AT@ 12918 @LENGTH@ 4
------------------------INS SimpleName@@MethodName:is:[1] @TO@ MethodInvocation@@where("id").is(1) @AT@ 12924 @LENGTH@ 5
---------------------------INS NumberLiteral@@1 @TO@ SimpleName@@MethodName:is:[1] @AT@ 12927 @LENGTH@ 1
---------------INS TypeLiteral@@PrimitiveId.class @TO@ SimpleName@@MethodName:findOne:[query(where("id").is(1)), PrimitiveId.class] @AT@ 12932 @LENGTH@ 17
---INS ExpressionStatement@@MethodInvocation:assertNotNull(p2) @TO@ MethodDeclaration@@public, void, MethodName:testPrimitivesAsIds,  @AT@ 12954 @LENGTH@ 18
------INS MethodInvocation@@assertNotNull(p2) @TO@ ExpressionStatement@@MethodInvocation:assertNotNull(p2) @AT@ 12954 @LENGTH@ 17
---------INS SimpleName@@MethodName:assertNotNull:[p2] @TO@ MethodInvocation@@assertNotNull(p2) @AT@ 12954 @LENGTH@ 17
------------INS SimpleName@@p2 @TO@ SimpleName@@MethodName:assertNotNull:[p2] @AT@ 12968 @LENGTH@ 2


DEL VariableDeclarationStatement@@FileDetails fileDetails=fileManager.readFile(persistenceXmlPath); @AT@ 45675 @LENGTH@ 67
---DEL SimpleType@@FileDetails @AT@ 45675 @LENGTH@ 11
---DEL VariableDeclarationFragment@@fileDetails=fileManager.readFile(persistenceXmlPath) @AT@ 45687 @LENGTH@ 54
------DEL SimpleName@@fileDetails @AT@ 45687 @LENGTH@ 11
------DEL MethodInvocation@@fileManager.readFile(persistenceXmlPath) @AT@ 45701 @LENGTH@ 40
---------DEL SimpleName@@Name:fileManager @AT@ 45701 @LENGTH@ 11
---------DEL SimpleName@@MethodName:readFile:[persistenceXmlPath] @AT@ 45713 @LENGTH@ 28
------------DEL SimpleName@@persistenceXmlPath @AT@ 45722 @LENGTH@ 18


UPD MethodDeclaration@@protected, void, MethodName:processDeployment, final String hostName, final WarMetaData warMetaData, final DeploymentUnit context, DeploymentUnitProcessingException,  @TO@ protected, void, MethodName:processDeployment, final String hostName, final WarMetaData warMetaData, final DeploymentPhaseContext phaseContext, DeploymentUnitProcessingException,  @AT@ 3252 @LENGTH@ 3303
---UPD SingleVariableDeclaration@@final DeploymentUnit context @TO@ final DeploymentPhaseContext phaseContext @AT@ 3339 @LENGTH@ 28
------UPD SimpleType@@DeploymentUnit @TO@ DeploymentPhaseContext @AT@ 3345 @LENGTH@ 14
------UPD SimpleName@@context @TO@ phaseContext @AT@ 3360 @LENGTH@ 7
---UPD VariableDeclarationStatement@@final VirtualFile deploymentRoot=context.getAttachment(Attachments.DEPLOYMENT_ROOT); @TO@ final VirtualFile deploymentRoot=phaseContext.getAttachment(Attachments.DEPLOYMENT_ROOT).getRoot(); @AT@ 3420 @LENGTH@ 86
------UPD VariableDeclarationFragment@@deploymentRoot=context.getAttachment(Attachments.DEPLOYMENT_ROOT) @TO@ deploymentRoot=phaseContext.getAttachment(Attachments.DEPLOYMENT_ROOT).getRoot() @AT@ 3438 @LENGTH@ 67
---------UPD MethodInvocation@@context.getAttachment(Attachments.DEPLOYMENT_ROOT) @TO@ phaseContext.getAttachment(Attachments.DEPLOYMENT_ROOT).getRoot() @AT@ 3455 @LENGTH@ 50
------------UPD SimpleName@@Name:context @TO@ Name:phaseContext @AT@ 3455 @LENGTH@ 7
------------DEL SimpleName@@MethodName:getAttachment:[Attachments.DEPLOYMENT_ROOT] @AT@ 3463 @LENGTH@ 42
---------------DEL QualifiedName@@Attachments.DEPLOYMENT_ROOT @AT@ 3477 @LENGTH@ 27
------------INS MethodInvocation@@MethodName:getAttachment:[Attachments.DEPLOYMENT_ROOT] @TO@ MethodInvocation@@context.getAttachment(Attachments.DEPLOYMENT_ROOT) @AT@ 3547 @LENGTH@ 55
---------------INS QualifiedName@@Attachments.DEPLOYMENT_ROOT @TO@ MethodInvocation@@MethodName:getAttachment:[Attachments.DEPLOYMENT_ROOT] @AT@ 3574 @LENGTH@ 27
------------------MOV SimpleName@@Attachments @TO@ QualifiedName@@Attachments.DEPLOYMENT_ROOT @AT@ 3477 @LENGTH@ 11
------------------MOV SimpleName@@DEPLOYMENT_ROOT @TO@ QualifiedName@@Attachments.DEPLOYMENT_ROOT @AT@ 3489 @LENGTH@ 15
------------INS SimpleName@@MethodName:getRoot:[] @TO@ MethodInvocation@@context.getAttachment(Attachments.DEPLOYMENT_ROOT) @AT@ 3603 @LENGTH@ 9
---UPD VariableDeclarationStatement@@final Module module=context.getAttachment(ModuleDeploymentProcessor.MODULE_ATTACHMENT_KEY); @TO@ final Module module=phaseContext.getAttachment(ModuleDeploymentProcessor.MODULE_ATTACHMENT_KEY); @AT@ 3515 @LENGTH@ 93
------UPD VariableDeclarationFragment@@module=context.getAttachment(ModuleDeploymentProcessor.MODULE_ATTACHMENT_KEY) @TO@ module=phaseContext.getAttachment(ModuleDeploymentProcessor.MODULE_ATTACHMENT_KEY) @AT@ 3528 @LENGTH@ 79
---------UPD MethodInvocation@@context.getAttachment(ModuleDeploymentProcessor.MODULE_ATTACHMENT_KEY) @TO@ phaseContext.getAttachment(ModuleDeploymentProcessor.MODULE_ATTACHMENT_KEY) @AT@ 3537 @LENGTH@ 70
------------UPD SimpleName@@Name:context @TO@ Name:phaseContext @AT@ 3537 @LENGTH@ 7
---UPD VariableDeclarationStatement@@final ContextConfig config=new JBossContextConfig(context); @TO@ final ContextConfig config=new JBossContextConfig(phaseContext.getDeploymentUnit()); @AT@ 4020 @LENGTH@ 61
------UPD VariableDeclarationFragment@@config=new JBossContextConfig(context) @TO@ config=new JBossContextConfig(phaseContext.getDeploymentUnit()) @AT@ 4040 @LENGTH@ 40
---------UPD ClassInstanceCreation@@JBossContextConfig[context] @TO@ JBossContextConfig[phaseContext.getDeploymentUnit()] @AT@ 4049 @LENGTH@ 31
------------DEL SimpleName@@context @AT@ 4072 @LENGTH@ 7
------------INS MethodInvocation@@phaseContext.getDeploymentUnit() @TO@ ClassInstanceCreation@@JBossContextConfig[context] @AT@ 4184 @LENGTH@ 32
---------------INS SimpleName@@Name:phaseContext @TO@ MethodInvocation@@phaseContext.getDeploymentUnit() @AT@ 4184 @LENGTH@ 12
---------------INS SimpleName@@MethodName:getDeploymentUnit:[] @TO@ MethodInvocation@@phaseContext.getDeploymentUnit() @AT@ 4197 @LENGTH@ 19
---UPD VariableDeclarationStatement@@final String deploymentName=context.getName(); @TO@ final String deploymentName=phaseContext.getDeploymentUnit().getName(); @AT@ 4409 @LENGTH@ 48
------UPD VariableDeclarationFragment@@deploymentName=context.getName() @TO@ deploymentName=phaseContext.getDeploymentUnit().getName() @AT@ 4422 @LENGTH@ 34
---------UPD MethodInvocation@@context.getName() @TO@ phaseContext.getDeploymentUnit().getName() @AT@ 4439 @LENGTH@ 17
------------UPD SimpleName@@Name:context @TO@ Name:phaseContext @AT@ 4439 @LENGTH@ 7
------------INS MethodInvocation@@MethodName:getDeploymentUnit:[] @TO@ MethodInvocation@@context.getName() @AT@ 4576 @LENGTH@ 32
---UPD VariableDeclarationStatement@@final ServiceTarget target=context.getBatchBuilder(); @TO@ final ServiceTarget target=phaseContext.getServiceTarget(); @AT@ 5990 @LENGTH@ 55
------UPD VariableDeclarationFragment@@target=context.getBatchBuilder() @TO@ target=phaseContext.getServiceTarget() @AT@ 6010 @LENGTH@ 34
---------UPD MethodInvocation@@context.getBatchBuilder() @TO@ phaseContext.getServiceTarget() @AT@ 6019 @LENGTH@ 25
------------UPD SimpleName@@Name:context @TO@ Name:phaseContext @AT@ 6019 @LENGTH@ 7
------------UPD SimpleName@@MethodName:getBatchBuilder:[] @TO@ MethodName:getServiceTarget:[] @AT@ 6027 @LENGTH@ 17


INS MethodDeclaration@@public, void, MethodName:setUp, Exception,  @TO@ TypeDeclaration@@[public]MailFetchSizeZeroTest, CamelTestSupport @AT@ 1388 @LENGTH@ 93
---INS Modifier@@public @TO@ MethodDeclaration@@public, void, MethodName:setUp, Exception,  @AT@ 1388 @LENGTH@ 6
---INS PrimitiveType@@void @TO@ MethodDeclaration@@public, void, MethodName:setUp, Exception,  @AT@ 1395 @LENGTH@ 4
---INS SimpleName@@MethodName:setUp @TO@ MethodDeclaration@@public, void, MethodName:setUp, Exception,  @AT@ 1400 @LENGTH@ 5
---INS SimpleType@@Exception @TO@ MethodDeclaration@@public, void, MethodName:setUp, Exception,  @AT@ 1415 @LENGTH@ 9
---INS ExpressionStatement@@MethodInvocation:prepareMailbox() @TO@ MethodDeclaration@@public, void, MethodName:setUp, Exception,  @AT@ 1435 @LENGTH@ 17
------INS MethodInvocation@@MethodName:prepareMailbox:[] @TO@ ExpressionStatement@@MethodInvocation:prepareMailbox() @AT@ 1435 @LENGTH@ 16
---INS ExpressionStatement@@SuperMethodInvocation:super.setUp() @TO@ MethodDeclaration@@public, void, MethodName:setUp, Exception,  @AT@ 1461 @LENGTH@ 14
------INS SuperMethodInvocation@@super.setUp() @TO@ ExpressionStatement@@SuperMethodInvocation:super.setUp() @AT@ 1461 @LENGTH@ 13
---------INS SimpleName@@MethodName:setUp:[] @TO@ SuperMethodInvocation@@super.setUp() @AT@ 1467 @LENGTH@ 5


UPD TypeDeclaration@@[public]JuelTest, TestCase @TO@ [public]JuelTest, Assert @AT@ 1106 @LENGTH@ 451
---UPD SimpleType@@TestCase @TO@ Assert @AT@ 1136 @LENGTH@ 8


INS MethodDeclaration@@public, static, void, MethodName:detachDeployment, final DeploymentUnit context,  @TO@ TypeDeclaration@@[public]OSGiDeploymentAttachment,  @AT@ 1765 @LENGTH@ 112
---INS Modifier@@public @TO@ MethodDeclaration@@public, static, void, MethodName:detachDeployment, final DeploymentUnit context,  @AT@ 1765 @LENGTH@ 6
---INS Modifier@@static @TO@ MethodDeclaration@@public, static, void, MethodName:detachDeployment, final DeploymentUnit context,  @AT@ 1772 @LENGTH@ 6
---INS PrimitiveType@@void @TO@ MethodDeclaration@@public, static, void, MethodName:detachDeployment, final DeploymentUnit context,  @AT@ 1779 @LENGTH@ 4
---INS SimpleName@@MethodName:detachDeployment @TO@ MethodDeclaration@@public, static, void, MethodName:detachDeployment, final DeploymentUnit context,  @AT@ 1784 @LENGTH@ 16
---INS SingleVariableDeclaration@@final DeploymentUnit context @TO@ MethodDeclaration@@public, static, void, MethodName:detachDeployment, final DeploymentUnit context,  @AT@ 1801 @LENGTH@ 28
------INS Modifier@@final @TO@ SingleVariableDeclaration@@final DeploymentUnit context @AT@ 1801 @LENGTH@ 5
------INS SimpleType@@DeploymentUnit @TO@ SingleVariableDeclaration@@final DeploymentUnit context @AT@ 1807 @LENGTH@ 14
------INS SimpleName@@context @TO@ SingleVariableDeclaration@@final DeploymentUnit context @AT@ 1822 @LENGTH@ 7
---INS ExpressionStatement@@MethodInvocation:context.removeAttachment(KEY) @TO@ MethodDeclaration@@public, static, void, MethodName:detachDeployment, final DeploymentUnit context,  @AT@ 1841 @LENGTH@ 30
------INS MethodInvocation@@context.removeAttachment(KEY) @TO@ ExpressionStatement@@MethodInvocation:context.removeAttachment(KEY) @AT@ 1841 @LENGTH@ 29
---------INS SimpleName@@Name:context @TO@ MethodInvocation@@context.removeAttachment(KEY) @AT@ 1841 @LENGTH@ 7
---------INS SimpleName@@MethodName:removeAttachment:[KEY] @TO@ MethodInvocation@@context.removeAttachment(KEY) @AT@ 1849 @LENGTH@ 21
------------INS SimpleName@@KEY @TO@ SimpleName@@MethodName:removeAttachment:[KEY] @AT@ 1866 @LENGTH@ 3


INS MethodDeclaration@@private, voidMethodName:JpaClassUtils,  @TO@ TypeDeclaration@@[public, abstract]JpaClassUtils,  @AT@ 986 @LENGTH@ 32
---INS Modifier@@private @TO@ MethodDeclaration@@private, voidMethodName:JpaClassUtils,  @AT@ 986 @LENGTH@ 7
---INS SimpleName@@MethodName:JpaClassUtils @TO@ MethodDeclaration@@private, voidMethodName:JpaClassUtils,  @AT@ 994 @LENGTH@ 13


INS MethodDeclaration@@public, String, MethodName:toString,  @TO@ TypeDeclaration@@[private, static, final]CamelThreadFactory, [ThreadFactory] @AT@ 17401 @LENGTH@ 91
---INS Modifier@@public @TO@ MethodDeclaration@@public, String, MethodName:toString,  @AT@ 17401 @LENGTH@ 6
---INS SimpleType@@String @TO@ MethodDeclaration@@public, String, MethodName:toString,  @AT@ 17408 @LENGTH@ 6
---INS SimpleName@@MethodName:toString @TO@ MethodDeclaration@@public, String, MethodName:toString,  @AT@ 17415 @LENGTH@ 8
---INS ReturnStatement@@InfixExpression:"CamelThreadFactory[" + name + "]" @TO@ MethodDeclaration@@public, String, MethodName:toString,  @AT@ 17440 @LENGTH@ 42
------INS InfixExpression@@"CamelThreadFactory[" + name + "]" @TO@ ReturnStatement@@InfixExpression:"CamelThreadFactory[" + name + "]" @AT@ 17447 @LENGTH@ 34
---------INS StringLiteral@@"CamelThreadFactory[" @TO@ InfixExpression@@"CamelThreadFactory[" + name + "]" @AT@ 17447 @LENGTH@ 21
---------INS Operator@@+ @TO@ InfixExpression@@"CamelThreadFactory[" + name + "]" @AT@ 17468 @LENGTH@ 1
---------INS SimpleName@@name @TO@ InfixExpression@@"CamelThreadFactory[" + name + "]" @AT@ 17471 @LENGTH@ 4
---------INS StringLiteral@@"]" @TO@ InfixExpression@@"CamelThreadFactory[" + name + "]" @AT@ 17478 @LENGTH@ 3


UPD ReturnStatement@@ClassInstanceCreation:new FacebookProfile(id,firstName,lastName,email) @TO@ ClassInstanceCreation:new FacebookProfile(id,name,firstName,lastName,email) @AT@ 3091 @LENGTH@ 59
---UPD ClassInstanceCreation@@FacebookProfile[id, firstName, lastName, email] @TO@ FacebookProfile[id, name, firstName, lastName, email] @AT@ 3098 @LENGTH@ 51
------INS SimpleName@@name @TO@ ClassInstanceCreation@@FacebookProfile[id, firstName, lastName, email] @AT@ 3178 @LENGTH@ 4


INS MethodDeclaration@@List<User>, MethodName:findByLastnameNull,  @TO@ TypeDeclaration@@[public]UserRepository, [JpaRepository<User,Integer>, UserRepositoryCustom] @AT@ 5787 @LENGTH@ 21
---INS ParameterizedType@@List<User> @TO@ MethodDeclaration@@List<User>, MethodName:findByLastnameNull,  @AT@ 5776 @LENGTH@ 10
------INS SimpleType@@List @TO@ ParameterizedType@@List<User> @AT@ 5776 @LENGTH@ 4
------INS SimpleType@@User @TO@ ParameterizedType@@List<User> @AT@ 5781 @LENGTH@ 4
---INS SimpleName@@MethodName:findByLastnameNull @TO@ MethodDeclaration@@List<User>, MethodName:findByLastnameNull,  @AT@ 5787 @LENGTH@ 18


UPD ExpressionStatement@@MethodInvocation:assertEquals(7,set.size()) @TO@ MethodInvocation:assertTrue("Should be at least 7 endpoints, was: " + set.size(),set.size() >= 7) @AT@ 2618 @LENGTH@ 28
---UPD MethodInvocation@@assertEquals(7,set.size()) @TO@ assertTrue("Should be at least 7 endpoints, was: " + set.size(),set.size() >= 7) @AT@ 2618 @LENGTH@ 27
------UPD SimpleName@@MethodName:assertEquals:[7, set.size()] @TO@ MethodName:assertTrue:["Should be at least 7 endpoints, was: " + set.size(), set.size() >= 7] @AT@ 2618 @LENGTH@ 27
---------INS InfixExpression@@"Should be at least 7 endpoints, was: " + set.size() @TO@ SimpleName@@MethodName:assertEquals:[7, set.size()] @AT@ 2629 @LENGTH@ 52
------------INS StringLiteral@@"Should be at least 7 endpoints, was: " @TO@ InfixExpression@@"Should be at least 7 endpoints, was: " + set.size() @AT@ 2629 @LENGTH@ 39
------------INS Operator@@+ @TO@ InfixExpression@@"Should be at least 7 endpoints, was: " + set.size() @AT@ 2668 @LENGTH@ 1
------------INS MethodInvocation@@set.size() @TO@ InfixExpression@@"Should be at least 7 endpoints, was: " + set.size() @AT@ 2671 @LENGTH@ 10
---------------MOV SimpleName@@Name:set @TO@ MethodInvocation@@set.size() @AT@ 2634 @LENGTH@ 3
---------------MOV SimpleName@@Name:set @TO@ MethodInvocation@@set.size() @AT@ 2634 @LENGTH@ 3
---------------MOV SimpleName@@MethodName:size:[] @TO@ MethodInvocation@@set.size() @AT@ 2638 @LENGTH@ 6
---------------MOV SimpleName@@MethodName:size:[] @TO@ MethodInvocation@@set.size() @AT@ 2638 @LENGTH@ 6
---------DEL NumberLiteral@@7 @AT@ 2631 @LENGTH@ 1
---------DEL MethodInvocation@@set.size() @AT@ 2634 @LENGTH@ 10
---------INS InfixExpression@@set.size() >= 7 @TO@ SimpleName@@MethodName:assertEquals:[7, set.size()] @AT@ 2683 @LENGTH@ 15
------------INS MethodInvocation@@set.size() @TO@ InfixExpression@@set.size() >= 7 @AT@ 2683 @LENGTH@ 10
---------------INS SimpleName@@Name:set @TO@ MethodInvocation@@set.size() @AT@ 2683 @LENGTH@ 3
---------------INS SimpleName@@MethodName:size:[] @TO@ MethodInvocation@@set.size() @AT@ 2687 @LENGTH@ 6
------------INS Operator@@>= @TO@ InfixExpression@@set.size() >= 7 @AT@ 2693 @LENGTH@ 2
------------INS NumberLiteral@@7 @TO@ InfixExpression@@set.size() >= 7 @AT@ 2697 @LENGTH@ 1


INS ExpressionStatement@@MethodInvocation:Mailbox.clearAll() @TO@ MethodDeclaration@@public, void, MethodName:testCustomContentTypeResolver, Exception,  @AT@ 1542 @LENGTH@ 19
---INS MethodInvocation@@Mailbox.clearAll() @TO@ ExpressionStatement@@MethodInvocation:Mailbox.clearAll() @AT@ 1542 @LENGTH@ 18
------INS SimpleName@@Name:Mailbox @TO@ MethodInvocation@@Mailbox.clearAll() @AT@ 1542 @LENGTH@ 7
------INS SimpleName@@MethodName:clearAll:[] @TO@ MethodInvocation@@Mailbox.clearAll() @AT@ 1550 @LENGTH@ 10


INS MethodDeclaration@@public, void, MethodName:setUp, Exception,  @TO@ TypeDeclaration@@[public]MailDoNotDeleteIfProcessFailsTest, CamelTestSupport @AT@ 1452 @LENGTH@ 93
---INS Modifier@@public @TO@ MethodDeclaration@@public, void, MethodName:setUp, Exception,  @AT@ 1452 @LENGTH@ 6
---INS PrimitiveType@@void @TO@ MethodDeclaration@@public, void, MethodName:setUp, Exception,  @AT@ 1459 @LENGTH@ 4
---INS SimpleName@@MethodName:setUp @TO@ MethodDeclaration@@public, void, MethodName:setUp, Exception,  @AT@ 1464 @LENGTH@ 5
---INS SimpleType@@Exception @TO@ MethodDeclaration@@public, void, MethodName:setUp, Exception,  @AT@ 1479 @LENGTH@ 9
---INS ExpressionStatement@@MethodInvocation:prepareMailbox() @TO@ MethodDeclaration@@public, void, MethodName:setUp, Exception,  @AT@ 1499 @LENGTH@ 17
------INS MethodInvocation@@MethodName:prepareMailbox:[] @TO@ ExpressionStatement@@MethodInvocation:prepareMailbox() @AT@ 1499 @LENGTH@ 16
---INS ExpressionStatement@@SuperMethodInvocation:super.setUp() @TO@ MethodDeclaration@@public, void, MethodName:setUp, Exception,  @AT@ 1525 @LENGTH@ 14
------INS SuperMethodInvocation@@super.setUp() @TO@ ExpressionStatement@@SuperMethodInvocation:super.setUp() @AT@ 1525 @LENGTH@ 13
---------INS SimpleName@@MethodName:setUp:[] @TO@ SuperMethodInvocation@@super.setUp() @AT@ 1531 @LENGTH@ 5


UPD VariableDeclarationStatement@@Method method=UserRepository.class.getMethod("findByFirstname",Pageable.class,String.class); @TO@ Method method=UserRepository.class.getMethod("findByLastname",Pageable.class,String.class); @AT@ 5861 @LENGTH@ 136
---UPD VariableDeclarationFragment@@method=UserRepository.class.getMethod("findByFirstname",Pageable.class,String.class) @TO@ method=UserRepository.class.getMethod("findByLastname",Pageable.class,String.class) @AT@ 5868 @LENGTH@ 128
------UPD MethodInvocation@@UserRepository.class.getMethod("findByFirstname",Pageable.class,String.class) @TO@ UserRepository.class.getMethod("findByLastname",Pageable.class,String.class) @AT@ 5893 @LENGTH@ 103
---------UPD SimpleName@@MethodName:getMethod:["findByFirstname", Pageable.class, String.class] @TO@ MethodName:getMethod:["findByLastname", Pageable.class, String.class] @AT@ 5914 @LENGTH@ 82
------------UPD StringLiteral@@"findByFirstname" @TO@ "findByLastname" @AT@ 5924 @LENGTH@ 17


INS FieldDeclaration@@public, static, final, AttachmentKey<ModuleIdentifier>, [MODULE_IDENTIFIER=AttachmentKey.create(ModuleIdentifier.class)] @TO@ TypeDeclaration@@[public, final]Attachments,  @AT@ 6412 @LENGTH@ 117
---INS Modifier@@public @TO@ FieldDeclaration@@public, static, final, AttachmentKey<ModuleIdentifier>, [MODULE_IDENTIFIER=AttachmentKey.create(ModuleIdentifier.class)] @AT@ 6412 @LENGTH@ 6
---INS Modifier@@static @TO@ FieldDeclaration@@public, static, final, AttachmentKey<ModuleIdentifier>, [MODULE_IDENTIFIER=AttachmentKey.create(ModuleIdentifier.class)] @AT@ 6419 @LENGTH@ 6
---INS Modifier@@final @TO@ FieldDeclaration@@public, static, final, AttachmentKey<ModuleIdentifier>, [MODULE_IDENTIFIER=AttachmentKey.create(ModuleIdentifier.class)] @AT@ 6426 @LENGTH@ 5
---INS ParameterizedType@@AttachmentKey<ModuleIdentifier> @TO@ FieldDeclaration@@public, static, final, AttachmentKey<ModuleIdentifier>, [MODULE_IDENTIFIER=AttachmentKey.create(ModuleIdentifier.class)] @AT@ 6432 @LENGTH@ 31
------INS SimpleType@@AttachmentKey @TO@ ParameterizedType@@AttachmentKey<ModuleIdentifier> @AT@ 6432 @LENGTH@ 13
------INS SimpleType@@ModuleIdentifier @TO@ ParameterizedType@@AttachmentKey<ModuleIdentifier> @AT@ 6446 @LENGTH@ 16
---INS VariableDeclarationFragment@@MODULE_IDENTIFIER=AttachmentKey.create(ModuleIdentifier.class) @TO@ FieldDeclaration@@public, static, final, AttachmentKey<ModuleIdentifier>, [MODULE_IDENTIFIER=AttachmentKey.create(ModuleIdentifier.class)] @AT@ 6464 @LENGTH@ 64
------INS SimpleName@@MODULE_IDENTIFIER @TO@ VariableDeclarationFragment@@MODULE_IDENTIFIER=AttachmentKey.create(ModuleIdentifier.class) @AT@ 6464 @LENGTH@ 17
------INS MethodInvocation@@AttachmentKey.create(ModuleIdentifier.class) @TO@ VariableDeclarationFragment@@MODULE_IDENTIFIER=AttachmentKey.create(ModuleIdentifier.class) @AT@ 6484 @LENGTH@ 44
---------INS SimpleName@@Name:AttachmentKey @TO@ MethodInvocation@@AttachmentKey.create(ModuleIdentifier.class) @AT@ 6484 @LENGTH@ 13
---------INS SimpleName@@MethodName:create:[ModuleIdentifier.class] @TO@ MethodInvocation@@AttachmentKey.create(ModuleIdentifier.class) @AT@ 6498 @LENGTH@ 30
------------INS TypeLiteral@@ModuleIdentifier.class @TO@ SimpleName@@MethodName:create:[ModuleIdentifier.class] @AT@ 6505 @LENGTH@ 22


UPD Block@@ElseBody:{  ValueManagedReferenceFactory factory=new ValueManagedReferenceFactory(new ConstructedValue<Object>((Constructor<Object>)componentClassIndex.getConstructor(EMPTY_CLASS_ARRAY),Collections.<Value<?>>emptyList()));  instantiators.addFirst(new ManagedReferenceInterceptorFactory(factory,instanceKey));} @TO@ ElseBody:{  final Constructor<Object> constructor=(Constructor<Object>)componentClassIndex.getConstructor(EMPTY_CLASS_ARRAY);  if (constructor == null) {    throw new DeploymentUnitProcessingException("Could not find default constructor for " + componentClassConfiguration.getModuleClass());  }  ValueManagedReferenceFactory factory=new ValueManagedReferenceFactory(new ConstructedValue<Object>(constructor,Collections.<Value<?>>emptyList()));  instantiators.addFirst(new ManagedReferenceInterceptorFactory(factory,instanceKey));} @AT@ 19603 @LENGTH@ 429
---UPD VariableDeclarationStatement@@ValueManagedReferenceFactory factory=new ValueManagedReferenceFactory(new ConstructedValue<Object>((Constructor<Object>)componentClassIndex.getConstructor(EMPTY_CLASS_ARRAY),Collections.<Value<?>>emptyList())); @TO@ final Constructor<Object> constructor=(Constructor<Object>)componentClassIndex.getConstructor(EMPTY_CLASS_ARRAY); @AT@ 19702 @LENGTH@ 214
------DEL SimpleType@@ValueManagedReferenceFactory @AT@ 19702 @LENGTH@ 28
------INS Modifier@@final @TO@ VariableDeclarationStatement@@ValueManagedReferenceFactory factory=new ValueManagedReferenceFactory(new ConstructedValue<Object>((Constructor<Object>)componentClassIndex.getConstructor(EMPTY_CLASS_ARRAY),Collections.<Value<?>>emptyList())); @AT@ 19702 @LENGTH@ 5
------INS ParameterizedType@@Constructor<Object> @TO@ VariableDeclarationStatement@@ValueManagedReferenceFactory factory=new ValueManagedReferenceFactory(new ConstructedValue<Object>((Constructor<Object>)componentClassIndex.getConstructor(EMPTY_CLASS_ARRAY),Collections.<Value<?>>emptyList())); @AT@ 19708 @LENGTH@ 19
---------INS SimpleType@@Constructor @TO@ ParameterizedType@@Constructor<Object> @AT@ 19708 @LENGTH@ 11
---------INS SimpleType@@Object @TO@ ParameterizedType@@Constructor<Object> @AT@ 19720 @LENGTH@ 6
------UPD VariableDeclarationFragment@@factory=new ValueManagedReferenceFactory(new ConstructedValue<Object>((Constructor<Object>)componentClassIndex.getConstructor(EMPTY_CLASS_ARRAY),Collections.<Value<?>>emptyList())) @TO@ constructor=(Constructor<Object>)componentClassIndex.getConstructor(EMPTY_CLASS_ARRAY) @AT@ 19731 @LENGTH@ 184
---------UPD SimpleName@@factory @TO@ constructor @AT@ 19731 @LENGTH@ 7
---------DEL ClassInstanceCreation@@ValueManagedReferenceFactory[new ConstructedValue<Object>((Constructor<Object>)componentClassIndex.getConstructor(EMPTY_CLASS_ARRAY),Collections.<Value<?>>emptyList())] @AT@ 19741 @LENGTH@ 174
------------DEL New@@new @AT@ 19741 @LENGTH@ 3
------------DEL SimpleType@@ValueManagedReferenceFactory @AT@ 19745 @LENGTH@ 28
------------DEL ClassInstanceCreation@@ConstructedValue<Object>[(Constructor<Object>)componentClassIndex.getConstructor(EMPTY_CLASS_ARRAY), Collections.<Value<?>>emptyList()] @AT@ 19774 @LENGTH@ 140
---------------DEL New@@new @AT@ 19774 @LENGTH@ 3
---------------DEL ParameterizedType@@ConstructedValue<Object> @AT@ 19778 @LENGTH@ 24
------------------DEL SimpleType@@ConstructedValue @AT@ 19778 @LENGTH@ 16
------------------DEL SimpleType@@Object @AT@ 19795 @LENGTH@ 6
---------------DEL MethodInvocation@@Collections.<Value<?>>emptyList() @AT@ 19880 @LENGTH@ 33
------------------DEL SimpleName@@Name:Collections @AT@ 19880 @LENGTH@ 11
------------------DEL SimpleName@@MethodName:emptyList:[] @AT@ 19902 @LENGTH@ 11
---------MOV CastExpression@@(Constructor<Object>)componentClassIndex.getConstructor(EMPTY_CLASS_ARRAY) @TO@ VariableDeclarationFragment@@factory=new ValueManagedReferenceFactory(new ConstructedValue<Object>((Constructor<Object>)componentClassIndex.getConstructor(EMPTY_CLASS_ARRAY),Collections.<Value<?>>emptyList())) @AT@ 19803 @LENGTH@ 75
---INS IfStatement@@if (constructor == null) {  throw new DeploymentUnitProcessingException("Could not find default constructor for " + componentClassConfiguration.getModuleClass());} @TO@ Block@@ElseBody:{  ValueManagedReferenceFactory factory=new ValueManagedReferenceFactory(new ConstructedValue<Object>((Constructor<Object>)componentClassIndex.getConstructor(EMPTY_CLASS_ARRAY),Collections.<Value<?>>emptyList()));  instantiators.addFirst(new ManagedReferenceInterceptorFactory(factory,instanceKey));} @AT@ 19835 @LENGTH@ 198
------INS InfixExpression@@constructor == null @TO@ IfStatement@@if (constructor == null) {  throw new DeploymentUnitProcessingException("Could not find default constructor for " + componentClassConfiguration.getModuleClass());} @AT@ 19838 @LENGTH@ 19
---------INS SimpleName@@constructor @TO@ InfixExpression@@constructor == null @AT@ 19838 @LENGTH@ 11
---------INS Operator@@== @TO@ InfixExpression@@constructor == null @AT@ 19849 @LENGTH@ 2
---------INS NullLiteral@@null @TO@ InfixExpression@@constructor == null @AT@ 19853 @LENGTH@ 4
------INS Block@@ThenBody:{  throw new DeploymentUnitProcessingException("Could not find default constructor for " + componentClassConfiguration.getModuleClass());} @TO@ IfStatement@@if (constructor == null) {  throw new DeploymentUnitProcessingException("Could not find default constructor for " + componentClassConfiguration.getModuleClass());} @AT@ 19859 @LENGTH@ 174
---------INS ThrowStatement@@ClassInstanceCreation:new DeploymentUnitProcessingException("Could not find default constructor for " + componentClassConfiguration.getModuleClass()) @TO@ Block@@ThenBody:{  throw new DeploymentUnitProcessingException("Could not find default constructor for " + componentClassConfiguration.getModuleClass());} @AT@ 19881 @LENGTH@ 134
------------INS ClassInstanceCreation@@DeploymentUnitProcessingException["Could not find default constructor for " + componentClassConfiguration.getModuleClass()] @TO@ ThrowStatement@@ClassInstanceCreation:new DeploymentUnitProcessingException("Could not find default constructor for " + componentClassConfiguration.getModuleClass()) @AT@ 19887 @LENGTH@ 127
---------------INS New@@new @TO@ ClassInstanceCreation@@DeploymentUnitProcessingException["Could not find default constructor for " + componentClassConfiguration.getModuleClass()] @AT@ 19887 @LENGTH@ 3
---------------INS SimpleType@@DeploymentUnitProcessingException @TO@ ClassInstanceCreation@@DeploymentUnitProcessingException["Could not find default constructor for " + componentClassConfiguration.getModuleClass()] @AT@ 19891 @LENGTH@ 33
---------------INS InfixExpression@@"Could not find default constructor for " + componentClassConfiguration.getModuleClass() @TO@ ClassInstanceCreation@@DeploymentUnitProcessingException["Could not find default constructor for " + componentClassConfiguration.getModuleClass()] @AT@ 19925 @LENGTH@ 88
------------------INS StringLiteral@@"Could not find default constructor for " @TO@ InfixExpression@@"Could not find default constructor for " + componentClassConfiguration.getModuleClass() @AT@ 19925 @LENGTH@ 41
------------------INS Operator@@+ @TO@ InfixExpression@@"Could not find default constructor for " + componentClassConfiguration.getModuleClass() @AT@ 19966 @LENGTH@ 1
------------------INS MethodInvocation@@componentClassConfiguration.getModuleClass() @TO@ InfixExpression@@"Could not find default constructor for " + componentClassConfiguration.getModuleClass() @AT@ 19969 @LENGTH@ 44
---------------------INS SimpleName@@Name:componentClassConfiguration @TO@ MethodInvocation@@componentClassConfiguration.getModuleClass() @AT@ 19969 @LENGTH@ 27
---------------------INS SimpleName@@MethodName:getModuleClass:[] @TO@ MethodInvocation@@componentClassConfiguration.getModuleClass() @AT@ 19997 @LENGTH@ 16
---INS VariableDeclarationStatement@@ValueManagedReferenceFactory factory=new ValueManagedReferenceFactory(new ConstructedValue<Object>(constructor,Collections.<Value<?>>emptyList())); @TO@ Block@@ElseBody:{  ValueManagedReferenceFactory factory=new ValueManagedReferenceFactory(new ConstructedValue<Object>((Constructor<Object>)componentClassIndex.getConstructor(EMPTY_CLASS_ARRAY),Collections.<Value<?>>emptyList()));  instantiators.addFirst(new ManagedReferenceInterceptorFactory(factory,instanceKey));} @AT@ 20050 @LENGTH@ 150
------INS SimpleType@@ValueManagedReferenceFactory @TO@ VariableDeclarationStatement@@ValueManagedReferenceFactory factory=new ValueManagedReferenceFactory(new ConstructedValue<Object>(constructor,Collections.<Value<?>>emptyList())); @AT@ 20050 @LENGTH@ 28
------INS VariableDeclarationFragment@@factory=new ValueManagedReferenceFactory(new ConstructedValue<Object>(constructor,Collections.<Value<?>>emptyList())) @TO@ VariableDeclarationStatement@@ValueManagedReferenceFactory factory=new ValueManagedReferenceFactory(new ConstructedValue<Object>(constructor,Collections.<Value<?>>emptyList())); @AT@ 20079 @LENGTH@ 120
---------INS SimpleName@@factory @TO@ VariableDeclarationFragment@@factory=new ValueManagedReferenceFactory(new ConstructedValue<Object>(constructor,Collections.<Value<?>>emptyList())) @AT@ 20079 @LENGTH@ 7
---------INS ClassInstanceCreation@@ValueManagedReferenceFactory[new ConstructedValue<Object>(constructor,Collections.<Value<?>>emptyList())] @TO@ VariableDeclarationFragment@@factory=new ValueManagedReferenceFactory(new ConstructedValue<Object>(constructor,Collections.<Value<?>>emptyList())) @AT@ 20089 @LENGTH@ 110
------------INS New@@new @TO@ ClassInstanceCreation@@ValueManagedReferenceFactory[new ConstructedValue<Object>(constructor,Collections.<Value<?>>emptyList())] @AT@ 20089 @LENGTH@ 3
------------INS SimpleType@@ValueManagedReferenceFactory @TO@ ClassInstanceCreation@@ValueManagedReferenceFactory[new ConstructedValue<Object>(constructor,Collections.<Value<?>>emptyList())] @AT@ 20093 @LENGTH@ 28
------------INS ClassInstanceCreation@@ConstructedValue<Object>[constructor, Collections.<Value<?>>emptyList()] @TO@ ClassInstanceCreation@@ValueManagedReferenceFactory[new ConstructedValue<Object>(constructor,Collections.<Value<?>>emptyList())] @AT@ 20122 @LENGTH@ 76
---------------INS New@@new @TO@ ClassInstanceCreation@@ConstructedValue<Object>[constructor, Collections.<Value<?>>emptyList()] @AT@ 20122 @LENGTH@ 3
---------------INS ParameterizedType@@ConstructedValue<Object> @TO@ ClassInstanceCreation@@ConstructedValue<Object>[constructor, Collections.<Value<?>>emptyList()] @AT@ 20126 @LENGTH@ 24
------------------INS SimpleType@@ConstructedValue @TO@ ParameterizedType@@ConstructedValue<Object> @AT@ 20126 @LENGTH@ 16
------------------INS SimpleType@@Object @TO@ ParameterizedType@@ConstructedValue<Object> @AT@ 20143 @LENGTH@ 6
---------------INS SimpleName@@constructor @TO@ ClassInstanceCreation@@ConstructedValue<Object>[constructor, Collections.<Value<?>>emptyList()] @AT@ 20151 @LENGTH@ 11
---------------INS MethodInvocation@@Collections.<Value<?>>emptyList() @TO@ ClassInstanceCreation@@ConstructedValue<Object>[constructor, Collections.<Value<?>>emptyList()] @AT@ 20164 @LENGTH@ 33
------------------INS SimpleName@@Name:Collections @TO@ MethodInvocation@@Collections.<Value<?>>emptyList() @AT@ 20164 @LENGTH@ 11
------------------INS SimpleName@@MethodName:emptyList:[] @TO@ MethodInvocation@@Collections.<Value<?>>emptyList() @AT@ 20186 @LENGTH@ 11


UPD VariableDeclarationStatement@@ObjectName on=ObjectName.getInstance("org.apache.camel:context=localhost/camel-1,type=threadpools,name=myThreads(threads)"); @TO@ ObjectName on=ObjectName.getInstance("org.apache.camel:context=localhost/camel-1,type=threadpools,name=\"myThreads(threads)\""); @AT@ 1178 @LENGTH@ 126
---UPD VariableDeclarationFragment@@on=ObjectName.getInstance("org.apache.camel:context=localhost/camel-1,type=threadpools,name=myThreads(threads)") @TO@ on=ObjectName.getInstance("org.apache.camel:context=localhost/camel-1,type=threadpools,name=\"myThreads(threads)\"") @AT@ 1189 @LENGTH@ 114
------UPD MethodInvocation@@ObjectName.getInstance("org.apache.camel:context=localhost/camel-1,type=threadpools,name=myThreads(threads)") @TO@ ObjectName.getInstance("org.apache.camel:context=localhost/camel-1,type=threadpools,name=\"myThreads(threads)\"") @AT@ 1194 @LENGTH@ 109
---------UPD SimpleName@@MethodName:getInstance:["org.apache.camel:context=localhost/camel-1,type=threadpools,name=myThreads(threads)"] @TO@ MethodName:getInstance:["org.apache.camel:context=localhost/camel-1,type=threadpools,name=\"myThreads(threads)\""] @AT@ 1205 @LENGTH@ 98
------------UPD StringLiteral@@"org.apache.camel:context=localhost/camel-1,type=threadpools,name=myThreads(threads)" @TO@ "org.apache.camel:context=localhost/camel-1,type=threadpools,name=\"myThreads(threads)\"" @AT@ 1217 @LENGTH@ 85


UPD IfStatement@@if (configuration.get(CommonAttributes.AUTO_DEPLOY_ZIPPED).asBoolean()) {  writer.writeAttribute(Attribute.AUTO_DEPLOY_ZIPPED.getLocalName(),Boolean.TRUE.toString());} @TO@ if (configuration.get(CommonAttributes.AUTO_DEPLOY_EXPLODED).asBoolean()) {  writer.writeAttribute(Attribute.AUTO_DEPLOY_EXPLODED.getLocalName(),Boolean.TRUE.toString());} @AT@ 8906 @LENGTH@ 220
---UPD MethodInvocation@@configuration.get(CommonAttributes.AUTO_DEPLOY_ZIPPED).asBoolean() @TO@ configuration.get(CommonAttributes.AUTO_DEPLOY_EXPLODED).asBoolean() @AT@ 8910 @LENGTH@ 66
------UPD MethodInvocation@@MethodName:get:[CommonAttributes.AUTO_DEPLOY_ZIPPED] @TO@ MethodName:get:[CommonAttributes.AUTO_DEPLOY_EXPLODED] @AT@ 8910 @LENGTH@ 54
---------UPD QualifiedName@@CommonAttributes.AUTO_DEPLOY_ZIPPED @TO@ CommonAttributes.AUTO_DEPLOY_EXPLODED @AT@ 8928 @LENGTH@ 35
------------UPD SimpleName@@AUTO_DEPLOY_ZIPPED @TO@ AUTO_DEPLOY_EXPLODED @AT@ 8945 @LENGTH@ 18
---UPD Block@@ThenBody:{  writer.writeAttribute(Attribute.AUTO_DEPLOY_ZIPPED.getLocalName(),Boolean.TRUE.toString());} @TO@ ThenBody:{  writer.writeAttribute(Attribute.AUTO_DEPLOY_EXPLODED.getLocalName(),Boolean.TRUE.toString());} @AT@ 8978 @LENGTH@ 148
------UPD ExpressionStatement@@MethodInvocation:writer.writeAttribute(Attribute.AUTO_DEPLOY_ZIPPED.getLocalName(),Boolean.TRUE.toString()) @TO@ MethodInvocation:writer.writeAttribute(Attribute.AUTO_DEPLOY_EXPLODED.getLocalName(),Boolean.TRUE.toString()) @AT@ 9008 @LENGTH@ 92
---------UPD MethodInvocation@@writer.writeAttribute(Attribute.AUTO_DEPLOY_ZIPPED.getLocalName(),Boolean.TRUE.toString()) @TO@ writer.writeAttribute(Attribute.AUTO_DEPLOY_EXPLODED.getLocalName(),Boolean.TRUE.toString()) @AT@ 9008 @LENGTH@ 91
------------UPD SimpleName@@MethodName:writeAttribute:[Attribute.AUTO_DEPLOY_ZIPPED.getLocalName(), Boolean.TRUE.toString()] @TO@ MethodName:writeAttribute:[Attribute.AUTO_DEPLOY_EXPLODED.getLocalName(), Boolean.TRUE.toString()] @AT@ 9015 @LENGTH@ 84
---------------UPD MethodInvocation@@Attribute.AUTO_DEPLOY_ZIPPED.getLocalName() @TO@ Attribute.AUTO_DEPLOY_EXPLODED.getLocalName() @AT@ 9030 @LENGTH@ 43
------------------UPD QualifiedName@@Name:Attribute.AUTO_DEPLOY_ZIPPED @TO@ Name:Attribute.AUTO_DEPLOY_EXPLODED @AT@ 9030 @LENGTH@ 28


UPD ReturnStatement@@MethodInvocation:getDb().createCollection(collectionName,null) @TO@ MethodInvocation:getDb().createCollection(collectionName,new BasicDBObject()) @AT@ 5827 @LENGTH@ 54
---UPD MethodInvocation@@getDb().createCollection(collectionName,null) @TO@ getDb().createCollection(collectionName,new BasicDBObject()) @AT@ 5834 @LENGTH@ 46
------UPD SimpleName@@MethodName:createCollection:[collectionName, null] @TO@ MethodName:createCollection:[collectionName, new BasicDBObject()] @AT@ 5842 @LENGTH@ 38
---------INS ClassInstanceCreation@@BasicDBObject[] @TO@ SimpleName@@MethodName:createCollection:[collectionName, null] @AT@ 5875 @LENGTH@ 19
------------INS New@@new @TO@ ClassInstanceCreation@@BasicDBObject[] @AT@ 5875 @LENGTH@ 3
------------INS SimpleType@@BasicDBObject @TO@ ClassInstanceCreation@@BasicDBObject[] @AT@ 5879 @LENGTH@ 13
---------DEL NullLiteral@@null @AT@ 5875 @LENGTH@ 4


UPD VariableDeclarationStatement@@StatefulSessionComponentInstance sfsb=(StatefulSessionComponentInstance)context.getContextData().get(BasicComponent.COMPONENT_INSTANCE_KEY); @TO@ StatefulSessionComponentInstance sfsb=(StatefulSessionComponentInstance)interceptorContext.getPrivateData(ComponentInstance.class); @AT@ 2065 @LENGTH@ 143
---UPD VariableDeclarationFragment@@sfsb=(StatefulSessionComponentInstance)context.getContextData().get(BasicComponent.COMPONENT_INSTANCE_KEY) @TO@ sfsb=(StatefulSessionComponentInstance)interceptorContext.getPrivateData(ComponentInstance.class) @AT@ 2098 @LENGTH@ 109
------UPD CastExpression@@(StatefulSessionComponentInstance)context.getContextData().get(BasicComponent.COMPONENT_INSTANCE_KEY) @TO@ (StatefulSessionComponentInstance)interceptorContext.getPrivateData(ComponentInstance.class) @AT@ 2105 @LENGTH@ 102
---------UPD MethodInvocation@@context.getContextData().get(BasicComponent.COMPONENT_INSTANCE_KEY) @TO@ interceptorContext.getPrivateData(ComponentInstance.class) @AT@ 2140 @LENGTH@ 67
------------DEL MethodInvocation@@MethodName:getContextData:[] @AT@ 2140 @LENGTH@ 24
------------UPD SimpleName@@Name:context @TO@ Name:interceptorContext @AT@ 2140 @LENGTH@ 7
------------UPD SimpleName@@MethodName:get:[BasicComponent.COMPONENT_INSTANCE_KEY] @TO@ MethodName:getPrivateData:[ComponentInstance.class] @AT@ 2165 @LENGTH@ 42
---------------DEL QualifiedName@@BasicComponent.COMPONENT_INSTANCE_KEY @AT@ 2169 @LENGTH@ 37
------------------DEL SimpleName@@BasicComponent @AT@ 2169 @LENGTH@ 14
------------------DEL SimpleName@@COMPONENT_INSTANCE_KEY @AT@ 2184 @LENGTH@ 22
---------------INS TypeLiteral@@ComponentInstance.class @TO@ SimpleName@@MethodName:get:[BasicComponent.COMPONENT_INSTANCE_KEY] @AT@ 2177 @LENGTH@ 23


UPD MethodDeclaration@@private, String, MethodName:getErrorMsg, String tableName, String referenceTableName,  @TO@ private, String, MethodName:getErrorMsg, String foreignTableName, String tableName,  @AT@ 40691 @LENGTH@ 210
---UPD SingleVariableDeclaration@@String tableName @TO@ String foreignTableName @AT@ 40718 @LENGTH@ 16
------UPD SimpleName@@tableName @TO@ foreignTableName @AT@ 40725 @LENGTH@ 9
---UPD SingleVariableDeclaration@@String referenceTableName @TO@ String tableName @AT@ 40736 @LENGTH@ 25
------UPD SimpleName@@referenceTableName @TO@ tableName @AT@ 40743 @LENGTH@ 18
---UPD ReturnStatement@@InfixExpression:getErrorMsg(tableName) + " and table '" + tableName+ "' has a foreign-key reference to table '"+ referenceTableName+ "'" @TO@ InfixExpression:getErrorMsg(foreignTableName) + " and table '" + tableName+ "' has a foreign-key reference to table '"+ foreignTableName+ "'" @AT@ 40767 @LENGTH@ 131
------UPD InfixExpression@@getErrorMsg(tableName) + " and table '" + tableName+ "' has a foreign-key reference to table '"+ referenceTableName+ "'" @TO@ getErrorMsg(foreignTableName) + " and table '" + tableName+ "' has a foreign-key reference to table '"+ foreignTableName+ "'" @AT@ 40774 @LENGTH@ 123
---------UPD MethodInvocation@@getErrorMsg(tableName) @TO@ getErrorMsg(foreignTableName) @AT@ 40774 @LENGTH@ 22
------------UPD SimpleName@@MethodName:getErrorMsg:[tableName] @TO@ MethodName:getErrorMsg:[foreignTableName] @AT@ 40774 @LENGTH@ 22
---------------UPD SimpleName@@tableName @TO@ foreignTableName @AT@ 40786 @LENGTH@ 9
---------UPD SimpleName@@referenceTableName @TO@ foreignTableName @AT@ 40873 @LENGTH@ 18


INS ExpressionStatement@@MethodInvocation:factoryContext.getContextData().put(ComponentView.class,this) @TO@ MethodDeclaration@@public, ComponentViewInstance, MethodName:createInstance, Map<Object,Object> contextData,  @AT@ 6260 @LENGTH@ 63
---INS MethodInvocation@@factoryContext.getContextData().put(ComponentView.class,this) @TO@ ExpressionStatement@@MethodInvocation:factoryContext.getContextData().put(ComponentView.class,this) @AT@ 6260 @LENGTH@ 62
------INS MethodInvocation@@MethodName:getContextData:[] @TO@ MethodInvocation@@factoryContext.getContextData().put(ComponentView.class,this) @AT@ 6260 @LENGTH@ 31
------INS SimpleName@@Name:factoryContext @TO@ MethodInvocation@@factoryContext.getContextData().put(ComponentView.class,this) @AT@ 6260 @LENGTH@ 14
------INS SimpleName@@MethodName:put:[ComponentView.class, this] @TO@ MethodInvocation@@factoryContext.getContextData().put(ComponentView.class,this) @AT@ 6292 @LENGTH@ 30
---------INS TypeLiteral@@ComponentView.class @TO@ SimpleName@@MethodName:put:[ComponentView.class, this] @AT@ 6296 @LENGTH@ 19
---------INS ThisExpression@@this @TO@ SimpleName@@MethodName:put:[ComponentView.class, this] @AT@ 6317 @LENGTH@ 4


UPD MethodDeclaration@@protected, void, MethodName:parse, String str, OperationFormatException,  @TO@ protected, void, MethodName:parse, String str, CommandFormatException,  @AT@ 1848 @LENGTH@ 156
---UPD SimpleType@@OperationFormatException @TO@ CommandFormatException @AT@ 1888 @LENGTH@ 24


UPD ThrowStatement@@ClassInstanceCreation:new IllegalArgumentException("Unable to find feature " + feature.getName() + "/"+ feature.getVersion()) @TO@ ClassInstanceCreation:new IllegalArgumentException("Unable to find feature " + dep.getName() + "/"+ dep.getVersion()) @AT@ 9874 @LENGTH@ 111
---UPD ClassInstanceCreation@@IllegalArgumentException["Unable to find feature " + feature.getName() + "/"+ feature.getVersion()] @TO@ IllegalArgumentException["Unable to find feature " + dep.getName() + "/"+ dep.getVersion()] @AT@ 9880 @LENGTH@ 104
------UPD InfixExpression@@"Unable to find feature " + feature.getName() + "/"+ feature.getVersion() @TO@ "Unable to find feature " + dep.getName() + "/"+ dep.getVersion() @AT@ 9909 @LENGTH@ 74
---------UPD MethodInvocation@@feature.getName() @TO@ dep.getName() @AT@ 9937 @LENGTH@ 17
------------UPD SimpleName@@Name:feature @TO@ Name:dep @AT@ 9937 @LENGTH@ 7
---------UPD MethodInvocation@@feature.getVersion() @TO@ dep.getVersion() @AT@ 9963 @LENGTH@ 20
------------UPD SimpleName@@Name:feature @TO@ Name:dep @AT@ 9963 @LENGTH@ 7


UPD MethodDeclaration@@public, Collection<byte[]>, MethodName:keys, byte[] pattern,  @TO@ public, Set<byte[]>, MethodName:keys, byte[] pattern,  @AT@ 12681 @LENGTH@ 315
---UPD ParameterizedType@@Collection<byte[]> @TO@ Set<byte[]> @AT@ 12688 @LENGTH@ 18
------UPD SimpleType@@Collection @TO@ Set @AT@ 12688 @LENGTH@ 10


UPD TypeDeclaration@@NewConnectorSubsystemAdd, [ModelAddOperationHandler] @TO@ NewConnectorSubsystemAdd, [ModelAddOperationHandler, RuntimeOperationHandler] @AT@ 3260 @LENGTH@ 5355
---INS SimpleType@@RuntimeOperationHandler @TO@ TypeDeclaration@@NewConnectorSubsystemAdd, [ModelAddOperationHandler] @AT@ 3374 @LENGTH@ 23


UPD VariableDeclarationStatement@@int avail=base64.avail(); @TO@ int avail=base64.available(); @AT@ 6204 @LENGTH@ 27
---UPD VariableDeclarationFragment@@avail=base64.avail() @TO@ avail=base64.available() @AT@ 6208 @LENGTH@ 22
------UPD MethodInvocation@@base64.avail() @TO@ base64.available() @AT@ 6216 @LENGTH@ 14
---------UPD SimpleName@@MethodName:avail:[] @TO@ MethodName:available:[] @AT@ 6223 @LENGTH@ 7


UPD FieldDeclaration@@private, List<LifecycleListener>, [listeners] @TO@ private, List<LifecycleListener>, [listeners=new ArrayList<LifecycleListener>()] @AT@ 971 @LENGTH@ 42
---UPD VariableDeclarationFragment@@listeners @TO@ listeners=new ArrayList<LifecycleListener>() @AT@ 1003 @LENGTH@ 9
------INS ClassInstanceCreation@@ArrayList<LifecycleListener>[] @TO@ VariableDeclarationFragment@@listeners @AT@ 1015 @LENGTH@ 34
---------INS New@@new @TO@ ClassInstanceCreation@@ArrayList<LifecycleListener>[] @AT@ 1015 @LENGTH@ 3
---------INS ParameterizedType@@ArrayList<LifecycleListener> @TO@ ClassInstanceCreation@@ArrayList<LifecycleListener>[] @AT@ 1019 @LENGTH@ 28
------------INS SimpleType@@ArrayList @TO@ ParameterizedType@@ArrayList<LifecycleListener> @AT@ 1019 @LENGTH@ 9
------------INS SimpleType@@LifecycleListener @TO@ ParameterizedType@@ArrayList<LifecycleListener> @AT@ 1029 @LENGTH@ 17


DEL FieldDeclaration@@private, static, final, transient, Logger, [LOG=LoggerFactory.getLogger(MultiplePoliciesOnRouteTest.class)] @AT@ 1442 @LENGTH@ 103
---DEL Modifier@@private @AT@ 1442 @LENGTH@ 7
---DEL Modifier@@static @AT@ 1450 @LENGTH@ 6
---DEL Modifier@@final @AT@ 1457 @LENGTH@ 5
---DEL Modifier@@transient @AT@ 1463 @LENGTH@ 9
---DEL SimpleType@@Logger @AT@ 1473 @LENGTH@ 6
---DEL VariableDeclarationFragment@@LOG=LoggerFactory.getLogger(MultiplePoliciesOnRouteTest.class) @AT@ 1480 @LENGTH@ 64
------DEL SimpleName@@LOG @AT@ 1480 @LENGTH@ 3
------DEL MethodInvocation@@LoggerFactory.getLogger(MultiplePoliciesOnRouteTest.class) @AT@ 1486 @LENGTH@ 58
---------DEL SimpleName@@Name:LoggerFactory @AT@ 1486 @LENGTH@ 13
---------DEL SimpleName@@MethodName:getLogger:[MultiplePoliciesOnRouteTest.class] @AT@ 1500 @LENGTH@ 44
------------DEL TypeLiteral@@MultiplePoliciesOnRouteTest.class @AT@ 1510 @LENGTH@ 33


UPD MethodDeclaration@@protected, CriteriaQuery<Object>, MethodName:finalize, Predicate predicate, Sort sort, CriteriaQuery<Object> query, CriteriaBuilder builder,  @TO@ protected, CriteriaQuery<Object>, MethodName:complete, Predicate predicate, Sort sort, CriteriaQuery<Object> query, CriteriaBuilder builder,  @AT@ 2017 @LENGTH@ 216
---UPD SimpleName@@MethodName:finalize @TO@ MethodName:complete @AT@ 2049 @LENGTH@ 8


INS MethodDeclaration@@public, void, MethodName:testEmptyHeaderValueIn, Exception,  @TO@ TypeDeclaration@@[public]PredicateBuilderTest, TestSupport @AT@ 3543 @LENGTH@ 185
---INS Modifier@@public @TO@ MethodDeclaration@@public, void, MethodName:testEmptyHeaderValueIn, Exception,  @AT@ 3543 @LENGTH@ 6
---INS PrimitiveType@@void @TO@ MethodDeclaration@@public, void, MethodName:testEmptyHeaderValueIn, Exception,  @AT@ 3550 @LENGTH@ 4
---INS SimpleName@@MethodName:testEmptyHeaderValueIn @TO@ MethodDeclaration@@public, void, MethodName:testEmptyHeaderValueIn, Exception,  @AT@ 3555 @LENGTH@ 22
---INS SimpleType@@Exception @TO@ MethodDeclaration@@public, void, MethodName:testEmptyHeaderValueIn, Exception,  @AT@ 3587 @LENGTH@ 9
---INS ExpressionStatement@@MethodInvocation:assertDoesNotMatch(header("xxx").in("Hiram","Jonathan","James","Claus")) @TO@ MethodDeclaration@@public, void, MethodName:testEmptyHeaderValueIn, Exception,  @AT@ 3646 @LENGTH@ 76
------INS MethodInvocation@@assertDoesNotMatch(header("xxx").in("Hiram","Jonathan","James","Claus")) @TO@ ExpressionStatement@@MethodInvocation:assertDoesNotMatch(header("xxx").in("Hiram","Jonathan","James","Claus")) @AT@ 3646 @LENGTH@ 75
---------INS SimpleName@@MethodName:assertDoesNotMatch:[header("xxx").in("Hiram","Jonathan","James","Claus")] @TO@ MethodInvocation@@assertDoesNotMatch(header("xxx").in("Hiram","Jonathan","James","Claus")) @AT@ 3646 @LENGTH@ 75
------------INS MethodInvocation@@header("xxx").in("Hiram","Jonathan","James","Claus") @TO@ SimpleName@@MethodName:assertDoesNotMatch:[header("xxx").in("Hiram","Jonathan","James","Claus")] @AT@ 3665 @LENGTH@ 55
---------------INS MethodInvocation@@MethodName:header:["xxx"] @TO@ MethodInvocation@@header("xxx").in("Hiram","Jonathan","James","Claus") @AT@ 3665 @LENGTH@ 13
------------------INS StringLiteral@@"xxx" @TO@ MethodInvocation@@MethodName:header:["xxx"] @AT@ 3672 @LENGTH@ 5
---------------INS SimpleName@@MethodName:in:["Hiram", "Jonathan", "James", "Claus"] @TO@ MethodInvocation@@header("xxx").in("Hiram","Jonathan","James","Claus") @AT@ 3679 @LENGTH@ 41
------------------INS StringLiteral@@"Hiram" @TO@ SimpleName@@MethodName:in:["Hiram", "Jonathan", "James", "Claus"] @AT@ 3682 @LENGTH@ 7
------------------INS StringLiteral@@"Jonathan" @TO@ SimpleName@@MethodName:in:["Hiram", "Jonathan", "James", "Claus"] @AT@ 3691 @LENGTH@ 10
------------------INS StringLiteral@@"James" @TO@ SimpleName@@MethodName:in:["Hiram", "Jonathan", "James", "Claus"] @AT@ 3703 @LENGTH@ 7
------------------INS StringLiteral@@"Claus" @TO@ SimpleName@@MethodName:in:["Hiram", "Jonathan", "James", "Claus"] @AT@ 3712 @LENGTH@ 7


UPD FieldDeclaration@@public, static, final, int, [PARSE_EJB_INJECTION_ANNOTATION=0x0C09] @TO@ public, static, final, int, [PARSE_EJB_INJECTION_ANNOTATION=0x2A00] @AT@ 9745 @LENGTH@ 77
---UPD VariableDeclarationFragment@@PARSE_EJB_INJECTION_ANNOTATION=0x0C09 @TO@ PARSE_EJB_INJECTION_ANNOTATION=0x2A00 @AT@ 9769 @LENGTH@ 52
------UPD NumberLiteral@@0x0C09 @TO@ 0x2A00 @AT@ 9815 @LENGTH@ 6


UPD MethodDeclaration@@protected, voidMethodName:StatefulSessionComponentInstance, final StatefulSessionComponent component, final Object instance,  @TO@ protected, voidMethodName:StatefulSessionComponentInstance, final StatefulSessionComponent component, final Object instance, List<Interceptor> preDestroyInterceptors, InterceptorFactoryContext context,  @AT@ 1527 @LENGTH@ 219
---UPD SuperConstructorInvocation@@super(component,instance,Collections.<Interceptor>emptyList());
 @TO@ super(component,instance,preDestroyInterceptors,context);
 @AT@ 1645 @LENGTH@ 65
------DEL MethodInvocation@@Collections.<Interceptor>emptyList() @AT@ 1672 @LENGTH@ 36
---------DEL SimpleName@@Name:Collections @AT@ 1672 @LENGTH@ 11
---------DEL SimpleName@@MethodName:emptyList:[] @AT@ 1697 @LENGTH@ 11
------INS SimpleName@@preDestroyInterceptors @TO@ SuperConstructorInvocation@@super(component,instance,Collections.<Interceptor>emptyList());
 @AT@ 1827 @LENGTH@ 22
------INS SimpleName@@context @TO@ SuperConstructorInvocation@@super(component,instance,Collections.<Interceptor>emptyList());
 @AT@ 1851 @LENGTH@ 7
---INS SingleVariableDeclaration@@List<Interceptor> preDestroyInterceptors @TO@ MethodDeclaration@@protected, voidMethodName:StatefulSessionComponentInstance, final StatefulSessionComponent component, final Object instance,  @AT@ 1713 @LENGTH@ 40
------INS ParameterizedType@@List<Interceptor> @TO@ SingleVariableDeclaration@@List<Interceptor> preDestroyInterceptors @AT@ 1713 @LENGTH@ 17
---------INS SimpleType@@List @TO@ ParameterizedType@@List<Interceptor> @AT@ 1713 @LENGTH@ 4
---------INS SimpleType@@Interceptor @TO@ ParameterizedType@@List<Interceptor> @AT@ 1718 @LENGTH@ 11
------INS SimpleName@@preDestroyInterceptors @TO@ SingleVariableDeclaration@@List<Interceptor> preDestroyInterceptors @AT@ 1731 @LENGTH@ 22
---INS SingleVariableDeclaration@@InterceptorFactoryContext context @TO@ MethodDeclaration@@protected, voidMethodName:StatefulSessionComponentInstance, final StatefulSessionComponent component, final Object instance,  @AT@ 1755 @LENGTH@ 33
------INS SimpleType@@InterceptorFactoryContext @TO@ SingleVariableDeclaration@@InterceptorFactoryContext context @AT@ 1755 @LENGTH@ 25
------INS SimpleName@@context @TO@ SingleVariableDeclaration@@InterceptorFactoryContext context @AT@ 1781 @LENGTH@ 7


DEL ExpressionStatement@@MethodInvocation:prepareMailbox() @AT@ 1439 @LENGTH@ 17
---DEL MethodInvocation@@MethodName:prepareMailbox:[] @AT@ 1439 @LENGTH@ 16


UPD MethodDeclaration@@public, static, StandaloneServer, MethodName:create, final File jbossHomeDir, final Properties systemProps, final Map<String,String> systemEnv, Throwable,  @TO@ public, static, StandaloneServer, MethodName:create, final File jbossHomeDir, final Properties systemProps, final Map<String,String> systemEnv, String... systemPackages, Throwable,  @AT@ 3164 @LENGTH@ 5296
---INS SingleVariableDeclaration@@String... systemPackages @TO@ MethodDeclaration@@public, static, StandaloneServer, MethodName:create, final File jbossHomeDir, final Properties systemProps, final Map<String,String> systemEnv, Throwable,  @AT@ 3294 @LENGTH@ 23
------INS SimpleType@@String @TO@ SingleVariableDeclaration@@String... systemPackages @AT@ 3294 @LENGTH@ 6
------INS SimpleName@@systemPackages @TO@ SingleVariableDeclaration@@String... systemPackages @AT@ 3303 @LENGTH@ 14
---UPD VariableDeclarationStatement@@final ModuleLoader moduleLoader=InitialModuleLoaderFactory.getModuleLoader(modulesDir); @TO@ final ModuleLoader moduleLoader=InitialModuleLoaderFactory.getModuleLoader(modulesDir,systemPackages); @AT@ 3777 @LENGTH@ 89
------UPD VariableDeclarationFragment@@moduleLoader=InitialModuleLoaderFactory.getModuleLoader(modulesDir) @TO@ moduleLoader=InitialModuleLoaderFactory.getModuleLoader(modulesDir,systemPackages) @AT@ 3796 @LENGTH@ 69
---------UPD MethodInvocation@@InitialModuleLoaderFactory.getModuleLoader(modulesDir) @TO@ InitialModuleLoaderFactory.getModuleLoader(modulesDir,systemPackages) @AT@ 3811 @LENGTH@ 54
------------UPD SimpleName@@MethodName:getModuleLoader:[modulesDir] @TO@ MethodName:getModuleLoader:[modulesDir, systemPackages] @AT@ 3838 @LENGTH@ 27
---------------INS SimpleName@@systemPackages @TO@ SimpleName@@MethodName:getModuleLoader:[modulesDir] @AT@ 3891 @LENGTH@ 14


UPD ExpressionStatement@@MethodInvocation:JettyHttpProducerSuspendWhileInProgressTest.this.context.stop() @TO@ MethodInvocation:context.stop() @AT@ 2214 @LENGTH@ 64
---UPD MethodInvocation@@JettyHttpProducerSuspendWhileInProgressTest.this.context.stop() @TO@ context.stop() @AT@ 2214 @LENGTH@ 63
------DEL FieldAccess@@JettyHttpProducerSuspendWhileInProgressTest.this.context @AT@ 2214 @LENGTH@ 56
---------DEL ThisExpression@@this @AT@ 2214 @LENGTH@ 48
---------DEL SimpleName@@context @AT@ 2263 @LENGTH@ 7
------INS SimpleName@@Name:context @TO@ MethodInvocation@@JettyHttpProducerSuspendWhileInProgressTest.this.context.stop() @AT@ 2214 @LENGTH@ 7


DEL MethodDeclaration@@StatelessInterface, MethodName:createSLSBOnInvocation, Exception,  @AT@ 1654 @LENGTH@ 42
---DEL SimpleType@@StatelessInterface @AT@ 1635 @LENGTH@ 18
---DEL SimpleName@@MethodName:createSLSBOnInvocation @AT@ 1654 @LENGTH@ 22
---DEL SimpleType@@Exception @AT@ 1686 @LENGTH@ 9


UPD MethodDeclaration@@public, List<RouteDefinition>, MethodName:getRouteDefinitions,  @TO@ public, synchronized, List<RouteDefinition>, MethodName:getRouteDefinitions,  @AT@ 43021 @LENGTH@ 91
---INS Modifier@@synchronized @TO@ MethodDeclaration@@public, List<RouteDefinition>, MethodName:getRouteDefinitions,  @AT@ 43028 @LENGTH@ 12


UPD MethodDeclaration@@public, static, RestTemplate, MethodName:create, OAuth1Credentials oauth1Credentials,  @TO@ public, static, RestTemplate, MethodName:create, OAuth1Credentials credentials,  @AT@ 2423 @LENGTH@ 498
---UPD SingleVariableDeclaration@@OAuth1Credentials oauth1Credentials @TO@ OAuth1Credentials credentials @AT@ 2457 @LENGTH@ 35
------UPD SimpleName@@oauth1Credentials @TO@ credentials @AT@ 2475 @LENGTH@ 17
---UPD IfStatement@@if (interceptorsSupported) {  client.setInterceptors(new ClientHttpRequestInterceptor[]{new OAuth1RequestInterceptor(oauth1Credentials)});} else {  client.setRequestFactory(new Spring30OAuth1RequestFactory(client.getRequestFactory(),oauth1Credentials));} @TO@ if (interceptorsSupported) {  client.setInterceptors(new ClientHttpRequestInterceptor[]{new OAuth1RequestInterceptor(credentials)});} else {  client.setRequestFactory(new Spring30OAuth1RequestFactory(client.getRequestFactory(),credentials));} @AT@ 2594 @LENGTH@ 307
------UPD Block@@ThenBody:{  client.setInterceptors(new ClientHttpRequestInterceptor[]{new OAuth1RequestInterceptor(oauth1Credentials)});} @TO@ ThenBody:{  client.setInterceptors(new ClientHttpRequestInterceptor[]{new OAuth1RequestInterceptor(credentials)});} @AT@ 2621 @LENGTH@ 133
---------UPD ExpressionStatement@@MethodInvocation:client.setInterceptors(new ClientHttpRequestInterceptor[]{new OAuth1RequestInterceptor(oauth1Credentials)}) @TO@ MethodInvocation:client.setInterceptors(new ClientHttpRequestInterceptor[]{new OAuth1RequestInterceptor(credentials)}) @AT@ 2640 @LENGTH@ 110
------------UPD MethodInvocation@@client.setInterceptors(new ClientHttpRequestInterceptor[]{new OAuth1RequestInterceptor(oauth1Credentials)}) @TO@ client.setInterceptors(new ClientHttpRequestInterceptor[]{new OAuth1RequestInterceptor(credentials)}) @AT@ 2640 @LENGTH@ 109
---------------UPD SimpleName@@MethodName:setInterceptors:[new ClientHttpRequestInterceptor[]{new OAuth1RequestInterceptor(oauth1Credentials)}] @TO@ MethodName:setInterceptors:[new ClientHttpRequestInterceptor[]{new OAuth1RequestInterceptor(credentials)}] @AT@ 2647 @LENGTH@ 102
------------------UPD ArrayCreation@@new ClientHttpRequestInterceptor[]{new OAuth1RequestInterceptor(oauth1Credentials)} @TO@ new ClientHttpRequestInterceptor[]{new OAuth1RequestInterceptor(credentials)} @AT@ 2663 @LENGTH@ 85
---------------------UPD ArrayInitializer@@{new OAuth1RequestInterceptor(oauth1Credentials)} @TO@ {new OAuth1RequestInterceptor(credentials)} @AT@ 2698 @LENGTH@ 50
------------------------UPD ClassInstanceCreation@@OAuth1RequestInterceptor[oauth1Credentials] @TO@ OAuth1RequestInterceptor[credentials] @AT@ 2700 @LENGTH@ 47
---------------------------UPD SimpleName@@oauth1Credentials @TO@ credentials @AT@ 2729 @LENGTH@ 17
------UPD Block@@ElseBody:{  client.setRequestFactory(new Spring30OAuth1RequestFactory(client.getRequestFactory(),oauth1Credentials));} @TO@ ElseBody:{  client.setRequestFactory(new Spring30OAuth1RequestFactory(client.getRequestFactory(),credentials));} @AT@ 2760 @LENGTH@ 141
---------UPD ExpressionStatement@@MethodInvocation:client.setRequestFactory(new Spring30OAuth1RequestFactory(client.getRequestFactory(),oauth1Credentials)) @TO@ MethodInvocation:client.setRequestFactory(new Spring30OAuth1RequestFactory(client.getRequestFactory(),credentials)) @AT@ 2791 @LENGTH@ 106
------------UPD MethodInvocation@@client.setRequestFactory(new Spring30OAuth1RequestFactory(client.getRequestFactory(),oauth1Credentials)) @TO@ client.setRequestFactory(new Spring30OAuth1RequestFactory(client.getRequestFactory(),credentials)) @AT@ 2791 @LENGTH@ 105
---------------UPD SimpleName@@MethodName:setRequestFactory:[new Spring30OAuth1RequestFactory(client.getRequestFactory(),oauth1Credentials)] @TO@ MethodName:setRequestFactory:[new Spring30OAuth1RequestFactory(client.getRequestFactory(),credentials)] @AT@ 2798 @LENGTH@ 98
------------------UPD ClassInstanceCreation@@Spring30OAuth1RequestFactory[client.getRequestFactory(), oauth1Credentials] @TO@ Spring30OAuth1RequestFactory[client.getRequestFactory(), credentials] @AT@ 2816 @LENGTH@ 79
---------------------UPD SimpleName@@oauth1Credentials @TO@ credentials @AT@ 2877 @LENGTH@ 17


UPD TypeDeclaration@@[public]OrPart, [Iterable<Part>] @TO@ [public, static]OrPart, [Iterable<Part>] @AT@ 4533 @LENGTH@ 852
---INS Modifier@@static @TO@ TypeDeclaration@@[public]OrPart, [Iterable<Part>] @AT@ 4547 @LENGTH@ 6


INS MethodDeclaration@@public, void, MethodName:testCreateRemainingURIEncoding, Exception,  @TO@ TypeDeclaration@@[public]URISupportTest, ContextTestSupport @AT@ 5426 @LENGTH@ 929
---INS Modifier@@public @TO@ MethodDeclaration@@public, void, MethodName:testCreateRemainingURIEncoding, Exception,  @AT@ 5426 @LENGTH@ 6
---INS PrimitiveType@@void @TO@ MethodDeclaration@@public, void, MethodName:testCreateRemainingURIEncoding, Exception,  @AT@ 5433 @LENGTH@ 4
---INS SimpleName@@MethodName:testCreateRemainingURIEncoding @TO@ MethodDeclaration@@public, void, MethodName:testCreateRemainingURIEncoding, Exception,  @AT@ 5438 @LENGTH@ 30
---INS SimpleType@@Exception @TO@ MethodDeclaration@@public, void, MethodName:testCreateRemainingURIEncoding, Exception,  @AT@ 5478 @LENGTH@ 9
---INS VariableDeclarationStatement@@String uri="http://localhost:23271/myapp/mytest?columns=name%2Ctotalsens%2Cupsens&username=apiuser"; @TO@ MethodDeclaration@@public, void, MethodName:testCreateRemainingURIEncoding, Exception,  @AT@ 5587 @LENGTH@ 102
------INS SimpleType@@String @TO@ VariableDeclarationStatement@@String uri="http://localhost:23271/myapp/mytest?columns=name%2Ctotalsens%2Cupsens&username=apiuser"; @AT@ 5587 @LENGTH@ 6
------INS VariableDeclarationFragment@@uri="http://localhost:23271/myapp/mytest?columns=name%2Ctotalsens%2Cupsens&username=apiuser" @TO@ VariableDeclarationStatement@@String uri="http://localhost:23271/myapp/mytest?columns=name%2Ctotalsens%2Cupsens&username=apiuser"; @AT@ 5594 @LENGTH@ 94
---------INS SimpleName@@uri @TO@ VariableDeclarationFragment@@uri="http://localhost:23271/myapp/mytest?columns=name%2Ctotalsens%2Cupsens&username=apiuser" @AT@ 5594 @LENGTH@ 3
---------INS StringLiteral@@"http://localhost:23271/myapp/mytest?columns=name%2Ctotalsens%2Cupsens&username=apiuser" @TO@ VariableDeclarationFragment@@uri="http://localhost:23271/myapp/mytest?columns=name%2Ctotalsens%2Cupsens&username=apiuser" @AT@ 5600 @LENGTH@ 88
---INS VariableDeclarationStatement@@Map map=new LinkedHashMap(); @TO@ MethodDeclaration@@public, void, MethodName:testCreateRemainingURIEncoding, Exception,  @AT@ 5761 @LENGTH@ 30
------INS SimpleType@@Map @TO@ VariableDeclarationStatement@@Map map=new LinkedHashMap(); @AT@ 5761 @LENGTH@ 3
------INS VariableDeclarationFragment@@map=new LinkedHashMap() @TO@ VariableDeclarationStatement@@Map map=new LinkedHashMap(); @AT@ 5765 @LENGTH@ 25
---------INS SimpleName@@map @TO@ VariableDeclarationFragment@@map=new LinkedHashMap() @AT@ 5765 @LENGTH@ 3
---------INS ClassInstanceCreation@@LinkedHashMap[] @TO@ VariableDeclarationFragment@@map=new LinkedHashMap() @AT@ 5771 @LENGTH@ 19
------------INS New@@new @TO@ ClassInstanceCreation@@LinkedHashMap[] @AT@ 5771 @LENGTH@ 3
------------INS SimpleType@@LinkedHashMap @TO@ ClassInstanceCreation@@LinkedHashMap[] @AT@ 5775 @LENGTH@ 13
---INS ExpressionStatement@@MethodInvocation:map.put("foo","abc def") @TO@ MethodDeclaration@@public, void, MethodName:testCreateRemainingURIEncoding, Exception,  @AT@ 5800 @LENGTH@ 26
------INS MethodInvocation@@map.put("foo","abc def") @TO@ ExpressionStatement@@MethodInvocation:map.put("foo","abc def") @AT@ 5800 @LENGTH@ 25
---------INS SimpleName@@Name:map @TO@ MethodInvocation@@map.put("foo","abc def") @AT@ 5800 @LENGTH@ 3
---------INS SimpleName@@MethodName:put:["foo", "abc def"] @TO@ MethodInvocation@@map.put("foo","abc def") @AT@ 5804 @LENGTH@ 21
------------INS StringLiteral@@"foo" @TO@ SimpleName@@MethodName:put:["foo", "abc def"] @AT@ 5808 @LENGTH@ 5
------------INS StringLiteral@@"abc def" @TO@ SimpleName@@MethodName:put:["foo", "abc def"] @AT@ 5815 @LENGTH@ 9
---INS ExpressionStatement@@MethodInvocation:map.put("bar","123,456") @TO@ MethodDeclaration@@public, void, MethodName:testCreateRemainingURIEncoding, Exception,  @AT@ 5835 @LENGTH@ 26
------INS MethodInvocation@@map.put("bar","123,456") @TO@ ExpressionStatement@@MethodInvocation:map.put("bar","123,456") @AT@ 5835 @LENGTH@ 25
---------INS SimpleName@@Name:map @TO@ MethodInvocation@@map.put("bar","123,456") @AT@ 5835 @LENGTH@ 3
---------INS SimpleName@@MethodName:put:["bar", "123,456"] @TO@ MethodInvocation@@map.put("bar","123,456") @AT@ 5839 @LENGTH@ 21
------------INS StringLiteral@@"bar" @TO@ SimpleName@@MethodName:put:["bar", "123,456"] @AT@ 5843 @LENGTH@ 5
------------INS StringLiteral@@"123,456" @TO@ SimpleName@@MethodName:put:["bar", "123,456"] @AT@ 5850 @LENGTH@ 9
---INS ExpressionStatement@@MethodInvocation:map.put("name","S\u00F8ren") @TO@ MethodDeclaration@@public, void, MethodName:testCreateRemainingURIEncoding, Exception,  @AT@ 5870 @LENGTH@ 30
------INS MethodInvocation@@map.put("name","S\u00F8ren") @TO@ ExpressionStatement@@MethodInvocation:map.put("name","S\u00F8ren") @AT@ 5870 @LENGTH@ 29
---------INS SimpleName@@Name:map @TO@ MethodInvocation@@map.put("name","S\u00F8ren") @AT@ 5870 @LENGTH@ 3
---------INS SimpleName@@MethodName:put:["name", "S\u00F8ren"] @TO@ MethodInvocation@@map.put("name","S\u00F8ren") @AT@ 5874 @LENGTH@ 25
------------INS StringLiteral@@"name" @TO@ SimpleName@@MethodName:put:["name", "S\u00F8ren"] @AT@ 5878 @LENGTH@ 6
------------INS StringLiteral@@"S\u00F8ren" @TO@ SimpleName@@MethodName:put:["name", "S\u00F8ren"] @AT@ 5886 @LENGTH@ 12
---INS ExpressionStatement@@MethodInvocation:System.out.println(map.get("name")) @TO@ MethodDeclaration@@public, void, MethodName:testCreateRemainingURIEncoding, Exception,  @AT@ 5927 @LENGTH@ 36
------INS MethodInvocation@@System.out.println(map.get("name")) @TO@ ExpressionStatement@@MethodInvocation:System.out.println(map.get("name")) @AT@ 5927 @LENGTH@ 35
---------INS QualifiedName@@Name:System.out @TO@ MethodInvocation@@System.out.println(map.get("name")) @AT@ 5927 @LENGTH@ 10
---------INS SimpleName@@MethodName:println:[map.get("name")] @TO@ MethodInvocation@@System.out.println(map.get("name")) @AT@ 5938 @LENGTH@ 24
------------INS MethodInvocation@@map.get("name") @TO@ SimpleName@@MethodName:println:[map.get("name")] @AT@ 5946 @LENGTH@ 15
---------------INS SimpleName@@Name:map @TO@ MethodInvocation@@map.get("name") @AT@ 5946 @LENGTH@ 3
---------------INS SimpleName@@MethodName:get:["name"] @TO@ MethodInvocation@@map.get("name") @AT@ 5950 @LENGTH@ 11
------------------INS StringLiteral@@"name" @TO@ SimpleName@@MethodName:get:["name"] @AT@ 5954 @LENGTH@ 6
---INS VariableDeclarationStatement@@URI out=URISupport.createRemainingURI(new URI(uri),map); @TO@ MethodDeclaration@@public, void, MethodName:testCreateRemainingURIEncoding, Exception,  @AT@ 6019 @LENGTH@ 59
------INS SimpleType@@URI @TO@ VariableDeclarationStatement@@URI out=URISupport.createRemainingURI(new URI(uri),map); @AT@ 6019 @LENGTH@ 3
------INS VariableDeclarationFragment@@out=URISupport.createRemainingURI(new URI(uri),map) @TO@ VariableDeclarationStatement@@URI out=URISupport.createRemainingURI(new URI(uri),map); @AT@ 6023 @LENGTH@ 54
---------INS SimpleName@@out @TO@ VariableDeclarationFragment@@out=URISupport.createRemainingURI(new URI(uri),map) @AT@ 6023 @LENGTH@ 3
---------INS MethodInvocation@@URISupport.createRemainingURI(new URI(uri),map) @TO@ VariableDeclarationFragment@@out=URISupport.createRemainingURI(new URI(uri),map) @AT@ 6029 @LENGTH@ 48
------------INS SimpleName@@Name:URISupport @TO@ MethodInvocation@@URISupport.createRemainingURI(new URI(uri),map) @AT@ 6029 @LENGTH@ 10
------------INS SimpleName@@MethodName:createRemainingURI:[new URI(uri), map] @TO@ MethodInvocation@@URISupport.createRemainingURI(new URI(uri),map) @AT@ 6040 @LENGTH@ 37
---------------INS ClassInstanceCreation@@URI[uri] @TO@ SimpleName@@MethodName:createRemainingURI:[new URI(uri), map] @AT@ 6059 @LENGTH@ 12
------------------INS New@@new @TO@ ClassInstanceCreation@@URI[uri] @AT@ 6059 @LENGTH@ 3
------------------INS SimpleType@@URI @TO@ ClassInstanceCreation@@URI[uri] @AT@ 6063 @LENGTH@ 3
------------------INS SimpleName@@uri @TO@ ClassInstanceCreation@@URI[uri] @AT@ 6067 @LENGTH@ 3
---------------INS SimpleName@@map @TO@ SimpleName@@MethodName:createRemainingURI:[new URI(uri), map] @AT@ 6073 @LENGTH@ 3
---INS ExpressionStatement@@MethodInvocation:assertNotNull(out) @TO@ MethodDeclaration@@public, void, MethodName:testCreateRemainingURIEncoding, Exception,  @AT@ 6087 @LENGTH@ 19
------INS MethodInvocation@@assertNotNull(out) @TO@ ExpressionStatement@@MethodInvocation:assertNotNull(out) @AT@ 6087 @LENGTH@ 18
---------INS SimpleName@@MethodName:assertNotNull:[out] @TO@ MethodInvocation@@assertNotNull(out) @AT@ 6087 @LENGTH@ 18
------------INS SimpleName@@out @TO@ SimpleName@@MethodName:assertNotNull:[out] @AT@ 6101 @LENGTH@ 3
---INS ExpressionStatement@@MethodInvocation:assertEquals("http://localhost:23271/myapp/mytest?foo=abc+def&bar=123%2C456&name=S%C3%B8ren",out.toString()) @TO@ MethodDeclaration@@public, void, MethodName:testCreateRemainingURIEncoding, Exception,  @AT@ 6115 @LENGTH@ 110
------INS MethodInvocation@@assertEquals("http://localhost:23271/myapp/mytest?foo=abc+def&bar=123%2C456&name=S%C3%B8ren",out.toString()) @TO@ ExpressionStatement@@MethodInvocation:assertEquals("http://localhost:23271/myapp/mytest?foo=abc+def&bar=123%2C456&name=S%C3%B8ren",out.toString()) @AT@ 6115 @LENGTH@ 109
---------INS SimpleName@@MethodName:assertEquals:["http://localhost:23271/myapp/mytest?foo=abc+def&bar=123%2C456&name=S%C3%B8ren", out.toString()] @TO@ MethodInvocation@@assertEquals("http://localhost:23271/myapp/mytest?foo=abc+def&bar=123%2C456&name=S%C3%B8ren",out.toString()) @AT@ 6115 @LENGTH@ 109
------------INS StringLiteral@@"http://localhost:23271/myapp/mytest?foo=abc+def&bar=123%2C456&name=S%C3%B8ren" @TO@ SimpleName@@MethodName:assertEquals:["http://localhost:23271/myapp/mytest?foo=abc+def&bar=123%2C456&name=S%C3%B8ren", out.toString()] @AT@ 6128 @LENGTH@ 79
------------INS MethodInvocation@@out.toString() @TO@ SimpleName@@MethodName:assertEquals:["http://localhost:23271/myapp/mytest?foo=abc+def&bar=123%2C456&name=S%C3%B8ren", out.toString()] @AT@ 6209 @LENGTH@ 14
---------------INS SimpleName@@Name:out @TO@ MethodInvocation@@out.toString() @AT@ 6209 @LENGTH@ 3
---------------INS SimpleName@@MethodName:toString:[] @TO@ MethodInvocation@@out.toString() @AT@ 6213 @LENGTH@ 10
---INS ExpressionStatement@@MethodInvocation:assertEquals("http://localhost:23271/myapp/mytest?foo=abc+def&bar=123%2C456&name=S%C3%B8ren",out.toASCIIString()) @TO@ MethodDeclaration@@public, void, MethodName:testCreateRemainingURIEncoding, Exception,  @AT@ 6234 @LENGTH@ 115
------INS MethodInvocation@@assertEquals("http://localhost:23271/myapp/mytest?foo=abc+def&bar=123%2C456&name=S%C3%B8ren",out.toASCIIString()) @TO@ ExpressionStatement@@MethodInvocation:assertEquals("http://localhost:23271/myapp/mytest?foo=abc+def&bar=123%2C456&name=S%C3%B8ren",out.toASCIIString()) @AT@ 6234 @LENGTH@ 114
---------INS SimpleName@@MethodName:assertEquals:["http://localhost:23271/myapp/mytest?foo=abc+def&bar=123%2C456&name=S%C3%B8ren", out.toASCIIString()] @TO@ MethodInvocation@@assertEquals("http://localhost:23271/myapp/mytest?foo=abc+def&bar=123%2C456&name=S%C3%B8ren",out.toASCIIString()) @AT@ 6234 @LENGTH@ 114
------------INS StringLiteral@@"http://localhost:23271/myapp/mytest?foo=abc+def&bar=123%2C456&name=S%C3%B8ren" @TO@ SimpleName@@MethodName:assertEquals:["http://localhost:23271/myapp/mytest?foo=abc+def&bar=123%2C456&name=S%C3%B8ren", out.toASCIIString()] @AT@ 6247 @LENGTH@ 79
------------INS MethodInvocation@@out.toASCIIString() @TO@ SimpleName@@MethodName:assertEquals:["http://localhost:23271/myapp/mytest?foo=abc+def&bar=123%2C456&name=S%C3%B8ren", out.toASCIIString()] @AT@ 6328 @LENGTH@ 19
---------------INS SimpleName@@Name:out @TO@ MethodInvocation@@out.toASCIIString() @AT@ 6328 @LENGTH@ 3
---------------INS SimpleName@@MethodName:toASCIIString:[] @TO@ MethodInvocation@@out.toASCIIString() @AT@ 6332 @LENGTH@ 15


INS VariableDeclarationStatement@@Set<String> deploymentNames=modelNode.keys(); @TO@ MethodDeclaration@@private, void, MethodName:writeServerDeployments, final XMLExtendedStreamWriter writer, final ModelNode modelNode, XMLStreamException,  @AT@ 21556 @LENGTH@ 47
---INS ParameterizedType@@Set<String> @TO@ VariableDeclarationStatement@@Set<String> deploymentNames=modelNode.keys(); @AT@ 21556 @LENGTH@ 11
------INS SimpleType@@Set @TO@ ParameterizedType@@Set<String> @AT@ 21556 @LENGTH@ 3
------INS SimpleType@@String @TO@ ParameterizedType@@Set<String> @AT@ 21560 @LENGTH@ 6
---INS VariableDeclarationFragment@@deploymentNames=modelNode.keys() @TO@ VariableDeclarationStatement@@Set<String> deploymentNames=modelNode.keys(); @AT@ 21568 @LENGTH@ 34
------INS SimpleName@@deploymentNames @TO@ VariableDeclarationFragment@@deploymentNames=modelNode.keys() @AT@ 21568 @LENGTH@ 15
------INS MethodInvocation@@modelNode.keys() @TO@ VariableDeclarationFragment@@deploymentNames=modelNode.keys() @AT@ 21586 @LENGTH@ 16
---------INS SimpleName@@Name:modelNode @TO@ MethodInvocation@@modelNode.keys() @AT@ 21586 @LENGTH@ 9
---------INS SimpleName@@MethodName:keys:[] @TO@ MethodInvocation@@modelNode.keys() @AT@ 21596 @LENGTH@ 6


UPD ExpressionStatement@@MethodInvocation:result.get("input-stream-index").set(index) @TO@ MethodInvocation:result.get("content").get(0).get("input-stream-index").set(index) @AT@ 10363 @LENGTH@ 44
---UPD MethodInvocation@@result.get("input-stream-index").set(index) @TO@ result.get("content").get(0).get("input-stream-index").set(index) @AT@ 10363 @LENGTH@ 43
------INS MethodInvocation@@MethodName:get:[0] @TO@ MethodInvocation@@result.get("input-stream-index").set(index) @AT@ 10363 @LENGTH@ 28
---------INS NumberLiteral@@0 @TO@ MethodInvocation@@MethodName:get:[0] @AT@ 10389 @LENGTH@ 1
------INS MethodInvocation@@MethodName:get:["content"] @TO@ MethodInvocation@@result.get("input-stream-index").set(index) @AT@ 10363 @LENGTH@ 21
---------INS StringLiteral@@"content" @TO@ MethodInvocation@@MethodName:get:["content"] @AT@ 10374 @LENGTH@ 9


UPD TryStatement@@try {  referenceReference.set(reference);  Object result=context.proceed();  ok=true;  return result;}  finally {  if (!ok) {    reference.release();    referenceReference.set(null);  }} @TO@ try {  referenceReference.set(reference);  context.setTarget(reference.getInstance());  Object result=context.proceed();  ok=true;  return result;}  finally {  context.setTarget(null);  if (!ok) {    reference.release();    referenceReference.set(null);  }} @AT@ 2169 @LENGTH@ 339
---INS ExpressionStatement@@MethodInvocation:context.setTarget(reference.getInstance()) @TO@ TryStatement@@try {  referenceReference.set(reference);  Object result=context.proceed();  ok=true;  return result;}  finally {  if (!ok) {    reference.release();    referenceReference.set(null);  }} @AT@ 2242 @LENGTH@ 43
------INS MethodInvocation@@context.setTarget(reference.getInstance()) @TO@ ExpressionStatement@@MethodInvocation:context.setTarget(reference.getInstance()) @AT@ 2242 @LENGTH@ 42
---------INS SimpleName@@Name:context @TO@ MethodInvocation@@context.setTarget(reference.getInstance()) @AT@ 2242 @LENGTH@ 7
---------INS SimpleName@@MethodName:setTarget:[reference.getInstance()] @TO@ MethodInvocation@@context.setTarget(reference.getInstance()) @AT@ 2250 @LENGTH@ 34
------------INS MethodInvocation@@reference.getInstance() @TO@ SimpleName@@MethodName:setTarget:[reference.getInstance()] @AT@ 2260 @LENGTH@ 23
---------------INS SimpleName@@Name:reference @TO@ MethodInvocation@@reference.getInstance() @AT@ 2260 @LENGTH@ 9
---------------INS SimpleName@@MethodName:getInstance:[] @TO@ MethodInvocation@@reference.getInstance() @AT@ 2270 @LENGTH@ 13
---UPD Block@@FinallyBody:{  if (!ok) {    reference.release();    referenceReference.set(null);  }} @TO@ FinallyBody:{  context.setTarget(null);  if (!ok) {    reference.release();    referenceReference.set(null);  }} @AT@ 2357 @LENGTH@ 151
------INS ExpressionStatement@@MethodInvocation:context.setTarget(null) @TO@ Block@@FinallyBody:{  if (!ok) {    reference.release();    referenceReference.set(null);  }} @AT@ 2435 @LENGTH@ 24
---------INS MethodInvocation@@context.setTarget(null) @TO@ ExpressionStatement@@MethodInvocation:context.setTarget(null) @AT@ 2435 @LENGTH@ 23
------------INS SimpleName@@Name:context @TO@ MethodInvocation@@context.setTarget(null) @AT@ 2435 @LENGTH@ 7
------------INS SimpleName@@MethodName:setTarget:[null] @TO@ MethodInvocation@@context.setTarget(null) @AT@ 2443 @LENGTH@ 15
---------------INS NullLiteral@@null @TO@ SimpleName@@MethodName:setTarget:[null] @AT@ 2453 @LENGTH@ 4


INS MethodDeclaration@@public, void, MethodName:setBody, Object body,  @TO@ TypeDeclaration@@[public]JmsMessage, DefaultMessage @AT@ 3486 @LENGTH@ 309
---INS Modifier@@public @TO@ MethodDeclaration@@public, void, MethodName:setBody, Object body,  @AT@ 3486 @LENGTH@ 6
---INS PrimitiveType@@void @TO@ MethodDeclaration@@public, void, MethodName:setBody, Object body,  @AT@ 3493 @LENGTH@ 4
---INS SimpleName@@MethodName:setBody @TO@ MethodDeclaration@@public, void, MethodName:setBody, Object body,  @AT@ 3498 @LENGTH@ 7
---INS SingleVariableDeclaration@@Object body @TO@ MethodDeclaration@@public, void, MethodName:setBody, Object body,  @AT@ 3506 @LENGTH@ 11
------INS SimpleType@@Object @TO@ SingleVariableDeclaration@@Object body @AT@ 3506 @LENGTH@ 6
------INS SimpleName@@body @TO@ SingleVariableDeclaration@@Object body @AT@ 3513 @LENGTH@ 4
---INS ExpressionStatement@@SuperMethodInvocation:super.setBody(body) @TO@ MethodDeclaration@@public, void, MethodName:setBody, Object body,  @AT@ 3529 @LENGTH@ 20
------INS SuperMethodInvocation@@super.setBody(body) @TO@ ExpressionStatement@@SuperMethodInvocation:super.setBody(body) @AT@ 3529 @LENGTH@ 19
---------INS SimpleName@@MethodName:setBody:[body] @TO@ SuperMethodInvocation@@super.setBody(body) @AT@ 3535 @LENGTH@ 7
---------INS SimpleName@@body @TO@ SuperMethodInvocation@@super.setBody(body) @AT@ 3543 @LENGTH@ 4
---INS IfStatement@@if (body == null) {  ensureInitialHeaders();  jmsMessage=null;} @TO@ MethodDeclaration@@public, void, MethodName:setBody, Object body,  @AT@ 3558 @LENGTH@ 231
------INS InfixExpression@@body == null @TO@ IfStatement@@if (body == null) {  ensureInitialHeaders();  jmsMessage=null;} @AT@ 3562 @LENGTH@ 12
---------INS SimpleName@@body @TO@ InfixExpression@@body == null @AT@ 3562 @LENGTH@ 4
---------INS Operator@@== @TO@ InfixExpression@@body == null @AT@ 3566 @LENGTH@ 2
---------INS NullLiteral@@null @TO@ InfixExpression@@body == null @AT@ 3570 @LENGTH@ 4
------INS Block@@ThenBody:{  ensureInitialHeaders();  jmsMessage=null;} @TO@ IfStatement@@if (body == null) {  ensureInitialHeaders();  jmsMessage=null;} @AT@ 3576 @LENGTH@ 213
---------INS ExpressionStatement@@MethodInvocation:ensureInitialHeaders() @TO@ Block@@ThenBody:{  ensureInitialHeaders();  jmsMessage=null;} @AT@ 3651 @LENGTH@ 23
------------INS MethodInvocation@@MethodName:ensureInitialHeaders:[] @TO@ ExpressionStatement@@MethodInvocation:ensureInitialHeaders() @AT@ 3651 @LENGTH@ 22
---------INS ExpressionStatement@@Assignment:jmsMessage=null @TO@ Block@@ThenBody:{  ensureInitialHeaders();  jmsMessage=null;} @AT@ 3761 @LENGTH@ 18
------------INS Assignment@@jmsMessage=null @TO@ ExpressionStatement@@Assignment:jmsMessage=null @AT@ 3761 @LENGTH@ 17
---------------INS SimpleName@@jmsMessage @TO@ Assignment@@jmsMessage=null @AT@ 3761 @LENGTH@ 10
---------------INS Operator@@= @TO@ Assignment@@jmsMessage=null @AT@ 3771 @LENGTH@ 1
---------------INS NullLiteral@@null @TO@ Assignment@@jmsMessage=null @AT@ 3774 @LENGTH@ 4


UPD FieldDeclaration@@private, static, final, String, [DAO_INTERFACE_PROPERTY="daoInterface"] @TO@ private, static, final, String, [DAO_INTERFACE_PROPERTY="repositoryInterface"] @AT@ 1626 @LENGTH@ 68
---UPD VariableDeclarationFragment@@DAO_INTERFACE_PROPERTY="daoInterface" @TO@ DAO_INTERFACE_PROPERTY="repositoryInterface" @AT@ 1654 @LENGTH@ 39
------UPD StringLiteral@@"daoInterface" @TO@ "repositoryInterface" @AT@ 1679 @LENGTH@ 14


INS FieldDeclaration@@private, static, final, Logger, [log=Logger.getLogger("org.jboss.jpa")] @TO@ TypeDeclaration@@[private, static, final]PersistenceContextJndiInjectable, [ManagedReferenceFactory] @AT@ 4983 @LENGTH@ 68
---INS Modifier@@private @TO@ FieldDeclaration@@private, static, final, Logger, [log=Logger.getLogger("org.jboss.jpa")] @AT@ 4983 @LENGTH@ 7
---INS Modifier@@static @TO@ FieldDeclaration@@private, static, final, Logger, [log=Logger.getLogger("org.jboss.jpa")] @AT@ 4991 @LENGTH@ 6
---INS Modifier@@final @TO@ FieldDeclaration@@private, static, final, Logger, [log=Logger.getLogger("org.jboss.jpa")] @AT@ 4998 @LENGTH@ 5
---INS SimpleType@@Logger @TO@ FieldDeclaration@@private, static, final, Logger, [log=Logger.getLogger("org.jboss.jpa")] @AT@ 5004 @LENGTH@ 6
---INS VariableDeclarationFragment@@log=Logger.getLogger("org.jboss.jpa") @TO@ FieldDeclaration@@private, static, final, Logger, [log=Logger.getLogger("org.jboss.jpa")] @AT@ 5011 @LENGTH@ 39
------INS SimpleName@@log @TO@ VariableDeclarationFragment@@log=Logger.getLogger("org.jboss.jpa") @AT@ 5011 @LENGTH@ 3
------INS MethodInvocation@@Logger.getLogger("org.jboss.jpa") @TO@ VariableDeclarationFragment@@log=Logger.getLogger("org.jboss.jpa") @AT@ 5017 @LENGTH@ 33
---------INS SimpleName@@Name:Logger @TO@ MethodInvocation@@Logger.getLogger("org.jboss.jpa") @AT@ 5017 @LENGTH@ 6
---------INS SimpleName@@MethodName:getLogger:["org.jboss.jpa"] @TO@ MethodInvocation@@Logger.getLogger("org.jboss.jpa") @AT@ 5024 @LENGTH@ 26
------------INS StringLiteral@@"org.jboss.jpa" @TO@ SimpleName@@MethodName:getLogger:["org.jboss.jpa"] @AT@ 5034 @LENGTH@ 15


INS FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @TO@ TypeDeclaration@@[public, final]CasAssertionAuthenticationToken, AbstractAuthenticationToken @AT@ 1188 @LENGTH@ 90
---INS Modifier@@private @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @AT@ 1188 @LENGTH@ 7
---INS Modifier@@static @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @AT@ 1196 @LENGTH@ 6
---INS Modifier@@final @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @AT@ 1203 @LENGTH@ 5
---INS PrimitiveType@@long @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @AT@ 1209 @LENGTH@ 4
---INS VariableDeclarationFragment@@serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @AT@ 1214 @LENGTH@ 63
------INS SimpleName@@serialVersionUID @TO@ VariableDeclarationFragment@@serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID @AT@ 1214 @LENGTH@ 16
------INS QualifiedName@@SpringSecurityCoreVersion.SERIAL_VERSION_UID @TO@ VariableDeclarationFragment@@serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID @AT@ 1233 @LENGTH@ 44
---------INS SimpleName@@SpringSecurityCoreVersion @TO@ QualifiedName@@SpringSecurityCoreVersion.SERIAL_VERSION_UID @AT@ 1233 @LENGTH@ 25
---------INS SimpleName@@SERIAL_VERSION_UID @TO@ QualifiedName@@SpringSecurityCoreVersion.SERIAL_VERSION_UID @AT@ 1259 @LENGTH@ 18


UPD TryStatement@@try {  ModelNode param=operation.get(NAMESPACE);  ModelNode namespaces=context.getSubModel().get(NAMESPACES);  ModelNode toRemove=null;  String failure=typeValidator.validateParameter(NAMESPACE,param);  if (failure == null) {    ModelNode newList=new ModelNode().setEmptyList();    String prefix=param.asProperty().getName();    if (namespaces.isDefined()) {      for (      Property namespace : namespaces.asPropertyList()) {        if (!prefix.equals(namespace.getName())) {          toRemove=newList.add(namespace.getName(),namespace.getValue());          break;        }      }    }    if (toRemove != null) {      namespaces.set(newList);      ModelNode compensating=NamespaceAddHandler.getAddNamespaceOperation(operation.get(OP_ADDR),toRemove);      resultHandler.handleResultComplete(compensating);    } else {      failure="No namespace with URI " + prefix + "found";    }  }  if (failure != null) {    resultHandler.handleFailed(new ModelNode().set(failure));  }} catch (Exception e) {  resultHandler.handleFailed(new ModelNode().set(e.getLocalizedMessage()));} @TO@ try {  ModelNode param=operation.get(NAMESPACE);  String failure=typeValidator.validateParameter(NAMESPACE,param);  if (failure == null) {    ModelNode namespaces=context.getSubModel().get(NAMESPACES);    Property toRemove=null;    ModelNode newList=new ModelNode().setEmptyList();    String prefix=param.asString();    if (namespaces.isDefined()) {      for (      Property namespace : namespaces.asPropertyList()) {        if (prefix.equals(namespace.getName())) {          toRemove=namespace;        } else {          newList.add(namespace.getName(),namespace.getValue());        }      }    }    if (toRemove != null) {      namespaces.set(newList);      ModelNode compensating=NamespaceAddHandler.getAddNamespaceOperation(operation.get(OP_ADDR),toRemove);      resultHandler.handleResultComplete(compensating);    } else {      failure="No namespace with URI " + prefix + " found";    }  }  if (failure != null) {    resultHandler.handleFailed(new ModelNode().set(failure));  }} catch (Exception e) {  resultHandler.handleFailed(new ModelNode().set(e.getLocalizedMessage()));} @AT@ 2987 @LENGTH@ 1494
---DEL VariableDeclarationStatement@@ModelNode toRemove=null; @AT@ 3135 @LENGTH@ 26
------DEL SimpleType@@ModelNode @AT@ 3135 @LENGTH@ 9
------DEL VariableDeclarationFragment@@toRemove=null @AT@ 3145 @LENGTH@ 15
---------DEL SimpleName@@toRemove @AT@ 3145 @LENGTH@ 8
---------DEL NullLiteral@@null @AT@ 3156 @LENGTH@ 4
---UPD IfStatement@@if (failure == null) {  ModelNode newList=new ModelNode().setEmptyList();  String prefix=param.asProperty().getName();  if (namespaces.isDefined()) {    for (    Property namespace : namespaces.asPropertyList()) {      if (!prefix.equals(namespace.getName())) {        toRemove=newList.add(namespace.getName(),namespace.getValue());        break;      }    }  }  if (toRemove != null) {    namespaces.set(newList);    ModelNode compensating=NamespaceAddHandler.getAddNamespaceOperation(operation.get(OP_ADDR),toRemove);    resultHandler.handleResultComplete(compensating);  } else {    failure="No namespace with URI " + prefix + "found";  }} @TO@ if (failure == null) {  ModelNode namespaces=context.getSubModel().get(NAMESPACES);  Property toRemove=null;  ModelNode newList=new ModelNode().setEmptyList();  String prefix=param.asString();  if (namespaces.isDefined()) {    for (    Property namespace : namespaces.asPropertyList()) {      if (prefix.equals(namespace.getName())) {        toRemove=namespace;      } else {        newList.add(namespace.getName(),namespace.getValue());      }    }  }  if (toRemove != null) {    namespaces.set(newList);    ModelNode compensating=NamespaceAddHandler.getAddNamespaceOperation(operation.get(OP_ADDR),toRemove);    resultHandler.handleResultComplete(compensating);  } else {    failure="No namespace with URI " + prefix + " found";  }} @AT@ 3254 @LENGTH@ 967
------UPD Block@@ThenBody:{  ModelNode newList=new ModelNode().setEmptyList();  String prefix=param.asProperty().getName();  if (namespaces.isDefined()) {    for (    Property namespace : namespaces.asPropertyList()) {      if (!prefix.equals(namespace.getName())) {        toRemove=newList.add(namespace.getName(),namespace.getValue());        break;      }    }  }  if (toRemove != null) {    namespaces.set(newList);    ModelNode compensating=NamespaceAddHandler.getAddNamespaceOperation(operation.get(OP_ADDR),toRemove);    resultHandler.handleResultComplete(compensating);  } else {    failure="No namespace with URI " + prefix + "found";  }} @TO@ ThenBody:{  ModelNode namespaces=context.getSubModel().get(NAMESPACES);  Property toRemove=null;  ModelNode newList=new ModelNode().setEmptyList();  String prefix=param.asString();  if (namespaces.isDefined()) {    for (    Property namespace : namespaces.asPropertyList()) {      if (prefix.equals(namespace.getName())) {        toRemove=namespace;      } else {        newList.add(namespace.getName(),namespace.getValue());      }    }  }  if (toRemove != null) {    namespaces.set(newList);    ModelNode compensating=NamespaceAddHandler.getAddNamespaceOperation(operation.get(OP_ADDR),toRemove);    resultHandler.handleResultComplete(compensating);  } else {    failure="No namespace with URI " + prefix + " found";  }} @AT@ 3275 @LENGTH@ 946
---------MOV VariableDeclarationStatement@@ModelNode namespaces=context.getSubModel().get(NAMESPACES); @TO@ Block@@ThenBody:{  ModelNode newList=new ModelNode().setEmptyList();  String prefix=param.asProperty().getName();  if (namespaces.isDefined()) {    for (    Property namespace : namespaces.asPropertyList()) {      if (!prefix.equals(namespace.getName())) {        toRemove=newList.add(namespace.getName(),namespace.getValue());        break;      }    }  }  if (toRemove != null) {    namespaces.set(newList);    ModelNode compensating=NamespaceAddHandler.getAddNamespaceOperation(operation.get(OP_ADDR),toRemove);    resultHandler.handleResultComplete(compensating);  } else {    failure="No namespace with URI " + prefix + "found";  }} @AT@ 3061 @LENGTH@ 61
---------INS VariableDeclarationStatement@@Property toRemove=null; @TO@ Block@@ThenBody:{  ModelNode newList=new ModelNode().setEmptyList();  String prefix=param.asProperty().getName();  if (namespaces.isDefined()) {    for (    Property namespace : namespaces.asPropertyList()) {      if (!prefix.equals(namespace.getName())) {        toRemove=newList.add(namespace.getName(),namespace.getValue());        break;      }    }  }  if (toRemove != null) {    namespaces.set(newList);    ModelNode compensating=NamespaceAddHandler.getAddNamespaceOperation(operation.get(OP_ADDR),toRemove);    resultHandler.handleResultComplete(compensating);  } else {    failure="No namespace with URI " + prefix + "found";  }} @AT@ 3258 @LENGTH@ 25
------------INS SimpleType@@Property @TO@ VariableDeclarationStatement@@Property toRemove=null; @AT@ 3258 @LENGTH@ 8
------------INS VariableDeclarationFragment@@toRemove=null @TO@ VariableDeclarationStatement@@Property toRemove=null; @AT@ 3267 @LENGTH@ 15
---------------INS SimpleName@@toRemove @TO@ VariableDeclarationFragment@@toRemove=null @AT@ 3267 @LENGTH@ 8
---------------INS NullLiteral@@null @TO@ VariableDeclarationFragment@@toRemove=null @AT@ 3278 @LENGTH@ 4
---------UPD VariableDeclarationStatement@@String prefix=param.asProperty().getName(); @TO@ String prefix=param.asString(); @AT@ 3361 @LENGTH@ 45
------------UPD VariableDeclarationFragment@@prefix=param.asProperty().getName() @TO@ prefix=param.asString() @AT@ 3368 @LENGTH@ 37
---------------UPD MethodInvocation@@param.asProperty().getName() @TO@ param.asString() @AT@ 3377 @LENGTH@ 28
------------------DEL MethodInvocation@@MethodName:asProperty:[] @AT@ 3377 @LENGTH@ 18
------------------UPD SimpleName@@MethodName:getName:[] @TO@ MethodName:asString:[] @AT@ 3396 @LENGTH@ 9
---------UPD IfStatement@@if (namespaces.isDefined()) {  for (  Property namespace : namespaces.asPropertyList()) {    if (!prefix.equals(namespace.getName())) {      toRemove=newList.add(namespace.getName(),namespace.getValue());      break;    }  }} @TO@ if (namespaces.isDefined()) {  for (  Property namespace : namespaces.asPropertyList()) {    if (prefix.equals(namespace.getName())) {      toRemove=namespace;    } else {      newList.add(namespace.getName(),namespace.getValue());    }  }} @AT@ 3423 @LENGTH@ 369
------------UPD Block@@ThenBody:{  for (  Property namespace : namespaces.asPropertyList()) {    if (!prefix.equals(namespace.getName())) {      toRemove=newList.add(namespace.getName(),namespace.getValue());      break;    }  }} @TO@ ThenBody:{  for (  Property namespace : namespaces.asPropertyList()) {    if (prefix.equals(namespace.getName())) {      toRemove=namespace;    } else {      newList.add(namespace.getName(),namespace.getValue());    }  }} @AT@ 3451 @LENGTH@ 341
---------------UPD EnhancedForStatement@@for (Property namespace : namespaces.asPropertyList()) {  if (!prefix.equals(namespace.getName())) {    toRemove=newList.add(namespace.getName(),namespace.getValue());    break;  }} @TO@ for (Property namespace : namespaces.asPropertyList()) {  if (prefix.equals(namespace.getName())) {    toRemove=namespace;  } else {    newList.add(namespace.getName(),namespace.getValue());  }} @AT@ 3473 @LENGTH@ 301
------------------UPD IfStatement@@if (!prefix.equals(namespace.getName())) {  toRemove=newList.add(namespace.getName(),namespace.getValue());  break;} @TO@ if (prefix.equals(namespace.getName())) {  toRemove=namespace;} else {  newList.add(namespace.getName(),namespace.getValue());} @AT@ 3554 @LENGTH@ 198
---------------------DEL PrefixExpression@@!prefix.equals(namespace.getName()) @AT@ 3558 @LENGTH@ 35
------------------------DEL Operator@@! @AT@ 3558 @LENGTH@ 1
---------------------MOV MethodInvocation@@prefix.equals(namespace.getName()) @TO@ IfStatement@@if (!prefix.equals(namespace.getName())) {  toRemove=newList.add(namespace.getName(),namespace.getValue());  break;} @AT@ 3559 @LENGTH@ 34
---------------------INS Block@@ThenBody:{  toRemove=namespace;} @TO@ IfStatement@@if (!prefix.equals(namespace.getName())) {  toRemove=newList.add(namespace.getName(),namespace.getValue());  break;} @AT@ 3589 @LENGTH@ 77
------------------------INS ExpressionStatement@@Assignment:toRemove=namespace @TO@ Block@@ThenBody:{  toRemove=namespace;} @AT@ 3619 @LENGTH@ 21
---------------------------INS Assignment@@toRemove=namespace @TO@ ExpressionStatement@@Assignment:toRemove=namespace @AT@ 3619 @LENGTH@ 20
------------------------------INS SimpleName@@toRemove @TO@ Assignment@@toRemove=namespace @AT@ 3619 @LENGTH@ 8
------------------------------INS Operator@@= @TO@ Assignment@@toRemove=namespace @AT@ 3627 @LENGTH@ 1
------------------------------INS SimpleName@@namespace @TO@ Assignment@@toRemove=namespace @AT@ 3630 @LENGTH@ 9
---------------------UPD Block@@ThenBody:{  toRemove=newList.add(namespace.getName(),namespace.getValue());  break;} @TO@ ElseBody:{  newList.add(namespace.getName(),namespace.getValue());} @AT@ 3595 @LENGTH@ 157
------------------------UPD ExpressionStatement@@Assignment:toRemove=newList.add(namespace.getName(),namespace.getValue()) @TO@ MethodInvocation:newList.add(namespace.getName(),namespace.getValue()) @AT@ 3625 @LENGTH@ 66
---------------------------DEL Assignment@@toRemove=newList.add(namespace.getName(),namespace.getValue()) @AT@ 3625 @LENGTH@ 65
------------------------------DEL SimpleName@@toRemove @AT@ 3625 @LENGTH@ 8
------------------------------DEL Operator@@= @AT@ 3633 @LENGTH@ 1
---------------------------MOV MethodInvocation@@newList.add(namespace.getName(),namespace.getValue()) @TO@ ExpressionStatement@@Assignment:toRemove=newList.add(namespace.getName(),namespace.getValue()) @AT@ 3636 @LENGTH@ 54
------------------------DEL BreakStatement@@ @AT@ 3720 @LENGTH@ 6
---------UPD IfStatement@@if (toRemove != null) {  namespaces.set(newList);  ModelNode compensating=NamespaceAddHandler.getAddNamespaceOperation(operation.get(OP_ADDR),toRemove);  resultHandler.handleResultComplete(compensating);} else {  failure="No namespace with URI " + prefix + "found";} @TO@ if (toRemove != null) {  namespaces.set(newList);  ModelNode compensating=NamespaceAddHandler.getAddNamespaceOperation(operation.get(OP_ADDR),toRemove);  resultHandler.handleResultComplete(compensating);} else {  failure="No namespace with URI " + prefix + " found";} @AT@ 3810 @LENGTH@ 397
------------UPD Block@@ElseBody:{  failure="No namespace with URI " + prefix + "found";} @TO@ ElseBody:{  failure="No namespace with URI " + prefix + " found";} @AT@ 4113 @LENGTH@ 94
---------------UPD ExpressionStatement@@Assignment:failure="No namespace with URI " + prefix + "found" @TO@ Assignment:failure="No namespace with URI " + prefix + " found" @AT@ 4135 @LENGTH@ 54
------------------UPD Assignment@@failure="No namespace with URI " + prefix + "found" @TO@ failure="No namespace with URI " + prefix + " found" @AT@ 4135 @LENGTH@ 53
---------------------UPD InfixExpression@@"No namespace with URI " + prefix + "found" @TO@ "No namespace with URI " + prefix + " found" @AT@ 4145 @LENGTH@ 43
------------------------UPD StringLiteral@@"found" @TO@ " found" @AT@ 4181 @LENGTH@ 7


UPD FieldDeclaration@@private, CountDownLatch, [startStopLatch=new CountDownLatch(1)] @TO@ private, volatile, CountDownLatch, [startStopLatch=new CountDownLatch(1)] @AT@ 2612 @LENGTH@ 62
---INS Modifier@@volatile @TO@ FieldDeclaration@@private, CountDownLatch, [startStopLatch=new CountDownLatch(1)] @AT@ 2621 @LENGTH@ 8


UPD IfStatement@@if (0 > size) {  throw new IllegalArgumentException("Page size must not be less than or equal to zero!");} @TO@ if (0 >= size) {  throw new IllegalArgumentException("Page size must not be less than or equal to zero!");} @AT@ 1943 @LENGTH@ 147
---UPD InfixExpression@@0 > size @TO@ 0 >= size @AT@ 1947 @LENGTH@ 8
------UPD Operator@@> @TO@ >= @AT@ 1948 @LENGTH@ 1


UPD VariableDeclarationStatement@@StatefulSessionComponentInstance sfsb=(StatefulSessionComponentInstance)target; @TO@ StatefulSessionComponentInstance sfsb=(StatefulSessionComponentInstance)interceptorContext.getPrivateData(ComponentInstance.class); @AT@ 2058 @LENGTH@ 81
---UPD VariableDeclarationFragment@@sfsb=(StatefulSessionComponentInstance)target @TO@ sfsb=(StatefulSessionComponentInstance)interceptorContext.getPrivateData(ComponentInstance.class) @AT@ 2091 @LENGTH@ 47
------UPD CastExpression@@(StatefulSessionComponentInstance)target @TO@ (StatefulSessionComponentInstance)interceptorContext.getPrivateData(ComponentInstance.class) @AT@ 2098 @LENGTH@ 40
---------INS MethodInvocation@@interceptorContext.getPrivateData(ComponentInstance.class) @TO@ CastExpression@@(StatefulSessionComponentInstance)target @AT@ 2035 @LENGTH@ 58
------------INS SimpleName@@Name:interceptorContext @TO@ MethodInvocation@@interceptorContext.getPrivateData(ComponentInstance.class) @AT@ 2035 @LENGTH@ 18
------------INS SimpleName@@MethodName:getPrivateData:[ComponentInstance.class] @TO@ MethodInvocation@@interceptorContext.getPrivateData(ComponentInstance.class) @AT@ 2054 @LENGTH@ 39
---------------INS TypeLiteral@@ComponentInstance.class @TO@ SimpleName@@MethodName:getPrivateData:[ComponentInstance.class] @AT@ 2069 @LENGTH@ 23
---------DEL SimpleName@@target @AT@ 2132 @LENGTH@ 6


UPD IfStatement@@if (code != '-' && (lastCode != code && (code != '0' || lastCode == '/') || code < '0' || code > '8')) {  left.addRight(code);} @TO@ if (code != '-' && (lastCode != code && (code != '0' || lastCode == '/') || code < '0' || code > '8')) {  left.addRight(code);  lastCode=code;} @AT@ 10047 @LENGTH@ 155
---UPD Block@@ThenBody:{  left.addRight(code);} @TO@ ThenBody:{  left.addRight(code);  lastCode=code;} @AT@ 10150 @LENGTH@ 52
------MOV ExpressionStatement@@Assignment:lastCode=code @TO@ Block@@ThenBody:{  left.addRight(code);} @AT@ 10244 @LENGTH@ 16


UPD ReturnStatement@@MethodInvocation:new JmxTemplate().execute(getParent(),new JmxTemplate.ServiceStateCallback<ServiceInfo[]>(){
  public ServiceInfo[] doWithServiceState(  ServiceStateMBean serviceState) throws Exception {
    TabularData services=serviceState.listServices();
    ServiceInfo[] info=new ServiceInfo[services.size()];
    int i=0;
    for (    Object data : services.values().toArray()) {
      CompositeData svc=(CompositeData)data;
      info[i++]=new JmxServiceInfo(svc,serviceState.getProperties((Long)svc.get(ServiceStateMBean.IDENTIFIER)));
    }
    Arrays.sort(info,new ServiceInfoComparator());
    return info;
  }
}
) @TO@ MethodInvocation:new JmxTemplate().execute(this,new JmxTemplate.ServiceStateCallback<ServiceInfo[]>(){
  public ServiceInfo[] doWithServiceState(  ServiceStateMBean serviceState) throws Exception {
    TabularData services=serviceState.listServices();
    ServiceInfo[] info=new ServiceInfo[services.size()];
    int i=0;
    for (    Object data : services.values().toArray()) {
      CompositeData svc=(CompositeData)data;
      info[i++]=new JmxServiceInfo(svc,serviceState.getProperties((Long)svc.get(ServiceStateMBean.IDENTIFIER)));
    }
    Arrays.sort(info,new ServiceInfoComparator());
    return info;
  }
}
) @AT@ 6130 @LENGTH@ 911
---UPD MethodInvocation@@new JmxTemplate().execute(getParent(),new JmxTemplate.ServiceStateCallback<ServiceInfo[]>(){
  public ServiceInfo[] doWithServiceState(  ServiceStateMBean serviceState) throws Exception {
    TabularData services=serviceState.listServices();
    ServiceInfo[] info=new ServiceInfo[services.size()];
    int i=0;
    for (    Object data : services.values().toArray()) {
      CompositeData svc=(CompositeData)data;
      info[i++]=new JmxServiceInfo(svc,serviceState.getProperties((Long)svc.get(ServiceStateMBean.IDENTIFIER)));
    }
    Arrays.sort(info,new ServiceInfoComparator());
    return info;
  }
}
) @TO@ new JmxTemplate().execute(this,new JmxTemplate.ServiceStateCallback<ServiceInfo[]>(){
  public ServiceInfo[] doWithServiceState(  ServiceStateMBean serviceState) throws Exception {
    TabularData services=serviceState.listServices();
    ServiceInfo[] info=new ServiceInfo[services.size()];
    int i=0;
    for (    Object data : services.values().toArray()) {
      CompositeData svc=(CompositeData)data;
      info[i++]=new JmxServiceInfo(svc,serviceState.getProperties((Long)svc.get(ServiceStateMBean.IDENTIFIER)));
    }
    Arrays.sort(info,new ServiceInfoComparator());
    return info;
  }
}
) @AT@ 6137 @LENGTH@ 903
------UPD SimpleName@@MethodName:execute:[getParent(), new JmxTemplate.ServiceStateCallback<ServiceInfo[]>(){
  public ServiceInfo[] doWithServiceState(  ServiceStateMBean serviceState) throws Exception {
    TabularData services=serviceState.listServices();
    ServiceInfo[] info=new ServiceInfo[services.size()];
    int i=0;
    for (    Object data : services.values().toArray()) {
      CompositeData svc=(CompositeData)data;
      info[i++]=new JmxServiceInfo(svc,serviceState.getProperties((Long)svc.get(ServiceStateMBean.IDENTIFIER)));
    }
    Arrays.sort(info,new ServiceInfoComparator());
    return info;
  }
}
] @TO@ MethodName:execute:[this, new JmxTemplate.ServiceStateCallback<ServiceInfo[]>(){
  public ServiceInfo[] doWithServiceState(  ServiceStateMBean serviceState) throws Exception {
    TabularData services=serviceState.listServices();
    ServiceInfo[] info=new ServiceInfo[services.size()];
    int i=0;
    for (    Object data : services.values().toArray()) {
      CompositeData svc=(CompositeData)data;
      info[i++]=new JmxServiceInfo(svc,serviceState.getProperties((Long)svc.get(ServiceStateMBean.IDENTIFIER)));
    }
    Arrays.sort(info,new ServiceInfoComparator());
    return info;
  }
}
] @AT@ 6155 @LENGTH@ 885
---------INS ThisExpression@@this @TO@ SimpleName@@MethodName:execute:[getParent(), new JmxTemplate.ServiceStateCallback<ServiceInfo[]>(){
  public ServiceInfo[] doWithServiceState(  ServiceStateMBean serviceState) throws Exception {
    TabularData services=serviceState.listServices();
    ServiceInfo[] info=new ServiceInfo[services.size()];
    int i=0;
    for (    Object data : services.values().toArray()) {
      CompositeData svc=(CompositeData)data;
      info[i++]=new JmxServiceInfo(svc,serviceState.getProperties((Long)svc.get(ServiceStateMBean.IDENTIFIER)));
    }
    Arrays.sort(info,new ServiceInfoComparator());
    return info;
  }
}
] @AT@ 6156 @LENGTH@ 4
---------DEL MethodInvocation@@MethodName:getParent:[] @AT@ 6163 @LENGTH@ 11


UPD MethodDeclaration@@public, static, Deployment, MethodName:getAttachment, final DeploymentUnit context,  @TO@ public, static, Deployment, MethodName:getDeployment, final DeploymentUnit context,  @AT@ 1640 @LENGTH@ 119
---UPD SimpleName@@MethodName:getAttachment @TO@ MethodName:getDeployment @AT@ 1665 @LENGTH@ 13


INS MethodDeclaration@@public, boolean, MethodName:hasArgument, int index,  @TO@ TypeDeclaration@@[public]BatchRemoveLineHandler, CommandHandlerWithHelp @AT@ 3208 @LENGTH@ 71
---INS Modifier@@public @TO@ MethodDeclaration@@public, boolean, MethodName:hasArgument, int index,  @AT@ 3208 @LENGTH@ 6
---INS PrimitiveType@@boolean @TO@ MethodDeclaration@@public, boolean, MethodName:hasArgument, int index,  @AT@ 3215 @LENGTH@ 7
---INS SimpleName@@MethodName:hasArgument @TO@ MethodDeclaration@@public, boolean, MethodName:hasArgument, int index,  @AT@ 3223 @LENGTH@ 11
---INS SingleVariableDeclaration@@int index @TO@ MethodDeclaration@@public, boolean, MethodName:hasArgument, int index,  @AT@ 3235 @LENGTH@ 9
------INS PrimitiveType@@int @TO@ SingleVariableDeclaration@@int index @AT@ 3235 @LENGTH@ 3
------INS SimpleName@@index @TO@ SingleVariableDeclaration@@int index @AT@ 3239 @LENGTH@ 5
---INS ReturnStatement@@InfixExpression:index < 1 @TO@ MethodDeclaration@@public, boolean, MethodName:hasArgument, int index,  @AT@ 3256 @LENGTH@ 17
------INS InfixExpression@@index < 1 @TO@ ReturnStatement@@InfixExpression:index < 1 @AT@ 3263 @LENGTH@ 9
---------INS SimpleName@@index @TO@ InfixExpression@@index < 1 @AT@ 3263 @LENGTH@ 5
---------INS Operator@@< @TO@ InfixExpression@@index < 1 @AT@ 3268 @LENGTH@ 1
---------INS NumberLiteral@@1 @TO@ InfixExpression@@index < 1 @AT@ 3271 @LENGTH@ 1


UPD IfStatement@@if (memberHoldingTypeDetails instanceof ClassOrInterfaceTypeDetails) {  if (singular) {    return memberHoldingTypeDetails.getName().getSimpleTypeName();  }  for (  AnnotationMetadata annotationMetadata : memberHoldingTypeDetails.getAnnotations()) {    if (annotationMetadata.getAnnotationType().equals(new JavaType("org.springframework.roo.addon.plural.RooPlural"))) {      AnnotationAttributeValue annotationAttributeValue=annotationMetadata.getAttribute(new JavaSymbolName("value"));      if (annotationAttributeValue != null) {        return annotationAttributeValue.getValue().toString();      } else {        break;      }    }  }  plural=getInflectorPlural(memberHoldingTypeDetails.getName().getSimpleTypeName(),Locale.ENGLISH);} @TO@ if (memberHoldingTypeDetails instanceof ClassOrInterfaceTypeDetails && !Modifier.isAbstract(memberHoldingTypeDetails.getModifier())) {  if (singular) {    return memberHoldingTypeDetails.getName().getSimpleTypeName();  }  for (  AnnotationMetadata annotationMetadata : memberHoldingTypeDetails.getAnnotations()) {    if (annotationMetadata.getAnnotationType().equals(new JavaType("org.springframework.roo.addon.plural.RooPlural"))) {      AnnotationAttributeValue annotationAttributeValue=annotationMetadata.getAttribute(new JavaSymbolName("value"));      if (annotationAttributeValue != null) {        return annotationAttributeValue.getValue().toString();      } else {        break;      }    }  }  plural=getInflectorPlural(memberHoldingTypeDetails.getName().getSimpleTypeName(),Locale.ENGLISH);} @AT@ 6269 @LENGTH@ 768
---DEL InstanceofExpression@@memberHoldingTypeDetails instanceof ClassOrInterfaceTypeDetails @AT@ 6273 @LENGTH@ 63
---INS InfixExpression@@memberHoldingTypeDetails instanceof ClassOrInterfaceTypeDetails && !Modifier.isAbstract(memberHoldingTypeDetails.getModifier()) @TO@ IfStatement@@if (memberHoldingTypeDetails instanceof ClassOrInterfaceTypeDetails) {  if (singular) {    return memberHoldingTypeDetails.getName().getSimpleTypeName();  }  for (  AnnotationMetadata annotationMetadata : memberHoldingTypeDetails.getAnnotations()) {    if (annotationMetadata.getAnnotationType().equals(new JavaType("org.springframework.roo.addon.plural.RooPlural"))) {      AnnotationAttributeValue annotationAttributeValue=annotationMetadata.getAttribute(new JavaSymbolName("value"));      if (annotationAttributeValue != null) {        return annotationAttributeValue.getValue().toString();      } else {        break;      }    }  }  plural=getInflectorPlural(memberHoldingTypeDetails.getName().getSimpleTypeName(),Locale.ENGLISH);} @AT@ 6372 @LENGTH@ 127
------INS InstanceofExpression@@memberHoldingTypeDetails instanceof ClassOrInterfaceTypeDetails @TO@ InfixExpression@@memberHoldingTypeDetails instanceof ClassOrInterfaceTypeDetails && !Modifier.isAbstract(memberHoldingTypeDetails.getModifier()) @AT@ 6372 @LENGTH@ 63
---------MOV SimpleName@@memberHoldingTypeDetails @TO@ InstanceofExpression@@memberHoldingTypeDetails instanceof ClassOrInterfaceTypeDetails @AT@ 6273 @LENGTH@ 24
---------MOV Instanceof@@instanceof @TO@ InstanceofExpression@@memberHoldingTypeDetails instanceof ClassOrInterfaceTypeDetails @AT@ 6298 @LENGTH@ 10
---------MOV SimpleType@@ClassOrInterfaceTypeDetails @TO@ InstanceofExpression@@memberHoldingTypeDetails instanceof ClassOrInterfaceTypeDetails @AT@ 6309 @LENGTH@ 27
------INS Operator@@&& @TO@ InfixExpression@@memberHoldingTypeDetails instanceof ClassOrInterfaceTypeDetails && !Modifier.isAbstract(memberHoldingTypeDetails.getModifier()) @AT@ 6435 @LENGTH@ 2
------INS PrefixExpression@@!Modifier.isAbstract(memberHoldingTypeDetails.getModifier()) @TO@ InfixExpression@@memberHoldingTypeDetails instanceof ClassOrInterfaceTypeDetails && !Modifier.isAbstract(memberHoldingTypeDetails.getModifier()) @AT@ 6439 @LENGTH@ 60
---------INS Operator@@! @TO@ PrefixExpression@@!Modifier.isAbstract(memberHoldingTypeDetails.getModifier()) @AT@ 6439 @LENGTH@ 1
---------INS MethodInvocation@@Modifier.isAbstract(memberHoldingTypeDetails.getModifier()) @TO@ PrefixExpression@@!Modifier.isAbstract(memberHoldingTypeDetails.getModifier()) @AT@ 6440 @LENGTH@ 59
------------INS SimpleName@@Name:Modifier @TO@ MethodInvocation@@Modifier.isAbstract(memberHoldingTypeDetails.getModifier()) @AT@ 6440 @LENGTH@ 8
------------INS SimpleName@@MethodName:isAbstract:[memberHoldingTypeDetails.getModifier()] @TO@ MethodInvocation@@Modifier.isAbstract(memberHoldingTypeDetails.getModifier()) @AT@ 6449 @LENGTH@ 50
---------------INS MethodInvocation@@memberHoldingTypeDetails.getModifier() @TO@ SimpleName@@MethodName:isAbstract:[memberHoldingTypeDetails.getModifier()] @AT@ 6460 @LENGTH@ 38
------------------INS SimpleName@@Name:memberHoldingTypeDetails @TO@ MethodInvocation@@memberHoldingTypeDetails.getModifier() @AT@ 6460 @LENGTH@ 24
------------------INS SimpleName@@MethodName:getModifier:[] @TO@ MethodInvocation@@memberHoldingTypeDetails.getModifier() @AT@ 6485 @LENGTH@ 13


UPD MethodDeclaration@@public, voidMethodName:ManagedBeanComponent, Class<T> beanClass, ClassLoader beanClassLoader, List<ResourceInjection> resourceInjections, List<ComponentLifecycle> postConstrucInterceptors, List<ComponentLifecycle> preDestroyInterceptors, ComponentInterceptorFactories methodInterceptorFactories,  @TO@ public, voidMethodName:ManagedBeanComponent, Class<?> beanClass, ClassLoader beanClassLoader, List<ResourceInjection> resourceInjections, List<ComponentLifecycle> postConstrucInterceptors, List<ComponentLifecycle> preDestroyInterceptors, ComponentInterceptorFactories methodInterceptorFactories,  @AT@ 1611 @LENGTH@ 427
---UPD SingleVariableDeclaration@@Class<T> beanClass @TO@ Class<?> beanClass @AT@ 1639 @LENGTH@ 18
------UPD ParameterizedType@@Class<T> @TO@ Class<?> @AT@ 1639 @LENGTH@ 8
---------INS WildcardType@@? @TO@ ParameterizedType@@Class<T> @AT@ 1593 @LENGTH@ 1
---------DEL SimpleType@@T @AT@ 1645 @LENGTH@ 1


MOV ExpressionStatement@@MethodInvocation:ctx.addDeploymentProcessor(Phase.PARSE,Phase.PARSE_JSF_MANAGED_BEANS,new JsfManagedBeanProcessor()) @TO@ MethodDeclaration@@public, void, MethodName:execute, RuntimeTaskContext context, OperationFailedException,  @AT@ 6856 @LENGTH@ 102


UPD TypeDeclaration@@[public]StatefulSessionComponentCreateService, EJBComponentCreateService @TO@ [public]StatefulSessionComponentCreateService, SessionBeanComponentCreateService @AT@ 1331 @LENGTH@ 549
---UPD SimpleType@@EJBComponentCreateService @TO@ SessionBeanComponentCreateService @AT@ 1390 @LENGTH@ 25


INS MethodDeclaration@@int, MethodName:getInputStreamCount,  @TO@ TypeDeclaration@@[public]ExecutionContextBuilder,  @AT@ 1325 @LENGTH@ 22
---INS PrimitiveType@@int @TO@ MethodDeclaration@@int, MethodName:getInputStreamCount,  @AT@ 1321 @LENGTH@ 3
---INS SimpleName@@MethodName:getInputStreamCount @TO@ MethodDeclaration@@int, MethodName:getInputStreamCount,  @AT@ 1325 @LENGTH@ 19


INS ExpressionStatement@@MethodInvocation:subModel.get(HANDLER_TYPE).set(handlerType) @TO@ MethodDeclaration@@public, Cancellable, MethodName:execute, final NewOperationContext context, final ModelNode operation, final ResultHandler resultHandler,  @AT@ 5882 @LENGTH@ 44
---INS MethodInvocation@@subModel.get(HANDLER_TYPE).set(handlerType) @TO@ ExpressionStatement@@MethodInvocation:subModel.get(HANDLER_TYPE).set(handlerType) @AT@ 5882 @LENGTH@ 43
------INS MethodInvocation@@MethodName:get:[HANDLER_TYPE] @TO@ MethodInvocation@@subModel.get(HANDLER_TYPE).set(handlerType) @AT@ 5882 @LENGTH@ 26
---------INS SimpleName@@HANDLER_TYPE @TO@ MethodInvocation@@MethodName:get:[HANDLER_TYPE] @AT@ 5895 @LENGTH@ 12
------INS SimpleName@@Name:subModel @TO@ MethodInvocation@@subModel.get(HANDLER_TYPE).set(handlerType) @AT@ 5882 @LENGTH@ 8
------INS SimpleName@@MethodName:set:[handlerType] @TO@ MethodInvocation@@subModel.get(HANDLER_TYPE).set(handlerType) @AT@ 5909 @LENGTH@ 16
---------INS SimpleName@@handlerType @TO@ SimpleName@@MethodName:set:[handlerType] @AT@ 5913 @LENGTH@ 11


INS TryStatement@@try {  ServiceHelper.startService(rlp);} catch (Exception e) {  exchange.setException(e);  callback.done(true);  return true;} @TO@ MethodDeclaration@@public, boolean, MethodName:sendToRecipientList, Exchange exchange, Object recipientList, AsyncCallback callback,  @AT@ 4634 @LENGTH@ 188
---INS ExpressionStatement@@MethodInvocation:ServiceHelper.startService(rlp) @TO@ TryStatement@@try {  ServiceHelper.startService(rlp);} catch (Exception e) {  exchange.setException(e);  callback.done(true);  return true;} @AT@ 4652 @LENGTH@ 32
------INS MethodInvocation@@ServiceHelper.startService(rlp) @TO@ ExpressionStatement@@MethodInvocation:ServiceHelper.startService(rlp) @AT@ 4652 @LENGTH@ 31
---------INS SimpleName@@Name:ServiceHelper @TO@ MethodInvocation@@ServiceHelper.startService(rlp) @AT@ 4652 @LENGTH@ 13
---------INS SimpleName@@MethodName:startService:[rlp] @TO@ MethodInvocation@@ServiceHelper.startService(rlp) @AT@ 4666 @LENGTH@ 17
------------INS SimpleName@@rlp @TO@ SimpleName@@MethodName:startService:[rlp] @AT@ 4679 @LENGTH@ 3
---INS CatchClause@@catch (Exception e) {  exchange.setException(e);  callback.done(true);  return true;} @TO@ TryStatement@@try {  ServiceHelper.startService(rlp);} catch (Exception e) {  exchange.setException(e);  callback.done(true);  return true;} @AT@ 4695 @LENGTH@ 127
------INS SingleVariableDeclaration@@Exception e @TO@ CatchClause@@catch (Exception e) {  exchange.setException(e);  callback.done(true);  return true;} @AT@ 4702 @LENGTH@ 11
---------INS SimpleType@@Exception @TO@ SingleVariableDeclaration@@Exception e @AT@ 4702 @LENGTH@ 9
---------INS SimpleName@@e @TO@ SingleVariableDeclaration@@Exception e @AT@ 4712 @LENGTH@ 1
------INS ExpressionStatement@@MethodInvocation:exchange.setException(e) @TO@ CatchClause@@catch (Exception e) {  exchange.setException(e);  callback.done(true);  return true;} @AT@ 4729 @LENGTH@ 25
---------INS MethodInvocation@@exchange.setException(e) @TO@ ExpressionStatement@@MethodInvocation:exchange.setException(e) @AT@ 4729 @LENGTH@ 24
------------INS SimpleName@@Name:exchange @TO@ MethodInvocation@@exchange.setException(e) @AT@ 4729 @LENGTH@ 8
------------INS SimpleName@@MethodName:setException:[e] @TO@ MethodInvocation@@exchange.setException(e) @AT@ 4738 @LENGTH@ 15
---------------INS SimpleName@@e @TO@ SimpleName@@MethodName:setException:[e] @AT@ 4751 @LENGTH@ 1
------INS ExpressionStatement@@MethodInvocation:callback.done(true) @TO@ CatchClause@@catch (Exception e) {  exchange.setException(e);  callback.done(true);  return true;} @AT@ 4767 @LENGTH@ 20
---------INS MethodInvocation@@callback.done(true) @TO@ ExpressionStatement@@MethodInvocation:callback.done(true) @AT@ 4767 @LENGTH@ 19
------------INS SimpleName@@Name:callback @TO@ MethodInvocation@@callback.done(true) @AT@ 4767 @LENGTH@ 8
------------INS SimpleName@@MethodName:done:[true] @TO@ MethodInvocation@@callback.done(true) @AT@ 4776 @LENGTH@ 10
---------------INS BooleanLiteral@@true @TO@ SimpleName@@MethodName:done:[true] @AT@ 4781 @LENGTH@ 4
------INS ReturnStatement@@BooleanLiteral:true @TO@ CatchClause@@catch (Exception e) {  exchange.setException(e);  callback.done(true);  return true;} @AT@ 4800 @LENGTH@ 12
---------INS BooleanLiteral@@true @TO@ ReturnStatement@@BooleanLiteral:true @AT@ 4807 @LENGTH@ 4


UPD MethodDeclaration@@public, void, MethodName:testMuateMessage, Exception,  @TO@ public, void, MethodName:testMutateMessage, Exception,  @AT@ 1488 @LENGTH@ 384
---UPD SimpleName@@MethodName:testMuateMessage @TO@ MethodName:testMutateMessage @AT@ 1500 @LENGTH@ 16


UPD EnhancedForStatement@@for (final ComponentConfiguration componentConfiguration : moduleConfiguration.getComponentConfigurations()) {  final Set<BindingConfiguration> componentLevelBindings=new HashSet(componentConfiguration.getBindingConfigurations());  for (  BindingConfiguration binding : componentLevelBindings) {    final String bindingName=binding.getName();    final boolean compBinding=bindingName.startsWith("java:comp") || !bindingName.startsWith("java:");    if (componentConfiguration.getComponentDescription().getNamingMode() == ComponentNamingMode.CREATE && compBinding) {      continue;    }    final ServiceName serviceName=ContextNames.serviceNameOfEnvEntry(moduleConfiguration.getApplicationName(),moduleConfiguration.getModuleName(),null,false,binding.getName());    final BindingConfiguration existingConfiguration=existingBindings.get(serviceName);    if (existingConfiguration != null) {      if (!existingConfiguration.equalTo(binding,phaseContext)) {        throw new DeploymentUnitProcessingException("Bindings with the same name at " + binding.getName() + " "+ binding+ " and "+ existingConfiguration);      } else {        continue;      }    }    existingBindings.put(serviceName,binding);    deploymentDescriptorBindings.put(serviceName,binding);    addJndiBinding(moduleConfiguration,binding,phaseContext,serviceName);  }} @TO@ for (final ComponentConfiguration componentConfiguration : moduleConfiguration.getComponentConfigurations()) {  for (  BindingConfiguration binding : componentConfiguration.getComponentDescription().getBindingConfigurations()) {    final String bindingName=binding.getName();    final boolean compBinding=bindingName.startsWith("java:comp") || !bindingName.startsWith("java:");    if (componentConfiguration.getComponentDescription().getNamingMode() == ComponentNamingMode.CREATE && compBinding) {      continue;    }    final ServiceName serviceName=ContextNames.serviceNameOfEnvEntry(moduleConfiguration.getApplicationName(),moduleConfiguration.getModuleName(),null,false,binding.getName());    final BindingConfiguration existingConfiguration=existingBindings.get(serviceName);    if (existingConfiguration != null) {      if (!existingConfiguration.equalTo(binding,phaseContext)) {        throw new DeploymentUnitProcessingException("Bindings with the same name at " + binding.getName() + " "+ binding+ " and "+ existingConfiguration);      } else {        continue;      }    }    existingBindings.put(serviceName,binding);    deploymentDescriptorBindings.put(serviceName,binding);    addJndiBinding(moduleConfiguration,binding,phaseContext,serviceName);  }} @AT@ 4282 @LENGTH@ 1871
---DEL VariableDeclarationStatement@@final Set<BindingConfiguration> componentLevelBindings=new HashSet(componentConfiguration.getBindingConfigurations()); @AT@ 4562 @LENGTH@ 120
------DEL Modifier@@final @AT@ 4562 @LENGTH@ 5
------DEL ParameterizedType@@Set<BindingConfiguration> @AT@ 4568 @LENGTH@ 25
---------DEL SimpleType@@Set @AT@ 4568 @LENGTH@ 3
---------DEL SimpleType@@BindingConfiguration @AT@ 4572 @LENGTH@ 20
------DEL VariableDeclarationFragment@@componentLevelBindings=new HashSet(componentConfiguration.getBindingConfigurations()) @AT@ 4594 @LENGTH@ 87
---------DEL SimpleName@@componentLevelBindings @AT@ 4594 @LENGTH@ 22
---------DEL ClassInstanceCreation@@HashSet[componentConfiguration.getBindingConfigurations()] @AT@ 4619 @LENGTH@ 62
------------DEL New@@new @AT@ 4619 @LENGTH@ 3
------------DEL SimpleType@@HashSet @AT@ 4623 @LENGTH@ 7
------------DEL MethodInvocation@@componentConfiguration.getBindingConfigurations() @AT@ 4631 @LENGTH@ 49
---------------DEL SimpleName@@Name:componentConfiguration @AT@ 4631 @LENGTH@ 22
---------------DEL SimpleName@@MethodName:getBindingConfigurations:[] @AT@ 4654 @LENGTH@ 26
---UPD EnhancedForStatement@@for (BindingConfiguration binding : componentLevelBindings) {  final String bindingName=binding.getName();  final boolean compBinding=bindingName.startsWith("java:comp") || !bindingName.startsWith("java:");  if (componentConfiguration.getComponentDescription().getNamingMode() == ComponentNamingMode.CREATE && compBinding) {    continue;  }  final ServiceName serviceName=ContextNames.serviceNameOfEnvEntry(moduleConfiguration.getApplicationName(),moduleConfiguration.getModuleName(),null,false,binding.getName());  final BindingConfiguration existingConfiguration=existingBindings.get(serviceName);  if (existingConfiguration != null) {    if (!existingConfiguration.equalTo(binding,phaseContext)) {      throw new DeploymentUnitProcessingException("Bindings with the same name at " + binding.getName() + " "+ binding+ " and "+ existingConfiguration);    } else {      continue;    }  }  existingBindings.put(serviceName,binding);  deploymentDescriptorBindings.put(serviceName,binding);  addJndiBinding(moduleConfiguration,binding,phaseContext,serviceName);} @TO@ for (BindingConfiguration binding : componentConfiguration.getComponentDescription().getBindingConfigurations()) {  final String bindingName=binding.getName();  final boolean compBinding=bindingName.startsWith("java:comp") || !bindingName.startsWith("java:");  if (componentConfiguration.getComponentDescription().getNamingMode() == ComponentNamingMode.CREATE && compBinding) {    continue;  }  final ServiceName serviceName=ContextNames.serviceNameOfEnvEntry(moduleConfiguration.getApplicationName(),moduleConfiguration.getModuleName(),null,false,binding.getName());  final BindingConfiguration existingConfiguration=existingBindings.get(serviceName);  if (existingConfiguration != null) {    if (!existingConfiguration.equalTo(binding,phaseContext)) {      throw new DeploymentUnitProcessingException("Bindings with the same name at " + binding.getName() + " "+ binding+ " and "+ existingConfiguration);    } else {      continue;    }  }  existingBindings.put(serviceName,binding);  deploymentDescriptorBindings.put(serviceName,binding);  addJndiBinding(moduleConfiguration,binding,phaseContext,serviceName);} @AT@ 4695 @LENGTH@ 1448
------INS MethodInvocation@@componentConfiguration.getComponentDescription().getBindingConfigurations() @TO@ EnhancedForStatement@@for (BindingConfiguration binding : componentLevelBindings) {  final String bindingName=binding.getName();  final boolean compBinding=bindingName.startsWith("java:comp") || !bindingName.startsWith("java:");  if (componentConfiguration.getComponentDescription().getNamingMode() == ComponentNamingMode.CREATE && compBinding) {    continue;  }  final ServiceName serviceName=ContextNames.serviceNameOfEnvEntry(moduleConfiguration.getApplicationName(),moduleConfiguration.getModuleName(),null,false,binding.getName());  final BindingConfiguration existingConfiguration=existingBindings.get(serviceName);  if (existingConfiguration != null) {    if (!existingConfiguration.equalTo(binding,phaseContext)) {      throw new DeploymentUnitProcessingException("Bindings with the same name at " + binding.getName() + " "+ binding+ " and "+ existingConfiguration);    } else {      continue;    }  }  existingBindings.put(serviceName,binding);  deploymentDescriptorBindings.put(serviceName,binding);  addJndiBinding(moduleConfiguration,binding,phaseContext,serviceName);} @AT@ 4598 @LENGTH@ 75
---------INS MethodInvocation@@MethodName:getComponentDescription:[] @TO@ MethodInvocation@@componentConfiguration.getComponentDescription().getBindingConfigurations() @AT@ 4598 @LENGTH@ 48
---------INS SimpleName@@Name:componentConfiguration @TO@ MethodInvocation@@componentConfiguration.getComponentDescription().getBindingConfigurations() @AT@ 4598 @LENGTH@ 22
---------INS SimpleName@@MethodName:getBindingConfigurations:[] @TO@ MethodInvocation@@componentConfiguration.getComponentDescription().getBindingConfigurations() @AT@ 4647 @LENGTH@ 26
------DEL SimpleName@@componentLevelBindings @AT@ 4731 @LENGTH@ 22


UPD ThrowStatement@@ClassInstanceCreation:new IllegalStateException("Cannot determine canoncial path for '" + file + "'",ioe) @TO@ ClassInstanceCreation:new IllegalStateException("Cannot determine canonical path for '" + file + "'",ioe) @AT@ 2442 @LENGTH@ 91
---UPD ClassInstanceCreation@@IllegalStateException["Cannot determine canoncial path for '" + file + "'", ioe] @TO@ IllegalStateException["Cannot determine canonical path for '" + file + "'", ioe] @AT@ 2448 @LENGTH@ 84
------UPD InfixExpression@@"Cannot determine canoncial path for '" + file + "'" @TO@ "Cannot determine canonical path for '" + file + "'" @AT@ 2474 @LENGTH@ 52
---------UPD StringLiteral@@"Cannot determine canoncial path for '" @TO@ "Cannot determine canonical path for '" @AT@ 2474 @LENGTH@ 39


INS VariableDeclarationStatement@@String pathInfo=request.getPathInfo(); @TO@ MethodDeclaration@@public, void, MethodName:postHandle, HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView, Exception,  @AT@ 3419 @LENGTH@ 40
---INS SimpleType@@String @TO@ VariableDeclarationStatement@@String pathInfo=request.getPathInfo(); @AT@ 3419 @LENGTH@ 6
---INS VariableDeclarationFragment@@pathInfo=request.getPathInfo() @TO@ VariableDeclarationStatement@@String pathInfo=request.getPathInfo(); @AT@ 3426 @LENGTH@ 32
------INS SimpleName@@pathInfo @TO@ VariableDeclarationFragment@@pathInfo=request.getPathInfo() @AT@ 3426 @LENGTH@ 8
------INS MethodInvocation@@request.getPathInfo() @TO@ VariableDeclarationFragment@@pathInfo=request.getPathInfo() @AT@ 3437 @LENGTH@ 21
---------INS SimpleName@@Name:request @TO@ MethodInvocation@@request.getPathInfo() @AT@ 3437 @LENGTH@ 7
---------INS SimpleName@@MethodName:getPathInfo:[] @TO@ MethodInvocation@@request.getPathInfo() @AT@ 3445 @LENGTH@ 13


INS ExpressionStatement@@MethodInvocation:CurrentServiceRegistry.setServiceRegistry(context.getController().getServiceContainer()) @TO@ MethodDeclaration@@public, synchronized, void, MethodName:start, final StartContext context, StartException,  @AT@ 5281 @LENGTH@ 89
---INS MethodInvocation@@CurrentServiceRegistry.setServiceRegistry(context.getController().getServiceContainer()) @TO@ ExpressionStatement@@MethodInvocation:CurrentServiceRegistry.setServiceRegistry(context.getController().getServiceContainer()) @AT@ 5281 @LENGTH@ 88
------INS SimpleName@@Name:CurrentServiceRegistry @TO@ MethodInvocation@@CurrentServiceRegistry.setServiceRegistry(context.getController().getServiceContainer()) @AT@ 5281 @LENGTH@ 22
------INS SimpleName@@MethodName:setServiceRegistry:[context.getController().getServiceContainer()] @TO@ MethodInvocation@@CurrentServiceRegistry.setServiceRegistry(context.getController().getServiceContainer()) @AT@ 5304 @LENGTH@ 65
---------INS MethodInvocation@@context.getController().getServiceContainer() @TO@ SimpleName@@MethodName:setServiceRegistry:[context.getController().getServiceContainer()] @AT@ 5323 @LENGTH@ 45
------------INS MethodInvocation@@MethodName:getController:[] @TO@ MethodInvocation@@context.getController().getServiceContainer() @AT@ 5323 @LENGTH@ 23
------------INS SimpleName@@Name:context @TO@ MethodInvocation@@context.getController().getServiceContainer() @AT@ 5323 @LENGTH@ 7
------------INS SimpleName@@MethodName:getServiceContainer:[] @TO@ MethodInvocation@@context.getController().getServiceContainer() @AT@ 5347 @LENGTH@ 21


UPD ExpressionStatement@@MethodInvocation:getMockEndpoint("mock:bar").expectedMessageCount(1) @TO@ MethodInvocation:getMockEndpoint("mock:bar").expectedMinimumMessageCount(0) @AT@ 2594 @LENGTH@ 52
---UPD MethodInvocation@@getMockEndpoint("mock:bar").expectedMessageCount(1) @TO@ getMockEndpoint("mock:bar").expectedMinimumMessageCount(0) @AT@ 2594 @LENGTH@ 51
------UPD SimpleName@@MethodName:expectedMessageCount:[1] @TO@ MethodName:expectedMinimumMessageCount:[0] @AT@ 2622 @LENGTH@ 23
---------UPD NumberLiteral@@1 @TO@ 0 @AT@ 2643 @LENGTH@ 1


DEL ThrowStatement@@ClassInstanceCreation:new RuntimeException("NYI: org.jboss.as.ejb3.component.StatelessEJBComponent.constructComponentInstance") @AT@ 2463 @LENGTH@ 112
---DEL ClassInstanceCreation@@RuntimeException["NYI: org.jboss.as.ejb3.component.StatelessEJBComponent.constructComponentInstance"] @AT@ 2469 @LENGTH@ 105
------DEL New@@new @AT@ 2469 @LENGTH@ 3
------DEL SimpleType@@RuntimeException @AT@ 2473 @LENGTH@ 16
------DEL StringLiteral@@"NYI: org.jboss.as.ejb3.component.StatelessEJBComponent.constructComponentInstance" @AT@ 2490 @LENGTH@ 83


INS ExpressionStatement@@MethodInvocation:CurrentServiceRegistry.setServiceRegistry(null) @TO@ MethodDeclaration@@public, synchronized, void, MethodName:stop, final StopContext context,  @AT@ 8533 @LENGTH@ 48
---INS MethodInvocation@@CurrentServiceRegistry.setServiceRegistry(null) @TO@ ExpressionStatement@@MethodInvocation:CurrentServiceRegistry.setServiceRegistry(null) @AT@ 8533 @LENGTH@ 47
------INS SimpleName@@Name:CurrentServiceRegistry @TO@ MethodInvocation@@CurrentServiceRegistry.setServiceRegistry(null) @AT@ 8533 @LENGTH@ 22
------INS SimpleName@@MethodName:setServiceRegistry:[null] @TO@ MethodInvocation@@CurrentServiceRegistry.setServiceRegistry(null) @AT@ 8556 @LENGTH@ 24
---------INS NullLiteral@@null @TO@ SimpleName@@MethodName:setServiceRegistry:[null] @AT@ 8575 @LENGTH@ 4


UPD IfStatement@@if (metaData.getServlets() != null) for (ServletMetaData servlet : metaData.getServlets()) {  classes.add(servlet.getServletClass());} @TO@ if (metaData.getServlets() != null) for (ServletMetaData servlet : metaData.getServlets()) {  if (servlet.getServletClass() != null) {    classes.add(servlet.getServletClass());  }} @AT@ 6631 @LENGTH@ 175
---INS Block@@ThenBody:for (ServletMetaData servlet : metaData.getServlets()) {  if (servlet.getServletClass() != null) {    classes.add(servlet.getServletClass());  }} @TO@ IfStatement@@if (metaData.getServlets() != null) for (ServletMetaData servlet : metaData.getServlets()) {  classes.add(servlet.getServletClass());} @AT@ 6679 @LENGTH@ 208
------INS EnhancedForStatement@@for (ServletMetaData servlet : metaData.getServlets()) {  if (servlet.getServletClass() != null) {    classes.add(servlet.getServletClass());  }} @TO@ Block@@ThenBody:for (ServletMetaData servlet : metaData.getServlets()) {  if (servlet.getServletClass() != null) {    classes.add(servlet.getServletClass());  }} @AT@ 6679 @LENGTH@ 208
---------INS SingleVariableDeclaration@@ServletMetaData servlet @TO@ EnhancedForStatement@@for (ServletMetaData servlet : metaData.getServlets()) {  if (servlet.getServletClass() != null) {    classes.add(servlet.getServletClass());  }} @AT@ 6683 @LENGTH@ 23
------------INS SimpleType@@ServletMetaData @TO@ SingleVariableDeclaration@@ServletMetaData servlet @AT@ 6683 @LENGTH@ 15
------------INS SimpleName@@servlet @TO@ SingleVariableDeclaration@@ServletMetaData servlet @AT@ 6699 @LENGTH@ 7
---------INS MethodInvocation@@metaData.getServlets() @TO@ EnhancedForStatement@@for (ServletMetaData servlet : metaData.getServlets()) {  if (servlet.getServletClass() != null) {    classes.add(servlet.getServletClass());  }} @AT@ 6709 @LENGTH@ 22
------------INS SimpleName@@Name:metaData @TO@ MethodInvocation@@metaData.getServlets() @AT@ 6709 @LENGTH@ 8
------------INS SimpleName@@MethodName:getServlets:[] @TO@ MethodInvocation@@metaData.getServlets() @AT@ 6718 @LENGTH@ 13
---------INS IfStatement@@if (servlet.getServletClass() != null) {  classes.add(servlet.getServletClass());} @TO@ EnhancedForStatement@@for (ServletMetaData servlet : metaData.getServlets()) {  if (servlet.getServletClass() != null) {    classes.add(servlet.getServletClass());  }} @AT@ 6752 @LENGTH@ 120
------------MOV Block@@ThenBody:for (ServletMetaData servlet : metaData.getServlets()) {  classes.add(servlet.getServletClass());} @TO@ IfStatement@@if (servlet.getServletClass() != null) {  classes.add(servlet.getServletClass());} @AT@ 6679 @LENGTH@ 127
---------------DEL EnhancedForStatement@@for (ServletMetaData servlet : metaData.getServlets()) {  classes.add(servlet.getServletClass());} @AT@ 6679 @LENGTH@ 127
------------------DEL SingleVariableDeclaration@@ServletMetaData servlet @AT@ 6683 @LENGTH@ 23
---------------------DEL SimpleType@@ServletMetaData @AT@ 6683 @LENGTH@ 15
---------------------DEL SimpleName@@servlet @AT@ 6699 @LENGTH@ 7
------------------DEL MethodInvocation@@metaData.getServlets() @AT@ 6709 @LENGTH@ 22
---------------------DEL SimpleName@@Name:metaData @AT@ 6709 @LENGTH@ 8
---------------------DEL SimpleName@@MethodName:getServlets:[] @AT@ 6718 @LENGTH@ 13
---------------MOV ExpressionStatement@@MethodInvocation:classes.add(servlet.getServletClass()) @TO@ Block@@ThenBody:for (ServletMetaData servlet : metaData.getServlets()) {  classes.add(servlet.getServletClass());} @AT@ 6752 @LENGTH@ 39
------------MOV Block@@ThenBody:for (ServletMetaData servlet : metaData.getServlets()) {  classes.add(servlet.getServletClass());} @TO@ IfStatement@@if (servlet.getServletClass() != null) {  classes.add(servlet.getServletClass());} @AT@ 6679 @LENGTH@ 127
---------------DEL EnhancedForStatement@@for (ServletMetaData servlet : metaData.getServlets()) {  classes.add(servlet.getServletClass());} @AT@ 6679 @LENGTH@ 127
------------------DEL SingleVariableDeclaration@@ServletMetaData servlet @AT@ 6683 @LENGTH@ 23
---------------------DEL SimpleType@@ServletMetaData @AT@ 6683 @LENGTH@ 15
---------------------DEL SimpleName@@servlet @AT@ 6699 @LENGTH@ 7
------------------DEL MethodInvocation@@metaData.getServlets() @AT@ 6709 @LENGTH@ 22
---------------------DEL SimpleName@@Name:metaData @AT@ 6709 @LENGTH@ 8
---------------------DEL SimpleName@@MethodName:getServlets:[] @AT@ 6718 @LENGTH@ 13
---------------MOV ExpressionStatement@@MethodInvocation:classes.add(servlet.getServletClass()) @TO@ Block@@ThenBody:for (ServletMetaData servlet : metaData.getServlets()) {  classes.add(servlet.getServletClass());} @AT@ 6752 @LENGTH@ 39
------------INS InfixExpression@@servlet.getServletClass() != null @TO@ IfStatement@@if (servlet.getServletClass() != null) {  classes.add(servlet.getServletClass());} @AT@ 6756 @LENGTH@ 33
---------------INS MethodInvocation@@servlet.getServletClass() @TO@ InfixExpression@@servlet.getServletClass() != null @AT@ 6756 @LENGTH@ 25
------------------INS SimpleName@@Name:servlet @TO@ MethodInvocation@@servlet.getServletClass() @AT@ 6756 @LENGTH@ 7
------------------INS SimpleName@@MethodName:getServletClass:[] @TO@ MethodInvocation@@servlet.getServletClass() @AT@ 6764 @LENGTH@ 17
---------------INS Operator@@!= @TO@ InfixExpression@@servlet.getServletClass() != null @AT@ 6781 @LENGTH@ 2
---------------INS NullLiteral@@null @TO@ InfixExpression@@servlet.getServletClass() != null @AT@ 6785 @LENGTH@ 4
---UPD Block@@ThenBody:for (ServletMetaData servlet : metaData.getServlets()) {  classes.add(servlet.getServletClass());} @TO@ ThenBody:{  classes.add(servlet.getServletClass());} @AT@ 6679 @LENGTH@ 127


INS VariableDeclarationStatement@@final SessionBeanComponentDescription description=componentDescription instanceof SessionBeanComponentDescription ? (SessionBeanComponentDescription)componentDescription : null; @TO@ MethodDeclaration@@public, voidMethodName:EjbDescriptorImpl, EJBComponentDescription componentDescription, BeanDeploymentArchiveImpl beanDeploymentArchive, DeploymentUnit deploymentUnit,  @AT@ 2571 @LENGTH@ 180
---INS Modifier@@final @TO@ VariableDeclarationStatement@@final SessionBeanComponentDescription description=componentDescription instanceof SessionBeanComponentDescription ? (SessionBeanComponentDescription)componentDescription : null; @AT@ 2571 @LENGTH@ 5
---INS SimpleType@@SessionBeanComponentDescription @TO@ VariableDeclarationStatement@@final SessionBeanComponentDescription description=componentDescription instanceof SessionBeanComponentDescription ? (SessionBeanComponentDescription)componentDescription : null; @AT@ 2577 @LENGTH@ 31
---INS VariableDeclarationFragment@@description=componentDescription instanceof SessionBeanComponentDescription ? (SessionBeanComponentDescription)componentDescription : null @TO@ VariableDeclarationStatement@@final SessionBeanComponentDescription description=componentDescription instanceof SessionBeanComponentDescription ? (SessionBeanComponentDescription)componentDescription : null; @AT@ 2609 @LENGTH@ 141
------INS SimpleName@@description @TO@ VariableDeclarationFragment@@description=componentDescription instanceof SessionBeanComponentDescription ? (SessionBeanComponentDescription)componentDescription : null @AT@ 2609 @LENGTH@ 11
------INS ConditionalExpression@@componentDescription instanceof SessionBeanComponentDescription ? (SessionBeanComponentDescription)componentDescription : null @TO@ VariableDeclarationFragment@@description=componentDescription instanceof SessionBeanComponentDescription ? (SessionBeanComponentDescription)componentDescription : null @AT@ 2623 @LENGTH@ 127
---------INS InstanceofExpression@@componentDescription instanceof SessionBeanComponentDescription @TO@ ConditionalExpression@@componentDescription instanceof SessionBeanComponentDescription ? (SessionBeanComponentDescription)componentDescription : null @AT@ 2623 @LENGTH@ 63
------------INS SimpleName@@componentDescription @TO@ InstanceofExpression@@componentDescription instanceof SessionBeanComponentDescription @AT@ 2623 @LENGTH@ 20
------------INS Instanceof@@instanceof @TO@ InstanceofExpression@@componentDescription instanceof SessionBeanComponentDescription @AT@ 2644 @LENGTH@ 10
------------INS SimpleType@@SessionBeanComponentDescription @TO@ InstanceofExpression@@componentDescription instanceof SessionBeanComponentDescription @AT@ 2655 @LENGTH@ 31
---------INS CastExpression@@(SessionBeanComponentDescription)componentDescription @TO@ ConditionalExpression@@componentDescription instanceof SessionBeanComponentDescription ? (SessionBeanComponentDescription)componentDescription : null @AT@ 2689 @LENGTH@ 54
------------INS SimpleType@@SessionBeanComponentDescription @TO@ CastExpression@@(SessionBeanComponentDescription)componentDescription @AT@ 2690 @LENGTH@ 31
------------INS SimpleName@@componentDescription @TO@ CastExpression@@(SessionBeanComponentDescription)componentDescription @AT@ 2723 @LENGTH@ 20
---------INS NullLiteral@@null @TO@ ConditionalExpression@@componentDescription instanceof SessionBeanComponentDescription ? (SessionBeanComponentDescription)componentDescription : null @AT@ 2746 @LENGTH@ 4


UPD ExpressionStatement@@Assignment:containerSize=1 @TO@ Assignment:containerSize=-1 @AT@ 13134 @LENGTH@ 18
---UPD Assignment@@containerSize=1 @TO@ containerSize=-1 @AT@ 13134 @LENGTH@ 17
------DEL NumberLiteral@@1 @AT@ 13150 @LENGTH@ 1
------INS PrefixExpression@@-1 @TO@ Assignment@@containerSize=1 @AT@ 13163 @LENGTH@ 2
---------INS Operator@@- @TO@ PrefixExpression@@-1 @AT@ 13163 @LENGTH@ 1
---------INS NumberLiteral@@1 @TO@ PrefixExpression@@-1 @AT@ 13164 @LENGTH@ 1


UPD MethodDeclaration@@public, boolean, MethodName:canAppearNext, CommandContext ctx,  @TO@ public, boolean, MethodName:canAppearNext, CommandContext ctx, CommandFormatException,  @AT@ 4311 @LENGTH@ 254
---INS SimpleType@@CommandFormatException @TO@ MethodDeclaration@@public, boolean, MethodName:canAppearNext, CommandContext ctx,  @AT@ 4397 @LENGTH@ 22


UPD VariableDeclarationStatement@@Cursor c=db.rawQuery("select id, accessToken, secret, refreshToken, providerAccountId from Connection where accountId = ? and providerId = ? order by id",selectionArgs); @TO@ Cursor c=db.rawQuery("select id, accessToken, secret, refreshToken from Connection where accountId = ? and providerId = ? order by id",selectionArgs); @AT@ 2585 @LENGTH@ 172
---UPD VariableDeclarationFragment@@c=db.rawQuery("select id, accessToken, secret, refreshToken, providerAccountId from Connection where accountId = ? and providerId = ? order by id",selectionArgs) @TO@ c=db.rawQuery("select id, accessToken, secret, refreshToken from Connection where accountId = ? and providerId = ? order by id",selectionArgs) @AT@ 2592 @LENGTH@ 164
------UPD MethodInvocation@@db.rawQuery("select id, accessToken, secret, refreshToken, providerAccountId from Connection where accountId = ? and providerId = ? order by id",selectionArgs) @TO@ db.rawQuery("select id, accessToken, secret, refreshToken from Connection where accountId = ? and providerId = ? order by id",selectionArgs) @AT@ 2596 @LENGTH@ 160
---------UPD SimpleName@@MethodName:rawQuery:["select id, accessToken, secret, refreshToken, providerAccountId from Connection where accountId = ? and providerId = ? order by id", selectionArgs] @TO@ MethodName:rawQuery:["select id, accessToken, secret, refreshToken from Connection where accountId = ? and providerId = ? order by id", selectionArgs] @AT@ 2599 @LENGTH@ 157
------------UPD StringLiteral@@"select id, accessToken, secret, refreshToken, providerAccountId from Connection where accountId = ? and providerId = ? order by id" @TO@ "select id, accessToken, secret, refreshToken from Connection where accountId = ? and providerId = ? order by id" @AT@ 2608 @LENGTH@ 132


INS MethodDeclaration@@public, List<BindingConfiguration>, MethodName:getBindingConfigurations,  @TO@ TypeDeclaration@@[public]ComponentDescription,  @AT@ 16784 @LENGTH@ 106
---INS Modifier@@public @TO@ MethodDeclaration@@public, List<BindingConfiguration>, MethodName:getBindingConfigurations,  @AT@ 16784 @LENGTH@ 6
---INS ParameterizedType@@List<BindingConfiguration> @TO@ MethodDeclaration@@public, List<BindingConfiguration>, MethodName:getBindingConfigurations,  @AT@ 16791 @LENGTH@ 26
------INS SimpleType@@List @TO@ ParameterizedType@@List<BindingConfiguration> @AT@ 16791 @LENGTH@ 4
------INS SimpleType@@BindingConfiguration @TO@ ParameterizedType@@List<BindingConfiguration> @AT@ 16796 @LENGTH@ 20
---INS SimpleName@@MethodName:getBindingConfigurations @TO@ MethodDeclaration@@public, List<BindingConfiguration>, MethodName:getBindingConfigurations,  @AT@ 16818 @LENGTH@ 24
---INS ReturnStatement@@SimpleName:bindingConfigurations @TO@ MethodDeclaration@@public, List<BindingConfiguration>, MethodName:getBindingConfigurations,  @AT@ 16855 @LENGTH@ 29
------INS SimpleName@@bindingConfigurations @TO@ ReturnStatement@@SimpleName:bindingConfigurations @AT@ 16862 @LENGTH@ 21


UPD MethodDeclaration@@public, static, ModelNode, MethodName:getAddSchemaLocationOperation, ModelNode address, ModelNode schemaLocation,  @TO@ public, static, ModelNode, MethodName:getAddSchemaLocationOperation, ModelNode address, Property schemaLocation,  @AT@ 2342 @LENGTH@ 296
---UPD SingleVariableDeclaration@@ModelNode schemaLocation @TO@ Property schemaLocation @AT@ 2415 @LENGTH@ 24
------UPD SimpleType@@ModelNode @TO@ Property @AT@ 2415 @LENGTH@ 9


INS IfStatement@@if (ignore != null && ignore.booleanValue()) return; @TO@ MethodDeclaration@@public, void, MethodName:deploy, DeploymentPhaseContext phaseContext, DeploymentUnitProcessingException,  @AT@ 2392 @LENGTH@ 64
---INS InfixExpression@@ignore != null && ignore.booleanValue() @TO@ IfStatement@@if (ignore != null && ignore.booleanValue()) return; @AT@ 2396 @LENGTH@ 39
------INS InfixExpression@@ignore != null @TO@ InfixExpression@@ignore != null && ignore.booleanValue() @AT@ 2396 @LENGTH@ 14
---------INS SimpleName@@ignore @TO@ InfixExpression@@ignore != null @AT@ 2396 @LENGTH@ 6
---------INS Operator@@!= @TO@ InfixExpression@@ignore != null @AT@ 2402 @LENGTH@ 2
---------INS NullLiteral@@null @TO@ InfixExpression@@ignore != null @AT@ 2406 @LENGTH@ 4
------INS Operator@@&& @TO@ InfixExpression@@ignore != null && ignore.booleanValue() @AT@ 2410 @LENGTH@ 2
------INS MethodInvocation@@ignore.booleanValue() @TO@ InfixExpression@@ignore != null && ignore.booleanValue() @AT@ 2414 @LENGTH@ 21
---------INS SimpleName@@Name:ignore @TO@ MethodInvocation@@ignore.booleanValue() @AT@ 2414 @LENGTH@ 6
---------INS SimpleName@@MethodName:booleanValue:[] @TO@ MethodInvocation@@ignore.booleanValue() @AT@ 2421 @LENGTH@ 14
---INS Block@@ThenBody:return; @TO@ IfStatement@@if (ignore != null && ignore.booleanValue()) return; @AT@ 2449 @LENGTH@ 7
------INS ReturnStatement@@ @TO@ Block@@ThenBody:return; @AT@ 2449 @LENGTH@ 7


INS MethodDeclaration@@public, void, MethodName:testResolveProxyClass, Exception,  @TO@ TypeDeclaration@@[public]ClassLoaderObjectInputStreamTest, TestCase @AT@ 2000 @LENGTH@ 648
---INS Modifier@@public @TO@ MethodDeclaration@@public, void, MethodName:testResolveProxyClass, Exception,  @AT@ 2000 @LENGTH@ 6
---INS PrimitiveType@@void @TO@ MethodDeclaration@@public, void, MethodName:testResolveProxyClass, Exception,  @AT@ 2007 @LENGTH@ 4
---INS SimpleName@@MethodName:testResolveProxyClass @TO@ MethodDeclaration@@public, void, MethodName:testResolveProxyClass, Exception,  @AT@ 2012 @LENGTH@ 21
---INS SimpleType@@Exception @TO@ MethodDeclaration@@public, void, MethodName:testResolveProxyClass, Exception,  @AT@ 2043 @LENGTH@ 9
---INS VariableDeclarationStatement@@ByteArrayOutputStream baos=new ByteArrayOutputStream(); @TO@ MethodDeclaration@@public, void, MethodName:testResolveProxyClass, Exception,  @AT@ 2064 @LENGTH@ 57
------INS SimpleType@@ByteArrayOutputStream @TO@ VariableDeclarationStatement@@ByteArrayOutputStream baos=new ByteArrayOutputStream(); @AT@ 2064 @LENGTH@ 21
------INS VariableDeclarationFragment@@baos=new ByteArrayOutputStream() @TO@ VariableDeclarationStatement@@ByteArrayOutputStream baos=new ByteArrayOutputStream(); @AT@ 2086 @LENGTH@ 34
---------INS SimpleName@@baos @TO@ VariableDeclarationFragment@@baos=new ByteArrayOutputStream() @AT@ 2086 @LENGTH@ 4
---------INS ClassInstanceCreation@@ByteArrayOutputStream[] @TO@ VariableDeclarationFragment@@baos=new ByteArrayOutputStream() @AT@ 2093 @LENGTH@ 27
------------INS New@@new @TO@ ClassInstanceCreation@@ByteArrayOutputStream[] @AT@ 2093 @LENGTH@ 3
------------INS SimpleType@@ByteArrayOutputStream @TO@ ClassInstanceCreation@@ByteArrayOutputStream[] @AT@ 2097 @LENGTH@ 21
---INS VariableDeclarationStatement@@ObjectOutputStream oos=new ObjectOutputStream(baos); @TO@ MethodDeclaration@@public, void, MethodName:testResolveProxyClass, Exception,  @AT@ 2130 @LENGTH@ 54
------INS SimpleType@@ObjectOutputStream @TO@ VariableDeclarationStatement@@ObjectOutputStream oos=new ObjectOutputStream(baos); @AT@ 2130 @LENGTH@ 18
------INS VariableDeclarationFragment@@oos=new ObjectOutputStream(baos) @TO@ VariableDeclarationStatement@@ObjectOutputStream oos=new ObjectOutputStream(baos); @AT@ 2149 @LENGTH@ 34
---------INS SimpleName@@oos @TO@ VariableDeclarationFragment@@oos=new ObjectOutputStream(baos) @AT@ 2149 @LENGTH@ 3
---------INS ClassInstanceCreation@@ObjectOutputStream[baos] @TO@ VariableDeclarationFragment@@oos=new ObjectOutputStream(baos) @AT@ 2155 @LENGTH@ 28
------------INS New@@new @TO@ ClassInstanceCreation@@ObjectOutputStream[baos] @AT@ 2155 @LENGTH@ 3
------------INS SimpleType@@ObjectOutputStream @TO@ ClassInstanceCreation@@ObjectOutputStream[baos] @AT@ 2159 @LENGTH@ 18
------------INS SimpleName@@baos @TO@ ClassInstanceCreation@@ObjectOutputStream[baos] @AT@ 2178 @LENGTH@ 4
---INS ExpressionStatement@@MethodInvocation:oos.writeObject(Boolean.FALSE) @TO@ MethodDeclaration@@public, void, MethodName:testResolveProxyClass, Exception,  @AT@ 2193 @LENGTH@ 33
------INS MethodInvocation@@oos.writeObject(Boolean.FALSE) @TO@ ExpressionStatement@@MethodInvocation:oos.writeObject(Boolean.FALSE) @AT@ 2193 @LENGTH@ 32
---------INS SimpleName@@Name:oos @TO@ MethodInvocation@@oos.writeObject(Boolean.FALSE) @AT@ 2193 @LENGTH@ 3
---------INS SimpleName@@MethodName:writeObject:[Boolean.FALSE] @TO@ MethodInvocation@@oos.writeObject(Boolean.FALSE) @AT@ 2197 @LENGTH@ 28
------------INS QualifiedName@@Boolean.FALSE @TO@ SimpleName@@MethodName:writeObject:[Boolean.FALSE] @AT@ 2210 @LENGTH@ 13
---------------INS SimpleName@@Boolean @TO@ QualifiedName@@Boolean.FALSE @AT@ 2210 @LENGTH@ 7
---------------INS SimpleName@@FALSE @TO@ QualifiedName@@Boolean.FALSE @AT@ 2218 @LENGTH@ 5
---INS VariableDeclarationStatement@@InputStream bais=new ByteArrayInputStream(baos.toByteArray()); @TO@ MethodDeclaration@@public, void, MethodName:testResolveProxyClass, Exception,  @AT@ 2235 @LENGTH@ 64
------INS SimpleType@@InputStream @TO@ VariableDeclarationStatement@@InputStream bais=new ByteArrayInputStream(baos.toByteArray()); @AT@ 2235 @LENGTH@ 11
------INS VariableDeclarationFragment@@bais=new ByteArrayInputStream(baos.toByteArray()) @TO@ VariableDeclarationStatement@@InputStream bais=new ByteArrayInputStream(baos.toByteArray()); @AT@ 2247 @LENGTH@ 51
---------INS SimpleName@@bais @TO@ VariableDeclarationFragment@@bais=new ByteArrayInputStream(baos.toByteArray()) @AT@ 2247 @LENGTH@ 4
---------INS ClassInstanceCreation@@ByteArrayInputStream[baos.toByteArray()] @TO@ VariableDeclarationFragment@@bais=new ByteArrayInputStream(baos.toByteArray()) @AT@ 2254 @LENGTH@ 44
------------INS New@@new @TO@ ClassInstanceCreation@@ByteArrayInputStream[baos.toByteArray()] @AT@ 2254 @LENGTH@ 3
------------INS SimpleType@@ByteArrayInputStream @TO@ ClassInstanceCreation@@ByteArrayInputStream[baos.toByteArray()] @AT@ 2258 @LENGTH@ 20
------------INS MethodInvocation@@baos.toByteArray() @TO@ ClassInstanceCreation@@ByteArrayInputStream[baos.toByteArray()] @AT@ 2279 @LENGTH@ 18
---------------INS SimpleName@@Name:baos @TO@ MethodInvocation@@baos.toByteArray() @AT@ 2279 @LENGTH@ 4
---------------INS SimpleName@@MethodName:toByteArray:[] @TO@ MethodInvocation@@baos.toByteArray() @AT@ 2284 @LENGTH@ 13
---INS VariableDeclarationStatement@@ClassLoaderObjectInputStream clois=new ClassLoaderObjectInputStream(getClass().getClassLoader(),bais); @TO@ MethodDeclaration@@public, void, MethodName:testResolveProxyClass, Exception,  @AT@ 2309 @LENGTH@ 118
------INS SimpleType@@ClassLoaderObjectInputStream @TO@ VariableDeclarationStatement@@ClassLoaderObjectInputStream clois=new ClassLoaderObjectInputStream(getClass().getClassLoader(),bais); @AT@ 2309 @LENGTH@ 28
------INS VariableDeclarationFragment@@clois=new ClassLoaderObjectInputStream(getClass().getClassLoader(),bais) @TO@ VariableDeclarationStatement@@ClassLoaderObjectInputStream clois=new ClassLoaderObjectInputStream(getClass().getClassLoader(),bais); @AT@ 2338 @LENGTH@ 88
---------INS SimpleName@@clois @TO@ VariableDeclarationFragment@@clois=new ClassLoaderObjectInputStream(getClass().getClassLoader(),bais) @AT@ 2338 @LENGTH@ 5
---------INS ClassInstanceCreation@@ClassLoaderObjectInputStream[getClass().getClassLoader(), bais] @TO@ VariableDeclarationFragment@@clois=new ClassLoaderObjectInputStream(getClass().getClassLoader(),bais) @AT@ 2359 @LENGTH@ 67
------------INS New@@new @TO@ ClassInstanceCreation@@ClassLoaderObjectInputStream[getClass().getClassLoader(), bais] @AT@ 2359 @LENGTH@ 3
------------INS SimpleType@@ClassLoaderObjectInputStream @TO@ ClassInstanceCreation@@ClassLoaderObjectInputStream[getClass().getClassLoader(), bais] @AT@ 2363 @LENGTH@ 28
------------INS MethodInvocation@@getClass().getClassLoader() @TO@ ClassInstanceCreation@@ClassLoaderObjectInputStream[getClass().getClassLoader(), bais] @AT@ 2392 @LENGTH@ 27
---------------INS MethodInvocation@@MethodName:getClass:[] @TO@ MethodInvocation@@getClass().getClassLoader() @AT@ 2392 @LENGTH@ 10
---------------INS SimpleName@@MethodName:getClassLoader:[] @TO@ MethodInvocation@@getClass().getClassLoader() @AT@ 2403 @LENGTH@ 16
------------INS SimpleName@@bais @TO@ ClassInstanceCreation@@ClassLoaderObjectInputStream[getClass().getClassLoader(), bais] @AT@ 2421 @LENGTH@ 4
---INS VariableDeclarationStatement@@String[] interfaces=new String[]{Comparable.class.getName()}; @TO@ MethodDeclaration@@public, void, MethodName:testResolveProxyClass, Exception,  @AT@ 2436 @LENGTH@ 66
------INS ArrayType@@String[] @TO@ VariableDeclarationStatement@@String[] interfaces=new String[]{Comparable.class.getName()}; @AT@ 2436 @LENGTH@ 8
---------INS SimpleType@@String @TO@ ArrayType@@String[] @AT@ 2436 @LENGTH@ 6
------INS VariableDeclarationFragment@@interfaces=new String[]{Comparable.class.getName()} @TO@ VariableDeclarationStatement@@String[] interfaces=new String[]{Comparable.class.getName()}; @AT@ 2445 @LENGTH@ 56
---------INS SimpleName@@interfaces @TO@ VariableDeclarationFragment@@interfaces=new String[]{Comparable.class.getName()} @AT@ 2445 @LENGTH@ 10
---------INS ArrayCreation@@new String[]{Comparable.class.getName()} @TO@ VariableDeclarationFragment@@interfaces=new String[]{Comparable.class.getName()} @AT@ 2458 @LENGTH@ 43
------------INS ArrayType@@String[] @TO@ ArrayCreation@@new String[]{Comparable.class.getName()} @AT@ 2462 @LENGTH@ 8
---------------INS SimpleType@@String @TO@ ArrayType@@String[] @AT@ 2462 @LENGTH@ 6
------------INS ArrayInitializer@@{Comparable.class.getName()} @TO@ ArrayCreation@@new String[]{Comparable.class.getName()} @AT@ 2471 @LENGTH@ 30
---------------INS MethodInvocation@@Comparable.class.getName() @TO@ ArrayInitializer@@{Comparable.class.getName()} @AT@ 2473 @LENGTH@ 26
------------------INS TypeLiteral@@Comparable.class @TO@ MethodInvocation@@Comparable.class.getName() @AT@ 2473 @LENGTH@ 16
------------------INS SimpleName@@MethodName:getName:[] @TO@ MethodInvocation@@Comparable.class.getName() @AT@ 2490 @LENGTH@ 9
---INS VariableDeclarationStatement@@Class<?> result=clois.resolveProxyClass(interfaces); @TO@ MethodDeclaration@@public, void, MethodName:testResolveProxyClass, Exception,  @AT@ 2511 @LENGTH@ 54
------INS ParameterizedType@@Class<?> @TO@ VariableDeclarationStatement@@Class<?> result=clois.resolveProxyClass(interfaces); @AT@ 2511 @LENGTH@ 8
---------INS SimpleType@@Class @TO@ ParameterizedType@@Class<?> @AT@ 2511 @LENGTH@ 5
---------INS WildcardType@@? @TO@ ParameterizedType@@Class<?> @AT@ 2517 @LENGTH@ 1
------INS VariableDeclarationFragment@@result=clois.resolveProxyClass(interfaces) @TO@ VariableDeclarationStatement@@Class<?> result=clois.resolveProxyClass(interfaces); @AT@ 2520 @LENGTH@ 44
---------INS SimpleName@@result @TO@ VariableDeclarationFragment@@result=clois.resolveProxyClass(interfaces) @AT@ 2520 @LENGTH@ 6
---------INS MethodInvocation@@clois.resolveProxyClass(interfaces) @TO@ VariableDeclarationFragment@@result=clois.resolveProxyClass(interfaces) @AT@ 2529 @LENGTH@ 35
------------INS SimpleName@@Name:clois @TO@ MethodInvocation@@clois.resolveProxyClass(interfaces) @AT@ 2529 @LENGTH@ 5
------------INS SimpleName@@MethodName:resolveProxyClass:[interfaces] @TO@ MethodInvocation@@clois.resolveProxyClass(interfaces) @AT@ 2535 @LENGTH@ 29
---------------INS SimpleName@@interfaces @TO@ SimpleName@@MethodName:resolveProxyClass:[interfaces] @AT@ 2553 @LENGTH@ 10
---INS ExpressionStatement@@MethodInvocation:assertTrue("Assignable",Comparable.class.isAssignableFrom(result)) @TO@ MethodDeclaration@@public, void, MethodName:testResolveProxyClass, Exception,  @AT@ 2574 @LENGTH@ 68
------INS MethodInvocation@@assertTrue("Assignable",Comparable.class.isAssignableFrom(result)) @TO@ ExpressionStatement@@MethodInvocation:assertTrue("Assignable",Comparable.class.isAssignableFrom(result)) @AT@ 2574 @LENGTH@ 67
---------INS SimpleName@@MethodName:assertTrue:["Assignable", Comparable.class.isAssignableFrom(result)] @TO@ MethodInvocation@@assertTrue("Assignable",Comparable.class.isAssignableFrom(result)) @AT@ 2574 @LENGTH@ 67
------------INS StringLiteral@@"Assignable" @TO@ SimpleName@@MethodName:assertTrue:["Assignable", Comparable.class.isAssignableFrom(result)] @AT@ 2585 @LENGTH@ 12
------------INS MethodInvocation@@Comparable.class.isAssignableFrom(result) @TO@ SimpleName@@MethodName:assertTrue:["Assignable", Comparable.class.isAssignableFrom(result)] @AT@ 2599 @LENGTH@ 41
---------------INS TypeLiteral@@Comparable.class @TO@ MethodInvocation@@Comparable.class.isAssignableFrom(result) @AT@ 2599 @LENGTH@ 16
---------------INS SimpleName@@MethodName:isAssignableFrom:[result] @TO@ MethodInvocation@@Comparable.class.isAssignableFrom(result) @AT@ 2616 @LENGTH@ 24
------------------INS SimpleName@@result @TO@ SimpleName@@MethodName:isAssignableFrom:[result] @AT@ 2633 @LENGTH@ 6


INS ExpressionStatement@@Assignment:directory=endpoint.getConfiguration().normalizePath(directory) @TO@ MethodDeclaration@@public, boolean, MethodName:buildDirectory, String directory, boolean absolute, GenericFileOperationFailedException,  @AT@ 10713 @LENGTH@ 65
---INS Assignment@@directory=endpoint.getConfiguration().normalizePath(directory) @TO@ ExpressionStatement@@Assignment:directory=endpoint.getConfiguration().normalizePath(directory) @AT@ 10713 @LENGTH@ 64
------INS SimpleName@@directory @TO@ Assignment@@directory=endpoint.getConfiguration().normalizePath(directory) @AT@ 10713 @LENGTH@ 9
------INS Operator@@= @TO@ Assignment@@directory=endpoint.getConfiguration().normalizePath(directory) @AT@ 10722 @LENGTH@ 1
------INS MethodInvocation@@endpoint.getConfiguration().normalizePath(directory) @TO@ Assignment@@directory=endpoint.getConfiguration().normalizePath(directory) @AT@ 10725 @LENGTH@ 52
---------INS MethodInvocation@@MethodName:getConfiguration:[] @TO@ MethodInvocation@@endpoint.getConfiguration().normalizePath(directory) @AT@ 10725 @LENGTH@ 27
---------INS SimpleName@@Name:endpoint @TO@ MethodInvocation@@endpoint.getConfiguration().normalizePath(directory) @AT@ 10725 @LENGTH@ 8
---------INS SimpleName@@MethodName:normalizePath:[directory] @TO@ MethodInvocation@@endpoint.getConfiguration().normalizePath(directory) @AT@ 10753 @LENGTH@ 24
------------INS SimpleName@@directory @TO@ SimpleName@@MethodName:normalizePath:[directory] @AT@ 10767 @LENGTH@ 9


UPD ExpressionStatement@@Assignment:localContextName=fieldName @TO@ Assignment:localContextName=fieldInfo.declaringClass().name().toString() + "/" + fieldName @AT@ 8748 @LENGTH@ 29
---UPD Assignment@@localContextName=fieldName @TO@ localContextName=fieldInfo.declaringClass().name().toString() + "/" + fieldName @AT@ 8748 @LENGTH@ 28
------INS InfixExpression@@fieldInfo.declaringClass().name().toString() + "/" + fieldName @TO@ Assignment@@localContextName=fieldName @AT@ 8767 @LENGTH@ 62
---------INS MethodInvocation@@fieldInfo.declaringClass().name().toString() @TO@ InfixExpression@@fieldInfo.declaringClass().name().toString() + "/" + fieldName @AT@ 8767 @LENGTH@ 44
------------INS MethodInvocation@@MethodName:name:[] @TO@ MethodInvocation@@fieldInfo.declaringClass().name().toString() @AT@ 8767 @LENGTH@ 33
------------INS MethodInvocation@@MethodName:declaringClass:[] @TO@ MethodInvocation@@fieldInfo.declaringClass().name().toString() @AT@ 8767 @LENGTH@ 26
------------INS SimpleName@@Name:fieldInfo @TO@ MethodInvocation@@fieldInfo.declaringClass().name().toString() @AT@ 8767 @LENGTH@ 9
------------INS SimpleName@@MethodName:toString:[] @TO@ MethodInvocation@@fieldInfo.declaringClass().name().toString() @AT@ 8801 @LENGTH@ 10
---------INS Operator@@+ @TO@ InfixExpression@@fieldInfo.declaringClass().name().toString() + "/" + fieldName @AT@ 8811 @LENGTH@ 1
---------INS StringLiteral@@"/" @TO@ InfixExpression@@fieldInfo.declaringClass().name().toString() + "/" + fieldName @AT@ 8814 @LENGTH@ 3
---------INS SimpleName@@fieldName @TO@ InfixExpression@@fieldInfo.declaringClass().name().toString() + "/" + fieldName @AT@ 8820 @LENGTH@ 9
------DEL SimpleName@@fieldName @AT@ 8767 @LENGTH@ 9


INS MethodDeclaration@@public, String, MethodName:getId,  @TO@ TypeDeclaration@@[@Persistent, public]Account,  @AT@ 938 @LENGTH@ 42
---INS Modifier@@public @TO@ MethodDeclaration@@public, String, MethodName:getId,  @AT@ 938 @LENGTH@ 6
---INS SimpleType@@String @TO@ MethodDeclaration@@public, String, MethodName:getId,  @AT@ 945 @LENGTH@ 6
---INS SimpleName@@MethodName:getId @TO@ MethodDeclaration@@public, String, MethodName:getId,  @AT@ 952 @LENGTH@ 5
---INS ReturnStatement@@SimpleName:id @TO@ MethodDeclaration@@public, String, MethodName:getId,  @AT@ 966 @LENGTH@ 10
------INS SimpleName@@id @TO@ ReturnStatement@@SimpleName:id @AT@ 973 @LENGTH@ 2


INS MethodDeclaration@@public, ComponentConfiguration, MethodName:createConfiguration, EEModuleConfiguration moduleConfiguration,  @TO@ TypeDeclaration@@[public]SingletonComponentDescription, SessionBeanComponentDescription @AT@ 2656 @LENGTH@ 226
---INS Modifier@@public @TO@ MethodDeclaration@@public, ComponentConfiguration, MethodName:createConfiguration, EEModuleConfiguration moduleConfiguration,  @AT@ 2656 @LENGTH@ 6
---INS SimpleType@@ComponentConfiguration @TO@ MethodDeclaration@@public, ComponentConfiguration, MethodName:createConfiguration, EEModuleConfiguration moduleConfiguration,  @AT@ 2663 @LENGTH@ 22
---INS SimpleName@@MethodName:createConfiguration @TO@ MethodDeclaration@@public, ComponentConfiguration, MethodName:createConfiguration, EEModuleConfiguration moduleConfiguration,  @AT@ 2686 @LENGTH@ 19
---INS SingleVariableDeclaration@@EEModuleConfiguration moduleConfiguration @TO@ MethodDeclaration@@public, ComponentConfiguration, MethodName:createConfiguration, EEModuleConfiguration moduleConfiguration,  @AT@ 2706 @LENGTH@ 41
------INS SimpleType@@EEModuleConfiguration @TO@ SingleVariableDeclaration@@EEModuleConfiguration moduleConfiguration @AT@ 2706 @LENGTH@ 21
------INS SimpleName@@moduleConfiguration @TO@ SingleVariableDeclaration@@EEModuleConfiguration moduleConfiguration @AT@ 2728 @LENGTH@ 19
---INS ReturnStatement@@ClassInstanceCreation:new SingletonComponentConfiguration(this,moduleConfiguration.getClassConfiguration(getComponentClassName())) @TO@ MethodDeclaration@@public, ComponentConfiguration, MethodName:createConfiguration, EEModuleConfiguration moduleConfiguration,  @AT@ 2759 @LENGTH@ 117
------INS ClassInstanceCreation@@SingletonComponentConfiguration[this, moduleConfiguration.getClassConfiguration(getComponentClassName())] @TO@ ReturnStatement@@ClassInstanceCreation:new SingletonComponentConfiguration(this,moduleConfiguration.getClassConfiguration(getComponentClassName())) @AT@ 2766 @LENGTH@ 109
---------INS New@@new @TO@ ClassInstanceCreation@@SingletonComponentConfiguration[this, moduleConfiguration.getClassConfiguration(getComponentClassName())] @AT@ 2766 @LENGTH@ 3
---------INS SimpleType@@SingletonComponentConfiguration @TO@ ClassInstanceCreation@@SingletonComponentConfiguration[this, moduleConfiguration.getClassConfiguration(getComponentClassName())] @AT@ 2770 @LENGTH@ 31
---------INS ThisExpression@@this @TO@ ClassInstanceCreation@@SingletonComponentConfiguration[this, moduleConfiguration.getClassConfiguration(getComponentClassName())] @AT@ 2802 @LENGTH@ 4
---------INS MethodInvocation@@moduleConfiguration.getClassConfiguration(getComponentClassName()) @TO@ ClassInstanceCreation@@SingletonComponentConfiguration[this, moduleConfiguration.getClassConfiguration(getComponentClassName())] @AT@ 2808 @LENGTH@ 66
------------INS SimpleName@@Name:moduleConfiguration @TO@ MethodInvocation@@moduleConfiguration.getClassConfiguration(getComponentClassName()) @AT@ 2808 @LENGTH@ 19
------------INS SimpleName@@MethodName:getClassConfiguration:[getComponentClassName()] @TO@ MethodInvocation@@moduleConfiguration.getClassConfiguration(getComponentClassName()) @AT@ 2828 @LENGTH@ 46
---------------INS MethodInvocation@@MethodName:getComponentClassName:[] @TO@ SimpleName@@MethodName:getClassConfiguration:[getComponentClassName()] @AT@ 2850 @LENGTH@ 23


UPD MethodDeclaration@@public, void, MethodName:handle, ParsingContext ctx, OperationFormatException,  @TO@ public, void, MethodName:handle, ParsingContext ctx, CommandFormatException,  @AT@ 2510 @LENGTH@ 128
---UPD SimpleType@@OperationFormatException @TO@ CommandFormatException @AT@ 2572 @LENGTH@ 24


UPD TryStatement@@try {  final BatchBuilder batchBuilder=updateContext.getServiceTarget();  final SizeRotatingFileHandlerService service=new SizeRotatingFileHandlerService();  final ServiceBuilder<Handler> serviceBuilder=batchBuilder.addService(LogServices.handlerName(getName()),service);  final String relativeTo=getRelativeTo();  if (relativeTo != null) {    serviceBuilder.addDependency(AbstractPathService.pathNameOf(relativeTo),String.class,service.getRelativeToInjector());  }  service.setLevel(Level.parse(getLevelName()));  final Boolean autoFlush=getAutoflush();  if (autoFlush != null)   service.setAutoflush(autoFlush.booleanValue());  try {    service.setEncoding(getEncoding());  } catch (  UnsupportedEncodingException e) {    handler.handleFailure(e,param);    return;  }  try {    service.setPath(getPath());  } catch (  FileNotFoundException e) {    handler.handleFailure(e,param);    return;  }  service.setFormatterSpec(getFormatter());  service.setMaxBackupIndex(maxBackupIndex);  service.setRotateSize(rotateSize);  serviceBuilder.setInitialMode(ServiceController.Mode.ACTIVE);  serviceBuilder.addListener(new UpdateResultHandler.ServiceStartListener<P>(handler,param));  serviceBuilder.install();} catch (Throwable t) {  handler.handleFailure(t,param);} @TO@ try {  final ServiceTarget target=updateContext.getServiceTarget();  final SizeRotatingFileHandlerService service=new SizeRotatingFileHandlerService();  final ServiceBuilder<Handler> serviceBuilder=target.addService(LogServices.handlerName(getName()),service);  final String relativeTo=getRelativeTo();  if (relativeTo != null) {    serviceBuilder.addDependency(AbstractPathService.pathNameOf(relativeTo),String.class,service.getRelativeToInjector());  }  service.setLevel(Level.parse(getLevelName()));  final Boolean autoFlush=getAutoflush();  if (autoFlush != null)   service.setAutoflush(autoFlush.booleanValue());  try {    service.setEncoding(getEncoding());  } catch (  UnsupportedEncodingException e) {    handler.handleFailure(e,param);    return;  }  try {    service.setPath(getPath());  } catch (  FileNotFoundException e) {    handler.handleFailure(e,param);    return;  }  service.setFormatterSpec(getFormatter());  service.setMaxBackupIndex(maxBackupIndex);  service.setRotateSize(rotateSize);  serviceBuilder.setInitialMode(ServiceController.Mode.ACTIVE);  serviceBuilder.addListener(new UpdateResultHandler.ServiceStartListener<P>(handler,param));  serviceBuilder.install();} catch (Throwable t) {  handler.handleFailure(t,param);} @AT@ 2738 @LENGTH@ 1620
---UPD VariableDeclarationStatement@@final BatchBuilder batchBuilder=updateContext.getServiceTarget(); @TO@ final ServiceTarget target=updateContext.getServiceTarget(); @AT@ 2756 @LENGTH@ 67
------UPD SimpleType@@BatchBuilder @TO@ ServiceTarget @AT@ 2762 @LENGTH@ 12
------UPD VariableDeclarationFragment@@batchBuilder=updateContext.getServiceTarget() @TO@ target=updateContext.getServiceTarget() @AT@ 2775 @LENGTH@ 47
---------UPD SimpleName@@batchBuilder @TO@ target @AT@ 2775 @LENGTH@ 12
---UPD VariableDeclarationStatement@@final ServiceBuilder<Handler> serviceBuilder=batchBuilder.addService(LogServices.handlerName(getName()),service); @TO@ final ServiceBuilder<Handler> serviceBuilder=target.addService(LogServices.handlerName(getName()),service); @AT@ 2933 @LENGTH@ 116
------UPD VariableDeclarationFragment@@serviceBuilder=batchBuilder.addService(LogServices.handlerName(getName()),service) @TO@ serviceBuilder=target.addService(LogServices.handlerName(getName()),service) @AT@ 2963 @LENGTH@ 85
---------UPD MethodInvocation@@batchBuilder.addService(LogServices.handlerName(getName()),service) @TO@ target.addService(LogServices.handlerName(getName()),service) @AT@ 2980 @LENGTH@ 68
------------UPD SimpleName@@Name:batchBuilder @TO@ Name:target @AT@ 2980 @LENGTH@ 12


UPD MethodDeclaration@@public, boolean, MethodName:canAppearNext, CommandContext ctx,  @TO@ public, boolean, MethodName:canAppearNext, CommandContext ctx, CommandFormatException,  @AT@ 3407 @LENGTH@ 254
---INS SimpleType@@CommandFormatException @TO@ MethodDeclaration@@public, boolean, MethodName:canAppearNext, CommandContext ctx,  @AT@ 3493 @LENGTH@ 22


UPD ExpressionStatement@@MethodInvocation:resourceadapter.registerReadWriteAttribute(attributeName,RaConfigReadHandler.INSTANCE,RaConfigWriteHandler.INSTANCE,Storage.RUNTIME) @TO@ MethodInvocation:resourceadapter.registerReadWriteAttribute(attributeName,RaConfigReadHandler.INSTANCE,RaConfigWriteHandler.INSTANCE,Storage.CONFIGURATION) @AT@ 9969 @LENGTH@ 156
---UPD MethodInvocation@@resourceadapter.registerReadWriteAttribute(attributeName,RaConfigReadHandler.INSTANCE,RaConfigWriteHandler.INSTANCE,Storage.RUNTIME) @TO@ resourceadapter.registerReadWriteAttribute(attributeName,RaConfigReadHandler.INSTANCE,RaConfigWriteHandler.INSTANCE,Storage.CONFIGURATION) @AT@ 9969 @LENGTH@ 155
------UPD SimpleName@@MethodName:registerReadWriteAttribute:[attributeName, RaConfigReadHandler.INSTANCE, RaConfigWriteHandler.INSTANCE, Storage.RUNTIME] @TO@ MethodName:registerReadWriteAttribute:[attributeName, RaConfigReadHandler.INSTANCE, RaConfigWriteHandler.INSTANCE, Storage.CONFIGURATION] @AT@ 9985 @LENGTH@ 139
---------UPD QualifiedName@@Storage.RUNTIME @TO@ Storage.CONFIGURATION @AT@ 10108 @LENGTH@ 15
------------UPD SimpleName@@RUNTIME @TO@ CONFIGURATION @AT@ 10116 @LENGTH@ 7


INS FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @TO@ TypeDeclaration@@[public]InetOrgPerson, Person @AT@ 1142 @LENGTH@ 90
---INS Modifier@@private @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @AT@ 1142 @LENGTH@ 7
---INS Modifier@@static @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @AT@ 1150 @LENGTH@ 6
---INS Modifier@@final @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @AT@ 1157 @LENGTH@ 5
---INS PrimitiveType@@long @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @AT@ 1163 @LENGTH@ 4
---INS VariableDeclarationFragment@@serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @AT@ 1168 @LENGTH@ 63
------INS SimpleName@@serialVersionUID @TO@ VariableDeclarationFragment@@serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID @AT@ 1168 @LENGTH@ 16
------INS QualifiedName@@SpringSecurityCoreVersion.SERIAL_VERSION_UID @TO@ VariableDeclarationFragment@@serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID @AT@ 1187 @LENGTH@ 44
---------INS SimpleName@@SpringSecurityCoreVersion @TO@ QualifiedName@@SpringSecurityCoreVersion.SERIAL_VERSION_UID @AT@ 1187 @LENGTH@ 25
---------INS SimpleName@@SERIAL_VERSION_UID @TO@ QualifiedName@@SpringSecurityCoreVersion.SERIAL_VERSION_UID @AT@ 1213 @LENGTH@ 18


UPD MethodDeclaration@@protected, voidMethodName:StatelessSessionComponentInstance, final AbstractComponent component, final Object instance,  @TO@ protected, voidMethodName:StatelessSessionComponentInstance, final AbstractComponent component, final Object instance, List<Interceptor> preDestroyInterceptors, InterceptorFactoryContext context,  @AT@ 1520 @LENGTH@ 183
---UPD SuperConstructorInvocation@@super(component,instance,Collections.<Interceptor>emptyList());
 @TO@ super(component,instance,preDestroyInterceptors,context);
 @AT@ 1632 @LENGTH@ 65
------DEL MethodInvocation@@Collections.<Interceptor>emptyList() @AT@ 1659 @LENGTH@ 36
---------DEL SimpleName@@Name:Collections @AT@ 1659 @LENGTH@ 11
---------DEL SimpleName@@MethodName:emptyList:[] @AT@ 1684 @LENGTH@ 11
------INS SimpleName@@preDestroyInterceptors @TO@ SuperConstructorInvocation@@super(component,instance,Collections.<Interceptor>emptyList());
 @AT@ 1814 @LENGTH@ 22
------INS SimpleName@@context @TO@ SuperConstructorInvocation@@super(component,instance,Collections.<Interceptor>emptyList());
 @AT@ 1838 @LENGTH@ 7
---INS SingleVariableDeclaration@@List<Interceptor> preDestroyInterceptors @TO@ MethodDeclaration@@protected, voidMethodName:StatelessSessionComponentInstance, final AbstractComponent component, final Object instance,  @AT@ 1700 @LENGTH@ 40
------INS ParameterizedType@@List<Interceptor> @TO@ SingleVariableDeclaration@@List<Interceptor> preDestroyInterceptors @AT@ 1700 @LENGTH@ 17
---------INS SimpleType@@List @TO@ ParameterizedType@@List<Interceptor> @AT@ 1700 @LENGTH@ 4
---------INS SimpleType@@Interceptor @TO@ ParameterizedType@@List<Interceptor> @AT@ 1705 @LENGTH@ 11
------INS SimpleName@@preDestroyInterceptors @TO@ SingleVariableDeclaration@@List<Interceptor> preDestroyInterceptors @AT@ 1718 @LENGTH@ 22
---INS SingleVariableDeclaration@@InterceptorFactoryContext context @TO@ MethodDeclaration@@protected, voidMethodName:StatelessSessionComponentInstance, final AbstractComponent component, final Object instance,  @AT@ 1742 @LENGTH@ 33
------INS SimpleType@@InterceptorFactoryContext @TO@ SingleVariableDeclaration@@InterceptorFactoryContext context @AT@ 1742 @LENGTH@ 25
------INS SimpleName@@context @TO@ SingleVariableDeclaration@@InterceptorFactoryContext context @AT@ 1768 @LENGTH@ 7


UPD TryStatement@@try {  String jbossHomeKey="jboss.home";  String jbossHomeDir=System.getProperty(jbossHomeKey);  if (jbossHomeDir == null)   throw new IllegalStateException("Cannot find system property: " + jbossHomeKey);  final String additionalJavaOpts=System.getProperty("jboss.options");  File modulesJar=new File(jbossHomeDir + "/jboss-modules.jar");  if (modulesJar.exists() == false)   throw new IllegalStateException("Cannot find: " + modulesJar);  List<String> cmd=new ArrayList<String>();  cmd.add("java");  if (additionalJavaOpts != null) {    for (    String opt : additionalJavaOpts.split("\\s+")) {      cmd.add(opt);    }  }  cmd.add("-Djboss.home.dir=" + jbossHomeDir);  cmd.add("-Dorg.jboss.boot.log.file=" + jbossHomeDir + "/standalone/log/boot.log");  cmd.add("-Dlogging.configuration=file:" + jbossHomeDir + "/standalone/configuration/logging.properties");  cmd.add("-jar");  cmd.add(modulesJar.getAbsolutePath());  cmd.add("-mp");  cmd.add(jbossHomeDir + "/modules");  cmd.add("-logmodule");  cmd.add("org.jboss.logmanager");  cmd.add("org.jboss.as.standalone");  log.info("Starting container with: " + cmd.toString());  ProcessBuilder processBuilder=new ProcessBuilder(cmd);  processBuilder.redirectErrorStream(true);  process=processBuilder.start();  new Thread(new ConsoleConsumer()).start();  long timeout=5000;  boolean testRunnerMBeanAvaialble=false;  MBeanServerConnection mbeanServer=null;  while (timeout > 0 && testRunnerMBeanAvaialble == false) {    if (mbeanServer == null) {      try {        mbeanServer=getMBeanServerConnection();      } catch (      Exception ex) {      }    }    testRunnerMBeanAvaialble=(mbeanServer != null && mbeanServer.isRegistered(JMXTestRunnerMBean.OBJECT_NAME));    Thread.sleep(100);    timeout-=100;  }} catch (Exception e) {  throw new LifecycleException("Could not start container",e);} @TO@ try {  String jbossHomeKey="jboss.home";  String jbossHomeDir=System.getProperty(jbossHomeKey);  if (jbossHomeDir == null)   throw new IllegalStateException("Cannot find system property: " + jbossHomeKey);  final String additionalJavaOpts=System.getProperty("jboss.options");  File modulesJar=new File(jbossHomeDir + "/jboss-modules.jar");  if (modulesJar.exists() == false)   throw new IllegalStateException("Cannot find: " + modulesJar);  List<String> cmd=new ArrayList<String>();  cmd.add("java");  if (additionalJavaOpts != null) {    for (    String opt : additionalJavaOpts.split("\\s+")) {      cmd.add(opt);    }  }  cmd.add("-Djboss.home.dir=" + jbossHomeDir);  cmd.add("-Dorg.jboss.boot.log.file=" + jbossHomeDir + "/standalone/log/boot.log");  cmd.add("-Dlogging.configuration=file:" + jbossHomeDir + "/standalone/configuration/logging.properties");  cmd.add("-jar");  cmd.add(modulesJar.getAbsolutePath());  cmd.add("-mp");  cmd.add(jbossHomeDir + "/modules");  cmd.add("-logmodule");  cmd.add("org.jboss.logmanager");  cmd.add("-jaxpmodule");  cmd.add("javax.xml.jaxp-provider");  cmd.add("org.jboss.as.standalone");  log.info("Starting container with: " + cmd.toString());  ProcessBuilder processBuilder=new ProcessBuilder(cmd);  processBuilder.redirectErrorStream(true);  process=processBuilder.start();  new Thread(new ConsoleConsumer()).start();  long timeout=5000;  boolean testRunnerMBeanAvaialble=false;  MBeanServerConnection mbeanServer=null;  while (timeout > 0 && testRunnerMBeanAvaialble == false) {    if (mbeanServer == null) {      try {        mbeanServer=getMBeanServerConnection();      } catch (      Exception ex) {      }    }    testRunnerMBeanAvaialble=(mbeanServer != null && mbeanServer.isRegistered(JMXTestRunnerMBean.OBJECT_NAME));    Thread.sleep(100);    timeout-=100;  }} catch (Exception e) {  throw new LifecycleException("Could not start container",e);} @AT@ 2512 @LENGTH@ 2449
---INS ExpressionStatement@@MethodInvocation:cmd.add("-jaxpmodule") @TO@ TryStatement@@try {  String jbossHomeKey="jboss.home";  String jbossHomeDir=System.getProperty(jbossHomeKey);  if (jbossHomeDir == null)   throw new IllegalStateException("Cannot find system property: " + jbossHomeKey);  final String additionalJavaOpts=System.getProperty("jboss.options");  File modulesJar=new File(jbossHomeDir + "/jboss-modules.jar");  if (modulesJar.exists() == false)   throw new IllegalStateException("Cannot find: " + modulesJar);  List<String> cmd=new ArrayList<String>();  cmd.add("java");  if (additionalJavaOpts != null) {    for (    String opt : additionalJavaOpts.split("\\s+")) {      cmd.add(opt);    }  }  cmd.add("-Djboss.home.dir=" + jbossHomeDir);  cmd.add("-Dorg.jboss.boot.log.file=" + jbossHomeDir + "/standalone/log/boot.log");  cmd.add("-Dlogging.configuration=file:" + jbossHomeDir + "/standalone/configuration/logging.properties");  cmd.add("-jar");  cmd.add(modulesJar.getAbsolutePath());  cmd.add("-mp");  cmd.add(jbossHomeDir + "/modules");  cmd.add("-logmodule");  cmd.add("org.jboss.logmanager");  cmd.add("org.jboss.as.standalone");  log.info("Starting container with: " + cmd.toString());  ProcessBuilder processBuilder=new ProcessBuilder(cmd);  processBuilder.redirectErrorStream(true);  process=processBuilder.start();  new Thread(new ConsoleConsumer()).start();  long timeout=5000;  boolean testRunnerMBeanAvaialble=false;  MBeanServerConnection mbeanServer=null;  while (timeout > 0 && testRunnerMBeanAvaialble == false) {    if (mbeanServer == null) {      try {        mbeanServer=getMBeanServerConnection();      } catch (      Exception ex) {      }    }    testRunnerMBeanAvaialble=(mbeanServer != null && mbeanServer.isRegistered(JMXTestRunnerMBean.OBJECT_NAME));    Thread.sleep(100);    timeout-=100;  }} catch (Exception e) {  throw new LifecycleException("Could not start container",e);} @AT@ 3842 @LENGTH@ 23
------INS MethodInvocation@@cmd.add("-jaxpmodule") @TO@ ExpressionStatement@@MethodInvocation:cmd.add("-jaxpmodule") @AT@ 3842 @LENGTH@ 22
---------INS SimpleName@@Name:cmd @TO@ MethodInvocation@@cmd.add("-jaxpmodule") @AT@ 3842 @LENGTH@ 3
---------INS SimpleName@@MethodName:add:["-jaxpmodule"] @TO@ MethodInvocation@@cmd.add("-jaxpmodule") @AT@ 3846 @LENGTH@ 18
------------INS StringLiteral@@"-jaxpmodule" @TO@ SimpleName@@MethodName:add:["-jaxpmodule"] @AT@ 3850 @LENGTH@ 13
---INS ExpressionStatement@@MethodInvocation:cmd.add("javax.xml.jaxp-provider") @TO@ TryStatement@@try {  String jbossHomeKey="jboss.home";  String jbossHomeDir=System.getProperty(jbossHomeKey);  if (jbossHomeDir == null)   throw new IllegalStateException("Cannot find system property: " + jbossHomeKey);  final String additionalJavaOpts=System.getProperty("jboss.options");  File modulesJar=new File(jbossHomeDir + "/jboss-modules.jar");  if (modulesJar.exists() == false)   throw new IllegalStateException("Cannot find: " + modulesJar);  List<String> cmd=new ArrayList<String>();  cmd.add("java");  if (additionalJavaOpts != null) {    for (    String opt : additionalJavaOpts.split("\\s+")) {      cmd.add(opt);    }  }  cmd.add("-Djboss.home.dir=" + jbossHomeDir);  cmd.add("-Dorg.jboss.boot.log.file=" + jbossHomeDir + "/standalone/log/boot.log");  cmd.add("-Dlogging.configuration=file:" + jbossHomeDir + "/standalone/configuration/logging.properties");  cmd.add("-jar");  cmd.add(modulesJar.getAbsolutePath());  cmd.add("-mp");  cmd.add(jbossHomeDir + "/modules");  cmd.add("-logmodule");  cmd.add("org.jboss.logmanager");  cmd.add("org.jboss.as.standalone");  log.info("Starting container with: " + cmd.toString());  ProcessBuilder processBuilder=new ProcessBuilder(cmd);  processBuilder.redirectErrorStream(true);  process=processBuilder.start();  new Thread(new ConsoleConsumer()).start();  long timeout=5000;  boolean testRunnerMBeanAvaialble=false;  MBeanServerConnection mbeanServer=null;  while (timeout > 0 && testRunnerMBeanAvaialble == false) {    if (mbeanServer == null) {      try {        mbeanServer=getMBeanServerConnection();      } catch (      Exception ex) {      }    }    testRunnerMBeanAvaialble=(mbeanServer != null && mbeanServer.isRegistered(JMXTestRunnerMBean.OBJECT_NAME));    Thread.sleep(100);    timeout-=100;  }} catch (Exception e) {  throw new LifecycleException("Could not start container",e);} @AT@ 3878 @LENGTH@ 35
------INS MethodInvocation@@cmd.add("javax.xml.jaxp-provider") @TO@ ExpressionStatement@@MethodInvocation:cmd.add("javax.xml.jaxp-provider") @AT@ 3878 @LENGTH@ 34
---------INS SimpleName@@Name:cmd @TO@ MethodInvocation@@cmd.add("javax.xml.jaxp-provider") @AT@ 3878 @LENGTH@ 3
---------INS SimpleName@@MethodName:add:["javax.xml.jaxp-provider"] @TO@ MethodInvocation@@cmd.add("javax.xml.jaxp-provider") @AT@ 3882 @LENGTH@ 30
------------INS StringLiteral@@"javax.xml.jaxp-provider" @TO@ SimpleName@@MethodName:add:["javax.xml.jaxp-provider"] @AT@ 3886 @LENGTH@ 25


INS ExpressionStatement@@MethodInvocation:viewConfiguration.addViewInterceptorToFront(new StatefulIdentityInterceptorFactory(sessionIdContextKey)) @TO@ MethodDeclaration@@public, void, MethodName:configure, DeploymentPhaseContext context, ComponentConfiguration componentConfiguration, ViewDescription description, ViewConfiguration viewConfiguration, DeploymentUnitProcessingException,  @AT@ 6881 @LENGTH@ 105
---INS MethodInvocation@@viewConfiguration.addViewInterceptorToFront(new StatefulIdentityInterceptorFactory(sessionIdContextKey)) @TO@ ExpressionStatement@@MethodInvocation:viewConfiguration.addViewInterceptorToFront(new StatefulIdentityInterceptorFactory(sessionIdContextKey)) @AT@ 6881 @LENGTH@ 104
------INS SimpleName@@Name:viewConfiguration @TO@ MethodInvocation@@viewConfiguration.addViewInterceptorToFront(new StatefulIdentityInterceptorFactory(sessionIdContextKey)) @AT@ 6881 @LENGTH@ 17
------INS SimpleName@@MethodName:addViewInterceptorToFront:[new StatefulIdentityInterceptorFactory(sessionIdContextKey)] @TO@ MethodInvocation@@viewConfiguration.addViewInterceptorToFront(new StatefulIdentityInterceptorFactory(sessionIdContextKey)) @AT@ 6899 @LENGTH@ 86
---------INS ClassInstanceCreation@@StatefulIdentityInterceptorFactory[sessionIdContextKey] @TO@ SimpleName@@MethodName:addViewInterceptorToFront:[new StatefulIdentityInterceptorFactory(sessionIdContextKey)] @AT@ 6925 @LENGTH@ 59
------------INS New@@new @TO@ ClassInstanceCreation@@StatefulIdentityInterceptorFactory[sessionIdContextKey] @AT@ 6925 @LENGTH@ 3
------------INS SimpleType@@StatefulIdentityInterceptorFactory @TO@ ClassInstanceCreation@@StatefulIdentityInterceptorFactory[sessionIdContextKey] @AT@ 6929 @LENGTH@ 34
------------INS SimpleName@@sessionIdContextKey @TO@ ClassInstanceCreation@@StatefulIdentityInterceptorFactory[sessionIdContextKey] @AT@ 6964 @LENGTH@ 19


INS ExpressionStatement@@MethodInvocation:context.getSubModel().setEmptyObject() @TO@ MethodDeclaration@@public, Cancellable, MethodName:execute, NewOperationContext context, ModelNode operation, ResultHandler resultHandler,  @AT@ 2267 @LENGTH@ 39
---INS MethodInvocation@@context.getSubModel().setEmptyObject() @TO@ ExpressionStatement@@MethodInvocation:context.getSubModel().setEmptyObject() @AT@ 2267 @LENGTH@ 38
------INS MethodInvocation@@MethodName:getSubModel:[] @TO@ MethodInvocation@@context.getSubModel().setEmptyObject() @AT@ 2267 @LENGTH@ 21
------INS SimpleName@@Name:context @TO@ MethodInvocation@@context.getSubModel().setEmptyObject() @AT@ 2267 @LENGTH@ 7
------INS SimpleName@@MethodName:setEmptyObject:[] @TO@ MethodInvocation@@context.getSubModel().setEmptyObject() @AT@ 2289 @LENGTH@ 16


UPD IfStatement@@if (null != mongoEl) {  String overrideHost=mongoEl.getAttribute("host");  mongoBuilder.addPropertyValue("host",(StringUtils.hasText(overrideHost) ? overrideHost : host));  String overridePort=mongoEl.getAttribute("port");  mongoBuilder.addPropertyValue("port",(StringUtils.hasText(overridePort) ? overridePort : port));  new MongoParser().parseOptions(parserContext,mongoEl,mongoBuilder);} @TO@ if (null != mongoEl) {  String overrideHost=mongoEl.getAttribute("host");  mongoBuilder.addPropertyValue("host",(StringUtils.hasText(overrideHost) ? overrideHost : host));  String overridePort=mongoEl.getAttribute("port");  mongoBuilder.addPropertyValue("port",(StringUtils.hasText(overridePort) ? overridePort : port));  new MongoParser().parseOptions(parserContext,mongoEl,mongoBuilder);} else {  mongoBuilder.addPropertyValue("host",host);  mongoBuilder.addPropertyValue("port",port);} @AT@ 3510 @LENGTH@ 417
---INS Block@@ElseBody:{  mongoBuilder.addPropertyValue("host",host);  mongoBuilder.addPropertyValue("port",port);} @TO@ IfStatement@@if (null != mongoEl) {  String overrideHost=mongoEl.getAttribute("host");  mongoBuilder.addPropertyValue("host",(StringUtils.hasText(overrideHost) ? overrideHost : host));  String overridePort=mongoEl.getAttribute("port");  mongoBuilder.addPropertyValue("port",(StringUtils.hasText(overridePort) ? overridePort : port));  new MongoParser().parseOptions(parserContext,mongoEl,mongoBuilder);} @AT@ 3936 @LENGTH@ 104
------INS ExpressionStatement@@MethodInvocation:mongoBuilder.addPropertyValue("host",host) @TO@ Block@@ElseBody:{  mongoBuilder.addPropertyValue("host",host);  mongoBuilder.addPropertyValue("port",port);} @AT@ 3942 @LENGTH@ 44
---------INS MethodInvocation@@mongoBuilder.addPropertyValue("host",host) @TO@ ExpressionStatement@@MethodInvocation:mongoBuilder.addPropertyValue("host",host) @AT@ 3942 @LENGTH@ 43
------------INS SimpleName@@Name:mongoBuilder @TO@ MethodInvocation@@mongoBuilder.addPropertyValue("host",host) @AT@ 3942 @LENGTH@ 12
------------INS SimpleName@@MethodName:addPropertyValue:["host", host] @TO@ MethodInvocation@@mongoBuilder.addPropertyValue("host",host) @AT@ 3955 @LENGTH@ 30
---------------INS StringLiteral@@"host" @TO@ SimpleName@@MethodName:addPropertyValue:["host", host] @AT@ 3972 @LENGTH@ 6
---------------INS SimpleName@@host @TO@ SimpleName@@MethodName:addPropertyValue:["host", host] @AT@ 3980 @LENGTH@ 4
------INS ExpressionStatement@@MethodInvocation:mongoBuilder.addPropertyValue("port",port) @TO@ Block@@ElseBody:{  mongoBuilder.addPropertyValue("host",host);  mongoBuilder.addPropertyValue("port",port);} @AT@ 3991 @LENGTH@ 44
---------INS MethodInvocation@@mongoBuilder.addPropertyValue("port",port) @TO@ ExpressionStatement@@MethodInvocation:mongoBuilder.addPropertyValue("port",port) @AT@ 3991 @LENGTH@ 43
------------INS SimpleName@@Name:mongoBuilder @TO@ MethodInvocation@@mongoBuilder.addPropertyValue("port",port) @AT@ 3991 @LENGTH@ 12
------------INS SimpleName@@MethodName:addPropertyValue:["port", port] @TO@ MethodInvocation@@mongoBuilder.addPropertyValue("port",port) @AT@ 4004 @LENGTH@ 30
---------------INS StringLiteral@@"port" @TO@ SimpleName@@MethodName:addPropertyValue:["port", port] @AT@ 4021 @LENGTH@ 6
---------------INS SimpleName@@port @TO@ SimpleName@@MethodName:addPropertyValue:["port", port] @AT@ 4029 @LENGTH@ 4


DEL IfStatement@@if (isJava15()) {  throw new WebServiceIOException("Forced by JDK 1.5");} @AT@ 3860 @LENGTH@ 193
---DEL MethodInvocation@@MethodName:isJava15:[] @AT@ 3864 @LENGTH@ 10
---DEL Block@@ThenBody:{  throw new WebServiceIOException("Forced by JDK 1.5");} @AT@ 3876 @LENGTH@ 177
------DEL ThrowStatement@@ClassInstanceCreation:new WebServiceIOException("Forced by JDK 1.5") @AT@ 3990 @LENGTH@ 53
---------DEL ClassInstanceCreation@@WebServiceIOException["Forced by JDK 1.5"] @AT@ 3996 @LENGTH@ 46
------------DEL New@@new @AT@ 3996 @LENGTH@ 3
------------DEL SimpleType@@WebServiceIOException @AT@ 4000 @LENGTH@ 21
------------DEL StringLiteral@@"Forced by JDK 1.5" @AT@ 4022 @LENGTH@ 19


INS MethodDeclaration@@public, CacheConfiguration, MethodName:copy,  @TO@ TypeDeclaration@@[public]CacheConfiguration,  @AT@ 1671 @LENGTH@ 335
---INS Modifier@@public @TO@ MethodDeclaration@@public, CacheConfiguration, MethodName:copy,  @AT@ 1671 @LENGTH@ 6
---INS SimpleType@@CacheConfiguration @TO@ MethodDeclaration@@public, CacheConfiguration, MethodName:copy,  @AT@ 1678 @LENGTH@ 18
---INS SimpleName@@MethodName:copy @TO@ MethodDeclaration@@public, CacheConfiguration, MethodName:copy,  @AT@ 1697 @LENGTH@ 4
---INS TryStatement@@try {  CacheConfiguration copy=(CacheConfiguration)clone();  return copy;} catch (CloneNotSupportedException e) {  throw new RuntimeCamelException(e);} @TO@ MethodDeclaration@@public, CacheConfiguration, MethodName:copy,  @AT@ 1714 @LENGTH@ 286
------INS VariableDeclarationStatement@@CacheConfiguration copy=(CacheConfiguration)clone(); @TO@ TryStatement@@try {  CacheConfiguration copy=(CacheConfiguration)clone();  return copy;} catch (CloneNotSupportedException e) {  throw new RuntimeCamelException(e);} @AT@ 1732 @LENGTH@ 55
---------INS SimpleType@@CacheConfiguration @TO@ VariableDeclarationStatement@@CacheConfiguration copy=(CacheConfiguration)clone(); @AT@ 1732 @LENGTH@ 18
---------INS VariableDeclarationFragment@@copy=(CacheConfiguration)clone() @TO@ VariableDeclarationStatement@@CacheConfiguration copy=(CacheConfiguration)clone(); @AT@ 1751 @LENGTH@ 35
------------INS SimpleName@@copy @TO@ VariableDeclarationFragment@@copy=(CacheConfiguration)clone() @AT@ 1751 @LENGTH@ 4
------------INS CastExpression@@(CacheConfiguration)clone() @TO@ VariableDeclarationFragment@@copy=(CacheConfiguration)clone() @AT@ 1758 @LENGTH@ 28
---------------INS SimpleType@@CacheConfiguration @TO@ CastExpression@@(CacheConfiguration)clone() @AT@ 1759 @LENGTH@ 18
---------------INS MethodInvocation@@MethodName:clone:[] @TO@ CastExpression@@(CacheConfiguration)clone() @AT@ 1779 @LENGTH@ 7
------INS ReturnStatement@@SimpleName:copy @TO@ TryStatement@@try {  CacheConfiguration copy=(CacheConfiguration)clone();  return copy;} catch (CloneNotSupportedException e) {  throw new RuntimeCamelException(e);} @AT@ 1881 @LENGTH@ 12
---------INS SimpleName@@copy @TO@ ReturnStatement@@SimpleName:copy @AT@ 1888 @LENGTH@ 4
------INS CatchClause@@catch (CloneNotSupportedException e) {  throw new RuntimeCamelException(e);} @TO@ TryStatement@@try {  CacheConfiguration copy=(CacheConfiguration)clone();  return copy;} catch (CloneNotSupportedException e) {  throw new RuntimeCamelException(e);} @AT@ 1904 @LENGTH@ 96
---------INS SingleVariableDeclaration@@CloneNotSupportedException e @TO@ CatchClause@@catch (CloneNotSupportedException e) {  throw new RuntimeCamelException(e);} @AT@ 1911 @LENGTH@ 28
------------INS SimpleType@@CloneNotSupportedException @TO@ SingleVariableDeclaration@@CloneNotSupportedException e @AT@ 1911 @LENGTH@ 26
------------INS SimpleName@@e @TO@ SingleVariableDeclaration@@CloneNotSupportedException e @AT@ 1938 @LENGTH@ 1
---------INS ThrowStatement@@ClassInstanceCreation:new RuntimeCamelException(e) @TO@ CatchClause@@catch (CloneNotSupportedException e) {  throw new RuntimeCamelException(e);} @AT@ 1955 @LENGTH@ 35
------------INS ClassInstanceCreation@@RuntimeCamelException[e] @TO@ ThrowStatement@@ClassInstanceCreation:new RuntimeCamelException(e) @AT@ 1961 @LENGTH@ 28
---------------INS New@@new @TO@ ClassInstanceCreation@@RuntimeCamelException[e] @AT@ 1961 @LENGTH@ 3
---------------INS SimpleType@@RuntimeCamelException @TO@ ClassInstanceCreation@@RuntimeCamelException[e] @AT@ 1965 @LENGTH@ 21
---------------INS SimpleName@@e @TO@ ClassInstanceCreation@@RuntimeCamelException[e] @AT@ 1987 @LENGTH@ 1


UPD FieldDeclaration@@private, Integer, [transactionTimer=new Integer(10000)] @TO@ private, Integer, [transactionTimer=10000] @AT@ 1566 @LENGTH@ 54
---UPD VariableDeclarationFragment@@transactionTimer=new Integer(10000) @TO@ transactionTimer=10000 @AT@ 1582 @LENGTH@ 37
------INS NumberLiteral@@10000 @TO@ VariableDeclarationFragment@@transactionTimer=new Integer(10000) @AT@ 1588 @LENGTH@ 5
------DEL ClassInstanceCreation@@Integer[10000] @AT@ 1601 @LENGTH@ 18
---------DEL New@@new @AT@ 1601 @LENGTH@ 3
---------DEL SimpleType@@Integer @AT@ 1605 @LENGTH@ 7
---------DEL NumberLiteral@@10000 @AT@ 1613 @LENGTH@ 5


UPD ExpressionStatement@@Assignment:on=ObjectName.getInstance("org.apache.camel:context=localhost/camel-1,type=threadpools,name=threads2(threads)") @TO@ Assignment:on=ObjectName.getInstance("org.apache.camel:context=localhost/camel-1,type=threadpools,name=\"threads2(threads)\"") @AT@ 2211 @LENGTH@ 114
---UPD Assignment@@on=ObjectName.getInstance("org.apache.camel:context=localhost/camel-1,type=threadpools,name=threads2(threads)") @TO@ on=ObjectName.getInstance("org.apache.camel:context=localhost/camel-1,type=threadpools,name=\"threads2(threads)\"") @AT@ 2211 @LENGTH@ 113
------UPD MethodInvocation@@ObjectName.getInstance("org.apache.camel:context=localhost/camel-1,type=threadpools,name=threads2(threads)") @TO@ ObjectName.getInstance("org.apache.camel:context=localhost/camel-1,type=threadpools,name=\"threads2(threads)\"") @AT@ 2216 @LENGTH@ 108
---------UPD SimpleName@@MethodName:getInstance:["org.apache.camel:context=localhost/camel-1,type=threadpools,name=threads2(threads)"] @TO@ MethodName:getInstance:["org.apache.camel:context=localhost/camel-1,type=threadpools,name=\"threads2(threads)\""] @AT@ 2227 @LENGTH@ 97
------------UPD StringLiteral@@"org.apache.camel:context=localhost/camel-1,type=threadpools,name=threads2(threads)" @TO@ "org.apache.camel:context=localhost/camel-1,type=threadpools,name=\"threads2(threads)\"" @AT@ 2239 @LENGTH@ 84


INS FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @TO@ TypeDeclaration@@[public]User, [UserDetails, CredentialsContainer] @AT@ 1897 @LENGTH@ 90
---INS Modifier@@private @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @AT@ 1897 @LENGTH@ 7
---INS Modifier@@static @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @AT@ 1905 @LENGTH@ 6
---INS Modifier@@final @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @AT@ 1912 @LENGTH@ 5
---INS PrimitiveType@@long @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @AT@ 1918 @LENGTH@ 4
---INS VariableDeclarationFragment@@serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @AT@ 1923 @LENGTH@ 63
------INS SimpleName@@serialVersionUID @TO@ VariableDeclarationFragment@@serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID @AT@ 1923 @LENGTH@ 16
------INS QualifiedName@@SpringSecurityCoreVersion.SERIAL_VERSION_UID @TO@ VariableDeclarationFragment@@serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID @AT@ 1942 @LENGTH@ 44
---------INS SimpleName@@SpringSecurityCoreVersion @TO@ QualifiedName@@SpringSecurityCoreVersion.SERIAL_VERSION_UID @AT@ 1942 @LENGTH@ 25
---------INS SimpleName@@SERIAL_VERSION_UID @TO@ QualifiedName@@SpringSecurityCoreVersion.SERIAL_VERSION_UID @AT@ 1968 @LENGTH@ 18


UPD ReturnStatement@@InfixExpression:"SnsProducer[" + UriUtils.sanitizeUri(getEndpoint().getEndpointUri()) + "]" @TO@ InfixExpression:"SnsProducer[" + URISupport.sanitizeUri(getEndpoint().getEndpointUri()) + "]" @AT@ 2994 @LENGTH@ 83
---UPD InfixExpression@@"SnsProducer[" + UriUtils.sanitizeUri(getEndpoint().getEndpointUri()) + "]" @TO@ "SnsProducer[" + URISupport.sanitizeUri(getEndpoint().getEndpointUri()) + "]" @AT@ 3001 @LENGTH@ 75
------UPD MethodInvocation@@UriUtils.sanitizeUri(getEndpoint().getEndpointUri()) @TO@ URISupport.sanitizeUri(getEndpoint().getEndpointUri()) @AT@ 3018 @LENGTH@ 52
---------UPD SimpleName@@Name:UriUtils @TO@ Name:URISupport @AT@ 3018 @LENGTH@ 8


DEL FieldDeclaration@@private, static, Integer, [count] @AT@ 1076 @LENGTH@ 29
---DEL Modifier@@private @AT@ 1076 @LENGTH@ 7
---DEL Modifier@@static @AT@ 1084 @LENGTH@ 6
---DEL SimpleType@@Integer @AT@ 1091 @LENGTH@ 7
---DEL VariableDeclarationFragment@@count @AT@ 1099 @LENGTH@ 5
------DEL SimpleName@@count @AT@ 1099 @LENGTH@ 5


INS TryStatement@@try {  StateParser.parse(operationRequest,stateCallbackHandler,OperationRequestState.INSTANCE);} catch (CommandFormatException e) {  throw new OperationFormatException("Failed to parse operation request '" + operationRequest + "'",e);} @TO@ MethodDeclaration@@public, void, MethodName:parse, String operationRequest, final CallbackHandler handler, OperationFormatException,  @AT@ 8965 @LENGTH@ 278
---MOV ExpressionStatement@@MethodInvocation:StateParser.parse(operationRequest,stateCallbackHandler,OperationRequestState.INSTANCE) @TO@ TryStatement@@try {  StateParser.parse(operationRequest,stateCallbackHandler,OperationRequestState.INSTANCE);} catch (CommandFormatException e) {  throw new OperationFormatException("Failed to parse operation request '" + operationRequest + "'",e);} @AT@ 8917 @LENGTH@ 90
---INS CatchClause@@catch (CommandFormatException e) {  throw new OperationFormatException("Failed to parse operation request '" + operationRequest + "'",e);} @TO@ TryStatement@@try {  StateParser.parse(operationRequest,stateCallbackHandler,OperationRequestState.INSTANCE);} catch (CommandFormatException e) {  throw new OperationFormatException("Failed to parse operation request '" + operationRequest + "'",e);} @AT@ 9084 @LENGTH@ 159
------INS SingleVariableDeclaration@@CommandFormatException e @TO@ CatchClause@@catch (CommandFormatException e) {  throw new OperationFormatException("Failed to parse operation request '" + operationRequest + "'",e);} @AT@ 9091 @LENGTH@ 24
---------INS SimpleType@@CommandFormatException @TO@ SingleVariableDeclaration@@CommandFormatException e @AT@ 9091 @LENGTH@ 22
---------INS SimpleName@@e @TO@ SingleVariableDeclaration@@CommandFormatException e @AT@ 9114 @LENGTH@ 1
------INS ThrowStatement@@ClassInstanceCreation:new OperationFormatException("Failed to parse operation request '" + operationRequest + "'",e) @TO@ CatchClause@@catch (CommandFormatException e) {  throw new OperationFormatException("Failed to parse operation request '" + operationRequest + "'",e);} @AT@ 9131 @LENGTH@ 102
---------INS ClassInstanceCreation@@OperationFormatException["Failed to parse operation request '" + operationRequest + "'", e] @TO@ ThrowStatement@@ClassInstanceCreation:new OperationFormatException("Failed to parse operation request '" + operationRequest + "'",e) @AT@ 9137 @LENGTH@ 95
------------INS New@@new @TO@ ClassInstanceCreation@@OperationFormatException["Failed to parse operation request '" + operationRequest + "'", e] @AT@ 9137 @LENGTH@ 3
------------INS SimpleType@@OperationFormatException @TO@ ClassInstanceCreation@@OperationFormatException["Failed to parse operation request '" + operationRequest + "'", e] @AT@ 9141 @LENGTH@ 24
------------INS InfixExpression@@"Failed to parse operation request '" + operationRequest + "'" @TO@ ClassInstanceCreation@@OperationFormatException["Failed to parse operation request '" + operationRequest + "'", e] @AT@ 9166 @LENGTH@ 62
---------------INS StringLiteral@@"Failed to parse operation request '" @TO@ InfixExpression@@"Failed to parse operation request '" + operationRequest + "'" @AT@ 9166 @LENGTH@ 37
---------------INS Operator@@+ @TO@ InfixExpression@@"Failed to parse operation request '" + operationRequest + "'" @AT@ 9203 @LENGTH@ 1
---------------INS SimpleName@@operationRequest @TO@ InfixExpression@@"Failed to parse operation request '" + operationRequest + "'" @AT@ 9206 @LENGTH@ 16
---------------INS StringLiteral@@"'" @TO@ InfixExpression@@"Failed to parse operation request '" + operationRequest + "'" @AT@ 9225 @LENGTH@ 3
------------INS SimpleName@@e @TO@ ClassInstanceCreation@@OperationFormatException["Failed to parse operation request '" + operationRequest + "'", e] @AT@ 9230 @LENGTH@ 1


INS TryStatement@@try {  subscriber.close();}  finally {synchronized (pubSubMonitor) {    pubSubMonitor.notifyAll();  }} @TO@ MethodDeclaration@@protected, void, MethodName:doClose,  @AT@ 1453 @LENGTH@ 116
---MOV ExpressionStatement@@MethodInvocation:subscriber.close() @TO@ TryStatement@@try {  subscriber.close();}  finally {synchronized (pubSubMonitor) {    pubSubMonitor.notifyAll();  }} @AT@ 1453 @LENGTH@ 19
---INS Block@@FinallyBody:{synchronized (pubSubMonitor) {    pubSubMonitor.notifyAll();  }} @TO@ TryStatement@@try {  subscriber.close();}  finally {synchronized (pubSubMonitor) {    pubSubMonitor.notifyAll();  }} @AT@ 1494 @LENGTH@ 75
------INS SynchronizedStatement@@synchronized (pubSubMonitor) {  pubSubMonitor.notifyAll();} @TO@ Block@@FinallyBody:{synchronized (pubSubMonitor) {    pubSubMonitor.notifyAll();  }} @AT@ 1499 @LENGTH@ 66
---------INS SimpleName@@pubSubMonitor @TO@ SynchronizedStatement@@synchronized (pubSubMonitor) {  pubSubMonitor.notifyAll();} @AT@ 1513 @LENGTH@ 13
---------INS Block@@SyncBody:{  pubSubMonitor.notifyAll();} @TO@ SynchronizedStatement@@synchronized (pubSubMonitor) {  pubSubMonitor.notifyAll();} @AT@ 1528 @LENGTH@ 37
------------INS ExpressionStatement@@MethodInvocation:pubSubMonitor.notifyAll() @TO@ Block@@SyncBody:{  pubSubMonitor.notifyAll();} @AT@ 1534 @LENGTH@ 26
---------------INS MethodInvocation@@pubSubMonitor.notifyAll() @TO@ ExpressionStatement@@MethodInvocation:pubSubMonitor.notifyAll() @AT@ 1534 @LENGTH@ 25
------------------INS SimpleName@@Name:pubSubMonitor @TO@ MethodInvocation@@pubSubMonitor.notifyAll() @AT@ 1534 @LENGTH@ 13
------------------INS SimpleName@@MethodName:notifyAll:[] @TO@ MethodInvocation@@pubSubMonitor.notifyAll() @AT@ 1548 @LENGTH@ 11


UPD MethodDeclaration@@private, Collection<String>, MethodName:getLocalBusinessInterfaces, CompositeIndex compositeIndex, ClassInfo sessionBeanClass,  @TO@ private, Collection<String>, MethodName:getLocalBusinessInterfaces, SessionBeanComponentDescription description, CompositeIndex compositeIndex, ClassInfo sessionBeanClass, DeploymentUnitProcessingException,  @AT@ 8251 @LENGTH@ 2427
---INS SingleVariableDeclaration@@SessionBeanComponentDescription description @TO@ MethodDeclaration@@private, Collection<String>, MethodName:getLocalBusinessInterfaces, CompositeIndex compositeIndex, ClassInfo sessionBeanClass,  @AT@ 8338 @LENGTH@ 43
------INS SimpleType@@SessionBeanComponentDescription @TO@ SingleVariableDeclaration@@SessionBeanComponentDescription description @AT@ 8338 @LENGTH@ 31
------INS SimpleName@@description @TO@ SingleVariableDeclaration@@SessionBeanComponentDescription description @AT@ 8370 @LENGTH@ 11
---INS SimpleType@@DeploymentUnitProcessingException @TO@ MethodDeclaration@@private, Collection<String>, MethodName:getLocalBusinessInterfaces, CompositeIndex compositeIndex, ClassInfo sessionBeanClass,  @AT@ 8449 @LENGTH@ 33
---INS IfStatement@@if (ejbLocalAnnValue == null) {  DotName[] interfaces=sessionBeanClass.interfaces();  if (interfaces.length != 1)   throw new DeploymentUnitProcessingException("Bean " + description + " specifies @Local, but does not implement 1 interface");  localBusinessInterfaces.add(interfaces[0].toString());  return localBusinessInterfaces;} @TO@ MethodDeclaration@@private, Collection<String>, MethodName:getLocalBusinessInterfaces, CompositeIndex compositeIndex, ClassInfo sessionBeanClass,  @AT@ 10547 @LENGTH@ 400
------INS InfixExpression@@ejbLocalAnnValue == null @TO@ IfStatement@@if (ejbLocalAnnValue == null) {  DotName[] interfaces=sessionBeanClass.interfaces();  if (interfaces.length != 1)   throw new DeploymentUnitProcessingException("Bean " + description + " specifies @Local, but does not implement 1 interface");  localBusinessInterfaces.add(interfaces[0].toString());  return localBusinessInterfaces;} @AT@ 10551 @LENGTH@ 24
---------INS SimpleName@@ejbLocalAnnValue @TO@ InfixExpression@@ejbLocalAnnValue == null @AT@ 10551 @LENGTH@ 16
---------INS Operator@@== @TO@ InfixExpression@@ejbLocalAnnValue == null @AT@ 10567 @LENGTH@ 2
---------INS NullLiteral@@null @TO@ InfixExpression@@ejbLocalAnnValue == null @AT@ 10571 @LENGTH@ 4
------INS Block@@ThenBody:{  DotName[] interfaces=sessionBeanClass.interfaces();  if (interfaces.length != 1)   throw new DeploymentUnitProcessingException("Bean " + description + " specifies @Local, but does not implement 1 interface");  localBusinessInterfaces.add(interfaces[0].toString());  return localBusinessInterfaces;} @TO@ IfStatement@@if (ejbLocalAnnValue == null) {  DotName[] interfaces=sessionBeanClass.interfaces();  if (interfaces.length != 1)   throw new DeploymentUnitProcessingException("Bean " + description + " specifies @Local, but does not implement 1 interface");  localBusinessInterfaces.add(interfaces[0].toString());  return localBusinessInterfaces;} @AT@ 10577 @LENGTH@ 370
---------INS VariableDeclarationStatement@@DotName[] interfaces=sessionBeanClass.interfaces(); @TO@ Block@@ThenBody:{  DotName[] interfaces=sessionBeanClass.interfaces();  if (interfaces.length != 1)   throw new DeploymentUnitProcessingException("Bean " + description + " specifies @Local, but does not implement 1 interface");  localBusinessInterfaces.add(interfaces[0].toString());  return localBusinessInterfaces;} @AT@ 10591 @LENGTH@ 53
------------INS ArrayType@@DotName[] @TO@ VariableDeclarationStatement@@DotName[] interfaces=sessionBeanClass.interfaces(); @AT@ 10591 @LENGTH@ 9
---------------INS SimpleType@@DotName @TO@ ArrayType@@DotName[] @AT@ 10591 @LENGTH@ 7
------------INS VariableDeclarationFragment@@interfaces=sessionBeanClass.interfaces() @TO@ VariableDeclarationStatement@@DotName[] interfaces=sessionBeanClass.interfaces(); @AT@ 10601 @LENGTH@ 42
---------------INS SimpleName@@interfaces @TO@ VariableDeclarationFragment@@interfaces=sessionBeanClass.interfaces() @AT@ 10601 @LENGTH@ 10
---------------INS MethodInvocation@@sessionBeanClass.interfaces() @TO@ VariableDeclarationFragment@@interfaces=sessionBeanClass.interfaces() @AT@ 10614 @LENGTH@ 29
------------------INS SimpleName@@Name:sessionBeanClass @TO@ MethodInvocation@@sessionBeanClass.interfaces() @AT@ 10614 @LENGTH@ 16
------------------INS SimpleName@@MethodName:interfaces:[] @TO@ MethodInvocation@@sessionBeanClass.interfaces() @AT@ 10631 @LENGTH@ 12
---------INS IfStatement@@if (interfaces.length != 1) throw new DeploymentUnitProcessingException("Bean " + description + " specifies @Local, but does not implement 1 interface"); @TO@ Block@@ThenBody:{  DotName[] interfaces=sessionBeanClass.interfaces();  if (interfaces.length != 1)   throw new DeploymentUnitProcessingException("Bean " + description + " specifies @Local, but does not implement 1 interface");  localBusinessInterfaces.add(interfaces[0].toString());  return localBusinessInterfaces;} @AT@ 10657 @LENGTH@ 169
------------INS InfixExpression@@interfaces.length != 1 @TO@ IfStatement@@if (interfaces.length != 1) throw new DeploymentUnitProcessingException("Bean " + description + " specifies @Local, but does not implement 1 interface"); @AT@ 10661 @LENGTH@ 22
---------------INS QualifiedName@@interfaces.length @TO@ InfixExpression@@interfaces.length != 1 @AT@ 10661 @LENGTH@ 17
------------------INS SimpleName@@interfaces @TO@ QualifiedName@@interfaces.length @AT@ 10661 @LENGTH@ 10
------------------INS SimpleName@@length @TO@ QualifiedName@@interfaces.length @AT@ 10672 @LENGTH@ 6
---------------INS Operator@@!= @TO@ InfixExpression@@interfaces.length != 1 @AT@ 10678 @LENGTH@ 2
---------------INS NumberLiteral@@1 @TO@ InfixExpression@@interfaces.length != 1 @AT@ 10682 @LENGTH@ 1
------------INS Block@@ThenBody:throw new DeploymentUnitProcessingException("Bean " + description + " specifies @Local, but does not implement 1 interface"); @TO@ IfStatement@@if (interfaces.length != 1) throw new DeploymentUnitProcessingException("Bean " + description + " specifies @Local, but does not implement 1 interface"); @AT@ 10701 @LENGTH@ 125
---------------INS ThrowStatement@@ClassInstanceCreation:new DeploymentUnitProcessingException("Bean " + description + " specifies @Local, but does not implement 1 interface") @TO@ Block@@ThenBody:throw new DeploymentUnitProcessingException("Bean " + description + " specifies @Local, but does not implement 1 interface"); @AT@ 10701 @LENGTH@ 125
------------------INS ClassInstanceCreation@@DeploymentUnitProcessingException["Bean " + description + " specifies @Local, but does not implement 1 interface"] @TO@ ThrowStatement@@ClassInstanceCreation:new DeploymentUnitProcessingException("Bean " + description + " specifies @Local, but does not implement 1 interface") @AT@ 10707 @LENGTH@ 118
---------------------INS New@@new @TO@ ClassInstanceCreation@@DeploymentUnitProcessingException["Bean " + description + " specifies @Local, but does not implement 1 interface"] @AT@ 10707 @LENGTH@ 3
---------------------INS SimpleType@@DeploymentUnitProcessingException @TO@ ClassInstanceCreation@@DeploymentUnitProcessingException["Bean " + description + " specifies @Local, but does not implement 1 interface"] @AT@ 10711 @LENGTH@ 33
---------------------INS InfixExpression@@"Bean " + description + " specifies @Local, but does not implement 1 interface" @TO@ ClassInstanceCreation@@DeploymentUnitProcessingException["Bean " + description + " specifies @Local, but does not implement 1 interface"] @AT@ 10745 @LENGTH@ 79
------------------------INS StringLiteral@@"Bean " @TO@ InfixExpression@@"Bean " + description + " specifies @Local, but does not implement 1 interface" @AT@ 10745 @LENGTH@ 7
------------------------INS Operator@@+ @TO@ InfixExpression@@"Bean " + description + " specifies @Local, but does not implement 1 interface" @AT@ 10752 @LENGTH@ 1
------------------------INS SimpleName@@description @TO@ InfixExpression@@"Bean " + description + " specifies @Local, but does not implement 1 interface" @AT@ 10755 @LENGTH@ 11
------------------------INS StringLiteral@@" specifies @Local, but does not implement 1 interface" @TO@ InfixExpression@@"Bean " + description + " specifies @Local, but does not implement 1 interface" @AT@ 10769 @LENGTH@ 55
---------INS ExpressionStatement@@MethodInvocation:localBusinessInterfaces.add(interfaces[0].toString()) @TO@ Block@@ThenBody:{  DotName[] interfaces=sessionBeanClass.interfaces();  if (interfaces.length != 1)   throw new DeploymentUnitProcessingException("Bean " + description + " specifies @Local, but does not implement 1 interface");  localBusinessInterfaces.add(interfaces[0].toString());  return localBusinessInterfaces;} @AT@ 10839 @LENGTH@ 54
------------INS MethodInvocation@@localBusinessInterfaces.add(interfaces[0].toString()) @TO@ ExpressionStatement@@MethodInvocation:localBusinessInterfaces.add(interfaces[0].toString()) @AT@ 10839 @LENGTH@ 53
---------------INS SimpleName@@Name:localBusinessInterfaces @TO@ MethodInvocation@@localBusinessInterfaces.add(interfaces[0].toString()) @AT@ 10839 @LENGTH@ 23
---------------INS SimpleName@@MethodName:add:[interfaces[0].toString()] @TO@ MethodInvocation@@localBusinessInterfaces.add(interfaces[0].toString()) @AT@ 10863 @LENGTH@ 29
------------------INS MethodInvocation@@interfaces[0].toString() @TO@ SimpleName@@MethodName:add:[interfaces[0].toString()] @AT@ 10867 @LENGTH@ 24
---------------------INS ArrayAccess@@interfaces[0] @TO@ MethodInvocation@@interfaces[0].toString() @AT@ 10867 @LENGTH@ 13
------------------------INS SimpleName@@interfaces @TO@ ArrayAccess@@interfaces[0] @AT@ 10867 @LENGTH@ 10
------------------------INS NumberLiteral@@0 @TO@ ArrayAccess@@interfaces[0] @AT@ 10878 @LENGTH@ 1
---------------------INS SimpleName@@MethodName:toString:[] @TO@ MethodInvocation@@interfaces[0].toString() @AT@ 10881 @LENGTH@ 10
---------INS ReturnStatement@@SimpleName:localBusinessInterfaces @TO@ Block@@ThenBody:{  DotName[] interfaces=sessionBeanClass.interfaces();  if (interfaces.length != 1)   throw new DeploymentUnitProcessingException("Bean " + description + " specifies @Local, but does not implement 1 interface");  localBusinessInterfaces.add(interfaces[0].toString());  return localBusinessInterfaces;} @AT@ 10906 @LENGTH@ 31
------------MOV SimpleName@@localBusinessInterfaces @TO@ ReturnStatement@@SimpleName:localBusinessInterfaces @AT@ 10648 @LENGTH@ 23
---DEL ReturnStatement@@SimpleName:localBusinessInterfaces @AT@ 10641 @LENGTH@ 31
---INS ReturnStatement@@SimpleName:localBusinessInterfaces @TO@ MethodDeclaration@@private, Collection<String>, MethodName:getLocalBusinessInterfaces, CompositeIndex compositeIndex, ClassInfo sessionBeanClass,  @AT@ 11169 @LENGTH@ 31
------INS SimpleName@@localBusinessInterfaces @TO@ ReturnStatement@@SimpleName:localBusinessInterfaces @AT@ 11176 @LENGTH@ 23


INS MethodDeclaration@@static, Double, MethodName:convert, String zscore,  @TO@ TypeDeclaration@@[public, abstract]RjcUtils,  @AT@ 6451 @LENGTH@ 100
---INS Modifier@@static @TO@ MethodDeclaration@@static, Double, MethodName:convert, String zscore,  @AT@ 6451 @LENGTH@ 6
---INS SimpleType@@Double @TO@ MethodDeclaration@@static, Double, MethodName:convert, String zscore,  @AT@ 6458 @LENGTH@ 6
---INS SimpleName@@MethodName:convert @TO@ MethodDeclaration@@static, Double, MethodName:convert, String zscore,  @AT@ 6465 @LENGTH@ 7
---INS SingleVariableDeclaration@@String zscore @TO@ MethodDeclaration@@static, Double, MethodName:convert, String zscore,  @AT@ 6473 @LENGTH@ 13
------INS SimpleType@@String @TO@ SingleVariableDeclaration@@String zscore @AT@ 6473 @LENGTH@ 6
------INS SimpleName@@zscore @TO@ SingleVariableDeclaration@@String zscore @AT@ 6480 @LENGTH@ 6
---INS ReturnStatement@@ParenthesizedExpression:(zscore == null ? null : Double.valueOf(zscore)) @TO@ MethodDeclaration@@static, Double, MethodName:convert, String zscore,  @AT@ 6492 @LENGTH@ 56
------INS ParenthesizedExpression@@(zscore == null ? null : Double.valueOf(zscore)) @TO@ ReturnStatement@@ParenthesizedExpression:(zscore == null ? null : Double.valueOf(zscore)) @AT@ 6499 @LENGTH@ 48
---------INS ConditionalExpression@@zscore == null ? null : Double.valueOf(zscore) @TO@ ParenthesizedExpression@@(zscore == null ? null : Double.valueOf(zscore)) @AT@ 6500 @LENGTH@ 46
------------INS InfixExpression@@zscore == null @TO@ ConditionalExpression@@zscore == null ? null : Double.valueOf(zscore) @AT@ 6500 @LENGTH@ 14
---------------INS SimpleName@@zscore @TO@ InfixExpression@@zscore == null @AT@ 6500 @LENGTH@ 6
---------------INS Operator@@== @TO@ InfixExpression@@zscore == null @AT@ 6506 @LENGTH@ 2
---------------INS NullLiteral@@null @TO@ InfixExpression@@zscore == null @AT@ 6510 @LENGTH@ 4
------------INS NullLiteral@@null @TO@ ConditionalExpression@@zscore == null ? null : Double.valueOf(zscore) @AT@ 6517 @LENGTH@ 4
------------INS MethodInvocation@@Double.valueOf(zscore) @TO@ ConditionalExpression@@zscore == null ? null : Double.valueOf(zscore) @AT@ 6524 @LENGTH@ 22
---------------INS SimpleName@@Name:Double @TO@ MethodInvocation@@Double.valueOf(zscore) @AT@ 6524 @LENGTH@ 6
---------------INS SimpleName@@MethodName:valueOf:[zscore] @TO@ MethodInvocation@@Double.valueOf(zscore) @AT@ 6531 @LENGTH@ 15
------------------INS SimpleName@@zscore @TO@ SimpleName@@MethodName:valueOf:[zscore] @AT@ 6539 @LENGTH@ 6


MOV ExpressionStatement@@SuperMethodInvocation:super.setUp() @TO@ MethodDeclaration@@public, void, MethodName:setUp, Exception,  @AT@ 1419 @LENGTH@ 14


DEL VariableDeclarationStatement@@DatagramSocket ds=new DatagramSocket(); @AT@ 2029 @LENGTH@ 41
---DEL SimpleType@@DatagramSocket @AT@ 2029 @LENGTH@ 14
---DEL VariableDeclarationFragment@@ds=new DatagramSocket() @AT@ 2044 @LENGTH@ 25
------DEL SimpleName@@ds @AT@ 2044 @LENGTH@ 2
------DEL ClassInstanceCreation@@DatagramSocket[] @AT@ 2049 @LENGTH@ 20
---------DEL New@@new @AT@ 2049 @LENGTH@ 3
---------DEL SimpleType@@DatagramSocket @AT@ 2053 @LENGTH@ 14


UPD ExpressionStatement@@MethodInvocation:Assert.notNull(physicalTypeMetadata,"Unable to obtain physical type metdata for type " + javaType.getFullyQualifiedTypeName()) @TO@ MethodInvocation:Assert.notNull(physicalTypeMetadata,"Unable to obtain physical type metadata for type " + javaType.getFullyQualifiedTypeName()) @AT@ 22845 @LENGTH@ 128
---UPD MethodInvocation@@Assert.notNull(physicalTypeMetadata,"Unable to obtain physical type metdata for type " + javaType.getFullyQualifiedTypeName()) @TO@ Assert.notNull(physicalTypeMetadata,"Unable to obtain physical type metadata for type " + javaType.getFullyQualifiedTypeName()) @AT@ 22845 @LENGTH@ 127
------UPD SimpleName@@MethodName:notNull:[physicalTypeMetadata, "Unable to obtain physical type metdata for type " + javaType.getFullyQualifiedTypeName()] @TO@ MethodName:notNull:[physicalTypeMetadata, "Unable to obtain physical type metadata for type " + javaType.getFullyQualifiedTypeName()] @AT@ 22852 @LENGTH@ 120
---------UPD InfixExpression@@"Unable to obtain physical type metdata for type " + javaType.getFullyQualifiedTypeName() @TO@ "Unable to obtain physical type metadata for type " + javaType.getFullyQualifiedTypeName() @AT@ 22882 @LENGTH@ 89
------------UPD StringLiteral@@"Unable to obtain physical type metdata for type " @TO@ "Unable to obtain physical type metadata for type " @AT@ 22882 @LENGTH@ 50


UPD MethodDeclaration@@public, static, void, MethodName:addService, final ServiceName sname, final String abstractPath, final ServiceTarget serviceTarget,  @TO@ public, static, ServiceController<String>, MethodName:addService, final ServiceName sname, final String abstractPath, final ServiceTarget serviceTarget,  @AT@ 1728 @LENGTH@ 261
---DEL PrimitiveType@@void @AT@ 1742 @LENGTH@ 4
---INS ParameterizedType@@ServiceController<String> @TO@ MethodDeclaration@@public, static, void, MethodName:addService, final ServiceName sname, final String abstractPath, final ServiceTarget serviceTarget,  @AT@ 1818 @LENGTH@ 25
------INS SimpleType@@ServiceController @TO@ ParameterizedType@@ServiceController<String> @AT@ 1818 @LENGTH@ 17
------INS SimpleType@@String @TO@ ParameterizedType@@ServiceController<String> @AT@ 1836 @LENGTH@ 6
---DEL ExpressionStatement@@MethodInvocation:serviceTarget.addService(sname,service).install() @AT@ 1932 @LENGTH@ 51
---INS ReturnStatement@@MethodInvocation:serviceTarget.addService(sname,service).install() @TO@ MethodDeclaration@@public, static, void, MethodName:addService, final ServiceName sname, final String abstractPath, final ServiceTarget serviceTarget,  @AT@ 2029 @LENGTH@ 58
------MOV MethodInvocation@@serviceTarget.addService(sname,service).install() @TO@ ReturnStatement@@MethodInvocation:serviceTarget.addService(sname,service).install() @AT@ 1932 @LENGTH@ 50


INS MethodDeclaration@@public, voidMethodName:QuotesState, boolean quotesInContent,  @TO@ TypeDeclaration@@[public]QuotesState, DefaultParsingState @AT@ 1324 @LENGTH@ 88
---INS Modifier@@public @TO@ MethodDeclaration@@public, voidMethodName:QuotesState, boolean quotesInContent,  @AT@ 1324 @LENGTH@ 6
---INS SimpleName@@MethodName:QuotesState @TO@ MethodDeclaration@@public, voidMethodName:QuotesState, boolean quotesInContent,  @AT@ 1331 @LENGTH@ 11
---INS SingleVariableDeclaration@@boolean quotesInContent @TO@ MethodDeclaration@@public, voidMethodName:QuotesState, boolean quotesInContent,  @AT@ 1343 @LENGTH@ 23
------INS PrimitiveType@@boolean @TO@ SingleVariableDeclaration@@boolean quotesInContent @AT@ 1343 @LENGTH@ 7
------INS SimpleName@@quotesInContent @TO@ SingleVariableDeclaration@@boolean quotesInContent @AT@ 1351 @LENGTH@ 15
---INS ConstructorInvocation@@this(quotesInContent,true); @TO@ MethodDeclaration@@public, voidMethodName:QuotesState, boolean quotesInContent,  @AT@ 1378 @LENGTH@ 28
------INS SimpleName@@quotesInContent @TO@ ConstructorInvocation@@this(quotesInContent,true); @AT@ 1383 @LENGTH@ 15
------INS BooleanLiteral@@true @TO@ ConstructorInvocation@@this(quotesInContent,true); @AT@ 1400 @LENGTH@ 4


UPD ExpressionStatement@@MethodInvocation:contextData.put(valueContextKey,contextData) @TO@ MethodInvocation:contextData.put(valueContextKey,valueReference) @AT@ 2591 @LENGTH@ 46
---UPD MethodInvocation@@contextData.put(valueContextKey,contextData) @TO@ contextData.put(valueContextKey,valueReference) @AT@ 2591 @LENGTH@ 45
------UPD SimpleName@@MethodName:put:[valueContextKey, contextData] @TO@ MethodName:put:[valueContextKey, valueReference] @AT@ 2603 @LENGTH@ 33
---------UPD SimpleName@@contextData @TO@ valueReference @AT@ 2624 @LENGTH@ 11


UPD ExpressionStatement@@MethodInvocation:LOG.debug("Registering repository: %s - Interface: %s - Factory: %s, - Custom implementation: %s",new Object[]{context.getBeanId(),context.getInterfaceName(),context.getRepositoryFactoryBeanClassName(),customImplementationBeanName}) @TO@ MethodInvocation:LOG.debug("Registering repository: {} - Interface: {} - Factory: {}, - Custom implementation: {}",new Object[]{context.getBeanId(),context.getInterfaceName(),context.getRepositoryFactoryBeanClassName(),customImplementationBeanName}) @AT@ 8113 @LENGTH@ 365
---UPD MethodInvocation@@LOG.debug("Registering repository: %s - Interface: %s - Factory: %s, - Custom implementation: %s",new Object[]{context.getBeanId(),context.getInterfaceName(),context.getRepositoryFactoryBeanClassName(),customImplementationBeanName}) @TO@ LOG.debug("Registering repository: {} - Interface: {} - Factory: {}, - Custom implementation: {}",new Object[]{context.getBeanId(),context.getInterfaceName(),context.getRepositoryFactoryBeanClassName(),customImplementationBeanName}) @AT@ 8113 @LENGTH@ 364
------UPD SimpleName@@MethodName:debug:["Registering repository: %s - Interface: %s - Factory: %s, - Custom implementation: %s", new Object[]{context.getBeanId(),context.getInterfaceName(),context.getRepositoryFactoryBeanClassName(),customImplementationBeanName}] @TO@ MethodName:debug:["Registering repository: {} - Interface: {} - Factory: {}, - Custom implementation: {}", new Object[]{context.getBeanId(),context.getInterfaceName(),context.getRepositoryFactoryBeanClassName(),customImplementationBeanName}] @AT@ 8117 @LENGTH@ 360
---------UPD StringLiteral@@"Registering repository: %s - Interface: %s - Factory: %s, - Custom implementation: %s" @TO@ "Registering repository: {} - Interface: {} - Factory: {}, - Custom implementation: {}" @AT@ 8144 @LENGTH@ 87


DEL FieldDeclaration@@private, Executor, [executor] @AT@ 1546 @LENGTH@ 26
---DEL Modifier@@private @AT@ 1546 @LENGTH@ 7
---DEL SimpleType@@Executor @AT@ 1554 @LENGTH@ 8
---DEL VariableDeclarationFragment@@executor @AT@ 1563 @LENGTH@ 8
------DEL SimpleName@@executor @AT@ 1563 @LENGTH@ 8


UPD ReturnStatement@@QualifiedName:SerializerUtils.EMPTY_ARRAY @TO@ QualifiedName:SerializationUtils.EMPTY_ARRAY @AT@ 2581 @LENGTH@ 35
---UPD QualifiedName@@SerializerUtils.EMPTY_ARRAY @TO@ SerializationUtils.EMPTY_ARRAY @AT@ 2588 @LENGTH@ 27
------UPD SimpleName@@SerializerUtils @TO@ SerializationUtils @AT@ 2588 @LENGTH@ 15


UPD MethodDeclaration@@public, boolean, MethodName:canAppearNext, CommandContext ctx,  @TO@ public, boolean, MethodName:canAppearNext, CommandContext ctx, CommandFormatException,  @AT@ 2237 @LENGTH@ 207
---INS SimpleType@@CommandFormatException @TO@ MethodDeclaration@@public, boolean, MethodName:canAppearNext, CommandContext ctx,  @AT@ 2293 @LENGTH@ 22


UPD IfStatement@@if (value != null && Enum.class.isAssignableFrom(pd.getPropertyType())) {  writeValue(dbo,keyToUse,((Enum)value).name());} else {  writeValue(dbo,keyToUse,value);} @TO@ if (value != null && Enum.class.isAssignableFrom(pd.getPropertyType())) {  writeValue(dbo,keyToUse,((Enum)value).name());} else if (value != null && "_id".equals(keyToUse) && String.class.isAssignableFrom(pd.getPropertyType())) {  writeValue(dbo,keyToUse,new ObjectId((String)value));} else {  writeValue(dbo,keyToUse,value);} @AT@ 5456 @LENGTH@ 194
---INS Block@@ElseBody:if (value != null && "_id".equals(keyToUse) && String.class.isAssignableFrom(pd.getPropertyType())) {  writeValue(dbo,keyToUse,new ObjectId((String)value));} else {  writeValue(dbo,keyToUse,value);} @TO@ IfStatement@@if (value != null && Enum.class.isAssignableFrom(pd.getPropertyType())) {  writeValue(dbo,keyToUse,((Enum)value).name());} else {  writeValue(dbo,keyToUse,value);} @AT@ 5600 @LENGTH@ 229
------INS IfStatement@@if (value != null && "_id".equals(keyToUse) && String.class.isAssignableFrom(pd.getPropertyType())) {  writeValue(dbo,keyToUse,new ObjectId((String)value));} else {  writeValue(dbo,keyToUse,value);} @TO@ Block@@ElseBody:if (value != null && "_id".equals(keyToUse) && String.class.isAssignableFrom(pd.getPropertyType())) {  writeValue(dbo,keyToUse,new ObjectId((String)value));} else {  writeValue(dbo,keyToUse,value);} @AT@ 5600 @LENGTH@ 229
---------MOV Block@@ElseBody:{  writeValue(dbo,keyToUse,value);} @TO@ IfStatement@@if (value != null && "_id".equals(keyToUse) && String.class.isAssignableFrom(pd.getPropertyType())) {  writeValue(dbo,keyToUse,new ObjectId((String)value));} else {  writeValue(dbo,keyToUse,value);} @AT@ 5602 @LENGTH@ 48
---------INS InfixExpression@@value != null && "_id".equals(keyToUse) && String.class.isAssignableFrom(pd.getPropertyType()) @TO@ IfStatement@@if (value != null && "_id".equals(keyToUse) && String.class.isAssignableFrom(pd.getPropertyType())) {  writeValue(dbo,keyToUse,new ObjectId((String)value));} else {  writeValue(dbo,keyToUse,value);} @AT@ 5604 @LENGTH@ 94
------------INS InfixExpression@@value != null && "_id".equals(keyToUse) @TO@ InfixExpression@@value != null && "_id".equals(keyToUse) && String.class.isAssignableFrom(pd.getPropertyType()) @AT@ 5604 @LENGTH@ 39
---------------INS InfixExpression@@value != null @TO@ InfixExpression@@value != null && "_id".equals(keyToUse) @AT@ 5604 @LENGTH@ 13
------------------INS SimpleName@@value @TO@ InfixExpression@@value != null @AT@ 5604 @LENGTH@ 5
------------------INS Operator@@!= @TO@ InfixExpression@@value != null @AT@ 5609 @LENGTH@ 2
------------------INS NullLiteral@@null @TO@ InfixExpression@@value != null @AT@ 5613 @LENGTH@ 4
---------------INS Operator@@&& @TO@ InfixExpression@@value != null && "_id".equals(keyToUse) @AT@ 5617 @LENGTH@ 2
---------------INS MethodInvocation@@"_id".equals(keyToUse) @TO@ InfixExpression@@value != null && "_id".equals(keyToUse) @AT@ 5621 @LENGTH@ 22
------------------INS StringLiteral@@"_id" @TO@ MethodInvocation@@"_id".equals(keyToUse) @AT@ 5621 @LENGTH@ 5
------------------INS SimpleName@@MethodName:equals:[keyToUse] @TO@ MethodInvocation@@"_id".equals(keyToUse) @AT@ 5627 @LENGTH@ 16
---------------------INS SimpleName@@keyToUse @TO@ SimpleName@@MethodName:equals:[keyToUse] @AT@ 5634 @LENGTH@ 8
------------INS Operator@@&& @TO@ InfixExpression@@value != null && "_id".equals(keyToUse) && String.class.isAssignableFrom(pd.getPropertyType()) @AT@ 5643 @LENGTH@ 2
------------INS MethodInvocation@@String.class.isAssignableFrom(pd.getPropertyType()) @TO@ InfixExpression@@value != null && "_id".equals(keyToUse) && String.class.isAssignableFrom(pd.getPropertyType()) @AT@ 5647 @LENGTH@ 51
---------------INS TypeLiteral@@String.class @TO@ MethodInvocation@@String.class.isAssignableFrom(pd.getPropertyType()) @AT@ 5647 @LENGTH@ 12
---------------INS SimpleName@@MethodName:isAssignableFrom:[pd.getPropertyType()] @TO@ MethodInvocation@@String.class.isAssignableFrom(pd.getPropertyType()) @AT@ 5660 @LENGTH@ 38
------------------INS MethodInvocation@@pd.getPropertyType() @TO@ SimpleName@@MethodName:isAssignableFrom:[pd.getPropertyType()] @AT@ 5677 @LENGTH@ 20
---------------------INS SimpleName@@Name:pd @TO@ MethodInvocation@@pd.getPropertyType() @AT@ 5677 @LENGTH@ 2
---------------------INS SimpleName@@MethodName:getPropertyType:[] @TO@ MethodInvocation@@pd.getPropertyType() @AT@ 5680 @LENGTH@ 17
---------INS Block@@ThenBody:{  writeValue(dbo,keyToUse,new ObjectId((String)value));} @TO@ IfStatement@@if (value != null && "_id".equals(keyToUse) && String.class.isAssignableFrom(pd.getPropertyType())) {  writeValue(dbo,keyToUse,new ObjectId((String)value));} else {  writeValue(dbo,keyToUse,value);} @AT@ 5700 @LENGTH@ 70
------------INS ExpressionStatement@@MethodInvocation:writeValue(dbo,keyToUse,new ObjectId((String)value)) @TO@ Block@@ThenBody:{  writeValue(dbo,keyToUse,new ObjectId((String)value));} @AT@ 5708 @LENGTH@ 55
---------------INS MethodInvocation@@writeValue(dbo,keyToUse,new ObjectId((String)value)) @TO@ ExpressionStatement@@MethodInvocation:writeValue(dbo,keyToUse,new ObjectId((String)value)) @AT@ 5708 @LENGTH@ 54
------------------INS SimpleName@@MethodName:writeValue:[dbo, keyToUse, new ObjectId((String)value)] @TO@ MethodInvocation@@writeValue(dbo,keyToUse,new ObjectId((String)value)) @AT@ 5708 @LENGTH@ 54
---------------------INS SimpleName@@dbo @TO@ SimpleName@@MethodName:writeValue:[dbo, keyToUse, new ObjectId((String)value)] @AT@ 5719 @LENGTH@ 3
---------------------INS SimpleName@@keyToUse @TO@ SimpleName@@MethodName:writeValue:[dbo, keyToUse, new ObjectId((String)value)] @AT@ 5724 @LENGTH@ 8
---------------------INS ClassInstanceCreation@@ObjectId[(String)value] @TO@ SimpleName@@MethodName:writeValue:[dbo, keyToUse, new ObjectId((String)value)] @AT@ 5734 @LENGTH@ 27
------------------------INS New@@new @TO@ ClassInstanceCreation@@ObjectId[(String)value] @AT@ 5734 @LENGTH@ 3
------------------------INS SimpleType@@ObjectId @TO@ ClassInstanceCreation@@ObjectId[(String)value] @AT@ 5738 @LENGTH@ 8
------------------------INS CastExpression@@(String)value @TO@ ClassInstanceCreation@@ObjectId[(String)value] @AT@ 5747 @LENGTH@ 13
---------------------------INS SimpleType@@String @TO@ CastExpression@@(String)value @AT@ 5748 @LENGTH@ 6
---------------------------INS SimpleName@@value @TO@ CastExpression@@(String)value @AT@ 5755 @LENGTH@ 5


INS MethodDeclaration@@public, voidMethodName:QuotesState, boolean quotesInContent,  @TO@ TypeDeclaration@@[public]QuotesState, DefaultParsingState @AT@ 1324 @LENGTH@ 88
---INS Modifier@@public @TO@ MethodDeclaration@@public, voidMethodName:QuotesState, boolean quotesInContent,  @AT@ 1324 @LENGTH@ 6
---INS SimpleName@@MethodName:QuotesState @TO@ MethodDeclaration@@public, voidMethodName:QuotesState, boolean quotesInContent,  @AT@ 1331 @LENGTH@ 11
---INS SingleVariableDeclaration@@boolean quotesInContent @TO@ MethodDeclaration@@public, voidMethodName:QuotesState, boolean quotesInContent,  @AT@ 1343 @LENGTH@ 23
------INS PrimitiveType@@boolean @TO@ SingleVariableDeclaration@@boolean quotesInContent @AT@ 1343 @LENGTH@ 7
------INS SimpleName@@quotesInContent @TO@ SingleVariableDeclaration@@boolean quotesInContent @AT@ 1351 @LENGTH@ 15
---INS ConstructorInvocation@@this(quotesInContent,true); @TO@ MethodDeclaration@@public, voidMethodName:QuotesState, boolean quotesInContent,  @AT@ 1378 @LENGTH@ 28
------INS SimpleName@@quotesInContent @TO@ ConstructorInvocation@@this(quotesInContent,true); @AT@ 1383 @LENGTH@ 15
------INS BooleanLiteral@@true @TO@ ConstructorInvocation@@this(quotesInContent,true); @AT@ 1400 @LENGTH@ 4


DEL ExpressionStatement@@MethodInvocation:serviceTarget.addService(JDBCRARDeployService.NAME,new JDBCRARDeployService()).addDependency(ConnectorServices.RESOURCEADAPTERS_SERVICE).addDependency(ConnectorServices.CONNECTOR_CONFIG_SERVICE).addDependency(ConnectorServices.IRONJACAMAR_MDR).setInitialMode(Mode.ON_DEMAND).install() @AT@ 2448 @LENGTH@ 371
---DEL MethodInvocation@@serviceTarget.addService(JDBCRARDeployService.NAME,new JDBCRARDeployService()).addDependency(ConnectorServices.RESOURCEADAPTERS_SERVICE).addDependency(ConnectorServices.CONNECTOR_CONFIG_SERVICE).addDependency(ConnectorServices.IRONJACAMAR_MDR).setInitialMode(Mode.ON_DEMAND).install() @AT@ 2448 @LENGTH@ 370
------DEL MethodInvocation@@MethodName:setInitialMode:[Mode.ON_DEMAND] @AT@ 2448 @LENGTH@ 343
---------DEL QualifiedName@@Mode.ON_DEMAND @AT@ 2776 @LENGTH@ 14
------------DEL SimpleName@@Mode @AT@ 2776 @LENGTH@ 4
------------DEL SimpleName@@ON_DEMAND @AT@ 2781 @LENGTH@ 9
------DEL MethodInvocation@@MethodName:addDependency:[ConnectorServices.IRONJACAMAR_MDR] @AT@ 2448 @LENGTH@ 295
---------DEL QualifiedName@@ConnectorServices.IRONJACAMAR_MDR @AT@ 2709 @LENGTH@ 33
------------DEL SimpleName@@ConnectorServices @AT@ 2709 @LENGTH@ 17
------------DEL SimpleName@@IRONJACAMAR_MDR @AT@ 2727 @LENGTH@ 15
------DEL MethodInvocation@@MethodName:addDependency:[ConnectorServices.CONNECTOR_CONFIG_SERVICE] @AT@ 2448 @LENGTH@ 229
---------DEL QualifiedName@@ConnectorServices.CONNECTOR_CONFIG_SERVICE @AT@ 2634 @LENGTH@ 42
------------DEL SimpleName@@ConnectorServices @AT@ 2634 @LENGTH@ 17
------------DEL SimpleName@@CONNECTOR_CONFIG_SERVICE @AT@ 2652 @LENGTH@ 24
------DEL MethodInvocation@@MethodName:addDependency:[ConnectorServices.RESOURCEADAPTERS_SERVICE] @AT@ 2448 @LENGTH@ 154
---------DEL QualifiedName@@ConnectorServices.RESOURCEADAPTERS_SERVICE @AT@ 2559 @LENGTH@ 42
------------DEL SimpleName@@ConnectorServices @AT@ 2559 @LENGTH@ 17
------------DEL SimpleName@@RESOURCEADAPTERS_SERVICE @AT@ 2577 @LENGTH@ 24
------DEL MethodInvocation@@MethodName:addService:[JDBCRARDeployService.NAME, new JDBCRARDeployService()] @AT@ 2448 @LENGTH@ 79
---------DEL QualifiedName@@JDBCRARDeployService.NAME @AT@ 2473 @LENGTH@ 25
------------DEL SimpleName@@JDBCRARDeployService @AT@ 2473 @LENGTH@ 20
------------DEL SimpleName@@NAME @AT@ 2494 @LENGTH@ 4
---------DEL ClassInstanceCreation@@JDBCRARDeployService[] @AT@ 2500 @LENGTH@ 26
------------DEL New@@new @AT@ 2500 @LENGTH@ 3
------------DEL SimpleType@@JDBCRARDeployService @AT@ 2504 @LENGTH@ 20
------DEL SimpleName@@Name:serviceTarget @AT@ 2448 @LENGTH@ 13
------DEL SimpleName@@MethodName:install:[] @AT@ 2809 @LENGTH@ 9


DEL ExpressionStatement@@MethodInvocation:prepareMailbox() @AT@ 1459 @LENGTH@ 17
---DEL MethodInvocation@@MethodName:prepareMailbox:[] @AT@ 1459 @LENGTH@ 16


UPD MethodDeclaration@@void, MethodName:handle, CommandContext ctx,  @TO@ void, MethodName:handle, CommandContext ctx, CommandFormatException,  @AT@ 1954 @LENGTH@ 27
---INS SimpleType@@CommandFormatException @TO@ MethodDeclaration@@void, MethodName:handle, CommandContext ctx,  @AT@ 1988 @LENGTH@ 22


INS ExpressionStatement@@MethodInvocation:enterState('\\',EscapeCharacterState.INSTANCE) @TO@ MethodDeclaration@@public, voidMethodName:NodeState, final OperationState opState,  @AT@ 2869 @LENGTH@ 48
---INS MethodInvocation@@enterState('\\',EscapeCharacterState.INSTANCE) @TO@ ExpressionStatement@@MethodInvocation:enterState('\\',EscapeCharacterState.INSTANCE) @AT@ 2869 @LENGTH@ 47
------INS SimpleName@@MethodName:enterState:['\\', EscapeCharacterState.INSTANCE] @TO@ MethodInvocation@@enterState('\\',EscapeCharacterState.INSTANCE) @AT@ 2869 @LENGTH@ 47
---------INS CharacterLiteral@@'\\' @TO@ SimpleName@@MethodName:enterState:['\\', EscapeCharacterState.INSTANCE] @AT@ 2880 @LENGTH@ 4
---------INS QualifiedName@@EscapeCharacterState.INSTANCE @TO@ SimpleName@@MethodName:enterState:['\\', EscapeCharacterState.INSTANCE] @AT@ 2886 @LENGTH@ 29
------------INS SimpleName@@EscapeCharacterState @TO@ QualifiedName@@EscapeCharacterState.INSTANCE @AT@ 2886 @LENGTH@ 20
------------INS SimpleName@@INSTANCE @TO@ QualifiedName@@EscapeCharacterState.INSTANCE @AT@ 2907 @LENGTH@ 8


UPD ExpressionStatement@@Assignment:tmp=new File(homeDir,"standalone") @TO@ Assignment:tmp=new File(homeDir,standalone ? "standalone" : "domain/servers/" + serverName) @AT@ 8675 @LENGTH@ 38
---UPD Assignment@@tmp=new File(homeDir,"standalone") @TO@ tmp=new File(homeDir,standalone ? "standalone" : "domain/servers/" + serverName) @AT@ 8675 @LENGTH@ 37
------UPD ClassInstanceCreation@@File[homeDir, "standalone"] @TO@ File[homeDir, standalone ? "standalone" : "domain/servers/" + serverName] @AT@ 8681 @LENGTH@ 31
---------INS ConditionalExpression@@standalone ? "standalone" : "domain/servers/" + serverName @TO@ ClassInstanceCreation@@File[homeDir, "standalone"] @AT@ 8699 @LENGTH@ 58
------------INS SimpleName@@standalone @TO@ ConditionalExpression@@standalone ? "standalone" : "domain/servers/" + serverName @AT@ 8699 @LENGTH@ 10
------------INS StringLiteral@@"standalone" @TO@ ConditionalExpression@@standalone ? "standalone" : "domain/servers/" + serverName @AT@ 8712 @LENGTH@ 12
------------INS InfixExpression@@"domain/servers/" + serverName @TO@ ConditionalExpression@@standalone ? "standalone" : "domain/servers/" + serverName @AT@ 8727 @LENGTH@ 30
---------------INS StringLiteral@@"domain/servers/" @TO@ InfixExpression@@"domain/servers/" + serverName @AT@ 8727 @LENGTH@ 17
---------------INS Operator@@+ @TO@ InfixExpression@@"domain/servers/" + serverName @AT@ 8744 @LENGTH@ 1
---------------INS SimpleName@@serverName @TO@ InfixExpression@@"domain/servers/" + serverName @AT@ 8747 @LENGTH@ 10
---------DEL StringLiteral@@"standalone" @AT@ 8699 @LENGTH@ 12


UPD ExpressionStatement@@Assignment:cacheManager=new CacheManagerFactory().instantiateCacheManager() @TO@ Assignment:cacheManager=new DefaultCacheManagerFactory().instantiateCacheManager() @AT@ 2083 @LENGTH@ 67
---UPD Assignment@@cacheManager=new CacheManagerFactory().instantiateCacheManager() @TO@ cacheManager=new DefaultCacheManagerFactory().instantiateCacheManager() @AT@ 2083 @LENGTH@ 66
------UPD MethodInvocation@@new CacheManagerFactory().instantiateCacheManager() @TO@ new DefaultCacheManagerFactory().instantiateCacheManager() @AT@ 2098 @LENGTH@ 51
---------UPD ClassInstanceCreation@@CacheManagerFactory[] @TO@ DefaultCacheManagerFactory[] @AT@ 2098 @LENGTH@ 25
------------UPD SimpleType@@CacheManagerFactory @TO@ DefaultCacheManagerFactory @AT@ 2102 @LENGTH@ 19


DEL ExpressionStatement@@MethodInvocation:prepareMailbox() @AT@ 1435 @LENGTH@ 17
---DEL MethodInvocation@@MethodName:prepareMailbox:[] @AT@ 1435 @LENGTH@ 16


UPD IfStatement@@if (context.getMethod().getName().equals("equals") && context.getParameters().length == 1 && context.getMethod().getParameterTypes()[0] == Object.class) {  final Object other=context.getParameters()[0];  final Class<?> proxyType=componentView.getProxyClass();  return proxyType.isAssignableFrom(other.getClass());} else if (context.getMethod().getName().equals("hashCode")) {  return componentView.hashCode();} else {  return context.proceed();} @TO@ if (context.getMethod().getName().equals("equals") && context.getParameters().length == 1 && context.getMethod().getParameterTypes()[0] == Object.class) {  final Object other=context.getParameters()[0];  if (other == null) {    return false;  }  final Class<?> proxyType=componentView.getProxyClass();  return proxyType.isAssignableFrom(other.getClass());} else if (context.getMethod().getName().equals("hashCode")) {  return componentView.hashCode();} else {  return context.proceed();} @AT@ 2334 @LENGTH@ 634
---UPD Block@@ThenBody:{  final Object other=context.getParameters()[0];  final Class<?> proxyType=componentView.getProxyClass();  return proxyType.isAssignableFrom(other.getClass());} @TO@ ThenBody:{  final Object other=context.getParameters()[0];  if (other == null) {    return false;  }  final Class<?> proxyType=componentView.getProxyClass();  return proxyType.isAssignableFrom(other.getClass());} @AT@ 2485 @LENGTH@ 224
------INS IfStatement@@if (other == null) {  return false;} @TO@ Block@@ThenBody:{  final Object other=context.getParameters()[0];  final Class<?> proxyType=componentView.getProxyClass();  return proxyType.isAssignableFrom(other.getClass());} @AT@ 2568 @LENGTH@ 72
---------INS InfixExpression@@other == null @TO@ IfStatement@@if (other == null) {  return false;} @AT@ 2572 @LENGTH@ 13
------------INS SimpleName@@other @TO@ InfixExpression@@other == null @AT@ 2572 @LENGTH@ 5
------------INS Operator@@== @TO@ InfixExpression@@other == null @AT@ 2577 @LENGTH@ 2
------------INS NullLiteral@@null @TO@ InfixExpression@@other == null @AT@ 2581 @LENGTH@ 4
---------INS Block@@ThenBody:{  return false;} @TO@ IfStatement@@if (other == null) {  return false;} @AT@ 2587 @LENGTH@ 53
------------INS ReturnStatement@@BooleanLiteral:false @TO@ Block@@ThenBody:{  return false;} @AT@ 2609 @LENGTH@ 13
---------------INS BooleanLiteral@@false @TO@ ReturnStatement@@BooleanLiteral:false @AT@ 2616 @LENGTH@ 5


UPD MethodDeclaration@@public, boolean, MethodName:canAppearNext, CommandContext ctx,  @TO@ public, boolean, MethodName:canAppearNext, CommandContext ctx, CommandFormatException,  @AT@ 2700 @LENGTH@ 254
---INS SimpleType@@CommandFormatException @TO@ MethodDeclaration@@public, boolean, MethodName:canAppearNext, CommandContext ctx,  @AT@ 2786 @LENGTH@ 22


DEL FieldDeclaration@@public, static, final, DescriptionProvider, [SERVER_GROUP_DEPLOYMENT_REMOVE=new DescriptionProvider(){
  @Override public ModelNode getModelDescription(  Locale locale){
    return ServerGroupDescription.getDeploymentRemoveOperation(locale);
  }
}
] @AT@ 3942 @LENGTH@ 277
---DEL Modifier@@public @AT@ 3942 @LENGTH@ 6
---DEL Modifier@@static @AT@ 3949 @LENGTH@ 6
---DEL Modifier@@final @AT@ 3956 @LENGTH@ 5
---DEL SimpleType@@DescriptionProvider @AT@ 3962 @LENGTH@ 19
---DEL VariableDeclarationFragment@@SERVER_GROUP_DEPLOYMENT_REMOVE=new DescriptionProvider(){
  @Override public ModelNode getModelDescription(  Locale locale){
    return ServerGroupDescription.getDeploymentRemoveOperation(locale);
  }
}
 @AT@ 3982 @LENGTH@ 236
------DEL SimpleName@@SERVER_GROUP_DEPLOYMENT_REMOVE @AT@ 3982 @LENGTH@ 30
------DEL ClassInstanceCreation@@DescriptionProvider[] @AT@ 4015 @LENGTH@ 203
---------DEL New@@new @AT@ 4015 @LENGTH@ 3
---------DEL SimpleType@@DescriptionProvider @AT@ 4019 @LENGTH@ 19
---------DEL AnonymousClassDeclaration@@AnonymousClass @AT@ 4041 @LENGTH@ 177
------------DEL MethodDeclaration@@public, ModelNode, MethodName:getModelDescription, Locale locale,  @AT@ 4069 @LENGTH@ 143
---------------DEL Modifier@@public @AT@ 4069 @LENGTH@ 6
---------------DEL SimpleType@@ModelNode @AT@ 4076 @LENGTH@ 9
---------------DEL SimpleName@@MethodName:getModelDescription @AT@ 4086 @LENGTH@ 19
---------------DEL SingleVariableDeclaration@@Locale locale @AT@ 4106 @LENGTH@ 13
------------------DEL SimpleType@@Locale @AT@ 4106 @LENGTH@ 6
------------------DEL SimpleName@@locale @AT@ 4113 @LENGTH@ 6
---------------DEL ReturnStatement@@MethodInvocation:ServerGroupDescription.getDeploymentRemoveOperation(locale) @AT@ 4135 @LENGTH@ 67
------------------DEL MethodInvocation@@ServerGroupDescription.getDeploymentRemoveOperation(locale) @AT@ 4142 @LENGTH@ 59
---------------------DEL SimpleName@@Name:ServerGroupDescription @AT@ 4142 @LENGTH@ 22
---------------------DEL SimpleName@@MethodName:getDeploymentRemoveOperation:[locale] @AT@ 4165 @LENGTH@ 36
------------------------DEL SimpleName@@locale @AT@ 4194 @LENGTH@ 6


DEL IfStatement@@if (sysProps.get(key) == null) {  File serverDeploymentDir=environment.getDomainSystemDeploymentDir();  sysProps.put(key,serverDeploymentDir.getAbsolutePath());} @AT@ 22879 @LENGTH@ 195
---DEL InfixExpression@@sysProps.get(key) == null @AT@ 22883 @LENGTH@ 25
------DEL MethodInvocation@@sysProps.get(key) @AT@ 22883 @LENGTH@ 17
---------DEL SimpleName@@Name:sysProps @AT@ 22883 @LENGTH@ 8
---------DEL SimpleName@@MethodName:get:[key] @AT@ 22892 @LENGTH@ 8
------------DEL SimpleName@@key @AT@ 22896 @LENGTH@ 3
------DEL Operator@@== @AT@ 22900 @LENGTH@ 2
------DEL NullLiteral@@null @AT@ 22904 @LENGTH@ 4
---DEL Block@@ThenBody:{  File serverDeploymentDir=environment.getDomainSystemDeploymentDir();  sysProps.put(key,serverDeploymentDir.getAbsolutePath());} @AT@ 22910 @LENGTH@ 164
------DEL VariableDeclarationStatement@@File serverDeploymentDir=environment.getDomainSystemDeploymentDir(); @AT@ 22924 @LENGTH@ 70
---------DEL SimpleType@@File @AT@ 22924 @LENGTH@ 4
---------DEL VariableDeclarationFragment@@serverDeploymentDir=environment.getDomainSystemDeploymentDir() @AT@ 22929 @LENGTH@ 64
------------DEL SimpleName@@serverDeploymentDir @AT@ 22929 @LENGTH@ 19
------------DEL MethodInvocation@@environment.getDomainSystemDeploymentDir() @AT@ 22951 @LENGTH@ 42
---------------DEL SimpleName@@Name:environment @AT@ 22951 @LENGTH@ 11
---------------DEL SimpleName@@MethodName:getDomainSystemDeploymentDir:[] @AT@ 22963 @LENGTH@ 30
------DEL ExpressionStatement@@MethodInvocation:sysProps.put(key,serverDeploymentDir.getAbsolutePath()) @AT@ 23007 @LENGTH@ 57
---------DEL MethodInvocation@@sysProps.put(key,serverDeploymentDir.getAbsolutePath()) @AT@ 23007 @LENGTH@ 56
------------DEL SimpleName@@Name:sysProps @AT@ 23007 @LENGTH@ 8
------------DEL SimpleName@@MethodName:put:[key, serverDeploymentDir.getAbsolutePath()] @AT@ 23016 @LENGTH@ 47
---------------DEL SimpleName@@key @AT@ 23020 @LENGTH@ 3
---------------DEL MethodInvocation@@serverDeploymentDir.getAbsolutePath() @AT@ 23025 @LENGTH@ 37
------------------DEL SimpleName@@Name:serverDeploymentDir @AT@ 23025 @LENGTH@ 19
------------------DEL SimpleName@@MethodName:getAbsolutePath:[] @AT@ 23045 @LENGTH@ 17


UPD MethodDeclaration@@protected, voidMethodName:SessionBeanComponent, final EJBComponentCreateService ejbComponentCreateService,  @TO@ protected, voidMethodName:SessionBeanComponent, final SessionBeanComponentCreateService ejbComponentCreateService,  @AT@ 3074 @LENGTH@ 1369
---UPD SingleVariableDeclaration@@final EJBComponentCreateService ejbComponentCreateService @TO@ final SessionBeanComponentCreateService ejbComponentCreateService @AT@ 3105 @LENGTH@ 57
------UPD SimpleType@@EJBComponentCreateService @TO@ SessionBeanComponentCreateService @AT@ 3111 @LENGTH@ 25
---DEL VariableDeclarationStatement@@ComponentConfiguration configuration=ejbComponentCreateService.getComponentConfiguration(); @AT@ 3285 @LENGTH@ 93
------DEL SimpleType@@ComponentConfiguration @AT@ 3285 @LENGTH@ 22
------DEL VariableDeclarationFragment@@configuration=ejbComponentCreateService.getComponentConfiguration() @AT@ 3308 @LENGTH@ 69
---------DEL SimpleName@@configuration @AT@ 3308 @LENGTH@ 13
---------DEL MethodInvocation@@ejbComponentCreateService.getComponentConfiguration() @AT@ 3324 @LENGTH@ 53
------------DEL SimpleName@@Name:ejbComponentCreateService @AT@ 3324 @LENGTH@ 25
------------DEL SimpleName@@MethodName:getComponentConfiguration:[] @AT@ 3350 @LENGTH@ 27
---DEL VariableDeclarationStatement@@SessionBeanComponentDescription description=(SessionBeanComponentDescription)configuration.getComponentDescription(); @AT@ 3387 @LENGTH@ 120
------DEL SimpleType@@SessionBeanComponentDescription @AT@ 3387 @LENGTH@ 31
------DEL VariableDeclarationFragment@@description=(SessionBeanComponentDescription)configuration.getComponentDescription() @AT@ 3419 @LENGTH@ 87
---------DEL SimpleName@@description @AT@ 3419 @LENGTH@ 11
---------DEL CastExpression@@(SessionBeanComponentDescription)configuration.getComponentDescription() @AT@ 3433 @LENGTH@ 73
------------DEL SimpleType@@SessionBeanComponentDescription @AT@ 3434 @LENGTH@ 31
------------DEL MethodInvocation@@configuration.getComponentDescription() @AT@ 3467 @LENGTH@ 39
---------------DEL SimpleName@@Name:configuration @AT@ 3467 @LENGTH@ 13
---------------DEL SimpleName@@MethodName:getComponentDescription:[] @AT@ 3481 @LENGTH@ 25
---DEL VariableDeclarationStatement@@AccessTimeout accessTimeout=description.getBeanLevelAccessTimeout(); @AT@ 3516 @LENGTH@ 70
------DEL SimpleType@@AccessTimeout @AT@ 3516 @LENGTH@ 13
------DEL VariableDeclarationFragment@@accessTimeout=description.getBeanLevelAccessTimeout() @AT@ 3530 @LENGTH@ 55
---------DEL SimpleName@@accessTimeout @AT@ 3530 @LENGTH@ 13
---------DEL MethodInvocation@@description.getBeanLevelAccessTimeout() @AT@ 3546 @LENGTH@ 39
------------DEL SimpleName@@Name:description @AT@ 3546 @LENGTH@ 11
------------DEL SimpleName@@MethodName:getBeanLevelAccessTimeout:[] @AT@ 3558 @LENGTH@ 27
---DEL IfStatement@@if (accessTimeout == null) {  accessTimeout=new AccessTimeout(){    @Override public long value(){      return 5;    }    @Override public TimeUnit unit(){      return MINUTES;    }    @Override public Class<? extends Annotation> annotationType(){      return AccessTimeout.class;    }  };} @AT@ 3667 @LENGTH@ 500
------DEL InfixExpression@@accessTimeout == null @AT@ 3671 @LENGTH@ 21
---------DEL SimpleName@@accessTimeout @AT@ 3671 @LENGTH@ 13
---------DEL Operator@@== @AT@ 3684 @LENGTH@ 2
---------DEL NullLiteral@@null @AT@ 3688 @LENGTH@ 4
------DEL Block@@ThenBody:{  accessTimeout=new AccessTimeout(){    @Override public long value(){      return 5;    }    @Override public TimeUnit unit(){      return MINUTES;    }    @Override public Class<? extends Annotation> annotationType(){      return AccessTimeout.class;    }  };} @AT@ 3694 @LENGTH@ 473
---------DEL ExpressionStatement@@Assignment:accessTimeout=new AccessTimeout(){
  @Override public long value(){
    return 5;
  }
  @Override public TimeUnit unit(){
    return MINUTES;
  }
  @Override public Class<? extends Annotation> annotationType(){
    return AccessTimeout.class;
  }
}
 @AT@ 3708 @LENGTH@ 449
------------DEL Assignment@@accessTimeout=new AccessTimeout(){
  @Override public long value(){
    return 5;
  }
  @Override public TimeUnit unit(){
    return MINUTES;
  }
  @Override public Class<? extends Annotation> annotationType(){
    return AccessTimeout.class;
  }
}
 @AT@ 3708 @LENGTH@ 448
---------------DEL SimpleName@@accessTimeout @AT@ 3708 @LENGTH@ 13
---------------DEL Operator@@= @AT@ 3721 @LENGTH@ 1
---------------DEL ClassInstanceCreation@@AccessTimeout[] @AT@ 3724 @LENGTH@ 432
------------------DEL New@@new @AT@ 3724 @LENGTH@ 3
------------------DEL SimpleType@@AccessTimeout @AT@ 3728 @LENGTH@ 13
------------------DEL AnonymousClassDeclaration@@AnonymousClass @AT@ 3744 @LENGTH@ 412
---------------------DEL MethodDeclaration@@public, long, MethodName:value,  @AT@ 3788 @LENGTH@ 69
------------------------DEL Modifier@@public @AT@ 3788 @LENGTH@ 6
------------------------DEL PrimitiveType@@long @AT@ 3795 @LENGTH@ 4
------------------------DEL SimpleName@@MethodName:value @AT@ 3800 @LENGTH@ 5
------------------------DEL ReturnStatement@@NumberLiteral:5 @AT@ 3830 @LENGTH@ 9
---------------------------DEL NumberLiteral@@5 @AT@ 3837 @LENGTH@ 1
---------------------DEL MethodDeclaration@@public, TimeUnit, MethodName:unit,  @AT@ 3901 @LENGTH@ 78
------------------------DEL Modifier@@public @AT@ 3901 @LENGTH@ 6
------------------------DEL SimpleType@@TimeUnit @AT@ 3908 @LENGTH@ 8
------------------------DEL SimpleName@@MethodName:unit @AT@ 3917 @LENGTH@ 4
------------------------DEL ReturnStatement@@SimpleName:MINUTES @AT@ 3946 @LENGTH@ 15
---------------------------DEL SimpleName@@MINUTES @AT@ 3953 @LENGTH@ 7
---------------------DEL MethodDeclaration@@public, Class<? extends Annotation>, MethodName:annotationType,  @AT@ 4023 @LENGTH@ 119
------------------------DEL Modifier@@public @AT@ 4023 @LENGTH@ 6
------------------------DEL ParameterizedType@@Class<? extends Annotation> @AT@ 4030 @LENGTH@ 27
---------------------------DEL SimpleType@@Class @AT@ 4030 @LENGTH@ 5
---------------------------DEL WildcardType@@? @AT@ 4036 @LENGTH@ 20
------------------------DEL SimpleName@@MethodName:annotationType @AT@ 4058 @LENGTH@ 14
------------------------DEL ReturnStatement@@TypeLiteral:AccessTimeout.class @AT@ 4097 @LENGTH@ 27
---------------------------DEL TypeLiteral@@AccessTimeout.class @AT@ 4104 @LENGTH@ 19
---UPD ExpressionStatement@@Assignment:this.beanLevelAccessTimeout=accessTimeout @TO@ Assignment:this.beanLevelAccessTimeout=ejbComponentCreateService.getBeanAccessTimeout() @AT@ 4176 @LENGTH@ 44
------UPD Assignment@@this.beanLevelAccessTimeout=accessTimeout @TO@ this.beanLevelAccessTimeout=ejbComponentCreateService.getBeanAccessTimeout() @AT@ 4176 @LENGTH@ 43
---------INS MethodInvocation@@ejbComponentCreateService.getBeanAccessTimeout() @TO@ Assignment@@this.beanLevelAccessTimeout=accessTimeout @AT@ 3323 @LENGTH@ 48
------------INS SimpleName@@Name:ejbComponentCreateService @TO@ MethodInvocation@@ejbComponentCreateService.getBeanAccessTimeout() @AT@ 3323 @LENGTH@ 25
------------INS SimpleName@@MethodName:getBeanAccessTimeout:[] @TO@ MethodInvocation@@ejbComponentCreateService.getBeanAccessTimeout() @AT@ 3349 @LENGTH@ 22
---------DEL SimpleName@@accessTimeout @AT@ 4206 @LENGTH@ 13


DEL VariableDeclarationStatement@@StringBuilder result=new StringBuilder(); @AT@ 5705 @LENGTH@ 43
---DEL SimpleType@@StringBuilder @AT@ 5705 @LENGTH@ 13
---DEL VariableDeclarationFragment@@result=new StringBuilder() @AT@ 5719 @LENGTH@ 28
------DEL SimpleName@@result @AT@ 5719 @LENGTH@ 6
------DEL ClassInstanceCreation@@StringBuilder[] @AT@ 5728 @LENGTH@ 19
---------DEL New@@new @AT@ 5728 @LENGTH@ 3
---------DEL SimpleType@@StringBuilder @AT@ 5732 @LENGTH@ 13


DEL ExpressionStatement@@Assignment:target=new MappingJsonFactory().createJsonParser(content).readValueAs(Map.class) @AT@ 1306 @LENGTH@ 83


UPD FieldDeclaration@@static, final, String[], [DATASOURCE_ATTRIBUTE=new String[]{CONNECTION_URL,DRIVER_CLASS,JNDINAME,MODULE,NEW_CONNECTION_SQL,POOLNAME,URL_DELIMITER,URL_SELECTOR_STRATEGY_CLASS_NAME,USE_JAVA_CONTEXT,ENABLED,MAX_POOL_SIZE,MIN_POOL_SIZE,POOL_PREFILL,POOL_USE_STRICT_MIN,USERNAME,PASSWORD,PREPAREDSTATEMENTSCACHESIZE,SHAREPREPAREDSTATEMENTS,TRACKSTATEMENTS,ALLOCATION_RETRY,ALLOCATION_RETRY_WAIT_MILLIS,BLOCKING_TIMEOUT_WAIT_MILLIS,IDLETIMEOUTMINUTES,QUERYTIMEOUT,USETRYLOCK,SETTXQUERTTIMEOUT,TRANSACTION_ISOLOATION,CHECKVALIDCONNECTIONSQL,EXCEPTIONSORTERCLASSNAME,STALECONNECTIONCHECKERCLASSNAME,VALIDCONNECTIONCHECKERCLASSNAME,BACKGROUNDVALIDATIONMINUTES,BACKGROUNDVALIDATION,USE_FAST_FAIL,VALIDATEONMATCH}] @TO@ static, final, String[], [DATASOURCE_ATTRIBUTE=new String[]{CONNECTION_URL,DRIVER_CLASS,JNDINAME,MODULE,NEW_CONNECTION_SQL,POOLNAME,URL_DELIMITER,URL_SELECTOR_STRATEGY_CLASS_NAME,USE_JAVA_CONTEXT,ENABLED,MAX_POOL_SIZE,MIN_POOL_SIZE,POOL_PREFILL,POOL_USE_STRICT_MIN,USERNAME,PASSWORD,PREPAREDSTATEMENTSCACHESIZE,SHAREPREPAREDSTATEMENTS,TRACKSTATEMENTS,ALLOCATION_RETRY,ALLOCATION_RETRY_WAIT_MILLIS,BLOCKING_TIMEOUT_WAIT_MILLIS,IDLETIMEOUTMINUTES,QUERYTIMEOUT,USETRYLOCK,SETTXQUERYTIMEOUT,TRANSACTION_ISOLOATION,CHECKVALIDCONNECTIONSQL,EXCEPTIONSORTERCLASSNAME,STALECONNECTIONCHECKERCLASSNAME,VALIDCONNECTIONCHECKERCLASSNAME,BACKGROUNDVALIDATIONMINUTES,BACKGROUNDVALIDATION,USE_FAST_FAIL,VALIDATEONMATCH}] @AT@ 1456 @LENGTH@ 810
---UPD VariableDeclarationFragment@@DATASOURCE_ATTRIBUTE=new String[]{CONNECTION_URL,DRIVER_CLASS,JNDINAME,MODULE,NEW_CONNECTION_SQL,POOLNAME,URL_DELIMITER,URL_SELECTOR_STRATEGY_CLASS_NAME,USE_JAVA_CONTEXT,ENABLED,MAX_POOL_SIZE,MIN_POOL_SIZE,POOL_PREFILL,POOL_USE_STRICT_MIN,USERNAME,PASSWORD,PREPAREDSTATEMENTSCACHESIZE,SHAREPREPAREDSTATEMENTS,TRACKSTATEMENTS,ALLOCATION_RETRY,ALLOCATION_RETRY_WAIT_MILLIS,BLOCKING_TIMEOUT_WAIT_MILLIS,IDLETIMEOUTMINUTES,QUERYTIMEOUT,USETRYLOCK,SETTXQUERTTIMEOUT,TRANSACTION_ISOLOATION,CHECKVALIDCONNECTIONSQL,EXCEPTIONSORTERCLASSNAME,STALECONNECTIONCHECKERCLASSNAME,VALIDCONNECTIONCHECKERCLASSNAME,BACKGROUNDVALIDATIONMINUTES,BACKGROUNDVALIDATION,USE_FAST_FAIL,VALIDATEONMATCH} @TO@ DATASOURCE_ATTRIBUTE=new String[]{CONNECTION_URL,DRIVER_CLASS,JNDINAME,MODULE,NEW_CONNECTION_SQL,POOLNAME,URL_DELIMITER,URL_SELECTOR_STRATEGY_CLASS_NAME,USE_JAVA_CONTEXT,ENABLED,MAX_POOL_SIZE,MIN_POOL_SIZE,POOL_PREFILL,POOL_USE_STRICT_MIN,USERNAME,PASSWORD,PREPAREDSTATEMENTSCACHESIZE,SHAREPREPAREDSTATEMENTS,TRACKSTATEMENTS,ALLOCATION_RETRY,ALLOCATION_RETRY_WAIT_MILLIS,BLOCKING_TIMEOUT_WAIT_MILLIS,IDLETIMEOUTMINUTES,QUERYTIMEOUT,USETRYLOCK,SETTXQUERYTIMEOUT,TRANSACTION_ISOLOATION,CHECKVALIDCONNECTIONSQL,EXCEPTIONSORTERCLASSNAME,STALECONNECTIONCHECKERCLASSNAME,VALIDCONNECTIONCHECKERCLASSNAME,BACKGROUNDVALIDATIONMINUTES,BACKGROUNDVALIDATION,USE_FAST_FAIL,VALIDATEONMATCH} @AT@ 1478 @LENGTH@ 787
------UPD ArrayCreation@@new String[]{CONNECTION_URL,DRIVER_CLASS,JNDINAME,MODULE,NEW_CONNECTION_SQL,POOLNAME,URL_DELIMITER,URL_SELECTOR_STRATEGY_CLASS_NAME,USE_JAVA_CONTEXT,ENABLED,MAX_POOL_SIZE,MIN_POOL_SIZE,POOL_PREFILL,POOL_USE_STRICT_MIN,USERNAME,PASSWORD,PREPAREDSTATEMENTSCACHESIZE,SHAREPREPAREDSTATEMENTS,TRACKSTATEMENTS,ALLOCATION_RETRY,ALLOCATION_RETRY_WAIT_MILLIS,BLOCKING_TIMEOUT_WAIT_MILLIS,IDLETIMEOUTMINUTES,QUERYTIMEOUT,USETRYLOCK,SETTXQUERTTIMEOUT,TRANSACTION_ISOLOATION,CHECKVALIDCONNECTIONSQL,EXCEPTIONSORTERCLASSNAME,STALECONNECTIONCHECKERCLASSNAME,VALIDCONNECTIONCHECKERCLASSNAME,BACKGROUNDVALIDATIONMINUTES,BACKGROUNDVALIDATION,USE_FAST_FAIL,VALIDATEONMATCH} @TO@ new String[]{CONNECTION_URL,DRIVER_CLASS,JNDINAME,MODULE,NEW_CONNECTION_SQL,POOLNAME,URL_DELIMITER,URL_SELECTOR_STRATEGY_CLASS_NAME,USE_JAVA_CONTEXT,ENABLED,MAX_POOL_SIZE,MIN_POOL_SIZE,POOL_PREFILL,POOL_USE_STRICT_MIN,USERNAME,PASSWORD,PREPAREDSTATEMENTSCACHESIZE,SHAREPREPAREDSTATEMENTS,TRACKSTATEMENTS,ALLOCATION_RETRY,ALLOCATION_RETRY_WAIT_MILLIS,BLOCKING_TIMEOUT_WAIT_MILLIS,IDLETIMEOUTMINUTES,QUERYTIMEOUT,USETRYLOCK,SETTXQUERYTIMEOUT,TRANSACTION_ISOLOATION,CHECKVALIDCONNECTIONSQL,EXCEPTIONSORTERCLASSNAME,STALECONNECTIONCHECKERCLASSNAME,VALIDCONNECTIONCHECKERCLASSNAME,BACKGROUNDVALIDATIONMINUTES,BACKGROUNDVALIDATION,USE_FAST_FAIL,VALIDATEONMATCH} @AT@ 1501 @LENGTH@ 764
---------UPD ArrayInitializer@@{CONNECTION_URL,DRIVER_CLASS,JNDINAME,MODULE,NEW_CONNECTION_SQL,POOLNAME,URL_DELIMITER,URL_SELECTOR_STRATEGY_CLASS_NAME,USE_JAVA_CONTEXT,ENABLED,MAX_POOL_SIZE,MIN_POOL_SIZE,POOL_PREFILL,POOL_USE_STRICT_MIN,USERNAME,PASSWORD,PREPAREDSTATEMENTSCACHESIZE,SHAREPREPAREDSTATEMENTS,TRACKSTATEMENTS,ALLOCATION_RETRY,ALLOCATION_RETRY_WAIT_MILLIS,BLOCKING_TIMEOUT_WAIT_MILLIS,IDLETIMEOUTMINUTES,QUERYTIMEOUT,USETRYLOCK,SETTXQUERTTIMEOUT,TRANSACTION_ISOLOATION,CHECKVALIDCONNECTIONSQL,EXCEPTIONSORTERCLASSNAME,STALECONNECTIONCHECKERCLASSNAME,VALIDCONNECTIONCHECKERCLASSNAME,BACKGROUNDVALIDATIONMINUTES,BACKGROUNDVALIDATION,USE_FAST_FAIL,VALIDATEONMATCH} @TO@ {CONNECTION_URL,DRIVER_CLASS,JNDINAME,MODULE,NEW_CONNECTION_SQL,POOLNAME,URL_DELIMITER,URL_SELECTOR_STRATEGY_CLASS_NAME,USE_JAVA_CONTEXT,ENABLED,MAX_POOL_SIZE,MIN_POOL_SIZE,POOL_PREFILL,POOL_USE_STRICT_MIN,USERNAME,PASSWORD,PREPAREDSTATEMENTSCACHESIZE,SHAREPREPAREDSTATEMENTS,TRACKSTATEMENTS,ALLOCATION_RETRY,ALLOCATION_RETRY_WAIT_MILLIS,BLOCKING_TIMEOUT_WAIT_MILLIS,IDLETIMEOUTMINUTES,QUERYTIMEOUT,USETRYLOCK,SETTXQUERYTIMEOUT,TRANSACTION_ISOLOATION,CHECKVALIDCONNECTIONSQL,EXCEPTIONSORTERCLASSNAME,STALECONNECTIONCHECKERCLASSNAME,VALIDCONNECTIONCHECKERCLASSNAME,BACKGROUNDVALIDATIONMINUTES,BACKGROUNDVALIDATION,USE_FAST_FAIL,VALIDATEONMATCH} @AT@ 1514 @LENGTH@ 751
------------UPD SimpleName@@SETTXQUERTTIMEOUT @TO@ SETTXQUERYTIMEOUT @AT@ 1998 @LENGTH@ 17


UPD ThrowStatement@@ClassInstanceCreation:new IllegalArgumentException("Multiple no-arg constructors found! Annotate one with @PreferedConstructor explicitly to select it to be used in persistence operations.") @TO@ ClassInstanceCreation:new IllegalArgumentException(String.format("Multiple constructors with arguments found in class %s! Annotate " + "one with @PreferedConstructor explicitly to select it to be used in " + "persistence operations.",rawOwningType.getName())) @AT@ 2600 @LENGTH@ 181
---UPD ClassInstanceCreation@@IllegalArgumentException["Multiple no-arg constructors found! Annotate one with @PreferedConstructor explicitly to select it to be used in persistence operations."] @TO@ IllegalArgumentException[String.format("Multiple constructors with arguments found in class %s! Annotate " + "one with @PreferedConstructor explicitly to select it to be used in " + "persistence operations.",rawOwningType.getName())] @AT@ 2606 @LENGTH@ 174
------INS MethodInvocation@@String.format("Multiple constructors with arguments found in class %s! Annotate " + "one with @PreferedConstructor explicitly to select it to be used in " + "persistence operations.",rawOwningType.getName()) @TO@ ClassInstanceCreation@@IllegalArgumentException["Multiple no-arg constructors found! Annotate one with @PreferedConstructor explicitly to select it to be used in persistence operations."] @AT@ 2641 @LENGTH@ 222
---------INS SimpleName@@Name:String @TO@ MethodInvocation@@String.format("Multiple constructors with arguments found in class %s! Annotate " + "one with @PreferedConstructor explicitly to select it to be used in " + "persistence operations.",rawOwningType.getName()) @AT@ 2641 @LENGTH@ 6
---------INS SimpleName@@MethodName:format:["Multiple constructors with arguments found in class %s! Annotate " + "one with @PreferedConstructor explicitly to select it to be used in " + "persistence operations.", rawOwningType.getName()] @TO@ MethodInvocation@@String.format("Multiple constructors with arguments found in class %s! Annotate " + "one with @PreferedConstructor explicitly to select it to be used in " + "persistence operations.",rawOwningType.getName()) @AT@ 2648 @LENGTH@ 215
------------INS InfixExpression@@"Multiple constructors with arguments found in class %s! Annotate " + "one with @PreferedConstructor explicitly to select it to be used in " + "persistence operations." @TO@ SimpleName@@MethodName:format:["Multiple constructors with arguments found in class %s! Annotate " + "one with @PreferedConstructor explicitly to select it to be used in " + "persistence operations.", rawOwningType.getName()] @AT@ 2655 @LENGTH@ 182
---------------INS StringLiteral@@"Multiple constructors with arguments found in class %s! Annotate " @TO@ InfixExpression@@"Multiple constructors with arguments found in class %s! Annotate " + "one with @PreferedConstructor explicitly to select it to be used in " + "persistence operations." @AT@ 2655 @LENGTH@ 67
---------------INS Operator@@+ @TO@ InfixExpression@@"Multiple constructors with arguments found in class %s! Annotate " + "one with @PreferedConstructor explicitly to select it to be used in " + "persistence operations." @AT@ 2722 @LENGTH@ 1
---------------INS StringLiteral@@"one with @PreferedConstructor explicitly to select it to be used in " @TO@ InfixExpression@@"Multiple constructors with arguments found in class %s! Annotate " + "one with @PreferedConstructor explicitly to select it to be used in " + "persistence operations." @AT@ 2732 @LENGTH@ 70
---------------INS StringLiteral@@"persistence operations." @TO@ InfixExpression@@"Multiple constructors with arguments found in class %s! Annotate " + "one with @PreferedConstructor explicitly to select it to be used in " + "persistence operations." @AT@ 2812 @LENGTH@ 25
------------INS MethodInvocation@@rawOwningType.getName() @TO@ SimpleName@@MethodName:format:["Multiple constructors with arguments found in class %s! Annotate " + "one with @PreferedConstructor explicitly to select it to be used in " + "persistence operations.", rawOwningType.getName()] @AT@ 2839 @LENGTH@ 23
---------------INS SimpleName@@Name:rawOwningType @TO@ MethodInvocation@@rawOwningType.getName() @AT@ 2839 @LENGTH@ 13
---------------INS SimpleName@@MethodName:getName:[] @TO@ MethodInvocation@@rawOwningType.getName() @AT@ 2853 @LENGTH@ 9
------DEL StringLiteral@@"Multiple no-arg constructors found! Annotate one with @PreferedConstructor explicitly to select it to be used in persistence operations." @AT@ 2641 @LENGTH@ 138


UPD MethodDeclaration@@protected, void, MethodName:doHandle, CommandContext ctx,  @TO@ protected, void, MethodName:doHandle, CommandContext ctx, CommandFormatException,  @AT@ 1764 @LENGTH@ 744
---INS SimpleType@@CommandFormatException @TO@ MethodDeclaration@@protected, void, MethodName:doHandle, CommandContext ctx,  @AT@ 1863 @LENGTH@ 22


UPD MethodDeclaration@@static, void, MethodName:addService, final ServiceTarget serviceTarget, final ServiceName serviceName, final ServiceName pathServiceName,  @TO@ static, ServiceController<VirtualFile>, MethodName:addService, final ServiceTarget serviceTarget, final ServiceName serviceName, final ServiceName pathServiceName,  @AT@ 1527 @LENGTH@ 358
---DEL PrimitiveType@@void @AT@ 1534 @LENGTH@ 4
---INS ParameterizedType@@ServiceController<VirtualFile> @TO@ MethodDeclaration@@static, void, MethodName:addService, final ServiceTarget serviceTarget, final ServiceName serviceName, final ServiceName pathServiceName,  @AT@ 1582 @LENGTH@ 30
------INS SimpleType@@ServiceController @TO@ ParameterizedType@@ServiceController<VirtualFile> @AT@ 1582 @LENGTH@ 17
------INS SimpleType@@VirtualFile @TO@ ParameterizedType@@ServiceController<VirtualFile> @AT@ 1600 @LENGTH@ 11
---DEL ExpressionStatement@@MethodInvocation:serviceTarget.addService(serviceName,service).addDependency(pathServiceName,String.class,service.pathValue).install() @AT@ 1732 @LENGTH@ 147
---INS ReturnStatement@@MethodInvocation:serviceTarget.addService(serviceName,service).addDependency(pathServiceName,String.class,service.pathValue).install() @TO@ MethodDeclaration@@static, void, MethodName:addService, final ServiceTarget serviceTarget, final ServiceName serviceName, final ServiceName pathServiceName,  @AT@ 1806 @LENGTH@ 154
------MOV MethodInvocation@@serviceTarget.addService(serviceName,service).addDependency(pathServiceName,String.class,service.pathValue).install() @TO@ ReturnStatement@@MethodInvocation:serviceTarget.addService(serviceName,service).addDependency(pathServiceName,String.class,service.pathValue).install() @AT@ 1732 @LENGTH@ 146


INS ExpressionStatement@@MethodInvocation:configuration.addViewInterceptorToFront(ComponentTypeIdentityInterceptorFactory.INSTANCE) @TO@ MethodDeclaration@@public, void, MethodName:configure, DeploymentPhaseContext context, ComponentConfiguration componentConfiguration, ViewDescription description, ViewConfiguration configuration, DeploymentUnitProcessingException,  @AT@ 4098 @LENGTH@ 90
---INS MethodInvocation@@configuration.addViewInterceptorToFront(ComponentTypeIdentityInterceptorFactory.INSTANCE) @TO@ ExpressionStatement@@MethodInvocation:configuration.addViewInterceptorToFront(ComponentTypeIdentityInterceptorFactory.INSTANCE) @AT@ 4098 @LENGTH@ 89
------INS SimpleName@@Name:configuration @TO@ MethodInvocation@@configuration.addViewInterceptorToFront(ComponentTypeIdentityInterceptorFactory.INSTANCE) @AT@ 4098 @LENGTH@ 13
------INS SimpleName@@MethodName:addViewInterceptorToFront:[ComponentTypeIdentityInterceptorFactory.INSTANCE] @TO@ MethodInvocation@@configuration.addViewInterceptorToFront(ComponentTypeIdentityInterceptorFactory.INSTANCE) @AT@ 4112 @LENGTH@ 75
---------INS QualifiedName@@ComponentTypeIdentityInterceptorFactory.INSTANCE @TO@ SimpleName@@MethodName:addViewInterceptorToFront:[ComponentTypeIdentityInterceptorFactory.INSTANCE] @AT@ 4138 @LENGTH@ 48
------------INS SimpleName@@ComponentTypeIdentityInterceptorFactory @TO@ QualifiedName@@ComponentTypeIdentityInterceptorFactory.INSTANCE @AT@ 4138 @LENGTH@ 39
------------INS SimpleName@@INSTANCE @TO@ QualifiedName@@ComponentTypeIdentityInterceptorFactory.INSTANCE @AT@ 4178 @LENGTH@ 8


UPD Block@@SyncBody:{  outputStream.write(ModelControllerClientProtocol.PARAM_HANDLE_RESULT_COMPLETE);  outputStream.write(ModelControllerClientProtocol.PARAM_OPERATION);  result.getCompensatingOperation().writeExternal(outputStream);  outputStream.flush();} @TO@ SyncBody:{  outputStream.write(ModelControllerClientProtocol.PARAM_HANDLE_RESULT_COMPLETE);  outputStream.write(ModelControllerClientProtocol.PARAM_OPERATION);  ModelNode compensating=result.getCompensatingOperation() != null ? result.getCompensatingOperation() : new ModelNode();  compensating.writeExternal(outputStream);  outputStream.flush();} @AT@ 11090 @LENGTH@ 351
---INS VariableDeclarationStatement@@ModelNode compensating=result.getCompensatingOperation() != null ? result.getCompensatingOperation() : new ModelNode(); @TO@ Block@@SyncBody:{  outputStream.write(ModelControllerClientProtocol.PARAM_HANDLE_RESULT_COMPLETE);  outputStream.write(ModelControllerClientProtocol.PARAM_OPERATION);  result.getCompensatingOperation().writeExternal(outputStream);  outputStream.flush();} @AT@ 11311 @LENGTH@ 121
------INS SimpleType@@ModelNode @TO@ VariableDeclarationStatement@@ModelNode compensating=result.getCompensatingOperation() != null ? result.getCompensatingOperation() : new ModelNode(); @AT@ 11311 @LENGTH@ 9
------INS VariableDeclarationFragment@@compensating=result.getCompensatingOperation() != null ? result.getCompensatingOperation() : new ModelNode() @TO@ VariableDeclarationStatement@@ModelNode compensating=result.getCompensatingOperation() != null ? result.getCompensatingOperation() : new ModelNode(); @AT@ 11321 @LENGTH@ 110
---------INS SimpleName@@compensating @TO@ VariableDeclarationFragment@@compensating=result.getCompensatingOperation() != null ? result.getCompensatingOperation() : new ModelNode() @AT@ 11321 @LENGTH@ 12
---------INS ConditionalExpression@@result.getCompensatingOperation() != null ? result.getCompensatingOperation() : new ModelNode() @TO@ VariableDeclarationFragment@@compensating=result.getCompensatingOperation() != null ? result.getCompensatingOperation() : new ModelNode() @AT@ 11336 @LENGTH@ 95
------------INS InfixExpression@@result.getCompensatingOperation() != null @TO@ ConditionalExpression@@result.getCompensatingOperation() != null ? result.getCompensatingOperation() : new ModelNode() @AT@ 11336 @LENGTH@ 41
---------------INS MethodInvocation@@result.getCompensatingOperation() @TO@ InfixExpression@@result.getCompensatingOperation() != null @AT@ 11336 @LENGTH@ 33
------------------INS SimpleName@@Name:result @TO@ MethodInvocation@@result.getCompensatingOperation() @AT@ 11336 @LENGTH@ 6
------------------INS SimpleName@@MethodName:getCompensatingOperation:[] @TO@ MethodInvocation@@result.getCompensatingOperation() @AT@ 11343 @LENGTH@ 26
---------------INS Operator@@!= @TO@ InfixExpression@@result.getCompensatingOperation() != null @AT@ 11369 @LENGTH@ 2
---------------INS NullLiteral@@null @TO@ InfixExpression@@result.getCompensatingOperation() != null @AT@ 11373 @LENGTH@ 4
------------INS MethodInvocation@@result.getCompensatingOperation() @TO@ ConditionalExpression@@result.getCompensatingOperation() != null ? result.getCompensatingOperation() : new ModelNode() @AT@ 11380 @LENGTH@ 33
---------------INS SimpleName@@Name:result @TO@ MethodInvocation@@result.getCompensatingOperation() @AT@ 11380 @LENGTH@ 6
---------------INS SimpleName@@MethodName:getCompensatingOperation:[] @TO@ MethodInvocation@@result.getCompensatingOperation() @AT@ 11387 @LENGTH@ 26
------------INS ClassInstanceCreation@@ModelNode[] @TO@ ConditionalExpression@@result.getCompensatingOperation() != null ? result.getCompensatingOperation() : new ModelNode() @AT@ 11416 @LENGTH@ 15
---------------INS New@@new @TO@ ClassInstanceCreation@@ModelNode[] @AT@ 11416 @LENGTH@ 3
---------------INS SimpleType@@ModelNode @TO@ ClassInstanceCreation@@ModelNode[] @AT@ 11420 @LENGTH@ 9
---UPD ExpressionStatement@@MethodInvocation:result.getCompensatingOperation().writeExternal(outputStream) @TO@ MethodInvocation:compensating.writeExternal(outputStream) @AT@ 11311 @LENGTH@ 62
------UPD MethodInvocation@@result.getCompensatingOperation().writeExternal(outputStream) @TO@ compensating.writeExternal(outputStream) @AT@ 11311 @LENGTH@ 61
---------DEL MethodInvocation@@MethodName:getCompensatingOperation:[] @AT@ 11311 @LENGTH@ 33
---------UPD SimpleName@@Name:result @TO@ Name:compensating @AT@ 11311 @LENGTH@ 6


UPD SwitchStatement@@switch (attribute) {case NAME:{    name=value;    binding.get(OP_ADDR).set(address).add(SOCKET_BINDING,name);    break;  }case INTERFACE:{  if (!interfaces.contains(value)) {    throw new XMLStreamException("Unknown interface " + value + " "+ attribute.getLocalName()+ " must be declared in element "+ Element.INTERFACES.getLocalName(),reader.getLocation());  }  binding.get(INTERFACE).set(value);  break;}case PORT:{binding.get(PORT).set(parseBoundedIntegerAttribute(reader,i,0,65535));break;}case FIXED_PORT:{binding.get(FIXED_PORT).set(Boolean.parseBoolean(value));break;}case MULTICAST_ADDRESS:{try {final InetAddress mcastAddr=InetAddress.getByName(value);if (!mcastAddr.isMulticastAddress()) {throw new XMLStreamException("Value " + value + " for attribute "+ attribute.getLocalName()+ " is not a valid multicast address",reader.getLocation());}binding.get(MULTICAST_ADDRESS).set(value);break;} catch (final UnknownHostException e) {throw new XMLStreamException("Value " + value + " for attribute "+ attribute.getLocalName()+ " is not a valid multicast address",reader.getLocation(),e);}}case MULTICAST_PORT:{binding.get(MULTICAST_PORT).set(parseBoundedIntegerAttribute(reader,i,1,65535));break;}default :throw unexpectedAttribute(reader,i);} @TO@ switch (attribute) {case NAME:{    name=value;    binding.get(OP_ADDR).set(address).add(SOCKET_BINDING,name);    break;  }case INTERFACE:{  if (!interfaces.contains(value)) {    throw new XMLStreamException("Unknown interface " + value + " "+ attribute.getLocalName()+ " must be declared in element "+ Element.INTERFACES.getLocalName(),reader.getLocation());  }  binding.get(INTERFACE).set(value);  break;}case PORT:{binding.get(PORT).set(parseBoundedIntegerAttribute(reader,i,0,65535));break;}case FIXED_PORT:{binding.get(FIXED_PORT).set(Boolean.parseBoolean(value));break;}case MULTICAST_ADDRESS:{try {final InetAddress mcastAddr=InetAddress.getByName(value);if (!mcastAddr.isMulticastAddress()) {throw new XMLStreamException("Value " + value + " for attribute "+ attribute.getLocalName()+ " is not a valid multicast address",reader.getLocation());}binding.get(MULTICAST_ADDRESS).set(value);break;} catch (final UnknownHostException e) {throw new XMLStreamException("Value " + value + " for attribute "+ attribute.getLocalName()+ " is not a valid multicast address",reader.getLocation(),e);}break;}case MULTICAST_PORT:{binding.get(MULTICAST_PORT).set(parseBoundedIntegerAttribute(reader,i,1,65535));required.remove(Attribute.PORT);break;}default :throw unexpectedAttribute(reader,i);} @AT@ 82577 @LENGTH@ 2426
---INS BreakStatement@@ @TO@ SwitchStatement@@switch (attribute) {case NAME:{    name=value;    binding.get(OP_ADDR).set(address).add(SOCKET_BINDING,name);    break;  }case INTERFACE:{  if (!interfaces.contains(value)) {    throw new XMLStreamException("Unknown interface " + value + " "+ attribute.getLocalName()+ " must be declared in element "+ Element.INTERFACES.getLocalName(),reader.getLocation());  }  binding.get(INTERFACE).set(value);  break;}case PORT:{binding.get(PORT).set(parseBoundedIntegerAttribute(reader,i,0,65535));break;}case FIXED_PORT:{binding.get(FIXED_PORT).set(Boolean.parseBoolean(value));break;}case MULTICAST_ADDRESS:{try {final InetAddress mcastAddr=InetAddress.getByName(value);if (!mcastAddr.isMulticastAddress()) {throw new XMLStreamException("Value " + value + " for attribute "+ attribute.getLocalName()+ " is not a valid multicast address",reader.getLocation());}binding.get(MULTICAST_ADDRESS).set(value);break;} catch (final UnknownHostException e) {throw new XMLStreamException("Value " + value + " for attribute "+ attribute.getLocalName()+ " is not a valid multicast address",reader.getLocation(),e);}}case MULTICAST_PORT:{binding.get(MULTICAST_PORT).set(parseBoundedIntegerAttribute(reader,i,1,65535));break;}default :throw unexpectedAttribute(reader,i);} @AT@ 84693 @LENGTH@ 6
---INS ExpressionStatement@@MethodInvocation:required.remove(Attribute.PORT) @TO@ SwitchStatement@@switch (attribute) {case NAME:{    name=value;    binding.get(OP_ADDR).set(address).add(SOCKET_BINDING,name);    break;  }case INTERFACE:{  if (!interfaces.contains(value)) {    throw new XMLStreamException("Unknown interface " + value + " "+ attribute.getLocalName()+ " must be declared in element "+ Element.INTERFACES.getLocalName(),reader.getLocation());  }  binding.get(INTERFACE).set(value);  break;}case PORT:{binding.get(PORT).set(parseBoundedIntegerAttribute(reader,i,0,65535));break;}case FIXED_PORT:{binding.get(FIXED_PORT).set(Boolean.parseBoolean(value));break;}case MULTICAST_ADDRESS:{try {final InetAddress mcastAddr=InetAddress.getByName(value);if (!mcastAddr.isMulticastAddress()) {throw new XMLStreamException("Value " + value + " for attribute "+ attribute.getLocalName()+ " is not a valid multicast address",reader.getLocation());}binding.get(MULTICAST_ADDRESS).set(value);break;} catch (final UnknownHostException e) {throw new XMLStreamException("Value " + value + " for attribute "+ attribute.getLocalName()+ " is not a valid multicast address",reader.getLocation(),e);}}case MULTICAST_PORT:{binding.get(MULTICAST_PORT).set(parseBoundedIntegerAttribute(reader,i,1,65535));break;}default :throw unexpectedAttribute(reader,i);} @AT@ 84897 @LENGTH@ 32
------INS MethodInvocation@@required.remove(Attribute.PORT) @TO@ ExpressionStatement@@MethodInvocation:required.remove(Attribute.PORT) @AT@ 84897 @LENGTH@ 31
---------INS SimpleName@@Name:required @TO@ MethodInvocation@@required.remove(Attribute.PORT) @AT@ 84897 @LENGTH@ 8
---------INS SimpleName@@MethodName:remove:[Attribute.PORT] @TO@ MethodInvocation@@required.remove(Attribute.PORT) @AT@ 84906 @LENGTH@ 22
------------INS QualifiedName@@Attribute.PORT @TO@ SimpleName@@MethodName:remove:[Attribute.PORT] @AT@ 84913 @LENGTH@ 14
---------------INS SimpleName@@Attribute @TO@ QualifiedName@@Attribute.PORT @AT@ 84913 @LENGTH@ 9
---------------INS SimpleName@@PORT @TO@ QualifiedName@@Attribute.PORT @AT@ 84923 @LENGTH@ 4


DEL ExpressionStatement@@MethodInvocation:DeploymentUpdateService.addService(batchBuilder,updates,serverStartupListener) @AT@ 4805 @LENGTH@ 81
---DEL MethodInvocation@@DeploymentUpdateService.addService(batchBuilder,updates,serverStartupListener) @AT@ 4805 @LENGTH@ 80
------DEL SimpleName@@Name:DeploymentUpdateService @AT@ 4805 @LENGTH@ 23
------DEL SimpleName@@MethodName:addService:[batchBuilder, updates, serverStartupListener] @AT@ 4829 @LENGTH@ 56
---------DEL SimpleName@@batchBuilder @AT@ 4840 @LENGTH@ 12
---------DEL SimpleName@@updates @AT@ 4854 @LENGTH@ 7
---------DEL SimpleName@@serverStartupListener @AT@ 4863 @LENGTH@ 21


UPD VariableDeclarationStatement@@OperationResult handlerResult=null; @TO@ OperationResult handlerResult=new BasicOperationResult(); @AT@ 11187 @LENGTH@ 37
---UPD VariableDeclarationFragment@@handlerResult=null @TO@ handlerResult=new BasicOperationResult() @AT@ 11203 @LENGTH@ 20
------INS ClassInstanceCreation@@BasicOperationResult[] @TO@ VariableDeclarationFragment@@handlerResult=null @AT@ 11219 @LENGTH@ 26
---------INS New@@new @TO@ ClassInstanceCreation@@BasicOperationResult[] @AT@ 11219 @LENGTH@ 3
---------INS SimpleType@@BasicOperationResult @TO@ ClassInstanceCreation@@BasicOperationResult[] @AT@ 11223 @LENGTH@ 20
------DEL NullLiteral@@null @AT@ 11219 @LENGTH@ 4


UPD MethodDeclaration@@public, boolean, MethodName:canAppearNext, CommandContext ctx,  @TO@ public, boolean, MethodName:canAppearNext, CommandContext ctx, CommandFormatException,  @AT@ 2228 @LENGTH@ 207
---INS SimpleType@@CommandFormatException @TO@ MethodDeclaration@@public, boolean, MethodName:canAppearNext, CommandContext ctx,  @AT@ 2284 @LENGTH@ 22


UPD MethodDeclaration@@void, MethodName:handle, CommandContext ctx,  @TO@ void, MethodName:handle, CommandContext ctx, CommandFormatException,  @AT@ 1954 @LENGTH@ 27
---INS SimpleType@@CommandFormatException @TO@ MethodDeclaration@@void, MethodName:handle, CommandContext ctx,  @AT@ 1988 @LENGTH@ 22


UPD IfStatement@@if (future.getError() != null) {  state.getThrowables().add(future.getError());} else {  RepeatStatus status=future.getResult();  result=result && canContinue(status);  executeAfterInterceptors(future.getContext(),status);} @TO@ if (future.getError() != null) {  state.getThrowables().add(future.getError());  result=false;} else {  RepeatStatus status=future.getResult();  result=result && canContinue(status);  executeAfterInterceptors(future.getContext(),status);} @AT@ 6352 @LENGTH@ 251
---UPD Block@@ThenBody:{  state.getThrowables().add(future.getError());} @TO@ ThenBody:{  state.getThrowables().add(future.getError());  result=false;} @AT@ 6383 @LENGTH@ 56
------INS ExpressionStatement@@Assignment:result=false @TO@ Block@@ThenBody:{  state.getThrowables().add(future.getError());} @AT@ 6439 @LENGTH@ 15
---------INS Assignment@@result=false @TO@ ExpressionStatement@@Assignment:result=false @AT@ 6439 @LENGTH@ 14
------------INS SimpleName@@result @TO@ Assignment@@result=false @AT@ 6439 @LENGTH@ 6
------------INS Operator@@= @TO@ Assignment@@result=false @AT@ 6445 @LENGTH@ 1
------------INS BooleanLiteral@@false @TO@ Assignment@@result=false @AT@ 6448 @LENGTH@ 5


INS ExpressionStatement@@Assignment:fragmentRootName=null @TO@ MethodDeclaration@@public, void, MethodName:reset,  @AT@ 5572 @LENGTH@ 24
---INS Assignment@@fragmentRootName=null @TO@ ExpressionStatement@@Assignment:fragmentRootName=null @AT@ 5572 @LENGTH@ 23
------INS SimpleName@@fragmentRootName @TO@ Assignment@@fragmentRootName=null @AT@ 5572 @LENGTH@ 16
------INS Operator@@= @TO@ Assignment@@fragmentRootName=null @AT@ 5588 @LENGTH@ 1
------INS NullLiteral@@null @TO@ Assignment@@fragmentRootName=null @AT@ 5591 @LENGTH@ 4


UPD CatchClause@@catch (OperationFormatException e) {  Assert.fail(e.getLocalizedMessage());} @TO@ catch (CommandFormatException e) {  Assert.fail(e.getLocalizedMessage());} @AT@ 3827 @LENGTH@ 96
---UPD SingleVariableDeclaration@@OperationFormatException e @TO@ CommandFormatException e @AT@ 3834 @LENGTH@ 26
------UPD SimpleType@@OperationFormatException @TO@ CommandFormatException @AT@ 3834 @LENGTH@ 24


UPD ReturnStatement@@InfixExpression:"https://github.com/" + providerAccountId @TO@ MethodInvocation:github.getProfileUrl() @AT@ 1802 @LENGTH@ 49
---DEL InfixExpression@@"https://github.com/" + providerAccountId @AT@ 1809 @LENGTH@ 41
------DEL StringLiteral@@"https://github.com/" @AT@ 1809 @LENGTH@ 21
------DEL Operator@@+ @AT@ 1830 @LENGTH@ 1
------DEL SimpleName@@providerAccountId @AT@ 1833 @LENGTH@ 17
---INS MethodInvocation@@github.getProfileUrl() @TO@ ReturnStatement@@InfixExpression:"https://github.com/" + providerAccountId @AT@ 1809 @LENGTH@ 22
------INS SimpleName@@Name:github @TO@ MethodInvocation@@github.getProfileUrl() @AT@ 1809 @LENGTH@ 6
------INS SimpleName@@MethodName:getProfileUrl:[] @TO@ MethodInvocation@@github.getProfileUrl() @AT@ 1816 @LENGTH@ 15


INS VariableDeclarationStatement@@final Set<BindingConfiguration> bindingConfigurations=new HashSet<BindingConfiguration>(moduleConfiguration.getBindingConfigurations()); @TO@ MethodDeclaration@@public, void, MethodName:deploy, DeploymentPhaseContext phaseContext, DeploymentUnitProcessingException,  @AT@ 2475 @LENGTH@ 138
---INS Modifier@@final @TO@ VariableDeclarationStatement@@final Set<BindingConfiguration> bindingConfigurations=new HashSet<BindingConfiguration>(moduleConfiguration.getBindingConfigurations()); @AT@ 2475 @LENGTH@ 5
---INS ParameterizedType@@Set<BindingConfiguration> @TO@ VariableDeclarationStatement@@final Set<BindingConfiguration> bindingConfigurations=new HashSet<BindingConfiguration>(moduleConfiguration.getBindingConfigurations()); @AT@ 2481 @LENGTH@ 25
------INS SimpleType@@Set @TO@ ParameterizedType@@Set<BindingConfiguration> @AT@ 2481 @LENGTH@ 3
------INS SimpleType@@BindingConfiguration @TO@ ParameterizedType@@Set<BindingConfiguration> @AT@ 2485 @LENGTH@ 20
---INS VariableDeclarationFragment@@bindingConfigurations=new HashSet<BindingConfiguration>(moduleConfiguration.getBindingConfigurations()) @TO@ VariableDeclarationStatement@@final Set<BindingConfiguration> bindingConfigurations=new HashSet<BindingConfiguration>(moduleConfiguration.getBindingConfigurations()); @AT@ 2507 @LENGTH@ 105
------INS SimpleName@@bindingConfigurations @TO@ VariableDeclarationFragment@@bindingConfigurations=new HashSet<BindingConfiguration>(moduleConfiguration.getBindingConfigurations()) @AT@ 2507 @LENGTH@ 21
------INS ClassInstanceCreation@@HashSet<BindingConfiguration>[moduleConfiguration.getBindingConfigurations()] @TO@ VariableDeclarationFragment@@bindingConfigurations=new HashSet<BindingConfiguration>(moduleConfiguration.getBindingConfigurations()) @AT@ 2531 @LENGTH@ 81
---------INS New@@new @TO@ ClassInstanceCreation@@HashSet<BindingConfiguration>[moduleConfiguration.getBindingConfigurations()] @AT@ 2531 @LENGTH@ 3
---------INS ParameterizedType@@HashSet<BindingConfiguration> @TO@ ClassInstanceCreation@@HashSet<BindingConfiguration>[moduleConfiguration.getBindingConfigurations()] @AT@ 2535 @LENGTH@ 29
------------INS SimpleType@@HashSet @TO@ ParameterizedType@@HashSet<BindingConfiguration> @AT@ 2535 @LENGTH@ 7
------------INS SimpleType@@BindingConfiguration @TO@ ParameterizedType@@HashSet<BindingConfiguration> @AT@ 2543 @LENGTH@ 20
---------INS MethodInvocation@@moduleConfiguration.getBindingConfigurations() @TO@ ClassInstanceCreation@@HashSet<BindingConfiguration>[moduleConfiguration.getBindingConfigurations()] @AT@ 2565 @LENGTH@ 46
------------INS SimpleName@@Name:moduleConfiguration @TO@ MethodInvocation@@moduleConfiguration.getBindingConfigurations() @AT@ 2565 @LENGTH@ 19
------------INS SimpleName@@MethodName:getBindingConfigurations:[] @TO@ MethodInvocation@@moduleConfiguration.getBindingConfigurations() @AT@ 2585 @LENGTH@ 26


INS IfStatement@@if (resourceRoot != null) {  final Closeable mountHandle=resourceRoot.getMountHandle();  VFSUtils.safeClose(mountHandle);} @TO@ MethodDeclaration@@public, void, MethodName:undeploy, DeploymentUnit context,  @AT@ 3625 @LENGTH@ 155
---INS InfixExpression@@resourceRoot != null @TO@ IfStatement@@if (resourceRoot != null) {  final Closeable mountHandle=resourceRoot.getMountHandle();  VFSUtils.safeClose(mountHandle);} @AT@ 3629 @LENGTH@ 20
------INS SimpleName@@resourceRoot @TO@ InfixExpression@@resourceRoot != null @AT@ 3629 @LENGTH@ 12
------INS Operator@@!= @TO@ InfixExpression@@resourceRoot != null @AT@ 3641 @LENGTH@ 2
------INS NullLiteral@@null @TO@ InfixExpression@@resourceRoot != null @AT@ 3645 @LENGTH@ 4
---INS Block@@ThenBody:{  final Closeable mountHandle=resourceRoot.getMountHandle();  VFSUtils.safeClose(mountHandle);} @TO@ IfStatement@@if (resourceRoot != null) {  final Closeable mountHandle=resourceRoot.getMountHandle();  VFSUtils.safeClose(mountHandle);} @AT@ 3651 @LENGTH@ 129
------MOV VariableDeclarationStatement@@final Closeable mountHandle=resourceRoot.getMountHandle(); @TO@ Block@@ThenBody:{  final Closeable mountHandle=resourceRoot.getMountHandle();  VFSUtils.safeClose(mountHandle);} @AT@ 3622 @LENGTH@ 60
------MOV ExpressionStatement@@MethodInvocation:VFSUtils.safeClose(mountHandle) @TO@ Block@@ThenBody:{  final Closeable mountHandle=resourceRoot.getMountHandle();  VFSUtils.safeClose(mountHandle);} @AT@ 3691 @LENGTH@ 32


INS MethodDeclaration@@protected, void, MethodName:setupServices, BatchBuilder batchBuilder, Exception,  @TO@ TypeDeclaration@@[public]DeploymentUnitTestCase, AbstractDeploymentTest @AT@ 1710 @LENGTH@ 317
---INS Modifier@@protected @TO@ MethodDeclaration@@protected, void, MethodName:setupServices, BatchBuilder batchBuilder, Exception,  @AT@ 1710 @LENGTH@ 9
---INS PrimitiveType@@void @TO@ MethodDeclaration@@protected, void, MethodName:setupServices, BatchBuilder batchBuilder, Exception,  @AT@ 1720 @LENGTH@ 4
---INS SimpleName@@MethodName:setupServices @TO@ MethodDeclaration@@protected, void, MethodName:setupServices, BatchBuilder batchBuilder, Exception,  @AT@ 1725 @LENGTH@ 13
---INS SingleVariableDeclaration@@BatchBuilder batchBuilder @TO@ MethodDeclaration@@protected, void, MethodName:setupServices, BatchBuilder batchBuilder, Exception,  @AT@ 1739 @LENGTH@ 25
------INS SimpleType@@BatchBuilder @TO@ SingleVariableDeclaration@@BatchBuilder batchBuilder @AT@ 1739 @LENGTH@ 12
------INS SimpleName@@batchBuilder @TO@ SingleVariableDeclaration@@BatchBuilder batchBuilder @AT@ 1752 @LENGTH@ 12
---INS SimpleType@@Exception @TO@ MethodDeclaration@@protected, void, MethodName:setupServices, BatchBuilder batchBuilder, Exception,  @AT@ 1773 @LENGTH@ 9
---INS ExpressionStatement@@SuperMethodInvocation:super.setupServices(batchBuilder) @TO@ MethodDeclaration@@protected, void, MethodName:setupServices, BatchBuilder batchBuilder, Exception,  @AT@ 1793 @LENGTH@ 34
------INS SuperMethodInvocation@@super.setupServices(batchBuilder) @TO@ ExpressionStatement@@SuperMethodInvocation:super.setupServices(batchBuilder) @AT@ 1793 @LENGTH@ 33
---------INS SimpleName@@MethodName:setupServices:[batchBuilder] @TO@ SuperMethodInvocation@@super.setupServices(batchBuilder) @AT@ 1799 @LENGTH@ 13
---------INS SimpleName@@batchBuilder @TO@ SuperMethodInvocation@@super.setupServices(batchBuilder) @AT@ 1813 @LENGTH@ 12
---INS VariableDeclarationStatement@@final DeploymentChain deploymentChain=new DeploymentChainImpl(); @TO@ MethodDeclaration@@protected, void, MethodName:setupServices, BatchBuilder batchBuilder, Exception,  @AT@ 1837 @LENGTH@ 66
------INS Modifier@@final @TO@ VariableDeclarationStatement@@final DeploymentChain deploymentChain=new DeploymentChainImpl(); @AT@ 1837 @LENGTH@ 5
------INS SimpleType@@DeploymentChain @TO@ VariableDeclarationStatement@@final DeploymentChain deploymentChain=new DeploymentChainImpl(); @AT@ 1843 @LENGTH@ 15
------INS VariableDeclarationFragment@@deploymentChain=new DeploymentChainImpl() @TO@ VariableDeclarationStatement@@final DeploymentChain deploymentChain=new DeploymentChainImpl(); @AT@ 1859 @LENGTH@ 43
---------INS SimpleName@@deploymentChain @TO@ VariableDeclarationFragment@@deploymentChain=new DeploymentChainImpl() @AT@ 1859 @LENGTH@ 15
---------INS ClassInstanceCreation@@DeploymentChainImpl[] @TO@ VariableDeclarationFragment@@deploymentChain=new DeploymentChainImpl() @AT@ 1877 @LENGTH@ 25
------------INS New@@new @TO@ ClassInstanceCreation@@DeploymentChainImpl[] @AT@ 1877 @LENGTH@ 3
------------INS SimpleType@@DeploymentChainImpl @TO@ ClassInstanceCreation@@DeploymentChainImpl[] @AT@ 1881 @LENGTH@ 19
---INS ExpressionStatement@@MethodInvocation:batchBuilder.addService(DeploymentChain.SERVICE_NAME,new DeploymentChainService(deploymentChain)).install() @TO@ MethodDeclaration@@protected, void, MethodName:setupServices, BatchBuilder batchBuilder, Exception,  @AT@ 1912 @LENGTH@ 109
------INS MethodInvocation@@batchBuilder.addService(DeploymentChain.SERVICE_NAME,new DeploymentChainService(deploymentChain)).install() @TO@ ExpressionStatement@@MethodInvocation:batchBuilder.addService(DeploymentChain.SERVICE_NAME,new DeploymentChainService(deploymentChain)).install() @AT@ 1912 @LENGTH@ 108
---------INS MethodInvocation@@MethodName:addService:[DeploymentChain.SERVICE_NAME, new DeploymentChainService(deploymentChain)] @TO@ MethodInvocation@@batchBuilder.addService(DeploymentChain.SERVICE_NAME,new DeploymentChainService(deploymentChain)).install() @AT@ 1912 @LENGTH@ 98
------------INS QualifiedName@@DeploymentChain.SERVICE_NAME @TO@ MethodInvocation@@MethodName:addService:[DeploymentChain.SERVICE_NAME, new DeploymentChainService(deploymentChain)] @AT@ 1936 @LENGTH@ 28
---------------INS SimpleName@@DeploymentChain @TO@ QualifiedName@@DeploymentChain.SERVICE_NAME @AT@ 1936 @LENGTH@ 15
---------------INS SimpleName@@SERVICE_NAME @TO@ QualifiedName@@DeploymentChain.SERVICE_NAME @AT@ 1952 @LENGTH@ 12
------------INS ClassInstanceCreation@@DeploymentChainService[deploymentChain] @TO@ MethodInvocation@@MethodName:addService:[DeploymentChain.SERVICE_NAME, new DeploymentChainService(deploymentChain)] @AT@ 1966 @LENGTH@ 43
---------------INS New@@new @TO@ ClassInstanceCreation@@DeploymentChainService[deploymentChain] @AT@ 1966 @LENGTH@ 3
---------------INS SimpleType@@DeploymentChainService @TO@ ClassInstanceCreation@@DeploymentChainService[deploymentChain] @AT@ 1970 @LENGTH@ 22
---------------INS SimpleName@@deploymentChain @TO@ ClassInstanceCreation@@DeploymentChainService[deploymentChain] @AT@ 1993 @LENGTH@ 15
---------INS SimpleName@@Name:batchBuilder @TO@ MethodInvocation@@batchBuilder.addService(DeploymentChain.SERVICE_NAME,new DeploymentChainService(deploymentChain)).install() @AT@ 1912 @LENGTH@ 12
---------INS SimpleName@@MethodName:install:[] @TO@ MethodInvocation@@batchBuilder.addService(DeploymentChain.SERVICE_NAME,new DeploymentChainService(deploymentChain)).install() @AT@ 2011 @LENGTH@ 9


INS ReturnStatement@@NullLiteral:null @TO@ MethodDeclaration@@protected, AbstractComponentInstance, MethodName:constructComponentInstance, Object instance,  @AT@ 2496 @LENGTH@ 12
---INS NullLiteral@@null @TO@ ReturnStatement@@NullLiteral:null @AT@ 2503 @LENGTH@ 4


UPD ExpressionStatement@@MethodInvocation:ServerControllerModelUtil.initOperations(getRegistry(),new DeploymentRepository(){
  @Override public boolean hasDeploymentContent(  byte[] hash){
    return false;
  }
  @Override public byte[] addDeploymentContent(  InputStream stream) throws IOException {
    return null;
  }
}
,configurationPersister) @TO@ MethodInvocation:ServerControllerModelUtil.initOperations(getRegistry(),new DeploymentRepository(){
  @Override public boolean hasDeploymentContent(  byte[] hash){
    return false;
  }
  @Override public byte[] addDeploymentContent(  InputStream stream) throws IOException {
    return null;
  }
}
,configurationPersister,null) @AT@ 16676 @LENGTH@ 573
---UPD MethodInvocation@@ServerControllerModelUtil.initOperations(getRegistry(),new DeploymentRepository(){
  @Override public boolean hasDeploymentContent(  byte[] hash){
    return false;
  }
  @Override public byte[] addDeploymentContent(  InputStream stream) throws IOException {
    return null;
  }
}
,configurationPersister) @TO@ ServerControllerModelUtil.initOperations(getRegistry(),new DeploymentRepository(){
  @Override public boolean hasDeploymentContent(  byte[] hash){
    return false;
  }
  @Override public byte[] addDeploymentContent(  InputStream stream) throws IOException {
    return null;
  }
}
,configurationPersister,null) @AT@ 16676 @LENGTH@ 572
------UPD SimpleName@@MethodName:initOperations:[getRegistry(), new DeploymentRepository(){
  @Override public boolean hasDeploymentContent(  byte[] hash){
    return false;
  }
  @Override public byte[] addDeploymentContent(  InputStream stream) throws IOException {
    return null;
  }
}
, configurationPersister] @TO@ MethodName:initOperations:[getRegistry(), new DeploymentRepository(){
  @Override public boolean hasDeploymentContent(  byte[] hash){
    return false;
  }
  @Override public byte[] addDeploymentContent(  InputStream stream) throws IOException {
    return null;
  }
}
, configurationPersister, null] @AT@ 16702 @LENGTH@ 546
---------INS NullLiteral@@null @TO@ SimpleName@@MethodName:initOperations:[getRegistry(), new DeploymentRepository(){
  @Override public boolean hasDeploymentContent(  byte[] hash){
    return false;
  }
  @Override public byte[] addDeploymentContent(  InputStream stream) throws IOException {
    return null;
  }
}
, configurationPersister] @AT@ 17324 @LENGTH@ 4


UPD ExpressionStatement@@MethodInvocation:from("direct:marshalled").unmarshal(example).to("mock:result") @TO@ MethodInvocation:from("direct:marshalled").unmarshal().jaxb("org.apache.camel.example").to("mock:result") @AT@ 3334 @LENGTH@ 149
---UPD MethodInvocation@@from("direct:marshalled").unmarshal(example).to("mock:result") @TO@ from("direct:marshalled").unmarshal().jaxb("org.apache.camel.example").to("mock:result") @AT@ 3334 @LENGTH@ 148
------INS MethodInvocation@@MethodName:jaxb:["org.apache.camel.example"] @TO@ MethodInvocation@@from("direct:marshalled").unmarshal(example).to("mock:result") @AT@ 3334 @LENGTH@ 95
---------INS StringLiteral@@"org.apache.camel.example" @TO@ MethodInvocation@@MethodName:jaxb:["org.apache.camel.example"] @AT@ 3402 @LENGTH@ 26
------UPD MethodInvocation@@MethodName:unmarshal:[example] @TO@ MethodName:unmarshal:[] @AT@ 3334 @LENGTH@ 69
---------DEL SimpleName@@example @AT@ 3395 @LENGTH@ 7


UPD MethodDeclaration@@protected, final, CriteriaQuery<Object>, MethodName:finalize, Predicate predicate, Sort sort,  @TO@ protected, final, CriteriaQuery<Object>, MethodName:complete, Predicate predicate, Sort sort,  @AT@ 3815 @LENGTH@ 157
---UPD SimpleName@@MethodName:finalize @TO@ MethodName:complete @AT@ 3853 @LENGTH@ 8
---UPD ReturnStatement@@MethodInvocation:finalize(predicate,sort,query,builder) @TO@ MethodInvocation:complete(predicate,sort,query,builder) @AT@ 3917 @LENGTH@ 49
------UPD MethodInvocation@@finalize(predicate,sort,query,builder) @TO@ complete(predicate,sort,query,builder) @AT@ 3924 @LENGTH@ 41
---------UPD SimpleName@@MethodName:finalize:[predicate, sort, query, builder] @TO@ MethodName:complete:[predicate, sort, query, builder] @AT@ 3924 @LENGTH@ 41


UPD EnhancedForStatement@@for (String item : items) {  final String extensionName=mainAttributes.getValue(item + "-" + EXTENSION_NAME);  if (extensionName == null) {    log.warnf("Extension %s is missing the required manifest attribute %s-%s (skipping extension)",item,item,EXTENSION_NAME);    continue;  }  final String specificationVersion=mainAttributes.getValue(item + "-" + SPECIFICATION_VERSION);  final String implementationVersion=mainAttributes.getValue(item + "-" + IMPLEMENTATION_VERSION);  final String implementationVendorId=mainAttributes.getValue(item + "-" + IMPLEMENTATION_VENDOR_ID);  final String implementationUrl=mainAttributes.getValue(item + "-" + IMPLEMENTATION_URL);  if (implementationUrl == null) {    log.debugf("Extension %s is missing the required manifest attribute %s-%s",item,item,IMPLEMENTATION_URL);  }  URI implementationUri=null;  try {    implementationUri=new URI(implementationUrl);  } catch (  URISyntaxException e) {    log.warnf("Extension %s URI syntax is invalid: %s",item,e);  }  deploymentUnit.addToAttachmentList(Attachments.EXTENSION_LIST_ENTRIES,new ExtensionListEntry(item,extensionName,specificationVersion,implementationVersion,implementationVendorId,implementationUri));  added=true;} @TO@ for (String item : items) {  final String extensionName=mainAttributes.getValue(item + "-" + EXTENSION_NAME);  if (extensionName == null) {    log.warnf("Extension %s is missing the required manifest attribute %s-%s (skipping extension)",item,item,EXTENSION_NAME);    continue;  }  final String specificationVersion=mainAttributes.getValue(item + "-" + SPECIFICATION_VERSION);  final String implementationVersion=mainAttributes.getValue(item + "-" + IMPLEMENTATION_VERSION);  final String implementationVendorId=mainAttributes.getValue(item + "-" + IMPLEMENTATION_VENDOR_ID);  final String implementationUrl=mainAttributes.getValue(item + "-" + IMPLEMENTATION_URL);  URI implementationUri=null;  if (implementationUrl == null) {    log.debugf("Extension %s is missing the required manifest attribute %s-%s",item,item,IMPLEMENTATION_URL);  } else   try {    implementationUri=new URI(implementationUrl);  } catch (  URISyntaxException e) {    log.warnf("Extension %s URI syntax is invalid: %s",item,e);  }  deploymentUnit.addToAttachmentList(Attachments.EXTENSION_LIST_ENTRIES,new ExtensionListEntry(item,extensionName,specificationVersion,implementationVersion,implementationVendorId,implementationUri));  added=true;} @AT@ 2793 @LENGTH@ 1479
---UPD IfStatement@@if (implementationUrl == null) {  log.debugf("Extension %s is missing the required manifest attribute %s-%s",item,item,IMPLEMENTATION_URL);} @TO@ if (implementationUrl == null) {  log.debugf("Extension %s is missing the required manifest attribute %s-%s",item,item,IMPLEMENTATION_URL);} else try {  implementationUri=new URI(implementationUrl);} catch (URISyntaxException e) {  log.warnf("Extension %s URI syntax is invalid: %s",item,e);} @AT@ 3587 @LENGTH@ 171
------INS Block@@ElseBody:try {  implementationUri=new URI(implementationUrl);} catch (URISyntaxException e) {  log.warnf("Extension %s URI syntax is invalid: %s",item,e);} @TO@ IfStatement@@if (implementationUrl == null) {  log.debugf("Extension %s is missing the required manifest attribute %s-%s",item,item,IMPLEMENTATION_URL);} @AT@ 3752 @LENGTH@ 206
---------MOV TryStatement@@try {  implementationUri=new URI(implementationUrl);} catch (URISyntaxException e) {  log.warnf("Extension %s URI syntax is invalid: %s",item,e);} @TO@ Block@@ElseBody:try {  implementationUri=new URI(implementationUrl);} catch (URISyntaxException e) {  log.warnf("Extension %s URI syntax is invalid: %s",item,e);} @AT@ 3813 @LENGTH@ 206
---MOV IfStatement@@if (implementationUrl == null) {  log.debugf("Extension %s is missing the required manifest attribute %s-%s",item,item,IMPLEMENTATION_URL);} @TO@ EnhancedForStatement@@for (String item : items) {  final String extensionName=mainAttributes.getValue(item + "-" + EXTENSION_NAME);  if (extensionName == null) {    log.warnf("Extension %s is missing the required manifest attribute %s-%s (skipping extension)",item,item,EXTENSION_NAME);    continue;  }  final String specificationVersion=mainAttributes.getValue(item + "-" + SPECIFICATION_VERSION);  final String implementationVersion=mainAttributes.getValue(item + "-" + IMPLEMENTATION_VERSION);  final String implementationVendorId=mainAttributes.getValue(item + "-" + IMPLEMENTATION_VENDOR_ID);  final String implementationUrl=mainAttributes.getValue(item + "-" + IMPLEMENTATION_URL);  if (implementationUrl == null) {    log.debugf("Extension %s is missing the required manifest attribute %s-%s",item,item,IMPLEMENTATION_URL);  }  URI implementationUri=null;  try {    implementationUri=new URI(implementationUrl);  } catch (  URISyntaxException e) {    log.warnf("Extension %s URI syntax is invalid: %s",item,e);  }  deploymentUnit.addToAttachmentList(Attachments.EXTENSION_LIST_ENTRIES,new ExtensionListEntry(item,extensionName,specificationVersion,implementationVersion,implementationVendorId,implementationUri));  added=true;} @AT@ 3587 @LENGTH@ 171


INS FieldDeclaration@@private, final, List<BindingConfiguration>, [bindingConfigurations=new ArrayList<BindingConfiguration>()] @TO@ TypeDeclaration@@[public]ComponentDescription,  @AT@ 4557 @LENGTH@ 103
---INS Modifier@@private @TO@ FieldDeclaration@@private, final, List<BindingConfiguration>, [bindingConfigurations=new ArrayList<BindingConfiguration>()] @AT@ 4557 @LENGTH@ 7
---INS Modifier@@final @TO@ FieldDeclaration@@private, final, List<BindingConfiguration>, [bindingConfigurations=new ArrayList<BindingConfiguration>()] @AT@ 4565 @LENGTH@ 5
---INS ParameterizedType@@List<BindingConfiguration> @TO@ FieldDeclaration@@private, final, List<BindingConfiguration>, [bindingConfigurations=new ArrayList<BindingConfiguration>()] @AT@ 4571 @LENGTH@ 26
------INS SimpleType@@List @TO@ ParameterizedType@@List<BindingConfiguration> @AT@ 4571 @LENGTH@ 4
------INS SimpleType@@BindingConfiguration @TO@ ParameterizedType@@List<BindingConfiguration> @AT@ 4576 @LENGTH@ 20
---INS VariableDeclarationFragment@@bindingConfigurations=new ArrayList<BindingConfiguration>() @TO@ FieldDeclaration@@private, final, List<BindingConfiguration>, [bindingConfigurations=new ArrayList<BindingConfiguration>()] @AT@ 4598 @LENGTH@ 61
------INS SimpleName@@bindingConfigurations @TO@ VariableDeclarationFragment@@bindingConfigurations=new ArrayList<BindingConfiguration>() @AT@ 4598 @LENGTH@ 21
------INS ClassInstanceCreation@@ArrayList<BindingConfiguration>[] @TO@ VariableDeclarationFragment@@bindingConfigurations=new ArrayList<BindingConfiguration>() @AT@ 4622 @LENGTH@ 37
---------INS New@@new @TO@ ClassInstanceCreation@@ArrayList<BindingConfiguration>[] @AT@ 4622 @LENGTH@ 3
---------INS ParameterizedType@@ArrayList<BindingConfiguration> @TO@ ClassInstanceCreation@@ArrayList<BindingConfiguration>[] @AT@ 4626 @LENGTH@ 31
------------INS SimpleType@@ArrayList @TO@ ParameterizedType@@ArrayList<BindingConfiguration> @AT@ 4626 @LENGTH@ 9
------------INS SimpleType@@BindingConfiguration @TO@ ParameterizedType@@ArrayList<BindingConfiguration> @AT@ 4636 @LENGTH@ 20


UPD TypeDeclaration@@[public]MongoSynchronization, ResourceHolderSynchronization[TransactionSynchronization] @TO@ MongoSynchronization, ResourceHolderSynchronization<ResourceHolder,Object> @AT@ 269 @LENGTH@ 243
---INS ParameterizedType@@ResourceHolderSynchronization<ResourceHolder,Object> @TO@ TypeDeclaration@@[public]MongoSynchronization, ResourceHolderSynchronization[TransactionSynchronization] @AT@ 229 @LENGTH@ 53
------INS SimpleType@@ResourceHolderSynchronization @TO@ ParameterizedType@@ResourceHolderSynchronization<ResourceHolder,Object> @AT@ 229 @LENGTH@ 29
------INS SimpleType@@ResourceHolder @TO@ ParameterizedType@@ResourceHolderSynchronization<ResourceHolder,Object> @AT@ 259 @LENGTH@ 14
------INS SimpleType@@Object @TO@ ParameterizedType@@ResourceHolderSynchronization<ResourceHolder,Object> @AT@ 275 @LENGTH@ 6
---DEL Modifier@@public @AT@ 269 @LENGTH@ 6
---DEL SimpleType@@ResourceHolderSynchronization @AT@ 311 @LENGTH@ 29
---DEL SimpleType@@TransactionSynchronization @AT@ 354 @LENGTH@ 26


UPD Block@@ElseBody:{  deploymentRoot=VFS.getChild("content/" + deploymentRuntimeName);  boolean failed=false;  Closeable handle=null;  try {    final boolean mountExploded=deploymentName.endsWith("war");    handle=serverDeploymentRepository.mountDeploymentContent(deploymentName,deploymentRuntimeName,deploymentContents,deploymentRoot,mountExploded);    mountHandle=new MountHandle(handle);  } catch (  IOException e) {    failed=true;    throw new DeploymentUnitProcessingException("Failed to mount deployment content",e);  } finally {    if (failed) {      VFSUtils.safeClose(handle);    }  }} @TO@ ElseBody:{  deploymentRoot=VFS.getChild("content/" + deploymentName);  boolean failed=false;  Closeable handle=null;  try {    final boolean mountExploded=deploymentName.endsWith("war");    handle=serverDeploymentRepository.mountDeploymentContent(deploymentContents,deploymentRoot,mountExploded);    mountHandle=new MountHandle(handle);  } catch (  IOException e) {    failed=true;    throw new DeploymentUnitProcessingException("Failed to mount deployment content",e);  } finally {    if (failed) {      VFSUtils.safeClose(handle);    }  }} @AT@ 3124 @LENGTH@ 852
---UPD ExpressionStatement@@Assignment:deploymentRoot=VFS.getChild("content/" + deploymentRuntimeName) @TO@ Assignment:deploymentRoot=VFS.getChild("content/" + deploymentName) @AT@ 3205 @LENGTH@ 66
------UPD Assignment@@deploymentRoot=VFS.getChild("content/" + deploymentRuntimeName) @TO@ deploymentRoot=VFS.getChild("content/" + deploymentName) @AT@ 3205 @LENGTH@ 65
---------UPD MethodInvocation@@VFS.getChild("content/" + deploymentRuntimeName) @TO@ VFS.getChild("content/" + deploymentName) @AT@ 3222 @LENGTH@ 48
------------UPD SimpleName@@MethodName:getChild:["content/" + deploymentRuntimeName] @TO@ MethodName:getChild:["content/" + deploymentName] @AT@ 3226 @LENGTH@ 44
---------------UPD InfixExpression@@"content/" + deploymentRuntimeName @TO@ "content/" + deploymentName @AT@ 3235 @LENGTH@ 34
------------------UPD SimpleName@@deploymentRuntimeName @TO@ deploymentName @AT@ 3248 @LENGTH@ 21
---UPD TryStatement@@try {  final boolean mountExploded=deploymentName.endsWith("war");  handle=serverDeploymentRepository.mountDeploymentContent(deploymentName,deploymentRuntimeName,deploymentContents,deploymentRoot,mountExploded);  mountHandle=new MountHandle(handle);} catch (IOException e) {  failed=true;  throw new DeploymentUnitProcessingException("Failed to mount deployment content",e);} finally {  if (failed) {    VFSUtils.safeClose(handle);  }} @TO@ try {  final boolean mountExploded=deploymentName.endsWith("war");  handle=serverDeploymentRepository.mountDeploymentContent(deploymentContents,deploymentRoot,mountExploded);  mountHandle=new MountHandle(handle);} catch (IOException e) {  failed=true;  throw new DeploymentUnitProcessingException("Failed to mount deployment content",e);} finally {  if (failed) {    VFSUtils.safeClose(handle);  }} @AT@ 3358 @LENGTH@ 608
------UPD ExpressionStatement@@Assignment:handle=serverDeploymentRepository.mountDeploymentContent(deploymentName,deploymentRuntimeName,deploymentContents,deploymentRoot,mountExploded) @TO@ Assignment:handle=serverDeploymentRepository.mountDeploymentContent(deploymentContents,deploymentRoot,mountExploded) @AT@ 3458 @LENGTH@ 149
---------UPD Assignment@@handle=serverDeploymentRepository.mountDeploymentContent(deploymentName,deploymentRuntimeName,deploymentContents,deploymentRoot,mountExploded) @TO@ handle=serverDeploymentRepository.mountDeploymentContent(deploymentContents,deploymentRoot,mountExploded) @AT@ 3458 @LENGTH@ 148
------------UPD MethodInvocation@@serverDeploymentRepository.mountDeploymentContent(deploymentName,deploymentRuntimeName,deploymentContents,deploymentRoot,mountExploded) @TO@ serverDeploymentRepository.mountDeploymentContent(deploymentContents,deploymentRoot,mountExploded) @AT@ 3467 @LENGTH@ 139
---------------UPD SimpleName@@MethodName:mountDeploymentContent:[deploymentName, deploymentRuntimeName, deploymentContents, deploymentRoot, mountExploded] @TO@ MethodName:mountDeploymentContent:[deploymentContents, deploymentRoot, mountExploded] @AT@ 3494 @LENGTH@ 112
------------------DEL SimpleName@@deploymentName @AT@ 3517 @LENGTH@ 14
------------------DEL SimpleName@@deploymentRuntimeName @AT@ 3533 @LENGTH@ 21


INS ExpressionStatement@@MethodInvocation:subModel.get(HANDLER_TYPE).set(handlerType) @TO@ MethodDeclaration@@public, Cancellable, MethodName:execute, final NewOperationContext context, final ModelNode operation, final ResultHandler resultHandler,  @AT@ 5662 @LENGTH@ 44
---INS MethodInvocation@@subModel.get(HANDLER_TYPE).set(handlerType) @TO@ ExpressionStatement@@MethodInvocation:subModel.get(HANDLER_TYPE).set(handlerType) @AT@ 5662 @LENGTH@ 43
------INS MethodInvocation@@MethodName:get:[HANDLER_TYPE] @TO@ MethodInvocation@@subModel.get(HANDLER_TYPE).set(handlerType) @AT@ 5662 @LENGTH@ 26
---------INS SimpleName@@HANDLER_TYPE @TO@ MethodInvocation@@MethodName:get:[HANDLER_TYPE] @AT@ 5675 @LENGTH@ 12
------INS SimpleName@@Name:subModel @TO@ MethodInvocation@@subModel.get(HANDLER_TYPE).set(handlerType) @AT@ 5662 @LENGTH@ 8
------INS SimpleName@@MethodName:set:[handlerType] @TO@ MethodInvocation@@subModel.get(HANDLER_TYPE).set(handlerType) @AT@ 5689 @LENGTH@ 16
---------INS SimpleName@@handlerType @TO@ SimpleName@@MethodName:set:[handlerType] @AT@ 5693 @LENGTH@ 11


UPD ReturnStatement@@MethodInvocation:new JmxTemplate().execute(getParent(),new JmxTemplate.BundleStateCallback<BundleInfo[]>(){
  public BundleInfo[] doWithBundleState(  BundleStateMBean bundleState) throws Exception {
    TabularData bundles=bundleState.listBundles();
    BundleInfo[] info=new BundleInfo[bundles.size()];
    int i=0;
    for (    Object data : bundles.values().toArray()) {
      info[i++]=new JmxBundleInfo((CompositeData)data);
    }
    Arrays.sort(info,new BundleInfoComparator());
    return info;
  }
}
) @TO@ MethodInvocation:new JmxTemplate().execute(this,new JmxTemplate.BundleStateCallback<BundleInfo[]>(){
  public BundleInfo[] doWithBundleState(  BundleStateMBean bundleState) throws Exception {
    TabularData bundles=bundleState.listBundles();
    BundleInfo[] info=new BundleInfo[bundles.size()];
    int i=0;
    for (    Object data : bundles.values().toArray()) {
      info[i++]=new JmxBundleInfo((CompositeData)data);
    }
    Arrays.sort(info,new BundleInfoComparator());
    return info;
  }
}
) @AT@ 5141 @LENGTH@ 771
---UPD MethodInvocation@@new JmxTemplate().execute(getParent(),new JmxTemplate.BundleStateCallback<BundleInfo[]>(){
  public BundleInfo[] doWithBundleState(  BundleStateMBean bundleState) throws Exception {
    TabularData bundles=bundleState.listBundles();
    BundleInfo[] info=new BundleInfo[bundles.size()];
    int i=0;
    for (    Object data : bundles.values().toArray()) {
      info[i++]=new JmxBundleInfo((CompositeData)data);
    }
    Arrays.sort(info,new BundleInfoComparator());
    return info;
  }
}
) @TO@ new JmxTemplate().execute(this,new JmxTemplate.BundleStateCallback<BundleInfo[]>(){
  public BundleInfo[] doWithBundleState(  BundleStateMBean bundleState) throws Exception {
    TabularData bundles=bundleState.listBundles();
    BundleInfo[] info=new BundleInfo[bundles.size()];
    int i=0;
    for (    Object data : bundles.values().toArray()) {
      info[i++]=new JmxBundleInfo((CompositeData)data);
    }
    Arrays.sort(info,new BundleInfoComparator());
    return info;
  }
}
) @AT@ 5148 @LENGTH@ 763
------UPD SimpleName@@MethodName:execute:[getParent(), new JmxTemplate.BundleStateCallback<BundleInfo[]>(){
  public BundleInfo[] doWithBundleState(  BundleStateMBean bundleState) throws Exception {
    TabularData bundles=bundleState.listBundles();
    BundleInfo[] info=new BundleInfo[bundles.size()];
    int i=0;
    for (    Object data : bundles.values().toArray()) {
      info[i++]=new JmxBundleInfo((CompositeData)data);
    }
    Arrays.sort(info,new BundleInfoComparator());
    return info;
  }
}
] @TO@ MethodName:execute:[this, new JmxTemplate.BundleStateCallback<BundleInfo[]>(){
  public BundleInfo[] doWithBundleState(  BundleStateMBean bundleState) throws Exception {
    TabularData bundles=bundleState.listBundles();
    BundleInfo[] info=new BundleInfo[bundles.size()];
    int i=0;
    for (    Object data : bundles.values().toArray()) {
      info[i++]=new JmxBundleInfo((CompositeData)data);
    }
    Arrays.sort(info,new BundleInfoComparator());
    return info;
  }
}
] @AT@ 5166 @LENGTH@ 745
---------DEL MethodInvocation@@MethodName:getParent:[] @AT@ 5174 @LENGTH@ 11
---------INS ThisExpression@@this @TO@ SimpleName@@MethodName:execute:[getParent(), new JmxTemplate.BundleStateCallback<BundleInfo[]>(){
  public BundleInfo[] doWithBundleState(  BundleStateMBean bundleState) throws Exception {
    TabularData bundles=bundleState.listBundles();
    BundleInfo[] info=new BundleInfo[bundles.size()];
    int i=0;
    for (    Object data : bundles.values().toArray()) {
      info[i++]=new JmxBundleInfo((CompositeData)data);
    }
    Arrays.sort(info,new BundleInfoComparator());
    return info;
  }
}
] @AT@ 5174 @LENGTH@ 4


UPD ExpressionStatement@@MethodInvocation:assertTrue(content.contains("\"http://localhost:8080/springsource/batch/jobs/{jobName}.json\"")) @TO@ MethodInvocation:assertTrue(content.contains("\"http://localhost:8080/springsource/jobs/{jobName}.json\"")) @AT@ 2380 @LENGTH@ 97
---UPD MethodInvocation@@assertTrue(content.contains("\"http://localhost:8080/springsource/batch/jobs/{jobName}.json\"")) @TO@ assertTrue(content.contains("\"http://localhost:8080/springsource/jobs/{jobName}.json\"")) @AT@ 2380 @LENGTH@ 96
------UPD SimpleName@@MethodName:assertTrue:[content.contains("\"http://localhost:8080/springsource/batch/jobs/{jobName}.json\"")] @TO@ MethodName:assertTrue:[content.contains("\"http://localhost:8080/springsource/jobs/{jobName}.json\"")] @AT@ 2380 @LENGTH@ 96
---------UPD MethodInvocation@@content.contains("\"http://localhost:8080/springsource/batch/jobs/{jobName}.json\"") @TO@ content.contains("\"http://localhost:8080/springsource/jobs/{jobName}.json\"") @AT@ 2391 @LENGTH@ 84
------------UPD SimpleName@@MethodName:contains:["\"http://localhost:8080/springsource/batch/jobs/{jobName}.json\""] @TO@ MethodName:contains:["\"http://localhost:8080/springsource/jobs/{jobName}.json\""] @AT@ 2399 @LENGTH@ 76
---------------UPD StringLiteral@@"\"http://localhost:8080/springsource/batch/jobs/{jobName}.json\"" @TO@ "\"http://localhost:8080/springsource/jobs/{jobName}.json\"" @AT@ 2408 @LENGTH@ 66


UPD VariableDeclarationStatement@@final Deployment deployment=OSGiDeploymentAttachment.getAttachment(deploymentUnit); @TO@ final Deployment deployment=OSGiDeploymentAttachment.getDeployment(deploymentUnit); @AT@ 3576 @LENGTH@ 85
---UPD VariableDeclarationFragment@@deployment=OSGiDeploymentAttachment.getAttachment(deploymentUnit) @TO@ deployment=OSGiDeploymentAttachment.getDeployment(deploymentUnit) @AT@ 3593 @LENGTH@ 67
------UPD MethodInvocation@@OSGiDeploymentAttachment.getAttachment(deploymentUnit) @TO@ OSGiDeploymentAttachment.getDeployment(deploymentUnit) @AT@ 3606 @LENGTH@ 54
---------UPD SimpleName@@MethodName:getAttachment:[deploymentUnit] @TO@ MethodName:getDeployment:[deploymentUnit] @AT@ 3631 @LENGTH@ 29


DEL FieldDeclaration@@public, static, final, DescriptionProvider, [DEPLOYMENT_REMOVE=new DescriptionProvider(){
  @Override public ModelNode getModelDescription(  Locale locale){
    return DomainRootDescription.getDeploymentRemoveOperation(locale);
  }
}
] @AT@ 4412 @LENGTH@ 263
---DEL Modifier@@public @AT@ 4412 @LENGTH@ 6
---DEL Modifier@@static @AT@ 4419 @LENGTH@ 6
---DEL Modifier@@final @AT@ 4426 @LENGTH@ 5
---DEL SimpleType@@DescriptionProvider @AT@ 4432 @LENGTH@ 19
---DEL VariableDeclarationFragment@@DEPLOYMENT_REMOVE=new DescriptionProvider(){
  @Override public ModelNode getModelDescription(  Locale locale){
    return DomainRootDescription.getDeploymentRemoveOperation(locale);
  }
}
 @AT@ 4452 @LENGTH@ 222
------DEL SimpleName@@DEPLOYMENT_REMOVE @AT@ 4452 @LENGTH@ 17
------DEL ClassInstanceCreation@@DescriptionProvider[] @AT@ 4472 @LENGTH@ 202
---------DEL New@@new @AT@ 4472 @LENGTH@ 3
---------DEL SimpleType@@DescriptionProvider @AT@ 4476 @LENGTH@ 19
---------DEL AnonymousClassDeclaration@@AnonymousClass @AT@ 4498 @LENGTH@ 176
------------DEL MethodDeclaration@@public, ModelNode, MethodName:getModelDescription, Locale locale,  @AT@ 4526 @LENGTH@ 142
---------------DEL Modifier@@public @AT@ 4526 @LENGTH@ 6
---------------DEL SimpleType@@ModelNode @AT@ 4533 @LENGTH@ 9
---------------DEL SimpleName@@MethodName:getModelDescription @AT@ 4543 @LENGTH@ 19
---------------DEL SingleVariableDeclaration@@Locale locale @AT@ 4563 @LENGTH@ 13
------------------DEL SimpleType@@Locale @AT@ 4563 @LENGTH@ 6
------------------DEL SimpleName@@locale @AT@ 4570 @LENGTH@ 6
---------------DEL ReturnStatement@@MethodInvocation:DomainRootDescription.getDeploymentRemoveOperation(locale) @AT@ 4592 @LENGTH@ 66
------------------DEL MethodInvocation@@DomainRootDescription.getDeploymentRemoveOperation(locale) @AT@ 4599 @LENGTH@ 58
---------------------DEL SimpleName@@Name:DomainRootDescription @AT@ 4599 @LENGTH@ 21
---------------------DEL SimpleName@@MethodName:getDeploymentRemoveOperation:[locale] @AT@ 4621 @LENGTH@ 36
------------------------DEL SimpleName@@locale @AT@ 4650 @LENGTH@ 6


UPD TypeDeclaration@@[@Document, public]GeoLocation,  @TO@ [@Document(collection="geolocation"), public]GeoLocation,  @AT@ 882 @LENGTH@ 366
---INS NormalAnnotation@@@Document(collection="geolocation") @TO@ TypeDeclaration@@[@Document, public]GeoLocation,  @AT@ 882 @LENGTH@ 35
---DEL MarkerAnnotation@@@Document @AT@ 882 @LENGTH@ 9


INS IfStatement@@if (parameters.hasDefined(PROPERTIES)) {  subModel.get(PROPERTIES).set(parameters.get(PROPERTIES));} @TO@ MethodDeclaration@@static, void, MethodName:applyToModel, final ModelNode subModel, final ModelNode parameters,  @AT@ 6366 @LENGTH@ 119
---INS MethodInvocation@@parameters.hasDefined(PROPERTIES) @TO@ IfStatement@@if (parameters.hasDefined(PROPERTIES)) {  subModel.get(PROPERTIES).set(parameters.get(PROPERTIES));} @AT@ 6369 @LENGTH@ 33
------INS SimpleName@@Name:parameters @TO@ MethodInvocation@@parameters.hasDefined(PROPERTIES) @AT@ 6369 @LENGTH@ 10
------INS SimpleName@@MethodName:hasDefined:[PROPERTIES] @TO@ MethodInvocation@@parameters.hasDefined(PROPERTIES) @AT@ 6380 @LENGTH@ 22
---------INS SimpleName@@PROPERTIES @TO@ SimpleName@@MethodName:hasDefined:[PROPERTIES] @AT@ 6391 @LENGTH@ 10
---INS Block@@ThenBody:{  subModel.get(PROPERTIES).set(parameters.get(PROPERTIES));} @TO@ IfStatement@@if (parameters.hasDefined(PROPERTIES)) {  subModel.get(PROPERTIES).set(parameters.get(PROPERTIES));} @AT@ 6404 @LENGTH@ 81
------INS ExpressionStatement@@MethodInvocation:subModel.get(PROPERTIES).set(parameters.get(PROPERTIES)) @TO@ Block@@ThenBody:{  subModel.get(PROPERTIES).set(parameters.get(PROPERTIES));} @AT@ 6418 @LENGTH@ 57
---------INS MethodInvocation@@subModel.get(PROPERTIES).set(parameters.get(PROPERTIES)) @TO@ ExpressionStatement@@MethodInvocation:subModel.get(PROPERTIES).set(parameters.get(PROPERTIES)) @AT@ 6418 @LENGTH@ 56
------------INS MethodInvocation@@MethodName:get:[PROPERTIES] @TO@ MethodInvocation@@subModel.get(PROPERTIES).set(parameters.get(PROPERTIES)) @AT@ 6418 @LENGTH@ 24
---------------INS SimpleName@@PROPERTIES @TO@ MethodInvocation@@MethodName:get:[PROPERTIES] @AT@ 6431 @LENGTH@ 10
------------INS SimpleName@@Name:subModel @TO@ MethodInvocation@@subModel.get(PROPERTIES).set(parameters.get(PROPERTIES)) @AT@ 6418 @LENGTH@ 8
------------INS SimpleName@@MethodName:set:[parameters.get(PROPERTIES)] @TO@ MethodInvocation@@subModel.get(PROPERTIES).set(parameters.get(PROPERTIES)) @AT@ 6443 @LENGTH@ 31
---------------INS MethodInvocation@@parameters.get(PROPERTIES) @TO@ SimpleName@@MethodName:set:[parameters.get(PROPERTIES)] @AT@ 6447 @LENGTH@ 26
------------------INS SimpleName@@Name:parameters @TO@ MethodInvocation@@parameters.get(PROPERTIES) @AT@ 6447 @LENGTH@ 10
------------------INS SimpleName@@MethodName:get:[PROPERTIES] @TO@ MethodInvocation@@parameters.get(PROPERTIES) @AT@ 6458 @LENGTH@ 15
---------------------INS SimpleName@@PROPERTIES @TO@ SimpleName@@MethodName:get:[PROPERTIES] @AT@ 6462 @LENGTH@ 10


UPD ReturnStatement@@MethodInvocation:ID_PROPERTY.equals(delegate.getName()) @TO@ InfixExpression:ID_PROPERTY.equals(delegate.getName()) || ID_KEY.equals(delegate.getName()) @AT@ 3791 @LENGTH@ 46
---INS InfixExpression@@ID_PROPERTY.equals(delegate.getName()) || ID_KEY.equals(delegate.getName()) @TO@ ReturnStatement@@MethodInvocation:ID_PROPERTY.equals(delegate.getName()) @AT@ 3798 @LENGTH@ 75
------MOV MethodInvocation@@ID_PROPERTY.equals(delegate.getName()) @TO@ InfixExpression@@ID_PROPERTY.equals(delegate.getName()) || ID_KEY.equals(delegate.getName()) @AT@ 3798 @LENGTH@ 38
------INS Operator@@|| @TO@ InfixExpression@@ID_PROPERTY.equals(delegate.getName()) || ID_KEY.equals(delegate.getName()) @AT@ 3836 @LENGTH@ 2
------INS MethodInvocation@@ID_KEY.equals(delegate.getName()) @TO@ InfixExpression@@ID_PROPERTY.equals(delegate.getName()) || ID_KEY.equals(delegate.getName()) @AT@ 3840 @LENGTH@ 33
---------INS SimpleName@@Name:ID_KEY @TO@ MethodInvocation@@ID_KEY.equals(delegate.getName()) @AT@ 3840 @LENGTH@ 6
---------INS SimpleName@@MethodName:equals:[delegate.getName()] @TO@ MethodInvocation@@ID_KEY.equals(delegate.getName()) @AT@ 3847 @LENGTH@ 26
------------INS MethodInvocation@@delegate.getName() @TO@ SimpleName@@MethodName:equals:[delegate.getName()] @AT@ 3854 @LENGTH@ 18
---------------INS SimpleName@@Name:delegate @TO@ MethodInvocation@@delegate.getName() @AT@ 3854 @LENGTH@ 8
---------------INS SimpleName@@MethodName:getName:[] @TO@ MethodInvocation@@delegate.getName() @AT@ 3863 @LENGTH@ 9


INS FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @TO@ TypeDeclaration@@[@Deprecated, public]GrantedAuthoritiesContainerImpl, [MutableGrantedAuthoritiesContainer] @AT@ 353 @LENGTH@ 90
---INS Modifier@@private @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @AT@ 353 @LENGTH@ 7
---INS Modifier@@static @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @AT@ 361 @LENGTH@ 6
---INS Modifier@@final @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @AT@ 368 @LENGTH@ 5
---INS PrimitiveType@@long @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @AT@ 374 @LENGTH@ 4
---INS VariableDeclarationFragment@@serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @AT@ 379 @LENGTH@ 63
------INS SimpleName@@serialVersionUID @TO@ VariableDeclarationFragment@@serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID @AT@ 379 @LENGTH@ 16
------INS QualifiedName@@SpringSecurityCoreVersion.SERIAL_VERSION_UID @TO@ VariableDeclarationFragment@@serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID @AT@ 398 @LENGTH@ 44
---------INS SimpleName@@SpringSecurityCoreVersion @TO@ QualifiedName@@SpringSecurityCoreVersion.SERIAL_VERSION_UID @AT@ 398 @LENGTH@ 25
---------INS SimpleName@@SERIAL_VERSION_UID @TO@ QualifiedName@@SpringSecurityCoreVersion.SERIAL_VERSION_UID @AT@ 424 @LENGTH@ 18


MOV FieldDeclaration@@public, static, final, int, [POST_MODULE_WELD_WEB_INTEGRATION=0x0100] @TO@ EnumDeclaration@@[public]Phase,  @AT@ 14481 @LENGTH@ 77


UPD MethodDeclaration@@protected, void, MethodName:doHandle, CommandContext ctx,  @TO@ protected, void, MethodName:doHandle, CommandContext ctx, CommandFormatException,  @AT@ 1791 @LENGTH@ 1319
---INS SimpleType@@CommandFormatException @TO@ MethodDeclaration@@protected, void, MethodName:doHandle, CommandContext ctx,  @AT@ 1890 @LENGTH@ 22


UPD ExpressionStatement@@MethodInvocation:candidate.convertFromText("*",null,include.optionContext()) @TO@ MethodInvocation:candidate.convertFromText("*",paramType,include.optionContext()) @AT@ 22137 @LENGTH@ 62
---UPD MethodInvocation@@candidate.convertFromText("*",null,include.optionContext()) @TO@ candidate.convertFromText("*",paramType,include.optionContext()) @AT@ 22137 @LENGTH@ 61
------UPD SimpleName@@MethodName:convertFromText:["*", null, include.optionContext()] @TO@ MethodName:convertFromText:["*", paramType, include.optionContext()] @AT@ 22147 @LENGTH@ 51
---------INS SimpleName@@paramType @TO@ SimpleName@@MethodName:convertFromText:["*", null, include.optionContext()] @AT@ 22168 @LENGTH@ 9
---------DEL NullLiteral@@null @AT@ 22168 @LENGTH@ 4


UPD ExpressionStatement@@Assignment:newExtDirs[extDirs.length]=new File(serverEnvironment.getServerBaseDir(),"ext/lib") @TO@ Assignment:newExtDirs[extDirs.length]=new File(serverEnvironment.getServerBaseDir(),"lib/ext") @AT@ 8366 @LENGTH@ 87
---UPD Assignment@@newExtDirs[extDirs.length]=new File(serverEnvironment.getServerBaseDir(),"ext/lib") @TO@ newExtDirs[extDirs.length]=new File(serverEnvironment.getServerBaseDir(),"lib/ext") @AT@ 8366 @LENGTH@ 86
------UPD ClassInstanceCreation@@File[serverEnvironment.getServerBaseDir(), "ext/lib"] @TO@ File[serverEnvironment.getServerBaseDir(), "lib/ext"] @AT@ 8395 @LENGTH@ 57
---------UPD StringLiteral@@"ext/lib" @TO@ "lib/ext" @AT@ 8442 @LENGTH@ 9


INS FieldDeclaration@@private, static, final, long, [serialVersionUID=1L] @TO@ TypeDeclaration@@[public]MappingInstantiationException, RuntimeException @AT@ 806 @LENGTH@ 48
---INS Modifier@@private @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=1L] @AT@ 806 @LENGTH@ 7
---INS Modifier@@static @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=1L] @AT@ 814 @LENGTH@ 6
---INS Modifier@@final @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=1L] @AT@ 821 @LENGTH@ 5
---INS PrimitiveType@@long @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=1L] @AT@ 827 @LENGTH@ 4
---INS VariableDeclarationFragment@@serialVersionUID=1L @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=1L] @AT@ 832 @LENGTH@ 21
------INS SimpleName@@serialVersionUID @TO@ VariableDeclarationFragment@@serialVersionUID=1L @AT@ 832 @LENGTH@ 16
------INS NumberLiteral@@1L @TO@ VariableDeclarationFragment@@serialVersionUID=1L @AT@ 851 @LENGTH@ 2


UPD TypeDeclaration@@[public]SingletonComponentCreateService, EJBComponentCreateService @TO@ [public]SingletonComponentCreateService, SessionBeanComponentCreateService @AT@ 1332 @LENGTH@ 605
---UPD SimpleType@@EJBComponentCreateService @TO@ SessionBeanComponentCreateService @AT@ 1385 @LENGTH@ 25


INS TryStatement@@try {  StateParser.parse(operationRequest,stateCallbackHandler,OperationRequestState.INSTANCE);} catch (CommandFormatException e) {  throw new OperationFormatException("Failed to parse operation request '" + operationRequest + "'",e);} @TO@ MethodDeclaration@@public, void, MethodName:parse, String operationRequest, final CallbackHandler handler, OperationFormatException,  @AT@ 8965 @LENGTH@ 278
---MOV ExpressionStatement@@MethodInvocation:StateParser.parse(operationRequest,stateCallbackHandler,OperationRequestState.INSTANCE) @TO@ TryStatement@@try {  StateParser.parse(operationRequest,stateCallbackHandler,OperationRequestState.INSTANCE);} catch (CommandFormatException e) {  throw new OperationFormatException("Failed to parse operation request '" + operationRequest + "'",e);} @AT@ 8917 @LENGTH@ 90
---INS CatchClause@@catch (CommandFormatException e) {  throw new OperationFormatException("Failed to parse operation request '" + operationRequest + "'",e);} @TO@ TryStatement@@try {  StateParser.parse(operationRequest,stateCallbackHandler,OperationRequestState.INSTANCE);} catch (CommandFormatException e) {  throw new OperationFormatException("Failed to parse operation request '" + operationRequest + "'",e);} @AT@ 9084 @LENGTH@ 159
------INS SingleVariableDeclaration@@CommandFormatException e @TO@ CatchClause@@catch (CommandFormatException e) {  throw new OperationFormatException("Failed to parse operation request '" + operationRequest + "'",e);} @AT@ 9091 @LENGTH@ 24
---------INS SimpleType@@CommandFormatException @TO@ SingleVariableDeclaration@@CommandFormatException e @AT@ 9091 @LENGTH@ 22
---------INS SimpleName@@e @TO@ SingleVariableDeclaration@@CommandFormatException e @AT@ 9114 @LENGTH@ 1
------INS ThrowStatement@@ClassInstanceCreation:new OperationFormatException("Failed to parse operation request '" + operationRequest + "'",e) @TO@ CatchClause@@catch (CommandFormatException e) {  throw new OperationFormatException("Failed to parse operation request '" + operationRequest + "'",e);} @AT@ 9131 @LENGTH@ 102
---------INS ClassInstanceCreation@@OperationFormatException["Failed to parse operation request '" + operationRequest + "'", e] @TO@ ThrowStatement@@ClassInstanceCreation:new OperationFormatException("Failed to parse operation request '" + operationRequest + "'",e) @AT@ 9137 @LENGTH@ 95
------------INS New@@new @TO@ ClassInstanceCreation@@OperationFormatException["Failed to parse operation request '" + operationRequest + "'", e] @AT@ 9137 @LENGTH@ 3
------------INS SimpleType@@OperationFormatException @TO@ ClassInstanceCreation@@OperationFormatException["Failed to parse operation request '" + operationRequest + "'", e] @AT@ 9141 @LENGTH@ 24
------------INS InfixExpression@@"Failed to parse operation request '" + operationRequest + "'" @TO@ ClassInstanceCreation@@OperationFormatException["Failed to parse operation request '" + operationRequest + "'", e] @AT@ 9166 @LENGTH@ 62
---------------INS StringLiteral@@"Failed to parse operation request '" @TO@ InfixExpression@@"Failed to parse operation request '" + operationRequest + "'" @AT@ 9166 @LENGTH@ 37
---------------INS Operator@@+ @TO@ InfixExpression@@"Failed to parse operation request '" + operationRequest + "'" @AT@ 9203 @LENGTH@ 1
---------------INS SimpleName@@operationRequest @TO@ InfixExpression@@"Failed to parse operation request '" + operationRequest + "'" @AT@ 9206 @LENGTH@ 16
---------------INS StringLiteral@@"'" @TO@ InfixExpression@@"Failed to parse operation request '" + operationRequest + "'" @AT@ 9225 @LENGTH@ 3
------------INS SimpleName@@e @TO@ ClassInstanceCreation@@OperationFormatException["Failed to parse operation request '" + operationRequest + "'", e] @AT@ 9230 @LENGTH@ 1


UPD ExpressionStatement@@MethodInvocation:activate(deploymentName,runtimeName,deploymentHash,deploymentServiceName,new ServiceActivatorContextImpl(batchBuilder),serviceContainer) @TO@ MethodInvocation:activate(deploymentName,runtimeName,deploymentHash,deploymentServiceName,new ServiceActivatorContextImpl(batchBuilder,serviceContainer),serviceContainer) @AT@ 3983 @LENGTH@ 142
---UPD MethodInvocation@@activate(deploymentName,runtimeName,deploymentHash,deploymentServiceName,new ServiceActivatorContextImpl(batchBuilder),serviceContainer) @TO@ activate(deploymentName,runtimeName,deploymentHash,deploymentServiceName,new ServiceActivatorContextImpl(batchBuilder,serviceContainer),serviceContainer) @AT@ 3983 @LENGTH@ 141
------UPD SimpleName@@MethodName:activate:[deploymentName, runtimeName, deploymentHash, deploymentServiceName, new ServiceActivatorContextImpl(batchBuilder), serviceContainer] @TO@ MethodName:activate:[deploymentName, runtimeName, deploymentHash, deploymentServiceName, new ServiceActivatorContextImpl(batchBuilder,serviceContainer), serviceContainer] @AT@ 3983 @LENGTH@ 141
---------UPD ClassInstanceCreation@@ServiceActivatorContextImpl[batchBuilder] @TO@ ServiceActivatorContextImpl[batchBuilder, serviceContainer] @AT@ 4060 @LENGTH@ 45
------------INS SimpleName@@serviceContainer @TO@ ClassInstanceCreation@@ServiceActivatorContextImpl[batchBuilder] @AT@ 4106 @LENGTH@ 16


UPD ExpressionStatement@@Assignment:aggregateExecutorService=camelContext.getExecutorServiceStrategy().newThreadPool(this,name,1,Integer.MAX_VALUE) @TO@ Assignment:aggregateExecutorService=createAggregateExecutorService(name) @AT@ 42040 @LENGTH@ 117
---UPD Assignment@@aggregateExecutorService=camelContext.getExecutorServiceStrategy().newThreadPool(this,name,1,Integer.MAX_VALUE) @TO@ aggregateExecutorService=createAggregateExecutorService(name) @AT@ 42040 @LENGTH@ 116
------INS MethodInvocation@@createAggregateExecutorService(name) @TO@ Assignment@@aggregateExecutorService=camelContext.getExecutorServiceStrategy().newThreadPool(this,name,1,Integer.MAX_VALUE) @AT@ 42067 @LENGTH@ 36
---------INS SimpleName@@MethodName:createAggregateExecutorService:[name] @TO@ MethodInvocation@@createAggregateExecutorService(name) @AT@ 42067 @LENGTH@ 36
------------INS SimpleName@@name @TO@ SimpleName@@MethodName:createAggregateExecutorService:[name] @AT@ 42098 @LENGTH@ 4


UPD VariableDeclarationStatement@@final ModuleIdentifier moduleIdentifier=ModuleIdentifier.create("deployment." + deploymentUnit.getName()); @TO@ final ModuleIdentifier moduleIdentifier=deploymentUnit.getAttachment(Attachments.MODULE_IDENTIFIER); @AT@ 2426 @LENGTH@ 108
---UPD VariableDeclarationFragment@@moduleIdentifier=ModuleIdentifier.create("deployment." + deploymentUnit.getName()) @TO@ moduleIdentifier=deploymentUnit.getAttachment(Attachments.MODULE_IDENTIFIER) @AT@ 2449 @LENGTH@ 84
------UPD MethodInvocation@@ModuleIdentifier.create("deployment." + deploymentUnit.getName()) @TO@ deploymentUnit.getAttachment(Attachments.MODULE_IDENTIFIER) @AT@ 2468 @LENGTH@ 65
---------UPD SimpleName@@Name:ModuleIdentifier @TO@ Name:deploymentUnit @AT@ 2468 @LENGTH@ 16
---------UPD SimpleName@@MethodName:create:["deployment." + deploymentUnit.getName()] @TO@ MethodName:getAttachment:[Attachments.MODULE_IDENTIFIER] @AT@ 2485 @LENGTH@ 48
------------DEL InfixExpression@@"deployment." + deploymentUnit.getName() @AT@ 2492 @LENGTH@ 40
---------------DEL StringLiteral@@"deployment." @AT@ 2492 @LENGTH@ 13
---------------DEL Operator@@+ @AT@ 2505 @LENGTH@ 1
---------------DEL MethodInvocation@@deploymentUnit.getName() @AT@ 2508 @LENGTH@ 24
------------------DEL SimpleName@@Name:deploymentUnit @AT@ 2508 @LENGTH@ 14
------------------DEL SimpleName@@MethodName:getName:[] @AT@ 2523 @LENGTH@ 9
------------INS QualifiedName@@Attachments.MODULE_IDENTIFIER @TO@ SimpleName@@MethodName:create:["deployment." + deploymentUnit.getName()] @AT@ 2533 @LENGTH@ 29
---------------INS SimpleName@@Attachments @TO@ QualifiedName@@Attachments.MODULE_IDENTIFIER @AT@ 2533 @LENGTH@ 11
---------------INS SimpleName@@MODULE_IDENTIFIER @TO@ QualifiedName@@Attachments.MODULE_IDENTIFIER @AT@ 2545 @LENGTH@ 17


UPD EnhancedForStatement@@for (byte[] bs : getPattern) {  getPattern.add(bs);} @TO@ for (byte[] bs : gPattern) {  getPattern.add(bs);} @AT@ 2458 @LENGTH@ 57
---UPD SimpleName@@getPattern @TO@ gPattern @AT@ 2475 @LENGTH@ 10


UPD IfStatement@@if (results.argValue != null) {  if (results.argValue.isEmpty()) {    chunk=null;    result=results.valueStart;    if (results.argName != null) {      ctx.setArgumentsString(buffer.substring(0,results.nameStart));      for (      CommandArgument arg : allArgs) {        if (results.argName.equals(arg.getDefaultName())) {          valueCompleter=arg.getValueCompleter();          break;        }      }    } else {      ctx.setArgumentsString(buffer.substring(0,results.valueStart));      for (      CommandArgument arg : allArgs) {        if (arg.getIndex() >= 0 && arg.canAppearNext(ctx)) {          valueCompleter=arg.getValueCompleter();          break;        }      }    }    if (valueCompleter == null) {      return -1;    }  } else {    if (results.endIndex < buffer.length() && Character.isWhitespace(buffer.charAt(results.endIndex))) {      chunk=null;    } else {      chunk=results.argValue;      result=results.valueStart;      if (results.argName != null) {        ctx.setArgumentsString(buffer.substring(0,results.nameStart));        for (        CommandArgument arg : allArgs) {          if (results.argName.equals(arg.getDefaultName())) {            valueCompleter=arg.getValueCompleter();            break;          }        }      } else {        ctx.setArgumentsString(buffer.substring(0,results.valueStart));        for (        CommandArgument arg : allArgs) {          if (arg.getIndex() >= 0 && arg.canAppearNext(ctx)) {            valueCompleter=arg.getValueCompleter();            break;          }        }      }      if (valueCompleter == null) {        return -1;      }    }  }} else {  if (results.endIndex < buffer.length() && Character.isWhitespace(buffer.charAt(results.endIndex))) {    chunk=null;  } else {    chunk=results.argName;    if (results.argName != null) {      result=results.nameStart;    }  }} @TO@ if (results.argValue != null) {  if (results.argValue.isEmpty()) {    chunk=null;    result=results.valueStart;    if (results.argName != null) {      ctx.setArgumentsString(buffer.substring(0,results.nameStart));      for (      CommandArgument arg : allArgs) {        if (results.argName.equals(arg.getDefaultName())) {          valueCompleter=arg.getValueCompleter();          break;        }      }    } else {      ctx.setArgumentsString(buffer.substring(0,results.valueStart));      for (      CommandArgument arg : allArgs) {        if (arg.getIndex() >= 0 && arg.canAppearNext(ctx)) {          valueCompleter=arg.getValueCompleter();          break;        }      }    }    if (valueCompleter == null) {      return -1;    }  } else {    if (results.endIndex < buffer.length()) {      chunk=null;    } else {      chunk=results.argValue;      result=results.valueStart;      if (results.argName != null) {        ctx.setArgumentsString(buffer.substring(0,results.nameStart));        for (        CommandArgument arg : allArgs) {          if (results.argName.equals(arg.getDefaultName())) {            valueCompleter=arg.getValueCompleter();            break;          }        }      } else {        ctx.setArgumentsString(buffer.substring(0,results.valueStart));        for (        CommandArgument arg : allArgs) {          if (arg.getIndex() >= 0 && arg.canAppearNext(ctx)) {            valueCompleter=arg.getValueCompleter();            break;          }        }      }      if (valueCompleter == null) {        return -1;      }    }  }} else {  if (results.endIndex < buffer.length()) {    chunk=null;  } else {    chunk=results.argName;    if (results.argName != null) {      result=results.nameStart;    }  }} @AT@ 3060 @LENGTH@ 3009
---UPD Block@@ThenBody:{  if (results.argValue.isEmpty()) {    chunk=null;    result=results.valueStart;    if (results.argName != null) {      ctx.setArgumentsString(buffer.substring(0,results.nameStart));      for (      CommandArgument arg : allArgs) {        if (results.argName.equals(arg.getDefaultName())) {          valueCompleter=arg.getValueCompleter();          break;        }      }    } else {      ctx.setArgumentsString(buffer.substring(0,results.valueStart));      for (      CommandArgument arg : allArgs) {        if (arg.getIndex() >= 0 && arg.canAppearNext(ctx)) {          valueCompleter=arg.getValueCompleter();          break;        }      }    }    if (valueCompleter == null) {      return -1;    }  } else {    if (results.endIndex < buffer.length() && Character.isWhitespace(buffer.charAt(results.endIndex))) {      chunk=null;    } else {      chunk=results.argValue;      result=results.valueStart;      if (results.argName != null) {        ctx.setArgumentsString(buffer.substring(0,results.nameStart));        for (        CommandArgument arg : allArgs) {          if (results.argName.equals(arg.getDefaultName())) {            valueCompleter=arg.getValueCompleter();            break;          }        }      } else {        ctx.setArgumentsString(buffer.substring(0,results.valueStart));        for (        CommandArgument arg : allArgs) {          if (arg.getIndex() >= 0 && arg.canAppearNext(ctx)) {            valueCompleter=arg.getValueCompleter();            break;          }        }      }      if (valueCompleter == null) {        return -1;      }    }  }} @TO@ ThenBody:{  if (results.argValue.isEmpty()) {    chunk=null;    result=results.valueStart;    if (results.argName != null) {      ctx.setArgumentsString(buffer.substring(0,results.nameStart));      for (      CommandArgument arg : allArgs) {        if (results.argName.equals(arg.getDefaultName())) {          valueCompleter=arg.getValueCompleter();          break;        }      }    } else {      ctx.setArgumentsString(buffer.substring(0,results.valueStart));      for (      CommandArgument arg : allArgs) {        if (arg.getIndex() >= 0 && arg.canAppearNext(ctx)) {          valueCompleter=arg.getValueCompleter();          break;        }      }    }    if (valueCompleter == null) {      return -1;    }  } else {    if (results.endIndex < buffer.length()) {      chunk=null;    } else {      chunk=results.argValue;      result=results.valueStart;      if (results.argName != null) {        ctx.setArgumentsString(buffer.substring(0,results.nameStart));        for (        CommandArgument arg : allArgs) {          if (results.argName.equals(arg.getDefaultName())) {            valueCompleter=arg.getValueCompleter();            break;          }        }      } else {        ctx.setArgumentsString(buffer.substring(0,results.valueStart));        for (        CommandArgument arg : allArgs) {          if (arg.getIndex() >= 0 && arg.canAppearNext(ctx)) {            valueCompleter=arg.getValueCompleter();            break;          }        }      }      if (valueCompleter == null) {        return -1;      }    }  }} @AT@ 3089 @LENGTH@ 2596
------UPD IfStatement@@if (results.argValue.isEmpty()) {  chunk=null;  result=results.valueStart;  if (results.argName != null) {    ctx.setArgumentsString(buffer.substring(0,results.nameStart));    for (    CommandArgument arg : allArgs) {      if (results.argName.equals(arg.getDefaultName())) {        valueCompleter=arg.getValueCompleter();        break;      }    }  } else {    ctx.setArgumentsString(buffer.substring(0,results.valueStart));    for (    CommandArgument arg : allArgs) {      if (arg.getIndex() >= 0 && arg.canAppearNext(ctx)) {        valueCompleter=arg.getValueCompleter();        break;      }    }  }  if (valueCompleter == null) {    return -1;  }} else {  if (results.endIndex < buffer.length() && Character.isWhitespace(buffer.charAt(results.endIndex))) {    chunk=null;  } else {    chunk=results.argValue;    result=results.valueStart;    if (results.argName != null) {      ctx.setArgumentsString(buffer.substring(0,results.nameStart));      for (      CommandArgument arg : allArgs) {        if (results.argName.equals(arg.getDefaultName())) {          valueCompleter=arg.getValueCompleter();          break;        }      }    } else {      ctx.setArgumentsString(buffer.substring(0,results.valueStart));      for (      CommandArgument arg : allArgs) {        if (arg.getIndex() >= 0 && arg.canAppearNext(ctx)) {          valueCompleter=arg.getValueCompleter();          break;        }      }    }    if (valueCompleter == null) {      return -1;    }  }} @TO@ if (results.argValue.isEmpty()) {  chunk=null;  result=results.valueStart;  if (results.argName != null) {    ctx.setArgumentsString(buffer.substring(0,results.nameStart));    for (    CommandArgument arg : allArgs) {      if (results.argName.equals(arg.getDefaultName())) {        valueCompleter=arg.getValueCompleter();        break;      }    }  } else {    ctx.setArgumentsString(buffer.substring(0,results.valueStart));    for (    CommandArgument arg : allArgs) {      if (arg.getIndex() >= 0 && arg.canAppearNext(ctx)) {        valueCompleter=arg.getValueCompleter();        break;      }    }  }  if (valueCompleter == null) {    return -1;  }} else {  if (results.endIndex < buffer.length()) {    chunk=null;  } else {    chunk=results.argValue;    result=results.valueStart;    if (results.argName != null) {      ctx.setArgumentsString(buffer.substring(0,results.nameStart));      for (      CommandArgument arg : allArgs) {        if (results.argName.equals(arg.getDefaultName())) {          valueCompleter=arg.getValueCompleter();          break;        }      }    } else {      ctx.setArgumentsString(buffer.substring(0,results.valueStart));      for (      CommandArgument arg : allArgs) {        if (arg.getIndex() >= 0 && arg.canAppearNext(ctx)) {          valueCompleter=arg.getValueCompleter();          break;        }      }    }    if (valueCompleter == null) {      return -1;    }  }} @AT@ 3107 @LENGTH@ 2564
---------UPD Block@@ElseBody:{  if (results.endIndex < buffer.length() && Character.isWhitespace(buffer.charAt(results.endIndex))) {    chunk=null;  } else {    chunk=results.argValue;    result=results.valueStart;    if (results.argName != null) {      ctx.setArgumentsString(buffer.substring(0,results.nameStart));      for (      CommandArgument arg : allArgs) {        if (results.argName.equals(arg.getDefaultName())) {          valueCompleter=arg.getValueCompleter();          break;        }      }    } else {      ctx.setArgumentsString(buffer.substring(0,results.valueStart));      for (      CommandArgument arg : allArgs) {        if (arg.getIndex() >= 0 && arg.canAppearNext(ctx)) {          valueCompleter=arg.getValueCompleter();          break;        }      }    }    if (valueCompleter == null) {      return -1;    }  }} @TO@ ElseBody:{  if (results.endIndex < buffer.length()) {    chunk=null;  } else {    chunk=results.argValue;    result=results.valueStart;    if (results.argName != null) {      ctx.setArgumentsString(buffer.substring(0,results.nameStart));      for (      CommandArgument arg : allArgs) {        if (results.argName.equals(arg.getDefaultName())) {          valueCompleter=arg.getValueCompleter();          break;        }      }    } else {      ctx.setArgumentsString(buffer.substring(0,results.valueStart));      for (      CommandArgument arg : allArgs) {        if (arg.getIndex() >= 0 && arg.canAppearNext(ctx)) {          valueCompleter=arg.getValueCompleter();          break;        }      }    }    if (valueCompleter == null) {      return -1;    }  }} @AT@ 4253 @LENGTH@ 1418
------------UPD IfStatement@@if (results.endIndex < buffer.length() && Character.isWhitespace(buffer.charAt(results.endIndex))) {  chunk=null;} else {  chunk=results.argValue;  result=results.valueStart;  if (results.argName != null) {    ctx.setArgumentsString(buffer.substring(0,results.nameStart));    for (    CommandArgument arg : allArgs) {      if (results.argName.equals(arg.getDefaultName())) {        valueCompleter=arg.getValueCompleter();        break;      }    }  } else {    ctx.setArgumentsString(buffer.substring(0,results.valueStart));    for (    CommandArgument arg : allArgs) {      if (arg.getIndex() >= 0 && arg.canAppearNext(ctx)) {        valueCompleter=arg.getValueCompleter();        break;      }    }  }  if (valueCompleter == null) {    return -1;  }} @TO@ if (results.endIndex < buffer.length()) {  chunk=null;} else {  chunk=results.argValue;  result=results.valueStart;  if (results.argName != null) {    ctx.setArgumentsString(buffer.substring(0,results.nameStart));    for (    CommandArgument arg : allArgs) {      if (results.argName.equals(arg.getDefaultName())) {        valueCompleter=arg.getValueCompleter();        break;      }    }  } else {    ctx.setArgumentsString(buffer.substring(0,results.valueStart));    for (    CommandArgument arg : allArgs) {      if (arg.getIndex() >= 0 && arg.canAppearNext(ctx)) {        valueCompleter=arg.getValueCompleter();        break;      }    }  }  if (valueCompleter == null) {    return -1;  }} @AT@ 4275 @LENGTH@ 1378
---------------DEL InfixExpression@@results.endIndex < buffer.length() && Character.isWhitespace(buffer.charAt(results.endIndex)) @AT@ 4278 @LENGTH@ 93
------------------DEL Operator@@&& @AT@ 4312 @LENGTH@ 2
------------------DEL MethodInvocation@@Character.isWhitespace(buffer.charAt(results.endIndex)) @AT@ 4316 @LENGTH@ 55
---------------------DEL SimpleName@@Name:Character @AT@ 4316 @LENGTH@ 9
---------------------DEL SimpleName@@MethodName:isWhitespace:[buffer.charAt(results.endIndex)] @AT@ 4326 @LENGTH@ 45
------------------------DEL MethodInvocation@@buffer.charAt(results.endIndex) @AT@ 4339 @LENGTH@ 31
---------------------------DEL SimpleName@@Name:buffer @AT@ 4339 @LENGTH@ 6
---------------------------DEL SimpleName@@MethodName:charAt:[results.endIndex] @AT@ 4346 @LENGTH@ 24
------------------------------DEL QualifiedName@@results.endIndex @AT@ 4353 @LENGTH@ 16
---------------------------------DEL SimpleName@@results @AT@ 4353 @LENGTH@ 7
---------------------------------DEL SimpleName@@endIndex @AT@ 4361 @LENGTH@ 8
---------------MOV InfixExpression@@results.endIndex < buffer.length() @TO@ IfStatement@@if (results.endIndex < buffer.length() && Character.isWhitespace(buffer.charAt(results.endIndex))) {  chunk=null;} else {  chunk=results.argValue;  result=results.valueStart;  if (results.argName != null) {    ctx.setArgumentsString(buffer.substring(0,results.nameStart));    for (    CommandArgument arg : allArgs) {      if (results.argName.equals(arg.getDefaultName())) {        valueCompleter=arg.getValueCompleter();        break;      }    }  } else {    ctx.setArgumentsString(buffer.substring(0,results.valueStart));    for (    CommandArgument arg : allArgs) {      if (arg.getIndex() >= 0 && arg.canAppearNext(ctx)) {        valueCompleter=arg.getValueCompleter();        break;      }    }  }  if (valueCompleter == null) {    return -1;  }} @AT@ 4278 @LENGTH@ 34
---UPD Block@@ElseBody:{  if (results.endIndex < buffer.length() && Character.isWhitespace(buffer.charAt(results.endIndex))) {    chunk=null;  } else {    chunk=results.argName;    if (results.argName != null) {      result=results.nameStart;    }  }} @TO@ ElseBody:{  if (results.endIndex < buffer.length()) {    chunk=null;  } else {    chunk=results.argName;    if (results.argName != null) {      result=results.nameStart;    }  }} @AT@ 5691 @LENGTH@ 378
------UPD IfStatement@@if (results.endIndex < buffer.length() && Character.isWhitespace(buffer.charAt(results.endIndex))) {  chunk=null;} else {  chunk=results.argName;  if (results.argName != null) {    result=results.nameStart;  }} @TO@ if (results.endIndex < buffer.length()) {  chunk=null;} else {  chunk=results.argName;  if (results.argName != null) {    result=results.nameStart;  }} @AT@ 5709 @LENGTH@ 346
---------DEL InfixExpression@@results.endIndex < buffer.length() && Character.isWhitespace(buffer.charAt(results.endIndex)) @AT@ 5712 @LENGTH@ 93
------------DEL Operator@@&& @AT@ 5746 @LENGTH@ 2
------------DEL MethodInvocation@@Character.isWhitespace(buffer.charAt(results.endIndex)) @AT@ 5750 @LENGTH@ 55
---------------DEL SimpleName@@Name:Character @AT@ 5750 @LENGTH@ 9
---------------DEL SimpleName@@MethodName:isWhitespace:[buffer.charAt(results.endIndex)] @AT@ 5760 @LENGTH@ 45
------------------DEL MethodInvocation@@buffer.charAt(results.endIndex) @AT@ 5773 @LENGTH@ 31
---------------------DEL SimpleName@@Name:buffer @AT@ 5773 @LENGTH@ 6
---------------------DEL SimpleName@@MethodName:charAt:[results.endIndex] @AT@ 5780 @LENGTH@ 24
------------------------DEL QualifiedName@@results.endIndex @AT@ 5787 @LENGTH@ 16
---------------------------DEL SimpleName@@results @AT@ 5787 @LENGTH@ 7
---------------------------DEL SimpleName@@endIndex @AT@ 5795 @LENGTH@ 8
---------MOV InfixExpression@@results.endIndex < buffer.length() @TO@ IfStatement@@if (results.endIndex < buffer.length() && Character.isWhitespace(buffer.charAt(results.endIndex))) {  chunk=null;} else {  chunk=results.argName;  if (results.argName != null) {    result=results.nameStart;  }} @AT@ 5712 @LENGTH@ 34


UPD ExpressionStatement@@MethodInvocation:template.insert(new Venue("Penn Station",73.99408,40.75057)) @TO@ MethodInvocation:template.insert(new Venue("Penn Station",-73.99408,40.75057)) @AT@ 2047 @LENGTH@ 63
---UPD MethodInvocation@@template.insert(new Venue("Penn Station",73.99408,40.75057)) @TO@ template.insert(new Venue("Penn Station",-73.99408,40.75057)) @AT@ 2047 @LENGTH@ 62
------UPD SimpleName@@MethodName:insert:[new Venue("Penn Station",73.99408,40.75057)] @TO@ MethodName:insert:[new Venue("Penn Station",-73.99408,40.75057)] @AT@ 2056 @LENGTH@ 53
---------UPD ClassInstanceCreation@@Venue["Penn Station", 73.99408, 40.75057] @TO@ Venue["Penn Station", -73.99408, 40.75057] @AT@ 2063 @LENGTH@ 45
------------INS PrefixExpression@@-73.99408 @TO@ ClassInstanceCreation@@Venue["Penn Station", 73.99408, 40.75057] @AT@ 2089 @LENGTH@ 9
---------------INS Operator@@- @TO@ PrefixExpression@@-73.99408 @AT@ 2089 @LENGTH@ 1
---------------INS NumberLiteral@@73.99408 @TO@ PrefixExpression@@-73.99408 @AT@ 2090 @LENGTH@ 8
------------DEL NumberLiteral@@73.99408 @AT@ 2089 @LENGTH@ 8


UPD ThrowStatement@@ClassInstanceCreation:new IllegalArgumentException(String.format("Invalid value '%s' for orders given! Has to be either 'desc' or 'asc'.",value),e) @TO@ ClassInstanceCreation:new IllegalArgumentException(String.format("Invalid value '%s' for orders given! Has to be either 'desc' or 'asc' (case insensitive).",value),e) @AT@ 4705 @LENGTH@ 224
---UPD ClassInstanceCreation@@IllegalArgumentException[String.format("Invalid value '%s' for orders given! Has to be either 'desc' or 'asc'.",value), e] @TO@ IllegalArgumentException[String.format("Invalid value '%s' for orders given! Has to be either 'desc' or 'asc' (case insensitive).",value), e] @AT@ 4711 @LENGTH@ 217
------UPD MethodInvocation@@String.format("Invalid value '%s' for orders given! Has to be either 'desc' or 'asc'.",value) @TO@ String.format("Invalid value '%s' for orders given! Has to be either 'desc' or 'asc' (case insensitive).",value) @AT@ 4765 @LENGTH@ 159
---------UPD SimpleName@@MethodName:format:["Invalid value '%s' for orders given! Has to be either 'desc' or 'asc'.", value] @TO@ MethodName:format:["Invalid value '%s' for orders given! Has to be either 'desc' or 'asc' (case insensitive).", value] @AT@ 4772 @LENGTH@ 152
------------UPD StringLiteral@@"Invalid value '%s' for orders given! Has to be either 'desc' or 'asc'." @TO@ "Invalid value '%s' for orders given! Has to be either 'desc' or 'asc' (case insensitive)." @AT@ 4812 @LENGTH@ 72


UPD TryStatement@@try {  return getJavaClass().newInstance();} catch (InstantiationException e) {  throw new EntityInstantiationException("Unable to create entity of type [" + getJavaClass() + "]: "+ e.getMessage(),e);}catch (IllegalAccessException e) {  throw new EntityInstantiationException("Unable to create entity of type [" + getJavaClass() + "]: "+ e.getMessage(),e);} @TO@ try {  return getJavaClass().newInstance();} catch (InstantiationException e) {  throw new MappingInstantiationException("Unable to create entity of type [" + getJavaClass() + "]: "+ e.getMessage(),e);}catch (IllegalAccessException e) {  throw new MappingInstantiationException("Unable to create entity of type [" + getJavaClass() + "]: "+ e.getMessage(),e);} @AT@ 4610 @LENGTH@ 392
---UPD CatchClause@@catch (InstantiationException e) {  throw new EntityInstantiationException("Unable to create entity of type [" + getJavaClass() + "]: "+ e.getMessage(),e);} @TO@ catch (InstantiationException e) {  throw new MappingInstantiationException("Unable to create entity of type [" + getJavaClass() + "]: "+ e.getMessage(),e);} @AT@ 4665 @LENGTH@ 168
------UPD ThrowStatement@@ClassInstanceCreation:new EntityInstantiationException("Unable to create entity of type [" + getJavaClass() + "]: "+ e.getMessage(),e) @TO@ ClassInstanceCreation:new MappingInstantiationException("Unable to create entity of type [" + getJavaClass() + "]: "+ e.getMessage(),e) @AT@ 4706 @LENGTH@ 121
---------UPD ClassInstanceCreation@@EntityInstantiationException["Unable to create entity of type [" + getJavaClass() + "]: "+ e.getMessage(), e] @TO@ MappingInstantiationException["Unable to create entity of type [" + getJavaClass() + "]: "+ e.getMessage(), e] @AT@ 4712 @LENGTH@ 114
------------UPD SimpleType@@EntityInstantiationException @TO@ MappingInstantiationException @AT@ 4716 @LENGTH@ 28
---UPD CatchClause@@catch (IllegalAccessException e) {  throw new EntityInstantiationException("Unable to create entity of type [" + getJavaClass() + "]: "+ e.getMessage(),e);} @TO@ catch (IllegalAccessException e) {  throw new MappingInstantiationException("Unable to create entity of type [" + getJavaClass() + "]: "+ e.getMessage(),e);} @AT@ 4834 @LENGTH@ 168
------UPD ThrowStatement@@ClassInstanceCreation:new EntityInstantiationException("Unable to create entity of type [" + getJavaClass() + "]: "+ e.getMessage(),e) @TO@ ClassInstanceCreation:new MappingInstantiationException("Unable to create entity of type [" + getJavaClass() + "]: "+ e.getMessage(),e) @AT@ 4875 @LENGTH@ 121
---------UPD ClassInstanceCreation@@EntityInstantiationException["Unable to create entity of type [" + getJavaClass() + "]: "+ e.getMessage(), e] @TO@ MappingInstantiationException["Unable to create entity of type [" + getJavaClass() + "]: "+ e.getMessage(), e] @AT@ 4881 @LENGTH@ 114
------------UPD SimpleType@@EntityInstantiationException @TO@ MappingInstantiationException @AT@ 4885 @LENGTH@ 28


INS MethodDeclaration@@public, String, MethodName:getDefaultControllerHost,  @TO@ TypeDeclaration@@[public]MockCommandContext, [CommandContext] @AT@ 5604 @LENGTH@ 69
---INS Modifier@@public @TO@ MethodDeclaration@@public, String, MethodName:getDefaultControllerHost,  @AT@ 5604 @LENGTH@ 6
---INS SimpleType@@String @TO@ MethodDeclaration@@public, String, MethodName:getDefaultControllerHost,  @AT@ 5611 @LENGTH@ 6
---INS SimpleName@@MethodName:getDefaultControllerHost @TO@ MethodDeclaration@@public, String, MethodName:getDefaultControllerHost,  @AT@ 5618 @LENGTH@ 24
---INS ReturnStatement@@NullLiteral:null @TO@ MethodDeclaration@@public, String, MethodName:getDefaultControllerHost,  @AT@ 5655 @LENGTH@ 12
------INS NullLiteral@@null @TO@ ReturnStatement@@NullLiteral:null @AT@ 5662 @LENGTH@ 4


UPD IfStatement@@if (!ENTITY_MANAGER_CLASS.equals(injectionTypeName)) {  Class extensionClass;  try {    extensionClass=this.getClass().getClassLoader().loadClass(injectionTypeName);  } catch (  ClassNotFoundException e) {    throw new RuntimeException("couldn't load " + injectionTypeName + " from JPA modules classloader",e);  }  Object targetValueToInject=entityManager.unwrap(extensionClass);  new ValueManagedReference(new ImmediateValue<Object>(targetValueToInject));} @TO@ if (!ENTITY_MANAGER_CLASS.equals(injectionTypeName)) {  Class extensionClass;  try {    extensionClass=this.getClass().getClassLoader().loadClass(injectionTypeName);  } catch (  ClassNotFoundException e) {    throw new RuntimeException("couldn't load " + injectionTypeName + " from JPA modules classloader",e);  }  Object targetValueToInject=entityManager.unwrap(extensionClass);  return new ValueManagedReference(new ImmediateValue<Object>(targetValueToInject));} @AT@ 7031 @LENGTH@ 664
---UPD Block@@ThenBody:{  Class extensionClass;  try {    extensionClass=this.getClass().getClassLoader().loadClass(injectionTypeName);  } catch (  ClassNotFoundException e) {    throw new RuntimeException("couldn't load " + injectionTypeName + " from JPA modules classloader",e);  }  Object targetValueToInject=entityManager.unwrap(extensionClass);  new ValueManagedReference(new ImmediateValue<Object>(targetValueToInject));} @TO@ ThenBody:{  Class extensionClass;  try {    extensionClass=this.getClass().getClassLoader().loadClass(injectionTypeName);  } catch (  ClassNotFoundException e) {    throw new RuntimeException("couldn't load " + injectionTypeName + " from JPA modules classloader",e);  }  Object targetValueToInject=entityManager.unwrap(extensionClass);  return new ValueManagedReference(new ImmediateValue<Object>(targetValueToInject));} @AT@ 7085 @LENGTH@ 610
------INS ReturnStatement@@ClassInstanceCreation:new ValueManagedReference(new ImmediateValue<Object>(targetValueToInject)) @TO@ Block@@ThenBody:{  Class extensionClass;  try {    extensionClass=this.getClass().getClassLoader().loadClass(injectionTypeName);  } catch (  ClassNotFoundException e) {    throw new RuntimeException("couldn't load " + injectionTypeName + " from JPA modules classloader",e);  }  Object targetValueToInject=entityManager.unwrap(extensionClass);  new ValueManagedReference(new ImmediateValue<Object>(targetValueToInject));} @AT@ 7606 @LENGTH@ 82
---------MOV ClassInstanceCreation@@ValueManagedReference[new ImmediateValue<Object>(targetValueToInject)] @TO@ ReturnStatement@@ClassInstanceCreation:new ValueManagedReference(new ImmediateValue<Object>(targetValueToInject)) @AT@ 7606 @LENGTH@ 74
------DEL ExpressionStatement@@ClassInstanceCreation:new ValueManagedReference(new ImmediateValue<Object>(targetValueToInject)) @AT@ 7606 @LENGTH@ 75


UPD MethodDeclaration@@public, void, MethodName:handle, ParsingContext ctx, OperationFormatException,  @TO@ public, void, MethodName:handle, ParsingContext ctx, CommandFormatException,  @AT@ 1391 @LENGTH@ 121
---UPD SimpleType@@OperationFormatException @TO@ CommandFormatException @AT@ 1449 @LENGTH@ 24


DEL ExpressionStatement@@MethodInvocation:prepareMailbox() @AT@ 1516 @LENGTH@ 17
---DEL MethodInvocation@@MethodName:prepareMailbox:[] @AT@ 1516 @LENGTH@ 16


UPD MethodDeclaration@@protected, void, MethodName:parse, String str, OperationFormatException,  @TO@ protected, void, MethodName:parse, String str, CommandFormatException,  @AT@ 1848 @LENGTH@ 156
---UPD SimpleType@@OperationFormatException @TO@ CommandFormatException @AT@ 1888 @LENGTH@ 24


UPD TryStatement@@try {  if (MBeanServerNotification.REGISTRATION_NOTIFICATION.equals(notification.getType())) {    if (zooKeeper.exists(path) == null) {      zooKeeper.create(path,"",ZooDefs.Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);    }  } else   if (MBeanServerNotification.UNREGISTRATION_NOTIFICATION.equals(notification.getType())) {    if (Arrays.binarySearch(mbeanServer.getDomains(),domain) == -1) {      zooKeeper.delete(path);    }  }} catch (Exception e) {  logger.warn("Exception while jmx domain synchronization",e);} @TO@ try {  if (MBeanServerNotification.REGISTRATION_NOTIFICATION.equals(notification.getType())) {    if (zooKeeper.exists(path) == null) {      zooKeeper.create(path,"",ZooDefs.Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);    }  } else   if (MBeanServerNotification.UNREGISTRATION_NOTIFICATION.equals(notification.getType())) {    if (Arrays.binarySearch(mbeanServer.getDomains(),domain) < 0) {      zooKeeper.delete(path);    }  }} catch (KeeperException.SessionExpiredException e) {  logger.debug("Session expiry detected. Handling notification once again",e);  handleNotification(notif,o);}catch (Exception e) {  logger.warn("Exception while jmx domain synchronization",e);} @AT@ 8627 @LENGTH@ 766
---UPD IfStatement@@if (MBeanServerNotification.REGISTRATION_NOTIFICATION.equals(notification.getType())) {  if (zooKeeper.exists(path) == null) {    zooKeeper.create(path,"",ZooDefs.Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);  }} else if (MBeanServerNotification.UNREGISTRATION_NOTIFICATION.equals(notification.getType())) {  if (Arrays.binarySearch(mbeanServer.getDomains(),domain) == -1) {    zooKeeper.delete(path);  }} @TO@ if (MBeanServerNotification.REGISTRATION_NOTIFICATION.equals(notification.getType())) {  if (zooKeeper.exists(path) == null) {    zooKeeper.create(path,"",ZooDefs.Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);  }} else if (MBeanServerNotification.UNREGISTRATION_NOTIFICATION.equals(notification.getType())) {  if (Arrays.binarySearch(mbeanServer.getDomains(),domain) < 0) {    zooKeeper.delete(path);  }} @AT@ 8649 @LENGTH@ 616
------UPD Block@@ElseBody:if (MBeanServerNotification.UNREGISTRATION_NOTIFICATION.equals(notification.getType())) {  if (Arrays.binarySearch(mbeanServer.getDomains(),domain) == -1) {    zooKeeper.delete(path);  }} @TO@ ElseBody:if (MBeanServerNotification.UNREGISTRATION_NOTIFICATION.equals(notification.getType())) {  if (Arrays.binarySearch(mbeanServer.getDomains(),domain) < 0) {    zooKeeper.delete(path);  }} @AT@ 8944 @LENGTH@ 321
---------UPD IfStatement@@if (MBeanServerNotification.UNREGISTRATION_NOTIFICATION.equals(notification.getType())) {  if (Arrays.binarySearch(mbeanServer.getDomains(),domain) == -1) {    zooKeeper.delete(path);  }} @TO@ if (MBeanServerNotification.UNREGISTRATION_NOTIFICATION.equals(notification.getType())) {  if (Arrays.binarySearch(mbeanServer.getDomains(),domain) < 0) {    zooKeeper.delete(path);  }} @AT@ 8944 @LENGTH@ 321
------------UPD Block@@ThenBody:{  if (Arrays.binarySearch(mbeanServer.getDomains(),domain) == -1) {    zooKeeper.delete(path);  }} @TO@ ThenBody:{  if (Arrays.binarySearch(mbeanServer.getDomains(),domain) < 0) {    zooKeeper.delete(path);  }} @AT@ 9032 @LENGTH@ 233
---------------UPD IfStatement@@if (Arrays.binarySearch(mbeanServer.getDomains(),domain) == -1) {  zooKeeper.delete(path);} @TO@ if (Arrays.binarySearch(mbeanServer.getDomains(),domain) < 0) {  zooKeeper.delete(path);} @AT@ 9054 @LENGTH@ 193
------------------UPD InfixExpression@@Arrays.binarySearch(mbeanServer.getDomains(),domain) == -1 @TO@ Arrays.binarySearch(mbeanServer.getDomains(),domain) < 0 @AT@ 9058 @LENGTH@ 59
---------------------INS NumberLiteral@@0 @TO@ InfixExpression@@Arrays.binarySearch(mbeanServer.getDomains(),domain) == -1 @AT@ 9016 @LENGTH@ 1
---------------------INS NumberLiteral@@0 @TO@ InfixExpression@@Arrays.binarySearch(mbeanServer.getDomains(),domain) == -1 @AT@ 9016 @LENGTH@ 1
---------------------UPD Operator@@== @TO@ < @AT@ 9111 @LENGTH@ 2
---------------------DEL PrefixExpression@@-1 @AT@ 9115 @LENGTH@ 2
------------------------DEL Operator@@- @AT@ 9115 @LENGTH@ 1
------------------------DEL NumberLiteral@@1 @AT@ 9116 @LENGTH@ 1
---INS CatchClause@@catch (KeeperException.SessionExpiredException e) {  logger.debug("Session expiry detected. Handling notification once again",e);  handleNotification(notif,o);} @TO@ TryStatement@@try {  if (MBeanServerNotification.REGISTRATION_NOTIFICATION.equals(notification.getType())) {    if (zooKeeper.exists(path) == null) {      zooKeeper.create(path,"",ZooDefs.Ids.OPEN_ACL_UNSAFE,CreateMode.PERSISTENT);    }  } else   if (MBeanServerNotification.UNREGISTRATION_NOTIFICATION.equals(notification.getType())) {    if (Arrays.binarySearch(mbeanServer.getDomains(),domain) == -1) {      zooKeeper.delete(path);    }  }} catch (Exception e) {  logger.warn("Exception while jmx domain synchronization",e);} @AT@ 9180 @LENGTH@ 205
------INS SingleVariableDeclaration@@KeeperException.SessionExpiredException e @TO@ CatchClause@@catch (KeeperException.SessionExpiredException e) {  logger.debug("Session expiry detected. Handling notification once again",e);  handleNotification(notif,o);} @AT@ 9187 @LENGTH@ 41
---------INS SimpleType@@KeeperException.SessionExpiredException @TO@ SingleVariableDeclaration@@KeeperException.SessionExpiredException e @AT@ 9187 @LENGTH@ 39
---------INS SimpleName@@e @TO@ SingleVariableDeclaration@@KeeperException.SessionExpiredException e @AT@ 9227 @LENGTH@ 1
------INS ExpressionStatement@@MethodInvocation:logger.debug("Session expiry detected. Handling notification once again",e) @TO@ CatchClause@@catch (KeeperException.SessionExpiredException e) {  logger.debug("Session expiry detected. Handling notification once again",e);  handleNotification(notif,o);} @AT@ 9248 @LENGTH@ 77
---------INS MethodInvocation@@logger.debug("Session expiry detected. Handling notification once again",e) @TO@ ExpressionStatement@@MethodInvocation:logger.debug("Session expiry detected. Handling notification once again",e) @AT@ 9248 @LENGTH@ 76
------------INS SimpleName@@Name:logger @TO@ MethodInvocation@@logger.debug("Session expiry detected. Handling notification once again",e) @AT@ 9248 @LENGTH@ 6
------------INS SimpleName@@MethodName:debug:["Session expiry detected. Handling notification once again", e] @TO@ MethodInvocation@@logger.debug("Session expiry detected. Handling notification once again",e) @AT@ 9255 @LENGTH@ 69
---------------INS StringLiteral@@"Session expiry detected. Handling notification once again" @TO@ SimpleName@@MethodName:debug:["Session expiry detected. Handling notification once again", e] @AT@ 9261 @LENGTH@ 59
---------------INS SimpleName@@e @TO@ SimpleName@@MethodName:debug:["Session expiry detected. Handling notification once again", e] @AT@ 9322 @LENGTH@ 1
------INS ExpressionStatement@@MethodInvocation:handleNotification(notif,o) @TO@ CatchClause@@catch (KeeperException.SessionExpiredException e) {  logger.debug("Session expiry detected. Handling notification once again",e);  handleNotification(notif,o);} @AT@ 9342 @LENGTH@ 29
---------INS MethodInvocation@@handleNotification(notif,o) @TO@ ExpressionStatement@@MethodInvocation:handleNotification(notif,o) @AT@ 9342 @LENGTH@ 28
------------INS SimpleName@@MethodName:handleNotification:[notif, o] @TO@ MethodInvocation@@handleNotification(notif,o) @AT@ 9342 @LENGTH@ 28
---------------INS SimpleName@@notif @TO@ SimpleName@@MethodName:handleNotification:[notif, o] @AT@ 9361 @LENGTH@ 5
---------------INS SimpleName@@o @TO@ SimpleName@@MethodName:handleNotification:[notif, o] @AT@ 9368 @LENGTH@ 1


UPD IfStatement@@if (this.targetConnection != null) {  RabbitUtils.closeConnection(this.targetConnection);} @TO@ if (this.targetConnection != null) {  listener.onClose(targetConnection);  RabbitUtils.closeConnection(this.targetConnection);} @AT@ 4856 @LENGTH@ 97
---UPD Block@@ThenBody:{  RabbitUtils.closeConnection(this.targetConnection);} @TO@ ThenBody:{  listener.onClose(targetConnection);  RabbitUtils.closeConnection(this.targetConnection);} @AT@ 4891 @LENGTH@ 62
------INS ExpressionStatement@@MethodInvocation:listener.onClose(targetConnection) @TO@ Block@@ThenBody:{  RabbitUtils.closeConnection(this.targetConnection);} @AT@ 4897 @LENGTH@ 35
---------INS MethodInvocation@@listener.onClose(targetConnection) @TO@ ExpressionStatement@@MethodInvocation:listener.onClose(targetConnection) @AT@ 4897 @LENGTH@ 34
------------INS SimpleName@@Name:listener @TO@ MethodInvocation@@listener.onClose(targetConnection) @AT@ 4897 @LENGTH@ 8
------------INS SimpleName@@MethodName:onClose:[targetConnection] @TO@ MethodInvocation@@listener.onClose(targetConnection) @AT@ 4906 @LENGTH@ 25
---------------INS SimpleName@@targetConnection @TO@ SimpleName@@MethodName:onClose:[targetConnection] @AT@ 4914 @LENGTH@ 16


INS FieldDeclaration@@public, static, final, int, [DEPENDENCIES_WS=0xC00] @TO@ EnumDeclaration@@[public]Phase,  @AT@ 10415 @LENGTH@ 76
---INS Modifier@@public @TO@ FieldDeclaration@@public, static, final, int, [DEPENDENCIES_WS=0xC00] @AT@ 10415 @LENGTH@ 6
---INS Modifier@@static @TO@ FieldDeclaration@@public, static, final, int, [DEPENDENCIES_WS=0xC00] @AT@ 10422 @LENGTH@ 6
---INS Modifier@@final @TO@ FieldDeclaration@@public, static, final, int, [DEPENDENCIES_WS=0xC00] @AT@ 10429 @LENGTH@ 5
---INS PrimitiveType@@int @TO@ FieldDeclaration@@public, static, final, int, [DEPENDENCIES_WS=0xC00] @AT@ 10435 @LENGTH@ 3
---INS VariableDeclarationFragment@@DEPENDENCIES_WS=0xC00 @TO@ FieldDeclaration@@public, static, final, int, [DEPENDENCIES_WS=0xC00] @AT@ 10439 @LENGTH@ 51
------INS SimpleName@@DEPENDENCIES_WS @TO@ VariableDeclarationFragment@@DEPENDENCIES_WS=0xC00 @AT@ 10439 @LENGTH@ 15
------INS NumberLiteral@@0xC00 @TO@ VariableDeclarationFragment@@DEPENDENCIES_WS=0xC00 @AT@ 10485 @LENGTH@ 5


UPD IfStatement@@if (path != null) {  f=new File(path);  if (!f.exists()) {    ctx.printLine("Path " + f.getAbsolutePath() + " doesn't exist.");    return;  }} else {  f=null;} @TO@ if (path != null) {  f=new File(path);  if (!f.exists()) {    ctx.printLine("Path " + f.getAbsolutePath() + " doesn't exist.");    return;  }  if (f.isDirectory()) {    ctx.printLine(f.getAbsolutePath() + " is a directory.");    return;  }} else {  f=null;} @AT@ 8560 @LENGTH@ 249
---UPD Block@@ThenBody:{  f=new File(path);  if (!f.exists()) {    ctx.printLine("Path " + f.getAbsolutePath() + " doesn't exist.");    return;  }} @TO@ ThenBody:{  f=new File(path);  if (!f.exists()) {    ctx.printLine("Path " + f.getAbsolutePath() + " doesn't exist.");    return;  }  if (f.isDirectory()) {    ctx.printLine(f.getAbsolutePath() + " is a directory.");    return;  }} @AT@ 8577 @LENGTH@ 193
------INS IfStatement@@if (f.isDirectory()) {  ctx.printLine(f.getAbsolutePath() + " is a directory.");  return;} @TO@ Block@@ThenBody:{  f=new File(path);  if (!f.exists()) {    ctx.printLine("Path " + f.getAbsolutePath() + " doesn't exist.");    return;  }} @AT@ 8773 @LENGTH@ 132
---------INS MethodInvocation@@f.isDirectory() @TO@ IfStatement@@if (f.isDirectory()) {  ctx.printLine(f.getAbsolutePath() + " is a directory.");  return;} @AT@ 8776 @LENGTH@ 15
------------INS SimpleName@@Name:f @TO@ MethodInvocation@@f.isDirectory() @AT@ 8776 @LENGTH@ 1
------------INS SimpleName@@MethodName:isDirectory:[] @TO@ MethodInvocation@@f.isDirectory() @AT@ 8778 @LENGTH@ 13
---------INS Block@@ThenBody:{  ctx.printLine(f.getAbsolutePath() + " is a directory.");  return;} @TO@ IfStatement@@if (f.isDirectory()) {  ctx.printLine(f.getAbsolutePath() + " is a directory.");  return;} @AT@ 8793 @LENGTH@ 112
------------INS ExpressionStatement@@MethodInvocation:ctx.printLine(f.getAbsolutePath() + " is a directory.") @TO@ Block@@ThenBody:{  ctx.printLine(f.getAbsolutePath() + " is a directory.");  return;} @AT@ 8811 @LENGTH@ 56
---------------INS MethodInvocation@@ctx.printLine(f.getAbsolutePath() + " is a directory.") @TO@ ExpressionStatement@@MethodInvocation:ctx.printLine(f.getAbsolutePath() + " is a directory.") @AT@ 8811 @LENGTH@ 55
------------------INS SimpleName@@Name:ctx @TO@ MethodInvocation@@ctx.printLine(f.getAbsolutePath() + " is a directory.") @AT@ 8811 @LENGTH@ 3
------------------INS SimpleName@@MethodName:printLine:[f.getAbsolutePath() + " is a directory."] @TO@ MethodInvocation@@ctx.printLine(f.getAbsolutePath() + " is a directory.") @AT@ 8815 @LENGTH@ 51
---------------------INS InfixExpression@@f.getAbsolutePath() + " is a directory." @TO@ SimpleName@@MethodName:printLine:[f.getAbsolutePath() + " is a directory."] @AT@ 8825 @LENGTH@ 40
------------------------INS MethodInvocation@@f.getAbsolutePath() @TO@ InfixExpression@@f.getAbsolutePath() + " is a directory." @AT@ 8825 @LENGTH@ 19
---------------------------INS SimpleName@@Name:f @TO@ MethodInvocation@@f.getAbsolutePath() @AT@ 8825 @LENGTH@ 1
---------------------------INS SimpleName@@MethodName:getAbsolutePath:[] @TO@ MethodInvocation@@f.getAbsolutePath() @AT@ 8827 @LENGTH@ 17
------------------------INS Operator@@+ @TO@ InfixExpression@@f.getAbsolutePath() + " is a directory." @AT@ 8844 @LENGTH@ 1
------------------------INS StringLiteral@@" is a directory." @TO@ InfixExpression@@f.getAbsolutePath() + " is a directory." @AT@ 8847 @LENGTH@ 18
------------INS ReturnStatement@@ @TO@ Block@@ThenBody:{  ctx.printLine(f.getAbsolutePath() + " is a directory.");  return;} @AT@ 8884 @LENGTH@ 7


INS MethodDeclaration@@public, void, MethodName:setUp, Exception,  @TO@ TypeDeclaration@@[public]MailMaxMessagesPerPollTest, CamelTestSupport @AT@ 1404 @LENGTH@ 93
---INS Modifier@@public @TO@ MethodDeclaration@@public, void, MethodName:setUp, Exception,  @AT@ 1404 @LENGTH@ 6
---INS PrimitiveType@@void @TO@ MethodDeclaration@@public, void, MethodName:setUp, Exception,  @AT@ 1411 @LENGTH@ 4
---INS SimpleName@@MethodName:setUp @TO@ MethodDeclaration@@public, void, MethodName:setUp, Exception,  @AT@ 1416 @LENGTH@ 5
---INS SimpleType@@Exception @TO@ MethodDeclaration@@public, void, MethodName:setUp, Exception,  @AT@ 1431 @LENGTH@ 9
---INS ExpressionStatement@@MethodInvocation:prepareMailbox() @TO@ MethodDeclaration@@public, void, MethodName:setUp, Exception,  @AT@ 1451 @LENGTH@ 17
------INS MethodInvocation@@MethodName:prepareMailbox:[] @TO@ ExpressionStatement@@MethodInvocation:prepareMailbox() @AT@ 1451 @LENGTH@ 16
---INS ExpressionStatement@@SuperMethodInvocation:super.setUp() @TO@ MethodDeclaration@@public, void, MethodName:setUp, Exception,  @AT@ 1477 @LENGTH@ 14
------INS SuperMethodInvocation@@super.setUp() @TO@ ExpressionStatement@@SuperMethodInvocation:super.setUp() @AT@ 1477 @LENGTH@ 13
---------INS SimpleName@@MethodName:setUp:[] @TO@ SuperMethodInvocation@@super.setUp() @AT@ 1483 @LENGTH@ 5


UPD ReturnStatement@@TypeLiteral:RegionFactoryBean.class @TO@ TypeLiteral:RegionLookupFactoryBean.class @AT@ 1222 @LENGTH@ 31
---UPD TypeLiteral@@RegionFactoryBean.class @TO@ RegionLookupFactoryBean.class @AT@ 1229 @LENGTH@ 23


UPD IfStatement@@if (ModuleRootMarker.isModuleRoot(additionalRoot)) {  resourceRoots.add(additionalRoot);} @TO@ if (ModuleRootMarker.isModuleRoot(additionalRoot) && !SubDeploymentMarker.isSubDeployment(additionalRoot)) {  resourceRoots.add(additionalRoot);} @AT@ 3628 @LENGTH@ 125
---INS InfixExpression@@ModuleRootMarker.isModuleRoot(additionalRoot) && !SubDeploymentMarker.isSubDeployment(additionalRoot) @TO@ IfStatement@@if (ModuleRootMarker.isModuleRoot(additionalRoot)) {  resourceRoots.add(additionalRoot);} @AT@ 3691 @LENGTH@ 101
------MOV MethodInvocation@@ModuleRootMarker.isModuleRoot(additionalRoot) @TO@ InfixExpression@@ModuleRootMarker.isModuleRoot(additionalRoot) && !SubDeploymentMarker.isSubDeployment(additionalRoot) @AT@ 3632 @LENGTH@ 45
------MOV MethodInvocation@@ModuleRootMarker.isModuleRoot(additionalRoot) @TO@ InfixExpression@@ModuleRootMarker.isModuleRoot(additionalRoot) && !SubDeploymentMarker.isSubDeployment(additionalRoot) @AT@ 3632 @LENGTH@ 45
------INS Operator@@&& @TO@ InfixExpression@@ModuleRootMarker.isModuleRoot(additionalRoot) && !SubDeploymentMarker.isSubDeployment(additionalRoot) @AT@ 3736 @LENGTH@ 2
------INS PrefixExpression@@!SubDeploymentMarker.isSubDeployment(additionalRoot) @TO@ InfixExpression@@ModuleRootMarker.isModuleRoot(additionalRoot) && !SubDeploymentMarker.isSubDeployment(additionalRoot) @AT@ 3740 @LENGTH@ 52
---------INS Operator@@! @TO@ PrefixExpression@@!SubDeploymentMarker.isSubDeployment(additionalRoot) @AT@ 3740 @LENGTH@ 1
---------INS MethodInvocation@@SubDeploymentMarker.isSubDeployment(additionalRoot) @TO@ PrefixExpression@@!SubDeploymentMarker.isSubDeployment(additionalRoot) @AT@ 3741 @LENGTH@ 51
------------INS SimpleName@@Name:SubDeploymentMarker @TO@ MethodInvocation@@SubDeploymentMarker.isSubDeployment(additionalRoot) @AT@ 3741 @LENGTH@ 19
------------INS SimpleName@@MethodName:isSubDeployment:[additionalRoot] @TO@ MethodInvocation@@SubDeploymentMarker.isSubDeployment(additionalRoot) @AT@ 3761 @LENGTH@ 31
---------------INS SimpleName@@additionalRoot @TO@ SimpleName@@MethodName:isSubDeployment:[additionalRoot] @AT@ 3777 @LENGTH@ 14


MOV ExpressionStatement@@MethodInvocation:tracker.addService(ServerControllerService.JBOSS_AS_NAME,serverControllerService).install() @TO@ MethodDeclaration@@public, AsyncFuture<ServerController>, MethodName:start, final Configuration configuration, final List<ServiceActivator> extraServices,  @AT@ 3743 @LENGTH@ 93


UPD TryStatement@@try {  long interval=100;  listener.clear();  FileAlterationMonitor monitor=new FileAlterationMonitor(interval,observer);  assertEquals("Interval",interval,monitor.getInterval());  assertNull("Thread Factory",monitor.getThreadFactory());  monitor.start();  try {    monitor.start();  } catch (  IllegalStateException e) {  }  checkCollectionsEmpty("A");  File file1=touch(new File(testDir,"file1.java"));  checkFile("Create",file1,listener.getCreatedFiles());  listener.clear();  checkCollectionsEmpty("B");  file1=touch(file1);  checkFile("Update",file1,listener.getChangedFiles());  listener.clear();  checkCollectionsEmpty("C");  file1.delete();  checkFile("Delete",file1,listener.getDeletedFiles());  listener.clear();  monitor.stop();  try {    monitor.stop();  } catch (  IllegalStateException e) {  }} catch (Exception e) {  e.printStackTrace();  fail("Threw " + e);} @TO@ try {  long interval=100;  listener.clear();  FileAlterationMonitor monitor=new FileAlterationMonitor(interval,observer);  assertEquals("Interval",interval,monitor.getInterval());  monitor.start();  try {    monitor.start();  } catch (  IllegalStateException e) {  }  checkCollectionsEmpty("A");  File file1=touch(new File(testDir,"file1.java"));  checkFile("Create",file1,listener.getCreatedFiles());  listener.clear();  checkCollectionsEmpty("B");  file1=touch(file1);  checkFile("Update",file1,listener.getChangedFiles());  listener.clear();  checkCollectionsEmpty("C");  file1.delete();  checkFile("Delete",file1,listener.getDeletedFiles());  listener.clear();  monitor.stop();  try {    monitor.stop();  } catch (  IllegalStateException e) {  }} catch (Exception e) {  e.printStackTrace();  fail("Threw " + e);} @AT@ 3162 @LENGTH@ 1519
---DEL ExpressionStatement@@MethodInvocation:assertNull("Thread Factory",monitor.getThreadFactory()) @AT@ 3405 @LENGTH@ 57
------DEL MethodInvocation@@assertNull("Thread Factory",monitor.getThreadFactory()) @AT@ 3405 @LENGTH@ 56
---------DEL SimpleName@@MethodName:assertNull:["Thread Factory", monitor.getThreadFactory()] @AT@ 3405 @LENGTH@ 56
------------DEL StringLiteral@@"Thread Factory" @AT@ 3416 @LENGTH@ 16
------------DEL MethodInvocation@@monitor.getThreadFactory() @AT@ 3434 @LENGTH@ 26
---------------DEL SimpleName@@Name:monitor @AT@ 3434 @LENGTH@ 7
---------------DEL SimpleName@@MethodName:getThreadFactory:[] @AT@ 3442 @LENGTH@ 18


DEL FieldDeclaration@@protected, boolean, [full=false] @AT@ 9321 @LENGTH@ 31
---DEL Modifier@@protected @AT@ 9321 @LENGTH@ 9
---DEL PrimitiveType@@boolean @AT@ 9331 @LENGTH@ 7
---DEL VariableDeclarationFragment@@full=false @AT@ 9339 @LENGTH@ 12
------DEL SimpleName@@full @AT@ 9339 @LENGTH@ 4
------DEL BooleanLiteral@@false @AT@ 9346 @LENGTH@ 5


UPD ExpressionStatement@@MethodInvocation:assertTrue(file + " should not be so big in size, was: " + size,size < 32 * 1024 * 1024) @TO@ MethodInvocation:assertTrue(file + " should not be so big in size, was: " + size,size < 34 * 1024 * 1024) @AT@ 2120 @LENGTH@ 90
---UPD MethodInvocation@@assertTrue(file + " should not be so big in size, was: " + size,size < 32 * 1024 * 1024) @TO@ assertTrue(file + " should not be so big in size, was: " + size,size < 34 * 1024 * 1024) @AT@ 2120 @LENGTH@ 89
------UPD SimpleName@@MethodName:assertTrue:[file + " should not be so big in size, was: " + size, size < 32 * 1024 * 1024] @TO@ MethodName:assertTrue:[file + " should not be so big in size, was: " + size, size < 34 * 1024 * 1024] @AT@ 2120 @LENGTH@ 89
---------UPD InfixExpression@@size < 32 * 1024 * 1024 @TO@ size < 34 * 1024 * 1024 @AT@ 2185 @LENGTH@ 23
------------UPD InfixExpression@@32 * 1024 * 1024 @TO@ 34 * 1024 * 1024 @AT@ 2192 @LENGTH@ 16
---------------UPD NumberLiteral@@32 @TO@ 34 @AT@ 2192 @LENGTH@ 2


UPD MethodDeclaration@@public, boolean, MethodName:canAppearNext, CommandContext ctx,  @TO@ public, boolean, MethodName:canAppearNext, CommandContext ctx, CommandFormatException,  @AT@ 2609 @LENGTH@ 254
---INS SimpleType@@CommandFormatException @TO@ MethodDeclaration@@public, boolean, MethodName:canAppearNext, CommandContext ctx,  @AT@ 2695 @LENGTH@ 22


UPD MethodDeclaration@@public, void, MethodName:afterPropertiesSet, Exception,  @TO@ public, void, MethodName:afterPropertiesSet,  @AT@ 3619 @LENGTH@ 415
---DEL SimpleType@@Exception @AT@ 3659 @LENGTH@ 9


UPD ExpressionStatement@@Assignment:cacheManager=new CacheManagerFactory().instantiateCacheManager() @TO@ Assignment:cacheManager=new DefaultCacheManagerFactory().instantiateCacheManager() @AT@ 1857 @LENGTH@ 67
---UPD Assignment@@cacheManager=new CacheManagerFactory().instantiateCacheManager() @TO@ cacheManager=new DefaultCacheManagerFactory().instantiateCacheManager() @AT@ 1857 @LENGTH@ 66
------UPD MethodInvocation@@new CacheManagerFactory().instantiateCacheManager() @TO@ new DefaultCacheManagerFactory().instantiateCacheManager() @AT@ 1872 @LENGTH@ 51
---------UPD ClassInstanceCreation@@CacheManagerFactory[] @TO@ DefaultCacheManagerFactory[] @AT@ 1872 @LENGTH@ 25
------------UPD SimpleType@@CacheManagerFactory @TO@ DefaultCacheManagerFactory @AT@ 1876 @LENGTH@ 19


INS MethodDeclaration@@public, String, MethodName:getState,  @TO@ TypeDeclaration@@[@ManagedResource(description="Managed JMS Endpoint"), public]JmsEndpoint, DefaultEndpoint[HeaderFilterStrategyAware, MultipleConsumersSupport, Service] @AT@ 32307 @LENGTH@ 243
---INS Modifier@@public @TO@ MethodDeclaration@@public, String, MethodName:getState,  @AT@ 32307 @LENGTH@ 6
---INS SimpleType@@String @TO@ MethodDeclaration@@public, String, MethodName:getState,  @AT@ 32314 @LENGTH@ 6
---INS SimpleName@@MethodName:getState @TO@ MethodDeclaration@@public, String, MethodName:getState,  @AT@ 32321 @LENGTH@ 8
---INS VariableDeclarationStatement@@ServiceStatus status=this.getStatus(); @TO@ MethodDeclaration@@public, String, MethodName:getState,  @AT@ 32342 @LENGTH@ 40
------INS SimpleType@@ServiceStatus @TO@ VariableDeclarationStatement@@ServiceStatus status=this.getStatus(); @AT@ 32342 @LENGTH@ 13
------INS VariableDeclarationFragment@@status=this.getStatus() @TO@ VariableDeclarationStatement@@ServiceStatus status=this.getStatus(); @AT@ 32356 @LENGTH@ 25
---------INS SimpleName@@status @TO@ VariableDeclarationFragment@@status=this.getStatus() @AT@ 32356 @LENGTH@ 6
---------INS MethodInvocation@@this.getStatus() @TO@ VariableDeclarationFragment@@status=this.getStatus() @AT@ 32365 @LENGTH@ 16
------------INS ThisExpression@@this @TO@ MethodInvocation@@this.getStatus() @AT@ 32365 @LENGTH@ 4
------------INS SimpleName@@MethodName:getStatus:[] @TO@ MethodInvocation@@this.getStatus() @AT@ 32370 @LENGTH@ 11
---INS IfStatement@@if (status == null) {  status=ServiceStatus.Stopped;} @TO@ MethodDeclaration@@public, String, MethodName:getState,  @AT@ 32439 @LENGTH@ 75
------INS InfixExpression@@status == null @TO@ IfStatement@@if (status == null) {  status=ServiceStatus.Stopped;} @AT@ 32443 @LENGTH@ 14
---------INS SimpleName@@status @TO@ InfixExpression@@status == null @AT@ 32443 @LENGTH@ 6
---------INS Operator@@== @TO@ InfixExpression@@status == null @AT@ 32449 @LENGTH@ 2
---------INS NullLiteral@@null @TO@ InfixExpression@@status == null @AT@ 32453 @LENGTH@ 4
------INS Block@@ThenBody:{  status=ServiceStatus.Stopped;} @TO@ IfStatement@@if (status == null) {  status=ServiceStatus.Stopped;} @AT@ 32459 @LENGTH@ 55
---------INS ExpressionStatement@@Assignment:status=ServiceStatus.Stopped @TO@ Block@@ThenBody:{  status=ServiceStatus.Stopped;} @AT@ 32473 @LENGTH@ 31
------------INS Assignment@@status=ServiceStatus.Stopped @TO@ ExpressionStatement@@Assignment:status=ServiceStatus.Stopped @AT@ 32473 @LENGTH@ 30
---------------INS SimpleName@@status @TO@ Assignment@@status=ServiceStatus.Stopped @AT@ 32473 @LENGTH@ 6
---------------INS Operator@@= @TO@ Assignment@@status=ServiceStatus.Stopped @AT@ 32479 @LENGTH@ 1
---------------INS QualifiedName@@ServiceStatus.Stopped @TO@ Assignment@@status=ServiceStatus.Stopped @AT@ 32482 @LENGTH@ 21
------------------INS SimpleName@@ServiceStatus @TO@ QualifiedName@@ServiceStatus.Stopped @AT@ 32482 @LENGTH@ 13
------------------INS SimpleName@@Stopped @TO@ QualifiedName@@ServiceStatus.Stopped @AT@ 32496 @LENGTH@ 7
---INS ReturnStatement@@MethodInvocation:status.name() @TO@ MethodDeclaration@@public, String, MethodName:getState,  @AT@ 32523 @LENGTH@ 21
------INS MethodInvocation@@status.name() @TO@ ReturnStatement@@MethodInvocation:status.name() @AT@ 32530 @LENGTH@ 13
---------INS SimpleName@@Name:status @TO@ MethodInvocation@@status.name() @AT@ 32530 @LENGTH@ 6
---------INS SimpleName@@MethodName:name:[] @TO@ MethodInvocation@@status.name() @AT@ 32537 @LENGTH@ 6


UPD MethodDeclaration@@protected, void, MethodName:doHandle, CommandContext ctx,  @TO@ protected, void, MethodName:doHandle, CommandContext ctx, CommandFormatException,  @AT@ 1791 @LENGTH@ 1319
---INS SimpleType@@CommandFormatException @TO@ MethodDeclaration@@protected, void, MethodName:doHandle, CommandContext ctx,  @AT@ 1890 @LENGTH@ 22


UPD IfStatement@@if (topLevelResourceRoots != null) {  for (  ResourceRoot resourceRoot : topLevelResourceRoots) {    if (ModuleRootMarker.isModuleRoot(resourceRoot) && !SubDeploymentMarker.isSubDeployment(resourceRoot)) {      earLibJars.add(resourceRoot.getRoot());    }  }} @TO@ if (deploymentUnit.getParent() != null && topLevelResourceRoots != null) {  for (  ResourceRoot resourceRoot : topLevelResourceRoots) {    if (ModuleRootMarker.isModuleRoot(resourceRoot) && !SubDeploymentMarker.isSubDeployment(resourceRoot)) {      earLibJars.add(resourceRoot.getRoot());    }  }} @AT@ 4909 @LENGTH@ 329
---INS InfixExpression@@deploymentUnit.getParent() != null && topLevelResourceRoots != null @TO@ IfStatement@@if (topLevelResourceRoots != null) {  for (  ResourceRoot resourceRoot : topLevelResourceRoots) {    if (ModuleRootMarker.isModuleRoot(resourceRoot) && !SubDeploymentMarker.isSubDeployment(resourceRoot)) {      earLibJars.add(resourceRoot.getRoot());    }  }} @AT@ 4913 @LENGTH@ 67
------INS InfixExpression@@deploymentUnit.getParent() != null @TO@ InfixExpression@@deploymentUnit.getParent() != null && topLevelResourceRoots != null @AT@ 4913 @LENGTH@ 34
---------INS MethodInvocation@@deploymentUnit.getParent() @TO@ InfixExpression@@deploymentUnit.getParent() != null @AT@ 4913 @LENGTH@ 26
------------INS SimpleName@@Name:deploymentUnit @TO@ MethodInvocation@@deploymentUnit.getParent() @AT@ 4913 @LENGTH@ 14
------------INS SimpleName@@MethodName:getParent:[] @TO@ MethodInvocation@@deploymentUnit.getParent() @AT@ 4928 @LENGTH@ 11
---------INS Operator@@!= @TO@ InfixExpression@@deploymentUnit.getParent() != null @AT@ 4939 @LENGTH@ 2
---------INS NullLiteral@@null @TO@ InfixExpression@@deploymentUnit.getParent() != null @AT@ 4943 @LENGTH@ 4
------INS Operator@@&& @TO@ InfixExpression@@deploymentUnit.getParent() != null && topLevelResourceRoots != null @AT@ 4947 @LENGTH@ 2
------INS InfixExpression@@topLevelResourceRoots != null @TO@ InfixExpression@@deploymentUnit.getParent() != null && topLevelResourceRoots != null @AT@ 4951 @LENGTH@ 29
---------MOV SimpleName@@topLevelResourceRoots @TO@ InfixExpression@@topLevelResourceRoots != null @AT@ 4913 @LENGTH@ 21
---------MOV Operator@@!= @TO@ InfixExpression@@topLevelResourceRoots != null @AT@ 4934 @LENGTH@ 2
---------MOV NullLiteral@@null @TO@ InfixExpression@@topLevelResourceRoots != null @AT@ 4938 @LENGTH@ 4
---DEL InfixExpression@@topLevelResourceRoots != null @AT@ 4913 @LENGTH@ 29


INS ExpressionStatement@@MethodInvocation:HttpProtocolParams.setUseExpectContinue(params,false) @TO@ MethodDeclaration@@protected, void, MethodName:postProcessHttpRequest, HttpUriRequest httpRequest,  @AT@ 6670 @LENGTH@ 55
---INS MethodInvocation@@HttpProtocolParams.setUseExpectContinue(params,false) @TO@ ExpressionStatement@@MethodInvocation:HttpProtocolParams.setUseExpectContinue(params,false) @AT@ 6670 @LENGTH@ 54
------INS SimpleName@@Name:HttpProtocolParams @TO@ MethodInvocation@@HttpProtocolParams.setUseExpectContinue(params,false) @AT@ 6670 @LENGTH@ 18
------INS SimpleName@@MethodName:setUseExpectContinue:[params, false] @TO@ MethodInvocation@@HttpProtocolParams.setUseExpectContinue(params,false) @AT@ 6689 @LENGTH@ 35
---------INS SimpleName@@params @TO@ SimpleName@@MethodName:setUseExpectContinue:[params, false] @AT@ 6710 @LENGTH@ 6
---------INS BooleanLiteral@@false @TO@ SimpleName@@MethodName:setUseExpectContinue:[params, false] @AT@ 6718 @LENGTH@ 5


UPD MethodDeclaration@@public, boolean, MethodName:canAppearNext, CommandContext ctx,  @TO@ public, boolean, MethodName:canAppearNext, CommandContext ctx, CommandFormatException,  @AT@ 2609 @LENGTH@ 254
---INS SimpleType@@CommandFormatException @TO@ MethodDeclaration@@public, boolean, MethodName:canAppearNext, CommandContext ctx,  @AT@ 2695 @LENGTH@ 22


INS FieldDeclaration@@public, static, final, int, [INSTALL_JDBC_DRIVER=0x1600] @TO@ EnumDeclaration@@[public]Phase,  @AT@ 13642 @LENGTH@ 77
---INS Modifier@@public @TO@ FieldDeclaration@@public, static, final, int, [INSTALL_JDBC_DRIVER=0x1600] @AT@ 13642 @LENGTH@ 6
---INS Modifier@@static @TO@ FieldDeclaration@@public, static, final, int, [INSTALL_JDBC_DRIVER=0x1600] @AT@ 13649 @LENGTH@ 6
---INS Modifier@@final @TO@ FieldDeclaration@@public, static, final, int, [INSTALL_JDBC_DRIVER=0x1600] @AT@ 13656 @LENGTH@ 5
---INS PrimitiveType@@int @TO@ FieldDeclaration@@public, static, final, int, [INSTALL_JDBC_DRIVER=0x1600] @AT@ 13662 @LENGTH@ 3
---INS VariableDeclarationFragment@@INSTALL_JDBC_DRIVER=0x1600 @TO@ FieldDeclaration@@public, static, final, int, [INSTALL_JDBC_DRIVER=0x1600] @AT@ 13666 @LENGTH@ 52
------INS SimpleName@@INSTALL_JDBC_DRIVER @TO@ VariableDeclarationFragment@@INSTALL_JDBC_DRIVER=0x1600 @AT@ 13666 @LENGTH@ 19
------INS NumberLiteral@@0x1600 @TO@ VariableDeclarationFragment@@INSTALL_JDBC_DRIVER=0x1600 @AT@ 13712 @LENGTH@ 6


UPD TryStatement@@try {  PersistentEntity<T> entity=builder.createPersistentEntity(type,this);  BeanInfo info=Introspector.getBeanInfo(type);  Map<String,PropertyDescriptor> descriptors=new HashMap<String,PropertyDescriptor>();  for (  PropertyDescriptor descriptor : info.getPropertyDescriptors()) {    descriptors.put(descriptor.getName(),descriptor);  }  for (  Field field : type.getDeclaredFields()) {    PropertyDescriptor descriptor=descriptors.get(field.getName());    if (builder.isPersistentProperty(field,descriptor)) {      PersistentProperty<?> property=builder.createPersistentProperty(field,descriptor);      property.setOwner(entity);      entity.addPersistentProperty(property);      if (builder.isAssociation(field,descriptor)) {        Association association=builder.createAssociation(property);        entity.addAssociation(association);      }    }  }  entity.setIdProperty(builder.getIdProperty(type));  entity.setPreferredConstructor(builder.getPreferredConstructor(type));  List<Listener> listenersToRemove=new ArrayList<Listener>();  for (  Listener listener : listeners) {    if (!listener.persistentEntityAdded(entity)) {      listenersToRemove.add(listener);    }  }  for (  Listener listener : listenersToRemove) {    listeners.remove(listener);  }  persistentEntities.put(type.getName(),entity);  return entity;} catch (MappingConfigurationException e) {  log.error(e.getMessage(),e);}catch (IntrospectionException e) {  throw new MappingException(e.getMessage(),e);} @TO@ try {  PersistentEntity<T> entity=builder.createPersistentEntity(type,this);  BeanInfo info=Introspector.getBeanInfo(type);  Map<String,PropertyDescriptor> descriptors=new HashMap<String,PropertyDescriptor>();  for (  PropertyDescriptor descriptor : info.getPropertyDescriptors()) {    descriptors.put(descriptor.getName(),descriptor);  }  List<Field> fields=new LinkedList<Field>(Arrays.asList(type.getDeclaredFields()));  Class<?> superClazz=type.getSuperclass();  while (Object.class != superClazz) {    fields.addAll(new LinkedList<Field>(Arrays.asList(superClazz.getDeclaredFields())));    superClazz=superClazz.getSuperclass();  }  for (  Field field : fields) {    PropertyDescriptor descriptor=descriptors.get(field.getName());    if (builder.isPersistentProperty(field,descriptor)) {      PersistentProperty<?> property=builder.createPersistentProperty(field,descriptor);      property.setOwner(entity);      entity.addPersistentProperty(property);      if (builder.isAssociation(field,descriptor)) {        Association association=builder.createAssociation(property);        entity.addAssociation(association);      }    }  }  entity.setIdProperty(builder.getIdProperty(type));  entity.setPreferredConstructor(builder.getPreferredConstructor(type));  List<Listener> listenersToRemove=new ArrayList<Listener>();  for (  Listener listener : listeners) {    if (!listener.persistentEntityAdded(entity)) {      listenersToRemove.add(listener);    }  }  for (  Listener listener : listenersToRemove) {    listeners.remove(listener);  }  persistentEntities.put(type.getName(),entity);  return entity;} catch (MappingConfigurationException e) {  log.error(e.getMessage(),e);}catch (IntrospectionException e) {  throw new MappingException(e.getMessage(),e);} @AT@ 3283 @LENGTH@ 1783
---UPD EnhancedForStatement@@for (Field field : type.getDeclaredFields()) {  PropertyDescriptor descriptor=descriptors.get(field.getName());  if (builder.isPersistentProperty(field,descriptor)) {    PersistentProperty<?> property=builder.createPersistentProperty(field,descriptor);    property.setOwner(entity);    entity.addPersistentProperty(property);    if (builder.isAssociation(field,descriptor)) {      Association association=builder.createAssociation(property);      entity.addAssociation(association);    }  }} @TO@ for (Field field : fields) {  PropertyDescriptor descriptor=descriptors.get(field.getName());  if (builder.isPersistentProperty(field,descriptor)) {    PersistentProperty<?> property=builder.createPersistentProperty(field,descriptor);    property.setOwner(entity);    entity.addPersistentProperty(property);    if (builder.isAssociation(field,descriptor)) {      Association association=builder.createAssociation(property);      entity.addAssociation(association);    }  }} @AT@ 3682 @LENGTH@ 599
------DEL MethodInvocation@@type.getDeclaredFields() @AT@ 3701 @LENGTH@ 24
---------DEL SimpleName@@Name:type @AT@ 3701 @LENGTH@ 4
---------DEL SimpleName@@MethodName:getDeclaredFields:[] @AT@ 3706 @LENGTH@ 19
------INS SimpleName@@fields @TO@ EnhancedForStatement@@for (Field field : type.getDeclaredFields()) {  PropertyDescriptor descriptor=descriptors.get(field.getName());  if (builder.isPersistentProperty(field,descriptor)) {    PersistentProperty<?> property=builder.createPersistentProperty(field,descriptor);    property.setOwner(entity);    entity.addPersistentProperty(property);    if (builder.isAssociation(field,descriptor)) {      Association association=builder.createAssociation(property);      entity.addAssociation(association);    }  }} @AT@ 4047 @LENGTH@ 6
---INS VariableDeclarationStatement@@List<Field> fields=new LinkedList<Field>(Arrays.asList(type.getDeclaredFields())); @TO@ TryStatement@@try {  PersistentEntity<T> entity=builder.createPersistentEntity(type,this);  BeanInfo info=Introspector.getBeanInfo(type);  Map<String,PropertyDescriptor> descriptors=new HashMap<String,PropertyDescriptor>();  for (  PropertyDescriptor descriptor : info.getPropertyDescriptors()) {    descriptors.put(descriptor.getName(),descriptor);  }  for (  Field field : type.getDeclaredFields()) {    PropertyDescriptor descriptor=descriptors.get(field.getName());    if (builder.isPersistentProperty(field,descriptor)) {      PersistentProperty<?> property=builder.createPersistentProperty(field,descriptor);      property.setOwner(entity);      entity.addPersistentProperty(property);      if (builder.isAssociation(field,descriptor)) {        Association association=builder.createAssociation(property);        entity.addAssociation(association);      }    }  }  entity.setIdProperty(builder.getIdProperty(type));  entity.setPreferredConstructor(builder.getPreferredConstructor(type));  List<Listener> listenersToRemove=new ArrayList<Listener>();  for (  Listener listener : listeners) {    if (!listener.persistentEntityAdded(entity)) {      listenersToRemove.add(listener);    }  }  for (  Listener listener : listenersToRemove) {    listeners.remove(listener);  }  persistentEntities.put(type.getName(),entity);  return entity;} catch (MappingConfigurationException e) {  log.error(e.getMessage(),e);}catch (IntrospectionException e) {  throw new MappingException(e.getMessage(),e);} @AT@ 3682 @LENGTH@ 84
------INS ParameterizedType@@List<Field> @TO@ VariableDeclarationStatement@@List<Field> fields=new LinkedList<Field>(Arrays.asList(type.getDeclaredFields())); @AT@ 3682 @LENGTH@ 11
---------INS SimpleType@@List @TO@ ParameterizedType@@List<Field> @AT@ 3682 @LENGTH@ 4
---------INS SimpleType@@Field @TO@ ParameterizedType@@List<Field> @AT@ 3687 @LENGTH@ 5
------INS VariableDeclarationFragment@@fields=new LinkedList<Field>(Arrays.asList(type.getDeclaredFields())) @TO@ VariableDeclarationStatement@@List<Field> fields=new LinkedList<Field>(Arrays.asList(type.getDeclaredFields())); @AT@ 3694 @LENGTH@ 71
---------INS SimpleName@@fields @TO@ VariableDeclarationFragment@@fields=new LinkedList<Field>(Arrays.asList(type.getDeclaredFields())) @AT@ 3694 @LENGTH@ 6
---------INS ClassInstanceCreation@@LinkedList<Field>[Arrays.asList(type.getDeclaredFields())] @TO@ VariableDeclarationFragment@@fields=new LinkedList<Field>(Arrays.asList(type.getDeclaredFields())) @AT@ 3703 @LENGTH@ 62
------------INS New@@new @TO@ ClassInstanceCreation@@LinkedList<Field>[Arrays.asList(type.getDeclaredFields())] @AT@ 3703 @LENGTH@ 3
------------INS ParameterizedType@@LinkedList<Field> @TO@ ClassInstanceCreation@@LinkedList<Field>[Arrays.asList(type.getDeclaredFields())] @AT@ 3707 @LENGTH@ 17
---------------INS SimpleType@@LinkedList @TO@ ParameterizedType@@LinkedList<Field> @AT@ 3707 @LENGTH@ 10
---------------INS SimpleType@@Field @TO@ ParameterizedType@@LinkedList<Field> @AT@ 3718 @LENGTH@ 5
------------INS MethodInvocation@@Arrays.asList(type.getDeclaredFields()) @TO@ ClassInstanceCreation@@LinkedList<Field>[Arrays.asList(type.getDeclaredFields())] @AT@ 3725 @LENGTH@ 39
---------------INS SimpleName@@Name:Arrays @TO@ MethodInvocation@@Arrays.asList(type.getDeclaredFields()) @AT@ 3725 @LENGTH@ 6
---------------INS SimpleName@@MethodName:asList:[type.getDeclaredFields()] @TO@ MethodInvocation@@Arrays.asList(type.getDeclaredFields()) @AT@ 3732 @LENGTH@ 32
------------------INS MethodInvocation@@type.getDeclaredFields() @TO@ SimpleName@@MethodName:asList:[type.getDeclaredFields()] @AT@ 3739 @LENGTH@ 24
---------------------INS SimpleName@@Name:type @TO@ MethodInvocation@@type.getDeclaredFields() @AT@ 3739 @LENGTH@ 4
---------------------INS SimpleName@@MethodName:getDeclaredFields:[] @TO@ MethodInvocation@@type.getDeclaredFields() @AT@ 3744 @LENGTH@ 19
---INS VariableDeclarationStatement@@Class<?> superClazz=type.getSuperclass(); @TO@ TryStatement@@try {  PersistentEntity<T> entity=builder.createPersistentEntity(type,this);  BeanInfo info=Introspector.getBeanInfo(type);  Map<String,PropertyDescriptor> descriptors=new HashMap<String,PropertyDescriptor>();  for (  PropertyDescriptor descriptor : info.getPropertyDescriptors()) {    descriptors.put(descriptor.getName(),descriptor);  }  for (  Field field : type.getDeclaredFields()) {    PropertyDescriptor descriptor=descriptors.get(field.getName());    if (builder.isPersistentProperty(field,descriptor)) {      PersistentProperty<?> property=builder.createPersistentProperty(field,descriptor);      property.setOwner(entity);      entity.addPersistentProperty(property);      if (builder.isAssociation(field,descriptor)) {        Association association=builder.createAssociation(property);        entity.addAssociation(association);      }    }  }  entity.setIdProperty(builder.getIdProperty(type));  entity.setPreferredConstructor(builder.getPreferredConstructor(type));  List<Listener> listenersToRemove=new ArrayList<Listener>();  for (  Listener listener : listeners) {    if (!listener.persistentEntityAdded(entity)) {      listenersToRemove.add(listener);    }  }  for (  Listener listener : listenersToRemove) {    listeners.remove(listener);  }  persistentEntities.put(type.getName(),entity);  return entity;} catch (MappingConfigurationException e) {  log.error(e.getMessage(),e);}catch (IntrospectionException e) {  throw new MappingException(e.getMessage(),e);} @AT@ 3775 @LENGTH@ 43
------INS ParameterizedType@@Class<?> @TO@ VariableDeclarationStatement@@Class<?> superClazz=type.getSuperclass(); @AT@ 3775 @LENGTH@ 8
---------INS SimpleType@@Class @TO@ ParameterizedType@@Class<?> @AT@ 3775 @LENGTH@ 5
---------INS WildcardType@@? @TO@ ParameterizedType@@Class<?> @AT@ 3781 @LENGTH@ 1
------INS VariableDeclarationFragment@@superClazz=type.getSuperclass() @TO@ VariableDeclarationStatement@@Class<?> superClazz=type.getSuperclass(); @AT@ 3784 @LENGTH@ 33
---------INS SimpleName@@superClazz @TO@ VariableDeclarationFragment@@superClazz=type.getSuperclass() @AT@ 3784 @LENGTH@ 10
---------INS MethodInvocation@@type.getSuperclass() @TO@ VariableDeclarationFragment@@superClazz=type.getSuperclass() @AT@ 3797 @LENGTH@ 20
------------INS SimpleName@@Name:type @TO@ MethodInvocation@@type.getSuperclass() @AT@ 3797 @LENGTH@ 4
------------INS SimpleName@@MethodName:getSuperclass:[] @TO@ MethodInvocation@@type.getSuperclass() @AT@ 3802 @LENGTH@ 15
---INS WhileStatement@@while (Object.class != superClazz) {  fields.addAll(new LinkedList<Field>(Arrays.asList(superClazz.getDeclaredFields())));  superClazz=superClazz.getSuperclass();} @TO@ TryStatement@@try {  PersistentEntity<T> entity=builder.createPersistentEntity(type,this);  BeanInfo info=Introspector.getBeanInfo(type);  Map<String,PropertyDescriptor> descriptors=new HashMap<String,PropertyDescriptor>();  for (  PropertyDescriptor descriptor : info.getPropertyDescriptors()) {    descriptors.put(descriptor.getName(),descriptor);  }  for (  Field field : type.getDeclaredFields()) {    PropertyDescriptor descriptor=descriptors.get(field.getName());    if (builder.isPersistentProperty(field,descriptor)) {      PersistentProperty<?> property=builder.createPersistentProperty(field,descriptor);      property.setOwner(entity);      entity.addPersistentProperty(property);      if (builder.isAssociation(field,descriptor)) {        Association association=builder.createAssociation(property);        entity.addAssociation(association);      }    }  }  entity.setIdProperty(builder.getIdProperty(type));  entity.setPreferredConstructor(builder.getPreferredConstructor(type));  List<Listener> listenersToRemove=new ArrayList<Listener>();  for (  Listener listener : listeners) {    if (!listener.persistentEntityAdded(entity)) {      listenersToRemove.add(listener);    }  }  for (  Listener listener : listenersToRemove) {    listeners.remove(listener);  }  persistentEntities.put(type.getName(),entity);  return entity;} catch (MappingConfigurationException e) {  log.error(e.getMessage(),e);}catch (IntrospectionException e) {  throw new MappingException(e.getMessage(),e);} @AT@ 3827 @LENGTH@ 192
------INS InfixExpression@@Object.class != superClazz @TO@ WhileStatement@@while (Object.class != superClazz) {  fields.addAll(new LinkedList<Field>(Arrays.asList(superClazz.getDeclaredFields())));  superClazz=superClazz.getSuperclass();} @AT@ 3834 @LENGTH@ 26
---------INS TypeLiteral@@Object.class @TO@ InfixExpression@@Object.class != superClazz @AT@ 3834 @LENGTH@ 12
---------INS Operator@@!= @TO@ InfixExpression@@Object.class != superClazz @AT@ 3846 @LENGTH@ 2
---------INS SimpleName@@superClazz @TO@ InfixExpression@@Object.class != superClazz @AT@ 3850 @LENGTH@ 10
------INS Block@@WhileBody:{  fields.addAll(new LinkedList<Field>(Arrays.asList(superClazz.getDeclaredFields())));  superClazz=superClazz.getSuperclass();} @TO@ WhileStatement@@while (Object.class != superClazz) {  fields.addAll(new LinkedList<Field>(Arrays.asList(superClazz.getDeclaredFields())));  superClazz=superClazz.getSuperclass();} @AT@ 3862 @LENGTH@ 157
---------INS ExpressionStatement@@MethodInvocation:fields.addAll(new LinkedList<Field>(Arrays.asList(superClazz.getDeclaredFields()))) @TO@ Block@@WhileBody:{  fields.addAll(new LinkedList<Field>(Arrays.asList(superClazz.getDeclaredFields())));  superClazz=superClazz.getSuperclass();} @AT@ 3874 @LENGTH@ 84
------------INS MethodInvocation@@fields.addAll(new LinkedList<Field>(Arrays.asList(superClazz.getDeclaredFields()))) @TO@ ExpressionStatement@@MethodInvocation:fields.addAll(new LinkedList<Field>(Arrays.asList(superClazz.getDeclaredFields()))) @AT@ 3874 @LENGTH@ 83
---------------INS SimpleName@@Name:fields @TO@ MethodInvocation@@fields.addAll(new LinkedList<Field>(Arrays.asList(superClazz.getDeclaredFields()))) @AT@ 3874 @LENGTH@ 6
---------------INS SimpleName@@MethodName:addAll:[new LinkedList<Field>(Arrays.asList(superClazz.getDeclaredFields()))] @TO@ MethodInvocation@@fields.addAll(new LinkedList<Field>(Arrays.asList(superClazz.getDeclaredFields()))) @AT@ 3881 @LENGTH@ 76
------------------INS ClassInstanceCreation@@LinkedList<Field>[Arrays.asList(superClazz.getDeclaredFields())] @TO@ SimpleName@@MethodName:addAll:[new LinkedList<Field>(Arrays.asList(superClazz.getDeclaredFields()))] @AT@ 3888 @LENGTH@ 68
---------------------INS New@@new @TO@ ClassInstanceCreation@@LinkedList<Field>[Arrays.asList(superClazz.getDeclaredFields())] @AT@ 3888 @LENGTH@ 3
---------------------INS ParameterizedType@@LinkedList<Field> @TO@ ClassInstanceCreation@@LinkedList<Field>[Arrays.asList(superClazz.getDeclaredFields())] @AT@ 3892 @LENGTH@ 17
------------------------INS SimpleType@@LinkedList @TO@ ParameterizedType@@LinkedList<Field> @AT@ 3892 @LENGTH@ 10
------------------------INS SimpleType@@Field @TO@ ParameterizedType@@LinkedList<Field> @AT@ 3903 @LENGTH@ 5
---------------------INS MethodInvocation@@Arrays.asList(superClazz.getDeclaredFields()) @TO@ ClassInstanceCreation@@LinkedList<Field>[Arrays.asList(superClazz.getDeclaredFields())] @AT@ 3910 @LENGTH@ 45
------------------------INS SimpleName@@Name:Arrays @TO@ MethodInvocation@@Arrays.asList(superClazz.getDeclaredFields()) @AT@ 3910 @LENGTH@ 6
------------------------INS SimpleName@@MethodName:asList:[superClazz.getDeclaredFields()] @TO@ MethodInvocation@@Arrays.asList(superClazz.getDeclaredFields()) @AT@ 3917 @LENGTH@ 38
---------------------------INS MethodInvocation@@superClazz.getDeclaredFields() @TO@ SimpleName@@MethodName:asList:[superClazz.getDeclaredFields()] @AT@ 3924 @LENGTH@ 30
------------------------------INS SimpleName@@Name:superClazz @TO@ MethodInvocation@@superClazz.getDeclaredFields() @AT@ 3924 @LENGTH@ 10
------------------------------INS SimpleName@@MethodName:getDeclaredFields:[] @TO@ MethodInvocation@@superClazz.getDeclaredFields() @AT@ 3935 @LENGTH@ 19
---------INS ExpressionStatement@@Assignment:superClazz=superClazz.getSuperclass() @TO@ Block@@WhileBody:{  fields.addAll(new LinkedList<Field>(Arrays.asList(superClazz.getDeclaredFields())));  superClazz=superClazz.getSuperclass();} @AT@ 3969 @LENGTH@ 40
------------INS Assignment@@superClazz=superClazz.getSuperclass() @TO@ ExpressionStatement@@Assignment:superClazz=superClazz.getSuperclass() @AT@ 3969 @LENGTH@ 39
---------------INS SimpleName@@superClazz @TO@ Assignment@@superClazz=superClazz.getSuperclass() @AT@ 3969 @LENGTH@ 10
---------------INS Operator@@= @TO@ Assignment@@superClazz=superClazz.getSuperclass() @AT@ 3979 @LENGTH@ 1
---------------INS MethodInvocation@@superClazz.getSuperclass() @TO@ Assignment@@superClazz=superClazz.getSuperclass() @AT@ 3982 @LENGTH@ 26
------------------INS SimpleName@@Name:superClazz @TO@ MethodInvocation@@superClazz.getSuperclass() @AT@ 3982 @LENGTH@ 10
------------------INS SimpleName@@MethodName:getSuperclass:[] @TO@ MethodInvocation@@superClazz.getSuperclass() @AT@ 3993 @LENGTH@ 15


UPD IfStatement@@if (appArchive instanceof WebArchive) {  final ArchivePath webInfLib=ArchivePaths.create("WEB-INF","lib");  for (  Archive<?> aux : auxArchives) {    if (!excludedAuxillaryArchives.contains(aux.getName())) {      appArchive.add(aux,webInfLib);    }  }} else {  merge(appArchive,auxArchives);} @TO@ if (WebArchive.class.isAssignableFrom(appArchive.getClass())) {  final ArchivePath webInfLib=ArchivePaths.create("WEB-INF","lib");  for (  Archive<?> aux : auxArchives) {    if (!excludedAuxillaryArchives.contains(aux.getName())) {      appArchive.add(aux,webInfLib);    }  }} else {  merge(appArchive,auxArchives);} @AT@ 2334 @LENGTH@ 617
---DEL InstanceofExpression@@appArchive instanceof WebArchive @AT@ 2338 @LENGTH@ 32
------DEL SimpleName@@appArchive @AT@ 2338 @LENGTH@ 10
------DEL Instanceof@@instanceof @AT@ 2349 @LENGTH@ 10
------DEL SimpleType@@WebArchive @AT@ 2360 @LENGTH@ 10
---INS MethodInvocation@@WebArchive.class.isAssignableFrom(appArchive.getClass()) @TO@ IfStatement@@if (appArchive instanceof WebArchive) {  final ArchivePath webInfLib=ArchivePaths.create("WEB-INF","lib");  for (  Archive<?> aux : auxArchives) {    if (!excludedAuxillaryArchives.contains(aux.getName())) {      appArchive.add(aux,webInfLib);    }  }} else {  merge(appArchive,auxArchives);} @AT@ 2471 @LENGTH@ 56
------INS TypeLiteral@@WebArchive.class @TO@ MethodInvocation@@WebArchive.class.isAssignableFrom(appArchive.getClass()) @AT@ 2471 @LENGTH@ 16
------INS SimpleName@@MethodName:isAssignableFrom:[appArchive.getClass()] @TO@ MethodInvocation@@WebArchive.class.isAssignableFrom(appArchive.getClass()) @AT@ 2488 @LENGTH@ 39
---------INS MethodInvocation@@appArchive.getClass() @TO@ SimpleName@@MethodName:isAssignableFrom:[appArchive.getClass()] @AT@ 2505 @LENGTH@ 21
------------INS SimpleName@@Name:appArchive @TO@ MethodInvocation@@appArchive.getClass() @AT@ 2505 @LENGTH@ 10
------------INS SimpleName@@MethodName:getClass:[] @TO@ MethodInvocation@@appArchive.getClass() @AT@ 2516 @LENGTH@ 10


INS ExpressionStatement@@Assignment:ctx.location=i @TO@ MethodDeclaration@@public, static, void, MethodName:parse, String str, ParsingStateCallbackHandler callbackHandler, ParsingState initialState, OperationFormatException,  @AT@ 2496 @LENGTH@ 17
---INS Assignment@@ctx.location=i @TO@ ExpressionStatement@@Assignment:ctx.location=i @AT@ 2496 @LENGTH@ 16
------INS QualifiedName@@ctx.location @TO@ Assignment@@ctx.location=i @AT@ 2496 @LENGTH@ 12
---------INS SimpleName@@ctx @TO@ QualifiedName@@ctx.location @AT@ 2496 @LENGTH@ 3
---------INS SimpleName@@location @TO@ QualifiedName@@ctx.location @AT@ 2500 @LENGTH@ 8
------INS Operator@@= @TO@ Assignment@@ctx.location=i @AT@ 2508 @LENGTH@ 1
------INS SimpleName@@i @TO@ Assignment@@ctx.location=i @AT@ 2511 @LENGTH@ 1


INS MethodDeclaration@@public, int, MethodName:getInputStreamCount,  @TO@ TypeDeclaration@@ExecutionContextImpl, [ExecutionContextBuilder, ExecutionContext] @AT@ 1998 @LENGTH@ 134
---INS Modifier@@public @TO@ MethodDeclaration@@public, int, MethodName:getInputStreamCount,  @AT@ 1998 @LENGTH@ 6
---INS PrimitiveType@@int @TO@ MethodDeclaration@@public, int, MethodName:getInputStreamCount,  @AT@ 2005 @LENGTH@ 3
---INS SimpleName@@MethodName:getInputStreamCount @TO@ MethodDeclaration@@public, int, MethodName:getInputStreamCount,  @AT@ 2009 @LENGTH@ 19
---INS VariableDeclarationStatement@@List<InputStream> list=inputStreams; @TO@ MethodDeclaration@@public, int, MethodName:getInputStreamCount,  @AT@ 2041 @LENGTH@ 38
------INS ParameterizedType@@List<InputStream> @TO@ VariableDeclarationStatement@@List<InputStream> list=inputStreams; @AT@ 2041 @LENGTH@ 17
---------INS SimpleType@@List @TO@ ParameterizedType@@List<InputStream> @AT@ 2041 @LENGTH@ 4
---------INS SimpleType@@InputStream @TO@ ParameterizedType@@List<InputStream> @AT@ 2046 @LENGTH@ 11
------INS VariableDeclarationFragment@@list=inputStreams @TO@ VariableDeclarationStatement@@List<InputStream> list=inputStreams; @AT@ 2059 @LENGTH@ 19
---------INS SimpleName@@list @TO@ VariableDeclarationFragment@@list=inputStreams @AT@ 2059 @LENGTH@ 4
---------INS SimpleName@@inputStreams @TO@ VariableDeclarationFragment@@list=inputStreams @AT@ 2066 @LENGTH@ 12
---INS ReturnStatement@@ConditionalExpression:list == null ? 0 : list.size() @TO@ MethodDeclaration@@public, int, MethodName:getInputStreamCount,  @AT@ 2088 @LENGTH@ 38
------INS ConditionalExpression@@list == null ? 0 : list.size() @TO@ ReturnStatement@@ConditionalExpression:list == null ? 0 : list.size() @AT@ 2095 @LENGTH@ 30
---------INS InfixExpression@@list == null @TO@ ConditionalExpression@@list == null ? 0 : list.size() @AT@ 2095 @LENGTH@ 12
------------INS SimpleName@@list @TO@ InfixExpression@@list == null @AT@ 2095 @LENGTH@ 4
------------INS Operator@@== @TO@ InfixExpression@@list == null @AT@ 2099 @LENGTH@ 2
------------INS NullLiteral@@null @TO@ InfixExpression@@list == null @AT@ 2103 @LENGTH@ 4
---------INS NumberLiteral@@0 @TO@ ConditionalExpression@@list == null ? 0 : list.size() @AT@ 2110 @LENGTH@ 1
---------INS MethodInvocation@@list.size() @TO@ ConditionalExpression@@list == null ? 0 : list.size() @AT@ 2114 @LENGTH@ 11
------------INS SimpleName@@Name:list @TO@ MethodInvocation@@list.size() @AT@ 2114 @LENGTH@ 4
------------INS SimpleName@@MethodName:size:[] @TO@ MethodInvocation@@list.size() @AT@ 2119 @LENGTH@ 6


UPD TryStatement@@try {  final BatchBuilder batchBuilder=updateContext.getServiceTarget();  final SizeRotatingFileHandlerService service=new SizeRotatingFileHandlerService();  final ServiceBuilder<Handler> serviceBuilder=batchBuilder.addService(LogServices.handlerName(getName()),service);  final String relativeTo=getRelativeTo();  if (relativeTo != null) {    serviceBuilder.addDependency(AbstractPathService.pathNameOf(relativeTo),String.class,service.getRelativeToInjector());  }  service.setLevel(Level.parse(getLevelName()));  final Boolean autoFlush=getAutoflush();  if (autoFlush != null)   service.setAutoflush(autoFlush.booleanValue());  try {    service.setEncoding(getEncoding());  } catch (  UnsupportedEncodingException e) {    handler.handleFailure(e,param);    return;  }  try {    service.setPath(getPath());  } catch (  FileNotFoundException e) {    handler.handleFailure(e,param);    return;  }  service.setFormatterSpec(getFormatter());  service.setMaxBackupIndex(maxBackupIndex);  service.setRotateSize(rotateSize);  serviceBuilder.setInitialMode(ServiceController.Mode.ACTIVE);  serviceBuilder.addListener(new UpdateResultHandler.ServiceStartListener<P>(handler,param));  serviceBuilder.install();} catch (Throwable t) {  handler.handleFailure(t,param);} @TO@ try {  final ServiceTarget target=updateContext.getServiceTarget();  final SizeRotatingFileHandlerService service=new SizeRotatingFileHandlerService();  final ServiceBuilder<Handler> serviceBuilder=target.addService(LogServices.handlerName(getName()),service);  final String relativeTo=getRelativeTo();  if (relativeTo != null) {    serviceBuilder.addDependency(AbstractPathService.pathNameOf(relativeTo),String.class,service.getRelativeToInjector());  }  service.setLevel(Level.parse(getLevelName()));  final Boolean autoFlush=getAutoflush();  if (autoFlush != null)   service.setAutoflush(autoFlush.booleanValue());  try {    service.setEncoding(getEncoding());  } catch (  UnsupportedEncodingException e) {    handler.handleFailure(e,param);    return;  }  try {    service.setPath(getPath());  } catch (  FileNotFoundException e) {    handler.handleFailure(e,param);    return;  }  service.setFormatterSpec(getFormatter());  service.setMaxBackupIndex(maxBackupIndex);  service.setRotateSize(rotateSize);  serviceBuilder.setInitialMode(ServiceController.Mode.ACTIVE);  serviceBuilder.addListener(new UpdateResultHandler.ServiceStartListener<P>(handler,param));  serviceBuilder.install();} catch (Throwable t) {  handler.handleFailure(t,param);} @AT@ 2738 @LENGTH@ 1620
---UPD VariableDeclarationStatement@@final BatchBuilder batchBuilder=updateContext.getServiceTarget(); @TO@ final ServiceTarget target=updateContext.getServiceTarget(); @AT@ 2756 @LENGTH@ 67
------UPD SimpleType@@BatchBuilder @TO@ ServiceTarget @AT@ 2762 @LENGTH@ 12
------UPD VariableDeclarationFragment@@batchBuilder=updateContext.getServiceTarget() @TO@ target=updateContext.getServiceTarget() @AT@ 2775 @LENGTH@ 47
---------UPD SimpleName@@batchBuilder @TO@ target @AT@ 2775 @LENGTH@ 12
---UPD VariableDeclarationStatement@@final ServiceBuilder<Handler> serviceBuilder=batchBuilder.addService(LogServices.handlerName(getName()),service); @TO@ final ServiceBuilder<Handler> serviceBuilder=target.addService(LogServices.handlerName(getName()),service); @AT@ 2933 @LENGTH@ 116
------UPD VariableDeclarationFragment@@serviceBuilder=batchBuilder.addService(LogServices.handlerName(getName()),service) @TO@ serviceBuilder=target.addService(LogServices.handlerName(getName()),service) @AT@ 2963 @LENGTH@ 85
---------UPD MethodInvocation@@batchBuilder.addService(LogServices.handlerName(getName()),service) @TO@ target.addService(LogServices.handlerName(getName()),service) @AT@ 2980 @LENGTH@ 68
------------UPD SimpleName@@Name:batchBuilder @TO@ Name:target @AT@ 2980 @LENGTH@ 12


UPD VariableDeclarationStatement@@ObjectName on=ObjectName.getInstance("org.apache.camel:context=localhost/camel-1,type=threadpools,name=myThreads(threads)"); @TO@ ObjectName on=ObjectName.getInstance("org.apache.camel:context=localhost/camel-1,type=threadpools,name=\"myThreads(threads)\""); @AT@ 1182 @LENGTH@ 126
---UPD VariableDeclarationFragment@@on=ObjectName.getInstance("org.apache.camel:context=localhost/camel-1,type=threadpools,name=myThreads(threads)") @TO@ on=ObjectName.getInstance("org.apache.camel:context=localhost/camel-1,type=threadpools,name=\"myThreads(threads)\"") @AT@ 1193 @LENGTH@ 114
------UPD MethodInvocation@@ObjectName.getInstance("org.apache.camel:context=localhost/camel-1,type=threadpools,name=myThreads(threads)") @TO@ ObjectName.getInstance("org.apache.camel:context=localhost/camel-1,type=threadpools,name=\"myThreads(threads)\"") @AT@ 1198 @LENGTH@ 109
---------UPD SimpleName@@MethodName:getInstance:["org.apache.camel:context=localhost/camel-1,type=threadpools,name=myThreads(threads)"] @TO@ MethodName:getInstance:["org.apache.camel:context=localhost/camel-1,type=threadpools,name=\"myThreads(threads)\""] @AT@ 1209 @LENGTH@ 98
------------UPD StringLiteral@@"org.apache.camel:context=localhost/camel-1,type=threadpools,name=myThreads(threads)" @TO@ "org.apache.camel:context=localhost/camel-1,type=threadpools,name=\"myThreads(threads)\"" @AT@ 1221 @LENGTH@ 85


UPD EnhancedForStatement@@for (Extension extension : Module.loadServiceFromCurrent(ModuleIdentifier.fromString(moduleName),Extension.class)) {  extension.activate(null);} @TO@ for (Extension extension : Module.loadServiceFromCurrent(ModuleIdentifier.fromString(moduleName),Extension.class)) {  final ServiceActivatorContext serviceActivatorContext=new ServiceActivatorContext(){    public ServiceTarget getServiceTarget(){      return updateContext.getServiceTarget();    }    public ServiceRegistry getServiceRegistry(){      return updateContext.getServiceRegistry();    }  };  extension.activate(serviceActivatorContext);} @AT@ 2122 @LENGTH@ 173
---UPD ExpressionStatement@@MethodInvocation:extension.activate(null) @TO@ MethodInvocation:extension.activate(serviceActivatorContext) @AT@ 2256 @LENGTH@ 25
------UPD MethodInvocation@@extension.activate(null) @TO@ extension.activate(serviceActivatorContext) @AT@ 2256 @LENGTH@ 24
---------UPD SimpleName@@MethodName:activate:[null] @TO@ MethodName:activate:[serviceActivatorContext] @AT@ 2266 @LENGTH@ 14
------------DEL NullLiteral@@null @AT@ 2275 @LENGTH@ 4
------------INS SimpleName@@serviceActivatorContext @TO@ SimpleName@@MethodName:activate:[null] @AT@ 2847 @LENGTH@ 23
---INS VariableDeclarationStatement@@final ServiceActivatorContext serviceActivatorContext=new ServiceActivatorContext(){
  public ServiceTarget getServiceTarget(){
    return updateContext.getServiceTarget();
  }
  public ServiceRegistry getServiceRegistry(){
    return updateContext.getServiceRegistry();
  }
}
; @TO@ EnhancedForStatement@@for (Extension extension : Module.loadServiceFromCurrent(ModuleIdentifier.fromString(moduleName),Extension.class)) {  extension.activate(null);} @AT@ 2400 @LENGTH@ 411
------INS Modifier@@final @TO@ VariableDeclarationStatement@@final ServiceActivatorContext serviceActivatorContext=new ServiceActivatorContext(){
  public ServiceTarget getServiceTarget(){
    return updateContext.getServiceTarget();
  }
  public ServiceRegistry getServiceRegistry(){
    return updateContext.getServiceRegistry();
  }
}
; @AT@ 2400 @LENGTH@ 5
------INS SimpleType@@ServiceActivatorContext @TO@ VariableDeclarationStatement@@final ServiceActivatorContext serviceActivatorContext=new ServiceActivatorContext(){
  public ServiceTarget getServiceTarget(){
    return updateContext.getServiceTarget();
  }
  public ServiceRegistry getServiceRegistry(){
    return updateContext.getServiceRegistry();
  }
}
; @AT@ 2406 @LENGTH@ 23
------INS VariableDeclarationFragment@@serviceActivatorContext=new ServiceActivatorContext(){
  public ServiceTarget getServiceTarget(){
    return updateContext.getServiceTarget();
  }
  public ServiceRegistry getServiceRegistry(){
    return updateContext.getServiceRegistry();
  }
}
 @TO@ VariableDeclarationStatement@@final ServiceActivatorContext serviceActivatorContext=new ServiceActivatorContext(){
  public ServiceTarget getServiceTarget(){
    return updateContext.getServiceTarget();
  }
  public ServiceRegistry getServiceRegistry(){
    return updateContext.getServiceRegistry();
  }
}
; @AT@ 2430 @LENGTH@ 380
---------INS SimpleName@@serviceActivatorContext @TO@ VariableDeclarationFragment@@serviceActivatorContext=new ServiceActivatorContext(){
  public ServiceTarget getServiceTarget(){
    return updateContext.getServiceTarget();
  }
  public ServiceRegistry getServiceRegistry(){
    return updateContext.getServiceRegistry();
  }
}
 @AT@ 2430 @LENGTH@ 23
---------INS ClassInstanceCreation@@ServiceActivatorContext[] @TO@ VariableDeclarationFragment@@serviceActivatorContext=new ServiceActivatorContext(){
  public ServiceTarget getServiceTarget(){
    return updateContext.getServiceTarget();
  }
  public ServiceRegistry getServiceRegistry(){
    return updateContext.getServiceRegistry();
  }
}
 @AT@ 2456 @LENGTH@ 354
------------INS New@@new @TO@ ClassInstanceCreation@@ServiceActivatorContext[] @AT@ 2456 @LENGTH@ 3
------------INS SimpleType@@ServiceActivatorContext @TO@ ClassInstanceCreation@@ServiceActivatorContext[] @AT@ 2460 @LENGTH@ 23
------------INS AnonymousClassDeclaration@@AnonymousClass @TO@ ClassInstanceCreation@@ServiceActivatorContext[] @AT@ 2486 @LENGTH@ 324
---------------INS MethodDeclaration@@public, ServiceTarget, MethodName:getServiceTarget,  @TO@ AnonymousClassDeclaration@@AnonymousClass @AT@ 2508 @LENGTH@ 128
------------------INS Modifier@@public @TO@ MethodDeclaration@@public, ServiceTarget, MethodName:getServiceTarget,  @AT@ 2508 @LENGTH@ 6
------------------INS SimpleType@@ServiceTarget @TO@ MethodDeclaration@@public, ServiceTarget, MethodName:getServiceTarget,  @AT@ 2515 @LENGTH@ 13
------------------INS SimpleName@@MethodName:getServiceTarget @TO@ MethodDeclaration@@public, ServiceTarget, MethodName:getServiceTarget,  @AT@ 2529 @LENGTH@ 16
------------------INS ReturnStatement@@MethodInvocation:updateContext.getServiceTarget() @TO@ MethodDeclaration@@public, ServiceTarget, MethodName:getServiceTarget,  @AT@ 2574 @LENGTH@ 40
---------------------INS MethodInvocation@@updateContext.getServiceTarget() @TO@ ReturnStatement@@MethodInvocation:updateContext.getServiceTarget() @AT@ 2581 @LENGTH@ 32
------------------------INS SimpleName@@Name:updateContext @TO@ MethodInvocation@@updateContext.getServiceTarget() @AT@ 2581 @LENGTH@ 13
------------------------INS SimpleName@@MethodName:getServiceTarget:[] @TO@ MethodInvocation@@updateContext.getServiceTarget() @AT@ 2595 @LENGTH@ 18
---------------INS MethodDeclaration@@public, ServiceRegistry, MethodName:getServiceRegistry,  @TO@ AnonymousClassDeclaration@@AnonymousClass @AT@ 2658 @LENGTH@ 134
------------------INS Modifier@@public @TO@ MethodDeclaration@@public, ServiceRegistry, MethodName:getServiceRegistry,  @AT@ 2658 @LENGTH@ 6
------------------INS SimpleType@@ServiceRegistry @TO@ MethodDeclaration@@public, ServiceRegistry, MethodName:getServiceRegistry,  @AT@ 2665 @LENGTH@ 15
------------------INS SimpleName@@MethodName:getServiceRegistry @TO@ MethodDeclaration@@public, ServiceRegistry, MethodName:getServiceRegistry,  @AT@ 2681 @LENGTH@ 18
------------------INS ReturnStatement@@MethodInvocation:updateContext.getServiceRegistry() @TO@ MethodDeclaration@@public, ServiceRegistry, MethodName:getServiceRegistry,  @AT@ 2728 @LENGTH@ 42
---------------------INS MethodInvocation@@updateContext.getServiceRegistry() @TO@ ReturnStatement@@MethodInvocation:updateContext.getServiceRegistry() @AT@ 2735 @LENGTH@ 34
------------------------INS SimpleName@@Name:updateContext @TO@ MethodInvocation@@updateContext.getServiceRegistry() @AT@ 2735 @LENGTH@ 13
------------------------INS SimpleName@@MethodName:getServiceRegistry:[] @TO@ MethodInvocation@@updateContext.getServiceRegistry() @AT@ 2749 @LENGTH@ 20


UPD MethodDeclaration@@protected, void, MethodName:doHandle, CommandContext ctx,  @TO@ protected, void, MethodName:doHandle, CommandContext ctx, CommandFormatException,  @AT@ 1764 @LENGTH@ 744
---INS SimpleType@@CommandFormatException @TO@ MethodDeclaration@@protected, void, MethodName:doHandle, CommandContext ctx,  @AT@ 1863 @LENGTH@ 22


INS MethodDeclaration@@public, voidMethodName:EJBBusinessMethod, Method method,  @TO@ TypeDeclaration@@[public]EJBBusinessMethod, [Serializable] @AT@ 1380 @LENGTH@ 107
---INS Modifier@@public @TO@ MethodDeclaration@@public, voidMethodName:EJBBusinessMethod, Method method,  @AT@ 1380 @LENGTH@ 6
---INS SimpleName@@MethodName:EJBBusinessMethod @TO@ MethodDeclaration@@public, voidMethodName:EJBBusinessMethod, Method method,  @AT@ 1387 @LENGTH@ 17
---INS SingleVariableDeclaration@@Method method @TO@ MethodDeclaration@@public, voidMethodName:EJBBusinessMethod, Method method,  @AT@ 1405 @LENGTH@ 13
------INS SimpleType@@Method @TO@ SingleVariableDeclaration@@Method method @AT@ 1405 @LENGTH@ 6
------INS SimpleName@@method @TO@ SingleVariableDeclaration@@Method method @AT@ 1412 @LENGTH@ 6
---INS ConstructorInvocation@@this(method.getName(),method.getParameterTypes()); @TO@ MethodDeclaration@@public, voidMethodName:EJBBusinessMethod, Method method,  @AT@ 1430 @LENGTH@ 51
------INS MethodInvocation@@method.getName() @TO@ ConstructorInvocation@@this(method.getName(),method.getParameterTypes()); @AT@ 1435 @LENGTH@ 16
---------INS SimpleName@@Name:method @TO@ MethodInvocation@@method.getName() @AT@ 1435 @LENGTH@ 6
---------INS SimpleName@@MethodName:getName:[] @TO@ MethodInvocation@@method.getName() @AT@ 1442 @LENGTH@ 9
------INS MethodInvocation@@method.getParameterTypes() @TO@ ConstructorInvocation@@this(method.getName(),method.getParameterTypes()); @AT@ 1453 @LENGTH@ 26
---------INS SimpleName@@Name:method @TO@ MethodInvocation@@method.getParameterTypes() @AT@ 1453 @LENGTH@ 6
---------INS SimpleName@@MethodName:getParameterTypes:[] @TO@ MethodInvocation@@method.getParameterTypes() @AT@ 1460 @LENGTH@ 19


UPD TryStatement@@try {  batchBuilder.addService(connectorName,connectorService).addDependency(connectorName.append("auth-provider"),ServerAuthenticationProvider.class,connectorService.getAuthenticationProviderInjector()).addDependency(RemotingSubsystemElement.JBOSS_REMOTING_ENDPOINT,Endpoint.class,connectorService.getEndpointInjector()).addListener(listener).setInitialMode(ServiceController.Mode.ACTIVE).install();  batchBuilder.install();} catch (ServiceRegistryException e) {  resultHandler.handleFailure(e,param);} @TO@ try {  target.addService(connectorName,connectorService).addDependency(connectorName.append("auth-provider"),ServerAuthenticationProvider.class,connectorService.getAuthenticationProviderInjector()).addDependency(RemotingSubsystemElement.JBOSS_REMOTING_ENDPOINT,Endpoint.class,connectorService.getEndpointInjector()).addListener(listener).setInitialMode(ServiceController.Mode.ACTIVE).install();} catch (ServiceRegistryException e) {  resultHandler.handleFailure(e,param);} @AT@ 3270 @LENGTH@ 747
---UPD ExpressionStatement@@MethodInvocation:batchBuilder.addService(connectorName,connectorService).addDependency(connectorName.append("auth-provider"),ServerAuthenticationProvider.class,connectorService.getAuthenticationProviderInjector()).addDependency(RemotingSubsystemElement.JBOSS_REMOTING_ENDPOINT,Endpoint.class,connectorService.getEndpointInjector()).addListener(listener).setInitialMode(ServiceController.Mode.ACTIVE).install() @TO@ MethodInvocation:target.addService(connectorName,connectorService).addDependency(connectorName.append("auth-provider"),ServerAuthenticationProvider.class,connectorService.getAuthenticationProviderInjector()).addDependency(RemotingSubsystemElement.JBOSS_REMOTING_ENDPOINT,Endpoint.class,connectorService.getEndpointInjector()).addListener(listener).setInitialMode(ServiceController.Mode.ACTIVE).install() @AT@ 3288 @LENGTH@ 483
------UPD MethodInvocation@@batchBuilder.addService(connectorName,connectorService).addDependency(connectorName.append("auth-provider"),ServerAuthenticationProvider.class,connectorService.getAuthenticationProviderInjector()).addDependency(RemotingSubsystemElement.JBOSS_REMOTING_ENDPOINT,Endpoint.class,connectorService.getEndpointInjector()).addListener(listener).setInitialMode(ServiceController.Mode.ACTIVE).install() @TO@ target.addService(connectorName,connectorService).addDependency(connectorName.append("auth-provider"),ServerAuthenticationProvider.class,connectorService.getAuthenticationProviderInjector()).addDependency(RemotingSubsystemElement.JBOSS_REMOTING_ENDPOINT,Endpoint.class,connectorService.getEndpointInjector()).addListener(listener).setInitialMode(ServiceController.Mode.ACTIVE).install() @AT@ 3288 @LENGTH@ 482
---------UPD SimpleName@@Name:batchBuilder @TO@ Name:target @AT@ 3288 @LENGTH@ 12
---DEL ExpressionStatement@@MethodInvocation:batchBuilder.install() @AT@ 3886 @LENGTH@ 23
------DEL MethodInvocation@@batchBuilder.install() @AT@ 3886 @LENGTH@ 22
---------DEL SimpleName@@Name:batchBuilder @AT@ 3886 @LENGTH@ 12
---------DEL SimpleName@@MethodName:install:[] @AT@ 3899 @LENGTH@ 9


UPD EnhancedForStatement@@for (Object key : map.keySet()) {  String keyString=CamelContextHelper.convertTo(context,String.class,key);  if (keyString != null) {    Object val=map.get(key);    dict.put(keyString,val);  }} @TO@ for (Object object : map.entrySet()) {  Entry entry=(Entry)object;  String keyString=CamelContextHelper.convertTo(context,String.class,entry.getKey());  if (keyString != null) {    Object val=entry.getValue();    dict.put(keyString,val);  }} @AT@ 3607 @LENGTH@ 321
---UPD SingleVariableDeclaration@@Object key @TO@ Object object @AT@ 3612 @LENGTH@ 10
------UPD SimpleName@@key @TO@ object @AT@ 3619 @LENGTH@ 3
---UPD MethodInvocation@@map.keySet() @TO@ map.entrySet() @AT@ 3625 @LENGTH@ 12
------UPD SimpleName@@MethodName:keySet:[] @TO@ MethodName:entrySet:[] @AT@ 3629 @LENGTH@ 8
---UPD VariableDeclarationStatement@@String keyString=CamelContextHelper.convertTo(context,String.class,key); @TO@ String keyString=CamelContextHelper.convertTo(context,String.class,entry.getKey()); @AT@ 3653 @LENGTH@ 76
------UPD VariableDeclarationFragment@@keyString=CamelContextHelper.convertTo(context,String.class,key) @TO@ keyString=CamelContextHelper.convertTo(context,String.class,entry.getKey()) @AT@ 3660 @LENGTH@ 68
---------UPD MethodInvocation@@CamelContextHelper.convertTo(context,String.class,key) @TO@ CamelContextHelper.convertTo(context,String.class,entry.getKey()) @AT@ 3672 @LENGTH@ 56
------------UPD SimpleName@@MethodName:convertTo:[context, String.class, key] @TO@ MethodName:convertTo:[context, String.class, entry.getKey()] @AT@ 3691 @LENGTH@ 37
---------------DEL SimpleName@@key @AT@ 3724 @LENGTH@ 3
---------------INS MethodInvocation@@entry.getKey() @TO@ SimpleName@@MethodName:convertTo:[context, String.class, key] @AT@ 3799 @LENGTH@ 14
------------------INS SimpleName@@Name:entry @TO@ MethodInvocation@@entry.getKey() @AT@ 3799 @LENGTH@ 5
------------------INS SimpleName@@MethodName:getKey:[] @TO@ MethodInvocation@@entry.getKey() @AT@ 3805 @LENGTH@ 8
---INS VariableDeclarationStatement@@Entry entry=(Entry)object; @TO@ EnhancedForStatement@@for (Object key : map.keySet()) {  String keyString=CamelContextHelper.convertTo(context,String.class,key);  if (keyString != null) {    Object val=map.get(key);    dict.put(keyString,val);  }} @AT@ 3686 @LENGTH@ 29
------INS SimpleType@@Entry @TO@ VariableDeclarationStatement@@Entry entry=(Entry)object; @AT@ 3686 @LENGTH@ 5
------INS VariableDeclarationFragment@@entry=(Entry)object @TO@ VariableDeclarationStatement@@Entry entry=(Entry)object; @AT@ 3692 @LENGTH@ 22
---------INS SimpleName@@entry @TO@ VariableDeclarationFragment@@entry=(Entry)object @AT@ 3692 @LENGTH@ 5
---------INS CastExpression@@(Entry)object @TO@ VariableDeclarationFragment@@entry=(Entry)object @AT@ 3700 @LENGTH@ 14
------------INS SimpleType@@Entry @TO@ CastExpression@@(Entry)object @AT@ 3701 @LENGTH@ 5
------------INS SimpleName@@object @TO@ CastExpression@@(Entry)object @AT@ 3708 @LENGTH@ 6
---UPD IfStatement@@if (keyString != null) {  Object val=map.get(key);  dict.put(keyString,val);} @TO@ if (keyString != null) {  Object val=entry.getValue();  dict.put(keyString,val);} @AT@ 3742 @LENGTH@ 176
------UPD Block@@ThenBody:{  Object val=map.get(key);  dict.put(keyString,val);} @TO@ ThenBody:{  Object val=entry.getValue();  dict.put(keyString,val);} @AT@ 3765 @LENGTH@ 153
---------UPD VariableDeclarationStatement@@Object val=map.get(key); @TO@ Object val=entry.getValue(); @AT@ 3783 @LENGTH@ 26
------------UPD VariableDeclarationFragment@@val=map.get(key) @TO@ val=entry.getValue() @AT@ 3790 @LENGTH@ 18
---------------UPD MethodInvocation@@map.get(key) @TO@ entry.getValue() @AT@ 3796 @LENGTH@ 12
------------------UPD SimpleName@@Name:map @TO@ Name:entry @AT@ 3796 @LENGTH@ 3
------------------UPD SimpleName@@MethodName:get:[key] @TO@ MethodName:getValue:[] @AT@ 3800 @LENGTH@ 8
---------------------DEL SimpleName@@key @AT@ 3804 @LENGTH@ 3


DEL MethodDeclaration@@public, void, MethodName:tearDown, Exception,  @AT@ 1374 @LENGTH@ 100
---DEL Modifier@@public @AT@ 1374 @LENGTH@ 6
---DEL PrimitiveType@@void @AT@ 1381 @LENGTH@ 4
---DEL SimpleName@@MethodName:tearDown @AT@ 1386 @LENGTH@ 8
---DEL SimpleType@@Exception @AT@ 1404 @LENGTH@ 9
---DEL ExpressionStatement@@SuperMethodInvocation:super.tearDown() @AT@ 1424 @LENGTH@ 17
------DEL SuperMethodInvocation@@super.tearDown() @AT@ 1424 @LENGTH@ 16
---------DEL SimpleName@@MethodName:tearDown:[] @AT@ 1430 @LENGTH@ 8
---DEL ExpressionStatement@@MethodInvocation:this.map.clear() @AT@ 1451 @LENGTH@ 17
------DEL MethodInvocation@@this.map.clear() @AT@ 1451 @LENGTH@ 16
---------DEL FieldAccess@@this.map @AT@ 1451 @LENGTH@ 8
------------DEL ThisExpression@@this @AT@ 1451 @LENGTH@ 4
------------DEL SimpleName@@map @AT@ 1456 @LENGTH@ 3
---------DEL SimpleName@@MethodName:clear:[] @AT@ 1460 @LENGTH@ 7


INS MethodDeclaration@@protected, abstract, boolean, MethodName:startsWithRoot, String path,  @TO@ TypeDeclaration@@[public, abstract]FilenameTabCompleter, [CommandLineCompleter] @AT@ 1273 @LENGTH@ 55
---INS Modifier@@protected @TO@ MethodDeclaration@@protected, abstract, boolean, MethodName:startsWithRoot, String path,  @AT@ 1273 @LENGTH@ 9
---INS Modifier@@abstract @TO@ MethodDeclaration@@protected, abstract, boolean, MethodName:startsWithRoot, String path,  @AT@ 1283 @LENGTH@ 8
---INS PrimitiveType@@boolean @TO@ MethodDeclaration@@protected, abstract, boolean, MethodName:startsWithRoot, String path,  @AT@ 1292 @LENGTH@ 7
---INS SimpleName@@MethodName:startsWithRoot @TO@ MethodDeclaration@@protected, abstract, boolean, MethodName:startsWithRoot, String path,  @AT@ 1300 @LENGTH@ 14
---INS SingleVariableDeclaration@@String path @TO@ MethodDeclaration@@protected, abstract, boolean, MethodName:startsWithRoot, String path,  @AT@ 1315 @LENGTH@ 11
------INS SimpleType@@String @TO@ SingleVariableDeclaration@@String path @AT@ 1315 @LENGTH@ 6
------INS SimpleName@@path @TO@ SingleVariableDeclaration@@String path @AT@ 1322 @LENGTH@ 4


DEL FieldDeclaration@@private, static, final, transient, Logger, [LOG=LoggerFactory.getLogger(PrinterConfiguration.class)] @AT@ 1196 @LENGTH@ 96
---DEL Modifier@@private @AT@ 1196 @LENGTH@ 7
---DEL Modifier@@static @AT@ 1204 @LENGTH@ 6
---DEL Modifier@@final @AT@ 1211 @LENGTH@ 5
---DEL Modifier@@transient @AT@ 1217 @LENGTH@ 9
---DEL SimpleType@@Logger @AT@ 1227 @LENGTH@ 6
---DEL VariableDeclarationFragment@@LOG=LoggerFactory.getLogger(PrinterConfiguration.class) @AT@ 1234 @LENGTH@ 57
------DEL SimpleName@@LOG @AT@ 1234 @LENGTH@ 3
------DEL MethodInvocation@@LoggerFactory.getLogger(PrinterConfiguration.class) @AT@ 1240 @LENGTH@ 51
---------DEL SimpleName@@Name:LoggerFactory @AT@ 1240 @LENGTH@ 13
---------DEL SimpleName@@MethodName:getLogger:[PrinterConfiguration.class] @AT@ 1254 @LENGTH@ 37
------------DEL TypeLiteral@@PrinterConfiguration.class @AT@ 1264 @LENGTH@ 26


UPD IfStatement@@if (exportFilters.isEmpty()) {  exportFilter=PathFilters.acceptAll();} else {  final MultiplePathFilterBuilder exportBuilder=PathFilters.multiplePathFilterBuilder(dependency.isExport());  for (  FilterSpecification filter : exportFilters) {    exportBuilder.addFilter(filter.getPathFilter(),filter.isInclude());  }  exportFilter=exportBuilder.create();} @TO@ if (exportFilters.isEmpty()) {  if (dependency.isExport()) {    exportFilter=PathFilters.acceptAll();  } else {    exportFilter=PathFilters.rejectAll();  }} else {  final MultiplePathFilterBuilder exportBuilder=PathFilters.multiplePathFilterBuilder(dependency.isExport());  for (  FilterSpecification filter : exportFilters) {    exportBuilder.addFilter(filter.getPathFilter(),filter.isInclude());  }  exportFilter=exportBuilder.create();} @AT@ 7150 @LENGTH@ 537
---INS Block@@ThenBody:{  if (dependency.isExport()) {    exportFilter=PathFilters.acceptAll();  } else {    exportFilter=PathFilters.rejectAll();  }} @TO@ IfStatement@@if (exportFilters.isEmpty()) {  exportFilter=PathFilters.acceptAll();} else {  final MultiplePathFilterBuilder exportBuilder=PathFilters.multiplePathFilterBuilder(dependency.isExport());  for (  FilterSpecification filter : exportFilters) {    exportBuilder.addFilter(filter.getPathFilter(),filter.isInclude());  }  exportFilter=exportBuilder.create();} @AT@ 7294 @LENGTH@ 247
------INS IfStatement@@if (dependency.isExport()) {  exportFilter=PathFilters.acceptAll();} else {  exportFilter=PathFilters.rejectAll();} @TO@ Block@@ThenBody:{  if (dependency.isExport()) {    exportFilter=PathFilters.acceptAll();  } else {    exportFilter=PathFilters.rejectAll();  }} @AT@ 7316 @LENGTH@ 207
---------MOV Block@@ThenBody:{  exportFilter=PathFilters.acceptAll();} @TO@ IfStatement@@if (dependency.isExport()) {  exportFilter=PathFilters.acceptAll();} else {  exportFilter=PathFilters.rejectAll();} @AT@ 7179 @LENGTH@ 79
---------MOV Block@@ThenBody:{  exportFilter=PathFilters.acceptAll();} @TO@ IfStatement@@if (dependency.isExport()) {  exportFilter=PathFilters.acceptAll();} else {  exportFilter=PathFilters.rejectAll();} @AT@ 7179 @LENGTH@ 79
---------INS MethodInvocation@@dependency.isExport() @TO@ IfStatement@@if (dependency.isExport()) {  exportFilter=PathFilters.acceptAll();} else {  exportFilter=PathFilters.rejectAll();} @AT@ 7320 @LENGTH@ 21
------------INS SimpleName@@Name:dependency @TO@ MethodInvocation@@dependency.isExport() @AT@ 7320 @LENGTH@ 10
------------INS SimpleName@@MethodName:isExport:[] @TO@ MethodInvocation@@dependency.isExport() @AT@ 7331 @LENGTH@ 10
---------INS Block@@ElseBody:{  exportFilter=PathFilters.rejectAll();} @TO@ IfStatement@@if (dependency.isExport()) {  exportFilter=PathFilters.acceptAll();} else {  exportFilter=PathFilters.rejectAll();} @AT@ 7436 @LENGTH@ 87
------------INS ExpressionStatement@@Assignment:exportFilter=PathFilters.rejectAll() @TO@ Block@@ElseBody:{  exportFilter=PathFilters.rejectAll();} @AT@ 7462 @LENGTH@ 39
---------------INS Assignment@@exportFilter=PathFilters.rejectAll() @TO@ ExpressionStatement@@Assignment:exportFilter=PathFilters.rejectAll() @AT@ 7462 @LENGTH@ 38
------------------INS SimpleName@@exportFilter @TO@ Assignment@@exportFilter=PathFilters.rejectAll() @AT@ 7462 @LENGTH@ 12
------------------INS Operator@@= @TO@ Assignment@@exportFilter=PathFilters.rejectAll() @AT@ 7474 @LENGTH@ 1
------------------INS MethodInvocation@@PathFilters.rejectAll() @TO@ Assignment@@exportFilter=PathFilters.rejectAll() @AT@ 7477 @LENGTH@ 23
---------------------INS SimpleName@@Name:PathFilters @TO@ MethodInvocation@@PathFilters.rejectAll() @AT@ 7477 @LENGTH@ 11
---------------------INS SimpleName@@MethodName:rejectAll:[] @TO@ MethodInvocation@@PathFilters.rejectAll() @AT@ 7489 @LENGTH@ 11


UPD ExpressionStatement@@MethodInvocation:attachResourceAdapters(phaseContext,resourceAdapters) @TO@ MethodInvocation:attachResourceAdapters(phaseContext.getDeploymentUnit(),resourceAdapters) @AT@ 2069 @LENGTH@ 55
---UPD MethodInvocation@@attachResourceAdapters(phaseContext,resourceAdapters) @TO@ attachResourceAdapters(phaseContext.getDeploymentUnit(),resourceAdapters) @AT@ 2069 @LENGTH@ 54
------UPD SimpleName@@MethodName:attachResourceAdapters:[phaseContext, resourceAdapters] @TO@ MethodName:attachResourceAdapters:[phaseContext.getDeploymentUnit(), resourceAdapters] @AT@ 2069 @LENGTH@ 54
---------DEL SimpleName@@phaseContext @AT@ 2092 @LENGTH@ 12
---------INS MethodInvocation@@phaseContext.getDeploymentUnit() @TO@ SimpleName@@MethodName:attachResourceAdapters:[phaseContext, resourceAdapters] @AT@ 2152 @LENGTH@ 32
------------INS SimpleName@@Name:phaseContext @TO@ MethodInvocation@@phaseContext.getDeploymentUnit() @AT@ 2152 @LENGTH@ 12
------------INS SimpleName@@MethodName:getDeploymentUnit:[] @TO@ MethodInvocation@@phaseContext.getDeploymentUnit() @AT@ 2165 @LENGTH@ 19


INS MethodDeclaration@@public, boolean, MethodName:hasAttachment, AttachmentKey<?> key,  @TO@ TypeDeclaration@@[public]SimpleAttachable, [Attachable] @AT@ 1491 @LENGTH@ 166
---INS Modifier@@public @TO@ MethodDeclaration@@public, boolean, MethodName:hasAttachment, AttachmentKey<?> key,  @AT@ 1491 @LENGTH@ 6
---INS PrimitiveType@@boolean @TO@ MethodDeclaration@@public, boolean, MethodName:hasAttachment, AttachmentKey<?> key,  @AT@ 1498 @LENGTH@ 7
---INS SimpleName@@MethodName:hasAttachment @TO@ MethodDeclaration@@public, boolean, MethodName:hasAttachment, AttachmentKey<?> key,  @AT@ 1506 @LENGTH@ 13
---INS SingleVariableDeclaration@@AttachmentKey<?> key @TO@ MethodDeclaration@@public, boolean, MethodName:hasAttachment, AttachmentKey<?> key,  @AT@ 1520 @LENGTH@ 20
------INS ParameterizedType@@AttachmentKey<?> @TO@ SingleVariableDeclaration@@AttachmentKey<?> key @AT@ 1520 @LENGTH@ 16
---------INS SimpleType@@AttachmentKey @TO@ ParameterizedType@@AttachmentKey<?> @AT@ 1520 @LENGTH@ 13
---------INS WildcardType@@? @TO@ ParameterizedType@@AttachmentKey<?> @AT@ 1534 @LENGTH@ 1
------INS SimpleName@@key @TO@ SingleVariableDeclaration@@AttachmentKey<?> key @AT@ 1537 @LENGTH@ 3
---INS IfStatement@@if (key == null) {  return false;} @TO@ MethodDeclaration@@public, boolean, MethodName:hasAttachment, AttachmentKey<?> key,  @AT@ 1552 @LENGTH@ 54
------INS InfixExpression@@key == null @TO@ IfStatement@@if (key == null) {  return false;} @AT@ 1556 @LENGTH@ 11
---------INS SimpleName@@key @TO@ InfixExpression@@key == null @AT@ 1556 @LENGTH@ 3
---------INS Operator@@== @TO@ InfixExpression@@key == null @AT@ 1559 @LENGTH@ 2
---------INS NullLiteral@@null @TO@ InfixExpression@@key == null @AT@ 1563 @LENGTH@ 4
------INS Block@@ThenBody:{  return false;} @TO@ IfStatement@@if (key == null) {  return false;} @AT@ 1569 @LENGTH@ 37
---------INS ReturnStatement@@BooleanLiteral:false @TO@ Block@@ThenBody:{  return false;} @AT@ 1583 @LENGTH@ 13
------------INS BooleanLiteral@@false @TO@ ReturnStatement@@BooleanLiteral:false @AT@ 1590 @LENGTH@ 5
---INS ReturnStatement@@MethodInvocation:attachments.containsKey(key) @TO@ MethodDeclaration@@public, boolean, MethodName:hasAttachment, AttachmentKey<?> key,  @AT@ 1615 @LENGTH@ 36
------INS MethodInvocation@@attachments.containsKey(key) @TO@ ReturnStatement@@MethodInvocation:attachments.containsKey(key) @AT@ 1622 @LENGTH@ 28
---------INS SimpleName@@Name:attachments @TO@ MethodInvocation@@attachments.containsKey(key) @AT@ 1622 @LENGTH@ 11
---------INS SimpleName@@MethodName:containsKey:[key] @TO@ MethodInvocation@@attachments.containsKey(key) @AT@ 1634 @LENGTH@ 16
------------INS SimpleName@@key @TO@ SimpleName@@MethodName:containsKey:[key] @AT@ 1646 @LENGTH@ 3


UPD ExpressionStatement@@Assignment:plan=builder.undeploy(filename()).remove(name()).build() @TO@ Assignment:plan=builder.undeploy(name()).remove(name()).build() @AT@ 2383 @LENGTH@ 59
---UPD Assignment@@plan=builder.undeploy(filename()).remove(name()).build() @TO@ plan=builder.undeploy(name()).remove(name()).build() @AT@ 2383 @LENGTH@ 58
------UPD MethodInvocation@@builder.undeploy(filename()).remove(name()).build() @TO@ builder.undeploy(name()).remove(name()).build() @AT@ 2390 @LENGTH@ 51
---------UPD MethodInvocation@@MethodName:undeploy:[filename()] @TO@ MethodName:undeploy:[name()] @AT@ 2390 @LENGTH@ 28
------------UPD MethodInvocation@@MethodName:filename:[] @TO@ MethodName:name:[] @AT@ 2407 @LENGTH@ 10


UPD FieldDeclaration@@public, static, final, int, [PARSE_OSGI_XSERVICE_PROPERTIES=0x0550] @TO@ public, static, final, int, [PARSE_OSGI_PROPERTIES=0x0550] @AT@ 7687 @LENGTH@ 77
---UPD VariableDeclarationFragment@@PARSE_OSGI_XSERVICE_PROPERTIES=0x0550 @TO@ PARSE_OSGI_PROPERTIES=0x0550 @AT@ 7711 @LENGTH@ 52
------UPD SimpleName@@PARSE_OSGI_XSERVICE_PROPERTIES @TO@ PARSE_OSGI_PROPERTIES @AT@ 7711 @LENGTH@ 30


UPD ExpressionStatement@@MethodInvocation:updateContext.addDeploymentProcessor(Phase.INSTALL,Phase.INSTALL_EJB_DD_INTERCEPTORS,new DeploymentDescriptorInterceptorBindingsProcessor()) @TO@ MethodInvocation:updateContext.addDeploymentProcessor(Phase.POST_MODULE,Phase.POST_MODULE_EJB_DD_INTERCEPTORS,new DeploymentDescriptorInterceptorBindingsProcessor()) @AT@ 10033 @LENGTH@ 143
---UPD MethodInvocation@@updateContext.addDeploymentProcessor(Phase.INSTALL,Phase.INSTALL_EJB_DD_INTERCEPTORS,new DeploymentDescriptorInterceptorBindingsProcessor()) @TO@ updateContext.addDeploymentProcessor(Phase.POST_MODULE,Phase.POST_MODULE_EJB_DD_INTERCEPTORS,new DeploymentDescriptorInterceptorBindingsProcessor()) @AT@ 10033 @LENGTH@ 142
------UPD SimpleName@@MethodName:addDeploymentProcessor:[Phase.INSTALL, Phase.INSTALL_EJB_DD_INTERCEPTORS, new DeploymentDescriptorInterceptorBindingsProcessor()] @TO@ MethodName:addDeploymentProcessor:[Phase.POST_MODULE, Phase.POST_MODULE_EJB_DD_INTERCEPTORS, new DeploymentDescriptorInterceptorBindingsProcessor()] @AT@ 10047 @LENGTH@ 128
---------UPD QualifiedName@@Phase.INSTALL @TO@ Phase.POST_MODULE @AT@ 10070 @LENGTH@ 13
------------UPD SimpleName@@INSTALL @TO@ POST_MODULE @AT@ 10076 @LENGTH@ 7
---------UPD QualifiedName@@Phase.INSTALL_EJB_DD_INTERCEPTORS @TO@ Phase.POST_MODULE_EJB_DD_INTERCEPTORS @AT@ 10085 @LENGTH@ 33
------------UPD SimpleName@@INSTALL_EJB_DD_INTERCEPTORS @TO@ POST_MODULE_EJB_DD_INTERCEPTORS @AT@ 10091 @LENGTH@ 27


UPD MethodDeclaration@@public, static, StandaloneServer, MethodName:create, final File jbossHomeDir, final Properties systemProps, final Map<String,String> systemEnv, Throwable,  @TO@ public, static, StandaloneServer, MethodName:create, final File jbossHomeDir, final Properties systemProps, final Map<String,String> systemEnv, String... systemPackages, Throwable,  @AT@ 3164 @LENGTH@ 5296
---INS SingleVariableDeclaration@@String... systemPackages @TO@ MethodDeclaration@@public, static, StandaloneServer, MethodName:create, final File jbossHomeDir, final Properties systemProps, final Map<String,String> systemEnv, Throwable,  @AT@ 3294 @LENGTH@ 23
------INS SimpleType@@String @TO@ SingleVariableDeclaration@@String... systemPackages @AT@ 3294 @LENGTH@ 6
------INS SimpleName@@systemPackages @TO@ SingleVariableDeclaration@@String... systemPackages @AT@ 3303 @LENGTH@ 14
---UPD VariableDeclarationStatement@@final ModuleLoader moduleLoader=InitialModuleLoaderFactory.getModuleLoader(modulesDir); @TO@ final ModuleLoader moduleLoader=InitialModuleLoaderFactory.getModuleLoader(modulesDir,systemPackages); @AT@ 3777 @LENGTH@ 89
------UPD VariableDeclarationFragment@@moduleLoader=InitialModuleLoaderFactory.getModuleLoader(modulesDir) @TO@ moduleLoader=InitialModuleLoaderFactory.getModuleLoader(modulesDir,systemPackages) @AT@ 3796 @LENGTH@ 69
---------UPD MethodInvocation@@InitialModuleLoaderFactory.getModuleLoader(modulesDir) @TO@ InitialModuleLoaderFactory.getModuleLoader(modulesDir,systemPackages) @AT@ 3811 @LENGTH@ 54
------------UPD SimpleName@@MethodName:getModuleLoader:[modulesDir] @TO@ MethodName:getModuleLoader:[modulesDir, systemPackages] @AT@ 3838 @LENGTH@ 27
---------------INS SimpleName@@systemPackages @TO@ SimpleName@@MethodName:getModuleLoader:[modulesDir] @AT@ 3891 @LENGTH@ 14


INS MethodDeclaration@@public, int, MethodName:getDefaultControllerPort,  @TO@ TypeDeclaration@@[public]MockCommandContext, [CommandContext] @AT@ 5693 @LENGTH@ 64
---INS Modifier@@public @TO@ MethodDeclaration@@public, int, MethodName:getDefaultControllerPort,  @AT@ 5693 @LENGTH@ 6
---INS PrimitiveType@@int @TO@ MethodDeclaration@@public, int, MethodName:getDefaultControllerPort,  @AT@ 5700 @LENGTH@ 3
---INS SimpleName@@MethodName:getDefaultControllerPort @TO@ MethodDeclaration@@public, int, MethodName:getDefaultControllerPort,  @AT@ 5704 @LENGTH@ 24
---INS ReturnStatement@@PrefixExpression:-1 @TO@ MethodDeclaration@@public, int, MethodName:getDefaultControllerPort,  @AT@ 5741 @LENGTH@ 10
------INS PrefixExpression@@-1 @TO@ ReturnStatement@@PrefixExpression:-1 @AT@ 5748 @LENGTH@ 2
---------INS Operator@@- @TO@ PrefixExpression@@-1 @AT@ 5748 @LENGTH@ 1
---------INS NumberLiteral@@1 @TO@ PrefixExpression@@-1 @AT@ 5749 @LENGTH@ 1


INS MethodDeclaration@@List<User>, MethodName:findByLastnameNotNull,  @TO@ TypeDeclaration@@[public]UserRepository, [JpaRepository<User,Integer>, UserRepositoryCustom] @AT@ 5745 @LENGTH@ 24
---INS ParameterizedType@@List<User> @TO@ MethodDeclaration@@List<User>, MethodName:findByLastnameNotNull,  @AT@ 5734 @LENGTH@ 10
------INS SimpleType@@List @TO@ ParameterizedType@@List<User> @AT@ 5734 @LENGTH@ 4
------INS SimpleType@@User @TO@ ParameterizedType@@List<User> @AT@ 5739 @LENGTH@ 4
---INS SimpleName@@MethodName:findByLastnameNotNull @TO@ MethodDeclaration@@List<User>, MethodName:findByLastnameNotNull,  @AT@ 5745 @LENGTH@ 21


DEL FieldDeclaration@@private, final, EnumMap<Phase,List<DeploymentUnitProcessor>>, [deployers] @AT@ 3163 @LENGTH@ 70
---DEL Modifier@@private @AT@ 3163 @LENGTH@ 7
---DEL Modifier@@final @AT@ 3171 @LENGTH@ 5
---DEL ParameterizedType@@EnumMap<Phase,List<DeploymentUnitProcessor>> @AT@ 3177 @LENGTH@ 45
------DEL SimpleType@@EnumMap @AT@ 3177 @LENGTH@ 7
------DEL SimpleType@@Phase @AT@ 3185 @LENGTH@ 5
------DEL ParameterizedType@@List<DeploymentUnitProcessor> @AT@ 3192 @LENGTH@ 29
---------DEL SimpleType@@List @AT@ 3192 @LENGTH@ 4
---------DEL SimpleType@@DeploymentUnitProcessor @AT@ 3197 @LENGTH@ 23
---DEL VariableDeclarationFragment@@deployers @AT@ 3223 @LENGTH@ 9
------DEL SimpleName@@deployers @AT@ 3223 @LENGTH@ 9


UPD TryStatement@@try {  final String loggerName=getLoggerName();  final LoggerService service=new LoggerService(loggerName);  service.setLevel(Level.parse(getLevelName()));  final BatchBuilder batchBuilder=updateContext.getServiceTarget();  batchBuilder.addService(LogServices.loggerName(loggerName),service).addListener(new UpdateResultHandler.ServiceStartListener<P>(resultHandler,param)).setInitialMode(ServiceController.Mode.ACTIVE).install();} catch (Throwable t) {  resultHandler.handleFailure(t,param);  return;} @TO@ try {  final String loggerName=getLoggerName();  final LoggerService service=new LoggerService(loggerName);  service.setLevel(Level.parse(getLevelName()));  final ServiceTarget target=updateContext.getServiceTarget();  target.addService(LogServices.loggerName(loggerName),service).addListener(new UpdateResultHandler.ServiceStartListener<P>(resultHandler,param)).setInitialMode(ServiceController.Mode.ACTIVE).install();} catch (Throwable t) {  resultHandler.handleFailure(t,param);  return;} @AT@ 2458 @LENGTH@ 657
---UPD VariableDeclarationStatement@@final BatchBuilder batchBuilder=updateContext.getServiceTarget(); @TO@ final ServiceTarget target=updateContext.getServiceTarget(); @AT@ 2663 @LENGTH@ 67
------UPD SimpleType@@BatchBuilder @TO@ ServiceTarget @AT@ 2669 @LENGTH@ 12
------UPD VariableDeclarationFragment@@batchBuilder=updateContext.getServiceTarget() @TO@ target=updateContext.getServiceTarget() @AT@ 2682 @LENGTH@ 47
---------UPD SimpleName@@batchBuilder @TO@ target @AT@ 2682 @LENGTH@ 12
---UPD ExpressionStatement@@MethodInvocation:batchBuilder.addService(LogServices.loggerName(loggerName),service).addListener(new UpdateResultHandler.ServiceStartListener<P>(resultHandler,param)).setInitialMode(ServiceController.Mode.ACTIVE).install() @TO@ MethodInvocation:target.addService(LogServices.loggerName(loggerName),service).addListener(new UpdateResultHandler.ServiceStartListener<P>(resultHandler,param)).setInitialMode(ServiceController.Mode.ACTIVE).install() @AT@ 2743 @LENGTH@ 259
------UPD MethodInvocation@@batchBuilder.addService(LogServices.loggerName(loggerName),service).addListener(new UpdateResultHandler.ServiceStartListener<P>(resultHandler,param)).setInitialMode(ServiceController.Mode.ACTIVE).install() @TO@ target.addService(LogServices.loggerName(loggerName),service).addListener(new UpdateResultHandler.ServiceStartListener<P>(resultHandler,param)).setInitialMode(ServiceController.Mode.ACTIVE).install() @AT@ 2743 @LENGTH@ 258
---------UPD SimpleName@@Name:batchBuilder @TO@ Name:target @AT@ 2743 @LENGTH@ 12


UPD IfStatement@@if (!o1.getName().equals(o2.getName())) {  return false;} @TO@ if (o1 != null && !o1.getName().equals(o2.getName())) {  return false;} @AT@ 7299 @LENGTH@ 62
---INS InfixExpression@@o1 != null && !o1.getName().equals(o2.getName()) @TO@ IfStatement@@if (!o1.getName().equals(o2.getName())) {  return false;} @AT@ 7303 @LENGTH@ 48
------MOV PrefixExpression@@!o1.getName().equals(o2.getName()) @TO@ InfixExpression@@o1 != null && !o1.getName().equals(o2.getName()) @AT@ 7303 @LENGTH@ 34
------INS InfixExpression@@o1 != null @TO@ InfixExpression@@o1 != null && !o1.getName().equals(o2.getName()) @AT@ 7303 @LENGTH@ 10
---------INS SimpleName@@o1 @TO@ InfixExpression@@o1 != null @AT@ 7303 @LENGTH@ 2
---------INS Operator@@!= @TO@ InfixExpression@@o1 != null @AT@ 7305 @LENGTH@ 2
---------INS NullLiteral@@null @TO@ InfixExpression@@o1 != null @AT@ 7309 @LENGTH@ 4
------INS Operator@@&& @TO@ InfixExpression@@o1 != null && !o1.getName().equals(o2.getName()) @AT@ 7313 @LENGTH@ 2


UPD ExpressionStatement@@MethodInvocation:phaseServiceBuilder.addDependencies(Services.deploymentUnitName(deploymentUnit.getParent().getName(),deploymentUnit.getName(),nextPhase)) @TO@ MethodInvocation:phaseServiceBuilder.addDependencies(Services.deploymentUnitName(deploymentUnit.getParent().getName(),nextPhase)) @AT@ 6975 @LENGTH@ 140
---UPD MethodInvocation@@phaseServiceBuilder.addDependencies(Services.deploymentUnitName(deploymentUnit.getParent().getName(),deploymentUnit.getName(),nextPhase)) @TO@ phaseServiceBuilder.addDependencies(Services.deploymentUnitName(deploymentUnit.getParent().getName(),nextPhase)) @AT@ 6975 @LENGTH@ 139
------UPD SimpleName@@MethodName:addDependencies:[Services.deploymentUnitName(deploymentUnit.getParent().getName(),deploymentUnit.getName(),nextPhase)] @TO@ MethodName:addDependencies:[Services.deploymentUnitName(deploymentUnit.getParent().getName(),nextPhase)] @AT@ 6995 @LENGTH@ 119
---------UPD MethodInvocation@@Services.deploymentUnitName(deploymentUnit.getParent().getName(),deploymentUnit.getName(),nextPhase) @TO@ Services.deploymentUnitName(deploymentUnit.getParent().getName(),nextPhase) @AT@ 7011 @LENGTH@ 102
------------UPD SimpleName@@MethodName:deploymentUnitName:[deploymentUnit.getParent().getName(), deploymentUnit.getName(), nextPhase] @TO@ MethodName:deploymentUnitName:[deploymentUnit.getParent().getName(), nextPhase] @AT@ 7020 @LENGTH@ 93
---------------DEL MethodInvocation@@deploymentUnit.getName() @AT@ 7077 @LENGTH@ 24
------------------DEL SimpleName@@Name:deploymentUnit @AT@ 7077 @LENGTH@ 14
------------------DEL SimpleName@@MethodName:getName:[] @AT@ 7092 @LENGTH@ 9


UPD IfStatement@@if (getIgnoreInvalidEndpoint() != null) {  dynamicRouter.setIgnoreInvalidEndpoints(getIgnoreInvalidEndpoint());} @TO@ if (getIgnoreInvalidEndpoints() != null) {  dynamicRouter.setIgnoreInvalidEndpoints(getIgnoreInvalidEndpoints());} @AT@ 2504 @LENGTH@ 132
---UPD InfixExpression@@getIgnoreInvalidEndpoint() != null @TO@ getIgnoreInvalidEndpoints() != null @AT@ 2508 @LENGTH@ 34
------UPD MethodInvocation@@MethodName:getIgnoreInvalidEndpoint:[] @TO@ MethodName:getIgnoreInvalidEndpoints:[] @AT@ 2508 @LENGTH@ 26
---UPD Block@@ThenBody:{  dynamicRouter.setIgnoreInvalidEndpoints(getIgnoreInvalidEndpoint());} @TO@ ThenBody:{  dynamicRouter.setIgnoreInvalidEndpoints(getIgnoreInvalidEndpoints());} @AT@ 2544 @LENGTH@ 92
------UPD ExpressionStatement@@MethodInvocation:dynamicRouter.setIgnoreInvalidEndpoints(getIgnoreInvalidEndpoint()) @TO@ MethodInvocation:dynamicRouter.setIgnoreInvalidEndpoints(getIgnoreInvalidEndpoints()) @AT@ 2558 @LENGTH@ 68
---------UPD MethodInvocation@@dynamicRouter.setIgnoreInvalidEndpoints(getIgnoreInvalidEndpoint()) @TO@ dynamicRouter.setIgnoreInvalidEndpoints(getIgnoreInvalidEndpoints()) @AT@ 2558 @LENGTH@ 67
------------UPD SimpleName@@MethodName:setIgnoreInvalidEndpoints:[getIgnoreInvalidEndpoint()] @TO@ MethodName:setIgnoreInvalidEndpoints:[getIgnoreInvalidEndpoints()] @AT@ 2572 @LENGTH@ 53
---------------UPD MethodInvocation@@MethodName:getIgnoreInvalidEndpoint:[] @TO@ MethodName:getIgnoreInvalidEndpoints:[] @AT@ 2598 @LENGTH@ 26


UPD FieldDeclaration@@public, Log4jLevelAdjuster, [logLevels=new Log4jLevelAdjuster(Level.OFF,RabbitTemplate.class,SimpleMessageListenerContainer.class,BlockingQueueConsumer.class)] @TO@ public, Log4jLevelAdjuster, [logLevels=new Log4jLevelAdjuster(Level.OFF,RabbitTemplate.class,SimpleMessageListenerContainer.class,BlockingQueueConsumer.class,CachingConnectionFactory.class)] @AT@ 2143 @LENGTH@ 165
---UPD VariableDeclarationFragment@@logLevels=new Log4jLevelAdjuster(Level.OFF,RabbitTemplate.class,SimpleMessageListenerContainer.class,BlockingQueueConsumer.class) @TO@ logLevels=new Log4jLevelAdjuster(Level.OFF,RabbitTemplate.class,SimpleMessageListenerContainer.class,BlockingQueueConsumer.class,CachingConnectionFactory.class) @AT@ 2169 @LENGTH@ 138
------UPD ClassInstanceCreation@@Log4jLevelAdjuster[Level.OFF, RabbitTemplate.class, SimpleMessageListenerContainer.class, BlockingQueueConsumer.class] @TO@ Log4jLevelAdjuster[Level.OFF, RabbitTemplate.class, SimpleMessageListenerContainer.class, BlockingQueueConsumer.class, CachingConnectionFactory.class] @AT@ 2181 @LENGTH@ 126
---------INS TypeLiteral@@CachingConnectionFactory.class @TO@ ClassInstanceCreation@@Log4jLevelAdjuster[Level.OFF, RabbitTemplate.class, SimpleMessageListenerContainer.class, BlockingQueueConsumer.class] @AT@ 2308 @LENGTH@ 30


UPD Block@@ThenBody:{  locations.add(param);  ModelNode compensating=SchemaLocationRemoveHandler.getRemoveSchemaLocationOperation(operation.get(OP_ADDR),param.asProperty().getName());  resultHandler.handleResultComplete(compensating);} @TO@ ThenBody:{  Property loc=param.asProperty();  locations.add(loc.getName(),loc.getValue());  ModelNode compensating=SchemaLocationRemoveHandler.getRemoveSchemaLocationOperation(operation.get(OP_ADDR),param.asProperty().getName());  resultHandler.handleResultComplete(compensating);} @AT@ 3250 @LENGTH@ 276
---UPD ExpressionStatement@@MethodInvocation:locations.add(param) @TO@ MethodInvocation:locations.add(loc.getName(),loc.getValue()) @AT@ 3268 @LENGTH@ 21
------UPD MethodInvocation@@locations.add(param) @TO@ locations.add(loc.getName(),loc.getValue()) @AT@ 3268 @LENGTH@ 20
---------UPD SimpleName@@MethodName:add:[param] @TO@ MethodName:add:[loc.getName(), loc.getValue()] @AT@ 3278 @LENGTH@ 10
------------DEL SimpleName@@param @AT@ 3282 @LENGTH@ 5
------------INS MethodInvocation@@loc.getName() @TO@ SimpleName@@MethodName:add:[param] @AT@ 3363 @LENGTH@ 13
---------------INS SimpleName@@Name:loc @TO@ MethodInvocation@@loc.getName() @AT@ 3363 @LENGTH@ 3
---------------INS SimpleName@@MethodName:getName:[] @TO@ MethodInvocation@@loc.getName() @AT@ 3367 @LENGTH@ 9
------------INS MethodInvocation@@loc.getValue() @TO@ SimpleName@@MethodName:add:[param] @AT@ 3378 @LENGTH@ 14
---------------INS SimpleName@@Name:loc @TO@ MethodInvocation@@loc.getValue() @AT@ 3378 @LENGTH@ 3
---------------INS SimpleName@@MethodName:getValue:[] @TO@ MethodInvocation@@loc.getValue() @AT@ 3382 @LENGTH@ 10
---INS VariableDeclarationStatement@@Property loc=param.asProperty(); @TO@ Block@@ThenBody:{  locations.add(param);  ModelNode compensating=SchemaLocationRemoveHandler.getRemoveSchemaLocationOperation(operation.get(OP_ADDR),param.asProperty().getName());  resultHandler.handleResultComplete(compensating);} @AT@ 3298 @LENGTH@ 34
------INS SimpleType@@Property @TO@ VariableDeclarationStatement@@Property loc=param.asProperty(); @AT@ 3298 @LENGTH@ 8
------INS VariableDeclarationFragment@@loc=param.asProperty() @TO@ VariableDeclarationStatement@@Property loc=param.asProperty(); @AT@ 3307 @LENGTH@ 24
---------INS SimpleName@@loc @TO@ VariableDeclarationFragment@@loc=param.asProperty() @AT@ 3307 @LENGTH@ 3
---------INS MethodInvocation@@param.asProperty() @TO@ VariableDeclarationFragment@@loc=param.asProperty() @AT@ 3313 @LENGTH@ 18
------------INS SimpleName@@Name:param @TO@ MethodInvocation@@param.asProperty() @AT@ 3313 @LENGTH@ 5
------------INS SimpleName@@MethodName:asProperty:[] @TO@ MethodInvocation@@param.asProperty() @AT@ 3319 @LENGTH@ 12


INS MethodDeclaration@@public, static, ModelNode, MethodName:getShutdownOperationDescription, final Locale locale,  @TO@ TypeDeclaration@@[public]ServerRootDescription,  @AT@ 8576 @LENGTH@ 430
---INS Modifier@@public @TO@ MethodDeclaration@@public, static, ModelNode, MethodName:getShutdownOperationDescription, final Locale locale,  @AT@ 8576 @LENGTH@ 6
---INS Modifier@@static @TO@ MethodDeclaration@@public, static, ModelNode, MethodName:getShutdownOperationDescription, final Locale locale,  @AT@ 8583 @LENGTH@ 6
---INS SimpleType@@ModelNode @TO@ MethodDeclaration@@public, static, ModelNode, MethodName:getShutdownOperationDescription, final Locale locale,  @AT@ 8590 @LENGTH@ 9
---INS SimpleName@@MethodName:getShutdownOperationDescription @TO@ MethodDeclaration@@public, static, ModelNode, MethodName:getShutdownOperationDescription, final Locale locale,  @AT@ 8600 @LENGTH@ 31
---INS SingleVariableDeclaration@@final Locale locale @TO@ MethodDeclaration@@public, static, ModelNode, MethodName:getShutdownOperationDescription, final Locale locale,  @AT@ 8632 @LENGTH@ 19
------INS Modifier@@final @TO@ SingleVariableDeclaration@@final Locale locale @AT@ 8632 @LENGTH@ 5
------INS SimpleType@@Locale @TO@ SingleVariableDeclaration@@final Locale locale @AT@ 8638 @LENGTH@ 6
------INS SimpleName@@locale @TO@ SingleVariableDeclaration@@final Locale locale @AT@ 8645 @LENGTH@ 6
---INS VariableDeclarationStatement@@ResourceBundle bundle=getResourceBundle(locale); @TO@ MethodDeclaration@@public, static, ModelNode, MethodName:getShutdownOperationDescription, final Locale locale,  @AT@ 8663 @LENGTH@ 50
------INS SimpleType@@ResourceBundle @TO@ VariableDeclarationStatement@@ResourceBundle bundle=getResourceBundle(locale); @AT@ 8663 @LENGTH@ 14
------INS VariableDeclarationFragment@@bundle=getResourceBundle(locale) @TO@ VariableDeclarationStatement@@ResourceBundle bundle=getResourceBundle(locale); @AT@ 8678 @LENGTH@ 34
---------INS SimpleName@@bundle @TO@ VariableDeclarationFragment@@bundle=getResourceBundle(locale) @AT@ 8678 @LENGTH@ 6
---------INS MethodInvocation@@getResourceBundle(locale) @TO@ VariableDeclarationFragment@@bundle=getResourceBundle(locale) @AT@ 8687 @LENGTH@ 25
------------INS SimpleName@@MethodName:getResourceBundle:[locale] @TO@ MethodInvocation@@getResourceBundle(locale) @AT@ 8687 @LENGTH@ 25
---------------INS SimpleName@@locale @TO@ SimpleName@@MethodName:getResourceBundle:[locale] @AT@ 8705 @LENGTH@ 6
---INS VariableDeclarationStatement@@ModelNode node=new ModelNode(); @TO@ MethodDeclaration@@public, static, ModelNode, MethodName:getShutdownOperationDescription, final Locale locale,  @AT@ 8723 @LENGTH@ 33
------INS SimpleType@@ModelNode @TO@ VariableDeclarationStatement@@ModelNode node=new ModelNode(); @AT@ 8723 @LENGTH@ 9
------INS VariableDeclarationFragment@@node=new ModelNode() @TO@ VariableDeclarationStatement@@ModelNode node=new ModelNode(); @AT@ 8733 @LENGTH@ 22
---------INS SimpleName@@node @TO@ VariableDeclarationFragment@@node=new ModelNode() @AT@ 8733 @LENGTH@ 4
---------INS ClassInstanceCreation@@ModelNode[] @TO@ VariableDeclarationFragment@@node=new ModelNode() @AT@ 8740 @LENGTH@ 15
------------INS New@@new @TO@ ClassInstanceCreation@@ModelNode[] @AT@ 8740 @LENGTH@ 3
------------INS SimpleType@@ModelNode @TO@ ClassInstanceCreation@@ModelNode[] @AT@ 8744 @LENGTH@ 9
---INS ExpressionStatement@@MethodInvocation:node.get(OPERATION_NAME).set("shutdown") @TO@ MethodDeclaration@@public, static, ModelNode, MethodName:getShutdownOperationDescription, final Locale locale,  @AT@ 8765 @LENGTH@ 41
------INS MethodInvocation@@node.get(OPERATION_NAME).set("shutdown") @TO@ ExpressionStatement@@MethodInvocation:node.get(OPERATION_NAME).set("shutdown") @AT@ 8765 @LENGTH@ 40
---------INS MethodInvocation@@MethodName:get:[OPERATION_NAME] @TO@ MethodInvocation@@node.get(OPERATION_NAME).set("shutdown") @AT@ 8765 @LENGTH@ 24
------------INS SimpleName@@OPERATION_NAME @TO@ MethodInvocation@@MethodName:get:[OPERATION_NAME] @AT@ 8774 @LENGTH@ 14
---------INS SimpleName@@Name:node @TO@ MethodInvocation@@node.get(OPERATION_NAME).set("shutdown") @AT@ 8765 @LENGTH@ 4
---------INS SimpleName@@MethodName:set:["shutdown"] @TO@ MethodInvocation@@node.get(OPERATION_NAME).set("shutdown") @AT@ 8790 @LENGTH@ 15
------------INS StringLiteral@@"shutdown" @TO@ SimpleName@@MethodName:set:["shutdown"] @AT@ 8794 @LENGTH@ 10
---INS ExpressionStatement@@MethodInvocation:node.get(DESCRIPTION).set(bundle.getString("shutdown")) @TO@ MethodDeclaration@@public, static, ModelNode, MethodName:getShutdownOperationDescription, final Locale locale,  @AT@ 8815 @LENGTH@ 56
------INS MethodInvocation@@node.get(DESCRIPTION).set(bundle.getString("shutdown")) @TO@ ExpressionStatement@@MethodInvocation:node.get(DESCRIPTION).set(bundle.getString("shutdown")) @AT@ 8815 @LENGTH@ 55
---------INS MethodInvocation@@MethodName:get:[DESCRIPTION] @TO@ MethodInvocation@@node.get(DESCRIPTION).set(bundle.getString("shutdown")) @AT@ 8815 @LENGTH@ 21
------------INS SimpleName@@DESCRIPTION @TO@ MethodInvocation@@MethodName:get:[DESCRIPTION] @AT@ 8824 @LENGTH@ 11
---------INS SimpleName@@Name:node @TO@ MethodInvocation@@node.get(DESCRIPTION).set(bundle.getString("shutdown")) @AT@ 8815 @LENGTH@ 4
---------INS SimpleName@@MethodName:set:[bundle.getString("shutdown")] @TO@ MethodInvocation@@node.get(DESCRIPTION).set(bundle.getString("shutdown")) @AT@ 8837 @LENGTH@ 33
------------INS MethodInvocation@@bundle.getString("shutdown") @TO@ SimpleName@@MethodName:set:[bundle.getString("shutdown")] @AT@ 8841 @LENGTH@ 28
---------------INS SimpleName@@Name:bundle @TO@ MethodInvocation@@bundle.getString("shutdown") @AT@ 8841 @LENGTH@ 6
---------------INS SimpleName@@MethodName:getString:["shutdown"] @TO@ MethodInvocation@@bundle.getString("shutdown") @AT@ 8848 @LENGTH@ 21
------------------INS StringLiteral@@"shutdown" @TO@ SimpleName@@MethodName:getString:["shutdown"] @AT@ 8858 @LENGTH@ 10
---INS ExpressionStatement@@MethodInvocation:node.get(REQUEST_PROPERTIES).setEmptyObject() @TO@ MethodDeclaration@@public, static, ModelNode, MethodName:getShutdownOperationDescription, final Locale locale,  @AT@ 8880 @LENGTH@ 46
------INS MethodInvocation@@node.get(REQUEST_PROPERTIES).setEmptyObject() @TO@ ExpressionStatement@@MethodInvocation:node.get(REQUEST_PROPERTIES).setEmptyObject() @AT@ 8880 @LENGTH@ 45
---------INS MethodInvocation@@MethodName:get:[REQUEST_PROPERTIES] @TO@ MethodInvocation@@node.get(REQUEST_PROPERTIES).setEmptyObject() @AT@ 8880 @LENGTH@ 28
------------INS SimpleName@@REQUEST_PROPERTIES @TO@ MethodInvocation@@MethodName:get:[REQUEST_PROPERTIES] @AT@ 8889 @LENGTH@ 18
---------INS SimpleName@@Name:node @TO@ MethodInvocation@@node.get(REQUEST_PROPERTIES).setEmptyObject() @AT@ 8880 @LENGTH@ 4
---------INS SimpleName@@MethodName:setEmptyObject:[] @TO@ MethodInvocation@@node.get(REQUEST_PROPERTIES).setEmptyObject() @AT@ 8909 @LENGTH@ 16
---INS ExpressionStatement@@MethodInvocation:node.get(REPLY_PROPERTIES).setEmptyObject() @TO@ MethodDeclaration@@public, static, ModelNode, MethodName:getShutdownOperationDescription, final Locale locale,  @AT@ 8935 @LENGTH@ 44
------INS MethodInvocation@@node.get(REPLY_PROPERTIES).setEmptyObject() @TO@ ExpressionStatement@@MethodInvocation:node.get(REPLY_PROPERTIES).setEmptyObject() @AT@ 8935 @LENGTH@ 43
---------INS MethodInvocation@@MethodName:get:[REPLY_PROPERTIES] @TO@ MethodInvocation@@node.get(REPLY_PROPERTIES).setEmptyObject() @AT@ 8935 @LENGTH@ 26
------------INS SimpleName@@REPLY_PROPERTIES @TO@ MethodInvocation@@MethodName:get:[REPLY_PROPERTIES] @AT@ 8944 @LENGTH@ 16
---------INS SimpleName@@Name:node @TO@ MethodInvocation@@node.get(REPLY_PROPERTIES).setEmptyObject() @AT@ 8935 @LENGTH@ 4
---------INS SimpleName@@MethodName:setEmptyObject:[] @TO@ MethodInvocation@@node.get(REPLY_PROPERTIES).setEmptyObject() @AT@ 8962 @LENGTH@ 16
---INS ReturnStatement@@SimpleName:node @TO@ MethodDeclaration@@public, static, ModelNode, MethodName:getShutdownOperationDescription, final Locale locale,  @AT@ 8988 @LENGTH@ 12
------INS SimpleName@@node @TO@ ReturnStatement@@SimpleName:node @AT@ 8995 @LENGTH@ 4


DEL VariableDeclarationStatement@@Object target=context.getContextData().get(BasicComponent.COMPONENT_INSTANCE_KEY); @AT@ 1957 @LENGTH@ 84
---DEL SimpleType@@Object @AT@ 1957 @LENGTH@ 6
---DEL VariableDeclarationFragment@@target=context.getContextData().get(BasicComponent.COMPONENT_INSTANCE_KEY) @AT@ 1964 @LENGTH@ 76
------DEL SimpleName@@target @AT@ 1964 @LENGTH@ 6
------DEL MethodInvocation@@context.getContextData().get(BasicComponent.COMPONENT_INSTANCE_KEY) @AT@ 1973 @LENGTH@ 67
---------DEL MethodInvocation@@MethodName:getContextData:[] @AT@ 1973 @LENGTH@ 24
---------DEL SimpleName@@Name:context @AT@ 1973 @LENGTH@ 7
---------DEL SimpleName@@MethodName:get:[BasicComponent.COMPONENT_INSTANCE_KEY] @AT@ 1998 @LENGTH@ 42
------------DEL QualifiedName@@BasicComponent.COMPONENT_INSTANCE_KEY @AT@ 2002 @LENGTH@ 37
---------------DEL SimpleName@@BasicComponent @AT@ 2002 @LENGTH@ 14
---------------DEL SimpleName@@COMPONENT_INSTANCE_KEY @AT@ 2017 @LENGTH@ 22


INS FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @TO@ TypeDeclaration@@[public]SessionInformation, [Serializable] @AT@ 1610 @LENGTH@ 90
---INS Modifier@@private @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @AT@ 1610 @LENGTH@ 7
---INS Modifier@@static @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @AT@ 1618 @LENGTH@ 6
---INS Modifier@@final @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @AT@ 1625 @LENGTH@ 5
---INS PrimitiveType@@long @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @AT@ 1631 @LENGTH@ 4
---INS VariableDeclarationFragment@@serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @AT@ 1636 @LENGTH@ 63
------INS SimpleName@@serialVersionUID @TO@ VariableDeclarationFragment@@serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID @AT@ 1636 @LENGTH@ 16
------INS QualifiedName@@SpringSecurityCoreVersion.SERIAL_VERSION_UID @TO@ VariableDeclarationFragment@@serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID @AT@ 1655 @LENGTH@ 44
---------INS SimpleName@@SpringSecurityCoreVersion @TO@ QualifiedName@@SpringSecurityCoreVersion.SERIAL_VERSION_UID @AT@ 1655 @LENGTH@ 25
---------INS SimpleName@@SERIAL_VERSION_UID @TO@ QualifiedName@@SpringSecurityCoreVersion.SERIAL_VERSION_UID @AT@ 1681 @LENGTH@ 18


UPD MethodDeclaration@@Collection<byte[]>, MethodName:keys, byte[] pattern,  @TO@ Set<byte[]>, MethodName:keys, byte[] pattern,  @AT@ 1126 @LENGTH@ 21
---UPD ParameterizedType@@Collection<byte[]> @TO@ Set<byte[]> @AT@ 1107 @LENGTH@ 18
------UPD SimpleType@@Collection @TO@ Set @AT@ 1107 @LENGTH@ 10


UPD IfStatement@@if (deploymentUnit.getAttachment(Attachments.SERVICES).getServiceImplementations(ServiceActivator.class.getName()).isEmpty()) return; @TO@ if (servicesAttachment == null || servicesAttachment.getServiceImplementations(ServiceActivator.class.getName()).isEmpty()) return; @AT@ 2212 @LENGTH@ 144
---UPD MethodInvocation@@deploymentUnit.getAttachment(Attachments.SERVICES).getServiceImplementations(ServiceActivator.class.getName()).isEmpty() @TO@ servicesAttachment.getServiceImplementations(ServiceActivator.class.getName()).isEmpty() @AT@ 2215 @LENGTH@ 120
---INS InfixExpression@@servicesAttachment == null || servicesAttachment.getServiceImplementations(ServiceActivator.class.getName()).isEmpty() @TO@ IfStatement@@if (deploymentUnit.getAttachment(Attachments.SERVICES).getServiceImplementations(ServiceActivator.class.getName()).isEmpty()) return; @AT@ 2379 @LENGTH@ 118
------MOV MethodInvocation@@deploymentUnit.getAttachment(Attachments.SERVICES).getServiceImplementations(ServiceActivator.class.getName()).isEmpty() @TO@ InfixExpression@@servicesAttachment == null || servicesAttachment.getServiceImplementations(ServiceActivator.class.getName()).isEmpty() @AT@ 2215 @LENGTH@ 120
---------DEL MethodInvocation@@MethodName:getAttachment:[Attachments.SERVICES] @AT@ 2215 @LENGTH@ 50
------------DEL QualifiedName@@Attachments.SERVICES @AT@ 2244 @LENGTH@ 20
---------------DEL SimpleName@@Attachments @AT@ 2244 @LENGTH@ 11
---------------DEL SimpleName@@SERVICES @AT@ 2256 @LENGTH@ 8
---------DEL SimpleName@@Name:deploymentUnit @AT@ 2215 @LENGTH@ 14
---------INS SimpleName@@Name:servicesAttachment @TO@ MethodInvocation@@deploymentUnit.getAttachment(Attachments.SERVICES).getServiceImplementations(ServiceActivator.class.getName()).isEmpty() @AT@ 2409 @LENGTH@ 18
------INS InfixExpression@@servicesAttachment == null @TO@ InfixExpression@@servicesAttachment == null || servicesAttachment.getServiceImplementations(ServiceActivator.class.getName()).isEmpty() @AT@ 2379 @LENGTH@ 26
---------INS SimpleName@@servicesAttachment @TO@ InfixExpression@@servicesAttachment == null @AT@ 2379 @LENGTH@ 18
---------INS Operator@@== @TO@ InfixExpression@@servicesAttachment == null @AT@ 2397 @LENGTH@ 2
---------INS NullLiteral@@null @TO@ InfixExpression@@servicesAttachment == null @AT@ 2401 @LENGTH@ 4
------INS Operator@@|| @TO@ InfixExpression@@servicesAttachment == null || servicesAttachment.getServiceImplementations(ServiceActivator.class.getName()).isEmpty() @AT@ 2405 @LENGTH@ 2


UPD VariableDeclarationStatement@@ServiceBuilder<?> serviceBuilder=batchBuilder.addService(DataSourceDeploymentService.SERVICE_NAME_BASE.append(deploymentName),dataSourceDeploymentService).addDependency(ConnectorServices.IRONJACAMAR_MDR,MetadataRepository.class,dataSourceDeploymentService.getMdrInjector()).addDependency(ConnectorServices.RESOURCE_ADAPTER_REGISTRY_SERVICE,ResourceAdapterDeploymentRegistry.class,dataSourceDeploymentService.getRegistryInjector()).addDependency(ConnectorServices.JNDI_STRATEGY_SERVICE,JndiStrategy.class,dataSourceDeploymentService.getJndiInjector()).addDependency(TxnServices.JBOSS_TXN_TRANSACTION_MANAGER,com.arjuna.ats.jbossatx.jta.TransactionManagerService.class,dataSourceDeploymentService.getTxmInjector()).addDependency(JDBCRARDeployService.NAME).addDependency(NamingService.SERVICE_NAME).setInitialMode(ServiceController.Mode.ACTIVE); @TO@ ServiceBuilder<?> serviceBuilder=batchBuilder.addService(DataSourceDeploymentService.SERVICE_NAME_BASE.append(deploymentName),dataSourceDeploymentService).addDependency(ConnectorServices.IRONJACAMAR_MDR,MetadataRepository.class,dataSourceDeploymentService.getMdrInjector()).addDependency(ConnectorServices.RESOURCE_ADAPTER_REGISTRY_SERVICE,ResourceAdapterDeploymentRegistry.class,dataSourceDeploymentService.getRegistryInjector()).addDependency(ConnectorServices.JNDI_STRATEGY_SERVICE,JndiStrategy.class,dataSourceDeploymentService.getJndiInjector()).addDependency(TxnServices.JBOSS_TXN_TRANSACTION_MANAGER,com.arjuna.ats.jbossatx.jta.TransactionManagerService.class,dataSourceDeploymentService.getTxmInjector()).addDependency(JDBCRARDeployService.NAME).addDependency(NamingService.SERVICE_NAME).addDependency(JDBCRARDeployService.NAME).setInitialMode(ServiceController.Mode.ACTIVE); @AT@ 5527 @LENGTH@ 997
---UPD VariableDeclarationFragment@@serviceBuilder=batchBuilder.addService(DataSourceDeploymentService.SERVICE_NAME_BASE.append(deploymentName),dataSourceDeploymentService).addDependency(ConnectorServices.IRONJACAMAR_MDR,MetadataRepository.class,dataSourceDeploymentService.getMdrInjector()).addDependency(ConnectorServices.RESOURCE_ADAPTER_REGISTRY_SERVICE,ResourceAdapterDeploymentRegistry.class,dataSourceDeploymentService.getRegistryInjector()).addDependency(ConnectorServices.JNDI_STRATEGY_SERVICE,JndiStrategy.class,dataSourceDeploymentService.getJndiInjector()).addDependency(TxnServices.JBOSS_TXN_TRANSACTION_MANAGER,com.arjuna.ats.jbossatx.jta.TransactionManagerService.class,dataSourceDeploymentService.getTxmInjector()).addDependency(JDBCRARDeployService.NAME).addDependency(NamingService.SERVICE_NAME).setInitialMode(ServiceController.Mode.ACTIVE) @TO@ serviceBuilder=batchBuilder.addService(DataSourceDeploymentService.SERVICE_NAME_BASE.append(deploymentName),dataSourceDeploymentService).addDependency(ConnectorServices.IRONJACAMAR_MDR,MetadataRepository.class,dataSourceDeploymentService.getMdrInjector()).addDependency(ConnectorServices.RESOURCE_ADAPTER_REGISTRY_SERVICE,ResourceAdapterDeploymentRegistry.class,dataSourceDeploymentService.getRegistryInjector()).addDependency(ConnectorServices.JNDI_STRATEGY_SERVICE,JndiStrategy.class,dataSourceDeploymentService.getJndiInjector()).addDependency(TxnServices.JBOSS_TXN_TRANSACTION_MANAGER,com.arjuna.ats.jbossatx.jta.TransactionManagerService.class,dataSourceDeploymentService.getTxmInjector()).addDependency(JDBCRARDeployService.NAME).addDependency(NamingService.SERVICE_NAME).addDependency(JDBCRARDeployService.NAME).setInitialMode(ServiceController.Mode.ACTIVE) @AT@ 5545 @LENGTH@ 978
------UPD MethodInvocation@@batchBuilder.addService(DataSourceDeploymentService.SERVICE_NAME_BASE.append(deploymentName),dataSourceDeploymentService).addDependency(ConnectorServices.IRONJACAMAR_MDR,MetadataRepository.class,dataSourceDeploymentService.getMdrInjector()).addDependency(ConnectorServices.RESOURCE_ADAPTER_REGISTRY_SERVICE,ResourceAdapterDeploymentRegistry.class,dataSourceDeploymentService.getRegistryInjector()).addDependency(ConnectorServices.JNDI_STRATEGY_SERVICE,JndiStrategy.class,dataSourceDeploymentService.getJndiInjector()).addDependency(TxnServices.JBOSS_TXN_TRANSACTION_MANAGER,com.arjuna.ats.jbossatx.jta.TransactionManagerService.class,dataSourceDeploymentService.getTxmInjector()).addDependency(JDBCRARDeployService.NAME).addDependency(NamingService.SERVICE_NAME).setInitialMode(ServiceController.Mode.ACTIVE) @TO@ batchBuilder.addService(DataSourceDeploymentService.SERVICE_NAME_BASE.append(deploymentName),dataSourceDeploymentService).addDependency(ConnectorServices.IRONJACAMAR_MDR,MetadataRepository.class,dataSourceDeploymentService.getMdrInjector()).addDependency(ConnectorServices.RESOURCE_ADAPTER_REGISTRY_SERVICE,ResourceAdapterDeploymentRegistry.class,dataSourceDeploymentService.getRegistryInjector()).addDependency(ConnectorServices.JNDI_STRATEGY_SERVICE,JndiStrategy.class,dataSourceDeploymentService.getJndiInjector()).addDependency(TxnServices.JBOSS_TXN_TRANSACTION_MANAGER,com.arjuna.ats.jbossatx.jta.TransactionManagerService.class,dataSourceDeploymentService.getTxmInjector()).addDependency(JDBCRARDeployService.NAME).addDependency(NamingService.SERVICE_NAME).addDependency(JDBCRARDeployService.NAME).setInitialMode(ServiceController.Mode.ACTIVE) @AT@ 5562 @LENGTH@ 961
---------INS MethodInvocation@@MethodName:addDependency:[JDBCRARDeployService.NAME] @TO@ MethodInvocation@@batchBuilder.addService(DataSourceDeploymentService.SERVICE_NAME_BASE.append(deploymentName),dataSourceDeploymentService).addDependency(ConnectorServices.IRONJACAMAR_MDR,MetadataRepository.class,dataSourceDeploymentService.getMdrInjector()).addDependency(ConnectorServices.RESOURCE_ADAPTER_REGISTRY_SERVICE,ResourceAdapterDeploymentRegistry.class,dataSourceDeploymentService.getRegistryInjector()).addDependency(ConnectorServices.JNDI_STRATEGY_SERVICE,JndiStrategy.class,dataSourceDeploymentService.getJndiInjector()).addDependency(TxnServices.JBOSS_TXN_TRANSACTION_MANAGER,com.arjuna.ats.jbossatx.jta.TransactionManagerService.class,dataSourceDeploymentService.getTxmInjector()).addDependency(JDBCRARDeployService.NAME).addDependency(NamingService.SERVICE_NAME).setInitialMode(ServiceController.Mode.ACTIVE) @AT@ 5562 @LENGTH@ 956
------------INS QualifiedName@@JDBCRARDeployService.NAME @TO@ MethodInvocation@@MethodName:addDependency:[JDBCRARDeployService.NAME] @AT@ 6492 @LENGTH@ 25
---------------INS SimpleName@@JDBCRARDeployService @TO@ QualifiedName@@JDBCRARDeployService.NAME @AT@ 6492 @LENGTH@ 20
---------------INS SimpleName@@NAME @TO@ QualifiedName@@JDBCRARDeployService.NAME @AT@ 6513 @LENGTH@ 4


UPD Block@@ElseBody:if (!(buffer.startsWith(File.separator))) {  translated=new File("").getAbsolutePath() + File.separator + buffer;} else {  translated=buffer;} @TO@ ElseBody:if (!startsWithRoot(buffer)) {  translated=new File("").getAbsolutePath() + File.separator + buffer;} else {  translated=buffer;} @AT@ 1761 @LENGTH@ 206
---UPD IfStatement@@if (!(buffer.startsWith(File.separator))) {  translated=new File("").getAbsolutePath() + File.separator + buffer;} else {  translated=buffer;} @TO@ if (!startsWithRoot(buffer)) {  translated=new File("").getAbsolutePath() + File.separator + buffer;} else {  translated=buffer;} @AT@ 1761 @LENGTH@ 206
------UPD PrefixExpression@@!(buffer.startsWith(File.separator)) @TO@ !startsWithRoot(buffer) @AT@ 1765 @LENGTH@ 36
---------DEL ParenthesizedExpression@@(buffer.startsWith(File.separator)) @AT@ 1766 @LENGTH@ 35
------------DEL MethodInvocation@@buffer.startsWith(File.separator) @AT@ 1767 @LENGTH@ 33
---------------DEL SimpleName@@Name:buffer @AT@ 1767 @LENGTH@ 6
---------INS MethodInvocation@@startsWithRoot(buffer) @TO@ PrefixExpression@@!(buffer.startsWith(File.separator)) @AT@ 1827 @LENGTH@ 22
------------MOV SimpleName@@MethodName:startsWith:[File.separator] @TO@ MethodInvocation@@startsWithRoot(buffer) @AT@ 1774 @LENGTH@ 26
---------------DEL QualifiedName@@File.separator @AT@ 1785 @LENGTH@ 14
------------------DEL SimpleName@@File @AT@ 1785 @LENGTH@ 4
------------------DEL SimpleName@@separator @AT@ 1790 @LENGTH@ 9
---------------INS SimpleName@@buffer @TO@ SimpleName@@MethodName:startsWith:[File.separator] @AT@ 1842 @LENGTH@ 6
------------MOV SimpleName@@MethodName:startsWith:[File.separator] @TO@ MethodInvocation@@startsWithRoot(buffer) @AT@ 1774 @LENGTH@ 26
---------------DEL QualifiedName@@File.separator @AT@ 1785 @LENGTH@ 14
------------------DEL SimpleName@@File @AT@ 1785 @LENGTH@ 4
------------------DEL SimpleName@@separator @AT@ 1790 @LENGTH@ 9
---------------INS SimpleName@@buffer @TO@ SimpleName@@MethodName:startsWith:[File.separator] @AT@ 1842 @LENGTH@ 6
------------MOV SimpleName@@MethodName:startsWith:[File.separator] @TO@ MethodInvocation@@startsWithRoot(buffer) @AT@ 1774 @LENGTH@ 26
---------------DEL QualifiedName@@File.separator @AT@ 1785 @LENGTH@ 14
------------------DEL SimpleName@@File @AT@ 1785 @LENGTH@ 4
------------------DEL SimpleName@@separator @AT@ 1790 @LENGTH@ 9
---------------INS SimpleName@@buffer @TO@ SimpleName@@MethodName:startsWith:[File.separator] @AT@ 1842 @LENGTH@ 6
------------MOV SimpleName@@MethodName:startsWith:[File.separator] @TO@ MethodInvocation@@startsWithRoot(buffer) @AT@ 1774 @LENGTH@ 26
---------------DEL QualifiedName@@File.separator @AT@ 1785 @LENGTH@ 14
------------------DEL SimpleName@@File @AT@ 1785 @LENGTH@ 4
------------------DEL SimpleName@@separator @AT@ 1790 @LENGTH@ 9
---------------INS SimpleName@@buffer @TO@ SimpleName@@MethodName:startsWith:[File.separator] @AT@ 1842 @LENGTH@ 6
------------MOV SimpleName@@MethodName:startsWith:[File.separator] @TO@ MethodInvocation@@startsWithRoot(buffer) @AT@ 1774 @LENGTH@ 26
---------------DEL QualifiedName@@File.separator @AT@ 1785 @LENGTH@ 14
------------------DEL SimpleName@@File @AT@ 1785 @LENGTH@ 4
------------------DEL SimpleName@@separator @AT@ 1790 @LENGTH@ 9
---------------INS SimpleName@@buffer @TO@ SimpleName@@MethodName:startsWith:[File.separator] @AT@ 1842 @LENGTH@ 6
---UPD IfStatement@@if (!(buffer.startsWith(File.separator))) {  translated=new File("").getAbsolutePath() + File.separator + buffer;} else {  translated=buffer;} @TO@ if (!startsWithRoot(buffer)) {  translated=new File("").getAbsolutePath() + File.separator + buffer;} else {  translated=buffer;} @AT@ 1761 @LENGTH@ 206
------UPD PrefixExpression@@!(buffer.startsWith(File.separator)) @TO@ !startsWithRoot(buffer) @AT@ 1765 @LENGTH@ 36
---------DEL ParenthesizedExpression@@(buffer.startsWith(File.separator)) @AT@ 1766 @LENGTH@ 35
------------DEL MethodInvocation@@buffer.startsWith(File.separator) @AT@ 1767 @LENGTH@ 33
---------------DEL SimpleName@@Name:buffer @AT@ 1767 @LENGTH@ 6
---------INS MethodInvocation@@startsWithRoot(buffer) @TO@ PrefixExpression@@!(buffer.startsWith(File.separator)) @AT@ 1827 @LENGTH@ 22
------------MOV SimpleName@@MethodName:startsWith:[File.separator] @TO@ MethodInvocation@@startsWithRoot(buffer) @AT@ 1774 @LENGTH@ 26
---------------DEL QualifiedName@@File.separator @AT@ 1785 @LENGTH@ 14
------------------DEL SimpleName@@File @AT@ 1785 @LENGTH@ 4
------------------DEL SimpleName@@separator @AT@ 1790 @LENGTH@ 9
---------------INS SimpleName@@buffer @TO@ SimpleName@@MethodName:startsWith:[File.separator] @AT@ 1842 @LENGTH@ 6
------------MOV SimpleName@@MethodName:startsWith:[File.separator] @TO@ MethodInvocation@@startsWithRoot(buffer) @AT@ 1774 @LENGTH@ 26
---------------DEL QualifiedName@@File.separator @AT@ 1785 @LENGTH@ 14
------------------DEL SimpleName@@File @AT@ 1785 @LENGTH@ 4
------------------DEL SimpleName@@separator @AT@ 1790 @LENGTH@ 9
---------------INS SimpleName@@buffer @TO@ SimpleName@@MethodName:startsWith:[File.separator] @AT@ 1842 @LENGTH@ 6
------------MOV SimpleName@@MethodName:startsWith:[File.separator] @TO@ MethodInvocation@@startsWithRoot(buffer) @AT@ 1774 @LENGTH@ 26
---------------DEL QualifiedName@@File.separator @AT@ 1785 @LENGTH@ 14
------------------DEL SimpleName@@File @AT@ 1785 @LENGTH@ 4
------------------DEL SimpleName@@separator @AT@ 1790 @LENGTH@ 9
---------------INS SimpleName@@buffer @TO@ SimpleName@@MethodName:startsWith:[File.separator] @AT@ 1842 @LENGTH@ 6
------------MOV SimpleName@@MethodName:startsWith:[File.separator] @TO@ MethodInvocation@@startsWithRoot(buffer) @AT@ 1774 @LENGTH@ 26
---------------DEL QualifiedName@@File.separator @AT@ 1785 @LENGTH@ 14
------------------DEL SimpleName@@File @AT@ 1785 @LENGTH@ 4
------------------DEL SimpleName@@separator @AT@ 1790 @LENGTH@ 9
---------------INS SimpleName@@buffer @TO@ SimpleName@@MethodName:startsWith:[File.separator] @AT@ 1842 @LENGTH@ 6
------------MOV SimpleName@@MethodName:startsWith:[File.separator] @TO@ MethodInvocation@@startsWithRoot(buffer) @AT@ 1774 @LENGTH@ 26
---------------DEL QualifiedName@@File.separator @AT@ 1785 @LENGTH@ 14
------------------DEL SimpleName@@File @AT@ 1785 @LENGTH@ 4
------------------DEL SimpleName@@separator @AT@ 1790 @LENGTH@ 9
---------------INS SimpleName@@buffer @TO@ SimpleName@@MethodName:startsWith:[File.separator] @AT@ 1842 @LENGTH@ 6


UPD ExpressionStatement@@MethodInvocation:ServerControllerModelUtil.initOperations(getRegistry(),deploymentRepository,extensibleConfigurationPersister) @TO@ MethodInvocation:ServerControllerModelUtil.initOperations(getRegistry(),deploymentRepository,extensibleConfigurationPersister,serverEnvironment) @AT@ 5538 @LENGTH@ 112
---UPD MethodInvocation@@ServerControllerModelUtil.initOperations(getRegistry(),deploymentRepository,extensibleConfigurationPersister) @TO@ ServerControllerModelUtil.initOperations(getRegistry(),deploymentRepository,extensibleConfigurationPersister,serverEnvironment) @AT@ 5538 @LENGTH@ 111
------UPD SimpleName@@MethodName:initOperations:[getRegistry(), deploymentRepository, extensibleConfigurationPersister] @TO@ MethodName:initOperations:[getRegistry(), deploymentRepository, extensibleConfigurationPersister, serverEnvironment] @AT@ 5564 @LENGTH@ 85
---------INS SimpleName@@serverEnvironment @TO@ SimpleName@@MethodName:initOperations:[getRegistry(), deploymentRepository, extensibleConfigurationPersister] @AT@ 5650 @LENGTH@ 17


INS IfStatement@@if (!Util.isWindows()) {  enterState('\\',EscapeCharacterState.INSTANCE);  enterState('"',QuotesState.QUOTES_INCLUDED);} else {  enterState('"',new QuotesState(true,false));} @TO@ MethodDeclaration@@voidMethodName:ArgumentValueState,  @AT@ 2578 @LENGTH@ 321
---INS PrefixExpression@@!Util.isWindows() @TO@ IfStatement@@if (!Util.isWindows()) {  enterState('\\',EscapeCharacterState.INSTANCE);  enterState('"',QuotesState.QUOTES_INCLUDED);} else {  enterState('"',new QuotesState(true,false));} @AT@ 2581 @LENGTH@ 17
------INS Operator@@! @TO@ PrefixExpression@@!Util.isWindows() @AT@ 2581 @LENGTH@ 1
------INS MethodInvocation@@Util.isWindows() @TO@ PrefixExpression@@!Util.isWindows() @AT@ 2582 @LENGTH@ 16
---------INS SimpleName@@Name:Util @TO@ MethodInvocation@@Util.isWindows() @AT@ 2582 @LENGTH@ 4
---------INS SimpleName@@MethodName:isWindows:[] @TO@ MethodInvocation@@Util.isWindows() @AT@ 2587 @LENGTH@ 11
---INS Block@@ThenBody:{  enterState('\\',EscapeCharacterState.INSTANCE);  enterState('"',QuotesState.QUOTES_INCLUDED);} @TO@ IfStatement@@if (!Util.isWindows()) {  enterState('\\',EscapeCharacterState.INSTANCE);  enterState('"',QuotesState.QUOTES_INCLUDED);} else {  enterState('"',new QuotesState(true,false));} @AT@ 2600 @LENGTH@ 223
------MOV ExpressionStatement@@MethodInvocation:enterState('"',QuotesState.QUOTES_INCLUDED) @TO@ Block@@ThenBody:{  enterState('\\',EscapeCharacterState.INSTANCE);  enterState('"',QuotesState.QUOTES_INCLUDED);} @AT@ 2223 @LENGTH@ 45
------MOV ExpressionStatement@@MethodInvocation:enterState('\\',EscapeCharacterState.INSTANCE) @TO@ Block@@ThenBody:{  enterState('\\',EscapeCharacterState.INSTANCE);  enterState('"',QuotesState.QUOTES_INCLUDED);} @AT@ 2602 @LENGTH@ 48
---INS Block@@ElseBody:{  enterState('"',new QuotesState(true,false));} @TO@ IfStatement@@if (!Util.isWindows()) {  enterState('\\',EscapeCharacterState.INSTANCE);  enterState('"',QuotesState.QUOTES_INCLUDED);} else {  enterState('"',new QuotesState(true,false));} @AT@ 2829 @LENGTH@ 70
------INS ExpressionStatement@@MethodInvocation:enterState('"',new QuotesState(true,false)) @TO@ Block@@ElseBody:{  enterState('"',new QuotesState(true,false));} @AT@ 2843 @LENGTH@ 46
---------INS MethodInvocation@@enterState('"',new QuotesState(true,false)) @TO@ ExpressionStatement@@MethodInvocation:enterState('"',new QuotesState(true,false)) @AT@ 2843 @LENGTH@ 45
------------INS SimpleName@@MethodName:enterState:['"', new QuotesState(true,false)] @TO@ MethodInvocation@@enterState('"',new QuotesState(true,false)) @AT@ 2843 @LENGTH@ 45
---------------INS CharacterLiteral@@'"' @TO@ SimpleName@@MethodName:enterState:['"', new QuotesState(true,false)] @AT@ 2854 @LENGTH@ 3
---------------INS ClassInstanceCreation@@QuotesState[true, false] @TO@ SimpleName@@MethodName:enterState:['"', new QuotesState(true,false)] @AT@ 2859 @LENGTH@ 28
------------------INS New@@new @TO@ ClassInstanceCreation@@QuotesState[true, false] @AT@ 2859 @LENGTH@ 3
------------------INS SimpleType@@QuotesState @TO@ ClassInstanceCreation@@QuotesState[true, false] @AT@ 2863 @LENGTH@ 11
------------------INS BooleanLiteral@@true @TO@ ClassInstanceCreation@@QuotesState[true, false] @AT@ 2875 @LENGTH@ 4
------------------INS BooleanLiteral@@false @TO@ ClassInstanceCreation@@QuotesState[true, false] @AT@ 2881 @LENGTH@ 5


INS VariableDeclarationStatement@@Boolean ignore=deploymentUnit.getAttachment(Attachments.IGNORE_OSGI); @TO@ MethodDeclaration@@public, void, MethodName:deploy, DeploymentPhaseContext phaseContext, DeploymentUnitProcessingException,  @AT@ 2312 @LENGTH@ 71
---INS SimpleType@@Boolean @TO@ VariableDeclarationStatement@@Boolean ignore=deploymentUnit.getAttachment(Attachments.IGNORE_OSGI); @AT@ 2312 @LENGTH@ 7
---INS VariableDeclarationFragment@@ignore=deploymentUnit.getAttachment(Attachments.IGNORE_OSGI) @TO@ VariableDeclarationStatement@@Boolean ignore=deploymentUnit.getAttachment(Attachments.IGNORE_OSGI); @AT@ 2320 @LENGTH@ 62
------INS SimpleName@@ignore @TO@ VariableDeclarationFragment@@ignore=deploymentUnit.getAttachment(Attachments.IGNORE_OSGI) @AT@ 2320 @LENGTH@ 6
------INS MethodInvocation@@deploymentUnit.getAttachment(Attachments.IGNORE_OSGI) @TO@ VariableDeclarationFragment@@ignore=deploymentUnit.getAttachment(Attachments.IGNORE_OSGI) @AT@ 2329 @LENGTH@ 53
---------INS SimpleName@@Name:deploymentUnit @TO@ MethodInvocation@@deploymentUnit.getAttachment(Attachments.IGNORE_OSGI) @AT@ 2329 @LENGTH@ 14
---------INS SimpleName@@MethodName:getAttachment:[Attachments.IGNORE_OSGI] @TO@ MethodInvocation@@deploymentUnit.getAttachment(Attachments.IGNORE_OSGI) @AT@ 2344 @LENGTH@ 38
------------INS QualifiedName@@Attachments.IGNORE_OSGI @TO@ SimpleName@@MethodName:getAttachment:[Attachments.IGNORE_OSGI] @AT@ 2358 @LENGTH@ 23
---------------INS SimpleName@@Attachments @TO@ QualifiedName@@Attachments.IGNORE_OSGI @AT@ 2358 @LENGTH@ 11
---------------INS SimpleName@@IGNORE_OSGI @TO@ QualifiedName@@Attachments.IGNORE_OSGI @AT@ 2370 @LENGTH@ 11


UPD VariableDeclarationStatement@@PersistentProperty idProperty=entityMetadata.getIdProperty(); @TO@ MongoPersistentProperty idProperty=entityMetadata.getIdProperty(); @AT@ 1965 @LENGTH@ 63
---UPD SimpleType@@PersistentProperty @TO@ MongoPersistentProperty @AT@ 1965 @LENGTH@ 18


UPD IfStatement@@if (deploymentRoot.getChild("META-INF/services/java.sql.Driver") != null) {  deploymentUnit.putAttachment(Attachments.IGNORE_OSGI,Boolean.TRUE);  break;} @TO@ if (deploymentRoot.getChild("META-INF/services/java.sql.Driver").exists()) {  deploymentUnit.putAttachment(Attachments.IGNORE_OSGI,Boolean.TRUE);  break;} @AT@ 3271 @LENGTH@ 198
---INS MethodInvocation@@deploymentRoot.getChild("META-INF/services/java.sql.Driver").exists() @TO@ IfStatement@@if (deploymentRoot.getChild("META-INF/services/java.sql.Driver") != null) {  deploymentUnit.putAttachment(Attachments.IGNORE_OSGI,Boolean.TRUE);  break;} @AT@ 3275 @LENGTH@ 69
------INS MethodInvocation@@MethodName:getChild:["META-INF/services/java.sql.Driver"] @TO@ MethodInvocation@@deploymentRoot.getChild("META-INF/services/java.sql.Driver").exists() @AT@ 3275 @LENGTH@ 60
---------INS StringLiteral@@"META-INF/services/java.sql.Driver" @TO@ MethodInvocation@@MethodName:getChild:["META-INF/services/java.sql.Driver"] @AT@ 3299 @LENGTH@ 35
------MOV SimpleName@@Name:deploymentRoot @TO@ MethodInvocation@@deploymentRoot.getChild("META-INF/services/java.sql.Driver").exists() @AT@ 3275 @LENGTH@ 14
------INS SimpleName@@MethodName:exists:[] @TO@ MethodInvocation@@deploymentRoot.getChild("META-INF/services/java.sql.Driver").exists() @AT@ 3336 @LENGTH@ 8
---DEL InfixExpression@@deploymentRoot.getChild("META-INF/services/java.sql.Driver") != null @AT@ 3275 @LENGTH@ 68
------DEL MethodInvocation@@deploymentRoot.getChild("META-INF/services/java.sql.Driver") @AT@ 3275 @LENGTH@ 60
---------DEL SimpleName@@MethodName:getChild:["META-INF/services/java.sql.Driver"] @AT@ 3290 @LENGTH@ 45
------------DEL StringLiteral@@"META-INF/services/java.sql.Driver" @AT@ 3299 @LENGTH@ 35
------DEL Operator@@!= @AT@ 3335 @LENGTH@ 2
------DEL NullLiteral@@null @AT@ 3339 @LENGTH@ 4


DEL FieldDeclaration@@private, static, final, transient, Logger, [LOG=LoggerFactory.getLogger(PrinterProducer.class)] @AT@ 1482 @LENGTH@ 91
---DEL Modifier@@private @AT@ 1482 @LENGTH@ 7
---DEL Modifier@@static @AT@ 1490 @LENGTH@ 6
---DEL Modifier@@final @AT@ 1497 @LENGTH@ 5
---DEL Modifier@@transient @AT@ 1503 @LENGTH@ 9
---DEL SimpleType@@Logger @AT@ 1513 @LENGTH@ 6
---DEL VariableDeclarationFragment@@LOG=LoggerFactory.getLogger(PrinterProducer.class) @AT@ 1520 @LENGTH@ 52
------DEL SimpleName@@LOG @AT@ 1520 @LENGTH@ 3
------DEL MethodInvocation@@LoggerFactory.getLogger(PrinterProducer.class) @AT@ 1526 @LENGTH@ 46
---------DEL SimpleName@@Name:LoggerFactory @AT@ 1526 @LENGTH@ 13
---------DEL SimpleName@@MethodName:getLogger:[PrinterProducer.class] @AT@ 1540 @LENGTH@ 32
------------DEL TypeLiteral@@PrinterProducer.class @AT@ 1550 @LENGTH@ 21


UPD ForStatement@@for (int i=0; i < NUM_THREADS; i++) {  results[i].get(10,TimeUnit.SECONDS);} @TO@ for (int i=1; i < NUM_THREADS; i++) {  try {    results[i].get(10,TimeUnit.SECONDS);    Assert.fail("Invocation on a singleton bean with WRITE lock was expected to fail for thread numbered: " + i);  } catch (  ExecutionException ee) {    Assert.assertTrue("Unexpected exception during invocation on a singleton bean with WRITE lock",ee.getCause() instanceof ConcurrentAccessTimeoutException);  }} @AT@ 5412 @LENGTH@ 99
---UPD VariableDeclarationExpression@@int i=0 @TO@ int i=1 @AT@ 5417 @LENGTH@ 9
------UPD VariableDeclarationFragment@@i=0 @TO@ i=1 @AT@ 5421 @LENGTH@ 5
---------UPD NumberLiteral@@0 @TO@ 1 @AT@ 5425 @LENGTH@ 1
---INS TryStatement@@try {  results[i].get(10,TimeUnit.SECONDS);  Assert.fail("Invocation on a singleton bean with WRITE lock was expected to fail for thread numbered: " + i);} catch (ExecutionException ee) {  Assert.assertTrue("Unexpected exception during invocation on a singleton bean with WRITE lock",ee.getCause() instanceof ConcurrentAccessTimeoutException);} @TO@ ForStatement@@for (int i=0; i < NUM_THREADS; i++) {  results[i].get(10,TimeUnit.SECONDS);} @AT@ 5986 @LENGTH@ 429
------MOV ExpressionStatement@@MethodInvocation:results[i].get(10,TimeUnit.SECONDS) @TO@ TryStatement@@try {  results[i].get(10,TimeUnit.SECONDS);  Assert.fail("Invocation on a singleton bean with WRITE lock was expected to fail for thread numbered: " + i);} catch (ExecutionException ee) {  Assert.assertTrue("Unexpected exception during invocation on a singleton bean with WRITE lock",ee.getCause() instanceof ConcurrentAccessTimeoutException);} @AT@ 5464 @LENGTH@ 37
------INS ExpressionStatement@@MethodInvocation:Assert.fail("Invocation on a singleton bean with WRITE lock was expected to fail for thread numbered: " + i) @TO@ TryStatement@@try {  results[i].get(10,TimeUnit.SECONDS);  Assert.fail("Invocation on a singleton bean with WRITE lock was expected to fail for thread numbered: " + i);} catch (ExecutionException ee) {  Assert.assertTrue("Unexpected exception during invocation on a singleton bean with WRITE lock",ee.getCause() instanceof ConcurrentAccessTimeoutException);} @AT@ 6062 @LENGTH@ 109
---------INS MethodInvocation@@Assert.fail("Invocation on a singleton bean with WRITE lock was expected to fail for thread numbered: " + i) @TO@ ExpressionStatement@@MethodInvocation:Assert.fail("Invocation on a singleton bean with WRITE lock was expected to fail for thread numbered: " + i) @AT@ 6062 @LENGTH@ 108
------------INS SimpleName@@Name:Assert @TO@ MethodInvocation@@Assert.fail("Invocation on a singleton bean with WRITE lock was expected to fail for thread numbered: " + i) @AT@ 6062 @LENGTH@ 6
------------INS SimpleName@@MethodName:fail:["Invocation on a singleton bean with WRITE lock was expected to fail for thread numbered: " + i] @TO@ MethodInvocation@@Assert.fail("Invocation on a singleton bean with WRITE lock was expected to fail for thread numbered: " + i) @AT@ 6069 @LENGTH@ 101
---------------INS InfixExpression@@"Invocation on a singleton bean with WRITE lock was expected to fail for thread numbered: " + i @TO@ SimpleName@@MethodName:fail:["Invocation on a singleton bean with WRITE lock was expected to fail for thread numbered: " + i] @AT@ 6074 @LENGTH@ 95
------------------INS StringLiteral@@"Invocation on a singleton bean with WRITE lock was expected to fail for thread numbered: " @TO@ InfixExpression@@"Invocation on a singleton bean with WRITE lock was expected to fail for thread numbered: " + i @AT@ 6074 @LENGTH@ 91
------------------INS Operator@@+ @TO@ InfixExpression@@"Invocation on a singleton bean with WRITE lock was expected to fail for thread numbered: " + i @AT@ 6165 @LENGTH@ 1
------------------INS SimpleName@@i @TO@ InfixExpression@@"Invocation on a singleton bean with WRITE lock was expected to fail for thread numbered: " + i @AT@ 6168 @LENGTH@ 1
------INS CatchClause@@catch (ExecutionException ee) {  Assert.assertTrue("Unexpected exception during invocation on a singleton bean with WRITE lock",ee.getCause() instanceof ConcurrentAccessTimeoutException);} @TO@ TryStatement@@try {  results[i].get(10,TimeUnit.SECONDS);  Assert.fail("Invocation on a singleton bean with WRITE lock was expected to fail for thread numbered: " + i);} catch (ExecutionException ee) {  Assert.assertTrue("Unexpected exception during invocation on a singleton bean with WRITE lock",ee.getCause() instanceof ConcurrentAccessTimeoutException);} @AT@ 6198 @LENGTH@ 217
---------INS SingleVariableDeclaration@@ExecutionException ee @TO@ CatchClause@@catch (ExecutionException ee) {  Assert.assertTrue("Unexpected exception during invocation on a singleton bean with WRITE lock",ee.getCause() instanceof ConcurrentAccessTimeoutException);} @AT@ 6205 @LENGTH@ 21
------------INS SimpleType@@ExecutionException @TO@ SingleVariableDeclaration@@ExecutionException ee @AT@ 6205 @LENGTH@ 18
------------INS SimpleName@@ee @TO@ SingleVariableDeclaration@@ExecutionException ee @AT@ 6224 @LENGTH@ 2
---------INS ExpressionStatement@@MethodInvocation:Assert.assertTrue("Unexpected exception during invocation on a singleton bean with WRITE lock",ee.getCause() instanceof ConcurrentAccessTimeoutException) @TO@ CatchClause@@catch (ExecutionException ee) {  Assert.assertTrue("Unexpected exception during invocation on a singleton bean with WRITE lock",ee.getCause() instanceof ConcurrentAccessTimeoutException);} @AT@ 6246 @LENGTH@ 155
------------INS MethodInvocation@@Assert.assertTrue("Unexpected exception during invocation on a singleton bean with WRITE lock",ee.getCause() instanceof ConcurrentAccessTimeoutException) @TO@ ExpressionStatement@@MethodInvocation:Assert.assertTrue("Unexpected exception during invocation on a singleton bean with WRITE lock",ee.getCause() instanceof ConcurrentAccessTimeoutException) @AT@ 6246 @LENGTH@ 154
---------------INS SimpleName@@Name:Assert @TO@ MethodInvocation@@Assert.assertTrue("Unexpected exception during invocation on a singleton bean with WRITE lock",ee.getCause() instanceof ConcurrentAccessTimeoutException) @AT@ 6246 @LENGTH@ 6
---------------INS SimpleName@@MethodName:assertTrue:["Unexpected exception during invocation on a singleton bean with WRITE lock", ee.getCause() instanceof ConcurrentAccessTimeoutException] @TO@ MethodInvocation@@Assert.assertTrue("Unexpected exception during invocation on a singleton bean with WRITE lock",ee.getCause() instanceof ConcurrentAccessTimeoutException) @AT@ 6253 @LENGTH@ 147
------------------INS StringLiteral@@"Unexpected exception during invocation on a singleton bean with WRITE lock" @TO@ SimpleName@@MethodName:assertTrue:["Unexpected exception during invocation on a singleton bean with WRITE lock", ee.getCause() instanceof ConcurrentAccessTimeoutException] @AT@ 6264 @LENGTH@ 76
------------------INS InstanceofExpression@@ee.getCause() instanceof ConcurrentAccessTimeoutException @TO@ SimpleName@@MethodName:assertTrue:["Unexpected exception during invocation on a singleton bean with WRITE lock", ee.getCause() instanceof ConcurrentAccessTimeoutException] @AT@ 6342 @LENGTH@ 57
---------------------INS MethodInvocation@@ee.getCause() @TO@ InstanceofExpression@@ee.getCause() instanceof ConcurrentAccessTimeoutException @AT@ 6342 @LENGTH@ 13
------------------------INS SimpleName@@Name:ee @TO@ MethodInvocation@@ee.getCause() @AT@ 6342 @LENGTH@ 2
------------------------INS SimpleName@@MethodName:getCause:[] @TO@ MethodInvocation@@ee.getCause() @AT@ 6345 @LENGTH@ 10
---------------------INS Instanceof@@instanceof @TO@ InstanceofExpression@@ee.getCause() instanceof ConcurrentAccessTimeoutException @AT@ 6356 @LENGTH@ 10
---------------------INS SimpleType@@ConcurrentAccessTimeoutException @TO@ InstanceofExpression@@ee.getCause() instanceof ConcurrentAccessTimeoutException @AT@ 6367 @LENGTH@ 32


DEL FieldDeclaration@@private, static, final, transient, Logger, [LOG=LoggerFactory.getLogger(PublishSubscribeTest.class)] @AT@ 1294 @LENGTH@ 96
---DEL Modifier@@private @AT@ 1294 @LENGTH@ 7
---DEL Modifier@@static @AT@ 1302 @LENGTH@ 6
---DEL Modifier@@final @AT@ 1309 @LENGTH@ 5
---DEL Modifier@@transient @AT@ 1315 @LENGTH@ 9
---DEL SimpleType@@Logger @AT@ 1325 @LENGTH@ 6
---DEL VariableDeclarationFragment@@LOG=LoggerFactory.getLogger(PublishSubscribeTest.class) @AT@ 1332 @LENGTH@ 57
------DEL SimpleName@@LOG @AT@ 1332 @LENGTH@ 3
------DEL MethodInvocation@@LoggerFactory.getLogger(PublishSubscribeTest.class) @AT@ 1338 @LENGTH@ 51
---------DEL SimpleName@@Name:LoggerFactory @AT@ 1338 @LENGTH@ 13
---------DEL SimpleName@@MethodName:getLogger:[PublishSubscribeTest.class] @AT@ 1352 @LENGTH@ 37
------------DEL TypeLiteral@@PublishSubscribeTest.class @AT@ 1362 @LENGTH@ 26


DEL VariableDeclarationStatement@@Date createdDate=profile.getCreatedDate(); @AT@ 3367 @LENGTH@ 44
---DEL SimpleType@@Date @AT@ 3367 @LENGTH@ 4
---DEL VariableDeclarationFragment@@createdDate=profile.getCreatedDate() @AT@ 3372 @LENGTH@ 38
------DEL SimpleName@@createdDate @AT@ 3372 @LENGTH@ 11
------DEL MethodInvocation@@profile.getCreatedDate() @AT@ 3386 @LENGTH@ 24
---------DEL SimpleName@@Name:profile @AT@ 3386 @LENGTH@ 7
---------DEL SimpleName@@MethodName:getCreatedDate:[] @AT@ 3394 @LENGTH@ 16


INS ExpressionStatement@@Assignment:ctx.location=i @TO@ MethodDeclaration@@public, static, void, MethodName:parse, String str, ParsingStateCallbackHandler callbackHandler, ParsingState initialState, OperationFormatException,  @AT@ 2496 @LENGTH@ 17
---INS Assignment@@ctx.location=i @TO@ ExpressionStatement@@Assignment:ctx.location=i @AT@ 2496 @LENGTH@ 16
------INS QualifiedName@@ctx.location @TO@ Assignment@@ctx.location=i @AT@ 2496 @LENGTH@ 12
---------INS SimpleName@@ctx @TO@ QualifiedName@@ctx.location @AT@ 2496 @LENGTH@ 3
---------INS SimpleName@@location @TO@ QualifiedName@@ctx.location @AT@ 2500 @LENGTH@ 8
------INS Operator@@= @TO@ Assignment@@ctx.location=i @AT@ 2508 @LENGTH@ 1
------INS SimpleName@@i @TO@ Assignment@@ctx.location=i @AT@ 2511 @LENGTH@ 1


UPD MethodDeclaration@@public, String, MethodName:postTweet, TweetForm tweetForm,  @TO@ public, String, MethodName:postTweet, Principal user, TweetForm tweetForm,  @AT@ 2118 @LENGTH@ 475
---UPD VariableDeclarationStatement@@List<ServiceProviderConnection<TwitterOperations>> connections=twitterProvider.getConnections(1); @TO@ List<ServiceProviderConnection<TwitterOperations>> connections=twitterProvider.getConnections(user.getName()); @AT@ 2167 @LENGTH@ 99
------UPD VariableDeclarationFragment@@connections=twitterProvider.getConnections(1) @TO@ connections=twitterProvider.getConnections(user.getName()) @AT@ 2218 @LENGTH@ 47
---------UPD MethodInvocation@@twitterProvider.getConnections(1) @TO@ twitterProvider.getConnections(user.getName()) @AT@ 2232 @LENGTH@ 33
------------UPD SimpleName@@MethodName:getConnections:[1] @TO@ MethodName:getConnections:[user.getName()] @AT@ 2248 @LENGTH@ 17
---------------DEL NumberLiteral@@1 @AT@ 2263 @LENGTH@ 1
---------------INS MethodInvocation@@user.getName() @TO@ SimpleName@@MethodName:getConnections:[1] @AT@ 2348 @LENGTH@ 14
------------------INS SimpleName@@Name:user @TO@ MethodInvocation@@user.getName() @AT@ 2348 @LENGTH@ 4
------------------INS SimpleName@@MethodName:getName:[] @TO@ MethodInvocation@@user.getName() @AT@ 2353 @LENGTH@ 9
---INS SingleVariableDeclaration@@Principal user @TO@ MethodDeclaration@@public, String, MethodName:postTweet, TweetForm tweetForm,  @AT@ 2211 @LENGTH@ 14
------INS SimpleType@@Principal @TO@ SingleVariableDeclaration@@Principal user @AT@ 2211 @LENGTH@ 9
------INS SimpleName@@user @TO@ SingleVariableDeclaration@@Principal user @AT@ 2221 @LENGTH@ 4


UPD EnhancedForStatement@@for (String key : row.keySet()) {  writer.addRecordEntry(key,row.get(key));} @TO@ for (Entry<String,Object> entry : row.entrySet()) {  writer.addRecordEntry(entry.getKey(),entry.getValue());} @AT@ 3378 @LENGTH@ 113
---UPD SingleVariableDeclaration@@String key @TO@ Entry<String,Object> entry @AT@ 3383 @LENGTH@ 10
------DEL SimpleType@@String @AT@ 3383 @LENGTH@ 6
------UPD SimpleName@@key @TO@ entry @AT@ 3390 @LENGTH@ 3
------INS ParameterizedType@@Entry<String,Object> @TO@ SingleVariableDeclaration@@String key @AT@ 3411 @LENGTH@ 21
---------INS SimpleType@@Entry @TO@ ParameterizedType@@Entry<String,Object> @AT@ 3411 @LENGTH@ 5
---------INS SimpleType@@String @TO@ ParameterizedType@@Entry<String,Object> @AT@ 3417 @LENGTH@ 6
---------INS SimpleType@@Object @TO@ ParameterizedType@@Entry<String,Object> @AT@ 3425 @LENGTH@ 6
---UPD MethodInvocation@@row.keySet() @TO@ row.entrySet() @AT@ 3396 @LENGTH@ 12
------UPD SimpleName@@MethodName:keySet:[] @TO@ MethodName:entrySet:[] @AT@ 3400 @LENGTH@ 8
---UPD ExpressionStatement@@MethodInvocation:writer.addRecordEntry(key,row.get(key)) @TO@ MethodInvocation:writer.addRecordEntry(entry.getKey(),entry.getValue()) @AT@ 3432 @LENGTH@ 41
------UPD MethodInvocation@@writer.addRecordEntry(key,row.get(key)) @TO@ writer.addRecordEntry(entry.getKey(),entry.getValue()) @AT@ 3432 @LENGTH@ 40
---------UPD SimpleName@@MethodName:addRecordEntry:[key, row.get(key)] @TO@ MethodName:addRecordEntry:[entry.getKey(), entry.getValue()] @AT@ 3439 @LENGTH@ 33
------------DEL SimpleName@@key @AT@ 3454 @LENGTH@ 3
------------UPD MethodInvocation@@row.get(key) @TO@ entry.getValue() @AT@ 3459 @LENGTH@ 12
---------------UPD SimpleName@@Name:row @TO@ Name:entry @AT@ 3459 @LENGTH@ 3
---------------UPD SimpleName@@MethodName:get:[key] @TO@ MethodName:getValue:[] @AT@ 3463 @LENGTH@ 8
------------------DEL SimpleName@@key @AT@ 3467 @LENGTH@ 3
------------INS MethodInvocation@@entry.getKey() @TO@ SimpleName@@MethodName:addRecordEntry:[key, row.get(key)] @AT@ 3501 @LENGTH@ 14
---------------INS SimpleName@@Name:entry @TO@ MethodInvocation@@entry.getKey() @AT@ 3501 @LENGTH@ 5
---------------INS SimpleName@@MethodName:getKey:[] @TO@ MethodInvocation@@entry.getKey() @AT@ 3507 @LENGTH@ 8


UPD FieldDeclaration@@private, final, Log, [LOG=LogFactory.getLog(RoutePolicyProcessor.class)] @TO@ private, static, final, Log, [LOG=LogFactory.getLog(RoutePolicyProcessor.class)] @AT@ 1437 @LENGTH@ 70
---INS Modifier@@static @TO@ FieldDeclaration@@private, final, Log, [LOG=LogFactory.getLog(RoutePolicyProcessor.class)] @AT@ 1445 @LENGTH@ 6


UPD IfStatement@@if (resource.equals("") || resource.indexOf(".") == -1) respond404(http); @TO@ if (resource.indexOf(".") == -1) {  respond404(http);} @AT@ 1901 @LENGTH@ 70


INS MethodDeclaration@@public, void, MethodName:onClose, Connection connection,  @TO@ AnonymousClassDeclaration@@AnonymousClass @AT@ 6884 @LENGTH@ 76
---INS Modifier@@public @TO@ MethodDeclaration@@public, void, MethodName:onClose, Connection connection,  @AT@ 6884 @LENGTH@ 6
---INS PrimitiveType@@void @TO@ MethodDeclaration@@public, void, MethodName:onClose, Connection connection,  @AT@ 6891 @LENGTH@ 4
---INS SimpleName@@MethodName:onClose @TO@ MethodDeclaration@@public, void, MethodName:onClose, Connection connection,  @AT@ 6896 @LENGTH@ 7
---INS SingleVariableDeclaration@@Connection connection @TO@ MethodDeclaration@@public, void, MethodName:onClose, Connection connection,  @AT@ 6904 @LENGTH@ 21
------INS SimpleType@@Connection @TO@ SingleVariableDeclaration@@Connection connection @AT@ 6904 @LENGTH@ 10
------INS SimpleName@@connection @TO@ SingleVariableDeclaration@@Connection connection @AT@ 6915 @LENGTH@ 10
---INS ExpressionStatement@@Assignment:initialized=false @TO@ MethodDeclaration@@public, void, MethodName:onClose, Connection connection,  @AT@ 6934 @LENGTH@ 20
------INS Assignment@@initialized=false @TO@ ExpressionStatement@@Assignment:initialized=false @AT@ 6934 @LENGTH@ 19
---------INS SimpleName@@initialized @TO@ Assignment@@initialized=false @AT@ 6934 @LENGTH@ 11
---------INS Operator@@= @TO@ Assignment@@initialized=false @AT@ 6945 @LENGTH@ 1
---------INS BooleanLiteral@@false @TO@ Assignment@@initialized=false @AT@ 6948 @LENGTH@ 5


UPD EnhancedForStatement@@for (String clsName : v.keySet()) {  ImplicitCollectionEntry entry=new ImplicitCollectionEntry(clsName,v.get(clsName));  list.add(entry);} @TO@ for (Entry<String,String[]> e : v.entrySet()) {  ImplicitCollectionEntry entry=new ImplicitCollectionEntry(e.getKey(),e.getValue());  list.add(entry);} @AT@ 7176 @LENGTH@ 184
---UPD SingleVariableDeclaration@@String clsName @TO@ Entry<String,String[]> e @AT@ 7181 @LENGTH@ 14
------DEL SimpleType@@String @AT@ 7181 @LENGTH@ 6
------UPD SimpleName@@clsName @TO@ e @AT@ 7188 @LENGTH@ 7
------INS ParameterizedType@@Entry<String,String[]> @TO@ SingleVariableDeclaration@@String clsName @AT@ 7209 @LENGTH@ 23
---------INS SimpleType@@Entry @TO@ ParameterizedType@@Entry<String,String[]> @AT@ 7209 @LENGTH@ 5
---------INS SimpleType@@String @TO@ ParameterizedType@@Entry<String,String[]> @AT@ 7215 @LENGTH@ 6
---------INS ArrayType@@String[] @TO@ ParameterizedType@@Entry<String,String[]> @AT@ 7223 @LENGTH@ 8
------------INS SimpleType@@String @TO@ ArrayType@@String[] @AT@ 7223 @LENGTH@ 6
---UPD MethodInvocation@@v.keySet() @TO@ v.entrySet() @AT@ 7198 @LENGTH@ 10
------UPD SimpleName@@MethodName:keySet:[] @TO@ MethodName:entrySet:[] @AT@ 7200 @LENGTH@ 8
---UPD VariableDeclarationStatement@@ImplicitCollectionEntry entry=new ImplicitCollectionEntry(clsName,v.get(clsName)); @TO@ ImplicitCollectionEntry entry=new ImplicitCollectionEntry(e.getKey(),e.getValue()); @AT@ 7228 @LENGTH@ 85
------UPD VariableDeclarationFragment@@entry=new ImplicitCollectionEntry(clsName,v.get(clsName)) @TO@ entry=new ImplicitCollectionEntry(e.getKey(),e.getValue()) @AT@ 7252 @LENGTH@ 60
---------UPD ClassInstanceCreation@@ImplicitCollectionEntry[clsName, v.get(clsName)] @TO@ ImplicitCollectionEntry[e.getKey(), e.getValue()] @AT@ 7260 @LENGTH@ 52
------------DEL SimpleName@@clsName @AT@ 7288 @LENGTH@ 7
------------UPD MethodInvocation@@v.get(clsName) @TO@ e.getValue() @AT@ 7297 @LENGTH@ 14
---------------UPD SimpleName@@Name:v @TO@ Name:e @AT@ 7297 @LENGTH@ 1
---------------UPD SimpleName@@MethodName:get:[clsName] @TO@ MethodName:getValue:[] @AT@ 7299 @LENGTH@ 12
------------------DEL SimpleName@@clsName @AT@ 7303 @LENGTH@ 7
------------INS MethodInvocation@@e.getKey() @TO@ ClassInstanceCreation@@ImplicitCollectionEntry[clsName, v.get(clsName)] @AT@ 7329 @LENGTH@ 10
---------------INS SimpleName@@Name:e @TO@ MethodInvocation@@e.getKey() @AT@ 7329 @LENGTH@ 1
---------------INS SimpleName@@MethodName:getKey:[] @TO@ MethodInvocation@@e.getKey() @AT@ 7331 @LENGTH@ 8


UPD WhileStatement@@while (strategy.getIgnoreEmptyLines() && eol && (lastChar == '\n' || lastChar == ExtendedBufferedReader.UNDEFINED)&& !isEndOfFile(lastChar)) {  lastChar=c;  c=in.read();  eol=isEndOfLine(c);  c=in.readAgain();  if (isEndOfFile(c)) {    tkn.type=TT_EOF;    return tkn;  }} @TO@ while (strategy.getIgnoreEmptyLines() && eol && (lastChar == '\n' || lastChar == '\r' || lastChar == ExtendedBufferedReader.UNDEFINED)&& !isEndOfFile(lastChar)) {  lastChar=c;  c=in.read();  eol=isEndOfLine(c);  c=in.readAgain();  if (isEndOfFile(c)) {    tkn.type=TT_EOF;    return tkn;  }} @AT@ 10515 @LENGTH@ 451
---UPD InfixExpression@@strategy.getIgnoreEmptyLines() && eol && (lastChar == '\n' || lastChar == ExtendedBufferedReader.UNDEFINED)&& !isEndOfFile(lastChar) @TO@ strategy.getIgnoreEmptyLines() && eol && (lastChar == '\n' || lastChar == '\r' || lastChar == ExtendedBufferedReader.UNDEFINED)&& !isEndOfFile(lastChar) @AT@ 10522 @LENGTH@ 154
------UPD ParenthesizedExpression@@(lastChar == '\n' || lastChar == ExtendedBufferedReader.UNDEFINED) @TO@ (lastChar == '\n' || lastChar == '\r' || lastChar == ExtendedBufferedReader.UNDEFINED) @AT@ 10570 @LENGTH@ 73
---------UPD InfixExpression@@lastChar == '\n' || lastChar == ExtendedBufferedReader.UNDEFINED @TO@ lastChar == '\n' || lastChar == '\r' || lastChar == ExtendedBufferedReader.UNDEFINED @AT@ 10571 @LENGTH@ 71
------------INS InfixExpression@@lastChar == '\n' || lastChar == '\r' @TO@ InfixExpression@@lastChar == '\n' || lastChar == ExtendedBufferedReader.UNDEFINED @AT@ 10571 @LENGTH@ 43
---------------MOV InfixExpression@@lastChar == '\n' @TO@ InfixExpression@@lastChar == '\n' || lastChar == '\r' @AT@ 10571 @LENGTH@ 16
---------------MOV Operator@@|| @TO@ InfixExpression@@lastChar == '\n' || lastChar == '\r' @AT@ 10587 @LENGTH@ 2
---------------INS InfixExpression@@lastChar == '\r' @TO@ InfixExpression@@lastChar == '\n' || lastChar == '\r' @AT@ 10598 @LENGTH@ 16
------------------INS SimpleName@@lastChar @TO@ InfixExpression@@lastChar == '\r' @AT@ 10598 @LENGTH@ 8
------------------INS Operator@@== @TO@ InfixExpression@@lastChar == '\r' @AT@ 10606 @LENGTH@ 2
------------------INS CharacterLiteral@@'\r' @TO@ InfixExpression@@lastChar == '\r' @AT@ 10610 @LENGTH@ 4
------------INS Operator@@|| @TO@ InfixExpression@@lastChar == '\n' || lastChar == ExtendedBufferedReader.UNDEFINED @AT@ 10614 @LENGTH@ 2


INS ExpressionStatement@@MethodInvocation:backup(fileName) @TO@ MethodDeclaration@@public, void, MethodName:store, final ModelNode model, ConfigurationPersistenceException,  @AT@ 3209 @LENGTH@ 17
---INS MethodInvocation@@backup(fileName) @TO@ ExpressionStatement@@MethodInvocation:backup(fileName) @AT@ 3209 @LENGTH@ 16
------INS SimpleName@@MethodName:backup:[fileName] @TO@ MethodInvocation@@backup(fileName) @AT@ 3209 @LENGTH@ 16
---------INS SimpleName@@fileName @TO@ SimpleName@@MethodName:backup:[fileName] @AT@ 3216 @LENGTH@ 8


INS MethodDeclaration@@private, String, MethodName:getPasswordType, WSPasswordCallback pc,  @TO@ TypeDeclaration@@[public]KeystorePasswordCallback, [CallbackHandler] @AT@ 2773 @LENGTH@ 640
---INS Modifier@@private @TO@ MethodDeclaration@@private, String, MethodName:getPasswordType, WSPasswordCallback pc,  @AT@ 2773 @LENGTH@ 7
---INS SimpleType@@String @TO@ MethodDeclaration@@private, String, MethodName:getPasswordType, WSPasswordCallback pc,  @AT@ 2781 @LENGTH@ 6
---INS SimpleName@@MethodName:getPasswordType @TO@ MethodDeclaration@@private, String, MethodName:getPasswordType, WSPasswordCallback pc,  @AT@ 2788 @LENGTH@ 15
---INS SingleVariableDeclaration@@WSPasswordCallback pc @TO@ MethodDeclaration@@private, String, MethodName:getPasswordType, WSPasswordCallback pc,  @AT@ 2804 @LENGTH@ 21
------INS SimpleType@@WSPasswordCallback @TO@ SingleVariableDeclaration@@WSPasswordCallback pc @AT@ 2804 @LENGTH@ 18
------INS SimpleName@@pc @TO@ SingleVariableDeclaration@@WSPasswordCallback pc @AT@ 2823 @LENGTH@ 2
---INS TryStatement@@try {  Method getType=null;  try {    getType=pc.getClass().getMethod("getPasswordType",new Class[0]);  } catch (  NoSuchMethodException ex) {  }catch (  SecurityException ex) {  }  if (getType == null) {    getType=pc.getClass().getMethod("getType",new Class[0]);  }  return (String)getType.invoke(pc,new Object[0]);} catch (Exception ex) {  return null;} @TO@ MethodDeclaration@@private, String, MethodName:getPasswordType, WSPasswordCallback pc,  @AT@ 2837 @LENGTH@ 570
------INS VariableDeclarationStatement@@Method getType=null; @TO@ TryStatement@@try {  Method getType=null;  try {    getType=pc.getClass().getMethod("getPasswordType",new Class[0]);  } catch (  NoSuchMethodException ex) {  }catch (  SecurityException ex) {  }  if (getType == null) {    getType=pc.getClass().getMethod("getType",new Class[0]);  }  return (String)getType.invoke(pc,new Object[0]);} catch (Exception ex) {  return null;} @AT@ 2855 @LENGTH@ 22
---------INS SimpleType@@Method @TO@ VariableDeclarationStatement@@Method getType=null; @AT@ 2855 @LENGTH@ 6
---------INS VariableDeclarationFragment@@getType=null @TO@ VariableDeclarationStatement@@Method getType=null; @AT@ 2862 @LENGTH@ 14
------------INS SimpleName@@getType @TO@ VariableDeclarationFragment@@getType=null @AT@ 2862 @LENGTH@ 7
------------INS NullLiteral@@null @TO@ VariableDeclarationFragment@@getType=null @AT@ 2872 @LENGTH@ 4
------INS TryStatement@@try {  getType=pc.getClass().getMethod("getPasswordType",new Class[0]);} catch (NoSuchMethodException ex) {}catch (SecurityException ex) {} @TO@ TryStatement@@try {  Method getType=null;  try {    getType=pc.getClass().getMethod("getPasswordType",new Class[0]);  } catch (  NoSuchMethodException ex) {  }catch (  SecurityException ex) {  }  if (getType == null) {    getType=pc.getClass().getMethod("getType",new Class[0]);  }  return (String)getType.invoke(pc,new Object[0]);} catch (Exception ex) {  return null;} @AT@ 2890 @LENGTH@ 262
---------INS ExpressionStatement@@Assignment:getType=pc.getClass().getMethod("getPasswordType",new Class[0]) @TO@ TryStatement@@try {  getType=pc.getClass().getMethod("getPasswordType",new Class[0]);} catch (NoSuchMethodException ex) {}catch (SecurityException ex) {} @AT@ 2912 @LENGTH@ 67
------------INS Assignment@@getType=pc.getClass().getMethod("getPasswordType",new Class[0]) @TO@ ExpressionStatement@@Assignment:getType=pc.getClass().getMethod("getPasswordType",new Class[0]) @AT@ 2912 @LENGTH@ 66
---------------INS SimpleName@@getType @TO@ Assignment@@getType=pc.getClass().getMethod("getPasswordType",new Class[0]) @AT@ 2912 @LENGTH@ 7
---------------INS Operator@@= @TO@ Assignment@@getType=pc.getClass().getMethod("getPasswordType",new Class[0]) @AT@ 2919 @LENGTH@ 1
---------------INS MethodInvocation@@pc.getClass().getMethod("getPasswordType",new Class[0]) @TO@ Assignment@@getType=pc.getClass().getMethod("getPasswordType",new Class[0]) @AT@ 2922 @LENGTH@ 56
------------------INS MethodInvocation@@MethodName:getClass:[] @TO@ MethodInvocation@@pc.getClass().getMethod("getPasswordType",new Class[0]) @AT@ 2922 @LENGTH@ 13
------------------INS SimpleName@@Name:pc @TO@ MethodInvocation@@pc.getClass().getMethod("getPasswordType",new Class[0]) @AT@ 2922 @LENGTH@ 2
------------------INS SimpleName@@MethodName:getMethod:["getPasswordType", new Class[0]] @TO@ MethodInvocation@@pc.getClass().getMethod("getPasswordType",new Class[0]) @AT@ 2936 @LENGTH@ 42
---------------------INS StringLiteral@@"getPasswordType" @TO@ SimpleName@@MethodName:getMethod:["getPasswordType", new Class[0]] @AT@ 2946 @LENGTH@ 17
---------------------INS ArrayCreation@@new Class[0] @TO@ SimpleName@@MethodName:getMethod:["getPasswordType", new Class[0]] @AT@ 2965 @LENGTH@ 12
------------------------INS ArrayType@@Class[] @TO@ ArrayCreation@@new Class[0] @AT@ 2969 @LENGTH@ 8
---------------------------INS SimpleType@@Class @TO@ ArrayType@@Class[] @AT@ 2969 @LENGTH@ 5
------------------------INS NumberLiteral@@0 @TO@ ArrayCreation@@new Class[0] @AT@ 2975 @LENGTH@ 1
---------INS CatchClause@@catch (NoSuchMethodException ex) {} @TO@ TryStatement@@try {  getType=pc.getClass().getMethod("getPasswordType",new Class[0]);} catch (NoSuchMethodException ex) {}catch (SecurityException ex) {} @AT@ 2994 @LENGTH@ 81
------------INS SingleVariableDeclaration@@NoSuchMethodException ex @TO@ CatchClause@@catch (NoSuchMethodException ex) {} @AT@ 3001 @LENGTH@ 24
---------------INS SimpleType@@NoSuchMethodException @TO@ SingleVariableDeclaration@@NoSuchMethodException ex @AT@ 3001 @LENGTH@ 21
---------------INS SimpleName@@ex @TO@ SingleVariableDeclaration@@NoSuchMethodException ex @AT@ 3023 @LENGTH@ 2
---------INS CatchClause@@catch (SecurityException ex) {} @TO@ TryStatement@@try {  getType=pc.getClass().getMethod("getPasswordType",new Class[0]);} catch (NoSuchMethodException ex) {}catch (SecurityException ex) {} @AT@ 3076 @LENGTH@ 76
------------INS SingleVariableDeclaration@@SecurityException ex @TO@ CatchClause@@catch (SecurityException ex) {} @AT@ 3083 @LENGTH@ 20
---------------INS SimpleType@@SecurityException @TO@ SingleVariableDeclaration@@SecurityException ex @AT@ 3083 @LENGTH@ 17
---------------INS SimpleName@@ex @TO@ SingleVariableDeclaration@@SecurityException ex @AT@ 3101 @LENGTH@ 2
------INS IfStatement@@if (getType == null) {  getType=pc.getClass().getMethod("getType",new Class[0]);} @TO@ TryStatement@@try {  Method getType=null;  try {    getType=pc.getClass().getMethod("getPasswordType",new Class[0]);  } catch (  NoSuchMethodException ex) {  }catch (  SecurityException ex) {  }  if (getType == null) {    getType=pc.getClass().getMethod("getType",new Class[0]);  }  return (String)getType.invoke(pc,new Object[0]);} catch (Exception ex) {  return null;} @AT@ 3165 @LENGTH@ 112
---------INS InfixExpression@@getType == null @TO@ IfStatement@@if (getType == null) {  getType=pc.getClass().getMethod("getType",new Class[0]);} @AT@ 3169 @LENGTH@ 15
------------INS SimpleName@@getType @TO@ InfixExpression@@getType == null @AT@ 3169 @LENGTH@ 7
------------INS Operator@@== @TO@ InfixExpression@@getType == null @AT@ 3176 @LENGTH@ 2
------------INS NullLiteral@@null @TO@ InfixExpression@@getType == null @AT@ 3180 @LENGTH@ 4
---------INS Block@@ThenBody:{  getType=pc.getClass().getMethod("getType",new Class[0]);} @TO@ IfStatement@@if (getType == null) {  getType=pc.getClass().getMethod("getType",new Class[0]);} @AT@ 3186 @LENGTH@ 91
------------INS ExpressionStatement@@Assignment:getType=pc.getClass().getMethod("getType",new Class[0]) @TO@ Block@@ThenBody:{  getType=pc.getClass().getMethod("getType",new Class[0]);} @AT@ 3204 @LENGTH@ 59
---------------INS Assignment@@getType=pc.getClass().getMethod("getType",new Class[0]) @TO@ ExpressionStatement@@Assignment:getType=pc.getClass().getMethod("getType",new Class[0]) @AT@ 3204 @LENGTH@ 58
------------------INS SimpleName@@getType @TO@ Assignment@@getType=pc.getClass().getMethod("getType",new Class[0]) @AT@ 3204 @LENGTH@ 7
------------------INS Operator@@= @TO@ Assignment@@getType=pc.getClass().getMethod("getType",new Class[0]) @AT@ 3211 @LENGTH@ 1
------------------INS MethodInvocation@@pc.getClass().getMethod("getType",new Class[0]) @TO@ Assignment@@getType=pc.getClass().getMethod("getType",new Class[0]) @AT@ 3214 @LENGTH@ 48
---------------------INS MethodInvocation@@MethodName:getClass:[] @TO@ MethodInvocation@@pc.getClass().getMethod("getType",new Class[0]) @AT@ 3214 @LENGTH@ 13
---------------------INS SimpleName@@Name:pc @TO@ MethodInvocation@@pc.getClass().getMethod("getType",new Class[0]) @AT@ 3214 @LENGTH@ 2
---------------------INS SimpleName@@MethodName:getMethod:["getType", new Class[0]] @TO@ MethodInvocation@@pc.getClass().getMethod("getType",new Class[0]) @AT@ 3228 @LENGTH@ 34
------------------------INS StringLiteral@@"getType" @TO@ SimpleName@@MethodName:getMethod:["getType", new Class[0]] @AT@ 3238 @LENGTH@ 9
------------------------INS ArrayCreation@@new Class[0] @TO@ SimpleName@@MethodName:getMethod:["getType", new Class[0]] @AT@ 3249 @LENGTH@ 12
---------------------------INS ArrayType@@Class[] @TO@ ArrayCreation@@new Class[0] @AT@ 3253 @LENGTH@ 8
------------------------------INS SimpleType@@Class @TO@ ArrayType@@Class[] @AT@ 3253 @LENGTH@ 5
---------------------------INS NumberLiteral@@0 @TO@ ArrayCreation@@new Class[0] @AT@ 3259 @LENGTH@ 1
------INS ReturnStatement@@CastExpression:(String)getType.invoke(pc,new Object[0]) @TO@ TryStatement@@try {  Method getType=null;  try {    getType=pc.getClass().getMethod("getPasswordType",new Class[0]);  } catch (  NoSuchMethodException ex) {  }catch (  SecurityException ex) {  }  if (getType == null) {    getType=pc.getClass().getMethod("getType",new Class[0]);  }  return (String)getType.invoke(pc,new Object[0]);} catch (Exception ex) {  return null;} @AT@ 3290 @LENGTH@ 49
---------INS CastExpression@@(String)getType.invoke(pc,new Object[0]) @TO@ ReturnStatement@@CastExpression:(String)getType.invoke(pc,new Object[0]) @AT@ 3297 @LENGTH@ 41
------------INS SimpleType@@String @TO@ CastExpression@@(String)getType.invoke(pc,new Object[0]) @AT@ 3298 @LENGTH@ 6
------------INS MethodInvocation@@getType.invoke(pc,new Object[0]) @TO@ CastExpression@@(String)getType.invoke(pc,new Object[0]) @AT@ 3305 @LENGTH@ 33
---------------INS SimpleName@@Name:getType @TO@ MethodInvocation@@getType.invoke(pc,new Object[0]) @AT@ 3305 @LENGTH@ 7
---------------INS SimpleName@@MethodName:invoke:[pc, new Object[0]] @TO@ MethodInvocation@@getType.invoke(pc,new Object[0]) @AT@ 3313 @LENGTH@ 25
------------------INS SimpleName@@pc @TO@ SimpleName@@MethodName:invoke:[pc, new Object[0]] @AT@ 3320 @LENGTH@ 2
------------------INS ArrayCreation@@new Object[0] @TO@ SimpleName@@MethodName:invoke:[pc, new Object[0]] @AT@ 3324 @LENGTH@ 13
---------------------INS ArrayType@@Object[] @TO@ ArrayCreation@@new Object[0] @AT@ 3328 @LENGTH@ 9
------------------------INS SimpleType@@Object @TO@ ArrayType@@Object[] @AT@ 3328 @LENGTH@ 6
---------------------INS NumberLiteral@@0 @TO@ ArrayCreation@@new Object[0] @AT@ 3335 @LENGTH@ 1
------INS CatchClause@@catch (Exception ex) {  return null;} @TO@ TryStatement@@try {  Method getType=null;  try {    getType=pc.getClass().getMethod("getPasswordType",new Class[0]);  } catch (  NoSuchMethodException ex) {  }catch (  SecurityException ex) {  }  if (getType == null) {    getType=pc.getClass().getMethod("getType",new Class[0]);  }  return (String)getType.invoke(pc,new Object[0]);} catch (Exception ex) {  return null;} @AT@ 3350 @LENGTH@ 57
---------INS SingleVariableDeclaration@@Exception ex @TO@ CatchClause@@catch (Exception ex) {  return null;} @AT@ 3357 @LENGTH@ 12
------------INS SimpleType@@Exception @TO@ SingleVariableDeclaration@@Exception ex @AT@ 3357 @LENGTH@ 9
------------INS SimpleName@@ex @TO@ SingleVariableDeclaration@@Exception ex @AT@ 3367 @LENGTH@ 2
---------INS ReturnStatement@@NullLiteral:null @TO@ CatchClause@@catch (Exception ex) {  return null;} @AT@ 3385 @LENGTH@ 12
------------INS NullLiteral@@null @TO@ ReturnStatement@@NullLiteral:null @AT@ 3392 @LENGTH@ 4


INS FieldDeclaration@@private, static, final, long, [serialVersionUID=1L] @TO@ TypeDeclaration@@[public]MappingException, RuntimeException @AT@ 793 @LENGTH@ 48
---INS Modifier@@private @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=1L] @AT@ 793 @LENGTH@ 7
---INS Modifier@@static @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=1L] @AT@ 801 @LENGTH@ 6
---INS Modifier@@final @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=1L] @AT@ 808 @LENGTH@ 5
---INS PrimitiveType@@long @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=1L] @AT@ 814 @LENGTH@ 4
---INS VariableDeclarationFragment@@serialVersionUID=1L @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=1L] @AT@ 819 @LENGTH@ 21
------INS SimpleName@@serialVersionUID @TO@ VariableDeclarationFragment@@serialVersionUID=1L @AT@ 819 @LENGTH@ 16
------INS NumberLiteral@@1L @TO@ VariableDeclarationFragment@@serialVersionUID=1L @AT@ 838 @LENGTH@ 2


UPD TryStatement@@try {  long interval=100;  listener.clear();  FileAlterationMonitor monitor=new FileAlterationMonitor(interval,observer);  monitor.setThreadFactory(Executors.defaultThreadFactory());  assertEquals("Interval",interval,monitor.getInterval());  assertNotNull("Thread Factory",monitor.getThreadFactory());  monitor.start();  checkCollectionsEmpty("A");  File file2=touch(new File(testDir,"file2.java"));  checkFile("Create",file2,listener.getCreatedFiles());  listener.clear();  checkCollectionsEmpty("B");  file2.delete();  checkFile("Delete",file2,listener.getDeletedFiles());  listener.clear();  monitor.stop();} catch (Exception e) {  e.printStackTrace();  fail("Threw " + e);} @TO@ try {  long interval=100;  listener.clear();  FileAlterationMonitor monitor=new FileAlterationMonitor(interval,observer);  monitor.setThreadFactory(Executors.defaultThreadFactory());  assertEquals("Interval",interval,monitor.getInterval());  monitor.start();  checkCollectionsEmpty("A");  File file2=touch(new File(testDir,"file2.java"));  checkFile("Create",file2,listener.getCreatedFiles());  listener.clear();  checkCollectionsEmpty("B");  file2.delete();  checkFile("Delete",file2,listener.getDeletedFiles());  listener.clear();  monitor.stop();} catch (Exception e) {  e.printStackTrace();  fail("Threw " + e);} @AT@ 4787 @LENGTH@ 1001
---DEL ExpressionStatement@@MethodInvocation:assertNotNull("Thread Factory",monitor.getThreadFactory()) @AT@ 5102 @LENGTH@ 60
------DEL MethodInvocation@@assertNotNull("Thread Factory",monitor.getThreadFactory()) @AT@ 5102 @LENGTH@ 59
---------DEL SimpleName@@MethodName:assertNotNull:["Thread Factory", monitor.getThreadFactory()] @AT@ 5102 @LENGTH@ 59
------------DEL StringLiteral@@"Thread Factory" @AT@ 5116 @LENGTH@ 16
------------DEL MethodInvocation@@monitor.getThreadFactory() @AT@ 5134 @LENGTH@ 26
---------------DEL SimpleName@@Name:monitor @AT@ 5134 @LENGTH@ 7
---------------DEL SimpleName@@MethodName:getThreadFactory:[] @AT@ 5142 @LENGTH@ 18


UPD MethodDeclaration@@PreferredConstructor<?>, T, MethodName:getPreferredConstructor, Class<T> clazz, MappingConfigurationException,  @TO@ PreferredConstructor<T>, T, MethodName:getPreferredConstructor, Class<T> clazz, MappingConfigurationException,  @AT@ 1298 @LENGTH@ 77
---UPD ParameterizedType@@PreferredConstructor<?> @TO@ PreferredConstructor<T> @AT@ 1274 @LENGTH@ 23
------DEL WildcardType@@? @AT@ 1295 @LENGTH@ 1
------INS SimpleType@@T @TO@ ParameterizedType@@PreferredConstructor<?> @AT@ 1314 @LENGTH@ 1


MOV ExpressionStatement@@MethodInvocation:deploymentUnit.addToAttachmentList(Attachments.SETUP_ACTIONS,new WeldContextSetup()) @TO@ MethodDeclaration@@public, void, MethodName:deploy, DeploymentPhaseContext phaseContext, DeploymentUnitProcessingException,  @AT@ 6318 @LENGTH@ 86


UPD IfStatement@@if (context instanceof BootOperationContext) {  final BootOperationContext updateContext=(BootOperationContext)context;  logger.info("Activating EE subsystem");  updateContext.addDeploymentProcessor(Phase.STRUCTURE,Phase.STRUCTURE_EAR_DEPLOYMENT_INIT,new EarInitializationProcessor());  updateContext.addDeploymentProcessor(Phase.STRUCTURE,Phase.STRUCTURE_EAR_APP_XML_PARSE,new EarMetaDataParsingProcessor());  updateContext.addDeploymentProcessor(Phase.STRUCTURE,Phase.STRUCTURE_EAR_JBOSS_APP_XML_PARSE,new JBossAppMetaDataParsingProcessor());  updateContext.addDeploymentProcessor(Phase.STRUCTURE,Phase.STRUCTURE_EAR,new EarStructureProcessor());  updateContext.addDeploymentProcessor(Phase.PARSE,Phase.PARSE_EAR_LIB_CLASS_PATH,new EarLibManifestClassPathProcessor());  updateContext.addDeploymentProcessor(Phase.PARSE,Phase.PARSE_BEAN_LIEFCYCLE_ANNOTATION,new LifecycleAnnotationParsingProcessor());  updateContext.addDeploymentProcessor(Phase.PARSE,Phase.PARSE_BEAN_INTERCEPTOR_ANNOTATION,new InterceptorAnnotationParsingProcessor());  updateContext.addDeploymentProcessor(Phase.PARSE,Phase.PARSE_BEAN_RESOURCE_INJECTION_ANNOTATION,new ResourceInjectionAnnotationParsingProcessor());  updateContext.addDeploymentProcessor(Phase.INSTALL,Phase.INSTALL_MODULE_CONTEXT,new ModuleContextProcessor());  updateContext.addDeploymentProcessor(Phase.INSTALL,Phase.INSTALL_APP_CONTEXT,new ApplicationContextProcessor());  updateContext.addDeploymentProcessor(Phase.INSTALL,Phase.INSTALL_EE_COMPONENT_CLASSLOAD,new ComponentClassLoadingProcessor());  updateContext.addDeploymentProcessor(Phase.INSTALL,Phase.INSTALL_EE_COMPONENT_LIFECYCLES,new LifecycleInstallProcessor());  updateContext.addDeploymentProcessor(Phase.INSTALL,Phase.INSTALL_EE_COMPONENT_INTERCEPTORS,new InterceptorInstallProcessor());  updateContext.addDeploymentProcessor(Phase.INSTALL,Phase.INSTALL_EE_COMPONENT_INJECTIONS,new ResourceInjectionInstallProcessor());  updateContext.addDeploymentProcessor(Phase.INSTALL,Phase.INSTALL_EE_COMPONENT,new ComponentInstallProcessor());} @TO@ if (context instanceof BootOperationContext) {  final BootOperationContext updateContext=(BootOperationContext)context;  logger.info("Activating EE subsystem");  updateContext.addDeploymentProcessor(Phase.STRUCTURE,Phase.STRUCTURE_EAR_DEPLOYMENT_INIT,new EarInitializationProcessor());  updateContext.addDeploymentProcessor(Phase.STRUCTURE,Phase.STRUCTURE_EAR_APP_XML_PARSE,new EarMetaDataParsingProcessor());  updateContext.addDeploymentProcessor(Phase.STRUCTURE,Phase.STRUCTURE_EAR_JBOSS_APP_XML_PARSE,new JBossAppMetaDataParsingProcessor());  updateContext.addDeploymentProcessor(Phase.STRUCTURE,Phase.STRUCTURE_EAR,new EarStructureProcessor());  updateContext.addDeploymentProcessor(Phase.STRUCTURE,Phase.STRUCTURE_EJB_JAR_IN_EAR,new EjbJarDeploymentProcessor());  updateContext.addDeploymentProcessor(Phase.PARSE,Phase.PARSE_EAR_LIB_CLASS_PATH,new EarLibManifestClassPathProcessor());  updateContext.addDeploymentProcessor(Phase.PARSE,Phase.PARSE_BEAN_LIEFCYCLE_ANNOTATION,new LifecycleAnnotationParsingProcessor());  updateContext.addDeploymentProcessor(Phase.PARSE,Phase.PARSE_BEAN_INTERCEPTOR_ANNOTATION,new InterceptorAnnotationParsingProcessor());  updateContext.addDeploymentProcessor(Phase.PARSE,Phase.PARSE_BEAN_RESOURCE_INJECTION_ANNOTATION,new ResourceInjectionAnnotationParsingProcessor());  updateContext.addDeploymentProcessor(Phase.INSTALL,Phase.INSTALL_MODULE_CONTEXT,new ModuleContextProcessor());  updateContext.addDeploymentProcessor(Phase.INSTALL,Phase.INSTALL_APP_CONTEXT,new ApplicationContextProcessor());  updateContext.addDeploymentProcessor(Phase.INSTALL,Phase.INSTALL_EE_COMPONENT_CLASSLOAD,new ComponentClassLoadingProcessor());  updateContext.addDeploymentProcessor(Phase.INSTALL,Phase.INSTALL_EE_COMPONENT_LIFECYCLES,new LifecycleInstallProcessor());  updateContext.addDeploymentProcessor(Phase.INSTALL,Phase.INSTALL_EE_COMPONENT_INTERCEPTORS,new InterceptorInstallProcessor());  updateContext.addDeploymentProcessor(Phase.INSTALL,Phase.INSTALL_EE_COMPONENT_INJECTIONS,new ResourceInjectionInstallProcessor());  updateContext.addDeploymentProcessor(Phase.INSTALL,Phase.INSTALL_EE_COMPONENT,new ComponentInstallProcessor());} @AT@ 3365 @LENGTH@ 2270
---UPD Block@@ThenBody:{  final BootOperationContext updateContext=(BootOperationContext)context;  logger.info("Activating EE subsystem");  updateContext.addDeploymentProcessor(Phase.STRUCTURE,Phase.STRUCTURE_EAR_DEPLOYMENT_INIT,new EarInitializationProcessor());  updateContext.addDeploymentProcessor(Phase.STRUCTURE,Phase.STRUCTURE_EAR_APP_XML_PARSE,new EarMetaDataParsingProcessor());  updateContext.addDeploymentProcessor(Phase.STRUCTURE,Phase.STRUCTURE_EAR_JBOSS_APP_XML_PARSE,new JBossAppMetaDataParsingProcessor());  updateContext.addDeploymentProcessor(Phase.STRUCTURE,Phase.STRUCTURE_EAR,new EarStructureProcessor());  updateContext.addDeploymentProcessor(Phase.PARSE,Phase.PARSE_EAR_LIB_CLASS_PATH,new EarLibManifestClassPathProcessor());  updateContext.addDeploymentProcessor(Phase.PARSE,Phase.PARSE_BEAN_LIEFCYCLE_ANNOTATION,new LifecycleAnnotationParsingProcessor());  updateContext.addDeploymentProcessor(Phase.PARSE,Phase.PARSE_BEAN_INTERCEPTOR_ANNOTATION,new InterceptorAnnotationParsingProcessor());  updateContext.addDeploymentProcessor(Phase.PARSE,Phase.PARSE_BEAN_RESOURCE_INJECTION_ANNOTATION,new ResourceInjectionAnnotationParsingProcessor());  updateContext.addDeploymentProcessor(Phase.INSTALL,Phase.INSTALL_MODULE_CONTEXT,new ModuleContextProcessor());  updateContext.addDeploymentProcessor(Phase.INSTALL,Phase.INSTALL_APP_CONTEXT,new ApplicationContextProcessor());  updateContext.addDeploymentProcessor(Phase.INSTALL,Phase.INSTALL_EE_COMPONENT_CLASSLOAD,new ComponentClassLoadingProcessor());  updateContext.addDeploymentProcessor(Phase.INSTALL,Phase.INSTALL_EE_COMPONENT_LIFECYCLES,new LifecycleInstallProcessor());  updateContext.addDeploymentProcessor(Phase.INSTALL,Phase.INSTALL_EE_COMPONENT_INTERCEPTORS,new InterceptorInstallProcessor());  updateContext.addDeploymentProcessor(Phase.INSTALL,Phase.INSTALL_EE_COMPONENT_INJECTIONS,new ResourceInjectionInstallProcessor());  updateContext.addDeploymentProcessor(Phase.INSTALL,Phase.INSTALL_EE_COMPONENT,new ComponentInstallProcessor());} @TO@ ThenBody:{  final BootOperationContext updateContext=(BootOperationContext)context;  logger.info("Activating EE subsystem");  updateContext.addDeploymentProcessor(Phase.STRUCTURE,Phase.STRUCTURE_EAR_DEPLOYMENT_INIT,new EarInitializationProcessor());  updateContext.addDeploymentProcessor(Phase.STRUCTURE,Phase.STRUCTURE_EAR_APP_XML_PARSE,new EarMetaDataParsingProcessor());  updateContext.addDeploymentProcessor(Phase.STRUCTURE,Phase.STRUCTURE_EAR_JBOSS_APP_XML_PARSE,new JBossAppMetaDataParsingProcessor());  updateContext.addDeploymentProcessor(Phase.STRUCTURE,Phase.STRUCTURE_EAR,new EarStructureProcessor());  updateContext.addDeploymentProcessor(Phase.STRUCTURE,Phase.STRUCTURE_EJB_JAR_IN_EAR,new EjbJarDeploymentProcessor());  updateContext.addDeploymentProcessor(Phase.PARSE,Phase.PARSE_EAR_LIB_CLASS_PATH,new EarLibManifestClassPathProcessor());  updateContext.addDeploymentProcessor(Phase.PARSE,Phase.PARSE_BEAN_LIEFCYCLE_ANNOTATION,new LifecycleAnnotationParsingProcessor());  updateContext.addDeploymentProcessor(Phase.PARSE,Phase.PARSE_BEAN_INTERCEPTOR_ANNOTATION,new InterceptorAnnotationParsingProcessor());  updateContext.addDeploymentProcessor(Phase.PARSE,Phase.PARSE_BEAN_RESOURCE_INJECTION_ANNOTATION,new ResourceInjectionAnnotationParsingProcessor());  updateContext.addDeploymentProcessor(Phase.INSTALL,Phase.INSTALL_MODULE_CONTEXT,new ModuleContextProcessor());  updateContext.addDeploymentProcessor(Phase.INSTALL,Phase.INSTALL_APP_CONTEXT,new ApplicationContextProcessor());  updateContext.addDeploymentProcessor(Phase.INSTALL,Phase.INSTALL_EE_COMPONENT_CLASSLOAD,new ComponentClassLoadingProcessor());  updateContext.addDeploymentProcessor(Phase.INSTALL,Phase.INSTALL_EE_COMPONENT_LIFECYCLES,new LifecycleInstallProcessor());  updateContext.addDeploymentProcessor(Phase.INSTALL,Phase.INSTALL_EE_COMPONENT_INTERCEPTORS,new InterceptorInstallProcessor());  updateContext.addDeploymentProcessor(Phase.INSTALL,Phase.INSTALL_EE_COMPONENT_INJECTIONS,new ResourceInjectionInstallProcessor());  updateContext.addDeploymentProcessor(Phase.INSTALL,Phase.INSTALL_EE_COMPONENT,new ComponentInstallProcessor());} @AT@ 3409 @LENGTH@ 2226
------INS ExpressionStatement@@MethodInvocation:updateContext.addDeploymentProcessor(Phase.STRUCTURE,Phase.STRUCTURE_EJB_JAR_IN_EAR,new EjbJarDeploymentProcessor()) @TO@ Block@@ThenBody:{  final BootOperationContext updateContext=(BootOperationContext)context;  logger.info("Activating EE subsystem");  updateContext.addDeploymentProcessor(Phase.STRUCTURE,Phase.STRUCTURE_EAR_DEPLOYMENT_INIT,new EarInitializationProcessor());  updateContext.addDeploymentProcessor(Phase.STRUCTURE,Phase.STRUCTURE_EAR_APP_XML_PARSE,new EarMetaDataParsingProcessor());  updateContext.addDeploymentProcessor(Phase.STRUCTURE,Phase.STRUCTURE_EAR_JBOSS_APP_XML_PARSE,new JBossAppMetaDataParsingProcessor());  updateContext.addDeploymentProcessor(Phase.STRUCTURE,Phase.STRUCTURE_EAR,new EarStructureProcessor());  updateContext.addDeploymentProcessor(Phase.PARSE,Phase.PARSE_EAR_LIB_CLASS_PATH,new EarLibManifestClassPathProcessor());  updateContext.addDeploymentProcessor(Phase.PARSE,Phase.PARSE_BEAN_LIEFCYCLE_ANNOTATION,new LifecycleAnnotationParsingProcessor());  updateContext.addDeploymentProcessor(Phase.PARSE,Phase.PARSE_BEAN_INTERCEPTOR_ANNOTATION,new InterceptorAnnotationParsingProcessor());  updateContext.addDeploymentProcessor(Phase.PARSE,Phase.PARSE_BEAN_RESOURCE_INJECTION_ANNOTATION,new ResourceInjectionAnnotationParsingProcessor());  updateContext.addDeploymentProcessor(Phase.INSTALL,Phase.INSTALL_MODULE_CONTEXT,new ModuleContextProcessor());  updateContext.addDeploymentProcessor(Phase.INSTALL,Phase.INSTALL_APP_CONTEXT,new ApplicationContextProcessor());  updateContext.addDeploymentProcessor(Phase.INSTALL,Phase.INSTALL_EE_COMPONENT_CLASSLOAD,new ComponentClassLoadingProcessor());  updateContext.addDeploymentProcessor(Phase.INSTALL,Phase.INSTALL_EE_COMPONENT_LIFECYCLES,new LifecycleInstallProcessor());  updateContext.addDeploymentProcessor(Phase.INSTALL,Phase.INSTALL_EE_COMPONENT_INTERCEPTORS,new InterceptorInstallProcessor());  updateContext.addDeploymentProcessor(Phase.INSTALL,Phase.INSTALL_EE_COMPONENT_INJECTIONS,new ResourceInjectionInstallProcessor());  updateContext.addDeploymentProcessor(Phase.INSTALL,Phase.INSTALL_EE_COMPONENT,new ComponentInstallProcessor());} @AT@ 4102 @LENGTH@ 119
---------INS MethodInvocation@@updateContext.addDeploymentProcessor(Phase.STRUCTURE,Phase.STRUCTURE_EJB_JAR_IN_EAR,new EjbJarDeploymentProcessor()) @TO@ ExpressionStatement@@MethodInvocation:updateContext.addDeploymentProcessor(Phase.STRUCTURE,Phase.STRUCTURE_EJB_JAR_IN_EAR,new EjbJarDeploymentProcessor()) @AT@ 4102 @LENGTH@ 118
------------INS SimpleName@@Name:updateContext @TO@ MethodInvocation@@updateContext.addDeploymentProcessor(Phase.STRUCTURE,Phase.STRUCTURE_EJB_JAR_IN_EAR,new EjbJarDeploymentProcessor()) @AT@ 4102 @LENGTH@ 13
------------INS SimpleName@@MethodName:addDeploymentProcessor:[Phase.STRUCTURE, Phase.STRUCTURE_EJB_JAR_IN_EAR, new EjbJarDeploymentProcessor()] @TO@ MethodInvocation@@updateContext.addDeploymentProcessor(Phase.STRUCTURE,Phase.STRUCTURE_EJB_JAR_IN_EAR,new EjbJarDeploymentProcessor()) @AT@ 4116 @LENGTH@ 104
---------------INS QualifiedName@@Phase.STRUCTURE @TO@ SimpleName@@MethodName:addDeploymentProcessor:[Phase.STRUCTURE, Phase.STRUCTURE_EJB_JAR_IN_EAR, new EjbJarDeploymentProcessor()] @AT@ 4139 @LENGTH@ 15
------------------INS SimpleName@@Phase @TO@ QualifiedName@@Phase.STRUCTURE @AT@ 4139 @LENGTH@ 5
------------------INS SimpleName@@STRUCTURE @TO@ QualifiedName@@Phase.STRUCTURE @AT@ 4145 @LENGTH@ 9
---------------INS QualifiedName@@Phase.STRUCTURE_EJB_JAR_IN_EAR @TO@ SimpleName@@MethodName:addDeploymentProcessor:[Phase.STRUCTURE, Phase.STRUCTURE_EJB_JAR_IN_EAR, new EjbJarDeploymentProcessor()] @AT@ 4156 @LENGTH@ 30
------------------INS SimpleName@@Phase @TO@ QualifiedName@@Phase.STRUCTURE_EJB_JAR_IN_EAR @AT@ 4156 @LENGTH@ 5
------------------INS SimpleName@@STRUCTURE_EJB_JAR_IN_EAR @TO@ QualifiedName@@Phase.STRUCTURE_EJB_JAR_IN_EAR @AT@ 4162 @LENGTH@ 24
---------------INS ClassInstanceCreation@@EjbJarDeploymentProcessor[] @TO@ SimpleName@@MethodName:addDeploymentProcessor:[Phase.STRUCTURE, Phase.STRUCTURE_EJB_JAR_IN_EAR, new EjbJarDeploymentProcessor()] @AT@ 4188 @LENGTH@ 31
------------------INS New@@new @TO@ ClassInstanceCreation@@EjbJarDeploymentProcessor[] @AT@ 4188 @LENGTH@ 3
------------------INS SimpleType@@EjbJarDeploymentProcessor @TO@ ClassInstanceCreation@@EjbJarDeploymentProcessor[] @AT@ 4192 @LENGTH@ 25


UPD Block@@WhileBody:{  String name=null;  String profile=null;  final int count=reader.getAttributeCount();  for (int i=0; i < count; i++) {    final String value=reader.getAttributeValue(i);    if (reader.getAttributeNamespace(i) != null) {      throw ParseUtils.unexpectedAttribute(reader,i);    } else {      final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));switch (attribute) {case NAME:{          if (name != null) {            throw ParseUtils.duplicateAttribute(reader,attribute.getLocalName());          }          if (!names.add(value)) {            throw ParseUtils.duplicateNamedElement(reader,value);          }          name=value;          break;        }case PROFILE:{        if (profile != null) {          throw ParseUtils.duplicateAttribute(reader,attribute.getLocalName());        }        profile=value;        break;      }default :    throw ParseUtils.unexpectedAttribute(reader,i);}}}if (name == null) {throw ParseUtils.missingRequired(reader,Collections.singleton(Attribute.NAME));}if (profile == null) {throw ParseUtils.missingRequired(reader,Collections.singleton(Attribute.PROFILE));}final ModelNode group=new ModelNode();group.get(OP).set("add-server-group");group.get(OP_ADDR).set(address.clone().add("server-group"));group.get(REQUEST_PROPERTIES,PROFILE).set(profile);list.add(group);boolean sawDeployments=false;while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {switch (Namespace.forUri(reader.getNamespaceURI())) {case DOMAIN_1_0:{  final Element element=Element.forName(reader.getLocalName());switch (element) {case JVM:{      parseJvm(reader,address,list,new HashSet<String>());      break;    }case SOCKET_BINDING_GROUP:{    parseSocketBindingGroupRef(reader,address,list);    break;  }case DEPLOYMENTS:{  if (sawDeployments) {    throw new XMLStreamException(element.getLocalName() + " already defined",reader.getLocation());  }  sawDeployments=true;  parseDeployments(reader,address,list);  break;}case SYSTEM_PROPERTIES:{parseSystemProperties(reader,address,list);break;}default :throw ParseUtils.unexpectedElement(reader);}break;}default :throw ParseUtils.unexpectedElement(reader);}}} @TO@ WhileBody:{  String name=null;  String profile=null;  final int count=reader.getAttributeCount();  for (int i=0; i < count; i++) {    final String value=reader.getAttributeValue(i);    if (reader.getAttributeNamespace(i) != null) {      throw ParseUtils.unexpectedAttribute(reader,i);    } else {      final Attribute attribute=Attribute.forName(reader.getAttributeLocalName(i));switch (attribute) {case NAME:{          if (name != null) {            throw ParseUtils.duplicateAttribute(reader,attribute.getLocalName());          }          if (!names.add(value)) {            throw ParseUtils.duplicateNamedElement(reader,value);          }          name=value;          break;        }case PROFILE:{        if (profile != null) {          throw ParseUtils.duplicateAttribute(reader,attribute.getLocalName());        }        profile=value;        break;      }default :    throw ParseUtils.unexpectedAttribute(reader,i);}}}if (name == null) {throw ParseUtils.missingRequired(reader,Collections.singleton(Attribute.NAME));}if (profile == null) {throw ParseUtils.missingRequired(reader,Collections.singleton(Attribute.PROFILE));}final ModelNode group=new ModelNode();group.get(OP).set(ADD);group.get(OP_ADDR).set(address.clone().add("server-group",name));group.get(REQUEST_PROPERTIES,PROFILE).set(profile);list.add(group);boolean sawDeployments=false;while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {switch (Namespace.forUri(reader.getNamespaceURI())) {case DOMAIN_1_0:{  final Element element=Element.forName(reader.getLocalName());switch (element) {case JVM:{      parseJvm(reader,address,list,new HashSet<String>());      break;    }case SOCKET_BINDING_GROUP:{    parseSocketBindingGroupRef(reader,address,list);    break;  }case DEPLOYMENTS:{  if (sawDeployments) {    throw new XMLStreamException(element.getLocalName() + " already defined",reader.getLocation());  }  sawDeployments=true;  parseDeployments(reader,address,list);  break;}case SYSTEM_PROPERTIES:{parseSystemProperties(reader,address,list);break;}default :throw ParseUtils.unexpectedElement(reader);}break;}default :throw ParseUtils.unexpectedElement(reader);}}} @AT@ 8212 @LENGTH@ 3982
---UPD ExpressionStatement@@MethodInvocation:group.get(OP).set("add-server-group") @TO@ MethodInvocation:group.get(OP).set(ADD) @AT@ 10128 @LENGTH@ 38
------UPD MethodInvocation@@group.get(OP).set("add-server-group") @TO@ group.get(OP).set(ADD) @AT@ 10128 @LENGTH@ 37
---------UPD SimpleName@@MethodName:set:["add-server-group"] @TO@ MethodName:set:[ADD] @AT@ 10142 @LENGTH@ 23
------------DEL StringLiteral@@"add-server-group" @AT@ 10146 @LENGTH@ 18
------------INS SimpleName@@ADD @TO@ SimpleName@@MethodName:set:["add-server-group"] @AT@ 10228 @LENGTH@ 3
---UPD ExpressionStatement@@MethodInvocation:group.get(OP_ADDR).set(address.clone().add("server-group")) @TO@ MethodInvocation:group.get(OP_ADDR).set(address.clone().add("server-group",name)) @AT@ 10179 @LENGTH@ 60
------UPD MethodInvocation@@group.get(OP_ADDR).set(address.clone().add("server-group")) @TO@ group.get(OP_ADDR).set(address.clone().add("server-group",name)) @AT@ 10179 @LENGTH@ 59
---------UPD SimpleName@@MethodName:set:[address.clone().add("server-group")] @TO@ MethodName:set:[address.clone().add("server-group",name)] @AT@ 10198 @LENGTH@ 40
------------UPD MethodInvocation@@address.clone().add("server-group") @TO@ address.clone().add("server-group",name) @AT@ 10202 @LENGTH@ 35
---------------UPD SimpleName@@MethodName:add:["server-group"] @TO@ MethodName:add:["server-group", name] @AT@ 10218 @LENGTH@ 19
------------------INS SimpleName@@name @TO@ SimpleName@@MethodName:add:["server-group"] @AT@ 10305 @LENGTH@ 4


UPD MethodDeclaration@@void, MethodName:handle, ParsingContext ctx, OperationFormatException,  @TO@ void, MethodName:handle, ParsingContext ctx, CommandFormatException,  @AT@ 1215 @LENGTH@ 59
---UPD SimpleType@@OperationFormatException @TO@ CommandFormatException @AT@ 1249 @LENGTH@ 24


UPD ExpressionStatement@@MethodInvocation:operation.get(OPERATION_NAME).set(operationName) @TO@ MethodInvocation:operation.get(OP).set(operationName) @AT@ 36836 @LENGTH@ 49
---UPD MethodInvocation@@operation.get(OPERATION_NAME).set(operationName) @TO@ operation.get(OP).set(operationName) @AT@ 36836 @LENGTH@ 48
------UPD MethodInvocation@@MethodName:get:[OPERATION_NAME] @TO@ MethodName:get:[OP] @AT@ 36836 @LENGTH@ 29
---------UPD SimpleName@@OPERATION_NAME @TO@ OP @AT@ 36850 @LENGTH@ 14


INS TryStatement@@try {  args.parse(line);} catch (CommandFormatException e) {  org.junit.Assert.fail(e.getLocalizedMessage());} @TO@ MethodDeclaration@@protected, ParsedArguments, MethodName:parse, String line,  @AT@ 2245 @LENGTH@ 150
---MOV ExpressionStatement@@MethodInvocation:args.parse(line) @TO@ TryStatement@@try {  args.parse(line);} catch (CommandFormatException e) {  org.junit.Assert.fail(e.getLocalizedMessage());} @AT@ 2197 @LENGTH@ 17
---INS CatchClause@@catch (CommandFormatException e) {  org.junit.Assert.fail(e.getLocalizedMessage());} @TO@ TryStatement@@try {  args.parse(line);} catch (CommandFormatException e) {  org.junit.Assert.fail(e.getLocalizedMessage());} @AT@ 2291 @LENGTH@ 104
------INS SingleVariableDeclaration@@CommandFormatException e @TO@ CatchClause@@catch (CommandFormatException e) {  org.junit.Assert.fail(e.getLocalizedMessage());} @AT@ 2298 @LENGTH@ 24
---------INS SimpleType@@CommandFormatException @TO@ SingleVariableDeclaration@@CommandFormatException e @AT@ 2298 @LENGTH@ 22
---------INS SimpleName@@e @TO@ SingleVariableDeclaration@@CommandFormatException e @AT@ 2321 @LENGTH@ 1
------INS ExpressionStatement@@MethodInvocation:org.junit.Assert.fail(e.getLocalizedMessage()) @TO@ CatchClause@@catch (CommandFormatException e) {  org.junit.Assert.fail(e.getLocalizedMessage());} @AT@ 2338 @LENGTH@ 47
---------INS MethodInvocation@@org.junit.Assert.fail(e.getLocalizedMessage()) @TO@ ExpressionStatement@@MethodInvocation:org.junit.Assert.fail(e.getLocalizedMessage()) @AT@ 2338 @LENGTH@ 46
------------INS QualifiedName@@Name:org.junit.Assert @TO@ MethodInvocation@@org.junit.Assert.fail(e.getLocalizedMessage()) @AT@ 2338 @LENGTH@ 16
------------INS SimpleName@@MethodName:fail:[e.getLocalizedMessage()] @TO@ MethodInvocation@@org.junit.Assert.fail(e.getLocalizedMessage()) @AT@ 2355 @LENGTH@ 29
---------------INS MethodInvocation@@e.getLocalizedMessage() @TO@ SimpleName@@MethodName:fail:[e.getLocalizedMessage()] @AT@ 2360 @LENGTH@ 23
------------------INS SimpleName@@Name:e @TO@ MethodInvocation@@e.getLocalizedMessage() @AT@ 2360 @LENGTH@ 1
------------------INS SimpleName@@MethodName:getLocalizedMessage:[] @TO@ MethodInvocation@@e.getLocalizedMessage() @AT@ 2362 @LENGTH@ 21


UPD IfStatement@@if (nodeList.getLength() > 0) {  return tc.convertTo(type,nodeList.item(0));} @TO@ if (nodeList.getLength() > 0) {  return tc.convertTo(type,nodeList.item(0));} else {  return (T)Void.TYPE;} @AT@ 4583 @LENGTH@ 114
---INS Block@@ElseBody:{  return (T)Void.TYPE;} @TO@ IfStatement@@if (nodeList.getLength() > 0) {  return tc.convertTo(type,nodeList.item(0));} @AT@ 4778 @LENGTH@ 116
------INS ReturnStatement@@CastExpression:(T)Void.TYPE @TO@ Block@@ElseBody:{  return (T)Void.TYPE;} @AT@ 4855 @LENGTH@ 21
---------INS CastExpression@@(T)Void.TYPE @TO@ ReturnStatement@@CastExpression:(T)Void.TYPE @AT@ 4862 @LENGTH@ 13
------------INS SimpleType@@T @TO@ CastExpression@@(T)Void.TYPE @AT@ 4863 @LENGTH@ 1
------------INS QualifiedName@@Void.TYPE @TO@ CastExpression@@(T)Void.TYPE @AT@ 4866 @LENGTH@ 9
---------------INS SimpleName@@Void @TO@ QualifiedName@@Void.TYPE @AT@ 4866 @LENGTH@ 4
---------------INS SimpleName@@TYPE @TO@ QualifiedName@@Void.TYPE @AT@ 4871 @LENGTH@ 4


UPD IfStatement@@if (deploymentElement != null) {  controller.setMode(ServiceController.Mode.NEVER);  if (resultHandler != null)   resultHandler.handleSuccess(null,param);} else if (resultHandler != null) {  resultHandler.handleSuccess(null,param);} @TO@ if (deploymentElement != null) {  final ServiceController<?> controller=serviceRegistry.getService(deploymentUnitServiceName);  controller.setMode(ServiceController.Mode.NEVER);  if (resultHandler != null)   resultHandler.handleSuccess(null,param);} else if (resultHandler != null) {  resultHandler.handleSuccess(null,param);} @AT@ 3605 @LENGTH@ 367
---UPD Block@@ThenBody:{  controller.setMode(ServiceController.Mode.NEVER);  if (resultHandler != null)   resultHandler.handleSuccess(null,param);} @TO@ ThenBody:{  final ServiceController<?> controller=serviceRegistry.getService(deploymentUnitServiceName);  controller.setMode(ServiceController.Mode.NEVER);  if (resultHandler != null)   resultHandler.handleSuccess(null,param);} @AT@ 3636 @LENGTH@ 230
------MOV VariableDeclarationStatement@@final ServiceController<?> controller=serviceRegistry.getService(deploymentUnitServiceName); @TO@ Block@@ThenBody:{  controller.setMode(ServiceController.Mode.NEVER);  if (resultHandler != null)   resultHandler.handleSuccess(null,param);} @AT@ 3502 @LENGTH@ 94


UPD ReturnStatement@@ClassInstanceCreation:new RedirectView("/") @TO@ ClassInstanceCreation:new RedirectView("/",true) @AT@ 10566 @LENGTH@ 29
---UPD ClassInstanceCreation@@RedirectView["/"] @TO@ RedirectView["/", true] @AT@ 10573 @LENGTH@ 21
------INS BooleanLiteral@@true @TO@ ClassInstanceCreation@@RedirectView["/"] @AT@ 10651 @LENGTH@ 4


INS IfStatement@@if (potentialSubDeployments == null) {  return;} @TO@ MethodDeclaration@@public, void, MethodName:deploy, DeploymentPhaseContext phaseContext, DeploymentUnitProcessingException,  @AT@ 2897 @LENGTH@ 67
---INS InfixExpression@@potentialSubDeployments == null @TO@ IfStatement@@if (potentialSubDeployments == null) {  return;} @AT@ 2900 @LENGTH@ 31
------INS SimpleName@@potentialSubDeployments @TO@ InfixExpression@@potentialSubDeployments == null @AT@ 2900 @LENGTH@ 23
------INS Operator@@== @TO@ InfixExpression@@potentialSubDeployments == null @AT@ 2923 @LENGTH@ 2
------INS NullLiteral@@null @TO@ InfixExpression@@potentialSubDeployments == null @AT@ 2927 @LENGTH@ 4
---INS Block@@ThenBody:{  return;} @TO@ IfStatement@@if (potentialSubDeployments == null) {  return;} @AT@ 2933 @LENGTH@ 31
------INS ReturnStatement@@ @TO@ Block@@ThenBody:{  return;} @AT@ 2947 @LENGTH@ 7


UPD VariableDeclarationStatement@@PropertyValue value=definition.getPropertyValues().getPropertyValue("daoInterface"); @TO@ PropertyValue value=definition.getPropertyValues().getPropertyValue("repositoryInterface"); @AT@ 2799 @LENGTH@ 102
---UPD VariableDeclarationFragment@@value=definition.getPropertyValues().getPropertyValue("daoInterface") @TO@ value=definition.getPropertyValues().getPropertyValue("repositoryInterface") @AT@ 2813 @LENGTH@ 87
------UPD MethodInvocation@@definition.getPropertyValues().getPropertyValue("daoInterface") @TO@ definition.getPropertyValues().getPropertyValue("repositoryInterface") @AT@ 2837 @LENGTH@ 63
---------UPD SimpleName@@MethodName:getPropertyValue:["daoInterface"] @TO@ MethodName:getPropertyValue:["repositoryInterface"] @AT@ 2868 @LENGTH@ 32
------------UPD StringLiteral@@"daoInterface" @TO@ "repositoryInterface" @AT@ 2885 @LENGTH@ 14


UPD MethodDeclaration@@void, MethodName:setRange, byte[] key, int begin, int end,  @TO@ void, MethodName:setRange, byte[] key, long offset, byte[] value,  @AT@ 1407 @LENGTH@ 41
---UPD SingleVariableDeclaration@@int begin @TO@ long offset @AT@ 1428 @LENGTH@ 9
------UPD PrimitiveType@@int @TO@ long @AT@ 1428 @LENGTH@ 3
------UPD SimpleName@@begin @TO@ offset @AT@ 1432 @LENGTH@ 5
---UPD SingleVariableDeclaration@@int end @TO@ byte[] value @AT@ 1439 @LENGTH@ 7
------DEL PrimitiveType@@int @AT@ 1439 @LENGTH@ 3
------INS ArrayType@@byte[] @TO@ SingleVariableDeclaration@@int end @AT@ 1443 @LENGTH@ 6
---------INS PrimitiveType@@byte @TO@ ArrayType@@byte[] @AT@ 1443 @LENGTH@ 4
------UPD SimpleName@@end @TO@ value @AT@ 1443 @LENGTH@ 3


UPD MethodDeclaration@@public, voidMethodName:TestingChunkOrientedTasklet, ItemReader<T> itemReader, ItemWriter<T> itemWriter, RepeatOperations repeatOperations,  @TO@ public, voidMethodName:TestingChunkOrientedTasklet, ItemReader<T> itemReader, ItemProcessor<T,T> itemProcessor, ItemWriter<T> itemWriter, RepeatOperations repeatOperations,  @AT@ 2169 @LENGTH@ 280
---INS SingleVariableDeclaration@@ItemProcessor<T,T> itemProcessor @TO@ MethodDeclaration@@public, voidMethodName:TestingChunkOrientedTasklet, ItemReader<T> itemReader, ItemWriter<T> itemWriter, RepeatOperations repeatOperations,  @AT@ 2283 @LENGTH@ 33
------INS ParameterizedType@@ItemProcessor<T,T> @TO@ SingleVariableDeclaration@@ItemProcessor<T,T> itemProcessor @AT@ 2283 @LENGTH@ 19
---------INS SimpleType@@ItemProcessor @TO@ ParameterizedType@@ItemProcessor<T,T> @AT@ 2283 @LENGTH@ 13
---------INS SimpleType@@T @TO@ ParameterizedType@@ItemProcessor<T,T> @AT@ 2297 @LENGTH@ 1
---------INS SimpleType@@T @TO@ ParameterizedType@@ItemProcessor<T,T> @AT@ 2300 @LENGTH@ 1
------INS SimpleName@@itemProcessor @TO@ SingleVariableDeclaration@@ItemProcessor<T,T> itemProcessor @AT@ 2303 @LENGTH@ 13
---UPD SuperConstructorInvocation@@super(new SimpleChunkProvider<T>(itemReader,repeatOperations),new SimpleChunkProcessor<T,T>(new PassThroughItemProcessor<T>(),itemWriter));
 @TO@ super(new SimpleChunkProvider<T>(itemReader,repeatOperations),new SimpleChunkProcessor<T,T>(itemProcessor,itemWriter));
 @AT@ 2298 @LENGTH@ 148
------UPD ClassInstanceCreation@@SimpleChunkProcessor<T,T>[new PassThroughItemProcessor<T>(), itemWriter] @TO@ SimpleChunkProcessor<T,T>[itemProcessor, itemWriter] @AT@ 2362 @LENGTH@ 82
---------INS SimpleName@@itemProcessor @TO@ ClassInstanceCreation@@SimpleChunkProcessor<T,T>[new PassThroughItemProcessor<T>(), itemWriter] @AT@ 2486 @LENGTH@ 13


INS ExpressionStatement@@MethodInvocation:properties.setProperty("jboss.server.deploy.dir",properties.getProperty("jboss.home.dir") + "/domain/content") @TO@ MethodDeclaration@@public, voidMethodName:ServerStartTask, final String serverName, final int portOffset, final List<ServiceActivator> startServices, final List<AbstractServerModelUpdate<?>> updates,  @AT@ 2727 @LENGTH@ 112
---INS MethodInvocation@@properties.setProperty("jboss.server.deploy.dir",properties.getProperty("jboss.home.dir") + "/domain/content") @TO@ ExpressionStatement@@MethodInvocation:properties.setProperty("jboss.server.deploy.dir",properties.getProperty("jboss.home.dir") + "/domain/content") @AT@ 2727 @LENGTH@ 111
------INS SimpleName@@Name:properties @TO@ MethodInvocation@@properties.setProperty("jboss.server.deploy.dir",properties.getProperty("jboss.home.dir") + "/domain/content") @AT@ 2727 @LENGTH@ 10
------INS SimpleName@@MethodName:setProperty:["jboss.server.deploy.dir", properties.getProperty("jboss.home.dir") + "/domain/content"] @TO@ MethodInvocation@@properties.setProperty("jboss.server.deploy.dir",properties.getProperty("jboss.home.dir") + "/domain/content") @AT@ 2738 @LENGTH@ 100
---------INS StringLiteral@@"jboss.server.deploy.dir" @TO@ SimpleName@@MethodName:setProperty:["jboss.server.deploy.dir", properties.getProperty("jboss.home.dir") + "/domain/content"] @AT@ 2750 @LENGTH@ 25
---------INS InfixExpression@@properties.getProperty("jboss.home.dir") + "/domain/content" @TO@ SimpleName@@MethodName:setProperty:["jboss.server.deploy.dir", properties.getProperty("jboss.home.dir") + "/domain/content"] @AT@ 2777 @LENGTH@ 60
------------INS MethodInvocation@@properties.getProperty("jboss.home.dir") @TO@ InfixExpression@@properties.getProperty("jboss.home.dir") + "/domain/content" @AT@ 2777 @LENGTH@ 40
---------------INS SimpleName@@Name:properties @TO@ MethodInvocation@@properties.getProperty("jboss.home.dir") @AT@ 2777 @LENGTH@ 10
---------------INS SimpleName@@MethodName:getProperty:["jboss.home.dir"] @TO@ MethodInvocation@@properties.getProperty("jboss.home.dir") @AT@ 2788 @LENGTH@ 29
------------------INS StringLiteral@@"jboss.home.dir" @TO@ SimpleName@@MethodName:getProperty:["jboss.home.dir"] @AT@ 2800 @LENGTH@ 16
------------INS Operator@@+ @TO@ InfixExpression@@properties.getProperty("jboss.home.dir") + "/domain/content" @AT@ 2817 @LENGTH@ 1
------------INS StringLiteral@@"/domain/content" @TO@ InfixExpression@@properties.getProperty("jboss.home.dir") + "/domain/content" @AT@ 2820 @LENGTH@ 17


UPD SuperConstructorInvocation@@super("github",connectionRepository,new OAuth2Template(clientId,clientSecret,"https://github.com/login/oauth/authorize?client_id={clientId}&redirect_uri={redirectUri}&scope={scope}","https://github.com/login/oauth/access_token"));
 @TO@ super("github",connectionRepository,new OAuth2Template(clientId,clientSecret,"https://github.com/login/oauth/authorize?client_id={client_id}&redirect_uri={redirect_uri}&scope={scope}","https://github.com/login/oauth/access_token"));
 @AT@ 1221 @LENGTH@ 245
---UPD ClassInstanceCreation@@OAuth2Template[clientId, clientSecret, "https://github.com/login/oauth/authorize?client_id={clientId}&redirect_uri={redirectUri}&scope={scope}", "https://github.com/login/oauth/access_token"] @TO@ OAuth2Template[clientId, clientSecret, "https://github.com/login/oauth/authorize?client_id={client_id}&redirect_uri={redirect_uri}&scope={scope}", "https://github.com/login/oauth/access_token"] @AT@ 1259 @LENGTH@ 205
------UPD StringLiteral@@"https://github.com/login/oauth/authorize?client_id={clientId}&redirect_uri={redirectUri}&scope={scope}" @TO@ "https://github.com/login/oauth/authorize?client_id={client_id}&redirect_uri={redirect_uri}&scope={scope}" @AT@ 1307 @LENGTH@ 104


INS ExpressionStatement@@MethodInvocation:System.out.println(Arrays.asList(jndiBindings(operation))) @TO@ MethodDeclaration@@public, void, MethodName:execute, RuntimeTaskContext context, OperationFailedException,  @AT@ 6372 @LENGTH@ 59
---INS MethodInvocation@@System.out.println(Arrays.asList(jndiBindings(operation))) @TO@ ExpressionStatement@@MethodInvocation:System.out.println(Arrays.asList(jndiBindings(operation))) @AT@ 6372 @LENGTH@ 58
------INS QualifiedName@@Name:System.out @TO@ MethodInvocation@@System.out.println(Arrays.asList(jndiBindings(operation))) @AT@ 6372 @LENGTH@ 10
------INS SimpleName@@MethodName:println:[Arrays.asList(jndiBindings(operation))] @TO@ MethodInvocation@@System.out.println(Arrays.asList(jndiBindings(operation))) @AT@ 6383 @LENGTH@ 47
---------INS MethodInvocation@@Arrays.asList(jndiBindings(operation)) @TO@ SimpleName@@MethodName:println:[Arrays.asList(jndiBindings(operation))] @AT@ 6391 @LENGTH@ 38
------------INS SimpleName@@Name:Arrays @TO@ MethodInvocation@@Arrays.asList(jndiBindings(operation)) @AT@ 6391 @LENGTH@ 6
------------INS SimpleName@@MethodName:asList:[jndiBindings(operation)] @TO@ MethodInvocation@@Arrays.asList(jndiBindings(operation)) @AT@ 6398 @LENGTH@ 31
---------------INS MethodInvocation@@jndiBindings(operation) @TO@ SimpleName@@MethodName:asList:[jndiBindings(operation)] @AT@ 6405 @LENGTH@ 23
------------------INS SimpleName@@MethodName:jndiBindings:[operation] @TO@ MethodInvocation@@jndiBindings(operation) @AT@ 6405 @LENGTH@ 23
---------------------INS SimpleName@@operation @TO@ SimpleName@@MethodName:jndiBindings:[operation] @AT@ 6418 @LENGTH@ 9


UPD ReturnStatement@@CastExpression:(Set<HK>)deserializeHashValues(rawValues,Set.class) @TO@ CastExpression:(Set<HK>)deserializeHashKeys(rawValues,Set.class) @AT@ 48779 @LENGTH@ 61
---UPD CastExpression@@(Set<HK>)deserializeHashValues(rawValues,Set.class) @TO@ (Set<HK>)deserializeHashKeys(rawValues,Set.class) @AT@ 48786 @LENGTH@ 53
------UPD MethodInvocation@@deserializeHashValues(rawValues,Set.class) @TO@ deserializeHashKeys(rawValues,Set.class) @AT@ 48796 @LENGTH@ 43
---------UPD SimpleName@@MethodName:deserializeHashValues:[rawValues, Set.class] @TO@ MethodName:deserializeHashKeys:[rawValues, Set.class] @AT@ 48796 @LENGTH@ 43


UPD ExpressionStatement@@MethodInvocation:mapping.initApplicationContext() @TO@ MethodInvocation:mapping.setApplicationContext(new StaticApplicationContext()) @AT@ 3082 @LENGTH@ 33
---UPD MethodInvocation@@mapping.initApplicationContext() @TO@ mapping.setApplicationContext(new StaticApplicationContext()) @AT@ 3082 @LENGTH@ 32
------UPD SimpleName@@MethodName:initApplicationContext:[] @TO@ MethodName:setApplicationContext:[new StaticApplicationContext()] @AT@ 3090 @LENGTH@ 24
---------INS ClassInstanceCreation@@StaticApplicationContext[] @TO@ SimpleName@@MethodName:initApplicationContext:[] @AT@ 3107 @LENGTH@ 30
------------INS New@@new @TO@ ClassInstanceCreation@@StaticApplicationContext[] @AT@ 3107 @LENGTH@ 3
------------INS SimpleType@@StaticApplicationContext @TO@ ClassInstanceCreation@@StaticApplicationContext[] @AT@ 3111 @LENGTH@ 24


UPD FieldDeclaration@@private, final, String[], [collectionsToDrop=new String[]{"foobar","person","personmapproperty","personpojo","personcustomidname","personmultidimarrays","personmulticollection","person1","person2","account"}] @TO@ private, final, String[], [collectionsToDrop=new String[]{"foobar","person","personmapproperty","personpojo","personcustomidname","personmultidimarrays","personmulticollection","personwithdbref","person1","person2","account"}] @AT@ 1791 @LENGTH@ 248
---UPD VariableDeclarationFragment@@collectionsToDrop=new String[]{"foobar","person","personmapproperty","personpojo","personcustomidname","personmultidimarrays","personmulticollection","person1","person2","account"} @TO@ collectionsToDrop=new String[]{"foobar","person","personmapproperty","personpojo","personcustomidname","personmultidimarrays","personmulticollection","personwithdbref","person1","person2","account"} @AT@ 1814 @LENGTH@ 224
------UPD ArrayCreation@@new String[]{"foobar","person","personmapproperty","personpojo","personcustomidname","personmultidimarrays","personmulticollection","person1","person2","account"} @TO@ new String[]{"foobar","person","personmapproperty","personpojo","personcustomidname","personmultidimarrays","personmulticollection","personwithdbref","person1","person2","account"} @AT@ 1834 @LENGTH@ 204
---------UPD ArrayInitializer@@{"foobar","person","personmapproperty","personpojo","personcustomidname","personmultidimarrays","personmulticollection","person1","person2","account"} @TO@ {"foobar","person","personmapproperty","personpojo","personcustomidname","personmultidimarrays","personmulticollection","personwithdbref","person1","person2","account"} @AT@ 1846 @LENGTH@ 192
------------INS StringLiteral@@"personwithdbref" @TO@ ArrayInitializer@@{"foobar","person","personmapproperty","personpojo","personcustomidname","personmultidimarrays","personmulticollection","person1","person2","account"} @AT@ 1998 @LENGTH@ 17


UPD Block@@ThenBody:{  LOG.debug("Mail contains file attachment: " + fileName);  CollectionHelper.appendValue(map,fileName,part.getDataHandler());} @TO@ ThenBody:{  LOG.debug("Mail contains file attachment: " + fileName);  if (!map.containsKey(fileName)) {    map.put(fileName,part.getDataHandler());  } else {    LOG.warn("Cannot extract duplicate attachment: " + fileName);  }} @AT@ 14031 @LENGTH@ 298
---INS IfStatement@@if (!map.containsKey(fileName)) {  map.put(fileName,part.getDataHandler());} else {  LOG.warn("Cannot extract duplicate attachment: " + fileName);} @TO@ Block@@ThenBody:{  LOG.debug("Mail contains file attachment: " + fileName);  CollectionHelper.appendValue(map,fileName,part.getDataHandler());} @AT@ 14138 @LENGTH@ 382
------INS PrefixExpression@@!map.containsKey(fileName) @TO@ IfStatement@@if (!map.containsKey(fileName)) {  map.put(fileName,part.getDataHandler());} else {  LOG.warn("Cannot extract duplicate attachment: " + fileName);} @AT@ 14142 @LENGTH@ 26
---------INS Operator@@! @TO@ PrefixExpression@@!map.containsKey(fileName) @AT@ 14142 @LENGTH@ 1
---------INS MethodInvocation@@map.containsKey(fileName) @TO@ PrefixExpression@@!map.containsKey(fileName) @AT@ 14143 @LENGTH@ 25
------------INS SimpleName@@Name:map @TO@ MethodInvocation@@map.containsKey(fileName) @AT@ 14143 @LENGTH@ 3
------------INS SimpleName@@MethodName:containsKey:[fileName] @TO@ MethodInvocation@@map.containsKey(fileName) @AT@ 14147 @LENGTH@ 21
---------------INS SimpleName@@fileName @TO@ SimpleName@@MethodName:containsKey:[fileName] @AT@ 14159 @LENGTH@ 8
------INS Block@@ThenBody:{  map.put(fileName,part.getDataHandler());} @TO@ IfStatement@@if (!map.containsKey(fileName)) {  map.put(fileName,part.getDataHandler());} else {  LOG.warn("Cannot extract duplicate attachment: " + fileName);} @AT@ 14170 @LENGTH@ 203
---------MOV ExpressionStatement@@MethodInvocation:CollectionHelper.appendValue(map,fileName,part.getDataHandler()) @TO@ Block@@ThenBody:{  map.put(fileName,part.getDataHandler());} @AT@ 14240 @LENGTH@ 67
------INS Block@@ElseBody:{  LOG.warn("Cannot extract duplicate attachment: " + fileName);} @TO@ IfStatement@@if (!map.containsKey(fileName)) {  map.put(fileName,part.getDataHandler());} else {  LOG.warn("Cannot extract duplicate attachment: " + fileName);} @AT@ 14403 @LENGTH@ 117
---------INS ExpressionStatement@@MethodInvocation:LOG.warn("Cannot extract duplicate attachment: " + fileName) @TO@ Block@@ElseBody:{  LOG.warn("Cannot extract duplicate attachment: " + fileName);} @AT@ 14433 @LENGTH@ 61
------------INS MethodInvocation@@LOG.warn("Cannot extract duplicate attachment: " + fileName) @TO@ ExpressionStatement@@MethodInvocation:LOG.warn("Cannot extract duplicate attachment: " + fileName) @AT@ 14433 @LENGTH@ 60
---------------INS SimpleName@@Name:LOG @TO@ MethodInvocation@@LOG.warn("Cannot extract duplicate attachment: " + fileName) @AT@ 14433 @LENGTH@ 3
---------------INS SimpleName@@MethodName:warn:["Cannot extract duplicate attachment: " + fileName] @TO@ MethodInvocation@@LOG.warn("Cannot extract duplicate attachment: " + fileName) @AT@ 14437 @LENGTH@ 56
------------------INS InfixExpression@@"Cannot extract duplicate attachment: " + fileName @TO@ SimpleName@@MethodName:warn:["Cannot extract duplicate attachment: " + fileName] @AT@ 14442 @LENGTH@ 50
---------------------INS StringLiteral@@"Cannot extract duplicate attachment: " @TO@ InfixExpression@@"Cannot extract duplicate attachment: " + fileName @AT@ 14442 @LENGTH@ 39
---------------------INS Operator@@+ @TO@ InfixExpression@@"Cannot extract duplicate attachment: " + fileName @AT@ 14481 @LENGTH@ 1
---------------------INS SimpleName@@fileName @TO@ InfixExpression@@"Cannot extract duplicate attachment: " + fileName @AT@ 14484 @LENGTH@ 8
---UPD ExpressionStatement@@MethodInvocation:CollectionHelper.appendValue(map,fileName,part.getDataHandler()) @TO@ MethodInvocation:map.put(fileName,part.getDataHandler()) @AT@ 14240 @LENGTH@ 67


UPD EnhancedForStatement@@for (ModelNode deployment : modelNode.asList()) {  String uniqueName=deployment.get(NAME).asString();  String runtimeName=deployment.get(RUNTIME_NAME).asString();  String sha1=HashUtil.bytesToHexString(deployment.get(HASH).asBytes());  boolean start=deployment.get(START).asBoolean();  writer.writeStartElement(Element.DEPLOYMENT.getLocalName());  writeAttribute(writer,Attribute.NAME,uniqueName);  writeAttribute(writer,Attribute.RUNTIME_NAME,runtimeName);  writeAttribute(writer,Attribute.SHA1,sha1);  if (!start) {    writeAttribute(writer,Attribute.START,"false");  }  writer.writeEndElement();} @TO@ for (String uniqueName : deploymentNames) {  ModelNode deployment=modelNode.get(uniqueName);  String runtimeName=deployment.get(RUNTIME_NAME).asString();  String sha1=HashUtil.bytesToHexString(deployment.get(HASH).asBytes());  boolean start=deployment.get(START).asBoolean();  writer.writeStartElement(Element.DEPLOYMENT.getLocalName());  writeAttribute(writer,Attribute.NAME,uniqueName);  writeAttribute(writer,Attribute.RUNTIME_NAME,runtimeName);  writeAttribute(writer,Attribute.SHA1,sha1);  if (!start) {    writeAttribute(writer,Attribute.START,"false");  }  writer.writeEndElement();} @AT@ 21556 @LENGTH@ 759
---UPD SingleVariableDeclaration@@ModelNode deployment @TO@ String uniqueName @AT@ 21561 @LENGTH@ 20
------UPD SimpleType@@ModelNode @TO@ String @AT@ 21561 @LENGTH@ 9
------UPD SimpleName@@deployment @TO@ uniqueName @AT@ 21571 @LENGTH@ 10
---DEL MethodInvocation@@modelNode.asList() @AT@ 21584 @LENGTH@ 18
------DEL SimpleName@@Name:modelNode @AT@ 21584 @LENGTH@ 9
------DEL SimpleName@@MethodName:asList:[] @AT@ 21594 @LENGTH@ 8
---UPD VariableDeclarationStatement@@String uniqueName=deployment.get(NAME).asString(); @TO@ ModelNode deployment=modelNode.get(uniqueName); @AT@ 21618 @LENGTH@ 52
------UPD SimpleType@@String @TO@ ModelNode @AT@ 21618 @LENGTH@ 6
------UPD VariableDeclarationFragment@@uniqueName=deployment.get(NAME).asString() @TO@ deployment=modelNode.get(uniqueName) @AT@ 21625 @LENGTH@ 44
---------UPD SimpleName@@uniqueName @TO@ deployment @AT@ 21625 @LENGTH@ 10
---------UPD MethodInvocation@@deployment.get(NAME).asString() @TO@ modelNode.get(uniqueName) @AT@ 21638 @LENGTH@ 31
------------DEL MethodInvocation@@MethodName:get:[NAME] @AT@ 21638 @LENGTH@ 20
---------------DEL SimpleName@@NAME @AT@ 21653 @LENGTH@ 4
------------UPD SimpleName@@Name:deployment @TO@ Name:modelNode @AT@ 21638 @LENGTH@ 10
------------UPD SimpleName@@MethodName:asString:[] @TO@ MethodName:get:[uniqueName] @AT@ 21659 @LENGTH@ 10
---------------INS SimpleName@@uniqueName @TO@ SimpleName@@MethodName:asString:[] @AT@ 21705 @LENGTH@ 10
---INS SimpleName@@deploymentNames @TO@ EnhancedForStatement@@for (ModelNode deployment : modelNode.asList()) {  String uniqueName=deployment.get(NAME).asString();  String runtimeName=deployment.get(RUNTIME_NAME).asString();  String sha1=HashUtil.bytesToHexString(deployment.get(HASH).asBytes());  boolean start=deployment.get(START).asBoolean();  writer.writeStartElement(Element.DEPLOYMENT.getLocalName());  writeAttribute(writer,Attribute.NAME,uniqueName);  writeAttribute(writer,Attribute.RUNTIME_NAME,runtimeName);  writeAttribute(writer,Attribute.SHA1,sha1);  if (!start) {    writeAttribute(writer,Attribute.START,"false");  }  writer.writeEndElement();} @AT@ 21637 @LENGTH@ 15


INS FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @TO@ TypeDeclaration@@[public]RemoteAuthenticationException, NestedRuntimeException @AT@ 1244 @LENGTH@ 90
---INS Modifier@@private @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @AT@ 1244 @LENGTH@ 7
---INS Modifier@@static @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @AT@ 1252 @LENGTH@ 6
---INS Modifier@@final @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @AT@ 1259 @LENGTH@ 5
---INS PrimitiveType@@long @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @AT@ 1265 @LENGTH@ 4
---INS VariableDeclarationFragment@@serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @AT@ 1270 @LENGTH@ 63
------INS SimpleName@@serialVersionUID @TO@ VariableDeclarationFragment@@serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID @AT@ 1270 @LENGTH@ 16
------INS QualifiedName@@SpringSecurityCoreVersion.SERIAL_VERSION_UID @TO@ VariableDeclarationFragment@@serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID @AT@ 1289 @LENGTH@ 44
---------INS SimpleName@@SpringSecurityCoreVersion @TO@ QualifiedName@@SpringSecurityCoreVersion.SERIAL_VERSION_UID @AT@ 1289 @LENGTH@ 25
---------INS SimpleName@@SERIAL_VERSION_UID @TO@ QualifiedName@@SpringSecurityCoreVersion.SERIAL_VERSION_UID @AT@ 1315 @LENGTH@ 18


INS IfStatement@@if (moduleIdentifier == null) {  return;} @TO@ MethodDeclaration@@public, void, MethodName:deploy, DeploymentPhaseContext phaseContext, DeploymentUnitProcessingException,  @AT@ 2573 @LENGTH@ 61
---INS InfixExpression@@moduleIdentifier == null @TO@ IfStatement@@if (moduleIdentifier == null) {  return;} @AT@ 2577 @LENGTH@ 24
------INS SimpleName@@moduleIdentifier @TO@ InfixExpression@@moduleIdentifier == null @AT@ 2577 @LENGTH@ 16
------INS Operator@@== @TO@ InfixExpression@@moduleIdentifier == null @AT@ 2593 @LENGTH@ 2
------INS NullLiteral@@null @TO@ InfixExpression@@moduleIdentifier == null @AT@ 2597 @LENGTH@ 4
---INS Block@@ThenBody:{  return;} @TO@ IfStatement@@if (moduleIdentifier == null) {  return;} @AT@ 2603 @LENGTH@ 31
------INS ReturnStatement@@ @TO@ Block@@ThenBody:{  return;} @AT@ 2617 @LENGTH@ 7


UPD MethodDeclaration@@public, boolean, MethodName:canAppearNext, CommandContext ctx,  @TO@ public, boolean, MethodName:canAppearNext, CommandContext ctx, CommandFormatException,  @AT@ 3411 @LENGTH@ 254
---INS SimpleType@@CommandFormatException @TO@ MethodDeclaration@@public, boolean, MethodName:canAppearNext, CommandContext ctx,  @AT@ 3497 @LENGTH@ 22


UPD FieldDeclaration@@private, ServiceContainer, [serviceContainer] @TO@ private, volatile, ServiceContainer, [serviceContainer] @AT@ 2679 @LENGTH@ 42
---INS Modifier@@volatile @TO@ FieldDeclaration@@private, ServiceContainer, [serviceContainer] @AT@ 2697 @LENGTH@ 8


UPD VariableDeclarationStatement@@Type[] bounds=((TypeVariable)paramTypes[i]).getBounds(); @TO@ @SuppressWarnings("rawtypes") Type[] bounds=((TypeVariable)paramTypes[i]).getBounds(); @AT@ 4455 @LENGTH@ 59


INS IfStatement@@if (DeploymentTypeMarker.isType(DeploymentType.EAR,deploymentUnit)) {  return;} @TO@ MethodDeclaration@@public, void, MethodName:deploy, DeploymentPhaseContext phaseContext, DeploymentUnitProcessingException,  @AT@ 2877 @LENGTH@ 99
---INS MethodInvocation@@DeploymentTypeMarker.isType(DeploymentType.EAR,deploymentUnit) @TO@ IfStatement@@if (DeploymentTypeMarker.isType(DeploymentType.EAR,deploymentUnit)) {  return;} @AT@ 2880 @LENGTH@ 62
------INS SimpleName@@Name:DeploymentTypeMarker @TO@ MethodInvocation@@DeploymentTypeMarker.isType(DeploymentType.EAR,deploymentUnit) @AT@ 2880 @LENGTH@ 20
------INS SimpleName@@MethodName:isType:[DeploymentType.EAR, deploymentUnit] @TO@ MethodInvocation@@DeploymentTypeMarker.isType(DeploymentType.EAR,deploymentUnit) @AT@ 2901 @LENGTH@ 41
---------INS QualifiedName@@DeploymentType.EAR @TO@ SimpleName@@MethodName:isType:[DeploymentType.EAR, deploymentUnit] @AT@ 2908 @LENGTH@ 18
------------INS SimpleName@@DeploymentType @TO@ QualifiedName@@DeploymentType.EAR @AT@ 2908 @LENGTH@ 14
------------INS SimpleName@@EAR @TO@ QualifiedName@@DeploymentType.EAR @AT@ 2923 @LENGTH@ 3
---------INS SimpleName@@deploymentUnit @TO@ SimpleName@@MethodName:isType:[DeploymentType.EAR, deploymentUnit] @AT@ 2927 @LENGTH@ 14
---INS Block@@ThenBody:{  return;} @TO@ IfStatement@@if (DeploymentTypeMarker.isType(DeploymentType.EAR,deploymentUnit)) {  return;} @AT@ 2945 @LENGTH@ 31
------INS ReturnStatement@@ @TO@ Block@@ThenBody:{  return;} @AT@ 2959 @LENGTH@ 7


UPD MethodDeclaration@@public, Boolean, MethodName:getIgnoreInvalidEndpoint,  @TO@ public, Boolean, MethodName:getIgnoreInvalidEndpoints,  @AT@ 3001 @LENGTH@ 88
---UPD SimpleName@@MethodName:getIgnoreInvalidEndpoint @TO@ MethodName:getIgnoreInvalidEndpoints @AT@ 3016 @LENGTH@ 24


UPD IfStatement@@if (inAvail < 0) {  eof=true;  if (0 == modulus) {    return;  }  ensureBufferSize(encodeSize);switch (modulus) {case 1:    buffer[pos++]=encodeTable[(int)(bitWorkArea >> 3) & MASK_5BITS];  buffer[pos++]=encodeTable[(int)(bitWorkArea << 2) & MASK_5BITS];buffer[pos++]=PAD;buffer[pos++]=PAD;buffer[pos++]=PAD;buffer[pos++]=PAD;buffer[pos++]=PAD;buffer[pos++]=PAD;break;case 2:buffer[pos++]=encodeTable[(int)(bitWorkArea >> 11) & MASK_5BITS];buffer[pos++]=encodeTable[(int)(bitWorkArea >> 6) & MASK_5BITS];buffer[pos++]=encodeTable[(int)(bitWorkArea >> 1) & MASK_5BITS];buffer[pos++]=encodeTable[(int)(bitWorkArea << 4) & MASK_5BITS];buffer[pos++]=PAD;buffer[pos++]=PAD;buffer[pos++]=PAD;buffer[pos++]=PAD;break;case 3:buffer[pos++]=encodeTable[(int)(bitWorkArea >> 19) & MASK_5BITS];buffer[pos++]=encodeTable[(int)(bitWorkArea >> 14) & MASK_5BITS];buffer[pos++]=encodeTable[(int)(bitWorkArea >> 9) & MASK_5BITS];buffer[pos++]=encodeTable[(int)(bitWorkArea >> 4) & MASK_5BITS];buffer[pos++]=encodeTable[(int)(bitWorkArea << 1) & MASK_5BITS];buffer[pos++]=PAD;buffer[pos++]=PAD;buffer[pos++]=PAD;break;case 4:buffer[pos++]=encodeTable[(int)(bitWorkArea >> 27) & MASK_5BITS];buffer[pos++]=encodeTable[(int)(bitWorkArea >> 22) & MASK_5BITS];buffer[pos++]=encodeTable[(int)(bitWorkArea >> 17) & MASK_5BITS];buffer[pos++]=encodeTable[(int)(bitWorkArea >> 12) & MASK_5BITS];buffer[pos++]=encodeTable[(int)(bitWorkArea >> 7) & MASK_5BITS];buffer[pos++]=encodeTable[(int)(bitWorkArea >> 2) & MASK_5BITS];buffer[pos++]=encodeTable[(int)(bitWorkArea << 3) & MASK_5BITS];buffer[pos++]=PAD;break;}if (lineLength > 0) {System.arraycopy(lineSeparator,0,buffer,pos,lineSeparator.length);pos+=lineSeparator.length;}} else {for (int i=0; i < inAvail; i++) {ensureBufferSize(encodeSize);modulus=(++modulus) % BITS_PER_ENCODED_BYTE;int b=in[inPos++];if (b < 0) {b+=256;}bitWorkArea=(bitWorkArea << 8) + b;if (0 == modulus) {buffer[pos++]=encodeTable[(int)(bitWorkArea >> 35) & MASK_5BITS];buffer[pos++]=encodeTable[(int)(bitWorkArea >> 30) & MASK_5BITS];buffer[pos++]=encodeTable[(int)(bitWorkArea >> 25) & MASK_5BITS];buffer[pos++]=encodeTable[(int)(bitWorkArea >> 20) & MASK_5BITS];buffer[pos++]=encodeTable[(int)(bitWorkArea >> 15) & MASK_5BITS];buffer[pos++]=encodeTable[(int)(bitWorkArea >> 10) & MASK_5BITS];buffer[pos++]=encodeTable[(int)(bitWorkArea >> 5) & MASK_5BITS];buffer[pos++]=encodeTable[(int)bitWorkArea & MASK_5BITS];currentLinePos+=BYTES_PER_ENCODED_BLOCK;if (lineLength > 0 && lineLength <= currentLinePos) {System.arraycopy(lineSeparator,0,buffer,pos,lineSeparator.length);pos+=lineSeparator.length;currentLinePos=0;}}}} @TO@ if (inAvail < 0) {  eof=true;  if (0 == modulus && lineLength == 0) {    return;  }  ensureBufferSize(encodeSize);  int savedPos=pos;switch (modulus) {case 1:    buffer[pos++]=encodeTable[(int)(bitWorkArea >> 3) & MASK_5BITS];  buffer[pos++]=encodeTable[(int)(bitWorkArea << 2) & MASK_5BITS];buffer[pos++]=PAD;buffer[pos++]=PAD;buffer[pos++]=PAD;buffer[pos++]=PAD;buffer[pos++]=PAD;buffer[pos++]=PAD;break;case 2:buffer[pos++]=encodeTable[(int)(bitWorkArea >> 11) & MASK_5BITS];buffer[pos++]=encodeTable[(int)(bitWorkArea >> 6) & MASK_5BITS];buffer[pos++]=encodeTable[(int)(bitWorkArea >> 1) & MASK_5BITS];buffer[pos++]=encodeTable[(int)(bitWorkArea << 4) & MASK_5BITS];buffer[pos++]=PAD;buffer[pos++]=PAD;buffer[pos++]=PAD;buffer[pos++]=PAD;break;case 3:buffer[pos++]=encodeTable[(int)(bitWorkArea >> 19) & MASK_5BITS];buffer[pos++]=encodeTable[(int)(bitWorkArea >> 14) & MASK_5BITS];buffer[pos++]=encodeTable[(int)(bitWorkArea >> 9) & MASK_5BITS];buffer[pos++]=encodeTable[(int)(bitWorkArea >> 4) & MASK_5BITS];buffer[pos++]=encodeTable[(int)(bitWorkArea << 1) & MASK_5BITS];buffer[pos++]=PAD;buffer[pos++]=PAD;buffer[pos++]=PAD;break;case 4:buffer[pos++]=encodeTable[(int)(bitWorkArea >> 27) & MASK_5BITS];buffer[pos++]=encodeTable[(int)(bitWorkArea >> 22) & MASK_5BITS];buffer[pos++]=encodeTable[(int)(bitWorkArea >> 17) & MASK_5BITS];buffer[pos++]=encodeTable[(int)(bitWorkArea >> 12) & MASK_5BITS];buffer[pos++]=encodeTable[(int)(bitWorkArea >> 7) & MASK_5BITS];buffer[pos++]=encodeTable[(int)(bitWorkArea >> 2) & MASK_5BITS];buffer[pos++]=encodeTable[(int)(bitWorkArea << 3) & MASK_5BITS];buffer[pos++]=PAD;break;}currentLinePos+=pos - savedPos;if (lineLength > 0 && currentLinePos > 0) {System.arraycopy(lineSeparator,0,buffer,pos,lineSeparator.length);pos+=lineSeparator.length;}} else {for (int i=0; i < inAvail; i++) {ensureBufferSize(encodeSize);modulus=(++modulus) % BYTES_PER_UNENCODED_BLOCK;int b=in[inPos++];if (b < 0) {b+=256;}bitWorkArea=(bitWorkArea << 8) + b;if (0 == modulus) {buffer[pos++]=encodeTable[(int)(bitWorkArea >> 35) & MASK_5BITS];buffer[pos++]=encodeTable[(int)(bitWorkArea >> 30) & MASK_5BITS];buffer[pos++]=encodeTable[(int)(bitWorkArea >> 25) & MASK_5BITS];buffer[pos++]=encodeTable[(int)(bitWorkArea >> 20) & MASK_5BITS];buffer[pos++]=encodeTable[(int)(bitWorkArea >> 15) & MASK_5BITS];buffer[pos++]=encodeTable[(int)(bitWorkArea >> 10) & MASK_5BITS];buffer[pos++]=encodeTable[(int)(bitWorkArea >> 5) & MASK_5BITS];buffer[pos++]=encodeTable[(int)bitWorkArea & MASK_5BITS];currentLinePos+=BYTES_PER_ENCODED_BLOCK;if (lineLength > 0 && lineLength <= currentLinePos) {System.arraycopy(lineSeparator,0,buffer,pos,lineSeparator.length);pos+=lineSeparator.length;currentLinePos=0;}}}} @AT@ 12074 @LENGTH@ 4727
---UPD Block@@ThenBody:{  eof=true;  if (0 == modulus) {    return;  }  ensureBufferSize(encodeSize);switch (modulus) {case 1:    buffer[pos++]=encodeTable[(int)(bitWorkArea >> 3) & MASK_5BITS];  buffer[pos++]=encodeTable[(int)(bitWorkArea << 2) & MASK_5BITS];buffer[pos++]=PAD;buffer[pos++]=PAD;buffer[pos++]=PAD;buffer[pos++]=PAD;buffer[pos++]=PAD;buffer[pos++]=PAD;break;case 2:buffer[pos++]=encodeTable[(int)(bitWorkArea >> 11) & MASK_5BITS];buffer[pos++]=encodeTable[(int)(bitWorkArea >> 6) & MASK_5BITS];buffer[pos++]=encodeTable[(int)(bitWorkArea >> 1) & MASK_5BITS];buffer[pos++]=encodeTable[(int)(bitWorkArea << 4) & MASK_5BITS];buffer[pos++]=PAD;buffer[pos++]=PAD;buffer[pos++]=PAD;buffer[pos++]=PAD;break;case 3:buffer[pos++]=encodeTable[(int)(bitWorkArea >> 19) & MASK_5BITS];buffer[pos++]=encodeTable[(int)(bitWorkArea >> 14) & MASK_5BITS];buffer[pos++]=encodeTable[(int)(bitWorkArea >> 9) & MASK_5BITS];buffer[pos++]=encodeTable[(int)(bitWorkArea >> 4) & MASK_5BITS];buffer[pos++]=encodeTable[(int)(bitWorkArea << 1) & MASK_5BITS];buffer[pos++]=PAD;buffer[pos++]=PAD;buffer[pos++]=PAD;break;case 4:buffer[pos++]=encodeTable[(int)(bitWorkArea >> 27) & MASK_5BITS];buffer[pos++]=encodeTable[(int)(bitWorkArea >> 22) & MASK_5BITS];buffer[pos++]=encodeTable[(int)(bitWorkArea >> 17) & MASK_5BITS];buffer[pos++]=encodeTable[(int)(bitWorkArea >> 12) & MASK_5BITS];buffer[pos++]=encodeTable[(int)(bitWorkArea >> 7) & MASK_5BITS];buffer[pos++]=encodeTable[(int)(bitWorkArea >> 2) & MASK_5BITS];buffer[pos++]=encodeTable[(int)(bitWorkArea << 3) & MASK_5BITS];buffer[pos++]=PAD;break;}if (lineLength > 0) {System.arraycopy(lineSeparator,0,buffer,pos,lineSeparator.length);pos+=lineSeparator.length;}} @TO@ ThenBody:{  eof=true;  if (0 == modulus && lineLength == 0) {    return;  }  ensureBufferSize(encodeSize);  int savedPos=pos;switch (modulus) {case 1:    buffer[pos++]=encodeTable[(int)(bitWorkArea >> 3) & MASK_5BITS];  buffer[pos++]=encodeTable[(int)(bitWorkArea << 2) & MASK_5BITS];buffer[pos++]=PAD;buffer[pos++]=PAD;buffer[pos++]=PAD;buffer[pos++]=PAD;buffer[pos++]=PAD;buffer[pos++]=PAD;break;case 2:buffer[pos++]=encodeTable[(int)(bitWorkArea >> 11) & MASK_5BITS];buffer[pos++]=encodeTable[(int)(bitWorkArea >> 6) & MASK_5BITS];buffer[pos++]=encodeTable[(int)(bitWorkArea >> 1) & MASK_5BITS];buffer[pos++]=encodeTable[(int)(bitWorkArea << 4) & MASK_5BITS];buffer[pos++]=PAD;buffer[pos++]=PAD;buffer[pos++]=PAD;buffer[pos++]=PAD;break;case 3:buffer[pos++]=encodeTable[(int)(bitWorkArea >> 19) & MASK_5BITS];buffer[pos++]=encodeTable[(int)(bitWorkArea >> 14) & MASK_5BITS];buffer[pos++]=encodeTable[(int)(bitWorkArea >> 9) & MASK_5BITS];buffer[pos++]=encodeTable[(int)(bitWorkArea >> 4) & MASK_5BITS];buffer[pos++]=encodeTable[(int)(bitWorkArea << 1) & MASK_5BITS];buffer[pos++]=PAD;buffer[pos++]=PAD;buffer[pos++]=PAD;break;case 4:buffer[pos++]=encodeTable[(int)(bitWorkArea >> 27) & MASK_5BITS];buffer[pos++]=encodeTable[(int)(bitWorkArea >> 22) & MASK_5BITS];buffer[pos++]=encodeTable[(int)(bitWorkArea >> 17) & MASK_5BITS];buffer[pos++]=encodeTable[(int)(bitWorkArea >> 12) & MASK_5BITS];buffer[pos++]=encodeTable[(int)(bitWorkArea >> 7) & MASK_5BITS];buffer[pos++]=encodeTable[(int)(bitWorkArea >> 2) & MASK_5BITS];buffer[pos++]=encodeTable[(int)(bitWorkArea << 3) & MASK_5BITS];buffer[pos++]=PAD;break;}currentLinePos+=pos - savedPos;if (lineLength > 0 && currentLinePos > 0) {System.arraycopy(lineSeparator,0,buffer,pos,lineSeparator.length);pos+=lineSeparator.length;}} @AT@ 12091 @LENGTH@ 3202
------UPD IfStatement@@if (0 == modulus) {  return;} @TO@ if (0 == modulus && lineLength == 0) {  return;} @AT@ 12129 @LENGTH@ 84
---------DEL InfixExpression@@0 == modulus @AT@ 12133 @LENGTH@ 12
---------INS InfixExpression@@0 == modulus && lineLength == 0 @TO@ IfStatement@@if (0 == modulus) {  return;} @AT@ 12344 @LENGTH@ 31
------------INS InfixExpression@@0 == modulus @TO@ InfixExpression@@0 == modulus && lineLength == 0 @AT@ 12344 @LENGTH@ 12
---------------MOV NumberLiteral@@0 @TO@ InfixExpression@@0 == modulus @AT@ 12133 @LENGTH@ 1
---------------MOV Operator@@== @TO@ InfixExpression@@0 == modulus @AT@ 12134 @LENGTH@ 2
---------------MOV SimpleName@@modulus @TO@ InfixExpression@@0 == modulus @AT@ 12138 @LENGTH@ 7
------------INS Operator@@&& @TO@ InfixExpression@@0 == modulus && lineLength == 0 @AT@ 12356 @LENGTH@ 2
------------INS InfixExpression@@lineLength == 0 @TO@ InfixExpression@@0 == modulus && lineLength == 0 @AT@ 12360 @LENGTH@ 15
---------------INS SimpleName@@lineLength @TO@ InfixExpression@@lineLength == 0 @AT@ 12360 @LENGTH@ 10
---------------INS Operator@@== @TO@ InfixExpression@@lineLength == 0 @AT@ 12370 @LENGTH@ 2
---------------INS NumberLiteral@@0 @TO@ InfixExpression@@lineLength == 0 @AT@ 12374 @LENGTH@ 1
------INS VariableDeclarationStatement@@int savedPos=pos; @TO@ Block@@ThenBody:{  eof=true;  if (0 == modulus) {    return;  }  ensureBufferSize(encodeSize);switch (modulus) {case 1:    buffer[pos++]=encodeTable[(int)(bitWorkArea >> 3) & MASK_5BITS];  buffer[pos++]=encodeTable[(int)(bitWorkArea << 2) & MASK_5BITS];buffer[pos++]=PAD;buffer[pos++]=PAD;buffer[pos++]=PAD;buffer[pos++]=PAD;buffer[pos++]=PAD;buffer[pos++]=PAD;break;case 2:buffer[pos++]=encodeTable[(int)(bitWorkArea >> 11) & MASK_5BITS];buffer[pos++]=encodeTable[(int)(bitWorkArea >> 6) & MASK_5BITS];buffer[pos++]=encodeTable[(int)(bitWorkArea >> 1) & MASK_5BITS];buffer[pos++]=encodeTable[(int)(bitWorkArea << 4) & MASK_5BITS];buffer[pos++]=PAD;buffer[pos++]=PAD;buffer[pos++]=PAD;buffer[pos++]=PAD;break;case 3:buffer[pos++]=encodeTable[(int)(bitWorkArea >> 19) & MASK_5BITS];buffer[pos++]=encodeTable[(int)(bitWorkArea >> 14) & MASK_5BITS];buffer[pos++]=encodeTable[(int)(bitWorkArea >> 9) & MASK_5BITS];buffer[pos++]=encodeTable[(int)(bitWorkArea >> 4) & MASK_5BITS];buffer[pos++]=encodeTable[(int)(bitWorkArea << 1) & MASK_5BITS];buffer[pos++]=PAD;buffer[pos++]=PAD;buffer[pos++]=PAD;break;case 4:buffer[pos++]=encodeTable[(int)(bitWorkArea >> 27) & MASK_5BITS];buffer[pos++]=encodeTable[(int)(bitWorkArea >> 22) & MASK_5BITS];buffer[pos++]=encodeTable[(int)(bitWorkArea >> 17) & MASK_5BITS];buffer[pos++]=encodeTable[(int)(bitWorkArea >> 12) & MASK_5BITS];buffer[pos++]=encodeTable[(int)(bitWorkArea >> 7) & MASK_5BITS];buffer[pos++]=encodeTable[(int)(bitWorkArea >> 2) & MASK_5BITS];buffer[pos++]=encodeTable[(int)(bitWorkArea << 3) & MASK_5BITS];buffer[pos++]=PAD;break;}if (lineLength > 0) {System.arraycopy(lineSeparator,0,buffer,pos,lineSeparator.length);pos+=lineSeparator.length;}} @AT@ 12521 @LENGTH@ 19
---------INS PrimitiveType@@int @TO@ VariableDeclarationStatement@@int savedPos=pos; @AT@ 12521 @LENGTH@ 3
---------INS VariableDeclarationFragment@@savedPos=pos @TO@ VariableDeclarationStatement@@int savedPos=pos; @AT@ 12525 @LENGTH@ 14
------------INS SimpleName@@savedPos @TO@ VariableDeclarationFragment@@savedPos=pos @AT@ 12525 @LENGTH@ 8
------------INS SimpleName@@pos @TO@ VariableDeclarationFragment@@savedPos=pos @AT@ 12536 @LENGTH@ 3
------UPD IfStatement@@if (lineLength > 0) {  System.arraycopy(lineSeparator,0,buffer,pos,lineSeparator.length);  pos+=lineSeparator.length;} @TO@ if (lineLength > 0 && currentLinePos > 0) {  System.arraycopy(lineSeparator,0,buffer,pos,lineSeparator.length);  pos+=lineSeparator.length;} @AT@ 15070 @LENGTH@ 201
---------DEL InfixExpression@@lineLength > 0 @AT@ 15074 @LENGTH@ 14
---------INS InfixExpression@@lineLength > 0 && currentLinePos > 0 @TO@ IfStatement@@if (lineLength > 0) {  System.arraycopy(lineSeparator,0,buffer,pos,lineSeparator.length);  pos+=lineSeparator.length;} @AT@ 15527 @LENGTH@ 36
------------INS InfixExpression@@lineLength > 0 @TO@ InfixExpression@@lineLength > 0 && currentLinePos > 0 @AT@ 15527 @LENGTH@ 14
---------------MOV SimpleName@@lineLength @TO@ InfixExpression@@lineLength > 0 @AT@ 15074 @LENGTH@ 10
---------------MOV Operator@@> @TO@ InfixExpression@@lineLength > 0 @AT@ 15084 @LENGTH@ 1
---------------MOV NumberLiteral@@0 @TO@ InfixExpression@@lineLength > 0 @AT@ 15087 @LENGTH@ 1
------------INS Operator@@&& @TO@ InfixExpression@@lineLength > 0 && currentLinePos > 0 @AT@ 15541 @LENGTH@ 2
------------INS InfixExpression@@currentLinePos > 0 @TO@ InfixExpression@@lineLength > 0 && currentLinePos > 0 @AT@ 15545 @LENGTH@ 18
---------------INS SimpleName@@currentLinePos @TO@ InfixExpression@@currentLinePos > 0 @AT@ 15545 @LENGTH@ 14
---------------INS Operator@@> @TO@ InfixExpression@@currentLinePos > 0 @AT@ 15559 @LENGTH@ 1
---------------INS NumberLiteral@@0 @TO@ InfixExpression@@currentLinePos > 0 @AT@ 15562 @LENGTH@ 1
------INS ExpressionStatement@@Assignment:currentLinePos+=pos - savedPos @TO@ Block@@ThenBody:{  eof=true;  if (0 == modulus) {    return;  }  ensureBufferSize(encodeSize);switch (modulus) {case 1:    buffer[pos++]=encodeTable[(int)(bitWorkArea >> 3) & MASK_5BITS];  buffer[pos++]=encodeTable[(int)(bitWorkArea << 2) & MASK_5BITS];buffer[pos++]=PAD;buffer[pos++]=PAD;buffer[pos++]=PAD;buffer[pos++]=PAD;buffer[pos++]=PAD;buffer[pos++]=PAD;break;case 2:buffer[pos++]=encodeTable[(int)(bitWorkArea >> 11) & MASK_5BITS];buffer[pos++]=encodeTable[(int)(bitWorkArea >> 6) & MASK_5BITS];buffer[pos++]=encodeTable[(int)(bitWorkArea >> 1) & MASK_5BITS];buffer[pos++]=encodeTable[(int)(bitWorkArea << 4) & MASK_5BITS];buffer[pos++]=PAD;buffer[pos++]=PAD;buffer[pos++]=PAD;buffer[pos++]=PAD;break;case 3:buffer[pos++]=encodeTable[(int)(bitWorkArea >> 19) & MASK_5BITS];buffer[pos++]=encodeTable[(int)(bitWorkArea >> 14) & MASK_5BITS];buffer[pos++]=encodeTable[(int)(bitWorkArea >> 9) & MASK_5BITS];buffer[pos++]=encodeTable[(int)(bitWorkArea >> 4) & MASK_5BITS];buffer[pos++]=encodeTable[(int)(bitWorkArea << 1) & MASK_5BITS];buffer[pos++]=PAD;buffer[pos++]=PAD;buffer[pos++]=PAD;break;case 4:buffer[pos++]=encodeTable[(int)(bitWorkArea >> 27) & MASK_5BITS];buffer[pos++]=encodeTable[(int)(bitWorkArea >> 22) & MASK_5BITS];buffer[pos++]=encodeTable[(int)(bitWorkArea >> 17) & MASK_5BITS];buffer[pos++]=encodeTable[(int)(bitWorkArea >> 12) & MASK_5BITS];buffer[pos++]=encodeTable[(int)(bitWorkArea >> 7) & MASK_5BITS];buffer[pos++]=encodeTable[(int)(bitWorkArea >> 2) & MASK_5BITS];buffer[pos++]=encodeTable[(int)(bitWorkArea << 3) & MASK_5BITS];buffer[pos++]=PAD;break;}if (lineLength > 0) {System.arraycopy(lineSeparator,0,buffer,pos,lineSeparator.length);pos+=lineSeparator.length;}} @AT@ 15355 @LENGTH@ 33
---------INS Assignment@@currentLinePos+=pos - savedPos @TO@ ExpressionStatement@@Assignment:currentLinePos+=pos - savedPos @AT@ 15355 @LENGTH@ 32
------------INS SimpleName@@currentLinePos @TO@ Assignment@@currentLinePos+=pos - savedPos @AT@ 15355 @LENGTH@ 14
------------INS Operator@@+= @TO@ Assignment@@currentLinePos+=pos - savedPos @AT@ 15369 @LENGTH@ 2
------------INS InfixExpression@@pos - savedPos @TO@ Assignment@@currentLinePos+=pos - savedPos @AT@ 15373 @LENGTH@ 14
---------------INS SimpleName@@pos @TO@ InfixExpression@@pos - savedPos @AT@ 15373 @LENGTH@ 3
---------------INS Operator@@- @TO@ InfixExpression@@pos - savedPos @AT@ 15376 @LENGTH@ 1
---------------INS SimpleName@@savedPos @TO@ InfixExpression@@pos - savedPos @AT@ 15379 @LENGTH@ 8
---UPD Block@@ElseBody:{  for (int i=0; i < inAvail; i++) {    ensureBufferSize(encodeSize);    modulus=(++modulus) % BITS_PER_ENCODED_BYTE;    int b=in[inPos++];    if (b < 0) {      b+=256;    }    bitWorkArea=(bitWorkArea << 8) + b;    if (0 == modulus) {      buffer[pos++]=encodeTable[(int)(bitWorkArea >> 35) & MASK_5BITS];      buffer[pos++]=encodeTable[(int)(bitWorkArea >> 30) & MASK_5BITS];      buffer[pos++]=encodeTable[(int)(bitWorkArea >> 25) & MASK_5BITS];      buffer[pos++]=encodeTable[(int)(bitWorkArea >> 20) & MASK_5BITS];      buffer[pos++]=encodeTable[(int)(bitWorkArea >> 15) & MASK_5BITS];      buffer[pos++]=encodeTable[(int)(bitWorkArea >> 10) & MASK_5BITS];      buffer[pos++]=encodeTable[(int)(bitWorkArea >> 5) & MASK_5BITS];      buffer[pos++]=encodeTable[(int)bitWorkArea & MASK_5BITS];      currentLinePos+=BYTES_PER_ENCODED_BLOCK;      if (lineLength > 0 && lineLength <= currentLinePos) {        System.arraycopy(lineSeparator,0,buffer,pos,lineSeparator.length);        pos+=lineSeparator.length;        currentLinePos=0;      }    }  }} @TO@ ElseBody:{  for (int i=0; i < inAvail; i++) {    ensureBufferSize(encodeSize);    modulus=(++modulus) % BYTES_PER_UNENCODED_BLOCK;    int b=in[inPos++];    if (b < 0) {      b+=256;    }    bitWorkArea=(bitWorkArea << 8) + b;    if (0 == modulus) {      buffer[pos++]=encodeTable[(int)(bitWorkArea >> 35) & MASK_5BITS];      buffer[pos++]=encodeTable[(int)(bitWorkArea >> 30) & MASK_5BITS];      buffer[pos++]=encodeTable[(int)(bitWorkArea >> 25) & MASK_5BITS];      buffer[pos++]=encodeTable[(int)(bitWorkArea >> 20) & MASK_5BITS];      buffer[pos++]=encodeTable[(int)(bitWorkArea >> 15) & MASK_5BITS];      buffer[pos++]=encodeTable[(int)(bitWorkArea >> 10) & MASK_5BITS];      buffer[pos++]=encodeTable[(int)(bitWorkArea >> 5) & MASK_5BITS];      buffer[pos++]=encodeTable[(int)bitWorkArea & MASK_5BITS];      currentLinePos+=BYTES_PER_ENCODED_BLOCK;      if (lineLength > 0 && lineLength <= currentLinePos) {        System.arraycopy(lineSeparator,0,buffer,pos,lineSeparator.length);        pos+=lineSeparator.length;        currentLinePos=0;      }    }  }} @AT@ 15299 @LENGTH@ 1502
------UPD ForStatement@@for (int i=0; i < inAvail; i++) {  ensureBufferSize(encodeSize);  modulus=(++modulus) % BITS_PER_ENCODED_BYTE;  int b=in[inPos++];  if (b < 0) {    b+=256;  }  bitWorkArea=(bitWorkArea << 8) + b;  if (0 == modulus) {    buffer[pos++]=encodeTable[(int)(bitWorkArea >> 35) & MASK_5BITS];    buffer[pos++]=encodeTable[(int)(bitWorkArea >> 30) & MASK_5BITS];    buffer[pos++]=encodeTable[(int)(bitWorkArea >> 25) & MASK_5BITS];    buffer[pos++]=encodeTable[(int)(bitWorkArea >> 20) & MASK_5BITS];    buffer[pos++]=encodeTable[(int)(bitWorkArea >> 15) & MASK_5BITS];    buffer[pos++]=encodeTable[(int)(bitWorkArea >> 10) & MASK_5BITS];    buffer[pos++]=encodeTable[(int)(bitWorkArea >> 5) & MASK_5BITS];    buffer[pos++]=encodeTable[(int)bitWorkArea & MASK_5BITS];    currentLinePos+=BYTES_PER_ENCODED_BLOCK;    if (lineLength > 0 && lineLength <= currentLinePos) {      System.arraycopy(lineSeparator,0,buffer,pos,lineSeparator.length);      pos+=lineSeparator.length;      currentLinePos=0;    }  }} @TO@ for (int i=0; i < inAvail; i++) {  ensureBufferSize(encodeSize);  modulus=(++modulus) % BYTES_PER_UNENCODED_BLOCK;  int b=in[inPos++];  if (b < 0) {    b+=256;  }  bitWorkArea=(bitWorkArea << 8) + b;  if (0 == modulus) {    buffer[pos++]=encodeTable[(int)(bitWorkArea >> 35) & MASK_5BITS];    buffer[pos++]=encodeTable[(int)(bitWorkArea >> 30) & MASK_5BITS];    buffer[pos++]=encodeTable[(int)(bitWorkArea >> 25) & MASK_5BITS];    buffer[pos++]=encodeTable[(int)(bitWorkArea >> 20) & MASK_5BITS];    buffer[pos++]=encodeTable[(int)(bitWorkArea >> 15) & MASK_5BITS];    buffer[pos++]=encodeTable[(int)(bitWorkArea >> 10) & MASK_5BITS];    buffer[pos++]=encodeTable[(int)(bitWorkArea >> 5) & MASK_5BITS];    buffer[pos++]=encodeTable[(int)bitWorkArea & MASK_5BITS];    currentLinePos+=BYTES_PER_ENCODED_BLOCK;    if (lineLength > 0 && lineLength <= currentLinePos) {      System.arraycopy(lineSeparator,0,buffer,pos,lineSeparator.length);      pos+=lineSeparator.length;      currentLinePos=0;    }  }} @AT@ 15313 @LENGTH@ 1478
---------UPD ExpressionStatement@@Assignment:modulus=(++modulus) % BITS_PER_ENCODED_BYTE @TO@ Assignment:modulus=(++modulus) % BYTES_PER_UNENCODED_BLOCK @AT@ 15411 @LENGTH@ 46
------------UPD Assignment@@modulus=(++modulus) % BITS_PER_ENCODED_BYTE @TO@ modulus=(++modulus) % BYTES_PER_UNENCODED_BLOCK @AT@ 15411 @LENGTH@ 45
---------------UPD InfixExpression@@(++modulus) % BITS_PER_ENCODED_BYTE @TO@ (++modulus) % BYTES_PER_UNENCODED_BLOCK @AT@ 15421 @LENGTH@ 35
------------------UPD SimpleName@@BITS_PER_ENCODED_BYTE @TO@ BYTES_PER_UNENCODED_BLOCK @AT@ 15435 @LENGTH@ 21


INS IfStatement@@if (value == null) {  return null;} @TO@ MethodDeclaration@@public, AttachmentList<T>, MethodName:cast, final Object value,  @AT@ 1415 @LENGTH@ 55
---INS InfixExpression@@value == null @TO@ IfStatement@@if (value == null) {  return null;} @AT@ 1419 @LENGTH@ 13
------INS SimpleName@@value @TO@ InfixExpression@@value == null @AT@ 1419 @LENGTH@ 5
------INS Operator@@== @TO@ InfixExpression@@value == null @AT@ 1424 @LENGTH@ 2
------INS NullLiteral@@null @TO@ InfixExpression@@value == null @AT@ 1428 @LENGTH@ 4
---INS Block@@ThenBody:{  return null;} @TO@ IfStatement@@if (value == null) {  return null;} @AT@ 1434 @LENGTH@ 36
------INS ReturnStatement@@NullLiteral:null @TO@ Block@@ThenBody:{  return null;} @AT@ 1448 @LENGTH@ 12
---------INS NullLiteral@@null @TO@ ReturnStatement@@NullLiteral:null @AT@ 1455 @LENGTH@ 4


UPD MethodDeclaration@@public, boolean, MethodName:canAppearNext, CommandContext ctx,  @TO@ public, boolean, MethodName:canAppearNext, CommandContext ctx, CommandFormatException,  @AT@ 5228 @LENGTH@ 667
---INS SimpleType@@CommandFormatException @TO@ MethodDeclaration@@public, boolean, MethodName:canAppearNext, CommandContext ctx,  @AT@ 5314 @LENGTH@ 22


INS FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @TO@ TypeDeclaration@@[public]ContextPropagatingRemoteInvocation, RemoteInvocation @AT@ 2116 @LENGTH@ 90
---INS Modifier@@private @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @AT@ 2116 @LENGTH@ 7
---INS Modifier@@static @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @AT@ 2124 @LENGTH@ 6
---INS Modifier@@final @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @AT@ 2131 @LENGTH@ 5
---INS PrimitiveType@@long @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @AT@ 2137 @LENGTH@ 4
---INS VariableDeclarationFragment@@serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @AT@ 2142 @LENGTH@ 63
------INS SimpleName@@serialVersionUID @TO@ VariableDeclarationFragment@@serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID @AT@ 2142 @LENGTH@ 16
------INS QualifiedName@@SpringSecurityCoreVersion.SERIAL_VERSION_UID @TO@ VariableDeclarationFragment@@serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID @AT@ 2161 @LENGTH@ 44
---------INS SimpleName@@SpringSecurityCoreVersion @TO@ QualifiedName@@SpringSecurityCoreVersion.SERIAL_VERSION_UID @AT@ 2161 @LENGTH@ 25
---------INS SimpleName@@SERIAL_VERSION_UID @TO@ QualifiedName@@SpringSecurityCoreVersion.SERIAL_VERSION_UID @AT@ 2187 @LENGTH@ 18


UPD IfStatement@@if (initialValue == null || this.operations.get(redisCounter) == null) {  set(0);} else {  set(initialValue);} @TO@ if (initialValue == null) {  if (this.operations.get(redisCounter) == null) {    set(0);  }} else {  set(initialValue);} @AT@ 3054 @LENGTH@ 122
---DEL InfixExpression@@initialValue == null || this.operations.get(redisCounter) == null @AT@ 3058 @LENGTH@ 65
------DEL InfixExpression@@initialValue == null @AT@ 3058 @LENGTH@ 20
------DEL Operator@@|| @AT@ 3078 @LENGTH@ 2
---INS InfixExpression@@initialValue == null @TO@ IfStatement@@if (initialValue == null || this.operations.get(redisCounter) == null) {  set(0);} else {  set(initialValue);} @AT@ 3058 @LENGTH@ 20
------MOV SimpleName@@initialValue @TO@ InfixExpression@@initialValue == null @AT@ 3058 @LENGTH@ 12
------MOV Operator@@== @TO@ InfixExpression@@initialValue == null @AT@ 3070 @LENGTH@ 2
------MOV NullLiteral@@null @TO@ InfixExpression@@initialValue == null @AT@ 3074 @LENGTH@ 4
---INS Block@@ThenBody:{  if (this.operations.get(redisCounter) == null) {    set(0);  }} @TO@ IfStatement@@if (initialValue == null || this.operations.get(redisCounter) == null) {  set(0);} else {  set(initialValue);} @AT@ 3080 @LENGTH@ 74
------INS IfStatement@@if (this.operations.get(redisCounter) == null) {  set(0);} @TO@ Block@@ThenBody:{  if (this.operations.get(redisCounter) == null) {    set(0);  }} @AT@ 3085 @LENGTH@ 65
---------MOV InfixExpression@@this.operations.get(redisCounter) == null @TO@ IfStatement@@if (this.operations.get(redisCounter) == null) {  set(0);} @AT@ 3082 @LENGTH@ 41
---------MOV Block@@ThenBody:{  set(0);} @TO@ IfStatement@@if (this.operations.get(redisCounter) == null) {  set(0);} @AT@ 3125 @LENGTH@ 16


INS MethodDeclaration@@public, void, MethodName:setUp, Exception,  @TO@ TypeDeclaration@@[public]MailCommitOnCompletionTest, CamelTestSupport @AT@ 1435 @LENGTH@ 93
---INS Modifier@@public @TO@ MethodDeclaration@@public, void, MethodName:setUp, Exception,  @AT@ 1435 @LENGTH@ 6
---INS PrimitiveType@@void @TO@ MethodDeclaration@@public, void, MethodName:setUp, Exception,  @AT@ 1442 @LENGTH@ 4
---INS SimpleName@@MethodName:setUp @TO@ MethodDeclaration@@public, void, MethodName:setUp, Exception,  @AT@ 1447 @LENGTH@ 5
---INS SimpleType@@Exception @TO@ MethodDeclaration@@public, void, MethodName:setUp, Exception,  @AT@ 1462 @LENGTH@ 9
---INS ExpressionStatement@@MethodInvocation:prepareMailbox() @TO@ MethodDeclaration@@public, void, MethodName:setUp, Exception,  @AT@ 1482 @LENGTH@ 17
------INS MethodInvocation@@MethodName:prepareMailbox:[] @TO@ ExpressionStatement@@MethodInvocation:prepareMailbox() @AT@ 1482 @LENGTH@ 16
---INS ExpressionStatement@@SuperMethodInvocation:super.setUp() @TO@ MethodDeclaration@@public, void, MethodName:setUp, Exception,  @AT@ 1508 @LENGTH@ 14
------INS SuperMethodInvocation@@super.setUp() @TO@ ExpressionStatement@@SuperMethodInvocation:super.setUp() @AT@ 1508 @LENGTH@ 13
---------INS SimpleName@@MethodName:setUp:[] @TO@ SuperMethodInvocation@@super.setUp() @AT@ 1514 @LENGTH@ 5


INS MethodDeclaration@@public, String, MethodName:toString,  @TO@ TypeDeclaration@@[public]Person,  @AT@ 3499 @LENGTH@ 89
---INS Modifier@@public @TO@ MethodDeclaration@@public, String, MethodName:toString,  @AT@ 3499 @LENGTH@ 6
---INS SimpleType@@String @TO@ MethodDeclaration@@public, String, MethodName:toString,  @AT@ 3506 @LENGTH@ 6
---INS SimpleName@@MethodName:toString @TO@ MethodDeclaration@@public, String, MethodName:toString,  @AT@ 3513 @LENGTH@ 8
---INS ReturnStatement@@MethodInvocation:String.format("%s %s",firstname,lastname) @TO@ MethodDeclaration@@public, String, MethodName:toString,  @AT@ 3531 @LENGTH@ 51
------INS MethodInvocation@@String.format("%s %s",firstname,lastname) @TO@ ReturnStatement@@MethodInvocation:String.format("%s %s",firstname,lastname) @AT@ 3538 @LENGTH@ 43
---------INS SimpleName@@Name:String @TO@ MethodInvocation@@String.format("%s %s",firstname,lastname) @AT@ 3538 @LENGTH@ 6
---------INS SimpleName@@MethodName:format:["%s %s", firstname, lastname] @TO@ MethodInvocation@@String.format("%s %s",firstname,lastname) @AT@ 3545 @LENGTH@ 36
------------INS StringLiteral@@"%s %s" @TO@ SimpleName@@MethodName:format:["%s %s", firstname, lastname] @AT@ 3552 @LENGTH@ 7
------------INS SimpleName@@firstname @TO@ SimpleName@@MethodName:format:["%s %s", firstname, lastname] @AT@ 3561 @LENGTH@ 9
------------INS SimpleName@@lastname @TO@ SimpleName@@MethodName:format:["%s %s", firstname, lastname] @AT@ 3572 @LENGTH@ 8


UPD VariableDeclarationStatement@@JmsMessage out=(JmsMessage)exchange.getOut(); @TO@ JmsMessage out=exchange.getOut(JmsMessage.class); @AT@ 16569 @LENGTH@ 48
---UPD VariableDeclarationFragment@@out=(JmsMessage)exchange.getOut() @TO@ out=exchange.getOut(JmsMessage.class) @AT@ 16580 @LENGTH@ 36
------INS MethodInvocation@@exchange.getOut(JmsMessage.class) @TO@ VariableDeclarationFragment@@out=(JmsMessage)exchange.getOut() @AT@ 16586 @LENGTH@ 33
---------MOV SimpleName@@Name:exchange @TO@ MethodInvocation@@exchange.getOut(JmsMessage.class) @AT@ 16599 @LENGTH@ 8
---------MOV SimpleName@@MethodName:getOut:[] @TO@ MethodInvocation@@exchange.getOut(JmsMessage.class) @AT@ 16608 @LENGTH@ 8
------------INS TypeLiteral@@JmsMessage.class @TO@ SimpleName@@MethodName:getOut:[] @AT@ 16602 @LENGTH@ 16
------DEL CastExpression@@(JmsMessage)exchange.getOut() @AT@ 16586 @LENGTH@ 30
---------DEL SimpleType@@JmsMessage @AT@ 16587 @LENGTH@ 10
---------DEL MethodInvocation@@exchange.getOut() @AT@ 16599 @LENGTH@ 17


UPD ExpressionStatement@@MethodInvocation:from("jms:queue:order").to("bean:validateOrder").to("mock:validate").threads(20).unmarshal(mySecureDataFormat).delay(500).to("bean:handleOrder").to("mock:order") @TO@ MethodInvocation:from("jms:queue:order").to("bean:validateOrder").to("mock:validate").threads(20).unmarshal(mySecureDataFormat).delay(1000).to("bean:handleOrder").to("mock:order") @AT@ 3719 @LENGTH@ 798
---UPD MethodInvocation@@from("jms:queue:order").to("bean:validateOrder").to("mock:validate").threads(20).unmarshal(mySecureDataFormat).delay(500).to("bean:handleOrder").to("mock:order") @TO@ from("jms:queue:order").to("bean:validateOrder").to("mock:validate").threads(20).unmarshal(mySecureDataFormat).delay(1000).to("bean:handleOrder").to("mock:order") @AT@ 3719 @LENGTH@ 797
------UPD MethodInvocation@@MethodName:delay:[500] @TO@ MethodName:delay:[1000] @AT@ 3719 @LENGTH@ 757
---------UPD NumberLiteral@@500 @TO@ 1000 @AT@ 4472 @LENGTH@ 3


INS ExpressionStatement@@MethodInvocation:deployers.get(Phase.DEPENDENCIES).add(new RegisteredProcessor(Phase.DEPENDENCIES_SUB_DEPLOYMENTS,new SubDeploymentDependencyProcessor())) @TO@ MethodDeclaration@@public, synchronized, void, MethodName:start, final StartContext context, StartException,  @AT@ 12233 @LENGTH@ 139
---INS MethodInvocation@@deployers.get(Phase.DEPENDENCIES).add(new RegisteredProcessor(Phase.DEPENDENCIES_SUB_DEPLOYMENTS,new SubDeploymentDependencyProcessor())) @TO@ ExpressionStatement@@MethodInvocation:deployers.get(Phase.DEPENDENCIES).add(new RegisteredProcessor(Phase.DEPENDENCIES_SUB_DEPLOYMENTS,new SubDeploymentDependencyProcessor())) @AT@ 12233 @LENGTH@ 138
------INS MethodInvocation@@MethodName:get:[Phase.DEPENDENCIES] @TO@ MethodInvocation@@deployers.get(Phase.DEPENDENCIES).add(new RegisteredProcessor(Phase.DEPENDENCIES_SUB_DEPLOYMENTS,new SubDeploymentDependencyProcessor())) @AT@ 12233 @LENGTH@ 33
---------INS QualifiedName@@Phase.DEPENDENCIES @TO@ MethodInvocation@@MethodName:get:[Phase.DEPENDENCIES] @AT@ 12247 @LENGTH@ 18
------------INS SimpleName@@Phase @TO@ QualifiedName@@Phase.DEPENDENCIES @AT@ 12247 @LENGTH@ 5
------------INS SimpleName@@DEPENDENCIES @TO@ QualifiedName@@Phase.DEPENDENCIES @AT@ 12253 @LENGTH@ 12
------INS SimpleName@@Name:deployers @TO@ MethodInvocation@@deployers.get(Phase.DEPENDENCIES).add(new RegisteredProcessor(Phase.DEPENDENCIES_SUB_DEPLOYMENTS,new SubDeploymentDependencyProcessor())) @AT@ 12233 @LENGTH@ 9
------INS SimpleName@@MethodName:add:[new RegisteredProcessor(Phase.DEPENDENCIES_SUB_DEPLOYMENTS,new SubDeploymentDependencyProcessor())] @TO@ MethodInvocation@@deployers.get(Phase.DEPENDENCIES).add(new RegisteredProcessor(Phase.DEPENDENCIES_SUB_DEPLOYMENTS,new SubDeploymentDependencyProcessor())) @AT@ 12267 @LENGTH@ 104
---------INS ClassInstanceCreation@@RegisteredProcessor[Phase.DEPENDENCIES_SUB_DEPLOYMENTS, new SubDeploymentDependencyProcessor()] @TO@ SimpleName@@MethodName:add:[new RegisteredProcessor(Phase.DEPENDENCIES_SUB_DEPLOYMENTS,new SubDeploymentDependencyProcessor())] @AT@ 12271 @LENGTH@ 99
------------INS New@@new @TO@ ClassInstanceCreation@@RegisteredProcessor[Phase.DEPENDENCIES_SUB_DEPLOYMENTS, new SubDeploymentDependencyProcessor()] @AT@ 12271 @LENGTH@ 3
------------INS SimpleType@@RegisteredProcessor @TO@ ClassInstanceCreation@@RegisteredProcessor[Phase.DEPENDENCIES_SUB_DEPLOYMENTS, new SubDeploymentDependencyProcessor()] @AT@ 12275 @LENGTH@ 19
------------INS QualifiedName@@Phase.DEPENDENCIES_SUB_DEPLOYMENTS @TO@ ClassInstanceCreation@@RegisteredProcessor[Phase.DEPENDENCIES_SUB_DEPLOYMENTS, new SubDeploymentDependencyProcessor()] @AT@ 12295 @LENGTH@ 34
---------------INS SimpleName@@Phase @TO@ QualifiedName@@Phase.DEPENDENCIES_SUB_DEPLOYMENTS @AT@ 12295 @LENGTH@ 5
---------------INS SimpleName@@DEPENDENCIES_SUB_DEPLOYMENTS @TO@ QualifiedName@@Phase.DEPENDENCIES_SUB_DEPLOYMENTS @AT@ 12301 @LENGTH@ 28
------------INS ClassInstanceCreation@@SubDeploymentDependencyProcessor[] @TO@ ClassInstanceCreation@@RegisteredProcessor[Phase.DEPENDENCIES_SUB_DEPLOYMENTS, new SubDeploymentDependencyProcessor()] @AT@ 12331 @LENGTH@ 38
---------------INS New@@new @TO@ ClassInstanceCreation@@SubDeploymentDependencyProcessor[] @AT@ 12331 @LENGTH@ 3
---------------INS SimpleType@@SubDeploymentDependencyProcessor @TO@ ClassInstanceCreation@@SubDeploymentDependencyProcessor[] @AT@ 12335 @LENGTH@ 32


INS MethodDeclaration@@public, void, MethodName:executesFindByNotNullLastnameCorrectly, Exception,  @TO@ TypeDeclaration@@[@RunWith(SpringJUnit4ClassRunner.class), @ContextConfiguration(locations={"classpath:application-context.xml"}), @Transactional, public]UserRepositoryTests,  @AT@ 20859 @LENGTH@ 290
---INS Modifier@@public @TO@ MethodDeclaration@@public, void, MethodName:executesFindByNotNullLastnameCorrectly, Exception,  @AT@ 20859 @LENGTH@ 6
---INS PrimitiveType@@void @TO@ MethodDeclaration@@public, void, MethodName:executesFindByNotNullLastnameCorrectly, Exception,  @AT@ 20866 @LENGTH@ 4
---INS SimpleName@@MethodName:executesFindByNotNullLastnameCorrectly @TO@ MethodDeclaration@@public, void, MethodName:executesFindByNotNullLastnameCorrectly, Exception,  @AT@ 20871 @LENGTH@ 38
---INS SimpleType@@Exception @TO@ MethodDeclaration@@public, void, MethodName:executesFindByNotNullLastnameCorrectly, Exception,  @AT@ 20919 @LENGTH@ 9
---INS ExpressionStatement@@MethodInvocation:flushTestUsers() @TO@ MethodDeclaration@@public, void, MethodName:executesFindByNotNullLastnameCorrectly, Exception,  @AT@ 20942 @LENGTH@ 17
------INS MethodInvocation@@MethodName:flushTestUsers:[] @TO@ ExpressionStatement@@MethodInvocation:flushTestUsers() @AT@ 20942 @LENGTH@ 16
---INS VariableDeclarationStatement@@List<User> result=repository.findByLastnameNotNull(); @TO@ MethodDeclaration@@public, void, MethodName:executesFindByNotNullLastnameCorrectly, Exception,  @AT@ 20969 @LENGTH@ 55
------INS ParameterizedType@@List<User> @TO@ VariableDeclarationStatement@@List<User> result=repository.findByLastnameNotNull(); @AT@ 20969 @LENGTH@ 10
---------INS SimpleType@@List @TO@ ParameterizedType@@List<User> @AT@ 20969 @LENGTH@ 4
---------INS SimpleType@@User @TO@ ParameterizedType@@List<User> @AT@ 20974 @LENGTH@ 4
------INS VariableDeclarationFragment@@result=repository.findByLastnameNotNull() @TO@ VariableDeclarationStatement@@List<User> result=repository.findByLastnameNotNull(); @AT@ 20980 @LENGTH@ 43
---------INS SimpleName@@result @TO@ VariableDeclarationFragment@@result=repository.findByLastnameNotNull() @AT@ 20980 @LENGTH@ 6
---------INS MethodInvocation@@repository.findByLastnameNotNull() @TO@ VariableDeclarationFragment@@result=repository.findByLastnameNotNull() @AT@ 20989 @LENGTH@ 34
------------INS SimpleName@@Name:repository @TO@ MethodInvocation@@repository.findByLastnameNotNull() @AT@ 20989 @LENGTH@ 10
------------INS SimpleName@@MethodName:findByLastnameNotNull:[] @TO@ MethodInvocation@@repository.findByLastnameNotNull() @AT@ 21000 @LENGTH@ 23
---INS ExpressionStatement@@MethodInvocation:assertThat(result.size(),is(3)) @TO@ MethodDeclaration@@public, void, MethodName:executesFindByNotNullLastnameCorrectly, Exception,  @AT@ 21036 @LENGTH@ 33
------INS MethodInvocation@@assertThat(result.size(),is(3)) @TO@ ExpressionStatement@@MethodInvocation:assertThat(result.size(),is(3)) @AT@ 21036 @LENGTH@ 32
---------INS SimpleName@@MethodName:assertThat:[result.size(), is(3)] @TO@ MethodInvocation@@assertThat(result.size(),is(3)) @AT@ 21036 @LENGTH@ 32
------------INS MethodInvocation@@result.size() @TO@ SimpleName@@MethodName:assertThat:[result.size(), is(3)] @AT@ 21047 @LENGTH@ 13
---------------INS SimpleName@@Name:result @TO@ MethodInvocation@@result.size() @AT@ 21047 @LENGTH@ 6
---------------INS SimpleName@@MethodName:size:[] @TO@ MethodInvocation@@result.size() @AT@ 21054 @LENGTH@ 6
------------INS MethodInvocation@@is(3) @TO@ SimpleName@@MethodName:assertThat:[result.size(), is(3)] @AT@ 21062 @LENGTH@ 5
---------------INS SimpleName@@MethodName:is:[3] @TO@ MethodInvocation@@is(3) @AT@ 21062 @LENGTH@ 5
------------------INS NumberLiteral@@3 @TO@ SimpleName@@MethodName:is:[3] @AT@ 21065 @LENGTH@ 1
---------------INS SimpleName@@MethodName:is:[3] @TO@ MethodInvocation@@is(3) @AT@ 21062 @LENGTH@ 5
------------------INS NumberLiteral@@3 @TO@ SimpleName@@MethodName:is:[3] @AT@ 21065 @LENGTH@ 1
---INS ExpressionStatement@@MethodInvocation:assertThat(result,hasItems(firstUser,secondUser,thirdUser)) @TO@ MethodDeclaration@@public, void, MethodName:executesFindByNotNullLastnameCorrectly, Exception,  @AT@ 21079 @LENGTH@ 63
------INS MethodInvocation@@assertThat(result,hasItems(firstUser,secondUser,thirdUser)) @TO@ ExpressionStatement@@MethodInvocation:assertThat(result,hasItems(firstUser,secondUser,thirdUser)) @AT@ 21079 @LENGTH@ 62
---------INS SimpleName@@MethodName:assertThat:[result, hasItems(firstUser,secondUser,thirdUser)] @TO@ MethodInvocation@@assertThat(result,hasItems(firstUser,secondUser,thirdUser)) @AT@ 21079 @LENGTH@ 62
------------INS SimpleName@@result @TO@ SimpleName@@MethodName:assertThat:[result, hasItems(firstUser,secondUser,thirdUser)] @AT@ 21090 @LENGTH@ 6
------------INS MethodInvocation@@hasItems(firstUser,secondUser,thirdUser) @TO@ SimpleName@@MethodName:assertThat:[result, hasItems(firstUser,secondUser,thirdUser)] @AT@ 21098 @LENGTH@ 42
---------------INS SimpleName@@MethodName:hasItems:[firstUser, secondUser, thirdUser] @TO@ MethodInvocation@@hasItems(firstUser,secondUser,thirdUser) @AT@ 21098 @LENGTH@ 42
------------------INS SimpleName@@firstUser @TO@ SimpleName@@MethodName:hasItems:[firstUser, secondUser, thirdUser] @AT@ 21107 @LENGTH@ 9
------------------INS SimpleName@@secondUser @TO@ SimpleName@@MethodName:hasItems:[firstUser, secondUser, thirdUser] @AT@ 21118 @LENGTH@ 10
------------------INS SimpleName@@thirdUser @TO@ SimpleName@@MethodName:hasItems:[firstUser, secondUser, thirdUser] @AT@ 21130 @LENGTH@ 9
---------------INS SimpleName@@MethodName:hasItems:[firstUser, secondUser, thirdUser] @TO@ MethodInvocation@@hasItems(firstUser,secondUser,thirdUser) @AT@ 21098 @LENGTH@ 42
------------------INS SimpleName@@firstUser @TO@ SimpleName@@MethodName:hasItems:[firstUser, secondUser, thirdUser] @AT@ 21107 @LENGTH@ 9
------------------INS SimpleName@@secondUser @TO@ SimpleName@@MethodName:hasItems:[firstUser, secondUser, thirdUser] @AT@ 21118 @LENGTH@ 10
------------------INS SimpleName@@thirdUser @TO@ SimpleName@@MethodName:hasItems:[firstUser, secondUser, thirdUser] @AT@ 21130 @LENGTH@ 9


UPD EnhancedForStatement@@for (String uniqueName : deploymentNames) {  ModelNode deployment=modelNode.get(uniqueName);  String runtimeName=deployment.get(RUNTIME_NAME).asString();  String sha1=HashUtil.bytesToHexString(deployment.get(HASH).asBytes());  boolean enabled=deployment.get(ENABLED).asBoolean();  writer.writeStartElement(Element.DEPLOYMENT.getLocalName());  writeAttribute(writer,Attribute.NAME,uniqueName);  writeAttribute(writer,Attribute.RUNTIME_NAME,runtimeName);  writeAttribute(writer,Attribute.SHA1,sha1);  if (!enabled) {    writeAttribute(writer,Attribute.ENABLED,"false");  }  writer.writeEndElement();} @TO@ for (String uniqueName : deploymentNames) {  final ModelNode deployment=modelNode.get(uniqueName);  final String runtimeName=deployment.get(RUNTIME_NAME).asString();  boolean enabled=deployment.get(ENABLED).asBoolean();  writer.writeStartElement(Element.DEPLOYMENT.getLocalName());  writeAttribute(writer,Attribute.NAME,uniqueName);  writeAttribute(writer,Attribute.RUNTIME_NAME,runtimeName);  if (!enabled) {    writeAttribute(writer,Attribute.ENABLED,"false");  }  final List<ModelNode> contentItems=deployment.require(CONTENT).asList();  for (  ModelNode contentItem : contentItems) {    writeContentItem(writer,contentItem);  }  writer.writeEndElement();} @AT@ 20531 @LENGTH@ 810
---UPD VariableDeclarationStatement@@ModelNode deployment=modelNode.get(uniqueName); @TO@ final ModelNode deployment=modelNode.get(uniqueName); @AT@ 20591 @LENGTH@ 49
------INS Modifier@@final @TO@ VariableDeclarationStatement@@ModelNode deployment=modelNode.get(uniqueName); @AT@ 21758 @LENGTH@ 5
---UPD VariableDeclarationStatement@@String runtimeName=deployment.get(RUNTIME_NAME).asString(); @TO@ final String runtimeName=deployment.get(RUNTIME_NAME).asString(); @AT@ 20657 @LENGTH@ 61
------INS Modifier@@final @TO@ VariableDeclarationStatement@@String runtimeName=deployment.get(RUNTIME_NAME).asString(); @AT@ 21830 @LENGTH@ 5
---UPD VariableDeclarationStatement@@String sha1=HashUtil.bytesToHexString(deployment.get(HASH).asBytes()); @TO@ final List<ModelNode> contentItems=deployment.require(CONTENT).asList(); @AT@ 20735 @LENGTH@ 72
------DEL SimpleType@@String @AT@ 20735 @LENGTH@ 6
------UPD VariableDeclarationFragment@@sha1=HashUtil.bytesToHexString(deployment.get(HASH).asBytes()) @TO@ contentItems=deployment.require(CONTENT).asList() @AT@ 20742 @LENGTH@ 64
---------UPD SimpleName@@sha1 @TO@ contentItems @AT@ 20742 @LENGTH@ 4
---------DEL MethodInvocation@@HashUtil.bytesToHexString(deployment.get(HASH).asBytes()) @AT@ 20749 @LENGTH@ 57
------------DEL SimpleName@@Name:HashUtil @AT@ 20749 @LENGTH@ 8
------------DEL SimpleName@@MethodName:bytesToHexString:[deployment.get(HASH).asBytes()] @AT@ 20758 @LENGTH@ 48
---------------DEL MethodInvocation@@deployment.get(HASH).asBytes() @AT@ 20775 @LENGTH@ 30
---------INS MethodInvocation@@deployment.require(CONTENT).asList() @TO@ VariableDeclarationFragment@@sha1=HashUtil.bytesToHexString(deployment.get(HASH).asBytes()) @AT@ 22366 @LENGTH@ 36
------------MOV MethodInvocation@@MethodName:get:[HASH] @TO@ MethodInvocation@@deployment.require(CONTENT).asList() @AT@ 20775 @LENGTH@ 20
---------------UPD SimpleName@@HASH @TO@ CONTENT @AT@ 20790 @LENGTH@ 4
------------MOV SimpleName@@Name:deployment @TO@ MethodInvocation@@deployment.require(CONTENT).asList() @AT@ 20775 @LENGTH@ 10
------------MOV SimpleName@@MethodName:asBytes:[] @TO@ MethodInvocation@@deployment.require(CONTENT).asList() @AT@ 20796 @LENGTH@ 9
------INS Modifier@@final @TO@ VariableDeclarationStatement@@String sha1=HashUtil.bytesToHexString(deployment.get(HASH).asBytes()); @AT@ 22329 @LENGTH@ 5
------INS ParameterizedType@@List<ModelNode> @TO@ VariableDeclarationStatement@@String sha1=HashUtil.bytesToHexString(deployment.get(HASH).asBytes()); @AT@ 22335 @LENGTH@ 15
---------INS SimpleType@@List @TO@ ParameterizedType@@List<ModelNode> @AT@ 22335 @LENGTH@ 4
---------INS SimpleType@@ModelNode @TO@ ParameterizedType@@List<ModelNode> @AT@ 22340 @LENGTH@ 9
---MOV VariableDeclarationStatement@@String sha1=HashUtil.bytesToHexString(deployment.get(HASH).asBytes()); @TO@ EnhancedForStatement@@for (String uniqueName : deploymentNames) {  ModelNode deployment=modelNode.get(uniqueName);  String runtimeName=deployment.get(RUNTIME_NAME).asString();  String sha1=HashUtil.bytesToHexString(deployment.get(HASH).asBytes());  boolean enabled=deployment.get(ENABLED).asBoolean();  writer.writeStartElement(Element.DEPLOYMENT.getLocalName());  writeAttribute(writer,Attribute.NAME,uniqueName);  writeAttribute(writer,Attribute.RUNTIME_NAME,runtimeName);  writeAttribute(writer,Attribute.SHA1,sha1);  if (!enabled) {    writeAttribute(writer,Attribute.ENABLED,"false");  }  writer.writeEndElement();} @AT@ 20735 @LENGTH@ 72
---UPD ExpressionStatement@@MethodInvocation:writeAttribute(writer,Attribute.SHA1,sha1) @TO@ MethodInvocation:writeContentItem(writer,contentItem) @AT@ 21117 @LENGTH@ 45
---INS EnhancedForStatement@@for (ModelNode contentItem : contentItems) {  writeContentItem(writer,contentItem);} @TO@ EnhancedForStatement@@for (String uniqueName : deploymentNames) {  ModelNode deployment=modelNode.get(uniqueName);  String runtimeName=deployment.get(RUNTIME_NAME).asString();  String sha1=HashUtil.bytesToHexString(deployment.get(HASH).asBytes());  boolean enabled=deployment.get(ENABLED).asBoolean();  writer.writeStartElement(Element.DEPLOYMENT.getLocalName());  writeAttribute(writer,Attribute.NAME,uniqueName);  writeAttribute(writer,Attribute.RUNTIME_NAME,runtimeName);  writeAttribute(writer,Attribute.SHA1,sha1);  if (!enabled) {    writeAttribute(writer,Attribute.ENABLED,"false");  }  writer.writeEndElement();} @AT@ 22420 @LENGTH@ 121
------MOV ExpressionStatement@@MethodInvocation:writeAttribute(writer,Attribute.SHA1,sha1) @TO@ EnhancedForStatement@@for (ModelNode contentItem : contentItems) {  writeContentItem(writer,contentItem);} @AT@ 21117 @LENGTH@ 45
---------UPD MethodInvocation@@writeAttribute(writer,Attribute.SHA1,sha1) @TO@ writeContentItem(writer,contentItem) @AT@ 21117 @LENGTH@ 44
------------UPD SimpleName@@MethodName:writeAttribute:[writer, Attribute.SHA1, sha1] @TO@ MethodName:writeContentItem:[writer, contentItem] @AT@ 21117 @LENGTH@ 44
---------------DEL QualifiedName@@Attribute.SHA1 @AT@ 21140 @LENGTH@ 14
------------------DEL SimpleName@@Attribute @AT@ 21140 @LENGTH@ 9
------------------DEL SimpleName@@SHA1 @AT@ 21150 @LENGTH@ 4
---------------DEL SimpleName@@sha1 @AT@ 21156 @LENGTH@ 4
---------------INS SimpleName@@contentItem @TO@ SimpleName@@MethodName:writeAttribute:[writer, Attribute.SHA1, sha1] @AT@ 22510 @LENGTH@ 11
------INS SingleVariableDeclaration@@ModelNode contentItem @TO@ EnhancedForStatement@@for (ModelNode contentItem : contentItems) {  writeContentItem(writer,contentItem);} @AT@ 22425 @LENGTH@ 21
---------INS SimpleType@@ModelNode @TO@ SingleVariableDeclaration@@ModelNode contentItem @AT@ 22425 @LENGTH@ 9
---------INS SimpleName@@contentItem @TO@ SingleVariableDeclaration@@ModelNode contentItem @AT@ 22435 @LENGTH@ 11
------INS SimpleName@@contentItems @TO@ EnhancedForStatement@@for (ModelNode contentItem : contentItems) {  writeContentItem(writer,contentItem);} @AT@ 22449 @LENGTH@ 12


UPD EnhancedForStatement@@for (ResourceRoot resourceRoot : allResourceRoots) {  if (!ModuleRootMarker.isModuleRoot(resourceRoot))   continue;  final AttachmentList<ExtensionListEntry> entries=resourceRoot.getAttachment(Attachments.EXTENSION_LIST_ENTRIES);  if (entries != null) {    for (    ExtensionListEntry entry : entries) {      final ModuleIdentifier extension=index.findExtension(entry.getName(),entry.getSpecificationVersion(),entry.getImplementationVersion(),entry.getImplementationVendorId());      if (extension != null) {        moduleSpecification.addDependency(new ModuleDependency(moduleLoader,extension,false,false,true));        nextPhaseDeps.add(ServiceModuleLoader.moduleSpecServiceName(extension));        nextPhaseDeps.add(ServiceModuleLoader.moduleSpecServiceName(extension));      } else {        log.warnf("Could not find Extension-List entry " + entry + " referenced from "+ resourceRoot);      }    }  }} @TO@ for (ResourceRoot resourceRoot : allResourceRoots) {  final AttachmentList<ExtensionListEntry> entries=resourceRoot.getAttachment(Attachments.EXTENSION_LIST_ENTRIES);  if (entries != null) {    for (    ExtensionListEntry entry : entries) {      final ModuleIdentifier extension=index.findExtension(entry.getName(),entry.getSpecificationVersion(),entry.getImplementationVersion(),entry.getImplementationVendorId());      if (extension != null) {        moduleSpecification.addDependency(new ModuleDependency(moduleLoader,extension,false,false,true));        nextPhaseDeps.add(ServiceModuleLoader.moduleSpecServiceName(extension));        nextPhaseDeps.add(ServiceModuleLoader.moduleSpecServiceName(extension));      } else {        log.warnf("Could not find Extension-List entry " + entry + " referenced from "+ resourceRoot);      }    }  }} @AT@ 3182 @LENGTH@ 1164
---DEL IfStatement@@if (!ModuleRootMarker.isModuleRoot(resourceRoot)) continue; @AT@ 3247 @LENGTH@ 75
------DEL PrefixExpression@@!ModuleRootMarker.isModuleRoot(resourceRoot) @AT@ 3251 @LENGTH@ 44
---------DEL Operator@@! @AT@ 3251 @LENGTH@ 1
---------DEL MethodInvocation@@ModuleRootMarker.isModuleRoot(resourceRoot) @AT@ 3252 @LENGTH@ 43
------------DEL SimpleName@@Name:ModuleRootMarker @AT@ 3252 @LENGTH@ 16
------------DEL SimpleName@@MethodName:isModuleRoot:[resourceRoot] @AT@ 3269 @LENGTH@ 26
---------------DEL SimpleName@@resourceRoot @AT@ 3282 @LENGTH@ 12
------DEL Block@@ThenBody:continue; @AT@ 3313 @LENGTH@ 9
---------DEL ContinueStatement@@ @AT@ 3313 @LENGTH@ 9


UPD ExpressionStatement@@MethodInvocation:jedisConnFactory.setUsePool(true) @TO@ MethodInvocation:jedisConnFactory.setUsePool(false) @AT@ 1689 @LENGTH@ 34
---UPD MethodInvocation@@jedisConnFactory.setUsePool(true) @TO@ jedisConnFactory.setUsePool(false) @AT@ 1689 @LENGTH@ 33
------UPD SimpleName@@MethodName:setUsePool:[true] @TO@ MethodName:setUsePool:[false] @AT@ 1706 @LENGTH@ 16
---------UPD BooleanLiteral@@true @TO@ false @AT@ 1717 @LENGTH@ 4


UPD TryStatement@@try {  ModelNode param=operation.get(NAMESPACE);  ModelNode namespaces=context.getSubModel().get(NAMESPACES);  ModelNode toRemove=null;  String failure=typeValidator.validateParameter(NAMESPACE,param);  if (failure == null) {    ModelNode newList=new ModelNode().setEmptyList();    String prefix=param.asProperty().getName();    if (namespaces.isDefined()) {      for (      Property namespace : namespaces.asPropertyList()) {        if (!prefix.equals(namespace.getName())) {          toRemove=newList.add(namespace.getName(),namespace.getValue());          break;        }      }    }    if (toRemove != null) {      namespaces.set(newList);      ModelNode compensating=NamespaceAddHandler.getAddNamespaceOperation(operation.get(OP_ADDR),toRemove);      resultHandler.handleResultComplete(compensating);    } else {      failure="No namespace with URI " + prefix + "found";    }  }  if (failure != null) {    resultHandler.handleFailed(new ModelNode().set(failure));  }} catch (Exception e) {  resultHandler.handleFailed(new ModelNode().set(e.getLocalizedMessage()));} @TO@ try {  ModelNode param=operation.get(NAMESPACE);  String failure=typeValidator.validateParameter(NAMESPACE,param);  if (failure == null) {    ModelNode namespaces=context.getSubModel().get(NAMESPACES);    Property toRemove=null;    ModelNode newList=new ModelNode().setEmptyList();    String prefix=param.asString();    if (namespaces.isDefined()) {      for (      Property namespace : namespaces.asPropertyList()) {        if (prefix.equals(namespace.getName())) {          toRemove=namespace;        } else {          newList.add(namespace.getName(),namespace.getValue());        }      }    }    if (toRemove != null) {      namespaces.set(newList);      ModelNode compensating=NamespaceAddHandler.getAddNamespaceOperation(operation.get(OP_ADDR),toRemove);      resultHandler.handleResultComplete(compensating);    } else {      failure="No namespace with URI " + prefix + " found";    }  }  if (failure != null) {    resultHandler.handleFailed(new ModelNode().set(failure));  }} catch (Exception e) {  resultHandler.handleFailed(new ModelNode().set(e.getLocalizedMessage()));} @AT@ 2987 @LENGTH@ 1494
---DEL VariableDeclarationStatement@@ModelNode toRemove=null; @AT@ 3135 @LENGTH@ 26
------DEL SimpleType@@ModelNode @AT@ 3135 @LENGTH@ 9
------DEL VariableDeclarationFragment@@toRemove=null @AT@ 3145 @LENGTH@ 15
---------DEL SimpleName@@toRemove @AT@ 3145 @LENGTH@ 8
---------DEL NullLiteral@@null @AT@ 3156 @LENGTH@ 4
---UPD IfStatement@@if (failure == null) {  ModelNode newList=new ModelNode().setEmptyList();  String prefix=param.asProperty().getName();  if (namespaces.isDefined()) {    for (    Property namespace : namespaces.asPropertyList()) {      if (!prefix.equals(namespace.getName())) {        toRemove=newList.add(namespace.getName(),namespace.getValue());        break;      }    }  }  if (toRemove != null) {    namespaces.set(newList);    ModelNode compensating=NamespaceAddHandler.getAddNamespaceOperation(operation.get(OP_ADDR),toRemove);    resultHandler.handleResultComplete(compensating);  } else {    failure="No namespace with URI " + prefix + "found";  }} @TO@ if (failure == null) {  ModelNode namespaces=context.getSubModel().get(NAMESPACES);  Property toRemove=null;  ModelNode newList=new ModelNode().setEmptyList();  String prefix=param.asString();  if (namespaces.isDefined()) {    for (    Property namespace : namespaces.asPropertyList()) {      if (prefix.equals(namespace.getName())) {        toRemove=namespace;      } else {        newList.add(namespace.getName(),namespace.getValue());      }    }  }  if (toRemove != null) {    namespaces.set(newList);    ModelNode compensating=NamespaceAddHandler.getAddNamespaceOperation(operation.get(OP_ADDR),toRemove);    resultHandler.handleResultComplete(compensating);  } else {    failure="No namespace with URI " + prefix + " found";  }} @AT@ 3254 @LENGTH@ 967
------UPD Block@@ThenBody:{  ModelNode newList=new ModelNode().setEmptyList();  String prefix=param.asProperty().getName();  if (namespaces.isDefined()) {    for (    Property namespace : namespaces.asPropertyList()) {      if (!prefix.equals(namespace.getName())) {        toRemove=newList.add(namespace.getName(),namespace.getValue());        break;      }    }  }  if (toRemove != null) {    namespaces.set(newList);    ModelNode compensating=NamespaceAddHandler.getAddNamespaceOperation(operation.get(OP_ADDR),toRemove);    resultHandler.handleResultComplete(compensating);  } else {    failure="No namespace with URI " + prefix + "found";  }} @TO@ ThenBody:{  ModelNode namespaces=context.getSubModel().get(NAMESPACES);  Property toRemove=null;  ModelNode newList=new ModelNode().setEmptyList();  String prefix=param.asString();  if (namespaces.isDefined()) {    for (    Property namespace : namespaces.asPropertyList()) {      if (prefix.equals(namespace.getName())) {        toRemove=namespace;      } else {        newList.add(namespace.getName(),namespace.getValue());      }    }  }  if (toRemove != null) {    namespaces.set(newList);    ModelNode compensating=NamespaceAddHandler.getAddNamespaceOperation(operation.get(OP_ADDR),toRemove);    resultHandler.handleResultComplete(compensating);  } else {    failure="No namespace with URI " + prefix + " found";  }} @AT@ 3275 @LENGTH@ 946
---------MOV VariableDeclarationStatement@@ModelNode namespaces=context.getSubModel().get(NAMESPACES); @TO@ Block@@ThenBody:{  ModelNode newList=new ModelNode().setEmptyList();  String prefix=param.asProperty().getName();  if (namespaces.isDefined()) {    for (    Property namespace : namespaces.asPropertyList()) {      if (!prefix.equals(namespace.getName())) {        toRemove=newList.add(namespace.getName(),namespace.getValue());        break;      }    }  }  if (toRemove != null) {    namespaces.set(newList);    ModelNode compensating=NamespaceAddHandler.getAddNamespaceOperation(operation.get(OP_ADDR),toRemove);    resultHandler.handleResultComplete(compensating);  } else {    failure="No namespace with URI " + prefix + "found";  }} @AT@ 3061 @LENGTH@ 61
---------INS VariableDeclarationStatement@@Property toRemove=null; @TO@ Block@@ThenBody:{  ModelNode newList=new ModelNode().setEmptyList();  String prefix=param.asProperty().getName();  if (namespaces.isDefined()) {    for (    Property namespace : namespaces.asPropertyList()) {      if (!prefix.equals(namespace.getName())) {        toRemove=newList.add(namespace.getName(),namespace.getValue());        break;      }    }  }  if (toRemove != null) {    namespaces.set(newList);    ModelNode compensating=NamespaceAddHandler.getAddNamespaceOperation(operation.get(OP_ADDR),toRemove);    resultHandler.handleResultComplete(compensating);  } else {    failure="No namespace with URI " + prefix + "found";  }} @AT@ 3258 @LENGTH@ 25
------------INS SimpleType@@Property @TO@ VariableDeclarationStatement@@Property toRemove=null; @AT@ 3258 @LENGTH@ 8
------------INS VariableDeclarationFragment@@toRemove=null @TO@ VariableDeclarationStatement@@Property toRemove=null; @AT@ 3267 @LENGTH@ 15
---------------INS SimpleName@@toRemove @TO@ VariableDeclarationFragment@@toRemove=null @AT@ 3267 @LENGTH@ 8
---------------INS NullLiteral@@null @TO@ VariableDeclarationFragment@@toRemove=null @AT@ 3278 @LENGTH@ 4
---------UPD VariableDeclarationStatement@@String prefix=param.asProperty().getName(); @TO@ String prefix=param.asString(); @AT@ 3361 @LENGTH@ 45
------------UPD VariableDeclarationFragment@@prefix=param.asProperty().getName() @TO@ prefix=param.asString() @AT@ 3368 @LENGTH@ 37
---------------UPD MethodInvocation@@param.asProperty().getName() @TO@ param.asString() @AT@ 3377 @LENGTH@ 28
------------------DEL MethodInvocation@@MethodName:asProperty:[] @AT@ 3377 @LENGTH@ 18
------------------UPD SimpleName@@MethodName:getName:[] @TO@ MethodName:asString:[] @AT@ 3396 @LENGTH@ 9
---------UPD IfStatement@@if (namespaces.isDefined()) {  for (  Property namespace : namespaces.asPropertyList()) {    if (!prefix.equals(namespace.getName())) {      toRemove=newList.add(namespace.getName(),namespace.getValue());      break;    }  }} @TO@ if (namespaces.isDefined()) {  for (  Property namespace : namespaces.asPropertyList()) {    if (prefix.equals(namespace.getName())) {      toRemove=namespace;    } else {      newList.add(namespace.getName(),namespace.getValue());    }  }} @AT@ 3423 @LENGTH@ 369
------------UPD Block@@ThenBody:{  for (  Property namespace : namespaces.asPropertyList()) {    if (!prefix.equals(namespace.getName())) {      toRemove=newList.add(namespace.getName(),namespace.getValue());      break;    }  }} @TO@ ThenBody:{  for (  Property namespace : namespaces.asPropertyList()) {    if (prefix.equals(namespace.getName())) {      toRemove=namespace;    } else {      newList.add(namespace.getName(),namespace.getValue());    }  }} @AT@ 3451 @LENGTH@ 341
---------------UPD EnhancedForStatement@@for (Property namespace : namespaces.asPropertyList()) {  if (!prefix.equals(namespace.getName())) {    toRemove=newList.add(namespace.getName(),namespace.getValue());    break;  }} @TO@ for (Property namespace : namespaces.asPropertyList()) {  if (prefix.equals(namespace.getName())) {    toRemove=namespace;  } else {    newList.add(namespace.getName(),namespace.getValue());  }} @AT@ 3473 @LENGTH@ 301
------------------UPD IfStatement@@if (!prefix.equals(namespace.getName())) {  toRemove=newList.add(namespace.getName(),namespace.getValue());  break;} @TO@ if (prefix.equals(namespace.getName())) {  toRemove=namespace;} else {  newList.add(namespace.getName(),namespace.getValue());} @AT@ 3554 @LENGTH@ 198
---------------------DEL PrefixExpression@@!prefix.equals(namespace.getName()) @AT@ 3558 @LENGTH@ 35
------------------------DEL Operator@@! @AT@ 3558 @LENGTH@ 1
---------------------MOV MethodInvocation@@prefix.equals(namespace.getName()) @TO@ IfStatement@@if (!prefix.equals(namespace.getName())) {  toRemove=newList.add(namespace.getName(),namespace.getValue());  break;} @AT@ 3559 @LENGTH@ 34
---------------------INS Block@@ThenBody:{  toRemove=namespace;} @TO@ IfStatement@@if (!prefix.equals(namespace.getName())) {  toRemove=newList.add(namespace.getName(),namespace.getValue());  break;} @AT@ 3589 @LENGTH@ 77
------------------------INS ExpressionStatement@@Assignment:toRemove=namespace @TO@ Block@@ThenBody:{  toRemove=namespace;} @AT@ 3619 @LENGTH@ 21
---------------------------INS Assignment@@toRemove=namespace @TO@ ExpressionStatement@@Assignment:toRemove=namespace @AT@ 3619 @LENGTH@ 20
------------------------------INS SimpleName@@toRemove @TO@ Assignment@@toRemove=namespace @AT@ 3619 @LENGTH@ 8
------------------------------INS Operator@@= @TO@ Assignment@@toRemove=namespace @AT@ 3627 @LENGTH@ 1
------------------------------INS SimpleName@@namespace @TO@ Assignment@@toRemove=namespace @AT@ 3630 @LENGTH@ 9
---------------------UPD Block@@ThenBody:{  toRemove=newList.add(namespace.getName(),namespace.getValue());  break;} @TO@ ElseBody:{  newList.add(namespace.getName(),namespace.getValue());} @AT@ 3595 @LENGTH@ 157
------------------------UPD ExpressionStatement@@Assignment:toRemove=newList.add(namespace.getName(),namespace.getValue()) @TO@ MethodInvocation:newList.add(namespace.getName(),namespace.getValue()) @AT@ 3625 @LENGTH@ 66
---------------------------DEL Assignment@@toRemove=newList.add(namespace.getName(),namespace.getValue()) @AT@ 3625 @LENGTH@ 65
------------------------------DEL SimpleName@@toRemove @AT@ 3625 @LENGTH@ 8
------------------------------DEL Operator@@= @AT@ 3633 @LENGTH@ 1
---------------------------MOV MethodInvocation@@newList.add(namespace.getName(),namespace.getValue()) @TO@ ExpressionStatement@@Assignment:toRemove=newList.add(namespace.getName(),namespace.getValue()) @AT@ 3636 @LENGTH@ 54
------------------------DEL BreakStatement@@ @AT@ 3720 @LENGTH@ 6
---------UPD IfStatement@@if (toRemove != null) {  namespaces.set(newList);  ModelNode compensating=NamespaceAddHandler.getAddNamespaceOperation(operation.get(OP_ADDR),toRemove);  resultHandler.handleResultComplete(compensating);} else {  failure="No namespace with URI " + prefix + "found";} @TO@ if (toRemove != null) {  namespaces.set(newList);  ModelNode compensating=NamespaceAddHandler.getAddNamespaceOperation(operation.get(OP_ADDR),toRemove);  resultHandler.handleResultComplete(compensating);} else {  failure="No namespace with URI " + prefix + " found";} @AT@ 3810 @LENGTH@ 397
------------UPD Block@@ElseBody:{  failure="No namespace with URI " + prefix + "found";} @TO@ ElseBody:{  failure="No namespace with URI " + prefix + " found";} @AT@ 4113 @LENGTH@ 94
---------------UPD ExpressionStatement@@Assignment:failure="No namespace with URI " + prefix + "found" @TO@ Assignment:failure="No namespace with URI " + prefix + " found" @AT@ 4135 @LENGTH@ 54
------------------UPD Assignment@@failure="No namespace with URI " + prefix + "found" @TO@ failure="No namespace with URI " + prefix + " found" @AT@ 4135 @LENGTH@ 53
---------------------UPD InfixExpression@@"No namespace with URI " + prefix + "found" @TO@ "No namespace with URI " + prefix + " found" @AT@ 4145 @LENGTH@ 43
------------------------UPD StringLiteral@@"found" @TO@ " found" @AT@ 4181 @LENGTH@ 7


UPD ReturnStatement@@ClassInstanceCreation:new FacebookProfile(id,firstName,lastName,email) @TO@ ClassInstanceCreation:new FacebookProfile(id,name,firstName,lastName,email) @AT@ 3091 @LENGTH@ 59
---UPD ClassInstanceCreation@@FacebookProfile[id, firstName, lastName, email] @TO@ FacebookProfile[id, name, firstName, lastName, email] @AT@ 3098 @LENGTH@ 51
------INS SimpleName@@name @TO@ ClassInstanceCreation@@FacebookProfile[id, firstName, lastName, email] @AT@ 3178 @LENGTH@ 4


UPD Block@@ElseBody:if (operation.hasDefined(HASH)) {  hash=operation.get(HASH).asBytes();} else {  throw new OperationFailedException(new ModelNode().set("Neither an attachment or a hash were passed in"));} @TO@ ElseBody:if (operation.hasDefined(HASH)) {  hash=operation.get(HASH).asBytes();} else {  throw new OperationFailedException(new ModelNode().set("Neither an attachment nor a hash were passed in"));} @AT@ 5654 @LENGTH@ 228
---UPD IfStatement@@if (operation.hasDefined(HASH)) {  hash=operation.get(HASH).asBytes();} else {  throw new OperationFailedException(new ModelNode().set("Neither an attachment or a hash were passed in"));} @TO@ if (operation.hasDefined(HASH)) {  hash=operation.get(HASH).asBytes();} else {  throw new OperationFailedException(new ModelNode().set("Neither an attachment nor a hash were passed in"));} @AT@ 5654 @LENGTH@ 228
------UPD Block@@ElseBody:{  throw new OperationFailedException(new ModelNode().set("Neither an attachment or a hash were passed in"));} @TO@ ElseBody:{  throw new OperationFailedException(new ModelNode().set("Neither an attachment nor a hash were passed in"));} @AT@ 5752 @LENGTH@ 130
---------UPD ThrowStatement@@ClassInstanceCreation:new OperationFailedException(new ModelNode().set("Neither an attachment or a hash were passed in")) @TO@ ClassInstanceCreation:new OperationFailedException(new ModelNode().set("Neither an attachment nor a hash were passed in")) @AT@ 5766 @LENGTH@ 106
------------UPD ClassInstanceCreation@@OperationFailedException[new ModelNode().set("Neither an attachment or a hash were passed in")] @TO@ OperationFailedException[new ModelNode().set("Neither an attachment nor a hash were passed in")] @AT@ 5772 @LENGTH@ 99
---------------UPD MethodInvocation@@new ModelNode().set("Neither an attachment or a hash were passed in") @TO@ new ModelNode().set("Neither an attachment nor a hash were passed in") @AT@ 5801 @LENGTH@ 69
------------------UPD SimpleName@@MethodName:set:["Neither an attachment or a hash were passed in"] @TO@ MethodName:set:["Neither an attachment nor a hash were passed in"] @AT@ 5817 @LENGTH@ 53
---------------------UPD StringLiteral@@"Neither an attachment or a hash were passed in" @TO@ "Neither an attachment nor a hash were passed in" @AT@ 5821 @LENGTH@ 48
---UPD IfStatement@@if (operation.hasDefined(HASH)) {  hash=operation.get(HASH).asBytes();} else {  throw new OperationFailedException(new ModelNode().set("Neither an attachment or a hash were passed in"));} @TO@ if (operation.hasDefined(HASH)) {  hash=operation.get(HASH).asBytes();} else {  throw new OperationFailedException(new ModelNode().set("Neither an attachment nor a hash were passed in"));} @AT@ 5654 @LENGTH@ 228
------UPD Block@@ElseBody:{  throw new OperationFailedException(new ModelNode().set("Neither an attachment or a hash were passed in"));} @TO@ ElseBody:{  throw new OperationFailedException(new ModelNode().set("Neither an attachment nor a hash were passed in"));} @AT@ 5752 @LENGTH@ 130
---------UPD ThrowStatement@@ClassInstanceCreation:new OperationFailedException(new ModelNode().set("Neither an attachment or a hash were passed in")) @TO@ ClassInstanceCreation:new OperationFailedException(new ModelNode().set("Neither an attachment nor a hash were passed in")) @AT@ 5766 @LENGTH@ 106
------------UPD ClassInstanceCreation@@OperationFailedException[new ModelNode().set("Neither an attachment or a hash were passed in")] @TO@ OperationFailedException[new ModelNode().set("Neither an attachment nor a hash were passed in")] @AT@ 5772 @LENGTH@ 99
---------------UPD MethodInvocation@@new ModelNode().set("Neither an attachment or a hash were passed in") @TO@ new ModelNode().set("Neither an attachment nor a hash were passed in") @AT@ 5801 @LENGTH@ 69
------------------UPD SimpleName@@MethodName:set:["Neither an attachment or a hash were passed in"] @TO@ MethodName:set:["Neither an attachment nor a hash were passed in"] @AT@ 5817 @LENGTH@ 53
---------------------UPD StringLiteral@@"Neither an attachment or a hash were passed in" @TO@ "Neither an attachment nor a hash were passed in" @AT@ 5821 @LENGTH@ 48


INS ExpressionStatement@@MethodInvocation:__redirected.__JAXPRedirected.changeAll(ModuleIdentifier.fromString("javax.xml.jaxp-provider"),moduleLoader) @TO@ MethodDeclaration@@public, static, StandaloneServer, MethodName:create, final File jbossHomeDir, final Properties systemProps, final Map<String,String> systemEnv, String... systemPackages, Throwable,  @AT@ 4145 @LENGTH@ 110
---INS MethodInvocation@@__redirected.__JAXPRedirected.changeAll(ModuleIdentifier.fromString("javax.xml.jaxp-provider"),moduleLoader) @TO@ ExpressionStatement@@MethodInvocation:__redirected.__JAXPRedirected.changeAll(ModuleIdentifier.fromString("javax.xml.jaxp-provider"),moduleLoader) @AT@ 4145 @LENGTH@ 109
------INS QualifiedName@@Name:__redirected.__JAXPRedirected @TO@ MethodInvocation@@__redirected.__JAXPRedirected.changeAll(ModuleIdentifier.fromString("javax.xml.jaxp-provider"),moduleLoader) @AT@ 4145 @LENGTH@ 29
------INS SimpleName@@MethodName:changeAll:[ModuleIdentifier.fromString("javax.xml.jaxp-provider"), moduleLoader] @TO@ MethodInvocation@@__redirected.__JAXPRedirected.changeAll(ModuleIdentifier.fromString("javax.xml.jaxp-provider"),moduleLoader) @AT@ 4175 @LENGTH@ 79
---------INS MethodInvocation@@ModuleIdentifier.fromString("javax.xml.jaxp-provider") @TO@ SimpleName@@MethodName:changeAll:[ModuleIdentifier.fromString("javax.xml.jaxp-provider"), moduleLoader] @AT@ 4185 @LENGTH@ 54
------------INS SimpleName@@Name:ModuleIdentifier @TO@ MethodInvocation@@ModuleIdentifier.fromString("javax.xml.jaxp-provider") @AT@ 4185 @LENGTH@ 16
------------INS SimpleName@@MethodName:fromString:["javax.xml.jaxp-provider"] @TO@ MethodInvocation@@ModuleIdentifier.fromString("javax.xml.jaxp-provider") @AT@ 4202 @LENGTH@ 37
---------------INS StringLiteral@@"javax.xml.jaxp-provider" @TO@ SimpleName@@MethodName:fromString:["javax.xml.jaxp-provider"] @AT@ 4213 @LENGTH@ 25
---------INS SimpleName@@moduleLoader @TO@ SimpleName@@MethodName:changeAll:[ModuleIdentifier.fromString("javax.xml.jaxp-provider"), moduleLoader] @AT@ 4241 @LENGTH@ 12


UPD IfStatement@@if (module != null) {  deploymentModuleLoader.removeModuleSpec(module.getIdentifier());} @TO@ if (identifier != null) {  deploymentModuleLoader.removeModuleSpec(identifier);} @AT@ 7466 @LENGTH@ 108
---UPD InfixExpression@@module != null @TO@ identifier != null @AT@ 7470 @LENGTH@ 14
------UPD SimpleName@@module @TO@ identifier @AT@ 7470 @LENGTH@ 6
---UPD Block@@ThenBody:{  deploymentModuleLoader.removeModuleSpec(module.getIdentifier());} @TO@ ThenBody:{  deploymentModuleLoader.removeModuleSpec(identifier);} @AT@ 7486 @LENGTH@ 88
------UPD ExpressionStatement@@MethodInvocation:deploymentModuleLoader.removeModuleSpec(module.getIdentifier()) @TO@ MethodInvocation:deploymentModuleLoader.removeModuleSpec(identifier) @AT@ 7500 @LENGTH@ 64
---------UPD MethodInvocation@@deploymentModuleLoader.removeModuleSpec(module.getIdentifier()) @TO@ deploymentModuleLoader.removeModuleSpec(identifier) @AT@ 7500 @LENGTH@ 63
------------UPD SimpleName@@MethodName:removeModuleSpec:[module.getIdentifier()] @TO@ MethodName:removeModuleSpec:[identifier] @AT@ 7523 @LENGTH@ 40
---------------INS SimpleName@@identifier @TO@ SimpleName@@MethodName:removeModuleSpec:[module.getIdentifier()] @AT@ 7343 @LENGTH@ 10
---------------DEL MethodInvocation@@module.getIdentifier() @AT@ 7540 @LENGTH@ 22
------------------DEL SimpleName@@Name:module @AT@ 7540 @LENGTH@ 6
------------------DEL SimpleName@@MethodName:getIdentifier:[] @AT@ 7547 @LENGTH@ 15


UPD EnhancedForStatement@@for (AbstractComponentDescription componentDescription : this.eeModuleDescription.getComponentDescriptions()) {  if (componentDescription instanceof MessageDrivenComponentDescription) {    mdbs.add((MessageDrivenComponentDescription)componentDescription);  }} @TO@ for (ComponentDescription componentDescription : this.eeModuleDescription.getComponentDescriptions()) {  if (componentDescription instanceof MessageDrivenComponentDescription) {    mdbs.add((MessageDrivenComponentDescription)componentDescription);  }} @AT@ 6197 @LENGTH@ 304
---UPD SingleVariableDeclaration@@AbstractComponentDescription componentDescription @TO@ ComponentDescription componentDescription @AT@ 6202 @LENGTH@ 49
------UPD SimpleType@@AbstractComponentDescription @TO@ ComponentDescription @AT@ 6202 @LENGTH@ 28


UPD EnhancedForStatement@@for (Property prop : series.get(SERVER_GROUP).asPropertyList()) {  validateServerGroupPlan(found,prop);} @TO@ for (Property prop : series.get(CONCURRENT_GROUPS).asPropertyList()) {  validateServerGroupPlan(found,prop);} @AT@ 30638 @LENGTH@ 156
---UPD MethodInvocation@@series.get(SERVER_GROUP).asPropertyList() @TO@ series.get(CONCURRENT_GROUPS).asPropertyList() @AT@ 30658 @LENGTH@ 41
------UPD MethodInvocation@@MethodName:get:[SERVER_GROUP] @TO@ MethodName:get:[CONCURRENT_GROUPS] @AT@ 30658 @LENGTH@ 24
---------UPD SimpleName@@SERVER_GROUP @TO@ CONCURRENT_GROUPS @AT@ 30669 @LENGTH@ 12


UPD ExpressionStatement@@MethodInvocation:processBindings(phaseContext,configuration,serviceTarget,contextServiceName,resolutionContext,configuration.getBindingConfigurations()) @TO@ MethodInvocation:processBindings(phaseContext,configuration,serviceTarget,contextServiceName,resolutionContext,configuration.getComponentDescription().getBindingConfigurations()) @AT@ 7927 @LENGTH@ 141
---UPD MethodInvocation@@processBindings(phaseContext,configuration,serviceTarget,contextServiceName,resolutionContext,configuration.getBindingConfigurations()) @TO@ processBindings(phaseContext,configuration,serviceTarget,contextServiceName,resolutionContext,configuration.getComponentDescription().getBindingConfigurations()) @AT@ 7927 @LENGTH@ 140
------UPD SimpleName@@MethodName:processBindings:[phaseContext, configuration, serviceTarget, contextServiceName, resolutionContext, configuration.getBindingConfigurations()] @TO@ MethodName:processBindings:[phaseContext, configuration, serviceTarget, contextServiceName, resolutionContext, configuration.getComponentDescription().getBindingConfigurations()] @AT@ 7927 @LENGTH@ 140
---------UPD MethodInvocation@@configuration.getBindingConfigurations() @TO@ configuration.getComponentDescription().getBindingConfigurations() @AT@ 8026 @LENGTH@ 40
------------INS MethodInvocation@@MethodName:getComponentDescription:[] @TO@ MethodInvocation@@configuration.getBindingConfigurations() @AT@ 8026 @LENGTH@ 39


UPD MethodDeclaration@@public, void, MethodName:handle, ParsingContext ctx, OperationFormatException,  @TO@ public, void, MethodName:handle, ParsingContext ctx, CommandFormatException,  @AT@ 2510 @LENGTH@ 128
---UPD SimpleType@@OperationFormatException @TO@ CommandFormatException @AT@ 2572 @LENGTH@ 24


UPD IfStatement@@if (value instanceof DBObject) {  DBObject valueDbObj=(DBObject)value;  if ("$in".equals(key)) {    List<Object> ids=new ArrayList<Object>();    for (    Object id : (Object[])((DBObject)value).get("$in")) {      if (null != reader && !(id instanceof ObjectId)) {        ObjectId oid=((MongoConverter)reader).convertObjectId(id);        ids.add(oid);      } else {        ids.add(id);      }    }    newDbo.put("$in",ids.toArray(new ObjectId[ids.size()]));  }  if (null != reader) {    try {      value=reader.read(entity.getIdProperty().getType(),valueDbObj);    } catch (    ConversionFailedException ignored) {    }  }} else if (null != reader) {  try {    value=((MongoConverter)reader).convertObjectId(value);  } catch (  ConversionFailedException ignored) {  }} @TO@ if (value instanceof DBObject) {  if ("$in".equals(key)) {    List<Object> ids=new ArrayList<Object>();    for (    Object id : (Object[])((DBObject)value).get("$in")) {      if (null != reader && !(id instanceof ObjectId)) {        ObjectId oid=((MongoConverter)reader).convertObjectId(id);        ids.add(oid);      } else {        ids.add(id);      }    }    newDbo.put("$in",ids.toArray(new ObjectId[ids.size()]));  }} else if (null != reader) {  try {    value=((MongoConverter)reader).convertObjectId(value);  } catch (  ConversionFailedException ignored) {  }} @AT@ 2045 @LENGTH@ 851
---UPD Block@@ThenBody:{  DBObject valueDbObj=(DBObject)value;  if ("$in".equals(key)) {    List<Object> ids=new ArrayList<Object>();    for (    Object id : (Object[])((DBObject)value).get("$in")) {      if (null != reader && !(id instanceof ObjectId)) {        ObjectId oid=((MongoConverter)reader).convertObjectId(id);        ids.add(oid);      } else {        ids.add(id);      }    }    newDbo.put("$in",ids.toArray(new ObjectId[ids.size()]));  }  if (null != reader) {    try {      value=reader.read(entity.getIdProperty().getType(),valueDbObj);    } catch (    ConversionFailedException ignored) {    }  }} @TO@ ThenBody:{  if ("$in".equals(key)) {    List<Object> ids=new ArrayList<Object>();    for (    Object id : (Object[])((DBObject)value).get("$in")) {      if (null != reader && !(id instanceof ObjectId)) {        ObjectId oid=((MongoConverter)reader).convertObjectId(id);        ids.add(oid);      } else {        ids.add(id);      }    }    newDbo.put("$in",ids.toArray(new ObjectId[ids.size()]));  }} @AT@ 2076 @LENGTH@ 654
------DEL VariableDeclarationStatement@@DBObject valueDbObj=(DBObject)value; @AT@ 2083 @LENGTH@ 39
---------DEL SimpleType@@DBObject @AT@ 2083 @LENGTH@ 8
---------DEL VariableDeclarationFragment@@valueDbObj=(DBObject)value @AT@ 2092 @LENGTH@ 29
------------DEL SimpleName@@valueDbObj @AT@ 2092 @LENGTH@ 10
------------DEL CastExpression@@(DBObject)value @AT@ 2105 @LENGTH@ 16
---------------DEL SimpleType@@DBObject @AT@ 2106 @LENGTH@ 8
---------------DEL SimpleName@@value @AT@ 2116 @LENGTH@ 5
------DEL IfStatement@@if (null != reader) {  try {    value=reader.read(entity.getIdProperty().getType(),valueDbObj);  } catch (  ConversionFailedException ignored) {  }} @AT@ 2550 @LENGTH@ 174
---------DEL InfixExpression@@null != reader @AT@ 2554 @LENGTH@ 14
------------DEL NullLiteral@@null @AT@ 2554 @LENGTH@ 4
------------DEL Operator@@!= @AT@ 2558 @LENGTH@ 2
------------DEL SimpleName@@reader @AT@ 2562 @LENGTH@ 6
---------DEL Block@@ThenBody:{  try {    value=reader.read(entity.getIdProperty().getType(),valueDbObj);  } catch (  ConversionFailedException ignored) {  }} @AT@ 2570 @LENGTH@ 154
------------DEL TryStatement@@try {  value=reader.read(entity.getIdProperty().getType(),valueDbObj);} catch (ConversionFailedException ignored) {} @AT@ 2578 @LENGTH@ 139
---------------DEL ExpressionStatement@@Assignment:value=reader.read(entity.getIdProperty().getType(),valueDbObj) @AT@ 2591 @LENGTH@ 66
------------------DEL Assignment@@value=reader.read(entity.getIdProperty().getType(),valueDbObj) @AT@ 2591 @LENGTH@ 65
---------------------DEL SimpleName@@value @AT@ 2591 @LENGTH@ 5
---------------------DEL Operator@@= @AT@ 2596 @LENGTH@ 1
---------------------DEL MethodInvocation@@reader.read(entity.getIdProperty().getType(),valueDbObj) @AT@ 2599 @LENGTH@ 57
------------------------DEL SimpleName@@Name:reader @AT@ 2599 @LENGTH@ 6
------------------------DEL SimpleName@@MethodName:read:[entity.getIdProperty().getType(), valueDbObj] @AT@ 2606 @LENGTH@ 50
---------------------------DEL MethodInvocation@@entity.getIdProperty().getType() @AT@ 2611 @LENGTH@ 32
------------------------------DEL MethodInvocation@@MethodName:getIdProperty:[] @AT@ 2611 @LENGTH@ 22
------------------------------DEL SimpleName@@Name:entity @AT@ 2611 @LENGTH@ 6
------------------------------DEL SimpleName@@MethodName:getType:[] @AT@ 2634 @LENGTH@ 9
---------------------------DEL SimpleName@@valueDbObj @AT@ 2645 @LENGTH@ 10
---------------DEL CatchClause@@catch (ConversionFailedException ignored) {} @AT@ 2666 @LENGTH@ 51
------------------DEL SingleVariableDeclaration@@ConversionFailedException ignored @AT@ 2673 @LENGTH@ 33
---------------------DEL SimpleType@@ConversionFailedException @AT@ 2673 @LENGTH@ 25
---------------------DEL SimpleName@@ignored @AT@ 2699 @LENGTH@ 7


UPD ExpressionStatement@@MethodInvocation:update.get(OP).set("set-server-name") @TO@ MethodInvocation:update.get(OP).set("write-server-name") @AT@ 15059 @LENGTH@ 38
---UPD MethodInvocation@@update.get(OP).set("set-server-name") @TO@ update.get(OP).set("write-server-name") @AT@ 15059 @LENGTH@ 37
------UPD SimpleName@@MethodName:set:["set-server-name"] @TO@ MethodName:set:["write-server-name"] @AT@ 15074 @LENGTH@ 22
---------UPD StringLiteral@@"set-server-name" @TO@ "write-server-name" @AT@ 15078 @LENGTH@ 17


INS IfStatement@@if (classToBeUsed == null) {  return null;} @TO@ MethodDeclaration@@protected, Class<?>, MethodName:findTypeToBeUsed, DBObject dbObject,  @AT@ 21833 @LENGTH@ 53
---INS InfixExpression@@classToBeUsed == null @TO@ IfStatement@@if (classToBeUsed == null) {  return null;} @AT@ 21837 @LENGTH@ 21
------INS SimpleName@@classToBeUsed @TO@ InfixExpression@@classToBeUsed == null @AT@ 21837 @LENGTH@ 13
------INS Operator@@== @TO@ InfixExpression@@classToBeUsed == null @AT@ 21850 @LENGTH@ 2
------INS NullLiteral@@null @TO@ InfixExpression@@classToBeUsed == null @AT@ 21854 @LENGTH@ 4
---INS Block@@ThenBody:{  return null;} @TO@ IfStatement@@if (classToBeUsed == null) {  return null;} @AT@ 21860 @LENGTH@ 26
------INS ReturnStatement@@NullLiteral:null @TO@ Block@@ThenBody:{  return null;} @AT@ 21868 @LENGTH@ 12
---------INS NullLiteral@@null @TO@ ReturnStatement@@NullLiteral:null @AT@ 21875 @LENGTH@ 4


INS IfStatement@@if (controller != null) {  controller.setMode(ServiceController.Mode.REMOVE);  final MultipleRemoveListener<LifecycleContext> listener=MultipleRemoveListener.create(context);  controller.addListener(listener);  listener.done();} @TO@ MethodDeclaration@@public, synchronized, void, MethodName:stop, final StopContext context,  @AT@ 4661 @LENGTH@ 283
---INS InfixExpression@@controller != null @TO@ IfStatement@@if (controller != null) {  controller.setMode(ServiceController.Mode.REMOVE);  final MultipleRemoveListener<LifecycleContext> listener=MultipleRemoveListener.create(context);  controller.addListener(listener);  listener.done();} @AT@ 4665 @LENGTH@ 18
------INS SimpleName@@controller @TO@ InfixExpression@@controller != null @AT@ 4665 @LENGTH@ 10
------INS Operator@@!= @TO@ InfixExpression@@controller != null @AT@ 4675 @LENGTH@ 2
------INS NullLiteral@@null @TO@ InfixExpression@@controller != null @AT@ 4679 @LENGTH@ 4
---INS Block@@ThenBody:{  controller.setMode(ServiceController.Mode.REMOVE);  final MultipleRemoveListener<LifecycleContext> listener=MultipleRemoveListener.create(context);  controller.addListener(listener);  listener.done();} @TO@ IfStatement@@if (controller != null) {  controller.setMode(ServiceController.Mode.REMOVE);  final MultipleRemoveListener<LifecycleContext> listener=MultipleRemoveListener.create(context);  controller.addListener(listener);  listener.done();} @AT@ 4685 @LENGTH@ 259
------MOV ExpressionStatement@@MethodInvocation:controller.setMode(ServiceController.Mode.REMOVE) @TO@ Block@@ThenBody:{  controller.setMode(ServiceController.Mode.REMOVE);  final MultipleRemoveListener<LifecycleContext> listener=MultipleRemoveListener.create(context);  controller.addListener(listener);  listener.done();} @AT@ 4664 @LENGTH@ 50
------MOV VariableDeclarationStatement@@final MultipleRemoveListener<LifecycleContext> listener=MultipleRemoveListener.create(context); @TO@ Block@@ThenBody:{  controller.setMode(ServiceController.Mode.REMOVE);  final MultipleRemoveListener<LifecycleContext> listener=MultipleRemoveListener.create(context);  controller.addListener(listener);  listener.done();} @AT@ 4723 @LENGTH@ 97
------MOV ExpressionStatement@@MethodInvocation:controller.addListener(listener) @TO@ Block@@ThenBody:{  controller.setMode(ServiceController.Mode.REMOVE);  final MultipleRemoveListener<LifecycleContext> listener=MultipleRemoveListener.create(context);  controller.addListener(listener);  listener.done();} @AT@ 4829 @LENGTH@ 33
------MOV ExpressionStatement@@MethodInvocation:listener.done() @TO@ Block@@ThenBody:{  controller.setMode(ServiceController.Mode.REMOVE);  final MultipleRemoveListener<LifecycleContext> listener=MultipleRemoveListener.create(context);  controller.addListener(listener);  listener.done();} @AT@ 4871 @LENGTH@ 16


UPD VariableDeclarationStatement@@final VirtualFile deploymentRoot=phaseContext.getAttachment(Attachments.DEPLOYMENT_ROOT); @TO@ final VirtualFile deploymentRoot=phaseContext.getAttachment(Attachments.DEPLOYMENT_ROOT).getRoot(); @AT@ 2892 @LENGTH@ 91
---UPD VariableDeclarationFragment@@deploymentRoot=phaseContext.getAttachment(Attachments.DEPLOYMENT_ROOT) @TO@ deploymentRoot=phaseContext.getAttachment(Attachments.DEPLOYMENT_ROOT).getRoot() @AT@ 2910 @LENGTH@ 72
------UPD MethodInvocation@@phaseContext.getAttachment(Attachments.DEPLOYMENT_ROOT) @TO@ phaseContext.getAttachment(Attachments.DEPLOYMENT_ROOT).getRoot() @AT@ 2927 @LENGTH@ 55
---------INS MethodInvocation@@MethodName:getAttachment:[Attachments.DEPLOYMENT_ROOT] @TO@ MethodInvocation@@phaseContext.getAttachment(Attachments.DEPLOYMENT_ROOT) @AT@ 2843 @LENGTH@ 55
------------INS QualifiedName@@Attachments.DEPLOYMENT_ROOT @TO@ MethodInvocation@@MethodName:getAttachment:[Attachments.DEPLOYMENT_ROOT] @AT@ 2870 @LENGTH@ 27
---------------MOV SimpleName@@Attachments @TO@ QualifiedName@@Attachments.DEPLOYMENT_ROOT @AT@ 2954 @LENGTH@ 11
---------------MOV SimpleName@@DEPLOYMENT_ROOT @TO@ QualifiedName@@Attachments.DEPLOYMENT_ROOT @AT@ 2966 @LENGTH@ 15
---------INS SimpleName@@MethodName:getRoot:[] @TO@ MethodInvocation@@phaseContext.getAttachment(Attachments.DEPLOYMENT_ROOT) @AT@ 2899 @LENGTH@ 9
---------DEL SimpleName@@MethodName:getAttachment:[Attachments.DEPLOYMENT_ROOT] @AT@ 2940 @LENGTH@ 42
------------DEL QualifiedName@@Attachments.DEPLOYMENT_ROOT @AT@ 2954 @LENGTH@ 27


INS IfStatement@@if (webMetaData == null) {  log.info("Not installing Weld web tier integration as no web metadata found");  return;} @TO@ MethodDeclaration@@public, void, MethodName:deploy, DeploymentPhaseContext phaseContext, DeploymentUnitProcessingException,  @AT@ 3710 @LENGTH@ 147
---INS InfixExpression@@webMetaData == null @TO@ IfStatement@@if (webMetaData == null) {  log.info("Not installing Weld web tier integration as no web metadata found");  return;} @AT@ 3714 @LENGTH@ 19
------INS SimpleName@@webMetaData @TO@ InfixExpression@@webMetaData == null @AT@ 3714 @LENGTH@ 11
------INS Operator@@== @TO@ InfixExpression@@webMetaData == null @AT@ 3725 @LENGTH@ 2
------INS NullLiteral@@null @TO@ InfixExpression@@webMetaData == null @AT@ 3729 @LENGTH@ 4
---INS Block@@ThenBody:{  log.info("Not installing Weld web tier integration as no web metadata found");  return;} @TO@ IfStatement@@if (webMetaData == null) {  log.info("Not installing Weld web tier integration as no web metadata found");  return;} @AT@ 3735 @LENGTH@ 122
------INS ExpressionStatement@@MethodInvocation:log.info("Not installing Weld web tier integration as no web metadata found") @TO@ Block@@ThenBody:{  log.info("Not installing Weld web tier integration as no web metadata found");  return;} @AT@ 3749 @LENGTH@ 78
---------INS MethodInvocation@@log.info("Not installing Weld web tier integration as no web metadata found") @TO@ ExpressionStatement@@MethodInvocation:log.info("Not installing Weld web tier integration as no web metadata found") @AT@ 3749 @LENGTH@ 77
------------INS SimpleName@@Name:log @TO@ MethodInvocation@@log.info("Not installing Weld web tier integration as no web metadata found") @AT@ 3749 @LENGTH@ 3
------------INS SimpleName@@MethodName:info:["Not installing Weld web tier integration as no web metadata found"] @TO@ MethodInvocation@@log.info("Not installing Weld web tier integration as no web metadata found") @AT@ 3753 @LENGTH@ 73
---------------INS StringLiteral@@"Not installing Weld web tier integration as no web metadata found" @TO@ SimpleName@@MethodName:info:["Not installing Weld web tier integration as no web metadata found"] @AT@ 3758 @LENGTH@ 67
------INS ReturnStatement@@ @TO@ Block@@ThenBody:{  log.info("Not installing Weld web tier integration as no web metadata found");  return;} @AT@ 3840 @LENGTH@ 7


INS MethodDeclaration@@public, static, void, MethodName:timeoutTask, CompletionService completionService,  @TO@ TypeDeclaration@@[public, final]ExecutorServiceHelper,  @AT@ 17141 @LENGTH@ 240
---INS Modifier@@public @TO@ MethodDeclaration@@public, static, void, MethodName:timeoutTask, CompletionService completionService,  @AT@ 17141 @LENGTH@ 6
---INS Modifier@@static @TO@ MethodDeclaration@@public, static, void, MethodName:timeoutTask, CompletionService completionService,  @AT@ 17148 @LENGTH@ 6
---INS PrimitiveType@@void @TO@ MethodDeclaration@@public, static, void, MethodName:timeoutTask, CompletionService completionService,  @AT@ 17155 @LENGTH@ 4
---INS SimpleName@@MethodName:timeoutTask @TO@ MethodDeclaration@@public, static, void, MethodName:timeoutTask, CompletionService completionService,  @AT@ 17160 @LENGTH@ 11
---INS SingleVariableDeclaration@@CompletionService completionService @TO@ MethodDeclaration@@public, static, void, MethodName:timeoutTask, CompletionService completionService,  @AT@ 17172 @LENGTH@ 35
------INS SimpleType@@CompletionService @TO@ SingleVariableDeclaration@@CompletionService completionService @AT@ 17172 @LENGTH@ 17
------INS SimpleName@@completionService @TO@ SingleVariableDeclaration@@CompletionService completionService @AT@ 17190 @LENGTH@ 17
---INS IfStatement@@if (completionService instanceof SubmitOrderedCompletionService) {  ((SubmitOrderedCompletionService)completionService).timeoutTask();} @TO@ MethodDeclaration@@public, static, void, MethodName:timeoutTask, CompletionService completionService,  @AT@ 17219 @LENGTH@ 156
------INS InstanceofExpression@@completionService instanceof SubmitOrderedCompletionService @TO@ IfStatement@@if (completionService instanceof SubmitOrderedCompletionService) {  ((SubmitOrderedCompletionService)completionService).timeoutTask();} @AT@ 17223 @LENGTH@ 59
---------INS SimpleName@@completionService @TO@ InstanceofExpression@@completionService instanceof SubmitOrderedCompletionService @AT@ 17223 @LENGTH@ 17
---------INS Instanceof@@instanceof @TO@ InstanceofExpression@@completionService instanceof SubmitOrderedCompletionService @AT@ 17241 @LENGTH@ 10
---------INS SimpleType@@SubmitOrderedCompletionService @TO@ InstanceofExpression@@completionService instanceof SubmitOrderedCompletionService @AT@ 17252 @LENGTH@ 30
------INS Block@@ThenBody:{  ((SubmitOrderedCompletionService)completionService).timeoutTask();} @TO@ IfStatement@@if (completionService instanceof SubmitOrderedCompletionService) {  ((SubmitOrderedCompletionService)completionService).timeoutTask();} @AT@ 17284 @LENGTH@ 91
---------INS ExpressionStatement@@MethodInvocation:((SubmitOrderedCompletionService)completionService).timeoutTask() @TO@ Block@@ThenBody:{  ((SubmitOrderedCompletionService)completionService).timeoutTask();} @AT@ 17298 @LENGTH@ 67
------------INS MethodInvocation@@((SubmitOrderedCompletionService)completionService).timeoutTask() @TO@ ExpressionStatement@@MethodInvocation:((SubmitOrderedCompletionService)completionService).timeoutTask() @AT@ 17298 @LENGTH@ 66
---------------INS ParenthesizedExpression@@((SubmitOrderedCompletionService)completionService) @TO@ MethodInvocation@@((SubmitOrderedCompletionService)completionService).timeoutTask() @AT@ 17298 @LENGTH@ 52
------------------INS CastExpression@@(SubmitOrderedCompletionService)completionService @TO@ ParenthesizedExpression@@((SubmitOrderedCompletionService)completionService) @AT@ 17299 @LENGTH@ 50
---------------------INS SimpleType@@SubmitOrderedCompletionService @TO@ CastExpression@@(SubmitOrderedCompletionService)completionService @AT@ 17300 @LENGTH@ 30
---------------------INS SimpleName@@completionService @TO@ CastExpression@@(SubmitOrderedCompletionService)completionService @AT@ 17332 @LENGTH@ 17
---------------INS SimpleName@@MethodName:timeoutTask:[] @TO@ MethodInvocation@@((SubmitOrderedCompletionService)completionService).timeoutTask() @AT@ 17351 @LENGTH@ 13


INS VariableDeclarationStatement@@final Set<BindingConfiguration> uniqueBindings=new HashSet(bindings); @TO@ MethodDeclaration@@private, void, MethodName:processBindings, DeploymentPhaseContext phaseContext, ComponentConfiguration configuration, ServiceTarget serviceTarget, ServiceName contextServiceName, InjectionSource.ResolutionContext resolutionContext, List<BindingConfiguration> bindings, DeploymentUnitProcessingException,  @AT@ 10236 @LENGTH@ 71
---INS Modifier@@final @TO@ VariableDeclarationStatement@@final Set<BindingConfiguration> uniqueBindings=new HashSet(bindings); @AT@ 10236 @LENGTH@ 5
---INS ParameterizedType@@Set<BindingConfiguration> @TO@ VariableDeclarationStatement@@final Set<BindingConfiguration> uniqueBindings=new HashSet(bindings); @AT@ 10242 @LENGTH@ 25
------INS SimpleType@@Set @TO@ ParameterizedType@@Set<BindingConfiguration> @AT@ 10242 @LENGTH@ 3
------INS SimpleType@@BindingConfiguration @TO@ ParameterizedType@@Set<BindingConfiguration> @AT@ 10246 @LENGTH@ 20
---INS VariableDeclarationFragment@@uniqueBindings=new HashSet(bindings) @TO@ VariableDeclarationStatement@@final Set<BindingConfiguration> uniqueBindings=new HashSet(bindings); @AT@ 10268 @LENGTH@ 38
------INS SimpleName@@uniqueBindings @TO@ VariableDeclarationFragment@@uniqueBindings=new HashSet(bindings) @AT@ 10268 @LENGTH@ 14
------INS ClassInstanceCreation@@HashSet[bindings] @TO@ VariableDeclarationFragment@@uniqueBindings=new HashSet(bindings) @AT@ 10285 @LENGTH@ 21
---------INS New@@new @TO@ ClassInstanceCreation@@HashSet[bindings] @AT@ 10285 @LENGTH@ 3
---------INS SimpleType@@HashSet @TO@ ClassInstanceCreation@@HashSet[bindings] @AT@ 10289 @LENGTH@ 7
---------INS SimpleName@@bindings @TO@ ClassInstanceCreation@@HashSet[bindings] @AT@ 10297 @LENGTH@ 8


UPD IfStatement@@if (destination == null) {  try {    destination=message.getJMSReplyTo();  } catch (  JMSException e) {    if (LOG.isDebugEnabled()) {      LOG.debug("Cannot read JMSReplyTo header. Will ignore this exception.",e);    }  }} @TO@ if (destination == null) {  destination=JmsMessageHelper.getJMSReplyTo(message);} @AT@ 12280 @LENGTH@ 320
---UPD Block@@ThenBody:{  try {    destination=message.getJMSReplyTo();  } catch (  JMSException e) {    if (LOG.isDebugEnabled()) {      LOG.debug("Cannot read JMSReplyTo header. Will ignore this exception.",e);    }  }} @TO@ ThenBody:{  destination=JmsMessageHelper.getJMSReplyTo(message);} @AT@ 12305 @LENGTH@ 295
------DEL TryStatement@@try {  destination=message.getJMSReplyTo();} catch (JMSException e) {  if (LOG.isDebugEnabled()) {    LOG.debug("Cannot read JMSReplyTo header. Will ignore this exception.",e);  }} @AT@ 12319 @LENGTH@ 271
---------DEL ExpressionStatement@@Assignment:destination=message.getJMSReplyTo() @AT@ 12341 @LENGTH@ 38
---------DEL CatchClause@@catch (JMSException e) {  if (LOG.isDebugEnabled()) {    LOG.debug("Cannot read JMSReplyTo header. Will ignore this exception.",e);  }} @AT@ 12394 @LENGTH@ 196
------------DEL SingleVariableDeclaration@@JMSException e @AT@ 12401 @LENGTH@ 14
---------------DEL SimpleType@@JMSException @AT@ 12401 @LENGTH@ 12
---------------DEL SimpleName@@e @AT@ 12414 @LENGTH@ 1
------------DEL IfStatement@@if (LOG.isDebugEnabled()) {  LOG.debug("Cannot read JMSReplyTo header. Will ignore this exception.",e);} @AT@ 12435 @LENGTH@ 141
---------------DEL MethodInvocation@@LOG.isDebugEnabled() @AT@ 12439 @LENGTH@ 20
------------------DEL SimpleName@@Name:LOG @AT@ 12439 @LENGTH@ 3
------------------DEL SimpleName@@MethodName:isDebugEnabled:[] @AT@ 12443 @LENGTH@ 16
---------------DEL Block@@ThenBody:{  LOG.debug("Cannot read JMSReplyTo header. Will ignore this exception.",e);} @AT@ 12461 @LENGTH@ 115
------------------DEL ExpressionStatement@@MethodInvocation:LOG.debug("Cannot read JMSReplyTo header. Will ignore this exception.",e) @AT@ 12483 @LENGTH@ 75
---------------------DEL MethodInvocation@@LOG.debug("Cannot read JMSReplyTo header. Will ignore this exception.",e) @AT@ 12483 @LENGTH@ 74
------------------------DEL SimpleName@@Name:LOG @AT@ 12483 @LENGTH@ 3
------------------------DEL SimpleName@@MethodName:debug:["Cannot read JMSReplyTo header. Will ignore this exception.", e] @AT@ 12487 @LENGTH@ 70
---------------------------DEL StringLiteral@@"Cannot read JMSReplyTo header. Will ignore this exception." @AT@ 12493 @LENGTH@ 60
---------------------------DEL SimpleName@@e @AT@ 12555 @LENGTH@ 1
------INS ExpressionStatement@@Assignment:destination=JmsMessageHelper.getJMSReplyTo(message) @TO@ Block@@ThenBody:{  try {    destination=message.getJMSReplyTo();  } catch (  JMSException e) {    if (LOG.isDebugEnabled()) {      LOG.debug("Cannot read JMSReplyTo header. Will ignore this exception.",e);    }  }} @AT@ 12319 @LENGTH@ 54
---------MOV Assignment@@destination=message.getJMSReplyTo() @TO@ ExpressionStatement@@Assignment:destination=JmsMessageHelper.getJMSReplyTo(message) @AT@ 12341 @LENGTH@ 37


UPD ExpressionStatement@@Assignment:response=client.resource("http://localhost:" + port + "/sparklr/json/photos").header("Authorization",String.format("OAuth %s",accessToken.getValue())).get(ClientResponse.class) @TO@ Assignment:response=client.resource("http://localhost:" + port + "/sparklr/json/photos").header("Authorization",String.format("OAuth2 %s",accessToken.getValue())).get(ClientResponse.class) @AT@ 2105 @LENGTH@ 195
---UPD Assignment@@response=client.resource("http://localhost:" + port + "/sparklr/json/photos").header("Authorization",String.format("OAuth %s",accessToken.getValue())).get(ClientResponse.class) @TO@ response=client.resource("http://localhost:" + port + "/sparklr/json/photos").header("Authorization",String.format("OAuth2 %s",accessToken.getValue())).get(ClientResponse.class) @AT@ 2105 @LENGTH@ 194
------UPD MethodInvocation@@client.resource("http://localhost:" + port + "/sparklr/json/photos").header("Authorization",String.format("OAuth %s",accessToken.getValue())).get(ClientResponse.class) @TO@ client.resource("http://localhost:" + port + "/sparklr/json/photos").header("Authorization",String.format("OAuth2 %s",accessToken.getValue())).get(ClientResponse.class) @AT@ 2116 @LENGTH@ 183
---------UPD MethodInvocation@@MethodName:header:["Authorization", String.format("OAuth %s",accessToken.getValue())] @TO@ MethodName:header:["Authorization", String.format("OAuth2 %s",accessToken.getValue())] @AT@ 2116 @LENGTH@ 150
------------UPD MethodInvocation@@String.format("OAuth %s",accessToken.getValue()) @TO@ String.format("OAuth2 %s",accessToken.getValue()) @AT@ 2216 @LENGTH@ 49
---------------UPD SimpleName@@MethodName:format:["OAuth %s", accessToken.getValue()] @TO@ MethodName:format:["OAuth2 %s", accessToken.getValue()] @AT@ 2223 @LENGTH@ 42
------------------UPD StringLiteral@@"OAuth %s" @TO@ "OAuth2 %s" @AT@ 2230 @LENGTH@ 10


UPD IfStatement@@if (singleton) {  servicesToClose.add(service);} @TO@ if (singleton && !(service instanceof Endpoint)) {  servicesToClose.add(service);} @AT@ 36333 @LENGTH@ 76
---DEL SimpleName@@singleton @AT@ 36337 @LENGTH@ 9
---INS InfixExpression@@singleton && !(service instanceof Endpoint) @TO@ IfStatement@@if (singleton) {  servicesToClose.add(service);} @AT@ 36401 @LENGTH@ 43
------INS SimpleName@@singleton @TO@ InfixExpression@@singleton && !(service instanceof Endpoint) @AT@ 36401 @LENGTH@ 9
------INS Operator@@&& @TO@ InfixExpression@@singleton && !(service instanceof Endpoint) @AT@ 36410 @LENGTH@ 2
------INS PrefixExpression@@!(service instanceof Endpoint) @TO@ InfixExpression@@singleton && !(service instanceof Endpoint) @AT@ 36414 @LENGTH@ 30
---------INS Operator@@! @TO@ PrefixExpression@@!(service instanceof Endpoint) @AT@ 36414 @LENGTH@ 1
---------INS ParenthesizedExpression@@(service instanceof Endpoint) @TO@ PrefixExpression@@!(service instanceof Endpoint) @AT@ 36415 @LENGTH@ 29
------------INS InstanceofExpression@@service instanceof Endpoint @TO@ ParenthesizedExpression@@(service instanceof Endpoint) @AT@ 36416 @LENGTH@ 27
---------------INS SimpleName@@service @TO@ InstanceofExpression@@service instanceof Endpoint @AT@ 36416 @LENGTH@ 7
---------------INS Instanceof@@instanceof @TO@ InstanceofExpression@@service instanceof Endpoint @AT@ 36424 @LENGTH@ 10
---------------INS SimpleType@@Endpoint @TO@ InstanceofExpression@@service instanceof Endpoint @AT@ 36435 @LENGTH@ 8


UPD MethodDeclaration@@public, boolean, MethodName:canAppearNext, CommandContext ctx,  @TO@ public, boolean, MethodName:canAppearNext, CommandContext ctx, CommandFormatException,  @AT@ 2237 @LENGTH@ 207
---INS SimpleType@@CommandFormatException @TO@ MethodDeclaration@@public, boolean, MethodName:canAppearNext, CommandContext ctx,  @AT@ 2293 @LENGTH@ 22


INS ExpressionStatement@@MethodInvocation:CurrentServiceRegistry.setServiceRegistry(null) @TO@ MethodDeclaration@@public, synchronized, void, MethodName:stop, final StopContext context,  @AT@ 8533 @LENGTH@ 48
---INS MethodInvocation@@CurrentServiceRegistry.setServiceRegistry(null) @TO@ ExpressionStatement@@MethodInvocation:CurrentServiceRegistry.setServiceRegistry(null) @AT@ 8533 @LENGTH@ 47
------INS SimpleName@@Name:CurrentServiceRegistry @TO@ MethodInvocation@@CurrentServiceRegistry.setServiceRegistry(null) @AT@ 8533 @LENGTH@ 22
------INS SimpleName@@MethodName:setServiceRegistry:[null] @TO@ MethodInvocation@@CurrentServiceRegistry.setServiceRegistry(null) @AT@ 8556 @LENGTH@ 24
---------INS NullLiteral@@null @TO@ SimpleName@@MethodName:setServiceRegistry:[null] @AT@ 8575 @LENGTH@ 4


INS MethodDeclaration@@public, void, MethodName:findsNested,  @TO@ TypeDeclaration@@[@SuppressWarnings("unused"), public]PropertyUnitTests,  @AT@ 4001 @LENGTH@ 106
---INS Modifier@@public @TO@ MethodDeclaration@@public, void, MethodName:findsNested,  @AT@ 4001 @LENGTH@ 6
---INS PrimitiveType@@void @TO@ MethodDeclaration@@public, void, MethodName:findsNested,  @AT@ 4008 @LENGTH@ 4
---INS SimpleName@@MethodName:findsNested @TO@ MethodDeclaration@@public, void, MethodName:findsNested,  @AT@ 4013 @LENGTH@ 11
---INS VariableDeclarationStatement@@Property from=Property.from("barUserName",Sample.class); @TO@ MethodDeclaration@@public, void, MethodName:findsNested,  @AT@ 4042 @LENGTH@ 59
------INS SimpleType@@Property @TO@ VariableDeclarationStatement@@Property from=Property.from("barUserName",Sample.class); @AT@ 4042 @LENGTH@ 8
------INS VariableDeclarationFragment@@from=Property.from("barUserName",Sample.class) @TO@ VariableDeclarationStatement@@Property from=Property.from("barUserName",Sample.class); @AT@ 4051 @LENGTH@ 49
---------INS SimpleName@@from @TO@ VariableDeclarationFragment@@from=Property.from("barUserName",Sample.class) @AT@ 4051 @LENGTH@ 4
---------INS MethodInvocation@@Property.from("barUserName",Sample.class) @TO@ VariableDeclarationFragment@@from=Property.from("barUserName",Sample.class) @AT@ 4058 @LENGTH@ 42
------------INS SimpleName@@Name:Property @TO@ MethodInvocation@@Property.from("barUserName",Sample.class) @AT@ 4058 @LENGTH@ 8
------------INS SimpleName@@MethodName:from:["barUserName", Sample.class] @TO@ MethodInvocation@@Property.from("barUserName",Sample.class) @AT@ 4067 @LENGTH@ 33
---------------INS StringLiteral@@"barUserName" @TO@ SimpleName@@MethodName:from:["barUserName", Sample.class] @AT@ 4072 @LENGTH@ 13
---------------INS TypeLiteral@@Sample.class @TO@ SimpleName@@MethodName:from:["barUserName", Sample.class] @AT@ 4087 @LENGTH@ 12


UPD ReturnStatement@@InfixExpression:"https://github.com/" + providerAccountId @TO@ MethodInvocation:github.getProfileUrl() @AT@ 1802 @LENGTH@ 49
---DEL InfixExpression@@"https://github.com/" + providerAccountId @AT@ 1809 @LENGTH@ 41
------DEL StringLiteral@@"https://github.com/" @AT@ 1809 @LENGTH@ 21
------DEL Operator@@+ @AT@ 1830 @LENGTH@ 1
------DEL SimpleName@@providerAccountId @AT@ 1833 @LENGTH@ 17
---INS MethodInvocation@@github.getProfileUrl() @TO@ ReturnStatement@@InfixExpression:"https://github.com/" + providerAccountId @AT@ 1809 @LENGTH@ 22
------INS SimpleName@@Name:github @TO@ MethodInvocation@@github.getProfileUrl() @AT@ 1809 @LENGTH@ 6
------INS SimpleName@@MethodName:getProfileUrl:[] @TO@ MethodInvocation@@github.getProfileUrl() @AT@ 1816 @LENGTH@ 15


UPD Block@@ElseBody:if (!(buffer.startsWith(File.separator))) {  translated=new File("").getAbsolutePath() + File.separator + buffer;} else {  translated=buffer;} @TO@ ElseBody:if (!startsWithRoot(buffer)) {  translated=new File("").getAbsolutePath() + File.separator + buffer;} else {  translated=buffer;} @AT@ 1761 @LENGTH@ 206
---UPD IfStatement@@if (!(buffer.startsWith(File.separator))) {  translated=new File("").getAbsolutePath() + File.separator + buffer;} else {  translated=buffer;} @TO@ if (!startsWithRoot(buffer)) {  translated=new File("").getAbsolutePath() + File.separator + buffer;} else {  translated=buffer;} @AT@ 1761 @LENGTH@ 206
------UPD PrefixExpression@@!(buffer.startsWith(File.separator)) @TO@ !startsWithRoot(buffer) @AT@ 1765 @LENGTH@ 36
---------DEL ParenthesizedExpression@@(buffer.startsWith(File.separator)) @AT@ 1766 @LENGTH@ 35
------------DEL MethodInvocation@@buffer.startsWith(File.separator) @AT@ 1767 @LENGTH@ 33
---------------DEL SimpleName@@Name:buffer @AT@ 1767 @LENGTH@ 6
---------INS MethodInvocation@@startsWithRoot(buffer) @TO@ PrefixExpression@@!(buffer.startsWith(File.separator)) @AT@ 1827 @LENGTH@ 22
------------MOV SimpleName@@MethodName:startsWith:[File.separator] @TO@ MethodInvocation@@startsWithRoot(buffer) @AT@ 1774 @LENGTH@ 26
---------------DEL QualifiedName@@File.separator @AT@ 1785 @LENGTH@ 14
------------------DEL SimpleName@@File @AT@ 1785 @LENGTH@ 4
------------------DEL SimpleName@@separator @AT@ 1790 @LENGTH@ 9
---------------INS SimpleName@@buffer @TO@ SimpleName@@MethodName:startsWith:[File.separator] @AT@ 1842 @LENGTH@ 6
------------MOV SimpleName@@MethodName:startsWith:[File.separator] @TO@ MethodInvocation@@startsWithRoot(buffer) @AT@ 1774 @LENGTH@ 26
---------------DEL QualifiedName@@File.separator @AT@ 1785 @LENGTH@ 14
------------------DEL SimpleName@@File @AT@ 1785 @LENGTH@ 4
------------------DEL SimpleName@@separator @AT@ 1790 @LENGTH@ 9
---------------INS SimpleName@@buffer @TO@ SimpleName@@MethodName:startsWith:[File.separator] @AT@ 1842 @LENGTH@ 6
------------MOV SimpleName@@MethodName:startsWith:[File.separator] @TO@ MethodInvocation@@startsWithRoot(buffer) @AT@ 1774 @LENGTH@ 26
---------------DEL QualifiedName@@File.separator @AT@ 1785 @LENGTH@ 14
------------------DEL SimpleName@@File @AT@ 1785 @LENGTH@ 4
------------------DEL SimpleName@@separator @AT@ 1790 @LENGTH@ 9
---------------INS SimpleName@@buffer @TO@ SimpleName@@MethodName:startsWith:[File.separator] @AT@ 1842 @LENGTH@ 6
------------MOV SimpleName@@MethodName:startsWith:[File.separator] @TO@ MethodInvocation@@startsWithRoot(buffer) @AT@ 1774 @LENGTH@ 26
---------------DEL QualifiedName@@File.separator @AT@ 1785 @LENGTH@ 14
------------------DEL SimpleName@@File @AT@ 1785 @LENGTH@ 4
------------------DEL SimpleName@@separator @AT@ 1790 @LENGTH@ 9
---------------INS SimpleName@@buffer @TO@ SimpleName@@MethodName:startsWith:[File.separator] @AT@ 1842 @LENGTH@ 6
------------MOV SimpleName@@MethodName:startsWith:[File.separator] @TO@ MethodInvocation@@startsWithRoot(buffer) @AT@ 1774 @LENGTH@ 26
---------------DEL QualifiedName@@File.separator @AT@ 1785 @LENGTH@ 14
------------------DEL SimpleName@@File @AT@ 1785 @LENGTH@ 4
------------------DEL SimpleName@@separator @AT@ 1790 @LENGTH@ 9
---------------INS SimpleName@@buffer @TO@ SimpleName@@MethodName:startsWith:[File.separator] @AT@ 1842 @LENGTH@ 6
---UPD IfStatement@@if (!(buffer.startsWith(File.separator))) {  translated=new File("").getAbsolutePath() + File.separator + buffer;} else {  translated=buffer;} @TO@ if (!startsWithRoot(buffer)) {  translated=new File("").getAbsolutePath() + File.separator + buffer;} else {  translated=buffer;} @AT@ 1761 @LENGTH@ 206
------UPD PrefixExpression@@!(buffer.startsWith(File.separator)) @TO@ !startsWithRoot(buffer) @AT@ 1765 @LENGTH@ 36
---------DEL ParenthesizedExpression@@(buffer.startsWith(File.separator)) @AT@ 1766 @LENGTH@ 35
------------DEL MethodInvocation@@buffer.startsWith(File.separator) @AT@ 1767 @LENGTH@ 33
---------------DEL SimpleName@@Name:buffer @AT@ 1767 @LENGTH@ 6
---------INS MethodInvocation@@startsWithRoot(buffer) @TO@ PrefixExpression@@!(buffer.startsWith(File.separator)) @AT@ 1827 @LENGTH@ 22
------------MOV SimpleName@@MethodName:startsWith:[File.separator] @TO@ MethodInvocation@@startsWithRoot(buffer) @AT@ 1774 @LENGTH@ 26
---------------DEL QualifiedName@@File.separator @AT@ 1785 @LENGTH@ 14
------------------DEL SimpleName@@File @AT@ 1785 @LENGTH@ 4
------------------DEL SimpleName@@separator @AT@ 1790 @LENGTH@ 9
---------------INS SimpleName@@buffer @TO@ SimpleName@@MethodName:startsWith:[File.separator] @AT@ 1842 @LENGTH@ 6
------------MOV SimpleName@@MethodName:startsWith:[File.separator] @TO@ MethodInvocation@@startsWithRoot(buffer) @AT@ 1774 @LENGTH@ 26
---------------DEL QualifiedName@@File.separator @AT@ 1785 @LENGTH@ 14
------------------DEL SimpleName@@File @AT@ 1785 @LENGTH@ 4
------------------DEL SimpleName@@separator @AT@ 1790 @LENGTH@ 9
---------------INS SimpleName@@buffer @TO@ SimpleName@@MethodName:startsWith:[File.separator] @AT@ 1842 @LENGTH@ 6
------------MOV SimpleName@@MethodName:startsWith:[File.separator] @TO@ MethodInvocation@@startsWithRoot(buffer) @AT@ 1774 @LENGTH@ 26
---------------DEL QualifiedName@@File.separator @AT@ 1785 @LENGTH@ 14
------------------DEL SimpleName@@File @AT@ 1785 @LENGTH@ 4
------------------DEL SimpleName@@separator @AT@ 1790 @LENGTH@ 9
---------------INS SimpleName@@buffer @TO@ SimpleName@@MethodName:startsWith:[File.separator] @AT@ 1842 @LENGTH@ 6
------------MOV SimpleName@@MethodName:startsWith:[File.separator] @TO@ MethodInvocation@@startsWithRoot(buffer) @AT@ 1774 @LENGTH@ 26
---------------DEL QualifiedName@@File.separator @AT@ 1785 @LENGTH@ 14
------------------DEL SimpleName@@File @AT@ 1785 @LENGTH@ 4
------------------DEL SimpleName@@separator @AT@ 1790 @LENGTH@ 9
---------------INS SimpleName@@buffer @TO@ SimpleName@@MethodName:startsWith:[File.separator] @AT@ 1842 @LENGTH@ 6
------------MOV SimpleName@@MethodName:startsWith:[File.separator] @TO@ MethodInvocation@@startsWithRoot(buffer) @AT@ 1774 @LENGTH@ 26
---------------DEL QualifiedName@@File.separator @AT@ 1785 @LENGTH@ 14
------------------DEL SimpleName@@File @AT@ 1785 @LENGTH@ 4
------------------DEL SimpleName@@separator @AT@ 1790 @LENGTH@ 9
---------------INS SimpleName@@buffer @TO@ SimpleName@@MethodName:startsWith:[File.separator] @AT@ 1842 @LENGTH@ 6


UPD VariableDeclarationStatement@@final BatchBuilder batchBuilder=updateContext.getServiceTarget(); @TO@ final ServiceTarget target=updateContext.getServiceTarget(); @AT@ 2472 @LENGTH@ 67
---UPD SimpleType@@BatchBuilder @TO@ ServiceTarget @AT@ 2478 @LENGTH@ 12
---UPD VariableDeclarationFragment@@batchBuilder=updateContext.getServiceTarget() @TO@ target=updateContext.getServiceTarget() @AT@ 2491 @LENGTH@ 47
------UPD SimpleName@@batchBuilder @TO@ target @AT@ 2491 @LENGTH@ 12


INS MethodDeclaration@@protected, boolean, MethodName:startsWithRoot, String path,  @TO@ TypeDeclaration@@[public]DefaultFilenameTabCompleter, FilenameTabCompleter @AT@ 2638 @LENGTH@ 99
---INS Modifier@@protected @TO@ MethodDeclaration@@protected, boolean, MethodName:startsWithRoot, String path,  @AT@ 2638 @LENGTH@ 9
---INS PrimitiveType@@boolean @TO@ MethodDeclaration@@protected, boolean, MethodName:startsWithRoot, String path,  @AT@ 2648 @LENGTH@ 7
---INS SimpleName@@MethodName:startsWithRoot @TO@ MethodDeclaration@@protected, boolean, MethodName:startsWithRoot, String path,  @AT@ 2656 @LENGTH@ 14
---INS SingleVariableDeclaration@@String path @TO@ MethodDeclaration@@protected, boolean, MethodName:startsWithRoot, String path,  @AT@ 2671 @LENGTH@ 11
------INS SimpleType@@String @TO@ SingleVariableDeclaration@@String path @AT@ 2671 @LENGTH@ 6
------INS SimpleName@@path @TO@ SingleVariableDeclaration@@String path @AT@ 2678 @LENGTH@ 4
---INS ReturnStatement@@MethodInvocation:path.startsWith(File.separator) @TO@ MethodDeclaration@@protected, boolean, MethodName:startsWithRoot, String path,  @AT@ 2693 @LENGTH@ 39
------INS MethodInvocation@@path.startsWith(File.separator) @TO@ ReturnStatement@@MethodInvocation:path.startsWith(File.separator) @AT@ 2700 @LENGTH@ 31
---------INS SimpleName@@Name:path @TO@ MethodInvocation@@path.startsWith(File.separator) @AT@ 2700 @LENGTH@ 4
---------INS SimpleName@@MethodName:startsWith:[File.separator] @TO@ MethodInvocation@@path.startsWith(File.separator) @AT@ 2705 @LENGTH@ 26
------------INS QualifiedName@@File.separator @TO@ SimpleName@@MethodName:startsWith:[File.separator] @AT@ 2716 @LENGTH@ 14
---------------INS SimpleName@@File @TO@ QualifiedName@@File.separator @AT@ 2716 @LENGTH@ 4
---------------INS SimpleName@@separator @TO@ QualifiedName@@File.separator @AT@ 2721 @LENGTH@ 9


UPD IfStatement@@if (!phaseContext.getDeploymentUnit().getAttachment(Attachments.SERVICES).getServiceImplementations(ServiceActivator.class.getName()).isEmpty()) {  phaseContext.getDeploymentUnit().addToAttachmentList(Attachments.MODULE_DEPENDENCIES,MSC_DEP);} @TO@ if (servicesAttachments != null && !servicesAttachments.getServiceImplementations(ServiceActivator.class.getName()).isEmpty()) {  phaseContext.getDeploymentUnit().addToAttachmentList(Attachments.MODULE_DEPENDENCIES,MSC_DEP);} @AT@ 2499 @LENGTH@ 264
---UPD PrefixExpression@@!phaseContext.getDeploymentUnit().getAttachment(Attachments.SERVICES).getServiceImplementations(ServiceActivator.class.getName()).isEmpty() @TO@ !servicesAttachments.getServiceImplementations(ServiceActivator.class.getName()).isEmpty() @AT@ 2502 @LENGTH@ 140
---INS InfixExpression@@servicesAttachments != null && !servicesAttachments.getServiceImplementations(ServiceActivator.class.getName()).isEmpty() @TO@ IfStatement@@if (!phaseContext.getDeploymentUnit().getAttachment(Attachments.SERVICES).getServiceImplementations(ServiceActivator.class.getName()).isEmpty()) {  phaseContext.getDeploymentUnit().addToAttachmentList(Attachments.MODULE_DEPENDENCIES,MSC_DEP);} @AT@ 2685 @LENGTH@ 121
------MOV PrefixExpression@@!phaseContext.getDeploymentUnit().getAttachment(Attachments.SERVICES).getServiceImplementations(ServiceActivator.class.getName()).isEmpty() @TO@ InfixExpression@@servicesAttachments != null && !servicesAttachments.getServiceImplementations(ServiceActivator.class.getName()).isEmpty() @AT@ 2502 @LENGTH@ 140
---------UPD MethodInvocation@@phaseContext.getDeploymentUnit().getAttachment(Attachments.SERVICES).getServiceImplementations(ServiceActivator.class.getName()).isEmpty() @TO@ servicesAttachments.getServiceImplementations(ServiceActivator.class.getName()).isEmpty() @AT@ 2504 @LENGTH@ 138
------------DEL MethodInvocation@@MethodName:getAttachment:[Attachments.SERVICES] @AT@ 2504 @LENGTH@ 68
---------------DEL QualifiedName@@Attachments.SERVICES @AT@ 2551 @LENGTH@ 20
------------------DEL SimpleName@@Attachments @AT@ 2551 @LENGTH@ 11
------------------DEL SimpleName@@SERVICES @AT@ 2563 @LENGTH@ 8
------------DEL MethodInvocation@@MethodName:getDeploymentUnit:[] @AT@ 2504 @LENGTH@ 32
------------DEL SimpleName@@Name:phaseContext @AT@ 2504 @LENGTH@ 12
------------INS SimpleName@@Name:servicesAttachments @TO@ MethodInvocation@@phaseContext.getDeploymentUnit().getAttachment(Attachments.SERVICES).getServiceImplementations(ServiceActivator.class.getName()).isEmpty() @AT@ 2717 @LENGTH@ 19
------INS InfixExpression@@servicesAttachments != null @TO@ InfixExpression@@servicesAttachments != null && !servicesAttachments.getServiceImplementations(ServiceActivator.class.getName()).isEmpty() @AT@ 2685 @LENGTH@ 27
---------INS SimpleName@@servicesAttachments @TO@ InfixExpression@@servicesAttachments != null @AT@ 2685 @LENGTH@ 19
---------INS Operator@@!= @TO@ InfixExpression@@servicesAttachments != null @AT@ 2704 @LENGTH@ 2
---------INS NullLiteral@@null @TO@ InfixExpression@@servicesAttachments != null @AT@ 2708 @LENGTH@ 4
------INS Operator@@&& @TO@ InfixExpression@@servicesAttachments != null && !servicesAttachments.getServiceImplementations(ServiceActivator.class.getName()).isEmpty() @AT@ 2712 @LENGTH@ 2


INS ExpressionStatement@@MethodInvocation:Mailbox.clearAll() @TO@ MethodDeclaration@@public, void, MethodName:testConsumeWithAdditionalProperties, Exception,  @AT@ 1789 @LENGTH@ 19
---INS MethodInvocation@@Mailbox.clearAll() @TO@ ExpressionStatement@@MethodInvocation:Mailbox.clearAll() @AT@ 1789 @LENGTH@ 18
------INS SimpleName@@Name:Mailbox @TO@ MethodInvocation@@Mailbox.clearAll() @AT@ 1789 @LENGTH@ 7
------INS SimpleName@@MethodName:clearAll:[] @TO@ MethodInvocation@@Mailbox.clearAll() @AT@ 1797 @LENGTH@ 10


INS MethodDeclaration@@private, Long, MethodName:expireTime, long expireTime,  @TO@ TypeDeclaration@@[private, final]ServiceProviderConnectionMapper, [RowMapper<ServiceProviderConnection<?>>] @AT@ 10663 @LENGTH@ 93
---INS Modifier@@private @TO@ MethodDeclaration@@private, Long, MethodName:expireTime, long expireTime,  @AT@ 10663 @LENGTH@ 7
---INS SimpleType@@Long @TO@ MethodDeclaration@@private, Long, MethodName:expireTime, long expireTime,  @AT@ 10671 @LENGTH@ 4
---INS SimpleName@@MethodName:expireTime @TO@ MethodDeclaration@@private, Long, MethodName:expireTime, long expireTime,  @AT@ 10676 @LENGTH@ 10
---INS SingleVariableDeclaration@@long expireTime @TO@ MethodDeclaration@@private, Long, MethodName:expireTime, long expireTime,  @AT@ 10687 @LENGTH@ 15
------INS PrimitiveType@@long @TO@ SingleVariableDeclaration@@long expireTime @AT@ 10687 @LENGTH@ 4
------INS SimpleName@@expireTime @TO@ SingleVariableDeclaration@@long expireTime @AT@ 10692 @LENGTH@ 10
---INS ReturnStatement@@ConditionalExpression:expireTime == 0 ? null : expireTime @TO@ MethodDeclaration@@private, Long, MethodName:expireTime, long expireTime,  @AT@ 10709 @LENGTH@ 43
------INS ConditionalExpression@@expireTime == 0 ? null : expireTime @TO@ ReturnStatement@@ConditionalExpression:expireTime == 0 ? null : expireTime @AT@ 10716 @LENGTH@ 35
---------INS InfixExpression@@expireTime == 0 @TO@ ConditionalExpression@@expireTime == 0 ? null : expireTime @AT@ 10716 @LENGTH@ 15
------------INS SimpleName@@expireTime @TO@ InfixExpression@@expireTime == 0 @AT@ 10716 @LENGTH@ 10
------------INS Operator@@== @TO@ InfixExpression@@expireTime == 0 @AT@ 10726 @LENGTH@ 2
------------INS NumberLiteral@@0 @TO@ InfixExpression@@expireTime == 0 @AT@ 10730 @LENGTH@ 1
---------INS NullLiteral@@null @TO@ ConditionalExpression@@expireTime == 0 ? null : expireTime @AT@ 10734 @LENGTH@ 4
---------INS SimpleName@@expireTime @TO@ ConditionalExpression@@expireTime == 0 ? null : expireTime @AT@ 10741 @LENGTH@ 10


UPD TryStatement@@try {  ModelNode param=operation.get(SCHEMA_LOCATION);  ModelNode locations=context.getSubModel().get(SCHEMA_LOCATIONS);  ModelNode toRemove=null;  String failure=typeValidator.validateParameter(SCHEMA_LOCATION,param);  if (failure == null) {    ModelNode newList=new ModelNode().setEmptyList();    String uri=param.asProperty().getName();    if (locations.isDefined()) {      for (      Property location : locations.asPropertyList()) {        if (!uri.equals(location.getName())) {          toRemove=newList.add(location.getName(),location.getValue());          break;        }      }    }    if (toRemove != null) {      locations.set(newList);      ModelNode compensating=SchemaLocationAddHandler.getAddSchemaLocationOperation(operation.get(OP_ADDR),toRemove);      resultHandler.handleResultComplete(compensating);    } else {      failure="No schema location with URI " + uri + "found";    }  }  if (failure != null) {    resultHandler.handleFailed(new ModelNode().set(failure));  }} catch (Exception e) {  resultHandler.handleFailed(new ModelNode().set(e.getLocalizedMessage()));} @TO@ try {  ModelNode param=operation.get(SCHEMA_LOCATION);  String failure=typeValidator.validateParameter(SCHEMA_LOCATION,param);  if (failure == null) {    ModelNode locations=context.getSubModel().get(SCHEMA_LOCATIONS);    Property toRemove=null;    ModelNode newList=new ModelNode().setEmptyList();    String uri=param.asString();    if (locations.isDefined()) {      for (      Property location : locations.asPropertyList()) {        if (uri.equals(location.getName())) {          toRemove=location;        } else {          newList.add(location.getName(),location.getValue());        }      }    }    if (toRemove != null) {      locations.set(newList);      ModelNode compensating=SchemaLocationAddHandler.getAddSchemaLocationOperation(operation.get(OP_ADDR),toRemove);      resultHandler.handleResultComplete(compensating);    } else {      failure="No schema location with URI " + uri + " found";    }  }  if (failure != null) {    resultHandler.handleFailed(new ModelNode().set(failure));  }} catch (Exception e) {  resultHandler.handleFailed(new ModelNode().set(e.getLocalizedMessage()));} @AT@ 3053 @LENGTH@ 1511
---DEL VariableDeclarationStatement@@ModelNode toRemove=null; @AT@ 3212 @LENGTH@ 26
------DEL SimpleType@@ModelNode @AT@ 3212 @LENGTH@ 9
------DEL VariableDeclarationFragment@@toRemove=null @AT@ 3222 @LENGTH@ 15
---------DEL SimpleName@@toRemove @AT@ 3222 @LENGTH@ 8
---------DEL NullLiteral@@null @AT@ 3233 @LENGTH@ 4
---UPD IfStatement@@if (failure == null) {  ModelNode newList=new ModelNode().setEmptyList();  String uri=param.asProperty().getName();  if (locations.isDefined()) {    for (    Property location : locations.asPropertyList()) {      if (!uri.equals(location.getName())) {        toRemove=newList.add(location.getName(),location.getValue());        break;      }    }  }  if (toRemove != null) {    locations.set(newList);    ModelNode compensating=SchemaLocationAddHandler.getAddSchemaLocationOperation(operation.get(OP_ADDR),toRemove);    resultHandler.handleResultComplete(compensating);  } else {    failure="No schema location with URI " + uri + "found";  }} @TO@ if (failure == null) {  ModelNode locations=context.getSubModel().get(SCHEMA_LOCATIONS);  Property toRemove=null;  ModelNode newList=new ModelNode().setEmptyList();  String uri=param.asString();  if (locations.isDefined()) {    for (    Property location : locations.asPropertyList()) {      if (uri.equals(location.getName())) {        toRemove=location;      } else {        newList.add(location.getName(),location.getValue());      }    }  }  if (toRemove != null) {    locations.set(newList);    ModelNode compensating=SchemaLocationAddHandler.getAddSchemaLocationOperation(operation.get(OP_ADDR),toRemove);    resultHandler.handleResultComplete(compensating);  } else {    failure="No schema location with URI " + uri + " found";  }} @AT@ 3337 @LENGTH@ 967
------UPD Block@@ThenBody:{  ModelNode newList=new ModelNode().setEmptyList();  String uri=param.asProperty().getName();  if (locations.isDefined()) {    for (    Property location : locations.asPropertyList()) {      if (!uri.equals(location.getName())) {        toRemove=newList.add(location.getName(),location.getValue());        break;      }    }  }  if (toRemove != null) {    locations.set(newList);    ModelNode compensating=SchemaLocationAddHandler.getAddSchemaLocationOperation(operation.get(OP_ADDR),toRemove);    resultHandler.handleResultComplete(compensating);  } else {    failure="No schema location with URI " + uri + "found";  }} @TO@ ThenBody:{  ModelNode locations=context.getSubModel().get(SCHEMA_LOCATIONS);  Property toRemove=null;  ModelNode newList=new ModelNode().setEmptyList();  String uri=param.asString();  if (locations.isDefined()) {    for (    Property location : locations.asPropertyList()) {      if (uri.equals(location.getName())) {        toRemove=location;      } else {        newList.add(location.getName(),location.getValue());      }    }  }  if (toRemove != null) {    locations.set(newList);    ModelNode compensating=SchemaLocationAddHandler.getAddSchemaLocationOperation(operation.get(OP_ADDR),toRemove);    resultHandler.handleResultComplete(compensating);  } else {    failure="No schema location with URI " + uri + " found";  }} @AT@ 3358 @LENGTH@ 946
---------MOV VariableDeclarationStatement@@ModelNode locations=context.getSubModel().get(SCHEMA_LOCATIONS); @TO@ Block@@ThenBody:{  ModelNode newList=new ModelNode().setEmptyList();  String uri=param.asProperty().getName();  if (locations.isDefined()) {    for (    Property location : locations.asPropertyList()) {      if (!uri.equals(location.getName())) {        toRemove=newList.add(location.getName(),location.getValue());        break;      }    }  }  if (toRemove != null) {    locations.set(newList);    ModelNode compensating=SchemaLocationAddHandler.getAddSchemaLocationOperation(operation.get(OP_ADDR),toRemove);    resultHandler.handleResultComplete(compensating);  } else {    failure="No schema location with URI " + uri + "found";  }} @AT@ 3133 @LENGTH@ 66
---------INS VariableDeclarationStatement@@Property toRemove=null; @TO@ Block@@ThenBody:{  ModelNode newList=new ModelNode().setEmptyList();  String uri=param.asProperty().getName();  if (locations.isDefined()) {    for (    Property location : locations.asPropertyList()) {      if (!uri.equals(location.getName())) {        toRemove=newList.add(location.getName(),location.getValue());        break;      }    }  }  if (toRemove != null) {    locations.set(newList);    ModelNode compensating=SchemaLocationAddHandler.getAddSchemaLocationOperation(operation.get(OP_ADDR),toRemove);    resultHandler.handleResultComplete(compensating);  } else {    failure="No schema location with URI " + uri + "found";  }} @AT@ 3341 @LENGTH@ 25
------------INS SimpleType@@Property @TO@ VariableDeclarationStatement@@Property toRemove=null; @AT@ 3341 @LENGTH@ 8
------------INS VariableDeclarationFragment@@toRemove=null @TO@ VariableDeclarationStatement@@Property toRemove=null; @AT@ 3350 @LENGTH@ 15
---------------INS SimpleName@@toRemove @TO@ VariableDeclarationFragment@@toRemove=null @AT@ 3350 @LENGTH@ 8
---------------INS NullLiteral@@null @TO@ VariableDeclarationFragment@@toRemove=null @AT@ 3361 @LENGTH@ 4
---------UPD VariableDeclarationStatement@@String uri=param.asProperty().getName(); @TO@ String uri=param.asString(); @AT@ 3444 @LENGTH@ 42
------------UPD VariableDeclarationFragment@@uri=param.asProperty().getName() @TO@ uri=param.asString() @AT@ 3451 @LENGTH@ 34
---------------UPD MethodInvocation@@param.asProperty().getName() @TO@ param.asString() @AT@ 3457 @LENGTH@ 28
------------------DEL MethodInvocation@@MethodName:asProperty:[] @AT@ 3457 @LENGTH@ 18
------------------UPD SimpleName@@MethodName:getName:[] @TO@ MethodName:asString:[] @AT@ 3476 @LENGTH@ 9
---------UPD IfStatement@@if (locations.isDefined()) {  for (  Property location : locations.asPropertyList()) {    if (!uri.equals(location.getName())) {      toRemove=newList.add(location.getName(),location.getValue());      break;    }  }} @TO@ if (locations.isDefined()) {  for (  Property location : locations.asPropertyList()) {    if (uri.equals(location.getName())) {      toRemove=location;    } else {      newList.add(location.getName(),location.getValue());    }  }} @AT@ 3503 @LENGTH@ 360
------------UPD Block@@ThenBody:{  for (  Property location : locations.asPropertyList()) {    if (!uri.equals(location.getName())) {      toRemove=newList.add(location.getName(),location.getValue());      break;    }  }} @TO@ ThenBody:{  for (  Property location : locations.asPropertyList()) {    if (uri.equals(location.getName())) {      toRemove=location;    } else {      newList.add(location.getName(),location.getValue());    }  }} @AT@ 3530 @LENGTH@ 333
---------------UPD EnhancedForStatement@@for (Property location : locations.asPropertyList()) {  if (!uri.equals(location.getName())) {    toRemove=newList.add(location.getName(),location.getValue());    break;  }} @TO@ for (Property location : locations.asPropertyList()) {  if (uri.equals(location.getName())) {    toRemove=location;  } else {    newList.add(location.getName(),location.getValue());  }} @AT@ 3552 @LENGTH@ 293
------------------UPD IfStatement@@if (!uri.equals(location.getName())) {  toRemove=newList.add(location.getName(),location.getValue());  break;} @TO@ if (uri.equals(location.getName())) {  toRemove=location;} else {  newList.add(location.getName(),location.getValue());} @AT@ 3631 @LENGTH@ 192
---------------------DEL PrefixExpression@@!uri.equals(location.getName()) @AT@ 3635 @LENGTH@ 31
------------------------DEL Operator@@! @AT@ 3635 @LENGTH@ 1
---------------------MOV MethodInvocation@@uri.equals(location.getName()) @TO@ IfStatement@@if (!uri.equals(location.getName())) {  toRemove=newList.add(location.getName(),location.getValue());  break;} @AT@ 3636 @LENGTH@ 30
---------------------INS Block@@ThenBody:{  toRemove=location;} @TO@ IfStatement@@if (!uri.equals(location.getName())) {  toRemove=newList.add(location.getName(),location.getValue());  break;} @AT@ 3662 @LENGTH@ 76
------------------------INS ExpressionStatement@@Assignment:toRemove=location @TO@ Block@@ThenBody:{  toRemove=location;} @AT@ 3692 @LENGTH@ 20
---------------------------INS Assignment@@toRemove=location @TO@ ExpressionStatement@@Assignment:toRemove=location @AT@ 3692 @LENGTH@ 19
------------------------------INS SimpleName@@toRemove @TO@ Assignment@@toRemove=location @AT@ 3692 @LENGTH@ 8
------------------------------INS Operator@@= @TO@ Assignment@@toRemove=location @AT@ 3700 @LENGTH@ 1
------------------------------INS SimpleName@@location @TO@ Assignment@@toRemove=location @AT@ 3703 @LENGTH@ 8
---------------------UPD Block@@ThenBody:{  toRemove=newList.add(location.getName(),location.getValue());  break;} @TO@ ElseBody:{  newList.add(location.getName(),location.getValue());} @AT@ 3668 @LENGTH@ 155
------------------------UPD ExpressionStatement@@Assignment:toRemove=newList.add(location.getName(),location.getValue()) @TO@ MethodInvocation:newList.add(location.getName(),location.getValue()) @AT@ 3698 @LENGTH@ 64
---------------------------DEL Assignment@@toRemove=newList.add(location.getName(),location.getValue()) @AT@ 3698 @LENGTH@ 63
------------------------------DEL SimpleName@@toRemove @AT@ 3698 @LENGTH@ 8
------------------------------DEL Operator@@= @AT@ 3706 @LENGTH@ 1
---------------------------MOV MethodInvocation@@newList.add(location.getName(),location.getValue()) @TO@ ExpressionStatement@@Assignment:toRemove=newList.add(location.getName(),location.getValue()) @AT@ 3709 @LENGTH@ 52
------------------------DEL BreakStatement@@ @AT@ 3791 @LENGTH@ 6
---------UPD IfStatement@@if (toRemove != null) {  locations.set(newList);  ModelNode compensating=SchemaLocationAddHandler.getAddSchemaLocationOperation(operation.get(OP_ADDR),toRemove);  resultHandler.handleResultComplete(compensating);} else {  failure="No schema location with URI " + uri + "found";} @TO@ if (toRemove != null) {  locations.set(newList);  ModelNode compensating=SchemaLocationAddHandler.getAddSchemaLocationOperation(operation.get(OP_ADDR),toRemove);  resultHandler.handleResultComplete(compensating);} else {  failure="No schema location with URI " + uri + " found";} @AT@ 3881 @LENGTH@ 409
------------UPD Block@@ElseBody:{  failure="No schema location with URI " + uri + "found";} @TO@ ElseBody:{  failure="No schema location with URI " + uri + " found";} @AT@ 4193 @LENGTH@ 97
---------------UPD ExpressionStatement@@Assignment:failure="No schema location with URI " + uri + "found" @TO@ Assignment:failure="No schema location with URI " + uri + " found" @AT@ 4215 @LENGTH@ 57
------------------UPD Assignment@@failure="No schema location with URI " + uri + "found" @TO@ failure="No schema location with URI " + uri + " found" @AT@ 4215 @LENGTH@ 56
---------------------UPD InfixExpression@@"No schema location with URI " + uri + "found" @TO@ "No schema location with URI " + uri + " found" @AT@ 4225 @LENGTH@ 46
------------------------UPD StringLiteral@@"found" @TO@ " found" @AT@ 4264 @LENGTH@ 7


UPD EnhancedForStatement@@for (Object key : parameters.keySet()) {  if (key.toString().startsWith("mail.")) {    config.getAdditionalJavaMailProperties().put(key,parameters.get(key));    toRemove.add(key);  }} @TO@ for (Object object : parameters.entrySet()) {  Entry entry=(Entry)object;  if (entry.getKey().toString().startsWith("mail.")) {    config.getAdditionalJavaMailProperties().put(entry.getKey(),entry.getValue());    toRemove.add(entry.getKey());  }} @AT@ 3000 @LENGTH@ 241
---UPD SingleVariableDeclaration@@Object key @TO@ Object object @AT@ 3005 @LENGTH@ 10
------UPD SimpleName@@key @TO@ object @AT@ 3012 @LENGTH@ 3
---UPD MethodInvocation@@parameters.keySet() @TO@ parameters.entrySet() @AT@ 3018 @LENGTH@ 19
------UPD SimpleName@@MethodName:keySet:[] @TO@ MethodName:entrySet:[] @AT@ 3029 @LENGTH@ 8
---UPD IfStatement@@if (key.toString().startsWith("mail.")) {  config.getAdditionalJavaMailProperties().put(key,parameters.get(key));  toRemove.add(key);} @TO@ if (entry.getKey().toString().startsWith("mail.")) {  config.getAdditionalJavaMailProperties().put(entry.getKey(),entry.getValue());  toRemove.add(entry.getKey());} @AT@ 3053 @LENGTH@ 178
------UPD MethodInvocation@@key.toString().startsWith("mail.") @TO@ entry.getKey().toString().startsWith("mail.") @AT@ 3057 @LENGTH@ 34
---------UPD SimpleName@@Name:key @TO@ Name:entry @AT@ 3057 @LENGTH@ 3
---------INS MethodInvocation@@MethodName:getKey:[] @TO@ MethodInvocation@@key.toString().startsWith("mail.") @AT@ 3132 @LENGTH@ 14
------UPD Block@@ThenBody:{  config.getAdditionalJavaMailProperties().put(key,parameters.get(key));  toRemove.add(key);} @TO@ ThenBody:{  config.getAdditionalJavaMailProperties().put(entry.getKey(),entry.getValue());  toRemove.add(entry.getKey());} @AT@ 3093 @LENGTH@ 138
---------UPD ExpressionStatement@@MethodInvocation:config.getAdditionalJavaMailProperties().put(key,parameters.get(key)) @TO@ MethodInvocation:config.getAdditionalJavaMailProperties().put(entry.getKey(),entry.getValue()) @AT@ 3111 @LENGTH@ 71
------------UPD MethodInvocation@@config.getAdditionalJavaMailProperties().put(key,parameters.get(key)) @TO@ config.getAdditionalJavaMailProperties().put(entry.getKey(),entry.getValue()) @AT@ 3111 @LENGTH@ 70
---------------UPD SimpleName@@MethodName:put:[key, parameters.get(key)] @TO@ MethodName:put:[entry.getKey(), entry.getValue()] @AT@ 3152 @LENGTH@ 29
------------------DEL SimpleName@@key @AT@ 3156 @LENGTH@ 3
------------------UPD MethodInvocation@@parameters.get(key) @TO@ entry.getValue() @AT@ 3161 @LENGTH@ 19
---------------------UPD SimpleName@@Name:parameters @TO@ Name:entry @AT@ 3161 @LENGTH@ 10
---------------------UPD SimpleName@@MethodName:get:[key] @TO@ MethodName:getValue:[] @AT@ 3172 @LENGTH@ 8
------------------------DEL SimpleName@@key @AT@ 3176 @LENGTH@ 3
------------------INS MethodInvocation@@entry.getKey() @TO@ SimpleName@@MethodName:put:[key, parameters.get(key)] @AT@ 3242 @LENGTH@ 14
---------------------INS SimpleName@@Name:entry @TO@ MethodInvocation@@entry.getKey() @AT@ 3242 @LENGTH@ 5
---------------------INS SimpleName@@MethodName:getKey:[] @TO@ MethodInvocation@@entry.getKey() @AT@ 3248 @LENGTH@ 8
---------UPD ExpressionStatement@@MethodInvocation:toRemove.add(key) @TO@ MethodInvocation:toRemove.add(entry.getKey()) @AT@ 3199 @LENGTH@ 18
------------UPD MethodInvocation@@toRemove.add(key) @TO@ toRemove.add(entry.getKey()) @AT@ 3199 @LENGTH@ 17
---------------UPD SimpleName@@MethodName:add:[key] @TO@ MethodName:add:[entry.getKey()] @AT@ 3208 @LENGTH@ 8
------------------DEL SimpleName@@key @AT@ 3212 @LENGTH@ 3
------------------INS MethodInvocation@@entry.getKey() @TO@ SimpleName@@MethodName:add:[key] @AT@ 3306 @LENGTH@ 14
---------------------INS SimpleName@@Name:entry @TO@ MethodInvocation@@entry.getKey() @AT@ 3306 @LENGTH@ 5
---------------------INS SimpleName@@MethodName:getKey:[] @TO@ MethodInvocation@@entry.getKey() @AT@ 3312 @LENGTH@ 8
---INS VariableDeclarationStatement@@Entry entry=(Entry)object; @TO@ EnhancedForStatement@@for (Object key : parameters.keySet()) {  if (key.toString().startsWith("mail.")) {    config.getAdditionalJavaMailProperties().put(key,parameters.get(key));    toRemove.add(key);  }} @AT@ 3086 @LENGTH@ 29
------INS SimpleType@@Entry @TO@ VariableDeclarationStatement@@Entry entry=(Entry)object; @AT@ 3086 @LENGTH@ 5
------INS VariableDeclarationFragment@@entry=(Entry)object @TO@ VariableDeclarationStatement@@Entry entry=(Entry)object; @AT@ 3092 @LENGTH@ 22
---------INS SimpleName@@entry @TO@ VariableDeclarationFragment@@entry=(Entry)object @AT@ 3092 @LENGTH@ 5
---------INS CastExpression@@(Entry)object @TO@ VariableDeclarationFragment@@entry=(Entry)object @AT@ 3100 @LENGTH@ 14
------------INS SimpleType@@Entry @TO@ CastExpression@@(Entry)object @AT@ 3101 @LENGTH@ 5
------------INS SimpleName@@object @TO@ CastExpression@@(Entry)object @AT@ 3108 @LENGTH@ 6


UPD MethodDeclaration@@public, static, ClientHttpRequestFactory, MethodName:oauthSigningIfNecessary, ClientHttpRequestFactory requestFactory, OAuth1Credentials oauth1Credentials,  @TO@ public, static, ClientHttpRequestFactory, MethodName:addOAuthSigning, ClientHttpRequestFactory requestFactory, OAuth1Credentials credentials,  @AT@ 3409 @LENGTH@ 285
---UPD SimpleName@@MethodName:oauthSigningIfNecessary @TO@ MethodName:addOAuthSigning @AT@ 3448 @LENGTH@ 23
---UPD SingleVariableDeclaration@@OAuth1Credentials oauth1Credentials @TO@ OAuth1Credentials credentials @AT@ 3513 @LENGTH@ 35
------UPD SimpleName@@oauth1Credentials @TO@ credentials @AT@ 3531 @LENGTH@ 17
---UPD ReturnStatement@@ClassInstanceCreation:new Spring30OAuth1RequestFactory(requestFactory,oauth1Credentials) @TO@ ClassInstanceCreation:new Spring30OAuth1RequestFactory(requestFactory,credentials) @AT@ 3616 @LENGTH@ 75
------UPD ClassInstanceCreation@@Spring30OAuth1RequestFactory[requestFactory, oauth1Credentials] @TO@ Spring30OAuth1RequestFactory[requestFactory, credentials] @AT@ 3623 @LENGTH@ 67
---------UPD SimpleName@@oauth1Credentials @TO@ credentials @AT@ 3672 @LENGTH@ 17


UPD ForStatement@@for (int i=0; i < paramTypes.length; i++) {  Class<?> targetType=Object.class;  if (paramTypes[i] instanceof ParameterizedType) {    ParameterizedType ptype=(ParameterizedType)paramTypes[i];    Type[] types=ptype.getActualTypeArguments();    if (types.length == 1) {      if (types[0] instanceof TypeVariable) {        targetType=Object.class;      } else {        targetType=(Class<?>)types[0];      }    } else {      targetType=(Class<?>)ptype.getRawType();    }  } else {    if (paramTypes[i] instanceof TypeVariable) {      @SuppressWarnings("rawtypes") Type[] bounds=((TypeVariable)paramTypes[i]).getBounds();      if (bounds.length > 0) {        targetType=(Class<?>)bounds[0];      }    } else     if (paramTypes[i] instanceof Class<?>) {      targetType=(Class<?>)paramTypes[i];    }  }  preferredConstructor.addParameter(paramNames[i],targetType,targetType.getDeclaredAnnotations());} @TO@ for (int i=0; i < paramTypes.length; i++) {  Class<?> targetType=Object.class;  if (paramTypes[i] instanceof ParameterizedType) {    ParameterizedType ptype=(ParameterizedType)paramTypes[i];    Type[] types=ptype.getActualTypeArguments();    if (types.length == 1) {      if (types[0] instanceof TypeVariable) {        targetType=Object.class;      } else {        targetType=(Class<?>)types[0];      }    } else {      targetType=(Class<?>)ptype.getRawType();    }  } else {    if (paramTypes[i] instanceof TypeVariable) {      @SuppressWarnings("rawtypes") Type[] bounds=((TypeVariable)paramTypes[i]).getBounds();      if (bounds.length > 0) {        targetType=(Class<?>)bounds[0];      }    } else     if (paramTypes[i] instanceof Class<?>) {      targetType=(Class<?>)paramTypes[i];    }  }  String paramName=(null != paramNames ? paramNames[i] : "param" + i);  preferredConstructor.addParameter(paramName,targetType,targetType.getDeclaredAnnotations());} @AT@ 3815 @LENGTH@ 1235
---UPD ExpressionStatement@@MethodInvocation:preferredConstructor.addParameter(paramNames[i],targetType,targetType.getDeclaredAnnotations()) @TO@ MethodInvocation:preferredConstructor.addParameter(paramName,targetType,targetType.getDeclaredAnnotations()) @AT@ 4940 @LENGTH@ 98
------UPD MethodInvocation@@preferredConstructor.addParameter(paramNames[i],targetType,targetType.getDeclaredAnnotations()) @TO@ preferredConstructor.addParameter(paramName,targetType,targetType.getDeclaredAnnotations()) @AT@ 4940 @LENGTH@ 97
---------UPD SimpleName@@MethodName:addParameter:[paramNames[i], targetType, targetType.getDeclaredAnnotations()] @TO@ MethodName:addParameter:[paramName, targetType, targetType.getDeclaredAnnotations()] @AT@ 4961 @LENGTH@ 76
------------DEL ArrayAccess@@paramNames[i] @AT@ 4974 @LENGTH@ 13
---------------DEL SimpleName@@paramNames @AT@ 4974 @LENGTH@ 10
---------------DEL SimpleName@@i @AT@ 4985 @LENGTH@ 1
------------INS SimpleName@@paramName @TO@ SimpleName@@MethodName:addParameter:[paramNames[i], targetType, targetType.getDeclaredAnnotations()] @AT@ 5977 @LENGTH@ 9
---INS VariableDeclarationStatement@@String paramName=(null != paramNames ? paramNames[i] : "param" + i); @TO@ ForStatement@@for (int i=0; i < paramTypes.length; i++) {  Class<?> targetType=Object.class;  if (paramTypes[i] instanceof ParameterizedType) {    ParameterizedType ptype=(ParameterizedType)paramTypes[i];    Type[] types=ptype.getActualTypeArguments();    if (types.length == 1) {      if (types[0] instanceof TypeVariable) {        targetType=Object.class;      } else {        targetType=(Class<?>)types[0];      }    } else {      targetType=(Class<?>)ptype.getRawType();    }  } else {    if (paramTypes[i] instanceof TypeVariable) {      @SuppressWarnings("rawtypes") Type[] bounds=((TypeVariable)paramTypes[i]).getBounds();      if (bounds.length > 0) {        targetType=(Class<?>)bounds[0];      }    } else     if (paramTypes[i] instanceof Class<?>) {      targetType=(Class<?>)paramTypes[i];    }  }  preferredConstructor.addParameter(paramNames[i],targetType,targetType.getDeclaredAnnotations());} @AT@ 5860 @LENGTH@ 70
------INS SimpleType@@String @TO@ VariableDeclarationStatement@@String paramName=(null != paramNames ? paramNames[i] : "param" + i); @AT@ 5860 @LENGTH@ 6
------INS VariableDeclarationFragment@@paramName=(null != paramNames ? paramNames[i] : "param" + i) @TO@ VariableDeclarationStatement@@String paramName=(null != paramNames ? paramNames[i] : "param" + i); @AT@ 5867 @LENGTH@ 62
---------INS SimpleName@@paramName @TO@ VariableDeclarationFragment@@paramName=(null != paramNames ? paramNames[i] : "param" + i) @AT@ 5867 @LENGTH@ 9
---------INS ParenthesizedExpression@@(null != paramNames ? paramNames[i] : "param" + i) @TO@ VariableDeclarationFragment@@paramName=(null != paramNames ? paramNames[i] : "param" + i) @AT@ 5879 @LENGTH@ 50
------------INS ConditionalExpression@@null != paramNames ? paramNames[i] : "param" + i @TO@ ParenthesizedExpression@@(null != paramNames ? paramNames[i] : "param" + i) @AT@ 5880 @LENGTH@ 48
---------------INS InfixExpression@@null != paramNames @TO@ ConditionalExpression@@null != paramNames ? paramNames[i] : "param" + i @AT@ 5880 @LENGTH@ 18
------------------INS NullLiteral@@null @TO@ InfixExpression@@null != paramNames @AT@ 5880 @LENGTH@ 4
------------------INS Operator@@!= @TO@ InfixExpression@@null != paramNames @AT@ 5884 @LENGTH@ 2
------------------INS SimpleName@@paramNames @TO@ InfixExpression@@null != paramNames @AT@ 5888 @LENGTH@ 10
---------------INS ArrayAccess@@paramNames[i] @TO@ ConditionalExpression@@null != paramNames ? paramNames[i] : "param" + i @AT@ 5901 @LENGTH@ 13
------------------INS SimpleName@@paramNames @TO@ ArrayAccess@@paramNames[i] @AT@ 5901 @LENGTH@ 10
------------------INS SimpleName@@i @TO@ ArrayAccess@@paramNames[i] @AT@ 5912 @LENGTH@ 1
---------------INS InfixExpression@@"param" + i @TO@ ConditionalExpression@@null != paramNames ? paramNames[i] : "param" + i @AT@ 5917 @LENGTH@ 11
------------------INS StringLiteral@@"param" @TO@ InfixExpression@@"param" + i @AT@ 5917 @LENGTH@ 7
------------------INS Operator@@+ @TO@ InfixExpression@@"param" + i @AT@ 5924 @LENGTH@ 1
------------------INS SimpleName@@i @TO@ InfixExpression@@"param" + i @AT@ 5927 @LENGTH@ 1


INS IfStatement@@if (attributeName.equals("xmlns") || attributeName.startsWith("xmlns:")) {  return false;} @TO@ MethodDeclaration@@protected, boolean, MethodName:isEligibleAttribute, String attributeName,  @AT@ 2305 @LENGTH@ 110
---INS InfixExpression@@attributeName.equals("xmlns") || attributeName.startsWith("xmlns:") @TO@ IfStatement@@if (attributeName.equals("xmlns") || attributeName.startsWith("xmlns:")) {  return false;} @AT@ 2309 @LENGTH@ 67
------MOV MethodInvocation@@attributeName.equals("xmlns") @TO@ InfixExpression@@attributeName.equals("xmlns") || attributeName.startsWith("xmlns:") @AT@ 2313 @LENGTH@ 29
------INS Operator@@|| @TO@ InfixExpression@@attributeName.equals("xmlns") || attributeName.startsWith("xmlns:") @AT@ 2338 @LENGTH@ 2
------MOV MethodInvocation@@attributeName.startsWith("xmlns:") @TO@ InfixExpression@@attributeName.equals("xmlns") || attributeName.startsWith("xmlns:") @AT@ 2347 @LENGTH@ 34
---INS Block@@ThenBody:{  return false;} @TO@ IfStatement@@if (attributeName.equals("xmlns") || attributeName.startsWith("xmlns:")) {  return false;} @AT@ 2378 @LENGTH@ 37
------INS ReturnStatement@@BooleanLiteral:false @TO@ Block@@ThenBody:{  return false;} @AT@ 2392 @LENGTH@ 13
---------INS BooleanLiteral@@false @TO@ ReturnStatement@@BooleanLiteral:false @AT@ 2399 @LENGTH@ 5


UPD ReturnStatement@@InfixExpression:System.currentTimeMillis() >= expireTime @TO@ InfixExpression:expireTime != null && System.currentTimeMillis() >= expireTime @AT@ 3125 @LENGTH@ 48
---INS InfixExpression@@expireTime != null && System.currentTimeMillis() >= expireTime @TO@ ReturnStatement@@InfixExpression:System.currentTimeMillis() >= expireTime @AT@ 3132 @LENGTH@ 62
------MOV InfixExpression@@System.currentTimeMillis() >= expireTime @TO@ InfixExpression@@expireTime != null && System.currentTimeMillis() >= expireTime @AT@ 3132 @LENGTH@ 40
------INS InfixExpression@@expireTime != null @TO@ InfixExpression@@expireTime != null && System.currentTimeMillis() >= expireTime @AT@ 3132 @LENGTH@ 18
---------INS SimpleName@@expireTime @TO@ InfixExpression@@expireTime != null @AT@ 3132 @LENGTH@ 10
---------INS Operator@@!= @TO@ InfixExpression@@expireTime != null @AT@ 3142 @LENGTH@ 2
---------INS NullLiteral@@null @TO@ InfixExpression@@expireTime != null @AT@ 3146 @LENGTH@ 4
------INS Operator@@&& @TO@ InfixExpression@@expireTime != null && System.currentTimeMillis() >= expireTime @AT@ 3150 @LENGTH@ 2


UPD Block@@ThenBody:{  if (prop.isMap() && dbObj instanceof DBObject) {    Class<?> toType=findTypeToBeUsed((DBObject)dbObj);    Map<String,Object> m=new LinkedHashMap<String,Object>();    for (    Map.Entry<String,Object> entry : ((Map<String,Object>)((DBObject)dbObj).toMap()).entrySet()) {      if (entry.getKey().equals(CUSTOM_TYPE_KEY)) {        continue;      }      if (null != entry.getValue() && entry.getValue() instanceof DBObject) {        m.put(entry.getKey(),read((null != toType ? toType : prop.getMapValueType()),(DBObject)entry.getValue()));      } else {        m.put(entry.getKey(),entry.getValue());      }    }    return m;  } else   if (prop.isArray() && dbObj instanceof BasicDBObject && ((DBObject)dbObj).keySet().size() == 0) {    return Array.newInstance(prop.getComponentType(),0);  } else   if (prop.isCollection() && dbObj instanceof BasicDBList) {    BasicDBList dbObjList=(BasicDBList)dbObj;    Object[] items=(Object[])Array.newInstance(prop.getComponentType(),dbObjList.size());    for (int i=0; i < dbObjList.size(); i++) {      Object dbObjItem=dbObjList.get(i);      if (dbObjItem instanceof DBRef) {        items[i]=read(prop.getComponentType(),((DBRef)dbObjItem).fetch());      } else       if (dbObjItem instanceof DBObject) {        items[i]=read(prop.getComponentType(),(DBObject)dbObjItem);      } else {        items[i]=dbObjItem;      }    }    return Arrays.asList(items);  }  if (dbo.containsField("_class")) {    Class<?> toType=findTypeToBeUsed((DBObject)dbObj);    dbo.removeField("_class");    o=read(toType,(DBObject)dbObj);  } else {    o=read(mappingContext.getPersistentEntity(prop.getTypeInformation()),(DBObject)dbObj);  }} @TO@ ThenBody:{  if (prop.isMap() && dbObj instanceof DBObject) {    Class<?> toType=findTypeToBeUsed((DBObject)dbObj);    Map<String,Object> m=new LinkedHashMap<String,Object>();    for (    Map.Entry<String,Object> entry : ((Map<String,Object>)((DBObject)dbObj).toMap()).entrySet()) {      if (entry.getKey().equals(CUSTOM_TYPE_KEY)) {        continue;      }      if (null != entry.getValue() && entry.getValue() instanceof DBObject) {        m.put(entry.getKey(),read((null != toType ? toType : prop.getMapValueType()),(DBObject)entry.getValue()));      } else {        m.put(entry.getKey(),entry.getValue());      }    }    return m;  } else   if (prop.isArray() && dbObj instanceof BasicDBObject && ((DBObject)dbObj).keySet().size() == 0) {    return Array.newInstance(prop.getComponentType(),0);  } else   if (prop.isCollection() && dbObj instanceof BasicDBList) {    BasicDBList dbObjList=(BasicDBList)dbObj;    Object[] items=(Object[])Array.newInstance(prop.getComponentType(),dbObjList.size());    for (int i=0; i < dbObjList.size(); i++) {      Object dbObjItem=dbObjList.get(i);      if (dbObjItem instanceof DBRef) {        items[i]=read(prop.getComponentType(),((DBRef)dbObjItem).fetch());      } else       if (dbObjItem instanceof DBObject) {        items[i]=read(prop.getComponentType(),(DBObject)dbObjItem);      } else {        items[i]=dbObjItem;      }    }    return Arrays.asList(items);  }  Class<?> toType=findTypeToBeUsed((DBObject)dbObj);  if (toType != null) {    dbo.removeField(CUSTOM_TYPE_KEY);    o=read(toType,(DBObject)dbObj);  } else {    o=read(mappingContext.getPersistentEntity(prop.getTypeInformation()),(DBObject)dbObj);  }} @AT@ 19407 @LENGTH@ 2121
---UPD IfStatement@@if (dbo.containsField("_class")) {  Class<?> toType=findTypeToBeUsed((DBObject)dbObj);  dbo.removeField("_class");  o=read(toType,(DBObject)dbObj);} else {  o=read(mappingContext.getPersistentEntity(prop.getTypeInformation()),(DBObject)dbObj);} @TO@ if (toType != null) {  dbo.removeField(CUSTOM_TYPE_KEY);  o=read(toType,(DBObject)dbObj);} else {  o=read(mappingContext.getPersistentEntity(prop.getTypeInformation()),(DBObject)dbObj);} @AT@ 21211 @LENGTH@ 309
------DEL MethodInvocation@@dbo.containsField("_class") @AT@ 21215 @LENGTH@ 27
---------DEL SimpleName@@Name:dbo @AT@ 21215 @LENGTH@ 3
---------DEL SimpleName@@MethodName:containsField:["_class"] @AT@ 21219 @LENGTH@ 23
------------DEL StringLiteral@@"_class" @AT@ 21233 @LENGTH@ 8
------UPD Block@@ThenBody:{  Class<?> toType=findTypeToBeUsed((DBObject)dbObj);  dbo.removeField("_class");  o=read(toType,(DBObject)dbObj);} @TO@ ThenBody:{  dbo.removeField(CUSTOM_TYPE_KEY);  o=read(toType,(DBObject)dbObj);} @AT@ 21244 @LENGTH@ 158
---------UPD ExpressionStatement@@MethodInvocation:dbo.removeField("_class") @TO@ MethodInvocation:dbo.removeField(CUSTOM_TYPE_KEY) @AT@ 21320 @LENGTH@ 26
------------UPD MethodInvocation@@dbo.removeField("_class") @TO@ dbo.removeField(CUSTOM_TYPE_KEY) @AT@ 21320 @LENGTH@ 25
---------------UPD SimpleName@@MethodName:removeField:["_class"] @TO@ MethodName:removeField:[CUSTOM_TYPE_KEY] @AT@ 21324 @LENGTH@ 21
------------------INS SimpleName@@CUSTOM_TYPE_KEY @TO@ SimpleName@@MethodName:removeField:["_class"] @AT@ 21330 @LENGTH@ 15
------------------DEL StringLiteral@@"_class" @AT@ 21336 @LENGTH@ 8
------INS InfixExpression@@toType != null @TO@ IfStatement@@if (dbo.containsField("_class")) {  Class<?> toType=findTypeToBeUsed((DBObject)dbObj);  dbo.removeField("_class");  o=read(toType,(DBObject)dbObj);} else {  o=read(mappingContext.getPersistentEntity(prop.getTypeInformation()),(DBObject)dbObj);} @AT@ 21286 @LENGTH@ 14
---------INS SimpleName@@toType @TO@ InfixExpression@@toType != null @AT@ 21286 @LENGTH@ 6
---------INS Operator@@!= @TO@ InfixExpression@@toType != null @AT@ 21292 @LENGTH@ 2
---------INS NullLiteral@@null @TO@ InfixExpression@@toType != null @AT@ 21296 @LENGTH@ 4
---MOV VariableDeclarationStatement@@Class<?> toType=findTypeToBeUsed((DBObject)dbObj); @TO@ Block@@ThenBody:{  if (prop.isMap() && dbObj instanceof DBObject) {    Class<?> toType=findTypeToBeUsed((DBObject)dbObj);    Map<String,Object> m=new LinkedHashMap<String,Object>();    for (    Map.Entry<String,Object> entry : ((Map<String,Object>)((DBObject)dbObj).toMap()).entrySet()) {      if (entry.getKey().equals(CUSTOM_TYPE_KEY)) {        continue;      }      if (null != entry.getValue() && entry.getValue() instanceof DBObject) {        m.put(entry.getKey(),read((null != toType ? toType : prop.getMapValueType()),(DBObject)entry.getValue()));      } else {        m.put(entry.getKey(),entry.getValue());      }    }    return m;  } else   if (prop.isArray() && dbObj instanceof BasicDBObject && ((DBObject)dbObj).keySet().size() == 0) {    return Array.newInstance(prop.getComponentType(),0);  } else   if (prop.isCollection() && dbObj instanceof BasicDBList) {    BasicDBList dbObjList=(BasicDBList)dbObj;    Object[] items=(Object[])Array.newInstance(prop.getComponentType(),dbObjList.size());    for (int i=0; i < dbObjList.size(); i++) {      Object dbObjItem=dbObjList.get(i);      if (dbObjItem instanceof DBRef) {        items[i]=read(prop.getComponentType(),((DBRef)dbObjItem).fetch());      } else       if (dbObjItem instanceof DBObject) {        items[i]=read(prop.getComponentType(),(DBObject)dbObjItem);      } else {        items[i]=dbObjItem;      }    }    return Arrays.asList(items);  }  if (dbo.containsField("_class")) {    Class<?> toType=findTypeToBeUsed((DBObject)dbObj);    dbo.removeField("_class");    o=read(toType,(DBObject)dbObj);  } else {    o=read(mappingContext.getPersistentEntity(prop.getTypeInformation()),(DBObject)dbObj);  }} @AT@ 21256 @LENGTH@ 53


UPD VariableDeclarationStatement@@ReloadThread reloadThread=new ReloadThread(); @TO@ TestDeadlockReloadThread reloadThread=new TestDeadlockReloadThread(); @AT@ 25024 @LENGTH@ 47
---UPD SimpleType@@ReloadThread @TO@ TestDeadlockReloadThread @AT@ 25024 @LENGTH@ 12
---UPD VariableDeclarationFragment@@reloadThread=new ReloadThread() @TO@ reloadThread=new TestDeadlockReloadThread() @AT@ 25037 @LENGTH@ 33
------UPD ClassInstanceCreation@@ReloadThread[] @TO@ TestDeadlockReloadThread[] @AT@ 25052 @LENGTH@ 18
---------UPD SimpleType@@ReloadThread @TO@ TestDeadlockReloadThread @AT@ 25056 @LENGTH@ 12


UPD EnhancedForStatement@@for (BindingConfiguration binding : moduleConfiguration.getBindingConfigurations()) {  addJndiBinding(moduleConfiguration,binding,phaseContext);} @TO@ for (BindingConfiguration binding : bindingConfigurations) {  addJndiBinding(moduleConfiguration,binding,phaseContext);} @AT@ 2220 @LENGTH@ 167
---DEL MethodInvocation@@moduleConfiguration.getBindingConfigurations() @AT@ 2256 @LENGTH@ 46
------DEL SimpleName@@Name:moduleConfiguration @AT@ 2256 @LENGTH@ 19
------DEL SimpleName@@MethodName:getBindingConfigurations:[] @AT@ 2276 @LENGTH@ 26
---INS SimpleName@@bindingConfigurations @TO@ EnhancedForStatement@@for (BindingConfiguration binding : moduleConfiguration.getBindingConfigurations()) {  addJndiBinding(moduleConfiguration,binding,phaseContext);} @AT@ 2658 @LENGTH@ 21


UPD ExpressionStatement@@MethodInvocation:listener.onMessage(new DefaultMessage(message.getBytes(),channel.getBytes()),null) @TO@ MethodInvocation:listener.onMessage(new DefaultMessage(channel.getBytes(),message.getBytes()),null) @AT@ 1300 @LENGTH@ 85
---UPD MethodInvocation@@listener.onMessage(new DefaultMessage(message.getBytes(),channel.getBytes()),null) @TO@ listener.onMessage(new DefaultMessage(channel.getBytes(),message.getBytes()),null) @AT@ 1300 @LENGTH@ 84
------UPD SimpleName@@MethodName:onMessage:[new DefaultMessage(message.getBytes(),channel.getBytes()), null] @TO@ MethodName:onMessage:[new DefaultMessage(channel.getBytes(),message.getBytes()), null] @AT@ 1309 @LENGTH@ 75
---------UPD ClassInstanceCreation@@DefaultMessage[message.getBytes(), channel.getBytes()] @TO@ DefaultMessage[channel.getBytes(), message.getBytes()] @AT@ 1319 @LENGTH@ 58
------------UPD MethodInvocation@@message.getBytes() @TO@ channel.getBytes() @AT@ 1338 @LENGTH@ 18
---------------UPD SimpleName@@Name:message @TO@ Name:channel @AT@ 1338 @LENGTH@ 7
------------UPD MethodInvocation@@channel.getBytes() @TO@ message.getBytes() @AT@ 1358 @LENGTH@ 18
---------------UPD SimpleName@@Name:channel @TO@ Name:message @AT@ 1358 @LENGTH@ 7


UPD MethodDeclaration@@public, voidMethodName:QuotesState, boolean quotesInContent,  @TO@ public, voidMethodName:QuotesState, boolean quotesInContent, boolean escapeEnabled,  @AT@ 1324 @LENGTH@ 408
---INS SingleVariableDeclaration@@boolean escapeEnabled @TO@ MethodDeclaration@@public, voidMethodName:QuotesState, boolean quotesInContent,  @AT@ 1462 @LENGTH@ 21
------INS PrimitiveType@@boolean @TO@ SingleVariableDeclaration@@boolean escapeEnabled @AT@ 1462 @LENGTH@ 7
------INS SimpleName@@escapeEnabled @TO@ SingleVariableDeclaration@@boolean escapeEnabled @AT@ 1470 @LENGTH@ 13
---INS IfStatement@@if (escapeEnabled) {  this.enterState('\\',EscapeCharacterState.INSTANCE);} @TO@ MethodDeclaration@@public, voidMethodName:QuotesState, boolean quotesInContent,  @AT@ 1707 @LENGTH@ 95
------INS SimpleName@@escapeEnabled @TO@ IfStatement@@if (escapeEnabled) {  this.enterState('\\',EscapeCharacterState.INSTANCE);} @AT@ 1710 @LENGTH@ 13
------INS Block@@ThenBody:{  this.enterState('\\',EscapeCharacterState.INSTANCE);} @TO@ IfStatement@@if (escapeEnabled) {  this.enterState('\\',EscapeCharacterState.INSTANCE);} @AT@ 1725 @LENGTH@ 77
---------MOV ExpressionStatement@@MethodInvocation:this.enterState('\\',EscapeCharacterState.INSTANCE) @TO@ Block@@ThenBody:{  this.enterState('\\',EscapeCharacterState.INSTANCE);} @AT@ 1590 @LENGTH@ 53


UPD ForStatement@@for (Chunk<I>.ChunkIterator iterator=inputs.iterator(); iterator.hasNext(); ) {  final I item=iterator.next();  O output=doProcess(item);  if (output != null) {    outputs.add(output);  } else {    iterator.remove();  }} @TO@ for (Chunk<I>.ChunkIterator iterator=inputs.iterator(); iterator.hasNext(); ) {  final I item=iterator.next();  O output;  try {    output=doProcess(item);  } catch (  Exception e) {    inputs.clear();    throw e;  }  if (output != null) {    outputs.add(output);  } else {    iterator.remove();  }} @AT@ 7980 @LENGTH@ 243
---UPD VariableDeclarationStatement@@O output=doProcess(item); @TO@ O output; @AT@ 8099 @LENGTH@ 27
------UPD VariableDeclarationFragment@@output=doProcess(item) @TO@ output @AT@ 8101 @LENGTH@ 24
---INS TryStatement@@try {  output=doProcess(item);} catch (Exception e) {  inputs.clear();  throw e;} @TO@ ForStatement@@for (Chunk<I>.ChunkIterator iterator=inputs.iterator(); iterator.hasNext(); ) {  final I item=iterator.next();  O output=doProcess(item);  if (output != null) {    outputs.add(output);  } else {    iterator.remove();  }} @AT@ 8331 @LENGTH@ 248
------INS ExpressionStatement@@Assignment:output=doProcess(item) @TO@ TryStatement@@try {  output=doProcess(item);} catch (Exception e) {  inputs.clear();  throw e;} @AT@ 8341 @LENGTH@ 25
---------INS Assignment@@output=doProcess(item) @TO@ ExpressionStatement@@Assignment:output=doProcess(item) @AT@ 8341 @LENGTH@ 24
------------MOV MethodInvocation@@doProcess(item) @TO@ Assignment@@output=doProcess(item) @AT@ 8110 @LENGTH@ 15
------------INS SimpleName@@output @TO@ Assignment@@output=doProcess(item) @AT@ 8341 @LENGTH@ 6
------------INS Operator@@= @TO@ Assignment@@output=doProcess(item) @AT@ 8347 @LENGTH@ 1
------INS CatchClause@@catch (Exception e) {  inputs.clear();  throw e;} @TO@ TryStatement@@try {  output=doProcess(item);} catch (Exception e) {  inputs.clear();  throw e;} @AT@ 8375 @LENGTH@ 204
---------INS SingleVariableDeclaration@@Exception e @TO@ CatchClause@@catch (Exception e) {  inputs.clear();  throw e;} @AT@ 8382 @LENGTH@ 11
------------INS SimpleType@@Exception @TO@ SingleVariableDeclaration@@Exception e @AT@ 8382 @LENGTH@ 9
------------INS SimpleName@@e @TO@ SingleVariableDeclaration@@Exception e @AT@ 8392 @LENGTH@ 1
---------INS ExpressionStatement@@MethodInvocation:inputs.clear() @TO@ CatchClause@@catch (Exception e) {  inputs.clear();  throw e;} @AT@ 8546 @LENGTH@ 15
------------INS MethodInvocation@@inputs.clear() @TO@ ExpressionStatement@@MethodInvocation:inputs.clear() @AT@ 8546 @LENGTH@ 14
---------------INS SimpleName@@Name:inputs @TO@ MethodInvocation@@inputs.clear() @AT@ 8546 @LENGTH@ 6
---------------INS SimpleName@@MethodName:clear:[] @TO@ MethodInvocation@@inputs.clear() @AT@ 8553 @LENGTH@ 7
---------INS ThrowStatement@@SimpleName:e @TO@ CatchClause@@catch (Exception e) {  inputs.clear();  throw e;} @AT@ 8566 @LENGTH@ 8
------------INS SimpleName@@e @TO@ ThrowStatement@@SimpleName:e @AT@ 8572 @LENGTH@ 1


DEL MethodDeclaration@@public, static, void, MethodName:addService, ServiceTarget target,  @AT@ 1822 @LENGTH@ 185
---DEL Modifier@@public @AT@ 1822 @LENGTH@ 6
---DEL Modifier@@static @AT@ 1829 @LENGTH@ 6
---DEL PrimitiveType@@void @AT@ 1836 @LENGTH@ 4
---DEL SimpleName@@MethodName:addService @AT@ 1841 @LENGTH@ 10
---DEL SingleVariableDeclaration@@ServiceTarget target @AT@ 1852 @LENGTH@ 20
------DEL SimpleType@@ServiceTarget @AT@ 1852 @LENGTH@ 13
------DEL SimpleName@@target @AT@ 1866 @LENGTH@ 6
---DEL VariableDeclarationStatement@@ShutdownHandlerImpl service=new ShutdownHandlerImpl(); @AT@ 1885 @LENGTH@ 56
------DEL SimpleType@@ShutdownHandlerImpl @AT@ 1885 @LENGTH@ 19
------DEL VariableDeclarationFragment@@service=new ShutdownHandlerImpl() @AT@ 1905 @LENGTH@ 35
---------DEL SimpleName@@service @AT@ 1905 @LENGTH@ 7
---------DEL ClassInstanceCreation@@ShutdownHandlerImpl[] @AT@ 1915 @LENGTH@ 25
------------DEL New@@new @AT@ 1915 @LENGTH@ 3
------------DEL SimpleType@@ShutdownHandlerImpl @AT@ 1919 @LENGTH@ 19
---DEL ExpressionStatement@@MethodInvocation:target.addService(SERVICE_NAME,service).install() @AT@ 1950 @LENGTH@ 51
------DEL MethodInvocation@@target.addService(SERVICE_NAME,service).install() @AT@ 1950 @LENGTH@ 50
---------DEL MethodInvocation@@MethodName:addService:[SERVICE_NAME, service] @AT@ 1950 @LENGTH@ 40
------------DEL SimpleName@@SERVICE_NAME @AT@ 1968 @LENGTH@ 12
------------DEL SimpleName@@service @AT@ 1982 @LENGTH@ 7
---------DEL SimpleName@@Name:target @AT@ 1950 @LENGTH@ 6
---------DEL SimpleName@@MethodName:install:[] @AT@ 1991 @LENGTH@ 9


UPD CatchClause@@catch (OperationFormatException e) {  Assert.fail(e.getLocalizedMessage());} @TO@ catch (CommandFormatException e) {  Assert.fail(e.getLocalizedMessage());} @AT@ 3827 @LENGTH@ 96
---UPD SingleVariableDeclaration@@OperationFormatException e @TO@ CommandFormatException e @AT@ 3834 @LENGTH@ 26
------UPD SimpleType@@OperationFormatException @TO@ CommandFormatException @AT@ 3834 @LENGTH@ 24


UPD VariableDeclarationStatement@@MessageDrivenComponentDescription mdbDescription=new MessageDrivenComponentDescription(ejbName,ejbClassName,moduleDescription.getModuleName(),applicationName); @TO@ MessageDrivenComponentDescription mdbDescription=new MessageDrivenComponentDescription(ejbName,ejbClassName,moduleDescription); @AT@ 2407 @LENGTH@ 164
---UPD VariableDeclarationFragment@@mdbDescription=new MessageDrivenComponentDescription(ejbName,ejbClassName,moduleDescription.getModuleName(),applicationName) @TO@ mdbDescription=new MessageDrivenComponentDescription(ejbName,ejbClassName,moduleDescription) @AT@ 2441 @LENGTH@ 129
------UPD ClassInstanceCreation@@MessageDrivenComponentDescription[ejbName, ejbClassName, moduleDescription.getModuleName(), applicationName] @TO@ MessageDrivenComponentDescription[ejbName, ejbClassName, moduleDescription] @AT@ 2458 @LENGTH@ 112
---------INS SimpleName@@moduleDescription @TO@ ClassInstanceCreation@@MessageDrivenComponentDescription[ejbName, ejbClassName, moduleDescription.getModuleName(), applicationName] @AT@ 2454 @LENGTH@ 17
---------DEL MethodInvocation@@moduleDescription.getModuleName() @AT@ 2519 @LENGTH@ 33
------------DEL SimpleName@@Name:moduleDescription @AT@ 2519 @LENGTH@ 17
------------DEL SimpleName@@MethodName:getModuleName:[] @AT@ 2537 @LENGTH@ 15
---------DEL SimpleName@@applicationName @AT@ 2554 @LENGTH@ 15


UPD MethodDeclaration@@protected, abstract, T, MethodName:finalize, S criteria, Sort sort,  @TO@ protected, abstract, T, MethodName:complete, S criteria, Sort sort,  @AT@ 3702 @LENGTH@ 53
---UPD SimpleName@@MethodName:finalize @TO@ MethodName:complete @AT@ 3723 @LENGTH@ 8


UPD MethodDeclaration@@public, String, MethodName:home, Model model,  @TO@ public, String, MethodName:home, Principal user, Model model,  @AT@ 1474 @LENGTH@ 569
---UPD VariableDeclarationStatement@@List<ServiceProviderConnection<TwitterOperations>> connections=twitterProvider.getConnections(1); @TO@ List<ServiceProviderConnection<TwitterOperations>> connections=twitterProvider.getConnections(user.getName()); @AT@ 1510 @LENGTH@ 99
------UPD VariableDeclarationFragment@@connections=twitterProvider.getConnections(1) @TO@ connections=twitterProvider.getConnections(user.getName()) @AT@ 1561 @LENGTH@ 47
---------UPD MethodInvocation@@twitterProvider.getConnections(1) @TO@ twitterProvider.getConnections(user.getName()) @AT@ 1575 @LENGTH@ 33
------------UPD SimpleName@@MethodName:getConnections:[1] @TO@ MethodName:getConnections:[user.getName()] @AT@ 1591 @LENGTH@ 17
---------------DEL NumberLiteral@@1 @AT@ 1606 @LENGTH@ 1
---------------INS MethodInvocation@@user.getName() @TO@ SimpleName@@MethodName:getConnections:[1] @AT@ 1654 @LENGTH@ 14
------------------INS SimpleName@@Name:user @TO@ MethodInvocation@@user.getName() @AT@ 1654 @LENGTH@ 4
------------------INS SimpleName@@MethodName:getName:[] @TO@ MethodInvocation@@user.getName() @AT@ 1659 @LENGTH@ 9
---INS SingleVariableDeclaration@@Principal user @TO@ MethodDeclaration@@public, String, MethodName:home, Model model,  @AT@ 1525 @LENGTH@ 14
------INS SimpleType@@Principal @TO@ SingleVariableDeclaration@@Principal user @AT@ 1525 @LENGTH@ 9
------INS SimpleName@@user @TO@ SingleVariableDeclaration@@Principal user @AT@ 1535 @LENGTH@ 4
---UPD IfStatement@@if (connections.size() > 0) {  model.addAttribute("connections",connectionNames);  model.addAttribute(new TweetForm());  return "twitter";} @TO@ if (connections.size() > 0) {  model.addAttribute("connections",connectionNames);  model.addAttribute(new TweetForm());  return "twitter/twitter";} @AT@ 1852 @LENGTH@ 149
------UPD Block@@ThenBody:{  model.addAttribute("connections",connectionNames);  model.addAttribute(new TweetForm());  return "twitter";} @TO@ ThenBody:{  model.addAttribute("connections",connectionNames);  model.addAttribute(new TweetForm());  return "twitter/twitter";} @AT@ 1880 @LENGTH@ 121
---------UPD ReturnStatement@@StringLiteral:"twitter" @TO@ StringLiteral:"twitter/twitter" @AT@ 1980 @LENGTH@ 17
------------UPD StringLiteral@@"twitter" @TO@ "twitter/twitter" @AT@ 1987 @LENGTH@ 9


UPD VariableDeclarationStatement@@final VirtualFile deploymentRoot=phaseContext.getAttachment(Attachments.DEPLOYMENT_ROOT); @TO@ final VirtualFile deploymentRoot=phaseContext.getAttachment(Attachments.DEPLOYMENT_ROOT).getRoot(); @AT@ 2842 @LENGTH@ 91
---UPD VariableDeclarationFragment@@deploymentRoot=phaseContext.getAttachment(Attachments.DEPLOYMENT_ROOT) @TO@ deploymentRoot=phaseContext.getAttachment(Attachments.DEPLOYMENT_ROOT).getRoot() @AT@ 2860 @LENGTH@ 72
------UPD MethodInvocation@@phaseContext.getAttachment(Attachments.DEPLOYMENT_ROOT) @TO@ phaseContext.getAttachment(Attachments.DEPLOYMENT_ROOT).getRoot() @AT@ 2877 @LENGTH@ 55
---------INS MethodInvocation@@MethodName:getAttachment:[Attachments.DEPLOYMENT_ROOT] @TO@ MethodInvocation@@phaseContext.getAttachment(Attachments.DEPLOYMENT_ROOT) @AT@ 2846 @LENGTH@ 55
------------INS QualifiedName@@Attachments.DEPLOYMENT_ROOT @TO@ MethodInvocation@@MethodName:getAttachment:[Attachments.DEPLOYMENT_ROOT] @AT@ 2873 @LENGTH@ 27
---------------MOV SimpleName@@Attachments @TO@ QualifiedName@@Attachments.DEPLOYMENT_ROOT @AT@ 2904 @LENGTH@ 11
---------------MOV SimpleName@@DEPLOYMENT_ROOT @TO@ QualifiedName@@Attachments.DEPLOYMENT_ROOT @AT@ 2916 @LENGTH@ 15
---------DEL SimpleName@@MethodName:getAttachment:[Attachments.DEPLOYMENT_ROOT] @AT@ 2890 @LENGTH@ 42
------------DEL QualifiedName@@Attachments.DEPLOYMENT_ROOT @AT@ 2904 @LENGTH@ 27
---------INS SimpleName@@MethodName:getRoot:[] @TO@ MethodInvocation@@phaseContext.getAttachment(Attachments.DEPLOYMENT_ROOT) @AT@ 2902 @LENGTH@ 9


UPD VariableDeclarationStatement@@ObjectName on=ObjectName.getInstance("org.apache.camel:context=localhost/camel-1,type=threadpools,name=threads1(threads)"); @TO@ ObjectName on=ObjectName.getInstance("org.apache.camel:context=localhost/camel-1,type=threadpools,name=\"threads1(threads)\""); @AT@ 1335 @LENGTH@ 125
---UPD VariableDeclarationFragment@@on=ObjectName.getInstance("org.apache.camel:context=localhost/camel-1,type=threadpools,name=threads1(threads)") @TO@ on=ObjectName.getInstance("org.apache.camel:context=localhost/camel-1,type=threadpools,name=\"threads1(threads)\"") @AT@ 1346 @LENGTH@ 113
------UPD MethodInvocation@@ObjectName.getInstance("org.apache.camel:context=localhost/camel-1,type=threadpools,name=threads1(threads)") @TO@ ObjectName.getInstance("org.apache.camel:context=localhost/camel-1,type=threadpools,name=\"threads1(threads)\"") @AT@ 1351 @LENGTH@ 108
---------UPD SimpleName@@MethodName:getInstance:["org.apache.camel:context=localhost/camel-1,type=threadpools,name=threads1(threads)"] @TO@ MethodName:getInstance:["org.apache.camel:context=localhost/camel-1,type=threadpools,name=\"threads1(threads)\""] @AT@ 1362 @LENGTH@ 97
------------UPD StringLiteral@@"org.apache.camel:context=localhost/camel-1,type=threadpools,name=threads1(threads)" @TO@ "org.apache.camel:context=localhost/camel-1,type=threadpools,name=\"threads1(threads)\"" @AT@ 1374 @LENGTH@ 84


UPD TypeDeclaration@@SessionInvocationContextInterceptor, [Interceptor] @TO@ [public]SessionInvocationContextInterceptor, [Interceptor] @AT@ 1687 @LENGTH@ 2317
---INS Modifier@@public @TO@ TypeDeclaration@@SessionInvocationContextInterceptor, [Interceptor] @AT@ 1681 @LENGTH@ 6


UPD MethodDeclaration@@public, Object, MethodName:doInJms, Session session, QueueBrowser browser, JMSException,  @TO@ public, List<Exchange>, MethodName:doInJms, Session session, QueueBrowser browser, JMSException,  @AT@ 1568 @LENGTH@ 653
---INS ParameterizedType@@List<Exchange> @TO@ MethodDeclaration@@public, Object, MethodName:doInJms, Session session, QueueBrowser browser, JMSException,  @AT@ 1570 @LENGTH@ 14
------INS SimpleType@@List @TO@ ParameterizedType@@List<Exchange> @AT@ 1570 @LENGTH@ 4
------INS SimpleType@@Exchange @TO@ ParameterizedType@@List<Exchange> @AT@ 1575 @LENGTH@ 8
---DEL SimpleType@@Object @AT@ 1575 @LENGTH@ 6


INS MethodDeclaration@@String, MethodName:getProfileUrl,  @TO@ TypeDeclaration@@[public]GitHubOperations,  @AT@ 1586 @LENGTH@ 16
---INS SimpleType@@String @TO@ MethodDeclaration@@String, MethodName:getProfileUrl,  @AT@ 1579 @LENGTH@ 6
---INS SimpleName@@MethodName:getProfileUrl @TO@ MethodDeclaration@@String, MethodName:getProfileUrl,  @AT@ 1586 @LENGTH@ 13


UPD ReturnStatement@@MethodInvocation:o1.getVersion().compareToIgnoreCase(o1.getVersion()) @TO@ MethodInvocation:o1.getVersion().compareToIgnoreCase(o2.getVersion()) @AT@ 1961 @LENGTH@ 60
---UPD MethodInvocation@@o1.getVersion().compareToIgnoreCase(o1.getVersion()) @TO@ o1.getVersion().compareToIgnoreCase(o2.getVersion()) @AT@ 1968 @LENGTH@ 52
------UPD SimpleName@@MethodName:compareToIgnoreCase:[o1.getVersion()] @TO@ MethodName:compareToIgnoreCase:[o2.getVersion()] @AT@ 1984 @LENGTH@ 36
---------UPD MethodInvocation@@o1.getVersion() @TO@ o2.getVersion() @AT@ 2004 @LENGTH@ 15
------------UPD SimpleName@@Name:o1 @TO@ Name:o2 @AT@ 2004 @LENGTH@ 2


INS TryStatement@@try {  uri=exchange.getContext().resolvePropertyPlaceholders(uri);} catch (Exception e) {  throw new RuntimeExchangeException("Cannot resolve property placeholders with uri: " + uri,exchange,e);} @TO@ MethodDeclaration@@public, static, String, MethodName:createURL, Exchange exchange, HttpEndpoint endpoint,  @AT@ 6009 @LENGTH@ 239
---INS ExpressionStatement@@Assignment:uri=exchange.getContext().resolvePropertyPlaceholders(uri) @TO@ TryStatement@@try {  uri=exchange.getContext().resolvePropertyPlaceholders(uri);} catch (Exception e) {  throw new RuntimeExchangeException("Cannot resolve property placeholders with uri: " + uri,exchange,e);} @AT@ 6027 @LENGTH@ 61
------INS Assignment@@uri=exchange.getContext().resolvePropertyPlaceholders(uri) @TO@ ExpressionStatement@@Assignment:uri=exchange.getContext().resolvePropertyPlaceholders(uri) @AT@ 6027 @LENGTH@ 60
---------INS SimpleName@@uri @TO@ Assignment@@uri=exchange.getContext().resolvePropertyPlaceholders(uri) @AT@ 6027 @LENGTH@ 3
---------INS Operator@@= @TO@ Assignment@@uri=exchange.getContext().resolvePropertyPlaceholders(uri) @AT@ 6030 @LENGTH@ 1
---------INS MethodInvocation@@exchange.getContext().resolvePropertyPlaceholders(uri) @TO@ Assignment@@uri=exchange.getContext().resolvePropertyPlaceholders(uri) @AT@ 6033 @LENGTH@ 54
------------INS MethodInvocation@@MethodName:getContext:[] @TO@ MethodInvocation@@exchange.getContext().resolvePropertyPlaceholders(uri) @AT@ 6033 @LENGTH@ 21
------------INS SimpleName@@Name:exchange @TO@ MethodInvocation@@exchange.getContext().resolvePropertyPlaceholders(uri) @AT@ 6033 @LENGTH@ 8
------------INS SimpleName@@MethodName:resolvePropertyPlaceholders:[uri] @TO@ MethodInvocation@@exchange.getContext().resolvePropertyPlaceholders(uri) @AT@ 6055 @LENGTH@ 32
---------------INS SimpleName@@uri @TO@ SimpleName@@MethodName:resolvePropertyPlaceholders:[uri] @AT@ 6083 @LENGTH@ 3
---INS CatchClause@@catch (Exception e) {  throw new RuntimeExchangeException("Cannot resolve property placeholders with uri: " + uri,exchange,e);} @TO@ TryStatement@@try {  uri=exchange.getContext().resolvePropertyPlaceholders(uri);} catch (Exception e) {  throw new RuntimeExchangeException("Cannot resolve property placeholders with uri: " + uri,exchange,e);} @AT@ 6099 @LENGTH@ 149
------INS SingleVariableDeclaration@@Exception e @TO@ CatchClause@@catch (Exception e) {  throw new RuntimeExchangeException("Cannot resolve property placeholders with uri: " + uri,exchange,e);} @AT@ 6106 @LENGTH@ 11
---------INS SimpleType@@Exception @TO@ SingleVariableDeclaration@@Exception e @AT@ 6106 @LENGTH@ 9
---------INS SimpleName@@e @TO@ SingleVariableDeclaration@@Exception e @AT@ 6116 @LENGTH@ 1
------INS ThrowStatement@@ClassInstanceCreation:new RuntimeExchangeException("Cannot resolve property placeholders with uri: " + uri,exchange,e) @TO@ CatchClause@@catch (Exception e) {  throw new RuntimeExchangeException("Cannot resolve property placeholders with uri: " + uri,exchange,e);} @AT@ 6133 @LENGTH@ 105
---------INS ClassInstanceCreation@@RuntimeExchangeException["Cannot resolve property placeholders with uri: " + uri, exchange, e] @TO@ ThrowStatement@@ClassInstanceCreation:new RuntimeExchangeException("Cannot resolve property placeholders with uri: " + uri,exchange,e) @AT@ 6139 @LENGTH@ 98
------------INS New@@new @TO@ ClassInstanceCreation@@RuntimeExchangeException["Cannot resolve property placeholders with uri: " + uri, exchange, e] @AT@ 6139 @LENGTH@ 3
------------INS SimpleType@@RuntimeExchangeException @TO@ ClassInstanceCreation@@RuntimeExchangeException["Cannot resolve property placeholders with uri: " + uri, exchange, e] @AT@ 6143 @LENGTH@ 24
------------INS InfixExpression@@"Cannot resolve property placeholders with uri: " + uri @TO@ ClassInstanceCreation@@RuntimeExchangeException["Cannot resolve property placeholders with uri: " + uri, exchange, e] @AT@ 6168 @LENGTH@ 55
---------------INS StringLiteral@@"Cannot resolve property placeholders with uri: " @TO@ InfixExpression@@"Cannot resolve property placeholders with uri: " + uri @AT@ 6168 @LENGTH@ 49
---------------INS Operator@@+ @TO@ InfixExpression@@"Cannot resolve property placeholders with uri: " + uri @AT@ 6217 @LENGTH@ 1
---------------INS SimpleName@@uri @TO@ InfixExpression@@"Cannot resolve property placeholders with uri: " + uri @AT@ 6220 @LENGTH@ 3
------------INS SimpleName@@exchange @TO@ ClassInstanceCreation@@RuntimeExchangeException["Cannot resolve property placeholders with uri: " + uri, exchange, e] @AT@ 6225 @LENGTH@ 8
------------INS SimpleName@@e @TO@ ClassInstanceCreation@@RuntimeExchangeException["Cannot resolve property placeholders with uri: " + uri, exchange, e] @AT@ 6235 @LENGTH@ 1


UPD TryStatement@@try {  InputStream input=archive.as(ZipExporter.class).exportZip();  DeploymentPlanBuilder builder=deploymentManager.newDeploymentPlan();  builder=builder.add(archive.getName(),input).andDeploy();  DeploymentPlan plan=builder.build();  DeploymentAction deployAction=builder.getLastAction();  String runtimeName=executeDeploymentPlan(plan,deployAction);  registry.put(archive,runtimeName);  return getContainerMethodExecutor(context);} catch (Exception e) {  throw new DeploymentException("Could not deploy to container",e);} @TO@ try {  InputStream input=archive.as(ZipExporter.class).exportZip();  DeploymentPlanBuilder builder=deploymentManager.newDeploymentPlan();  builder=builder.add(archive.getName(),input).andDeploy();  DeploymentPlan plan=builder.build();  DeploymentAction deployAction=builder.getLastAction();  executeDeploymentPlan(plan,deployAction,archive);  return getContainerMethodExecutor(context);} catch (Exception e) {  throw new DeploymentException("Could not deploy to container",e);} @AT@ 3889 @LENGTH@ 658
---INS ExpressionStatement@@MethodInvocation:executeDeploymentPlan(plan,deployAction,archive) @TO@ TryStatement@@try {  InputStream input=archive.as(ZipExporter.class).exportZip();  DeploymentPlanBuilder builder=deploymentManager.newDeploymentPlan();  builder=builder.add(archive.getName(),input).andDeploy();  DeploymentPlan plan=builder.build();  DeploymentAction deployAction=builder.getLastAction();  String runtimeName=executeDeploymentPlan(plan,deployAction);  registry.put(archive,runtimeName);  return getContainerMethodExecutor(context);} catch (Exception e) {  throw new DeploymentException("Could not deploy to container",e);} @AT@ 4257 @LENGTH@ 50
------INS MethodInvocation@@executeDeploymentPlan(plan,deployAction,archive) @TO@ ExpressionStatement@@MethodInvocation:executeDeploymentPlan(plan,deployAction,archive) @AT@ 4257 @LENGTH@ 49
---------MOV SimpleName@@MethodName:executeDeploymentPlan:[plan, deployAction] @TO@ MethodInvocation@@executeDeploymentPlan(plan,deployAction,archive) @AT@ 4279 @LENGTH@ 41
------------INS SimpleName@@archive @TO@ SimpleName@@MethodName:executeDeploymentPlan:[plan, deployAction] @AT@ 4298 @LENGTH@ 7
---DEL VariableDeclarationStatement@@String runtimeName=executeDeploymentPlan(plan,deployAction); @AT@ 4258 @LENGTH@ 63
------DEL SimpleType@@String @AT@ 4258 @LENGTH@ 6
------DEL VariableDeclarationFragment@@runtimeName=executeDeploymentPlan(plan,deployAction) @AT@ 4265 @LENGTH@ 55
---------DEL SimpleName@@runtimeName @AT@ 4265 @LENGTH@ 11
---------DEL MethodInvocation@@executeDeploymentPlan(plan,deployAction) @AT@ 4279 @LENGTH@ 41
---DEL ExpressionStatement@@MethodInvocation:registry.put(archive,runtimeName) @AT@ 4334 @LENGTH@ 35
------DEL MethodInvocation@@registry.put(archive,runtimeName) @AT@ 4334 @LENGTH@ 34
---------DEL SimpleName@@Name:registry @AT@ 4334 @LENGTH@ 8
---------DEL SimpleName@@MethodName:put:[archive, runtimeName] @AT@ 4343 @LENGTH@ 25
------------DEL SimpleName@@archive @AT@ 4347 @LENGTH@ 7
------------DEL SimpleName@@runtimeName @AT@ 4356 @LENGTH@ 11


UPD ReturnStatement@@ParenthesizedExpression:(c == '\n') @TO@ ParenthesizedExpression:(c == '\n' || c == '\r') @AT@ 19421 @LENGTH@ 19
---UPD ParenthesizedExpression@@(c == '\n') @TO@ (c == '\n' || c == '\r') @AT@ 19428 @LENGTH@ 11
------DEL InfixExpression@@c == '\n' @AT@ 19429 @LENGTH@ 9
------INS InfixExpression@@c == '\n' || c == '\r' @TO@ ParenthesizedExpression@@(c == '\n') @AT@ 19460 @LENGTH@ 22
---------INS InfixExpression@@c == '\n' @TO@ InfixExpression@@c == '\n' || c == '\r' @AT@ 19460 @LENGTH@ 9
------------MOV SimpleName@@c @TO@ InfixExpression@@c == '\n' @AT@ 19429 @LENGTH@ 1
------------MOV Operator@@== @TO@ InfixExpression@@c == '\n' @AT@ 19430 @LENGTH@ 2
------------MOV CharacterLiteral@@'\n' @TO@ InfixExpression@@c == '\n' @AT@ 19434 @LENGTH@ 4
---------INS Operator@@|| @TO@ InfixExpression@@c == '\n' || c == '\r' @AT@ 19469 @LENGTH@ 2
---------INS InfixExpression@@c == '\r' @TO@ InfixExpression@@c == '\n' || c == '\r' @AT@ 19473 @LENGTH@ 9
------------INS SimpleName@@c @TO@ InfixExpression@@c == '\r' @AT@ 19473 @LENGTH@ 1
------------INS Operator@@== @TO@ InfixExpression@@c == '\r' @AT@ 19474 @LENGTH@ 2
------------INS CharacterLiteral@@'\r' @TO@ InfixExpression@@c == '\r' @AT@ 19478 @LENGTH@ 4


UPD IfStatement@@if (column.getLength() < 4000 && fieldType.equals(JavaType.STRING_OBJECT)) {  columnBuilder.addIntegerAttribute("length",column.getLength());} @TO@ if (column.getColumnSize() < 4000 && fieldType.equals(JavaType.STRING_OBJECT)) {  columnBuilder.addIntegerAttribute("length",column.getColumnSize());} @AT@ 31677 @LENGTH@ 148
---UPD InfixExpression@@column.getLength() < 4000 && fieldType.equals(JavaType.STRING_OBJECT) @TO@ column.getColumnSize() < 4000 && fieldType.equals(JavaType.STRING_OBJECT) @AT@ 31681 @LENGTH@ 69
------UPD InfixExpression@@column.getLength() < 4000 @TO@ column.getColumnSize() < 4000 @AT@ 31681 @LENGTH@ 25
---------UPD MethodInvocation@@column.getLength() @TO@ column.getColumnSize() @AT@ 31681 @LENGTH@ 18
------------UPD SimpleName@@MethodName:getLength:[] @TO@ MethodName:getColumnSize:[] @AT@ 31688 @LENGTH@ 11
---UPD Block@@ThenBody:{  columnBuilder.addIntegerAttribute("length",column.getLength());} @TO@ ThenBody:{  columnBuilder.addIntegerAttribute("length",column.getColumnSize());} @AT@ 31752 @LENGTH@ 73
------UPD ExpressionStatement@@MethodInvocation:columnBuilder.addIntegerAttribute("length",column.getLength()) @TO@ MethodInvocation:columnBuilder.addIntegerAttribute("length",column.getColumnSize()) @AT@ 31757 @LENGTH@ 64
---------UPD MethodInvocation@@columnBuilder.addIntegerAttribute("length",column.getLength()) @TO@ columnBuilder.addIntegerAttribute("length",column.getColumnSize()) @AT@ 31757 @LENGTH@ 63
------------UPD SimpleName@@MethodName:addIntegerAttribute:["length", column.getLength()] @TO@ MethodName:addIntegerAttribute:["length", column.getColumnSize()] @AT@ 31771 @LENGTH@ 49
---------------UPD MethodInvocation@@column.getLength() @TO@ column.getColumnSize() @AT@ 31801 @LENGTH@ 18
------------------UPD SimpleName@@MethodName:getLength:[] @TO@ MethodName:getColumnSize:[] @AT@ 31808 @LENGTH@ 11


UPD FieldDeclaration@@private, Integer, [enquireLinkTimer=new Integer(5000)] @TO@ private, Integer, [enquireLinkTimer=5000] @AT@ 1508 @LENGTH@ 53
---UPD VariableDeclarationFragment@@enquireLinkTimer=new Integer(5000) @TO@ enquireLinkTimer=5000 @AT@ 1524 @LENGTH@ 36
------DEL ClassInstanceCreation@@Integer[5000] @AT@ 1543 @LENGTH@ 17
---------DEL New@@new @AT@ 1543 @LENGTH@ 3
---------DEL SimpleType@@Integer @AT@ 1547 @LENGTH@ 7
---------DEL NumberLiteral@@5000 @AT@ 1555 @LENGTH@ 4
------INS NumberLiteral@@5000 @TO@ VariableDeclarationFragment@@enquireLinkTimer=new Integer(5000) @AT@ 1543 @LENGTH@ 4


UPD TryStatement@@try {  ModelNode param=operation.get(SCHEMA_LOCATION);  ModelNode locations=context.getSubModel().get(SCHEMA_LOCATIONS);  ModelNode toRemove=null;  String failure=typeValidator.validateParameter(SCHEMA_LOCATION,param);  if (failure == null) {    ModelNode newList=new ModelNode().setEmptyList();    String uri=param.asProperty().getName();    if (locations.isDefined()) {      for (      Property location : locations.asPropertyList()) {        if (!uri.equals(location.getName())) {          toRemove=newList.add(location.getName(),location.getValue());          break;        }      }    }    if (toRemove != null) {      locations.set(newList);      ModelNode compensating=SchemaLocationAddHandler.getAddSchemaLocationOperation(operation.get(OP_ADDR),toRemove);      resultHandler.handleResultComplete(compensating);    } else {      failure="No schema location with URI " + uri + "found";    }  }  if (failure != null) {    resultHandler.handleFailed(new ModelNode().set(failure));  }} catch (Exception e) {  resultHandler.handleFailed(new ModelNode().set(e.getLocalizedMessage()));} @TO@ try {  ModelNode param=operation.get(SCHEMA_LOCATION);  String failure=typeValidator.validateParameter(SCHEMA_LOCATION,param);  if (failure == null) {    ModelNode locations=context.getSubModel().get(SCHEMA_LOCATIONS);    Property toRemove=null;    ModelNode newList=new ModelNode().setEmptyList();    String uri=param.asString();    if (locations.isDefined()) {      for (      Property location : locations.asPropertyList()) {        if (uri.equals(location.getName())) {          toRemove=location;        } else {          newList.add(location.getName(),location.getValue());        }      }    }    if (toRemove != null) {      locations.set(newList);      ModelNode compensating=SchemaLocationAddHandler.getAddSchemaLocationOperation(operation.get(OP_ADDR),toRemove);      resultHandler.handleResultComplete(compensating);    } else {      failure="No schema location with URI " + uri + " found";    }  }  if (failure != null) {    resultHandler.handleFailed(new ModelNode().set(failure));  }} catch (Exception e) {  resultHandler.handleFailed(new ModelNode().set(e.getLocalizedMessage()));} @AT@ 3053 @LENGTH@ 1511
---DEL VariableDeclarationStatement@@ModelNode toRemove=null; @AT@ 3212 @LENGTH@ 26
------DEL SimpleType@@ModelNode @AT@ 3212 @LENGTH@ 9
------DEL VariableDeclarationFragment@@toRemove=null @AT@ 3222 @LENGTH@ 15
---------DEL SimpleName@@toRemove @AT@ 3222 @LENGTH@ 8
---------DEL NullLiteral@@null @AT@ 3233 @LENGTH@ 4
---UPD IfStatement@@if (failure == null) {  ModelNode newList=new ModelNode().setEmptyList();  String uri=param.asProperty().getName();  if (locations.isDefined()) {    for (    Property location : locations.asPropertyList()) {      if (!uri.equals(location.getName())) {        toRemove=newList.add(location.getName(),location.getValue());        break;      }    }  }  if (toRemove != null) {    locations.set(newList);    ModelNode compensating=SchemaLocationAddHandler.getAddSchemaLocationOperation(operation.get(OP_ADDR),toRemove);    resultHandler.handleResultComplete(compensating);  } else {    failure="No schema location with URI " + uri + "found";  }} @TO@ if (failure == null) {  ModelNode locations=context.getSubModel().get(SCHEMA_LOCATIONS);  Property toRemove=null;  ModelNode newList=new ModelNode().setEmptyList();  String uri=param.asString();  if (locations.isDefined()) {    for (    Property location : locations.asPropertyList()) {      if (uri.equals(location.getName())) {        toRemove=location;      } else {        newList.add(location.getName(),location.getValue());      }    }  }  if (toRemove != null) {    locations.set(newList);    ModelNode compensating=SchemaLocationAddHandler.getAddSchemaLocationOperation(operation.get(OP_ADDR),toRemove);    resultHandler.handleResultComplete(compensating);  } else {    failure="No schema location with URI " + uri + " found";  }} @AT@ 3337 @LENGTH@ 967
------UPD Block@@ThenBody:{  ModelNode newList=new ModelNode().setEmptyList();  String uri=param.asProperty().getName();  if (locations.isDefined()) {    for (    Property location : locations.asPropertyList()) {      if (!uri.equals(location.getName())) {        toRemove=newList.add(location.getName(),location.getValue());        break;      }    }  }  if (toRemove != null) {    locations.set(newList);    ModelNode compensating=SchemaLocationAddHandler.getAddSchemaLocationOperation(operation.get(OP_ADDR),toRemove);    resultHandler.handleResultComplete(compensating);  } else {    failure="No schema location with URI " + uri + "found";  }} @TO@ ThenBody:{  ModelNode locations=context.getSubModel().get(SCHEMA_LOCATIONS);  Property toRemove=null;  ModelNode newList=new ModelNode().setEmptyList();  String uri=param.asString();  if (locations.isDefined()) {    for (    Property location : locations.asPropertyList()) {      if (uri.equals(location.getName())) {        toRemove=location;      } else {        newList.add(location.getName(),location.getValue());      }    }  }  if (toRemove != null) {    locations.set(newList);    ModelNode compensating=SchemaLocationAddHandler.getAddSchemaLocationOperation(operation.get(OP_ADDR),toRemove);    resultHandler.handleResultComplete(compensating);  } else {    failure="No schema location with URI " + uri + " found";  }} @AT@ 3358 @LENGTH@ 946
---------MOV VariableDeclarationStatement@@ModelNode locations=context.getSubModel().get(SCHEMA_LOCATIONS); @TO@ Block@@ThenBody:{  ModelNode newList=new ModelNode().setEmptyList();  String uri=param.asProperty().getName();  if (locations.isDefined()) {    for (    Property location : locations.asPropertyList()) {      if (!uri.equals(location.getName())) {        toRemove=newList.add(location.getName(),location.getValue());        break;      }    }  }  if (toRemove != null) {    locations.set(newList);    ModelNode compensating=SchemaLocationAddHandler.getAddSchemaLocationOperation(operation.get(OP_ADDR),toRemove);    resultHandler.handleResultComplete(compensating);  } else {    failure="No schema location with URI " + uri + "found";  }} @AT@ 3133 @LENGTH@ 66
---------INS VariableDeclarationStatement@@Property toRemove=null; @TO@ Block@@ThenBody:{  ModelNode newList=new ModelNode().setEmptyList();  String uri=param.asProperty().getName();  if (locations.isDefined()) {    for (    Property location : locations.asPropertyList()) {      if (!uri.equals(location.getName())) {        toRemove=newList.add(location.getName(),location.getValue());        break;      }    }  }  if (toRemove != null) {    locations.set(newList);    ModelNode compensating=SchemaLocationAddHandler.getAddSchemaLocationOperation(operation.get(OP_ADDR),toRemove);    resultHandler.handleResultComplete(compensating);  } else {    failure="No schema location with URI " + uri + "found";  }} @AT@ 3341 @LENGTH@ 25
------------INS SimpleType@@Property @TO@ VariableDeclarationStatement@@Property toRemove=null; @AT@ 3341 @LENGTH@ 8
------------INS VariableDeclarationFragment@@toRemove=null @TO@ VariableDeclarationStatement@@Property toRemove=null; @AT@ 3350 @LENGTH@ 15
---------------INS SimpleName@@toRemove @TO@ VariableDeclarationFragment@@toRemove=null @AT@ 3350 @LENGTH@ 8
---------------INS NullLiteral@@null @TO@ VariableDeclarationFragment@@toRemove=null @AT@ 3361 @LENGTH@ 4
---------UPD VariableDeclarationStatement@@String uri=param.asProperty().getName(); @TO@ String uri=param.asString(); @AT@ 3444 @LENGTH@ 42
------------UPD VariableDeclarationFragment@@uri=param.asProperty().getName() @TO@ uri=param.asString() @AT@ 3451 @LENGTH@ 34
---------------UPD MethodInvocation@@param.asProperty().getName() @TO@ param.asString() @AT@ 3457 @LENGTH@ 28
------------------DEL MethodInvocation@@MethodName:asProperty:[] @AT@ 3457 @LENGTH@ 18
------------------UPD SimpleName@@MethodName:getName:[] @TO@ MethodName:asString:[] @AT@ 3476 @LENGTH@ 9
---------UPD IfStatement@@if (locations.isDefined()) {  for (  Property location : locations.asPropertyList()) {    if (!uri.equals(location.getName())) {      toRemove=newList.add(location.getName(),location.getValue());      break;    }  }} @TO@ if (locations.isDefined()) {  for (  Property location : locations.asPropertyList()) {    if (uri.equals(location.getName())) {      toRemove=location;    } else {      newList.add(location.getName(),location.getValue());    }  }} @AT@ 3503 @LENGTH@ 360
------------UPD Block@@ThenBody:{  for (  Property location : locations.asPropertyList()) {    if (!uri.equals(location.getName())) {      toRemove=newList.add(location.getName(),location.getValue());      break;    }  }} @TO@ ThenBody:{  for (  Property location : locations.asPropertyList()) {    if (uri.equals(location.getName())) {      toRemove=location;    } else {      newList.add(location.getName(),location.getValue());    }  }} @AT@ 3530 @LENGTH@ 333
---------------UPD EnhancedForStatement@@for (Property location : locations.asPropertyList()) {  if (!uri.equals(location.getName())) {    toRemove=newList.add(location.getName(),location.getValue());    break;  }} @TO@ for (Property location : locations.asPropertyList()) {  if (uri.equals(location.getName())) {    toRemove=location;  } else {    newList.add(location.getName(),location.getValue());  }} @AT@ 3552 @LENGTH@ 293
------------------UPD IfStatement@@if (!uri.equals(location.getName())) {  toRemove=newList.add(location.getName(),location.getValue());  break;} @TO@ if (uri.equals(location.getName())) {  toRemove=location;} else {  newList.add(location.getName(),location.getValue());} @AT@ 3631 @LENGTH@ 192
---------------------DEL PrefixExpression@@!uri.equals(location.getName()) @AT@ 3635 @LENGTH@ 31
------------------------DEL Operator@@! @AT@ 3635 @LENGTH@ 1
---------------------MOV MethodInvocation@@uri.equals(location.getName()) @TO@ IfStatement@@if (!uri.equals(location.getName())) {  toRemove=newList.add(location.getName(),location.getValue());  break;} @AT@ 3636 @LENGTH@ 30
---------------------INS Block@@ThenBody:{  toRemove=location;} @TO@ IfStatement@@if (!uri.equals(location.getName())) {  toRemove=newList.add(location.getName(),location.getValue());  break;} @AT@ 3662 @LENGTH@ 76
------------------------INS ExpressionStatement@@Assignment:toRemove=location @TO@ Block@@ThenBody:{  toRemove=location;} @AT@ 3692 @LENGTH@ 20
---------------------------INS Assignment@@toRemove=location @TO@ ExpressionStatement@@Assignment:toRemove=location @AT@ 3692 @LENGTH@ 19
------------------------------INS SimpleName@@toRemove @TO@ Assignment@@toRemove=location @AT@ 3692 @LENGTH@ 8
------------------------------INS Operator@@= @TO@ Assignment@@toRemove=location @AT@ 3700 @LENGTH@ 1
------------------------------INS SimpleName@@location @TO@ Assignment@@toRemove=location @AT@ 3703 @LENGTH@ 8
---------------------UPD Block@@ThenBody:{  toRemove=newList.add(location.getName(),location.getValue());  break;} @TO@ ElseBody:{  newList.add(location.getName(),location.getValue());} @AT@ 3668 @LENGTH@ 155
------------------------UPD ExpressionStatement@@Assignment:toRemove=newList.add(location.getName(),location.getValue()) @TO@ MethodInvocation:newList.add(location.getName(),location.getValue()) @AT@ 3698 @LENGTH@ 64
---------------------------DEL Assignment@@toRemove=newList.add(location.getName(),location.getValue()) @AT@ 3698 @LENGTH@ 63
------------------------------DEL SimpleName@@toRemove @AT@ 3698 @LENGTH@ 8
------------------------------DEL Operator@@= @AT@ 3706 @LENGTH@ 1
---------------------------MOV MethodInvocation@@newList.add(location.getName(),location.getValue()) @TO@ ExpressionStatement@@Assignment:toRemove=newList.add(location.getName(),location.getValue()) @AT@ 3709 @LENGTH@ 52
------------------------DEL BreakStatement@@ @AT@ 3791 @LENGTH@ 6
---------UPD IfStatement@@if (toRemove != null) {  locations.set(newList);  ModelNode compensating=SchemaLocationAddHandler.getAddSchemaLocationOperation(operation.get(OP_ADDR),toRemove);  resultHandler.handleResultComplete(compensating);} else {  failure="No schema location with URI " + uri + "found";} @TO@ if (toRemove != null) {  locations.set(newList);  ModelNode compensating=SchemaLocationAddHandler.getAddSchemaLocationOperation(operation.get(OP_ADDR),toRemove);  resultHandler.handleResultComplete(compensating);} else {  failure="No schema location with URI " + uri + " found";} @AT@ 3881 @LENGTH@ 409
------------UPD Block@@ElseBody:{  failure="No schema location with URI " + uri + "found";} @TO@ ElseBody:{  failure="No schema location with URI " + uri + " found";} @AT@ 4193 @LENGTH@ 97
---------------UPD ExpressionStatement@@Assignment:failure="No schema location with URI " + uri + "found" @TO@ Assignment:failure="No schema location with URI " + uri + " found" @AT@ 4215 @LENGTH@ 57
------------------UPD Assignment@@failure="No schema location with URI " + uri + "found" @TO@ failure="No schema location with URI " + uri + " found" @AT@ 4215 @LENGTH@ 56
---------------------UPD InfixExpression@@"No schema location with URI " + uri + "found" @TO@ "No schema location with URI " + uri + " found" @AT@ 4225 @LENGTH@ 46
------------------------UPD StringLiteral@@"found" @TO@ " found" @AT@ 4264 @LENGTH@ 7


UPD ExpressionStatement@@MethodInvocation:result.add(ConnectionFactoryAdd.getAddOperation(address,subModel)) @TO@ MethodInvocation:result.add(ConnectionFactoryAdd.getAddOperation(address,property.getValue())) @AT@ 2900 @LENGTH@ 68
---UPD MethodInvocation@@result.add(ConnectionFactoryAdd.getAddOperation(address,subModel)) @TO@ result.add(ConnectionFactoryAdd.getAddOperation(address,property.getValue())) @AT@ 2900 @LENGTH@ 67
------UPD SimpleName@@MethodName:add:[ConnectionFactoryAdd.getAddOperation(address,subModel)] @TO@ MethodName:add:[ConnectionFactoryAdd.getAddOperation(address,property.getValue())] @AT@ 2907 @LENGTH@ 60
---------UPD MethodInvocation@@ConnectionFactoryAdd.getAddOperation(address,subModel) @TO@ ConnectionFactoryAdd.getAddOperation(address,property.getValue()) @AT@ 2911 @LENGTH@ 55
------------UPD SimpleName@@MethodName:getAddOperation:[address, subModel] @TO@ MethodName:getAddOperation:[address, property.getValue()] @AT@ 2932 @LENGTH@ 34
---------------INS MethodInvocation@@property.getValue() @TO@ SimpleName@@MethodName:getAddOperation:[address, subModel] @AT@ 2957 @LENGTH@ 19
------------------INS SimpleName@@Name:property @TO@ MethodInvocation@@property.getValue() @AT@ 2957 @LENGTH@ 8
------------------INS SimpleName@@MethodName:getValue:[] @TO@ MethodInvocation@@property.getValue() @AT@ 2966 @LENGTH@ 10
---------------DEL SimpleName@@subModel @AT@ 2957 @LENGTH@ 8


UPD MethodDeclaration@@public, boolean, MethodName:canAppearNext, CommandContext ctx,  @TO@ public, boolean, MethodName:canAppearNext, CommandContext ctx, CommandFormatException,  @AT@ 2237 @LENGTH@ 207
---INS SimpleType@@CommandFormatException @TO@ MethodDeclaration@@public, boolean, MethodName:canAppearNext, CommandContext ctx,  @AT@ 2293 @LENGTH@ 22


MOV ExpressionStatement@@SuperMethodInvocation:super.setUp() @TO@ MethodDeclaration@@public, void, MethodName:setUp, Exception,  @AT@ 1329 @LENGTH@ 14


UPD MethodDeclaration@@protected, CriteriaQuery<Object>, MethodName:finalize, Predicate predicate, Sort sort, CriteriaQuery<Object> query, CriteriaBuilder builder,  @TO@ protected, CriteriaQuery<Object>, MethodName:complete, Predicate predicate, Sort sort, CriteriaQuery<Object> query, CriteriaBuilder builder,  @AT@ 4240 @LENGTH@ 271
---UPD SimpleName@@MethodName:finalize @TO@ MethodName:complete @AT@ 4272 @LENGTH@ 8


UPD ExpressionStatement@@MethodInvocation:dataSources.registerReadWriteAttribute(attributeName,DataSourcePoolConfigurationReadHandler.INSTANCE,DataSourcePoolConfigurationWriteHandler.INSTANCE,Storage.RUNTIME) @TO@ MethodInvocation:dataSources.registerReadWriteAttribute(attributeName,DataSourcePoolConfigurationReadHandler.INSTANCE,DataSourcePoolConfigurationWriteHandler.INSTANCE,Storage.CONFIGURATION) @AT@ 13530 @LENGTH@ 190
---UPD MethodInvocation@@dataSources.registerReadWriteAttribute(attributeName,DataSourcePoolConfigurationReadHandler.INSTANCE,DataSourcePoolConfigurationWriteHandler.INSTANCE,Storage.RUNTIME) @TO@ dataSources.registerReadWriteAttribute(attributeName,DataSourcePoolConfigurationReadHandler.INSTANCE,DataSourcePoolConfigurationWriteHandler.INSTANCE,Storage.CONFIGURATION) @AT@ 13530 @LENGTH@ 189
------UPD SimpleName@@MethodName:registerReadWriteAttribute:[attributeName, DataSourcePoolConfigurationReadHandler.INSTANCE, DataSourcePoolConfigurationWriteHandler.INSTANCE, Storage.RUNTIME] @TO@ MethodName:registerReadWriteAttribute:[attributeName, DataSourcePoolConfigurationReadHandler.INSTANCE, DataSourcePoolConfigurationWriteHandler.INSTANCE, Storage.CONFIGURATION] @AT@ 13542 @LENGTH@ 177
---------UPD QualifiedName@@Storage.RUNTIME @TO@ Storage.CONFIGURATION @AT@ 13703 @LENGTH@ 15
------------UPD SimpleName@@RUNTIME @TO@ CONFIGURATION @AT@ 13711 @LENGTH@ 7


UPD ForStatement@@for (int i=0; i < callbacks.length; i++) {  WSPasswordCallback pc=(WSPasswordCallback)callbacks[i];  String pass=passwords.get(pc.getIdentifier());  if (WSConstants.PASSWORD_DIGEST.equals(pc.getPasswordType())) {    if (pass != null) {      pc.setPassword(pass);      return;    }  }  if (WSConstants.PASSWORD_TEXT.equals(pc.getPasswordType())) {    if (!pc.getPassword().equals(pass)) {      throw new IOException("Wrong password!");    }  }} @TO@ for (int i=0; i < callbacks.length; i++) {  WSPasswordCallback pc=(WSPasswordCallback)callbacks[i];  String pass=passwords.get(pc.getIdentifier());  String type=getPasswordType(pc);  if (WSConstants.PASSWORD_DIGEST.equals(type)) {    if (pass != null) {      pc.setPassword(pass);      return;    }  }  if (WSConstants.PASSWORD_TEXT.equals(type)) {    if (!pc.getPassword().equals(pass)) {      throw new IOException("Wrong password!");    }  }} @AT@ 1733 @LENGTH@ 730
---UPD IfStatement@@if (WSConstants.PASSWORD_DIGEST.equals(pc.getPasswordType())) {  if (pass != null) {    pc.setPassword(pass);    return;  }} @TO@ if (WSConstants.PASSWORD_DIGEST.equals(type)) {  if (pass != null) {    pc.setPassword(pass);    return;  }} @AT@ 1921 @LENGTH@ 201
------UPD MethodInvocation@@WSConstants.PASSWORD_DIGEST.equals(pc.getPasswordType()) @TO@ WSConstants.PASSWORD_DIGEST.equals(type) @AT@ 1925 @LENGTH@ 56
---------UPD SimpleName@@MethodName:equals:[pc.getPasswordType()] @TO@ MethodName:equals:[type] @AT@ 1953 @LENGTH@ 28
------------DEL MethodInvocation@@pc.getPasswordType() @AT@ 1960 @LENGTH@ 20
---------------DEL SimpleName@@Name:pc @AT@ 1960 @LENGTH@ 2
---------------DEL SimpleName@@MethodName:getPasswordType:[] @AT@ 1963 @LENGTH@ 17
------------INS SimpleName@@type @TO@ SimpleName@@MethodName:equals:[pc.getPasswordType()] @AT@ 2092 @LENGTH@ 4
---INS VariableDeclarationStatement@@String type=getPasswordType(pc); @TO@ ForStatement@@for (int i=0; i < callbacks.length; i++) {  WSPasswordCallback pc=(WSPasswordCallback)callbacks[i];  String pass=passwords.get(pc.getIdentifier());  if (WSConstants.PASSWORD_DIGEST.equals(pc.getPasswordType())) {    if (pass != null) {      pc.setPassword(pass);      return;    }  }  if (WSConstants.PASSWORD_TEXT.equals(pc.getPasswordType())) {    if (!pc.getPassword().equals(pass)) {      throw new IOException("Wrong password!");    }  }} @AT@ 2006 @LENGTH@ 34
------INS SimpleType@@String @TO@ VariableDeclarationStatement@@String type=getPasswordType(pc); @AT@ 2006 @LENGTH@ 6
------INS VariableDeclarationFragment@@type=getPasswordType(pc) @TO@ VariableDeclarationStatement@@String type=getPasswordType(pc); @AT@ 2013 @LENGTH@ 26
---------INS SimpleName@@type @TO@ VariableDeclarationFragment@@type=getPasswordType(pc) @AT@ 2013 @LENGTH@ 4
---------INS MethodInvocation@@getPasswordType(pc) @TO@ VariableDeclarationFragment@@type=getPasswordType(pc) @AT@ 2020 @LENGTH@ 19
------------INS SimpleName@@MethodName:getPasswordType:[pc] @TO@ MethodInvocation@@getPasswordType(pc) @AT@ 2020 @LENGTH@ 19
---------------INS SimpleName@@pc @TO@ SimpleName@@MethodName:getPasswordType:[pc] @AT@ 2036 @LENGTH@ 2
---UPD IfStatement@@if (WSConstants.PASSWORD_TEXT.equals(pc.getPasswordType())) {  if (!pc.getPassword().equals(pass)) {    throw new IOException("Wrong password!");  }} @TO@ if (WSConstants.PASSWORD_TEXT.equals(type)) {  if (!pc.getPassword().equals(pass)) {    throw new IOException("Wrong password!");  }} @AT@ 2136 @LENGTH@ 317
------UPD MethodInvocation@@WSConstants.PASSWORD_TEXT.equals(pc.getPasswordType()) @TO@ WSConstants.PASSWORD_TEXT.equals(type) @AT@ 2140 @LENGTH@ 54
---------UPD SimpleName@@MethodName:equals:[pc.getPasswordType()] @TO@ MethodName:equals:[type] @AT@ 2166 @LENGTH@ 28
------------DEL MethodInvocation@@pc.getPasswordType() @AT@ 2173 @LENGTH@ 20
---------------DEL SimpleName@@Name:pc @AT@ 2173 @LENGTH@ 2
---------------DEL SimpleName@@MethodName:getPasswordType:[] @AT@ 2176 @LENGTH@ 17
------------INS SimpleName@@type @TO@ SimpleName@@MethodName:equals:[pc.getPasswordType()] @AT@ 2289 @LENGTH@ 4


UPD TypeDeclaration@@[public, static]MongoRepositoryConfiguration, [SingleRepositoryConfigInformation<SimpleMongoRepositoryConfiguration>] @TO@ [public]MongoRepositoryConfiguration, [SingleRepositoryConfigInformation<SimpleMongoRepositoryConfiguration>] @AT@ 3178 @LENGTH@ 201
---DEL Modifier@@static @AT@ 3185 @LENGTH@ 6


UPD ExpressionStatement@@MethodInvocation:Assert.hasText(fullyQualifiedPackageName,"Fully qualified package name required") @TO@ MethodInvocation:Assert.notNull(fullyQualifiedPackageName,"Fully qualified package name required") @AT@ 756 @LENGTH@ 83
---UPD MethodInvocation@@Assert.hasText(fullyQualifiedPackageName,"Fully qualified package name required") @TO@ Assert.notNull(fullyQualifiedPackageName,"Fully qualified package name required") @AT@ 756 @LENGTH@ 82
------UPD SimpleName@@MethodName:hasText:[fullyQualifiedPackageName, "Fully qualified package name required"] @TO@ MethodName:notNull:[fullyQualifiedPackageName, "Fully qualified package name required"] @AT@ 763 @LENGTH@ 75


UPD MethodDeclaration@@public, void, MethodName:handle, ParsingContext ctx, OperationFormatException,  @TO@ public, void, MethodName:handle, ParsingContext ctx, CommandFormatException,  @AT@ 1955 @LENGTH@ 216
---UPD SimpleType@@OperationFormatException @TO@ CommandFormatException @AT@ 2001 @LENGTH@ 24


UPD ReturnStatement@@MethodInvocation:postProcessConnection(new RjcConnection(dataSource.getConnection(),usePool,dbIndex)) @TO@ MethodInvocation:postProcessConnection(new RjcConnection(dataSource.getConnection(),dbIndex)) @AT@ 2800 @LENGTH@ 94
---UPD MethodInvocation@@postProcessConnection(new RjcConnection(dataSource.getConnection(),usePool,dbIndex)) @TO@ postProcessConnection(new RjcConnection(dataSource.getConnection(),dbIndex)) @AT@ 2807 @LENGTH@ 86
------UPD SimpleName@@MethodName:postProcessConnection:[new RjcConnection(dataSource.getConnection(),usePool,dbIndex)] @TO@ MethodName:postProcessConnection:[new RjcConnection(dataSource.getConnection(),dbIndex)] @AT@ 2807 @LENGTH@ 86
---------UPD ClassInstanceCreation@@RjcConnection[dataSource.getConnection(), usePool, dbIndex] @TO@ RjcConnection[dataSource.getConnection(), dbIndex] @AT@ 2829 @LENGTH@ 63
------------DEL SimpleName@@usePool @AT@ 2875 @LENGTH@ 7


UPD ExpressionStatement@@MethodInvocation:JettySuspendWhileInProgressTest.this.context.stop() @TO@ MethodInvocation:context.stop() @AT@ 1944 @LENGTH@ 52
---UPD MethodInvocation@@JettySuspendWhileInProgressTest.this.context.stop() @TO@ context.stop() @AT@ 1944 @LENGTH@ 51
------DEL FieldAccess@@JettySuspendWhileInProgressTest.this.context @AT@ 1944 @LENGTH@ 44
---------DEL ThisExpression@@this @AT@ 1944 @LENGTH@ 36
---------DEL SimpleName@@context @AT@ 1981 @LENGTH@ 7
------INS SimpleName@@Name:context @TO@ MethodInvocation@@JettySuspendWhileInProgressTest.this.context.stop() @AT@ 1944 @LENGTH@ 7


DEL ExpressionStatement@@MethodInvocation:assertEquals("6/25/07",DateFormat.getDateInstance(DateFormat.SHORT,Locale.ENGLISH).format(createdDate)) @AT@ 3414 @LENGTH@ 106
---DEL MethodInvocation@@assertEquals("6/25/07",DateFormat.getDateInstance(DateFormat.SHORT,Locale.ENGLISH).format(createdDate)) @AT@ 3414 @LENGTH@ 105
------DEL SimpleName@@MethodName:assertEquals:["6/25/07", DateFormat.getDateInstance(DateFormat.SHORT,Locale.ENGLISH).format(createdDate)] @AT@ 3414 @LENGTH@ 105
---------DEL StringLiteral@@"6/25/07" @AT@ 3427 @LENGTH@ 9
---------DEL MethodInvocation@@DateFormat.getDateInstance(DateFormat.SHORT,Locale.ENGLISH).format(createdDate) @AT@ 3438 @LENGTH@ 80
------------DEL MethodInvocation@@MethodName:getDateInstance:[DateFormat.SHORT, Locale.ENGLISH] @AT@ 3438 @LENGTH@ 60
---------------DEL QualifiedName@@DateFormat.SHORT @AT@ 3465 @LENGTH@ 16
------------------DEL SimpleName@@DateFormat @AT@ 3465 @LENGTH@ 10
------------------DEL SimpleName@@SHORT @AT@ 3476 @LENGTH@ 5
---------------DEL QualifiedName@@Locale.ENGLISH @AT@ 3483 @LENGTH@ 14
------------------DEL SimpleName@@Locale @AT@ 3483 @LENGTH@ 6
------------------DEL SimpleName@@ENGLISH @AT@ 3490 @LENGTH@ 7
------------DEL SimpleName@@Name:DateFormat @AT@ 3438 @LENGTH@ 10
------------DEL SimpleName@@MethodName:format:[createdDate] @AT@ 3499 @LENGTH@ 19
---------------DEL SimpleName@@createdDate @AT@ 3506 @LENGTH@ 11


UPD TryStatement@@try {  if (baseURIString == null) {    if (exchange.getFromEndpoint() != null) {      baseURIString=exchange.getFromEndpoint().getEndpointUri();    } else {      baseURIString="/";    }  }  baseURI=new URI(baseURIString);  String basePath=baseURI.getRawPath();  if (path.startsWith(basePath)) {    path=path.substring(basePath.length());    if (path.startsWith("/")) {      path=path.substring(1);    }  } else {    throw new RuntimeCamelException("Cannot analyze the Exchange.HTTP_PATH header, due to: cannot find the right HTTP_BASE_URI");  }} catch (Throwable t) {  throw new RuntimeCamelException("Cannot analyze the Exchange.HTTP_PATH header, due to: " + t.getMessage(),t);} @TO@ try {  if (baseURIString == null) {    if (exchange.getFromEndpoint() != null) {      baseURIString=exchange.getFromEndpoint().getEndpointUri();    } else {      baseURIString="/";    }  }  baseURI=new URI(baseURIString);  String basePath=baseURI.getRawPath();  if (path.startsWith(basePath)) {    path=path.substring(basePath.length());    if (path.startsWith("/")) {      path=path.substring(1);    }  } else {    throw new RuntimeExchangeException("Cannot analyze the Exchange.HTTP_PATH header, due to: cannot find the right HTTP_BASE_URI",exchange);  }} catch (Throwable t) {  throw new RuntimeExchangeException("Cannot analyze the Exchange.HTTP_PATH header, due to: " + t.getMessage(),exchange,t);} @AT@ 6333 @LENGTH@ 1183
---UPD IfStatement@@if (path.startsWith(basePath)) {  path=path.substring(basePath.length());  if (path.startsWith("/")) {    path=path.substring(1);  }} else {  throw new RuntimeCamelException("Cannot analyze the Exchange.HTTP_PATH header, due to: cannot find the right HTTP_BASE_URI");} @TO@ if (path.startsWith(basePath)) {  path=path.substring(basePath.length());  if (path.startsWith("/")) {    path=path.substring(1);  }} else {  throw new RuntimeExchangeException("Cannot analyze the Exchange.HTTP_PATH header, due to: cannot find the right HTTP_BASE_URI",exchange);} @AT@ 6868 @LENGTH@ 431
------UPD Block@@ElseBody:{  throw new RuntimeCamelException("Cannot analyze the Exchange.HTTP_PATH header, due to: cannot find the right HTTP_BASE_URI");} @TO@ ElseBody:{  throw new RuntimeExchangeException("Cannot analyze the Exchange.HTTP_PATH header, due to: cannot find the right HTTP_BASE_URI",exchange);} @AT@ 7126 @LENGTH@ 173
---------UPD ThrowStatement@@ClassInstanceCreation:new RuntimeCamelException("Cannot analyze the Exchange.HTTP_PATH header, due to: cannot find the right HTTP_BASE_URI") @TO@ ClassInstanceCreation:new RuntimeExchangeException("Cannot analyze the Exchange.HTTP_PATH header, due to: cannot find the right HTTP_BASE_URI",exchange) @AT@ 7152 @LENGTH@ 125
------------UPD ClassInstanceCreation@@RuntimeCamelException["Cannot analyze the Exchange.HTTP_PATH header, due to: cannot find the right HTTP_BASE_URI"] @TO@ RuntimeExchangeException["Cannot analyze the Exchange.HTTP_PATH header, due to: cannot find the right HTTP_BASE_URI", exchange] @AT@ 7158 @LENGTH@ 118
---------------UPD SimpleType@@RuntimeCamelException @TO@ RuntimeExchangeException @AT@ 7162 @LENGTH@ 21
---------------INS SimpleName@@exchange @TO@ ClassInstanceCreation@@RuntimeCamelException["Cannot analyze the Exchange.HTTP_PATH header, due to: cannot find the right HTTP_BASE_URI"] @AT@ 7571 @LENGTH@ 8
---UPD CatchClause@@catch (Throwable t) {  throw new RuntimeCamelException("Cannot analyze the Exchange.HTTP_PATH header, due to: " + t.getMessage(),t);} @TO@ catch (Throwable t) {  throw new RuntimeExchangeException("Cannot analyze the Exchange.HTTP_PATH header, due to: " + t.getMessage(),exchange,t);} @AT@ 7318 @LENGTH@ 198
------UPD ThrowStatement@@ClassInstanceCreation:new RuntimeCamelException("Cannot analyze the Exchange.HTTP_PATH header, due to: " + t.getMessage(),t) @TO@ ClassInstanceCreation:new RuntimeExchangeException("Cannot analyze the Exchange.HTTP_PATH header, due to: " + t.getMessage(),exchange,t) @AT@ 7360 @LENGTH@ 138
---------UPD ClassInstanceCreation@@RuntimeCamelException["Cannot analyze the Exchange.HTTP_PATH header, due to: " + t.getMessage(), t] @TO@ RuntimeExchangeException["Cannot analyze the Exchange.HTTP_PATH header, due to: " + t.getMessage(), exchange, t] @AT@ 7366 @LENGTH@ 131
------------UPD SimpleType@@RuntimeCamelException @TO@ RuntimeExchangeException @AT@ 7370 @LENGTH@ 21
------------INS SimpleName@@exchange @TO@ ClassInstanceCreation@@RuntimeCamelException["Cannot analyze the Exchange.HTTP_PATH header, due to: " + t.getMessage(), t] @AT@ 7774 @LENGTH@ 8


UPD EnhancedForStatement@@for (Property prop : groupPolicies) {  final List<Runnable> groupTasks=new ArrayList<Runnable>();  final ModelNode policyNode=prop.getValue();  final boolean rollingGroup=policyNode.hasDefined(ROLLING_TO_SERVERS) && policyNode.get(ROLLING_TO_SERVERS).asBoolean();  seriesTasks.add(rollingGroup ? new RollingUpdateTask(groupTasks) : new ConcurrentUpdateTask(groupTasks,executor));  final String serverGroupName=prop.getName();  final Map<ServerIdentity,ModelNode> groupEntry=opsByGroup.get(serverGroupName);  final Set<ServerIdentity> servers=groupEntry.keySet();  ServerUpdatePolicy policy;  if (forRollback) {    policy=new ServerUpdatePolicy(parent,serverGroupName,servers);  } else {    int maxFailures=0;    if (policyNode.hasDefined(MAX_FAILURE_PERCENTAGE)) {      int pct=policyNode.get(MAX_FAILURE_PERCENTAGE).asInt();      maxFailures=((servers.size() * pct) / 100);    } else     if (policyNode.hasDefined(MAX_FAILED_SERVERS)) {      maxFailures=policyNode.get(MAX_FAILED_SERVERS).asInt();    }    policy=new ServerUpdatePolicy(parent,serverGroupName,servers,maxFailures);  }  updatePolicies.put(serverGroupName,policy);  for (  Map.Entry<ServerIdentity,ModelNode> entry : groupEntry.entrySet()) {    groupTasks.add(createServerTask(entry.getKey(),entry.getValue(),policy));  }} @TO@ for (Property prop : groupPolicies) {  final String serverGroupName=prop.getName();  final Map<ServerIdentity,ModelNode> groupEntry=opsByGroup.get(serverGroupName);  if (groupEntry == null) {    continue;  }  final List<Runnable> groupTasks=new ArrayList<Runnable>();  final ModelNode policyNode=prop.getValue();  final boolean rollingGroup=policyNode.hasDefined(ROLLING_TO_SERVERS) && policyNode.get(ROLLING_TO_SERVERS).asBoolean();  seriesTasks.add(rollingGroup ? new RollingUpdateTask(groupTasks) : new ConcurrentUpdateTask(groupTasks,executor));  final Set<ServerIdentity> servers=groupEntry.keySet();  ServerUpdatePolicy policy;  if (forRollback) {    policy=new ServerUpdatePolicy(parent,serverGroupName,servers);  } else {    int maxFailures=0;    if (policyNode.hasDefined(MAX_FAILURE_PERCENTAGE)) {      int pct=policyNode.get(MAX_FAILURE_PERCENTAGE).asInt();      maxFailures=((servers.size() * pct) / 100);    } else     if (policyNode.hasDefined(MAX_FAILED_SERVERS)) {      maxFailures=policyNode.get(MAX_FAILED_SERVERS).asInt();    }    policy=new ServerUpdatePolicy(parent,serverGroupName,servers,maxFailures);  }  updatePolicies.put(serverGroupName,policy);  for (  Map.Entry<ServerIdentity,ModelNode> entry : groupEntry.entrySet()) {    groupTasks.add(createServerTask(entry.getKey(),entry.getValue(),policy));  }} @AT@ 5324 @LENGTH@ 1862
---INS IfStatement@@if (groupEntry == null) {  continue;} @TO@ EnhancedForStatement@@for (Property prop : groupPolicies) {  final List<Runnable> groupTasks=new ArrayList<Runnable>();  final ModelNode policyNode=prop.getValue();  final boolean rollingGroup=policyNode.hasDefined(ROLLING_TO_SERVERS) && policyNode.get(ROLLING_TO_SERVERS).asBoolean();  seriesTasks.add(rollingGroup ? new RollingUpdateTask(groupTasks) : new ConcurrentUpdateTask(groupTasks,executor));  final String serverGroupName=prop.getName();  final Map<ServerIdentity,ModelNode> groupEntry=opsByGroup.get(serverGroupName);  final Set<ServerIdentity> servers=groupEntry.keySet();  ServerUpdatePolicy policy;  if (forRollback) {    policy=new ServerUpdatePolicy(parent,serverGroupName,servers);  } else {    int maxFailures=0;    if (policyNode.hasDefined(MAX_FAILURE_PERCENTAGE)) {      int pct=policyNode.get(MAX_FAILURE_PERCENTAGE).asInt();      maxFailures=((servers.size() * pct) / 100);    } else     if (policyNode.hasDefined(MAX_FAILED_SERVERS)) {      maxFailures=policyNode.get(MAX_FAILED_SERVERS).asInt();    }    policy=new ServerUpdatePolicy(parent,serverGroupName,servers,maxFailures);  }  updatePolicies.put(serverGroupName,policy);  for (  Map.Entry<ServerIdentity,ModelNode> entry : groupEntry.entrySet()) {    groupTasks.add(createServerTask(entry.getKey(),entry.getValue(),policy));  }} @AT@ 5553 @LENGTH@ 81
------INS InfixExpression@@groupEntry == null @TO@ IfStatement@@if (groupEntry == null) {  continue;} @AT@ 5557 @LENGTH@ 18
---------INS SimpleName@@groupEntry @TO@ InfixExpression@@groupEntry == null @AT@ 5557 @LENGTH@ 10
---------INS Operator@@== @TO@ InfixExpression@@groupEntry == null @AT@ 5567 @LENGTH@ 2
---------INS NullLiteral@@null @TO@ InfixExpression@@groupEntry == null @AT@ 5571 @LENGTH@ 4
------INS Block@@ThenBody:{  continue;} @TO@ IfStatement@@if (groupEntry == null) {  continue;} @AT@ 5577 @LENGTH@ 57
---------INS ContinueStatement@@ @TO@ Block@@ThenBody:{  continue;} @AT@ 5603 @LENGTH@ 9
---MOV VariableDeclarationStatement@@final String serverGroupName=prop.getName(); @TO@ EnhancedForStatement@@for (Property prop : groupPolicies) {  final List<Runnable> groupTasks=new ArrayList<Runnable>();  final ModelNode policyNode=prop.getValue();  final boolean rollingGroup=policyNode.hasDefined(ROLLING_TO_SERVERS) && policyNode.get(ROLLING_TO_SERVERS).asBoolean();  seriesTasks.add(rollingGroup ? new RollingUpdateTask(groupTasks) : new ConcurrentUpdateTask(groupTasks,executor));  final String serverGroupName=prop.getName();  final Map<ServerIdentity,ModelNode> groupEntry=opsByGroup.get(serverGroupName);  final Set<ServerIdentity> servers=groupEntry.keySet();  ServerUpdatePolicy policy;  if (forRollback) {    policy=new ServerUpdatePolicy(parent,serverGroupName,servers);  } else {    int maxFailures=0;    if (policyNode.hasDefined(MAX_FAILURE_PERCENTAGE)) {      int pct=policyNode.get(MAX_FAILURE_PERCENTAGE).asInt();      maxFailures=((servers.size() * pct) / 100);    } else     if (policyNode.hasDefined(MAX_FAILED_SERVERS)) {      maxFailures=policyNode.get(MAX_FAILED_SERVERS).asInt();    }    policy=new ServerUpdatePolicy(parent,serverGroupName,servers,maxFailures);  }  updatePolicies.put(serverGroupName,policy);  for (  Map.Entry<ServerIdentity,ModelNode> entry : groupEntry.entrySet()) {    groupTasks.add(createServerTask(entry.getKey(),entry.getValue(),policy));  }} @AT@ 5809 @LENGTH@ 46
---MOV VariableDeclarationStatement@@final Map<ServerIdentity,ModelNode> groupEntry=opsByGroup.get(serverGroupName); @TO@ EnhancedForStatement@@for (Property prop : groupPolicies) {  final List<Runnable> groupTasks=new ArrayList<Runnable>();  final ModelNode policyNode=prop.getValue();  final boolean rollingGroup=policyNode.hasDefined(ROLLING_TO_SERVERS) && policyNode.get(ROLLING_TO_SERVERS).asBoolean();  seriesTasks.add(rollingGroup ? new RollingUpdateTask(groupTasks) : new ConcurrentUpdateTask(groupTasks,executor));  final String serverGroupName=prop.getName();  final Map<ServerIdentity,ModelNode> groupEntry=opsByGroup.get(serverGroupName);  final Set<ServerIdentity> servers=groupEntry.keySet();  ServerUpdatePolicy policy;  if (forRollback) {    policy=new ServerUpdatePolicy(parent,serverGroupName,servers);  } else {    int maxFailures=0;    if (policyNode.hasDefined(MAX_FAILURE_PERCENTAGE)) {      int pct=policyNode.get(MAX_FAILURE_PERCENTAGE).asInt();      maxFailures=((servers.size() * pct) / 100);    } else     if (policyNode.hasDefined(MAX_FAILED_SERVERS)) {      maxFailures=policyNode.get(MAX_FAILED_SERVERS).asInt();    }    policy=new ServerUpdatePolicy(parent,serverGroupName,servers,maxFailures);  }  updatePolicies.put(serverGroupName,policy);  for (  Map.Entry<ServerIdentity,ModelNode> entry : groupEntry.entrySet()) {    groupTasks.add(createServerTask(entry.getKey(),entry.getValue(),policy));  }} @AT@ 5876 @LENGTH@ 82


UPD ExpressionStatement@@MethodInvocation:Thread.currentThread().wait(2000) @TO@ MethodInvocation:Thread.currentThread().sleep(2000) @AT@ 6275 @LENGTH@ 34
---UPD MethodInvocation@@Thread.currentThread().wait(2000) @TO@ Thread.currentThread().sleep(2000) @AT@ 6275 @LENGTH@ 33
------UPD SimpleName@@MethodName:wait:[2000] @TO@ MethodName:sleep:[2000] @AT@ 6298 @LENGTH@ 10


UPD ExpressionStatement@@MethodInvocation:operation.get(DATASOURCES).asList().add(datasourcesNode) @TO@ MethodInvocation:operation.get(REQUEST_PROPERTIES,DATASOURCES).set(datasourcesNode) @AT@ 18097 @LENGTH@ 57
---UPD MethodInvocation@@operation.get(DATASOURCES).asList().add(datasourcesNode) @TO@ operation.get(REQUEST_PROPERTIES,DATASOURCES).set(datasourcesNode) @AT@ 18097 @LENGTH@ 56
------DEL MethodInvocation@@MethodName:asList:[] @AT@ 18097 @LENGTH@ 35
------UPD MethodInvocation@@MethodName:get:[DATASOURCES] @TO@ MethodName:get:[REQUEST_PROPERTIES, DATASOURCES] @AT@ 18097 @LENGTH@ 26
---------INS SimpleName@@REQUEST_PROPERTIES @TO@ MethodInvocation@@MethodName:get:[DATASOURCES] @AT@ 18111 @LENGTH@ 18
------UPD SimpleName@@MethodName:add:[datasourcesNode] @TO@ MethodName:set:[datasourcesNode] @AT@ 18133 @LENGTH@ 20


UPD IfStatement@@if (module != null) {  deploymentModuleLoader.removeModuleSpec(module.getIdentifier());} @TO@ if (identifier != null) {  deploymentModuleLoader.removeModuleSpec(identifier);} @AT@ 7466 @LENGTH@ 108
---UPD InfixExpression@@module != null @TO@ identifier != null @AT@ 7470 @LENGTH@ 14
------UPD SimpleName@@module @TO@ identifier @AT@ 7470 @LENGTH@ 6
---UPD Block@@ThenBody:{  deploymentModuleLoader.removeModuleSpec(module.getIdentifier());} @TO@ ThenBody:{  deploymentModuleLoader.removeModuleSpec(identifier);} @AT@ 7486 @LENGTH@ 88
------UPD ExpressionStatement@@MethodInvocation:deploymentModuleLoader.removeModuleSpec(module.getIdentifier()) @TO@ MethodInvocation:deploymentModuleLoader.removeModuleSpec(identifier) @AT@ 7500 @LENGTH@ 64
---------UPD MethodInvocation@@deploymentModuleLoader.removeModuleSpec(module.getIdentifier()) @TO@ deploymentModuleLoader.removeModuleSpec(identifier) @AT@ 7500 @LENGTH@ 63
------------UPD SimpleName@@MethodName:removeModuleSpec:[module.getIdentifier()] @TO@ MethodName:removeModuleSpec:[identifier] @AT@ 7523 @LENGTH@ 40
---------------INS SimpleName@@identifier @TO@ SimpleName@@MethodName:removeModuleSpec:[module.getIdentifier()] @AT@ 7343 @LENGTH@ 10
---------------DEL MethodInvocation@@module.getIdentifier() @AT@ 7540 @LENGTH@ 22
------------------DEL SimpleName@@Name:module @AT@ 7540 @LENGTH@ 6
------------------DEL SimpleName@@MethodName:getIdentifier:[] @AT@ 7547 @LENGTH@ 15


MOV MethodDeclaration@@public, String, MethodName:getMessage,  @TO@ TypeDeclaration@@[@XmlRootElement(name="rollback"), @XmlAccessorType(XmlAccessType.FIELD), public]RollbackDefinition, NoOutputDefinition<RollbackDefinition> @AT@ 1667 @LENGTH@ 58


UPD MethodDeclaration@@public, void, MethodName:handle, ParsingContext ctx, OperationFormatException,  @TO@ public, void, MethodName:handle, ParsingContext ctx, CommandFormatException,  @AT@ 1724 @LENGTH@ 249
---UPD SimpleType@@OperationFormatException @TO@ CommandFormatException @AT@ 1790 @LENGTH@ 24


DEL IfStatement@@if (reader.nextTag() != START_ELEMENT) {  throw unexpectedEndElement(reader);} @AT@ 3131 @LENGTH@ 98
---DEL InfixExpression@@reader.nextTag() != START_ELEMENT @AT@ 3135 @LENGTH@ 33
------DEL MethodInvocation@@reader.nextTag() @AT@ 3135 @LENGTH@ 16
---------DEL SimpleName@@Name:reader @AT@ 3135 @LENGTH@ 6
---------DEL SimpleName@@MethodName:nextTag:[] @AT@ 3142 @LENGTH@ 9
------DEL Operator@@!= @AT@ 3151 @LENGTH@ 2
------DEL SimpleName@@START_ELEMENT @AT@ 3155 @LENGTH@ 13
---DEL Block@@ThenBody:{  throw unexpectedEndElement(reader);} @AT@ 3170 @LENGTH@ 59
------DEL ThrowStatement@@MethodInvocation:unexpectedEndElement(reader) @AT@ 3184 @LENGTH@ 35
---------DEL MethodInvocation@@unexpectedEndElement(reader) @AT@ 3190 @LENGTH@ 28
------------DEL SimpleName@@MethodName:unexpectedEndElement:[reader] @AT@ 3190 @LENGTH@ 28
---------------DEL SimpleName@@reader @AT@ 3211 @LENGTH@ 6


UPD ExpressionStatement@@MethodInvocation:ds.remove("set-tx-quert-timeout") @TO@ MethodInvocation:ds.remove("set-tx-query-timeout") @AT@ 4249 @LENGTH@ 34
---UPD MethodInvocation@@ds.remove("set-tx-quert-timeout") @TO@ ds.remove("set-tx-query-timeout") @AT@ 4249 @LENGTH@ 33
------UPD SimpleName@@MethodName:remove:["set-tx-quert-timeout"] @TO@ MethodName:remove:["set-tx-query-timeout"] @AT@ 4252 @LENGTH@ 30
---------UPD StringLiteral@@"set-tx-quert-timeout" @TO@ "set-tx-query-timeout" @AT@ 4259 @LENGTH@ 22


INS ExpressionStatement@@MethodInvocation:view.getConfigurators().addLast(new ViewConfigurator(){
  @Override public void configure(  final DeploymentPhaseContext context,  final ComponentConfiguration componentConfiguration,  final ViewDescription description,  final ViewConfiguration configuration) throws DeploymentUnitProcessingException {
    configuration.addViewInterceptorToFront(ComponentTypeIdentityInterceptorFactory.INSTANCE);
  }
}
) @TO@ MethodDeclaration@@protected, void, MethodName:setupViewInterceptors, ViewDescription view,  @AT@ 19314 @LENGTH@ 453
---INS MethodInvocation@@view.getConfigurators().addLast(new ViewConfigurator(){
  @Override public void configure(  final DeploymentPhaseContext context,  final ComponentConfiguration componentConfiguration,  final ViewDescription description,  final ViewConfiguration configuration) throws DeploymentUnitProcessingException {
    configuration.addViewInterceptorToFront(ComponentTypeIdentityInterceptorFactory.INSTANCE);
  }
}
) @TO@ ExpressionStatement@@MethodInvocation:view.getConfigurators().addLast(new ViewConfigurator(){
  @Override public void configure(  final DeploymentPhaseContext context,  final ComponentConfiguration componentConfiguration,  final ViewDescription description,  final ViewConfiguration configuration) throws DeploymentUnitProcessingException {
    configuration.addViewInterceptorToFront(ComponentTypeIdentityInterceptorFactory.INSTANCE);
  }
}
) @AT@ 19314 @LENGTH@ 452
------INS MethodInvocation@@MethodName:getConfigurators:[] @TO@ MethodInvocation@@view.getConfigurators().addLast(new ViewConfigurator(){
  @Override public void configure(  final DeploymentPhaseContext context,  final ComponentConfiguration componentConfiguration,  final ViewDescription description,  final ViewConfiguration configuration) throws DeploymentUnitProcessingException {
    configuration.addViewInterceptorToFront(ComponentTypeIdentityInterceptorFactory.INSTANCE);
  }
}
) @AT@ 19314 @LENGTH@ 23
------INS SimpleName@@Name:view @TO@ MethodInvocation@@view.getConfigurators().addLast(new ViewConfigurator(){
  @Override public void configure(  final DeploymentPhaseContext context,  final ComponentConfiguration componentConfiguration,  final ViewDescription description,  final ViewConfiguration configuration) throws DeploymentUnitProcessingException {
    configuration.addViewInterceptorToFront(ComponentTypeIdentityInterceptorFactory.INSTANCE);
  }
}
) @AT@ 19314 @LENGTH@ 4
------INS SimpleName@@MethodName:addLast:[new ViewConfigurator(){
  @Override public void configure(  final DeploymentPhaseContext context,  final ComponentConfiguration componentConfiguration,  final ViewDescription description,  final ViewConfiguration configuration) throws DeploymentUnitProcessingException {
    configuration.addViewInterceptorToFront(ComponentTypeIdentityInterceptorFactory.INSTANCE);
  }
}
] @TO@ MethodInvocation@@view.getConfigurators().addLast(new ViewConfigurator(){
  @Override public void configure(  final DeploymentPhaseContext context,  final ComponentConfiguration componentConfiguration,  final ViewDescription description,  final ViewConfiguration configuration) throws DeploymentUnitProcessingException {
    configuration.addViewInterceptorToFront(ComponentTypeIdentityInterceptorFactory.INSTANCE);
  }
}
) @AT@ 19338 @LENGTH@ 428
---------INS ClassInstanceCreation@@ViewConfigurator[] @TO@ SimpleName@@MethodName:addLast:[new ViewConfigurator(){
  @Override public void configure(  final DeploymentPhaseContext context,  final ComponentConfiguration componentConfiguration,  final ViewDescription description,  final ViewConfiguration configuration) throws DeploymentUnitProcessingException {
    configuration.addViewInterceptorToFront(ComponentTypeIdentityInterceptorFactory.INSTANCE);
  }
}
] @AT@ 19346 @LENGTH@ 419
------------INS New@@new @TO@ ClassInstanceCreation@@ViewConfigurator[] @AT@ 19346 @LENGTH@ 3
------------INS SimpleType@@ViewConfigurator @TO@ ClassInstanceCreation@@ViewConfigurator[] @AT@ 19350 @LENGTH@ 16
------------INS AnonymousClassDeclaration@@AnonymousClass @TO@ ClassInstanceCreation@@ViewConfigurator[] @AT@ 19369 @LENGTH@ 396
---------------INS MethodDeclaration@@public, void, MethodName:configure, final DeploymentPhaseContext context, final ComponentConfiguration componentConfiguration, final ViewDescription description, final ViewConfiguration configuration, DeploymentUnitProcessingException,  @TO@ AnonymousClassDeclaration@@AnonymousClass @AT@ 19405 @LENGTH@ 350
------------------INS Modifier@@public @TO@ MethodDeclaration@@public, void, MethodName:configure, final DeploymentPhaseContext context, final ComponentConfiguration componentConfiguration, final ViewDescription description, final ViewConfiguration configuration, DeploymentUnitProcessingException,  @AT@ 19405 @LENGTH@ 6
------------------INS PrimitiveType@@void @TO@ MethodDeclaration@@public, void, MethodName:configure, final DeploymentPhaseContext context, final ComponentConfiguration componentConfiguration, final ViewDescription description, final ViewConfiguration configuration, DeploymentUnitProcessingException,  @AT@ 19412 @LENGTH@ 4
------------------INS SimpleName@@MethodName:configure @TO@ MethodDeclaration@@public, void, MethodName:configure, final DeploymentPhaseContext context, final ComponentConfiguration componentConfiguration, final ViewDescription description, final ViewConfiguration configuration, DeploymentUnitProcessingException,  @AT@ 19417 @LENGTH@ 9
------------------INS SingleVariableDeclaration@@final DeploymentPhaseContext context @TO@ MethodDeclaration@@public, void, MethodName:configure, final DeploymentPhaseContext context, final ComponentConfiguration componentConfiguration, final ViewDescription description, final ViewConfiguration configuration, DeploymentUnitProcessingException,  @AT@ 19427 @LENGTH@ 36
---------------------INS Modifier@@final @TO@ SingleVariableDeclaration@@final DeploymentPhaseContext context @AT@ 19427 @LENGTH@ 5
---------------------INS SimpleType@@DeploymentPhaseContext @TO@ SingleVariableDeclaration@@final DeploymentPhaseContext context @AT@ 19433 @LENGTH@ 22
---------------------INS SimpleName@@context @TO@ SingleVariableDeclaration@@final DeploymentPhaseContext context @AT@ 19456 @LENGTH@ 7
------------------INS SingleVariableDeclaration@@final ComponentConfiguration componentConfiguration @TO@ MethodDeclaration@@public, void, MethodName:configure, final DeploymentPhaseContext context, final ComponentConfiguration componentConfiguration, final ViewDescription description, final ViewConfiguration configuration, DeploymentUnitProcessingException,  @AT@ 19465 @LENGTH@ 51
---------------------INS Modifier@@final @TO@ SingleVariableDeclaration@@final ComponentConfiguration componentConfiguration @AT@ 19465 @LENGTH@ 5
---------------------INS SimpleType@@ComponentConfiguration @TO@ SingleVariableDeclaration@@final ComponentConfiguration componentConfiguration @AT@ 19471 @LENGTH@ 22
---------------------INS SimpleName@@componentConfiguration @TO@ SingleVariableDeclaration@@final ComponentConfiguration componentConfiguration @AT@ 19494 @LENGTH@ 22
------------------INS SingleVariableDeclaration@@final ViewDescription description @TO@ MethodDeclaration@@public, void, MethodName:configure, final DeploymentPhaseContext context, final ComponentConfiguration componentConfiguration, final ViewDescription description, final ViewConfiguration configuration, DeploymentUnitProcessingException,  @AT@ 19518 @LENGTH@ 33
---------------------INS Modifier@@final @TO@ SingleVariableDeclaration@@final ViewDescription description @AT@ 19518 @LENGTH@ 5
---------------------INS SimpleType@@ViewDescription @TO@ SingleVariableDeclaration@@final ViewDescription description @AT@ 19524 @LENGTH@ 15
---------------------INS SimpleName@@description @TO@ SingleVariableDeclaration@@final ViewDescription description @AT@ 19540 @LENGTH@ 11
------------------INS SingleVariableDeclaration@@final ViewConfiguration configuration @TO@ MethodDeclaration@@public, void, MethodName:configure, final DeploymentPhaseContext context, final ComponentConfiguration componentConfiguration, final ViewDescription description, final ViewConfiguration configuration, DeploymentUnitProcessingException,  @AT@ 19553 @LENGTH@ 37
---------------------INS Modifier@@final @TO@ SingleVariableDeclaration@@final ViewConfiguration configuration @AT@ 19553 @LENGTH@ 5
---------------------INS SimpleType@@ViewConfiguration @TO@ SingleVariableDeclaration@@final ViewConfiguration configuration @AT@ 19559 @LENGTH@ 17
---------------------INS SimpleName@@configuration @TO@ SingleVariableDeclaration@@final ViewConfiguration configuration @AT@ 19577 @LENGTH@ 13
------------------INS SimpleType@@DeploymentUnitProcessingException @TO@ MethodDeclaration@@public, void, MethodName:configure, final DeploymentPhaseContext context, final ComponentConfiguration componentConfiguration, final ViewDescription description, final ViewConfiguration configuration, DeploymentUnitProcessingException,  @AT@ 19599 @LENGTH@ 33
------------------INS ExpressionStatement@@MethodInvocation:configuration.addViewInterceptorToFront(ComponentTypeIdentityInterceptorFactory.INSTANCE) @TO@ MethodDeclaration@@public, void, MethodName:configure, final DeploymentPhaseContext context, final ComponentConfiguration componentConfiguration, final ViewDescription description, final ViewConfiguration configuration, DeploymentUnitProcessingException,  @AT@ 19651 @LENGTH@ 90
---------------------INS MethodInvocation@@configuration.addViewInterceptorToFront(ComponentTypeIdentityInterceptorFactory.INSTANCE) @TO@ ExpressionStatement@@MethodInvocation:configuration.addViewInterceptorToFront(ComponentTypeIdentityInterceptorFactory.INSTANCE) @AT@ 19651 @LENGTH@ 89
------------------------INS SimpleName@@Name:configuration @TO@ MethodInvocation@@configuration.addViewInterceptorToFront(ComponentTypeIdentityInterceptorFactory.INSTANCE) @AT@ 19651 @LENGTH@ 13
------------------------INS SimpleName@@MethodName:addViewInterceptorToFront:[ComponentTypeIdentityInterceptorFactory.INSTANCE] @TO@ MethodInvocation@@configuration.addViewInterceptorToFront(ComponentTypeIdentityInterceptorFactory.INSTANCE) @AT@ 19665 @LENGTH@ 75
---------------------------INS QualifiedName@@ComponentTypeIdentityInterceptorFactory.INSTANCE @TO@ SimpleName@@MethodName:addViewInterceptorToFront:[ComponentTypeIdentityInterceptorFactory.INSTANCE] @AT@ 19691 @LENGTH@ 48
------------------------------INS SimpleName@@ComponentTypeIdentityInterceptorFactory @TO@ QualifiedName@@ComponentTypeIdentityInterceptorFactory.INSTANCE @AT@ 19691 @LENGTH@ 39
------------------------------INS SimpleName@@INSTANCE @TO@ QualifiedName@@ComponentTypeIdentityInterceptorFactory.INSTANCE @AT@ 19731 @LENGTH@ 8


UPD IfStatement@@if (args[0].equals(PRINT_ARGS_STDOUT)) {  for (  String arg : args) {    System.out.println(arg);  }  System.exit(0);} else if (args[0].equals(PRINT_IN_STDERR)) {  System.err.print(PRINT_IN_STDERR);  System.exit(1);} else if (args[0].equals(String.valueOf(EXIT_WITH_VALUE_0))) {  System.exit(0);} else if (args[0].equals(String.valueOf(EXIT_WITH_VALUE_1))) {  System.exit(1);} else if (args[0].equals(THREADS)) {  Thread stderrPrinterThread=new Thread(new ErrPrinter());  Thread stdoutPrinterThread=new Thread(new OutPrinter());  stderrPrinterThread.start();  stdoutPrinterThread.start();  stderrPrinterThread.join();  stdoutPrinterThread.join();} else if (args[0].equals(SLEEP_WITH_TIMEOUT)) {  doSleep();  System.exit(0);} else if (READ_INPUT_LINES_AND_PRINT_THEM.equals(args[0])) {  LineIterator iterator=IOUtils.lineIterator(System.in,"UTF-8");  while (iterator.hasNext()) {    String line=iterator.nextLine();    System.out.println(line);  }} else {  System.out.println(args[0]);} @TO@ if (args[0].equals(PRINT_ARGS_STDOUT)) {  for (int i=0; i < args.length; i++) {    String arg=args[i];    System.out.println(i + arg);  }  System.exit(0);} else if (args[0].equals(PRINT_IN_STDERR)) {  System.err.print(PRINT_IN_STDERR);  System.exit(1);} else if (args[0].equals(String.valueOf(EXIT_WITH_VALUE_0))) {  System.exit(0);} else if (args[0].equals(String.valueOf(EXIT_WITH_VALUE_1))) {  System.exit(1);} else if (args[0].equals(THREADS)) {  Thread stderrPrinterThread=new Thread(new ErrPrinter());  Thread stdoutPrinterThread=new Thread(new OutPrinter());  stderrPrinterThread.start();  stdoutPrinterThread.start();  stderrPrinterThread.join();  stdoutPrinterThread.join();} else if (args[0].equals(SLEEP_WITH_TIMEOUT)) {  doSleep();  System.exit(0);} else if (READ_INPUT_LINES_AND_PRINT_THEM.equals(args[0])) {  LineIterator iterator=IOUtils.lineIterator(System.in,"UTF-8");  while (iterator.hasNext()) {    String line=iterator.nextLine();    System.out.println(line);  }} else {  System.out.println(args[0]);} @AT@ 2433 @LENGTH@ 1348
---UPD Block@@ThenBody:{  for (  String arg : args) {    System.out.println(arg);  }  System.exit(0);} @TO@ ThenBody:{  for (int i=0; i < args.length; i++) {    String arg=args[i];    System.out.println(i + arg);  }  System.exit(0);} @AT@ 2472 @LENGTH@ 137
------INS ForStatement@@for (int i=0; i < args.length; i++) {  String arg=args[i];  System.out.println(i + arg);} @TO@ Block@@ThenBody:{  for (  String arg : args) {    System.out.println(arg);  }  System.exit(0);} @AT@ 2487 @LENGTH@ 139
---------INS VariableDeclarationExpression@@int i=0 @TO@ ForStatement@@for (int i=0; i < args.length; i++) {  String arg=args[i];  System.out.println(i + arg);} @AT@ 2492 @LENGTH@ 9
------------INS PrimitiveType@@int @TO@ VariableDeclarationExpression@@int i=0 @AT@ 2492 @LENGTH@ 3
------------INS VariableDeclarationFragment@@i=0 @TO@ VariableDeclarationExpression@@int i=0 @AT@ 2496 @LENGTH@ 5
---------------INS SimpleName@@i @TO@ VariableDeclarationFragment@@i=0 @AT@ 2496 @LENGTH@ 1
---------------INS NumberLiteral@@0 @TO@ VariableDeclarationFragment@@i=0 @AT@ 2500 @LENGTH@ 1
---------INS InfixExpression@@i < args.length @TO@ ForStatement@@for (int i=0; i < args.length; i++) {  String arg=args[i];  System.out.println(i + arg);} @AT@ 2503 @LENGTH@ 15
------------INS SimpleName@@i @TO@ InfixExpression@@i < args.length @AT@ 2503 @LENGTH@ 1
------------INS Operator@@< @TO@ InfixExpression@@i < args.length @AT@ 2504 @LENGTH@ 1
------------INS QualifiedName@@args.length @TO@ InfixExpression@@i < args.length @AT@ 2507 @LENGTH@ 11
---------------INS SimpleName@@args @TO@ QualifiedName@@args.length @AT@ 2507 @LENGTH@ 4
---------------INS SimpleName@@length @TO@ QualifiedName@@args.length @AT@ 2512 @LENGTH@ 6
---------INS PostfixExpression@@i++ @TO@ ForStatement@@for (int i=0; i < args.length; i++) {  String arg=args[i];  System.out.println(i + arg);} @AT@ 2520 @LENGTH@ 3
------------INS SimpleName@@i @TO@ PostfixExpression@@i++ @AT@ 2520 @LENGTH@ 1
------------INS Operator@@++ @TO@ PostfixExpression@@i++ @AT@ 2522 @LENGTH@ 2
---------INS VariableDeclarationStatement@@String arg=args[i]; @TO@ ForStatement@@for (int i=0; i < args.length; i++) {  String arg=args[i];  System.out.println(i + arg);} @AT@ 2544 @LENGTH@ 21
------------INS SimpleType@@String @TO@ VariableDeclarationStatement@@String arg=args[i]; @AT@ 2544 @LENGTH@ 6
------------INS VariableDeclarationFragment@@arg=args[i] @TO@ VariableDeclarationStatement@@String arg=args[i]; @AT@ 2551 @LENGTH@ 13
---------------INS SimpleName@@arg @TO@ VariableDeclarationFragment@@arg=args[i] @AT@ 2551 @LENGTH@ 3
---------------INS ArrayAccess@@args[i] @TO@ VariableDeclarationFragment@@arg=args[i] @AT@ 2557 @LENGTH@ 7
------------------INS SimpleName@@args @TO@ ArrayAccess@@args[i] @AT@ 2557 @LENGTH@ 4
------------------INS SimpleName@@i @TO@ ArrayAccess@@args[i] @AT@ 2562 @LENGTH@ 1
---------INS ExpressionStatement@@MethodInvocation:System.out.println(i + arg) @TO@ ForStatement@@for (int i=0; i < args.length; i++) {  String arg=args[i];  System.out.println(i + arg);} @AT@ 2583 @LENGTH@ 28
------------MOV MethodInvocation@@System.out.println(arg) @TO@ ExpressionStatement@@MethodInvocation:System.out.println(i + arg) @AT@ 2530 @LENGTH@ 23
---------------UPD SimpleName@@MethodName:println:[arg] @TO@ MethodName:println:[i + arg] @AT@ 2541 @LENGTH@ 12
------------------DEL SimpleName@@arg @AT@ 2549 @LENGTH@ 3
------------------INS InfixExpression@@i + arg @TO@ SimpleName@@MethodName:println:[arg] @AT@ 2602 @LENGTH@ 7
---------------------INS SimpleName@@i @TO@ InfixExpression@@i + arg @AT@ 2602 @LENGTH@ 1
---------------------INS Operator@@+ @TO@ InfixExpression@@i + arg @AT@ 2603 @LENGTH@ 1
---------------------INS SimpleName@@arg @TO@ InfixExpression@@i + arg @AT@ 2606 @LENGTH@ 3
------------MOV MethodInvocation@@System.out.println(arg) @TO@ ExpressionStatement@@MethodInvocation:System.out.println(i + arg) @AT@ 2530 @LENGTH@ 23
---------------UPD SimpleName@@MethodName:println:[arg] @TO@ MethodName:println:[i + arg] @AT@ 2541 @LENGTH@ 12
------------------DEL SimpleName@@arg @AT@ 2549 @LENGTH@ 3
------------------INS InfixExpression@@i + arg @TO@ SimpleName@@MethodName:println:[arg] @AT@ 2602 @LENGTH@ 7
---------------------INS SimpleName@@i @TO@ InfixExpression@@i + arg @AT@ 2602 @LENGTH@ 1
---------------------INS Operator@@+ @TO@ InfixExpression@@i + arg @AT@ 2603 @LENGTH@ 1
---------------------INS SimpleName@@arg @TO@ InfixExpression@@i + arg @AT@ 2606 @LENGTH@ 3
------DEL EnhancedForStatement@@for (String arg : args) {  System.out.println(arg);} @AT@ 2487 @LENGTH@ 82
---------DEL SingleVariableDeclaration@@String arg @AT@ 2492 @LENGTH@ 10
------------DEL SimpleType@@String @AT@ 2492 @LENGTH@ 6
------------DEL SimpleName@@arg @AT@ 2499 @LENGTH@ 3
---------DEL SimpleName@@args @AT@ 2505 @LENGTH@ 4
---------DEL ExpressionStatement@@MethodInvocation:System.out.println(arg) @AT@ 2530 @LENGTH@ 24


INS MethodDeclaration@@List<Person>, MethodName:findByAgeOrLastnameLikeAndFirstnameLike, int age, String lastname, String firstname,  @TO@ TypeDeclaration@@[public]PersonRepository, [MongoRepository<Person,String>] @AT@ 3121 @LENGTH@ 84
---INS ParameterizedType@@List<Person> @TO@ MethodDeclaration@@List<Person>, MethodName:findByAgeOrLastnameLikeAndFirstnameLike, int age, String lastname, String firstname,  @AT@ 3108 @LENGTH@ 12
------INS SimpleType@@List @TO@ ParameterizedType@@List<Person> @AT@ 3108 @LENGTH@ 4
------INS SimpleType@@Person @TO@ ParameterizedType@@List<Person> @AT@ 3113 @LENGTH@ 6
---INS SimpleName@@MethodName:findByAgeOrLastnameLikeAndFirstnameLike @TO@ MethodDeclaration@@List<Person>, MethodName:findByAgeOrLastnameLikeAndFirstnameLike, int age, String lastname, String firstname,  @AT@ 3121 @LENGTH@ 39
---INS SingleVariableDeclaration@@int age @TO@ MethodDeclaration@@List<Person>, MethodName:findByAgeOrLastnameLikeAndFirstnameLike, int age, String lastname, String firstname,  @AT@ 3161 @LENGTH@ 7
------INS PrimitiveType@@int @TO@ SingleVariableDeclaration@@int age @AT@ 3161 @LENGTH@ 3
------INS SimpleName@@age @TO@ SingleVariableDeclaration@@int age @AT@ 3165 @LENGTH@ 3
---INS SingleVariableDeclaration@@String lastname @TO@ MethodDeclaration@@List<Person>, MethodName:findByAgeOrLastnameLikeAndFirstnameLike, int age, String lastname, String firstname,  @AT@ 3170 @LENGTH@ 15
------INS SimpleType@@String @TO@ SingleVariableDeclaration@@String lastname @AT@ 3170 @LENGTH@ 6
------INS SimpleName@@lastname @TO@ SingleVariableDeclaration@@String lastname @AT@ 3177 @LENGTH@ 8
---INS SingleVariableDeclaration@@String firstname @TO@ MethodDeclaration@@List<Person>, MethodName:findByAgeOrLastnameLikeAndFirstnameLike, int age, String lastname, String firstname,  @AT@ 3187 @LENGTH@ 16
------INS SimpleType@@String @TO@ SingleVariableDeclaration@@String firstname @AT@ 3187 @LENGTH@ 6
------INS SimpleName@@firstname @TO@ SingleVariableDeclaration@@String firstname @AT@ 3194 @LENGTH@ 9


UPD ExpressionStatement@@MethodInvocation:jredisConnFactory.setUsePool(false) @TO@ MethodInvocation:jredisConnFactory.setUsePool(true) @AT@ 2315 @LENGTH@ 36
---UPD MethodInvocation@@jredisConnFactory.setUsePool(false) @TO@ jredisConnFactory.setUsePool(true) @AT@ 2315 @LENGTH@ 35
------UPD SimpleName@@MethodName:setUsePool:[false] @TO@ MethodName:setUsePool:[true] @AT@ 2333 @LENGTH@ 17
---------UPD BooleanLiteral@@false @TO@ true @AT@ 2344 @LENGTH@ 5


UPD TryStatement@@try {  batchBuilder.addService(connectorName,connectorService).addDependency(connectorName.append("auth-provider"),ServerAuthenticationProvider.class,connectorService.getAuthenticationProviderInjector()).addDependency(RemotingSubsystemElement.JBOSS_REMOTING_ENDPOINT,Endpoint.class,connectorService.getEndpointInjector()).addListener(listener).setInitialMode(ServiceController.Mode.ACTIVE).install();  batchBuilder.install();} catch (ServiceRegistryException e) {  resultHandler.handleFailure(e,param);} @TO@ try {  target.addService(connectorName,connectorService).addDependency(connectorName.append("auth-provider"),ServerAuthenticationProvider.class,connectorService.getAuthenticationProviderInjector()).addDependency(RemotingSubsystemElement.JBOSS_REMOTING_ENDPOINT,Endpoint.class,connectorService.getEndpointInjector()).addListener(listener).setInitialMode(ServiceController.Mode.ACTIVE).install();} catch (ServiceRegistryException e) {  resultHandler.handleFailure(e,param);} @AT@ 3270 @LENGTH@ 747
---UPD ExpressionStatement@@MethodInvocation:batchBuilder.addService(connectorName,connectorService).addDependency(connectorName.append("auth-provider"),ServerAuthenticationProvider.class,connectorService.getAuthenticationProviderInjector()).addDependency(RemotingSubsystemElement.JBOSS_REMOTING_ENDPOINT,Endpoint.class,connectorService.getEndpointInjector()).addListener(listener).setInitialMode(ServiceController.Mode.ACTIVE).install() @TO@ MethodInvocation:target.addService(connectorName,connectorService).addDependency(connectorName.append("auth-provider"),ServerAuthenticationProvider.class,connectorService.getAuthenticationProviderInjector()).addDependency(RemotingSubsystemElement.JBOSS_REMOTING_ENDPOINT,Endpoint.class,connectorService.getEndpointInjector()).addListener(listener).setInitialMode(ServiceController.Mode.ACTIVE).install() @AT@ 3288 @LENGTH@ 483
------UPD MethodInvocation@@batchBuilder.addService(connectorName,connectorService).addDependency(connectorName.append("auth-provider"),ServerAuthenticationProvider.class,connectorService.getAuthenticationProviderInjector()).addDependency(RemotingSubsystemElement.JBOSS_REMOTING_ENDPOINT,Endpoint.class,connectorService.getEndpointInjector()).addListener(listener).setInitialMode(ServiceController.Mode.ACTIVE).install() @TO@ target.addService(connectorName,connectorService).addDependency(connectorName.append("auth-provider"),ServerAuthenticationProvider.class,connectorService.getAuthenticationProviderInjector()).addDependency(RemotingSubsystemElement.JBOSS_REMOTING_ENDPOINT,Endpoint.class,connectorService.getEndpointInjector()).addListener(listener).setInitialMode(ServiceController.Mode.ACTIVE).install() @AT@ 3288 @LENGTH@ 482
---------UPD SimpleName@@Name:batchBuilder @TO@ Name:target @AT@ 3288 @LENGTH@ 12
---DEL ExpressionStatement@@MethodInvocation:batchBuilder.install() @AT@ 3886 @LENGTH@ 23
------DEL MethodInvocation@@batchBuilder.install() @AT@ 3886 @LENGTH@ 22
---------DEL SimpleName@@Name:batchBuilder @AT@ 3886 @LENGTH@ 12
---------DEL SimpleName@@MethodName:install:[] @AT@ 3899 @LENGTH@ 9


INS IfStatement@@if (moduleIdentifier == null) {  return;} @TO@ MethodDeclaration@@public, void, MethodName:deploy, DeploymentPhaseContext phaseContext, DeploymentUnitProcessingException,  @AT@ 2573 @LENGTH@ 61
---INS InfixExpression@@moduleIdentifier == null @TO@ IfStatement@@if (moduleIdentifier == null) {  return;} @AT@ 2577 @LENGTH@ 24
------INS SimpleName@@moduleIdentifier @TO@ InfixExpression@@moduleIdentifier == null @AT@ 2577 @LENGTH@ 16
------INS Operator@@== @TO@ InfixExpression@@moduleIdentifier == null @AT@ 2593 @LENGTH@ 2
------INS NullLiteral@@null @TO@ InfixExpression@@moduleIdentifier == null @AT@ 2597 @LENGTH@ 4
---INS Block@@ThenBody:{  return;} @TO@ IfStatement@@if (moduleIdentifier == null) {  return;} @AT@ 2603 @LENGTH@ 31
------INS ReturnStatement@@ @TO@ Block@@ThenBody:{  return;} @AT@ 2617 @LENGTH@ 7


UPD VariableDeclarationStatement@@PersistentProperty<?> property=builder.createPersistentProperty(field,descriptor); @TO@ PersistentProperty<?> property=builder.createPersistentProperty(field,descriptor,field.getType()); @AT@ 4222 @LENGTH@ 85
---UPD VariableDeclarationFragment@@property=builder.createPersistentProperty(field,descriptor) @TO@ property=builder.createPersistentProperty(field,descriptor,field.getType()) @AT@ 4244 @LENGTH@ 62
------UPD MethodInvocation@@builder.createPersistentProperty(field,descriptor) @TO@ builder.createPersistentProperty(field,descriptor,field.getType()) @AT@ 4255 @LENGTH@ 51
---------UPD SimpleName@@MethodName:createPersistentProperty:[field, descriptor] @TO@ MethodName:createPersistentProperty:[field, descriptor, field.getType()] @AT@ 4263 @LENGTH@ 43
------------INS MethodInvocation@@field.getType() @TO@ SimpleName@@MethodName:createPersistentProperty:[field, descriptor] @AT@ 4307 @LENGTH@ 15
---------------INS SimpleName@@Name:field @TO@ MethodInvocation@@field.getType() @AT@ 4307 @LENGTH@ 5
---------------INS SimpleName@@MethodName:getType:[] @TO@ MethodInvocation@@field.getType() @AT@ 4313 @LENGTH@ 9


INS MethodDeclaration@@public, void, MethodName:testBase32Chunked, Exception,  @TO@ TypeDeclaration@@[public]Base32Test, TestCase @AT@ 2498 @LENGTH@ 319
---INS Modifier@@public @TO@ MethodDeclaration@@public, void, MethodName:testBase32Chunked, Exception,  @AT@ 2498 @LENGTH@ 6
---INS PrimitiveType@@void @TO@ MethodDeclaration@@public, void, MethodName:testBase32Chunked, Exception,  @AT@ 2505 @LENGTH@ 4
---INS SimpleName@@MethodName:testBase32Chunked @TO@ MethodDeclaration@@public, void, MethodName:testBase32Chunked, Exception,  @AT@ 2510 @LENGTH@ 17
---INS SimpleType@@Exception @TO@ MethodDeclaration@@public, void, MethodName:testBase32Chunked, Exception,  @AT@ 2538 @LENGTH@ 9
---INS VariableDeclarationStatement@@Base32 codec=new Base32(20); @TO@ MethodDeclaration@@public, void, MethodName:testBase32Chunked, Exception,  @AT@ 2558 @LENGTH@ 30
------INS SimpleType@@Base32 @TO@ VariableDeclarationStatement@@Base32 codec=new Base32(20); @AT@ 2558 @LENGTH@ 6
------INS VariableDeclarationFragment@@codec=new Base32(20) @TO@ VariableDeclarationStatement@@Base32 codec=new Base32(20); @AT@ 2565 @LENGTH@ 22
---------INS SimpleName@@codec @TO@ VariableDeclarationFragment@@codec=new Base32(20) @AT@ 2565 @LENGTH@ 5
---------INS ClassInstanceCreation@@Base32[20] @TO@ VariableDeclarationFragment@@codec=new Base32(20) @AT@ 2573 @LENGTH@ 14
------------INS New@@new @TO@ ClassInstanceCreation@@Base32[20] @AT@ 2573 @LENGTH@ 3
------------INS SimpleType@@Base32 @TO@ ClassInstanceCreation@@Base32[20] @AT@ 2577 @LENGTH@ 6
------------INS NumberLiteral@@20 @TO@ ClassInstanceCreation@@Base32[20] @AT@ 2584 @LENGTH@ 2
---INS ForStatement@@for (int i=0; i < BASE32_TEST_CASES_CHUNKED.length; i++) {  assertEquals(BASE32_TEST_CASES_CHUNKED[i][1],codec.encodeAsString(BASE32_TEST_CASES_CHUNKED[i][0].getBytes("UTF-8")));} @TO@ MethodDeclaration@@public, void, MethodName:testBase32Chunked, Exception,  @AT@ 2597 @LENGTH@ 206
------INS VariableDeclarationExpression@@int i=0 @TO@ ForStatement@@for (int i=0; i < BASE32_TEST_CASES_CHUNKED.length; i++) {  assertEquals(BASE32_TEST_CASES_CHUNKED[i][1],codec.encodeAsString(BASE32_TEST_CASES_CHUNKED[i][0].getBytes("UTF-8")));} @AT@ 2602 @LENGTH@ 9
---------INS PrimitiveType@@int @TO@ VariableDeclarationExpression@@int i=0 @AT@ 2602 @LENGTH@ 3
---------INS VariableDeclarationFragment@@i=0 @TO@ VariableDeclarationExpression@@int i=0 @AT@ 2606 @LENGTH@ 5
------------INS SimpleName@@i @TO@ VariableDeclarationFragment@@i=0 @AT@ 2606 @LENGTH@ 1
------------INS NumberLiteral@@0 @TO@ VariableDeclarationFragment@@i=0 @AT@ 2610 @LENGTH@ 1
------INS InfixExpression@@i < BASE32_TEST_CASES_CHUNKED.length @TO@ ForStatement@@for (int i=0; i < BASE32_TEST_CASES_CHUNKED.length; i++) {  assertEquals(BASE32_TEST_CASES_CHUNKED[i][1],codec.encodeAsString(BASE32_TEST_CASES_CHUNKED[i][0].getBytes("UTF-8")));} @AT@ 2613 @LENGTH@ 36
---------INS SimpleName@@i @TO@ InfixExpression@@i < BASE32_TEST_CASES_CHUNKED.length @AT@ 2613 @LENGTH@ 1
---------INS Operator@@< @TO@ InfixExpression@@i < BASE32_TEST_CASES_CHUNKED.length @AT@ 2614 @LENGTH@ 1
---------INS QualifiedName@@BASE32_TEST_CASES_CHUNKED.length @TO@ InfixExpression@@i < BASE32_TEST_CASES_CHUNKED.length @AT@ 2617 @LENGTH@ 32
------------INS SimpleName@@BASE32_TEST_CASES_CHUNKED @TO@ QualifiedName@@BASE32_TEST_CASES_CHUNKED.length @AT@ 2617 @LENGTH@ 25
------------INS SimpleName@@length @TO@ QualifiedName@@BASE32_TEST_CASES_CHUNKED.length @AT@ 2643 @LENGTH@ 6
------INS PostfixExpression@@i++ @TO@ ForStatement@@for (int i=0; i < BASE32_TEST_CASES_CHUNKED.length; i++) {  assertEquals(BASE32_TEST_CASES_CHUNKED[i][1],codec.encodeAsString(BASE32_TEST_CASES_CHUNKED[i][0].getBytes("UTF-8")));} @AT@ 2651 @LENGTH@ 3
---------INS SimpleName@@i @TO@ PostfixExpression@@i++ @AT@ 2651 @LENGTH@ 1
---------INS Operator@@++ @TO@ PostfixExpression@@i++ @AT@ 2653 @LENGTH@ 2
------INS ExpressionStatement@@MethodInvocation:assertEquals(BASE32_TEST_CASES_CHUNKED[i][1],codec.encodeAsString(BASE32_TEST_CASES_CHUNKED[i][0].getBytes("UTF-8"))) @TO@ ForStatement@@for (int i=0; i < BASE32_TEST_CASES_CHUNKED.length; i++) {  assertEquals(BASE32_TEST_CASES_CHUNKED[i][1],codec.encodeAsString(BASE32_TEST_CASES_CHUNKED[i][0].getBytes("UTF-8")));} @AT@ 2674 @LENGTH@ 119
---------INS MethodInvocation@@assertEquals(BASE32_TEST_CASES_CHUNKED[i][1],codec.encodeAsString(BASE32_TEST_CASES_CHUNKED[i][0].getBytes("UTF-8"))) @TO@ ExpressionStatement@@MethodInvocation:assertEquals(BASE32_TEST_CASES_CHUNKED[i][1],codec.encodeAsString(BASE32_TEST_CASES_CHUNKED[i][0].getBytes("UTF-8"))) @AT@ 2674 @LENGTH@ 118
------------INS SimpleName@@MethodName:assertEquals:[BASE32_TEST_CASES_CHUNKED[i][1], codec.encodeAsString(BASE32_TEST_CASES_CHUNKED[i][0].getBytes("UTF-8"))] @TO@ MethodInvocation@@assertEquals(BASE32_TEST_CASES_CHUNKED[i][1],codec.encodeAsString(BASE32_TEST_CASES_CHUNKED[i][0].getBytes("UTF-8"))) @AT@ 2674 @LENGTH@ 118
---------------INS ArrayAccess@@BASE32_TEST_CASES_CHUNKED[i][1] @TO@ SimpleName@@MethodName:assertEquals:[BASE32_TEST_CASES_CHUNKED[i][1], codec.encodeAsString(BASE32_TEST_CASES_CHUNKED[i][0].getBytes("UTF-8"))] @AT@ 2687 @LENGTH@ 31
------------------INS ArrayAccess@@BASE32_TEST_CASES_CHUNKED[i] @TO@ ArrayAccess@@BASE32_TEST_CASES_CHUNKED[i][1] @AT@ 2687 @LENGTH@ 28
---------------------INS SimpleName@@BASE32_TEST_CASES_CHUNKED @TO@ ArrayAccess@@BASE32_TEST_CASES_CHUNKED[i] @AT@ 2687 @LENGTH@ 25
---------------------INS SimpleName@@i @TO@ ArrayAccess@@BASE32_TEST_CASES_CHUNKED[i] @AT@ 2713 @LENGTH@ 1
------------------INS NumberLiteral@@1 @TO@ ArrayAccess@@BASE32_TEST_CASES_CHUNKED[i][1] @AT@ 2716 @LENGTH@ 1
---------------INS MethodInvocation@@codec.encodeAsString(BASE32_TEST_CASES_CHUNKED[i][0].getBytes("UTF-8")) @TO@ SimpleName@@MethodName:assertEquals:[BASE32_TEST_CASES_CHUNKED[i][1], codec.encodeAsString(BASE32_TEST_CASES_CHUNKED[i][0].getBytes("UTF-8"))] @AT@ 2720 @LENGTH@ 71
------------------INS SimpleName@@Name:codec @TO@ MethodInvocation@@codec.encodeAsString(BASE32_TEST_CASES_CHUNKED[i][0].getBytes("UTF-8")) @AT@ 2720 @LENGTH@ 5
------------------INS SimpleName@@MethodName:encodeAsString:[BASE32_TEST_CASES_CHUNKED[i][0].getBytes("UTF-8")] @TO@ MethodInvocation@@codec.encodeAsString(BASE32_TEST_CASES_CHUNKED[i][0].getBytes("UTF-8")) @AT@ 2726 @LENGTH@ 65
---------------------INS MethodInvocation@@BASE32_TEST_CASES_CHUNKED[i][0].getBytes("UTF-8") @TO@ SimpleName@@MethodName:encodeAsString:[BASE32_TEST_CASES_CHUNKED[i][0].getBytes("UTF-8")] @AT@ 2741 @LENGTH@ 49
------------------------INS ArrayAccess@@BASE32_TEST_CASES_CHUNKED[i][0] @TO@ MethodInvocation@@BASE32_TEST_CASES_CHUNKED[i][0].getBytes("UTF-8") @AT@ 2741 @LENGTH@ 31
---------------------------INS ArrayAccess@@BASE32_TEST_CASES_CHUNKED[i] @TO@ ArrayAccess@@BASE32_TEST_CASES_CHUNKED[i][0] @AT@ 2741 @LENGTH@ 28
------------------------------INS SimpleName@@BASE32_TEST_CASES_CHUNKED @TO@ ArrayAccess@@BASE32_TEST_CASES_CHUNKED[i] @AT@ 2741 @LENGTH@ 25
------------------------------INS SimpleName@@i @TO@ ArrayAccess@@BASE32_TEST_CASES_CHUNKED[i] @AT@ 2767 @LENGTH@ 1
---------------------------INS NumberLiteral@@0 @TO@ ArrayAccess@@BASE32_TEST_CASES_CHUNKED[i][0] @AT@ 2770 @LENGTH@ 1
------------------------INS SimpleName@@MethodName:getBytes:["UTF-8"] @TO@ MethodInvocation@@BASE32_TEST_CASES_CHUNKED[i][0].getBytes("UTF-8") @AT@ 2773 @LENGTH@ 17
---------------------------INS StringLiteral@@"UTF-8" @TO@ SimpleName@@MethodName:getBytes:["UTF-8"] @AT@ 2782 @LENGTH@ 7


UPD TypeDeclaration@@[public]CacheConfiguration,  @TO@ [public]CacheConfiguration, [Cloneable] @AT@ 988 @LENGTH@ 4904
---INS SimpleType@@Cloneable @TO@ TypeDeclaration@@[public]CacheConfiguration,  @AT@ 1078 @LENGTH@ 9


UPD SuperConstructorInvocation@@super("gowalla",connectionRepository,new OAuth2Template(clientId,clientSecret,"https://gowalla.com/api/oauth/new?client_id={clientId}&redirect_uri={redirectUri}&scope={scope}","https://gowalla.com/api/oauth/token"));
 @TO@ super("gowalla",connectionRepository,new OAuth2Template(clientId,clientSecret,"https://gowalla.com/api/oauth/new?client_id={client_id}&redirect_uri={redirect_uri}&scope={scope}","https://gowalla.com/api/oauth/token"));
 @AT@ 613 @LENGTH@ 229
---UPD ClassInstanceCreation@@OAuth2Template[clientId, clientSecret, "https://gowalla.com/api/oauth/new?client_id={clientId}&redirect_uri={redirectUri}&scope={scope}", "https://gowalla.com/api/oauth/token"] @TO@ OAuth2Template[clientId, clientSecret, "https://gowalla.com/api/oauth/new?client_id={client_id}&redirect_uri={redirect_uri}&scope={scope}", "https://gowalla.com/api/oauth/token"] @AT@ 652 @LENGTH@ 188
------UPD StringLiteral@@"https://gowalla.com/api/oauth/new?client_id={clientId}&redirect_uri={redirectUri}&scope={scope}" @TO@ "https://gowalla.com/api/oauth/new?client_id={client_id}&redirect_uri={redirect_uri}&scope={scope}" @AT@ 699 @LENGTH@ 97


UPD ForStatement@@for (int i=0; i < paramTypes.length; i++) {  Class<?> targetType=Object.class;  if (paramTypes[i] instanceof ParameterizedType) {    ParameterizedType ptype=(ParameterizedType)paramTypes[i];    targetType=getTargetType(ptype);  } else {    if (paramTypes[i] instanceof TypeVariable) {      targetType=getTargetType((TypeVariable)paramTypes[i]);    } else     if (paramTypes[i] instanceof Class<?>) {      targetType=(Class<?>)paramTypes[i];    }  }  String paramName=(null != paramNames ? paramNames[i] : "param" + i);  preferredConstructor.addParameter(paramName,targetType,targetType.getDeclaredAnnotations());} @TO@ for (int i=0; i < paramTypes.length; i++) {  Class<?> targetType=Object.class;  Class<?> rawType=constructor.getParameterTypes()[i];  if (paramTypes[i] instanceof ParameterizedType) {    ParameterizedType ptype=(ParameterizedType)paramTypes[i];    targetType=getTargetType(ptype);  } else {    if (paramTypes[i] instanceof TypeVariable) {      targetType=getTargetType((TypeVariable)paramTypes[i]);    } else     if (paramTypes[i] instanceof Class<?>) {      targetType=(Class<?>)paramTypes[i];    }  }  String paramName=(null != paramNames ? paramNames[i] : "param" + i);  preferredConstructor.addParameter(paramName,targetType,rawType,targetType.getDeclaredAnnotations());} @AT@ 11358 @LENGTH@ 690
---INS VariableDeclarationStatement@@Class<?> rawType=constructor.getParameterTypes()[i]; @TO@ ForStatement@@for (int i=0; i < paramTypes.length; i++) {  Class<?> targetType=Object.class;  if (paramTypes[i] instanceof ParameterizedType) {    ParameterizedType ptype=(ParameterizedType)paramTypes[i];    targetType=getTargetType(ptype);  } else {    if (paramTypes[i] instanceof TypeVariable) {      targetType=getTargetType((TypeVariable)paramTypes[i]);    } else     if (paramTypes[i] instanceof Class<?>) {      targetType=(Class<?>)paramTypes[i];    }  }  String paramName=(null != paramNames ? paramNames[i] : "param" + i);  preferredConstructor.addParameter(paramName,targetType,targetType.getDeclaredAnnotations());} @AT@ 11452 @LENGTH@ 54
------INS ParameterizedType@@Class<?> @TO@ VariableDeclarationStatement@@Class<?> rawType=constructor.getParameterTypes()[i]; @AT@ 11452 @LENGTH@ 8
---------INS SimpleType@@Class @TO@ ParameterizedType@@Class<?> @AT@ 11452 @LENGTH@ 5
---------INS WildcardType@@? @TO@ ParameterizedType@@Class<?> @AT@ 11458 @LENGTH@ 1
------INS VariableDeclarationFragment@@rawType=constructor.getParameterTypes()[i] @TO@ VariableDeclarationStatement@@Class<?> rawType=constructor.getParameterTypes()[i]; @AT@ 11461 @LENGTH@ 44
---------INS SimpleName@@rawType @TO@ VariableDeclarationFragment@@rawType=constructor.getParameterTypes()[i] @AT@ 11461 @LENGTH@ 7
---------INS ArrayAccess@@constructor.getParameterTypes()[i] @TO@ VariableDeclarationFragment@@rawType=constructor.getParameterTypes()[i] @AT@ 11471 @LENGTH@ 34
------------INS MethodInvocation@@constructor.getParameterTypes() @TO@ ArrayAccess@@constructor.getParameterTypes()[i] @AT@ 11471 @LENGTH@ 31
---------------INS SimpleName@@Name:constructor @TO@ MethodInvocation@@constructor.getParameterTypes() @AT@ 11471 @LENGTH@ 11
---------------INS SimpleName@@MethodName:getParameterTypes:[] @TO@ MethodInvocation@@constructor.getParameterTypes() @AT@ 11483 @LENGTH@ 19
------------INS SimpleName@@i @TO@ ArrayAccess@@constructor.getParameterTypes()[i] @AT@ 11503 @LENGTH@ 1
---UPD ExpressionStatement@@MethodInvocation:preferredConstructor.addParameter(paramName,targetType,targetType.getDeclaredAnnotations()) @TO@ MethodInvocation:preferredConstructor.addParameter(paramName,targetType,rawType,targetType.getDeclaredAnnotations()) @AT@ 11947 @LENGTH@ 94
------UPD MethodInvocation@@preferredConstructor.addParameter(paramName,targetType,targetType.getDeclaredAnnotations()) @TO@ preferredConstructor.addParameter(paramName,targetType,rawType,targetType.getDeclaredAnnotations()) @AT@ 11947 @LENGTH@ 93
---------UPD SimpleName@@MethodName:addParameter:[paramName, targetType, targetType.getDeclaredAnnotations()] @TO@ MethodName:addParameter:[paramName, targetType, rawType, targetType.getDeclaredAnnotations()] @AT@ 11968 @LENGTH@ 72
------------INS SimpleName@@rawType @TO@ SimpleName@@MethodName:addParameter:[paramName, targetType, targetType.getDeclaredAnnotations()] @AT@ 12065 @LENGTH@ 7


DEL ExpressionStatement@@MethodInvocation:prepareMailbox() @AT@ 1468 @LENGTH@ 17
---DEL MethodInvocation@@MethodName:prepareMailbox:[] @AT@ 1468 @LENGTH@ 16


INS MethodDeclaration@@Class<?>, MethodName:getProxyClass,  @TO@ TypeDeclaration@@[public]ComponentView,  @AT@ 1871 @LENGTH@ 16
---INS ParameterizedType@@Class<?> @TO@ MethodDeclaration@@Class<?>, MethodName:getProxyClass,  @AT@ 1862 @LENGTH@ 8
------INS SimpleType@@Class @TO@ ParameterizedType@@Class<?> @AT@ 1862 @LENGTH@ 5
------INS WildcardType@@? @TO@ ParameterizedType@@Class<?> @AT@ 1868 @LENGTH@ 1
---INS SimpleName@@MethodName:getProxyClass @TO@ MethodDeclaration@@Class<?>, MethodName:getProxyClass,  @AT@ 1871 @LENGTH@ 13


UPD ExpressionStatement@@Assignment:on=ObjectName.getInstance("org.apache.camel:context=localhost/camel-1,type=threadpools,name=myOtherPool") @TO@ Assignment:on=ObjectName.getInstance("org.apache.camel:context=localhost/camel-1,type=threadpools,name=\"myOtherPool\"") @AT@ 2669 @LENGTH@ 108
---UPD Assignment@@on=ObjectName.getInstance("org.apache.camel:context=localhost/camel-1,type=threadpools,name=myOtherPool") @TO@ on=ObjectName.getInstance("org.apache.camel:context=localhost/camel-1,type=threadpools,name=\"myOtherPool\"") @AT@ 2669 @LENGTH@ 107
------UPD MethodInvocation@@ObjectName.getInstance("org.apache.camel:context=localhost/camel-1,type=threadpools,name=myOtherPool") @TO@ ObjectName.getInstance("org.apache.camel:context=localhost/camel-1,type=threadpools,name=\"myOtherPool\"") @AT@ 2674 @LENGTH@ 102
---------UPD SimpleName@@MethodName:getInstance:["org.apache.camel:context=localhost/camel-1,type=threadpools,name=myOtherPool"] @TO@ MethodName:getInstance:["org.apache.camel:context=localhost/camel-1,type=threadpools,name=\"myOtherPool\""] @AT@ 2685 @LENGTH@ 91
------------UPD StringLiteral@@"org.apache.camel:context=localhost/camel-1,type=threadpools,name=myOtherPool" @TO@ "org.apache.camel:context=localhost/camel-1,type=threadpools,name=\"myOtherPool\"" @AT@ 2697 @LENGTH@ 78


INS MethodDeclaration@@public, void, MethodName:registerExtendedUnderlyingWithTransaction, String scopedPuName, EntityManager xpc, EntityManager underlyingEntityManager,  @TO@ TypeDeclaration@@[public]TransactionUtil,  @AT@ 4761 @LENGTH@ 351
---INS Modifier@@public @TO@ MethodDeclaration@@public, void, MethodName:registerExtendedUnderlyingWithTransaction, String scopedPuName, EntityManager xpc, EntityManager underlyingEntityManager,  @AT@ 4761 @LENGTH@ 6
---INS PrimitiveType@@void @TO@ MethodDeclaration@@public, void, MethodName:registerExtendedUnderlyingWithTransaction, String scopedPuName, EntityManager xpc, EntityManager underlyingEntityManager,  @AT@ 4768 @LENGTH@ 4
---INS SimpleName@@MethodName:registerExtendedUnderlyingWithTransaction @TO@ MethodDeclaration@@public, void, MethodName:registerExtendedUnderlyingWithTransaction, String scopedPuName, EntityManager xpc, EntityManager underlyingEntityManager,  @AT@ 4773 @LENGTH@ 41
---INS SingleVariableDeclaration@@String scopedPuName @TO@ MethodDeclaration@@public, void, MethodName:registerExtendedUnderlyingWithTransaction, String scopedPuName, EntityManager xpc, EntityManager underlyingEntityManager,  @AT@ 4815 @LENGTH@ 19
------INS SimpleType@@String @TO@ SingleVariableDeclaration@@String scopedPuName @AT@ 4815 @LENGTH@ 6
------INS SimpleName@@scopedPuName @TO@ SingleVariableDeclaration@@String scopedPuName @AT@ 4822 @LENGTH@ 12
---INS SingleVariableDeclaration@@EntityManager xpc @TO@ MethodDeclaration@@public, void, MethodName:registerExtendedUnderlyingWithTransaction, String scopedPuName, EntityManager xpc, EntityManager underlyingEntityManager,  @AT@ 4836 @LENGTH@ 17
------INS SimpleType@@EntityManager @TO@ SingleVariableDeclaration@@EntityManager xpc @AT@ 4836 @LENGTH@ 13
------INS SimpleName@@xpc @TO@ SingleVariableDeclaration@@EntityManager xpc @AT@ 4850 @LENGTH@ 3
---INS SingleVariableDeclaration@@EntityManager underlyingEntityManager @TO@ MethodDeclaration@@public, void, MethodName:registerExtendedUnderlyingWithTransaction, String scopedPuName, EntityManager xpc, EntityManager underlyingEntityManager,  @AT@ 4855 @LENGTH@ 37
------INS SimpleType@@EntityManager @TO@ SingleVariableDeclaration@@EntityManager underlyingEntityManager @AT@ 4855 @LENGTH@ 13
------INS SimpleName@@underlyingEntityManager @TO@ SingleVariableDeclaration@@EntityManager underlyingEntityManager @AT@ 4869 @LENGTH@ 23
---INS ExpressionStatement@@MethodInvocation:underlyingEntityManager.joinTransaction() @TO@ MethodDeclaration@@public, void, MethodName:registerExtendedUnderlyingWithTransaction, String scopedPuName, EntityManager xpc, EntityManager underlyingEntityManager,  @AT@ 5030 @LENGTH@ 42
------INS MethodInvocation@@underlyingEntityManager.joinTransaction() @TO@ ExpressionStatement@@MethodInvocation:underlyingEntityManager.joinTransaction() @AT@ 5030 @LENGTH@ 41
---------INS SimpleName@@Name:underlyingEntityManager @TO@ MethodInvocation@@underlyingEntityManager.joinTransaction() @AT@ 5030 @LENGTH@ 23
---------INS SimpleName@@MethodName:joinTransaction:[] @TO@ MethodInvocation@@underlyingEntityManager.joinTransaction() @AT@ 5054 @LENGTH@ 17
---INS ExpressionStatement@@MethodInvocation:setPC(scopedPuName,xpc) @TO@ MethodDeclaration@@public, void, MethodName:registerExtendedUnderlyingWithTransaction, String scopedPuName, EntityManager xpc, EntityManager underlyingEntityManager,  @AT@ 5081 @LENGTH@ 25
------INS MethodInvocation@@setPC(scopedPuName,xpc) @TO@ ExpressionStatement@@MethodInvocation:setPC(scopedPuName,xpc) @AT@ 5081 @LENGTH@ 24
---------INS SimpleName@@MethodName:setPC:[scopedPuName, xpc] @TO@ MethodInvocation@@setPC(scopedPuName,xpc) @AT@ 5081 @LENGTH@ 24
------------INS SimpleName@@scopedPuName @TO@ SimpleName@@MethodName:setPC:[scopedPuName, xpc] @AT@ 5087 @LENGTH@ 12
------------INS SimpleName@@xpc @TO@ SimpleName@@MethodName:setPC:[scopedPuName, xpc] @AT@ 5101 @LENGTH@ 3


UPD MethodDeclaration@@protected, ExecutorService, MethodName:createAggregateExecutorService, String name,  @TO@ protected, synchronized, ExecutorService, MethodName:createAggregateExecutorService, String name,  @AT@ 42456 @LENGTH@ 183
---INS Modifier@@synchronized @TO@ MethodDeclaration@@protected, ExecutorService, MethodName:createAggregateExecutorService, String name,  @AT@ 42466 @LENGTH@ 12


INS TryStatement@@try {  doWrite(outputs.getItems());} catch (Exception e) {  inputs.clear();  throw e;} @TO@ MethodDeclaration@@protected, void, MethodName:write, StepContribution contribution, Chunk<I> inputs, Chunk<O> outputs, Exception,  @AT@ 7765 @LENGTH@ 241
---MOV ExpressionStatement@@MethodInvocation:doWrite(outputs.getItems()) @TO@ TryStatement@@try {  doWrite(outputs.getItems());} catch (Exception e) {  inputs.clear();  throw e;} @AT@ 7759 @LENGTH@ 28
---INS CatchClause@@catch (Exception e) {  inputs.clear();  throw e;} @TO@ TryStatement@@try {  doWrite(outputs.getItems());} catch (Exception e) {  inputs.clear();  throw e;} @AT@ 7809 @LENGTH@ 197
------INS SingleVariableDeclaration@@Exception e @TO@ CatchClause@@catch (Exception e) {  inputs.clear();  throw e;} @AT@ 7816 @LENGTH@ 11
---------INS SimpleType@@Exception @TO@ SingleVariableDeclaration@@Exception e @AT@ 7816 @LENGTH@ 9
---------INS SimpleName@@e @TO@ SingleVariableDeclaration@@Exception e @AT@ 7826 @LENGTH@ 1
------INS ExpressionStatement@@MethodInvocation:inputs.clear() @TO@ CatchClause@@catch (Exception e) {  inputs.clear();  throw e;} @AT@ 7975 @LENGTH@ 15
---------INS MethodInvocation@@inputs.clear() @TO@ ExpressionStatement@@MethodInvocation:inputs.clear() @AT@ 7975 @LENGTH@ 14
------------INS SimpleName@@Name:inputs @TO@ MethodInvocation@@inputs.clear() @AT@ 7975 @LENGTH@ 6
------------INS SimpleName@@MethodName:clear:[] @TO@ MethodInvocation@@inputs.clear() @AT@ 7982 @LENGTH@ 7
------INS ThrowStatement@@SimpleName:e @TO@ CatchClause@@catch (Exception e) {  inputs.clear();  throw e;} @AT@ 7994 @LENGTH@ 8
---------INS SimpleName@@e @TO@ ThrowStatement@@SimpleName:e @AT@ 8000 @LENGTH@ 1


INS FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @TO@ TypeDeclaration@@[public, final]JaasGrantedAuthority, [GrantedAuthority] @AT@ 1147 @LENGTH@ 90
---INS Modifier@@private @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @AT@ 1147 @LENGTH@ 7
---INS Modifier@@static @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @AT@ 1155 @LENGTH@ 6
---INS Modifier@@final @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @AT@ 1162 @LENGTH@ 5
---INS PrimitiveType@@long @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @AT@ 1168 @LENGTH@ 4
---INS VariableDeclarationFragment@@serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @AT@ 1173 @LENGTH@ 63
------INS SimpleName@@serialVersionUID @TO@ VariableDeclarationFragment@@serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID @AT@ 1173 @LENGTH@ 16
------INS QualifiedName@@SpringSecurityCoreVersion.SERIAL_VERSION_UID @TO@ VariableDeclarationFragment@@serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID @AT@ 1192 @LENGTH@ 44
---------INS SimpleName@@SpringSecurityCoreVersion @TO@ QualifiedName@@SpringSecurityCoreVersion.SERIAL_VERSION_UID @AT@ 1192 @LENGTH@ 25
---------INS SimpleName@@SERIAL_VERSION_UID @TO@ QualifiedName@@SpringSecurityCoreVersion.SERIAL_VERSION_UID @AT@ 1218 @LENGTH@ 18


UPD VariableDeclarationStatement@@JMXConnector connector=createConnector(); @TO@ JMXConnector connector=getConnector(); @AT@ 868 @LENGTH@ 43
---UPD VariableDeclarationFragment@@connector=createConnector() @TO@ connector=getConnector() @AT@ 881 @LENGTH@ 29
------UPD MethodInvocation@@MethodName:createConnector:[] @TO@ MethodName:getConnector:[] @AT@ 893 @LENGTH@ 17


UPD MethodDeclaration@@public, byte[], MethodName:getRange, byte[] key, int start, int end,  @TO@ public, byte[], MethodName:getRange, byte[] key, long start, long end,  @AT@ 4112 @LENGTH@ 104
---UPD SingleVariableDeclaration@@int start @TO@ long start @AT@ 4147 @LENGTH@ 9
------UPD PrimitiveType@@int @TO@ long @AT@ 4147 @LENGTH@ 3
---UPD SingleVariableDeclaration@@int end @TO@ long end @AT@ 4158 @LENGTH@ 7
------UPD PrimitiveType@@int @TO@ long @AT@ 4158 @LENGTH@ 3


INS ExpressionStatement@@MethodInvocation:error.expectedMessageCount(1) @TO@ MethodDeclaration@@public, void, MethodName:testUnmarshalError, Exception,  @AT@ 1792 @LENGTH@ 30
---INS MethodInvocation@@error.expectedMessageCount(1) @TO@ ExpressionStatement@@MethodInvocation:error.expectedMessageCount(1) @AT@ 1792 @LENGTH@ 29
------INS SimpleName@@Name:error @TO@ MethodInvocation@@error.expectedMessageCount(1) @AT@ 1792 @LENGTH@ 5
------INS SimpleName@@MethodName:expectedMessageCount:[1] @TO@ MethodInvocation@@error.expectedMessageCount(1) @AT@ 1798 @LENGTH@ 23
---------INS NumberLiteral@@1 @TO@ SimpleName@@MethodName:expectedMessageCount:[1] @AT@ 1819 @LENGTH@ 1


UPD ExpressionStatement@@MethodInvocation:connection.setRequestProperty("Content-Type","multipart/form-data;boundary=-----------------------------261773107125236") @TO@ MethodInvocation:connection.setRequestProperty("Content-Type","multipart/form-data;boundary=---------------------------261773107125236") @AT@ 2321 @LENGTH@ 122
---UPD MethodInvocation@@connection.setRequestProperty("Content-Type","multipart/form-data;boundary=-----------------------------261773107125236") @TO@ connection.setRequestProperty("Content-Type","multipart/form-data;boundary=---------------------------261773107125236") @AT@ 2321 @LENGTH@ 121
------UPD SimpleName@@MethodName:setRequestProperty:["Content-Type", "multipart/form-data;boundary=-----------------------------261773107125236"] @TO@ MethodName:setRequestProperty:["Content-Type", "multipart/form-data;boundary=---------------------------261773107125236"] @AT@ 2332 @LENGTH@ 110
---------UPD StringLiteral@@"multipart/form-data;boundary=-----------------------------261773107125236" @TO@ "multipart/form-data;boundary=---------------------------261773107125236" @AT@ 2366 @LENGTH@ 75


INS TryStatement@@try {  if (!ctx.getParsedArguments().hasArguments()) {    throw new OperationFormatException("Arguments are missing");  }} catch (CommandFormatException e) {  throw new OperationFormatException(e.getLocalizedMessage());} @TO@ MethodDeclaration@@public, ModelNode, MethodName:buildRequest, CommandContext ctx, OperationFormatException,  @AT@ 2657 @LENGTH@ 283
---MOV IfStatement@@if (!ctx.getParsedArguments().hasArguments()) {  throw new OperationFormatException("Arguments are missing");} @TO@ TryStatement@@try {  if (!ctx.getParsedArguments().hasArguments()) {    throw new OperationFormatException("Arguments are missing");  }} catch (CommandFormatException e) {  throw new OperationFormatException(e.getLocalizedMessage());} @AT@ 2609 @LENGTH@ 129
---INS CatchClause@@catch (CommandFormatException e) {  throw new OperationFormatException(e.getLocalizedMessage());} @TO@ TryStatement@@try {  if (!ctx.getParsedArguments().hasArguments()) {    throw new OperationFormatException("Arguments are missing");  }} catch (CommandFormatException e) {  throw new OperationFormatException(e.getLocalizedMessage());} @AT@ 2823 @LENGTH@ 117
------INS SingleVariableDeclaration@@CommandFormatException e @TO@ CatchClause@@catch (CommandFormatException e) {  throw new OperationFormatException(e.getLocalizedMessage());} @AT@ 2830 @LENGTH@ 24
---------INS SimpleType@@CommandFormatException @TO@ SingleVariableDeclaration@@CommandFormatException e @AT@ 2830 @LENGTH@ 22
---------INS SimpleName@@e @TO@ SingleVariableDeclaration@@CommandFormatException e @AT@ 2853 @LENGTH@ 1
------INS ThrowStatement@@ClassInstanceCreation:new OperationFormatException(e.getLocalizedMessage()) @TO@ CatchClause@@catch (CommandFormatException e) {  throw new OperationFormatException(e.getLocalizedMessage());} @AT@ 2870 @LENGTH@ 60
---------INS ClassInstanceCreation@@OperationFormatException[e.getLocalizedMessage()] @TO@ ThrowStatement@@ClassInstanceCreation:new OperationFormatException(e.getLocalizedMessage()) @AT@ 2876 @LENGTH@ 53
------------INS New@@new @TO@ ClassInstanceCreation@@OperationFormatException[e.getLocalizedMessage()] @AT@ 2876 @LENGTH@ 3
------------INS SimpleType@@OperationFormatException @TO@ ClassInstanceCreation@@OperationFormatException[e.getLocalizedMessage()] @AT@ 2880 @LENGTH@ 24
------------INS MethodInvocation@@e.getLocalizedMessage() @TO@ ClassInstanceCreation@@OperationFormatException[e.getLocalizedMessage()] @AT@ 2905 @LENGTH@ 23
---------------INS SimpleName@@Name:e @TO@ MethodInvocation@@e.getLocalizedMessage() @AT@ 2905 @LENGTH@ 1
---------------INS SimpleName@@MethodName:getLocalizedMessage:[] @TO@ MethodInvocation@@e.getLocalizedMessage() @AT@ 2907 @LENGTH@ 21


UPD MethodDeclaration@@static, void, MethodName:addService, final ServiceTarget serviceTarget, final ServiceName serviceName, final byte[] hash,  @TO@ static, ServiceController<VirtualFile>, MethodName:addService, final ServiceTarget serviceTarget, final ServiceName serviceName, final byte[] hash,  @AT@ 1752 @LENGTH@ 385
---DEL PrimitiveType@@void @AT@ 1759 @LENGTH@ 4
---INS ParameterizedType@@ServiceController<VirtualFile> @TO@ MethodDeclaration@@static, void, MethodName:addService, final ServiceTarget serviceTarget, final ServiceName serviceName, final byte[] hash,  @AT@ 1807 @LENGTH@ 30
------INS SimpleType@@ServiceController @TO@ ParameterizedType@@ServiceController<VirtualFile> @AT@ 1807 @LENGTH@ 17
------INS SimpleType@@VirtualFile @TO@ ParameterizedType@@ServiceController<VirtualFile> @AT@ 1825 @LENGTH@ 11
---DEL ExpressionStatement@@MethodInvocation:serviceTarget.addService(serviceName,service).addDependency(ContentRepository.SERVICE_NAME,ContentRepository.class,service.contentRepositoryInjectedValue).install() @AT@ 1937 @LENGTH@ 194
---INS ReturnStatement@@MethodInvocation:serviceTarget.addService(serviceName,service).addDependency(ContentRepository.SERVICE_NAME,ContentRepository.class,service.contentRepositoryInjectedValue).install() @TO@ MethodDeclaration@@static, void, MethodName:addService, final ServiceTarget serviceTarget, final ServiceName serviceName, final byte[] hash,  @AT@ 2011 @LENGTH@ 201
------MOV MethodInvocation@@serviceTarget.addService(serviceName,service).addDependency(ContentRepository.SERVICE_NAME,ContentRepository.class,service.contentRepositoryInjectedValue).install() @TO@ ReturnStatement@@MethodInvocation:serviceTarget.addService(serviceName,service).addDependency(ContentRepository.SERVICE_NAME,ContentRepository.class,service.contentRepositoryInjectedValue).install() @AT@ 1937 @LENGTH@ 193


UPD ExpressionStatement@@MethodInvocation:ROOT_INDEXES_FACTORY.setDeferredEncoding(true) @TO@ MethodInvocation:ROOT_INDEXES_FACTORY.setDeferredEncoding(false) @AT@ 2400 @LENGTH@ 47
---UPD MethodInvocation@@ROOT_INDEXES_FACTORY.setDeferredEncoding(true) @TO@ ROOT_INDEXES_FACTORY.setDeferredEncoding(false) @AT@ 2400 @LENGTH@ 46
------UPD SimpleName@@MethodName:setDeferredEncoding:[true] @TO@ MethodName:setDeferredEncoding:[false] @AT@ 2421 @LENGTH@ 25
---------UPD BooleanLiteral@@true @TO@ false @AT@ 2441 @LENGTH@ 4


INS VariableDeclarationStatement@@HttpParams params=httpRequest.getParams(); @TO@ MethodDeclaration@@protected, void, MethodName:postProcessHttpRequest, HttpUriRequest httpRequest,  @AT@ 6620 @LENGTH@ 44
---INS SimpleType@@HttpParams @TO@ VariableDeclarationStatement@@HttpParams params=httpRequest.getParams(); @AT@ 6620 @LENGTH@ 10
---INS VariableDeclarationFragment@@params=httpRequest.getParams() @TO@ VariableDeclarationStatement@@HttpParams params=httpRequest.getParams(); @AT@ 6631 @LENGTH@ 32
------INS SimpleName@@params @TO@ VariableDeclarationFragment@@params=httpRequest.getParams() @AT@ 6631 @LENGTH@ 6
------INS MethodInvocation@@httpRequest.getParams() @TO@ VariableDeclarationFragment@@params=httpRequest.getParams() @AT@ 6640 @LENGTH@ 23
---------INS SimpleName@@Name:httpRequest @TO@ MethodInvocation@@httpRequest.getParams() @AT@ 6640 @LENGTH@ 11
---------INS SimpleName@@MethodName:getParams:[] @TO@ MethodInvocation@@httpRequest.getParams() @AT@ 6652 @LENGTH@ 11


INS FieldDeclaration@@public, static, final, int, [PARSE_WEBSERVICES_XML=0x2000] @TO@ EnumDeclaration@@[public]Phase,  @AT@ 9421 @LENGTH@ 77
---INS Modifier@@public @TO@ FieldDeclaration@@public, static, final, int, [PARSE_WEBSERVICES_XML=0x2000] @AT@ 9421 @LENGTH@ 6
---INS Modifier@@static @TO@ FieldDeclaration@@public, static, final, int, [PARSE_WEBSERVICES_XML=0x2000] @AT@ 9428 @LENGTH@ 6
---INS Modifier@@final @TO@ FieldDeclaration@@public, static, final, int, [PARSE_WEBSERVICES_XML=0x2000] @AT@ 9435 @LENGTH@ 5
---INS PrimitiveType@@int @TO@ FieldDeclaration@@public, static, final, int, [PARSE_WEBSERVICES_XML=0x2000] @AT@ 9441 @LENGTH@ 3
---INS VariableDeclarationFragment@@PARSE_WEBSERVICES_XML=0x2000 @TO@ FieldDeclaration@@public, static, final, int, [PARSE_WEBSERVICES_XML=0x2000] @AT@ 9445 @LENGTH@ 52
------INS SimpleName@@PARSE_WEBSERVICES_XML @TO@ VariableDeclarationFragment@@PARSE_WEBSERVICES_XML=0x2000 @AT@ 9445 @LENGTH@ 21
------INS NumberLiteral@@0x2000 @TO@ VariableDeclarationFragment@@PARSE_WEBSERVICES_XML=0x2000 @AT@ 9491 @LENGTH@ 6


MOV ExpressionStatement@@SuperMethodInvocation:super.setUp() @TO@ MethodDeclaration@@public, void, MethodName:setUp, Exception,  @AT@ 1258 @LENGTH@ 14


UPD FieldDeclaration@@private, final, List<String>, [FIELD_NAMES=Arrays.asList("ID","id","_id")] @TO@ private, static, final, List<String>, [FIELD_NAMES=Arrays.asList("ID","id","_id")] @AT@ 1144 @LENGTH@ 74
---INS Modifier@@static @TO@ FieldDeclaration@@private, final, List<String>, [FIELD_NAMES=Arrays.asList("ID","id","_id")] @AT@ 1152 @LENGTH@ 6


DEL VariableDeclarationStatement@@final String deploymentRuntimeName=deploymentUnit.getAttachment(Attachments.RUNTIME_NAME); @AT@ 2471 @LENGTH@ 92
---DEL Modifier@@final @AT@ 2471 @LENGTH@ 5
---DEL SimpleType@@String @AT@ 2477 @LENGTH@ 6
---DEL VariableDeclarationFragment@@deploymentRuntimeName=deploymentUnit.getAttachment(Attachments.RUNTIME_NAME) @AT@ 2484 @LENGTH@ 78
------DEL SimpleName@@deploymentRuntimeName @AT@ 2484 @LENGTH@ 21
------DEL MethodInvocation@@deploymentUnit.getAttachment(Attachments.RUNTIME_NAME) @AT@ 2508 @LENGTH@ 54
---------DEL SimpleName@@Name:deploymentUnit @AT@ 2508 @LENGTH@ 14
---------DEL SimpleName@@MethodName:getAttachment:[Attachments.RUNTIME_NAME] @AT@ 2523 @LENGTH@ 39
------------DEL QualifiedName@@Attachments.RUNTIME_NAME @AT@ 2537 @LENGTH@ 24
---------------DEL SimpleName@@Attachments @AT@ 2537 @LENGTH@ 11
---------------DEL SimpleName@@RUNTIME_NAME @AT@ 2549 @LENGTH@ 12


UPD VariableDeclarationStatement@@final BatchBuilder builder=updateContext.getServiceTarget(); @TO@ final ServiceTarget builder=updateContext.getServiceTarget(); @AT@ 2667 @LENGTH@ 62
---UPD SimpleType@@BatchBuilder @TO@ ServiceTarget @AT@ 2673 @LENGTH@ 12


UPD TryStatement@@try {  final BatchBuilder builder=updateContext.getServiceTarget();  final ConsoleHandlerService service=new ConsoleHandlerService();  final ServiceBuilder<Handler> serviceBuilder=builder.addService(LogServices.handlerName(getName()),service);  service.setLevel(Level.parse(getLevelName()));  final Boolean autoFlush=getAutoflush();  if (autoFlush != null)   service.setAutoflush(autoFlush.booleanValue());  try {    service.setEncoding(getEncoding());  } catch (  UnsupportedEncodingException e) {    handler.handleFailure(e,param);    return;  }  service.setFormatterSpec(getFormatter());  serviceBuilder.setInitialMode(ServiceController.Mode.ACTIVE);  serviceBuilder.addListener(new UpdateResultHandler.ServiceStartListener<P>(handler,param));  serviceBuilder.install();} catch (Throwable t) {  handler.handleFailure(t,param);  return;} @TO@ try {  final ServiceTarget target=updateContext.getServiceTarget();  final ConsoleHandlerService service=new ConsoleHandlerService();  final ServiceBuilder<Handler> serviceBuilder=target.addService(LogServices.handlerName(getName()),service);  service.setLevel(Level.parse(getLevelName()));  final Boolean autoFlush=getAutoflush();  if (autoFlush != null)   service.setAutoflush(autoFlush.booleanValue());  try {    service.setEncoding(getEncoding());  } catch (  UnsupportedEncodingException e) {    handler.handleFailure(e,param);    return;  }  service.setFormatterSpec(getFormatter());  serviceBuilder.setInitialMode(ServiceController.Mode.ACTIVE);  serviceBuilder.addListener(new UpdateResultHandler.ServiceStartListener<P>(handler,param));  serviceBuilder.install();} catch (Throwable t) {  handler.handleFailure(t,param);  return;} @AT@ 2245 @LENGTH@ 1069
---UPD VariableDeclarationStatement@@final BatchBuilder builder=updateContext.getServiceTarget(); @TO@ final ServiceTarget target=updateContext.getServiceTarget(); @AT@ 2263 @LENGTH@ 62
------UPD SimpleType@@BatchBuilder @TO@ ServiceTarget @AT@ 2269 @LENGTH@ 12
------UPD VariableDeclarationFragment@@builder=updateContext.getServiceTarget() @TO@ target=updateContext.getServiceTarget() @AT@ 2282 @LENGTH@ 42
---------UPD SimpleName@@builder @TO@ target @AT@ 2282 @LENGTH@ 7
---UPD VariableDeclarationStatement@@final ServiceBuilder<Handler> serviceBuilder=builder.addService(LogServices.handlerName(getName()),service); @TO@ final ServiceBuilder<Handler> serviceBuilder=target.addService(LogServices.handlerName(getName()),service); @AT@ 2417 @LENGTH@ 111
------UPD VariableDeclarationFragment@@serviceBuilder=builder.addService(LogServices.handlerName(getName()),service) @TO@ serviceBuilder=target.addService(LogServices.handlerName(getName()),service) @AT@ 2447 @LENGTH@ 80
---------UPD MethodInvocation@@builder.addService(LogServices.handlerName(getName()),service) @TO@ target.addService(LogServices.handlerName(getName()),service) @AT@ 2464 @LENGTH@ 63
------------UPD SimpleName@@Name:builder @TO@ Name:target @AT@ 2464 @LENGTH@ 7


INS MethodDeclaration@@public, void, MethodName:undeploy, final DeploymentUnit context,  @TO@ TypeDeclaration@@[public]WarDeploymentProcessor, [DeploymentUnitProcessor] @AT@ 3267 @LENGTH@ 58
---INS Modifier@@public @TO@ MethodDeclaration@@public, void, MethodName:undeploy, final DeploymentUnit context,  @AT@ 3267 @LENGTH@ 6
---INS PrimitiveType@@void @TO@ MethodDeclaration@@public, void, MethodName:undeploy, final DeploymentUnit context,  @AT@ 3274 @LENGTH@ 4
---INS SimpleName@@MethodName:undeploy @TO@ MethodDeclaration@@public, void, MethodName:undeploy, final DeploymentUnit context,  @AT@ 3279 @LENGTH@ 8
---INS SingleVariableDeclaration@@final DeploymentUnit context @TO@ MethodDeclaration@@public, void, MethodName:undeploy, final DeploymentUnit context,  @AT@ 3288 @LENGTH@ 28
------INS Modifier@@final @TO@ SingleVariableDeclaration@@final DeploymentUnit context @AT@ 3288 @LENGTH@ 5
------INS SimpleType@@DeploymentUnit @TO@ SingleVariableDeclaration@@final DeploymentUnit context @AT@ 3294 @LENGTH@ 14
------INS SimpleName@@context @TO@ SingleVariableDeclaration@@final DeploymentUnit context @AT@ 3309 @LENGTH@ 7


MOV ExpressionStatement@@MethodInvocation:unit.putAttachment(MARKER,Boolean.TRUE) @TO@ MethodDeclaration@@public, static, void, MethodName:mark, DeploymentUnit unit,  @AT@ 1665 @LENGTH@ 41


UPD ExpressionStatement@@MethodInvocation:factory.setOutputPath("bar") @TO@ MethodInvocation:factory.setOutputPath("target/bar") @AT@ 2627 @LENGTH@ 29
---UPD MethodInvocation@@factory.setOutputPath("bar") @TO@ factory.setOutputPath("target/bar") @AT@ 2627 @LENGTH@ 28
------UPD SimpleName@@MethodName:setOutputPath:["bar"] @TO@ MethodName:setOutputPath:["target/bar"] @AT@ 2635 @LENGTH@ 20
---------UPD StringLiteral@@"bar" @TO@ "target/bar" @AT@ 2649 @LENGTH@ 5


UPD ExpressionStatement@@Assignment:index=handleAEIOUY(value,result,index) @TO@ Assignment:index=handleAEIOUY(result,index) @AT@ 3497 @LENGTH@ 43
---UPD Assignment@@index=handleAEIOUY(value,result,index) @TO@ index=handleAEIOUY(result,index) @AT@ 3497 @LENGTH@ 42
------UPD MethodInvocation@@handleAEIOUY(value,result,index) @TO@ handleAEIOUY(result,index) @AT@ 3505 @LENGTH@ 34
---------UPD SimpleName@@MethodName:handleAEIOUY:[value, result, index] @TO@ MethodName:handleAEIOUY:[result, index] @AT@ 3505 @LENGTH@ 34
------------DEL SimpleName@@value @AT@ 3518 @LENGTH@ 5


UPD ExpressionStatement@@MethodInvocation:values.setProfileUrl(profile.getId()) @TO@ MethodInvocation:values.setProviderUserId(profile.getId()) @AT@ 1629 @LENGTH@ 38
---UPD MethodInvocation@@values.setProfileUrl(profile.getId()) @TO@ values.setProviderUserId(profile.getId()) @AT@ 1629 @LENGTH@ 37
------UPD SimpleName@@MethodName:setProfileUrl:[profile.getId()] @TO@ MethodName:setProviderUserId:[profile.getId()] @AT@ 1636 @LENGTH@ 30


UPD IfStatement@@if (wsdlLocation.length() > 0) {  reference.setWsdlFile(wsdlLocation);} @TO@ if (wsdlLocation != null && wsdlLocation.length() > 0) {  reference.setWsdlFile(wsdlLocation);} @AT@ 11432 @LENGTH@ 91
---INS InfixExpression@@wsdlLocation != null && wsdlLocation.length() > 0 @TO@ IfStatement@@if (wsdlLocation.length() > 0) {  reference.setWsdlFile(wsdlLocation);} @AT@ 11436 @LENGTH@ 49
------MOV InfixExpression@@wsdlLocation.length() > 0 @TO@ InfixExpression@@wsdlLocation != null && wsdlLocation.length() > 0 @AT@ 11436 @LENGTH@ 25
------INS InfixExpression@@wsdlLocation != null @TO@ InfixExpression@@wsdlLocation != null && wsdlLocation.length() > 0 @AT@ 11436 @LENGTH@ 20
---------INS SimpleName@@wsdlLocation @TO@ InfixExpression@@wsdlLocation != null @AT@ 11436 @LENGTH@ 12
---------INS Operator@@!= @TO@ InfixExpression@@wsdlLocation != null @AT@ 11448 @LENGTH@ 2
---------INS NullLiteral@@null @TO@ InfixExpression@@wsdlLocation != null @AT@ 11452 @LENGTH@ 4
------INS Operator@@&& @TO@ InfixExpression@@wsdlLocation != null && wsdlLocation.length() > 0 @AT@ 11456 @LENGTH@ 2


INS VariableDeclarationStatement@@int queryParameterPosition=1; @TO@ MethodDeclaration@@public, Query, MethodName:bind, Query query,  @AT@ 2975 @LENGTH@ 31
---INS PrimitiveType@@int @TO@ VariableDeclarationStatement@@int queryParameterPosition=1; @AT@ 2975 @LENGTH@ 3
---INS VariableDeclarationFragment@@queryParameterPosition=1 @TO@ VariableDeclarationStatement@@int queryParameterPosition=1; @AT@ 2979 @LENGTH@ 26
------INS SimpleName@@queryParameterPosition @TO@ VariableDeclarationFragment@@queryParameterPosition=1 @AT@ 2979 @LENGTH@ 22
------INS NumberLiteral@@1 @TO@ VariableDeclarationFragment@@queryParameterPosition=1 @AT@ 3004 @LENGTH@ 1


UPD Block@@SyncBody:{  outputStream.write(ModelControllerClientProtocol.PARAM_HANDLE_RESULT_COMPLETE);  outputStream.write(ModelControllerClientProtocol.PARAM_OPERATION);  result.getCompensatingOperation().writeExternal(outputStream);  outputStream.flush();} @TO@ SyncBody:{  outputStream.write(ModelControllerClientProtocol.PARAM_HANDLE_RESULT_COMPLETE);  outputStream.write(ModelControllerClientProtocol.PARAM_OPERATION);  ModelNode compensating=result.getCompensatingOperation() != null ? result.getCompensatingOperation() : new ModelNode();  compensating.writeExternal(outputStream);  outputStream.flush();} @AT@ 11090 @LENGTH@ 351
---INS VariableDeclarationStatement@@ModelNode compensating=result.getCompensatingOperation() != null ? result.getCompensatingOperation() : new ModelNode(); @TO@ Block@@SyncBody:{  outputStream.write(ModelControllerClientProtocol.PARAM_HANDLE_RESULT_COMPLETE);  outputStream.write(ModelControllerClientProtocol.PARAM_OPERATION);  result.getCompensatingOperation().writeExternal(outputStream);  outputStream.flush();} @AT@ 11311 @LENGTH@ 121
------INS SimpleType@@ModelNode @TO@ VariableDeclarationStatement@@ModelNode compensating=result.getCompensatingOperation() != null ? result.getCompensatingOperation() : new ModelNode(); @AT@ 11311 @LENGTH@ 9
------INS VariableDeclarationFragment@@compensating=result.getCompensatingOperation() != null ? result.getCompensatingOperation() : new ModelNode() @TO@ VariableDeclarationStatement@@ModelNode compensating=result.getCompensatingOperation() != null ? result.getCompensatingOperation() : new ModelNode(); @AT@ 11321 @LENGTH@ 110
---------INS SimpleName@@compensating @TO@ VariableDeclarationFragment@@compensating=result.getCompensatingOperation() != null ? result.getCompensatingOperation() : new ModelNode() @AT@ 11321 @LENGTH@ 12
---------INS ConditionalExpression@@result.getCompensatingOperation() != null ? result.getCompensatingOperation() : new ModelNode() @TO@ VariableDeclarationFragment@@compensating=result.getCompensatingOperation() != null ? result.getCompensatingOperation() : new ModelNode() @AT@ 11336 @LENGTH@ 95
------------INS InfixExpression@@result.getCompensatingOperation() != null @TO@ ConditionalExpression@@result.getCompensatingOperation() != null ? result.getCompensatingOperation() : new ModelNode() @AT@ 11336 @LENGTH@ 41
---------------INS MethodInvocation@@result.getCompensatingOperation() @TO@ InfixExpression@@result.getCompensatingOperation() != null @AT@ 11336 @LENGTH@ 33
------------------INS SimpleName@@Name:result @TO@ MethodInvocation@@result.getCompensatingOperation() @AT@ 11336 @LENGTH@ 6
------------------INS SimpleName@@MethodName:getCompensatingOperation:[] @TO@ MethodInvocation@@result.getCompensatingOperation() @AT@ 11343 @LENGTH@ 26
---------------INS Operator@@!= @TO@ InfixExpression@@result.getCompensatingOperation() != null @AT@ 11369 @LENGTH@ 2
---------------INS NullLiteral@@null @TO@ InfixExpression@@result.getCompensatingOperation() != null @AT@ 11373 @LENGTH@ 4
------------INS MethodInvocation@@result.getCompensatingOperation() @TO@ ConditionalExpression@@result.getCompensatingOperation() != null ? result.getCompensatingOperation() : new ModelNode() @AT@ 11380 @LENGTH@ 33
---------------INS SimpleName@@Name:result @TO@ MethodInvocation@@result.getCompensatingOperation() @AT@ 11380 @LENGTH@ 6
---------------INS SimpleName@@MethodName:getCompensatingOperation:[] @TO@ MethodInvocation@@result.getCompensatingOperation() @AT@ 11387 @LENGTH@ 26
------------INS ClassInstanceCreation@@ModelNode[] @TO@ ConditionalExpression@@result.getCompensatingOperation() != null ? result.getCompensatingOperation() : new ModelNode() @AT@ 11416 @LENGTH@ 15
---------------INS New@@new @TO@ ClassInstanceCreation@@ModelNode[] @AT@ 11416 @LENGTH@ 3
---------------INS SimpleType@@ModelNode @TO@ ClassInstanceCreation@@ModelNode[] @AT@ 11420 @LENGTH@ 9
---UPD ExpressionStatement@@MethodInvocation:result.getCompensatingOperation().writeExternal(outputStream) @TO@ MethodInvocation:compensating.writeExternal(outputStream) @AT@ 11311 @LENGTH@ 62
------UPD MethodInvocation@@result.getCompensatingOperation().writeExternal(outputStream) @TO@ compensating.writeExternal(outputStream) @AT@ 11311 @LENGTH@ 61
---------DEL MethodInvocation@@MethodName:getCompensatingOperation:[] @AT@ 11311 @LENGTH@ 33
---------UPD SimpleName@@Name:result @TO@ Name:compensating @AT@ 11311 @LENGTH@ 6


UPD ExpressionStatement@@MethodInvocation:viewConfiguration.getViewPostConstructInterceptors().addFirst(sessionIdGeneratingInterceptorFactory) @TO@ MethodInvocation:viewConfiguration.getViewPostConstructInterceptors().add(sessionIdGeneratingInterceptorFactory) @AT@ 4464 @LENGTH@ 101
---UPD MethodInvocation@@viewConfiguration.getViewPostConstructInterceptors().addFirst(sessionIdGeneratingInterceptorFactory) @TO@ viewConfiguration.getViewPostConstructInterceptors().add(sessionIdGeneratingInterceptorFactory) @AT@ 4464 @LENGTH@ 100
------UPD SimpleName@@MethodName:addFirst:[sessionIdGeneratingInterceptorFactory] @TO@ MethodName:add:[sessionIdGeneratingInterceptorFactory] @AT@ 4517 @LENGTH@ 47


UPD TryStatement@@try {  final BatchBuilder batchBuilder=updateContext.getServiceTarget();  final PeriodicRotatingFileHandlerService service=new PeriodicRotatingFileHandlerService();  final ServiceBuilder<Handler> serviceBuilder=batchBuilder.addService(LogServices.handlerName(getName()),service);  final String relativeTo=getRelativeTo();  if (relativeTo != null) {    serviceBuilder.addDependency(AbstractPathService.pathNameOf(relativeTo),String.class,service.getRelativeToInjector());  }  service.setLevel(Level.parse(getLevelName()));  final Boolean autoFlush=getAutoflush();  if (autoFlush != null)   service.setAutoflush(autoFlush.booleanValue());  service.setEncoding(getEncoding());  service.setPath(getPath());  service.setFormatterSpec(getFormatter());  service.setSuffix(suffix);  serviceBuilder.setInitialMode(ServiceController.Mode.ACTIVE);  serviceBuilder.addListener(new UpdateResultHandler.ServiceStartListener<P>(handler,param));  serviceBuilder.install();} catch (Throwable t) {  handler.handleFailure(t,param);} @TO@ try {  final ServiceTarget target=updateContext.getServiceTarget();  final PeriodicRotatingFileHandlerService service=new PeriodicRotatingFileHandlerService();  final ServiceBuilder<Handler> serviceBuilder=target.addService(LogServices.handlerName(getName()),service);  final String relativeTo=getRelativeTo();  if (relativeTo != null) {    serviceBuilder.addDependency(AbstractPathService.pathNameOf(relativeTo),String.class,service.getRelativeToInjector());  }  service.setLevel(Level.parse(getLevelName()));  final Boolean autoFlush=getAutoflush();  if (autoFlush != null)   service.setAutoflush(autoFlush.booleanValue());  service.setEncoding(getEncoding());  service.setPath(getPath());  service.setFormatterSpec(getFormatter());  service.setSuffix(suffix);  serviceBuilder.setInitialMode(ServiceController.Mode.ACTIVE);  serviceBuilder.addListener(new UpdateResultHandler.ServiceStartListener<P>(handler,param));  serviceBuilder.install();} catch (Throwable t) {  handler.handleFailure(t,param);} @AT@ 2342 @LENGTH@ 1244
---UPD VariableDeclarationStatement@@final BatchBuilder batchBuilder=updateContext.getServiceTarget(); @TO@ final ServiceTarget target=updateContext.getServiceTarget(); @AT@ 2360 @LENGTH@ 67
------UPD SimpleType@@BatchBuilder @TO@ ServiceTarget @AT@ 2366 @LENGTH@ 12
------UPD VariableDeclarationFragment@@batchBuilder=updateContext.getServiceTarget() @TO@ target=updateContext.getServiceTarget() @AT@ 2379 @LENGTH@ 47
---------UPD SimpleName@@batchBuilder @TO@ target @AT@ 2379 @LENGTH@ 12
---UPD VariableDeclarationStatement@@final ServiceBuilder<Handler> serviceBuilder=batchBuilder.addService(LogServices.handlerName(getName()),service); @TO@ final ServiceBuilder<Handler> serviceBuilder=target.addService(LogServices.handlerName(getName()),service); @AT@ 2545 @LENGTH@ 116
------UPD VariableDeclarationFragment@@serviceBuilder=batchBuilder.addService(LogServices.handlerName(getName()),service) @TO@ serviceBuilder=target.addService(LogServices.handlerName(getName()),service) @AT@ 2575 @LENGTH@ 85
---------UPD MethodInvocation@@batchBuilder.addService(LogServices.handlerName(getName()),service) @TO@ target.addService(LogServices.handlerName(getName()),service) @AT@ 2592 @LENGTH@ 68
------------UPD SimpleName@@Name:batchBuilder @TO@ Name:target @AT@ 2592 @LENGTH@ 12


UPD VariableDeclarationStatement@@String[][] data={{"peter","127"},{"pharma","376"},{"bergisch-gladbach","174845214"},{"mönchengladbach","664645214"},{"deutsch","28"},{"deutz","28"},{"Xanthippe","48621"},{"Zacharias","8478"},{"matz","68"},{"Arbeitsamt","071862"},{"Eberhard","01772"},{"Eberhardt","01772"},{"Müller-Lüdenscheidt","65752682"}}; @TO@ String[][] data={{"peter","127"},{"pharma","376"},{"bergisch-gladbach","174845214"},{"mönchengladbach","664645214"},{"deutsch","28"},{"deutz","28"},{"christstollen","478256"},{"Xanthippe","48621"},{"Zacharias","8478"},{"matsch","68"},{"matz","68"},{"Arbeitsamt","071862"},{"Eberhard","01772"},{"Eberhardt","01772"},{"Müller-Lüdenscheidt","65752682"}}; @AT@ 4088 @LENGTH@ 714
---UPD VariableDeclarationFragment@@data={{"peter","127"},{"pharma","376"},{"bergisch-gladbach","174845214"},{"mönchengladbach","664645214"},{"deutsch","28"},{"deutz","28"},{"Xanthippe","48621"},{"Zacharias","8478"},{"matz","68"},{"Arbeitsamt","071862"},{"Eberhard","01772"},{"Eberhardt","01772"},{"Müller-Lüdenscheidt","65752682"}} @TO@ data={{"peter","127"},{"pharma","376"},{"bergisch-gladbach","174845214"},{"mönchengladbach","664645214"},{"deutsch","28"},{"deutz","28"},{"christstollen","478256"},{"Xanthippe","48621"},{"Zacharias","8478"},{"matsch","68"},{"matz","68"},{"Arbeitsamt","071862"},{"Eberhard","01772"},{"Eberhardt","01772"},{"Müller-Lüdenscheidt","65752682"}} @AT@ 4099 @LENGTH@ 702
------UPD ArrayInitializer@@{{"peter","127"},{"pharma","376"},{"bergisch-gladbach","174845214"},{"mönchengladbach","664645214"},{"deutsch","28"},{"deutz","28"},{"Xanthippe","48621"},{"Zacharias","8478"},{"matz","68"},{"Arbeitsamt","071862"},{"Eberhard","01772"},{"Eberhardt","01772"},{"Müller-Lüdenscheidt","65752682"}} @TO@ {{"peter","127"},{"pharma","376"},{"bergisch-gladbach","174845214"},{"mönchengladbach","664645214"},{"deutsch","28"},{"deutz","28"},{"christstollen","478256"},{"Xanthippe","48621"},{"Zacharias","8478"},{"matsch","68"},{"matz","68"},{"Arbeitsamt","071862"},{"Eberhard","01772"},{"Eberhardt","01772"},{"Müller-Lüdenscheidt","65752682"}} @AT@ 4106 @LENGTH@ 695
---------INS ArrayInitializer@@{"christstollen","478256"} @TO@ ArrayInitializer@@{{"peter","127"},{"pharma","376"},{"bergisch-gladbach","174845214"},{"mönchengladbach","664645214"},{"deutsch","28"},{"deutz","28"},{"Xanthippe","48621"},{"Zacharias","8478"},{"matz","68"},{"Arbeitsamt","071862"},{"Eberhard","01772"},{"Eberhardt","01772"},{"Müller-Lüdenscheidt","65752682"}} @AT@ 4407 @LENGTH@ 27
------------INS StringLiteral@@"christstollen" @TO@ ArrayInitializer@@{"christstollen","478256"} @AT@ 4408 @LENGTH@ 15
------------INS StringLiteral@@"478256" @TO@ ArrayInitializer@@{"christstollen","478256"} @AT@ 4425 @LENGTH@ 8
---------INS ArrayInitializer@@{"matsch","68"} @TO@ ArrayInitializer@@{{"peter","127"},{"pharma","376"},{"bergisch-gladbach","174845214"},{"mönchengladbach","664645214"},{"deutsch","28"},{"deutz","28"},{"Xanthippe","48621"},{"Zacharias","8478"},{"matz","68"},{"Arbeitsamt","071862"},{"Eberhard","01772"},{"Eberhardt","01772"},{"Müller-Lüdenscheidt","65752682"}} @AT@ 4554 @LENGTH@ 16
------------INS StringLiteral@@"matsch" @TO@ ArrayInitializer@@{"matsch","68"} @AT@ 4555 @LENGTH@ 8
------------INS StringLiteral@@"68" @TO@ ArrayInitializer@@{"matsch","68"} @AT@ 4565 @LENGTH@ 4


MOV ExpressionStatement@@MethodInvocation:tracker.addService(ServerControllerService.JBOSS_AS_NAME,serverControllerService).install() @TO@ MethodDeclaration@@public, AsyncFuture<ServerController>, MethodName:start, final Configuration configuration, final List<ServiceActivator> extraServices,  @AT@ 3743 @LENGTH@ 93


UPD TypeDeclaration@@[public]StatelessSessionComponentCreateService, EJBComponentCreateService @TO@ [public]StatelessSessionComponentCreateService, SessionBeanComponentCreateService @AT@ 1332 @LENGTH@ 552
---UPD SimpleType@@EJBComponentCreateService @TO@ SessionBeanComponentCreateService @AT@ 1392 @LENGTH@ 25


UPD VariableDeclarationStatement@@StringBuilder authorizeUrl=new StringBuilder(this.authorizeUrl).append('?').append("oauth_token").append('=').append(formEncode(requestToken)); @TO@ StringBuilder authorizeUrl=new StringBuilder(oauthUrl).append('?').append("oauth_token").append('=').append(formEncode(requestToken)); @AT@ 6330 @LENGTH@ 145
---UPD VariableDeclarationFragment@@authorizeUrl=new StringBuilder(this.authorizeUrl).append('?').append("oauth_token").append('=').append(formEncode(requestToken)) @TO@ authorizeUrl=new StringBuilder(oauthUrl).append('?').append("oauth_token").append('=').append(formEncode(requestToken)) @AT@ 6344 @LENGTH@ 130
------UPD MethodInvocation@@new StringBuilder(this.authorizeUrl).append('?').append("oauth_token").append('=').append(formEncode(requestToken)) @TO@ new StringBuilder(oauthUrl).append('?').append("oauth_token").append('=').append(formEncode(requestToken)) @AT@ 6359 @LENGTH@ 115
---------UPD ClassInstanceCreation@@StringBuilder[this.authorizeUrl] @TO@ StringBuilder[oauthUrl] @AT@ 6359 @LENGTH@ 36
------------DEL FieldAccess@@this.authorizeUrl @AT@ 6377 @LENGTH@ 17
---------------DEL ThisExpression@@this @AT@ 6377 @LENGTH@ 4
---------------DEL SimpleName@@authorizeUrl @AT@ 6382 @LENGTH@ 12
------------INS SimpleName@@oauthUrl @TO@ ClassInstanceCreation@@StringBuilder[this.authorizeUrl] @AT@ 6377 @LENGTH@ 8


DEL ExpressionStatement@@MethodInvocation:assertEquals("6/25/07",DateFormat.getDateInstance(DateFormat.SHORT,Locale.ENGLISH).format(createdDate)) @AT@ 3414 @LENGTH@ 106
---DEL MethodInvocation@@assertEquals("6/25/07",DateFormat.getDateInstance(DateFormat.SHORT,Locale.ENGLISH).format(createdDate)) @AT@ 3414 @LENGTH@ 105
------DEL SimpleName@@MethodName:assertEquals:["6/25/07", DateFormat.getDateInstance(DateFormat.SHORT,Locale.ENGLISH).format(createdDate)] @AT@ 3414 @LENGTH@ 105
---------DEL StringLiteral@@"6/25/07" @AT@ 3427 @LENGTH@ 9
---------DEL MethodInvocation@@DateFormat.getDateInstance(DateFormat.SHORT,Locale.ENGLISH).format(createdDate) @AT@ 3438 @LENGTH@ 80
------------DEL MethodInvocation@@MethodName:getDateInstance:[DateFormat.SHORT, Locale.ENGLISH] @AT@ 3438 @LENGTH@ 60
---------------DEL QualifiedName@@DateFormat.SHORT @AT@ 3465 @LENGTH@ 16
------------------DEL SimpleName@@DateFormat @AT@ 3465 @LENGTH@ 10
------------------DEL SimpleName@@SHORT @AT@ 3476 @LENGTH@ 5
---------------DEL QualifiedName@@Locale.ENGLISH @AT@ 3483 @LENGTH@ 14
------------------DEL SimpleName@@Locale @AT@ 3483 @LENGTH@ 6
------------------DEL SimpleName@@ENGLISH @AT@ 3490 @LENGTH@ 7
------------DEL SimpleName@@Name:DateFormat @AT@ 3438 @LENGTH@ 10
------------DEL SimpleName@@MethodName:format:[createdDate] @AT@ 3499 @LENGTH@ 19
---------------DEL SimpleName@@createdDate @AT@ 3506 @LENGTH@ 11


UPD MethodDeclaration@@protected, void, P, MethodName:applyUpdate, UpdateContext updateContext, UpdateResultHandler<Object,P> resultHandler, P param,  @TO@ protected, void, P, MethodName:applyUpdate, final UpdateContext updateContext, final UpdateResultHandler<? super Object,P> handler, final P param,  @AT@ 2127 @LENGTH@ 163
---UPD SingleVariableDeclaration@@UpdateContext updateContext @TO@ final UpdateContext updateContext @AT@ 2158 @LENGTH@ 27
------INS Modifier@@final @TO@ SingleVariableDeclaration@@UpdateContext updateContext @AT@ 2158 @LENGTH@ 5
---UPD SingleVariableDeclaration@@UpdateResultHandler<Object,P> resultHandler @TO@ final UpdateResultHandler<? super Object,P> handler @AT@ 2187 @LENGTH@ 44
------UPD ParameterizedType@@UpdateResultHandler<Object,P> @TO@ UpdateResultHandler<? super Object,P> @AT@ 2187 @LENGTH@ 30
---------DEL SimpleType@@Object @AT@ 2207 @LENGTH@ 6
---------INS WildcardType@@? @TO@ ParameterizedType@@UpdateResultHandler<Object,P> @AT@ 2219 @LENGTH@ 14
------INS Modifier@@final @TO@ SingleVariableDeclaration@@UpdateResultHandler<Object,P> resultHandler @AT@ 2193 @LENGTH@ 5
------UPD SimpleName@@resultHandler @TO@ handler @AT@ 2218 @LENGTH@ 13
---UPD SingleVariableDeclaration@@P param @TO@ final P param @AT@ 2233 @LENGTH@ 7
------INS Modifier@@final @TO@ SingleVariableDeclaration@@P param @AT@ 2247 @LENGTH@ 5


UPD ExpressionStatement@@MethodInvocation:LOG.info(String.format("Finder method %s is backed by a NamedQuery" + " but contains a Pageble parameter! Sorting deliviered " + "via this Pageable will not be applied!",method)) @TO@ MethodInvocation:LOG.info("Finder method {} is backed by a NamedQuery" + " but contains a Pageble parameter! Sorting deliviered " + "via this Pageable will not be applied!",method) @AT@ 3421 @LENGTH@ 301
---UPD MethodInvocation@@LOG.info(String.format("Finder method %s is backed by a NamedQuery" + " but contains a Pageble parameter! Sorting deliviered " + "via this Pageable will not be applied!",method)) @TO@ LOG.info("Finder method {} is backed by a NamedQuery" + " but contains a Pageble parameter! Sorting deliviered " + "via this Pageable will not be applied!",method) @AT@ 3421 @LENGTH@ 300
------DEL SimpleName@@MethodName:info:[String.format("Finder method %s is backed by a NamedQuery" + " but contains a Pageble parameter! Sorting deliviered " + "via this Pageable will not be applied!",method)] @AT@ 3425 @LENGTH@ 296
---------DEL MethodInvocation@@String.format("Finder method %s is backed by a NamedQuery" + " but contains a Pageble parameter! Sorting deliviered " + "via this Pageable will not be applied!",method) @AT@ 3430 @LENGTH@ 290
------------DEL SimpleName@@Name:String @AT@ 3430 @LENGTH@ 6
------MOV SimpleName@@MethodName:format:["Finder method %s is backed by a NamedQuery" + " but contains a Pageble parameter! Sorting deliviered " + "via this Pageable will not be applied!", method] @TO@ MethodInvocation@@LOG.info(String.format("Finder method %s is backed by a NamedQuery" + " but contains a Pageble parameter! Sorting deliviered " + "via this Pageable will not be applied!",method)) @AT@ 3462 @LENGTH@ 258
---------UPD InfixExpression@@"Finder method %s is backed by a NamedQuery" + " but contains a Pageble parameter! Sorting deliviered " + "via this Pageable will not be applied!" @TO@ "Finder method {} is backed by a NamedQuery" + " but contains a Pageble parameter! Sorting deliviered " + "via this Pageable will not be applied!" @AT@ 3469 @LENGTH@ 210
------------UPD StringLiteral@@"Finder method %s is backed by a NamedQuery" @TO@ "Finder method {} is backed by a NamedQuery" @AT@ 3469 @LENGTH@ 44


UPD SwitchStatement@@switch (concurrencyManagementType) {case CONTAINER:  componentDescription.containerManagedConcurrency();break;case BEAN:componentDescription.beanManagedConcurrency();default :throw new DeploymentUnitProcessingException("Unexpected concurrency management type: " + concurrencyManagementType + " on bean "+ componentDescription.getEJBName());} @TO@ switch (concurrencyManagementType) {case CONTAINER:  componentDescription.containerManagedConcurrency();break;case BEAN:componentDescription.beanManagedConcurrency();break;default :throw new DeploymentUnitProcessingException("Unexpected concurrency management type: " + concurrencyManagementType + " on bean "+ componentDescription.getEJBName());} @AT@ 3934 @LENGTH@ 455
---INS BreakStatement@@ @TO@ SwitchStatement@@switch (concurrencyManagementType) {case CONTAINER:  componentDescription.containerManagedConcurrency();break;case BEAN:componentDescription.beanManagedConcurrency();default :throw new DeploymentUnitProcessingException("Unexpected concurrency management type: " + concurrencyManagementType + " on bean "+ componentDescription.getEJBName());} @AT@ 4192 @LENGTH@ 6


INS IfStatement@@if (!installed) {  final ResourceInjectionConfiguration resource=new ResourceInjectionConfiguration(injectionTarget,new LookupInjectionSource(localContextName));  classDescription.getConfigurators().add(new InjectionConfigrator(resource));  installed=true;} @TO@ MethodDeclaration@@public, void, MethodName:install,  @AT@ 2154 @LENGTH@ 303
---INS PrefixExpression@@!installed @TO@ IfStatement@@if (!installed) {  final ResourceInjectionConfiguration resource=new ResourceInjectionConfiguration(injectionTarget,new LookupInjectionSource(localContextName));  classDescription.getConfigurators().add(new InjectionConfigrator(resource));  installed=true;} @AT@ 2157 @LENGTH@ 10
------INS Operator@@! @TO@ PrefixExpression@@!installed @AT@ 2157 @LENGTH@ 1
------INS SimpleName@@installed @TO@ PrefixExpression@@!installed @AT@ 2158 @LENGTH@ 9
---INS Block@@ThenBody:{  final ResourceInjectionConfiguration resource=new ResourceInjectionConfiguration(injectionTarget,new LookupInjectionSource(localContextName));  classDescription.getConfigurators().add(new InjectionConfigrator(resource));  installed=true;} @TO@ IfStatement@@if (!installed) {  final ResourceInjectionConfiguration resource=new ResourceInjectionConfiguration(injectionTarget,new LookupInjectionSource(localContextName));  classDescription.getConfigurators().add(new InjectionConfigrator(resource));  installed=true;} @AT@ 2169 @LENGTH@ 288
------MOV VariableDeclarationStatement@@final ResourceInjectionConfiguration resource=new ResourceInjectionConfiguration(injectionTarget,new LookupInjectionSource(localContextName)); @TO@ Block@@ThenBody:{  final ResourceInjectionConfiguration resource=new ResourceInjectionConfiguration(injectionTarget,new LookupInjectionSource(localContextName));  classDescription.getConfigurators().add(new InjectionConfigrator(resource));  installed=true;} @AT@ 2015 @LENGTH@ 145
------MOV ExpressionStatement@@MethodInvocation:classDescription.getConfigurators().add(new InjectionConfigrator(resource)) @TO@ Block@@ThenBody:{  final ResourceInjectionConfiguration resource=new ResourceInjectionConfiguration(injectionTarget,new LookupInjectionSource(localContextName));  classDescription.getConfigurators().add(new InjectionConfigrator(resource));  installed=true;} @AT@ 2169 @LENGTH@ 76
------INS ExpressionStatement@@Assignment:installed=true @TO@ Block@@ThenBody:{  final ResourceInjectionConfiguration resource=new ResourceInjectionConfiguration(injectionTarget,new LookupInjectionSource(localContextName));  classDescription.getConfigurators().add(new InjectionConfigrator(resource));  installed=true;} @AT@ 2430 @LENGTH@ 17
---------INS Assignment@@installed=true @TO@ ExpressionStatement@@Assignment:installed=true @AT@ 2430 @LENGTH@ 16
------------INS SimpleName@@installed @TO@ Assignment@@installed=true @AT@ 2430 @LENGTH@ 9
------------INS Operator@@= @TO@ Assignment@@installed=true @AT@ 2439 @LENGTH@ 1
------------INS BooleanLiteral@@true @TO@ Assignment@@installed=true @AT@ 2442 @LENGTH@ 4


INS TryStatement@@try {  if (!ctx.getParsedArguments().hasArguments()) {    throw new OperationFormatException("Arguments are missing");  }} catch (CommandFormatException e) {  throw new OperationFormatException(e.getLocalizedMessage());} @TO@ MethodDeclaration@@public, ModelNode, MethodName:buildRequest, CommandContext ctx, OperationFormatException,  @AT@ 2592 @LENGTH@ 283
---MOV IfStatement@@if (!ctx.getParsedArguments().hasArguments()) {  throw new OperationFormatException("Arguments are missing");} @TO@ TryStatement@@try {  if (!ctx.getParsedArguments().hasArguments()) {    throw new OperationFormatException("Arguments are missing");  }} catch (CommandFormatException e) {  throw new OperationFormatException(e.getLocalizedMessage());} @AT@ 2544 @LENGTH@ 129
---INS CatchClause@@catch (CommandFormatException e) {  throw new OperationFormatException(e.getLocalizedMessage());} @TO@ TryStatement@@try {  if (!ctx.getParsedArguments().hasArguments()) {    throw new OperationFormatException("Arguments are missing");  }} catch (CommandFormatException e) {  throw new OperationFormatException(e.getLocalizedMessage());} @AT@ 2758 @LENGTH@ 117
------INS SingleVariableDeclaration@@CommandFormatException e @TO@ CatchClause@@catch (CommandFormatException e) {  throw new OperationFormatException(e.getLocalizedMessage());} @AT@ 2765 @LENGTH@ 24
---------INS SimpleType@@CommandFormatException @TO@ SingleVariableDeclaration@@CommandFormatException e @AT@ 2765 @LENGTH@ 22
---------INS SimpleName@@e @TO@ SingleVariableDeclaration@@CommandFormatException e @AT@ 2788 @LENGTH@ 1
------INS ThrowStatement@@ClassInstanceCreation:new OperationFormatException(e.getLocalizedMessage()) @TO@ CatchClause@@catch (CommandFormatException e) {  throw new OperationFormatException(e.getLocalizedMessage());} @AT@ 2805 @LENGTH@ 60
---------INS ClassInstanceCreation@@OperationFormatException[e.getLocalizedMessage()] @TO@ ThrowStatement@@ClassInstanceCreation:new OperationFormatException(e.getLocalizedMessage()) @AT@ 2811 @LENGTH@ 53
------------INS New@@new @TO@ ClassInstanceCreation@@OperationFormatException[e.getLocalizedMessage()] @AT@ 2811 @LENGTH@ 3
------------INS SimpleType@@OperationFormatException @TO@ ClassInstanceCreation@@OperationFormatException[e.getLocalizedMessage()] @AT@ 2815 @LENGTH@ 24
------------INS MethodInvocation@@e.getLocalizedMessage() @TO@ ClassInstanceCreation@@OperationFormatException[e.getLocalizedMessage()] @AT@ 2840 @LENGTH@ 23
---------------INS SimpleName@@Name:e @TO@ MethodInvocation@@e.getLocalizedMessage() @AT@ 2840 @LENGTH@ 1
---------------INS SimpleName@@MethodName:getLocalizedMessage:[] @TO@ MethodInvocation@@e.getLocalizedMessage() @AT@ 2842 @LENGTH@ 21


UPD MethodDeclaration@@public, void, MethodName:threeSecondWriteOperation,  @TO@ public, void, MethodName:fiveSecondWriteOperation,  @AT@ 1563 @LENGTH@ 207
---UPD SimpleName@@MethodName:threeSecondWriteOperation @TO@ MethodName:fiveSecondWriteOperation @AT@ 1575 @LENGTH@ 25
---UPD TryStatement@@try {  Thread.sleep(3000);} catch (InterruptedException e) {  throw new RuntimeException(e);} @TO@ try {  Thread.sleep(5000);} catch (InterruptedException e) {  throw new RuntimeException(e);} @AT@ 1613 @LENGTH@ 133
------UPD ExpressionStatement@@MethodInvocation:Thread.sleep(3000) @TO@ MethodInvocation:Thread.sleep(5000) @AT@ 1631 @LENGTH@ 19
---------UPD MethodInvocation@@Thread.sleep(3000) @TO@ Thread.sleep(5000) @AT@ 1631 @LENGTH@ 18
------------UPD SimpleName@@MethodName:sleep:[3000] @TO@ MethodName:sleep:[5000] @AT@ 1638 @LENGTH@ 11
---------------UPD NumberLiteral@@3000 @TO@ 5000 @AT@ 1644 @LENGTH@ 4


UPD TypeDeclaration@@ReloadThread, Thread @TO@ TestDeadlockReloadThread, Thread @AT@ 24408 @LENGTH@ 606
---UPD SimpleName@@ClassName:ReloadThread @TO@ ClassName:TestDeadlockReloadThread @AT@ 24408 @LENGTH@ 12


INS FieldDeclaration@@public, static, final, int, [STRUCTURE_JDBC_DRIVER=0x0150] @TO@ EnumDeclaration@@[public]Phase,  @AT@ 6460 @LENGTH@ 77
---INS Modifier@@public @TO@ FieldDeclaration@@public, static, final, int, [STRUCTURE_JDBC_DRIVER=0x0150] @AT@ 6460 @LENGTH@ 6
---INS Modifier@@static @TO@ FieldDeclaration@@public, static, final, int, [STRUCTURE_JDBC_DRIVER=0x0150] @AT@ 6467 @LENGTH@ 6
---INS Modifier@@final @TO@ FieldDeclaration@@public, static, final, int, [STRUCTURE_JDBC_DRIVER=0x0150] @AT@ 6474 @LENGTH@ 5
---INS PrimitiveType@@int @TO@ FieldDeclaration@@public, static, final, int, [STRUCTURE_JDBC_DRIVER=0x0150] @AT@ 6480 @LENGTH@ 3
---INS VariableDeclarationFragment@@STRUCTURE_JDBC_DRIVER=0x0150 @TO@ FieldDeclaration@@public, static, final, int, [STRUCTURE_JDBC_DRIVER=0x0150] @AT@ 6484 @LENGTH@ 52
------INS SimpleName@@STRUCTURE_JDBC_DRIVER @TO@ VariableDeclarationFragment@@STRUCTURE_JDBC_DRIVER=0x0150 @AT@ 6484 @LENGTH@ 21
------INS NumberLiteral@@0x0150 @TO@ VariableDeclarationFragment@@STRUCTURE_JDBC_DRIVER=0x0150 @AT@ 6530 @LENGTH@ 6


UPD MethodDeclaration@@protected, void, MethodName:doHandle, CommandContext ctx,  @TO@ protected, void, MethodName:doHandle, CommandContext ctx, CommandFormatException,  @AT@ 1946 @LENGTH@ 583
---INS SimpleType@@CommandFormatException @TO@ MethodDeclaration@@protected, void, MethodName:doHandle, CommandContext ctx,  @AT@ 2045 @LENGTH@ 22


UPD IfStatement@@if (address.length > 0) {  for (  String addr : address) {    operation.get(ADDRESS).add(addr);  }} else {  operation.get(ADDRESS).setEmptyList();} @TO@ if (address.length > 0) {  for (  String addr : address) {    operation.get(OP_ADDR).add(addr);  }} else {  operation.get(OP_ADDR).setEmptyList();} @AT@ 36894 @LENGTH@ 209
---UPD Block@@ThenBody:{  for (  String addr : address) {    operation.get(ADDRESS).add(addr);  }} @TO@ ThenBody:{  for (  String addr : address) {    operation.get(OP_ADDR).add(addr);  }} @AT@ 36918 @LENGTH@ 117
------UPD EnhancedForStatement@@for (String addr : address) {  operation.get(ADDRESS).add(addr);} @TO@ for (String addr : address) {  operation.get(OP_ADDR).add(addr);} @AT@ 36932 @LENGTH@ 93
---------UPD ExpressionStatement@@MethodInvocation:operation.get(ADDRESS).add(addr) @TO@ MethodInvocation:operation.get(OP_ADDR).add(addr) @AT@ 36978 @LENGTH@ 33
------------UPD MethodInvocation@@operation.get(ADDRESS).add(addr) @TO@ operation.get(OP_ADDR).add(addr) @AT@ 36978 @LENGTH@ 32
---------------UPD MethodInvocation@@MethodName:get:[ADDRESS] @TO@ MethodName:get:[OP_ADDR] @AT@ 36978 @LENGTH@ 22
------------------UPD SimpleName@@ADDRESS @TO@ OP_ADDR @AT@ 36992 @LENGTH@ 7
---UPD Block@@ElseBody:{  operation.get(ADDRESS).setEmptyList();} @TO@ ElseBody:{  operation.get(OP_ADDR).setEmptyList();} @AT@ 37041 @LENGTH@ 62
------UPD ExpressionStatement@@MethodInvocation:operation.get(ADDRESS).setEmptyList() @TO@ MethodInvocation:operation.get(OP_ADDR).setEmptyList() @AT@ 37055 @LENGTH@ 38
---------UPD MethodInvocation@@operation.get(ADDRESS).setEmptyList() @TO@ operation.get(OP_ADDR).setEmptyList() @AT@ 37055 @LENGTH@ 37
------------UPD MethodInvocation@@MethodName:get:[ADDRESS] @TO@ MethodName:get:[OP_ADDR] @AT@ 37055 @LENGTH@ 22
---------------UPD SimpleName@@ADDRESS @TO@ OP_ADDR @AT@ 37069 @LENGTH@ 7


INS IfStatement@@if (isRunning()) {  if (!listening) {synchronized (monitor) {      if (!listening) {        if (channelMapping.size() > 0 || patternMapping.size() > 0) {          subscriptionExecutor.execute(subscriptionTask);          listening=true;          started=true;        }      } else {        listening=false;      }    }    if (debug) {      if (started) {        log.debug("Started listening for Redis messages");      } else {        log.debug("Postpone listening for Redis messages until actual listeners are added");      }    }  }} @TO@ MethodDeclaration@@private, void, MethodName:lazyListen,  @AT@ 9954 @LENGTH@ 554
---INS MethodInvocation@@MethodName:isRunning:[] @TO@ IfStatement@@if (isRunning()) {  if (!listening) {synchronized (monitor) {      if (!listening) {        if (channelMapping.size() > 0 || patternMapping.size() > 0) {          subscriptionExecutor.execute(subscriptionTask);          listening=true;          started=true;        }      } else {        listening=false;      }    }    if (debug) {      if (started) {        log.debug("Started listening for Redis messages");      } else {        log.debug("Postpone listening for Redis messages until actual listeners are added");      }    }  }} @AT@ 9958 @LENGTH@ 11
---INS Block@@ThenBody:{  if (!listening) {synchronized (monitor) {      if (!listening) {        if (channelMapping.size() > 0 || patternMapping.size() > 0) {          subscriptionExecutor.execute(subscriptionTask);          listening=true;          started=true;        }      } else {        listening=false;      }    }    if (debug) {      if (started) {        log.debug("Started listening for Redis messages");      } else {        log.debug("Postpone listening for Redis messages until actual listeners are added");      }    }  }} @TO@ IfStatement@@if (isRunning()) {  if (!listening) {synchronized (monitor) {      if (!listening) {        if (channelMapping.size() > 0 || patternMapping.size() > 0) {          subscriptionExecutor.execute(subscriptionTask);          listening=true;          started=true;        }      } else {        listening=false;      }    }    if (debug) {      if (started) {        log.debug("Started listening for Redis messages");      } else {        log.debug("Postpone listening for Redis messages until actual listeners are added");      }    }  }} @AT@ 9971 @LENGTH@ 537
------MOV IfStatement@@if (!listening) {synchronized (monitor) {    if (!listening) {      if (channelMapping.size() > 0 || patternMapping.size() > 0) {        subscriptionExecutor.execute(subscriptionTask);        listening=true;        started=true;      }    } else {      listening=false;    }  }  if (debug) {    if (started) {      log.debug("Started listening for Redis messages");    } else {      log.debug("Postpone listening for Redis messages until actual listeners are added");    }  }} @TO@ Block@@ThenBody:{  if (!listening) {synchronized (monitor) {      if (!listening) {        if (channelMapping.size() > 0 || patternMapping.size() > 0) {          subscriptionExecutor.execute(subscriptionTask);          listening=true;          started=true;        }      } else {        listening=false;      }    }    if (debug) {      if (started) {        log.debug("Started listening for Redis messages");      } else {        log.debug("Postpone listening for Redis messages until actual listeners are added");      }    }  }} @AT@ 9928 @LENGTH@ 507


INS MethodDeclaration@@public, void, MethodName:setUp, Exception,  @TO@ TypeDeclaration@@[public]HazelcastListProducerTest, CamelTestSupport @AT@ 1203 @LENGTH@ 131
---INS Modifier@@public @TO@ MethodDeclaration@@public, void, MethodName:setUp, Exception,  @AT@ 1203 @LENGTH@ 6
---INS PrimitiveType@@void @TO@ MethodDeclaration@@public, void, MethodName:setUp, Exception,  @AT@ 1210 @LENGTH@ 4
---INS SimpleName@@MethodName:setUp @TO@ MethodDeclaration@@public, void, MethodName:setUp, Exception,  @AT@ 1215 @LENGTH@ 5
---INS SimpleType@@Exception @TO@ MethodDeclaration@@public, void, MethodName:setUp, Exception,  @AT@ 1230 @LENGTH@ 9
---INS ExpressionStatement@@Assignment:list=Hazelcast.getList("bar") @TO@ MethodDeclaration@@public, void, MethodName:setUp, Exception,  @AT@ 1250 @LENGTH@ 32
------INS Assignment@@list=Hazelcast.getList("bar") @TO@ ExpressionStatement@@Assignment:list=Hazelcast.getList("bar") @AT@ 1250 @LENGTH@ 31
---------INS SimpleName@@list @TO@ Assignment@@list=Hazelcast.getList("bar") @AT@ 1250 @LENGTH@ 4
---------INS Operator@@= @TO@ Assignment@@list=Hazelcast.getList("bar") @AT@ 1254 @LENGTH@ 1
---------INS MethodInvocation@@Hazelcast.getList("bar") @TO@ Assignment@@list=Hazelcast.getList("bar") @AT@ 1257 @LENGTH@ 24
------------INS SimpleName@@Name:Hazelcast @TO@ MethodInvocation@@Hazelcast.getList("bar") @AT@ 1257 @LENGTH@ 9
------------INS SimpleName@@MethodName:getList:["bar"] @TO@ MethodInvocation@@Hazelcast.getList("bar") @AT@ 1267 @LENGTH@ 14
---------------INS StringLiteral@@"bar" @TO@ SimpleName@@MethodName:getList:["bar"] @AT@ 1275 @LENGTH@ 5
---INS ExpressionStatement@@MethodInvocation:list.clear() @TO@ MethodDeclaration@@public, void, MethodName:setUp, Exception,  @AT@ 1291 @LENGTH@ 13
------INS MethodInvocation@@list.clear() @TO@ ExpressionStatement@@MethodInvocation:list.clear() @AT@ 1291 @LENGTH@ 12
---------INS SimpleName@@Name:list @TO@ MethodInvocation@@list.clear() @AT@ 1291 @LENGTH@ 4
---------INS SimpleName@@MethodName:clear:[] @TO@ MethodInvocation@@list.clear() @AT@ 1296 @LENGTH@ 7
---INS ExpressionStatement@@SuperMethodInvocation:super.setUp() @TO@ MethodDeclaration@@public, void, MethodName:setUp, Exception,  @AT@ 1314 @LENGTH@ 14
------INS SuperMethodInvocation@@super.setUp() @TO@ ExpressionStatement@@SuperMethodInvocation:super.setUp() @AT@ 1314 @LENGTH@ 13
---------INS SimpleName@@MethodName:setUp:[] @TO@ SuperMethodInvocation@@super.setUp() @AT@ 1320 @LENGTH@ 5


UPD VariableDeclarationStatement@@final Module module=context.getAttachment(Attachments.MODULE); @TO@ final ModuleIdentifier identifier=context.getAttachment(Attachments.MODULE_IDENTIFIER); @AT@ 7393 @LENGTH@ 64
---UPD SimpleType@@Module @TO@ ModuleIdentifier @AT@ 7399 @LENGTH@ 6
---UPD VariableDeclarationFragment@@module=context.getAttachment(Attachments.MODULE) @TO@ identifier=context.getAttachment(Attachments.MODULE_IDENTIFIER) @AT@ 7406 @LENGTH@ 50
------UPD SimpleName@@module @TO@ identifier @AT@ 7406 @LENGTH@ 6
------UPD MethodInvocation@@context.getAttachment(Attachments.MODULE) @TO@ context.getAttachment(Attachments.MODULE_IDENTIFIER) @AT@ 7415 @LENGTH@ 41
---------UPD SimpleName@@MethodName:getAttachment:[Attachments.MODULE] @TO@ MethodName:getAttachment:[Attachments.MODULE_IDENTIFIER] @AT@ 7423 @LENGTH@ 33
------------UPD QualifiedName@@Attachments.MODULE @TO@ Attachments.MODULE_IDENTIFIER @AT@ 7437 @LENGTH@ 18
---------------UPD SimpleName@@MODULE @TO@ MODULE_IDENTIFIER @AT@ 7449 @LENGTH@ 6


UPD ExpressionStatement@@MethodInvocation:writeAttribute(writer,Attribute.FIXED_PORT,attr.asString()) @TO@ MethodInvocation:writeAttribute(writer,Attribute.MULTICAST_PORT,attr.asString()) @AT@ 62991 @LENGTH@ 62
---UPD MethodInvocation@@writeAttribute(writer,Attribute.FIXED_PORT,attr.asString()) @TO@ writeAttribute(writer,Attribute.MULTICAST_PORT,attr.asString()) @AT@ 62991 @LENGTH@ 61
------UPD SimpleName@@MethodName:writeAttribute:[writer, Attribute.FIXED_PORT, attr.asString()] @TO@ MethodName:writeAttribute:[writer, Attribute.MULTICAST_PORT, attr.asString()] @AT@ 62991 @LENGTH@ 61
---------UPD QualifiedName@@Attribute.FIXED_PORT @TO@ Attribute.MULTICAST_PORT @AT@ 63014 @LENGTH@ 20
------------UPD SimpleName@@FIXED_PORT @TO@ MULTICAST_PORT @AT@ 63024 @LENGTH@ 10


UPD TryStatement@@try {  Package spring=Package.getPackage(packageName);  if (spring != null) {    String value=spring.getImplementationVersion();    if (value != null) {      int idx=value.indexOf('.');      if (idx >= 0) {        StringBuilder buffer=new StringBuilder(value.substring(0,++idx));        int i=idx;        for (int size=value.length(); i < size; i++) {          char ch=value.charAt(i);          if (Character.isDigit(ch)) {            buffer.append(ch);          }        }        value=buffer.toString();      }      double number=Double.parseDouble(value);      return number >= minimumVersion;    }  }} catch (Exception e) {  LOG.debug("Failed to find out " + packageName + " version: "+ e,e);} @TO@ try {  Package spring=Package.getPackage(packageName);  if (spring != null) {    String value=spring.getImplementationVersion();    if (value != null) {      int idx=value.indexOf('.');      if (idx >= 0) {        StringBuilder buffer=new StringBuilder(value.substring(0,++idx));        int i=idx;        for (int size=value.length(); i < size; i++) {          char ch=value.charAt(i);          if (Character.isDigit(ch)) {            buffer.append(ch);          }        }        value=buffer.toString();      }      if (ObjectHelper.isNotEmpty(value)) {        double number=Double.parseDouble(value);        return number >= minimumVersion;      } else {        LOG.debug("Failed to find out version from package: " + packageName);      }    }  }} catch (Exception e) {  if (LOG.isDebugEnabled()) {    LOG.debug("Failed to find out version from package: " + packageName,e);  }} @AT@ 1914 @LENGTH@ 1124
---UPD IfStatement@@if (spring != null) {  String value=spring.getImplementationVersion();  if (value != null) {    int idx=value.indexOf('.');    if (idx >= 0) {      StringBuilder buffer=new StringBuilder(value.substring(0,++idx));      int i=idx;      for (int size=value.length(); i < size; i++) {        char ch=value.charAt(i);        if (Character.isDigit(ch)) {          buffer.append(ch);        }      }      value=buffer.toString();    }    double number=Double.parseDouble(value);    return number >= minimumVersion;  }} @TO@ if (spring != null) {  String value=spring.getImplementationVersion();  if (value != null) {    int idx=value.indexOf('.');    if (idx >= 0) {      StringBuilder buffer=new StringBuilder(value.substring(0,++idx));      int i=idx;      for (int size=value.length(); i < size; i++) {        char ch=value.charAt(i);        if (Character.isDigit(ch)) {          buffer.append(ch);        }      }      value=buffer.toString();    }    if (ObjectHelper.isNotEmpty(value)) {      double number=Double.parseDouble(value);      return number >= minimumVersion;    } else {      LOG.debug("Failed to find out version from package: " + packageName);    }  }} @AT@ 1994 @LENGTH@ 920
------UPD Block@@ThenBody:{  String value=spring.getImplementationVersion();  if (value != null) {    int idx=value.indexOf('.');    if (idx >= 0) {      StringBuilder buffer=new StringBuilder(value.substring(0,++idx));      int i=idx;      for (int size=value.length(); i < size; i++) {        char ch=value.charAt(i);        if (Character.isDigit(ch)) {          buffer.append(ch);        }      }      value=buffer.toString();    }    double number=Double.parseDouble(value);    return number >= minimumVersion;  }} @TO@ ThenBody:{  String value=spring.getImplementationVersion();  if (value != null) {    int idx=value.indexOf('.');    if (idx >= 0) {      StringBuilder buffer=new StringBuilder(value.substring(0,++idx));      int i=idx;      for (int size=value.length(); i < size; i++) {        char ch=value.charAt(i);        if (Character.isDigit(ch)) {          buffer.append(ch);        }      }      value=buffer.toString();    }    if (ObjectHelper.isNotEmpty(value)) {      double number=Double.parseDouble(value);      return number >= minimumVersion;    } else {      LOG.debug("Failed to find out version from package: " + packageName);    }  }} @AT@ 2014 @LENGTH@ 900
---------UPD IfStatement@@if (value != null) {  int idx=value.indexOf('.');  if (idx >= 0) {    StringBuilder buffer=new StringBuilder(value.substring(0,++idx));    int i=idx;    for (int size=value.length(); i < size; i++) {      char ch=value.charAt(i);      if (Character.isDigit(ch)) {        buffer.append(ch);      }    }    value=buffer.toString();  }  double number=Double.parseDouble(value);  return number >= minimumVersion;} @TO@ if (value != null) {  int idx=value.indexOf('.');  if (idx >= 0) {    StringBuilder buffer=new StringBuilder(value.substring(0,++idx));    int i=idx;    for (int size=value.length(); i < size; i++) {      char ch=value.charAt(i);      if (Character.isDigit(ch)) {        buffer.append(ch);      }    }    value=buffer.toString();  }  if (ObjectHelper.isNotEmpty(value)) {    double number=Double.parseDouble(value);    return number >= minimumVersion;  } else {    LOG.debug("Failed to find out version from package: " + packageName);  }} @AT@ 2098 @LENGTH@ 802
------------UPD Block@@ThenBody:{  int idx=value.indexOf('.');  if (idx >= 0) {    StringBuilder buffer=new StringBuilder(value.substring(0,++idx));    int i=idx;    for (int size=value.length(); i < size; i++) {      char ch=value.charAt(i);      if (Character.isDigit(ch)) {        buffer.append(ch);      }    }    value=buffer.toString();  }  double number=Double.parseDouble(value);  return number >= minimumVersion;} @TO@ ThenBody:{  int idx=value.indexOf('.');  if (idx >= 0) {    StringBuilder buffer=new StringBuilder(value.substring(0,++idx));    int i=idx;    for (int size=value.length(); i < size; i++) {      char ch=value.charAt(i);      if (Character.isDigit(ch)) {        buffer.append(ch);      }    }    value=buffer.toString();  }  if (ObjectHelper.isNotEmpty(value)) {    double number=Double.parseDouble(value);    return number >= minimumVersion;  } else {    LOG.debug("Failed to find out version from package: " + packageName);  }} @AT@ 2117 @LENGTH@ 783
---------------INS IfStatement@@if (ObjectHelper.isNotEmpty(value)) {  double number=Double.parseDouble(value);  return number >= minimumVersion;} else {  LOG.debug("Failed to find out version from package: " + packageName);} @TO@ Block@@ThenBody:{  int idx=value.indexOf('.');  if (idx >= 0) {    StringBuilder buffer=new StringBuilder(value.substring(0,++idx));    int i=idx;    for (int size=value.length(); i < size; i++) {      char ch=value.charAt(i);      if (Character.isDigit(ch)) {        buffer.append(ch);      }    }    value=buffer.toString();  }  double number=Double.parseDouble(value);  return number >= minimumVersion;} @AT@ 2788 @LENGTH@ 306
------------------INS MethodInvocation@@ObjectHelper.isNotEmpty(value) @TO@ IfStatement@@if (ObjectHelper.isNotEmpty(value)) {  double number=Double.parseDouble(value);  return number >= minimumVersion;} else {  LOG.debug("Failed to find out version from package: " + packageName);} @AT@ 2792 @LENGTH@ 30
---------------------INS SimpleName@@Name:ObjectHelper @TO@ MethodInvocation@@ObjectHelper.isNotEmpty(value) @AT@ 2792 @LENGTH@ 12
---------------------INS SimpleName@@MethodName:isNotEmpty:[value] @TO@ MethodInvocation@@ObjectHelper.isNotEmpty(value) @AT@ 2805 @LENGTH@ 17
------------------------INS SimpleName@@value @TO@ SimpleName@@MethodName:isNotEmpty:[value] @AT@ 2816 @LENGTH@ 5
------------------INS Block@@ThenBody:{  double number=Double.parseDouble(value);  return number >= minimumVersion;} @TO@ IfStatement@@if (ObjectHelper.isNotEmpty(value)) {  double number=Double.parseDouble(value);  return number >= minimumVersion;} else {  LOG.debug("Failed to find out version from package: " + packageName);} @AT@ 2824 @LENGTH@ 147
---------------------MOV VariableDeclarationStatement@@double number=Double.parseDouble(value); @TO@ Block@@ThenBody:{  double number=Double.parseDouble(value);  return number >= minimumVersion;} @AT@ 2787 @LENGTH@ 42
---------------------MOV ReturnStatement@@InfixExpression:number >= minimumVersion @TO@ Block@@ThenBody:{  double number=Double.parseDouble(value);  return number >= minimumVersion;} @AT@ 2850 @LENGTH@ 32
------------------INS Block@@ElseBody:{  LOG.debug("Failed to find out version from package: " + packageName);} @TO@ IfStatement@@if (ObjectHelper.isNotEmpty(value)) {  double number=Double.parseDouble(value);  return number >= minimumVersion;} else {  LOG.debug("Failed to find out version from package: " + packageName);} @AT@ 2977 @LENGTH@ 117
---------------------INS ExpressionStatement@@MethodInvocation:LOG.debug("Failed to find out version from package: " + packageName) @TO@ Block@@ElseBody:{  LOG.debug("Failed to find out version from package: " + packageName);} @AT@ 3003 @LENGTH@ 69
------------------------INS MethodInvocation@@LOG.debug("Failed to find out version from package: " + packageName) @TO@ ExpressionStatement@@MethodInvocation:LOG.debug("Failed to find out version from package: " + packageName) @AT@ 3003 @LENGTH@ 68
---------------------------INS SimpleName@@Name:LOG @TO@ MethodInvocation@@LOG.debug("Failed to find out version from package: " + packageName) @AT@ 3003 @LENGTH@ 3
---------------------------INS SimpleName@@MethodName:debug:["Failed to find out version from package: " + packageName] @TO@ MethodInvocation@@LOG.debug("Failed to find out version from package: " + packageName) @AT@ 3007 @LENGTH@ 64
------------------------------INS InfixExpression@@"Failed to find out version from package: " + packageName @TO@ SimpleName@@MethodName:debug:["Failed to find out version from package: " + packageName] @AT@ 3013 @LENGTH@ 57
---------------------------------INS StringLiteral@@"Failed to find out version from package: " @TO@ InfixExpression@@"Failed to find out version from package: " + packageName @AT@ 3013 @LENGTH@ 43
---------------------------------INS Operator@@+ @TO@ InfixExpression@@"Failed to find out version from package: " + packageName @AT@ 3056 @LENGTH@ 1
---------------------------------INS SimpleName@@packageName @TO@ InfixExpression@@"Failed to find out version from package: " + packageName @AT@ 3059 @LENGTH@ 11
---UPD CatchClause@@catch (Exception e) {  LOG.debug("Failed to find out " + packageName + " version: "+ e,e);} @TO@ catch (Exception e) {  if (LOG.isDebugEnabled()) {    LOG.debug("Failed to find out version from package: " + packageName,e);  }} @AT@ 2925 @LENGTH@ 113
------DEL ExpressionStatement@@MethodInvocation:LOG.debug("Failed to find out " + packageName + " version: "+ e,e) @AT@ 2959 @LENGTH@ 69
------INS IfStatement@@if (LOG.isDebugEnabled()) {  LOG.debug("Failed to find out version from package: " + packageName,e);} @TO@ CatchClause@@catch (Exception e) {  LOG.debug("Failed to find out " + packageName + " version: "+ e,e);} @AT@ 3171 @LENGTH@ 130
---------INS MethodInvocation@@LOG.isDebugEnabled() @TO@ IfStatement@@if (LOG.isDebugEnabled()) {  LOG.debug("Failed to find out version from package: " + packageName,e);} @AT@ 3175 @LENGTH@ 20
------------INS SimpleName@@Name:LOG @TO@ MethodInvocation@@LOG.isDebugEnabled() @AT@ 3175 @LENGTH@ 3
------------INS SimpleName@@MethodName:isDebugEnabled:[] @TO@ MethodInvocation@@LOG.isDebugEnabled() @AT@ 3179 @LENGTH@ 16
---------INS Block@@ThenBody:{  LOG.debug("Failed to find out version from package: " + packageName,e);} @TO@ IfStatement@@if (LOG.isDebugEnabled()) {  LOG.debug("Failed to find out version from package: " + packageName,e);} @AT@ 3197 @LENGTH@ 104
------------INS ExpressionStatement@@MethodInvocation:LOG.debug("Failed to find out version from package: " + packageName,e) @TO@ Block@@ThenBody:{  LOG.debug("Failed to find out version from package: " + packageName,e);} @AT@ 3215 @LENGTH@ 72
---------------MOV MethodInvocation@@LOG.debug("Failed to find out " + packageName + " version: "+ e,e) @TO@ ExpressionStatement@@MethodInvocation:LOG.debug("Failed to find out version from package: " + packageName,e) @AT@ 2959 @LENGTH@ 68
------------------UPD SimpleName@@MethodName:debug:["Failed to find out " + packageName + " version: "+ e, e] @TO@ MethodName:debug:["Failed to find out version from package: " + packageName, e] @AT@ 2963 @LENGTH@ 64
---------------------UPD InfixExpression@@"Failed to find out " + packageName + " version: "+ e @TO@ "Failed to find out version from package: " + packageName @AT@ 2969 @LENGTH@ 54
------------------------UPD StringLiteral@@"Failed to find out " @TO@ "Failed to find out version from package: " @AT@ 2969 @LENGTH@ 21
------------------------DEL StringLiteral@@" version: " @AT@ 3007 @LENGTH@ 12
------------------------DEL SimpleName@@e @AT@ 3022 @LENGTH@ 1


UPD SwitchStatement@@switch (element) {case WEBSERVICE_HOST:{    configuration.get(WEBSERVICE_HOST).set(parseElementNoAttributes(reader));    break;  }case MODIFY_SOAP_ADDRESS:{  configuration.get(MODIFY_SOAP_ADDRESS).set(parseElementNoAttributes(reader));  break;}case WEBSERVICE_SECURE_PORT:{configuration.get(WEBSERVICE_SECURE_PORT).set(parseElementNoAttributes(reader));break;}case WEBSERVICE_PORT:{configuration.get(WEBSERVICE_PORT).set(parseElementNoAttributes(reader));break;}default :{throw unexpectedElement(reader);}} @TO@ switch (element) {case WEBSERVICE_HOST:{    configuration.get(WEBSERVICE_HOST).set(parseElementNoAttributes(reader));    break;  }case MODIFY_SOAP_ADDRESS:{  boolean b=Boolean.parseBoolean(parseElementNoAttributes(reader));  configuration.get(MODIFY_SOAP_ADDRESS).set(b);  break;}case WEBSERVICE_SECURE_PORT:{int port=Integer.valueOf(parseElementNoAttributes(reader));configuration.get(WEBSERVICE_SECURE_PORT).set(port);break;}case WEBSERVICE_PORT:{int port=Integer.valueOf(parseElementNoAttributes(reader));configuration.get(WEBSERVICE_PORT).set(port);break;}default :{throw unexpectedElement(reader);}} @AT@ 8467 @LENGTH@ 1108
---UPD ExpressionStatement@@MethodInvocation:configuration.get(MODIFY_SOAP_ADDRESS).set(parseElementNoAttributes(reader)) @TO@ MethodInvocation:configuration.get(MODIFY_SOAP_ADDRESS).set(b) @AT@ 8801 @LENGTH@ 77
------UPD MethodInvocation@@configuration.get(MODIFY_SOAP_ADDRESS).set(parseElementNoAttributes(reader)) @TO@ Boolean.parseBoolean(parseElementNoAttributes(reader)) @AT@ 8801 @LENGTH@ 76
------INS MethodInvocation@@configuration.get(MODIFY_SOAP_ADDRESS).set(b) @TO@ ExpressionStatement@@MethodInvocation:configuration.get(MODIFY_SOAP_ADDRESS).set(parseElementNoAttributes(reader)) @AT@ 8901 @LENGTH@ 45
---------INS MethodInvocation@@MethodName:get:[MODIFY_SOAP_ADDRESS] @TO@ MethodInvocation@@configuration.get(MODIFY_SOAP_ADDRESS).set(b) @AT@ 8901 @LENGTH@ 38
------------INS SimpleName@@MODIFY_SOAP_ADDRESS @TO@ MethodInvocation@@MethodName:get:[MODIFY_SOAP_ADDRESS] @AT@ 8919 @LENGTH@ 19
---------INS SimpleName@@Name:configuration @TO@ MethodInvocation@@configuration.get(MODIFY_SOAP_ADDRESS).set(b) @AT@ 8901 @LENGTH@ 13
---------INS SimpleName@@MethodName:set:[b] @TO@ MethodInvocation@@configuration.get(MODIFY_SOAP_ADDRESS).set(b) @AT@ 8940 @LENGTH@ 6
------------INS SimpleName@@b @TO@ SimpleName@@MethodName:set:[b] @AT@ 8944 @LENGTH@ 1
---INS VariableDeclarationStatement@@boolean b=Boolean.parseBoolean(parseElementNoAttributes(reader)); @TO@ SwitchStatement@@switch (element) {case WEBSERVICE_HOST:{    configuration.get(WEBSERVICE_HOST).set(parseElementNoAttributes(reader));    break;  }case MODIFY_SOAP_ADDRESS:{  configuration.get(MODIFY_SOAP_ADDRESS).set(parseElementNoAttributes(reader));  break;}case WEBSERVICE_SECURE_PORT:{configuration.get(WEBSERVICE_SECURE_PORT).set(parseElementNoAttributes(reader));break;}case WEBSERVICE_PORT:{configuration.get(WEBSERVICE_PORT).set(parseElementNoAttributes(reader));break;}default :{throw unexpectedElement(reader);}} @AT@ 8801 @LENGTH@ 67
------INS PrimitiveType@@boolean @TO@ VariableDeclarationStatement@@boolean b=Boolean.parseBoolean(parseElementNoAttributes(reader)); @AT@ 8801 @LENGTH@ 7
------INS VariableDeclarationFragment@@b=Boolean.parseBoolean(parseElementNoAttributes(reader)) @TO@ VariableDeclarationStatement@@boolean b=Boolean.parseBoolean(parseElementNoAttributes(reader)); @AT@ 8809 @LENGTH@ 58
---------MOV MethodInvocation@@configuration.get(MODIFY_SOAP_ADDRESS).set(parseElementNoAttributes(reader)) @TO@ VariableDeclarationFragment@@b=Boolean.parseBoolean(parseElementNoAttributes(reader)) @AT@ 8801 @LENGTH@ 76
------------DEL MethodInvocation@@MethodName:get:[MODIFY_SOAP_ADDRESS] @AT@ 8801 @LENGTH@ 38
---------------DEL SimpleName@@MODIFY_SOAP_ADDRESS @AT@ 8819 @LENGTH@ 19
------------UPD SimpleName@@Name:configuration @TO@ Name:Boolean @AT@ 8801 @LENGTH@ 13
------------UPD SimpleName@@MethodName:set:[parseElementNoAttributes(reader)] @TO@ MethodName:parseBoolean:[parseElementNoAttributes(reader)] @AT@ 8840 @LENGTH@ 37
---------INS SimpleName@@b @TO@ VariableDeclarationFragment@@b=Boolean.parseBoolean(parseElementNoAttributes(reader)) @AT@ 8809 @LENGTH@ 1
---UPD ExpressionStatement@@MethodInvocation:configuration.get(WEBSERVICE_SECURE_PORT).set(parseElementNoAttributes(reader)) @TO@ MethodInvocation:configuration.get(WEBSERVICE_SECURE_PORT).set(port) @AT@ 9039 @LENGTH@ 80
------UPD MethodInvocation@@configuration.get(WEBSERVICE_SECURE_PORT).set(parseElementNoAttributes(reader)) @TO@ Integer.valueOf(parseElementNoAttributes(reader)) @AT@ 9039 @LENGTH@ 79
------INS MethodInvocation@@configuration.get(WEBSERVICE_SECURE_PORT).set(port) @TO@ ExpressionStatement@@MethodInvocation:configuration.get(WEBSERVICE_SECURE_PORT).set(parseElementNoAttributes(reader)) @AT@ 9202 @LENGTH@ 51
---------INS MethodInvocation@@MethodName:get:[WEBSERVICE_SECURE_PORT] @TO@ MethodInvocation@@configuration.get(WEBSERVICE_SECURE_PORT).set(port) @AT@ 9202 @LENGTH@ 41
------------INS SimpleName@@WEBSERVICE_SECURE_PORT @TO@ MethodInvocation@@MethodName:get:[WEBSERVICE_SECURE_PORT] @AT@ 9220 @LENGTH@ 22
---------INS SimpleName@@Name:configuration @TO@ MethodInvocation@@configuration.get(WEBSERVICE_SECURE_PORT).set(port) @AT@ 9202 @LENGTH@ 13
---------INS SimpleName@@MethodName:set:[port] @TO@ MethodInvocation@@configuration.get(WEBSERVICE_SECURE_PORT).set(port) @AT@ 9244 @LENGTH@ 9
------------INS SimpleName@@port @TO@ SimpleName@@MethodName:set:[port] @AT@ 9248 @LENGTH@ 4
---INS VariableDeclarationStatement@@int port=Integer.valueOf(parseElementNoAttributes(reader)); @TO@ SwitchStatement@@switch (element) {case WEBSERVICE_HOST:{    configuration.get(WEBSERVICE_HOST).set(parseElementNoAttributes(reader));    break;  }case MODIFY_SOAP_ADDRESS:{  configuration.get(MODIFY_SOAP_ADDRESS).set(parseElementNoAttributes(reader));  break;}case WEBSERVICE_SECURE_PORT:{configuration.get(WEBSERVICE_SECURE_PORT).set(parseElementNoAttributes(reader));break;}case WEBSERVICE_PORT:{configuration.get(WEBSERVICE_PORT).set(parseElementNoAttributes(reader));break;}default :{throw unexpectedElement(reader);}} @AT@ 9108 @LENGTH@ 61
------INS PrimitiveType@@int @TO@ VariableDeclarationStatement@@int port=Integer.valueOf(parseElementNoAttributes(reader)); @AT@ 9108 @LENGTH@ 3
------INS VariableDeclarationFragment@@port=Integer.valueOf(parseElementNoAttributes(reader)) @TO@ VariableDeclarationStatement@@int port=Integer.valueOf(parseElementNoAttributes(reader)); @AT@ 9112 @LENGTH@ 56
---------INS SimpleName@@port @TO@ VariableDeclarationFragment@@port=Integer.valueOf(parseElementNoAttributes(reader)) @AT@ 9112 @LENGTH@ 4
---------MOV MethodInvocation@@configuration.get(WEBSERVICE_PORT).set(parseElementNoAttributes(reader)) @TO@ VariableDeclarationFragment@@port=Integer.valueOf(parseElementNoAttributes(reader)) @AT@ 9273 @LENGTH@ 72
---UPD ExpressionStatement@@MethodInvocation:configuration.get(WEBSERVICE_PORT).set(parseElementNoAttributes(reader)) @TO@ MethodInvocation:configuration.get(WEBSERVICE_PORT).set(port) @AT@ 9273 @LENGTH@ 73
------UPD MethodInvocation@@configuration.get(WEBSERVICE_PORT).set(parseElementNoAttributes(reader)) @TO@ Integer.valueOf(parseElementNoAttributes(reader)) @AT@ 9273 @LENGTH@ 72
------INS MethodInvocation@@configuration.get(WEBSERVICE_PORT).set(port) @TO@ ExpressionStatement@@MethodInvocation:configuration.get(WEBSERVICE_PORT).set(parseElementNoAttributes(reader)) @AT@ 9502 @LENGTH@ 44
---------INS MethodInvocation@@MethodName:get:[WEBSERVICE_PORT] @TO@ MethodInvocation@@configuration.get(WEBSERVICE_PORT).set(port) @AT@ 9502 @LENGTH@ 34
------------INS SimpleName@@WEBSERVICE_PORT @TO@ MethodInvocation@@MethodName:get:[WEBSERVICE_PORT] @AT@ 9520 @LENGTH@ 15
---------INS SimpleName@@Name:configuration @TO@ MethodInvocation@@configuration.get(WEBSERVICE_PORT).set(port) @AT@ 9502 @LENGTH@ 13
---------INS SimpleName@@MethodName:set:[port] @TO@ MethodInvocation@@configuration.get(WEBSERVICE_PORT).set(port) @AT@ 9537 @LENGTH@ 9
------------INS SimpleName@@port @TO@ SimpleName@@MethodName:set:[port] @AT@ 9541 @LENGTH@ 4
---INS VariableDeclarationStatement@@int port=Integer.valueOf(parseElementNoAttributes(reader)); @TO@ SwitchStatement@@switch (element) {case WEBSERVICE_HOST:{    configuration.get(WEBSERVICE_HOST).set(parseElementNoAttributes(reader));    break;  }case MODIFY_SOAP_ADDRESS:{  configuration.get(MODIFY_SOAP_ADDRESS).set(parseElementNoAttributes(reader));  break;}case WEBSERVICE_SECURE_PORT:{configuration.get(WEBSERVICE_SECURE_PORT).set(parseElementNoAttributes(reader));break;}case WEBSERVICE_PORT:{configuration.get(WEBSERVICE_PORT).set(parseElementNoAttributes(reader));break;}default :{throw unexpectedElement(reader);}} @AT@ 9408 @LENGTH@ 61
------INS PrimitiveType@@int @TO@ VariableDeclarationStatement@@int port=Integer.valueOf(parseElementNoAttributes(reader)); @AT@ 9408 @LENGTH@ 3
------INS VariableDeclarationFragment@@port=Integer.valueOf(parseElementNoAttributes(reader)) @TO@ VariableDeclarationStatement@@int port=Integer.valueOf(parseElementNoAttributes(reader)); @AT@ 9412 @LENGTH@ 56
---------MOV MethodInvocation@@configuration.get(WEBSERVICE_SECURE_PORT).set(parseElementNoAttributes(reader)) @TO@ VariableDeclarationFragment@@port=Integer.valueOf(parseElementNoAttributes(reader)) @AT@ 9039 @LENGTH@ 79
------------DEL MethodInvocation@@MethodName:get:[WEBSERVICE_SECURE_PORT] @AT@ 9039 @LENGTH@ 41
---------------DEL SimpleName@@WEBSERVICE_SECURE_PORT @AT@ 9057 @LENGTH@ 22
------------UPD SimpleName@@Name:configuration @TO@ Name:Integer @AT@ 9039 @LENGTH@ 13
------------UPD SimpleName@@MethodName:set:[parseElementNoAttributes(reader)] @TO@ MethodName:valueOf:[parseElementNoAttributes(reader)] @AT@ 9081 @LENGTH@ 37
---------INS SimpleName@@port @TO@ VariableDeclarationFragment@@port=Integer.valueOf(parseElementNoAttributes(reader)) @AT@ 9412 @LENGTH@ 4


UPD MethodDeclaration@@private, static, String, MethodName:newEJBContainerName, final DeploymentUnit unit, final AbstractComponentDescription componentDescription,  @TO@ private, static, String, MethodName:newEJBContainerName, final DeploymentUnit unit, final ComponentDescription componentDescription,  @AT@ 5016 @LENGTH@ 429
---UPD SingleVariableDeclaration@@final AbstractComponentDescription componentDescription @TO@ final ComponentDescription componentDescription @AT@ 5085 @LENGTH@ 55
------UPD SimpleType@@AbstractComponentDescription @TO@ ComponentDescription @AT@ 5091 @LENGTH@ 28


UPD TypeDeclaration@@NewResourceAdaptersSubsystemAdd, [ModelAddOperationHandler, RuntimeOperationHandler] @TO@ NewResourceAdaptersSubsystemAdd, [ModelAddOperationHandler, BootOperationHandler] @AT@ 5904 @LENGTH@ 8032
---UPD SimpleType@@RuntimeOperationHandler @TO@ BootOperationHandler @AT@ 5973 @LENGTH@ 23


UPD MethodDeclaration@@public, void, MethodName:setRange, byte[] key, int start, int end,  @TO@ public, void, MethodName:setRange, byte[] key, long start, byte[] value,  @AT@ 9228 @LENGTH@ 95
---UPD SingleVariableDeclaration@@int start @TO@ long start @AT@ 9261 @LENGTH@ 9
------UPD PrimitiveType@@int @TO@ long @AT@ 9261 @LENGTH@ 3
---UPD SingleVariableDeclaration@@int end @TO@ byte[] value @AT@ 9272 @LENGTH@ 7
------DEL PrimitiveType@@int @AT@ 9272 @LENGTH@ 3
------INS ArrayType@@byte[] @TO@ SingleVariableDeclaration@@int end @AT@ 9275 @LENGTH@ 6
---------INS PrimitiveType@@byte @TO@ ArrayType@@byte[] @AT@ 9275 @LENGTH@ 4
------UPD SimpleName@@end @TO@ value @AT@ 9276 @LENGTH@ 3
---UPD ExpressionStatement@@MethodInvocation:delegate.setRange(key,start,end) @TO@ MethodInvocation:delegate.setRange(key,start,value) @AT@ 9285 @LENGTH@ 35
------UPD MethodInvocation@@delegate.setRange(key,start,end) @TO@ delegate.setRange(key,start,value) @AT@ 9285 @LENGTH@ 34
---------UPD SimpleName@@MethodName:setRange:[key, start, end] @TO@ MethodName:setRange:[key, start, value] @AT@ 9294 @LENGTH@ 25
------------UPD SimpleName@@end @TO@ value @AT@ 9315 @LENGTH@ 3


UPD IfStatement@@if (memberHoldingTypeDetails instanceof ClassOrInterfaceTypeDetails) {  for (  AnnotationMetadata annotationMetadata : memberHoldingTypeDetails.getAnnotations()) {    if (annotationMetadata.getAnnotationType().equals(catalystAnnotationType)) {      AnnotationAttributeValue annotationAttributeValue=annotationMetadata.getAttribute(userDefinedNameAttribute);      if (annotationAttributeValue != null) {        return new JavaSymbolName(annotationAttributeValue.getValue().toString() + suffix);      } else {        break;      }    }  }} @TO@ if (memberHoldingTypeDetails instanceof ClassOrInterfaceTypeDetails && !Modifier.isAbstract(memberHoldingTypeDetails.getModifier())) {  for (  AnnotationMetadata annotationMetadata : memberHoldingTypeDetails.getAnnotations()) {    if (annotationMetadata.getAnnotationType().equals(catalystAnnotationType)) {      AnnotationAttributeValue annotationAttributeValue=annotationMetadata.getAttribute(userDefinedNameAttribute);      if (annotationAttributeValue != null) {        return new JavaSymbolName(annotationAttributeValue.getValue().toString() + suffix);      } else {        break;      }    }  }} @AT@ 5402 @LENGTH@ 555
---DEL InstanceofExpression@@memberHoldingTypeDetails instanceof ClassOrInterfaceTypeDetails @AT@ 5406 @LENGTH@ 63
---INS InfixExpression@@memberHoldingTypeDetails instanceof ClassOrInterfaceTypeDetails && !Modifier.isAbstract(memberHoldingTypeDetails.getModifier()) @TO@ IfStatement@@if (memberHoldingTypeDetails instanceof ClassOrInterfaceTypeDetails) {  for (  AnnotationMetadata annotationMetadata : memberHoldingTypeDetails.getAnnotations()) {    if (annotationMetadata.getAnnotationType().equals(catalystAnnotationType)) {      AnnotationAttributeValue annotationAttributeValue=annotationMetadata.getAttribute(userDefinedNameAttribute);      if (annotationAttributeValue != null) {        return new JavaSymbolName(annotationAttributeValue.getValue().toString() + suffix);      } else {        break;      }    }  }} @AT@ 5441 @LENGTH@ 127
------INS InstanceofExpression@@memberHoldingTypeDetails instanceof ClassOrInterfaceTypeDetails @TO@ InfixExpression@@memberHoldingTypeDetails instanceof ClassOrInterfaceTypeDetails && !Modifier.isAbstract(memberHoldingTypeDetails.getModifier()) @AT@ 5441 @LENGTH@ 63
---------MOV SimpleName@@memberHoldingTypeDetails @TO@ InstanceofExpression@@memberHoldingTypeDetails instanceof ClassOrInterfaceTypeDetails @AT@ 5406 @LENGTH@ 24
---------MOV Instanceof@@instanceof @TO@ InstanceofExpression@@memberHoldingTypeDetails instanceof ClassOrInterfaceTypeDetails @AT@ 5431 @LENGTH@ 10
---------MOV SimpleType@@ClassOrInterfaceTypeDetails @TO@ InstanceofExpression@@memberHoldingTypeDetails instanceof ClassOrInterfaceTypeDetails @AT@ 5442 @LENGTH@ 27
------INS Operator@@&& @TO@ InfixExpression@@memberHoldingTypeDetails instanceof ClassOrInterfaceTypeDetails && !Modifier.isAbstract(memberHoldingTypeDetails.getModifier()) @AT@ 5504 @LENGTH@ 2
------INS PrefixExpression@@!Modifier.isAbstract(memberHoldingTypeDetails.getModifier()) @TO@ InfixExpression@@memberHoldingTypeDetails instanceof ClassOrInterfaceTypeDetails && !Modifier.isAbstract(memberHoldingTypeDetails.getModifier()) @AT@ 5508 @LENGTH@ 60
---------INS Operator@@! @TO@ PrefixExpression@@!Modifier.isAbstract(memberHoldingTypeDetails.getModifier()) @AT@ 5508 @LENGTH@ 1
---------INS MethodInvocation@@Modifier.isAbstract(memberHoldingTypeDetails.getModifier()) @TO@ PrefixExpression@@!Modifier.isAbstract(memberHoldingTypeDetails.getModifier()) @AT@ 5509 @LENGTH@ 59
------------INS SimpleName@@Name:Modifier @TO@ MethodInvocation@@Modifier.isAbstract(memberHoldingTypeDetails.getModifier()) @AT@ 5509 @LENGTH@ 8
------------INS SimpleName@@MethodName:isAbstract:[memberHoldingTypeDetails.getModifier()] @TO@ MethodInvocation@@Modifier.isAbstract(memberHoldingTypeDetails.getModifier()) @AT@ 5518 @LENGTH@ 50
---------------INS MethodInvocation@@memberHoldingTypeDetails.getModifier() @TO@ SimpleName@@MethodName:isAbstract:[memberHoldingTypeDetails.getModifier()] @AT@ 5529 @LENGTH@ 38
------------------INS SimpleName@@Name:memberHoldingTypeDetails @TO@ MethodInvocation@@memberHoldingTypeDetails.getModifier() @AT@ 5529 @LENGTH@ 24
------------------INS SimpleName@@MethodName:getModifier:[] @TO@ MethodInvocation@@memberHoldingTypeDetails.getModifier() @AT@ 5554 @LENGTH@ 13


INS MethodDeclaration@@protected, boolean, MethodName:startsWithRoot, String path,  @TO@ TypeDeclaration@@[public]WindowsFilenameTabCompleter, FilenameTabCompleter @AT@ 4522 @LENGTH@ 88
---INS Modifier@@protected @TO@ MethodDeclaration@@protected, boolean, MethodName:startsWithRoot, String path,  @AT@ 4522 @LENGTH@ 9
---INS PrimitiveType@@boolean @TO@ MethodDeclaration@@protected, boolean, MethodName:startsWithRoot, String path,  @AT@ 4532 @LENGTH@ 7
---INS SimpleName@@MethodName:startsWithRoot @TO@ MethodDeclaration@@protected, boolean, MethodName:startsWithRoot, String path,  @AT@ 4540 @LENGTH@ 14
---INS SingleVariableDeclaration@@String path @TO@ MethodDeclaration@@protected, boolean, MethodName:startsWithRoot, String path,  @AT@ 4555 @LENGTH@ 11
------INS SimpleType@@String @TO@ SingleVariableDeclaration@@String path @AT@ 4555 @LENGTH@ 6
------INS SimpleName@@path @TO@ SingleVariableDeclaration@@String path @AT@ 4562 @LENGTH@ 4
---INS ReturnStatement@@MethodInvocation:path.contains(":\\") @TO@ MethodDeclaration@@protected, boolean, MethodName:startsWithRoot, String path,  @AT@ 4577 @LENGTH@ 28
------INS MethodInvocation@@path.contains(":\\") @TO@ ReturnStatement@@MethodInvocation:path.contains(":\\") @AT@ 4584 @LENGTH@ 20
---------INS SimpleName@@Name:path @TO@ MethodInvocation@@path.contains(":\\") @AT@ 4584 @LENGTH@ 4
---------INS SimpleName@@MethodName:contains:[":\\"] @TO@ MethodInvocation@@path.contains(":\\") @AT@ 4589 @LENGTH@ 15
------------INS StringLiteral@@":\\" @TO@ SimpleName@@MethodName:contains:[":\\"] @AT@ 4598 @LENGTH@ 5


UPD EnhancedForStatement@@for (AnnotationInstance instance : instances) {  AnnotationTarget target=instance.target();  if (!(target instanceof ClassInfo)) {    throw new DeploymentUnitProcessingException("The ManagedBean annotation is only allowed at the class level: " + target);  }  final ClassInfo classInfo=(ClassInfo)target;  final String beanClassName=classInfo.name().toString();  final AnnotationValue nameValue=instance.value();  final String beanName=nameValue == null || nameValue.asString().isEmpty() ? beanClassName : nameValue.asString();  final ComponentDescription componentDescription=new ComponentDescription(beanName,beanClassName,moduleDescription,moduleDescription.getOrAddClassByName(beanClassName),deploymentUnit.getServiceName());  ViewDescription viewDescription=new ViewDescription(componentDescription,beanClassName);  viewDescription.getConfigurators().addFirst(new ViewConfigurator(){    public void configure(    final DeploymentPhaseContext context,    final ComponentConfiguration componentConfiguration,    final ViewDescription description,    final ViewConfiguration configuration) throws DeploymentUnitProcessingException {      final Object contextKey=new Object();      configuration.addViewPostConstructInterceptor(new ManagedBeanCreateInterceptorFactory(contextKey),InterceptorOrder.ViewPostConstruct.INSTANCE_CREATE);      final ManagedBeanAssociatingInterceptorFactory associatingInterceptorFactory=new ManagedBeanAssociatingInterceptorFactory(contextKey);      configuration.addViewInterceptor(associatingInterceptorFactory,InterceptorOrder.View.ASSOCIATING_INTERCEPTOR);      configuration.addViewPreDestroyInterceptor(new ManagedBeanDestroyInterceptorFactory(contextKey),InterceptorOrder.ViewPreDestroy.INSTANCE_DESTROY);    }  });  viewDescription.getBindingNames().addAll(Arrays.asList("java:module/" + beanName,"java:app/" + moduleDescription.getModuleName() + "/"+ beanName));  componentDescription.getViews().add(viewDescription);  moduleDescription.addComponent(componentDescription);} @TO@ for (AnnotationInstance instance : instances) {  AnnotationTarget target=instance.target();  if (!(target instanceof ClassInfo)) {    throw new DeploymentUnitProcessingException("The ManagedBean annotation is only allowed at the class level: " + target);  }  final ClassInfo classInfo=(ClassInfo)target;  final String beanClassName=classInfo.name().toString();  final AnnotationValue nameValue=instance.value();  final String beanName=nameValue == null || nameValue.asString().isEmpty() ? beanClassName : nameValue.asString();  final ComponentDescription componentDescription=new ComponentDescription(beanName,beanClassName,moduleDescription,moduleDescription.getOrAddClassByName(beanClassName),deploymentUnit.getServiceName());  ViewDescription viewDescription=new ViewDescription(componentDescription,beanClassName);  viewDescription.getConfigurators().addFirst(new ViewConfigurator(){    public void configure(    final DeploymentPhaseContext context,    final ComponentConfiguration componentConfiguration,    final ViewDescription description,    final ViewConfiguration configuration) throws DeploymentUnitProcessingException {      final Object contextKey=new Object();      configuration.addViewPostConstructInterceptor(new ManagedBeanCreateInterceptorFactory(contextKey),InterceptorOrder.ViewPostConstruct.INSTANCE_CREATE);      final ManagedBeanAssociatingInterceptorFactory associatingInterceptorFactory=new ManagedBeanAssociatingInterceptorFactory(contextKey);      configuration.addViewInterceptor(associatingInterceptorFactory,InterceptorOrder.View.ASSOCIATING_INTERCEPTOR);      configuration.addViewPreDestroyInterceptor(new ManagedBeanDestroyInterceptorFactory(contextKey),InterceptorOrder.ViewPreDestroy.INSTANCE_DESTROY);    }  });  viewDescription.getBindingNames().addAll(Arrays.asList("java:module/" + beanName,"java:app/" + moduleDescription.getModuleName() + "/"+ beanName));  componentDescription.getViews().add(viewDescription);  moduleDescription.addComponent(componentDescription);  EEResourceReferenceProcessorRegistry.registerResourceReferenceProcessor(new ManagedBeanResourceReferenceProcessor(beanClassName));} @AT@ 3951 @LENGTH@ 2450
---INS ExpressionStatement@@MethodInvocation:EEResourceReferenceProcessorRegistry.registerResourceReferenceProcessor(new ManagedBeanResourceReferenceProcessor(beanClassName)) @TO@ EnhancedForStatement@@for (AnnotationInstance instance : instances) {  AnnotationTarget target=instance.target();  if (!(target instanceof ClassInfo)) {    throw new DeploymentUnitProcessingException("The ManagedBean annotation is only allowed at the class level: " + target);  }  final ClassInfo classInfo=(ClassInfo)target;  final String beanClassName=classInfo.name().toString();  final AnnotationValue nameValue=instance.value();  final String beanName=nameValue == null || nameValue.asString().isEmpty() ? beanClassName : nameValue.asString();  final ComponentDescription componentDescription=new ComponentDescription(beanName,beanClassName,moduleDescription,moduleDescription.getOrAddClassByName(beanClassName),deploymentUnit.getServiceName());  ViewDescription viewDescription=new ViewDescription(componentDescription,beanClassName);  viewDescription.getConfigurators().addFirst(new ViewConfigurator(){    public void configure(    final DeploymentPhaseContext context,    final ComponentConfiguration componentConfiguration,    final ViewDescription description,    final ViewConfiguration configuration) throws DeploymentUnitProcessingException {      final Object contextKey=new Object();      configuration.addViewPostConstructInterceptor(new ManagedBeanCreateInterceptorFactory(contextKey),InterceptorOrder.ViewPostConstruct.INSTANCE_CREATE);      final ManagedBeanAssociatingInterceptorFactory associatingInterceptorFactory=new ManagedBeanAssociatingInterceptorFactory(contextKey);      configuration.addViewInterceptor(associatingInterceptorFactory,InterceptorOrder.View.ASSOCIATING_INTERCEPTOR);      configuration.addViewPreDestroyInterceptor(new ManagedBeanDestroyInterceptorFactory(contextKey),InterceptorOrder.ViewPreDestroy.INSTANCE_DESTROY);    }  });  viewDescription.getBindingNames().addAll(Arrays.asList("java:module/" + beanName,"java:app/" + moduleDescription.getModuleName() + "/"+ beanName));  componentDescription.getViews().add(viewDescription);  moduleDescription.addComponent(componentDescription);} @AT@ 6676 @LENGTH@ 130
------INS MethodInvocation@@EEResourceReferenceProcessorRegistry.registerResourceReferenceProcessor(new ManagedBeanResourceReferenceProcessor(beanClassName)) @TO@ ExpressionStatement@@MethodInvocation:EEResourceReferenceProcessorRegistry.registerResourceReferenceProcessor(new ManagedBeanResourceReferenceProcessor(beanClassName)) @AT@ 6676 @LENGTH@ 129
---------INS SimpleName@@Name:EEResourceReferenceProcessorRegistry @TO@ MethodInvocation@@EEResourceReferenceProcessorRegistry.registerResourceReferenceProcessor(new ManagedBeanResourceReferenceProcessor(beanClassName)) @AT@ 6676 @LENGTH@ 36
---------INS SimpleName@@MethodName:registerResourceReferenceProcessor:[new ManagedBeanResourceReferenceProcessor(beanClassName)] @TO@ MethodInvocation@@EEResourceReferenceProcessorRegistry.registerResourceReferenceProcessor(new ManagedBeanResourceReferenceProcessor(beanClassName)) @AT@ 6713 @LENGTH@ 92
------------INS ClassInstanceCreation@@ManagedBeanResourceReferenceProcessor[beanClassName] @TO@ SimpleName@@MethodName:registerResourceReferenceProcessor:[new ManagedBeanResourceReferenceProcessor(beanClassName)] @AT@ 6748 @LENGTH@ 56
---------------INS New@@new @TO@ ClassInstanceCreation@@ManagedBeanResourceReferenceProcessor[beanClassName] @AT@ 6748 @LENGTH@ 3
---------------INS SimpleType@@ManagedBeanResourceReferenceProcessor @TO@ ClassInstanceCreation@@ManagedBeanResourceReferenceProcessor[beanClassName] @AT@ 6752 @LENGTH@ 37
---------------INS SimpleName@@beanClassName @TO@ ClassInstanceCreation@@ManagedBeanResourceReferenceProcessor[beanClassName] @AT@ 6790 @LENGTH@ 13


UPD ReturnStatement@@SimpleName:full @TO@ MethodInvocation:codec.full() @AT@ 19285 @LENGTH@ 12
---INS MethodInvocation@@codec.full() @TO@ ReturnStatement@@SimpleName:full @AT@ 19256 @LENGTH@ 12
------INS SimpleName@@Name:codec @TO@ MethodInvocation@@codec.full() @AT@ 19256 @LENGTH@ 5
------INS SimpleName@@MethodName:full:[] @TO@ MethodInvocation@@codec.full() @AT@ 19262 @LENGTH@ 6
---DEL SimpleName@@full @AT@ 19292 @LENGTH@ 4


INS MethodDeclaration@@public, void, MethodName:setUp, Exception,  @TO@ TypeDeclaration@@[public]MailFetchSizeTest, CamelTestSupport @AT@ 1357 @LENGTH@ 93
---INS Modifier@@public @TO@ MethodDeclaration@@public, void, MethodName:setUp, Exception,  @AT@ 1357 @LENGTH@ 6
---INS PrimitiveType@@void @TO@ MethodDeclaration@@public, void, MethodName:setUp, Exception,  @AT@ 1364 @LENGTH@ 4
---INS SimpleName@@MethodName:setUp @TO@ MethodDeclaration@@public, void, MethodName:setUp, Exception,  @AT@ 1369 @LENGTH@ 5
---INS SimpleType@@Exception @TO@ MethodDeclaration@@public, void, MethodName:setUp, Exception,  @AT@ 1384 @LENGTH@ 9
---INS ExpressionStatement@@MethodInvocation:prepareMailbox() @TO@ MethodDeclaration@@public, void, MethodName:setUp, Exception,  @AT@ 1404 @LENGTH@ 17
------INS MethodInvocation@@MethodName:prepareMailbox:[] @TO@ ExpressionStatement@@MethodInvocation:prepareMailbox() @AT@ 1404 @LENGTH@ 16
---INS ExpressionStatement@@SuperMethodInvocation:super.setUp() @TO@ MethodDeclaration@@public, void, MethodName:setUp, Exception,  @AT@ 1430 @LENGTH@ 14
------INS SuperMethodInvocation@@super.setUp() @TO@ ExpressionStatement@@SuperMethodInvocation:super.setUp() @AT@ 1430 @LENGTH@ 13
---------INS SimpleName@@MethodName:setUp:[] @TO@ SuperMethodInvocation@@super.setUp() @AT@ 1436 @LENGTH@ 5


UPD ExpressionStatement@@MethodInvocation:Assert.notNull(physicalTypeMetadata,"Unable to obtain physical type metdata for type " + controller.getFullyQualifiedTypeName()) @TO@ MethodInvocation:Assert.notNull(physicalTypeMetadata,"Unable to obtain physical type metadata for type " + controller.getFullyQualifiedTypeName()) @AT@ 7949 @LENGTH@ 130
---UPD MethodInvocation@@Assert.notNull(physicalTypeMetadata,"Unable to obtain physical type metdata for type " + controller.getFullyQualifiedTypeName()) @TO@ Assert.notNull(physicalTypeMetadata,"Unable to obtain physical type metadata for type " + controller.getFullyQualifiedTypeName()) @AT@ 7949 @LENGTH@ 129
------UPD SimpleName@@MethodName:notNull:[physicalTypeMetadata, "Unable to obtain physical type metdata for type " + controller.getFullyQualifiedTypeName()] @TO@ MethodName:notNull:[physicalTypeMetadata, "Unable to obtain physical type metadata for type " + controller.getFullyQualifiedTypeName()] @AT@ 7956 @LENGTH@ 122
---------UPD InfixExpression@@"Unable to obtain physical type metdata for type " + controller.getFullyQualifiedTypeName() @TO@ "Unable to obtain physical type metadata for type " + controller.getFullyQualifiedTypeName() @AT@ 7986 @LENGTH@ 91
------------UPD StringLiteral@@"Unable to obtain physical type metdata for type " @TO@ "Unable to obtain physical type metadata for type " @AT@ 7986 @LENGTH@ 50


UPD ReturnStatement@@MethodInvocation:getType().isAssignableFrom(Map.class) @TO@ MethodInvocation:Map.class.isAssignableFrom(getType()) @AT@ 3818 @LENGTH@ 45
---UPD MethodInvocation@@getType().isAssignableFrom(Map.class) @TO@ Map.class.isAssignableFrom(getType()) @AT@ 3825 @LENGTH@ 37
------INS TypeLiteral@@Map.class @TO@ MethodInvocation@@getType().isAssignableFrom(Map.class) @AT@ 3783 @LENGTH@ 9
------INS SimpleName@@MethodName:isAssignableFrom:[getType()] @TO@ MethodInvocation@@getType().isAssignableFrom(Map.class) @AT@ 3793 @LENGTH@ 27
---------INS MethodInvocation@@MethodName:getType:[] @TO@ SimpleName@@MethodName:isAssignableFrom:[getType()] @AT@ 3810 @LENGTH@ 9
------DEL MethodInvocation@@MethodName:getType:[] @AT@ 3825 @LENGTH@ 9
------DEL SimpleName@@MethodName:isAssignableFrom:[Map.class] @AT@ 3835 @LENGTH@ 27
---------DEL TypeLiteral@@Map.class @AT@ 3852 @LENGTH@ 9


UPD FieldDeclaration@@private, ServiceContainer, [serviceContainer] @TO@ private, volatile, ServiceContainer, [serviceContainer] @AT@ 2679 @LENGTH@ 42
---INS Modifier@@volatile @TO@ FieldDeclaration@@private, ServiceContainer, [serviceContainer] @AT@ 2697 @LENGTH@ 8


DEL FieldDeclaration@@private, static, final, transient, Logger, [LOG=LoggerFactory.getLogger(BindySimpleCsvUnmarshallPositionModifiedTest.class)] @AT@ 1763 @LENGTH@ 120
---DEL Modifier@@private @AT@ 1763 @LENGTH@ 7
---DEL Modifier@@static @AT@ 1771 @LENGTH@ 6
---DEL Modifier@@final @AT@ 1778 @LENGTH@ 5
---DEL Modifier@@transient @AT@ 1784 @LENGTH@ 9
---DEL SimpleType@@Logger @AT@ 1794 @LENGTH@ 6
---DEL VariableDeclarationFragment@@LOG=LoggerFactory.getLogger(BindySimpleCsvUnmarshallPositionModifiedTest.class) @AT@ 1801 @LENGTH@ 81
------DEL SimpleName@@LOG @AT@ 1801 @LENGTH@ 3
------DEL MethodInvocation@@LoggerFactory.getLogger(BindySimpleCsvUnmarshallPositionModifiedTest.class) @AT@ 1807 @LENGTH@ 75
---------DEL SimpleName@@Name:LoggerFactory @AT@ 1807 @LENGTH@ 13
---------DEL SimpleName@@MethodName:getLogger:[BindySimpleCsvUnmarshallPositionModifiedTest.class] @AT@ 1821 @LENGTH@ 61
------------DEL TypeLiteral@@BindySimpleCsvUnmarshallPositionModifiedTest.class @AT@ 1831 @LENGTH@ 50


UPD EnhancedForStatement@@for (BindingConfiguration bindingConfiguration : bindings) {  if (bindingConfiguration.getName().startsWith("java:comp") || !bindingConfiguration.getName().startsWith("java:")) {    final String bindingName=bindingConfiguration.getName();    final BinderService service=new BinderService(bindingName);    ServiceBuilder<ManagedReferenceFactory> serviceBuilder=serviceTarget.addService(ContextNames.serviceNameOfEnvEntry(configuration.getApplicationName(),configuration.getModuleName(),configuration.getComponentName(),configuration.getComponentDescription().getNamingMode() == ComponentNamingMode.CREATE,bindingName),service);    bindingConfiguration.getSource().getResourceValue(resolutionContext,serviceBuilder,phaseContext,service.getManagedObjectInjector());    serviceBuilder.addDependency(contextServiceName,NamingStore.class,service.getNamingStoreInjector());    serviceBuilder.install();  }} @TO@ for (BindingConfiguration bindingConfiguration : uniqueBindings) {  if (bindingConfiguration.getName().startsWith("java:comp") || !bindingConfiguration.getName().startsWith("java:")) {    final String bindingName=bindingConfiguration.getName();    final BinderService service=new BinderService(bindingName);    ServiceBuilder<ManagedReferenceFactory> serviceBuilder=serviceTarget.addService(ContextNames.serviceNameOfEnvEntry(configuration.getApplicationName(),configuration.getModuleName(),configuration.getComponentName(),configuration.getComponentDescription().getNamingMode() == ComponentNamingMode.CREATE,bindingName),service);    bindingConfiguration.getSource().getResourceValue(resolutionContext,serviceBuilder,phaseContext,service.getManagedObjectInjector());    serviceBuilder.addDependency(contextServiceName,NamingStore.class,service.getNamingStoreInjector());    serviceBuilder.install();  }} @AT@ 10040 @LENGTH@ 1024
---UPD SimpleName@@bindings @TO@ uniqueBindings @AT@ 10089 @LENGTH@ 8


UPD MethodDeclaration@@public, void, MethodName:handle, ParsingContext ctx, OperationFormatException,  @TO@ public, void, MethodName:handle, ParsingContext ctx, CommandFormatException,  @AT@ 1710 @LENGTH@ 197
---UPD SimpleType@@OperationFormatException @TO@ CommandFormatException @AT@ 1776 @LENGTH@ 24


INS TryStatement@@try {  log.info("Starting weld service");  weldContainer.addWeldService(EjbServices.class,ejbServices.getValue());  weldContainer.addWeldService(SecurityServices.class,securityServices.getValue());  weldContainer.addWeldService(TransactionServices.class,weldTransactionServices.getValue());  weldContainer.addWeldService(ValidationServices.class,validationServices.getValue());  for (  BeanDeploymentArchive bda : weldContainer.getBeanDeploymentArchives()) {    bda.getServices().add(EjbInjectionServices.class,ejbInjectionServices.getValue());    bda.getServices().add(JpaInjectionServices.class,jpaInjectionServices.getValue());    bda.getServices().add(ResourceInjectionServices.class,resourceInjectionServices.getValue());  }  weldContainer.start();} catch (Exception e) {  weldContainer.stop();  throw new StartException(e);} @TO@ MethodDeclaration@@public, void, MethodName:start, StartContext context, StartException,  @AT@ 3807 @LENGTH@ 1185
---MOV ExpressionStatement@@MethodInvocation:log.info("Starting weld service") @TO@ TryStatement@@try {  log.info("Starting weld service");  weldContainer.addWeldService(EjbServices.class,ejbServices.getValue());  weldContainer.addWeldService(SecurityServices.class,securityServices.getValue());  weldContainer.addWeldService(TransactionServices.class,weldTransactionServices.getValue());  weldContainer.addWeldService(ValidationServices.class,validationServices.getValue());  for (  BeanDeploymentArchive bda : weldContainer.getBeanDeploymentArchives()) {    bda.getServices().add(EjbInjectionServices.class,ejbInjectionServices.getValue());    bda.getServices().add(JpaInjectionServices.class,jpaInjectionServices.getValue());    bda.getServices().add(ResourceInjectionServices.class,resourceInjectionServices.getValue());  }  weldContainer.start();} catch (Exception e) {  weldContainer.stop();  throw new StartException(e);} @AT@ 3807 @LENGTH@ 34
---MOV ExpressionStatement@@MethodInvocation:weldContainer.addWeldService(EjbServices.class,ejbServices.getValue()) @TO@ TryStatement@@try {  log.info("Starting weld service");  weldContainer.addWeldService(EjbServices.class,ejbServices.getValue());  weldContainer.addWeldService(SecurityServices.class,securityServices.getValue());  weldContainer.addWeldService(TransactionServices.class,weldTransactionServices.getValue());  weldContainer.addWeldService(ValidationServices.class,validationServices.getValue());  for (  BeanDeploymentArchive bda : weldContainer.getBeanDeploymentArchives()) {    bda.getServices().add(EjbInjectionServices.class,ejbInjectionServices.getValue());    bda.getServices().add(JpaInjectionServices.class,jpaInjectionServices.getValue());    bda.getServices().add(ResourceInjectionServices.class,resourceInjectionServices.getValue());  }  weldContainer.start();} catch (Exception e) {  weldContainer.stop();  throw new StartException(e);} @AT@ 3886 @LENGTH@ 72
---MOV ExpressionStatement@@MethodInvocation:weldContainer.addWeldService(SecurityServices.class,securityServices.getValue()) @TO@ TryStatement@@try {  log.info("Starting weld service");  weldContainer.addWeldService(EjbServices.class,ejbServices.getValue());  weldContainer.addWeldService(SecurityServices.class,securityServices.getValue());  weldContainer.addWeldService(TransactionServices.class,weldTransactionServices.getValue());  weldContainer.addWeldService(ValidationServices.class,validationServices.getValue());  for (  BeanDeploymentArchive bda : weldContainer.getBeanDeploymentArchives()) {    bda.getServices().add(EjbInjectionServices.class,ejbInjectionServices.getValue());    bda.getServices().add(JpaInjectionServices.class,jpaInjectionServices.getValue());    bda.getServices().add(ResourceInjectionServices.class,resourceInjectionServices.getValue());  }  weldContainer.start();} catch (Exception e) {  weldContainer.stop();  throw new StartException(e);} @AT@ 3967 @LENGTH@ 82
---MOV ExpressionStatement@@MethodInvocation:weldContainer.addWeldService(TransactionServices.class,weldTransactionServices.getValue()) @TO@ TryStatement@@try {  log.info("Starting weld service");  weldContainer.addWeldService(EjbServices.class,ejbServices.getValue());  weldContainer.addWeldService(SecurityServices.class,securityServices.getValue());  weldContainer.addWeldService(TransactionServices.class,weldTransactionServices.getValue());  weldContainer.addWeldService(ValidationServices.class,validationServices.getValue());  for (  BeanDeploymentArchive bda : weldContainer.getBeanDeploymentArchives()) {    bda.getServices().add(EjbInjectionServices.class,ejbInjectionServices.getValue());    bda.getServices().add(JpaInjectionServices.class,jpaInjectionServices.getValue());    bda.getServices().add(ResourceInjectionServices.class,resourceInjectionServices.getValue());  }  weldContainer.start();} catch (Exception e) {  weldContainer.stop();  throw new StartException(e);} @AT@ 4058 @LENGTH@ 92
---MOV ExpressionStatement@@MethodInvocation:weldContainer.addWeldService(ValidationServices.class,validationServices.getValue()) @TO@ TryStatement@@try {  log.info("Starting weld service");  weldContainer.addWeldService(EjbServices.class,ejbServices.getValue());  weldContainer.addWeldService(SecurityServices.class,securityServices.getValue());  weldContainer.addWeldService(TransactionServices.class,weldTransactionServices.getValue());  weldContainer.addWeldService(ValidationServices.class,validationServices.getValue());  for (  BeanDeploymentArchive bda : weldContainer.getBeanDeploymentArchives()) {    bda.getServices().add(EjbInjectionServices.class,ejbInjectionServices.getValue());    bda.getServices().add(JpaInjectionServices.class,jpaInjectionServices.getValue());    bda.getServices().add(ResourceInjectionServices.class,resourceInjectionServices.getValue());  }  weldContainer.start();} catch (Exception e) {  weldContainer.stop();  throw new StartException(e);} @AT@ 4159 @LENGTH@ 86
---MOV EnhancedForStatement@@for (BeanDeploymentArchive bda : weldContainer.getBeanDeploymentArchives()) {  bda.getServices().add(EjbInjectionServices.class,ejbInjectionServices.getValue());  bda.getServices().add(JpaInjectionServices.class,jpaInjectionServices.getValue());  bda.getServices().add(ResourceInjectionServices.class,resourceInjectionServices.getValue());} @TO@ TryStatement@@try {  log.info("Starting weld service");  weldContainer.addWeldService(EjbServices.class,ejbServices.getValue());  weldContainer.addWeldService(SecurityServices.class,securityServices.getValue());  weldContainer.addWeldService(TransactionServices.class,weldTransactionServices.getValue());  weldContainer.addWeldService(ValidationServices.class,validationServices.getValue());  for (  BeanDeploymentArchive bda : weldContainer.getBeanDeploymentArchives()) {    bda.getServices().add(EjbInjectionServices.class,ejbInjectionServices.getValue());    bda.getServices().add(JpaInjectionServices.class,jpaInjectionServices.getValue());    bda.getServices().add(ResourceInjectionServices.class,resourceInjectionServices.getValue());  }  weldContainer.start();} catch (Exception e) {  weldContainer.stop();  throw new StartException(e);} @AT@ 4367 @LENGTH@ 385
---MOV ExpressionStatement@@MethodInvocation:weldContainer.start() @TO@ TryStatement@@try {  log.info("Starting weld service");  weldContainer.addWeldService(EjbServices.class,ejbServices.getValue());  weldContainer.addWeldService(SecurityServices.class,securityServices.getValue());  weldContainer.addWeldService(TransactionServices.class,weldTransactionServices.getValue());  weldContainer.addWeldService(ValidationServices.class,validationServices.getValue());  for (  BeanDeploymentArchive bda : weldContainer.getBeanDeploymentArchives()) {    bda.getServices().add(EjbInjectionServices.class,ejbInjectionServices.getValue());    bda.getServices().add(JpaInjectionServices.class,jpaInjectionServices.getValue());    bda.getServices().add(ResourceInjectionServices.class,resourceInjectionServices.getValue());  }  weldContainer.start();} catch (Exception e) {  weldContainer.stop();  throw new StartException(e);} @AT@ 4783 @LENGTH@ 22
---INS CatchClause@@catch (Exception e) {  weldContainer.stop();  throw new StartException(e);} @TO@ TryStatement@@try {  log.info("Starting weld service");  weldContainer.addWeldService(EjbServices.class,ejbServices.getValue());  weldContainer.addWeldService(SecurityServices.class,securityServices.getValue());  weldContainer.addWeldService(TransactionServices.class,weldTransactionServices.getValue());  weldContainer.addWeldService(ValidationServices.class,validationServices.getValue());  for (  BeanDeploymentArchive bda : weldContainer.getBeanDeploymentArchives()) {    bda.getServices().add(EjbInjectionServices.class,ejbInjectionServices.getValue());    bda.getServices().add(JpaInjectionServices.class,jpaInjectionServices.getValue());    bda.getServices().add(ResourceInjectionServices.class,resourceInjectionServices.getValue());  }  weldContainer.start();} catch (Exception e) {  weldContainer.stop();  throw new StartException(e);} @AT@ 4886 @LENGTH@ 106
------INS SingleVariableDeclaration@@Exception e @TO@ CatchClause@@catch (Exception e) {  weldContainer.stop();  throw new StartException(e);} @AT@ 4893 @LENGTH@ 11
---------INS SimpleType@@Exception @TO@ SingleVariableDeclaration@@Exception e @AT@ 4893 @LENGTH@ 9
---------INS SimpleName@@e @TO@ SingleVariableDeclaration@@Exception e @AT@ 4903 @LENGTH@ 1
------INS ExpressionStatement@@MethodInvocation:weldContainer.stop() @TO@ CatchClause@@catch (Exception e) {  weldContainer.stop();  throw new StartException(e);} @AT@ 4920 @LENGTH@ 21
---------INS MethodInvocation@@weldContainer.stop() @TO@ ExpressionStatement@@MethodInvocation:weldContainer.stop() @AT@ 4920 @LENGTH@ 20
------------INS SimpleName@@Name:weldContainer @TO@ MethodInvocation@@weldContainer.stop() @AT@ 4920 @LENGTH@ 13
------------INS SimpleName@@MethodName:stop:[] @TO@ MethodInvocation@@weldContainer.stop() @AT@ 4934 @LENGTH@ 6
------INS ThrowStatement@@ClassInstanceCreation:new StartException(e) @TO@ CatchClause@@catch (Exception e) {  weldContainer.stop();  throw new StartException(e);} @AT@ 4954 @LENGTH@ 28
---------INS ClassInstanceCreation@@StartException[e] @TO@ ThrowStatement@@ClassInstanceCreation:new StartException(e) @AT@ 4960 @LENGTH@ 21
------------INS New@@new @TO@ ClassInstanceCreation@@StartException[e] @AT@ 4960 @LENGTH@ 3
------------INS SimpleType@@StartException @TO@ ClassInstanceCreation@@StartException[e] @AT@ 4964 @LENGTH@ 14
------------INS SimpleName@@e @TO@ ClassInstanceCreation@@StartException[e] @AT@ 4979 @LENGTH@ 1


INS MethodDeclaration@@protected, boolean, MethodName:startsWithRoot, String path,  @TO@ TypeDeclaration@@[public]WindowsFilenameTabCompleter, FilenameTabCompleter @AT@ 4522 @LENGTH@ 88
---INS Modifier@@protected @TO@ MethodDeclaration@@protected, boolean, MethodName:startsWithRoot, String path,  @AT@ 4522 @LENGTH@ 9
---INS PrimitiveType@@boolean @TO@ MethodDeclaration@@protected, boolean, MethodName:startsWithRoot, String path,  @AT@ 4532 @LENGTH@ 7
---INS SimpleName@@MethodName:startsWithRoot @TO@ MethodDeclaration@@protected, boolean, MethodName:startsWithRoot, String path,  @AT@ 4540 @LENGTH@ 14
---INS SingleVariableDeclaration@@String path @TO@ MethodDeclaration@@protected, boolean, MethodName:startsWithRoot, String path,  @AT@ 4555 @LENGTH@ 11
------INS SimpleType@@String @TO@ SingleVariableDeclaration@@String path @AT@ 4555 @LENGTH@ 6
------INS SimpleName@@path @TO@ SingleVariableDeclaration@@String path @AT@ 4562 @LENGTH@ 4
---INS ReturnStatement@@MethodInvocation:path.contains(":\\") @TO@ MethodDeclaration@@protected, boolean, MethodName:startsWithRoot, String path,  @AT@ 4577 @LENGTH@ 28
------INS MethodInvocation@@path.contains(":\\") @TO@ ReturnStatement@@MethodInvocation:path.contains(":\\") @AT@ 4584 @LENGTH@ 20
---------INS SimpleName@@Name:path @TO@ MethodInvocation@@path.contains(":\\") @AT@ 4584 @LENGTH@ 4
---------INS SimpleName@@MethodName:contains:[":\\"] @TO@ MethodInvocation@@path.contains(":\\") @AT@ 4589 @LENGTH@ 15
------------INS StringLiteral@@":\\" @TO@ SimpleName@@MethodName:contains:[":\\"] @AT@ 4598 @LENGTH@ 5


INS IfStatement@@if (properties.size() > 0) {  writer.writeStartElement(element.getLocalName());  for (  Property prop : properties) {    writer.writeStartElement(Element.PROPERTY.getLocalName());    writeAttribute(writer,Attribute.NAME,prop.getName());    writeAttribute(writer,Attribute.VALUE,prop.getValue().asString());    writer.writeEndElement();  }  writer.writeEndElement();} @TO@ MethodDeclaration@@protected, void, MethodName:writeProperties, final XMLExtendedStreamWriter writer, final ModelNode modelNode, Element element, XMLStreamException,  @AT@ 63310 @LENGTH@ 473
---INS InfixExpression@@properties.size() > 0 @TO@ IfStatement@@if (properties.size() > 0) {  writer.writeStartElement(element.getLocalName());  for (  Property prop : properties) {    writer.writeStartElement(Element.PROPERTY.getLocalName());    writeAttribute(writer,Attribute.NAME,prop.getName());    writeAttribute(writer,Attribute.VALUE,prop.getValue().asString());    writer.writeEndElement();  }  writer.writeEndElement();} @AT@ 63314 @LENGTH@ 21
------INS MethodInvocation@@properties.size() @TO@ InfixExpression@@properties.size() > 0 @AT@ 63314 @LENGTH@ 17
---------INS SimpleName@@Name:properties @TO@ MethodInvocation@@properties.size() @AT@ 63314 @LENGTH@ 10
---------INS SimpleName@@MethodName:size:[] @TO@ MethodInvocation@@properties.size() @AT@ 63325 @LENGTH@ 6
------INS Operator@@> @TO@ InfixExpression@@properties.size() > 0 @AT@ 63331 @LENGTH@ 1
------INS NumberLiteral@@0 @TO@ InfixExpression@@properties.size() > 0 @AT@ 63334 @LENGTH@ 1
---INS Block@@ThenBody:{  writer.writeStartElement(element.getLocalName());  for (  Property prop : properties) {    writer.writeStartElement(Element.PROPERTY.getLocalName());    writeAttribute(writer,Attribute.NAME,prop.getName());    writeAttribute(writer,Attribute.VALUE,prop.getValue().asString());    writer.writeEndElement();  }  writer.writeEndElement();} @TO@ IfStatement@@if (properties.size() > 0) {  writer.writeStartElement(element.getLocalName());  for (  Property prop : properties) {    writer.writeStartElement(Element.PROPERTY.getLocalName());    writeAttribute(writer,Attribute.NAME,prop.getName());    writeAttribute(writer,Attribute.VALUE,prop.getValue().asString());    writer.writeEndElement();  }  writer.writeEndElement();} @AT@ 63337 @LENGTH@ 446
------MOV ExpressionStatement@@MethodInvocation:writer.writeStartElement(element.getLocalName()) @TO@ Block@@ThenBody:{  writer.writeStartElement(element.getLocalName());  for (  Property prop : properties) {    writer.writeStartElement(Element.PROPERTY.getLocalName());    writeAttribute(writer,Attribute.NAME,prop.getName());    writeAttribute(writer,Attribute.VALUE,prop.getValue().asString());    writer.writeEndElement();  }  writer.writeEndElement();} @AT@ 63240 @LENGTH@ 49
------MOV EnhancedForStatement@@for (Property prop : properties) {  writer.writeStartElement(Element.PROPERTY.getLocalName());  writeAttribute(writer,Attribute.NAME,prop.getName());  writeAttribute(writer,Attribute.VALUE,prop.getValue().asString());  writer.writeEndElement();} @TO@ Block@@ThenBody:{  writer.writeStartElement(element.getLocalName());  for (  Property prop : properties) {    writer.writeStartElement(Element.PROPERTY.getLocalName());    writeAttribute(writer,Attribute.NAME,prop.getName());    writeAttribute(writer,Attribute.VALUE,prop.getValue().asString());    writer.writeEndElement();  }  writer.writeEndElement();} @AT@ 63368 @LENGTH@ 302
------MOV ExpressionStatement@@MethodInvocation:writer.writeEndElement() @TO@ Block@@ThenBody:{  writer.writeStartElement(element.getLocalName());  for (  Property prop : properties) {    writer.writeStartElement(Element.PROPERTY.getLocalName());    writeAttribute(writer,Attribute.NAME,prop.getName());    writeAttribute(writer,Attribute.VALUE,prop.getValue().asString());    writer.writeEndElement();  }  writer.writeEndElement();} @AT@ 63679 @LENGTH@ 25


UPD TryStatement@@try {  final BatchBuilder batchBuilder=updateContext.getServiceTarget();  final FileHandlerService service=new FileHandlerService();  final ServiceBuilder<Handler> serviceBuilder=batchBuilder.addService(LogServices.handlerName(getName()),service);  final String relativeTo=this.relativeTo;  if (relativeTo != null) {    serviceBuilder.addDependency(AbstractPathService.pathNameOf(relativeTo),String.class,service.getRelativeToInjector());  }  service.setLevel(Level.parse(getLevelName()));  final Boolean autoFlush=getAutoflush();  if (autoFlush != null)   service.setAutoflush(autoFlush.booleanValue());  try {    service.setEncoding(getEncoding());  } catch (  UnsupportedEncodingException e) {    handler.handleFailure(e,param);    return;  }  try {    service.setPath(path);  } catch (  FileNotFoundException e) {    handler.handleFailure(e,param);    return;  }  service.setFormatterSpec(getFormatter());  serviceBuilder.setInitialMode(ServiceController.Mode.ACTIVE);  serviceBuilder.addListener(new UpdateResultHandler.ServiceStartListener<P>(handler,param));  serviceBuilder.install();} catch (Throwable t) {  handler.handleFailure(t,param);  return;} @TO@ try {  final ServiceTarget target=updateContext.getServiceTarget();  final FileHandlerService service=new FileHandlerService();  final ServiceBuilder<Handler> serviceBuilder=target.addService(LogServices.handlerName(getName()),service);  final String relativeTo=this.relativeTo;  if (relativeTo != null) {    serviceBuilder.addDependency(AbstractPathService.pathNameOf(relativeTo),String.class,service.getRelativeToInjector());  }  service.setLevel(Level.parse(getLevelName()));  final Boolean autoFlush=getAutoflush();  if (autoFlush != null)   service.setAutoflush(autoFlush.booleanValue());  try {    service.setEncoding(getEncoding());  } catch (  UnsupportedEncodingException e) {    handler.handleFailure(e,param);    return;  }  try {    service.setPath(path);  } catch (  FileNotFoundException e) {    handler.handleFailure(e,param);    return;  }  service.setFormatterSpec(getFormatter());  serviceBuilder.setInitialMode(ServiceController.Mode.ACTIVE);  serviceBuilder.addListener(new UpdateResultHandler.ServiceStartListener<P>(handler,param));  serviceBuilder.install();} catch (Throwable t) {  handler.handleFailure(t,param);  return;} @AT@ 2698 @LENGTH@ 1509
---UPD VariableDeclarationStatement@@final BatchBuilder batchBuilder=updateContext.getServiceTarget(); @TO@ final ServiceTarget target=updateContext.getServiceTarget(); @AT@ 2716 @LENGTH@ 67
------UPD SimpleType@@BatchBuilder @TO@ ServiceTarget @AT@ 2722 @LENGTH@ 12
------UPD VariableDeclarationFragment@@batchBuilder=updateContext.getServiceTarget() @TO@ target=updateContext.getServiceTarget() @AT@ 2735 @LENGTH@ 47
---------UPD SimpleName@@batchBuilder @TO@ target @AT@ 2735 @LENGTH@ 12
---UPD VariableDeclarationStatement@@final ServiceBuilder<Handler> serviceBuilder=batchBuilder.addService(LogServices.handlerName(getName()),service); @TO@ final ServiceBuilder<Handler> serviceBuilder=target.addService(LogServices.handlerName(getName()),service); @AT@ 2869 @LENGTH@ 116
------UPD VariableDeclarationFragment@@serviceBuilder=batchBuilder.addService(LogServices.handlerName(getName()),service) @TO@ serviceBuilder=target.addService(LogServices.handlerName(getName()),service) @AT@ 2899 @LENGTH@ 85
---------UPD MethodInvocation@@batchBuilder.addService(LogServices.handlerName(getName()),service) @TO@ target.addService(LogServices.handlerName(getName()),service) @AT@ 2916 @LENGTH@ 68
------------UPD SimpleName@@Name:batchBuilder @TO@ Name:target @AT@ 2916 @LENGTH@ 12


UPD EnhancedForStatement@@for (Property deployment : serverGroup.get(DEPLOYMENT).asPropertyList()) {  String name=deployment.getName();  ModelNode details=deployment.getValue();  byte[] hash=details.require(HASH).asBytes();  domainController.getFileRepository().getDeploymentFiles(hash);  PathAddress addr=PathAddress.pathAddress(PathElement.pathElement(DEPLOYMENT,name));  ModelNode addOp=Util.getEmptyOperation(ADD,addr.toModelNode());  addOp.get(RUNTIME_NAME).set(details.get(RUNTIME_NAME));  addOp.get(HASH).set(hash);  addOp.get(ENABLED).set(!details.hasDefined(ENABLED) || details.get(ENABLED).asBoolean());  updates.add(addOp);} @TO@ for (Property deployment : serverGroup.get(DEPLOYMENT).asPropertyList()) {  String name=deployment.getName();  ModelNode details=deployment.getValue();  final byte[] hash;  final ModelNode content=details.require(CONTENT).clone();  final ModelNode contentItemNode=content.require(0);  if (contentItemNode.hasDefined(HASH)) {    hash=contentItemNode.require(HASH).asBytes();    domainController.getFileRepository().getDeploymentFiles(hash);  }  PathAddress addr=PathAddress.pathAddress(PathElement.pathElement(DEPLOYMENT,name));  ModelNode addOp=Util.getEmptyOperation(ADD,addr.toModelNode());  addOp.get(RUNTIME_NAME).set(details.get(RUNTIME_NAME));  addOp.get(CONTENT).set(content);  addOp.get(ENABLED).set(!details.hasDefined(ENABLED) || details.get(ENABLED).asBoolean());  updates.add(addOp);} @AT@ 19290 @LENGTH@ 867
---DEL VariableDeclarationStatement@@byte[] hash=details.require(HASH).asBytes(); @AT@ 19573 @LENGTH@ 46
------DEL VariableDeclarationFragment@@hash=details.require(HASH).asBytes() @AT@ 19580 @LENGTH@ 38
---------DEL MethodInvocation@@details.require(HASH).asBytes() @AT@ 19587 @LENGTH@ 31
---INS VariableDeclarationStatement@@final byte[] hash; @TO@ EnhancedForStatement@@for (Property deployment : serverGroup.get(DEPLOYMENT).asPropertyList()) {  String name=deployment.getName();  ModelNode details=deployment.getValue();  byte[] hash=details.require(HASH).asBytes();  domainController.getFileRepository().getDeploymentFiles(hash);  PathAddress addr=PathAddress.pathAddress(PathElement.pathElement(DEPLOYMENT,name));  ModelNode addOp=Util.getEmptyOperation(ADD,addr.toModelNode());  addOp.get(RUNTIME_NAME).set(details.get(RUNTIME_NAME));  addOp.get(HASH).set(hash);  addOp.get(ENABLED).set(!details.hasDefined(ENABLED) || details.get(ENABLED).asBoolean());  updates.add(addOp);} @AT@ 19762 @LENGTH@ 18
------MOV ArrayType@@byte[] @TO@ VariableDeclarationStatement@@final byte[] hash; @AT@ 19573 @LENGTH@ 6
------INS Modifier@@final @TO@ VariableDeclarationStatement@@final byte[] hash; @AT@ 19762 @LENGTH@ 5
------INS VariableDeclarationFragment@@hash @TO@ VariableDeclarationStatement@@final byte[] hash; @AT@ 19775 @LENGTH@ 4
---------MOV SimpleName@@hash @TO@ VariableDeclarationFragment@@hash @AT@ 19580 @LENGTH@ 4
---INS VariableDeclarationStatement@@final ModelNode content=details.require(CONTENT).clone(); @TO@ EnhancedForStatement@@for (Property deployment : serverGroup.get(DEPLOYMENT).asPropertyList()) {  String name=deployment.getName();  ModelNode details=deployment.getValue();  byte[] hash=details.require(HASH).asBytes();  domainController.getFileRepository().getDeploymentFiles(hash);  PathAddress addr=PathAddress.pathAddress(PathElement.pathElement(DEPLOYMENT,name));  ModelNode addOp=Util.getEmptyOperation(ADD,addr.toModelNode());  addOp.get(RUNTIME_NAME).set(details.get(RUNTIME_NAME));  addOp.get(HASH).set(hash);  addOp.get(ENABLED).set(!details.hasDefined(ENABLED) || details.get(ENABLED).asBoolean());  updates.add(addOp);} @AT@ 19865 @LENGTH@ 59
------INS Modifier@@final @TO@ VariableDeclarationStatement@@final ModelNode content=details.require(CONTENT).clone(); @AT@ 19865 @LENGTH@ 5
------INS SimpleType@@ModelNode @TO@ VariableDeclarationStatement@@final ModelNode content=details.require(CONTENT).clone(); @AT@ 19871 @LENGTH@ 9
------INS VariableDeclarationFragment@@content=details.require(CONTENT).clone() @TO@ VariableDeclarationStatement@@final ModelNode content=details.require(CONTENT).clone(); @AT@ 19881 @LENGTH@ 42
---------INS SimpleName@@content @TO@ VariableDeclarationFragment@@content=details.require(CONTENT).clone() @AT@ 19881 @LENGTH@ 7
---------INS MethodInvocation@@details.require(CONTENT).clone() @TO@ VariableDeclarationFragment@@content=details.require(CONTENT).clone() @AT@ 19891 @LENGTH@ 32
------------INS MethodInvocation@@MethodName:require:[CONTENT] @TO@ MethodInvocation@@details.require(CONTENT).clone() @AT@ 19891 @LENGTH@ 24
---------------INS SimpleName@@CONTENT @TO@ MethodInvocation@@MethodName:require:[CONTENT] @AT@ 19907 @LENGTH@ 7
------------INS SimpleName@@Name:details @TO@ MethodInvocation@@details.require(CONTENT).clone() @AT@ 19891 @LENGTH@ 7
------------INS SimpleName@@MethodName:clone:[] @TO@ MethodInvocation@@details.require(CONTENT).clone() @AT@ 19916 @LENGTH@ 7
---UPD ExpressionStatement@@MethodInvocation:addOp.get(HASH).set(hash) @TO@ MethodInvocation:addOp.get(CONTENT).set(content) @AT@ 19974 @LENGTH@ 26
------UPD MethodInvocation@@addOp.get(HASH).set(hash) @TO@ addOp.get(CONTENT).set(content) @AT@ 19974 @LENGTH@ 25
---------UPD MethodInvocation@@MethodName:get:[HASH] @TO@ MethodName:get:[CONTENT] @AT@ 19974 @LENGTH@ 15
------------UPD SimpleName@@HASH @TO@ CONTENT @AT@ 19984 @LENGTH@ 4
---------UPD SimpleName@@MethodName:set:[hash] @TO@ MethodName:set:[content] @AT@ 19990 @LENGTH@ 9
------------UPD SimpleName@@hash @TO@ content @AT@ 19994 @LENGTH@ 4
---INS VariableDeclarationStatement@@final ModelNode contentItemNode=content.require(0); @TO@ EnhancedForStatement@@for (Property deployment : serverGroup.get(DEPLOYMENT).asPropertyList()) {  String name=deployment.getName();  ModelNode details=deployment.getValue();  byte[] hash=details.require(HASH).asBytes();  domainController.getFileRepository().getDeploymentFiles(hash);  PathAddress addr=PathAddress.pathAddress(PathElement.pathElement(DEPLOYMENT,name));  ModelNode addOp=Util.getEmptyOperation(ADD,addr.toModelNode());  addOp.get(RUNTIME_NAME).set(details.get(RUNTIME_NAME));  addOp.get(HASH).set(hash);  addOp.get(ENABLED).set(!details.hasDefined(ENABLED) || details.get(ENABLED).asBoolean());  updates.add(addOp);} @AT@ 20054 @LENGTH@ 53
------INS Modifier@@final @TO@ VariableDeclarationStatement@@final ModelNode contentItemNode=content.require(0); @AT@ 20054 @LENGTH@ 5
------INS SimpleType@@ModelNode @TO@ VariableDeclarationStatement@@final ModelNode contentItemNode=content.require(0); @AT@ 20060 @LENGTH@ 9
------INS VariableDeclarationFragment@@contentItemNode=content.require(0) @TO@ VariableDeclarationStatement@@final ModelNode contentItemNode=content.require(0); @AT@ 20070 @LENGTH@ 36
---------INS SimpleName@@contentItemNode @TO@ VariableDeclarationFragment@@contentItemNode=content.require(0) @AT@ 20070 @LENGTH@ 15
---------INS MethodInvocation@@content.require(0) @TO@ VariableDeclarationFragment@@contentItemNode=content.require(0) @AT@ 20088 @LENGTH@ 18
------------INS SimpleName@@Name:content @TO@ MethodInvocation@@content.require(0) @AT@ 20088 @LENGTH@ 7
------------INS SimpleName@@MethodName:require:[0] @TO@ MethodInvocation@@content.require(0) @AT@ 20096 @LENGTH@ 10
---------------INS NumberLiteral@@0 @TO@ SimpleName@@MethodName:require:[0] @AT@ 20104 @LENGTH@ 1
---INS IfStatement@@if (contentItemNode.hasDefined(HASH)) {  hash=contentItemNode.require(HASH).asBytes();  domainController.getFileRepository().getDeploymentFiles(hash);} @TO@ EnhancedForStatement@@for (Property deployment : serverGroup.get(DEPLOYMENT).asPropertyList()) {  String name=deployment.getName();  ModelNode details=deployment.getValue();  byte[] hash=details.require(HASH).asBytes();  domainController.getFileRepository().getDeploymentFiles(hash);  PathAddress addr=PathAddress.pathAddress(PathElement.pathElement(DEPLOYMENT,name));  ModelNode addOp=Util.getEmptyOperation(ADD,addr.toModelNode());  addOp.get(RUNTIME_NAME).set(details.get(RUNTIME_NAME));  addOp.get(HASH).set(hash);  addOp.get(ENABLED).set(!details.hasDefined(ENABLED) || details.get(ENABLED).asBoolean());  updates.add(addOp);} @AT@ 20124 @LENGTH@ 208
------INS MethodInvocation@@contentItemNode.hasDefined(HASH) @TO@ IfStatement@@if (contentItemNode.hasDefined(HASH)) {  hash=contentItemNode.require(HASH).asBytes();  domainController.getFileRepository().getDeploymentFiles(hash);} @AT@ 20128 @LENGTH@ 32
---------INS SimpleName@@Name:contentItemNode @TO@ MethodInvocation@@contentItemNode.hasDefined(HASH) @AT@ 20128 @LENGTH@ 15
---------INS SimpleName@@MethodName:hasDefined:[HASH] @TO@ MethodInvocation@@contentItemNode.hasDefined(HASH) @AT@ 20144 @LENGTH@ 16
------------INS SimpleName@@HASH @TO@ SimpleName@@MethodName:hasDefined:[HASH] @AT@ 20155 @LENGTH@ 4
------INS Block@@ThenBody:{  hash=contentItemNode.require(HASH).asBytes();  domainController.getFileRepository().getDeploymentFiles(hash);} @TO@ IfStatement@@if (contentItemNode.hasDefined(HASH)) {  hash=contentItemNode.require(HASH).asBytes();  domainController.getFileRepository().getDeploymentFiles(hash);} @AT@ 20162 @LENGTH@ 170
---------MOV ExpressionStatement@@MethodInvocation:domainController.getFileRepository().getDeploymentFiles(hash) @TO@ Block@@ThenBody:{  hash=contentItemNode.require(HASH).asBytes();  domainController.getFileRepository().getDeploymentFiles(hash);} @AT@ 19636 @LENGTH@ 62
---------INS ExpressionStatement@@Assignment:hash=contentItemNode.require(HASH).asBytes() @TO@ Block@@ThenBody:{  hash=contentItemNode.require(HASH).asBytes();  domainController.getFileRepository().getDeploymentFiles(hash);} @AT@ 20184 @LENGTH@ 47
------------INS Assignment@@hash=contentItemNode.require(HASH).asBytes() @TO@ ExpressionStatement@@Assignment:hash=contentItemNode.require(HASH).asBytes() @AT@ 20184 @LENGTH@ 46
---------------INS SimpleName@@hash @TO@ Assignment@@hash=contentItemNode.require(HASH).asBytes() @AT@ 20184 @LENGTH@ 4
---------------INS Operator@@= @TO@ Assignment@@hash=contentItemNode.require(HASH).asBytes() @AT@ 20188 @LENGTH@ 1
---------------INS MethodInvocation@@contentItemNode.require(HASH).asBytes() @TO@ Assignment@@hash=contentItemNode.require(HASH).asBytes() @AT@ 20191 @LENGTH@ 39
------------------MOV MethodInvocation@@MethodName:require:[HASH] @TO@ MethodInvocation@@contentItemNode.require(HASH).asBytes() @AT@ 19587 @LENGTH@ 21
------------------MOV SimpleName@@Name:details @TO@ MethodInvocation@@contentItemNode.require(HASH).asBytes() @AT@ 19587 @LENGTH@ 7
------------------MOV SimpleName@@MethodName:asBytes:[] @TO@ MethodInvocation@@contentItemNode.require(HASH).asBytes() @AT@ 19609 @LENGTH@ 9


UPD ExpressionStatement@@MethodInvocation:replace(localPath,key,params.get(key)) @TO@ Assignment:localPath=replace(localPath,key,params.get(key)) @AT@ 2111 @LENGTH@ 41
---INS Assignment@@localPath=replace(localPath,key,params.get(key)) @TO@ ExpressionStatement@@MethodInvocation:replace(localPath,key,params.get(key)) @AT@ 2353 @LENGTH@ 52
------MOV MethodInvocation@@replace(localPath,key,params.get(key)) @TO@ Assignment@@localPath=replace(localPath,key,params.get(key)) @AT@ 2111 @LENGTH@ 40
------INS SimpleName@@localPath @TO@ Assignment@@localPath=replace(localPath,key,params.get(key)) @AT@ 2353 @LENGTH@ 9
------INS Operator@@= @TO@ Assignment@@localPath=replace(localPath,key,params.get(key)) @AT@ 2362 @LENGTH@ 1


UPD IfStatement@@if (address.length > 0) {  for (  String addr : address) {    operation.get(ADDRESS).add(addr);  }} else {  operation.get(ADDRESS).setEmptyList();} @TO@ if (address.length > 0) {  for (  String addr : address) {    operation.get(OP_ADDR).add(addr);  }} else {  operation.get(OP_ADDR).setEmptyList();} @AT@ 36894 @LENGTH@ 209
---UPD Block@@ThenBody:{  for (  String addr : address) {    operation.get(ADDRESS).add(addr);  }} @TO@ ThenBody:{  for (  String addr : address) {    operation.get(OP_ADDR).add(addr);  }} @AT@ 36918 @LENGTH@ 117
------UPD EnhancedForStatement@@for (String addr : address) {  operation.get(ADDRESS).add(addr);} @TO@ for (String addr : address) {  operation.get(OP_ADDR).add(addr);} @AT@ 36932 @LENGTH@ 93
---------UPD ExpressionStatement@@MethodInvocation:operation.get(ADDRESS).add(addr) @TO@ MethodInvocation:operation.get(OP_ADDR).add(addr) @AT@ 36978 @LENGTH@ 33
------------UPD MethodInvocation@@operation.get(ADDRESS).add(addr) @TO@ operation.get(OP_ADDR).add(addr) @AT@ 36978 @LENGTH@ 32
---------------UPD MethodInvocation@@MethodName:get:[ADDRESS] @TO@ MethodName:get:[OP_ADDR] @AT@ 36978 @LENGTH@ 22
------------------UPD SimpleName@@ADDRESS @TO@ OP_ADDR @AT@ 36992 @LENGTH@ 7
---UPD Block@@ElseBody:{  operation.get(ADDRESS).setEmptyList();} @TO@ ElseBody:{  operation.get(OP_ADDR).setEmptyList();} @AT@ 37041 @LENGTH@ 62
------UPD ExpressionStatement@@MethodInvocation:operation.get(ADDRESS).setEmptyList() @TO@ MethodInvocation:operation.get(OP_ADDR).setEmptyList() @AT@ 37055 @LENGTH@ 38
---------UPD MethodInvocation@@operation.get(ADDRESS).setEmptyList() @TO@ operation.get(OP_ADDR).setEmptyList() @AT@ 37055 @LENGTH@ 37
------------UPD MethodInvocation@@MethodName:get:[ADDRESS] @TO@ MethodName:get:[OP_ADDR] @AT@ 37055 @LENGTH@ 22
---------------UPD SimpleName@@ADDRESS @TO@ OP_ADDR @AT@ 37069 @LENGTH@ 7


UPD CatchClause@@catch (Exception e) {  e.printStackTrace();} @TO@ catch (Exception e) {  e.printStackTrace();  throw e;} @AT@ 2458 @LENGTH@ 72
---INS ThrowStatement@@SimpleName:e @TO@ CatchClause@@catch (Exception e) {  e.printStackTrace();} @AT@ 2533 @LENGTH@ 8
------INS SimpleName@@e @TO@ ThrowStatement@@SimpleName:e @AT@ 2539 @LENGTH@ 1


INS FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @TO@ TypeDeclaration@@[public]SecurityContextImpl, [SecurityContext] @AT@ 1021 @LENGTH@ 90
---INS Modifier@@private @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @AT@ 1021 @LENGTH@ 7
---INS Modifier@@static @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @AT@ 1029 @LENGTH@ 6
---INS Modifier@@final @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @AT@ 1036 @LENGTH@ 5
---INS PrimitiveType@@long @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @AT@ 1042 @LENGTH@ 4
---INS VariableDeclarationFragment@@serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @AT@ 1047 @LENGTH@ 63
------INS SimpleName@@serialVersionUID @TO@ VariableDeclarationFragment@@serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID @AT@ 1047 @LENGTH@ 16
------INS QualifiedName@@SpringSecurityCoreVersion.SERIAL_VERSION_UID @TO@ VariableDeclarationFragment@@serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID @AT@ 1066 @LENGTH@ 44
---------INS SimpleName@@SpringSecurityCoreVersion @TO@ QualifiedName@@SpringSecurityCoreVersion.SERIAL_VERSION_UID @AT@ 1066 @LENGTH@ 25
---------INS SimpleName@@SERIAL_VERSION_UID @TO@ QualifiedName@@SpringSecurityCoreVersion.SERIAL_VERSION_UID @AT@ 1092 @LENGTH@ 18


INS MethodDeclaration@@public, void, MethodName:handlesInvalidCollectionCompountTypeProperl,  @TO@ TypeDeclaration@@[@SuppressWarnings("unused"), public]PropertyUnitTests,  @AT@ 3692 @LENGTH@ 117
---INS Modifier@@public @TO@ MethodDeclaration@@public, void, MethodName:handlesInvalidCollectionCompountTypeProperl,  @AT@ 3692 @LENGTH@ 6
---INS PrimitiveType@@void @TO@ MethodDeclaration@@public, void, MethodName:handlesInvalidCollectionCompountTypeProperl,  @AT@ 3699 @LENGTH@ 4
---INS SimpleName@@MethodName:handlesInvalidCollectionCompountTypeProperl @TO@ MethodDeclaration@@public, void, MethodName:handlesInvalidCollectionCompountTypeProperl,  @AT@ 3704 @LENGTH@ 43
---INS ExpressionStatement@@MethodInvocation:Property.from("usersMame",Bar.class) @TO@ MethodDeclaration@@public, void, MethodName:handlesInvalidCollectionCompountTypeProperl,  @AT@ 3765 @LENGTH@ 38
------INS MethodInvocation@@Property.from("usersMame",Bar.class) @TO@ ExpressionStatement@@MethodInvocation:Property.from("usersMame",Bar.class) @AT@ 3765 @LENGTH@ 37
---------INS SimpleName@@Name:Property @TO@ MethodInvocation@@Property.from("usersMame",Bar.class) @AT@ 3765 @LENGTH@ 8
---------INS SimpleName@@MethodName:from:["usersMame", Bar.class] @TO@ MethodInvocation@@Property.from("usersMame",Bar.class) @AT@ 3774 @LENGTH@ 28
------------INS StringLiteral@@"usersMame" @TO@ SimpleName@@MethodName:from:["usersMame", Bar.class] @AT@ 3779 @LENGTH@ 11
------------INS TypeLiteral@@Bar.class @TO@ SimpleName@@MethodName:from:["usersMame", Bar.class] @AT@ 3792 @LENGTH@ 9


UPD MethodDeclaration@@public, static, void, MethodName:addService, final BatchBuilder batchBuilder,  @TO@ public, static, void, MethodName:addService, final ServiceTarget batchBuilder,  @AT@ 1826 @LENGTH@ 244
---UPD SingleVariableDeclaration@@final BatchBuilder batchBuilder @TO@ final ServiceTarget batchBuilder @AT@ 1856 @LENGTH@ 31
------UPD SimpleType@@BatchBuilder @TO@ ServiceTarget @AT@ 1862 @LENGTH@ 12


INS ReturnStatement@@BooleanLiteral:false @TO@ MethodDeclaration@@public, synchronized, boolean, MethodName:stopRoute, String routeId, long timeout, TimeUnit timeUnit, boolean giveUp, Exception,  @AT@ 29830 @LENGTH@ 13
---INS BooleanLiteral@@false @TO@ ReturnStatement@@BooleanLiteral:false @AT@ 29837 @LENGTH@ 5


UPD IfStatement@@if (modelNode.has(LOCAL)) {  writer.writeEmptyElement(Element.LOCAL.getLocalName());} @TO@ if (modelNode.hasDefined(LOCAL)) {  writer.writeEmptyElement(Element.LOCAL.getLocalName());} else if (modelNode.hasDefined(REMOTE)) {  writer.writeStartElement(Element.REMOTE.getLocalName());  final ModelNode remote=modelNode.get(REMOTE);  if (remote.has(HOST)) {    writeAttribute(writer,Attribute.HOST,remote.get(HOST).asString());  }  if (remote.has(PORT)) {    writeAttribute(writer,Attribute.PORT,remote.get(PORT).asString());  }  writer.writeEndElement();} @AT@ 22833 @LENGTH@ 105
---UPD MethodInvocation@@modelNode.has(LOCAL) @TO@ modelNode.hasDefined(LOCAL) @AT@ 22837 @LENGTH@ 20
------UPD SimpleName@@MethodName:has:[LOCAL] @TO@ MethodName:hasDefined:[LOCAL] @AT@ 22847 @LENGTH@ 10
---INS Block@@ElseBody:if (modelNode.hasDefined(REMOTE)) {  writer.writeStartElement(Element.REMOTE.getLocalName());  final ModelNode remote=modelNode.get(REMOTE);  if (remote.has(HOST)) {    writeAttribute(writer,Attribute.HOST,remote.get(HOST).asString());  }  if (remote.has(PORT)) {    writeAttribute(writer,Attribute.PORT,remote.get(PORT).asString());  }  writer.writeEndElement();} @TO@ IfStatement@@if (modelNode.has(LOCAL)) {  writer.writeEmptyElement(Element.LOCAL.getLocalName());} @AT@ 22959 @LENGTH@ 482
------MOV IfStatement@@if (modelNode.has(REMOTE)) {  writer.writeStartElement(Element.REMOTE.getLocalName());  final ModelNode remote=modelNode.get(REMOTE);  if (remote.has(HOST)) {    writeAttribute(writer,Attribute.HOST,remote.get(HOST).asString());  }  if (remote.has(PORT)) {    writeAttribute(writer,Attribute.PORT,remote.get(PORT).asString());  }  writer.writeEndElement();} @TO@ Block@@ElseBody:if (modelNode.hasDefined(REMOTE)) {  writer.writeStartElement(Element.REMOTE.getLocalName());  final ModelNode remote=modelNode.get(REMOTE);  if (remote.has(HOST)) {    writeAttribute(writer,Attribute.HOST,remote.get(HOST).asString());  }  if (remote.has(PORT)) {    writeAttribute(writer,Attribute.PORT,remote.get(PORT).asString());  }  writer.writeEndElement();} @AT@ 22947 @LENGTH@ 475
---------UPD MethodInvocation@@modelNode.has(REMOTE) @TO@ modelNode.hasDefined(REMOTE) @AT@ 22951 @LENGTH@ 21
------------UPD SimpleName@@MethodName:has:[REMOTE] @TO@ MethodName:hasDefined:[REMOTE] @AT@ 22961 @LENGTH@ 11


UPD IfStatement@@if (null != entity) {  idKey=entity.getIdProperty().getName();} else if (query.containsField("id")) {  idKey="id";} else if (query.containsField("_id")) {  idKey="_id";} @TO@ if (null != entity && null != entity.getIdProperty()) {  idKey=entity.getIdProperty().getName();} else if (query.containsField("id")) {  idKey="id";} else if (query.containsField("_id")) {  idKey="_id";} @AT@ 1650 @LENGTH@ 190
---INS InfixExpression@@null != entity && null != entity.getIdProperty() @TO@ IfStatement@@if (null != entity) {  idKey=entity.getIdProperty().getName();} else if (query.containsField("id")) {  idKey="id";} else if (query.containsField("_id")) {  idKey="_id";} @AT@ 1654 @LENGTH@ 48
------INS InfixExpression@@null != entity @TO@ InfixExpression@@null != entity && null != entity.getIdProperty() @AT@ 1654 @LENGTH@ 14
---------MOV NullLiteral@@null @TO@ InfixExpression@@null != entity @AT@ 1654 @LENGTH@ 4
---------MOV Operator@@!= @TO@ InfixExpression@@null != entity @AT@ 1658 @LENGTH@ 2
---------MOV SimpleName@@entity @TO@ InfixExpression@@null != entity @AT@ 1662 @LENGTH@ 6
------INS Operator@@&& @TO@ InfixExpression@@null != entity && null != entity.getIdProperty() @AT@ 1668 @LENGTH@ 2
------INS InfixExpression@@null != entity.getIdProperty() @TO@ InfixExpression@@null != entity && null != entity.getIdProperty() @AT@ 1672 @LENGTH@ 30
---------INS NullLiteral@@null @TO@ InfixExpression@@null != entity.getIdProperty() @AT@ 1672 @LENGTH@ 4
---------INS Operator@@!= @TO@ InfixExpression@@null != entity.getIdProperty() @AT@ 1676 @LENGTH@ 2
---------INS MethodInvocation@@entity.getIdProperty() @TO@ InfixExpression@@null != entity.getIdProperty() @AT@ 1680 @LENGTH@ 22
------------INS SimpleName@@Name:entity @TO@ MethodInvocation@@entity.getIdProperty() @AT@ 1680 @LENGTH@ 6
------------INS SimpleName@@MethodName:getIdProperty:[] @TO@ MethodInvocation@@entity.getIdProperty() @AT@ 1687 @LENGTH@ 15
---DEL InfixExpression@@null != entity @AT@ 1654 @LENGTH@ 14


INS ExpressionStatement@@MethodInvocation:serviceBuilder.install() @TO@ MethodDeclaration@@public, static, void, MethodName:addService, final BatchBuilder batchBuilder,  @AT@ 3953 @LENGTH@ 25
---INS MethodInvocation@@serviceBuilder.install() @TO@ ExpressionStatement@@MethodInvocation:serviceBuilder.install() @AT@ 3953 @LENGTH@ 24
------INS SimpleName@@Name:serviceBuilder @TO@ MethodInvocation@@serviceBuilder.install() @AT@ 3953 @LENGTH@ 14
------INS SimpleName@@MethodName:install:[] @TO@ MethodInvocation@@serviceBuilder.install() @AT@ 3968 @LENGTH@ 9


INS ExpressionStatement@@MethodInvocation:Thread.sleep(2000) @TO@ MethodDeclaration@@public, void, MethodName:testSuspendResume, Exception,  @AT@ 1804 @LENGTH@ 19
---INS MethodInvocation@@Thread.sleep(2000) @TO@ ExpressionStatement@@MethodInvocation:Thread.sleep(2000) @AT@ 1804 @LENGTH@ 18
------INS SimpleName@@Name:Thread @TO@ MethodInvocation@@Thread.sleep(2000) @AT@ 1804 @LENGTH@ 6
------INS SimpleName@@MethodName:sleep:[2000] @TO@ MethodInvocation@@Thread.sleep(2000) @AT@ 1811 @LENGTH@ 11
---------INS NumberLiteral@@2000 @TO@ SimpleName@@MethodName:sleep:[2000] @AT@ 1817 @LENGTH@ 4


UPD VariableDeclarationStatement@@Map<String,Class> aliasesMap=new HashMap<String,Class>(); @TO@ Map<String,Class<?>> aliasesMap=new HashMap<String,Class<?>>(); @AT@ 495 @LENGTH@ 59
---UPD ParameterizedType@@Map<String,Class> @TO@ Map<String,Class<?>> @AT@ 495 @LENGTH@ 17
------INS ParameterizedType@@Class<?> @TO@ ParameterizedType@@Map<String,Class> @AT@ 506 @LENGTH@ 8
---------MOV SimpleType@@Class @TO@ ParameterizedType@@Class<?> @AT@ 506 @LENGTH@ 5
---------INS WildcardType@@? @TO@ ParameterizedType@@Class<?> @AT@ 512 @LENGTH@ 1
---UPD VariableDeclarationFragment@@aliasesMap=new HashMap<String,Class>() @TO@ aliasesMap=new HashMap<String,Class<?>>() @AT@ 513 @LENGTH@ 40
------UPD ClassInstanceCreation@@HashMap<String,Class>[] @TO@ HashMap<String,Class<?>>[] @AT@ 526 @LENGTH@ 27
---------UPD ParameterizedType@@HashMap<String,Class> @TO@ HashMap<String,Class<?>> @AT@ 530 @LENGTH@ 21
------------INS ParameterizedType@@Class<?> @TO@ ParameterizedType@@HashMap<String,Class> @AT@ 548 @LENGTH@ 8
---------------MOV SimpleType@@Class @TO@ ParameterizedType@@Class<?> @AT@ 545 @LENGTH@ 5
---------------INS WildcardType@@? @TO@ ParameterizedType@@Class<?> @AT@ 554 @LENGTH@ 1


UPD MethodDeclaration@@protected, void, MethodName:doHandle, CommandContext ctx,  @TO@ protected, void, MethodName:doHandle, CommandContext ctx, CommandFormatException,  @AT@ 1785 @LENGTH@ 1805
---INS SimpleType@@CommandFormatException @TO@ MethodDeclaration@@protected, void, MethodName:doHandle, CommandContext ctx,  @AT@ 1884 @LENGTH@ 22


DEL ExpressionStatement@@MethodInvocation:Thread.sleep(3000) @AT@ 3143 @LENGTH@ 19
---DEL MethodInvocation@@Thread.sleep(3000) @AT@ 3143 @LENGTH@ 18
------DEL SimpleName@@Name:Thread @AT@ 3143 @LENGTH@ 6
------DEL SimpleName@@MethodName:sleep:[3000] @AT@ 3150 @LENGTH@ 11
---------DEL NumberLiteral@@3000 @AT@ 3156 @LENGTH@ 4


UPD MethodDeclaration@@public, void, MethodName:handle, ParsingContext ctx, OperationFormatException,  @TO@ public, void, MethodName:handle, ParsingContext ctx, CommandFormatException,  @AT@ 1593 @LENGTH@ 151
---UPD SimpleType@@OperationFormatException @TO@ CommandFormatException @AT@ 1659 @LENGTH@ 24


DEL MethodDeclaration@@public, void, MethodName:tearDown, Exception,  @AT@ 1458 @LENGTH@ 100
---DEL Modifier@@public @AT@ 1458 @LENGTH@ 6
---DEL PrimitiveType@@void @AT@ 1465 @LENGTH@ 4
---DEL SimpleName@@MethodName:tearDown @AT@ 1470 @LENGTH@ 8
---DEL SimpleType@@Exception @AT@ 1488 @LENGTH@ 9
---DEL ExpressionStatement@@SuperMethodInvocation:super.tearDown() @AT@ 1508 @LENGTH@ 17
------DEL SuperMethodInvocation@@super.tearDown() @AT@ 1508 @LENGTH@ 16
---------DEL SimpleName@@MethodName:tearDown:[] @AT@ 1514 @LENGTH@ 8
---DEL ExpressionStatement@@MethodInvocation:this.map.clear() @AT@ 1535 @LENGTH@ 17
------DEL MethodInvocation@@this.map.clear() @AT@ 1535 @LENGTH@ 16
---------DEL FieldAccess@@this.map @AT@ 1535 @LENGTH@ 8
------------DEL ThisExpression@@this @AT@ 1535 @LENGTH@ 4
------------DEL SimpleName@@map @AT@ 1540 @LENGTH@ 3
---------DEL SimpleName@@MethodName:clear:[] @AT@ 1544 @LENGTH@ 7


UPD EnhancedForStatement@@for (AbstractComponentDescription componentDescription : this.eeModuleDescription.getComponentDescriptions()) {  if (componentDescription instanceof SessionBeanComponentDescription) {    sessionBeans.add((SessionBeanComponentDescription)componentDescription);  }} @TO@ for (ComponentDescription componentDescription : this.eeModuleDescription.getComponentDescriptions()) {  if (componentDescription instanceof SessionBeanComponentDescription) {    sessionBeans.add((SessionBeanComponentDescription)componentDescription);  }} @AT@ 5648 @LENGTH@ 308
---UPD SingleVariableDeclaration@@AbstractComponentDescription componentDescription @TO@ ComponentDescription componentDescription @AT@ 5653 @LENGTH@ 49
------UPD SimpleType@@AbstractComponentDescription @TO@ ComponentDescription @AT@ 5653 @LENGTH@ 28


INS ExpressionStatement@@MethodInvocation:view.getConfigurators().add(new ViewConfigurator(){
  @Override public void configure(  DeploymentPhaseContext context,  ComponentConfiguration componentConfiguration,  ViewDescription description,  ViewConfiguration viewConfiguration) throws DeploymentUnitProcessingException {
    viewConfiguration.getViewPostConstructInterceptors().addFirst(new ImmediateInterceptorFactory(SessionInvocationContextInterceptor.INSTANCE));
  }
}
) @TO@ MethodDeclaration@@protected, void, MethodName:setupViewInterceptors, ViewDescription view,  @AT@ 4028 @LENGTH@ 480
---INS MethodInvocation@@view.getConfigurators().add(new ViewConfigurator(){
  @Override public void configure(  DeploymentPhaseContext context,  ComponentConfiguration componentConfiguration,  ViewDescription description,  ViewConfiguration viewConfiguration) throws DeploymentUnitProcessingException {
    viewConfiguration.getViewPostConstructInterceptors().addFirst(new ImmediateInterceptorFactory(SessionInvocationContextInterceptor.INSTANCE));
  }
}
) @TO@ ExpressionStatement@@MethodInvocation:view.getConfigurators().add(new ViewConfigurator(){
  @Override public void configure(  DeploymentPhaseContext context,  ComponentConfiguration componentConfiguration,  ViewDescription description,  ViewConfiguration viewConfiguration) throws DeploymentUnitProcessingException {
    viewConfiguration.getViewPostConstructInterceptors().addFirst(new ImmediateInterceptorFactory(SessionInvocationContextInterceptor.INSTANCE));
  }
}
) @AT@ 4028 @LENGTH@ 479
------INS MethodInvocation@@MethodName:getConfigurators:[] @TO@ MethodInvocation@@view.getConfigurators().add(new ViewConfigurator(){
  @Override public void configure(  DeploymentPhaseContext context,  ComponentConfiguration componentConfiguration,  ViewDescription description,  ViewConfiguration viewConfiguration) throws DeploymentUnitProcessingException {
    viewConfiguration.getViewPostConstructInterceptors().addFirst(new ImmediateInterceptorFactory(SessionInvocationContextInterceptor.INSTANCE));
  }
}
) @AT@ 4028 @LENGTH@ 23
------INS SimpleName@@Name:view @TO@ MethodInvocation@@view.getConfigurators().add(new ViewConfigurator(){
  @Override public void configure(  DeploymentPhaseContext context,  ComponentConfiguration componentConfiguration,  ViewDescription description,  ViewConfiguration viewConfiguration) throws DeploymentUnitProcessingException {
    viewConfiguration.getViewPostConstructInterceptors().addFirst(new ImmediateInterceptorFactory(SessionInvocationContextInterceptor.INSTANCE));
  }
}
) @AT@ 4028 @LENGTH@ 4
------INS SimpleName@@MethodName:add:[new ViewConfigurator(){
  @Override public void configure(  DeploymentPhaseContext context,  ComponentConfiguration componentConfiguration,  ViewDescription description,  ViewConfiguration viewConfiguration) throws DeploymentUnitProcessingException {
    viewConfiguration.getViewPostConstructInterceptors().addFirst(new ImmediateInterceptorFactory(SessionInvocationContextInterceptor.INSTANCE));
  }
}
] @TO@ MethodInvocation@@view.getConfigurators().add(new ViewConfigurator(){
  @Override public void configure(  DeploymentPhaseContext context,  ComponentConfiguration componentConfiguration,  ViewDescription description,  ViewConfiguration viewConfiguration) throws DeploymentUnitProcessingException {
    viewConfiguration.getViewPostConstructInterceptors().addFirst(new ImmediateInterceptorFactory(SessionInvocationContextInterceptor.INSTANCE));
  }
}
) @AT@ 4052 @LENGTH@ 455
---------INS ClassInstanceCreation@@ViewConfigurator[] @TO@ SimpleName@@MethodName:add:[new ViewConfigurator(){
  @Override public void configure(  DeploymentPhaseContext context,  ComponentConfiguration componentConfiguration,  ViewDescription description,  ViewConfiguration viewConfiguration) throws DeploymentUnitProcessingException {
    viewConfiguration.getViewPostConstructInterceptors().addFirst(new ImmediateInterceptorFactory(SessionInvocationContextInterceptor.INSTANCE));
  }
}
] @AT@ 4056 @LENGTH@ 450
------------INS New@@new @TO@ ClassInstanceCreation@@ViewConfigurator[] @AT@ 4056 @LENGTH@ 3
------------INS SimpleType@@ViewConfigurator @TO@ ClassInstanceCreation@@ViewConfigurator[] @AT@ 4060 @LENGTH@ 16
------------INS AnonymousClassDeclaration@@AnonymousClass @TO@ ClassInstanceCreation@@ViewConfigurator[] @AT@ 4079 @LENGTH@ 427
---------------INS MethodDeclaration@@public, void, MethodName:configure, DeploymentPhaseContext context, ComponentConfiguration componentConfiguration, ViewDescription description, ViewConfiguration viewConfiguration, DeploymentUnitProcessingException,  @TO@ AnonymousClassDeclaration@@AnonymousClass @AT@ 4115 @LENGTH@ 381
------------------INS Modifier@@public @TO@ MethodDeclaration@@public, void, MethodName:configure, DeploymentPhaseContext context, ComponentConfiguration componentConfiguration, ViewDescription description, ViewConfiguration viewConfiguration, DeploymentUnitProcessingException,  @AT@ 4115 @LENGTH@ 6
------------------INS PrimitiveType@@void @TO@ MethodDeclaration@@public, void, MethodName:configure, DeploymentPhaseContext context, ComponentConfiguration componentConfiguration, ViewDescription description, ViewConfiguration viewConfiguration, DeploymentUnitProcessingException,  @AT@ 4122 @LENGTH@ 4
------------------INS SimpleName@@MethodName:configure @TO@ MethodDeclaration@@public, void, MethodName:configure, DeploymentPhaseContext context, ComponentConfiguration componentConfiguration, ViewDescription description, ViewConfiguration viewConfiguration, DeploymentUnitProcessingException,  @AT@ 4127 @LENGTH@ 9
------------------INS SingleVariableDeclaration@@DeploymentPhaseContext context @TO@ MethodDeclaration@@public, void, MethodName:configure, DeploymentPhaseContext context, ComponentConfiguration componentConfiguration, ViewDescription description, ViewConfiguration viewConfiguration, DeploymentUnitProcessingException,  @AT@ 4137 @LENGTH@ 30
---------------------INS SimpleType@@DeploymentPhaseContext @TO@ SingleVariableDeclaration@@DeploymentPhaseContext context @AT@ 4137 @LENGTH@ 22
---------------------INS SimpleName@@context @TO@ SingleVariableDeclaration@@DeploymentPhaseContext context @AT@ 4160 @LENGTH@ 7
------------------INS SingleVariableDeclaration@@ComponentConfiguration componentConfiguration @TO@ MethodDeclaration@@public, void, MethodName:configure, DeploymentPhaseContext context, ComponentConfiguration componentConfiguration, ViewDescription description, ViewConfiguration viewConfiguration, DeploymentUnitProcessingException,  @AT@ 4169 @LENGTH@ 45
---------------------INS SimpleType@@ComponentConfiguration @TO@ SingleVariableDeclaration@@ComponentConfiguration componentConfiguration @AT@ 4169 @LENGTH@ 22
---------------------INS SimpleName@@componentConfiguration @TO@ SingleVariableDeclaration@@ComponentConfiguration componentConfiguration @AT@ 4192 @LENGTH@ 22
------------------INS SingleVariableDeclaration@@ViewDescription description @TO@ MethodDeclaration@@public, void, MethodName:configure, DeploymentPhaseContext context, ComponentConfiguration componentConfiguration, ViewDescription description, ViewConfiguration viewConfiguration, DeploymentUnitProcessingException,  @AT@ 4216 @LENGTH@ 27
---------------------INS SimpleType@@ViewDescription @TO@ SingleVariableDeclaration@@ViewDescription description @AT@ 4216 @LENGTH@ 15
---------------------INS SimpleName@@description @TO@ SingleVariableDeclaration@@ViewDescription description @AT@ 4232 @LENGTH@ 11
------------------INS SingleVariableDeclaration@@ViewConfiguration viewConfiguration @TO@ MethodDeclaration@@public, void, MethodName:configure, DeploymentPhaseContext context, ComponentConfiguration componentConfiguration, ViewDescription description, ViewConfiguration viewConfiguration, DeploymentUnitProcessingException,  @AT@ 4245 @LENGTH@ 35
---------------------INS SimpleType@@ViewConfiguration @TO@ SingleVariableDeclaration@@ViewConfiguration viewConfiguration @AT@ 4245 @LENGTH@ 17
---------------------INS SimpleName@@viewConfiguration @TO@ SingleVariableDeclaration@@ViewConfiguration viewConfiguration @AT@ 4263 @LENGTH@ 17
------------------INS SimpleType@@DeploymentUnitProcessingException @TO@ MethodDeclaration@@public, void, MethodName:configure, DeploymentPhaseContext context, ComponentConfiguration componentConfiguration, ViewDescription description, ViewConfiguration viewConfiguration, DeploymentUnitProcessingException,  @AT@ 4289 @LENGTH@ 33
------------------INS ExpressionStatement@@MethodInvocation:viewConfiguration.getViewPostConstructInterceptors().addFirst(new ImmediateInterceptorFactory(SessionInvocationContextInterceptor.INSTANCE)) @TO@ MethodDeclaration@@public, void, MethodName:configure, DeploymentPhaseContext context, ComponentConfiguration componentConfiguration, ViewDescription description, ViewConfiguration viewConfiguration, DeploymentUnitProcessingException,  @AT@ 4341 @LENGTH@ 141
---------------------INS MethodInvocation@@viewConfiguration.getViewPostConstructInterceptors().addFirst(new ImmediateInterceptorFactory(SessionInvocationContextInterceptor.INSTANCE)) @TO@ ExpressionStatement@@MethodInvocation:viewConfiguration.getViewPostConstructInterceptors().addFirst(new ImmediateInterceptorFactory(SessionInvocationContextInterceptor.INSTANCE)) @AT@ 4341 @LENGTH@ 140
------------------------INS MethodInvocation@@MethodName:getViewPostConstructInterceptors:[] @TO@ MethodInvocation@@viewConfiguration.getViewPostConstructInterceptors().addFirst(new ImmediateInterceptorFactory(SessionInvocationContextInterceptor.INSTANCE)) @AT@ 4341 @LENGTH@ 52
------------------------INS SimpleName@@Name:viewConfiguration @TO@ MethodInvocation@@viewConfiguration.getViewPostConstructInterceptors().addFirst(new ImmediateInterceptorFactory(SessionInvocationContextInterceptor.INSTANCE)) @AT@ 4341 @LENGTH@ 17
------------------------INS SimpleName@@MethodName:addFirst:[new ImmediateInterceptorFactory(SessionInvocationContextInterceptor.INSTANCE)] @TO@ MethodInvocation@@viewConfiguration.getViewPostConstructInterceptors().addFirst(new ImmediateInterceptorFactory(SessionInvocationContextInterceptor.INSTANCE)) @AT@ 4394 @LENGTH@ 87
---------------------------INS ClassInstanceCreation@@ImmediateInterceptorFactory[SessionInvocationContextInterceptor.INSTANCE] @TO@ SimpleName@@MethodName:addFirst:[new ImmediateInterceptorFactory(SessionInvocationContextInterceptor.INSTANCE)] @AT@ 4403 @LENGTH@ 77
------------------------------INS New@@new @TO@ ClassInstanceCreation@@ImmediateInterceptorFactory[SessionInvocationContextInterceptor.INSTANCE] @AT@ 4403 @LENGTH@ 3
------------------------------INS SimpleType@@ImmediateInterceptorFactory @TO@ ClassInstanceCreation@@ImmediateInterceptorFactory[SessionInvocationContextInterceptor.INSTANCE] @AT@ 4407 @LENGTH@ 27
------------------------------INS QualifiedName@@SessionInvocationContextInterceptor.INSTANCE @TO@ ClassInstanceCreation@@ImmediateInterceptorFactory[SessionInvocationContextInterceptor.INSTANCE] @AT@ 4435 @LENGTH@ 44
---------------------------------INS SimpleName@@SessionInvocationContextInterceptor @TO@ QualifiedName@@SessionInvocationContextInterceptor.INSTANCE @AT@ 4435 @LENGTH@ 35
---------------------------------INS SimpleName@@INSTANCE @TO@ QualifiedName@@SessionInvocationContextInterceptor.INSTANCE @AT@ 4471 @LENGTH@ 8


UPD EnhancedForStatement@@for (String clsName : v.keySet()) {  OmitFieldEntry entry=new OmitFieldEntry(clsName,v.get(clsName));  list.add(entry);} @TO@ for (Entry<String,String[]> e : v.entrySet()) {  OmitFieldEntry entry=new OmitFieldEntry(e.getKey(),e.getValue());  list.add(entry);} @AT@ 11827 @LENGTH@ 166
---UPD SingleVariableDeclaration@@String clsName @TO@ Entry<String,String[]> e @AT@ 11832 @LENGTH@ 14
------DEL SimpleType@@String @AT@ 11832 @LENGTH@ 6
------UPD SimpleName@@clsName @TO@ e @AT@ 11839 @LENGTH@ 7
------INS ParameterizedType@@Entry<String,String[]> @TO@ SingleVariableDeclaration@@String clsName @AT@ 11874 @LENGTH@ 23
---------INS SimpleType@@Entry @TO@ ParameterizedType@@Entry<String,String[]> @AT@ 11874 @LENGTH@ 5
---------INS SimpleType@@String @TO@ ParameterizedType@@Entry<String,String[]> @AT@ 11880 @LENGTH@ 6
---------INS ArrayType@@String[] @TO@ ParameterizedType@@Entry<String,String[]> @AT@ 11888 @LENGTH@ 8
------------INS SimpleType@@String @TO@ ArrayType@@String[] @AT@ 11888 @LENGTH@ 6
---UPD MethodInvocation@@v.keySet() @TO@ v.entrySet() @AT@ 11849 @LENGTH@ 10
------UPD SimpleName@@MethodName:keySet:[] @TO@ MethodName:entrySet:[] @AT@ 11851 @LENGTH@ 8
---UPD VariableDeclarationStatement@@OmitFieldEntry entry=new OmitFieldEntry(clsName,v.get(clsName)); @TO@ OmitFieldEntry entry=new OmitFieldEntry(e.getKey(),e.getValue()); @AT@ 11879 @LENGTH@ 67
------UPD VariableDeclarationFragment@@entry=new OmitFieldEntry(clsName,v.get(clsName)) @TO@ entry=new OmitFieldEntry(e.getKey(),e.getValue()) @AT@ 11894 @LENGTH@ 51
---------UPD ClassInstanceCreation@@OmitFieldEntry[clsName, v.get(clsName)] @TO@ OmitFieldEntry[e.getKey(), e.getValue()] @AT@ 11902 @LENGTH@ 43
------------DEL SimpleName@@clsName @AT@ 11921 @LENGTH@ 7
------------UPD MethodInvocation@@v.get(clsName) @TO@ e.getValue() @AT@ 11930 @LENGTH@ 14
---------------UPD SimpleName@@Name:v @TO@ Name:e @AT@ 11930 @LENGTH@ 1
---------------UPD SimpleName@@MethodName:get:[clsName] @TO@ MethodName:getValue:[] @AT@ 11932 @LENGTH@ 12
------------------DEL SimpleName@@clsName @AT@ 11936 @LENGTH@ 7
------------INS MethodInvocation@@e.getKey() @TO@ ClassInstanceCreation@@OmitFieldEntry[clsName, v.get(clsName)] @AT@ 11976 @LENGTH@ 10
---------------INS SimpleName@@Name:e @TO@ MethodInvocation@@e.getKey() @AT@ 11976 @LENGTH@ 1
---------------INS SimpleName@@MethodName:getKey:[] @TO@ MethodInvocation@@e.getKey() @AT@ 11978 @LENGTH@ 8


UPD IfStatement@@if (initialValue == null && this.operations.get(redisCounter) == null) {  set(0);} else {  set(initialValue);} @TO@ if (initialValue == null || this.operations.get(redisCounter) == null) {  set(0);} else {  set(initialValue);} @AT@ 2949 @LENGTH@ 122
---UPD InfixExpression@@initialValue == null && this.operations.get(redisCounter) == null @TO@ initialValue == null || this.operations.get(redisCounter) == null @AT@ 2953 @LENGTH@ 65
------UPD Operator@@&& @TO@ || @AT@ 2973 @LENGTH@ 2


UPD MethodDeclaration@@private, String[], MethodName:toString, Type[] types,  @TO@ private, String[], MethodName:toString, Object[] types,  @AT@ 3454 @LENGTH@ 290
---UPD SingleVariableDeclaration@@Type[] types @TO@ Object[] types @AT@ 3480 @LENGTH@ 12
------UPD ArrayType@@Type[] @TO@ Object[] @AT@ 3480 @LENGTH@ 6
---------UPD SimpleType@@Type @TO@ Object @AT@ 3480 @LENGTH@ 4


UPD ReturnStatement@@QualifiedName:SerializerUtils.EMPTY_ARRAY @TO@ QualifiedName:SerializationUtils.EMPTY_ARRAY @AT@ 1668 @LENGTH@ 35
---UPD QualifiedName@@SerializerUtils.EMPTY_ARRAY @TO@ SerializationUtils.EMPTY_ARRAY @AT@ 1675 @LENGTH@ 27
------UPD SimpleName@@SerializerUtils @TO@ SerializationUtils @AT@ 1675 @LENGTH@ 15


UPD FieldDeclaration@@public, static, final, int, [POST_MODULE_WELD_WEB_INTEGRATION=0x0100] @TO@ public, static, final, int, [PARSE_WELD_WEB_INTEGRATION=0x2B10] @AT@ 14481 @LENGTH@ 77
---UPD VariableDeclarationFragment@@POST_MODULE_WELD_WEB_INTEGRATION=0x0100 @TO@ PARSE_WELD_WEB_INTEGRATION=0x2B10 @AT@ 14505 @LENGTH@ 52
------UPD SimpleName@@POST_MODULE_WELD_WEB_INTEGRATION @TO@ PARSE_WELD_WEB_INTEGRATION @AT@ 14505 @LENGTH@ 32
------UPD NumberLiteral@@0x0100 @TO@ 0x2B10 @AT@ 14551 @LENGTH@ 6


UPD VariableDeclarationStatement@@String[][] data={{"peter","127"},{"pharma","376"},{"bergisch-gladbach","174845214"},{"mönchengladbach","664645214"},{"deutsch","28"},{"deutz","28"},{"christstollen","478256"},{"Xanthippe","48621"},{"Zacharias","8478"},{"matsch","68"},{"matz","68"},{"Arbeitsamt","071862"},{"Eberhard","01772"},{"Eberhardt","01772"},{"Müller-Lüdenscheidt","65752682"}}; @TO@ String[][] data={{"peter","127"},{"pharma","376"},{"bergisch-gladbach","174845214"},{"mönchengladbach","664645214"},{"deutsch","28"},{"deutz","28"},{"hamburg","06174"},{"hannover","0637"},{"christstollen","478256"},{"Xanthippe","48621"},{"Zacharias","8478"},{"Holzbau","0581"},{"matsch","68"},{"matz","68"},{"Arbeitsamt","071862"},{"heithabu","021"},{"Müller-Lüdenscheidt","65752682"}}; @AT@ 4088 @LENGTH@ 706
---UPD VariableDeclarationFragment@@data={{"peter","127"},{"pharma","376"},{"bergisch-gladbach","174845214"},{"mönchengladbach","664645214"},{"deutsch","28"},{"deutz","28"},{"christstollen","478256"},{"Xanthippe","48621"},{"Zacharias","8478"},{"matsch","68"},{"matz","68"},{"Arbeitsamt","071862"},{"Eberhard","01772"},{"Eberhardt","01772"},{"Müller-Lüdenscheidt","65752682"}} @TO@ data={{"peter","127"},{"pharma","376"},{"bergisch-gladbach","174845214"},{"mönchengladbach","664645214"},{"deutsch","28"},{"deutz","28"},{"hamburg","06174"},{"hannover","0637"},{"christstollen","478256"},{"Xanthippe","48621"},{"Zacharias","8478"},{"Holzbau","0581"},{"matsch","68"},{"matz","68"},{"Arbeitsamt","071862"},{"heithabu","021"},{"Müller-Lüdenscheidt","65752682"}} @AT@ 4099 @LENGTH@ 694
------UPD ArrayInitializer@@{{"peter","127"},{"pharma","376"},{"bergisch-gladbach","174845214"},{"mönchengladbach","664645214"},{"deutsch","28"},{"deutz","28"},{"christstollen","478256"},{"Xanthippe","48621"},{"Zacharias","8478"},{"matsch","68"},{"matz","68"},{"Arbeitsamt","071862"},{"Eberhard","01772"},{"Eberhardt","01772"},{"Müller-Lüdenscheidt","65752682"}} @TO@ {{"peter","127"},{"pharma","376"},{"bergisch-gladbach","174845214"},{"mönchengladbach","664645214"},{"deutsch","28"},{"deutz","28"},{"hamburg","06174"},{"hannover","0637"},{"christstollen","478256"},{"Xanthippe","48621"},{"Zacharias","8478"},{"Holzbau","0581"},{"matsch","68"},{"matz","68"},{"Arbeitsamt","071862"},{"heithabu","021"},{"Müller-Lüdenscheidt","65752682"}} @AT@ 4106 @LENGTH@ 687
---------INS ArrayInitializer@@{"hamburg","06174"} @TO@ ArrayInitializer@@{{"peter","127"},{"pharma","376"},{"bergisch-gladbach","174845214"},{"mönchengladbach","664645214"},{"deutsch","28"},{"deutz","28"},{"christstollen","478256"},{"Xanthippe","48621"},{"Zacharias","8478"},{"matsch","68"},{"matz","68"},{"Arbeitsamt","071862"},{"Eberhard","01772"},{"Eberhardt","01772"},{"Müller-Lüdenscheidt","65752682"}} @AT@ 4335 @LENGTH@ 20
------------INS StringLiteral@@"hamburg" @TO@ ArrayInitializer@@{"hamburg","06174"} @AT@ 4336 @LENGTH@ 9
------------INS StringLiteral@@"06174" @TO@ ArrayInitializer@@{"hamburg","06174"} @AT@ 4347 @LENGTH@ 7
---------INS ArrayInitializer@@{"hannover","0637"} @TO@ ArrayInitializer@@{{"peter","127"},{"pharma","376"},{"bergisch-gladbach","174845214"},{"mönchengladbach","664645214"},{"deutsch","28"},{"deutz","28"},{"christstollen","478256"},{"Xanthippe","48621"},{"Zacharias","8478"},{"matsch","68"},{"matz","68"},{"Arbeitsamt","071862"},{"Eberhard","01772"},{"Eberhardt","01772"},{"Müller-Lüdenscheidt","65752682"}} @AT@ 4369 @LENGTH@ 20
------------INS StringLiteral@@"hannover" @TO@ ArrayInitializer@@{"hannover","0637"} @AT@ 4370 @LENGTH@ 10
------------INS StringLiteral@@"0637" @TO@ ArrayInitializer@@{"hannover","0637"} @AT@ 4382 @LENGTH@ 6
---------INS ArrayInitializer@@{"Holzbau","0581"} @TO@ ArrayInitializer@@{{"peter","127"},{"pharma","376"},{"bergisch-gladbach","174845214"},{"mönchengladbach","664645214"},{"deutsch","28"},{"deutz","28"},{"christstollen","478256"},{"Xanthippe","48621"},{"Zacharias","8478"},{"matsch","68"},{"matz","68"},{"Arbeitsamt","071862"},{"Eberhard","01772"},{"Eberhardt","01772"},{"Müller-Lüdenscheidt","65752682"}} @AT@ 4515 @LENGTH@ 19
------------INS StringLiteral@@"Holzbau" @TO@ ArrayInitializer@@{"Holzbau","0581"} @AT@ 4516 @LENGTH@ 9
------------INS StringLiteral@@"0581" @TO@ ArrayInitializer@@{"Holzbau","0581"} @AT@ 4527 @LENGTH@ 6
---------UPD ArrayInitializer@@{"Eberhard","01772"} @TO@ {"heithabu","021"} @AT@ 4650 @LENGTH@ 21
------------UPD StringLiteral@@"Eberhard" @TO@ "heithabu" @AT@ 4651 @LENGTH@ 10
------------UPD StringLiteral@@"01772" @TO@ "021" @AT@ 4663 @LENGTH@ 7
---------DEL ArrayInitializer@@{"Eberhardt","01772"} @AT@ 4685 @LENGTH@ 22
------------DEL StringLiteral@@"Eberhardt" @AT@ 4686 @LENGTH@ 11
------------DEL StringLiteral@@"01772" @AT@ 4699 @LENGTH@ 7


MOV ExpressionStatement@@SuperMethodInvocation:super.setUp() @TO@ MethodDeclaration@@public, void, MethodName:setUp, Exception,  @AT@ 1462 @LENGTH@ 14


INS MethodDeclaration@@public, void, MethodName:testAabjoe,  @TO@ TypeDeclaration@@[public]ColognePhoneticTest, StringEncoderAbstractTest @AT@ 1196 @LENGTH@ 100
---INS Modifier@@public @TO@ MethodDeclaration@@public, void, MethodName:testAabjoe,  @AT@ 1196 @LENGTH@ 6
---INS PrimitiveType@@void @TO@ MethodDeclaration@@public, void, MethodName:testAabjoe,  @AT@ 1203 @LENGTH@ 4
---INS SimpleName@@MethodName:testAabjoe @TO@ MethodDeclaration@@public, void, MethodName:testAabjoe,  @AT@ 1208 @LENGTH@ 10
---INS ExpressionStatement@@MethodInvocation:assertEquals("01",new ColognePhonetic().encode("Aabjoe")) @TO@ MethodDeclaration@@public, void, MethodName:testAabjoe,  @AT@ 1231 @LENGTH@ 59
------INS MethodInvocation@@assertEquals("01",new ColognePhonetic().encode("Aabjoe")) @TO@ ExpressionStatement@@MethodInvocation:assertEquals("01",new ColognePhonetic().encode("Aabjoe")) @AT@ 1231 @LENGTH@ 58
---------INS SimpleName@@MethodName:assertEquals:["01", new ColognePhonetic().encode("Aabjoe")] @TO@ MethodInvocation@@assertEquals("01",new ColognePhonetic().encode("Aabjoe")) @AT@ 1231 @LENGTH@ 58
------------INS StringLiteral@@"01" @TO@ SimpleName@@MethodName:assertEquals:["01", new ColognePhonetic().encode("Aabjoe")] @AT@ 1244 @LENGTH@ 4
------------INS MethodInvocation@@new ColognePhonetic().encode("Aabjoe") @TO@ SimpleName@@MethodName:assertEquals:["01", new ColognePhonetic().encode("Aabjoe")] @AT@ 1250 @LENGTH@ 38
---------------INS ClassInstanceCreation@@ColognePhonetic[] @TO@ MethodInvocation@@new ColognePhonetic().encode("Aabjoe") @AT@ 1250 @LENGTH@ 21
------------------INS New@@new @TO@ ClassInstanceCreation@@ColognePhonetic[] @AT@ 1250 @LENGTH@ 3
------------------INS SimpleType@@ColognePhonetic @TO@ ClassInstanceCreation@@ColognePhonetic[] @AT@ 1254 @LENGTH@ 15
---------------INS SimpleName@@MethodName:encode:["Aabjoe"] @TO@ MethodInvocation@@new ColognePhonetic().encode("Aabjoe") @AT@ 1272 @LENGTH@ 16
------------------INS StringLiteral@@"Aabjoe" @TO@ SimpleName@@MethodName:encode:["Aabjoe"] @AT@ 1279 @LENGTH@ 8


UPD VariableDeclarationStatement@@final AttachmentList<DeploymentUnit> subDeployments=deploymentUnit.getAttachment(Attachments.SUB_DEPLOYMENTS); @TO@ final List<DeploymentUnit> subDeployments=deploymentUnit.getAttachmentList(Attachments.SUB_DEPLOYMENTS); @AT@ 11499 @LENGTH@ 112
---UPD ParameterizedType@@AttachmentList<DeploymentUnit> @TO@ List<DeploymentUnit> @AT@ 11505 @LENGTH@ 30
------UPD SimpleType@@AttachmentList @TO@ List @AT@ 11505 @LENGTH@ 14
---UPD VariableDeclarationFragment@@subDeployments=deploymentUnit.getAttachment(Attachments.SUB_DEPLOYMENTS) @TO@ subDeployments=deploymentUnit.getAttachmentList(Attachments.SUB_DEPLOYMENTS) @AT@ 11536 @LENGTH@ 74
------UPD MethodInvocation@@deploymentUnit.getAttachment(Attachments.SUB_DEPLOYMENTS) @TO@ deploymentUnit.getAttachmentList(Attachments.SUB_DEPLOYMENTS) @AT@ 11553 @LENGTH@ 57
---------UPD SimpleName@@MethodName:getAttachment:[Attachments.SUB_DEPLOYMENTS] @TO@ MethodName:getAttachmentList:[Attachments.SUB_DEPLOYMENTS] @AT@ 11568 @LENGTH@ 42


INS MethodDeclaration@@private, ModelNode, MethodName:getSingleHostResult, Map<String,ModelNode> hostResults,  @TO@ TypeDeclaration@@[public]DomainControllerImpl, AbstractModelController<Void>[DomainController, DomainControllerSlave] @AT@ 31556 @LENGTH@ 702
---INS Modifier@@private @TO@ MethodDeclaration@@private, ModelNode, MethodName:getSingleHostResult, Map<String,ModelNode> hostResults,  @AT@ 31556 @LENGTH@ 7
---INS SimpleType@@ModelNode @TO@ MethodDeclaration@@private, ModelNode, MethodName:getSingleHostResult, Map<String,ModelNode> hostResults,  @AT@ 31564 @LENGTH@ 9
---INS SimpleName@@MethodName:getSingleHostResult @TO@ MethodDeclaration@@private, ModelNode, MethodName:getSingleHostResult, Map<String,ModelNode> hostResults,  @AT@ 31574 @LENGTH@ 19
---INS SingleVariableDeclaration@@Map<String,ModelNode> hostResults @TO@ MethodDeclaration@@private, ModelNode, MethodName:getSingleHostResult, Map<String,ModelNode> hostResults,  @AT@ 31594 @LENGTH@ 34
------INS ParameterizedType@@Map<String,ModelNode> @TO@ SingleVariableDeclaration@@Map<String,ModelNode> hostResults @AT@ 31594 @LENGTH@ 22
---------INS SimpleType@@Map @TO@ ParameterizedType@@Map<String,ModelNode> @AT@ 31594 @LENGTH@ 3
---------INS SimpleType@@String @TO@ ParameterizedType@@Map<String,ModelNode> @AT@ 31598 @LENGTH@ 6
---------INS SimpleType@@ModelNode @TO@ ParameterizedType@@Map<String,ModelNode> @AT@ 31606 @LENGTH@ 9
------INS SimpleName@@hostResults @TO@ SingleVariableDeclaration@@Map<String,ModelNode> hostResults @AT@ 31617 @LENGTH@ 11
---INS VariableDeclarationStatement@@ModelNode singleHost=hostResults.get(localHostName); @TO@ MethodDeclaration@@private, ModelNode, MethodName:getSingleHostResult, Map<String,ModelNode> hostResults,  @AT@ 31640 @LENGTH@ 54
------INS SimpleType@@ModelNode @TO@ VariableDeclarationStatement@@ModelNode singleHost=hostResults.get(localHostName); @AT@ 31640 @LENGTH@ 9
------INS VariableDeclarationFragment@@singleHost=hostResults.get(localHostName) @TO@ VariableDeclarationStatement@@ModelNode singleHost=hostResults.get(localHostName); @AT@ 31650 @LENGTH@ 43
---------INS SimpleName@@singleHost @TO@ VariableDeclarationFragment@@singleHost=hostResults.get(localHostName) @AT@ 31650 @LENGTH@ 10
---------INS MethodInvocation@@hostResults.get(localHostName) @TO@ VariableDeclarationFragment@@singleHost=hostResults.get(localHostName) @AT@ 31663 @LENGTH@ 30
------------INS SimpleName@@Name:hostResults @TO@ MethodInvocation@@hostResults.get(localHostName) @AT@ 31663 @LENGTH@ 11
------------INS SimpleName@@MethodName:get:[localHostName] @TO@ MethodInvocation@@hostResults.get(localHostName) @AT@ 31675 @LENGTH@ 18
---------------INS SimpleName@@localHostName @TO@ SimpleName@@MethodName:get:[localHostName] @AT@ 31679 @LENGTH@ 13
---INS IfStatement@@if (singleHost != null && (!singleHost.hasDefined(OUTCOME) || IGNORED.equals(singleHost.get(OUTCOME).asString()))) {  singleHost=null;} @TO@ MethodDeclaration@@private, ModelNode, MethodName:getSingleHostResult, Map<String,ModelNode> hostResults,  @AT@ 31703 @LENGTH@ 173
------INS InfixExpression@@singleHost != null && (!singleHost.hasDefined(OUTCOME) || IGNORED.equals(singleHost.get(OUTCOME).asString())) @TO@ IfStatement@@if (singleHost != null && (!singleHost.hasDefined(OUTCOME) || IGNORED.equals(singleHost.get(OUTCOME).asString()))) {  singleHost=null;} @AT@ 31707 @LENGTH@ 125
---------INS InfixExpression@@singleHost != null @TO@ InfixExpression@@singleHost != null && (!singleHost.hasDefined(OUTCOME) || IGNORED.equals(singleHost.get(OUTCOME).asString())) @AT@ 31707 @LENGTH@ 18
------------INS SimpleName@@singleHost @TO@ InfixExpression@@singleHost != null @AT@ 31707 @LENGTH@ 10
------------INS Operator@@!= @TO@ InfixExpression@@singleHost != null @AT@ 31717 @LENGTH@ 2
------------INS NullLiteral@@null @TO@ InfixExpression@@singleHost != null @AT@ 31721 @LENGTH@ 4
---------INS Operator@@&& @TO@ InfixExpression@@singleHost != null && (!singleHost.hasDefined(OUTCOME) || IGNORED.equals(singleHost.get(OUTCOME).asString())) @AT@ 31725 @LENGTH@ 2
---------INS ParenthesizedExpression@@(!singleHost.hasDefined(OUTCOME) || IGNORED.equals(singleHost.get(OUTCOME).asString())) @TO@ InfixExpression@@singleHost != null && (!singleHost.hasDefined(OUTCOME) || IGNORED.equals(singleHost.get(OUTCOME).asString())) @AT@ 31745 @LENGTH@ 87
------------INS InfixExpression@@!singleHost.hasDefined(OUTCOME) || IGNORED.equals(singleHost.get(OUTCOME).asString()) @TO@ ParenthesizedExpression@@(!singleHost.hasDefined(OUTCOME) || IGNORED.equals(singleHost.get(OUTCOME).asString())) @AT@ 31746 @LENGTH@ 85
---------------INS PrefixExpression@@!singleHost.hasDefined(OUTCOME) @TO@ InfixExpression@@!singleHost.hasDefined(OUTCOME) || IGNORED.equals(singleHost.get(OUTCOME).asString()) @AT@ 31746 @LENGTH@ 31
------------------INS Operator@@! @TO@ PrefixExpression@@!singleHost.hasDefined(OUTCOME) @AT@ 31746 @LENGTH@ 1
------------------INS MethodInvocation@@singleHost.hasDefined(OUTCOME) @TO@ PrefixExpression@@!singleHost.hasDefined(OUTCOME) @AT@ 31747 @LENGTH@ 30
---------------------INS SimpleName@@Name:singleHost @TO@ MethodInvocation@@singleHost.hasDefined(OUTCOME) @AT@ 31747 @LENGTH@ 10
---------------------INS SimpleName@@MethodName:hasDefined:[OUTCOME] @TO@ MethodInvocation@@singleHost.hasDefined(OUTCOME) @AT@ 31758 @LENGTH@ 19
------------------------INS SimpleName@@OUTCOME @TO@ SimpleName@@MethodName:hasDefined:[OUTCOME] @AT@ 31769 @LENGTH@ 7
---------------INS Operator@@|| @TO@ InfixExpression@@!singleHost.hasDefined(OUTCOME) || IGNORED.equals(singleHost.get(OUTCOME).asString()) @AT@ 31777 @LENGTH@ 2
---------------INS MethodInvocation@@IGNORED.equals(singleHost.get(OUTCOME).asString()) @TO@ InfixExpression@@!singleHost.hasDefined(OUTCOME) || IGNORED.equals(singleHost.get(OUTCOME).asString()) @AT@ 31781 @LENGTH@ 50
------------------INS SimpleName@@Name:IGNORED @TO@ MethodInvocation@@IGNORED.equals(singleHost.get(OUTCOME).asString()) @AT@ 31781 @LENGTH@ 7
------------------INS SimpleName@@MethodName:equals:[singleHost.get(OUTCOME).asString()] @TO@ MethodInvocation@@IGNORED.equals(singleHost.get(OUTCOME).asString()) @AT@ 31789 @LENGTH@ 42
---------------------INS MethodInvocation@@singleHost.get(OUTCOME).asString() @TO@ SimpleName@@MethodName:equals:[singleHost.get(OUTCOME).asString()] @AT@ 31796 @LENGTH@ 34
------------------------INS MethodInvocation@@MethodName:get:[OUTCOME] @TO@ MethodInvocation@@singleHost.get(OUTCOME).asString() @AT@ 31796 @LENGTH@ 23
---------------------------INS SimpleName@@OUTCOME @TO@ MethodInvocation@@MethodName:get:[OUTCOME] @AT@ 31811 @LENGTH@ 7
------------------------INS SimpleName@@Name:singleHost @TO@ MethodInvocation@@singleHost.get(OUTCOME).asString() @AT@ 31796 @LENGTH@ 10
------------------------INS SimpleName@@MethodName:asString:[] @TO@ MethodInvocation@@singleHost.get(OUTCOME).asString() @AT@ 31820 @LENGTH@ 10
------INS Block@@ThenBody:{  singleHost=null;} @TO@ IfStatement@@if (singleHost != null && (!singleHost.hasDefined(OUTCOME) || IGNORED.equals(singleHost.get(OUTCOME).asString()))) {  singleHost=null;} @AT@ 31834 @LENGTH@ 42
---------INS ExpressionStatement@@Assignment:singleHost=null @TO@ Block@@ThenBody:{  singleHost=null;} @AT@ 31848 @LENGTH@ 18
------------INS Assignment@@singleHost=null @TO@ ExpressionStatement@@Assignment:singleHost=null @AT@ 31848 @LENGTH@ 17
---------------INS SimpleName@@singleHost @TO@ Assignment@@singleHost=null @AT@ 31848 @LENGTH@ 10
---------------INS Operator@@= @TO@ Assignment@@singleHost=null @AT@ 31858 @LENGTH@ 1
---------------INS NullLiteral@@null @TO@ Assignment@@singleHost=null @AT@ 31861 @LENGTH@ 4
---INS IfStatement@@if (singleHost == null) {  for (  ModelNode node : hostResults.values()) {    if (node.hasDefined(OUTCOME) && !IGNORED.equals(node.get(OUTCOME).asString())) {      singleHost=node;      break;    }  }} @TO@ MethodDeclaration@@private, ModelNode, MethodName:getSingleHostResult, Map<String,ModelNode> hostResults,  @AT@ 31885 @LENGTH@ 288
------INS InfixExpression@@singleHost == null @TO@ IfStatement@@if (singleHost == null) {  for (  ModelNode node : hostResults.values()) {    if (node.hasDefined(OUTCOME) && !IGNORED.equals(node.get(OUTCOME).asString())) {      singleHost=node;      break;    }  }} @AT@ 31889 @LENGTH@ 18
---------INS SimpleName@@singleHost @TO@ InfixExpression@@singleHost == null @AT@ 31889 @LENGTH@ 10
---------INS Operator@@== @TO@ InfixExpression@@singleHost == null @AT@ 31899 @LENGTH@ 2
---------INS NullLiteral@@null @TO@ InfixExpression@@singleHost == null @AT@ 31903 @LENGTH@ 4
------INS Block@@ThenBody:{  for (  ModelNode node : hostResults.values()) {    if (node.hasDefined(OUTCOME) && !IGNORED.equals(node.get(OUTCOME).asString())) {      singleHost=node;      break;    }  }} @TO@ IfStatement@@if (singleHost == null) {  for (  ModelNode node : hostResults.values()) {    if (node.hasDefined(OUTCOME) && !IGNORED.equals(node.get(OUTCOME).asString())) {      singleHost=node;      break;    }  }} @AT@ 31909 @LENGTH@ 264
---------INS EnhancedForStatement@@for (ModelNode node : hostResults.values()) {  if (node.hasDefined(OUTCOME) && !IGNORED.equals(node.get(OUTCOME).asString())) {    singleHost=node;    break;  }} @TO@ Block@@ThenBody:{  for (  ModelNode node : hostResults.values()) {    if (node.hasDefined(OUTCOME) && !IGNORED.equals(node.get(OUTCOME).asString())) {      singleHost=node;      break;    }  }} @AT@ 31923 @LENGTH@ 240
------------INS SingleVariableDeclaration@@ModelNode node @TO@ EnhancedForStatement@@for (ModelNode node : hostResults.values()) {  if (node.hasDefined(OUTCOME) && !IGNORED.equals(node.get(OUTCOME).asString())) {    singleHost=node;    break;  }} @AT@ 31928 @LENGTH@ 14
---------------INS SimpleType@@ModelNode @TO@ SingleVariableDeclaration@@ModelNode node @AT@ 31928 @LENGTH@ 9
---------------INS SimpleName@@node @TO@ SingleVariableDeclaration@@ModelNode node @AT@ 31938 @LENGTH@ 4
------------INS MethodInvocation@@hostResults.values() @TO@ EnhancedForStatement@@for (ModelNode node : hostResults.values()) {  if (node.hasDefined(OUTCOME) && !IGNORED.equals(node.get(OUTCOME).asString())) {    singleHost=node;    break;  }} @AT@ 31945 @LENGTH@ 20
---------------INS SimpleName@@Name:hostResults @TO@ MethodInvocation@@hostResults.values() @AT@ 31945 @LENGTH@ 11
---------------INS SimpleName@@MethodName:values:[] @TO@ MethodInvocation@@hostResults.values() @AT@ 31957 @LENGTH@ 8
------------INS IfStatement@@if (node.hasDefined(OUTCOME) && !IGNORED.equals(node.get(OUTCOME).asString())) {  singleHost=node;  break;} @TO@ EnhancedForStatement@@for (ModelNode node : hostResults.values()) {  if (node.hasDefined(OUTCOME) && !IGNORED.equals(node.get(OUTCOME).asString())) {    singleHost=node;    break;  }} @AT@ 31985 @LENGTH@ 164
---------------INS InfixExpression@@node.hasDefined(OUTCOME) && !IGNORED.equals(node.get(OUTCOME).asString()) @TO@ IfStatement@@if (node.hasDefined(OUTCOME) && !IGNORED.equals(node.get(OUTCOME).asString())) {  singleHost=node;  break;} @AT@ 31989 @LENGTH@ 73
------------------INS MethodInvocation@@node.hasDefined(OUTCOME) @TO@ InfixExpression@@node.hasDefined(OUTCOME) && !IGNORED.equals(node.get(OUTCOME).asString()) @AT@ 31989 @LENGTH@ 24
---------------------INS SimpleName@@Name:node @TO@ MethodInvocation@@node.hasDefined(OUTCOME) @AT@ 31989 @LENGTH@ 4
---------------------INS SimpleName@@MethodName:hasDefined:[OUTCOME] @TO@ MethodInvocation@@node.hasDefined(OUTCOME) @AT@ 31994 @LENGTH@ 19
------------------------INS SimpleName@@OUTCOME @TO@ SimpleName@@MethodName:hasDefined:[OUTCOME] @AT@ 32005 @LENGTH@ 7
------------------INS Operator@@&& @TO@ InfixExpression@@node.hasDefined(OUTCOME) && !IGNORED.equals(node.get(OUTCOME).asString()) @AT@ 32013 @LENGTH@ 2
------------------INS PrefixExpression@@!IGNORED.equals(node.get(OUTCOME).asString()) @TO@ InfixExpression@@node.hasDefined(OUTCOME) && !IGNORED.equals(node.get(OUTCOME).asString()) @AT@ 32017 @LENGTH@ 45
---------------------INS Operator@@! @TO@ PrefixExpression@@!IGNORED.equals(node.get(OUTCOME).asString()) @AT@ 32017 @LENGTH@ 1
---------------------INS MethodInvocation@@IGNORED.equals(node.get(OUTCOME).asString()) @TO@ PrefixExpression@@!IGNORED.equals(node.get(OUTCOME).asString()) @AT@ 32018 @LENGTH@ 44
------------------------INS SimpleName@@Name:IGNORED @TO@ MethodInvocation@@IGNORED.equals(node.get(OUTCOME).asString()) @AT@ 32018 @LENGTH@ 7
------------------------INS SimpleName@@MethodName:equals:[node.get(OUTCOME).asString()] @TO@ MethodInvocation@@IGNORED.equals(node.get(OUTCOME).asString()) @AT@ 32026 @LENGTH@ 36
---------------------------INS MethodInvocation@@node.get(OUTCOME).asString() @TO@ SimpleName@@MethodName:equals:[node.get(OUTCOME).asString()] @AT@ 32033 @LENGTH@ 28
------------------------------INS MethodInvocation@@MethodName:get:[OUTCOME] @TO@ MethodInvocation@@node.get(OUTCOME).asString() @AT@ 32033 @LENGTH@ 17
---------------------------------INS SimpleName@@OUTCOME @TO@ MethodInvocation@@MethodName:get:[OUTCOME] @AT@ 32042 @LENGTH@ 7
------------------------------INS SimpleName@@Name:node @TO@ MethodInvocation@@node.get(OUTCOME).asString() @AT@ 32033 @LENGTH@ 4
------------------------------INS SimpleName@@MethodName:asString:[] @TO@ MethodInvocation@@node.get(OUTCOME).asString() @AT@ 32051 @LENGTH@ 10
---------------INS Block@@ThenBody:{  singleHost=node;  break;} @TO@ IfStatement@@if (node.hasDefined(OUTCOME) && !IGNORED.equals(node.get(OUTCOME).asString())) {  singleHost=node;  break;} @AT@ 32064 @LENGTH@ 85
------------------INS ExpressionStatement@@Assignment:singleHost=node @TO@ Block@@ThenBody:{  singleHost=node;  break;} @AT@ 32086 @LENGTH@ 18
---------------------INS Assignment@@singleHost=node @TO@ ExpressionStatement@@Assignment:singleHost=node @AT@ 32086 @LENGTH@ 17
------------------------INS SimpleName@@singleHost @TO@ Assignment@@singleHost=node @AT@ 32086 @LENGTH@ 10
------------------------INS Operator@@= @TO@ Assignment@@singleHost=node @AT@ 32096 @LENGTH@ 1
------------------------INS SimpleName@@node @TO@ Assignment@@singleHost=node @AT@ 32099 @LENGTH@ 4
------------------INS BreakStatement@@ @TO@ Block@@ThenBody:{  singleHost=node;  break;} @AT@ 32125 @LENGTH@ 6
---INS ReturnStatement@@ConditionalExpression:singleHost == null ? new ModelNode() : singleHost.get(RESULT) @TO@ MethodDeclaration@@private, ModelNode, MethodName:getSingleHostResult, Map<String,ModelNode> hostResults,  @AT@ 32183 @LENGTH@ 69
------INS ConditionalExpression@@singleHost == null ? new ModelNode() : singleHost.get(RESULT) @TO@ ReturnStatement@@ConditionalExpression:singleHost == null ? new ModelNode() : singleHost.get(RESULT) @AT@ 32190 @LENGTH@ 61
---------INS InfixExpression@@singleHost == null @TO@ ConditionalExpression@@singleHost == null ? new ModelNode() : singleHost.get(RESULT) @AT@ 32190 @LENGTH@ 18
------------INS SimpleName@@singleHost @TO@ InfixExpression@@singleHost == null @AT@ 32190 @LENGTH@ 10
------------INS Operator@@== @TO@ InfixExpression@@singleHost == null @AT@ 32200 @LENGTH@ 2
------------INS NullLiteral@@null @TO@ InfixExpression@@singleHost == null @AT@ 32204 @LENGTH@ 4
---------INS ClassInstanceCreation@@ModelNode[] @TO@ ConditionalExpression@@singleHost == null ? new ModelNode() : singleHost.get(RESULT) @AT@ 32211 @LENGTH@ 15
------------INS New@@new @TO@ ClassInstanceCreation@@ModelNode[] @AT@ 32211 @LENGTH@ 3
------------INS SimpleType@@ModelNode @TO@ ClassInstanceCreation@@ModelNode[] @AT@ 32215 @LENGTH@ 9
---------INS MethodInvocation@@singleHost.get(RESULT) @TO@ ConditionalExpression@@singleHost == null ? new ModelNode() : singleHost.get(RESULT) @AT@ 32229 @LENGTH@ 22
------------INS SimpleName@@Name:singleHost @TO@ MethodInvocation@@singleHost.get(RESULT) @AT@ 32229 @LENGTH@ 10
------------INS SimpleName@@MethodName:get:[RESULT] @TO@ MethodInvocation@@singleHost.get(RESULT) @AT@ 32240 @LENGTH@ 11
---------------INS SimpleName@@RESULT @TO@ SimpleName@@MethodName:get:[RESULT] @AT@ 32244 @LENGTH@ 6


INS MethodDeclaration@@public, static, int, MethodName:getTracerPort,  @TO@ TypeDeclaration@@[public]BrokerTestUtils,  @AT@ 1465 @LENGTH@ 60
---INS Modifier@@public @TO@ MethodDeclaration@@public, static, int, MethodName:getTracerPort,  @AT@ 1465 @LENGTH@ 6
---INS Modifier@@static @TO@ MethodDeclaration@@public, static, int, MethodName:getTracerPort,  @AT@ 1472 @LENGTH@ 6
---INS PrimitiveType@@int @TO@ MethodDeclaration@@public, static, int, MethodName:getTracerPort,  @AT@ 1479 @LENGTH@ 3
---INS SimpleName@@MethodName:getTracerPort @TO@ MethodDeclaration@@public, static, int, MethodName:getTracerPort,  @AT@ 1483 @LENGTH@ 13
---INS ReturnStatement@@SimpleName:TRACER_PORT @TO@ MethodDeclaration@@public, static, int, MethodName:getTracerPort,  @AT@ 1503 @LENGTH@ 19
------INS SimpleName@@TRACER_PORT @TO@ ReturnStatement@@SimpleName:TRACER_PORT @AT@ 1510 @LENGTH@ 11


DEL ExpressionStatement@@MethodInvocation:ObjectFactoryBuilder.INSTANCE.setServiceRegistry(context.getServiceRegistry()) @AT@ 3495 @LENGTH@ 79
---DEL MethodInvocation@@ObjectFactoryBuilder.INSTANCE.setServiceRegistry(context.getServiceRegistry()) @AT@ 3495 @LENGTH@ 78
------DEL QualifiedName@@Name:ObjectFactoryBuilder.INSTANCE @AT@ 3495 @LENGTH@ 29
------DEL SimpleName@@MethodName:setServiceRegistry:[context.getServiceRegistry()] @AT@ 3525 @LENGTH@ 48
---------DEL MethodInvocation@@context.getServiceRegistry() @AT@ 3544 @LENGTH@ 28
------------DEL SimpleName@@Name:context @AT@ 3544 @LENGTH@ 7
------------DEL SimpleName@@MethodName:getServiceRegistry:[] @AT@ 3552 @LENGTH@ 20


INS IfStatement@@if (resource.equals("")) {  InetSocketAddress address=http.getHttpContext().getServer().getAddress();  String hostName=address.getHostName();  int port=address.getPort();  final Headers responseHeaders=http.getResponseHeaders();  responseHeaders.add("Content-Type","text/html");  responseHeaders.add("Location","http://" + hostName + ":"+ port+ "/console/index.html");  http.sendResponseHeaders(302,0);  OutputStream outputStream=http.getResponseBody();  outputStream.flush();  safeClose(outputStream);  return;} else if (resource.indexOf(".") == -1) {  respond404(http);} @TO@ MethodDeclaration@@public, void, MethodName:handle, HttpExchange http, IOException,  @AT@ 1896 @LENGTH@ 799
---MOV MethodInvocation@@resource.equals("") @TO@ IfStatement@@if (resource.equals("")) {  InetSocketAddress address=http.getHttpContext().getServer().getAddress();  String hostName=address.getHostName();  int port=address.getPort();  final Headers responseHeaders=http.getResponseHeaders();  responseHeaders.add("Content-Type","text/html");  responseHeaders.add("Location","http://" + hostName + ":"+ port+ "/console/index.html");  http.sendResponseHeaders(302,0);  OutputStream outputStream=http.getResponseBody();  outputStream.flush();  safeClose(outputStream);  return;} else if (resource.indexOf(".") == -1) {  respond404(http);} @AT@ 1904 @LENGTH@ 19
---INS Block@@ThenBody:{  InetSocketAddress address=http.getHttpContext().getServer().getAddress();  String hostName=address.getHostName();  int port=address.getPort();  final Headers responseHeaders=http.getResponseHeaders();  responseHeaders.add("Content-Type","text/html");  responseHeaders.add("Location","http://" + hostName + ":"+ port+ "/console/index.html");  http.sendResponseHeaders(302,0);  OutputStream outputStream=http.getResponseBody();  outputStream.flush();  safeClose(outputStream);  return;} @TO@ IfStatement@@if (resource.equals("")) {  InetSocketAddress address=http.getHttpContext().getServer().getAddress();  String hostName=address.getHostName();  int port=address.getPort();  final Headers responseHeaders=http.getResponseHeaders();  responseHeaders.add("Content-Type","text/html");  responseHeaders.add("Location","http://" + hostName + ":"+ port+ "/console/index.html");  http.sendResponseHeaders(302,0);  OutputStream outputStream=http.getResponseBody();  outputStream.flush();  safeClose(outputStream);  return;} else if (resource.indexOf(".") == -1) {  respond404(http);} @AT@ 1920 @LENGTH@ 698
------INS VariableDeclarationStatement@@InetSocketAddress address=http.getHttpContext().getServer().getAddress(); @TO@ Block@@ThenBody:{  InetSocketAddress address=http.getHttpContext().getServer().getAddress();  String hostName=address.getHostName();  int port=address.getPort();  final Headers responseHeaders=http.getResponseHeaders();  responseHeaders.add("Content-Type","text/html");  responseHeaders.add("Location","http://" + hostName + ":"+ port+ "/console/index.html");  http.sendResponseHeaders(302,0);  OutputStream outputStream=http.getResponseBody();  outputStream.flush();  safeClose(outputStream);  return;} @AT@ 2003 @LENGTH@ 75
---------INS SimpleType@@InetSocketAddress @TO@ VariableDeclarationStatement@@InetSocketAddress address=http.getHttpContext().getServer().getAddress(); @AT@ 2003 @LENGTH@ 17
---------INS VariableDeclarationFragment@@address=http.getHttpContext().getServer().getAddress() @TO@ VariableDeclarationStatement@@InetSocketAddress address=http.getHttpContext().getServer().getAddress(); @AT@ 2021 @LENGTH@ 56
------------INS SimpleName@@address @TO@ VariableDeclarationFragment@@address=http.getHttpContext().getServer().getAddress() @AT@ 2021 @LENGTH@ 7
------------INS MethodInvocation@@http.getHttpContext().getServer().getAddress() @TO@ VariableDeclarationFragment@@address=http.getHttpContext().getServer().getAddress() @AT@ 2031 @LENGTH@ 46
---------------INS MethodInvocation@@MethodName:getServer:[] @TO@ MethodInvocation@@http.getHttpContext().getServer().getAddress() @AT@ 2031 @LENGTH@ 33
---------------INS MethodInvocation@@MethodName:getHttpContext:[] @TO@ MethodInvocation@@http.getHttpContext().getServer().getAddress() @AT@ 2031 @LENGTH@ 21
---------------INS SimpleName@@Name:http @TO@ MethodInvocation@@http.getHttpContext().getServer().getAddress() @AT@ 2031 @LENGTH@ 4
---------------INS SimpleName@@MethodName:getAddress:[] @TO@ MethodInvocation@@http.getHttpContext().getServer().getAddress() @AT@ 2065 @LENGTH@ 12
------INS VariableDeclarationStatement@@String hostName=address.getHostName(); @TO@ Block@@ThenBody:{  InetSocketAddress address=http.getHttpContext().getServer().getAddress();  String hostName=address.getHostName();  int port=address.getPort();  final Headers responseHeaders=http.getResponseHeaders();  responseHeaders.add("Content-Type","text/html");  responseHeaders.add("Location","http://" + hostName + ":"+ port+ "/console/index.html");  http.sendResponseHeaders(302,0);  OutputStream outputStream=http.getResponseBody();  outputStream.flush();  safeClose(outputStream);  return;} @AT@ 2091 @LENGTH@ 40
---------INS SimpleType@@String @TO@ VariableDeclarationStatement@@String hostName=address.getHostName(); @AT@ 2091 @LENGTH@ 6
---------INS VariableDeclarationFragment@@hostName=address.getHostName() @TO@ VariableDeclarationStatement@@String hostName=address.getHostName(); @AT@ 2098 @LENGTH@ 32
------------INS SimpleName@@hostName @TO@ VariableDeclarationFragment@@hostName=address.getHostName() @AT@ 2098 @LENGTH@ 8
------------INS MethodInvocation@@address.getHostName() @TO@ VariableDeclarationFragment@@hostName=address.getHostName() @AT@ 2109 @LENGTH@ 21
---------------INS SimpleName@@Name:address @TO@ MethodInvocation@@address.getHostName() @AT@ 2109 @LENGTH@ 7
---------------INS SimpleName@@MethodName:getHostName:[] @TO@ MethodInvocation@@address.getHostName() @AT@ 2117 @LENGTH@ 13
------INS VariableDeclarationStatement@@int port=address.getPort(); @TO@ Block@@ThenBody:{  InetSocketAddress address=http.getHttpContext().getServer().getAddress();  String hostName=address.getHostName();  int port=address.getPort();  final Headers responseHeaders=http.getResponseHeaders();  responseHeaders.add("Content-Type","text/html");  responseHeaders.add("Location","http://" + hostName + ":"+ port+ "/console/index.html");  http.sendResponseHeaders(302,0);  OutputStream outputStream=http.getResponseBody();  outputStream.flush();  safeClose(outputStream);  return;} @AT@ 2144 @LENGTH@ 29
---------INS PrimitiveType@@int @TO@ VariableDeclarationStatement@@int port=address.getPort(); @AT@ 2144 @LENGTH@ 3
---------INS VariableDeclarationFragment@@port=address.getPort() @TO@ VariableDeclarationStatement@@int port=address.getPort(); @AT@ 2148 @LENGTH@ 24
------------INS SimpleName@@port @TO@ VariableDeclarationFragment@@port=address.getPort() @AT@ 2148 @LENGTH@ 4
------------INS MethodInvocation@@address.getPort() @TO@ VariableDeclarationFragment@@port=address.getPort() @AT@ 2155 @LENGTH@ 17
---------------INS SimpleName@@Name:address @TO@ MethodInvocation@@address.getPort() @AT@ 2155 @LENGTH@ 7
---------------INS SimpleName@@MethodName:getPort:[] @TO@ MethodInvocation@@address.getPort() @AT@ 2163 @LENGTH@ 9
------INS VariableDeclarationStatement@@final Headers responseHeaders=http.getResponseHeaders(); @TO@ Block@@ThenBody:{  InetSocketAddress address=http.getHttpContext().getServer().getAddress();  String hostName=address.getHostName();  int port=address.getPort();  final Headers responseHeaders=http.getResponseHeaders();  responseHeaders.add("Content-Type","text/html");  responseHeaders.add("Location","http://" + hostName + ":"+ port+ "/console/index.html");  http.sendResponseHeaders(302,0);  OutputStream outputStream=http.getResponseBody();  outputStream.flush();  safeClose(outputStream);  return;} @AT@ 2186 @LENGTH@ 58
---------INS Modifier@@final @TO@ VariableDeclarationStatement@@final Headers responseHeaders=http.getResponseHeaders(); @AT@ 2186 @LENGTH@ 5
---------INS SimpleType@@Headers @TO@ VariableDeclarationStatement@@final Headers responseHeaders=http.getResponseHeaders(); @AT@ 2192 @LENGTH@ 7
---------INS VariableDeclarationFragment@@responseHeaders=http.getResponseHeaders() @TO@ VariableDeclarationStatement@@final Headers responseHeaders=http.getResponseHeaders(); @AT@ 2200 @LENGTH@ 43
------------INS SimpleName@@responseHeaders @TO@ VariableDeclarationFragment@@responseHeaders=http.getResponseHeaders() @AT@ 2200 @LENGTH@ 15
------------INS MethodInvocation@@http.getResponseHeaders() @TO@ VariableDeclarationFragment@@responseHeaders=http.getResponseHeaders() @AT@ 2218 @LENGTH@ 25
---------------INS SimpleName@@Name:http @TO@ MethodInvocation@@http.getResponseHeaders() @AT@ 2218 @LENGTH@ 4
---------------INS SimpleName@@MethodName:getResponseHeaders:[] @TO@ MethodInvocation@@http.getResponseHeaders() @AT@ 2223 @LENGTH@ 20
------INS ExpressionStatement@@MethodInvocation:responseHeaders.add("Content-Type","text/html") @TO@ Block@@ThenBody:{  InetSocketAddress address=http.getHttpContext().getServer().getAddress();  String hostName=address.getHostName();  int port=address.getPort();  final Headers responseHeaders=http.getResponseHeaders();  responseHeaders.add("Content-Type","text/html");  responseHeaders.add("Location","http://" + hostName + ":"+ port+ "/console/index.html");  http.sendResponseHeaders(302,0);  OutputStream outputStream=http.getResponseBody();  outputStream.flush();  safeClose(outputStream);  return;} @AT@ 2257 @LENGTH@ 49
---------INS MethodInvocation@@responseHeaders.add("Content-Type","text/html") @TO@ ExpressionStatement@@MethodInvocation:responseHeaders.add("Content-Type","text/html") @AT@ 2257 @LENGTH@ 48
------------INS SimpleName@@Name:responseHeaders @TO@ MethodInvocation@@responseHeaders.add("Content-Type","text/html") @AT@ 2257 @LENGTH@ 15
------------INS SimpleName@@MethodName:add:["Content-Type", "text/html"] @TO@ MethodInvocation@@responseHeaders.add("Content-Type","text/html") @AT@ 2273 @LENGTH@ 32
---------------INS StringLiteral@@"Content-Type" @TO@ SimpleName@@MethodName:add:["Content-Type", "text/html"] @AT@ 2277 @LENGTH@ 14
---------------INS StringLiteral@@"text/html" @TO@ SimpleName@@MethodName:add:["Content-Type", "text/html"] @AT@ 2293 @LENGTH@ 11
------INS ExpressionStatement@@MethodInvocation:responseHeaders.add("Location","http://" + hostName + ":"+ port+ "/console/index.html") @TO@ Block@@ThenBody:{  InetSocketAddress address=http.getHttpContext().getServer().getAddress();  String hostName=address.getHostName();  int port=address.getPort();  final Headers responseHeaders=http.getResponseHeaders();  responseHeaders.add("Content-Type","text/html");  responseHeaders.add("Location","http://" + hostName + ":"+ port+ "/console/index.html");  http.sendResponseHeaders(302,0);  OutputStream outputStream=http.getResponseBody();  outputStream.flush();  safeClose(outputStream);  return;} @AT@ 2319 @LENGTH@ 85
---------INS MethodInvocation@@responseHeaders.add("Location","http://" + hostName + ":"+ port+ "/console/index.html") @TO@ ExpressionStatement@@MethodInvocation:responseHeaders.add("Location","http://" + hostName + ":"+ port+ "/console/index.html") @AT@ 2319 @LENGTH@ 84
------------INS SimpleName@@Name:responseHeaders @TO@ MethodInvocation@@responseHeaders.add("Location","http://" + hostName + ":"+ port+ "/console/index.html") @AT@ 2319 @LENGTH@ 15
------------INS SimpleName@@MethodName:add:["Location", "http://" + hostName + ":"+ port+ "/console/index.html"] @TO@ MethodInvocation@@responseHeaders.add("Location","http://" + hostName + ":"+ port+ "/console/index.html") @AT@ 2335 @LENGTH@ 68
---------------INS StringLiteral@@"Location" @TO@ SimpleName@@MethodName:add:["Location", "http://" + hostName + ":"+ port+ "/console/index.html"] @AT@ 2339 @LENGTH@ 10
---------------INS InfixExpression@@"http://" + hostName + ":"+ port+ "/console/index.html" @TO@ SimpleName@@MethodName:add:["Location", "http://" + hostName + ":"+ port+ "/console/index.html"] @AT@ 2351 @LENGTH@ 51
------------------INS StringLiteral@@"http://" @TO@ InfixExpression@@"http://" + hostName + ":"+ port+ "/console/index.html" @AT@ 2351 @LENGTH@ 9
------------------INS Operator@@+ @TO@ InfixExpression@@"http://" + hostName + ":"+ port+ "/console/index.html" @AT@ 2360 @LENGTH@ 1
------------------INS SimpleName@@hostName @TO@ InfixExpression@@"http://" + hostName + ":"+ port+ "/console/index.html" @AT@ 2361 @LENGTH@ 8
------------------INS StringLiteral@@":" @TO@ InfixExpression@@"http://" + hostName + ":"+ port+ "/console/index.html" @AT@ 2372 @LENGTH@ 3
------------------INS SimpleName@@port @TO@ InfixExpression@@"http://" + hostName + ":"+ port+ "/console/index.html" @AT@ 2376 @LENGTH@ 4
------------------INS StringLiteral@@"/console/index.html" @TO@ InfixExpression@@"http://" + hostName + ":"+ port+ "/console/index.html" @AT@ 2381 @LENGTH@ 21
------INS ExpressionStatement@@MethodInvocation:http.sendResponseHeaders(302,0) @TO@ Block@@ThenBody:{  InetSocketAddress address=http.getHttpContext().getServer().getAddress();  String hostName=address.getHostName();  int port=address.getPort();  final Headers responseHeaders=http.getResponseHeaders();  responseHeaders.add("Content-Type","text/html");  responseHeaders.add("Location","http://" + hostName + ":"+ port+ "/console/index.html");  http.sendResponseHeaders(302,0);  OutputStream outputStream=http.getResponseBody();  outputStream.flush();  safeClose(outputStream);  return;} @AT@ 2417 @LENGTH@ 33
---------INS MethodInvocation@@http.sendResponseHeaders(302,0) @TO@ ExpressionStatement@@MethodInvocation:http.sendResponseHeaders(302,0) @AT@ 2417 @LENGTH@ 32
------------INS SimpleName@@Name:http @TO@ MethodInvocation@@http.sendResponseHeaders(302,0) @AT@ 2417 @LENGTH@ 4
------------INS SimpleName@@MethodName:sendResponseHeaders:[302, 0] @TO@ MethodInvocation@@http.sendResponseHeaders(302,0) @AT@ 2422 @LENGTH@ 27
---------------INS NumberLiteral@@302 @TO@ SimpleName@@MethodName:sendResponseHeaders:[302, 0] @AT@ 2442 @LENGTH@ 3
---------------INS NumberLiteral@@0 @TO@ SimpleName@@MethodName:sendResponseHeaders:[302, 0] @AT@ 2447 @LENGTH@ 1
------INS VariableDeclarationStatement@@OutputStream outputStream=http.getResponseBody(); @TO@ Block@@ThenBody:{  InetSocketAddress address=http.getHttpContext().getServer().getAddress();  String hostName=address.getHostName();  int port=address.getPort();  final Headers responseHeaders=http.getResponseHeaders();  responseHeaders.add("Content-Type","text/html");  responseHeaders.add("Location","http://" + hostName + ":"+ port+ "/console/index.html");  http.sendResponseHeaders(302,0);  OutputStream outputStream=http.getResponseBody();  outputStream.flush();  safeClose(outputStream);  return;} @AT@ 2465 @LENGTH@ 51
---------INS SimpleType@@OutputStream @TO@ VariableDeclarationStatement@@OutputStream outputStream=http.getResponseBody(); @AT@ 2465 @LENGTH@ 12
---------INS VariableDeclarationFragment@@outputStream=http.getResponseBody() @TO@ VariableDeclarationStatement@@OutputStream outputStream=http.getResponseBody(); @AT@ 2478 @LENGTH@ 37
------------INS SimpleName@@outputStream @TO@ VariableDeclarationFragment@@outputStream=http.getResponseBody() @AT@ 2478 @LENGTH@ 12
------------INS MethodInvocation@@http.getResponseBody() @TO@ VariableDeclarationFragment@@outputStream=http.getResponseBody() @AT@ 2493 @LENGTH@ 22
---------------INS SimpleName@@Name:http @TO@ MethodInvocation@@http.getResponseBody() @AT@ 2493 @LENGTH@ 4
---------------INS SimpleName@@MethodName:getResponseBody:[] @TO@ MethodInvocation@@http.getResponseBody() @AT@ 2498 @LENGTH@ 17
------INS ExpressionStatement@@MethodInvocation:outputStream.flush() @TO@ Block@@ThenBody:{  InetSocketAddress address=http.getHttpContext().getServer().getAddress();  String hostName=address.getHostName();  int port=address.getPort();  final Headers responseHeaders=http.getResponseHeaders();  responseHeaders.add("Content-Type","text/html");  responseHeaders.add("Location","http://" + hostName + ":"+ port+ "/console/index.html");  http.sendResponseHeaders(302,0);  OutputStream outputStream=http.getResponseBody();  outputStream.flush();  safeClose(outputStream);  return;} @AT@ 2529 @LENGTH@ 21
---------INS MethodInvocation@@outputStream.flush() @TO@ ExpressionStatement@@MethodInvocation:outputStream.flush() @AT@ 2529 @LENGTH@ 20
------------INS SimpleName@@Name:outputStream @TO@ MethodInvocation@@outputStream.flush() @AT@ 2529 @LENGTH@ 12
------------INS SimpleName@@MethodName:flush:[] @TO@ MethodInvocation@@outputStream.flush() @AT@ 2542 @LENGTH@ 7
------INS ExpressionStatement@@MethodInvocation:safeClose(outputStream) @TO@ Block@@ThenBody:{  InetSocketAddress address=http.getHttpContext().getServer().getAddress();  String hostName=address.getHostName();  int port=address.getPort();  final Headers responseHeaders=http.getResponseHeaders();  responseHeaders.add("Content-Type","text/html");  responseHeaders.add("Location","http://" + hostName + ":"+ port+ "/console/index.html");  http.sendResponseHeaders(302,0);  OutputStream outputStream=http.getResponseBody();  outputStream.flush();  safeClose(outputStream);  return;} @AT@ 2563 @LENGTH@ 24
---------INS MethodInvocation@@safeClose(outputStream) @TO@ ExpressionStatement@@MethodInvocation:safeClose(outputStream) @AT@ 2563 @LENGTH@ 23
------------INS SimpleName@@MethodName:safeClose:[outputStream] @TO@ MethodInvocation@@safeClose(outputStream) @AT@ 2563 @LENGTH@ 23
---------------INS SimpleName@@outputStream @TO@ SimpleName@@MethodName:safeClose:[outputStream] @AT@ 2573 @LENGTH@ 12
------INS ReturnStatement@@ @TO@ Block@@ThenBody:{  InetSocketAddress address=http.getHttpContext().getServer().getAddress();  String hostName=address.getHostName();  int port=address.getPort();  final Headers responseHeaders=http.getResponseHeaders();  responseHeaders.add("Content-Type","text/html");  responseHeaders.add("Location","http://" + hostName + ":"+ port+ "/console/index.html");  http.sendResponseHeaders(302,0);  OutputStream outputStream=http.getResponseBody();  outputStream.flush();  safeClose(outputStream);  return;} @AT@ 2601 @LENGTH@ 7
---INS Block@@ElseBody:if (resource.indexOf(".") == -1) {  respond404(http);} @TO@ IfStatement@@if (resource.equals("")) {  InetSocketAddress address=http.getHttpContext().getServer().getAddress();  String hostName=address.getHostName();  int port=address.getPort();  final Headers responseHeaders=http.getResponseHeaders();  responseHeaders.add("Content-Type","text/html");  responseHeaders.add("Location","http://" + hostName + ":"+ port+ "/console/index.html");  http.sendResponseHeaders(302,0);  OutputStream outputStream=http.getResponseBody();  outputStream.flush();  safeClose(outputStream);  return;} else if (resource.indexOf(".") == -1) {  respond404(http);} @AT@ 2624 @LENGTH@ 71
------MOV IfStatement@@if (resource.equals("") || resource.indexOf(".") == -1) respond404(http); @TO@ Block@@ElseBody:if (resource.indexOf(".") == -1) {  respond404(http);} @AT@ 1901 @LENGTH@ 70
---------DEL InfixExpression@@resource.equals("") || resource.indexOf(".") == -1 @AT@ 1904 @LENGTH@ 48
------------DEL Operator@@|| @AT@ 1923 @LENGTH@ 2
---------MOV InfixExpression@@resource.indexOf(".") == -1 @TO@ IfStatement@@if (resource.equals("") || resource.indexOf(".") == -1) respond404(http); @AT@ 1927 @LENGTH@ 25
---------UPD Block@@ThenBody:respond404(http); @TO@ ThenBody:{  respond404(http);} @AT@ 1954 @LENGTH@ 17


UPD MethodDeclaration@@public, static, void, MethodName:addService, ServerEnvironment serverEnvironment, BatchBuilder batchBuilder,  @TO@ public, static, void, MethodName:addService, ServerEnvironment serverEnvironment, ServiceTarget target,  @AT@ 2892 @LENGTH@ 220
---UPD SingleVariableDeclaration@@BatchBuilder batchBuilder @TO@ ServiceTarget target @AT@ 2959 @LENGTH@ 25
------UPD SimpleType@@BatchBuilder @TO@ ServiceTarget @AT@ 2959 @LENGTH@ 12
------UPD SimpleName@@batchBuilder @TO@ target @AT@ 2972 @LENGTH@ 12
---UPD ExpressionStatement@@MethodInvocation:batchBuilder.addService(SERVICE_NAME,new ServerEnvironmentService(serverEnvironment)).install() @TO@ MethodInvocation:target.addService(SERVICE_NAME,new ServerEnvironmentService(serverEnvironment)).install() @AT@ 2996 @LENGTH@ 110
------UPD MethodInvocation@@batchBuilder.addService(SERVICE_NAME,new ServerEnvironmentService(serverEnvironment)).install() @TO@ target.addService(SERVICE_NAME,new ServerEnvironmentService(serverEnvironment)).install() @AT@ 2996 @LENGTH@ 109
---------UPD SimpleName@@Name:batchBuilder @TO@ Name:target @AT@ 2996 @LENGTH@ 12


INS MethodDeclaration@@void, MethodName:onClose, Connection connection,  @TO@ TypeDeclaration@@[public]ConnectionListener,  @AT@ 792 @LENGTH@ 31
---INS PrimitiveType@@void @TO@ MethodDeclaration@@void, MethodName:onClose, Connection connection,  @AT@ 787 @LENGTH@ 4
---INS SimpleName@@MethodName:onClose @TO@ MethodDeclaration@@void, MethodName:onClose, Connection connection,  @AT@ 792 @LENGTH@ 7
---INS SingleVariableDeclaration@@Connection connection @TO@ MethodDeclaration@@void, MethodName:onClose, Connection connection,  @AT@ 800 @LENGTH@ 21
------INS SimpleType@@Connection @TO@ SingleVariableDeclaration@@Connection connection @AT@ 800 @LENGTH@ 10
------INS SimpleName@@connection @TO@ SingleVariableDeclaration@@Connection connection @AT@ 811 @LENGTH@ 10


UPD IfStatement@@if (context instanceof BootOperationContext) {  final BootOperationContext bootContext=(BootOperationContext)context;  context.getRuntimeContext().setRuntimeTask(new RuntimeTask(){    public void execute(    RuntimeTaskContext context) throws OperationFailedException {      bootContext.addDeploymentProcessor(Phase.DEPENDENCIES,Phase.DEPENDENCIES_WELD,new WeldDependencyProcessor());      bootContext.addDeploymentProcessor(Phase.PARSE,Phase.PARSE_WELD_DEPLOYMENT,new BeansXmlProcessor());      bootContext.addDeploymentProcessor(Phase.PARSE,Phase.PARSE_WELD_COMPONENT_INTEGRATION,new WeldComponentIntegrationProcessor());      bootContext.addDeploymentProcessor(Phase.PARSE,Phase.PARSE_WELD_WEB_INTEGRATION,new WebIntegrationProcessor());      bootContext.addDeploymentProcessor(Phase.POST_MODULE,Phase.POST_MODULE_WELD_EJB_INTERCEPTORS_INTEGRATION,new WeldEjbInterceptorIntegrationProcessor());      bootContext.addDeploymentProcessor(Phase.POST_MODULE,Phase.POST_MODULE_WELD_BEAN_ARCHIVE,new BeanArchiveProcessor());      bootContext.addDeploymentProcessor(Phase.POST_MODULE,Phase.POST_MODULE_WELD_PORTABLE_EXTENSIONS,new WeldPortableExtensionProcessor());      bootContext.addDeploymentProcessor(Phase.INSTALL,Phase.INSTALL_WELD_DEPLOYMENT,new WeldDeploymentProcessor());      bootContext.addDeploymentProcessor(Phase.INSTALL,Phase.INSTALL_WELD_BEAN_MANAGER,new WeldBeanManagerServiceProcessor());      TCCLSingletonService singleton=new TCCLSingletonService();      context.getServiceTarget().addService(TCCLSingletonService.SERVICE_NAME,singleton).setInitialMode(Mode.ON_DEMAND).install();      resultHandler.handleResultComplete();    }  });  CurrentServiceRegistry.setServiceRegistry(bootContext.getController().getServiceRegistry());} else {  resultHandler.handleResultComplete();} @TO@ if (context instanceof BootOperationContext) {  final BootOperationContext bootContext=(BootOperationContext)context;  context.getRuntimeContext().setRuntimeTask(new RuntimeTask(){    public void execute(    RuntimeTaskContext context) throws OperationFailedException {      bootContext.addDeploymentProcessor(Phase.DEPENDENCIES,Phase.DEPENDENCIES_WELD,new WeldDependencyProcessor());      bootContext.addDeploymentProcessor(Phase.PARSE,Phase.PARSE_WELD_DEPLOYMENT,new BeansXmlProcessor());      bootContext.addDeploymentProcessor(Phase.PARSE,Phase.PARSE_WELD_COMPONENT_INTEGRATION,new WeldComponentIntegrationProcessor());      bootContext.addDeploymentProcessor(Phase.PARSE,Phase.PARSE_WELD_WEB_INTEGRATION,new WebIntegrationProcessor());      bootContext.addDeploymentProcessor(Phase.POST_MODULE,Phase.POST_MODULE_WELD_EJB_INTERCEPTORS_INTEGRATION,new WeldEjbInterceptorIntegrationProcessor());      bootContext.addDeploymentProcessor(Phase.POST_MODULE,Phase.POST_MODULE_WELD_BEAN_ARCHIVE,new BeanArchiveProcessor());      bootContext.addDeploymentProcessor(Phase.POST_MODULE,Phase.POST_MODULE_WELD_PORTABLE_EXTENSIONS,new WeldPortableExtensionProcessor());      bootContext.addDeploymentProcessor(Phase.INSTALL,Phase.INSTALL_WELD_DEPLOYMENT,new WeldDeploymentProcessor());      bootContext.addDeploymentProcessor(Phase.INSTALL,Phase.INSTALL_WELD_BEAN_MANAGER,new WeldBeanManagerServiceProcessor());      TCCLSingletonService singleton=new TCCLSingletonService();      context.getServiceTarget().addService(TCCLSingletonService.SERVICE_NAME,singleton).setInitialMode(Mode.ON_DEMAND).install();      resultHandler.handleResultComplete();    }  });} else {  resultHandler.handleResultComplete();} @AT@ 3067 @LENGTH@ 2121
---UPD Block@@ThenBody:{  final BootOperationContext bootContext=(BootOperationContext)context;  context.getRuntimeContext().setRuntimeTask(new RuntimeTask(){    public void execute(    RuntimeTaskContext context) throws OperationFailedException {      bootContext.addDeploymentProcessor(Phase.DEPENDENCIES,Phase.DEPENDENCIES_WELD,new WeldDependencyProcessor());      bootContext.addDeploymentProcessor(Phase.PARSE,Phase.PARSE_WELD_DEPLOYMENT,new BeansXmlProcessor());      bootContext.addDeploymentProcessor(Phase.PARSE,Phase.PARSE_WELD_COMPONENT_INTEGRATION,new WeldComponentIntegrationProcessor());      bootContext.addDeploymentProcessor(Phase.PARSE,Phase.PARSE_WELD_WEB_INTEGRATION,new WebIntegrationProcessor());      bootContext.addDeploymentProcessor(Phase.POST_MODULE,Phase.POST_MODULE_WELD_EJB_INTERCEPTORS_INTEGRATION,new WeldEjbInterceptorIntegrationProcessor());      bootContext.addDeploymentProcessor(Phase.POST_MODULE,Phase.POST_MODULE_WELD_BEAN_ARCHIVE,new BeanArchiveProcessor());      bootContext.addDeploymentProcessor(Phase.POST_MODULE,Phase.POST_MODULE_WELD_PORTABLE_EXTENSIONS,new WeldPortableExtensionProcessor());      bootContext.addDeploymentProcessor(Phase.INSTALL,Phase.INSTALL_WELD_DEPLOYMENT,new WeldDeploymentProcessor());      bootContext.addDeploymentProcessor(Phase.INSTALL,Phase.INSTALL_WELD_BEAN_MANAGER,new WeldBeanManagerServiceProcessor());      TCCLSingletonService singleton=new TCCLSingletonService();      context.getServiceTarget().addService(TCCLSingletonService.SERVICE_NAME,singleton).setInitialMode(Mode.ON_DEMAND).install();      resultHandler.handleResultComplete();    }  });  CurrentServiceRegistry.setServiceRegistry(bootContext.getController().getServiceRegistry());} @TO@ ThenBody:{  final BootOperationContext bootContext=(BootOperationContext)context;  context.getRuntimeContext().setRuntimeTask(new RuntimeTask(){    public void execute(    RuntimeTaskContext context) throws OperationFailedException {      bootContext.addDeploymentProcessor(Phase.DEPENDENCIES,Phase.DEPENDENCIES_WELD,new WeldDependencyProcessor());      bootContext.addDeploymentProcessor(Phase.PARSE,Phase.PARSE_WELD_DEPLOYMENT,new BeansXmlProcessor());      bootContext.addDeploymentProcessor(Phase.PARSE,Phase.PARSE_WELD_COMPONENT_INTEGRATION,new WeldComponentIntegrationProcessor());      bootContext.addDeploymentProcessor(Phase.PARSE,Phase.PARSE_WELD_WEB_INTEGRATION,new WebIntegrationProcessor());      bootContext.addDeploymentProcessor(Phase.POST_MODULE,Phase.POST_MODULE_WELD_EJB_INTERCEPTORS_INTEGRATION,new WeldEjbInterceptorIntegrationProcessor());      bootContext.addDeploymentProcessor(Phase.POST_MODULE,Phase.POST_MODULE_WELD_BEAN_ARCHIVE,new BeanArchiveProcessor());      bootContext.addDeploymentProcessor(Phase.POST_MODULE,Phase.POST_MODULE_WELD_PORTABLE_EXTENSIONS,new WeldPortableExtensionProcessor());      bootContext.addDeploymentProcessor(Phase.INSTALL,Phase.INSTALL_WELD_DEPLOYMENT,new WeldDeploymentProcessor());      bootContext.addDeploymentProcessor(Phase.INSTALL,Phase.INSTALL_WELD_BEAN_MANAGER,new WeldBeanManagerServiceProcessor());      TCCLSingletonService singleton=new TCCLSingletonService();      context.getServiceTarget().addService(TCCLSingletonService.SERVICE_NAME,singleton).setInitialMode(Mode.ON_DEMAND).install();      resultHandler.handleResultComplete();    }  });} @AT@ 3112 @LENGTH@ 2009
------DEL ExpressionStatement@@MethodInvocation:CurrentServiceRegistry.setServiceRegistry(bootContext.getController().getServiceRegistry()) @AT@ 5019 @LENGTH@ 92
---------DEL MethodInvocation@@CurrentServiceRegistry.setServiceRegistry(bootContext.getController().getServiceRegistry()) @AT@ 5019 @LENGTH@ 91
------------DEL SimpleName@@Name:CurrentServiceRegistry @AT@ 5019 @LENGTH@ 22
------------DEL SimpleName@@MethodName:setServiceRegistry:[bootContext.getController().getServiceRegistry()] @AT@ 5042 @LENGTH@ 68
---------------DEL MethodInvocation@@bootContext.getController().getServiceRegistry() @AT@ 5061 @LENGTH@ 48
------------------DEL MethodInvocation@@MethodName:getController:[] @AT@ 5061 @LENGTH@ 27
------------------DEL SimpleName@@Name:bootContext @AT@ 5061 @LENGTH@ 11
------------------DEL SimpleName@@MethodName:getServiceRegistry:[] @AT@ 5089 @LENGTH@ 20


UPD ExpressionStatement@@Assignment:this.value=new TransactionIntegrationImpl(tm.getValue(),tsr.getValue(),utr.getValue(),terminator.getValue(),null,(TransactionLocalDelegate)tld.getValue()) @TO@ Assignment:this.value=new TransactionIntegrationImpl(tm.getValue(),tsr.getValue(),utr.getValue(),terminator.getValue(),rr.getValue(),(TransactionLocalDelegate)tld.getValue()) @AT@ 3173 @LENGTH@ 179
---UPD Assignment@@this.value=new TransactionIntegrationImpl(tm.getValue(),tsr.getValue(),utr.getValue(),terminator.getValue(),null,(TransactionLocalDelegate)tld.getValue()) @TO@ this.value=new TransactionIntegrationImpl(tm.getValue(),tsr.getValue(),utr.getValue(),terminator.getValue(),rr.getValue(),(TransactionLocalDelegate)tld.getValue()) @AT@ 3173 @LENGTH@ 178
------UPD ClassInstanceCreation@@TransactionIntegrationImpl[tm.getValue(), tsr.getValue(), utr.getValue(), terminator.getValue(), null, (TransactionLocalDelegate)tld.getValue()] @TO@ TransactionIntegrationImpl[tm.getValue(), tsr.getValue(), utr.getValue(), terminator.getValue(), rr.getValue(), (TransactionLocalDelegate)tld.getValue()] @AT@ 3186 @LENGTH@ 165
---------DEL NullLiteral@@null @AT@ 3287 @LENGTH@ 4
---------INS MethodInvocation@@rr.getValue() @TO@ ClassInstanceCreation@@TransactionIntegrationImpl[tm.getValue(), tsr.getValue(), utr.getValue(), terminator.getValue(), null, (TransactionLocalDelegate)tld.getValue()] @AT@ 3303 @LENGTH@ 13
------------INS SimpleName@@Name:rr @TO@ MethodInvocation@@rr.getValue() @AT@ 3303 @LENGTH@ 2
------------INS SimpleName@@MethodName:getValue:[] @TO@ MethodInvocation@@rr.getValue() @AT@ 3306 @LENGTH@ 10


INS IfStatement@@if (type.isArray()) {  return createInfo(type.getComponentType());} @TO@ MethodDeclaration@@public, TypeInformation, MethodName:getComponentType,  @AT@ 1683 @LENGTH@ 77
---INS MethodInvocation@@type.isArray() @TO@ IfStatement@@if (type.isArray()) {  return createInfo(type.getComponentType());} @AT@ 1687 @LENGTH@ 14
------INS SimpleName@@Name:type @TO@ MethodInvocation@@type.isArray() @AT@ 1687 @LENGTH@ 4
------INS SimpleName@@MethodName:isArray:[] @TO@ MethodInvocation@@type.isArray() @AT@ 1692 @LENGTH@ 9
---INS Block@@ThenBody:{  return createInfo(type.getComponentType());} @TO@ IfStatement@@if (type.isArray()) {  return createInfo(type.getComponentType());} @AT@ 1703 @LENGTH@ 57
------INS ReturnStatement@@MethodInvocation:createInfo(type.getComponentType()) @TO@ Block@@ThenBody:{  return createInfo(type.getComponentType());} @AT@ 1711 @LENGTH@ 43
---------INS MethodInvocation@@createInfo(type.getComponentType()) @TO@ ReturnStatement@@MethodInvocation:createInfo(type.getComponentType()) @AT@ 1718 @LENGTH@ 35
------------INS SimpleName@@MethodName:createInfo:[type.getComponentType()] @TO@ MethodInvocation@@createInfo(type.getComponentType()) @AT@ 1718 @LENGTH@ 35
---------------INS MethodInvocation@@type.getComponentType() @TO@ SimpleName@@MethodName:createInfo:[type.getComponentType()] @AT@ 1729 @LENGTH@ 23
------------------INS SimpleName@@Name:type @TO@ MethodInvocation@@type.getComponentType() @AT@ 1729 @LENGTH@ 4
------------------INS SimpleName@@MethodName:getComponentType:[] @TO@ MethodInvocation@@type.getComponentType() @AT@ 1734 @LENGTH@ 18


UPD ExpressionStatement@@MethodInvocation:assertTrue("Should not take that long: " + delta,delta < 5000) @TO@ MethodInvocation:assertTrue("Should not take that long: " + delta,delta < 7000) @AT@ 1578 @LENGTH@ 64
---UPD MethodInvocation@@assertTrue("Should not take that long: " + delta,delta < 5000) @TO@ assertTrue("Should not take that long: " + delta,delta < 7000) @AT@ 1578 @LENGTH@ 63
------UPD SimpleName@@MethodName:assertTrue:["Should not take that long: " + delta, delta < 5000] @TO@ MethodName:assertTrue:["Should not take that long: " + delta, delta < 7000] @AT@ 1578 @LENGTH@ 63
---------UPD InfixExpression@@delta < 5000 @TO@ delta < 7000 @AT@ 1628 @LENGTH@ 12
------------UPD NumberLiteral@@5000 @TO@ 7000 @AT@ 1636 @LENGTH@ 4


INS FieldDeclaration@@private, ExecutorService, [aggregateExecutorService] @TO@ TypeDeclaration@@[public]RecipientList, ServiceSupport[AsyncProcessor] @AT@ 2313 @LENGTH@ 49
---INS Modifier@@private @TO@ FieldDeclaration@@private, ExecutorService, [aggregateExecutorService] @AT@ 2313 @LENGTH@ 7
---INS SimpleType@@ExecutorService @TO@ FieldDeclaration@@private, ExecutorService, [aggregateExecutorService] @AT@ 2321 @LENGTH@ 15
---INS VariableDeclarationFragment@@aggregateExecutorService @TO@ FieldDeclaration@@private, ExecutorService, [aggregateExecutorService] @AT@ 2337 @LENGTH@ 24
------INS SimpleName@@aggregateExecutorService @TO@ VariableDeclarationFragment@@aggregateExecutorService @AT@ 2337 @LENGTH@ 24


UPD VariableDeclarationStatement@@ObjectName on=ObjectName.getInstance("org.apache.camel:context=localhost/camel-1,type=threadpools,name=myPool"); @TO@ ObjectName on=ObjectName.getInstance("org.apache.camel:context=localhost/camel-1,type=threadpools,name=\"myPool\""); @AT@ 1593 @LENGTH@ 114
---UPD VariableDeclarationFragment@@on=ObjectName.getInstance("org.apache.camel:context=localhost/camel-1,type=threadpools,name=myPool") @TO@ on=ObjectName.getInstance("org.apache.camel:context=localhost/camel-1,type=threadpools,name=\"myPool\"") @AT@ 1604 @LENGTH@ 102
------UPD MethodInvocation@@ObjectName.getInstance("org.apache.camel:context=localhost/camel-1,type=threadpools,name=myPool") @TO@ ObjectName.getInstance("org.apache.camel:context=localhost/camel-1,type=threadpools,name=\"myPool\"") @AT@ 1609 @LENGTH@ 97
---------UPD SimpleName@@MethodName:getInstance:["org.apache.camel:context=localhost/camel-1,type=threadpools,name=myPool"] @TO@ MethodName:getInstance:["org.apache.camel:context=localhost/camel-1,type=threadpools,name=\"myPool\""] @AT@ 1620 @LENGTH@ 86
------------UPD StringLiteral@@"org.apache.camel:context=localhost/camel-1,type=threadpools,name=myPool" @TO@ "org.apache.camel:context=localhost/camel-1,type=threadpools,name=\"myPool\"" @AT@ 1632 @LENGTH@ 73


UPD TryStatement@@try {  return CHARSET.newEncoder().encode(CharBuffer.wrap(string)).array();} catch (CharacterCodingException e) {  throw new IllegalArgumentException("Encoding failed",e);} @TO@ try {  ByteBuffer bytes=CHARSET.newEncoder().encode(CharBuffer.wrap(string));  return Arrays.copyOfRange(bytes.array(),0,bytes.limit());} catch (CharacterCodingException e) {  throw new IllegalArgumentException("Encoding failed",e);} @AT@ 526 @LENGTH@ 213
---UPD ReturnStatement@@MethodInvocation:CHARSET.newEncoder().encode(CharBuffer.wrap(string)).array() @TO@ MethodInvocation:Arrays.copyOfRange(bytes.array(),0,bytes.limit()) @AT@ 544 @LENGTH@ 68
------UPD MethodInvocation@@CHARSET.newEncoder().encode(CharBuffer.wrap(string)).array() @TO@ Arrays.copyOfRange(bytes.array(),0,bytes.limit()) @AT@ 551 @LENGTH@ 60
---------UPD MethodInvocation@@MethodName:encode:[CharBuffer.wrap(string)] @TO@ CHARSET.newEncoder().encode(CharBuffer.wrap(string)) @AT@ 551 @LENGTH@ 52
---------DEL MethodInvocation@@MethodName:newEncoder:[] @AT@ 551 @LENGTH@ 20
---------UPD SimpleName@@Name:CHARSET @TO@ Name:Arrays @AT@ 551 @LENGTH@ 7
---------UPD SimpleName@@MethodName:array:[] @TO@ MethodName:limit:[] @AT@ 604 @LENGTH@ 7
---------INS SimpleName@@MethodName:copyOfRange:[bytes.array(), 0, bytes.limit()] @TO@ MethodInvocation@@CHARSET.newEncoder().encode(CharBuffer.wrap(string)).array() @AT@ 664 @LENGTH@ 44
------------INS MethodInvocation@@bytes.array() @TO@ SimpleName@@MethodName:copyOfRange:[bytes.array(), 0, bytes.limit()] @AT@ 676 @LENGTH@ 13
---------------INS SimpleName@@Name:bytes @TO@ MethodInvocation@@bytes.array() @AT@ 676 @LENGTH@ 5
---------------INS SimpleName@@MethodName:array:[] @TO@ MethodInvocation@@bytes.array() @AT@ 682 @LENGTH@ 7
------------INS NumberLiteral@@0 @TO@ SimpleName@@MethodName:copyOfRange:[bytes.array(), 0, bytes.limit()] @AT@ 691 @LENGTH@ 1
------------INS MethodInvocation@@bytes.limit() @TO@ SimpleName@@MethodName:copyOfRange:[bytes.array(), 0, bytes.limit()] @AT@ 694 @LENGTH@ 13
---------------MOV SimpleName@@MethodName:array:[] @TO@ MethodInvocation@@bytes.limit() @AT@ 604 @LENGTH@ 7
---------------INS SimpleName@@Name:bytes @TO@ MethodInvocation@@bytes.limit() @AT@ 694 @LENGTH@ 5
---INS VariableDeclarationStatement@@ByteBuffer bytes=CHARSET.newEncoder().encode(CharBuffer.wrap(string)); @TO@ TryStatement@@try {  return CHARSET.newEncoder().encode(CharBuffer.wrap(string)).array();} catch (CharacterCodingException e) {  throw new IllegalArgumentException("Encoding failed",e);} @AT@ 564 @LENGTH@ 72
------INS SimpleType@@ByteBuffer @TO@ VariableDeclarationStatement@@ByteBuffer bytes=CHARSET.newEncoder().encode(CharBuffer.wrap(string)); @AT@ 564 @LENGTH@ 10
------INS VariableDeclarationFragment@@bytes=CHARSET.newEncoder().encode(CharBuffer.wrap(string)) @TO@ VariableDeclarationStatement@@ByteBuffer bytes=CHARSET.newEncoder().encode(CharBuffer.wrap(string)); @AT@ 575 @LENGTH@ 60
---------MOV MethodInvocation@@MethodName:encode:[CharBuffer.wrap(string)] @TO@ VariableDeclarationFragment@@bytes=CHARSET.newEncoder().encode(CharBuffer.wrap(string)) @AT@ 551 @LENGTH@ 52
------------INS MethodInvocation@@MethodName:newEncoder:[] @TO@ MethodInvocation@@MethodName:encode:[CharBuffer.wrap(string)] @AT@ 583 @LENGTH@ 20
------------INS SimpleName@@Name:CHARSET @TO@ MethodInvocation@@MethodName:encode:[CharBuffer.wrap(string)] @AT@ 583 @LENGTH@ 7
------------INS SimpleName@@MethodName:encode:[CharBuffer.wrap(string)] @TO@ MethodInvocation@@MethodName:encode:[CharBuffer.wrap(string)] @AT@ 604 @LENGTH@ 31
---------------MOV MethodInvocation@@CharBuffer.wrap(string) @TO@ SimpleName@@MethodName:encode:[CharBuffer.wrap(string)] @AT@ 579 @LENGTH@ 23
---------------MOV MethodInvocation@@CharBuffer.wrap(string) @TO@ SimpleName@@MethodName:encode:[CharBuffer.wrap(string)] @AT@ 579 @LENGTH@ 23
---------INS SimpleName@@bytes @TO@ VariableDeclarationFragment@@bytes=CHARSET.newEncoder().encode(CharBuffer.wrap(string)) @AT@ 575 @LENGTH@ 5


UPD MethodDeclaration@@void, MethodName:setRange, byte[] key, int begin, int end,  @TO@ void, MethodName:setRange, byte[] key, long offset, byte[] value,  @AT@ 1407 @LENGTH@ 41
---UPD SingleVariableDeclaration@@int begin @TO@ long offset @AT@ 1428 @LENGTH@ 9
------UPD PrimitiveType@@int @TO@ long @AT@ 1428 @LENGTH@ 3
------UPD SimpleName@@begin @TO@ offset @AT@ 1432 @LENGTH@ 5
---UPD SingleVariableDeclaration@@int end @TO@ byte[] value @AT@ 1439 @LENGTH@ 7
------DEL PrimitiveType@@int @AT@ 1439 @LENGTH@ 3
------INS ArrayType@@byte[] @TO@ SingleVariableDeclaration@@int end @AT@ 1443 @LENGTH@ 6
---------INS PrimitiveType@@byte @TO@ ArrayType@@byte[] @AT@ 1443 @LENGTH@ 4
------UPD SimpleName@@end @TO@ value @AT@ 1443 @LENGTH@ 3


UPD TypeDeclaration@@[public]DeploymentRemoveHandler, [ModelRemoveOperationHandler] @TO@ [public]DeploymentRemoveHandler, [ModelRemoveOperationHandler, DescriptionProvider] @AT@ 2062 @LENGTH@ 1667
---INS SimpleType@@DescriptionProvider @TO@ TypeDeclaration@@[public]DeploymentRemoveHandler, [ModelRemoveOperationHandler] @AT@ 2303 @LENGTH@ 19


INS IfStatement@@if (instance != null) {  instance.destroy();} @TO@ MethodDeclaration@@public, void, MethodName:remove,  @AT@ 3856 @LENGTH@ 64
---INS InfixExpression@@instance != null @TO@ IfStatement@@if (instance != null) {  instance.destroy();} @AT@ 3859 @LENGTH@ 16
------INS SimpleName@@instance @TO@ InfixExpression@@instance != null @AT@ 3859 @LENGTH@ 8
------INS Operator@@!= @TO@ InfixExpression@@instance != null @AT@ 3867 @LENGTH@ 2
------INS NullLiteral@@null @TO@ InfixExpression@@instance != null @AT@ 3871 @LENGTH@ 4
---INS Block@@ThenBody:{  instance.destroy();} @TO@ IfStatement@@if (instance != null) {  instance.destroy();} @AT@ 3877 @LENGTH@ 43
------MOV ExpressionStatement@@MethodInvocation:instance.destroy() @TO@ Block@@ThenBody:{  instance.destroy();} @AT@ 3856 @LENGTH@ 19


DEL FieldDeclaration@@private, CollectionOptions, [defaultCollectionOptions] @AT@ 2035 @LENGTH@ 51
---DEL Modifier@@private @AT@ 2035 @LENGTH@ 7
---DEL SimpleType@@CollectionOptions @AT@ 2043 @LENGTH@ 17
---DEL VariableDeclarationFragment@@defaultCollectionOptions @AT@ 2061 @LENGTH@ 24
------DEL SimpleName@@defaultCollectionOptions @AT@ 2061 @LENGTH@ 24


DEL VariableDeclarationStatement@@DatagramSocket ds=new DatagramSocket(); @AT@ 2080 @LENGTH@ 41
---DEL SimpleType@@DatagramSocket @AT@ 2080 @LENGTH@ 14
---DEL VariableDeclarationFragment@@ds=new DatagramSocket() @AT@ 2095 @LENGTH@ 25
------DEL SimpleName@@ds @AT@ 2095 @LENGTH@ 2
------DEL ClassInstanceCreation@@DatagramSocket[] @AT@ 2100 @LENGTH@ 20
---------DEL New@@new @AT@ 2100 @LENGTH@ 3
---------DEL SimpleType@@DatagramSocket @AT@ 2104 @LENGTH@ 14


UPD VariableDeclarationStatement@@boolean slave=!host.get(DOMAIN_CONTROLLER,LOCAL).isDefined(); @TO@ boolean slave=!(host.get(DOMAIN_CONTROLLER).hasDefined(LOCAL)); @AT@ 13591 @LENGTH@ 64
---UPD VariableDeclarationFragment@@slave=!host.get(DOMAIN_CONTROLLER,LOCAL).isDefined() @TO@ slave=!(host.get(DOMAIN_CONTROLLER).hasDefined(LOCAL)) @AT@ 13599 @LENGTH@ 55
------UPD PrefixExpression@@!host.get(DOMAIN_CONTROLLER,LOCAL).isDefined() @TO@ !(host.get(DOMAIN_CONTROLLER).hasDefined(LOCAL)) @AT@ 13607 @LENGTH@ 47
---------INS ParenthesizedExpression@@(host.get(DOMAIN_CONTROLLER).hasDefined(LOCAL)) @TO@ PrefixExpression@@!host.get(DOMAIN_CONTROLLER,LOCAL).isDefined() @AT@ 13608 @LENGTH@ 47
------------INS MethodInvocation@@host.get(DOMAIN_CONTROLLER).hasDefined(LOCAL) @TO@ ParenthesizedExpression@@(host.get(DOMAIN_CONTROLLER).hasDefined(LOCAL)) @AT@ 13609 @LENGTH@ 45
---------------MOV MethodInvocation@@MethodName:get:[DOMAIN_CONTROLLER, LOCAL] @TO@ MethodInvocation@@host.get(DOMAIN_CONTROLLER).hasDefined(LOCAL) @AT@ 13608 @LENGTH@ 34
------------------DEL SimpleName@@LOCAL @AT@ 13636 @LENGTH@ 5
---------------MOV SimpleName@@Name:host @TO@ MethodInvocation@@host.get(DOMAIN_CONTROLLER).hasDefined(LOCAL) @AT@ 13608 @LENGTH@ 4
---------------MOV SimpleName@@MethodName:isDefined:[] @TO@ MethodInvocation@@host.get(DOMAIN_CONTROLLER).hasDefined(LOCAL) @AT@ 13643 @LENGTH@ 11
------------------INS SimpleName@@LOCAL @TO@ SimpleName@@MethodName:isDefined:[] @AT@ 13648 @LENGTH@ 5
---------DEL MethodInvocation@@host.get(DOMAIN_CONTROLLER,LOCAL).isDefined() @AT@ 13608 @LENGTH@ 46


INS MethodDeclaration@@public, void, MethodName:setUp, Exception,  @TO@ TypeDeclaration@@[public]MailConsumerUnsupportedCharsetTest, CamelTestSupport @AT@ 1368 @LENGTH@ 93
---INS Modifier@@public @TO@ MethodDeclaration@@public, void, MethodName:setUp, Exception,  @AT@ 1368 @LENGTH@ 6
---INS PrimitiveType@@void @TO@ MethodDeclaration@@public, void, MethodName:setUp, Exception,  @AT@ 1375 @LENGTH@ 4
---INS SimpleName@@MethodName:setUp @TO@ MethodDeclaration@@public, void, MethodName:setUp, Exception,  @AT@ 1380 @LENGTH@ 5
---INS SimpleType@@Exception @TO@ MethodDeclaration@@public, void, MethodName:setUp, Exception,  @AT@ 1395 @LENGTH@ 9
---INS ExpressionStatement@@MethodInvocation:prepareMailbox() @TO@ MethodDeclaration@@public, void, MethodName:setUp, Exception,  @AT@ 1415 @LENGTH@ 17
------INS MethodInvocation@@MethodName:prepareMailbox:[] @TO@ ExpressionStatement@@MethodInvocation:prepareMailbox() @AT@ 1415 @LENGTH@ 16
---INS ExpressionStatement@@SuperMethodInvocation:super.setUp() @TO@ MethodDeclaration@@public, void, MethodName:setUp, Exception,  @AT@ 1441 @LENGTH@ 14
------INS SuperMethodInvocation@@super.setUp() @TO@ ExpressionStatement@@SuperMethodInvocation:super.setUp() @AT@ 1441 @LENGTH@ 13
---------INS SimpleName@@MethodName:setUp:[] @TO@ SuperMethodInvocation@@super.setUp() @AT@ 1447 @LENGTH@ 5


UPD FieldDeclaration@@protected, SSLContext, [context=null] @TO@ protected, SSLContext, [context] @AT@ 1006 @LENGTH@ 36
---UPD VariableDeclarationFragment@@context=null @TO@ context @AT@ 1027 @LENGTH@ 14
------DEL NullLiteral@@null @AT@ 1037 @LENGTH@ 4


UPD EnhancedForStatement@@for (String uniqueName : deploymentNames) {  ModelNode deployment=modelNode.get(uniqueName);  String runtimeName=deployment.get(RUNTIME_NAME).asString();  String sha1=HashUtil.bytesToHexString(deployment.get(HASH).asBytes());  boolean enabled=deployment.get(ENABLED).asBoolean();  writer.writeStartElement(Element.DEPLOYMENT.getLocalName());  writeAttribute(writer,Attribute.NAME,uniqueName);  writeAttribute(writer,Attribute.RUNTIME_NAME,runtimeName);  writeAttribute(writer,Attribute.SHA1,sha1);  if (!enabled) {    writeAttribute(writer,Attribute.ENABLED,"false");  }  writer.writeEndElement();} @TO@ for (String uniqueName : deploymentNames) {  final ModelNode deployment=modelNode.get(uniqueName);  final String runtimeName=deployment.get(RUNTIME_NAME).asString();  boolean enabled=deployment.get(ENABLED).asBoolean();  writer.writeStartElement(Element.DEPLOYMENT.getLocalName());  writeAttribute(writer,Attribute.NAME,uniqueName);  writeAttribute(writer,Attribute.RUNTIME_NAME,runtimeName);  if (!enabled) {    writeAttribute(writer,Attribute.ENABLED,"false");  }  final List<ModelNode> contentItems=deployment.require(CONTENT).asList();  for (  ModelNode contentItem : contentItems) {    writeContentItem(writer,contentItem);  }  writer.writeEndElement();} @AT@ 20531 @LENGTH@ 810
---UPD VariableDeclarationStatement@@ModelNode deployment=modelNode.get(uniqueName); @TO@ final ModelNode deployment=modelNode.get(uniqueName); @AT@ 20591 @LENGTH@ 49
------INS Modifier@@final @TO@ VariableDeclarationStatement@@ModelNode deployment=modelNode.get(uniqueName); @AT@ 21758 @LENGTH@ 5
---UPD VariableDeclarationStatement@@String runtimeName=deployment.get(RUNTIME_NAME).asString(); @TO@ final String runtimeName=deployment.get(RUNTIME_NAME).asString(); @AT@ 20657 @LENGTH@ 61
------INS Modifier@@final @TO@ VariableDeclarationStatement@@String runtimeName=deployment.get(RUNTIME_NAME).asString(); @AT@ 21830 @LENGTH@ 5
---UPD VariableDeclarationStatement@@String sha1=HashUtil.bytesToHexString(deployment.get(HASH).asBytes()); @TO@ final List<ModelNode> contentItems=deployment.require(CONTENT).asList(); @AT@ 20735 @LENGTH@ 72
------DEL SimpleType@@String @AT@ 20735 @LENGTH@ 6
------UPD VariableDeclarationFragment@@sha1=HashUtil.bytesToHexString(deployment.get(HASH).asBytes()) @TO@ contentItems=deployment.require(CONTENT).asList() @AT@ 20742 @LENGTH@ 64
---------UPD SimpleName@@sha1 @TO@ contentItems @AT@ 20742 @LENGTH@ 4
---------DEL MethodInvocation@@HashUtil.bytesToHexString(deployment.get(HASH).asBytes()) @AT@ 20749 @LENGTH@ 57
------------DEL SimpleName@@Name:HashUtil @AT@ 20749 @LENGTH@ 8
------------DEL SimpleName@@MethodName:bytesToHexString:[deployment.get(HASH).asBytes()] @AT@ 20758 @LENGTH@ 48
---------------DEL MethodInvocation@@deployment.get(HASH).asBytes() @AT@ 20775 @LENGTH@ 30
---------INS MethodInvocation@@deployment.require(CONTENT).asList() @TO@ VariableDeclarationFragment@@sha1=HashUtil.bytesToHexString(deployment.get(HASH).asBytes()) @AT@ 22366 @LENGTH@ 36
------------MOV MethodInvocation@@MethodName:get:[HASH] @TO@ MethodInvocation@@deployment.require(CONTENT).asList() @AT@ 20775 @LENGTH@ 20
---------------UPD SimpleName@@HASH @TO@ CONTENT @AT@ 20790 @LENGTH@ 4
------------MOV SimpleName@@Name:deployment @TO@ MethodInvocation@@deployment.require(CONTENT).asList() @AT@ 20775 @LENGTH@ 10
------------MOV SimpleName@@MethodName:asBytes:[] @TO@ MethodInvocation@@deployment.require(CONTENT).asList() @AT@ 20796 @LENGTH@ 9
------INS Modifier@@final @TO@ VariableDeclarationStatement@@String sha1=HashUtil.bytesToHexString(deployment.get(HASH).asBytes()); @AT@ 22329 @LENGTH@ 5
------INS ParameterizedType@@List<ModelNode> @TO@ VariableDeclarationStatement@@String sha1=HashUtil.bytesToHexString(deployment.get(HASH).asBytes()); @AT@ 22335 @LENGTH@ 15
---------INS SimpleType@@List @TO@ ParameterizedType@@List<ModelNode> @AT@ 22335 @LENGTH@ 4
---------INS SimpleType@@ModelNode @TO@ ParameterizedType@@List<ModelNode> @AT@ 22340 @LENGTH@ 9
---MOV VariableDeclarationStatement@@String sha1=HashUtil.bytesToHexString(deployment.get(HASH).asBytes()); @TO@ EnhancedForStatement@@for (String uniqueName : deploymentNames) {  ModelNode deployment=modelNode.get(uniqueName);  String runtimeName=deployment.get(RUNTIME_NAME).asString();  String sha1=HashUtil.bytesToHexString(deployment.get(HASH).asBytes());  boolean enabled=deployment.get(ENABLED).asBoolean();  writer.writeStartElement(Element.DEPLOYMENT.getLocalName());  writeAttribute(writer,Attribute.NAME,uniqueName);  writeAttribute(writer,Attribute.RUNTIME_NAME,runtimeName);  writeAttribute(writer,Attribute.SHA1,sha1);  if (!enabled) {    writeAttribute(writer,Attribute.ENABLED,"false");  }  writer.writeEndElement();} @AT@ 20735 @LENGTH@ 72
---UPD ExpressionStatement@@MethodInvocation:writeAttribute(writer,Attribute.SHA1,sha1) @TO@ MethodInvocation:writeContentItem(writer,contentItem) @AT@ 21117 @LENGTH@ 45
---INS EnhancedForStatement@@for (ModelNode contentItem : contentItems) {  writeContentItem(writer,contentItem);} @TO@ EnhancedForStatement@@for (String uniqueName : deploymentNames) {  ModelNode deployment=modelNode.get(uniqueName);  String runtimeName=deployment.get(RUNTIME_NAME).asString();  String sha1=HashUtil.bytesToHexString(deployment.get(HASH).asBytes());  boolean enabled=deployment.get(ENABLED).asBoolean();  writer.writeStartElement(Element.DEPLOYMENT.getLocalName());  writeAttribute(writer,Attribute.NAME,uniqueName);  writeAttribute(writer,Attribute.RUNTIME_NAME,runtimeName);  writeAttribute(writer,Attribute.SHA1,sha1);  if (!enabled) {    writeAttribute(writer,Attribute.ENABLED,"false");  }  writer.writeEndElement();} @AT@ 22420 @LENGTH@ 121
------MOV ExpressionStatement@@MethodInvocation:writeAttribute(writer,Attribute.SHA1,sha1) @TO@ EnhancedForStatement@@for (ModelNode contentItem : contentItems) {  writeContentItem(writer,contentItem);} @AT@ 21117 @LENGTH@ 45
---------UPD MethodInvocation@@writeAttribute(writer,Attribute.SHA1,sha1) @TO@ writeContentItem(writer,contentItem) @AT@ 21117 @LENGTH@ 44
------------UPD SimpleName@@MethodName:writeAttribute:[writer, Attribute.SHA1, sha1] @TO@ MethodName:writeContentItem:[writer, contentItem] @AT@ 21117 @LENGTH@ 44
---------------DEL QualifiedName@@Attribute.SHA1 @AT@ 21140 @LENGTH@ 14
------------------DEL SimpleName@@Attribute @AT@ 21140 @LENGTH@ 9
------------------DEL SimpleName@@SHA1 @AT@ 21150 @LENGTH@ 4
---------------DEL SimpleName@@sha1 @AT@ 21156 @LENGTH@ 4
---------------INS SimpleName@@contentItem @TO@ SimpleName@@MethodName:writeAttribute:[writer, Attribute.SHA1, sha1] @AT@ 22510 @LENGTH@ 11
------INS SingleVariableDeclaration@@ModelNode contentItem @TO@ EnhancedForStatement@@for (ModelNode contentItem : contentItems) {  writeContentItem(writer,contentItem);} @AT@ 22425 @LENGTH@ 21
---------INS SimpleType@@ModelNode @TO@ SingleVariableDeclaration@@ModelNode contentItem @AT@ 22425 @LENGTH@ 9
---------INS SimpleName@@contentItem @TO@ SingleVariableDeclaration@@ModelNode contentItem @AT@ 22435 @LENGTH@ 11
------INS SimpleName@@contentItems @TO@ EnhancedForStatement@@for (ModelNode contentItem : contentItems) {  writeContentItem(writer,contentItem);} @AT@ 22449 @LENGTH@ 12


UPD ExpressionStatement@@Assignment:queueSize=CamelContextHelper.parseInteger(getCamelContext(),keepAliveTime) @TO@ Assignment:queueSize=CamelContextHelper.parseInteger(getCamelContext(),maxQueueSize) @AT@ 2963 @LENGTH@ 78
---UPD Assignment@@queueSize=CamelContextHelper.parseInteger(getCamelContext(),keepAliveTime) @TO@ queueSize=CamelContextHelper.parseInteger(getCamelContext(),maxQueueSize) @AT@ 2963 @LENGTH@ 77
------UPD MethodInvocation@@CamelContextHelper.parseInteger(getCamelContext(),keepAliveTime) @TO@ CamelContextHelper.parseInteger(getCamelContext(),maxQueueSize) @AT@ 2975 @LENGTH@ 65
---------UPD SimpleName@@MethodName:parseInteger:[getCamelContext(), keepAliveTime] @TO@ MethodName:parseInteger:[getCamelContext(), maxQueueSize] @AT@ 2994 @LENGTH@ 46
------------UPD SimpleName@@keepAliveTime @TO@ maxQueueSize @AT@ 3026 @LENGTH@ 13


UPD EnhancedForStatement@@for (Object key : beans.keySet()) {  Object bean=beans.get(key);  if (LOG.isTraceEnabled()) {    LOG.trace("Found RouteBuilder with id: " + key + " -> "+ bean);  }  if (shouldIgnoreBean(bean)) {    if (LOG.isDebugEnabled()) {      LOG.debug("Ignoring RouteBuilder id: " + key);    }    continue;  }  if (!isFilteredClass(bean)) {    if (LOG.isDebugEnabled()) {      LOG.debug("Ignoring filtered RouteBuilder id: " + key + " as class: "+ bean.getClass());    }    continue;  }  if (LOG.isDebugEnabled()) {    LOG.debug("Adding instantiated RouteBuilder id: " + key + " as class: "+ bean.getClass());  }  list.add((RoutesBuilder)bean);} @TO@ for (Entry<String,RoutesBuilder> entry : beans.entrySet()) {  String key=entry.getKey();  Object bean=entry.getValue();  if (LOG.isTraceEnabled()) {    LOG.trace("Found RouteBuilder with id: " + key + " -> "+ bean);  }  if (shouldIgnoreBean(bean)) {    if (LOG.isDebugEnabled()) {      LOG.debug("Ignoring RouteBuilder id: " + key);    }    continue;  }  if (!isFilteredClass(bean)) {    if (LOG.isDebugEnabled()) {      LOG.debug("Ignoring filtered RouteBuilder id: " + key + " as class: "+ bean.getClass());    }    continue;  }  if (LOG.isDebugEnabled()) {    LOG.debug("Adding instantiated RouteBuilder id: " + key + " as class: "+ bean.getClass());  }  list.add((RoutesBuilder)bean);} @AT@ 2091 @LENGTH@ 944
---UPD SingleVariableDeclaration@@Object key @TO@ Entry<String,RoutesBuilder> entry @AT@ 2096 @LENGTH@ 10
------DEL SimpleType@@Object @AT@ 2096 @LENGTH@ 6
------UPD SimpleName@@key @TO@ entry @AT@ 2103 @LENGTH@ 3
------INS ParameterizedType@@Entry<String,RoutesBuilder> @TO@ SingleVariableDeclaration@@Object key @AT@ 2124 @LENGTH@ 28
---------INS SimpleType@@Entry @TO@ ParameterizedType@@Entry<String,RoutesBuilder> @AT@ 2124 @LENGTH@ 5
---------INS SimpleType@@String @TO@ ParameterizedType@@Entry<String,RoutesBuilder> @AT@ 2130 @LENGTH@ 6
---------INS SimpleType@@RoutesBuilder @TO@ ParameterizedType@@Entry<String,RoutesBuilder> @AT@ 2138 @LENGTH@ 13
---UPD MethodInvocation@@beans.keySet() @TO@ beans.entrySet() @AT@ 2109 @LENGTH@ 14
------UPD SimpleName@@MethodName:keySet:[] @TO@ MethodName:entrySet:[] @AT@ 2115 @LENGTH@ 8
---UPD VariableDeclarationStatement@@Object bean=beans.get(key); @TO@ Object bean=entry.getValue(); @AT@ 2139 @LENGTH@ 29
------UPD VariableDeclarationFragment@@bean=beans.get(key) @TO@ bean=entry.getValue() @AT@ 2146 @LENGTH@ 21
---------UPD MethodInvocation@@beans.get(key) @TO@ entry.getValue() @AT@ 2153 @LENGTH@ 14
------------UPD SimpleName@@Name:beans @TO@ Name:entry @AT@ 2153 @LENGTH@ 5
------------UPD SimpleName@@MethodName:get:[key] @TO@ MethodName:getValue:[] @AT@ 2159 @LENGTH@ 8
---------------DEL SimpleName@@key @AT@ 2163 @LENGTH@ 3
---INS VariableDeclarationStatement@@String key=entry.getKey(); @TO@ EnhancedForStatement@@for (Object key : beans.keySet()) {  Object bean=beans.get(key);  if (LOG.isTraceEnabled()) {    LOG.trace("Found RouteBuilder with id: " + key + " -> "+ bean);  }  if (shouldIgnoreBean(bean)) {    if (LOG.isDebugEnabled()) {      LOG.debug("Ignoring RouteBuilder id: " + key);    }    continue;  }  if (!isFilteredClass(bean)) {    if (LOG.isDebugEnabled()) {      LOG.debug("Ignoring filtered RouteBuilder id: " + key + " as class: "+ bean.getClass());    }    continue;  }  if (LOG.isDebugEnabled()) {    LOG.debug("Adding instantiated RouteBuilder id: " + key + " as class: "+ bean.getClass());  }  list.add((RoutesBuilder)bean);} @AT@ 2193 @LENGTH@ 28
------INS SimpleType@@String @TO@ VariableDeclarationStatement@@String key=entry.getKey(); @AT@ 2193 @LENGTH@ 6
------INS VariableDeclarationFragment@@key=entry.getKey() @TO@ VariableDeclarationStatement@@String key=entry.getKey(); @AT@ 2200 @LENGTH@ 20
---------INS SimpleName@@key @TO@ VariableDeclarationFragment@@key=entry.getKey() @AT@ 2200 @LENGTH@ 3
---------INS MethodInvocation@@entry.getKey() @TO@ VariableDeclarationFragment@@key=entry.getKey() @AT@ 2206 @LENGTH@ 14
------------INS SimpleName@@Name:entry @TO@ MethodInvocation@@entry.getKey() @AT@ 2206 @LENGTH@ 5
------------INS SimpleName@@MethodName:getKey:[] @TO@ MethodInvocation@@entry.getKey() @AT@ 2212 @LENGTH@ 8


INS FieldDeclaration@@private, static, final, long, [serialVersionUID=1L] @TO@ TypeDeclaration@@[public]IllegalMappingException, RuntimeException @AT@ 861 @LENGTH@ 48
---INS Modifier@@private @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=1L] @AT@ 861 @LENGTH@ 7
---INS Modifier@@static @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=1L] @AT@ 869 @LENGTH@ 6
---INS Modifier@@final @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=1L] @AT@ 876 @LENGTH@ 5
---INS PrimitiveType@@long @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=1L] @AT@ 882 @LENGTH@ 4
---INS VariableDeclarationFragment@@serialVersionUID=1L @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=1L] @AT@ 887 @LENGTH@ 21
------INS SimpleName@@serialVersionUID @TO@ VariableDeclarationFragment@@serialVersionUID=1L @AT@ 887 @LENGTH@ 16
------INS NumberLiteral@@1L @TO@ VariableDeclarationFragment@@serialVersionUID=1L @AT@ 906 @LENGTH@ 2


UPD MethodDeclaration@@protected, Class, MethodName:resolveProxyClass, String[] interfaces, IOException, ClassNotFoundException,  @TO@ protected, Class<?>, MethodName:resolveProxyClass, String[] interfaces, IOException, ClassNotFoundException,  @AT@ 1865 @LENGTH@ 569
---DEL SimpleType@@Class @AT@ 1875 @LENGTH@ 5
---INS ParameterizedType@@Class<?> @TO@ MethodDeclaration@@protected, Class, MethodName:resolveProxyClass, String[] interfaces, IOException, ClassNotFoundException,  @AT@ 1878 @LENGTH@ 8
------INS SimpleType@@Class @TO@ ParameterizedType@@Class<?> @AT@ 1878 @LENGTH@ 5
------INS WildcardType@@? @TO@ ParameterizedType@@Class<?> @AT@ 1884 @LENGTH@ 1


UPD MethodDeclaration@@void, MethodName:setPreferredConstructor, PreferredConstructor constructor,  @TO@ void, MethodName:setPreferredConstructor, PreferredConstructor<T> constructor,  @AT@ 584 @LENGTH@ 58
---UPD SingleVariableDeclaration@@PreferredConstructor constructor @TO@ PreferredConstructor<T> constructor @AT@ 608 @LENGTH@ 32
------INS ParameterizedType@@PreferredConstructor<T> @TO@ SingleVariableDeclaration@@PreferredConstructor constructor @AT@ 608 @LENGTH@ 23
---------INS SimpleType@@PreferredConstructor @TO@ ParameterizedType@@PreferredConstructor<T> @AT@ 608 @LENGTH@ 20
---------INS SimpleType@@T @TO@ ParameterizedType@@PreferredConstructor<T> @AT@ 629 @LENGTH@ 1
------DEL SimpleType@@PreferredConstructor @AT@ 608 @LENGTH@ 20


INS ExpressionStatement@@Assignment:matchCounter=0 @TO@ MethodDeclaration@@public, void, MethodName:reset,  @AT@ 5599 @LENGTH@ 17
---INS Assignment@@matchCounter=0 @TO@ ExpressionStatement@@Assignment:matchCounter=0 @AT@ 5599 @LENGTH@ 16
------INS SimpleName@@matchCounter @TO@ Assignment@@matchCounter=0 @AT@ 5599 @LENGTH@ 12
------INS Operator@@= @TO@ Assignment@@matchCounter=0 @AT@ 5611 @LENGTH@ 1
------INS NumberLiteral@@0 @TO@ Assignment@@matchCounter=0 @AT@ 5614 @LENGTH@ 1


MOV FieldDeclaration@@public, static, final, int, [PARSE_EJB_INJECTION_ANNOTATION=0x0C09] @TO@ EnumDeclaration@@[public]Phase,  @AT@ 9745 @LENGTH@ 77


DEL FieldDeclaration@@private, static, final, transient, Logger, [LOG=LoggerFactory.getLogger(BindySimpleCsvMandatoryFieldsUnmarshallTest.class)] @AT@ 1603 @LENGTH@ 119
---DEL Modifier@@private @AT@ 1603 @LENGTH@ 7
---DEL Modifier@@static @AT@ 1611 @LENGTH@ 6
---DEL Modifier@@final @AT@ 1618 @LENGTH@ 5
---DEL Modifier@@transient @AT@ 1624 @LENGTH@ 9
---DEL SimpleType@@Logger @AT@ 1634 @LENGTH@ 6
---DEL VariableDeclarationFragment@@LOG=LoggerFactory.getLogger(BindySimpleCsvMandatoryFieldsUnmarshallTest.class) @AT@ 1641 @LENGTH@ 80
------DEL SimpleName@@LOG @AT@ 1641 @LENGTH@ 3
------DEL MethodInvocation@@LoggerFactory.getLogger(BindySimpleCsvMandatoryFieldsUnmarshallTest.class) @AT@ 1647 @LENGTH@ 74
---------DEL SimpleName@@Name:LoggerFactory @AT@ 1647 @LENGTH@ 13
---------DEL SimpleName@@MethodName:getLogger:[BindySimpleCsvMandatoryFieldsUnmarshallTest.class] @AT@ 1661 @LENGTH@ 60
------------DEL TypeLiteral@@BindySimpleCsvMandatoryFieldsUnmarshallTest.class @AT@ 1671 @LENGTH@ 49


INS VariableDeclarationStatement@@final ServicesAttachment servicesAttachments=phaseContext.getDeploymentUnit().getAttachment(Attachments.SERVICES); @TO@ MethodDeclaration@@public, void, MethodName:deploy, DeploymentPhaseContext phaseContext, DeploymentUnitProcessingException,  @AT@ 2557 @LENGTH@ 116
---INS Modifier@@final @TO@ VariableDeclarationStatement@@final ServicesAttachment servicesAttachments=phaseContext.getDeploymentUnit().getAttachment(Attachments.SERVICES); @AT@ 2557 @LENGTH@ 5
---INS SimpleType@@ServicesAttachment @TO@ VariableDeclarationStatement@@final ServicesAttachment servicesAttachments=phaseContext.getDeploymentUnit().getAttachment(Attachments.SERVICES); @AT@ 2563 @LENGTH@ 18
---INS VariableDeclarationFragment@@servicesAttachments=phaseContext.getDeploymentUnit().getAttachment(Attachments.SERVICES) @TO@ VariableDeclarationStatement@@final ServicesAttachment servicesAttachments=phaseContext.getDeploymentUnit().getAttachment(Attachments.SERVICES); @AT@ 2582 @LENGTH@ 90
------INS SimpleName@@servicesAttachments @TO@ VariableDeclarationFragment@@servicesAttachments=phaseContext.getDeploymentUnit().getAttachment(Attachments.SERVICES) @AT@ 2582 @LENGTH@ 19
------INS MethodInvocation@@phaseContext.getDeploymentUnit().getAttachment(Attachments.SERVICES) @TO@ VariableDeclarationFragment@@servicesAttachments=phaseContext.getDeploymentUnit().getAttachment(Attachments.SERVICES) @AT@ 2604 @LENGTH@ 68
---------INS MethodInvocation@@MethodName:getDeploymentUnit:[] @TO@ MethodInvocation@@phaseContext.getDeploymentUnit().getAttachment(Attachments.SERVICES) @AT@ 2604 @LENGTH@ 32
---------INS SimpleName@@Name:phaseContext @TO@ MethodInvocation@@phaseContext.getDeploymentUnit().getAttachment(Attachments.SERVICES) @AT@ 2604 @LENGTH@ 12
---------INS SimpleName@@MethodName:getAttachment:[Attachments.SERVICES] @TO@ MethodInvocation@@phaseContext.getDeploymentUnit().getAttachment(Attachments.SERVICES) @AT@ 2637 @LENGTH@ 35
------------INS QualifiedName@@Attachments.SERVICES @TO@ SimpleName@@MethodName:getAttachment:[Attachments.SERVICES] @AT@ 2651 @LENGTH@ 20
---------------INS SimpleName@@Attachments @TO@ QualifiedName@@Attachments.SERVICES @AT@ 2651 @LENGTH@ 11
---------------INS SimpleName@@SERVICES @TO@ QualifiedName@@Attachments.SERVICES @AT@ 2663 @LENGTH@ 8


UPD MethodDeclaration@@protected, void, MethodName:doHandle, CommandContext ctx,  @TO@ protected, void, MethodName:doHandle, CommandContext ctx, CommandFormatException,  @AT@ 3106 @LENGTH@ 1966
---INS SimpleType@@CommandFormatException @TO@ MethodDeclaration@@protected, void, MethodName:doHandle, CommandContext ctx,  @AT@ 3205 @LENGTH@ 22


UPD MethodDeclaration@@public, List<Object>, MethodName:closePipeline,  @TO@ public, List<byte[]>, MethodName:closePipeline,  @AT@ 3418 @LENGTH@ 74
---UPD ParameterizedType@@List<Object> @TO@ List<byte[]> @AT@ 3425 @LENGTH@ 12
------DEL SimpleType@@Object @AT@ 3430 @LENGTH@ 6
------INS ArrayType@@byte[] @TO@ ParameterizedType@@List<Object> @AT@ 3430 @LENGTH@ 6
---------INS PrimitiveType@@byte @TO@ ArrayType@@byte[] @AT@ 3430 @LENGTH@ 4


UPD MethodDeclaration@@public, String, MethodName:postTweet, TweetForm tweetForm,  @TO@ public, String, MethodName:postTweet, Principal user, TweetForm tweetForm,  @AT@ 2118 @LENGTH@ 475
---UPD VariableDeclarationStatement@@List<ServiceProviderConnection<TwitterOperations>> connections=twitterProvider.getConnections(1); @TO@ List<ServiceProviderConnection<TwitterOperations>> connections=twitterProvider.getConnections(user.getName()); @AT@ 2167 @LENGTH@ 99
------UPD VariableDeclarationFragment@@connections=twitterProvider.getConnections(1) @TO@ connections=twitterProvider.getConnections(user.getName()) @AT@ 2218 @LENGTH@ 47
---------UPD MethodInvocation@@twitterProvider.getConnections(1) @TO@ twitterProvider.getConnections(user.getName()) @AT@ 2232 @LENGTH@ 33
------------UPD SimpleName@@MethodName:getConnections:[1] @TO@ MethodName:getConnections:[user.getName()] @AT@ 2248 @LENGTH@ 17
---------------DEL NumberLiteral@@1 @AT@ 2263 @LENGTH@ 1
---------------INS MethodInvocation@@user.getName() @TO@ SimpleName@@MethodName:getConnections:[1] @AT@ 2348 @LENGTH@ 14
------------------INS SimpleName@@Name:user @TO@ MethodInvocation@@user.getName() @AT@ 2348 @LENGTH@ 4
------------------INS SimpleName@@MethodName:getName:[] @TO@ MethodInvocation@@user.getName() @AT@ 2353 @LENGTH@ 9
---INS SingleVariableDeclaration@@Principal user @TO@ MethodDeclaration@@public, String, MethodName:postTweet, TweetForm tweetForm,  @AT@ 2211 @LENGTH@ 14
------INS SimpleType@@Principal @TO@ SingleVariableDeclaration@@Principal user @AT@ 2211 @LENGTH@ 9
------INS SimpleName@@user @TO@ SingleVariableDeclaration@@Principal user @AT@ 2221 @LENGTH@ 4


UPD MethodDeclaration@@static, void, MethodName:addService, final ServiceTarget serviceTarget, final ServiceName serviceName, final ServiceName pathServiceName,  @TO@ static, ServiceController<VirtualFile>, MethodName:addService, final ServiceTarget serviceTarget, final ServiceName serviceName, final ServiceName pathServiceName,  @AT@ 1527 @LENGTH@ 358
---DEL PrimitiveType@@void @AT@ 1534 @LENGTH@ 4
---INS ParameterizedType@@ServiceController<VirtualFile> @TO@ MethodDeclaration@@static, void, MethodName:addService, final ServiceTarget serviceTarget, final ServiceName serviceName, final ServiceName pathServiceName,  @AT@ 1582 @LENGTH@ 30
------INS SimpleType@@ServiceController @TO@ ParameterizedType@@ServiceController<VirtualFile> @AT@ 1582 @LENGTH@ 17
------INS SimpleType@@VirtualFile @TO@ ParameterizedType@@ServiceController<VirtualFile> @AT@ 1600 @LENGTH@ 11
---DEL ExpressionStatement@@MethodInvocation:serviceTarget.addService(serviceName,service).addDependency(pathServiceName,String.class,service.pathValue).install() @AT@ 1732 @LENGTH@ 147
---INS ReturnStatement@@MethodInvocation:serviceTarget.addService(serviceName,service).addDependency(pathServiceName,String.class,service.pathValue).install() @TO@ MethodDeclaration@@static, void, MethodName:addService, final ServiceTarget serviceTarget, final ServiceName serviceName, final ServiceName pathServiceName,  @AT@ 1806 @LENGTH@ 154
------MOV MethodInvocation@@serviceTarget.addService(serviceName,service).addDependency(pathServiceName,String.class,service.pathValue).install() @TO@ ReturnStatement@@MethodInvocation:serviceTarget.addService(serviceName,service).addDependency(pathServiceName,String.class,service.pathValue).install() @AT@ 1732 @LENGTH@ 146


UPD Block@@SyncBody:{  outputStream.write(ModelControllerClientProtocol.PARAM_HANDLE_RESULT_COMPLETE);  outputStream.write(ModelControllerClientProtocol.PARAM_OPERATION);  result.getCompensatingOperation().writeExternal(outputStream);  outputStream.flush();} @TO@ SyncBody:{  outputStream.write(ModelControllerClientProtocol.PARAM_HANDLE_RESULT_COMPLETE);  outputStream.write(ModelControllerClientProtocol.PARAM_OPERATION);  ModelNode compensating=result.getCompensatingOperation() != null ? result.getCompensatingOperation() : new ModelNode();  compensating.writeExternal(outputStream);  outputStream.flush();} @AT@ 11030 @LENGTH@ 351
---INS VariableDeclarationStatement@@ModelNode compensating=result.getCompensatingOperation() != null ? result.getCompensatingOperation() : new ModelNode(); @TO@ Block@@SyncBody:{  outputStream.write(ModelControllerClientProtocol.PARAM_HANDLE_RESULT_COMPLETE);  outputStream.write(ModelControllerClientProtocol.PARAM_OPERATION);  result.getCompensatingOperation().writeExternal(outputStream);  outputStream.flush();} @AT@ 11251 @LENGTH@ 121
------INS SimpleType@@ModelNode @TO@ VariableDeclarationStatement@@ModelNode compensating=result.getCompensatingOperation() != null ? result.getCompensatingOperation() : new ModelNode(); @AT@ 11251 @LENGTH@ 9
------INS VariableDeclarationFragment@@compensating=result.getCompensatingOperation() != null ? result.getCompensatingOperation() : new ModelNode() @TO@ VariableDeclarationStatement@@ModelNode compensating=result.getCompensatingOperation() != null ? result.getCompensatingOperation() : new ModelNode(); @AT@ 11261 @LENGTH@ 110
---------INS SimpleName@@compensating @TO@ VariableDeclarationFragment@@compensating=result.getCompensatingOperation() != null ? result.getCompensatingOperation() : new ModelNode() @AT@ 11261 @LENGTH@ 12
---------INS ConditionalExpression@@result.getCompensatingOperation() != null ? result.getCompensatingOperation() : new ModelNode() @TO@ VariableDeclarationFragment@@compensating=result.getCompensatingOperation() != null ? result.getCompensatingOperation() : new ModelNode() @AT@ 11276 @LENGTH@ 95
------------INS InfixExpression@@result.getCompensatingOperation() != null @TO@ ConditionalExpression@@result.getCompensatingOperation() != null ? result.getCompensatingOperation() : new ModelNode() @AT@ 11276 @LENGTH@ 41
---------------INS MethodInvocation@@result.getCompensatingOperation() @TO@ InfixExpression@@result.getCompensatingOperation() != null @AT@ 11276 @LENGTH@ 33
------------------INS SimpleName@@Name:result @TO@ MethodInvocation@@result.getCompensatingOperation() @AT@ 11276 @LENGTH@ 6
------------------INS SimpleName@@MethodName:getCompensatingOperation:[] @TO@ MethodInvocation@@result.getCompensatingOperation() @AT@ 11283 @LENGTH@ 26
---------------INS Operator@@!= @TO@ InfixExpression@@result.getCompensatingOperation() != null @AT@ 11309 @LENGTH@ 2
---------------INS NullLiteral@@null @TO@ InfixExpression@@result.getCompensatingOperation() != null @AT@ 11313 @LENGTH@ 4
------------INS MethodInvocation@@result.getCompensatingOperation() @TO@ ConditionalExpression@@result.getCompensatingOperation() != null ? result.getCompensatingOperation() : new ModelNode() @AT@ 11320 @LENGTH@ 33
---------------INS SimpleName@@Name:result @TO@ MethodInvocation@@result.getCompensatingOperation() @AT@ 11320 @LENGTH@ 6
---------------INS SimpleName@@MethodName:getCompensatingOperation:[] @TO@ MethodInvocation@@result.getCompensatingOperation() @AT@ 11327 @LENGTH@ 26
------------INS ClassInstanceCreation@@ModelNode[] @TO@ ConditionalExpression@@result.getCompensatingOperation() != null ? result.getCompensatingOperation() : new ModelNode() @AT@ 11356 @LENGTH@ 15
---------------INS New@@new @TO@ ClassInstanceCreation@@ModelNode[] @AT@ 11356 @LENGTH@ 3
---------------INS SimpleType@@ModelNode @TO@ ClassInstanceCreation@@ModelNode[] @AT@ 11360 @LENGTH@ 9
---UPD ExpressionStatement@@MethodInvocation:result.getCompensatingOperation().writeExternal(outputStream) @TO@ MethodInvocation:compensating.writeExternal(outputStream) @AT@ 11251 @LENGTH@ 62
------UPD MethodInvocation@@result.getCompensatingOperation().writeExternal(outputStream) @TO@ compensating.writeExternal(outputStream) @AT@ 11251 @LENGTH@ 61
---------DEL MethodInvocation@@MethodName:getCompensatingOperation:[] @AT@ 11251 @LENGTH@ 33
---------UPD SimpleName@@Name:result @TO@ Name:compensating @AT@ 11251 @LENGTH@ 6


UPD IfStatement@@if (null != source) {  maybeEmitEvent(new AfterConvertEvent<T>(object,source));} else {  if (LOGGER.isDebugEnabled()) {    LOGGER.debug("Source object was <NULL>, so couldn't fire AfterConvertEvent<" + type.getName() + ">");  }} @TO@ if (null != source) {  maybeEmitEvent(new AfterConvertEvent<T>(object,source));} @AT@ 44739 @LENGTH@ 271
---DEL Block@@ElseBody:{  if (LOGGER.isDebugEnabled()) {    LOGGER.debug("Source object was <NULL>, so couldn't fire AfterConvertEvent<" + type.getName() + ">");  }} @AT@ 44840 @LENGTH@ 170
------DEL IfStatement@@if (LOGGER.isDebugEnabled()) {  LOGGER.debug("Source object was <NULL>, so couldn't fire AfterConvertEvent<" + type.getName() + ">");} @AT@ 44850 @LENGTH@ 152
---------DEL MethodInvocation@@LOGGER.isDebugEnabled() @AT@ 44854 @LENGTH@ 23
------------DEL SimpleName@@Name:LOGGER @AT@ 44854 @LENGTH@ 6
------------DEL SimpleName@@MethodName:isDebugEnabled:[] @AT@ 44861 @LENGTH@ 16
---------DEL Block@@ThenBody:{  LOGGER.debug("Source object was <NULL>, so couldn't fire AfterConvertEvent<" + type.getName() + ">");} @AT@ 44879 @LENGTH@ 123
------------DEL ExpressionStatement@@MethodInvocation:LOGGER.debug("Source object was <NULL>, so couldn't fire AfterConvertEvent<" + type.getName() + ">") @AT@ 44891 @LENGTH@ 101
---------------DEL MethodInvocation@@LOGGER.debug("Source object was <NULL>, so couldn't fire AfterConvertEvent<" + type.getName() + ">") @AT@ 44891 @LENGTH@ 100
------------------DEL SimpleName@@Name:LOGGER @AT@ 44891 @LENGTH@ 6
------------------DEL SimpleName@@MethodName:debug:["Source object was <NULL>, so couldn't fire AfterConvertEvent<" + type.getName() + ">"] @AT@ 44898 @LENGTH@ 93
---------------------DEL InfixExpression@@"Source object was <NULL>, so couldn't fire AfterConvertEvent<" + type.getName() + ">" @AT@ 44904 @LENGTH@ 86
------------------------DEL StringLiteral@@"Source object was <NULL>, so couldn't fire AfterConvertEvent<" @AT@ 44904 @LENGTH@ 63
------------------------DEL Operator@@+ @AT@ 44967 @LENGTH@ 1
------------------------DEL MethodInvocation@@type.getName() @AT@ 44970 @LENGTH@ 14
---------------------------DEL SimpleName@@Name:type @AT@ 44970 @LENGTH@ 4
---------------------------DEL SimpleName@@MethodName:getName:[] @AT@ 44975 @LENGTH@ 9
------------------------DEL StringLiteral@@">" @AT@ 44987 @LENGTH@ 3


DEL ExpressionStatement@@Assignment:this.parameters=parameters @AT@ 1159 @LENGTH@ 29
---DEL Assignment@@this.parameters=parameters @AT@ 1159 @LENGTH@ 28
------DEL FieldAccess@@this.parameters @AT@ 1159 @LENGTH@ 15
---------DEL ThisExpression@@this @AT@ 1159 @LENGTH@ 4
---------DEL SimpleName@@parameters @AT@ 1164 @LENGTH@ 10
------DEL Operator@@= @AT@ 1174 @LENGTH@ 1
------DEL SimpleName@@parameters @AT@ 1177 @LENGTH@ 10


INS ExpressionStatement@@MethodInvocation:subModel.get(HANDLER_TYPE).set(handlerType) @TO@ MethodDeclaration@@public, Cancellable, MethodName:execute, final NewOperationContext context, final ModelNode operation, final ResultHandler resultHandler,  @AT@ 4808 @LENGTH@ 44
---INS MethodInvocation@@subModel.get(HANDLER_TYPE).set(handlerType) @TO@ ExpressionStatement@@MethodInvocation:subModel.get(HANDLER_TYPE).set(handlerType) @AT@ 4808 @LENGTH@ 43
------INS MethodInvocation@@MethodName:get:[HANDLER_TYPE] @TO@ MethodInvocation@@subModel.get(HANDLER_TYPE).set(handlerType) @AT@ 4808 @LENGTH@ 26
---------INS SimpleName@@HANDLER_TYPE @TO@ MethodInvocation@@MethodName:get:[HANDLER_TYPE] @AT@ 4821 @LENGTH@ 12
------INS SimpleName@@Name:subModel @TO@ MethodInvocation@@subModel.get(HANDLER_TYPE).set(handlerType) @AT@ 4808 @LENGTH@ 8
------INS SimpleName@@MethodName:set:[handlerType] @TO@ MethodInvocation@@subModel.get(HANDLER_TYPE).set(handlerType) @AT@ 4835 @LENGTH@ 16
---------INS SimpleName@@handlerType @TO@ SimpleName@@MethodName:set:[handlerType] @AT@ 4839 @LENGTH@ 11


UPD ExpressionStatement@@MethodInvocation:deployments.registerOperationHandler(DeploymentRemoveHandler.OPERATION_NAME,DeploymentRemoveHandler.INSTANCE,DomainDescriptionProviders.DEPLOYMENT_REMOVE) @TO@ MethodInvocation:deployments.registerOperationHandler(DeploymentRemoveHandler.OPERATION_NAME,DeploymentRemoveHandler.INSTANCE,DeploymentRemoveHandler.INSTANCE) @AT@ 18895 @LENGTH@ 157
---UPD MethodInvocation@@deployments.registerOperationHandler(DeploymentRemoveHandler.OPERATION_NAME,DeploymentRemoveHandler.INSTANCE,DomainDescriptionProviders.DEPLOYMENT_REMOVE) @TO@ deployments.registerOperationHandler(DeploymentRemoveHandler.OPERATION_NAME,DeploymentRemoveHandler.INSTANCE,DeploymentRemoveHandler.INSTANCE) @AT@ 18895 @LENGTH@ 156
------UPD SimpleName@@MethodName:registerOperationHandler:[DeploymentRemoveHandler.OPERATION_NAME, DeploymentRemoveHandler.INSTANCE, DomainDescriptionProviders.DEPLOYMENT_REMOVE] @TO@ MethodName:registerOperationHandler:[DeploymentRemoveHandler.OPERATION_NAME, DeploymentRemoveHandler.INSTANCE, DeploymentRemoveHandler.INSTANCE] @AT@ 18907 @LENGTH@ 144
---------UPD QualifiedName@@DomainDescriptionProviders.DEPLOYMENT_REMOVE @TO@ DeploymentRemoveHandler.INSTANCE @AT@ 19006 @LENGTH@ 44
------------UPD SimpleName@@DomainDescriptionProviders @TO@ DeploymentRemoveHandler @AT@ 19006 @LENGTH@ 26
------------UPD SimpleName@@DEPLOYMENT_REMOVE @TO@ INSTANCE @AT@ 19033 @LENGTH@ 17


DEL MethodDeclaration@@public, void, MethodName:tearDown, Exception,  @AT@ 1530 @LENGTH@ 100
---DEL Modifier@@public @AT@ 1530 @LENGTH@ 6
---DEL PrimitiveType@@void @AT@ 1537 @LENGTH@ 4
---DEL SimpleName@@MethodName:tearDown @AT@ 1542 @LENGTH@ 8
---DEL SimpleType@@Exception @AT@ 1560 @LENGTH@ 9
---DEL ExpressionStatement@@SuperMethodInvocation:super.tearDown() @AT@ 1580 @LENGTH@ 17
------DEL SuperMethodInvocation@@super.tearDown() @AT@ 1580 @LENGTH@ 16
---------DEL SimpleName@@MethodName:tearDown:[] @AT@ 1586 @LENGTH@ 8
---DEL ExpressionStatement@@MethodInvocation:this.map.clear() @AT@ 1607 @LENGTH@ 17
------DEL MethodInvocation@@this.map.clear() @AT@ 1607 @LENGTH@ 16
---------DEL FieldAccess@@this.map @AT@ 1607 @LENGTH@ 8
------------DEL ThisExpression@@this @AT@ 1607 @LENGTH@ 4
------------DEL SimpleName@@map @AT@ 1612 @LENGTH@ 3
---------DEL SimpleName@@MethodName:clear:[] @AT@ 1616 @LENGTH@ 7


UPD TryStatement@@try {  if (baseURIString == null) {    if (exchange.getFromEndpoint() != null) {      baseURIString=exchange.getFromEndpoint().getEndpointUri();    } else {      baseURIString="/";    }  }  baseURI=new URI(baseURIString);  String basePath=baseURI.getRawPath();  if (path.startsWith(basePath)) {    path=path.substring(basePath.length());    if (path.startsWith("/")) {      path=path.substring(1);    }  } else {    throw new RuntimeCamelException("Cannot analyze the Exchange.HTTP_PATH header, due to: cannot find the right HTTP_BASE_URI");  }} catch (Throwable t) {  throw new RuntimeCamelException("Cannot analyze the Exchange.HTTP_PATH header, due to: " + t.getMessage(),t);} @TO@ try {  if (baseURIString == null) {    if (exchange.getFromEndpoint() != null) {      baseURIString=exchange.getFromEndpoint().getEndpointUri();    } else {      baseURIString="/";    }  }  baseURI=new URI(baseURIString);  String basePath=baseURI.getRawPath();  if (path.startsWith(basePath)) {    path=path.substring(basePath.length());    if (path.startsWith("/")) {      path=path.substring(1);    }  } else {    throw new RuntimeExchangeException("Cannot analyze the Exchange.HTTP_PATH header, due to: cannot find the right HTTP_BASE_URI",exchange);  }} catch (Throwable t) {  throw new RuntimeExchangeException("Cannot analyze the Exchange.HTTP_PATH header, due to: " + t.getMessage(),exchange,t);} @AT@ 6256 @LENGTH@ 1207
---UPD IfStatement@@if (path.startsWith(basePath)) {  path=path.substring(basePath.length());  if (path.startsWith("/")) {    path=path.substring(1);  }} else {  throw new RuntimeCamelException("Cannot analyze the Exchange.HTTP_PATH header, due to: cannot find the right HTTP_BASE_URI");} @TO@ if (path.startsWith(basePath)) {  path=path.substring(basePath.length());  if (path.startsWith("/")) {    path=path.substring(1);  }} else {  throw new RuntimeExchangeException("Cannot analyze the Exchange.HTTP_PATH header, due to: cannot find the right HTTP_BASE_URI",exchange);} @AT@ 6791 @LENGTH@ 431
------UPD Block@@ElseBody:{  throw new RuntimeCamelException("Cannot analyze the Exchange.HTTP_PATH header, due to: cannot find the right HTTP_BASE_URI");} @TO@ ElseBody:{  throw new RuntimeExchangeException("Cannot analyze the Exchange.HTTP_PATH header, due to: cannot find the right HTTP_BASE_URI",exchange);} @AT@ 7049 @LENGTH@ 173
---------UPD ThrowStatement@@ClassInstanceCreation:new RuntimeCamelException("Cannot analyze the Exchange.HTTP_PATH header, due to: cannot find the right HTTP_BASE_URI") @TO@ ClassInstanceCreation:new RuntimeExchangeException("Cannot analyze the Exchange.HTTP_PATH header, due to: cannot find the right HTTP_BASE_URI",exchange) @AT@ 7075 @LENGTH@ 125
------------UPD ClassInstanceCreation@@RuntimeCamelException["Cannot analyze the Exchange.HTTP_PATH header, due to: cannot find the right HTTP_BASE_URI"] @TO@ RuntimeExchangeException["Cannot analyze the Exchange.HTTP_PATH header, due to: cannot find the right HTTP_BASE_URI", exchange] @AT@ 7081 @LENGTH@ 118
---------------UPD SimpleType@@RuntimeCamelException @TO@ RuntimeExchangeException @AT@ 7085 @LENGTH@ 21
---------------INS SimpleName@@exchange @TO@ ClassInstanceCreation@@RuntimeCamelException["Cannot analyze the Exchange.HTTP_PATH header, due to: cannot find the right HTTP_BASE_URI"] @AT@ 7494 @LENGTH@ 8
---UPD CatchClause@@catch (Throwable t) {  throw new RuntimeCamelException("Cannot analyze the Exchange.HTTP_PATH header, due to: " + t.getMessage(),t);} @TO@ catch (Throwable t) {  throw new RuntimeExchangeException("Cannot analyze the Exchange.HTTP_PATH header, due to: " + t.getMessage(),exchange,t);} @AT@ 7241 @LENGTH@ 222
------UPD ThrowStatement@@ClassInstanceCreation:new RuntimeCamelException("Cannot analyze the Exchange.HTTP_PATH header, due to: " + t.getMessage(),t) @TO@ ClassInstanceCreation:new RuntimeExchangeException("Cannot analyze the Exchange.HTTP_PATH header, due to: " + t.getMessage(),exchange,t) @AT@ 7283 @LENGTH@ 162
---------UPD ClassInstanceCreation@@RuntimeCamelException["Cannot analyze the Exchange.HTTP_PATH header, due to: " + t.getMessage(), t] @TO@ RuntimeExchangeException["Cannot analyze the Exchange.HTTP_PATH header, due to: " + t.getMessage(), exchange, t] @AT@ 7289 @LENGTH@ 155
------------UPD SimpleType@@RuntimeCamelException @TO@ RuntimeExchangeException @AT@ 7293 @LENGTH@ 21
------------INS SimpleName@@exchange @TO@ ClassInstanceCreation@@RuntimeCamelException["Cannot analyze the Exchange.HTTP_PATH header, due to: " + t.getMessage(), t] @AT@ 7697 @LENGTH@ 8


INS FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @TO@ TypeDeclaration@@[@Deprecated, public]GrantedAuthorityImpl, [GrantedAuthority] @AT@ 1287 @LENGTH@ 90
---INS Modifier@@private @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @AT@ 1287 @LENGTH@ 7
---INS Modifier@@static @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @AT@ 1295 @LENGTH@ 6
---INS Modifier@@final @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @AT@ 1302 @LENGTH@ 5
---INS PrimitiveType@@long @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @AT@ 1308 @LENGTH@ 4
---INS VariableDeclarationFragment@@serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @AT@ 1313 @LENGTH@ 63
------INS SimpleName@@serialVersionUID @TO@ VariableDeclarationFragment@@serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID @AT@ 1313 @LENGTH@ 16
------INS QualifiedName@@SpringSecurityCoreVersion.SERIAL_VERSION_UID @TO@ VariableDeclarationFragment@@serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID @AT@ 1332 @LENGTH@ 44
---------INS SimpleName@@SpringSecurityCoreVersion @TO@ QualifiedName@@SpringSecurityCoreVersion.SERIAL_VERSION_UID @AT@ 1332 @LENGTH@ 25
---------INS SimpleName@@SERIAL_VERSION_UID @TO@ QualifiedName@@SpringSecurityCoreVersion.SERIAL_VERSION_UID @AT@ 1358 @LENGTH@ 18


MOV ExpressionStatement@@SuperMethodInvocation:super.setUp() @TO@ MethodDeclaration@@public, void, MethodName:setUp, Exception,  @AT@ 1469 @LENGTH@ 14


INS IfStatement@@if (!Util.isWindows()) {  enterState('\\',EscapeCharacterState.INSTANCE);  enterState('"',QuotesState.QUOTES_INCLUDED);} else {  enterState('"',new QuotesState(true,false));} @TO@ MethodDeclaration@@voidMethodName:ArgumentValueState,  @AT@ 2578 @LENGTH@ 321
---INS PrefixExpression@@!Util.isWindows() @TO@ IfStatement@@if (!Util.isWindows()) {  enterState('\\',EscapeCharacterState.INSTANCE);  enterState('"',QuotesState.QUOTES_INCLUDED);} else {  enterState('"',new QuotesState(true,false));} @AT@ 2581 @LENGTH@ 17
------INS Operator@@! @TO@ PrefixExpression@@!Util.isWindows() @AT@ 2581 @LENGTH@ 1
------INS MethodInvocation@@Util.isWindows() @TO@ PrefixExpression@@!Util.isWindows() @AT@ 2582 @LENGTH@ 16
---------INS SimpleName@@Name:Util @TO@ MethodInvocation@@Util.isWindows() @AT@ 2582 @LENGTH@ 4
---------INS SimpleName@@MethodName:isWindows:[] @TO@ MethodInvocation@@Util.isWindows() @AT@ 2587 @LENGTH@ 11
---INS Block@@ThenBody:{  enterState('\\',EscapeCharacterState.INSTANCE);  enterState('"',QuotesState.QUOTES_INCLUDED);} @TO@ IfStatement@@if (!Util.isWindows()) {  enterState('\\',EscapeCharacterState.INSTANCE);  enterState('"',QuotesState.QUOTES_INCLUDED);} else {  enterState('"',new QuotesState(true,false));} @AT@ 2600 @LENGTH@ 223
------MOV ExpressionStatement@@MethodInvocation:enterState('"',QuotesState.QUOTES_INCLUDED) @TO@ Block@@ThenBody:{  enterState('\\',EscapeCharacterState.INSTANCE);  enterState('"',QuotesState.QUOTES_INCLUDED);} @AT@ 2223 @LENGTH@ 45
------MOV ExpressionStatement@@MethodInvocation:enterState('\\',EscapeCharacterState.INSTANCE) @TO@ Block@@ThenBody:{  enterState('\\',EscapeCharacterState.INSTANCE);  enterState('"',QuotesState.QUOTES_INCLUDED);} @AT@ 2602 @LENGTH@ 48
---INS Block@@ElseBody:{  enterState('"',new QuotesState(true,false));} @TO@ IfStatement@@if (!Util.isWindows()) {  enterState('\\',EscapeCharacterState.INSTANCE);  enterState('"',QuotesState.QUOTES_INCLUDED);} else {  enterState('"',new QuotesState(true,false));} @AT@ 2829 @LENGTH@ 70
------INS ExpressionStatement@@MethodInvocation:enterState('"',new QuotesState(true,false)) @TO@ Block@@ElseBody:{  enterState('"',new QuotesState(true,false));} @AT@ 2843 @LENGTH@ 46
---------INS MethodInvocation@@enterState('"',new QuotesState(true,false)) @TO@ ExpressionStatement@@MethodInvocation:enterState('"',new QuotesState(true,false)) @AT@ 2843 @LENGTH@ 45
------------INS SimpleName@@MethodName:enterState:['"', new QuotesState(true,false)] @TO@ MethodInvocation@@enterState('"',new QuotesState(true,false)) @AT@ 2843 @LENGTH@ 45
---------------INS CharacterLiteral@@'"' @TO@ SimpleName@@MethodName:enterState:['"', new QuotesState(true,false)] @AT@ 2854 @LENGTH@ 3
---------------INS ClassInstanceCreation@@QuotesState[true, false] @TO@ SimpleName@@MethodName:enterState:['"', new QuotesState(true,false)] @AT@ 2859 @LENGTH@ 28
------------------INS New@@new @TO@ ClassInstanceCreation@@QuotesState[true, false] @AT@ 2859 @LENGTH@ 3
------------------INS SimpleType@@QuotesState @TO@ ClassInstanceCreation@@QuotesState[true, false] @AT@ 2863 @LENGTH@ 11
------------------INS BooleanLiteral@@true @TO@ ClassInstanceCreation@@QuotesState[true, false] @AT@ 2875 @LENGTH@ 4
------------------INS BooleanLiteral@@false @TO@ ClassInstanceCreation@@QuotesState[true, false] @AT@ 2881 @LENGTH@ 5


UPD EnhancedForStatement@@for (RouteService routeService : routeServices) {  DefaultRouteStartupOrder order=doPrepareRouteToBeStarted(routeService);  if (order != null) {    if (checkClash && doCheckStartupOrderClash(order,inputs)) {      inputs.put(order.getStartupOrder(),order);    } else {      inputs.put(order.getStartupOrder(),order);    }  }} @TO@ for (RouteService routeService : routeServices) {  DefaultRouteStartupOrder order=doPrepareRouteToBeStarted(routeService);  if (checkClash) {    doCheckStartupOrderClash(order,inputs);  }  inputs.put(order.getStartupOrder(),order);} @AT@ 69090 @LENGTH@ 497
---DEL IfStatement@@if (order != null) {  if (checkClash && doCheckStartupOrderClash(order,inputs)) {    inputs.put(order.getStartupOrder(),order);  } else {    inputs.put(order.getStartupOrder(),order);  }} @AT@ 69295 @LENGTH@ 282
------DEL InfixExpression@@order != null @AT@ 69299 @LENGTH@ 13
---------DEL SimpleName@@order @AT@ 69299 @LENGTH@ 5
---------DEL Operator@@!= @AT@ 69304 @LENGTH@ 2
---------DEL NullLiteral@@null @AT@ 69308 @LENGTH@ 4
------DEL Block@@ThenBody:{  if (checkClash && doCheckStartupOrderClash(order,inputs)) {    inputs.put(order.getStartupOrder(),order);  } else {    inputs.put(order.getStartupOrder(),order);  }} @AT@ 69314 @LENGTH@ 263
---------DEL IfStatement@@if (checkClash && doCheckStartupOrderClash(order,inputs)) {  inputs.put(order.getStartupOrder(),order);} else {  inputs.put(order.getStartupOrder(),order);} @AT@ 69332 @LENGTH@ 231
------------DEL InfixExpression@@checkClash && doCheckStartupOrderClash(order,inputs) @AT@ 69336 @LENGTH@ 53
---------------DEL SimpleName@@checkClash @AT@ 69336 @LENGTH@ 10
---------------DEL Operator@@&& @AT@ 69346 @LENGTH@ 2
------------DEL Block@@ThenBody:{  inputs.put(order.getStartupOrder(),order);} @AT@ 69391 @LENGTH@ 83
---INS IfStatement@@if (checkClash) {  doCheckStartupOrderClash(order,inputs);} @TO@ EnhancedForStatement@@for (RouteService routeService : routeServices) {  DefaultRouteStartupOrder order=doPrepareRouteToBeStarted(routeService);  if (order != null) {    if (checkClash && doCheckStartupOrderClash(order,inputs)) {      inputs.put(order.getStartupOrder(),order);    } else {      inputs.put(order.getStartupOrder(),order);    }  }} @AT@ 69295 @LENGTH@ 88
------INS SimpleName@@checkClash @TO@ IfStatement@@if (checkClash) {  doCheckStartupOrderClash(order,inputs);} @AT@ 69299 @LENGTH@ 10
------MOV Block@@ElseBody:{  inputs.put(order.getStartupOrder(),order);} @TO@ IfStatement@@if (checkClash) {  doCheckStartupOrderClash(order,inputs);} @AT@ 69480 @LENGTH@ 83
---MOV ExpressionStatement@@MethodInvocation:inputs.put(order.getStartupOrder(),order) @TO@ EnhancedForStatement@@for (RouteService routeService : routeServices) {  DefaultRouteStartupOrder order=doPrepareRouteToBeStarted(routeService);  if (order != null) {    if (checkClash && doCheckStartupOrderClash(order,inputs)) {      inputs.put(order.getStartupOrder(),order);    } else {      inputs.put(order.getStartupOrder(),order);    }  }} @AT@ 69413 @LENGTH@ 43


INS ExpressionStatement@@MethodInvocation:setComponentCreateServiceFactory(SingletonComponentCreateService.FACTORY) @TO@ MethodDeclaration@@public, voidMethodName:SingletonComponentConfiguration, final SingletonComponentDescription description, final EEModuleClassConfiguration ejbClassConfiguration,  @AT@ 2884 @LENGTH@ 74
---MOV MethodInvocation@@addComponentSystemInterceptorFactory(new ComponentInterceptorFactory(){
  @Override protected Interceptor create(  final Component component,  final InterceptorFactoryContext context){
    return new SingletonBMTInterceptor((SingletonComponent)component);
  }
}
) @TO@ ExpressionStatement@@MethodInvocation:setComponentCreateServiceFactory(SingletonComponentCreateService.FACTORY) @AT@ 2512 @LENGTH@ 334
------UPD SimpleName@@MethodName:addComponentSystemInterceptorFactory:[new ComponentInterceptorFactory(){
  @Override protected Interceptor create(  final Component component,  final InterceptorFactoryContext context){
    return new SingletonBMTInterceptor((SingletonComponent)component);
  }
}
] @TO@ MethodName:setComponentCreateServiceFactory:[SingletonComponentCreateService.FACTORY] @AT@ 2512 @LENGTH@ 334
---------DEL ClassInstanceCreation@@ComponentInterceptorFactory[] @AT@ 2549 @LENGTH@ 296
------------DEL New@@new @AT@ 2549 @LENGTH@ 3
------------DEL SimpleType@@ComponentInterceptorFactory @AT@ 2553 @LENGTH@ 27
------------DEL AnonymousClassDeclaration@@AnonymousClass @AT@ 2583 @LENGTH@ 262
---------------DEL MethodDeclaration@@protected, Interceptor, MethodName:create, final Component component, final InterceptorFactoryContext context,  @AT@ 2627 @LENGTH@ 204
------------------DEL Modifier@@protected @AT@ 2627 @LENGTH@ 9
------------------DEL SimpleType@@Interceptor @AT@ 2637 @LENGTH@ 11
------------------DEL SimpleName@@MethodName:create @AT@ 2649 @LENGTH@ 6
------------------DEL SingleVariableDeclaration@@final Component component @AT@ 2656 @LENGTH@ 25
---------------------DEL Modifier@@final @AT@ 2656 @LENGTH@ 5
---------------------DEL SimpleType@@Component @AT@ 2662 @LENGTH@ 9
---------------------DEL SimpleName@@component @AT@ 2672 @LENGTH@ 9
------------------DEL SingleVariableDeclaration@@final InterceptorFactoryContext context @AT@ 2683 @LENGTH@ 39
---------------------DEL Modifier@@final @AT@ 2683 @LENGTH@ 5
---------------------DEL SimpleType@@InterceptorFactoryContext @AT@ 2689 @LENGTH@ 25
---------------------DEL SimpleName@@context @AT@ 2715 @LENGTH@ 7
------------------DEL ReturnStatement@@ClassInstanceCreation:new SingletonBMTInterceptor((SingletonComponent)component) @AT@ 2746 @LENGTH@ 67
---------------------DEL ClassInstanceCreation@@SingletonBMTInterceptor[(SingletonComponent)component] @AT@ 2753 @LENGTH@ 59
------------------------DEL New@@new @AT@ 2753 @LENGTH@ 3
------------------------DEL SimpleType@@SingletonBMTInterceptor @AT@ 2757 @LENGTH@ 23
------------------------DEL CastExpression@@(SingletonComponent)component @AT@ 2781 @LENGTH@ 30
---------------------------DEL SimpleType@@SingletonComponent @AT@ 2782 @LENGTH@ 18
---------------------------DEL SimpleName@@component @AT@ 2802 @LENGTH@ 9
---------INS QualifiedName@@SingletonComponentCreateService.FACTORY @TO@ SimpleName@@MethodName:addComponentSystemInterceptorFactory:[new ComponentInterceptorFactory(){
  @Override protected Interceptor create(  final Component component,  final InterceptorFactoryContext context){
    return new SingletonBMTInterceptor((SingletonComponent)component);
  }
}
] @AT@ 2917 @LENGTH@ 39
------------INS SimpleName@@SingletonComponentCreateService @TO@ QualifiedName@@SingletonComponentCreateService.FACTORY @AT@ 2917 @LENGTH@ 31
------------INS SimpleName@@FACTORY @TO@ QualifiedName@@SingletonComponentCreateService.FACTORY @AT@ 2949 @LENGTH@ 7


DEL MethodDeclaration@@public, void, MethodName:tearDown, Exception,  @AT@ 1495 @LENGTH@ 100
---DEL Modifier@@public @AT@ 1495 @LENGTH@ 6
---DEL PrimitiveType@@void @AT@ 1502 @LENGTH@ 4
---DEL SimpleName@@MethodName:tearDown @AT@ 1507 @LENGTH@ 8
---DEL SimpleType@@Exception @AT@ 1525 @LENGTH@ 9
---DEL ExpressionStatement@@SuperMethodInvocation:super.tearDown() @AT@ 1545 @LENGTH@ 17
------DEL SuperMethodInvocation@@super.tearDown() @AT@ 1545 @LENGTH@ 16
---------DEL SimpleName@@MethodName:tearDown:[] @AT@ 1551 @LENGTH@ 8
---DEL ExpressionStatement@@MethodInvocation:this.map.clear() @AT@ 1572 @LENGTH@ 17
------DEL MethodInvocation@@this.map.clear() @AT@ 1572 @LENGTH@ 16
---------DEL FieldAccess@@this.map @AT@ 1572 @LENGTH@ 8
------------DEL ThisExpression@@this @AT@ 1572 @LENGTH@ 4
------------DEL SimpleName@@map @AT@ 1577 @LENGTH@ 3
---------DEL SimpleName@@MethodName:clear:[] @AT@ 1581 @LENGTH@ 7


UPD VariableDeclarationStatement@@String[][] data={{"peter","127"},{"pharma","376"},{"bergisch-gladbach","174845214"},{"mönchengladbach","664645214"},{"deutsch","28"},{"deutz","28"},{"hamburg","06174"},{"hannover","0637"},{"christstollen","478256"},{"Xanthippe","48621"},{"Zacharias","8478"},{"Holzbau","0581"},{"matsch","68"},{"matz","68"},{"Arbeitsamt","071862"},{"heithabu","021"},{"Müller-Lüdenscheidt","65752682"}}; @TO@ String[][] data={{"peter","127"},{"pharma","376"},{"bergisch-gladbach","174845214"},{"mönchengladbach","64645214"},{"deutsch","28"},{"deutz","28"},{"hamburg","06174"},{"hannover","0637"},{"christstollen","478256"},{"Xanthippe","48621"},{"Zacharias","8478"},{"Holzbau","0581"},{"matsch","68"},{"matz","68"},{"Arbeitsamt","071862"},{"Eberhard","0172"},{"Eberhardt","0172"},{"heithabu","021"},{"Müller-Lüdenscheidt","65752682"}}; @AT@ 4088 @LENGTH@ 742
---UPD VariableDeclarationFragment@@data={{"peter","127"},{"pharma","376"},{"bergisch-gladbach","174845214"},{"mönchengladbach","664645214"},{"deutsch","28"},{"deutz","28"},{"hamburg","06174"},{"hannover","0637"},{"christstollen","478256"},{"Xanthippe","48621"},{"Zacharias","8478"},{"Holzbau","0581"},{"matsch","68"},{"matz","68"},{"Arbeitsamt","071862"},{"heithabu","021"},{"Müller-Lüdenscheidt","65752682"}} @TO@ data={{"peter","127"},{"pharma","376"},{"bergisch-gladbach","174845214"},{"mönchengladbach","64645214"},{"deutsch","28"},{"deutz","28"},{"hamburg","06174"},{"hannover","0637"},{"christstollen","478256"},{"Xanthippe","48621"},{"Zacharias","8478"},{"Holzbau","0581"},{"matsch","68"},{"matz","68"},{"Arbeitsamt","071862"},{"Eberhard","0172"},{"Eberhardt","0172"},{"heithabu","021"},{"Müller-Lüdenscheidt","65752682"}} @AT@ 4099 @LENGTH@ 730
------UPD ArrayInitializer@@{{"peter","127"},{"pharma","376"},{"bergisch-gladbach","174845214"},{"mönchengladbach","664645214"},{"deutsch","28"},{"deutz","28"},{"hamburg","06174"},{"hannover","0637"},{"christstollen","478256"},{"Xanthippe","48621"},{"Zacharias","8478"},{"Holzbau","0581"},{"matsch","68"},{"matz","68"},{"Arbeitsamt","071862"},{"heithabu","021"},{"Müller-Lüdenscheidt","65752682"}} @TO@ {{"peter","127"},{"pharma","376"},{"bergisch-gladbach","174845214"},{"mönchengladbach","64645214"},{"deutsch","28"},{"deutz","28"},{"hamburg","06174"},{"hannover","0637"},{"christstollen","478256"},{"Xanthippe","48621"},{"Zacharias","8478"},{"Holzbau","0581"},{"matsch","68"},{"matz","68"},{"Arbeitsamt","071862"},{"Eberhard","0172"},{"Eberhardt","0172"},{"heithabu","021"},{"Müller-Lüdenscheidt","65752682"}} @AT@ 4106 @LENGTH@ 723
---------UPD ArrayInitializer@@{"mönchengladbach","664645214"} @TO@ {"mönchengladbach","64645214"} @AT@ 4229 @LENGTH@ 32
------------UPD StringLiteral@@"664645214" @TO@ "64645214" @AT@ 4249 @LENGTH@ 11
---------INS ArrayInitializer@@{"Eberhard","0172"} @TO@ ArrayInitializer@@{{"peter","127"},{"pharma","376"},{"bergisch-gladbach","174845214"},{"mönchengladbach","664645214"},{"deutsch","28"},{"deutz","28"},{"hamburg","06174"},{"hannover","0637"},{"christstollen","478256"},{"Xanthippe","48621"},{"Zacharias","8478"},{"Holzbau","0581"},{"matsch","68"},{"matz","68"},{"Arbeitsamt","071862"},{"heithabu","021"},{"Müller-Lüdenscheidt","65752682"}} @AT@ 4643 @LENGTH@ 20
------------INS StringLiteral@@"Eberhard" @TO@ ArrayInitializer@@{"Eberhard","0172"} @AT@ 4644 @LENGTH@ 10
------------INS StringLiteral@@"0172" @TO@ ArrayInitializer@@{"Eberhard","0172"} @AT@ 4656 @LENGTH@ 6
---------INS ArrayInitializer@@{"Eberhardt","0172"} @TO@ ArrayInitializer@@{{"peter","127"},{"pharma","376"},{"bergisch-gladbach","174845214"},{"mönchengladbach","664645214"},{"deutsch","28"},{"deutz","28"},{"hamburg","06174"},{"hannover","0637"},{"christstollen","478256"},{"Xanthippe","48621"},{"Zacharias","8478"},{"Holzbau","0581"},{"matsch","68"},{"matz","68"},{"Arbeitsamt","071862"},{"heithabu","021"},{"Müller-Lüdenscheidt","65752682"}} @AT@ 4677 @LENGTH@ 21
------------INS StringLiteral@@"Eberhardt" @TO@ ArrayInitializer@@{"Eberhardt","0172"} @AT@ 4678 @LENGTH@ 11
------------INS StringLiteral@@"0172" @TO@ ArrayInitializer@@{"Eberhardt","0172"} @AT@ 4691 @LENGTH@ 6


UPD ReturnStatement@@MethodInvocation:getAccessor(field.getFieldType(),getBooleanPrimitiveAccessorName(field),methodBody) @TO@ MethodInvocation:getAccessor(JavaType.BOOLEAN_PRIMITIVE,getBooleanPrimitiveAccessorName(field),methodBody) @AT@ 37618 @LENGTH@ 93
---UPD MethodInvocation@@getAccessor(field.getFieldType(),getBooleanPrimitiveAccessorName(field),methodBody) @TO@ getAccessor(JavaType.BOOLEAN_PRIMITIVE,getBooleanPrimitiveAccessorName(field),methodBody) @AT@ 37625 @LENGTH@ 85
------UPD SimpleName@@MethodName:getAccessor:[field.getFieldType(), getBooleanPrimitiveAccessorName(field), methodBody] @TO@ MethodName:getAccessor:[JavaType.BOOLEAN_PRIMITIVE, getBooleanPrimitiveAccessorName(field), methodBody] @AT@ 37625 @LENGTH@ 85
---------INS QualifiedName@@JavaType.BOOLEAN_PRIMITIVE @TO@ SimpleName@@MethodName:getAccessor:[field.getFieldType(), getBooleanPrimitiveAccessorName(field), methodBody] @AT@ 37637 @LENGTH@ 26
------------INS SimpleName@@JavaType @TO@ QualifiedName@@JavaType.BOOLEAN_PRIMITIVE @AT@ 37637 @LENGTH@ 8
------------INS SimpleName@@BOOLEAN_PRIMITIVE @TO@ QualifiedName@@JavaType.BOOLEAN_PRIMITIVE @AT@ 37646 @LENGTH@ 17
---------DEL MethodInvocation@@field.getFieldType() @AT@ 37637 @LENGTH@ 20
------------DEL SimpleName@@Name:field @AT@ 37637 @LENGTH@ 5
------------DEL SimpleName@@MethodName:getFieldType:[] @AT@ 37643 @LENGTH@ 14


UPD ExpressionStatement@@MethodInvocation:LOG.debug("Looking up query for method %s",queryMethod.getName()) @TO@ MethodInvocation:LOG.debug("Looking up query for method {}",queryMethod.getName()) @AT@ 3788 @LENGTH@ 67
---UPD MethodInvocation@@LOG.debug("Looking up query for method %s",queryMethod.getName()) @TO@ LOG.debug("Looking up query for method {}",queryMethod.getName()) @AT@ 3788 @LENGTH@ 66
------UPD SimpleName@@MethodName:debug:["Looking up query for method %s", queryMethod.getName()] @TO@ MethodName:debug:["Looking up query for method {}", queryMethod.getName()] @AT@ 3792 @LENGTH@ 62
---------UPD StringLiteral@@"Looking up query for method %s" @TO@ "Looking up query for method {}" @AT@ 3798 @LENGTH@ 32


INS IfStatement@@if (parameters.hasDefined(PROPERTIES)) {  subModel.get(PROPERTIES).set(parameters.get(PROPERTIES));} @TO@ MethodDeclaration@@static, void, MethodName:applyToModel, final ModelNode subModel, final ModelNode parameters,  @AT@ 6366 @LENGTH@ 119
---INS MethodInvocation@@parameters.hasDefined(PROPERTIES) @TO@ IfStatement@@if (parameters.hasDefined(PROPERTIES)) {  subModel.get(PROPERTIES).set(parameters.get(PROPERTIES));} @AT@ 6369 @LENGTH@ 33
------INS SimpleName@@Name:parameters @TO@ MethodInvocation@@parameters.hasDefined(PROPERTIES) @AT@ 6369 @LENGTH@ 10
------INS SimpleName@@MethodName:hasDefined:[PROPERTIES] @TO@ MethodInvocation@@parameters.hasDefined(PROPERTIES) @AT@ 6380 @LENGTH@ 22
---------INS SimpleName@@PROPERTIES @TO@ SimpleName@@MethodName:hasDefined:[PROPERTIES] @AT@ 6391 @LENGTH@ 10
---INS Block@@ThenBody:{  subModel.get(PROPERTIES).set(parameters.get(PROPERTIES));} @TO@ IfStatement@@if (parameters.hasDefined(PROPERTIES)) {  subModel.get(PROPERTIES).set(parameters.get(PROPERTIES));} @AT@ 6404 @LENGTH@ 81
------INS ExpressionStatement@@MethodInvocation:subModel.get(PROPERTIES).set(parameters.get(PROPERTIES)) @TO@ Block@@ThenBody:{  subModel.get(PROPERTIES).set(parameters.get(PROPERTIES));} @AT@ 6418 @LENGTH@ 57
---------INS MethodInvocation@@subModel.get(PROPERTIES).set(parameters.get(PROPERTIES)) @TO@ ExpressionStatement@@MethodInvocation:subModel.get(PROPERTIES).set(parameters.get(PROPERTIES)) @AT@ 6418 @LENGTH@ 56
------------INS MethodInvocation@@MethodName:get:[PROPERTIES] @TO@ MethodInvocation@@subModel.get(PROPERTIES).set(parameters.get(PROPERTIES)) @AT@ 6418 @LENGTH@ 24
---------------INS SimpleName@@PROPERTIES @TO@ MethodInvocation@@MethodName:get:[PROPERTIES] @AT@ 6431 @LENGTH@ 10
------------INS SimpleName@@Name:subModel @TO@ MethodInvocation@@subModel.get(PROPERTIES).set(parameters.get(PROPERTIES)) @AT@ 6418 @LENGTH@ 8
------------INS SimpleName@@MethodName:set:[parameters.get(PROPERTIES)] @TO@ MethodInvocation@@subModel.get(PROPERTIES).set(parameters.get(PROPERTIES)) @AT@ 6443 @LENGTH@ 31
---------------INS MethodInvocation@@parameters.get(PROPERTIES) @TO@ SimpleName@@MethodName:set:[parameters.get(PROPERTIES)] @AT@ 6447 @LENGTH@ 26
------------------INS SimpleName@@Name:parameters @TO@ MethodInvocation@@parameters.get(PROPERTIES) @AT@ 6447 @LENGTH@ 10
------------------INS SimpleName@@MethodName:get:[PROPERTIES] @TO@ MethodInvocation@@parameters.get(PROPERTIES) @AT@ 6458 @LENGTH@ 15
---------------------INS SimpleName@@PROPERTIES @TO@ SimpleName@@MethodName:get:[PROPERTIES] @AT@ 6462 @LENGTH@ 10


INS ExpressionStatement@@MethodInvocation:Mailbox.clearAll() @TO@ MethodDeclaration@@public, void, MethodName:testAdditionalMailProperties, Exception,  @AT@ 1351 @LENGTH@ 19
---INS MethodInvocation@@Mailbox.clearAll() @TO@ ExpressionStatement@@MethodInvocation:Mailbox.clearAll() @AT@ 1351 @LENGTH@ 18
------INS SimpleName@@Name:Mailbox @TO@ MethodInvocation@@Mailbox.clearAll() @AT@ 1351 @LENGTH@ 7
------INS SimpleName@@MethodName:clearAll:[] @TO@ MethodInvocation@@Mailbox.clearAll() @AT@ 1359 @LENGTH@ 10


UPD FieldDeclaration@@private, final, transient, Log, [LOG=LogFactory.getLog(JaxbDataFormat.class)] @TO@ private, static, final, transient, Log, [LOG=LogFactory.getLog(JaxbDataFormat.class)] @AT@ 2166 @LENGTH@ 74
---INS Modifier@@static @TO@ FieldDeclaration@@private, final, transient, Log, [LOG=LogFactory.getLog(JaxbDataFormat.class)] @AT@ 2174 @LENGTH@ 6


DEL MethodDeclaration@@public, void, MethodName:tearDown, Exception,  @AT@ 1409 @LENGTH@ 100
---DEL Modifier@@public @AT@ 1409 @LENGTH@ 6
---DEL PrimitiveType@@void @AT@ 1416 @LENGTH@ 4
---DEL SimpleName@@MethodName:tearDown @AT@ 1421 @LENGTH@ 8
---DEL SimpleType@@Exception @AT@ 1439 @LENGTH@ 9
---DEL ExpressionStatement@@SuperMethodInvocation:super.tearDown() @AT@ 1459 @LENGTH@ 17
------DEL SuperMethodInvocation@@super.tearDown() @AT@ 1459 @LENGTH@ 16
---------DEL SimpleName@@MethodName:tearDown:[] @AT@ 1465 @LENGTH@ 8
---DEL ExpressionStatement@@MethodInvocation:this.map.clear() @AT@ 1486 @LENGTH@ 17
------DEL MethodInvocation@@this.map.clear() @AT@ 1486 @LENGTH@ 16
---------DEL FieldAccess@@this.map @AT@ 1486 @LENGTH@ 8
------------DEL ThisExpression@@this @AT@ 1486 @LENGTH@ 4
------------DEL SimpleName@@map @AT@ 1491 @LENGTH@ 3
---------DEL SimpleName@@MethodName:clear:[] @AT@ 1495 @LENGTH@ 7


INS MethodDeclaration@@public, void, MethodName:setMessage, String message,  @TO@ TypeDeclaration@@[@XmlRootElement(name="rollback"), @XmlAccessorType(XmlAccessType.FIELD), public]RollbackDefinition, NoOutputDefinition<RollbackDefinition> @AT@ 2596 @LENGTH@ 78
---INS Modifier@@public @TO@ MethodDeclaration@@public, void, MethodName:setMessage, String message,  @AT@ 2596 @LENGTH@ 6
---INS PrimitiveType@@void @TO@ MethodDeclaration@@public, void, MethodName:setMessage, String message,  @AT@ 2603 @LENGTH@ 4
---INS SimpleName@@MethodName:setMessage @TO@ MethodDeclaration@@public, void, MethodName:setMessage, String message,  @AT@ 2608 @LENGTH@ 10
---INS SingleVariableDeclaration@@String message @TO@ MethodDeclaration@@public, void, MethodName:setMessage, String message,  @AT@ 2619 @LENGTH@ 14
------INS SimpleType@@String @TO@ SingleVariableDeclaration@@String message @AT@ 2619 @LENGTH@ 6
------INS SimpleName@@message @TO@ SingleVariableDeclaration@@String message @AT@ 2626 @LENGTH@ 7
---INS ExpressionStatement@@Assignment:this.message=message @TO@ MethodDeclaration@@public, void, MethodName:setMessage, String message,  @AT@ 2645 @LENGTH@ 23
------INS Assignment@@this.message=message @TO@ ExpressionStatement@@Assignment:this.message=message @AT@ 2645 @LENGTH@ 22
---------INS FieldAccess@@this.message @TO@ Assignment@@this.message=message @AT@ 2645 @LENGTH@ 12
------------INS ThisExpression@@this @TO@ FieldAccess@@this.message @AT@ 2645 @LENGTH@ 4
------------INS SimpleName@@message @TO@ FieldAccess@@this.message @AT@ 2650 @LENGTH@ 7
---------INS Operator@@= @TO@ Assignment@@this.message=message @AT@ 2657 @LENGTH@ 1
---------INS SimpleName@@message @TO@ Assignment@@this.message=message @AT@ 2660 @LENGTH@ 7


INS ExpressionStatement@@MethodInvocation:subModel.get(HANDLER_TYPE).set(handlerType) @TO@ MethodDeclaration@@public, Cancellable, MethodName:execute, final NewOperationContext context, final ModelNode operation, final ResultHandler resultHandler,  @AT@ 5124 @LENGTH@ 44
---INS MethodInvocation@@subModel.get(HANDLER_TYPE).set(handlerType) @TO@ ExpressionStatement@@MethodInvocation:subModel.get(HANDLER_TYPE).set(handlerType) @AT@ 5124 @LENGTH@ 43
------INS MethodInvocation@@MethodName:get:[HANDLER_TYPE] @TO@ MethodInvocation@@subModel.get(HANDLER_TYPE).set(handlerType) @AT@ 5124 @LENGTH@ 26
---------INS SimpleName@@HANDLER_TYPE @TO@ MethodInvocation@@MethodName:get:[HANDLER_TYPE] @AT@ 5137 @LENGTH@ 12
------INS SimpleName@@Name:subModel @TO@ MethodInvocation@@subModel.get(HANDLER_TYPE).set(handlerType) @AT@ 5124 @LENGTH@ 8
------INS SimpleName@@MethodName:set:[handlerType] @TO@ MethodInvocation@@subModel.get(HANDLER_TYPE).set(handlerType) @AT@ 5151 @LENGTH@ 16
---------INS SimpleName@@handlerType @TO@ SimpleName@@MethodName:set:[handlerType] @AT@ 5155 @LENGTH@ 11


UPD EnhancedForStatement@@for (Property prop : namespaces.asPropertyList()) {  final ModelNode ns=new ModelNode();  ns.get(prop.getName()).set(prop.getValue());  map.put(prop.getName(),NamespaceAddHandler.getAddNamespaceOperation(EMPTY,ns));} @TO@ for (Property prop : namespaces.asPropertyList()) {  map.put(prop.getName(),NamespaceAddHandler.getAddNamespaceOperation(EMPTY,prop));} @AT@ 10354 @LENGTH@ 278
---DEL VariableDeclarationStatement@@final ModelNode ns=new ModelNode(); @AT@ 10422 @LENGTH@ 37
------DEL Modifier@@final @AT@ 10422 @LENGTH@ 5
------DEL SimpleType@@ModelNode @AT@ 10428 @LENGTH@ 9
------DEL VariableDeclarationFragment@@ns=new ModelNode() @AT@ 10438 @LENGTH@ 20
---------DEL SimpleName@@ns @AT@ 10438 @LENGTH@ 2
---------DEL ClassInstanceCreation@@ModelNode[] @AT@ 10443 @LENGTH@ 15
------------DEL New@@new @AT@ 10443 @LENGTH@ 3
------------DEL SimpleType@@ModelNode @AT@ 10447 @LENGTH@ 9
---DEL ExpressionStatement@@MethodInvocation:ns.get(prop.getName()).set(prop.getValue()) @AT@ 10476 @LENGTH@ 44
------DEL MethodInvocation@@ns.get(prop.getName()).set(prop.getValue()) @AT@ 10476 @LENGTH@ 43
---------DEL MethodInvocation@@MethodName:get:[prop.getName()] @AT@ 10476 @LENGTH@ 22
------------DEL MethodInvocation@@prop.getName() @AT@ 10483 @LENGTH@ 14
---------------DEL SimpleName@@Name:prop @AT@ 10483 @LENGTH@ 4
---------------DEL SimpleName@@MethodName:getName:[] @AT@ 10488 @LENGTH@ 9
---------DEL SimpleName@@Name:ns @AT@ 10476 @LENGTH@ 2
---------DEL SimpleName@@MethodName:set:[prop.getValue()] @AT@ 10499 @LENGTH@ 20
------------DEL MethodInvocation@@prop.getValue() @AT@ 10503 @LENGTH@ 15
---------------DEL SimpleName@@Name:prop @AT@ 10503 @LENGTH@ 4
---------------DEL SimpleName@@MethodName:getValue:[] @AT@ 10508 @LENGTH@ 10
---UPD ExpressionStatement@@MethodInvocation:map.put(prop.getName(),NamespaceAddHandler.getAddNamespaceOperation(EMPTY,ns)) @TO@ MethodInvocation:map.put(prop.getName(),NamespaceAddHandler.getAddNamespaceOperation(EMPTY,prop)) @AT@ 10537 @LENGTH@ 81
------UPD MethodInvocation@@map.put(prop.getName(),NamespaceAddHandler.getAddNamespaceOperation(EMPTY,ns)) @TO@ map.put(prop.getName(),NamespaceAddHandler.getAddNamespaceOperation(EMPTY,prop)) @AT@ 10537 @LENGTH@ 80
---------UPD SimpleName@@MethodName:put:[prop.getName(), NamespaceAddHandler.getAddNamespaceOperation(EMPTY,ns)] @TO@ MethodName:put:[prop.getName(), NamespaceAddHandler.getAddNamespaceOperation(EMPTY,prop)] @AT@ 10541 @LENGTH@ 76
------------UPD MethodInvocation@@NamespaceAddHandler.getAddNamespaceOperation(EMPTY,ns) @TO@ NamespaceAddHandler.getAddNamespaceOperation(EMPTY,prop) @AT@ 10561 @LENGTH@ 55
---------------UPD SimpleName@@MethodName:getAddNamespaceOperation:[EMPTY, ns] @TO@ MethodName:getAddNamespaceOperation:[EMPTY, prop] @AT@ 10581 @LENGTH@ 35
------------------UPD SimpleName@@ns @TO@ prop @AT@ 10613 @LENGTH@ 2


UPD MethodDeclaration@@private, int, MethodName:handleAEIOUY, String value, DoubleMetaphoneResult result, int index,  @TO@ private, int, MethodName:handleAEIOUY, DoubleMetaphoneResult result, int index,  @AT@ 9333 @LENGTH@ 211
---DEL SingleVariableDeclaration@@String value @AT@ 9358 @LENGTH@ 12
------DEL SimpleType@@String @AT@ 9358 @LENGTH@ 6
------DEL SimpleName@@value @AT@ 9365 @LENGTH@ 5


UPD Block@@ElseBody:if (operation.hasDefined(HASH)) {  hash=operation.get(HASH).asBytes();} else {  throw new OperationFailedException(new ModelNode().set("Neither an attachment or a hash were passed in"));} @TO@ ElseBody:if (operation.hasDefined(HASH)) {  hash=operation.get(HASH).asBytes();} else {  throw new OperationFailedException(new ModelNode().set("Neither an attachment nor a hash were passed in"));} @AT@ 5280 @LENGTH@ 228
---UPD IfStatement@@if (operation.hasDefined(HASH)) {  hash=operation.get(HASH).asBytes();} else {  throw new OperationFailedException(new ModelNode().set("Neither an attachment or a hash were passed in"));} @TO@ if (operation.hasDefined(HASH)) {  hash=operation.get(HASH).asBytes();} else {  throw new OperationFailedException(new ModelNode().set("Neither an attachment nor a hash were passed in"));} @AT@ 5280 @LENGTH@ 228
------UPD Block@@ElseBody:{  throw new OperationFailedException(new ModelNode().set("Neither an attachment or a hash were passed in"));} @TO@ ElseBody:{  throw new OperationFailedException(new ModelNode().set("Neither an attachment nor a hash were passed in"));} @AT@ 5378 @LENGTH@ 130
---------UPD ThrowStatement@@ClassInstanceCreation:new OperationFailedException(new ModelNode().set("Neither an attachment or a hash were passed in")) @TO@ ClassInstanceCreation:new OperationFailedException(new ModelNode().set("Neither an attachment nor a hash were passed in")) @AT@ 5392 @LENGTH@ 106
------------UPD ClassInstanceCreation@@OperationFailedException[new ModelNode().set("Neither an attachment or a hash were passed in")] @TO@ OperationFailedException[new ModelNode().set("Neither an attachment nor a hash were passed in")] @AT@ 5398 @LENGTH@ 99
---------------UPD MethodInvocation@@new ModelNode().set("Neither an attachment or a hash were passed in") @TO@ new ModelNode().set("Neither an attachment nor a hash were passed in") @AT@ 5427 @LENGTH@ 69
------------------UPD SimpleName@@MethodName:set:["Neither an attachment or a hash were passed in"] @TO@ MethodName:set:["Neither an attachment nor a hash were passed in"] @AT@ 5443 @LENGTH@ 53
---------------------UPD StringLiteral@@"Neither an attachment or a hash were passed in" @TO@ "Neither an attachment nor a hash were passed in" @AT@ 5447 @LENGTH@ 48
---UPD IfStatement@@if (operation.hasDefined(HASH)) {  hash=operation.get(HASH).asBytes();} else {  throw new OperationFailedException(new ModelNode().set("Neither an attachment or a hash were passed in"));} @TO@ if (operation.hasDefined(HASH)) {  hash=operation.get(HASH).asBytes();} else {  throw new OperationFailedException(new ModelNode().set("Neither an attachment nor a hash were passed in"));} @AT@ 5280 @LENGTH@ 228
------UPD Block@@ElseBody:{  throw new OperationFailedException(new ModelNode().set("Neither an attachment or a hash were passed in"));} @TO@ ElseBody:{  throw new OperationFailedException(new ModelNode().set("Neither an attachment nor a hash were passed in"));} @AT@ 5378 @LENGTH@ 130
---------UPD ThrowStatement@@ClassInstanceCreation:new OperationFailedException(new ModelNode().set("Neither an attachment or a hash were passed in")) @TO@ ClassInstanceCreation:new OperationFailedException(new ModelNode().set("Neither an attachment nor a hash were passed in")) @AT@ 5392 @LENGTH@ 106
------------UPD ClassInstanceCreation@@OperationFailedException[new ModelNode().set("Neither an attachment or a hash were passed in")] @TO@ OperationFailedException[new ModelNode().set("Neither an attachment nor a hash were passed in")] @AT@ 5398 @LENGTH@ 99
---------------UPD MethodInvocation@@new ModelNode().set("Neither an attachment or a hash were passed in") @TO@ new ModelNode().set("Neither an attachment nor a hash were passed in") @AT@ 5427 @LENGTH@ 69
------------------UPD SimpleName@@MethodName:set:["Neither an attachment or a hash were passed in"] @TO@ MethodName:set:["Neither an attachment nor a hash were passed in"] @AT@ 5443 @LENGTH@ 53
---------------------UPD StringLiteral@@"Neither an attachment or a hash were passed in" @TO@ "Neither an attachment nor a hash were passed in" @AT@ 5447 @LENGTH@ 48


DEL SuperConstructorInvocation@@super();
 @AT@ 2356 @LENGTH@ 8


UPD FieldDeclaration@@String, [CONTAINER_CONFIG="config"] @TO@ String, [CONTAINER_CONFIG="configuration"] @AT@ 1523 @LENGTH@ 35
---UPD VariableDeclarationFragment@@CONTAINER_CONFIG="config" @TO@ CONTAINER_CONFIG="configuration" @AT@ 1530 @LENGTH@ 27
------UPD StringLiteral@@"config" @TO@ "configuration" @AT@ 1549 @LENGTH@ 8


UPD ExpressionStatement@@MethodInvocation:assertTrue(authHeader.startsWith("OAuth")) @TO@ MethodInvocation:assertTrue(authHeader.startsWith("OAuth2")) @AT@ 6225 @LENGTH@ 43
---UPD MethodInvocation@@assertTrue(authHeader.startsWith("OAuth")) @TO@ assertTrue(authHeader.startsWith("OAuth2")) @AT@ 6225 @LENGTH@ 42
------UPD SimpleName@@MethodName:assertTrue:[authHeader.startsWith("OAuth")] @TO@ MethodName:assertTrue:[authHeader.startsWith("OAuth2")] @AT@ 6225 @LENGTH@ 42
---------UPD MethodInvocation@@authHeader.startsWith("OAuth") @TO@ authHeader.startsWith("OAuth2") @AT@ 6236 @LENGTH@ 30
------------UPD SimpleName@@MethodName:startsWith:["OAuth"] @TO@ MethodName:startsWith:["OAuth2"] @AT@ 6247 @LENGTH@ 19
---------------UPD StringLiteral@@"OAuth" @TO@ "OAuth2" @AT@ 6258 @LENGTH@ 7


UPD MethodDeclaration@@public, boolean, MethodName:canAppearNext, CommandContext ctx,  @TO@ public, boolean, MethodName:canAppearNext, CommandContext ctx, CommandFormatException,  @AT@ 3407 @LENGTH@ 254
---INS SimpleType@@CommandFormatException @TO@ MethodDeclaration@@public, boolean, MethodName:canAppearNext, CommandContext ctx,  @AT@ 3493 @LENGTH@ 22


UPD MethodDeclaration@@public, static, void, MethodName:addService, BatchBuilder batchBuilder,  @TO@ public, static, void, MethodName:addService, ServiceTarget target,  @AT@ 1827 @LENGTH@ 196
---UPD SingleVariableDeclaration@@BatchBuilder batchBuilder @TO@ ServiceTarget target @AT@ 1857 @LENGTH@ 25
------UPD SimpleType@@BatchBuilder @TO@ ServiceTarget @AT@ 1857 @LENGTH@ 12
------UPD SimpleName@@batchBuilder @TO@ target @AT@ 1870 @LENGTH@ 12
---UPD ExpressionStatement@@MethodInvocation:batchBuilder.addService(SERVICE_NAME,service).install() @TO@ MethodInvocation:target.addService(SERVICE_NAME,service).install() @AT@ 1960 @LENGTH@ 57
------UPD MethodInvocation@@batchBuilder.addService(SERVICE_NAME,service).install() @TO@ target.addService(SERVICE_NAME,service).install() @AT@ 1960 @LENGTH@ 56
---------UPD SimpleName@@Name:batchBuilder @TO@ Name:target @AT@ 1960 @LENGTH@ 12


INS FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @TO@ TypeDeclaration@@[public]PreAuthenticatedAuthenticationToken, AbstractAuthenticationToken @AT@ 561 @LENGTH@ 90
---INS Modifier@@private @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @AT@ 561 @LENGTH@ 7
---INS Modifier@@static @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @AT@ 569 @LENGTH@ 6
---INS Modifier@@final @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @AT@ 576 @LENGTH@ 5
---INS PrimitiveType@@long @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @AT@ 582 @LENGTH@ 4
---INS VariableDeclarationFragment@@serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @AT@ 587 @LENGTH@ 63
------INS SimpleName@@serialVersionUID @TO@ VariableDeclarationFragment@@serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID @AT@ 587 @LENGTH@ 16
------INS QualifiedName@@SpringSecurityCoreVersion.SERIAL_VERSION_UID @TO@ VariableDeclarationFragment@@serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID @AT@ 606 @LENGTH@ 44
---------INS SimpleName@@SpringSecurityCoreVersion @TO@ QualifiedName@@SpringSecurityCoreVersion.SERIAL_VERSION_UID @AT@ 606 @LENGTH@ 25
---------INS SimpleName@@SERIAL_VERSION_UID @TO@ QualifiedName@@SpringSecurityCoreVersion.SERIAL_VERSION_UID @AT@ 632 @LENGTH@ 18


UPD ExpressionStatement@@Assignment:update=Util.getWriteAttributeOperation(address,"socket-binding-port-offset",offset) @TO@ Assignment:update=Util.getWriteAttributeOperation(address,SOCKET_BINDING_PORT_OFFSET,offset) @AT@ 51678 @LENGTH@ 88
---UPD Assignment@@update=Util.getWriteAttributeOperation(address,"socket-binding-port-offset",offset) @TO@ update=Util.getWriteAttributeOperation(address,SOCKET_BINDING_PORT_OFFSET,offset) @AT@ 51678 @LENGTH@ 87
------UPD MethodInvocation@@Util.getWriteAttributeOperation(address,"socket-binding-port-offset",offset) @TO@ Util.getWriteAttributeOperation(address,SOCKET_BINDING_PORT_OFFSET,offset) @AT@ 51687 @LENGTH@ 78
---------UPD SimpleName@@MethodName:getWriteAttributeOperation:[address, "socket-binding-port-offset", offset] @TO@ MethodName:getWriteAttributeOperation:[address, SOCKET_BINDING_PORT_OFFSET, offset] @AT@ 51692 @LENGTH@ 73
------------DEL StringLiteral@@"socket-binding-port-offset" @AT@ 51728 @LENGTH@ 28
------------INS SimpleName@@SOCKET_BINDING_PORT_OFFSET @TO@ SimpleName@@MethodName:getWriteAttributeOperation:[address, "socket-binding-port-offset", offset] @AT@ 51931 @LENGTH@ 26


UPD FieldDeclaration@@private, final, Set<ServiceName>, [failedDependencies=new HashSet<ServiceName>()] @TO@ private, final, Set<ServiceName>, [failedDependencies=Collections.synchronizedSet(new HashSet<ServiceName>())] @AT@ 5657 @LENGTH@ 79
---UPD VariableDeclarationFragment@@failedDependencies=new HashSet<ServiceName>() @TO@ failedDependencies=Collections.synchronizedSet(new HashSet<ServiceName>()) @AT@ 5688 @LENGTH@ 47
------INS MethodInvocation@@Collections.synchronizedSet(new HashSet<ServiceName>()) @TO@ VariableDeclarationFragment@@failedDependencies=new HashSet<ServiceName>() @AT@ 5786 @LENGTH@ 55
---------INS SimpleName@@Name:Collections @TO@ MethodInvocation@@Collections.synchronizedSet(new HashSet<ServiceName>()) @AT@ 5786 @LENGTH@ 11
---------INS SimpleName@@MethodName:synchronizedSet:[new HashSet<ServiceName>()] @TO@ MethodInvocation@@Collections.synchronizedSet(new HashSet<ServiceName>()) @AT@ 5798 @LENGTH@ 43
------------MOV ClassInstanceCreation@@HashSet<ServiceName>[] @TO@ SimpleName@@MethodName:synchronizedSet:[new HashSet<ServiceName>()] @AT@ 5709 @LENGTH@ 26


DEL VariableDeclarationStatement@@DatagramSocket ds=new DatagramSocket(); @AT@ 2279 @LENGTH@ 41
---DEL SimpleType@@DatagramSocket @AT@ 2279 @LENGTH@ 14
---DEL VariableDeclarationFragment@@ds=new DatagramSocket() @AT@ 2294 @LENGTH@ 25
------DEL SimpleName@@ds @AT@ 2294 @LENGTH@ 2
------DEL ClassInstanceCreation@@DatagramSocket[] @AT@ 2299 @LENGTH@ 20
---------DEL New@@new @AT@ 2299 @LENGTH@ 3
---------DEL SimpleType@@DatagramSocket @AT@ 2303 @LENGTH@ 14


DEL VariableDeclarationStatement@@DatagramSocket ds=new DatagramSocket(); @AT@ 2079 @LENGTH@ 41
---DEL SimpleType@@DatagramSocket @AT@ 2079 @LENGTH@ 14
---DEL VariableDeclarationFragment@@ds=new DatagramSocket() @AT@ 2094 @LENGTH@ 25
------DEL SimpleName@@ds @AT@ 2094 @LENGTH@ 2
------DEL ClassInstanceCreation@@DatagramSocket[] @AT@ 2099 @LENGTH@ 20
---------DEL New@@new @AT@ 2099 @LENGTH@ 3
---------DEL SimpleType@@DatagramSocket @AT@ 2103 @LENGTH@ 14


UPD FieldDeclaration@@private, final, Map<ServiceName,StartException>, [startExceptions=new IdentityHashMap<ServiceName,StartException>()] @TO@ private, final, Map<ServiceName,StartException>, [startExceptions=Collections.synchronizedMap(new HashMap<ServiceName,StartException>())] @AT@ 5532 @LENGTH@ 116
---UPD VariableDeclarationFragment@@startExceptions=new IdentityHashMap<ServiceName,StartException>() @TO@ startExceptions=Collections.synchronizedMap(new HashMap<ServiceName,StartException>()) @AT@ 5579 @LENGTH@ 68
------DEL ClassInstanceCreation@@IdentityHashMap<ServiceName,StartException>[] @AT@ 5597 @LENGTH@ 50
------INS MethodInvocation@@Collections.synchronizedMap(new HashMap<ServiceName,StartException>()) @TO@ VariableDeclarationFragment@@startExceptions=new IdentityHashMap<ServiceName,StartException>() @AT@ 5653 @LENGTH@ 71
---------INS SimpleName@@Name:Collections @TO@ MethodInvocation@@Collections.synchronizedMap(new HashMap<ServiceName,StartException>()) @AT@ 5653 @LENGTH@ 11
---------INS SimpleName@@MethodName:synchronizedMap:[new HashMap<ServiceName,StartException>()] @TO@ MethodInvocation@@Collections.synchronizedMap(new HashMap<ServiceName,StartException>()) @AT@ 5665 @LENGTH@ 59
------------INS ClassInstanceCreation@@HashMap<ServiceName,StartException>[] @TO@ SimpleName@@MethodName:synchronizedMap:[new HashMap<ServiceName,StartException>()] @AT@ 5681 @LENGTH@ 42
---------------MOV New@@new @TO@ ClassInstanceCreation@@HashMap<ServiceName,StartException>[] @AT@ 5597 @LENGTH@ 3
---------------MOV ParameterizedType@@IdentityHashMap<ServiceName,StartException> @TO@ ClassInstanceCreation@@HashMap<ServiceName,StartException>[] @AT@ 5601 @LENGTH@ 44
------------------UPD SimpleType@@IdentityHashMap @TO@ HashMap @AT@ 5601 @LENGTH@ 15


UPD IfStatement@@if (SerializerUtils.isEmpty(bytes)) {  return null;} @TO@ if (SerializationUtils.isEmpty(bytes)) {  return null;} @AT@ 2225 @LENGTH@ 57
---UPD MethodInvocation@@SerializerUtils.isEmpty(bytes) @TO@ SerializationUtils.isEmpty(bytes) @AT@ 2229 @LENGTH@ 30
------UPD SimpleName@@Name:SerializerUtils @TO@ Name:SerializationUtils @AT@ 2229 @LENGTH@ 15


UPD IfStatement@@if (annotationBindingDescriptions.containsKey(bindingName)) {  throw new RuntimeException("Duplicate binding of JNDI name " + bindingName);} else {  annotationBindingDescriptions.put(bindingName,binding);} @TO@ if (annotationBindingDescriptions.containsKey(bindingName)) {  if (binding.getInjectionTargetDescriptions().size() == 1) {    final BindingDescription existingBinding=annotationBindingDescriptions.get(bindingName);    if (existingBinding.getInjectionTargetDescriptions().size() == 1) {      InjectionTargetDescription existingTarget=existingBinding.getInjectionTargetDescriptions().get(0);      InjectionTargetDescription newTarget=binding.getInjectionTargetDescriptions().get(0);      if (newTarget.getClassName().equals(existingTarget.getClassName()) && newTarget.getType().equals(existingTarget.getType()) && newTarget.getName().equals(existingTarget.getName())) {        return;      }    }  }  throw new RuntimeException("Duplicate binding of JNDI name " + bindingName);} else {  annotationBindingDescriptions.put(bindingName,binding);} @AT@ 2963 @LENGTH@ 250
---INS Block@@ThenBody:{  if (binding.getInjectionTargetDescriptions().size() == 1) {    final BindingDescription existingBinding=annotationBindingDescriptions.get(bindingName);    if (existingBinding.getInjectionTargetDescriptions().size() == 1) {      InjectionTargetDescription existingTarget=existingBinding.getInjectionTargetDescriptions().get(0);      InjectionTargetDescription newTarget=binding.getInjectionTargetDescriptions().get(0);      if (newTarget.getClassName().equals(existingTarget.getClassName()) && newTarget.getType().equals(existingTarget.getType()) && newTarget.getName().equals(existingTarget.getName())) {        return;      }    }  }  throw new RuntimeException("Duplicate binding of JNDI name " + bindingName);} @TO@ IfStatement@@if (annotationBindingDescriptions.containsKey(bindingName)) {  throw new RuntimeException("Duplicate binding of JNDI name " + bindingName);} else {  annotationBindingDescriptions.put(bindingName,binding);} @AT@ 3023 @LENGTH@ 1237
------MOV ThrowStatement@@ClassInstanceCreation:new RuntimeException("Duplicate binding of JNDI name " + bindingName) @TO@ Block@@ThenBody:{  if (binding.getInjectionTargetDescriptions().size() == 1) {    final BindingDescription existingBinding=annotationBindingDescriptions.get(bindingName);    if (existingBinding.getInjectionTargetDescriptions().size() == 1) {      InjectionTargetDescription existingTarget=existingBinding.getInjectionTargetDescriptions().get(0);      InjectionTargetDescription newTarget=binding.getInjectionTargetDescriptions().get(0);      if (newTarget.getClassName().equals(existingTarget.getClassName()) && newTarget.getType().equals(existingTarget.getType()) && newTarget.getName().equals(existingTarget.getName())) {        return;      }    }  }  throw new RuntimeException("Duplicate binding of JNDI name " + bindingName);} @AT@ 3041 @LENGTH@ 76
------INS IfStatement@@if (binding.getInjectionTargetDescriptions().size() == 1) {  final BindingDescription existingBinding=annotationBindingDescriptions.get(bindingName);  if (existingBinding.getInjectionTargetDescriptions().size() == 1) {    InjectionTargetDescription existingTarget=existingBinding.getInjectionTargetDescriptions().get(0);    InjectionTargetDescription newTarget=binding.getInjectionTargetDescriptions().get(0);    if (newTarget.getClassName().equals(existingTarget.getClassName()) && newTarget.getType().equals(existingTarget.getType()) && newTarget.getName().equals(existingTarget.getName())) {      return;    }  }} @TO@ Block@@ThenBody:{  if (binding.getInjectionTargetDescriptions().size() == 1) {    final BindingDescription existingBinding=annotationBindingDescriptions.get(bindingName);    if (existingBinding.getInjectionTargetDescriptions().size() == 1) {      InjectionTargetDescription existingTarget=existingBinding.getInjectionTargetDescriptions().get(0);      InjectionTargetDescription newTarget=binding.getInjectionTargetDescriptions().get(0);      if (newTarget.getClassName().equals(existingTarget.getClassName()) && newTarget.getType().equals(existingTarget.getType()) && newTarget.getName().equals(existingTarget.getName())) {        return;      }    }  }  throw new RuntimeException("Duplicate binding of JNDI name " + bindingName);} @AT@ 3341 @LENGTH@ 820
---------INS InfixExpression@@binding.getInjectionTargetDescriptions().size() == 1 @TO@ IfStatement@@if (binding.getInjectionTargetDescriptions().size() == 1) {  final BindingDescription existingBinding=annotationBindingDescriptions.get(bindingName);  if (existingBinding.getInjectionTargetDescriptions().size() == 1) {    InjectionTargetDescription existingTarget=existingBinding.getInjectionTargetDescriptions().get(0);    InjectionTargetDescription newTarget=binding.getInjectionTargetDescriptions().get(0);    if (newTarget.getClassName().equals(existingTarget.getClassName()) && newTarget.getType().equals(existingTarget.getType()) && newTarget.getName().equals(existingTarget.getName())) {      return;    }  }} @AT@ 3344 @LENGTH@ 52
------------INS MethodInvocation@@binding.getInjectionTargetDescriptions().size() @TO@ InfixExpression@@binding.getInjectionTargetDescriptions().size() == 1 @AT@ 3344 @LENGTH@ 47
---------------INS MethodInvocation@@MethodName:getInjectionTargetDescriptions:[] @TO@ MethodInvocation@@binding.getInjectionTargetDescriptions().size() @AT@ 3344 @LENGTH@ 40
---------------INS SimpleName@@Name:binding @TO@ MethodInvocation@@binding.getInjectionTargetDescriptions().size() @AT@ 3344 @LENGTH@ 7
---------------INS SimpleName@@MethodName:size:[] @TO@ MethodInvocation@@binding.getInjectionTargetDescriptions().size() @AT@ 3385 @LENGTH@ 6
------------INS Operator@@== @TO@ InfixExpression@@binding.getInjectionTargetDescriptions().size() == 1 @AT@ 3391 @LENGTH@ 2
------------INS NumberLiteral@@1 @TO@ InfixExpression@@binding.getInjectionTargetDescriptions().size() == 1 @AT@ 3395 @LENGTH@ 1
---------INS Block@@ThenBody:{  final BindingDescription existingBinding=annotationBindingDescriptions.get(bindingName);  if (existingBinding.getInjectionTargetDescriptions().size() == 1) {    InjectionTargetDescription existingTarget=existingBinding.getInjectionTargetDescriptions().get(0);    InjectionTargetDescription newTarget=binding.getInjectionTargetDescriptions().get(0);    if (newTarget.getClassName().equals(existingTarget.getClassName()) && newTarget.getType().equals(existingTarget.getType()) && newTarget.getName().equals(existingTarget.getName())) {      return;    }  }} @TO@ IfStatement@@if (binding.getInjectionTargetDescriptions().size() == 1) {  final BindingDescription existingBinding=annotationBindingDescriptions.get(bindingName);  if (existingBinding.getInjectionTargetDescriptions().size() == 1) {    InjectionTargetDescription existingTarget=existingBinding.getInjectionTargetDescriptions().get(0);    InjectionTargetDescription newTarget=binding.getInjectionTargetDescriptions().get(0);    if (newTarget.getClassName().equals(existingTarget.getClassName()) && newTarget.getType().equals(existingTarget.getType()) && newTarget.getName().equals(existingTarget.getName())) {      return;    }  }} @AT@ 3398 @LENGTH@ 763
------------INS VariableDeclarationStatement@@final BindingDescription existingBinding=annotationBindingDescriptions.get(bindingName); @TO@ Block@@ThenBody:{  final BindingDescription existingBinding=annotationBindingDescriptions.get(bindingName);  if (existingBinding.getInjectionTargetDescriptions().size() == 1) {    InjectionTargetDescription existingTarget=existingBinding.getInjectionTargetDescriptions().get(0);    InjectionTargetDescription newTarget=binding.getInjectionTargetDescriptions().get(0);    if (newTarget.getClassName().equals(existingTarget.getClassName()) && newTarget.getType().equals(existingTarget.getType()) && newTarget.getName().equals(existingTarget.getName())) {      return;    }  }} @AT@ 3416 @LENGTH@ 90
---------------INS Modifier@@final @TO@ VariableDeclarationStatement@@final BindingDescription existingBinding=annotationBindingDescriptions.get(bindingName); @AT@ 3416 @LENGTH@ 5
---------------INS SimpleType@@BindingDescription @TO@ VariableDeclarationStatement@@final BindingDescription existingBinding=annotationBindingDescriptions.get(bindingName); @AT@ 3422 @LENGTH@ 18
---------------INS VariableDeclarationFragment@@existingBinding=annotationBindingDescriptions.get(bindingName) @TO@ VariableDeclarationStatement@@final BindingDescription existingBinding=annotationBindingDescriptions.get(bindingName); @AT@ 3441 @LENGTH@ 64
------------------INS SimpleName@@existingBinding @TO@ VariableDeclarationFragment@@existingBinding=annotationBindingDescriptions.get(bindingName) @AT@ 3441 @LENGTH@ 15
------------------INS MethodInvocation@@annotationBindingDescriptions.get(bindingName) @TO@ VariableDeclarationFragment@@existingBinding=annotationBindingDescriptions.get(bindingName) @AT@ 3459 @LENGTH@ 46
---------------------INS SimpleName@@Name:annotationBindingDescriptions @TO@ MethodInvocation@@annotationBindingDescriptions.get(bindingName) @AT@ 3459 @LENGTH@ 29
---------------------INS SimpleName@@MethodName:get:[bindingName] @TO@ MethodInvocation@@annotationBindingDescriptions.get(bindingName) @AT@ 3489 @LENGTH@ 16
------------------------INS SimpleName@@bindingName @TO@ SimpleName@@MethodName:get:[bindingName] @AT@ 3493 @LENGTH@ 11
------------INS IfStatement@@if (existingBinding.getInjectionTargetDescriptions().size() == 1) {  InjectionTargetDescription existingTarget=existingBinding.getInjectionTargetDescriptions().get(0);  InjectionTargetDescription newTarget=binding.getInjectionTargetDescriptions().get(0);  if (newTarget.getClassName().equals(existingTarget.getClassName()) && newTarget.getType().equals(existingTarget.getType()) && newTarget.getName().equals(existingTarget.getName())) {    return;  }} @TO@ Block@@ThenBody:{  final BindingDescription existingBinding=annotationBindingDescriptions.get(bindingName);  if (existingBinding.getInjectionTargetDescriptions().size() == 1) {    InjectionTargetDescription existingTarget=existingBinding.getInjectionTargetDescriptions().get(0);    InjectionTargetDescription newTarget=binding.getInjectionTargetDescriptions().get(0);    if (newTarget.getClassName().equals(existingTarget.getClassName()) && newTarget.getType().equals(existingTarget.getType()) && newTarget.getName().equals(existingTarget.getName())) {      return;    }  }} @AT@ 3523 @LENGTH@ 624
---------------INS InfixExpression@@existingBinding.getInjectionTargetDescriptions().size() == 1 @TO@ IfStatement@@if (existingBinding.getInjectionTargetDescriptions().size() == 1) {  InjectionTargetDescription existingTarget=existingBinding.getInjectionTargetDescriptions().get(0);  InjectionTargetDescription newTarget=binding.getInjectionTargetDescriptions().get(0);  if (newTarget.getClassName().equals(existingTarget.getClassName()) && newTarget.getType().equals(existingTarget.getType()) && newTarget.getName().equals(existingTarget.getName())) {    return;  }} @AT@ 3526 @LENGTH@ 60
------------------INS MethodInvocation@@existingBinding.getInjectionTargetDescriptions().size() @TO@ InfixExpression@@existingBinding.getInjectionTargetDescriptions().size() == 1 @AT@ 3526 @LENGTH@ 55
---------------------INS MethodInvocation@@MethodName:getInjectionTargetDescriptions:[] @TO@ MethodInvocation@@existingBinding.getInjectionTargetDescriptions().size() @AT@ 3526 @LENGTH@ 48
---------------------INS SimpleName@@Name:existingBinding @TO@ MethodInvocation@@existingBinding.getInjectionTargetDescriptions().size() @AT@ 3526 @LENGTH@ 15
---------------------INS SimpleName@@MethodName:size:[] @TO@ MethodInvocation@@existingBinding.getInjectionTargetDescriptions().size() @AT@ 3575 @LENGTH@ 6
------------------INS Operator@@== @TO@ InfixExpression@@existingBinding.getInjectionTargetDescriptions().size() == 1 @AT@ 3581 @LENGTH@ 2
------------------INS NumberLiteral@@1 @TO@ InfixExpression@@existingBinding.getInjectionTargetDescriptions().size() == 1 @AT@ 3585 @LENGTH@ 1
---------------INS Block@@ThenBody:{  InjectionTargetDescription existingTarget=existingBinding.getInjectionTargetDescriptions().get(0);  InjectionTargetDescription newTarget=binding.getInjectionTargetDescriptions().get(0);  if (newTarget.getClassName().equals(existingTarget.getClassName()) && newTarget.getType().equals(existingTarget.getType()) && newTarget.getName().equals(existingTarget.getName())) {    return;  }} @TO@ IfStatement@@if (existingBinding.getInjectionTargetDescriptions().size() == 1) {  InjectionTargetDescription existingTarget=existingBinding.getInjectionTargetDescriptions().get(0);  InjectionTargetDescription newTarget=binding.getInjectionTargetDescriptions().get(0);  if (newTarget.getClassName().equals(existingTarget.getClassName()) && newTarget.getType().equals(existingTarget.getType()) && newTarget.getName().equals(existingTarget.getName())) {    return;  }} @AT@ 3588 @LENGTH@ 559
------------------INS VariableDeclarationStatement@@InjectionTargetDescription existingTarget=existingBinding.getInjectionTargetDescriptions().get(0); @TO@ Block@@ThenBody:{  InjectionTargetDescription existingTarget=existingBinding.getInjectionTargetDescriptions().get(0);  InjectionTargetDescription newTarget=binding.getInjectionTargetDescriptions().get(0);  if (newTarget.getClassName().equals(existingTarget.getClassName()) && newTarget.getType().equals(existingTarget.getType()) && newTarget.getName().equals(existingTarget.getName())) {    return;  }} @AT@ 3610 @LENGTH@ 100
---------------------INS SimpleType@@InjectionTargetDescription @TO@ VariableDeclarationStatement@@InjectionTargetDescription existingTarget=existingBinding.getInjectionTargetDescriptions().get(0); @AT@ 3610 @LENGTH@ 26
---------------------INS VariableDeclarationFragment@@existingTarget=existingBinding.getInjectionTargetDescriptions().get(0) @TO@ VariableDeclarationStatement@@InjectionTargetDescription existingTarget=existingBinding.getInjectionTargetDescriptions().get(0); @AT@ 3637 @LENGTH@ 72
------------------------INS SimpleName@@existingTarget @TO@ VariableDeclarationFragment@@existingTarget=existingBinding.getInjectionTargetDescriptions().get(0) @AT@ 3637 @LENGTH@ 14
------------------------INS MethodInvocation@@existingBinding.getInjectionTargetDescriptions().get(0) @TO@ VariableDeclarationFragment@@existingTarget=existingBinding.getInjectionTargetDescriptions().get(0) @AT@ 3654 @LENGTH@ 55
---------------------------INS MethodInvocation@@MethodName:getInjectionTargetDescriptions:[] @TO@ MethodInvocation@@existingBinding.getInjectionTargetDescriptions().get(0) @AT@ 3654 @LENGTH@ 48
---------------------------INS SimpleName@@Name:existingBinding @TO@ MethodInvocation@@existingBinding.getInjectionTargetDescriptions().get(0) @AT@ 3654 @LENGTH@ 15
---------------------------INS SimpleName@@MethodName:get:[0] @TO@ MethodInvocation@@existingBinding.getInjectionTargetDescriptions().get(0) @AT@ 3703 @LENGTH@ 6
------------------------------INS NumberLiteral@@0 @TO@ SimpleName@@MethodName:get:[0] @AT@ 3707 @LENGTH@ 1
------------------INS VariableDeclarationStatement@@InjectionTargetDescription newTarget=binding.getInjectionTargetDescriptions().get(0); @TO@ Block@@ThenBody:{  InjectionTargetDescription existingTarget=existingBinding.getInjectionTargetDescriptions().get(0);  InjectionTargetDescription newTarget=binding.getInjectionTargetDescriptions().get(0);  if (newTarget.getClassName().equals(existingTarget.getClassName()) && newTarget.getType().equals(existingTarget.getType()) && newTarget.getName().equals(existingTarget.getName())) {    return;  }} @AT@ 3731 @LENGTH@ 87
---------------------INS SimpleType@@InjectionTargetDescription @TO@ VariableDeclarationStatement@@InjectionTargetDescription newTarget=binding.getInjectionTargetDescriptions().get(0); @AT@ 3731 @LENGTH@ 26
---------------------INS VariableDeclarationFragment@@newTarget=binding.getInjectionTargetDescriptions().get(0) @TO@ VariableDeclarationStatement@@InjectionTargetDescription newTarget=binding.getInjectionTargetDescriptions().get(0); @AT@ 3758 @LENGTH@ 59
------------------------INS SimpleName@@newTarget @TO@ VariableDeclarationFragment@@newTarget=binding.getInjectionTargetDescriptions().get(0) @AT@ 3758 @LENGTH@ 9
------------------------INS MethodInvocation@@binding.getInjectionTargetDescriptions().get(0) @TO@ VariableDeclarationFragment@@newTarget=binding.getInjectionTargetDescriptions().get(0) @AT@ 3770 @LENGTH@ 47
---------------------------INS MethodInvocation@@MethodName:getInjectionTargetDescriptions:[] @TO@ MethodInvocation@@binding.getInjectionTargetDescriptions().get(0) @AT@ 3770 @LENGTH@ 40
---------------------------INS SimpleName@@Name:binding @TO@ MethodInvocation@@binding.getInjectionTargetDescriptions().get(0) @AT@ 3770 @LENGTH@ 7
---------------------------INS SimpleName@@MethodName:get:[0] @TO@ MethodInvocation@@binding.getInjectionTargetDescriptions().get(0) @AT@ 3811 @LENGTH@ 6
------------------------------INS NumberLiteral@@0 @TO@ SimpleName@@MethodName:get:[0] @AT@ 3815 @LENGTH@ 1
------------------INS IfStatement@@if (newTarget.getClassName().equals(existingTarget.getClassName()) && newTarget.getType().equals(existingTarget.getType()) && newTarget.getName().equals(existingTarget.getName())) {  return;} @TO@ Block@@ThenBody:{  InjectionTargetDescription existingTarget=existingBinding.getInjectionTargetDescriptions().get(0);  InjectionTargetDescription newTarget=binding.getInjectionTargetDescriptions().get(0);  if (newTarget.getClassName().equals(existingTarget.getClassName()) && newTarget.getType().equals(existingTarget.getType()) && newTarget.getName().equals(existingTarget.getName())) {    return;  }} @AT@ 3839 @LENGTH@ 290
---------------------MOV Block@@ThenBody:{  throw new RuntimeException("Duplicate binding of JNDI name " + bindingName);} @TO@ IfStatement@@if (newTarget.getClassName().equals(existingTarget.getClassName()) && newTarget.getType().equals(existingTarget.getType()) && newTarget.getName().equals(existingTarget.getName())) {  return;} @AT@ 3023 @LENGTH@ 104
------------------------INS ReturnStatement@@ @TO@ Block@@ThenBody:{  throw new RuntimeException("Duplicate binding of JNDI name " + bindingName);} @AT@ 4100 @LENGTH@ 7
---------------------MOV Block@@ThenBody:{  throw new RuntimeException("Duplicate binding of JNDI name " + bindingName);} @TO@ IfStatement@@if (newTarget.getClassName().equals(existingTarget.getClassName()) && newTarget.getType().equals(existingTarget.getType()) && newTarget.getName().equals(existingTarget.getName())) {  return;} @AT@ 3023 @LENGTH@ 104
------------------------INS ReturnStatement@@ @TO@ Block@@ThenBody:{  throw new RuntimeException("Duplicate binding of JNDI name " + bindingName);} @AT@ 4100 @LENGTH@ 7
---------------------INS InfixExpression@@newTarget.getClassName().equals(existingTarget.getClassName()) && newTarget.getType().equals(existingTarget.getType()) && newTarget.getName().equals(existingTarget.getName()) @TO@ IfStatement@@if (newTarget.getClassName().equals(existingTarget.getClassName()) && newTarget.getType().equals(existingTarget.getType()) && newTarget.getName().equals(existingTarget.getName())) {  return;} @AT@ 3842 @LENGTH@ 230
------------------------INS MethodInvocation@@newTarget.getClassName().equals(existingTarget.getClassName()) @TO@ InfixExpression@@newTarget.getClassName().equals(existingTarget.getClassName()) && newTarget.getType().equals(existingTarget.getType()) && newTarget.getName().equals(existingTarget.getName()) @AT@ 3842 @LENGTH@ 62
---------------------------INS MethodInvocation@@MethodName:getClassName:[] @TO@ MethodInvocation@@newTarget.getClassName().equals(existingTarget.getClassName()) @AT@ 3842 @LENGTH@ 24
---------------------------INS SimpleName@@Name:newTarget @TO@ MethodInvocation@@newTarget.getClassName().equals(existingTarget.getClassName()) @AT@ 3842 @LENGTH@ 9
---------------------------INS SimpleName@@MethodName:equals:[existingTarget.getClassName()] @TO@ MethodInvocation@@newTarget.getClassName().equals(existingTarget.getClassName()) @AT@ 3867 @LENGTH@ 37
------------------------------INS MethodInvocation@@existingTarget.getClassName() @TO@ SimpleName@@MethodName:equals:[existingTarget.getClassName()] @AT@ 3874 @LENGTH@ 29
---------------------------------INS SimpleName@@Name:existingTarget @TO@ MethodInvocation@@existingTarget.getClassName() @AT@ 3874 @LENGTH@ 14
---------------------------------INS SimpleName@@MethodName:getClassName:[] @TO@ MethodInvocation@@existingTarget.getClassName() @AT@ 3889 @LENGTH@ 14
------------------------INS Operator@@&& @TO@ InfixExpression@@newTarget.getClassName().equals(existingTarget.getClassName()) && newTarget.getType().equals(existingTarget.getType()) && newTarget.getName().equals(existingTarget.getName()) @AT@ 3904 @LENGTH@ 2
------------------------INS MethodInvocation@@newTarget.getType().equals(existingTarget.getType()) @TO@ InfixExpression@@newTarget.getClassName().equals(existingTarget.getClassName()) && newTarget.getType().equals(existingTarget.getType()) && newTarget.getName().equals(existingTarget.getName()) @AT@ 3936 @LENGTH@ 52
---------------------------INS MethodInvocation@@MethodName:getType:[] @TO@ MethodInvocation@@newTarget.getType().equals(existingTarget.getType()) @AT@ 3936 @LENGTH@ 19
---------------------------INS SimpleName@@Name:newTarget @TO@ MethodInvocation@@newTarget.getType().equals(existingTarget.getType()) @AT@ 3936 @LENGTH@ 9
---------------------------INS SimpleName@@MethodName:equals:[existingTarget.getType()] @TO@ MethodInvocation@@newTarget.getType().equals(existingTarget.getType()) @AT@ 3956 @LENGTH@ 32
------------------------------INS MethodInvocation@@existingTarget.getType() @TO@ SimpleName@@MethodName:equals:[existingTarget.getType()] @AT@ 3963 @LENGTH@ 24
---------------------------------INS SimpleName@@Name:existingTarget @TO@ MethodInvocation@@existingTarget.getType() @AT@ 3963 @LENGTH@ 14
---------------------------------INS SimpleName@@MethodName:getType:[] @TO@ MethodInvocation@@existingTarget.getType() @AT@ 3978 @LENGTH@ 9
------------------------INS MethodInvocation@@newTarget.getName().equals(existingTarget.getName()) @TO@ InfixExpression@@newTarget.getClassName().equals(existingTarget.getClassName()) && newTarget.getType().equals(existingTarget.getType()) && newTarget.getName().equals(existingTarget.getName()) @AT@ 4020 @LENGTH@ 52
---------------------------INS MethodInvocation@@MethodName:getName:[] @TO@ MethodInvocation@@newTarget.getName().equals(existingTarget.getName()) @AT@ 4020 @LENGTH@ 19
---------------------------INS SimpleName@@Name:newTarget @TO@ MethodInvocation@@newTarget.getName().equals(existingTarget.getName()) @AT@ 4020 @LENGTH@ 9
---------------------------INS SimpleName@@MethodName:equals:[existingTarget.getName()] @TO@ MethodInvocation@@newTarget.getName().equals(existingTarget.getName()) @AT@ 4040 @LENGTH@ 32
------------------------------INS MethodInvocation@@existingTarget.getName() @TO@ SimpleName@@MethodName:equals:[existingTarget.getName()] @AT@ 4047 @LENGTH@ 24
---------------------------------INS SimpleName@@Name:existingTarget @TO@ MethodInvocation@@existingTarget.getName() @AT@ 4047 @LENGTH@ 14
---------------------------------INS SimpleName@@MethodName:getName:[] @TO@ MethodInvocation@@existingTarget.getName() @AT@ 4062 @LENGTH@ 9
---UPD Block@@ThenBody:{  throw new RuntimeException("Duplicate binding of JNDI name " + bindingName);} @TO@ ThenBody:{  return;} @AT@ 3023 @LENGTH@ 104


UPD ReturnStatement@@MethodInvocation:finalize(createCriteria(tree),tree.getSort()) @TO@ MethodInvocation:complete(createCriteria(tree),tree.getSort()) @AT@ 1926 @LENGTH@ 54
---UPD MethodInvocation@@finalize(createCriteria(tree),tree.getSort()) @TO@ complete(createCriteria(tree),tree.getSort()) @AT@ 1933 @LENGTH@ 46
------UPD SimpleName@@MethodName:finalize:[createCriteria(tree), tree.getSort()] @TO@ MethodName:complete:[createCriteria(tree), tree.getSort()] @AT@ 1933 @LENGTH@ 46


INS MethodDeclaration@@public, void, MethodName:handlesInvalidMapValueTypeProperl,  @TO@ TypeDeclaration@@[@SuppressWarnings("unused"), public]PropertyUnitTests,  @AT@ 3872 @LENGTH@ 109
---INS Modifier@@public @TO@ MethodDeclaration@@public, void, MethodName:handlesInvalidMapValueTypeProperl,  @AT@ 3872 @LENGTH@ 6
---INS PrimitiveType@@void @TO@ MethodDeclaration@@public, void, MethodName:handlesInvalidMapValueTypeProperl,  @AT@ 3879 @LENGTH@ 4
---INS SimpleName@@MethodName:handlesInvalidMapValueTypeProperl @TO@ MethodDeclaration@@public, void, MethodName:handlesInvalidMapValueTypeProperl,  @AT@ 3884 @LENGTH@ 33
---INS ExpressionStatement@@MethodInvocation:Property.from("userMapMame",Bar.class) @TO@ MethodDeclaration@@public, void, MethodName:handlesInvalidMapValueTypeProperl,  @AT@ 3935 @LENGTH@ 40
------INS MethodInvocation@@Property.from("userMapMame",Bar.class) @TO@ ExpressionStatement@@MethodInvocation:Property.from("userMapMame",Bar.class) @AT@ 3935 @LENGTH@ 39
---------INS SimpleName@@Name:Property @TO@ MethodInvocation@@Property.from("userMapMame",Bar.class) @AT@ 3935 @LENGTH@ 8
---------INS SimpleName@@MethodName:from:["userMapMame", Bar.class] @TO@ MethodInvocation@@Property.from("userMapMame",Bar.class) @AT@ 3944 @LENGTH@ 30
------------INS StringLiteral@@"userMapMame" @TO@ SimpleName@@MethodName:from:["userMapMame", Bar.class] @AT@ 3949 @LENGTH@ 13
------------INS TypeLiteral@@Bar.class @TO@ SimpleName@@MethodName:from:["userMapMame", Bar.class] @AT@ 3964 @LENGTH@ 9


UPD FieldDeclaration@@private, static, final, long, [serialVersionUID=1L] @TO@ private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @AT@ 1337 @LENGTH@ 48
---UPD VariableDeclarationFragment@@serialVersionUID=1L @TO@ serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID @AT@ 1363 @LENGTH@ 21
------INS QualifiedName@@SpringSecurityCoreVersion.SERIAL_VERSION_UID @TO@ VariableDeclarationFragment@@serialVersionUID=1L @AT@ 1329 @LENGTH@ 44
---------INS SimpleName@@SpringSecurityCoreVersion @TO@ QualifiedName@@SpringSecurityCoreVersion.SERIAL_VERSION_UID @AT@ 1329 @LENGTH@ 25
---------INS SimpleName@@SERIAL_VERSION_UID @TO@ QualifiedName@@SpringSecurityCoreVersion.SERIAL_VERSION_UID @AT@ 1355 @LENGTH@ 18
------DEL NumberLiteral@@1L @AT@ 1382 @LENGTH@ 2


UPD TryStatement@@try {  if (operation.hasDefined(DATASOURCES)) {    for (    ModelNode dataSourceNode : operation.get(DATASOURCES).asList()) {      Map<String,String> connectionProperties;      if (dataSourceNode.has(CONNECTION_PROPERTIES)) {        connectionProperties=new HashMap<String,String>(dataSourceNode.get(CONNECTION_PROPERTIES).asList().size());        for (        ModelNode property : dataSourceNode.get(CONNECTION_PROPERTIES).asList()) {          connectionProperties.put(property.asProperty().getName(),property.asString());        }      } else {        connectionProperties=Collections.EMPTY_MAP;      }      String connectionUrl=getStringIfSetOrGetDefault(dataSourceNode,CONNECTION_URL,null);      String driverClass=getStringIfSetOrGetDefault(dataSourceNode,DRIVER_CLASS,null);      String jndiName=getStringIfSetOrGetDefault(dataSourceNode,JNDINAME,null);      String module=getStringIfSetOrGetDefault(dataSourceNode,MODULE,null);      String newConnectionSql=getStringIfSetOrGetDefault(dataSourceNode,NEW_CONNECTION_SQL,null);      String poolName=getStringIfSetOrGetDefault(dataSourceNode,POOLNAME,null);      String urlDelimiter=getStringIfSetOrGetDefault(dataSourceNode,URL_DELIMITER,null);      String urlSelectorStrategyClassName=getStringIfSetOrGetDefault(dataSourceNode,URL_SELECTOR_STRATEGY_CLASS_NAME,null);      boolean useJavaContext=getBooleanIfSetOrGetDefault(dataSourceNode,USE_JAVA_CONTEXT,false);      boolean enabled=getBooleanIfSetOrGetDefault(dataSourceNode,ENABLED,false);      Integer maxPoolSize=getIntIfSetOrGetDefault(dataSourceNode,MAX_POOL_SIZE,null);      Integer minPoolSize=getIntIfSetOrGetDefault(dataSourceNode,MIN_POOL_SIZE,null);      boolean prefill=getBooleanIfSetOrGetDefault(dataSourceNode,POOL_PREFILL,false);      boolean useStrictMin=getBooleanIfSetOrGetDefault(dataSourceNode,POOL_USE_STRICT_MIN,false);      CommonPool pool=new CommonPoolImpl(minPoolSize,maxPoolSize,prefill,useStrictMin);      String username=getStringIfSetOrGetDefault(dataSourceNode,USERNAME,null);      String password=getStringIfSetOrGetDefault(dataSourceNode,PASSWORD,null);      String securityDomain=getStringIfSetOrGetDefault(dataSourceNode,SECURITY_DOMAIN,null);      DsSecurity security=new DsSecurityImpl(username,password,securityDomain);      boolean sharePreparedStatements=getBooleanIfSetOrGetDefault(dataSourceNode,USE_JAVA_CONTEXT,false);      Long preparedStatementsCacheSize=getLongIfSetOrGetDefault(dataSourceNode,PREPAREDSTATEMENTSCACHESIZE,null);      TrackStatementsEnum trackStatements=dataSourceNode.hasDefined(TRACKSTATEMENTS) ? TrackStatementsEnum.valueOf(dataSourceNode.get(TRACKSTATEMENTS).asString()) : TrackStatementsEnum.NOWARN;      Statement statement=new StatementImpl(sharePreparedStatements,preparedStatementsCacheSize,trackStatements);      Integer allocationRetry=getIntIfSetOrGetDefault(dataSourceNode,ALLOCATION_RETRY,null);      Long allocationRetryWaitMillis=getLongIfSetOrGetDefault(dataSourceNode,ALLOCATION_RETRY_WAIT_MILLIS,null);      Long blockingTimeoutMillis=getLongIfSetOrGetDefault(dataSourceNode,BLOCKING_TIMEOUT_WAIT_MILLIS,null);      Long idleTimeoutMinutes=getLongIfSetOrGetDefault(dataSourceNode,IDLETIMEOUTMINUTES,null);      Long queryTimeout=getLongIfSetOrGetDefault(dataSourceNode,QUERYTIMEOUT,null);      Integer xaResourceTimeout=getIntIfSetOrGetDefault(dataSourceNode,XA_RESOURCE_TIMEOUT,null);      Long useTryLock=getLongIfSetOrGetDefault(dataSourceNode,USETRYLOCK,null);      boolean setTxQuertTimeout=getBooleanIfSetOrGetDefault(dataSourceNode,SETTXQUERTTIMEOUT,false);      TimeOut timeOut=new TimeOutImpl(blockingTimeoutMillis,idleTimeoutMinutes,allocationRetry,allocationRetryWaitMillis,xaResourceTimeout,setTxQuertTimeout,queryTimeout,useTryLock);      TransactionIsolation transactionIsolation=dataSourceNode.has(TRANSACTION_ISOLOATION) ? TransactionIsolation.valueOf(dataSourceNode.get(TRANSACTION_ISOLOATION).asString()) : null;      String checkValidConnectionSql=getStringIfSetOrGetDefault(dataSourceNode,CHECKVALIDCONNECTIONSQL,null);      JdbcAdapterExtension exceptionSorter=extractJdbcAdapterExtension(dataSourceNode,EXCEPTIONSORTERCLASSNAME,EXCEPTIONSORTER_PROPERTIES);      JdbcAdapterExtension staleConnectionChecker=extractJdbcAdapterExtension(dataSourceNode,STALECONNECTIONCHECKERCLASSNAME,STALECONNECTIONCHECKER_PROPERTIES);      JdbcAdapterExtension validConnectionChecker=extractJdbcAdapterExtension(dataSourceNode,VALIDCONNECTIONCHECKERCLASSNAME,VALIDCONNECTIONCHECKER_PROPERTIES);      Long backgroundValidationMinutes=getLongIfSetOrGetDefault(dataSourceNode,BACKGROUNDVALIDATIONMINUTES,null);      boolean backgroundValidation=getBooleanIfSetOrGetDefault(dataSourceNode,BACKGROUNDVALIDATION,false);      boolean useFastFail=getBooleanIfSetOrGetDefault(dataSourceNode,USE_FAST_FAIL,false);      boolean validateOnMatch=getBooleanIfSetOrGetDefault(dataSourceNode,VALIDATEONMATCH,false);      boolean spy=getBooleanIfSetOrGetDefault(dataSourceNode,SPY,false);      Validation validation=new ValidationImpl(backgroundValidation,backgroundValidationMinutes,useFastFail,validConnectionChecker,checkValidConnectionSql,validateOnMatch,staleConnectionChecker,exceptionSorter);      DataSource ds=new DataSourceImpl(connectionUrl,driverClass,module,transactionIsolation,connectionProperties,timeOut,security,statement,validation,urlDelimiter,urlSelectorStrategyClassName,newConnectionSql,useJavaContext,poolName,enabled,jndiName,spy,pool);      datasourceList.add(ds);    }  }  if (operation.hasDefined(XA_DATASOURCES)) {    for (    ModelNode dataSourceNode : operation.get(XA_DATASOURCES).asList()) {      Map<String,String> xaDataSourceProperty=new HashMap<String,String>(dataSourceNode.get(XADATASOURCEPROPERTIES).asList().size());      for (      ModelNode property : dataSourceNode.get(XADATASOURCEPROPERTIES).asList()) {        xaDataSourceProperty.put(property.asProperty().getName(),property.asString());      }      String xaDataSourceClass=getStringIfSetOrGetDefault(dataSourceNode,XADATASOURCECLASS,null);      String jndiName=getStringIfSetOrGetDefault(dataSourceNode,JNDINAME,null);      String module=getStringIfSetOrGetDefault(dataSourceNode,MODULE,null);      String newConnectionSql=getStringIfSetOrGetDefault(dataSourceNode,NEW_CONNECTION_SQL,null);      String poolName=getStringIfSetOrGetDefault(dataSourceNode,POOLNAME,null);      String urlDelimiter=getStringIfSetOrGetDefault(dataSourceNode,URL_DELIMITER,null);      String urlSelectorStrategyClassName=getStringIfSetOrGetDefault(dataSourceNode,URL_SELECTOR_STRATEGY_CLASS_NAME,null);      boolean useJavaContext=getBooleanIfSetOrGetDefault(dataSourceNode,USE_JAVA_CONTEXT,false);      boolean enabled=getBooleanIfSetOrGetDefault(dataSourceNode,ENABLED,false);      Integer maxPoolSize=getIntIfSetOrGetDefault(dataSourceNode,MAX_POOL_SIZE,null);      Integer minPoolSize=getIntIfSetOrGetDefault(dataSourceNode,MIN_POOL_SIZE,null);      boolean prefill=getBooleanIfSetOrGetDefault(dataSourceNode,POOL_PREFILL,false);      boolean useStrictMin=getBooleanIfSetOrGetDefault(dataSourceNode,POOL_USE_STRICT_MIN,false);      boolean interleaving=getBooleanIfSetOrGetDefault(dataSourceNode,INTERLIVING,false);      boolean noTxSeparatePool=getBooleanIfSetOrGetDefault(dataSourceNode,NOTXSEPARATEPOOL,false);      boolean padXid=getBooleanIfSetOrGetDefault(dataSourceNode,PAD_XID,false);      boolean isSameRmOverride=getBooleanIfSetOrGetDefault(dataSourceNode,SAME_RM_OVERRIDE,false);      boolean wrapXaDataSource=getBooleanIfSetOrGetDefault(dataSourceNode,WRAP_XA_DATASOURCE,false);      CommonXaPool xaPool=new CommonXaPoolImpl(minPoolSize,maxPoolSize,prefill,useStrictMin,isSameRmOverride,interleaving,padXid,wrapXaDataSource,noTxSeparatePool);      String username=getStringIfSetOrGetDefault(dataSourceNode,USERNAME,null);      String password=getStringIfSetOrGetDefault(dataSourceNode,PASSWORD,null);      String securityDomain=getStringIfSetOrGetDefault(dataSourceNode,SECURITY_DOMAIN,null);      DsSecurity security=new DsSecurityImpl(username,password,securityDomain);      boolean sharePreparedStatements=dataSourceNode.has(SHAREPREPAREDSTATEMENTS) ? dataSourceNode.get(SHAREPREPAREDSTATEMENTS).asBoolean() : false;      Long preparedStatementsCacheSize=dataSourceNode.get(PREPAREDSTATEMENTSCACHESIZE).asLong();      TrackStatementsEnum trackStatements=TrackStatementsEnum.valueOf(dataSourceNode.get(TRACKSTATEMENTS).asString());      Statement statement=new StatementImpl(sharePreparedStatements,preparedStatementsCacheSize,trackStatements);      Integer allocationRetry=getIntIfSetOrGetDefault(dataSourceNode,ALLOCATION_RETRY,null);      Long allocationRetryWaitMillis=getLongIfSetOrGetDefault(dataSourceNode,ALLOCATION_RETRY_WAIT_MILLIS,null);      Long blockingTimeoutMillis=getLongIfSetOrGetDefault(dataSourceNode,BLOCKING_TIMEOUT_WAIT_MILLIS,null);      Long idleTimeoutMinutes=getLongIfSetOrGetDefault(dataSourceNode,IDLETIMEOUTMINUTES,null);      Long queryTimeout=getLongIfSetOrGetDefault(dataSourceNode,QUERYTIMEOUT,null);      Integer xaResourceTimeout=getIntIfSetOrGetDefault(dataSourceNode,XA_RESOURCE_TIMEOUT,null);      Long useTryLock=getLongIfSetOrGetDefault(dataSourceNode,USETRYLOCK,null);      boolean setTxQuertTimeout=getBooleanIfSetOrGetDefault(dataSourceNode,SETTXQUERTTIMEOUT,false);      TimeOut timeOut=new TimeOutImpl(blockingTimeoutMillis,idleTimeoutMinutes,allocationRetry,allocationRetryWaitMillis,xaResourceTimeout,setTxQuertTimeout,queryTimeout,useTryLock);      TransactionIsolation transactionIsolation=dataSourceNode.has(TRANSACTION_ISOLOATION) ? TransactionIsolation.valueOf(dataSourceNode.get(TRANSACTION_ISOLOATION).asString()) : null;      String checkValidConnectionSql=getStringIfSetOrGetDefault(dataSourceNode,CHECKVALIDCONNECTIONSQL,null);      JdbcAdapterExtension exceptionSorter=extractJdbcAdapterExtension(dataSourceNode,EXCEPTIONSORTERCLASSNAME,EXCEPTIONSORTER_PROPERTIES);      JdbcAdapterExtension staleConnectionChecker=extractJdbcAdapterExtension(dataSourceNode,STALECONNECTIONCHECKERCLASSNAME,STALECONNECTIONCHECKER_PROPERTIES);      JdbcAdapterExtension validConnectionChecker=extractJdbcAdapterExtension(dataSourceNode,VALIDCONNECTIONCHECKERCLASSNAME,VALIDCONNECTIONCHECKER_PROPERTIES);      Long backgroundValidationMinutes=getLongIfSetOrGetDefault(dataSourceNode,BACKGROUNDVALIDATIONMINUTES,null);      boolean backgroundValidation=getBooleanIfSetOrGetDefault(dataSourceNode,BACKGROUNDVALIDATION,false);      boolean useFastFail=getBooleanIfSetOrGetDefault(dataSourceNode,USE_FAST_FAIL,false);      boolean validateOnMatch=getBooleanIfSetOrGetDefault(dataSourceNode,VALIDATEONMATCH,false);      boolean spy=getBooleanIfSetOrGetDefault(dataSourceNode,SPY,false);      Validation validation=new ValidationImpl(backgroundValidation,backgroundValidationMinutes,useFastFail,validConnectionChecker,checkValidConnectionSql,validateOnMatch,staleConnectionChecker,exceptionSorter);      XaDataSource ds=new XADataSourceImpl(transactionIsolation,timeOut,security,statement,validation,urlDelimiter,urlSelectorStrategyClassName,useJavaContext,poolName,enabled,jndiName,spy,xaDataSourceProperty,xaDataSourceClass,module,newConnectionSql,xaPool);      xadatasourceList.add(ds);    }  }  return new DatasourcesImpl(datasourceList,xadatasourceList);} catch (ValidateException e) {  e.printStackTrace();  throw e;} @TO@ try {  if (operation.hasDefined(DATASOURCES)) {    for (    ModelNode dataSourceNode : operation.get(DATASOURCES).asList()) {      Map<String,String> connectionProperties;      if (dataSourceNode.has(CONNECTION_PROPERTIES)) {        connectionProperties=new HashMap<String,String>(dataSourceNode.get(CONNECTION_PROPERTIES).asList().size());        for (        ModelNode property : dataSourceNode.get(CONNECTION_PROPERTIES).asList()) {          connectionProperties.put(property.asProperty().getName(),property.asString());        }      } else {        connectionProperties=Collections.EMPTY_MAP;      }      String connectionUrl=getStringIfSetOrGetDefault(dataSourceNode,CONNECTION_URL,null);      String driverClass=getStringIfSetOrGetDefault(dataSourceNode,DRIVER_CLASS,null);      String jndiName=getStringIfSetOrGetDefault(dataSourceNode,JNDINAME,null);      String module=getStringIfSetOrGetDefault(dataSourceNode,MODULE,null);      String newConnectionSql=getStringIfSetOrGetDefault(dataSourceNode,NEW_CONNECTION_SQL,null);      String poolName=getStringIfSetOrGetDefault(dataSourceNode,POOLNAME,null);      String urlDelimiter=getStringIfSetOrGetDefault(dataSourceNode,URL_DELIMITER,null);      String urlSelectorStrategyClassName=getStringIfSetOrGetDefault(dataSourceNode,URL_SELECTOR_STRATEGY_CLASS_NAME,null);      boolean useJavaContext=getBooleanIfSetOrGetDefault(dataSourceNode,USE_JAVA_CONTEXT,false);      boolean enabled=getBooleanIfSetOrGetDefault(dataSourceNode,ENABLED,false);      Integer maxPoolSize=getIntIfSetOrGetDefault(dataSourceNode,MAX_POOL_SIZE,null);      Integer minPoolSize=getIntIfSetOrGetDefault(dataSourceNode,MIN_POOL_SIZE,null);      boolean prefill=getBooleanIfSetOrGetDefault(dataSourceNode,POOL_PREFILL,false);      boolean useStrictMin=getBooleanIfSetOrGetDefault(dataSourceNode,POOL_USE_STRICT_MIN,false);      CommonPool pool=new CommonPoolImpl(minPoolSize,maxPoolSize,prefill,useStrictMin);      String username=getStringIfSetOrGetDefault(dataSourceNode,USERNAME,null);      String password=getStringIfSetOrGetDefault(dataSourceNode,PASSWORD,null);      String securityDomain=getStringIfSetOrGetDefault(dataSourceNode,SECURITY_DOMAIN,null);      DsSecurity security=new DsSecurityImpl(username,password,securityDomain);      boolean sharePreparedStatements=getBooleanIfSetOrGetDefault(dataSourceNode,USE_JAVA_CONTEXT,false);      Long preparedStatementsCacheSize=getLongIfSetOrGetDefault(dataSourceNode,PREPAREDSTATEMENTSCACHESIZE,null);      TrackStatementsEnum trackStatements=dataSourceNode.hasDefined(TRACKSTATEMENTS) ? TrackStatementsEnum.valueOf(dataSourceNode.get(TRACKSTATEMENTS).asString()) : TrackStatementsEnum.NOWARN;      Statement statement=new StatementImpl(sharePreparedStatements,preparedStatementsCacheSize,trackStatements);      Integer allocationRetry=getIntIfSetOrGetDefault(dataSourceNode,ALLOCATION_RETRY,null);      Long allocationRetryWaitMillis=getLongIfSetOrGetDefault(dataSourceNode,ALLOCATION_RETRY_WAIT_MILLIS,null);      Long blockingTimeoutMillis=getLongIfSetOrGetDefault(dataSourceNode,BLOCKING_TIMEOUT_WAIT_MILLIS,null);      Long idleTimeoutMinutes=getLongIfSetOrGetDefault(dataSourceNode,IDLETIMEOUTMINUTES,null);      Long queryTimeout=getLongIfSetOrGetDefault(dataSourceNode,QUERYTIMEOUT,null);      Integer xaResourceTimeout=getIntIfSetOrGetDefault(dataSourceNode,XA_RESOURCE_TIMEOUT,null);      Long useTryLock=getLongIfSetOrGetDefault(dataSourceNode,USETRYLOCK,null);      boolean setTxQuertTimeout=getBooleanIfSetOrGetDefault(dataSourceNode,SETTXQUERYTIMEOUT,false);      TimeOut timeOut=new TimeOutImpl(blockingTimeoutMillis,idleTimeoutMinutes,allocationRetry,allocationRetryWaitMillis,xaResourceTimeout,setTxQuertTimeout,queryTimeout,useTryLock);      TransactionIsolation transactionIsolation=dataSourceNode.has(TRANSACTION_ISOLOATION) ? TransactionIsolation.valueOf(dataSourceNode.get(TRANSACTION_ISOLOATION).asString()) : null;      String checkValidConnectionSql=getStringIfSetOrGetDefault(dataSourceNode,CHECKVALIDCONNECTIONSQL,null);      JdbcAdapterExtension exceptionSorter=extractJdbcAdapterExtension(dataSourceNode,EXCEPTIONSORTERCLASSNAME,EXCEPTIONSORTER_PROPERTIES);      JdbcAdapterExtension staleConnectionChecker=extractJdbcAdapterExtension(dataSourceNode,STALECONNECTIONCHECKERCLASSNAME,STALECONNECTIONCHECKER_PROPERTIES);      JdbcAdapterExtension validConnectionChecker=extractJdbcAdapterExtension(dataSourceNode,VALIDCONNECTIONCHECKERCLASSNAME,VALIDCONNECTIONCHECKER_PROPERTIES);      Long backgroundValidationMinutes=getLongIfSetOrGetDefault(dataSourceNode,BACKGROUNDVALIDATIONMINUTES,null);      boolean backgroundValidation=getBooleanIfSetOrGetDefault(dataSourceNode,BACKGROUNDVALIDATION,false);      boolean useFastFail=getBooleanIfSetOrGetDefault(dataSourceNode,USE_FAST_FAIL,false);      boolean validateOnMatch=getBooleanIfSetOrGetDefault(dataSourceNode,VALIDATEONMATCH,false);      boolean spy=getBooleanIfSetOrGetDefault(dataSourceNode,SPY,false);      Validation validation=new ValidationImpl(backgroundValidation,backgroundValidationMinutes,useFastFail,validConnectionChecker,checkValidConnectionSql,validateOnMatch,staleConnectionChecker,exceptionSorter);      DataSource ds=new DataSourceImpl(connectionUrl,driverClass,module,transactionIsolation,connectionProperties,timeOut,security,statement,validation,urlDelimiter,urlSelectorStrategyClassName,newConnectionSql,useJavaContext,poolName,enabled,jndiName,spy,pool);      datasourceList.add(ds);    }  }  if (operation.hasDefined(XA_DATASOURCES)) {    for (    ModelNode dataSourceNode : operation.get(XA_DATASOURCES).asList()) {      Map<String,String> xaDataSourceProperty=new HashMap<String,String>(dataSourceNode.get(XADATASOURCEPROPERTIES).asList().size());      for (      ModelNode property : dataSourceNode.get(XADATASOURCEPROPERTIES).asList()) {        xaDataSourceProperty.put(property.asProperty().getName(),property.asString());      }      String xaDataSourceClass=getStringIfSetOrGetDefault(dataSourceNode,XADATASOURCECLASS,null);      String jndiName=getStringIfSetOrGetDefault(dataSourceNode,JNDINAME,null);      String module=getStringIfSetOrGetDefault(dataSourceNode,MODULE,null);      String newConnectionSql=getStringIfSetOrGetDefault(dataSourceNode,NEW_CONNECTION_SQL,null);      String poolName=getStringIfSetOrGetDefault(dataSourceNode,POOLNAME,null);      String urlDelimiter=getStringIfSetOrGetDefault(dataSourceNode,URL_DELIMITER,null);      String urlSelectorStrategyClassName=getStringIfSetOrGetDefault(dataSourceNode,URL_SELECTOR_STRATEGY_CLASS_NAME,null);      boolean useJavaContext=getBooleanIfSetOrGetDefault(dataSourceNode,USE_JAVA_CONTEXT,false);      boolean enabled=getBooleanIfSetOrGetDefault(dataSourceNode,ENABLED,false);      Integer maxPoolSize=getIntIfSetOrGetDefault(dataSourceNode,MAX_POOL_SIZE,null);      Integer minPoolSize=getIntIfSetOrGetDefault(dataSourceNode,MIN_POOL_SIZE,null);      boolean prefill=getBooleanIfSetOrGetDefault(dataSourceNode,POOL_PREFILL,false);      boolean useStrictMin=getBooleanIfSetOrGetDefault(dataSourceNode,POOL_USE_STRICT_MIN,false);      boolean interleaving=getBooleanIfSetOrGetDefault(dataSourceNode,INTERLIVING,false);      boolean noTxSeparatePool=getBooleanIfSetOrGetDefault(dataSourceNode,NOTXSEPARATEPOOL,false);      boolean padXid=getBooleanIfSetOrGetDefault(dataSourceNode,PAD_XID,false);      boolean isSameRmOverride=getBooleanIfSetOrGetDefault(dataSourceNode,SAME_RM_OVERRIDE,false);      boolean wrapXaDataSource=getBooleanIfSetOrGetDefault(dataSourceNode,WRAP_XA_DATASOURCE,false);      CommonXaPool xaPool=new CommonXaPoolImpl(minPoolSize,maxPoolSize,prefill,useStrictMin,isSameRmOverride,interleaving,padXid,wrapXaDataSource,noTxSeparatePool);      String username=getStringIfSetOrGetDefault(dataSourceNode,USERNAME,null);      String password=getStringIfSetOrGetDefault(dataSourceNode,PASSWORD,null);      String securityDomain=getStringIfSetOrGetDefault(dataSourceNode,SECURITY_DOMAIN,null);      DsSecurity security=new DsSecurityImpl(username,password,securityDomain);      boolean sharePreparedStatements=dataSourceNode.has(SHAREPREPAREDSTATEMENTS) ? dataSourceNode.get(SHAREPREPAREDSTATEMENTS).asBoolean() : false;      Long preparedStatementsCacheSize=dataSourceNode.get(PREPAREDSTATEMENTSCACHESIZE).asLong();      TrackStatementsEnum trackStatements=TrackStatementsEnum.valueOf(dataSourceNode.get(TRACKSTATEMENTS).asString());      Statement statement=new StatementImpl(sharePreparedStatements,preparedStatementsCacheSize,trackStatements);      Integer allocationRetry=getIntIfSetOrGetDefault(dataSourceNode,ALLOCATION_RETRY,null);      Long allocationRetryWaitMillis=getLongIfSetOrGetDefault(dataSourceNode,ALLOCATION_RETRY_WAIT_MILLIS,null);      Long blockingTimeoutMillis=getLongIfSetOrGetDefault(dataSourceNode,BLOCKING_TIMEOUT_WAIT_MILLIS,null);      Long idleTimeoutMinutes=getLongIfSetOrGetDefault(dataSourceNode,IDLETIMEOUTMINUTES,null);      Long queryTimeout=getLongIfSetOrGetDefault(dataSourceNode,QUERYTIMEOUT,null);      Integer xaResourceTimeout=getIntIfSetOrGetDefault(dataSourceNode,XA_RESOURCE_TIMEOUT,null);      Long useTryLock=getLongIfSetOrGetDefault(dataSourceNode,USETRYLOCK,null);      boolean setTxQuertTimeout=getBooleanIfSetOrGetDefault(dataSourceNode,SETTXQUERYTIMEOUT,false);      TimeOut timeOut=new TimeOutImpl(blockingTimeoutMillis,idleTimeoutMinutes,allocationRetry,allocationRetryWaitMillis,xaResourceTimeout,setTxQuertTimeout,queryTimeout,useTryLock);      TransactionIsolation transactionIsolation=dataSourceNode.has(TRANSACTION_ISOLOATION) ? TransactionIsolation.valueOf(dataSourceNode.get(TRANSACTION_ISOLOATION).asString()) : null;      String checkValidConnectionSql=getStringIfSetOrGetDefault(dataSourceNode,CHECKVALIDCONNECTIONSQL,null);      JdbcAdapterExtension exceptionSorter=extractJdbcAdapterExtension(dataSourceNode,EXCEPTIONSORTERCLASSNAME,EXCEPTIONSORTER_PROPERTIES);      JdbcAdapterExtension staleConnectionChecker=extractJdbcAdapterExtension(dataSourceNode,STALECONNECTIONCHECKERCLASSNAME,STALECONNECTIONCHECKER_PROPERTIES);      JdbcAdapterExtension validConnectionChecker=extractJdbcAdapterExtension(dataSourceNode,VALIDCONNECTIONCHECKERCLASSNAME,VALIDCONNECTIONCHECKER_PROPERTIES);      Long backgroundValidationMinutes=getLongIfSetOrGetDefault(dataSourceNode,BACKGROUNDVALIDATIONMINUTES,null);      boolean backgroundValidation=getBooleanIfSetOrGetDefault(dataSourceNode,BACKGROUNDVALIDATION,false);      boolean useFastFail=getBooleanIfSetOrGetDefault(dataSourceNode,USE_FAST_FAIL,false);      boolean validateOnMatch=getBooleanIfSetOrGetDefault(dataSourceNode,VALIDATEONMATCH,false);      boolean spy=getBooleanIfSetOrGetDefault(dataSourceNode,SPY,false);      Validation validation=new ValidationImpl(backgroundValidation,backgroundValidationMinutes,useFastFail,validConnectionChecker,checkValidConnectionSql,validateOnMatch,staleConnectionChecker,exceptionSorter);      XaDataSource ds=new XADataSourceImpl(transactionIsolation,timeOut,security,statement,validation,urlDelimiter,urlSelectorStrategyClassName,useJavaContext,poolName,enabled,jndiName,spy,xaDataSourceProperty,xaDataSourceClass,module,newConnectionSql,xaPool);      xadatasourceList.add(ds);    }  }  return new DatasourcesImpl(datasourceList,xadatasourceList);} catch (ValidateException e) {  e.printStackTrace();  throw e;} @AT@ 12766 @LENGTH@ 14477
---UPD IfStatement@@if (operation.hasDefined(DATASOURCES)) {  for (  ModelNode dataSourceNode : operation.get(DATASOURCES).asList()) {    Map<String,String> connectionProperties;    if (dataSourceNode.has(CONNECTION_PROPERTIES)) {      connectionProperties=new HashMap<String,String>(dataSourceNode.get(CONNECTION_PROPERTIES).asList().size());      for (      ModelNode property : dataSourceNode.get(CONNECTION_PROPERTIES).asList()) {        connectionProperties.put(property.asProperty().getName(),property.asString());      }    } else {      connectionProperties=Collections.EMPTY_MAP;    }    String connectionUrl=getStringIfSetOrGetDefault(dataSourceNode,CONNECTION_URL,null);    String driverClass=getStringIfSetOrGetDefault(dataSourceNode,DRIVER_CLASS,null);    String jndiName=getStringIfSetOrGetDefault(dataSourceNode,JNDINAME,null);    String module=getStringIfSetOrGetDefault(dataSourceNode,MODULE,null);    String newConnectionSql=getStringIfSetOrGetDefault(dataSourceNode,NEW_CONNECTION_SQL,null);    String poolName=getStringIfSetOrGetDefault(dataSourceNode,POOLNAME,null);    String urlDelimiter=getStringIfSetOrGetDefault(dataSourceNode,URL_DELIMITER,null);    String urlSelectorStrategyClassName=getStringIfSetOrGetDefault(dataSourceNode,URL_SELECTOR_STRATEGY_CLASS_NAME,null);    boolean useJavaContext=getBooleanIfSetOrGetDefault(dataSourceNode,USE_JAVA_CONTEXT,false);    boolean enabled=getBooleanIfSetOrGetDefault(dataSourceNode,ENABLED,false);    Integer maxPoolSize=getIntIfSetOrGetDefault(dataSourceNode,MAX_POOL_SIZE,null);    Integer minPoolSize=getIntIfSetOrGetDefault(dataSourceNode,MIN_POOL_SIZE,null);    boolean prefill=getBooleanIfSetOrGetDefault(dataSourceNode,POOL_PREFILL,false);    boolean useStrictMin=getBooleanIfSetOrGetDefault(dataSourceNode,POOL_USE_STRICT_MIN,false);    CommonPool pool=new CommonPoolImpl(minPoolSize,maxPoolSize,prefill,useStrictMin);    String username=getStringIfSetOrGetDefault(dataSourceNode,USERNAME,null);    String password=getStringIfSetOrGetDefault(dataSourceNode,PASSWORD,null);    String securityDomain=getStringIfSetOrGetDefault(dataSourceNode,SECURITY_DOMAIN,null);    DsSecurity security=new DsSecurityImpl(username,password,securityDomain);    boolean sharePreparedStatements=getBooleanIfSetOrGetDefault(dataSourceNode,USE_JAVA_CONTEXT,false);    Long preparedStatementsCacheSize=getLongIfSetOrGetDefault(dataSourceNode,PREPAREDSTATEMENTSCACHESIZE,null);    TrackStatementsEnum trackStatements=dataSourceNode.hasDefined(TRACKSTATEMENTS) ? TrackStatementsEnum.valueOf(dataSourceNode.get(TRACKSTATEMENTS).asString()) : TrackStatementsEnum.NOWARN;    Statement statement=new StatementImpl(sharePreparedStatements,preparedStatementsCacheSize,trackStatements);    Integer allocationRetry=getIntIfSetOrGetDefault(dataSourceNode,ALLOCATION_RETRY,null);    Long allocationRetryWaitMillis=getLongIfSetOrGetDefault(dataSourceNode,ALLOCATION_RETRY_WAIT_MILLIS,null);    Long blockingTimeoutMillis=getLongIfSetOrGetDefault(dataSourceNode,BLOCKING_TIMEOUT_WAIT_MILLIS,null);    Long idleTimeoutMinutes=getLongIfSetOrGetDefault(dataSourceNode,IDLETIMEOUTMINUTES,null);    Long queryTimeout=getLongIfSetOrGetDefault(dataSourceNode,QUERYTIMEOUT,null);    Integer xaResourceTimeout=getIntIfSetOrGetDefault(dataSourceNode,XA_RESOURCE_TIMEOUT,null);    Long useTryLock=getLongIfSetOrGetDefault(dataSourceNode,USETRYLOCK,null);    boolean setTxQuertTimeout=getBooleanIfSetOrGetDefault(dataSourceNode,SETTXQUERTTIMEOUT,false);    TimeOut timeOut=new TimeOutImpl(blockingTimeoutMillis,idleTimeoutMinutes,allocationRetry,allocationRetryWaitMillis,xaResourceTimeout,setTxQuertTimeout,queryTimeout,useTryLock);    TransactionIsolation transactionIsolation=dataSourceNode.has(TRANSACTION_ISOLOATION) ? TransactionIsolation.valueOf(dataSourceNode.get(TRANSACTION_ISOLOATION).asString()) : null;    String checkValidConnectionSql=getStringIfSetOrGetDefault(dataSourceNode,CHECKVALIDCONNECTIONSQL,null);    JdbcAdapterExtension exceptionSorter=extractJdbcAdapterExtension(dataSourceNode,EXCEPTIONSORTERCLASSNAME,EXCEPTIONSORTER_PROPERTIES);    JdbcAdapterExtension staleConnectionChecker=extractJdbcAdapterExtension(dataSourceNode,STALECONNECTIONCHECKERCLASSNAME,STALECONNECTIONCHECKER_PROPERTIES);    JdbcAdapterExtension validConnectionChecker=extractJdbcAdapterExtension(dataSourceNode,VALIDCONNECTIONCHECKERCLASSNAME,VALIDCONNECTIONCHECKER_PROPERTIES);    Long backgroundValidationMinutes=getLongIfSetOrGetDefault(dataSourceNode,BACKGROUNDVALIDATIONMINUTES,null);    boolean backgroundValidation=getBooleanIfSetOrGetDefault(dataSourceNode,BACKGROUNDVALIDATION,false);    boolean useFastFail=getBooleanIfSetOrGetDefault(dataSourceNode,USE_FAST_FAIL,false);    boolean validateOnMatch=getBooleanIfSetOrGetDefault(dataSourceNode,VALIDATEONMATCH,false);    boolean spy=getBooleanIfSetOrGetDefault(dataSourceNode,SPY,false);    Validation validation=new ValidationImpl(backgroundValidation,backgroundValidationMinutes,useFastFail,validConnectionChecker,checkValidConnectionSql,validateOnMatch,staleConnectionChecker,exceptionSorter);    DataSource ds=new DataSourceImpl(connectionUrl,driverClass,module,transactionIsolation,connectionProperties,timeOut,security,statement,validation,urlDelimiter,urlSelectorStrategyClassName,newConnectionSql,useJavaContext,poolName,enabled,jndiName,spy,pool);    datasourceList.add(ds);  }} @TO@ if (operation.hasDefined(DATASOURCES)) {  for (  ModelNode dataSourceNode : operation.get(DATASOURCES).asList()) {    Map<String,String> connectionProperties;    if (dataSourceNode.has(CONNECTION_PROPERTIES)) {      connectionProperties=new HashMap<String,String>(dataSourceNode.get(CONNECTION_PROPERTIES).asList().size());      for (      ModelNode property : dataSourceNode.get(CONNECTION_PROPERTIES).asList()) {        connectionProperties.put(property.asProperty().getName(),property.asString());      }    } else {      connectionProperties=Collections.EMPTY_MAP;    }    String connectionUrl=getStringIfSetOrGetDefault(dataSourceNode,CONNECTION_URL,null);    String driverClass=getStringIfSetOrGetDefault(dataSourceNode,DRIVER_CLASS,null);    String jndiName=getStringIfSetOrGetDefault(dataSourceNode,JNDINAME,null);    String module=getStringIfSetOrGetDefault(dataSourceNode,MODULE,null);    String newConnectionSql=getStringIfSetOrGetDefault(dataSourceNode,NEW_CONNECTION_SQL,null);    String poolName=getStringIfSetOrGetDefault(dataSourceNode,POOLNAME,null);    String urlDelimiter=getStringIfSetOrGetDefault(dataSourceNode,URL_DELIMITER,null);    String urlSelectorStrategyClassName=getStringIfSetOrGetDefault(dataSourceNode,URL_SELECTOR_STRATEGY_CLASS_NAME,null);    boolean useJavaContext=getBooleanIfSetOrGetDefault(dataSourceNode,USE_JAVA_CONTEXT,false);    boolean enabled=getBooleanIfSetOrGetDefault(dataSourceNode,ENABLED,false);    Integer maxPoolSize=getIntIfSetOrGetDefault(dataSourceNode,MAX_POOL_SIZE,null);    Integer minPoolSize=getIntIfSetOrGetDefault(dataSourceNode,MIN_POOL_SIZE,null);    boolean prefill=getBooleanIfSetOrGetDefault(dataSourceNode,POOL_PREFILL,false);    boolean useStrictMin=getBooleanIfSetOrGetDefault(dataSourceNode,POOL_USE_STRICT_MIN,false);    CommonPool pool=new CommonPoolImpl(minPoolSize,maxPoolSize,prefill,useStrictMin);    String username=getStringIfSetOrGetDefault(dataSourceNode,USERNAME,null);    String password=getStringIfSetOrGetDefault(dataSourceNode,PASSWORD,null);    String securityDomain=getStringIfSetOrGetDefault(dataSourceNode,SECURITY_DOMAIN,null);    DsSecurity security=new DsSecurityImpl(username,password,securityDomain);    boolean sharePreparedStatements=getBooleanIfSetOrGetDefault(dataSourceNode,USE_JAVA_CONTEXT,false);    Long preparedStatementsCacheSize=getLongIfSetOrGetDefault(dataSourceNode,PREPAREDSTATEMENTSCACHESIZE,null);    TrackStatementsEnum trackStatements=dataSourceNode.hasDefined(TRACKSTATEMENTS) ? TrackStatementsEnum.valueOf(dataSourceNode.get(TRACKSTATEMENTS).asString()) : TrackStatementsEnum.NOWARN;    Statement statement=new StatementImpl(sharePreparedStatements,preparedStatementsCacheSize,trackStatements);    Integer allocationRetry=getIntIfSetOrGetDefault(dataSourceNode,ALLOCATION_RETRY,null);    Long allocationRetryWaitMillis=getLongIfSetOrGetDefault(dataSourceNode,ALLOCATION_RETRY_WAIT_MILLIS,null);    Long blockingTimeoutMillis=getLongIfSetOrGetDefault(dataSourceNode,BLOCKING_TIMEOUT_WAIT_MILLIS,null);    Long idleTimeoutMinutes=getLongIfSetOrGetDefault(dataSourceNode,IDLETIMEOUTMINUTES,null);    Long queryTimeout=getLongIfSetOrGetDefault(dataSourceNode,QUERYTIMEOUT,null);    Integer xaResourceTimeout=getIntIfSetOrGetDefault(dataSourceNode,XA_RESOURCE_TIMEOUT,null);    Long useTryLock=getLongIfSetOrGetDefault(dataSourceNode,USETRYLOCK,null);    boolean setTxQuertTimeout=getBooleanIfSetOrGetDefault(dataSourceNode,SETTXQUERYTIMEOUT,false);    TimeOut timeOut=new TimeOutImpl(blockingTimeoutMillis,idleTimeoutMinutes,allocationRetry,allocationRetryWaitMillis,xaResourceTimeout,setTxQuertTimeout,queryTimeout,useTryLock);    TransactionIsolation transactionIsolation=dataSourceNode.has(TRANSACTION_ISOLOATION) ? TransactionIsolation.valueOf(dataSourceNode.get(TRANSACTION_ISOLOATION).asString()) : null;    String checkValidConnectionSql=getStringIfSetOrGetDefault(dataSourceNode,CHECKVALIDCONNECTIONSQL,null);    JdbcAdapterExtension exceptionSorter=extractJdbcAdapterExtension(dataSourceNode,EXCEPTIONSORTERCLASSNAME,EXCEPTIONSORTER_PROPERTIES);    JdbcAdapterExtension staleConnectionChecker=extractJdbcAdapterExtension(dataSourceNode,STALECONNECTIONCHECKERCLASSNAME,STALECONNECTIONCHECKER_PROPERTIES);    JdbcAdapterExtension validConnectionChecker=extractJdbcAdapterExtension(dataSourceNode,VALIDCONNECTIONCHECKERCLASSNAME,VALIDCONNECTIONCHECKER_PROPERTIES);    Long backgroundValidationMinutes=getLongIfSetOrGetDefault(dataSourceNode,BACKGROUNDVALIDATIONMINUTES,null);    boolean backgroundValidation=getBooleanIfSetOrGetDefault(dataSourceNode,BACKGROUNDVALIDATION,false);    boolean useFastFail=getBooleanIfSetOrGetDefault(dataSourceNode,USE_FAST_FAIL,false);    boolean validateOnMatch=getBooleanIfSetOrGetDefault(dataSourceNode,VALIDATEONMATCH,false);    boolean spy=getBooleanIfSetOrGetDefault(dataSourceNode,SPY,false);    Validation validation=new ValidationImpl(backgroundValidation,backgroundValidationMinutes,useFastFail,validConnectionChecker,checkValidConnectionSql,validateOnMatch,staleConnectionChecker,exceptionSorter);    DataSource ds=new DataSourceImpl(connectionUrl,driverClass,module,transactionIsolation,connectionProperties,timeOut,security,statement,validation,urlDelimiter,urlSelectorStrategyClassName,newConnectionSql,useJavaContext,poolName,enabled,jndiName,spy,pool);    datasourceList.add(ds);  }} @AT@ 12784 @LENGTH@ 7009
------UPD Block@@ThenBody:{  for (  ModelNode dataSourceNode : operation.get(DATASOURCES).asList()) {    Map<String,String> connectionProperties;    if (dataSourceNode.has(CONNECTION_PROPERTIES)) {      connectionProperties=new HashMap<String,String>(dataSourceNode.get(CONNECTION_PROPERTIES).asList().size());      for (      ModelNode property : dataSourceNode.get(CONNECTION_PROPERTIES).asList()) {        connectionProperties.put(property.asProperty().getName(),property.asString());      }    } else {      connectionProperties=Collections.EMPTY_MAP;    }    String connectionUrl=getStringIfSetOrGetDefault(dataSourceNode,CONNECTION_URL,null);    String driverClass=getStringIfSetOrGetDefault(dataSourceNode,DRIVER_CLASS,null);    String jndiName=getStringIfSetOrGetDefault(dataSourceNode,JNDINAME,null);    String module=getStringIfSetOrGetDefault(dataSourceNode,MODULE,null);    String newConnectionSql=getStringIfSetOrGetDefault(dataSourceNode,NEW_CONNECTION_SQL,null);    String poolName=getStringIfSetOrGetDefault(dataSourceNode,POOLNAME,null);    String urlDelimiter=getStringIfSetOrGetDefault(dataSourceNode,URL_DELIMITER,null);    String urlSelectorStrategyClassName=getStringIfSetOrGetDefault(dataSourceNode,URL_SELECTOR_STRATEGY_CLASS_NAME,null);    boolean useJavaContext=getBooleanIfSetOrGetDefault(dataSourceNode,USE_JAVA_CONTEXT,false);    boolean enabled=getBooleanIfSetOrGetDefault(dataSourceNode,ENABLED,false);    Integer maxPoolSize=getIntIfSetOrGetDefault(dataSourceNode,MAX_POOL_SIZE,null);    Integer minPoolSize=getIntIfSetOrGetDefault(dataSourceNode,MIN_POOL_SIZE,null);    boolean prefill=getBooleanIfSetOrGetDefault(dataSourceNode,POOL_PREFILL,false);    boolean useStrictMin=getBooleanIfSetOrGetDefault(dataSourceNode,POOL_USE_STRICT_MIN,false);    CommonPool pool=new CommonPoolImpl(minPoolSize,maxPoolSize,prefill,useStrictMin);    String username=getStringIfSetOrGetDefault(dataSourceNode,USERNAME,null);    String password=getStringIfSetOrGetDefault(dataSourceNode,PASSWORD,null);    String securityDomain=getStringIfSetOrGetDefault(dataSourceNode,SECURITY_DOMAIN,null);    DsSecurity security=new DsSecurityImpl(username,password,securityDomain);    boolean sharePreparedStatements=getBooleanIfSetOrGetDefault(dataSourceNode,USE_JAVA_CONTEXT,false);    Long preparedStatementsCacheSize=getLongIfSetOrGetDefault(dataSourceNode,PREPAREDSTATEMENTSCACHESIZE,null);    TrackStatementsEnum trackStatements=dataSourceNode.hasDefined(TRACKSTATEMENTS) ? TrackStatementsEnum.valueOf(dataSourceNode.get(TRACKSTATEMENTS).asString()) : TrackStatementsEnum.NOWARN;    Statement statement=new StatementImpl(sharePreparedStatements,preparedStatementsCacheSize,trackStatements);    Integer allocationRetry=getIntIfSetOrGetDefault(dataSourceNode,ALLOCATION_RETRY,null);    Long allocationRetryWaitMillis=getLongIfSetOrGetDefault(dataSourceNode,ALLOCATION_RETRY_WAIT_MILLIS,null);    Long blockingTimeoutMillis=getLongIfSetOrGetDefault(dataSourceNode,BLOCKING_TIMEOUT_WAIT_MILLIS,null);    Long idleTimeoutMinutes=getLongIfSetOrGetDefault(dataSourceNode,IDLETIMEOUTMINUTES,null);    Long queryTimeout=getLongIfSetOrGetDefault(dataSourceNode,QUERYTIMEOUT,null);    Integer xaResourceTimeout=getIntIfSetOrGetDefault(dataSourceNode,XA_RESOURCE_TIMEOUT,null);    Long useTryLock=getLongIfSetOrGetDefault(dataSourceNode,USETRYLOCK,null);    boolean setTxQuertTimeout=getBooleanIfSetOrGetDefault(dataSourceNode,SETTXQUERTTIMEOUT,false);    TimeOut timeOut=new TimeOutImpl(blockingTimeoutMillis,idleTimeoutMinutes,allocationRetry,allocationRetryWaitMillis,xaResourceTimeout,setTxQuertTimeout,queryTimeout,useTryLock);    TransactionIsolation transactionIsolation=dataSourceNode.has(TRANSACTION_ISOLOATION) ? TransactionIsolation.valueOf(dataSourceNode.get(TRANSACTION_ISOLOATION).asString()) : null;    String checkValidConnectionSql=getStringIfSetOrGetDefault(dataSourceNode,CHECKVALIDCONNECTIONSQL,null);    JdbcAdapterExtension exceptionSorter=extractJdbcAdapterExtension(dataSourceNode,EXCEPTIONSORTERCLASSNAME,EXCEPTIONSORTER_PROPERTIES);    JdbcAdapterExtension staleConnectionChecker=extractJdbcAdapterExtension(dataSourceNode,STALECONNECTIONCHECKERCLASSNAME,STALECONNECTIONCHECKER_PROPERTIES);    JdbcAdapterExtension validConnectionChecker=extractJdbcAdapterExtension(dataSourceNode,VALIDCONNECTIONCHECKERCLASSNAME,VALIDCONNECTIONCHECKER_PROPERTIES);    Long backgroundValidationMinutes=getLongIfSetOrGetDefault(dataSourceNode,BACKGROUNDVALIDATIONMINUTES,null);    boolean backgroundValidation=getBooleanIfSetOrGetDefault(dataSourceNode,BACKGROUNDVALIDATION,false);    boolean useFastFail=getBooleanIfSetOrGetDefault(dataSourceNode,USE_FAST_FAIL,false);    boolean validateOnMatch=getBooleanIfSetOrGetDefault(dataSourceNode,VALIDATEONMATCH,false);    boolean spy=getBooleanIfSetOrGetDefault(dataSourceNode,SPY,false);    Validation validation=new ValidationImpl(backgroundValidation,backgroundValidationMinutes,useFastFail,validConnectionChecker,checkValidConnectionSql,validateOnMatch,staleConnectionChecker,exceptionSorter);    DataSource ds=new DataSourceImpl(connectionUrl,driverClass,module,transactionIsolation,connectionProperties,timeOut,security,statement,validation,urlDelimiter,urlSelectorStrategyClassName,newConnectionSql,useJavaContext,poolName,enabled,jndiName,spy,pool);    datasourceList.add(ds);  }} @TO@ ThenBody:{  for (  ModelNode dataSourceNode : operation.get(DATASOURCES).asList()) {    Map<String,String> connectionProperties;    if (dataSourceNode.has(CONNECTION_PROPERTIES)) {      connectionProperties=new HashMap<String,String>(dataSourceNode.get(CONNECTION_PROPERTIES).asList().size());      for (      ModelNode property : dataSourceNode.get(CONNECTION_PROPERTIES).asList()) {        connectionProperties.put(property.asProperty().getName(),property.asString());      }    } else {      connectionProperties=Collections.EMPTY_MAP;    }    String connectionUrl=getStringIfSetOrGetDefault(dataSourceNode,CONNECTION_URL,null);    String driverClass=getStringIfSetOrGetDefault(dataSourceNode,DRIVER_CLASS,null);    String jndiName=getStringIfSetOrGetDefault(dataSourceNode,JNDINAME,null);    String module=getStringIfSetOrGetDefault(dataSourceNode,MODULE,null);    String newConnectionSql=getStringIfSetOrGetDefault(dataSourceNode,NEW_CONNECTION_SQL,null);    String poolName=getStringIfSetOrGetDefault(dataSourceNode,POOLNAME,null);    String urlDelimiter=getStringIfSetOrGetDefault(dataSourceNode,URL_DELIMITER,null);    String urlSelectorStrategyClassName=getStringIfSetOrGetDefault(dataSourceNode,URL_SELECTOR_STRATEGY_CLASS_NAME,null);    boolean useJavaContext=getBooleanIfSetOrGetDefault(dataSourceNode,USE_JAVA_CONTEXT,false);    boolean enabled=getBooleanIfSetOrGetDefault(dataSourceNode,ENABLED,false);    Integer maxPoolSize=getIntIfSetOrGetDefault(dataSourceNode,MAX_POOL_SIZE,null);    Integer minPoolSize=getIntIfSetOrGetDefault(dataSourceNode,MIN_POOL_SIZE,null);    boolean prefill=getBooleanIfSetOrGetDefault(dataSourceNode,POOL_PREFILL,false);    boolean useStrictMin=getBooleanIfSetOrGetDefault(dataSourceNode,POOL_USE_STRICT_MIN,false);    CommonPool pool=new CommonPoolImpl(minPoolSize,maxPoolSize,prefill,useStrictMin);    String username=getStringIfSetOrGetDefault(dataSourceNode,USERNAME,null);    String password=getStringIfSetOrGetDefault(dataSourceNode,PASSWORD,null);    String securityDomain=getStringIfSetOrGetDefault(dataSourceNode,SECURITY_DOMAIN,null);    DsSecurity security=new DsSecurityImpl(username,password,securityDomain);    boolean sharePreparedStatements=getBooleanIfSetOrGetDefault(dataSourceNode,USE_JAVA_CONTEXT,false);    Long preparedStatementsCacheSize=getLongIfSetOrGetDefault(dataSourceNode,PREPAREDSTATEMENTSCACHESIZE,null);    TrackStatementsEnum trackStatements=dataSourceNode.hasDefined(TRACKSTATEMENTS) ? TrackStatementsEnum.valueOf(dataSourceNode.get(TRACKSTATEMENTS).asString()) : TrackStatementsEnum.NOWARN;    Statement statement=new StatementImpl(sharePreparedStatements,preparedStatementsCacheSize,trackStatements);    Integer allocationRetry=getIntIfSetOrGetDefault(dataSourceNode,ALLOCATION_RETRY,null);    Long allocationRetryWaitMillis=getLongIfSetOrGetDefault(dataSourceNode,ALLOCATION_RETRY_WAIT_MILLIS,null);    Long blockingTimeoutMillis=getLongIfSetOrGetDefault(dataSourceNode,BLOCKING_TIMEOUT_WAIT_MILLIS,null);    Long idleTimeoutMinutes=getLongIfSetOrGetDefault(dataSourceNode,IDLETIMEOUTMINUTES,null);    Long queryTimeout=getLongIfSetOrGetDefault(dataSourceNode,QUERYTIMEOUT,null);    Integer xaResourceTimeout=getIntIfSetOrGetDefault(dataSourceNode,XA_RESOURCE_TIMEOUT,null);    Long useTryLock=getLongIfSetOrGetDefault(dataSourceNode,USETRYLOCK,null);    boolean setTxQuertTimeout=getBooleanIfSetOrGetDefault(dataSourceNode,SETTXQUERYTIMEOUT,false);    TimeOut timeOut=new TimeOutImpl(blockingTimeoutMillis,idleTimeoutMinutes,allocationRetry,allocationRetryWaitMillis,xaResourceTimeout,setTxQuertTimeout,queryTimeout,useTryLock);    TransactionIsolation transactionIsolation=dataSourceNode.has(TRANSACTION_ISOLOATION) ? TransactionIsolation.valueOf(dataSourceNode.get(TRANSACTION_ISOLOATION).asString()) : null;    String checkValidConnectionSql=getStringIfSetOrGetDefault(dataSourceNode,CHECKVALIDCONNECTIONSQL,null);    JdbcAdapterExtension exceptionSorter=extractJdbcAdapterExtension(dataSourceNode,EXCEPTIONSORTERCLASSNAME,EXCEPTIONSORTER_PROPERTIES);    JdbcAdapterExtension staleConnectionChecker=extractJdbcAdapterExtension(dataSourceNode,STALECONNECTIONCHECKERCLASSNAME,STALECONNECTIONCHECKER_PROPERTIES);    JdbcAdapterExtension validConnectionChecker=extractJdbcAdapterExtension(dataSourceNode,VALIDCONNECTIONCHECKERCLASSNAME,VALIDCONNECTIONCHECKER_PROPERTIES);    Long backgroundValidationMinutes=getLongIfSetOrGetDefault(dataSourceNode,BACKGROUNDVALIDATIONMINUTES,null);    boolean backgroundValidation=getBooleanIfSetOrGetDefault(dataSourceNode,BACKGROUNDVALIDATION,false);    boolean useFastFail=getBooleanIfSetOrGetDefault(dataSourceNode,USE_FAST_FAIL,false);    boolean validateOnMatch=getBooleanIfSetOrGetDefault(dataSourceNode,VALIDATEONMATCH,false);    boolean spy=getBooleanIfSetOrGetDefault(dataSourceNode,SPY,false);    Validation validation=new ValidationImpl(backgroundValidation,backgroundValidationMinutes,useFastFail,validConnectionChecker,checkValidConnectionSql,validateOnMatch,staleConnectionChecker,exceptionSorter);    DataSource ds=new DataSourceImpl(connectionUrl,driverClass,module,transactionIsolation,connectionProperties,timeOut,security,statement,validation,urlDelimiter,urlSelectorStrategyClassName,newConnectionSql,useJavaContext,poolName,enabled,jndiName,spy,pool);    datasourceList.add(ds);  }} @AT@ 12823 @LENGTH@ 6970
---------UPD EnhancedForStatement@@for (ModelNode dataSourceNode : operation.get(DATASOURCES).asList()) {  Map<String,String> connectionProperties;  if (dataSourceNode.has(CONNECTION_PROPERTIES)) {    connectionProperties=new HashMap<String,String>(dataSourceNode.get(CONNECTION_PROPERTIES).asList().size());    for (    ModelNode property : dataSourceNode.get(CONNECTION_PROPERTIES).asList()) {      connectionProperties.put(property.asProperty().getName(),property.asString());    }  } else {    connectionProperties=Collections.EMPTY_MAP;  }  String connectionUrl=getStringIfSetOrGetDefault(dataSourceNode,CONNECTION_URL,null);  String driverClass=getStringIfSetOrGetDefault(dataSourceNode,DRIVER_CLASS,null);  String jndiName=getStringIfSetOrGetDefault(dataSourceNode,JNDINAME,null);  String module=getStringIfSetOrGetDefault(dataSourceNode,MODULE,null);  String newConnectionSql=getStringIfSetOrGetDefault(dataSourceNode,NEW_CONNECTION_SQL,null);  String poolName=getStringIfSetOrGetDefault(dataSourceNode,POOLNAME,null);  String urlDelimiter=getStringIfSetOrGetDefault(dataSourceNode,URL_DELIMITER,null);  String urlSelectorStrategyClassName=getStringIfSetOrGetDefault(dataSourceNode,URL_SELECTOR_STRATEGY_CLASS_NAME,null);  boolean useJavaContext=getBooleanIfSetOrGetDefault(dataSourceNode,USE_JAVA_CONTEXT,false);  boolean enabled=getBooleanIfSetOrGetDefault(dataSourceNode,ENABLED,false);  Integer maxPoolSize=getIntIfSetOrGetDefault(dataSourceNode,MAX_POOL_SIZE,null);  Integer minPoolSize=getIntIfSetOrGetDefault(dataSourceNode,MIN_POOL_SIZE,null);  boolean prefill=getBooleanIfSetOrGetDefault(dataSourceNode,POOL_PREFILL,false);  boolean useStrictMin=getBooleanIfSetOrGetDefault(dataSourceNode,POOL_USE_STRICT_MIN,false);  CommonPool pool=new CommonPoolImpl(minPoolSize,maxPoolSize,prefill,useStrictMin);  String username=getStringIfSetOrGetDefault(dataSourceNode,USERNAME,null);  String password=getStringIfSetOrGetDefault(dataSourceNode,PASSWORD,null);  String securityDomain=getStringIfSetOrGetDefault(dataSourceNode,SECURITY_DOMAIN,null);  DsSecurity security=new DsSecurityImpl(username,password,securityDomain);  boolean sharePreparedStatements=getBooleanIfSetOrGetDefault(dataSourceNode,USE_JAVA_CONTEXT,false);  Long preparedStatementsCacheSize=getLongIfSetOrGetDefault(dataSourceNode,PREPAREDSTATEMENTSCACHESIZE,null);  TrackStatementsEnum trackStatements=dataSourceNode.hasDefined(TRACKSTATEMENTS) ? TrackStatementsEnum.valueOf(dataSourceNode.get(TRACKSTATEMENTS).asString()) : TrackStatementsEnum.NOWARN;  Statement statement=new StatementImpl(sharePreparedStatements,preparedStatementsCacheSize,trackStatements);  Integer allocationRetry=getIntIfSetOrGetDefault(dataSourceNode,ALLOCATION_RETRY,null);  Long allocationRetryWaitMillis=getLongIfSetOrGetDefault(dataSourceNode,ALLOCATION_RETRY_WAIT_MILLIS,null);  Long blockingTimeoutMillis=getLongIfSetOrGetDefault(dataSourceNode,BLOCKING_TIMEOUT_WAIT_MILLIS,null);  Long idleTimeoutMinutes=getLongIfSetOrGetDefault(dataSourceNode,IDLETIMEOUTMINUTES,null);  Long queryTimeout=getLongIfSetOrGetDefault(dataSourceNode,QUERYTIMEOUT,null);  Integer xaResourceTimeout=getIntIfSetOrGetDefault(dataSourceNode,XA_RESOURCE_TIMEOUT,null);  Long useTryLock=getLongIfSetOrGetDefault(dataSourceNode,USETRYLOCK,null);  boolean setTxQuertTimeout=getBooleanIfSetOrGetDefault(dataSourceNode,SETTXQUERTTIMEOUT,false);  TimeOut timeOut=new TimeOutImpl(blockingTimeoutMillis,idleTimeoutMinutes,allocationRetry,allocationRetryWaitMillis,xaResourceTimeout,setTxQuertTimeout,queryTimeout,useTryLock);  TransactionIsolation transactionIsolation=dataSourceNode.has(TRANSACTION_ISOLOATION) ? TransactionIsolation.valueOf(dataSourceNode.get(TRANSACTION_ISOLOATION).asString()) : null;  String checkValidConnectionSql=getStringIfSetOrGetDefault(dataSourceNode,CHECKVALIDCONNECTIONSQL,null);  JdbcAdapterExtension exceptionSorter=extractJdbcAdapterExtension(dataSourceNode,EXCEPTIONSORTERCLASSNAME,EXCEPTIONSORTER_PROPERTIES);  JdbcAdapterExtension staleConnectionChecker=extractJdbcAdapterExtension(dataSourceNode,STALECONNECTIONCHECKERCLASSNAME,STALECONNECTIONCHECKER_PROPERTIES);  JdbcAdapterExtension validConnectionChecker=extractJdbcAdapterExtension(dataSourceNode,VALIDCONNECTIONCHECKERCLASSNAME,VALIDCONNECTIONCHECKER_PROPERTIES);  Long backgroundValidationMinutes=getLongIfSetOrGetDefault(dataSourceNode,BACKGROUNDVALIDATIONMINUTES,null);  boolean backgroundValidation=getBooleanIfSetOrGetDefault(dataSourceNode,BACKGROUNDVALIDATION,false);  boolean useFastFail=getBooleanIfSetOrGetDefault(dataSourceNode,USE_FAST_FAIL,false);  boolean validateOnMatch=getBooleanIfSetOrGetDefault(dataSourceNode,VALIDATEONMATCH,false);  boolean spy=getBooleanIfSetOrGetDefault(dataSourceNode,SPY,false);  Validation validation=new ValidationImpl(backgroundValidation,backgroundValidationMinutes,useFastFail,validConnectionChecker,checkValidConnectionSql,validateOnMatch,staleConnectionChecker,exceptionSorter);  DataSource ds=new DataSourceImpl(connectionUrl,driverClass,module,transactionIsolation,connectionProperties,timeOut,security,statement,validation,urlDelimiter,urlSelectorStrategyClassName,newConnectionSql,useJavaContext,poolName,enabled,jndiName,spy,pool);  datasourceList.add(ds);} @TO@ for (ModelNode dataSourceNode : operation.get(DATASOURCES).asList()) {  Map<String,String> connectionProperties;  if (dataSourceNode.has(CONNECTION_PROPERTIES)) {    connectionProperties=new HashMap<String,String>(dataSourceNode.get(CONNECTION_PROPERTIES).asList().size());    for (    ModelNode property : dataSourceNode.get(CONNECTION_PROPERTIES).asList()) {      connectionProperties.put(property.asProperty().getName(),property.asString());    }  } else {    connectionProperties=Collections.EMPTY_MAP;  }  String connectionUrl=getStringIfSetOrGetDefault(dataSourceNode,CONNECTION_URL,null);  String driverClass=getStringIfSetOrGetDefault(dataSourceNode,DRIVER_CLASS,null);  String jndiName=getStringIfSetOrGetDefault(dataSourceNode,JNDINAME,null);  String module=getStringIfSetOrGetDefault(dataSourceNode,MODULE,null);  String newConnectionSql=getStringIfSetOrGetDefault(dataSourceNode,NEW_CONNECTION_SQL,null);  String poolName=getStringIfSetOrGetDefault(dataSourceNode,POOLNAME,null);  String urlDelimiter=getStringIfSetOrGetDefault(dataSourceNode,URL_DELIMITER,null);  String urlSelectorStrategyClassName=getStringIfSetOrGetDefault(dataSourceNode,URL_SELECTOR_STRATEGY_CLASS_NAME,null);  boolean useJavaContext=getBooleanIfSetOrGetDefault(dataSourceNode,USE_JAVA_CONTEXT,false);  boolean enabled=getBooleanIfSetOrGetDefault(dataSourceNode,ENABLED,false);  Integer maxPoolSize=getIntIfSetOrGetDefault(dataSourceNode,MAX_POOL_SIZE,null);  Integer minPoolSize=getIntIfSetOrGetDefault(dataSourceNode,MIN_POOL_SIZE,null);  boolean prefill=getBooleanIfSetOrGetDefault(dataSourceNode,POOL_PREFILL,false);  boolean useStrictMin=getBooleanIfSetOrGetDefault(dataSourceNode,POOL_USE_STRICT_MIN,false);  CommonPool pool=new CommonPoolImpl(minPoolSize,maxPoolSize,prefill,useStrictMin);  String username=getStringIfSetOrGetDefault(dataSourceNode,USERNAME,null);  String password=getStringIfSetOrGetDefault(dataSourceNode,PASSWORD,null);  String securityDomain=getStringIfSetOrGetDefault(dataSourceNode,SECURITY_DOMAIN,null);  DsSecurity security=new DsSecurityImpl(username,password,securityDomain);  boolean sharePreparedStatements=getBooleanIfSetOrGetDefault(dataSourceNode,USE_JAVA_CONTEXT,false);  Long preparedStatementsCacheSize=getLongIfSetOrGetDefault(dataSourceNode,PREPAREDSTATEMENTSCACHESIZE,null);  TrackStatementsEnum trackStatements=dataSourceNode.hasDefined(TRACKSTATEMENTS) ? TrackStatementsEnum.valueOf(dataSourceNode.get(TRACKSTATEMENTS).asString()) : TrackStatementsEnum.NOWARN;  Statement statement=new StatementImpl(sharePreparedStatements,preparedStatementsCacheSize,trackStatements);  Integer allocationRetry=getIntIfSetOrGetDefault(dataSourceNode,ALLOCATION_RETRY,null);  Long allocationRetryWaitMillis=getLongIfSetOrGetDefault(dataSourceNode,ALLOCATION_RETRY_WAIT_MILLIS,null);  Long blockingTimeoutMillis=getLongIfSetOrGetDefault(dataSourceNode,BLOCKING_TIMEOUT_WAIT_MILLIS,null);  Long idleTimeoutMinutes=getLongIfSetOrGetDefault(dataSourceNode,IDLETIMEOUTMINUTES,null);  Long queryTimeout=getLongIfSetOrGetDefault(dataSourceNode,QUERYTIMEOUT,null);  Integer xaResourceTimeout=getIntIfSetOrGetDefault(dataSourceNode,XA_RESOURCE_TIMEOUT,null);  Long useTryLock=getLongIfSetOrGetDefault(dataSourceNode,USETRYLOCK,null);  boolean setTxQuertTimeout=getBooleanIfSetOrGetDefault(dataSourceNode,SETTXQUERYTIMEOUT,false);  TimeOut timeOut=new TimeOutImpl(blockingTimeoutMillis,idleTimeoutMinutes,allocationRetry,allocationRetryWaitMillis,xaResourceTimeout,setTxQuertTimeout,queryTimeout,useTryLock);  TransactionIsolation transactionIsolation=dataSourceNode.has(TRANSACTION_ISOLOATION) ? TransactionIsolation.valueOf(dataSourceNode.get(TRANSACTION_ISOLOATION).asString()) : null;  String checkValidConnectionSql=getStringIfSetOrGetDefault(dataSourceNode,CHECKVALIDCONNECTIONSQL,null);  JdbcAdapterExtension exceptionSorter=extractJdbcAdapterExtension(dataSourceNode,EXCEPTIONSORTERCLASSNAME,EXCEPTIONSORTER_PROPERTIES);  JdbcAdapterExtension staleConnectionChecker=extractJdbcAdapterExtension(dataSourceNode,STALECONNECTIONCHECKERCLASSNAME,STALECONNECTIONCHECKER_PROPERTIES);  JdbcAdapterExtension validConnectionChecker=extractJdbcAdapterExtension(dataSourceNode,VALIDCONNECTIONCHECKERCLASSNAME,VALIDCONNECTIONCHECKER_PROPERTIES);  Long backgroundValidationMinutes=getLongIfSetOrGetDefault(dataSourceNode,BACKGROUNDVALIDATIONMINUTES,null);  boolean backgroundValidation=getBooleanIfSetOrGetDefault(dataSourceNode,BACKGROUNDVALIDATION,false);  boolean useFastFail=getBooleanIfSetOrGetDefault(dataSourceNode,USE_FAST_FAIL,false);  boolean validateOnMatch=getBooleanIfSetOrGetDefault(dataSourceNode,VALIDATEONMATCH,false);  boolean spy=getBooleanIfSetOrGetDefault(dataSourceNode,SPY,false);  Validation validation=new ValidationImpl(backgroundValidation,backgroundValidationMinutes,useFastFail,validConnectionChecker,checkValidConnectionSql,validateOnMatch,staleConnectionChecker,exceptionSorter);  DataSource ds=new DataSourceImpl(connectionUrl,driverClass,module,transactionIsolation,connectionProperties,timeOut,security,statement,validation,urlDelimiter,urlSelectorStrategyClassName,newConnectionSql,useJavaContext,poolName,enabled,jndiName,spy,pool);  datasourceList.add(ds);} @AT@ 12841 @LENGTH@ 6938
------------UPD VariableDeclarationStatement@@boolean setTxQuertTimeout=getBooleanIfSetOrGetDefault(dataSourceNode,SETTXQUERTTIMEOUT,false); @TO@ boolean setTxQuertTimeout=getBooleanIfSetOrGetDefault(dataSourceNode,SETTXQUERYTIMEOUT,false); @AT@ 17154 @LENGTH@ 98
---------------UPD VariableDeclarationFragment@@setTxQuertTimeout=getBooleanIfSetOrGetDefault(dataSourceNode,SETTXQUERTTIMEOUT,false) @TO@ setTxQuertTimeout=getBooleanIfSetOrGetDefault(dataSourceNode,SETTXQUERYTIMEOUT,false) @AT@ 17162 @LENGTH@ 89
------------------UPD MethodInvocation@@getBooleanIfSetOrGetDefault(dataSourceNode,SETTXQUERTTIMEOUT,false) @TO@ getBooleanIfSetOrGetDefault(dataSourceNode,SETTXQUERYTIMEOUT,false) @AT@ 17182 @LENGTH@ 69
---------------------UPD SimpleName@@MethodName:getBooleanIfSetOrGetDefault:[dataSourceNode, SETTXQUERTTIMEOUT, false] @TO@ MethodName:getBooleanIfSetOrGetDefault:[dataSourceNode, SETTXQUERYTIMEOUT, false] @AT@ 17182 @LENGTH@ 69
------------------------UPD SimpleName@@SETTXQUERTTIMEOUT @TO@ SETTXQUERYTIMEOUT @AT@ 17226 @LENGTH@ 17
---UPD IfStatement@@if (operation.hasDefined(XA_DATASOURCES)) {  for (  ModelNode dataSourceNode : operation.get(XA_DATASOURCES).asList()) {    Map<String,String> xaDataSourceProperty=new HashMap<String,String>(dataSourceNode.get(XADATASOURCEPROPERTIES).asList().size());    for (    ModelNode property : dataSourceNode.get(XADATASOURCEPROPERTIES).asList()) {      xaDataSourceProperty.put(property.asProperty().getName(),property.asString());    }    String xaDataSourceClass=getStringIfSetOrGetDefault(dataSourceNode,XADATASOURCECLASS,null);    String jndiName=getStringIfSetOrGetDefault(dataSourceNode,JNDINAME,null);    String module=getStringIfSetOrGetDefault(dataSourceNode,MODULE,null);    String newConnectionSql=getStringIfSetOrGetDefault(dataSourceNode,NEW_CONNECTION_SQL,null);    String poolName=getStringIfSetOrGetDefault(dataSourceNode,POOLNAME,null);    String urlDelimiter=getStringIfSetOrGetDefault(dataSourceNode,URL_DELIMITER,null);    String urlSelectorStrategyClassName=getStringIfSetOrGetDefault(dataSourceNode,URL_SELECTOR_STRATEGY_CLASS_NAME,null);    boolean useJavaContext=getBooleanIfSetOrGetDefault(dataSourceNode,USE_JAVA_CONTEXT,false);    boolean enabled=getBooleanIfSetOrGetDefault(dataSourceNode,ENABLED,false);    Integer maxPoolSize=getIntIfSetOrGetDefault(dataSourceNode,MAX_POOL_SIZE,null);    Integer minPoolSize=getIntIfSetOrGetDefault(dataSourceNode,MIN_POOL_SIZE,null);    boolean prefill=getBooleanIfSetOrGetDefault(dataSourceNode,POOL_PREFILL,false);    boolean useStrictMin=getBooleanIfSetOrGetDefault(dataSourceNode,POOL_USE_STRICT_MIN,false);    boolean interleaving=getBooleanIfSetOrGetDefault(dataSourceNode,INTERLIVING,false);    boolean noTxSeparatePool=getBooleanIfSetOrGetDefault(dataSourceNode,NOTXSEPARATEPOOL,false);    boolean padXid=getBooleanIfSetOrGetDefault(dataSourceNode,PAD_XID,false);    boolean isSameRmOverride=getBooleanIfSetOrGetDefault(dataSourceNode,SAME_RM_OVERRIDE,false);    boolean wrapXaDataSource=getBooleanIfSetOrGetDefault(dataSourceNode,WRAP_XA_DATASOURCE,false);    CommonXaPool xaPool=new CommonXaPoolImpl(minPoolSize,maxPoolSize,prefill,useStrictMin,isSameRmOverride,interleaving,padXid,wrapXaDataSource,noTxSeparatePool);    String username=getStringIfSetOrGetDefault(dataSourceNode,USERNAME,null);    String password=getStringIfSetOrGetDefault(dataSourceNode,PASSWORD,null);    String securityDomain=getStringIfSetOrGetDefault(dataSourceNode,SECURITY_DOMAIN,null);    DsSecurity security=new DsSecurityImpl(username,password,securityDomain);    boolean sharePreparedStatements=dataSourceNode.has(SHAREPREPAREDSTATEMENTS) ? dataSourceNode.get(SHAREPREPAREDSTATEMENTS).asBoolean() : false;    Long preparedStatementsCacheSize=dataSourceNode.get(PREPAREDSTATEMENTSCACHESIZE).asLong();    TrackStatementsEnum trackStatements=TrackStatementsEnum.valueOf(dataSourceNode.get(TRACKSTATEMENTS).asString());    Statement statement=new StatementImpl(sharePreparedStatements,preparedStatementsCacheSize,trackStatements);    Integer allocationRetry=getIntIfSetOrGetDefault(dataSourceNode,ALLOCATION_RETRY,null);    Long allocationRetryWaitMillis=getLongIfSetOrGetDefault(dataSourceNode,ALLOCATION_RETRY_WAIT_MILLIS,null);    Long blockingTimeoutMillis=getLongIfSetOrGetDefault(dataSourceNode,BLOCKING_TIMEOUT_WAIT_MILLIS,null);    Long idleTimeoutMinutes=getLongIfSetOrGetDefault(dataSourceNode,IDLETIMEOUTMINUTES,null);    Long queryTimeout=getLongIfSetOrGetDefault(dataSourceNode,QUERYTIMEOUT,null);    Integer xaResourceTimeout=getIntIfSetOrGetDefault(dataSourceNode,XA_RESOURCE_TIMEOUT,null);    Long useTryLock=getLongIfSetOrGetDefault(dataSourceNode,USETRYLOCK,null);    boolean setTxQuertTimeout=getBooleanIfSetOrGetDefault(dataSourceNode,SETTXQUERTTIMEOUT,false);    TimeOut timeOut=new TimeOutImpl(blockingTimeoutMillis,idleTimeoutMinutes,allocationRetry,allocationRetryWaitMillis,xaResourceTimeout,setTxQuertTimeout,queryTimeout,useTryLock);    TransactionIsolation transactionIsolation=dataSourceNode.has(TRANSACTION_ISOLOATION) ? TransactionIsolation.valueOf(dataSourceNode.get(TRANSACTION_ISOLOATION).asString()) : null;    String checkValidConnectionSql=getStringIfSetOrGetDefault(dataSourceNode,CHECKVALIDCONNECTIONSQL,null);    JdbcAdapterExtension exceptionSorter=extractJdbcAdapterExtension(dataSourceNode,EXCEPTIONSORTERCLASSNAME,EXCEPTIONSORTER_PROPERTIES);    JdbcAdapterExtension staleConnectionChecker=extractJdbcAdapterExtension(dataSourceNode,STALECONNECTIONCHECKERCLASSNAME,STALECONNECTIONCHECKER_PROPERTIES);    JdbcAdapterExtension validConnectionChecker=extractJdbcAdapterExtension(dataSourceNode,VALIDCONNECTIONCHECKERCLASSNAME,VALIDCONNECTIONCHECKER_PROPERTIES);    Long backgroundValidationMinutes=getLongIfSetOrGetDefault(dataSourceNode,BACKGROUNDVALIDATIONMINUTES,null);    boolean backgroundValidation=getBooleanIfSetOrGetDefault(dataSourceNode,BACKGROUNDVALIDATION,false);    boolean useFastFail=getBooleanIfSetOrGetDefault(dataSourceNode,USE_FAST_FAIL,false);    boolean validateOnMatch=getBooleanIfSetOrGetDefault(dataSourceNode,VALIDATEONMATCH,false);    boolean spy=getBooleanIfSetOrGetDefault(dataSourceNode,SPY,false);    Validation validation=new ValidationImpl(backgroundValidation,backgroundValidationMinutes,useFastFail,validConnectionChecker,checkValidConnectionSql,validateOnMatch,staleConnectionChecker,exceptionSorter);    XaDataSource ds=new XADataSourceImpl(transactionIsolation,timeOut,security,statement,validation,urlDelimiter,urlSelectorStrategyClassName,useJavaContext,poolName,enabled,jndiName,spy,xaDataSourceProperty,xaDataSourceClass,module,newConnectionSql,xaPool);    xadatasourceList.add(ds);  }} @TO@ if (operation.hasDefined(XA_DATASOURCES)) {  for (  ModelNode dataSourceNode : operation.get(XA_DATASOURCES).asList()) {    Map<String,String> xaDataSourceProperty=new HashMap<String,String>(dataSourceNode.get(XADATASOURCEPROPERTIES).asList().size());    for (    ModelNode property : dataSourceNode.get(XADATASOURCEPROPERTIES).asList()) {      xaDataSourceProperty.put(property.asProperty().getName(),property.asString());    }    String xaDataSourceClass=getStringIfSetOrGetDefault(dataSourceNode,XADATASOURCECLASS,null);    String jndiName=getStringIfSetOrGetDefault(dataSourceNode,JNDINAME,null);    String module=getStringIfSetOrGetDefault(dataSourceNode,MODULE,null);    String newConnectionSql=getStringIfSetOrGetDefault(dataSourceNode,NEW_CONNECTION_SQL,null);    String poolName=getStringIfSetOrGetDefault(dataSourceNode,POOLNAME,null);    String urlDelimiter=getStringIfSetOrGetDefault(dataSourceNode,URL_DELIMITER,null);    String urlSelectorStrategyClassName=getStringIfSetOrGetDefault(dataSourceNode,URL_SELECTOR_STRATEGY_CLASS_NAME,null);    boolean useJavaContext=getBooleanIfSetOrGetDefault(dataSourceNode,USE_JAVA_CONTEXT,false);    boolean enabled=getBooleanIfSetOrGetDefault(dataSourceNode,ENABLED,false);    Integer maxPoolSize=getIntIfSetOrGetDefault(dataSourceNode,MAX_POOL_SIZE,null);    Integer minPoolSize=getIntIfSetOrGetDefault(dataSourceNode,MIN_POOL_SIZE,null);    boolean prefill=getBooleanIfSetOrGetDefault(dataSourceNode,POOL_PREFILL,false);    boolean useStrictMin=getBooleanIfSetOrGetDefault(dataSourceNode,POOL_USE_STRICT_MIN,false);    boolean interleaving=getBooleanIfSetOrGetDefault(dataSourceNode,INTERLIVING,false);    boolean noTxSeparatePool=getBooleanIfSetOrGetDefault(dataSourceNode,NOTXSEPARATEPOOL,false);    boolean padXid=getBooleanIfSetOrGetDefault(dataSourceNode,PAD_XID,false);    boolean isSameRmOverride=getBooleanIfSetOrGetDefault(dataSourceNode,SAME_RM_OVERRIDE,false);    boolean wrapXaDataSource=getBooleanIfSetOrGetDefault(dataSourceNode,WRAP_XA_DATASOURCE,false);    CommonXaPool xaPool=new CommonXaPoolImpl(minPoolSize,maxPoolSize,prefill,useStrictMin,isSameRmOverride,interleaving,padXid,wrapXaDataSource,noTxSeparatePool);    String username=getStringIfSetOrGetDefault(dataSourceNode,USERNAME,null);    String password=getStringIfSetOrGetDefault(dataSourceNode,PASSWORD,null);    String securityDomain=getStringIfSetOrGetDefault(dataSourceNode,SECURITY_DOMAIN,null);    DsSecurity security=new DsSecurityImpl(username,password,securityDomain);    boolean sharePreparedStatements=dataSourceNode.has(SHAREPREPAREDSTATEMENTS) ? dataSourceNode.get(SHAREPREPAREDSTATEMENTS).asBoolean() : false;    Long preparedStatementsCacheSize=dataSourceNode.get(PREPAREDSTATEMENTSCACHESIZE).asLong();    TrackStatementsEnum trackStatements=TrackStatementsEnum.valueOf(dataSourceNode.get(TRACKSTATEMENTS).asString());    Statement statement=new StatementImpl(sharePreparedStatements,preparedStatementsCacheSize,trackStatements);    Integer allocationRetry=getIntIfSetOrGetDefault(dataSourceNode,ALLOCATION_RETRY,null);    Long allocationRetryWaitMillis=getLongIfSetOrGetDefault(dataSourceNode,ALLOCATION_RETRY_WAIT_MILLIS,null);    Long blockingTimeoutMillis=getLongIfSetOrGetDefault(dataSourceNode,BLOCKING_TIMEOUT_WAIT_MILLIS,null);    Long idleTimeoutMinutes=getLongIfSetOrGetDefault(dataSourceNode,IDLETIMEOUTMINUTES,null);    Long queryTimeout=getLongIfSetOrGetDefault(dataSourceNode,QUERYTIMEOUT,null);    Integer xaResourceTimeout=getIntIfSetOrGetDefault(dataSourceNode,XA_RESOURCE_TIMEOUT,null);    Long useTryLock=getLongIfSetOrGetDefault(dataSourceNode,USETRYLOCK,null);    boolean setTxQuertTimeout=getBooleanIfSetOrGetDefault(dataSourceNode,SETTXQUERYTIMEOUT,false);    TimeOut timeOut=new TimeOutImpl(blockingTimeoutMillis,idleTimeoutMinutes,allocationRetry,allocationRetryWaitMillis,xaResourceTimeout,setTxQuertTimeout,queryTimeout,useTryLock);    TransactionIsolation transactionIsolation=dataSourceNode.has(TRANSACTION_ISOLOATION) ? TransactionIsolation.valueOf(dataSourceNode.get(TRANSACTION_ISOLOATION).asString()) : null;    String checkValidConnectionSql=getStringIfSetOrGetDefault(dataSourceNode,CHECKVALIDCONNECTIONSQL,null);    JdbcAdapterExtension exceptionSorter=extractJdbcAdapterExtension(dataSourceNode,EXCEPTIONSORTERCLASSNAME,EXCEPTIONSORTER_PROPERTIES);    JdbcAdapterExtension staleConnectionChecker=extractJdbcAdapterExtension(dataSourceNode,STALECONNECTIONCHECKERCLASSNAME,STALECONNECTIONCHECKER_PROPERTIES);    JdbcAdapterExtension validConnectionChecker=extractJdbcAdapterExtension(dataSourceNode,VALIDCONNECTIONCHECKERCLASSNAME,VALIDCONNECTIONCHECKER_PROPERTIES);    Long backgroundValidationMinutes=getLongIfSetOrGetDefault(dataSourceNode,BACKGROUNDVALIDATIONMINUTES,null);    boolean backgroundValidation=getBooleanIfSetOrGetDefault(dataSourceNode,BACKGROUNDVALIDATION,false);    boolean useFastFail=getBooleanIfSetOrGetDefault(dataSourceNode,USE_FAST_FAIL,false);    boolean validateOnMatch=getBooleanIfSetOrGetDefault(dataSourceNode,VALIDATEONMATCH,false);    boolean spy=getBooleanIfSetOrGetDefault(dataSourceNode,SPY,false);    Validation validation=new ValidationImpl(backgroundValidation,backgroundValidationMinutes,useFastFail,validConnectionChecker,checkValidConnectionSql,validateOnMatch,staleConnectionChecker,exceptionSorter);    XaDataSource ds=new XADataSourceImpl(transactionIsolation,timeOut,security,statement,validation,urlDelimiter,urlSelectorStrategyClassName,useJavaContext,poolName,enabled,jndiName,spy,xaDataSourceProperty,xaDataSourceClass,module,newConnectionSql,xaPool);    xadatasourceList.add(ds);  }} @AT@ 19807 @LENGTH@ 7257
------UPD Block@@ThenBody:{  for (  ModelNode dataSourceNode : operation.get(XA_DATASOURCES).asList()) {    Map<String,String> xaDataSourceProperty=new HashMap<String,String>(dataSourceNode.get(XADATASOURCEPROPERTIES).asList().size());    for (    ModelNode property : dataSourceNode.get(XADATASOURCEPROPERTIES).asList()) {      xaDataSourceProperty.put(property.asProperty().getName(),property.asString());    }    String xaDataSourceClass=getStringIfSetOrGetDefault(dataSourceNode,XADATASOURCECLASS,null);    String jndiName=getStringIfSetOrGetDefault(dataSourceNode,JNDINAME,null);    String module=getStringIfSetOrGetDefault(dataSourceNode,MODULE,null);    String newConnectionSql=getStringIfSetOrGetDefault(dataSourceNode,NEW_CONNECTION_SQL,null);    String poolName=getStringIfSetOrGetDefault(dataSourceNode,POOLNAME,null);    String urlDelimiter=getStringIfSetOrGetDefault(dataSourceNode,URL_DELIMITER,null);    String urlSelectorStrategyClassName=getStringIfSetOrGetDefault(dataSourceNode,URL_SELECTOR_STRATEGY_CLASS_NAME,null);    boolean useJavaContext=getBooleanIfSetOrGetDefault(dataSourceNode,USE_JAVA_CONTEXT,false);    boolean enabled=getBooleanIfSetOrGetDefault(dataSourceNode,ENABLED,false);    Integer maxPoolSize=getIntIfSetOrGetDefault(dataSourceNode,MAX_POOL_SIZE,null);    Integer minPoolSize=getIntIfSetOrGetDefault(dataSourceNode,MIN_POOL_SIZE,null);    boolean prefill=getBooleanIfSetOrGetDefault(dataSourceNode,POOL_PREFILL,false);    boolean useStrictMin=getBooleanIfSetOrGetDefault(dataSourceNode,POOL_USE_STRICT_MIN,false);    boolean interleaving=getBooleanIfSetOrGetDefault(dataSourceNode,INTERLIVING,false);    boolean noTxSeparatePool=getBooleanIfSetOrGetDefault(dataSourceNode,NOTXSEPARATEPOOL,false);    boolean padXid=getBooleanIfSetOrGetDefault(dataSourceNode,PAD_XID,false);    boolean isSameRmOverride=getBooleanIfSetOrGetDefault(dataSourceNode,SAME_RM_OVERRIDE,false);    boolean wrapXaDataSource=getBooleanIfSetOrGetDefault(dataSourceNode,WRAP_XA_DATASOURCE,false);    CommonXaPool xaPool=new CommonXaPoolImpl(minPoolSize,maxPoolSize,prefill,useStrictMin,isSameRmOverride,interleaving,padXid,wrapXaDataSource,noTxSeparatePool);    String username=getStringIfSetOrGetDefault(dataSourceNode,USERNAME,null);    String password=getStringIfSetOrGetDefault(dataSourceNode,PASSWORD,null);    String securityDomain=getStringIfSetOrGetDefault(dataSourceNode,SECURITY_DOMAIN,null);    DsSecurity security=new DsSecurityImpl(username,password,securityDomain);    boolean sharePreparedStatements=dataSourceNode.has(SHAREPREPAREDSTATEMENTS) ? dataSourceNode.get(SHAREPREPAREDSTATEMENTS).asBoolean() : false;    Long preparedStatementsCacheSize=dataSourceNode.get(PREPAREDSTATEMENTSCACHESIZE).asLong();    TrackStatementsEnum trackStatements=TrackStatementsEnum.valueOf(dataSourceNode.get(TRACKSTATEMENTS).asString());    Statement statement=new StatementImpl(sharePreparedStatements,preparedStatementsCacheSize,trackStatements);    Integer allocationRetry=getIntIfSetOrGetDefault(dataSourceNode,ALLOCATION_RETRY,null);    Long allocationRetryWaitMillis=getLongIfSetOrGetDefault(dataSourceNode,ALLOCATION_RETRY_WAIT_MILLIS,null);    Long blockingTimeoutMillis=getLongIfSetOrGetDefault(dataSourceNode,BLOCKING_TIMEOUT_WAIT_MILLIS,null);    Long idleTimeoutMinutes=getLongIfSetOrGetDefault(dataSourceNode,IDLETIMEOUTMINUTES,null);    Long queryTimeout=getLongIfSetOrGetDefault(dataSourceNode,QUERYTIMEOUT,null);    Integer xaResourceTimeout=getIntIfSetOrGetDefault(dataSourceNode,XA_RESOURCE_TIMEOUT,null);    Long useTryLock=getLongIfSetOrGetDefault(dataSourceNode,USETRYLOCK,null);    boolean setTxQuertTimeout=getBooleanIfSetOrGetDefault(dataSourceNode,SETTXQUERTTIMEOUT,false);    TimeOut timeOut=new TimeOutImpl(blockingTimeoutMillis,idleTimeoutMinutes,allocationRetry,allocationRetryWaitMillis,xaResourceTimeout,setTxQuertTimeout,queryTimeout,useTryLock);    TransactionIsolation transactionIsolation=dataSourceNode.has(TRANSACTION_ISOLOATION) ? TransactionIsolation.valueOf(dataSourceNode.get(TRANSACTION_ISOLOATION).asString()) : null;    String checkValidConnectionSql=getStringIfSetOrGetDefault(dataSourceNode,CHECKVALIDCONNECTIONSQL,null);    JdbcAdapterExtension exceptionSorter=extractJdbcAdapterExtension(dataSourceNode,EXCEPTIONSORTERCLASSNAME,EXCEPTIONSORTER_PROPERTIES);    JdbcAdapterExtension staleConnectionChecker=extractJdbcAdapterExtension(dataSourceNode,STALECONNECTIONCHECKERCLASSNAME,STALECONNECTIONCHECKER_PROPERTIES);    JdbcAdapterExtension validConnectionChecker=extractJdbcAdapterExtension(dataSourceNode,VALIDCONNECTIONCHECKERCLASSNAME,VALIDCONNECTIONCHECKER_PROPERTIES);    Long backgroundValidationMinutes=getLongIfSetOrGetDefault(dataSourceNode,BACKGROUNDVALIDATIONMINUTES,null);    boolean backgroundValidation=getBooleanIfSetOrGetDefault(dataSourceNode,BACKGROUNDVALIDATION,false);    boolean useFastFail=getBooleanIfSetOrGetDefault(dataSourceNode,USE_FAST_FAIL,false);    boolean validateOnMatch=getBooleanIfSetOrGetDefault(dataSourceNode,VALIDATEONMATCH,false);    boolean spy=getBooleanIfSetOrGetDefault(dataSourceNode,SPY,false);    Validation validation=new ValidationImpl(backgroundValidation,backgroundValidationMinutes,useFastFail,validConnectionChecker,checkValidConnectionSql,validateOnMatch,staleConnectionChecker,exceptionSorter);    XaDataSource ds=new XADataSourceImpl(transactionIsolation,timeOut,security,statement,validation,urlDelimiter,urlSelectorStrategyClassName,useJavaContext,poolName,enabled,jndiName,spy,xaDataSourceProperty,xaDataSourceClass,module,newConnectionSql,xaPool);    xadatasourceList.add(ds);  }} @TO@ ThenBody:{  for (  ModelNode dataSourceNode : operation.get(XA_DATASOURCES).asList()) {    Map<String,String> xaDataSourceProperty=new HashMap<String,String>(dataSourceNode.get(XADATASOURCEPROPERTIES).asList().size());    for (    ModelNode property : dataSourceNode.get(XADATASOURCEPROPERTIES).asList()) {      xaDataSourceProperty.put(property.asProperty().getName(),property.asString());    }    String xaDataSourceClass=getStringIfSetOrGetDefault(dataSourceNode,XADATASOURCECLASS,null);    String jndiName=getStringIfSetOrGetDefault(dataSourceNode,JNDINAME,null);    String module=getStringIfSetOrGetDefault(dataSourceNode,MODULE,null);    String newConnectionSql=getStringIfSetOrGetDefault(dataSourceNode,NEW_CONNECTION_SQL,null);    String poolName=getStringIfSetOrGetDefault(dataSourceNode,POOLNAME,null);    String urlDelimiter=getStringIfSetOrGetDefault(dataSourceNode,URL_DELIMITER,null);    String urlSelectorStrategyClassName=getStringIfSetOrGetDefault(dataSourceNode,URL_SELECTOR_STRATEGY_CLASS_NAME,null);    boolean useJavaContext=getBooleanIfSetOrGetDefault(dataSourceNode,USE_JAVA_CONTEXT,false);    boolean enabled=getBooleanIfSetOrGetDefault(dataSourceNode,ENABLED,false);    Integer maxPoolSize=getIntIfSetOrGetDefault(dataSourceNode,MAX_POOL_SIZE,null);    Integer minPoolSize=getIntIfSetOrGetDefault(dataSourceNode,MIN_POOL_SIZE,null);    boolean prefill=getBooleanIfSetOrGetDefault(dataSourceNode,POOL_PREFILL,false);    boolean useStrictMin=getBooleanIfSetOrGetDefault(dataSourceNode,POOL_USE_STRICT_MIN,false);    boolean interleaving=getBooleanIfSetOrGetDefault(dataSourceNode,INTERLIVING,false);    boolean noTxSeparatePool=getBooleanIfSetOrGetDefault(dataSourceNode,NOTXSEPARATEPOOL,false);    boolean padXid=getBooleanIfSetOrGetDefault(dataSourceNode,PAD_XID,false);    boolean isSameRmOverride=getBooleanIfSetOrGetDefault(dataSourceNode,SAME_RM_OVERRIDE,false);    boolean wrapXaDataSource=getBooleanIfSetOrGetDefault(dataSourceNode,WRAP_XA_DATASOURCE,false);    CommonXaPool xaPool=new CommonXaPoolImpl(minPoolSize,maxPoolSize,prefill,useStrictMin,isSameRmOverride,interleaving,padXid,wrapXaDataSource,noTxSeparatePool);    String username=getStringIfSetOrGetDefault(dataSourceNode,USERNAME,null);    String password=getStringIfSetOrGetDefault(dataSourceNode,PASSWORD,null);    String securityDomain=getStringIfSetOrGetDefault(dataSourceNode,SECURITY_DOMAIN,null);    DsSecurity security=new DsSecurityImpl(username,password,securityDomain);    boolean sharePreparedStatements=dataSourceNode.has(SHAREPREPAREDSTATEMENTS) ? dataSourceNode.get(SHAREPREPAREDSTATEMENTS).asBoolean() : false;    Long preparedStatementsCacheSize=dataSourceNode.get(PREPAREDSTATEMENTSCACHESIZE).asLong();    TrackStatementsEnum trackStatements=TrackStatementsEnum.valueOf(dataSourceNode.get(TRACKSTATEMENTS).asString());    Statement statement=new StatementImpl(sharePreparedStatements,preparedStatementsCacheSize,trackStatements);    Integer allocationRetry=getIntIfSetOrGetDefault(dataSourceNode,ALLOCATION_RETRY,null);    Long allocationRetryWaitMillis=getLongIfSetOrGetDefault(dataSourceNode,ALLOCATION_RETRY_WAIT_MILLIS,null);    Long blockingTimeoutMillis=getLongIfSetOrGetDefault(dataSourceNode,BLOCKING_TIMEOUT_WAIT_MILLIS,null);    Long idleTimeoutMinutes=getLongIfSetOrGetDefault(dataSourceNode,IDLETIMEOUTMINUTES,null);    Long queryTimeout=getLongIfSetOrGetDefault(dataSourceNode,QUERYTIMEOUT,null);    Integer xaResourceTimeout=getIntIfSetOrGetDefault(dataSourceNode,XA_RESOURCE_TIMEOUT,null);    Long useTryLock=getLongIfSetOrGetDefault(dataSourceNode,USETRYLOCK,null);    boolean setTxQuertTimeout=getBooleanIfSetOrGetDefault(dataSourceNode,SETTXQUERYTIMEOUT,false);    TimeOut timeOut=new TimeOutImpl(blockingTimeoutMillis,idleTimeoutMinutes,allocationRetry,allocationRetryWaitMillis,xaResourceTimeout,setTxQuertTimeout,queryTimeout,useTryLock);    TransactionIsolation transactionIsolation=dataSourceNode.has(TRANSACTION_ISOLOATION) ? TransactionIsolation.valueOf(dataSourceNode.get(TRANSACTION_ISOLOATION).asString()) : null;    String checkValidConnectionSql=getStringIfSetOrGetDefault(dataSourceNode,CHECKVALIDCONNECTIONSQL,null);    JdbcAdapterExtension exceptionSorter=extractJdbcAdapterExtension(dataSourceNode,EXCEPTIONSORTERCLASSNAME,EXCEPTIONSORTER_PROPERTIES);    JdbcAdapterExtension staleConnectionChecker=extractJdbcAdapterExtension(dataSourceNode,STALECONNECTIONCHECKERCLASSNAME,STALECONNECTIONCHECKER_PROPERTIES);    JdbcAdapterExtension validConnectionChecker=extractJdbcAdapterExtension(dataSourceNode,VALIDCONNECTIONCHECKERCLASSNAME,VALIDCONNECTIONCHECKER_PROPERTIES);    Long backgroundValidationMinutes=getLongIfSetOrGetDefault(dataSourceNode,BACKGROUNDVALIDATIONMINUTES,null);    boolean backgroundValidation=getBooleanIfSetOrGetDefault(dataSourceNode,BACKGROUNDVALIDATION,false);    boolean useFastFail=getBooleanIfSetOrGetDefault(dataSourceNode,USE_FAST_FAIL,false);    boolean validateOnMatch=getBooleanIfSetOrGetDefault(dataSourceNode,VALIDATEONMATCH,false);    boolean spy=getBooleanIfSetOrGetDefault(dataSourceNode,SPY,false);    Validation validation=new ValidationImpl(backgroundValidation,backgroundValidationMinutes,useFastFail,validConnectionChecker,checkValidConnectionSql,validateOnMatch,staleConnectionChecker,exceptionSorter);    XaDataSource ds=new XADataSourceImpl(transactionIsolation,timeOut,security,statement,validation,urlDelimiter,urlSelectorStrategyClassName,useJavaContext,poolName,enabled,jndiName,spy,xaDataSourceProperty,xaDataSourceClass,module,newConnectionSql,xaPool);    xadatasourceList.add(ds);  }} @AT@ 19849 @LENGTH@ 7215
---------UPD EnhancedForStatement@@for (ModelNode dataSourceNode : operation.get(XA_DATASOURCES).asList()) {  Map<String,String> xaDataSourceProperty=new HashMap<String,String>(dataSourceNode.get(XADATASOURCEPROPERTIES).asList().size());  for (  ModelNode property : dataSourceNode.get(XADATASOURCEPROPERTIES).asList()) {    xaDataSourceProperty.put(property.asProperty().getName(),property.asString());  }  String xaDataSourceClass=getStringIfSetOrGetDefault(dataSourceNode,XADATASOURCECLASS,null);  String jndiName=getStringIfSetOrGetDefault(dataSourceNode,JNDINAME,null);  String module=getStringIfSetOrGetDefault(dataSourceNode,MODULE,null);  String newConnectionSql=getStringIfSetOrGetDefault(dataSourceNode,NEW_CONNECTION_SQL,null);  String poolName=getStringIfSetOrGetDefault(dataSourceNode,POOLNAME,null);  String urlDelimiter=getStringIfSetOrGetDefault(dataSourceNode,URL_DELIMITER,null);  String urlSelectorStrategyClassName=getStringIfSetOrGetDefault(dataSourceNode,URL_SELECTOR_STRATEGY_CLASS_NAME,null);  boolean useJavaContext=getBooleanIfSetOrGetDefault(dataSourceNode,USE_JAVA_CONTEXT,false);  boolean enabled=getBooleanIfSetOrGetDefault(dataSourceNode,ENABLED,false);  Integer maxPoolSize=getIntIfSetOrGetDefault(dataSourceNode,MAX_POOL_SIZE,null);  Integer minPoolSize=getIntIfSetOrGetDefault(dataSourceNode,MIN_POOL_SIZE,null);  boolean prefill=getBooleanIfSetOrGetDefault(dataSourceNode,POOL_PREFILL,false);  boolean useStrictMin=getBooleanIfSetOrGetDefault(dataSourceNode,POOL_USE_STRICT_MIN,false);  boolean interleaving=getBooleanIfSetOrGetDefault(dataSourceNode,INTERLIVING,false);  boolean noTxSeparatePool=getBooleanIfSetOrGetDefault(dataSourceNode,NOTXSEPARATEPOOL,false);  boolean padXid=getBooleanIfSetOrGetDefault(dataSourceNode,PAD_XID,false);  boolean isSameRmOverride=getBooleanIfSetOrGetDefault(dataSourceNode,SAME_RM_OVERRIDE,false);  boolean wrapXaDataSource=getBooleanIfSetOrGetDefault(dataSourceNode,WRAP_XA_DATASOURCE,false);  CommonXaPool xaPool=new CommonXaPoolImpl(minPoolSize,maxPoolSize,prefill,useStrictMin,isSameRmOverride,interleaving,padXid,wrapXaDataSource,noTxSeparatePool);  String username=getStringIfSetOrGetDefault(dataSourceNode,USERNAME,null);  String password=getStringIfSetOrGetDefault(dataSourceNode,PASSWORD,null);  String securityDomain=getStringIfSetOrGetDefault(dataSourceNode,SECURITY_DOMAIN,null);  DsSecurity security=new DsSecurityImpl(username,password,securityDomain);  boolean sharePreparedStatements=dataSourceNode.has(SHAREPREPAREDSTATEMENTS) ? dataSourceNode.get(SHAREPREPAREDSTATEMENTS).asBoolean() : false;  Long preparedStatementsCacheSize=dataSourceNode.get(PREPAREDSTATEMENTSCACHESIZE).asLong();  TrackStatementsEnum trackStatements=TrackStatementsEnum.valueOf(dataSourceNode.get(TRACKSTATEMENTS).asString());  Statement statement=new StatementImpl(sharePreparedStatements,preparedStatementsCacheSize,trackStatements);  Integer allocationRetry=getIntIfSetOrGetDefault(dataSourceNode,ALLOCATION_RETRY,null);  Long allocationRetryWaitMillis=getLongIfSetOrGetDefault(dataSourceNode,ALLOCATION_RETRY_WAIT_MILLIS,null);  Long blockingTimeoutMillis=getLongIfSetOrGetDefault(dataSourceNode,BLOCKING_TIMEOUT_WAIT_MILLIS,null);  Long idleTimeoutMinutes=getLongIfSetOrGetDefault(dataSourceNode,IDLETIMEOUTMINUTES,null);  Long queryTimeout=getLongIfSetOrGetDefault(dataSourceNode,QUERYTIMEOUT,null);  Integer xaResourceTimeout=getIntIfSetOrGetDefault(dataSourceNode,XA_RESOURCE_TIMEOUT,null);  Long useTryLock=getLongIfSetOrGetDefault(dataSourceNode,USETRYLOCK,null);  boolean setTxQuertTimeout=getBooleanIfSetOrGetDefault(dataSourceNode,SETTXQUERTTIMEOUT,false);  TimeOut timeOut=new TimeOutImpl(blockingTimeoutMillis,idleTimeoutMinutes,allocationRetry,allocationRetryWaitMillis,xaResourceTimeout,setTxQuertTimeout,queryTimeout,useTryLock);  TransactionIsolation transactionIsolation=dataSourceNode.has(TRANSACTION_ISOLOATION) ? TransactionIsolation.valueOf(dataSourceNode.get(TRANSACTION_ISOLOATION).asString()) : null;  String checkValidConnectionSql=getStringIfSetOrGetDefault(dataSourceNode,CHECKVALIDCONNECTIONSQL,null);  JdbcAdapterExtension exceptionSorter=extractJdbcAdapterExtension(dataSourceNode,EXCEPTIONSORTERCLASSNAME,EXCEPTIONSORTER_PROPERTIES);  JdbcAdapterExtension staleConnectionChecker=extractJdbcAdapterExtension(dataSourceNode,STALECONNECTIONCHECKERCLASSNAME,STALECONNECTIONCHECKER_PROPERTIES);  JdbcAdapterExtension validConnectionChecker=extractJdbcAdapterExtension(dataSourceNode,VALIDCONNECTIONCHECKERCLASSNAME,VALIDCONNECTIONCHECKER_PROPERTIES);  Long backgroundValidationMinutes=getLongIfSetOrGetDefault(dataSourceNode,BACKGROUNDVALIDATIONMINUTES,null);  boolean backgroundValidation=getBooleanIfSetOrGetDefault(dataSourceNode,BACKGROUNDVALIDATION,false);  boolean useFastFail=getBooleanIfSetOrGetDefault(dataSourceNode,USE_FAST_FAIL,false);  boolean validateOnMatch=getBooleanIfSetOrGetDefault(dataSourceNode,VALIDATEONMATCH,false);  boolean spy=getBooleanIfSetOrGetDefault(dataSourceNode,SPY,false);  Validation validation=new ValidationImpl(backgroundValidation,backgroundValidationMinutes,useFastFail,validConnectionChecker,checkValidConnectionSql,validateOnMatch,staleConnectionChecker,exceptionSorter);  XaDataSource ds=new XADataSourceImpl(transactionIsolation,timeOut,security,statement,validation,urlDelimiter,urlSelectorStrategyClassName,useJavaContext,poolName,enabled,jndiName,spy,xaDataSourceProperty,xaDataSourceClass,module,newConnectionSql,xaPool);  xadatasourceList.add(ds);} @TO@ for (ModelNode dataSourceNode : operation.get(XA_DATASOURCES).asList()) {  Map<String,String> xaDataSourceProperty=new HashMap<String,String>(dataSourceNode.get(XADATASOURCEPROPERTIES).asList().size());  for (  ModelNode property : dataSourceNode.get(XADATASOURCEPROPERTIES).asList()) {    xaDataSourceProperty.put(property.asProperty().getName(),property.asString());  }  String xaDataSourceClass=getStringIfSetOrGetDefault(dataSourceNode,XADATASOURCECLASS,null);  String jndiName=getStringIfSetOrGetDefault(dataSourceNode,JNDINAME,null);  String module=getStringIfSetOrGetDefault(dataSourceNode,MODULE,null);  String newConnectionSql=getStringIfSetOrGetDefault(dataSourceNode,NEW_CONNECTION_SQL,null);  String poolName=getStringIfSetOrGetDefault(dataSourceNode,POOLNAME,null);  String urlDelimiter=getStringIfSetOrGetDefault(dataSourceNode,URL_DELIMITER,null);  String urlSelectorStrategyClassName=getStringIfSetOrGetDefault(dataSourceNode,URL_SELECTOR_STRATEGY_CLASS_NAME,null);  boolean useJavaContext=getBooleanIfSetOrGetDefault(dataSourceNode,USE_JAVA_CONTEXT,false);  boolean enabled=getBooleanIfSetOrGetDefault(dataSourceNode,ENABLED,false);  Integer maxPoolSize=getIntIfSetOrGetDefault(dataSourceNode,MAX_POOL_SIZE,null);  Integer minPoolSize=getIntIfSetOrGetDefault(dataSourceNode,MIN_POOL_SIZE,null);  boolean prefill=getBooleanIfSetOrGetDefault(dataSourceNode,POOL_PREFILL,false);  boolean useStrictMin=getBooleanIfSetOrGetDefault(dataSourceNode,POOL_USE_STRICT_MIN,false);  boolean interleaving=getBooleanIfSetOrGetDefault(dataSourceNode,INTERLIVING,false);  boolean noTxSeparatePool=getBooleanIfSetOrGetDefault(dataSourceNode,NOTXSEPARATEPOOL,false);  boolean padXid=getBooleanIfSetOrGetDefault(dataSourceNode,PAD_XID,false);  boolean isSameRmOverride=getBooleanIfSetOrGetDefault(dataSourceNode,SAME_RM_OVERRIDE,false);  boolean wrapXaDataSource=getBooleanIfSetOrGetDefault(dataSourceNode,WRAP_XA_DATASOURCE,false);  CommonXaPool xaPool=new CommonXaPoolImpl(minPoolSize,maxPoolSize,prefill,useStrictMin,isSameRmOverride,interleaving,padXid,wrapXaDataSource,noTxSeparatePool);  String username=getStringIfSetOrGetDefault(dataSourceNode,USERNAME,null);  String password=getStringIfSetOrGetDefault(dataSourceNode,PASSWORD,null);  String securityDomain=getStringIfSetOrGetDefault(dataSourceNode,SECURITY_DOMAIN,null);  DsSecurity security=new DsSecurityImpl(username,password,securityDomain);  boolean sharePreparedStatements=dataSourceNode.has(SHAREPREPAREDSTATEMENTS) ? dataSourceNode.get(SHAREPREPAREDSTATEMENTS).asBoolean() : false;  Long preparedStatementsCacheSize=dataSourceNode.get(PREPAREDSTATEMENTSCACHESIZE).asLong();  TrackStatementsEnum trackStatements=TrackStatementsEnum.valueOf(dataSourceNode.get(TRACKSTATEMENTS).asString());  Statement statement=new StatementImpl(sharePreparedStatements,preparedStatementsCacheSize,trackStatements);  Integer allocationRetry=getIntIfSetOrGetDefault(dataSourceNode,ALLOCATION_RETRY,null);  Long allocationRetryWaitMillis=getLongIfSetOrGetDefault(dataSourceNode,ALLOCATION_RETRY_WAIT_MILLIS,null);  Long blockingTimeoutMillis=getLongIfSetOrGetDefault(dataSourceNode,BLOCKING_TIMEOUT_WAIT_MILLIS,null);  Long idleTimeoutMinutes=getLongIfSetOrGetDefault(dataSourceNode,IDLETIMEOUTMINUTES,null);  Long queryTimeout=getLongIfSetOrGetDefault(dataSourceNode,QUERYTIMEOUT,null);  Integer xaResourceTimeout=getIntIfSetOrGetDefault(dataSourceNode,XA_RESOURCE_TIMEOUT,null);  Long useTryLock=getLongIfSetOrGetDefault(dataSourceNode,USETRYLOCK,null);  boolean setTxQuertTimeout=getBooleanIfSetOrGetDefault(dataSourceNode,SETTXQUERYTIMEOUT,false);  TimeOut timeOut=new TimeOutImpl(blockingTimeoutMillis,idleTimeoutMinutes,allocationRetry,allocationRetryWaitMillis,xaResourceTimeout,setTxQuertTimeout,queryTimeout,useTryLock);  TransactionIsolation transactionIsolation=dataSourceNode.has(TRANSACTION_ISOLOATION) ? TransactionIsolation.valueOf(dataSourceNode.get(TRANSACTION_ISOLOATION).asString()) : null;  String checkValidConnectionSql=getStringIfSetOrGetDefault(dataSourceNode,CHECKVALIDCONNECTIONSQL,null);  JdbcAdapterExtension exceptionSorter=extractJdbcAdapterExtension(dataSourceNode,EXCEPTIONSORTERCLASSNAME,EXCEPTIONSORTER_PROPERTIES);  JdbcAdapterExtension staleConnectionChecker=extractJdbcAdapterExtension(dataSourceNode,STALECONNECTIONCHECKERCLASSNAME,STALECONNECTIONCHECKER_PROPERTIES);  JdbcAdapterExtension validConnectionChecker=extractJdbcAdapterExtension(dataSourceNode,VALIDCONNECTIONCHECKERCLASSNAME,VALIDCONNECTIONCHECKER_PROPERTIES);  Long backgroundValidationMinutes=getLongIfSetOrGetDefault(dataSourceNode,BACKGROUNDVALIDATIONMINUTES,null);  boolean backgroundValidation=getBooleanIfSetOrGetDefault(dataSourceNode,BACKGROUNDVALIDATION,false);  boolean useFastFail=getBooleanIfSetOrGetDefault(dataSourceNode,USE_FAST_FAIL,false);  boolean validateOnMatch=getBooleanIfSetOrGetDefault(dataSourceNode,VALIDATEONMATCH,false);  boolean spy=getBooleanIfSetOrGetDefault(dataSourceNode,SPY,false);  Validation validation=new ValidationImpl(backgroundValidation,backgroundValidationMinutes,useFastFail,validConnectionChecker,checkValidConnectionSql,validateOnMatch,staleConnectionChecker,exceptionSorter);  XaDataSource ds=new XADataSourceImpl(transactionIsolation,timeOut,security,statement,validation,urlDelimiter,urlSelectorStrategyClassName,useJavaContext,poolName,enabled,jndiName,spy,xaDataSourceProperty,xaDataSourceClass,module,newConnectionSql,xaPool);  xadatasourceList.add(ds);} @AT@ 19867 @LENGTH@ 7183
------------UPD VariableDeclarationStatement@@boolean setTxQuertTimeout=getBooleanIfSetOrGetDefault(dataSourceNode,SETTXQUERTTIMEOUT,false); @TO@ boolean setTxQuertTimeout=getBooleanIfSetOrGetDefault(dataSourceNode,SETTXQUERYTIMEOUT,false); @AT@ 24453 @LENGTH@ 98
---------------UPD VariableDeclarationFragment@@setTxQuertTimeout=getBooleanIfSetOrGetDefault(dataSourceNode,SETTXQUERTTIMEOUT,false) @TO@ setTxQuertTimeout=getBooleanIfSetOrGetDefault(dataSourceNode,SETTXQUERYTIMEOUT,false) @AT@ 24461 @LENGTH@ 89
------------------UPD MethodInvocation@@getBooleanIfSetOrGetDefault(dataSourceNode,SETTXQUERTTIMEOUT,false) @TO@ getBooleanIfSetOrGetDefault(dataSourceNode,SETTXQUERYTIMEOUT,false) @AT@ 24481 @LENGTH@ 69
---------------------UPD SimpleName@@MethodName:getBooleanIfSetOrGetDefault:[dataSourceNode, SETTXQUERTTIMEOUT, false] @TO@ MethodName:getBooleanIfSetOrGetDefault:[dataSourceNode, SETTXQUERYTIMEOUT, false] @AT@ 24481 @LENGTH@ 69
------------------------UPD SimpleName@@SETTXQUERTTIMEOUT @TO@ SETTXQUERYTIMEOUT @AT@ 24525 @LENGTH@ 17


UPD MethodDeclaration@@public, void, MethodName:handle, ParsingContext ctx, OperationFormatException,  @TO@ public, void, MethodName:handle, ParsingContext ctx, CommandFormatException,  @AT@ 1724 @LENGTH@ 249
---UPD SimpleType@@OperationFormatException @TO@ CommandFormatException @AT@ 1790 @LENGTH@ 24


DEL MethodDeclaration@@void, MethodName:start, List<ServiceActivator> serviceActivators, ServerStartException,  @AT@ 1410 @LENGTH@ 76
---DEL PrimitiveType@@void @AT@ 1405 @LENGTH@ 4
---DEL SimpleName@@MethodName:start @AT@ 1410 @LENGTH@ 5
---DEL SingleVariableDeclaration@@List<ServiceActivator> serviceActivators @AT@ 1416 @LENGTH@ 40
------DEL ParameterizedType@@List<ServiceActivator> @AT@ 1416 @LENGTH@ 22
---------DEL SimpleType@@List @AT@ 1416 @LENGTH@ 4
---------DEL SimpleType@@ServiceActivator @AT@ 1421 @LENGTH@ 16
------DEL SimpleName@@serviceActivators @AT@ 1439 @LENGTH@ 17
---DEL SimpleType@@ServerStartException @AT@ 1465 @LENGTH@ 20


MOV VariableDeclarationStatement@@CachingConnectionFactory connectionFactory=new CachingConnectionFactory(); @TO@ MethodDeclaration@@public, Statement, MethodName:apply, Statement base, FrameworkMethod method, Object target,  @AT@ 3914 @LENGTH@ 76


UPD MethodDeclaration@@public, Collection<byte[]>, MethodName:keys, byte[] pattern,  @TO@ public, Set<byte[]>, MethodName:keys, byte[] pattern,  @AT@ 7056 @LENGTH@ 216
---UPD ParameterizedType@@Collection<byte[]> @TO@ Set<byte[]> @AT@ 7063 @LENGTH@ 18
------UPD SimpleType@@Collection @TO@ Set @AT@ 7063 @LENGTH@ 10


UPD MethodDeclaration@@public, static, void, MethodName:addService, final BatchBuilder batchBuilder,  @TO@ public, static, void, MethodName:addService, final ServiceTarget target,  @AT@ 2579 @LENGTH@ 385
---UPD SingleVariableDeclaration@@final BatchBuilder batchBuilder @TO@ final ServiceTarget target @AT@ 2609 @LENGTH@ 31
------UPD SimpleType@@BatchBuilder @TO@ ServiceTarget @AT@ 2615 @LENGTH@ 12
------UPD SimpleName@@batchBuilder @TO@ target @AT@ 2628 @LENGTH@ 12
---UPD ExpressionStatement@@MethodInvocation:batchBuilder.addService(SERVICE_NAME,service).addDependency(MBeanServerService.SERVICE_NAME,MBeanServer.class,service.injectedMBeanServer).setInitialMode(Mode.ACTIVE).install() @TO@ MethodInvocation:target.addService(SERVICE_NAME,service).addDependency(MBeanServerService.SERVICE_NAME,MBeanServer.class,service.injectedMBeanServer).setInitialMode(Mode.ACTIVE).install() @AT@ 2739 @LENGTH@ 219
------UPD MethodInvocation@@batchBuilder.addService(SERVICE_NAME,service).addDependency(MBeanServerService.SERVICE_NAME,MBeanServer.class,service.injectedMBeanServer).setInitialMode(Mode.ACTIVE).install() @TO@ target.addService(SERVICE_NAME,service).addDependency(MBeanServerService.SERVICE_NAME,MBeanServer.class,service.injectedMBeanServer).setInitialMode(Mode.ACTIVE).install() @AT@ 2739 @LENGTH@ 218
---------UPD SimpleName@@Name:batchBuilder @TO@ Name:target @AT@ 2739 @LENGTH@ 12


UPD ExpressionStatement@@MethodInvocation:serverGroupDeployments.registerOperationHandler(DeploymentRemoveHandler.OPERATION_NAME,DeploymentRemoveHandler.INSTANCE,DomainDescriptionProviders.SERVER_GROUP_DEPLOYMENT_REMOVE) @TO@ MethodInvocation:serverGroupDeployments.registerOperationHandler(DeploymentRemoveHandler.OPERATION_NAME,ServerGroupDeploymentRemoveHandler.INSTANCE,ServerGroupDeploymentRemoveHandler.INSTANCE) @AT@ 18338 @LENGTH@ 181
---UPD MethodInvocation@@serverGroupDeployments.registerOperationHandler(DeploymentRemoveHandler.OPERATION_NAME,DeploymentRemoveHandler.INSTANCE,DomainDescriptionProviders.SERVER_GROUP_DEPLOYMENT_REMOVE) @TO@ serverGroupDeployments.registerOperationHandler(DeploymentRemoveHandler.OPERATION_NAME,ServerGroupDeploymentRemoveHandler.INSTANCE,ServerGroupDeploymentRemoveHandler.INSTANCE) @AT@ 18338 @LENGTH@ 180
------UPD SimpleName@@MethodName:registerOperationHandler:[DeploymentRemoveHandler.OPERATION_NAME, DeploymentRemoveHandler.INSTANCE, DomainDescriptionProviders.SERVER_GROUP_DEPLOYMENT_REMOVE] @TO@ MethodName:registerOperationHandler:[DeploymentRemoveHandler.OPERATION_NAME, ServerGroupDeploymentRemoveHandler.INSTANCE, ServerGroupDeploymentRemoveHandler.INSTANCE] @AT@ 18361 @LENGTH@ 157
---------UPD QualifiedName@@DeploymentRemoveHandler.INSTANCE @TO@ ServerGroupDeploymentRemoveHandler.INSTANCE @AT@ 18426 @LENGTH@ 32
------------UPD SimpleName@@DeploymentRemoveHandler @TO@ ServerGroupDeploymentRemoveHandler @AT@ 18426 @LENGTH@ 23
---------UPD QualifiedName@@DomainDescriptionProviders.SERVER_GROUP_DEPLOYMENT_REMOVE @TO@ ServerGroupDeploymentRemoveHandler.INSTANCE @AT@ 18460 @LENGTH@ 57
------------UPD SimpleName@@DomainDescriptionProviders @TO@ ServerGroupDeploymentRemoveHandler @AT@ 18460 @LENGTH@ 26
------------UPD SimpleName@@SERVER_GROUP_DEPLOYMENT_REMOVE @TO@ INSTANCE @AT@ 18487 @LENGTH@ 30


UPD MethodDeclaration@@public, void, MethodName:handle, ParsingContext ctx, OperationFormatException,  @TO@ public, void, MethodName:handle, ParsingContext ctx, CommandFormatException,  @AT@ 1593 @LENGTH@ 151
---UPD SimpleType@@OperationFormatException @TO@ CommandFormatException @AT@ 1659 @LENGTH@ 24


UPD IfStatement@@if (masterResult.hasDefined(OUTCOME) && FAILED.equals(masterResult.get(OUTCOME).asString())) {  transaction.setRollbackOnly();  masterFailureResult=masterResult.hasDefined(FAILURE_DESCRIPTION) ? masterResult.get(FAILURE_DESCRIPTION) : new ModelNode().set("Unexplained failure");} else {  for (  Map.Entry<String,ModelNode> entry : hostResults.entrySet()) {    ModelNode hostResult=entry.getValue();    if (hostResult.hasDefined(OUTCOME) && FAILED.equals(hostResult.get(OUTCOME).asString())) {      if (hostFailureResults == null) {        transaction.setRollbackOnly();        hostFailureResults=new ModelNode();      }      ModelNode desc=hostResult.hasDefined(FAILURE_DESCRIPTION) ? hostResult.get(FAILURE_DESCRIPTION) : new ModelNode().set("Unexplained failure");      hostFailureResults.add(entry.getKey(),desc);    }  }} @TO@ if (masterResult != null && masterResult.hasDefined(OUTCOME) && FAILED.equals(masterResult.get(OUTCOME).asString())) {  transaction.setRollbackOnly();  masterFailureResult=masterResult.hasDefined(FAILURE_DESCRIPTION) ? masterResult.get(FAILURE_DESCRIPTION) : new ModelNode().set("Unexplained failure");} else {  for (  Map.Entry<String,ModelNode> entry : hostResults.entrySet()) {    ModelNode hostResult=entry.getValue();    if (hostResult.hasDefined(OUTCOME) && FAILED.equals(hostResult.get(OUTCOME).asString())) {      if (hostFailureResults == null) {        transaction.setRollbackOnly();        hostFailureResults=new ModelNode();      }      ModelNode desc=hostResult.hasDefined(FAILURE_DESCRIPTION) ? hostResult.get(FAILURE_DESCRIPTION) : new ModelNode().set("Unexplained failure");      hostFailureResults.add(entry.getKey(),desc);    }  }} @AT@ 11292 @LENGTH@ 1036
---UPD InfixExpression@@masterResult.hasDefined(OUTCOME) && FAILED.equals(masterResult.get(OUTCOME).asString()) @TO@ masterResult != null && masterResult.hasDefined(OUTCOME) && FAILED.equals(masterResult.get(OUTCOME).asString()) @AT@ 11296 @LENGTH@ 87
------INS InfixExpression@@masterResult != null && masterResult.hasDefined(OUTCOME) @TO@ InfixExpression@@masterResult.hasDefined(OUTCOME) && FAILED.equals(masterResult.get(OUTCOME).asString()) @AT@ 11593 @LENGTH@ 56
---------MOV MethodInvocation@@masterResult.hasDefined(OUTCOME) @TO@ InfixExpression@@masterResult != null && masterResult.hasDefined(OUTCOME) @AT@ 11296 @LENGTH@ 32
---------MOV Operator@@&& @TO@ InfixExpression@@masterResult != null && masterResult.hasDefined(OUTCOME) @AT@ 11328 @LENGTH@ 2
---------INS InfixExpression@@masterResult != null @TO@ InfixExpression@@masterResult != null && masterResult.hasDefined(OUTCOME) @AT@ 11593 @LENGTH@ 20
------------INS SimpleName@@masterResult @TO@ InfixExpression@@masterResult != null @AT@ 11593 @LENGTH@ 12
------------INS Operator@@!= @TO@ InfixExpression@@masterResult != null @AT@ 11605 @LENGTH@ 2
------------INS NullLiteral@@null @TO@ InfixExpression@@masterResult != null @AT@ 11609 @LENGTH@ 4
------INS Operator@@&& @TO@ InfixExpression@@masterResult.hasDefined(OUTCOME) && FAILED.equals(masterResult.get(OUTCOME).asString()) @AT@ 11649 @LENGTH@ 2


UPD SwitchStatement@@switch (action.getType()) {case ADD:{    if (!deployments.contains(uniqueName)) {      ModelNode step=configureDeploymentOperation(ADD,uniqueName,null);      step.get(RUNTIME_NAME).set(action.getNewContentFileName());      step.get("hash").set(action.getNewContentHash());      actionSteps.add(step);    }    for (    String group : serverGroups) {      ModelNode groupStep=configureDeploymentOperation(ADD,uniqueName,group);      actionSteps.add(groupStep);    }    break;  }case DEPLOY:{  for (  String group : serverGroups) {    ModelNode groupStep=configureDeploymentOperation(DEPLOYMENT_DEPLOY_OPERATION,uniqueName,group);    actionSteps.add(groupStep);  }  break;}case FULL_REPLACE:{ModelNode step=new ModelNode();step.get(OP).set(DEPLOYMENT_FULL_REPLACE_OPERATION);step.get(OP_ADDR).setEmptyList();step.get(NAME).set(uniqueName);step.get(RUNTIME_NAME).set(action.getNewContentFileName());step.get("hash").set(action.getNewContentHash());actionSteps.add(step);break;}case REDEPLOY:{for (String group : serverGroups) {ModelNode groupStep=configureDeploymentOperation(DEPLOYMENT_REDEPLOY_OPERATION,uniqueName,group);actionSteps.add(groupStep);}break;}case REMOVE:{for (String group : serverGroups) {ModelNode groupStep=configureDeploymentOperation(DEPLOYMENT_REMOVE_OPERATION,uniqueName,group);actionSteps.add(groupStep);}ModelNode step=configureDeploymentOperation(DEPLOYMENT_REMOVE_OPERATION,uniqueName,null);actionSteps.add(step);break;}case REPLACE:{for (String group : serverGroups) {ModelNode groupStep=new ModelNode();groupStep.get(OP).set(DEPLOYMENT_REPLACE_OPERATION);groupStep.get(OP_ADDR).add("server-group",group);groupStep.get(NAME).set(uniqueName);groupStep.get(TO_REPLACE).set(action.getReplacedDeploymentUnitUniqueName());actionSteps.add(groupStep);}break;}case UNDEPLOY:{for (String group : serverGroups) {ModelNode groupStep=configureDeploymentOperation(DEPLOYMENT_UNDEPLOY_OPERATION,uniqueName,group);actionSteps.add(groupStep);}break;}default :{throw new IllegalStateException("Unknown action type " + action.getType());}} @TO@ switch (action.getType()) {case ADD:{    if (!deployments.contains(uniqueName)) {      ModelNode step=configureDeploymentOperation(ADD,uniqueName,null);      step.get(RUNTIME_NAME).set(action.getNewContentFileName());      step.get(CONTENT).get(0).get("hash").set(action.getNewContentHash());      actionSteps.add(step);    }    for (    String group : serverGroups) {      ModelNode groupStep=configureDeploymentOperation(ADD,uniqueName,group);      actionSteps.add(groupStep);    }    break;  }case DEPLOY:{  for (  String group : serverGroups) {    ModelNode groupStep=configureDeploymentOperation(DEPLOYMENT_DEPLOY_OPERATION,uniqueName,group);    actionSteps.add(groupStep);  }  break;}case FULL_REPLACE:{ModelNode step=new ModelNode();step.get(OP).set(DEPLOYMENT_FULL_REPLACE_OPERATION);step.get(OP_ADDR).setEmptyList();step.get(NAME).set(uniqueName);step.get(RUNTIME_NAME).set(action.getNewContentFileName());step.get(CONTENT).get(0).get("hash").set(action.getNewContentHash());actionSteps.add(step);break;}case REDEPLOY:{for (String group : serverGroups) {ModelNode groupStep=configureDeploymentOperation(DEPLOYMENT_REDEPLOY_OPERATION,uniqueName,group);actionSteps.add(groupStep);}break;}case REMOVE:{for (String group : serverGroups) {ModelNode groupStep=configureDeploymentOperation(DEPLOYMENT_REMOVE_OPERATION,uniqueName,group);actionSteps.add(groupStep);}ModelNode step=configureDeploymentOperation(DEPLOYMENT_REMOVE_OPERATION,uniqueName,null);actionSteps.add(step);break;}case REPLACE:{for (String group : serverGroups) {ModelNode groupStep=new ModelNode();groupStep.get(OP).set(DEPLOYMENT_REPLACE_OPERATION);groupStep.get(OP_ADDR).add("server-group",group);groupStep.get(NAME).set(uniqueName);groupStep.get(TO_REPLACE).set(action.getReplacedDeploymentUnitUniqueName());actionSteps.add(groupStep);}break;}case UNDEPLOY:{for (String group : serverGroups) {ModelNode groupStep=configureDeploymentOperation(DEPLOYMENT_UNDEPLOY_OPERATION,uniqueName,group);actionSteps.add(groupStep);}break;}default :{throw new IllegalStateException("Unknown action type " + action.getType());}} @AT@ 7450 @LENGTH@ 3302
---UPD IfStatement@@if (!deployments.contains(uniqueName)) {  ModelNode step=configureDeploymentOperation(ADD,uniqueName,null);  step.get(RUNTIME_NAME).set(action.getNewContentFileName());  step.get("hash").set(action.getNewContentHash());  actionSteps.add(step);} @TO@ if (!deployments.contains(uniqueName)) {  ModelNode step=configureDeploymentOperation(ADD,uniqueName,null);  step.get(RUNTIME_NAME).set(action.getNewContentFileName());  step.get(CONTENT).get(0).get("hash").set(action.getNewContentHash());  actionSteps.add(step);} @AT@ 7518 @LENGTH@ 393
------UPD Block@@ThenBody:{  ModelNode step=configureDeploymentOperation(ADD,uniqueName,null);  step.get(RUNTIME_NAME).set(action.getNewContentFileName());  step.get("hash").set(action.getNewContentHash());  actionSteps.add(step);} @TO@ ThenBody:{  ModelNode step=configureDeploymentOperation(ADD,uniqueName,null);  step.get(RUNTIME_NAME).set(action.getNewContentFileName());  step.get(CONTENT).get(0).get("hash").set(action.getNewContentHash());  actionSteps.add(step);} @AT@ 7557 @LENGTH@ 354
---------UPD ExpressionStatement@@MethodInvocation:step.get("hash").set(action.getNewContentHash()) @TO@ MethodInvocation:step.get(CONTENT).get(0).get("hash").set(action.getNewContentHash()) @AT@ 7801 @LENGTH@ 49
------------UPD MethodInvocation@@step.get("hash").set(action.getNewContentHash()) @TO@ step.get(CONTENT).get(0).get("hash").set(action.getNewContentHash()) @AT@ 7801 @LENGTH@ 48
---------------INS MethodInvocation@@MethodName:get:[0] @TO@ MethodInvocation@@step.get("hash").set(action.getNewContentHash()) @AT@ 7879 @LENGTH@ 24
------------------INS NumberLiteral@@0 @TO@ MethodInvocation@@MethodName:get:[0] @AT@ 7901 @LENGTH@ 1
---------------INS MethodInvocation@@MethodName:get:[CONTENT] @TO@ MethodInvocation@@step.get("hash").set(action.getNewContentHash()) @AT@ 7879 @LENGTH@ 17
------------------INS SimpleName@@CONTENT @TO@ MethodInvocation@@MethodName:get:[CONTENT] @AT@ 7888 @LENGTH@ 7
---UPD ExpressionStatement@@MethodInvocation:step.get("hash").set(action.getNewContentHash()) @TO@ MethodInvocation:step.get(CONTENT).get(0).get("hash").set(action.getNewContentHash()) @AT@ 8807 @LENGTH@ 49
------UPD MethodInvocation@@step.get("hash").set(action.getNewContentHash()) @TO@ step.get(CONTENT).get(0).get("hash").set(action.getNewContentHash()) @AT@ 8807 @LENGTH@ 48
---------INS MethodInvocation@@MethodName:get:[0] @TO@ MethodInvocation@@step.get("hash").set(action.getNewContentHash()) @AT@ 8905 @LENGTH@ 24
------------INS NumberLiteral@@0 @TO@ MethodInvocation@@MethodName:get:[0] @AT@ 8927 @LENGTH@ 1
---------INS MethodInvocation@@MethodName:get:[CONTENT] @TO@ MethodInvocation@@step.get("hash").set(action.getNewContentHash()) @AT@ 8905 @LENGTH@ 17
------------INS SimpleName@@CONTENT @TO@ MethodInvocation@@MethodName:get:[CONTENT] @AT@ 8914 @LENGTH@ 7


UPD MethodDeclaration@@public, boolean, MethodName:isPresent, ParsedArguments args,  @TO@ public, boolean, MethodName:isPresent, ParsedArguments args, CommandFormatException,  @AT@ 4700 @LENGTH@ 428
---INS SimpleType@@CommandFormatException @TO@ MethodDeclaration@@public, boolean, MethodName:isPresent, ParsedArguments args,  @AT@ 4754 @LENGTH@ 22


UPD MethodDeclaration@@public, boolean, MethodName:canAppearNext, CommandContext ctx,  @TO@ public, boolean, MethodName:canAppearNext, CommandContext ctx, CommandFormatException,  @AT@ 2384 @LENGTH@ 207
---INS SimpleType@@CommandFormatException @TO@ MethodDeclaration@@public, boolean, MethodName:canAppearNext, CommandContext ctx,  @AT@ 2440 @LENGTH@ 22


UPD ExpressionStatement@@MethodInvocation:listener.onMessage(new DefaultMessage(message.getBytes(),channel.getBytes()),pattern.getBytes()) @TO@ MethodInvocation:listener.onMessage(new DefaultMessage(channel.getBytes(),message.getBytes()),pattern.getBytes()) @AT@ 1477 @LENGTH@ 99
---UPD MethodInvocation@@listener.onMessage(new DefaultMessage(message.getBytes(),channel.getBytes()),pattern.getBytes()) @TO@ listener.onMessage(new DefaultMessage(channel.getBytes(),message.getBytes()),pattern.getBytes()) @AT@ 1477 @LENGTH@ 98
------UPD SimpleName@@MethodName:onMessage:[new DefaultMessage(message.getBytes(),channel.getBytes()), pattern.getBytes()] @TO@ MethodName:onMessage:[new DefaultMessage(channel.getBytes(),message.getBytes()), pattern.getBytes()] @AT@ 1486 @LENGTH@ 89
---------UPD ClassInstanceCreation@@DefaultMessage[message.getBytes(), channel.getBytes()] @TO@ DefaultMessage[channel.getBytes(), message.getBytes()] @AT@ 1496 @LENGTH@ 58
------------UPD MethodInvocation@@message.getBytes() @TO@ channel.getBytes() @AT@ 1515 @LENGTH@ 18
---------------UPD SimpleName@@Name:message @TO@ Name:channel @AT@ 1515 @LENGTH@ 7
------------UPD MethodInvocation@@channel.getBytes() @TO@ message.getBytes() @AT@ 1535 @LENGTH@ 18
---------------UPD SimpleName@@Name:channel @TO@ Name:message @AT@ 1535 @LENGTH@ 7


UPD EnhancedForStatement@@for (Object key : map.keySet()) {  String keyString=CamelContextHelper.convertTo(context,String.class,key);  if (keyString != null) {    message.setObject(keyString,map.get(key));  }} @TO@ for (Entry<?,?> entry : map.entrySet()) {  String keyString=CamelContextHelper.convertTo(context,String.class,entry.getKey());  if (keyString != null) {    message.setObject(keyString,entry.getValue());  }} @AT@ 24839 @LENGTH@ 243
---UPD SingleVariableDeclaration@@Object key @TO@ Entry<?,?> entry @AT@ 24844 @LENGTH@ 10
------DEL SimpleType@@Object @AT@ 24844 @LENGTH@ 6
------UPD SimpleName@@key @TO@ entry @AT@ 24851 @LENGTH@ 3
------INS ParameterizedType@@Entry<?,?> @TO@ SingleVariableDeclaration@@Object key @AT@ 24872 @LENGTH@ 11
---------INS SimpleType@@Entry @TO@ ParameterizedType@@Entry<?,?> @AT@ 24872 @LENGTH@ 5
---------INS WildcardType@@? @TO@ ParameterizedType@@Entry<?,?> @AT@ 24878 @LENGTH@ 1
---------INS WildcardType@@? @TO@ ParameterizedType@@Entry<?,?> @AT@ 24881 @LENGTH@ 1
---UPD MethodInvocation@@map.keySet() @TO@ map.entrySet() @AT@ 24857 @LENGTH@ 12
------UPD SimpleName@@MethodName:keySet:[] @TO@ MethodName:entrySet:[] @AT@ 24861 @LENGTH@ 8
---UPD VariableDeclarationStatement@@String keyString=CamelContextHelper.convertTo(context,String.class,key); @TO@ String keyString=CamelContextHelper.convertTo(context,String.class,entry.getKey()); @AT@ 24885 @LENGTH@ 76
------UPD VariableDeclarationFragment@@keyString=CamelContextHelper.convertTo(context,String.class,key) @TO@ keyString=CamelContextHelper.convertTo(context,String.class,entry.getKey()) @AT@ 24892 @LENGTH@ 68
---------UPD MethodInvocation@@CamelContextHelper.convertTo(context,String.class,key) @TO@ CamelContextHelper.convertTo(context,String.class,entry.getKey()) @AT@ 24904 @LENGTH@ 56
------------UPD SimpleName@@MethodName:convertTo:[context, String.class, key] @TO@ MethodName:convertTo:[context, String.class, entry.getKey()] @AT@ 24923 @LENGTH@ 37
---------------DEL SimpleName@@key @AT@ 24956 @LENGTH@ 3
---------------INS MethodInvocation@@entry.getKey() @TO@ SimpleName@@MethodName:convertTo:[context, String.class, key] @AT@ 24993 @LENGTH@ 14
------------------INS SimpleName@@Name:entry @TO@ MethodInvocation@@entry.getKey() @AT@ 24993 @LENGTH@ 5
------------------INS SimpleName@@MethodName:getKey:[] @TO@ MethodInvocation@@entry.getKey() @AT@ 24999 @LENGTH@ 8
---UPD IfStatement@@if (keyString != null) {  message.setObject(keyString,map.get(key));} @TO@ if (keyString != null) {  message.setObject(keyString,entry.getValue());} @AT@ 24974 @LENGTH@ 98
------UPD Block@@ThenBody:{  message.setObject(keyString,map.get(key));} @TO@ ThenBody:{  message.setObject(keyString,entry.getValue());} @AT@ 24997 @LENGTH@ 75
---------UPD ExpressionStatement@@MethodInvocation:message.setObject(keyString,map.get(key)) @TO@ MethodInvocation:message.setObject(keyString,entry.getValue()) @AT@ 25015 @LENGTH@ 43
------------UPD MethodInvocation@@message.setObject(keyString,map.get(key)) @TO@ message.setObject(keyString,entry.getValue()) @AT@ 25015 @LENGTH@ 42
---------------UPD SimpleName@@MethodName:setObject:[keyString, map.get(key)] @TO@ MethodName:setObject:[keyString, entry.getValue()] @AT@ 25023 @LENGTH@ 34
------------------UPD MethodInvocation@@map.get(key) @TO@ entry.getValue() @AT@ 25044 @LENGTH@ 12
---------------------UPD SimpleName@@Name:map @TO@ Name:entry @AT@ 25044 @LENGTH@ 3
---------------------UPD SimpleName@@MethodName:get:[key] @TO@ MethodName:getValue:[] @AT@ 25048 @LENGTH@ 8
------------------------DEL SimpleName@@key @AT@ 25052 @LENGTH@ 3


UPD EnhancedForStatement@@for (String key : map.keySet()) {  jmsMessage.setObjectProperty(key,map.get(key));} @TO@ for (Entry<String,Object> entry : map.entrySet()) {  jmsMessage.setObjectProperty(entry.getKey(),entry.getValue());} @AT@ 2670 @LENGTH@ 104
---UPD SingleVariableDeclaration@@String key @TO@ Entry<String,Object> entry @AT@ 2675 @LENGTH@ 10
------DEL SimpleType@@String @AT@ 2675 @LENGTH@ 6
------UPD SimpleName@@key @TO@ entry @AT@ 2682 @LENGTH@ 3
------INS ParameterizedType@@Entry<String,Object> @TO@ SingleVariableDeclaration@@String key @AT@ 2704 @LENGTH@ 21
---------INS SimpleType@@Entry @TO@ ParameterizedType@@Entry<String,Object> @AT@ 2704 @LENGTH@ 5
---------INS SimpleType@@String @TO@ ParameterizedType@@Entry<String,Object> @AT@ 2710 @LENGTH@ 6
---------INS SimpleType@@Object @TO@ ParameterizedType@@Entry<String,Object> @AT@ 2718 @LENGTH@ 6
---UPD MethodInvocation@@map.keySet() @TO@ map.entrySet() @AT@ 2688 @LENGTH@ 12
------UPD SimpleName@@MethodName:keySet:[] @TO@ MethodName:entrySet:[] @AT@ 2692 @LENGTH@ 8
---UPD ExpressionStatement@@MethodInvocation:jmsMessage.setObjectProperty(key,map.get(key)) @TO@ MethodInvocation:jmsMessage.setObjectProperty(entry.getKey(),entry.getValue()) @AT@ 2716 @LENGTH@ 48
------UPD MethodInvocation@@jmsMessage.setObjectProperty(key,map.get(key)) @TO@ jmsMessage.setObjectProperty(entry.getKey(),entry.getValue()) @AT@ 2716 @LENGTH@ 47
---------UPD SimpleName@@MethodName:setObjectProperty:[key, map.get(key)] @TO@ MethodName:setObjectProperty:[entry.getKey(), entry.getValue()] @AT@ 2727 @LENGTH@ 36
------------DEL SimpleName@@key @AT@ 2745 @LENGTH@ 3
------------UPD MethodInvocation@@map.get(key) @TO@ entry.getValue() @AT@ 2750 @LENGTH@ 12
---------------UPD SimpleName@@Name:map @TO@ Name:entry @AT@ 2750 @LENGTH@ 3
---------------UPD SimpleName@@MethodName:get:[key] @TO@ MethodName:getValue:[] @AT@ 2754 @LENGTH@ 8
------------------DEL SimpleName@@key @AT@ 2758 @LENGTH@ 3
------------INS MethodInvocation@@entry.getKey() @TO@ SimpleName@@MethodName:setObjectProperty:[key, map.get(key)] @AT@ 2793 @LENGTH@ 14
---------------INS SimpleName@@Name:entry @TO@ MethodInvocation@@entry.getKey() @AT@ 2793 @LENGTH@ 5
---------------INS SimpleName@@MethodName:getKey:[] @TO@ MethodInvocation@@entry.getKey() @AT@ 2799 @LENGTH@ 8


UPD IfStatement@@if (context instanceof BootOperationContext) {  final BootOperationContext updateContext=(BootOperationContext)context;  context.getRuntimeContext().setRuntimeTask(new RuntimeTask(){    @Override public void execute(    RuntimeTaskContext context) throws OperationFailedException {      log.info("Activating WebServices Extension");      ModuleClassLoaderProvider.register();      WSServices.saveContainerRegistry(context.getServiceRegistry());      ServiceTarget serviceTarget=context.getServiceTarget();      ServerConfigImpl serverConfig=createServerConfig(operation);      ServerConfigService.install(serviceTarget,serverConfig);      ModelUpdateService.install(serviceTarget);      EndpointRegistryService.install(serviceTarget);      WSDeploymentActivator.activate(updateContext);      resultHandler.handleResultComplete();    }  });  updateContext.addDeploymentProcessor(Phase.PARSE,Phase.PARSE_WEB_SERVICE_INJECTION_ANNOTATION,new WebServiceRefAnnotationParsingProcessor());  updateContext.addDeploymentProcessor(Phase.PARSE,Phase.PARSE_RESOURCE_INJECTION_WEBSERVICE_CONTEXT_ANNOTATION,new WebServiceContextResourceProcessor());} else {  resultHandler.handleResultComplete();} @TO@ if (context instanceof BootOperationContext) {  final BootOperationContext updateContext=(BootOperationContext)context;  context.getRuntimeContext().setRuntimeTask(new RuntimeTask(){    @Override public void execute(    RuntimeTaskContext context) throws OperationFailedException {      log.info("Activating WebServices Extension");      ModuleClassLoaderProvider.register();      WSServices.saveContainerRegistry(context.getServiceRegistry());      ServiceTarget serviceTarget=context.getServiceTarget();      ServerConfigImpl serverConfig=createServerConfig(operation);      ServerConfigService.install(serviceTarget,serverConfig);      ModelUpdateService.install(serviceTarget);      EndpointRegistryService.install(serviceTarget);      WSDeploymentActivator.activate(updateContext);      resultHandler.handleResultComplete();    }  });  updateContext.addDeploymentProcessor(Phase.PARSE,Phase.PARSE_WEB_SERVICE_INJECTION_ANNOTATION,new WebServiceRefAnnotationParsingProcessor());} else {  resultHandler.handleResultComplete();} @AT@ 4288 @LENGTH@ 1538
---UPD Block@@ThenBody:{  final BootOperationContext updateContext=(BootOperationContext)context;  context.getRuntimeContext().setRuntimeTask(new RuntimeTask(){    @Override public void execute(    RuntimeTaskContext context) throws OperationFailedException {      log.info("Activating WebServices Extension");      ModuleClassLoaderProvider.register();      WSServices.saveContainerRegistry(context.getServiceRegistry());      ServiceTarget serviceTarget=context.getServiceTarget();      ServerConfigImpl serverConfig=createServerConfig(operation);      ServerConfigService.install(serviceTarget,serverConfig);      ModelUpdateService.install(serviceTarget);      EndpointRegistryService.install(serviceTarget);      WSDeploymentActivator.activate(updateContext);      resultHandler.handleResultComplete();    }  });  updateContext.addDeploymentProcessor(Phase.PARSE,Phase.PARSE_WEB_SERVICE_INJECTION_ANNOTATION,new WebServiceRefAnnotationParsingProcessor());  updateContext.addDeploymentProcessor(Phase.PARSE,Phase.PARSE_RESOURCE_INJECTION_WEBSERVICE_CONTEXT_ANNOTATION,new WebServiceContextResourceProcessor());} @TO@ ThenBody:{  final BootOperationContext updateContext=(BootOperationContext)context;  context.getRuntimeContext().setRuntimeTask(new RuntimeTask(){    @Override public void execute(    RuntimeTaskContext context) throws OperationFailedException {      log.info("Activating WebServices Extension");      ModuleClassLoaderProvider.register();      WSServices.saveContainerRegistry(context.getServiceRegistry());      ServiceTarget serviceTarget=context.getServiceTarget();      ServerConfigImpl serverConfig=createServerConfig(operation);      ServerConfigService.install(serviceTarget,serverConfig);      ModelUpdateService.install(serviceTarget);      EndpointRegistryService.install(serviceTarget);      WSDeploymentActivator.activate(updateContext);      resultHandler.handleResultComplete();    }  });  updateContext.addDeploymentProcessor(Phase.PARSE,Phase.PARSE_WEB_SERVICE_INJECTION_ANNOTATION,new WebServiceRefAnnotationParsingProcessor());} @AT@ 4333 @LENGTH@ 1426
------DEL ExpressionStatement@@MethodInvocation:updateContext.addDeploymentProcessor(Phase.PARSE,Phase.PARSE_RESOURCE_INJECTION_WEBSERVICE_CONTEXT_ANNOTATION,new WebServiceContextResourceProcessor()) @AT@ 5595 @LENGTH@ 154
---------DEL MethodInvocation@@updateContext.addDeploymentProcessor(Phase.PARSE,Phase.PARSE_RESOURCE_INJECTION_WEBSERVICE_CONTEXT_ANNOTATION,new WebServiceContextResourceProcessor()) @AT@ 5595 @LENGTH@ 153
------------DEL SimpleName@@Name:updateContext @AT@ 5595 @LENGTH@ 13
------------DEL SimpleName@@MethodName:addDeploymentProcessor:[Phase.PARSE, Phase.PARSE_RESOURCE_INJECTION_WEBSERVICE_CONTEXT_ANNOTATION, new WebServiceContextResourceProcessor()] @AT@ 5609 @LENGTH@ 139
---------------DEL QualifiedName@@Phase.PARSE @AT@ 5632 @LENGTH@ 11
------------------DEL SimpleName@@Phase @AT@ 5632 @LENGTH@ 5
------------------DEL SimpleName@@PARSE @AT@ 5638 @LENGTH@ 5
---------------DEL QualifiedName@@Phase.PARSE_RESOURCE_INJECTION_WEBSERVICE_CONTEXT_ANNOTATION @AT@ 5645 @LENGTH@ 60
------------------DEL SimpleName@@Phase @AT@ 5645 @LENGTH@ 5
------------------DEL SimpleName@@PARSE_RESOURCE_INJECTION_WEBSERVICE_CONTEXT_ANNOTATION @AT@ 5651 @LENGTH@ 54
---------------DEL ClassInstanceCreation@@WebServiceContextResourceProcessor[] @AT@ 5707 @LENGTH@ 40
------------------DEL New@@new @AT@ 5707 @LENGTH@ 3
------------------DEL SimpleType@@WebServiceContextResourceProcessor @AT@ 5711 @LENGTH@ 34


UPD IfStatement@@if (constructor == null) {  throw new DeploymentUnitProcessingException("No acceptable constructor found for " + moduleClass);} @TO@ if (constructor != null) {  configuration.setInstantiator(new ValueManagedReferenceFactory(createConstructedValue(constructor)));} @AT@ 6947 @LENGTH@ 163
---UPD InfixExpression@@constructor == null @TO@ constructor != null @AT@ 6951 @LENGTH@ 19
------UPD Operator@@== @TO@ != @AT@ 6962 @LENGTH@ 2
---UPD Block@@ThenBody:{  throw new DeploymentUnitProcessingException("No acceptable constructor found for " + moduleClass);} @TO@ ThenBody:{  configuration.setInstantiator(new ValueManagedReferenceFactory(createConstructedValue(constructor)));} @AT@ 6972 @LENGTH@ 138
------DEL ThrowStatement@@ClassInstanceCreation:new DeploymentUnitProcessingException("No acceptable constructor found for " + moduleClass) @AT@ 6994 @LENGTH@ 98
---------DEL ClassInstanceCreation@@DeploymentUnitProcessingException["No acceptable constructor found for " + moduleClass] @AT@ 7000 @LENGTH@ 91
------------DEL New@@new @AT@ 7000 @LENGTH@ 3
------------DEL SimpleType@@DeploymentUnitProcessingException @AT@ 7004 @LENGTH@ 33
------------DEL InfixExpression@@"No acceptable constructor found for " + moduleClass @AT@ 7038 @LENGTH@ 52
---------------DEL StringLiteral@@"No acceptable constructor found for " @AT@ 7038 @LENGTH@ 38
---------------DEL Operator@@+ @AT@ 7076 @LENGTH@ 1
---------------DEL SimpleName@@moduleClass @AT@ 7079 @LENGTH@ 11
------MOV ExpressionStatement@@MethodInvocation:configuration.setInstantiator(new ValueManagedReferenceFactory(createConstructedValue(constructor))) @TO@ Block@@ThenBody:{  throw new DeploymentUnitProcessingException("No acceptable constructor found for " + moduleClass);} @AT@ 7127 @LENGTH@ 101


UPD TryStatement@@try {  CliOptionContext.setOptionContext(cliOption.optionContext());  CliSimpleParserContext.setSimpleParserContext(this);  Object result;  Converter<?> c=null;  for (  Converter<?> candidate : converters) {    if (candidate.supports(requiredType,cliOption.optionContext())) {      c=candidate;      break;    }  }  if (c == null) {    System.out.println("requiredType: " + requiredType);    throw new IllegalStateException("TODO: Add basic type conversion");  }  result=c.convertFromText(value,null,cliOption.optionContext());  arguments.add(result);} catch (RuntimeException e) {  logger.warning("Failed to convert '" + value + "' to type "+ requiredType.getSimpleName()+ " for option '"+ StringUtils.arrayToCommaDelimitedString(cliOption.key())+ "'");  if (e.getMessage() != null && e.getMessage().length() > 0) {    logger.warning(e.getMessage());  }  return null;} finally {  CliOptionContext.resetOptionContext();  CliSimpleParserContext.resetSimpleParserContext();} @TO@ try {  CliOptionContext.setOptionContext(cliOption.optionContext());  CliSimpleParserContext.setSimpleParserContext(this);  Object result;  Converter<?> c=null;  for (  Converter<?> candidate : converters) {    if (candidate.supports(requiredType,cliOption.optionContext())) {      c=candidate;      break;    }  }  if (c == null) {    throw new IllegalStateException("TODO: Add basic type conversion");  }  result=c.convertFromText(value,requiredType,cliOption.optionContext());  if (result == null && cliOption.mandatory()) {    throw new IllegalStateException();  }  arguments.add(result);} catch (RuntimeException e) {  logger.warning(e.getClass().getName() + ": Failed to convert '" + value+ "' to type "+ requiredType.getSimpleName()+ " for option '"+ StringUtils.arrayToCommaDelimitedString(cliOption.key())+ "'");  if (e.getMessage() != null && e.getMessage().length() > 0) {    logger.warning(e.getMessage());  }  return null;} finally {  CliOptionContext.resetOptionContext();  CliSimpleParserContext.resetSimpleParserContext();} @AT@ 6235 @LENGTH@ 1388
---UPD IfStatement@@if (c == null) {  System.out.println("requiredType: " + requiredType);  throw new IllegalStateException("TODO: Add basic type conversion");} @TO@ if (c == null) {  throw new IllegalStateException("TODO: Add basic type conversion");} @AT@ 6627 @LENGTH@ 396
------UPD Block@@ThenBody:{  System.out.println("requiredType: " + requiredType);  throw new IllegalStateException("TODO: Add basic type conversion");} @TO@ ThenBody:{  throw new IllegalStateException("TODO: Add basic type conversion");} @AT@ 6642 @LENGTH@ 381
---------DEL ExpressionStatement@@MethodInvocation:System.out.println("requiredType: " + requiredType) @AT@ 6650 @LENGTH@ 52
------------DEL MethodInvocation@@System.out.println("requiredType: " + requiredType) @AT@ 6650 @LENGTH@ 51
---------------DEL QualifiedName@@Name:System.out @AT@ 6650 @LENGTH@ 10
---------------DEL SimpleName@@MethodName:println:["requiredType: " + requiredType] @AT@ 6661 @LENGTH@ 40
------------------DEL InfixExpression@@"requiredType: " + requiredType @AT@ 6669 @LENGTH@ 31
---------------------DEL StringLiteral@@"requiredType: " @AT@ 6669 @LENGTH@ 16
---------------------DEL Operator@@+ @AT@ 6685 @LENGTH@ 1
---------------------DEL SimpleName@@requiredType @AT@ 6688 @LENGTH@ 12
---UPD ExpressionStatement@@Assignment:result=c.convertFromText(value,null,cliOption.optionContext()) @TO@ Assignment:result=c.convertFromText(value,requiredType,cliOption.optionContext()) @AT@ 7061 @LENGTH@ 67
------UPD Assignment@@result=c.convertFromText(value,null,cliOption.optionContext()) @TO@ result=c.convertFromText(value,requiredType,cliOption.optionContext()) @AT@ 7061 @LENGTH@ 66
---------UPD MethodInvocation@@c.convertFromText(value,null,cliOption.optionContext()) @TO@ c.convertFromText(value,requiredType,cliOption.optionContext()) @AT@ 7070 @LENGTH@ 57
------------UPD SimpleName@@MethodName:convertFromText:[value, null, cliOption.optionContext()] @TO@ MethodName:convertFromText:[value, requiredType, cliOption.optionContext()] @AT@ 7072 @LENGTH@ 55
---------------INS SimpleName@@requiredType @TO@ SimpleName@@MethodName:convertFromText:[value, null, cliOption.optionContext()] @AT@ 7036 @LENGTH@ 12
---------------DEL NullLiteral@@null @AT@ 7095 @LENGTH@ 4
---UPD CatchClause@@catch (RuntimeException e) {  logger.warning("Failed to convert '" + value + "' to type "+ requiredType.getSimpleName()+ " for option '"+ StringUtils.arrayToCommaDelimitedString(cliOption.key())+ "'");  if (e.getMessage() != null && e.getMessage().length() > 0) {    logger.warning(e.getMessage());  }  return null;} @TO@ catch (RuntimeException e) {  logger.warning(e.getClass().getName() + ": Failed to convert '" + value+ "' to type "+ requiredType.getSimpleName()+ " for option '"+ StringUtils.arrayToCommaDelimitedString(cliOption.key())+ "'");  if (e.getMessage() != null && e.getMessage().length() > 0) {    logger.warning(e.getMessage());  }  return null;} @AT@ 7163 @LENGTH@ 344
------UPD ExpressionStatement@@MethodInvocation:logger.warning("Failed to convert '" + value + "' to type "+ requiredType.getSimpleName()+ " for option '"+ StringUtils.arrayToCommaDelimitedString(cliOption.key())+ "'") @TO@ MethodInvocation:logger.warning(e.getClass().getName() + ": Failed to convert '" + value+ "' to type "+ requiredType.getSimpleName()+ " for option '"+ StringUtils.arrayToCommaDelimitedString(cliOption.key())+ "'") @AT@ 7197 @LENGTH@ 175
---------UPD MethodInvocation@@logger.warning("Failed to convert '" + value + "' to type "+ requiredType.getSimpleName()+ " for option '"+ StringUtils.arrayToCommaDelimitedString(cliOption.key())+ "'") @TO@ logger.warning(e.getClass().getName() + ": Failed to convert '" + value+ "' to type "+ requiredType.getSimpleName()+ " for option '"+ StringUtils.arrayToCommaDelimitedString(cliOption.key())+ "'") @AT@ 7197 @LENGTH@ 174
------------UPD SimpleName@@MethodName:warning:["Failed to convert '" + value + "' to type "+ requiredType.getSimpleName()+ " for option '"+ StringUtils.arrayToCommaDelimitedString(cliOption.key())+ "'"] @TO@ MethodName:warning:[e.getClass().getName() + ": Failed to convert '" + value+ "' to type "+ requiredType.getSimpleName()+ " for option '"+ StringUtils.arrayToCommaDelimitedString(cliOption.key())+ "'"] @AT@ 7204 @LENGTH@ 167
---------------UPD InfixExpression@@"Failed to convert '" + value + "' to type "+ requiredType.getSimpleName()+ " for option '"+ StringUtils.arrayToCommaDelimitedString(cliOption.key())+ "'" @TO@ e.getClass().getName() + ": Failed to convert '" + value+ "' to type "+ requiredType.getSimpleName()+ " for option '"+ StringUtils.arrayToCommaDelimitedString(cliOption.key())+ "'" @AT@ 7212 @LENGTH@ 158
------------------DEL StringLiteral@@"Failed to convert '" @AT@ 7212 @LENGTH@ 21
------------------INS MethodInvocation@@e.getClass().getName() @TO@ InfixExpression@@"Failed to convert '" + value + "' to type "+ requiredType.getSimpleName()+ " for option '"+ StringUtils.arrayToCommaDelimitedString(cliOption.key())+ "'" @AT@ 7356 @LENGTH@ 22
---------------------INS MethodInvocation@@MethodName:getClass:[] @TO@ MethodInvocation@@e.getClass().getName() @AT@ 7356 @LENGTH@ 12
---------------------INS SimpleName@@Name:e @TO@ MethodInvocation@@e.getClass().getName() @AT@ 7356 @LENGTH@ 1
---------------------INS SimpleName@@MethodName:getName:[] @TO@ MethodInvocation@@e.getClass().getName() @AT@ 7369 @LENGTH@ 9
------------------INS StringLiteral@@": Failed to convert '" @TO@ InfixExpression@@"Failed to convert '" + value + "' to type "+ requiredType.getSimpleName()+ " for option '"+ StringUtils.arrayToCommaDelimitedString(cliOption.key())+ "'" @AT@ 7381 @LENGTH@ 23
---INS IfStatement@@if (result == null && cliOption.mandatory()) {  throw new IllegalStateException();} @TO@ TryStatement@@try {  CliOptionContext.setOptionContext(cliOption.optionContext());  CliSimpleParserContext.setSimpleParserContext(this);  Object result;  Converter<?> c=null;  for (  Converter<?> candidate : converters) {    if (candidate.supports(requiredType,cliOption.optionContext())) {      c=candidate;      break;    }  }  if (c == null) {    System.out.println("requiredType: " + requiredType);    throw new IllegalStateException("TODO: Add basic type conversion");  }  result=c.convertFromText(value,null,cliOption.optionContext());  arguments.add(result);} catch (RuntimeException e) {  logger.warning("Failed to convert '" + value + "' to type "+ requiredType.getSimpleName()+ " for option '"+ StringUtils.arrayToCommaDelimitedString(cliOption.key())+ "'");  if (e.getMessage() != null && e.getMessage().length() > 0) {    logger.warning(e.getMessage());  }  return null;} finally {  CliOptionContext.resetOptionContext();  CliSimpleParserContext.resetSimpleParserContext();} @AT@ 7178 @LENGTH@ 94
------INS InfixExpression@@result == null && cliOption.mandatory() @TO@ IfStatement@@if (result == null && cliOption.mandatory()) {  throw new IllegalStateException();} @AT@ 7182 @LENGTH@ 39
---------INS InfixExpression@@result == null @TO@ InfixExpression@@result == null && cliOption.mandatory() @AT@ 7182 @LENGTH@ 14
------------INS SimpleName@@result @TO@ InfixExpression@@result == null @AT@ 7182 @LENGTH@ 6
------------INS Operator@@== @TO@ InfixExpression@@result == null @AT@ 7188 @LENGTH@ 2
------------INS NullLiteral@@null @TO@ InfixExpression@@result == null @AT@ 7192 @LENGTH@ 4
---------INS Operator@@&& @TO@ InfixExpression@@result == null && cliOption.mandatory() @AT@ 7196 @LENGTH@ 2
---------INS MethodInvocation@@cliOption.mandatory() @TO@ InfixExpression@@result == null && cliOption.mandatory() @AT@ 7200 @LENGTH@ 21
------------INS SimpleName@@Name:cliOption @TO@ MethodInvocation@@cliOption.mandatory() @AT@ 7200 @LENGTH@ 9
------------INS SimpleName@@MethodName:mandatory:[] @TO@ MethodInvocation@@cliOption.mandatory() @AT@ 7210 @LENGTH@ 11
------INS Block@@ThenBody:{  throw new IllegalStateException();} @TO@ IfStatement@@if (result == null && cliOption.mandatory()) {  throw new IllegalStateException();} @AT@ 7223 @LENGTH@ 49
---------INS ThrowStatement@@ClassInstanceCreation:new IllegalStateException() @TO@ Block@@ThenBody:{  throw new IllegalStateException();} @AT@ 7231 @LENGTH@ 34
------------INS ClassInstanceCreation@@IllegalStateException[] @TO@ ThrowStatement@@ClassInstanceCreation:new IllegalStateException() @AT@ 7237 @LENGTH@ 27
---------------INS New@@new @TO@ ClassInstanceCreation@@IllegalStateException[] @AT@ 7237 @LENGTH@ 3
---------------INS SimpleType@@IllegalStateException @TO@ ClassInstanceCreation@@IllegalStateException[] @AT@ 7241 @LENGTH@ 21


DEL ReturnStatement@@NullLiteral:null @AT@ 4354 @LENGTH@ 12
---DEL NullLiteral@@null @AT@ 4361 @LENGTH@ 4


UPD FieldDeclaration@@private, static, int, [NUMBER_OF_THREADS=5] @TO@ private, static, final, int, [NUMBER_OF_THREADS=5] @AT@ 1543 @LENGTH@ 41
---INS Modifier@@final @TO@ FieldDeclaration@@private, static, int, [NUMBER_OF_THREADS=5] @AT@ 1558 @LENGTH@ 5


INS MethodDeclaration@@public, void, MethodName:undeploy, final DeploymentUnit context,  @TO@ TypeDeclaration@@[public]ResourceAdaptersAttachingProcessor, [DeploymentUnitProcessor] @AT@ 2216 @LENGTH@ 58
---INS Modifier@@public @TO@ MethodDeclaration@@public, void, MethodName:undeploy, final DeploymentUnit context,  @AT@ 2216 @LENGTH@ 6
---INS PrimitiveType@@void @TO@ MethodDeclaration@@public, void, MethodName:undeploy, final DeploymentUnit context,  @AT@ 2223 @LENGTH@ 4
---INS SimpleName@@MethodName:undeploy @TO@ MethodDeclaration@@public, void, MethodName:undeploy, final DeploymentUnit context,  @AT@ 2228 @LENGTH@ 8
---INS SingleVariableDeclaration@@final DeploymentUnit context @TO@ MethodDeclaration@@public, void, MethodName:undeploy, final DeploymentUnit context,  @AT@ 2237 @LENGTH@ 28
------INS Modifier@@final @TO@ SingleVariableDeclaration@@final DeploymentUnit context @AT@ 2237 @LENGTH@ 5
------INS SimpleType@@DeploymentUnit @TO@ SingleVariableDeclaration@@final DeploymentUnit context @AT@ 2243 @LENGTH@ 14
------INS SimpleName@@context @TO@ SingleVariableDeclaration@@final DeploymentUnit context @AT@ 2258 @LENGTH@ 7


UPD MethodDeclaration@@public, void, MethodName:setUp, Exception,  @TO@ public, void, MethodName:doPreSetup, Exception,  @AT@ 1976 @LENGTH@ 749
---UPD SimpleName@@MethodName:setUp @TO@ MethodName:doPreSetup @AT@ 1988 @LENGTH@ 5
---UPD IfStatement@@if (!"true".equalsIgnoreCase(System.getProperty("skipStartingCamelContext"))) {  System.setProperty("maybeStartCamelContext","false");  applicationContext=createApplicationContext();  assertNotNull("Should have created a valid spring context",applicationContext);  super.setUp();  System.clearProperty("maybeStartCamelContext");} else {  log.info("Skipping starting CamelContext as system property skipStartingCamelContext is set to be true.");} @TO@ if (!"true".equalsIgnoreCase(System.getProperty("skipStartingCamelContext"))) {  System.setProperty("maybeStartCamelContext","false");  applicationContext=createApplicationContext();  assertNotNull("Should have created a valid spring context",applicationContext);  System.clearProperty("maybeStartCamelContext");} else {  log.info("Skipping starting CamelContext as system property skipStartingCamelContext is set to be true.");} @AT@ 2023 @LENGTH@ 696
------UPD Block@@ThenBody:{  System.setProperty("maybeStartCamelContext","false");  applicationContext=createApplicationContext();  assertNotNull("Should have created a valid spring context",applicationContext);  super.setUp();  System.clearProperty("maybeStartCamelContext");} @TO@ ThenBody:{  System.setProperty("maybeStartCamelContext","false");  applicationContext=createApplicationContext();  assertNotNull("Should have created a valid spring context",applicationContext);  System.clearProperty("maybeStartCamelContext");} @AT@ 2101 @LENGTH@ 482
---------DEL ExpressionStatement@@SuperMethodInvocation:super.setUp() @AT@ 2499 @LENGTH@ 14
------------DEL SuperMethodInvocation@@super.setUp() @AT@ 2499 @LENGTH@ 13
---------------DEL SimpleName@@MethodName:setUp:[] @AT@ 2505 @LENGTH@ 5


INS FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @TO@ TypeDeclaration@@[public, final]SwitchUserGrantedAuthority, [GrantedAuthority] @AT@ 1336 @LENGTH@ 90
---INS Modifier@@private @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @AT@ 1336 @LENGTH@ 7
---INS Modifier@@static @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @AT@ 1344 @LENGTH@ 6
---INS Modifier@@final @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @AT@ 1351 @LENGTH@ 5
---INS PrimitiveType@@long @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @AT@ 1357 @LENGTH@ 4
---INS VariableDeclarationFragment@@serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @AT@ 1362 @LENGTH@ 63
------INS SimpleName@@serialVersionUID @TO@ VariableDeclarationFragment@@serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID @AT@ 1362 @LENGTH@ 16
------INS QualifiedName@@SpringSecurityCoreVersion.SERIAL_VERSION_UID @TO@ VariableDeclarationFragment@@serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID @AT@ 1381 @LENGTH@ 44
---------INS SimpleName@@SpringSecurityCoreVersion @TO@ QualifiedName@@SpringSecurityCoreVersion.SERIAL_VERSION_UID @AT@ 1381 @LENGTH@ 25
---------INS SimpleName@@SERIAL_VERSION_UID @TO@ QualifiedName@@SpringSecurityCoreVersion.SERIAL_VERSION_UID @AT@ 1407 @LENGTH@ 18


INS MethodDeclaration@@public, boolean, MethodName:hasArgument, int index,  @TO@ TypeDeclaration@@[public]BatchMoveLineHandler, CommandHandlerWithHelp @AT@ 3688 @LENGTH@ 71
---INS Modifier@@public @TO@ MethodDeclaration@@public, boolean, MethodName:hasArgument, int index,  @AT@ 3688 @LENGTH@ 6
---INS PrimitiveType@@boolean @TO@ MethodDeclaration@@public, boolean, MethodName:hasArgument, int index,  @AT@ 3695 @LENGTH@ 7
---INS SimpleName@@MethodName:hasArgument @TO@ MethodDeclaration@@public, boolean, MethodName:hasArgument, int index,  @AT@ 3703 @LENGTH@ 11
---INS SingleVariableDeclaration@@int index @TO@ MethodDeclaration@@public, boolean, MethodName:hasArgument, int index,  @AT@ 3715 @LENGTH@ 9
------INS PrimitiveType@@int @TO@ SingleVariableDeclaration@@int index @AT@ 3715 @LENGTH@ 3
------INS SimpleName@@index @TO@ SingleVariableDeclaration@@int index @AT@ 3719 @LENGTH@ 5
---INS ReturnStatement@@InfixExpression:index < 2 @TO@ MethodDeclaration@@public, boolean, MethodName:hasArgument, int index,  @AT@ 3736 @LENGTH@ 17
------INS InfixExpression@@index < 2 @TO@ ReturnStatement@@InfixExpression:index < 2 @AT@ 3743 @LENGTH@ 9
---------INS SimpleName@@index @TO@ InfixExpression@@index < 2 @AT@ 3743 @LENGTH@ 5
---------INS Operator@@< @TO@ InfixExpression@@index < 2 @AT@ 3748 @LENGTH@ 1
---------INS NumberLiteral@@2 @TO@ InfixExpression@@index < 2 @AT@ 3751 @LENGTH@ 1


INS ExpressionStatement@@MethodInvocation:assertNotNull(base64) @TO@ MethodDeclaration@@public, void, MethodName:testConstructors,  @AT@ 8922 @LENGTH@ 22
---INS MethodInvocation@@assertNotNull(base64) @TO@ ExpressionStatement@@MethodInvocation:assertNotNull(base64) @AT@ 8922 @LENGTH@ 21
------INS SimpleName@@MethodName:assertNotNull:[base64] @TO@ MethodInvocation@@assertNotNull(base64) @AT@ 8922 @LENGTH@ 21
---------INS SimpleName@@base64 @TO@ SimpleName@@MethodName:assertNotNull:[base64] @AT@ 8936 @LENGTH@ 6


UPD IfStatement@@if (osName.startsWith("macos")) {  bindingsName="keybindings/jline-mac-bindings.properties";} else {  bindingsName="keybindings/jline-default-bindings.properties";} @TO@ if (osName.startsWith("mac")) {  bindingsName="keybindings/jline-mac-bindings.properties";} else {  bindingsName="keybindings/jline-default-bindings.properties";} @AT@ 7844 @LENGTH@ 207
---UPD MethodInvocation@@osName.startsWith("macos") @TO@ osName.startsWith("mac") @AT@ 7847 @LENGTH@ 26
------UPD SimpleName@@MethodName:startsWith:["macos"] @TO@ MethodName:startsWith:["mac"] @AT@ 7854 @LENGTH@ 19
---------UPD StringLiteral@@"macos" @TO@ "mac" @AT@ 7865 @LENGTH@ 7


UPD TryStatement@@try {  CachingConnectionFactory connectionFactory=new CachingConnectionFactory();  connectionFactory.setPort(port);  if (StringUtils.hasText(hostName)) {    connectionFactory.setHost(hostName);  }  RabbitAdmin admin=new RabbitAdmin(connectionFactory);  for (  Queue queue : queues) {    String queueName=queue.getName();    if (purge) {      logger.debug("Deleting queue: " + queueName);      admin.deleteQueue(queueName);    }    if (isDefaultQueue(queueName)) {      admin.deleteQueue(queueName);    } else {      admin.declareQueue(queue);    }  }  brokerOffline=false;  if (!assumeOnline) {    Assume.assumeTrue(brokerOffline);  }} catch (Exception e) {  logger.warn("Not executing tests because basic connectivity test failed",e);  brokerOnline=false;  if (assumeOnline) {    Assume.assumeNoException(e);  }} @TO@ try {  connectionFactory.setPort(port);  if (StringUtils.hasText(hostName)) {    connectionFactory.setHost(hostName);  }  RabbitAdmin admin=new RabbitAdmin(connectionFactory);  for (  Queue queue : queues) {    String queueName=queue.getName();    if (purge) {      logger.debug("Deleting queue: " + queueName);      admin.deleteQueue(queueName);    }    if (isDefaultQueue(queueName)) {      admin.deleteQueue(queueName);    } else {      admin.declareQueue(queue);    }  }  brokerOffline=false;  if (!assumeOnline) {    Assume.assumeTrue(brokerOffline);  }} catch (Exception e) {  logger.warn("Not executing tests because basic connectivity test failed",e);  brokerOnline=false;  if (assumeOnline) {    Assume.assumeNoException(e);  }} finally {  connectionFactory.destroy();} @AT@ 3904 @LENGTH@ 970
---INS Block@@FinallyBody:{  connectionFactory.destroy();} @TO@ TryStatement@@try {  CachingConnectionFactory connectionFactory=new CachingConnectionFactory();  connectionFactory.setPort(port);  if (StringUtils.hasText(hostName)) {    connectionFactory.setHost(hostName);  }  RabbitAdmin admin=new RabbitAdmin(connectionFactory);  for (  Queue queue : queues) {    String queueName=queue.getName();    if (purge) {      logger.debug("Deleting queue: " + queueName);      admin.deleteQueue(queueName);    }    if (isDefaultQueue(queueName)) {      admin.deleteQueue(queueName);    } else {      admin.declareQueue(queue);    }  }  brokerOffline=false;  if (!assumeOnline) {    Assume.assumeTrue(brokerOffline);  }} catch (Exception e) {  logger.warn("Not executing tests because basic connectivity test failed",e);  brokerOnline=false;  if (assumeOnline) {    Assume.assumeNoException(e);  }} @AT@ 4883 @LENGTH@ 37
------INS ExpressionStatement@@MethodInvocation:connectionFactory.destroy() @TO@ Block@@FinallyBody:{  connectionFactory.destroy();} @AT@ 4888 @LENGTH@ 28
---------INS MethodInvocation@@connectionFactory.destroy() @TO@ ExpressionStatement@@MethodInvocation:connectionFactory.destroy() @AT@ 4888 @LENGTH@ 27
------------INS SimpleName@@Name:connectionFactory @TO@ MethodInvocation@@connectionFactory.destroy() @AT@ 4888 @LENGTH@ 17
------------INS SimpleName@@MethodName:destroy:[] @TO@ MethodInvocation@@connectionFactory.destroy() @AT@ 4906 @LENGTH@ 9


UPD EnhancedForStatement@@for (final ClassInfo clazz : allKnown) {  final DotName className=clazz.name();  if (!processedClasses.contains(className)) {    if (Modifier.isInterface(clazz.flags())) {      subInterfacesToProcess.add(className);    } else {      if (!allKnown.contains(clazz)) {        allKnown.add(clazz);        processedClasses.add(className);        getAllKnownSubClasses(className,allKnown,processedClasses);      }    }  }} @TO@ for (final ClassInfo clazz : list) {  final DotName className=clazz.name();  if (!processedClasses.contains(className)) {    if (Modifier.isInterface(clazz.flags())) {      subInterfacesToProcess.add(className);    } else {      if (!allKnown.contains(clazz)) {        allKnown.add(clazz);        processedClasses.add(className);        getAllKnownSubClasses(className,allKnown,processedClasses);      }    }  }} @AT@ 6928 @LENGTH@ 701
---UPD SimpleName@@allKnown @TO@ list @AT@ 6957 @LENGTH@ 8


INS FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @TO@ TypeDeclaration@@[public, final]SimpleGrantedAuthority, [GrantedAuthority] @AT@ 563 @LENGTH@ 90
---INS Modifier@@private @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @AT@ 563 @LENGTH@ 7
---INS Modifier@@static @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @AT@ 571 @LENGTH@ 6
---INS Modifier@@final @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @AT@ 578 @LENGTH@ 5
---INS PrimitiveType@@long @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @AT@ 584 @LENGTH@ 4
---INS VariableDeclarationFragment@@serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @AT@ 589 @LENGTH@ 63
------INS SimpleName@@serialVersionUID @TO@ VariableDeclarationFragment@@serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID @AT@ 589 @LENGTH@ 16
------INS QualifiedName@@SpringSecurityCoreVersion.SERIAL_VERSION_UID @TO@ VariableDeclarationFragment@@serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID @AT@ 608 @LENGTH@ 44
---------INS SimpleName@@SpringSecurityCoreVersion @TO@ QualifiedName@@SpringSecurityCoreVersion.SERIAL_VERSION_UID @AT@ 608 @LENGTH@ 25
---------INS SimpleName@@SERIAL_VERSION_UID @TO@ QualifiedName@@SpringSecurityCoreVersion.SERIAL_VERSION_UID @AT@ 634 @LENGTH@ 18


UPD EnhancedForStatement@@for (String item : items) {  final VirtualFile classPathFile=resourceRoot.getRoot().getParent().getChild(item);  if (!classPathFile.exists()) {    throw new DeploymentUnitProcessingException("Class Path entry " + item + " in "+ resourceRoot.getRoot()+ "  not found. ");  }  if (isInside(classPathFile,toplevelRoot)) {    if (earLibJars.contains(classPathFile)) {      log.debugf("Class-Path entry %s in %s ignored, as target is in or referenced by /lib",classPathFile,resourceRoot.getRoot());      continue;    } else     if (additionalModules.containsKey(classPathFile)) {      target.addToAttachmentList(Attachments.CLASS_PATH_ENTRIES,additionalModules.get(classPathFile).getModuleIdentifier());    } else {      log.warn("Class Path entry " + item + " in "+ resourceRoot.getRoot()+ "  does not point to a valid jar for a Class-Path reference.");    }  } else   if (isInside(classPathFile,deploymentDirRoot)) {    if (classPathFile.getParent().equals(deploymentDirRoot)) {      target.addToAttachmentList(Attachments.CLASS_PATH_ENTRIES,ModuleIdentifier.create(ServiceModuleLoader.MODULE_PREFIX + classPathFile.getName()));    } else {      log.warn("Class Path entries that references nestled jars inside another deployment are disallowed");    }  } else {    ModuleIdentifier moduleIdentifier=externalModuleService.addExternalModule(classPathFile);    target.addToAttachmentList(Attachments.CLASS_PATH_ENTRIES,moduleIdentifier);    log.debugf("Resource %s added as external jar %s",classPathFile,resourceRoot.getRoot());  }} @TO@ for (String item : items) {  final VirtualFile classPathFile=resourceRoot.getRoot().getParent().getChild(item);  if (isInside(classPathFile,toplevelRoot)) {    if (earLibJars.contains(classPathFile)) {      log.debugf("Class-Path entry %s in %s ignored, as target is in or referenced by /lib",classPathFile,resourceRoot.getRoot());      continue;    } else     if (additionalModules.containsKey(classPathFile)) {      target.addToAttachmentList(Attachments.CLASS_PATH_ENTRIES,additionalModules.get(classPathFile).getModuleIdentifier());    } else {      log.warn("Class Path entry " + item + " in "+ resourceRoot.getRoot()+ "  does not point to a valid jar for a Class-Path reference.");    }  } else   if (!item.startsWith("/") && classPathFile.getParent().isRoot()) {    target.addToAttachmentList(Attachments.CLASS_PATH_ENTRIES,ModuleIdentifier.create(ServiceModuleLoader.MODULE_PREFIX + classPathFile.getName()));  } else   if (item.startsWith("/")) {    ModuleIdentifier moduleIdentifier=externalModuleService.addExternalModule(classPathFile);    target.addToAttachmentList(Attachments.CLASS_PATH_ENTRIES,moduleIdentifier);    log.debugf("Resource %s added as external jar %s",classPathFile,resourceRoot.getRoot());  } else {    log.warn("Class Path entry " + item + " in "+ resourceRoot.getRoot()+ "  does not point to a valid jar for a Class-Path reference.");  }} @AT@ 6082 @LENGTH@ 2173
---DEL IfStatement@@if (!classPathFile.exists()) {  throw new DeploymentUnitProcessingException("Class Path entry " + item + " in "+ resourceRoot.getRoot()+ "  not found. ");} @AT@ 6227 @LENGTH@ 221
------DEL PrefixExpression@@!classPathFile.exists() @AT@ 6231 @LENGTH@ 23
---------DEL Operator@@! @AT@ 6231 @LENGTH@ 1
---------DEL MethodInvocation@@classPathFile.exists() @AT@ 6232 @LENGTH@ 22
------------DEL SimpleName@@Name:classPathFile @AT@ 6232 @LENGTH@ 13
------------DEL SimpleName@@MethodName:exists:[] @AT@ 6246 @LENGTH@ 8
------DEL Block@@ThenBody:{  throw new DeploymentUnitProcessingException("Class Path entry " + item + " in "+ resourceRoot.getRoot()+ "  not found. ");} @AT@ 6256 @LENGTH@ 192
---------DEL ThrowStatement@@ClassInstanceCreation:new DeploymentUnitProcessingException("Class Path entry " + item + " in "+ resourceRoot.getRoot()+ "  not found. ") @AT@ 6278 @LENGTH@ 152
------------DEL ClassInstanceCreation@@DeploymentUnitProcessingException["Class Path entry " + item + " in "+ resourceRoot.getRoot()+ "  not found. "] @AT@ 6284 @LENGTH@ 145
---------------DEL New@@new @AT@ 6284 @LENGTH@ 3
---------------DEL SimpleType@@DeploymentUnitProcessingException @AT@ 6288 @LENGTH@ 33
---------------DEL InfixExpression@@"Class Path entry " + item + " in "+ resourceRoot.getRoot()+ "  not found. " @AT@ 6322 @LENGTH@ 106
------------------DEL StringLiteral@@"Class Path entry " @AT@ 6322 @LENGTH@ 19
------------------DEL Operator@@+ @AT@ 6341 @LENGTH@ 1
------------------DEL SimpleName@@item @AT@ 6344 @LENGTH@ 4
------------------DEL StringLiteral@@" in " @AT@ 6351 @LENGTH@ 6
------------------DEL MethodInvocation@@resourceRoot.getRoot() @AT@ 6360 @LENGTH@ 22
---------------------DEL SimpleName@@Name:resourceRoot @AT@ 6360 @LENGTH@ 12
---------------------DEL SimpleName@@MethodName:getRoot:[] @AT@ 6373 @LENGTH@ 9
------------------DEL StringLiteral@@"  not found. " @AT@ 6413 @LENGTH@ 15
---UPD IfStatement@@if (isInside(classPathFile,toplevelRoot)) {  if (earLibJars.contains(classPathFile)) {    log.debugf("Class-Path entry %s in %s ignored, as target is in or referenced by /lib",classPathFile,resourceRoot.getRoot());    continue;  } else   if (additionalModules.containsKey(classPathFile)) {    target.addToAttachmentList(Attachments.CLASS_PATH_ENTRIES,additionalModules.get(classPathFile).getModuleIdentifier());  } else {    log.warn("Class Path entry " + item + " in "+ resourceRoot.getRoot()+ "  does not point to a valid jar for a Class-Path reference.");  }} else if (isInside(classPathFile,deploymentDirRoot)) {  if (classPathFile.getParent().equals(deploymentDirRoot)) {    target.addToAttachmentList(Attachments.CLASS_PATH_ENTRIES,ModuleIdentifier.create(ServiceModuleLoader.MODULE_PREFIX + classPathFile.getName()));  } else {    log.warn("Class Path entries that references nestled jars inside another deployment are disallowed");  }} else {  ModuleIdentifier moduleIdentifier=externalModuleService.addExternalModule(classPathFile);  target.addToAttachmentList(Attachments.CLASS_PATH_ENTRIES,moduleIdentifier);  log.debugf("Resource %s added as external jar %s",classPathFile,resourceRoot.getRoot());} @TO@ if (isInside(classPathFile,toplevelRoot)) {  if (earLibJars.contains(classPathFile)) {    log.debugf("Class-Path entry %s in %s ignored, as target is in or referenced by /lib",classPathFile,resourceRoot.getRoot());    continue;  } else   if (additionalModules.containsKey(classPathFile)) {    target.addToAttachmentList(Attachments.CLASS_PATH_ENTRIES,additionalModules.get(classPathFile).getModuleIdentifier());  } else {    log.warn("Class Path entry " + item + " in "+ resourceRoot.getRoot()+ "  does not point to a valid jar for a Class-Path reference.");  }} else if (!item.startsWith("/") && classPathFile.getParent().isRoot()) {  target.addToAttachmentList(Attachments.CLASS_PATH_ENTRIES,ModuleIdentifier.create(ServiceModuleLoader.MODULE_PREFIX + classPathFile.getName()));} else if (item.startsWith("/")) {  ModuleIdentifier moduleIdentifier=externalModuleService.addExternalModule(classPathFile);  target.addToAttachmentList(Attachments.CLASS_PATH_ENTRIES,moduleIdentifier);  log.debugf("Resource %s added as external jar %s",classPathFile,resourceRoot.getRoot());} else {  log.warn("Class Path entry " + item + " in "+ resourceRoot.getRoot()+ "  does not point to a valid jar for a Class-Path reference.");} @AT@ 6465 @LENGTH@ 1776
------UPD Block@@ElseBody:if (isInside(classPathFile,deploymentDirRoot)) {  if (classPathFile.getParent().equals(deploymentDirRoot)) {    target.addToAttachmentList(Attachments.CLASS_PATH_ENTRIES,ModuleIdentifier.create(ServiceModuleLoader.MODULE_PREFIX + classPathFile.getName()));  } else {    log.warn("Class Path entries that references nestled jars inside another deployment are disallowed");  }} else {  ModuleIdentifier moduleIdentifier=externalModuleService.addExternalModule(classPathFile);  target.addToAttachmentList(Attachments.CLASS_PATH_ENTRIES,moduleIdentifier);  log.debugf("Resource %s added as external jar %s",classPathFile,resourceRoot.getRoot());} @TO@ ElseBody:if (!item.startsWith("/") && classPathFile.getParent().isRoot()) {  target.addToAttachmentList(Attachments.CLASS_PATH_ENTRIES,ModuleIdentifier.create(ServiceModuleLoader.MODULE_PREFIX + classPathFile.getName()));} else if (item.startsWith("/")) {  ModuleIdentifier moduleIdentifier=externalModuleService.addExternalModule(classPathFile);  target.addToAttachmentList(Attachments.CLASS_PATH_ENTRIES,moduleIdentifier);  log.debugf("Resource %s added as external jar %s",classPathFile,resourceRoot.getRoot());} else {  log.warn("Class Path entry " + item + " in "+ resourceRoot.getRoot()+ "  does not point to a valid jar for a Class-Path reference.");} @AT@ 7347 @LENGTH@ 894
---------UPD IfStatement@@if (isInside(classPathFile,deploymentDirRoot)) {  if (classPathFile.getParent().equals(deploymentDirRoot)) {    target.addToAttachmentList(Attachments.CLASS_PATH_ENTRIES,ModuleIdentifier.create(ServiceModuleLoader.MODULE_PREFIX + classPathFile.getName()));  } else {    log.warn("Class Path entries that references nestled jars inside another deployment are disallowed");  }} else {  ModuleIdentifier moduleIdentifier=externalModuleService.addExternalModule(classPathFile);  target.addToAttachmentList(Attachments.CLASS_PATH_ENTRIES,moduleIdentifier);  log.debugf("Resource %s added as external jar %s",classPathFile,resourceRoot.getRoot());} @TO@ if (!item.startsWith("/") && classPathFile.getParent().isRoot()) {  target.addToAttachmentList(Attachments.CLASS_PATH_ENTRIES,ModuleIdentifier.create(ServiceModuleLoader.MODULE_PREFIX + classPathFile.getName()));} else if (item.startsWith("/")) {  ModuleIdentifier moduleIdentifier=externalModuleService.addExternalModule(classPathFile);  target.addToAttachmentList(Attachments.CLASS_PATH_ENTRIES,moduleIdentifier);  log.debugf("Resource %s added as external jar %s",classPathFile,resourceRoot.getRoot());} else {  log.warn("Class Path entry " + item + " in "+ resourceRoot.getRoot()+ "  does not point to a valid jar for a Class-Path reference.");} @AT@ 7347 @LENGTH@ 894
------------INS InfixExpression@@!item.startsWith("/") && classPathFile.getParent().isRoot() @TO@ IfStatement@@if (isInside(classPathFile,deploymentDirRoot)) {  if (classPathFile.getParent().equals(deploymentDirRoot)) {    target.addToAttachmentList(Attachments.CLASS_PATH_ENTRIES,ModuleIdentifier.create(ServiceModuleLoader.MODULE_PREFIX + classPathFile.getName()));  } else {    log.warn("Class Path entries that references nestled jars inside another deployment are disallowed");  }} else {  ModuleIdentifier moduleIdentifier=externalModuleService.addExternalModule(classPathFile);  target.addToAttachmentList(Attachments.CLASS_PATH_ENTRIES,moduleIdentifier);  log.debugf("Resource %s added as external jar %s",classPathFile,resourceRoot.getRoot());} @AT@ 7150 @LENGTH@ 59
---------------INS PrefixExpression@@!item.startsWith("/") @TO@ InfixExpression@@!item.startsWith("/") && classPathFile.getParent().isRoot() @AT@ 7150 @LENGTH@ 21
------------------INS Operator@@! @TO@ PrefixExpression@@!item.startsWith("/") @AT@ 7150 @LENGTH@ 1
------------------INS MethodInvocation@@item.startsWith("/") @TO@ PrefixExpression@@!item.startsWith("/") @AT@ 7151 @LENGTH@ 20
---------------------INS SimpleName@@Name:item @TO@ MethodInvocation@@item.startsWith("/") @AT@ 7151 @LENGTH@ 4
---------------------INS SimpleName@@MethodName:startsWith:["/"] @TO@ MethodInvocation@@item.startsWith("/") @AT@ 7156 @LENGTH@ 15
------------------------INS StringLiteral@@"/" @TO@ SimpleName@@MethodName:startsWith:["/"] @AT@ 7167 @LENGTH@ 3
---------------INS Operator@@&& @TO@ InfixExpression@@!item.startsWith("/") && classPathFile.getParent().isRoot() @AT@ 7171 @LENGTH@ 2
---------------INS MethodInvocation@@classPathFile.getParent().isRoot() @TO@ InfixExpression@@!item.startsWith("/") && classPathFile.getParent().isRoot() @AT@ 7175 @LENGTH@ 34
------------------INS MethodInvocation@@MethodName:getParent:[] @TO@ MethodInvocation@@classPathFile.getParent().isRoot() @AT@ 7175 @LENGTH@ 25
------------------INS SimpleName@@Name:classPathFile @TO@ MethodInvocation@@classPathFile.getParent().isRoot() @AT@ 7175 @LENGTH@ 13
------------------INS SimpleName@@MethodName:isRoot:[] @TO@ MethodInvocation@@classPathFile.getParent().isRoot() @AT@ 7201 @LENGTH@ 8
------------DEL MethodInvocation@@isInside(classPathFile,deploymentDirRoot) @AT@ 7350 @LENGTH@ 41
---------------DEL SimpleName@@MethodName:isInside:[classPathFile, deploymentDirRoot] @AT@ 7350 @LENGTH@ 41
------------------DEL SimpleName@@classPathFile @AT@ 7359 @LENGTH@ 13
------------------DEL SimpleName@@deploymentDirRoot @AT@ 7373 @LENGTH@ 17
------------UPD Block@@ThenBody:{  if (classPathFile.getParent().equals(deploymentDirRoot)) {    target.addToAttachmentList(Attachments.CLASS_PATH_ENTRIES,ModuleIdentifier.create(ServiceModuleLoader.MODULE_PREFIX + classPathFile.getName()));  } else {    log.warn("Class Path entries that references nestled jars inside another deployment are disallowed");  }} @TO@ ElseBody:if (item.startsWith("/")) {  ModuleIdentifier moduleIdentifier=externalModuleService.addExternalModule(classPathFile);  target.addToAttachmentList(Attachments.CLASS_PATH_ENTRIES,moduleIdentifier);  log.debugf("Resource %s added as external jar %s",classPathFile,resourceRoot.getRoot());} else {  log.warn("Class Path entry " + item + " in "+ resourceRoot.getRoot()+ "  does not point to a valid jar for a Class-Path reference.");} @AT@ 7393 @LENGTH@ 502
---------------UPD IfStatement@@if (classPathFile.getParent().equals(deploymentDirRoot)) {  target.addToAttachmentList(Attachments.CLASS_PATH_ENTRIES,ModuleIdentifier.create(ServiceModuleLoader.MODULE_PREFIX + classPathFile.getName()));} else {  log.warn("Class Path entries that references nestled jars inside another deployment are disallowed");} @TO@ if (item.startsWith("/")) {  ModuleIdentifier moduleIdentifier=externalModuleService.addExternalModule(classPathFile);  target.addToAttachmentList(Attachments.CLASS_PATH_ENTRIES,moduleIdentifier);  log.debugf("Resource %s added as external jar %s",classPathFile,resourceRoot.getRoot());} else {  log.warn("Class Path entry " + item + " in "+ resourceRoot.getRoot()+ "  does not point to a valid jar for a Class-Path reference.");} @AT@ 7473 @LENGTH@ 404
------------------UPD MethodInvocation@@classPathFile.getParent().equals(deploymentDirRoot) @TO@ item.startsWith("/") @AT@ 7476 @LENGTH@ 51
---------------------DEL MethodInvocation@@MethodName:getParent:[] @AT@ 7476 @LENGTH@ 25
---------------------UPD SimpleName@@Name:classPathFile @TO@ Name:item @AT@ 7476 @LENGTH@ 13
---------------------UPD SimpleName@@MethodName:equals:[deploymentDirRoot] @TO@ MethodName:startsWith:["/"] @AT@ 7502 @LENGTH@ 25
------------------------INS StringLiteral@@"/" @TO@ SimpleName@@MethodName:equals:[deploymentDirRoot] @AT@ 7478 @LENGTH@ 3
------------------------INS StringLiteral@@"/" @TO@ SimpleName@@MethodName:equals:[deploymentDirRoot] @AT@ 7478 @LENGTH@ 3
------------------------DEL SimpleName@@deploymentDirRoot @AT@ 7509 @LENGTH@ 17
------------------UPD Block@@ElseBody:{  log.warn("Class Path entries that references nestled jars inside another deployment are disallowed");} @TO@ ElseBody:{  log.warn("Class Path entry " + item + " in "+ resourceRoot.getRoot()+ "  does not point to a valid jar for a Class-Path reference.");} @AT@ 7728 @LENGTH@ 149
---------------------UPD ExpressionStatement@@MethodInvocation:log.warn("Class Path entries that references nestled jars inside another deployment are disallowed") @TO@ MethodInvocation:log.warn("Class Path entry " + item + " in "+ resourceRoot.getRoot()+ "  does not point to a valid jar for a Class-Path reference.") @AT@ 7754 @LENGTH@ 101
------------------------UPD MethodInvocation@@log.warn("Class Path entries that references nestled jars inside another deployment are disallowed") @TO@ log.warn("Class Path entry " + item + " in "+ resourceRoot.getRoot()+ "  does not point to a valid jar for a Class-Path reference.") @AT@ 7754 @LENGTH@ 100
---------------------------UPD SimpleName@@MethodName:warn:["Class Path entries that references nestled jars inside another deployment are disallowed"] @TO@ MethodName:warn:["Class Path entry " + item + " in "+ resourceRoot.getRoot()+ "  does not point to a valid jar for a Class-Path reference."] @AT@ 7758 @LENGTH@ 96
------------------------------DEL StringLiteral@@"Class Path entries that references nestled jars inside another deployment are disallowed" @AT@ 7763 @LENGTH@ 90
------------------------------INS InfixExpression@@"Class Path entry " + item + " in "+ resourceRoot.getRoot()+ "  does not point to a valid jar for a Class-Path reference." @TO@ SimpleName@@MethodName:warn:["Class Path entries that references nestled jars inside another deployment are disallowed"] @AT@ 7861 @LENGTH@ 156
---------------------------------INS StringLiteral@@"Class Path entry " @TO@ InfixExpression@@"Class Path entry " + item + " in "+ resourceRoot.getRoot()+ "  does not point to a valid jar for a Class-Path reference." @AT@ 7861 @LENGTH@ 19
---------------------------------INS Operator@@+ @TO@ InfixExpression@@"Class Path entry " + item + " in "+ resourceRoot.getRoot()+ "  does not point to a valid jar for a Class-Path reference." @AT@ 7880 @LENGTH@ 1
---------------------------------INS SimpleName@@item @TO@ InfixExpression@@"Class Path entry " + item + " in "+ resourceRoot.getRoot()+ "  does not point to a valid jar for a Class-Path reference." @AT@ 7883 @LENGTH@ 4
---------------------------------INS StringLiteral@@" in " @TO@ InfixExpression@@"Class Path entry " + item + " in "+ resourceRoot.getRoot()+ "  does not point to a valid jar for a Class-Path reference." @AT@ 7890 @LENGTH@ 6
---------------------------------INS MethodInvocation@@resourceRoot.getRoot() @TO@ InfixExpression@@"Class Path entry " + item + " in "+ resourceRoot.getRoot()+ "  does not point to a valid jar for a Class-Path reference." @AT@ 7931 @LENGTH@ 22
------------------------------------INS SimpleName@@Name:resourceRoot @TO@ MethodInvocation@@resourceRoot.getRoot() @AT@ 7931 @LENGTH@ 12
------------------------------------INS SimpleName@@MethodName:getRoot:[] @TO@ MethodInvocation@@resourceRoot.getRoot() @AT@ 7944 @LENGTH@ 9
---------------------------------INS StringLiteral@@"  does not point to a valid jar for a Class-Path reference." @TO@ InfixExpression@@"Class Path entry " + item + " in "+ resourceRoot.getRoot()+ "  does not point to a valid jar for a Class-Path reference." @AT@ 7956 @LENGTH@ 61
------------------MOV Block@@ElseBody:{  ModuleIdentifier moduleIdentifier=externalModuleService.addExternalModule(classPathFile);  target.addToAttachmentList(Attachments.CLASS_PATH_ENTRIES,moduleIdentifier);  log.debugf("Resource %s added as external jar %s",classPathFile,resourceRoot.getRoot());} @TO@ IfStatement@@if (classPathFile.getParent().equals(deploymentDirRoot)) {  target.addToAttachmentList(Attachments.CLASS_PATH_ENTRIES,ModuleIdentifier.create(ServiceModuleLoader.MODULE_PREFIX + classPathFile.getName()));} else {  log.warn("Class Path entries that references nestled jars inside another deployment are disallowed");} @AT@ 7901 @LENGTH@ 340
------------MOV Block@@ThenBody:{  target.addToAttachmentList(Attachments.CLASS_PATH_ENTRIES,ModuleIdentifier.create(ServiceModuleLoader.MODULE_PREFIX + classPathFile.getName()));} @TO@ IfStatement@@if (isInside(classPathFile,deploymentDirRoot)) {  if (classPathFile.getParent().equals(deploymentDirRoot)) {    target.addToAttachmentList(Attachments.CLASS_PATH_ENTRIES,ModuleIdentifier.create(ServiceModuleLoader.MODULE_PREFIX + classPathFile.getName()));  } else {    log.warn("Class Path entries that references nestled jars inside another deployment are disallowed");  }} else {  ModuleIdentifier moduleIdentifier=externalModuleService.addExternalModule(classPathFile);  target.addToAttachmentList(Attachments.CLASS_PATH_ENTRIES,moduleIdentifier);  log.debugf("Resource %s added as external jar %s",classPathFile,resourceRoot.getRoot());} @AT@ 7529 @LENGTH@ 193
------------UPD Block@@ElseBody:{  ModuleIdentifier moduleIdentifier=externalModuleService.addExternalModule(classPathFile);  target.addToAttachmentList(Attachments.CLASS_PATH_ENTRIES,moduleIdentifier);  log.debugf("Resource %s added as external jar %s",classPathFile,resourceRoot.getRoot());} @TO@ ThenBody:{  ModuleIdentifier moduleIdentifier=externalModuleService.addExternalModule(classPathFile);  target.addToAttachmentList(Attachments.CLASS_PATH_ENTRIES,moduleIdentifier);  log.debugf("Resource %s added as external jar %s",classPathFile,resourceRoot.getRoot());} @AT@ 7901 @LENGTH@ 340


UPD MethodDeclaration@@private, String, MethodName:getFtpUrl,  @TO@ protected, String, MethodName:getFtpUrl,  @AT@ 949 @LENGTH@ 160
---UPD Modifier@@private @TO@ protected @AT@ 949 @LENGTH@ 7


UPD ExpressionStatement@@MethodInvocation:assertEquals("Could not find 1 processors: " + s,1,s.size()) @TO@ MethodInvocation:assertEquals("Could not find 1 processors: " + s,2,s.size()) @AT@ 2720 @LENGTH@ 63
---UPD MethodInvocation@@assertEquals("Could not find 1 processors: " + s,1,s.size()) @TO@ assertEquals("Could not find 1 processors: " + s,2,s.size()) @AT@ 2720 @LENGTH@ 62
------UPD SimpleName@@MethodName:assertEquals:["Could not find 1 processors: " + s, 1, s.size()] @TO@ MethodName:assertEquals:["Could not find 1 processors: " + s, 2, s.size()] @AT@ 2720 @LENGTH@ 62
---------UPD NumberLiteral@@1 @TO@ 2 @AT@ 2770 @LENGTH@ 1


UPD SwitchStatement@@switch (ejbJarElement) {case SESSION_TYPE:  String sessionType=getElementText(reader);if (sessionType.equals("Singleton")) {  sessionBean.setSessionType(SessionType.Singleton);} else {  super.processElement(sessionBean,reader);}return;case LOCAL_BEAN:reader.getElementText();sessionBean.setNoInterfaceBean(true);return;case CONCURRENCY_MANAGEMENT_TYPE:String concurrencyManagementType=getElementText(reader);if (concurrencyManagementType.equals("Bean")) {sessionBean.setConcurrencyManagementType(ConcurrencyManagementType.BEAN);} else if (concurrencyManagementType.equals("Container")) {sessionBean.setConcurrencyManagementType(ConcurrencyManagementType.CONTAINER);} else {throw unexpectedValue(reader,new Exception("Unexpected value: " + concurrencyManagementType + " for concurrency-management-type"));}return;case CONCURRENT_METHOD:if (sessionBean.getConcurrentMethods() == null) {sessionBean.setConcurrentMethods(new ConcurrentMethodsMetaData());}sessionBean.getConcurrentMethods().add(ConcurrentMethodMetaDataParser.INSTANCE.parse(reader));return;case ASYNC_METHOD:if (sessionBean.getAsyncMethods() == null) {sessionBean.setAsyncMethods(new AsyncMethodsMetaData());}sessionBean.getAsyncMethods().add(AsyncMethodMetaDataParser.INSTANCE.parse(reader));return;case DEPENDS_ON:DependsOnMetaData dependsOn=DependsOnMetaDataParser.INSTANCE.parse(reader);sessionBean.setDependsOnMetaData(dependsOn);return;case STATEFUL_TIMEOUT:throw new RuntimeException("<stateful-timeout> element parsing is not yet implemented");case INIT_ON_STARTUP:String initOnStartup=getElementText(reader);if (initOnStartup == null) {throw unexpectedValue(reader,new Exception("Unexpected null value for init-on-startup element"));}sessionBean.setInitOnStartup(Boolean.parseBoolean(initOnStartup));return;case AFTER_BEGIN_METHOD:throw new RuntimeException("<after-begin-method> element parsing is not yet implemented");case BEFORE_COMPLETION_METHOD:throw new RuntimeException("<before-completion-method> element parsing is not yet implemented");case AFTER_COMPLETION_METHOD:throw new RuntimeException("<after-completion-method> element parsing is not yet implemented");case AROUND_TIMEOUT:throw new RuntimeException("<around-timeout> element parsing is not yet implemented");case TIMER:List<TimerMetaData> timers=sessionBean.getTimers();if (timers == null) {timers=new ArrayList<TimerMetaData>();sessionBean.setTimers(timers);}TimerMetaData timerMetaData=TimerMetaDataParser.INSTANCE.parse(reader);timers.add(timerMetaData);return;default :super.processElement(sessionBean,reader);return;} @TO@ switch (ejbJarElement) {case LOCAL_BEAN:  reader.getElementText();sessionBean.setNoInterfaceBean(true);return;case CONCURRENCY_MANAGEMENT_TYPE:String concurrencyManagementType=getElementText(reader);if (concurrencyManagementType.equals("Bean")) {sessionBean.setConcurrencyManagementType(ConcurrencyManagementType.BEAN);} else if (concurrencyManagementType.equals("Container")) {sessionBean.setConcurrencyManagementType(ConcurrencyManagementType.CONTAINER);} else {throw unexpectedValue(reader,new Exception("Unexpected value: " + concurrencyManagementType + " for concurrency-management-type"));}return;case CONCURRENT_METHOD:if (sessionBean.getConcurrentMethods() == null) {sessionBean.setConcurrentMethods(new ConcurrentMethodsMetaData());}sessionBean.getConcurrentMethods().add(ConcurrentMethodMetaDataParser.INSTANCE.parse(reader));return;case ASYNC_METHOD:if (sessionBean.getAsyncMethods() == null) {sessionBean.setAsyncMethods(new AsyncMethodsMetaData());}sessionBean.getAsyncMethods().add(AsyncMethodMetaDataParser.INSTANCE.parse(reader));return;case DEPENDS_ON:DependsOnMetaData dependsOn=DependsOnMetaDataParser.INSTANCE.parse(reader);sessionBean.setDependsOnMetaData(dependsOn);return;case STATEFUL_TIMEOUT:throw new RuntimeException("<stateful-timeout> element parsing is not yet implemented");case INIT_ON_STARTUP:String initOnStartup=getElementText(reader);if (initOnStartup == null) {throw unexpectedValue(reader,new Exception("Unexpected null value for init-on-startup element"));}sessionBean.setInitOnStartup(Boolean.parseBoolean(initOnStartup));return;case AFTER_BEGIN_METHOD:throw new RuntimeException("<after-begin-method> element parsing is not yet implemented");case BEFORE_COMPLETION_METHOD:throw new RuntimeException("<before-completion-method> element parsing is not yet implemented");case AFTER_COMPLETION_METHOD:throw new RuntimeException("<after-completion-method> element parsing is not yet implemented");case AROUND_TIMEOUT:throw new RuntimeException("<around-timeout> element parsing is not yet implemented");case TIMER:List<TimerMetaData> timers=sessionBean.getTimers();if (timers == null) {timers=new ArrayList<TimerMetaData>();sessionBean.setTimers(timers);}TimerMetaData timerMetaData=TimerMetaDataParser.INSTANCE.parse(reader);timers.add(timerMetaData);return;default :super.processElement(sessionBean,reader);return;} @AT@ 2606 @LENGTH@ 3750
---DEL SwitchCase@@case SESSION_TYPE: @AT@ 2646 @LENGTH@ 18
------DEL SimpleName@@SESSION_TYPE @AT@ 2651 @LENGTH@ 12
---DEL VariableDeclarationStatement@@String sessionType=getElementText(reader); @AT@ 2677 @LENGTH@ 44
------DEL SimpleType@@String @AT@ 2677 @LENGTH@ 6
------DEL VariableDeclarationFragment@@sessionType=getElementText(reader) @AT@ 2684 @LENGTH@ 36
---------DEL SimpleName@@sessionType @AT@ 2684 @LENGTH@ 11
---------DEL MethodInvocation@@getElementText(reader) @AT@ 2698 @LENGTH@ 22
------------DEL SimpleName@@MethodName:getElementText:[reader] @AT@ 2698 @LENGTH@ 22
---------------DEL SimpleName@@reader @AT@ 2713 @LENGTH@ 6
---DEL IfStatement@@if (sessionType.equals("Singleton")) {  sessionBean.setSessionType(SessionType.Singleton);} else {  super.processElement(sessionBean,reader);} @AT@ 2734 @LENGTH@ 233
------DEL Block@@ThenBody:{  sessionBean.setSessionType(SessionType.Singleton);} @AT@ 2783 @LENGTH@ 81
---------DEL ExpressionStatement@@MethodInvocation:sessionBean.setSessionType(SessionType.Singleton) @AT@ 2800 @LENGTH@ 50
------------DEL MethodInvocation@@sessionBean.setSessionType(SessionType.Singleton) @AT@ 2800 @LENGTH@ 49
---------------DEL SimpleName@@Name:sessionBean @AT@ 2800 @LENGTH@ 11
---------------DEL SimpleName@@MethodName:setSessionType:[SessionType.Singleton] @AT@ 2812 @LENGTH@ 37
------------------DEL QualifiedName@@SessionType.Singleton @AT@ 2827 @LENGTH@ 21
---------------------DEL SimpleName@@SessionType @AT@ 2827 @LENGTH@ 11
---------------------DEL SimpleName@@Singleton @AT@ 2839 @LENGTH@ 9
------DEL Block@@ElseBody:{  super.processElement(sessionBean,reader);} @AT@ 2894 @LENGTH@ 73
---------DEL ExpressionStatement@@SuperMethodInvocation:super.processElement(sessionBean,reader) @AT@ 2911 @LENGTH@ 42
------------DEL SuperMethodInvocation@@super.processElement(sessionBean,reader) @AT@ 2911 @LENGTH@ 41
---------------DEL SimpleName@@MethodName:processElement:[sessionBean, reader] @AT@ 2917 @LENGTH@ 14
---------------DEL SimpleName@@sessionBean @AT@ 2932 @LENGTH@ 11
---------------DEL SimpleName@@reader @AT@ 2945 @LENGTH@ 6
---DEL ReturnStatement@@ @AT@ 2980 @LENGTH@ 7


UPD IfStatement@@if (column.getPrecision() > 0 && (fieldType.equals(JavaType.DOUBLE_OBJECT) || fieldType.equals(JavaType.DOUBLE_PRIMITIVE) || fieldType.equals(new JavaType("java.math.BigDecimal")))) {  columnBuilder.addIntegerAttribute("precision",column.getPrecision());  columnBuilder.addIntegerAttribute("scale",column.getScale());} @TO@ if (column.getScale() > 0 && (fieldType.equals(JavaType.DOUBLE_OBJECT) || fieldType.equals(JavaType.DOUBLE_PRIMITIVE) || fieldType.equals(new JavaType("java.math.BigDecimal")))) {  columnBuilder.addIntegerAttribute("precision",column.getColumnSize());  columnBuilder.addIntegerAttribute("scale",column.getScale());} @AT@ 31888 @LENGTH@ 327
---UPD InfixExpression@@column.getPrecision() > 0 && (fieldType.equals(JavaType.DOUBLE_OBJECT) || fieldType.equals(JavaType.DOUBLE_PRIMITIVE) || fieldType.equals(new JavaType("java.math.BigDecimal"))) @TO@ column.getScale() > 0 && (fieldType.equals(JavaType.DOUBLE_OBJECT) || fieldType.equals(JavaType.DOUBLE_PRIMITIVE) || fieldType.equals(new JavaType("java.math.BigDecimal"))) @AT@ 31892 @LENGTH@ 176
------UPD InfixExpression@@column.getPrecision() > 0 @TO@ column.getScale() > 0 @AT@ 31892 @LENGTH@ 25
---------UPD MethodInvocation@@column.getPrecision() @TO@ column.getScale() @AT@ 31892 @LENGTH@ 21
------------UPD SimpleName@@MethodName:getPrecision:[] @TO@ MethodName:getScale:[] @AT@ 31899 @LENGTH@ 14
---UPD Block@@ThenBody:{  columnBuilder.addIntegerAttribute("precision",column.getPrecision());  columnBuilder.addIntegerAttribute("scale",column.getScale());} @TO@ ThenBody:{  columnBuilder.addIntegerAttribute("precision",column.getColumnSize());  columnBuilder.addIntegerAttribute("scale",column.getScale());} @AT@ 32070 @LENGTH@ 145
------UPD ExpressionStatement@@MethodInvocation:columnBuilder.addIntegerAttribute("precision",column.getPrecision()) @TO@ MethodInvocation:columnBuilder.addIntegerAttribute("precision",column.getColumnSize()) @AT@ 32075 @LENGTH@ 70
---------UPD MethodInvocation@@columnBuilder.addIntegerAttribute("precision",column.getPrecision()) @TO@ columnBuilder.addIntegerAttribute("precision",column.getColumnSize()) @AT@ 32075 @LENGTH@ 69
------------UPD SimpleName@@MethodName:addIntegerAttribute:["precision", column.getPrecision()] @TO@ MethodName:addIntegerAttribute:["precision", column.getColumnSize()] @AT@ 32089 @LENGTH@ 55
---------------UPD MethodInvocation@@column.getPrecision() @TO@ column.getColumnSize() @AT@ 32122 @LENGTH@ 21
------------------UPD SimpleName@@MethodName:getPrecision:[] @TO@ MethodName:getColumnSize:[] @AT@ 32129 @LENGTH@ 14


UPD ExpressionStatement@@MethodInvocation:from("rss:file:src/test/data/rss20.xml?splitEntries=false&consumer.delay=100").to("mock:result") @TO@ MethodInvocation:from("rss:file:src/test/data/rss20.xml?splitEntries=false").to("mock:result") @AT@ 2090 @LENGTH@ 97
---UPD MethodInvocation@@from("rss:file:src/test/data/rss20.xml?splitEntries=false&consumer.delay=100").to("mock:result") @TO@ from("rss:file:src/test/data/rss20.xml?splitEntries=false").to("mock:result") @AT@ 2090 @LENGTH@ 96
------UPD MethodInvocation@@MethodName:from:["rss:file:src/test/data/rss20.xml?splitEntries=false&consumer.delay=100"] @TO@ MethodName:from:["rss:file:src/test/data/rss20.xml?splitEntries=false"] @AT@ 2090 @LENGTH@ 78
---------UPD StringLiteral@@"rss:file:src/test/data/rss20.xml?splitEntries=false&consumer.delay=100" @TO@ "rss:file:src/test/data/rss20.xml?splitEntries=false" @AT@ 2095 @LENGTH@ 72


INS MethodDeclaration@@public, void, MethodName:testPostHandleNullPath, Exception,  @TO@ TypeDeclaration@@[public]ContentTypeInterceptorTests,  @AT@ 1999 @LENGTH@ 317
---INS Modifier@@public @TO@ MethodDeclaration@@public, void, MethodName:testPostHandleNullPath, Exception,  @AT@ 1999 @LENGTH@ 6
---INS PrimitiveType@@void @TO@ MethodDeclaration@@public, void, MethodName:testPostHandleNullPath, Exception,  @AT@ 2006 @LENGTH@ 4
---INS SimpleName@@MethodName:testPostHandleNullPath @TO@ MethodDeclaration@@public, void, MethodName:testPostHandleNullPath, Exception,  @AT@ 2011 @LENGTH@ 22
---INS SimpleType@@Exception @TO@ MethodDeclaration@@public, void, MethodName:testPostHandleNullPath, Exception,  @AT@ 2043 @LENGTH@ 9
---INS ExpressionStatement@@MethodInvocation:interceptor.setExtensions(Collections.singleton("rss")) @TO@ MethodDeclaration@@public, void, MethodName:testPostHandleNullPath, Exception,  @AT@ 2057 @LENGTH@ 56
------INS MethodInvocation@@interceptor.setExtensions(Collections.singleton("rss")) @TO@ ExpressionStatement@@MethodInvocation:interceptor.setExtensions(Collections.singleton("rss")) @AT@ 2057 @LENGTH@ 55
---------INS SimpleName@@Name:interceptor @TO@ MethodInvocation@@interceptor.setExtensions(Collections.singleton("rss")) @AT@ 2057 @LENGTH@ 11
---------INS SimpleName@@MethodName:setExtensions:[Collections.singleton("rss")] @TO@ MethodInvocation@@interceptor.setExtensions(Collections.singleton("rss")) @AT@ 2069 @LENGTH@ 43
------------INS MethodInvocation@@Collections.singleton("rss") @TO@ SimpleName@@MethodName:setExtensions:[Collections.singleton("rss")] @AT@ 2083 @LENGTH@ 28
---------------INS SimpleName@@Name:Collections @TO@ MethodInvocation@@Collections.singleton("rss") @AT@ 2083 @LENGTH@ 11
---------------INS SimpleName@@MethodName:singleton:["rss"] @TO@ MethodInvocation@@Collections.singleton("rss") @AT@ 2095 @LENGTH@ 16
------------------INS StringLiteral@@"rss" @TO@ SimpleName@@MethodName:singleton:["rss"] @AT@ 2105 @LENGTH@ 5
---INS VariableDeclarationStatement@@ModelAndView modelAndView=new ModelAndView("foo"); @TO@ MethodDeclaration@@public, void, MethodName:testPostHandleNullPath, Exception,  @AT@ 2116 @LENGTH@ 52
------INS SimpleType@@ModelAndView @TO@ VariableDeclarationStatement@@ModelAndView modelAndView=new ModelAndView("foo"); @AT@ 2116 @LENGTH@ 12
------INS VariableDeclarationFragment@@modelAndView=new ModelAndView("foo") @TO@ VariableDeclarationStatement@@ModelAndView modelAndView=new ModelAndView("foo"); @AT@ 2129 @LENGTH@ 38
---------INS SimpleName@@modelAndView @TO@ VariableDeclarationFragment@@modelAndView=new ModelAndView("foo") @AT@ 2129 @LENGTH@ 12
---------INS ClassInstanceCreation@@ModelAndView["foo"] @TO@ VariableDeclarationFragment@@modelAndView=new ModelAndView("foo") @AT@ 2144 @LENGTH@ 23
------------INS New@@new @TO@ ClassInstanceCreation@@ModelAndView["foo"] @AT@ 2144 @LENGTH@ 3
------------INS SimpleType@@ModelAndView @TO@ ClassInstanceCreation@@ModelAndView["foo"] @AT@ 2148 @LENGTH@ 12
------------INS StringLiteral@@"foo" @TO@ ClassInstanceCreation@@ModelAndView["foo"] @AT@ 2161 @LENGTH@ 5
---INS ExpressionStatement@@MethodInvocation:request.setPathInfo(null) @TO@ MethodDeclaration@@public, void, MethodName:testPostHandleNullPath, Exception,  @AT@ 2171 @LENGTH@ 26
------INS MethodInvocation@@request.setPathInfo(null) @TO@ ExpressionStatement@@MethodInvocation:request.setPathInfo(null) @AT@ 2171 @LENGTH@ 25
---------INS SimpleName@@Name:request @TO@ MethodInvocation@@request.setPathInfo(null) @AT@ 2171 @LENGTH@ 7
---------INS SimpleName@@MethodName:setPathInfo:[null] @TO@ MethodInvocation@@request.setPathInfo(null) @AT@ 2179 @LENGTH@ 17
------------INS NullLiteral@@null @TO@ SimpleName@@MethodName:setPathInfo:[null] @AT@ 2191 @LENGTH@ 4
---INS ExpressionStatement@@MethodInvocation:interceptor.postHandle(request,response,null,modelAndView) @TO@ MethodDeclaration@@public, void, MethodName:testPostHandleNullPath, Exception,  @AT@ 2200 @LENGTH@ 62
------INS MethodInvocation@@interceptor.postHandle(request,response,null,modelAndView) @TO@ ExpressionStatement@@MethodInvocation:interceptor.postHandle(request,response,null,modelAndView) @AT@ 2200 @LENGTH@ 61
---------INS SimpleName@@Name:interceptor @TO@ MethodInvocation@@interceptor.postHandle(request,response,null,modelAndView) @AT@ 2200 @LENGTH@ 11
---------INS SimpleName@@MethodName:postHandle:[request, response, null, modelAndView] @TO@ MethodInvocation@@interceptor.postHandle(request,response,null,modelAndView) @AT@ 2212 @LENGTH@ 49
------------INS SimpleName@@request @TO@ SimpleName@@MethodName:postHandle:[request, response, null, modelAndView] @AT@ 2223 @LENGTH@ 7
------------INS SimpleName@@response @TO@ SimpleName@@MethodName:postHandle:[request, response, null, modelAndView] @AT@ 2232 @LENGTH@ 8
------------INS NullLiteral@@null @TO@ SimpleName@@MethodName:postHandle:[request, response, null, modelAndView] @AT@ 2242 @LENGTH@ 4
------------INS SimpleName@@modelAndView @TO@ SimpleName@@MethodName:postHandle:[request, response, null, modelAndView] @AT@ 2248 @LENGTH@ 12
---INS ExpressionStatement@@MethodInvocation:assertEquals("foo",modelAndView.getViewName()) @TO@ MethodDeclaration@@public, void, MethodName:testPostHandleNullPath, Exception,  @AT@ 2265 @LENGTH@ 48
------INS MethodInvocation@@assertEquals("foo",modelAndView.getViewName()) @TO@ ExpressionStatement@@MethodInvocation:assertEquals("foo",modelAndView.getViewName()) @AT@ 2265 @LENGTH@ 47
---------INS SimpleName@@MethodName:assertEquals:["foo", modelAndView.getViewName()] @TO@ MethodInvocation@@assertEquals("foo",modelAndView.getViewName()) @AT@ 2265 @LENGTH@ 47
------------INS StringLiteral@@"foo" @TO@ SimpleName@@MethodName:assertEquals:["foo", modelAndView.getViewName()] @AT@ 2278 @LENGTH@ 5
------------INS MethodInvocation@@modelAndView.getViewName() @TO@ SimpleName@@MethodName:assertEquals:["foo", modelAndView.getViewName()] @AT@ 2285 @LENGTH@ 26
---------------INS SimpleName@@Name:modelAndView @TO@ MethodInvocation@@modelAndView.getViewName() @AT@ 2285 @LENGTH@ 12
---------------INS SimpleName@@MethodName:getViewName:[] @TO@ MethodInvocation@@modelAndView.getViewName() @AT@ 2298 @LENGTH@ 13


INS MethodDeclaration@@public, void, MethodName:onClose, Connection connection,  @TO@ TypeDeclaration@@[public]CompositeConnectionListener, [ConnectionListener] @AT@ 1057 @LENGTH@ 135
---INS Modifier@@public @TO@ MethodDeclaration@@public, void, MethodName:onClose, Connection connection,  @AT@ 1057 @LENGTH@ 6
---INS PrimitiveType@@void @TO@ MethodDeclaration@@public, void, MethodName:onClose, Connection connection,  @AT@ 1064 @LENGTH@ 4
---INS SimpleName@@MethodName:onClose @TO@ MethodDeclaration@@public, void, MethodName:onClose, Connection connection,  @AT@ 1069 @LENGTH@ 7
---INS SingleVariableDeclaration@@Connection connection @TO@ MethodDeclaration@@public, void, MethodName:onClose, Connection connection,  @AT@ 1077 @LENGTH@ 21
------INS SimpleType@@Connection @TO@ SingleVariableDeclaration@@Connection connection @AT@ 1077 @LENGTH@ 10
------INS SimpleName@@connection @TO@ SingleVariableDeclaration@@Connection connection @AT@ 1088 @LENGTH@ 10
---INS EnhancedForStatement@@for (ConnectionListener delegate : delegates) {  delegate.onClose(connection);} @TO@ MethodDeclaration@@public, void, MethodName:onClose, Connection connection,  @AT@ 1104 @LENGTH@ 84
------INS SingleVariableDeclaration@@ConnectionListener delegate @TO@ EnhancedForStatement@@for (ConnectionListener delegate : delegates) {  delegate.onClose(connection);} @AT@ 1109 @LENGTH@ 27
---------INS SimpleType@@ConnectionListener @TO@ SingleVariableDeclaration@@ConnectionListener delegate @AT@ 1109 @LENGTH@ 18
---------INS SimpleName@@delegate @TO@ SingleVariableDeclaration@@ConnectionListener delegate @AT@ 1128 @LENGTH@ 8
------INS SimpleName@@delegates @TO@ EnhancedForStatement@@for (ConnectionListener delegate : delegates) {  delegate.onClose(connection);} @AT@ 1139 @LENGTH@ 9
------INS ExpressionStatement@@MethodInvocation:delegate.onClose(connection) @TO@ EnhancedForStatement@@for (ConnectionListener delegate : delegates) {  delegate.onClose(connection);} @AT@ 1155 @LENGTH@ 29
---------INS MethodInvocation@@delegate.onClose(connection) @TO@ ExpressionStatement@@MethodInvocation:delegate.onClose(connection) @AT@ 1155 @LENGTH@ 28
------------INS SimpleName@@Name:delegate @TO@ MethodInvocation@@delegate.onClose(connection) @AT@ 1155 @LENGTH@ 8
------------INS SimpleName@@MethodName:onClose:[connection] @TO@ MethodInvocation@@delegate.onClose(connection) @AT@ 1164 @LENGTH@ 19
---------------INS SimpleName@@connection @TO@ SimpleName@@MethodName:onClose:[connection] @AT@ 1172 @LENGTH@ 10


DEL FieldDeclaration@@private, static, final, transient, Logger, [LOG=LoggerFactory.getLogger(ProcessBuilder.class)] @AT@ 2147 @LENGTH@ 90
---DEL Modifier@@private @AT@ 2147 @LENGTH@ 7
---DEL Modifier@@static @AT@ 2155 @LENGTH@ 6
---DEL Modifier@@final @AT@ 2162 @LENGTH@ 5
---DEL Modifier@@transient @AT@ 2168 @LENGTH@ 9
---DEL SimpleType@@Logger @AT@ 2178 @LENGTH@ 6
---DEL VariableDeclarationFragment@@LOG=LoggerFactory.getLogger(ProcessBuilder.class) @AT@ 2185 @LENGTH@ 51
------DEL SimpleName@@LOG @AT@ 2185 @LENGTH@ 3
------DEL MethodInvocation@@LoggerFactory.getLogger(ProcessBuilder.class) @AT@ 2191 @LENGTH@ 45
---------DEL SimpleName@@Name:LoggerFactory @AT@ 2191 @LENGTH@ 13
---------DEL SimpleName@@MethodName:getLogger:[ProcessBuilder.class] @AT@ 2205 @LENGTH@ 31
------------DEL TypeLiteral@@ProcessBuilder.class @AT@ 2215 @LENGTH@ 20


UPD FieldDeclaration@@private, final, Set<ServiceName>, [failedDependencies=new HashSet<ServiceName>()] @TO@ private, final, Set<ServiceName>, [failedDependencies=Collections.synchronizedSet(new HashSet<ServiceName>())] @AT@ 5657 @LENGTH@ 79
---UPD VariableDeclarationFragment@@failedDependencies=new HashSet<ServiceName>() @TO@ failedDependencies=Collections.synchronizedSet(new HashSet<ServiceName>()) @AT@ 5688 @LENGTH@ 47
------INS MethodInvocation@@Collections.synchronizedSet(new HashSet<ServiceName>()) @TO@ VariableDeclarationFragment@@failedDependencies=new HashSet<ServiceName>() @AT@ 5786 @LENGTH@ 55
---------INS SimpleName@@Name:Collections @TO@ MethodInvocation@@Collections.synchronizedSet(new HashSet<ServiceName>()) @AT@ 5786 @LENGTH@ 11
---------INS SimpleName@@MethodName:synchronizedSet:[new HashSet<ServiceName>()] @TO@ MethodInvocation@@Collections.synchronizedSet(new HashSet<ServiceName>()) @AT@ 5798 @LENGTH@ 43
------------MOV ClassInstanceCreation@@HashSet<ServiceName>[] @TO@ SimpleName@@MethodName:synchronizedSet:[new HashSet<ServiceName>()] @AT@ 5709 @LENGTH@ 26


INS FieldDeclaration@@public, static, final, AttachmentKey<String>, [MANAGEMENT_NAME=AttachmentKey.create(String.class)] @TO@ TypeDeclaration@@[public, final]Attachments,  @AT@ 3151 @LENGTH@ 95
---INS Modifier@@public @TO@ FieldDeclaration@@public, static, final, AttachmentKey<String>, [MANAGEMENT_NAME=AttachmentKey.create(String.class)] @AT@ 3151 @LENGTH@ 6
---INS Modifier@@static @TO@ FieldDeclaration@@public, static, final, AttachmentKey<String>, [MANAGEMENT_NAME=AttachmentKey.create(String.class)] @AT@ 3158 @LENGTH@ 6
---INS Modifier@@final @TO@ FieldDeclaration@@public, static, final, AttachmentKey<String>, [MANAGEMENT_NAME=AttachmentKey.create(String.class)] @AT@ 3165 @LENGTH@ 5
---INS ParameterizedType@@AttachmentKey<String> @TO@ FieldDeclaration@@public, static, final, AttachmentKey<String>, [MANAGEMENT_NAME=AttachmentKey.create(String.class)] @AT@ 3171 @LENGTH@ 21
------INS SimpleType@@AttachmentKey @TO@ ParameterizedType@@AttachmentKey<String> @AT@ 3171 @LENGTH@ 13
------INS SimpleType@@String @TO@ ParameterizedType@@AttachmentKey<String> @AT@ 3185 @LENGTH@ 6
---INS VariableDeclarationFragment@@MANAGEMENT_NAME=AttachmentKey.create(String.class) @TO@ FieldDeclaration@@public, static, final, AttachmentKey<String>, [MANAGEMENT_NAME=AttachmentKey.create(String.class)] @AT@ 3193 @LENGTH@ 52
------INS SimpleName@@MANAGEMENT_NAME @TO@ VariableDeclarationFragment@@MANAGEMENT_NAME=AttachmentKey.create(String.class) @AT@ 3193 @LENGTH@ 15
------INS MethodInvocation@@AttachmentKey.create(String.class) @TO@ VariableDeclarationFragment@@MANAGEMENT_NAME=AttachmentKey.create(String.class) @AT@ 3211 @LENGTH@ 34
---------INS SimpleName@@Name:AttachmentKey @TO@ MethodInvocation@@AttachmentKey.create(String.class) @AT@ 3211 @LENGTH@ 13
---------INS SimpleName@@MethodName:create:[String.class] @TO@ MethodInvocation@@AttachmentKey.create(String.class) @AT@ 3225 @LENGTH@ 20
------------INS TypeLiteral@@String.class @TO@ SimpleName@@MethodName:create:[String.class] @AT@ 3232 @LENGTH@ 12


UPD VariableDeclarationStatement@@XMLStreamReader reader=XMLInputFactory.newFactory().createXMLStreamReader(new StreamSource(url.toString())); @TO@ XMLStreamReader reader=XMLInputFactory.newInstance().createXMLStreamReader(new StreamSource(url.toString())); @AT@ 2748 @LENGTH@ 110
---UPD VariableDeclarationFragment@@reader=XMLInputFactory.newFactory().createXMLStreamReader(new StreamSource(url.toString())) @TO@ reader=XMLInputFactory.newInstance().createXMLStreamReader(new StreamSource(url.toString())) @AT@ 2764 @LENGTH@ 93
------UPD MethodInvocation@@XMLInputFactory.newFactory().createXMLStreamReader(new StreamSource(url.toString())) @TO@ XMLInputFactory.newInstance().createXMLStreamReader(new StreamSource(url.toString())) @AT@ 2773 @LENGTH@ 84
---------UPD MethodInvocation@@MethodName:newFactory:[] @TO@ MethodName:newInstance:[] @AT@ 2773 @LENGTH@ 28


UPD TryStatement@@try {  PathAddress address=PathAddress.pathAddress(operation.require(OP_ADDR));  String name=address.getLastElement().getValue();  ModelNode model=context.getSubModel();  model.get(NAME).set(name);  ModelNode pathNode=model.get(PATH);  String failure=pathValidator.validateParameter(PATH,pathNode);  if (failure == null) {    String path=pathNode.isDefined() ? pathNode.asString() : null;    ModelNode relNode=model.get(RELATIVE_TO);    failure=relativeToValidator.validateParameter(RELATIVE_TO,relNode);    if (failure == null) {      String relativeTo=relNode.isDefined() ? pathNode.asString() : null;      ModelNode compensating=PathRemoveHandler.getRemovePathOperation(operation.get(OP_ADDR));      installPath(name,path,relativeTo,context,resultHandler,compensating);    }  }  if (failure != null) {    resultHandler.handleFailed(new ModelNode().set(failure));  }} catch (Exception e) {  resultHandler.handleFailed(new ModelNode().set(e.getLocalizedMessage()));} @TO@ try {  PathAddress address=PathAddress.pathAddress(operation.require(OP_ADDR));  String name=address.getLastElement().getValue();  ModelNode model=context.getSubModel();  model.get(NAME).set(name);  ModelNode pathNode=operation.get(PATH);  String failure=pathValidator.validateParameter(PATH,pathNode);  if (failure == null) {    ModelNode relNode=operation.get(RELATIVE_TO);    failure=relativeToValidator.validateParameter(RELATIVE_TO,relNode);    if (failure == null) {      model.get(PATH).set(pathNode);      model.get(RELATIVE_TO).set(relNode);      ModelNode compensating=PathRemoveHandler.getRemovePathOperation(operation.get(OP_ADDR));      String path=pathNode.isDefined() ? pathNode.asString() : null;      String relativeTo=relNode.isDefined() ? relNode.asString() : null;      installPath(name,path,relativeTo,context,resultHandler,compensating);    }  }  if (failure != null) {    resultHandler.handleFailed(new ModelNode().set(failure));  }} catch (Exception e) {  resultHandler.handleFailed(new ModelNode().set(e.getLocalizedMessage()));} @AT@ 3569 @LENGTH@ 1265
---UPD VariableDeclarationStatement@@ModelNode pathNode=model.get(PATH); @TO@ ModelNode pathNode=operation.get(PATH); @AT@ 3830 @LENGTH@ 37
------UPD VariableDeclarationFragment@@pathNode=model.get(PATH) @TO@ pathNode=operation.get(PATH) @AT@ 3840 @LENGTH@ 26
---------UPD MethodInvocation@@model.get(PATH) @TO@ operation.get(PATH) @AT@ 3851 @LENGTH@ 15
------------UPD SimpleName@@Name:model @TO@ Name:operation @AT@ 3851 @LENGTH@ 5
---UPD IfStatement@@if (failure == null) {  String path=pathNode.isDefined() ? pathNode.asString() : null;  ModelNode relNode=model.get(RELATIVE_TO);  failure=relativeToValidator.validateParameter(RELATIVE_TO,relNode);  if (failure == null) {    String relativeTo=relNode.isDefined() ? pathNode.asString() : null;    ModelNode compensating=PathRemoveHandler.getRemovePathOperation(operation.get(OP_ADDR));    installPath(name,path,relativeTo,context,resultHandler,compensating);  }} @TO@ if (failure == null) {  ModelNode relNode=operation.get(RELATIVE_TO);  failure=relativeToValidator.validateParameter(RELATIVE_TO,relNode);  if (failure == null) {    model.get(PATH).set(pathNode);    model.get(RELATIVE_TO).set(relNode);    ModelNode compensating=PathRemoveHandler.getRemovePathOperation(operation.get(OP_ADDR));    String path=pathNode.isDefined() ? pathNode.asString() : null;    String relativeTo=relNode.isDefined() ? relNode.asString() : null;    installPath(name,path,relativeTo,context,resultHandler,compensating);  }} @AT@ 3958 @LENGTH@ 617
------UPD Block@@ThenBody:{  String path=pathNode.isDefined() ? pathNode.asString() : null;  ModelNode relNode=model.get(RELATIVE_TO);  failure=relativeToValidator.validateParameter(RELATIVE_TO,relNode);  if (failure == null) {    String relativeTo=relNode.isDefined() ? pathNode.asString() : null;    ModelNode compensating=PathRemoveHandler.getRemovePathOperation(operation.get(OP_ADDR));    installPath(name,path,relativeTo,context,resultHandler,compensating);  }} @TO@ ThenBody:{  ModelNode relNode=operation.get(RELATIVE_TO);  failure=relativeToValidator.validateParameter(RELATIVE_TO,relNode);  if (failure == null) {    model.get(PATH).set(pathNode);    model.get(RELATIVE_TO).set(relNode);    ModelNode compensating=PathRemoveHandler.getRemovePathOperation(operation.get(OP_ADDR));    String path=pathNode.isDefined() ? pathNode.asString() : null;    String relativeTo=relNode.isDefined() ? relNode.asString() : null;    installPath(name,path,relativeTo,context,resultHandler,compensating);  }} @AT@ 3979 @LENGTH@ 596
---------UPD VariableDeclarationStatement@@ModelNode relNode=model.get(RELATIVE_TO); @TO@ ModelNode relNode=operation.get(RELATIVE_TO); @AT@ 4078 @LENGTH@ 43
------------UPD VariableDeclarationFragment@@relNode=model.get(RELATIVE_TO) @TO@ relNode=operation.get(RELATIVE_TO) @AT@ 4088 @LENGTH@ 32
---------------UPD MethodInvocation@@model.get(RELATIVE_TO) @TO@ operation.get(RELATIVE_TO) @AT@ 4098 @LENGTH@ 22
------------------UPD SimpleName@@Name:model @TO@ Name:operation @AT@ 4098 @LENGTH@ 5
---------UPD IfStatement@@if (failure == null) {  String relativeTo=relNode.isDefined() ? pathNode.asString() : null;  ModelNode compensating=PathRemoveHandler.getRemovePathOperation(operation.get(OP_ADDR));  installPath(name,path,relativeTo,context,resultHandler,compensating);} @TO@ if (failure == null) {  model.get(PATH).set(pathNode);  model.get(RELATIVE_TO).set(relNode);  ModelNode compensating=PathRemoveHandler.getRemovePathOperation(operation.get(OP_ADDR));  String path=pathNode.isDefined() ? pathNode.asString() : null;  String relativeTo=relNode.isDefined() ? relNode.asString() : null;  installPath(name,path,relativeTo,context,resultHandler,compensating);} @AT@ 4225 @LENGTH@ 336
------------UPD Block@@ThenBody:{  String relativeTo=relNode.isDefined() ? pathNode.asString() : null;  ModelNode compensating=PathRemoveHandler.getRemovePathOperation(operation.get(OP_ADDR));  installPath(name,path,relativeTo,context,resultHandler,compensating);} @TO@ ThenBody:{  model.get(PATH).set(pathNode);  model.get(RELATIVE_TO).set(relNode);  ModelNode compensating=PathRemoveHandler.getRemovePathOperation(operation.get(OP_ADDR));  String path=pathNode.isDefined() ? pathNode.asString() : null;  String relativeTo=relNode.isDefined() ? relNode.asString() : null;  installPath(name,path,relativeTo,context,resultHandler,compensating);} @AT@ 4246 @LENGTH@ 315
---------------MOV VariableDeclarationStatement@@String path=pathNode.isDefined() ? pathNode.asString() : null; @TO@ Block@@ThenBody:{  String relativeTo=relNode.isDefined() ? pathNode.asString() : null;  ModelNode compensating=PathRemoveHandler.getRemovePathOperation(operation.get(OP_ADDR));  installPath(name,path,relativeTo,context,resultHandler,compensating);} @AT@ 3997 @LENGTH@ 64
---------------INS ExpressionStatement@@MethodInvocation:model.get(PATH).set(pathNode) @TO@ Block@@ThenBody:{  String relativeTo=relNode.isDefined() ? pathNode.asString() : null;  ModelNode compensating=PathRemoveHandler.getRemovePathOperation(operation.get(OP_ADDR));  installPath(name,path,relativeTo,context,resultHandler,compensating);} @AT@ 4195 @LENGTH@ 30
------------------INS MethodInvocation@@model.get(PATH).set(pathNode) @TO@ ExpressionStatement@@MethodInvocation:model.get(PATH).set(pathNode) @AT@ 4195 @LENGTH@ 29
---------------------INS MethodInvocation@@MethodName:get:[PATH] @TO@ MethodInvocation@@model.get(PATH).set(pathNode) @AT@ 4195 @LENGTH@ 15
------------------------INS SimpleName@@PATH @TO@ MethodInvocation@@MethodName:get:[PATH] @AT@ 4205 @LENGTH@ 4
---------------------INS SimpleName@@Name:model @TO@ MethodInvocation@@model.get(PATH).set(pathNode) @AT@ 4195 @LENGTH@ 5
---------------------INS SimpleName@@MethodName:set:[pathNode] @TO@ MethodInvocation@@model.get(PATH).set(pathNode) @AT@ 4211 @LENGTH@ 13
------------------------INS SimpleName@@pathNode @TO@ SimpleName@@MethodName:set:[pathNode] @AT@ 4215 @LENGTH@ 8
---------------INS ExpressionStatement@@MethodInvocation:model.get(RELATIVE_TO).set(relNode) @TO@ Block@@ThenBody:{  String relativeTo=relNode.isDefined() ? pathNode.asString() : null;  ModelNode compensating=PathRemoveHandler.getRemovePathOperation(operation.get(OP_ADDR));  installPath(name,path,relativeTo,context,resultHandler,compensating);} @AT@ 4246 @LENGTH@ 36
------------------INS MethodInvocation@@model.get(RELATIVE_TO).set(relNode) @TO@ ExpressionStatement@@MethodInvocation:model.get(RELATIVE_TO).set(relNode) @AT@ 4246 @LENGTH@ 35
---------------------INS MethodInvocation@@MethodName:get:[RELATIVE_TO] @TO@ MethodInvocation@@model.get(RELATIVE_TO).set(relNode) @AT@ 4246 @LENGTH@ 22
------------------------INS SimpleName@@RELATIVE_TO @TO@ MethodInvocation@@MethodName:get:[RELATIVE_TO] @AT@ 4256 @LENGTH@ 11
---------------------INS SimpleName@@Name:model @TO@ MethodInvocation@@model.get(RELATIVE_TO).set(relNode) @AT@ 4246 @LENGTH@ 5
---------------------INS SimpleName@@MethodName:set:[relNode] @TO@ MethodInvocation@@model.get(RELATIVE_TO).set(relNode) @AT@ 4269 @LENGTH@ 12
------------------------INS SimpleName@@relNode @TO@ SimpleName@@MethodName:set:[relNode] @AT@ 4273 @LENGTH@ 7
---------------UPD VariableDeclarationStatement@@String relativeTo=relNode.isDefined() ? pathNode.asString() : null; @TO@ String relativeTo=relNode.isDefined() ? relNode.asString() : null; @AT@ 4268 @LENGTH@ 69
------------------UPD VariableDeclarationFragment@@relativeTo=relNode.isDefined() ? pathNode.asString() : null @TO@ relativeTo=relNode.isDefined() ? relNode.asString() : null @AT@ 4275 @LENGTH@ 61
---------------------UPD ConditionalExpression@@relNode.isDefined() ? pathNode.asString() : null @TO@ relNode.isDefined() ? relNode.asString() : null @AT@ 4288 @LENGTH@ 48
------------------------UPD MethodInvocation@@pathNode.asString() @TO@ relNode.asString() @AT@ 4310 @LENGTH@ 19
---------------------------UPD SimpleName@@Name:pathNode @TO@ Name:relNode @AT@ 4310 @LENGTH@ 8
---------------MOV VariableDeclarationStatement@@String relativeTo=relNode.isDefined() ? pathNode.asString() : null; @TO@ Block@@ThenBody:{  String relativeTo=relNode.isDefined() ? pathNode.asString() : null;  ModelNode compensating=PathRemoveHandler.getRemovePathOperation(operation.get(OP_ADDR));  installPath(name,path,relativeTo,context,resultHandler,compensating);} @AT@ 4268 @LENGTH@ 69


UPD Block@@ElseBody:if (namespace.equals("module")) {  return contextServiceNameOfModule(app,module).append(context.substring(12));} else if (namespace.equals("comp")) {  return contextServiceNameOfComponent(app,module,comp).append(context.substring(10));} else {  return null;} @TO@ ElseBody:if (namespace.equals("module")) {  return contextServiceNameOfModule(app,module).append(context.substring(12));} else if (namespace.equals("comp")) {  return contextServiceNameOfComponent(app,module,comp).append(context.substring(10));} else {  return JAVA_CONTEXT_SERVICE_NAME.append(context);} @AT@ 4837 @LENGTH@ 345
---UPD IfStatement@@if (namespace.equals("module")) {  return contextServiceNameOfModule(app,module).append(context.substring(12));} else if (namespace.equals("comp")) {  return contextServiceNameOfComponent(app,module,comp).append(context.substring(10));} else {  return null;} @TO@ if (namespace.equals("module")) {  return contextServiceNameOfModule(app,module).append(context.substring(12));} else if (namespace.equals("comp")) {  return contextServiceNameOfComponent(app,module,comp).append(context.substring(10));} else {  return JAVA_CONTEXT_SERVICE_NAME.append(context);} @AT@ 4837 @LENGTH@ 345
------UPD Block@@ElseBody:if (namespace.equals("comp")) {  return contextServiceNameOfComponent(app,module,comp).append(context.substring(10));} else {  return null;} @TO@ ElseBody:if (namespace.equals("comp")) {  return contextServiceNameOfComponent(app,module,comp).append(context.substring(10));} else {  return JAVA_CONTEXT_SERVICE_NAME.append(context);} @AT@ 4984 @LENGTH@ 198
---------UPD IfStatement@@if (namespace.equals("comp")) {  return contextServiceNameOfComponent(app,module,comp).append(context.substring(10));} else {  return null;} @TO@ if (namespace.equals("comp")) {  return contextServiceNameOfComponent(app,module,comp).append(context.substring(10));} else {  return JAVA_CONTEXT_SERVICE_NAME.append(context);} @AT@ 4984 @LENGTH@ 198
------------UPD Block@@ElseBody:{  return null;} @TO@ ElseBody:{  return JAVA_CONTEXT_SERVICE_NAME.append(context);} @AT@ 5138 @LENGTH@ 44
---------------UPD ReturnStatement@@NullLiteral:null @TO@ MethodInvocation:JAVA_CONTEXT_SERVICE_NAME.append(context) @AT@ 5156 @LENGTH@ 12
------------------INS MethodInvocation@@JAVA_CONTEXT_SERVICE_NAME.append(context) @TO@ ReturnStatement@@NullLiteral:null @AT@ 5163 @LENGTH@ 41
---------------------INS SimpleName@@Name:JAVA_CONTEXT_SERVICE_NAME @TO@ MethodInvocation@@JAVA_CONTEXT_SERVICE_NAME.append(context) @AT@ 5163 @LENGTH@ 25
---------------------INS SimpleName@@MethodName:append:[context] @TO@ MethodInvocation@@JAVA_CONTEXT_SERVICE_NAME.append(context) @AT@ 5189 @LENGTH@ 15
------------------------INS SimpleName@@context @TO@ SimpleName@@MethodName:append:[context] @AT@ 5196 @LENGTH@ 7
------------------DEL NullLiteral@@null @AT@ 5163 @LENGTH@ 4
---------UPD IfStatement@@if (namespace.equals("comp")) {  return contextServiceNameOfComponent(app,module,comp).append(context.substring(10));} else {  return null;} @TO@ if (namespace.equals("comp")) {  return contextServiceNameOfComponent(app,module,comp).append(context.substring(10));} else {  return JAVA_CONTEXT_SERVICE_NAME.append(context);} @AT@ 4984 @LENGTH@ 198
------------UPD Block@@ElseBody:{  return null;} @TO@ ElseBody:{  return JAVA_CONTEXT_SERVICE_NAME.append(context);} @AT@ 5138 @LENGTH@ 44
---------------UPD ReturnStatement@@NullLiteral:null @TO@ MethodInvocation:JAVA_CONTEXT_SERVICE_NAME.append(context) @AT@ 5156 @LENGTH@ 12
------------------INS MethodInvocation@@JAVA_CONTEXT_SERVICE_NAME.append(context) @TO@ ReturnStatement@@NullLiteral:null @AT@ 5163 @LENGTH@ 41
---------------------INS SimpleName@@Name:JAVA_CONTEXT_SERVICE_NAME @TO@ MethodInvocation@@JAVA_CONTEXT_SERVICE_NAME.append(context) @AT@ 5163 @LENGTH@ 25
---------------------INS SimpleName@@MethodName:append:[context] @TO@ MethodInvocation@@JAVA_CONTEXT_SERVICE_NAME.append(context) @AT@ 5189 @LENGTH@ 15
------------------------INS SimpleName@@context @TO@ SimpleName@@MethodName:append:[context] @AT@ 5196 @LENGTH@ 7
------------------DEL NullLiteral@@null @AT@ 5163 @LENGTH@ 4
---------UPD IfStatement@@if (namespace.equals("comp")) {  return contextServiceNameOfComponent(app,module,comp).append(context.substring(10));} else {  return null;} @TO@ if (namespace.equals("comp")) {  return contextServiceNameOfComponent(app,module,comp).append(context.substring(10));} else {  return JAVA_CONTEXT_SERVICE_NAME.append(context);} @AT@ 4984 @LENGTH@ 198
------------UPD Block@@ElseBody:{  return null;} @TO@ ElseBody:{  return JAVA_CONTEXT_SERVICE_NAME.append(context);} @AT@ 5138 @LENGTH@ 44
---------------UPD ReturnStatement@@NullLiteral:null @TO@ MethodInvocation:JAVA_CONTEXT_SERVICE_NAME.append(context) @AT@ 5156 @LENGTH@ 12
------------------INS MethodInvocation@@JAVA_CONTEXT_SERVICE_NAME.append(context) @TO@ ReturnStatement@@NullLiteral:null @AT@ 5163 @LENGTH@ 41
---------------------INS SimpleName@@Name:JAVA_CONTEXT_SERVICE_NAME @TO@ MethodInvocation@@JAVA_CONTEXT_SERVICE_NAME.append(context) @AT@ 5163 @LENGTH@ 25
---------------------INS SimpleName@@MethodName:append:[context] @TO@ MethodInvocation@@JAVA_CONTEXT_SERVICE_NAME.append(context) @AT@ 5189 @LENGTH@ 15
------------------------INS SimpleName@@context @TO@ SimpleName@@MethodName:append:[context] @AT@ 5196 @LENGTH@ 7
------------------DEL NullLiteral@@null @AT@ 5163 @LENGTH@ 4
---------UPD IfStatement@@if (namespace.equals("comp")) {  return contextServiceNameOfComponent(app,module,comp).append(context.substring(10));} else {  return null;} @TO@ if (namespace.equals("comp")) {  return contextServiceNameOfComponent(app,module,comp).append(context.substring(10));} else {  return JAVA_CONTEXT_SERVICE_NAME.append(context);} @AT@ 4984 @LENGTH@ 198
------------UPD Block@@ElseBody:{  return null;} @TO@ ElseBody:{  return JAVA_CONTEXT_SERVICE_NAME.append(context);} @AT@ 5138 @LENGTH@ 44
---------------UPD ReturnStatement@@NullLiteral:null @TO@ MethodInvocation:JAVA_CONTEXT_SERVICE_NAME.append(context) @AT@ 5156 @LENGTH@ 12
------------------INS MethodInvocation@@JAVA_CONTEXT_SERVICE_NAME.append(context) @TO@ ReturnStatement@@NullLiteral:null @AT@ 5163 @LENGTH@ 41
---------------------INS SimpleName@@Name:JAVA_CONTEXT_SERVICE_NAME @TO@ MethodInvocation@@JAVA_CONTEXT_SERVICE_NAME.append(context) @AT@ 5163 @LENGTH@ 25
---------------------INS SimpleName@@MethodName:append:[context] @TO@ MethodInvocation@@JAVA_CONTEXT_SERVICE_NAME.append(context) @AT@ 5189 @LENGTH@ 15
------------------------INS SimpleName@@context @TO@ SimpleName@@MethodName:append:[context] @AT@ 5196 @LENGTH@ 7
------------------DEL NullLiteral@@null @AT@ 5163 @LENGTH@ 4
---------UPD IfStatement@@if (namespace.equals("comp")) {  return contextServiceNameOfComponent(app,module,comp).append(context.substring(10));} else {  return null;} @TO@ if (namespace.equals("comp")) {  return contextServiceNameOfComponent(app,module,comp).append(context.substring(10));} else {  return JAVA_CONTEXT_SERVICE_NAME.append(context);} @AT@ 4984 @LENGTH@ 198
------------UPD Block@@ElseBody:{  return null;} @TO@ ElseBody:{  return JAVA_CONTEXT_SERVICE_NAME.append(context);} @AT@ 5138 @LENGTH@ 44
---------------UPD ReturnStatement@@NullLiteral:null @TO@ MethodInvocation:JAVA_CONTEXT_SERVICE_NAME.append(context) @AT@ 5156 @LENGTH@ 12
------------------INS MethodInvocation@@JAVA_CONTEXT_SERVICE_NAME.append(context) @TO@ ReturnStatement@@NullLiteral:null @AT@ 5163 @LENGTH@ 41
---------------------INS SimpleName@@Name:JAVA_CONTEXT_SERVICE_NAME @TO@ MethodInvocation@@JAVA_CONTEXT_SERVICE_NAME.append(context) @AT@ 5163 @LENGTH@ 25
---------------------INS SimpleName@@MethodName:append:[context] @TO@ MethodInvocation@@JAVA_CONTEXT_SERVICE_NAME.append(context) @AT@ 5189 @LENGTH@ 15
------------------------INS SimpleName@@context @TO@ SimpleName@@MethodName:append:[context] @AT@ 5196 @LENGTH@ 7
------------------DEL NullLiteral@@null @AT@ 5163 @LENGTH@ 4
---UPD IfStatement@@if (namespace.equals("module")) {  return contextServiceNameOfModule(app,module).append(context.substring(12));} else if (namespace.equals("comp")) {  return contextServiceNameOfComponent(app,module,comp).append(context.substring(10));} else {  return null;} @TO@ if (namespace.equals("module")) {  return contextServiceNameOfModule(app,module).append(context.substring(12));} else if (namespace.equals("comp")) {  return contextServiceNameOfComponent(app,module,comp).append(context.substring(10));} else {  return JAVA_CONTEXT_SERVICE_NAME.append(context);} @AT@ 4837 @LENGTH@ 345
------UPD Block@@ElseBody:if (namespace.equals("comp")) {  return contextServiceNameOfComponent(app,module,comp).append(context.substring(10));} else {  return null;} @TO@ ElseBody:if (namespace.equals("comp")) {  return contextServiceNameOfComponent(app,module,comp).append(context.substring(10));} else {  return JAVA_CONTEXT_SERVICE_NAME.append(context);} @AT@ 4984 @LENGTH@ 198
---------UPD IfStatement@@if (namespace.equals("comp")) {  return contextServiceNameOfComponent(app,module,comp).append(context.substring(10));} else {  return null;} @TO@ if (namespace.equals("comp")) {  return contextServiceNameOfComponent(app,module,comp).append(context.substring(10));} else {  return JAVA_CONTEXT_SERVICE_NAME.append(context);} @AT@ 4984 @LENGTH@ 198
------------UPD Block@@ElseBody:{  return null;} @TO@ ElseBody:{  return JAVA_CONTEXT_SERVICE_NAME.append(context);} @AT@ 5138 @LENGTH@ 44
---------------UPD ReturnStatement@@NullLiteral:null @TO@ MethodInvocation:JAVA_CONTEXT_SERVICE_NAME.append(context) @AT@ 5156 @LENGTH@ 12
------------------INS MethodInvocation@@JAVA_CONTEXT_SERVICE_NAME.append(context) @TO@ ReturnStatement@@NullLiteral:null @AT@ 5163 @LENGTH@ 41
---------------------INS SimpleName@@Name:JAVA_CONTEXT_SERVICE_NAME @TO@ MethodInvocation@@JAVA_CONTEXT_SERVICE_NAME.append(context) @AT@ 5163 @LENGTH@ 25
---------------------INS SimpleName@@MethodName:append:[context] @TO@ MethodInvocation@@JAVA_CONTEXT_SERVICE_NAME.append(context) @AT@ 5189 @LENGTH@ 15
------------------------INS SimpleName@@context @TO@ SimpleName@@MethodName:append:[context] @AT@ 5196 @LENGTH@ 7
------------------DEL NullLiteral@@null @AT@ 5163 @LENGTH@ 4
---------UPD IfStatement@@if (namespace.equals("comp")) {  return contextServiceNameOfComponent(app,module,comp).append(context.substring(10));} else {  return null;} @TO@ if (namespace.equals("comp")) {  return contextServiceNameOfComponent(app,module,comp).append(context.substring(10));} else {  return JAVA_CONTEXT_SERVICE_NAME.append(context);} @AT@ 4984 @LENGTH@ 198
------------UPD Block@@ElseBody:{  return null;} @TO@ ElseBody:{  return JAVA_CONTEXT_SERVICE_NAME.append(context);} @AT@ 5138 @LENGTH@ 44
---------------UPD ReturnStatement@@NullLiteral:null @TO@ MethodInvocation:JAVA_CONTEXT_SERVICE_NAME.append(context) @AT@ 5156 @LENGTH@ 12
------------------INS MethodInvocation@@JAVA_CONTEXT_SERVICE_NAME.append(context) @TO@ ReturnStatement@@NullLiteral:null @AT@ 5163 @LENGTH@ 41
---------------------INS SimpleName@@Name:JAVA_CONTEXT_SERVICE_NAME @TO@ MethodInvocation@@JAVA_CONTEXT_SERVICE_NAME.append(context) @AT@ 5163 @LENGTH@ 25
---------------------INS SimpleName@@MethodName:append:[context] @TO@ MethodInvocation@@JAVA_CONTEXT_SERVICE_NAME.append(context) @AT@ 5189 @LENGTH@ 15
------------------------INS SimpleName@@context @TO@ SimpleName@@MethodName:append:[context] @AT@ 5196 @LENGTH@ 7
------------------DEL NullLiteral@@null @AT@ 5163 @LENGTH@ 4
---------UPD IfStatement@@if (namespace.equals("comp")) {  return contextServiceNameOfComponent(app,module,comp).append(context.substring(10));} else {  return null;} @TO@ if (namespace.equals("comp")) {  return contextServiceNameOfComponent(app,module,comp).append(context.substring(10));} else {  return JAVA_CONTEXT_SERVICE_NAME.append(context);} @AT@ 4984 @LENGTH@ 198
------------UPD Block@@ElseBody:{  return null;} @TO@ ElseBody:{  return JAVA_CONTEXT_SERVICE_NAME.append(context);} @AT@ 5138 @LENGTH@ 44
---------------UPD ReturnStatement@@NullLiteral:null @TO@ MethodInvocation:JAVA_CONTEXT_SERVICE_NAME.append(context) @AT@ 5156 @LENGTH@ 12
------------------INS MethodInvocation@@JAVA_CONTEXT_SERVICE_NAME.append(context) @TO@ ReturnStatement@@NullLiteral:null @AT@ 5163 @LENGTH@ 41
---------------------INS SimpleName@@Name:JAVA_CONTEXT_SERVICE_NAME @TO@ MethodInvocation@@JAVA_CONTEXT_SERVICE_NAME.append(context) @AT@ 5163 @LENGTH@ 25
---------------------INS SimpleName@@MethodName:append:[context] @TO@ MethodInvocation@@JAVA_CONTEXT_SERVICE_NAME.append(context) @AT@ 5189 @LENGTH@ 15
------------------------INS SimpleName@@context @TO@ SimpleName@@MethodName:append:[context] @AT@ 5196 @LENGTH@ 7
------------------DEL NullLiteral@@null @AT@ 5163 @LENGTH@ 4
---------UPD IfStatement@@if (namespace.equals("comp")) {  return contextServiceNameOfComponent(app,module,comp).append(context.substring(10));} else {  return null;} @TO@ if (namespace.equals("comp")) {  return contextServiceNameOfComponent(app,module,comp).append(context.substring(10));} else {  return JAVA_CONTEXT_SERVICE_NAME.append(context);} @AT@ 4984 @LENGTH@ 198
------------UPD Block@@ElseBody:{  return null;} @TO@ ElseBody:{  return JAVA_CONTEXT_SERVICE_NAME.append(context);} @AT@ 5138 @LENGTH@ 44
---------------UPD ReturnStatement@@NullLiteral:null @TO@ MethodInvocation:JAVA_CONTEXT_SERVICE_NAME.append(context) @AT@ 5156 @LENGTH@ 12
------------------INS MethodInvocation@@JAVA_CONTEXT_SERVICE_NAME.append(context) @TO@ ReturnStatement@@NullLiteral:null @AT@ 5163 @LENGTH@ 41
---------------------INS SimpleName@@Name:JAVA_CONTEXT_SERVICE_NAME @TO@ MethodInvocation@@JAVA_CONTEXT_SERVICE_NAME.append(context) @AT@ 5163 @LENGTH@ 25
---------------------INS SimpleName@@MethodName:append:[context] @TO@ MethodInvocation@@JAVA_CONTEXT_SERVICE_NAME.append(context) @AT@ 5189 @LENGTH@ 15
------------------------INS SimpleName@@context @TO@ SimpleName@@MethodName:append:[context] @AT@ 5196 @LENGTH@ 7
------------------DEL NullLiteral@@null @AT@ 5163 @LENGTH@ 4
---------UPD IfStatement@@if (namespace.equals("comp")) {  return contextServiceNameOfComponent(app,module,comp).append(context.substring(10));} else {  return null;} @TO@ if (namespace.equals("comp")) {  return contextServiceNameOfComponent(app,module,comp).append(context.substring(10));} else {  return JAVA_CONTEXT_SERVICE_NAME.append(context);} @AT@ 4984 @LENGTH@ 198
------------UPD Block@@ElseBody:{  return null;} @TO@ ElseBody:{  return JAVA_CONTEXT_SERVICE_NAME.append(context);} @AT@ 5138 @LENGTH@ 44
---------------UPD ReturnStatement@@NullLiteral:null @TO@ MethodInvocation:JAVA_CONTEXT_SERVICE_NAME.append(context) @AT@ 5156 @LENGTH@ 12
------------------INS MethodInvocation@@JAVA_CONTEXT_SERVICE_NAME.append(context) @TO@ ReturnStatement@@NullLiteral:null @AT@ 5163 @LENGTH@ 41
---------------------INS SimpleName@@Name:JAVA_CONTEXT_SERVICE_NAME @TO@ MethodInvocation@@JAVA_CONTEXT_SERVICE_NAME.append(context) @AT@ 5163 @LENGTH@ 25
---------------------INS SimpleName@@MethodName:append:[context] @TO@ MethodInvocation@@JAVA_CONTEXT_SERVICE_NAME.append(context) @AT@ 5189 @LENGTH@ 15
------------------------INS SimpleName@@context @TO@ SimpleName@@MethodName:append:[context] @AT@ 5196 @LENGTH@ 7
------------------DEL NullLiteral@@null @AT@ 5163 @LENGTH@ 4


UPD CatchClause@@catch (ConversionFailedException ignored) {} @TO@ catch (Exception ignored) {} @AT@ 3270 @LENGTH@ 50
---UPD SingleVariableDeclaration@@ConversionFailedException ignored @TO@ Exception ignored @AT@ 3277 @LENGTH@ 33
------UPD SimpleType@@ConversionFailedException @TO@ Exception @AT@ 3277 @LENGTH@ 25


UPD Block@@ThenBody:{  List<JavaType> parameterTypes=new LinkedList<JavaType>();  for (  FieldMetadata field : MemberFindingUtils.getFields(identifierMemberDetails)) {    if (!(Modifier.isStatic(field.getModifier()) || Modifier.isFinal(field.getModifier()) || Modifier.isTransient(field.getModifier()))) {      identifierFields.add(field);      parameterTypes.add(field.getFieldType());      metadataDependencyRegistry.registerDependency(field.getDeclaredByMetadataId(),metadataIdentificationString);    }  }  ConstructorMetadata identifierConstructor=null;  List<ConstructorMetadata> constructors=MemberFindingUtils.getConstructors(identifierMemberDetails);  for (  ConstructorMetadata constructor : constructors) {    if (constructor.getParameterTypes().size() == identifierFields.size()) {      identifierConstructor=constructor;      metadataDependencyRegistry.registerDependency(identifierConstructor.getDeclaredByMetadataId(),metadataIdentificationString);      break;    }  }  return new EmbeddedIdentifierMetadataHolder(identifierMemberHoldingTypeDetails.getName(),identifierFields,identifierConstructor);} @TO@ ThenBody:{  for (  FieldMetadata field : MemberFindingUtils.getFields(identifierMemberDetails)) {    if (!(Modifier.isStatic(field.getModifier()) || Modifier.isFinal(field.getModifier()) || Modifier.isTransient(field.getModifier()))) {      identifierFields.add(field);      metadataDependencyRegistry.registerDependency(field.getDeclaredByMetadataId(),metadataIdentificationString);    }  }  List<ConstructorMetadata> constructors=MemberFindingUtils.getConstructors(identifierMemberDetails);  for (  ConstructorMetadata constructor : constructors) {    metadataDependencyRegistry.registerDependency(constructor.getDeclaredByMetadataId(),metadataIdentificationString);    if (constructor.getParameterTypes().size() == identifierFields.size()) {      return new EmbeddedIdentifierMetadataHolder(identifierMemberHoldingTypeDetails.getName(),identifierFields,constructor);    }  }} @AT@ 8919 @LENGTH@ 1164
---DEL VariableDeclarationStatement@@List<JavaType> parameterTypes=new LinkedList<JavaType>(); @AT@ 8926 @LENGTH@ 59
------DEL ParameterizedType@@List<JavaType> @AT@ 8926 @LENGTH@ 14
---------DEL SimpleType@@List @AT@ 8926 @LENGTH@ 4
---------DEL SimpleType@@JavaType @AT@ 8931 @LENGTH@ 8
------DEL VariableDeclarationFragment@@parameterTypes=new LinkedList<JavaType>() @AT@ 8941 @LENGTH@ 43
---------DEL SimpleName@@parameterTypes @AT@ 8941 @LENGTH@ 14
---------DEL ClassInstanceCreation@@LinkedList<JavaType>[] @AT@ 8958 @LENGTH@ 26
------------DEL New@@new @AT@ 8958 @LENGTH@ 3
------------DEL ParameterizedType@@LinkedList<JavaType> @AT@ 8962 @LENGTH@ 20
---------------DEL SimpleType@@LinkedList @AT@ 8962 @LENGTH@ 10
---------------DEL SimpleType@@JavaType @AT@ 8973 @LENGTH@ 8
---UPD EnhancedForStatement@@for (FieldMetadata field : MemberFindingUtils.getFields(identifierMemberDetails)) {  if (!(Modifier.isStatic(field.getModifier()) || Modifier.isFinal(field.getModifier()) || Modifier.isTransient(field.getModifier()))) {    identifierFields.add(field);    parameterTypes.add(field.getFieldType());    metadataDependencyRegistry.registerDependency(field.getDeclaredByMetadataId(),metadataIdentificationString);  }} @TO@ for (FieldMetadata field : MemberFindingUtils.getFields(identifierMemberDetails)) {  if (!(Modifier.isStatic(field.getModifier()) || Modifier.isFinal(field.getModifier()) || Modifier.isTransient(field.getModifier()))) {    identifierFields.add(field);    metadataDependencyRegistry.registerDependency(field.getDeclaredByMetadataId(),metadataIdentificationString);  }} @AT@ 8991 @LENGTH@ 441
------UPD IfStatement@@if (!(Modifier.isStatic(field.getModifier()) || Modifier.isFinal(field.getModifier()) || Modifier.isTransient(field.getModifier()))) {  identifierFields.add(field);  parameterTypes.add(field.getFieldType());  metadataDependencyRegistry.registerDependency(field.getDeclaredByMetadataId(),metadataIdentificationString);} @TO@ if (!(Modifier.isStatic(field.getModifier()) || Modifier.isFinal(field.getModifier()) || Modifier.isTransient(field.getModifier()))) {  identifierFields.add(field);  metadataDependencyRegistry.registerDependency(field.getDeclaredByMetadataId(),metadataIdentificationString);} @AT@ 9081 @LENGTH@ 344
---------UPD Block@@ThenBody:{  identifierFields.add(field);  parameterTypes.add(field.getFieldType());  metadataDependencyRegistry.registerDependency(field.getDeclaredByMetadataId(),metadataIdentificationString);} @TO@ ThenBody:{  identifierFields.add(field);  metadataDependencyRegistry.registerDependency(field.getDeclaredByMetadataId(),metadataIdentificationString);} @AT@ 9214 @LENGTH@ 211
------------DEL ExpressionStatement@@MethodInvocation:parameterTypes.add(field.getFieldType()) @AT@ 9259 @LENGTH@ 41
---------------DEL MethodInvocation@@parameterTypes.add(field.getFieldType()) @AT@ 9259 @LENGTH@ 40
------------------DEL SimpleName@@Name:parameterTypes @AT@ 9259 @LENGTH@ 14
------------------DEL SimpleName@@MethodName:add:[field.getFieldType()] @AT@ 9274 @LENGTH@ 25
---------------------DEL MethodInvocation@@field.getFieldType() @AT@ 9278 @LENGTH@ 20
------------------------DEL SimpleName@@Name:field @AT@ 9278 @LENGTH@ 5
------------------------DEL SimpleName@@MethodName:getFieldType:[] @AT@ 9284 @LENGTH@ 14
---INS EnhancedForStatement@@for (ConstructorMetadata constructor : constructors) {  metadataDependencyRegistry.registerDependency(constructor.getDeclaredByMetadataId(),metadataIdentificationString);  if (constructor.getParameterTypes().size() == identifierFields.size()) {    return new EmbeddedIdentifierMetadataHolder(identifierMemberHoldingTypeDetails.getName(),identifierFields,constructor);  }} @TO@ Block@@ThenBody:{  List<JavaType> parameterTypes=new LinkedList<JavaType>();  for (  FieldMetadata field : MemberFindingUtils.getFields(identifierMemberDetails)) {    if (!(Modifier.isStatic(field.getModifier()) || Modifier.isFinal(field.getModifier()) || Modifier.isTransient(field.getModifier()))) {      identifierFields.add(field);      parameterTypes.add(field.getFieldType());      metadataDependencyRegistry.registerDependency(field.getDeclaredByMetadataId(),metadataIdentificationString);    }  }  ConstructorMetadata identifierConstructor=null;  List<ConstructorMetadata> constructors=MemberFindingUtils.getConstructors(identifierMemberDetails);  for (  ConstructorMetadata constructor : constructors) {    if (constructor.getParameterTypes().size() == identifierFields.size()) {      identifierConstructor=constructor;      metadataDependencyRegistry.registerDependency(identifierConstructor.getDeclaredByMetadataId(),metadataIdentificationString);      break;    }  }  return new EmbeddedIdentifierMetadataHolder(identifierMemberHoldingTypeDetails.getName(),identifierFields,identifierConstructor);} @AT@ 9430 @LENGTH@ 399
------INS ExpressionStatement@@MethodInvocation:metadataDependencyRegistry.registerDependency(constructor.getDeclaredByMetadataId(),metadataIdentificationString) @TO@ EnhancedForStatement@@for (ConstructorMetadata constructor : constructors) {  metadataDependencyRegistry.registerDependency(constructor.getDeclaredByMetadataId(),metadataIdentificationString);  if (constructor.getParameterTypes().size() == identifierFields.size()) {    return new EmbeddedIdentifierMetadataHolder(identifierMemberHoldingTypeDetails.getName(),identifierFields,constructor);  }} @AT@ 9491 @LENGTH@ 115
---------MOV MethodInvocation@@metadataDependencyRegistry.registerDependency(identifierConstructor.getDeclaredByMetadataId(),metadataIdentificationString) @TO@ ExpressionStatement@@MethodInvocation:metadataDependencyRegistry.registerDependency(constructor.getDeclaredByMetadataId(),metadataIdentificationString) @AT@ 9785 @LENGTH@ 124
------MOV SingleVariableDeclaration@@ConstructorMetadata constructor @TO@ EnhancedForStatement@@for (ConstructorMetadata constructor : constructors) {  metadataDependencyRegistry.registerDependency(constructor.getDeclaredByMetadataId(),metadataIdentificationString);  if (constructor.getParameterTypes().size() == identifierFields.size()) {    return new EmbeddedIdentifierMetadataHolder(identifierMemberHoldingTypeDetails.getName(),identifierFields,constructor);  }} @AT@ 9605 @LENGTH@ 31
------INS IfStatement@@if (constructor.getParameterTypes().size() == identifierFields.size()) {  return new EmbeddedIdentifierMetadataHolder(identifierMemberHoldingTypeDetails.getName(),identifierFields,constructor);} @TO@ EnhancedForStatement@@for (ConstructorMetadata constructor : constructors) {  metadataDependencyRegistry.registerDependency(constructor.getDeclaredByMetadataId(),metadataIdentificationString);  if (constructor.getParameterTypes().size() == identifierFields.size()) {    return new EmbeddedIdentifierMetadataHolder(identifierMemberHoldingTypeDetails.getName(),identifierFields,constructor);  }} @AT@ 9613 @LENGTH@ 209
---------MOV InfixExpression@@constructor.getParameterTypes().size() == identifierFields.size() @TO@ IfStatement@@if (constructor.getParameterTypes().size() == identifierFields.size()) {  return new EmbeddedIdentifierMetadataHolder(identifierMemberHoldingTypeDetails.getName(),identifierFields,constructor);} @AT@ 9665 @LENGTH@ 65
---------INS Block@@ThenBody:{  return new EmbeddedIdentifierMetadataHolder(identifierMemberHoldingTypeDetails.getName(),identifierFields,constructor);} @TO@ IfStatement@@if (constructor.getParameterTypes().size() == identifierFields.size()) {  return new EmbeddedIdentifierMetadataHolder(identifierMemberHoldingTypeDetails.getName(),identifierFields,constructor);} @AT@ 9684 @LENGTH@ 138
------------MOV ReturnStatement@@ClassInstanceCreation:new EmbeddedIdentifierMetadataHolder(identifierMemberHoldingTypeDetails.getName(),identifierFields,identifierConstructor) @TO@ Block@@ThenBody:{  return new EmbeddedIdentifierMetadataHolder(identifierMemberHoldingTypeDetails.getName(),identifierFields,constructor);} @AT@ 9946 @LENGTH@ 131
------MOV SimpleName@@constructors @TO@ EnhancedForStatement@@for (ConstructorMetadata constructor : constructors) {  metadataDependencyRegistry.registerDependency(constructor.getDeclaredByMetadataId(),metadataIdentificationString);  if (constructor.getParameterTypes().size() == identifierFields.size()) {    return new EmbeddedIdentifierMetadataHolder(identifierMemberHoldingTypeDetails.getName(),identifierFields,constructor);  }} @AT@ 9639 @LENGTH@ 12
---DEL VariableDeclarationStatement@@ConstructorMetadata identifierConstructor=null; @AT@ 9438 @LENGTH@ 49
------DEL SimpleType@@ConstructorMetadata @AT@ 9438 @LENGTH@ 19
------DEL VariableDeclarationFragment@@identifierConstructor=null @AT@ 9458 @LENGTH@ 28
---------DEL SimpleName@@identifierConstructor @AT@ 9458 @LENGTH@ 21
---------DEL NullLiteral@@null @AT@ 9482 @LENGTH@ 4
---DEL EnhancedForStatement@@for (ConstructorMetadata constructor : constructors) {  if (constructor.getParameterTypes().size() == identifierFields.size()) {    identifierConstructor=constructor;    metadataDependencyRegistry.registerDependency(identifierConstructor.getDeclaredByMetadataId(),metadataIdentificationString);    break;  }} @AT@ 9600 @LENGTH@ 339
------DEL IfStatement@@if (constructor.getParameterTypes().size() == identifierFields.size()) {  identifierConstructor=constructor;  metadataDependencyRegistry.registerDependency(identifierConstructor.getDeclaredByMetadataId(),metadataIdentificationString);  break;} @AT@ 9661 @LENGTH@ 271
---------DEL Block@@ThenBody:{  identifierConstructor=constructor;  metadataDependencyRegistry.registerDependency(identifierConstructor.getDeclaredByMetadataId(),metadataIdentificationString);  break;} @AT@ 9732 @LENGTH@ 200
------------DEL ExpressionStatement@@Assignment:identifierConstructor=constructor @AT@ 9741 @LENGTH@ 36
---------------DEL Assignment@@identifierConstructor=constructor @AT@ 9741 @LENGTH@ 35
------------------DEL SimpleName@@identifierConstructor @AT@ 9741 @LENGTH@ 21
------------------DEL Operator@@= @AT@ 9762 @LENGTH@ 1
------------------DEL SimpleName@@constructor @AT@ 9765 @LENGTH@ 11
------------DEL ExpressionStatement@@MethodInvocation:metadataDependencyRegistry.registerDependency(identifierConstructor.getDeclaredByMetadataId(),metadataIdentificationString) @AT@ 9785 @LENGTH@ 125
------------DEL BreakStatement@@ @AT@ 9918 @LENGTH@ 6
---UPD ReturnStatement@@ClassInstanceCreation:new EmbeddedIdentifierMetadataHolder(identifierMemberHoldingTypeDetails.getName(),identifierFields,identifierConstructor) @TO@ ClassInstanceCreation:new EmbeddedIdentifierMetadataHolder(identifierMemberHoldingTypeDetails.getName(),identifierFields,constructor) @AT@ 9946 @LENGTH@ 131


UPD IfStatement@@if (operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_ADD)) {  if (LOG.isDebugEnabled()) {    LOG.debug("Adding an element with key " + key + " into the Cache");  }  element=createElementFromBody(exchange,CacheConstants.CACHE_OPERATION_ADD);  cache.put(new Element(key,element),true);} else if (operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_UPDATE)) {  if (LOG.isDebugEnabled()) {    LOG.debug("Updating an element with key " + key + " into the Cache");  }  element=createElementFromBody(exchange,CacheConstants.CACHE_OPERATION_UPDATE);  cache.put(new Element(key,element),true);} else if (operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_DELETEALL)) {  if (LOG.isDebugEnabled()) {    LOG.debug("Deleting All elements from the Cache");  }  cache.removeAll();} else if (operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_DELETE)) {  if (LOG.isDebugEnabled()) {    LOG.debug("Deleting an element with key " + key + " into the Cache");  }  cache.remove(key,true);} else if (operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_GET)) {  if (LOG.isDebugEnabled()) {    LOG.debug("Quering an element with key " + key + " from the Cache");  }  if (cache.isKeyInCache(key) && cache.get(key) != null) {    exchange.getIn().setHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND,true);    exchange.getIn().setBody(cache.get(key).getValue());  } else {    exchange.getIn().removeHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND);  }} else if (operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_CHECK)) {  if (LOG.isDebugEnabled()) {    LOG.debug("Querying an element with key " + key + " from the Cache");  }  if (cache.isKeyInCache(key)) {    exchange.getIn().setHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND,true);  } else {    exchange.getIn().removeHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND);  }} else {  throw new CacheException("Operation " + operation + " is not supported.");} @TO@ if (operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_ADD)) {  if (LOG.isDebugEnabled()) {    LOG.debug("Adding an element with key " + key + " into the Cache");  }  element=createElementFromBody(exchange,CacheConstants.CACHE_OPERATION_ADD);  cache.put(new Element(key,element));} else if (operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_UPDATE)) {  if (LOG.isDebugEnabled()) {    LOG.debug("Updating an element with key " + key + " into the Cache");  }  element=createElementFromBody(exchange,CacheConstants.CACHE_OPERATION_UPDATE);  cache.put(new Element(key,element));} else if (operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_DELETEALL)) {  if (LOG.isDebugEnabled()) {    LOG.debug("Deleting All elements from the Cache");  }  cache.removeAll();} else if (operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_DELETE)) {  if (LOG.isDebugEnabled()) {    LOG.debug("Deleting an element with key " + key + " into the Cache");  }  cache.remove(key);} else if (operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_GET)) {  if (LOG.isDebugEnabled()) {    LOG.debug("Quering an element with key " + key + " from the Cache");  }  if (cache.isKeyInCache(key) && cache.get(key) != null) {    exchange.getIn().setHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND,true);    exchange.getIn().setBody(cache.get(key).getValue());  } else {    exchange.getIn().removeHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND);  }} else if (operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_CHECK)) {  if (LOG.isDebugEnabled()) {    LOG.debug("Querying an element with key " + key + " from the Cache");  }  if (cache.isKeyInCache(key)) {    exchange.getIn().setHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND,true);  } else {    exchange.getIn().removeHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND);  }} else {  throw new CacheException("Operation " + operation + " is not supported.");} @AT@ 4081 @LENGTH@ 2410
---UPD Block@@ThenBody:{  if (LOG.isDebugEnabled()) {    LOG.debug("Adding an element with key " + key + " into the Cache");  }  element=createElementFromBody(exchange,CacheConstants.CACHE_OPERATION_ADD);  cache.put(new Element(key,element),true);} @TO@ ThenBody:{  if (LOG.isDebugEnabled()) {    LOG.debug("Adding an element with key " + key + " into the Cache");  }  element=createElementFromBody(exchange,CacheConstants.CACHE_OPERATION_ADD);  cache.put(new Element(key,element));} @AT@ 4149 @LENGTH@ 296
------UPD ExpressionStatement@@MethodInvocation:cache.put(new Element(key,element),true) @TO@ MethodInvocation:cache.put(new Element(key,element)) @AT@ 4392 @LENGTH@ 43
---------UPD MethodInvocation@@cache.put(new Element(key,element),true) @TO@ cache.put(new Element(key,element)) @AT@ 4392 @LENGTH@ 42
------------UPD SimpleName@@MethodName:put:[new Element(key,element), true] @TO@ MethodName:put:[new Element(key,element)] @AT@ 4398 @LENGTH@ 36
---------------DEL BooleanLiteral@@true @AT@ 4429 @LENGTH@ 4
---UPD Block@@ElseBody:if (operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_UPDATE)) {  if (LOG.isDebugEnabled()) {    LOG.debug("Updating an element with key " + key + " into the Cache");  }  element=createElementFromBody(exchange,CacheConstants.CACHE_OPERATION_UPDATE);  cache.put(new Element(key,element),true);} else if (operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_DELETEALL)) {  if (LOG.isDebugEnabled()) {    LOG.debug("Deleting All elements from the Cache");  }  cache.removeAll();} else if (operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_DELETE)) {  if (LOG.isDebugEnabled()) {    LOG.debug("Deleting an element with key " + key + " into the Cache");  }  cache.remove(key,true);} else if (operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_GET)) {  if (LOG.isDebugEnabled()) {    LOG.debug("Quering an element with key " + key + " from the Cache");  }  if (cache.isKeyInCache(key) && cache.get(key) != null) {    exchange.getIn().setHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND,true);    exchange.getIn().setBody(cache.get(key).getValue());  } else {    exchange.getIn().removeHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND);  }} else if (operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_CHECK)) {  if (LOG.isDebugEnabled()) {    LOG.debug("Querying an element with key " + key + " from the Cache");  }  if (cache.isKeyInCache(key)) {    exchange.getIn().setHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND,true);  } else {    exchange.getIn().removeHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND);  }} else {  throw new CacheException("Operation " + operation + " is not supported.");} @TO@ ElseBody:if (operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_UPDATE)) {  if (LOG.isDebugEnabled()) {    LOG.debug("Updating an element with key " + key + " into the Cache");  }  element=createElementFromBody(exchange,CacheConstants.CACHE_OPERATION_UPDATE);  cache.put(new Element(key,element));} else if (operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_DELETEALL)) {  if (LOG.isDebugEnabled()) {    LOG.debug("Deleting All elements from the Cache");  }  cache.removeAll();} else if (operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_DELETE)) {  if (LOG.isDebugEnabled()) {    LOG.debug("Deleting an element with key " + key + " into the Cache");  }  cache.remove(key);} else if (operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_GET)) {  if (LOG.isDebugEnabled()) {    LOG.debug("Quering an element with key " + key + " from the Cache");  }  if (cache.isKeyInCache(key) && cache.get(key) != null) {    exchange.getIn().setHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND,true);    exchange.getIn().setBody(cache.get(key).getValue());  } else {    exchange.getIn().removeHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND);  }} else if (operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_CHECK)) {  if (LOG.isDebugEnabled()) {    LOG.debug("Querying an element with key " + key + " from the Cache");  }  if (cache.isKeyInCache(key)) {    exchange.getIn().setHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND,true);  } else {    exchange.getIn().removeHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND);  }} else {  throw new CacheException("Operation " + operation + " is not supported.");} @AT@ 4451 @LENGTH@ 2040
------UPD IfStatement@@if (operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_UPDATE)) {  if (LOG.isDebugEnabled()) {    LOG.debug("Updating an element with key " + key + " into the Cache");  }  element=createElementFromBody(exchange,CacheConstants.CACHE_OPERATION_UPDATE);  cache.put(new Element(key,element),true);} else if (operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_DELETEALL)) {  if (LOG.isDebugEnabled()) {    LOG.debug("Deleting All elements from the Cache");  }  cache.removeAll();} else if (operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_DELETE)) {  if (LOG.isDebugEnabled()) {    LOG.debug("Deleting an element with key " + key + " into the Cache");  }  cache.remove(key,true);} else if (operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_GET)) {  if (LOG.isDebugEnabled()) {    LOG.debug("Quering an element with key " + key + " from the Cache");  }  if (cache.isKeyInCache(key) && cache.get(key) != null) {    exchange.getIn().setHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND,true);    exchange.getIn().setBody(cache.get(key).getValue());  } else {    exchange.getIn().removeHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND);  }} else if (operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_CHECK)) {  if (LOG.isDebugEnabled()) {    LOG.debug("Querying an element with key " + key + " from the Cache");  }  if (cache.isKeyInCache(key)) {    exchange.getIn().setHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND,true);  } else {    exchange.getIn().removeHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND);  }} else {  throw new CacheException("Operation " + operation + " is not supported.");} @TO@ if (operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_UPDATE)) {  if (LOG.isDebugEnabled()) {    LOG.debug("Updating an element with key " + key + " into the Cache");  }  element=createElementFromBody(exchange,CacheConstants.CACHE_OPERATION_UPDATE);  cache.put(new Element(key,element));} else if (operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_DELETEALL)) {  if (LOG.isDebugEnabled()) {    LOG.debug("Deleting All elements from the Cache");  }  cache.removeAll();} else if (operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_DELETE)) {  if (LOG.isDebugEnabled()) {    LOG.debug("Deleting an element with key " + key + " into the Cache");  }  cache.remove(key);} else if (operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_GET)) {  if (LOG.isDebugEnabled()) {    LOG.debug("Quering an element with key " + key + " from the Cache");  }  if (cache.isKeyInCache(key) && cache.get(key) != null) {    exchange.getIn().setHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND,true);    exchange.getIn().setBody(cache.get(key).getValue());  } else {    exchange.getIn().removeHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND);  }} else if (operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_CHECK)) {  if (LOG.isDebugEnabled()) {    LOG.debug("Querying an element with key " + key + " from the Cache");  }  if (cache.isKeyInCache(key)) {    exchange.getIn().setHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND,true);  } else {    exchange.getIn().removeHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND);  }} else {  throw new CacheException("Operation " + operation + " is not supported.");} @AT@ 4451 @LENGTH@ 2040
---------UPD Block@@ThenBody:{  if (LOG.isDebugEnabled()) {    LOG.debug("Updating an element with key " + key + " into the Cache");  }  element=createElementFromBody(exchange,CacheConstants.CACHE_OPERATION_UPDATE);  cache.put(new Element(key,element),true);} @TO@ ThenBody:{  if (LOG.isDebugEnabled()) {    LOG.debug("Updating an element with key " + key + " into the Cache");  }  element=createElementFromBody(exchange,CacheConstants.CACHE_OPERATION_UPDATE);  cache.put(new Element(key,element));} @AT@ 4522 @LENGTH@ 301
------------UPD ExpressionStatement@@MethodInvocation:cache.put(new Element(key,element),true) @TO@ MethodInvocation:cache.put(new Element(key,element)) @AT@ 4770 @LENGTH@ 43
---------------UPD MethodInvocation@@cache.put(new Element(key,element),true) @TO@ cache.put(new Element(key,element)) @AT@ 4770 @LENGTH@ 42
------------------UPD SimpleName@@MethodName:put:[new Element(key,element), true] @TO@ MethodName:put:[new Element(key,element)] @AT@ 4776 @LENGTH@ 36
---------------------DEL BooleanLiteral@@true @AT@ 4807 @LENGTH@ 4
---------UPD Block@@ElseBody:if (operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_DELETEALL)) {  if (LOG.isDebugEnabled()) {    LOG.debug("Deleting All elements from the Cache");  }  cache.removeAll();} else if (operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_DELETE)) {  if (LOG.isDebugEnabled()) {    LOG.debug("Deleting an element with key " + key + " into the Cache");  }  cache.remove(key,true);} else if (operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_GET)) {  if (LOG.isDebugEnabled()) {    LOG.debug("Quering an element with key " + key + " from the Cache");  }  if (cache.isKeyInCache(key) && cache.get(key) != null) {    exchange.getIn().setHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND,true);    exchange.getIn().setBody(cache.get(key).getValue());  } else {    exchange.getIn().removeHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND);  }} else if (operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_CHECK)) {  if (LOG.isDebugEnabled()) {    LOG.debug("Querying an element with key " + key + " from the Cache");  }  if (cache.isKeyInCache(key)) {    exchange.getIn().setHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND,true);  } else {    exchange.getIn().removeHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND);  }} else {  throw new CacheException("Operation " + operation + " is not supported.");} @TO@ ElseBody:if (operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_DELETEALL)) {  if (LOG.isDebugEnabled()) {    LOG.debug("Deleting All elements from the Cache");  }  cache.removeAll();} else if (operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_DELETE)) {  if (LOG.isDebugEnabled()) {    LOG.debug("Deleting an element with key " + key + " into the Cache");  }  cache.remove(key);} else if (operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_GET)) {  if (LOG.isDebugEnabled()) {    LOG.debug("Quering an element with key " + key + " from the Cache");  }  if (cache.isKeyInCache(key) && cache.get(key) != null) {    exchange.getIn().setHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND,true);    exchange.getIn().setBody(cache.get(key).getValue());  } else {    exchange.getIn().removeHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND);  }} else if (operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_CHECK)) {  if (LOG.isDebugEnabled()) {    LOG.debug("Querying an element with key " + key + " from the Cache");  }  if (cache.isKeyInCache(key)) {    exchange.getIn().setHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND,true);  } else {    exchange.getIn().removeHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND);  }} else {  throw new CacheException("Operation " + operation + " is not supported.");} @AT@ 4829 @LENGTH@ 1662
------------UPD IfStatement@@if (operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_DELETEALL)) {  if (LOG.isDebugEnabled()) {    LOG.debug("Deleting All elements from the Cache");  }  cache.removeAll();} else if (operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_DELETE)) {  if (LOG.isDebugEnabled()) {    LOG.debug("Deleting an element with key " + key + " into the Cache");  }  cache.remove(key,true);} else if (operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_GET)) {  if (LOG.isDebugEnabled()) {    LOG.debug("Quering an element with key " + key + " from the Cache");  }  if (cache.isKeyInCache(key) && cache.get(key) != null) {    exchange.getIn().setHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND,true);    exchange.getIn().setBody(cache.get(key).getValue());  } else {    exchange.getIn().removeHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND);  }} else if (operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_CHECK)) {  if (LOG.isDebugEnabled()) {    LOG.debug("Querying an element with key " + key + " from the Cache");  }  if (cache.isKeyInCache(key)) {    exchange.getIn().setHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND,true);  } else {    exchange.getIn().removeHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND);  }} else {  throw new CacheException("Operation " + operation + " is not supported.");} @TO@ if (operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_DELETEALL)) {  if (LOG.isDebugEnabled()) {    LOG.debug("Deleting All elements from the Cache");  }  cache.removeAll();} else if (operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_DELETE)) {  if (LOG.isDebugEnabled()) {    LOG.debug("Deleting an element with key " + key + " into the Cache");  }  cache.remove(key);} else if (operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_GET)) {  if (LOG.isDebugEnabled()) {    LOG.debug("Quering an element with key " + key + " from the Cache");  }  if (cache.isKeyInCache(key) && cache.get(key) != null) {    exchange.getIn().setHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND,true);    exchange.getIn().setBody(cache.get(key).getValue());  } else {    exchange.getIn().removeHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND);  }} else if (operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_CHECK)) {  if (LOG.isDebugEnabled()) {    LOG.debug("Querying an element with key " + key + " from the Cache");  }  if (cache.isKeyInCache(key)) {    exchange.getIn().setHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND,true);  } else {    exchange.getIn().removeHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND);  }} else {  throw new CacheException("Operation " + operation + " is not supported.");} @AT@ 4829 @LENGTH@ 1662
---------------UPD Block@@ElseBody:if (operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_DELETE)) {  if (LOG.isDebugEnabled()) {    LOG.debug("Deleting an element with key " + key + " into the Cache");  }  cache.remove(key,true);} else if (operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_GET)) {  if (LOG.isDebugEnabled()) {    LOG.debug("Quering an element with key " + key + " from the Cache");  }  if (cache.isKeyInCache(key) && cache.get(key) != null) {    exchange.getIn().setHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND,true);    exchange.getIn().setBody(cache.get(key).getValue());  } else {    exchange.getIn().removeHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND);  }} else if (operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_CHECK)) {  if (LOG.isDebugEnabled()) {    LOG.debug("Querying an element with key " + key + " from the Cache");  }  if (cache.isKeyInCache(key)) {    exchange.getIn().setHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND,true);  } else {    exchange.getIn().removeHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND);  }} else {  throw new CacheException("Operation " + operation + " is not supported.");} @TO@ ElseBody:if (operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_DELETE)) {  if (LOG.isDebugEnabled()) {    LOG.debug("Deleting an element with key " + key + " into the Cache");  }  cache.remove(key);} else if (operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_GET)) {  if (LOG.isDebugEnabled()) {    LOG.debug("Quering an element with key " + key + " from the Cache");  }  if (cache.isKeyInCache(key) && cache.get(key) != null) {    exchange.getIn().setHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND,true);    exchange.getIn().setBody(cache.get(key).getValue());  } else {    exchange.getIn().removeHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND);  }} else if (operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_CHECK)) {  if (LOG.isDebugEnabled()) {    LOG.debug("Querying an element with key " + key + " from the Cache");  }  if (cache.isKeyInCache(key)) {    exchange.getIn().setHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND,true);  } else {    exchange.getIn().removeHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND);  }} else {  throw new CacheException("Operation " + operation + " is not supported.");} @AT@ 5072 @LENGTH@ 1419
------------------UPD IfStatement@@if (operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_DELETE)) {  if (LOG.isDebugEnabled()) {    LOG.debug("Deleting an element with key " + key + " into the Cache");  }  cache.remove(key,true);} else if (operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_GET)) {  if (LOG.isDebugEnabled()) {    LOG.debug("Quering an element with key " + key + " from the Cache");  }  if (cache.isKeyInCache(key) && cache.get(key) != null) {    exchange.getIn().setHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND,true);    exchange.getIn().setBody(cache.get(key).getValue());  } else {    exchange.getIn().removeHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND);  }} else if (operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_CHECK)) {  if (LOG.isDebugEnabled()) {    LOG.debug("Querying an element with key " + key + " from the Cache");  }  if (cache.isKeyInCache(key)) {    exchange.getIn().setHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND,true);  } else {    exchange.getIn().removeHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND);  }} else {  throw new CacheException("Operation " + operation + " is not supported.");} @TO@ if (operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_DELETE)) {  if (LOG.isDebugEnabled()) {    LOG.debug("Deleting an element with key " + key + " into the Cache");  }  cache.remove(key);} else if (operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_GET)) {  if (LOG.isDebugEnabled()) {    LOG.debug("Quering an element with key " + key + " from the Cache");  }  if (cache.isKeyInCache(key) && cache.get(key) != null) {    exchange.getIn().setHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND,true);    exchange.getIn().setBody(cache.get(key).getValue());  } else {    exchange.getIn().removeHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND);  }} else if (operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_CHECK)) {  if (LOG.isDebugEnabled()) {    LOG.debug("Querying an element with key " + key + " from the Cache");  }  if (cache.isKeyInCache(key)) {    exchange.getIn().setHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND,true);  } else {    exchange.getIn().removeHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND);  }} else {  throw new CacheException("Operation " + operation + " is not supported.");} @AT@ 5072 @LENGTH@ 1419
---------------------UPD Block@@ThenBody:{  if (LOG.isDebugEnabled()) {    LOG.debug("Deleting an element with key " + key + " into the Cache");  }  cache.remove(key,true);} @TO@ ThenBody:{  if (LOG.isDebugEnabled()) {    LOG.debug("Deleting an element with key " + key + " into the Cache");  }  cache.remove(key);} @AT@ 5143 @LENGTH@ 188
------------------------UPD ExpressionStatement@@MethodInvocation:cache.remove(key,true) @TO@ MethodInvocation:cache.remove(key) @AT@ 5297 @LENGTH@ 24
---------------------------UPD MethodInvocation@@cache.remove(key,true) @TO@ cache.remove(key) @AT@ 5297 @LENGTH@ 23
------------------------------UPD SimpleName@@MethodName:remove:[key, true] @TO@ MethodName:remove:[key] @AT@ 5303 @LENGTH@ 17
---------------------------------DEL BooleanLiteral@@true @AT@ 5315 @LENGTH@ 4
------------------UPD IfStatement@@if (operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_DELETE)) {  if (LOG.isDebugEnabled()) {    LOG.debug("Deleting an element with key " + key + " into the Cache");  }  cache.remove(key,true);} else if (operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_GET)) {  if (LOG.isDebugEnabled()) {    LOG.debug("Quering an element with key " + key + " from the Cache");  }  if (cache.isKeyInCache(key) && cache.get(key) != null) {    exchange.getIn().setHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND,true);    exchange.getIn().setBody(cache.get(key).getValue());  } else {    exchange.getIn().removeHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND);  }} else if (operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_CHECK)) {  if (LOG.isDebugEnabled()) {    LOG.debug("Querying an element with key " + key + " from the Cache");  }  if (cache.isKeyInCache(key)) {    exchange.getIn().setHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND,true);  } else {    exchange.getIn().removeHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND);  }} else {  throw new CacheException("Operation " + operation + " is not supported.");} @TO@ if (operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_DELETE)) {  if (LOG.isDebugEnabled()) {    LOG.debug("Deleting an element with key " + key + " into the Cache");  }  cache.remove(key);} else if (operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_GET)) {  if (LOG.isDebugEnabled()) {    LOG.debug("Quering an element with key " + key + " from the Cache");  }  if (cache.isKeyInCache(key) && cache.get(key) != null) {    exchange.getIn().setHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND,true);    exchange.getIn().setBody(cache.get(key).getValue());  } else {    exchange.getIn().removeHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND);  }} else if (operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_CHECK)) {  if (LOG.isDebugEnabled()) {    LOG.debug("Querying an element with key " + key + " from the Cache");  }  if (cache.isKeyInCache(key)) {    exchange.getIn().setHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND,true);  } else {    exchange.getIn().removeHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND);  }} else {  throw new CacheException("Operation " + operation + " is not supported.");} @AT@ 5072 @LENGTH@ 1419
---------------------UPD Block@@ThenBody:{  if (LOG.isDebugEnabled()) {    LOG.debug("Deleting an element with key " + key + " into the Cache");  }  cache.remove(key,true);} @TO@ ThenBody:{  if (LOG.isDebugEnabled()) {    LOG.debug("Deleting an element with key " + key + " into the Cache");  }  cache.remove(key);} @AT@ 5143 @LENGTH@ 188
------------------------UPD ExpressionStatement@@MethodInvocation:cache.remove(key,true) @TO@ MethodInvocation:cache.remove(key) @AT@ 5297 @LENGTH@ 24
---------------------------UPD MethodInvocation@@cache.remove(key,true) @TO@ cache.remove(key) @AT@ 5297 @LENGTH@ 23
------------------------------UPD SimpleName@@MethodName:remove:[key, true] @TO@ MethodName:remove:[key] @AT@ 5303 @LENGTH@ 17
---------------------------------DEL BooleanLiteral@@true @AT@ 5315 @LENGTH@ 4
------------------UPD IfStatement@@if (operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_DELETE)) {  if (LOG.isDebugEnabled()) {    LOG.debug("Deleting an element with key " + key + " into the Cache");  }  cache.remove(key,true);} else if (operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_GET)) {  if (LOG.isDebugEnabled()) {    LOG.debug("Quering an element with key " + key + " from the Cache");  }  if (cache.isKeyInCache(key) && cache.get(key) != null) {    exchange.getIn().setHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND,true);    exchange.getIn().setBody(cache.get(key).getValue());  } else {    exchange.getIn().removeHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND);  }} else if (operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_CHECK)) {  if (LOG.isDebugEnabled()) {    LOG.debug("Querying an element with key " + key + " from the Cache");  }  if (cache.isKeyInCache(key)) {    exchange.getIn().setHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND,true);  } else {    exchange.getIn().removeHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND);  }} else {  throw new CacheException("Operation " + operation + " is not supported.");} @TO@ if (operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_DELETE)) {  if (LOG.isDebugEnabled()) {    LOG.debug("Deleting an element with key " + key + " into the Cache");  }  cache.remove(key);} else if (operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_GET)) {  if (LOG.isDebugEnabled()) {    LOG.debug("Quering an element with key " + key + " from the Cache");  }  if (cache.isKeyInCache(key) && cache.get(key) != null) {    exchange.getIn().setHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND,true);    exchange.getIn().setBody(cache.get(key).getValue());  } else {    exchange.getIn().removeHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND);  }} else if (operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_CHECK)) {  if (LOG.isDebugEnabled()) {    LOG.debug("Querying an element with key " + key + " from the Cache");  }  if (cache.isKeyInCache(key)) {    exchange.getIn().setHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND,true);  } else {    exchange.getIn().removeHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND);  }} else {  throw new CacheException("Operation " + operation + " is not supported.");} @AT@ 5072 @LENGTH@ 1419
---------------------UPD Block@@ThenBody:{  if (LOG.isDebugEnabled()) {    LOG.debug("Deleting an element with key " + key + " into the Cache");  }  cache.remove(key,true);} @TO@ ThenBody:{  if (LOG.isDebugEnabled()) {    LOG.debug("Deleting an element with key " + key + " into the Cache");  }  cache.remove(key);} @AT@ 5143 @LENGTH@ 188
------------------------UPD ExpressionStatement@@MethodInvocation:cache.remove(key,true) @TO@ MethodInvocation:cache.remove(key) @AT@ 5297 @LENGTH@ 24
---------------------------UPD MethodInvocation@@cache.remove(key,true) @TO@ cache.remove(key) @AT@ 5297 @LENGTH@ 23
------------------------------UPD SimpleName@@MethodName:remove:[key, true] @TO@ MethodName:remove:[key] @AT@ 5303 @LENGTH@ 17
---------------------------------DEL BooleanLiteral@@true @AT@ 5315 @LENGTH@ 4
------------------UPD IfStatement@@if (operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_DELETE)) {  if (LOG.isDebugEnabled()) {    LOG.debug("Deleting an element with key " + key + " into the Cache");  }  cache.remove(key,true);} else if (operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_GET)) {  if (LOG.isDebugEnabled()) {    LOG.debug("Quering an element with key " + key + " from the Cache");  }  if (cache.isKeyInCache(key) && cache.get(key) != null) {    exchange.getIn().setHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND,true);    exchange.getIn().setBody(cache.get(key).getValue());  } else {    exchange.getIn().removeHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND);  }} else if (operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_CHECK)) {  if (LOG.isDebugEnabled()) {    LOG.debug("Querying an element with key " + key + " from the Cache");  }  if (cache.isKeyInCache(key)) {    exchange.getIn().setHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND,true);  } else {    exchange.getIn().removeHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND);  }} else {  throw new CacheException("Operation " + operation + " is not supported.");} @TO@ if (operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_DELETE)) {  if (LOG.isDebugEnabled()) {    LOG.debug("Deleting an element with key " + key + " into the Cache");  }  cache.remove(key);} else if (operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_GET)) {  if (LOG.isDebugEnabled()) {    LOG.debug("Quering an element with key " + key + " from the Cache");  }  if (cache.isKeyInCache(key) && cache.get(key) != null) {    exchange.getIn().setHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND,true);    exchange.getIn().setBody(cache.get(key).getValue());  } else {    exchange.getIn().removeHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND);  }} else if (operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_CHECK)) {  if (LOG.isDebugEnabled()) {    LOG.debug("Querying an element with key " + key + " from the Cache");  }  if (cache.isKeyInCache(key)) {    exchange.getIn().setHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND,true);  } else {    exchange.getIn().removeHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND);  }} else {  throw new CacheException("Operation " + operation + " is not supported.");} @AT@ 5072 @LENGTH@ 1419
---------------------UPD Block@@ThenBody:{  if (LOG.isDebugEnabled()) {    LOG.debug("Deleting an element with key " + key + " into the Cache");  }  cache.remove(key,true);} @TO@ ThenBody:{  if (LOG.isDebugEnabled()) {    LOG.debug("Deleting an element with key " + key + " into the Cache");  }  cache.remove(key);} @AT@ 5143 @LENGTH@ 188
------------------------UPD ExpressionStatement@@MethodInvocation:cache.remove(key,true) @TO@ MethodInvocation:cache.remove(key) @AT@ 5297 @LENGTH@ 24
---------------------------UPD MethodInvocation@@cache.remove(key,true) @TO@ cache.remove(key) @AT@ 5297 @LENGTH@ 23
------------------------------UPD SimpleName@@MethodName:remove:[key, true] @TO@ MethodName:remove:[key] @AT@ 5303 @LENGTH@ 17
---------------------------------DEL BooleanLiteral@@true @AT@ 5315 @LENGTH@ 4
------------------UPD IfStatement@@if (operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_DELETE)) {  if (LOG.isDebugEnabled()) {    LOG.debug("Deleting an element with key " + key + " into the Cache");  }  cache.remove(key,true);} else if (operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_GET)) {  if (LOG.isDebugEnabled()) {    LOG.debug("Quering an element with key " + key + " from the Cache");  }  if (cache.isKeyInCache(key) && cache.get(key) != null) {    exchange.getIn().setHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND,true);    exchange.getIn().setBody(cache.get(key).getValue());  } else {    exchange.getIn().removeHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND);  }} else if (operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_CHECK)) {  if (LOG.isDebugEnabled()) {    LOG.debug("Querying an element with key " + key + " from the Cache");  }  if (cache.isKeyInCache(key)) {    exchange.getIn().setHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND,true);  } else {    exchange.getIn().removeHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND);  }} else {  throw new CacheException("Operation " + operation + " is not supported.");} @TO@ if (operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_DELETE)) {  if (LOG.isDebugEnabled()) {    LOG.debug("Deleting an element with key " + key + " into the Cache");  }  cache.remove(key);} else if (operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_GET)) {  if (LOG.isDebugEnabled()) {    LOG.debug("Quering an element with key " + key + " from the Cache");  }  if (cache.isKeyInCache(key) && cache.get(key) != null) {    exchange.getIn().setHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND,true);    exchange.getIn().setBody(cache.get(key).getValue());  } else {    exchange.getIn().removeHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND);  }} else if (operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_CHECK)) {  if (LOG.isDebugEnabled()) {    LOG.debug("Querying an element with key " + key + " from the Cache");  }  if (cache.isKeyInCache(key)) {    exchange.getIn().setHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND,true);  } else {    exchange.getIn().removeHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND);  }} else {  throw new CacheException("Operation " + operation + " is not supported.");} @AT@ 5072 @LENGTH@ 1419
---------------------UPD Block@@ThenBody:{  if (LOG.isDebugEnabled()) {    LOG.debug("Deleting an element with key " + key + " into the Cache");  }  cache.remove(key,true);} @TO@ ThenBody:{  if (LOG.isDebugEnabled()) {    LOG.debug("Deleting an element with key " + key + " into the Cache");  }  cache.remove(key);} @AT@ 5143 @LENGTH@ 188
------------------------UPD ExpressionStatement@@MethodInvocation:cache.remove(key,true) @TO@ MethodInvocation:cache.remove(key) @AT@ 5297 @LENGTH@ 24
---------------------------UPD MethodInvocation@@cache.remove(key,true) @TO@ cache.remove(key) @AT@ 5297 @LENGTH@ 23
------------------------------UPD SimpleName@@MethodName:remove:[key, true] @TO@ MethodName:remove:[key] @AT@ 5303 @LENGTH@ 17
---------------------------------DEL BooleanLiteral@@true @AT@ 5315 @LENGTH@ 4
------------UPD IfStatement@@if (operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_DELETEALL)) {  if (LOG.isDebugEnabled()) {    LOG.debug("Deleting All elements from the Cache");  }  cache.removeAll();} else if (operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_DELETE)) {  if (LOG.isDebugEnabled()) {    LOG.debug("Deleting an element with key " + key + " into the Cache");  }  cache.remove(key,true);} else if (operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_GET)) {  if (LOG.isDebugEnabled()) {    LOG.debug("Quering an element with key " + key + " from the Cache");  }  if (cache.isKeyInCache(key) && cache.get(key) != null) {    exchange.getIn().setHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND,true);    exchange.getIn().setBody(cache.get(key).getValue());  } else {    exchange.getIn().removeHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND);  }} else if (operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_CHECK)) {  if (LOG.isDebugEnabled()) {    LOG.debug("Querying an element with key " + key + " from the Cache");  }  if (cache.isKeyInCache(key)) {    exchange.getIn().setHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND,true);  } else {    exchange.getIn().removeHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND);  }} else {  throw new CacheException("Operation " + operation + " is not supported.");} @TO@ if (operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_DELETEALL)) {  if (LOG.isDebugEnabled()) {    LOG.debug("Deleting All elements from the Cache");  }  cache.removeAll();} else if (operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_DELETE)) {  if (LOG.isDebugEnabled()) {    LOG.debug("Deleting an element with key " + key + " into the Cache");  }  cache.remove(key);} else if (operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_GET)) {  if (LOG.isDebugEnabled()) {    LOG.debug("Quering an element with key " + key + " from the Cache");  }  if (cache.isKeyInCache(key) && cache.get(key) != null) {    exchange.getIn().setHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND,true);    exchange.getIn().setBody(cache.get(key).getValue());  } else {    exchange.getIn().removeHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND);  }} else if (operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_CHECK)) {  if (LOG.isDebugEnabled()) {    LOG.debug("Querying an element with key " + key + " from the Cache");  }  if (cache.isKeyInCache(key)) {    exchange.getIn().setHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND,true);  } else {    exchange.getIn().removeHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND);  }} else {  throw new CacheException("Operation " + operation + " is not supported.");} @AT@ 4829 @LENGTH@ 1662
---------------UPD Block@@ElseBody:if (operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_DELETE)) {  if (LOG.isDebugEnabled()) {    LOG.debug("Deleting an element with key " + key + " into the Cache");  }  cache.remove(key,true);} else if (operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_GET)) {  if (LOG.isDebugEnabled()) {    LOG.debug("Quering an element with key " + key + " from the Cache");  }  if (cache.isKeyInCache(key) && cache.get(key) != null) {    exchange.getIn().setHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND,true);    exchange.getIn().setBody(cache.get(key).getValue());  } else {    exchange.getIn().removeHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND);  }} else if (operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_CHECK)) {  if (LOG.isDebugEnabled()) {    LOG.debug("Querying an element with key " + key + " from the Cache");  }  if (cache.isKeyInCache(key)) {    exchange.getIn().setHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND,true);  } else {    exchange.getIn().removeHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND);  }} else {  throw new CacheException("Operation " + operation + " is not supported.");} @TO@ ElseBody:if (operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_DELETE)) {  if (LOG.isDebugEnabled()) {    LOG.debug("Deleting an element with key " + key + " into the Cache");  }  cache.remove(key);} else if (operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_GET)) {  if (LOG.isDebugEnabled()) {    LOG.debug("Quering an element with key " + key + " from the Cache");  }  if (cache.isKeyInCache(key) && cache.get(key) != null) {    exchange.getIn().setHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND,true);    exchange.getIn().setBody(cache.get(key).getValue());  } else {    exchange.getIn().removeHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND);  }} else if (operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_CHECK)) {  if (LOG.isDebugEnabled()) {    LOG.debug("Querying an element with key " + key + " from the Cache");  }  if (cache.isKeyInCache(key)) {    exchange.getIn().setHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND,true);  } else {    exchange.getIn().removeHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND);  }} else {  throw new CacheException("Operation " + operation + " is not supported.");} @AT@ 5072 @LENGTH@ 1419
------------------UPD IfStatement@@if (operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_DELETE)) {  if (LOG.isDebugEnabled()) {    LOG.debug("Deleting an element with key " + key + " into the Cache");  }  cache.remove(key,true);} else if (operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_GET)) {  if (LOG.isDebugEnabled()) {    LOG.debug("Quering an element with key " + key + " from the Cache");  }  if (cache.isKeyInCache(key) && cache.get(key) != null) {    exchange.getIn().setHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND,true);    exchange.getIn().setBody(cache.get(key).getValue());  } else {    exchange.getIn().removeHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND);  }} else if (operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_CHECK)) {  if (LOG.isDebugEnabled()) {    LOG.debug("Querying an element with key " + key + " from the Cache");  }  if (cache.isKeyInCache(key)) {    exchange.getIn().setHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND,true);  } else {    exchange.getIn().removeHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND);  }} else {  throw new CacheException("Operation " + operation + " is not supported.");} @TO@ if (operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_DELETE)) {  if (LOG.isDebugEnabled()) {    LOG.debug("Deleting an element with key " + key + " into the Cache");  }  cache.remove(key);} else if (operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_GET)) {  if (LOG.isDebugEnabled()) {    LOG.debug("Quering an element with key " + key + " from the Cache");  }  if (cache.isKeyInCache(key) && cache.get(key) != null) {    exchange.getIn().setHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND,true);    exchange.getIn().setBody(cache.get(key).getValue());  } else {    exchange.getIn().removeHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND);  }} else if (operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_CHECK)) {  if (LOG.isDebugEnabled()) {    LOG.debug("Querying an element with key " + key + " from the Cache");  }  if (cache.isKeyInCache(key)) {    exchange.getIn().setHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND,true);  } else {    exchange.getIn().removeHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND);  }} else {  throw new CacheException("Operation " + operation + " is not supported.");} @AT@ 5072 @LENGTH@ 1419
---------------------UPD Block@@ThenBody:{  if (LOG.isDebugEnabled()) {    LOG.debug("Deleting an element with key " + key + " into the Cache");  }  cache.remove(key,true);} @TO@ ThenBody:{  if (LOG.isDebugEnabled()) {    LOG.debug("Deleting an element with key " + key + " into the Cache");  }  cache.remove(key);} @AT@ 5143 @LENGTH@ 188
------------------------UPD ExpressionStatement@@MethodInvocation:cache.remove(key,true) @TO@ MethodInvocation:cache.remove(key) @AT@ 5297 @LENGTH@ 24
---------------------------UPD MethodInvocation@@cache.remove(key,true) @TO@ cache.remove(key) @AT@ 5297 @LENGTH@ 23
------------------------------UPD SimpleName@@MethodName:remove:[key, true] @TO@ MethodName:remove:[key] @AT@ 5303 @LENGTH@ 17
---------------------------------DEL BooleanLiteral@@true @AT@ 5315 @LENGTH@ 4
------------------UPD IfStatement@@if (operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_DELETE)) {  if (LOG.isDebugEnabled()) {    LOG.debug("Deleting an element with key " + key + " into the Cache");  }  cache.remove(key,true);} else if (operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_GET)) {  if (LOG.isDebugEnabled()) {    LOG.debug("Quering an element with key " + key + " from the Cache");  }  if (cache.isKeyInCache(key) && cache.get(key) != null) {    exchange.getIn().setHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND,true);    exchange.getIn().setBody(cache.get(key).getValue());  } else {    exchange.getIn().removeHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND);  }} else if (operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_CHECK)) {  if (LOG.isDebugEnabled()) {    LOG.debug("Querying an element with key " + key + " from the Cache");  }  if (cache.isKeyInCache(key)) {    exchange.getIn().setHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND,true);  } else {    exchange.getIn().removeHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND);  }} else {  throw new CacheException("Operation " + operation + " is not supported.");} @TO@ if (operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_DELETE)) {  if (LOG.isDebugEnabled()) {    LOG.debug("Deleting an element with key " + key + " into the Cache");  }  cache.remove(key);} else if (operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_GET)) {  if (LOG.isDebugEnabled()) {    LOG.debug("Quering an element with key " + key + " from the Cache");  }  if (cache.isKeyInCache(key) && cache.get(key) != null) {    exchange.getIn().setHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND,true);    exchange.getIn().setBody(cache.get(key).getValue());  } else {    exchange.getIn().removeHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND);  }} else if (operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_CHECK)) {  if (LOG.isDebugEnabled()) {    LOG.debug("Querying an element with key " + key + " from the Cache");  }  if (cache.isKeyInCache(key)) {    exchange.getIn().setHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND,true);  } else {    exchange.getIn().removeHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND);  }} else {  throw new CacheException("Operation " + operation + " is not supported.");} @AT@ 5072 @LENGTH@ 1419
---------------------UPD Block@@ThenBody:{  if (LOG.isDebugEnabled()) {    LOG.debug("Deleting an element with key " + key + " into the Cache");  }  cache.remove(key,true);} @TO@ ThenBody:{  if (LOG.isDebugEnabled()) {    LOG.debug("Deleting an element with key " + key + " into the Cache");  }  cache.remove(key);} @AT@ 5143 @LENGTH@ 188
------------------------UPD ExpressionStatement@@MethodInvocation:cache.remove(key,true) @TO@ MethodInvocation:cache.remove(key) @AT@ 5297 @LENGTH@ 24
---------------------------UPD MethodInvocation@@cache.remove(key,true) @TO@ cache.remove(key) @AT@ 5297 @LENGTH@ 23
------------------------------UPD SimpleName@@MethodName:remove:[key, true] @TO@ MethodName:remove:[key] @AT@ 5303 @LENGTH@ 17
---------------------------------DEL BooleanLiteral@@true @AT@ 5315 @LENGTH@ 4
------------------UPD IfStatement@@if (operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_DELETE)) {  if (LOG.isDebugEnabled()) {    LOG.debug("Deleting an element with key " + key + " into the Cache");  }  cache.remove(key,true);} else if (operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_GET)) {  if (LOG.isDebugEnabled()) {    LOG.debug("Quering an element with key " + key + " from the Cache");  }  if (cache.isKeyInCache(key) && cache.get(key) != null) {    exchange.getIn().setHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND,true);    exchange.getIn().setBody(cache.get(key).getValue());  } else {    exchange.getIn().removeHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND);  }} else if (operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_CHECK)) {  if (LOG.isDebugEnabled()) {    LOG.debug("Querying an element with key " + key + " from the Cache");  }  if (cache.isKeyInCache(key)) {    exchange.getIn().setHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND,true);  } else {    exchange.getIn().removeHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND);  }} else {  throw new CacheException("Operation " + operation + " is not supported.");} @TO@ if (operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_DELETE)) {  if (LOG.isDebugEnabled()) {    LOG.debug("Deleting an element with key " + key + " into the Cache");  }  cache.remove(key);} else if (operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_GET)) {  if (LOG.isDebugEnabled()) {    LOG.debug("Quering an element with key " + key + " from the Cache");  }  if (cache.isKeyInCache(key) && cache.get(key) != null) {    exchange.getIn().setHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND,true);    exchange.getIn().setBody(cache.get(key).getValue());  } else {    exchange.getIn().removeHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND);  }} else if (operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_CHECK)) {  if (LOG.isDebugEnabled()) {    LOG.debug("Querying an element with key " + key + " from the Cache");  }  if (cache.isKeyInCache(key)) {    exchange.getIn().setHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND,true);  } else {    exchange.getIn().removeHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND);  }} else {  throw new CacheException("Operation " + operation + " is not supported.");} @AT@ 5072 @LENGTH@ 1419
---------------------UPD Block@@ThenBody:{  if (LOG.isDebugEnabled()) {    LOG.debug("Deleting an element with key " + key + " into the Cache");  }  cache.remove(key,true);} @TO@ ThenBody:{  if (LOG.isDebugEnabled()) {    LOG.debug("Deleting an element with key " + key + " into the Cache");  }  cache.remove(key);} @AT@ 5143 @LENGTH@ 188
------------------------UPD ExpressionStatement@@MethodInvocation:cache.remove(key,true) @TO@ MethodInvocation:cache.remove(key) @AT@ 5297 @LENGTH@ 24
---------------------------UPD MethodInvocation@@cache.remove(key,true) @TO@ cache.remove(key) @AT@ 5297 @LENGTH@ 23
------------------------------UPD SimpleName@@MethodName:remove:[key, true] @TO@ MethodName:remove:[key] @AT@ 5303 @LENGTH@ 17
---------------------------------DEL BooleanLiteral@@true @AT@ 5315 @LENGTH@ 4
------------------UPD IfStatement@@if (operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_DELETE)) {  if (LOG.isDebugEnabled()) {    LOG.debug("Deleting an element with key " + key + " into the Cache");  }  cache.remove(key,true);} else if (operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_GET)) {  if (LOG.isDebugEnabled()) {    LOG.debug("Quering an element with key " + key + " from the Cache");  }  if (cache.isKeyInCache(key) && cache.get(key) != null) {    exchange.getIn().setHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND,true);    exchange.getIn().setBody(cache.get(key).getValue());  } else {    exchange.getIn().removeHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND);  }} else if (operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_CHECK)) {  if (LOG.isDebugEnabled()) {    LOG.debug("Querying an element with key " + key + " from the Cache");  }  if (cache.isKeyInCache(key)) {    exchange.getIn().setHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND,true);  } else {    exchange.getIn().removeHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND);  }} else {  throw new CacheException("Operation " + operation + " is not supported.");} @TO@ if (operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_DELETE)) {  if (LOG.isDebugEnabled()) {    LOG.debug("Deleting an element with key " + key + " into the Cache");  }  cache.remove(key);} else if (operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_GET)) {  if (LOG.isDebugEnabled()) {    LOG.debug("Quering an element with key " + key + " from the Cache");  }  if (cache.isKeyInCache(key) && cache.get(key) != null) {    exchange.getIn().setHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND,true);    exchange.getIn().setBody(cache.get(key).getValue());  } else {    exchange.getIn().removeHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND);  }} else if (operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_CHECK)) {  if (LOG.isDebugEnabled()) {    LOG.debug("Querying an element with key " + key + " from the Cache");  }  if (cache.isKeyInCache(key)) {    exchange.getIn().setHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND,true);  } else {    exchange.getIn().removeHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND);  }} else {  throw new CacheException("Operation " + operation + " is not supported.");} @AT@ 5072 @LENGTH@ 1419
---------------------UPD Block@@ThenBody:{  if (LOG.isDebugEnabled()) {    LOG.debug("Deleting an element with key " + key + " into the Cache");  }  cache.remove(key,true);} @TO@ ThenBody:{  if (LOG.isDebugEnabled()) {    LOG.debug("Deleting an element with key " + key + " into the Cache");  }  cache.remove(key);} @AT@ 5143 @LENGTH@ 188
------------------------UPD ExpressionStatement@@MethodInvocation:cache.remove(key,true) @TO@ MethodInvocation:cache.remove(key) @AT@ 5297 @LENGTH@ 24
---------------------------UPD MethodInvocation@@cache.remove(key,true) @TO@ cache.remove(key) @AT@ 5297 @LENGTH@ 23
------------------------------UPD SimpleName@@MethodName:remove:[key, true] @TO@ MethodName:remove:[key] @AT@ 5303 @LENGTH@ 17
---------------------------------DEL BooleanLiteral@@true @AT@ 5315 @LENGTH@ 4
------------------UPD IfStatement@@if (operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_DELETE)) {  if (LOG.isDebugEnabled()) {    LOG.debug("Deleting an element with key " + key + " into the Cache");  }  cache.remove(key,true);} else if (operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_GET)) {  if (LOG.isDebugEnabled()) {    LOG.debug("Quering an element with key " + key + " from the Cache");  }  if (cache.isKeyInCache(key) && cache.get(key) != null) {    exchange.getIn().setHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND,true);    exchange.getIn().setBody(cache.get(key).getValue());  } else {    exchange.getIn().removeHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND);  }} else if (operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_CHECK)) {  if (LOG.isDebugEnabled()) {    LOG.debug("Querying an element with key " + key + " from the Cache");  }  if (cache.isKeyInCache(key)) {    exchange.getIn().setHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND,true);  } else {    exchange.getIn().removeHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND);  }} else {  throw new CacheException("Operation " + operation + " is not supported.");} @TO@ if (operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_DELETE)) {  if (LOG.isDebugEnabled()) {    LOG.debug("Deleting an element with key " + key + " into the Cache");  }  cache.remove(key);} else if (operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_GET)) {  if (LOG.isDebugEnabled()) {    LOG.debug("Quering an element with key " + key + " from the Cache");  }  if (cache.isKeyInCache(key) && cache.get(key) != null) {    exchange.getIn().setHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND,true);    exchange.getIn().setBody(cache.get(key).getValue());  } else {    exchange.getIn().removeHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND);  }} else if (operation.equalsIgnoreCase(CacheConstants.CACHE_OPERATION_CHECK)) {  if (LOG.isDebugEnabled()) {    LOG.debug("Querying an element with key " + key + " from the Cache");  }  if (cache.isKeyInCache(key)) {    exchange.getIn().setHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND,true);  } else {    exchange.getIn().removeHeader(CacheConstants.CACHE_ELEMENT_WAS_FOUND);  }} else {  throw new CacheException("Operation " + operation + " is not supported.");} @AT@ 5072 @LENGTH@ 1419
---------------------UPD Block@@ThenBody:{  if (LOG.isDebugEnabled()) {    LOG.debug("Deleting an element with key " + key + " into the Cache");  }  cache.remove(key,true);} @TO@ ThenBody:{  if (LOG.isDebugEnabled()) {    LOG.debug("Deleting an element with key " + key + " into the Cache");  }  cache.remove(key);} @AT@ 5143 @LENGTH@ 188
------------------------UPD ExpressionStatement@@MethodInvocation:cache.remove(key,true) @TO@ MethodInvocation:cache.remove(key) @AT@ 5297 @LENGTH@ 24
---------------------------UPD MethodInvocation@@cache.remove(key,true) @TO@ cache.remove(key) @AT@ 5297 @LENGTH@ 23
------------------------------UPD SimpleName@@MethodName:remove:[key, true] @TO@ MethodName:remove:[key] @AT@ 5303 @LENGTH@ 17
---------------------------------DEL BooleanLiteral@@true @AT@ 5315 @LENGTH@ 4


UPD ExpressionStatement@@Assignment:response=client.resource("http://localhost:" + port + "/sparklr/json/photos").header("Authorization",String.format("OAuth %s",accessToken.getValue())).get(ClientResponse.class) @TO@ Assignment:response=client.resource("http://localhost:" + port + "/sparklr/json/photos").header("Authorization",String.format("OAuth2 %s",accessToken.getValue())).get(ClientResponse.class) @AT@ 6326 @LENGTH@ 195
---UPD Assignment@@response=client.resource("http://localhost:" + port + "/sparklr/json/photos").header("Authorization",String.format("OAuth %s",accessToken.getValue())).get(ClientResponse.class) @TO@ response=client.resource("http://localhost:" + port + "/sparklr/json/photos").header("Authorization",String.format("OAuth2 %s",accessToken.getValue())).get(ClientResponse.class) @AT@ 6326 @LENGTH@ 194
------UPD MethodInvocation@@client.resource("http://localhost:" + port + "/sparklr/json/photos").header("Authorization",String.format("OAuth %s",accessToken.getValue())).get(ClientResponse.class) @TO@ client.resource("http://localhost:" + port + "/sparklr/json/photos").header("Authorization",String.format("OAuth2 %s",accessToken.getValue())).get(ClientResponse.class) @AT@ 6337 @LENGTH@ 183
---------UPD MethodInvocation@@MethodName:header:["Authorization", String.format("OAuth %s",accessToken.getValue())] @TO@ MethodName:header:["Authorization", String.format("OAuth2 %s",accessToken.getValue())] @AT@ 6337 @LENGTH@ 150
------------UPD MethodInvocation@@String.format("OAuth %s",accessToken.getValue()) @TO@ String.format("OAuth2 %s",accessToken.getValue()) @AT@ 6437 @LENGTH@ 49
---------------UPD SimpleName@@MethodName:format:["OAuth %s", accessToken.getValue()] @TO@ MethodName:format:["OAuth2 %s", accessToken.getValue()] @AT@ 6444 @LENGTH@ 42
------------------UPD StringLiteral@@"OAuth %s" @TO@ "OAuth2 %s" @AT@ 6451 @LENGTH@ 10


INS MethodDeclaration@@boolean, MethodName:full,  @TO@ TypeDeclaration@@[public]ProtocolCodec,  @AT@ 2832 @LENGTH@ 7
---INS PrimitiveType@@boolean @TO@ MethodDeclaration@@boolean, MethodName:full,  @AT@ 2824 @LENGTH@ 7
---INS SimpleName@@MethodName:full @TO@ MethodDeclaration@@boolean, MethodName:full,  @AT@ 2832 @LENGTH@ 4


UPD FieldDeclaration@@public, static, final, int, [INSTALL_OSGI_ATTACHMENTS=0x0500] @TO@ public, static, final, int, [INSTALL_OSGI_DEPLOYMENT=0x0500] @AT@ 10153 @LENGTH@ 77
---UPD VariableDeclarationFragment@@INSTALL_OSGI_ATTACHMENTS=0x0500 @TO@ INSTALL_OSGI_DEPLOYMENT=0x0500 @AT@ 10177 @LENGTH@ 52
------UPD SimpleName@@INSTALL_OSGI_ATTACHMENTS @TO@ INSTALL_OSGI_DEPLOYMENT @AT@ 10177 @LENGTH@ 24


INS MethodDeclaration@@InjectedValue<NamespaceContextSelector>, MethodName:getNamespaceContextSelectorInjector,  @TO@ TypeDeclaration@@[public, abstract]AbstractComponent, [Component] @AT@ 13261 @LENGTH@ 94
---INS ParameterizedType@@InjectedValue<NamespaceContextSelector> @TO@ MethodDeclaration@@InjectedValue<NamespaceContextSelector>, MethodName:getNamespaceContextSelectorInjector,  @AT@ 13221 @LENGTH@ 39
------INS SimpleType@@InjectedValue @TO@ ParameterizedType@@InjectedValue<NamespaceContextSelector> @AT@ 13221 @LENGTH@ 13
------INS SimpleType@@NamespaceContextSelector @TO@ ParameterizedType@@InjectedValue<NamespaceContextSelector> @AT@ 13235 @LENGTH@ 24
---INS SimpleName@@MethodName:getNamespaceContextSelectorInjector @TO@ MethodDeclaration@@InjectedValue<NamespaceContextSelector>, MethodName:getNamespaceContextSelectorInjector,  @AT@ 13261 @LENGTH@ 35
---INS ReturnStatement@@SimpleName:namespaceContextSelectorInjector @TO@ MethodDeclaration@@InjectedValue<NamespaceContextSelector>, MethodName:getNamespaceContextSelectorInjector,  @AT@ 13309 @LENGTH@ 40
------INS SimpleName@@namespaceContextSelectorInjector @TO@ ReturnStatement@@SimpleName:namespaceContextSelectorInjector @AT@ 13316 @LENGTH@ 32


UPD Block@@ElseBody:{  return "Sample[1 Exchange per " + getSamplePeriod() + " "+ getUnits().toString().toLowerCase()+ " -> "+ getOutputs()+ "]";} @TO@ ElseBody:{  TimeUnit tu=getUnits() != null ? getUnits() : TimeUnit.SECONDS;  return "Sample[1 Exchange per " + getSamplePeriod() + " "+ tu.toString().toLowerCase()+ " -> "+ getOutputs()+ "]";} @AT@ 2361 @LENGTH@ 150
---INS VariableDeclarationStatement@@TimeUnit tu=getUnits() != null ? getUnits() : TimeUnit.SECONDS; @TO@ Block@@ElseBody:{  return "Sample[1 Exchange per " + getSamplePeriod() + " "+ getUnits().toString().toLowerCase()+ " -> "+ getOutputs()+ "]";} @AT@ 2369 @LENGTH@ 65
------INS SimpleType@@TimeUnit @TO@ VariableDeclarationStatement@@TimeUnit tu=getUnits() != null ? getUnits() : TimeUnit.SECONDS; @AT@ 2369 @LENGTH@ 8
------INS VariableDeclarationFragment@@tu=getUnits() != null ? getUnits() : TimeUnit.SECONDS @TO@ VariableDeclarationStatement@@TimeUnit tu=getUnits() != null ? getUnits() : TimeUnit.SECONDS; @AT@ 2378 @LENGTH@ 55
---------INS SimpleName@@tu @TO@ VariableDeclarationFragment@@tu=getUnits() != null ? getUnits() : TimeUnit.SECONDS @AT@ 2378 @LENGTH@ 2
---------INS ConditionalExpression@@getUnits() != null ? getUnits() : TimeUnit.SECONDS @TO@ VariableDeclarationFragment@@tu=getUnits() != null ? getUnits() : TimeUnit.SECONDS @AT@ 2383 @LENGTH@ 50
------------INS InfixExpression@@getUnits() != null @TO@ ConditionalExpression@@getUnits() != null ? getUnits() : TimeUnit.SECONDS @AT@ 2383 @LENGTH@ 18
---------------INS MethodInvocation@@MethodName:getUnits:[] @TO@ InfixExpression@@getUnits() != null @AT@ 2383 @LENGTH@ 10
---------------INS Operator@@!= @TO@ InfixExpression@@getUnits() != null @AT@ 2393 @LENGTH@ 2
---------------INS NullLiteral@@null @TO@ InfixExpression@@getUnits() != null @AT@ 2397 @LENGTH@ 4
------------INS MethodInvocation@@MethodName:getUnits:[] @TO@ ConditionalExpression@@getUnits() != null ? getUnits() : TimeUnit.SECONDS @AT@ 2404 @LENGTH@ 10
------------INS QualifiedName@@TimeUnit.SECONDS @TO@ ConditionalExpression@@getUnits() != null ? getUnits() : TimeUnit.SECONDS @AT@ 2417 @LENGTH@ 16
---------------INS SimpleName@@TimeUnit @TO@ QualifiedName@@TimeUnit.SECONDS @AT@ 2417 @LENGTH@ 8
---------------INS SimpleName@@SECONDS @TO@ QualifiedName@@TimeUnit.SECONDS @AT@ 2426 @LENGTH@ 7
---UPD ReturnStatement@@InfixExpression:"Sample[1 Exchange per " + getSamplePeriod() + " "+ getUnits().toString().toLowerCase()+ " -> "+ getOutputs()+ "]" @TO@ InfixExpression:"Sample[1 Exchange per " + getSamplePeriod() + " "+ tu.toString().toLowerCase()+ " -> "+ getOutputs()+ "]" @AT@ 2375 @LENGTH@ 126
------UPD InfixExpression@@"Sample[1 Exchange per " + getSamplePeriod() + " "+ getUnits().toString().toLowerCase()+ " -> "+ getOutputs()+ "]" @TO@ "Sample[1 Exchange per " + getSamplePeriod() + " "+ tu.toString().toLowerCase()+ " -> "+ getOutputs()+ "]" @AT@ 2382 @LENGTH@ 118
---------UPD MethodInvocation@@getUnits().toString().toLowerCase() @TO@ tu.toString().toLowerCase() @AT@ 2435 @LENGTH@ 35
------------DEL MethodInvocation@@MethodName:getUnits:[] @AT@ 2435 @LENGTH@ 10
------------INS SimpleName@@Name:tu @TO@ MethodInvocation@@getUnits().toString().toLowerCase() @AT@ 2507 @LENGTH@ 2


UPD MethodDeclaration@@protected, void, MethodName:doHandle, CommandContext ctx,  @TO@ protected, void, MethodName:doHandle, CommandContext ctx, CommandFormatException,  @AT@ 2106 @LENGTH@ 1134
---INS SimpleType@@CommandFormatException @TO@ MethodDeclaration@@protected, void, MethodName:doHandle, CommandContext ctx,  @AT@ 2157 @LENGTH@ 22


INS MethodDeclaration@@protected, Integer, MethodName:getExchangeIndex, Exchange exchange,  @TO@ TypeDeclaration@@[public]Splitter, MulticastProcessor[AsyncProcessor, Traceable] @AT@ 8187 @LENGTH@ 135
---INS Modifier@@protected @TO@ MethodDeclaration@@protected, Integer, MethodName:getExchangeIndex, Exchange exchange,  @AT@ 8187 @LENGTH@ 9
---INS SimpleType@@Integer @TO@ MethodDeclaration@@protected, Integer, MethodName:getExchangeIndex, Exchange exchange,  @AT@ 8197 @LENGTH@ 7
---INS SimpleName@@MethodName:getExchangeIndex @TO@ MethodDeclaration@@protected, Integer, MethodName:getExchangeIndex, Exchange exchange,  @AT@ 8205 @LENGTH@ 16
---INS SingleVariableDeclaration@@Exchange exchange @TO@ MethodDeclaration@@protected, Integer, MethodName:getExchangeIndex, Exchange exchange,  @AT@ 8222 @LENGTH@ 17
------INS SimpleType@@Exchange @TO@ SingleVariableDeclaration@@Exchange exchange @AT@ 8222 @LENGTH@ 8
------INS SimpleName@@exchange @TO@ SingleVariableDeclaration@@Exchange exchange @AT@ 8231 @LENGTH@ 8
---INS ReturnStatement@@MethodInvocation:exchange.getProperty(Exchange.SPLIT_INDEX,Integer.class) @TO@ MethodDeclaration@@protected, Integer, MethodName:getExchangeIndex, Exchange exchange,  @AT@ 8251 @LENGTH@ 65
------INS MethodInvocation@@exchange.getProperty(Exchange.SPLIT_INDEX,Integer.class) @TO@ ReturnStatement@@MethodInvocation:exchange.getProperty(Exchange.SPLIT_INDEX,Integer.class) @AT@ 8258 @LENGTH@ 57
---------INS SimpleName@@Name:exchange @TO@ MethodInvocation@@exchange.getProperty(Exchange.SPLIT_INDEX,Integer.class) @AT@ 8258 @LENGTH@ 8
---------INS SimpleName@@MethodName:getProperty:[Exchange.SPLIT_INDEX, Integer.class] @TO@ MethodInvocation@@exchange.getProperty(Exchange.SPLIT_INDEX,Integer.class) @AT@ 8267 @LENGTH@ 48
------------INS QualifiedName@@Exchange.SPLIT_INDEX @TO@ SimpleName@@MethodName:getProperty:[Exchange.SPLIT_INDEX, Integer.class] @AT@ 8279 @LENGTH@ 20
---------------INS SimpleName@@Exchange @TO@ QualifiedName@@Exchange.SPLIT_INDEX @AT@ 8279 @LENGTH@ 8
---------------INS SimpleName@@SPLIT_INDEX @TO@ QualifiedName@@Exchange.SPLIT_INDEX @AT@ 8288 @LENGTH@ 11
------------INS TypeLiteral@@Integer.class @TO@ SimpleName@@MethodName:getProperty:[Exchange.SPLIT_INDEX, Integer.class] @AT@ 8301 @LENGTH@ 13


INS TryStatement@@try {  if (!ctx.getParsedArguments().hasArguments()) {    throw new OperationFormatException("Arguments are missing");  }} catch (CommandFormatException e) {  throw new OperationFormatException(e.getLocalizedMessage());} @TO@ MethodDeclaration@@public, ModelNode, MethodName:buildRequest, CommandContext ctx, OperationFormatException,  @AT@ 2657 @LENGTH@ 283
---MOV IfStatement@@if (!ctx.getParsedArguments().hasArguments()) {  throw new OperationFormatException("Arguments are missing");} @TO@ TryStatement@@try {  if (!ctx.getParsedArguments().hasArguments()) {    throw new OperationFormatException("Arguments are missing");  }} catch (CommandFormatException e) {  throw new OperationFormatException(e.getLocalizedMessage());} @AT@ 2609 @LENGTH@ 129
---INS CatchClause@@catch (CommandFormatException e) {  throw new OperationFormatException(e.getLocalizedMessage());} @TO@ TryStatement@@try {  if (!ctx.getParsedArguments().hasArguments()) {    throw new OperationFormatException("Arguments are missing");  }} catch (CommandFormatException e) {  throw new OperationFormatException(e.getLocalizedMessage());} @AT@ 2823 @LENGTH@ 117
------INS SingleVariableDeclaration@@CommandFormatException e @TO@ CatchClause@@catch (CommandFormatException e) {  throw new OperationFormatException(e.getLocalizedMessage());} @AT@ 2830 @LENGTH@ 24
---------INS SimpleType@@CommandFormatException @TO@ SingleVariableDeclaration@@CommandFormatException e @AT@ 2830 @LENGTH@ 22
---------INS SimpleName@@e @TO@ SingleVariableDeclaration@@CommandFormatException e @AT@ 2853 @LENGTH@ 1
------INS ThrowStatement@@ClassInstanceCreation:new OperationFormatException(e.getLocalizedMessage()) @TO@ CatchClause@@catch (CommandFormatException e) {  throw new OperationFormatException(e.getLocalizedMessage());} @AT@ 2870 @LENGTH@ 60
---------INS ClassInstanceCreation@@OperationFormatException[e.getLocalizedMessage()] @TO@ ThrowStatement@@ClassInstanceCreation:new OperationFormatException(e.getLocalizedMessage()) @AT@ 2876 @LENGTH@ 53
------------INS New@@new @TO@ ClassInstanceCreation@@OperationFormatException[e.getLocalizedMessage()] @AT@ 2876 @LENGTH@ 3
------------INS SimpleType@@OperationFormatException @TO@ ClassInstanceCreation@@OperationFormatException[e.getLocalizedMessage()] @AT@ 2880 @LENGTH@ 24
------------INS MethodInvocation@@e.getLocalizedMessage() @TO@ ClassInstanceCreation@@OperationFormatException[e.getLocalizedMessage()] @AT@ 2905 @LENGTH@ 23
---------------INS SimpleName@@Name:e @TO@ MethodInvocation@@e.getLocalizedMessage() @AT@ 2905 @LENGTH@ 1
---------------INS SimpleName@@MethodName:getLocalizedMessage:[] @TO@ MethodInvocation@@e.getLocalizedMessage() @AT@ 2907 @LENGTH@ 21


UPD ExpressionStatement@@MethodInvocation:mapper.parseDocument(operations,XMLInputFactory.newFactory().createXMLStreamReader(reader)) @TO@ MethodInvocation:mapper.parseDocument(operations,XMLInputFactory.newInstance().createXMLStreamReader(reader)) @AT@ 3181 @LENGTH@ 93
---UPD MethodInvocation@@mapper.parseDocument(operations,XMLInputFactory.newFactory().createXMLStreamReader(reader)) @TO@ mapper.parseDocument(operations,XMLInputFactory.newInstance().createXMLStreamReader(reader)) @AT@ 3181 @LENGTH@ 92
------UPD SimpleName@@MethodName:parseDocument:[operations, XMLInputFactory.newFactory().createXMLStreamReader(reader)] @TO@ MethodName:parseDocument:[operations, XMLInputFactory.newInstance().createXMLStreamReader(reader)] @AT@ 3188 @LENGTH@ 85
---------UPD MethodInvocation@@XMLInputFactory.newFactory().createXMLStreamReader(reader) @TO@ XMLInputFactory.newInstance().createXMLStreamReader(reader) @AT@ 3214 @LENGTH@ 58
------------UPD MethodInvocation@@MethodName:newFactory:[] @TO@ MethodName:newInstance:[] @AT@ 3214 @LENGTH@ 28


INS IfStatement@@if (id == null) {  return;} @TO@ MethodDeclaration@@protected, void, MethodName:populateIdIfNecessary, Object savedObject, ObjectId id,  @AT@ 23779 @LENGTH@ 32
---INS InfixExpression@@id == null @TO@ IfStatement@@if (id == null) {  return;} @AT@ 23783 @LENGTH@ 10
------INS SimpleName@@id @TO@ InfixExpression@@id == null @AT@ 23783 @LENGTH@ 2
------INS Operator@@== @TO@ InfixExpression@@id == null @AT@ 23785 @LENGTH@ 2
------INS NullLiteral@@null @TO@ InfixExpression@@id == null @AT@ 23789 @LENGTH@ 4
---INS Block@@ThenBody:{  return;} @TO@ IfStatement@@if (id == null) {  return;} @AT@ 23795 @LENGTH@ 16
------INS ReturnStatement@@ @TO@ Block@@ThenBody:{  return;} @AT@ 23800 @LENGTH@ 7


INS IfStatement@@if (warMetaData == null || warMetaData.getWebMetaData() == null) {  return false;} @TO@ MethodDeclaration@@private, boolean, MethodName:isWSDeployment, DeploymentUnit unit,  @AT@ 6977 @LENGTH@ 101
---INS InfixExpression@@warMetaData == null || warMetaData.getWebMetaData() == null @TO@ IfStatement@@if (warMetaData == null || warMetaData.getWebMetaData() == null) {  return false;} @AT@ 6980 @LENGTH@ 59
------INS InfixExpression@@warMetaData == null @TO@ InfixExpression@@warMetaData == null || warMetaData.getWebMetaData() == null @AT@ 6980 @LENGTH@ 19
---------INS SimpleName@@warMetaData @TO@ InfixExpression@@warMetaData == null @AT@ 6980 @LENGTH@ 11
---------INS Operator@@== @TO@ InfixExpression@@warMetaData == null @AT@ 6991 @LENGTH@ 2
---------INS NullLiteral@@null @TO@ InfixExpression@@warMetaData == null @AT@ 6995 @LENGTH@ 4
------INS Operator@@|| @TO@ InfixExpression@@warMetaData == null || warMetaData.getWebMetaData() == null @AT@ 6999 @LENGTH@ 2
------INS InfixExpression@@warMetaData.getWebMetaData() == null @TO@ InfixExpression@@warMetaData == null || warMetaData.getWebMetaData() == null @AT@ 7003 @LENGTH@ 36
---------INS MethodInvocation@@warMetaData.getWebMetaData() @TO@ InfixExpression@@warMetaData.getWebMetaData() == null @AT@ 7003 @LENGTH@ 28
------------INS SimpleName@@Name:warMetaData @TO@ MethodInvocation@@warMetaData.getWebMetaData() @AT@ 7003 @LENGTH@ 11
------------INS SimpleName@@MethodName:getWebMetaData:[] @TO@ MethodInvocation@@warMetaData.getWebMetaData() @AT@ 7015 @LENGTH@ 16
---------INS Operator@@== @TO@ InfixExpression@@warMetaData.getWebMetaData() == null @AT@ 7031 @LENGTH@ 2
---------INS NullLiteral@@null @TO@ InfixExpression@@warMetaData.getWebMetaData() == null @AT@ 7035 @LENGTH@ 4
---INS Block@@ThenBody:{  return false;} @TO@ IfStatement@@if (warMetaData == null || warMetaData.getWebMetaData() == null) {  return false;} @AT@ 7041 @LENGTH@ 37
------INS ReturnStatement@@BooleanLiteral:false @TO@ Block@@ThenBody:{  return false;} @AT@ 7055 @LENGTH@ 13
---------INS BooleanLiteral@@false @TO@ ReturnStatement@@BooleanLiteral:false @AT@ 7062 @LENGTH@ 5


UPD TryStatement@@try {  final RootLoggerService service=new RootLoggerService();  service.setLevel(Level.parse(getLevelName()));  final BatchBuilder batchBuilder=updateContext.getServiceTarget();  batchBuilder.addService(LogServices.ROOT_LOGGER,service).addListener(new UpdateResultHandler.ServiceStartListener<P>(resultHandler,param)).setInitialMode(ServiceController.Mode.ACTIVE).install();} catch (Throwable t) {  resultHandler.handleFailure(t,param);  return;} @TO@ try {  final RootLoggerService service=new RootLoggerService();  service.setLevel(Level.parse(getLevelName()));  final ServiceTarget target=updateContext.getServiceTarget();  target.addService(LogServices.ROOT_LOGGER,service).addListener(new UpdateResultHandler.ServiceStartListener<P>(resultHandler,param)).setInitialMode(ServiceController.Mode.ACTIVE).install();} catch (Throwable t) {  resultHandler.handleFailure(t,param);  return;} @AT@ 2153 @LENGTH@ 589
---UPD VariableDeclarationStatement@@final BatchBuilder batchBuilder=updateContext.getServiceTarget(); @TO@ final ServiceTarget target=updateContext.getServiceTarget(); @AT@ 2301 @LENGTH@ 67
------UPD SimpleType@@BatchBuilder @TO@ ServiceTarget @AT@ 2307 @LENGTH@ 12
------UPD VariableDeclarationFragment@@batchBuilder=updateContext.getServiceTarget() @TO@ target=updateContext.getServiceTarget() @AT@ 2320 @LENGTH@ 47
---------UPD SimpleName@@batchBuilder @TO@ target @AT@ 2320 @LENGTH@ 12
---UPD ExpressionStatement@@MethodInvocation:batchBuilder.addService(LogServices.ROOT_LOGGER,service).addListener(new UpdateResultHandler.ServiceStartListener<P>(resultHandler,param)).setInitialMode(ServiceController.Mode.ACTIVE).install() @TO@ MethodInvocation:target.addService(LogServices.ROOT_LOGGER,service).addListener(new UpdateResultHandler.ServiceStartListener<P>(resultHandler,param)).setInitialMode(ServiceController.Mode.ACTIVE).install() @AT@ 2381 @LENGTH@ 248
------UPD MethodInvocation@@batchBuilder.addService(LogServices.ROOT_LOGGER,service).addListener(new UpdateResultHandler.ServiceStartListener<P>(resultHandler,param)).setInitialMode(ServiceController.Mode.ACTIVE).install() @TO@ target.addService(LogServices.ROOT_LOGGER,service).addListener(new UpdateResultHandler.ServiceStartListener<P>(resultHandler,param)).setInitialMode(ServiceController.Mode.ACTIVE).install() @AT@ 2381 @LENGTH@ 247
---------UPD SimpleName@@Name:batchBuilder @TO@ Name:target @AT@ 2381 @LENGTH@ 12


UPD ExpressionStatement@@MethodInvocation:log.warning("Sorry, the resource " + resource.getAttribute("uri") + " does not follow HTTPGP conventions mandated by Spring Roo so the OBR file at "+ repoUrl+ " is unacceptable at this time") @TO@ MethodInvocation:log.warning("Sorry, the resource " + resource.getAttribute("uri") + " does not follow HTTPPGP conventions mandated by Spring Roo so the OBR file at "+ repoUrl+ " is unacceptable at this time") @AT@ 21827 @LENGTH@ 194
---UPD MethodInvocation@@log.warning("Sorry, the resource " + resource.getAttribute("uri") + " does not follow HTTPGP conventions mandated by Spring Roo so the OBR file at "+ repoUrl+ " is unacceptable at this time") @TO@ log.warning("Sorry, the resource " + resource.getAttribute("uri") + " does not follow HTTPPGP conventions mandated by Spring Roo so the OBR file at "+ repoUrl+ " is unacceptable at this time") @AT@ 21827 @LENGTH@ 193
------UPD SimpleName@@MethodName:warning:["Sorry, the resource " + resource.getAttribute("uri") + " does not follow HTTPGP conventions mandated by Spring Roo so the OBR file at "+ repoUrl+ " is unacceptable at this time"] @TO@ MethodName:warning:["Sorry, the resource " + resource.getAttribute("uri") + " does not follow HTTPPGP conventions mandated by Spring Roo so the OBR file at "+ repoUrl+ " is unacceptable at this time"] @AT@ 21831 @LENGTH@ 189
---------UPD InfixExpression@@"Sorry, the resource " + resource.getAttribute("uri") + " does not follow HTTPGP conventions mandated by Spring Roo so the OBR file at "+ repoUrl+ " is unacceptable at this time" @TO@ "Sorry, the resource " + resource.getAttribute("uri") + " does not follow HTTPPGP conventions mandated by Spring Roo so the OBR file at "+ repoUrl+ " is unacceptable at this time" @AT@ 21839 @LENGTH@ 180
------------UPD StringLiteral@@" does not follow HTTPGP conventions mandated by Spring Roo so the OBR file at " @TO@ " does not follow HTTPPGP conventions mandated by Spring Roo so the OBR file at " @AT@ 21895 @LENGTH@ 80


UPD ExpressionStatement@@MethodInvocation:from(SIMPLE_ENDPOINT_URI).process(new Processor(){
  public void process(  final Exchange exchange){
    Message in=exchange.getIn();
    Node node=in.getBody(Node.class);
    assertNotNull(node);
    XmlConverter xmlConverter=new XmlConverter();
    exchange.getOut().setBody(xmlConverter.toSource(RESPONSE));
  }
}
) @TO@ MethodInvocation:from(getFromEndpointUri()).process(new Processor(){
  public void process(  final Exchange exchange){
    Message in=exchange.getIn();
    Node node=in.getBody(Node.class);
    assertNotNull(node);
    XmlConverter xmlConverter=new XmlConverter();
    exchange.getOut().setBody(xmlConverter.toSource(RESPONSE));
  }
}
) @AT@ 2454 @LENGTH@ 573
---UPD MethodInvocation@@from(SIMPLE_ENDPOINT_URI).process(new Processor(){
  public void process(  final Exchange exchange){
    Message in=exchange.getIn();
    Node node=in.getBody(Node.class);
    assertNotNull(node);
    XmlConverter xmlConverter=new XmlConverter();
    exchange.getOut().setBody(xmlConverter.toSource(RESPONSE));
  }
}
) @TO@ from(getFromEndpointUri()).process(new Processor(){
  public void process(  final Exchange exchange){
    Message in=exchange.getIn();
    Node node=in.getBody(Node.class);
    assertNotNull(node);
    XmlConverter xmlConverter=new XmlConverter();
    exchange.getOut().setBody(xmlConverter.toSource(RESPONSE));
  }
}
) @AT@ 2454 @LENGTH@ 572
------UPD MethodInvocation@@MethodName:from:[SIMPLE_ENDPOINT_URI] @TO@ MethodName:from:[getFromEndpointUri()] @AT@ 2454 @LENGTH@ 25
---------INS MethodInvocation@@MethodName:getFromEndpointUri:[] @TO@ MethodInvocation@@MethodName:from:[SIMPLE_ENDPOINT_URI] @AT@ 2297 @LENGTH@ 20
---------DEL SimpleName@@SIMPLE_ENDPOINT_URI @AT@ 2459 @LENGTH@ 19


INS MethodDeclaration@@public, void, MethodName:setRef, String ref,  @TO@ TypeDeclaration@@[@XmlRootElement(name="throwException"), @XmlAccessorType(XmlAccessType.FIELD), public]ThrowExceptionDefinition, NoOutputDefinition<ThrowExceptionDefinition> @AT@ 2394 @LENGTH@ 62
---INS Modifier@@public @TO@ MethodDeclaration@@public, void, MethodName:setRef, String ref,  @AT@ 2394 @LENGTH@ 6
---INS PrimitiveType@@void @TO@ MethodDeclaration@@public, void, MethodName:setRef, String ref,  @AT@ 2401 @LENGTH@ 4
---INS SimpleName@@MethodName:setRef @TO@ MethodDeclaration@@public, void, MethodName:setRef, String ref,  @AT@ 2406 @LENGTH@ 6
---INS SingleVariableDeclaration@@String ref @TO@ MethodDeclaration@@public, void, MethodName:setRef, String ref,  @AT@ 2413 @LENGTH@ 10
------INS SimpleType@@String @TO@ SingleVariableDeclaration@@String ref @AT@ 2413 @LENGTH@ 6
------INS SimpleName@@ref @TO@ SingleVariableDeclaration@@String ref @AT@ 2420 @LENGTH@ 3
---INS ExpressionStatement@@Assignment:this.ref=ref @TO@ MethodDeclaration@@public, void, MethodName:setRef, String ref,  @AT@ 2435 @LENGTH@ 15
------INS Assignment@@this.ref=ref @TO@ ExpressionStatement@@Assignment:this.ref=ref @AT@ 2435 @LENGTH@ 14
---------INS FieldAccess@@this.ref @TO@ Assignment@@this.ref=ref @AT@ 2435 @LENGTH@ 8
------------INS ThisExpression@@this @TO@ FieldAccess@@this.ref @AT@ 2435 @LENGTH@ 4
------------INS SimpleName@@ref @TO@ FieldAccess@@this.ref @AT@ 2440 @LENGTH@ 3
---------INS Operator@@= @TO@ Assignment@@this.ref=ref @AT@ 2443 @LENGTH@ 1
---------INS SimpleName@@ref @TO@ Assignment@@this.ref=ref @AT@ 2446 @LENGTH@ 3


UPD MethodDeclaration@@IdentityMapping, MethodName:getDefaultIdentityMapping, ClassMapping classMapping,  @TO@ IdentityMapping, MethodName:getDefaultIdentityMapping, ClassMapping classMapping, MappingException,  @AT@ 1884 @LENGTH@ 53
---INS SimpleType@@MappingException @TO@ MethodDeclaration@@IdentityMapping, MethodName:getDefaultIdentityMapping, ClassMapping classMapping,  @AT@ 2020 @LENGTH@ 16


UPD ExpressionStatement@@Assignment:tilesView=builder.parse(new File(viewFile)) @TO@ Assignment:tilesView=builder.parse(fileManager.getInputStream(viewFile)) @AT@ 6122 @LENGTH@ 46
---UPD Assignment@@tilesView=builder.parse(new File(viewFile)) @TO@ tilesView=builder.parse(fileManager.getInputStream(viewFile)) @AT@ 6122 @LENGTH@ 45
------UPD MethodInvocation@@builder.parse(new File(viewFile)) @TO@ builder.parse(fileManager.getInputStream(viewFile)) @AT@ 6134 @LENGTH@ 33
---------UPD SimpleName@@MethodName:parse:[new File(viewFile)] @TO@ MethodName:parse:[fileManager.getInputStream(viewFile)] @AT@ 6142 @LENGTH@ 25
------------INS MethodInvocation@@fileManager.getInputStream(viewFile) @TO@ SimpleName@@MethodName:parse:[new File(viewFile)] @AT@ 6148 @LENGTH@ 36
---------------INS SimpleName@@Name:fileManager @TO@ MethodInvocation@@fileManager.getInputStream(viewFile) @AT@ 6148 @LENGTH@ 11
---------------INS SimpleName@@MethodName:getInputStream:[viewFile] @TO@ MethodInvocation@@fileManager.getInputStream(viewFile) @AT@ 6160 @LENGTH@ 24
------------------INS SimpleName@@viewFile @TO@ SimpleName@@MethodName:getInputStream:[viewFile] @AT@ 6175 @LENGTH@ 8
------------DEL ClassInstanceCreation@@File[viewFile] @AT@ 6148 @LENGTH@ 18
---------------DEL New@@new @AT@ 6148 @LENGTH@ 3
---------------DEL SimpleType@@File @AT@ 6152 @LENGTH@ 4
---------------DEL SimpleName@@viewFile @AT@ 6157 @LENGTH@ 8


INS IfStatement@@if (potentialSubDeployments == null) {  return;} @TO@ MethodDeclaration@@public, void, MethodName:deploy, DeploymentPhaseContext phaseContext, DeploymentUnitProcessingException,  @AT@ 2714 @LENGTH@ 67
---INS InfixExpression@@potentialSubDeployments == null @TO@ IfStatement@@if (potentialSubDeployments == null) {  return;} @AT@ 2717 @LENGTH@ 31
------INS SimpleName@@potentialSubDeployments @TO@ InfixExpression@@potentialSubDeployments == null @AT@ 2717 @LENGTH@ 23
------INS Operator@@== @TO@ InfixExpression@@potentialSubDeployments == null @AT@ 2740 @LENGTH@ 2
------INS NullLiteral@@null @TO@ InfixExpression@@potentialSubDeployments == null @AT@ 2744 @LENGTH@ 4
---INS Block@@ThenBody:{  return;} @TO@ IfStatement@@if (potentialSubDeployments == null) {  return;} @AT@ 2750 @LENGTH@ 31
------INS ReturnStatement@@ @TO@ Block@@ThenBody:{  return;} @AT@ 2764 @LENGTH@ 7


INS ExpressionStatement@@MethodInvocation:deployers.get(Phase.DEPENDENCIES).add(new RegisteredProcessor(Phase.DEPENDENCIES_SUB_DEPLOYMENTS,new SubDeploymentDependencyProcessor())) @TO@ MethodDeclaration@@public, synchronized, void, MethodName:start, final StartContext context, StartException,  @AT@ 12233 @LENGTH@ 139
---INS MethodInvocation@@deployers.get(Phase.DEPENDENCIES).add(new RegisteredProcessor(Phase.DEPENDENCIES_SUB_DEPLOYMENTS,new SubDeploymentDependencyProcessor())) @TO@ ExpressionStatement@@MethodInvocation:deployers.get(Phase.DEPENDENCIES).add(new RegisteredProcessor(Phase.DEPENDENCIES_SUB_DEPLOYMENTS,new SubDeploymentDependencyProcessor())) @AT@ 12233 @LENGTH@ 138
------INS MethodInvocation@@MethodName:get:[Phase.DEPENDENCIES] @TO@ MethodInvocation@@deployers.get(Phase.DEPENDENCIES).add(new RegisteredProcessor(Phase.DEPENDENCIES_SUB_DEPLOYMENTS,new SubDeploymentDependencyProcessor())) @AT@ 12233 @LENGTH@ 33
---------INS QualifiedName@@Phase.DEPENDENCIES @TO@ MethodInvocation@@MethodName:get:[Phase.DEPENDENCIES] @AT@ 12247 @LENGTH@ 18
------------INS SimpleName@@Phase @TO@ QualifiedName@@Phase.DEPENDENCIES @AT@ 12247 @LENGTH@ 5
------------INS SimpleName@@DEPENDENCIES @TO@ QualifiedName@@Phase.DEPENDENCIES @AT@ 12253 @LENGTH@ 12
------INS SimpleName@@Name:deployers @TO@ MethodInvocation@@deployers.get(Phase.DEPENDENCIES).add(new RegisteredProcessor(Phase.DEPENDENCIES_SUB_DEPLOYMENTS,new SubDeploymentDependencyProcessor())) @AT@ 12233 @LENGTH@ 9
------INS SimpleName@@MethodName:add:[new RegisteredProcessor(Phase.DEPENDENCIES_SUB_DEPLOYMENTS,new SubDeploymentDependencyProcessor())] @TO@ MethodInvocation@@deployers.get(Phase.DEPENDENCIES).add(new RegisteredProcessor(Phase.DEPENDENCIES_SUB_DEPLOYMENTS,new SubDeploymentDependencyProcessor())) @AT@ 12267 @LENGTH@ 104
---------INS ClassInstanceCreation@@RegisteredProcessor[Phase.DEPENDENCIES_SUB_DEPLOYMENTS, new SubDeploymentDependencyProcessor()] @TO@ SimpleName@@MethodName:add:[new RegisteredProcessor(Phase.DEPENDENCIES_SUB_DEPLOYMENTS,new SubDeploymentDependencyProcessor())] @AT@ 12271 @LENGTH@ 99
------------INS New@@new @TO@ ClassInstanceCreation@@RegisteredProcessor[Phase.DEPENDENCIES_SUB_DEPLOYMENTS, new SubDeploymentDependencyProcessor()] @AT@ 12271 @LENGTH@ 3
------------INS SimpleType@@RegisteredProcessor @TO@ ClassInstanceCreation@@RegisteredProcessor[Phase.DEPENDENCIES_SUB_DEPLOYMENTS, new SubDeploymentDependencyProcessor()] @AT@ 12275 @LENGTH@ 19
------------INS QualifiedName@@Phase.DEPENDENCIES_SUB_DEPLOYMENTS @TO@ ClassInstanceCreation@@RegisteredProcessor[Phase.DEPENDENCIES_SUB_DEPLOYMENTS, new SubDeploymentDependencyProcessor()] @AT@ 12295 @LENGTH@ 34
---------------INS SimpleName@@Phase @TO@ QualifiedName@@Phase.DEPENDENCIES_SUB_DEPLOYMENTS @AT@ 12295 @LENGTH@ 5
---------------INS SimpleName@@DEPENDENCIES_SUB_DEPLOYMENTS @TO@ QualifiedName@@Phase.DEPENDENCIES_SUB_DEPLOYMENTS @AT@ 12301 @LENGTH@ 28
------------INS ClassInstanceCreation@@SubDeploymentDependencyProcessor[] @TO@ ClassInstanceCreation@@RegisteredProcessor[Phase.DEPENDENCIES_SUB_DEPLOYMENTS, new SubDeploymentDependencyProcessor()] @AT@ 12331 @LENGTH@ 38
---------------INS New@@new @TO@ ClassInstanceCreation@@SubDeploymentDependencyProcessor[] @AT@ 12331 @LENGTH@ 3
---------------INS SimpleType@@SubDeploymentDependencyProcessor @TO@ ClassInstanceCreation@@SubDeploymentDependencyProcessor[] @AT@ 12335 @LENGTH@ 32


UPD EnhancedForStatement@@for (FieldMetadata field : finderMetadataDetails.getFinderMethodParamFields()) {  JavaType type=field.getFieldType();  JavaSymbolName paramName=field.getFieldName();  if (type.equals(new JavaType(Map.class.getName()))) {    continue;  }  Assert.notNull(paramName,"could not find field '" + paramName + "' in '"+ type.getFullyQualifiedTypeName()+ "'");  Element fieldElement=null;  JavaTypeMetadataDetails typeMetadataHolder=relatedDomainTypes.get(getJavaTypeForField(field));  if (type.isCommonCollectionType() && relatedDomainTypes.containsKey(getJavaTypeForField(field))) {    JavaTypeMetadataDetails collectionTypeMetadataHolder=relatedDomainTypes.get(getJavaTypeForField(field));    JavaTypePersistenceMetadataDetails typePersistenceMetadataHolder=collectionTypeMetadataHolder.getPersistenceDetails();    if (collectionTypeMetadataHolder != null && typePersistenceMetadataHolder != null) {      fieldElement=new XmlElementBuilder("field:select",document).addAttribute("items","${" + collectionTypeMetadataHolder.getPlural().toLowerCase() + "}").addAttribute("itemValue",typePersistenceMetadataHolder.getIdentifierField().getFieldName().getSymbolName()).addAttribute("path","/" + getPathForType(getJavaTypeForField(field))).build();      if (null != MemberFindingUtils.getAnnotationOfType(field.getAnnotations(),new JavaType("javax.persistence.ManyToMany"))) {        fieldElement.setAttribute("multiple","true");      }    }  } else   if (typeMetadataHolder != null && typeMetadataHolder.isEnumType() && null != MemberFindingUtils.getAnnotationOfType(field.getAnnotations(),new JavaType("javax.persistence.Enumerated"))) {    fieldElement=new XmlElementBuilder("field:select",document).addAttribute("items","${" + typeMetadataHolder.getPlural().toLowerCase() + "}").addAttribute("path","/" + getPathForType(type)).build();  } else   if (type.getFullyQualifiedTypeName().equals(Boolean.class.getName()) || type.getFullyQualifiedTypeName().equals(boolean.class.getName())) {    fieldElement=document.createElement("field:checkbox");  } else   if (typeMetadataHolder != null && typeMetadataHolder.isApplicationType()) {    JavaTypePersistenceMetadataDetails typePersistenceMetadataHolder=typeMetadataHolder.getPersistenceDetails();    if (typePersistenceMetadataHolder != null) {      fieldElement=new XmlElementBuilder("field:select",document).addAttribute("items","${" + typeMetadataHolder.getPlural().toLowerCase() + "}").addAttribute("itemValue",typePersistenceMetadataHolder.getIdentifierField().getFieldName().getSymbolName()).addAttribute("path","/" + getPathForType(type)).build();    }  } else   if (type.getFullyQualifiedTypeName().equals(Date.class.getName()) || type.getFullyQualifiedTypeName().equals(Calendar.class.getName())) {    fieldElement=new XmlElementBuilder("field:datetime",document).addAttribute("dateTimePattern","${" + entityName + "_"+ paramName.getSymbolName().toLowerCase()+ "_date_format}").build();  } else {    fieldElement=document.createElement("field:input");  }  addCommonAttributes(field,fieldElement);  fieldElement.setAttribute("disableFormBinding","true");  fieldElement.setAttribute("field",paramName.getSymbolName());  fieldElement.setAttribute("id",XmlUtils.convertId("f:" + formbackingType.getFullyQualifiedTypeName() + "."+ paramName));  fieldElement.setAttribute("z",XmlRoundTripUtils.calculateUniqueKeyFor(fieldElement));  formFind.appendChild(fieldElement);} @TO@ for (FieldMetadata field : finderMetadataDetails.getFinderMethodParamFields()) {  JavaType type=field.getFieldType();  JavaSymbolName paramName=field.getFieldName();  if (type.equals(new JavaType(Map.class.getName()))) {    continue;  }  Assert.notNull(paramName,"could not find field '" + paramName + "' in '"+ type.getFullyQualifiedTypeName()+ "'");  Element fieldElement=null;  JavaTypeMetadataDetails typeMetadataHolder=relatedDomainTypes.get(getJavaTypeForField(field));  if (type.isCommonCollectionType() && relatedDomainTypes.containsKey(getJavaTypeForField(field))) {    JavaTypeMetadataDetails collectionTypeMetadataHolder=relatedDomainTypes.get(getJavaTypeForField(field));    JavaTypePersistenceMetadataDetails typePersistenceMetadataHolder=collectionTypeMetadataHolder.getPersistenceDetails();    if (collectionTypeMetadataHolder != null && typePersistenceMetadataHolder != null) {      fieldElement=new XmlElementBuilder("field:select",document).addAttribute("items","${" + collectionTypeMetadataHolder.getPlural().toLowerCase() + "}").addAttribute("itemValue",typePersistenceMetadataHolder.getIdentifierField().getFieldName().getSymbolName()).addAttribute("path","/" + getPathForType(getJavaTypeForField(field))).build();      if (null != MemberFindingUtils.getAnnotationOfType(field.getAnnotations(),new JavaType("javax.persistence.ManyToMany"))) {        fieldElement.setAttribute("multiple","true");      }    }  } else   if (typeMetadataHolder != null && typeMetadataHolder.isEnumType() && null != MemberFindingUtils.getAnnotationOfType(field.getAnnotations(),new JavaType("javax.persistence.Enumerated"))) {    fieldElement=new XmlElementBuilder("field:select",document).addAttribute("items","${" + typeMetadataHolder.getPlural().toLowerCase() + "}").addAttribute("path","/" + getPathForType(type)).build();  } else   if (type.getFullyQualifiedTypeName().equals(Boolean.class.getName()) || type.getFullyQualifiedTypeName().equals(boolean.class.getName())) {    fieldElement=document.createElement("field:checkbox");  } else   if (typeMetadataHolder != null && typeMetadataHolder.isApplicationType()) {    JavaTypePersistenceMetadataDetails typePersistenceMetadataHolder=typeMetadataHolder.getPersistenceDetails();    if (typePersistenceMetadataHolder != null) {      fieldElement=new XmlElementBuilder("field:select",document).addAttribute("items","${" + typeMetadataHolder.getPlural().toLowerCase() + "}").addAttribute("itemValue",typePersistenceMetadataHolder.getIdentifierField().getFieldName().getSymbolName()).addAttribute("path","/" + getPathForType(type)).build();    }  } else   if (type.getFullyQualifiedTypeName().equals(Date.class.getName()) || type.getFullyQualifiedTypeName().equals(Calendar.class.getName())) {    fieldElement=new XmlElementBuilder("field:datetime",document).addAttribute("dateTimePattern","${" + entityName + "_"+ paramName.getSymbolName().toLowerCase()+ "_date_format}").build();  } else {    fieldElement=document.createElement("field:input");  }  if (fieldElement == null) {    fieldElement=document.createElement("field:input");  }  addCommonAttributes(field,fieldElement);  fieldElement.setAttribute("disableFormBinding","true");  fieldElement.setAttribute("field",paramName.getSymbolName());  fieldElement.setAttribute("id",XmlUtils.convertId("f:" + formbackingType.getFullyQualifiedTypeName() + "."+ paramName));  fieldElement.setAttribute("z",XmlRoundTripUtils.calculateUniqueKeyFor(fieldElement));  formFind.appendChild(fieldElement);} @AT@ 14341 @LENGTH@ 3579
---INS IfStatement@@if (fieldElement == null) {  fieldElement=document.createElement("field:input");} @TO@ EnhancedForStatement@@for (FieldMetadata field : finderMetadataDetails.getFinderMethodParamFields()) {  JavaType type=field.getFieldType();  JavaSymbolName paramName=field.getFieldName();  if (type.equals(new JavaType(Map.class.getName()))) {    continue;  }  Assert.notNull(paramName,"could not find field '" + paramName + "' in '"+ type.getFullyQualifiedTypeName()+ "'");  Element fieldElement=null;  JavaTypeMetadataDetails typeMetadataHolder=relatedDomainTypes.get(getJavaTypeForField(field));  if (type.isCommonCollectionType() && relatedDomainTypes.containsKey(getJavaTypeForField(field))) {    JavaTypeMetadataDetails collectionTypeMetadataHolder=relatedDomainTypes.get(getJavaTypeForField(field));    JavaTypePersistenceMetadataDetails typePersistenceMetadataHolder=collectionTypeMetadataHolder.getPersistenceDetails();    if (collectionTypeMetadataHolder != null && typePersistenceMetadataHolder != null) {      fieldElement=new XmlElementBuilder("field:select",document).addAttribute("items","${" + collectionTypeMetadataHolder.getPlural().toLowerCase() + "}").addAttribute("itemValue",typePersistenceMetadataHolder.getIdentifierField().getFieldName().getSymbolName()).addAttribute("path","/" + getPathForType(getJavaTypeForField(field))).build();      if (null != MemberFindingUtils.getAnnotationOfType(field.getAnnotations(),new JavaType("javax.persistence.ManyToMany"))) {        fieldElement.setAttribute("multiple","true");      }    }  } else   if (typeMetadataHolder != null && typeMetadataHolder.isEnumType() && null != MemberFindingUtils.getAnnotationOfType(field.getAnnotations(),new JavaType("javax.persistence.Enumerated"))) {    fieldElement=new XmlElementBuilder("field:select",document).addAttribute("items","${" + typeMetadataHolder.getPlural().toLowerCase() + "}").addAttribute("path","/" + getPathForType(type)).build();  } else   if (type.getFullyQualifiedTypeName().equals(Boolean.class.getName()) || type.getFullyQualifiedTypeName().equals(boolean.class.getName())) {    fieldElement=document.createElement("field:checkbox");  } else   if (typeMetadataHolder != null && typeMetadataHolder.isApplicationType()) {    JavaTypePersistenceMetadataDetails typePersistenceMetadataHolder=typeMetadataHolder.getPersistenceDetails();    if (typePersistenceMetadataHolder != null) {      fieldElement=new XmlElementBuilder("field:select",document).addAttribute("items","${" + typeMetadataHolder.getPlural().toLowerCase() + "}").addAttribute("itemValue",typePersistenceMetadataHolder.getIdentifierField().getFieldName().getSymbolName()).addAttribute("path","/" + getPathForType(type)).build();    }  } else   if (type.getFullyQualifiedTypeName().equals(Date.class.getName()) || type.getFullyQualifiedTypeName().equals(Calendar.class.getName())) {    fieldElement=new XmlElementBuilder("field:datetime",document).addAttribute("dateTimePattern","${" + entityName + "_"+ paramName.getSymbolName().toLowerCase()+ "_date_format}").build();  } else {    fieldElement=document.createElement("field:input");  }  addCommonAttributes(field,fieldElement);  fieldElement.setAttribute("disableFormBinding","true");  fieldElement.setAttribute("field",paramName.getSymbolName());  fieldElement.setAttribute("id",XmlUtils.convertId("f:" + formbackingType.getFullyQualifiedTypeName() + "."+ paramName));  fieldElement.setAttribute("z",XmlRoundTripUtils.calculateUniqueKeyFor(fieldElement));  formFind.appendChild(fieldElement);} @AT@ 17496 @LENGTH@ 90
------INS InfixExpression@@fieldElement == null @TO@ IfStatement@@if (fieldElement == null) {  fieldElement=document.createElement("field:input");} @AT@ 17500 @LENGTH@ 20
---------INS SimpleName@@fieldElement @TO@ InfixExpression@@fieldElement == null @AT@ 17500 @LENGTH@ 12
---------INS Operator@@== @TO@ InfixExpression@@fieldElement == null @AT@ 17512 @LENGTH@ 2
---------INS NullLiteral@@null @TO@ InfixExpression@@fieldElement == null @AT@ 17516 @LENGTH@ 4
------INS Block@@ThenBody:{  fieldElement=document.createElement("field:input");} @TO@ IfStatement@@if (fieldElement == null) {  fieldElement=document.createElement("field:input");} @AT@ 17522 @LENGTH@ 64
---------INS ExpressionStatement@@Assignment:fieldElement=document.createElement("field:input") @TO@ Block@@ThenBody:{  fieldElement=document.createElement("field:input");} @AT@ 17528 @LENGTH@ 53
------------INS Assignment@@fieldElement=document.createElement("field:input") @TO@ ExpressionStatement@@Assignment:fieldElement=document.createElement("field:input") @AT@ 17528 @LENGTH@ 52
---------------INS SimpleName@@fieldElement @TO@ Assignment@@fieldElement=document.createElement("field:input") @AT@ 17528 @LENGTH@ 12
---------------INS Operator@@= @TO@ Assignment@@fieldElement=document.createElement("field:input") @AT@ 17540 @LENGTH@ 1
---------------INS MethodInvocation@@document.createElement("field:input") @TO@ Assignment@@fieldElement=document.createElement("field:input") @AT@ 17543 @LENGTH@ 37
------------------INS SimpleName@@Name:document @TO@ MethodInvocation@@document.createElement("field:input") @AT@ 17543 @LENGTH@ 8
------------------INS SimpleName@@MethodName:createElement:["field:input"] @TO@ MethodInvocation@@document.createElement("field:input") @AT@ 17552 @LENGTH@ 28
---------------------INS StringLiteral@@"field:input" @TO@ SimpleName@@MethodName:createElement:["field:input"] @AT@ 17566 @LENGTH@ 13


UPD ExpressionStatement@@Assignment:cacheManager=new CacheManagerFactory().instantiateCacheManager() @TO@ Assignment:cacheManager=new DefaultCacheManagerFactory().instantiateCacheManager() @AT@ 2466 @LENGTH@ 67
---UPD Assignment@@cacheManager=new CacheManagerFactory().instantiateCacheManager() @TO@ cacheManager=new DefaultCacheManagerFactory().instantiateCacheManager() @AT@ 2466 @LENGTH@ 66
------UPD MethodInvocation@@new CacheManagerFactory().instantiateCacheManager() @TO@ new DefaultCacheManagerFactory().instantiateCacheManager() @AT@ 2481 @LENGTH@ 51
---------UPD ClassInstanceCreation@@CacheManagerFactory[] @TO@ DefaultCacheManagerFactory[] @AT@ 2481 @LENGTH@ 25
------------UPD SimpleType@@CacheManagerFactory @TO@ DefaultCacheManagerFactory @AT@ 2485 @LENGTH@ 19


INS FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @TO@ TypeDeclaration@@[public]RunAsUserToken, AbstractAuthenticationToken @AT@ 1230 @LENGTH@ 90
---INS Modifier@@private @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @AT@ 1230 @LENGTH@ 7
---INS Modifier@@static @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @AT@ 1238 @LENGTH@ 6
---INS Modifier@@final @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @AT@ 1245 @LENGTH@ 5
---INS PrimitiveType@@long @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @AT@ 1251 @LENGTH@ 4
---INS VariableDeclarationFragment@@serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID @TO@ FieldDeclaration@@private, static, final, long, [serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID] @AT@ 1256 @LENGTH@ 63
------INS SimpleName@@serialVersionUID @TO@ VariableDeclarationFragment@@serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID @AT@ 1256 @LENGTH@ 16
------INS QualifiedName@@SpringSecurityCoreVersion.SERIAL_VERSION_UID @TO@ VariableDeclarationFragment@@serialVersionUID=SpringSecurityCoreVersion.SERIAL_VERSION_UID @AT@ 1275 @LENGTH@ 44
---------INS SimpleName@@SpringSecurityCoreVersion @TO@ QualifiedName@@SpringSecurityCoreVersion.SERIAL_VERSION_UID @AT@ 1275 @LENGTH@ 25
---------INS SimpleName@@SERIAL_VERSION_UID @TO@ QualifiedName@@SpringSecurityCoreVersion.SERIAL_VERSION_UID @AT@ 1301 @LENGTH@ 18


UPD VariableDeclarationStatement@@Exchange newExchange=exchange.copy(); @TO@ Exchange newExchange=ExchangeHelper.createCopy(exchange,true); @AT@ 5945 @LENGTH@ 39
---UPD VariableDeclarationFragment@@newExchange=exchange.copy() @TO@ newExchange=ExchangeHelper.createCopy(exchange,true) @AT@ 5954 @LENGTH@ 29
------UPD MethodInvocation@@exchange.copy() @TO@ ExchangeHelper.createCopy(exchange,true) @AT@ 5968 @LENGTH@ 15
---------UPD SimpleName@@Name:exchange @TO@ Name:ExchangeHelper @AT@ 5968 @LENGTH@ 8
---------UPD SimpleName@@MethodName:copy:[] @TO@ MethodName:createCopy:[exchange, true] @AT@ 5977 @LENGTH@ 6
------------INS SimpleName@@exchange @TO@ SimpleName@@MethodName:copy:[] @AT@ 5994 @LENGTH@ 8
------------INS BooleanLiteral@@true @TO@ SimpleName@@MethodName:copy:[] @AT@ 6004 @LENGTH@ 4


DEL ExpressionStatement@@MethodInvocation:testComponent(COMPONENT) @AT@ 1280 @LENGTH@ 25
---DEL MethodInvocation@@testComponent(COMPONENT) @AT@ 1280 @LENGTH@ 24
------DEL SimpleName@@MethodName:testComponent:[COMPONENT] @AT@ 1280 @LENGTH@ 24
---------DEL SimpleName@@COMPONENT @AT@ 1294 @LENGTH@ 9


UPD ExpressionStatement@@MethodInvocation:assertTrue(e.getMessage().startsWith("Failed to create route route3 at: >>> Bean[ref:] <<< in route: Route[[From[direct:start]] -> [To[mock:foo], Bean[ref:]]] because of")) @TO@ MethodInvocation:assertTrue(e.getMessage().startsWith("Failed to create route route3 at: >>> Bean[ref:] <<< in route:" + " Route[[From[direct:start]] -> [To[mock:foo], Bean[ref:]]] because of")) @AT@ 2862 @LENGTH@ 173
---UPD MethodInvocation@@assertTrue(e.getMessage().startsWith("Failed to create route route3 at: >>> Bean[ref:] <<< in route: Route[[From[direct:start]] -> [To[mock:foo], Bean[ref:]]] because of")) @TO@ assertTrue(e.getMessage().startsWith("Failed to create route route3 at: >>> Bean[ref:] <<< in route:" + " Route[[From[direct:start]] -> [To[mock:foo], Bean[ref:]]] because of")) @AT@ 2862 @LENGTH@ 172
------UPD SimpleName@@MethodName:assertTrue:[e.getMessage().startsWith("Failed to create route route3 at: >>> Bean[ref:] <<< in route: Route[[From[direct:start]] -> [To[mock:foo], Bean[ref:]]] because of")] @TO@ MethodName:assertTrue:[e.getMessage().startsWith("Failed to create route route3 at: >>> Bean[ref:] <<< in route:" + " Route[[From[direct:start]] -> [To[mock:foo], Bean[ref:]]] because of")] @AT@ 2862 @LENGTH@ 172
---------UPD MethodInvocation@@e.getMessage().startsWith("Failed to create route route3 at: >>> Bean[ref:] <<< in route: Route[[From[direct:start]] -> [To[mock:foo], Bean[ref:]]] because of") @TO@ e.getMessage().startsWith("Failed to create route route3 at: >>> Bean[ref:] <<< in route:" + " Route[[From[direct:start]] -> [To[mock:foo], Bean[ref:]]] because of") @AT@ 2873 @LENGTH@ 160
------------UPD SimpleName@@MethodName:startsWith:["Failed to create route route3 at: >>> Bean[ref:] <<< in route: Route[[From[direct:start]] -> [To[mock:foo], Bean[ref:]]] because of"] @TO@ MethodName:startsWith:["Failed to create route route3 at: >>> Bean[ref:] <<< in route:" + " Route[[From[direct:start]] -> [To[mock:foo], Bean[ref:]]] because of"] @AT@ 2888 @LENGTH@ 145
---------------DEL StringLiteral@@"Failed to create route route3 at: >>> Bean[ref:] <<< in route: Route[[From[direct:start]] -> [To[mock:foo], Bean[ref:]]] because of" @AT@ 2899 @LENGTH@ 133
---------------INS InfixExpression@@"Failed to create route route3 at: >>> Bean[ref:] <<< in route:" + " Route[[From[direct:start]] -> [To[mock:foo], Bean[ref:]]] because of" @TO@ SimpleName@@MethodName:startsWith:["Failed to create route route3 at: >>> Bean[ref:] <<< in route: Route[[From[direct:start]] -> [To[mock:foo], Bean[ref:]]] because of"] @AT@ 2924 @LENGTH@ 158
------------------INS StringLiteral@@"Failed to create route route3 at: >>> Bean[ref:] <<< in route:" @TO@ InfixExpression@@"Failed to create route route3 at: >>> Bean[ref:] <<< in route:" + " Route[[From[direct:start]] -> [To[mock:foo], Bean[ref:]]] because of" @AT@ 2924 @LENGTH@ 64
------------------INS Operator@@+ @TO@ InfixExpression@@"Failed to create route route3 at: >>> Bean[ref:] <<< in route:" + " Route[[From[direct:start]] -> [To[mock:foo], Bean[ref:]]] because of" @AT@ 2988 @LENGTH@ 1
------------------INS StringLiteral@@" Route[[From[direct:start]] -> [To[mock:foo], Bean[ref:]]] because of" @TO@ InfixExpression@@"Failed to create route route3 at: >>> Bean[ref:] <<< in route:" + " Route[[From[direct:start]] -> [To[mock:foo], Bean[ref:]]] because of" @AT@ 3011 @LENGTH@ 71


UPD MethodDeclaration@@public, List<Object>, MethodName:closePipeline,  @TO@ public, List<byte[]>, MethodName:closePipeline,  @AT@ 5163 @LENGTH@ 134
---UPD ParameterizedType@@List<Object> @TO@ List<byte[]> @AT@ 5170 @LENGTH@ 12
------DEL SimpleType@@Object @AT@ 5175 @LENGTH@ 6
------INS ArrayType@@byte[] @TO@ ParameterizedType@@List<Object> @AT@ 5207 @LENGTH@ 6
---------INS PrimitiveType@@byte @TO@ ArrayType@@byte[] @AT@ 5207 @LENGTH@ 4
---UPD IfStatement@@if (pipeline != null) {  return pipeline.execute();} @TO@ if (pipeline != null) {  List execute=pipeline.execute();  if (execute != null && !execute.isEmpty()) {    return (List<byte[]>)execute;  }} @AT@ 5203 @LENGTH@ 57
------UPD Block@@ThenBody:{  return pipeline.execute();} @TO@ ThenBody:{  List execute=pipeline.execute();  if (execute != null && !execute.isEmpty()) {    return (List<byte[]>)execute;  }} @AT@ 5225 @LENGTH@ 35
---------DEL ReturnStatement@@MethodInvocation:pipeline.execute() @AT@ 5230 @LENGTH@ 26
------------DEL MethodInvocation@@pipeline.execute() @AT@ 5237 @LENGTH@ 18
---------INS VariableDeclarationStatement@@List execute=pipeline.execute(); @TO@ Block@@ThenBody:{  return pipeline.execute();} @AT@ 5262 @LENGTH@ 34
------------INS SimpleType@@List @TO@ VariableDeclarationStatement@@List execute=pipeline.execute(); @AT@ 5262 @LENGTH@ 4
------------INS VariableDeclarationFragment@@execute=pipeline.execute() @TO@ VariableDeclarationStatement@@List execute=pipeline.execute(); @AT@ 5267 @LENGTH@ 28
---------------INS SimpleName@@execute @TO@ VariableDeclarationFragment@@execute=pipeline.execute() @AT@ 5267 @LENGTH@ 7
---------------INS MethodInvocation@@pipeline.execute() @TO@ VariableDeclarationFragment@@execute=pipeline.execute() @AT@ 5277 @LENGTH@ 18
------------------MOV SimpleName@@Name:pipeline @TO@ MethodInvocation@@pipeline.execute() @AT@ 5237 @LENGTH@ 8
------------------MOV SimpleName@@MethodName:execute:[] @TO@ MethodInvocation@@pipeline.execute() @AT@ 5246 @LENGTH@ 9
---------INS IfStatement@@if (execute != null && !execute.isEmpty()) {  return (List<byte[]>)execute;} @TO@ Block@@ThenBody:{  return pipeline.execute();} @AT@ 5300 @LENGTH@ 84
------------INS InfixExpression@@execute != null && !execute.isEmpty() @TO@ IfStatement@@if (execute != null && !execute.isEmpty()) {  return (List<byte[]>)execute;} @AT@ 5304 @LENGTH@ 37
---------------INS InfixExpression@@execute != null @TO@ InfixExpression@@execute != null && !execute.isEmpty() @AT@ 5304 @LENGTH@ 15
------------------INS SimpleName@@execute @TO@ InfixExpression@@execute != null @AT@ 5304 @LENGTH@ 7
------------------INS Operator@@!= @TO@ InfixExpression@@execute != null @AT@ 5311 @LENGTH@ 2
------------------INS NullLiteral@@null @TO@ InfixExpression@@execute != null @AT@ 5315 @LENGTH@ 4
---------------INS Operator@@&& @TO@ InfixExpression@@execute != null && !execute.isEmpty() @AT@ 5319 @LENGTH@ 2
---------------INS PrefixExpression@@!execute.isEmpty() @TO@ InfixExpression@@execute != null && !execute.isEmpty() @AT@ 5323 @LENGTH@ 18
------------------INS Operator@@! @TO@ PrefixExpression@@!execute.isEmpty() @AT@ 5323 @LENGTH@ 1
------------------INS MethodInvocation@@execute.isEmpty() @TO@ PrefixExpression@@!execute.isEmpty() @AT@ 5324 @LENGTH@ 17
---------------------INS SimpleName@@Name:execute @TO@ MethodInvocation@@execute.isEmpty() @AT@ 5324 @LENGTH@ 7
---------------------INS SimpleName@@MethodName:isEmpty:[] @TO@ MethodInvocation@@execute.isEmpty() @AT@ 5332 @LENGTH@ 9
------------INS Block@@ThenBody:{  return (List<byte[]>)execute;} @TO@ IfStatement@@if (execute != null && !execute.isEmpty()) {  return (List<byte[]>)execute;} @AT@ 5343 @LENGTH@ 41
---------------INS ReturnStatement@@CastExpression:(List<byte[]>)execute @TO@ Block@@ThenBody:{  return (List<byte[]>)execute;} @AT@ 5349 @LENGTH@ 30
------------------INS CastExpression@@(List<byte[]>)execute @TO@ ReturnStatement@@CastExpression:(List<byte[]>)execute @AT@ 5356 @LENGTH@ 22
---------------------INS ParameterizedType@@List<byte[]> @TO@ CastExpression@@(List<byte[]>)execute @AT@ 5357 @LENGTH@ 12
------------------------INS SimpleType@@List @TO@ ParameterizedType@@List<byte[]> @AT@ 5357 @LENGTH@ 4
------------------------INS ArrayType@@byte[] @TO@ ParameterizedType@@List<byte[]> @AT@ 5362 @LENGTH@ 6
---------------------------INS PrimitiveType@@byte @TO@ ArrayType@@byte[] @AT@ 5362 @LENGTH@ 4
---------------------INS SimpleName@@execute @TO@ CastExpression@@(List<byte[]>)execute @AT@ 5371 @LENGTH@ 7


INS MethodDeclaration@@public, int, MethodName:getInputStreamCount,  @TO@ TypeDeclaration@@ExecutionContextImpl, [ExecutionContextBuilder, ExecutionContext] @AT@ 1998 @LENGTH@ 134
---INS Modifier@@public @TO@ MethodDeclaration@@public, int, MethodName:getInputStreamCount,  @AT@ 1998 @LENGTH@ 6
---INS PrimitiveType@@int @TO@ MethodDeclaration@@public, int, MethodName:getInputStreamCount,  @AT@ 2005 @LENGTH@ 3
---INS SimpleName@@MethodName:getInputStreamCount @TO@ MethodDeclaration@@public, int, MethodName:getInputStreamCount,  @AT@ 2009 @LENGTH@ 19
---INS VariableDeclarationStatement@@List<InputStream> list=inputStreams; @TO@ MethodDeclaration@@public, int, MethodName:getInputStreamCount,  @AT@ 2041 @LENGTH@ 38
------INS ParameterizedType@@List<InputStream> @TO@ VariableDeclarationStatement@@List<InputStream> list=inputStreams; @AT@ 2041 @LENGTH@ 17
---------INS SimpleType@@List @TO@ ParameterizedType@@List<InputStream> @AT@ 2041 @LENGTH@ 4
---------INS SimpleType@@InputStream @TO@ ParameterizedType@@List<InputStream> @AT@ 2046 @LENGTH@ 11
------INS VariableDeclarationFragment@@list=inputStreams @TO@ VariableDeclarationStatement@@List<InputStream> list=inputStreams; @AT@ 2059 @LENGTH@ 19
---------INS SimpleName@@list @TO@ VariableDeclarationFragment@@list=inputStreams @AT@ 2059 @LENGTH@ 4
---------INS SimpleName@@inputStreams @TO@ VariableDeclarationFragment@@list=inputStreams @AT@ 2066 @LENGTH@ 12
---INS ReturnStatement@@ConditionalExpression:list == null ? 0 : list.size() @TO@ MethodDeclaration@@public, int, MethodName:getInputStreamCount,  @AT@ 2088 @LENGTH@ 38
------INS ConditionalExpression@@list == null ? 0 : list.size() @TO@ ReturnStatement@@ConditionalExpression:list == null ? 0 : list.size() @AT@ 2095 @LENGTH@ 30
---------INS InfixExpression@@list == null @TO@ ConditionalExpression@@list == null ? 0 : list.size() @AT@ 2095 @LENGTH@ 12
------------INS SimpleName@@list @TO@ InfixExpression@@list == null @AT@ 2095 @LENGTH@ 4
------------INS Operator@@== @TO@ InfixExpression@@list == null @AT@ 2099 @LENGTH@ 2
------------INS NullLiteral@@null @TO@ InfixExpression@@list == null @AT@ 2103 @LENGTH@ 4
---------INS NumberLiteral@@0 @TO@ ConditionalExpression@@list == null ? 0 : list.size() @AT@ 2110 @LENGTH@ 1
---------INS MethodInvocation@@list.size() @TO@ ConditionalExpression@@list == null ? 0 : list.size() @AT@ 2114 @LENGTH@ 11
------------INS SimpleName@@Name:list @TO@ MethodInvocation@@list.size() @AT@ 2114 @LENGTH@ 4
------------INS SimpleName@@MethodName:size:[] @TO@ MethodInvocation@@list.size() @AT@ 2119 @LENGTH@ 6


UPD ExpressionStatement@@Assignment:this.autoDeployExploded=autoDeployExploded == null ? true : autoDeployExploded.booleanValue() @TO@ Assignment:this.autoDeployExploded=autoDeployExploded == null ? false : autoDeployExploded.booleanValue() @AT@ 5350 @LENGTH@ 96
---UPD Assignment@@this.autoDeployExploded=autoDeployExploded == null ? true : autoDeployExploded.booleanValue() @TO@ this.autoDeployExploded=autoDeployExploded == null ? false : autoDeployExploded.booleanValue() @AT@ 5350 @LENGTH@ 95
------UPD ConditionalExpression@@autoDeployExploded == null ? true : autoDeployExploded.booleanValue() @TO@ autoDeployExploded == null ? false : autoDeployExploded.booleanValue() @AT@ 5376 @LENGTH@ 69
---------UPD BooleanLiteral@@true @TO@ false @AT@ 5405 @LENGTH@ 4


UPD TryStatement@@try {  PathAddress address=PathAddress.pathAddress(operation.require(OP_ADDR));  String name=address.getLastElement().getValue();  ModelNode model=context.getSubModel();  model.get(NAME).set(name);  ModelNode pathNode=model.get(PATH);  String failure=pathValidator.validateParameter(PATH,pathNode);  if (failure == null) {    String path=pathNode.isDefined() ? pathNode.asString() : null;    ModelNode relNode=model.get(RELATIVE_TO);    failure=relativeToValidator.validateParameter(RELATIVE_TO,relNode);    if (failure == null) {      String relativeTo=relNode.isDefined() ? pathNode.asString() : null;      ModelNode compensating=PathRemoveHandler.getRemovePathOperation(operation.get(OP_ADDR));      installPath(name,path,relativeTo,context,resultHandler,compensating);    }  }  if (failure != null) {    resultHandler.handleFailed(new ModelNode().set(failure));  }} catch (Exception e) {  resultHandler.handleFailed(new ModelNode().set(e.getLocalizedMessage()));} @TO@ try {  PathAddress address=PathAddress.pathAddress(operation.require(OP_ADDR));  String name=address.getLastElement().getValue();  ModelNode model=context.getSubModel();  model.get(NAME).set(name);  ModelNode pathNode=operation.get(PATH);  String failure=pathValidator.validateParameter(PATH,pathNode);  if (failure == null) {    ModelNode relNode=operation.get(RELATIVE_TO);    failure=relativeToValidator.validateParameter(RELATIVE_TO,relNode);    if (failure == null) {      model.get(PATH).set(pathNode);      model.get(RELATIVE_TO).set(relNode);      ModelNode compensating=PathRemoveHandler.getRemovePathOperation(operation.get(OP_ADDR));      String path=pathNode.isDefined() ? pathNode.asString() : null;      String relativeTo=relNode.isDefined() ? relNode.asString() : null;      installPath(name,path,relativeTo,context,resultHandler,compensating);    }  }  if (failure != null) {    resultHandler.handleFailed(new ModelNode().set(failure));  }} catch (Exception e) {  resultHandler.handleFailed(new ModelNode().set(e.getLocalizedMessage()));} @AT@ 3569 @LENGTH@ 1265
---UPD VariableDeclarationStatement@@ModelNode pathNode=model.get(PATH); @TO@ ModelNode pathNode=operation.get(PATH); @AT@ 3830 @LENGTH@ 37
------UPD VariableDeclarationFragment@@pathNode=model.get(PATH) @TO@ pathNode=operation.get(PATH) @AT@ 3840 @LENGTH@ 26
---------UPD MethodInvocation@@model.get(PATH) @TO@ operation.get(PATH) @AT@ 3851 @LENGTH@ 15
------------UPD SimpleName@@Name:model @TO@ Name:operation @AT@ 3851 @LENGTH@ 5
---UPD IfStatement@@if (failure == null) {  String path=pathNode.isDefined() ? pathNode.asString() : null;  ModelNode relNode=model.get(RELATIVE_TO);  failure=relativeToValidator.validateParameter(RELATIVE_TO,relNode);  if (failure == null) {    String relativeTo=relNode.isDefined() ? pathNode.asString() : null;    ModelNode compensating=PathRemoveHandler.getRemovePathOperation(operation.get(OP_ADDR));    installPath(name,path,relativeTo,context,resultHandler,compensating);  }} @TO@ if (failure == null) {  ModelNode relNode=operation.get(RELATIVE_TO);  failure=relativeToValidator.validateParameter(RELATIVE_TO,relNode);  if (failure == null) {    model.get(PATH).set(pathNode);    model.get(RELATIVE_TO).set(relNode);    ModelNode compensating=PathRemoveHandler.getRemovePathOperation(operation.get(OP_ADDR));    String path=pathNode.isDefined() ? pathNode.asString() : null;    String relativeTo=relNode.isDefined() ? relNode.asString() : null;    installPath(name,path,relativeTo,context,resultHandler,compensating);  }} @AT@ 3958 @LENGTH@ 617
------UPD Block@@ThenBody:{  String path=pathNode.isDefined() ? pathNode.asString() : null;  ModelNode relNode=model.get(RELATIVE_TO);  failure=relativeToValidator.validateParameter(RELATIVE_TO,relNode);  if (failure == null) {    String relativeTo=relNode.isDefined() ? pathNode.asString() : null;    ModelNode compensating=PathRemoveHandler.getRemovePathOperation(operation.get(OP_ADDR));    installPath(name,path,relativeTo,context,resultHandler,compensating);  }} @TO@ ThenBody:{  ModelNode relNode=operation.get(RELATIVE_TO);  failure=relativeToValidator.validateParameter(RELATIVE_TO,relNode);  if (failure == null) {    model.get(PATH).set(pathNode);    model.get(RELATIVE_TO).set(relNode);    ModelNode compensating=PathRemoveHandler.getRemovePathOperation(operation.get(OP_ADDR));    String path=pathNode.isDefined() ? pathNode.asString() : null;    String relativeTo=relNode.isDefined() ? relNode.asString() : null;    installPath(name,path,relativeTo,context,resultHandler,compensating);  }} @AT@ 3979 @LENGTH@ 596
---------UPD VariableDeclarationStatement@@ModelNode relNode=model.get(RELATIVE_TO); @TO@ ModelNode relNode=operation.get(RELATIVE_TO); @AT@ 4078 @LENGTH@ 43
------------UPD VariableDeclarationFragment@@relNode=model.get(RELATIVE_TO) @TO@ relNode=operation.get(RELATIVE_TO) @AT@ 4088 @LENGTH@ 32
---------------UPD MethodInvocation@@model.get(RELATIVE_TO) @TO@ operation.get(RELATIVE_TO) @AT@ 4098 @LENGTH@ 22
------------------UPD SimpleName@@Name:model @TO@ Name:operation @AT@ 4098 @LENGTH@ 5
---------UPD IfStatement@@if (failure == null) {  String relativeTo=relNode.isDefined() ? pathNode.asString() : null;  ModelNode compensating=PathRemoveHandler.getRemovePathOperation(operation.get(OP_ADDR));  installPath(name,path,relativeTo,context,resultHandler,compensating);} @TO@ if (failure == null) {  model.get(PATH).set(pathNode);  model.get(RELATIVE_TO).set(relNode);  ModelNode compensating=PathRemoveHandler.getRemovePathOperation(operation.get(OP_ADDR));  String path=pathNode.isDefined() ? pathNode.asString() : null;  String relativeTo=relNode.isDefined() ? relNode.asString() : null;  installPath(name,path,relativeTo,context,resultHandler,compensating);} @AT@ 4225 @LENGTH@ 336
------------UPD Block@@ThenBody:{  String relativeTo=relNode.isDefined() ? pathNode.asString() : null;  ModelNode compensating=PathRemoveHandler.getRemovePathOperation(operation.get(OP_ADDR));  installPath(name,path,relativeTo,context,resultHandler,compensating);} @TO@ ThenBody:{  model.get(PATH).set(pathNode);  model.get(RELATIVE_TO).set(relNode);  ModelNode compensating=PathRemoveHandler.getRemovePathOperation(operation.get(OP_ADDR));  String path=pathNode.isDefined() ? pathNode.asString() : null;  String relativeTo=relNode.isDefined() ? relNode.asString() : null;  installPath(name,path,relativeTo,context,resultHandler,compensating);} @AT@ 4246 @LENGTH@ 315
---------------MOV VariableDeclarationStatement@@String path=pathNode.isDefined() ? pathNode.asString() : null; @TO@ Block@@ThenBody:{  String relativeTo=relNode.isDefined() ? pathNode.asString() : null;  ModelNode compensating=PathRemoveHandler.getRemovePathOperation(operation.get(OP_ADDR));  installPath(name,path,relativeTo,context,resultHandler,compensating);} @AT@ 3997 @LENGTH@ 64
---------------INS ExpressionStatement@@MethodInvocation:model.get(PATH).set(pathNode) @TO@ Block@@ThenBody:{  String relativeTo=relNode.isDefined() ? pathNode.asString() : null;  ModelNode compensating=PathRemoveHandler.getRemovePathOperation(operation.get(OP_ADDR));  installPath(name,path,relativeTo,context,resultHandler,compensating);} @AT@ 4195 @LENGTH@ 30
------------------INS MethodInvocation@@model.get(PATH).set(pathNode) @TO@ ExpressionStatement@@MethodInvocation:model.get(PATH).set(pathNode) @AT@ 4195 @LENGTH@ 29
---------------------INS MethodInvocation@@MethodName:get:[PATH] @TO@ MethodInvocation@@model.get(PATH).set(pathNode) @AT@ 4195 @LENGTH@ 15
------------------------INS SimpleName@@PATH @TO@ MethodInvocation@@MethodName:get:[PATH] @AT@ 4205 @LENGTH@ 4
---------------------INS SimpleName@@Name:model @TO@ MethodInvocation@@model.get(PATH).set(pathNode) @AT@ 4195 @LENGTH@ 5
---------------------INS SimpleName@@MethodName:set:[pathNode] @TO@ MethodInvocation@@model.get(PATH).set(pathNode) @AT@ 4211 @LENGTH@ 13
------------------------INS SimpleName@@pathNode @TO@ SimpleName@@MethodName:set:[pathNode] @AT@ 4215 @LENGTH@ 8
---------------INS ExpressionStatement@@MethodInvocation:model.get(RELATIVE_TO).set(relNode) @TO@ Block@@ThenBody:{  String relativeTo=relNode.isDefined() ? pathNode.asString() : null;  ModelNode compensating=PathRemoveHandler.getRemovePathOperation(operation.get(OP_ADDR));  installPath(name,path,relativeTo,context,resultHandler,compensating);} @AT@ 4246 @LENGTH@ 36
------------------INS MethodInvocation@@model.get(RELATIVE_TO).set(relNode) @TO@ ExpressionStatement@@MethodInvocation:model.get(RELATIVE_TO).set(relNode) @AT@ 4246 @LENGTH@ 35
---------------------INS MethodInvocation@@MethodName:get:[RELATIVE_TO] @TO@ MethodInvocation@@model.get(RELATIVE_TO).set(relNode) @AT@ 4246 @LENGTH@ 22
------------------------INS SimpleName@@RELATIVE_TO @TO@ MethodInvocation@@MethodName:get:[RELATIVE_TO] @AT@ 4256 @LENGTH@ 11
---------------------INS SimpleName@@Name:model @TO@ MethodInvocation@@model.get(RELATIVE_TO).set(relNode) @AT@ 4246 @LENGTH@ 5
---------------------INS SimpleName@@MethodName:set:[relNode] @TO@ MethodInvocation@@model.get(RELATIVE_TO).set(relNode) @AT@ 4269 @LENGTH@ 12
------------------------INS SimpleName@@relNode @TO@ SimpleName@@MethodName:set:[relNode] @AT@ 4273 @LENGTH@ 7
---------------UPD VariableDeclarationStatement@@String relativeTo=relNode.isDefined() ? pathNode.asString() : null; @TO@ String relativeTo=relNode.isDefined() ? relNode.asString() : null; @AT@ 4268 @LENGTH@ 69
------------------UPD VariableDeclarationFragment@@relativeTo=relNode.isDefined() ? pathNode.asString() : null @TO@ relativeTo=relNode.isDefined() ? relNode.asString() : null @AT@ 4275 @LENGTH@ 61
---------------------UPD ConditionalExpression@@relNode.isDefined() ? pathNode.asString() : null @TO@ relNode.isDefined() ? relNode.asString() : null @AT@ 4288 @LENGTH@ 48
------------------------UPD MethodInvocation@@pathNode.asString() @TO@ relNode.asString() @AT@ 4310 @LENGTH@ 19
---------------------------UPD SimpleName@@Name:pathNode @TO@ Name:relNode @AT@ 4310 @LENGTH@ 8
---------------MOV VariableDeclarationStatement@@String relativeTo=relNode.isDefined() ? pathNode.asString() : null; @TO@ Block@@ThenBody:{  String relativeTo=relNode.isDefined() ? pathNode.asString() : null;  ModelNode compensating=PathRemoveHandler.getRemovePathOperation(operation.get(OP_ADDR));  installPath(name,path,relativeTo,context,resultHandler,compensating);} @AT@ 4268 @LENGTH@ 69


UPD ThrowStatement@@ClassInstanceCreation:new BeanInitializationException("Cannot find region named " + name + " in cache "+ cache) @TO@ ClassInstanceCreation:new BeanInitializationException("Cannot find region named " + regionName + " in cache "+ cache) @AT@ 2388 @LENGTH@ 97
---UPD ClassInstanceCreation@@BeanInitializationException["Cannot find region named " + name + " in cache "+ cache] @TO@ BeanInitializationException["Cannot find region named " + regionName + " in cache "+ cache] @AT@ 2394 @LENGTH@ 90
------UPD InfixExpression@@"Cannot find region named " + name + " in cache "+ cache @TO@ "Cannot find region named " + regionName + " in cache "+ cache @AT@ 2426 @LENGTH@ 57
---------UPD SimpleName@@name @TO@ regionName @AT@ 2456 @LENGTH@ 4


UPD ReturnStatement@@CastExpression:(List<Exchange>)template.browse(queue,new BrowserCallback(){
  public Object doInJms(  Session session,  QueueBrowser browser) throws JMSException {
    List<Exchange> answer=new ArrayList<Exchange>();
    Enumeration iter=browser.getEnumeration();
    while (iter.hasMoreElements()) {
      Message message=(Message)iter.nextElement();
      Exchange exchange=endpoint.createExchange(message);
      answer.add(exchange);
    }
    return answer;
  }
}
) @TO@ MethodInvocation:template.browse(queue,new BrowserCallback<List<Exchange>>(){
  public List<Exchange> doInJms(  Session session,  QueueBrowser browser) throws JMSException {
    List<Exchange> answer=new ArrayList<Exchange>();
    Enumeration iter=browser.getEnumeration();
    while (iter.hasMoreElements()) {
      Message message=(Message)iter.nextElement();
      Exchange exchange=endpoint.createExchange(message);
      answer.add(exchange);
    }
    return answer;
  }
}
) @AT@ 1483 @LENGTH@ 750
---DEL CastExpression@@(List<Exchange>)template.browse(queue,new BrowserCallback(){
  public Object doInJms(  Session session,  QueueBrowser browser) throws JMSException {
    List<Exchange> answer=new ArrayList<Exchange>();
    Enumeration iter=browser.getEnumeration();
    while (iter.hasMoreElements()) {
      Message message=(Message)iter.nextElement();
      Exchange exchange=endpoint.createExchange(message);
      answer.add(exchange);
    }
    return answer;
  }
}
) @AT@ 1491 @LENGTH@ 741
------DEL ParameterizedType@@List<Exchange> @AT@ 1492 @LENGTH@ 14
---------DEL SimpleType@@List @AT@ 1492 @LENGTH@ 4
---------DEL SimpleType@@Exchange @AT@ 1497 @LENGTH@ 8
---MOV MethodInvocation@@template.browse(queue,new BrowserCallback(){
  public Object doInJms(  Session session,  QueueBrowser browser) throws JMSException {
    List<Exchange> answer=new ArrayList<Exchange>();
    Enumeration iter=browser.getEnumeration();
    while (iter.hasMoreElements()) {
      Message message=(Message)iter.nextElement();
      Exchange exchange=endpoint.createExchange(message);
      answer.add(exchange);
    }
    return answer;
  }
}
) @TO@ ReturnStatement@@CastExpression:(List<Exchange>)template.browse(queue,new BrowserCallback(){
  public Object doInJms(  Session session,  QueueBrowser browser) throws JMSException {
    List<Exchange> answer=new ArrayList<Exchange>();
    Enumeration iter=browser.getEnumeration();
    while (iter.hasMoreElements()) {
      Message message=(Message)iter.nextElement();
      Exchange exchange=endpoint.createExchange(message);
      answer.add(exchange);
    }
    return answer;
  }
}
) @AT@ 1508 @LENGTH@ 724
------UPD SimpleName@@MethodName:browse:[queue, new BrowserCallback(){
  public Object doInJms(  Session session,  QueueBrowser browser) throws JMSException {
    List<Exchange> answer=new ArrayList<Exchange>();
    Enumeration iter=browser.getEnumeration();
    while (iter.hasMoreElements()) {
      Message message=(Message)iter.nextElement();
      Exchange exchange=endpoint.createExchange(message);
      answer.add(exchange);
    }
    return answer;
  }
}
] @TO@ MethodName:browse:[queue, new BrowserCallback<List<Exchange>>(){
  public List<Exchange> doInJms(  Session session,  QueueBrowser browser) throws JMSException {
    List<Exchange> answer=new ArrayList<Exchange>();
    Enumeration iter=browser.getEnumeration();
    while (iter.hasMoreElements()) {
      Message message=(Message)iter.nextElement();
      Exchange exchange=endpoint.createExchange(message);
      answer.add(exchange);
    }
    return answer;
  }
}
] @AT@ 1517 @LENGTH@ 715
---------UPD ClassInstanceCreation@@BrowserCallback[] @TO@ BrowserCallback<List<Exchange>>[] @AT@ 1531 @LENGTH@ 700
------------INS ParameterizedType@@BrowserCallback<List<Exchange>> @TO@ ClassInstanceCreation@@BrowserCallback[] @AT@ 1515 @LENGTH@ 31
---------------INS SimpleType@@BrowserCallback @TO@ ParameterizedType@@BrowserCallback<List<Exchange>> @AT@ 1515 @LENGTH@ 15
---------------INS ParameterizedType@@List<Exchange> @TO@ ParameterizedType@@BrowserCallback<List<Exchange>> @AT@ 1531 @LENGTH@ 14
------------------INS SimpleType@@List @TO@ ParameterizedType@@List<Exchange> @AT@ 1531 @LENGTH@ 4
------------------INS SimpleType@@Exchange @TO@ ParameterizedType@@List<Exchange> @AT@ 1536 @LENGTH@ 8
------------DEL SimpleType@@BrowserCallback @AT@ 1535 @LENGTH@ 15


UPD MethodDeclaration@@public, boolean, MethodName:canAppearNext, CommandContext ctx,  @TO@ public, boolean, MethodName:canAppearNext, CommandContext ctx, CommandFormatException,  @AT@ 3407 @LENGTH@ 254
---INS SimpleType@@CommandFormatException @TO@ MethodDeclaration@@public, boolean, MethodName:canAppearNext, CommandContext ctx,  @AT@ 3493 @LENGTH@ 22


UPD ExpressionStatement@@MethodInvocation:processExchange(remoteExchange) @TO@ MethodInvocation:processExchange(remoteExchange,target) @AT@ 1822 @LENGTH@ 32
---UPD MethodInvocation@@processExchange(remoteExchange) @TO@ processExchange(remoteExchange,target) @AT@ 1822 @LENGTH@ 31
------UPD SimpleName@@MethodName:processExchange:[remoteExchange] @TO@ MethodName:processExchange:[remoteExchange, target] @AT@ 1822 @LENGTH@ 31
---------INS SimpleName@@target @TO@ SimpleName@@MethodName:processExchange:[remoteExchange] @AT@ 1904 @LENGTH@ 6


UPD MethodDeclaration@@public, void, MethodName:testMuateMessage, Exception,  @TO@ public, void, MethodName:testMutateMessage, Exception,  @AT@ 1476 @LENGTH@ 396
---UPD SimpleName@@MethodName:testMuateMessage @TO@ MethodName:testMutateMessage @AT@ 1488 @LENGTH@ 16


INS MethodDeclaration@@protected, static, void, MethodName:writeElement, final XMLExtendedStreamWriter writer, final Element element, XMLStreamException,  @TO@ TypeDeclaration@@[public, abstract]CommonXml, [XMLElementReader<List<ModelNode>>, XMLElementWriter<ModelMarshallingContext>] @AT@ 11079 @LENGTH@ 187
---INS Modifier@@protected @TO@ MethodDeclaration@@protected, static, void, MethodName:writeElement, final XMLExtendedStreamWriter writer, final Element element, XMLStreamException,  @AT@ 11079 @LENGTH@ 9
---INS Modifier@@static @TO@ MethodDeclaration@@protected, static, void, MethodName:writeElement, final XMLExtendedStreamWriter writer, final Element element, XMLStreamException,  @AT@ 11089 @LENGTH@ 6
---INS PrimitiveType@@void @TO@ MethodDeclaration@@protected, static, void, MethodName:writeElement, final XMLExtendedStreamWriter writer, final Element element, XMLStreamException,  @AT@ 11096 @LENGTH@ 4
---INS SimpleName@@MethodName:writeElement @TO@ MethodDeclaration@@protected, static, void, MethodName:writeElement, final XMLExtendedStreamWriter writer, final Element element, XMLStreamException,  @AT@ 11101 @LENGTH@ 12
---INS SingleVariableDeclaration@@final XMLExtendedStreamWriter writer @TO@ MethodDeclaration@@protected, static, void, MethodName:writeElement, final XMLExtendedStreamWriter writer, final Element element, XMLStreamException,  @AT@ 11114 @LENGTH@ 36
------INS Modifier@@final @TO@ SingleVariableDeclaration@@final XMLExtendedStreamWriter writer @AT@ 11114 @LENGTH@ 5
------INS SimpleType@@XMLExtendedStreamWriter @TO@ SingleVariableDeclaration@@final XMLExtendedStreamWriter writer @AT@ 11120 @LENGTH@ 23
------INS SimpleName@@writer @TO@ SingleVariableDeclaration@@final XMLExtendedStreamWriter writer @AT@ 11144 @LENGTH@ 6
---INS SingleVariableDeclaration@@final Element element @TO@ MethodDeclaration@@protected, static, void, MethodName:writeElement, final XMLExtendedStreamWriter writer, final Element element, XMLStreamException,  @AT@ 11152 @LENGTH@ 21
------INS Modifier@@final @TO@ SingleVariableDeclaration@@final Element element @AT@ 11152 @LENGTH@ 5
------INS SimpleType@@Element @TO@ SingleVariableDeclaration@@final Element element @AT@ 11158 @LENGTH@ 7
------INS SimpleName@@element @TO@ SingleVariableDeclaration@@final Element element @AT@ 11166 @LENGTH@ 7
---INS SimpleType@@XMLStreamException @TO@ MethodDeclaration@@protected, static, void, MethodName:writeElement, final XMLExtendedStreamWriter writer, final Element element, XMLStreamException,  @AT@ 11182 @LENGTH@ 18
---INS ExpressionStatement@@MethodInvocation:writer.writeStartElement(element.getLocalName()) @TO@ MethodDeclaration@@protected, static, void, MethodName:writeElement, final XMLExtendedStreamWriter writer, final Element element, XMLStreamException,  @AT@ 11211 @LENGTH@ 49
------INS MethodInvocation@@writer.writeStartElement(element.getLocalName()) @TO@ ExpressionStatement@@MethodInvocation:writer.writeStartElement(element.getLocalName()) @AT@ 11211 @LENGTH@ 48
---------INS SimpleName@@Name:writer @TO@ MethodInvocation@@writer.writeStartElement(element.getLocalName()) @AT@ 11211 @LENGTH@ 6
---------INS SimpleName@@MethodName:writeStartElement:[element.getLocalName()] @TO@ MethodInvocation@@writer.writeStartElement(element.getLocalName()) @AT@ 11218 @LENGTH@ 41
------------INS MethodInvocation@@element.getLocalName() @TO@ SimpleName@@MethodName:writeStartElement:[element.getLocalName()] @AT@ 11236 @LENGTH@ 22
---------------INS SimpleName@@Name:element @TO@ MethodInvocation@@element.getLocalName() @AT@ 11236 @LENGTH@ 7
---------------INS SimpleName@@MethodName:getLocalName:[] @TO@ MethodInvocation@@element.getLocalName() @AT@ 11244 @LENGTH@ 14


UPD MethodDeclaration@@public, Boolean, MethodName:getIgnoreInvalidEndpoint,  @TO@ public, Boolean, MethodName:getIgnoreInvalidEndpoints,  @AT@ 3519 @LENGTH@ 88
---UPD SimpleName@@MethodName:getIgnoreInvalidEndpoint @TO@ MethodName:getIgnoreInvalidEndpoints @AT@ 3534 @LENGTH@ 24


UPD ReturnStatement@@MethodInvocation:Arrays.asList(params(0,1,1,AcknowledgeMode.AUTO),params(1,1,1,AcknowledgeMode.NONE),params(2,4,1,AcknowledgeMode.AUTO),extern(3,4,1,AcknowledgeMode.AUTO),params(4,4,1,AcknowledgeMode.AUTO,false),params(5,2,2,AcknowledgeMode.AUTO),params(6,2,2,AcknowledgeMode.NONE),params(7,20,4,AcknowledgeMode.AUTO),params(8,20,4,AcknowledgeMode.NONE),params(9,1000,4,AcknowledgeMode.AUTO),params(10,1000,4,AcknowledgeMode.NONE),params(11,1000,4,AcknowledgeMode.AUTO,10)) @TO@ MethodInvocation:Arrays.asList(params(0,1,1,AcknowledgeMode.AUTO),params(1,1,1,AcknowledgeMode.NONE),params(2,4,1,AcknowledgeMode.AUTO),extern(3,4,1,AcknowledgeMode.AUTO),params(4,4,1,AcknowledgeMode.AUTO,false),params(5,2,2,AcknowledgeMode.AUTO),params(6,2,2,AcknowledgeMode.NONE),params(7,20,4,AcknowledgeMode.AUTO),params(8,20,4,AcknowledgeMode.NONE),params(9,300,4,AcknowledgeMode.AUTO),params(10,300,4,AcknowledgeMode.NONE),params(11,300,4,AcknowledgeMode.AUTO,10)) @AT@ 3270 @LENGTH@ 619
---UPD MethodInvocation@@Arrays.asList(params(0,1,1,AcknowledgeMode.AUTO),params(1,1,1,AcknowledgeMode.NONE),params(2,4,1,AcknowledgeMode.AUTO),extern(3,4,1,AcknowledgeMode.AUTO),params(4,4,1,AcknowledgeMode.AUTO,false),params(5,2,2,AcknowledgeMode.AUTO),params(6,2,2,AcknowledgeMode.NONE),params(7,20,4,AcknowledgeMode.AUTO),params(8,20,4,AcknowledgeMode.NONE),params(9,1000,4,AcknowledgeMode.AUTO),params(10,1000,4,AcknowledgeMode.NONE),params(11,1000,4,AcknowledgeMode.AUTO,10)) @TO@ Arrays.asList(params(0,1,1,AcknowledgeMode.AUTO),params(1,1,1,AcknowledgeMode.NONE),params(2,4,1,AcknowledgeMode.AUTO),extern(3,4,1,AcknowledgeMode.AUTO),params(4,4,1,AcknowledgeMode.AUTO,false),params(5,2,2,AcknowledgeMode.AUTO),params(6,2,2,AcknowledgeMode.NONE),params(7,20,4,AcknowledgeMode.AUTO),params(8,20,4,AcknowledgeMode.NONE),params(9,300,4,AcknowledgeMode.AUTO),params(10,300,4,AcknowledgeMode.NONE),params(11,300,4,AcknowledgeMode.AUTO,10)) @AT@ 3277 @LENGTH@ 611
------UPD SimpleName@@MethodName:asList:[params(0,1,1,AcknowledgeMode.AUTO), params(1,1,1,AcknowledgeMode.NONE), params(2,4,1,AcknowledgeMode.AUTO), extern(3,4,1,AcknowledgeMode.AUTO), params(4,4,1,AcknowledgeMode.AUTO,false), params(5,2,2,AcknowledgeMode.AUTO), params(6,2,2,AcknowledgeMode.NONE), params(7,20,4,AcknowledgeMode.AUTO), params(8,20,4,AcknowledgeMode.NONE), params(9,1000,4,AcknowledgeMode.AUTO), params(10,1000,4,AcknowledgeMode.NONE), params(11,1000,4,AcknowledgeMode.AUTO,10)] @TO@ MethodName:asList:[params(0,1,1,AcknowledgeMode.AUTO), params(1,1,1,AcknowledgeMode.NONE), params(2,4,1,AcknowledgeMode.AUTO), extern(3,4,1,AcknowledgeMode.AUTO), params(4,4,1,AcknowledgeMode.AUTO,false), params(5,2,2,AcknowledgeMode.AUTO), params(6,2,2,AcknowledgeMode.NONE), params(7,20,4,AcknowledgeMode.AUTO), params(8,20,4,AcknowledgeMode.NONE), params(9,300,4,AcknowledgeMode.AUTO), params(10,300,4,AcknowledgeMode.NONE), params(11,300,4,AcknowledgeMode.AUTO,10)] @AT@ 3284 @LENGTH@ 604
---------UPD MethodInvocation@@params(9,1000,4,AcknowledgeMode.AUTO) @TO@ params(9,300,4,AcknowledgeMode.AUTO) @AT@ 3732 @LENGTH@ 40
------------UPD SimpleName@@MethodName:params:[9, 1000, 4, AcknowledgeMode.AUTO] @TO@ MethodName:params:[9, 300, 4, AcknowledgeMode.AUTO] @AT@ 3732 @LENGTH@ 40
---------------UPD NumberLiteral@@1000 @TO@ 300 @AT@ 3742 @LENGTH@ 4
---------UPD MethodInvocation@@params(10,1000,4,AcknowledgeMode.NONE) @TO@ params(10,300,4,AcknowledgeMode.NONE) @AT@ 3782 @LENGTH@ 41
------------UPD SimpleName@@MethodName:params:[10, 1000, 4, AcknowledgeMode.NONE] @TO@ MethodName:params:[10, 300, 4, AcknowledgeMode.NONE] @AT@ 3782 @LENGTH@ 41
---------------UPD NumberLiteral@@1000 @TO@ 300 @AT@ 3793 @LENGTH@ 4
---------UPD MethodInvocation@@params(11,1000,4,AcknowledgeMode.AUTO,10) @TO@ params(11,300,4,AcknowledgeMode.AUTO,10) @AT@ 3833 @LENGTH@ 45
------------UPD SimpleName@@MethodName:params:[11, 1000, 4, AcknowledgeMode.AUTO, 10] @TO@ MethodName:params:[11, 300, 4, AcknowledgeMode.AUTO, 10] @AT@ 3833 @LENGTH@ 45
---------------UPD NumberLiteral@@1000 @TO@ 300 @AT@ 3844 @LENGTH@ 4


INS MethodDeclaration@@List<Person>, MethodName:findByLastnameLikeAndAgeBetween, String lastname, int from, int to,  @TO@ TypeDeclaration@@[public]PersonRepository, [MongoRepository<Person,String>] @AT@ 3031 @LENGTH@ 67
---INS ParameterizedType@@List<Person> @TO@ MethodDeclaration@@List<Person>, MethodName:findByLastnameLikeAndAgeBetween, String lastname, int from, int to,  @AT@ 3018 @LENGTH@ 12
------INS SimpleType@@List @TO@ ParameterizedType@@List<Person> @AT@ 3018 @LENGTH@ 4
------INS SimpleType@@Person @TO@ ParameterizedType@@List<Person> @AT@ 3023 @LENGTH@ 6
---INS SimpleName@@MethodName:findByLastnameLikeAndAgeBetween @TO@ MethodDeclaration@@List<Person>, MethodName:findByLastnameLikeAndAgeBetween, String lastname, int from, int to,  @AT@ 3031 @LENGTH@ 31
---INS SingleVariableDeclaration@@String lastname @TO@ MethodDeclaration@@List<Person>, MethodName:findByLastnameLikeAndAgeBetween, String lastname, int from, int to,  @AT@ 3063 @LENGTH@ 15
------INS SimpleType@@String @TO@ SingleVariableDeclaration@@String lastname @AT@ 3063 @LENGTH@ 6
------INS SimpleName@@lastname @TO@ SingleVariableDeclaration@@String lastname @AT@ 3070 @LENGTH@ 8
---INS SingleVariableDeclaration@@int from @TO@ MethodDeclaration@@List<Person>, MethodName:findByLastnameLikeAndAgeBetween, String lastname, int from, int to,  @AT@ 3080 @LENGTH@ 8
------INS PrimitiveType@@int @TO@ SingleVariableDeclaration@@int from @AT@ 3080 @LENGTH@ 3
------INS SimpleName@@from @TO@ SingleVariableDeclaration@@int from @AT@ 3084 @LENGTH@ 4
---INS SingleVariableDeclaration@@int to @TO@ MethodDeclaration@@List<Person>, MethodName:findByLastnameLikeAndAgeBetween, String lastname, int from, int to,  @AT@ 3090 @LENGTH@ 6
------INS PrimitiveType@@int @TO@ SingleVariableDeclaration@@int to @AT@ 3090 @LENGTH@ 3
------INS SimpleName@@to @TO@ SingleVariableDeclaration@@int to @AT@ 3094 @LENGTH@ 2


UPD ReturnStatement@@MethodInvocation:postProcessConnection(new RjcConnection(dataSource.getConnection(),usePool,dbIndex)) @TO@ MethodInvocation:postProcessConnection(new RjcConnection(dataSource.getConnection(),dbIndex)) @AT@ 2800 @LENGTH@ 94
---UPD MethodInvocation@@postProcessConnection(new RjcConnection(dataSource.getConnection(),usePool,dbIndex)) @TO@ postProcessConnection(new RjcConnection(dataSource.getConnection(),dbIndex)) @AT@ 2807 @LENGTH@ 86
------UPD SimpleName@@MethodName:postProcessConnection:[new RjcConnection(dataSource.getConnection(),usePool,dbIndex)] @TO@ MethodName:postProcessConnection:[new RjcConnection(dataSource.getConnection(),dbIndex)] @AT@ 2807 @LENGTH@ 86
---------UPD ClassInstanceCreation@@RjcConnection[dataSource.getConnection(), usePool, dbIndex] @TO@ RjcConnection[dataSource.getConnection(), dbIndex] @AT@ 2829 @LENGTH@ 63
------------DEL SimpleName@@usePool @AT@ 2875 @LENGTH@ 7


INS ExpressionStatement@@MethodInvocation:updateContext.addDeploymentProcessor(Phase.STRUCTURE,Phase.STRUCTURE_JDBC_DRIVER,new StructureDriverProcessor()) @TO@ MethodDeclaration@@public, void, MethodName:activate, final BootOperationContext updateContext, final ServiceTarget serviceTarget,  @AT@ 4555 @LENGTH@ 115
---INS MethodInvocation@@updateContext.addDeploymentProcessor(Phase.STRUCTURE,Phase.STRUCTURE_JDBC_DRIVER,new StructureDriverProcessor()) @TO@ ExpressionStatement@@MethodInvocation:updateContext.addDeploymentProcessor(Phase.STRUCTURE,Phase.STRUCTURE_JDBC_DRIVER,new StructureDriverProcessor()) @AT@ 4555 @LENGTH@ 114
------INS SimpleName@@Name:updateContext @TO@ MethodInvocation@@updateContext.addDeploymentProcessor(Phase.STRUCTURE,Phase.STRUCTURE_JDBC_DRIVER,new StructureDriverProcessor()) @AT@ 4555 @LENGTH@ 13
------INS SimpleName@@MethodName:addDeploymentProcessor:[Phase.STRUCTURE, Phase.STRUCTURE_JDBC_DRIVER, new StructureDriverProcessor()] @TO@ MethodInvocation@@updateContext.addDeploymentProcessor(Phase.STRUCTURE,Phase.STRUCTURE_JDBC_DRIVER,new StructureDriverProcessor()) @AT@ 4569 @LENGTH@ 100
---------INS QualifiedName@@Phase.STRUCTURE @TO@ SimpleName@@MethodName:addDeploymentProcessor:[Phase.STRUCTURE, Phase.STRUCTURE_JDBC_DRIVER, new StructureDriverProcessor()] @AT@ 4592 @LENGTH@ 15
------------INS SimpleName@@Phase @TO@ QualifiedName@@Phase.STRUCTURE @AT@ 4592 @LENGTH@ 5
------------INS SimpleName@@STRUCTURE @TO@ QualifiedName@@Phase.STRUCTURE @AT@ 4598 @LENGTH@ 9
---------INS QualifiedName@@Phase.STRUCTURE_JDBC_DRIVER @TO@ SimpleName@@MethodName:addDeploymentProcessor:[Phase.STRUCTURE, Phase.STRUCTURE_JDBC_DRIVER, new StructureDriverProcessor()] @AT@ 4609 @LENGTH@ 27
------------INS SimpleName@@Phase @TO@ QualifiedName@@Phase.STRUCTURE_JDBC_DRIVER @AT@ 4609 @LENGTH@ 5
------------INS SimpleName@@STRUCTURE_JDBC_DRIVER @TO@ QualifiedName@@Phase.STRUCTURE_JDBC_DRIVER @AT@ 4615 @LENGTH@ 21
---------INS ClassInstanceCreation@@StructureDriverProcessor[] @TO@ SimpleName@@MethodName:addDeploymentProcessor:[Phase.STRUCTURE, Phase.STRUCTURE_JDBC_DRIVER, new StructureDriverProcessor()] @AT@ 4638 @LENGTH@ 30
------------INS New@@new @TO@ ClassInstanceCreation@@StructureDriverProcessor[] @AT@ 4638 @LENGTH@ 3
------------INS SimpleType@@StructureDriverProcessor @TO@ ClassInstanceCreation@@StructureDriverProcessor[] @AT@ 4642 @LENGTH@ 24


INS MethodDeclaration@@public, String, MethodName:toString,  @TO@ TypeDeclaration@@[public]OperationFailedException, Exception @AT@ 3533 @LENGTH@ 101
---INS Modifier@@public @TO@ MethodDeclaration@@public, String, MethodName:toString,  @AT@ 3533 @LENGTH@ 6
---INS SimpleType@@String @TO@ MethodDeclaration@@public, String, MethodName:toString,  @AT@ 3540 @LENGTH@ 6
---INS SimpleName@@MethodName:toString @TO@ MethodDeclaration@@public, String, MethodName:toString,  @AT@ 3547 @LENGTH@ 8
---INS ReturnStatement@@InfixExpression:super.toString() + " [ " + failureDescription+ " ]" @TO@ MethodDeclaration@@public, String, MethodName:toString,  @AT@ 3568 @LENGTH@ 60
------INS InfixExpression@@super.toString() + " [ " + failureDescription+ " ]" @TO@ ReturnStatement@@InfixExpression:super.toString() + " [ " + failureDescription+ " ]" @AT@ 3575 @LENGTH@ 52
---------INS SuperMethodInvocation@@super.toString() @TO@ InfixExpression@@super.toString() + " [ " + failureDescription+ " ]" @AT@ 3575 @LENGTH@ 16
------------INS SimpleName@@MethodName:toString:[] @TO@ SuperMethodInvocation@@super.toString() @AT@ 3581 @LENGTH@ 8
---------INS Operator@@+ @TO@ InfixExpression@@super.toString() + " [ " + failureDescription+ " ]" @AT@ 3591 @LENGTH@ 1
---------INS StringLiteral@@" [ " @TO@ InfixExpression@@super.toString() + " [ " + failureDescription+ " ]" @AT@ 3594 @LENGTH@ 5
---------INS SimpleName@@failureDescription @TO@ InfixExpression@@super.toString() + " [ " + failureDescription+ " ]" @AT@ 3602 @LENGTH@ 18
---------INS StringLiteral@@" ]" @TO@ InfixExpression@@super.toString() + " [ " + failureDescription+ " ]" @AT@ 3623 @LENGTH@ 4


UPD MethodDeclaration@@public, voidMethodName:SFSBContextHandleImpl, StatefulSessionComponentInstance sfsb,  @TO@ public, voidMethodName:SFSBContextHandleImpl, Serializable id,  @AT@ 1420 @LENGTH@ 111
---UPD SingleVariableDeclaration@@StatefulSessionComponentInstance sfsb @TO@ Serializable id @AT@ 1449 @LENGTH@ 37
------UPD SimpleType@@StatefulSessionComponentInstance @TO@ Serializable @AT@ 1449 @LENGTH@ 32
------UPD SimpleName@@sfsb @TO@ id @AT@ 1482 @LENGTH@ 4
---UPD ExpressionStatement@@Assignment:this.idSFSB=sfsb.getId() @TO@ Assignment:this.idSFSB=id @AT@ 1498 @LENGTH@ 27
------UPD Assignment@@this.idSFSB=sfsb.getId() @TO@ this.idSFSB=id @AT@ 1498 @LENGTH@ 26
---------INS SimpleName@@id @TO@ Assignment@@this.idSFSB=sfsb.getId() @AT@ 1412 @LENGTH@ 2
---------DEL MethodInvocation@@sfsb.getId() @AT@ 1512 @LENGTH@ 12
------------DEL SimpleName@@Name:sfsb @AT@ 1512 @LENGTH@ 4
------------DEL SimpleName@@MethodName:getId:[] @AT@ 1517 @LENGTH@ 7


UPD Block@@WhileBody:{  requireSingleAttribute(reader,Attribute.NAME.getLocalName());  final String name=reader.getAttributeValue(0);  if (!names.add(name)) {    throw new XMLStreamException("Duplicate profile declaration " + name,reader.getLocation());  }  final List<ModelNode> subsystems=new ArrayList<ModelNode>();  final Set<String> includes=new HashSet<String>();  final ModelNode profileIncludes=new ModelNode();  final Set<String> configuredSubsystemTypes=new HashSet<String>();  while (reader.nextTag() != END_ELEMENT) {switch (Namespace.forUri(reader.getNamespaceURI())) {case UNKNOWN:{        if (Element.forName(reader.getLocalName()) != Element.SUBSYSTEM) {          throw unexpectedElement(reader);        }        if (!configuredSubsystemTypes.add(reader.getNamespaceURI())) {          throw new XMLStreamException("Duplicate subsystem declaration",reader.getLocation());        }        reader.handleAny(subsystems);        break;      }case DOMAIN_1_0:{      if (configuredSubsystemTypes.size() > 0) {        throw unexpectedElement(reader);      }      if (Element.forName(reader.getLocalName()) != Element.INCLUDE) {        throw unexpectedElement(reader);      }      final String includedName=readStringAttributeElement(reader,Attribute.PROFILE.getLocalName());      if (!names.contains(includedName)) {        throw new XMLStreamException("No profile found for inclusion",reader.getLocation());      }      if (!includes.add(includedName)) {        throw new XMLStreamException("Duplicate profile include",reader.getLocation());      }      profileIncludes.add(includedName);      break;    }default :{    throw unexpectedElement(reader);  }}}final ModelNode profile=new ModelNode();profile.get(OP).set("add-profile");profile.get(OP_ADDR).set(address.clone().add(name));profile.get(REQUEST_PROPERTIES).set(profileIncludes);list.add(profile);for (final ModelNode update : subsystems) {final ModelNode subsystemAddress=address.clone().add(name).add(update.require(OP_ADDR));update.get(OP_ADDR).set(subsystemAddress);list.add(update);}if (configuredSubsystemTypes.size() == 0) {throw new XMLStreamException("Profile has no subsystem configurations",reader.getLocation());}} @TO@ WhileBody:{  requireSingleAttribute(reader,Attribute.NAME.getLocalName());  final String name=reader.getAttributeValue(0);  if (!names.add(name)) {    throw new XMLStreamException("Duplicate profile declaration " + name,reader.getLocation());  }  final List<ModelNode> subsystems=new ArrayList<ModelNode>();  final Set<String> includes=new HashSet<String>();  final ModelNode profileIncludes=new ModelNode();  final Set<String> configuredSubsystemTypes=new HashSet<String>();  while (reader.nextTag() != END_ELEMENT) {switch (Namespace.forUri(reader.getNamespaceURI())) {case UNKNOWN:{        if (Element.forName(reader.getLocalName()) != Element.SUBSYSTEM) {          throw unexpectedElement(reader);        }        if (!configuredSubsystemTypes.add(reader.getNamespaceURI())) {          throw new XMLStreamException("Duplicate subsystem declaration",reader.getLocation());        }        reader.handleAny(subsystems);        break;      }case DOMAIN_1_0:{      if (configuredSubsystemTypes.size() > 0) {        throw unexpectedElement(reader);      }      if (Element.forName(reader.getLocalName()) != Element.INCLUDE) {        throw unexpectedElement(reader);      }      final String includedName=readStringAttributeElement(reader,Attribute.PROFILE.getLocalName());      if (!names.contains(includedName)) {        throw new XMLStreamException("No profile found for inclusion",reader.getLocation());      }      if (!includes.add(includedName)) {        throw new XMLStreamException("Duplicate profile include",reader.getLocation());      }      profileIncludes.add(includedName);      break;    }default :{    throw unexpectedElement(reader);  }}}final ModelNode profile=new ModelNode();profile.get(OP).set(ADD);profile.get(OP_ADDR).set(address).add(PROFILE,name);profile.get(REQUEST_PROPERTIES,"includes").set(profileIncludes);list.add(profile);for (final ModelNode update : subsystems) {final ModelNode subsystemAddress=address.clone().add(name).add(update.require(OP_ADDR));update.get(OP_ADDR).set(subsystemAddress);list.add(update);}if (configuredSubsystemTypes.size() == 0) {throw new XMLStreamException("Profile has no subsystem configurations",reader.getLocation());}} @AT@ 16368 @LENGTH@ 3385
---UPD ExpressionStatement@@MethodInvocation:profile.get(OP).set("add-profile") @TO@ MethodInvocation:profile.get(OP).set(ADD) @AT@ 19001 @LENGTH@ 35
------UPD MethodInvocation@@profile.get(OP).set("add-profile") @TO@ profile.get(OP).set(ADD) @AT@ 19001 @LENGTH@ 34
---------UPD SimpleName@@MethodName:set:["add-profile"] @TO@ MethodName:set:[ADD] @AT@ 19017 @LENGTH@ 18
------------DEL StringLiteral@@"add-profile" @AT@ 19021 @LENGTH@ 13
------------INS SimpleName@@ADD @TO@ SimpleName@@MethodName:set:["add-profile"] @AT@ 19307 @LENGTH@ 3
---UPD ExpressionStatement@@MethodInvocation:profile.get(OP_ADDR).set(address.clone().add(name)) @TO@ MethodInvocation:profile.get(OP_ADDR).set(address).add(PROFILE,name) @AT@ 19049 @LENGTH@ 52
------UPD MethodInvocation@@profile.get(OP_ADDR).set(address.clone().add(name)) @TO@ profile.get(OP_ADDR).set(address).add(PROFILE,name) @AT@ 19049 @LENGTH@ 51
---------DEL SimpleName@@MethodName:set:[address.clone().add(name)] @AT@ 19070 @LENGTH@ 30
------------DEL MethodInvocation@@address.clone().add(name) @AT@ 19074 @LENGTH@ 25
---------------DEL MethodInvocation@@MethodName:clone:[] @AT@ 19074 @LENGTH@ 15
---------MOV SimpleName@@MethodName:add:[name] @TO@ MethodInvocation@@profile.get(OP_ADDR).set(address.clone().add(name)) @AT@ 19090 @LENGTH@ 9
------------INS SimpleName@@PROFILE @TO@ SimpleName@@MethodName:add:[name] @AT@ 19363 @LENGTH@ 7
---------INS MethodInvocation@@MethodName:set:[address] @TO@ MethodInvocation@@profile.get(OP_ADDR).set(address.clone().add(name)) @AT@ 19325 @LENGTH@ 33
------------MOV SimpleName@@Name:address @TO@ MethodInvocation@@MethodName:set:[address] @AT@ 19074 @LENGTH@ 7
---UPD ExpressionStatement@@MethodInvocation:profile.get(REQUEST_PROPERTIES).set(profileIncludes) @TO@ MethodInvocation:profile.get(REQUEST_PROPERTIES,"includes").set(profileIncludes) @AT@ 19114 @LENGTH@ 53
------UPD MethodInvocation@@profile.get(REQUEST_PROPERTIES).set(profileIncludes) @TO@ profile.get(REQUEST_PROPERTIES,"includes").set(profileIncludes) @AT@ 19114 @LENGTH@ 52
---------UPD MethodInvocation@@MethodName:get:[REQUEST_PROPERTIES] @TO@ MethodName:get:[REQUEST_PROPERTIES, "includes"] @AT@ 19114 @LENGTH@ 31
------------INS StringLiteral@@"includes" @TO@ MethodInvocation@@MethodName:get:[REQUEST_PROPERTIES] @AT@ 19423 @LENGTH@ 10


UPD TryStatement@@try {  Class<?> serverControllerClass=serverModuleClassLoader.loadClass(NewServerController.class.getName());  Method shutdownMethod=serverControllerClass.getMethod("shutdown");  shutdownMethod.invoke(serviceContainer);  Method awaitTerminationMethod=serverControllerClass.getMethod("awaitTermination");  awaitTerminationMethod.invoke(serviceContainer);} catch (RuntimeException rte) {  throw rte;}catch (Exception ex) {  ex.printStackTrace();} @TO@ try {  Class<?> serverContainerClass=serverModuleClassLoader.loadClass(ServiceContainer.class.getName());  Method shutdownMethod=serverContainerClass.getMethod("shutdown");  shutdownMethod.invoke(serviceContainer);  Method awaitTerminationMethod=serverContainerClass.getMethod("awaitTermination");  awaitTerminationMethod.invoke(serviceContainer);} catch (RuntimeException rte) {  throw rte;}catch (Exception ex) {  ex.printStackTrace();} @AT@ 7762 @LENGTH@ 676
---UPD VariableDeclarationStatement@@Class<?> serverControllerClass=serverModuleClassLoader.loadClass(NewServerController.class.getName()); @TO@ Class<?> serverContainerClass=serverModuleClassLoader.loadClass(ServiceContainer.class.getName()); @AT@ 7792 @LENGTH@ 104
------UPD VariableDeclarationFragment@@serverControllerClass=serverModuleClassLoader.loadClass(NewServerController.class.getName()) @TO@ serverContainerClass=serverModuleClassLoader.loadClass(ServiceContainer.class.getName()) @AT@ 7801 @LENGTH@ 94
---------UPD SimpleName@@serverControllerClass @TO@ serverContainerClass @AT@ 7801 @LENGTH@ 21
---------UPD MethodInvocation@@serverModuleClassLoader.loadClass(NewServerController.class.getName()) @TO@ serverModuleClassLoader.loadClass(ServiceContainer.class.getName()) @AT@ 7825 @LENGTH@ 70
------------UPD SimpleName@@MethodName:loadClass:[NewServerController.class.getName()] @TO@ MethodName:loadClass:[ServiceContainer.class.getName()] @AT@ 7849 @LENGTH@ 46
---------------UPD MethodInvocation@@NewServerController.class.getName() @TO@ ServiceContainer.class.getName() @AT@ 7859 @LENGTH@ 35
------------------UPD TypeLiteral@@NewServerController.class @TO@ ServiceContainer.class @AT@ 7859 @LENGTH@ 25
---UPD VariableDeclarationStatement@@Method shutdownMethod=serverControllerClass.getMethod("shutdown"); @TO@ Method shutdownMethod=serverContainerClass.getMethod("shutdown"); @AT@ 7921 @LENGTH@ 68
------UPD VariableDeclarationFragment@@shutdownMethod=serverControllerClass.getMethod("shutdown") @TO@ shutdownMethod=serverContainerClass.getMethod("shutdown") @AT@ 7928 @LENGTH@ 60
---------UPD MethodInvocation@@serverControllerClass.getMethod("shutdown") @TO@ serverContainerClass.getMethod("shutdown") @AT@ 7945 @LENGTH@ 43
------------UPD SimpleName@@Name:serverControllerClass @TO@ Name:serverContainerClass @AT@ 7945 @LENGTH@ 21
---UPD VariableDeclarationStatement@@Method awaitTerminationMethod=serverControllerClass.getMethod("awaitTermination"); @TO@ Method awaitTerminationMethod=serverContainerClass.getMethod("awaitTermination"); @AT@ 8080 @LENGTH@ 84
------UPD VariableDeclarationFragment@@awaitTerminationMethod=serverControllerClass.getMethod("awaitTermination") @TO@ awaitTerminationMethod=serverContainerClass.getMethod("awaitTermination") @AT@ 8087 @LENGTH@ 76
---------UPD MethodInvocation@@serverControllerClass.getMethod("awaitTermination") @TO@ serverContainerClass.getMethod("awaitTermination") @AT@ 8112 @LENGTH@ 51
------------UPD SimpleName@@Name:serverControllerClass @TO@ Name:serverContainerClass @AT@ 8112 @LENGTH@ 21


INS MethodDeclaration@@int, MethodName:getInputStreamCount,  @TO@ TypeDeclaration@@[public]ExecutionContextBuilder,  @AT@ 1325 @LENGTH@ 22
---INS PrimitiveType@@int @TO@ MethodDeclaration@@int, MethodName:getInputStreamCount,  @AT@ 1321 @LENGTH@ 3
---INS SimpleName@@MethodName:getInputStreamCount @TO@ MethodDeclaration@@int, MethodName:getInputStreamCount,  @AT@ 1325 @LENGTH@ 19


UPD VariableDeclarationStatement@@final InjectionTarget targetDescription=new MethodInjectionTarget(methodName,methodInfo.declaringClass().name().toString(),methodInfo.args()[0].name().toString()); @TO@ final InjectionTarget targetDescription=new MethodInjectionTarget(methodInfo.declaringClass().name().toString(),methodName,methodInfo.args()[0].name().toString()); @AT@ 8399 @LENGTH@ 167
---UPD VariableDeclarationFragment@@targetDescription=new MethodInjectionTarget(methodName,methodInfo.declaringClass().name().toString(),methodInfo.args()[0].name().toString()) @TO@ targetDescription=new MethodInjectionTarget(methodInfo.declaringClass().name().toString(),methodName,methodInfo.args()[0].name().toString()) @AT@ 8421 @LENGTH@ 144
------UPD ClassInstanceCreation@@MethodInjectionTarget[methodName, methodInfo.declaringClass().name().toString(), methodInfo.args()[0].name().toString()] @TO@ MethodInjectionTarget[methodInfo.declaringClass().name().toString(), methodName, methodInfo.args()[0].name().toString()] @AT@ 8441 @LENGTH@ 124
---------DEL SimpleName@@methodName @AT@ 8467 @LENGTH@ 10
---------INS SimpleName@@methodName @TO@ ClassInstanceCreation@@MethodInjectionTarget[methodName, methodInfo.declaringClass().name().toString(), methodInfo.args()[0].name().toString()] @AT@ 8514 @LENGTH@ 10


UPD TryStatement@@try {  deploymentChain.processDeployment(deploymentUnitContext);} catch (DeploymentUnitProcessingException e) {  throw new RuntimeException("Failed to process deployment chain.",e);} @TO@ try {  deploymentChain.processDeployment(deploymentUnitContext);  serviceBuilder.install();  deploymentSubBatch.install();} catch (DeploymentUnitProcessingException e) {  throw new RuntimeException("Failed to process deployment chain.",e);} @AT@ 9984 @LENGTH@ 239
---MOV ExpressionStatement@@MethodInvocation:serviceBuilder.install() @TO@ TryStatement@@try {  deploymentChain.processDeployment(deploymentUnitContext);} catch (DeploymentUnitProcessingException e) {  throw new RuntimeException("Failed to process deployment chain.",e);} @AT@ 8808 @LENGTH@ 25
---INS ExpressionStatement@@MethodInvocation:deploymentSubBatch.install() @TO@ TryStatement@@try {  deploymentChain.processDeployment(deploymentUnitContext);} catch (DeploymentUnitProcessingException e) {  throw new RuntimeException("Failed to process deployment chain.",e);} @AT@ 10156 @LENGTH@ 29
------INS MethodInvocation@@deploymentSubBatch.install() @TO@ ExpressionStatement@@MethodInvocation:deploymentSubBatch.install() @AT@ 10156 @LENGTH@ 28
---------INS SimpleName@@Name:deploymentSubBatch @TO@ MethodInvocation@@deploymentSubBatch.install() @AT@ 10156 @LENGTH@ 18
---------INS SimpleName@@MethodName:install:[] @TO@ MethodInvocation@@deploymentSubBatch.install() @AT@ 10175 @LENGTH@ 9


UPD MethodDeclaration@@public, void, MethodName:handle, ParsingContext ctx, OperationFormatException,  @TO@ public, void, MethodName:handle, ParsingContext ctx, CommandFormatException,  @AT@ 1955 @LENGTH@ 216
---UPD SimpleType@@OperationFormatException @TO@ CommandFormatException @AT@ 2001 @LENGTH@ 24


UPD ExpressionStatement@@Assignment:tmp=new File(homeDir,"standalone") @TO@ Assignment:tmp=new File(homeDir,standalone ? "standalone" : "domain/servers/" + serverName) @AT@ 8675 @LENGTH@ 38
---UPD Assignment@@tmp=new File(homeDir,"standalone") @TO@ tmp=new File(homeDir,standalone ? "standalone" : "domain/servers/" + serverName) @AT@ 8675 @LENGTH@ 37
------UPD ClassInstanceCreation@@File[homeDir, "standalone"] @TO@ File[homeDir, standalone ? "standalone" : "domain/servers/" + serverName] @AT@ 8681 @LENGTH@ 31
---------INS ConditionalExpression@@standalone ? "standalone" : "domain/servers/" + serverName @TO@ ClassInstanceCreation@@File[homeDir, "standalone"] @AT@ 8699 @LENGTH@ 58
------------INS SimpleName@@standalone @TO@ ConditionalExpression@@standalone ? "standalone" : "domain/servers/" + serverName @AT@ 8699 @LENGTH@ 10
------------INS StringLiteral@@"standalone" @TO@ ConditionalExpression@@standalone ? "standalone" : "domain/servers/" + serverName @AT@ 8712 @LENGTH@ 12
------------INS InfixExpression@@"domain/servers/" + serverName @TO@ ConditionalExpression@@standalone ? "standalone" : "domain/servers/" + serverName @AT@ 8727 @LENGTH@ 30
---------------INS StringLiteral@@"domain/servers/" @TO@ InfixExpression@@"domain/servers/" + serverName @AT@ 8727 @LENGTH@ 17
---------------INS Operator@@+ @TO@ InfixExpression@@"domain/servers/" + serverName @AT@ 8744 @LENGTH@ 1
---------------INS SimpleName@@serverName @TO@ InfixExpression@@"domain/servers/" + serverName @AT@ 8747 @LENGTH@ 10
---------DEL StringLiteral@@"standalone" @AT@ 8699 @LENGTH@ 12


INS ExpressionStatement@@MethodInvocation:sessionBeanDescription.setDeploymentDescriptorEnvironment(new DeploymentDescriptorEnvironment("java:comp/env/",sessionBean)) @TO@ MethodDeclaration@@protected, void, MethodName:processBeanMetaData, SessionBeanMetaData sessionBean, DeploymentPhaseContext phaseContext, DeploymentUnitProcessingException,  @AT@ 5051 @LENGTH@ 126
---INS MethodInvocation@@sessionBeanDescription.setDeploymentDescriptorEnvironment(new DeploymentDescriptorEnvironment("java:comp/env/",sessionBean)) @TO@ ExpressionStatement@@MethodInvocation:sessionBeanDescription.setDeploymentDescriptorEnvironment(new DeploymentDescriptorEnvironment("java:comp/env/",sessionBean)) @AT@ 5051 @LENGTH@ 125
------INS SimpleName@@Name:sessionBeanDescription @TO@ MethodInvocation@@sessionBeanDescription.setDeploymentDescriptorEnvironment(new DeploymentDescriptorEnvironment("java:comp/env/",sessionBean)) @AT@ 5051 @LENGTH@ 22
------INS SimpleName@@MethodName:setDeploymentDescriptorEnvironment:[new DeploymentDescriptorEnvironment("java:comp/env/",sessionBean)] @TO@ MethodInvocation@@sessionBeanDescription.setDeploymentDescriptorEnvironment(new DeploymentDescriptorEnvironment("java:comp/env/",sessionBean)) @AT@ 5074 @LENGTH@ 102
---------INS ClassInstanceCreation@@DeploymentDescriptorEnvironment["java:comp/env/", sessionBean] @TO@ SimpleName@@MethodName:setDeploymentDescriptorEnvironment:[new DeploymentDescriptorEnvironment("java:comp/env/",sessionBean)] @AT@ 5109 @LENGTH@ 66
------------INS New@@new @TO@ ClassInstanceCreation@@DeploymentDescriptorEnvironment["java:comp/env/", sessionBean] @AT@ 5109 @LENGTH@ 3
------------INS SimpleType@@DeploymentDescriptorEnvironment @TO@ ClassInstanceCreation@@DeploymentDescriptorEnvironment["java:comp/env/", sessionBean] @AT@ 5113 @LENGTH@ 31
------------INS StringLiteral@@"java:comp/env/" @TO@ ClassInstanceCreation@@DeploymentDescriptorEnvironment["java:comp/env/", sessionBean] @AT@ 5145 @LENGTH@ 16
------------INS SimpleName@@sessionBean @TO@ ClassInstanceCreation@@DeploymentDescriptorEnvironment["java:comp/env/", sessionBean] @AT@ 5163 @LENGTH@ 11


UPD ReturnStatement@@MethodInvocation:o1.toString().equals(o2.toString()) @TO@ InfixExpression:o1 != null && o1.toString().equals(o2.toString()) @AT@ 7364 @LENGTH@ 43
---INS InfixExpression@@o1 != null && o1.toString().equals(o2.toString()) @TO@ ReturnStatement@@MethodInvocation:o1.toString().equals(o2.toString()) @AT@ 7385 @LENGTH@ 49
------MOV MethodInvocation@@o1.toString().equals(o2.toString()) @TO@ InfixExpression@@o1 != null && o1.toString().equals(o2.toString()) @AT@ 7371 @LENGTH@ 35
------INS InfixExpression@@o1 != null @TO@ InfixExpression@@o1 != null && o1.toString().equals(o2.toString()) @AT@ 7385 @LENGTH@ 10
---------INS SimpleName@@o1 @TO@ InfixExpression@@o1 != null @AT@ 7385 @LENGTH@ 2
---------INS Operator@@!= @TO@ InfixExpression@@o1 != null @AT@ 7387 @LENGTH@ 2
---------INS NullLiteral@@null @TO@ InfixExpression@@o1 != null @AT@ 7391 @LENGTH@ 4
------INS Operator@@&& @TO@ InfixExpression@@o1 != null && o1.toString().equals(o2.toString()) @AT@ 7395 @LENGTH@ 2


UPD TryStatement@@try {  final BatchBuilder builder=updateContext.getServiceTarget();  final AsyncHandlerService service=new AsyncHandlerService();  final ServiceBuilder<Handler> serviceBuilder=builder.addService(LogServices.handlerName(getName()),service);  final List<InjectedValue<Handler>> list=new ArrayList<InjectedValue<Handler>>();  for (  String handlerName : getSubhandlers()) {    final InjectedValue<Handler> injectedValue=new InjectedValue<Handler>();    serviceBuilder.addDependency(LogServices.handlerName(handlerName),Handler.class,injectedValue);    list.add(injectedValue);  }  service.addHandlers(list);  service.setQueueLength(queueLength);  service.setLevel(Level.parse(getLevelName()));  service.setOverflowAction(overflowAction);  serviceBuilder.setInitialMode(ServiceController.Mode.ACTIVE);  serviceBuilder.addListener(new UpdateResultHandler.ServiceStartListener<P>(resultHandler,param));  serviceBuilder.install();} catch (Throwable t) {  resultHandler.handleFailure(t,param);  return;} @TO@ try {  final ServiceTarget target=updateContext.getServiceTarget();  final AsyncHandlerService service=new AsyncHandlerService();  final ServiceBuilder<Handler> serviceBuilder=target.addService(LogServices.handlerName(getName()),service);  final List<InjectedValue<Handler>> list=new ArrayList<InjectedValue<Handler>>();  for (  String handlerName : getSubhandlers()) {    final InjectedValue<Handler> injectedValue=new InjectedValue<Handler>();    serviceBuilder.addDependency(LogServices.handlerName(handlerName),Handler.class,injectedValue);    list.add(injectedValue);  }  service.addHandlers(list);  service.setQueueLength(queueLength);  service.setLevel(Level.parse(getLevelName()));  service.setOverflowAction(overflowAction);  serviceBuilder.setInitialMode(ServiceController.Mode.ACTIVE);  serviceBuilder.addListener(new UpdateResultHandler.ServiceStartListener<P>(resultHandler,param));  serviceBuilder.install();} catch (Throwable t) {  resultHandler.handleFailure(t,param);  return;} @AT@ 2685 @LENGTH@ 1230
---UPD VariableDeclarationStatement@@final BatchBuilder builder=updateContext.getServiceTarget(); @TO@ final ServiceTarget target=updateContext.getServiceTarget(); @AT@ 2703 @LENGTH@ 62
------UPD SimpleType@@BatchBuilder @TO@ ServiceTarget @AT@ 2709 @LENGTH@ 12
------UPD VariableDeclarationFragment@@builder=updateContext.getServiceTarget() @TO@ target=updateContext.getServiceTarget() @AT@ 2722 @LENGTH@ 42
---------UPD SimpleName@@builder @TO@ target @AT@ 2722 @LENGTH@ 7
---UPD VariableDeclarationStatement@@final ServiceBuilder<Handler> serviceBuilder=builder.addService(LogServices.handlerName(getName()),service); @TO@ final ServiceBuilder<Handler> serviceBuilder=target.addService(LogServices.handlerName(getName()),service); @AT@ 2853 @LENGTH@ 111
------UPD VariableDeclarationFragment@@serviceBuilder=builder.addService(LogServices.handlerName(getName()),service) @TO@ serviceBuilder=target.addService(LogServices.handlerName(getName()),service) @AT@ 2883 @LENGTH@ 80
---------UPD MethodInvocation@@builder.addService(LogServices.handlerName(getName()),service) @TO@ target.addService(LogServices.handlerName(getName()),service) @AT@ 2900 @LENGTH@ 63
------------UPD SimpleName@@Name:builder @TO@ Name:target @AT@ 2900 @LENGTH@ 7


DEL ForStatement@@for (; ; ) {switch (reader.nextTag()) {case START_ELEMENT:{      readHeadComment(reader,address,list);      if (Namespace.forUri(reader.getNamespaceURI()) != Namespace.DOMAIN_1_0) {        throw unexpectedElement(reader);      }switch (Element.forName(reader.getLocalName())) {default :        throw unexpectedElement(reader);    }  }case END_ELEMENT:{  readTailComment(reader,address,list);  return;}default :throw new IllegalStateException();}} @AT@ 6858 @LENGTH@ 723
---DEL SwitchStatement@@switch (reader.nextTag()) {case START_ELEMENT:{    readHeadComment(reader,address,list);    if (Namespace.forUri(reader.getNamespaceURI()) != Namespace.DOMAIN_1_0) {      throw unexpectedElement(reader);    }switch (Element.forName(reader.getLocalName())) {default :      throw unexpectedElement(reader);  }}case END_ELEMENT:{readTailComment(reader,address,list);return;}default :throw new IllegalStateException();} @AT@ 6881 @LENGTH@ 690
------DEL MethodInvocation@@reader.nextTag() @AT@ 6889 @LENGTH@ 16
---------DEL SimpleName@@Name:reader @AT@ 6889 @LENGTH@ 6
---------DEL SimpleName@@MethodName:nextTag:[] @AT@ 6896 @LENGTH@ 9
------DEL SwitchCase@@case START_ELEMENT: @AT@ 6925 @LENGTH@ 19
---------DEL SimpleName@@START_ELEMENT @AT@ 6930 @LENGTH@ 13
------DEL ExpressionStatement@@MethodInvocation:readHeadComment(reader,address,list) @AT@ 6967 @LENGTH@ 39
---------DEL MethodInvocation@@readHeadComment(reader,address,list) @AT@ 6967 @LENGTH@ 38
------------DEL SimpleName@@MethodName:readHeadComment:[reader, address, list] @AT@ 6967 @LENGTH@ 38
---------------DEL SimpleName@@reader @AT@ 6983 @LENGTH@ 6
---------------DEL SimpleName@@address @AT@ 6991 @LENGTH@ 7
---------------DEL SimpleName@@list @AT@ 7000 @LENGTH@ 4
------DEL IfStatement@@if (Namespace.forUri(reader.getNamespaceURI()) != Namespace.DOMAIN_1_0) {  throw unexpectedElement(reader);} @AT@ 7027 @LENGTH@ 152
---------DEL InfixExpression@@Namespace.forUri(reader.getNamespaceURI()) != Namespace.DOMAIN_1_0 @AT@ 7031 @LENGTH@ 66
------------DEL MethodInvocation@@Namespace.forUri(reader.getNamespaceURI()) @AT@ 7031 @LENGTH@ 42
---------------DEL SimpleName@@Name:Namespace @AT@ 7031 @LENGTH@ 9
---------------DEL SimpleName@@MethodName:forUri:[reader.getNamespaceURI()] @AT@ 7041 @LENGTH@ 32
------------------DEL MethodInvocation@@reader.getNamespaceURI() @AT@ 7048 @LENGTH@ 24
---------------------DEL SimpleName@@Name:reader @AT@ 7048 @LENGTH@ 6
---------------------DEL SimpleName@@MethodName:getNamespaceURI:[] @AT@ 7055 @LENGTH@ 17
------------DEL Operator@@!= @AT@ 7073 @LENGTH@ 2
------------DEL QualifiedName@@Namespace.DOMAIN_1_0 @AT@ 7077 @LENGTH@ 20
---------------DEL SimpleName@@Namespace @AT@ 7077 @LENGTH@ 9
---------------DEL SimpleName@@DOMAIN_1_0 @AT@ 7087 @LENGTH@ 10
---------DEL Block@@ThenBody:{  throw unexpectedElement(reader);} @AT@ 7099 @LENGTH@ 80
------------DEL ThrowStatement@@MethodInvocation:unexpectedElement(reader) @AT@ 7125 @LENGTH@ 32
---------------DEL MethodInvocation@@unexpectedElement(reader) @AT@ 7131 @LENGTH@ 25
------------------DEL SimpleName@@MethodName:unexpectedElement:[reader] @AT@ 7131 @LENGTH@ 25
---------------------DEL SimpleName@@reader @AT@ 7149 @LENGTH@ 6
------DEL SwitchStatement@@switch (Element.forName(reader.getLocalName())) {default :  throw unexpectedElement(reader);} @AT@ 7200 @LENGTH@ 137
---------DEL MethodInvocation@@Element.forName(reader.getLocalName()) @AT@ 7208 @LENGTH@ 38
------------DEL SimpleName@@Name:Element @AT@ 7208 @LENGTH@ 7
------------DEL SimpleName@@MethodName:forName:[reader.getLocalName()] @AT@ 7216 @LENGTH@ 30
---------------DEL MethodInvocation@@reader.getLocalName() @AT@ 7224 @LENGTH@ 21
------------------DEL SimpleName@@Name:reader @AT@ 7224 @LENGTH@ 6
------------------DEL SimpleName@@MethodName:getLocalName:[] @AT@ 7231 @LENGTH@ 14
---------DEL SwitchCase@@default @AT@ 7274 @LENGTH@ 8
---------DEL ThrowStatement@@MethodInvocation:unexpectedElement(reader) @AT@ 7283 @LENGTH@ 32
------------DEL MethodInvocation@@unexpectedElement(reader) @AT@ 7289 @LENGTH@ 25
---------------DEL SimpleName@@MethodName:unexpectedElement:[reader] @AT@ 7289 @LENGTH@ 25
------------------DEL SimpleName@@reader @AT@ 7307 @LENGTH@ 6
------DEL SwitchCase@@case END_ELEMENT: @AT@ 7372 @LENGTH@ 17
---------DEL SimpleName@@END_ELEMENT @AT@ 7377 @LENGTH@ 11
------DEL ExpressionStatement@@MethodInvocation:readTailComment(reader,address,list) @AT@ 7412 @LENGTH@ 39
---------DEL MethodInvocation@@readTailComment(reader,address,list) @AT@ 7412 @LENGTH@ 38
------------DEL SimpleName@@MethodName:readTailComment:[reader, address, list] @AT@ 7412 @LENGTH@ 38
---------------DEL SimpleName@@reader @AT@ 7428 @LENGTH@ 6
---------------DEL SimpleName@@address @AT@ 7436 @LENGTH@ 7
---------------DEL SimpleName@@list @AT@ 7445 @LENGTH@ 4
------DEL ReturnStatement@@ @AT@ 7472 @LENGTH@ 7
------DEL SwitchCase@@default @AT@ 7514 @LENGTH@ 8
------DEL ThrowStatement@@ClassInstanceCreation:new IllegalStateException() @AT@ 7523 @LENGTH@ 34
---------DEL ClassInstanceCreation@@IllegalStateException[] @AT@ 7529 @LENGTH@ 27
------------DEL New@@new @AT@ 7529 @LENGTH@ 3
------------DEL SimpleType@@IllegalStateException @AT@ 7533 @LENGTH@ 21


UPD SwitchStatement@@switch (attribute) {case NAME:{    name=value;    binding.get(OP_ADDR).set(address).add(SOCKET_BINDING,name);    break;  }case INTERFACE:{  if (!interfaces.contains(value)) {    throw new XMLStreamException("Unknown interface " + value + " "+ attribute.getLocalName()+ " must be declared in element "+ Element.INTERFACES.getLocalName(),reader.getLocation());  }  binding.get(INTERFACE).set(value);  break;}case PORT:{binding.get(PORT).set(parseBoundedIntegerAttribute(reader,i,0,65535));break;}case FIXED_PORT:{binding.get(FIXED_PORT).set(Boolean.parseBoolean(value));break;}case MULTICAST_ADDRESS:{try {final InetAddress mcastAddr=InetAddress.getByName(value);if (!mcastAddr.isMulticastAddress()) {throw new XMLStreamException("Value " + value + " for attribute "+ attribute.getLocalName()+ " is not a valid multicast address",reader.getLocation());}binding.get(MULTICAST_ADDRESS).set(value);break;} catch (final UnknownHostException e) {throw new XMLStreamException("Value " + value + " for attribute "+ attribute.getLocalName()+ " is not a valid multicast address",reader.getLocation(),e);}}case MULTICAST_PORT:{binding.get(MULTICAST_PORT).set(parseBoundedIntegerAttribute(reader,i,1,65535));break;}default :throw unexpectedAttribute(reader,i);} @TO@ switch (attribute) {case NAME:{    name=value;    binding.get(OP_ADDR).set(address).add(SOCKET_BINDING,name);    break;  }case INTERFACE:{  if (!interfaces.contains(value)) {    throw new XMLStreamException("Unknown interface " + value + " "+ attribute.getLocalName()+ " must be declared in element "+ Element.INTERFACES.getLocalName(),reader.getLocation());  }  binding.get(INTERFACE).set(value);  break;}case PORT:{binding.get(PORT).set(parseBoundedIntegerAttribute(reader,i,0,65535));break;}case FIXED_PORT:{binding.get(FIXED_PORT).set(Boolean.parseBoolean(value));break;}case MULTICAST_ADDRESS:{try {final InetAddress mcastAddr=InetAddress.getByName(value);if (!mcastAddr.isMulticastAddress()) {throw new XMLStreamException("Value " + value + " for attribute "+ attribute.getLocalName()+ " is not a valid multicast address",reader.getLocation());}binding.get(MULTICAST_ADDRESS).set(value);break;} catch (final UnknownHostException e) {throw new XMLStreamException("Value " + value + " for attribute "+ attribute.getLocalName()+ " is not a valid multicast address",reader.getLocation(),e);}break;}case MULTICAST_PORT:{binding.get(MULTICAST_PORT).set(parseBoundedIntegerAttribute(reader,i,1,65535));required.remove(Attribute.PORT);break;}default :throw unexpectedAttribute(reader,i);} @AT@ 82577 @LENGTH@ 2426
---INS BreakStatement@@ @TO@ SwitchStatement@@switch (attribute) {case NAME:{    name=value;    binding.get(OP_ADDR).set(address).add(SOCKET_BINDING,name);    break;  }case INTERFACE:{  if (!interfaces.contains(value)) {    throw new XMLStreamException("Unknown interface " + value + " "+ attribute.getLocalName()+ " must be declared in element "+ Element.INTERFACES.getLocalName(),reader.getLocation());  }  binding.get(INTERFACE).set(value);  break;}case PORT:{binding.get(PORT).set(parseBoundedIntegerAttribute(reader,i,0,65535));break;}case FIXED_PORT:{binding.get(FIXED_PORT).set(Boolean.parseBoolean(value));break;}case MULTICAST_ADDRESS:{try {final InetAddress mcastAddr=InetAddress.getByName(value);if (!mcastAddr.isMulticastAddress()) {throw new XMLStreamException("Value " + value + " for attribute "+ attribute.getLocalName()+ " is not a valid multicast address",reader.getLocation());}binding.get(MULTICAST_ADDRESS).set(value);break;} catch (final UnknownHostException e) {throw new XMLStreamException("Value " + value + " for attribute "+ attribute.getLocalName()+ " is not a valid multicast address",reader.getLocation(),e);}}case MULTICAST_PORT:{binding.get(MULTICAST_PORT).set(parseBoundedIntegerAttribute(reader,i,1,65535));break;}default :throw unexpectedAttribute(reader,i);} @AT@ 84693 @LENGTH@ 6
---INS ExpressionStatement@@MethodInvocation:required.remove(Attribute.PORT) @TO@ SwitchStatement@@switch (attribute) {case NAME:{    name=value;    binding.get(OP_ADDR).set(address).add(SOCKET_BINDING,name);    break;  }case INTERFACE:{  if (!interfaces.contains(value)) {    throw new XMLStreamException("Unknown interface " + value + " "+ attribute.getLocalName()+ " must be declared in element "+ Element.INTERFACES.getLocalName(),reader.getLocation());  }  binding.get(INTERFACE).set(value);  break;}case PORT:{binding.get(PORT).set(parseBoundedIntegerAttribute(reader,i,0,65535));break;}case FIXED_PORT:{binding.get(FIXED_PORT).set(Boolean.parseBoolean(value));break;}case MULTICAST_ADDRESS:{try {final InetAddress mcastAddr=InetAddress.getByName(value);if (!mcastAddr.isMulticastAddress()) {throw new XMLStreamException("Value " + value + " for attribute "+ attribute.getLocalName()+ " is not a valid multicast address",reader.getLocation());}binding.get(MULTICAST_ADDRESS).set(value);break;} catch (final UnknownHostException e) {throw new XMLStreamException("Value " + value + " for attribute "+ attribute.getLocalName()+ " is not a valid multicast address",reader.getLocation(),e);}}case MULTICAST_PORT:{binding.get(MULTICAST_PORT).set(parseBoundedIntegerAttribute(reader,i,1,65535));break;}default :throw unexpectedAttribute(reader,i);} @AT@ 84897 @LENGTH@ 32
------INS MethodInvocation@@required.remove(Attribute.PORT) @TO@ ExpressionStatement@@MethodInvocation:required.remove(Attribute.PORT) @AT@ 84897 @LENGTH@ 31
---------INS SimpleName@@Name:required @TO@ MethodInvocation@@required.remove(Attribute.PORT) @AT@ 84897 @LENGTH@ 8
---------INS SimpleName@@MethodName:remove:[Attribute.PORT] @TO@ MethodInvocation@@required.remove(Attribute.PORT) @AT@ 84906 @LENGTH@ 22
------------INS QualifiedName@@Attribute.PORT @TO@ SimpleName@@MethodName:remove:[Attribute.PORT] @AT@ 84913 @LENGTH@ 14
---------------INS SimpleName@@Attribute @TO@ QualifiedName@@Attribute.PORT @AT@ 84913 @LENGTH@ 9
---------------INS SimpleName@@PORT @TO@ QualifiedName@@Attribute.PORT @AT@ 84923 @LENGTH@ 4


UPD ExpressionStatement@@MethodInvocation:assertEquals("Could not find 1 processors: " + s,1,s.size()) @TO@ MethodInvocation:assertEquals("Could not find 1 processors: " + s,2,s.size()) @AT@ 3983 @LENGTH@ 63
---UPD MethodInvocation@@assertEquals("Could not find 1 processors: " + s,1,s.size()) @TO@ assertEquals("Could not find 1 processors: " + s,2,s.size()) @AT@ 3983 @LENGTH@ 62
------UPD SimpleName@@MethodName:assertEquals:["Could not find 1 processors: " + s, 1, s.size()] @TO@ MethodName:assertEquals:["Could not find 1 processors: " + s, 2, s.size()] @AT@ 3983 @LENGTH@ 62
---------UPD NumberLiteral@@1 @TO@ 2 @AT@ 4033 @LENGTH@ 1


INS MethodDeclaration@@List<Person>, MethodName:findBySex, Sex sex,  @TO@ TypeDeclaration@@[public]PersonRepository, [MongoRepository<Person,String>, QueryDslPredicateExecutor<Person>] @AT@ 3504 @LENGTH@ 19
---INS ParameterizedType@@List<Person> @TO@ MethodDeclaration@@List<Person>, MethodName:findBySex, Sex sex,  @AT@ 3491 @LENGTH@ 12
------INS SimpleType@@List @TO@ ParameterizedType@@List<Person> @AT@ 3491 @LENGTH@ 4
------INS SimpleType@@Person @TO@ ParameterizedType@@List<Person> @AT@ 3496 @LENGTH@ 6
---INS SimpleName@@MethodName:findBySex @TO@ MethodDeclaration@@List<Person>, MethodName:findBySex, Sex sex,  @AT@ 3504 @LENGTH@ 9
---INS SingleVariableDeclaration@@Sex sex @TO@ MethodDeclaration@@List<Person>, MethodName:findBySex, Sex sex,  @AT@ 3514 @LENGTH@ 7
------INS SimpleType@@Sex @TO@ SingleVariableDeclaration@@Sex sex @AT@ 3514 @LENGTH@ 3
------INS SimpleName@@sex @TO@ SingleVariableDeclaration@@Sex sex @AT@ 3518 @LENGTH@ 3


UPD VariableDeclarationStatement@@boolean slave=!host.get(DOMAIN_CONTROLLER,LOCAL).isDefined(); @TO@ boolean slave=!(host.get(DOMAIN_CONTROLLER).hasDefined(LOCAL)); @AT@ 13591 @LENGTH@ 64
---UPD VariableDeclarationFragment@@slave=!host.get(DOMAIN_CONTROLLER,LOCAL).isDefined() @TO@ slave=!(host.get(DOMAIN_CONTROLLER).hasDefined(LOCAL)) @AT@ 13599 @LENGTH@ 55
------UPD PrefixExpression@@!host.get(DOMAIN_CONTROLLER,LOCAL).isDefined() @TO@ !(host.get(DOMAIN_CONTROLLER).hasDefined(LOCAL)) @AT@ 13607 @LENGTH@ 47
---------INS ParenthesizedExpression@@(host.get(DOMAIN_CONTROLLER).hasDefined(LOCAL)) @TO@ PrefixExpression@@!host.get(DOMAIN_CONTROLLER,LOCAL).isDefined() @AT@ 13608 @LENGTH@ 47
------------INS MethodInvocation@@host.get(DOMAIN_CONTROLLER).hasDefined(LOCAL) @TO@ ParenthesizedExpression@@(host.get(DOMAIN_CONTROLLER).hasDefined(LOCAL)) @AT@ 13609 @LENGTH@ 45
---------------MOV MethodInvocation@@MethodName:get:[DOMAIN_CONTROLLER, LOCAL] @TO@ MethodInvocation@@host.get(DOMAIN_CONTROLLER).hasDefined(LOCAL) @AT@ 13608 @LENGTH@ 34
------------------DEL SimpleName@@LOCAL @AT@ 13636 @LENGTH@ 5
---------------MOV SimpleName@@Name:host @TO@ MethodInvocation@@host.get(DOMAIN_CONTROLLER).hasDefined(LOCAL) @AT@ 13608 @LENGTH@ 4
---------------MOV SimpleName@@MethodName:isDefined:[] @TO@ MethodInvocation@@host.get(DOMAIN_CONTROLLER).hasDefined(LOCAL) @AT@ 13643 @LENGTH@ 11
------------------INS SimpleName@@LOCAL @TO@ SimpleName@@MethodName:isDefined:[] @AT@ 13648 @LENGTH@ 5
---------DEL MethodInvocation@@host.get(DOMAIN_CONTROLLER,LOCAL).isDefined() @AT@ 13608 @LENGTH@ 46


UPD FieldDeclaration@@final, private, AtomicReference<Serializable>, [sessionIdReference] @TO@ private, final, AtomicReference<Serializable>, [sessionIdReference] @AT@ 2175 @LENGTH@ 63
---INS Modifier@@private @TO@ FieldDeclaration@@final, private, AtomicReference<Serializable>, [sessionIdReference] @AT@ 2175 @LENGTH@ 7
---DEL Modifier@@private @AT@ 2181 @LENGTH@ 7


INS ExpressionStatement@@MethodInvocation:hzlqComponent.createEndpoint("hazelcast:seda: ?concurrentConsumers=4") @TO@ MethodDeclaration@@public, void, MethodName:createEndpointWithoutEmptyName, Exception,  @AT@ 3228 @LENGTH@ 71
---MOV MethodInvocation@@hzlqComponent.createEndpoint("hazelcast:seda: ?concurrentConsumers=4") @TO@ ExpressionStatement@@MethodInvocation:hzlqComponent.createEndpoint("hazelcast:seda: ?concurrentConsumers=4") @AT@ 3295 @LENGTH@ 70


UPD FieldDeclaration@@private, final, String[], [collectionsToDrop=new String[]{"person","personmapproperty","personpojo","personcustomidname","person1","person2","account"}] @TO@ private, final, String[], [collectionsToDrop=new String[]{"foobar","person","personmapproperty","personpojo","personcustomidname","person1","person2","account"}] @AT@ 1573 @LENGTH@ 180
---UPD VariableDeclarationFragment@@collectionsToDrop=new String[]{"person","personmapproperty","personpojo","personcustomidname","person1","person2","account"} @TO@ collectionsToDrop=new String[]{"foobar","person","personmapproperty","personpojo","personcustomidname","person1","person2","account"} @AT@ 1596 @LENGTH@ 156
------UPD ArrayCreation@@new String[]{"person","personmapproperty","personpojo","personcustomidname","person1","person2","account"} @TO@ new String[]{"foobar","person","personmapproperty","personpojo","personcustomidname","person1","person2","account"} @AT@ 1616 @LENGTH@ 136
---------UPD ArrayInitializer@@{"person","personmapproperty","personpojo","personcustomidname","person1","person2","account"} @TO@ {"foobar","person","personmapproperty","personpojo","personcustomidname","person1","person2","account"} @AT@ 1628 @LENGTH@ 124
------------INS StringLiteral@@"foobar" @TO@ ArrayInitializer@@{"person","personmapproperty","personpojo","personcustomidname","person1","person2","account"} @AT@ 1851 @LENGTH@ 8


INS MethodDeclaration@@public, void, MethodName:testTest, Exception,  @TO@ TypeDeclaration@@[public]AddressOnlyParsingTestCase, TestCase @AT@ 23499 @LENGTH@ 717
---INS Modifier@@public @TO@ MethodDeclaration@@public, void, MethodName:testTest, Exception,  @AT@ 23499 @LENGTH@ 6
---INS PrimitiveType@@void @TO@ MethodDeclaration@@public, void, MethodName:testTest, Exception,  @AT@ 23506 @LENGTH@ 4
---INS SimpleName@@MethodName:testTest @TO@ MethodDeclaration@@public, void, MethodName:testTest, Exception,  @AT@ 23511 @LENGTH@ 8
---INS SimpleType@@Exception @TO@ MethodDeclaration@@public, void, MethodName:testTest, Exception,  @AT@ 23529 @LENGTH@ 9
---INS VariableDeclarationStatement@@DefaultOperationCallbackHandler handler=new DefaultOperationCallbackHandler(); @TO@ MethodDeclaration@@public, void, MethodName:testTest, Exception,  @AT@ 23550 @LENGTH@ 80
------INS SimpleType@@DefaultOperationCallbackHandler @TO@ VariableDeclarationStatement@@DefaultOperationCallbackHandler handler=new DefaultOperationCallbackHandler(); @AT@ 23550 @LENGTH@ 31
------INS VariableDeclarationFragment@@handler=new DefaultOperationCallbackHandler() @TO@ VariableDeclarationStatement@@DefaultOperationCallbackHandler handler=new DefaultOperationCallbackHandler(); @AT@ 23582 @LENGTH@ 47
---------INS SimpleName@@handler @TO@ VariableDeclarationFragment@@handler=new DefaultOperationCallbackHandler() @AT@ 23582 @LENGTH@ 7
---------INS ClassInstanceCreation@@DefaultOperationCallbackHandler[] @TO@ VariableDeclarationFragment@@handler=new DefaultOperationCallbackHandler() @AT@ 23592 @LENGTH@ 37
------------INS New@@new @TO@ ClassInstanceCreation@@DefaultOperationCallbackHandler[] @AT@ 23592 @LENGTH@ 3
------------INS SimpleType@@DefaultOperationCallbackHandler @TO@ ClassInstanceCreation@@DefaultOperationCallbackHandler[] @AT@ 23596 @LENGTH@ 31
---INS ExpressionStatement@@MethodInvocation:parser.parse("/subsystem=datasources/data-source=java\\:\\/H2DS",handler) @TO@ MethodDeclaration@@public, void, MethodName:testTest, Exception,  @AT@ 23640 @LENGTH@ 75
------INS MethodInvocation@@parser.parse("/subsystem=datasources/data-source=java\\:\\/H2DS",handler) @TO@ ExpressionStatement@@MethodInvocation:parser.parse("/subsystem=datasources/data-source=java\\:\\/H2DS",handler) @AT@ 23640 @LENGTH@ 74
---------INS SimpleName@@Name:parser @TO@ MethodInvocation@@parser.parse("/subsystem=datasources/data-source=java\\:\\/H2DS",handler) @AT@ 23640 @LENGTH@ 6
---------INS SimpleName@@MethodName:parse:["/subsystem=datasources/data-source=java\\:\\/H2DS", handler] @TO@ MethodInvocation@@parser.parse("/subsystem=datasources/data-source=java\\:\\/H2DS",handler) @AT@ 23647 @LENGTH@ 67
------------INS StringLiteral@@"/subsystem=datasources/data-source=java\\:\\/H2DS" @TO@ SimpleName@@MethodName:parse:["/subsystem=datasources/data-source=java\\:\\/H2DS", handler] @AT@ 23653 @LENGTH@ 51
------------INS SimpleName@@handler @TO@ SimpleName@@MethodName:parse:["/subsystem=datasources/data-source=java\\:\\/H2DS", handler] @AT@ 23706 @LENGTH@ 7
---INS VariableDeclarationStatement@@OperationRequestAddress address=handler.getAddress(); @TO@ MethodDeclaration@@public, void, MethodName:testTest, Exception,  @AT@ 23725 @LENGTH@ 55
------INS SimpleType@@OperationRequestAddress @TO@ VariableDeclarationStatement@@OperationRequestAddress address=handler.getAddress(); @AT@ 23725 @LENGTH@ 23
------INS VariableDeclarationFragment@@address=handler.getAddress() @TO@ VariableDeclarationStatement@@OperationRequestAddress address=handler.getAddress(); @AT@ 23749 @LENGTH@ 30
---------INS SimpleName@@address @TO@ VariableDeclarationFragment@@address=handler.getAddress() @AT@ 23749 @LENGTH@ 7
---------INS MethodInvocation@@handler.getAddress() @TO@ VariableDeclarationFragment@@address=handler.getAddress() @AT@ 23759 @LENGTH@ 20
------------INS SimpleName@@Name:handler @TO@ MethodInvocation@@handler.getAddress() @AT@ 23759 @LENGTH@ 7
------------INS SimpleName@@MethodName:getAddress:[] @TO@ MethodInvocation@@handler.getAddress() @AT@ 23767 @LENGTH@ 12
---INS ExpressionStatement@@MethodInvocation:assertNotNull(address) @TO@ MethodDeclaration@@public, void, MethodName:testTest, Exception,  @AT@ 23789 @LENGTH@ 23
------INS MethodInvocation@@assertNotNull(address) @TO@ ExpressionStatement@@MethodInvocation:assertNotNull(address) @AT@ 23789 @LENGTH@ 22
---------INS SimpleName@@MethodName:assertNotNull:[address] @TO@ MethodInvocation@@assertNotNull(address) @AT@ 23789 @LENGTH@ 22
------------INS SimpleName@@address @TO@ SimpleName@@MethodName:assertNotNull:[address] @AT@ 23803 @LENGTH@ 7
---INS VariableDeclarationStatement@@Iterator<Node> nodes=address.iterator(); @TO@ MethodDeclaration@@public, void, MethodName:testTest, Exception,  @AT@ 23821 @LENGTH@ 42
------INS ParameterizedType@@Iterator<Node> @TO@ VariableDeclarationStatement@@Iterator<Node> nodes=address.iterator(); @AT@ 23821 @LENGTH@ 14
---------INS SimpleType@@Iterator @TO@ ParameterizedType@@Iterator<Node> @AT@ 23821 @LENGTH@ 8
---------INS SimpleType@@Node @TO@ ParameterizedType@@Iterator<Node> @AT@ 23830 @LENGTH@ 4
------INS VariableDeclarationFragment@@nodes=address.iterator() @TO@ VariableDeclarationStatement@@Iterator<Node> nodes=address.iterator(); @AT@ 23836 @LENGTH@ 26
---------INS SimpleName@@nodes @TO@ VariableDeclarationFragment@@nodes=address.iterator() @AT@ 23836 @LENGTH@ 5
---------INS MethodInvocation@@address.iterator() @TO@ VariableDeclarationFragment@@nodes=address.iterator() @AT@ 23844 @LENGTH@ 18
------------INS SimpleName@@Name:address @TO@ MethodInvocation@@address.iterator() @AT@ 23844 @LENGTH@ 7
------------INS SimpleName@@MethodName:iterator:[] @TO@ MethodInvocation@@address.iterator() @AT@ 23852 @LENGTH@ 10
---INS ExpressionStatement@@MethodInvocation:assertTrue(nodes.hasNext()) @TO@ MethodDeclaration@@public, void, MethodName:testTest, Exception,  @AT@ 23872 @LENGTH@ 28
------INS MethodInvocation@@assertTrue(nodes.hasNext()) @TO@ ExpressionStatement@@MethodInvocation:assertTrue(nodes.hasNext()) @AT@ 23872 @LENGTH@ 27
---------INS SimpleName@@MethodName:assertTrue:[nodes.hasNext()] @TO@ MethodInvocation@@assertTrue(nodes.hasNext()) @AT@ 23872 @LENGTH@ 27
------------INS MethodInvocation@@nodes.hasNext() @TO@ SimpleName@@MethodName:assertTrue:[nodes.hasNext()] @AT@ 23883 @LENGTH@ 15
---------------INS SimpleName@@Name:nodes @TO@ MethodInvocation@@nodes.hasNext() @AT@ 23883 @LENGTH@ 5
---------------INS SimpleName@@MethodName:hasNext:[] @TO@ MethodInvocation@@nodes.hasNext() @AT@ 23889 @LENGTH@ 9
---INS VariableDeclarationStatement@@Node node=nodes.next(); @TO@ MethodDeclaration@@public, void, MethodName:testTest, Exception,  @AT@ 23909 @LENGTH@ 25
------INS SimpleType@@Node @TO@ VariableDeclarationStatement@@Node node=nodes.next(); @AT@ 23909 @LENGTH@ 4
------INS VariableDeclarationFragment@@node=nodes.next() @TO@ VariableDeclarationStatement@@Node node=nodes.next(); @AT@ 23914 @LENGTH@ 19
---------INS SimpleName@@node @TO@ VariableDeclarationFragment@@node=nodes.next() @AT@ 23914 @LENGTH@ 4
---------INS MethodInvocation@@nodes.next() @TO@ VariableDeclarationFragment@@node=nodes.next() @AT@ 23921 @LENGTH@ 12
------------INS SimpleName@@Name:nodes @TO@ MethodInvocation@@nodes.next() @AT@ 23921 @LENGTH@ 5
------------INS SimpleName@@MethodName:next:[] @TO@ MethodInvocation@@nodes.next() @AT@ 23927 @LENGTH@ 6
---INS ExpressionStatement@@MethodInvocation:assertEquals("subsystem",node.getType()) @TO@ MethodDeclaration@@public, void, MethodName:testTest, Exception,  @AT@ 23943 @LENGTH@ 42
------INS MethodInvocation@@assertEquals("subsystem",node.getType()) @TO@ ExpressionStatement@@MethodInvocation:assertEquals("subsystem",node.getType()) @AT@ 23943 @LENGTH@ 41
---------INS SimpleName@@MethodName:assertEquals:["subsystem", node.getType()] @TO@ MethodInvocation@@assertEquals("subsystem",node.getType()) @AT@ 23943 @LENGTH@ 41
------------INS StringLiteral@@"subsystem" @TO@ SimpleName@@MethodName:assertEquals:["subsystem", node.getType()] @AT@ 23956 @LENGTH@ 11
------------INS MethodInvocation@@node.getType() @TO@ SimpleName@@MethodName:assertEquals:["subsystem", node.getType()] @AT@ 23969 @LENGTH@ 14
---------------INS SimpleName@@Name:node @TO@ MethodInvocation@@node.getType() @AT@ 23969 @LENGTH@ 4
---------------INS SimpleName@@MethodName:getType:[] @TO@ MethodInvocation@@node.getType() @AT@ 23974 @LENGTH@ 9
---INS ExpressionStatement@@MethodInvocation:assertEquals("datasources",node.getName()) @TO@ MethodDeclaration@@public, void, MethodName:testTest, Exception,  @AT@ 23994 @LENGTH@ 44
------INS MethodInvocation@@assertEquals("datasources",node.getName()) @TO@ ExpressionStatement@@MethodInvocation:assertEquals("datasources",node.getName()) @AT@ 23994 @LENGTH@ 43
---------INS SimpleName@@MethodName:assertEquals:["datasources", node.getName()] @TO@ MethodInvocation@@assertEquals("datasources",node.getName()) @AT@ 23994 @LENGTH@ 43
------------INS StringLiteral@@"datasources" @TO@ SimpleName@@MethodName:assertEquals:["datasources", node.getName()] @AT@ 24007 @LENGTH@ 13
------------INS MethodInvocation@@node.getName() @TO@ SimpleName@@MethodName:assertEquals:["datasources", node.getName()] @AT@ 24022 @LENGTH@ 14
---------------INS SimpleName@@Name:node @TO@ MethodInvocation@@node.getName() @AT@ 24022 @LENGTH@ 4
---------------INS SimpleName@@MethodName:getName:[] @TO@ MethodInvocation@@node.getName() @AT@ 24027 @LENGTH@ 9
---INS ExpressionStatement@@MethodInvocation:assertTrue(nodes.hasNext()) @TO@ MethodDeclaration@@public, void, MethodName:testTest, Exception,  @AT@ 24048 @LENGTH@ 28
------INS MethodInvocation@@assertTrue(nodes.hasNext()) @TO@ ExpressionStatement@@MethodInvocation:assertTrue(nodes.hasNext()) @AT@ 24048 @LENGTH@ 27
---------INS SimpleName@@MethodName:assertTrue:[nodes.hasNext()] @TO@ MethodInvocation@@assertTrue(nodes.hasNext()) @AT@ 24048 @LENGTH@ 27
------------INS MethodInvocation@@nodes.hasNext() @TO@ SimpleName@@MethodName:assertTrue:[nodes.hasNext()] @AT@ 24059 @LENGTH@ 15
---------------INS SimpleName@@Name:nodes @TO@ MethodInvocation@@nodes.hasNext() @AT@ 24059 @LENGTH@ 5
---------------INS SimpleName@@MethodName:hasNext:[] @TO@ MethodInvocation@@nodes.hasNext() @AT@ 24065 @LENGTH@ 9
---INS ExpressionStatement@@Assignment:node=nodes.next() @TO@ MethodDeclaration@@public, void, MethodName:testTest, Exception,  @AT@ 24085 @LENGTH@ 20
------INS Assignment@@node=nodes.next() @TO@ ExpressionStatement@@Assignment:node=nodes.next() @AT@ 24085 @LENGTH@ 19
---------INS SimpleName@@node @TO@ Assignment@@node=nodes.next() @AT@ 24085 @LENGTH@ 4
---------INS Operator@@= @TO@ Assignment@@node=nodes.next() @AT@ 24089 @LENGTH@ 1
---------INS MethodInvocation@@nodes.next() @TO@ Assignment@@node=nodes.next() @AT@ 24092 @LENGTH@ 12
------------INS SimpleName@@Name:nodes @TO@ MethodInvocation@@nodes.next() @AT@ 24092 @LENGTH@ 5
------------INS SimpleName@@MethodName:next:[] @TO@ MethodInvocation@@nodes.next() @AT@ 24098 @LENGTH@ 6
---INS ExpressionStatement@@MethodInvocation:assertEquals("data-source",node.getType()) @TO@ MethodDeclaration@@public, void, MethodName:testTest, Exception,  @AT@ 24114 @LENGTH@ 44
------INS MethodInvocation@@assertEquals("data-source",node.getType()) @TO@ ExpressionStatement@@MethodInvocation:assertEquals("data-source",node.getType()) @AT@ 24114 @LENGTH@ 43
---------INS SimpleName@@MethodName:assertEquals:["data-source", node.getType()] @TO@ MethodInvocation@@assertEquals("data-source",node.getType()) @AT@ 24114 @LENGTH@ 43
------------INS StringLiteral@@"data-source" @TO@ SimpleName@@MethodName:assertEquals:["data-source", node.getType()] @AT@ 24127 @LENGTH@ 13
------------INS MethodInvocation@@node.getType() @TO@ SimpleName@@MethodName:assertEquals:["data-source", node.getType()] @AT@ 24142 @LENGTH@ 14
---------------INS SimpleName@@Name:node @TO@ MethodInvocation@@node.getType() @AT@ 24142 @LENGTH@ 4
---------------INS SimpleName@@MethodName:getType:[] @TO@ MethodInvocation@@node.getType() @AT@ 24147 @LENGTH@ 9
---INS ExpressionStatement@@MethodInvocation:assertEquals("java:/H2DS",node.getName()) @TO@ MethodDeclaration@@public, void, MethodName:testTest, Exception,  @AT@ 24167 @LENGTH@ 43
------INS MethodInvocation@@assertEquals("java:/H2DS",node.getName()) @TO@ ExpressionStatement@@MethodInvocation:assertEquals("java:/H2DS",node.getName()) @AT@ 24167 @LENGTH@ 42
---------INS SimpleName@@MethodName:assertEquals:["java:/H2DS", node.getName()] @TO@ MethodInvocation@@assertEquals("java:/H2DS",node.getName()) @AT@ 24167 @LENGTH@ 42
------------INS StringLiteral@@"java:/H2DS" @TO@ SimpleName@@MethodName:assertEquals:["java:/H2DS", node.getName()] @AT@ 24180 @LENGTH@ 12
------------INS MethodInvocation@@node.getName() @TO@ SimpleName@@MethodName:assertEquals:["java:/H2DS", node.getName()] @AT@ 24194 @LENGTH@ 14
---------------INS SimpleName@@Name:node @TO@ MethodInvocation@@node.getName() @AT@ 24194 @LENGTH@ 4
---------------INS SimpleName@@MethodName:getName:[] @TO@ MethodInvocation@@node.getName() @AT@ 24199 @LENGTH@ 9


UPD TryStatement@@try {  return new String(CHARSET.newDecoder().decode(ByteBuffer.wrap(bytes)).array());} catch (CharacterCodingException e) {  throw new IllegalArgumentException("Encoding failed",e);} @TO@ try {  return CHARSET.newDecoder().decode(ByteBuffer.wrap(bytes)).toString();} catch (CharacterCodingException e) {  throw new IllegalArgumentException("Decoding failed",e);} @AT@ 872 @LENGTH@ 224
---UPD ReturnStatement@@ClassInstanceCreation:new String(CHARSET.newDecoder().decode(ByteBuffer.wrap(bytes)).array()) @TO@ MethodInvocation:CHARSET.newDecoder().decode(ByteBuffer.wrap(bytes)).toString() @AT@ 890 @LENGTH@ 79
------DEL ClassInstanceCreation@@String[CHARSET.newDecoder().decode(ByteBuffer.wrap(bytes)).array()] @AT@ 897 @LENGTH@ 71
---------DEL New@@new @AT@ 897 @LENGTH@ 3
---------DEL SimpleType@@String @AT@ 901 @LENGTH@ 6
------MOV MethodInvocation@@CHARSET.newDecoder().decode(ByteBuffer.wrap(bytes)).array() @TO@ ReturnStatement@@ClassInstanceCreation:new String(CHARSET.newDecoder().decode(ByteBuffer.wrap(bytes)).array()) @AT@ 908 @LENGTH@ 59
---------UPD SimpleName@@MethodName:array:[] @TO@ MethodName:toString:[] @AT@ 960 @LENGTH@ 7
---UPD CatchClause@@catch (CharacterCodingException e) {  throw new IllegalArgumentException("Encoding failed",e);} @TO@ catch (CharacterCodingException e) {  throw new IllegalArgumentException("Decoding failed",e);} @AT@ 980 @LENGTH@ 116
------UPD ThrowStatement@@ClassInstanceCreation:new IllegalArgumentException("Encoding failed",e) @TO@ ClassInstanceCreation:new IllegalArgumentException("Decoding failed",e) @AT@ 1029 @LENGTH@ 57
---------UPD ClassInstanceCreation@@IllegalArgumentException["Encoding failed", e] @TO@ IllegalArgumentException["Decoding failed", e] @AT@ 1035 @LENGTH@ 50
------------UPD StringLiteral@@"Encoding failed" @TO@ "Decoding failed" @AT@ 1064 @LENGTH@ 17


UPD ExpressionStatement@@MethodInvocation:mockEndpoint.expectedBodiesReceived("%40 query") @TO@ MethodInvocation:mockEndpoint.expectedBodiesReceived("@ query") @AT@ 2721 @LENGTH@ 49
---UPD MethodInvocation@@mockEndpoint.expectedBodiesReceived("%40 query") @TO@ mockEndpoint.expectedBodiesReceived("@ query") @AT@ 2721 @LENGTH@ 48
------UPD SimpleName@@MethodName:expectedBodiesReceived:["%40 query"] @TO@ MethodName:expectedBodiesReceived:["@ query"] @AT@ 2734 @LENGTH@ 35
---------UPD StringLiteral@@"%40 query" @TO@ "@ query" @AT@ 2757 @LENGTH@ 11


UPD VariableDeclarationStatement@@final AttachmentList<DeploymentUnit> subDeployments=deploymentUnit.getAttachment(Attachments.SUB_DEPLOYMENTS); @TO@ final List<DeploymentUnit> subDeployments=deploymentUnit.getAttachmentList(Attachments.SUB_DEPLOYMENTS); @AT@ 11499 @LENGTH@ 112
---UPD ParameterizedType@@AttachmentList<DeploymentUnit> @TO@ List<DeploymentUnit> @AT@ 11505 @LENGTH@ 30
------UPD SimpleType@@AttachmentList @TO@ List @AT@ 11505 @LENGTH@ 14
---UPD VariableDeclarationFragment@@subDeployments=deploymentUnit.getAttachment(Attachments.SUB_DEPLOYMENTS) @TO@ subDeployments=deploymentUnit.getAttachmentList(Attachments.SUB_DEPLOYMENTS) @AT@ 11536 @LENGTH@ 74
------UPD MethodInvocation@@deploymentUnit.getAttachment(Attachments.SUB_DEPLOYMENTS) @TO@ deploymentUnit.getAttachmentList(Attachments.SUB_DEPLOYMENTS) @AT@ 11553 @LENGTH@ 57
---------UPD SimpleName@@MethodName:getAttachment:[Attachments.SUB_DEPLOYMENTS] @TO@ MethodName:getAttachmentList:[Attachments.SUB_DEPLOYMENTS] @AT@ 11568 @LENGTH@ 42


UPD EnhancedForStatement@@for (String name : FIELD_NAMES) {  Field field=ReflectionUtils.findField(domainClass,name);  if (field != null) {    ReflectionUtils.makeAccessible(field);    this.field=field;    break;  }} @TO@ for (String name : FIELD_NAMES) {  Field candidate=ReflectionUtils.findField(domainClass,name);  if (candidate != null) {    ReflectionUtils.makeAccessible(candidate);    this.field=candidate;    break;  }} @AT@ 1423 @LENGTH@ 278
---UPD VariableDeclarationStatement@@Field field=ReflectionUtils.findField(domainClass,name); @TO@ Field candidate=ReflectionUtils.findField(domainClass,name); @AT@ 1470 @LENGTH@ 59
------UPD VariableDeclarationFragment@@field=ReflectionUtils.findField(domainClass,name) @TO@ candidate=ReflectionUtils.findField(domainClass,name) @AT@ 1476 @LENGTH@ 52
---------UPD SimpleName@@field @TO@ candidate @AT@ 1476 @LENGTH@ 5
---UPD IfStatement@@if (field != null) {  ReflectionUtils.makeAccessible(field);  this.field=field;  break;} @TO@ if (candidate != null) {  ReflectionUtils.makeAccessible(candidate);  this.field=candidate;  break;} @AT@ 1543 @LENGTH@ 148
------UPD InfixExpression@@field != null @TO@ candidate != null @AT@ 1547 @LENGTH@ 13
---------UPD SimpleName@@field @TO@ candidate @AT@ 1547 @LENGTH@ 5
------UPD Block@@ThenBody:{  ReflectionUtils.makeAccessible(field);  this.field=field;  break;} @TO@ ThenBody:{  ReflectionUtils.makeAccessible(candidate);  this.field=candidate;  break;} @AT@ 1562 @LENGTH@ 129
---------UPD ExpressionStatement@@MethodInvocation:ReflectionUtils.makeAccessible(field) @TO@ MethodInvocation:ReflectionUtils.makeAccessible(candidate) @AT@ 1580 @LENGTH@ 38
------------UPD MethodInvocation@@ReflectionUtils.makeAccessible(field) @TO@ ReflectionUtils.makeAccessible(candidate) @AT@ 1580 @LENGTH@ 37
---------------UPD SimpleName@@MethodName:makeAccessible:[field] @TO@ MethodName:makeAccessible:[candidate] @AT@ 1596 @LENGTH@ 21
------------------UPD SimpleName@@field @TO@ candidate @AT@ 1611 @LENGTH@ 5
---------UPD ExpressionStatement@@Assignment:this.field=field @TO@ Assignment:this.field=candidate @AT@ 1635 @LENGTH@ 19
------------UPD Assignment@@this.field=field @TO@ this.field=candidate @AT@ 1635 @LENGTH@ 18
---------------UPD SimpleName@@field @TO@ candidate @AT@ 1648 @LENGTH@ 5


UPD IfStatement@@if (SerializerUtils.isEmpty(bytes)) {  return null;} @TO@ if (SerializationUtils.isEmpty(bytes)) {  return null;} @AT@ 1384 @LENGTH@ 57
---UPD MethodInvocation@@SerializerUtils.isEmpty(bytes) @TO@ SerializationUtils.isEmpty(bytes) @AT@ 1388 @LENGTH@ 30
------UPD SimpleName@@Name:SerializerUtils @TO@ Name:SerializationUtils @AT@ 1388 @LENGTH@ 15


INS ExpressionStatement@@MethodInvocation:command.add("javax.xml.jaxp-provider") @TO@ MethodDeclaration@@public, List<String>, MethodName:getServerLaunchCommand,  @AT@ 8915 @LENGTH@ 39
---INS MethodInvocation@@command.add("javax.xml.jaxp-provider") @TO@ ExpressionStatement@@MethodInvocation:command.add("javax.xml.jaxp-provider") @AT@ 8915 @LENGTH@ 38
------INS SimpleName@@Name:command @TO@ MethodInvocation@@command.add("javax.xml.jaxp-provider") @AT@ 8915 @LENGTH@ 7
------INS SimpleName@@MethodName:add:["javax.xml.jaxp-provider"] @TO@ MethodInvocation@@command.add("javax.xml.jaxp-provider") @AT@ 8923 @LENGTH@ 30
---------INS StringLiteral@@"javax.xml.jaxp-provider" @TO@ SimpleName@@MethodName:add:["javax.xml.jaxp-provider"] @AT@ 8927 @LENGTH@ 25


UPD IfStatement@@if (modelNode.has(REMOTE)) {  writer.writeStartElement(Element.REMOTE.getLocalName());  final ModelNode remote=modelNode.get(REMOTE);  if (remote.has(HOST)) {    writeAttribute(writer,Attribute.HOST,remote.get(HOST).asString());  }  if (remote.has(PORT)) {    writeAttribute(writer,Attribute.PORT,remote.get(PORT).asString());  }  writer.writeEndElement();} @TO@ if (modelNode.hasDefined(REMOTE)) {  writer.writeStartElement(Element.REMOTE.getLocalName());  final ModelNode remote=modelNode.get(REMOTE);  if (remote.has(HOST)) {    writeAttribute(writer,Attribute.HOST,remote.get(HOST).asString());  }  if (remote.has(PORT)) {    writeAttribute(writer,Attribute.PORT,remote.get(PORT).asString());  }  writer.writeEndElement();} @AT@ 22947 @LENGTH@ 475


UPD VariableDeclarationStatement@@final ServiceActivatorContext serviceActivatorContext=new ServiceActivatorContextImpl(batchBuilder); @TO@ final ServiceActivatorContext serviceActivatorContext=new ServiceActivatorContextImpl(batchBuilder,serviceContainer); @AT@ 9749 @LENGTH@ 102
---UPD VariableDeclarationFragment@@serviceActivatorContext=new ServiceActivatorContextImpl(batchBuilder) @TO@ serviceActivatorContext=new ServiceActivatorContextImpl(batchBuilder,serviceContainer) @AT@ 9779 @LENGTH@ 71
------UPD ClassInstanceCreation@@ServiceActivatorContextImpl[batchBuilder] @TO@ ServiceActivatorContextImpl[batchBuilder, serviceContainer] @AT@ 9805 @LENGTH@ 45
---------INS SimpleName@@serviceContainer @TO@ ClassInstanceCreation@@ServiceActivatorContextImpl[batchBuilder] @AT@ 9851 @LENGTH@ 16


UPD IfStatement@@if (timerStack.size() > 0) {  TimerEntry timerEntry=timerStack.get(timerStack.size() - 1);  timerEntry.duration=timerEntry.duration + (now - timerEntry.clockStartedOrResumed);} @TO@ if (timerStack.size() > 0) {  TimerEntry timerEntry=timerStack.get(timerStack.size() - 1);  timerEntry.duration=timerEntry.duration + (now - timerEntry.clockStartedOrResumed);  timerEntry.clockStartedOrResumed=now;} @AT@ 2780 @LENGTH@ 323
---UPD Block@@ThenBody:{  TimerEntry timerEntry=timerStack.get(timerStack.size() - 1);  timerEntry.duration=timerEntry.duration + (now - timerEntry.clockStartedOrResumed);} @TO@ ThenBody:{  TimerEntry timerEntry=timerStack.get(timerStack.size() - 1);  timerEntry.duration=timerEntry.duration + (now - timerEntry.clockStartedOrResumed);  timerEntry.clockStartedOrResumed=now;} @AT@ 2807 @LENGTH@ 296
------INS ExpressionStatement@@Assignment:timerEntry.clockStartedOrResumed=now @TO@ Block@@ThenBody:{  TimerEntry timerEntry=timerStack.get(timerStack.size() - 1);  timerEntry.duration=timerEntry.duration + (now - timerEntry.clockStartedOrResumed);} @AT@ 3100 @LENGTH@ 39
---------INS Assignment@@timerEntry.clockStartedOrResumed=now @TO@ ExpressionStatement@@Assignment:timerEntry.clockStartedOrResumed=now @AT@ 3100 @LENGTH@ 38
------------INS QualifiedName@@timerEntry.clockStartedOrResumed @TO@ Assignment@@timerEntry.clockStartedOrResumed=now @AT@ 3100 @LENGTH@ 32
---------------INS SimpleName@@timerEntry @TO@ QualifiedName@@timerEntry.clockStartedOrResumed @AT@ 3100 @LENGTH@ 10
---------------INS SimpleName@@clockStartedOrResumed @TO@ QualifiedName@@timerEntry.clockStartedOrResumed @AT@ 3111 @LENGTH@ 21
------------INS Operator@@= @TO@ Assignment@@timerEntry.clockStartedOrResumed=now @AT@ 3132 @LENGTH@ 1
------------INS SimpleName@@now @TO@ Assignment@@timerEntry.clockStartedOrResumed=now @AT@ 3135 @LENGTH@ 3


UPD ReturnStatement@@MethodInvocation:criteria.not().is(null) @TO@ MethodInvocation:criteria.ne(null) @AT@ 4594 @LENGTH@ 31
---UPD MethodInvocation@@criteria.not().is(null) @TO@ criteria.ne(null) @AT@ 4601 @LENGTH@ 23
------DEL MethodInvocation@@MethodName:not:[] @AT@ 4601 @LENGTH@ 14
------UPD SimpleName@@MethodName:is:[null] @TO@ MethodName:ne:[null] @AT@ 4616 @LENGTH@ 8
