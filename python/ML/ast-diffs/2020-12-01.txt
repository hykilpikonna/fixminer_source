UPD ExpressionStatement@@MethodInvocation:Objects.requireNonNull(conn,"conm") @TO@ MethodInvocation:Objects.requireNonNull(conn,"conn") @AT@ 21465 @LENGTH@ 37
---UPD MethodInvocation@@Objects.requireNonNull(conn,"conm") @TO@ Objects.requireNonNull(conn,"conn") @AT@ 21465 @LENGTH@ 36
------UPD SimpleName@@MethodName:requireNonNull:[conn, "conm"] @TO@ MethodName:requireNonNull:[conn, "conn"] @AT@ 21473 @LENGTH@ 28
---------UPD StringLiteral@@"conm" @TO@ "conn" @AT@ 21494 @LENGTH@ 6


INS MethodDeclaration@@public, Object, MethodName:toCaseInsensitiveMatch, Object source,  @TO@ EnumDeclaration@@[public]MongoRegexCreator,  @AT@ 2409 @LENGTH@ 164
---INS Modifier@@public @TO@ MethodDeclaration@@public, Object, MethodName:toCaseInsensitiveMatch, Object source,  @AT@ 2409 @LENGTH@ 6
---INS SimpleType@@Object @TO@ MethodDeclaration@@public, Object, MethodName:toCaseInsensitiveMatch, Object source,  @AT@ 2416 @LENGTH@ 6
---INS SimpleName@@MethodName:toCaseInsensitiveMatch @TO@ MethodDeclaration@@public, Object, MethodName:toCaseInsensitiveMatch, Object source,  @AT@ 2423 @LENGTH@ 22
---INS SingleVariableDeclaration@@Object source @TO@ MethodDeclaration@@public, Object, MethodName:toCaseInsensitiveMatch, Object source,  @AT@ 2446 @LENGTH@ 13
------INS SimpleType@@Object @TO@ SingleVariableDeclaration@@Object source @AT@ 2446 @LENGTH@ 6
------INS SimpleName@@source @TO@ SingleVariableDeclaration@@Object source @AT@ 2453 @LENGTH@ 6
---INS ReturnStatement@@ConditionalExpression:source instanceof String ? new BsonRegularExpression(Pattern.quote((String)source),"i") : source @TO@ MethodDeclaration@@public, Object, MethodName:toCaseInsensitiveMatch, Object source,  @AT@ 2465 @LENGTH@ 105
------INS ConditionalExpression@@source instanceof String ? new BsonRegularExpression(Pattern.quote((String)source),"i") : source @TO@ ReturnStatement@@ConditionalExpression:source instanceof String ? new BsonRegularExpression(Pattern.quote((String)source),"i") : source @AT@ 2472 @LENGTH@ 97
---------INS InstanceofExpression@@source instanceof String @TO@ ConditionalExpression@@source instanceof String ? new BsonRegularExpression(Pattern.quote((String)source),"i") : source @AT@ 2472 @LENGTH@ 24
------------INS SimpleName@@source @TO@ InstanceofExpression@@source instanceof String @AT@ 2472 @LENGTH@ 6
------------INS Instanceof@@instanceof @TO@ InstanceofExpression@@source instanceof String @AT@ 2479 @LENGTH@ 10
------------INS SimpleType@@String @TO@ InstanceofExpression@@source instanceof String @AT@ 2490 @LENGTH@ 6
---------INS ClassInstanceCreation@@BsonRegularExpression[Pattern.quote((String)source), "i"] @TO@ ConditionalExpression@@source instanceof String ? new BsonRegularExpression(Pattern.quote((String)source),"i") : source @AT@ 2499 @LENGTH@ 61
------------INS New@@new @TO@ ClassInstanceCreation@@BsonRegularExpression[Pattern.quote((String)source), "i"] @AT@ 2499 @LENGTH@ 3
------------INS SimpleType@@BsonRegularExpression @TO@ ClassInstanceCreation@@BsonRegularExpression[Pattern.quote((String)source), "i"] @AT@ 2503 @LENGTH@ 21
------------INS MethodInvocation@@Pattern.quote((String)source) @TO@ ClassInstanceCreation@@BsonRegularExpression[Pattern.quote((String)source), "i"] @AT@ 2525 @LENGTH@ 29
---------------INS SimpleName@@Name:Pattern @TO@ MethodInvocation@@Pattern.quote((String)source) @AT@ 2525 @LENGTH@ 7
---------------INS SimpleName@@MethodName:quote:[(String)source] @TO@ MethodInvocation@@Pattern.quote((String)source) @AT@ 2533 @LENGTH@ 21
------------------INS CastExpression@@(String)source @TO@ SimpleName@@MethodName:quote:[(String)source] @AT@ 2539 @LENGTH@ 14
---------------------INS SimpleType@@String @TO@ CastExpression@@(String)source @AT@ 2540 @LENGTH@ 6
---------------------INS SimpleName@@source @TO@ CastExpression@@(String)source @AT@ 2547 @LENGTH@ 6
------------INS StringLiteral@@"i" @TO@ ClassInstanceCreation@@BsonRegularExpression[Pattern.quote((String)source), "i"] @AT@ 2556 @LENGTH@ 3
---------INS SimpleName@@source @TO@ ConditionalExpression@@source instanceof String ? new BsonRegularExpression(Pattern.quote((String)source),"i") : source @AT@ 2563 @LENGTH@ 6


INS MethodDeclaration@@public, void, MethodName:testIsRegularFile, IOException,  @TO@ TypeDeclaration@@[@SuppressWarnings({"deprecation","ResultOfMethodCallIgnored"}), public]FileUtilsTestCase,  @AT@ 76909 @LENGTH@ 330
---INS Modifier@@public @TO@ MethodDeclaration@@public, void, MethodName:testIsRegularFile, IOException,  @AT@ 76909 @LENGTH@ 6
---INS PrimitiveType@@void @TO@ MethodDeclaration@@public, void, MethodName:testIsRegularFile, IOException,  @AT@ 76916 @LENGTH@ 4
---INS SimpleName@@MethodName:testIsRegularFile @TO@ MethodDeclaration@@public, void, MethodName:testIsRegularFile, IOException,  @AT@ 76921 @LENGTH@ 17
---INS SimpleType@@IOException @TO@ MethodDeclaration@@public, void, MethodName:testIsRegularFile, IOException,  @AT@ 76948 @LENGTH@ 11
---INS ExpressionStatement@@MethodInvocation:assertFalse(FileUtils.isRegularFile(null)) @TO@ MethodDeclaration@@public, void, MethodName:testIsRegularFile, IOException,  @AT@ 76970 @LENGTH@ 43
------INS MethodInvocation@@assertFalse(FileUtils.isRegularFile(null)) @TO@ ExpressionStatement@@MethodInvocation:assertFalse(FileUtils.isRegularFile(null)) @AT@ 76970 @LENGTH@ 42
---------INS SimpleName@@MethodName:assertFalse:[FileUtils.isRegularFile(null)] @TO@ MethodInvocation@@assertFalse(FileUtils.isRegularFile(null)) @AT@ 76970 @LENGTH@ 42
------------INS MethodInvocation@@FileUtils.isRegularFile(null) @TO@ SimpleName@@MethodName:assertFalse:[FileUtils.isRegularFile(null)] @AT@ 76982 @LENGTH@ 29
---------------INS SimpleName@@Name:FileUtils @TO@ MethodInvocation@@FileUtils.isRegularFile(null) @AT@ 76982 @LENGTH@ 9
---------------INS SimpleName@@MethodName:isRegularFile:[null] @TO@ MethodInvocation@@FileUtils.isRegularFile(null) @AT@ 76992 @LENGTH@ 19
------------------INS NullLiteral@@null @TO@ SimpleName@@MethodName:isRegularFile:[null] @AT@ 77006 @LENGTH@ 4
---INS ExpressionStatement@@MethodInvocation:assertFalse(FileUtils.isRegularFile(temporaryFolder)) @TO@ MethodDeclaration@@public, void, MethodName:testIsRegularFile, IOException,  @AT@ 77023 @LENGTH@ 54
------INS MethodInvocation@@assertFalse(FileUtils.isRegularFile(temporaryFolder)) @TO@ ExpressionStatement@@MethodInvocation:assertFalse(FileUtils.isRegularFile(temporaryFolder)) @AT@ 77023 @LENGTH@ 53
---------INS SimpleName@@MethodName:assertFalse:[FileUtils.isRegularFile(temporaryFolder)] @TO@ MethodInvocation@@assertFalse(FileUtils.isRegularFile(temporaryFolder)) @AT@ 77023 @LENGTH@ 53
------------INS MethodInvocation@@FileUtils.isRegularFile(temporaryFolder) @TO@ SimpleName@@MethodName:assertFalse:[FileUtils.isRegularFile(temporaryFolder)] @AT@ 77035 @LENGTH@ 40
---------------INS SimpleName@@Name:FileUtils @TO@ MethodInvocation@@FileUtils.isRegularFile(temporaryFolder) @AT@ 77035 @LENGTH@ 9
---------------INS SimpleName@@MethodName:isRegularFile:[temporaryFolder] @TO@ MethodInvocation@@FileUtils.isRegularFile(temporaryFolder) @AT@ 77045 @LENGTH@ 30
------------------INS SimpleName@@temporaryFolder @TO@ SimpleName@@MethodName:isRegularFile:[temporaryFolder] @AT@ 77059 @LENGTH@ 15
---INS ExpressionStatement@@MethodInvocation:assertTrue(FileUtils.isRegularFile(testFile1)) @TO@ MethodDeclaration@@public, void, MethodName:testIsRegularFile, IOException,  @AT@ 77086 @LENGTH@ 47
------INS MethodInvocation@@assertTrue(FileUtils.isRegularFile(testFile1)) @TO@ ExpressionStatement@@MethodInvocation:assertTrue(FileUtils.isRegularFile(testFile1)) @AT@ 77086 @LENGTH@ 46
---------INS SimpleName@@MethodName:assertTrue:[FileUtils.isRegularFile(testFile1)] @TO@ MethodInvocation@@assertTrue(FileUtils.isRegularFile(testFile1)) @AT@ 77086 @LENGTH@ 46
------------INS MethodInvocation@@FileUtils.isRegularFile(testFile1) @TO@ SimpleName@@MethodName:assertTrue:[FileUtils.isRegularFile(testFile1)] @AT@ 77097 @LENGTH@ 34
---------------INS SimpleName@@Name:FileUtils @TO@ MethodInvocation@@FileUtils.isRegularFile(testFile1) @AT@ 77097 @LENGTH@ 9
---------------INS SimpleName@@MethodName:isRegularFile:[testFile1] @TO@ MethodInvocation@@FileUtils.isRegularFile(testFile1) @AT@ 77107 @LENGTH@ 24
------------------INS SimpleName@@testFile1 @TO@ SimpleName@@MethodName:isRegularFile:[testFile1] @AT@ 77121 @LENGTH@ 9
---INS ExpressionStatement@@MethodInvocation:Files.delete(testFile1.toPath()) @TO@ MethodDeclaration@@public, void, MethodName:testIsRegularFile, IOException,  @AT@ 77143 @LENGTH@ 33
------INS MethodInvocation@@Files.delete(testFile1.toPath()) @TO@ ExpressionStatement@@MethodInvocation:Files.delete(testFile1.toPath()) @AT@ 77143 @LENGTH@ 32
---------INS SimpleName@@Name:Files @TO@ MethodInvocation@@Files.delete(testFile1.toPath()) @AT@ 77143 @LENGTH@ 5
---------INS SimpleName@@MethodName:delete:[testFile1.toPath()] @TO@ MethodInvocation@@Files.delete(testFile1.toPath()) @AT@ 77149 @LENGTH@ 26
------------INS MethodInvocation@@testFile1.toPath() @TO@ SimpleName@@MethodName:delete:[testFile1.toPath()] @AT@ 77156 @LENGTH@ 18
---------------INS SimpleName@@Name:testFile1 @TO@ MethodInvocation@@testFile1.toPath() @AT@ 77156 @LENGTH@ 9
---------------INS SimpleName@@MethodName:toPath:[] @TO@ MethodInvocation@@testFile1.toPath() @AT@ 77166 @LENGTH@ 8
---INS ExpressionStatement@@MethodInvocation:assertFalse(FileUtils.isRegularFile(testFile1)) @TO@ MethodDeclaration@@public, void, MethodName:testIsRegularFile, IOException,  @AT@ 77185 @LENGTH@ 48
------INS MethodInvocation@@assertFalse(FileUtils.isRegularFile(testFile1)) @TO@ ExpressionStatement@@MethodInvocation:assertFalse(FileUtils.isRegularFile(testFile1)) @AT@ 77185 @LENGTH@ 47
---------INS SimpleName@@MethodName:assertFalse:[FileUtils.isRegularFile(testFile1)] @TO@ MethodInvocation@@assertFalse(FileUtils.isRegularFile(testFile1)) @AT@ 77185 @LENGTH@ 47
------------INS MethodInvocation@@FileUtils.isRegularFile(testFile1) @TO@ SimpleName@@MethodName:assertFalse:[FileUtils.isRegularFile(testFile1)] @AT@ 77197 @LENGTH@ 34
---------------INS SimpleName@@Name:FileUtils @TO@ MethodInvocation@@FileUtils.isRegularFile(testFile1) @AT@ 77197 @LENGTH@ 9
---------------INS SimpleName@@MethodName:isRegularFile:[testFile1] @TO@ MethodInvocation@@FileUtils.isRegularFile(testFile1) @AT@ 77207 @LENGTH@ 24
------------------INS SimpleName@@testFile1 @TO@ SimpleName@@MethodName:isRegularFile:[testFile1] @AT@ 77221 @LENGTH@ 9


UPD ExpressionStatement@@Assignment:cypherQuery=renderer.render(GenericQueryAndParameters.STATEMENT) @TO@ Assignment:cypherQuery=renderer.render(queryFragments.generateGenericStatement()) @AT@ 28227 @LENGTH@ 67
---UPD Assignment@@cypherQuery=renderer.render(GenericQueryAndParameters.STATEMENT) @TO@ cypherQuery=renderer.render(queryFragments.generateGenericStatement()) @AT@ 28227 @LENGTH@ 66
------UPD MethodInvocation@@renderer.render(GenericQueryAndParameters.STATEMENT) @TO@ renderer.render(queryFragments.generateGenericStatement()) @AT@ 28241 @LENGTH@ 52
---------UPD SimpleName@@MethodName:render:[GenericQueryAndParameters.STATEMENT] @TO@ MethodName:render:[queryFragments.generateGenericStatement()] @AT@ 28250 @LENGTH@ 43
------------INS MethodInvocation@@queryFragments.generateGenericStatement() @TO@ SimpleName@@MethodName:render:[GenericQueryAndParameters.STATEMENT] @AT@ 28257 @LENGTH@ 41
---------------INS SimpleName@@Name:queryFragments @TO@ MethodInvocation@@queryFragments.generateGenericStatement() @AT@ 28257 @LENGTH@ 14
---------------INS SimpleName@@MethodName:generateGenericStatement:[] @TO@ MethodInvocation@@queryFragments.generateGenericStatement() @AT@ 28272 @LENGTH@ 26
------------DEL QualifiedName@@GenericQueryAndParameters.STATEMENT @AT@ 28257 @LENGTH@ 35
---------------DEL SimpleName@@GenericQueryAndParameters @AT@ 28257 @LENGTH@ 25
---------------DEL SimpleName@@STATEMENT @AT@ 28283 @LENGTH@ 9


MOV FieldDeclaration@@private, static, final, Logger, [LOG=LoggerFactory.getLogger(JmsJdbcXARollbackTest.class)] @TO@ TypeDeclaration@@[public]JmsJdbcXARollbackTest, ActiveMQSpringTestSupport @AT@ 2113 @LENGTH@ 87


UPD FieldDeclaration@@Set<Map.Entry<K,V>>, [entrySet] @TO@ final, Set<Map.Entry<K,V>>, [entrySet] @AT@ 1355 @LENGTH@ 30
---INS Modifier@@final @TO@ FieldDeclaration@@Set<Map.Entry<K,V>>, [entrySet] @AT@ 1355 @LENGTH@ 5


UPD ReturnStatement@@ClassInstanceCreation:new ProcessorDefinitionDefinitionDeserializer() @TO@ ClassInstanceCreation:new ProcessorDefinitionDeserializer() @AT@ 2554 @LENGTH@ 55
---UPD ClassInstanceCreation@@ProcessorDefinitionDefinitionDeserializer[] @TO@ ProcessorDefinitionDeserializer[] @AT@ 2561 @LENGTH@ 47
------UPD SimpleType@@ProcessorDefinitionDefinitionDeserializer @TO@ ProcessorDefinitionDeserializer @AT@ 2565 @LENGTH@ 41


UPD IfStatement@@if (containsPossibleCircles) {  GenericQueryAndParameters genericQueryAndParameters=createQueryAndParameters(entityMetaData,queryFragments,parameters);  if (genericQueryAndParameters.isEmpty()) {    return Optional.empty();  }  cypherQuery=renderer.render(GenericQueryAndParameters.STATEMENT);  finalParameters=genericQueryAndParameters.getParameters();} else {  cypherQuery=renderer.render(queryFragments.toStatement());} @TO@ if (containsPossibleCircles && !queryFragments.isScalarValueReturn()) {  GenericQueryAndParameters genericQueryAndParameters=createQueryAndParameters(entityMetaData,queryFragments,parameters);  if (genericQueryAndParameters.isEmpty()) {    return Optional.empty();  }  cypherQuery=renderer.render(GenericQueryAndParameters.STATEMENT);  finalParameters=genericQueryAndParameters.getParameters();} else {  cypherQuery=renderer.render(queryFragments.toStatement());} @AT@ 28206 @LENGTH@ 477
---INS InfixExpression@@containsPossibleCircles && !queryFragments.isScalarValueReturn() @TO@ IfStatement@@if (containsPossibleCircles) {  GenericQueryAndParameters genericQueryAndParameters=createQueryAndParameters(entityMetaData,queryFragments,parameters);  if (genericQueryAndParameters.isEmpty()) {    return Optional.empty();  }  cypherQuery=renderer.render(GenericQueryAndParameters.STATEMENT);  finalParameters=genericQueryAndParameters.getParameters();} else {  cypherQuery=renderer.render(queryFragments.toStatement());} @AT@ 28210 @LENGTH@ 64
------INS SimpleName@@containsPossibleCircles @TO@ InfixExpression@@containsPossibleCircles && !queryFragments.isScalarValueReturn() @AT@ 28210 @LENGTH@ 23
------INS Operator@@&& @TO@ InfixExpression@@containsPossibleCircles && !queryFragments.isScalarValueReturn() @AT@ 28233 @LENGTH@ 2
------INS PrefixExpression@@!queryFragments.isScalarValueReturn() @TO@ InfixExpression@@containsPossibleCircles && !queryFragments.isScalarValueReturn() @AT@ 28237 @LENGTH@ 37
---------INS Operator@@! @TO@ PrefixExpression@@!queryFragments.isScalarValueReturn() @AT@ 28237 @LENGTH@ 1
---------INS MethodInvocation@@queryFragments.isScalarValueReturn() @TO@ PrefixExpression@@!queryFragments.isScalarValueReturn() @AT@ 28238 @LENGTH@ 36
------------INS SimpleName@@Name:queryFragments @TO@ MethodInvocation@@queryFragments.isScalarValueReturn() @AT@ 28238 @LENGTH@ 14
------------INS SimpleName@@MethodName:isScalarValueReturn:[] @TO@ MethodInvocation@@queryFragments.isScalarValueReturn() @AT@ 28253 @LENGTH@ 21
---DEL SimpleName@@containsPossibleCircles @AT@ 28210 @LENGTH@ 23


UPD FieldDeclaration@@private, boolean, [isLocked=false] @TO@ private, boolean, [isLocked] @AT@ 2738 @LENGTH@ 33
---UPD VariableDeclarationFragment@@isLocked=false @TO@ isLocked @AT@ 2754 @LENGTH@ 16
------DEL BooleanLiteral@@false @AT@ 2765 @LENGTH@ 5


INS MethodDeclaration@@default, boolean, MethodName:isAutowiredEnabled,  @TO@ TypeDeclaration@@[public]Component, [CamelContextAware, Service] @AT@ 4944 @LENGTH@ 65
---INS Modifier@@default @TO@ MethodDeclaration@@default, boolean, MethodName:isAutowiredEnabled,  @AT@ 4944 @LENGTH@ 7
---INS PrimitiveType@@boolean @TO@ MethodDeclaration@@default, boolean, MethodName:isAutowiredEnabled,  @AT@ 4952 @LENGTH@ 7
---INS SimpleName@@MethodName:isAutowiredEnabled @TO@ MethodDeclaration@@default, boolean, MethodName:isAutowiredEnabled,  @AT@ 4960 @LENGTH@ 18
---INS ReturnStatement@@BooleanLiteral:true @TO@ MethodDeclaration@@default, boolean, MethodName:isAutowiredEnabled,  @AT@ 4991 @LENGTH@ 12
------INS BooleanLiteral@@true @TO@ ReturnStatement@@BooleanLiteral:true @AT@ 4998 @LENGTH@ 4


INS MethodDeclaration@@public, void, MethodName:testReExecuteWithSameJobParameters, Exception,  @TO@ TypeDeclaration@@[@RunWith(SpringJUnit4ClassRunner.class), @ContextConfiguration(locations="/org/springframework/batch/core/repository/dao/sql-dao-test.xml"), public]SimpleJobRepositoryIntegrationTests,  @AT@ 8365 @LENGTH@ 573
---INS Modifier@@public @TO@ MethodDeclaration@@public, void, MethodName:testReExecuteWithSameJobParameters, Exception,  @AT@ 8365 @LENGTH@ 6
---INS PrimitiveType@@void @TO@ MethodDeclaration@@public, void, MethodName:testReExecuteWithSameJobParameters, Exception,  @AT@ 8372 @LENGTH@ 4
---INS SimpleName@@MethodName:testReExecuteWithSameJobParameters @TO@ MethodDeclaration@@public, void, MethodName:testReExecuteWithSameJobParameters, Exception,  @AT@ 8377 @LENGTH@ 34
---INS SimpleType@@Exception @TO@ MethodDeclaration@@public, void, MethodName:testReExecuteWithSameJobParameters, Exception,  @AT@ 8421 @LENGTH@ 9
---INS VariableDeclarationStatement@@JobParameters jobParameters=new JobParametersBuilder().addString("name","foo",false).toJobParameters(); @TO@ MethodDeclaration@@public, void, MethodName:testReExecuteWithSameJobParameters, Exception,  @AT@ 8435 @LENGTH@ 117
------INS SimpleType@@JobParameters @TO@ VariableDeclarationStatement@@JobParameters jobParameters=new JobParametersBuilder().addString("name","foo",false).toJobParameters(); @AT@ 8435 @LENGTH@ 13
------INS VariableDeclarationFragment@@jobParameters=new JobParametersBuilder().addString("name","foo",false).toJobParameters() @TO@ VariableDeclarationStatement@@JobParameters jobParameters=new JobParametersBuilder().addString("name","foo",false).toJobParameters(); @AT@ 8449 @LENGTH@ 102
---------INS SimpleName@@jobParameters @TO@ VariableDeclarationFragment@@jobParameters=new JobParametersBuilder().addString("name","foo",false).toJobParameters() @AT@ 8449 @LENGTH@ 13
---------INS MethodInvocation@@new JobParametersBuilder().addString("name","foo",false).toJobParameters() @TO@ VariableDeclarationFragment@@jobParameters=new JobParametersBuilder().addString("name","foo",false).toJobParameters() @AT@ 8465 @LENGTH@ 86
------------INS MethodInvocation@@MethodName:addString:["name", "foo", false] @TO@ MethodInvocation@@new JobParametersBuilder().addString("name","foo",false).toJobParameters() @AT@ 8465 @LENGTH@ 63
---------------INS StringLiteral@@"name" @TO@ MethodInvocation@@MethodName:addString:["name", "foo", false] @AT@ 8507 @LENGTH@ 6
---------------INS StringLiteral@@"foo" @TO@ MethodInvocation@@MethodName:addString:["name", "foo", false] @AT@ 8515 @LENGTH@ 5
---------------INS BooleanLiteral@@false @TO@ MethodInvocation@@MethodName:addString:["name", "foo", false] @AT@ 8522 @LENGTH@ 5
------------INS ClassInstanceCreation@@JobParametersBuilder[] @TO@ MethodInvocation@@new JobParametersBuilder().addString("name","foo",false).toJobParameters() @AT@ 8465 @LENGTH@ 26
---------------INS New@@new @TO@ ClassInstanceCreation@@JobParametersBuilder[] @AT@ 8465 @LENGTH@ 3
---------------INS SimpleType@@JobParametersBuilder @TO@ ClassInstanceCreation@@JobParametersBuilder[] @AT@ 8469 @LENGTH@ 20
------------INS SimpleName@@MethodName:toJobParameters:[] @TO@ MethodInvocation@@new JobParametersBuilder().addString("name","foo",false).toJobParameters() @AT@ 8534 @LENGTH@ 17
---INS VariableDeclarationStatement@@JobExecution jobExecution1=jobRepository.createJobExecution(job.getName(),jobParameters); @TO@ MethodDeclaration@@public, void, MethodName:testReExecuteWithSameJobParameters, Exception,  @AT@ 8555 @LENGTH@ 92
------INS SimpleType@@JobExecution @TO@ VariableDeclarationStatement@@JobExecution jobExecution1=jobRepository.createJobExecution(job.getName(),jobParameters); @AT@ 8555 @LENGTH@ 12
------INS VariableDeclarationFragment@@jobExecution1=jobRepository.createJobExecution(job.getName(),jobParameters) @TO@ VariableDeclarationStatement@@JobExecution jobExecution1=jobRepository.createJobExecution(job.getName(),jobParameters); @AT@ 8568 @LENGTH@ 78
---------INS SimpleName@@jobExecution1 @TO@ VariableDeclarationFragment@@jobExecution1=jobRepository.createJobExecution(job.getName(),jobParameters) @AT@ 8568 @LENGTH@ 13
---------INS MethodInvocation@@jobRepository.createJobExecution(job.getName(),jobParameters) @TO@ VariableDeclarationFragment@@jobExecution1=jobRepository.createJobExecution(job.getName(),jobParameters) @AT@ 8584 @LENGTH@ 62
------------INS SimpleName@@Name:jobRepository @TO@ MethodInvocation@@jobRepository.createJobExecution(job.getName(),jobParameters) @AT@ 8584 @LENGTH@ 13
------------INS SimpleName@@MethodName:createJobExecution:[job.getName(), jobParameters] @TO@ MethodInvocation@@jobRepository.createJobExecution(job.getName(),jobParameters) @AT@ 8598 @LENGTH@ 48
---------------INS MethodInvocation@@job.getName() @TO@ SimpleName@@MethodName:createJobExecution:[job.getName(), jobParameters] @AT@ 8617 @LENGTH@ 13
------------------INS SimpleName@@Name:job @TO@ MethodInvocation@@job.getName() @AT@ 8617 @LENGTH@ 3
------------------INS SimpleName@@MethodName:getName:[] @TO@ MethodInvocation@@job.getName() @AT@ 8621 @LENGTH@ 9
---------------INS SimpleName@@jobParameters @TO@ SimpleName@@MethodName:createJobExecution:[job.getName(), jobParameters] @AT@ 8632 @LENGTH@ 13
---INS ExpressionStatement@@MethodInvocation:jobExecution1.setStatus(BatchStatus.COMPLETED) @TO@ MethodDeclaration@@public, void, MethodName:testReExecuteWithSameJobParameters, Exception,  @AT@ 8650 @LENGTH@ 47
------INS MethodInvocation@@jobExecution1.setStatus(BatchStatus.COMPLETED) @TO@ ExpressionStatement@@MethodInvocation:jobExecution1.setStatus(BatchStatus.COMPLETED) @AT@ 8650 @LENGTH@ 46
---------INS SimpleName@@Name:jobExecution1 @TO@ MethodInvocation@@jobExecution1.setStatus(BatchStatus.COMPLETED) @AT@ 8650 @LENGTH@ 13
---------INS SimpleName@@MethodName:setStatus:[BatchStatus.COMPLETED] @TO@ MethodInvocation@@jobExecution1.setStatus(BatchStatus.COMPLETED) @AT@ 8664 @LENGTH@ 32
------------INS QualifiedName@@BatchStatus.COMPLETED @TO@ SimpleName@@MethodName:setStatus:[BatchStatus.COMPLETED] @AT@ 8674 @LENGTH@ 21
---------------INS SimpleName@@BatchStatus @TO@ QualifiedName@@BatchStatus.COMPLETED @AT@ 8674 @LENGTH@ 11
---------------INS SimpleName@@COMPLETED @TO@ QualifiedName@@BatchStatus.COMPLETED @AT@ 8686 @LENGTH@ 9
---INS ExpressionStatement@@MethodInvocation:jobExecution1.setEndTime(new Date()) @TO@ MethodDeclaration@@public, void, MethodName:testReExecuteWithSameJobParameters, Exception,  @AT@ 8700 @LENGTH@ 37
------INS MethodInvocation@@jobExecution1.setEndTime(new Date()) @TO@ ExpressionStatement@@MethodInvocation:jobExecution1.setEndTime(new Date()) @AT@ 8700 @LENGTH@ 36
---------INS SimpleName@@Name:jobExecution1 @TO@ MethodInvocation@@jobExecution1.setEndTime(new Date()) @AT@ 8700 @LENGTH@ 13
---------INS SimpleName@@MethodName:setEndTime:[new Date()] @TO@ MethodInvocation@@jobExecution1.setEndTime(new Date()) @AT@ 8714 @LENGTH@ 22
------------INS ClassInstanceCreation@@Date[] @TO@ SimpleName@@MethodName:setEndTime:[new Date()] @AT@ 8725 @LENGTH@ 10
---------------INS New@@new @TO@ ClassInstanceCreation@@Date[] @AT@ 8725 @LENGTH@ 3
---------------INS SimpleType@@Date @TO@ ClassInstanceCreation@@Date[] @AT@ 8729 @LENGTH@ 4
---INS ExpressionStatement@@MethodInvocation:jobRepository.update(jobExecution1) @TO@ MethodDeclaration@@public, void, MethodName:testReExecuteWithSameJobParameters, Exception,  @AT@ 8740 @LENGTH@ 36
------INS MethodInvocation@@jobRepository.update(jobExecution1) @TO@ ExpressionStatement@@MethodInvocation:jobRepository.update(jobExecution1) @AT@ 8740 @LENGTH@ 35
---------INS SimpleName@@Name:jobRepository @TO@ MethodInvocation@@jobRepository.update(jobExecution1) @AT@ 8740 @LENGTH@ 13
---------INS SimpleName@@MethodName:update:[jobExecution1] @TO@ MethodInvocation@@jobRepository.update(jobExecution1) @AT@ 8754 @LENGTH@ 21
------------INS SimpleName@@jobExecution1 @TO@ SimpleName@@MethodName:update:[jobExecution1] @AT@ 8761 @LENGTH@ 13
---INS VariableDeclarationStatement@@JobExecution jobExecution2=jobRepository.createJobExecution(job.getName(),jobParameters); @TO@ MethodDeclaration@@public, void, MethodName:testReExecuteWithSameJobParameters, Exception,  @AT@ 8779 @LENGTH@ 92
------INS SimpleType@@JobExecution @TO@ VariableDeclarationStatement@@JobExecution jobExecution2=jobRepository.createJobExecution(job.getName(),jobParameters); @AT@ 8779 @LENGTH@ 12
------INS VariableDeclarationFragment@@jobExecution2=jobRepository.createJobExecution(job.getName(),jobParameters) @TO@ VariableDeclarationStatement@@JobExecution jobExecution2=jobRepository.createJobExecution(job.getName(),jobParameters); @AT@ 8792 @LENGTH@ 78
---------INS SimpleName@@jobExecution2 @TO@ VariableDeclarationFragment@@jobExecution2=jobRepository.createJobExecution(job.getName(),jobParameters) @AT@ 8792 @LENGTH@ 13
---------INS MethodInvocation@@jobRepository.createJobExecution(job.getName(),jobParameters) @TO@ VariableDeclarationFragment@@jobExecution2=jobRepository.createJobExecution(job.getName(),jobParameters) @AT@ 8808 @LENGTH@ 62
------------INS SimpleName@@Name:jobRepository @TO@ MethodInvocation@@jobRepository.createJobExecution(job.getName(),jobParameters) @AT@ 8808 @LENGTH@ 13
------------INS SimpleName@@MethodName:createJobExecution:[job.getName(), jobParameters] @TO@ MethodInvocation@@jobRepository.createJobExecution(job.getName(),jobParameters) @AT@ 8822 @LENGTH@ 48
---------------INS MethodInvocation@@job.getName() @TO@ SimpleName@@MethodName:createJobExecution:[job.getName(), jobParameters] @AT@ 8841 @LENGTH@ 13
------------------INS SimpleName@@Name:job @TO@ MethodInvocation@@job.getName() @AT@ 8841 @LENGTH@ 3
------------------INS SimpleName@@MethodName:getName:[] @TO@ MethodInvocation@@job.getName() @AT@ 8845 @LENGTH@ 9
---------------INS SimpleName@@jobParameters @TO@ SimpleName@@MethodName:createJobExecution:[job.getName(), jobParameters] @AT@ 8856 @LENGTH@ 13
---INS ExpressionStatement@@MethodInvocation:assertNotNull(jobExecution1) @TO@ MethodDeclaration@@public, void, MethodName:testReExecuteWithSameJobParameters, Exception,  @AT@ 8874 @LENGTH@ 29
------INS MethodInvocation@@assertNotNull(jobExecution1) @TO@ ExpressionStatement@@MethodInvocation:assertNotNull(jobExecution1) @AT@ 8874 @LENGTH@ 28
---------INS SimpleName@@MethodName:assertNotNull:[jobExecution1] @TO@ MethodInvocation@@assertNotNull(jobExecution1) @AT@ 8874 @LENGTH@ 28
------------INS SimpleName@@jobExecution1 @TO@ SimpleName@@MethodName:assertNotNull:[jobExecution1] @AT@ 8888 @LENGTH@ 13
---INS ExpressionStatement@@MethodInvocation:assertNotNull(jobExecution2) @TO@ MethodDeclaration@@public, void, MethodName:testReExecuteWithSameJobParameters, Exception,  @AT@ 8906 @LENGTH@ 29
------INS MethodInvocation@@assertNotNull(jobExecution2) @TO@ ExpressionStatement@@MethodInvocation:assertNotNull(jobExecution2) @AT@ 8906 @LENGTH@ 28
---------INS SimpleName@@MethodName:assertNotNull:[jobExecution2] @TO@ MethodInvocation@@assertNotNull(jobExecution2) @AT@ 8906 @LENGTH@ 28
------------INS SimpleName@@jobExecution2 @TO@ SimpleName@@MethodName:assertNotNull:[jobExecution2] @AT@ 8920 @LENGTH@ 13


UPD IfStatement@@if (multiline || (maxChars > 0 && sb.length() > maxChars)) {  StringBuilder answer=new StringBuilder();  for (  String s : sb.toString().split(SEPARATOR)) {    if (s != null) {      if (s.length() > maxChars) {        s=s.substring(0,maxChars);        answer.append(s).append("...");      } else {        answer.append(s);      }      if (multiline) {        answer.append(LS);      }    }  }  sb=answer;} @TO@ if (multiline || maxChars > 0 && sb.length() > maxChars) {  StringBuilder answer=new StringBuilder();  for (  String s : sb.toString().split(SEPARATOR)) {    if (s != null) {      if (s.length() > maxChars) {        s=s.substring(0,maxChars);        answer.append(s).append("...");      } else {        answer.append(s);      }      if (multiline) {        answer.append(LS);      }    }  }  sb=answer;} @AT@ 8778 @LENGTH@ 669
---UPD InfixExpression@@multiline || (maxChars > 0 && sb.length() > maxChars) @TO@ multiline || maxChars > 0 && sb.length() > maxChars @AT@ 8782 @LENGTH@ 53
------DEL ParenthesizedExpression@@(maxChars > 0 && sb.length() > maxChars) @AT@ 8795 @LENGTH@ 40
------MOV InfixExpression@@maxChars > 0 && sb.length() > maxChars @TO@ InfixExpression@@multiline || (maxChars > 0 && sb.length() > maxChars) @AT@ 8796 @LENGTH@ 38


UPD ExpressionStatement@@MethodInvocation:from("file://target/testDeleteZipFileWhenUnmarshalWithDataFormat?delete=true").unmarshal(dataFormat).split(bodyAs(Iterator.class)).streaming().convertBodyTo(String.class).to("mock:end").end() @TO@ MethodInvocation:from("file://target/testDeleteZipFileWhenUnmarshalWithDataFormat?delay=10&delete=true").unmarshal(dataFormat).split(bodyAs(Iterator.class)).streaming().convertBodyTo(String.class).to("mock:end").end() @AT@ 3354 @LENGTH@ 317
---UPD MethodInvocation@@from("file://target/testDeleteZipFileWhenUnmarshalWithDataFormat?delete=true").unmarshal(dataFormat).split(bodyAs(Iterator.class)).streaming().convertBodyTo(String.class).to("mock:end").end() @TO@ from("file://target/testDeleteZipFileWhenUnmarshalWithDataFormat?delay=10&delete=true").unmarshal(dataFormat).split(bodyAs(Iterator.class)).streaming().convertBodyTo(String.class).to("mock:end").end() @AT@ 3354 @LENGTH@ 316
------UPD MethodInvocation@@MethodName:from:["file://target/testDeleteZipFileWhenUnmarshalWithDataFormat?delete=true"] @TO@ MethodName:from:["file://target/testDeleteZipFileWhenUnmarshalWithDataFormat?delay=10&delete=true"] @AT@ 3354 @LENGTH@ 78
---------UPD StringLiteral@@"file://target/testDeleteZipFileWhenUnmarshalWithDataFormat?delete=true" @TO@ "file://target/testDeleteZipFileWhenUnmarshalWithDataFormat?delay=10&delete=true" @AT@ 3359 @LENGTH@ 72


UPD MethodDeclaration@@private, void, T extends Throwable, MethodName:logOrRethrowDeclarationException, Declarable element, String elementType, T t, T,  @TO@ private, void, T extends Throwable, MethodName:logOrRethrowDeclarationException, @Nullable Declarable element, String elementType, T t, T,  @AT@ 26702 @LENGTH@ 832
---UPD SingleVariableDeclaration@@Declarable element @TO@ @Nullable Declarable element @AT@ 26770 @LENGTH@ 18


UPD ExpressionStatement@@MethodInvocation:fb.setMessageRecoverer(new RejectAndDontRequeueRecoverer()) @TO@ MethodInvocation:fb.setMessageRecoverer(new RejectAndDontRequeueRecoverer(() -> "Don't requeue after " + RetrySynchronizationManager.getContext().getRetryCount() + " attempts")) @AT@ 6116 @LENGTH@ 60
---UPD MethodInvocation@@fb.setMessageRecoverer(new RejectAndDontRequeueRecoverer()) @TO@ fb.setMessageRecoverer(new RejectAndDontRequeueRecoverer(() -> "Don't requeue after " + RetrySynchronizationManager.getContext().getRetryCount() + " attempts")) @AT@ 6116 @LENGTH@ 59
------UPD SimpleName@@MethodName:setMessageRecoverer:[new RejectAndDontRequeueRecoverer()] @TO@ MethodName:setMessageRecoverer:[new RejectAndDontRequeueRecoverer(() -> "Don't requeue after " + RetrySynchronizationManager.getContext().getRetryCount() + " attempts")] @AT@ 6119 @LENGTH@ 56
---------UPD ClassInstanceCreation@@RejectAndDontRequeueRecoverer[] @TO@ RejectAndDontRequeueRecoverer[() -> "Don't requeue after " + RetrySynchronizationManager.getContext().getRetryCount() + " attempts"] @AT@ 6139 @LENGTH@ 35
------------INS LambdaExpression@@() -> "Don't requeue after " + RetrySynchronizationManager.getContext().getRetryCount() + " attempts" @TO@ ClassInstanceCreation@@RejectAndDontRequeueRecoverer[] @AT@ 6243 @LENGTH@ 104
---------------INS InfixExpression@@"Don't requeue after " + RetrySynchronizationManager.getContext().getRetryCount() + " attempts" @TO@ LambdaExpression@@() -> "Don't requeue after " + RetrySynchronizationManager.getContext().getRetryCount() + " attempts" @AT@ 6252 @LENGTH@ 95
------------------INS StringLiteral@@"Don't requeue after " @TO@ InfixExpression@@"Don't requeue after " + RetrySynchronizationManager.getContext().getRetryCount() + " attempts" @AT@ 6252 @LENGTH@ 22
------------------INS Operator@@+ @TO@ InfixExpression@@"Don't requeue after " + RetrySynchronizationManager.getContext().getRetryCount() + " attempts" @AT@ 6274 @LENGTH@ 1
------------------INS MethodInvocation@@RetrySynchronizationManager.getContext().getRetryCount() @TO@ InfixExpression@@"Don't requeue after " + RetrySynchronizationManager.getContext().getRetryCount() + " attempts" @AT@ 6277 @LENGTH@ 56
---------------------INS MethodInvocation@@MethodName:getContext:[] @TO@ MethodInvocation@@RetrySynchronizationManager.getContext().getRetryCount() @AT@ 6277 @LENGTH@ 40
---------------------INS SimpleName@@Name:RetrySynchronizationManager @TO@ MethodInvocation@@RetrySynchronizationManager.getContext().getRetryCount() @AT@ 6277 @LENGTH@ 27
---------------------INS SimpleName@@MethodName:getRetryCount:[] @TO@ MethodInvocation@@RetrySynchronizationManager.getContext().getRetryCount() @AT@ 6318 @LENGTH@ 15
------------------INS StringLiteral@@" attempts" @TO@ InfixExpression@@"Don't requeue after " + RetrySynchronizationManager.getContext().getRetryCount() + " attempts" @AT@ 6336 @LENGTH@ 11


UPD Block@@ThenBody:{  for (  Map.Entry<String,Attachment> entry : exchange.getIn(AttachmentMessage.class).getAttachmentObjects().entrySet()) {    String attachmentFilename=entry.getKey();    Attachment attachment=entry.getValue();    part=new MimeBodyPart();    part.setDataHandler(attachment.getDataHandler());    part.setFileName(MimeUtility.encodeText(attachmentFilename,"UTF-8",null));    String ct=attachment.getDataHandler().getContentType();    contentType=new ContentType(ct);    part.setHeader(CONTENT_TYPE,ct);    if (!contentType.match("text/*") && binaryContent) {      part.setHeader(CONTENT_TRANSFER_ENCODING,"binary");    } else {      setContentTransferEncoding(part,contentType);    }    for (    String headerName : attachment.getHeaderNames()) {      List<String> values=attachment.getHeaderAsList(headerName);      for (      String value : values) {        part.setHeader(headerName,value);      }    }    mp.addBodyPart(part);    exchange.getMessage(AttachmentMessage.class).removeAttachment(attachmentFilename);  }} @TO@ ThenBody:{  List<String> idsToRemove=new ArrayList<>();  for (  Map.Entry<String,Attachment> entry : exchange.getIn(AttachmentMessage.class).getAttachmentObjects().entrySet()) {    String attachmentFilename=entry.getKey();    Attachment attachment=entry.getValue();    part=new MimeBodyPart();    part.setDataHandler(attachment.getDataHandler());    part.setFileName(MimeUtility.encodeText(attachmentFilename,"UTF-8",null));    String ct=attachment.getDataHandler().getContentType();    contentType=new ContentType(ct);    part.setHeader(CONTENT_TYPE,ct);    if (!contentType.match("text/*") && binaryContent) {      part.setHeader(CONTENT_TRANSFER_ENCODING,"binary");    } else {      setContentTransferEncoding(part,contentType);    }    for (    String headerName : attachment.getHeaderNames()) {      List<String> values=attachment.getHeaderAsList(headerName);      for (      String value : values) {        part.setHeader(headerName,value);      }    }    mp.addBodyPart(part);    idsToRemove.add(attachmentFilename);  }  for (  String id : idsToRemove) {    exchange.getMessage(AttachmentMessage.class).removeAttachment(id);  }} @AT@ 4788 @LENGTH@ 1518
---UPD EnhancedForStatement@@for (Map.Entry<String,Attachment> entry : exchange.getIn(AttachmentMessage.class).getAttachmentObjects().entrySet()) {  String attachmentFilename=entry.getKey();  Attachment attachment=entry.getValue();  part=new MimeBodyPart();  part.setDataHandler(attachment.getDataHandler());  part.setFileName(MimeUtility.encodeText(attachmentFilename,"UTF-8",null));  String ct=attachment.getDataHandler().getContentType();  contentType=new ContentType(ct);  part.setHeader(CONTENT_TYPE,ct);  if (!contentType.match("text/*") && binaryContent) {    part.setHeader(CONTENT_TRANSFER_ENCODING,"binary");  } else {    setContentTransferEncoding(part,contentType);  }  for (  String headerName : attachment.getHeaderNames()) {    List<String> values=attachment.getHeaderAsList(headerName);    for (    String value : values) {      part.setHeader(headerName,value);    }  }  mp.addBodyPart(part);  exchange.getMessage(AttachmentMessage.class).removeAttachment(attachmentFilename);} @TO@ for (Map.Entry<String,Attachment> entry : exchange.getIn(AttachmentMessage.class).getAttachmentObjects().entrySet()) {  String attachmentFilename=entry.getKey();  Attachment attachment=entry.getValue();  part=new MimeBodyPart();  part.setDataHandler(attachment.getDataHandler());  part.setFileName(MimeUtility.encodeText(attachmentFilename,"UTF-8",null));  String ct=attachment.getDataHandler().getContentType();  contentType=new ContentType(ct);  part.setHeader(CONTENT_TYPE,ct);  if (!contentType.match("text/*") && binaryContent) {    part.setHeader(CONTENT_TRANSFER_ENCODING,"binary");  } else {    setContentTransferEncoding(part,contentType);  }  for (  String headerName : attachment.getHeaderNames()) {    List<String> values=attachment.getHeaderAsList(headerName);    for (    String value : values) {      part.setHeader(headerName,value);    }  }  mp.addBodyPart(part);  idsToRemove.add(attachmentFilename);} @AT@ 4806 @LENGTH@ 1486
------UPD ExpressionStatement@@MethodInvocation:exchange.getMessage(AttachmentMessage.class).removeAttachment(attachmentFilename) @TO@ MethodInvocation:idsToRemove.add(attachmentFilename) @AT@ 6192 @LENGTH@ 82
---------UPD MethodInvocation@@exchange.getMessage(AttachmentMessage.class).removeAttachment(attachmentFilename) @TO@ idsToRemove.add(attachmentFilename) @AT@ 6192 @LENGTH@ 81
------------DEL MethodInvocation@@MethodName:getMessage:[AttachmentMessage.class] @AT@ 6192 @LENGTH@ 44
---------------DEL TypeLiteral@@AttachmentMessage.class @AT@ 6212 @LENGTH@ 23
------------UPD SimpleName@@Name:exchange @TO@ Name:idsToRemove @AT@ 6192 @LENGTH@ 8
------------UPD SimpleName@@MethodName:removeAttachment:[attachmentFilename] @TO@ MethodName:add:[attachmentFilename] @AT@ 6237 @LENGTH@ 36
---INS VariableDeclarationStatement@@List<String> idsToRemove=new ArrayList<>(); @TO@ Block@@ThenBody:{  for (  Map.Entry<String,Attachment> entry : exchange.getIn(AttachmentMessage.class).getAttachmentObjects().entrySet()) {    String attachmentFilename=entry.getKey();    Attachment attachment=entry.getValue();    part=new MimeBodyPart();    part.setDataHandler(attachment.getDataHandler());    part.setFileName(MimeUtility.encodeText(attachmentFilename,"UTF-8",null));    String ct=attachment.getDataHandler().getContentType();    contentType=new ContentType(ct);    part.setHeader(CONTENT_TYPE,ct);    if (!contentType.match("text/*") && binaryContent) {      part.setHeader(CONTENT_TRANSFER_ENCODING,"binary");    } else {      setContentTransferEncoding(part,contentType);    }    for (    String headerName : attachment.getHeaderNames()) {      List<String> values=attachment.getHeaderAsList(headerName);      for (      String value : values) {        part.setHeader(headerName,value);      }    }    mp.addBodyPart(part);    exchange.getMessage(AttachmentMessage.class).removeAttachment(attachmentFilename);  }} @AT@ 4806 @LENGTH@ 45
------INS ParameterizedType@@List<String> @TO@ VariableDeclarationStatement@@List<String> idsToRemove=new ArrayList<>(); @AT@ 4806 @LENGTH@ 12
---------INS SimpleType@@List @TO@ ParameterizedType@@List<String> @AT@ 4806 @LENGTH@ 4
---------INS SimpleType@@String @TO@ ParameterizedType@@List<String> @AT@ 4811 @LENGTH@ 6
------INS VariableDeclarationFragment@@idsToRemove=new ArrayList<>() @TO@ VariableDeclarationStatement@@List<String> idsToRemove=new ArrayList<>(); @AT@ 4819 @LENGTH@ 31
---------INS SimpleName@@idsToRemove @TO@ VariableDeclarationFragment@@idsToRemove=new ArrayList<>() @AT@ 4819 @LENGTH@ 11
---------INS ClassInstanceCreation@@ArrayList<>[] @TO@ VariableDeclarationFragment@@idsToRemove=new ArrayList<>() @AT@ 4833 @LENGTH@ 17
------------INS New@@new @TO@ ClassInstanceCreation@@ArrayList<>[] @AT@ 4833 @LENGTH@ 3
------------INS ParameterizedType@@ArrayList<> @TO@ ClassInstanceCreation@@ArrayList<>[] @AT@ 4837 @LENGTH@ 11
---------------INS SimpleType@@ArrayList @TO@ ParameterizedType@@ArrayList<> @AT@ 4837 @LENGTH@ 9
---INS EnhancedForStatement@@for (String id : idsToRemove) {  exchange.getMessage(AttachmentMessage.class).removeAttachment(id);} @TO@ Block@@ThenBody:{  for (  Map.Entry<String,Attachment> entry : exchange.getIn(AttachmentMessage.class).getAttachmentObjects().entrySet()) {    String attachmentFilename=entry.getKey();    Attachment attachment=entry.getValue();    part=new MimeBodyPart();    part.setDataHandler(attachment.getDataHandler());    part.setFileName(MimeUtility.encodeText(attachmentFilename,"UTF-8",null));    String ct=attachment.getDataHandler().getContentType();    contentType=new ContentType(ct);    part.setHeader(CONTENT_TYPE,ct);    if (!contentType.match("text/*") && binaryContent) {      part.setHeader(CONTENT_TRANSFER_ENCODING,"binary");    } else {      setContentTransferEncoding(part,contentType);    }    for (    String headerName : attachment.getHeaderNames()) {      List<String> values=attachment.getHeaderAsList(headerName);      for (      String value : values) {        part.setHeader(headerName,value);      }    }    mp.addBodyPart(part);    exchange.getMessage(AttachmentMessage.class).removeAttachment(attachmentFilename);  }} @AT@ 6325 @LENGTH@ 136
------INS SingleVariableDeclaration@@String id @TO@ EnhancedForStatement@@for (String id : idsToRemove) {  exchange.getMessage(AttachmentMessage.class).removeAttachment(id);} @AT@ 6330 @LENGTH@ 9
---------INS SimpleType@@String @TO@ SingleVariableDeclaration@@String id @AT@ 6330 @LENGTH@ 6
---------INS SimpleName@@id @TO@ SingleVariableDeclaration@@String id @AT@ 6337 @LENGTH@ 2
------INS SimpleName@@idsToRemove @TO@ EnhancedForStatement@@for (String id : idsToRemove) {  exchange.getMessage(AttachmentMessage.class).removeAttachment(id);} @AT@ 6342 @LENGTH@ 11
------INS ExpressionStatement@@MethodInvocation:exchange.getMessage(AttachmentMessage.class).removeAttachment(id) @TO@ EnhancedForStatement@@for (String id : idsToRemove) {  exchange.getMessage(AttachmentMessage.class).removeAttachment(id);} @AT@ 6377 @LENGTH@ 66
---------INS MethodInvocation@@exchange.getMessage(AttachmentMessage.class).removeAttachment(id) @TO@ ExpressionStatement@@MethodInvocation:exchange.getMessage(AttachmentMessage.class).removeAttachment(id) @AT@ 6377 @LENGTH@ 65
------------INS MethodInvocation@@MethodName:getMessage:[AttachmentMessage.class] @TO@ MethodInvocation@@exchange.getMessage(AttachmentMessage.class).removeAttachment(id) @AT@ 6377 @LENGTH@ 44
---------------INS TypeLiteral@@AttachmentMessage.class @TO@ MethodInvocation@@MethodName:getMessage:[AttachmentMessage.class] @AT@ 6397 @LENGTH@ 23
------------INS SimpleName@@Name:exchange @TO@ MethodInvocation@@exchange.getMessage(AttachmentMessage.class).removeAttachment(id) @AT@ 6377 @LENGTH@ 8
------------INS SimpleName@@MethodName:removeAttachment:[id] @TO@ MethodInvocation@@exchange.getMessage(AttachmentMessage.class).removeAttachment(id) @AT@ 6422 @LENGTH@ 20
---------------INS SimpleName@@id @TO@ SimpleName@@MethodName:removeAttachment:[id] @AT@ 6439 @LENGTH@ 2


UPD ExpressionStatement@@MethodInvocation:LOG.trace("Ignoring start() as NO_START is false") @TO@ MethodInvocation:LOG.trace("Ignoring start() as NO_START is true") @AT@ 6109 @LENGTH@ 51
---UPD MethodInvocation@@LOG.trace("Ignoring start() as NO_START is false") @TO@ LOG.trace("Ignoring start() as NO_START is true") @AT@ 6109 @LENGTH@ 50
------UPD SimpleName@@MethodName:trace:["Ignoring start() as NO_START is false"] @TO@ MethodName:trace:["Ignoring start() as NO_START is true"] @AT@ 6113 @LENGTH@ 46
---------UPD StringLiteral@@"Ignoring start() as NO_START is false" @TO@ "Ignoring start() as NO_START is true" @AT@ 6119 @LENGTH@ 39


UPD IfStatement@@if (accept(file) && Files.exists(file,linkOptions)) {  if (overrideReadOnly) {    PathUtils.setReadOnly(file,false,linkOptions);  }  Files.deleteIfExists(file);} @TO@ if (Files.exists(file,linkOptions)) {  if (overrideReadOnly) {    PathUtils.setReadOnly(file,false,linkOptions);  }  Files.deleteIfExists(file);} @AT@ 5662 @LENGTH@ 219


MOV FieldDeclaration@@private, static, int, [topicId=0] @TO@ TypeDeclaration@@[public]PulsarConsumerDeadLetterPolicyTest, PulsarTestSupport @AT@ 2255 @LENGTH@ 31


UPD VariableDeclarationStatement@@boolean enabled=camelContext.isAutowiredEnabled(); @TO@ boolean enabled=camelContext.isAutowiredEnabled() && component.isAutowiredEnabled(); @AT@ 1786 @LENGTH@ 52
---UPD VariableDeclarationFragment@@enabled=camelContext.isAutowiredEnabled() @TO@ enabled=camelContext.isAutowiredEnabled() && component.isAutowiredEnabled() @AT@ 1794 @LENGTH@ 43
------DEL MethodInvocation@@camelContext.isAutowiredEnabled() @AT@ 1804 @LENGTH@ 33
------INS InfixExpression@@camelContext.isAutowiredEnabled() && component.isAutowiredEnabled() @TO@ VariableDeclarationFragment@@enabled=camelContext.isAutowiredEnabled() @AT@ 1822 @LENGTH@ 67
---------INS MethodInvocation@@camelContext.isAutowiredEnabled() @TO@ InfixExpression@@camelContext.isAutowiredEnabled() && component.isAutowiredEnabled() @AT@ 1822 @LENGTH@ 33
------------MOV SimpleName@@Name:camelContext @TO@ MethodInvocation@@camelContext.isAutowiredEnabled() @AT@ 1804 @LENGTH@ 12
------------MOV SimpleName@@MethodName:isAutowiredEnabled:[] @TO@ MethodInvocation@@camelContext.isAutowiredEnabled() @AT@ 1817 @LENGTH@ 20
---------INS Operator@@&& @TO@ InfixExpression@@camelContext.isAutowiredEnabled() && component.isAutowiredEnabled() @AT@ 1855 @LENGTH@ 2
---------INS MethodInvocation@@component.isAutowiredEnabled() @TO@ InfixExpression@@camelContext.isAutowiredEnabled() && component.isAutowiredEnabled() @AT@ 1859 @LENGTH@ 30
------------INS SimpleName@@Name:component @TO@ MethodInvocation@@component.isAutowiredEnabled() @AT@ 1859 @LENGTH@ 9
------------INS SimpleName@@MethodName:isAutowiredEnabled:[] @TO@ MethodInvocation@@component.isAutowiredEnabled() @AT@ 1869 @LENGTH@ 20


UPD ExpressionStatement@@MethodInvocation:log.error("Can't create table for JdbcMessageIdRepository with query '{}' because of: {}. This may be a permissions problem. Please create this table and try again.",getCreateString(),e.getMessage()) @TO@ MethodInvocation:log.error("Can't create table for JdbcMessageIdRepository with query '{}' because of: {}. This may be a permissions problem. Please create this table and try again.",getCreateString(),dae.getMessage()) @AT@ 4562 @LENGTH@ 275
---UPD MethodInvocation@@log.error("Can't create table for JdbcMessageIdRepository with query '{}' because of: {}. This may be a permissions problem. Please create this table and try again.",getCreateString(),e.getMessage()) @TO@ log.error("Can't create table for JdbcMessageIdRepository with query '{}' because of: {}. This may be a permissions problem. Please create this table and try again.",getCreateString(),dae.getMessage()) @AT@ 4562 @LENGTH@ 274
------UPD SimpleName@@MethodName:error:["Can't create table for JdbcMessageIdRepository with query '{}' because of: {}. This may be a permissions problem. Please create this table and try again.", getCreateString(), e.getMessage()] @TO@ MethodName:error:["Can't create table for JdbcMessageIdRepository with query '{}' because of: {}. This may be a permissions problem. Please create this table and try again.", getCreateString(), dae.getMessage()] @AT@ 4566 @LENGTH@ 270
---------UPD MethodInvocation@@e.getMessage() @TO@ dae.getMessage() @AT@ 4821 @LENGTH@ 14
------------UPD SimpleName@@Name:e @TO@ Name:dae @AT@ 4821 @LENGTH@ 1


UPD IfStatement@@if (additionalLabels.containsAll(labels)) {  Set<String> surplusLabels=new HashSet<>(labels);  surplusLabels.remove(primaryLabel);  surplusLabels.removeAll(additionalLabels);  return new NodeDescriptionAndLabels(childNodeDescription,surplusLabels);} @TO@ if (additionalLabels.containsAll(labels) && childNodeDescription.getChildNodeDescriptionsInHierarchy().isEmpty()) {  Set<String> surplusLabels=new HashSet<>(labels);  surplusLabels.remove(primaryLabel);  surplusLabels.removeAll(additionalLabels);  return new NodeDescriptionAndLabels(childNodeDescription,surplusLabels);} @AT@ 3192 @LENGTH@ 268
---INS InfixExpression@@additionalLabels.containsAll(labels) && childNodeDescription.getChildNodeDescriptionsInHierarchy().isEmpty() @TO@ IfStatement@@if (additionalLabels.containsAll(labels)) {  Set<String> surplusLabels=new HashSet<>(labels);  surplusLabels.remove(primaryLabel);  surplusLabels.removeAll(additionalLabels);  return new NodeDescriptionAndLabels(childNodeDescription,surplusLabels);} @AT@ 3196 @LENGTH@ 108
------MOV MethodInvocation@@additionalLabels.containsAll(labels) @TO@ InfixExpression@@additionalLabels.containsAll(labels) && childNodeDescription.getChildNodeDescriptionsInHierarchy().isEmpty() @AT@ 3196 @LENGTH@ 36
------INS Operator@@&& @TO@ InfixExpression@@additionalLabels.containsAll(labels) && childNodeDescription.getChildNodeDescriptionsInHierarchy().isEmpty() @AT@ 3232 @LENGTH@ 2
------INS MethodInvocation@@childNodeDescription.getChildNodeDescriptionsInHierarchy().isEmpty() @TO@ InfixExpression@@additionalLabels.containsAll(labels) && childNodeDescription.getChildNodeDescriptionsInHierarchy().isEmpty() @AT@ 3236 @LENGTH@ 68
---------INS MethodInvocation@@MethodName:getChildNodeDescriptionsInHierarchy:[] @TO@ MethodInvocation@@childNodeDescription.getChildNodeDescriptionsInHierarchy().isEmpty() @AT@ 3236 @LENGTH@ 58
---------INS SimpleName@@Name:childNodeDescription @TO@ MethodInvocation@@childNodeDescription.getChildNodeDescriptionsInHierarchy().isEmpty() @AT@ 3236 @LENGTH@ 20
---------INS SimpleName@@MethodName:isEmpty:[] @TO@ MethodInvocation@@childNodeDescription.getChildNodeDescriptionsInHierarchy().isEmpty() @AT@ 3295 @LENGTH@ 9


UPD EnhancedForStatement@@for (Path p : paths) {  if (p == null) {    continue;  }  String path=p.toString();  if (LOG.isDebugEnabled()) {    LOG.debug("Adding " + path + " of table "+ alias_id);  }  partDir.add(p);  try {    if (part.getTable().isPartitioned()) {      partDesc.add(Utilities.getPartitionDesc(part,tblDesc));    } else {      partDesc.add(Utilities.getPartitionDescFromTableDesc(tblDesc,part,false));    }  } catch (  HiveException e) {    LOG.error("Failed to add partition description",e);    throw new SemanticException(e.getMessage(),e);  }} @TO@ for (Path p : paths) {  if (p == null) {    continue;  }  if (LOG.isDebugEnabled()) {    LOG.debug("Adding " + p.toString() + " of table "+ alias_id);  }  partDir.add(p);  try {    if (part.getTable().isPartitioned()) {      partDesc.add(Utilities.getPartitionDesc(part,tblDesc));    } else {      partDesc.add(Utilities.getPartitionDescFromTableDesc(tblDesc,part,false));    }  } catch (  HiveException e) {    LOG.error("Failed to add partition description",e);    throw new SemanticException(e.getMessage(),e);  }} @AT@ 26449 @LENGTH@ 686
---DEL VariableDeclarationStatement@@String path=p.toString(); @AT@ 26535 @LENGTH@ 27
------DEL SimpleType@@String @AT@ 26535 @LENGTH@ 6
------DEL VariableDeclarationFragment@@path=p.toString() @AT@ 26542 @LENGTH@ 19
---------DEL SimpleName@@path @AT@ 26542 @LENGTH@ 4
---------DEL MethodInvocation@@p.toString() @AT@ 26549 @LENGTH@ 12
------------DEL SimpleName@@Name:p @AT@ 26549 @LENGTH@ 1
------------DEL SimpleName@@MethodName:toString:[] @AT@ 26551 @LENGTH@ 10
---UPD IfStatement@@if (LOG.isDebugEnabled()) {  LOG.debug("Adding " + path + " of table "+ alias_id);} @TO@ if (LOG.isDebugEnabled()) {  LOG.debug("Adding " + p.toString() + " of table "+ alias_id);} @AT@ 26571 @LENGTH@ 102
------UPD Block@@ThenBody:{  LOG.debug("Adding " + path + " of table "+ alias_id);} @TO@ ThenBody:{  LOG.debug("Adding " + p.toString() + " of table "+ alias_id);} @AT@ 26597 @LENGTH@ 76
---------UPD ExpressionStatement@@MethodInvocation:LOG.debug("Adding " + path + " of table "+ alias_id) @TO@ MethodInvocation:LOG.debug("Adding " + p.toString() + " of table "+ alias_id) @AT@ 26609 @LENGTH@ 54
------------UPD MethodInvocation@@LOG.debug("Adding " + path + " of table "+ alias_id) @TO@ LOG.debug("Adding " + p.toString() + " of table "+ alias_id) @AT@ 26609 @LENGTH@ 53
---------------UPD SimpleName@@MethodName:debug:["Adding " + path + " of table "+ alias_id] @TO@ MethodName:debug:["Adding " + p.toString() + " of table "+ alias_id] @AT@ 26613 @LENGTH@ 49
------------------UPD InfixExpression@@"Adding " + path + " of table "+ alias_id @TO@ "Adding " + p.toString() + " of table "+ alias_id @AT@ 26619 @LENGTH@ 42
---------------------INS MethodInvocation@@p.toString() @TO@ InfixExpression@@"Adding " + path + " of table "+ alias_id @AT@ 26595 @LENGTH@ 12
------------------------INS SimpleName@@Name:p @TO@ MethodInvocation@@p.toString() @AT@ 26595 @LENGTH@ 1
------------------------INS SimpleName@@MethodName:toString:[] @TO@ MethodInvocation@@p.toString() @AT@ 26597 @LENGTH@ 10
---------------------DEL SimpleName@@path @AT@ 26631 @LENGTH@ 4


UPD FieldDeclaration@@int, [i=0] @TO@ int, [i] @AT@ 14042 @LENGTH@ 10
---UPD VariableDeclarationFragment@@i=0 @TO@ i @AT@ 14046 @LENGTH@ 5
------DEL NumberLiteral@@0 @AT@ 14050 @LENGTH@ 1


UPD VariableDeclarationStatement@@String response=template.requestBodyAndHeaders("freemarker://http://localhost:" + port + "/test?name=header.ftl","",map,String.class); @TO@ String response=template.requestBodyAndHeaders("freemarker://http://localhost:" + port + "/test?name=header","",map,String.class); @AT@ 2703 @LENGTH@ 155
---UPD VariableDeclarationFragment@@response=template.requestBodyAndHeaders("freemarker://http://localhost:" + port + "/test?name=header.ftl","",map,String.class) @TO@ response=template.requestBodyAndHeaders("freemarker://http://localhost:" + port + "/test?name=header","",map,String.class) @AT@ 2710 @LENGTH@ 147
------UPD MethodInvocation@@template.requestBodyAndHeaders("freemarker://http://localhost:" + port + "/test?name=header.ftl","",map,String.class) @TO@ template.requestBodyAndHeaders("freemarker://http://localhost:" + port + "/test?name=header","",map,String.class) @AT@ 2721 @LENGTH@ 136
---------UPD SimpleName@@MethodName:requestBodyAndHeaders:["freemarker://http://localhost:" + port + "/test?name=header.ftl", "", map, String.class] @TO@ MethodName:requestBodyAndHeaders:["freemarker://http://localhost:" + port + "/test?name=header", "", map, String.class] @AT@ 2730 @LENGTH@ 127
------------UPD InfixExpression@@"freemarker://http://localhost:" + port + "/test?name=header.ftl" @TO@ "freemarker://http://localhost:" + port + "/test?name=header" @AT@ 2752 @LENGTH@ 65
---------------UPD StringLiteral@@"/test?name=header.ftl" @TO@ "/test?name=header" @AT@ 2794 @LENGTH@ 23


UPD TryStatement@@try {  Table t=resolveTable(ci);  if (t == null) {    LOG.info("Can't find table " + ci.getFullTableName() + ", assuming it's a temp "+ "table or has been dropped and moving on.");    return false;  }  if (replIsCompactionDisabledForDatabase(ci.dbname) || replIsCompactionDisabledForTable(t)) {    return false;  }  if (noAutoCompactSet(t)) {    LOG.info("Table " + tableName(t) + " marked "+ hive_metastoreConstants.TABLE_NO_AUTO_COMPACT+ "=true so we will not compact it.");    return false;  }  if (isDynPartIngest(t,ci)) {    return false;  }  if (txnHandler.checkFailedCompactions(ci)) {    LOG.warn("Will not initiate compaction for " + ci.getFullPartitionName() + " since last "+ MetastoreConf.ConfVars.COMPACTOR_INITIATOR_FAILED_THRESHOLD+ " attempts to compact it failed.");    ci.errorMessage="Compaction is not initiated since last " + MetastoreConf.ConfVars.COMPACTOR_INITIATOR_FAILED_THRESHOLD + " consecutive compaction attempts failed)";    txnHandler.markFailed(ci);    return false;  }} catch (Throwable e) {  LOG.error("Caught exception while checking compaction eligibility.",e);  try {    ci.errorMessage=e.getMessage();    txnHandler.markFailed(ci);  } catch (  MetaException ex) {    LOG.error("Caught exception while marking compaction as failed.",e);    return false;  }} @TO@ try {  Table t=resolveTable(ci);  if (t == null) {    LOG.info("Can't find table " + ci.getFullTableName() + ", assuming it's a temp "+ "table or has been dropped and moving on.");    return false;  }  if (replIsCompactionDisabledForDatabase(ci.dbname) || replIsCompactionDisabledForTable(t)) {    return false;  }  if (noAutoCompactSet(t)) {    LOG.info("Table " + tableName(t) + " marked "+ hive_metastoreConstants.TABLE_NO_AUTO_COMPACT+ "=true so we will not compact it.");    return false;  }  if (AcidUtils.isInsertOnlyTable(t.getParameters()) && !HiveConf.getBoolVar(conf,HiveConf.ConfVars.HIVE_COMPACTOR_COMPACT_MM)) {    LOG.info("Table " + tableName(t) + " is insert only and "+ HiveConf.ConfVars.HIVE_COMPACTOR_COMPACT_MM.varname+ "=false so we will not compact it.");    return false;  }  if (isDynPartIngest(t,ci)) {    return false;  }  if (txnHandler.checkFailedCompactions(ci)) {    LOG.warn("Will not initiate compaction for " + ci.getFullPartitionName() + " since last "+ MetastoreConf.ConfVars.COMPACTOR_INITIATOR_FAILED_THRESHOLD+ " attempts to compact it failed.");    ci.errorMessage="Compaction is not initiated since last " + MetastoreConf.ConfVars.COMPACTOR_INITIATOR_FAILED_THRESHOLD + " consecutive compaction attempts failed)";    txnHandler.markFailed(ci);    return false;  }} catch (Throwable e) {  LOG.error("Caught exception while checking compaction eligibility.",e);  try {    ci.errorMessage=e.getMessage();    txnHandler.markFailed(ci);  } catch (  MetaException ex) {    LOG.error("Caught exception while marking compaction as failed.",e);    return false;  }} @AT@ 20423 @LENGTH@ 1513
---INS IfStatement@@if (AcidUtils.isInsertOnlyTable(t.getParameters()) && !HiveConf.getBoolVar(conf,HiveConf.ConfVars.HIVE_COMPACTOR_COMPACT_MM)) {  LOG.info("Table " + tableName(t) + " is insert only and "+ HiveConf.ConfVars.HIVE_COMPACTOR_COMPACT_MM.varname+ "=false so we will not compact it.");  return false;} @TO@ TryStatement@@try {  Table t=resolveTable(ci);  if (t == null) {    LOG.info("Can't find table " + ci.getFullTableName() + ", assuming it's a temp "+ "table or has been dropped and moving on.");    return false;  }  if (replIsCompactionDisabledForDatabase(ci.dbname) || replIsCompactionDisabledForTable(t)) {    return false;  }  if (noAutoCompactSet(t)) {    LOG.info("Table " + tableName(t) + " marked "+ hive_metastoreConstants.TABLE_NO_AUTO_COMPACT+ "=true so we will not compact it.");    return false;  }  if (isDynPartIngest(t,ci)) {    return false;  }  if (txnHandler.checkFailedCompactions(ci)) {    LOG.warn("Will not initiate compaction for " + ci.getFullPartitionName() + " since last "+ MetastoreConf.ConfVars.COMPACTOR_INITIATOR_FAILED_THRESHOLD+ " attempts to compact it failed.");    ci.errorMessage="Compaction is not initiated since last " + MetastoreConf.ConfVars.COMPACTOR_INITIATOR_FAILED_THRESHOLD + " consecutive compaction attempts failed)";    txnHandler.markFailed(ci);    return false;  }} catch (Throwable e) {  LOG.error("Caught exception while checking compaction eligibility.",e);  try {    ci.errorMessage=e.getMessage();    txnHandler.markFailed(ci);  } catch (  MetaException ex) {    LOG.error("Caught exception while marking compaction as failed.",e);    return false;  }} @AT@ 21017 @LENGTH@ 341
------INS InfixExpression@@AcidUtils.isInsertOnlyTable(t.getParameters()) && !HiveConf.getBoolVar(conf,HiveConf.ConfVars.HIVE_COMPACTOR_COMPACT_MM) @TO@ IfStatement@@if (AcidUtils.isInsertOnlyTable(t.getParameters()) && !HiveConf.getBoolVar(conf,HiveConf.ConfVars.HIVE_COMPACTOR_COMPACT_MM)) {  LOG.info("Table " + tableName(t) + " is insert only and "+ HiveConf.ConfVars.HIVE_COMPACTOR_COMPACT_MM.varname+ "=false so we will not compact it.");  return false;} @AT@ 21021 @LENGTH@ 132
---------INS MethodInvocation@@AcidUtils.isInsertOnlyTable(t.getParameters()) @TO@ InfixExpression@@AcidUtils.isInsertOnlyTable(t.getParameters()) && !HiveConf.getBoolVar(conf,HiveConf.ConfVars.HIVE_COMPACTOR_COMPACT_MM) @AT@ 21021 @LENGTH@ 46
------------INS SimpleName@@Name:AcidUtils @TO@ MethodInvocation@@AcidUtils.isInsertOnlyTable(t.getParameters()) @AT@ 21021 @LENGTH@ 9
------------INS SimpleName@@MethodName:isInsertOnlyTable:[t.getParameters()] @TO@ MethodInvocation@@AcidUtils.isInsertOnlyTable(t.getParameters()) @AT@ 21031 @LENGTH@ 36
---------------INS MethodInvocation@@t.getParameters() @TO@ SimpleName@@MethodName:isInsertOnlyTable:[t.getParameters()] @AT@ 21049 @LENGTH@ 17
------------------INS SimpleName@@Name:t @TO@ MethodInvocation@@t.getParameters() @AT@ 21049 @LENGTH@ 1
------------------INS SimpleName@@MethodName:getParameters:[] @TO@ MethodInvocation@@t.getParameters() @AT@ 21051 @LENGTH@ 15
---------INS Operator@@&& @TO@ InfixExpression@@AcidUtils.isInsertOnlyTable(t.getParameters()) && !HiveConf.getBoolVar(conf,HiveConf.ConfVars.HIVE_COMPACTOR_COMPACT_MM) @AT@ 21067 @LENGTH@ 2
---------INS PrefixExpression@@!HiveConf.getBoolVar(conf,HiveConf.ConfVars.HIVE_COMPACTOR_COMPACT_MM) @TO@ InfixExpression@@AcidUtils.isInsertOnlyTable(t.getParameters()) && !HiveConf.getBoolVar(conf,HiveConf.ConfVars.HIVE_COMPACTOR_COMPACT_MM) @AT@ 21071 @LENGTH@ 82
------------INS Operator@@! @TO@ PrefixExpression@@!HiveConf.getBoolVar(conf,HiveConf.ConfVars.HIVE_COMPACTOR_COMPACT_MM) @AT@ 21071 @LENGTH@ 1
------------INS MethodInvocation@@HiveConf.getBoolVar(conf,HiveConf.ConfVars.HIVE_COMPACTOR_COMPACT_MM) @TO@ PrefixExpression@@!HiveConf.getBoolVar(conf,HiveConf.ConfVars.HIVE_COMPACTOR_COMPACT_MM) @AT@ 21072 @LENGTH@ 81
---------------INS SimpleName@@Name:HiveConf @TO@ MethodInvocation@@HiveConf.getBoolVar(conf,HiveConf.ConfVars.HIVE_COMPACTOR_COMPACT_MM) @AT@ 21072 @LENGTH@ 8
---------------INS SimpleName@@MethodName:getBoolVar:[conf, HiveConf.ConfVars.HIVE_COMPACTOR_COMPACT_MM] @TO@ MethodInvocation@@HiveConf.getBoolVar(conf,HiveConf.ConfVars.HIVE_COMPACTOR_COMPACT_MM) @AT@ 21092 @LENGTH@ 61
------------------INS SimpleName@@conf @TO@ SimpleName@@MethodName:getBoolVar:[conf, HiveConf.ConfVars.HIVE_COMPACTOR_COMPACT_MM] @AT@ 21103 @LENGTH@ 4
------------------INS QualifiedName@@HiveConf.ConfVars.HIVE_COMPACTOR_COMPACT_MM @TO@ SimpleName@@MethodName:getBoolVar:[conf, HiveConf.ConfVars.HIVE_COMPACTOR_COMPACT_MM] @AT@ 21109 @LENGTH@ 43
---------------------INS QualifiedName@@HiveConf.ConfVars @TO@ QualifiedName@@HiveConf.ConfVars.HIVE_COMPACTOR_COMPACT_MM @AT@ 21109 @LENGTH@ 17
------------------------INS SimpleName@@HiveConf @TO@ QualifiedName@@HiveConf.ConfVars @AT@ 21109 @LENGTH@ 8
------------------------INS SimpleName@@ConfVars @TO@ QualifiedName@@HiveConf.ConfVars @AT@ 21118 @LENGTH@ 8
---------------------INS SimpleName@@HIVE_COMPACTOR_COMPACT_MM @TO@ QualifiedName@@HiveConf.ConfVars.HIVE_COMPACTOR_COMPACT_MM @AT@ 21127 @LENGTH@ 25
------INS Block@@ThenBody:{  LOG.info("Table " + tableName(t) + " is insert only and "+ HiveConf.ConfVars.HIVE_COMPACTOR_COMPACT_MM.varname+ "=false so we will not compact it.");  return false;} @TO@ IfStatement@@if (AcidUtils.isInsertOnlyTable(t.getParameters()) && !HiveConf.getBoolVar(conf,HiveConf.ConfVars.HIVE_COMPACTOR_COMPACT_MM)) {  LOG.info("Table " + tableName(t) + " is insert only and "+ HiveConf.ConfVars.HIVE_COMPACTOR_COMPACT_MM.varname+ "=false so we will not compact it.");  return false;} @AT@ 21155 @LENGTH@ 203
---------INS ExpressionStatement@@MethodInvocation:LOG.info("Table " + tableName(t) + " is insert only and "+ HiveConf.ConfVars.HIVE_COMPACTOR_COMPACT_MM.varname+ "=false so we will not compact it.") @TO@ Block@@ThenBody:{  LOG.info("Table " + tableName(t) + " is insert only and "+ HiveConf.ConfVars.HIVE_COMPACTOR_COMPACT_MM.varname+ "=false so we will not compact it.");  return false;} @AT@ 21165 @LENGTH@ 163
------------INS MethodInvocation@@LOG.info("Table " + tableName(t) + " is insert only and "+ HiveConf.ConfVars.HIVE_COMPACTOR_COMPACT_MM.varname+ "=false so we will not compact it.") @TO@ ExpressionStatement@@MethodInvocation:LOG.info("Table " + tableName(t) + " is insert only and "+ HiveConf.ConfVars.HIVE_COMPACTOR_COMPACT_MM.varname+ "=false so we will not compact it.") @AT@ 21165 @LENGTH@ 162
---------------INS SimpleName@@Name:LOG @TO@ MethodInvocation@@LOG.info("Table " + tableName(t) + " is insert only and "+ HiveConf.ConfVars.HIVE_COMPACTOR_COMPACT_MM.varname+ "=false so we will not compact it.") @AT@ 21165 @LENGTH@ 3
---------------INS SimpleName@@MethodName:info:["Table " + tableName(t) + " is insert only and "+ HiveConf.ConfVars.HIVE_COMPACTOR_COMPACT_MM.varname+ "=false so we will not compact it."] @TO@ MethodInvocation@@LOG.info("Table " + tableName(t) + " is insert only and "+ HiveConf.ConfVars.HIVE_COMPACTOR_COMPACT_MM.varname+ "=false so we will not compact it.") @AT@ 21169 @LENGTH@ 158
------------------INS InfixExpression@@"Table " + tableName(t) + " is insert only and "+ HiveConf.ConfVars.HIVE_COMPACTOR_COMPACT_MM.varname+ "=false so we will not compact it." @TO@ SimpleName@@MethodName:info:["Table " + tableName(t) + " is insert only and "+ HiveConf.ConfVars.HIVE_COMPACTOR_COMPACT_MM.varname+ "=false so we will not compact it."] @AT@ 21174 @LENGTH@ 152
---------------------INS StringLiteral@@"Table " @TO@ InfixExpression@@"Table " + tableName(t) + " is insert only and "+ HiveConf.ConfVars.HIVE_COMPACTOR_COMPACT_MM.varname+ "=false so we will not compact it." @AT@ 21174 @LENGTH@ 8
---------------------INS Operator@@+ @TO@ InfixExpression@@"Table " + tableName(t) + " is insert only and "+ HiveConf.ConfVars.HIVE_COMPACTOR_COMPACT_MM.varname+ "=false so we will not compact it." @AT@ 21182 @LENGTH@ 1
---------------------INS MethodInvocation@@tableName(t) @TO@ InfixExpression@@"Table " + tableName(t) + " is insert only and "+ HiveConf.ConfVars.HIVE_COMPACTOR_COMPACT_MM.varname+ "=false so we will not compact it." @AT@ 21185 @LENGTH@ 12
------------------------INS SimpleName@@MethodName:tableName:[t] @TO@ MethodInvocation@@tableName(t) @AT@ 21185 @LENGTH@ 12
---------------------------INS SimpleName@@t @TO@ SimpleName@@MethodName:tableName:[t] @AT@ 21195 @LENGTH@ 1
---------------------INS StringLiteral@@" is insert only and " @TO@ InfixExpression@@"Table " + tableName(t) + " is insert only and "+ HiveConf.ConfVars.HIVE_COMPACTOR_COMPACT_MM.varname+ "=false so we will not compact it." @AT@ 21200 @LENGTH@ 22
---------------------INS QualifiedName@@HiveConf.ConfVars.HIVE_COMPACTOR_COMPACT_MM.varname @TO@ InfixExpression@@"Table " + tableName(t) + " is insert only and "+ HiveConf.ConfVars.HIVE_COMPACTOR_COMPACT_MM.varname+ "=false so we will not compact it." @AT@ 21225 @LENGTH@ 51
------------------------INS QualifiedName@@HiveConf.ConfVars.HIVE_COMPACTOR_COMPACT_MM @TO@ QualifiedName@@HiveConf.ConfVars.HIVE_COMPACTOR_COMPACT_MM.varname @AT@ 21225 @LENGTH@ 43
---------------------------INS QualifiedName@@HiveConf.ConfVars @TO@ QualifiedName@@HiveConf.ConfVars.HIVE_COMPACTOR_COMPACT_MM @AT@ 21225 @LENGTH@ 17
------------------------------INS SimpleName@@HiveConf @TO@ QualifiedName@@HiveConf.ConfVars @AT@ 21225 @LENGTH@ 8
------------------------------INS SimpleName@@ConfVars @TO@ QualifiedName@@HiveConf.ConfVars @AT@ 21234 @LENGTH@ 8
---------------------------INS SimpleName@@HIVE_COMPACTOR_COMPACT_MM @TO@ QualifiedName@@HiveConf.ConfVars.HIVE_COMPACTOR_COMPACT_MM @AT@ 21243 @LENGTH@ 25
------------------------INS SimpleName@@varname @TO@ QualifiedName@@HiveConf.ConfVars.HIVE_COMPACTOR_COMPACT_MM.varname @AT@ 21269 @LENGTH@ 7
---------------------INS StringLiteral@@"=false so we will not compact it." @TO@ InfixExpression@@"Table " + tableName(t) + " is insert only and "+ HiveConf.ConfVars.HIVE_COMPACTOR_COMPACT_MM.varname+ "=false so we will not compact it." @AT@ 21291 @LENGTH@ 35
---------INS ReturnStatement@@BooleanLiteral:false @TO@ Block@@ThenBody:{  LOG.info("Table " + tableName(t) + " is insert only and "+ HiveConf.ConfVars.HIVE_COMPACTOR_COMPACT_MM.varname+ "=false so we will not compact it.");  return false;} @AT@ 21337 @LENGTH@ 13
------------INS BooleanLiteral@@false @TO@ ReturnStatement@@BooleanLiteral:false @AT@ 21344 @LENGTH@ 5


UPD FieldDeclaration@@private, Map.Entry<K,V>, [last=null] @TO@ private, Map.Entry<K,V>, [last] @AT@ 10547 @LENGTH@ 36
---UPD VariableDeclarationFragment@@last=null @TO@ last @AT@ 10571 @LENGTH@ 11
------DEL NullLiteral@@null @AT@ 10578 @LENGTH@ 4


UPD ExpressionStatement@@MethodInvocation:getMappedShardKeyFields(domainType).forEach(key -> filterWithShardKey.putIfAbsent(key,shardKeySource.get(key))) @TO@ MethodInvocation:getMappedShardKeyFields(domainType).forEach(key -> filterWithShardKey.putIfAbsent(key,BsonUtils.resolveValue(shardKeySource,key))) @AT@ 23288 @LENGTH@ 113
---UPD MethodInvocation@@getMappedShardKeyFields(domainType).forEach(key -> filterWithShardKey.putIfAbsent(key,shardKeySource.get(key))) @TO@ getMappedShardKeyFields(domainType).forEach(key -> filterWithShardKey.putIfAbsent(key,BsonUtils.resolveValue(shardKeySource,key))) @AT@ 23288 @LENGTH@ 112
------UPD SimpleName@@MethodName:forEach:[key -> filterWithShardKey.putIfAbsent(key,shardKeySource.get(key))] @TO@ MethodName:forEach:[key -> filterWithShardKey.putIfAbsent(key,BsonUtils.resolveValue(shardKeySource,key))] @AT@ 23324 @LENGTH@ 76
---------UPD LambdaExpression@@key -> filterWithShardKey.putIfAbsent(key,shardKeySource.get(key)) @TO@ key -> filterWithShardKey.putIfAbsent(key,BsonUtils.resolveValue(shardKeySource,key)) @AT@ 23332 @LENGTH@ 67
------------UPD MethodInvocation@@filterWithShardKey.putIfAbsent(key,shardKeySource.get(key)) @TO@ filterWithShardKey.putIfAbsent(key,BsonUtils.resolveValue(shardKeySource,key)) @AT@ 23339 @LENGTH@ 60
---------------UPD SimpleName@@MethodName:putIfAbsent:[key, shardKeySource.get(key)] @TO@ MethodName:putIfAbsent:[key, BsonUtils.resolveValue(shardKeySource,key)] @AT@ 23358 @LENGTH@ 41
------------------UPD MethodInvocation@@shardKeySource.get(key) @TO@ BsonUtils.resolveValue(shardKeySource,key) @AT@ 23375 @LENGTH@ 23
---------------------UPD SimpleName@@Name:shardKeySource @TO@ Name:BsonUtils @AT@ 23375 @LENGTH@ 14
---------------------UPD SimpleName@@MethodName:get:[key] @TO@ MethodName:resolveValue:[shardKeySource, key] @AT@ 23390 @LENGTH@ 8
------------------------INS SimpleName@@shardKeySource @TO@ SimpleName@@MethodName:get:[key] @AT@ 23404 @LENGTH@ 14


UPD ReturnStatement@@InfixExpression:messageId != null @TO@ InfixExpression:delegate.getMessageId() != null @AT@ 1980 @LENGTH@ 25
---UPD InfixExpression@@messageId != null @TO@ delegate.getMessageId() != null @AT@ 1987 @LENGTH@ 17
------DEL SimpleName@@messageId @AT@ 1987 @LENGTH@ 9
------INS MethodInvocation@@delegate.getMessageId() @TO@ InfixExpression@@messageId != null @AT@ 1987 @LENGTH@ 23
---------INS SimpleName@@Name:delegate @TO@ MethodInvocation@@delegate.getMessageId() @AT@ 1987 @LENGTH@ 8
---------INS SimpleName@@MethodName:getMessageId:[] @TO@ MethodInvocation@@delegate.getMessageId() @AT@ 1996 @LENGTH@ 14


INS MethodDeclaration@@void, MethodName:immutablesShouldWork, @Autowired Neo4jTemplate neo4jTemplate,  @TO@ TypeDeclaration@@[@Neo4jIntegrationTest]OptimisticLockingIT,  @AT@ 10138 @LENGTH@ 512
---INS PrimitiveType@@void @TO@ MethodDeclaration@@void, MethodName:immutablesShouldWork, @Autowired Neo4jTemplate neo4jTemplate,  @AT@ 10133 @LENGTH@ 4
---INS SimpleName@@MethodName:immutablesShouldWork @TO@ MethodDeclaration@@void, MethodName:immutablesShouldWork, @Autowired Neo4jTemplate neo4jTemplate,  @AT@ 10138 @LENGTH@ 20
---INS SingleVariableDeclaration@@@Autowired Neo4jTemplate neo4jTemplate @TO@ MethodDeclaration@@void, MethodName:immutablesShouldWork, @Autowired Neo4jTemplate neo4jTemplate,  @AT@ 10159 @LENGTH@ 38
------INS SimpleType@@Neo4jTemplate @TO@ SingleVariableDeclaration@@@Autowired Neo4jTemplate neo4jTemplate @AT@ 10170 @LENGTH@ 13
------INS SimpleName@@neo4jTemplate @TO@ SingleVariableDeclaration@@@Autowired Neo4jTemplate neo4jTemplate @AT@ 10184 @LENGTH@ 13
---INS VariableDeclarationStatement@@ImmutableVersionedThing immutableVersionedThing=new ImmutableVersionedThing(23L,"Hello"); @TO@ MethodDeclaration@@void, MethodName:immutablesShouldWork, @Autowired Neo4jTemplate neo4jTemplate,  @AT@ 10204 @LENGTH@ 92
------INS SimpleType@@ImmutableVersionedThing @TO@ VariableDeclarationStatement@@ImmutableVersionedThing immutableVersionedThing=new ImmutableVersionedThing(23L,"Hello"); @AT@ 10204 @LENGTH@ 23
------INS VariableDeclarationFragment@@immutableVersionedThing=new ImmutableVersionedThing(23L,"Hello") @TO@ VariableDeclarationStatement@@ImmutableVersionedThing immutableVersionedThing=new ImmutableVersionedThing(23L,"Hello"); @AT@ 10228 @LENGTH@ 67
---------INS SimpleName@@immutableVersionedThing @TO@ VariableDeclarationFragment@@immutableVersionedThing=new ImmutableVersionedThing(23L,"Hello") @AT@ 10228 @LENGTH@ 23
---------INS ClassInstanceCreation@@ImmutableVersionedThing[23L, "Hello"] @TO@ VariableDeclarationFragment@@immutableVersionedThing=new ImmutableVersionedThing(23L,"Hello") @AT@ 10254 @LENGTH@ 41
------------INS New@@new @TO@ ClassInstanceCreation@@ImmutableVersionedThing[23L, "Hello"] @AT@ 10254 @LENGTH@ 3
------------INS SimpleType@@ImmutableVersionedThing @TO@ ClassInstanceCreation@@ImmutableVersionedThing[23L, "Hello"] @AT@ 10258 @LENGTH@ 23
------------INS NumberLiteral@@23L @TO@ ClassInstanceCreation@@ImmutableVersionedThing[23L, "Hello"] @AT@ 10282 @LENGTH@ 3
------------INS StringLiteral@@"Hello" @TO@ ClassInstanceCreation@@ImmutableVersionedThing[23L, "Hello"] @AT@ 10287 @LENGTH@ 7
---INS ExpressionStatement@@Assignment:immutableVersionedThing=neo4jTemplate.save(immutableVersionedThing) @TO@ MethodDeclaration@@void, MethodName:immutablesShouldWork, @Autowired Neo4jTemplate neo4jTemplate,  @AT@ 10300 @LENGTH@ 70
------INS Assignment@@immutableVersionedThing=neo4jTemplate.save(immutableVersionedThing) @TO@ ExpressionStatement@@Assignment:immutableVersionedThing=neo4jTemplate.save(immutableVersionedThing) @AT@ 10300 @LENGTH@ 69
---------INS SimpleName@@immutableVersionedThing @TO@ Assignment@@immutableVersionedThing=neo4jTemplate.save(immutableVersionedThing) @AT@ 10300 @LENGTH@ 23
---------INS Operator@@= @TO@ Assignment@@immutableVersionedThing=neo4jTemplate.save(immutableVersionedThing) @AT@ 10323 @LENGTH@ 1
---------INS MethodInvocation@@neo4jTemplate.save(immutableVersionedThing) @TO@ Assignment@@immutableVersionedThing=neo4jTemplate.save(immutableVersionedThing) @AT@ 10326 @LENGTH@ 43
------------INS SimpleName@@Name:neo4jTemplate @TO@ MethodInvocation@@neo4jTemplate.save(immutableVersionedThing) @AT@ 10326 @LENGTH@ 13
------------INS SimpleName@@MethodName:save:[immutableVersionedThing] @TO@ MethodInvocation@@neo4jTemplate.save(immutableVersionedThing) @AT@ 10340 @LENGTH@ 29
---------------INS SimpleName@@immutableVersionedThing @TO@ SimpleName@@MethodName:save:[immutableVersionedThing] @AT@ 10345 @LENGTH@ 23
---INS ExpressionStatement@@MethodInvocation:assertThat(immutableVersionedThing.getMyVersion()).isNotNull() @TO@ MethodDeclaration@@void, MethodName:immutablesShouldWork, @Autowired Neo4jTemplate neo4jTemplate,  @AT@ 10373 @LENGTH@ 63
------INS MethodInvocation@@assertThat(immutableVersionedThing.getMyVersion()).isNotNull() @TO@ ExpressionStatement@@MethodInvocation:assertThat(immutableVersionedThing.getMyVersion()).isNotNull() @AT@ 10373 @LENGTH@ 62
---------INS MethodInvocation@@MethodName:assertThat:[immutableVersionedThing.getMyVersion()] @TO@ MethodInvocation@@assertThat(immutableVersionedThing.getMyVersion()).isNotNull() @AT@ 10373 @LENGTH@ 50
------------INS MethodInvocation@@immutableVersionedThing.getMyVersion() @TO@ MethodInvocation@@MethodName:assertThat:[immutableVersionedThing.getMyVersion()] @AT@ 10384 @LENGTH@ 38
---------------INS SimpleName@@Name:immutableVersionedThing @TO@ MethodInvocation@@immutableVersionedThing.getMyVersion() @AT@ 10384 @LENGTH@ 23
---------------INS SimpleName@@MethodName:getMyVersion:[] @TO@ MethodInvocation@@immutableVersionedThing.getMyVersion() @AT@ 10408 @LENGTH@ 14
---------INS SimpleName@@MethodName:isNotNull:[] @TO@ MethodInvocation@@assertThat(immutableVersionedThing.getMyVersion()).isNotNull() @AT@ 10424 @LENGTH@ 11
---INS VariableDeclarationStatement@@ImmutableVersionedThing copy=immutableVersionedThing.withMyVersion(4711L).withName("World"); @TO@ MethodDeclaration@@void, MethodName:immutablesShouldWork, @Autowired Neo4jTemplate neo4jTemplate,  @AT@ 10440 @LENGTH@ 94
------INS SimpleType@@ImmutableVersionedThing @TO@ VariableDeclarationStatement@@ImmutableVersionedThing copy=immutableVersionedThing.withMyVersion(4711L).withName("World"); @AT@ 10440 @LENGTH@ 23
------INS VariableDeclarationFragment@@copy=immutableVersionedThing.withMyVersion(4711L).withName("World") @TO@ VariableDeclarationStatement@@ImmutableVersionedThing copy=immutableVersionedThing.withMyVersion(4711L).withName("World"); @AT@ 10464 @LENGTH@ 69
---------INS SimpleName@@copy @TO@ VariableDeclarationFragment@@copy=immutableVersionedThing.withMyVersion(4711L).withName("World") @AT@ 10464 @LENGTH@ 4
---------INS MethodInvocation@@immutableVersionedThing.withMyVersion(4711L).withName("World") @TO@ VariableDeclarationFragment@@copy=immutableVersionedThing.withMyVersion(4711L).withName("World") @AT@ 10471 @LENGTH@ 62
------------INS MethodInvocation@@MethodName:withMyVersion:[4711L] @TO@ MethodInvocation@@immutableVersionedThing.withMyVersion(4711L).withName("World") @AT@ 10471 @LENGTH@ 44
---------------INS NumberLiteral@@4711L @TO@ MethodInvocation@@MethodName:withMyVersion:[4711L] @AT@ 10509 @LENGTH@ 5
------------INS SimpleName@@Name:immutableVersionedThing @TO@ MethodInvocation@@immutableVersionedThing.withMyVersion(4711L).withName("World") @AT@ 10471 @LENGTH@ 23
------------INS SimpleName@@MethodName:withName:["World"] @TO@ MethodInvocation@@immutableVersionedThing.withMyVersion(4711L).withName("World") @AT@ 10516 @LENGTH@ 17
---------------INS StringLiteral@@"World" @TO@ SimpleName@@MethodName:withName:["World"] @AT@ 10525 @LENGTH@ 7
---INS ExpressionStatement@@MethodInvocation:assertThatExceptionOfType(OptimisticLockingFailureException.class).isThrownBy(() -> neo4jTemplate.save(copy)) @TO@ MethodDeclaration@@void, MethodName:immutablesShouldWork, @Autowired Neo4jTemplate neo4jTemplate,  @AT@ 10537 @LENGTH@ 110
------INS MethodInvocation@@assertThatExceptionOfType(OptimisticLockingFailureException.class).isThrownBy(() -> neo4jTemplate.save(copy)) @TO@ ExpressionStatement@@MethodInvocation:assertThatExceptionOfType(OptimisticLockingFailureException.class).isThrownBy(() -> neo4jTemplate.save(copy)) @AT@ 10537 @LENGTH@ 109
---------INS MethodInvocation@@MethodName:assertThatExceptionOfType:[OptimisticLockingFailureException.class] @TO@ MethodInvocation@@assertThatExceptionOfType(OptimisticLockingFailureException.class).isThrownBy(() -> neo4jTemplate.save(copy)) @AT@ 10537 @LENGTH@ 66
------------INS TypeLiteral@@OptimisticLockingFailureException.class @TO@ MethodInvocation@@MethodName:assertThatExceptionOfType:[OptimisticLockingFailureException.class] @AT@ 10563 @LENGTH@ 39
---------INS SimpleName@@MethodName:isThrownBy:[() -> neo4jTemplate.save(copy)] @TO@ MethodInvocation@@assertThatExceptionOfType(OptimisticLockingFailureException.class).isThrownBy(() -> neo4jTemplate.save(copy)) @AT@ 10604 @LENGTH@ 42
------------INS LambdaExpression@@() -> neo4jTemplate.save(copy) @TO@ SimpleName@@MethodName:isThrownBy:[() -> neo4jTemplate.save(copy)] @AT@ 10615 @LENGTH@ 30
---------------INS MethodInvocation@@neo4jTemplate.save(copy) @TO@ LambdaExpression@@() -> neo4jTemplate.save(copy) @AT@ 10621 @LENGTH@ 24
------------------INS SimpleName@@Name:neo4jTemplate @TO@ MethodInvocation@@neo4jTemplate.save(copy) @AT@ 10621 @LENGTH@ 13
------------------INS SimpleName@@MethodName:save:[copy] @TO@ MethodInvocation@@neo4jTemplate.save(copy) @AT@ 10635 @LENGTH@ 10
---------------------INS SimpleName@@copy @TO@ SimpleName@@MethodName:save:[copy] @AT@ 10640 @LENGTH@ 4


INS MethodDeclaration@@public, void, MethodName:testParseTarTruncatedInContent, IOException,  @TO@ TypeDeclaration@@[public]TarFileTest, AbstractTestCase @AT@ 3798 @LENGTH@ 177
---INS Modifier@@public @TO@ MethodDeclaration@@public, void, MethodName:testParseTarTruncatedInContent, IOException,  @AT@ 3798 @LENGTH@ 6
---INS PrimitiveType@@void @TO@ MethodDeclaration@@public, void, MethodName:testParseTarTruncatedInContent, IOException,  @AT@ 3805 @LENGTH@ 4
---INS SimpleName@@MethodName:testParseTarTruncatedInContent @TO@ MethodDeclaration@@public, void, MethodName:testParseTarTruncatedInContent, IOException,  @AT@ 3810 @LENGTH@ 30
---INS SimpleType@@IOException @TO@ MethodDeclaration@@public, void, MethodName:testParseTarTruncatedInContent, IOException,  @AT@ 3850 @LENGTH@ 11
---INS TryStatement@@try (TarFile tarFile=new TarFile(getPath("COMPRESS-544_truncated_in_content.tar"))){}  @TO@ MethodDeclaration@@public, void, MethodName:testParseTarTruncatedInContent, IOException,  @AT@ 3872 @LENGTH@ 97
------INS VariableDeclarationExpression@@TarFile tarFile=new TarFile(getPath("COMPRESS-544_truncated_in_content.tar")) @TO@ TryStatement@@try (TarFile tarFile=new TarFile(getPath("COMPRESS-544_truncated_in_content.tar"))){}  @AT@ 3877 @LENGTH@ 79
---------INS SimpleType@@TarFile @TO@ VariableDeclarationExpression@@TarFile tarFile=new TarFile(getPath("COMPRESS-544_truncated_in_content.tar")) @AT@ 3877 @LENGTH@ 7
---------INS VariableDeclarationFragment@@tarFile=new TarFile(getPath("COMPRESS-544_truncated_in_content.tar")) @TO@ VariableDeclarationExpression@@TarFile tarFile=new TarFile(getPath("COMPRESS-544_truncated_in_content.tar")) @AT@ 3885 @LENGTH@ 71
------------INS SimpleName@@tarFile @TO@ VariableDeclarationFragment@@tarFile=new TarFile(getPath("COMPRESS-544_truncated_in_content.tar")) @AT@ 3885 @LENGTH@ 7
------------INS ClassInstanceCreation@@TarFile[getPath("COMPRESS-544_truncated_in_content.tar")] @TO@ VariableDeclarationFragment@@tarFile=new TarFile(getPath("COMPRESS-544_truncated_in_content.tar")) @AT@ 3895 @LENGTH@ 61
---------------INS New@@new @TO@ ClassInstanceCreation@@TarFile[getPath("COMPRESS-544_truncated_in_content.tar")] @AT@ 3895 @LENGTH@ 3
---------------INS SimpleType@@TarFile @TO@ ClassInstanceCreation@@TarFile[getPath("COMPRESS-544_truncated_in_content.tar")] @AT@ 3899 @LENGTH@ 7
---------------INS MethodInvocation@@getPath("COMPRESS-544_truncated_in_content.tar") @TO@ ClassInstanceCreation@@TarFile[getPath("COMPRESS-544_truncated_in_content.tar")] @AT@ 3907 @LENGTH@ 48
------------------INS SimpleName@@MethodName:getPath:["COMPRESS-544_truncated_in_content.tar"] @TO@ MethodInvocation@@getPath("COMPRESS-544_truncated_in_content.tar") @AT@ 3907 @LENGTH@ 48
---------------------INS StringLiteral@@"COMPRESS-544_truncated_in_content.tar" @TO@ SimpleName@@MethodName:getPath:["COMPRESS-544_truncated_in_content.tar"] @AT@ 3915 @LENGTH@ 39


INS ExpressionStatement@@MethodInvocation:data.getUnitOfWork().done(data) @TO@ MethodDeclaration@@public, void, MethodName:process, Exchange exchange, Exception,  @AT@ 4196 @LENGTH@ 32
---INS MethodInvocation@@data.getUnitOfWork().done(data) @TO@ ExpressionStatement@@MethodInvocation:data.getUnitOfWork().done(data) @AT@ 4196 @LENGTH@ 31
------INS MethodInvocation@@MethodName:getUnitOfWork:[] @TO@ MethodInvocation@@data.getUnitOfWork().done(data) @AT@ 4196 @LENGTH@ 20
------INS SimpleName@@Name:data @TO@ MethodInvocation@@data.getUnitOfWork().done(data) @AT@ 4196 @LENGTH@ 4
------INS SimpleName@@MethodName:done:[data] @TO@ MethodInvocation@@data.getUnitOfWork().done(data) @AT@ 4217 @LENGTH@ 10
---------INS SimpleName@@data @TO@ SimpleName@@MethodName:done:[data] @AT@ 4222 @LENGTH@ 4


UPD ExpressionStatement@@MethodInvocation:Assertions.assertTrue(size < 100,"Stackframe should be < 100") @TO@ MethodInvocation:Assertions.assertTrue(size < 110,"Stackframe should be < 110") @AT@ 2529 @LENGTH@ 64
---UPD MethodInvocation@@Assertions.assertTrue(size < 100,"Stackframe should be < 100") @TO@ Assertions.assertTrue(size < 110,"Stackframe should be < 110") @AT@ 2529 @LENGTH@ 63
------UPD SimpleName@@MethodName:assertTrue:[size < 100, "Stackframe should be < 100"] @TO@ MethodName:assertTrue:[size < 110, "Stackframe should be < 110"] @AT@ 2540 @LENGTH@ 52
---------UPD InfixExpression@@size < 100 @TO@ size < 110 @AT@ 2551 @LENGTH@ 10
------------UPD NumberLiteral@@100 @TO@ 110 @AT@ 2558 @LENGTH@ 3
---------UPD StringLiteral@@"Stackframe should be < 100" @TO@ "Stackframe should be < 110" @AT@ 2563 @LENGTH@ 28


MOV MethodDeclaration@@public, void, MethodName:endStep,  @TO@ AnonymousClassDeclaration@@AnonymousClass @AT@ 2017 @LENGTH@ 53


INS ReturnStatement@@MethodInvocation:connection.invoke(connection.getAsyncConnection().geodist(key,member1,member2,geoUnit),distanceConverter) @TO@ MethodDeclaration@@public, Distance, MethodName:geoDist, byte[] key, byte[] member1, byte[] member2, Metric metric,  @AT@ 5653 @LENGTH@ 117
---INS MethodInvocation@@connection.invoke(connection.getAsyncConnection().geodist(key,member1,member2,geoUnit),distanceConverter) @TO@ ReturnStatement@@MethodInvocation:connection.invoke(connection.getAsyncConnection().geodist(key,member1,member2,geoUnit),distanceConverter) @AT@ 5660 @LENGTH@ 109
------MOV SimpleName@@Name:connection @TO@ MethodInvocation@@connection.invoke(connection.getAsyncConnection().geodist(key,member1,member2,geoUnit),distanceConverter) @AT@ 5451 @LENGTH@ 10
------MOV SimpleName@@MethodName:newLettuceResult:[getAsyncConnection().geodist(key,member1,member2,geoUnit), distanceConverter] @TO@ MethodInvocation@@connection.invoke(connection.getAsyncConnection().geodist(key,member1,member2,geoUnit),distanceConverter) @AT@ 5462 @LENGTH@ 103
---------UPD MethodInvocation@@getAsyncConnection().geodist(key,member1,member2,geoUnit) @TO@ connection.getAsyncConnection().geodist(key,member1,member2,geoUnit) @AT@ 5479 @LENGTH@ 60
------------INS SimpleName@@Name:connection @TO@ MethodInvocation@@getAsyncConnection().geodist(key,member1,member2,geoUnit) @AT@ 5678 @LENGTH@ 10


UPD FieldDeclaration@@int, [pos=0] @TO@ int, [pos] @AT@ 14065 @LENGTH@ 12
---UPD VariableDeclarationFragment@@pos=0 @TO@ pos @AT@ 14069 @LENGTH@ 7
------DEL NumberLiteral@@0 @AT@ 14075 @LENGTH@ 1


INS IfStatement@@if (def.getInput() == null) {  throw new IllegalArgumentException("Camel route " + rid + " input does not exist.");} @TO@ MethodDeclaration@@public, static, RouteDefinition, MethodName:templateToRoute, RouteTemplateDefinition in, Map<String,Object> parameters,  @AT@ 4488 @LENGTH@ 136
---INS InfixExpression@@def.getInput() == null @TO@ IfStatement@@if (def.getInput() == null) {  throw new IllegalArgumentException("Camel route " + rid + " input does not exist.");} @AT@ 4492 @LENGTH@ 22
------INS MethodInvocation@@def.getInput() @TO@ InfixExpression@@def.getInput() == null @AT@ 4492 @LENGTH@ 14
---------INS SimpleName@@Name:def @TO@ MethodInvocation@@def.getInput() @AT@ 4492 @LENGTH@ 3
---------INS SimpleName@@MethodName:getInput:[] @TO@ MethodInvocation@@def.getInput() @AT@ 4496 @LENGTH@ 10
------INS Operator@@== @TO@ InfixExpression@@def.getInput() == null @AT@ 4506 @LENGTH@ 2
------INS NullLiteral@@null @TO@ InfixExpression@@def.getInput() == null @AT@ 4510 @LENGTH@ 4
---INS Block@@ThenBody:{  throw new IllegalArgumentException("Camel route " + rid + " input does not exist.");} @TO@ IfStatement@@if (def.getInput() == null) {  throw new IllegalArgumentException("Camel route " + rid + " input does not exist.");} @AT@ 4516 @LENGTH@ 108
------INS ThrowStatement@@ClassInstanceCreation:new IllegalArgumentException("Camel route " + rid + " input does not exist.") @TO@ Block@@ThenBody:{  throw new IllegalArgumentException("Camel route " + rid + " input does not exist.");} @AT@ 4530 @LENGTH@ 84
---------INS ClassInstanceCreation@@IllegalArgumentException["Camel route " + rid + " input does not exist."] @TO@ ThrowStatement@@ClassInstanceCreation:new IllegalArgumentException("Camel route " + rid + " input does not exist.") @AT@ 4536 @LENGTH@ 77
------------INS New@@new @TO@ ClassInstanceCreation@@IllegalArgumentException["Camel route " + rid + " input does not exist."] @AT@ 4536 @LENGTH@ 3
------------INS SimpleType@@IllegalArgumentException @TO@ ClassInstanceCreation@@IllegalArgumentException["Camel route " + rid + " input does not exist."] @AT@ 4540 @LENGTH@ 24
------------INS InfixExpression@@"Camel route " + rid + " input does not exist." @TO@ ClassInstanceCreation@@IllegalArgumentException["Camel route " + rid + " input does not exist."] @AT@ 4565 @LENGTH@ 47
---------------INS StringLiteral@@"Camel route " @TO@ InfixExpression@@"Camel route " + rid + " input does not exist." @AT@ 4565 @LENGTH@ 14
---------------INS Operator@@+ @TO@ InfixExpression@@"Camel route " + rid + " input does not exist." @AT@ 4579 @LENGTH@ 1
---------------INS SimpleName@@rid @TO@ InfixExpression@@"Camel route " + rid + " input does not exist." @AT@ 4582 @LENGTH@ 3
---------------INS StringLiteral@@" input does not exist." @TO@ InfixExpression@@"Camel route " + rid + " input does not exist." @AT@ 4588 @LENGTH@ 24


UPD TypeDeclaration@@[public]NettyHttpStreamTest, BaseNettyTest @TO@ [@Disabled("TODO: leak error"), public]NettyHttpStreamTest, BaseNettyTest @AT@ 1334 @LENGTH@ 2417
---INS SingleMemberAnnotation@@@Disabled("TODO: leak error") @TO@ TypeDeclaration@@[public]NettyHttpStreamTest, BaseNettyTest @AT@ 1373 @LENGTH@ 29


MOV FieldDeclaration@@private, static, int, [topicId=0] @TO@ TypeDeclaration@@[public]PulsarConsumerAcknowledgementTest, CamelTestSupport @AT@ 2548 @LENGTH@ 31


UPD IfStatement@@if (LOG.isDebugEnabled()) {  LOG.debug("selectingHost for task={} on hosts={}",request.task,requestedHostsDebugStr);} @TO@ if (LOG.isDebugEnabled()) {  requestedHostsDebugStr=Arrays.toString(requestedHosts);  LOG.debug("selectingHost for task={} on hosts={}",request.task,requestedHostsDebugStr);} @AT@ 57497 @LENGTH@ 139
---UPD Block@@ThenBody:{  LOG.debug("selectingHost for task={} on hosts={}",request.task,requestedHostsDebugStr);} @TO@ ThenBody:{  requestedHostsDebugStr=Arrays.toString(requestedHosts);  LOG.debug("selectingHost for task={} on hosts={}",request.task,requestedHostsDebugStr);} @AT@ 57523 @LENGTH@ 113
------INS ExpressionStatement@@Assignment:requestedHostsDebugStr=Arrays.toString(requestedHosts) @TO@ Block@@ThenBody:{  LOG.debug("selectingHost for task={} on hosts={}",request.task,requestedHostsDebugStr);} @AT@ 57653 @LENGTH@ 57
---------INS Assignment@@requestedHostsDebugStr=Arrays.toString(requestedHosts) @TO@ ExpressionStatement@@Assignment:requestedHostsDebugStr=Arrays.toString(requestedHosts) @AT@ 57653 @LENGTH@ 56
------------MOV MethodInvocation@@Arrays.toString(requestedHosts) @TO@ Assignment@@requestedHostsDebugStr=Arrays.toString(requestedHosts) @AT@ 57460 @LENGTH@ 31
------------INS SimpleName@@requestedHostsDebugStr @TO@ Assignment@@requestedHostsDebugStr=Arrays.toString(requestedHosts) @AT@ 57653 @LENGTH@ 22
------------INS Operator@@= @TO@ Assignment@@requestedHostsDebugStr=Arrays.toString(requestedHosts) @AT@ 57675 @LENGTH@ 1


UPD ThrowStatement@@ClassInstanceCreation:new UnsupportedOperationException("Mark notsupported") @TO@ ClassInstanceCreation:new UnsupportedOperationException("Mark not supported") @AT@ 3554 @LENGTH@ 61
---UPD ClassInstanceCreation@@UnsupportedOperationException["Mark notsupported"] @TO@ UnsupportedOperationException["Mark not supported"] @AT@ 3560 @LENGTH@ 54
------UPD StringLiteral@@"Mark notsupported" @TO@ "Mark not supported" @AT@ 3594 @LENGTH@ 19


UPD IfStatement@@if (rawPayload) {  return;} @TO@ if (!rawPayload) {  final String sObjectName=endpoint.getConfiguration().getSObjectName();  if (sObjectName != null) {    sObjectClass=endpoint.getComponent().getClassMap().get(sObjectName);    if (sObjectClass == null) {      throw new IllegalArgumentException(String.format("SObject Class not found for %s",sObjectName));    }  } else {    final String className=endpoint.getConfiguration().getSObjectClass();    if (className != null) {      sObjectClass=endpoint.getComponent().getCamelContext().getClassResolver().resolveClass(className);      if (sObjectClass == null) {        throw new IllegalArgumentException(String.format("SObject Class not found %s",className));      }    } else {      LOG.warn("Property sObjectName or sObjectClass NOT set, messages will be of type java.lang.Map");      sObjectClass=null;    }  }} else {  sObjectClass=null;} @AT@ 4390 @LENGTH@ 47
---DEL SimpleName@@rawPayload @AT@ 4394 @LENGTH@ 10
---UPD Block@@ThenBody:{  return;} @TO@ ElseBody:{  sObjectClass=null;} @AT@ 4406 @LENGTH@ 31
------DEL ReturnStatement@@ @AT@ 4420 @LENGTH@ 7
------INS ExpressionStatement@@Assignment:sObjectClass=null @TO@ Block@@ThenBody:{  return;} @AT@ 5544 @LENGTH@ 20
---------INS Assignment@@sObjectClass=null @TO@ ExpressionStatement@@Assignment:sObjectClass=null @AT@ 5544 @LENGTH@ 19
------------INS SimpleName@@sObjectClass @TO@ Assignment@@sObjectClass=null @AT@ 5544 @LENGTH@ 12
------------INS Operator@@= @TO@ Assignment@@sObjectClass=null @AT@ 5556 @LENGTH@ 1
------------INS NullLiteral@@null @TO@ Assignment@@sObjectClass=null @AT@ 5559 @LENGTH@ 4
---INS PrefixExpression@@!rawPayload @TO@ IfStatement@@if (rawPayload) {  return;} @AT@ 4436 @LENGTH@ 11
------INS Operator@@! @TO@ PrefixExpression@@!rawPayload @AT@ 4436 @LENGTH@ 1
------INS SimpleName@@rawPayload @TO@ PrefixExpression@@!rawPayload @AT@ 4437 @LENGTH@ 10
---INS Block@@ThenBody:{  final String sObjectName=endpoint.getConfiguration().getSObjectName();  if (sObjectName != null) {    sObjectClass=endpoint.getComponent().getClassMap().get(sObjectName);    if (sObjectClass == null) {      throw new IllegalArgumentException(String.format("SObject Class not found for %s",sObjectName));    }  } else {    final String className=endpoint.getConfiguration().getSObjectClass();    if (className != null) {      sObjectClass=endpoint.getComponent().getCamelContext().getClassResolver().resolveClass(className);      if (sObjectClass == null) {        throw new IllegalArgumentException(String.format("SObject Class not found %s",className));      }    } else {      LOG.warn("Property sObjectName or sObjectClass NOT set, messages will be of type java.lang.Map");      sObjectClass=null;    }  }} @TO@ IfStatement@@if (rawPayload) {  return;} @AT@ 4449 @LENGTH@ 1075
------MOV VariableDeclarationStatement@@final String sObjectName=endpoint.getConfiguration().getSObjectName(); @TO@ Block@@ThenBody:{  final String sObjectName=endpoint.getConfiguration().getSObjectName();  if (sObjectName != null) {    sObjectClass=endpoint.getComponent().getClassMap().get(sObjectName);    if (sObjectClass == null) {      throw new IllegalArgumentException(String.format("SObject Class not found for %s",sObjectName));    }  } else {    final String className=endpoint.getConfiguration().getSObjectClass();    if (className != null) {      sObjectClass=endpoint.getComponent().getCamelContext().getClassResolver().resolveClass(className);      if (sObjectClass == null) {        throw new IllegalArgumentException(String.format("SObject Class not found %s",className));      }    } else {      LOG.warn("Property sObjectName or sObjectClass NOT set, messages will be of type java.lang.Map");      sObjectClass=null;    }  }} @AT@ 4489 @LENGTH@ 72
------MOV IfStatement@@if (sObjectName != null) {  sObjectClass=endpoint.getComponent().getClassMap().get(sObjectName);  if (sObjectClass == null) {    throw new IllegalArgumentException(String.format("SObject Class not found for %s",sObjectName));  }} else {  final String className=endpoint.getConfiguration().getSObjectClass();  if (className != null) {    sObjectClass=endpoint.getComponent().getCamelContext().getClassResolver().resolveClass(className);    if (sObjectClass == null) {      throw new IllegalArgumentException(String.format("SObject Class not found %s",className));    }  } else {    LOG.warn("Property sObjectName or sObjectClass NOT set, messages will be of type java.lang.Map");    sObjectClass=null;  }} @TO@ Block@@ThenBody:{  final String sObjectName=endpoint.getConfiguration().getSObjectName();  if (sObjectName != null) {    sObjectClass=endpoint.getComponent().getClassMap().get(sObjectName);    if (sObjectClass == null) {      throw new IllegalArgumentException(String.format("SObject Class not found for %s",sObjectName));    }  } else {    final String className=endpoint.getConfiguration().getSObjectClass();    if (className != null) {      sObjectClass=endpoint.getComponent().getCamelContext().getClassResolver().resolveClass(className);      if (sObjectClass == null) {        throw new IllegalArgumentException(String.format("SObject Class not found %s",className));      }    } else {      LOG.warn("Property sObjectName or sObjectClass NOT set, messages will be of type java.lang.Map");      sObjectClass=null;    }  }} @AT@ 4570 @LENGTH@ 902


UPD EnhancedForStatement@@for (Node possibleValueNode : allNodesWithMatchingLabelInResult) {  long targetNodeId=possibleValueNode.id();  for (  Relationship possibleRelationship : allMatchingTypeRelationshipsInResult) {    if (targetIdSelector.apply(possibleRelationship) == targetNodeId && sourceIdSelector.apply(possibleRelationship).equals(sourceNodeId)) {      Neo4jPersistentEntity<?> concreteTargetNodeDescription=getMostConcreteTargetNodeDescription(genericTargetNodeDescription,possibleValueNode);      Object mappedObject=map(possibleValueNode,allValues,concreteTargetNodeDescription);      if (relationshipDescription.hasRelationshipProperties()) {        Object relationshipProperties=map(possibleRelationship,allValues,(Neo4jPersistentEntity)relationshipDescription.getRelationshipPropertiesEntity(),mappedObject);        relationshipsAndProperties.add(relationshipProperties);        mappedObjectHandler.accept(possibleRelationship.type(),relationshipProperties);      } else {        mappedObjectHandler.accept(possibleRelationship.type(),mappedObject);      }      allMatchingTypeRelationshipsInResult.remove(possibleRelationship);      break;    }  }} @TO@ for (Node possibleValueNode : allNodesWithMatchingLabelInResult) {  long targetNodeId=possibleValueNode.id();  Set<Relationship> relationshipsProcessed=new HashSet<>();  for (  Relationship possibleRelationship : allMatchingTypeRelationshipsInResult) {    if (targetIdSelector.apply(possibleRelationship) == targetNodeId && sourceIdSelector.apply(possibleRelationship).equals(sourceNodeId)) {      Neo4jPersistentEntity<?> concreteTargetNodeDescription=getMostConcreteTargetNodeDescription(genericTargetNodeDescription,possibleValueNode);      Object mappedObject=map(possibleValueNode,allValues,concreteTargetNodeDescription);      if (relationshipDescription.hasRelationshipProperties()) {        Object relationshipProperties=map(possibleRelationship,allValues,(Neo4jPersistentEntity)relationshipDescription.getRelationshipPropertiesEntity(),mappedObject);        relationshipsAndProperties.add(relationshipProperties);        mappedObjectHandler.accept(possibleRelationship.type(),relationshipProperties);      } else {        mappedObjectHandler.accept(possibleRelationship.type(),mappedObject);      }      relationshipsProcessed.add(possibleRelationship);    }  }  allMatchingTypeRelationshipsInResult.removeAll(relationshipsProcessed);} @AT@ 20996 @LENGTH@ 1210
---UPD EnhancedForStatement@@for (Relationship possibleRelationship : allMatchingTypeRelationshipsInResult) {  if (targetIdSelector.apply(possibleRelationship) == targetNodeId && sourceIdSelector.apply(possibleRelationship).equals(sourceNodeId)) {    Neo4jPersistentEntity<?> concreteTargetNodeDescription=getMostConcreteTargetNodeDescription(genericTargetNodeDescription,possibleValueNode);    Object mappedObject=map(possibleValueNode,allValues,concreteTargetNodeDescription);    if (relationshipDescription.hasRelationshipProperties()) {      Object relationshipProperties=map(possibleRelationship,allValues,(Neo4jPersistentEntity)relationshipDescription.getRelationshipPropertiesEntity(),mappedObject);      relationshipsAndProperties.add(relationshipProperties);      mappedObjectHandler.accept(possibleRelationship.type(),relationshipProperties);    } else {      mappedObjectHandler.accept(possibleRelationship.type(),mappedObject);    }    allMatchingTypeRelationshipsInResult.remove(possibleRelationship);    break;  }} @TO@ for (Relationship possibleRelationship : allMatchingTypeRelationshipsInResult) {  if (targetIdSelector.apply(possibleRelationship) == targetNodeId && sourceIdSelector.apply(possibleRelationship).equals(sourceNodeId)) {    Neo4jPersistentEntity<?> concreteTargetNodeDescription=getMostConcreteTargetNodeDescription(genericTargetNodeDescription,possibleValueNode);    Object mappedObject=map(possibleValueNode,allValues,concreteTargetNodeDescription);    if (relationshipDescription.hasRelationshipProperties()) {      Object relationshipProperties=map(possibleRelationship,allValues,(Neo4jPersistentEntity)relationshipDescription.getRelationshipPropertiesEntity(),mappedObject);      relationshipsAndProperties.add(relationshipProperties);      mappedObjectHandler.accept(possibleRelationship.type(),relationshipProperties);    } else {      mappedObjectHandler.accept(possibleRelationship.type(),mappedObject);    }    relationshipsProcessed.add(possibleRelationship);  }} @AT@ 21116 @LENGTH@ 1085
------UPD IfStatement@@if (targetIdSelector.apply(possibleRelationship) == targetNodeId && sourceIdSelector.apply(possibleRelationship).equals(sourceNodeId)) {  Neo4jPersistentEntity<?> concreteTargetNodeDescription=getMostConcreteTargetNodeDescription(genericTargetNodeDescription,possibleValueNode);  Object mappedObject=map(possibleValueNode,allValues,concreteTargetNodeDescription);  if (relationshipDescription.hasRelationshipProperties()) {    Object relationshipProperties=map(possibleRelationship,allValues,(Neo4jPersistentEntity)relationshipDescription.getRelationshipPropertiesEntity(),mappedObject);    relationshipsAndProperties.add(relationshipProperties);    mappedObjectHandler.accept(possibleRelationship.type(),relationshipProperties);  } else {    mappedObjectHandler.accept(possibleRelationship.type(),mappedObject);  }  allMatchingTypeRelationshipsInResult.remove(possibleRelationship);  break;} @TO@ if (targetIdSelector.apply(possibleRelationship) == targetNodeId && sourceIdSelector.apply(possibleRelationship).equals(sourceNodeId)) {  Neo4jPersistentEntity<?> concreteTargetNodeDescription=getMostConcreteTargetNodeDescription(genericTargetNodeDescription,possibleValueNode);  Object mappedObject=map(possibleValueNode,allValues,concreteTargetNodeDescription);  if (relationshipDescription.hasRelationshipProperties()) {    Object relationshipProperties=map(possibleRelationship,allValues,(Neo4jPersistentEntity)relationshipDescription.getRelationshipPropertiesEntity(),mappedObject);    relationshipsAndProperties.add(relationshipProperties);    mappedObjectHandler.accept(possibleRelationship.type(),relationshipProperties);  } else {    mappedObjectHandler.accept(possibleRelationship.type(),mappedObject);  }  relationshipsProcessed.add(possibleRelationship);} @AT@ 21202 @LENGTH@ 993
---------UPD Block@@ThenBody:{  Neo4jPersistentEntity<?> concreteTargetNodeDescription=getMostConcreteTargetNodeDescription(genericTargetNodeDescription,possibleValueNode);  Object mappedObject=map(possibleValueNode,allValues,concreteTargetNodeDescription);  if (relationshipDescription.hasRelationshipProperties()) {    Object relationshipProperties=map(possibleRelationship,allValues,(Neo4jPersistentEntity)relationshipDescription.getRelationshipPropertiesEntity(),mappedObject);    relationshipsAndProperties.add(relationshipProperties);    mappedObjectHandler.accept(possibleRelationship.type(),relationshipProperties);  } else {    mappedObjectHandler.accept(possibleRelationship.type(),mappedObject);  }  allMatchingTypeRelationshipsInResult.remove(possibleRelationship);  break;} @TO@ ThenBody:{  Neo4jPersistentEntity<?> concreteTargetNodeDescription=getMostConcreteTargetNodeDescription(genericTargetNodeDescription,possibleValueNode);  Object mappedObject=map(possibleValueNode,allValues,concreteTargetNodeDescription);  if (relationshipDescription.hasRelationshipProperties()) {    Object relationshipProperties=map(possibleRelationship,allValues,(Neo4jPersistentEntity)relationshipDescription.getRelationshipPropertiesEntity(),mappedObject);    relationshipsAndProperties.add(relationshipProperties);    mappedObjectHandler.accept(possibleRelationship.type(),relationshipProperties);  } else {    mappedObjectHandler.accept(possibleRelationship.type(),mappedObject);  }  relationshipsProcessed.add(possibleRelationship);} @AT@ 21337 @LENGTH@ 858
------------UPD ExpressionStatement@@MethodInvocation:allMatchingTypeRelationshipsInResult.remove(possibleRelationship) @TO@ MethodInvocation:relationshipsProcessed.add(possibleRelationship) @AT@ 22109 @LENGTH@ 66
---------------UPD MethodInvocation@@allMatchingTypeRelationshipsInResult.remove(possibleRelationship) @TO@ relationshipsProcessed.add(possibleRelationship) @AT@ 22109 @LENGTH@ 65
------------------UPD SimpleName@@Name:allMatchingTypeRelationshipsInResult @TO@ Name:relationshipsProcessed @AT@ 22109 @LENGTH@ 36
------------------UPD SimpleName@@MethodName:remove:[possibleRelationship] @TO@ MethodName:add:[possibleRelationship] @AT@ 22146 @LENGTH@ 28
------------DEL BreakStatement@@ @AT@ 22182 @LENGTH@ 6
---INS VariableDeclarationStatement@@Set<Relationship> relationshipsProcessed=new HashSet<>(); @TO@ EnhancedForStatement@@for (Node possibleValueNode : allNodesWithMatchingLabelInResult) {  long targetNodeId=possibleValueNode.id();  for (  Relationship possibleRelationship : allMatchingTypeRelationshipsInResult) {    if (targetIdSelector.apply(possibleRelationship) == targetNodeId && sourceIdSelector.apply(possibleRelationship).equals(sourceNodeId)) {      Neo4jPersistentEntity<?> concreteTargetNodeDescription=getMostConcreteTargetNodeDescription(genericTargetNodeDescription,possibleValueNode);      Object mappedObject=map(possibleValueNode,allValues,concreteTargetNodeDescription);      if (relationshipDescription.hasRelationshipProperties()) {        Object relationshipProperties=map(possibleRelationship,allValues,(Neo4jPersistentEntity)relationshipDescription.getRelationshipPropertiesEntity(),mappedObject);        relationshipsAndProperties.add(relationshipProperties);        mappedObjectHandler.accept(possibleRelationship.type(),relationshipProperties);      } else {        mappedObjectHandler.accept(possibleRelationship.type(),mappedObject);      }      allMatchingTypeRelationshipsInResult.remove(possibleRelationship);      break;    }  }} @AT@ 21137 @LENGTH@ 59
------INS ParameterizedType@@Set<Relationship> @TO@ VariableDeclarationStatement@@Set<Relationship> relationshipsProcessed=new HashSet<>(); @AT@ 21137 @LENGTH@ 17
---------INS SimpleType@@Set @TO@ ParameterizedType@@Set<Relationship> @AT@ 21137 @LENGTH@ 3
---------INS SimpleType@@Relationship @TO@ ParameterizedType@@Set<Relationship> @AT@ 21141 @LENGTH@ 12
------INS VariableDeclarationFragment@@relationshipsProcessed=new HashSet<>() @TO@ VariableDeclarationStatement@@Set<Relationship> relationshipsProcessed=new HashSet<>(); @AT@ 21155 @LENGTH@ 40
---------INS SimpleName@@relationshipsProcessed @TO@ VariableDeclarationFragment@@relationshipsProcessed=new HashSet<>() @AT@ 21155 @LENGTH@ 22
---------INS ClassInstanceCreation@@HashSet<>[] @TO@ VariableDeclarationFragment@@relationshipsProcessed=new HashSet<>() @AT@ 21180 @LENGTH@ 15
------------INS New@@new @TO@ ClassInstanceCreation@@HashSet<>[] @AT@ 21180 @LENGTH@ 3
------------INS ParameterizedType@@HashSet<> @TO@ ClassInstanceCreation@@HashSet<>[] @AT@ 21184 @LENGTH@ 9
---------------INS SimpleType@@HashSet @TO@ ParameterizedType@@HashSet<> @AT@ 21184 @LENGTH@ 7
---INS ExpressionStatement@@MethodInvocation:allMatchingTypeRelationshipsInResult.removeAll(relationshipsProcessed) @TO@ EnhancedForStatement@@for (Node possibleValueNode : allNodesWithMatchingLabelInResult) {  long targetNodeId=possibleValueNode.id();  for (  Relationship possibleRelationship : allMatchingTypeRelationshipsInResult) {    if (targetIdSelector.apply(possibleRelationship) == targetNodeId && sourceIdSelector.apply(possibleRelationship).equals(sourceNodeId)) {      Neo4jPersistentEntity<?> concreteTargetNodeDescription=getMostConcreteTargetNodeDescription(genericTargetNodeDescription,possibleValueNode);      Object mappedObject=map(possibleValueNode,allValues,concreteTargetNodeDescription);      if (relationshipDescription.hasRelationshipProperties()) {        Object relationshipProperties=map(possibleRelationship,allValues,(Neo4jPersistentEntity)relationshipDescription.getRelationshipPropertiesEntity(),mappedObject);        relationshipsAndProperties.add(relationshipProperties);        mappedObjectHandler.accept(possibleRelationship.type(),relationshipProperties);      } else {        mappedObjectHandler.accept(possibleRelationship.type(),mappedObject);      }      allMatchingTypeRelationshipsInResult.remove(possibleRelationship);      break;    }  }} @AT@ 22261 @LENGTH@ 71
------INS MethodInvocation@@allMatchingTypeRelationshipsInResult.removeAll(relationshipsProcessed) @TO@ ExpressionStatement@@MethodInvocation:allMatchingTypeRelationshipsInResult.removeAll(relationshipsProcessed) @AT@ 22261 @LENGTH@ 70
---------INS SimpleName@@Name:allMatchingTypeRelationshipsInResult @TO@ MethodInvocation@@allMatchingTypeRelationshipsInResult.removeAll(relationshipsProcessed) @AT@ 22261 @LENGTH@ 36
---------INS SimpleName@@MethodName:removeAll:[relationshipsProcessed] @TO@ MethodInvocation@@allMatchingTypeRelationshipsInResult.removeAll(relationshipsProcessed) @AT@ 22298 @LENGTH@ 33
------------INS SimpleName@@relationshipsProcessed @TO@ SimpleName@@MethodName:removeAll:[relationshipsProcessed] @AT@ 22308 @LENGTH@ 22


INS IfStatement@@if (byteBuffer.hasArray()) {  return byteBuffer.array();} @TO@ MethodDeclaration@@public, static, byte[], MethodName:getBytes, ByteBuffer byteBuffer,  @AT@ 3891 @LENGTH@ 62
---INS MethodInvocation@@byteBuffer.hasArray() @TO@ IfStatement@@if (byteBuffer.hasArray()) {  return byteBuffer.array();} @AT@ 3895 @LENGTH@ 21
------INS SimpleName@@Name:byteBuffer @TO@ MethodInvocation@@byteBuffer.hasArray() @AT@ 3895 @LENGTH@ 10
------INS SimpleName@@MethodName:hasArray:[] @TO@ MethodInvocation@@byteBuffer.hasArray() @AT@ 3906 @LENGTH@ 10
---INS Block@@ThenBody:{  return byteBuffer.array();} @TO@ IfStatement@@if (byteBuffer.hasArray()) {  return byteBuffer.array();} @AT@ 3918 @LENGTH@ 35
------INS ReturnStatement@@MethodInvocation:byteBuffer.array() @TO@ Block@@ThenBody:{  return byteBuffer.array();} @AT@ 3923 @LENGTH@ 26
---------INS MethodInvocation@@byteBuffer.array() @TO@ ReturnStatement@@MethodInvocation:byteBuffer.array() @AT@ 3930 @LENGTH@ 18
------------INS SimpleName@@Name:byteBuffer @TO@ MethodInvocation@@byteBuffer.array() @AT@ 3930 @LENGTH@ 10
------------INS SimpleName@@MethodName:array:[] @TO@ MethodInvocation@@byteBuffer.array() @AT@ 3941 @LENGTH@ 7


INS MethodDeclaration@@public, void, MethodName:testToPropertiesWithNullValue,  @TO@ TypeDeclaration@@[public]JobParametersTests,  @AT@ 6691 @LENGTH@ 354
---INS Modifier@@public @TO@ MethodDeclaration@@public, void, MethodName:testToPropertiesWithNullValue,  @AT@ 6691 @LENGTH@ 6
---INS PrimitiveType@@void @TO@ MethodDeclaration@@public, void, MethodName:testToPropertiesWithNullValue,  @AT@ 6698 @LENGTH@ 4
---INS SimpleName@@MethodName:testToPropertiesWithNullValue @TO@ MethodDeclaration@@public, void, MethodName:testToPropertiesWithNullValue,  @AT@ 6703 @LENGTH@ 29
---INS VariableDeclarationStatement@@Map<String,JobParameter> parameterMap=new HashMap<>(); @TO@ MethodDeclaration@@public, void, MethodName:testToPropertiesWithNullValue,  @AT@ 6739 @LENGTH@ 57
------INS ParameterizedType@@Map<String,JobParameter> @TO@ VariableDeclarationStatement@@Map<String,JobParameter> parameterMap=new HashMap<>(); @AT@ 6739 @LENGTH@ 25
---------INS SimpleType@@Map @TO@ ParameterizedType@@Map<String,JobParameter> @AT@ 6739 @LENGTH@ 3
---------INS SimpleType@@String @TO@ ParameterizedType@@Map<String,JobParameter> @AT@ 6743 @LENGTH@ 6
---------INS SimpleType@@JobParameter @TO@ ParameterizedType@@Map<String,JobParameter> @AT@ 6751 @LENGTH@ 12
------INS VariableDeclarationFragment@@parameterMap=new HashMap<>() @TO@ VariableDeclarationStatement@@Map<String,JobParameter> parameterMap=new HashMap<>(); @AT@ 6765 @LENGTH@ 30
---------INS SimpleName@@parameterMap @TO@ VariableDeclarationFragment@@parameterMap=new HashMap<>() @AT@ 6765 @LENGTH@ 12
---------INS ClassInstanceCreation@@HashMap<>[] @TO@ VariableDeclarationFragment@@parameterMap=new HashMap<>() @AT@ 6780 @LENGTH@ 15
------------INS New@@new @TO@ ClassInstanceCreation@@HashMap<>[] @AT@ 6780 @LENGTH@ 3
------------INS ParameterizedType@@HashMap<> @TO@ ClassInstanceCreation@@HashMap<>[] @AT@ 6784 @LENGTH@ 9
---------------INS SimpleType@@HashMap @TO@ ParameterizedType@@HashMap<> @AT@ 6784 @LENGTH@ 7
---INS VariableDeclarationStatement@@Long value=null; @TO@ MethodDeclaration@@public, void, MethodName:testToPropertiesWithNullValue,  @AT@ 6799 @LENGTH@ 18
------INS SimpleType@@Long @TO@ VariableDeclarationStatement@@Long value=null; @AT@ 6799 @LENGTH@ 4
------INS VariableDeclarationFragment@@value=null @TO@ VariableDeclarationStatement@@Long value=null; @AT@ 6804 @LENGTH@ 12
---------INS SimpleName@@value @TO@ VariableDeclarationFragment@@value=null @AT@ 6804 @LENGTH@ 5
---------INS NullLiteral@@null @TO@ VariableDeclarationFragment@@value=null @AT@ 6812 @LENGTH@ 4
---INS ExpressionStatement@@MethodInvocation:parameterMap.put("nullkey",new JobParameter(value)) @TO@ MethodDeclaration@@public, void, MethodName:testToPropertiesWithNullValue,  @AT@ 6820 @LENGTH@ 53
------INS MethodInvocation@@parameterMap.put("nullkey",new JobParameter(value)) @TO@ ExpressionStatement@@MethodInvocation:parameterMap.put("nullkey",new JobParameter(value)) @AT@ 6820 @LENGTH@ 52
---------INS SimpleName@@Name:parameterMap @TO@ MethodInvocation@@parameterMap.put("nullkey",new JobParameter(value)) @AT@ 6820 @LENGTH@ 12
---------INS SimpleName@@MethodName:put:["nullkey", new JobParameter(value)] @TO@ MethodInvocation@@parameterMap.put("nullkey",new JobParameter(value)) @AT@ 6833 @LENGTH@ 39
------------INS StringLiteral@@"nullkey" @TO@ SimpleName@@MethodName:put:["nullkey", new JobParameter(value)] @AT@ 6837 @LENGTH@ 9
------------INS ClassInstanceCreation@@JobParameter[value] @TO@ SimpleName@@MethodName:put:["nullkey", new JobParameter(value)] @AT@ 6848 @LENGTH@ 23
---------------INS New@@new @TO@ ClassInstanceCreation@@JobParameter[value] @AT@ 6848 @LENGTH@ 3
---------------INS SimpleType@@JobParameter @TO@ ClassInstanceCreation@@JobParameter[value] @AT@ 6852 @LENGTH@ 12
---------------INS SimpleName@@value @TO@ ClassInstanceCreation@@JobParameter[value] @AT@ 6865 @LENGTH@ 5
---INS VariableDeclarationStatement@@JobParameters jobParameters=new JobParameters(parameterMap); @TO@ MethodDeclaration@@public, void, MethodName:testToPropertiesWithNullValue,  @AT@ 6876 @LENGTH@ 62
------INS SimpleType@@JobParameters @TO@ VariableDeclarationStatement@@JobParameters jobParameters=new JobParameters(parameterMap); @AT@ 6876 @LENGTH@ 13
------INS VariableDeclarationFragment@@jobParameters=new JobParameters(parameterMap) @TO@ VariableDeclarationStatement@@JobParameters jobParameters=new JobParameters(parameterMap); @AT@ 6890 @LENGTH@ 47
---------INS SimpleName@@jobParameters @TO@ VariableDeclarationFragment@@jobParameters=new JobParameters(parameterMap) @AT@ 6890 @LENGTH@ 13
---------INS ClassInstanceCreation@@JobParameters[parameterMap] @TO@ VariableDeclarationFragment@@jobParameters=new JobParameters(parameterMap) @AT@ 6906 @LENGTH@ 31
------------INS New@@new @TO@ ClassInstanceCreation@@JobParameters[parameterMap] @AT@ 6906 @LENGTH@ 3
------------INS SimpleType@@JobParameters @TO@ ClassInstanceCreation@@JobParameters[parameterMap] @AT@ 6910 @LENGTH@ 13
------------INS SimpleName@@parameterMap @TO@ ClassInstanceCreation@@JobParameters[parameterMap] @AT@ 6924 @LENGTH@ 12
---INS VariableDeclarationStatement@@Properties properties=jobParameters.toProperties(); @TO@ MethodDeclaration@@public, void, MethodName:testToPropertiesWithNullValue,  @AT@ 6942 @LENGTH@ 53
------INS SimpleType@@Properties @TO@ VariableDeclarationStatement@@Properties properties=jobParameters.toProperties(); @AT@ 6942 @LENGTH@ 10
------INS VariableDeclarationFragment@@properties=jobParameters.toProperties() @TO@ VariableDeclarationStatement@@Properties properties=jobParameters.toProperties(); @AT@ 6953 @LENGTH@ 41
---------INS SimpleName@@properties @TO@ VariableDeclarationFragment@@properties=jobParameters.toProperties() @AT@ 6953 @LENGTH@ 10
---------INS MethodInvocation@@jobParameters.toProperties() @TO@ VariableDeclarationFragment@@properties=jobParameters.toProperties() @AT@ 6966 @LENGTH@ 28
------------INS SimpleName@@Name:jobParameters @TO@ MethodInvocation@@jobParameters.toProperties() @AT@ 6966 @LENGTH@ 13
------------INS SimpleName@@MethodName:toProperties:[] @TO@ MethodInvocation@@jobParameters.toProperties() @AT@ 6980 @LENGTH@ 14
---INS ExpressionStatement@@MethodInvocation:assertEquals("",properties.get("nullkey")) @TO@ MethodDeclaration@@public, void, MethodName:testToPropertiesWithNullValue,  @AT@ 6998 @LENGTH@ 44
------INS MethodInvocation@@assertEquals("",properties.get("nullkey")) @TO@ ExpressionStatement@@MethodInvocation:assertEquals("",properties.get("nullkey")) @AT@ 6998 @LENGTH@ 43
---------INS SimpleName@@MethodName:assertEquals:["", properties.get("nullkey")] @TO@ MethodInvocation@@assertEquals("",properties.get("nullkey")) @AT@ 6998 @LENGTH@ 43
------------INS StringLiteral@@"" @TO@ SimpleName@@MethodName:assertEquals:["", properties.get("nullkey")] @AT@ 7011 @LENGTH@ 2
------------INS MethodInvocation@@properties.get("nullkey") @TO@ SimpleName@@MethodName:assertEquals:["", properties.get("nullkey")] @AT@ 7015 @LENGTH@ 25
---------------INS SimpleName@@Name:properties @TO@ MethodInvocation@@properties.get("nullkey") @AT@ 7015 @LENGTH@ 10
---------------INS SimpleName@@MethodName:get:["nullkey"] @TO@ MethodInvocation@@properties.get("nullkey") @AT@ 7026 @LENGTH@ 14
------------------INS StringLiteral@@"nullkey" @TO@ SimpleName@@MethodName:get:["nullkey"] @AT@ 7030 @LENGTH@ 9


UPD IfStatement@@if (!Strings.isEmpty(baseDesc)) {  if (!baseDesc.endsWith(".")) {    baseDesc+=".";  }  baseDesc+="\n";  baseDesc+="@@REPLACE_ME@@";  if (option.isMultiValue()) {    baseDesc+="\nThe option is multivalued, and you can use the " + option.getName() + "(String, Object) method to add a value (call the method multiple times to set more values).";  }  baseDesc+="\n";  if ("parameter".equals(option.getKind()) && option.isRequired()) {    baseDesc+="\nRequired: true";  }  if (option.getDefaultValue() != null) {    String value=JavadocHelper.xmlEncode(option.getDefaultValue().toString());    baseDesc+="\nDefault: " + value;  }  baseDesc+="\nGroup: " + option.getGroup();} @TO@ if (!Strings.isEmpty(baseDesc)) {  baseDesc=JavadocHelper.xmlEncode(baseDesc);  if (!baseDesc.endsWith(".")) {    baseDesc+=".";  }  baseDesc+="\n";  baseDesc+="@@REPLACE_ME@@";  if (option.isMultiValue()) {    baseDesc+="\nThe option is multivalued, and you can use the " + option.getName() + "(String, Object) method to add a value (call the method multiple times to set more values).";  }  baseDesc+="\n";  if ("parameter".equals(option.getKind()) && option.isRequired()) {    baseDesc+="\nRequired: true";  }  if (option.getDefaultValue() != null) {    String value=JavadocHelper.xmlEncode(option.getDefaultValue().toString());    baseDesc+="\nDefault: " + value;  }  baseDesc+="\nGroup: " + option.getGroup();} @AT@ 20472 @LENGTH@ 1467
---UPD Block@@ThenBody:{  if (!baseDesc.endsWith(".")) {    baseDesc+=".";  }  baseDesc+="\n";  baseDesc+="@@REPLACE_ME@@";  if (option.isMultiValue()) {    baseDesc+="\nThe option is multivalued, and you can use the " + option.getName() + "(String, Object) method to add a value (call the method multiple times to set more values).";  }  baseDesc+="\n";  if ("parameter".equals(option.getKind()) && option.isRequired()) {    baseDesc+="\nRequired: true";  }  if (option.getDefaultValue() != null) {    String value=JavadocHelper.xmlEncode(option.getDefaultValue().toString());    baseDesc+="\nDefault: " + value;  }  baseDesc+="\nGroup: " + option.getGroup();} @TO@ ThenBody:{  baseDesc=JavadocHelper.xmlEncode(baseDesc);  if (!baseDesc.endsWith(".")) {    baseDesc+=".";  }  baseDesc+="\n";  baseDesc+="@@REPLACE_ME@@";  if (option.isMultiValue()) {    baseDesc+="\nThe option is multivalued, and you can use the " + option.getName() + "(String, Object) method to add a value (call the method multiple times to set more values).";  }  baseDesc+="\n";  if ("parameter".equals(option.getKind()) && option.isRequired()) {    baseDesc+="\nRequired: true";  }  if (option.getDefaultValue() != null) {    String value=JavadocHelper.xmlEncode(option.getDefaultValue().toString());    baseDesc+="\nDefault: " + value;  }  baseDesc+="\nGroup: " + option.getGroup();} @AT@ 20504 @LENGTH@ 1435
------INS ExpressionStatement@@Assignment:baseDesc=JavadocHelper.xmlEncode(baseDesc) @TO@ Block@@ThenBody:{  if (!baseDesc.endsWith(".")) {    baseDesc+=".";  }  baseDesc+="\n";  baseDesc+="@@REPLACE_ME@@";  if (option.isMultiValue()) {    baseDesc+="\nThe option is multivalued, and you can use the " + option.getName() + "(String, Object) method to add a value (call the method multiple times to set more values).";  }  baseDesc+="\n";  if ("parameter".equals(option.getKind()) && option.isRequired()) {    baseDesc+="\nRequired: true";  }  if (option.getDefaultValue() != null) {    String value=JavadocHelper.xmlEncode(option.getDefaultValue().toString());    baseDesc+="\nDefault: " + value;  }  baseDesc+="\nGroup: " + option.getGroup();} @AT@ 20644 @LENGTH@ 45
---------INS Assignment@@baseDesc=JavadocHelper.xmlEncode(baseDesc) @TO@ ExpressionStatement@@Assignment:baseDesc=JavadocHelper.xmlEncode(baseDesc) @AT@ 20644 @LENGTH@ 44
------------INS SimpleName@@baseDesc @TO@ Assignment@@baseDesc=JavadocHelper.xmlEncode(baseDesc) @AT@ 20644 @LENGTH@ 8
------------INS Operator@@= @TO@ Assignment@@baseDesc=JavadocHelper.xmlEncode(baseDesc) @AT@ 20652 @LENGTH@ 1
------------INS MethodInvocation@@JavadocHelper.xmlEncode(baseDesc) @TO@ Assignment@@baseDesc=JavadocHelper.xmlEncode(baseDesc) @AT@ 20655 @LENGTH@ 33
---------------INS SimpleName@@Name:JavadocHelper @TO@ MethodInvocation@@JavadocHelper.xmlEncode(baseDesc) @AT@ 20655 @LENGTH@ 13
---------------INS SimpleName@@MethodName:xmlEncode:[baseDesc] @TO@ MethodInvocation@@JavadocHelper.xmlEncode(baseDesc) @AT@ 20669 @LENGTH@ 19
------------------INS SimpleName@@baseDesc @TO@ SimpleName@@MethodName:xmlEncode:[baseDesc] @AT@ 20679 @LENGTH@ 8


INS IfStatement@@if (hiveConf.getBoolVar(HiveConf.ConfVars.REPL_HA_DATAPATH_REPLACE_REMOTE_NAMESERVICE) && hiveConf.getBoolVar(HiveConf.ConfVars.REPL_RUN_DATA_COPY_TASKS_ON_TARGET)) {  String remoteNS=hiveConf.get(HiveConf.ConfVars.REPL_HA_DATAPATH_REPLACE_REMOTE_NAMESERVICE_NAME.varname);  if (StringUtils.isEmpty(remoteNS)) {    throw new SemanticException(ErrorMsg.REPL_INVALID_CONFIG_FOR_SERVICE.format("Configuration 'hive.repl.ha.datapath.replace.remote.nameservice.name' is not valid " + remoteNS == null ? "null" : remoteNS,ReplUtils.REPL_HIVE_SERVICE));  }  targetPath=new Path(Utils.replaceHost(targetPath.toString(),sourcePath.toUri().getHost()));  sourcePath=new Path(Utils.replaceHost(sourcePath.toString(),remoteNS));} @TO@ MethodDeclaration@@private, void, MethodName:dirLocationToCopy, FileList fileList, Path sourcePath, HiveConf conf, HiveException,  @AT@ 8829 @LENGTH@ 832
---INS InfixExpression@@hiveConf.getBoolVar(HiveConf.ConfVars.REPL_HA_DATAPATH_REPLACE_REMOTE_NAMESERVICE) && hiveConf.getBoolVar(HiveConf.ConfVars.REPL_RUN_DATA_COPY_TASKS_ON_TARGET) @TO@ IfStatement@@if (hiveConf.getBoolVar(HiveConf.ConfVars.REPL_HA_DATAPATH_REPLACE_REMOTE_NAMESERVICE) && hiveConf.getBoolVar(HiveConf.ConfVars.REPL_RUN_DATA_COPY_TASKS_ON_TARGET)) {  String remoteNS=hiveConf.get(HiveConf.ConfVars.REPL_HA_DATAPATH_REPLACE_REMOTE_NAMESERVICE_NAME.varname);  if (StringUtils.isEmpty(remoteNS)) {    throw new SemanticException(ErrorMsg.REPL_INVALID_CONFIG_FOR_SERVICE.format("Configuration 'hive.repl.ha.datapath.replace.remote.nameservice.name' is not valid " + remoteNS == null ? "null" : remoteNS,ReplUtils.REPL_HIVE_SERVICE));  }  targetPath=new Path(Utils.replaceHost(targetPath.toString(),sourcePath.toUri().getHost()));  sourcePath=new Path(Utils.replaceHost(sourcePath.toString(),remoteNS));} @AT@ 8832 @LENGTH@ 173
------INS MethodInvocation@@hiveConf.getBoolVar(HiveConf.ConfVars.REPL_HA_DATAPATH_REPLACE_REMOTE_NAMESERVICE) @TO@ InfixExpression@@hiveConf.getBoolVar(HiveConf.ConfVars.REPL_HA_DATAPATH_REPLACE_REMOTE_NAMESERVICE) && hiveConf.getBoolVar(HiveConf.ConfVars.REPL_RUN_DATA_COPY_TASKS_ON_TARGET) @AT@ 8832 @LENGTH@ 82
---------INS SimpleName@@Name:hiveConf @TO@ MethodInvocation@@hiveConf.getBoolVar(HiveConf.ConfVars.REPL_HA_DATAPATH_REPLACE_REMOTE_NAMESERVICE) @AT@ 8832 @LENGTH@ 8
---------INS SimpleName@@MethodName:getBoolVar:[HiveConf.ConfVars.REPL_HA_DATAPATH_REPLACE_REMOTE_NAMESERVICE] @TO@ MethodInvocation@@hiveConf.getBoolVar(HiveConf.ConfVars.REPL_HA_DATAPATH_REPLACE_REMOTE_NAMESERVICE) @AT@ 8841 @LENGTH@ 73
------------INS QualifiedName@@HiveConf.ConfVars.REPL_HA_DATAPATH_REPLACE_REMOTE_NAMESERVICE @TO@ SimpleName@@MethodName:getBoolVar:[HiveConf.ConfVars.REPL_HA_DATAPATH_REPLACE_REMOTE_NAMESERVICE] @AT@ 8852 @LENGTH@ 61
---------------INS QualifiedName@@HiveConf.ConfVars @TO@ QualifiedName@@HiveConf.ConfVars.REPL_HA_DATAPATH_REPLACE_REMOTE_NAMESERVICE @AT@ 8852 @LENGTH@ 17
------------------INS SimpleName@@HiveConf @TO@ QualifiedName@@HiveConf.ConfVars @AT@ 8852 @LENGTH@ 8
------------------INS SimpleName@@ConfVars @TO@ QualifiedName@@HiveConf.ConfVars @AT@ 8861 @LENGTH@ 8
---------------INS SimpleName@@REPL_HA_DATAPATH_REPLACE_REMOTE_NAMESERVICE @TO@ QualifiedName@@HiveConf.ConfVars.REPL_HA_DATAPATH_REPLACE_REMOTE_NAMESERVICE @AT@ 8870 @LENGTH@ 43
------INS Operator@@&& @TO@ InfixExpression@@hiveConf.getBoolVar(HiveConf.ConfVars.REPL_HA_DATAPATH_REPLACE_REMOTE_NAMESERVICE) && hiveConf.getBoolVar(HiveConf.ConfVars.REPL_RUN_DATA_COPY_TASKS_ON_TARGET) @AT@ 8914 @LENGTH@ 2
------INS MethodInvocation@@hiveConf.getBoolVar(HiveConf.ConfVars.REPL_RUN_DATA_COPY_TASKS_ON_TARGET) @TO@ InfixExpression@@hiveConf.getBoolVar(HiveConf.ConfVars.REPL_HA_DATAPATH_REPLACE_REMOTE_NAMESERVICE) && hiveConf.getBoolVar(HiveConf.ConfVars.REPL_RUN_DATA_COPY_TASKS_ON_TARGET) @AT@ 8932 @LENGTH@ 73
---------INS SimpleName@@Name:hiveConf @TO@ MethodInvocation@@hiveConf.getBoolVar(HiveConf.ConfVars.REPL_RUN_DATA_COPY_TASKS_ON_TARGET) @AT@ 8932 @LENGTH@ 8
---------INS SimpleName@@MethodName:getBoolVar:[HiveConf.ConfVars.REPL_RUN_DATA_COPY_TASKS_ON_TARGET] @TO@ MethodInvocation@@hiveConf.getBoolVar(HiveConf.ConfVars.REPL_RUN_DATA_COPY_TASKS_ON_TARGET) @AT@ 8941 @LENGTH@ 64
------------INS QualifiedName@@HiveConf.ConfVars.REPL_RUN_DATA_COPY_TASKS_ON_TARGET @TO@ SimpleName@@MethodName:getBoolVar:[HiveConf.ConfVars.REPL_RUN_DATA_COPY_TASKS_ON_TARGET] @AT@ 8952 @LENGTH@ 52
---------------INS QualifiedName@@HiveConf.ConfVars @TO@ QualifiedName@@HiveConf.ConfVars.REPL_RUN_DATA_COPY_TASKS_ON_TARGET @AT@ 8952 @LENGTH@ 17
------------------INS SimpleName@@HiveConf @TO@ QualifiedName@@HiveConf.ConfVars @AT@ 8952 @LENGTH@ 8
------------------INS SimpleName@@ConfVars @TO@ QualifiedName@@HiveConf.ConfVars @AT@ 8961 @LENGTH@ 8
---------------INS SimpleName@@REPL_RUN_DATA_COPY_TASKS_ON_TARGET @TO@ QualifiedName@@HiveConf.ConfVars.REPL_RUN_DATA_COPY_TASKS_ON_TARGET @AT@ 8970 @LENGTH@ 34
---INS Block@@ThenBody:{  String remoteNS=hiveConf.get(HiveConf.ConfVars.REPL_HA_DATAPATH_REPLACE_REMOTE_NAMESERVICE_NAME.varname);  if (StringUtils.isEmpty(remoteNS)) {    throw new SemanticException(ErrorMsg.REPL_INVALID_CONFIG_FOR_SERVICE.format("Configuration 'hive.repl.ha.datapath.replace.remote.nameservice.name' is not valid " + remoteNS == null ? "null" : remoteNS,ReplUtils.REPL_HIVE_SERVICE));  }  targetPath=new Path(Utils.replaceHost(targetPath.toString(),sourcePath.toUri().getHost()));  sourcePath=new Path(Utils.replaceHost(sourcePath.toString(),remoteNS));} @TO@ IfStatement@@if (hiveConf.getBoolVar(HiveConf.ConfVars.REPL_HA_DATAPATH_REPLACE_REMOTE_NAMESERVICE) && hiveConf.getBoolVar(HiveConf.ConfVars.REPL_RUN_DATA_COPY_TASKS_ON_TARGET)) {  String remoteNS=hiveConf.get(HiveConf.ConfVars.REPL_HA_DATAPATH_REPLACE_REMOTE_NAMESERVICE_NAME.varname);  if (StringUtils.isEmpty(remoteNS)) {    throw new SemanticException(ErrorMsg.REPL_INVALID_CONFIG_FOR_SERVICE.format("Configuration 'hive.repl.ha.datapath.replace.remote.nameservice.name' is not valid " + remoteNS == null ? "null" : remoteNS,ReplUtils.REPL_HIVE_SERVICE));  }  targetPath=new Path(Utils.replaceHost(targetPath.toString(),sourcePath.toUri().getHost()));  sourcePath=new Path(Utils.replaceHost(sourcePath.toString(),remoteNS));} @AT@ 9007 @LENGTH@ 654
------INS VariableDeclarationStatement@@String remoteNS=hiveConf.get(HiveConf.ConfVars.REPL_HA_DATAPATH_REPLACE_REMOTE_NAMESERVICE_NAME.varname); @TO@ Block@@ThenBody:{  String remoteNS=hiveConf.get(HiveConf.ConfVars.REPL_HA_DATAPATH_REPLACE_REMOTE_NAMESERVICE_NAME.varname);  if (StringUtils.isEmpty(remoteNS)) {    throw new SemanticException(ErrorMsg.REPL_INVALID_CONFIG_FOR_SERVICE.format("Configuration 'hive.repl.ha.datapath.replace.remote.nameservice.name' is not valid " + remoteNS == null ? "null" : remoteNS,ReplUtils.REPL_HIVE_SERVICE));  }  targetPath=new Path(Utils.replaceHost(targetPath.toString(),sourcePath.toUri().getHost()));  sourcePath=new Path(Utils.replaceHost(sourcePath.toString(),remoteNS));} @AT@ 9017 @LENGTH@ 107
---------INS SimpleType@@String @TO@ VariableDeclarationStatement@@String remoteNS=hiveConf.get(HiveConf.ConfVars.REPL_HA_DATAPATH_REPLACE_REMOTE_NAMESERVICE_NAME.varname); @AT@ 9017 @LENGTH@ 6
---------INS VariableDeclarationFragment@@remoteNS=hiveConf.get(HiveConf.ConfVars.REPL_HA_DATAPATH_REPLACE_REMOTE_NAMESERVICE_NAME.varname) @TO@ VariableDeclarationStatement@@String remoteNS=hiveConf.get(HiveConf.ConfVars.REPL_HA_DATAPATH_REPLACE_REMOTE_NAMESERVICE_NAME.varname); @AT@ 9024 @LENGTH@ 99
------------INS SimpleName@@remoteNS @TO@ VariableDeclarationFragment@@remoteNS=hiveConf.get(HiveConf.ConfVars.REPL_HA_DATAPATH_REPLACE_REMOTE_NAMESERVICE_NAME.varname) @AT@ 9024 @LENGTH@ 8
------------INS MethodInvocation@@hiveConf.get(HiveConf.ConfVars.REPL_HA_DATAPATH_REPLACE_REMOTE_NAMESERVICE_NAME.varname) @TO@ VariableDeclarationFragment@@remoteNS=hiveConf.get(HiveConf.ConfVars.REPL_HA_DATAPATH_REPLACE_REMOTE_NAMESERVICE_NAME.varname) @AT@ 9035 @LENGTH@ 88
---------------INS SimpleName@@Name:hiveConf @TO@ MethodInvocation@@hiveConf.get(HiveConf.ConfVars.REPL_HA_DATAPATH_REPLACE_REMOTE_NAMESERVICE_NAME.varname) @AT@ 9035 @LENGTH@ 8
---------------INS SimpleName@@MethodName:get:[HiveConf.ConfVars.REPL_HA_DATAPATH_REPLACE_REMOTE_NAMESERVICE_NAME.varname] @TO@ MethodInvocation@@hiveConf.get(HiveConf.ConfVars.REPL_HA_DATAPATH_REPLACE_REMOTE_NAMESERVICE_NAME.varname) @AT@ 9044 @LENGTH@ 79
------------------INS QualifiedName@@HiveConf.ConfVars.REPL_HA_DATAPATH_REPLACE_REMOTE_NAMESERVICE_NAME.varname @TO@ SimpleName@@MethodName:get:[HiveConf.ConfVars.REPL_HA_DATAPATH_REPLACE_REMOTE_NAMESERVICE_NAME.varname] @AT@ 9048 @LENGTH@ 74
---------------------INS QualifiedName@@HiveConf.ConfVars.REPL_HA_DATAPATH_REPLACE_REMOTE_NAMESERVICE_NAME @TO@ QualifiedName@@HiveConf.ConfVars.REPL_HA_DATAPATH_REPLACE_REMOTE_NAMESERVICE_NAME.varname @AT@ 9048 @LENGTH@ 66
------------------------INS QualifiedName@@HiveConf.ConfVars @TO@ QualifiedName@@HiveConf.ConfVars.REPL_HA_DATAPATH_REPLACE_REMOTE_NAMESERVICE_NAME @AT@ 9048 @LENGTH@ 17
---------------------------INS SimpleName@@HiveConf @TO@ QualifiedName@@HiveConf.ConfVars @AT@ 9048 @LENGTH@ 8
---------------------------INS SimpleName@@ConfVars @TO@ QualifiedName@@HiveConf.ConfVars @AT@ 9057 @LENGTH@ 8
------------------------INS SimpleName@@REPL_HA_DATAPATH_REPLACE_REMOTE_NAMESERVICE_NAME @TO@ QualifiedName@@HiveConf.ConfVars.REPL_HA_DATAPATH_REPLACE_REMOTE_NAMESERVICE_NAME @AT@ 9066 @LENGTH@ 48
---------------------INS SimpleName@@varname @TO@ QualifiedName@@HiveConf.ConfVars.REPL_HA_DATAPATH_REPLACE_REMOTE_NAMESERVICE_NAME.varname @AT@ 9115 @LENGTH@ 7
------INS IfStatement@@if (StringUtils.isEmpty(remoteNS)) {  throw new SemanticException(ErrorMsg.REPL_INVALID_CONFIG_FOR_SERVICE.format("Configuration 'hive.repl.ha.datapath.replace.remote.nameservice.name' is not valid " + remoteNS == null ? "null" : remoteNS,ReplUtils.REPL_HIVE_SERVICE));} @TO@ Block@@ThenBody:{  String remoteNS=hiveConf.get(HiveConf.ConfVars.REPL_HA_DATAPATH_REPLACE_REMOTE_NAMESERVICE_NAME.varname);  if (StringUtils.isEmpty(remoteNS)) {    throw new SemanticException(ErrorMsg.REPL_INVALID_CONFIG_FOR_SERVICE.format("Configuration 'hive.repl.ha.datapath.replace.remote.nameservice.name' is not valid " + remoteNS == null ? "null" : remoteNS,ReplUtils.REPL_HIVE_SERVICE));  }  targetPath=new Path(Utils.replaceHost(targetPath.toString(),sourcePath.toUri().getHost()));  sourcePath=new Path(Utils.replaceHost(sourcePath.toString(),remoteNS));} @AT@ 9133 @LENGTH@ 334
---------INS MethodInvocation@@StringUtils.isEmpty(remoteNS) @TO@ IfStatement@@if (StringUtils.isEmpty(remoteNS)) {  throw new SemanticException(ErrorMsg.REPL_INVALID_CONFIG_FOR_SERVICE.format("Configuration 'hive.repl.ha.datapath.replace.remote.nameservice.name' is not valid " + remoteNS == null ? "null" : remoteNS,ReplUtils.REPL_HIVE_SERVICE));} @AT@ 9137 @LENGTH@ 29
------------INS SimpleName@@Name:StringUtils @TO@ MethodInvocation@@StringUtils.isEmpty(remoteNS) @AT@ 9137 @LENGTH@ 11
------------INS SimpleName@@MethodName:isEmpty:[remoteNS] @TO@ MethodInvocation@@StringUtils.isEmpty(remoteNS) @AT@ 9149 @LENGTH@ 17
---------------INS SimpleName@@remoteNS @TO@ SimpleName@@MethodName:isEmpty:[remoteNS] @AT@ 9157 @LENGTH@ 8
---------INS Block@@ThenBody:{  throw new SemanticException(ErrorMsg.REPL_INVALID_CONFIG_FOR_SERVICE.format("Configuration 'hive.repl.ha.datapath.replace.remote.nameservice.name' is not valid " + remoteNS == null ? "null" : remoteNS,ReplUtils.REPL_HIVE_SERVICE));} @TO@ IfStatement@@if (StringUtils.isEmpty(remoteNS)) {  throw new SemanticException(ErrorMsg.REPL_INVALID_CONFIG_FOR_SERVICE.format("Configuration 'hive.repl.ha.datapath.replace.remote.nameservice.name' is not valid " + remoteNS == null ? "null" : remoteNS,ReplUtils.REPL_HIVE_SERVICE));} @AT@ 9168 @LENGTH@ 299
------------INS ThrowStatement@@ClassInstanceCreation:new SemanticException(ErrorMsg.REPL_INVALID_CONFIG_FOR_SERVICE.format("Configuration 'hive.repl.ha.datapath.replace.remote.nameservice.name' is not valid " + remoteNS == null ? "null" : remoteNS,ReplUtils.REPL_HIVE_SERVICE)) @TO@ Block@@ThenBody:{  throw new SemanticException(ErrorMsg.REPL_INVALID_CONFIG_FOR_SERVICE.format("Configuration 'hive.repl.ha.datapath.replace.remote.nameservice.name' is not valid " + remoteNS == null ? "null" : remoteNS,ReplUtils.REPL_HIVE_SERVICE));} @AT@ 9180 @LENGTH@ 277
---------------INS ClassInstanceCreation@@SemanticException[ErrorMsg.REPL_INVALID_CONFIG_FOR_SERVICE.format("Configuration 'hive.repl.ha.datapath.replace.remote.nameservice.name' is not valid " + remoteNS == null ? "null" : remoteNS,ReplUtils.REPL_HIVE_SERVICE)] @TO@ ThrowStatement@@ClassInstanceCreation:new SemanticException(ErrorMsg.REPL_INVALID_CONFIG_FOR_SERVICE.format("Configuration 'hive.repl.ha.datapath.replace.remote.nameservice.name' is not valid " + remoteNS == null ? "null" : remoteNS,ReplUtils.REPL_HIVE_SERVICE)) @AT@ 9186 @LENGTH@ 270
------------------INS New@@new @TO@ ClassInstanceCreation@@SemanticException[ErrorMsg.REPL_INVALID_CONFIG_FOR_SERVICE.format("Configuration 'hive.repl.ha.datapath.replace.remote.nameservice.name' is not valid " + remoteNS == null ? "null" : remoteNS,ReplUtils.REPL_HIVE_SERVICE)] @AT@ 9186 @LENGTH@ 3
------------------INS SimpleType@@SemanticException @TO@ ClassInstanceCreation@@SemanticException[ErrorMsg.REPL_INVALID_CONFIG_FOR_SERVICE.format("Configuration 'hive.repl.ha.datapath.replace.remote.nameservice.name' is not valid " + remoteNS == null ? "null" : remoteNS,ReplUtils.REPL_HIVE_SERVICE)] @AT@ 9190 @LENGTH@ 17
------------------INS MethodInvocation@@ErrorMsg.REPL_INVALID_CONFIG_FOR_SERVICE.format("Configuration 'hive.repl.ha.datapath.replace.remote.nameservice.name' is not valid " + remoteNS == null ? "null" : remoteNS,ReplUtils.REPL_HIVE_SERVICE) @TO@ ClassInstanceCreation@@SemanticException[ErrorMsg.REPL_INVALID_CONFIG_FOR_SERVICE.format("Configuration 'hive.repl.ha.datapath.replace.remote.nameservice.name' is not valid " + remoteNS == null ? "null" : remoteNS,ReplUtils.REPL_HIVE_SERVICE)] @AT@ 9208 @LENGTH@ 247
---------------------INS QualifiedName@@Name:ErrorMsg.REPL_INVALID_CONFIG_FOR_SERVICE @TO@ MethodInvocation@@ErrorMsg.REPL_INVALID_CONFIG_FOR_SERVICE.format("Configuration 'hive.repl.ha.datapath.replace.remote.nameservice.name' is not valid " + remoteNS == null ? "null" : remoteNS,ReplUtils.REPL_HIVE_SERVICE) @AT@ 9208 @LENGTH@ 40
---------------------INS SimpleName@@MethodName:format:["Configuration 'hive.repl.ha.datapath.replace.remote.nameservice.name' is not valid " + remoteNS == null ? "null" : remoteNS, ReplUtils.REPL_HIVE_SERVICE] @TO@ MethodInvocation@@ErrorMsg.REPL_INVALID_CONFIG_FOR_SERVICE.format("Configuration 'hive.repl.ha.datapath.replace.remote.nameservice.name' is not valid " + remoteNS == null ? "null" : remoteNS,ReplUtils.REPL_HIVE_SERVICE) @AT@ 9268 @LENGTH@ 187
------------------------INS ConditionalExpression@@"Configuration 'hive.repl.ha.datapath.replace.remote.nameservice.name' is not valid " + remoteNS == null ? "null" : remoteNS @TO@ SimpleName@@MethodName:format:["Configuration 'hive.repl.ha.datapath.replace.remote.nameservice.name' is not valid " + remoteNS == null ? "null" : remoteNS, ReplUtils.REPL_HIVE_SERVICE] @AT@ 9275 @LENGTH@ 150
---------------------------INS InfixExpression@@"Configuration 'hive.repl.ha.datapath.replace.remote.nameservice.name' is not valid " + remoteNS == null @TO@ ConditionalExpression@@"Configuration 'hive.repl.ha.datapath.replace.remote.nameservice.name' is not valid " + remoteNS == null ? "null" : remoteNS @AT@ 9275 @LENGTH@ 130
------------------------------INS InfixExpression@@"Configuration 'hive.repl.ha.datapath.replace.remote.nameservice.name' is not valid " + remoteNS @TO@ InfixExpression@@"Configuration 'hive.repl.ha.datapath.replace.remote.nameservice.name' is not valid " + remoteNS == null @AT@ 9275 @LENGTH@ 122
---------------------------------INS StringLiteral@@"Configuration 'hive.repl.ha.datapath.replace.remote.nameservice.name' is not valid " @TO@ InfixExpression@@"Configuration 'hive.repl.ha.datapath.replace.remote.nameservice.name' is not valid " + remoteNS @AT@ 9275 @LENGTH@ 85
---------------------------------INS Operator@@+ @TO@ InfixExpression@@"Configuration 'hive.repl.ha.datapath.replace.remote.nameservice.name' is not valid " + remoteNS @AT@ 9360 @LENGTH@ 1
---------------------------------INS SimpleName@@remoteNS @TO@ InfixExpression@@"Configuration 'hive.repl.ha.datapath.replace.remote.nameservice.name' is not valid " + remoteNS @AT@ 9389 @LENGTH@ 8
------------------------------INS Operator@@== @TO@ InfixExpression@@"Configuration 'hive.repl.ha.datapath.replace.remote.nameservice.name' is not valid " + remoteNS == null @AT@ 9397 @LENGTH@ 2
------------------------------INS NullLiteral@@null @TO@ InfixExpression@@"Configuration 'hive.repl.ha.datapath.replace.remote.nameservice.name' is not valid " + remoteNS == null @AT@ 9401 @LENGTH@ 4
---------------------------INS StringLiteral@@"null" @TO@ ConditionalExpression@@"Configuration 'hive.repl.ha.datapath.replace.remote.nameservice.name' is not valid " + remoteNS == null ? "null" : remoteNS @AT@ 9408 @LENGTH@ 6
---------------------------INS SimpleName@@remoteNS @TO@ ConditionalExpression@@"Configuration 'hive.repl.ha.datapath.replace.remote.nameservice.name' is not valid " + remoteNS == null ? "null" : remoteNS @AT@ 9417 @LENGTH@ 8
------------------------INS QualifiedName@@ReplUtils.REPL_HIVE_SERVICE @TO@ SimpleName@@MethodName:format:["Configuration 'hive.repl.ha.datapath.replace.remote.nameservice.name' is not valid " + remoteNS == null ? "null" : remoteNS, ReplUtils.REPL_HIVE_SERVICE] @AT@ 9427 @LENGTH@ 27
---------------------------INS SimpleName@@ReplUtils @TO@ QualifiedName@@ReplUtils.REPL_HIVE_SERVICE @AT@ 9427 @LENGTH@ 9
---------------------------INS SimpleName@@REPL_HIVE_SERVICE @TO@ QualifiedName@@ReplUtils.REPL_HIVE_SERVICE @AT@ 9437 @LENGTH@ 17
------INS ExpressionStatement@@Assignment:targetPath=new Path(Utils.replaceHost(targetPath.toString(),sourcePath.toUri().getHost())) @TO@ Block@@ThenBody:{  String remoteNS=hiveConf.get(HiveConf.ConfVars.REPL_HA_DATAPATH_REPLACE_REMOTE_NAMESERVICE_NAME.varname);  if (StringUtils.isEmpty(remoteNS)) {    throw new SemanticException(ErrorMsg.REPL_INVALID_CONFIG_FOR_SERVICE.format("Configuration 'hive.repl.ha.datapath.replace.remote.nameservice.name' is not valid " + remoteNS == null ? "null" : remoteNS,ReplUtils.REPL_HIVE_SERVICE));  }  targetPath=new Path(Utils.replaceHost(targetPath.toString(),sourcePath.toUri().getHost()));  sourcePath=new Path(Utils.replaceHost(sourcePath.toString(),remoteNS));} @AT@ 9476 @LENGTH@ 94
---------INS Assignment@@targetPath=new Path(Utils.replaceHost(targetPath.toString(),sourcePath.toUri().getHost())) @TO@ ExpressionStatement@@Assignment:targetPath=new Path(Utils.replaceHost(targetPath.toString(),sourcePath.toUri().getHost())) @AT@ 9476 @LENGTH@ 93
------------INS SimpleName@@targetPath @TO@ Assignment@@targetPath=new Path(Utils.replaceHost(targetPath.toString(),sourcePath.toUri().getHost())) @AT@ 9476 @LENGTH@ 10
------------INS Operator@@= @TO@ Assignment@@targetPath=new Path(Utils.replaceHost(targetPath.toString(),sourcePath.toUri().getHost())) @AT@ 9486 @LENGTH@ 1
------------INS ClassInstanceCreation@@Path[Utils.replaceHost(targetPath.toString(),sourcePath.toUri().getHost())] @TO@ Assignment@@targetPath=new Path(Utils.replaceHost(targetPath.toString(),sourcePath.toUri().getHost())) @AT@ 9489 @LENGTH@ 80
---------------INS New@@new @TO@ ClassInstanceCreation@@Path[Utils.replaceHost(targetPath.toString(),sourcePath.toUri().getHost())] @AT@ 9489 @LENGTH@ 3
---------------INS SimpleType@@Path @TO@ ClassInstanceCreation@@Path[Utils.replaceHost(targetPath.toString(),sourcePath.toUri().getHost())] @AT@ 9493 @LENGTH@ 4
---------------INS MethodInvocation@@Utils.replaceHost(targetPath.toString(),sourcePath.toUri().getHost()) @TO@ ClassInstanceCreation@@Path[Utils.replaceHost(targetPath.toString(),sourcePath.toUri().getHost())] @AT@ 9498 @LENGTH@ 70
------------------INS SimpleName@@Name:Utils @TO@ MethodInvocation@@Utils.replaceHost(targetPath.toString(),sourcePath.toUri().getHost()) @AT@ 9498 @LENGTH@ 5
------------------INS SimpleName@@MethodName:replaceHost:[targetPath.toString(), sourcePath.toUri().getHost()] @TO@ MethodInvocation@@Utils.replaceHost(targetPath.toString(),sourcePath.toUri().getHost()) @AT@ 9504 @LENGTH@ 64
---------------------INS MethodInvocation@@targetPath.toString() @TO@ SimpleName@@MethodName:replaceHost:[targetPath.toString(), sourcePath.toUri().getHost()] @AT@ 9516 @LENGTH@ 21
------------------------INS SimpleName@@Name:targetPath @TO@ MethodInvocation@@targetPath.toString() @AT@ 9516 @LENGTH@ 10
------------------------INS SimpleName@@MethodName:toString:[] @TO@ MethodInvocation@@targetPath.toString() @AT@ 9527 @LENGTH@ 10
---------------------INS MethodInvocation@@sourcePath.toUri().getHost() @TO@ SimpleName@@MethodName:replaceHost:[targetPath.toString(), sourcePath.toUri().getHost()] @AT@ 9539 @LENGTH@ 28
------------------------INS MethodInvocation@@MethodName:toUri:[] @TO@ MethodInvocation@@sourcePath.toUri().getHost() @AT@ 9539 @LENGTH@ 18
------------------------INS SimpleName@@Name:sourcePath @TO@ MethodInvocation@@sourcePath.toUri().getHost() @AT@ 9539 @LENGTH@ 10
------------------------INS SimpleName@@MethodName:getHost:[] @TO@ MethodInvocation@@sourcePath.toUri().getHost() @AT@ 9558 @LENGTH@ 9
------INS ExpressionStatement@@Assignment:sourcePath=new Path(Utils.replaceHost(sourcePath.toString(),remoteNS)) @TO@ Block@@ThenBody:{  String remoteNS=hiveConf.get(HiveConf.ConfVars.REPL_HA_DATAPATH_REPLACE_REMOTE_NAMESERVICE_NAME.varname);  if (StringUtils.isEmpty(remoteNS)) {    throw new SemanticException(ErrorMsg.REPL_INVALID_CONFIG_FOR_SERVICE.format("Configuration 'hive.repl.ha.datapath.replace.remote.nameservice.name' is not valid " + remoteNS == null ? "null" : remoteNS,ReplUtils.REPL_HIVE_SERVICE));  }  targetPath=new Path(Utils.replaceHost(targetPath.toString(),sourcePath.toUri().getHost()));  sourcePath=new Path(Utils.replaceHost(sourcePath.toString(),remoteNS));} @AT@ 9579 @LENGTH@ 74
---------INS Assignment@@sourcePath=new Path(Utils.replaceHost(sourcePath.toString(),remoteNS)) @TO@ ExpressionStatement@@Assignment:sourcePath=new Path(Utils.replaceHost(sourcePath.toString(),remoteNS)) @AT@ 9579 @LENGTH@ 73
------------INS SimpleName@@sourcePath @TO@ Assignment@@sourcePath=new Path(Utils.replaceHost(sourcePath.toString(),remoteNS)) @AT@ 9579 @LENGTH@ 10
------------INS Operator@@= @TO@ Assignment@@sourcePath=new Path(Utils.replaceHost(sourcePath.toString(),remoteNS)) @AT@ 9589 @LENGTH@ 1
------------INS ClassInstanceCreation@@Path[Utils.replaceHost(sourcePath.toString(),remoteNS)] @TO@ Assignment@@sourcePath=new Path(Utils.replaceHost(sourcePath.toString(),remoteNS)) @AT@ 9592 @LENGTH@ 60
---------------INS New@@new @TO@ ClassInstanceCreation@@Path[Utils.replaceHost(sourcePath.toString(),remoteNS)] @AT@ 9592 @LENGTH@ 3
---------------INS SimpleType@@Path @TO@ ClassInstanceCreation@@Path[Utils.replaceHost(sourcePath.toString(),remoteNS)] @AT@ 9596 @LENGTH@ 4
---------------INS MethodInvocation@@Utils.replaceHost(sourcePath.toString(),remoteNS) @TO@ ClassInstanceCreation@@Path[Utils.replaceHost(sourcePath.toString(),remoteNS)] @AT@ 9601 @LENGTH@ 50
------------------INS SimpleName@@Name:Utils @TO@ MethodInvocation@@Utils.replaceHost(sourcePath.toString(),remoteNS) @AT@ 9601 @LENGTH@ 5
------------------INS SimpleName@@MethodName:replaceHost:[sourcePath.toString(), remoteNS] @TO@ MethodInvocation@@Utils.replaceHost(sourcePath.toString(),remoteNS) @AT@ 9607 @LENGTH@ 44
---------------------INS MethodInvocation@@sourcePath.toString() @TO@ SimpleName@@MethodName:replaceHost:[sourcePath.toString(), remoteNS] @AT@ 9619 @LENGTH@ 21
------------------------INS SimpleName@@Name:sourcePath @TO@ MethodInvocation@@sourcePath.toString() @AT@ 9619 @LENGTH@ 10
------------------------INS SimpleName@@MethodName:toString:[] @TO@ MethodInvocation@@sourcePath.toString() @AT@ 9630 @LENGTH@ 10
---------------------INS SimpleName@@remoteNS @TO@ SimpleName@@MethodName:replaceHost:[sourcePath.toString(), remoteNS] @AT@ 9642 @LENGTH@ 8


INS MethodDeclaration@@void, MethodName:lPosNonExisting,  @TO@ TypeDeclaration@@[public, abstract]AbstractConnectionIntegrationTests,  @AT@ 46610 @LENGTH@ 222
---INS PrimitiveType@@void @TO@ MethodDeclaration@@void, MethodName:lPosNonExisting,  @AT@ 46605 @LENGTH@ 4
---INS SimpleName@@MethodName:lPosNonExisting @TO@ MethodDeclaration@@void, MethodName:lPosNonExisting,  @AT@ 46610 @LENGTH@ 15
---INS ExpressionStatement@@MethodInvocation:actual.add(connection.rPush("mylist","a","b","c","1","2","3","c","c")) @TO@ MethodDeclaration@@void, MethodName:lPosNonExisting,  @AT@ 46633 @LENGTH@ 79
------INS MethodInvocation@@actual.add(connection.rPush("mylist","a","b","c","1","2","3","c","c")) @TO@ ExpressionStatement@@MethodInvocation:actual.add(connection.rPush("mylist","a","b","c","1","2","3","c","c")) @AT@ 46633 @LENGTH@ 78
---------INS SimpleName@@Name:actual @TO@ MethodInvocation@@actual.add(connection.rPush("mylist","a","b","c","1","2","3","c","c")) @AT@ 46633 @LENGTH@ 6
---------INS SimpleName@@MethodName:add:[connection.rPush("mylist","a","b","c","1","2","3","c","c")] @TO@ MethodInvocation@@actual.add(connection.rPush("mylist","a","b","c","1","2","3","c","c")) @AT@ 46640 @LENGTH@ 71
------------INS MethodInvocation@@connection.rPush("mylist","a","b","c","1","2","3","c","c") @TO@ SimpleName@@MethodName:add:[connection.rPush("mylist","a","b","c","1","2","3","c","c")] @AT@ 46644 @LENGTH@ 66
---------------INS SimpleName@@Name:connection @TO@ MethodInvocation@@connection.rPush("mylist","a","b","c","1","2","3","c","c") @AT@ 46644 @LENGTH@ 10
---------------INS SimpleName@@MethodName:rPush:["mylist", "a", "b", "c", "1", "2", "3", "c", "c"] @TO@ MethodInvocation@@connection.rPush("mylist","a","b","c","1","2","3","c","c") @AT@ 46655 @LENGTH@ 55
------------------INS StringLiteral@@"mylist" @TO@ SimpleName@@MethodName:rPush:["mylist", "a", "b", "c", "1", "2", "3", "c", "c"] @AT@ 46661 @LENGTH@ 8
------------------INS StringLiteral@@"a" @TO@ SimpleName@@MethodName:rPush:["mylist", "a", "b", "c", "1", "2", "3", "c", "c"] @AT@ 46671 @LENGTH@ 3
------------------INS StringLiteral@@"b" @TO@ SimpleName@@MethodName:rPush:["mylist", "a", "b", "c", "1", "2", "3", "c", "c"] @AT@ 46676 @LENGTH@ 3
------------------INS StringLiteral@@"c" @TO@ SimpleName@@MethodName:rPush:["mylist", "a", "b", "c", "1", "2", "3", "c", "c"] @AT@ 46681 @LENGTH@ 3
------------------INS StringLiteral@@"1" @TO@ SimpleName@@MethodName:rPush:["mylist", "a", "b", "c", "1", "2", "3", "c", "c"] @AT@ 46686 @LENGTH@ 3
------------------INS StringLiteral@@"2" @TO@ SimpleName@@MethodName:rPush:["mylist", "a", "b", "c", "1", "2", "3", "c", "c"] @AT@ 46691 @LENGTH@ 3
------------------INS StringLiteral@@"3" @TO@ SimpleName@@MethodName:rPush:["mylist", "a", "b", "c", "1", "2", "3", "c", "c"] @AT@ 46696 @LENGTH@ 3
------------------INS StringLiteral@@"c" @TO@ SimpleName@@MethodName:rPush:["mylist", "a", "b", "c", "1", "2", "3", "c", "c"] @AT@ 46701 @LENGTH@ 3
------------------INS StringLiteral@@"c" @TO@ SimpleName@@MethodName:rPush:["mylist", "a", "b", "c", "1", "2", "3", "c", "c"] @AT@ 46706 @LENGTH@ 3
---INS ExpressionStatement@@MethodInvocation:actual.add(connection.lPos("mylist","x",null,null)) @TO@ MethodDeclaration@@void, MethodName:lPosNonExisting,  @AT@ 46715 @LENGTH@ 55
------INS MethodInvocation@@actual.add(connection.lPos("mylist","x",null,null)) @TO@ ExpressionStatement@@MethodInvocation:actual.add(connection.lPos("mylist","x",null,null)) @AT@ 46715 @LENGTH@ 54
---------INS SimpleName@@Name:actual @TO@ MethodInvocation@@actual.add(connection.lPos("mylist","x",null,null)) @AT@ 46715 @LENGTH@ 6
---------INS SimpleName@@MethodName:add:[connection.lPos("mylist","x",null,null)] @TO@ MethodInvocation@@actual.add(connection.lPos("mylist","x",null,null)) @AT@ 46722 @LENGTH@ 47
------------INS MethodInvocation@@connection.lPos("mylist","x",null,null) @TO@ SimpleName@@MethodName:add:[connection.lPos("mylist","x",null,null)] @AT@ 46726 @LENGTH@ 42
---------------INS SimpleName@@Name:connection @TO@ MethodInvocation@@connection.lPos("mylist","x",null,null) @AT@ 46726 @LENGTH@ 10
---------------INS SimpleName@@MethodName:lPos:["mylist", "x", null, null] @TO@ MethodInvocation@@connection.lPos("mylist","x",null,null) @AT@ 46737 @LENGTH@ 31
------------------INS StringLiteral@@"mylist" @TO@ SimpleName@@MethodName:lPos:["mylist", "x", null, null] @AT@ 46742 @LENGTH@ 8
------------------INS StringLiteral@@"x" @TO@ SimpleName@@MethodName:lPos:["mylist", "x", null, null] @AT@ 46752 @LENGTH@ 3
------------------INS NullLiteral@@null @TO@ SimpleName@@MethodName:lPos:["mylist", "x", null, null] @AT@ 46757 @LENGTH@ 4
------------------INS NullLiteral@@null @TO@ SimpleName@@MethodName:lPos:["mylist", "x", null, null] @AT@ 46763 @LENGTH@ 4
---INS ExpressionStatement@@MethodInvocation:assertThat((List<Long>)getResults().get(1)).isEmpty() @TO@ MethodDeclaration@@void, MethodName:lPosNonExisting,  @AT@ 46774 @LENGTH@ 55
------INS MethodInvocation@@assertThat((List<Long>)getResults().get(1)).isEmpty() @TO@ ExpressionStatement@@MethodInvocation:assertThat((List<Long>)getResults().get(1)).isEmpty() @AT@ 46774 @LENGTH@ 54
---------INS MethodInvocation@@MethodName:assertThat:[(List<Long>)getResults().get(1)] @TO@ MethodInvocation@@assertThat((List<Long>)getResults().get(1)).isEmpty() @AT@ 46774 @LENGTH@ 44
------------INS CastExpression@@(List<Long>)getResults().get(1) @TO@ MethodInvocation@@MethodName:assertThat:[(List<Long>)getResults().get(1)] @AT@ 46785 @LENGTH@ 32
---------------INS ParameterizedType@@List<Long> @TO@ CastExpression@@(List<Long>)getResults().get(1) @AT@ 46786 @LENGTH@ 10
------------------INS SimpleType@@List @TO@ ParameterizedType@@List<Long> @AT@ 46786 @LENGTH@ 4
------------------INS SimpleType@@Long @TO@ ParameterizedType@@List<Long> @AT@ 46791 @LENGTH@ 4
---------------INS MethodInvocation@@getResults().get(1) @TO@ CastExpression@@(List<Long>)getResults().get(1) @AT@ 46798 @LENGTH@ 19
------------------INS MethodInvocation@@MethodName:getResults:[] @TO@ MethodInvocation@@getResults().get(1) @AT@ 46798 @LENGTH@ 12
------------------INS SimpleName@@MethodName:get:[1] @TO@ MethodInvocation@@getResults().get(1) @AT@ 46811 @LENGTH@ 6
---------------------INS NumberLiteral@@1 @TO@ SimpleName@@MethodName:get:[1] @AT@ 46815 @LENGTH@ 1
---------INS SimpleName@@MethodName:isEmpty:[] @TO@ MethodInvocation@@assertThat((List<Long>)getResults().get(1)).isEmpty() @AT@ 46819 @LENGTH@ 9


UPD TypeDeclaration@@[@XmlRootElement(name="Country"), @XmlType(name="Country",propOrder={"name","awesomeness"}), @JsonAutoDetect({JsonMethod.NONE}), @JsonPropertyOrder({"name","temperature"}), public]Country, [Serializable] @TO@ [@XmlRootElement(name="Country"), @XmlType(name="Country",propOrder={"name","awesomeness"}), @JsonPropertyOrder({"name","temperature"}), public]Country, [Serializable] @AT@ 1543 @LENGTH@ 1087
---DEL SingleMemberAnnotation@@@JsonAutoDetect({JsonMethod.NONE}) @AT@ 1641 @LENGTH@ 34


MOV MethodDeclaration@@public, voidMethodName:FlightRecorderStartupStepRecorder,  @TO@ TypeDeclaration@@[@JdkService(StartupStepRecorder.FACTORY), public]FlightRecorderStartupStepRecorder, DefaultStartupStepRecorder @AT@ 4791 @LENGTH@ 192


UPD FieldDeclaration@@private, boolean, [nextCalled=false] @TO@ private, boolean, [nextCalled] @AT@ 1270 @LENGTH@ 35
---UPD VariableDeclarationFragment@@nextCalled=false @TO@ nextCalled @AT@ 1286 @LENGTH@ 18
------DEL BooleanLiteral@@false @AT@ 1299 @LENGTH@ 5


INS ExpressionStatement@@MethodInvocation:container.setFailedDeclarationRetryInterval(500) @TO@ MethodDeclaration@@void, MethodName:missingQueueOnStart, InterruptedException,  @AT@ 28480 @LENGTH@ 49
---INS MethodInvocation@@container.setFailedDeclarationRetryInterval(500) @TO@ ExpressionStatement@@MethodInvocation:container.setFailedDeclarationRetryInterval(500) @AT@ 28480 @LENGTH@ 48
------INS SimpleName@@Name:container @TO@ MethodInvocation@@container.setFailedDeclarationRetryInterval(500) @AT@ 28480 @LENGTH@ 9
------INS SimpleName@@MethodName:setFailedDeclarationRetryInterval:[500] @TO@ MethodInvocation@@container.setFailedDeclarationRetryInterval(500) @AT@ 28490 @LENGTH@ 38
---------INS NumberLiteral@@500 @TO@ SimpleName@@MethodName:setFailedDeclarationRetryInterval:[500] @AT@ 28524 @LENGTH@ 3


INS MethodDeclaration@@public, void, MethodName:testWriteInTransactionWithOffset, IOException,  @TO@ TypeDeclaration@@[public]TransactionAwareBufferedWriterTests,  @AT@ 9717 @LENGTH@ 546
---INS Modifier@@public @TO@ MethodDeclaration@@public, void, MethodName:testWriteInTransactionWithOffset, IOException,  @AT@ 9717 @LENGTH@ 6
---INS PrimitiveType@@void @TO@ MethodDeclaration@@public, void, MethodName:testWriteInTransactionWithOffset, IOException,  @AT@ 9724 @LENGTH@ 4
---INS SimpleName@@MethodName:testWriteInTransactionWithOffset @TO@ MethodDeclaration@@public, void, MethodName:testWriteInTransactionWithOffset, IOException,  @AT@ 9729 @LENGTH@ 32
---INS SimpleType@@IOException @TO@ MethodDeclaration@@public, void, MethodName:testWriteInTransactionWithOffset, IOException,  @AT@ 9771 @LENGTH@ 11
---INS VariableDeclarationStatement@@ArgumentCaptor<ByteBuffer> bb=ArgumentCaptor.forClass(ByteBuffer.class); @TO@ MethodDeclaration@@public, void, MethodName:testWriteInTransactionWithOffset, IOException,  @AT@ 9786 @LENGTH@ 74
------INS ParameterizedType@@ArgumentCaptor<ByteBuffer> @TO@ VariableDeclarationStatement@@ArgumentCaptor<ByteBuffer> bb=ArgumentCaptor.forClass(ByteBuffer.class); @AT@ 9786 @LENGTH@ 26
---------INS SimpleType@@ArgumentCaptor @TO@ ParameterizedType@@ArgumentCaptor<ByteBuffer> @AT@ 9786 @LENGTH@ 14
---------INS SimpleType@@ByteBuffer @TO@ ParameterizedType@@ArgumentCaptor<ByteBuffer> @AT@ 9801 @LENGTH@ 10
------INS VariableDeclarationFragment@@bb=ArgumentCaptor.forClass(ByteBuffer.class) @TO@ VariableDeclarationStatement@@ArgumentCaptor<ByteBuffer> bb=ArgumentCaptor.forClass(ByteBuffer.class); @AT@ 9813 @LENGTH@ 46
---------INS SimpleName@@bb @TO@ VariableDeclarationFragment@@bb=ArgumentCaptor.forClass(ByteBuffer.class) @AT@ 9813 @LENGTH@ 2
---------INS MethodInvocation@@ArgumentCaptor.forClass(ByteBuffer.class) @TO@ VariableDeclarationFragment@@bb=ArgumentCaptor.forClass(ByteBuffer.class) @AT@ 9818 @LENGTH@ 41
------------INS SimpleName@@Name:ArgumentCaptor @TO@ MethodInvocation@@ArgumentCaptor.forClass(ByteBuffer.class) @AT@ 9818 @LENGTH@ 14
------------INS SimpleName@@MethodName:forClass:[ByteBuffer.class] @TO@ MethodInvocation@@ArgumentCaptor.forClass(ByteBuffer.class) @AT@ 9833 @LENGTH@ 26
---------------INS TypeLiteral@@ByteBuffer.class @TO@ SimpleName@@MethodName:forClass:[ByteBuffer.class] @AT@ 9842 @LENGTH@ 16
---INS ExpressionStatement@@MethodInvocation:when(fileChannel.write(bb.capture())).thenReturn(3) @TO@ MethodDeclaration@@public, void, MethodName:testWriteInTransactionWithOffset, IOException,  @AT@ 9863 @LENGTH@ 52
------INS MethodInvocation@@when(fileChannel.write(bb.capture())).thenReturn(3) @TO@ ExpressionStatement@@MethodInvocation:when(fileChannel.write(bb.capture())).thenReturn(3) @AT@ 9863 @LENGTH@ 51
---------INS MethodInvocation@@MethodName:when:[fileChannel.write(bb.capture())] @TO@ MethodInvocation@@when(fileChannel.write(bb.capture())).thenReturn(3) @AT@ 9863 @LENGTH@ 37
------------INS MethodInvocation@@fileChannel.write(bb.capture()) @TO@ MethodInvocation@@MethodName:when:[fileChannel.write(bb.capture())] @AT@ 9868 @LENGTH@ 31
---------------INS SimpleName@@Name:fileChannel @TO@ MethodInvocation@@fileChannel.write(bb.capture()) @AT@ 9868 @LENGTH@ 11
---------------INS SimpleName@@MethodName:write:[bb.capture()] @TO@ MethodInvocation@@fileChannel.write(bb.capture()) @AT@ 9880 @LENGTH@ 19
------------------INS MethodInvocation@@bb.capture() @TO@ SimpleName@@MethodName:write:[bb.capture()] @AT@ 9886 @LENGTH@ 12
---------------------INS SimpleName@@Name:bb @TO@ MethodInvocation@@bb.capture() @AT@ 9886 @LENGTH@ 2
---------------------INS SimpleName@@MethodName:capture:[] @TO@ MethodInvocation@@bb.capture() @AT@ 9889 @LENGTH@ 9
---------INS SimpleName@@MethodName:thenReturn:[3] @TO@ MethodInvocation@@when(fileChannel.write(bb.capture())).thenReturn(3) @AT@ 9901 @LENGTH@ 13
------------INS NumberLiteral@@3 @TO@ SimpleName@@MethodName:thenReturn:[3] @AT@ 9912 @LENGTH@ 1
---INS ExpressionStatement@@MethodInvocation:new TransactionTemplate(transactionManager).execute((TransactionCallback<Void>)status -> {
  try {
    writer.write("hamburger",4,3);
  }
 catch (  IOException e) {
    throw new IllegalStateException("Unexpected IOException",e);
  }
  return null;
}
) @TO@ MethodDeclaration@@public, void, MethodName:testWriteInTransactionWithOffset, IOException,  @AT@ 9919 @LENGTH@ 260
------INS MethodInvocation@@new TransactionTemplate(transactionManager).execute((TransactionCallback<Void>)status -> {
  try {
    writer.write("hamburger",4,3);
  }
 catch (  IOException e) {
    throw new IllegalStateException("Unexpected IOException",e);
  }
  return null;
}
) @TO@ ExpressionStatement@@MethodInvocation:new TransactionTemplate(transactionManager).execute((TransactionCallback<Void>)status -> {
  try {
    writer.write("hamburger",4,3);
  }
 catch (  IOException e) {
    throw new IllegalStateException("Unexpected IOException",e);
  }
  return null;
}
) @AT@ 9919 @LENGTH@ 259
---------INS ClassInstanceCreation@@TransactionTemplate[transactionManager] @TO@ MethodInvocation@@new TransactionTemplate(transactionManager).execute((TransactionCallback<Void>)status -> {
  try {
    writer.write("hamburger",4,3);
  }
 catch (  IOException e) {
    throw new IllegalStateException("Unexpected IOException",e);
  }
  return null;
}
) @AT@ 9919 @LENGTH@ 43
------------INS New@@new @TO@ ClassInstanceCreation@@TransactionTemplate[transactionManager] @AT@ 9919 @LENGTH@ 3
------------INS SimpleType@@TransactionTemplate @TO@ ClassInstanceCreation@@TransactionTemplate[transactionManager] @AT@ 9923 @LENGTH@ 19
------------INS SimpleName@@transactionManager @TO@ ClassInstanceCreation@@TransactionTemplate[transactionManager] @AT@ 9943 @LENGTH@ 18
---------INS SimpleName@@MethodName:execute:[(TransactionCallback<Void>)status -> {
  try {
    writer.write("hamburger",4,3);
  }
 catch (  IOException e) {
    throw new IllegalStateException("Unexpected IOException",e);
  }
  return null;
}
] @TO@ MethodInvocation@@new TransactionTemplate(transactionManager).execute((TransactionCallback<Void>)status -> {
  try {
    writer.write("hamburger",4,3);
  }
 catch (  IOException e) {
    throw new IllegalStateException("Unexpected IOException",e);
  }
  return null;
}
) @AT@ 9963 @LENGTH@ 215
------------INS CastExpression@@(TransactionCallback<Void>)status -> {
  try {
    writer.write("hamburger",4,3);
  }
 catch (  IOException e) {
    throw new IllegalStateException("Unexpected IOException",e);
  }
  return null;
}
 @TO@ SimpleName@@MethodName:execute:[(TransactionCallback<Void>)status -> {
  try {
    writer.write("hamburger",4,3);
  }
 catch (  IOException e) {
    throw new IllegalStateException("Unexpected IOException",e);
  }
  return null;
}
] @AT@ 9971 @LENGTH@ 206
---------------INS ParameterizedType@@TransactionCallback<Void> @TO@ CastExpression@@(TransactionCallback<Void>)status -> {
  try {
    writer.write("hamburger",4,3);
  }
 catch (  IOException e) {
    throw new IllegalStateException("Unexpected IOException",e);
  }
  return null;
}
 @AT@ 9972 @LENGTH@ 25
------------------INS SimpleType@@TransactionCallback @TO@ ParameterizedType@@TransactionCallback<Void> @AT@ 9972 @LENGTH@ 19
------------------INS SimpleType@@Void @TO@ ParameterizedType@@TransactionCallback<Void> @AT@ 9992 @LENGTH@ 4
---------------INS LambdaExpression@@status -> {
  try {
    writer.write("hamburger",4,3);
  }
 catch (  IOException e) {
    throw new IllegalStateException("Unexpected IOException",e);
  }
  return null;
}
 @TO@ CastExpression@@(TransactionCallback<Void>)status -> {
  try {
    writer.write("hamburger",4,3);
  }
 catch (  IOException e) {
    throw new IllegalStateException("Unexpected IOException",e);
  }
  return null;
}
 @AT@ 9999 @LENGTH@ 178
------------------INS VariableDeclarationFragment@@status @TO@ LambdaExpression@@status -> {
  try {
    writer.write("hamburger",4,3);
  }
 catch (  IOException e) {
    throw new IllegalStateException("Unexpected IOException",e);
  }
  return null;
}
 @AT@ 9999 @LENGTH@ 6
---------------------INS SimpleName@@status @TO@ VariableDeclarationFragment@@status @AT@ 9999 @LENGTH@ 6
------------------INS TryStatement@@try {  writer.write("hamburger",4,3);} catch (IOException e) {  throw new IllegalStateException("Unexpected IOException",e);} @TO@ LambdaExpression@@status -> {
  try {
    writer.write("hamburger",4,3);
  }
 catch (  IOException e) {
    throw new IllegalStateException("Unexpected IOException",e);
  }
  return null;
}
 @AT@ 10015 @LENGTH@ 142
---------------------INS ExpressionStatement@@MethodInvocation:writer.write("hamburger",4,3) @TO@ TryStatement@@try {  writer.write("hamburger",4,3);} catch (IOException e) {  throw new IllegalStateException("Unexpected IOException",e);} @AT@ 10025 @LENGTH@ 32
------------------------INS MethodInvocation@@writer.write("hamburger",4,3) @TO@ ExpressionStatement@@MethodInvocation:writer.write("hamburger",4,3) @AT@ 10025 @LENGTH@ 31
---------------------------INS SimpleName@@Name:writer @TO@ MethodInvocation@@writer.write("hamburger",4,3) @AT@ 10025 @LENGTH@ 6
---------------------------INS SimpleName@@MethodName:write:["hamburger", 4, 3] @TO@ MethodInvocation@@writer.write("hamburger",4,3) @AT@ 10032 @LENGTH@ 24
------------------------------INS StringLiteral@@"hamburger" @TO@ SimpleName@@MethodName:write:["hamburger", 4, 3] @AT@ 10038 @LENGTH@ 11
------------------------------INS NumberLiteral@@4 @TO@ SimpleName@@MethodName:write:["hamburger", 4, 3] @AT@ 10051 @LENGTH@ 1
------------------------------INS NumberLiteral@@3 @TO@ SimpleName@@MethodName:write:["hamburger", 4, 3] @AT@ 10054 @LENGTH@ 1
---------------------INS CatchClause@@catch (IOException e) {  throw new IllegalStateException("Unexpected IOException",e);} @TO@ TryStatement@@try {  writer.write("hamburger",4,3);} catch (IOException e) {  throw new IllegalStateException("Unexpected IOException",e);} @AT@ 10063 @LENGTH@ 94
------------------------INS SingleVariableDeclaration@@IOException e @TO@ CatchClause@@catch (IOException e) {  throw new IllegalStateException("Unexpected IOException",e);} @AT@ 10070 @LENGTH@ 13
---------------------------INS SimpleType@@IOException @TO@ SingleVariableDeclaration@@IOException e @AT@ 10070 @LENGTH@ 11
---------------------------INS SimpleName@@e @TO@ SingleVariableDeclaration@@IOException e @AT@ 10082 @LENGTH@ 1
------------------------INS ThrowStatement@@ClassInstanceCreation:new IllegalStateException("Unexpected IOException",e) @TO@ CatchClause@@catch (IOException e) {  throw new IllegalStateException("Unexpected IOException",e);} @AT@ 10091 @LENGTH@ 61
---------------------------INS ClassInstanceCreation@@IllegalStateException["Unexpected IOException", e] @TO@ ThrowStatement@@ClassInstanceCreation:new IllegalStateException("Unexpected IOException",e) @AT@ 10097 @LENGTH@ 54
------------------------------INS New@@new @TO@ ClassInstanceCreation@@IllegalStateException["Unexpected IOException", e] @AT@ 10097 @LENGTH@ 3
------------------------------INS SimpleType@@IllegalStateException @TO@ ClassInstanceCreation@@IllegalStateException["Unexpected IOException", e] @AT@ 10101 @LENGTH@ 21
------------------------------INS StringLiteral@@"Unexpected IOException" @TO@ ClassInstanceCreation@@IllegalStateException["Unexpected IOException", e] @AT@ 10123 @LENGTH@ 24
------------------------------INS SimpleName@@e @TO@ ClassInstanceCreation@@IllegalStateException["Unexpected IOException", e] @AT@ 10149 @LENGTH@ 1
------------------INS ReturnStatement@@NullLiteral:null @TO@ LambdaExpression@@status -> {
  try {
    writer.write("hamburger",4,3);
  }
 catch (  IOException e) {
    throw new IllegalStateException("Unexpected IOException",e);
  }
  return null;
}
 @AT@ 10161 @LENGTH@ 12
---------------------INS NullLiteral@@null @TO@ ReturnStatement@@NullLiteral:null @AT@ 10168 @LENGTH@ 4
---INS VariableDeclarationStatement@@String s=getStringFromByteBuffer(bb.getValue()); @TO@ MethodDeclaration@@public, void, MethodName:testWriteInTransactionWithOffset, IOException,  @AT@ 10183 @LENGTH@ 50
------INS SimpleType@@String @TO@ VariableDeclarationStatement@@String s=getStringFromByteBuffer(bb.getValue()); @AT@ 10183 @LENGTH@ 6
------INS VariableDeclarationFragment@@s=getStringFromByteBuffer(bb.getValue()) @TO@ VariableDeclarationStatement@@String s=getStringFromByteBuffer(bb.getValue()); @AT@ 10190 @LENGTH@ 42
---------INS SimpleName@@s @TO@ VariableDeclarationFragment@@s=getStringFromByteBuffer(bb.getValue()) @AT@ 10190 @LENGTH@ 1
---------INS MethodInvocation@@getStringFromByteBuffer(bb.getValue()) @TO@ VariableDeclarationFragment@@s=getStringFromByteBuffer(bb.getValue()) @AT@ 10194 @LENGTH@ 38
------------INS SimpleName@@MethodName:getStringFromByteBuffer:[bb.getValue()] @TO@ MethodInvocation@@getStringFromByteBuffer(bb.getValue()) @AT@ 10194 @LENGTH@ 38
---------------INS MethodInvocation@@bb.getValue() @TO@ SimpleName@@MethodName:getStringFromByteBuffer:[bb.getValue()] @AT@ 10218 @LENGTH@ 13
------------------INS SimpleName@@Name:bb @TO@ MethodInvocation@@bb.getValue() @AT@ 10218 @LENGTH@ 2
------------------INS SimpleName@@MethodName:getValue:[] @TO@ MethodInvocation@@bb.getValue() @AT@ 10221 @LENGTH@ 10
---INS ExpressionStatement@@MethodInvocation:assertEquals("urg",s) @TO@ MethodDeclaration@@public, void, MethodName:testWriteInTransactionWithOffset, IOException,  @AT@ 10237 @LENGTH@ 23
------INS MethodInvocation@@assertEquals("urg",s) @TO@ ExpressionStatement@@MethodInvocation:assertEquals("urg",s) @AT@ 10237 @LENGTH@ 22
---------INS SimpleName@@MethodName:assertEquals:["urg", s] @TO@ MethodInvocation@@assertEquals("urg",s) @AT@ 10237 @LENGTH@ 22
------------INS StringLiteral@@"urg" @TO@ SimpleName@@MethodName:assertEquals:["urg", s] @AT@ 10250 @LENGTH@ 5
------------INS SimpleName@@s @TO@ SimpleName@@MethodName:assertEquals:["urg", s] @AT@ 10257 @LENGTH@ 1


INS MethodDeclaration@@public, void, MethodName:returnNullWhenSingleResultIsNotPresent,  @TO@ TypeDeclaration@@[@ExtendWith(MockitoExtension.class), @MockitoSettings(strictness=Strictness.LENIENT), public]StringBasedAggregationUnitTests,  @AT@ 6959 @LENGTH@ 212
---INS Modifier@@public @TO@ MethodDeclaration@@public, void, MethodName:returnNullWhenSingleResultIsNotPresent,  @AT@ 6959 @LENGTH@ 6
---INS PrimitiveType@@void @TO@ MethodDeclaration@@public, void, MethodName:returnNullWhenSingleResultIsNotPresent,  @AT@ 6966 @LENGTH@ 4
---INS SimpleName@@MethodName:returnNullWhenSingleResultIsNotPresent @TO@ MethodDeclaration@@public, void, MethodName:returnNullWhenSingleResultIsNotPresent,  @AT@ 6971 @LENGTH@ 38
---INS ExpressionStatement@@MethodInvocation:when(aggregationResults.getMappedResults()).thenReturn(Collections.emptyList()) @TO@ MethodDeclaration@@public, void, MethodName:returnNullWhenSingleResultIsNotPresent,  @AT@ 7017 @LENGTH@ 80
------INS MethodInvocation@@when(aggregationResults.getMappedResults()).thenReturn(Collections.emptyList()) @TO@ ExpressionStatement@@MethodInvocation:when(aggregationResults.getMappedResults()).thenReturn(Collections.emptyList()) @AT@ 7017 @LENGTH@ 79
---------INS MethodInvocation@@MethodName:when:[aggregationResults.getMappedResults()] @TO@ MethodInvocation@@when(aggregationResults.getMappedResults()).thenReturn(Collections.emptyList()) @AT@ 7017 @LENGTH@ 43
------------INS MethodInvocation@@aggregationResults.getMappedResults() @TO@ MethodInvocation@@MethodName:when:[aggregationResults.getMappedResults()] @AT@ 7022 @LENGTH@ 37
---------------INS SimpleName@@Name:aggregationResults @TO@ MethodInvocation@@aggregationResults.getMappedResults() @AT@ 7022 @LENGTH@ 18
---------------INS SimpleName@@MethodName:getMappedResults:[] @TO@ MethodInvocation@@aggregationResults.getMappedResults() @AT@ 7041 @LENGTH@ 18
---------INS SimpleName@@MethodName:thenReturn:[Collections.emptyList()] @TO@ MethodInvocation@@when(aggregationResults.getMappedResults()).thenReturn(Collections.emptyList()) @AT@ 7061 @LENGTH@ 35
------------INS MethodInvocation@@Collections.emptyList() @TO@ SimpleName@@MethodName:thenReturn:[Collections.emptyList()] @AT@ 7072 @LENGTH@ 23
---------------INS SimpleName@@Name:Collections @TO@ MethodInvocation@@Collections.emptyList() @AT@ 7072 @LENGTH@ 11
---------------INS SimpleName@@MethodName:emptyList:[] @TO@ MethodInvocation@@Collections.emptyList() @AT@ 7084 @LENGTH@ 11
---INS ExpressionStatement@@MethodInvocation:assertThat(executeAggregation("simpleReturnType").result).isNull() @TO@ MethodDeclaration@@public, void, MethodName:returnNullWhenSingleResultIsNotPresent,  @AT@ 7101 @LENGTH@ 67
------INS MethodInvocation@@assertThat(executeAggregation("simpleReturnType").result).isNull() @TO@ ExpressionStatement@@MethodInvocation:assertThat(executeAggregation("simpleReturnType").result).isNull() @AT@ 7101 @LENGTH@ 66
---------INS MethodInvocation@@MethodName:assertThat:[executeAggregation("simpleReturnType").result] @TO@ MethodInvocation@@assertThat(executeAggregation("simpleReturnType").result).isNull() @AT@ 7101 @LENGTH@ 57
------------INS FieldAccess@@executeAggregation("simpleReturnType").result @TO@ MethodInvocation@@MethodName:assertThat:[executeAggregation("simpleReturnType").result] @AT@ 7112 @LENGTH@ 45
---------------INS MethodInvocation@@executeAggregation("simpleReturnType") @TO@ FieldAccess@@executeAggregation("simpleReturnType").result @AT@ 7112 @LENGTH@ 38
------------------INS SimpleName@@MethodName:executeAggregation:["simpleReturnType"] @TO@ MethodInvocation@@executeAggregation("simpleReturnType") @AT@ 7112 @LENGTH@ 38
---------------------INS StringLiteral@@"simpleReturnType" @TO@ SimpleName@@MethodName:executeAggregation:["simpleReturnType"] @AT@ 7131 @LENGTH@ 18
---------------INS SimpleName@@result @TO@ FieldAccess@@executeAggregation("simpleReturnType").result @AT@ 7151 @LENGTH@ 6
---------INS SimpleName@@MethodName:isNull:[] @TO@ MethodInvocation@@assertThat(executeAggregation("simpleReturnType").result).isNull() @AT@ 7159 @LENGTH@ 8


DEL ExpressionStatement@@MethodInvocation:setSystemProperty(propertyUpdater,"jboss.server.log.dir",resolvePath(serverBaseDir,"log"),propertyNames) @AT@ 9020 @LENGTH@ 109
---DEL MethodInvocation@@setSystemProperty(propertyUpdater,"jboss.server.log.dir",resolvePath(serverBaseDir,"log"),propertyNames) @AT@ 9020 @LENGTH@ 108
------DEL SimpleName@@MethodName:setSystemProperty:[propertyUpdater, "jboss.server.log.dir", resolvePath(serverBaseDir,"log"), propertyNames] @AT@ 9020 @LENGTH@ 108
---------DEL SimpleName@@propertyUpdater @AT@ 9038 @LENGTH@ 15
---------DEL StringLiteral@@"jboss.server.log.dir" @AT@ 9055 @LENGTH@ 22
---------DEL MethodInvocation@@resolvePath(serverBaseDir,"log") @AT@ 9079 @LENGTH@ 33
------------DEL SimpleName@@MethodName:resolvePath:[serverBaseDir, "log"] @AT@ 9079 @LENGTH@ 33
---------------DEL SimpleName@@serverBaseDir @AT@ 9091 @LENGTH@ 13
---------------DEL StringLiteral@@"log" @AT@ 9106 @LENGTH@ 5
---------DEL SimpleName@@propertyNames @AT@ 9114 @LENGTH@ 13


INS MethodDeclaration@@public, boolean, MethodName:hasMessageId,  @TO@ TypeDeclaration@@[public, final]DefaultAttachmentMessage, [AttachmentMessage] @AT@ 1940 @LENGTH@ 71
---INS Modifier@@public @TO@ MethodDeclaration@@public, boolean, MethodName:hasMessageId,  @AT@ 1940 @LENGTH@ 6
---INS PrimitiveType@@boolean @TO@ MethodDeclaration@@public, boolean, MethodName:hasMessageId,  @AT@ 1947 @LENGTH@ 7
---INS SimpleName@@MethodName:hasMessageId @TO@ MethodDeclaration@@public, boolean, MethodName:hasMessageId,  @AT@ 1955 @LENGTH@ 12
---INS ReturnStatement@@InfixExpression:messageId != null @TO@ MethodDeclaration@@public, boolean, MethodName:hasMessageId,  @AT@ 1980 @LENGTH@ 25
------INS InfixExpression@@messageId != null @TO@ ReturnStatement@@InfixExpression:messageId != null @AT@ 1987 @LENGTH@ 17
---------INS SimpleName@@messageId @TO@ InfixExpression@@messageId != null @AT@ 1987 @LENGTH@ 9
---------INS Operator@@!= @TO@ InfixExpression@@messageId != null @AT@ 1996 @LENGTH@ 2
---------INS NullLiteral@@null @TO@ InfixExpression@@messageId != null @AT@ 2000 @LENGTH@ 4


UPD VariableDeclarationStatement@@Message message=new Message(new byte[0],null); @TO@ Message message=new Message(new byte[0]); @AT@ 1880 @LENGTH@ 49
---UPD VariableDeclarationFragment@@message=new Message(new byte[0],null) @TO@ message=new Message(new byte[0]) @AT@ 1888 @LENGTH@ 40
------UPD ClassInstanceCreation@@Message[new byte[0], null] @TO@ Message[new byte[0]] @AT@ 1898 @LENGTH@ 30
---------DEL NullLiteral@@null @AT@ 1923 @LENGTH@ 4


DEL ExpressionStatement@@MethodInvocation:assertThat(properties).containsEntry("version",Values.value(123L)) @AT@ 5637 @LENGTH@ 68
---DEL MethodInvocation@@assertThat(properties).containsEntry("version",Values.value(123L)) @AT@ 5637 @LENGTH@ 67
------DEL MethodInvocation@@MethodName:assertThat:[properties] @AT@ 5637 @LENGTH@ 22
---------DEL SimpleName@@properties @AT@ 5648 @LENGTH@ 10
------DEL SimpleName@@MethodName:containsEntry:["version", Values.value(123L)] @AT@ 5660 @LENGTH@ 44
---------DEL StringLiteral@@"version" @AT@ 5674 @LENGTH@ 9
---------DEL MethodInvocation@@Values.value(123L) @AT@ 5685 @LENGTH@ 18
------------DEL SimpleName@@Name:Values @AT@ 5685 @LENGTH@ 6
------------DEL SimpleName@@MethodName:value:[123L] @AT@ 5692 @LENGTH@ 11
---------------DEL NumberLiteral@@123L @AT@ 5698 @LENGTH@ 4


UPD ExpressionStatement@@MethodInvocation:log.info("#{} size {}",i,size) @TO@ MethodInvocation:log.debug("#{} size {}",i,size) @AT@ 2090 @LENGTH@ 33
---UPD MethodInvocation@@log.info("#{} size {}",i,size) @TO@ log.debug("#{} size {}",i,size) @AT@ 2090 @LENGTH@ 32
------UPD SimpleName@@MethodName:info:["#{} size {}", i, size] @TO@ MethodName:debug:["#{} size {}", i, size] @AT@ 2094 @LENGTH@ 28


INS MethodDeclaration@@public, void, MethodName:doesNotConsiderPropertyExportedIfTargetTypeIsNotMapped,  @TO@ TypeDeclaration@@[@RunWith(MockitoJUnitRunner.class), public]PersistentPropertyResourceMappingUnitTests,  @AT@ 3799 @LENGTH@ 514
---INS Modifier@@public @TO@ MethodDeclaration@@public, void, MethodName:doesNotConsiderPropertyExportedIfTargetTypeIsNotMapped,  @AT@ 3799 @LENGTH@ 6
---INS PrimitiveType@@void @TO@ MethodDeclaration@@public, void, MethodName:doesNotConsiderPropertyExportedIfTargetTypeIsNotMapped,  @AT@ 3806 @LENGTH@ 4
---INS SimpleName@@MethodName:doesNotConsiderPropertyExportedIfTargetTypeIsNotMapped @TO@ MethodDeclaration@@public, void, MethodName:doesNotConsiderPropertyExportedIfTargetTypeIsNotMapped,  @AT@ 3811 @LENGTH@ 54
---INS VariableDeclarationStatement@@PersistentEntity<?,?> entity=mappingContext.getRequiredPersistentEntity(Entity.class); @TO@ MethodDeclaration@@public, void, MethodName:doesNotConsiderPropertyExportedIfTargetTypeIsNotMapped,  @AT@ 3873 @LENGTH@ 89
------INS ParameterizedType@@PersistentEntity<?,?> @TO@ VariableDeclarationStatement@@PersistentEntity<?,?> entity=mappingContext.getRequiredPersistentEntity(Entity.class); @AT@ 3873 @LENGTH@ 22
---------INS SimpleType@@PersistentEntity @TO@ ParameterizedType@@PersistentEntity<?,?> @AT@ 3873 @LENGTH@ 16
---------INS WildcardType@@? @TO@ ParameterizedType@@PersistentEntity<?,?> @AT@ 3890 @LENGTH@ 1
---------INS WildcardType@@? @TO@ ParameterizedType@@PersistentEntity<?,?> @AT@ 3893 @LENGTH@ 1
------INS VariableDeclarationFragment@@entity=mappingContext.getRequiredPersistentEntity(Entity.class) @TO@ VariableDeclarationStatement@@PersistentEntity<?,?> entity=mappingContext.getRequiredPersistentEntity(Entity.class); @AT@ 3896 @LENGTH@ 65
---------INS SimpleName@@entity @TO@ VariableDeclarationFragment@@entity=mappingContext.getRequiredPersistentEntity(Entity.class) @AT@ 3896 @LENGTH@ 6
---------INS MethodInvocation@@mappingContext.getRequiredPersistentEntity(Entity.class) @TO@ VariableDeclarationFragment@@entity=mappingContext.getRequiredPersistentEntity(Entity.class) @AT@ 3905 @LENGTH@ 56
------------INS SimpleName@@Name:mappingContext @TO@ MethodInvocation@@mappingContext.getRequiredPersistentEntity(Entity.class) @AT@ 3905 @LENGTH@ 14
------------INS SimpleName@@MethodName:getRequiredPersistentEntity:[Entity.class] @TO@ MethodInvocation@@mappingContext.getRequiredPersistentEntity(Entity.class) @AT@ 3920 @LENGTH@ 41
---------------INS TypeLiteral@@Entity.class @TO@ SimpleName@@MethodName:getRequiredPersistentEntity:[Entity.class] @AT@ 3948 @LENGTH@ 12
---INS VariableDeclarationStatement@@PersistentProperty<?> property=entity.getRequiredPersistentProperty("third"); @TO@ MethodDeclaration@@public, void, MethodName:doesNotConsiderPropertyExportedIfTargetTypeIsNotMapped,  @AT@ 3965 @LENGTH@ 79
------INS ParameterizedType@@PersistentProperty<?> @TO@ VariableDeclarationStatement@@PersistentProperty<?> property=entity.getRequiredPersistentProperty("third"); @AT@ 3965 @LENGTH@ 21
---------INS SimpleType@@PersistentProperty @TO@ ParameterizedType@@PersistentProperty<?> @AT@ 3965 @LENGTH@ 18
---------INS WildcardType@@? @TO@ ParameterizedType@@PersistentProperty<?> @AT@ 3984 @LENGTH@ 1
------INS VariableDeclarationFragment@@property=entity.getRequiredPersistentProperty("third") @TO@ VariableDeclarationStatement@@PersistentProperty<?> property=entity.getRequiredPersistentProperty("third"); @AT@ 3987 @LENGTH@ 56
---------INS SimpleName@@property @TO@ VariableDeclarationFragment@@property=entity.getRequiredPersistentProperty("third") @AT@ 3987 @LENGTH@ 8
---------INS MethodInvocation@@entity.getRequiredPersistentProperty("third") @TO@ VariableDeclarationFragment@@property=entity.getRequiredPersistentProperty("third") @AT@ 3998 @LENGTH@ 45
------------INS SimpleName@@Name:entity @TO@ MethodInvocation@@entity.getRequiredPersistentProperty("third") @AT@ 3998 @LENGTH@ 6
------------INS SimpleName@@MethodName:getRequiredPersistentProperty:["third"] @TO@ MethodInvocation@@entity.getRequiredPersistentProperty("third") @AT@ 4005 @LENGTH@ 38
---------------INS StringLiteral@@"third" @TO@ SimpleName@@MethodName:getRequiredPersistentProperty:["third"] @AT@ 4035 @LENGTH@ 7
---INS VariableDeclarationStatement@@ResourceMappings mappings=mock(ResourceMappings.class); @TO@ MethodDeclaration@@public, void, MethodName:doesNotConsiderPropertyExportedIfTargetTypeIsNotMapped,  @AT@ 4048 @LENGTH@ 57
------INS SimpleType@@ResourceMappings @TO@ VariableDeclarationStatement@@ResourceMappings mappings=mock(ResourceMappings.class); @AT@ 4048 @LENGTH@ 16
------INS VariableDeclarationFragment@@mappings=mock(ResourceMappings.class) @TO@ VariableDeclarationStatement@@ResourceMappings mappings=mock(ResourceMappings.class); @AT@ 4065 @LENGTH@ 39
---------INS SimpleName@@mappings @TO@ VariableDeclarationFragment@@mappings=mock(ResourceMappings.class) @AT@ 4065 @LENGTH@ 8
---------INS MethodInvocation@@mock(ResourceMappings.class) @TO@ VariableDeclarationFragment@@mappings=mock(ResourceMappings.class) @AT@ 4076 @LENGTH@ 28
------------INS SimpleName@@MethodName:mock:[ResourceMappings.class] @TO@ MethodInvocation@@mock(ResourceMappings.class) @AT@ 4076 @LENGTH@ 28
---------------INS TypeLiteral@@ResourceMappings.class @TO@ SimpleName@@MethodName:mock:[ResourceMappings.class] @AT@ 4081 @LENGTH@ 22
---INS ExpressionStatement@@MethodInvocation:when(mappings.getMetadataFor(property.getType())).thenReturn(null) @TO@ MethodDeclaration@@public, void, MethodName:doesNotConsiderPropertyExportedIfTargetTypeIsNotMapped,  @AT@ 4108 @LENGTH@ 67
------INS MethodInvocation@@when(mappings.getMetadataFor(property.getType())).thenReturn(null) @TO@ ExpressionStatement@@MethodInvocation:when(mappings.getMetadataFor(property.getType())).thenReturn(null) @AT@ 4108 @LENGTH@ 66
---------INS MethodInvocation@@MethodName:when:[mappings.getMetadataFor(property.getType())] @TO@ MethodInvocation@@when(mappings.getMetadataFor(property.getType())).thenReturn(null) @AT@ 4108 @LENGTH@ 49
------------INS MethodInvocation@@mappings.getMetadataFor(property.getType()) @TO@ MethodInvocation@@MethodName:when:[mappings.getMetadataFor(property.getType())] @AT@ 4113 @LENGTH@ 43
---------------INS SimpleName@@Name:mappings @TO@ MethodInvocation@@mappings.getMetadataFor(property.getType()) @AT@ 4113 @LENGTH@ 8
---------------INS SimpleName@@MethodName:getMetadataFor:[property.getType()] @TO@ MethodInvocation@@mappings.getMetadataFor(property.getType()) @AT@ 4122 @LENGTH@ 34
------------------INS MethodInvocation@@property.getType() @TO@ SimpleName@@MethodName:getMetadataFor:[property.getType()] @AT@ 4137 @LENGTH@ 18
---------------------INS SimpleName@@Name:property @TO@ MethodInvocation@@property.getType() @AT@ 4137 @LENGTH@ 8
---------------------INS SimpleName@@MethodName:getType:[] @TO@ MethodInvocation@@property.getType() @AT@ 4146 @LENGTH@ 9
---------INS SimpleName@@MethodName:thenReturn:[null] @TO@ MethodInvocation@@when(mappings.getMetadataFor(property.getType())).thenReturn(null) @AT@ 4158 @LENGTH@ 16
------------INS NullLiteral@@null @TO@ SimpleName@@MethodName:thenReturn:[null] @AT@ 4169 @LENGTH@ 4
---INS VariableDeclarationStatement@@ResourceMapping mapping=new PersistentPropertyResourceMapping(property,mappings); @TO@ MethodDeclaration@@public, void, MethodName:doesNotConsiderPropertyExportedIfTargetTypeIsNotMapped,  @AT@ 4179 @LENGTH@ 84
------INS SimpleType@@ResourceMapping @TO@ VariableDeclarationStatement@@ResourceMapping mapping=new PersistentPropertyResourceMapping(property,mappings); @AT@ 4179 @LENGTH@ 15
------INS VariableDeclarationFragment@@mapping=new PersistentPropertyResourceMapping(property,mappings) @TO@ VariableDeclarationStatement@@ResourceMapping mapping=new PersistentPropertyResourceMapping(property,mappings); @AT@ 4195 @LENGTH@ 67
---------INS SimpleName@@mapping @TO@ VariableDeclarationFragment@@mapping=new PersistentPropertyResourceMapping(property,mappings) @AT@ 4195 @LENGTH@ 7
---------INS ClassInstanceCreation@@PersistentPropertyResourceMapping[property, mappings] @TO@ VariableDeclarationFragment@@mapping=new PersistentPropertyResourceMapping(property,mappings) @AT@ 4205 @LENGTH@ 57
------------INS New@@new @TO@ ClassInstanceCreation@@PersistentPropertyResourceMapping[property, mappings] @AT@ 4205 @LENGTH@ 3
------------INS SimpleType@@PersistentPropertyResourceMapping @TO@ ClassInstanceCreation@@PersistentPropertyResourceMapping[property, mappings] @AT@ 4209 @LENGTH@ 33
------------INS SimpleName@@property @TO@ ClassInstanceCreation@@PersistentPropertyResourceMapping[property, mappings] @AT@ 4243 @LENGTH@ 8
------------INS SimpleName@@mappings @TO@ ClassInstanceCreation@@PersistentPropertyResourceMapping[property, mappings] @AT@ 4253 @LENGTH@ 8
---INS ExpressionStatement@@MethodInvocation:assertThat(mapping.isExported()).isFalse() @TO@ MethodDeclaration@@public, void, MethodName:doesNotConsiderPropertyExportedIfTargetTypeIsNotMapped,  @AT@ 4267 @LENGTH@ 43
------INS MethodInvocation@@assertThat(mapping.isExported()).isFalse() @TO@ ExpressionStatement@@MethodInvocation:assertThat(mapping.isExported()).isFalse() @AT@ 4267 @LENGTH@ 42
---------INS MethodInvocation@@MethodName:assertThat:[mapping.isExported()] @TO@ MethodInvocation@@assertThat(mapping.isExported()).isFalse() @AT@ 4267 @LENGTH@ 32
------------INS MethodInvocation@@mapping.isExported() @TO@ MethodInvocation@@MethodName:assertThat:[mapping.isExported()] @AT@ 4278 @LENGTH@ 20
---------------INS SimpleName@@Name:mapping @TO@ MethodInvocation@@mapping.isExported() @AT@ 4278 @LENGTH@ 7
---------------INS SimpleName@@MethodName:isExported:[] @TO@ MethodInvocation@@mapping.isExported() @AT@ 4286 @LENGTH@ 12
---------INS SimpleName@@MethodName:isFalse:[] @TO@ MethodInvocation@@assertThat(mapping.isExported()).isFalse() @AT@ 4300 @LENGTH@ 9


DEL MethodDeclaration@@default, T, T extends CamelContext, MethodName:getCamelContext, Class<T> type,  @AT@ 1909 @LENGTH@ 196
---DEL Modifier@@default @AT@ 1909 @LENGTH@ 7
---DEL SimpleType@@T @AT@ 1942 @LENGTH@ 1
---DEL SimpleName@@MethodName:getCamelContext @AT@ 1944 @LENGTH@ 15
---DEL SingleVariableDeclaration@@Class<T> type @AT@ 1960 @LENGTH@ 13
------DEL ParameterizedType@@Class<T> @AT@ 1960 @LENGTH@ 8
---------DEL SimpleType@@Class @AT@ 1960 @LENGTH@ 5
---------DEL SimpleType@@T @AT@ 1966 @LENGTH@ 1
------DEL SimpleName@@type @AT@ 1969 @LENGTH@ 4
---DEL IfStatement@@if (getCamelContext() == null) {  return null;} @AT@ 1985 @LENGTH@ 67
------DEL InfixExpression@@getCamelContext() == null @AT@ 1989 @LENGTH@ 25
---------DEL MethodInvocation@@MethodName:getCamelContext:[] @AT@ 1989 @LENGTH@ 17
---------DEL Operator@@== @AT@ 2006 @LENGTH@ 2
---------DEL NullLiteral@@null @AT@ 2010 @LENGTH@ 4
------DEL Block@@ThenBody:{  return null;} @AT@ 2016 @LENGTH@ 36
---------DEL ReturnStatement@@NullLiteral:null @AT@ 2030 @LENGTH@ 12
------------DEL NullLiteral@@null @AT@ 2037 @LENGTH@ 4
---DEL ReturnStatement@@MethodInvocation:getCamelContext().adapt(type) @AT@ 2062 @LENGTH@ 37
------DEL MethodInvocation@@getCamelContext().adapt(type) @AT@ 2069 @LENGTH@ 29
---------DEL MethodInvocation@@MethodName:getCamelContext:[] @AT@ 2069 @LENGTH@ 17
---------DEL SimpleName@@MethodName:adapt:[type] @AT@ 2087 @LENGTH@ 11
------------DEL SimpleName@@type @AT@ 2093 @LENGTH@ 4


MOV FieldDeclaration@@private, int, [total=100] @TO@ TypeDeclaration@@[public]TransactedStackSizeTest, TransactionClientDataSourceSupport @AT@ 1059 @LENGTH@ 24


UPD IfStatement@@if (ase.awsErrorDetails().errorCode().equalsIgnoreCase("404")) {  throw ase;} @TO@ if (!(ase.awsErrorDetails().sdkHttpResponse().statusCode() == 404)) {  throw ase;} @AT@ 3585 @LENGTH@ 113
---INS PrefixExpression@@!(ase.awsErrorDetails().sdkHttpResponse().statusCode() == 404) @TO@ IfStatement@@if (ase.awsErrorDetails().errorCode().equalsIgnoreCase("404")) {  throw ase;} @AT@ 3589 @LENGTH@ 62
------INS Operator@@! @TO@ PrefixExpression@@!(ase.awsErrorDetails().sdkHttpResponse().statusCode() == 404) @AT@ 3589 @LENGTH@ 1
------INS ParenthesizedExpression@@(ase.awsErrorDetails().sdkHttpResponse().statusCode() == 404) @TO@ PrefixExpression@@!(ase.awsErrorDetails().sdkHttpResponse().statusCode() == 404) @AT@ 3590 @LENGTH@ 61
---------INS InfixExpression@@ase.awsErrorDetails().sdkHttpResponse().statusCode() == 404 @TO@ ParenthesizedExpression@@(ase.awsErrorDetails().sdkHttpResponse().statusCode() == 404) @AT@ 3591 @LENGTH@ 59
------------INS MethodInvocation@@ase.awsErrorDetails().sdkHttpResponse().statusCode() @TO@ InfixExpression@@ase.awsErrorDetails().sdkHttpResponse().statusCode() == 404 @AT@ 3591 @LENGTH@ 52
---------------MOV MethodInvocation@@MethodName:errorCode:[] @TO@ MethodInvocation@@ase.awsErrorDetails().sdkHttpResponse().statusCode() @AT@ 3589 @LENGTH@ 33
---------------MOV MethodInvocation@@MethodName:awsErrorDetails:[] @TO@ MethodInvocation@@ase.awsErrorDetails().sdkHttpResponse().statusCode() @AT@ 3589 @LENGTH@ 21
---------------MOV SimpleName@@Name:ase @TO@ MethodInvocation@@ase.awsErrorDetails().sdkHttpResponse().statusCode() @AT@ 3589 @LENGTH@ 3
---------------MOV SimpleName@@MethodName:equalsIgnoreCase:["404"] @TO@ MethodInvocation@@ase.awsErrorDetails().sdkHttpResponse().statusCode() @AT@ 3623 @LENGTH@ 23
------------INS Operator@@== @TO@ InfixExpression@@ase.awsErrorDetails().sdkHttpResponse().statusCode() == 404 @AT@ 3643 @LENGTH@ 2
------------INS NumberLiteral@@404 @TO@ InfixExpression@@ase.awsErrorDetails().sdkHttpResponse().statusCode() == 404 @AT@ 3647 @LENGTH@ 3
---DEL MethodInvocation@@ase.awsErrorDetails().errorCode().equalsIgnoreCase("404") @AT@ 3589 @LENGTH@ 57


UPD FieldDeclaration@@private, Iterator<? extends E>, [nextIterator=null] @TO@ private, Iterator<? extends E>, [nextIterator] @AT@ 1682 @LENGTH@ 50
---UPD VariableDeclarationFragment@@nextIterator=null @TO@ nextIterator @AT@ 1712 @LENGTH@ 19
------DEL NullLiteral@@null @AT@ 1727 @LENGTH@ 4


INS MethodDeclaration@@void, MethodName:shouldNotFailWithEmptyOrNullRelationshipProperties,  @TO@ TypeDeclaration@@[@Neo4jIntegrationTest]ReactivePropertyIT,  @AT@ 9155 @LENGTH@ 554
---INS PrimitiveType@@void @TO@ MethodDeclaration@@void, MethodName:shouldNotFailWithEmptyOrNullRelationshipProperties,  @AT@ 9150 @LENGTH@ 4
---INS SimpleName@@MethodName:shouldNotFailWithEmptyOrNullRelationshipProperties @TO@ MethodDeclaration@@void, MethodName:shouldNotFailWithEmptyOrNullRelationshipProperties,  @AT@ 9155 @LENGTH@ 50
---INS VariableDeclarationStatement@@List<Long> recorded=new ArrayList<>(); @TO@ MethodDeclaration@@void, MethodName:shouldNotFailWithEmptyOrNullRelationshipProperties,  @AT@ 9213 @LENGTH@ 40
------INS ParameterizedType@@List<Long> @TO@ VariableDeclarationStatement@@List<Long> recorded=new ArrayList<>(); @AT@ 9213 @LENGTH@ 10
---------INS SimpleType@@List @TO@ ParameterizedType@@List<Long> @AT@ 9213 @LENGTH@ 4
---------INS SimpleType@@Long @TO@ ParameterizedType@@List<Long> @AT@ 9218 @LENGTH@ 4
------INS VariableDeclarationFragment@@recorded=new ArrayList<>() @TO@ VariableDeclarationStatement@@List<Long> recorded=new ArrayList<>(); @AT@ 9224 @LENGTH@ 28
---------INS SimpleName@@recorded @TO@ VariableDeclarationFragment@@recorded=new ArrayList<>() @AT@ 9224 @LENGTH@ 8
---------INS ClassInstanceCreation@@ArrayList<>[] @TO@ VariableDeclarationFragment@@recorded=new ArrayList<>() @AT@ 9235 @LENGTH@ 17
------------INS New@@new @TO@ ClassInstanceCreation@@ArrayList<>[] @AT@ 9235 @LENGTH@ 3
------------INS ParameterizedType@@ArrayList<> @TO@ ClassInstanceCreation@@ArrayList<>[] @AT@ 9239 @LENGTH@ 11
---------------INS SimpleType@@ArrayList @TO@ ParameterizedType@@ArrayList<> @AT@ 9239 @LENGTH@ 9
---INS ExpressionStatement@@MethodInvocation:template.save(new DomainClasses.LonelySourceContainer()).map(DomainClasses.LonelySourceContainer::getId).as(StepVerifier::create).recordWith(() -> recorded).expectNextCount(1L).verifyComplete() @TO@ MethodDeclaration@@void, MethodName:shouldNotFailWithEmptyOrNullRelationshipProperties,  @AT@ 9256 @LENGTH@ 219
------INS MethodInvocation@@template.save(new DomainClasses.LonelySourceContainer()).map(DomainClasses.LonelySourceContainer::getId).as(StepVerifier::create).recordWith(() -> recorded).expectNextCount(1L).verifyComplete() @TO@ ExpressionStatement@@MethodInvocation:template.save(new DomainClasses.LonelySourceContainer()).map(DomainClasses.LonelySourceContainer::getId).as(StepVerifier::create).recordWith(() -> recorded).expectNextCount(1L).verifyComplete() @AT@ 9256 @LENGTH@ 218
---------INS MethodInvocation@@MethodName:expectNextCount:[1L] @TO@ MethodInvocation@@template.save(new DomainClasses.LonelySourceContainer()).map(DomainClasses.LonelySourceContainer::getId).as(StepVerifier::create).recordWith(() -> recorded).expectNextCount(1L).verifyComplete() @AT@ 9256 @LENGTH@ 196
------------INS NumberLiteral@@1L @TO@ MethodInvocation@@MethodName:expectNextCount:[1L] @AT@ 9449 @LENGTH@ 2
---------INS MethodInvocation@@MethodName:recordWith:[() -> recorded] @TO@ MethodInvocation@@template.save(new DomainClasses.LonelySourceContainer()).map(DomainClasses.LonelySourceContainer::getId).as(StepVerifier::create).recordWith(() -> recorded).expectNextCount(1L).verifyComplete() @AT@ 9256 @LENGTH@ 171
------------INS LambdaExpression@@() -> recorded @TO@ MethodInvocation@@MethodName:recordWith:[() -> recorded] @AT@ 9412 @LENGTH@ 14
---------------INS SimpleName@@recorded @TO@ LambdaExpression@@() -> recorded @AT@ 9418 @LENGTH@ 8
---------INS MethodInvocation@@MethodName:as:[StepVerifier::create] @TO@ MethodInvocation@@template.save(new DomainClasses.LonelySourceContainer()).map(DomainClasses.LonelySourceContainer::getId).as(StepVerifier::create).recordWith(() -> recorded).expectNextCount(1L).verifyComplete() @AT@ 9256 @LENGTH@ 139
---------INS MethodInvocation@@MethodName:map:[DomainClasses.LonelySourceContainer::getId] @TO@ MethodInvocation@@template.save(new DomainClasses.LonelySourceContainer()).map(DomainClasses.LonelySourceContainer::getId).as(StepVerifier::create).recordWith(() -> recorded).expectNextCount(1L).verifyComplete() @AT@ 9256 @LENGTH@ 109
---------INS MethodInvocation@@MethodName:save:[new DomainClasses.LonelySourceContainer()] @TO@ MethodInvocation@@template.save(new DomainClasses.LonelySourceContainer()).map(DomainClasses.LonelySourceContainer::getId).as(StepVerifier::create).recordWith(() -> recorded).expectNextCount(1L).verifyComplete() @AT@ 9256 @LENGTH@ 56
------------INS ClassInstanceCreation@@DomainClasses.LonelySourceContainer[] @TO@ MethodInvocation@@MethodName:save:[new DomainClasses.LonelySourceContainer()] @AT@ 9270 @LENGTH@ 41
---------------INS New@@new @TO@ ClassInstanceCreation@@DomainClasses.LonelySourceContainer[] @AT@ 9270 @LENGTH@ 3
---------------INS SimpleType@@DomainClasses.LonelySourceContainer @TO@ ClassInstanceCreation@@DomainClasses.LonelySourceContainer[] @AT@ 9274 @LENGTH@ 35
---------INS SimpleName@@Name:template @TO@ MethodInvocation@@template.save(new DomainClasses.LonelySourceContainer()).map(DomainClasses.LonelySourceContainer::getId).as(StepVerifier::create).recordWith(() -> recorded).expectNextCount(1L).verifyComplete() @AT@ 9256 @LENGTH@ 8
---------INS SimpleName@@MethodName:verifyComplete:[] @TO@ MethodInvocation@@template.save(new DomainClasses.LonelySourceContainer()).map(DomainClasses.LonelySourceContainer::getId).as(StepVerifier::create).recordWith(() -> recorded).expectNextCount(1L).verifyComplete() @AT@ 9458 @LENGTH@ 16
---INS TryStatement@@try (Session session=driver.session()){  long cnt=session.run("MATCH (m) WHERE id(m) = $id RETURN count(m)",Collections.singletonMap("id",recorded.get(0))).single().get(0).asLong();  assertThat(cnt).isEqualTo(1L);}  @TO@ MethodDeclaration@@void, MethodName:shouldNotFailWithEmptyOrNullRelationshipProperties,  @AT@ 9478 @LENGTH@ 228
------INS VariableDeclarationExpression@@Session session=driver.session() @TO@ TryStatement@@try (Session session=driver.session()){  long cnt=session.run("MATCH (m) WHERE id(m) = $id RETURN count(m)",Collections.singletonMap("id",recorded.get(0))).single().get(0).asLong();  assertThat(cnt).isEqualTo(1L);}  @AT@ 9483 @LENGTH@ 34
---------INS SimpleType@@Session @TO@ VariableDeclarationExpression@@Session session=driver.session() @AT@ 9483 @LENGTH@ 7
---------INS VariableDeclarationFragment@@session=driver.session() @TO@ VariableDeclarationExpression@@Session session=driver.session() @AT@ 9491 @LENGTH@ 26
------------INS SimpleName@@session @TO@ VariableDeclarationFragment@@session=driver.session() @AT@ 9491 @LENGTH@ 7
------------INS MethodInvocation@@driver.session() @TO@ VariableDeclarationFragment@@session=driver.session() @AT@ 9501 @LENGTH@ 16
---------------INS SimpleName@@Name:driver @TO@ MethodInvocation@@driver.session() @AT@ 9501 @LENGTH@ 6
---------------INS SimpleName@@MethodName:session:[] @TO@ MethodInvocation@@driver.session() @AT@ 9508 @LENGTH@ 9
------INS VariableDeclarationStatement@@long cnt=session.run("MATCH (m) WHERE id(m) = $id RETURN count(m)",Collections.singletonMap("id",recorded.get(0))).single().get(0).asLong(); @TO@ TryStatement@@try (Session session=driver.session()){  long cnt=session.run("MATCH (m) WHERE id(m) = $id RETURN count(m)",Collections.singletonMap("id",recorded.get(0))).single().get(0).asLong();  assertThat(cnt).isEqualTo(1L);}  @AT@ 9524 @LENGTH@ 144
---------INS PrimitiveType@@long @TO@ VariableDeclarationStatement@@long cnt=session.run("MATCH (m) WHERE id(m) = $id RETURN count(m)",Collections.singletonMap("id",recorded.get(0))).single().get(0).asLong(); @AT@ 9524 @LENGTH@ 4
---------INS VariableDeclarationFragment@@cnt=session.run("MATCH (m) WHERE id(m) = $id RETURN count(m)",Collections.singletonMap("id",recorded.get(0))).single().get(0).asLong() @TO@ VariableDeclarationStatement@@long cnt=session.run("MATCH (m) WHERE id(m) = $id RETURN count(m)",Collections.singletonMap("id",recorded.get(0))).single().get(0).asLong(); @AT@ 9529 @LENGTH@ 138
------------INS SimpleName@@cnt @TO@ VariableDeclarationFragment@@cnt=session.run("MATCH (m) WHERE id(m) = $id RETURN count(m)",Collections.singletonMap("id",recorded.get(0))).single().get(0).asLong() @AT@ 9529 @LENGTH@ 3
------------INS MethodInvocation@@session.run("MATCH (m) WHERE id(m) = $id RETURN count(m)",Collections.singletonMap("id",recorded.get(0))).single().get(0).asLong() @TO@ VariableDeclarationFragment@@cnt=session.run("MATCH (m) WHERE id(m) = $id RETURN count(m)",Collections.singletonMap("id",recorded.get(0))).single().get(0).asLong() @AT@ 9535 @LENGTH@ 132
---------------INS MethodInvocation@@MethodName:get:[0] @TO@ MethodInvocation@@session.run("MATCH (m) WHERE id(m) = $id RETURN count(m)",Collections.singletonMap("id",recorded.get(0))).single().get(0).asLong() @AT@ 9535 @LENGTH@ 123
------------------INS NumberLiteral@@0 @TO@ MethodInvocation@@MethodName:get:[0] @AT@ 9656 @LENGTH@ 1
---------------INS MethodInvocation@@MethodName:single:[] @TO@ MethodInvocation@@session.run("MATCH (m) WHERE id(m) = $id RETURN count(m)",Collections.singletonMap("id",recorded.get(0))).single().get(0).asLong() @AT@ 9535 @LENGTH@ 116
---------------INS MethodInvocation@@MethodName:run:["MATCH (m) WHERE id(m) = $id RETURN count(m)", Collections.singletonMap("id",recorded.get(0))] @TO@ MethodInvocation@@session.run("MATCH (m) WHERE id(m) = $id RETURN count(m)",Collections.singletonMap("id",recorded.get(0))).single().get(0).asLong() @AT@ 9535 @LENGTH@ 107
------------------INS StringLiteral@@"MATCH (m) WHERE id(m) = $id RETURN count(m)" @TO@ MethodInvocation@@MethodName:run:["MATCH (m) WHERE id(m) = $id RETURN count(m)", Collections.singletonMap("id",recorded.get(0))] @AT@ 9547 @LENGTH@ 45
------------------INS MethodInvocation@@Collections.singletonMap("id",recorded.get(0)) @TO@ MethodInvocation@@MethodName:run:["MATCH (m) WHERE id(m) = $id RETURN count(m)", Collections.singletonMap("id",recorded.get(0))] @AT@ 9594 @LENGTH@ 47
---------------------INS SimpleName@@Name:Collections @TO@ MethodInvocation@@Collections.singletonMap("id",recorded.get(0)) @AT@ 9594 @LENGTH@ 11
---------------------INS SimpleName@@MethodName:singletonMap:["id", recorded.get(0)] @TO@ MethodInvocation@@Collections.singletonMap("id",recorded.get(0)) @AT@ 9606 @LENGTH@ 35
------------------------INS StringLiteral@@"id" @TO@ SimpleName@@MethodName:singletonMap:["id", recorded.get(0)] @AT@ 9619 @LENGTH@ 4
------------------------INS MethodInvocation@@recorded.get(0) @TO@ SimpleName@@MethodName:singletonMap:["id", recorded.get(0)] @AT@ 9625 @LENGTH@ 15
---------------------------INS SimpleName@@Name:recorded @TO@ MethodInvocation@@recorded.get(0) @AT@ 9625 @LENGTH@ 8
---------------------------INS SimpleName@@MethodName:get:[0] @TO@ MethodInvocation@@recorded.get(0) @AT@ 9634 @LENGTH@ 6
------------------------------INS NumberLiteral@@0 @TO@ SimpleName@@MethodName:get:[0] @AT@ 9638 @LENGTH@ 1
---------------INS SimpleName@@Name:session @TO@ MethodInvocation@@session.run("MATCH (m) WHERE id(m) = $id RETURN count(m)",Collections.singletonMap("id",recorded.get(0))).single().get(0).asLong() @AT@ 9535 @LENGTH@ 7
---------------INS SimpleName@@MethodName:asLong:[] @TO@ MethodInvocation@@session.run("MATCH (m) WHERE id(m) = $id RETURN count(m)",Collections.singletonMap("id",recorded.get(0))).single().get(0).asLong() @AT@ 9659 @LENGTH@ 8
------INS ExpressionStatement@@MethodInvocation:assertThat(cnt).isEqualTo(1L) @TO@ TryStatement@@try (Session session=driver.session()){  long cnt=session.run("MATCH (m) WHERE id(m) = $id RETURN count(m)",Collections.singletonMap("id",recorded.get(0))).single().get(0).asLong();  assertThat(cnt).isEqualTo(1L);}  @AT@ 9672 @LENGTH@ 30
---------INS MethodInvocation@@assertThat(cnt).isEqualTo(1L) @TO@ ExpressionStatement@@MethodInvocation:assertThat(cnt).isEqualTo(1L) @AT@ 9672 @LENGTH@ 29
------------INS MethodInvocation@@MethodName:assertThat:[cnt] @TO@ MethodInvocation@@assertThat(cnt).isEqualTo(1L) @AT@ 9672 @LENGTH@ 15
---------------INS SimpleName@@cnt @TO@ MethodInvocation@@MethodName:assertThat:[cnt] @AT@ 9683 @LENGTH@ 3
------------INS SimpleName@@MethodName:isEqualTo:[1L] @TO@ MethodInvocation@@assertThat(cnt).isEqualTo(1L) @AT@ 9688 @LENGTH@ 13
---------------INS NumberLiteral@@1L @TO@ SimpleName@@MethodName:isEqualTo:[1L] @AT@ 9698 @LENGTH@ 2


INS ConstructorInvocation@@this(new ObjectMapper()); @TO@ MethodDeclaration@@public, voidMethodName:JacksonJsonObjectMarshaller,  @AT@ 1249 @LENGTH@ 25
---INS ClassInstanceCreation@@ObjectMapper[] @TO@ ConstructorInvocation@@this(new ObjectMapper()); @AT@ 1254 @LENGTH@ 18
------MOV New@@new @TO@ ClassInstanceCreation@@ObjectMapper[] @AT@ 1264 @LENGTH@ 3
------MOV SimpleType@@ObjectMapper @TO@ ClassInstanceCreation@@ObjectMapper[] @AT@ 1268 @LENGTH@ 12


UPD ExpressionStatement@@MethodInvocation:from("file://target/testDeleteZipFileWhenUnmarshalWithSplitter?delete=true").split(new ZipSplitter()).streaming().convertBodyTo(String.class).to("mock:end").end() @TO@ MethodInvocation:from("file://target/testDeleteZipFileWhenUnmarshalWithSplitter?delay=10&delete=true").split(new ZipSplitter()).streaming().convertBodyTo(String.class).to("mock:end").end() @AT@ 3689 @LENGTH@ 263
---UPD MethodInvocation@@from("file://target/testDeleteZipFileWhenUnmarshalWithSplitter?delete=true").split(new ZipSplitter()).streaming().convertBodyTo(String.class).to("mock:end").end() @TO@ from("file://target/testDeleteZipFileWhenUnmarshalWithSplitter?delay=10&delete=true").split(new ZipSplitter()).streaming().convertBodyTo(String.class).to("mock:end").end() @AT@ 3689 @LENGTH@ 262
------UPD MethodInvocation@@MethodName:from:["file://target/testDeleteZipFileWhenUnmarshalWithSplitter?delete=true"] @TO@ MethodName:from:["file://target/testDeleteZipFileWhenUnmarshalWithSplitter?delay=10&delete=true"] @AT@ 3689 @LENGTH@ 76
---------UPD StringLiteral@@"file://target/testDeleteZipFileWhenUnmarshalWithSplitter?delete=true" @TO@ "file://target/testDeleteZipFileWhenUnmarshalWithSplitter?delay=10&delete=true" @AT@ 3694 @LENGTH@ 70


DEL MethodDeclaration@@public, void, MethodName:testJmsPollingConsumerNoWait, Exception,  @AT@ 3015 @LENGTH@ 993
---DEL Modifier@@public @AT@ 3015 @LENGTH@ 6
---DEL PrimitiveType@@void @AT@ 3022 @LENGTH@ 4
---DEL SimpleName@@MethodName:testJmsPollingConsumerNoWait @AT@ 3027 @LENGTH@ 28
---DEL SimpleType@@Exception @AT@ 3065 @LENGTH@ 9
---DEL VariableDeclarationStatement@@MockEndpoint mock=getMockEndpoint("mock:result"); @AT@ 3085 @LENGTH@ 51
------DEL SimpleType@@MockEndpoint @AT@ 3085 @LENGTH@ 12
------DEL VariableDeclarationFragment@@mock=getMockEndpoint("mock:result") @AT@ 3098 @LENGTH@ 37
---------DEL SimpleName@@mock @AT@ 3098 @LENGTH@ 4
---------DEL MethodInvocation@@getMockEndpoint("mock:result") @AT@ 3105 @LENGTH@ 30
------------DEL SimpleName@@MethodName:getMockEndpoint:["mock:result"] @AT@ 3105 @LENGTH@ 30
---------------DEL StringLiteral@@"mock:result" @AT@ 3121 @LENGTH@ 13
---DEL ExpressionStatement@@MethodInvocation:mock.expectedBodiesReceived("Hello Claus") @AT@ 3145 @LENGTH@ 43
------DEL MethodInvocation@@mock.expectedBodiesReceived("Hello Claus") @AT@ 3145 @LENGTH@ 42
---------DEL SimpleName@@Name:mock @AT@ 3145 @LENGTH@ 4
---------DEL SimpleName@@MethodName:expectedBodiesReceived:["Hello Claus"] @AT@ 3150 @LENGTH@ 37
------------DEL StringLiteral@@"Hello Claus" @AT@ 3173 @LENGTH@ 13
---DEL VariableDeclarationStatement@@final CountDownLatch latch=new CountDownLatch(1); @AT@ 3332 @LENGTH@ 51
------DEL Modifier@@final @AT@ 3332 @LENGTH@ 5
------DEL SimpleType@@CountDownLatch @AT@ 3338 @LENGTH@ 14
------DEL VariableDeclarationFragment@@latch=new CountDownLatch(1) @AT@ 3353 @LENGTH@ 29
---------DEL SimpleName@@latch @AT@ 3353 @LENGTH@ 5
---------DEL ClassInstanceCreation@@CountDownLatch[1] @AT@ 3361 @LENGTH@ 21
------------DEL New@@new @AT@ 3361 @LENGTH@ 3
------------DEL SimpleType@@CountDownLatch @AT@ 3365 @LENGTH@ 14
------------DEL NumberLiteral@@1 @AT@ 3380 @LENGTH@ 1
---DEL ExpressionStatement@@MethodInvocation:Executors.newSingleThreadExecutor().execute(() -> {
  String body=consumer.receiveBodyNoWait("spring-rabbitmq:foo?queues=myqueue&routingKey=mykey",String.class);
  assertNull(body,"Should be null");
  template.sendBody("spring-rabbitmq:foo?routingKey=mykey2","Hello Claus");
  latch.countDown();
}
) @AT@ 3392 @LENGTH@ 353
------DEL MethodInvocation@@Executors.newSingleThreadExecutor().execute(() -> {
  String body=consumer.receiveBodyNoWait("spring-rabbitmq:foo?queues=myqueue&routingKey=mykey",String.class);
  assertNull(body,"Should be null");
  template.sendBody("spring-rabbitmq:foo?routingKey=mykey2","Hello Claus");
  latch.countDown();
}
) @AT@ 3392 @LENGTH@ 352
---------DEL MethodInvocation@@MethodName:newSingleThreadExecutor:[] @AT@ 3392 @LENGTH@ 35
---------DEL SimpleName@@Name:Executors @AT@ 3392 @LENGTH@ 9
---------DEL SimpleName@@MethodName:execute:[() -> {
  String body=consumer.receiveBodyNoWait("spring-rabbitmq:foo?queues=myqueue&routingKey=mykey",String.class);
  assertNull(body,"Should be null");
  template.sendBody("spring-rabbitmq:foo?routingKey=mykey2","Hello Claus");
  latch.countDown();
}
] @AT@ 3428 @LENGTH@ 316
------------DEL LambdaExpression@@() -> {
  String body=consumer.receiveBodyNoWait("spring-rabbitmq:foo?queues=myqueue&routingKey=mykey",String.class);
  assertNull(body,"Should be null");
  template.sendBody("spring-rabbitmq:foo?routingKey=mykey2","Hello Claus");
  latch.countDown();
}
 @AT@ 3436 @LENGTH@ 307
---------------DEL VariableDeclarationStatement@@String body=consumer.receiveBodyNoWait("spring-rabbitmq:foo?queues=myqueue&routingKey=mykey",String.class); @AT@ 3456 @LENGTH@ 110
------------------DEL SimpleType@@String @AT@ 3456 @LENGTH@ 6
------------------DEL VariableDeclarationFragment@@body=consumer.receiveBodyNoWait("spring-rabbitmq:foo?queues=myqueue&routingKey=mykey",String.class) @AT@ 3463 @LENGTH@ 102
---------------------DEL SimpleName@@body @AT@ 3463 @LENGTH@ 4
---------------------DEL MethodInvocation@@consumer.receiveBodyNoWait("spring-rabbitmq:foo?queues=myqueue&routingKey=mykey",String.class) @AT@ 3470 @LENGTH@ 95
------------------------DEL SimpleName@@Name:consumer @AT@ 3470 @LENGTH@ 8
------------------------DEL SimpleName@@MethodName:receiveBodyNoWait:["spring-rabbitmq:foo?queues=myqueue&routingKey=mykey", String.class] @AT@ 3479 @LENGTH@ 86
---------------------------DEL StringLiteral@@"spring-rabbitmq:foo?queues=myqueue&routingKey=mykey" @AT@ 3497 @LENGTH@ 53
---------------------------DEL TypeLiteral@@String.class @AT@ 3552 @LENGTH@ 12
---------------DEL ExpressionStatement@@MethodInvocation:assertNull(body,"Should be null") @AT@ 3579 @LENGTH@ 35
------------------DEL MethodInvocation@@assertNull(body,"Should be null") @AT@ 3579 @LENGTH@ 34
---------------------DEL SimpleName@@MethodName:assertNull:[body, "Should be null"] @AT@ 3579 @LENGTH@ 34
------------------------DEL SimpleName@@body @AT@ 3590 @LENGTH@ 4
------------------------DEL StringLiteral@@"Should be null" @AT@ 3596 @LENGTH@ 16
---------------DEL ExpressionStatement@@MethodInvocation:template.sendBody("spring-rabbitmq:foo?routingKey=mykey2","Hello Claus") @AT@ 3628 @LENGTH@ 74
------------------DEL MethodInvocation@@template.sendBody("spring-rabbitmq:foo?routingKey=mykey2","Hello Claus") @AT@ 3628 @LENGTH@ 73
---------------------DEL SimpleName@@Name:template @AT@ 3628 @LENGTH@ 8
---------------------DEL SimpleName@@MethodName:sendBody:["spring-rabbitmq:foo?routingKey=mykey2", "Hello Claus"] @AT@ 3637 @LENGTH@ 64
------------------------DEL StringLiteral@@"spring-rabbitmq:foo?routingKey=mykey2" @AT@ 3646 @LENGTH@ 39
------------------------DEL StringLiteral@@"Hello Claus" @AT@ 3687 @LENGTH@ 13
---------------DEL ExpressionStatement@@MethodInvocation:latch.countDown() @AT@ 3715 @LENGTH@ 18
------------------DEL MethodInvocation@@latch.countDown() @AT@ 3715 @LENGTH@ 17
---------------------DEL SimpleName@@Name:latch @AT@ 3715 @LENGTH@ 5
---------------------DEL SimpleName@@MethodName:countDown:[] @AT@ 3721 @LENGTH@ 11
---DEL ExpressionStatement@@MethodInvocation:latch.await(5,TimeUnit.SECONDS) @AT@ 3847 @LENGTH@ 33
------DEL MethodInvocation@@latch.await(5,TimeUnit.SECONDS) @AT@ 3847 @LENGTH@ 32
---------DEL SimpleName@@Name:latch @AT@ 3847 @LENGTH@ 5
---------DEL SimpleName@@MethodName:await:[5, TimeUnit.SECONDS] @AT@ 3853 @LENGTH@ 26
------------DEL NumberLiteral@@5 @AT@ 3859 @LENGTH@ 1
------------DEL QualifiedName@@TimeUnit.SECONDS @AT@ 3862 @LENGTH@ 16
---------------DEL SimpleName@@TimeUnit @AT@ 3862 @LENGTH@ 8
---------------DEL SimpleName@@SECONDS @AT@ 3871 @LENGTH@ 7
---DEL ExpressionStatement@@MethodInvocation:Thread.sleep(1000) @AT@ 3889 @LENGTH@ 19
------DEL MethodInvocation@@Thread.sleep(1000) @AT@ 3889 @LENGTH@ 18
---------DEL SimpleName@@Name:Thread @AT@ 3889 @LENGTH@ 6
---------DEL SimpleName@@MethodName:sleep:[1000] @AT@ 3896 @LENGTH@ 11
------------DEL NumberLiteral@@1000 @AT@ 3902 @LENGTH@ 4
---DEL ExpressionStatement@@MethodInvocation:template.sendBody("direct:start","Hello") @AT@ 3918 @LENGTH@ 43
------DEL MethodInvocation@@template.sendBody("direct:start","Hello") @AT@ 3918 @LENGTH@ 42
---------DEL SimpleName@@Name:template @AT@ 3918 @LENGTH@ 8
---------DEL SimpleName@@MethodName:sendBody:["direct:start", "Hello"] @AT@ 3927 @LENGTH@ 33
------------DEL StringLiteral@@"direct:start" @AT@ 3936 @LENGTH@ 14
------------DEL StringLiteral@@"Hello" @AT@ 3952 @LENGTH@ 7
---DEL ExpressionStatement@@MethodInvocation:assertMockEndpointsSatisfied() @AT@ 3971 @LENGTH@ 31
------DEL MethodInvocation@@MethodName:assertMockEndpointsSatisfied:[] @AT@ 3971 @LENGTH@ 30


INS MethodDeclaration@@public, void, MethodName:testParseTarTruncatedInPadding, IOException,  @TO@ TypeDeclaration@@[public]TarFileTest, AbstractTestCase @AT@ 3575 @LENGTH@ 177
---INS Modifier@@public @TO@ MethodDeclaration@@public, void, MethodName:testParseTarTruncatedInPadding, IOException,  @AT@ 3575 @LENGTH@ 6
---INS PrimitiveType@@void @TO@ MethodDeclaration@@public, void, MethodName:testParseTarTruncatedInPadding, IOException,  @AT@ 3582 @LENGTH@ 4
---INS SimpleName@@MethodName:testParseTarTruncatedInPadding @TO@ MethodDeclaration@@public, void, MethodName:testParseTarTruncatedInPadding, IOException,  @AT@ 3587 @LENGTH@ 30
---INS SimpleType@@IOException @TO@ MethodDeclaration@@public, void, MethodName:testParseTarTruncatedInPadding, IOException,  @AT@ 3627 @LENGTH@ 11
---INS TryStatement@@try (TarFile tarFile=new TarFile(getPath("COMPRESS-544_truncated_in_padding.tar"))){}  @TO@ MethodDeclaration@@public, void, MethodName:testParseTarTruncatedInPadding, IOException,  @AT@ 3649 @LENGTH@ 97
------INS VariableDeclarationExpression@@TarFile tarFile=new TarFile(getPath("COMPRESS-544_truncated_in_padding.tar")) @TO@ TryStatement@@try (TarFile tarFile=new TarFile(getPath("COMPRESS-544_truncated_in_padding.tar"))){}  @AT@ 3654 @LENGTH@ 79
---------INS SimpleType@@TarFile @TO@ VariableDeclarationExpression@@TarFile tarFile=new TarFile(getPath("COMPRESS-544_truncated_in_padding.tar")) @AT@ 3654 @LENGTH@ 7
---------INS VariableDeclarationFragment@@tarFile=new TarFile(getPath("COMPRESS-544_truncated_in_padding.tar")) @TO@ VariableDeclarationExpression@@TarFile tarFile=new TarFile(getPath("COMPRESS-544_truncated_in_padding.tar")) @AT@ 3662 @LENGTH@ 71
------------INS SimpleName@@tarFile @TO@ VariableDeclarationFragment@@tarFile=new TarFile(getPath("COMPRESS-544_truncated_in_padding.tar")) @AT@ 3662 @LENGTH@ 7
------------INS ClassInstanceCreation@@TarFile[getPath("COMPRESS-544_truncated_in_padding.tar")] @TO@ VariableDeclarationFragment@@tarFile=new TarFile(getPath("COMPRESS-544_truncated_in_padding.tar")) @AT@ 3672 @LENGTH@ 61
---------------INS New@@new @TO@ ClassInstanceCreation@@TarFile[getPath("COMPRESS-544_truncated_in_padding.tar")] @AT@ 3672 @LENGTH@ 3
---------------INS SimpleType@@TarFile @TO@ ClassInstanceCreation@@TarFile[getPath("COMPRESS-544_truncated_in_padding.tar")] @AT@ 3676 @LENGTH@ 7
---------------INS MethodInvocation@@getPath("COMPRESS-544_truncated_in_padding.tar") @TO@ ClassInstanceCreation@@TarFile[getPath("COMPRESS-544_truncated_in_padding.tar")] @AT@ 3684 @LENGTH@ 48
------------------INS SimpleName@@MethodName:getPath:["COMPRESS-544_truncated_in_padding.tar"] @TO@ MethodInvocation@@getPath("COMPRESS-544_truncated_in_padding.tar") @AT@ 3684 @LENGTH@ 48
---------------------INS StringLiteral@@"COMPRESS-544_truncated_in_padding.tar" @TO@ SimpleName@@MethodName:getPath:["COMPRESS-544_truncated_in_padding.tar"] @AT@ 3692 @LENGTH@ 39


UPD FieldDeclaration@@SubscriptionListener, [EMPTY=new SubscriptionListener(){
}
] @TO@ SubscriptionListener, [NO_OP_SUBSCRIPTION_LISTENER=new SubscriptionListener(){
}
] @AT@ 1000 @LENGTH@ 59
---UPD VariableDeclarationFragment@@EMPTY=new SubscriptionListener(){
}
 @TO@ NO_OP_SUBSCRIPTION_LISTENER=new SubscriptionListener(){
}
 @AT@ 1021 @LENGTH@ 37
------UPD SimpleName@@EMPTY @TO@ NO_OP_SUBSCRIPTION_LISTENER @AT@ 1021 @LENGTH@ 5


UPD MethodDeclaration@@private, static, String, MethodName:replaceHost, String originalURIStr, String newHost, SemanticException,  @TO@ public, static, String, MethodName:replaceHost, String originalURIStr, String newHost, SemanticException,  @AT@ 4312 @LENGTH@ 551
---UPD Modifier@@private @TO@ public @AT@ 4312 @LENGTH@ 7


UPD TryStatement@@try (InputStream inputReader1=IOUtils.toInputStream(STRINGS[i],DEFAULT_CHARSET);InputStream inputReader2=IOUtils.toInputStream(STRINGS[j],DEFAULT_CHARSET)){  blackhole.consume(contentEqualsPr118(inputReader1,inputReader2));}  @TO@ try (InputStream inputStream1=IOUtils.toInputStream(STRINGS[i],DEFAULT_CHARSET);InputStream inputStream2=IOUtils.toInputStream(STRINGS[j],DEFAULT_CHARSET)){  blackhole.consume(contentEqualsPr118(inputStream1,inputStream2));}  @AT@ 9820 @LENGTH@ 289
---UPD VariableDeclarationExpression@@InputStream inputReader1=IOUtils.toInputStream(STRINGS[i],DEFAULT_CHARSET) @TO@ InputStream inputStream1=IOUtils.toInputStream(STRINGS[i],DEFAULT_CHARSET) @AT@ 9825 @LENGTH@ 77
------UPD VariableDeclarationFragment@@inputReader1=IOUtils.toInputStream(STRINGS[i],DEFAULT_CHARSET) @TO@ inputStream1=IOUtils.toInputStream(STRINGS[i],DEFAULT_CHARSET) @AT@ 9837 @LENGTH@ 65
---------UPD SimpleName@@inputReader1 @TO@ inputStream1 @AT@ 9837 @LENGTH@ 12
---UPD VariableDeclarationExpression@@InputStream inputReader2=IOUtils.toInputStream(STRINGS[j],DEFAULT_CHARSET) @TO@ InputStream inputStream2=IOUtils.toInputStream(STRINGS[j],DEFAULT_CHARSET) @AT@ 9924 @LENGTH@ 77
------UPD VariableDeclarationFragment@@inputReader2=IOUtils.toInputStream(STRINGS[j],DEFAULT_CHARSET) @TO@ inputStream2=IOUtils.toInputStream(STRINGS[j],DEFAULT_CHARSET) @AT@ 9936 @LENGTH@ 65
---------UPD SimpleName@@inputReader2 @TO@ inputStream2 @AT@ 9936 @LENGTH@ 12
---UPD ExpressionStatement@@MethodInvocation:blackhole.consume(contentEqualsPr118(inputReader1,inputReader2)) @TO@ MethodInvocation:blackhole.consume(contentEqualsPr118(inputStream1,inputStream2)) @AT@ 10025 @LENGTH@ 66
------UPD MethodInvocation@@blackhole.consume(contentEqualsPr118(inputReader1,inputReader2)) @TO@ blackhole.consume(contentEqualsPr118(inputStream1,inputStream2)) @AT@ 10025 @LENGTH@ 65
---------UPD SimpleName@@MethodName:consume:[contentEqualsPr118(inputReader1,inputReader2)] @TO@ MethodName:consume:[contentEqualsPr118(inputStream1,inputStream2)] @AT@ 10035 @LENGTH@ 55
------------UPD MethodInvocation@@contentEqualsPr118(inputReader1,inputReader2) @TO@ contentEqualsPr118(inputStream1,inputStream2) @AT@ 10043 @LENGTH@ 46
---------------UPD SimpleName@@MethodName:contentEqualsPr118:[inputReader1, inputReader2] @TO@ MethodName:contentEqualsPr118:[inputStream1, inputStream2] @AT@ 10043 @LENGTH@ 46
------------------UPD SimpleName@@inputReader1 @TO@ inputStream1 @AT@ 10062 @LENGTH@ 12
------------------UPD SimpleName@@inputReader2 @TO@ inputStream2 @AT@ 10076 @LENGTH@ 12


INS IfStatement@@if (closed) {  return false;} @TO@ MethodDeclaration@@public, boolean, MethodName:hasNext,  @AT@ 4515 @LENGTH@ 49
---INS SimpleName@@closed @TO@ IfStatement@@if (closed) {  return false;} @AT@ 4519 @LENGTH@ 6
---INS Block@@ThenBody:{  return false;} @TO@ IfStatement@@if (closed) {  return false;} @AT@ 4527 @LENGTH@ 37
------INS ReturnStatement@@BooleanLiteral:false @TO@ Block@@ThenBody:{  return false;} @AT@ 4541 @LENGTH@ 13
---------INS BooleanLiteral@@false @TO@ ReturnStatement@@BooleanLiteral:false @AT@ 4548 @LENGTH@ 5


UPD VariableDeclarationStatement@@Class<T> domainClass=(Class<T>)CollectionUtils.findCommonElementType(entities); @TO@ Class<T> domainClass=(Class<T>)TemplateSupport.findCommonElementType(entities); @AT@ 15904 @LENGTH@ 82
---UPD VariableDeclarationFragment@@domainClass=(Class<T>)CollectionUtils.findCommonElementType(entities) @TO@ domainClass=(Class<T>)TemplateSupport.findCommonElementType(entities) @AT@ 15913 @LENGTH@ 72
------UPD CastExpression@@(Class<T>)CollectionUtils.findCommonElementType(entities) @TO@ (Class<T>)TemplateSupport.findCommonElementType(entities) @AT@ 15927 @LENGTH@ 58
---------UPD MethodInvocation@@CollectionUtils.findCommonElementType(entities) @TO@ TemplateSupport.findCommonElementType(entities) @AT@ 15938 @LENGTH@ 47
------------UPD SimpleName@@Name:CollectionUtils @TO@ Name:TemplateSupport @AT@ 15938 @LENGTH@ 15


DEL TryStatement@@try {  new OperatorGraph(pctx).toDot(new java.io.File("/tmp/1.full.dot"));  new OperatorGraph(pctx).implode().toDot(new java.io.File("/tmp/1.joins.dot"));} catch (Exception e1) {  throw new RuntimeException(e1);} @AT@ 13168 @LENGTH@ 237
---DEL ExpressionStatement@@MethodInvocation:new OperatorGraph(pctx).toDot(new java.io.File("/tmp/1.full.dot")) @AT@ 13180 @LENGTH@ 67
------DEL MethodInvocation@@new OperatorGraph(pctx).toDot(new java.io.File("/tmp/1.full.dot")) @AT@ 13180 @LENGTH@ 66
---------DEL ClassInstanceCreation@@OperatorGraph[pctx] @AT@ 13180 @LENGTH@ 23
------------DEL New@@new @AT@ 13180 @LENGTH@ 3
------------DEL SimpleType@@OperatorGraph @AT@ 13184 @LENGTH@ 13
------------DEL SimpleName@@pctx @AT@ 13198 @LENGTH@ 4
---------DEL SimpleName@@MethodName:toDot:[new java.io.File("/tmp/1.full.dot")] @AT@ 13204 @LENGTH@ 42
------------DEL ClassInstanceCreation@@java.io.File["/tmp/1.full.dot"] @AT@ 13210 @LENGTH@ 35
---------------DEL New@@new @AT@ 13210 @LENGTH@ 3
---------------DEL SimpleType@@java.io.File @AT@ 13214 @LENGTH@ 12
---------------DEL StringLiteral@@"/tmp/1.full.dot" @AT@ 13227 @LENGTH@ 17
---DEL ExpressionStatement@@MethodInvocation:new OperatorGraph(pctx).implode().toDot(new java.io.File("/tmp/1.joins.dot")) @AT@ 13254 @LENGTH@ 78
------DEL MethodInvocation@@new OperatorGraph(pctx).implode().toDot(new java.io.File("/tmp/1.joins.dot")) @AT@ 13254 @LENGTH@ 77
---------DEL MethodInvocation@@MethodName:implode:[] @AT@ 13254 @LENGTH@ 33
---------DEL ClassInstanceCreation@@OperatorGraph[pctx] @AT@ 13254 @LENGTH@ 23
------------DEL New@@new @AT@ 13254 @LENGTH@ 3
------------DEL SimpleType@@OperatorGraph @AT@ 13258 @LENGTH@ 13
------------DEL SimpleName@@pctx @AT@ 13272 @LENGTH@ 4
---------DEL SimpleName@@MethodName:toDot:[new java.io.File("/tmp/1.joins.dot")] @AT@ 13288 @LENGTH@ 43
------------DEL ClassInstanceCreation@@java.io.File["/tmp/1.joins.dot"] @AT@ 13294 @LENGTH@ 36
---------------DEL New@@new @AT@ 13294 @LENGTH@ 3
---------------DEL SimpleType@@java.io.File @AT@ 13298 @LENGTH@ 12
---------------DEL StringLiteral@@"/tmp/1.joins.dot" @AT@ 13311 @LENGTH@ 18
---DEL CatchClause@@catch (Exception e1) {  throw new RuntimeException(e1);} @AT@ 13339 @LENGTH@ 66
------DEL SingleVariableDeclaration@@Exception e1 @AT@ 13346 @LENGTH@ 12
---------DEL SimpleType@@Exception @AT@ 13346 @LENGTH@ 9
---------DEL SimpleName@@e1 @AT@ 13356 @LENGTH@ 2
------DEL ThrowStatement@@ClassInstanceCreation:new RuntimeException(e1) @AT@ 13368 @LENGTH@ 31
---------DEL ClassInstanceCreation@@RuntimeException[e1] @AT@ 13374 @LENGTH@ 24
------------DEL New@@new @AT@ 13374 @LENGTH@ 3
------------DEL SimpleType@@RuntimeException @AT@ 13378 @LENGTH@ 16
------------DEL SimpleName@@e1 @AT@ 13395 @LENGTH@ 2


UPD MethodDeclaration@@public, DatabaseSelectionProvider, MethodName:databaseNameProvider,  @TO@ public, DatabaseSelectionProvider, MethodName:databaseSelectionProvider,  @AT@ 171370 @LENGTH@ 96
---UPD SimpleName@@MethodName:databaseNameProvider @TO@ MethodName:databaseSelectionProvider @AT@ 171403 @LENGTH@ 20


UPD ExpressionStatement@@MethodInvocation:from("direct:start").to("http://dbpedia.org/page/Ecuador").unmarshal().any23(baseURI).to("mock:result") @TO@ MethodInvocation:from("direct:start").to("http://live.dbpedia.org/page/Ecuador").unmarshal().any23(baseURI).to("mock:result") @AT@ 1984 @LENGTH@ 104
---UPD MethodInvocation@@from("direct:start").to("http://dbpedia.org/page/Ecuador").unmarshal().any23(baseURI).to("mock:result") @TO@ from("direct:start").to("http://live.dbpedia.org/page/Ecuador").unmarshal().any23(baseURI).to("mock:result") @AT@ 1984 @LENGTH@ 103
------UPD MethodInvocation@@MethodName:to:["http://dbpedia.org/page/Ecuador"] @TO@ MethodName:to:["http://live.dbpedia.org/page/Ecuador"] @AT@ 1984 @LENGTH@ 58
---------UPD StringLiteral@@"http://dbpedia.org/page/Ecuador" @TO@ "http://live.dbpedia.org/page/Ecuador" @AT@ 2008 @LENGTH@ 33


UPD ExpressionStatement@@MethodInvocation:context.getStreamCachingStrategy().setSpoolDirectory("target/camel/cache") @TO@ MethodInvocation:context.getStreamCachingStrategy().setSpoolDirectory(testDirectory().toFile()) @AT@ 1690 @LENGTH@ 75
---UPD MethodInvocation@@context.getStreamCachingStrategy().setSpoolDirectory("target/camel/cache") @TO@ context.getStreamCachingStrategy().setSpoolDirectory(testDirectory().toFile()) @AT@ 1690 @LENGTH@ 74
------UPD SimpleName@@MethodName:setSpoolDirectory:["target/camel/cache"] @TO@ MethodName:setSpoolDirectory:[testDirectory().toFile()] @AT@ 1725 @LENGTH@ 39
---------INS MethodInvocation@@testDirectory().toFile() @TO@ SimpleName@@MethodName:setSpoolDirectory:["target/camel/cache"] @AT@ 1743 @LENGTH@ 24
------------INS MethodInvocation@@MethodName:testDirectory:[] @TO@ MethodInvocation@@testDirectory().toFile() @AT@ 1743 @LENGTH@ 15
------------INS SimpleName@@MethodName:toFile:[] @TO@ MethodInvocation@@testDirectory().toFile() @AT@ 1759 @LENGTH@ 8
---------DEL StringLiteral@@"target/camel/cache" @AT@ 1743 @LENGTH@ 20


UPD TypeDeclaration@@[public]NettyHttpSuspendResume503Test, BaseNettyTest @TO@ [@Disabled("TODO: leak error"), public]NettyHttpSuspendResume503Test, BaseNettyTest @AT@ 1313 @LENGTH@ 1654
---INS SingleMemberAnnotation@@@Disabled("TODO: leak error") @TO@ TypeDeclaration@@[public]NettyHttpSuspendResume503Test, BaseNettyTest @AT@ 1352 @LENGTH@ 29


UPD ReturnStatement@@MethodInvocation:source.toJson() @TO@ MethodInvocation:source.toJson(codec) @AT@ 7032 @LENGTH@ 23
---UPD MethodInvocation@@source.toJson() @TO@ source.toJson(codec) @AT@ 7039 @LENGTH@ 15
------UPD SimpleName@@MethodName:toJson:[] @TO@ MethodName:toJson:[codec] @AT@ 7046 @LENGTH@ 8
---------INS SimpleName@@codec @TO@ SimpleName@@MethodName:toJson:[] @AT@ 7350 @LENGTH@ 5


UPD MethodDeclaration@@private, static, Class, MethodName:getDirectBufferClass,  @TO@ private, static, Class<?>, MethodName:getDirectBufferClass,  @AT@ 1846 @LENGTH@ 253
---DEL SimpleType@@Class @AT@ 1861 @LENGTH@ 5
---INS ParameterizedType@@Class<?> @TO@ MethodDeclaration@@private, static, Class, MethodName:getDirectBufferClass,  @AT@ 1864 @LENGTH@ 8
------INS SimpleType@@Class @TO@ ParameterizedType@@Class<?> @AT@ 1864 @LENGTH@ 5
------INS WildcardType@@? @TO@ ParameterizedType@@Class<?> @AT@ 1870 @LENGTH@ 1
---UPD VariableDeclarationStatement@@Class res=null; @TO@ Class<?> res=null; @AT@ 1900 @LENGTH@ 17
------DEL SimpleType@@Class @AT@ 1900 @LENGTH@ 5
------INS ParameterizedType@@Class<?> @TO@ VariableDeclarationStatement@@Class res=null; @AT@ 1906 @LENGTH@ 8
---------INS SimpleType@@Class @TO@ ParameterizedType@@Class<?> @AT@ 1906 @LENGTH@ 5
---------INS WildcardType@@? @TO@ ParameterizedType@@Class<?> @AT@ 1912 @LENGTH@ 1


UPD ExpressionStatement@@MethodInvocation:scs.setSpoolDirectory("target/streamcache/") @TO@ MethodInvocation:scs.setSpoolDirectory(testDirectory().toFile()) @AT@ 2615 @LENGTH@ 45
---UPD MethodInvocation@@scs.setSpoolDirectory("target/streamcache/") @TO@ scs.setSpoolDirectory(testDirectory().toFile()) @AT@ 2615 @LENGTH@ 44
------UPD SimpleName@@MethodName:setSpoolDirectory:["target/streamcache/"] @TO@ MethodName:setSpoolDirectory:[testDirectory().toFile()] @AT@ 2619 @LENGTH@ 40
---------INS MethodInvocation@@testDirectory().toFile() @TO@ SimpleName@@MethodName:setSpoolDirectory:["target/streamcache/"] @AT@ 2637 @LENGTH@ 24
------------INS MethodInvocation@@MethodName:testDirectory:[] @TO@ MethodInvocation@@testDirectory().toFile() @AT@ 2637 @LENGTH@ 15
------------INS SimpleName@@MethodName:toFile:[] @TO@ MethodInvocation@@testDirectory().toFile() @AT@ 2653 @LENGTH@ 8
---------DEL StringLiteral@@"target/streamcache/" @AT@ 2637 @LENGTH@ 21


UPD IfStatement@@if (queryType == Neo4jQueryType.COUNT) {  queryFragments.addReturnExpression(Functions.count(Cypher.asterisk()));} else if (queryType == Neo4jQueryType.EXISTS) {  queryFragments.addReturnExpression(Functions.count(Constants.NAME_OF_ROOT_NODE).gt(Cypher.literalOf(0)));} else {  queryFragments.setReturnBasedOn(nodeDescription,includedProperties);  queryFragments.setOrderBy(Stream.concat(sortItems.stream(),pagingParameter.getSort().and(sort).stream().map(CypherAdapterUtils.sortAdapterFor(nodeDescription))).toArray(SortItem[]::new));  if (pagingParameter.isUnpaged()) {    queryFragments.setLimit(maxResults);  } else {    long skip=pagingParameter.getOffset();    int pageSize=pagingParameter.getPageSize();    queryFragments.setSkip(skip);    queryFragments.setLimit(limitModifier.apply(pageSize));  }} @TO@ if (queryType == Neo4jQueryType.COUNT) {  queryFragments.setReturnExpression(Functions.count(Cypher.asterisk()),true);} else if (queryType == Neo4jQueryType.EXISTS) {  queryFragments.setReturnExpression(Functions.count(Constants.NAME_OF_ROOT_NODE).gt(Cypher.literalOf(0)),true);} else {  queryFragments.setReturnBasedOn(nodeDescription,includedProperties);  queryFragments.setOrderBy(Stream.concat(sortItems.stream(),pagingParameter.getSort().and(sort).stream().map(CypherAdapterUtils.sortAdapterFor(nodeDescription))).toArray(SortItem[]::new));  if (pagingParameter.isUnpaged()) {    queryFragments.setLimit(maxResults);  } else {    long skip=pagingParameter.getOffset();    int pageSize=pagingParameter.getPageSize();    queryFragments.setSkip(skip);    queryFragments.setLimit(limitModifier.apply(pageSize));  }} @AT@ 10761 @LENGTH@ 859
---UPD Block@@ThenBody:{  queryFragments.addReturnExpression(Functions.count(Cypher.asterisk()));} @TO@ ThenBody:{  queryFragments.setReturnExpression(Functions.count(Cypher.asterisk()),true);} @AT@ 10800 @LENGTH@ 80
------UPD ExpressionStatement@@MethodInvocation:queryFragments.addReturnExpression(Functions.count(Cypher.asterisk())) @TO@ MethodInvocation:queryFragments.setReturnExpression(Functions.count(Cypher.asterisk()),true) @AT@ 10805 @LENGTH@ 71
---------UPD MethodInvocation@@queryFragments.addReturnExpression(Functions.count(Cypher.asterisk())) @TO@ queryFragments.setReturnExpression(Functions.count(Cypher.asterisk()),true) @AT@ 10805 @LENGTH@ 70
------------UPD SimpleName@@MethodName:addReturnExpression:[Functions.count(Cypher.asterisk())] @TO@ MethodName:setReturnExpression:[Functions.count(Cypher.asterisk()), true] @AT@ 10820 @LENGTH@ 55
---------------INS BooleanLiteral@@true @TO@ SimpleName@@MethodName:addReturnExpression:[Functions.count(Cypher.asterisk())] @AT@ 10876 @LENGTH@ 4
---UPD Block@@ElseBody:if (queryType == Neo4jQueryType.EXISTS) {  queryFragments.addReturnExpression(Functions.count(Constants.NAME_OF_ROOT_NODE).gt(Cypher.literalOf(0)));} else {  queryFragments.setReturnBasedOn(nodeDescription,includedProperties);  queryFragments.setOrderBy(Stream.concat(sortItems.stream(),pagingParameter.getSort().and(sort).stream().map(CypherAdapterUtils.sortAdapterFor(nodeDescription))).toArray(SortItem[]::new));  if (pagingParameter.isUnpaged()) {    queryFragments.setLimit(maxResults);  } else {    long skip=pagingParameter.getOffset();    int pageSize=pagingParameter.getPageSize();    queryFragments.setSkip(skip);    queryFragments.setLimit(limitModifier.apply(pageSize));  }} @TO@ ElseBody:if (queryType == Neo4jQueryType.EXISTS) {  queryFragments.setReturnExpression(Functions.count(Constants.NAME_OF_ROOT_NODE).gt(Cypher.literalOf(0)),true);} else {  queryFragments.setReturnBasedOn(nodeDescription,includedProperties);  queryFragments.setOrderBy(Stream.concat(sortItems.stream(),pagingParameter.getSort().and(sort).stream().map(CypherAdapterUtils.sortAdapterFor(nodeDescription))).toArray(SortItem[]::new));  if (pagingParameter.isUnpaged()) {    queryFragments.setLimit(maxResults);  } else {    long skip=pagingParameter.getOffset();    int pageSize=pagingParameter.getPageSize();    queryFragments.setSkip(skip);    queryFragments.setLimit(limitModifier.apply(pageSize));  }} @AT@ 10886 @LENGTH@ 734
------UPD IfStatement@@if (queryType == Neo4jQueryType.EXISTS) {  queryFragments.addReturnExpression(Functions.count(Constants.NAME_OF_ROOT_NODE).gt(Cypher.literalOf(0)));} else {  queryFragments.setReturnBasedOn(nodeDescription,includedProperties);  queryFragments.setOrderBy(Stream.concat(sortItems.stream(),pagingParameter.getSort().and(sort).stream().map(CypherAdapterUtils.sortAdapterFor(nodeDescription))).toArray(SortItem[]::new));  if (pagingParameter.isUnpaged()) {    queryFragments.setLimit(maxResults);  } else {    long skip=pagingParameter.getOffset();    int pageSize=pagingParameter.getPageSize();    queryFragments.setSkip(skip);    queryFragments.setLimit(limitModifier.apply(pageSize));  }} @TO@ if (queryType == Neo4jQueryType.EXISTS) {  queryFragments.setReturnExpression(Functions.count(Constants.NAME_OF_ROOT_NODE).gt(Cypher.literalOf(0)),true);} else {  queryFragments.setReturnBasedOn(nodeDescription,includedProperties);  queryFragments.setOrderBy(Stream.concat(sortItems.stream(),pagingParameter.getSort().and(sort).stream().map(CypherAdapterUtils.sortAdapterFor(nodeDescription))).toArray(SortItem[]::new));  if (pagingParameter.isUnpaged()) {    queryFragments.setLimit(maxResults);  } else {    long skip=pagingParameter.getOffset();    int pageSize=pagingParameter.getPageSize();    queryFragments.setSkip(skip);    queryFragments.setLimit(limitModifier.apply(pageSize));  }} @AT@ 10886 @LENGTH@ 734
---------UPD Block@@ThenBody:{  queryFragments.addReturnExpression(Functions.count(Constants.NAME_OF_ROOT_NODE).gt(Cypher.literalOf(0)));} @TO@ ThenBody:{  queryFragments.setReturnExpression(Functions.count(Constants.NAME_OF_ROOT_NODE).gt(Cypher.literalOf(0)),true);} @AT@ 10926 @LENGTH@ 114
------------UPD ExpressionStatement@@MethodInvocation:queryFragments.addReturnExpression(Functions.count(Constants.NAME_OF_ROOT_NODE).gt(Cypher.literalOf(0))) @TO@ MethodInvocation:queryFragments.setReturnExpression(Functions.count(Constants.NAME_OF_ROOT_NODE).gt(Cypher.literalOf(0)),true) @AT@ 10931 @LENGTH@ 105
---------------UPD MethodInvocation@@queryFragments.addReturnExpression(Functions.count(Constants.NAME_OF_ROOT_NODE).gt(Cypher.literalOf(0))) @TO@ queryFragments.setReturnExpression(Functions.count(Constants.NAME_OF_ROOT_NODE).gt(Cypher.literalOf(0)),true) @AT@ 10931 @LENGTH@ 104
------------------UPD SimpleName@@MethodName:addReturnExpression:[Functions.count(Constants.NAME_OF_ROOT_NODE).gt(Cypher.literalOf(0))] @TO@ MethodName:setReturnExpression:[Functions.count(Constants.NAME_OF_ROOT_NODE).gt(Cypher.literalOf(0)), true] @AT@ 10946 @LENGTH@ 89
---------------------INS BooleanLiteral@@true @TO@ SimpleName@@MethodName:addReturnExpression:[Functions.count(Constants.NAME_OF_ROOT_NODE).gt(Cypher.literalOf(0))] @AT@ 11042 @LENGTH@ 4


UPD IfStatement@@if (ObjectHelper.isNotEmpty(optionalPrefix) && name.startsWith(optionalPrefix)) {  return stripOptionalPrefixFromName(rows,name.substring(optionalPrefix.length()));} else {  if (name.equalsIgnoreCase(row.getName())) {    break;  }} @TO@ if (optionalPrefix != null && !optionalPrefix.isEmpty() && name.startsWith(optionalPrefix)) {  return stripOptionalPrefixFromName(rows,name.substring(optionalPrefix.length()));} else {  if (name.equalsIgnoreCase(row.getName())) {    break;  }} @AT@ 66182 @LENGTH@ 349
---UPD InfixExpression@@ObjectHelper.isNotEmpty(optionalPrefix) && name.startsWith(optionalPrefix) @TO@ optionalPrefix != null && !optionalPrefix.isEmpty() && name.startsWith(optionalPrefix) @AT@ 66186 @LENGTH@ 74
------INS InfixExpression@@optionalPrefix != null && !optionalPrefix.isEmpty() @TO@ InfixExpression@@ObjectHelper.isNotEmpty(optionalPrefix) && name.startsWith(optionalPrefix) @AT@ 66143 @LENGTH@ 51
---------INS InfixExpression@@optionalPrefix != null @TO@ InfixExpression@@optionalPrefix != null && !optionalPrefix.isEmpty() @AT@ 66143 @LENGTH@ 22
------------INS SimpleName@@optionalPrefix @TO@ InfixExpression@@optionalPrefix != null @AT@ 66143 @LENGTH@ 14
------------INS Operator@@!= @TO@ InfixExpression@@optionalPrefix != null @AT@ 66157 @LENGTH@ 2
------------INS NullLiteral@@null @TO@ InfixExpression@@optionalPrefix != null @AT@ 66161 @LENGTH@ 4
---------INS Operator@@&& @TO@ InfixExpression@@optionalPrefix != null && !optionalPrefix.isEmpty() @AT@ 66165 @LENGTH@ 2
---------INS PrefixExpression@@!optionalPrefix.isEmpty() @TO@ InfixExpression@@optionalPrefix != null && !optionalPrefix.isEmpty() @AT@ 66169 @LENGTH@ 25
------------INS Operator@@! @TO@ PrefixExpression@@!optionalPrefix.isEmpty() @AT@ 66169 @LENGTH@ 1
------------INS MethodInvocation@@optionalPrefix.isEmpty() @TO@ PrefixExpression@@!optionalPrefix.isEmpty() @AT@ 66170 @LENGTH@ 24
---------------MOV SimpleName@@Name:ObjectHelper @TO@ MethodInvocation@@optionalPrefix.isEmpty() @AT@ 66186 @LENGTH@ 12
---------------MOV SimpleName@@MethodName:isNotEmpty:[optionalPrefix] @TO@ MethodInvocation@@optionalPrefix.isEmpty() @AT@ 66199 @LENGTH@ 26
------DEL MethodInvocation@@ObjectHelper.isNotEmpty(optionalPrefix) @AT@ 66186 @LENGTH@ 39


UPD FieldDeclaration@@int, [index=0] @TO@ int, [index] @AT@ 1838 @LENGTH@ 14
---UPD VariableDeclarationFragment@@index=0 @TO@ index @AT@ 1842 @LENGTH@ 9
------DEL NumberLiteral@@0 @AT@ 1850 @LENGTH@ 1


INS MethodDeclaration@@void, MethodName:correlationData,  @TO@ TypeDeclaration@@[@RabbitAvailable, public]PublisherCallbackChannelTests,  @AT@ 2422 @LENGTH@ 116
---INS PrimitiveType@@void @TO@ MethodDeclaration@@void, MethodName:correlationData,  @AT@ 2417 @LENGTH@ 4
---INS SimpleName@@MethodName:correlationData @TO@ MethodDeclaration@@void, MethodName:correlationData,  @AT@ 2422 @LENGTH@ 15
---INS VariableDeclarationStatement@@CorrelationData cd=new CorrelationData(); @TO@ MethodDeclaration@@void, MethodName:correlationData,  @AT@ 2444 @LENGTH@ 43
------INS SimpleType@@CorrelationData @TO@ VariableDeclarationStatement@@CorrelationData cd=new CorrelationData(); @AT@ 2444 @LENGTH@ 15
------INS VariableDeclarationFragment@@cd=new CorrelationData() @TO@ VariableDeclarationStatement@@CorrelationData cd=new CorrelationData(); @AT@ 2460 @LENGTH@ 26
---------INS SimpleName@@cd @TO@ VariableDeclarationFragment@@cd=new CorrelationData() @AT@ 2460 @LENGTH@ 2
---------INS ClassInstanceCreation@@CorrelationData[] @TO@ VariableDeclarationFragment@@cd=new CorrelationData() @AT@ 2465 @LENGTH@ 21
------------INS New@@new @TO@ ClassInstanceCreation@@CorrelationData[] @AT@ 2465 @LENGTH@ 3
------------INS SimpleType@@CorrelationData @TO@ ClassInstanceCreation@@CorrelationData[] @AT@ 2469 @LENGTH@ 15
---INS ExpressionStatement@@MethodInvocation:assertThat(cd.getReturnedMessage()).isNull() @TO@ MethodDeclaration@@void, MethodName:correlationData,  @AT@ 2490 @LENGTH@ 45
------INS MethodInvocation@@assertThat(cd.getReturnedMessage()).isNull() @TO@ ExpressionStatement@@MethodInvocation:assertThat(cd.getReturnedMessage()).isNull() @AT@ 2490 @LENGTH@ 44
---------INS MethodInvocation@@MethodName:assertThat:[cd.getReturnedMessage()] @TO@ MethodInvocation@@assertThat(cd.getReturnedMessage()).isNull() @AT@ 2490 @LENGTH@ 35
------------INS MethodInvocation@@cd.getReturnedMessage() @TO@ MethodInvocation@@MethodName:assertThat:[cd.getReturnedMessage()] @AT@ 2501 @LENGTH@ 23
---------------INS SimpleName@@Name:cd @TO@ MethodInvocation@@cd.getReturnedMessage() @AT@ 2501 @LENGTH@ 2
---------------INS SimpleName@@MethodName:getReturnedMessage:[] @TO@ MethodInvocation@@cd.getReturnedMessage() @AT@ 2504 @LENGTH@ 20
---------INS SimpleName@@MethodName:isNull:[] @TO@ MethodInvocation@@assertThat(cd.getReturnedMessage()).isNull() @AT@ 2526 @LENGTH@ 8


INS MethodDeclaration@@public, void, MethodName:testThrowExceptionWithNullEntry, IOException,  @TO@ TypeDeclaration@@[public]TarFileTest, AbstractTestCase @AT@ 4021 @LENGTH@ 157
---INS Modifier@@public @TO@ MethodDeclaration@@public, void, MethodName:testThrowExceptionWithNullEntry, IOException,  @AT@ 4021 @LENGTH@ 6
---INS PrimitiveType@@void @TO@ MethodDeclaration@@public, void, MethodName:testThrowExceptionWithNullEntry, IOException,  @AT@ 4028 @LENGTH@ 4
---INS SimpleName@@MethodName:testThrowExceptionWithNullEntry @TO@ MethodDeclaration@@public, void, MethodName:testThrowExceptionWithNullEntry, IOException,  @AT@ 4033 @LENGTH@ 31
---INS SimpleType@@IOException @TO@ MethodDeclaration@@public, void, MethodName:testThrowExceptionWithNullEntry, IOException,  @AT@ 4074 @LENGTH@ 11
---INS TryStatement@@try (TarFile tarFile=new TarFile(getPath("COMPRESS-554.tar"))){}  @TO@ MethodDeclaration@@public, void, MethodName:testThrowExceptionWithNullEntry, IOException,  @AT@ 4096 @LENGTH@ 76
------INS VariableDeclarationExpression@@TarFile tarFile=new TarFile(getPath("COMPRESS-554.tar")) @TO@ TryStatement@@try (TarFile tarFile=new TarFile(getPath("COMPRESS-554.tar"))){}  @AT@ 4101 @LENGTH@ 58
---------INS SimpleType@@TarFile @TO@ VariableDeclarationExpression@@TarFile tarFile=new TarFile(getPath("COMPRESS-554.tar")) @AT@ 4101 @LENGTH@ 7
---------INS VariableDeclarationFragment@@tarFile=new TarFile(getPath("COMPRESS-554.tar")) @TO@ VariableDeclarationExpression@@TarFile tarFile=new TarFile(getPath("COMPRESS-554.tar")) @AT@ 4109 @LENGTH@ 50
------------INS SimpleName@@tarFile @TO@ VariableDeclarationFragment@@tarFile=new TarFile(getPath("COMPRESS-554.tar")) @AT@ 4109 @LENGTH@ 7
------------INS ClassInstanceCreation@@TarFile[getPath("COMPRESS-554.tar")] @TO@ VariableDeclarationFragment@@tarFile=new TarFile(getPath("COMPRESS-554.tar")) @AT@ 4119 @LENGTH@ 40
---------------INS New@@new @TO@ ClassInstanceCreation@@TarFile[getPath("COMPRESS-554.tar")] @AT@ 4119 @LENGTH@ 3
---------------INS SimpleType@@TarFile @TO@ ClassInstanceCreation@@TarFile[getPath("COMPRESS-554.tar")] @AT@ 4123 @LENGTH@ 7
---------------INS MethodInvocation@@getPath("COMPRESS-554.tar") @TO@ ClassInstanceCreation@@TarFile[getPath("COMPRESS-554.tar")] @AT@ 4131 @LENGTH@ 27
------------------INS SimpleName@@MethodName:getPath:["COMPRESS-554.tar"] @TO@ MethodInvocation@@getPath("COMPRESS-554.tar") @AT@ 4131 @LENGTH@ 27
---------------------INS StringLiteral@@"COMPRESS-554.tar" @TO@ SimpleName@@MethodName:getPath:["COMPRESS-554.tar"] @AT@ 4139 @LENGTH@ 18


UPD MethodDeclaration@@voidMethodName:JedisSubscription, MessageListener listener, JedisMessageListener jedisPubSub, @Nullable byte[][] channels, @Nullable byte[][] patterns,  @TO@ voidMethodName:JedisSubscription, MessageListener listener, BinaryJedisPubSub jedisPubSub, @Nullable byte[][] channels, @Nullable byte[][] patterns,  @AT@ 1082 @LENGTH@ 216
---UPD SingleVariableDeclaration@@JedisMessageListener jedisPubSub @TO@ BinaryJedisPubSub jedisPubSub @AT@ 1126 @LENGTH@ 32
------UPD SimpleType@@JedisMessageListener @TO@ BinaryJedisPubSub @AT@ 1126 @LENGTH@ 20


UPD IfStatement@@if (running == false) {  throw new IllegalStateException("Monitor is not running");} @TO@ if (!running) {  throw new IllegalStateException("Monitor is not running");} @AT@ 5787 @LENGTH@ 104
---DEL InfixExpression@@running == false @AT@ 5791 @LENGTH@ 16
------DEL SimpleName@@running @AT@ 5791 @LENGTH@ 7
------DEL Operator@@== @AT@ 5798 @LENGTH@ 2
------DEL BooleanLiteral@@false @AT@ 5802 @LENGTH@ 5
---INS PrefixExpression@@!running @TO@ IfStatement@@if (running == false) {  throw new IllegalStateException("Monitor is not running");} @AT@ 5791 @LENGTH@ 8
------INS Operator@@! @TO@ PrefixExpression@@!running @AT@ 5791 @LENGTH@ 1
------INS SimpleName@@running @TO@ PrefixExpression@@!running @AT@ 5792 @LENGTH@ 7


UPD ExpressionStatement@@MethodInvocation:LOG.warn("A number of " + caught + " exceptions caught while unregistering MBeans during stop operation."+ " See INFO log for details.") @TO@ MethodInvocation:LOG.warn("A number of {} exceptions caught while unregistering MBeans during stop operation. See INFO log" + "for details.",caught) @AT@ 14634 @LENGTH@ 180
---UPD MethodInvocation@@LOG.warn("A number of " + caught + " exceptions caught while unregistering MBeans during stop operation."+ " See INFO log for details.") @TO@ LOG.warn("A number of {} exceptions caught while unregistering MBeans during stop operation. See INFO log" + "for details.",caught) @AT@ 14634 @LENGTH@ 179
------UPD SimpleName@@MethodName:warn:["A number of " + caught + " exceptions caught while unregistering MBeans during stop operation."+ " See INFO log for details."] @TO@ MethodName:warn:["A number of {} exceptions caught while unregistering MBeans during stop operation. See INFO log" + "for details.", caught] @AT@ 14638 @LENGTH@ 175
---------UPD InfixExpression@@"A number of " + caught + " exceptions caught while unregistering MBeans during stop operation."+ " See INFO log for details." @TO@ "A number of {} exceptions caught while unregistering MBeans during stop operation. See INFO log" + "for details." @AT@ 14643 @LENGTH@ 169
------------UPD StringLiteral@@"A number of " @TO@ "A number of {} exceptions caught while unregistering MBeans during stop operation. See INFO log" @AT@ 14643 @LENGTH@ 14
------------DEL SimpleName@@caught @AT@ 14660 @LENGTH@ 6
------------DEL StringLiteral@@" exceptions caught while unregistering MBeans during stop operation." @AT@ 14690 @LENGTH@ 70
------------UPD StringLiteral@@" See INFO log for details." @TO@ "for details." @AT@ 14784 @LENGTH@ 28
---------INS SimpleName@@caught @TO@ SimpleName@@MethodName:warn:["A number of " + caught + " exceptions caught while unregistering MBeans during stop operation."+ " See INFO log for details."] @AT@ 14800 @LENGTH@ 6


UPD VariableDeclarationStatement@@DelegatingHandlerMapping mapping=new DelegatingHandlerMapping(Arrays.asList(first,second,third,fourth)); @TO@ DelegatingHandlerMapping mapping=new DelegatingHandlerMapping(Arrays.asList(first,second,third,fourth),null); @AT@ 3072 @LENGTH@ 109
---UPD VariableDeclarationFragment@@mapping=new DelegatingHandlerMapping(Arrays.asList(first,second,third,fourth)) @TO@ mapping=new DelegatingHandlerMapping(Arrays.asList(first,second,third,fourth),null) @AT@ 3097 @LENGTH@ 83
------UPD ClassInstanceCreation@@DelegatingHandlerMapping[Arrays.asList(first,second,third,fourth)] @TO@ DelegatingHandlerMapping[Arrays.asList(first,second,third,fourth), null] @AT@ 3107 @LENGTH@ 73
---------INS NullLiteral@@null @TO@ ClassInstanceCreation@@DelegatingHandlerMapping[Arrays.asList(first,second,third,fourth)] @AT@ 3187 @LENGTH@ 4


UPD TypeDeclaration@@[public]OAIPMHConsumer, DefaultScheduledPollConsumer @TO@ [public]OAIPMHConsumer, ScheduledPollConsumer @AT@ 1091 @LENGTH@ 1092
---UPD SimpleType@@DefaultScheduledPollConsumer @TO@ ScheduledPollConsumer @AT@ 1127 @LENGTH@ 28


UPD ExpressionStatement@@Assignment:exchange=new DefaultPooledExchange(fromEndpoint) @TO@ Assignment:exchange=createPooledExchange(fromEndpoint,autoRelease) @AT@ 3377 @LENGTH@ 51
---UPD Assignment@@exchange=new DefaultPooledExchange(fromEndpoint) @TO@ exchange=createPooledExchange(fromEndpoint,autoRelease) @AT@ 3377 @LENGTH@ 50
------INS MethodInvocation@@createPooledExchange(fromEndpoint,autoRelease) @TO@ Assignment@@exchange=new DefaultPooledExchange(fromEndpoint) @AT@ 3388 @LENGTH@ 47
---------INS SimpleName@@MethodName:createPooledExchange:[fromEndpoint, autoRelease] @TO@ MethodInvocation@@createPooledExchange(fromEndpoint,autoRelease) @AT@ 3388 @LENGTH@ 47
------------INS SimpleName@@fromEndpoint @TO@ SimpleName@@MethodName:createPooledExchange:[fromEndpoint, autoRelease] @AT@ 3409 @LENGTH@ 12
------------INS SimpleName@@autoRelease @TO@ SimpleName@@MethodName:createPooledExchange:[fromEndpoint, autoRelease] @AT@ 3423 @LENGTH@ 11
------DEL ClassInstanceCreation@@DefaultPooledExchange[fromEndpoint] @AT@ 3388 @LENGTH@ 39
---------DEL New@@new @AT@ 3388 @LENGTH@ 3
---------DEL SimpleType@@DefaultPooledExchange @AT@ 3392 @LENGTH@ 21
---------DEL SimpleName@@fromEndpoint @AT@ 3414 @LENGTH@ 12


UPD IfStatement@@if (puts > 0 || (i == 0 && !pattern.startsWith(this.pathSeparator))) {  buffer.append(this.pathSeparator);} @TO@ if (puts > 0 || i == 0 && !pattern.startsWith(this.pathSeparator)) {  buffer.append(this.pathSeparator);} @AT@ 16216 @LENGTH@ 143
---UPD InfixExpression@@puts > 0 || (i == 0 && !pattern.startsWith(this.pathSeparator)) @TO@ puts > 0 || i == 0 && !pattern.startsWith(this.pathSeparator) @AT@ 16220 @LENGTH@ 63
------DEL ParenthesizedExpression@@(i == 0 && !pattern.startsWith(this.pathSeparator)) @AT@ 16232 @LENGTH@ 51
------MOV InfixExpression@@i == 0 && !pattern.startsWith(this.pathSeparator) @TO@ InfixExpression@@puts > 0 || (i == 0 && !pattern.startsWith(this.pathSeparator)) @AT@ 16233 @LENGTH@ 49


DEL MethodDeclaration@@public, void, MethodName:setRollbackOnly,  @AT@ 1986 @LENGTH@ 62
---DEL Modifier@@public @AT@ 1986 @LENGTH@ 6
---DEL PrimitiveType@@void @AT@ 1993 @LENGTH@ 4
---DEL SimpleName@@MethodName:setRollbackOnly @AT@ 1998 @LENGTH@ 15
---DEL ExpressionStatement@@SuperMethodInvocation:super.setRollbackOnly() @AT@ 2021 @LENGTH@ 24
------DEL SuperMethodInvocation@@super.setRollbackOnly() @AT@ 2021 @LENGTH@ 23
---------DEL SimpleName@@MethodName:setRollbackOnly:[] @AT@ 2027 @LENGTH@ 15


INS MethodDeclaration@@public, void, MethodName:testIsDirectory, IOException,  @TO@ TypeDeclaration@@[@SuppressWarnings({"deprecation","ResultOfMethodCallIgnored"}), public]FileUtilsTestCase,  @AT@ 76440 @LENGTH@ 453
---INS Modifier@@public @TO@ MethodDeclaration@@public, void, MethodName:testIsDirectory, IOException,  @AT@ 76440 @LENGTH@ 6
---INS PrimitiveType@@void @TO@ MethodDeclaration@@public, void, MethodName:testIsDirectory, IOException,  @AT@ 76447 @LENGTH@ 4
---INS SimpleName@@MethodName:testIsDirectory @TO@ MethodDeclaration@@public, void, MethodName:testIsDirectory, IOException,  @AT@ 76452 @LENGTH@ 15
---INS SimpleType@@IOException @TO@ MethodDeclaration@@public, void, MethodName:testIsDirectory, IOException,  @AT@ 76477 @LENGTH@ 11
---INS ExpressionStatement@@MethodInvocation:assertFalse(FileUtils.isDirectory(null)) @TO@ MethodDeclaration@@public, void, MethodName:testIsDirectory, IOException,  @AT@ 76499 @LENGTH@ 41
------INS MethodInvocation@@assertFalse(FileUtils.isDirectory(null)) @TO@ ExpressionStatement@@MethodInvocation:assertFalse(FileUtils.isDirectory(null)) @AT@ 76499 @LENGTH@ 40
---------INS SimpleName@@MethodName:assertFalse:[FileUtils.isDirectory(null)] @TO@ MethodInvocation@@assertFalse(FileUtils.isDirectory(null)) @AT@ 76499 @LENGTH@ 40
------------INS MethodInvocation@@FileUtils.isDirectory(null) @TO@ SimpleName@@MethodName:assertFalse:[FileUtils.isDirectory(null)] @AT@ 76511 @LENGTH@ 27
---------------INS SimpleName@@Name:FileUtils @TO@ MethodInvocation@@FileUtils.isDirectory(null) @AT@ 76511 @LENGTH@ 9
---------------INS SimpleName@@MethodName:isDirectory:[null] @TO@ MethodInvocation@@FileUtils.isDirectory(null) @AT@ 76521 @LENGTH@ 17
------------------INS NullLiteral@@null @TO@ SimpleName@@MethodName:isDirectory:[null] @AT@ 76533 @LENGTH@ 4
---INS ExpressionStatement@@MethodInvocation:assertTrue(FileUtils.isDirectory(temporaryFolder)) @TO@ MethodDeclaration@@public, void, MethodName:testIsDirectory, IOException,  @AT@ 76550 @LENGTH@ 51
------INS MethodInvocation@@assertTrue(FileUtils.isDirectory(temporaryFolder)) @TO@ ExpressionStatement@@MethodInvocation:assertTrue(FileUtils.isDirectory(temporaryFolder)) @AT@ 76550 @LENGTH@ 50
---------INS SimpleName@@MethodName:assertTrue:[FileUtils.isDirectory(temporaryFolder)] @TO@ MethodInvocation@@assertTrue(FileUtils.isDirectory(temporaryFolder)) @AT@ 76550 @LENGTH@ 50
------------INS MethodInvocation@@FileUtils.isDirectory(temporaryFolder) @TO@ SimpleName@@MethodName:assertTrue:[FileUtils.isDirectory(temporaryFolder)] @AT@ 76561 @LENGTH@ 38
---------------INS SimpleName@@Name:FileUtils @TO@ MethodInvocation@@FileUtils.isDirectory(temporaryFolder) @AT@ 76561 @LENGTH@ 9
---------------INS SimpleName@@MethodName:isDirectory:[temporaryFolder] @TO@ MethodInvocation@@FileUtils.isDirectory(temporaryFolder) @AT@ 76571 @LENGTH@ 28
------------------INS SimpleName@@temporaryFolder @TO@ SimpleName@@MethodName:isDirectory:[temporaryFolder] @AT@ 76583 @LENGTH@ 15
---INS ExpressionStatement@@MethodInvocation:assertFalse(FileUtils.isDirectory(testFile1)) @TO@ MethodDeclaration@@public, void, MethodName:testIsDirectory, IOException,  @AT@ 76610 @LENGTH@ 46
------INS MethodInvocation@@assertFalse(FileUtils.isDirectory(testFile1)) @TO@ ExpressionStatement@@MethodInvocation:assertFalse(FileUtils.isDirectory(testFile1)) @AT@ 76610 @LENGTH@ 45
---------INS SimpleName@@MethodName:assertFalse:[FileUtils.isDirectory(testFile1)] @TO@ MethodInvocation@@assertFalse(FileUtils.isDirectory(testFile1)) @AT@ 76610 @LENGTH@ 45
------------INS MethodInvocation@@FileUtils.isDirectory(testFile1) @TO@ SimpleName@@MethodName:assertFalse:[FileUtils.isDirectory(testFile1)] @AT@ 76622 @LENGTH@ 32
---------------INS SimpleName@@Name:FileUtils @TO@ MethodInvocation@@FileUtils.isDirectory(testFile1) @AT@ 76622 @LENGTH@ 9
---------------INS SimpleName@@MethodName:isDirectory:[testFile1] @TO@ MethodInvocation@@FileUtils.isDirectory(testFile1) @AT@ 76632 @LENGTH@ 22
------------------INS SimpleName@@testFile1 @TO@ SimpleName@@MethodName:isDirectory:[testFile1] @AT@ 76644 @LENGTH@ 9
---INS VariableDeclarationStatement@@final Path tempDir=Files.createTempDirectory(getClass().getCanonicalName()); @TO@ MethodDeclaration@@public, void, MethodName:testIsDirectory, IOException,  @AT@ 76666 @LENGTH@ 78
------INS Modifier@@final @TO@ VariableDeclarationStatement@@final Path tempDir=Files.createTempDirectory(getClass().getCanonicalName()); @AT@ 76666 @LENGTH@ 5
------INS SimpleType@@Path @TO@ VariableDeclarationStatement@@final Path tempDir=Files.createTempDirectory(getClass().getCanonicalName()); @AT@ 76672 @LENGTH@ 4
------INS VariableDeclarationFragment@@tempDir=Files.createTempDirectory(getClass().getCanonicalName()) @TO@ VariableDeclarationStatement@@final Path tempDir=Files.createTempDirectory(getClass().getCanonicalName()); @AT@ 76677 @LENGTH@ 66
---------INS SimpleName@@tempDir @TO@ VariableDeclarationFragment@@tempDir=Files.createTempDirectory(getClass().getCanonicalName()) @AT@ 76677 @LENGTH@ 7
---------INS MethodInvocation@@Files.createTempDirectory(getClass().getCanonicalName()) @TO@ VariableDeclarationFragment@@tempDir=Files.createTempDirectory(getClass().getCanonicalName()) @AT@ 76687 @LENGTH@ 56
------------INS SimpleName@@Name:Files @TO@ MethodInvocation@@Files.createTempDirectory(getClass().getCanonicalName()) @AT@ 76687 @LENGTH@ 5
------------INS SimpleName@@MethodName:createTempDirectory:[getClass().getCanonicalName()] @TO@ MethodInvocation@@Files.createTempDirectory(getClass().getCanonicalName()) @AT@ 76693 @LENGTH@ 50
---------------INS MethodInvocation@@getClass().getCanonicalName() @TO@ SimpleName@@MethodName:createTempDirectory:[getClass().getCanonicalName()] @AT@ 76713 @LENGTH@ 29
------------------INS MethodInvocation@@MethodName:getClass:[] @TO@ MethodInvocation@@getClass().getCanonicalName() @AT@ 76713 @LENGTH@ 10
------------------INS SimpleName@@MethodName:getCanonicalName:[] @TO@ MethodInvocation@@getClass().getCanonicalName() @AT@ 76724 @LENGTH@ 18
---INS VariableDeclarationStatement@@final File tempDirAsFile=tempDir.toFile(); @TO@ MethodDeclaration@@public, void, MethodName:testIsDirectory, IOException,  @AT@ 76753 @LENGTH@ 44
------INS Modifier@@final @TO@ VariableDeclarationStatement@@final File tempDirAsFile=tempDir.toFile(); @AT@ 76753 @LENGTH@ 5
------INS SimpleType@@File @TO@ VariableDeclarationStatement@@final File tempDirAsFile=tempDir.toFile(); @AT@ 76759 @LENGTH@ 4
------INS VariableDeclarationFragment@@tempDirAsFile=tempDir.toFile() @TO@ VariableDeclarationStatement@@final File tempDirAsFile=tempDir.toFile(); @AT@ 76764 @LENGTH@ 32
---------INS SimpleName@@tempDirAsFile @TO@ VariableDeclarationFragment@@tempDirAsFile=tempDir.toFile() @AT@ 76764 @LENGTH@ 13
---------INS MethodInvocation@@tempDir.toFile() @TO@ VariableDeclarationFragment@@tempDirAsFile=tempDir.toFile() @AT@ 76780 @LENGTH@ 16
------------INS SimpleName@@Name:tempDir @TO@ MethodInvocation@@tempDir.toFile() @AT@ 76780 @LENGTH@ 7
------------INS SimpleName@@MethodName:toFile:[] @TO@ MethodInvocation@@tempDir.toFile() @AT@ 76788 @LENGTH@ 8
---INS ExpressionStatement@@MethodInvocation:Files.delete(tempDir) @TO@ MethodDeclaration@@public, void, MethodName:testIsDirectory, IOException,  @AT@ 76806 @LENGTH@ 22
------INS MethodInvocation@@Files.delete(tempDir) @TO@ ExpressionStatement@@MethodInvocation:Files.delete(tempDir) @AT@ 76806 @LENGTH@ 21
---------INS SimpleName@@Name:Files @TO@ MethodInvocation@@Files.delete(tempDir) @AT@ 76806 @LENGTH@ 5
---------INS SimpleName@@MethodName:delete:[tempDir] @TO@ MethodInvocation@@Files.delete(tempDir) @AT@ 76812 @LENGTH@ 15
------------INS SimpleName@@tempDir @TO@ SimpleName@@MethodName:delete:[tempDir] @AT@ 76819 @LENGTH@ 7
---INS ExpressionStatement@@MethodInvocation:assertFalse(FileUtils.isDirectory(tempDirAsFile)) @TO@ MethodDeclaration@@public, void, MethodName:testIsDirectory, IOException,  @AT@ 76837 @LENGTH@ 50
------INS MethodInvocation@@assertFalse(FileUtils.isDirectory(tempDirAsFile)) @TO@ ExpressionStatement@@MethodInvocation:assertFalse(FileUtils.isDirectory(tempDirAsFile)) @AT@ 76837 @LENGTH@ 49
---------INS SimpleName@@MethodName:assertFalse:[FileUtils.isDirectory(tempDirAsFile)] @TO@ MethodInvocation@@assertFalse(FileUtils.isDirectory(tempDirAsFile)) @AT@ 76837 @LENGTH@ 49
------------INS MethodInvocation@@FileUtils.isDirectory(tempDirAsFile) @TO@ SimpleName@@MethodName:assertFalse:[FileUtils.isDirectory(tempDirAsFile)] @AT@ 76849 @LENGTH@ 36
---------------INS SimpleName@@Name:FileUtils @TO@ MethodInvocation@@FileUtils.isDirectory(tempDirAsFile) @AT@ 76849 @LENGTH@ 9
---------------INS SimpleName@@MethodName:isDirectory:[tempDirAsFile] @TO@ MethodInvocation@@FileUtils.isDirectory(tempDirAsFile) @AT@ 76859 @LENGTH@ 26
------------------INS SimpleName@@tempDirAsFile @TO@ SimpleName@@MethodName:isDirectory:[tempDirAsFile] @AT@ 76871 @LENGTH@ 13


UPD ExpressionStatement@@MethodInvocation:service.setId(getContext().getUuidGenerator().generateUuid()) @TO@ MethodInvocation:service.setGeneratedId(getContext().getUuidGenerator().generateUuid()) @AT@ 18883 @LENGTH@ 62
---UPD MethodInvocation@@service.setId(getContext().getUuidGenerator().generateUuid()) @TO@ service.setGeneratedId(getContext().getUuidGenerator().generateUuid()) @AT@ 18883 @LENGTH@ 61
------UPD SimpleName@@MethodName:setId:[getContext().getUuidGenerator().generateUuid()] @TO@ MethodName:setGeneratedId:[getContext().getUuidGenerator().generateUuid()] @AT@ 18891 @LENGTH@ 53


INS MethodDeclaration@@public, static, String, MethodName:xmlEncode, String text,  @TO@ TypeDeclaration@@[public, final]JavadocHelper,  @AT@ 4498 @LENGTH@ 377
---INS Modifier@@public @TO@ MethodDeclaration@@public, static, String, MethodName:xmlEncode, String text,  @AT@ 4498 @LENGTH@ 6
---INS Modifier@@static @TO@ MethodDeclaration@@public, static, String, MethodName:xmlEncode, String text,  @AT@ 4505 @LENGTH@ 6
---INS SimpleType@@String @TO@ MethodDeclaration@@public, static, String, MethodName:xmlEncode, String text,  @AT@ 4512 @LENGTH@ 6
---INS SimpleName@@MethodName:xmlEncode @TO@ MethodDeclaration@@public, static, String, MethodName:xmlEncode, String text,  @AT@ 4519 @LENGTH@ 9
---INS SingleVariableDeclaration@@String text @TO@ MethodDeclaration@@public, static, String, MethodName:xmlEncode, String text,  @AT@ 4529 @LENGTH@ 11
------INS SimpleType@@String @TO@ SingleVariableDeclaration@@String text @AT@ 4529 @LENGTH@ 6
------INS SimpleName@@text @TO@ SingleVariableDeclaration@@String text @AT@ 4536 @LENGTH@ 4
---INS IfStatement@@if (text == null) {  return "";} @TO@ MethodDeclaration@@public, static, String, MethodName:xmlEncode, String text,  @AT@ 4552 @LENGTH@ 52
------INS InfixExpression@@text == null @TO@ IfStatement@@if (text == null) {  return "";} @AT@ 4556 @LENGTH@ 12
---------INS SimpleName@@text @TO@ InfixExpression@@text == null @AT@ 4556 @LENGTH@ 4
---------INS Operator@@== @TO@ InfixExpression@@text == null @AT@ 4560 @LENGTH@ 2
---------INS NullLiteral@@null @TO@ InfixExpression@@text == null @AT@ 4564 @LENGTH@ 4
------INS Block@@ThenBody:{  return "";} @TO@ IfStatement@@if (text == null) {  return "";} @AT@ 4570 @LENGTH@ 34
---------INS ReturnStatement@@StringLiteral:"" @TO@ Block@@ThenBody:{  return "";} @AT@ 4584 @LENGTH@ 10
------------INS StringLiteral@@"" @TO@ ReturnStatement@@StringLiteral:"" @AT@ 4591 @LENGTH@ 2
---INS ExpressionStatement@@Assignment:text=text.replace("&","&amp;") @TO@ MethodDeclaration@@public, static, String, MethodName:xmlEncode, String text,  @AT@ 4685 @LENGTH@ 34
------INS Assignment@@text=text.replace("&","&amp;") @TO@ ExpressionStatement@@Assignment:text=text.replace("&","&amp;") @AT@ 4685 @LENGTH@ 33
---------INS SimpleName@@text @TO@ Assignment@@text=text.replace("&","&amp;") @AT@ 4685 @LENGTH@ 4
---------INS Operator@@= @TO@ Assignment@@text=text.replace("&","&amp;") @AT@ 4689 @LENGTH@ 1
---------INS MethodInvocation@@text.replace("&","&amp;") @TO@ Assignment@@text=text.replace("&","&amp;") @AT@ 4692 @LENGTH@ 26
------------INS SimpleName@@Name:text @TO@ MethodInvocation@@text.replace("&","&amp;") @AT@ 4692 @LENGTH@ 4
------------INS SimpleName@@MethodName:replace:["&", "&amp;"] @TO@ MethodInvocation@@text.replace("&","&amp;") @AT@ 4697 @LENGTH@ 21
---------------INS StringLiteral@@"&" @TO@ SimpleName@@MethodName:replace:["&", "&amp;"] @AT@ 4705 @LENGTH@ 3
---------------INS StringLiteral@@"&amp;" @TO@ SimpleName@@MethodName:replace:["&", "&amp;"] @AT@ 4710 @LENGTH@ 7
---INS ExpressionStatement@@Assignment:text=text.replace("\"","&quot;") @TO@ MethodDeclaration@@public, static, String, MethodName:xmlEncode, String text,  @AT@ 4728 @LENGTH@ 36
------INS Assignment@@text=text.replace("\"","&quot;") @TO@ ExpressionStatement@@Assignment:text=text.replace("\"","&quot;") @AT@ 4728 @LENGTH@ 35
---------INS SimpleName@@text @TO@ Assignment@@text=text.replace("\"","&quot;") @AT@ 4728 @LENGTH@ 4
---------INS Operator@@= @TO@ Assignment@@text=text.replace("\"","&quot;") @AT@ 4732 @LENGTH@ 1
---------INS MethodInvocation@@text.replace("\"","&quot;") @TO@ Assignment@@text=text.replace("\"","&quot;") @AT@ 4735 @LENGTH@ 28
------------INS SimpleName@@Name:text @TO@ MethodInvocation@@text.replace("\"","&quot;") @AT@ 4735 @LENGTH@ 4
------------INS SimpleName@@MethodName:replace:["\"", "&quot;"] @TO@ MethodInvocation@@text.replace("\"","&quot;") @AT@ 4740 @LENGTH@ 23
---------------INS StringLiteral@@"\"" @TO@ SimpleName@@MethodName:replace:["\"", "&quot;"] @AT@ 4748 @LENGTH@ 4
---------------INS StringLiteral@@"&quot;" @TO@ SimpleName@@MethodName:replace:["\"", "&quot;"] @AT@ 4754 @LENGTH@ 8
---INS ExpressionStatement@@Assignment:text=text.replace("<","&lt;") @TO@ MethodDeclaration@@public, static, String, MethodName:xmlEncode, String text,  @AT@ 4773 @LENGTH@ 33
------INS Assignment@@text=text.replace("<","&lt;") @TO@ ExpressionStatement@@Assignment:text=text.replace("<","&lt;") @AT@ 4773 @LENGTH@ 32
---------INS SimpleName@@text @TO@ Assignment@@text=text.replace("<","&lt;") @AT@ 4773 @LENGTH@ 4
---------INS Operator@@= @TO@ Assignment@@text=text.replace("<","&lt;") @AT@ 4777 @LENGTH@ 1
---------INS MethodInvocation@@text.replace("<","&lt;") @TO@ Assignment@@text=text.replace("<","&lt;") @AT@ 4780 @LENGTH@ 25
------------INS SimpleName@@Name:text @TO@ MethodInvocation@@text.replace("<","&lt;") @AT@ 4780 @LENGTH@ 4
------------INS SimpleName@@MethodName:replace:["<", "&lt;"] @TO@ MethodInvocation@@text.replace("<","&lt;") @AT@ 4785 @LENGTH@ 20
---------------INS StringLiteral@@"<" @TO@ SimpleName@@MethodName:replace:["<", "&lt;"] @AT@ 4793 @LENGTH@ 3
---------------INS StringLiteral@@"&lt;" @TO@ SimpleName@@MethodName:replace:["<", "&lt;"] @AT@ 4798 @LENGTH@ 6
---INS ExpressionStatement@@Assignment:text=text.replace(">","&gt;") @TO@ MethodDeclaration@@public, static, String, MethodName:xmlEncode, String text,  @AT@ 4815 @LENGTH@ 33
------INS Assignment@@text=text.replace(">","&gt;") @TO@ ExpressionStatement@@Assignment:text=text.replace(">","&gt;") @AT@ 4815 @LENGTH@ 32
---------INS SimpleName@@text @TO@ Assignment@@text=text.replace(">","&gt;") @AT@ 4815 @LENGTH@ 4
---------INS Operator@@= @TO@ Assignment@@text=text.replace(">","&gt;") @AT@ 4819 @LENGTH@ 1
---------INS MethodInvocation@@text.replace(">","&gt;") @TO@ Assignment@@text=text.replace(">","&gt;") @AT@ 4822 @LENGTH@ 25
------------INS SimpleName@@Name:text @TO@ MethodInvocation@@text.replace(">","&gt;") @AT@ 4822 @LENGTH@ 4
------------INS SimpleName@@MethodName:replace:[">", "&gt;"] @TO@ MethodInvocation@@text.replace(">","&gt;") @AT@ 4827 @LENGTH@ 20
---------------INS StringLiteral@@">" @TO@ SimpleName@@MethodName:replace:[">", "&gt;"] @AT@ 4835 @LENGTH@ 3
---------------INS StringLiteral@@"&gt;" @TO@ SimpleName@@MethodName:replace:[">", "&gt;"] @AT@ 4840 @LENGTH@ 6
---INS ReturnStatement@@SimpleName:text @TO@ MethodDeclaration@@public, static, String, MethodName:xmlEncode, String text,  @AT@ 4857 @LENGTH@ 12
------INS SimpleName@@text @TO@ ReturnStatement@@SimpleName:text @AT@ 4864 @LENGTH@ 4


INS IfStatement@@if (bearerTokenError == null) {  return new OAuth2Error(OAuth2ErrorCodes.SERVER_ERROR,null,null);} @TO@ MethodDeclaration@@private, OAuth2Error, MethodName:readErrorFromWwwAuthenticate, HttpHeaders headers,  @AT@ 2897 @LENGTH@ 105
---INS InfixExpression@@bearerTokenError == null @TO@ IfStatement@@if (bearerTokenError == null) {  return new OAuth2Error(OAuth2ErrorCodes.SERVER_ERROR,null,null);} @AT@ 2901 @LENGTH@ 24
------INS SimpleName@@bearerTokenError @TO@ InfixExpression@@bearerTokenError == null @AT@ 2901 @LENGTH@ 16
------INS Operator@@== @TO@ InfixExpression@@bearerTokenError == null @AT@ 2917 @LENGTH@ 2
------INS NullLiteral@@null @TO@ InfixExpression@@bearerTokenError == null @AT@ 2921 @LENGTH@ 4
---INS Block@@ThenBody:{  return new OAuth2Error(OAuth2ErrorCodes.SERVER_ERROR,null,null);} @TO@ IfStatement@@if (bearerTokenError == null) {  return new OAuth2Error(OAuth2ErrorCodes.SERVER_ERROR,null,null);} @AT@ 2927 @LENGTH@ 75
------INS ReturnStatement@@ClassInstanceCreation:new OAuth2Error(OAuth2ErrorCodes.SERVER_ERROR,null,null) @TO@ Block@@ThenBody:{  return new OAuth2Error(OAuth2ErrorCodes.SERVER_ERROR,null,null);} @AT@ 2932 @LENGTH@ 66
---------INS ClassInstanceCreation@@OAuth2Error[OAuth2ErrorCodes.SERVER_ERROR, null, null] @TO@ ReturnStatement@@ClassInstanceCreation:new OAuth2Error(OAuth2ErrorCodes.SERVER_ERROR,null,null) @AT@ 2939 @LENGTH@ 58
------------INS New@@new @TO@ ClassInstanceCreation@@OAuth2Error[OAuth2ErrorCodes.SERVER_ERROR, null, null] @AT@ 2939 @LENGTH@ 3
------------INS SimpleType@@OAuth2Error @TO@ ClassInstanceCreation@@OAuth2Error[OAuth2ErrorCodes.SERVER_ERROR, null, null] @AT@ 2943 @LENGTH@ 11
------------INS QualifiedName@@OAuth2ErrorCodes.SERVER_ERROR @TO@ ClassInstanceCreation@@OAuth2Error[OAuth2ErrorCodes.SERVER_ERROR, null, null] @AT@ 2955 @LENGTH@ 29
---------------INS SimpleName@@OAuth2ErrorCodes @TO@ QualifiedName@@OAuth2ErrorCodes.SERVER_ERROR @AT@ 2955 @LENGTH@ 16
---------------INS SimpleName@@SERVER_ERROR @TO@ QualifiedName@@OAuth2ErrorCodes.SERVER_ERROR @AT@ 2972 @LENGTH@ 12
------------INS NullLiteral@@null @TO@ ClassInstanceCreation@@OAuth2Error[OAuth2ErrorCodes.SERVER_ERROR, null, null] @AT@ 2986 @LENGTH@ 4
------------INS NullLiteral@@null @TO@ ClassInstanceCreation@@OAuth2Error[OAuth2ErrorCodes.SERVER_ERROR, null, null] @AT@ 2992 @LENGTH@ 4


UPD ReturnStatement@@MethodInvocation:this.csrfTokenRepository.loadToken(exchange).switchIfEmpty(Mono.defer(() -> Mono.error(new CsrfException("CSRF Token has been associated to this client")))).filterWhen((expected) -> containsValidCsrfToken(exchange,expected)).switchIfEmpty(Mono.defer(() -> Mono.error(new CsrfException("Invalid CSRF Token")))).then() @TO@ MethodInvocation:this.csrfTokenRepository.loadToken(exchange).switchIfEmpty(Mono.defer(() -> Mono.error(new CsrfException("An expected CSRF token cannot be found")))).filterWhen((expected) -> containsValidCsrfToken(exchange,expected)).switchIfEmpty(Mono.defer(() -> Mono.error(new CsrfException("Invalid CSRF Token")))).then() @AT@ 5713 @LENGTH@ 347
---UPD MethodInvocation@@this.csrfTokenRepository.loadToken(exchange).switchIfEmpty(Mono.defer(() -> Mono.error(new CsrfException("CSRF Token has been associated to this client")))).filterWhen((expected) -> containsValidCsrfToken(exchange,expected)).switchIfEmpty(Mono.defer(() -> Mono.error(new CsrfException("Invalid CSRF Token")))).then() @TO@ this.csrfTokenRepository.loadToken(exchange).switchIfEmpty(Mono.defer(() -> Mono.error(new CsrfException("An expected CSRF token cannot be found")))).filterWhen((expected) -> containsValidCsrfToken(exchange,expected)).switchIfEmpty(Mono.defer(() -> Mono.error(new CsrfException("Invalid CSRF Token")))).then() @AT@ 5720 @LENGTH@ 339
------UPD MethodInvocation@@MethodName:switchIfEmpty:[Mono.defer(() -> Mono.error(new CsrfException("CSRF Token has been associated to this client")))] @TO@ MethodName:switchIfEmpty:[Mono.defer(() -> Mono.error(new CsrfException("An expected CSRF token cannot be found")))] @AT@ 5720 @LENGTH@ 168
---------UPD MethodInvocation@@Mono.defer(() -> Mono.error(new CsrfException("CSRF Token has been associated to this client"))) @TO@ Mono.defer(() -> Mono.error(new CsrfException("An expected CSRF token cannot be found"))) @AT@ 5784 @LENGTH@ 103
------------UPD SimpleName@@MethodName:defer:[() -> Mono.error(new CsrfException("CSRF Token has been associated to this client"))] @TO@ MethodName:defer:[() -> Mono.error(new CsrfException("An expected CSRF token cannot be found"))] @AT@ 5796 @LENGTH@ 91
---------------UPD LambdaExpression@@() -> Mono.error(new CsrfException("CSRF Token has been associated to this client")) @TO@ () -> Mono.error(new CsrfException("An expected CSRF token cannot be found")) @AT@ 5802 @LENGTH@ 84
------------------UPD MethodInvocation@@Mono.error(new CsrfException("CSRF Token has been associated to this client")) @TO@ Mono.error(new CsrfException("An expected CSRF token cannot be found")) @AT@ 5808 @LENGTH@ 78
---------------------UPD SimpleName@@MethodName:error:[new CsrfException("CSRF Token has been associated to this client")] @TO@ MethodName:error:[new CsrfException("An expected CSRF token cannot be found")] @AT@ 5813 @LENGTH@ 73
------------------------UPD ClassInstanceCreation@@CsrfException["CSRF Token has been associated to this client"] @TO@ CsrfException["An expected CSRF token cannot be found"] @AT@ 5819 @LENGTH@ 66
---------------------------UPD StringLiteral@@"CSRF Token has been associated to this client" @TO@ "An expected CSRF token cannot be found" @AT@ 5837 @LENGTH@ 47


UPD TypeDeclaration@@[@Sharded(shardKey={"value","nested.customName"}), static]WithShardKeyPoitingToNested,  @TO@ [@Sharded(shardKey={"value","nested.customName"}), static]WithShardKeyPointingToNested,  @AT@ 86080 @LENGTH@ 153
---UPD SimpleName@@ClassName:WithShardKeyPoitingToNested @TO@ ClassName:WithShardKeyPointingToNested @AT@ 86146 @LENGTH@ 27


UPD TryStatement@@try {  if (limit.isUnlimited()) {    return connection.getCluster().zrevrangeByLex(key,min,max);  }  return connection.getCluster().zrevrangeByLex(key,min,max,limit.getOffset(),limit.getCount());} catch (Exception ex) {  throw convertJedisAccessException(ex);} @TO@ try {  if (limit.isUnlimited()) {    return connection.getCluster().zrevrangeByLex(key,max,min);  }  return connection.getCluster().zrevrangeByLex(key,max,min,limit.getOffset(),limit.getCount());} catch (Exception ex) {  throw convertJedisAccessException(ex);} @AT@ 13901 @LENGTH@ 281
---UPD IfStatement@@if (limit.isUnlimited()) {  return connection.getCluster().zrevrangeByLex(key,min,max);} @TO@ if (limit.isUnlimited()) {  return connection.getCluster().zrevrangeByLex(key,max,min);} @AT@ 13910 @LENGTH@ 97
------UPD Block@@ThenBody:{  return connection.getCluster().zrevrangeByLex(key,min,max);} @TO@ ThenBody:{  return connection.getCluster().zrevrangeByLex(key,max,min);} @AT@ 13935 @LENGTH@ 72
---------UPD ReturnStatement@@MethodInvocation:connection.getCluster().zrevrangeByLex(key,min,max) @TO@ MethodInvocation:connection.getCluster().zrevrangeByLex(key,max,min) @AT@ 13941 @LENGTH@ 61
------------UPD MethodInvocation@@connection.getCluster().zrevrangeByLex(key,min,max) @TO@ connection.getCluster().zrevrangeByLex(key,max,min) @AT@ 13948 @LENGTH@ 53
---------------UPD SimpleName@@MethodName:zrevrangeByLex:[key, min, max] @TO@ MethodName:zrevrangeByLex:[key, max, min] @AT@ 13972 @LENGTH@ 29
------------------UPD SimpleName@@min @TO@ max @AT@ 13992 @LENGTH@ 3
------------------UPD SimpleName@@max @TO@ min @AT@ 13997 @LENGTH@ 3
---UPD ReturnStatement@@MethodInvocation:connection.getCluster().zrevrangeByLex(key,min,max,limit.getOffset(),limit.getCount()) @TO@ MethodInvocation:connection.getCluster().zrevrangeByLex(key,max,min,limit.getOffset(),limit.getCount()) @AT@ 14011 @LENGTH@ 98
------UPD MethodInvocation@@connection.getCluster().zrevrangeByLex(key,min,max,limit.getOffset(),limit.getCount()) @TO@ connection.getCluster().zrevrangeByLex(key,max,min,limit.getOffset(),limit.getCount()) @AT@ 14018 @LENGTH@ 90
---------UPD SimpleName@@MethodName:zrevrangeByLex:[key, min, max, limit.getOffset(), limit.getCount()] @TO@ MethodName:zrevrangeByLex:[key, max, min, limit.getOffset(), limit.getCount()] @AT@ 14042 @LENGTH@ 66
------------UPD SimpleName@@min @TO@ max @AT@ 14062 @LENGTH@ 3
------------UPD SimpleName@@max @TO@ min @AT@ 14067 @LENGTH@ 3


INS TryStatement@@try {  if (this.isEmptyInput) {    this.start=0;  } else {    this.reader.sync(split.getStart());    this.start=reader.tell();  }  this.stop=split.getStart() + split.getLength();  this.recordReaderID=new UID();  this.writerTimezone=extractWriterTimezoneFromMetadata(job,split,gdr);  this.writerProleptic=extractWriterProlepticFromMetadata(job,split,gdr);} catch (Exception e) {  if (this.reader != null) {    try {      this.reader.close();    } catch (    Exception closeException) {      if (closeException != e) {        e.addSuppressed(closeException);      }    }  }  throw e;} @TO@ MethodDeclaration@@public, voidMethodName:AvroGenericRecordReader, JobConf job, FileSplit split, Reporter reporter, IOException,  @AT@ 3606 @LENGTH@ 705
---INS IfStatement@@if (this.isEmptyInput) {  this.start=0;} else {  this.reader.sync(split.getStart());  this.start=reader.tell();} @TO@ TryStatement@@try {  if (this.isEmptyInput) {    this.start=0;  } else {    this.reader.sync(split.getStart());    this.start=reader.tell();  }  this.stop=split.getStart() + split.getLength();  this.recordReaderID=new UID();  this.writerTimezone=extractWriterTimezoneFromMetadata(job,split,gdr);  this.writerProleptic=extractWriterProlepticFromMetadata(job,split,gdr);} catch (Exception e) {  if (this.reader != null) {    try {      this.reader.close();    } catch (    Exception closeException) {      if (closeException != e) {        e.addSuppressed(closeException);      }    }  }  throw e;} @AT@ 3618 @LENGTH@ 151
------INS FieldAccess@@this.isEmptyInput @TO@ IfStatement@@if (this.isEmptyInput) {  this.start=0;} else {  this.reader.sync(split.getStart());  this.start=reader.tell();} @AT@ 3622 @LENGTH@ 17
---------INS ThisExpression@@this @TO@ FieldAccess@@this.isEmptyInput @AT@ 3622 @LENGTH@ 4
---------INS SimpleName@@isEmptyInput @TO@ FieldAccess@@this.isEmptyInput @AT@ 3627 @LENGTH@ 12
------INS Block@@ThenBody:{  this.start=0;} @TO@ IfStatement@@if (this.isEmptyInput) {  this.start=0;} else {  this.reader.sync(split.getStart());  this.start=reader.tell();} @AT@ 3641 @LENGTH@ 33
---------MOV ExpressionStatement@@Assignment:this.start=0 @TO@ Block@@ThenBody:{  this.start=0;} @AT@ 3434 @LENGTH@ 15
------INS Block@@ElseBody:{  this.reader.sync(split.getStart());  this.start=reader.tell();} @TO@ IfStatement@@if (this.isEmptyInput) {  this.start=0;} else {  this.reader.sync(split.getStart());  this.start=reader.tell();} @AT@ 3680 @LENGTH@ 89
---------MOV ExpressionStatement@@MethodInvocation:this.reader.sync(split.getStart()) @TO@ Block@@ElseBody:{  this.reader.sync(split.getStart());  this.start=reader.tell();} @AT@ 3627 @LENGTH@ 35
---------MOV ExpressionStatement@@Assignment:this.start=reader.tell() @TO@ Block@@ElseBody:{  this.reader.sync(split.getStart());  this.start=reader.tell();} @AT@ 3669 @LENGTH@ 27
---MOV ExpressionStatement@@Assignment:this.stop=split.getStart() + split.getLength() @TO@ TryStatement@@try {  if (this.isEmptyInput) {    this.start=0;  } else {    this.reader.sync(split.getStart());    this.start=reader.tell();  }  this.stop=split.getStart() + split.getLength();  this.recordReaderID=new UID();  this.writerTimezone=extractWriterTimezoneFromMetadata(job,split,gdr);  this.writerProleptic=extractWriterProlepticFromMetadata(job,split,gdr);} catch (Exception e) {  if (this.reader != null) {    try {      this.reader.close();    } catch (    Exception closeException) {      if (closeException != e) {        e.addSuppressed(closeException);      }    }  }  throw e;} @AT@ 3707 @LENGTH@ 49
---MOV ExpressionStatement@@Assignment:this.recordReaderID=new UID() @TO@ TryStatement@@try {  if (this.isEmptyInput) {    this.start=0;  } else {    this.reader.sync(split.getStart());    this.start=reader.tell();  }  this.stop=split.getStart() + split.getLength();  this.recordReaderID=new UID();  this.writerTimezone=extractWriterTimezoneFromMetadata(job,split,gdr);  this.writerProleptic=extractWriterProlepticFromMetadata(job,split,gdr);} catch (Exception e) {  if (this.reader != null) {    try {      this.reader.close();    } catch (    Exception closeException) {      if (closeException != e) {        e.addSuppressed(closeException);      }    }  }  throw e;} @AT@ 3761 @LENGTH@ 32
---MOV ExpressionStatement@@Assignment:this.writerTimezone=extractWriterTimezoneFromMetadata(job,split,gdr) @TO@ TryStatement@@try {  if (this.isEmptyInput) {    this.start=0;  } else {    this.reader.sync(split.getStart());    this.start=reader.tell();  }  this.stop=split.getStart() + split.getLength();  this.recordReaderID=new UID();  this.writerTimezone=extractWriterTimezoneFromMetadata(job,split,gdr);  this.writerProleptic=extractWriterProlepticFromMetadata(job,split,gdr);} catch (Exception e) {  if (this.reader != null) {    try {      this.reader.close();    } catch (    Exception closeException) {      if (closeException != e) {        e.addSuppressed(closeException);      }    }  }  throw e;} @AT@ 3799 @LENGTH@ 73
---MOV ExpressionStatement@@Assignment:this.writerProleptic=extractWriterProlepticFromMetadata(job,split,gdr) @TO@ TryStatement@@try {  if (this.isEmptyInput) {    this.start=0;  } else {    this.reader.sync(split.getStart());    this.start=reader.tell();  }  this.stop=split.getStart() + split.getLength();  this.recordReaderID=new UID();  this.writerTimezone=extractWriterTimezoneFromMetadata(job,split,gdr);  this.writerProleptic=extractWriterProlepticFromMetadata(job,split,gdr);} catch (Exception e) {  if (this.reader != null) {    try {      this.reader.close();    } catch (    Exception closeException) {      if (closeException != e) {        e.addSuppressed(closeException);      }    }  }  throw e;} @AT@ 3877 @LENGTH@ 75
---INS CatchClause@@catch (Exception e) {  if (this.reader != null) {    try {      this.reader.close();    } catch (    Exception closeException) {      if (closeException != e) {        e.addSuppressed(closeException);      }    }  }  throw e;} @TO@ TryStatement@@try {  if (this.isEmptyInput) {    this.start=0;  } else {    this.reader.sync(split.getStart());    this.start=reader.tell();  }  this.stop=split.getStart() + split.getLength();  this.recordReaderID=new UID();  this.writerTimezone=extractWriterTimezoneFromMetadata(job,split,gdr);  this.writerProleptic=extractWriterProlepticFromMetadata(job,split,gdr);} catch (Exception e) {  if (this.reader != null) {    try {      this.reader.close();    } catch (    Exception closeException) {      if (closeException != e) {        e.addSuppressed(closeException);      }    }  }  throw e;} @AT@ 4034 @LENGTH@ 277
------INS SingleVariableDeclaration@@Exception e @TO@ CatchClause@@catch (Exception e) {  if (this.reader != null) {    try {      this.reader.close();    } catch (    Exception closeException) {      if (closeException != e) {        e.addSuppressed(closeException);      }    }  }  throw e;} @AT@ 4041 @LENGTH@ 11
---------INS SimpleType@@Exception @TO@ SingleVariableDeclaration@@Exception e @AT@ 4041 @LENGTH@ 9
---------INS SimpleName@@e @TO@ SingleVariableDeclaration@@Exception e @AT@ 4051 @LENGTH@ 1
------INS IfStatement@@if (this.reader != null) {  try {    this.reader.close();  } catch (  Exception closeException) {    if (closeException != e) {      e.addSuppressed(closeException);    }  }} @TO@ CatchClause@@catch (Exception e) {  if (this.reader != null) {    try {      this.reader.close();    } catch (    Exception closeException) {      if (closeException != e) {        e.addSuppressed(closeException);      }    }  }  throw e;} @AT@ 4062 @LENGTH@ 228
---------INS InfixExpression@@this.reader != null @TO@ IfStatement@@if (this.reader != null) {  try {    this.reader.close();  } catch (  Exception closeException) {    if (closeException != e) {      e.addSuppressed(closeException);    }  }} @AT@ 4066 @LENGTH@ 19
------------INS FieldAccess@@this.reader @TO@ InfixExpression@@this.reader != null @AT@ 4066 @LENGTH@ 11
---------------INS ThisExpression@@this @TO@ FieldAccess@@this.reader @AT@ 4066 @LENGTH@ 4
---------------INS SimpleName@@reader @TO@ FieldAccess@@this.reader @AT@ 4071 @LENGTH@ 6
------------INS Operator@@!= @TO@ InfixExpression@@this.reader != null @AT@ 4077 @LENGTH@ 2
------------INS NullLiteral@@null @TO@ InfixExpression@@this.reader != null @AT@ 4081 @LENGTH@ 4
---------INS Block@@ThenBody:{  try {    this.reader.close();  } catch (  Exception closeException) {    if (closeException != e) {      e.addSuppressed(closeException);    }  }} @TO@ IfStatement@@if (this.reader != null) {  try {    this.reader.close();  } catch (  Exception closeException) {    if (closeException != e) {      e.addSuppressed(closeException);    }  }} @AT@ 4087 @LENGTH@ 203
------------INS TryStatement@@try {  this.reader.close();} catch (Exception closeException) {  if (closeException != e) {    e.addSuppressed(closeException);  }} @TO@ Block@@ThenBody:{  try {    this.reader.close();  } catch (  Exception closeException) {    if (closeException != e) {      e.addSuppressed(closeException);    }  }} @AT@ 4097 @LENGTH@ 185
---------------INS ExpressionStatement@@MethodInvocation:this.reader.close() @TO@ TryStatement@@try {  this.reader.close();} catch (Exception closeException) {  if (closeException != e) {    e.addSuppressed(closeException);  }} @AT@ 4113 @LENGTH@ 20
------------------INS MethodInvocation@@this.reader.close() @TO@ ExpressionStatement@@MethodInvocation:this.reader.close() @AT@ 4113 @LENGTH@ 19
---------------------INS FieldAccess@@this.reader @TO@ MethodInvocation@@this.reader.close() @AT@ 4113 @LENGTH@ 11
------------------------INS ThisExpression@@this @TO@ FieldAccess@@this.reader @AT@ 4113 @LENGTH@ 4
------------------------INS SimpleName@@reader @TO@ FieldAccess@@this.reader @AT@ 4118 @LENGTH@ 6
---------------------INS SimpleName@@MethodName:close:[] @TO@ MethodInvocation@@this.reader.close() @AT@ 4125 @LENGTH@ 7
---------------INS CatchClause@@catch (Exception closeException) {  if (closeException != e) {    e.addSuppressed(closeException);  }} @TO@ TryStatement@@try {  this.reader.close();} catch (Exception closeException) {  if (closeException != e) {    e.addSuppressed(closeException);  }} @AT@ 4144 @LENGTH@ 138
------------------INS SingleVariableDeclaration@@Exception closeException @TO@ CatchClause@@catch (Exception closeException) {  if (closeException != e) {    e.addSuppressed(closeException);  }} @AT@ 4151 @LENGTH@ 24
---------------------INS SimpleType@@Exception @TO@ SingleVariableDeclaration@@Exception closeException @AT@ 4151 @LENGTH@ 9
---------------------INS SimpleName@@closeException @TO@ SingleVariableDeclaration@@Exception closeException @AT@ 4161 @LENGTH@ 14
------------------INS IfStatement@@if (closeException != e) {  e.addSuppressed(closeException);} @TO@ CatchClause@@catch (Exception closeException) {  if (closeException != e) {    e.addSuppressed(closeException);  }} @AT@ 4189 @LENGTH@ 83
---------------------INS InfixExpression@@closeException != e @TO@ IfStatement@@if (closeException != e) {  e.addSuppressed(closeException);} @AT@ 4193 @LENGTH@ 19
------------------------INS SimpleName@@closeException @TO@ InfixExpression@@closeException != e @AT@ 4193 @LENGTH@ 14
------------------------INS Operator@@!= @TO@ InfixExpression@@closeException != e @AT@ 4207 @LENGTH@ 2
------------------------INS SimpleName@@e @TO@ InfixExpression@@closeException != e @AT@ 4211 @LENGTH@ 1
---------------------INS Block@@ThenBody:{  e.addSuppressed(closeException);} @TO@ IfStatement@@if (closeException != e) {  e.addSuppressed(closeException);} @AT@ 4214 @LENGTH@ 58
------------------------INS ExpressionStatement@@MethodInvocation:e.addSuppressed(closeException) @TO@ Block@@ThenBody:{  e.addSuppressed(closeException);} @AT@ 4228 @LENGTH@ 32
---------------------------INS MethodInvocation@@e.addSuppressed(closeException) @TO@ ExpressionStatement@@MethodInvocation:e.addSuppressed(closeException) @AT@ 4228 @LENGTH@ 31
------------------------------INS SimpleName@@Name:e @TO@ MethodInvocation@@e.addSuppressed(closeException) @AT@ 4228 @LENGTH@ 1
------------------------------INS SimpleName@@MethodName:addSuppressed:[closeException] @TO@ MethodInvocation@@e.addSuppressed(closeException) @AT@ 4230 @LENGTH@ 29
---------------------------------INS SimpleName@@closeException @TO@ SimpleName@@MethodName:addSuppressed:[closeException] @AT@ 4244 @LENGTH@ 14
------INS ThrowStatement@@SimpleName:e @TO@ CatchClause@@catch (Exception e) {  if (this.reader != null) {    try {      this.reader.close();    } catch (    Exception closeException) {      if (closeException != e) {        e.addSuppressed(closeException);      }    }  }  throw e;} @AT@ 4297 @LENGTH@ 8
---------INS SimpleName@@e @TO@ ThrowStatement@@SimpleName:e @AT@ 4303 @LENGTH@ 1


UPD IfStatement@@if (finalCandidates.size() > 1 && !mapAccessor.containsKey(Constants.NAME_OF_IS_PATH_SEGMENT)) {  throw new MappingException("More than one matching node in the record.");} else if (!finalCandidates.isEmpty()) {  if (mapAccessor.size() > 1) {    queryRoot=mergeRootNodeWithRecord(finalCandidates.get(0),mapAccessor);  } else {    queryRoot=finalCandidates.get(0);  }} else {  for (  Value value : recordValues) {    if (value.hasType(mapType) && !(value.hasType(nodeType) || value.hasType(relationshipType))) {      queryRoot=value;      break;    }  }} @TO@ if (finalCandidates.size() > 1) {  throw new MappingException("More than one matching node in the record.");} else if (!finalCandidates.isEmpty()) {  if (mapAccessor.size() > 1) {    queryRoot=mergeRootNodeWithRecord(finalCandidates.get(0),mapAccessor);  } else {    queryRoot=finalCandidates.get(0);  }} else {  for (  Value value : recordValues) {    if (value.hasType(mapType) && !(value.hasType(nodeType) || value.hasType(relationshipType))) {      queryRoot=value;      break;    }  }} @AT@ 5790 @LENGTH@ 590
---DEL InfixExpression@@finalCandidates.size() > 1 && !mapAccessor.containsKey(Constants.NAME_OF_IS_PATH_SEGMENT) @AT@ 5794 @LENGTH@ 89
------DEL Operator@@&& @AT@ 5820 @LENGTH@ 2
------DEL PrefixExpression@@!mapAccessor.containsKey(Constants.NAME_OF_IS_PATH_SEGMENT) @AT@ 5824 @LENGTH@ 59
---------DEL Operator@@! @AT@ 5824 @LENGTH@ 1
---------DEL MethodInvocation@@mapAccessor.containsKey(Constants.NAME_OF_IS_PATH_SEGMENT) @AT@ 5825 @LENGTH@ 58
------------DEL SimpleName@@Name:mapAccessor @AT@ 5825 @LENGTH@ 11
------------DEL SimpleName@@MethodName:containsKey:[Constants.NAME_OF_IS_PATH_SEGMENT] @AT@ 5837 @LENGTH@ 46
---------------DEL QualifiedName@@Constants.NAME_OF_IS_PATH_SEGMENT @AT@ 5849 @LENGTH@ 33
------------------DEL SimpleName@@Constants @AT@ 5849 @LENGTH@ 9
------------------DEL SimpleName@@NAME_OF_IS_PATH_SEGMENT @AT@ 5859 @LENGTH@ 23
---MOV InfixExpression@@finalCandidates.size() > 1 @TO@ IfStatement@@if (finalCandidates.size() > 1 && !mapAccessor.containsKey(Constants.NAME_OF_IS_PATH_SEGMENT)) {  throw new MappingException("More than one matching node in the record.");} else if (!finalCandidates.isEmpty()) {  if (mapAccessor.size() > 1) {    queryRoot=mergeRootNodeWithRecord(finalCandidates.get(0),mapAccessor);  } else {    queryRoot=finalCandidates.get(0);  }} else {  for (  Value value : recordValues) {    if (value.hasType(mapType) && !(value.hasType(nodeType) || value.hasType(relationshipType))) {      queryRoot=value;      break;    }  }} @AT@ 5794 @LENGTH@ 26


UPD ExpressionStatement@@MethodInvocation:parameters.put(Constants.NAME_OF_VERSION_PARAM,versionProperty - 1) @TO@ MethodInvocation:parameters.put(Constants.NAME_OF_VERSION_PARAM,versionProperty) @AT@ 8449 @LENGTH@ 69
---UPD MethodInvocation@@parameters.put(Constants.NAME_OF_VERSION_PARAM,versionProperty - 1) @TO@ parameters.put(Constants.NAME_OF_VERSION_PARAM,versionProperty) @AT@ 8449 @LENGTH@ 68
------UPD SimpleName@@MethodName:put:[Constants.NAME_OF_VERSION_PARAM, versionProperty - 1] @TO@ MethodName:put:[Constants.NAME_OF_VERSION_PARAM, versionProperty] @AT@ 8460 @LENGTH@ 57
---------DEL InfixExpression@@versionProperty - 1 @AT@ 8497 @LENGTH@ 19
------------DEL SimpleName@@versionProperty @AT@ 8497 @LENGTH@ 15
------------DEL Operator@@- @AT@ 8512 @LENGTH@ 1
------------DEL NumberLiteral@@1 @AT@ 8515 @LENGTH@ 1
---------INS SimpleName@@versionProperty @TO@ SimpleName@@MethodName:put:[Constants.NAME_OF_VERSION_PARAM, versionProperty - 1] @AT@ 8522 @LENGTH@ 15


UPD FieldDeclaration@@protected, AvailablePortFinder.Port[], [ports] @TO@ private, AvailablePortFinder.Port[], [ports] @AT@ 1763 @LENGTH@ 43
---UPD Modifier@@protected @TO@ private @AT@ 1763 @LENGTH@ 9


UPD FieldDeclaration@@private, E, [last=null] @TO@ private, E, [last] @AT@ 13059 @LENGTH@ 22
---UPD VariableDeclarationFragment@@last=null @TO@ last @AT@ 13069 @LENGTH@ 11
------DEL NullLiteral@@null @AT@ 13076 @LENGTH@ 4


UPD ExpressionStatement@@MethodInvocation:log.info("#{} size {}",total,size) @TO@ MethodInvocation:log.debug("#{} size {}",total,size) @AT@ 2397 @LENGTH@ 37
---UPD MethodInvocation@@log.info("#{} size {}",total,size) @TO@ log.debug("#{} size {}",total,size) @AT@ 2397 @LENGTH@ 36
------UPD SimpleName@@MethodName:info:["#{} size {}", total, size] @TO@ MethodName:debug:["#{} size {}", total, size] @AT@ 2401 @LENGTH@ 32


UPD MethodDeclaration@@public, void, MethodName:testisEmptyDirectory, IOException,  @TO@ public, void, MethodName:testIsEmptyDirectory, IOException,  @AT@ 2018 @LENGTH@ 371
---UPD SimpleName@@MethodName:testisEmptyDirectory @TO@ MethodName:testIsEmptyDirectory @AT@ 2030 @LENGTH@ 20


UPD VariableDeclarationStatement@@WarehouseInstance.Tuple tuple=primary.run("use " + primaryDbName).run("create external table t1 (id int)").run("insert into table t1 values (100)").run("create table t2 (id int)").run("insert into table t2 values (200)").dump(primaryDbName + ".'t[0-9]+'",null,withClauseOptions); @TO@ WarehouseInstance.Tuple tuple=primary.run("use " + primaryDbName).run("create external table t1 (id int)").run("insert into table t1 values (100)").run("create table t2 (id int)").run("insert into table t2 values (200)").dump(primaryDbName + ".'t[0-9]+'",withClauseOptions); @AT@ 5226 @LENGTH@ 360
---UPD VariableDeclarationFragment@@tuple=primary.run("use " + primaryDbName).run("create external table t1 (id int)").run("insert into table t1 values (100)").run("create table t2 (id int)").run("insert into table t2 values (200)").dump(primaryDbName + ".'t[0-9]+'",null,withClauseOptions) @TO@ tuple=primary.run("use " + primaryDbName).run("create external table t1 (id int)").run("insert into table t1 values (100)").run("create table t2 (id int)").run("insert into table t2 values (200)").dump(primaryDbName + ".'t[0-9]+'",withClauseOptions) @AT@ 5250 @LENGTH@ 335
------UPD MethodInvocation@@primary.run("use " + primaryDbName).run("create external table t1 (id int)").run("insert into table t1 values (100)").run("create table t2 (id int)").run("insert into table t2 values (200)").dump(primaryDbName + ".'t[0-9]+'",null,withClauseOptions) @TO@ primary.run("use " + primaryDbName).run("create external table t1 (id int)").run("insert into table t1 values (100)").run("create table t2 (id int)").run("insert into table t2 values (200)").dump(primaryDbName + ".'t[0-9]+'",withClauseOptions) @AT@ 5258 @LENGTH@ 327
---------UPD SimpleName@@MethodName:dump:[primaryDbName + ".'t[0-9]+'", null, withClauseOptions] @TO@ MethodName:dump:[primaryDbName + ".'t[0-9]+'", withClauseOptions] @AT@ 5527 @LENGTH@ 58
------------DEL NullLiteral@@null @AT@ 5561 @LENGTH@ 4


UPD TryStatement@@try (InputStream inputReader1=IOUtils.toInputStream(STRINGS[i],DEFAULT_CHARSET);InputStream inputReader2=IOUtils.toInputStream(STRINGS[j],DEFAULT_CHARSET)){  blackhole.consume(contentEquals_release_2_8_0(inputReader1,inputReader2));}  @TO@ try (InputStream inputStream1=IOUtils.toInputStream(STRINGS[i],DEFAULT_CHARSET);InputStream inputStream2=IOUtils.toInputStream(STRINGS[j],DEFAULT_CHARSET)){  blackhole.consume(contentEquals_release_2_8_0(inputStream1,inputStream2));}  @AT@ 10340 @LENGTH@ 298
---UPD VariableDeclarationExpression@@InputStream inputReader1=IOUtils.toInputStream(STRINGS[i],DEFAULT_CHARSET) @TO@ InputStream inputStream1=IOUtils.toInputStream(STRINGS[i],DEFAULT_CHARSET) @AT@ 10345 @LENGTH@ 77
------UPD VariableDeclarationFragment@@inputReader1=IOUtils.toInputStream(STRINGS[i],DEFAULT_CHARSET) @TO@ inputStream1=IOUtils.toInputStream(STRINGS[i],DEFAULT_CHARSET) @AT@ 10357 @LENGTH@ 65
---------UPD SimpleName@@inputReader1 @TO@ inputStream1 @AT@ 10357 @LENGTH@ 12
---UPD VariableDeclarationExpression@@InputStream inputReader2=IOUtils.toInputStream(STRINGS[j],DEFAULT_CHARSET) @TO@ InputStream inputStream2=IOUtils.toInputStream(STRINGS[j],DEFAULT_CHARSET) @AT@ 10444 @LENGTH@ 77
------UPD VariableDeclarationFragment@@inputReader2=IOUtils.toInputStream(STRINGS[j],DEFAULT_CHARSET) @TO@ inputStream2=IOUtils.toInputStream(STRINGS[j],DEFAULT_CHARSET) @AT@ 10456 @LENGTH@ 65
---------UPD SimpleName@@inputReader2 @TO@ inputStream2 @AT@ 10456 @LENGTH@ 12
---UPD ExpressionStatement@@MethodInvocation:blackhole.consume(contentEquals_release_2_8_0(inputReader1,inputReader2)) @TO@ MethodInvocation:blackhole.consume(contentEquals_release_2_8_0(inputStream1,inputStream2)) @AT@ 10545 @LENGTH@ 75
------UPD MethodInvocation@@blackhole.consume(contentEquals_release_2_8_0(inputReader1,inputReader2)) @TO@ blackhole.consume(contentEquals_release_2_8_0(inputStream1,inputStream2)) @AT@ 10545 @LENGTH@ 74
---------UPD SimpleName@@MethodName:consume:[contentEquals_release_2_8_0(inputReader1,inputReader2)] @TO@ MethodName:consume:[contentEquals_release_2_8_0(inputStream1,inputStream2)] @AT@ 10555 @LENGTH@ 64
------------UPD MethodInvocation@@contentEquals_release_2_8_0(inputReader1,inputReader2) @TO@ contentEquals_release_2_8_0(inputStream1,inputStream2) @AT@ 10563 @LENGTH@ 55
---------------UPD SimpleName@@MethodName:contentEquals_release_2_8_0:[inputReader1, inputReader2] @TO@ MethodName:contentEquals_release_2_8_0:[inputStream1, inputStream2] @AT@ 10563 @LENGTH@ 55
------------------UPD SimpleName@@inputReader1 @TO@ inputStream1 @AT@ 10591 @LENGTH@ 12
------------------UPD SimpleName@@inputReader2 @TO@ inputStream2 @AT@ 10605 @LENGTH@ 12


INS MethodDeclaration@@public, String, MethodName:getDelim,  @TO@ TypeDeclaration@@[public, final]Scanner, [Iterator<String>, Closeable] @AT@ 5222 @LENGTH@ 71
---INS Modifier@@public @TO@ MethodDeclaration@@public, String, MethodName:getDelim,  @AT@ 5222 @LENGTH@ 6
---INS SimpleType@@String @TO@ MethodDeclaration@@public, String, MethodName:getDelim,  @AT@ 5229 @LENGTH@ 6
---INS SimpleName@@MethodName:getDelim @TO@ MethodDeclaration@@public, String, MethodName:getDelim,  @AT@ 5236 @LENGTH@ 8
---INS ReturnStatement@@MethodInvocation:delimPattern.pattern() @TO@ MethodDeclaration@@public, String, MethodName:getDelim,  @AT@ 5257 @LENGTH@ 30
------INS MethodInvocation@@delimPattern.pattern() @TO@ ReturnStatement@@MethodInvocation:delimPattern.pattern() @AT@ 5264 @LENGTH@ 22
---------INS SimpleName@@Name:delimPattern @TO@ MethodInvocation@@delimPattern.pattern() @AT@ 5264 @LENGTH@ 12
---------INS SimpleName@@MethodName:pattern:[] @TO@ MethodInvocation@@delimPattern.pattern() @AT@ 5277 @LENGTH@ 9


UPD MethodDeclaration@@public, void, MethodName:testCalculateRawEncodingAdditonalUTF16, IOException,  @TO@ public, void, MethodName:testCalculateRawEncodingAdditionalUTF16, IOException,  @AT@ 8758 @LENGTH@ 960
---UPD SimpleName@@MethodName:testCalculateRawEncodingAdditonalUTF16 @TO@ MethodName:testCalculateRawEncodingAdditionalUTF16 @AT@ 8770 @LENGTH@ 38


UPD VariableDeclarationStatement@@ReactiveNeo4jClient.MappingSpec<T> mappingSpec=this.neo4jClient.query(renderer.render(GenericQueryAndParameters.STATEMENT)).bindAll(genericQueryAndParameters.getParameters()).fetchAs(resultType); @TO@ ReactiveNeo4jClient.MappingSpec<T> mappingSpec=this.neo4jClient.query(renderer.render(queryFragments.generateGenericStatement())).bindAll(genericQueryAndParameters.getParameters()).fetchAs(resultType); @AT@ 32582 @LENGTH@ 208
---UPD VariableDeclarationFragment@@mappingSpec=this.neo4jClient.query(renderer.render(GenericQueryAndParameters.STATEMENT)).bindAll(genericQueryAndParameters.getParameters()).fetchAs(resultType) @TO@ mappingSpec=this.neo4jClient.query(renderer.render(queryFragments.generateGenericStatement())).bindAll(genericQueryAndParameters.getParameters()).fetchAs(resultType) @AT@ 32617 @LENGTH@ 172
------UPD MethodInvocation@@this.neo4jClient.query(renderer.render(GenericQueryAndParameters.STATEMENT)).bindAll(genericQueryAndParameters.getParameters()).fetchAs(resultType) @TO@ this.neo4jClient.query(renderer.render(queryFragments.generateGenericStatement())).bindAll(genericQueryAndParameters.getParameters()).fetchAs(resultType) @AT@ 32631 @LENGTH@ 158
---------UPD MethodInvocation@@MethodName:query:[renderer.render(GenericQueryAndParameters.STATEMENT)] @TO@ MethodName:query:[renderer.render(queryFragments.generateGenericStatement())] @AT@ 32631 @LENGTH@ 76
------------UPD MethodInvocation@@renderer.render(GenericQueryAndParameters.STATEMENT) @TO@ renderer.render(queryFragments.generateGenericStatement()) @AT@ 32654 @LENGTH@ 52
---------------UPD SimpleName@@MethodName:render:[GenericQueryAndParameters.STATEMENT] @TO@ MethodName:render:[queryFragments.generateGenericStatement()] @AT@ 32663 @LENGTH@ 43
------------------DEL QualifiedName@@GenericQueryAndParameters.STATEMENT @AT@ 32670 @LENGTH@ 35
---------------------DEL SimpleName@@GenericQueryAndParameters @AT@ 32670 @LENGTH@ 25
---------------------DEL SimpleName@@STATEMENT @AT@ 32696 @LENGTH@ 9
------------------INS MethodInvocation@@queryFragments.generateGenericStatement() @TO@ SimpleName@@MethodName:render:[GenericQueryAndParameters.STATEMENT] @AT@ 32676 @LENGTH@ 41
---------------------INS SimpleName@@Name:queryFragments @TO@ MethodInvocation@@queryFragments.generateGenericStatement() @AT@ 32676 @LENGTH@ 14
---------------------INS SimpleName@@MethodName:generateGenericStatement:[] @TO@ MethodInvocation@@queryFragments.generateGenericStatement() @AT@ 32691 @LENGTH@ 26


UPD MethodDeclaration@@private, boolean, MethodName:isEqual, Object left, Object right,  @TO@ private, boolean, MethodName:isEqual, @Nullable Object left, @Nullable Object right,  @AT@ 29081 @LENGTH@ 1792
---UPD SingleVariableDeclaration@@Object left @TO@ @Nullable Object left @AT@ 29105 @LENGTH@ 11
---UPD SingleVariableDeclaration@@Object right @TO@ @Nullable Object right @AT@ 29118 @LENGTH@ 12
---UPD IfStatement@@if (left instanceof Document) {  if (!(right instanceof Document)) {    return false;  }  Document leftDocument=(Document)left;  Document rightDocument=(Document)right;  Iterator leftIterator=leftDocument.entrySet().iterator();  Iterator rightIterator=rightDocument.entrySet().iterator();  while (leftIterator.hasNext() && rightIterator.hasNext()) {    Map.Entry leftEntry=(Map.Entry)leftIterator.next();    Map.Entry rightEntry=(Map.Entry)rightIterator.next();    if (!isEqual(leftEntry.getKey(),rightEntry.getKey())) {      return false;    }    if (!isEqual(leftEntry.getValue(),rightEntry.getValue())) {      return false;    }  }  return !leftIterator.hasNext() && !rightIterator.hasNext();} @TO@ if (left instanceof Document) {  if (!(right instanceof Document)) {    return false;  }  Document leftDocument=(Document)left;  Document rightDocument=(Document)right;  Iterator<Entry<String,Object>> leftIterator=leftDocument.entrySet().iterator();  Iterator<Entry<String,Object>> rightIterator=rightDocument.entrySet().iterator();  while (leftIterator.hasNext() && rightIterator.hasNext()) {    Map.Entry<String,Object> leftEntry=leftIterator.next();    Map.Entry<String,Object> rightEntry=rightIterator.next();    if (!isEqual(leftEntry.getKey(),rightEntry.getKey()) || !isEqual(leftEntry.getValue(),rightEntry.getValue())) {      return false;    }  }  return !leftIterator.hasNext() && !rightIterator.hasNext();} @AT@ 29494 @LENGTH@ 741
------UPD Block@@ThenBody:{  if (!(right instanceof Document)) {    return false;  }  Document leftDocument=(Document)left;  Document rightDocument=(Document)right;  Iterator leftIterator=leftDocument.entrySet().iterator();  Iterator rightIterator=rightDocument.entrySet().iterator();  while (leftIterator.hasNext() && rightIterator.hasNext()) {    Map.Entry leftEntry=(Map.Entry)leftIterator.next();    Map.Entry rightEntry=(Map.Entry)rightIterator.next();    if (!isEqual(leftEntry.getKey(),rightEntry.getKey())) {      return false;    }    if (!isEqual(leftEntry.getValue(),rightEntry.getValue())) {      return false;    }  }  return !leftIterator.hasNext() && !rightIterator.hasNext();} @TO@ ThenBody:{  if (!(right instanceof Document)) {    return false;  }  Document leftDocument=(Document)left;  Document rightDocument=(Document)right;  Iterator<Entry<String,Object>> leftIterator=leftDocument.entrySet().iterator();  Iterator<Entry<String,Object>> rightIterator=rightDocument.entrySet().iterator();  while (leftIterator.hasNext() && rightIterator.hasNext()) {    Map.Entry<String,Object> leftEntry=leftIterator.next();    Map.Entry<String,Object> rightEntry=rightIterator.next();    if (!isEqual(leftEntry.getKey(),rightEntry.getKey()) || !isEqual(leftEntry.getValue(),rightEntry.getValue())) {      return false;    }  }  return !leftIterator.hasNext() && !rightIterator.hasNext();} @AT@ 29524 @LENGTH@ 711
---------UPD VariableDeclarationStatement@@Iterator leftIterator=leftDocument.entrySet().iterator(); @TO@ Iterator<Entry<String,Object>> leftIterator=leftDocument.entrySet().iterator(); @AT@ 29681 @LENGTH@ 59
------------DEL SimpleType@@Iterator @AT@ 29681 @LENGTH@ 8
------------INS ParameterizedType@@Iterator<Entry<String,Object>> @TO@ VariableDeclarationStatement@@Iterator leftIterator=leftDocument.entrySet().iterator(); @AT@ 29703 @LENGTH@ 31
---------------INS SimpleType@@Iterator @TO@ ParameterizedType@@Iterator<Entry<String,Object>> @AT@ 29703 @LENGTH@ 8
---------------INS ParameterizedType@@Entry<String,Object> @TO@ ParameterizedType@@Iterator<Entry<String,Object>> @AT@ 29712 @LENGTH@ 21
------------------INS SimpleType@@Entry @TO@ ParameterizedType@@Entry<String,Object> @AT@ 29712 @LENGTH@ 5
------------------INS SimpleType@@String @TO@ ParameterizedType@@Entry<String,Object> @AT@ 29718 @LENGTH@ 6
------------------INS SimpleType@@Object @TO@ ParameterizedType@@Entry<String,Object> @AT@ 29726 @LENGTH@ 6
---------UPD VariableDeclarationStatement@@Iterator rightIterator=rightDocument.entrySet().iterator(); @TO@ Iterator<Entry<String,Object>> rightIterator=rightDocument.entrySet().iterator(); @AT@ 29744 @LENGTH@ 61
------------DEL SimpleType@@Iterator @AT@ 29744 @LENGTH@ 8
------------INS ParameterizedType@@Iterator<Entry<String,Object>> @TO@ VariableDeclarationStatement@@Iterator rightIterator=rightDocument.entrySet().iterator(); @AT@ 29789 @LENGTH@ 31
---------------INS SimpleType@@Iterator @TO@ ParameterizedType@@Iterator<Entry<String,Object>> @AT@ 29789 @LENGTH@ 8
---------------INS ParameterizedType@@Entry<String,Object> @TO@ ParameterizedType@@Iterator<Entry<String,Object>> @AT@ 29798 @LENGTH@ 21
------------------INS SimpleType@@Entry @TO@ ParameterizedType@@Entry<String,Object> @AT@ 29798 @LENGTH@ 5
------------------INS SimpleType@@String @TO@ ParameterizedType@@Entry<String,Object> @AT@ 29804 @LENGTH@ 6
------------------INS SimpleType@@Object @TO@ ParameterizedType@@Entry<String,Object> @AT@ 29812 @LENGTH@ 6
---------UPD WhileStatement@@while (leftIterator.hasNext() && rightIterator.hasNext()) {  Map.Entry leftEntry=(Map.Entry)leftIterator.next();  Map.Entry rightEntry=(Map.Entry)rightIterator.next();  if (!isEqual(leftEntry.getKey(),rightEntry.getKey())) {    return false;  }  if (!isEqual(leftEntry.getValue(),rightEntry.getValue())) {    return false;  }} @TO@ while (leftIterator.hasNext() && rightIterator.hasNext()) {  Map.Entry<String,Object> leftEntry=leftIterator.next();  Map.Entry<String,Object> rightEntry=rightIterator.next();  if (!isEqual(leftEntry.getKey(),rightEntry.getKey()) || !isEqual(leftEntry.getValue(),rightEntry.getValue())) {    return false;  }} @AT@ 29810 @LENGTH@ 358
------------UPD Block@@WhileBody:{  Map.Entry leftEntry=(Map.Entry)leftIterator.next();  Map.Entry rightEntry=(Map.Entry)rightIterator.next();  if (!isEqual(leftEntry.getKey(),rightEntry.getKey())) {    return false;  }  if (!isEqual(leftEntry.getValue(),rightEntry.getValue())) {    return false;  }} @TO@ WhileBody:{  Map.Entry<String,Object> leftEntry=leftIterator.next();  Map.Entry<String,Object> rightEntry=rightIterator.next();  if (!isEqual(leftEntry.getKey(),rightEntry.getKey()) || !isEqual(leftEntry.getValue(),rightEntry.getValue())) {    return false;  }} @AT@ 29868 @LENGTH@ 300
---------------UPD VariableDeclarationStatement@@Map.Entry leftEntry=(Map.Entry)leftIterator.next(); @TO@ Map.Entry<String,Object> leftEntry=leftIterator.next(); @AT@ 29874 @LENGTH@ 53
------------------DEL SimpleType@@Map.Entry @AT@ 29874 @LENGTH@ 9
------------------UPD VariableDeclarationFragment@@leftEntry=(Map.Entry)leftIterator.next() @TO@ leftEntry=leftIterator.next() @AT@ 29884 @LENGTH@ 42
---------------------DEL CastExpression@@(Map.Entry)leftIterator.next() @AT@ 29896 @LENGTH@ 30
------------------------DEL SimpleType@@Map.Entry @AT@ 29897 @LENGTH@ 9
------------------------DEL MethodInvocation@@leftIterator.next() @AT@ 29907 @LENGTH@ 19
---------------------INS MethodInvocation@@leftIterator.next() @TO@ VariableDeclarationFragment@@leftEntry=(Map.Entry)leftIterator.next() @AT@ 29981 @LENGTH@ 19
------------------------MOV SimpleName@@Name:leftIterator @TO@ MethodInvocation@@leftIterator.next() @AT@ 29907 @LENGTH@ 12
------------------------MOV SimpleName@@MethodName:next:[] @TO@ MethodInvocation@@leftIterator.next() @AT@ 29920 @LENGTH@ 6
------------------INS ParameterizedType@@Map.Entry<String,Object> @TO@ VariableDeclarationStatement@@Map.Entry leftEntry=(Map.Entry)leftIterator.next(); @AT@ 29943 @LENGTH@ 25
---------------------INS SimpleType@@Map.Entry @TO@ ParameterizedType@@Map.Entry<String,Object> @AT@ 29943 @LENGTH@ 9
---------------------INS SimpleType@@String @TO@ ParameterizedType@@Map.Entry<String,Object> @AT@ 29953 @LENGTH@ 6
---------------------INS SimpleType@@Object @TO@ ParameterizedType@@Map.Entry<String,Object> @AT@ 29961 @LENGTH@ 6
---------------UPD VariableDeclarationStatement@@Map.Entry rightEntry=(Map.Entry)rightIterator.next(); @TO@ Map.Entry<String,Object> rightEntry=rightIterator.next(); @AT@ 29932 @LENGTH@ 55
------------------DEL SimpleType@@Map.Entry @AT@ 29932 @LENGTH@ 9
------------------UPD VariableDeclarationFragment@@rightEntry=(Map.Entry)rightIterator.next() @TO@ rightEntry=rightIterator.next() @AT@ 29942 @LENGTH@ 44
---------------------DEL CastExpression@@(Map.Entry)rightIterator.next() @AT@ 29955 @LENGTH@ 31
------------------------DEL SimpleType@@Map.Entry @AT@ 29956 @LENGTH@ 9
------------------------DEL MethodInvocation@@rightIterator.next() @AT@ 29966 @LENGTH@ 20
---------------------INS MethodInvocation@@rightIterator.next() @TO@ VariableDeclarationFragment@@rightEntry=(Map.Entry)rightIterator.next() @AT@ 30045 @LENGTH@ 20
------------------------MOV SimpleName@@Name:rightIterator @TO@ MethodInvocation@@rightIterator.next() @AT@ 29966 @LENGTH@ 13
------------------------MOV SimpleName@@MethodName:next:[] @TO@ MethodInvocation@@rightIterator.next() @AT@ 29980 @LENGTH@ 6
------------------INS ParameterizedType@@Map.Entry<String,Object> @TO@ VariableDeclarationStatement@@Map.Entry rightEntry=(Map.Entry)rightIterator.next(); @AT@ 30006 @LENGTH@ 25
---------------------INS SimpleType@@Map.Entry @TO@ ParameterizedType@@Map.Entry<String,Object> @AT@ 30006 @LENGTH@ 9
---------------------INS SimpleType@@String @TO@ ParameterizedType@@Map.Entry<String,Object> @AT@ 30016 @LENGTH@ 6
---------------------INS SimpleType@@Object @TO@ ParameterizedType@@Map.Entry<String,Object> @AT@ 30024 @LENGTH@ 6
---------------UPD IfStatement@@if (!isEqual(leftEntry.getKey(),rightEntry.getKey())) {  return false;} @TO@ if (!isEqual(leftEntry.getKey(),rightEntry.getKey()) || !isEqual(leftEntry.getValue(),rightEntry.getValue())) {  return false;} @AT@ 29992 @LENGTH@ 81
------------------INS InfixExpression@@!isEqual(leftEntry.getKey(),rightEntry.getKey()) || !isEqual(leftEntry.getValue(),rightEntry.getValue()) @TO@ IfStatement@@if (!isEqual(leftEntry.getKey(),rightEntry.getKey())) {  return false;} @AT@ 30076 @LENGTH@ 112
---------------------MOV PrefixExpression@@!isEqual(leftEntry.getKey(),rightEntry.getKey()) @TO@ InfixExpression@@!isEqual(leftEntry.getKey(),rightEntry.getKey()) || !isEqual(leftEntry.getValue(),rightEntry.getValue()) @AT@ 29996 @LENGTH@ 49
---------------------MOV PrefixExpression@@!isEqual(leftEntry.getValue(),rightEntry.getValue()) @TO@ InfixExpression@@!isEqual(leftEntry.getKey(),rightEntry.getKey()) || !isEqual(leftEntry.getValue(),rightEntry.getValue()) @AT@ 30082 @LENGTH@ 53
---------------------INS Operator@@|| @TO@ InfixExpression@@!isEqual(leftEntry.getKey(),rightEntry.getKey()) || !isEqual(leftEntry.getValue(),rightEntry.getValue()) @AT@ 30125 @LENGTH@ 2
------------------MOV Block@@ThenBody:{  return false;} @TO@ IfStatement@@if (!isEqual(leftEntry.getKey(),rightEntry.getKey())) {  return false;} @AT@ 30137 @LENGTH@ 26
---------------------MOV ReturnStatement@@BooleanLiteral:false @TO@ Block@@ThenBody:{  return false;} @AT@ 30054 @LENGTH@ 13
---------------DEL IfStatement@@if (!isEqual(leftEntry.getValue(),rightEntry.getValue())) {  return false;} @AT@ 30078 @LENGTH@ 85
---UPD IfStatement@@if (Collection.class.isAssignableFrom(left.getClass())) {  if (!Collection.class.isAssignableFrom(right.getClass())) {    return false;  }  Collection leftCollection=(Collection)left;  Collection rightCollection=(Collection)right;  Iterator leftIterator=leftCollection.iterator();  Iterator rightIterator=rightCollection.iterator();  while (leftIterator.hasNext() && rightIterator.hasNext()) {    if (!isEqual(leftIterator.next(),rightIterator.next())) {      return false;    }  }  return !leftIterator.hasNext() && !rightIterator.hasNext();} @TO@ if (Collection.class.isAssignableFrom(left.getClass())) {  if (!Collection.class.isAssignableFrom(right.getClass())) {    return false;  }  Collection<?> leftCollection=(Collection<?>)left;  Collection<?> rightCollection=(Collection<?>)right;  Iterator<?> leftIterator=leftCollection.iterator();  Iterator<?> rightIterator=rightCollection.iterator();  while (leftIterator.hasNext() && rightIterator.hasNext()) {    if (!isEqual(leftIterator.next(),rightIterator.next())) {      return false;    }  }  return !leftIterator.hasNext() && !rightIterator.hasNext();} @AT@ 30239 @LENGTH@ 580
------UPD Block@@ThenBody:{  if (!Collection.class.isAssignableFrom(right.getClass())) {    return false;  }  Collection leftCollection=(Collection)left;  Collection rightCollection=(Collection)right;  Iterator leftIterator=leftCollection.iterator();  Iterator rightIterator=rightCollection.iterator();  while (leftIterator.hasNext() && rightIterator.hasNext()) {    if (!isEqual(leftIterator.next(),rightIterator.next())) {      return false;    }  }  return !leftIterator.hasNext() && !rightIterator.hasNext();} @TO@ ThenBody:{  if (!Collection.class.isAssignableFrom(right.getClass())) {    return false;  }  Collection<?> leftCollection=(Collection<?>)left;  Collection<?> rightCollection=(Collection<?>)right;  Iterator<?> leftIterator=leftCollection.iterator();  Iterator<?> rightIterator=rightCollection.iterator();  while (leftIterator.hasNext() && rightIterator.hasNext()) {    if (!isEqual(leftIterator.next(),rightIterator.next())) {      return false;    }  }  return !leftIterator.hasNext() && !rightIterator.hasNext();} @AT@ 30295 @LENGTH@ 524
---------UPD VariableDeclarationStatement@@Collection leftCollection=(Collection)left; @TO@ Collection<?> leftCollection=(Collection<?>)left; @AT@ 30387 @LENGTH@ 46
------------DEL SimpleType@@Collection @AT@ 30387 @LENGTH@ 10
------------UPD VariableDeclarationFragment@@leftCollection=(Collection)left @TO@ leftCollection=(Collection<?>)left @AT@ 30398 @LENGTH@ 34
---------------UPD CastExpression@@(Collection)left @TO@ (Collection<?>)left @AT@ 30415 @LENGTH@ 17
------------------DEL SimpleType@@Collection @AT@ 30416 @LENGTH@ 10
------------------INS ParameterizedType@@Collection<?> @TO@ CastExpression@@(Collection)left @AT@ 30474 @LENGTH@ 13
---------------------INS SimpleType@@Collection @TO@ ParameterizedType@@Collection<?> @AT@ 30474 @LENGTH@ 10
---------------------INS WildcardType@@? @TO@ ParameterizedType@@Collection<?> @AT@ 30485 @LENGTH@ 1
------------INS ParameterizedType@@Collection<?> @TO@ VariableDeclarationStatement@@Collection leftCollection=(Collection)left; @AT@ 30442 @LENGTH@ 13
---------------INS SimpleType@@Collection @TO@ ParameterizedType@@Collection<?> @AT@ 30442 @LENGTH@ 10
---------------INS WildcardType@@? @TO@ ParameterizedType@@Collection<?> @AT@ 30453 @LENGTH@ 1
---------UPD VariableDeclarationStatement@@Collection rightCollection=(Collection)right; @TO@ Collection<?> rightCollection=(Collection<?>)right; @AT@ 30437 @LENGTH@ 48
------------DEL SimpleType@@Collection @AT@ 30437 @LENGTH@ 10
------------UPD VariableDeclarationFragment@@rightCollection=(Collection)right @TO@ rightCollection=(Collection<?>)right @AT@ 30448 @LENGTH@ 36
---------------UPD CastExpression@@(Collection)right @TO@ (Collection<?>)right @AT@ 30466 @LENGTH@ 18
------------------DEL SimpleType@@Collection @AT@ 30467 @LENGTH@ 10
------------------INS ParameterizedType@@Collection<?> @TO@ CastExpression@@(Collection)right @AT@ 30531 @LENGTH@ 13
---------------------INS SimpleType@@Collection @TO@ ParameterizedType@@Collection<?> @AT@ 30531 @LENGTH@ 10
---------------------INS WildcardType@@? @TO@ ParameterizedType@@Collection<?> @AT@ 30542 @LENGTH@ 1
------------INS ParameterizedType@@Collection<?> @TO@ VariableDeclarationStatement@@Collection rightCollection=(Collection)right; @AT@ 30498 @LENGTH@ 13
---------------INS SimpleType@@Collection @TO@ ParameterizedType@@Collection<?> @AT@ 30498 @LENGTH@ 10
---------------INS WildcardType@@? @TO@ ParameterizedType@@Collection<?> @AT@ 30509 @LENGTH@ 1
---------UPD VariableDeclarationStatement@@Iterator leftIterator=leftCollection.iterator(); @TO@ Iterator<?> leftIterator=leftCollection.iterator(); @AT@ 30489 @LENGTH@ 50
------------DEL SimpleType@@Iterator @AT@ 30489 @LENGTH@ 8
------------INS ParameterizedType@@Iterator<?> @TO@ VariableDeclarationStatement@@Iterator leftIterator=leftCollection.iterator(); @AT@ 30556 @LENGTH@ 11
---------------INS SimpleType@@Iterator @TO@ ParameterizedType@@Iterator<?> @AT@ 30556 @LENGTH@ 8
---------------INS WildcardType@@? @TO@ ParameterizedType@@Iterator<?> @AT@ 30565 @LENGTH@ 1
---------UPD VariableDeclarationStatement@@Iterator rightIterator=rightCollection.iterator(); @TO@ Iterator<?> rightIterator=rightCollection.iterator(); @AT@ 30543 @LENGTH@ 52
------------DEL SimpleType@@Iterator @AT@ 30543 @LENGTH@ 8
------------INS ParameterizedType@@Iterator<?> @TO@ VariableDeclarationStatement@@Iterator rightIterator=rightCollection.iterator(); @AT@ 30613 @LENGTH@ 11
---------------INS SimpleType@@Iterator @TO@ ParameterizedType@@Iterator<?> @AT@ 30613 @LENGTH@ 8
---------------INS WildcardType@@? @TO@ ParameterizedType@@Iterator<?> @AT@ 30622 @LENGTH@ 1


INS MethodDeclaration@@IllegalStateException, MethodName:unexpectedCommandException, @Cause Throwable cause, String cmd, File file,  @TO@ TypeDeclaration@@[@MessageLogger(projectCode="WFLYCLI",length=4), public]BootScriptInvokerLogger, [BasicLogger] @AT@ 4140 @LENGTH@ 74
---INS SimpleType@@IllegalStateException @TO@ MethodDeclaration@@IllegalStateException, MethodName:unexpectedCommandException, @Cause Throwable cause, String cmd, File file,  @AT@ 4118 @LENGTH@ 21
---INS SimpleName@@MethodName:unexpectedCommandException @TO@ MethodDeclaration@@IllegalStateException, MethodName:unexpectedCommandException, @Cause Throwable cause, String cmd, File file,  @AT@ 4140 @LENGTH@ 26
---INS SingleVariableDeclaration@@@Cause Throwable cause @TO@ MethodDeclaration@@IllegalStateException, MethodName:unexpectedCommandException, @Cause Throwable cause, String cmd, File file,  @AT@ 4167 @LENGTH@ 22
------INS SimpleType@@Throwable @TO@ SingleVariableDeclaration@@@Cause Throwable cause @AT@ 4174 @LENGTH@ 9
------INS SimpleName@@cause @TO@ SingleVariableDeclaration@@@Cause Throwable cause @AT@ 4184 @LENGTH@ 5
---INS SingleVariableDeclaration@@String cmd @TO@ MethodDeclaration@@IllegalStateException, MethodName:unexpectedCommandException, @Cause Throwable cause, String cmd, File file,  @AT@ 4191 @LENGTH@ 10
------INS SimpleType@@String @TO@ SingleVariableDeclaration@@String cmd @AT@ 4191 @LENGTH@ 6
------INS SimpleName@@cmd @TO@ SingleVariableDeclaration@@String cmd @AT@ 4198 @LENGTH@ 3
---INS SingleVariableDeclaration@@File file @TO@ MethodDeclaration@@IllegalStateException, MethodName:unexpectedCommandException, @Cause Throwable cause, String cmd, File file,  @AT@ 4203 @LENGTH@ 9
------INS SimpleType@@File @TO@ SingleVariableDeclaration@@File file @AT@ 4203 @LENGTH@ 4
------INS SimpleName@@file @TO@ SingleVariableDeclaration@@File file @AT@ 4208 @LENGTH@ 4


UPD IfStatement@@if (split.getLength() == 0) {  this.isEmptyInput=true;  this.start=0;  this.reader=null;} else {  this.isEmptyInput=false;  this.reader=new DataFileReader<GenericRecord>(new FsInput(split.getPath(),job),gdr);  this.reader.sync(split.getStart());  this.start=reader.tell();} @TO@ if (split.getLength() == 0) {  this.reader=null;  this.isEmptyInput=true;} else {  this.reader=new DataFileReader<GenericRecord>(new FsInput(split.getPath(),job),gdr);  this.isEmptyInput=false;} @AT@ 3366 @LENGTH@ 336
---UPD Block@@ThenBody:{  this.isEmptyInput=true;  this.start=0;  this.reader=null;} @TO@ ThenBody:{  this.reader=null;  this.isEmptyInput=true;} @AT@ 3394 @LENGTH@ 87
------MOV ExpressionStatement@@Assignment:this.isEmptyInput=true @TO@ Block@@ThenBody:{  this.isEmptyInput=true;  this.start=0;  this.reader=null;} @AT@ 3402 @LENGTH@ 25
---UPD Block@@ElseBody:{  this.isEmptyInput=false;  this.reader=new DataFileReader<GenericRecord>(new FsInput(split.getPath(),job),gdr);  this.reader.sync(split.getStart());  this.start=reader.tell();} @TO@ ElseBody:{  this.reader=new DataFileReader<GenericRecord>(new FsInput(split.getPath(),job),gdr);  this.isEmptyInput=false;} @AT@ 3491 @LENGTH@ 211
------MOV ExpressionStatement@@Assignment:this.isEmptyInput=false @TO@ Block@@ElseBody:{  this.isEmptyInput=false;  this.reader=new DataFileReader<GenericRecord>(new FsInput(split.getPath(),job),gdr);  this.reader.sync(split.getStart());  this.start=reader.tell();} @AT@ 3499 @LENGTH@ 26


UPD ExpressionStatement@@MethodInvocation:LOG.debug("Compiling code:\n\n" + code + "\n") @TO@ MethodInvocation:LOG.debug("Compiling code:\n\n{}\n",code) @AT@ 3929 @LENGTH@ 47
---UPD MethodInvocation@@LOG.debug("Compiling code:\n\n" + code + "\n") @TO@ LOG.debug("Compiling code:\n\n{}\n",code) @AT@ 3929 @LENGTH@ 46
------UPD SimpleName@@MethodName:debug:["Compiling code:\n\n" + code + "\n"] @TO@ MethodName:debug:["Compiling code:\n\n{}\n", code] @AT@ 3933 @LENGTH@ 42
---------DEL InfixExpression@@"Compiling code:\n\n" + code + "\n" @AT@ 3939 @LENGTH@ 35
------------DEL StringLiteral@@"Compiling code:\n\n" @AT@ 3939 @LENGTH@ 21
------------DEL Operator@@+ @AT@ 3960 @LENGTH@ 1
------------DEL SimpleName@@code @AT@ 3963 @LENGTH@ 4
------------DEL StringLiteral@@"\n" @AT@ 3970 @LENGTH@ 4
---------INS StringLiteral@@"Compiling code:\n\n{}\n" @TO@ SimpleName@@MethodName:debug:["Compiling code:\n\n" + code + "\n"] @AT@ 3939 @LENGTH@ 25
---------INS SimpleName@@code @TO@ SimpleName@@MethodName:debug:["Compiling code:\n\n" + code + "\n"] @AT@ 3966 @LENGTH@ 4


UPD ExpressionStatement@@MethodInvocation:callback.onResponse(Optional.of(response),headers,ex) @TO@ MethodInvocation:callback.onResponse(Optional.ofNullable(response),headers,ex) @AT@ 5646 @LENGTH@ 56
---UPD MethodInvocation@@callback.onResponse(Optional.of(response),headers,ex) @TO@ callback.onResponse(Optional.ofNullable(response),headers,ex) @AT@ 5646 @LENGTH@ 55
------UPD SimpleName@@MethodName:onResponse:[Optional.of(response), headers, ex] @TO@ MethodName:onResponse:[Optional.ofNullable(response), headers, ex] @AT@ 5655 @LENGTH@ 46
---------UPD MethodInvocation@@Optional.of(response) @TO@ Optional.ofNullable(response) @AT@ 5666 @LENGTH@ 21
------------UPD SimpleName@@MethodName:of:[response] @TO@ MethodName:ofNullable:[response] @AT@ 5675 @LENGTH@ 12


UPD VariableDeclarationStatement@@JsonProperties.Null nullDefault=JsonProperties.NULL_VALUE; @TO@ JsonNode nullDefault=JsonNodeFactory.instance.nullNode(); @AT@ 9023 @LENGTH@ 60
---UPD SimpleType@@JsonProperties.Null @TO@ JsonNode @AT@ 9023 @LENGTH@ 19
---UPD VariableDeclarationFragment@@nullDefault=JsonProperties.NULL_VALUE @TO@ nullDefault=JsonNodeFactory.instance.nullNode() @AT@ 9043 @LENGTH@ 39
------INS MethodInvocation@@JsonNodeFactory.instance.nullNode() @TO@ VariableDeclarationFragment@@nullDefault=JsonProperties.NULL_VALUE @AT@ 8986 @LENGTH@ 35
---------INS QualifiedName@@Name:JsonNodeFactory.instance @TO@ MethodInvocation@@JsonNodeFactory.instance.nullNode() @AT@ 8986 @LENGTH@ 24
---------INS SimpleName@@MethodName:nullNode:[] @TO@ MethodInvocation@@JsonNodeFactory.instance.nullNode() @AT@ 9011 @LENGTH@ 10
------DEL QualifiedName@@JsonProperties.NULL_VALUE @AT@ 9057 @LENGTH@ 25
---------DEL SimpleName@@JsonProperties @AT@ 9057 @LENGTH@ 14
---------DEL SimpleName@@NULL_VALUE @AT@ 9072 @LENGTH@ 10


UPD Block@@ThenBody:{  taskFactory=new PooledTaskFactory(){    @Override public PooledExchangeTask create(    Exchange exchange,    AsyncCallback callback){      return simpleTask ? new SimpleTask() : new RedeliveryTask();    }  };  int capacity=camelContext.adapt(ExtendedCamelContext.class).getExchangeFactory().getCapacity();  taskFactory.setCapacity(capacity);} @TO@ ThenBody:{  String id=output instanceof IdAware ? ((IdAware)output).getId() : output.toString();  taskFactory=new PooledTaskFactory(id){    @Override public PooledExchangeTask create(    Exchange exchange,    AsyncCallback callback){      return simpleTask ? new SimpleTask() : new RedeliveryTask();    }  };  int capacity=camelContext.adapt(ExtendedCamelContext.class).getExchangeFactory().getCapacity();  taskFactory.setCapacity(capacity);} @AT@ 73698 @LENGTH@ 454
---UPD ExpressionStatement@@Assignment:taskFactory=new PooledTaskFactory(){
  @Override public PooledExchangeTask create(  Exchange exchange,  AsyncCallback callback){
    return simpleTask ? new SimpleTask() : new RedeliveryTask();
  }
}
 @TO@ Assignment:taskFactory=new PooledTaskFactory(id){
  @Override public PooledExchangeTask create(  Exchange exchange,  AsyncCallback callback){
    return simpleTask ? new SimpleTask() : new RedeliveryTask();
  }
}
 @AT@ 73712 @LENGTH@ 273
------UPD Assignment@@taskFactory=new PooledTaskFactory(){
  @Override public PooledExchangeTask create(  Exchange exchange,  AsyncCallback callback){
    return simpleTask ? new SimpleTask() : new RedeliveryTask();
  }
}
 @TO@ taskFactory=new PooledTaskFactory(id){
  @Override public PooledExchangeTask create(  Exchange exchange,  AsyncCallback callback){
    return simpleTask ? new SimpleTask() : new RedeliveryTask();
  }
}
 @AT@ 73712 @LENGTH@ 272
---------UPD ClassInstanceCreation@@PooledTaskFactory[] @TO@ PooledTaskFactory[id] @AT@ 73726 @LENGTH@ 258
------------INS SimpleName@@id @TO@ ClassInstanceCreation@@PooledTaskFactory[] @AT@ 73983 @LENGTH@ 2
---INS VariableDeclarationStatement@@String id=output instanceof IdAware ? ((IdAware)output).getId() : output.toString(); @TO@ Block@@ThenBody:{  taskFactory=new PooledTaskFactory(){    @Override public PooledExchangeTask create(    Exchange exchange,    AsyncCallback callback){      return simpleTask ? new SimpleTask() : new RedeliveryTask();    }  };  int capacity=camelContext.adapt(ExtendedCamelContext.class).getExchangeFactory().getCapacity();  taskFactory.setCapacity(capacity);} @AT@ 73847 @LENGTH@ 87
------INS SimpleType@@String @TO@ VariableDeclarationStatement@@String id=output instanceof IdAware ? ((IdAware)output).getId() : output.toString(); @AT@ 73847 @LENGTH@ 6
------INS VariableDeclarationFragment@@id=output instanceof IdAware ? ((IdAware)output).getId() : output.toString() @TO@ VariableDeclarationStatement@@String id=output instanceof IdAware ? ((IdAware)output).getId() : output.toString(); @AT@ 73854 @LENGTH@ 79
---------INS SimpleName@@id @TO@ VariableDeclarationFragment@@id=output instanceof IdAware ? ((IdAware)output).getId() : output.toString() @AT@ 73854 @LENGTH@ 2
---------INS ConditionalExpression@@output instanceof IdAware ? ((IdAware)output).getId() : output.toString() @TO@ VariableDeclarationFragment@@id=output instanceof IdAware ? ((IdAware)output).getId() : output.toString() @AT@ 73859 @LENGTH@ 74
------------INS InstanceofExpression@@output instanceof IdAware @TO@ ConditionalExpression@@output instanceof IdAware ? ((IdAware)output).getId() : output.toString() @AT@ 73859 @LENGTH@ 25
---------------INS SimpleName@@output @TO@ InstanceofExpression@@output instanceof IdAware @AT@ 73859 @LENGTH@ 6
---------------INS Instanceof@@instanceof @TO@ InstanceofExpression@@output instanceof IdAware @AT@ 73866 @LENGTH@ 10
---------------INS SimpleType@@IdAware @TO@ InstanceofExpression@@output instanceof IdAware @AT@ 73877 @LENGTH@ 7
------------INS MethodInvocation@@((IdAware)output).getId() @TO@ ConditionalExpression@@output instanceof IdAware ? ((IdAware)output).getId() : output.toString() @AT@ 73887 @LENGTH@ 26
---------------INS ParenthesizedExpression@@((IdAware)output) @TO@ MethodInvocation@@((IdAware)output).getId() @AT@ 73887 @LENGTH@ 18
------------------INS CastExpression@@(IdAware)output @TO@ ParenthesizedExpression@@((IdAware)output) @AT@ 73888 @LENGTH@ 16
---------------------INS SimpleType@@IdAware @TO@ CastExpression@@(IdAware)output @AT@ 73889 @LENGTH@ 7
---------------------INS SimpleName@@output @TO@ CastExpression@@(IdAware)output @AT@ 73898 @LENGTH@ 6
---------------INS SimpleName@@MethodName:getId:[] @TO@ MethodInvocation@@((IdAware)output).getId() @AT@ 73906 @LENGTH@ 7
------------INS MethodInvocation@@output.toString() @TO@ ConditionalExpression@@output instanceof IdAware ? ((IdAware)output).getId() : output.toString() @AT@ 73916 @LENGTH@ 17
---------------INS SimpleName@@Name:output @TO@ MethodInvocation@@output.toString() @AT@ 73916 @LENGTH@ 6
---------------INS SimpleName@@MethodName:toString:[] @TO@ MethodInvocation@@output.toString() @AT@ 73923 @LENGTH@ 10


UPD FieldDeclaration@@protected, boolean, [jwtAuthentoication] @TO@ protected, boolean, [jwtAuthentication] @AT@ 1624 @LENGTH@ 37
---UPD VariableDeclarationFragment@@jwtAuthentoication @TO@ jwtAuthentication @AT@ 1642 @LENGTH@ 18
------UPD SimpleName@@jwtAuthentoication @TO@ jwtAuthentication @AT@ 1642 @LENGTH@ 18


UPD FieldDeclaration@@private, int, [wrappedIteratorIndex=0] @TO@ private, int, [wrappedIteratorIndex] @AT@ 2770 @LENGTH@ 37
---UPD VariableDeclarationFragment@@wrappedIteratorIndex=0 @TO@ wrappedIteratorIndex @AT@ 2782 @LENGTH@ 24
------DEL NumberLiteral@@0 @AT@ 2805 @LENGTH@ 1


UPD VariableDeclarationStatement@@Mono<Long> relationshipCreationMonoNested=neo4jClient.query(renderer.render(statementHolder.getStatement())).in(inDatabase).bind(convertIdValues(targetEntity.getRequiredIdProperty(),fromId)).to(Constants.FROM_ID_PARAMETER_NAME).bind(relatedInternalId).to(Constants.TO_ID_PARAMETER_NAME).bindAll(statementHolder.getProperties()).fetchAs(Long.class).one().doOnNext(relationshipInternalId -> {
  if (idProperty != null) {
    relationshipContext.getRelationshipPropertiesPropertyAccessor(relatedValueToStore).setProperty(idProperty,relationshipInternalId);
  }
}
); @TO@ Mono<Long> relationshipCreationMonoNested=neo4jClient.query(renderer.render(statementHolder.getStatement())).in(inDatabase).bind(convertIdValues(sourceEntity.getRequiredIdProperty(),fromId)).to(Constants.FROM_ID_PARAMETER_NAME).bind(relatedInternalId).to(Constants.TO_ID_PARAMETER_NAME).bindAll(statementHolder.getProperties()).fetchAs(Long.class).one().doOnNext(relationshipInternalId -> {
  if (idProperty != null) {
    relationshipContext.getRelationshipPropertiesPropertyAccessor(relatedValueToStore).setProperty(idProperty,relationshipInternalId);
  }
}
); @AT@ 24259 @LENGTH@ 775
---UPD VariableDeclarationFragment@@relationshipCreationMonoNested=neo4jClient.query(renderer.render(statementHolder.getStatement())).in(inDatabase).bind(convertIdValues(targetEntity.getRequiredIdProperty(),fromId)).to(Constants.FROM_ID_PARAMETER_NAME).bind(relatedInternalId).to(Constants.TO_ID_PARAMETER_NAME).bindAll(statementHolder.getProperties()).fetchAs(Long.class).one().doOnNext(relationshipInternalId -> {
  if (idProperty != null) {
    relationshipContext.getRelationshipPropertiesPropertyAccessor(relatedValueToStore).setProperty(idProperty,relationshipInternalId);
  }
}
) @TO@ relationshipCreationMonoNested=neo4jClient.query(renderer.render(statementHolder.getStatement())).in(inDatabase).bind(convertIdValues(sourceEntity.getRequiredIdProperty(),fromId)).to(Constants.FROM_ID_PARAMETER_NAME).bind(relatedInternalId).to(Constants.TO_ID_PARAMETER_NAME).bindAll(statementHolder.getProperties()).fetchAs(Long.class).one().doOnNext(relationshipInternalId -> {
  if (idProperty != null) {
    relationshipContext.getRelationshipPropertiesPropertyAccessor(relatedValueToStore).setProperty(idProperty,relationshipInternalId);
  }
}
) @AT@ 24270 @LENGTH@ 763
------UPD MethodInvocation@@neo4jClient.query(renderer.render(statementHolder.getStatement())).in(inDatabase).bind(convertIdValues(targetEntity.getRequiredIdProperty(),fromId)).to(Constants.FROM_ID_PARAMETER_NAME).bind(relatedInternalId).to(Constants.TO_ID_PARAMETER_NAME).bindAll(statementHolder.getProperties()).fetchAs(Long.class).one().doOnNext(relationshipInternalId -> {
  if (idProperty != null) {
    relationshipContext.getRelationshipPropertiesPropertyAccessor(relatedValueToStore).setProperty(idProperty,relationshipInternalId);
  }
}
) @TO@ neo4jClient.query(renderer.render(statementHolder.getStatement())).in(inDatabase).bind(convertIdValues(sourceEntity.getRequiredIdProperty(),fromId)).to(Constants.FROM_ID_PARAMETER_NAME).bind(relatedInternalId).to(Constants.TO_ID_PARAMETER_NAME).bindAll(statementHolder.getProperties()).fetchAs(Long.class).one().doOnNext(relationshipInternalId -> {
  if (idProperty != null) {
    relationshipContext.getRelationshipPropertiesPropertyAccessor(relatedValueToStore).setProperty(idProperty,relationshipInternalId);
  }
}
) @AT@ 24303 @LENGTH@ 730
---------UPD MethodInvocation@@MethodName:bind:[convertIdValues(targetEntity.getRequiredIdProperty(),fromId)] @TO@ MethodName:bind:[convertIdValues(sourceEntity.getRequiredIdProperty(),fromId)] @AT@ 24303 @LENGTH@ 177
------------UPD MethodInvocation@@convertIdValues(targetEntity.getRequiredIdProperty(),fromId) @TO@ convertIdValues(sourceEntity.getRequiredIdProperty(),fromId) @AT@ 24418 @LENGTH@ 61
---------------UPD SimpleName@@MethodName:convertIdValues:[targetEntity.getRequiredIdProperty(), fromId] @TO@ MethodName:convertIdValues:[sourceEntity.getRequiredIdProperty(), fromId] @AT@ 24418 @LENGTH@ 61
------------------UPD MethodInvocation@@targetEntity.getRequiredIdProperty() @TO@ sourceEntity.getRequiredIdProperty() @AT@ 24434 @LENGTH@ 36
---------------------UPD SimpleName@@Name:targetEntity @TO@ Name:sourceEntity @AT@ 24434 @LENGTH@ 12


UPD ExpressionStatement@@MethodInvocation:stream.doOnNext(it -> redisTemplate.convertAndSend(channel,message).subscribe()).flatMapMany(Function.identity()).as(StepVerifier::create).assertNext(received -> {
  assertThat(received).isInstanceOf(PatternMessage.class);
  assertThat(received.getMessage()).isEqualTo(message);
  assertThat(received.getChannel()).isEqualTo(channel);
  assertThat(((PatternMessage)received).getPattern()).isEqualTo(pattern);
}
).thenCancel().verify(Duration.ofSeconds(3)) @TO@ MethodInvocation:stream.doOnNext(it -> redisTemplate.convertAndSend(channel,message).subscribe()).flatMapMany(Function.identity()).cast(Message.class).as(StepVerifier::create).assertNext(received -> {
  assertThat(received).isInstanceOf(PatternMessage.class);
  assertThat(received.getMessage()).isEqualTo(message);
  assertThat(received.getChannel()).isEqualTo(channel);
  assertThat(((PatternMessage)received).getPattern()).isEqualTo(pattern);
}
).thenCancel().verify(Duration.ofSeconds(3)) @AT@ 19002 @LENGTH@ 514
---UPD MethodInvocation@@stream.doOnNext(it -> redisTemplate.convertAndSend(channel,message).subscribe()).flatMapMany(Function.identity()).as(StepVerifier::create).assertNext(received -> {
  assertThat(received).isInstanceOf(PatternMessage.class);
  assertThat(received.getMessage()).isEqualTo(message);
  assertThat(received.getChannel()).isEqualTo(channel);
  assertThat(((PatternMessage)received).getPattern()).isEqualTo(pattern);
}
).thenCancel().verify(Duration.ofSeconds(3)) @TO@ stream.doOnNext(it -> redisTemplate.convertAndSend(channel,message).subscribe()).flatMapMany(Function.identity()).cast(Message.class).as(StepVerifier::create).assertNext(received -> {
  assertThat(received).isInstanceOf(PatternMessage.class);
  assertThat(received.getMessage()).isEqualTo(message);
  assertThat(received.getChannel()).isEqualTo(channel);
  assertThat(((PatternMessage)received).getPattern()).isEqualTo(pattern);
}
).thenCancel().verify(Duration.ofSeconds(3)) @AT@ 19002 @LENGTH@ 513
------INS MethodInvocation@@MethodName:cast:[Message.class] @TO@ MethodInvocation@@stream.doOnNext(it -> redisTemplate.convertAndSend(channel,message).subscribe()).flatMapMany(Function.identity()).as(StepVerifier::create).assertNext(received -> {
  assertThat(received).isInstanceOf(PatternMessage.class);
  assertThat(received.getMessage()).isEqualTo(message);
  assertThat(received.getChannel()).isEqualTo(channel);
  assertThat(((PatternMessage)received).getPattern()).isEqualTo(pattern);
}
).thenCancel().verify(Duration.ofSeconds(3)) @AT@ 19048 @LENGTH@ 150
---------INS TypeLiteral@@Message.class @TO@ MethodInvocation@@MethodName:cast:[Message.class] @AT@ 19184 @LENGTH@ 13


INS ExpressionStatement@@MethodInvocation:df.setTimeZone(TimeZone.getTimeZone("UTC")) @TO@ MethodDeclaration@@public, void, MethodName:testReadJava, Exception,  @AT@ 4071 @LENGTH@ 44
---INS MethodInvocation@@df.setTimeZone(TimeZone.getTimeZone("UTC")) @TO@ ExpressionStatement@@MethodInvocation:df.setTimeZone(TimeZone.getTimeZone("UTC")) @AT@ 4071 @LENGTH@ 43
------INS SimpleName@@Name:df @TO@ MethodInvocation@@df.setTimeZone(TimeZone.getTimeZone("UTC")) @AT@ 4071 @LENGTH@ 2
------INS SimpleName@@MethodName:setTimeZone:[TimeZone.getTimeZone("UTC")] @TO@ MethodInvocation@@df.setTimeZone(TimeZone.getTimeZone("UTC")) @AT@ 4074 @LENGTH@ 40
---------INS MethodInvocation@@TimeZone.getTimeZone("UTC") @TO@ SimpleName@@MethodName:setTimeZone:[TimeZone.getTimeZone("UTC")] @AT@ 4086 @LENGTH@ 27
------------INS SimpleName@@Name:TimeZone @TO@ MethodInvocation@@TimeZone.getTimeZone("UTC") @AT@ 4086 @LENGTH@ 8
------------INS SimpleName@@MethodName:getTimeZone:["UTC"] @TO@ MethodInvocation@@TimeZone.getTimeZone("UTC") @AT@ 4095 @LENGTH@ 18
---------------INS StringLiteral@@"UTC" @TO@ SimpleName@@MethodName:getTimeZone:["UTC"] @AT@ 4107 @LENGTH@ 5


INS MethodDeclaration@@String, MethodName:getMostAbstractParentLabel, NodeDescription<?> mostAbstractNodeDescription,  @TO@ TypeDeclaration@@[@API(status=API.Status.STABLE,since="6.0"), public]NodeDescription,  @AT@ 1346 @LENGTH@ 75
---INS SimpleType@@String @TO@ MethodDeclaration@@String, MethodName:getMostAbstractParentLabel, NodeDescription<?> mostAbstractNodeDescription,  @AT@ 1339 @LENGTH@ 6
---INS SimpleName@@MethodName:getMostAbstractParentLabel @TO@ MethodDeclaration@@String, MethodName:getMostAbstractParentLabel, NodeDescription<?> mostAbstractNodeDescription,  @AT@ 1346 @LENGTH@ 26
---INS SingleVariableDeclaration@@NodeDescription<?> mostAbstractNodeDescription @TO@ MethodDeclaration@@String, MethodName:getMostAbstractParentLabel, NodeDescription<?> mostAbstractNodeDescription,  @AT@ 1373 @LENGTH@ 46
------INS ParameterizedType@@NodeDescription<?> @TO@ SingleVariableDeclaration@@NodeDescription<?> mostAbstractNodeDescription @AT@ 1373 @LENGTH@ 18
---------INS SimpleType@@NodeDescription @TO@ ParameterizedType@@NodeDescription<?> @AT@ 1373 @LENGTH@ 15
---------INS WildcardType@@? @TO@ ParameterizedType@@NodeDescription<?> @AT@ 1389 @LENGTH@ 1
------INS SimpleName@@mostAbstractNodeDescription @TO@ SingleVariableDeclaration@@NodeDescription<?> mostAbstractNodeDescription @AT@ 1392 @LENGTH@ 27


UPD ExpressionStatement@@MethodInvocation:assertThatThrownBy(() -> rabbitTemplate.onMessage(replyMessage)).isInstanceOf(AmqpRejectAndDontRequeueException.class).hasMessage("No correlation header in reply") @TO@ MethodInvocation:assertThatThrownBy(() -> rabbitTemplate.onMessage(replyMessage,mock(Channel.class))).isInstanceOf(AmqpRejectAndDontRequeueException.class).hasMessage("No correlation header in reply") @AT@ 3289 @LENGTH@ 172
---UPD MethodInvocation@@assertThatThrownBy(() -> rabbitTemplate.onMessage(replyMessage)).isInstanceOf(AmqpRejectAndDontRequeueException.class).hasMessage("No correlation header in reply") @TO@ assertThatThrownBy(() -> rabbitTemplate.onMessage(replyMessage,mock(Channel.class))).isInstanceOf(AmqpRejectAndDontRequeueException.class).hasMessage("No correlation header in reply") @AT@ 3289 @LENGTH@ 171
------UPD MethodInvocation@@MethodName:assertThatThrownBy:[() -> rabbitTemplate.onMessage(replyMessage)] @TO@ MethodName:assertThatThrownBy:[() -> rabbitTemplate.onMessage(replyMessage,mock(Channel.class))] @AT@ 3289 @LENGTH@ 64
---------UPD LambdaExpression@@() -> rabbitTemplate.onMessage(replyMessage) @TO@ () -> rabbitTemplate.onMessage(replyMessage,mock(Channel.class)) @AT@ 3308 @LENGTH@ 44
------------UPD MethodInvocation@@rabbitTemplate.onMessage(replyMessage) @TO@ rabbitTemplate.onMessage(replyMessage,mock(Channel.class)) @AT@ 3314 @LENGTH@ 38
---------------UPD SimpleName@@MethodName:onMessage:[replyMessage] @TO@ MethodName:onMessage:[replyMessage, mock(Channel.class)] @AT@ 3329 @LENGTH@ 23
------------------INS MethodInvocation@@mock(Channel.class) @TO@ SimpleName@@MethodName:onMessage:[replyMessage] @AT@ 3430 @LENGTH@ 19
---------------------INS SimpleName@@MethodName:mock:[Channel.class] @TO@ MethodInvocation@@mock(Channel.class) @AT@ 3430 @LENGTH@ 19
------------------------INS TypeLiteral@@Channel.class @TO@ SimpleName@@MethodName:mock:[Channel.class] @AT@ 3435 @LENGTH@ 13


INS ExpressionStatement@@MethodInvocation:context.getRegistry().bind("activemqCF",connectionFactory) @TO@ MethodDeclaration@@public, void, MethodName:testRestartWithStopStart, Exception,  @AT@ 2151 @LENGTH@ 60
---INS MethodInvocation@@context.getRegistry().bind("activemqCF",connectionFactory) @TO@ ExpressionStatement@@MethodInvocation:context.getRegistry().bind("activemqCF",connectionFactory) @AT@ 2151 @LENGTH@ 59
------INS MethodInvocation@@MethodName:getRegistry:[] @TO@ MethodInvocation@@context.getRegistry().bind("activemqCF",connectionFactory) @AT@ 2151 @LENGTH@ 21
------INS SimpleName@@Name:context @TO@ MethodInvocation@@context.getRegistry().bind("activemqCF",connectionFactory) @AT@ 2151 @LENGTH@ 7
------INS SimpleName@@MethodName:bind:["activemqCF", connectionFactory] @TO@ MethodInvocation@@context.getRegistry().bind("activemqCF",connectionFactory) @AT@ 2173 @LENGTH@ 37
---------INS StringLiteral@@"activemqCF" @TO@ SimpleName@@MethodName:bind:["activemqCF", connectionFactory] @AT@ 2178 @LENGTH@ 12
---------INS SimpleName@@connectionFactory @TO@ SimpleName@@MethodName:bind:["activemqCF", connectionFactory] @AT@ 2192 @LENGTH@ 17


UPD IfStatement@@if ((attribute && element) || (attribute && elementRef) || (element && elementRef)) {  fail("Class " + clazz.getName() + " has field "+ field.getName()+ " which has 2+ annotations that are not allowed together.");} @TO@ if (attribute && element || attribute && elementRef || element && elementRef) {  fail("Class " + clazz.getName() + " has field "+ field.getName()+ " which has 2+ annotations that are not allowed together.");} @AT@ 3211 @LENGTH@ 277
---UPD InfixExpression@@(attribute && element) || (attribute && elementRef) || (element && elementRef) @TO@ attribute && element || attribute && elementRef || element && elementRef @AT@ 3215 @LENGTH@ 78
------INS InfixExpression@@attribute && element || attribute && elementRef @TO@ InfixExpression@@(attribute && element) || (attribute && elementRef) || (element && elementRef) @AT@ 3215 @LENGTH@ 47
---------INS InfixExpression@@attribute && element @TO@ InfixExpression@@attribute && element || attribute && elementRef @AT@ 3215 @LENGTH@ 20
------------MOV SimpleName@@attribute @TO@ InfixExpression@@attribute && element @AT@ 3216 @LENGTH@ 9
------------MOV Operator@@&& @TO@ InfixExpression@@attribute && element @AT@ 3225 @LENGTH@ 2
------------MOV SimpleName@@element @TO@ InfixExpression@@attribute && element @AT@ 3229 @LENGTH@ 7
---------MOV Operator@@|| @TO@ InfixExpression@@attribute && element || attribute && elementRef @AT@ 3237 @LENGTH@ 2
---------INS InfixExpression@@attribute && elementRef @TO@ InfixExpression@@attribute && element || attribute && elementRef @AT@ 3239 @LENGTH@ 23
------------MOV SimpleName@@attribute @TO@ InfixExpression@@attribute && elementRef @AT@ 3242 @LENGTH@ 9
------------MOV Operator@@&& @TO@ InfixExpression@@attribute && elementRef @AT@ 3251 @LENGTH@ 2
------------MOV SimpleName@@elementRef @TO@ InfixExpression@@attribute && elementRef @AT@ 3255 @LENGTH@ 10
------DEL ParenthesizedExpression@@(attribute && element) @AT@ 3215 @LENGTH@ 22
---------DEL InfixExpression@@attribute && element @AT@ 3216 @LENGTH@ 20
------DEL ParenthesizedExpression@@(attribute && elementRef) @AT@ 3241 @LENGTH@ 25
---------DEL InfixExpression@@attribute && elementRef @AT@ 3242 @LENGTH@ 23
------INS Operator@@|| @TO@ InfixExpression@@(attribute && element) || (attribute && elementRef) || (element && elementRef) @AT@ 3262 @LENGTH@ 2
------INS InfixExpression@@element && elementRef @TO@ InfixExpression@@(attribute && element) || (attribute && elementRef) || (element && elementRef) @AT@ 3266 @LENGTH@ 21
---------MOV SimpleName@@element @TO@ InfixExpression@@element && elementRef @AT@ 3271 @LENGTH@ 7
---------MOV Operator@@&& @TO@ InfixExpression@@element && elementRef @AT@ 3278 @LENGTH@ 2
---------MOV SimpleName@@elementRef @TO@ InfixExpression@@element && elementRef @AT@ 3282 @LENGTH@ 10
------DEL ParenthesizedExpression@@(element && elementRef) @AT@ 3270 @LENGTH@ 23
---------DEL InfixExpression@@element && elementRef @AT@ 3271 @LENGTH@ 21


UPD ReturnStatement@@ConditionalExpression:!typeMapping.isExported() ? false : annotation.map(it -> it.exported()).orElse(true) @TO@ ConditionalExpression:typeMapping != null && typeMapping.isExported() ? annotation.map(it -> it.exported()).orElse(true) : false @AT@ 3031 @LENGTH@ 92
---UPD ConditionalExpression@@!typeMapping.isExported() ? false : annotation.map(it -> it.exported()).orElse(true) @TO@ typeMapping != null && typeMapping.isExported() ? annotation.map(it -> it.exported()).orElse(true) : false @AT@ 3038 @LENGTH@ 84
------DEL PrefixExpression@@!typeMapping.isExported() @AT@ 3038 @LENGTH@ 25
---------DEL Operator@@! @AT@ 3038 @LENGTH@ 1
---------DEL MethodInvocation@@typeMapping.isExported() @AT@ 3039 @LENGTH@ 24
------INS InfixExpression@@typeMapping != null && typeMapping.isExported() @TO@ ConditionalExpression@@!typeMapping.isExported() ? false : annotation.map(it -> it.exported()).orElse(true) @AT@ 3039 @LENGTH@ 47
---------INS InfixExpression@@typeMapping != null @TO@ InfixExpression@@typeMapping != null && typeMapping.isExported() @AT@ 3039 @LENGTH@ 19
------------INS SimpleName@@typeMapping @TO@ InfixExpression@@typeMapping != null @AT@ 3039 @LENGTH@ 11
------------INS Operator@@!= @TO@ InfixExpression@@typeMapping != null @AT@ 3050 @LENGTH@ 2
------------INS NullLiteral@@null @TO@ InfixExpression@@typeMapping != null @AT@ 3054 @LENGTH@ 4
---------INS Operator@@&& @TO@ InfixExpression@@typeMapping != null && typeMapping.isExported() @AT@ 3058 @LENGTH@ 2
---------INS MethodInvocation@@typeMapping.isExported() @TO@ InfixExpression@@typeMapping != null && typeMapping.isExported() @AT@ 3062 @LENGTH@ 24
------------MOV SimpleName@@Name:typeMapping @TO@ MethodInvocation@@typeMapping.isExported() @AT@ 3039 @LENGTH@ 11
------------MOV SimpleName@@MethodName:isExported:[] @TO@ MethodInvocation@@typeMapping.isExported() @AT@ 3051 @LENGTH@ 12
------MOV BooleanLiteral@@false @TO@ ConditionalExpression@@!typeMapping.isExported() ? false : annotation.map(it -> it.exported()).orElse(true) @AT@ 3066 @LENGTH@ 5


UPD ExpressionStatement@@MethodInvocation:assertThat(dataAccessException.getMessage()).isEqualTo("Cannot coerce Long to Int without losing precision; Error code 'N/A'") @TO@ MethodInvocation:assertThat(dataAccessException.getMessage()).startsWith("Cannot coerce Long to Int without losing precision; Error code 'N/A'") @AT@ 1509 @LENGTH@ 132
---UPD MethodInvocation@@assertThat(dataAccessException.getMessage()).isEqualTo("Cannot coerce Long to Int without losing precision; Error code 'N/A'") @TO@ assertThat(dataAccessException.getMessage()).startsWith("Cannot coerce Long to Int without losing precision; Error code 'N/A'") @AT@ 1509 @LENGTH@ 131
------UPD SimpleName@@MethodName:isEqualTo:["Cannot coerce Long to Int without losing precision; Error code 'N/A'"] @TO@ MethodName:startsWith:["Cannot coerce Long to Int without losing precision; Error code 'N/A'"] @AT@ 1559 @LENGTH@ 81


UPD VariableDeclarationStatement@@JsonObject customResourcesListJSON=new JsonObject(getEndpoint().getKubernetesClient().customResource(getCRDContext(exchange.getIn())).list(namespaceName)); @TO@ JsonObject customResourcesListJSON=new JsonObject(getEndpoint().getKubernetesClient().customResource(getCRDContext(exchange.getIn())).list(namespaceName,labels)); @AT@ 5000 @LENGTH@ 174
---UPD VariableDeclarationFragment@@customResourcesListJSON=new JsonObject(getEndpoint().getKubernetesClient().customResource(getCRDContext(exchange.getIn())).list(namespaceName)) @TO@ customResourcesListJSON=new JsonObject(getEndpoint().getKubernetesClient().customResource(getCRDContext(exchange.getIn())).list(namespaceName,labels)) @AT@ 5011 @LENGTH@ 162
------UPD ClassInstanceCreation@@JsonObject[getEndpoint().getKubernetesClient().customResource(getCRDContext(exchange.getIn())).list(namespaceName)] @TO@ JsonObject[getEndpoint().getKubernetesClient().customResource(getCRDContext(exchange.getIn())).list(namespaceName,labels)] @AT@ 5037 @LENGTH@ 136
---------UPD MethodInvocation@@getEndpoint().getKubernetesClient().customResource(getCRDContext(exchange.getIn())).list(namespaceName) @TO@ getEndpoint().getKubernetesClient().customResource(getCRDContext(exchange.getIn())).list(namespaceName,labels) @AT@ 5069 @LENGTH@ 103
------------UPD SimpleName@@MethodName:list:[namespaceName] @TO@ MethodName:list:[namespaceName, labels] @AT@ 5153 @LENGTH@ 19
---------------INS SimpleName@@labels @TO@ SimpleName@@MethodName:list:[namespaceName] @AT@ 5197 @LENGTH@ 6


UPD ExpressionStatement@@MethodInvocation:StepVerifier.create(this.post.getResponse().getBodyAsString()).assertNext(b -> assertThat(b).contains("An expected CSRF token cannot be found")) @TO@ MethodInvocation:StepVerifier.create(this.post.getResponse().getBodyAsString()).assertNext((body) -> assertThat(body).contains("An expected CSRF token cannot be found")) @AT@ 3804 @LENGTH@ 150
---UPD MethodInvocation@@StepVerifier.create(this.post.getResponse().getBodyAsString()).assertNext(b -> assertThat(b).contains("An expected CSRF token cannot be found")) @TO@ StepVerifier.create(this.post.getResponse().getBodyAsString()).assertNext((body) -> assertThat(body).contains("An expected CSRF token cannot be found")) @AT@ 3804 @LENGTH@ 149
------UPD SimpleName@@MethodName:assertNext:[b -> assertThat(b).contains("An expected CSRF token cannot be found")] @TO@ MethodName:assertNext:[(body) -> assertThat(body).contains("An expected CSRF token cannot be found")] @AT@ 3872 @LENGTH@ 81
---------UPD LambdaExpression@@b -> assertThat(b).contains("An expected CSRF token cannot be found") @TO@ (body) -> assertThat(body).contains("An expected CSRF token cannot be found") @AT@ 3883 @LENGTH@ 69
------------UPD VariableDeclarationFragment@@b @TO@ body @AT@ 3883 @LENGTH@ 1
---------------UPD SimpleName@@b @TO@ body @AT@ 3883 @LENGTH@ 1
------------UPD MethodInvocation@@assertThat(b).contains("An expected CSRF token cannot be found") @TO@ assertThat(body).contains("An expected CSRF token cannot be found") @AT@ 3888 @LENGTH@ 64
---------------UPD MethodInvocation@@MethodName:assertThat:[b] @TO@ MethodName:assertThat:[body] @AT@ 3888 @LENGTH@ 13
------------------UPD SimpleName@@b @TO@ body @AT@ 3899 @LENGTH@ 1


INS ExpressionStatement@@MethodInvocation:DefaultMetricsSystem.shutdown() @TO@ MethodDeclaration@@static, void, MethodName:close, TestHiveShell shell, Exception,  @AT@ 5036 @LENGTH@ 32
---INS MethodInvocation@@DefaultMetricsSystem.shutdown() @TO@ ExpressionStatement@@MethodInvocation:DefaultMetricsSystem.shutdown() @AT@ 5036 @LENGTH@ 31
------INS SimpleName@@Name:DefaultMetricsSystem @TO@ MethodInvocation@@DefaultMetricsSystem.shutdown() @AT@ 5036 @LENGTH@ 20
------INS SimpleName@@MethodName:shutdown:[] @TO@ MethodInvocation@@DefaultMetricsSystem.shutdown() @AT@ 5057 @LENGTH@ 10


UPD IfStatement@@if (fileExistedAlready == false) {  FileUtils.deleteQuietly(file);} @TO@ if (!fileExistedAlready) {  FileUtils.deleteQuietly(file);} @AT@ 10065 @LENGTH@ 95
---DEL InfixExpression@@fileExistedAlready == false @AT@ 10069 @LENGTH@ 27
------DEL SimpleName@@fileExistedAlready @AT@ 10069 @LENGTH@ 18
------DEL Operator@@== @AT@ 10087 @LENGTH@ 2
------DEL BooleanLiteral@@false @AT@ 10091 @LENGTH@ 5
---INS PrefixExpression@@!fileExistedAlready @TO@ IfStatement@@if (fileExistedAlready == false) {  FileUtils.deleteQuietly(file);} @AT@ 10069 @LENGTH@ 19
------INS Operator@@! @TO@ PrefixExpression@@!fileExistedAlready @AT@ 10069 @LENGTH@ 1
------INS SimpleName@@fileExistedAlready @TO@ PrefixExpression@@!fileExistedAlready @AT@ 10070 @LENGTH@ 18


INS ExpressionStatement@@MethodInvocation:StepVerifier.create(this.post.getResponse().getBodyAsString()).assertNext(b -> assertThat(b).contains("An expected CSRF token cannot be found")) @TO@ MethodDeclaration@@public, void, MethodName:filterWhenPostAndEstablishedCsrfTokenAndRequestMissingTokenThenCsrfException,  @AT@ 3804 @LENGTH@ 150
---INS MethodInvocation@@StepVerifier.create(this.post.getResponse().getBodyAsString()).assertNext(b -> assertThat(b).contains("An expected CSRF token cannot be found")) @TO@ ExpressionStatement@@MethodInvocation:StepVerifier.create(this.post.getResponse().getBodyAsString()).assertNext(b -> assertThat(b).contains("An expected CSRF token cannot be found")) @AT@ 3804 @LENGTH@ 149
------INS MethodInvocation@@MethodName:create:[this.post.getResponse().getBodyAsString()] @TO@ MethodInvocation@@StepVerifier.create(this.post.getResponse().getBodyAsString()).assertNext(b -> assertThat(b).contains("An expected CSRF token cannot be found")) @AT@ 3804 @LENGTH@ 62
---------INS MethodInvocation@@this.post.getResponse().getBodyAsString() @TO@ MethodInvocation@@MethodName:create:[this.post.getResponse().getBodyAsString()] @AT@ 3824 @LENGTH@ 41
------------INS MethodInvocation@@MethodName:getResponse:[] @TO@ MethodInvocation@@this.post.getResponse().getBodyAsString() @AT@ 3824 @LENGTH@ 23
------------INS FieldAccess@@this.post @TO@ MethodInvocation@@this.post.getResponse().getBodyAsString() @AT@ 3824 @LENGTH@ 9
---------------INS ThisExpression@@this @TO@ FieldAccess@@this.post @AT@ 3824 @LENGTH@ 4
---------------INS SimpleName@@post @TO@ FieldAccess@@this.post @AT@ 3829 @LENGTH@ 4
------------INS SimpleName@@MethodName:getBodyAsString:[] @TO@ MethodInvocation@@this.post.getResponse().getBodyAsString() @AT@ 3848 @LENGTH@ 17
------INS SimpleName@@Name:StepVerifier @TO@ MethodInvocation@@StepVerifier.create(this.post.getResponse().getBodyAsString()).assertNext(b -> assertThat(b).contains("An expected CSRF token cannot be found")) @AT@ 3804 @LENGTH@ 12
------INS SimpleName@@MethodName:assertNext:[b -> assertThat(b).contains("An expected CSRF token cannot be found")] @TO@ MethodInvocation@@StepVerifier.create(this.post.getResponse().getBodyAsString()).assertNext(b -> assertThat(b).contains("An expected CSRF token cannot be found")) @AT@ 3872 @LENGTH@ 81
---------INS LambdaExpression@@b -> assertThat(b).contains("An expected CSRF token cannot be found") @TO@ SimpleName@@MethodName:assertNext:[b -> assertThat(b).contains("An expected CSRF token cannot be found")] @AT@ 3883 @LENGTH@ 69
------------INS VariableDeclarationFragment@@b @TO@ LambdaExpression@@b -> assertThat(b).contains("An expected CSRF token cannot be found") @AT@ 3883 @LENGTH@ 1
---------------INS SimpleName@@b @TO@ VariableDeclarationFragment@@b @AT@ 3883 @LENGTH@ 1
------------INS MethodInvocation@@assertThat(b).contains("An expected CSRF token cannot be found") @TO@ LambdaExpression@@b -> assertThat(b).contains("An expected CSRF token cannot be found") @AT@ 3888 @LENGTH@ 64
---------------INS MethodInvocation@@MethodName:assertThat:[b] @TO@ MethodInvocation@@assertThat(b).contains("An expected CSRF token cannot be found") @AT@ 3888 @LENGTH@ 13
------------------INS SimpleName@@b @TO@ MethodInvocation@@MethodName:assertThat:[b] @AT@ 3899 @LENGTH@ 1
---------------INS SimpleName@@MethodName:contains:["An expected CSRF token cannot be found"] @TO@ MethodInvocation@@assertThat(b).contains("An expected CSRF token cannot be found") @AT@ 3902 @LENGTH@ 50
------------------INS StringLiteral@@"An expected CSRF token cannot be found" @TO@ SimpleName@@MethodName:contains:["An expected CSRF token cannot be found"] @AT@ 3911 @LENGTH@ 40


UPD FieldDeclaration@@private, boolean, [exhausted=false] @TO@ private, boolean, [exhausted] @AT@ 1538 @LENGTH@ 34
---UPD VariableDeclarationFragment@@exhausted=false @TO@ exhausted @AT@ 1554 @LENGTH@ 17
------DEL BooleanLiteral@@false @AT@ 1566 @LENGTH@ 5


UPD TryStatement@@try {  clazz=classLoader.loadClass("org.apache.camel.impl.engine.SimpleCamelContext");  context=clazz.getDeclaredConstructor(boolean.class).newInstance(false);  clazz=classLoader.loadClass("org.apache.camel.language.simple.SimpleLanguage");  instance=clazz.getDeclaredConstructor().newInstance();  instance.getClass().getMethod("setCamelContext",CamelContext.class).invoke(instance,context);} catch (Exception e) {} @TO@ try {  clazz=classLoader.loadClass("org.apache.camel.impl.engine.SimpleCamelContext");  context=clazz.getDeclaredConstructor(boolean.class).newInstance(false);  clazz=classLoader.loadClass("org.apache.camel.language.simple.SimpleLanguage");  instance=clazz.getDeclaredConstructor().newInstance();  clazz=classLoader.loadClass("org.apache.camel.CamelContext");  instance.getClass().getMethod("setCamelContext",clazz).invoke(instance,context);} catch (Exception e) {  clazz=null;  answer.setError(e.getMessage());} @AT@ 57276 @LENGTH@ 614
---INS ExpressionStatement@@Assignment:clazz=classLoader.loadClass("org.apache.camel.CamelContext") @TO@ TryStatement@@try {  clazz=classLoader.loadClass("org.apache.camel.impl.engine.SimpleCamelContext");  context=clazz.getDeclaredConstructor(boolean.class).newInstance(false);  clazz=classLoader.loadClass("org.apache.camel.language.simple.SimpleLanguage");  instance=clazz.getDeclaredConstructor().newInstance();  instance.getClass().getMethod("setCamelContext",CamelContext.class).invoke(instance,context);} catch (Exception e) {} @AT@ 57694 @LENGTH@ 63
------INS Assignment@@clazz=classLoader.loadClass("org.apache.camel.CamelContext") @TO@ ExpressionStatement@@Assignment:clazz=classLoader.loadClass("org.apache.camel.CamelContext") @AT@ 57694 @LENGTH@ 62
---------INS SimpleName@@clazz @TO@ Assignment@@clazz=classLoader.loadClass("org.apache.camel.CamelContext") @AT@ 57694 @LENGTH@ 5
---------INS Operator@@= @TO@ Assignment@@clazz=classLoader.loadClass("org.apache.camel.CamelContext") @AT@ 57699 @LENGTH@ 1
---------INS MethodInvocation@@classLoader.loadClass("org.apache.camel.CamelContext") @TO@ Assignment@@clazz=classLoader.loadClass("org.apache.camel.CamelContext") @AT@ 57702 @LENGTH@ 54
------------INS SimpleName@@Name:classLoader @TO@ MethodInvocation@@classLoader.loadClass("org.apache.camel.CamelContext") @AT@ 57702 @LENGTH@ 11
------------INS SimpleName@@MethodName:loadClass:["org.apache.camel.CamelContext"] @TO@ MethodInvocation@@classLoader.loadClass("org.apache.camel.CamelContext") @AT@ 57714 @LENGTH@ 42
---------------INS StringLiteral@@"org.apache.camel.CamelContext" @TO@ SimpleName@@MethodName:loadClass:["org.apache.camel.CamelContext"] @AT@ 57724 @LENGTH@ 31
---UPD ExpressionStatement@@MethodInvocation:instance.getClass().getMethod("setCamelContext",CamelContext.class).invoke(instance,context) @TO@ MethodInvocation:instance.getClass().getMethod("setCamelContext",clazz).invoke(instance,context) @AT@ 57731 @LENGTH@ 95
------UPD MethodInvocation@@instance.getClass().getMethod("setCamelContext",CamelContext.class).invoke(instance,context) @TO@ instance.getClass().getMethod("setCamelContext",clazz).invoke(instance,context) @AT@ 57731 @LENGTH@ 94
---------UPD MethodInvocation@@MethodName:getMethod:["setCamelContext", CamelContext.class] @TO@ MethodName:getMethod:["setCamelContext", clazz] @AT@ 57731 @LENGTH@ 68
------------DEL TypeLiteral@@CamelContext.class @AT@ 57780 @LENGTH@ 18
------------INS SimpleName@@clazz @TO@ MethodInvocation@@MethodName:getMethod:["setCamelContext", CamelContext.class] @AT@ 57819 @LENGTH@ 5
---UPD CatchClause@@catch (Exception e) {} @TO@ catch (Exception e) {  clazz=null;  answer.setError(e.getMessage());} @AT@ 57837 @LENGTH@ 53
------INS ExpressionStatement@@Assignment:clazz=null @TO@ CatchClause@@catch (Exception e) {} @AT@ 57897 @LENGTH@ 13
---------INS Assignment@@clazz=null @TO@ ExpressionStatement@@Assignment:clazz=null @AT@ 57897 @LENGTH@ 12
------------INS SimpleName@@clazz @TO@ Assignment@@clazz=null @AT@ 57897 @LENGTH@ 5
------------INS Operator@@= @TO@ Assignment@@clazz=null @AT@ 57902 @LENGTH@ 1
------------INS NullLiteral@@null @TO@ Assignment@@clazz=null @AT@ 57905 @LENGTH@ 4
------INS ExpressionStatement@@MethodInvocation:answer.setError(e.getMessage()) @TO@ CatchClause@@catch (Exception e) {} @AT@ 57923 @LENGTH@ 32
---------INS MethodInvocation@@answer.setError(e.getMessage()) @TO@ ExpressionStatement@@MethodInvocation:answer.setError(e.getMessage()) @AT@ 57923 @LENGTH@ 31
------------INS SimpleName@@Name:answer @TO@ MethodInvocation@@answer.setError(e.getMessage()) @AT@ 57923 @LENGTH@ 6
------------INS SimpleName@@MethodName:setError:[e.getMessage()] @TO@ MethodInvocation@@answer.setError(e.getMessage()) @AT@ 57930 @LENGTH@ 24
---------------INS MethodInvocation@@e.getMessage() @TO@ SimpleName@@MethodName:setError:[e.getMessage()] @AT@ 57939 @LENGTH@ 14
------------------INS SimpleName@@Name:e @TO@ MethodInvocation@@e.getMessage() @AT@ 57939 @LENGTH@ 1
------------------INS SimpleName@@MethodName:getMessage:[] @TO@ MethodInvocation@@e.getMessage() @AT@ 57941 @LENGTH@ 12


UPD ExpressionStatement@@MethodInvocation:context.getStreamCachingStrategy().setSpoolDirectory("target/camel/cache") @TO@ MethodInvocation:context.getStreamCachingStrategy().setSpoolDirectory(testDirectory().toFile()) @AT@ 1945 @LENGTH@ 75
---UPD MethodInvocation@@context.getStreamCachingStrategy().setSpoolDirectory("target/camel/cache") @TO@ context.getStreamCachingStrategy().setSpoolDirectory(testDirectory().toFile()) @AT@ 1945 @LENGTH@ 74
------UPD SimpleName@@MethodName:setSpoolDirectory:["target/camel/cache"] @TO@ MethodName:setSpoolDirectory:[testDirectory().toFile()] @AT@ 1980 @LENGTH@ 39
---------INS MethodInvocation@@testDirectory().toFile() @TO@ SimpleName@@MethodName:setSpoolDirectory:["target/camel/cache"] @AT@ 1998 @LENGTH@ 24
------------INS MethodInvocation@@MethodName:testDirectory:[] @TO@ MethodInvocation@@testDirectory().toFile() @AT@ 1998 @LENGTH@ 15
------------INS SimpleName@@MethodName:toFile:[] @TO@ MethodInvocation@@testDirectory().toFile() @AT@ 2014 @LENGTH@ 8
---------DEL StringLiteral@@"target/camel/cache" @AT@ 1998 @LENGTH@ 20


UPD IfStatement@@if (containsPossibleCircles) {  return createQueryAndParameters(entityMetaData,queryFragments,parameters).flatMap(finalQueryAndParameters -> createExecutableQuery(domainType,renderer.render(GenericQueryAndParameters.STATEMENT),finalQueryAndParameters.getParameters()));} @TO@ if (containsPossibleCircles && !queryFragments.isScalarValueReturn()) {  return createQueryAndParameters(entityMetaData,queryFragments,parameters).flatMap(finalQueryAndParameters -> createExecutableQuery(domainType,renderer.render(GenericQueryAndParameters.STATEMENT),finalQueryAndParameters.getParameters()));} @AT@ 20240 @LENGTH@ 301
---INS InfixExpression@@containsPossibleCircles && !queryFragments.isScalarValueReturn() @TO@ IfStatement@@if (containsPossibleCircles) {  return createQueryAndParameters(entityMetaData,queryFragments,parameters).flatMap(finalQueryAndParameters -> createExecutableQuery(domainType,renderer.render(GenericQueryAndParameters.STATEMENT),finalQueryAndParameters.getParameters()));} @AT@ 20244 @LENGTH@ 64
------INS SimpleName@@containsPossibleCircles @TO@ InfixExpression@@containsPossibleCircles && !queryFragments.isScalarValueReturn() @AT@ 20244 @LENGTH@ 23
------INS Operator@@&& @TO@ InfixExpression@@containsPossibleCircles && !queryFragments.isScalarValueReturn() @AT@ 20267 @LENGTH@ 2
------INS PrefixExpression@@!queryFragments.isScalarValueReturn() @TO@ InfixExpression@@containsPossibleCircles && !queryFragments.isScalarValueReturn() @AT@ 20271 @LENGTH@ 37
---------INS Operator@@! @TO@ PrefixExpression@@!queryFragments.isScalarValueReturn() @AT@ 20271 @LENGTH@ 1
---------INS MethodInvocation@@queryFragments.isScalarValueReturn() @TO@ PrefixExpression@@!queryFragments.isScalarValueReturn() @AT@ 20272 @LENGTH@ 36
------------INS SimpleName@@Name:queryFragments @TO@ MethodInvocation@@queryFragments.isScalarValueReturn() @AT@ 20272 @LENGTH@ 14
------------INS SimpleName@@MethodName:isScalarValueReturn:[] @TO@ MethodInvocation@@queryFragments.isScalarValueReturn() @AT@ 20287 @LENGTH@ 21
---DEL SimpleName@@containsPossibleCircles @AT@ 20244 @LENGTH@ 23


INS MethodDeclaration@@Page<PersonWithAllConstructor>, MethodName:findPageByCustomQueryWithCount, @Param("aName") String aName, @Param("anotherName") String anotherName, Pageable pageable,  @TO@ TypeDeclaration@@[public]PersonRepository, [Neo4jRepository<PersonWithAllConstructor,Long>] @AT@ 5799 @LENGTH@ 122
---INS ParameterizedType@@Page<PersonWithAllConstructor> @TO@ MethodDeclaration@@Page<PersonWithAllConstructor>, MethodName:findPageByCustomQueryWithCount, @Param("aName") String aName, @Param("anotherName") String anotherName, Pageable pageable,  @AT@ 5768 @LENGTH@ 30
------INS SimpleType@@Page @TO@ ParameterizedType@@Page<PersonWithAllConstructor> @AT@ 5768 @LENGTH@ 4
------INS SimpleType@@PersonWithAllConstructor @TO@ ParameterizedType@@Page<PersonWithAllConstructor> @AT@ 5773 @LENGTH@ 24
---INS SimpleName@@MethodName:findPageByCustomQueryWithCount @TO@ MethodDeclaration@@Page<PersonWithAllConstructor>, MethodName:findPageByCustomQueryWithCount, @Param("aName") String aName, @Param("anotherName") String anotherName, Pageable pageable,  @AT@ 5799 @LENGTH@ 30
---INS SingleVariableDeclaration@@@Param("aName") String aName @TO@ MethodDeclaration@@Page<PersonWithAllConstructor>, MethodName:findPageByCustomQueryWithCount, @Param("aName") String aName, @Param("anotherName") String anotherName, Pageable pageable,  @AT@ 5830 @LENGTH@ 28
------INS SimpleType@@String @TO@ SingleVariableDeclaration@@@Param("aName") String aName @AT@ 5846 @LENGTH@ 6
------INS SimpleName@@aName @TO@ SingleVariableDeclaration@@@Param("aName") String aName @AT@ 5853 @LENGTH@ 5
---INS SingleVariableDeclaration@@@Param("anotherName") String anotherName @TO@ MethodDeclaration@@Page<PersonWithAllConstructor>, MethodName:findPageByCustomQueryWithCount, @Param("aName") String aName, @Param("anotherName") String anotherName, Pageable pageable,  @AT@ 5860 @LENGTH@ 40
------INS SimpleType@@String @TO@ SingleVariableDeclaration@@@Param("anotherName") String anotherName @AT@ 5882 @LENGTH@ 6
------INS SimpleName@@anotherName @TO@ SingleVariableDeclaration@@@Param("anotherName") String anotherName @AT@ 5889 @LENGTH@ 11
---INS SingleVariableDeclaration@@Pageable pageable @TO@ MethodDeclaration@@Page<PersonWithAllConstructor>, MethodName:findPageByCustomQueryWithCount, @Param("aName") String aName, @Param("anotherName") String anotherName, Pageable pageable,  @AT@ 5902 @LENGTH@ 17
------INS SimpleType@@Pageable @TO@ SingleVariableDeclaration@@Pageable pageable @AT@ 5902 @LENGTH@ 8
------INS SimpleName@@pageable @TO@ SingleVariableDeclaration@@Pageable pageable @AT@ 5911 @LENGTH@ 8


UPD ExpressionStatement@@Assignment:this.otherwise=AsyncProcessorConverterHelper.convert(otherwise) @TO@ Assignment:this.otherwise=otherwise != null ? AsyncProcessorConverterHelper.convert(otherwise) : null @AT@ 2200 @LENGTH@ 66
---UPD Assignment@@this.otherwise=AsyncProcessorConverterHelper.convert(otherwise) @TO@ this.otherwise=otherwise != null ? AsyncProcessorConverterHelper.convert(otherwise) : null @AT@ 2200 @LENGTH@ 65
------INS ConditionalExpression@@otherwise != null ? AsyncProcessorConverterHelper.convert(otherwise) : null @TO@ Assignment@@this.otherwise=AsyncProcessorConverterHelper.convert(otherwise) @AT@ 2217 @LENGTH@ 75
---------MOV MethodInvocation@@AsyncProcessorConverterHelper.convert(otherwise) @TO@ ConditionalExpression@@otherwise != null ? AsyncProcessorConverterHelper.convert(otherwise) : null @AT@ 2217 @LENGTH@ 48
---------INS InfixExpression@@otherwise != null @TO@ ConditionalExpression@@otherwise != null ? AsyncProcessorConverterHelper.convert(otherwise) : null @AT@ 2217 @LENGTH@ 17
------------INS SimpleName@@otherwise @TO@ InfixExpression@@otherwise != null @AT@ 2217 @LENGTH@ 9
------------INS Operator@@!= @TO@ InfixExpression@@otherwise != null @AT@ 2226 @LENGTH@ 2
------------INS NullLiteral@@null @TO@ InfixExpression@@otherwise != null @AT@ 2230 @LENGTH@ 4
---------INS NullLiteral@@null @TO@ ConditionalExpression@@otherwise != null ? AsyncProcessorConverterHelper.convert(otherwise) : null @AT@ 2288 @LENGTH@ 4


INS MethodDeclaration@@void, MethodName:customConvertersForRelsMustBeTakenIntoAccount,  @TO@ TypeDeclaration@@[@Neo4jIntegrationTest]PropertyIT,  @AT@ 8463 @LENGTH@ 507
---INS PrimitiveType@@void @TO@ MethodDeclaration@@void, MethodName:customConvertersForRelsMustBeTakenIntoAccount,  @AT@ 8458 @LENGTH@ 4
---INS SimpleName@@MethodName:customConvertersForRelsMustBeTakenIntoAccount @TO@ MethodDeclaration@@void, MethodName:customConvertersForRelsMustBeTakenIntoAccount,  @AT@ 8463 @LENGTH@ 45
---INS VariableDeclarationStatement@@Date now=new Date(); @TO@ MethodDeclaration@@void, MethodName:customConvertersForRelsMustBeTakenIntoAccount,  @AT@ 8516 @LENGTH@ 22
------INS SimpleType@@Date @TO@ VariableDeclarationStatement@@Date now=new Date(); @AT@ 8516 @LENGTH@ 4
------INS VariableDeclarationFragment@@now=new Date() @TO@ VariableDeclarationStatement@@Date now=new Date(); @AT@ 8521 @LENGTH@ 16
---------INS SimpleName@@now @TO@ VariableDeclarationFragment@@now=new Date() @AT@ 8521 @LENGTH@ 3
---------INS ClassInstanceCreation@@Date[] @TO@ VariableDeclarationFragment@@now=new Date() @AT@ 8527 @LENGTH@ 10
------------INS New@@new @TO@ ClassInstanceCreation@@Date[] @AT@ 8527 @LENGTH@ 3
------------INS SimpleType@@Date @TO@ ClassInstanceCreation@@Date[] @AT@ 8531 @LENGTH@ 4
---INS VariableDeclarationStatement@@DomainClasses.WeirdSource source=new DomainClasses.WeirdSource(now,new DomainClasses.IrrelevantTargetContainer()); @TO@ MethodDeclaration@@void, MethodName:customConvertersForRelsMustBeTakenIntoAccount,  @AT@ 8541 @LENGTH@ 117
------INS SimpleType@@DomainClasses.WeirdSource @TO@ VariableDeclarationStatement@@DomainClasses.WeirdSource source=new DomainClasses.WeirdSource(now,new DomainClasses.IrrelevantTargetContainer()); @AT@ 8541 @LENGTH@ 25
------INS VariableDeclarationFragment@@source=new DomainClasses.WeirdSource(now,new DomainClasses.IrrelevantTargetContainer()) @TO@ VariableDeclarationStatement@@DomainClasses.WeirdSource source=new DomainClasses.WeirdSource(now,new DomainClasses.IrrelevantTargetContainer()); @AT@ 8567 @LENGTH@ 90
---------INS SimpleName@@source @TO@ VariableDeclarationFragment@@source=new DomainClasses.WeirdSource(now,new DomainClasses.IrrelevantTargetContainer()) @AT@ 8567 @LENGTH@ 6
---------INS ClassInstanceCreation@@DomainClasses.WeirdSource[now, new DomainClasses.IrrelevantTargetContainer()] @TO@ VariableDeclarationFragment@@source=new DomainClasses.WeirdSource(now,new DomainClasses.IrrelevantTargetContainer()) @AT@ 8576 @LENGTH@ 81
------------INS New@@new @TO@ ClassInstanceCreation@@DomainClasses.WeirdSource[now, new DomainClasses.IrrelevantTargetContainer()] @AT@ 8576 @LENGTH@ 3
------------INS SimpleType@@DomainClasses.WeirdSource @TO@ ClassInstanceCreation@@DomainClasses.WeirdSource[now, new DomainClasses.IrrelevantTargetContainer()] @AT@ 8580 @LENGTH@ 25
------------INS SimpleName@@now @TO@ ClassInstanceCreation@@DomainClasses.WeirdSource[now, new DomainClasses.IrrelevantTargetContainer()] @AT@ 8606 @LENGTH@ 3
------------INS ClassInstanceCreation@@DomainClasses.IrrelevantTargetContainer[] @TO@ ClassInstanceCreation@@DomainClasses.WeirdSource[now, new DomainClasses.IrrelevantTargetContainer()] @AT@ 8611 @LENGTH@ 45
---------------INS New@@new @TO@ ClassInstanceCreation@@DomainClasses.IrrelevantTargetContainer[] @AT@ 8611 @LENGTH@ 3
---------------INS SimpleType@@DomainClasses.IrrelevantTargetContainer @TO@ ClassInstanceCreation@@DomainClasses.IrrelevantTargetContainer[] @AT@ 8615 @LENGTH@ 39
---INS ExpressionStatement@@MethodInvocation:template.save(source).getMyFineId() @TO@ MethodDeclaration@@void, MethodName:customConvertersForRelsMustBeTakenIntoAccount,  @AT@ 8661 @LENGTH@ 36
------INS MethodInvocation@@template.save(source).getMyFineId() @TO@ ExpressionStatement@@MethodInvocation:template.save(source).getMyFineId() @AT@ 8661 @LENGTH@ 35
---------INS MethodInvocation@@MethodName:save:[source] @TO@ MethodInvocation@@template.save(source).getMyFineId() @AT@ 8661 @LENGTH@ 21
------------INS SimpleName@@source @TO@ MethodInvocation@@MethodName:save:[source] @AT@ 8675 @LENGTH@ 6
---------INS SimpleName@@Name:template @TO@ MethodInvocation@@template.save(source).getMyFineId() @AT@ 8661 @LENGTH@ 8
---------INS SimpleName@@MethodName:getMyFineId:[] @TO@ MethodInvocation@@template.save(source).getMyFineId() @AT@ 8683 @LENGTH@ 13
---INS TryStatement@@try (Session session=driver.session()){  long cnt=session.run("MATCH (m) - [r:ITS_COMPLICATED] -> (n) WHERE m.id = $id RETURN count(m)",Collections.singletonMap("id",now.getTime())).single().get(0).asLong();  assertThat(cnt).isEqualTo(1L);}  @TO@ MethodDeclaration@@void, MethodName:customConvertersForRelsMustBeTakenIntoAccount,  @AT@ 8700 @LENGTH@ 267
------INS VariableDeclarationExpression@@Session session=driver.session() @TO@ TryStatement@@try (Session session=driver.session()){  long cnt=session.run("MATCH (m) - [r:ITS_COMPLICATED] -> (n) WHERE m.id = $id RETURN count(m)",Collections.singletonMap("id",now.getTime())).single().get(0).asLong();  assertThat(cnt).isEqualTo(1L);}  @AT@ 8705 @LENGTH@ 34
---------INS SimpleType@@Session @TO@ VariableDeclarationExpression@@Session session=driver.session() @AT@ 8705 @LENGTH@ 7
---------INS VariableDeclarationFragment@@session=driver.session() @TO@ VariableDeclarationExpression@@Session session=driver.session() @AT@ 8713 @LENGTH@ 26
------------INS SimpleName@@session @TO@ VariableDeclarationFragment@@session=driver.session() @AT@ 8713 @LENGTH@ 7
------------INS MethodInvocation@@driver.session() @TO@ VariableDeclarationFragment@@session=driver.session() @AT@ 8723 @LENGTH@ 16
---------------INS SimpleName@@Name:driver @TO@ MethodInvocation@@driver.session() @AT@ 8723 @LENGTH@ 6
---------------INS SimpleName@@MethodName:session:[] @TO@ MethodInvocation@@driver.session() @AT@ 8730 @LENGTH@ 9
------INS VariableDeclarationStatement@@long cnt=session.run("MATCH (m) - [r:ITS_COMPLICATED] -> (n) WHERE m.id = $id RETURN count(m)",Collections.singletonMap("id",now.getTime())).single().get(0).asLong(); @TO@ TryStatement@@try (Session session=driver.session()){  long cnt=session.run("MATCH (m) - [r:ITS_COMPLICATED] -> (n) WHERE m.id = $id RETURN count(m)",Collections.singletonMap("id",now.getTime())).single().get(0).asLong();  assertThat(cnt).isEqualTo(1L);}  @AT@ 8746 @LENGTH@ 183
---------INS PrimitiveType@@long @TO@ VariableDeclarationStatement@@long cnt=session.run("MATCH (m) - [r:ITS_COMPLICATED] -> (n) WHERE m.id = $id RETURN count(m)",Collections.singletonMap("id",now.getTime())).single().get(0).asLong(); @AT@ 8746 @LENGTH@ 4
---------INS VariableDeclarationFragment@@cnt=session.run("MATCH (m) - [r:ITS_COMPLICATED] -> (n) WHERE m.id = $id RETURN count(m)",Collections.singletonMap("id",now.getTime())).single().get(0).asLong() @TO@ VariableDeclarationStatement@@long cnt=session.run("MATCH (m) - [r:ITS_COMPLICATED] -> (n) WHERE m.id = $id RETURN count(m)",Collections.singletonMap("id",now.getTime())).single().get(0).asLong(); @AT@ 8751 @LENGTH@ 177
------------INS SimpleName@@cnt @TO@ VariableDeclarationFragment@@cnt=session.run("MATCH (m) - [r:ITS_COMPLICATED] -> (n) WHERE m.id = $id RETURN count(m)",Collections.singletonMap("id",now.getTime())).single().get(0).asLong() @AT@ 8751 @LENGTH@ 3
------------INS MethodInvocation@@session.run("MATCH (m) - [r:ITS_COMPLICATED] -> (n) WHERE m.id = $id RETURN count(m)",Collections.singletonMap("id",now.getTime())).single().get(0).asLong() @TO@ VariableDeclarationFragment@@cnt=session.run("MATCH (m) - [r:ITS_COMPLICATED] -> (n) WHERE m.id = $id RETURN count(m)",Collections.singletonMap("id",now.getTime())).single().get(0).asLong() @AT@ 8757 @LENGTH@ 171
---------------INS MethodInvocation@@MethodName:get:[0] @TO@ MethodInvocation@@session.run("MATCH (m) - [r:ITS_COMPLICATED] -> (n) WHERE m.id = $id RETURN count(m)",Collections.singletonMap("id",now.getTime())).single().get(0).asLong() @AT@ 8757 @LENGTH@ 162
------------------INS NumberLiteral@@0 @TO@ MethodInvocation@@MethodName:get:[0] @AT@ 8917 @LENGTH@ 1
---------------INS MethodInvocation@@MethodName:single:[] @TO@ MethodInvocation@@session.run("MATCH (m) - [r:ITS_COMPLICATED] -> (n) WHERE m.id = $id RETURN count(m)",Collections.singletonMap("id",now.getTime())).single().get(0).asLong() @AT@ 8757 @LENGTH@ 155
---------------INS MethodInvocation@@MethodName:run:["MATCH (m) - [r:ITS_COMPLICATED] -> (n) WHERE m.id = $id RETURN count(m)", Collections.singletonMap("id",now.getTime())] @TO@ MethodInvocation@@session.run("MATCH (m) - [r:ITS_COMPLICATED] -> (n) WHERE m.id = $id RETURN count(m)",Collections.singletonMap("id",now.getTime())).single().get(0).asLong() @AT@ 8757 @LENGTH@ 146
------------------INS StringLiteral@@"MATCH (m) - [r:ITS_COMPLICATED] -> (n) WHERE m.id = $id RETURN count(m)" @TO@ MethodInvocation@@MethodName:run:["MATCH (m) - [r:ITS_COMPLICATED] -> (n) WHERE m.id = $id RETURN count(m)", Collections.singletonMap("id",now.getTime())] @AT@ 8775 @LENGTH@ 73
------------------INS MethodInvocation@@Collections.singletonMap("id",now.getTime()) @TO@ MethodInvocation@@MethodName:run:["MATCH (m) - [r:ITS_COMPLICATED] -> (n) WHERE m.id = $id RETURN count(m)", Collections.singletonMap("id",now.getTime())] @AT@ 8857 @LENGTH@ 45
---------------------INS SimpleName@@Name:Collections @TO@ MethodInvocation@@Collections.singletonMap("id",now.getTime()) @AT@ 8857 @LENGTH@ 11
---------------------INS SimpleName@@MethodName:singletonMap:["id", now.getTime()] @TO@ MethodInvocation@@Collections.singletonMap("id",now.getTime()) @AT@ 8869 @LENGTH@ 33
------------------------INS StringLiteral@@"id" @TO@ SimpleName@@MethodName:singletonMap:["id", now.getTime()] @AT@ 8882 @LENGTH@ 4
------------------------INS MethodInvocation@@now.getTime() @TO@ SimpleName@@MethodName:singletonMap:["id", now.getTime()] @AT@ 8888 @LENGTH@ 13
---------------------------INS SimpleName@@Name:now @TO@ MethodInvocation@@now.getTime() @AT@ 8888 @LENGTH@ 3
---------------------------INS SimpleName@@MethodName:getTime:[] @TO@ MethodInvocation@@now.getTime() @AT@ 8892 @LENGTH@ 9
---------------INS SimpleName@@Name:session @TO@ MethodInvocation@@session.run("MATCH (m) - [r:ITS_COMPLICATED] -> (n) WHERE m.id = $id RETURN count(m)",Collections.singletonMap("id",now.getTime())).single().get(0).asLong() @AT@ 8757 @LENGTH@ 7
---------------INS SimpleName@@MethodName:asLong:[] @TO@ MethodInvocation@@session.run("MATCH (m) - [r:ITS_COMPLICATED] -> (n) WHERE m.id = $id RETURN count(m)",Collections.singletonMap("id",now.getTime())).single().get(0).asLong() @AT@ 8920 @LENGTH@ 8
------INS ExpressionStatement@@MethodInvocation:assertThat(cnt).isEqualTo(1L) @TO@ TryStatement@@try (Session session=driver.session()){  long cnt=session.run("MATCH (m) - [r:ITS_COMPLICATED] -> (n) WHERE m.id = $id RETURN count(m)",Collections.singletonMap("id",now.getTime())).single().get(0).asLong();  assertThat(cnt).isEqualTo(1L);}  @AT@ 8933 @LENGTH@ 30
---------INS MethodInvocation@@assertThat(cnt).isEqualTo(1L) @TO@ ExpressionStatement@@MethodInvocation:assertThat(cnt).isEqualTo(1L) @AT@ 8933 @LENGTH@ 29
------------INS MethodInvocation@@MethodName:assertThat:[cnt] @TO@ MethodInvocation@@assertThat(cnt).isEqualTo(1L) @AT@ 8933 @LENGTH@ 15
---------------INS SimpleName@@cnt @TO@ MethodInvocation@@MethodName:assertThat:[cnt] @AT@ 8944 @LENGTH@ 3
------------INS SimpleName@@MethodName:isEqualTo:[1L] @TO@ MethodInvocation@@assertThat(cnt).isEqualTo(1L) @AT@ 8949 @LENGTH@ 13
---------------INS NumberLiteral@@1L @TO@ SimpleName@@MethodName:isEqualTo:[1L] @AT@ 8959 @LENGTH@ 2


UPD IfStatement@@if (offset > buffer.length - length) {  throw new IndexOutOfBoundsException("Offset " + offset + " and length "+ length+ " out of bounds with buffer length "+ buffer.length);} @TO@ if (offset > bufferLength - length) {  throw new IndexOutOfBoundsException("Offset " + offset + " and length "+ length+ " out of bounds with buffer length "+ bufferLength);} @AT@ 11280 @LENGTH@ 219
---UPD InfixExpression@@offset > buffer.length - length @TO@ offset > bufferLength - length @AT@ 11284 @LENGTH@ 31
------UPD InfixExpression@@buffer.length - length @TO@ bufferLength - length @AT@ 11293 @LENGTH@ 22
---------DEL QualifiedName@@buffer.length @AT@ 11293 @LENGTH@ 13
------------DEL SimpleName@@buffer @AT@ 11293 @LENGTH@ 6
------------DEL SimpleName@@length @AT@ 11300 @LENGTH@ 6
---------INS SimpleName@@bufferLength @TO@ InfixExpression@@buffer.length - length @AT@ 11335 @LENGTH@ 12
---UPD Block@@ThenBody:{  throw new IndexOutOfBoundsException("Offset " + offset + " and length "+ length+ " out of bounds with buffer length "+ buffer.length);} @TO@ ThenBody:{  throw new IndexOutOfBoundsException("Offset " + offset + " and length "+ length+ " out of bounds with buffer length "+ bufferLength);} @AT@ 11317 @LENGTH@ 182
------UPD ThrowStatement@@ClassInstanceCreation:new IndexOutOfBoundsException("Offset " + offset + " and length "+ length+ " out of bounds with buffer length "+ buffer.length) @TO@ ClassInstanceCreation:new IndexOutOfBoundsException("Offset " + offset + " and length "+ length+ " out of bounds with buffer length "+ bufferLength) @AT@ 11331 @LENGTH@ 158
---------UPD ClassInstanceCreation@@IndexOutOfBoundsException["Offset " + offset + " and length "+ length+ " out of bounds with buffer length "+ buffer.length] @TO@ IndexOutOfBoundsException["Offset " + offset + " and length "+ length+ " out of bounds with buffer length "+ bufferLength] @AT@ 11337 @LENGTH@ 151
------------UPD InfixExpression@@"Offset " + offset + " and length "+ length+ " out of bounds with buffer length "+ buffer.length @TO@ "Offset " + offset + " and length "+ length+ " out of bounds with buffer length "+ bufferLength @AT@ 11388 @LENGTH@ 99
---------------DEL QualifiedName@@buffer.length @AT@ 11474 @LENGTH@ 13
------------------DEL SimpleName@@buffer @AT@ 11474 @LENGTH@ 6
------------------DEL SimpleName@@length @AT@ 11481 @LENGTH@ 6
---------------INS SimpleName@@bufferLength @TO@ InfixExpression@@"Offset " + offset + " and length "+ length+ " out of bounds with buffer length "+ buffer.length @AT@ 11515 @LENGTH@ 12


UPD IfStatement@@if (printer.endsWith(printerName)) {  position=i;  break;} @TO@ if (printer.endsWith(printerName) || printerName.endsWith(printer)) {  position=i;  break;} @AT@ 6611 @LENGTH@ 103
---INS InfixExpression@@printer.endsWith(printerName) || printerName.endsWith(printer) @TO@ IfStatement@@if (printer.endsWith(printerName)) {  position=i;  break;} @AT@ 6615 @LENGTH@ 62
------MOV MethodInvocation@@printer.endsWith(printerName) @TO@ InfixExpression@@printer.endsWith(printerName) || printerName.endsWith(printer) @AT@ 6615 @LENGTH@ 29
------INS Operator@@|| @TO@ InfixExpression@@printer.endsWith(printerName) || printerName.endsWith(printer) @AT@ 6644 @LENGTH@ 2
------INS MethodInvocation@@printerName.endsWith(printer) @TO@ InfixExpression@@printer.endsWith(printerName) || printerName.endsWith(printer) @AT@ 6648 @LENGTH@ 29
---------INS SimpleName@@Name:printerName @TO@ MethodInvocation@@printerName.endsWith(printer) @AT@ 6648 @LENGTH@ 11
---------INS SimpleName@@MethodName:endsWith:[printer] @TO@ MethodInvocation@@printerName.endsWith(printer) @AT@ 6660 @LENGTH@ 17
------------INS SimpleName@@printer @TO@ SimpleName@@MethodName:endsWith:[printer] @AT@ 6669 @LENGTH@ 7


INS FieldDeclaration@@String, [UNSET=new String("")] @TO@ AnnotationTypeDeclaration@@CompositeProperty @AT@ 3099 @LENGTH@ 30
---INS SimpleType@@String @TO@ FieldDeclaration@@String, [UNSET=new String("")] @AT@ 3099 @LENGTH@ 6
---INS VariableDeclarationFragment@@UNSET=new String("") @TO@ FieldDeclaration@@String, [UNSET=new String("")] @AT@ 3106 @LENGTH@ 22
------INS SimpleName@@UNSET @TO@ VariableDeclarationFragment@@UNSET=new String("") @AT@ 3106 @LENGTH@ 5
------INS ClassInstanceCreation@@String[""] @TO@ VariableDeclarationFragment@@UNSET=new String("") @AT@ 3114 @LENGTH@ 14
---------INS New@@new @TO@ ClassInstanceCreation@@String[""] @AT@ 3114 @LENGTH@ 3
---------INS SimpleType@@String @TO@ ClassInstanceCreation@@String[""] @AT@ 3118 @LENGTH@ 6
---------INS StringLiteral@@"" @TO@ ClassInstanceCreation@@String[""] @AT@ 3125 @LENGTH@ 2


UPD MethodDeclaration@@public, voidMethodName:CommandContextImpl, OutputStream output, CliInitializationException,  @TO@ public, voidMethodName:CommandContextImpl, OutputStream output, boolean enableEchoCommand, CliInitializationException,  @AT@ 20379 @LENGTH@ 1370
---UPD ExpressionStatement@@Assignment:config=CliConfigImpl.newBootConfig() @TO@ Assignment:config=CliConfigImpl.newBootConfig(enableEchoCommand) @AT@ 20498 @LENGTH@ 39
------UPD Assignment@@config=CliConfigImpl.newBootConfig() @TO@ config=CliConfigImpl.newBootConfig(enableEchoCommand) @AT@ 20498 @LENGTH@ 38
---------UPD MethodInvocation@@CliConfigImpl.newBootConfig() @TO@ CliConfigImpl.newBootConfig(enableEchoCommand) @AT@ 20507 @LENGTH@ 29
------------UPD SimpleName@@MethodName:newBootConfig:[] @TO@ MethodName:newBootConfig:[enableEchoCommand] @AT@ 20521 @LENGTH@ 15
---------------INS SimpleName@@enableEchoCommand @TO@ SimpleName@@MethodName:newBootConfig:[] @AT@ 20824 @LENGTH@ 17
---INS SingleVariableDeclaration@@boolean enableEchoCommand @TO@ MethodDeclaration@@public, voidMethodName:CommandContextImpl, OutputStream output, CliInitializationException,  @AT@ 20688 @LENGTH@ 25
------INS PrimitiveType@@boolean @TO@ SingleVariableDeclaration@@boolean enableEchoCommand @AT@ 20688 @LENGTH@ 7
------INS SimpleName@@enableEchoCommand @TO@ SingleVariableDeclaration@@boolean enableEchoCommand @AT@ 20696 @LENGTH@ 17


UPD ExpressionStatement@@MethodInvocation:this.request.setPathInfo("/saml2/service-provider-metadata/validRegistration") @TO@ MethodInvocation:this.request.setPathInfo("/saml2/service-provider-metadata/registration-id") @AT@ 5520 @LENGTH@ 79
---UPD MethodInvocation@@this.request.setPathInfo("/saml2/service-provider-metadata/validRegistration") @TO@ this.request.setPathInfo("/saml2/service-provider-metadata/registration-id") @AT@ 5520 @LENGTH@ 78
------UPD SimpleName@@MethodName:setPathInfo:["/saml2/service-provider-metadata/validRegistration"] @TO@ MethodName:setPathInfo:["/saml2/service-provider-metadata/registration-id"] @AT@ 5533 @LENGTH@ 65
---------UPD StringLiteral@@"/saml2/service-provider-metadata/validRegistration" @TO@ "/saml2/service-provider-metadata/registration-id" @AT@ 5545 @LENGTH@ 52


UPD FieldDeclaration@@private, ServerWebExchange, [post=MockServerWebExchange.from(MockServerHttpRequest.post("/"))] @TO@ private, MockServerWebExchange, [post=MockServerWebExchange.from(MockServerHttpRequest.post("/"))] @AT@ 2464 @LENGTH@ 93
---UPD SimpleType@@ServerWebExchange @TO@ MockServerWebExchange @AT@ 2472 @LENGTH@ 17


INS MethodDeclaration@@public, static, boolean, MethodName:isDirectory, final Path path, final LinkOption... options,  @TO@ TypeDeclaration@@[public, final]PathUtils,  @AT@ 31649 @LENGTH@ 159
---INS Modifier@@public @TO@ MethodDeclaration@@public, static, boolean, MethodName:isDirectory, final Path path, final LinkOption... options,  @AT@ 31649 @LENGTH@ 6
---INS Modifier@@static @TO@ MethodDeclaration@@public, static, boolean, MethodName:isDirectory, final Path path, final LinkOption... options,  @AT@ 31656 @LENGTH@ 6
---INS PrimitiveType@@boolean @TO@ MethodDeclaration@@public, static, boolean, MethodName:isDirectory, final Path path, final LinkOption... options,  @AT@ 31663 @LENGTH@ 7
---INS SimpleName@@MethodName:isDirectory @TO@ MethodDeclaration@@public, static, boolean, MethodName:isDirectory, final Path path, final LinkOption... options,  @AT@ 31671 @LENGTH@ 11
---INS SingleVariableDeclaration@@final Path path @TO@ MethodDeclaration@@public, static, boolean, MethodName:isDirectory, final Path path, final LinkOption... options,  @AT@ 31683 @LENGTH@ 15
------INS Modifier@@final @TO@ SingleVariableDeclaration@@final Path path @AT@ 31683 @LENGTH@ 5
------INS SimpleType@@Path @TO@ SingleVariableDeclaration@@final Path path @AT@ 31689 @LENGTH@ 4
------INS SimpleName@@path @TO@ SingleVariableDeclaration@@final Path path @AT@ 31694 @LENGTH@ 4
---INS SingleVariableDeclaration@@final LinkOption... options @TO@ MethodDeclaration@@public, static, boolean, MethodName:isDirectory, final Path path, final LinkOption... options,  @AT@ 31700 @LENGTH@ 27
------INS Modifier@@final @TO@ SingleVariableDeclaration@@final LinkOption... options @AT@ 31700 @LENGTH@ 5
------INS SimpleType@@LinkOption @TO@ SingleVariableDeclaration@@final LinkOption... options @AT@ 31706 @LENGTH@ 10
------INS SimpleName@@options @TO@ SingleVariableDeclaration@@final LinkOption... options @AT@ 31720 @LENGTH@ 7
---INS ReturnStatement@@ConditionalExpression:path != null ? Files.isDirectory(path,options) : false @TO@ MethodDeclaration@@public, static, boolean, MethodName:isDirectory, final Path path, final LinkOption... options,  @AT@ 31739 @LENGTH@ 63
------INS ConditionalExpression@@path != null ? Files.isDirectory(path,options) : false @TO@ ReturnStatement@@ConditionalExpression:path != null ? Files.isDirectory(path,options) : false @AT@ 31746 @LENGTH@ 55
---------INS InfixExpression@@path != null @TO@ ConditionalExpression@@path != null ? Files.isDirectory(path,options) : false @AT@ 31746 @LENGTH@ 12
------------INS SimpleName@@path @TO@ InfixExpression@@path != null @AT@ 31746 @LENGTH@ 4
------------INS Operator@@!= @TO@ InfixExpression@@path != null @AT@ 31750 @LENGTH@ 2
------------INS NullLiteral@@null @TO@ InfixExpression@@path != null @AT@ 31754 @LENGTH@ 4
---------INS MethodInvocation@@Files.isDirectory(path,options) @TO@ ConditionalExpression@@path != null ? Files.isDirectory(path,options) : false @AT@ 31761 @LENGTH@ 32
------------INS SimpleName@@Name:Files @TO@ MethodInvocation@@Files.isDirectory(path,options) @AT@ 31761 @LENGTH@ 5
------------INS SimpleName@@MethodName:isDirectory:[path, options] @TO@ MethodInvocation@@Files.isDirectory(path,options) @AT@ 31767 @LENGTH@ 26
---------------INS SimpleName@@path @TO@ SimpleName@@MethodName:isDirectory:[path, options] @AT@ 31779 @LENGTH@ 4
---------------INS SimpleName@@options @TO@ SimpleName@@MethodName:isDirectory:[path, options] @AT@ 31785 @LENGTH@ 7
---------INS BooleanLiteral@@false @TO@ ConditionalExpression@@path != null ? Files.isDirectory(path,options) : false @AT@ 31796 @LENGTH@ 5


UPD FieldDeclaration@@private, static, final, Class, [DIRECT_BUFFER_CLASS=getDirectBufferClass()] @TO@ private, static, final, Class<?>, [DIRECT_BUFFER_CLASS=getDirectBufferClass()] @AT@ 1768 @LENGTH@ 72
---INS ParameterizedType@@Class<?> @TO@ FieldDeclaration@@private, static, final, Class, [DIRECT_BUFFER_CLASS=getDirectBufferClass()] @AT@ 1789 @LENGTH@ 8
------INS SimpleType@@Class @TO@ ParameterizedType@@Class<?> @AT@ 1789 @LENGTH@ 5
------INS WildcardType@@? @TO@ ParameterizedType@@Class<?> @AT@ 1795 @LENGTH@ 1
---DEL SimpleType@@Class @AT@ 1789 @LENGTH@ 5


UPD ExpressionStatement@@MethodInvocation:assertThat(transform("dateFromParts(y, m, d, h, mm, s, ms, 'UTC')")).isEqualTo(Document.parse("{ \"$dateFromParts\" : {\"year\" : \"$y\", \"month\" : \"$m\", \"day\" : \"$d\", \"hour\" : \"$h\",  \"minute\" : \"$mm\",  \"second\" : \"$s\", \"milliseconds\" : \"$ms\", \"timezone\" : \"UTC\"}}")) @TO@ MethodInvocation:assertThat(transform("dateFromParts(y, m, d, h, mm, s, ms, 'UTC')")).isEqualTo(Document.parse("{ \"$dateFromParts\" : {\"year\" : \"$y\", \"month\" : \"$m\", \"day\" : \"$d\", \"hour\" : \"$h\",  \"minute\" : \"$mm\",  \"second\" : \"$s\", \"millisecond\" : \"$ms\", \"timezone\" : \"UTC\"}}")) @AT@ 33917 @LENGTH@ 301
---UPD MethodInvocation@@assertThat(transform("dateFromParts(y, m, d, h, mm, s, ms, 'UTC')")).isEqualTo(Document.parse("{ \"$dateFromParts\" : {\"year\" : \"$y\", \"month\" : \"$m\", \"day\" : \"$d\", \"hour\" : \"$h\",  \"minute\" : \"$mm\",  \"second\" : \"$s\", \"milliseconds\" : \"$ms\", \"timezone\" : \"UTC\"}}")) @TO@ assertThat(transform("dateFromParts(y, m, d, h, mm, s, ms, 'UTC')")).isEqualTo(Document.parse("{ \"$dateFromParts\" : {\"year\" : \"$y\", \"month\" : \"$m\", \"day\" : \"$d\", \"hour\" : \"$h\",  \"minute\" : \"$mm\",  \"second\" : \"$s\", \"millisecond\" : \"$ms\", \"timezone\" : \"UTC\"}}")) @AT@ 33917 @LENGTH@ 300
------UPD SimpleName@@MethodName:isEqualTo:[Document.parse("{ \"$dateFromParts\" : {\"year\" : \"$y\", \"month\" : \"$m\", \"day\" : \"$d\", \"hour\" : \"$h\",  \"minute\" : \"$mm\",  \"second\" : \"$s\", \"milliseconds\" : \"$ms\", \"timezone\" : \"UTC\"}}")] @TO@ MethodName:isEqualTo:[Document.parse("{ \"$dateFromParts\" : {\"year\" : \"$y\", \"month\" : \"$m\", \"day\" : \"$d\", \"hour\" : \"$h\",  \"minute\" : \"$mm\",  \"second\" : \"$s\", \"millisecond\" : \"$ms\", \"timezone\" : \"UTC\"}}")] @AT@ 33986 @LENGTH@ 231
---------UPD MethodInvocation@@Document.parse("{ \"$dateFromParts\" : {\"year\" : \"$y\", \"month\" : \"$m\", \"day\" : \"$d\", \"hour\" : \"$h\",  \"minute\" : \"$mm\",  \"second\" : \"$s\", \"milliseconds\" : \"$ms\", \"timezone\" : \"UTC\"}}") @TO@ Document.parse("{ \"$dateFromParts\" : {\"year\" : \"$y\", \"month\" : \"$m\", \"day\" : \"$d\", \"hour\" : \"$h\",  \"minute\" : \"$mm\",  \"second\" : \"$s\", \"millisecond\" : \"$ms\", \"timezone\" : \"UTC\"}}") @AT@ 33996 @LENGTH@ 220
------------UPD SimpleName@@MethodName:parse:["{ \"$dateFromParts\" : {\"year\" : \"$y\", \"month\" : \"$m\", \"day\" : \"$d\", \"hour\" : \"$h\",  \"minute\" : \"$mm\",  \"second\" : \"$s\", \"milliseconds\" : \"$ms\", \"timezone\" : \"UTC\"}}"] @TO@ MethodName:parse:["{ \"$dateFromParts\" : {\"year\" : \"$y\", \"month\" : \"$m\", \"day\" : \"$d\", \"hour\" : \"$h\",  \"minute\" : \"$mm\",  \"second\" : \"$s\", \"millisecond\" : \"$ms\", \"timezone\" : \"UTC\"}}"] @AT@ 34005 @LENGTH@ 211
---------------UPD StringLiteral@@"{ \"$dateFromParts\" : {\"year\" : \"$y\", \"month\" : \"$m\", \"day\" : \"$d\", \"hour\" : \"$h\",  \"minute\" : \"$mm\",  \"second\" : \"$s\", \"milliseconds\" : \"$ms\", \"timezone\" : \"UTC\"}}" @TO@ "{ \"$dateFromParts\" : {\"year\" : \"$y\", \"month\" : \"$m\", \"day\" : \"$d\", \"hour\" : \"$h\",  \"minute\" : \"$mm\",  \"second\" : \"$s\", \"millisecond\" : \"$ms\", \"timezone\" : \"UTC\"}}" @AT@ 34016 @LENGTH@ 199


UPD ThrowStatement@@ClassInstanceCreation:new UnsupportedOperationException("UTF-16 requested when runninng on an IBM JDK with broken UTF-16 support. " + "Please find a JDK that supports UTF-16 if you intend to use UF-16 with WriterOutputStream") @TO@ ClassInstanceCreation:new UnsupportedOperationException("UTF-16 requested when running on an IBM JDK with broken UTF-16 support. " + "Please find a JDK that supports UTF-16 if you intend to use UF-16 with WriterOutputStream") @AT@ 13929 @LENGTH@ 235
---UPD ClassInstanceCreation@@UnsupportedOperationException["UTF-16 requested when runninng on an IBM JDK with broken UTF-16 support. " + "Please find a JDK that supports UTF-16 if you intend to use UF-16 with WriterOutputStream"] @TO@ UnsupportedOperationException["UTF-16 requested when running on an IBM JDK with broken UTF-16 support. " + "Please find a JDK that supports UTF-16 if you intend to use UF-16 with WriterOutputStream"] @AT@ 13935 @LENGTH@ 228
------UPD InfixExpression@@"UTF-16 requested when runninng on an IBM JDK with broken UTF-16 support. " + "Please find a JDK that supports UTF-16 if you intend to use UF-16 with WriterOutputStream" @TO@ "UTF-16 requested when running on an IBM JDK with broken UTF-16 support. " + "Please find a JDK that supports UTF-16 if you intend to use UF-16 with WriterOutputStream" @AT@ 13969 @LENGTH@ 193
---------UPD StringLiteral@@"UTF-16 requested when runninng on an IBM JDK with broken UTF-16 support. " @TO@ "UTF-16 requested when running on an IBM JDK with broken UTF-16 support. " @AT@ 13969 @LENGTH@ 75


UPD MethodDeclaration@@public, static, void, MethodName:initWebTest,  @TO@ public, static, void, MethodName:initWebTest, HttpServletRequest request,  @AT@ 1289 @LENGTH@ 253
---DEL VariableDeclarationStatement@@MockHttpServletRequest request=new MockHttpServletRequest(); @AT@ 1327 @LENGTH@ 62
------DEL SimpleType@@MockHttpServletRequest @AT@ 1327 @LENGTH@ 22
------DEL VariableDeclarationFragment@@request=new MockHttpServletRequest() @AT@ 1350 @LENGTH@ 38
---------DEL SimpleName@@request @AT@ 1350 @LENGTH@ 7
---------DEL ClassInstanceCreation@@MockHttpServletRequest[] @AT@ 1360 @LENGTH@ 28
------------DEL New@@new @AT@ 1360 @LENGTH@ 3
------------DEL SimpleType@@MockHttpServletRequest @AT@ 1364 @LENGTH@ 22
---INS SingleVariableDeclaration@@HttpServletRequest request @TO@ MethodDeclaration@@public, static, void, MethodName:initWebTest,  @AT@ 1575 @LENGTH@ 26
------INS SimpleType@@HttpServletRequest @TO@ SingleVariableDeclaration@@HttpServletRequest request @AT@ 1575 @LENGTH@ 18
------INS SimpleName@@request @TO@ SingleVariableDeclaration@@HttpServletRequest request @AT@ 1594 @LENGTH@ 7


UPD ReturnStatement@@InfixExpression:(parameterTypes != null) && (parameterTypes.length == 3 || (parameterTypes.length == 4 && Exchange.class.isAssignableFrom(parameterTypes[1])) && (TypeConverterRegistry.class.isAssignableFrom(parameterTypes[parameterTypes.length - 1]))) @TO@ InfixExpression:parameterTypes.length == 3 || parameterTypes.length == 4 && Exchange.class.isAssignableFrom(parameterTypes[1]) && TypeConverterRegistry.class.isAssignableFrom(parameterTypes[parameterTypes.length - 1]) @AT@ 19173 @LENGTH@ 283
---DEL InfixExpression@@(parameterTypes != null) && (parameterTypes.length == 3 || (parameterTypes.length == 4 && Exchange.class.isAssignableFrom(parameterTypes[1])) && (TypeConverterRegistry.class.isAssignableFrom(parameterTypes[parameterTypes.length - 1]))) @AT@ 19180 @LENGTH@ 275
------DEL ParenthesizedExpression@@(parameterTypes != null) @AT@ 19180 @LENGTH@ 24
---------DEL InfixExpression@@parameterTypes != null @AT@ 19181 @LENGTH@ 22
------------DEL SimpleName@@parameterTypes @AT@ 19181 @LENGTH@ 14
------------DEL Operator@@!= @AT@ 19195 @LENGTH@ 2
------------DEL NullLiteral@@null @AT@ 19199 @LENGTH@ 4
------DEL Operator@@&& @AT@ 19204 @LENGTH@ 2
------DEL ParenthesizedExpression@@(parameterTypes.length == 3 || (parameterTypes.length == 4 && Exchange.class.isAssignableFrom(parameterTypes[1])) && (TypeConverterRegistry.class.isAssignableFrom(parameterTypes[parameterTypes.length - 1]))) @AT@ 19208 @LENGTH@ 247
---MOV InfixExpression@@parameterTypes.length == 3 || (parameterTypes.length == 4 && Exchange.class.isAssignableFrom(parameterTypes[1])) && (TypeConverterRegistry.class.isAssignableFrom(parameterTypes[parameterTypes.length - 1])) @TO@ ReturnStatement@@InfixExpression:(parameterTypes != null) && (parameterTypes.length == 3 || (parameterTypes.length == 4 && Exchange.class.isAssignableFrom(parameterTypes[1])) && (TypeConverterRegistry.class.isAssignableFrom(parameterTypes[parameterTypes.length - 1]))) @AT@ 19209 @LENGTH@ 245
------UPD InfixExpression@@(parameterTypes.length == 4 && Exchange.class.isAssignableFrom(parameterTypes[1])) && (TypeConverterRegistry.class.isAssignableFrom(parameterTypes[parameterTypes.length - 1])) @TO@ parameterTypes.length == 4 && Exchange.class.isAssignableFrom(parameterTypes[1]) && TypeConverterRegistry.class.isAssignableFrom(parameterTypes[parameterTypes.length - 1]) @AT@ 19255 @LENGTH@ 199
---------DEL ParenthesizedExpression@@(parameterTypes.length == 4 && Exchange.class.isAssignableFrom(parameterTypes[1])) @AT@ 19255 @LENGTH@ 82
---------MOV InfixExpression@@parameterTypes.length == 4 && Exchange.class.isAssignableFrom(parameterTypes[1]) @TO@ InfixExpression@@(parameterTypes.length == 4 && Exchange.class.isAssignableFrom(parameterTypes[1])) && (TypeConverterRegistry.class.isAssignableFrom(parameterTypes[parameterTypes.length - 1])) @AT@ 19256 @LENGTH@ 80
---------DEL ParenthesizedExpression@@(TypeConverterRegistry.class.isAssignableFrom(parameterTypes[parameterTypes.length - 1])) @AT@ 19365 @LENGTH@ 89
---------MOV MethodInvocation@@TypeConverterRegistry.class.isAssignableFrom(parameterTypes[parameterTypes.length - 1]) @TO@ InfixExpression@@(parameterTypes.length == 4 && Exchange.class.isAssignableFrom(parameterTypes[1])) && (TypeConverterRegistry.class.isAssignableFrom(parameterTypes[parameterTypes.length - 1])) @AT@ 19366 @LENGTH@ 87


UPD VariableDeclarationStatement@@Optional<Long> relationshipInternalId=neo4jClient.query(renderer.render(statementHolder.getStatement())).in(inDatabase).bind(convertIdValues(targetEntity.getRequiredIdProperty(),fromId)).to(Constants.FROM_ID_PARAMETER_NAME).bind(relatedInternalId).to(Constants.TO_ID_PARAMETER_NAME).bindAll(statementHolder.getProperties()).fetchAs(Long.class).one(); @TO@ Optional<Long> relationshipInternalId=neo4jClient.query(renderer.render(statementHolder.getStatement())).in(inDatabase).bind(convertIdValues(sourceEntity.getRequiredIdProperty(),fromId)).to(Constants.FROM_ID_PARAMETER_NAME).bind(relatedInternalId).to(Constants.TO_ID_PARAMETER_NAME).bindAll(statementHolder.getProperties()).fetchAs(Long.class).one(); @AT@ 22879 @LENGTH@ 406
---UPD VariableDeclarationFragment@@relationshipInternalId=neo4jClient.query(renderer.render(statementHolder.getStatement())).in(inDatabase).bind(convertIdValues(targetEntity.getRequiredIdProperty(),fromId)).to(Constants.FROM_ID_PARAMETER_NAME).bind(relatedInternalId).to(Constants.TO_ID_PARAMETER_NAME).bindAll(statementHolder.getProperties()).fetchAs(Long.class).one() @TO@ relationshipInternalId=neo4jClient.query(renderer.render(statementHolder.getStatement())).in(inDatabase).bind(convertIdValues(sourceEntity.getRequiredIdProperty(),fromId)).to(Constants.FROM_ID_PARAMETER_NAME).bind(relatedInternalId).to(Constants.TO_ID_PARAMETER_NAME).bindAll(statementHolder.getProperties()).fetchAs(Long.class).one() @AT@ 22894 @LENGTH@ 390
------UPD MethodInvocation@@neo4jClient.query(renderer.render(statementHolder.getStatement())).in(inDatabase).bind(convertIdValues(targetEntity.getRequiredIdProperty(),fromId)).to(Constants.FROM_ID_PARAMETER_NAME).bind(relatedInternalId).to(Constants.TO_ID_PARAMETER_NAME).bindAll(statementHolder.getProperties()).fetchAs(Long.class).one() @TO@ neo4jClient.query(renderer.render(statementHolder.getStatement())).in(inDatabase).bind(convertIdValues(sourceEntity.getRequiredIdProperty(),fromId)).to(Constants.FROM_ID_PARAMETER_NAME).bind(relatedInternalId).to(Constants.TO_ID_PARAMETER_NAME).bindAll(statementHolder.getProperties()).fetchAs(Long.class).one() @AT@ 22919 @LENGTH@ 365
---------UPD MethodInvocation@@MethodName:bind:[convertIdValues(targetEntity.getRequiredIdProperty(),fromId)] @TO@ MethodName:bind:[convertIdValues(sourceEntity.getRequiredIdProperty(),fromId)] @AT@ 22919 @LENGTH@ 156
------------UPD MethodInvocation@@convertIdValues(targetEntity.getRequiredIdProperty(),fromId) @TO@ convertIdValues(sourceEntity.getRequiredIdProperty(),fromId) @AT@ 23013 @LENGTH@ 61
---------------UPD SimpleName@@MethodName:convertIdValues:[targetEntity.getRequiredIdProperty(), fromId] @TO@ MethodName:convertIdValues:[sourceEntity.getRequiredIdProperty(), fromId] @AT@ 23013 @LENGTH@ 61
------------------UPD MethodInvocation@@targetEntity.getRequiredIdProperty() @TO@ sourceEntity.getRequiredIdProperty() @AT@ 23029 @LENGTH@ 36
---------------------UPD SimpleName@@Name:targetEntity @TO@ Name:sourceEntity @AT@ 23029 @LENGTH@ 12


INS ExpressionStatement@@MethodInvocation:SecurityContextHolder.clearContext() @TO@ MethodDeclaration@@public, void, MethodName:setUp,  @AT@ 1980 @LENGTH@ 37
---INS MethodInvocation@@SecurityContextHolder.clearContext() @TO@ ExpressionStatement@@MethodInvocation:SecurityContextHolder.clearContext() @AT@ 1980 @LENGTH@ 36
------INS SimpleName@@Name:SecurityContextHolder @TO@ MethodInvocation@@SecurityContextHolder.clearContext() @AT@ 1980 @LENGTH@ 21
------INS SimpleName@@MethodName:clearContext:[] @TO@ MethodInvocation@@SecurityContextHolder.clearContext() @AT@ 2002 @LENGTH@ 14


INS MethodDeclaration@@public, boolean, MethodName:equals, Object o,  @TO@ TypeDeclaration@@[@API(status=API.Status.INTERNAL), public, final, static]RelationshipPropertiesWithEntityHolder,  @AT@ 3893 @LENGTH@ 359
---INS Modifier@@public @TO@ MethodDeclaration@@public, boolean, MethodName:equals, Object o,  @AT@ 3893 @LENGTH@ 6
---INS PrimitiveType@@boolean @TO@ MethodDeclaration@@public, boolean, MethodName:equals, Object o,  @AT@ 3900 @LENGTH@ 7
---INS SimpleName@@MethodName:equals @TO@ MethodDeclaration@@public, boolean, MethodName:equals, Object o,  @AT@ 3908 @LENGTH@ 6
---INS SingleVariableDeclaration@@Object o @TO@ MethodDeclaration@@public, boolean, MethodName:equals, Object o,  @AT@ 3915 @LENGTH@ 8
------INS SimpleType@@Object @TO@ SingleVariableDeclaration@@Object o @AT@ 3915 @LENGTH@ 6
------INS SimpleName@@o @TO@ SingleVariableDeclaration@@Object o @AT@ 3922 @LENGTH@ 1
---INS IfStatement@@if (this == o) {  return true;} @TO@ MethodDeclaration@@public, boolean, MethodName:equals, Object o,  @AT@ 3930 @LENGTH@ 38
------INS InfixExpression@@this == o @TO@ IfStatement@@if (this == o) {  return true;} @AT@ 3934 @LENGTH@ 9
---------INS ThisExpression@@this @TO@ InfixExpression@@this == o @AT@ 3934 @LENGTH@ 4
---------INS Operator@@== @TO@ InfixExpression@@this == o @AT@ 3938 @LENGTH@ 2
---------INS SimpleName@@o @TO@ InfixExpression@@this == o @AT@ 3942 @LENGTH@ 1
------INS Block@@ThenBody:{  return true;} @TO@ IfStatement@@if (this == o) {  return true;} @AT@ 3945 @LENGTH@ 23
---------INS ReturnStatement@@BooleanLiteral:true @TO@ Block@@ThenBody:{  return true;} @AT@ 3951 @LENGTH@ 12
------------INS BooleanLiteral@@true @TO@ ReturnStatement@@BooleanLiteral:true @AT@ 3958 @LENGTH@ 4
---INS IfStatement@@if (o == null || getClass() != o.getClass()) {  return false;} @TO@ MethodDeclaration@@public, boolean, MethodName:equals, Object o,  @AT@ 3972 @LENGTH@ 69
------INS InfixExpression@@o == null || getClass() != o.getClass() @TO@ IfStatement@@if (o == null || getClass() != o.getClass()) {  return false;} @AT@ 3976 @LENGTH@ 39
---------INS InfixExpression@@o == null @TO@ InfixExpression@@o == null || getClass() != o.getClass() @AT@ 3976 @LENGTH@ 9
------------INS SimpleName@@o @TO@ InfixExpression@@o == null @AT@ 3976 @LENGTH@ 1
------------INS Operator@@== @TO@ InfixExpression@@o == null @AT@ 3977 @LENGTH@ 2
------------INS NullLiteral@@null @TO@ InfixExpression@@o == null @AT@ 3981 @LENGTH@ 4
---------INS Operator@@|| @TO@ InfixExpression@@o == null || getClass() != o.getClass() @AT@ 3985 @LENGTH@ 2
---------INS InfixExpression@@getClass() != o.getClass() @TO@ InfixExpression@@o == null || getClass() != o.getClass() @AT@ 3989 @LENGTH@ 26
------------INS MethodInvocation@@MethodName:getClass:[] @TO@ InfixExpression@@getClass() != o.getClass() @AT@ 3989 @LENGTH@ 10
------------INS Operator@@!= @TO@ InfixExpression@@getClass() != o.getClass() @AT@ 3999 @LENGTH@ 2
------------INS MethodInvocation@@o.getClass() @TO@ InfixExpression@@getClass() != o.getClass() @AT@ 4003 @LENGTH@ 12
---------------INS SimpleName@@Name:o @TO@ MethodInvocation@@o.getClass() @AT@ 4003 @LENGTH@ 1
---------------INS SimpleName@@MethodName:getClass:[] @TO@ MethodInvocation@@o.getClass() @AT@ 4005 @LENGTH@ 10
------INS Block@@ThenBody:{  return false;} @TO@ IfStatement@@if (o == null || getClass() != o.getClass()) {  return false;} @AT@ 4017 @LENGTH@ 24
---------INS ReturnStatement@@BooleanLiteral:false @TO@ Block@@ThenBody:{  return false;} @AT@ 4023 @LENGTH@ 13
------------INS BooleanLiteral@@false @TO@ ReturnStatement@@BooleanLiteral:false @AT@ 4030 @LENGTH@ 5
---INS VariableDeclarationStatement@@RelationshipPropertiesWithEntityHolder that=(RelationshipPropertiesWithEntityHolder)o; @TO@ MethodDeclaration@@public, boolean, MethodName:equals, Object o,  @AT@ 4045 @LENGTH@ 89
------INS SimpleType@@RelationshipPropertiesWithEntityHolder @TO@ VariableDeclarationStatement@@RelationshipPropertiesWithEntityHolder that=(RelationshipPropertiesWithEntityHolder)o; @AT@ 4045 @LENGTH@ 38
------INS VariableDeclarationFragment@@that=(RelationshipPropertiesWithEntityHolder)o @TO@ VariableDeclarationStatement@@RelationshipPropertiesWithEntityHolder that=(RelationshipPropertiesWithEntityHolder)o; @AT@ 4084 @LENGTH@ 49
---------INS SimpleName@@that @TO@ VariableDeclarationFragment@@that=(RelationshipPropertiesWithEntityHolder)o @AT@ 4084 @LENGTH@ 4
---------INS CastExpression@@(RelationshipPropertiesWithEntityHolder)o @TO@ VariableDeclarationFragment@@that=(RelationshipPropertiesWithEntityHolder)o @AT@ 4091 @LENGTH@ 42
------------INS SimpleType@@RelationshipPropertiesWithEntityHolder @TO@ CastExpression@@(RelationshipPropertiesWithEntityHolder)o @AT@ 4092 @LENGTH@ 38
------------INS SimpleName@@o @TO@ CastExpression@@(RelationshipPropertiesWithEntityHolder)o @AT@ 4132 @LENGTH@ 1
---INS ReturnStatement@@InfixExpression:relationshipProperties.equals(that.relationshipProperties) && relatedEntity.equals(that.relatedEntity) @TO@ MethodDeclaration@@public, boolean, MethodName:equals, Object o,  @AT@ 4138 @LENGTH@ 110
------INS InfixExpression@@relationshipProperties.equals(that.relationshipProperties) && relatedEntity.equals(that.relatedEntity) @TO@ ReturnStatement@@InfixExpression:relationshipProperties.equals(that.relationshipProperties) && relatedEntity.equals(that.relatedEntity) @AT@ 4145 @LENGTH@ 102
---------INS MethodInvocation@@relationshipProperties.equals(that.relationshipProperties) @TO@ InfixExpression@@relationshipProperties.equals(that.relationshipProperties) && relatedEntity.equals(that.relatedEntity) @AT@ 4145 @LENGTH@ 58
------------INS SimpleName@@Name:relationshipProperties @TO@ MethodInvocation@@relationshipProperties.equals(that.relationshipProperties) @AT@ 4145 @LENGTH@ 22
------------INS SimpleName@@MethodName:equals:[that.relationshipProperties] @TO@ MethodInvocation@@relationshipProperties.equals(that.relationshipProperties) @AT@ 4168 @LENGTH@ 35
---------------INS QualifiedName@@that.relationshipProperties @TO@ SimpleName@@MethodName:equals:[that.relationshipProperties] @AT@ 4175 @LENGTH@ 27
------------------INS SimpleName@@that @TO@ QualifiedName@@that.relationshipProperties @AT@ 4175 @LENGTH@ 4
------------------INS SimpleName@@relationshipProperties @TO@ QualifiedName@@that.relationshipProperties @AT@ 4180 @LENGTH@ 22
---------INS Operator@@&& @TO@ InfixExpression@@relationshipProperties.equals(that.relationshipProperties) && relatedEntity.equals(that.relatedEntity) @AT@ 4203 @LENGTH@ 2
---------INS MethodInvocation@@relatedEntity.equals(that.relatedEntity) @TO@ InfixExpression@@relationshipProperties.equals(that.relationshipProperties) && relatedEntity.equals(that.relatedEntity) @AT@ 4207 @LENGTH@ 40
------------INS SimpleName@@Name:relatedEntity @TO@ MethodInvocation@@relatedEntity.equals(that.relatedEntity) @AT@ 4207 @LENGTH@ 13
------------INS SimpleName@@MethodName:equals:[that.relatedEntity] @TO@ MethodInvocation@@relatedEntity.equals(that.relatedEntity) @AT@ 4221 @LENGTH@ 26
---------------INS QualifiedName@@that.relatedEntity @TO@ SimpleName@@MethodName:equals:[that.relatedEntity] @AT@ 4228 @LENGTH@ 18
------------------INS SimpleName@@that @TO@ QualifiedName@@that.relatedEntity @AT@ 4228 @LENGTH@ 4
------------------INS SimpleName@@relatedEntity @TO@ QualifiedName@@that.relatedEntity @AT@ 4233 @LENGTH@ 13


UPD FieldDeclaration@@private, boolean, [canGetSet=false] @TO@ private, boolean, [canGetSet] @AT@ 12037 @LENGTH@ 34
---UPD VariableDeclarationFragment@@canGetSet=false @TO@ canGetSet @AT@ 12053 @LENGTH@ 17
------DEL BooleanLiteral@@false @AT@ 12065 @LENGTH@ 5


UPD IfStatement@@if (LlapIoImpl.LOG.isDebugEnabled()) {  LlapIoImpl.LOG.debug("Processing slice #" + stripeIx + " "+ sliceStr+ "; has"+ ((cacheData == null) ? " no" : "")+ " cache data; has"+ ((diskData == null) ? " no" : "")+ " disk data");} @TO@ if (LlapIoImpl.LOG.isDebugEnabled()) {  String sliceStr=cacheData == null ? "null" : cacheData.toCoordinateString();  LlapIoImpl.LOG.debug("Processing slice #" + stripeIx + " "+ sliceStr+ "; has"+ ((cacheData == null) ? " no" : "")+ " cache data; has"+ ((diskData == null) ? " no" : "")+ " disk data");} @AT@ 52437 @LENGTH@ 257
---UPD Block@@ThenBody:{  LlapIoImpl.LOG.debug("Processing slice #" + stripeIx + " "+ sliceStr+ "; has"+ ((cacheData == null) ? " no" : "")+ " cache data; has"+ ((diskData == null) ? " no" : "")+ " disk data");} @TO@ ThenBody:{  String sliceStr=cacheData == null ? "null" : cacheData.toCoordinateString();  LlapIoImpl.LOG.debug("Processing slice #" + stripeIx + " "+ sliceStr+ "; has"+ ((cacheData == null) ? " no" : "")+ " cache data; has"+ ((diskData == null) ? " no" : "")+ " disk data");} @AT@ 52474 @LENGTH@ 220
------MOV VariableDeclarationStatement@@String sliceStr=cacheData == null ? "null" : cacheData.toCoordinateString(); @TO@ Block@@ThenBody:{  LlapIoImpl.LOG.debug("Processing slice #" + stripeIx + " "+ sliceStr+ "; has"+ ((cacheData == null) ? " no" : "")+ " cache data; has"+ ((diskData == null) ? " no" : "")+ " disk data");} @AT@ 52354 @LENGTH@ 78


INS MethodDeclaration@@public, int, MethodName:hashCode,  @TO@ TypeDeclaration@@[@API(status=API.Status.INTERNAL), public, final, static]RelationshipPropertiesWithEntityHolder,  @AT@ 4268 @LENGTH@ 90
---INS Modifier@@public @TO@ MethodDeclaration@@public, int, MethodName:hashCode,  @AT@ 4268 @LENGTH@ 6
---INS PrimitiveType@@int @TO@ MethodDeclaration@@public, int, MethodName:hashCode,  @AT@ 4275 @LENGTH@ 3
---INS SimpleName@@MethodName:hashCode @TO@ MethodDeclaration@@public, int, MethodName:hashCode,  @AT@ 4279 @LENGTH@ 8
---INS ReturnStatement@@MethodInvocation:Objects.hash(relationshipProperties,relatedEntity) @TO@ MethodDeclaration@@public, int, MethodName:hashCode,  @AT@ 4295 @LENGTH@ 59
------INS MethodInvocation@@Objects.hash(relationshipProperties,relatedEntity) @TO@ ReturnStatement@@MethodInvocation:Objects.hash(relationshipProperties,relatedEntity) @AT@ 4302 @LENGTH@ 51
---------INS SimpleName@@Name:Objects @TO@ MethodInvocation@@Objects.hash(relationshipProperties,relatedEntity) @AT@ 4302 @LENGTH@ 7
---------INS SimpleName@@MethodName:hash:[relationshipProperties, relatedEntity] @TO@ MethodInvocation@@Objects.hash(relationshipProperties,relatedEntity) @AT@ 4310 @LENGTH@ 43
------------INS SimpleName@@relationshipProperties @TO@ SimpleName@@MethodName:hash:[relationshipProperties, relatedEntity] @AT@ 4315 @LENGTH@ 22
------------INS SimpleName@@relatedEntity @TO@ SimpleName@@MethodName:hash:[relationshipProperties, relatedEntity] @AT@ 4339 @LENGTH@ 13


INS MethodDeclaration@@public, int, MethodName:hashCode,  @TO@ TypeDeclaration@@TransactionOnCompletion, SynchronizationAdapter @AT@ 2157 @LENGTH@ 94
---INS Modifier@@public @TO@ MethodDeclaration@@public, int, MethodName:hashCode,  @AT@ 2157 @LENGTH@ 6
---INS PrimitiveType@@int @TO@ MethodDeclaration@@public, int, MethodName:hashCode,  @AT@ 2164 @LENGTH@ 3
---INS SimpleName@@MethodName:hashCode @TO@ MethodDeclaration@@public, int, MethodName:hashCode,  @AT@ 2168 @LENGTH@ 8
---INS ReturnStatement@@MethodInvocation:Objects.hash(super.hashCode(),session,message) @TO@ MethodDeclaration@@public, int, MethodName:hashCode,  @AT@ 2189 @LENGTH@ 56
------INS MethodInvocation@@Objects.hash(super.hashCode(),session,message) @TO@ ReturnStatement@@MethodInvocation:Objects.hash(super.hashCode(),session,message) @AT@ 2196 @LENGTH@ 48
---------INS SimpleName@@Name:Objects @TO@ MethodInvocation@@Objects.hash(super.hashCode(),session,message) @AT@ 2196 @LENGTH@ 7
---------INS SimpleName@@MethodName:hash:[super.hashCode(), session, message] @TO@ MethodInvocation@@Objects.hash(super.hashCode(),session,message) @AT@ 2204 @LENGTH@ 40
------------INS SuperMethodInvocation@@super.hashCode() @TO@ SimpleName@@MethodName:hash:[super.hashCode(), session, message] @AT@ 2209 @LENGTH@ 16
---------------INS SimpleName@@MethodName:hashCode:[] @TO@ SuperMethodInvocation@@super.hashCode() @AT@ 2215 @LENGTH@ 8
------------INS SimpleName@@session @TO@ SimpleName@@MethodName:hash:[super.hashCode(), session, message] @AT@ 2227 @LENGTH@ 7
------------INS SimpleName@@message @TO@ SimpleName@@MethodName:hash:[super.hashCode(), session, message] @AT@ 2236 @LENGTH@ 7


UPD IfStatement@@if (handover && uow != null) {  uow.handoverSynchronization(copy,filter);} @TO@ if (handover) {  exchange.adapt(ExtendedExchange.class).handoverCompletions(ce);} @AT@ 14368 @LENGTH@ 95
---INS SimpleName@@handover @TO@ IfStatement@@if (handover && uow != null) {  uow.handoverSynchronization(copy,filter);} @AT@ 14220 @LENGTH@ 8
---DEL InfixExpression@@handover && uow != null @AT@ 14372 @LENGTH@ 23
------DEL SimpleName@@handover @AT@ 14372 @LENGTH@ 8
------DEL Operator@@&& @AT@ 14380 @LENGTH@ 2
------DEL InfixExpression@@uow != null @AT@ 14384 @LENGTH@ 11
---------DEL SimpleName@@uow @AT@ 14384 @LENGTH@ 3
---------DEL Operator@@!= @AT@ 14387 @LENGTH@ 2
---------DEL NullLiteral@@null @AT@ 14391 @LENGTH@ 4
---UPD Block@@ThenBody:{  uow.handoverSynchronization(copy,filter);} @TO@ ThenBody:{  exchange.adapt(ExtendedExchange.class).handoverCompletions(ce);} @AT@ 14397 @LENGTH@ 66
------UPD ExpressionStatement@@MethodInvocation:uow.handoverSynchronization(copy,filter) @TO@ MethodInvocation:exchange.adapt(ExtendedExchange.class).handoverCompletions(ce) @AT@ 14411 @LENGTH@ 42
---------UPD MethodInvocation@@uow.handoverSynchronization(copy,filter) @TO@ exchange.adapt(ExtendedExchange.class).handoverCompletions(ce) @AT@ 14411 @LENGTH@ 41
------------INS MethodInvocation@@MethodName:adapt:[ExtendedExchange.class] @TO@ MethodInvocation@@uow.handoverSynchronization(copy,filter) @AT@ 14313 @LENGTH@ 38
---------------INS TypeLiteral@@ExtendedExchange.class @TO@ MethodInvocation@@MethodName:adapt:[ExtendedExchange.class] @AT@ 14328 @LENGTH@ 22
------------UPD SimpleName@@Name:uow @TO@ Name:exchange @AT@ 14411 @LENGTH@ 3
------------UPD SimpleName@@MethodName:handoverSynchronization:[copy, filter] @TO@ MethodName:handoverCompletions:[ce] @AT@ 14415 @LENGTH@ 37
---------------UPD SimpleName@@copy @TO@ ce @AT@ 14439 @LENGTH@ 4
---------------DEL SimpleName@@filter @AT@ 14445 @LENGTH@ 6


UPD IfStatement@@if ((type1 instanceof Class) && ((Class<?>)type1).isPrimitive()) {  type1=PRIMITIVE_TO_WRAPPERS_MAP.get(type1);} @TO@ if (type1 instanceof Class && ((Class<?>)type1).isPrimitive()) {  type1=PRIMITIVE_TO_WRAPPERS_MAP.get(type1);} @AT@ 2448 @LENGTH@ 135
---UPD InfixExpression@@(type1 instanceof Class) && ((Class<?>)type1).isPrimitive() @TO@ type1 instanceof Class && ((Class<?>)type1).isPrimitive() @AT@ 2452 @LENGTH@ 60
------DEL ParenthesizedExpression@@(type1 instanceof Class) @AT@ 2452 @LENGTH@ 24
---------DEL InstanceofExpression@@type1 instanceof Class @AT@ 2453 @LENGTH@ 22
------INS InstanceofExpression@@type1 instanceof Class @TO@ InfixExpression@@(type1 instanceof Class) && ((Class<?>)type1).isPrimitive() @AT@ 2452 @LENGTH@ 22
---------MOV SimpleName@@type1 @TO@ InstanceofExpression@@type1 instanceof Class @AT@ 2453 @LENGTH@ 5
---------MOV Instanceof@@instanceof @TO@ InstanceofExpression@@type1 instanceof Class @AT@ 2459 @LENGTH@ 10
---------MOV SimpleType@@Class @TO@ InstanceofExpression@@type1 instanceof Class @AT@ 2470 @LENGTH@ 5


INS MethodDeclaration@@public, static, void, MethodName:resetAllAutoAssignedNodeIds, ProcessorDefinition<?> node,  @TO@ TypeDeclaration@@[public, final]ProcessorDefinitionHelper,  @AT@ 8207 @LENGTH@ 732
---INS Modifier@@public @TO@ MethodDeclaration@@public, static, void, MethodName:resetAllAutoAssignedNodeIds, ProcessorDefinition<?> node,  @AT@ 8207 @LENGTH@ 6
---INS Modifier@@static @TO@ MethodDeclaration@@public, static, void, MethodName:resetAllAutoAssignedNodeIds, ProcessorDefinition<?> node,  @AT@ 8214 @LENGTH@ 6
---INS PrimitiveType@@void @TO@ MethodDeclaration@@public, static, void, MethodName:resetAllAutoAssignedNodeIds, ProcessorDefinition<?> node,  @AT@ 8221 @LENGTH@ 4
---INS SimpleName@@MethodName:resetAllAutoAssignedNodeIds @TO@ MethodDeclaration@@public, static, void, MethodName:resetAllAutoAssignedNodeIds, ProcessorDefinition<?> node,  @AT@ 8226 @LENGTH@ 27
---INS SingleVariableDeclaration@@ProcessorDefinition<?> node @TO@ MethodDeclaration@@public, static, void, MethodName:resetAllAutoAssignedNodeIds, ProcessorDefinition<?> node,  @AT@ 8254 @LENGTH@ 27
------INS ParameterizedType@@ProcessorDefinition<?> @TO@ SingleVariableDeclaration@@ProcessorDefinition<?> node @AT@ 8254 @LENGTH@ 22
---------INS SimpleType@@ProcessorDefinition @TO@ ParameterizedType@@ProcessorDefinition<?> @AT@ 8254 @LENGTH@ 19
---------INS WildcardType@@? @TO@ ParameterizedType@@ProcessorDefinition<?> @AT@ 8274 @LENGTH@ 1
------INS SimpleName@@node @TO@ SingleVariableDeclaration@@ProcessorDefinition<?> node @AT@ 8277 @LENGTH@ 4
---INS IfStatement@@if (node == null) {  return;} @TO@ MethodDeclaration@@public, static, void, MethodName:resetAllAutoAssignedNodeIds, ProcessorDefinition<?> node,  @AT@ 8293 @LENGTH@ 49
------INS InfixExpression@@node == null @TO@ IfStatement@@if (node == null) {  return;} @AT@ 8297 @LENGTH@ 12
---------INS SimpleName@@node @TO@ InfixExpression@@node == null @AT@ 8297 @LENGTH@ 4
---------INS Operator@@== @TO@ InfixExpression@@node == null @AT@ 8301 @LENGTH@ 2
---------INS NullLiteral@@null @TO@ InfixExpression@@node == null @AT@ 8305 @LENGTH@ 4
------INS Block@@ThenBody:{  return;} @TO@ IfStatement@@if (node == null) {  return;} @AT@ 8311 @LENGTH@ 31
---------INS ReturnStatement@@ @TO@ Block@@ThenBody:{  return;} @AT@ 8325 @LENGTH@ 7
---INS IfStatement@@if (node.isAbstract()) {  return;} @TO@ MethodDeclaration@@public, static, void, MethodName:resetAllAutoAssignedNodeIds, ProcessorDefinition<?> node,  @AT@ 8377 @LENGTH@ 54
------INS MethodInvocation@@node.isAbstract() @TO@ IfStatement@@if (node.isAbstract()) {  return;} @AT@ 8381 @LENGTH@ 17
---------INS SimpleName@@Name:node @TO@ MethodInvocation@@node.isAbstract() @AT@ 8381 @LENGTH@ 4
---------INS SimpleName@@MethodName:isAbstract:[] @TO@ MethodInvocation@@node.isAbstract() @AT@ 8386 @LENGTH@ 12
------INS Block@@ThenBody:{  return;} @TO@ IfStatement@@if (node.isAbstract()) {  return;} @AT@ 8400 @LENGTH@ 31
---------INS ReturnStatement@@ @TO@ Block@@ThenBody:{  return;} @AT@ 8414 @LENGTH@ 7
---INS IfStatement@@if (node.getId() != null) {  if (!node.hasCustomIdAssigned()) {    node.setId(null);  }} @TO@ MethodDeclaration@@public, static, void, MethodName:resetAllAutoAssignedNodeIds, ProcessorDefinition<?> node,  @AT@ 8441 @LENGTH@ 132
------INS InfixExpression@@node.getId() != null @TO@ IfStatement@@if (node.getId() != null) {  if (!node.hasCustomIdAssigned()) {    node.setId(null);  }} @AT@ 8445 @LENGTH@ 20
---------INS MethodInvocation@@node.getId() @TO@ InfixExpression@@node.getId() != null @AT@ 8445 @LENGTH@ 12
------------INS SimpleName@@Name:node @TO@ MethodInvocation@@node.getId() @AT@ 8445 @LENGTH@ 4
------------INS SimpleName@@MethodName:getId:[] @TO@ MethodInvocation@@node.getId() @AT@ 8450 @LENGTH@ 7
---------INS Operator@@!= @TO@ InfixExpression@@node.getId() != null @AT@ 8457 @LENGTH@ 2
---------INS NullLiteral@@null @TO@ InfixExpression@@node.getId() != null @AT@ 8461 @LENGTH@ 4
------INS Block@@ThenBody:{  if (!node.hasCustomIdAssigned()) {    node.setId(null);  }} @TO@ IfStatement@@if (node.getId() != null) {  if (!node.hasCustomIdAssigned()) {    node.setId(null);  }} @AT@ 8467 @LENGTH@ 106
---------INS IfStatement@@if (!node.hasCustomIdAssigned()) {  node.setId(null);} @TO@ Block@@ThenBody:{  if (!node.hasCustomIdAssigned()) {    node.setId(null);  }} @AT@ 8481 @LENGTH@ 82
------------INS PrefixExpression@@!node.hasCustomIdAssigned() @TO@ IfStatement@@if (!node.hasCustomIdAssigned()) {  node.setId(null);} @AT@ 8485 @LENGTH@ 27
---------------INS Operator@@! @TO@ PrefixExpression@@!node.hasCustomIdAssigned() @AT@ 8485 @LENGTH@ 1
---------------INS MethodInvocation@@node.hasCustomIdAssigned() @TO@ PrefixExpression@@!node.hasCustomIdAssigned() @AT@ 8486 @LENGTH@ 26
------------------INS SimpleName@@Name:node @TO@ MethodInvocation@@node.hasCustomIdAssigned() @AT@ 8486 @LENGTH@ 4
------------------INS SimpleName@@MethodName:hasCustomIdAssigned:[] @TO@ MethodInvocation@@node.hasCustomIdAssigned() @AT@ 8491 @LENGTH@ 21
------------INS Block@@ThenBody:{  node.setId(null);} @TO@ IfStatement@@if (!node.hasCustomIdAssigned()) {  node.setId(null);} @AT@ 8514 @LENGTH@ 49
---------------INS ExpressionStatement@@MethodInvocation:node.setId(null) @TO@ Block@@ThenBody:{  node.setId(null);} @AT@ 8532 @LENGTH@ 17
------------------INS MethodInvocation@@node.setId(null) @TO@ ExpressionStatement@@MethodInvocation:node.setId(null) @AT@ 8532 @LENGTH@ 16
---------------------INS SimpleName@@Name:node @TO@ MethodInvocation@@node.setId(null) @AT@ 8532 @LENGTH@ 4
---------------------INS SimpleName@@MethodName:setId:[null] @TO@ MethodInvocation@@node.setId(null) @AT@ 8537 @LENGTH@ 11
------------------------INS NullLiteral@@null @TO@ SimpleName@@MethodName:setId:[null] @AT@ 8543 @LENGTH@ 4
---INS VariableDeclarationStatement@@List<ProcessorDefinition<?>> children=node.getOutputs(); @TO@ MethodDeclaration@@public, static, void, MethodName:resetAllAutoAssignedNodeIds, ProcessorDefinition<?> node,  @AT@ 8642 @LENGTH@ 58
------INS ParameterizedType@@List<ProcessorDefinition<?>> @TO@ VariableDeclarationStatement@@List<ProcessorDefinition<?>> children=node.getOutputs(); @AT@ 8642 @LENGTH@ 28
---------INS SimpleType@@List @TO@ ParameterizedType@@List<ProcessorDefinition<?>> @AT@ 8642 @LENGTH@ 4
---------INS ParameterizedType@@ProcessorDefinition<?> @TO@ ParameterizedType@@List<ProcessorDefinition<?>> @AT@ 8647 @LENGTH@ 22
------------INS SimpleType@@ProcessorDefinition @TO@ ParameterizedType@@ProcessorDefinition<?> @AT@ 8647 @LENGTH@ 19
------------INS WildcardType@@? @TO@ ParameterizedType@@ProcessorDefinition<?> @AT@ 8667 @LENGTH@ 1
------INS VariableDeclarationFragment@@children=node.getOutputs() @TO@ VariableDeclarationStatement@@List<ProcessorDefinition<?>> children=node.getOutputs(); @AT@ 8671 @LENGTH@ 28
---------INS SimpleName@@children @TO@ VariableDeclarationFragment@@children=node.getOutputs() @AT@ 8671 @LENGTH@ 8
---------INS MethodInvocation@@node.getOutputs() @TO@ VariableDeclarationFragment@@children=node.getOutputs() @AT@ 8682 @LENGTH@ 17
------------INS SimpleName@@Name:node @TO@ MethodInvocation@@node.getOutputs() @AT@ 8682 @LENGTH@ 4
------------INS SimpleName@@MethodName:getOutputs:[] @TO@ MethodInvocation@@node.getOutputs() @AT@ 8687 @LENGTH@ 12
---INS IfStatement@@if (children != null && !children.isEmpty()) {  for (  ProcessorDefinition<?> child : children) {    resetAllAutoAssignedNodeIds(child);  }} @TO@ MethodDeclaration@@public, static, void, MethodName:resetAllAutoAssignedNodeIds, ProcessorDefinition<?> node,  @AT@ 8709 @LENGTH@ 224
------INS InfixExpression@@children != null && !children.isEmpty() @TO@ IfStatement@@if (children != null && !children.isEmpty()) {  for (  ProcessorDefinition<?> child : children) {    resetAllAutoAssignedNodeIds(child);  }} @AT@ 8713 @LENGTH@ 39
---------INS InfixExpression@@children != null @TO@ InfixExpression@@children != null && !children.isEmpty() @AT@ 8713 @LENGTH@ 16
------------INS SimpleName@@children @TO@ InfixExpression@@children != null @AT@ 8713 @LENGTH@ 8
------------INS Operator@@!= @TO@ InfixExpression@@children != null @AT@ 8721 @LENGTH@ 2
------------INS NullLiteral@@null @TO@ InfixExpression@@children != null @AT@ 8725 @LENGTH@ 4
---------INS Operator@@&& @TO@ InfixExpression@@children != null && !children.isEmpty() @AT@ 8729 @LENGTH@ 2
---------INS PrefixExpression@@!children.isEmpty() @TO@ InfixExpression@@children != null && !children.isEmpty() @AT@ 8733 @LENGTH@ 19
------------INS Operator@@! @TO@ PrefixExpression@@!children.isEmpty() @AT@ 8733 @LENGTH@ 1
------------INS MethodInvocation@@children.isEmpty() @TO@ PrefixExpression@@!children.isEmpty() @AT@ 8734 @LENGTH@ 18
---------------INS SimpleName@@Name:children @TO@ MethodInvocation@@children.isEmpty() @AT@ 8734 @LENGTH@ 8
---------------INS SimpleName@@MethodName:isEmpty:[] @TO@ MethodInvocation@@children.isEmpty() @AT@ 8743 @LENGTH@ 9
------INS Block@@ThenBody:{  for (  ProcessorDefinition<?> child : children) {    resetAllAutoAssignedNodeIds(child);  }} @TO@ IfStatement@@if (children != null && !children.isEmpty()) {  for (  ProcessorDefinition<?> child : children) {    resetAllAutoAssignedNodeIds(child);  }} @AT@ 8754 @LENGTH@ 179
---------INS EnhancedForStatement@@for (ProcessorDefinition<?> child : children) {  resetAllAutoAssignedNodeIds(child);} @TO@ Block@@ThenBody:{  for (  ProcessorDefinition<?> child : children) {    resetAllAutoAssignedNodeIds(child);  }} @AT@ 8768 @LENGTH@ 155
------------INS SingleVariableDeclaration@@ProcessorDefinition<?> child @TO@ EnhancedForStatement@@for (ProcessorDefinition<?> child : children) {  resetAllAutoAssignedNodeIds(child);} @AT@ 8773 @LENGTH@ 28
---------------INS ParameterizedType@@ProcessorDefinition<?> @TO@ SingleVariableDeclaration@@ProcessorDefinition<?> child @AT@ 8773 @LENGTH@ 22
------------------INS SimpleType@@ProcessorDefinition @TO@ ParameterizedType@@ProcessorDefinition<?> @AT@ 8773 @LENGTH@ 19
------------------INS WildcardType@@? @TO@ ParameterizedType@@ProcessorDefinition<?> @AT@ 8793 @LENGTH@ 1
---------------INS SimpleName@@child @TO@ SingleVariableDeclaration@@ProcessorDefinition<?> child @AT@ 8796 @LENGTH@ 5
------------INS SimpleName@@children @TO@ EnhancedForStatement@@for (ProcessorDefinition<?> child : children) {  resetAllAutoAssignedNodeIds(child);} @AT@ 8804 @LENGTH@ 8
------------INS ExpressionStatement@@MethodInvocation:resetAllAutoAssignedNodeIds(child) @TO@ EnhancedForStatement@@for (ProcessorDefinition<?> child : children) {  resetAllAutoAssignedNodeIds(child);} @AT@ 8874 @LENGTH@ 35
---------------INS MethodInvocation@@resetAllAutoAssignedNodeIds(child) @TO@ ExpressionStatement@@MethodInvocation:resetAllAutoAssignedNodeIds(child) @AT@ 8874 @LENGTH@ 34
------------------INS SimpleName@@MethodName:resetAllAutoAssignedNodeIds:[child] @TO@ MethodInvocation@@resetAllAutoAssignedNodeIds(child) @AT@ 8874 @LENGTH@ 34
---------------------INS SimpleName@@child @TO@ SimpleName@@MethodName:resetAllAutoAssignedNodeIds:[child] @AT@ 8902 @LENGTH@ 5


UPD ReturnStatement@@MethodInvocation:chainedComparator((Comparator<E>[])comparators.toArray(new Comparator[comparators.size()])) @TO@ MethodInvocation:chainedComparator((Comparator<E>[])comparators.toArray(new Comparator[0])) @AT@ 4153 @LENGTH@ 122
---UPD MethodInvocation@@chainedComparator((Comparator<E>[])comparators.toArray(new Comparator[comparators.size()])) @TO@ chainedComparator((Comparator<E>[])comparators.toArray(new Comparator[0])) @AT@ 4160 @LENGTH@ 114
------UPD SimpleName@@MethodName:chainedComparator:[(Comparator<E>[])comparators.toArray(new Comparator[comparators.size()])] @TO@ MethodName:chainedComparator:[(Comparator<E>[])comparators.toArray(new Comparator[0])] @AT@ 4160 @LENGTH@ 114
---------UPD CastExpression@@(Comparator<E>[])comparators.toArray(new Comparator[comparators.size()]) @TO@ (Comparator<E>[])comparators.toArray(new Comparator[0]) @AT@ 4191 @LENGTH@ 73
------------UPD MethodInvocation@@comparators.toArray(new Comparator[comparators.size()]) @TO@ comparators.toArray(new Comparator[0]) @AT@ 4209 @LENGTH@ 55
---------------UPD SimpleName@@MethodName:toArray:[new Comparator[comparators.size()]] @TO@ MethodName:toArray:[new Comparator[0]] @AT@ 4221 @LENGTH@ 43
------------------UPD ArrayCreation@@new Comparator[comparators.size()] @TO@ new Comparator[0] @AT@ 4229 @LENGTH@ 34
---------------------DEL MethodInvocation@@comparators.size() @AT@ 4244 @LENGTH@ 18
------------------------DEL SimpleName@@Name:comparators @AT@ 4244 @LENGTH@ 11
------------------------DEL SimpleName@@MethodName:size:[] @AT@ 4256 @LENGTH@ 6
---------------------INS NumberLiteral@@0 @TO@ ArrayCreation@@new Comparator[comparators.size()] @AT@ 4244 @LENGTH@ 1


UPD ReturnStatement@@PrefixExpression:!(simpleTypeHolder.isSimpleType(targetType) || this.mappingContext.hasCustomWriteTarget(targetType) || isAnnotationPresent(TargetNode.class)|| isComposite()) @TO@ PrefixExpression:!(simpleTypeHolder.isSimpleType(targetType) || this.mappingContext.hasCustomWriteTarget(targetType) || isAnnotationPresent(TargetNode.class)|| isComposite()|| isAnnotationPresent(ConvertWith.class)) @AT@ 2932 @LENGTH@ 171
---UPD PrefixExpression@@!(simpleTypeHolder.isSimpleType(targetType) || this.mappingContext.hasCustomWriteTarget(targetType) || isAnnotationPresent(TargetNode.class)|| isComposite()) @TO@ !(simpleTypeHolder.isSimpleType(targetType) || this.mappingContext.hasCustomWriteTarget(targetType) || isAnnotationPresent(TargetNode.class)|| isComposite()|| isAnnotationPresent(ConvertWith.class)) @AT@ 2939 @LENGTH@ 163
------UPD ParenthesizedExpression@@(simpleTypeHolder.isSimpleType(targetType) || this.mappingContext.hasCustomWriteTarget(targetType) || isAnnotationPresent(TargetNode.class)|| isComposite()) @TO@ (simpleTypeHolder.isSimpleType(targetType) || this.mappingContext.hasCustomWriteTarget(targetType) || isAnnotationPresent(TargetNode.class)|| isComposite()|| isAnnotationPresent(ConvertWith.class)) @AT@ 2940 @LENGTH@ 162
---------UPD InfixExpression@@simpleTypeHolder.isSimpleType(targetType) || this.mappingContext.hasCustomWriteTarget(targetType) || isAnnotationPresent(TargetNode.class)|| isComposite() @TO@ simpleTypeHolder.isSimpleType(targetType) || this.mappingContext.hasCustomWriteTarget(targetType) || isAnnotationPresent(TargetNode.class)|| isComposite()|| isAnnotationPresent(ConvertWith.class) @AT@ 2941 @LENGTH@ 160
------------INS MethodInvocation@@isAnnotationPresent(ConvertWith.class) @TO@ InfixExpression@@simpleTypeHolder.isSimpleType(targetType) || this.mappingContext.hasCustomWriteTarget(targetType) || isAnnotationPresent(TargetNode.class)|| isComposite() @AT@ 3169 @LENGTH@ 38
---------------INS SimpleName@@MethodName:isAnnotationPresent:[ConvertWith.class] @TO@ MethodInvocation@@isAnnotationPresent(ConvertWith.class) @AT@ 3169 @LENGTH@ 38
------------------INS TypeLiteral@@ConvertWith.class @TO@ SimpleName@@MethodName:isAnnotationPresent:[ConvertWith.class] @AT@ 3189 @LENGTH@ 17


DEL TryStatement@@try {  new OperatorGraph(pctx).toDot(new java.io.File("/tmp/0.full.dot"));  new OperatorGraph(pctx).implode().toDot(new java.io.File("/tmp/0.joins.dot"));} catch (Exception e1) {  throw new RuntimeException(e1);} @AT@ 6540 @LENGTH@ 237
---DEL ExpressionStatement@@MethodInvocation:new OperatorGraph(pctx).toDot(new java.io.File("/tmp/0.full.dot")) @AT@ 6552 @LENGTH@ 67
------DEL MethodInvocation@@new OperatorGraph(pctx).toDot(new java.io.File("/tmp/0.full.dot")) @AT@ 6552 @LENGTH@ 66
---------DEL ClassInstanceCreation@@OperatorGraph[pctx] @AT@ 6552 @LENGTH@ 23
------------DEL New@@new @AT@ 6552 @LENGTH@ 3
------------DEL SimpleType@@OperatorGraph @AT@ 6556 @LENGTH@ 13
------------DEL SimpleName@@pctx @AT@ 6570 @LENGTH@ 4
---------DEL SimpleName@@MethodName:toDot:[new java.io.File("/tmp/0.full.dot")] @AT@ 6576 @LENGTH@ 42
------------DEL ClassInstanceCreation@@java.io.File["/tmp/0.full.dot"] @AT@ 6582 @LENGTH@ 35
---------------DEL New@@new @AT@ 6582 @LENGTH@ 3
---------------DEL SimpleType@@java.io.File @AT@ 6586 @LENGTH@ 12
---------------DEL StringLiteral@@"/tmp/0.full.dot" @AT@ 6599 @LENGTH@ 17
---DEL ExpressionStatement@@MethodInvocation:new OperatorGraph(pctx).implode().toDot(new java.io.File("/tmp/0.joins.dot")) @AT@ 6626 @LENGTH@ 78
------DEL MethodInvocation@@new OperatorGraph(pctx).implode().toDot(new java.io.File("/tmp/0.joins.dot")) @AT@ 6626 @LENGTH@ 77
---------DEL MethodInvocation@@MethodName:implode:[] @AT@ 6626 @LENGTH@ 33
---------DEL ClassInstanceCreation@@OperatorGraph[pctx] @AT@ 6626 @LENGTH@ 23
------------DEL New@@new @AT@ 6626 @LENGTH@ 3
------------DEL SimpleType@@OperatorGraph @AT@ 6630 @LENGTH@ 13
------------DEL SimpleName@@pctx @AT@ 6644 @LENGTH@ 4
---------DEL SimpleName@@MethodName:toDot:[new java.io.File("/tmp/0.joins.dot")] @AT@ 6660 @LENGTH@ 43
------------DEL ClassInstanceCreation@@java.io.File["/tmp/0.joins.dot"] @AT@ 6666 @LENGTH@ 36
---------------DEL New@@new @AT@ 6666 @LENGTH@ 3
---------------DEL SimpleType@@java.io.File @AT@ 6670 @LENGTH@ 12
---------------DEL StringLiteral@@"/tmp/0.joins.dot" @AT@ 6683 @LENGTH@ 18
---DEL CatchClause@@catch (Exception e1) {  throw new RuntimeException(e1);} @AT@ 6711 @LENGTH@ 66
------DEL SingleVariableDeclaration@@Exception e1 @AT@ 6718 @LENGTH@ 12
---------DEL SimpleType@@Exception @AT@ 6718 @LENGTH@ 9
---------DEL SimpleName@@e1 @AT@ 6728 @LENGTH@ 2
------DEL ThrowStatement@@ClassInstanceCreation:new RuntimeException(e1) @AT@ 6740 @LENGTH@ 31
---------DEL ClassInstanceCreation@@RuntimeException[e1] @AT@ 6746 @LENGTH@ 24
------------DEL New@@new @AT@ 6746 @LENGTH@ 3
------------DEL SimpleType@@RuntimeException @AT@ 6750 @LENGTH@ 16
------------DEL SimpleName@@e1 @AT@ 6767 @LENGTH@ 2


INS MethodDeclaration@@T, T, MethodName:getSafeCopyProperty, String key, Class<T> type,  @TO@ TypeDeclaration@@[public]ExtendedExchange, [Exchange] @AT@ 7464 @LENGTH@ 47
---INS SimpleType@@T @TO@ MethodDeclaration@@T, T, MethodName:getSafeCopyProperty, String key, Class<T> type,  @AT@ 7462 @LENGTH@ 1
---INS SimpleName@@MethodName:getSafeCopyProperty @TO@ MethodDeclaration@@T, T, MethodName:getSafeCopyProperty, String key, Class<T> type,  @AT@ 7464 @LENGTH@ 19
---INS SingleVariableDeclaration@@String key @TO@ MethodDeclaration@@T, T, MethodName:getSafeCopyProperty, String key, Class<T> type,  @AT@ 7484 @LENGTH@ 10
------INS SimpleType@@String @TO@ SingleVariableDeclaration@@String key @AT@ 7484 @LENGTH@ 6
------INS SimpleName@@key @TO@ SingleVariableDeclaration@@String key @AT@ 7491 @LENGTH@ 3
---INS SingleVariableDeclaration@@Class<T> type @TO@ MethodDeclaration@@T, T, MethodName:getSafeCopyProperty, String key, Class<T> type,  @AT@ 7496 @LENGTH@ 13
------INS ParameterizedType@@Class<T> @TO@ SingleVariableDeclaration@@Class<T> type @AT@ 7496 @LENGTH@ 8
---------INS SimpleType@@Class @TO@ ParameterizedType@@Class<T> @AT@ 7496 @LENGTH@ 5
---------INS SimpleType@@T @TO@ ParameterizedType@@Class<T> @AT@ 7502 @LENGTH@ 1
------INS SimpleName@@type @TO@ SingleVariableDeclaration@@Class<T> type @AT@ 7505 @LENGTH@ 4


UPD EnhancedForStatement@@for (Resource resource : resources) {  final String extension=FileUtil.onlyExt(resource.getLocation(),true);  if (ObjectHelper.isEmpty(extension)) {    throw new IllegalArgumentException("Unable to determine extension for resource: " + resource.getLocation());  }  answer.add(getLoader(extension).loadRoutesBuilder(resource));} @TO@ for (Resource resource : resources) {  final String extension=FileUtil.onlyExt(resource.getLocation(),true);  if (ObjectHelper.isEmpty(extension)) {    throw new IllegalArgumentException("Unable to determine file extension for resource: " + resource.getLocation());  }  answer.add(getRoutesLoader(extension).loadRoutesBuilder(resource));} @AT@ 2127 @LENGTH@ 457
---UPD IfStatement@@if (ObjectHelper.isEmpty(extension)) {  throw new IllegalArgumentException("Unable to determine extension for resource: " + resource.getLocation());} @TO@ if (ObjectHelper.isEmpty(extension)) {  throw new IllegalArgumentException("Unable to determine file extension for resource: " + resource.getLocation());} @AT@ 2322 @LENGTH@ 177
------UPD Block@@ThenBody:{  throw new IllegalArgumentException("Unable to determine extension for resource: " + resource.getLocation());} @TO@ ThenBody:{  throw new IllegalArgumentException("Unable to determine file extension for resource: " + resource.getLocation());} @AT@ 2359 @LENGTH@ 140
---------UPD ThrowStatement@@ClassInstanceCreation:new IllegalArgumentException("Unable to determine extension for resource: " + resource.getLocation()) @TO@ ClassInstanceCreation:new IllegalArgumentException("Unable to determine file extension for resource: " + resource.getLocation()) @AT@ 2377 @LENGTH@ 108
------------UPD ClassInstanceCreation@@IllegalArgumentException["Unable to determine extension for resource: " + resource.getLocation()] @TO@ IllegalArgumentException["Unable to determine file extension for resource: " + resource.getLocation()] @AT@ 2383 @LENGTH@ 101
---------------UPD InfixExpression@@"Unable to determine extension for resource: " + resource.getLocation() @TO@ "Unable to determine file extension for resource: " + resource.getLocation() @AT@ 2412 @LENGTH@ 71
------------------UPD StringLiteral@@"Unable to determine extension for resource: " @TO@ "Unable to determine file extension for resource: " @AT@ 2412 @LENGTH@ 46
---UPD ExpressionStatement@@MethodInvocation:answer.add(getLoader(extension).loadRoutesBuilder(resource)) @TO@ MethodInvocation:answer.add(getRoutesLoader(extension).loadRoutesBuilder(resource)) @AT@ 2513 @LENGTH@ 61
------UPD MethodInvocation@@answer.add(getLoader(extension).loadRoutesBuilder(resource)) @TO@ answer.add(getRoutesLoader(extension).loadRoutesBuilder(resource)) @AT@ 2513 @LENGTH@ 60
---------UPD SimpleName@@MethodName:add:[getLoader(extension).loadRoutesBuilder(resource)] @TO@ MethodName:add:[getRoutesLoader(extension).loadRoutesBuilder(resource)] @AT@ 2520 @LENGTH@ 53
------------UPD MethodInvocation@@getLoader(extension).loadRoutesBuilder(resource) @TO@ getRoutesLoader(extension).loadRoutesBuilder(resource) @AT@ 2524 @LENGTH@ 48
---------------UPD MethodInvocation@@MethodName:getLoader:[extension] @TO@ MethodName:getRoutesLoader:[extension] @AT@ 2524 @LENGTH@ 20


UPD ExpressionStatement@@Assignment:this.listener=new LettuceMessageListener(listener,listener instanceof SubscriptionListener ? (SubscriptionListener)listener : SubscriptionListener.EMPTY) @TO@ Assignment:this.listener=new LettuceMessageListener(listener,listener instanceof SubscriptionListener ? (SubscriptionListener)listener : SubscriptionListener.NO_OP_SUBSCRIPTION_LISTENER) @AT@ 2354 @LENGTH@ 162
---UPD Assignment@@this.listener=new LettuceMessageListener(listener,listener instanceof SubscriptionListener ? (SubscriptionListener)listener : SubscriptionListener.EMPTY) @TO@ this.listener=new LettuceMessageListener(listener,listener instanceof SubscriptionListener ? (SubscriptionListener)listener : SubscriptionListener.NO_OP_SUBSCRIPTION_LISTENER) @AT@ 2354 @LENGTH@ 161
------UPD ClassInstanceCreation@@LettuceMessageListener[listener, listener instanceof SubscriptionListener ? (SubscriptionListener)listener : SubscriptionListener.EMPTY] @TO@ LettuceMessageListener[listener, listener instanceof SubscriptionListener ? (SubscriptionListener)listener : SubscriptionListener.NO_OP_SUBSCRIPTION_LISTENER] @AT@ 2370 @LENGTH@ 145
---------UPD ConditionalExpression@@listener instanceof SubscriptionListener ? (SubscriptionListener)listener : SubscriptionListener.EMPTY @TO@ listener instanceof SubscriptionListener ? (SubscriptionListener)listener : SubscriptionListener.NO_OP_SUBSCRIPTION_LISTENER @AT@ 2411 @LENGTH@ 103
------------UPD QualifiedName@@SubscriptionListener.EMPTY @TO@ SubscriptionListener.NO_OP_SUBSCRIPTION_LISTENER @AT@ 2488 @LENGTH@ 26
---------------UPD SimpleName@@EMPTY @TO@ NO_OP_SUBSCRIPTION_LISTENER @AT@ 2509 @LENGTH@ 5


UPD ExpressionStatement@@MethodInvocation:assertFalse(FileUtils.directoryContains(top,file),"Direcory does not contain unrealized file") @TO@ MethodInvocation:assertFalse(FileUtils.directoryContains(top,file),"Directory does not contain unrealized file") @AT@ 5844 @LENGTH@ 97
---UPD MethodInvocation@@assertFalse(FileUtils.directoryContains(top,file),"Direcory does not contain unrealized file") @TO@ assertFalse(FileUtils.directoryContains(top,file),"Directory does not contain unrealized file") @AT@ 5844 @LENGTH@ 96
------UPD SimpleName@@MethodName:assertFalse:[FileUtils.directoryContains(top,file), "Direcory does not contain unrealized file"] @TO@ MethodName:assertFalse:[FileUtils.directoryContains(top,file), "Directory does not contain unrealized file"] @AT@ 5844 @LENGTH@ 96
---------UPD StringLiteral@@"Direcory does not contain unrealized file" @TO@ "Directory does not contain unrealized file" @AT@ 5896 @LENGTH@ 43


UPD FieldDeclaration@@final, String, [expectedJson="{\"bg\":123.123,\"bool\":true,\"doubleNumber\":123.123,\"floatNumber\":123.0,\"intNumber\":123,\"longNumber\":123}"] @TO@ final, String, [expectedJson="{\"bg\":\"123.123\",\"bool\":true,\"doubleNumber\":123.123,\"floatNumber\":123.0,\"intNumber\":123,\"longNumber\":123}"] @AT@ 1250 @LENGTH@ 157
---UPD VariableDeclarationFragment@@expectedJson="{\"bg\":123.123,\"bool\":true,\"doubleNumber\":123.123,\"floatNumber\":123.0,\"intNumber\":123,\"longNumber\":123}" @TO@ expectedJson="{\"bg\":\"123.123\",\"bool\":true,\"doubleNumber\":123.123,\"floatNumber\":123.0,\"intNumber\":123,\"longNumber\":123}" @AT@ 1263 @LENGTH@ 143
------UPD StringLiteral@@"{\"bg\":123.123,\"bool\":true,\"doubleNumber\":123.123,\"floatNumber\":123.0,\"intNumber\":123,\"longNumber\":123}" @TO@ "{\"bg\":\"123.123\",\"bool\":true,\"doubleNumber\":123.123,\"floatNumber\":123.0,\"intNumber\":123,\"longNumber\":123}" @AT@ 1290 @LENGTH@ 116


UPD MethodDeclaration@@public, static, Collection<?>, MethodName:unifyRelationshipValue, Neo4jPersistentProperty property, Object rawValue,  @TO@ public, static, Collection<?>, MethodName:unifyRelationshipValue, Neo4jPersistentProperty property, @Nullable Object rawValue,  @AT@ 1769 @LENGTH@ 698
---UPD SingleVariableDeclaration@@Object rawValue @TO@ @Nullable Object rawValue @AT@ 1864 @LENGTH@ 15
---INS IfStatement@@if (rawValue == null) {  return Collections.emptyList();} @TO@ MethodDeclaration@@public, static, Collection<?>, MethodName:unifyRelationshipValue, Neo4jPersistentProperty property, Object rawValue,  @AT@ 1886 @LENGTH@ 62
------INS InfixExpression@@rawValue == null @TO@ IfStatement@@if (rawValue == null) {  return Collections.emptyList();} @AT@ 1890 @LENGTH@ 16
---------INS SimpleName@@rawValue @TO@ InfixExpression@@rawValue == null @AT@ 1890 @LENGTH@ 8
---------INS Operator@@== @TO@ InfixExpression@@rawValue == null @AT@ 1898 @LENGTH@ 2
---------INS NullLiteral@@null @TO@ InfixExpression@@rawValue == null @AT@ 1902 @LENGTH@ 4
------INS Block@@ThenBody:{  return Collections.emptyList();} @TO@ IfStatement@@if (rawValue == null) {  return Collections.emptyList();} @AT@ 1908 @LENGTH@ 40
---------INS ReturnStatement@@MethodInvocation:Collections.emptyList() @TO@ Block@@ThenBody:{  return Collections.emptyList();} @AT@ 1913 @LENGTH@ 31
------------INS MethodInvocation@@Collections.emptyList() @TO@ ReturnStatement@@MethodInvocation:Collections.emptyList() @AT@ 1920 @LENGTH@ 23
---------------INS SimpleName@@Name:Collections @TO@ MethodInvocation@@Collections.emptyList() @AT@ 1920 @LENGTH@ 11
---------------INS SimpleName@@MethodName:emptyList:[] @TO@ MethodInvocation@@Collections.emptyList() @AT@ 1932 @LENGTH@ 11


UPD ExpressionStatement@@MethodInvocation:Assert.state(this.returnsCallback == null || this.returnsCallback.delegate().equals(returnCallback),"Only one ReturnCallback is supported by each RabbitTemplate") @TO@ MethodInvocation:Assert.state(this.returnsCallback == null || (this.returnsCallback.delegate() != null && this.returnsCallback.delegate().equals(returnCallback)),"Only one ReturnCallback is supported by each RabbitTemplate") @AT@ 18253 @LENGTH@ 168
---UPD MethodInvocation@@Assert.state(this.returnsCallback == null || this.returnsCallback.delegate().equals(returnCallback),"Only one ReturnCallback is supported by each RabbitTemplate") @TO@ Assert.state(this.returnsCallback == null || (this.returnsCallback.delegate() != null && this.returnsCallback.delegate().equals(returnCallback)),"Only one ReturnCallback is supported by each RabbitTemplate") @AT@ 18253 @LENGTH@ 167
------UPD SimpleName@@MethodName:state:[this.returnsCallback == null || this.returnsCallback.delegate().equals(returnCallback), "Only one ReturnCallback is supported by each RabbitTemplate"] @TO@ MethodName:state:[this.returnsCallback == null || (this.returnsCallback.delegate() != null && this.returnsCallback.delegate().equals(returnCallback)), "Only one ReturnCallback is supported by each RabbitTemplate"] @AT@ 18260 @LENGTH@ 160
---------UPD InfixExpression@@this.returnsCallback == null || this.returnsCallback.delegate().equals(returnCallback) @TO@ this.returnsCallback == null || (this.returnsCallback.delegate() != null && this.returnsCallback.delegate().equals(returnCallback)) @AT@ 18266 @LENGTH@ 86
------------INS ParenthesizedExpression@@(this.returnsCallback.delegate() != null && this.returnsCallback.delegate().equals(returnCallback)) @TO@ InfixExpression@@this.returnsCallback == null || this.returnsCallback.delegate().equals(returnCallback) @AT@ 18303 @LENGTH@ 99
---------------INS InfixExpression@@this.returnsCallback.delegate() != null && this.returnsCallback.delegate().equals(returnCallback) @TO@ ParenthesizedExpression@@(this.returnsCallback.delegate() != null && this.returnsCallback.delegate().equals(returnCallback)) @AT@ 18304 @LENGTH@ 97
------------------MOV MethodInvocation@@this.returnsCallback.delegate().equals(returnCallback) @TO@ InfixExpression@@this.returnsCallback.delegate() != null && this.returnsCallback.delegate().equals(returnCallback) @AT@ 18298 @LENGTH@ 54
------------------INS InfixExpression@@this.returnsCallback.delegate() != null @TO@ InfixExpression@@this.returnsCallback.delegate() != null && this.returnsCallback.delegate().equals(returnCallback) @AT@ 18304 @LENGTH@ 39
---------------------INS MethodInvocation@@this.returnsCallback.delegate() @TO@ InfixExpression@@this.returnsCallback.delegate() != null @AT@ 18304 @LENGTH@ 31
------------------------INS FieldAccess@@this.returnsCallback @TO@ MethodInvocation@@this.returnsCallback.delegate() @AT@ 18304 @LENGTH@ 20
---------------------------INS ThisExpression@@this @TO@ FieldAccess@@this.returnsCallback @AT@ 18304 @LENGTH@ 4
---------------------------INS SimpleName@@returnsCallback @TO@ FieldAccess@@this.returnsCallback @AT@ 18309 @LENGTH@ 15
------------------------INS SimpleName@@MethodName:delegate:[] @TO@ MethodInvocation@@this.returnsCallback.delegate() @AT@ 18325 @LENGTH@ 10
---------------------INS Operator@@!= @TO@ InfixExpression@@this.returnsCallback.delegate() != null @AT@ 18335 @LENGTH@ 2
---------------------INS NullLiteral@@null @TO@ InfixExpression@@this.returnsCallback.delegate() != null @AT@ 18339 @LENGTH@ 4
------------------INS Operator@@&& @TO@ InfixExpression@@this.returnsCallback.delegate() != null && this.returnsCallback.delegate().equals(returnCallback) @AT@ 18343 @LENGTH@ 2


UPD IfStatement@@if (backoffMultiplier > 0 && (idleCounter >= (backoffIdleThreshold > 0 ? backoffIdleThreshold : Integer.MAX_VALUE)) || errorCounter >= (backoffErrorThreshold > 0 ? backoffErrorThreshold : Integer.MAX_VALUE)) {  if (backoffCounter++ < backoffMultiplier) {    if (idleCounter > 0) {      LOG.debug("doRun() backoff due subsequent {} idles (backoff at {}/{})",idleCounter,backoffCounter,backoffMultiplier);    } else {      LOG.debug("doRun() backoff due subsequent {} errors (backoff at {}/{})",errorCounter,backoffCounter,backoffMultiplier);    }    return;  } else {    idleCounter=0;    errorCounter=0;    backoffCounter=0;    LOG.trace("doRun() backoff finished, resetting counters.");  }} @TO@ if (backoffMultiplier > 0 && idleCounter >= (backoffIdleThreshold > 0 ? backoffIdleThreshold : Integer.MAX_VALUE) || errorCounter >= (backoffErrorThreshold > 0 ? backoffErrorThreshold : Integer.MAX_VALUE)) {  if (backoffCounter++ < backoffMultiplier) {    if (idleCounter > 0) {      LOG.debug("doRun() backoff due subsequent {} idles (backoff at {}/{})",idleCounter,backoffCounter,backoffMultiplier);    } else {      LOG.debug("doRun() backoff due subsequent {} errors (backoff at {}/{})",errorCounter,backoffCounter,backoffMultiplier);    }    return;  } else {    idleCounter=0;    errorCounter=0;    backoffCounter=0;    LOG.trace("doRun() backoff finished, resetting counters.");  }} @AT@ 5820 @LENGTH@ 1195
---UPD InfixExpression@@backoffMultiplier > 0 && (idleCounter >= (backoffIdleThreshold > 0 ? backoffIdleThreshold : Integer.MAX_VALUE)) || errorCounter >= (backoffErrorThreshold > 0 ? backoffErrorThreshold : Integer.MAX_VALUE) @TO@ backoffMultiplier > 0 && idleCounter >= (backoffIdleThreshold > 0 ? backoffIdleThreshold : Integer.MAX_VALUE) || errorCounter >= (backoffErrorThreshold > 0 ? backoffErrorThreshold : Integer.MAX_VALUE) @AT@ 5824 @LENGTH@ 355
------UPD InfixExpression@@backoffMultiplier > 0 && (idleCounter >= (backoffIdleThreshold > 0 ? backoffIdleThreshold : Integer.MAX_VALUE)) @TO@ backoffMultiplier > 0 && idleCounter >= (backoffIdleThreshold > 0 ? backoffIdleThreshold : Integer.MAX_VALUE) @AT@ 5824 @LENGTH@ 248
---------DEL ParenthesizedExpression@@(idleCounter >= (backoffIdleThreshold > 0 ? backoffIdleThreshold : Integer.MAX_VALUE)) @AT@ 5986 @LENGTH@ 86
---------MOV InfixExpression@@idleCounter >= (backoffIdleThreshold > 0 ? backoffIdleThreshold : Integer.MAX_VALUE) @TO@ InfixExpression@@backoffMultiplier > 0 && (idleCounter >= (backoffIdleThreshold > 0 ? backoffIdleThreshold : Integer.MAX_VALUE)) @AT@ 5987 @LENGTH@ 84


UPD ReturnStatement@@MethodInvocation:receive(topics,channelSerializer,messageSerializer,SubscriptionListener.EMPTY) @TO@ MethodInvocation:receive(topics,channelSerializer,messageSerializer,SubscriptionListener.NO_OP_SUBSCRIPTION_LISTENER) @AT@ 12045 @LENGTH@ 89
---UPD MethodInvocation@@receive(topics,channelSerializer,messageSerializer,SubscriptionListener.EMPTY) @TO@ receive(topics,channelSerializer,messageSerializer,SubscriptionListener.NO_OP_SUBSCRIPTION_LISTENER) @AT@ 12052 @LENGTH@ 81
------UPD SimpleName@@MethodName:receive:[topics, channelSerializer, messageSerializer, SubscriptionListener.EMPTY] @TO@ MethodName:receive:[topics, channelSerializer, messageSerializer, SubscriptionListener.NO_OP_SUBSCRIPTION_LISTENER] @AT@ 12052 @LENGTH@ 81
---------UPD QualifiedName@@SubscriptionListener.EMPTY @TO@ SubscriptionListener.NO_OP_SUBSCRIPTION_LISTENER @AT@ 12106 @LENGTH@ 26
------------UPD SimpleName@@EMPTY @TO@ NO_OP_SUBSCRIPTION_LISTENER @AT@ 12127 @LENGTH@ 5


INS ExpressionStatement@@MethodInvocation:DefaultMetricsSystem.instance().init("TestMetrics") @TO@ MethodDeclaration@@static, void, MethodName:init, TestHiveShell shell, TestTables testTables, TemporaryFolder temp, String engine,  @AT@ 4739 @LENGTH@ 52
---INS MethodInvocation@@DefaultMetricsSystem.instance().init("TestMetrics") @TO@ ExpressionStatement@@MethodInvocation:DefaultMetricsSystem.instance().init("TestMetrics") @AT@ 4739 @LENGTH@ 51
------INS MethodInvocation@@MethodName:instance:[] @TO@ MethodInvocation@@DefaultMetricsSystem.instance().init("TestMetrics") @AT@ 4739 @LENGTH@ 31
------INS SimpleName@@Name:DefaultMetricsSystem @TO@ MethodInvocation@@DefaultMetricsSystem.instance().init("TestMetrics") @AT@ 4739 @LENGTH@ 20
------INS SimpleName@@MethodName:init:["TestMetrics"] @TO@ MethodInvocation@@DefaultMetricsSystem.instance().init("TestMetrics") @AT@ 4771 @LENGTH@ 19
---------INS StringLiteral@@"TestMetrics" @TO@ SimpleName@@MethodName:init:["TestMetrics"] @AT@ 4776 @LENGTH@ 13


UPD FieldDeclaration@@private, final, Predicate<Throwable>, [aTranslatedException=ex -> ex instanceof DataIntegrityViolationException && ex.getMessage().matches("Node\\(\\d+\\) already exists with label `SimplePerson` and property `name` = '[\\w\\s]+'; Error code 'Neo.ClientError.Schema.ConstraintValidationFailed'")] @TO@ private, final, Predicate<Throwable>, [aTranslatedException=ex -> ex instanceof DataIntegrityViolationException && ex.getMessage().matches("Node\\(\\d+\\) already exists with label `SimplePerson` and property `name` = '[\\w\\s]+'; Error code 'Neo.ClientError.Schema.ConstraintValidationFailed';.*")] @AT@ 2492 @LENGTH@ 306
---UPD VariableDeclarationFragment@@aTranslatedException=ex -> ex instanceof DataIntegrityViolationException && ex.getMessage().matches("Node\\(\\d+\\) already exists with label `SimplePerson` and property `name` = '[\\w\\s]+'; Error code 'Neo.ClientError.Schema.ConstraintValidationFailed'") @TO@ aTranslatedException=ex -> ex instanceof DataIntegrityViolationException && ex.getMessage().matches("Node\\(\\d+\\) already exists with label `SimplePerson` and property `name` = '[\\w\\s]+'; Error code 'Neo.ClientError.Schema.ConstraintValidationFailed';.*") @AT@ 2527 @LENGTH@ 270
------UPD LambdaExpression@@ex -> ex instanceof DataIntegrityViolationException && ex.getMessage().matches("Node\\(\\d+\\) already exists with label `SimplePerson` and property `name` = '[\\w\\s]+'; Error code 'Neo.ClientError.Schema.ConstraintValidationFailed'") @TO@ ex -> ex instanceof DataIntegrityViolationException && ex.getMessage().matches("Node\\(\\d+\\) already exists with label `SimplePerson` and property `name` = '[\\w\\s]+'; Error code 'Neo.ClientError.Schema.ConstraintValidationFailed';.*") @AT@ 2550 @LENGTH@ 247
---------UPD InfixExpression@@ex instanceof DataIntegrityViolationException && ex.getMessage().matches("Node\\(\\d+\\) already exists with label `SimplePerson` and property `name` = '[\\w\\s]+'; Error code 'Neo.ClientError.Schema.ConstraintValidationFailed'") @TO@ ex instanceof DataIntegrityViolationException && ex.getMessage().matches("Node\\(\\d+\\) already exists with label `SimplePerson` and property `name` = '[\\w\\s]+'; Error code 'Neo.ClientError.Schema.ConstraintValidationFailed';.*") @AT@ 2556 @LENGTH@ 241
------------UPD MethodInvocation@@ex.getMessage().matches("Node\\(\\d+\\) already exists with label `SimplePerson` and property `name` = '[\\w\\s]+'; Error code 'Neo.ClientError.Schema.ConstraintValidationFailed'") @TO@ ex.getMessage().matches("Node\\(\\d+\\) already exists with label `SimplePerson` and property `name` = '[\\w\\s]+'; Error code 'Neo.ClientError.Schema.ConstraintValidationFailed';.*") @AT@ 2611 @LENGTH@ 186
---------------UPD SimpleName@@MethodName:matches:["Node\\(\\d+\\) already exists with label `SimplePerson` and property `name` = '[\\w\\s]+'; Error code 'Neo.ClientError.Schema.ConstraintValidationFailed'"] @TO@ MethodName:matches:["Node\\(\\d+\\) already exists with label `SimplePerson` and property `name` = '[\\w\\s]+'; Error code 'Neo.ClientError.Schema.ConstraintValidationFailed';.*"] @AT@ 2627 @LENGTH@ 170
------------------UPD StringLiteral@@"Node\\(\\d+\\) already exists with label `SimplePerson` and property `name` = '[\\w\\s]+'; Error code 'Neo.ClientError.Schema.ConstraintValidationFailed'" @TO@ "Node\\(\\d+\\) already exists with label `SimplePerson` and property `name` = '[\\w\\s]+'; Error code 'Neo.ClientError.Schema.ConstraintValidationFailed';.*" @AT@ 2641 @LENGTH@ 155


INS IfStatement@@if (getProject() != null) {  builder.scopeToProject(Identifier.byId(getProject()));} @TO@ MethodDeclaration@@private, OSClient.OSClientV3, MethodName:createV3Client,  @AT@ 2557 @LENGTH@ 104
---INS InfixExpression@@getProject() != null @TO@ IfStatement@@if (getProject() != null) {  builder.scopeToProject(Identifier.byId(getProject()));} @AT@ 2561 @LENGTH@ 20
------INS MethodInvocation@@MethodName:getProject:[] @TO@ InfixExpression@@getProject() != null @AT@ 2561 @LENGTH@ 12
------INS Operator@@!= @TO@ InfixExpression@@getProject() != null @AT@ 2573 @LENGTH@ 2
------INS NullLiteral@@null @TO@ InfixExpression@@getProject() != null @AT@ 2577 @LENGTH@ 4
---INS Block@@ThenBody:{  builder.scopeToProject(Identifier.byId(getProject()));} @TO@ IfStatement@@if (getProject() != null) {  builder.scopeToProject(Identifier.byId(getProject()));} @AT@ 2583 @LENGTH@ 78
------MOV ExpressionStatement@@MethodInvocation:builder.scopeToProject(Identifier.byId(getProject())) @TO@ Block@@ThenBody:{  builder.scopeToProject(Identifier.byId(getProject()));} @AT@ 2555 @LENGTH@ 54


UPD ExpressionStatement@@MethodInvocation:componentModels.forEach(componentModel -> {
  final String returnType=packageName + ".dsl." + ComponentDslBuilderFactoryGenerator.getExpectedGeneratedClassName(componentModel)+ "."+ ComponentDslInnerBuilderGenerator.getExpectedGeneratedInterfaceName(componentModel);
  final Method componentEntryMethod=javaClass.addMethod();
  componentEntryMethod.setStatic().setReturnType(returnType).setName(DslHelper.toCamelCaseLower(componentModel.getScheme())).setBody(String.format("return %s.dsl.%s.%s();",packageName,ComponentDslBuilderFactoryGenerator.getExpectedGeneratedClassName(componentModel),DslHelper.toCamelCaseLower(componentModel.getScheme())));
  if (componentModel.isDeprecated()) {
    componentEntryMethod.addAnnotation(Deprecated.class);
  }
  String doc=DslHelper.getMainDescriptionWithoutPathOptions(componentModel);
  doc=JavadocHelper.xmlEncode(doc);
  componentEntryMethod.getJavaDoc().setText(doc);
}
) @TO@ MethodInvocation:componentModels.forEach(componentModel -> {
  final String returnType=packageName + ".dsl." + ComponentDslBuilderFactoryGenerator.getExpectedGeneratedClassName(componentModel)+ "."+ ComponentDslInnerBuilderGenerator.getExpectedGeneratedInterfaceName(componentModel);
  final Method componentEntryMethod=javaClass.addMethod();
  componentEntryMethod.setStatic().setReturnType(returnType).setName(DslHelper.toCamelCaseLower(componentModel.getScheme())).setBody(String.format("return %s.dsl.%s.%s();",packageName,ComponentDslBuilderFactoryGenerator.getExpectedGeneratedClassName(componentModel),DslHelper.toCamelCaseLower(componentModel.getScheme())));
  if (componentModel.isDeprecated()) {
    componentEntryMethod.addAnnotation(Deprecated.class);
  }
  String doc=DslHelper.getMainDescriptionWithoutPathOptions(componentModel);
  doc=JavadocHelper.xmlEncode(doc);
  doc+="\n\n@return the dsl builder\n";
  componentEntryMethod.getJavaDoc().setText(doc);
}
) @AT@ 3861 @LENGTH@ 1384
---UPD MethodInvocation@@componentModels.forEach(componentModel -> {
  final String returnType=packageName + ".dsl." + ComponentDslBuilderFactoryGenerator.getExpectedGeneratedClassName(componentModel)+ "."+ ComponentDslInnerBuilderGenerator.getExpectedGeneratedInterfaceName(componentModel);
  final Method componentEntryMethod=javaClass.addMethod();
  componentEntryMethod.setStatic().setReturnType(returnType).setName(DslHelper.toCamelCaseLower(componentModel.getScheme())).setBody(String.format("return %s.dsl.%s.%s();",packageName,ComponentDslBuilderFactoryGenerator.getExpectedGeneratedClassName(componentModel),DslHelper.toCamelCaseLower(componentModel.getScheme())));
  if (componentModel.isDeprecated()) {
    componentEntryMethod.addAnnotation(Deprecated.class);
  }
  String doc=DslHelper.getMainDescriptionWithoutPathOptions(componentModel);
  doc=JavadocHelper.xmlEncode(doc);
  componentEntryMethod.getJavaDoc().setText(doc);
}
) @TO@ componentModels.forEach(componentModel -> {
  final String returnType=packageName + ".dsl." + ComponentDslBuilderFactoryGenerator.getExpectedGeneratedClassName(componentModel)+ "."+ ComponentDslInnerBuilderGenerator.getExpectedGeneratedInterfaceName(componentModel);
  final Method componentEntryMethod=javaClass.addMethod();
  componentEntryMethod.setStatic().setReturnType(returnType).setName(DslHelper.toCamelCaseLower(componentModel.getScheme())).setBody(String.format("return %s.dsl.%s.%s();",packageName,ComponentDslBuilderFactoryGenerator.getExpectedGeneratedClassName(componentModel),DslHelper.toCamelCaseLower(componentModel.getScheme())));
  if (componentModel.isDeprecated()) {
    componentEntryMethod.addAnnotation(Deprecated.class);
  }
  String doc=DslHelper.getMainDescriptionWithoutPathOptions(componentModel);
  doc=JavadocHelper.xmlEncode(doc);
  doc+="\n\n@return the dsl builder\n";
  componentEntryMethod.getJavaDoc().setText(doc);
}
) @AT@ 3861 @LENGTH@ 1383
------UPD SimpleName@@MethodName:forEach:[componentModel -> {
  final String returnType=packageName + ".dsl." + ComponentDslBuilderFactoryGenerator.getExpectedGeneratedClassName(componentModel)+ "."+ ComponentDslInnerBuilderGenerator.getExpectedGeneratedInterfaceName(componentModel);
  final Method componentEntryMethod=javaClass.addMethod();
  componentEntryMethod.setStatic().setReturnType(returnType).setName(DslHelper.toCamelCaseLower(componentModel.getScheme())).setBody(String.format("return %s.dsl.%s.%s();",packageName,ComponentDslBuilderFactoryGenerator.getExpectedGeneratedClassName(componentModel),DslHelper.toCamelCaseLower(componentModel.getScheme())));
  if (componentModel.isDeprecated()) {
    componentEntryMethod.addAnnotation(Deprecated.class);
  }
  String doc=DslHelper.getMainDescriptionWithoutPathOptions(componentModel);
  doc=JavadocHelper.xmlEncode(doc);
  componentEntryMethod.getJavaDoc().setText(doc);
}
] @TO@ MethodName:forEach:[componentModel -> {
  final String returnType=packageName + ".dsl." + ComponentDslBuilderFactoryGenerator.getExpectedGeneratedClassName(componentModel)+ "."+ ComponentDslInnerBuilderGenerator.getExpectedGeneratedInterfaceName(componentModel);
  final Method componentEntryMethod=javaClass.addMethod();
  componentEntryMethod.setStatic().setReturnType(returnType).setName(DslHelper.toCamelCaseLower(componentModel.getScheme())).setBody(String.format("return %s.dsl.%s.%s();",packageName,ComponentDslBuilderFactoryGenerator.getExpectedGeneratedClassName(componentModel),DslHelper.toCamelCaseLower(componentModel.getScheme())));
  if (componentModel.isDeprecated()) {
    componentEntryMethod.addAnnotation(Deprecated.class);
  }
  String doc=DslHelper.getMainDescriptionWithoutPathOptions(componentModel);
  doc=JavadocHelper.xmlEncode(doc);
  doc+="\n\n@return the dsl builder\n";
  componentEntryMethod.getJavaDoc().setText(doc);
}
] @AT@ 3877 @LENGTH@ 1367
---------UPD LambdaExpression@@componentModel -> {
  final String returnType=packageName + ".dsl." + ComponentDslBuilderFactoryGenerator.getExpectedGeneratedClassName(componentModel)+ "."+ ComponentDslInnerBuilderGenerator.getExpectedGeneratedInterfaceName(componentModel);
  final Method componentEntryMethod=javaClass.addMethod();
  componentEntryMethod.setStatic().setReturnType(returnType).setName(DslHelper.toCamelCaseLower(componentModel.getScheme())).setBody(String.format("return %s.dsl.%s.%s();",packageName,ComponentDslBuilderFactoryGenerator.getExpectedGeneratedClassName(componentModel),DslHelper.toCamelCaseLower(componentModel.getScheme())));
  if (componentModel.isDeprecated()) {
    componentEntryMethod.addAnnotation(Deprecated.class);
  }
  String doc=DslHelper.getMainDescriptionWithoutPathOptions(componentModel);
  doc=JavadocHelper.xmlEncode(doc);
  componentEntryMethod.getJavaDoc().setText(doc);
}
 @TO@ componentModel -> {
  final String returnType=packageName + ".dsl." + ComponentDslBuilderFactoryGenerator.getExpectedGeneratedClassName(componentModel)+ "."+ ComponentDslInnerBuilderGenerator.getExpectedGeneratedInterfaceName(componentModel);
  final Method componentEntryMethod=javaClass.addMethod();
  componentEntryMethod.setStatic().setReturnType(returnType).setName(DslHelper.toCamelCaseLower(componentModel.getScheme())).setBody(String.format("return %s.dsl.%s.%s();",packageName,ComponentDslBuilderFactoryGenerator.getExpectedGeneratedClassName(componentModel),DslHelper.toCamelCaseLower(componentModel.getScheme())));
  if (componentModel.isDeprecated()) {
    componentEntryMethod.addAnnotation(Deprecated.class);
  }
  String doc=DslHelper.getMainDescriptionWithoutPathOptions(componentModel);
  doc=JavadocHelper.xmlEncode(doc);
  doc+="\n\n@return the dsl builder\n";
  componentEntryMethod.getJavaDoc().setText(doc);
}
 @AT@ 3885 @LENGTH@ 1358
------------INS ExpressionStatement@@Assignment:doc+="\n\n@return the dsl builder\n" @TO@ LambdaExpression@@componentModel -> {
  final String returnType=packageName + ".dsl." + ComponentDslBuilderFactoryGenerator.getExpectedGeneratedClassName(componentModel)+ "."+ ComponentDslInnerBuilderGenerator.getExpectedGeneratedInterfaceName(componentModel);
  final Method componentEntryMethod=javaClass.addMethod();
  componentEntryMethod.setStatic().setReturnType(returnType).setName(DslHelper.toCamelCaseLower(componentModel.getScheme())).setBody(String.format("return %s.dsl.%s.%s();",packageName,ComponentDslBuilderFactoryGenerator.getExpectedGeneratedClassName(componentModel),DslHelper.toCamelCaseLower(componentModel.getScheme())));
  if (componentModel.isDeprecated()) {
    componentEntryMethod.addAnnotation(Deprecated.class);
  }
  String doc=DslHelper.getMainDescriptionWithoutPathOptions(componentModel);
  doc=JavadocHelper.xmlEncode(doc);
  componentEntryMethod.getJavaDoc().setText(doc);
}
 @AT@ 6214 @LENGTH@ 39
---------------INS Assignment@@doc+="\n\n@return the dsl builder\n" @TO@ ExpressionStatement@@Assignment:doc+="\n\n@return the dsl builder\n" @AT@ 6214 @LENGTH@ 38
------------------INS SimpleName@@doc @TO@ Assignment@@doc+="\n\n@return the dsl builder\n" @AT@ 6214 @LENGTH@ 3
------------------INS Operator@@+= @TO@ Assignment@@doc+="\n\n@return the dsl builder\n" @AT@ 6217 @LENGTH@ 2
------------------INS StringLiteral@@"\n\n@return the dsl builder\n" @TO@ Assignment@@doc+="\n\n@return the dsl builder\n" @AT@ 6221 @LENGTH@ 31


UPD VariableDeclarationStatement@@Class<T> domainClass=(Class<T>)CollectionUtils.findCommonElementType(entities); @TO@ Class<T> domainClass=(Class<T>)TemplateSupport.findCommonElementType(entities); @AT@ 17356 @LENGTH@ 82
---UPD VariableDeclarationFragment@@domainClass=(Class<T>)CollectionUtils.findCommonElementType(entities) @TO@ domainClass=(Class<T>)TemplateSupport.findCommonElementType(entities) @AT@ 17365 @LENGTH@ 72
------UPD CastExpression@@(Class<T>)CollectionUtils.findCommonElementType(entities) @TO@ (Class<T>)TemplateSupport.findCommonElementType(entities) @AT@ 17379 @LENGTH@ 58
---------UPD MethodInvocation@@CollectionUtils.findCommonElementType(entities) @TO@ TemplateSupport.findCommonElementType(entities) @AT@ 17390 @LENGTH@ 47
------------UPD SimpleName@@Name:CollectionUtils @TO@ Name:TemplateSupport @AT@ 17390 @LENGTH@ 15


INS MethodDeclaration@@public, static, void, MethodName:initWebTest,  @TO@ TypeDeclaration@@[public]WebTestUtils,  @AT@ 1336 @LENGTH@ 82
---INS Modifier@@public @TO@ MethodDeclaration@@public, static, void, MethodName:initWebTest,  @AT@ 1336 @LENGTH@ 6
---INS Modifier@@static @TO@ MethodDeclaration@@public, static, void, MethodName:initWebTest,  @AT@ 1343 @LENGTH@ 6
---INS PrimitiveType@@void @TO@ MethodDeclaration@@public, static, void, MethodName:initWebTest,  @AT@ 1350 @LENGTH@ 4
---INS SimpleName@@MethodName:initWebTest @TO@ MethodDeclaration@@public, static, void, MethodName:initWebTest,  @AT@ 1355 @LENGTH@ 11
---INS ExpressionStatement@@MethodInvocation:initWebTest(new MockHttpServletRequest()) @TO@ MethodDeclaration@@public, static, void, MethodName:initWebTest,  @AT@ 1373 @LENGTH@ 42
------INS MethodInvocation@@initWebTest(new MockHttpServletRequest()) @TO@ ExpressionStatement@@MethodInvocation:initWebTest(new MockHttpServletRequest()) @AT@ 1373 @LENGTH@ 41
---------INS SimpleName@@MethodName:initWebTest:[new MockHttpServletRequest()] @TO@ MethodInvocation@@initWebTest(new MockHttpServletRequest()) @AT@ 1373 @LENGTH@ 41
------------INS ClassInstanceCreation@@MockHttpServletRequest[] @TO@ SimpleName@@MethodName:initWebTest:[new MockHttpServletRequest()] @AT@ 1385 @LENGTH@ 28
---------------INS New@@new @TO@ ClassInstanceCreation@@MockHttpServletRequest[] @AT@ 1385 @LENGTH@ 3
---------------INS SimpleType@@MockHttpServletRequest @TO@ ClassInstanceCreation@@MockHttpServletRequest[] @AT@ 1389 @LENGTH@ 22


UPD ExpressionStatement@@MethodInvocation:putAndRemove(new HashMap<>()) @TO@ MethodInvocation:putAndRemove(new LinkedHashMap<>()) @AT@ 12938 @LENGTH@ 30
---UPD MethodInvocation@@putAndRemove(new HashMap<>()) @TO@ putAndRemove(new LinkedHashMap<>()) @AT@ 12938 @LENGTH@ 29
------UPD SimpleName@@MethodName:putAndRemove:[new HashMap<>()] @TO@ MethodName:putAndRemove:[new LinkedHashMap<>()] @AT@ 12938 @LENGTH@ 29
---------UPD ClassInstanceCreation@@HashMap<>[] @TO@ LinkedHashMap<>[] @AT@ 12951 @LENGTH@ 15
------------UPD ParameterizedType@@HashMap<> @TO@ LinkedHashMap<> @AT@ 12955 @LENGTH@ 9
---------------UPD SimpleType@@HashMap @TO@ LinkedHashMap @AT@ 12955 @LENGTH@ 7


UPD FieldDeclaration@@boolean, [currentRemovedByAnother=false] @TO@ boolean, [currentRemovedByAnother] @AT@ 15597 @LENGTH@ 40
---UPD VariableDeclarationFragment@@currentRemovedByAnother=false @TO@ currentRemovedByAnother @AT@ 15605 @LENGTH@ 31
------DEL BooleanLiteral@@false @AT@ 15631 @LENGTH@ 5


INS MethodDeclaration@@void, MethodName:customConvertersForRelsMustBeTakenIntoAccount,  @TO@ TypeDeclaration@@[@Neo4jIntegrationTest]ReactivePropertyIT,  @AT@ 8604 @LENGTH@ 525
---INS PrimitiveType@@void @TO@ MethodDeclaration@@void, MethodName:customConvertersForRelsMustBeTakenIntoAccount,  @AT@ 8599 @LENGTH@ 4
---INS SimpleName@@MethodName:customConvertersForRelsMustBeTakenIntoAccount @TO@ MethodDeclaration@@void, MethodName:customConvertersForRelsMustBeTakenIntoAccount,  @AT@ 8604 @LENGTH@ 45
---INS VariableDeclarationStatement@@Date now=new Date(); @TO@ MethodDeclaration@@void, MethodName:customConvertersForRelsMustBeTakenIntoAccount,  @AT@ 8657 @LENGTH@ 22
------INS SimpleType@@Date @TO@ VariableDeclarationStatement@@Date now=new Date(); @AT@ 8657 @LENGTH@ 4
------INS VariableDeclarationFragment@@now=new Date() @TO@ VariableDeclarationStatement@@Date now=new Date(); @AT@ 8662 @LENGTH@ 16
---------INS SimpleName@@now @TO@ VariableDeclarationFragment@@now=new Date() @AT@ 8662 @LENGTH@ 3
---------INS ClassInstanceCreation@@Date[] @TO@ VariableDeclarationFragment@@now=new Date() @AT@ 8668 @LENGTH@ 10
------------INS New@@new @TO@ ClassInstanceCreation@@Date[] @AT@ 8668 @LENGTH@ 3
------------INS SimpleType@@Date @TO@ ClassInstanceCreation@@Date[] @AT@ 8672 @LENGTH@ 4
---INS ExpressionStatement@@MethodInvocation:template.save(new DomainClasses.WeirdSource(now,new DomainClasses.IrrelevantTargetContainer())).as(StepVerifier::create).expectNextCount(1).verifyComplete() @TO@ MethodDeclaration@@void, MethodName:customConvertersForRelsMustBeTakenIntoAccount,  @AT@ 8682 @LENGTH@ 173
------INS MethodInvocation@@template.save(new DomainClasses.WeirdSource(now,new DomainClasses.IrrelevantTargetContainer())).as(StepVerifier::create).expectNextCount(1).verifyComplete() @TO@ ExpressionStatement@@MethodInvocation:template.save(new DomainClasses.WeirdSource(now,new DomainClasses.IrrelevantTargetContainer())).as(StepVerifier::create).expectNextCount(1).verifyComplete() @AT@ 8682 @LENGTH@ 172
---------INS MethodInvocation@@MethodName:expectNextCount:[1] @TO@ MethodInvocation@@template.save(new DomainClasses.WeirdSource(now,new DomainClasses.IrrelevantTargetContainer())).as(StepVerifier::create).expectNextCount(1).verifyComplete() @AT@ 8682 @LENGTH@ 150
------------INS NumberLiteral@@1 @TO@ MethodInvocation@@MethodName:expectNextCount:[1] @AT@ 8830 @LENGTH@ 1
---------INS MethodInvocation@@MethodName:as:[StepVerifier::create] @TO@ MethodInvocation@@template.save(new DomainClasses.WeirdSource(now,new DomainClasses.IrrelevantTargetContainer())).as(StepVerifier::create).expectNextCount(1).verifyComplete() @AT@ 8682 @LENGTH@ 126
---------INS MethodInvocation@@MethodName:save:[new DomainClasses.WeirdSource(now,new DomainClasses.IrrelevantTargetContainer())] @TO@ MethodInvocation@@template.save(new DomainClasses.WeirdSource(now,new DomainClasses.IrrelevantTargetContainer())).as(StepVerifier::create).expectNextCount(1).verifyComplete() @AT@ 8682 @LENGTH@ 96
------------INS ClassInstanceCreation@@DomainClasses.WeirdSource[now, new DomainClasses.IrrelevantTargetContainer()] @TO@ MethodInvocation@@MethodName:save:[new DomainClasses.WeirdSource(now,new DomainClasses.IrrelevantTargetContainer())] @AT@ 8696 @LENGTH@ 81
---------------INS New@@new @TO@ ClassInstanceCreation@@DomainClasses.WeirdSource[now, new DomainClasses.IrrelevantTargetContainer()] @AT@ 8696 @LENGTH@ 3
---------------INS SimpleType@@DomainClasses.WeirdSource @TO@ ClassInstanceCreation@@DomainClasses.WeirdSource[now, new DomainClasses.IrrelevantTargetContainer()] @AT@ 8700 @LENGTH@ 25
---------------INS SimpleName@@now @TO@ ClassInstanceCreation@@DomainClasses.WeirdSource[now, new DomainClasses.IrrelevantTargetContainer()] @AT@ 8726 @LENGTH@ 3
---------------INS ClassInstanceCreation@@DomainClasses.IrrelevantTargetContainer[] @TO@ ClassInstanceCreation@@DomainClasses.WeirdSource[now, new DomainClasses.IrrelevantTargetContainer()] @AT@ 8731 @LENGTH@ 45
------------------INS New@@new @TO@ ClassInstanceCreation@@DomainClasses.IrrelevantTargetContainer[] @AT@ 8731 @LENGTH@ 3
------------------INS SimpleType@@DomainClasses.IrrelevantTargetContainer @TO@ ClassInstanceCreation@@DomainClasses.IrrelevantTargetContainer[] @AT@ 8735 @LENGTH@ 39
---------INS SimpleName@@Name:template @TO@ MethodInvocation@@template.save(new DomainClasses.WeirdSource(now,new DomainClasses.IrrelevantTargetContainer())).as(StepVerifier::create).expectNextCount(1).verifyComplete() @AT@ 8682 @LENGTH@ 8
---------INS SimpleName@@MethodName:verifyComplete:[] @TO@ MethodInvocation@@template.save(new DomainClasses.WeirdSource(now,new DomainClasses.IrrelevantTargetContainer())).as(StepVerifier::create).expectNextCount(1).verifyComplete() @AT@ 8838 @LENGTH@ 16
---INS TryStatement@@try (Session session=driver.session()){  long cnt=session.run("MATCH (m) - [r:ITS_COMPLICATED] -> (n) WHERE m.id = $id RETURN count(m)",Collections.singletonMap("id",now.getTime())).single().get(0).asLong();  assertThat(cnt).isEqualTo(1L);}  @TO@ MethodDeclaration@@void, MethodName:customConvertersForRelsMustBeTakenIntoAccount,  @AT@ 8859 @LENGTH@ 267
------INS VariableDeclarationExpression@@Session session=driver.session() @TO@ TryStatement@@try (Session session=driver.session()){  long cnt=session.run("MATCH (m) - [r:ITS_COMPLICATED] -> (n) WHERE m.id = $id RETURN count(m)",Collections.singletonMap("id",now.getTime())).single().get(0).asLong();  assertThat(cnt).isEqualTo(1L);}  @AT@ 8864 @LENGTH@ 34
---------INS SimpleType@@Session @TO@ VariableDeclarationExpression@@Session session=driver.session() @AT@ 8864 @LENGTH@ 7
---------INS VariableDeclarationFragment@@session=driver.session() @TO@ VariableDeclarationExpression@@Session session=driver.session() @AT@ 8872 @LENGTH@ 26
------------INS SimpleName@@session @TO@ VariableDeclarationFragment@@session=driver.session() @AT@ 8872 @LENGTH@ 7
------------INS MethodInvocation@@driver.session() @TO@ VariableDeclarationFragment@@session=driver.session() @AT@ 8882 @LENGTH@ 16
---------------INS SimpleName@@Name:driver @TO@ MethodInvocation@@driver.session() @AT@ 8882 @LENGTH@ 6
---------------INS SimpleName@@MethodName:session:[] @TO@ MethodInvocation@@driver.session() @AT@ 8889 @LENGTH@ 9
------INS VariableDeclarationStatement@@long cnt=session.run("MATCH (m) - [r:ITS_COMPLICATED] -> (n) WHERE m.id = $id RETURN count(m)",Collections.singletonMap("id",now.getTime())).single().get(0).asLong(); @TO@ TryStatement@@try (Session session=driver.session()){  long cnt=session.run("MATCH (m) - [r:ITS_COMPLICATED] -> (n) WHERE m.id = $id RETURN count(m)",Collections.singletonMap("id",now.getTime())).single().get(0).asLong();  assertThat(cnt).isEqualTo(1L);}  @AT@ 8905 @LENGTH@ 183
---------INS PrimitiveType@@long @TO@ VariableDeclarationStatement@@long cnt=session.run("MATCH (m) - [r:ITS_COMPLICATED] -> (n) WHERE m.id = $id RETURN count(m)",Collections.singletonMap("id",now.getTime())).single().get(0).asLong(); @AT@ 8905 @LENGTH@ 4
---------INS VariableDeclarationFragment@@cnt=session.run("MATCH (m) - [r:ITS_COMPLICATED] -> (n) WHERE m.id = $id RETURN count(m)",Collections.singletonMap("id",now.getTime())).single().get(0).asLong() @TO@ VariableDeclarationStatement@@long cnt=session.run("MATCH (m) - [r:ITS_COMPLICATED] -> (n) WHERE m.id = $id RETURN count(m)",Collections.singletonMap("id",now.getTime())).single().get(0).asLong(); @AT@ 8910 @LENGTH@ 177
------------INS SimpleName@@cnt @TO@ VariableDeclarationFragment@@cnt=session.run("MATCH (m) - [r:ITS_COMPLICATED] -> (n) WHERE m.id = $id RETURN count(m)",Collections.singletonMap("id",now.getTime())).single().get(0).asLong() @AT@ 8910 @LENGTH@ 3
------------INS MethodInvocation@@session.run("MATCH (m) - [r:ITS_COMPLICATED] -> (n) WHERE m.id = $id RETURN count(m)",Collections.singletonMap("id",now.getTime())).single().get(0).asLong() @TO@ VariableDeclarationFragment@@cnt=session.run("MATCH (m) - [r:ITS_COMPLICATED] -> (n) WHERE m.id = $id RETURN count(m)",Collections.singletonMap("id",now.getTime())).single().get(0).asLong() @AT@ 8916 @LENGTH@ 171
---------------INS MethodInvocation@@MethodName:get:[0] @TO@ MethodInvocation@@session.run("MATCH (m) - [r:ITS_COMPLICATED] -> (n) WHERE m.id = $id RETURN count(m)",Collections.singletonMap("id",now.getTime())).single().get(0).asLong() @AT@ 8916 @LENGTH@ 162
------------------INS NumberLiteral@@0 @TO@ MethodInvocation@@MethodName:get:[0] @AT@ 9076 @LENGTH@ 1
---------------INS MethodInvocation@@MethodName:single:[] @TO@ MethodInvocation@@session.run("MATCH (m) - [r:ITS_COMPLICATED] -> (n) WHERE m.id = $id RETURN count(m)",Collections.singletonMap("id",now.getTime())).single().get(0).asLong() @AT@ 8916 @LENGTH@ 155
---------------INS MethodInvocation@@MethodName:run:["MATCH (m) - [r:ITS_COMPLICATED] -> (n) WHERE m.id = $id RETURN count(m)", Collections.singletonMap("id",now.getTime())] @TO@ MethodInvocation@@session.run("MATCH (m) - [r:ITS_COMPLICATED] -> (n) WHERE m.id = $id RETURN count(m)",Collections.singletonMap("id",now.getTime())).single().get(0).asLong() @AT@ 8916 @LENGTH@ 146
------------------INS StringLiteral@@"MATCH (m) - [r:ITS_COMPLICATED] -> (n) WHERE m.id = $id RETURN count(m)" @TO@ MethodInvocation@@MethodName:run:["MATCH (m) - [r:ITS_COMPLICATED] -> (n) WHERE m.id = $id RETURN count(m)", Collections.singletonMap("id",now.getTime())] @AT@ 8934 @LENGTH@ 73
------------------INS MethodInvocation@@Collections.singletonMap("id",now.getTime()) @TO@ MethodInvocation@@MethodName:run:["MATCH (m) - [r:ITS_COMPLICATED] -> (n) WHERE m.id = $id RETURN count(m)", Collections.singletonMap("id",now.getTime())] @AT@ 9016 @LENGTH@ 45
---------------------INS SimpleName@@Name:Collections @TO@ MethodInvocation@@Collections.singletonMap("id",now.getTime()) @AT@ 9016 @LENGTH@ 11
---------------------INS SimpleName@@MethodName:singletonMap:["id", now.getTime()] @TO@ MethodInvocation@@Collections.singletonMap("id",now.getTime()) @AT@ 9028 @LENGTH@ 33
------------------------INS StringLiteral@@"id" @TO@ SimpleName@@MethodName:singletonMap:["id", now.getTime()] @AT@ 9041 @LENGTH@ 4
------------------------INS MethodInvocation@@now.getTime() @TO@ SimpleName@@MethodName:singletonMap:["id", now.getTime()] @AT@ 9047 @LENGTH@ 13
---------------------------INS SimpleName@@Name:now @TO@ MethodInvocation@@now.getTime() @AT@ 9047 @LENGTH@ 3
---------------------------INS SimpleName@@MethodName:getTime:[] @TO@ MethodInvocation@@now.getTime() @AT@ 9051 @LENGTH@ 9
---------------INS SimpleName@@Name:session @TO@ MethodInvocation@@session.run("MATCH (m) - [r:ITS_COMPLICATED] -> (n) WHERE m.id = $id RETURN count(m)",Collections.singletonMap("id",now.getTime())).single().get(0).asLong() @AT@ 8916 @LENGTH@ 7
---------------INS SimpleName@@MethodName:asLong:[] @TO@ MethodInvocation@@session.run("MATCH (m) - [r:ITS_COMPLICATED] -> (n) WHERE m.id = $id RETURN count(m)",Collections.singletonMap("id",now.getTime())).single().get(0).asLong() @AT@ 9079 @LENGTH@ 8
------INS ExpressionStatement@@MethodInvocation:assertThat(cnt).isEqualTo(1L) @TO@ TryStatement@@try (Session session=driver.session()){  long cnt=session.run("MATCH (m) - [r:ITS_COMPLICATED] -> (n) WHERE m.id = $id RETURN count(m)",Collections.singletonMap("id",now.getTime())).single().get(0).asLong();  assertThat(cnt).isEqualTo(1L);}  @AT@ 9092 @LENGTH@ 30
---------INS MethodInvocation@@assertThat(cnt).isEqualTo(1L) @TO@ ExpressionStatement@@MethodInvocation:assertThat(cnt).isEqualTo(1L) @AT@ 9092 @LENGTH@ 29
------------INS MethodInvocation@@MethodName:assertThat:[cnt] @TO@ MethodInvocation@@assertThat(cnt).isEqualTo(1L) @AT@ 9092 @LENGTH@ 15
---------------INS SimpleName@@cnt @TO@ MethodInvocation@@MethodName:assertThat:[cnt] @AT@ 9103 @LENGTH@ 3
------------INS SimpleName@@MethodName:isEqualTo:[1L] @TO@ MethodInvocation@@assertThat(cnt).isEqualTo(1L) @AT@ 9108 @LENGTH@ 13
---------------INS NumberLiteral@@1L @TO@ SimpleName@@MethodName:isEqualTo:[1L] @AT@ 9118 @LENGTH@ 2


UPD Block@@ThenBody:{  reactiveExecutor.schedule(callback);} @TO@ ThenBody:{  AsyncCallback cb=callback;  taskFactory.release(this);  reactiveExecutor.schedule(cb);} @AT@ 34129 @LENGTH@ 84
---UPD ExpressionStatement@@MethodInvocation:reactiveExecutor.schedule(callback) @TO@ MethodInvocation:reactiveExecutor.schedule(cb) @AT@ 34155 @LENGTH@ 36
------UPD MethodInvocation@@reactiveExecutor.schedule(callback) @TO@ reactiveExecutor.schedule(cb) @AT@ 34155 @LENGTH@ 35
---------UPD SimpleName@@MethodName:schedule:[callback] @TO@ MethodName:schedule:[cb] @AT@ 34172 @LENGTH@ 18
------------UPD SimpleName@@callback @TO@ cb @AT@ 34181 @LENGTH@ 8
---INS VariableDeclarationStatement@@AsyncCallback cb=callback; @TO@ Block@@ThenBody:{  reactiveExecutor.schedule(callback);} @AT@ 34192 @LENGTH@ 28
------INS SimpleType@@AsyncCallback @TO@ VariableDeclarationStatement@@AsyncCallback cb=callback; @AT@ 34192 @LENGTH@ 13
------INS VariableDeclarationFragment@@cb=callback @TO@ VariableDeclarationStatement@@AsyncCallback cb=callback; @AT@ 34206 @LENGTH@ 13
---------INS SimpleName@@cb @TO@ VariableDeclarationFragment@@cb=callback @AT@ 34206 @LENGTH@ 2
---------INS SimpleName@@callback @TO@ VariableDeclarationFragment@@cb=callback @AT@ 34211 @LENGTH@ 8
---INS ExpressionStatement@@MethodInvocation:taskFactory.release(this) @TO@ Block@@ThenBody:{  reactiveExecutor.schedule(callback);} @AT@ 34245 @LENGTH@ 26
------INS MethodInvocation@@taskFactory.release(this) @TO@ ExpressionStatement@@MethodInvocation:taskFactory.release(this) @AT@ 34245 @LENGTH@ 25
---------INS SimpleName@@Name:taskFactory @TO@ MethodInvocation@@taskFactory.release(this) @AT@ 34245 @LENGTH@ 11
---------INS SimpleName@@MethodName:release:[this] @TO@ MethodInvocation@@taskFactory.release(this) @AT@ 34257 @LENGTH@ 13
------------INS ThisExpression@@this @TO@ SimpleName@@MethodName:release:[this] @AT@ 34265 @LENGTH@ 4


UPD TypeDeclaration@@[public]MainPropertyPlaceholderTest,  @TO@ [@Isolated, public]MainPropertyPlaceholderTest,  @AT@ 1046 @LENGTH@ 1929
---INS MarkerAnnotation@@@Isolated @TO@ TypeDeclaration@@[public]MainPropertyPlaceholderTest,  @AT@ 1094 @LENGTH@ 9


UPD ExpressionStatement@@Assignment:jwtAuthentoication=!BoxConfiguration.STANDARD_AUTHENTICATION.equals(authenticationType) @TO@ Assignment:jwtAuthentication=!BoxConfiguration.STANDARD_AUTHENTICATION.equals(authenticationType) @AT@ 2992 @LENGTH@ 90
---UPD Assignment@@jwtAuthentoication=!BoxConfiguration.STANDARD_AUTHENTICATION.equals(authenticationType) @TO@ jwtAuthentication=!BoxConfiguration.STANDARD_AUTHENTICATION.equals(authenticationType) @AT@ 2992 @LENGTH@ 89
------UPD SimpleName@@jwtAuthentoication @TO@ jwtAuthentication @AT@ 2992 @LENGTH@ 18


UPD ThrowStatement@@ClassInstanceCreation:new UnsupportedOperationException("UTF-16 requested when runninng on an IBM JDK with broken UTF-16 support. " + "Please find a JDK that supports UTF-16 if you intend to use UF-16 with WriterOutputStream") @TO@ ClassInstanceCreation:new UnsupportedOperationException("UTF-16 requested when running on an IBM JDK with broken UTF-16 support. " + "Please find a JDK that supports UTF-16 if you intend to use UF-16 with WriterOutputStream") @AT@ 14302 @LENGTH@ 231
---UPD ClassInstanceCreation@@UnsupportedOperationException["UTF-16 requested when runninng on an IBM JDK with broken UTF-16 support. " + "Please find a JDK that supports UTF-16 if you intend to use UF-16 with WriterOutputStream"] @TO@ UnsupportedOperationException["UTF-16 requested when running on an IBM JDK with broken UTF-16 support. " + "Please find a JDK that supports UTF-16 if you intend to use UF-16 with WriterOutputStream"] @AT@ 14308 @LENGTH@ 224
------UPD InfixExpression@@"UTF-16 requested when runninng on an IBM JDK with broken UTF-16 support. " + "Please find a JDK that supports UTF-16 if you intend to use UF-16 with WriterOutputStream" @TO@ "UTF-16 requested when running on an IBM JDK with broken UTF-16 support. " + "Please find a JDK that supports UTF-16 if you intend to use UF-16 with WriterOutputStream" @AT@ 14342 @LENGTH@ 189
---------UPD StringLiteral@@"UTF-16 requested when runninng on an IBM JDK with broken UTF-16 support. " @TO@ "UTF-16 requested when running on an IBM JDK with broken UTF-16 support. " @AT@ 14342 @LENGTH@ 75


DEL ExpressionStatement@@Assignment:name=StringHelper.before(name,"_") @AT@ 3604 @LENGTH@ 38
---DEL Assignment@@name=StringHelper.before(name,"_") @AT@ 3604 @LENGTH@ 37
------DEL SimpleName@@name @AT@ 3604 @LENGTH@ 4
------DEL Operator@@= @AT@ 3608 @LENGTH@ 1
------DEL MethodInvocation@@StringHelper.before(name,"_") @AT@ 3611 @LENGTH@ 30
---------DEL SimpleName@@Name:StringHelper @AT@ 3611 @LENGTH@ 12
---------DEL SimpleName@@MethodName:before:[name, "_"] @AT@ 3624 @LENGTH@ 17
------------DEL SimpleName@@name @AT@ 3631 @LENGTH@ 4
------------DEL StringLiteral@@"_" @AT@ 3637 @LENGTH@ 3


UPD IfStatement@@if (sb.length() == 0 && (node instanceof LiteralNode)) {  firstIsLiteral=true;} @TO@ if (sb.length() == 0 && node instanceof LiteralNode) {  firstIsLiteral=true;} @AT@ 8264 @LENGTH@ 117
---UPD InfixExpression@@sb.length() == 0 && (node instanceof LiteralNode) @TO@ sb.length() == 0 && node instanceof LiteralNode @AT@ 8268 @LENGTH@ 49
------DEL ParenthesizedExpression@@(node instanceof LiteralNode) @AT@ 8288 @LENGTH@ 29
---------DEL InstanceofExpression@@node instanceof LiteralNode @AT@ 8289 @LENGTH@ 27
------INS InstanceofExpression@@node instanceof LiteralNode @TO@ InfixExpression@@sb.length() == 0 && (node instanceof LiteralNode) @AT@ 8288 @LENGTH@ 27
---------MOV SimpleName@@node @TO@ InstanceofExpression@@node instanceof LiteralNode @AT@ 8289 @LENGTH@ 4
---------MOV Instanceof@@instanceof @TO@ InstanceofExpression@@node instanceof LiteralNode @AT@ 8294 @LENGTH@ 10
---------MOV SimpleType@@LiteralNode @TO@ InstanceofExpression@@node instanceof LiteralNode @AT@ 8305 @LENGTH@ 11


UPD ReturnStatement@@MethodInvocation:source.stream().map(itemConverter::convert).collect(Collectors.toCollection(source instanceof LinkedHashSet ? LinkedHashSet::new : HashSet::new)) @TO@ MethodInvocation:source.stream().map(itemConverter::convert).collect(Collectors.toCollection(LinkedHashSet::new)) @AT@ 1728 @LENGTH@ 158
---UPD MethodInvocation@@source.stream().map(itemConverter::convert).collect(Collectors.toCollection(source instanceof LinkedHashSet ? LinkedHashSet::new : HashSet::new)) @TO@ source.stream().map(itemConverter::convert).collect(Collectors.toCollection(LinkedHashSet::new)) @AT@ 1735 @LENGTH@ 150
------UPD SimpleName@@MethodName:collect:[Collectors.toCollection(source instanceof LinkedHashSet ? LinkedHashSet::new : HashSet::new)] @TO@ MethodName:collect:[Collectors.toCollection(LinkedHashSet::new)] @AT@ 1784 @LENGTH@ 101
---------UPD MethodInvocation@@Collectors.toCollection(source instanceof LinkedHashSet ? LinkedHashSet::new : HashSet::new) @TO@ Collectors.toCollection(LinkedHashSet::new) @AT@ 1792 @LENGTH@ 92
------------UPD SimpleName@@MethodName:toCollection:[source instanceof LinkedHashSet ? LinkedHashSet::new : HashSet::new] @TO@ MethodName:toCollection:[LinkedHashSet::new] @AT@ 1803 @LENGTH@ 81
---------------DEL ConditionalExpression@@source instanceof LinkedHashSet ? LinkedHashSet::new : HashSet::new @AT@ 1816 @LENGTH@ 67
------------------DEL InstanceofExpression@@source instanceof LinkedHashSet @AT@ 1816 @LENGTH@ 31
---------------------DEL SimpleName@@source @AT@ 1816 @LENGTH@ 6
---------------------DEL Instanceof@@instanceof @AT@ 1823 @LENGTH@ 10
---------------------DEL SimpleType@@LinkedHashSet @AT@ 1834 @LENGTH@ 13


MOV FieldDeclaration@@private, static, final, Logger, [LOG=LoggerFactory.getLogger(TransactedConsumeTest.class)] @TO@ TypeDeclaration@@[public]TransactedConsumeTest, ActiveMQSpringTestSupport @AT@ 2034 @LENGTH@ 87


INS MethodDeclaration@@public, static, boolean, MethodName:isRegularFile, final Path path, final LinkOption... options,  @TO@ TypeDeclaration@@[public, final]PathUtils,  @AT@ 35717 @LENGTH@ 163
---INS Modifier@@public @TO@ MethodDeclaration@@public, static, boolean, MethodName:isRegularFile, final Path path, final LinkOption... options,  @AT@ 35717 @LENGTH@ 6
---INS Modifier@@static @TO@ MethodDeclaration@@public, static, boolean, MethodName:isRegularFile, final Path path, final LinkOption... options,  @AT@ 35724 @LENGTH@ 6
---INS PrimitiveType@@boolean @TO@ MethodDeclaration@@public, static, boolean, MethodName:isRegularFile, final Path path, final LinkOption... options,  @AT@ 35731 @LENGTH@ 7
---INS SimpleName@@MethodName:isRegularFile @TO@ MethodDeclaration@@public, static, boolean, MethodName:isRegularFile, final Path path, final LinkOption... options,  @AT@ 35739 @LENGTH@ 13
---INS SingleVariableDeclaration@@final Path path @TO@ MethodDeclaration@@public, static, boolean, MethodName:isRegularFile, final Path path, final LinkOption... options,  @AT@ 35753 @LENGTH@ 15
------INS Modifier@@final @TO@ SingleVariableDeclaration@@final Path path @AT@ 35753 @LENGTH@ 5
------INS SimpleType@@Path @TO@ SingleVariableDeclaration@@final Path path @AT@ 35759 @LENGTH@ 4
------INS SimpleName@@path @TO@ SingleVariableDeclaration@@final Path path @AT@ 35764 @LENGTH@ 4
---INS SingleVariableDeclaration@@final LinkOption... options @TO@ MethodDeclaration@@public, static, boolean, MethodName:isRegularFile, final Path path, final LinkOption... options,  @AT@ 35770 @LENGTH@ 27
------INS Modifier@@final @TO@ SingleVariableDeclaration@@final LinkOption... options @AT@ 35770 @LENGTH@ 5
------INS SimpleType@@LinkOption @TO@ SingleVariableDeclaration@@final LinkOption... options @AT@ 35776 @LENGTH@ 10
------INS SimpleName@@options @TO@ SingleVariableDeclaration@@final LinkOption... options @AT@ 35790 @LENGTH@ 7
---INS ReturnStatement@@ConditionalExpression:path != null ? Files.isRegularFile(path,options) : false @TO@ MethodDeclaration@@public, static, boolean, MethodName:isRegularFile, final Path path, final LinkOption... options,  @AT@ 35809 @LENGTH@ 65
------INS ConditionalExpression@@path != null ? Files.isRegularFile(path,options) : false @TO@ ReturnStatement@@ConditionalExpression:path != null ? Files.isRegularFile(path,options) : false @AT@ 35816 @LENGTH@ 57
---------INS InfixExpression@@path != null @TO@ ConditionalExpression@@path != null ? Files.isRegularFile(path,options) : false @AT@ 35816 @LENGTH@ 12
------------INS SimpleName@@path @TO@ InfixExpression@@path != null @AT@ 35816 @LENGTH@ 4
------------INS Operator@@!= @TO@ InfixExpression@@path != null @AT@ 35820 @LENGTH@ 2
------------INS NullLiteral@@null @TO@ InfixExpression@@path != null @AT@ 35824 @LENGTH@ 4
---------INS MethodInvocation@@Files.isRegularFile(path,options) @TO@ ConditionalExpression@@path != null ? Files.isRegularFile(path,options) : false @AT@ 35831 @LENGTH@ 34
------------INS SimpleName@@Name:Files @TO@ MethodInvocation@@Files.isRegularFile(path,options) @AT@ 35831 @LENGTH@ 5
------------INS SimpleName@@MethodName:isRegularFile:[path, options] @TO@ MethodInvocation@@Files.isRegularFile(path,options) @AT@ 35837 @LENGTH@ 28
---------------INS SimpleName@@path @TO@ SimpleName@@MethodName:isRegularFile:[path, options] @AT@ 35851 @LENGTH@ 4
---------------INS SimpleName@@options @TO@ SimpleName@@MethodName:isRegularFile:[path, options] @AT@ 35857 @LENGTH@ 7
---------INS BooleanLiteral@@false @TO@ ConditionalExpression@@path != null ? Files.isRegularFile(path,options) : false @AT@ 35868 @LENGTH@ 5


UPD IfStatement@@if (path1 == null ^ path2 == null) {  return false;} @TO@ if (path1 == null || path2 == null) {  return false;} @AT@ 22268 @LENGTH@ 72
---UPD InfixExpression@@path1 == null ^ path2 == null @TO@ path1 == null || path2 == null @AT@ 22272 @LENGTH@ 29
------UPD Operator@@^ @TO@ || @AT@ 22285 @LENGTH@ 1


MOV FieldDeclaration@@private, File, [cachedir] @TO@ TypeDeclaration@@[@Mojo(name="fromApis",requiresDependencyResolution=ResolutionScope.COMPILE_PLUS_RUNTIME,requiresProject=true,defaultPhase=LifecyclePhase.GENERATE_SOURCES,threadSafe=true), public]ApiComponentGeneratorMojo, AbstractApiMethodBaseMojo @AT@ 2915 @LENGTH@ 22


UPD ReturnStatement@@InfixExpression:(on != null && server.isRegistered(on)) || server.isRegistered(name) @TO@ InfixExpression:on != null && server.isRegistered(on) || server.isRegistered(name) @AT@ 12758 @LENGTH@ 92
---UPD InfixExpression@@(on != null && server.isRegistered(on)) || server.isRegistered(name) @TO@ on != null && server.isRegistered(on) || server.isRegistered(name) @AT@ 12765 @LENGTH@ 84
------DEL ParenthesizedExpression@@(on != null && server.isRegistered(on)) @AT@ 12765 @LENGTH@ 39
------MOV InfixExpression@@on != null && server.isRegistered(on) @TO@ InfixExpression@@(on != null && server.isRegistered(on)) || server.isRegistered(name) @AT@ 12766 @LENGTH@ 37


DEL ExpressionStatement@@MethodInvocation:entityCallbacks.addEntityCallback(new ReactiveOptimisticLockingBeforeBindCallback(context)) @AT@ 2744 @LENGTH@ 92
---DEL MethodInvocation@@entityCallbacks.addEntityCallback(new ReactiveOptimisticLockingBeforeBindCallback(context)) @AT@ 2744 @LENGTH@ 91
------DEL SimpleName@@Name:entityCallbacks @AT@ 2744 @LENGTH@ 15
------DEL SimpleName@@MethodName:addEntityCallback:[new ReactiveOptimisticLockingBeforeBindCallback(context)] @AT@ 2760 @LENGTH@ 75
---------DEL ClassInstanceCreation@@ReactiveOptimisticLockingBeforeBindCallback[context] @AT@ 2778 @LENGTH@ 56
------------DEL New@@new @AT@ 2778 @LENGTH@ 3
------------DEL SimpleType@@ReactiveOptimisticLockingBeforeBindCallback @AT@ 2782 @LENGTH@ 43
------------DEL SimpleName@@context @AT@ 2826 @LENGTH@ 7


INS MethodDeclaration@@public, void, MethodName:testThrowException, IOException,  @TO@ TypeDeclaration@@[public]TarFileTest, AbstractTestCase @AT@ 4224 @LENGTH@ 144
---INS Modifier@@public @TO@ MethodDeclaration@@public, void, MethodName:testThrowException, IOException,  @AT@ 4224 @LENGTH@ 6
---INS PrimitiveType@@void @TO@ MethodDeclaration@@public, void, MethodName:testThrowException, IOException,  @AT@ 4231 @LENGTH@ 4
---INS SimpleName@@MethodName:testThrowException @TO@ MethodDeclaration@@public, void, MethodName:testThrowException, IOException,  @AT@ 4236 @LENGTH@ 18
---INS SimpleType@@IOException @TO@ MethodDeclaration@@public, void, MethodName:testThrowException, IOException,  @AT@ 4264 @LENGTH@ 11
---INS TryStatement@@try (TarFile tarFile=new TarFile(getPath("COMPRESS-553.tar"))){}  @TO@ MethodDeclaration@@public, void, MethodName:testThrowException, IOException,  @AT@ 4286 @LENGTH@ 76
------INS VariableDeclarationExpression@@TarFile tarFile=new TarFile(getPath("COMPRESS-553.tar")) @TO@ TryStatement@@try (TarFile tarFile=new TarFile(getPath("COMPRESS-553.tar"))){}  @AT@ 4291 @LENGTH@ 58
---------INS SimpleType@@TarFile @TO@ VariableDeclarationExpression@@TarFile tarFile=new TarFile(getPath("COMPRESS-553.tar")) @AT@ 4291 @LENGTH@ 7
---------INS VariableDeclarationFragment@@tarFile=new TarFile(getPath("COMPRESS-553.tar")) @TO@ VariableDeclarationExpression@@TarFile tarFile=new TarFile(getPath("COMPRESS-553.tar")) @AT@ 4299 @LENGTH@ 50
------------INS SimpleName@@tarFile @TO@ VariableDeclarationFragment@@tarFile=new TarFile(getPath("COMPRESS-553.tar")) @AT@ 4299 @LENGTH@ 7
------------INS ClassInstanceCreation@@TarFile[getPath("COMPRESS-553.tar")] @TO@ VariableDeclarationFragment@@tarFile=new TarFile(getPath("COMPRESS-553.tar")) @AT@ 4309 @LENGTH@ 40
---------------INS New@@new @TO@ ClassInstanceCreation@@TarFile[getPath("COMPRESS-553.tar")] @AT@ 4309 @LENGTH@ 3
---------------INS SimpleType@@TarFile @TO@ ClassInstanceCreation@@TarFile[getPath("COMPRESS-553.tar")] @AT@ 4313 @LENGTH@ 7
---------------INS MethodInvocation@@getPath("COMPRESS-553.tar") @TO@ ClassInstanceCreation@@TarFile[getPath("COMPRESS-553.tar")] @AT@ 4321 @LENGTH@ 27
------------------INS SimpleName@@MethodName:getPath:["COMPRESS-553.tar"] @TO@ MethodInvocation@@getPath("COMPRESS-553.tar") @AT@ 4321 @LENGTH@ 27
---------------------INS StringLiteral@@"COMPRESS-553.tar" @TO@ SimpleName@@MethodName:getPath:["COMPRESS-553.tar"] @AT@ 4329 @LENGTH@ 18


UPD LambdaExpression@@(def,key) -> {
  if ("description".equals(key)) {
    def.setDescription(doParseDescriptionDefinition());
    return true;
  }
  return false;
}
 @TO@ (def,key) -> {
switch (key) {
case "description":
    def.setDescription(doParseDescriptionDefinition());
  break;
case "generatedId":
def.setGeneratedId(doParseText());
break;
default :
return false;
}
return true;
}
 @AT@ 8401 @LENGTH@ 207
---INS SwitchStatement@@switch (key) {case "description":  def.setDescription(doParseDescriptionDefinition());break;case "generatedId":def.setGeneratedId(doParseText());break;default :return false;} @TO@ LambdaExpression@@(def,key) -> {
  if ("description".equals(key)) {
    def.setDescription(doParseDescriptionDefinition());
    return true;
  }
  return false;
}
 @AT@ 8429 @LENGTH@ 240
------INS SimpleName@@key @TO@ SwitchStatement@@switch (key) {case "description":  def.setDescription(doParseDescriptionDefinition());break;case "generatedId":def.setGeneratedId(doParseText());break;default :return false;} @AT@ 8437 @LENGTH@ 3
------INS SwitchCase@@case "description": @TO@ SwitchStatement@@switch (key) {case "description":  def.setDescription(doParseDescriptionDefinition());break;case "generatedId":def.setGeneratedId(doParseText());break;default :return false;} @AT@ 8460 @LENGTH@ 19
---------INS StringLiteral@@"description" @TO@ SwitchCase@@case "description": @AT@ 8465 @LENGTH@ 13
------MOV ExpressionStatement@@MethodInvocation:def.setDescription(doParseDescriptionDefinition()) @TO@ SwitchStatement@@switch (key) {case "description":  def.setDescription(doParseDescriptionDefinition());break;case "generatedId":def.setGeneratedId(doParseText());break;default :return false;} @AT@ 8478 @LENGTH@ 51
------INS BreakStatement@@ @TO@ SwitchStatement@@switch (key) {case "description":  def.setDescription(doParseDescriptionDefinition());break;case "generatedId":def.setGeneratedId(doParseText());break;default :return false;} @AT@ 8532 @LENGTH@ 6
------INS SwitchCase@@case "generatedId": @TO@ SwitchStatement@@switch (key) {case "description":  def.setDescription(doParseDescriptionDefinition());break;case "generatedId":def.setGeneratedId(doParseText());break;default :return false;} @AT@ 8555 @LENGTH@ 19
---------INS StringLiteral@@"generatedId" @TO@ SwitchCase@@case "generatedId": @AT@ 8560 @LENGTH@ 13
------INS ExpressionStatement@@MethodInvocation:def.setGeneratedId(doParseText()) @TO@ SwitchStatement@@switch (key) {case "description":  def.setDescription(doParseDescriptionDefinition());break;case "generatedId":def.setGeneratedId(doParseText());break;default :return false;} @AT@ 8575 @LENGTH@ 34
---------INS MethodInvocation@@def.setGeneratedId(doParseText()) @TO@ ExpressionStatement@@MethodInvocation:def.setGeneratedId(doParseText()) @AT@ 8575 @LENGTH@ 33
------------MOV SimpleName@@MethodName:equals:[key] @TO@ MethodInvocation@@def.setGeneratedId(doParseText()) @AT@ 8447 @LENGTH@ 11
---------------DEL SimpleName@@key @AT@ 8454 @LENGTH@ 3
---------------INS MethodInvocation@@MethodName:doParseText:[] @TO@ SimpleName@@MethodName:equals:[key] @AT@ 8594 @LENGTH@ 13
------------INS SimpleName@@Name:def @TO@ MethodInvocation@@def.setGeneratedId(doParseText()) @AT@ 8575 @LENGTH@ 3
------INS BreakStatement@@ @TO@ SwitchStatement@@switch (key) {case "description":  def.setDescription(doParseDescriptionDefinition());break;case "generatedId":def.setGeneratedId(doParseText());break;default :return false;} @AT@ 8610 @LENGTH@ 6
------INS SwitchCase@@default @TO@ SwitchStatement@@switch (key) {case "description":  def.setDescription(doParseDescriptionDefinition());break;case "generatedId":def.setGeneratedId(doParseText());break;default :return false;} @AT@ 8633 @LENGTH@ 8
------INS ReturnStatement@@BooleanLiteral:false @TO@ SwitchStatement@@switch (key) {case "description":  def.setDescription(doParseDescriptionDefinition());break;case "generatedId":def.setGeneratedId(doParseText());break;default :return false;} @AT@ 8642 @LENGTH@ 13
---------MOV BooleanLiteral@@true @TO@ ReturnStatement@@BooleanLiteral:false @AT@ 8553 @LENGTH@ 4
---DEL IfStatement@@if ("description".equals(key)) {  def.setDescription(doParseDescriptionDefinition());  return true;} @AT@ 8429 @LENGTH@ 143
------DEL MethodInvocation@@"description".equals(key) @AT@ 8433 @LENGTH@ 25
---------DEL StringLiteral@@"description" @AT@ 8433 @LENGTH@ 13
------DEL Block@@ThenBody:{  def.setDescription(doParseDescriptionDefinition());  return true;} @AT@ 8460 @LENGTH@ 112
---------DEL ReturnStatement@@BooleanLiteral:true @AT@ 8546 @LENGTH@ 12
---UPD ReturnStatement@@BooleanLiteral:false @TO@ BooleanLiteral:true @AT@ 8585 @LENGTH@ 13
------UPD BooleanLiteral@@false @TO@ true @AT@ 8592 @LENGTH@ 5


INS MethodDeclaration@@public, void, MethodName:handleErrorWhenErrorResponseWithInvalidWwwAuthenticateHeaderThenHandled,  @TO@ TypeDeclaration@@[public]OAuth2ErrorResponseErrorHandlerTests,  @AT@ 2452 @LENGTH@ 495
---INS Modifier@@public @TO@ MethodDeclaration@@public, void, MethodName:handleErrorWhenErrorResponseWithInvalidWwwAuthenticateHeaderThenHandled,  @AT@ 2452 @LENGTH@ 6
---INS PrimitiveType@@void @TO@ MethodDeclaration@@public, void, MethodName:handleErrorWhenErrorResponseWithInvalidWwwAuthenticateHeaderThenHandled,  @AT@ 2459 @LENGTH@ 4
---INS SimpleName@@MethodName:handleErrorWhenErrorResponseWithInvalidWwwAuthenticateHeaderThenHandled @TO@ MethodDeclaration@@public, void, MethodName:handleErrorWhenErrorResponseWithInvalidWwwAuthenticateHeaderThenHandled,  @AT@ 2464 @LENGTH@ 71
---INS VariableDeclarationStatement@@String invalidWwwAuthenticateHeader="Unauthorized"; @TO@ MethodDeclaration@@public, void, MethodName:handleErrorWhenErrorResponseWithInvalidWwwAuthenticateHeaderThenHandled,  @AT@ 2542 @LENGTH@ 53
------INS SimpleType@@String @TO@ VariableDeclarationStatement@@String invalidWwwAuthenticateHeader="Unauthorized"; @AT@ 2542 @LENGTH@ 6
------INS VariableDeclarationFragment@@invalidWwwAuthenticateHeader="Unauthorized" @TO@ VariableDeclarationStatement@@String invalidWwwAuthenticateHeader="Unauthorized"; @AT@ 2549 @LENGTH@ 45
---------INS SimpleName@@invalidWwwAuthenticateHeader @TO@ VariableDeclarationFragment@@invalidWwwAuthenticateHeader="Unauthorized" @AT@ 2549 @LENGTH@ 28
---------INS StringLiteral@@"Unauthorized" @TO@ VariableDeclarationFragment@@invalidWwwAuthenticateHeader="Unauthorized" @AT@ 2580 @LENGTH@ 14
---INS VariableDeclarationStatement@@MockClientHttpResponse response=new MockClientHttpResponse(new byte[0],HttpStatus.BAD_REQUEST); @TO@ MethodDeclaration@@public, void, MethodName:handleErrorWhenErrorResponseWithInvalidWwwAuthenticateHeaderThenHandled,  @AT@ 2598 @LENGTH@ 98
------INS SimpleType@@MockClientHttpResponse @TO@ VariableDeclarationStatement@@MockClientHttpResponse response=new MockClientHttpResponse(new byte[0],HttpStatus.BAD_REQUEST); @AT@ 2598 @LENGTH@ 22
------INS VariableDeclarationFragment@@response=new MockClientHttpResponse(new byte[0],HttpStatus.BAD_REQUEST) @TO@ VariableDeclarationStatement@@MockClientHttpResponse response=new MockClientHttpResponse(new byte[0],HttpStatus.BAD_REQUEST); @AT@ 2621 @LENGTH@ 74
---------INS SimpleName@@response @TO@ VariableDeclarationFragment@@response=new MockClientHttpResponse(new byte[0],HttpStatus.BAD_REQUEST) @AT@ 2621 @LENGTH@ 8
---------INS ClassInstanceCreation@@MockClientHttpResponse[new byte[0], HttpStatus.BAD_REQUEST] @TO@ VariableDeclarationFragment@@response=new MockClientHttpResponse(new byte[0],HttpStatus.BAD_REQUEST) @AT@ 2632 @LENGTH@ 63
------------INS New@@new @TO@ ClassInstanceCreation@@MockClientHttpResponse[new byte[0], HttpStatus.BAD_REQUEST] @AT@ 2632 @LENGTH@ 3
------------INS SimpleType@@MockClientHttpResponse @TO@ ClassInstanceCreation@@MockClientHttpResponse[new byte[0], HttpStatus.BAD_REQUEST] @AT@ 2636 @LENGTH@ 22
------------INS ArrayCreation@@new byte[0] @TO@ ClassInstanceCreation@@MockClientHttpResponse[new byte[0], HttpStatus.BAD_REQUEST] @AT@ 2659 @LENGTH@ 11
---------------INS ArrayType@@byte[] @TO@ ArrayCreation@@new byte[0] @AT@ 2663 @LENGTH@ 7
------------------INS PrimitiveType@@byte @TO@ ArrayType@@byte[] @AT@ 2663 @LENGTH@ 4
---------------INS NumberLiteral@@0 @TO@ ArrayCreation@@new byte[0] @AT@ 2668 @LENGTH@ 1
------------INS QualifiedName@@HttpStatus.BAD_REQUEST @TO@ ClassInstanceCreation@@MockClientHttpResponse[new byte[0], HttpStatus.BAD_REQUEST] @AT@ 2672 @LENGTH@ 22
---------------INS SimpleName@@HttpStatus @TO@ QualifiedName@@HttpStatus.BAD_REQUEST @AT@ 2672 @LENGTH@ 10
---------------INS SimpleName@@BAD_REQUEST @TO@ QualifiedName@@HttpStatus.BAD_REQUEST @AT@ 2683 @LENGTH@ 11
---INS ExpressionStatement@@MethodInvocation:response.getHeaders().add(HttpHeaders.WWW_AUTHENTICATE,invalidWwwAuthenticateHeader) @TO@ MethodDeclaration@@public, void, MethodName:handleErrorWhenErrorResponseWithInvalidWwwAuthenticateHeaderThenHandled,  @AT@ 2699 @LENGTH@ 86
------INS MethodInvocation@@response.getHeaders().add(HttpHeaders.WWW_AUTHENTICATE,invalidWwwAuthenticateHeader) @TO@ ExpressionStatement@@MethodInvocation:response.getHeaders().add(HttpHeaders.WWW_AUTHENTICATE,invalidWwwAuthenticateHeader) @AT@ 2699 @LENGTH@ 85
---------INS MethodInvocation@@MethodName:getHeaders:[] @TO@ MethodInvocation@@response.getHeaders().add(HttpHeaders.WWW_AUTHENTICATE,invalidWwwAuthenticateHeader) @AT@ 2699 @LENGTH@ 21
---------INS SimpleName@@Name:response @TO@ MethodInvocation@@response.getHeaders().add(HttpHeaders.WWW_AUTHENTICATE,invalidWwwAuthenticateHeader) @AT@ 2699 @LENGTH@ 8
---------INS SimpleName@@MethodName:add:[HttpHeaders.WWW_AUTHENTICATE, invalidWwwAuthenticateHeader] @TO@ MethodInvocation@@response.getHeaders().add(HttpHeaders.WWW_AUTHENTICATE,invalidWwwAuthenticateHeader) @AT@ 2721 @LENGTH@ 63
------------INS QualifiedName@@HttpHeaders.WWW_AUTHENTICATE @TO@ SimpleName@@MethodName:add:[HttpHeaders.WWW_AUTHENTICATE, invalidWwwAuthenticateHeader] @AT@ 2725 @LENGTH@ 28
---------------INS SimpleName@@HttpHeaders @TO@ QualifiedName@@HttpHeaders.WWW_AUTHENTICATE @AT@ 2725 @LENGTH@ 11
---------------INS SimpleName@@WWW_AUTHENTICATE @TO@ QualifiedName@@HttpHeaders.WWW_AUTHENTICATE @AT@ 2737 @LENGTH@ 16
------------INS SimpleName@@invalidWwwAuthenticateHeader @TO@ SimpleName@@MethodName:add:[HttpHeaders.WWW_AUTHENTICATE, invalidWwwAuthenticateHeader] @AT@ 2755 @LENGTH@ 28
---INS ExpressionStatement@@MethodInvocation:assertThatExceptionOfType(OAuth2AuthorizationException.class).isThrownBy(() -> this.errorHandler.handleError(response)).withMessage("[server_error] ") @TO@ MethodDeclaration@@public, void, MethodName:handleErrorWhenErrorResponseWithInvalidWwwAuthenticateHeaderThenHandled,  @AT@ 2788 @LENGTH@ 156
------INS MethodInvocation@@assertThatExceptionOfType(OAuth2AuthorizationException.class).isThrownBy(() -> this.errorHandler.handleError(response)).withMessage("[server_error] ") @TO@ ExpressionStatement@@MethodInvocation:assertThatExceptionOfType(OAuth2AuthorizationException.class).isThrownBy(() -> this.errorHandler.handleError(response)).withMessage("[server_error] ") @AT@ 2788 @LENGTH@ 155
---------INS MethodInvocation@@MethodName:isThrownBy:[() -> this.errorHandler.handleError(response)] @TO@ MethodInvocation@@assertThatExceptionOfType(OAuth2AuthorizationException.class).isThrownBy(() -> this.errorHandler.handleError(response)).withMessage("[server_error] ") @AT@ 2788 @LENGTH@ 124
------------INS LambdaExpression@@() -> this.errorHandler.handleError(response) @TO@ MethodInvocation@@MethodName:isThrownBy:[() -> this.errorHandler.handleError(response)] @AT@ 2866 @LENGTH@ 45
---------------INS MethodInvocation@@this.errorHandler.handleError(response) @TO@ LambdaExpression@@() -> this.errorHandler.handleError(response) @AT@ 2872 @LENGTH@ 39
------------------INS FieldAccess@@this.errorHandler @TO@ MethodInvocation@@this.errorHandler.handleError(response) @AT@ 2872 @LENGTH@ 17
---------------------INS ThisExpression@@this @TO@ FieldAccess@@this.errorHandler @AT@ 2872 @LENGTH@ 4
---------------------INS SimpleName@@errorHandler @TO@ FieldAccess@@this.errorHandler @AT@ 2877 @LENGTH@ 12
------------------INS SimpleName@@MethodName:handleError:[response] @TO@ MethodInvocation@@this.errorHandler.handleError(response) @AT@ 2890 @LENGTH@ 21
---------------------INS SimpleName@@response @TO@ SimpleName@@MethodName:handleError:[response] @AT@ 2902 @LENGTH@ 8
---------INS MethodInvocation@@MethodName:assertThatExceptionOfType:[OAuth2AuthorizationException.class] @TO@ MethodInvocation@@assertThatExceptionOfType(OAuth2AuthorizationException.class).isThrownBy(() -> this.errorHandler.handleError(response)).withMessage("[server_error] ") @AT@ 2788 @LENGTH@ 61
------------INS TypeLiteral@@OAuth2AuthorizationException.class @TO@ MethodInvocation@@MethodName:assertThatExceptionOfType:[OAuth2AuthorizationException.class] @AT@ 2814 @LENGTH@ 34
---------INS SimpleName@@MethodName:withMessage:["[server_error] "] @TO@ MethodInvocation@@assertThatExceptionOfType(OAuth2AuthorizationException.class).isThrownBy(() -> this.errorHandler.handleError(response)).withMessage("[server_error] ") @AT@ 2913 @LENGTH@ 30
------------INS StringLiteral@@"[server_error] " @TO@ SimpleName@@MethodName:withMessage:["[server_error] "] @AT@ 2925 @LENGTH@ 17


DEL MethodDeclaration@@public, void, MethodName:resetRollbackOnly,  @AT@ 2996 @LENGTH@ 82
---DEL Modifier@@public @AT@ 2996 @LENGTH@ 6
---DEL PrimitiveType@@void @AT@ 3003 @LENGTH@ 4
---DEL SimpleName@@MethodName:resetRollbackOnly @AT@ 3008 @LENGTH@ 17
---DEL ThrowStatement@@ClassInstanceCreation:new UnsupportedOperationException() @AT@ 3033 @LENGTH@ 42
------DEL ClassInstanceCreation@@UnsupportedOperationException[] @AT@ 3039 @LENGTH@ 35
---------DEL New@@new @AT@ 3039 @LENGTH@ 3
---------DEL SimpleType@@UnsupportedOperationException @AT@ 3043 @LENGTH@ 29


UPD IfStatement@@if (isAssignableFrom(isDelegateOrEvent,false,bounds,beanSupertype) || (Class.class.isInstance(bounds) && ParameterizedType.class.isInstance(beanSupertype) && bounds == ParameterizedType.class.cast(beanSupertype).getRawType())) {  isAssignable=true;  break;} @TO@ if (isAssignableFrom(isDelegateOrEvent,false,bounds,beanSupertype) || Class.class.isInstance(bounds) && ParameterizedType.class.isInstance(beanSupertype) && bounds == ParameterizedType.class.cast(beanSupertype).getRawType()) {  isAssignable=true;  break;} @AT@ 16349 @LENGTH@ 373
---UPD InfixExpression@@isAssignableFrom(isDelegateOrEvent,false,bounds,beanSupertype) || (Class.class.isInstance(bounds) && ParameterizedType.class.isInstance(beanSupertype) && bounds == ParameterizedType.class.cast(beanSupertype).getRawType()) @TO@ isAssignableFrom(isDelegateOrEvent,false,bounds,beanSupertype) || Class.class.isInstance(bounds) && ParameterizedType.class.isInstance(beanSupertype) && bounds == ParameterizedType.class.cast(beanSupertype).getRawType() @AT@ 16353 @LENGTH@ 280
------DEL ParenthesizedExpression@@(Class.class.isInstance(bounds) && ParameterizedType.class.isInstance(beanSupertype) && bounds == ParameterizedType.class.cast(beanSupertype).getRawType()) @AT@ 16446 @LENGTH@ 187
------MOV InfixExpression@@Class.class.isInstance(bounds) && ParameterizedType.class.isInstance(beanSupertype) && bounds == ParameterizedType.class.cast(beanSupertype).getRawType() @TO@ InfixExpression@@isAssignableFrom(isDelegateOrEvent,false,bounds,beanSupertype) || (Class.class.isInstance(bounds) && ParameterizedType.class.isInstance(beanSupertype) && bounds == ParameterizedType.class.cast(beanSupertype).getRawType()) @AT@ 16447 @LENGTH@ 185


UPD FieldDeclaration@@int, [index=0] @TO@ int, [index] @AT@ 1636 @LENGTH@ 14
---UPD VariableDeclarationFragment@@index=0 @TO@ index @AT@ 1640 @LENGTH@ 9
------DEL NumberLiteral@@0 @AT@ 1648 @LENGTH@ 1


MOV FieldDeclaration@@private, static, final, boolean, [PRINT_STACK_TRACE=false] @TO@ TypeDeclaration@@[public]TransactedStackSizeBreakOnExceptionTest, TransactionClientDataSourceSupport @AT@ 1167 @LENGTH@ 55


UPD ReturnStatement@@MethodInvocation:DataFormatReifier.getDataFormat(camelContext,definition.getRef()) @TO@ MethodInvocation:DataFormatReifier.getDataFormat(camelContext,ref) @AT@ 1380 @LENGTH@ 74
---UPD MethodInvocation@@DataFormatReifier.getDataFormat(camelContext,definition.getRef()) @TO@ DataFormatReifier.getDataFormat(camelContext,ref) @AT@ 1387 @LENGTH@ 66
------UPD SimpleName@@MethodName:getDataFormat:[camelContext, definition.getRef()] @TO@ MethodName:getDataFormat:[camelContext, ref] @AT@ 1405 @LENGTH@ 48
---------DEL MethodInvocation@@definition.getRef() @AT@ 1433 @LENGTH@ 19
------------DEL SimpleName@@Name:definition @AT@ 1433 @LENGTH@ 10
------------DEL SimpleName@@MethodName:getRef:[] @AT@ 1444 @LENGTH@ 8
---------INS SimpleName@@ref @TO@ SimpleName@@MethodName:getDataFormat:[camelContext, definition.getRef()] @AT@ 1488 @LENGTH@ 3


UPD TryStatement@@try {  for (  Entry<String,ExprNodeDesc> e : exprMap.entrySet()) {    ret.put(extractColumnName(e.getValue()),e.getKey());  }  return Optional.of(new TreeSet<>(ret.values()));} catch (SemanticException e) {  return Optional.empty();} @TO@ try {  for (  Entry<String,ExprNodeDesc> e : exprMap.entrySet()) {    String columnName=extractColumnName(e.getValue());    if (rs.getSchema().getColumnInfo(e.getKey()) == null) {      neededColumns.add(columnName);    } else {      ret.put(columnName,e.getKey());    }  }  neededColumns.removeAll(ret.keySet());  if (!neededColumns.isEmpty()) {    return Optional.empty();  }  return Optional.of(new TreeSet<>(ret.values()));} catch (SemanticException e) {  return Optional.empty();} @AT@ 10133 @LENGTH@ 268
---UPD EnhancedForStatement@@for (Entry<String,ExprNodeDesc> e : exprMap.entrySet()) {  ret.put(extractColumnName(e.getValue()),e.getKey());} @TO@ for (Entry<String,ExprNodeDesc> e : exprMap.entrySet()) {  String columnName=extractColumnName(e.getValue());  if (rs.getSchema().getColumnInfo(e.getKey()) == null) {    neededColumns.add(columnName);  } else {    ret.put(columnName,e.getKey());  }} @AT@ 10145 @LENGTH@ 128
------DEL ExpressionStatement@@MethodInvocation:ret.put(extractColumnName(e.getValue()),e.getKey()) @AT@ 10212 @LENGTH@ 53
------INS VariableDeclarationStatement@@String columnName=extractColumnName(e.getValue()); @TO@ EnhancedForStatement@@for (Entry<String,ExprNodeDesc> e : exprMap.entrySet()) {  ret.put(extractColumnName(e.getValue()),e.getKey());} @AT@ 10293 @LENGTH@ 52
---------INS SimpleType@@String @TO@ VariableDeclarationStatement@@String columnName=extractColumnName(e.getValue()); @AT@ 10293 @LENGTH@ 6
---------INS VariableDeclarationFragment@@columnName=extractColumnName(e.getValue()) @TO@ VariableDeclarationStatement@@String columnName=extractColumnName(e.getValue()); @AT@ 10300 @LENGTH@ 44
------------MOV MethodInvocation@@extractColumnName(e.getValue()) @TO@ VariableDeclarationFragment@@columnName=extractColumnName(e.getValue()) @AT@ 10220 @LENGTH@ 31
------------INS SimpleName@@columnName @TO@ VariableDeclarationFragment@@columnName=extractColumnName(e.getValue()) @AT@ 10300 @LENGTH@ 10
------INS IfStatement@@if (rs.getSchema().getColumnInfo(e.getKey()) == null) {  neededColumns.add(columnName);} else {  ret.put(columnName,e.getKey());} @TO@ EnhancedForStatement@@for (Entry<String,ExprNodeDesc> e : exprMap.entrySet()) {  ret.put(extractColumnName(e.getValue()),e.getKey());} @AT@ 10354 @LENGTH@ 268
---------INS InfixExpression@@rs.getSchema().getColumnInfo(e.getKey()) == null @TO@ IfStatement@@if (rs.getSchema().getColumnInfo(e.getKey()) == null) {  neededColumns.add(columnName);} else {  ret.put(columnName,e.getKey());} @AT@ 10358 @LENGTH@ 48
------------INS MethodInvocation@@rs.getSchema().getColumnInfo(e.getKey()) @TO@ InfixExpression@@rs.getSchema().getColumnInfo(e.getKey()) == null @AT@ 10358 @LENGTH@ 40
---------------INS MethodInvocation@@MethodName:getSchema:[] @TO@ MethodInvocation@@rs.getSchema().getColumnInfo(e.getKey()) @AT@ 10358 @LENGTH@ 14
---------------INS SimpleName@@Name:rs @TO@ MethodInvocation@@rs.getSchema().getColumnInfo(e.getKey()) @AT@ 10358 @LENGTH@ 2
---------------INS SimpleName@@MethodName:getColumnInfo:[e.getKey()] @TO@ MethodInvocation@@rs.getSchema().getColumnInfo(e.getKey()) @AT@ 10373 @LENGTH@ 25
------------------INS MethodInvocation@@e.getKey() @TO@ SimpleName@@MethodName:getColumnInfo:[e.getKey()] @AT@ 10387 @LENGTH@ 10
---------------------INS SimpleName@@Name:e @TO@ MethodInvocation@@e.getKey() @AT@ 10387 @LENGTH@ 1
---------------------INS SimpleName@@MethodName:getKey:[] @TO@ MethodInvocation@@e.getKey() @AT@ 10389 @LENGTH@ 8
------------INS Operator@@== @TO@ InfixExpression@@rs.getSchema().getColumnInfo(e.getKey()) == null @AT@ 10398 @LENGTH@ 2
------------INS NullLiteral@@null @TO@ InfixExpression@@rs.getSchema().getColumnInfo(e.getKey()) == null @AT@ 10402 @LENGTH@ 4
---------INS Block@@ThenBody:{  neededColumns.add(columnName);} @TO@ IfStatement@@if (rs.getSchema().getColumnInfo(e.getKey()) == null) {  neededColumns.add(columnName);} else {  ret.put(columnName,e.getKey());} @AT@ 10408 @LENGTH@ 154
------------INS ExpressionStatement@@MethodInvocation:neededColumns.add(columnName) @TO@ Block@@ThenBody:{  neededColumns.add(columnName);} @AT@ 10522 @LENGTH@ 30
---------------INS MethodInvocation@@neededColumns.add(columnName) @TO@ ExpressionStatement@@MethodInvocation:neededColumns.add(columnName) @AT@ 10522 @LENGTH@ 29
------------------INS SimpleName@@Name:neededColumns @TO@ MethodInvocation@@neededColumns.add(columnName) @AT@ 10522 @LENGTH@ 13
------------------INS SimpleName@@MethodName:add:[columnName] @TO@ MethodInvocation@@neededColumns.add(columnName) @AT@ 10536 @LENGTH@ 15
---------------------INS SimpleName@@columnName @TO@ SimpleName@@MethodName:add:[columnName] @AT@ 10540 @LENGTH@ 10
---------INS Block@@ElseBody:{  ret.put(columnName,e.getKey());} @TO@ IfStatement@@if (rs.getSchema().getColumnInfo(e.getKey()) == null) {  neededColumns.add(columnName);} else {  ret.put(columnName,e.getKey());} @AT@ 10568 @LENGTH@ 54
------------INS ExpressionStatement@@MethodInvocation:ret.put(columnName,e.getKey()) @TO@ Block@@ElseBody:{  ret.put(columnName,e.getKey());} @AT@ 10580 @LENGTH@ 32
---------------MOV MethodInvocation@@ret.put(extractColumnName(e.getValue()),e.getKey()) @TO@ ExpressionStatement@@MethodInvocation:ret.put(columnName,e.getKey()) @AT@ 10212 @LENGTH@ 52
------------------UPD SimpleName@@MethodName:put:[extractColumnName(e.getValue()), e.getKey()] @TO@ MethodName:put:[columnName, e.getKey()] @AT@ 10216 @LENGTH@ 48
---------------------INS SimpleName@@columnName @TO@ SimpleName@@MethodName:put:[extractColumnName(e.getValue()), e.getKey()] @AT@ 10588 @LENGTH@ 10
---INS ExpressionStatement@@MethodInvocation:neededColumns.removeAll(ret.keySet()) @TO@ TryStatement@@try {  for (  Entry<String,ExprNodeDesc> e : exprMap.entrySet()) {    ret.put(extractColumnName(e.getValue()),e.getKey());  }  return Optional.of(new TreeSet<>(ret.values()));} catch (SemanticException e) {  return Optional.empty();} @AT@ 10637 @LENGTH@ 38
------INS MethodInvocation@@neededColumns.removeAll(ret.keySet()) @TO@ ExpressionStatement@@MethodInvocation:neededColumns.removeAll(ret.keySet()) @AT@ 10637 @LENGTH@ 37
---------INS SimpleName@@Name:neededColumns @TO@ MethodInvocation@@neededColumns.removeAll(ret.keySet()) @AT@ 10637 @LENGTH@ 13
---------INS SimpleName@@MethodName:removeAll:[ret.keySet()] @TO@ MethodInvocation@@neededColumns.removeAll(ret.keySet()) @AT@ 10651 @LENGTH@ 23
------------INS MethodInvocation@@ret.keySet() @TO@ SimpleName@@MethodName:removeAll:[ret.keySet()] @AT@ 10661 @LENGTH@ 12
---------------INS SimpleName@@Name:ret @TO@ MethodInvocation@@ret.keySet() @AT@ 10661 @LENGTH@ 3
---------------INS SimpleName@@MethodName:keySet:[] @TO@ MethodInvocation@@ret.keySet() @AT@ 10665 @LENGTH@ 8
---INS IfStatement@@if (!neededColumns.isEmpty()) {  return Optional.empty();} @TO@ TryStatement@@try {  for (  Entry<String,ExprNodeDesc> e : exprMap.entrySet()) {    ret.put(extractColumnName(e.getValue()),e.getKey());  }  return Optional.of(new TreeSet<>(ret.values()));} catch (SemanticException e) {  return Optional.empty();} @AT@ 10682 @LENGTH@ 137
------INS PrefixExpression@@!neededColumns.isEmpty() @TO@ IfStatement@@if (!neededColumns.isEmpty()) {  return Optional.empty();} @AT@ 10686 @LENGTH@ 24
---------INS Operator@@! @TO@ PrefixExpression@@!neededColumns.isEmpty() @AT@ 10686 @LENGTH@ 1
---------INS MethodInvocation@@neededColumns.isEmpty() @TO@ PrefixExpression@@!neededColumns.isEmpty() @AT@ 10687 @LENGTH@ 23
------------INS SimpleName@@Name:neededColumns @TO@ MethodInvocation@@neededColumns.isEmpty() @AT@ 10687 @LENGTH@ 13
------------INS SimpleName@@MethodName:isEmpty:[] @TO@ MethodInvocation@@neededColumns.isEmpty() @AT@ 10701 @LENGTH@ 9
------INS Block@@ThenBody:{  return Optional.empty();} @TO@ IfStatement@@if (!neededColumns.isEmpty()) {  return Optional.empty();} @AT@ 10712 @LENGTH@ 107
---------INS ReturnStatement@@MethodInvocation:Optional.empty() @TO@ Block@@ThenBody:{  return Optional.empty();} @AT@ 10787 @LENGTH@ 24
------------INS MethodInvocation@@Optional.empty() @TO@ ReturnStatement@@MethodInvocation:Optional.empty() @AT@ 10794 @LENGTH@ 16
---------------INS SimpleName@@Name:Optional @TO@ MethodInvocation@@Optional.empty() @AT@ 10794 @LENGTH@ 8
---------------INS SimpleName@@MethodName:empty:[] @TO@ MethodInvocation@@Optional.empty() @AT@ 10803 @LENGTH@ 7


INS MethodDeclaration@@public, boolean, MethodName:isPredicate,  @TO@ TypeDeclaration@@[public]CSimpleScript3, CSimpleSupport @AT@ 1527 @LENGTH@ 57
---INS Modifier@@public @TO@ MethodDeclaration@@public, boolean, MethodName:isPredicate,  @AT@ 1527 @LENGTH@ 6
---INS PrimitiveType@@boolean @TO@ MethodDeclaration@@public, boolean, MethodName:isPredicate,  @AT@ 1534 @LENGTH@ 7
---INS SimpleName@@MethodName:isPredicate @TO@ MethodDeclaration@@public, boolean, MethodName:isPredicate,  @AT@ 1542 @LENGTH@ 11
---INS ReturnStatement@@BooleanLiteral:true @TO@ MethodDeclaration@@public, boolean, MethodName:isPredicate,  @AT@ 1566 @LENGTH@ 12
------INS BooleanLiteral@@true @TO@ ReturnStatement@@BooleanLiteral:true @AT@ 1573 @LENGTH@ 4


UPD Block@@ThenBody:{  Set<ObjectMapper> set=camelContext.getRegistry().findByType(ObjectMapper.class);  if (set.size() == 1) {    objectMapper=set.iterator().next();    LOG.info("Found single ObjectMapper in Registry to use: {}",objectMapper);  } else   if (set.size() > 1) {    LOG.debug("Found {} ObjectMapper in Registry cannot use as default as there are more than one instance.",set.size());  }} @TO@ ThenBody:{  Set<ObjectMapper> set=camelContext.getRegistry().findByType(ObjectMapper.class);  set=set.stream().filter(om -> om.getFactory() instanceof CBORFactory).collect(Collectors.toSet());  if (set.size() == 1) {    objectMapper=set.iterator().next();    LOG.info("Found a single ObjectMapper with a CBORFactory in the registry, so promoting it as the default ObjectMapper: {}",objectMapper);  } else {    LOG.debug("Found {} ObjectMapper with a CBORFactory in the registry, so cannot promote any as the default ObjectMapper.",set.size());  }} @AT@ 10534 @LENGTH@ 537
---UPD IfStatement@@if (set.size() == 1) {  objectMapper=set.iterator().next();  LOG.info("Found single ObjectMapper in Registry to use: {}",objectMapper);} else if (set.size() > 1) {  LOG.debug("Found {} ObjectMapper in Registry cannot use as default as there are more than one instance.",set.size());} @TO@ if (set.size() == 1) {  objectMapper=set.iterator().next();  LOG.info("Found a single ObjectMapper with a CBORFactory in the registry, so promoting it as the default ObjectMapper: {}",objectMapper);} else {  LOG.debug("Found {} ObjectMapper with a CBORFactory in the registry, so cannot promote any as the default ObjectMapper.",set.size());} @AT@ 10651 @LENGTH@ 406
------UPD Block@@ThenBody:{  objectMapper=set.iterator().next();  LOG.info("Found single ObjectMapper in Registry to use: {}",objectMapper);} @TO@ ThenBody:{  objectMapper=set.iterator().next();  LOG.info("Found a single ObjectMapper with a CBORFactory in the registry, so promoting it as the default ObjectMapper: {}",objectMapper);} @AT@ 10672 @LENGTH@ 173
---------UPD ExpressionStatement@@MethodInvocation:LOG.info("Found single ObjectMapper in Registry to use: {}",objectMapper) @TO@ MethodInvocation:LOG.info("Found a single ObjectMapper with a CBORFactory in the registry, so promoting it as the default ObjectMapper: {}",objectMapper) @AT@ 10752 @LENGTH@ 75
------------UPD MethodInvocation@@LOG.info("Found single ObjectMapper in Registry to use: {}",objectMapper) @TO@ LOG.info("Found a single ObjectMapper with a CBORFactory in the registry, so promoting it as the default ObjectMapper: {}",objectMapper) @AT@ 10752 @LENGTH@ 74
---------------UPD SimpleName@@MethodName:info:["Found single ObjectMapper in Registry to use: {}", objectMapper] @TO@ MethodName:info:["Found a single ObjectMapper with a CBORFactory in the registry, so promoting it as the default ObjectMapper: {}", objectMapper] @AT@ 10756 @LENGTH@ 70
------------------UPD StringLiteral@@"Found single ObjectMapper in Registry to use: {}" @TO@ "Found a single ObjectMapper with a CBORFactory in the registry, so promoting it as the default ObjectMapper: {}" @AT@ 10761 @LENGTH@ 50
------DEL Block@@ElseBody:if (set.size() > 1) {  LOG.debug("Found {} ObjectMapper in Registry cannot use as default as there are more than one instance.",set.size());} @AT@ 10851 @LENGTH@ 206
---------DEL IfStatement@@if (set.size() > 1) {  LOG.debug("Found {} ObjectMapper in Registry cannot use as default as there are more than one instance.",set.size());} @AT@ 10851 @LENGTH@ 206
------------DEL InfixExpression@@set.size() > 1 @AT@ 10855 @LENGTH@ 14
---------------DEL MethodInvocation@@set.size() @AT@ 10855 @LENGTH@ 10
------------------DEL SimpleName@@Name:set @AT@ 10855 @LENGTH@ 3
------------------DEL SimpleName@@MethodName:size:[] @AT@ 10859 @LENGTH@ 6
---------------DEL Operator@@> @AT@ 10865 @LENGTH@ 1
---------------DEL NumberLiteral@@1 @AT@ 10868 @LENGTH@ 1
------MOV Block@@ThenBody:{  LOG.debug("Found {} ObjectMapper in Registry cannot use as default as there are more than one instance.",set.size());} @TO@ IfStatement@@if (set.size() == 1) {  objectMapper=set.iterator().next();  LOG.info("Found single ObjectMapper in Registry to use: {}",objectMapper);} else if (set.size() > 1) {  LOG.debug("Found {} ObjectMapper in Registry cannot use as default as there are more than one instance.",set.size());} @AT@ 10871 @LENGTH@ 186
---------UPD ExpressionStatement@@MethodInvocation:LOG.debug("Found {} ObjectMapper in Registry cannot use as default as there are more than one instance.",set.size()) @TO@ MethodInvocation:LOG.debug("Found {} ObjectMapper with a CBORFactory in the registry, so cannot promote any as the default ObjectMapper.",set.size()) @AT@ 10893 @LENGTH@ 146
------------UPD MethodInvocation@@LOG.debug("Found {} ObjectMapper in Registry cannot use as default as there are more than one instance.",set.size()) @TO@ LOG.debug("Found {} ObjectMapper with a CBORFactory in the registry, so cannot promote any as the default ObjectMapper.",set.size()) @AT@ 10893 @LENGTH@ 145
---------------UPD SimpleName@@MethodName:debug:["Found {} ObjectMapper in Registry cannot use as default as there are more than one instance.", set.size()] @TO@ MethodName:debug:["Found {} ObjectMapper with a CBORFactory in the registry, so cannot promote any as the default ObjectMapper.", set.size()] @AT@ 10897 @LENGTH@ 141
------------------UPD StringLiteral@@"Found {} ObjectMapper in Registry cannot use as default as there are more than one instance." @TO@ "Found {} ObjectMapper with a CBORFactory in the registry, so cannot promote any as the default ObjectMapper." @AT@ 10903 @LENGTH@ 94
---INS ExpressionStatement@@Assignment:set=set.stream().filter(om -> om.getFactory() instanceof CBORFactory).collect(Collectors.toSet()) @TO@ Block@@ThenBody:{  Set<ObjectMapper> set=camelContext.getRegistry().findByType(ObjectMapper.class);  if (set.size() == 1) {    objectMapper=set.iterator().next();    LOG.info("Found single ObjectMapper in Registry to use: {}",objectMapper);  } else   if (set.size() > 1) {    LOG.debug("Found {} ObjectMapper in Registry cannot use as default as there are more than one instance.",set.size());  }} @AT@ 10687 @LENGTH@ 100
------INS Assignment@@set=set.stream().filter(om -> om.getFactory() instanceof CBORFactory).collect(Collectors.toSet()) @TO@ ExpressionStatement@@Assignment:set=set.stream().filter(om -> om.getFactory() instanceof CBORFactory).collect(Collectors.toSet()) @AT@ 10687 @LENGTH@ 99
---------INS SimpleName@@set @TO@ Assignment@@set=set.stream().filter(om -> om.getFactory() instanceof CBORFactory).collect(Collectors.toSet()) @AT@ 10687 @LENGTH@ 3
---------INS Operator@@= @TO@ Assignment@@set=set.stream().filter(om -> om.getFactory() instanceof CBORFactory).collect(Collectors.toSet()) @AT@ 10690 @LENGTH@ 1
---------INS MethodInvocation@@set.stream().filter(om -> om.getFactory() instanceof CBORFactory).collect(Collectors.toSet()) @TO@ Assignment@@set=set.stream().filter(om -> om.getFactory() instanceof CBORFactory).collect(Collectors.toSet()) @AT@ 10693 @LENGTH@ 93
------------INS MethodInvocation@@MethodName:filter:[om -> om.getFactory() instanceof CBORFactory] @TO@ MethodInvocation@@set.stream().filter(om -> om.getFactory() instanceof CBORFactory).collect(Collectors.toSet()) @AT@ 10693 @LENGTH@ 65
---------------INS LambdaExpression@@om -> om.getFactory() instanceof CBORFactory @TO@ MethodInvocation@@MethodName:filter:[om -> om.getFactory() instanceof CBORFactory] @AT@ 10713 @LENGTH@ 44
------------------INS VariableDeclarationFragment@@om @TO@ LambdaExpression@@om -> om.getFactory() instanceof CBORFactory @AT@ 10713 @LENGTH@ 2
---------------------INS SimpleName@@om @TO@ VariableDeclarationFragment@@om @AT@ 10713 @LENGTH@ 2
------------------INS InstanceofExpression@@om.getFactory() instanceof CBORFactory @TO@ LambdaExpression@@om -> om.getFactory() instanceof CBORFactory @AT@ 10719 @LENGTH@ 38
---------------------INS MethodInvocation@@om.getFactory() @TO@ InstanceofExpression@@om.getFactory() instanceof CBORFactory @AT@ 10719 @LENGTH@ 15
------------------------INS SimpleName@@Name:om @TO@ MethodInvocation@@om.getFactory() @AT@ 10719 @LENGTH@ 2
------------------------INS SimpleName@@MethodName:getFactory:[] @TO@ MethodInvocation@@om.getFactory() @AT@ 10722 @LENGTH@ 12
---------------------INS Instanceof@@instanceof @TO@ InstanceofExpression@@om.getFactory() instanceof CBORFactory @AT@ 10735 @LENGTH@ 10
---------------------INS SimpleType@@CBORFactory @TO@ InstanceofExpression@@om.getFactory() instanceof CBORFactory @AT@ 10746 @LENGTH@ 11
------------INS MethodInvocation@@MethodName:stream:[] @TO@ MethodInvocation@@set.stream().filter(om -> om.getFactory() instanceof CBORFactory).collect(Collectors.toSet()) @AT@ 10693 @LENGTH@ 12
------------INS SimpleName@@Name:set @TO@ MethodInvocation@@set.stream().filter(om -> om.getFactory() instanceof CBORFactory).collect(Collectors.toSet()) @AT@ 10693 @LENGTH@ 3
------------INS SimpleName@@MethodName:collect:[Collectors.toSet()] @TO@ MethodInvocation@@set.stream().filter(om -> om.getFactory() instanceof CBORFactory).collect(Collectors.toSet()) @AT@ 10759 @LENGTH@ 27
---------------INS MethodInvocation@@Collectors.toSet() @TO@ SimpleName@@MethodName:collect:[Collectors.toSet()] @AT@ 10767 @LENGTH@ 18
------------------INS SimpleName@@Name:Collectors @TO@ MethodInvocation@@Collectors.toSet() @AT@ 10767 @LENGTH@ 10
------------------INS SimpleName@@MethodName:toSet:[] @TO@ MethodInvocation@@Collectors.toSet() @AT@ 10778 @LENGTH@ 7


UPD ExpressionStatement@@MethodInvocation:log.debug("Trying to mach PublicKey against provided known_hosts file") @TO@ MethodInvocation:log.debug("Trying to match PublicKey against provided known_hosts file") @AT@ 2909 @LENGTH@ 72
---UPD MethodInvocation@@log.debug("Trying to mach PublicKey against provided known_hosts file") @TO@ log.debug("Trying to match PublicKey against provided known_hosts file") @AT@ 2909 @LENGTH@ 71
------UPD SimpleName@@MethodName:debug:["Trying to mach PublicKey against provided known_hosts file"] @TO@ MethodName:debug:["Trying to match PublicKey against provided known_hosts file"] @AT@ 2913 @LENGTH@ 67
---------UPD StringLiteral@@"Trying to mach PublicKey against provided known_hosts file" @TO@ "Trying to match PublicKey against provided known_hosts file" @AT@ 2919 @LENGTH@ 60


UPD TryStatement@@try {  if (cacheDirectory != null) {    if (log) {      LOG.debug("Using cache directory: {}",cacheDirectory);    }    System.setProperty("grape.root",cacheDirectory);  }  Grape.setEnableAutoDownload(true);  try (final GroovyClassLoader classLoader=new GroovyClassLoader()){    Map<String,Object> param=new HashMap<>();    param.put("classLoader",classLoader);    param.put("group",groupId);    param.put("module",artifactId);    param.put("version",version);    param.put("validate",false);    param.put("transitive",false);    if (log) {      LOG.info("Downloading " + groupId + ":"+ artifactId+ ":"+ version);    }    Grape.grab(param);    if (camelCatalog != null) {      scanCamelComponents(camelCatalog,classLoader,names);    }  } } catch (Exception e) {  if (log) {    LOG.warn("Error during add components from artifact " + groupId + ":"+ artifactId+ ":"+ version+ " due "+ e.getMessage(),e);  }} @TO@ try {  if (cacheDirectory != null) {    if (log) {      LOG.debug("Using cache directory: {}",cacheDirectory);    }    System.setProperty("grape.root",cacheDirectory);  }  Grape.setEnableAutoDownload(true);  try (final GroovyClassLoader classLoader=new GroovyClassLoader()){    Map<String,Object> param=new HashMap<>();    param.put("classLoader",classLoader);    param.put("group",groupId);    param.put("module",artifactId);    param.put("version",version);    param.put("validate",false);    param.put("transitive",false);    if (log) {      LOG.info("Downloading {}:{}:{}",groupId,artifactId,version);    }    Grape.grab(param);    if (camelCatalog != null) {      scanCamelComponents(camelCatalog,classLoader,names);    }  } } catch (Exception e) {  if (log) {    LOG.warn("Error during add components from artifact {}:{}:{} due {}",groupId,artifactId,version,e.getMessage(),e);  }} @AT@ 2519 @LENGTH@ 1516
---UPD TryStatement@@try (final GroovyClassLoader classLoader=new GroovyClassLoader()){  Map<String,Object> param=new HashMap<>();  param.put("classLoader",classLoader);  param.put("group",groupId);  param.put("module",artifactId);  param.put("version",version);  param.put("validate",false);  param.put("transitive",false);  if (log) {    LOG.info("Downloading " + groupId + ":"+ artifactId+ ":"+ version);  }  Grape.grab(param);  if (camelCatalog != null) {    scanCamelComponents(camelCatalog,classLoader,names);  }}  @TO@ try (final GroovyClassLoader classLoader=new GroovyClassLoader()){  Map<String,Object> param=new HashMap<>();  param.put("classLoader",classLoader);  param.put("group",groupId);  param.put("module",artifactId);  param.put("version",version);  param.put("validate",false);  param.put("transitive",false);  if (log) {    LOG.info("Downloading {}:{}:{}",groupId,artifactId,version);  }  Grape.grab(param);  if (camelCatalog != null) {    scanCamelComponents(camelCatalog,classLoader,names);  }}  @AT@ 2829 @LENGTH@ 930
------UPD IfStatement@@if (log) {  LOG.info("Downloading " + groupId + ":"+ artifactId+ ":"+ version);} @TO@ if (log) {  LOG.info("Downloading {}:{}:{}",groupId,artifactId,version);} @AT@ 3377 @LENGTH@ 119
---------UPD Block@@ThenBody:{  LOG.info("Downloading " + groupId + ":"+ artifactId+ ":"+ version);} @TO@ ThenBody:{  LOG.info("Downloading {}:{}:{}",groupId,artifactId,version);} @AT@ 3386 @LENGTH@ 110
------------UPD ExpressionStatement@@MethodInvocation:LOG.info("Downloading " + groupId + ":"+ artifactId+ ":"+ version) @TO@ MethodInvocation:LOG.info("Downloading {}:{}:{}",groupId,artifactId,version) @AT@ 3408 @LENGTH@ 70
---------------UPD MethodInvocation@@LOG.info("Downloading " + groupId + ":"+ artifactId+ ":"+ version) @TO@ LOG.info("Downloading {}:{}:{}",groupId,artifactId,version) @AT@ 3408 @LENGTH@ 69
------------------UPD SimpleName@@MethodName:info:["Downloading " + groupId + ":"+ artifactId+ ":"+ version] @TO@ MethodName:info:["Downloading {}:{}:{}", groupId, artifactId, version] @AT@ 3412 @LENGTH@ 65
---------------------DEL InfixExpression@@"Downloading " + groupId + ":"+ artifactId+ ":"+ version @AT@ 3417 @LENGTH@ 59
------------------------DEL StringLiteral@@"Downloading " @AT@ 3417 @LENGTH@ 14
------------------------DEL Operator@@+ @AT@ 3431 @LENGTH@ 1
------------------------DEL SimpleName@@groupId @AT@ 3434 @LENGTH@ 7
------------------------DEL StringLiteral@@":" @AT@ 3444 @LENGTH@ 3
------------------------DEL SimpleName@@artifactId @AT@ 3450 @LENGTH@ 10
------------------------DEL StringLiteral@@":" @AT@ 3463 @LENGTH@ 3
------------------------DEL SimpleName@@version @AT@ 3469 @LENGTH@ 7
---------------------INS StringLiteral@@"Downloading {}:{}:{}" @TO@ SimpleName@@MethodName:info:["Downloading " + groupId + ":"+ artifactId+ ":"+ version] @AT@ 3417 @LENGTH@ 22
---------------------INS SimpleName@@groupId @TO@ SimpleName@@MethodName:info:["Downloading " + groupId + ":"+ artifactId+ ":"+ version] @AT@ 3441 @LENGTH@ 7
---------------------INS SimpleName@@artifactId @TO@ SimpleName@@MethodName:info:["Downloading " + groupId + ":"+ artifactId+ ":"+ version] @AT@ 3450 @LENGTH@ 10
---------------------INS SimpleName@@version @TO@ SimpleName@@MethodName:info:["Downloading " + groupId + ":"+ artifactId+ ":"+ version] @AT@ 3462 @LENGTH@ 7
---UPD CatchClause@@catch (Exception e) {  if (log) {    LOG.warn("Error during add components from artifact " + groupId + ":"+ artifactId+ ":"+ version+ " due "+ e.getMessage(),e);  }} @TO@ catch (Exception e) {  if (log) {    LOG.warn("Error during add components from artifact {}:{}:{} due {}",groupId,artifactId,version,e.getMessage(),e);  }} @AT@ 3771 @LENGTH@ 264
------UPD IfStatement@@if (log) {  LOG.warn("Error during add components from artifact " + groupId + ":"+ artifactId+ ":"+ version+ " due "+ e.getMessage(),e);} @TO@ if (log) {  LOG.warn("Error during add components from artifact {}:{}:{} due {}",groupId,artifactId,version,e.getMessage(),e);} @AT@ 3805 @LENGTH@ 220
---------UPD Block@@ThenBody:{  LOG.warn("Error during add components from artifact " + groupId + ":"+ artifactId+ ":"+ version+ " due "+ e.getMessage(),e);} @TO@ ThenBody:{  LOG.warn("Error during add components from artifact {}:{}:{} due {}",groupId,artifactId,version,e.getMessage(),e);} @AT@ 3814 @LENGTH@ 211
------------UPD ExpressionStatement@@MethodInvocation:LOG.warn("Error during add components from artifact " + groupId + ":"+ artifactId+ ":"+ version+ " due "+ e.getMessage(),e) @TO@ MethodInvocation:LOG.warn("Error during add components from artifact {}:{}:{} due {}",groupId,artifactId,version,e.getMessage(),e) @AT@ 3832 @LENGTH@ 179
---------------UPD MethodInvocation@@LOG.warn("Error during add components from artifact " + groupId + ":"+ artifactId+ ":"+ version+ " due "+ e.getMessage(),e) @TO@ LOG.warn("Error during add components from artifact {}:{}:{} due {}",groupId,artifactId,version,e.getMessage(),e) @AT@ 3832 @LENGTH@ 178
------------------UPD SimpleName@@MethodName:warn:["Error during add components from artifact " + groupId + ":"+ artifactId+ ":"+ version+ " due "+ e.getMessage(), e] @TO@ MethodName:warn:["Error during add components from artifact {}:{}:{} due {}", groupId, artifactId, version, e.getMessage(), e] @AT@ 3836 @LENGTH@ 174
---------------------INS StringLiteral@@"Error during add components from artifact {}:{}:{} due {}" @TO@ SimpleName@@MethodName:warn:["Error during add components from artifact " + groupId + ":"+ artifactId+ ":"+ version+ " due "+ e.getMessage(), e] @AT@ 3834 @LENGTH@ 59
---------------------DEL InfixExpression@@"Error during add components from artifact " + groupId + ":"+ artifactId+ ":"+ version+ " due "+ e.getMessage() @AT@ 3841 @LENGTH@ 141
------------------------DEL StringLiteral@@"Error during add components from artifact " @AT@ 3841 @LENGTH@ 44
------------------------DEL Operator@@+ @AT@ 3885 @LENGTH@ 1
------------------------DEL SimpleName@@groupId @AT@ 3888 @LENGTH@ 7
------------------------DEL StringLiteral@@":" @AT@ 3898 @LENGTH@ 3
------------------------DEL SimpleName@@artifactId @AT@ 3904 @LENGTH@ 10
------------------------DEL StringLiteral@@":" @AT@ 3917 @LENGTH@ 3
------------------------DEL SimpleName@@version @AT@ 3948 @LENGTH@ 7
------------------------DEL StringLiteral@@" due " @AT@ 3958 @LENGTH@ 7
------------------------DEL MethodInvocation@@e.getMessage() @AT@ 3968 @LENGTH@ 14
---------------------INS SimpleName@@groupId @TO@ SimpleName@@MethodName:warn:["Error during add components from artifact " + groupId + ":"+ artifactId+ ":"+ version+ " due "+ e.getMessage(), e] @AT@ 3895 @LENGTH@ 7
---------------------INS SimpleName@@artifactId @TO@ SimpleName@@MethodName:warn:["Error during add components from artifact " + groupId + ":"+ artifactId+ ":"+ version+ " due "+ e.getMessage(), e] @AT@ 3904 @LENGTH@ 10
---------------------INS SimpleName@@version @TO@ SimpleName@@MethodName:warn:["Error during add components from artifact " + groupId + ":"+ artifactId+ ":"+ version+ " due "+ e.getMessage(), e] @AT@ 3916 @LENGTH@ 7
---------------------INS MethodInvocation@@e.getMessage() @TO@ SimpleName@@MethodName:warn:["Error during add components from artifact " + groupId + ":"+ artifactId+ ":"+ version+ " due "+ e.getMessage(), e] @AT@ 3949 @LENGTH@ 14
------------------------MOV SimpleName@@Name:e @TO@ MethodInvocation@@e.getMessage() @AT@ 3968 @LENGTH@ 1
------------------------MOV SimpleName@@MethodName:getMessage:[] @TO@ MethodInvocation@@e.getMessage() @AT@ 3970 @LENGTH@ 12


UPD ExpressionStatement@@MethodInvocation:LOG.warn("Unable to parse time string '" + timestamp + "' using format "+ DATE_TIME_FORMAT,e) @TO@ MethodInvocation:LOG.warn("Unable to parse time string '{}' using format {}",timestamp,DATE_TIME_FORMAT,e) @AT@ 5338 @LENGTH@ 96
---UPD MethodInvocation@@LOG.warn("Unable to parse time string '" + timestamp + "' using format "+ DATE_TIME_FORMAT,e) @TO@ LOG.warn("Unable to parse time string '{}' using format {}",timestamp,DATE_TIME_FORMAT,e) @AT@ 5338 @LENGTH@ 95
------UPD SimpleName@@MethodName:warn:["Unable to parse time string '" + timestamp + "' using format "+ DATE_TIME_FORMAT, e] @TO@ MethodName:warn:["Unable to parse time string '{}' using format {}", timestamp, DATE_TIME_FORMAT, e] @AT@ 5342 @LENGTH@ 91
---------DEL InfixExpression@@"Unable to parse time string '" + timestamp + "' using format "+ DATE_TIME_FORMAT @AT@ 5347 @LENGTH@ 82
------------DEL StringLiteral@@"Unable to parse time string '" @AT@ 5347 @LENGTH@ 31
------------DEL Operator@@+ @AT@ 5378 @LENGTH@ 1
------------DEL SimpleName@@timestamp @AT@ 5381 @LENGTH@ 9
------------DEL StringLiteral@@"' using format " @AT@ 5393 @LENGTH@ 17
------------DEL SimpleName@@DATE_TIME_FORMAT @AT@ 5413 @LENGTH@ 16
---------INS StringLiteral@@"Unable to parse time string '{}' using format {}" @TO@ SimpleName@@MethodName:warn:["Unable to parse time string '" + timestamp + "' using format "+ DATE_TIME_FORMAT, e] @AT@ 5347 @LENGTH@ 50
---------INS SimpleName@@timestamp @TO@ SimpleName@@MethodName:warn:["Unable to parse time string '" + timestamp + "' using format "+ DATE_TIME_FORMAT, e] @AT@ 5399 @LENGTH@ 9
---------INS SimpleName@@DATE_TIME_FORMAT @TO@ SimpleName@@MethodName:warn:["Unable to parse time string '" + timestamp + "' using format "+ DATE_TIME_FORMAT, e] @AT@ 5410 @LENGTH@ 16


UPD VariableDeclarationStatement@@DelegatingHandlerMapping mapping=new DelegatingHandlerMapping(Arrays.asList(first,second)); @TO@ DelegatingHandlerMapping mapping=new DelegatingHandlerMapping(Arrays.asList(first,second),null); @AT@ 2008 @LENGTH@ 94
---UPD VariableDeclarationFragment@@mapping=new DelegatingHandlerMapping(Arrays.asList(first,second)) @TO@ mapping=new DelegatingHandlerMapping(Arrays.asList(first,second),null) @AT@ 2033 @LENGTH@ 68
------UPD ClassInstanceCreation@@DelegatingHandlerMapping[Arrays.asList(first,second)] @TO@ DelegatingHandlerMapping[Arrays.asList(first,second), null] @AT@ 2043 @LENGTH@ 58
---------INS NullLiteral@@null @TO@ ClassInstanceCreation@@DelegatingHandlerMapping[Arrays.asList(first,second)] @AT@ 2102 @LENGTH@ 4


UPD ReturnStatement@@MethodInvocation:createSubscription(SubscriptionListener.EMPTY) @TO@ MethodInvocation:createSubscription(SubscriptionListener.NO_OP_SUBSCRIPTION_LISTENER) @AT@ 1348 @LENGTH@ 54
---UPD MethodInvocation@@createSubscription(SubscriptionListener.EMPTY) @TO@ createSubscription(SubscriptionListener.NO_OP_SUBSCRIPTION_LISTENER) @AT@ 1355 @LENGTH@ 46
------UPD SimpleName@@MethodName:createSubscription:[SubscriptionListener.EMPTY] @TO@ MethodName:createSubscription:[SubscriptionListener.NO_OP_SUBSCRIPTION_LISTENER] @AT@ 1355 @LENGTH@ 46
---------UPD QualifiedName@@SubscriptionListener.EMPTY @TO@ SubscriptionListener.NO_OP_SUBSCRIPTION_LISTENER @AT@ 1374 @LENGTH@ 26
------------UPD SimpleName@@EMPTY @TO@ NO_OP_SUBSCRIPTION_LISTENER @AT@ 1395 @LENGTH@ 5


UPD VariableDeclarationStatement@@JsonNode nullDefault=JsonNodeFactory.instance.nullNode(); @TO@ JsonProperties.Null nullDefault=JsonProperties.NULL_VALUE; @AT@ 8963 @LENGTH@ 59
---UPD SimpleType@@JsonNode @TO@ JsonProperties.Null @AT@ 8963 @LENGTH@ 8
---UPD VariableDeclarationFragment@@nullDefault=JsonNodeFactory.instance.nullNode() @TO@ nullDefault=JsonProperties.NULL_VALUE @AT@ 8972 @LENGTH@ 49
------DEL MethodInvocation@@JsonNodeFactory.instance.nullNode() @AT@ 8986 @LENGTH@ 35
---------DEL QualifiedName@@Name:JsonNodeFactory.instance @AT@ 8986 @LENGTH@ 24
---------DEL SimpleName@@MethodName:nullNode:[] @AT@ 9011 @LENGTH@ 10
------INS QualifiedName@@JsonProperties.NULL_VALUE @TO@ VariableDeclarationFragment@@nullDefault=JsonNodeFactory.instance.nullNode() @AT@ 9057 @LENGTH@ 25
---------INS SimpleName@@JsonProperties @TO@ QualifiedName@@JsonProperties.NULL_VALUE @AT@ 9057 @LENGTH@ 14
---------INS SimpleName@@NULL_VALUE @TO@ QualifiedName@@JsonProperties.NULL_VALUE @AT@ 9072 @LENGTH@ 10


UPD FieldDeclaration@@private, boolean, [allOrNone=false] @TO@ private, boolean, [allOrNone] @AT@ 6198 @LENGTH@ 34
---UPD VariableDeclarationFragment@@allOrNone=false @TO@ allOrNone @AT@ 6214 @LENGTH@ 17
------DEL BooleanLiteral@@false @AT@ 6226 @LENGTH@ 5


UPD IfStatement@@if (aggregatedExchange != null) {  copyResultsPreservePattern(exchange,aggregatedExchange);} @TO@ if (aggregatedExchange != null) {  copyResultsPreservePattern(exchange,aggregatedExchange);  if (resourceExchange != null) {    resourceExchange.adapt(ExtendedExchange.class).handoverCompletions(exchange);  }} @AT@ 9098 @LENGTH@ 244
---UPD Block@@ThenBody:{  copyResultsPreservePattern(exchange,aggregatedExchange);} @TO@ ThenBody:{  copyResultsPreservePattern(exchange,aggregatedExchange);  if (resourceExchange != null) {    resourceExchange.adapt(ExtendedExchange.class).handoverCompletions(exchange);  }} @AT@ 9130 @LENGTH@ 212
------INS IfStatement@@if (resourceExchange != null) {  resourceExchange.adapt(ExtendedExchange.class).handoverCompletions(exchange);} @TO@ Block@@ThenBody:{  copyResultsPreservePattern(exchange,aggregatedExchange);} @AT@ 9405 @LENGTH@ 171
---------INS InfixExpression@@resourceExchange != null @TO@ IfStatement@@if (resourceExchange != null) {  resourceExchange.adapt(ExtendedExchange.class).handoverCompletions(exchange);} @AT@ 9409 @LENGTH@ 24
------------INS SimpleName@@resourceExchange @TO@ InfixExpression@@resourceExchange != null @AT@ 9409 @LENGTH@ 16
------------INS Operator@@!= @TO@ InfixExpression@@resourceExchange != null @AT@ 9425 @LENGTH@ 2
------------INS NullLiteral@@null @TO@ InfixExpression@@resourceExchange != null @AT@ 9429 @LENGTH@ 4
---------INS Block@@ThenBody:{  resourceExchange.adapt(ExtendedExchange.class).handoverCompletions(exchange);} @TO@ IfStatement@@if (resourceExchange != null) {  resourceExchange.adapt(ExtendedExchange.class).handoverCompletions(exchange);} @AT@ 9435 @LENGTH@ 141
------------INS ExpressionStatement@@MethodInvocation:resourceExchange.adapt(ExtendedExchange.class).handoverCompletions(exchange) @TO@ Block@@ThenBody:{  resourceExchange.adapt(ExtendedExchange.class).handoverCompletions(exchange);} @AT@ 9469 @LENGTH@ 77
---------------INS MethodInvocation@@resourceExchange.adapt(ExtendedExchange.class).handoverCompletions(exchange) @TO@ ExpressionStatement@@MethodInvocation:resourceExchange.adapt(ExtendedExchange.class).handoverCompletions(exchange) @AT@ 9469 @LENGTH@ 76
------------------INS MethodInvocation@@MethodName:adapt:[ExtendedExchange.class] @TO@ MethodInvocation@@resourceExchange.adapt(ExtendedExchange.class).handoverCompletions(exchange) @AT@ 9469 @LENGTH@ 46
---------------------INS TypeLiteral@@ExtendedExchange.class @TO@ MethodInvocation@@MethodName:adapt:[ExtendedExchange.class] @AT@ 9492 @LENGTH@ 22
------------------INS SimpleName@@Name:resourceExchange @TO@ MethodInvocation@@resourceExchange.adapt(ExtendedExchange.class).handoverCompletions(exchange) @AT@ 9469 @LENGTH@ 16
------------------INS SimpleName@@MethodName:handoverCompletions:[exchange] @TO@ MethodInvocation@@resourceExchange.adapt(ExtendedExchange.class).handoverCompletions(exchange) @AT@ 9516 @LENGTH@ 29
---------------------INS SimpleName@@exchange @TO@ SimpleName@@MethodName:handoverCompletions:[exchange] @AT@ 9536 @LENGTH@ 8


UPD ExpressionStatement@@Assignment:cal=new GregorianCalendar(TimeZone.getTimeZone("UTC"),Locale.getDefault()) @TO@ Assignment:cal=new GregorianCalendar(UTC,Locale.getDefault()) @AT@ 8475 @LENGTH@ 78
---UPD Assignment@@cal=new GregorianCalendar(TimeZone.getTimeZone("UTC"),Locale.getDefault()) @TO@ cal=new GregorianCalendar(UTC,Locale.getDefault()) @AT@ 8475 @LENGTH@ 77
------UPD ClassInstanceCreation@@GregorianCalendar[TimeZone.getTimeZone("UTC"), Locale.getDefault()] @TO@ GregorianCalendar[UTC, Locale.getDefault()] @AT@ 8481 @LENGTH@ 71
---------INS SimpleName@@UTC @TO@ ClassInstanceCreation@@GregorianCalendar[TimeZone.getTimeZone("UTC"), Locale.getDefault()] @AT@ 8570 @LENGTH@ 3


UPD ExpressionStatement@@Assignment:tuple=primary.run("use " + primaryDbName).run("create external table t3 (id int)").run("insert into table t3 values (300)").run("create table t4 (id int)").run("insert into table t4 values (400)").run("create table t5 (id int) partitioned by (p int)").run("insert into t5 partition(p=1) values(10)").run("insert into t5 partition(p=2) values(20)").dump(primaryDbName + ".'t[0-9]+'",null,withClauseOptions) @TO@ Assignment:tuple=primary.run("use " + primaryDbName).run("create external table t3 (id int)").run("insert into table t3 values (300)").run("create table t4 (id int)").run("insert into table t4 values (400)").run("create table t5 (id int) partitioned by (p int)").run("insert into t5 partition(p=1) values(10)").run("insert into t5 partition(p=2) values(20)").dump(primaryDbName + ".'t[0-9]+'",withClauseOptions) @AT@ 6314 @LENGTH@ 514
---UPD Assignment@@tuple=primary.run("use " + primaryDbName).run("create external table t3 (id int)").run("insert into table t3 values (300)").run("create table t4 (id int)").run("insert into table t4 values (400)").run("create table t5 (id int) partitioned by (p int)").run("insert into t5 partition(p=1) values(10)").run("insert into t5 partition(p=2) values(20)").dump(primaryDbName + ".'t[0-9]+'",null,withClauseOptions) @TO@ tuple=primary.run("use " + primaryDbName).run("create external table t3 (id int)").run("insert into table t3 values (300)").run("create table t4 (id int)").run("insert into table t4 values (400)").run("create table t5 (id int) partitioned by (p int)").run("insert into t5 partition(p=1) values(10)").run("insert into t5 partition(p=2) values(20)").dump(primaryDbName + ".'t[0-9]+'",withClauseOptions) @AT@ 6314 @LENGTH@ 513
------UPD MethodInvocation@@primary.run("use " + primaryDbName).run("create external table t3 (id int)").run("insert into table t3 values (300)").run("create table t4 (id int)").run("insert into table t4 values (400)").run("create table t5 (id int) partitioned by (p int)").run("insert into t5 partition(p=1) values(10)").run("insert into t5 partition(p=2) values(20)").dump(primaryDbName + ".'t[0-9]+'",null,withClauseOptions) @TO@ primary.run("use " + primaryDbName).run("create external table t3 (id int)").run("insert into table t3 values (300)").run("create table t4 (id int)").run("insert into table t4 values (400)").run("create table t5 (id int) partitioned by (p int)").run("insert into t5 partition(p=1) values(10)").run("insert into t5 partition(p=2) values(20)").dump(primaryDbName + ".'t[0-9]+'",withClauseOptions) @AT@ 6322 @LENGTH@ 505
---------UPD SimpleName@@MethodName:dump:[primaryDbName + ".'t[0-9]+'", null, withClauseOptions] @TO@ MethodName:dump:[primaryDbName + ".'t[0-9]+'", withClauseOptions] @AT@ 6768 @LENGTH@ 59
------------DEL NullLiteral@@null @AT@ 6803 @LENGTH@ 4


INS MethodDeclaration@@public, int, MethodName:hashCode,  @TO@ TypeDeclaration@@[public]ReplScope, [Serializable] @AT@ 4510 @LENGTH@ 115
---INS Modifier@@public @TO@ MethodDeclaration@@public, int, MethodName:hashCode,  @AT@ 4510 @LENGTH@ 6
---INS PrimitiveType@@int @TO@ MethodDeclaration@@public, int, MethodName:hashCode,  @AT@ 4517 @LENGTH@ 3
---INS SimpleName@@MethodName:hashCode @TO@ MethodDeclaration@@public, int, MethodName:hashCode,  @AT@ 4521 @LENGTH@ 8
---INS ReturnStatement@@MethodInvocation:Objects.hash(dbName,dbNamePattern,includedTableNames,excludedTableNames) @TO@ MethodDeclaration@@public, int, MethodName:hashCode,  @AT@ 4538 @LENGTH@ 83
------INS MethodInvocation@@Objects.hash(dbName,dbNamePattern,includedTableNames,excludedTableNames) @TO@ ReturnStatement@@MethodInvocation:Objects.hash(dbName,dbNamePattern,includedTableNames,excludedTableNames) @AT@ 4545 @LENGTH@ 75
---------INS SimpleName@@Name:Objects @TO@ MethodInvocation@@Objects.hash(dbName,dbNamePattern,includedTableNames,excludedTableNames) @AT@ 4545 @LENGTH@ 7
---------INS SimpleName@@MethodName:hash:[dbName, dbNamePattern, includedTableNames, excludedTableNames] @TO@ MethodInvocation@@Objects.hash(dbName,dbNamePattern,includedTableNames,excludedTableNames) @AT@ 4553 @LENGTH@ 67
------------INS SimpleName@@dbName @TO@ SimpleName@@MethodName:hash:[dbName, dbNamePattern, includedTableNames, excludedTableNames] @AT@ 4558 @LENGTH@ 6
------------INS SimpleName@@dbNamePattern @TO@ SimpleName@@MethodName:hash:[dbName, dbNamePattern, includedTableNames, excludedTableNames] @AT@ 4566 @LENGTH@ 13
------------INS SimpleName@@includedTableNames @TO@ SimpleName@@MethodName:hash:[dbName, dbNamePattern, includedTableNames, excludedTableNames] @AT@ 4581 @LENGTH@ 18
------------INS SimpleName@@excludedTableNames @TO@ SimpleName@@MethodName:hash:[dbName, dbNamePattern, includedTableNames, excludedTableNames] @AT@ 4601 @LENGTH@ 18


INS MethodDeclaration@@void, MethodName:shouldPlayWellWithExceptionTranslator,  @TO@ TypeDeclaration@@RetryExceptionPredicateTest,  @AT@ 1914 @LENGTH@ 346
---INS PrimitiveType@@void @TO@ MethodDeclaration@@void, MethodName:shouldPlayWellWithExceptionTranslator,  @AT@ 1909 @LENGTH@ 4
---INS SimpleName@@MethodName:shouldPlayWellWithExceptionTranslator @TO@ MethodDeclaration@@void, MethodName:shouldPlayWellWithExceptionTranslator,  @AT@ 1914 @LENGTH@ 37
---INS VariableDeclarationStatement@@Neo4jPersistenceExceptionTranslator translator=new Neo4jPersistenceExceptionTranslator(); @TO@ MethodDeclaration@@void, MethodName:shouldPlayWellWithExceptionTranslator,  @AT@ 1959 @LENGTH@ 91
------INS SimpleType@@Neo4jPersistenceExceptionTranslator @TO@ VariableDeclarationStatement@@Neo4jPersistenceExceptionTranslator translator=new Neo4jPersistenceExceptionTranslator(); @AT@ 1959 @LENGTH@ 35
------INS VariableDeclarationFragment@@translator=new Neo4jPersistenceExceptionTranslator() @TO@ VariableDeclarationStatement@@Neo4jPersistenceExceptionTranslator translator=new Neo4jPersistenceExceptionTranslator(); @AT@ 1995 @LENGTH@ 54
---------INS SimpleName@@translator @TO@ VariableDeclarationFragment@@translator=new Neo4jPersistenceExceptionTranslator() @AT@ 1995 @LENGTH@ 10
---------INS ClassInstanceCreation@@Neo4jPersistenceExceptionTranslator[] @TO@ VariableDeclarationFragment@@translator=new Neo4jPersistenceExceptionTranslator() @AT@ 2008 @LENGTH@ 41
------------INS New@@new @TO@ ClassInstanceCreation@@Neo4jPersistenceExceptionTranslator[] @AT@ 2008 @LENGTH@ 3
------------INS SimpleType@@Neo4jPersistenceExceptionTranslator @TO@ ClassInstanceCreation@@Neo4jPersistenceExceptionTranslator[] @AT@ 2012 @LENGTH@ 35
---INS VariableDeclarationStatement@@Exception e=translator.translateExceptionIfPossible(new SessionExpiredException("Schade")); @TO@ MethodDeclaration@@void, MethodName:shouldPlayWellWithExceptionTranslator,  @AT@ 2053 @LENGTH@ 93
------INS SimpleType@@Exception @TO@ VariableDeclarationStatement@@Exception e=translator.translateExceptionIfPossible(new SessionExpiredException("Schade")); @AT@ 2053 @LENGTH@ 9
------INS VariableDeclarationFragment@@e=translator.translateExceptionIfPossible(new SessionExpiredException("Schade")) @TO@ VariableDeclarationStatement@@Exception e=translator.translateExceptionIfPossible(new SessionExpiredException("Schade")); @AT@ 2063 @LENGTH@ 82
---------INS SimpleName@@e @TO@ VariableDeclarationFragment@@e=translator.translateExceptionIfPossible(new SessionExpiredException("Schade")) @AT@ 2063 @LENGTH@ 1
---------INS MethodInvocation@@translator.translateExceptionIfPossible(new SessionExpiredException("Schade")) @TO@ VariableDeclarationFragment@@e=translator.translateExceptionIfPossible(new SessionExpiredException("Schade")) @AT@ 2067 @LENGTH@ 78
------------INS SimpleName@@Name:translator @TO@ MethodInvocation@@translator.translateExceptionIfPossible(new SessionExpiredException("Schade")) @AT@ 2067 @LENGTH@ 10
------------INS SimpleName@@MethodName:translateExceptionIfPossible:[new SessionExpiredException("Schade")] @TO@ MethodInvocation@@translator.translateExceptionIfPossible(new SessionExpiredException("Schade")) @AT@ 2078 @LENGTH@ 67
---------------INS ClassInstanceCreation@@SessionExpiredException["Schade"] @TO@ SimpleName@@MethodName:translateExceptionIfPossible:[new SessionExpiredException("Schade")] @AT@ 2107 @LENGTH@ 37
------------------INS New@@new @TO@ ClassInstanceCreation@@SessionExpiredException["Schade"] @AT@ 2107 @LENGTH@ 3
------------------INS SimpleType@@SessionExpiredException @TO@ ClassInstanceCreation@@SessionExpiredException["Schade"] @AT@ 2111 @LENGTH@ 23
------------------INS StringLiteral@@"Schade" @TO@ ClassInstanceCreation@@SessionExpiredException["Schade"] @AT@ 2135 @LENGTH@ 8
---INS VariableDeclarationStatement@@RetryExceptionPredicate predicate=new RetryExceptionPredicate(); @TO@ MethodDeclaration@@void, MethodName:shouldPlayWellWithExceptionTranslator,  @AT@ 2149 @LENGTH@ 66
------INS SimpleType@@RetryExceptionPredicate @TO@ VariableDeclarationStatement@@RetryExceptionPredicate predicate=new RetryExceptionPredicate(); @AT@ 2149 @LENGTH@ 23
------INS VariableDeclarationFragment@@predicate=new RetryExceptionPredicate() @TO@ VariableDeclarationStatement@@RetryExceptionPredicate predicate=new RetryExceptionPredicate(); @AT@ 2173 @LENGTH@ 41
---------INS SimpleName@@predicate @TO@ VariableDeclarationFragment@@predicate=new RetryExceptionPredicate() @AT@ 2173 @LENGTH@ 9
---------INS ClassInstanceCreation@@RetryExceptionPredicate[] @TO@ VariableDeclarationFragment@@predicate=new RetryExceptionPredicate() @AT@ 2185 @LENGTH@ 29
------------INS New@@new @TO@ ClassInstanceCreation@@RetryExceptionPredicate[] @AT@ 2185 @LENGTH@ 3
------------INS SimpleType@@RetryExceptionPredicate @TO@ ClassInstanceCreation@@RetryExceptionPredicate[] @AT@ 2189 @LENGTH@ 23
---INS ExpressionStatement@@MethodInvocation:assertThat(predicate.test(e)).isTrue() @TO@ MethodDeclaration@@void, MethodName:shouldPlayWellWithExceptionTranslator,  @AT@ 2218 @LENGTH@ 39
------INS MethodInvocation@@assertThat(predicate.test(e)).isTrue() @TO@ ExpressionStatement@@MethodInvocation:assertThat(predicate.test(e)).isTrue() @AT@ 2218 @LENGTH@ 38
---------INS MethodInvocation@@MethodName:assertThat:[predicate.test(e)] @TO@ MethodInvocation@@assertThat(predicate.test(e)).isTrue() @AT@ 2218 @LENGTH@ 29
------------INS MethodInvocation@@predicate.test(e) @TO@ MethodInvocation@@MethodName:assertThat:[predicate.test(e)] @AT@ 2229 @LENGTH@ 17
---------------INS SimpleName@@Name:predicate @TO@ MethodInvocation@@predicate.test(e) @AT@ 2229 @LENGTH@ 9
---------------INS SimpleName@@MethodName:test:[e] @TO@ MethodInvocation@@predicate.test(e) @AT@ 2239 @LENGTH@ 7
------------------INS SimpleName@@e @TO@ SimpleName@@MethodName:test:[e] @AT@ 2244 @LENGTH@ 1
---------INS SimpleName@@MethodName:isTrue:[] @TO@ MethodInvocation@@assertThat(predicate.test(e)).isTrue() @AT@ 2248 @LENGTH@ 8


UPD FieldDeclaration@@private, E, [last=null] @TO@ private, E, [last] @AT@ 12452 @LENGTH@ 22
---UPD VariableDeclarationFragment@@last=null @TO@ last @AT@ 12462 @LENGTH@ 11
------DEL NullLiteral@@null @AT@ 12469 @LENGTH@ 4


UPD IfStatement@@if (method != null && scope != null) {  return "bean(exchange, \"" + ref + "\", \""+ method.toString()+ "\", \""+ scope.toString()+ "\")";} else if (method != null) {  return "bean(exchange, \"" + ref + "\", \""+ method.toString()+ "\", null)";} else {  return "bean(exchange, \"" + ref + "\", null, null)";} @TO@ if (method != null && scope != null) {  return "bean(exchange, bean, \"" + ref + "\", \""+ method.toString()+ "\", \""+ scope.toString()+ "\")";} else if (method != null) {  return "bean(exchange, bean, \"" + ref + "\", \""+ method.toString()+ "\", null)";} else {  return "bean(exchange, bean, \"" + ref + "\", null, null)";} @AT@ 31663 @LENGTH@ 398
---UPD Block@@ThenBody:{  return "bean(exchange, \"" + ref + "\", \""+ method.toString()+ "\", \""+ scope.toString()+ "\")";} @TO@ ThenBody:{  return "bean(exchange, bean, \"" + ref + "\", \""+ method.toString()+ "\", \""+ scope.toString()+ "\")";} @AT@ 31700 @LENGTH@ 134
------UPD ReturnStatement@@InfixExpression:"bean(exchange, \"" + ref + "\", \""+ method.toString()+ "\", \""+ scope.toString()+ "\")" @TO@ InfixExpression:"bean(exchange, bean, \"" + ref + "\", \""+ method.toString()+ "\", \""+ scope.toString()+ "\")" @AT@ 31718 @LENGTH@ 102
---------UPD InfixExpression@@"bean(exchange, \"" + ref + "\", \""+ method.toString()+ "\", \""+ scope.toString()+ "\")" @TO@ "bean(exchange, bean, \"" + ref + "\", \""+ method.toString()+ "\", \""+ scope.toString()+ "\")" @AT@ 31725 @LENGTH@ 94
------------UPD StringLiteral@@"bean(exchange, \"" @TO@ "bean(exchange, bean, \"" @AT@ 31725 @LENGTH@ 19
---UPD Block@@ElseBody:if (method != null) {  return "bean(exchange, \"" + ref + "\", \""+ method.toString()+ "\", null)";} else {  return "bean(exchange, \"" + ref + "\", null, null)";} @TO@ ElseBody:if (method != null) {  return "bean(exchange, bean, \"" + ref + "\", \""+ method.toString()+ "\", null)";} else {  return "bean(exchange, bean, \"" + ref + "\", null, null)";} @AT@ 31840 @LENGTH@ 221
------UPD IfStatement@@if (method != null) {  return "bean(exchange, \"" + ref + "\", \""+ method.toString()+ "\", null)";} else {  return "bean(exchange, \"" + ref + "\", null, null)";} @TO@ if (method != null) {  return "bean(exchange, bean, \"" + ref + "\", \""+ method.toString()+ "\", null)";} else {  return "bean(exchange, bean, \"" + ref + "\", null, null)";} @AT@ 31840 @LENGTH@ 221
---------UPD Block@@ThenBody:{  return "bean(exchange, \"" + ref + "\", \""+ method.toString()+ "\", null)";} @TO@ ThenBody:{  return "bean(exchange, bean, \"" + ref + "\", \""+ method.toString()+ "\", null)";} @AT@ 31860 @LENGTH@ 110
------------UPD ReturnStatement@@InfixExpression:"bean(exchange, \"" + ref + "\", \""+ method.toString()+ "\", null)" @TO@ InfixExpression:"bean(exchange, bean, \"" + ref + "\", \""+ method.toString()+ "\", null)" @AT@ 31878 @LENGTH@ 78
---------------UPD InfixExpression@@"bean(exchange, \"" + ref + "\", \""+ method.toString()+ "\", null)" @TO@ "bean(exchange, bean, \"" + ref + "\", \""+ method.toString()+ "\", null)" @AT@ 31885 @LENGTH@ 70
------------------UPD StringLiteral@@"bean(exchange, \"" @TO@ "bean(exchange, bean, \"" @AT@ 31885 @LENGTH@ 19
---------UPD Block@@ElseBody:{  return "bean(exchange, \"" + ref + "\", null, null)";} @TO@ ElseBody:{  return "bean(exchange, bean, \"" + ref + "\", null, null)";} @AT@ 31976 @LENGTH@ 85
------------UPD ReturnStatement@@InfixExpression:"bean(exchange, \"" + ref + "\", null, null)" @TO@ InfixExpression:"bean(exchange, bean, \"" + ref + "\", null, null)" @AT@ 31994 @LENGTH@ 53
---------------UPD InfixExpression@@"bean(exchange, \"" + ref + "\", null, null)" @TO@ "bean(exchange, bean, \"" + ref + "\", null, null)" @AT@ 32001 @LENGTH@ 45
------------------UPD StringLiteral@@"bean(exchange, \"" @TO@ "bean(exchange, bean, \"" @AT@ 32001 @LENGTH@ 19


UPD LambdaExpression@@association -> {
  NestedRelationshipContext relationshipContext=NestedRelationshipContext.of(association,propertyAccessor,sourceEntity);
  Collection<?> relatedValuesToStore=MappingSupport.unifyRelationshipValue(relationshipContext.getInverse(),relationshipContext.getValue());
  RelationshipDescription relationshipDescription=relationshipContext.getRelationship();
  RelationshipDescription relationshipDescriptionObverse=relationshipDescription.getRelationshipObverse();
  Neo4jPersistentProperty idProperty;
  if (!relationshipDescription.hasInternalIdProperty()) {
    idProperty=null;
  }
 else {
    Neo4jPersistentEntity<?> relationshipPropertiesEntity=(Neo4jPersistentEntity<?>)relationshipDescription.getRelationshipPropertiesEntity();
    idProperty=relationshipPropertiesEntity.getIdProperty();
  }
  ProcessState processState=stateMachine.getStateOf(relationshipDescriptionObverse,relatedValuesToStore);
  if (processState == ProcessState.PROCESSED_ALL_RELATIONSHIPS || processState == ProcessState.PROCESSED_BOTH) {
    return;
  }
  if (!isParentObjectNew) {
    List<Long> knownRelationshipsIds=new ArrayList<>();
    if (idProperty != null) {
      for (      Object relatedValueToStore : relatedValuesToStore) {
        if (relatedValueToStore == null) {
          continue;
        }
        Long id=(Long)relationshipContext.getRelationshipPropertiesPropertyAccessor(relatedValueToStore).getProperty(idProperty);
        if (id != null) {
          knownRelationshipsIds.add(id);
        }
      }
    }
    Statement relationshipRemoveQuery=cypherGenerator.prepareDeleteOf(sourceEntity,relationshipDescription);
    relationshipCreationMonos.add(neo4jClient.query(renderer.render(relationshipRemoveQuery)).bind(convertIdValues(sourceEntity.getIdProperty(),fromId)).to(Constants.FROM_ID_PARAMETER_NAME).bind(knownRelationshipsIds).to(Constants.NAME_OF_KNOWN_RELATIONSHIPS_PARAM).run().checkpoint("delete relationships").then());
  }
  if (relationshipContext.inverseValueIsEmpty()) {
    return;
  }
  stateMachine.markAsProcessed(relationshipDescription,relatedValuesToStore);
  for (  Object relatedValueToStore : relatedValuesToStore) {
    Object relatedNodePreEvt=relationshipContext.identifyAndExtractRelationshipTargetNode(relatedValueToStore);
    Mono<Void> createRelationship=eventSupport.maybeCallBeforeBind(relatedNodePreEvt).flatMap(relatedNode -> {
      Neo4jPersistentEntity<?> targetEntity=neo4jMappingContext.getPersistentEntity(relatedNodePreEvt.getClass());
      return Mono.just(targetEntity.isNew(relatedNode)).flatMap(isNew -> {
        Mono<Long> relatedIdMono;
        if (processState == ProcessState.PROCESSED_ALL_VALUES) {
          relatedIdMono=queryRelatedNode(relatedNode,targetEntity);
        }
 else {
          relatedIdMono=saveRelatedNode(relatedNode,relationshipContext.getAssociationTargetType(),targetEntity);
        }
        return relatedIdMono.flatMap(relatedInternalId -> {
          PersistentPropertyAccessor<?> targetPropertyAccessor=targetEntity.getPropertyAccessor(relatedNode);
          if (targetEntity.isUsingInternalIds()) {
            targetPropertyAccessor.setProperty(targetEntity.getRequiredIdProperty(),relatedInternalId);
          }
          CreateRelationshipStatementHolder statementHolder=neo4jMappingContext.createStatement(sourceEntity,relationshipContext,relatedValueToStore);
          Mono<Long> relationshipCreationMonoNested=neo4jClient.query(renderer.render(statementHolder.getStatement())).bind(convertIdValues(sourceEntity.getRequiredIdProperty(),fromId)).to(Constants.FROM_ID_PARAMETER_NAME).bind(relatedInternalId).to(Constants.TO_ID_PARAMETER_NAME).bindAll(statementHolder.getProperties()).fetchAs(Long.class).one().doOnNext(relationshipInternalId -> {
            if (idProperty != null) {
              relationshipContext.getRelationshipPropertiesPropertyAccessor(relatedValueToStore).setProperty(idProperty,relationshipInternalId);
            }
          }
);
          if (processState != ProcessState.PROCESSED_ALL_VALUES) {
            return relationshipCreationMonoNested.checkpoint().then(processNestedRelations(targetEntity,targetPropertyAccessor.getBean(),isNew,stateMachine));
          }
 else {
            return relationshipCreationMonoNested.checkpoint().then();
          }
        }
).checkpoint();
      }
);
    }
);
    relationshipCreationMonos.add(createRelationship);
  }
}
 @TO@ association -> {
  NestedRelationshipContext relationshipContext=NestedRelationshipContext.of(association,propertyAccessor,sourceEntity);
  Collection<?> relatedValuesToStore=MappingSupport.unifyRelationshipValue(relationshipContext.getInverse(),relationshipContext.getValue());
  RelationshipDescription relationshipDescription=relationshipContext.getRelationship();
  RelationshipDescription relationshipDescriptionObverse=relationshipDescription.getRelationshipObverse();
  Neo4jPersistentProperty idProperty;
  if (!relationshipDescription.hasInternalIdProperty()) {
    idProperty=null;
  }
 else {
    Neo4jPersistentEntity<?> relationshipPropertiesEntity=(Neo4jPersistentEntity<?>)relationshipDescription.getRelationshipPropertiesEntity();
    idProperty=relationshipPropertiesEntity.getIdProperty();
  }
  ProcessState processState=stateMachine.getStateOf(fromId,relationshipDescriptionObverse,relatedValuesToStore);
  if (processState == ProcessState.PROCESSED_ALL_RELATIONSHIPS || processState == ProcessState.PROCESSED_BOTH) {
    return;
  }
  if (!isParentObjectNew && !stateMachine.hasProcessedRelationship(fromId,relationshipDescription)) {
    List<Long> knownRelationshipsIds=new ArrayList<>();
    if (idProperty != null) {
      for (      Object relatedValueToStore : relatedValuesToStore) {
        if (relatedValueToStore == null) {
          continue;
        }
        Long id=(Long)relationshipContext.getRelationshipPropertiesPropertyAccessor(relatedValueToStore).getProperty(idProperty);
        if (id != null) {
          knownRelationshipsIds.add(id);
        }
      }
    }
    Statement relationshipRemoveQuery=cypherGenerator.prepareDeleteOf(sourceEntity,relationshipDescription);
    relationshipCreationMonos.add(neo4jClient.query(renderer.render(relationshipRemoveQuery)).bind(convertIdValues(sourceEntity.getIdProperty(),fromId)).to(Constants.FROM_ID_PARAMETER_NAME).bind(knownRelationshipsIds).to(Constants.NAME_OF_KNOWN_RELATIONSHIPS_PARAM).run().checkpoint("delete relationships").then());
  }
  if (relationshipContext.inverseValueIsEmpty()) {
    return;
  }
  stateMachine.markRelationshipAsProcessed(fromId,relationshipDescription);
  for (  Object relatedValueToStore : relatedValuesToStore) {
    Object relatedNodePreEvt=relationshipContext.identifyAndExtractRelationshipTargetNode(relatedValueToStore);
    Mono<Void> createRelationship=eventSupport.maybeCallBeforeBind(relatedNodePreEvt).flatMap(relatedNode -> {
      Neo4jPersistentEntity<?> targetEntity=neo4jMappingContext.getPersistentEntity(relatedNodePreEvt.getClass());
      return Mono.just(targetEntity.isNew(relatedNode)).flatMap(isNew -> {
        Mono<Long> relatedIdMono;
        if (stateMachine.hasProcessedValue(relatedValueToStore)) {
          relatedIdMono=queryRelatedNode(relatedNode,targetEntity);
        }
 else {
          relatedIdMono=saveRelatedNode(relatedNode,relationshipContext.getAssociationTargetType(),targetEntity);
        }
        stateMachine.markValueAsProcessed(relatedValueToStore);
        return relatedIdMono.flatMap(relatedInternalId -> {
          PersistentPropertyAccessor<?> targetPropertyAccessor=targetEntity.getPropertyAccessor(relatedNode);
          if (targetEntity.isUsingInternalIds()) {
            targetPropertyAccessor.setProperty(targetEntity.getRequiredIdProperty(),relatedInternalId);
          }
          CreateRelationshipStatementHolder statementHolder=neo4jMappingContext.createStatement(sourceEntity,relationshipContext,relatedValueToStore);
          Mono<Long> relationshipCreationMonoNested=neo4jClient.query(renderer.render(statementHolder.getStatement())).bind(convertIdValues(sourceEntity.getRequiredIdProperty(),fromId)).to(Constants.FROM_ID_PARAMETER_NAME).bind(relatedInternalId).to(Constants.TO_ID_PARAMETER_NAME).bindAll(statementHolder.getProperties()).fetchAs(Long.class).one().doOnNext(relationshipInternalId -> {
            if (idProperty != null) {
              relationshipContext.getRelationshipPropertiesPropertyAccessor(relatedValueToStore).setProperty(idProperty,relationshipInternalId);
            }
          }
);
          if (processState != ProcessState.PROCESSED_ALL_VALUES) {
            return relationshipCreationMonoNested.checkpoint().then(processNestedRelations(targetEntity,targetPropertyAccessor.getBean(),isNew,stateMachine));
          }
 else {
            return relationshipCreationMonoNested.checkpoint().then();
          }
        }
).checkpoint();
      }
);
    }
);
    relationshipCreationMonos.add(createRelationship);
  }
}
 @AT@ 25674 @LENGTH@ 5445
---UPD VariableDeclarationStatement@@ProcessState processState=stateMachine.getStateOf(relationshipDescriptionObverse,relatedValuesToStore); @TO@ ProcessState processState=stateMachine.getStateOf(fromId,relationshipDescriptionObverse,relatedValuesToStore); @AT@ 26669 @LENGTH@ 106
------UPD VariableDeclarationFragment@@processState=stateMachine.getStateOf(relationshipDescriptionObverse,relatedValuesToStore) @TO@ processState=stateMachine.getStateOf(fromId,relationshipDescriptionObverse,relatedValuesToStore) @AT@ 26682 @LENGTH@ 92
---------UPD MethodInvocation@@stateMachine.getStateOf(relationshipDescriptionObverse,relatedValuesToStore) @TO@ stateMachine.getStateOf(fromId,relationshipDescriptionObverse,relatedValuesToStore) @AT@ 26697 @LENGTH@ 77
------------UPD SimpleName@@MethodName:getStateOf:[relationshipDescriptionObverse, relatedValuesToStore] @TO@ MethodName:getStateOf:[fromId, relationshipDescriptionObverse, relatedValuesToStore] @AT@ 26710 @LENGTH@ 64
---------------INS SimpleName@@fromId @TO@ SimpleName@@MethodName:getStateOf:[relationshipDescriptionObverse, relatedValuesToStore] @AT@ 26721 @LENGTH@ 6
---UPD IfStatement@@if (!isParentObjectNew) {  List<Long> knownRelationshipsIds=new ArrayList<>();  if (idProperty != null) {    for (    Object relatedValueToStore : relatedValuesToStore) {      if (relatedValueToStore == null) {        continue;      }      Long id=(Long)relationshipContext.getRelationshipPropertiesPropertyAccessor(relatedValueToStore).getProperty(idProperty);      if (id != null) {        knownRelationshipsIds.add(id);      }    }  }  Statement relationshipRemoveQuery=cypherGenerator.prepareDeleteOf(sourceEntity,relationshipDescription);  relationshipCreationMonos.add(neo4jClient.query(renderer.render(relationshipRemoveQuery)).bind(convertIdValues(sourceEntity.getIdProperty(),fromId)).to(Constants.FROM_ID_PARAMETER_NAME).bind(knownRelationshipsIds).to(Constants.NAME_OF_KNOWN_RELATIONSHIPS_PARAM).run().checkpoint("delete relationships").then());} @TO@ if (!isParentObjectNew && !stateMachine.hasProcessedRelationship(fromId,relationshipDescription)) {  List<Long> knownRelationshipsIds=new ArrayList<>();  if (idProperty != null) {    for (    Object relatedValueToStore : relatedValuesToStore) {      if (relatedValueToStore == null) {        continue;      }      Long id=(Long)relationshipContext.getRelationshipPropertiesPropertyAccessor(relatedValueToStore).getProperty(idProperty);      if (id != null) {        knownRelationshipsIds.add(id);      }    }  }  Statement relationshipRemoveQuery=cypherGenerator.prepareDeleteOf(sourceEntity,relationshipDescription);  relationshipCreationMonos.add(neo4jClient.query(renderer.render(relationshipRemoveQuery)).bind(convertIdValues(sourceEntity.getIdProperty(),fromId)).to(Constants.FROM_ID_PARAMETER_NAME).bind(knownRelationshipsIds).to(Constants.NAME_OF_KNOWN_RELATIONSHIPS_PARAM).run().checkpoint("delete relationships").then());} @AT@ 27091 @LENGTH@ 1001
------DEL PrefixExpression@@!isParentObjectNew @AT@ 27095 @LENGTH@ 18
------INS InfixExpression@@!isParentObjectNew && !stateMachine.hasProcessedRelationship(fromId,relationshipDescription) @TO@ IfStatement@@if (!isParentObjectNew) {  List<Long> knownRelationshipsIds=new ArrayList<>();  if (idProperty != null) {    for (    Object relatedValueToStore : relatedValuesToStore) {      if (relatedValueToStore == null) {        continue;      }      Long id=(Long)relationshipContext.getRelationshipPropertiesPropertyAccessor(relatedValueToStore).getProperty(idProperty);      if (id != null) {        knownRelationshipsIds.add(id);      }    }  }  Statement relationshipRemoveQuery=cypherGenerator.prepareDeleteOf(sourceEntity,relationshipDescription);  relationshipCreationMonos.add(neo4jClient.query(renderer.render(relationshipRemoveQuery)).bind(convertIdValues(sourceEntity.getIdProperty(),fromId)).to(Constants.FROM_ID_PARAMETER_NAME).bind(knownRelationshipsIds).to(Constants.NAME_OF_KNOWN_RELATIONSHIPS_PARAM).run().checkpoint("delete relationships").then());} @AT@ 27162 @LENGTH@ 93
---------INS PrefixExpression@@!isParentObjectNew @TO@ InfixExpression@@!isParentObjectNew && !stateMachine.hasProcessedRelationship(fromId,relationshipDescription) @AT@ 27162 @LENGTH@ 18
------------MOV Operator@@! @TO@ PrefixExpression@@!isParentObjectNew @AT@ 27095 @LENGTH@ 1
------------MOV SimpleName@@isParentObjectNew @TO@ PrefixExpression@@!isParentObjectNew @AT@ 27096 @LENGTH@ 17
---------INS Operator@@&& @TO@ InfixExpression@@!isParentObjectNew && !stateMachine.hasProcessedRelationship(fromId,relationshipDescription) @AT@ 27180 @LENGTH@ 2
---------INS PrefixExpression@@!stateMachine.hasProcessedRelationship(fromId,relationshipDescription) @TO@ InfixExpression@@!isParentObjectNew && !stateMachine.hasProcessedRelationship(fromId,relationshipDescription) @AT@ 27184 @LENGTH@ 71
------------INS Operator@@! @TO@ PrefixExpression@@!stateMachine.hasProcessedRelationship(fromId,relationshipDescription) @AT@ 27184 @LENGTH@ 1
------------INS MethodInvocation@@stateMachine.hasProcessedRelationship(fromId,relationshipDescription) @TO@ PrefixExpression@@!stateMachine.hasProcessedRelationship(fromId,relationshipDescription) @AT@ 27185 @LENGTH@ 70
---------------INS SimpleName@@Name:stateMachine @TO@ MethodInvocation@@stateMachine.hasProcessedRelationship(fromId,relationshipDescription) @AT@ 27185 @LENGTH@ 12
---------------INS SimpleName@@MethodName:hasProcessedRelationship:[fromId, relationshipDescription] @TO@ MethodInvocation@@stateMachine.hasProcessedRelationship(fromId,relationshipDescription) @AT@ 27198 @LENGTH@ 57
------------------INS SimpleName@@fromId @TO@ SimpleName@@MethodName:hasProcessedRelationship:[fromId, relationshipDescription] @AT@ 27223 @LENGTH@ 6
------------------INS SimpleName@@relationshipDescription @TO@ SimpleName@@MethodName:hasProcessedRelationship:[fromId, relationshipDescription] @AT@ 27231 @LENGTH@ 23
---UPD ExpressionStatement@@MethodInvocation:stateMachine.markAsProcessed(relationshipDescription,relatedValuesToStore) @TO@ MethodInvocation:stateMachine.markRelationshipAsProcessed(fromId,relationshipDescription) @AT@ 28224 @LENGTH@ 76
------UPD MethodInvocation@@stateMachine.markAsProcessed(relationshipDescription,relatedValuesToStore) @TO@ stateMachine.markRelationshipAsProcessed(fromId,relationshipDescription) @AT@ 28224 @LENGTH@ 75
---------UPD SimpleName@@MethodName:markAsProcessed:[relationshipDescription, relatedValuesToStore] @TO@ MethodName:markRelationshipAsProcessed:[fromId, relationshipDescription] @AT@ 28237 @LENGTH@ 62
------------UPD SimpleName@@relationshipDescription @TO@ fromId @AT@ 28253 @LENGTH@ 23
------------UPD SimpleName@@relatedValuesToStore @TO@ relationshipDescription @AT@ 28278 @LENGTH@ 20
---UPD EnhancedForStatement@@for (Object relatedValueToStore : relatedValuesToStore) {  Object relatedNodePreEvt=relationshipContext.identifyAndExtractRelationshipTargetNode(relatedValueToStore);  Mono<Void> createRelationship=eventSupport.maybeCallBeforeBind(relatedNodePreEvt).flatMap(relatedNode -> {    Neo4jPersistentEntity<?> targetEntity=neo4jMappingContext.getPersistentEntity(relatedNodePreEvt.getClass());    return Mono.just(targetEntity.isNew(relatedNode)).flatMap(isNew -> {      Mono<Long> relatedIdMono;      if (processState == ProcessState.PROCESSED_ALL_VALUES) {        relatedIdMono=queryRelatedNode(relatedNode,targetEntity);      } else {        relatedIdMono=saveRelatedNode(relatedNode,relationshipContext.getAssociationTargetType(),targetEntity);      }      return relatedIdMono.flatMap(relatedInternalId -> {        PersistentPropertyAccessor<?> targetPropertyAccessor=targetEntity.getPropertyAccessor(relatedNode);        if (targetEntity.isUsingInternalIds()) {          targetPropertyAccessor.setProperty(targetEntity.getRequiredIdProperty(),relatedInternalId);        }        CreateRelationshipStatementHolder statementHolder=neo4jMappingContext.createStatement(sourceEntity,relationshipContext,relatedValueToStore);        Mono<Long> relationshipCreationMonoNested=neo4jClient.query(renderer.render(statementHolder.getStatement())).bind(convertIdValues(sourceEntity.getRequiredIdProperty(),fromId)).to(Constants.FROM_ID_PARAMETER_NAME).bind(relatedInternalId).to(Constants.TO_ID_PARAMETER_NAME).bindAll(statementHolder.getProperties()).fetchAs(Long.class).one().doOnNext(relationshipInternalId -> {          if (idProperty != null) {            relationshipContext.getRelationshipPropertiesPropertyAccessor(relatedValueToStore).setProperty(idProperty,relationshipInternalId);          }        });        if (processState != ProcessState.PROCESSED_ALL_VALUES) {          return relationshipCreationMonoNested.checkpoint().then(processNestedRelations(targetEntity,targetPropertyAccessor.getBean(),isNew,stateMachine));        } else {          return relationshipCreationMonoNested.checkpoint().then();        }      }).checkpoint();    });  });  relationshipCreationMonos.add(createRelationship);} @TO@ for (Object relatedValueToStore : relatedValuesToStore) {  Object relatedNodePreEvt=relationshipContext.identifyAndExtractRelationshipTargetNode(relatedValueToStore);  Mono<Void> createRelationship=eventSupport.maybeCallBeforeBind(relatedNodePreEvt).flatMap(relatedNode -> {    Neo4jPersistentEntity<?> targetEntity=neo4jMappingContext.getPersistentEntity(relatedNodePreEvt.getClass());    return Mono.just(targetEntity.isNew(relatedNode)).flatMap(isNew -> {      Mono<Long> relatedIdMono;      if (stateMachine.hasProcessedValue(relatedValueToStore)) {        relatedIdMono=queryRelatedNode(relatedNode,targetEntity);      } else {        relatedIdMono=saveRelatedNode(relatedNode,relationshipContext.getAssociationTargetType(),targetEntity);      }      stateMachine.markValueAsProcessed(relatedValueToStore);      return relatedIdMono.flatMap(relatedInternalId -> {        PersistentPropertyAccessor<?> targetPropertyAccessor=targetEntity.getPropertyAccessor(relatedNode);        if (targetEntity.isUsingInternalIds()) {          targetPropertyAccessor.setProperty(targetEntity.getRequiredIdProperty(),relatedInternalId);        }        CreateRelationshipStatementHolder statementHolder=neo4jMappingContext.createStatement(sourceEntity,relationshipContext,relatedValueToStore);        Mono<Long> relationshipCreationMonoNested=neo4jClient.query(renderer.render(statementHolder.getStatement())).bind(convertIdValues(sourceEntity.getRequiredIdProperty(),fromId)).to(Constants.FROM_ID_PARAMETER_NAME).bind(relatedInternalId).to(Constants.TO_ID_PARAMETER_NAME).bindAll(statementHolder.getProperties()).fetchAs(Long.class).one().doOnNext(relationshipInternalId -> {          if (idProperty != null) {            relationshipContext.getRelationshipPropertiesPropertyAccessor(relatedValueToStore).setProperty(idProperty,relationshipInternalId);          }        });        if (processState != ProcessState.PROCESSED_ALL_VALUES) {          return relationshipCreationMonoNested.checkpoint().then(processNestedRelations(targetEntity,targetPropertyAccessor.getBean(),isNew,stateMachine));        } else {          return relationshipCreationMonoNested.checkpoint().then();        }      }).checkpoint();    });  });  relationshipCreationMonos.add(createRelationship);} @AT@ 28306 @LENGTH@ 2808
------UPD VariableDeclarationStatement@@Mono<Void> createRelationship=eventSupport.maybeCallBeforeBind(relatedNodePreEvt).flatMap(relatedNode -> {
  Neo4jPersistentEntity<?> targetEntity=neo4jMappingContext.getPersistentEntity(relatedNodePreEvt.getClass());
  return Mono.just(targetEntity.isNew(relatedNode)).flatMap(isNew -> {
    Mono<Long> relatedIdMono;
    if (processState == ProcessState.PROCESSED_ALL_VALUES) {
      relatedIdMono=queryRelatedNode(relatedNode,targetEntity);
    }
 else {
      relatedIdMono=saveRelatedNode(relatedNode,relationshipContext.getAssociationTargetType(),targetEntity);
    }
    return relatedIdMono.flatMap(relatedInternalId -> {
      PersistentPropertyAccessor<?> targetPropertyAccessor=targetEntity.getPropertyAccessor(relatedNode);
      if (targetEntity.isUsingInternalIds()) {
        targetPropertyAccessor.setProperty(targetEntity.getRequiredIdProperty(),relatedInternalId);
      }
      CreateRelationshipStatementHolder statementHolder=neo4jMappingContext.createStatement(sourceEntity,relationshipContext,relatedValueToStore);
      Mono<Long> relationshipCreationMonoNested=neo4jClient.query(renderer.render(statementHolder.getStatement())).bind(convertIdValues(sourceEntity.getRequiredIdProperty(),fromId)).to(Constants.FROM_ID_PARAMETER_NAME).bind(relatedInternalId).to(Constants.TO_ID_PARAMETER_NAME).bindAll(statementHolder.getProperties()).fetchAs(Long.class).one().doOnNext(relationshipInternalId -> {
        if (idProperty != null) {
          relationshipContext.getRelationshipPropertiesPropertyAccessor(relatedValueToStore).setProperty(idProperty,relationshipInternalId);
        }
      }
);
      if (processState != ProcessState.PROCESSED_ALL_VALUES) {
        return relationshipCreationMonoNested.checkpoint().then(processNestedRelations(targetEntity,targetPropertyAccessor.getBean(),isNew,stateMachine));
      }
 else {
        return relationshipCreationMonoNested.checkpoint().then();
      }
    }
).checkpoint();
  }
);
}
); @TO@ Mono<Void> createRelationship=eventSupport.maybeCallBeforeBind(relatedNodePreEvt).flatMap(relatedNode -> {
  Neo4jPersistentEntity<?> targetEntity=neo4jMappingContext.getPersistentEntity(relatedNodePreEvt.getClass());
  return Mono.just(targetEntity.isNew(relatedNode)).flatMap(isNew -> {
    Mono<Long> relatedIdMono;
    if (stateMachine.hasProcessedValue(relatedValueToStore)) {
      relatedIdMono=queryRelatedNode(relatedNode,targetEntity);
    }
 else {
      relatedIdMono=saveRelatedNode(relatedNode,relationshipContext.getAssociationTargetType(),targetEntity);
    }
    stateMachine.markValueAsProcessed(relatedValueToStore);
    return relatedIdMono.flatMap(relatedInternalId -> {
      PersistentPropertyAccessor<?> targetPropertyAccessor=targetEntity.getPropertyAccessor(relatedNode);
      if (targetEntity.isUsingInternalIds()) {
        targetPropertyAccessor.setProperty(targetEntity.getRequiredIdProperty(),relatedInternalId);
      }
      CreateRelationshipStatementHolder statementHolder=neo4jMappingContext.createStatement(sourceEntity,relationshipContext,relatedValueToStore);
      Mono<Long> relationshipCreationMonoNested=neo4jClient.query(renderer.render(statementHolder.getStatement())).bind(convertIdValues(sourceEntity.getRequiredIdProperty(),fromId)).to(Constants.FROM_ID_PARAMETER_NAME).bind(relatedInternalId).to(Constants.TO_ID_PARAMETER_NAME).bindAll(statementHolder.getProperties()).fetchAs(Long.class).one().doOnNext(relationshipInternalId -> {
        if (idProperty != null) {
          relationshipContext.getRelationshipPropertiesPropertyAccessor(relatedValueToStore).setProperty(idProperty,relationshipInternalId);
        }
      }
);
      if (processState != ProcessState.PROCESSED_ALL_VALUES) {
        return relationshipCreationMonoNested.checkpoint().then(processNestedRelations(targetEntity,targetPropertyAccessor.getBean(),isNew,stateMachine));
      }
 else {
        return relationshipCreationMonoNested.checkpoint().then();
      }
    }
).checkpoint();
  }
);
}
); @AT@ 28486 @LENGTH@ 2566
---------UPD VariableDeclarationFragment@@createRelationship=eventSupport.maybeCallBeforeBind(relatedNodePreEvt).flatMap(relatedNode -> {
  Neo4jPersistentEntity<?> targetEntity=neo4jMappingContext.getPersistentEntity(relatedNodePreEvt.getClass());
  return Mono.just(targetEntity.isNew(relatedNode)).flatMap(isNew -> {
    Mono<Long> relatedIdMono;
    if (processState == ProcessState.PROCESSED_ALL_VALUES) {
      relatedIdMono=queryRelatedNode(relatedNode,targetEntity);
    }
 else {
      relatedIdMono=saveRelatedNode(relatedNode,relationshipContext.getAssociationTargetType(),targetEntity);
    }
    return relatedIdMono.flatMap(relatedInternalId -> {
      PersistentPropertyAccessor<?> targetPropertyAccessor=targetEntity.getPropertyAccessor(relatedNode);
      if (targetEntity.isUsingInternalIds()) {
        targetPropertyAccessor.setProperty(targetEntity.getRequiredIdProperty(),relatedInternalId);
      }
      CreateRelationshipStatementHolder statementHolder=neo4jMappingContext.createStatement(sourceEntity,relationshipContext,relatedValueToStore);
      Mono<Long> relationshipCreationMonoNested=neo4jClient.query(renderer.render(statementHolder.getStatement())).bind(convertIdValues(sourceEntity.getRequiredIdProperty(),fromId)).to(Constants.FROM_ID_PARAMETER_NAME).bind(relatedInternalId).to(Constants.TO_ID_PARAMETER_NAME).bindAll(statementHolder.getProperties()).fetchAs(Long.class).one().doOnNext(relationshipInternalId -> {
        if (idProperty != null) {
          relationshipContext.getRelationshipPropertiesPropertyAccessor(relatedValueToStore).setProperty(idProperty,relationshipInternalId);
        }
      }
);
      if (processState != ProcessState.PROCESSED_ALL_VALUES) {
        return relationshipCreationMonoNested.checkpoint().then(processNestedRelations(targetEntity,targetPropertyAccessor.getBean(),isNew,stateMachine));
      }
 else {
        return relationshipCreationMonoNested.checkpoint().then();
      }
    }
).checkpoint();
  }
);
}
) @TO@ createRelationship=eventSupport.maybeCallBeforeBind(relatedNodePreEvt).flatMap(relatedNode -> {
  Neo4jPersistentEntity<?> targetEntity=neo4jMappingContext.getPersistentEntity(relatedNodePreEvt.getClass());
  return Mono.just(targetEntity.isNew(relatedNode)).flatMap(isNew -> {
    Mono<Long> relatedIdMono;
    if (stateMachine.hasProcessedValue(relatedValueToStore)) {
      relatedIdMono=queryRelatedNode(relatedNode,targetEntity);
    }
 else {
      relatedIdMono=saveRelatedNode(relatedNode,relationshipContext.getAssociationTargetType(),targetEntity);
    }
    stateMachine.markValueAsProcessed(relatedValueToStore);
    return relatedIdMono.flatMap(relatedInternalId -> {
      PersistentPropertyAccessor<?> targetPropertyAccessor=targetEntity.getPropertyAccessor(relatedNode);
      if (targetEntity.isUsingInternalIds()) {
        targetPropertyAccessor.setProperty(targetEntity.getRequiredIdProperty(),relatedInternalId);
      }
      CreateRelationshipStatementHolder statementHolder=neo4jMappingContext.createStatement(sourceEntity,relationshipContext,relatedValueToStore);
      Mono<Long> relationshipCreationMonoNested=neo4jClient.query(renderer.render(statementHolder.getStatement())).bind(convertIdValues(sourceEntity.getRequiredIdProperty(),fromId)).to(Constants.FROM_ID_PARAMETER_NAME).bind(relatedInternalId).to(Constants.TO_ID_PARAMETER_NAME).bindAll(statementHolder.getProperties()).fetchAs(Long.class).one().doOnNext(relationshipInternalId -> {
        if (idProperty != null) {
          relationshipContext.getRelationshipPropertiesPropertyAccessor(relatedValueToStore).setProperty(idProperty,relationshipInternalId);
        }
      }
);
      if (processState != ProcessState.PROCESSED_ALL_VALUES) {
        return relationshipCreationMonoNested.checkpoint().then(processNestedRelations(targetEntity,targetPropertyAccessor.getBean(),isNew,stateMachine));
      }
 else {
        return relationshipCreationMonoNested.checkpoint().then();
      }
    }
).checkpoint();
  }
);
}
) @AT@ 28497 @LENGTH@ 2554
------------UPD MethodInvocation@@eventSupport.maybeCallBeforeBind(relatedNodePreEvt).flatMap(relatedNode -> {
  Neo4jPersistentEntity<?> targetEntity=neo4jMappingContext.getPersistentEntity(relatedNodePreEvt.getClass());
  return Mono.just(targetEntity.isNew(relatedNode)).flatMap(isNew -> {
    Mono<Long> relatedIdMono;
    if (processState == ProcessState.PROCESSED_ALL_VALUES) {
      relatedIdMono=queryRelatedNode(relatedNode,targetEntity);
    }
 else {
      relatedIdMono=saveRelatedNode(relatedNode,relationshipContext.getAssociationTargetType(),targetEntity);
    }
    return relatedIdMono.flatMap(relatedInternalId -> {
      PersistentPropertyAccessor<?> targetPropertyAccessor=targetEntity.getPropertyAccessor(relatedNode);
      if (targetEntity.isUsingInternalIds()) {
        targetPropertyAccessor.setProperty(targetEntity.getRequiredIdProperty(),relatedInternalId);
      }
      CreateRelationshipStatementHolder statementHolder=neo4jMappingContext.createStatement(sourceEntity,relationshipContext,relatedValueToStore);
      Mono<Long> relationshipCreationMonoNested=neo4jClient.query(renderer.render(statementHolder.getStatement())).bind(convertIdValues(sourceEntity.getRequiredIdProperty(),fromId)).to(Constants.FROM_ID_PARAMETER_NAME).bind(relatedInternalId).to(Constants.TO_ID_PARAMETER_NAME).bindAll(statementHolder.getProperties()).fetchAs(Long.class).one().doOnNext(relationshipInternalId -> {
        if (idProperty != null) {
          relationshipContext.getRelationshipPropertiesPropertyAccessor(relatedValueToStore).setProperty(idProperty,relationshipInternalId);
        }
      }
);
      if (processState != ProcessState.PROCESSED_ALL_VALUES) {
        return relationshipCreationMonoNested.checkpoint().then(processNestedRelations(targetEntity,targetPropertyAccessor.getBean(),isNew,stateMachine));
      }
 else {
        return relationshipCreationMonoNested.checkpoint().then();
      }
    }
).checkpoint();
  }
);
}
) @TO@ eventSupport.maybeCallBeforeBind(relatedNodePreEvt).flatMap(relatedNode -> {
  Neo4jPersistentEntity<?> targetEntity=neo4jMappingContext.getPersistentEntity(relatedNodePreEvt.getClass());
  return Mono.just(targetEntity.isNew(relatedNode)).flatMap(isNew -> {
    Mono<Long> relatedIdMono;
    if (stateMachine.hasProcessedValue(relatedValueToStore)) {
      relatedIdMono=queryRelatedNode(relatedNode,targetEntity);
    }
 else {
      relatedIdMono=saveRelatedNode(relatedNode,relationshipContext.getAssociationTargetType(),targetEntity);
    }
    stateMachine.markValueAsProcessed(relatedValueToStore);
    return relatedIdMono.flatMap(relatedInternalId -> {
      PersistentPropertyAccessor<?> targetPropertyAccessor=targetEntity.getPropertyAccessor(relatedNode);
      if (targetEntity.isUsingInternalIds()) {
        targetPropertyAccessor.setProperty(targetEntity.getRequiredIdProperty(),relatedInternalId);
      }
      CreateRelationshipStatementHolder statementHolder=neo4jMappingContext.createStatement(sourceEntity,relationshipContext,relatedValueToStore);
      Mono<Long> relationshipCreationMonoNested=neo4jClient.query(renderer.render(statementHolder.getStatement())).bind(convertIdValues(sourceEntity.getRequiredIdProperty(),fromId)).to(Constants.FROM_ID_PARAMETER_NAME).bind(relatedInternalId).to(Constants.TO_ID_PARAMETER_NAME).bindAll(statementHolder.getProperties()).fetchAs(Long.class).one().doOnNext(relationshipInternalId -> {
        if (idProperty != null) {
          relationshipContext.getRelationshipPropertiesPropertyAccessor(relatedValueToStore).setProperty(idProperty,relationshipInternalId);
        }
      }
);
      if (processState != ProcessState.PROCESSED_ALL_VALUES) {
        return relationshipCreationMonoNested.checkpoint().then(processNestedRelations(targetEntity,targetPropertyAccessor.getBean(),isNew,stateMachine));
      }
 else {
        return relationshipCreationMonoNested.checkpoint().then();
      }
    }
).checkpoint();
  }
);
}
) @AT@ 28518 @LENGTH@ 2533
---------------UPD SimpleName@@MethodName:flatMap:[relatedNode -> {
  Neo4jPersistentEntity<?> targetEntity=neo4jMappingContext.getPersistentEntity(relatedNodePreEvt.getClass());
  return Mono.just(targetEntity.isNew(relatedNode)).flatMap(isNew -> {
    Mono<Long> relatedIdMono;
    if (processState == ProcessState.PROCESSED_ALL_VALUES) {
      relatedIdMono=queryRelatedNode(relatedNode,targetEntity);
    }
 else {
      relatedIdMono=saveRelatedNode(relatedNode,relationshipContext.getAssociationTargetType(),targetEntity);
    }
    return relatedIdMono.flatMap(relatedInternalId -> {
      PersistentPropertyAccessor<?> targetPropertyAccessor=targetEntity.getPropertyAccessor(relatedNode);
      if (targetEntity.isUsingInternalIds()) {
        targetPropertyAccessor.setProperty(targetEntity.getRequiredIdProperty(),relatedInternalId);
      }
      CreateRelationshipStatementHolder statementHolder=neo4jMappingContext.createStatement(sourceEntity,relationshipContext,relatedValueToStore);
      Mono<Long> relationshipCreationMonoNested=neo4jClient.query(renderer.render(statementHolder.getStatement())).bind(convertIdValues(sourceEntity.getRequiredIdProperty(),fromId)).to(Constants.FROM_ID_PARAMETER_NAME).bind(relatedInternalId).to(Constants.TO_ID_PARAMETER_NAME).bindAll(statementHolder.getProperties()).fetchAs(Long.class).one().doOnNext(relationshipInternalId -> {
        if (idProperty != null) {
          relationshipContext.getRelationshipPropertiesPropertyAccessor(relatedValueToStore).setProperty(idProperty,relationshipInternalId);
        }
      }
);
      if (processState != ProcessState.PROCESSED_ALL_VALUES) {
        return relationshipCreationMonoNested.checkpoint().then(processNestedRelations(targetEntity,targetPropertyAccessor.getBean(),isNew,stateMachine));
      }
 else {
        return relationshipCreationMonoNested.checkpoint().then();
      }
    }
).checkpoint();
  }
);
}
] @TO@ MethodName:flatMap:[relatedNode -> {
  Neo4jPersistentEntity<?> targetEntity=neo4jMappingContext.getPersistentEntity(relatedNodePreEvt.getClass());
  return Mono.just(targetEntity.isNew(relatedNode)).flatMap(isNew -> {
    Mono<Long> relatedIdMono;
    if (stateMachine.hasProcessedValue(relatedValueToStore)) {
      relatedIdMono=queryRelatedNode(relatedNode,targetEntity);
    }
 else {
      relatedIdMono=saveRelatedNode(relatedNode,relationshipContext.getAssociationTargetType(),targetEntity);
    }
    stateMachine.markValueAsProcessed(relatedValueToStore);
    return relatedIdMono.flatMap(relatedInternalId -> {
      PersistentPropertyAccessor<?> targetPropertyAccessor=targetEntity.getPropertyAccessor(relatedNode);
      if (targetEntity.isUsingInternalIds()) {
        targetPropertyAccessor.setProperty(targetEntity.getRequiredIdProperty(),relatedInternalId);
      }
      CreateRelationshipStatementHolder statementHolder=neo4jMappingContext.createStatement(sourceEntity,relationshipContext,relatedValueToStore);
      Mono<Long> relationshipCreationMonoNested=neo4jClient.query(renderer.render(statementHolder.getStatement())).bind(convertIdValues(sourceEntity.getRequiredIdProperty(),fromId)).to(Constants.FROM_ID_PARAMETER_NAME).bind(relatedInternalId).to(Constants.TO_ID_PARAMETER_NAME).bindAll(statementHolder.getProperties()).fetchAs(Long.class).one().doOnNext(relationshipInternalId -> {
        if (idProperty != null) {
          relationshipContext.getRelationshipPropertiesPropertyAccessor(relatedValueToStore).setProperty(idProperty,relationshipInternalId);
        }
      }
);
      if (processState != ProcessState.PROCESSED_ALL_VALUES) {
        return relationshipCreationMonoNested.checkpoint().then(processNestedRelations(targetEntity,targetPropertyAccessor.getBean(),isNew,stateMachine));
      }
 else {
        return relationshipCreationMonoNested.checkpoint().then();
      }
    }
).checkpoint();
  }
);
}
] @AT@ 28578 @LENGTH@ 2473
------------------UPD LambdaExpression@@relatedNode -> {
  Neo4jPersistentEntity<?> targetEntity=neo4jMappingContext.getPersistentEntity(relatedNodePreEvt.getClass());
  return Mono.just(targetEntity.isNew(relatedNode)).flatMap(isNew -> {
    Mono<Long> relatedIdMono;
    if (processState == ProcessState.PROCESSED_ALL_VALUES) {
      relatedIdMono=queryRelatedNode(relatedNode,targetEntity);
    }
 else {
      relatedIdMono=saveRelatedNode(relatedNode,relationshipContext.getAssociationTargetType(),targetEntity);
    }
    return relatedIdMono.flatMap(relatedInternalId -> {
      PersistentPropertyAccessor<?> targetPropertyAccessor=targetEntity.getPropertyAccessor(relatedNode);
      if (targetEntity.isUsingInternalIds()) {
        targetPropertyAccessor.setProperty(targetEntity.getRequiredIdProperty(),relatedInternalId);
      }
      CreateRelationshipStatementHolder statementHolder=neo4jMappingContext.createStatement(sourceEntity,relationshipContext,relatedValueToStore);
      Mono<Long> relationshipCreationMonoNested=neo4jClient.query(renderer.render(statementHolder.getStatement())).bind(convertIdValues(sourceEntity.getRequiredIdProperty(),fromId)).to(Constants.FROM_ID_PARAMETER_NAME).bind(relatedInternalId).to(Constants.TO_ID_PARAMETER_NAME).bindAll(statementHolder.getProperties()).fetchAs(Long.class).one().doOnNext(relationshipInternalId -> {
        if (idProperty != null) {
          relationshipContext.getRelationshipPropertiesPropertyAccessor(relatedValueToStore).setProperty(idProperty,relationshipInternalId);
        }
      }
);
      if (processState != ProcessState.PROCESSED_ALL_VALUES) {
        return relationshipCreationMonoNested.checkpoint().then(processNestedRelations(targetEntity,targetPropertyAccessor.getBean(),isNew,stateMachine));
      }
 else {
        return relationshipCreationMonoNested.checkpoint().then();
      }
    }
).checkpoint();
  }
);
}
 @TO@ relatedNode -> {
  Neo4jPersistentEntity<?> targetEntity=neo4jMappingContext.getPersistentEntity(relatedNodePreEvt.getClass());
  return Mono.just(targetEntity.isNew(relatedNode)).flatMap(isNew -> {
    Mono<Long> relatedIdMono;
    if (stateMachine.hasProcessedValue(relatedValueToStore)) {
      relatedIdMono=queryRelatedNode(relatedNode,targetEntity);
    }
 else {
      relatedIdMono=saveRelatedNode(relatedNode,relationshipContext.getAssociationTargetType(),targetEntity);
    }
    stateMachine.markValueAsProcessed(relatedValueToStore);
    return relatedIdMono.flatMap(relatedInternalId -> {
      PersistentPropertyAccessor<?> targetPropertyAccessor=targetEntity.getPropertyAccessor(relatedNode);
      if (targetEntity.isUsingInternalIds()) {
        targetPropertyAccessor.setProperty(targetEntity.getRequiredIdProperty(),relatedInternalId);
      }
      CreateRelationshipStatementHolder statementHolder=neo4jMappingContext.createStatement(sourceEntity,relationshipContext,relatedValueToStore);
      Mono<Long> relationshipCreationMonoNested=neo4jClient.query(renderer.render(statementHolder.getStatement())).bind(convertIdValues(sourceEntity.getRequiredIdProperty(),fromId)).to(Constants.FROM_ID_PARAMETER_NAME).bind(relatedInternalId).to(Constants.TO_ID_PARAMETER_NAME).bindAll(statementHolder.getProperties()).fetchAs(Long.class).one().doOnNext(relationshipInternalId -> {
        if (idProperty != null) {
          relationshipContext.getRelationshipPropertiesPropertyAccessor(relatedValueToStore).setProperty(idProperty,relationshipInternalId);
        }
      }
);
      if (processState != ProcessState.PROCESSED_ALL_VALUES) {
        return relationshipCreationMonoNested.checkpoint().then(processNestedRelations(targetEntity,targetPropertyAccessor.getBean(),isNew,stateMachine));
      }
 else {
        return relationshipCreationMonoNested.checkpoint().then();
      }
    }
).checkpoint();
  }
);
}
 @AT@ 28586 @LENGTH@ 2464
---------------------UPD ReturnStatement@@MethodInvocation:Mono.just(targetEntity.isNew(relatedNode)).flatMap(isNew -> {
  Mono<Long> relatedIdMono;
  if (processState == ProcessState.PROCESSED_ALL_VALUES) {
    relatedIdMono=queryRelatedNode(relatedNode,targetEntity);
  }
 else {
    relatedIdMono=saveRelatedNode(relatedNode,relationshipContext.getAssociationTargetType(),targetEntity);
  }
  return relatedIdMono.flatMap(relatedInternalId -> {
    PersistentPropertyAccessor<?> targetPropertyAccessor=targetEntity.getPropertyAccessor(relatedNode);
    if (targetEntity.isUsingInternalIds()) {
      targetPropertyAccessor.setProperty(targetEntity.getRequiredIdProperty(),relatedInternalId);
    }
    CreateRelationshipStatementHolder statementHolder=neo4jMappingContext.createStatement(sourceEntity,relationshipContext,relatedValueToStore);
    Mono<Long> relationshipCreationMonoNested=neo4jClient.query(renderer.render(statementHolder.getStatement())).bind(convertIdValues(sourceEntity.getRequiredIdProperty(),fromId)).to(Constants.FROM_ID_PARAMETER_NAME).bind(relatedInternalId).to(Constants.TO_ID_PARAMETER_NAME).bindAll(statementHolder.getProperties()).fetchAs(Long.class).one().doOnNext(relationshipInternalId -> {
      if (idProperty != null) {
        relationshipContext.getRelationshipPropertiesPropertyAccessor(relatedValueToStore).setProperty(idProperty,relationshipInternalId);
      }
    }
);
    if (processState != ProcessState.PROCESSED_ALL_VALUES) {
      return relationshipCreationMonoNested.checkpoint().then(processNestedRelations(targetEntity,targetPropertyAccessor.getBean(),isNew,stateMachine));
    }
 else {
      return relationshipCreationMonoNested.checkpoint().then();
    }
  }
).checkpoint();
}
) @TO@ MethodInvocation:Mono.just(targetEntity.isNew(relatedNode)).flatMap(isNew -> {
  Mono<Long> relatedIdMono;
  if (stateMachine.hasProcessedValue(relatedValueToStore)) {
    relatedIdMono=queryRelatedNode(relatedNode,targetEntity);
  }
 else {
    relatedIdMono=saveRelatedNode(relatedNode,relationshipContext.getAssociationTargetType(),targetEntity);
  }
  stateMachine.markValueAsProcessed(relatedValueToStore);
  return relatedIdMono.flatMap(relatedInternalId -> {
    PersistentPropertyAccessor<?> targetPropertyAccessor=targetEntity.getPropertyAccessor(relatedNode);
    if (targetEntity.isUsingInternalIds()) {
      targetPropertyAccessor.setProperty(targetEntity.getRequiredIdProperty(),relatedInternalId);
    }
    CreateRelationshipStatementHolder statementHolder=neo4jMappingContext.createStatement(sourceEntity,relationshipContext,relatedValueToStore);
    Mono<Long> relationshipCreationMonoNested=neo4jClient.query(renderer.render(statementHolder.getStatement())).bind(convertIdValues(sourceEntity.getRequiredIdProperty(),fromId)).to(Constants.FROM_ID_PARAMETER_NAME).bind(relatedInternalId).to(Constants.TO_ID_PARAMETER_NAME).bindAll(statementHolder.getProperties()).fetchAs(Long.class).one().doOnNext(relationshipInternalId -> {
      if (idProperty != null) {
        relationshipContext.getRelationshipPropertiesPropertyAccessor(relatedValueToStore).setProperty(idProperty,relationshipInternalId);
      }
    }
);
    if (processState != ProcessState.PROCESSED_ALL_VALUES) {
      return relationshipCreationMonoNested.checkpoint().then(processNestedRelations(targetEntity,targetPropertyAccessor.getBean(),isNew,stateMachine));
    }
 else {
      return relationshipCreationMonoNested.checkpoint().then();
    }
  }
).checkpoint();
}
) @AT@ 28741 @LENGTH@ 2300
------------------------UPD MethodInvocation@@Mono.just(targetEntity.isNew(relatedNode)).flatMap(isNew -> {
  Mono<Long> relatedIdMono;
  if (processState == ProcessState.PROCESSED_ALL_VALUES) {
    relatedIdMono=queryRelatedNode(relatedNode,targetEntity);
  }
 else {
    relatedIdMono=saveRelatedNode(relatedNode,relationshipContext.getAssociationTargetType(),targetEntity);
  }
  return relatedIdMono.flatMap(relatedInternalId -> {
    PersistentPropertyAccessor<?> targetPropertyAccessor=targetEntity.getPropertyAccessor(relatedNode);
    if (targetEntity.isUsingInternalIds()) {
      targetPropertyAccessor.setProperty(targetEntity.getRequiredIdProperty(),relatedInternalId);
    }
    CreateRelationshipStatementHolder statementHolder=neo4jMappingContext.createStatement(sourceEntity,relationshipContext,relatedValueToStore);
    Mono<Long> relationshipCreationMonoNested=neo4jClient.query(renderer.render(statementHolder.getStatement())).bind(convertIdValues(sourceEntity.getRequiredIdProperty(),fromId)).to(Constants.FROM_ID_PARAMETER_NAME).bind(relatedInternalId).to(Constants.TO_ID_PARAMETER_NAME).bindAll(statementHolder.getProperties()).fetchAs(Long.class).one().doOnNext(relationshipInternalId -> {
      if (idProperty != null) {
        relationshipContext.getRelationshipPropertiesPropertyAccessor(relatedValueToStore).setProperty(idProperty,relationshipInternalId);
      }
    }
);
    if (processState != ProcessState.PROCESSED_ALL_VALUES) {
      return relationshipCreationMonoNested.checkpoint().then(processNestedRelations(targetEntity,targetPropertyAccessor.getBean(),isNew,stateMachine));
    }
 else {
      return relationshipCreationMonoNested.checkpoint().then();
    }
  }
).checkpoint();
}
) @TO@ Mono.just(targetEntity.isNew(relatedNode)).flatMap(isNew -> {
  Mono<Long> relatedIdMono;
  if (stateMachine.hasProcessedValue(relatedValueToStore)) {
    relatedIdMono=queryRelatedNode(relatedNode,targetEntity);
  }
 else {
    relatedIdMono=saveRelatedNode(relatedNode,relationshipContext.getAssociationTargetType(),targetEntity);
  }
  stateMachine.markValueAsProcessed(relatedValueToStore);
  return relatedIdMono.flatMap(relatedInternalId -> {
    PersistentPropertyAccessor<?> targetPropertyAccessor=targetEntity.getPropertyAccessor(relatedNode);
    if (targetEntity.isUsingInternalIds()) {
      targetPropertyAccessor.setProperty(targetEntity.getRequiredIdProperty(),relatedInternalId);
    }
    CreateRelationshipStatementHolder statementHolder=neo4jMappingContext.createStatement(sourceEntity,relationshipContext,relatedValueToStore);
    Mono<Long> relationshipCreationMonoNested=neo4jClient.query(renderer.render(statementHolder.getStatement())).bind(convertIdValues(sourceEntity.getRequiredIdProperty(),fromId)).to(Constants.FROM_ID_PARAMETER_NAME).bind(relatedInternalId).to(Constants.TO_ID_PARAMETER_NAME).bindAll(statementHolder.getProperties()).fetchAs(Long.class).one().doOnNext(relationshipInternalId -> {
      if (idProperty != null) {
        relationshipContext.getRelationshipPropertiesPropertyAccessor(relatedValueToStore).setProperty(idProperty,relationshipInternalId);
      }
    }
);
    if (processState != ProcessState.PROCESSED_ALL_VALUES) {
      return relationshipCreationMonoNested.checkpoint().then(processNestedRelations(targetEntity,targetPropertyAccessor.getBean(),isNew,stateMachine));
    }
 else {
      return relationshipCreationMonoNested.checkpoint().then();
    }
  }
).checkpoint();
}
) @AT@ 28748 @LENGTH@ 2292
---------------------------UPD SimpleName@@MethodName:flatMap:[isNew -> {
  Mono<Long> relatedIdMono;
  if (processState == ProcessState.PROCESSED_ALL_VALUES) {
    relatedIdMono=queryRelatedNode(relatedNode,targetEntity);
  }
 else {
    relatedIdMono=saveRelatedNode(relatedNode,relationshipContext.getAssociationTargetType(),targetEntity);
  }
  return relatedIdMono.flatMap(relatedInternalId -> {
    PersistentPropertyAccessor<?> targetPropertyAccessor=targetEntity.getPropertyAccessor(relatedNode);
    if (targetEntity.isUsingInternalIds()) {
      targetPropertyAccessor.setProperty(targetEntity.getRequiredIdProperty(),relatedInternalId);
    }
    CreateRelationshipStatementHolder statementHolder=neo4jMappingContext.createStatement(sourceEntity,relationshipContext,relatedValueToStore);
    Mono<Long> relationshipCreationMonoNested=neo4jClient.query(renderer.render(statementHolder.getStatement())).bind(convertIdValues(sourceEntity.getRequiredIdProperty(),fromId)).to(Constants.FROM_ID_PARAMETER_NAME).bind(relatedInternalId).to(Constants.TO_ID_PARAMETER_NAME).bindAll(statementHolder.getProperties()).fetchAs(Long.class).one().doOnNext(relationshipInternalId -> {
      if (idProperty != null) {
        relationshipContext.getRelationshipPropertiesPropertyAccessor(relatedValueToStore).setProperty(idProperty,relationshipInternalId);
      }
    }
);
    if (processState != ProcessState.PROCESSED_ALL_VALUES) {
      return relationshipCreationMonoNested.checkpoint().then(processNestedRelations(targetEntity,targetPropertyAccessor.getBean(),isNew,stateMachine));
    }
 else {
      return relationshipCreationMonoNested.checkpoint().then();
    }
  }
).checkpoint();
}
] @TO@ MethodName:flatMap:[isNew -> {
  Mono<Long> relatedIdMono;
  if (stateMachine.hasProcessedValue(relatedValueToStore)) {
    relatedIdMono=queryRelatedNode(relatedNode,targetEntity);
  }
 else {
    relatedIdMono=saveRelatedNode(relatedNode,relationshipContext.getAssociationTargetType(),targetEntity);
  }
  stateMachine.markValueAsProcessed(relatedValueToStore);
  return relatedIdMono.flatMap(relatedInternalId -> {
    PersistentPropertyAccessor<?> targetPropertyAccessor=targetEntity.getPropertyAccessor(relatedNode);
    if (targetEntity.isUsingInternalIds()) {
      targetPropertyAccessor.setProperty(targetEntity.getRequiredIdProperty(),relatedInternalId);
    }
    CreateRelationshipStatementHolder statementHolder=neo4jMappingContext.createStatement(sourceEntity,relationshipContext,relatedValueToStore);
    Mono<Long> relationshipCreationMonoNested=neo4jClient.query(renderer.render(statementHolder.getStatement())).bind(convertIdValues(sourceEntity.getRequiredIdProperty(),fromId)).to(Constants.FROM_ID_PARAMETER_NAME).bind(relatedInternalId).to(Constants.TO_ID_PARAMETER_NAME).bindAll(statementHolder.getProperties()).fetchAs(Long.class).one().doOnNext(relationshipInternalId -> {
      if (idProperty != null) {
        relationshipContext.getRelationshipPropertiesPropertyAccessor(relatedValueToStore).setProperty(idProperty,relationshipInternalId);
      }
    }
);
    if (processState != ProcessState.PROCESSED_ALL_VALUES) {
      return relationshipCreationMonoNested.checkpoint().then(processNestedRelations(targetEntity,targetPropertyAccessor.getBean(),isNew,stateMachine));
    }
 else {
      return relationshipCreationMonoNested.checkpoint().then();
    }
  }
).checkpoint();
}
] @AT@ 28791 @LENGTH@ 2249
------------------------------UPD LambdaExpression@@isNew -> {
  Mono<Long> relatedIdMono;
  if (processState == ProcessState.PROCESSED_ALL_VALUES) {
    relatedIdMono=queryRelatedNode(relatedNode,targetEntity);
  }
 else {
    relatedIdMono=saveRelatedNode(relatedNode,relationshipContext.getAssociationTargetType(),targetEntity);
  }
  return relatedIdMono.flatMap(relatedInternalId -> {
    PersistentPropertyAccessor<?> targetPropertyAccessor=targetEntity.getPropertyAccessor(relatedNode);
    if (targetEntity.isUsingInternalIds()) {
      targetPropertyAccessor.setProperty(targetEntity.getRequiredIdProperty(),relatedInternalId);
    }
    CreateRelationshipStatementHolder statementHolder=neo4jMappingContext.createStatement(sourceEntity,relationshipContext,relatedValueToStore);
    Mono<Long> relationshipCreationMonoNested=neo4jClient.query(renderer.render(statementHolder.getStatement())).bind(convertIdValues(sourceEntity.getRequiredIdProperty(),fromId)).to(Constants.FROM_ID_PARAMETER_NAME).bind(relatedInternalId).to(Constants.TO_ID_PARAMETER_NAME).bindAll(statementHolder.getProperties()).fetchAs(Long.class).one().doOnNext(relationshipInternalId -> {
      if (idProperty != null) {
        relationshipContext.getRelationshipPropertiesPropertyAccessor(relatedValueToStore).setProperty(idProperty,relationshipInternalId);
      }
    }
);
    if (processState != ProcessState.PROCESSED_ALL_VALUES) {
      return relationshipCreationMonoNested.checkpoint().then(processNestedRelations(targetEntity,targetPropertyAccessor.getBean(),isNew,stateMachine));
    }
 else {
      return relationshipCreationMonoNested.checkpoint().then();
    }
  }
).checkpoint();
}
 @TO@ isNew -> {
  Mono<Long> relatedIdMono;
  if (stateMachine.hasProcessedValue(relatedValueToStore)) {
    relatedIdMono=queryRelatedNode(relatedNode,targetEntity);
  }
 else {
    relatedIdMono=saveRelatedNode(relatedNode,relationshipContext.getAssociationTargetType(),targetEntity);
  }
  stateMachine.markValueAsProcessed(relatedValueToStore);
  return relatedIdMono.flatMap(relatedInternalId -> {
    PersistentPropertyAccessor<?> targetPropertyAccessor=targetEntity.getPropertyAccessor(relatedNode);
    if (targetEntity.isUsingInternalIds()) {
      targetPropertyAccessor.setProperty(targetEntity.getRequiredIdProperty(),relatedInternalId);
    }
    CreateRelationshipStatementHolder statementHolder=neo4jMappingContext.createStatement(sourceEntity,relationshipContext,relatedValueToStore);
    Mono<Long> relationshipCreationMonoNested=neo4jClient.query(renderer.render(statementHolder.getStatement())).bind(convertIdValues(sourceEntity.getRequiredIdProperty(),fromId)).to(Constants.FROM_ID_PARAMETER_NAME).bind(relatedInternalId).to(Constants.TO_ID_PARAMETER_NAME).bindAll(statementHolder.getProperties()).fetchAs(Long.class).one().doOnNext(relationshipInternalId -> {
      if (idProperty != null) {
        relationshipContext.getRelationshipPropertiesPropertyAccessor(relatedValueToStore).setProperty(idProperty,relationshipInternalId);
      }
    }
);
    if (processState != ProcessState.PROCESSED_ALL_VALUES) {
      return relationshipCreationMonoNested.checkpoint().then(processNestedRelations(targetEntity,targetPropertyAccessor.getBean(),isNew,stateMachine));
    }
 else {
      return relationshipCreationMonoNested.checkpoint().then();
    }
  }
).checkpoint();
}
 @AT@ 28799 @LENGTH@ 2240
---------------------------------UPD IfStatement@@if (processState == ProcessState.PROCESSED_ALL_VALUES) {  relatedIdMono=queryRelatedNode(relatedNode,targetEntity);} else {  relatedIdMono=saveRelatedNode(relatedNode,relationshipContext.getAssociationTargetType(),targetEntity);} @TO@ if (stateMachine.hasProcessedValue(relatedValueToStore)) {  relatedIdMono=queryRelatedNode(relatedNode,targetEntity);} else {  relatedIdMono=saveRelatedNode(relatedNode,relationshipContext.getAssociationTargetType(),targetEntity);} @AT@ 28855 @LENGTH@ 286
------------------------------------DEL InfixExpression@@processState == ProcessState.PROCESSED_ALL_VALUES @AT@ 28859 @LENGTH@ 49
---------------------------------------DEL SimpleName@@processState @AT@ 28859 @LENGTH@ 12
---------------------------------------DEL Operator@@== @AT@ 28871 @LENGTH@ 2
---------------------------------------DEL QualifiedName@@ProcessState.PROCESSED_ALL_VALUES @AT@ 28875 @LENGTH@ 33
------------------------------------------DEL SimpleName@@ProcessState @AT@ 28875 @LENGTH@ 12
------------------------------------------DEL SimpleName@@PROCESSED_ALL_VALUES @AT@ 28888 @LENGTH@ 20
------------------------------------INS MethodInvocation@@stateMachine.hasProcessedValue(relatedValueToStore) @TO@ IfStatement@@if (processState == ProcessState.PROCESSED_ALL_VALUES) {  relatedIdMono=queryRelatedNode(relatedNode,targetEntity);} else {  relatedIdMono=saveRelatedNode(relatedNode,relationshipContext.getAssociationTargetType(),targetEntity);} @AT@ 28999 @LENGTH@ 51
---------------------------------------INS SimpleName@@Name:stateMachine @TO@ MethodInvocation@@stateMachine.hasProcessedValue(relatedValueToStore) @AT@ 28999 @LENGTH@ 12
---------------------------------------INS SimpleName@@MethodName:hasProcessedValue:[relatedValueToStore] @TO@ MethodInvocation@@stateMachine.hasProcessedValue(relatedValueToStore) @AT@ 29012 @LENGTH@ 38
------------------------------------------INS SimpleName@@relatedValueToStore @TO@ SimpleName@@MethodName:hasProcessedValue:[relatedValueToStore] @AT@ 29030 @LENGTH@ 19
---------------------------------INS ExpressionStatement@@MethodInvocation:stateMachine.markValueAsProcessed(relatedValueToStore) @TO@ LambdaExpression@@isNew -> {
  Mono<Long> relatedIdMono;
  if (processState == ProcessState.PROCESSED_ALL_VALUES) {
    relatedIdMono=queryRelatedNode(relatedNode,targetEntity);
  }
 else {
    relatedIdMono=saveRelatedNode(relatedNode,relationshipContext.getAssociationTargetType(),targetEntity);
  }
  return relatedIdMono.flatMap(relatedInternalId -> {
    PersistentPropertyAccessor<?> targetPropertyAccessor=targetEntity.getPropertyAccessor(relatedNode);
    if (targetEntity.isUsingInternalIds()) {
      targetPropertyAccessor.setProperty(targetEntity.getRequiredIdProperty(),relatedInternalId);
    }
    CreateRelationshipStatementHolder statementHolder=neo4jMappingContext.createStatement(sourceEntity,relationshipContext,relatedValueToStore);
    Mono<Long> relationshipCreationMonoNested=neo4jClient.query(renderer.render(statementHolder.getStatement())).bind(convertIdValues(sourceEntity.getRequiredIdProperty(),fromId)).to(Constants.FROM_ID_PARAMETER_NAME).bind(relatedInternalId).to(Constants.TO_ID_PARAMETER_NAME).bindAll(statementHolder.getProperties()).fetchAs(Long.class).one().doOnNext(relationshipInternalId -> {
      if (idProperty != null) {
        relationshipContext.getRelationshipPropertiesPropertyAccessor(relatedValueToStore).setProperty(idProperty,relationshipInternalId);
      }
    }
);
    if (processState != ProcessState.PROCESSED_ALL_VALUES) {
      return relationshipCreationMonoNested.checkpoint().then(processNestedRelations(targetEntity,targetPropertyAccessor.getBean(),isNew,stateMachine));
    }
 else {
      return relationshipCreationMonoNested.checkpoint().then();
    }
  }
).checkpoint();
}
 @AT@ 29293 @LENGTH@ 55
------------------------------------INS MethodInvocation@@stateMachine.markValueAsProcessed(relatedValueToStore) @TO@ ExpressionStatement@@MethodInvocation:stateMachine.markValueAsProcessed(relatedValueToStore) @AT@ 29293 @LENGTH@ 54
---------------------------------------INS SimpleName@@Name:stateMachine @TO@ MethodInvocation@@stateMachine.markValueAsProcessed(relatedValueToStore) @AT@ 29293 @LENGTH@ 12
---------------------------------------INS SimpleName@@MethodName:markValueAsProcessed:[relatedValueToStore] @TO@ MethodInvocation@@stateMachine.markValueAsProcessed(relatedValueToStore) @AT@ 29306 @LENGTH@ 41
------------------------------------------INS SimpleName@@relatedValueToStore @TO@ SimpleName@@MethodName:markValueAsProcessed:[relatedValueToStore] @AT@ 29327 @LENGTH@ 19


UPD ExpressionStatement@@MethodInvocation:buffer.append(str,off,len) @TO@ MethodInvocation:buffer.append(str,off,off + len) @AT@ 7049 @LENGTH@ 29
---UPD MethodInvocation@@buffer.append(str,off,len) @TO@ buffer.append(str,off,off + len) @AT@ 7049 @LENGTH@ 28
------UPD SimpleName@@MethodName:append:[str, off, len] @TO@ MethodName:append:[str, off, off + len] @AT@ 7056 @LENGTH@ 21
---------DEL SimpleName@@len @AT@ 7073 @LENGTH@ 3
---------INS InfixExpression@@off + len @TO@ SimpleName@@MethodName:append:[str, off, len] @AT@ 7099 @LENGTH@ 9
------------INS SimpleName@@off @TO@ InfixExpression@@off + len @AT@ 7099 @LENGTH@ 3
------------INS Operator@@+ @TO@ InfixExpression@@off + len @AT@ 7102 @LENGTH@ 1
------------INS SimpleName@@len @TO@ InfixExpression@@off + len @AT@ 7105 @LENGTH@ 3


DEL FieldDeclaration@@final, static, Statement, [STATEMENT=createStatement()] @AT@ 1311 @LENGTH@ 53
---DEL Modifier@@final @AT@ 1311 @LENGTH@ 5
---DEL Modifier@@static @AT@ 1317 @LENGTH@ 6
---DEL SimpleType@@Statement @AT@ 1324 @LENGTH@ 9
---DEL VariableDeclarationFragment@@STATEMENT=createStatement() @AT@ 1334 @LENGTH@ 29
------DEL SimpleName@@STATEMENT @AT@ 1334 @LENGTH@ 9
------DEL MethodInvocation@@MethodName:createStatement:[] @AT@ 1346 @LENGTH@ 17


UPD ReturnStatement@@InfixExpression:bounds == null || bounds.length == 0 || (bounds.length == 1 && Object.class == bounds[0]) @TO@ InfixExpression:bounds == null || bounds.length == 0 || bounds.length == 1 && Object.class == bounds[0] @AT@ 14232 @LENGTH@ 97
---UPD InfixExpression@@bounds == null || bounds.length == 0 || (bounds.length == 1 && Object.class == bounds[0]) @TO@ bounds == null || bounds.length == 0 || bounds.length == 1 && Object.class == bounds[0] @AT@ 14239 @LENGTH@ 89
------DEL ParenthesizedExpression@@(bounds.length == 1 && Object.class == bounds[0]) @AT@ 14279 @LENGTH@ 49
------MOV InfixExpression@@bounds.length == 1 && Object.class == bounds[0] @TO@ InfixExpression@@bounds == null || bounds.length == 0 || (bounds.length == 1 && Object.class == bounds[0]) @AT@ 14280 @LENGTH@ 47


INS ExpressionStatement@@Assignment:doc+="\n\n@return the dsl builder\n" @TO@ MethodDeclaration@@private, void, MethodName:setDslEntryMethod, final String innerBuilderInterfaceName, final String innerBuilderImplName,  @AT@ 6023 @LENGTH@ 39
---INS Assignment@@doc+="\n\n@return the dsl builder\n" @TO@ ExpressionStatement@@Assignment:doc+="\n\n@return the dsl builder\n" @AT@ 6023 @LENGTH@ 38
------INS SimpleName@@doc @TO@ Assignment@@doc+="\n\n@return the dsl builder\n" @AT@ 6023 @LENGTH@ 3
------INS Operator@@+= @TO@ Assignment@@doc+="\n\n@return the dsl builder\n" @AT@ 6026 @LENGTH@ 2
------INS StringLiteral@@"\n\n@return the dsl builder\n" @TO@ Assignment@@doc+="\n\n@return the dsl builder\n" @AT@ 6030 @LENGTH@ 31


INS TypeDeclaration@@BidirectionalSameEntityRepository, [Neo4jRepository<BidirectionalSameEntity,String>] @TO@ TypeDeclaration@@[@ExtendWith(Neo4jExtension.class), @SpringJUnitConfig, @DirtiesContext]RepositoryIT,  @AT@ 149718 @LENGTH@ 93
---INS SimpleName@@ClassName:BidirectionalSameEntityRepository @TO@ TypeDeclaration@@BidirectionalSameEntityRepository, [Neo4jRepository<BidirectionalSameEntity,String>] @AT@ 149718 @LENGTH@ 33
---INS ParameterizedType@@Neo4jRepository<BidirectionalSameEntity,String> @TO@ TypeDeclaration@@BidirectionalSameEntityRepository, [Neo4jRepository<BidirectionalSameEntity,String>] @AT@ 149760 @LENGTH@ 48
------INS SimpleType@@Neo4jRepository @TO@ ParameterizedType@@Neo4jRepository<BidirectionalSameEntity,String> @AT@ 149760 @LENGTH@ 15
------INS SimpleType@@BidirectionalSameEntity @TO@ ParameterizedType@@Neo4jRepository<BidirectionalSameEntity,String> @AT@ 149776 @LENGTH@ 23
------INS SimpleType@@String @TO@ ParameterizedType@@Neo4jRepository<BidirectionalSameEntity,String> @AT@ 149801 @LENGTH@ 6


UPD VariableDeclarationStatement@@RelationshipDescription relationship=neo4jPersistentEntity.getRelationships().stream().filter(r -> r.getFieldName().equals(inverse.getName())).findFirst().get(); @TO@ RelationshipDescription relationship=neo4jPersistentEntity.getRelationshipsInHierarchy(s -> true).stream().filter(r -> r.getFieldName().equals(inverse.getName())).findFirst().get(); @AT@ 4748 @LENGTH@ 168
---UPD VariableDeclarationFragment@@relationship=neo4jPersistentEntity.getRelationships().stream().filter(r -> r.getFieldName().equals(inverse.getName())).findFirst().get() @TO@ relationship=neo4jPersistentEntity.getRelationshipsInHierarchy(s -> true).stream().filter(r -> r.getFieldName().equals(inverse.getName())).findFirst().get() @AT@ 4772 @LENGTH@ 143
------UPD MethodInvocation@@neo4jPersistentEntity.getRelationships().stream().filter(r -> r.getFieldName().equals(inverse.getName())).findFirst().get() @TO@ neo4jPersistentEntity.getRelationshipsInHierarchy(s -> true).stream().filter(r -> r.getFieldName().equals(inverse.getName())).findFirst().get() @AT@ 4787 @LENGTH@ 128
---------UPD MethodInvocation@@MethodName:getRelationships:[] @TO@ MethodName:getRelationshipsInHierarchy:[s -> true] @AT@ 4787 @LENGTH@ 40
------------INS LambdaExpression@@s -> true @TO@ MethodInvocation@@MethodName:getRelationships:[] @AT@ 4837 @LENGTH@ 9
---------------INS VariableDeclarationFragment@@s @TO@ LambdaExpression@@s -> true @AT@ 4837 @LENGTH@ 1
------------------INS SimpleName@@s @TO@ VariableDeclarationFragment@@s @AT@ 4837 @LENGTH@ 1
---------------INS BooleanLiteral@@true @TO@ LambdaExpression@@s -> true @AT@ 4842 @LENGTH@ 4


INS ExpressionStatement@@Assignment:doc=JavadocHelper.xmlEncode(doc) @TO@ MethodDeclaration@@private, void, MethodName:setJavaDoc,  @AT@ 4865 @LENGTH@ 35
---INS Assignment@@doc=JavadocHelper.xmlEncode(doc) @TO@ ExpressionStatement@@Assignment:doc=JavadocHelper.xmlEncode(doc) @AT@ 4865 @LENGTH@ 34
------INS SimpleName@@doc @TO@ Assignment@@doc=JavadocHelper.xmlEncode(doc) @AT@ 4865 @LENGTH@ 3
------INS Operator@@= @TO@ Assignment@@doc=JavadocHelper.xmlEncode(doc) @AT@ 4868 @LENGTH@ 1
------INS MethodInvocation@@JavadocHelper.xmlEncode(doc) @TO@ Assignment@@doc=JavadocHelper.xmlEncode(doc) @AT@ 4871 @LENGTH@ 28
---------INS SimpleName@@Name:JavadocHelper @TO@ MethodInvocation@@JavadocHelper.xmlEncode(doc) @AT@ 4871 @LENGTH@ 13
---------INS SimpleName@@MethodName:xmlEncode:[doc] @TO@ MethodInvocation@@JavadocHelper.xmlEncode(doc) @AT@ 4885 @LENGTH@ 14
------------INS SimpleName@@doc @TO@ SimpleName@@MethodName:xmlEncode:[doc] @AT@ 4895 @LENGTH@ 3


UPD LambdaExpression@@componentOptionModel -> {
  final Method method=javaClass.addMethod();
  method.setDefault().setReturnType(getGeneratedInterfaceName()).setName(StringUtils.uncapitalize(componentOptionModel.getName())).addParameter(componentOptionModel.getJavaType(),componentOptionModel.getName()).setBody(String.format("doSetProperty(\"%s\", %s);",componentOptionModel.getName(),componentOptionModel.getName()),"return this;");
  if (componentOptionModel.isDeprecated()) {
    method.addAnnotation(Deprecated.class);
  }
  method.getJavaDoc().setText(generateOptionDescription(componentOptionModel));
}
 @TO@ componentOptionModel -> {
  final Method method=javaClass.addMethod();
  method.setDefault().setReturnType(getGeneratedInterfaceName()).setName(StringUtils.uncapitalize(componentOptionModel.getName())).addParameter(componentOptionModel.getJavaType(),componentOptionModel.getName()).setBody(String.format("doSetProperty(\"%s\", %s);",componentOptionModel.getName(),componentOptionModel.getName()),"return this;");
  if (componentOptionModel.isDeprecated()) {
    method.addAnnotation(Deprecated.class);
  }
  String doc=generateOptionDescription(componentOptionModel);
  doc=JavadocHelper.xmlEncode(doc);
  doc+="\n\n@param " + componentOptionModel.getName() + " the value to set";
  doc+="\n@return the dsl builder\n";
  method.getJavaDoc().setText(doc);
}
 @AT@ 3099 @LENGTH@ 775
---UPD ExpressionStatement@@MethodInvocation:method.getJavaDoc().setText(generateOptionDescription(componentOptionModel)) @TO@ MethodInvocation:method.getJavaDoc().setText(doc) @AT@ 3787 @LENGTH@ 77
------UPD MethodInvocation@@method.getJavaDoc().setText(generateOptionDescription(componentOptionModel)) @TO@ method.getJavaDoc().setText(doc) @AT@ 3787 @LENGTH@ 76
---------UPD SimpleName@@MethodName:setText:[generateOptionDescription(componentOptionModel)] @TO@ MethodName:setText:[doc] @AT@ 3807 @LENGTH@ 56
------------INS SimpleName@@doc @TO@ SimpleName@@MethodName:setText:[generateOptionDescription(componentOptionModel)] @AT@ 4076 @LENGTH@ 3
---INS VariableDeclarationStatement@@String doc=generateOptionDescription(componentOptionModel); @TO@ LambdaExpression@@componentOptionModel -> {
  final Method method=javaClass.addMethod();
  method.setDefault().setReturnType(getGeneratedInterfaceName()).setName(StringUtils.uncapitalize(componentOptionModel.getName())).addParameter(componentOptionModel.getJavaType(),componentOptionModel.getName()).setBody(String.format("doSetProperty(\"%s\", %s);",componentOptionModel.getName(),componentOptionModel.getName()),"return this;");
  if (componentOptionModel.isDeprecated()) {
    method.addAnnotation(Deprecated.class);
  }
  method.getJavaDoc().setText(generateOptionDescription(componentOptionModel));
}
 @AT@ 3787 @LENGTH@ 61
------INS SimpleType@@String @TO@ VariableDeclarationStatement@@String doc=generateOptionDescription(componentOptionModel); @AT@ 3787 @LENGTH@ 6
------INS VariableDeclarationFragment@@doc=generateOptionDescription(componentOptionModel) @TO@ VariableDeclarationStatement@@String doc=generateOptionDescription(componentOptionModel); @AT@ 3794 @LENGTH@ 53
---------INS SimpleName@@doc @TO@ VariableDeclarationFragment@@doc=generateOptionDescription(componentOptionModel) @AT@ 3794 @LENGTH@ 3
---------MOV MethodInvocation@@generateOptionDescription(componentOptionModel) @TO@ VariableDeclarationFragment@@doc=generateOptionDescription(componentOptionModel) @AT@ 3815 @LENGTH@ 47
---INS ExpressionStatement@@Assignment:doc=JavadocHelper.xmlEncode(doc) @TO@ LambdaExpression@@componentOptionModel -> {
  final Method method=javaClass.addMethod();
  method.setDefault().setReturnType(getGeneratedInterfaceName()).setName(StringUtils.uncapitalize(componentOptionModel.getName())).addParameter(componentOptionModel.getJavaType(),componentOptionModel.getName()).setBody(String.format("doSetProperty(\"%s\", %s);",componentOptionModel.getName(),componentOptionModel.getName()),"return this;");
  if (componentOptionModel.isDeprecated()) {
    method.addAnnotation(Deprecated.class);
  }
  method.getJavaDoc().setText(generateOptionDescription(componentOptionModel));
}
 @AT@ 3861 @LENGTH@ 35
------INS Assignment@@doc=JavadocHelper.xmlEncode(doc) @TO@ ExpressionStatement@@Assignment:doc=JavadocHelper.xmlEncode(doc) @AT@ 3861 @LENGTH@ 34
---------INS SimpleName@@doc @TO@ Assignment@@doc=JavadocHelper.xmlEncode(doc) @AT@ 3861 @LENGTH@ 3
---------INS Operator@@= @TO@ Assignment@@doc=JavadocHelper.xmlEncode(doc) @AT@ 3864 @LENGTH@ 1
---------INS MethodInvocation@@JavadocHelper.xmlEncode(doc) @TO@ Assignment@@doc=JavadocHelper.xmlEncode(doc) @AT@ 3867 @LENGTH@ 28
------------INS SimpleName@@Name:JavadocHelper @TO@ MethodInvocation@@JavadocHelper.xmlEncode(doc) @AT@ 3867 @LENGTH@ 13
------------INS SimpleName@@MethodName:xmlEncode:[doc] @TO@ MethodInvocation@@JavadocHelper.xmlEncode(doc) @AT@ 3881 @LENGTH@ 14
---------------INS SimpleName@@doc @TO@ SimpleName@@MethodName:xmlEncode:[doc] @AT@ 3891 @LENGTH@ 3
---INS ExpressionStatement@@Assignment:doc+="\n\n@param " + componentOptionModel.getName() + " the value to set" @TO@ LambdaExpression@@componentOptionModel -> {
  final Method method=javaClass.addMethod();
  method.setDefault().setReturnType(getGeneratedInterfaceName()).setName(StringUtils.uncapitalize(componentOptionModel.getName())).addParameter(componentOptionModel.getJavaType(),componentOptionModel.getName()).setBody(String.format("doSetProperty(\"%s\", %s);",componentOptionModel.getName(),componentOptionModel.getName()),"return this;");
  if (componentOptionModel.isDeprecated()) {
    method.addAnnotation(Deprecated.class);
  }
  method.getJavaDoc().setText(generateOptionDescription(componentOptionModel));
}
 @AT@ 3909 @LENGTH@ 76
------INS Assignment@@doc+="\n\n@param " + componentOptionModel.getName() + " the value to set" @TO@ ExpressionStatement@@Assignment:doc+="\n\n@param " + componentOptionModel.getName() + " the value to set" @AT@ 3909 @LENGTH@ 75
---------INS SimpleName@@doc @TO@ Assignment@@doc+="\n\n@param " + componentOptionModel.getName() + " the value to set" @AT@ 3909 @LENGTH@ 3
---------INS Operator@@+= @TO@ Assignment@@doc+="\n\n@param " + componentOptionModel.getName() + " the value to set" @AT@ 3912 @LENGTH@ 2
---------INS InfixExpression@@"\n\n@param " + componentOptionModel.getName() + " the value to set" @TO@ Assignment@@doc+="\n\n@param " + componentOptionModel.getName() + " the value to set" @AT@ 3916 @LENGTH@ 68
------------INS StringLiteral@@"\n\n@param " @TO@ InfixExpression@@"\n\n@param " + componentOptionModel.getName() + " the value to set" @AT@ 3916 @LENGTH@ 13
------------INS Operator@@+ @TO@ InfixExpression@@"\n\n@param " + componentOptionModel.getName() + " the value to set" @AT@ 3929 @LENGTH@ 1
------------INS MethodInvocation@@componentOptionModel.getName() @TO@ InfixExpression@@"\n\n@param " + componentOptionModel.getName() + " the value to set" @AT@ 3932 @LENGTH@ 30
---------------INS SimpleName@@Name:componentOptionModel @TO@ MethodInvocation@@componentOptionModel.getName() @AT@ 3932 @LENGTH@ 20
---------------INS SimpleName@@MethodName:getName:[] @TO@ MethodInvocation@@componentOptionModel.getName() @AT@ 3953 @LENGTH@ 9
------------INS StringLiteral@@" the value to set" @TO@ InfixExpression@@"\n\n@param " + componentOptionModel.getName() + " the value to set" @AT@ 3965 @LENGTH@ 19
---INS ExpressionStatement@@Assignment:doc+="\n@return the dsl builder\n" @TO@ LambdaExpression@@componentOptionModel -> {
  final Method method=javaClass.addMethod();
  method.setDefault().setReturnType(getGeneratedInterfaceName()).setName(StringUtils.uncapitalize(componentOptionModel.getName())).addParameter(componentOptionModel.getJavaType(),componentOptionModel.getName()).setBody(String.format("doSetProperty(\"%s\", %s);",componentOptionModel.getName(),componentOptionModel.getName()),"return this;");
  if (componentOptionModel.isDeprecated()) {
    method.addAnnotation(Deprecated.class);
  }
  method.getJavaDoc().setText(generateOptionDescription(componentOptionModel));
}
 @AT@ 3998 @LENGTH@ 37
------INS Assignment@@doc+="\n@return the dsl builder\n" @TO@ ExpressionStatement@@Assignment:doc+="\n@return the dsl builder\n" @AT@ 3998 @LENGTH@ 36
---------INS SimpleName@@doc @TO@ Assignment@@doc+="\n@return the dsl builder\n" @AT@ 3998 @LENGTH@ 3
---------INS Operator@@+= @TO@ Assignment@@doc+="\n@return the dsl builder\n" @AT@ 4001 @LENGTH@ 2
---------INS StringLiteral@@"\n@return the dsl builder\n" @TO@ Assignment@@doc+="\n@return the dsl builder\n" @AT@ 4005 @LENGTH@ 29


UPD CatchClause@@catch (IOException|TimeoutException e) {  throw RabbitExceptionTranslator.convertRabbitAccessException(e);} @TO@ catch (IOException|TimeoutException ex) {  RuntimeException converted=RabbitExceptionTranslator.convertRabbitAccessException(ex);  this.connectionListener.onFailed(ex);  throw converted;} @AT@ 19417 @LENGTH@ 114
---UPD SingleVariableDeclaration@@IOException|TimeoutException e @TO@ IOException|TimeoutException ex @AT@ 19424 @LENGTH@ 32
------UPD SimpleName@@e @TO@ ex @AT@ 19455 @LENGTH@ 1
---DEL ThrowStatement@@MethodInvocation:RabbitExceptionTranslator.convertRabbitAccessException(e) @AT@ 19463 @LENGTH@ 64
------DEL MethodInvocation@@RabbitExceptionTranslator.convertRabbitAccessException(e) @AT@ 19469 @LENGTH@ 57
---INS VariableDeclarationStatement@@RuntimeException converted=RabbitExceptionTranslator.convertRabbitAccessException(ex); @TO@ CatchClause@@catch (IOException|TimeoutException e) {  throw RabbitExceptionTranslator.convertRabbitAccessException(e);} @AT@ 19464 @LENGTH@ 88
------INS SimpleType@@RuntimeException @TO@ VariableDeclarationStatement@@RuntimeException converted=RabbitExceptionTranslator.convertRabbitAccessException(ex); @AT@ 19464 @LENGTH@ 16
------INS VariableDeclarationFragment@@converted=RabbitExceptionTranslator.convertRabbitAccessException(ex) @TO@ VariableDeclarationStatement@@RuntimeException converted=RabbitExceptionTranslator.convertRabbitAccessException(ex); @AT@ 19481 @LENGTH@ 70
---------INS SimpleName@@converted @TO@ VariableDeclarationFragment@@converted=RabbitExceptionTranslator.convertRabbitAccessException(ex) @AT@ 19481 @LENGTH@ 9
---------INS MethodInvocation@@RabbitExceptionTranslator.convertRabbitAccessException(ex) @TO@ VariableDeclarationFragment@@converted=RabbitExceptionTranslator.convertRabbitAccessException(ex) @AT@ 19493 @LENGTH@ 58
------------MOV SimpleName@@Name:RabbitExceptionTranslator @TO@ MethodInvocation@@RabbitExceptionTranslator.convertRabbitAccessException(ex) @AT@ 19469 @LENGTH@ 25
------------MOV SimpleName@@MethodName:convertRabbitAccessException:[e] @TO@ MethodInvocation@@RabbitExceptionTranslator.convertRabbitAccessException(ex) @AT@ 19495 @LENGTH@ 31
---INS ExpressionStatement@@MethodInvocation:this.connectionListener.onFailed(ex) @TO@ CatchClause@@catch (IOException|TimeoutException e) {  throw RabbitExceptionTranslator.convertRabbitAccessException(e);} @AT@ 19556 @LENGTH@ 37
------INS MethodInvocation@@this.connectionListener.onFailed(ex) @TO@ ExpressionStatement@@MethodInvocation:this.connectionListener.onFailed(ex) @AT@ 19556 @LENGTH@ 36
---------INS FieldAccess@@this.connectionListener @TO@ MethodInvocation@@this.connectionListener.onFailed(ex) @AT@ 19556 @LENGTH@ 23
------------INS ThisExpression@@this @TO@ FieldAccess@@this.connectionListener @AT@ 19556 @LENGTH@ 4
------------INS SimpleName@@connectionListener @TO@ FieldAccess@@this.connectionListener @AT@ 19561 @LENGTH@ 18
---------INS SimpleName@@MethodName:onFailed:[ex] @TO@ MethodInvocation@@this.connectionListener.onFailed(ex) @AT@ 19580 @LENGTH@ 12
------------INS SimpleName@@ex @TO@ SimpleName@@MethodName:onFailed:[ex] @AT@ 19589 @LENGTH@ 2
---INS ThrowStatement@@SimpleName:converted @TO@ CatchClause@@catch (IOException|TimeoutException e) {  throw RabbitExceptionTranslator.convertRabbitAccessException(e);} @AT@ 19597 @LENGTH@ 16
------INS SimpleName@@converted @TO@ ThrowStatement@@SimpleName:converted @AT@ 19603 @LENGTH@ 9


UPD EnhancedForStatement@@for (RelationshipDescription relationshipDescription : relationshipDescriptions) {  String relationshipType=relationshipDescription.getType();  if (relationshipTypes.contains(relationshipType)) {    continue;  }  if (relationshipDescription.isDynamic()) {    relationshipTypes.clear();    continue;  }  relationshipTypes.add(relationshipType);  collectAllRelationshipTypes(relationshipDescription.getTarget(),relationshipTypes);} @TO@ for (RelationshipDescription relationshipDescription : relationshipDescriptions) {  String relationshipType=relationshipDescription.getType();  if (relationshipDescription.isDynamic()) {    relationshipTypes.clear();    continue;  }  relationshipTypes.add(relationshipType);  collectAllRelationshipTypes(relationshipDescription.getTarget(),relationshipTypes,new HashSet<>(relationshipDescriptions));} @AT@ 23926 @LENGTH@ 452
---DEL IfStatement@@if (relationshipTypes.contains(relationshipType)) {  continue;} @AT@ 24076 @LENGTH@ 70
------DEL MethodInvocation@@relationshipTypes.contains(relationshipType) @AT@ 24080 @LENGTH@ 44
---------DEL SimpleName@@Name:relationshipTypes @AT@ 24080 @LENGTH@ 17
---------DEL SimpleName@@MethodName:contains:[relationshipType] @AT@ 24098 @LENGTH@ 26
------------DEL SimpleName@@relationshipType @AT@ 24107 @LENGTH@ 16
------DEL Block@@ThenBody:{  continue;} @AT@ 24126 @LENGTH@ 20
---------DEL ContinueStatement@@ @AT@ 24132 @LENGTH@ 9
---UPD ExpressionStatement@@MethodInvocation:collectAllRelationshipTypes(relationshipDescription.getTarget(),relationshipTypes) @TO@ MethodInvocation:collectAllRelationshipTypes(relationshipDescription.getTarget(),relationshipTypes,new HashSet<>(relationshipDescriptions)) @AT@ 24290 @LENGTH@ 84
------UPD MethodInvocation@@collectAllRelationshipTypes(relationshipDescription.getTarget(),relationshipTypes) @TO@ collectAllRelationshipTypes(relationshipDescription.getTarget(),relationshipTypes,new HashSet<>(relationshipDescriptions)) @AT@ 24290 @LENGTH@ 83
---------UPD SimpleName@@MethodName:collectAllRelationshipTypes:[relationshipDescription.getTarget(), relationshipTypes] @TO@ MethodName:collectAllRelationshipTypes:[relationshipDescription.getTarget(), relationshipTypes, new HashSet<>(relationshipDescriptions)] @AT@ 24290 @LENGTH@ 83
------------INS ClassInstanceCreation@@HashSet<>[relationshipDescriptions] @TO@ SimpleName@@MethodName:collectAllRelationshipTypes:[relationshipDescription.getTarget(), relationshipTypes] @AT@ 24300 @LENGTH@ 39
---------------INS New@@new @TO@ ClassInstanceCreation@@HashSet<>[relationshipDescriptions] @AT@ 24300 @LENGTH@ 3
---------------INS ParameterizedType@@HashSet<> @TO@ ClassInstanceCreation@@HashSet<>[relationshipDescriptions] @AT@ 24304 @LENGTH@ 9
------------------INS SimpleType@@HashSet @TO@ ParameterizedType@@HashSet<> @AT@ 24304 @LENGTH@ 7
---------------INS SimpleName@@relationshipDescriptions @TO@ ClassInstanceCreation@@HashSet<>[relationshipDescriptions] @AT@ 24314 @LENGTH@ 24


UPD ExpressionStatement@@MethodInvocation:LOG.warn("Error deleting temporary cache file: " + tempFile + ". This exception will be ignored.",e) @TO@ MethodInvocation:LOG.warn("Error deleting temporary cache file: {}. This exception will be ignored.",tempFile,e) @AT@ 7890 @LENGTH@ 183
---UPD MethodInvocation@@LOG.warn("Error deleting temporary cache file: " + tempFile + ". This exception will be ignored.",e) @TO@ LOG.warn("Error deleting temporary cache file: {}. This exception will be ignored.",tempFile,e) @AT@ 7890 @LENGTH@ 182
------UPD SimpleName@@MethodName:warn:["Error deleting temporary cache file: " + tempFile + ". This exception will be ignored.", e] @TO@ MethodName:warn:["Error deleting temporary cache file: {}. This exception will be ignored.", tempFile, e] @AT@ 7894 @LENGTH@ 178
---------DEL InfixExpression@@"Error deleting temporary cache file: " + tempFile + ". This exception will be ignored." @AT@ 7899 @LENGTH@ 129
------------DEL StringLiteral@@"Error deleting temporary cache file: " @AT@ 7899 @LENGTH@ 39
------------DEL Operator@@+ @AT@ 7938 @LENGTH@ 1
------------DEL SimpleName@@tempFile @AT@ 7941 @LENGTH@ 8
------------DEL StringLiteral@@". This exception will be ignored." @AT@ 7993 @LENGTH@ 35
---------INS StringLiteral@@"Error deleting temporary cache file: {}. This exception will be ignored." @TO@ SimpleName@@MethodName:warn:["Error deleting temporary cache file: " + tempFile + ". This exception will be ignored.", e] @AT@ 7899 @LENGTH@ 74
---------INS SimpleName@@tempFile @TO@ SimpleName@@MethodName:warn:["Error deleting temporary cache file: " + tempFile + ". This exception will be ignored.", e] @AT@ 8015 @LENGTH@ 8


MOV FieldDeclaration@@Class<?>, [printServiceLookupServicesClass=PrintServiceLookup.class.getDeclaredClasses()[0]] @TO@ TypeDeclaration@@[public]PrinterPrintTest, CamelTestSupport @AT@ 15006 @LENGTH@ 92


UPD VariableDeclarationStatement@@WithShardKeyPoitingToNested source=new WithShardKeyPoitingToNested(); @TO@ WithShardKeyPointingToNested source=new WithShardKeyPointingToNested(); @AT@ 74599 @LENGTH@ 71
---UPD SimpleType@@WithShardKeyPoitingToNested @TO@ WithShardKeyPointingToNested @AT@ 74599 @LENGTH@ 27
---UPD VariableDeclarationFragment@@source=new WithShardKeyPoitingToNested() @TO@ source=new WithShardKeyPointingToNested() @AT@ 74627 @LENGTH@ 42
------UPD ClassInstanceCreation@@WithShardKeyPoitingToNested[] @TO@ WithShardKeyPointingToNested[] @AT@ 74636 @LENGTH@ 33
---------UPD SimpleType@@WithShardKeyPoitingToNested @TO@ WithShardKeyPointingToNested @AT@ 74640 @LENGTH@ 27


UPD SynchronizedStatement@@synchronized (lock) {  SpringCamelContext.setNoStart(true);  if (isCreateCamelContextPerClass()) {    applicationContext=threadAppContext.get();    if (applicationContext == null) {      applicationContext=doCreateApplicationContext();      threadAppContext.set(applicationContext);    }  } else {    applicationContext=doCreateApplicationContext();  }  SpringCamelContext.setNoStart(false);} @TO@ synchronized (lock) {  SpringCamelContext.setNoStart(true);  try {    if (isCreateCamelContextPerClass()) {      applicationContext=threadAppContext.get();      if (applicationContext == null) {        applicationContext=doCreateApplicationContext();        threadAppContext.set(applicationContext);      }    } else {      applicationContext=doCreateApplicationContext();    }  }  finally {    SpringCamelContext.setNoStart(false);  }} @AT@ 2624 @LENGTH@ 592
---UPD Block@@SyncBody:{  SpringCamelContext.setNoStart(true);  if (isCreateCamelContextPerClass()) {    applicationContext=threadAppContext.get();    if (applicationContext == null) {      applicationContext=doCreateApplicationContext();      threadAppContext.set(applicationContext);    }  } else {    applicationContext=doCreateApplicationContext();  }  SpringCamelContext.setNoStart(false);} @TO@ SyncBody:{  SpringCamelContext.setNoStart(true);  try {    if (isCreateCamelContextPerClass()) {      applicationContext=threadAppContext.get();      if (applicationContext == null) {        applicationContext=doCreateApplicationContext();        threadAppContext.set(applicationContext);      }    } else {      applicationContext=doCreateApplicationContext();    }  }  finally {    SpringCamelContext.setNoStart(false);  }} @AT@ 2644 @LENGTH@ 572
------INS TryStatement@@try {  if (isCreateCamelContextPerClass()) {    applicationContext=threadAppContext.get();    if (applicationContext == null) {      applicationContext=doCreateApplicationContext();      threadAppContext.set(applicationContext);    }  } else {    applicationContext=doCreateApplicationContext();  }}  finally {  SpringCamelContext.setNoStart(false);} @TO@ Block@@SyncBody:{  SpringCamelContext.setNoStart(true);  if (isCreateCamelContextPerClass()) {    applicationContext=threadAppContext.get();    if (applicationContext == null) {      applicationContext=doCreateApplicationContext();      threadAppContext.set(applicationContext);    }  } else {    applicationContext=doCreateApplicationContext();  }  SpringCamelContext.setNoStart(false);} @AT@ 2715 @LENGTH@ 595
---------MOV IfStatement@@if (isCreateCamelContextPerClass()) {  applicationContext=threadAppContext.get();  if (applicationContext == null) {    applicationContext=doCreateApplicationContext();    threadAppContext.set(applicationContext);  }} else {  applicationContext=doCreateApplicationContext();} @TO@ TryStatement@@try {  if (isCreateCamelContextPerClass()) {    applicationContext=threadAppContext.get();    if (applicationContext == null) {      applicationContext=doCreateApplicationContext();      threadAppContext.set(applicationContext);    }  } else {    applicationContext=doCreateApplicationContext();  }}  finally {  SpringCamelContext.setNoStart(false);} @AT@ 2715 @LENGTH@ 433
---------INS Block@@FinallyBody:{  SpringCamelContext.setNoStart(false);} @TO@ TryStatement@@try {  if (isCreateCamelContextPerClass()) {    applicationContext=threadAppContext.get();    if (applicationContext == null) {      applicationContext=doCreateApplicationContext();      threadAppContext.set(applicationContext);    }  } else {    applicationContext=doCreateApplicationContext();  }}  finally {  SpringCamelContext.setNoStart(false);} @AT@ 3233 @LENGTH@ 77
------------MOV ExpressionStatement@@MethodInvocation:SpringCamelContext.setNoStart(false) @TO@ Block@@FinallyBody:{  SpringCamelContext.setNoStart(false);} @AT@ 3165 @LENGTH@ 37


UPD IfStatement@@if (this.transformerFactory.getClass().getName().equals(XALAN_TRANSFORMER_FACTORY) && (source instanceof StAXSource)) {  source=new StAX2SAXSource(((StAXSource)source).getXMLStreamReader());} @TO@ if (this.transformerFactory.getClass().getName().equals(XALAN_TRANSFORMER_FACTORY) && source instanceof StAXSource) {  source=new StAX2SAXSource(((StAXSource)source).getXMLStreamReader());} @AT@ 5494 @LENGTH@ 320
---UPD InfixExpression@@this.transformerFactory.getClass().getName().equals(XALAN_TRANSFORMER_FACTORY) && (source instanceof StAXSource) @TO@ this.transformerFactory.getClass().getName().equals(XALAN_TRANSFORMER_FACTORY) && source instanceof StAXSource @AT@ 5498 @LENGTH@ 128
------DEL ParenthesizedExpression@@(source instanceof StAXSource) @AT@ 5596 @LENGTH@ 30
---------DEL InstanceofExpression@@source instanceof StAXSource @AT@ 5597 @LENGTH@ 28
------INS InstanceofExpression@@source instanceof StAXSource @TO@ InfixExpression@@this.transformerFactory.getClass().getName().equals(XALAN_TRANSFORMER_FACTORY) && (source instanceof StAXSource) @AT@ 5596 @LENGTH@ 28
---------MOV SimpleName@@source @TO@ InstanceofExpression@@source instanceof StAXSource @AT@ 5597 @LENGTH@ 6
---------MOV Instanceof@@instanceof @TO@ InstanceofExpression@@source instanceof StAXSource @AT@ 5604 @LENGTH@ 10
---------MOV SimpleType@@StAXSource @TO@ InstanceofExpression@@source instanceof StAXSource @AT@ 5615 @LENGTH@ 10


UPD IfStatement@@if (clientRequestValidation == true) {  configuration.setAttribute("clientRequestValidation","true");} @TO@ if (clientRequestValidation) {  configuration.setAttribute("clientRequestValidation","true");} @AT@ 3860 @LENGTH@ 131
---DEL InfixExpression@@clientRequestValidation == true @AT@ 3864 @LENGTH@ 31
------DEL SimpleName@@clientRequestValidation @AT@ 3864 @LENGTH@ 23
------DEL Operator@@== @AT@ 3887 @LENGTH@ 2
------DEL BooleanLiteral@@true @AT@ 3891 @LENGTH@ 4
---INS SimpleName@@clientRequestValidation @TO@ IfStatement@@if (clientRequestValidation == true) {  configuration.setAttribute("clientRequestValidation","true");} @AT@ 3864 @LENGTH@ 23


UPD VariableDeclarationStatement@@Subscription inputSubscription=Subscription.newBuilder().setName(projectInputSubscriptionName.toString()).setTopic(inputTopic.getName()).setDeadLetterPolicy(DeadLetterPolicy.newBuilder().setDeadLetterTopic(deadLetterTopic.toString()).setMaxDeliveryAttempts(5).build()).build(); @TO@ Subscription inputSubscription=Subscription.newBuilder().setName(projectInputSubscriptionName.toString()).setTopic(inputTopic.getName()).setDeadLetterPolicy(DeadLetterPolicy.newBuilder().setDeadLetterTopic(deadLetterTopic.getName()).setMaxDeliveryAttempts(5).build()).build(); @AT@ 4922 @LENGTH@ 397
---UPD VariableDeclarationFragment@@inputSubscription=Subscription.newBuilder().setName(projectInputSubscriptionName.toString()).setTopic(inputTopic.getName()).setDeadLetterPolicy(DeadLetterPolicy.newBuilder().setDeadLetterTopic(deadLetterTopic.toString()).setMaxDeliveryAttempts(5).build()).build() @TO@ inputSubscription=Subscription.newBuilder().setName(projectInputSubscriptionName.toString()).setTopic(inputTopic.getName()).setDeadLetterPolicy(DeadLetterPolicy.newBuilder().setDeadLetterTopic(deadLetterTopic.getName()).setMaxDeliveryAttempts(5).build()).build() @AT@ 4935 @LENGTH@ 383
------UPD MethodInvocation@@Subscription.newBuilder().setName(projectInputSubscriptionName.toString()).setTopic(inputTopic.getName()).setDeadLetterPolicy(DeadLetterPolicy.newBuilder().setDeadLetterTopic(deadLetterTopic.toString()).setMaxDeliveryAttempts(5).build()).build() @TO@ Subscription.newBuilder().setName(projectInputSubscriptionName.toString()).setTopic(inputTopic.getName()).setDeadLetterPolicy(DeadLetterPolicy.newBuilder().setDeadLetterTopic(deadLetterTopic.getName()).setMaxDeliveryAttempts(5).build()).build() @AT@ 4955 @LENGTH@ 363
---------UPD MethodInvocation@@MethodName:setDeadLetterPolicy:[DeadLetterPolicy.newBuilder().setDeadLetterTopic(deadLetterTopic.toString()).setMaxDeliveryAttempts(5).build()] @TO@ MethodName:setDeadLetterPolicy:[DeadLetterPolicy.newBuilder().setDeadLetterTopic(deadLetterTopic.getName()).setMaxDeliveryAttempts(5).build()] @AT@ 4955 @LENGTH@ 338
------------UPD MethodInvocation@@DeadLetterPolicy.newBuilder().setDeadLetterTopic(deadLetterTopic.toString()).setMaxDeliveryAttempts(5).build() @TO@ DeadLetterPolicy.newBuilder().setDeadLetterTopic(deadLetterTopic.getName()).setMaxDeliveryAttempts(5).build() @AT@ 5132 @LENGTH@ 160
---------------UPD MethodInvocation@@MethodName:setDeadLetterTopic:[deadLetterTopic.toString()] @TO@ MethodName:setDeadLetterTopic:[deadLetterTopic.getName()] @AT@ 5132 @LENGTH@ 101
------------------UPD MethodInvocation@@deadLetterTopic.toString() @TO@ deadLetterTopic.getName() @AT@ 5206 @LENGTH@ 26
---------------------UPD SimpleName@@MethodName:toString:[] @TO@ MethodName:getName:[] @AT@ 5222 @LENGTH@ 10


MOV FieldDeclaration@@private, final, MainHelper, [helper] @TO@ TypeDeclaration@@[public, abstract]BaseMainSupport, BaseService @AT@ 3961 @LENGTH@ 32


UPD ReturnStatement@@MethodInvocation:createQueryAndParameters(entityMetaData,queryFragments,parameters).flatMap(finalQueryAndParameters -> createExecutableQuery(domainType,renderer.render(GenericQueryAndParameters.STATEMENT),finalQueryAndParameters.getParameters())) @TO@ MethodInvocation:createQueryAndParameters(entityMetaData,queryFragments,parameters).flatMap(finalQueryAndParameters -> createExecutableQuery(domainType,renderer.render(queryFragments.generateGenericStatement()),finalQueryAndParameters.getParameters())) @AT@ 19636 @LENGTH@ 263
---UPD MethodInvocation@@createQueryAndParameters(entityMetaData,queryFragments,parameters).flatMap(finalQueryAndParameters -> createExecutableQuery(domainType,renderer.render(GenericQueryAndParameters.STATEMENT),finalQueryAndParameters.getParameters())) @TO@ createQueryAndParameters(entityMetaData,queryFragments,parameters).flatMap(finalQueryAndParameters -> createExecutableQuery(domainType,renderer.render(queryFragments.generateGenericStatement()),finalQueryAndParameters.getParameters())) @AT@ 19643 @LENGTH@ 255
------UPD SimpleName@@MethodName:flatMap:[finalQueryAndParameters -> createExecutableQuery(domainType,renderer.render(GenericQueryAndParameters.STATEMENT),finalQueryAndParameters.getParameters())] @TO@ MethodName:flatMap:[finalQueryAndParameters -> createExecutableQuery(domainType,renderer.render(queryFragments.generateGenericStatement()),finalQueryAndParameters.getParameters())] @AT@ 19718 @LENGTH@ 180
---------UPD LambdaExpression@@finalQueryAndParameters -> createExecutableQuery(domainType,renderer.render(GenericQueryAndParameters.STATEMENT),finalQueryAndParameters.getParameters()) @TO@ finalQueryAndParameters -> createExecutableQuery(domainType,renderer.render(queryFragments.generateGenericStatement()),finalQueryAndParameters.getParameters()) @AT@ 19726 @LENGTH@ 171
------------UPD MethodInvocation@@createExecutableQuery(domainType,renderer.render(GenericQueryAndParameters.STATEMENT),finalQueryAndParameters.getParameters()) @TO@ createExecutableQuery(domainType,renderer.render(queryFragments.generateGenericStatement()),finalQueryAndParameters.getParameters()) @AT@ 19760 @LENGTH@ 137
---------------UPD SimpleName@@MethodName:createExecutableQuery:[domainType, renderer.render(GenericQueryAndParameters.STATEMENT), finalQueryAndParameters.getParameters()] @TO@ MethodName:createExecutableQuery:[domainType, renderer.render(queryFragments.generateGenericStatement()), finalQueryAndParameters.getParameters()] @AT@ 19760 @LENGTH@ 137
------------------UPD MethodInvocation@@renderer.render(GenericQueryAndParameters.STATEMENT) @TO@ renderer.render(queryFragments.generateGenericStatement()) @AT@ 19794 @LENGTH@ 52
---------------------UPD SimpleName@@MethodName:render:[GenericQueryAndParameters.STATEMENT] @TO@ MethodName:render:[queryFragments.generateGenericStatement()] @AT@ 19803 @LENGTH@ 43
------------------------INS MethodInvocation@@queryFragments.generateGenericStatement() @TO@ SimpleName@@MethodName:render:[GenericQueryAndParameters.STATEMENT] @AT@ 19810 @LENGTH@ 41
---------------------------INS SimpleName@@Name:queryFragments @TO@ MethodInvocation@@queryFragments.generateGenericStatement() @AT@ 19810 @LENGTH@ 14
---------------------------INS SimpleName@@MethodName:generateGenericStatement:[] @TO@ MethodInvocation@@queryFragments.generateGenericStatement() @AT@ 19825 @LENGTH@ 26
------------------------DEL QualifiedName@@GenericQueryAndParameters.STATEMENT @AT@ 19810 @LENGTH@ 35
---------------------------DEL SimpleName@@GenericQueryAndParameters @AT@ 19810 @LENGTH@ 25
---------------------------DEL SimpleName@@STATEMENT @AT@ 19836 @LENGTH@ 9


INS MethodDeclaration@@static, void, MethodName:updateVersionPropertyIfPossible, Neo4jPersistentEntity<?> entityMetaData, PersistentPropertyAccessor<?> propertyAccessor, Entity newOrUpdatedNode,  @TO@ TypeDeclaration@@[@API(status=API.Status.INTERNAL,since="6.0.9"), final]TemplateSupport,  @AT@ 3702 @LENGTH@ 385
---INS Modifier@@static @TO@ MethodDeclaration@@static, void, MethodName:updateVersionPropertyIfPossible, Neo4jPersistentEntity<?> entityMetaData, PersistentPropertyAccessor<?> propertyAccessor, Entity newOrUpdatedNode,  @AT@ 3702 @LENGTH@ 6
---INS PrimitiveType@@void @TO@ MethodDeclaration@@static, void, MethodName:updateVersionPropertyIfPossible, Neo4jPersistentEntity<?> entityMetaData, PersistentPropertyAccessor<?> propertyAccessor, Entity newOrUpdatedNode,  @AT@ 3709 @LENGTH@ 4
---INS SimpleName@@MethodName:updateVersionPropertyIfPossible @TO@ MethodDeclaration@@static, void, MethodName:updateVersionPropertyIfPossible, Neo4jPersistentEntity<?> entityMetaData, PersistentPropertyAccessor<?> propertyAccessor, Entity newOrUpdatedNode,  @AT@ 3714 @LENGTH@ 31
---INS SingleVariableDeclaration@@Neo4jPersistentEntity<?> entityMetaData @TO@ MethodDeclaration@@static, void, MethodName:updateVersionPropertyIfPossible, Neo4jPersistentEntity<?> entityMetaData, PersistentPropertyAccessor<?> propertyAccessor, Entity newOrUpdatedNode,  @AT@ 3750 @LENGTH@ 39
------INS ParameterizedType@@Neo4jPersistentEntity<?> @TO@ SingleVariableDeclaration@@Neo4jPersistentEntity<?> entityMetaData @AT@ 3750 @LENGTH@ 24
---------INS SimpleType@@Neo4jPersistentEntity @TO@ ParameterizedType@@Neo4jPersistentEntity<?> @AT@ 3750 @LENGTH@ 21
---------INS WildcardType@@? @TO@ ParameterizedType@@Neo4jPersistentEntity<?> @AT@ 3772 @LENGTH@ 1
------INS SimpleName@@entityMetaData @TO@ SingleVariableDeclaration@@Neo4jPersistentEntity<?> entityMetaData @AT@ 3775 @LENGTH@ 14
---INS SingleVariableDeclaration@@PersistentPropertyAccessor<?> propertyAccessor @TO@ MethodDeclaration@@static, void, MethodName:updateVersionPropertyIfPossible, Neo4jPersistentEntity<?> entityMetaData, PersistentPropertyAccessor<?> propertyAccessor, Entity newOrUpdatedNode,  @AT@ 3794 @LENGTH@ 46
------INS ParameterizedType@@PersistentPropertyAccessor<?> @TO@ SingleVariableDeclaration@@PersistentPropertyAccessor<?> propertyAccessor @AT@ 3794 @LENGTH@ 29
---------INS SimpleType@@PersistentPropertyAccessor @TO@ ParameterizedType@@PersistentPropertyAccessor<?> @AT@ 3794 @LENGTH@ 26
---------INS WildcardType@@? @TO@ ParameterizedType@@PersistentPropertyAccessor<?> @AT@ 3821 @LENGTH@ 1
------INS SimpleName@@propertyAccessor @TO@ SingleVariableDeclaration@@PersistentPropertyAccessor<?> propertyAccessor @AT@ 3824 @LENGTH@ 16
---INS SingleVariableDeclaration@@Entity newOrUpdatedNode @TO@ MethodDeclaration@@static, void, MethodName:updateVersionPropertyIfPossible, Neo4jPersistentEntity<?> entityMetaData, PersistentPropertyAccessor<?> propertyAccessor, Entity newOrUpdatedNode,  @AT@ 3845 @LENGTH@ 23
------INS SimpleType@@Entity @TO@ SingleVariableDeclaration@@Entity newOrUpdatedNode @AT@ 3845 @LENGTH@ 6
------INS SimpleName@@newOrUpdatedNode @TO@ SingleVariableDeclaration@@Entity newOrUpdatedNode @AT@ 3852 @LENGTH@ 16
---INS IfStatement@@if (entityMetaData.hasVersionProperty()) {  propertyAccessor.setProperty(entityMetaData.getVersionProperty(),newOrUpdatedNode.get(entityMetaData.getVersionProperty().getPropertyName()).asLong());} @TO@ MethodDeclaration@@static, void, MethodName:updateVersionPropertyIfPossible, Neo4jPersistentEntity<?> entityMetaData, PersistentPropertyAccessor<?> propertyAccessor, Entity newOrUpdatedNode,  @AT@ 3876 @LENGTH@ 208
------INS MethodInvocation@@entityMetaData.hasVersionProperty() @TO@ IfStatement@@if (entityMetaData.hasVersionProperty()) {  propertyAccessor.setProperty(entityMetaData.getVersionProperty(),newOrUpdatedNode.get(entityMetaData.getVersionProperty().getPropertyName()).asLong());} @AT@ 3880 @LENGTH@ 35
---------INS SimpleName@@Name:entityMetaData @TO@ MethodInvocation@@entityMetaData.hasVersionProperty() @AT@ 3880 @LENGTH@ 14
---------INS SimpleName@@MethodName:hasVersionProperty:[] @TO@ MethodInvocation@@entityMetaData.hasVersionProperty() @AT@ 3895 @LENGTH@ 20
------INS Block@@ThenBody:{  propertyAccessor.setProperty(entityMetaData.getVersionProperty(),newOrUpdatedNode.get(entityMetaData.getVersionProperty().getPropertyName()).asLong());} @TO@ IfStatement@@if (entityMetaData.hasVersionProperty()) {  propertyAccessor.setProperty(entityMetaData.getVersionProperty(),newOrUpdatedNode.get(entityMetaData.getVersionProperty().getPropertyName()).asLong());} @AT@ 3917 @LENGTH@ 167
---------INS ExpressionStatement@@MethodInvocation:propertyAccessor.setProperty(entityMetaData.getVersionProperty(),newOrUpdatedNode.get(entityMetaData.getVersionProperty().getPropertyName()).asLong()) @TO@ Block@@ThenBody:{  propertyAccessor.setProperty(entityMetaData.getVersionProperty(),newOrUpdatedNode.get(entityMetaData.getVersionProperty().getPropertyName()).asLong());} @AT@ 3922 @LENGTH@ 158
------------INS MethodInvocation@@propertyAccessor.setProperty(entityMetaData.getVersionProperty(),newOrUpdatedNode.get(entityMetaData.getVersionProperty().getPropertyName()).asLong()) @TO@ ExpressionStatement@@MethodInvocation:propertyAccessor.setProperty(entityMetaData.getVersionProperty(),newOrUpdatedNode.get(entityMetaData.getVersionProperty().getPropertyName()).asLong()) @AT@ 3922 @LENGTH@ 157
---------------INS SimpleName@@Name:propertyAccessor @TO@ MethodInvocation@@propertyAccessor.setProperty(entityMetaData.getVersionProperty(),newOrUpdatedNode.get(entityMetaData.getVersionProperty().getPropertyName()).asLong()) @AT@ 3922 @LENGTH@ 16
---------------INS SimpleName@@MethodName:setProperty:[entityMetaData.getVersionProperty(), newOrUpdatedNode.get(entityMetaData.getVersionProperty().getPropertyName()).asLong()] @TO@ MethodInvocation@@propertyAccessor.setProperty(entityMetaData.getVersionProperty(),newOrUpdatedNode.get(entityMetaData.getVersionProperty().getPropertyName()).asLong()) @AT@ 3939 @LENGTH@ 140
------------------INS MethodInvocation@@entityMetaData.getVersionProperty() @TO@ SimpleName@@MethodName:setProperty:[entityMetaData.getVersionProperty(), newOrUpdatedNode.get(entityMetaData.getVersionProperty().getPropertyName()).asLong()] @AT@ 3957 @LENGTH@ 35
---------------------INS SimpleName@@Name:entityMetaData @TO@ MethodInvocation@@entityMetaData.getVersionProperty() @AT@ 3957 @LENGTH@ 14
---------------------INS SimpleName@@MethodName:getVersionProperty:[] @TO@ MethodInvocation@@entityMetaData.getVersionProperty() @AT@ 3972 @LENGTH@ 20
------------------INS MethodInvocation@@newOrUpdatedNode.get(entityMetaData.getVersionProperty().getPropertyName()).asLong() @TO@ SimpleName@@MethodName:setProperty:[entityMetaData.getVersionProperty(), newOrUpdatedNode.get(entityMetaData.getVersionProperty().getPropertyName()).asLong()] @AT@ 3994 @LENGTH@ 84
---------------------INS MethodInvocation@@MethodName:get:[entityMetaData.getVersionProperty().getPropertyName()] @TO@ MethodInvocation@@newOrUpdatedNode.get(entityMetaData.getVersionProperty().getPropertyName()).asLong() @AT@ 3994 @LENGTH@ 75
------------------------INS MethodInvocation@@entityMetaData.getVersionProperty().getPropertyName() @TO@ MethodInvocation@@MethodName:get:[entityMetaData.getVersionProperty().getPropertyName()] @AT@ 4015 @LENGTH@ 53
---------------------------INS MethodInvocation@@MethodName:getVersionProperty:[] @TO@ MethodInvocation@@entityMetaData.getVersionProperty().getPropertyName() @AT@ 4015 @LENGTH@ 35
---------------------------INS SimpleName@@Name:entityMetaData @TO@ MethodInvocation@@entityMetaData.getVersionProperty().getPropertyName() @AT@ 4015 @LENGTH@ 14
---------------------------INS SimpleName@@MethodName:getPropertyName:[] @TO@ MethodInvocation@@entityMetaData.getVersionProperty().getPropertyName() @AT@ 4051 @LENGTH@ 17
---------------------INS SimpleName@@Name:newOrUpdatedNode @TO@ MethodInvocation@@newOrUpdatedNode.get(entityMetaData.getVersionProperty().getPropertyName()).asLong() @AT@ 3994 @LENGTH@ 16
---------------------INS SimpleName@@MethodName:asLong:[] @TO@ MethodInvocation@@newOrUpdatedNode.get(entityMetaData.getVersionProperty().getPropertyName()).asLong() @AT@ 4070 @LENGTH@ 8


INS ExpressionStatement@@MethodInvocation:assertEquals(dbName,lci.getDbname()) @TO@ MethodDeclaration@@public, void, MethodName:testGetLatestCommittedCompaction, Exception,  @AT@ 12654 @LENGTH@ 38
---INS MethodInvocation@@assertEquals(dbName,lci.getDbname()) @TO@ ExpressionStatement@@MethodInvocation:assertEquals(dbName,lci.getDbname()) @AT@ 12654 @LENGTH@ 37
------INS SimpleName@@MethodName:assertEquals:[dbName, lci.getDbname()] @TO@ MethodInvocation@@assertEquals(dbName,lci.getDbname()) @AT@ 12654 @LENGTH@ 37
---------INS SimpleName@@dbName @TO@ SimpleName@@MethodName:assertEquals:[dbName, lci.getDbname()] @AT@ 12667 @LENGTH@ 6
---------INS MethodInvocation@@lci.getDbname() @TO@ SimpleName@@MethodName:assertEquals:[dbName, lci.getDbname()] @AT@ 12675 @LENGTH@ 15
------------INS SimpleName@@Name:lci @TO@ MethodInvocation@@lci.getDbname() @AT@ 12675 @LENGTH@ 3
------------INS SimpleName@@MethodName:getDbname:[] @TO@ MethodInvocation@@lci.getDbname() @AT@ 12679 @LENGTH@ 11


INS MethodDeclaration@@public, voidMethodName:CommandContextImpl, OutputStream output, CliInitializationException,  @TO@ TypeDeclaration@@[public]CommandContextImpl, [CommandContext, ModelControllerClientFactory.ConnectionCloseHandler] @AT@ 20379 @LENGTH@ 116
---INS Modifier@@public @TO@ MethodDeclaration@@public, voidMethodName:CommandContextImpl, OutputStream output, CliInitializationException,  @AT@ 20379 @LENGTH@ 6
---INS SimpleName@@MethodName:CommandContextImpl @TO@ MethodDeclaration@@public, voidMethodName:CommandContextImpl, OutputStream output, CliInitializationException,  @AT@ 20386 @LENGTH@ 18
---INS SingleVariableDeclaration@@OutputStream output @TO@ MethodDeclaration@@public, voidMethodName:CommandContextImpl, OutputStream output, CliInitializationException,  @AT@ 20405 @LENGTH@ 19
------INS SimpleType@@OutputStream @TO@ SingleVariableDeclaration@@OutputStream output @AT@ 20405 @LENGTH@ 12
------INS SimpleName@@output @TO@ SingleVariableDeclaration@@OutputStream output @AT@ 20418 @LENGTH@ 6
---INS SimpleType@@CliInitializationException @TO@ MethodDeclaration@@public, voidMethodName:CommandContextImpl, OutputStream output, CliInitializationException,  @AT@ 20433 @LENGTH@ 26
---INS ConstructorInvocation@@this(output,true); @TO@ MethodDeclaration@@public, voidMethodName:CommandContextImpl, OutputStream output, CliInitializationException,  @AT@ 20470 @LENGTH@ 19
------INS SimpleName@@output @TO@ ConstructorInvocation@@this(output,true); @AT@ 20475 @LENGTH@ 6
------INS BooleanLiteral@@true @TO@ ConstructorInvocation@@this(output,true); @AT@ 20483 @LENGTH@ 4


UPD IfStatement@@if (fileToDelete.exists() && doDelete(fileToDelete) == false) {  throw new IOException("Deletion failed: " + fileToDelete);} @TO@ if (fileToDelete.exists() && !doDelete(fileToDelete)) {  throw new IOException("Deletion failed: " + fileToDelete);} @AT@ 3386 @LENGTH@ 144
---UPD InfixExpression@@fileToDelete.exists() && doDelete(fileToDelete) == false @TO@ fileToDelete.exists() && !doDelete(fileToDelete) @AT@ 3390 @LENGTH@ 56
------DEL InfixExpression@@doDelete(fileToDelete) == false @AT@ 3415 @LENGTH@ 31
---------DEL Operator@@== @AT@ 3437 @LENGTH@ 2
---------DEL BooleanLiteral@@false @AT@ 3441 @LENGTH@ 5
------INS PrefixExpression@@!doDelete(fileToDelete) @TO@ InfixExpression@@fileToDelete.exists() && doDelete(fileToDelete) == false @AT@ 3415 @LENGTH@ 23
---------MOV MethodInvocation@@doDelete(fileToDelete) @TO@ PrefixExpression@@!doDelete(fileToDelete) @AT@ 3415 @LENGTH@ 22
---------INS Operator@@! @TO@ PrefixExpression@@!doDelete(fileToDelete) @AT@ 3415 @LENGTH@ 1


UPD IfStatement@@if ((ObjectHelper.isNotEmpty(factoryRef) || ObjectHelper.isNotEmpty(objectModel)) && (saxon != null)) {  throw new IllegalArgumentException("The saxon attribute cannot be set on the xpath element if any of the following is also set: factory, objectModel" + this);} @TO@ if ((ObjectHelper.isNotEmpty(factoryRef) || ObjectHelper.isNotEmpty(objectModel)) && saxon != null) {  throw new IllegalArgumentException("The saxon attribute cannot be set on the xpath element if any of the following is also set: factory, objectModel" + this);} @AT@ 7445 @LENGTH@ 352
---UPD InfixExpression@@(ObjectHelper.isNotEmpty(factoryRef) || ObjectHelper.isNotEmpty(objectModel)) && (saxon != null) @TO@ (ObjectHelper.isNotEmpty(factoryRef) || ObjectHelper.isNotEmpty(objectModel)) && saxon != null @AT@ 7449 @LENGTH@ 96
------DEL ParenthesizedExpression@@(saxon != null) @AT@ 7530 @LENGTH@ 15
---------DEL InfixExpression@@saxon != null @AT@ 7531 @LENGTH@ 13
------INS InfixExpression@@saxon != null @TO@ InfixExpression@@(ObjectHelper.isNotEmpty(factoryRef) || ObjectHelper.isNotEmpty(objectModel)) && (saxon != null) @AT@ 7530 @LENGTH@ 13
---------MOV SimpleName@@saxon @TO@ InfixExpression@@saxon != null @AT@ 7531 @LENGTH@ 5
---------MOV Operator@@!= @TO@ InfixExpression@@saxon != null @AT@ 7536 @LENGTH@ 2
---------MOV NullLiteral@@null @TO@ InfixExpression@@saxon != null @AT@ 7540 @LENGTH@ 4


UPD TypeDeclaration@@[@ResourceLock(Resources.SYSTEM_PROPERTIES), public]MainPropertyPlaceholderWithSystemTest,  @TO@ [@Isolated, @ResourceLock(Resources.SYSTEM_PROPERTIES), public]MainPropertyPlaceholderWithSystemTest,  @AT@ 1064 @LENGTH@ 3873
---INS MarkerAnnotation@@@Isolated @TO@ TypeDeclaration@@[@ResourceLock(Resources.SYSTEM_PROPERTIES), public]MainPropertyPlaceholderWithSystemTest,  @AT@ 1112 @LENGTH@ 9


UPD MethodDeclaration@@default, String, MethodName:generateRelatedNodesCollectionName,  @TO@ default, String, MethodName:generateRelatedNodesCollectionName, NodeDescription<?> mostAbstractNodeDescription,  @AT@ 3473 @LENGTH@ 168
---INS SingleVariableDeclaration@@NodeDescription<?> mostAbstractNodeDescription @TO@ MethodDeclaration@@default, String, MethodName:generateRelatedNodesCollectionName,  @AT@ 3523 @LENGTH@ 46
------INS ParameterizedType@@NodeDescription<?> @TO@ SingleVariableDeclaration@@NodeDescription<?> mostAbstractNodeDescription @AT@ 3523 @LENGTH@ 18
---------INS SimpleType@@NodeDescription @TO@ ParameterizedType@@NodeDescription<?> @AT@ 3523 @LENGTH@ 15
---------INS WildcardType@@? @TO@ ParameterizedType@@NodeDescription<?> @AT@ 3539 @LENGTH@ 1
------INS SimpleName@@mostAbstractNodeDescription @TO@ SingleVariableDeclaration@@NodeDescription<?> mostAbstractNodeDescription @AT@ 3542 @LENGTH@ 27
---UPD ReturnStatement@@InfixExpression:this.getSource().getPrimaryLabel() + "_" + this.getType()+ "_"+ this.getTarget().getPrimaryLabel() @TO@ InfixExpression:this.getSource().getMostAbstractParentLabel(mostAbstractNodeDescription) + "_" + this.getType()+ "_"+ this.getTarget().getPrimaryLabel() @AT@ 3530 @LENGTH@ 108
------UPD InfixExpression@@this.getSource().getPrimaryLabel() + "_" + this.getType()+ "_"+ this.getTarget().getPrimaryLabel() @TO@ this.getSource().getMostAbstractParentLabel(mostAbstractNodeDescription) + "_" + this.getType()+ "_"+ this.getTarget().getPrimaryLabel() @AT@ 3537 @LENGTH@ 100
---------UPD MethodInvocation@@this.getSource().getPrimaryLabel() @TO@ this.getSource().getMostAbstractParentLabel(mostAbstractNodeDescription) @AT@ 3537 @LENGTH@ 34
------------UPD SimpleName@@MethodName:getPrimaryLabel:[] @TO@ MethodName:getMostAbstractParentLabel:[mostAbstractNodeDescription] @AT@ 3554 @LENGTH@ 17
---------------INS SimpleName@@mostAbstractNodeDescription @TO@ SimpleName@@MethodName:getPrimaryLabel:[] @AT@ 3627 @LENGTH@ 27


UPD VariableDeclarationStatement@@MulticastTask state=exchange.isTransacted() ? new MulticastTransactedTask(exchange,pairs,callback) : new MulticastReactiveTask(exchange,pairs,callback); @TO@ MulticastTask state=!isParallelProcessing() && exchange.isTransacted() ? new MulticastTransactedTask(exchange,pairs,callback) : new MulticastReactiveTask(exchange,pairs,callback); @AT@ 11278 @LENGTH@ 174
---UPD VariableDeclarationFragment@@state=exchange.isTransacted() ? new MulticastTransactedTask(exchange,pairs,callback) : new MulticastReactiveTask(exchange,pairs,callback) @TO@ state=!isParallelProcessing() && exchange.isTransacted() ? new MulticastTransactedTask(exchange,pairs,callback) : new MulticastReactiveTask(exchange,pairs,callback) @AT@ 11292 @LENGTH@ 159
------UPD ConditionalExpression@@exchange.isTransacted() ? new MulticastTransactedTask(exchange,pairs,callback) : new MulticastReactiveTask(exchange,pairs,callback) @TO@ !isParallelProcessing() && exchange.isTransacted() ? new MulticastTransactedTask(exchange,pairs,callback) : new MulticastReactiveTask(exchange,pairs,callback) @AT@ 11300 @LENGTH@ 151
---------DEL MethodInvocation@@exchange.isTransacted() @AT@ 11300 @LENGTH@ 23
---------INS InfixExpression@@!isParallelProcessing() && exchange.isTransacted() @TO@ ConditionalExpression@@exchange.isTransacted() ? new MulticastTransactedTask(exchange,pairs,callback) : new MulticastReactiveTask(exchange,pairs,callback) @AT@ 11438 @LENGTH@ 50
------------INS PrefixExpression@@!isParallelProcessing() @TO@ InfixExpression@@!isParallelProcessing() && exchange.isTransacted() @AT@ 11438 @LENGTH@ 23
---------------INS Operator@@! @TO@ PrefixExpression@@!isParallelProcessing() @AT@ 11438 @LENGTH@ 1
---------------INS MethodInvocation@@MethodName:isParallelProcessing:[] @TO@ PrefixExpression@@!isParallelProcessing() @AT@ 11439 @LENGTH@ 22
------------INS Operator@@&& @TO@ InfixExpression@@!isParallelProcessing() && exchange.isTransacted() @AT@ 11461 @LENGTH@ 2
------------INS MethodInvocation@@exchange.isTransacted() @TO@ InfixExpression@@!isParallelProcessing() && exchange.isTransacted() @AT@ 11465 @LENGTH@ 23
---------------MOV SimpleName@@Name:exchange @TO@ MethodInvocation@@exchange.isTransacted() @AT@ 11300 @LENGTH@ 8
---------------MOV SimpleName@@MethodName:isTransacted:[] @TO@ MethodInvocation@@exchange.isTransacted() @AT@ 11309 @LENGTH@ 14


UPD ReturnStatement@@ClassInstanceCreation:new PagedResourcesAssemblerArgumentResolver(pageableResolver.get(),null) @TO@ ClassInstanceCreation:new PagedResourcesAssemblerArgumentResolver(pageableResolver.get()) @AT@ 3900 @LENGTH@ 81
---UPD ClassInstanceCreation@@PagedResourcesAssemblerArgumentResolver[pageableResolver.get(), null] @TO@ PagedResourcesAssemblerArgumentResolver[pageableResolver.get()] @AT@ 3907 @LENGTH@ 73
------DEL NullLiteral@@null @AT@ 3975 @LENGTH@ 4


UPD VariableDeclarationStatement@@ObjectName on=new ObjectName("org.apache.camel:context=camel-1,type=services,name=ZipkinTracer"); @TO@ ObjectName on=new ObjectName("org.apache.camel:context=" + context.getManagementName() + ",type=services,name=ZipkinTracer"); @AT@ 2535 @LENGTH@ 99
---UPD VariableDeclarationFragment@@on=new ObjectName("org.apache.camel:context=camel-1,type=services,name=ZipkinTracer") @TO@ on=new ObjectName("org.apache.camel:context=" + context.getManagementName() + ",type=services,name=ZipkinTracer") @AT@ 2546 @LENGTH@ 87
------UPD ClassInstanceCreation@@ObjectName["org.apache.camel:context=camel-1,type=services,name=ZipkinTracer"] @TO@ ObjectName["org.apache.camel:context=" + context.getManagementName() + ",type=services,name=ZipkinTracer"] @AT@ 2551 @LENGTH@ 82
---------DEL StringLiteral@@"org.apache.camel:context=camel-1,type=services,name=ZipkinTracer" @AT@ 2566 @LENGTH@ 66
---------INS InfixExpression@@"org.apache.camel:context=" + context.getManagementName() + ",type=services,name=ZipkinTracer" @TO@ ClassInstanceCreation@@ObjectName["org.apache.camel:context=camel-1,type=services,name=ZipkinTracer"] @AT@ 2583 @LENGTH@ 94
------------INS StringLiteral@@"org.apache.camel:context=" @TO@ InfixExpression@@"org.apache.camel:context=" + context.getManagementName() + ",type=services,name=ZipkinTracer" @AT@ 2583 @LENGTH@ 27
------------INS Operator@@+ @TO@ InfixExpression@@"org.apache.camel:context=" + context.getManagementName() + ",type=services,name=ZipkinTracer" @AT@ 2610 @LENGTH@ 1
------------INS MethodInvocation@@context.getManagementName() @TO@ InfixExpression@@"org.apache.camel:context=" + context.getManagementName() + ",type=services,name=ZipkinTracer" @AT@ 2613 @LENGTH@ 27
---------------INS SimpleName@@Name:context @TO@ MethodInvocation@@context.getManagementName() @AT@ 2613 @LENGTH@ 7
---------------INS SimpleName@@MethodName:getManagementName:[] @TO@ MethodInvocation@@context.getManagementName() @AT@ 2621 @LENGTH@ 19
------------INS StringLiteral@@",type=services,name=ZipkinTracer" @TO@ InfixExpression@@"org.apache.camel:context=" + context.getManagementName() + ",type=services,name=ZipkinTracer" @AT@ 2643 @LENGTH@ 34


UPD VariableDeclarationStatement@@boolean stop=ee.isFailed() || ee.isRollbackOnly() || ee.isRollbackOnlyLast()|| (ee.isErrorHandlerHandledSet() && ee.isErrorHandlerHandled()); @TO@ boolean stop=ee.isFailed() || ee.isRollbackOnly() || ee.isRollbackOnlyLast()|| ee.isErrorHandlerHandledSet() && ee.isErrorHandlerHandled(); @AT@ 1897 @LENGTH@ 160
---UPD VariableDeclarationFragment@@stop=ee.isFailed() || ee.isRollbackOnly() || ee.isRollbackOnlyLast()|| (ee.isErrorHandlerHandledSet() && ee.isErrorHandlerHandled()) @TO@ stop=ee.isFailed() || ee.isRollbackOnly() || ee.isRollbackOnlyLast()|| ee.isErrorHandlerHandledSet() && ee.isErrorHandlerHandled() @AT@ 1905 @LENGTH@ 151
------UPD InfixExpression@@ee.isFailed() || ee.isRollbackOnly() || ee.isRollbackOnlyLast()|| (ee.isErrorHandlerHandledSet() && ee.isErrorHandlerHandled()) @TO@ ee.isFailed() || ee.isRollbackOnly() || ee.isRollbackOnlyLast()|| ee.isErrorHandlerHandledSet() && ee.isErrorHandlerHandled() @AT@ 1912 @LENGTH@ 144
---------DEL ParenthesizedExpression@@(ee.isErrorHandlerHandledSet() && ee.isErrorHandlerHandled()) @AT@ 1995 @LENGTH@ 61
---------MOV InfixExpression@@ee.isErrorHandlerHandledSet() && ee.isErrorHandlerHandled() @TO@ InfixExpression@@ee.isFailed() || ee.isRollbackOnly() || ee.isRollbackOnlyLast()|| (ee.isErrorHandlerHandledSet() && ee.isErrorHandlerHandled()) @AT@ 1996 @LENGTH@ 59


UPD VariableDeclarationStatement@@javax.security.cert.X509Certificate cert=session.getPeerCertificateChain()[0]; @TO@ X509Certificate cert=(X509Certificate)session.getPeerCertificates()[0]; @AT@ 2669 @LENGTH@ 80
---UPD SimpleType@@javax.security.cert.X509Certificate @TO@ X509Certificate @AT@ 2669 @LENGTH@ 35
---UPD VariableDeclarationFragment@@cert=session.getPeerCertificateChain()[0] @TO@ cert=(X509Certificate)session.getPeerCertificates()[0] @AT@ 2705 @LENGTH@ 43
------DEL ArrayAccess@@session.getPeerCertificateChain()[0] @AT@ 2712 @LENGTH@ 36
------INS CastExpression@@(X509Certificate)session.getPeerCertificates()[0] @TO@ VariableDeclarationFragment@@cert=session.getPeerCertificateChain()[0] @AT@ 2735 @LENGTH@ 50
---------INS SimpleType@@X509Certificate @TO@ CastExpression@@(X509Certificate)session.getPeerCertificates()[0] @AT@ 2736 @LENGTH@ 15
---------INS ArrayAccess@@session.getPeerCertificates()[0] @TO@ CastExpression@@(X509Certificate)session.getPeerCertificates()[0] @AT@ 2753 @LENGTH@ 32
------------MOV MethodInvocation@@session.getPeerCertificateChain() @TO@ ArrayAccess@@session.getPeerCertificates()[0] @AT@ 2712 @LENGTH@ 33
---------------UPD SimpleName@@MethodName:getPeerCertificateChain:[] @TO@ MethodName:getPeerCertificates:[] @AT@ 2720 @LENGTH@ 25
------------MOV NumberLiteral@@0 @TO@ ArrayAccess@@session.getPeerCertificates()[0] @AT@ 2746 @LENGTH@ 1


INS MethodDeclaration@@public, boolean, MethodName:isPredicate,  @TO@ TypeDeclaration@@[public]CSimpleScript2, CSimpleSupport @AT@ 1527 @LENGTH@ 57
---INS Modifier@@public @TO@ MethodDeclaration@@public, boolean, MethodName:isPredicate,  @AT@ 1527 @LENGTH@ 6
---INS PrimitiveType@@boolean @TO@ MethodDeclaration@@public, boolean, MethodName:isPredicate,  @AT@ 1534 @LENGTH@ 7
---INS SimpleName@@MethodName:isPredicate @TO@ MethodDeclaration@@public, boolean, MethodName:isPredicate,  @AT@ 1542 @LENGTH@ 11
---INS ReturnStatement@@BooleanLiteral:true @TO@ MethodDeclaration@@public, boolean, MethodName:isPredicate,  @AT@ 1566 @LENGTH@ 12
------INS BooleanLiteral@@true @TO@ ReturnStatement@@BooleanLiteral:true @AT@ 1573 @LENGTH@ 4


UPD ReturnStatement@@SimpleName:read @TO@ PrefixExpression:-1 @AT@ 2296 @LENGTH@ 12
---DEL SimpleName@@read @AT@ 2303 @LENGTH@ 4
---INS PrefixExpression@@-1 @TO@ ReturnStatement@@SimpleName:read @AT@ 2303 @LENGTH@ 2
------INS Operator@@- @TO@ PrefixExpression@@-1 @AT@ 2303 @LENGTH@ 1
------INS NumberLiteral@@1 @TO@ PrefixExpression@@-1 @AT@ 2304 @LENGTH@ 1


UPD FieldDeclaration@@public, static, final, Pattern, [CAMEL_KAFKA_FILTER_PATTERN=Pattern.compile("(?i)(Camel|org\\.apache\\.camel|kafka\\.)[\\.|a-z|A-z|0-9]*")] @TO@ public, static, final, Pattern, [CAMEL_KAFKA_FILTER_PATTERN=Pattern.compile("(?i)(Camel|org\\.apache\\.camel|kafka\\.)[\\.|a-z|A-Z|0-9]*")] @AT@ 1145 @LENGTH@ 148
---UPD VariableDeclarationFragment@@CAMEL_KAFKA_FILTER_PATTERN=Pattern.compile("(?i)(Camel|org\\.apache\\.camel|kafka\\.)[\\.|a-z|A-z|0-9]*") @TO@ CAMEL_KAFKA_FILTER_PATTERN=Pattern.compile("(?i)(Camel|org\\.apache\\.camel|kafka\\.)[\\.|a-z|A-Z|0-9]*") @AT@ 1173 @LENGTH@ 119
------UPD MethodInvocation@@Pattern.compile("(?i)(Camel|org\\.apache\\.camel|kafka\\.)[\\.|a-z|A-z|0-9]*") @TO@ Pattern.compile("(?i)(Camel|org\\.apache\\.camel|kafka\\.)[\\.|a-z|A-Z|0-9]*") @AT@ 1214 @LENGTH@ 78
---------UPD SimpleName@@MethodName:compile:["(?i)(Camel|org\\.apache\\.camel|kafka\\.)[\\.|a-z|A-z|0-9]*"] @TO@ MethodName:compile:["(?i)(Camel|org\\.apache\\.camel|kafka\\.)[\\.|a-z|A-Z|0-9]*"] @AT@ 1222 @LENGTH@ 70
------------UPD StringLiteral@@"(?i)(Camel|org\\.apache\\.camel|kafka\\.)[\\.|a-z|A-z|0-9]*" @TO@ "(?i)(Camel|org\\.apache\\.camel|kafka\\.)[\\.|a-z|A-Z|0-9]*" @AT@ 1230 @LENGTH@ 61


INS MethodDeclaration@@public, void, MethodName:testIsRegularFile, IOException,  @TO@ TypeDeclaration@@[public]PathUtilsTest, TestArguments @AT@ 3026 @LENGTH@ 385
---INS Modifier@@public @TO@ MethodDeclaration@@public, void, MethodName:testIsRegularFile, IOException,  @AT@ 3026 @LENGTH@ 6
---INS PrimitiveType@@void @TO@ MethodDeclaration@@public, void, MethodName:testIsRegularFile, IOException,  @AT@ 3033 @LENGTH@ 4
---INS SimpleName@@MethodName:testIsRegularFile @TO@ MethodDeclaration@@public, void, MethodName:testIsRegularFile, IOException,  @AT@ 3038 @LENGTH@ 17
---INS SimpleType@@IOException @TO@ MethodDeclaration@@public, void, MethodName:testIsRegularFile, IOException,  @AT@ 3065 @LENGTH@ 11
---INS ExpressionStatement@@MethodInvocation:assertFalse(PathUtils.isRegularFile(null)) @TO@ MethodDeclaration@@public, void, MethodName:testIsRegularFile, IOException,  @AT@ 3087 @LENGTH@ 43
------INS MethodInvocation@@assertFalse(PathUtils.isRegularFile(null)) @TO@ ExpressionStatement@@MethodInvocation:assertFalse(PathUtils.isRegularFile(null)) @AT@ 3087 @LENGTH@ 42
---------INS SimpleName@@MethodName:assertFalse:[PathUtils.isRegularFile(null)] @TO@ MethodInvocation@@assertFalse(PathUtils.isRegularFile(null)) @AT@ 3087 @LENGTH@ 42
------------INS MethodInvocation@@PathUtils.isRegularFile(null) @TO@ SimpleName@@MethodName:assertFalse:[PathUtils.isRegularFile(null)] @AT@ 3099 @LENGTH@ 29
---------------INS SimpleName@@Name:PathUtils @TO@ MethodInvocation@@PathUtils.isRegularFile(null) @AT@ 3099 @LENGTH@ 9
---------------INS SimpleName@@MethodName:isRegularFile:[null] @TO@ MethodInvocation@@PathUtils.isRegularFile(null) @AT@ 3109 @LENGTH@ 19
------------------INS NullLiteral@@null @TO@ SimpleName@@MethodName:isRegularFile:[null] @AT@ 3123 @LENGTH@ 4
---INS ExpressionStatement@@MethodInvocation:assertFalse(PathUtils.isRegularFile(tempDir)) @TO@ MethodDeclaration@@public, void, MethodName:testIsRegularFile, IOException,  @AT@ 3140 @LENGTH@ 46
------INS MethodInvocation@@assertFalse(PathUtils.isRegularFile(tempDir)) @TO@ ExpressionStatement@@MethodInvocation:assertFalse(PathUtils.isRegularFile(tempDir)) @AT@ 3140 @LENGTH@ 45
---------INS SimpleName@@MethodName:assertFalse:[PathUtils.isRegularFile(tempDir)] @TO@ MethodInvocation@@assertFalse(PathUtils.isRegularFile(tempDir)) @AT@ 3140 @LENGTH@ 45
------------INS MethodInvocation@@PathUtils.isRegularFile(tempDir) @TO@ SimpleName@@MethodName:assertFalse:[PathUtils.isRegularFile(tempDir)] @AT@ 3152 @LENGTH@ 32
---------------INS SimpleName@@Name:PathUtils @TO@ MethodInvocation@@PathUtils.isRegularFile(tempDir) @AT@ 3152 @LENGTH@ 9
---------------INS SimpleName@@MethodName:isRegularFile:[tempDir] @TO@ MethodInvocation@@PathUtils.isRegularFile(tempDir) @AT@ 3162 @LENGTH@ 22
------------------INS SimpleName@@tempDir @TO@ SimpleName@@MethodName:isRegularFile:[tempDir] @AT@ 3176 @LENGTH@ 7
---INS VariableDeclarationStatement@@Path testFile1=Files.createTempFile(tempDir,"prefix",null); @TO@ MethodDeclaration@@public, void, MethodName:testIsRegularFile, IOException,  @AT@ 3195 @LENGTH@ 63
------INS SimpleType@@Path @TO@ VariableDeclarationStatement@@Path testFile1=Files.createTempFile(tempDir,"prefix",null); @AT@ 3195 @LENGTH@ 4
------INS VariableDeclarationFragment@@testFile1=Files.createTempFile(tempDir,"prefix",null) @TO@ VariableDeclarationStatement@@Path testFile1=Files.createTempFile(tempDir,"prefix",null); @AT@ 3200 @LENGTH@ 57
---------INS SimpleName@@testFile1 @TO@ VariableDeclarationFragment@@testFile1=Files.createTempFile(tempDir,"prefix",null) @AT@ 3200 @LENGTH@ 9
---------INS MethodInvocation@@Files.createTempFile(tempDir,"prefix",null) @TO@ VariableDeclarationFragment@@testFile1=Files.createTempFile(tempDir,"prefix",null) @AT@ 3212 @LENGTH@ 45
------------INS SimpleName@@Name:Files @TO@ MethodInvocation@@Files.createTempFile(tempDir,"prefix",null) @AT@ 3212 @LENGTH@ 5
------------INS SimpleName@@MethodName:createTempFile:[tempDir, "prefix", null] @TO@ MethodInvocation@@Files.createTempFile(tempDir,"prefix",null) @AT@ 3218 @LENGTH@ 39
---------------INS SimpleName@@tempDir @TO@ SimpleName@@MethodName:createTempFile:[tempDir, "prefix", null] @AT@ 3233 @LENGTH@ 7
---------------INS StringLiteral@@"prefix" @TO@ SimpleName@@MethodName:createTempFile:[tempDir, "prefix", null] @AT@ 3242 @LENGTH@ 8
---------------INS NullLiteral@@null @TO@ SimpleName@@MethodName:createTempFile:[tempDir, "prefix", null] @AT@ 3252 @LENGTH@ 4
---INS ExpressionStatement@@MethodInvocation:assertTrue(PathUtils.isRegularFile(testFile1)) @TO@ MethodDeclaration@@public, void, MethodName:testIsRegularFile, IOException,  @AT@ 3267 @LENGTH@ 47
------INS MethodInvocation@@assertTrue(PathUtils.isRegularFile(testFile1)) @TO@ ExpressionStatement@@MethodInvocation:assertTrue(PathUtils.isRegularFile(testFile1)) @AT@ 3267 @LENGTH@ 46
---------INS SimpleName@@MethodName:assertTrue:[PathUtils.isRegularFile(testFile1)] @TO@ MethodInvocation@@assertTrue(PathUtils.isRegularFile(testFile1)) @AT@ 3267 @LENGTH@ 46
------------INS MethodInvocation@@PathUtils.isRegularFile(testFile1) @TO@ SimpleName@@MethodName:assertTrue:[PathUtils.isRegularFile(testFile1)] @AT@ 3278 @LENGTH@ 34
---------------INS SimpleName@@Name:PathUtils @TO@ MethodInvocation@@PathUtils.isRegularFile(testFile1) @AT@ 3278 @LENGTH@ 9
---------------INS SimpleName@@MethodName:isRegularFile:[testFile1] @TO@ MethodInvocation@@PathUtils.isRegularFile(testFile1) @AT@ 3288 @LENGTH@ 24
------------------INS SimpleName@@testFile1 @TO@ SimpleName@@MethodName:isRegularFile:[testFile1] @AT@ 3302 @LENGTH@ 9
---INS ExpressionStatement@@MethodInvocation:Files.delete(testFile1) @TO@ MethodDeclaration@@public, void, MethodName:testIsRegularFile, IOException,  @AT@ 3324 @LENGTH@ 24
------INS MethodInvocation@@Files.delete(testFile1) @TO@ ExpressionStatement@@MethodInvocation:Files.delete(testFile1) @AT@ 3324 @LENGTH@ 23
---------INS SimpleName@@Name:Files @TO@ MethodInvocation@@Files.delete(testFile1) @AT@ 3324 @LENGTH@ 5
---------INS SimpleName@@MethodName:delete:[testFile1] @TO@ MethodInvocation@@Files.delete(testFile1) @AT@ 3330 @LENGTH@ 17
------------INS SimpleName@@testFile1 @TO@ SimpleName@@MethodName:delete:[testFile1] @AT@ 3337 @LENGTH@ 9
---INS ExpressionStatement@@MethodInvocation:assertFalse(PathUtils.isRegularFile(testFile1)) @TO@ MethodDeclaration@@public, void, MethodName:testIsRegularFile, IOException,  @AT@ 3357 @LENGTH@ 48
------INS MethodInvocation@@assertFalse(PathUtils.isRegularFile(testFile1)) @TO@ ExpressionStatement@@MethodInvocation:assertFalse(PathUtils.isRegularFile(testFile1)) @AT@ 3357 @LENGTH@ 47
---------INS SimpleName@@MethodName:assertFalse:[PathUtils.isRegularFile(testFile1)] @TO@ MethodInvocation@@assertFalse(PathUtils.isRegularFile(testFile1)) @AT@ 3357 @LENGTH@ 47
------------INS MethodInvocation@@PathUtils.isRegularFile(testFile1) @TO@ SimpleName@@MethodName:assertFalse:[PathUtils.isRegularFile(testFile1)] @AT@ 3369 @LENGTH@ 34
---------------INS SimpleName@@Name:PathUtils @TO@ MethodInvocation@@PathUtils.isRegularFile(testFile1) @AT@ 3369 @LENGTH@ 9
---------------INS SimpleName@@MethodName:isRegularFile:[testFile1] @TO@ MethodInvocation@@PathUtils.isRegularFile(testFile1) @AT@ 3379 @LENGTH@ 24
------------------INS SimpleName@@testFile1 @TO@ SimpleName@@MethodName:isRegularFile:[testFile1] @AT@ 3393 @LENGTH@ 9


INS IfStatement@@if (this.returnedMessage == null) {  return null;} else {  return this.returnedMessage.getMessage();} @TO@ MethodDeclaration@@public, Message, MethodName:getReturnedMessage,  @AT@ 3385 @LENGTH@ 113
---INS InfixExpression@@this.returnedMessage == null @TO@ IfStatement@@if (this.returnedMessage == null) {  return null;} else {  return this.returnedMessage.getMessage();} @AT@ 3389 @LENGTH@ 28
------INS FieldAccess@@this.returnedMessage @TO@ InfixExpression@@this.returnedMessage == null @AT@ 3389 @LENGTH@ 20
---------INS ThisExpression@@this @TO@ FieldAccess@@this.returnedMessage @AT@ 3389 @LENGTH@ 4
---------INS SimpleName@@returnedMessage @TO@ FieldAccess@@this.returnedMessage @AT@ 3394 @LENGTH@ 15
------INS Operator@@== @TO@ InfixExpression@@this.returnedMessage == null @AT@ 3409 @LENGTH@ 2
------INS NullLiteral@@null @TO@ InfixExpression@@this.returnedMessage == null @AT@ 3413 @LENGTH@ 4
---INS Block@@ThenBody:{  return null;} @TO@ IfStatement@@if (this.returnedMessage == null) {  return null;} else {  return this.returnedMessage.getMessage();} @AT@ 3419 @LENGTH@ 21
------INS ReturnStatement@@NullLiteral:null @TO@ Block@@ThenBody:{  return null;} @AT@ 3424 @LENGTH@ 12
---------INS NullLiteral@@null @TO@ ReturnStatement@@NullLiteral:null @AT@ 3431 @LENGTH@ 4
---INS Block@@ElseBody:{  return this.returnedMessage.getMessage();} @TO@ IfStatement@@if (this.returnedMessage == null) {  return null;} else {  return this.returnedMessage.getMessage();} @AT@ 3448 @LENGTH@ 50
------MOV ReturnStatement@@MethodInvocation:this.returnedMessage.getMessage() @TO@ Block@@ElseBody:{  return this.returnedMessage.getMessage();} @AT@ 3385 @LENGTH@ 41


UPD ThrowStatement@@MethodInvocation:ROOT_LOGGER.unableToDecyptExpression(fullExpression,e) @TO@ MethodInvocation:ROOT_LOGGER.unableToDecryptExpression(fullExpression,e) @AT@ 5325 @LENGTH@ 62
---UPD MethodInvocation@@ROOT_LOGGER.unableToDecyptExpression(fullExpression,e) @TO@ ROOT_LOGGER.unableToDecryptExpression(fullExpression,e) @AT@ 5331 @LENGTH@ 55
------UPD SimpleName@@MethodName:unableToDecyptExpression:[fullExpression, e] @TO@ MethodName:unableToDecryptExpression:[fullExpression, e] @AT@ 5343 @LENGTH@ 43


UPD IfStatement@@if (inferredType.isAbstract()) {  return false;} @TO@ if (inferredType.isAbstract() && !inferredType.isContainerType()) {  return false;} @AT@ 4176 @LENGTH@ 53
---INS InfixExpression@@inferredType.isAbstract() && !inferredType.isContainerType() @TO@ IfStatement@@if (inferredType.isAbstract()) {  return false;} @AT@ 4180 @LENGTH@ 60
------INS MethodInvocation@@inferredType.isAbstract() @TO@ InfixExpression@@inferredType.isAbstract() && !inferredType.isContainerType() @AT@ 4180 @LENGTH@ 25
---------MOV SimpleName@@Name:inferredType @TO@ MethodInvocation@@inferredType.isAbstract() @AT@ 4180 @LENGTH@ 12
---------MOV SimpleName@@MethodName:isAbstract:[] @TO@ MethodInvocation@@inferredType.isAbstract() @AT@ 4193 @LENGTH@ 12
------INS Operator@@&& @TO@ InfixExpression@@inferredType.isAbstract() && !inferredType.isContainerType() @AT@ 4205 @LENGTH@ 2
------INS PrefixExpression@@!inferredType.isContainerType() @TO@ InfixExpression@@inferredType.isAbstract() && !inferredType.isContainerType() @AT@ 4209 @LENGTH@ 31
---------INS Operator@@! @TO@ PrefixExpression@@!inferredType.isContainerType() @AT@ 4209 @LENGTH@ 1
---------INS MethodInvocation@@inferredType.isContainerType() @TO@ PrefixExpression@@!inferredType.isContainerType() @AT@ 4210 @LENGTH@ 30
------------INS SimpleName@@Name:inferredType @TO@ MethodInvocation@@inferredType.isContainerType() @AT@ 4210 @LENGTH@ 12
------------INS SimpleName@@MethodName:isContainerType:[] @TO@ MethodInvocation@@inferredType.isContainerType() @AT@ 4223 @LENGTH@ 17
---DEL MethodInvocation@@inferredType.isAbstract() @AT@ 4180 @LENGTH@ 25


UPD FieldDeclaration@@private, boolean, [isLocked=false] @TO@ private, boolean, [isLocked] @AT@ 2726 @LENGTH@ 33
---UPD VariableDeclarationFragment@@isLocked=false @TO@ isLocked @AT@ 2742 @LENGTH@ 16
------DEL BooleanLiteral@@false @AT@ 2753 @LENGTH@ 5


INS ExpressionStatement@@MethodInvocation:context.getRegistry().bind("activemqCF",connectionFactory) @TO@ MethodDeclaration@@public, void, MethodName:testRestartWithStopStart, Exception,  @AT@ 2079 @LENGTH@ 60
---INS MethodInvocation@@context.getRegistry().bind("activemqCF",connectionFactory) @TO@ ExpressionStatement@@MethodInvocation:context.getRegistry().bind("activemqCF",connectionFactory) @AT@ 2079 @LENGTH@ 59
------INS MethodInvocation@@MethodName:getRegistry:[] @TO@ MethodInvocation@@context.getRegistry().bind("activemqCF",connectionFactory) @AT@ 2079 @LENGTH@ 21
------INS SimpleName@@Name:context @TO@ MethodInvocation@@context.getRegistry().bind("activemqCF",connectionFactory) @AT@ 2079 @LENGTH@ 7
------INS SimpleName@@MethodName:bind:["activemqCF", connectionFactory] @TO@ MethodInvocation@@context.getRegistry().bind("activemqCF",connectionFactory) @AT@ 2101 @LENGTH@ 37
---------INS StringLiteral@@"activemqCF" @TO@ SimpleName@@MethodName:bind:["activemqCF", connectionFactory] @AT@ 2106 @LENGTH@ 12
---------INS SimpleName@@connectionFactory @TO@ SimpleName@@MethodName:bind:["activemqCF", connectionFactory] @AT@ 2120 @LENGTH@ 17


UPD FieldDeclaration@@private, boolean, [allOrNone=false] @TO@ private, boolean, [allOrNone] @AT@ 1231 @LENGTH@ 34
---UPD VariableDeclarationFragment@@allOrNone=false @TO@ allOrNone @AT@ 1247 @LENGTH@ 17
------DEL BooleanLiteral@@false @AT@ 1259 @LENGTH@ 5


UPD VariableDeclarationStatement@@List<T> page=this.neo4jOperations.toExecutableQuery(this.metaData.getType(),QueryFragmentsAndParameters.forCondition(this.metaData,Conditions.noCondition(),pageable,null)).getResults(); @TO@ List<T> page=this.neo4jOperations.toExecutableQuery(this.metaData.getType(),QueryFragmentsAndParameters.forCondition(this.metaData,condition,pageable,null)).getResults(); @AT@ 3781 @LENGTH@ 203
---UPD VariableDeclarationFragment@@page=this.neo4jOperations.toExecutableQuery(this.metaData.getType(),QueryFragmentsAndParameters.forCondition(this.metaData,Conditions.noCondition(),pageable,null)).getResults() @TO@ page=this.neo4jOperations.toExecutableQuery(this.metaData.getType(),QueryFragmentsAndParameters.forCondition(this.metaData,condition,pageable,null)).getResults() @AT@ 3789 @LENGTH@ 194
------UPD MethodInvocation@@this.neo4jOperations.toExecutableQuery(this.metaData.getType(),QueryFragmentsAndParameters.forCondition(this.metaData,Conditions.noCondition(),pageable,null)).getResults() @TO@ this.neo4jOperations.toExecutableQuery(this.metaData.getType(),QueryFragmentsAndParameters.forCondition(this.metaData,condition,pageable,null)).getResults() @AT@ 3796 @LENGTH@ 187
---------UPD MethodInvocation@@MethodName:toExecutableQuery:[this.metaData.getType(), QueryFragmentsAndParameters.forCondition(this.metaData,Conditions.noCondition(),pageable,null)] @TO@ MethodName:toExecutableQuery:[this.metaData.getType(), QueryFragmentsAndParameters.forCondition(this.metaData,condition,pageable,null)] @AT@ 3796 @LENGTH@ 174
------------UPD MethodInvocation@@QueryFragmentsAndParameters.forCondition(this.metaData,Conditions.noCondition(),pageable,null) @TO@ QueryFragmentsAndParameters.forCondition(this.metaData,condition,pageable,null) @AT@ 3869 @LENGTH@ 97
---------------UPD SimpleName@@MethodName:forCondition:[this.metaData, Conditions.noCondition(), pageable, null] @TO@ MethodName:forCondition:[this.metaData, condition, pageable, null] @AT@ 3897 @LENGTH@ 69
------------------DEL MethodInvocation@@Conditions.noCondition() @AT@ 3925 @LENGTH@ 24
---------------------DEL SimpleName@@Name:Conditions @AT@ 3925 @LENGTH@ 10
---------------------DEL SimpleName@@MethodName:noCondition:[] @AT@ 3936 @LENGTH@ 13
------------------INS SimpleName@@condition @TO@ SimpleName@@MethodName:forCondition:[this.metaData, Conditions.noCondition(), pageable, null] @AT@ 3925 @LENGTH@ 9


UPD IfStatement@@if ((!s.contains("#")) && (uri.getFragment() != null)) {  s=s + "#" + uri.getFragment();} @TO@ if (!s.contains("#") && uri.getFragment() != null) {  s=s + "#" + uri.getFragment();} @AT@ 14536 @LENGTH@ 111
---UPD InfixExpression@@(!s.contains("#")) && (uri.getFragment() != null) @TO@ !s.contains("#") && uri.getFragment() != null @AT@ 14540 @LENGTH@ 49
------DEL ParenthesizedExpression@@(!s.contains("#")) @AT@ 14540 @LENGTH@ 18
------MOV PrefixExpression@@!s.contains("#") @TO@ InfixExpression@@(!s.contains("#")) && (uri.getFragment() != null) @AT@ 14541 @LENGTH@ 16
------DEL ParenthesizedExpression@@(uri.getFragment() != null) @AT@ 14562 @LENGTH@ 27
------MOV InfixExpression@@uri.getFragment() != null @TO@ InfixExpression@@(!s.contains("#")) && (uri.getFragment() != null) @AT@ 14563 @LENGTH@ 25


UPD FieldDeclaration@@private, byte[], [utf=("ABC\u00e6D\uD867\uDE3DE\uD83C\uDFF3").getBytes(StandardCharsets.UTF_8)] @TO@ private, byte[], [utf="ABC\u00e6D\uD867\uDE3DE\uD83C\uDFF3".getBytes(StandardCharsets.UTF_8)] @AT@ 1366 @LENGTH@ 94
---UPD VariableDeclarationFragment@@utf=("ABC\u00e6D\uD867\uDE3DE\uD83C\uDFF3").getBytes(StandardCharsets.UTF_8) @TO@ utf="ABC\u00e6D\uD867\uDE3DE\uD83C\uDFF3".getBytes(StandardCharsets.UTF_8) @AT@ 1381 @LENGTH@ 78
------UPD MethodInvocation@@("ABC\u00e6D\uD867\uDE3DE\uD83C\uDFF3").getBytes(StandardCharsets.UTF_8) @TO@ "ABC\u00e6D\uD867\uDE3DE\uD83C\uDFF3".getBytes(StandardCharsets.UTF_8) @AT@ 1387 @LENGTH@ 72
---------DEL ParenthesizedExpression@@("ABC\u00e6D\uD867\uDE3DE\uD83C\uDFF3") @AT@ 1387 @LENGTH@ 39
------------DEL StringLiteral@@"ABC\u00e6D\uD867\uDE3DE\uD83C\uDFF3" @AT@ 1388 @LENGTH@ 37
---------INS StringLiteral@@"ABC\u00e6D\uD867\uDE3DE\uD83C\uDFF3" @TO@ MethodInvocation@@("ABC\u00e6D\uD867\uDE3DE\uD83C\uDFF3").getBytes(StandardCharsets.UTF_8) @AT@ 1387 @LENGTH@ 37


MOV FieldDeclaration@@Object, [printServiceLookup] @TO@ TypeDeclaration@@[public]PrinterPrintTest, CamelTestSupport @AT@ 15103 @LENGTH@ 26


UPD ExpressionStatement@@MethodInvocation:properties.put("unmarshalTypeName",definition.getUnmarshalType().getName()) @TO@ MethodInvocation:properties.put("unmarshalTypeName",asTypeName(definition.getUnmarshalType())) @AT@ 2084 @LENGTH@ 77
---UPD MethodInvocation@@properties.put("unmarshalTypeName",definition.getUnmarshalType().getName()) @TO@ properties.put("unmarshalTypeName",asTypeName(definition.getUnmarshalType())) @AT@ 2084 @LENGTH@ 76
------UPD SimpleName@@MethodName:put:["unmarshalTypeName", definition.getUnmarshalType().getName()] @TO@ MethodName:put:["unmarshalTypeName", asTypeName(definition.getUnmarshalType())] @AT@ 2095 @LENGTH@ 65
---------INS MethodInvocation@@asTypeName(definition.getUnmarshalType()) @TO@ SimpleName@@MethodName:put:["unmarshalTypeName", definition.getUnmarshalType().getName()] @AT@ 2120 @LENGTH@ 41
------------INS SimpleName@@MethodName:asTypeName:[definition.getUnmarshalType()] @TO@ MethodInvocation@@asTypeName(definition.getUnmarshalType()) @AT@ 2120 @LENGTH@ 41
---------------MOV MethodInvocation@@definition.getUnmarshalType().getName() @TO@ SimpleName@@MethodName:asTypeName:[definition.getUnmarshalType()] @AT@ 2120 @LENGTH@ 39
---------UPD MethodInvocation@@definition.getUnmarshalType().getName() @TO@ definition.getUnmarshalType() @AT@ 2120 @LENGTH@ 39


INS IfStatement@@if (LanguageSupport.hasSimpleFunction(token) && it instanceof Scanner) {  this.token=((Scanner)it).getDelim();} else {  this.token=token;} @TO@ MethodDeclaration@@public, voidMethodName:GroupTokenIterator, Exchange exchange, Iterator<?> it, String token, int group, boolean skipFirst,  @AT@ 3053 @LENGTH@ 183
---INS InfixExpression@@LanguageSupport.hasSimpleFunction(token) && it instanceof Scanner @TO@ IfStatement@@if (LanguageSupport.hasSimpleFunction(token) && it instanceof Scanner) {  this.token=((Scanner)it).getDelim();} else {  this.token=token;} @AT@ 3057 @LENGTH@ 65
------INS MethodInvocation@@LanguageSupport.hasSimpleFunction(token) @TO@ InfixExpression@@LanguageSupport.hasSimpleFunction(token) && it instanceof Scanner @AT@ 3057 @LENGTH@ 40
---------INS SimpleName@@Name:LanguageSupport @TO@ MethodInvocation@@LanguageSupport.hasSimpleFunction(token) @AT@ 3057 @LENGTH@ 15
---------INS SimpleName@@MethodName:hasSimpleFunction:[token] @TO@ MethodInvocation@@LanguageSupport.hasSimpleFunction(token) @AT@ 3073 @LENGTH@ 24
------------INS SimpleName@@token @TO@ SimpleName@@MethodName:hasSimpleFunction:[token] @AT@ 3091 @LENGTH@ 5
------INS Operator@@&& @TO@ InfixExpression@@LanguageSupport.hasSimpleFunction(token) && it instanceof Scanner @AT@ 3097 @LENGTH@ 2
------INS InstanceofExpression@@it instanceof Scanner @TO@ InfixExpression@@LanguageSupport.hasSimpleFunction(token) && it instanceof Scanner @AT@ 3101 @LENGTH@ 21
---------INS SimpleName@@it @TO@ InstanceofExpression@@it instanceof Scanner @AT@ 3101 @LENGTH@ 2
---------INS Instanceof@@instanceof @TO@ InstanceofExpression@@it instanceof Scanner @AT@ 3104 @LENGTH@ 10
---------INS SimpleType@@Scanner @TO@ InstanceofExpression@@it instanceof Scanner @AT@ 3115 @LENGTH@ 7
---INS Block@@ThenBody:{  this.token=((Scanner)it).getDelim();} @TO@ IfStatement@@if (LanguageSupport.hasSimpleFunction(token) && it instanceof Scanner) {  this.token=((Scanner)it).getDelim();} else {  this.token=token;} @AT@ 3124 @LENGTH@ 63
------INS ExpressionStatement@@Assignment:this.token=((Scanner)it).getDelim() @TO@ Block@@ThenBody:{  this.token=((Scanner)it).getDelim();} @AT@ 3138 @LENGTH@ 39
---------INS Assignment@@this.token=((Scanner)it).getDelim() @TO@ ExpressionStatement@@Assignment:this.token=((Scanner)it).getDelim() @AT@ 3138 @LENGTH@ 38
------------INS FieldAccess@@this.token @TO@ Assignment@@this.token=((Scanner)it).getDelim() @AT@ 3138 @LENGTH@ 10
---------------INS ThisExpression@@this @TO@ FieldAccess@@this.token @AT@ 3138 @LENGTH@ 4
---------------INS SimpleName@@token @TO@ FieldAccess@@this.token @AT@ 3143 @LENGTH@ 5
------------INS Operator@@= @TO@ Assignment@@this.token=((Scanner)it).getDelim() @AT@ 3148 @LENGTH@ 1
------------INS MethodInvocation@@((Scanner)it).getDelim() @TO@ Assignment@@this.token=((Scanner)it).getDelim() @AT@ 3151 @LENGTH@ 25
---------------INS ParenthesizedExpression@@((Scanner)it) @TO@ MethodInvocation@@((Scanner)it).getDelim() @AT@ 3151 @LENGTH@ 14
------------------INS CastExpression@@(Scanner)it @TO@ ParenthesizedExpression@@((Scanner)it) @AT@ 3152 @LENGTH@ 12
---------------------INS SimpleType@@Scanner @TO@ CastExpression@@(Scanner)it @AT@ 3153 @LENGTH@ 7
---------------------INS SimpleName@@it @TO@ CastExpression@@(Scanner)it @AT@ 3162 @LENGTH@ 2
---------------INS SimpleName@@MethodName:getDelim:[] @TO@ MethodInvocation@@((Scanner)it).getDelim() @AT@ 3166 @LENGTH@ 10
---INS Block@@ElseBody:{  this.token=token;} @TO@ IfStatement@@if (LanguageSupport.hasSimpleFunction(token) && it instanceof Scanner) {  this.token=((Scanner)it).getDelim();} else {  this.token=token;} @AT@ 3193 @LENGTH@ 43
------MOV ExpressionStatement@@Assignment:this.token=token @TO@ Block@@ElseBody:{  this.token=token;} @AT@ 2869 @LENGTH@ 19


DEL MethodDeclaration@@public, void, MethodName:resetRollbackOnly,  @AT@ 2062 @LENGTH@ 82
---DEL Modifier@@public @AT@ 2062 @LENGTH@ 6
---DEL PrimitiveType@@void @AT@ 2069 @LENGTH@ 4
---DEL SimpleName@@MethodName:resetRollbackOnly @AT@ 2074 @LENGTH@ 17
---DEL ThrowStatement@@ClassInstanceCreation:new UnsupportedOperationException() @AT@ 2099 @LENGTH@ 42
------DEL ClassInstanceCreation@@UnsupportedOperationException[] @AT@ 2105 @LENGTH@ 35
---------DEL New@@new @AT@ 2105 @LENGTH@ 3
---------DEL SimpleType@@UnsupportedOperationException @AT@ 2109 @LENGTH@ 29


UPD ReturnStatement@@MethodInvocation:Arrays.asList(dir.resolve("camel-azure-eventhubs"),dir.resolve("camel-azure-storage-blob"),dir.resolve("camel-azure-storage-datalake"),dir.resolve("camel-azure-storage-queue")) @TO@ MethodInvocation:Arrays.asList(dir.resolve("camel-azure-eventhubs"),dir.resolve("camel-azure-storage-blob"),dir.resolve("camel-azure-storage-datalake"),dir.resolve("camel-azure-cosmosdb"),dir.resolve("camel-azure-storage-queue")) @AT@ 49065 @LENGTH@ 235
---UPD MethodInvocation@@Arrays.asList(dir.resolve("camel-azure-eventhubs"),dir.resolve("camel-azure-storage-blob"),dir.resolve("camel-azure-storage-datalake"),dir.resolve("camel-azure-storage-queue")) @TO@ Arrays.asList(dir.resolve("camel-azure-eventhubs"),dir.resolve("camel-azure-storage-blob"),dir.resolve("camel-azure-storage-datalake"),dir.resolve("camel-azure-cosmosdb"),dir.resolve("camel-azure-storage-queue")) @AT@ 49072 @LENGTH@ 227
------UPD SimpleName@@MethodName:asList:[dir.resolve("camel-azure-eventhubs"), dir.resolve("camel-azure-storage-blob"), dir.resolve("camel-azure-storage-datalake"), dir.resolve("camel-azure-storage-queue")] @TO@ MethodName:asList:[dir.resolve("camel-azure-eventhubs"), dir.resolve("camel-azure-storage-blob"), dir.resolve("camel-azure-storage-datalake"), dir.resolve("camel-azure-cosmosdb"), dir.resolve("camel-azure-storage-queue")] @AT@ 49079 @LENGTH@ 220
---------INS MethodInvocation@@dir.resolve("camel-azure-cosmosdb") @TO@ SimpleName@@MethodName:asList:[dir.resolve("camel-azure-eventhubs"), dir.resolve("camel-azure-storage-blob"), dir.resolve("camel-azure-storage-datalake"), dir.resolve("camel-azure-storage-queue")] @AT@ 49234 @LENGTH@ 35
------------INS SimpleName@@Name:dir @TO@ MethodInvocation@@dir.resolve("camel-azure-cosmosdb") @AT@ 49234 @LENGTH@ 3
------------INS SimpleName@@MethodName:resolve:["camel-azure-cosmosdb"] @TO@ MethodInvocation@@dir.resolve("camel-azure-cosmosdb") @AT@ 49238 @LENGTH@ 31
---------------INS StringLiteral@@"camel-azure-cosmosdb" @TO@ SimpleName@@MethodName:resolve:["camel-azure-cosmosdb"] @AT@ 49246 @LENGTH@ 22


DEL ExpressionStatement@@Assignment:this.objectMapper=new ObjectMapper() @AT@ 1244 @LENGTH@ 39
---DEL Assignment@@this.objectMapper=new ObjectMapper() @AT@ 1244 @LENGTH@ 38
------DEL FieldAccess@@this.objectMapper @AT@ 1244 @LENGTH@ 17
---------DEL ThisExpression@@this @AT@ 1244 @LENGTH@ 4
---------DEL SimpleName@@objectMapper @AT@ 1249 @LENGTH@ 12
------DEL Operator@@= @AT@ 1261 @LENGTH@ 1
------DEL ClassInstanceCreation@@ObjectMapper[] @AT@ 1264 @LENGTH@ 18


INS VariableDeclarationStatement@@Set<String> neededColumns=new HashSet<String>(); @TO@ MethodDeclaration@@public, static, Optional<Set<String>>, MethodName:colMappingInverseKeys, ReduceSinkOperator rs,  @AT@ 10159 @LENGTH@ 50
---INS ParameterizedType@@Set<String> @TO@ VariableDeclarationStatement@@Set<String> neededColumns=new HashSet<String>(); @AT@ 10159 @LENGTH@ 11
------INS SimpleType@@Set @TO@ ParameterizedType@@Set<String> @AT@ 10159 @LENGTH@ 3
------INS SimpleType@@String @TO@ ParameterizedType@@Set<String> @AT@ 10163 @LENGTH@ 6
---INS VariableDeclarationFragment@@neededColumns=new HashSet<String>() @TO@ VariableDeclarationStatement@@Set<String> neededColumns=new HashSet<String>(); @AT@ 10171 @LENGTH@ 37
------INS SimpleName@@neededColumns @TO@ VariableDeclarationFragment@@neededColumns=new HashSet<String>() @AT@ 10171 @LENGTH@ 13
------INS ClassInstanceCreation@@HashSet<String>[] @TO@ VariableDeclarationFragment@@neededColumns=new HashSet<String>() @AT@ 10187 @LENGTH@ 21
---------INS New@@new @TO@ ClassInstanceCreation@@HashSet<String>[] @AT@ 10187 @LENGTH@ 3
---------INS ParameterizedType@@HashSet<String> @TO@ ClassInstanceCreation@@HashSet<String>[] @AT@ 10191 @LENGTH@ 15
------------INS SimpleType@@HashSet @TO@ ParameterizedType@@HashSet<String> @AT@ 10191 @LENGTH@ 7
------------INS SimpleType@@String @TO@ ParameterizedType@@HashSet<String> @AT@ 10199 @LENGTH@ 6


DEL VariableDeclarationStatement@@UnitOfWork uow=exchange.getUnitOfWork(); @AT@ 14317 @LENGTH@ 42
---DEL SimpleType@@UnitOfWork @AT@ 14317 @LENGTH@ 10
---DEL VariableDeclarationFragment@@uow=exchange.getUnitOfWork() @AT@ 14328 @LENGTH@ 30
------DEL SimpleName@@uow @AT@ 14328 @LENGTH@ 3
------DEL MethodInvocation@@exchange.getUnitOfWork() @AT@ 14334 @LENGTH@ 24
---------DEL SimpleName@@Name:exchange @AT@ 14334 @LENGTH@ 8
---------DEL SimpleName@@MethodName:getUnitOfWork:[] @AT@ 14343 @LENGTH@ 15


INS TryStatement@@try {  context.refresh();  context.registerShutdownHook();}  finally {  SpringCamelContext.setNoStart(false);} @TO@ MethodDeclaration@@protected, ApplicationContext, MethodName:loadContext, GenericApplicationContext context, Class<?> testClass, Exception,  @AT@ 6510 @LENGTH@ 257
---MOV ExpressionStatement@@MethodInvocation:context.refresh() @TO@ TryStatement@@try {  context.refresh();  context.registerShutdownHook();}  finally {  SpringCamelContext.setNoStart(false);} @AT@ 6510 @LENGTH@ 18
---MOV ExpressionStatement@@MethodInvocation:context.registerShutdownHook() @TO@ TryStatement@@try {  context.refresh();  context.registerShutdownHook();}  finally {  SpringCamelContext.setNoStart(false);} @AT@ 6537 @LENGTH@ 31
---INS Block@@FinallyBody:{  SpringCamelContext.setNoStart(false);} @TO@ TryStatement@@try {  context.refresh();  context.registerShutdownHook();}  finally {  SpringCamelContext.setNoStart(false);} @AT@ 6609 @LENGTH@ 158
------MOV ExpressionStatement@@MethodInvocation:SpringCamelContext.setNoStart(false) @TO@ Block@@FinallyBody:{  SpringCamelContext.setNoStart(false);} @AT@ 6670 @LENGTH@ 37


UPD IfStatement@@if (clientRequestValidation == true) {  configure.addCode(".clientRequestValidation(true)");} @TO@ if (clientRequestValidation) {  configure.addCode(".clientRequestValidation(true)");} @AT@ 4031 @LENGTH@ 121
---DEL InfixExpression@@clientRequestValidation == true @AT@ 4035 @LENGTH@ 31
------DEL SimpleName@@clientRequestValidation @AT@ 4035 @LENGTH@ 23
------DEL Operator@@== @AT@ 4058 @LENGTH@ 2
------DEL BooleanLiteral@@true @AT@ 4062 @LENGTH@ 4
---INS SimpleName@@clientRequestValidation @TO@ IfStatement@@if (clientRequestValidation == true) {  configure.addCode(".clientRequestValidation(true)");} @AT@ 4035 @LENGTH@ 23


INS ExpressionStatement@@MethodInvocation:camelContext.adapt(ExtendedCamelContext.class).addBootstrap(() -> {
  route.clearRouteModel();
}
) @TO@ MethodDeclaration@@protected, Route, MethodName:doCreateRoute, Exception,  @AT@ 16064 @LENGTH@ 234
---INS MethodInvocation@@camelContext.adapt(ExtendedCamelContext.class).addBootstrap(() -> {
  route.clearRouteModel();
}
) @TO@ ExpressionStatement@@MethodInvocation:camelContext.adapt(ExtendedCamelContext.class).addBootstrap(() -> {
  route.clearRouteModel();
}
) @AT@ 16064 @LENGTH@ 233
------INS MethodInvocation@@MethodName:adapt:[ExtendedCamelContext.class] @TO@ MethodInvocation@@camelContext.adapt(ExtendedCamelContext.class).addBootstrap(() -> {
  route.clearRouteModel();
}
) @AT@ 16064 @LENGTH@ 46
---------INS TypeLiteral@@ExtendedCamelContext.class @TO@ MethodInvocation@@MethodName:adapt:[ExtendedCamelContext.class] @AT@ 16083 @LENGTH@ 26
------INS SimpleName@@Name:camelContext @TO@ MethodInvocation@@camelContext.adapt(ExtendedCamelContext.class).addBootstrap(() -> {
  route.clearRouteModel();
}
) @AT@ 16064 @LENGTH@ 12
------INS SimpleName@@MethodName:addBootstrap:[() -> {
  route.clearRouteModel();
}
] @TO@ MethodInvocation@@camelContext.adapt(ExtendedCamelContext.class).addBootstrap(() -> {
  route.clearRouteModel();
}
) @AT@ 16111 @LENGTH@ 186
---------INS LambdaExpression@@() -> {
  route.clearRouteModel();
}
 @TO@ SimpleName@@MethodName:addBootstrap:[() -> {
  route.clearRouteModel();
}
] @AT@ 16124 @LENGTH@ 172
------------MOV ExpressionStatement@@MethodInvocation:route.clearRouteModel() @TO@ LambdaExpression@@() -> {
  route.clearRouteModel();
}
 @AT@ 16178 @LENGTH@ 24


UPD ExpressionStatement@@Assignment:volume=volumes.get(1) @TO@ Assignment:volume=volumes.get(0) @AT@ 6022 @LENGTH@ 24
---UPD Assignment@@volume=volumes.get(1) @TO@ volume=volumes.get(0) @AT@ 6022 @LENGTH@ 23
------UPD MethodInvocation@@volumes.get(1) @TO@ volumes.get(0) @AT@ 6031 @LENGTH@ 14
---------UPD SimpleName@@MethodName:get:[1] @TO@ MethodName:get:[0] @AT@ 6039 @LENGTH@ 6
------------UPD NumberLiteral@@1 @TO@ 0 @AT@ 6043 @LENGTH@ 1


UPD FieldDeclaration@@private, Entry<K,V>, [current=null] @TO@ private, Entry<K,V>, [current] @AT@ 21353 @LENGTH@ 35
---UPD VariableDeclarationFragment@@current=null @TO@ current @AT@ 21373 @LENGTH@ 14
------DEL NullLiteral@@null @AT@ 21383 @LENGTH@ 4


UPD IfStatement@@if (withinContext.oldReplScope != null) {  needDump=handleRenameForReplacePolicy(withinContext,oldName,newName);} else if (!withinContext.replScope.includeAllTables()) {  needDump=handleRenameForTableLevelReplication(withinContext,oldName,newName);} @TO@ if (withinContext.oldReplScope != null && !withinContext.oldReplScope.equals(withinContext.replScope)) {  needDump=handleRenameForReplacePolicy(withinContext,oldName,newName);} else if (!withinContext.replScope.includeAllTables()) {  needDump=handleRenameForTableLevelReplication(withinContext,oldName,newName);} @AT@ 9149 @LENGTH@ 285
---INS InfixExpression@@withinContext.oldReplScope != null && !withinContext.oldReplScope.equals(withinContext.replScope) @TO@ IfStatement@@if (withinContext.oldReplScope != null) {  needDump=handleRenameForReplacePolicy(withinContext,oldName,newName);} else if (!withinContext.replScope.includeAllTables()) {  needDump=handleRenameForTableLevelReplication(withinContext,oldName,newName);} @AT@ 9153 @LENGTH@ 97
------MOV InfixExpression@@withinContext.oldReplScope != null @TO@ InfixExpression@@withinContext.oldReplScope != null && !withinContext.oldReplScope.equals(withinContext.replScope) @AT@ 9153 @LENGTH@ 34
------INS Operator@@&& @TO@ InfixExpression@@withinContext.oldReplScope != null && !withinContext.oldReplScope.equals(withinContext.replScope) @AT@ 9187 @LENGTH@ 2
------INS PrefixExpression@@!withinContext.oldReplScope.equals(withinContext.replScope) @TO@ InfixExpression@@withinContext.oldReplScope != null && !withinContext.oldReplScope.equals(withinContext.replScope) @AT@ 9191 @LENGTH@ 59
---------INS Operator@@! @TO@ PrefixExpression@@!withinContext.oldReplScope.equals(withinContext.replScope) @AT@ 9191 @LENGTH@ 1
---------INS MethodInvocation@@withinContext.oldReplScope.equals(withinContext.replScope) @TO@ PrefixExpression@@!withinContext.oldReplScope.equals(withinContext.replScope) @AT@ 9192 @LENGTH@ 58
------------INS QualifiedName@@Name:withinContext.oldReplScope @TO@ MethodInvocation@@withinContext.oldReplScope.equals(withinContext.replScope) @AT@ 9192 @LENGTH@ 26
------------INS SimpleName@@MethodName:equals:[withinContext.replScope] @TO@ MethodInvocation@@withinContext.oldReplScope.equals(withinContext.replScope) @AT@ 9219 @LENGTH@ 31
---------------INS QualifiedName@@withinContext.replScope @TO@ SimpleName@@MethodName:equals:[withinContext.replScope] @AT@ 9226 @LENGTH@ 23
------------------INS SimpleName@@withinContext @TO@ QualifiedName@@withinContext.replScope @AT@ 9226 @LENGTH@ 13
------------------INS SimpleName@@replScope @TO@ QualifiedName@@withinContext.replScope @AT@ 9240 @LENGTH@ 9


UPD FieldDeclaration@@private, int, [index=0] @TO@ private, int, [index] @AT@ 1394 @LENGTH@ 22
---UPD VariableDeclarationFragment@@index=0 @TO@ index @AT@ 1406 @LENGTH@ 9
------DEL NumberLiteral@@0 @AT@ 1414 @LENGTH@ 1


MOV FieldDeclaration@@private, int, [total=100] @TO@ TypeDeclaration@@[public]TransactedStackSizeParallelProcessingTest, TransactionClientDataSourceSupport @AT@ 1085 @LENGTH@ 24


UPD MethodDeclaration@@public, void, MethodName:testCalculateRawEncodingAdditonalUTF32, IOException,  @TO@ public, void, MethodName:testCalculateRawEncodingAdditionalUTF32, IOException,  @AT@ 9734 @LENGTH@ 960
---UPD SimpleName@@MethodName:testCalculateRawEncodingAdditonalUTF32 @TO@ MethodName:testCalculateRawEncodingAdditionalUTF32 @AT@ 9746 @LENGTH@ 38


UPD FieldDeclaration@@private, int, [currentIndex=0] @TO@ private, int, [currentIndex] @AT@ 2682 @LENGTH@ 29
---UPD VariableDeclarationFragment@@currentIndex=0 @TO@ currentIndex @AT@ 2694 @LENGTH@ 16
------DEL NumberLiteral@@0 @AT@ 2709 @LENGTH@ 1


UPD VariableDeclarationStatement@@Set<ObjectName> set=getMBeanServer().queryNames(new ObjectName("*:context=camel-1,type=endpoints,*"),null); @TO@ Set<ObjectName> set=getMBeanServer().queryNames(new ObjectName("*:context=" + context.getManagementName() + ",type=endpoints,*"),null); @AT@ 2631 @LENGTH@ 110
---UPD VariableDeclarationFragment@@set=getMBeanServer().queryNames(new ObjectName("*:context=camel-1,type=endpoints,*"),null) @TO@ set=getMBeanServer().queryNames(new ObjectName("*:context=" + context.getManagementName() + ",type=endpoints,*"),null) @AT@ 2647 @LENGTH@ 93
------UPD MethodInvocation@@getMBeanServer().queryNames(new ObjectName("*:context=camel-1,type=endpoints,*"),null) @TO@ getMBeanServer().queryNames(new ObjectName("*:context=" + context.getManagementName() + ",type=endpoints,*"),null) @AT@ 2653 @LENGTH@ 87
---------UPD SimpleName@@MethodName:queryNames:[new ObjectName("*:context=camel-1,type=endpoints,*"), null] @TO@ MethodName:queryNames:[new ObjectName("*:context=" + context.getManagementName() + ",type=endpoints,*"), null] @AT@ 2670 @LENGTH@ 70
------------UPD ClassInstanceCreation@@ObjectName["*:context=camel-1,type=endpoints,*"] @TO@ ObjectName["*:context=" + context.getManagementName() + ",type=endpoints,*"] @AT@ 2681 @LENGTH@ 52
---------------DEL StringLiteral@@"*:context=camel-1,type=endpoints,*" @AT@ 2696 @LENGTH@ 36
---------------INS InfixExpression@@"*:context=" + context.getManagementName() + ",type=endpoints,*" @TO@ ClassInstanceCreation@@ObjectName["*:context=camel-1,type=endpoints,*"] @AT@ 2770 @LENGTH@ 64
------------------INS StringLiteral@@"*:context=" @TO@ InfixExpression@@"*:context=" + context.getManagementName() + ",type=endpoints,*" @AT@ 2770 @LENGTH@ 12
------------------INS Operator@@+ @TO@ InfixExpression@@"*:context=" + context.getManagementName() + ",type=endpoints,*" @AT@ 2782 @LENGTH@ 1
------------------INS MethodInvocation@@context.getManagementName() @TO@ InfixExpression@@"*:context=" + context.getManagementName() + ",type=endpoints,*" @AT@ 2785 @LENGTH@ 27
---------------------INS SimpleName@@Name:context @TO@ MethodInvocation@@context.getManagementName() @AT@ 2785 @LENGTH@ 7
---------------------INS SimpleName@@MethodName:getManagementName:[] @TO@ MethodInvocation@@context.getManagementName() @AT@ 2793 @LENGTH@ 19
------------------INS StringLiteral@@",type=endpoints,*" @TO@ InfixExpression@@"*:context=" + context.getManagementName() + ",type=endpoints,*" @AT@ 2815 @LENGTH@ 19


INS MethodDeclaration@@public, void, MethodName:testInsertEmptyResultSet, IOException,  @TO@ TypeDeclaration@@[@RunWith(Parameterized.class), public]TestHiveIcebergStorageHandlerWithEngine,  @AT@ 32633 @LENGTH@ 822
---INS Modifier@@public @TO@ MethodDeclaration@@public, void, MethodName:testInsertEmptyResultSet, IOException,  @AT@ 32633 @LENGTH@ 6
---INS PrimitiveType@@void @TO@ MethodDeclaration@@public, void, MethodName:testInsertEmptyResultSet, IOException,  @AT@ 32640 @LENGTH@ 4
---INS SimpleName@@MethodName:testInsertEmptyResultSet @TO@ MethodDeclaration@@public, void, MethodName:testInsertEmptyResultSet, IOException,  @AT@ 32645 @LENGTH@ 24
---INS SimpleType@@IOException @TO@ MethodDeclaration@@public, void, MethodName:testInsertEmptyResultSet, IOException,  @AT@ 32679 @LENGTH@ 11
---INS VariableDeclarationStatement@@Table source=testTables.createTable(shell,"source",HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA,fileFormat,ImmutableList.of()); @TO@ MethodDeclaration@@public, void, MethodName:testInsertEmptyResultSet, IOException,  @AT@ 32697 @LENGTH@ 147
------INS SimpleType@@Table @TO@ VariableDeclarationStatement@@Table source=testTables.createTable(shell,"source",HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA,fileFormat,ImmutableList.of()); @AT@ 32697 @LENGTH@ 5
------INS VariableDeclarationFragment@@source=testTables.createTable(shell,"source",HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA,fileFormat,ImmutableList.of()) @TO@ VariableDeclarationStatement@@Table source=testTables.createTable(shell,"source",HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA,fileFormat,ImmutableList.of()); @AT@ 32703 @LENGTH@ 140
---------INS SimpleName@@source @TO@ VariableDeclarationFragment@@source=testTables.createTable(shell,"source",HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA,fileFormat,ImmutableList.of()) @AT@ 32703 @LENGTH@ 6
---------INS MethodInvocation@@testTables.createTable(shell,"source",HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA,fileFormat,ImmutableList.of()) @TO@ VariableDeclarationFragment@@source=testTables.createTable(shell,"source",HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA,fileFormat,ImmutableList.of()) @AT@ 32712 @LENGTH@ 131
------------INS SimpleName@@Name:testTables @TO@ MethodInvocation@@testTables.createTable(shell,"source",HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA,fileFormat,ImmutableList.of()) @AT@ 32712 @LENGTH@ 10
------------INS SimpleName@@MethodName:createTable:[shell, "source", HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA, fileFormat, ImmutableList.of()] @TO@ MethodInvocation@@testTables.createTable(shell,"source",HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA,fileFormat,ImmutableList.of()) @AT@ 32723 @LENGTH@ 120
---------------INS SimpleName@@shell @TO@ SimpleName@@MethodName:createTable:[shell, "source", HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA, fileFormat, ImmutableList.of()] @AT@ 32735 @LENGTH@ 5
---------------INS StringLiteral@@"source" @TO@ SimpleName@@MethodName:createTable:[shell, "source", HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA, fileFormat, ImmutableList.of()] @AT@ 32742 @LENGTH@ 8
---------------INS QualifiedName@@HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA @TO@ SimpleName@@MethodName:createTable:[shell, "source", HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA, fileFormat, ImmutableList.of()] @AT@ 32752 @LENGTH@ 50
------------------INS SimpleName@@HiveIcebergStorageHandlerTestUtils @TO@ QualifiedName@@HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA @AT@ 32752 @LENGTH@ 34
------------------INS SimpleName@@CUSTOMER_SCHEMA @TO@ QualifiedName@@HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA @AT@ 32787 @LENGTH@ 15
---------------INS SimpleName@@fileFormat @TO@ SimpleName@@MethodName:createTable:[shell, "source", HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA, fileFormat, ImmutableList.of()] @AT@ 32812 @LENGTH@ 10
---------------INS MethodInvocation@@ImmutableList.of() @TO@ SimpleName@@MethodName:createTable:[shell, "source", HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA, fileFormat, ImmutableList.of()] @AT@ 32824 @LENGTH@ 18
------------------INS SimpleName@@Name:ImmutableList @TO@ MethodInvocation@@ImmutableList.of() @AT@ 32824 @LENGTH@ 13
------------------INS SimpleName@@MethodName:of:[] @TO@ MethodInvocation@@ImmutableList.of() @AT@ 32838 @LENGTH@ 4
---INS VariableDeclarationStatement@@Table target=testTables.createTable(shell,"target",HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA,fileFormat,ImmutableList.of()); @TO@ MethodDeclaration@@public, void, MethodName:testInsertEmptyResultSet, IOException,  @AT@ 32849 @LENGTH@ 147
------INS SimpleType@@Table @TO@ VariableDeclarationStatement@@Table target=testTables.createTable(shell,"target",HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA,fileFormat,ImmutableList.of()); @AT@ 32849 @LENGTH@ 5
------INS VariableDeclarationFragment@@target=testTables.createTable(shell,"target",HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA,fileFormat,ImmutableList.of()) @TO@ VariableDeclarationStatement@@Table target=testTables.createTable(shell,"target",HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA,fileFormat,ImmutableList.of()); @AT@ 32855 @LENGTH@ 140
---------INS SimpleName@@target @TO@ VariableDeclarationFragment@@target=testTables.createTable(shell,"target",HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA,fileFormat,ImmutableList.of()) @AT@ 32855 @LENGTH@ 6
---------INS MethodInvocation@@testTables.createTable(shell,"target",HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA,fileFormat,ImmutableList.of()) @TO@ VariableDeclarationFragment@@target=testTables.createTable(shell,"target",HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA,fileFormat,ImmutableList.of()) @AT@ 32864 @LENGTH@ 131
------------INS SimpleName@@Name:testTables @TO@ MethodInvocation@@testTables.createTable(shell,"target",HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA,fileFormat,ImmutableList.of()) @AT@ 32864 @LENGTH@ 10
------------INS SimpleName@@MethodName:createTable:[shell, "target", HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA, fileFormat, ImmutableList.of()] @TO@ MethodInvocation@@testTables.createTable(shell,"target",HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA,fileFormat,ImmutableList.of()) @AT@ 32875 @LENGTH@ 120
---------------INS SimpleName@@shell @TO@ SimpleName@@MethodName:createTable:[shell, "target", HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA, fileFormat, ImmutableList.of()] @AT@ 32887 @LENGTH@ 5
---------------INS StringLiteral@@"target" @TO@ SimpleName@@MethodName:createTable:[shell, "target", HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA, fileFormat, ImmutableList.of()] @AT@ 32894 @LENGTH@ 8
---------------INS QualifiedName@@HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA @TO@ SimpleName@@MethodName:createTable:[shell, "target", HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA, fileFormat, ImmutableList.of()] @AT@ 32904 @LENGTH@ 50
------------------INS SimpleName@@HiveIcebergStorageHandlerTestUtils @TO@ QualifiedName@@HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA @AT@ 32904 @LENGTH@ 34
------------------INS SimpleName@@CUSTOMER_SCHEMA @TO@ QualifiedName@@HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA @AT@ 32939 @LENGTH@ 15
---------------INS SimpleName@@fileFormat @TO@ SimpleName@@MethodName:createTable:[shell, "target", HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA, fileFormat, ImmutableList.of()] @AT@ 32964 @LENGTH@ 10
---------------INS MethodInvocation@@ImmutableList.of() @TO@ SimpleName@@MethodName:createTable:[shell, "target", HiveIcebergStorageHandlerTestUtils.CUSTOMER_SCHEMA, fileFormat, ImmutableList.of()] @AT@ 32976 @LENGTH@ 18
------------------INS SimpleName@@Name:ImmutableList @TO@ MethodInvocation@@ImmutableList.of() @AT@ 32976 @LENGTH@ 13
------------------INS SimpleName@@MethodName:of:[] @TO@ MethodInvocation@@ImmutableList.of() @AT@ 32990 @LENGTH@ 4
---INS ExpressionStatement@@MethodInvocation:shell.executeStatement("INSERT INTO target SELECT * FROM source") @TO@ MethodDeclaration@@public, void, MethodName:testInsertEmptyResultSet, IOException,  @AT@ 33002 @LENGTH@ 66
------INS MethodInvocation@@shell.executeStatement("INSERT INTO target SELECT * FROM source") @TO@ ExpressionStatement@@MethodInvocation:shell.executeStatement("INSERT INTO target SELECT * FROM source") @AT@ 33002 @LENGTH@ 65
---------INS SimpleName@@Name:shell @TO@ MethodInvocation@@shell.executeStatement("INSERT INTO target SELECT * FROM source") @AT@ 33002 @LENGTH@ 5
---------INS SimpleName@@MethodName:executeStatement:["INSERT INTO target SELECT * FROM source"] @TO@ MethodInvocation@@shell.executeStatement("INSERT INTO target SELECT * FROM source") @AT@ 33008 @LENGTH@ 59
------------INS StringLiteral@@"INSERT INTO target SELECT * FROM source" @TO@ SimpleName@@MethodName:executeStatement:["INSERT INTO target SELECT * FROM source"] @AT@ 33025 @LENGTH@ 41
---INS ExpressionStatement@@MethodInvocation:HiveIcebergTestUtils.validateData(target,ImmutableList.of(),0) @TO@ MethodDeclaration@@public, void, MethodName:testInsertEmptyResultSet, IOException,  @AT@ 33073 @LENGTH@ 65
------INS MethodInvocation@@HiveIcebergTestUtils.validateData(target,ImmutableList.of(),0) @TO@ ExpressionStatement@@MethodInvocation:HiveIcebergTestUtils.validateData(target,ImmutableList.of(),0) @AT@ 33073 @LENGTH@ 64
---------INS SimpleName@@Name:HiveIcebergTestUtils @TO@ MethodInvocation@@HiveIcebergTestUtils.validateData(target,ImmutableList.of(),0) @AT@ 33073 @LENGTH@ 20
---------INS SimpleName@@MethodName:validateData:[target, ImmutableList.of(), 0] @TO@ MethodInvocation@@HiveIcebergTestUtils.validateData(target,ImmutableList.of(),0) @AT@ 33094 @LENGTH@ 43
------------INS SimpleName@@target @TO@ SimpleName@@MethodName:validateData:[target, ImmutableList.of(), 0] @AT@ 33107 @LENGTH@ 6
------------INS MethodInvocation@@ImmutableList.of() @TO@ SimpleName@@MethodName:validateData:[target, ImmutableList.of(), 0] @AT@ 33115 @LENGTH@ 18
---------------INS SimpleName@@Name:ImmutableList @TO@ MethodInvocation@@ImmutableList.of() @AT@ 33115 @LENGTH@ 13
---------------INS SimpleName@@MethodName:of:[] @TO@ MethodInvocation@@ImmutableList.of() @AT@ 33129 @LENGTH@ 4
------------INS NumberLiteral@@0 @TO@ SimpleName@@MethodName:validateData:[target, ImmutableList.of(), 0] @AT@ 33135 @LENGTH@ 1
---INS ExpressionStatement@@MethodInvocation:testTables.appendIcebergTable(shell.getHiveConf(),source,fileFormat,null,HiveIcebergStorageHandlerTestUtils.CUSTOMER_RECORDS) @TO@ MethodDeclaration@@public, void, MethodName:testInsertEmptyResultSet, IOException,  @AT@ 33144 @LENGTH@ 138
------INS MethodInvocation@@testTables.appendIcebergTable(shell.getHiveConf(),source,fileFormat,null,HiveIcebergStorageHandlerTestUtils.CUSTOMER_RECORDS) @TO@ ExpressionStatement@@MethodInvocation:testTables.appendIcebergTable(shell.getHiveConf(),source,fileFormat,null,HiveIcebergStorageHandlerTestUtils.CUSTOMER_RECORDS) @AT@ 33144 @LENGTH@ 137
---------INS SimpleName@@Name:testTables @TO@ MethodInvocation@@testTables.appendIcebergTable(shell.getHiveConf(),source,fileFormat,null,HiveIcebergStorageHandlerTestUtils.CUSTOMER_RECORDS) @AT@ 33144 @LENGTH@ 10
---------INS SimpleName@@MethodName:appendIcebergTable:[shell.getHiveConf(), source, fileFormat, null, HiveIcebergStorageHandlerTestUtils.CUSTOMER_RECORDS] @TO@ MethodInvocation@@testTables.appendIcebergTable(shell.getHiveConf(),source,fileFormat,null,HiveIcebergStorageHandlerTestUtils.CUSTOMER_RECORDS) @AT@ 33155 @LENGTH@ 126
------------INS MethodInvocation@@shell.getHiveConf() @TO@ SimpleName@@MethodName:appendIcebergTable:[shell.getHiveConf(), source, fileFormat, null, HiveIcebergStorageHandlerTestUtils.CUSTOMER_RECORDS] @AT@ 33174 @LENGTH@ 19
---------------INS SimpleName@@Name:shell @TO@ MethodInvocation@@shell.getHiveConf() @AT@ 33174 @LENGTH@ 5
---------------INS SimpleName@@MethodName:getHiveConf:[] @TO@ MethodInvocation@@shell.getHiveConf() @AT@ 33180 @LENGTH@ 13
------------INS SimpleName@@source @TO@ SimpleName@@MethodName:appendIcebergTable:[shell.getHiveConf(), source, fileFormat, null, HiveIcebergStorageHandlerTestUtils.CUSTOMER_RECORDS] @AT@ 33195 @LENGTH@ 6
------------INS SimpleName@@fileFormat @TO@ SimpleName@@MethodName:appendIcebergTable:[shell.getHiveConf(), source, fileFormat, null, HiveIcebergStorageHandlerTestUtils.CUSTOMER_RECORDS] @AT@ 33203 @LENGTH@ 10
------------INS NullLiteral@@null @TO@ SimpleName@@MethodName:appendIcebergTable:[shell.getHiveConf(), source, fileFormat, null, HiveIcebergStorageHandlerTestUtils.CUSTOMER_RECORDS] @AT@ 33215 @LENGTH@ 4
------------INS QualifiedName@@HiveIcebergStorageHandlerTestUtils.CUSTOMER_RECORDS @TO@ SimpleName@@MethodName:appendIcebergTable:[shell.getHiveConf(), source, fileFormat, null, HiveIcebergStorageHandlerTestUtils.CUSTOMER_RECORDS] @AT@ 33229 @LENGTH@ 51
---------------INS SimpleName@@HiveIcebergStorageHandlerTestUtils @TO@ QualifiedName@@HiveIcebergStorageHandlerTestUtils.CUSTOMER_RECORDS @AT@ 33229 @LENGTH@ 34
---------------INS SimpleName@@CUSTOMER_RECORDS @TO@ QualifiedName@@HiveIcebergStorageHandlerTestUtils.CUSTOMER_RECORDS @AT@ 33264 @LENGTH@ 16
---INS ExpressionStatement@@MethodInvocation:shell.executeStatement("INSERT INTO target SELECT * FROM source WHERE first_name = 'Nobody'") @TO@ MethodDeclaration@@public, void, MethodName:testInsertEmptyResultSet, IOException,  @AT@ 33287 @LENGTH@ 94
------INS MethodInvocation@@shell.executeStatement("INSERT INTO target SELECT * FROM source WHERE first_name = 'Nobody'") @TO@ ExpressionStatement@@MethodInvocation:shell.executeStatement("INSERT INTO target SELECT * FROM source WHERE first_name = 'Nobody'") @AT@ 33287 @LENGTH@ 93
---------INS SimpleName@@Name:shell @TO@ MethodInvocation@@shell.executeStatement("INSERT INTO target SELECT * FROM source WHERE first_name = 'Nobody'") @AT@ 33287 @LENGTH@ 5
---------INS SimpleName@@MethodName:executeStatement:["INSERT INTO target SELECT * FROM source WHERE first_name = 'Nobody'"] @TO@ MethodInvocation@@shell.executeStatement("INSERT INTO target SELECT * FROM source WHERE first_name = 'Nobody'") @AT@ 33293 @LENGTH@ 87
------------INS StringLiteral@@"INSERT INTO target SELECT * FROM source WHERE first_name = 'Nobody'" @TO@ SimpleName@@MethodName:executeStatement:["INSERT INTO target SELECT * FROM source WHERE first_name = 'Nobody'"] @AT@ 33310 @LENGTH@ 69
---INS ExpressionStatement@@MethodInvocation:HiveIcebergTestUtils.validateData(target,ImmutableList.of(),0) @TO@ MethodDeclaration@@public, void, MethodName:testInsertEmptyResultSet, IOException,  @AT@ 33386 @LENGTH@ 65
------INS MethodInvocation@@HiveIcebergTestUtils.validateData(target,ImmutableList.of(),0) @TO@ ExpressionStatement@@MethodInvocation:HiveIcebergTestUtils.validateData(target,ImmutableList.of(),0) @AT@ 33386 @LENGTH@ 64
---------INS SimpleName@@Name:HiveIcebergTestUtils @TO@ MethodInvocation@@HiveIcebergTestUtils.validateData(target,ImmutableList.of(),0) @AT@ 33386 @LENGTH@ 20
---------INS SimpleName@@MethodName:validateData:[target, ImmutableList.of(), 0] @TO@ MethodInvocation@@HiveIcebergTestUtils.validateData(target,ImmutableList.of(),0) @AT@ 33407 @LENGTH@ 43
------------INS SimpleName@@target @TO@ SimpleName@@MethodName:validateData:[target, ImmutableList.of(), 0] @AT@ 33420 @LENGTH@ 6
------------INS MethodInvocation@@ImmutableList.of() @TO@ SimpleName@@MethodName:validateData:[target, ImmutableList.of(), 0] @AT@ 33428 @LENGTH@ 18
---------------INS SimpleName@@Name:ImmutableList @TO@ MethodInvocation@@ImmutableList.of() @AT@ 33428 @LENGTH@ 13
---------------INS SimpleName@@MethodName:of:[] @TO@ MethodInvocation@@ImmutableList.of() @AT@ 33442 @LENGTH@ 4
------------INS NumberLiteral@@0 @TO@ SimpleName@@MethodName:validateData:[target, ImmutableList.of(), 0] @AT@ 33448 @LENGTH@ 1


UPD ExpressionStatement@@MethodInvocation:builder.credentials(getUsername(),getPassword(),Identifier.byId(getDomain())) @TO@ MethodInvocation:builder.credentials(getUsername(),getPassword(),Identifier.byName(getDomain())) @AT@ 2465 @LENGTH@ 80
---UPD MethodInvocation@@builder.credentials(getUsername(),getPassword(),Identifier.byId(getDomain())) @TO@ builder.credentials(getUsername(),getPassword(),Identifier.byName(getDomain())) @AT@ 2465 @LENGTH@ 79
------UPD SimpleName@@MethodName:credentials:[getUsername(), getPassword(), Identifier.byId(getDomain())] @TO@ MethodName:credentials:[getUsername(), getPassword(), Identifier.byName(getDomain())] @AT@ 2473 @LENGTH@ 71
---------UPD MethodInvocation@@Identifier.byId(getDomain()) @TO@ Identifier.byName(getDomain()) @AT@ 2515 @LENGTH@ 28
------------UPD SimpleName@@MethodName:byId:[getDomain()] @TO@ MethodName:byName:[getDomain()] @AT@ 2526 @LENGTH@ 17


UPD ExpressionStatement@@MethodInvocation:from("timer:foo").routeId("foo").to("netty-http:http://0.0.0.0:{{port}}/bar?keepAlive=false&disconnect=true").to("mock:result") @TO@ MethodInvocation:from("timer:foo?repeatCount=1").routeId("foo").to("netty-http:http://0.0.0.0:{{port}}/bar?keepAlive=false&disconnect=true&connectTimeout=100ms").to("mock:result") @AT@ 2684 @LENGTH@ 178
---UPD MethodInvocation@@from("timer:foo").routeId("foo").to("netty-http:http://0.0.0.0:{{port}}/bar?keepAlive=false&disconnect=true").to("mock:result") @TO@ from("timer:foo?repeatCount=1").routeId("foo").to("netty-http:http://0.0.0.0:{{port}}/bar?keepAlive=false&disconnect=true&connectTimeout=100ms").to("mock:result") @AT@ 2684 @LENGTH@ 177
------UPD MethodInvocation@@MethodName:to:["netty-http:http://0.0.0.0:{{port}}/bar?keepAlive=false&disconnect=true"] @TO@ MethodName:to:["netty-http:http://0.0.0.0:{{port}}/bar?keepAlive=false&disconnect=true&connectTimeout=100ms"] @AT@ 2684 @LENGTH@ 134
---------UPD StringLiteral@@"netty-http:http://0.0.0.0:{{port}}/bar?keepAlive=false&disconnect=true" @TO@ "netty-http:http://0.0.0.0:{{port}}/bar?keepAlive=false&disconnect=true&connectTimeout=100ms" @AT@ 2745 @LENGTH@ 72
------UPD MethodInvocation@@MethodName:from:["timer:foo"] @TO@ MethodName:from:["timer:foo?repeatCount=1"] @AT@ 2684 @LENGTH@ 17
---------UPD StringLiteral@@"timer:foo" @TO@ "timer:foo?repeatCount=1" @AT@ 2689 @LENGTH@ 11


UPD ReturnStatement@@ClassInstanceCreation:new Schema.Field(name,createAvroSchema(typeInfo),comment,null) @TO@ ClassInstanceCreation:new Schema.Field(name,createAvroSchema(typeInfo),comment,JsonProperties.NULL_VALUE) @AT@ 2945 @LENGTH@ 73
---UPD ClassInstanceCreation@@Schema.Field[name, createAvroSchema(typeInfo), comment, null] @TO@ Schema.Field[name, createAvroSchema(typeInfo), comment, JsonProperties.NULL_VALUE] @AT@ 2952 @LENGTH@ 65
------DEL NullLiteral@@null @AT@ 3012 @LENGTH@ 4
------INS QualifiedName@@JsonProperties.NULL_VALUE @TO@ ClassInstanceCreation@@Schema.Field[name, createAvroSchema(typeInfo), comment, null] @AT@ 3051 @LENGTH@ 25
---------INS SimpleName@@JsonProperties @TO@ QualifiedName@@JsonProperties.NULL_VALUE @AT@ 3051 @LENGTH@ 14
---------INS SimpleName@@NULL_VALUE @TO@ QualifiedName@@JsonProperties.NULL_VALUE @AT@ 3066 @LENGTH@ 10


UPD ExpressionStatement@@MethodInvocation:log.info("#{} size {}",i,size) @TO@ MethodInvocation:log.debug("#{} size {}",i,size) @AT@ 2188 @LENGTH@ 33
---UPD MethodInvocation@@log.info("#{} size {}",i,size) @TO@ log.debug("#{} size {}",i,size) @AT@ 2188 @LENGTH@ 32
------UPD SimpleName@@MethodName:info:["#{} size {}", i, size] @TO@ MethodName:debug:["#{} size {}", i, size] @AT@ 2192 @LENGTH@ 28


UPD ExpressionStatement@@MethodInvocation:PropertyBindingSupport.bindProperties(this.getCamelContext(),configProps,parameters) @TO@ MethodInvocation:PropertyBindingSupport.bindProperties(this.getCamelContext(),parameters,configProps) @AT@ 2646 @LENGTH@ 87
---UPD MethodInvocation@@PropertyBindingSupport.bindProperties(this.getCamelContext(),configProps,parameters) @TO@ PropertyBindingSupport.bindProperties(this.getCamelContext(),parameters,configProps) @AT@ 2646 @LENGTH@ 86
------UPD SimpleName@@MethodName:bindProperties:[this.getCamelContext(), configProps, parameters] @TO@ MethodName:bindProperties:[this.getCamelContext(), parameters, configProps] @AT@ 2669 @LENGTH@ 63
---------UPD SimpleName@@configProps @TO@ parameters @AT@ 2708 @LENGTH@ 11
---------UPD SimpleName@@parameters @TO@ configProps @AT@ 2721 @LENGTH@ 10


UPD FieldDeclaration@@private, boolean, [slotFilled=false] @TO@ private, boolean, [slotFilled] @AT@ 1632 @LENGTH@ 35
---UPD VariableDeclarationFragment@@slotFilled=false @TO@ slotFilled @AT@ 1648 @LENGTH@ 18
------DEL BooleanLiteral@@false @AT@ 1661 @LENGTH@ 5


UPD ExpressionStatement@@MethodInvocation:Assertions.assertTrue(size < 100,"Stackframe should be < 100") @TO@ MethodInvocation:Assertions.assertTrue(size < 110,"Stackframe should be < 110") @AT@ 2013 @LENGTH@ 64
---UPD MethodInvocation@@Assertions.assertTrue(size < 100,"Stackframe should be < 100") @TO@ Assertions.assertTrue(size < 110,"Stackframe should be < 110") @AT@ 2013 @LENGTH@ 63
------UPD SimpleName@@MethodName:assertTrue:[size < 100, "Stackframe should be < 100"] @TO@ MethodName:assertTrue:[size < 110, "Stackframe should be < 110"] @AT@ 2024 @LENGTH@ 52
---------UPD InfixExpression@@size < 100 @TO@ size < 110 @AT@ 2035 @LENGTH@ 10
------------UPD NumberLiteral@@100 @TO@ 110 @AT@ 2042 @LENGTH@ 3
---------UPD StringLiteral@@"Stackframe should be < 100" @TO@ "Stackframe should be < 110" @AT@ 2047 @LENGTH@ 28


UPD ReturnStatement@@InfixExpression:(null != body) && (body.equals("Wobble")) @TO@ InfixExpression:null != body && body.equals("Wobble") @AT@ 2451 @LENGTH@ 49
---UPD InfixExpression@@(null != body) && (body.equals("Wobble")) @TO@ null != body && body.equals("Wobble") @AT@ 2458 @LENGTH@ 41
------DEL ParenthesizedExpression@@(null != body) @AT@ 2458 @LENGTH@ 14
---------DEL InfixExpression@@null != body @AT@ 2459 @LENGTH@ 12
------INS InfixExpression@@null != body @TO@ InfixExpression@@(null != body) && (body.equals("Wobble")) @AT@ 2458 @LENGTH@ 12
---------MOV NullLiteral@@null @TO@ InfixExpression@@null != body @AT@ 2459 @LENGTH@ 4
---------MOV Operator@@!= @TO@ InfixExpression@@null != body @AT@ 2463 @LENGTH@ 2
---------MOV SimpleName@@body @TO@ InfixExpression@@null != body @AT@ 2467 @LENGTH@ 4
------DEL ParenthesizedExpression@@(body.equals("Wobble")) @AT@ 2476 @LENGTH@ 23
------MOV MethodInvocation@@body.equals("Wobble") @TO@ InfixExpression@@(null != body) && (body.equals("Wobble")) @AT@ 2477 @LENGTH@ 21


INS IfStatement@@if (System.getProperty("jboss.server.log.dir") == null) {  Path p=resolvePath(serverDir,"log");  propertyUpdater.setProperty("jboss.server.log.dir",p.toString());} @TO@ MethodDeclaration@@void, MethodName:setSystemProperties, final Map<String,String> properties,  @AT@ 7293 @LENGTH@ 198
---INS InfixExpression@@System.getProperty("jboss.server.log.dir") == null @TO@ IfStatement@@if (System.getProperty("jboss.server.log.dir") == null) {  Path p=resolvePath(serverDir,"log");  propertyUpdater.setProperty("jboss.server.log.dir",p.toString());} @AT@ 7297 @LENGTH@ 50
------INS MethodInvocation@@System.getProperty("jboss.server.log.dir") @TO@ InfixExpression@@System.getProperty("jboss.server.log.dir") == null @AT@ 7297 @LENGTH@ 42
---------INS SimpleName@@Name:System @TO@ MethodInvocation@@System.getProperty("jboss.server.log.dir") @AT@ 7297 @LENGTH@ 6
---------INS SimpleName@@MethodName:getProperty:["jboss.server.log.dir"] @TO@ MethodInvocation@@System.getProperty("jboss.server.log.dir") @AT@ 7304 @LENGTH@ 35
------------INS StringLiteral@@"jboss.server.log.dir" @TO@ SimpleName@@MethodName:getProperty:["jboss.server.log.dir"] @AT@ 7316 @LENGTH@ 22
------INS Operator@@== @TO@ InfixExpression@@System.getProperty("jboss.server.log.dir") == null @AT@ 7339 @LENGTH@ 2
------INS NullLiteral@@null @TO@ InfixExpression@@System.getProperty("jboss.server.log.dir") == null @AT@ 7343 @LENGTH@ 4
---INS Block@@ThenBody:{  Path p=resolvePath(serverDir,"log");  propertyUpdater.setProperty("jboss.server.log.dir",p.toString());} @TO@ IfStatement@@if (System.getProperty("jboss.server.log.dir") == null) {  Path p=resolvePath(serverDir,"log");  propertyUpdater.setProperty("jboss.server.log.dir",p.toString());} @AT@ 7349 @LENGTH@ 142
------INS VariableDeclarationStatement@@Path p=resolvePath(serverDir,"log"); @TO@ Block@@ThenBody:{  Path p=resolvePath(serverDir,"log");  propertyUpdater.setProperty("jboss.server.log.dir",p.toString());} @AT@ 7363 @LENGTH@ 39
---------INS SimpleType@@Path @TO@ VariableDeclarationStatement@@Path p=resolvePath(serverDir,"log"); @AT@ 7363 @LENGTH@ 4
---------INS VariableDeclarationFragment@@p=resolvePath(serverDir,"log") @TO@ VariableDeclarationStatement@@Path p=resolvePath(serverDir,"log"); @AT@ 7368 @LENGTH@ 33
------------INS SimpleName@@p @TO@ VariableDeclarationFragment@@p=resolvePath(serverDir,"log") @AT@ 7368 @LENGTH@ 1
------------INS MethodInvocation@@resolvePath(serverDir,"log") @TO@ VariableDeclarationFragment@@p=resolvePath(serverDir,"log") @AT@ 7372 @LENGTH@ 29
---------------INS SimpleName@@MethodName:resolvePath:[serverDir, "log"] @TO@ MethodInvocation@@resolvePath(serverDir,"log") @AT@ 7372 @LENGTH@ 29
------------------INS SimpleName@@serverDir @TO@ SimpleName@@MethodName:resolvePath:[serverDir, "log"] @AT@ 7384 @LENGTH@ 9
------------------INS StringLiteral@@"log" @TO@ SimpleName@@MethodName:resolvePath:[serverDir, "log"] @AT@ 7395 @LENGTH@ 5
------INS ExpressionStatement@@MethodInvocation:propertyUpdater.setProperty("jboss.server.log.dir",p.toString()) @TO@ Block@@ThenBody:{  Path p=resolvePath(serverDir,"log");  propertyUpdater.setProperty("jboss.server.log.dir",p.toString());} @AT@ 7415 @LENGTH@ 66
---------INS MethodInvocation@@propertyUpdater.setProperty("jboss.server.log.dir",p.toString()) @TO@ ExpressionStatement@@MethodInvocation:propertyUpdater.setProperty("jboss.server.log.dir",p.toString()) @AT@ 7415 @LENGTH@ 65
------------INS SimpleName@@Name:propertyUpdater @TO@ MethodInvocation@@propertyUpdater.setProperty("jboss.server.log.dir",p.toString()) @AT@ 7415 @LENGTH@ 15
------------INS SimpleName@@MethodName:setProperty:["jboss.server.log.dir", p.toString()] @TO@ MethodInvocation@@propertyUpdater.setProperty("jboss.server.log.dir",p.toString()) @AT@ 7431 @LENGTH@ 49
---------------INS StringLiteral@@"jboss.server.log.dir" @TO@ SimpleName@@MethodName:setProperty:["jboss.server.log.dir", p.toString()] @AT@ 7443 @LENGTH@ 22
---------------INS MethodInvocation@@p.toString() @TO@ SimpleName@@MethodName:setProperty:["jboss.server.log.dir", p.toString()] @AT@ 7467 @LENGTH@ 12
------------------INS SimpleName@@Name:p @TO@ MethodInvocation@@p.toString() @AT@ 7467 @LENGTH@ 1
------------------INS SimpleName@@MethodName:toString:[] @TO@ MethodInvocation@@p.toString() @AT@ 7469 @LENGTH@ 10


UPD ExpressionStatement@@MethodInvocation:modularJavaOpts.add("--add-opens=java.base/java.util=ALL-UNNAMEDD") @TO@ MethodInvocation:modularJavaOpts.add("--add-opens=java.base/java.util=ALL-UNNAMED") @AT@ 2988 @LENGTH@ 68
---UPD MethodInvocation@@modularJavaOpts.add("--add-opens=java.base/java.util=ALL-UNNAMEDD") @TO@ modularJavaOpts.add("--add-opens=java.base/java.util=ALL-UNNAMED") @AT@ 2988 @LENGTH@ 67
------UPD SimpleName@@MethodName:add:["--add-opens=java.base/java.util=ALL-UNNAMEDD"] @TO@ MethodName:add:["--add-opens=java.base/java.util=ALL-UNNAMED"] @AT@ 3004 @LENGTH@ 51
---------UPD StringLiteral@@"--add-opens=java.base/java.util=ALL-UNNAMEDD" @TO@ "--add-opens=java.base/java.util=ALL-UNNAMED" @AT@ 3008 @LENGTH@ 46


UPD ThrowStatement@@ClassInstanceCreation:new UnsupportedOperationException("Configuring the Camel Context si not supported") @TO@ ClassInstanceCreation:new UnsupportedOperationException("Configuring the Camel Context is not supported") @AT@ 2344 @LENGTH@ 90
---UPD ClassInstanceCreation@@UnsupportedOperationException["Configuring the Camel Context si not supported"] @TO@ UnsupportedOperationException["Configuring the Camel Context is not supported"] @AT@ 2350 @LENGTH@ 83
------UPD StringLiteral@@"Configuring the Camel Context si not supported" @TO@ "Configuring the Camel Context is not supported" @AT@ 2384 @LENGTH@ 48


UPD LambdaExpression@@association -> {
  NestedRelationshipContext relationshipContext=NestedRelationshipContext.of(association,propertyAccessor,sourceEntity);
  Collection<?> relatedValuesToStore=MappingSupport.unifyRelationshipValue(relationshipContext.getInverse(),relationshipContext.getValue());
  RelationshipDescription relationshipDescription=relationshipContext.getRelationship();
  RelationshipDescription relationshipDescriptionObverse=relationshipDescription.getRelationshipObverse();
  Neo4jPersistentProperty idProperty;
  if (!relationshipDescription.hasInternalIdProperty()) {
    idProperty=null;
  }
 else {
    Neo4jPersistentEntity<?> relationshipPropertiesEntity=(Neo4jPersistentEntity<?>)relationshipDescription.getRelationshipPropertiesEntity();
    idProperty=relationshipPropertiesEntity.getIdProperty();
  }
  ProcessState processState=stateMachine.getStateOf(relationshipDescriptionObverse,relatedValuesToStore);
  if (processState == ProcessState.PROCESSED_ALL_RELATIONSHIPS || processState == ProcessState.PROCESSED_BOTH) {
    return;
  }
  if (!isParentObjectNew) {
    List<Long> knownRelationshipsIds=new ArrayList<>();
    if (idProperty != null) {
      for (      Object relatedValueToStore : relatedValuesToStore) {
        if (relatedValueToStore == null) {
          continue;
        }
        Long id=(Long)relationshipContext.getRelationshipPropertiesPropertyAccessor(relatedValueToStore).getProperty(idProperty);
        if (id != null) {
          knownRelationshipsIds.add(id);
        }
      }
    }
    Statement relationshipRemoveQuery=cypherGenerator.prepareDeleteOf(sourceEntity,relationshipDescription);
    neo4jClient.query(renderer.render(relationshipRemoveQuery)).bind(convertIdValues(sourceEntity.getIdProperty(),fromId)).to(Constants.FROM_ID_PARAMETER_NAME).bind(knownRelationshipsIds).to(Constants.NAME_OF_KNOWN_RELATIONSHIPS_PARAM).run();
  }
  if (relationshipContext.inverseValueIsEmpty()) {
    return;
  }
  stateMachine.markAsProcessed(relationshipDescription,relatedValuesToStore);
  for (  Object relatedValueToStore : relatedValuesToStore) {
    Object relatedNode=relationshipContext.identifyAndExtractRelationshipTargetNode(relatedValueToStore);
    Neo4jPersistentEntity<?> targetEntity=neo4jMappingContext.getPersistentEntity(relatedNode.getClass());
    boolean isEntityNew=targetEntity.isNew(relatedNode);
    relatedNode=eventSupport.maybeCallBeforeBind(relatedNode);
    Long relatedInternalId;
    if (processState == ProcessState.PROCESSED_ALL_VALUES) {
      relatedInternalId=queryRelatedNode(relatedNode,targetEntity);
    }
 else {
      relatedInternalId=saveRelatedNode(relatedNode,relationshipContext.getAssociationTargetType(),targetEntity);
    }
    CreateRelationshipStatementHolder statementHolder=neo4jMappingContext.createStatement(sourceEntity,relationshipContext,relatedValueToStore);
    Optional<Long> relationshipInternalId=neo4jClient.query(renderer.render(statementHolder.getStatement())).bind(convertIdValues(sourceEntity.getRequiredIdProperty(),fromId)).to(Constants.FROM_ID_PARAMETER_NAME).bind(relatedInternalId).to(Constants.TO_ID_PARAMETER_NAME).bindAll(statementHolder.getProperties()).fetchAs(Long.class).one();
    if (idProperty != null) {
      relationshipContext.getRelationshipPropertiesPropertyAccessor(relatedValueToStore).setProperty(idProperty,relationshipInternalId.get());
    }
    PersistentPropertyAccessor<?> targetPropertyAccessor=targetEntity.getPropertyAccessor(relatedNode);
    if (targetEntity.isUsingInternalIds()) {
      targetPropertyAccessor.setProperty(targetEntity.getRequiredIdProperty(),relatedInternalId);
    }
    if (processState != ProcessState.PROCESSED_ALL_VALUES) {
      processNestedRelations(targetEntity,targetPropertyAccessor.getBean(),isEntityNew,stateMachine);
    }
  }
}
 @TO@ association -> {
  NestedRelationshipContext relationshipContext=NestedRelationshipContext.of(association,propertyAccessor,sourceEntity);
  Collection<?> relatedValuesToStore=MappingSupport.unifyRelationshipValue(relationshipContext.getInverse(),relationshipContext.getValue());
  RelationshipDescription relationshipDescription=relationshipContext.getRelationship();
  RelationshipDescription relationshipDescriptionObverse=relationshipDescription.getRelationshipObverse();
  Neo4jPersistentProperty idProperty;
  if (!relationshipDescription.hasInternalIdProperty()) {
    idProperty=null;
  }
 else {
    Neo4jPersistentEntity<?> relationshipPropertiesEntity=(Neo4jPersistentEntity<?>)relationshipDescription.getRelationshipPropertiesEntity();
    idProperty=relationshipPropertiesEntity.getIdProperty();
  }
  ProcessState processState=stateMachine.getStateOf(fromId,relationshipDescriptionObverse,relatedValuesToStore);
  if (processState == ProcessState.PROCESSED_ALL_RELATIONSHIPS || processState == ProcessState.PROCESSED_BOTH) {
    return;
  }
  if (!isParentObjectNew && !stateMachine.hasProcessedRelationship(fromId,relationshipDescription)) {
    List<Long> knownRelationshipsIds=new ArrayList<>();
    if (idProperty != null) {
      for (      Object relatedValueToStore : relatedValuesToStore) {
        if (relatedValueToStore == null) {
          continue;
        }
        Long id=(Long)relationshipContext.getRelationshipPropertiesPropertyAccessor(relatedValueToStore).getProperty(idProperty);
        if (id != null) {
          knownRelationshipsIds.add(id);
        }
      }
    }
    Statement relationshipRemoveQuery=cypherGenerator.prepareDeleteOf(sourceEntity,relationshipDescription);
    neo4jClient.query(renderer.render(relationshipRemoveQuery)).bind(convertIdValues(sourceEntity.getIdProperty(),fromId)).to(Constants.FROM_ID_PARAMETER_NAME).bind(knownRelationshipsIds).to(Constants.NAME_OF_KNOWN_RELATIONSHIPS_PARAM).run();
  }
  if (relationshipContext.inverseValueIsEmpty()) {
    return;
  }
  stateMachine.markRelationshipAsProcessed(fromId,relationshipDescription);
  for (  Object relatedValueToStore : relatedValuesToStore) {
    Object relatedNode=relationshipContext.identifyAndExtractRelationshipTargetNode(relatedValueToStore);
    Neo4jPersistentEntity<?> targetEntity=neo4jMappingContext.getPersistentEntity(relatedNode.getClass());
    boolean isEntityNew=targetEntity.isNew(relatedNode);
    relatedNode=eventSupport.maybeCallBeforeBind(relatedNode);
    Long relatedInternalId;
    if (stateMachine.hasProcessedValue(relatedValueToStore)) {
      relatedInternalId=queryRelatedNode(relatedNode,targetEntity);
    }
 else {
      relatedInternalId=saveRelatedNode(relatedNode,relationshipContext.getAssociationTargetType(),targetEntity);
    }
    stateMachine.markValueAsProcessed(relatedValueToStore);
    CreateRelationshipStatementHolder statementHolder=neo4jMappingContext.createStatement(sourceEntity,relationshipContext,relatedValueToStore);
    Optional<Long> relationshipInternalId=neo4jClient.query(renderer.render(statementHolder.getStatement())).bind(convertIdValues(sourceEntity.getRequiredIdProperty(),fromId)).to(Constants.FROM_ID_PARAMETER_NAME).bind(relatedInternalId).to(Constants.TO_ID_PARAMETER_NAME).bindAll(statementHolder.getProperties()).fetchAs(Long.class).one();
    if (idProperty != null) {
      relationshipContext.getRelationshipPropertiesPropertyAccessor(relatedValueToStore).setProperty(idProperty,relationshipInternalId.get());
    }
    PersistentPropertyAccessor<?> targetPropertyAccessor=targetEntity.getPropertyAccessor(relatedNode);
    if (targetEntity.isUsingInternalIds()) {
      targetPropertyAccessor.setProperty(targetEntity.getRequiredIdProperty(),relatedInternalId);
    }
    if (processState != ProcessState.PROCESSED_ALL_VALUES) {
      processNestedRelations(targetEntity,targetPropertyAccessor.getBean(),isEntityNew,stateMachine);
    }
  }
}
 @AT@ 19443 @LENGTH@ 4569
---UPD VariableDeclarationStatement@@ProcessState processState=stateMachine.getStateOf(relationshipDescriptionObverse,relatedValuesToStore); @TO@ ProcessState processState=stateMachine.getStateOf(fromId,relationshipDescriptionObverse,relatedValuesToStore); @AT@ 20422 @LENGTH@ 106
------UPD VariableDeclarationFragment@@processState=stateMachine.getStateOf(relationshipDescriptionObverse,relatedValuesToStore) @TO@ processState=stateMachine.getStateOf(fromId,relationshipDescriptionObverse,relatedValuesToStore) @AT@ 20435 @LENGTH@ 92
---------UPD MethodInvocation@@stateMachine.getStateOf(relationshipDescriptionObverse,relatedValuesToStore) @TO@ stateMachine.getStateOf(fromId,relationshipDescriptionObverse,relatedValuesToStore) @AT@ 20450 @LENGTH@ 77
------------UPD SimpleName@@MethodName:getStateOf:[relationshipDescriptionObverse, relatedValuesToStore] @TO@ MethodName:getStateOf:[fromId, relationshipDescriptionObverse, relatedValuesToStore] @AT@ 20463 @LENGTH@ 64
---------------INS SimpleName@@fromId @TO@ SimpleName@@MethodName:getStateOf:[relationshipDescriptionObverse, relatedValuesToStore] @AT@ 20474 @LENGTH@ 6
---UPD IfStatement@@if (!isParentObjectNew) {  List<Long> knownRelationshipsIds=new ArrayList<>();  if (idProperty != null) {    for (    Object relatedValueToStore : relatedValuesToStore) {      if (relatedValueToStore == null) {        continue;      }      Long id=(Long)relationshipContext.getRelationshipPropertiesPropertyAccessor(relatedValueToStore).getProperty(idProperty);      if (id != null) {        knownRelationshipsIds.add(id);      }    }  }  Statement relationshipRemoveQuery=cypherGenerator.prepareDeleteOf(sourceEntity,relationshipDescription);  neo4jClient.query(renderer.render(relationshipRemoveQuery)).bind(convertIdValues(sourceEntity.getIdProperty(),fromId)).to(Constants.FROM_ID_PARAMETER_NAME).bind(knownRelationshipsIds).to(Constants.NAME_OF_KNOWN_RELATIONSHIPS_PARAM).run();} @TO@ if (!isParentObjectNew && !stateMachine.hasProcessedRelationship(fromId,relationshipDescription)) {  List<Long> knownRelationshipsIds=new ArrayList<>();  if (idProperty != null) {    for (    Object relatedValueToStore : relatedValuesToStore) {      if (relatedValueToStore == null) {        continue;      }      Long id=(Long)relationshipContext.getRelationshipPropertiesPropertyAccessor(relatedValueToStore).getProperty(idProperty);      if (id != null) {        knownRelationshipsIds.add(id);      }    }  }  Statement relationshipRemoveQuery=cypherGenerator.prepareDeleteOf(sourceEntity,relationshipDescription);  neo4jClient.query(renderer.render(relationshipRemoveQuery)).bind(convertIdValues(sourceEntity.getIdProperty(),fromId)).to(Constants.FROM_ID_PARAMETER_NAME).bind(knownRelationshipsIds).to(Constants.NAME_OF_KNOWN_RELATIONSHIPS_PARAM).run();} @AT@ 20838 @LENGTH@ 870
------DEL PrefixExpression@@!isParentObjectNew @AT@ 20842 @LENGTH@ 18
------INS InfixExpression@@!isParentObjectNew && !stateMachine.hasProcessedRelationship(fromId,relationshipDescription) @TO@ IfStatement@@if (!isParentObjectNew) {  List<Long> knownRelationshipsIds=new ArrayList<>();  if (idProperty != null) {    for (    Object relatedValueToStore : relatedValuesToStore) {      if (relatedValueToStore == null) {        continue;      }      Long id=(Long)relationshipContext.getRelationshipPropertiesPropertyAccessor(relatedValueToStore).getProperty(idProperty);      if (id != null) {        knownRelationshipsIds.add(id);      }    }  }  Statement relationshipRemoveQuery=cypherGenerator.prepareDeleteOf(sourceEntity,relationshipDescription);  neo4jClient.query(renderer.render(relationshipRemoveQuery)).bind(convertIdValues(sourceEntity.getIdProperty(),fromId)).to(Constants.FROM_ID_PARAMETER_NAME).bind(knownRelationshipsIds).to(Constants.NAME_OF_KNOWN_RELATIONSHIPS_PARAM).run();} @AT@ 20908 @LENGTH@ 93
---------INS PrefixExpression@@!isParentObjectNew @TO@ InfixExpression@@!isParentObjectNew && !stateMachine.hasProcessedRelationship(fromId,relationshipDescription) @AT@ 20908 @LENGTH@ 18
------------MOV Operator@@! @TO@ PrefixExpression@@!isParentObjectNew @AT@ 20842 @LENGTH@ 1
------------MOV SimpleName@@isParentObjectNew @TO@ PrefixExpression@@!isParentObjectNew @AT@ 20843 @LENGTH@ 17
---------INS Operator@@&& @TO@ InfixExpression@@!isParentObjectNew && !stateMachine.hasProcessedRelationship(fromId,relationshipDescription) @AT@ 20926 @LENGTH@ 2
---------INS PrefixExpression@@!stateMachine.hasProcessedRelationship(fromId,relationshipDescription) @TO@ InfixExpression@@!isParentObjectNew && !stateMachine.hasProcessedRelationship(fromId,relationshipDescription) @AT@ 20930 @LENGTH@ 71
------------INS Operator@@! @TO@ PrefixExpression@@!stateMachine.hasProcessedRelationship(fromId,relationshipDescription) @AT@ 20930 @LENGTH@ 1
------------INS MethodInvocation@@stateMachine.hasProcessedRelationship(fromId,relationshipDescription) @TO@ PrefixExpression@@!stateMachine.hasProcessedRelationship(fromId,relationshipDescription) @AT@ 20931 @LENGTH@ 70
---------------INS SimpleName@@Name:stateMachine @TO@ MethodInvocation@@stateMachine.hasProcessedRelationship(fromId,relationshipDescription) @AT@ 20931 @LENGTH@ 12
---------------INS SimpleName@@MethodName:hasProcessedRelationship:[fromId, relationshipDescription] @TO@ MethodInvocation@@stateMachine.hasProcessedRelationship(fromId,relationshipDescription) @AT@ 20944 @LENGTH@ 57
------------------INS SimpleName@@fromId @TO@ SimpleName@@MethodName:hasProcessedRelationship:[fromId, relationshipDescription] @AT@ 20969 @LENGTH@ 6
------------------INS SimpleName@@relationshipDescription @TO@ SimpleName@@MethodName:hasProcessedRelationship:[fromId, relationshipDescription] @AT@ 20977 @LENGTH@ 23
---UPD ExpressionStatement@@MethodInvocation:stateMachine.markAsProcessed(relationshipDescription,relatedValuesToStore) @TO@ MethodInvocation:stateMachine.markRelationshipAsProcessed(fromId,relationshipDescription) @AT@ 21835 @LENGTH@ 76
------UPD MethodInvocation@@stateMachine.markAsProcessed(relationshipDescription,relatedValuesToStore) @TO@ stateMachine.markRelationshipAsProcessed(fromId,relationshipDescription) @AT@ 21835 @LENGTH@ 75
---------UPD SimpleName@@MethodName:markAsProcessed:[relationshipDescription, relatedValuesToStore] @TO@ MethodName:markRelationshipAsProcessed:[fromId, relationshipDescription] @AT@ 21848 @LENGTH@ 62
------------UPD SimpleName@@relationshipDescription @TO@ fromId @AT@ 21864 @LENGTH@ 23
------------UPD SimpleName@@relatedValuesToStore @TO@ relationshipDescription @AT@ 21889 @LENGTH@ 20
---UPD EnhancedForStatement@@for (Object relatedValueToStore : relatedValuesToStore) {  Object relatedNode=relationshipContext.identifyAndExtractRelationshipTargetNode(relatedValueToStore);  Neo4jPersistentEntity<?> targetEntity=neo4jMappingContext.getPersistentEntity(relatedNode.getClass());  boolean isEntityNew=targetEntity.isNew(relatedNode);  relatedNode=eventSupport.maybeCallBeforeBind(relatedNode);  Long relatedInternalId;  if (processState == ProcessState.PROCESSED_ALL_VALUES) {    relatedInternalId=queryRelatedNode(relatedNode,targetEntity);  } else {    relatedInternalId=saveRelatedNode(relatedNode,relationshipContext.getAssociationTargetType(),targetEntity);  }  CreateRelationshipStatementHolder statementHolder=neo4jMappingContext.createStatement(sourceEntity,relationshipContext,relatedValueToStore);  Optional<Long> relationshipInternalId=neo4jClient.query(renderer.render(statementHolder.getStatement())).bind(convertIdValues(sourceEntity.getRequiredIdProperty(),fromId)).to(Constants.FROM_ID_PARAMETER_NAME).bind(relatedInternalId).to(Constants.TO_ID_PARAMETER_NAME).bindAll(statementHolder.getProperties()).fetchAs(Long.class).one();  if (idProperty != null) {    relationshipContext.getRelationshipPropertiesPropertyAccessor(relatedValueToStore).setProperty(idProperty,relationshipInternalId.get());  }  PersistentPropertyAccessor<?> targetPropertyAccessor=targetEntity.getPropertyAccessor(relatedNode);  if (targetEntity.isUsingInternalIds()) {    targetPropertyAccessor.setProperty(targetEntity.getRequiredIdProperty(),relatedInternalId);  }  if (processState != ProcessState.PROCESSED_ALL_VALUES) {    processNestedRelations(targetEntity,targetPropertyAccessor.getBean(),isEntityNew,stateMachine);  }} @TO@ for (Object relatedValueToStore : relatedValuesToStore) {  Object relatedNode=relationshipContext.identifyAndExtractRelationshipTargetNode(relatedValueToStore);  Neo4jPersistentEntity<?> targetEntity=neo4jMappingContext.getPersistentEntity(relatedNode.getClass());  boolean isEntityNew=targetEntity.isNew(relatedNode);  relatedNode=eventSupport.maybeCallBeforeBind(relatedNode);  Long relatedInternalId;  if (stateMachine.hasProcessedValue(relatedValueToStore)) {    relatedInternalId=queryRelatedNode(relatedNode,targetEntity);  } else {    relatedInternalId=saveRelatedNode(relatedNode,relationshipContext.getAssociationTargetType(),targetEntity);  }  stateMachine.markValueAsProcessed(relatedValueToStore);  CreateRelationshipStatementHolder statementHolder=neo4jMappingContext.createStatement(sourceEntity,relationshipContext,relatedValueToStore);  Optional<Long> relationshipInternalId=neo4jClient.query(renderer.render(statementHolder.getStatement())).bind(convertIdValues(sourceEntity.getRequiredIdProperty(),fromId)).to(Constants.FROM_ID_PARAMETER_NAME).bind(relatedInternalId).to(Constants.TO_ID_PARAMETER_NAME).bindAll(statementHolder.getProperties()).fetchAs(Long.class).one();  if (idProperty != null) {    relationshipContext.getRelationshipPropertiesPropertyAccessor(relatedValueToStore).setProperty(idProperty,relationshipInternalId.get());  }  PersistentPropertyAccessor<?> targetPropertyAccessor=targetEntity.getPropertyAccessor(relatedNode);  if (targetEntity.isUsingInternalIds()) {    targetPropertyAccessor.setProperty(targetEntity.getRequiredIdProperty(),relatedInternalId);  }  if (processState != ProcessState.PROCESSED_ALL_VALUES) {    processNestedRelations(targetEntity,targetPropertyAccessor.getBean(),isEntityNew,stateMachine);  }} @AT@ 21916 @LENGTH@ 2090
------UPD IfStatement@@if (processState == ProcessState.PROCESSED_ALL_VALUES) {  relatedInternalId=queryRelatedNode(relatedNode,targetEntity);} else {  relatedInternalId=saveRelatedNode(relatedNode,relationshipContext.getAssociationTargetType(),targetEntity);} @TO@ if (stateMachine.hasProcessedValue(relatedValueToStore)) {  relatedInternalId=queryRelatedNode(relatedNode,targetEntity);} else {  relatedInternalId=saveRelatedNode(relatedNode,relationshipContext.getAssociationTargetType(),targetEntity);} @AT@ 22462 @LENGTH@ 269
---------DEL InfixExpression@@processState == ProcessState.PROCESSED_ALL_VALUES @AT@ 22466 @LENGTH@ 49
------------DEL SimpleName@@processState @AT@ 22466 @LENGTH@ 12
------------DEL Operator@@== @AT@ 22478 @LENGTH@ 2
------------DEL QualifiedName@@ProcessState.PROCESSED_ALL_VALUES @AT@ 22482 @LENGTH@ 33
---------------DEL SimpleName@@ProcessState @AT@ 22482 @LENGTH@ 12
---------------DEL SimpleName@@PROCESSED_ALL_VALUES @AT@ 22495 @LENGTH@ 20
---------INS MethodInvocation@@stateMachine.hasProcessedValue(relatedValueToStore) @TO@ IfStatement@@if (processState == ProcessState.PROCESSED_ALL_VALUES) {  relatedInternalId=queryRelatedNode(relatedNode,targetEntity);} else {  relatedInternalId=saveRelatedNode(relatedNode,relationshipContext.getAssociationTargetType(),targetEntity);} @AT@ 22605 @LENGTH@ 51
------------INS SimpleName@@Name:stateMachine @TO@ MethodInvocation@@stateMachine.hasProcessedValue(relatedValueToStore) @AT@ 22605 @LENGTH@ 12
------------INS SimpleName@@MethodName:hasProcessedValue:[relatedValueToStore] @TO@ MethodInvocation@@stateMachine.hasProcessedValue(relatedValueToStore) @AT@ 22618 @LENGTH@ 38
---------------INS SimpleName@@relatedValueToStore @TO@ SimpleName@@MethodName:hasProcessedValue:[relatedValueToStore] @AT@ 22636 @LENGTH@ 19
------INS ExpressionStatement@@MethodInvocation:stateMachine.markValueAsProcessed(relatedValueToStore) @TO@ EnhancedForStatement@@for (Object relatedValueToStore : relatedValuesToStore) {  Object relatedNode=relationshipContext.identifyAndExtractRelationshipTargetNode(relatedValueToStore);  Neo4jPersistentEntity<?> targetEntity=neo4jMappingContext.getPersistentEntity(relatedNode.getClass());  boolean isEntityNew=targetEntity.isNew(relatedNode);  relatedNode=eventSupport.maybeCallBeforeBind(relatedNode);  Long relatedInternalId;  if (processState == ProcessState.PROCESSED_ALL_VALUES) {    relatedInternalId=queryRelatedNode(relatedNode,targetEntity);  } else {    relatedInternalId=saveRelatedNode(relatedNode,relationshipContext.getAssociationTargetType(),targetEntity);  }  CreateRelationshipStatementHolder statementHolder=neo4jMappingContext.createStatement(sourceEntity,relationshipContext,relatedValueToStore);  Optional<Long> relationshipInternalId=neo4jClient.query(renderer.render(statementHolder.getStatement())).bind(convertIdValues(sourceEntity.getRequiredIdProperty(),fromId)).to(Constants.FROM_ID_PARAMETER_NAME).bind(relatedInternalId).to(Constants.TO_ID_PARAMETER_NAME).bindAll(statementHolder.getProperties()).fetchAs(Long.class).one();  if (idProperty != null) {    relationshipContext.getRelationshipPropertiesPropertyAccessor(relatedValueToStore).setProperty(idProperty,relationshipInternalId.get());  }  PersistentPropertyAccessor<?> targetPropertyAccessor=targetEntity.getPropertyAccessor(relatedNode);  if (targetEntity.isUsingInternalIds()) {    targetPropertyAccessor.setProperty(targetEntity.getRequiredIdProperty(),relatedInternalId);  }  if (processState != ProcessState.PROCESSED_ALL_VALUES) {    processNestedRelations(targetEntity,targetPropertyAccessor.getBean(),isEntityNew,stateMachine);  }} @AT@ 22877 @LENGTH@ 55
---------INS MethodInvocation@@stateMachine.markValueAsProcessed(relatedValueToStore) @TO@ ExpressionStatement@@MethodInvocation:stateMachine.markValueAsProcessed(relatedValueToStore) @AT@ 22877 @LENGTH@ 54
------------INS SimpleName@@Name:stateMachine @TO@ MethodInvocation@@stateMachine.markValueAsProcessed(relatedValueToStore) @AT@ 22877 @LENGTH@ 12
------------INS SimpleName@@MethodName:markValueAsProcessed:[relatedValueToStore] @TO@ MethodInvocation@@stateMachine.markValueAsProcessed(relatedValueToStore) @AT@ 22890 @LENGTH@ 41
---------------INS SimpleName@@relatedValueToStore @TO@ SimpleName@@MethodName:markValueAsProcessed:[relatedValueToStore] @AT@ 22911 @LENGTH@ 19


UPD IfStatement@@if (p.isInternalIdProperty() || p.isDynamicLabels() || p.isEntity()) {  return;} @TO@ if (p.isInternalIdProperty() || p.isDynamicLabels() || p.isEntity()|| p.isVersionProperty()) {  return;} @AT@ 7272 @LENGTH@ 87
---UPD InfixExpression@@p.isInternalIdProperty() || p.isDynamicLabels() || p.isEntity() @TO@ p.isInternalIdProperty() || p.isDynamicLabels() || p.isEntity()|| p.isVersionProperty() @AT@ 7276 @LENGTH@ 63
------INS MethodInvocation@@p.isVersionProperty() @TO@ InfixExpression@@p.isInternalIdProperty() || p.isDynamicLabels() || p.isEntity() @AT@ 7343 @LENGTH@ 21
---------INS SimpleName@@Name:p @TO@ MethodInvocation@@p.isVersionProperty() @AT@ 7343 @LENGTH@ 1
---------INS SimpleName@@MethodName:isVersionProperty:[] @TO@ MethodInvocation@@p.isVersionProperty() @AT@ 7345 @LENGTH@ 19


MOV FieldDeclaration@@private, static, final, StartupStep, [DISABLED_STEP=new StartupStep(){
  @Override public String getType(){
    return null;
  }
  @Override public String getName(){
    return null;
  }
  @Override public String getDescription(){
    return null;
  }
  @Override public int getId(){
    return 0;
  }
  @Override public int getParentId(){
    return 0;
  }
  @Override public int getLevel(){
    return 0;
  }
  @Override public void endStep(){
  }
  @Override public long getBeginTime(){
    return 0;
  }
}
] @TO@ TypeDeclaration@@[public]DefaultStartupStepRecorder, ServiceSupport[StartupStepRecorder] @AT@ 1402 @LENGTH@ 764


UPD TryStatement@@try {  if (this.afterAckCallback != null && getPendingConfirmsCount() == 0) {    this.afterAckCallback.accept(this);    this.afterAckCallback=null;  }} catch (Exception e) {  this.logger.error("Failed to invoke afterAckCallback",e);} @TO@ try {  if (this.afterAckCallback != null) {    java.util.function.Consumer<Channel> callback=null;synchronized (this) {      if (getPendingConfirmsCount() == 0) {        callback=this.afterAckCallback;        this.afterAckCallback=null;      }    }    if (callback != null) {      callback.accept(this);    }  }} catch (Exception e) {  this.logger.error("Failed to invoke afterAckCallback",e);} @AT@ 33596 @LENGTH@ 268
---INS IfStatement@@if (this.afterAckCallback != null) {  java.util.function.Consumer<Channel> callback=null;synchronized (this) {    if (getPendingConfirmsCount() == 0) {      callback=this.afterAckCallback;      this.afterAckCallback=null;    }  }  if (callback != null) {    callback.accept(this);  }} @TO@ TryStatement@@try {  if (this.afterAckCallback != null && getPendingConfirmsCount() == 0) {    this.afterAckCallback.accept(this);    this.afterAckCallback=null;  }} catch (Exception e) {  this.logger.error("Failed to invoke afterAckCallback",e);} @AT@ 33607 @LENGTH@ 342
------MOV InfixExpression@@this.afterAckCallback != null @TO@ IfStatement@@if (this.afterAckCallback != null) {  java.util.function.Consumer<Channel> callback=null;synchronized (this) {    if (getPendingConfirmsCount() == 0) {      callback=this.afterAckCallback;      this.afterAckCallback=null;    }  }  if (callback != null) {    callback.accept(this);  }} @AT@ 33611 @LENGTH@ 29
------INS Block@@ThenBody:{  java.util.function.Consumer<Channel> callback=null;synchronized (this) {    if (getPendingConfirmsCount() == 0) {      callback=this.afterAckCallback;      this.afterAckCallback=null;    }  }  if (callback != null) {    callback.accept(this);  }} @TO@ IfStatement@@if (this.afterAckCallback != null) {  java.util.function.Consumer<Channel> callback=null;synchronized (this) {    if (getPendingConfirmsCount() == 0) {      callback=this.afterAckCallback;      this.afterAckCallback=null;    }  }  if (callback != null) {    callback.accept(this);  }} @AT@ 33642 @LENGTH@ 307
---------INS VariableDeclarationStatement@@java.util.function.Consumer<Channel> callback=null; @TO@ Block@@ThenBody:{  java.util.function.Consumer<Channel> callback=null;synchronized (this) {    if (getPendingConfirmsCount() == 0) {      callback=this.afterAckCallback;      this.afterAckCallback=null;    }  }  if (callback != null) {    callback.accept(this);  }} @AT@ 33650 @LENGTH@ 53
------------INS ParameterizedType@@java.util.function.Consumer<Channel> @TO@ VariableDeclarationStatement@@java.util.function.Consumer<Channel> callback=null; @AT@ 33650 @LENGTH@ 36
---------------INS SimpleType@@java.util.function.Consumer @TO@ ParameterizedType@@java.util.function.Consumer<Channel> @AT@ 33650 @LENGTH@ 27
---------------INS SimpleType@@Channel @TO@ ParameterizedType@@java.util.function.Consumer<Channel> @AT@ 33678 @LENGTH@ 7
------------INS VariableDeclarationFragment@@callback=null @TO@ VariableDeclarationStatement@@java.util.function.Consumer<Channel> callback=null; @AT@ 33687 @LENGTH@ 15
---------------INS SimpleName@@callback @TO@ VariableDeclarationFragment@@callback=null @AT@ 33687 @LENGTH@ 8
---------------INS NullLiteral@@null @TO@ VariableDeclarationFragment@@callback=null @AT@ 33698 @LENGTH@ 4
---------INS SynchronizedStatement@@synchronized (this) {  if (getPendingConfirmsCount() == 0) {    callback=this.afterAckCallback;    this.afterAckCallback=null;  }} @TO@ Block@@ThenBody:{  java.util.function.Consumer<Channel> callback=null;synchronized (this) {    if (getPendingConfirmsCount() == 0) {      callback=this.afterAckCallback;      this.afterAckCallback=null;    }  }  if (callback != null) {    callback.accept(this);  }} @AT@ 33710 @LENGTH@ 163
------------INS ThisExpression@@this @TO@ SynchronizedStatement@@synchronized (this) {  if (getPendingConfirmsCount() == 0) {    callback=this.afterAckCallback;    this.afterAckCallback=null;  }} @AT@ 33724 @LENGTH@ 4
------------INS Block@@SyncBody:{  if (getPendingConfirmsCount() == 0) {    callback=this.afterAckCallback;    this.afterAckCallback=null;  }} @TO@ SynchronizedStatement@@synchronized (this) {  if (getPendingConfirmsCount() == 0) {    callback=this.afterAckCallback;    this.afterAckCallback=null;  }} @AT@ 33730 @LENGTH@ 143
---------------MOV IfStatement@@if (this.afterAckCallback != null && getPendingConfirmsCount() == 0) {  this.afterAckCallback.accept(this);  this.afterAckCallback=null;} @TO@ Block@@SyncBody:{  if (getPendingConfirmsCount() == 0) {    callback=this.afterAckCallback;    this.afterAckCallback=null;  }} @AT@ 33607 @LENGTH@ 155
------------------DEL InfixExpression@@this.afterAckCallback != null && getPendingConfirmsCount() == 0 @AT@ 33611 @LENGTH@ 63
---------------------DEL Operator@@&& @AT@ 33640 @LENGTH@ 2
---------------------DEL InfixExpression@@getPendingConfirmsCount() == 0 @AT@ 33644 @LENGTH@ 30
------------------UPD Block@@ThenBody:{  this.afterAckCallback.accept(this);  this.afterAckCallback=null;} @TO@ ThenBody:{  callback=this.afterAckCallback;  this.afterAckCallback=null;} @AT@ 33676 @LENGTH@ 86
---------------------UPD ExpressionStatement@@MethodInvocation:this.afterAckCallback.accept(this) @TO@ Assignment:callback=this.afterAckCallback @AT@ 33684 @LENGTH@ 35
------------------------DEL MethodInvocation@@this.afterAckCallback.accept(this) @AT@ 33684 @LENGTH@ 34
---------------------------DEL FieldAccess@@this.afterAckCallback @AT@ 33684 @LENGTH@ 21
---------------------------DEL SimpleName@@MethodName:accept:[this] @AT@ 33706 @LENGTH@ 12
------------------------------DEL ThisExpression@@this @AT@ 33713 @LENGTH@ 4
------------------------INS Assignment@@callback=this.afterAckCallback @TO@ ExpressionStatement@@MethodInvocation:this.afterAckCallback.accept(this) @AT@ 33785 @LENGTH@ 32
---------------------------INS SimpleName@@callback @TO@ Assignment@@callback=this.afterAckCallback @AT@ 33785 @LENGTH@ 8
---------------------------INS Operator@@= @TO@ Assignment@@callback=this.afterAckCallback @AT@ 33793 @LENGTH@ 1
---------------------------INS FieldAccess@@this.afterAckCallback @TO@ Assignment@@callback=this.afterAckCallback @AT@ 33796 @LENGTH@ 21
------------------------------MOV ThisExpression@@this @TO@ FieldAccess@@this.afterAckCallback @AT@ 33684 @LENGTH@ 4
------------------------------MOV ThisExpression@@this @TO@ FieldAccess@@this.afterAckCallback @AT@ 33684 @LENGTH@ 4
------------------------------MOV SimpleName@@afterAckCallback @TO@ FieldAccess@@this.afterAckCallback @AT@ 33689 @LENGTH@ 16
------------------------------MOV SimpleName@@afterAckCallback @TO@ FieldAccess@@this.afterAckCallback @AT@ 33689 @LENGTH@ 16
------------------INS InfixExpression@@getPendingConfirmsCount() == 0 @TO@ IfStatement@@if (this.afterAckCallback != null && getPendingConfirmsCount() == 0) {  this.afterAckCallback.accept(this);  this.afterAckCallback=null;} @AT@ 33743 @LENGTH@ 30
---------------------MOV MethodInvocation@@MethodName:getPendingConfirmsCount:[] @TO@ InfixExpression@@getPendingConfirmsCount() == 0 @AT@ 33644 @LENGTH@ 25
---------------------MOV MethodInvocation@@MethodName:getPendingConfirmsCount:[] @TO@ InfixExpression@@getPendingConfirmsCount() == 0 @AT@ 33644 @LENGTH@ 25
---------------------MOV Operator@@== @TO@ InfixExpression@@getPendingConfirmsCount() == 0 @AT@ 33669 @LENGTH@ 2
---------------------MOV Operator@@== @TO@ InfixExpression@@getPendingConfirmsCount() == 0 @AT@ 33669 @LENGTH@ 2
---------------------MOV NumberLiteral@@0 @TO@ InfixExpression@@getPendingConfirmsCount() == 0 @AT@ 33673 @LENGTH@ 1
---------------------MOV NumberLiteral@@0 @TO@ InfixExpression@@getPendingConfirmsCount() == 0 @AT@ 33673 @LENGTH@ 1
---------INS IfStatement@@if (callback != null) {  callback.accept(this);} @TO@ Block@@ThenBody:{  java.util.function.Consumer<Channel> callback=null;synchronized (this) {    if (getPendingConfirmsCount() == 0) {      callback=this.afterAckCallback;      this.afterAckCallback=null;    }  }  if (callback != null) {    callback.accept(this);  }} @AT@ 33880 @LENGTH@ 61
------------INS InfixExpression@@callback != null @TO@ IfStatement@@if (callback != null) {  callback.accept(this);} @AT@ 33884 @LENGTH@ 16
---------------INS SimpleName@@callback @TO@ InfixExpression@@callback != null @AT@ 33884 @LENGTH@ 8
---------------INS Operator@@!= @TO@ InfixExpression@@callback != null @AT@ 33892 @LENGTH@ 2
---------------INS NullLiteral@@null @TO@ InfixExpression@@callback != null @AT@ 33896 @LENGTH@ 4
------------INS Block@@ThenBody:{  callback.accept(this);} @TO@ IfStatement@@if (callback != null) {  callback.accept(this);} @AT@ 33902 @LENGTH@ 39
---------------INS ExpressionStatement@@MethodInvocation:callback.accept(this) @TO@ Block@@ThenBody:{  callback.accept(this);} @AT@ 33911 @LENGTH@ 22
------------------INS MethodInvocation@@callback.accept(this) @TO@ ExpressionStatement@@MethodInvocation:callback.accept(this) @AT@ 33911 @LENGTH@ 21
---------------------INS SimpleName@@Name:callback @TO@ MethodInvocation@@callback.accept(this) @AT@ 33911 @LENGTH@ 8
---------------------INS SimpleName@@MethodName:accept:[this] @TO@ MethodInvocation@@callback.accept(this) @AT@ 33920 @LENGTH@ 12
------------------------INS ThisExpression@@this @TO@ SimpleName@@MethodName:accept:[this] @AT@ 33927 @LENGTH@ 4
---UPD IfStatement@@if (this.afterAckCallback != null && getPendingConfirmsCount() == 0) {  this.afterAckCallback.accept(this);  this.afterAckCallback=null;} @TO@ if (getPendingConfirmsCount() == 0) {  callback=this.afterAckCallback;  this.afterAckCallback=null;} @AT@ 33607 @LENGTH@ 155


UPD VariableDeclarationStatement@@ReplDumpWork replDumpWork=new ReplDumpWork(replScope,null,"",""); @TO@ ReplDumpWork replDumpWork=new ReplDumpWork(replScope,"",""); @AT@ 5539 @LENGTH@ 78
---UPD VariableDeclarationFragment@@replDumpWork=new ReplDumpWork(replScope,null,"","") @TO@ replDumpWork=new ReplDumpWork(replScope,"","") @AT@ 5552 @LENGTH@ 64
------UPD ClassInstanceCreation@@ReplDumpWork[replScope, null, "", ""] @TO@ ReplDumpWork[replScope, "", ""] @AT@ 5567 @LENGTH@ 49
---------DEL NullLiteral@@null @AT@ 5603 @LENGTH@ 4


INS MethodDeclaration@@public, FactoryFinder, MethodName:getBootstrapFactoryFinder, String path,  @TO@ TypeDeclaration@@[@Experimental, public]LightweightRuntimeCamelContext, [ExtendedCamelContext, CatalogCamelContext] @AT@ 42968 @LENGTH@ 118
---INS Modifier@@public @TO@ MethodDeclaration@@public, FactoryFinder, MethodName:getBootstrapFactoryFinder, String path,  @AT@ 42968 @LENGTH@ 6
---INS SimpleType@@FactoryFinder @TO@ MethodDeclaration@@public, FactoryFinder, MethodName:getBootstrapFactoryFinder, String path,  @AT@ 42975 @LENGTH@ 13
---INS SimpleName@@MethodName:getBootstrapFactoryFinder @TO@ MethodDeclaration@@public, FactoryFinder, MethodName:getBootstrapFactoryFinder, String path,  @AT@ 42989 @LENGTH@ 25
---INS SingleVariableDeclaration@@String path @TO@ MethodDeclaration@@public, FactoryFinder, MethodName:getBootstrapFactoryFinder, String path,  @AT@ 43015 @LENGTH@ 11
------INS SimpleType@@String @TO@ SingleVariableDeclaration@@String path @AT@ 43015 @LENGTH@ 6
------INS SimpleName@@path @TO@ SingleVariableDeclaration@@String path @AT@ 43022 @LENGTH@ 4
---INS ThrowStatement@@ClassInstanceCreation:new UnsupportedOperationException() @TO@ MethodDeclaration@@public, FactoryFinder, MethodName:getBootstrapFactoryFinder, String path,  @AT@ 43038 @LENGTH@ 42
------INS ClassInstanceCreation@@UnsupportedOperationException[] @TO@ ThrowStatement@@ClassInstanceCreation:new UnsupportedOperationException() @AT@ 43044 @LENGTH@ 35
---------INS New@@new @TO@ ClassInstanceCreation@@UnsupportedOperationException[] @AT@ 43044 @LENGTH@ 3
---------INS SimpleType@@UnsupportedOperationException @TO@ ClassInstanceCreation@@UnsupportedOperationException[] @AT@ 43048 @LENGTH@ 29


UPD IfStatement@@if (skipValidationIfNoHeaderPresent && !isSecurityHeaderPresent((SoapMessage)messageContext.getRequest())) {  return true;} @TO@ if (skipValidationIfNoHeaderPresent && !isSecurityHeaderPresent((SoapMessage)messageContext.getResponse())) {  return true;} @AT@ 9323 @LENGTH@ 131
---UPD InfixExpression@@skipValidationIfNoHeaderPresent && !isSecurityHeaderPresent((SoapMessage)messageContext.getRequest()) @TO@ skipValidationIfNoHeaderPresent && !isSecurityHeaderPresent((SoapMessage)messageContext.getResponse()) @AT@ 9327 @LENGTH@ 102
------UPD PrefixExpression@@!isSecurityHeaderPresent((SoapMessage)messageContext.getRequest()) @TO@ !isSecurityHeaderPresent((SoapMessage)messageContext.getResponse()) @AT@ 9362 @LENGTH@ 67
---------UPD MethodInvocation@@isSecurityHeaderPresent((SoapMessage)messageContext.getRequest()) @TO@ isSecurityHeaderPresent((SoapMessage)messageContext.getResponse()) @AT@ 9363 @LENGTH@ 66
------------UPD SimpleName@@MethodName:isSecurityHeaderPresent:[(SoapMessage)messageContext.getRequest()] @TO@ MethodName:isSecurityHeaderPresent:[(SoapMessage)messageContext.getResponse()] @AT@ 9363 @LENGTH@ 66
---------------UPD CastExpression@@(SoapMessage)messageContext.getRequest() @TO@ (SoapMessage)messageContext.getResponse() @AT@ 9387 @LENGTH@ 41
------------------UPD MethodInvocation@@messageContext.getRequest() @TO@ messageContext.getResponse() @AT@ 9401 @LENGTH@ 27
---------------------UPD SimpleName@@MethodName:getRequest:[] @TO@ MethodName:getResponse:[] @AT@ 9416 @LENGTH@ 12


UPD IfStatement@@if (configuration.getConnectionFactory() == null) {  configuration.setConnectionFactory(getConnectionFactory());} @TO@ if (configuration.getConnectionFactory() == null) {  if (connectionFactory == null) {    connectionFactory=new GoogleBigQueryConnectionFactory();  }  configuration.setConnectionFactory(getConnectionFactory());} @AT@ 2044 @LENGTH@ 133
---INS Block@@ThenBody:{  if (connectionFactory == null) {    connectionFactory=new GoogleBigQueryConnectionFactory();  }  configuration.setConnectionFactory(getConnectionFactory());} @TO@ IfStatement@@if (configuration.getConnectionFactory() == null) {  configuration.setConnectionFactory(getConnectionFactory());} @AT@ 2094 @LENGTH@ 217
------MOV ExpressionStatement@@MethodInvocation:configuration.setConnectionFactory(getConnectionFactory()) @TO@ Block@@ThenBody:{  if (connectionFactory == null) {    connectionFactory=new GoogleBigQueryConnectionFactory();  }  configuration.setConnectionFactory(getConnectionFactory());} @AT@ 2108 @LENGTH@ 59
------MOV IfStatement@@if (connectionFactory == null) {  connectionFactory=new GoogleBigQueryConnectionFactory();} @TO@ Block@@ThenBody:{  if (connectionFactory == null) {    connectionFactory=new GoogleBigQueryConnectionFactory();  }  configuration.setConnectionFactory(getConnectionFactory());} @AT@ 2838 @LENGTH@ 113
---------MOV Block@@ThenBody:{  configuration.setConnectionFactory(getConnectionFactory());} @TO@ IfStatement@@if (connectionFactory == null) {  connectionFactory=new GoogleBigQueryConnectionFactory();} @AT@ 2094 @LENGTH@ 83
------------MOV ExpressionStatement@@Assignment:connectionFactory=new GoogleBigQueryConnectionFactory() @TO@ Block@@ThenBody:{  configuration.setConnectionFactory(getConnectionFactory());} @AT@ 2883 @LENGTH@ 58
---UPD Block@@ThenBody:{  configuration.setConnectionFactory(getConnectionFactory());} @TO@ ThenBody:{  connectionFactory=new GoogleBigQueryConnectionFactory();} @AT@ 2094 @LENGTH@ 83


INS MethodDeclaration@@void, MethodName:keepsRequestParametersOfOriginalRequestUri,  @TO@ TypeDeclaration@@PagedResourcesAssemblerUnitTests,  @AT@ 9952 @LENGTH@ 346
---INS PrimitiveType@@void @TO@ MethodDeclaration@@void, MethodName:keepsRequestParametersOfOriginalRequestUri,  @AT@ 9947 @LENGTH@ 4
---INS SimpleName@@MethodName:keepsRequestParametersOfOriginalRequestUri @TO@ MethodDeclaration@@void, MethodName:keepsRequestParametersOfOriginalRequestUri,  @AT@ 9952 @LENGTH@ 42
---INS ExpressionStatement@@MethodInvocation:WebTestUtils.initWebTest(new MockHttpServletRequest("GET","/sample?foo=bar")) @TO@ MethodDeclaration@@void, MethodName:keepsRequestParametersOfOriginalRequestUri,  @AT@ 10002 @LENGTH@ 79
------INS MethodInvocation@@WebTestUtils.initWebTest(new MockHttpServletRequest("GET","/sample?foo=bar")) @TO@ ExpressionStatement@@MethodInvocation:WebTestUtils.initWebTest(new MockHttpServletRequest("GET","/sample?foo=bar")) @AT@ 10002 @LENGTH@ 78
---------INS SimpleName@@Name:WebTestUtils @TO@ MethodInvocation@@WebTestUtils.initWebTest(new MockHttpServletRequest("GET","/sample?foo=bar")) @AT@ 10002 @LENGTH@ 12
---------INS SimpleName@@MethodName:initWebTest:[new MockHttpServletRequest("GET","/sample?foo=bar")] @TO@ MethodInvocation@@WebTestUtils.initWebTest(new MockHttpServletRequest("GET","/sample?foo=bar")) @AT@ 10015 @LENGTH@ 65
------------INS ClassInstanceCreation@@MockHttpServletRequest["GET", "/sample?foo=bar"] @TO@ SimpleName@@MethodName:initWebTest:[new MockHttpServletRequest("GET","/sample?foo=bar")] @AT@ 10027 @LENGTH@ 52
---------------INS New@@new @TO@ ClassInstanceCreation@@MockHttpServletRequest["GET", "/sample?foo=bar"] @AT@ 10027 @LENGTH@ 3
---------------INS SimpleType@@MockHttpServletRequest @TO@ ClassInstanceCreation@@MockHttpServletRequest["GET", "/sample?foo=bar"] @AT@ 10031 @LENGTH@ 22
---------------INS StringLiteral@@"GET" @TO@ ClassInstanceCreation@@MockHttpServletRequest["GET", "/sample?foo=bar"] @AT@ 10054 @LENGTH@ 5
---------------INS StringLiteral@@"/sample?foo=bar" @TO@ ClassInstanceCreation@@MockHttpServletRequest["GET", "/sample?foo=bar"] @AT@ 10061 @LENGTH@ 17
---INS VariableDeclarationStatement@@PagedModel<EntityModel<Person>> model=assembler.toModel(createPage(1)); @TO@ MethodDeclaration@@void, MethodName:keepsRequestParametersOfOriginalRequestUri,  @AT@ 10085 @LENGTH@ 73
------INS ParameterizedType@@PagedModel<EntityModel<Person>> @TO@ VariableDeclarationStatement@@PagedModel<EntityModel<Person>> model=assembler.toModel(createPage(1)); @AT@ 10085 @LENGTH@ 31
---------INS SimpleType@@PagedModel @TO@ ParameterizedType@@PagedModel<EntityModel<Person>> @AT@ 10085 @LENGTH@ 10
---------INS ParameterizedType@@EntityModel<Person> @TO@ ParameterizedType@@PagedModel<EntityModel<Person>> @AT@ 10096 @LENGTH@ 19
------------INS SimpleType@@EntityModel @TO@ ParameterizedType@@EntityModel<Person> @AT@ 10096 @LENGTH@ 11
------------INS SimpleType@@Person @TO@ ParameterizedType@@EntityModel<Person> @AT@ 10108 @LENGTH@ 6
------INS VariableDeclarationFragment@@model=assembler.toModel(createPage(1)) @TO@ VariableDeclarationStatement@@PagedModel<EntityModel<Person>> model=assembler.toModel(createPage(1)); @AT@ 10117 @LENGTH@ 40
---------INS SimpleName@@model @TO@ VariableDeclarationFragment@@model=assembler.toModel(createPage(1)) @AT@ 10117 @LENGTH@ 5
---------INS MethodInvocation@@assembler.toModel(createPage(1)) @TO@ VariableDeclarationFragment@@model=assembler.toModel(createPage(1)) @AT@ 10125 @LENGTH@ 32
------------INS SimpleName@@Name:assembler @TO@ MethodInvocation@@assembler.toModel(createPage(1)) @AT@ 10125 @LENGTH@ 9
------------INS SimpleName@@MethodName:toModel:[createPage(1)] @TO@ MethodInvocation@@assembler.toModel(createPage(1)) @AT@ 10135 @LENGTH@ 22
---------------INS MethodInvocation@@createPage(1) @TO@ SimpleName@@MethodName:toModel:[createPage(1)] @AT@ 10143 @LENGTH@ 13
------------------INS SimpleName@@MethodName:createPage:[1] @TO@ MethodInvocation@@createPage(1) @AT@ 10143 @LENGTH@ 13
---------------------INS NumberLiteral@@1 @TO@ SimpleName@@MethodName:createPage:[1] @AT@ 10154 @LENGTH@ 1
---INS ExpressionStatement@@MethodInvocation:assertThat(model.getRequiredLink(IanaLinkRelations.FIRST).getHref()).isEqualTo("http://localhost/sample?foo=bar&page=0&size=1") @TO@ MethodDeclaration@@void, MethodName:keepsRequestParametersOfOriginalRequestUri,  @AT@ 10162 @LENGTH@ 133
------INS MethodInvocation@@assertThat(model.getRequiredLink(IanaLinkRelations.FIRST).getHref()).isEqualTo("http://localhost/sample?foo=bar&page=0&size=1") @TO@ ExpressionStatement@@MethodInvocation:assertThat(model.getRequiredLink(IanaLinkRelations.FIRST).getHref()).isEqualTo("http://localhost/sample?foo=bar&page=0&size=1") @AT@ 10162 @LENGTH@ 132
---------INS MethodInvocation@@MethodName:assertThat:[model.getRequiredLink(IanaLinkRelations.FIRST).getHref()] @TO@ MethodInvocation@@assertThat(model.getRequiredLink(IanaLinkRelations.FIRST).getHref()).isEqualTo("http://localhost/sample?foo=bar&page=0&size=1") @AT@ 10162 @LENGTH@ 68
------------INS MethodInvocation@@model.getRequiredLink(IanaLinkRelations.FIRST).getHref() @TO@ MethodInvocation@@MethodName:assertThat:[model.getRequiredLink(IanaLinkRelations.FIRST).getHref()] @AT@ 10173 @LENGTH@ 56
---------------INS MethodInvocation@@MethodName:getRequiredLink:[IanaLinkRelations.FIRST] @TO@ MethodInvocation@@model.getRequiredLink(IanaLinkRelations.FIRST).getHref() @AT@ 10173 @LENGTH@ 46
------------------INS QualifiedName@@IanaLinkRelations.FIRST @TO@ MethodInvocation@@MethodName:getRequiredLink:[IanaLinkRelations.FIRST] @AT@ 10195 @LENGTH@ 23
---------------------INS SimpleName@@IanaLinkRelations @TO@ QualifiedName@@IanaLinkRelations.FIRST @AT@ 10195 @LENGTH@ 17
---------------------INS SimpleName@@FIRST @TO@ QualifiedName@@IanaLinkRelations.FIRST @AT@ 10213 @LENGTH@ 5
---------------INS SimpleName@@Name:model @TO@ MethodInvocation@@model.getRequiredLink(IanaLinkRelations.FIRST).getHref() @AT@ 10173 @LENGTH@ 5
---------------INS SimpleName@@MethodName:getHref:[] @TO@ MethodInvocation@@model.getRequiredLink(IanaLinkRelations.FIRST).getHref() @AT@ 10220 @LENGTH@ 9
---------INS SimpleName@@MethodName:isEqualTo:["http://localhost/sample?foo=bar&page=0&size=1"] @TO@ MethodInvocation@@assertThat(model.getRequiredLink(IanaLinkRelations.FIRST).getHref()).isEqualTo("http://localhost/sample?foo=bar&page=0&size=1") @AT@ 10236 @LENGTH@ 58
------------INS StringLiteral@@"http://localhost/sample?foo=bar&page=0&size=1" @TO@ SimpleName@@MethodName:isEqualTo:["http://localhost/sample?foo=bar&page=0&size=1"] @AT@ 10246 @LENGTH@ 47


UPD ReturnStatement@@MethodInvocation:Arrays.asList(Node.class,RelationshipProperties.class,Persistent.class) @TO@ MethodInvocation:Arrays.asList(Node.class,RelationshipProperties.class) @AT@ 3597 @LENGTH@ 81
---UPD MethodInvocation@@Arrays.asList(Node.class,RelationshipProperties.class,Persistent.class) @TO@ Arrays.asList(Node.class,RelationshipProperties.class) @AT@ 3604 @LENGTH@ 73
------UPD SimpleName@@MethodName:asList:[Node.class, RelationshipProperties.class, Persistent.class] @TO@ MethodName:asList:[Node.class, RelationshipProperties.class] @AT@ 3611 @LENGTH@ 66
---------DEL TypeLiteral@@Persistent.class @AT@ 3660 @LENGTH@ 16


INS MethodDeclaration@@void, MethodName:shouldNotFailWithEmptyOrNullRelationshipProperties,  @TO@ TypeDeclaration@@[@Neo4jIntegrationTest]PropertyIT,  @AT@ 8996 @LENGTH@ 383
---INS PrimitiveType@@void @TO@ MethodDeclaration@@void, MethodName:shouldNotFailWithEmptyOrNullRelationshipProperties,  @AT@ 8991 @LENGTH@ 4
---INS SimpleName@@MethodName:shouldNotFailWithEmptyOrNullRelationshipProperties @TO@ MethodDeclaration@@void, MethodName:shouldNotFailWithEmptyOrNullRelationshipProperties,  @AT@ 8996 @LENGTH@ 50
---INS VariableDeclarationStatement@@DomainClasses.LonelySourceContainer s=template.save(new DomainClasses.LonelySourceContainer()); @TO@ MethodDeclaration@@void, MethodName:shouldNotFailWithEmptyOrNullRelationshipProperties,  @AT@ 9054 @LENGTH@ 97
------INS SimpleType@@DomainClasses.LonelySourceContainer @TO@ VariableDeclarationStatement@@DomainClasses.LonelySourceContainer s=template.save(new DomainClasses.LonelySourceContainer()); @AT@ 9054 @LENGTH@ 35
------INS VariableDeclarationFragment@@s=template.save(new DomainClasses.LonelySourceContainer()) @TO@ VariableDeclarationStatement@@DomainClasses.LonelySourceContainer s=template.save(new DomainClasses.LonelySourceContainer()); @AT@ 9090 @LENGTH@ 60
---------INS SimpleName@@s @TO@ VariableDeclarationFragment@@s=template.save(new DomainClasses.LonelySourceContainer()) @AT@ 9090 @LENGTH@ 1
---------INS MethodInvocation@@template.save(new DomainClasses.LonelySourceContainer()) @TO@ VariableDeclarationFragment@@s=template.save(new DomainClasses.LonelySourceContainer()) @AT@ 9094 @LENGTH@ 56
------------INS SimpleName@@Name:template @TO@ MethodInvocation@@template.save(new DomainClasses.LonelySourceContainer()) @AT@ 9094 @LENGTH@ 8
------------INS SimpleName@@MethodName:save:[new DomainClasses.LonelySourceContainer()] @TO@ MethodInvocation@@template.save(new DomainClasses.LonelySourceContainer()) @AT@ 9103 @LENGTH@ 47
---------------INS ClassInstanceCreation@@DomainClasses.LonelySourceContainer[] @TO@ SimpleName@@MethodName:save:[new DomainClasses.LonelySourceContainer()] @AT@ 9108 @LENGTH@ 41
------------------INS New@@new @TO@ ClassInstanceCreation@@DomainClasses.LonelySourceContainer[] @AT@ 9108 @LENGTH@ 3
------------------INS SimpleType@@DomainClasses.LonelySourceContainer @TO@ ClassInstanceCreation@@DomainClasses.LonelySourceContainer[] @AT@ 9112 @LENGTH@ 35
---INS TryStatement@@try (Session session=driver.session()){  long cnt=session.run("MATCH (m) WHERE id(m) = $id RETURN count(m)",Collections.singletonMap("id",s.getId())).single().get(0).asLong();  assertThat(cnt).isEqualTo(1L);}  @TO@ MethodDeclaration@@void, MethodName:shouldNotFailWithEmptyOrNullRelationshipProperties,  @AT@ 9154 @LENGTH@ 222
------INS VariableDeclarationExpression@@Session session=driver.session() @TO@ TryStatement@@try (Session session=driver.session()){  long cnt=session.run("MATCH (m) WHERE id(m) = $id RETURN count(m)",Collections.singletonMap("id",s.getId())).single().get(0).asLong();  assertThat(cnt).isEqualTo(1L);}  @AT@ 9159 @LENGTH@ 34
---------INS SimpleType@@Session @TO@ VariableDeclarationExpression@@Session session=driver.session() @AT@ 9159 @LENGTH@ 7
---------INS VariableDeclarationFragment@@session=driver.session() @TO@ VariableDeclarationExpression@@Session session=driver.session() @AT@ 9167 @LENGTH@ 26
------------INS SimpleName@@session @TO@ VariableDeclarationFragment@@session=driver.session() @AT@ 9167 @LENGTH@ 7
------------INS MethodInvocation@@driver.session() @TO@ VariableDeclarationFragment@@session=driver.session() @AT@ 9177 @LENGTH@ 16
---------------INS SimpleName@@Name:driver @TO@ MethodInvocation@@driver.session() @AT@ 9177 @LENGTH@ 6
---------------INS SimpleName@@MethodName:session:[] @TO@ MethodInvocation@@driver.session() @AT@ 9184 @LENGTH@ 9
------INS VariableDeclarationStatement@@long cnt=session.run("MATCH (m) WHERE id(m) = $id RETURN count(m)",Collections.singletonMap("id",s.getId())).single().get(0).asLong(); @TO@ TryStatement@@try (Session session=driver.session()){  long cnt=session.run("MATCH (m) WHERE id(m) = $id RETURN count(m)",Collections.singletonMap("id",s.getId())).single().get(0).asLong();  assertThat(cnt).isEqualTo(1L);}  @AT@ 9200 @LENGTH@ 138
---------INS PrimitiveType@@long @TO@ VariableDeclarationStatement@@long cnt=session.run("MATCH (m) WHERE id(m) = $id RETURN count(m)",Collections.singletonMap("id",s.getId())).single().get(0).asLong(); @AT@ 9200 @LENGTH@ 4
---------INS VariableDeclarationFragment@@cnt=session.run("MATCH (m) WHERE id(m) = $id RETURN count(m)",Collections.singletonMap("id",s.getId())).single().get(0).asLong() @TO@ VariableDeclarationStatement@@long cnt=session.run("MATCH (m) WHERE id(m) = $id RETURN count(m)",Collections.singletonMap("id",s.getId())).single().get(0).asLong(); @AT@ 9205 @LENGTH@ 132
------------INS SimpleName@@cnt @TO@ VariableDeclarationFragment@@cnt=session.run("MATCH (m) WHERE id(m) = $id RETURN count(m)",Collections.singletonMap("id",s.getId())).single().get(0).asLong() @AT@ 9205 @LENGTH@ 3
------------INS MethodInvocation@@session.run("MATCH (m) WHERE id(m) = $id RETURN count(m)",Collections.singletonMap("id",s.getId())).single().get(0).asLong() @TO@ VariableDeclarationFragment@@cnt=session.run("MATCH (m) WHERE id(m) = $id RETURN count(m)",Collections.singletonMap("id",s.getId())).single().get(0).asLong() @AT@ 9211 @LENGTH@ 126
---------------INS MethodInvocation@@MethodName:get:[0] @TO@ MethodInvocation@@session.run("MATCH (m) WHERE id(m) = $id RETURN count(m)",Collections.singletonMap("id",s.getId())).single().get(0).asLong() @AT@ 9211 @LENGTH@ 117
------------------INS NumberLiteral@@0 @TO@ MethodInvocation@@MethodName:get:[0] @AT@ 9326 @LENGTH@ 1
---------------INS MethodInvocation@@MethodName:single:[] @TO@ MethodInvocation@@session.run("MATCH (m) WHERE id(m) = $id RETURN count(m)",Collections.singletonMap("id",s.getId())).single().get(0).asLong() @AT@ 9211 @LENGTH@ 110
---------------INS MethodInvocation@@MethodName:run:["MATCH (m) WHERE id(m) = $id RETURN count(m)", Collections.singletonMap("id",s.getId())] @TO@ MethodInvocation@@session.run("MATCH (m) WHERE id(m) = $id RETURN count(m)",Collections.singletonMap("id",s.getId())).single().get(0).asLong() @AT@ 9211 @LENGTH@ 101
------------------INS StringLiteral@@"MATCH (m) WHERE id(m) = $id RETURN count(m)" @TO@ MethodInvocation@@MethodName:run:["MATCH (m) WHERE id(m) = $id RETURN count(m)", Collections.singletonMap("id",s.getId())] @AT@ 9223 @LENGTH@ 45
------------------INS MethodInvocation@@Collections.singletonMap("id",s.getId()) @TO@ MethodInvocation@@MethodName:run:["MATCH (m) WHERE id(m) = $id RETURN count(m)", Collections.singletonMap("id",s.getId())] @AT@ 9270 @LENGTH@ 41
---------------------INS SimpleName@@Name:Collections @TO@ MethodInvocation@@Collections.singletonMap("id",s.getId()) @AT@ 9270 @LENGTH@ 11
---------------------INS SimpleName@@MethodName:singletonMap:["id", s.getId()] @TO@ MethodInvocation@@Collections.singletonMap("id",s.getId()) @AT@ 9282 @LENGTH@ 29
------------------------INS StringLiteral@@"id" @TO@ SimpleName@@MethodName:singletonMap:["id", s.getId()] @AT@ 9295 @LENGTH@ 4
------------------------INS MethodInvocation@@s.getId() @TO@ SimpleName@@MethodName:singletonMap:["id", s.getId()] @AT@ 9301 @LENGTH@ 9
---------------------------INS SimpleName@@Name:s @TO@ MethodInvocation@@s.getId() @AT@ 9301 @LENGTH@ 1
---------------------------INS SimpleName@@MethodName:getId:[] @TO@ MethodInvocation@@s.getId() @AT@ 9303 @LENGTH@ 7
---------------INS SimpleName@@Name:session @TO@ MethodInvocation@@session.run("MATCH (m) WHERE id(m) = $id RETURN count(m)",Collections.singletonMap("id",s.getId())).single().get(0).asLong() @AT@ 9211 @LENGTH@ 7
---------------INS SimpleName@@MethodName:asLong:[] @TO@ MethodInvocation@@session.run("MATCH (m) WHERE id(m) = $id RETURN count(m)",Collections.singletonMap("id",s.getId())).single().get(0).asLong() @AT@ 9329 @LENGTH@ 8
------INS ExpressionStatement@@MethodInvocation:assertThat(cnt).isEqualTo(1L) @TO@ TryStatement@@try (Session session=driver.session()){  long cnt=session.run("MATCH (m) WHERE id(m) = $id RETURN count(m)",Collections.singletonMap("id",s.getId())).single().get(0).asLong();  assertThat(cnt).isEqualTo(1L);}  @AT@ 9342 @LENGTH@ 30
---------INS MethodInvocation@@assertThat(cnt).isEqualTo(1L) @TO@ ExpressionStatement@@MethodInvocation:assertThat(cnt).isEqualTo(1L) @AT@ 9342 @LENGTH@ 29
------------INS MethodInvocation@@MethodName:assertThat:[cnt] @TO@ MethodInvocation@@assertThat(cnt).isEqualTo(1L) @AT@ 9342 @LENGTH@ 15
---------------INS SimpleName@@cnt @TO@ MethodInvocation@@MethodName:assertThat:[cnt] @AT@ 9353 @LENGTH@ 3
------------INS SimpleName@@MethodName:isEqualTo:[1L] @TO@ MethodInvocation@@assertThat(cnt).isEqualTo(1L) @AT@ 9358 @LENGTH@ 13
---------------INS NumberLiteral@@1L @TO@ SimpleName@@MethodName:isEqualTo:[1L] @AT@ 9368 @LENGTH@ 2


UPD MethodDeclaration@@public, void, MethodName:testCOMPRESS117, Exception,  @TO@ public, void, MethodName:testCOMPRESS_117, Exception,  @AT@ 2009 @LENGTH@ 213
---UPD SimpleName@@MethodName:testCOMPRESS117 @TO@ MethodName:testCOMPRESS_117 @AT@ 2021 @LENGTH@ 15


UPD IfStatement@@if (!isAggregateOnException() && (resourceExchange != null && resourceExchange.isFailed())) {  copyResultsPreservePattern(exchange,resourceExchange);} else {  prepareResult(exchange);  ExchangeHelper.prepareAggregation(exchange,resourceExchange);  Exchange aggregatedExchange=aggregationStrategy.aggregate(exchange,resourceExchange);  if (aggregatedExchange != null) {    copyResultsPreservePattern(exchange,aggregatedExchange);    if (resourceExchange != null) {      resourceExchange.adapt(ExtendedExchange.class).handoverCompletions(exchange);    }  }} @TO@ if (!isAggregateOnException() && resourceExchange != null && resourceExchange.isFailed()) {  copyResultsPreservePattern(exchange,resourceExchange);} else {  prepareResult(exchange);  ExchangeHelper.prepareAggregation(exchange,resourceExchange);  Exchange aggregatedExchange=aggregationStrategy.aggregate(exchange,resourceExchange);  if (aggregatedExchange != null) {    copyResultsPreservePattern(exchange,aggregatedExchange);    if (resourceExchange != null) {      resourceExchange.adapt(ExtendedExchange.class).handoverCompletions(exchange);    }  }} @AT@ 11124 @LENGTH@ 1146
---UPD InfixExpression@@!isAggregateOnException() && (resourceExchange != null && resourceExchange.isFailed()) @TO@ !isAggregateOnException() && resourceExchange != null && resourceExchange.isFailed() @AT@ 11128 @LENGTH@ 86
------INS InfixExpression@@!isAggregateOnException() && resourceExchange != null @TO@ InfixExpression@@!isAggregateOnException() && (resourceExchange != null && resourceExchange.isFailed()) @AT@ 11128 @LENGTH@ 53
---------MOV PrefixExpression@@!isAggregateOnException() @TO@ InfixExpression@@!isAggregateOnException() && resourceExchange != null @AT@ 11128 @LENGTH@ 25
---------MOV Operator@@&& @TO@ InfixExpression@@!isAggregateOnException() && resourceExchange != null @AT@ 11153 @LENGTH@ 2
---------MOV InfixExpression@@resourceExchange != null @TO@ InfixExpression@@!isAggregateOnException() && resourceExchange != null @AT@ 11158 @LENGTH@ 24
------DEL ParenthesizedExpression@@(resourceExchange != null && resourceExchange.isFailed()) @AT@ 11157 @LENGTH@ 57
---------DEL InfixExpression@@resourceExchange != null && resourceExchange.isFailed() @AT@ 11158 @LENGTH@ 55
------MOV Operator@@&& @TO@ InfixExpression@@!isAggregateOnException() && (resourceExchange != null && resourceExchange.isFailed()) @AT@ 11182 @LENGTH@ 2
------MOV MethodInvocation@@resourceExchange.isFailed() @TO@ InfixExpression@@!isAggregateOnException() && (resourceExchange != null && resourceExchange.isFailed()) @AT@ 11186 @LENGTH@ 27


INS ExpressionStatement@@MethodInvocation:assumeTrue(languageExists("javascript")) @TO@ MethodDeclaration@@public, void, MethodName:testItemBinding, Exception,  @AT@ 5760 @LENGTH@ 41
---INS MethodInvocation@@assumeTrue(languageExists("javascript")) @TO@ ExpressionStatement@@MethodInvocation:assumeTrue(languageExists("javascript")) @AT@ 5760 @LENGTH@ 40
------INS SimpleName@@MethodName:assumeTrue:[languageExists("javascript")] @TO@ MethodInvocation@@assumeTrue(languageExists("javascript")) @AT@ 5760 @LENGTH@ 40
---------INS MethodInvocation@@languageExists("javascript") @TO@ SimpleName@@MethodName:assumeTrue:[languageExists("javascript")] @AT@ 5771 @LENGTH@ 28
------------INS SimpleName@@MethodName:languageExists:["javascript"] @TO@ MethodInvocation@@languageExists("javascript") @AT@ 5771 @LENGTH@ 28
---------------INS StringLiteral@@"javascript" @TO@ SimpleName@@MethodName:languageExists:["javascript"] @AT@ 5786 @LENGTH@ 12
------------INS SimpleName@@MethodName:languageExists:["javascript"] @TO@ MethodInvocation@@languageExists("javascript") @AT@ 5771 @LENGTH@ 28
---------------INS StringLiteral@@"javascript" @TO@ SimpleName@@MethodName:languageExists:["javascript"] @AT@ 5786 @LENGTH@ 12


UPD MethodDeclaration@@public, void, MethodName:setId, String value,  @TO@ public, void, MethodName:setId, String id,  @AT@ 7410 @LENGTH@ 419
---UPD SingleVariableDeclaration@@String value @TO@ String id @AT@ 7428 @LENGTH@ 12
------UPD SimpleName@@value @TO@ id @AT@ 7435 @LENGTH@ 5
---UPD IfStatement@@if (otherwise != null) {  otherwise.setId(value);} else if (!getWhenClauses().isEmpty()) {  int size=getWhenClauses().size();  getWhenClauses().get(size - 1).setId(value);} else {  super.setId(value);} @TO@ if (otherwise != null) {  otherwise.setId(id);} else if (!getWhenClauses().isEmpty()) {  int size=getWhenClauses().size();  getWhenClauses().get(size - 1).setId(id);} else {  super.setId(id);} @AT@ 7549 @LENGTH@ 274
------UPD Block@@ThenBody:{  otherwise.setId(value);} @TO@ ThenBody:{  otherwise.setId(id);} @AT@ 7572 @LENGTH@ 47
---------UPD ExpressionStatement@@MethodInvocation:otherwise.setId(value) @TO@ MethodInvocation:otherwise.setId(id) @AT@ 7586 @LENGTH@ 23
------------UPD MethodInvocation@@otherwise.setId(value) @TO@ otherwise.setId(id) @AT@ 7586 @LENGTH@ 22
---------------UPD SimpleName@@MethodName:setId:[value] @TO@ MethodName:setId:[id] @AT@ 7596 @LENGTH@ 12
------------------UPD SimpleName@@value @TO@ id @AT@ 7602 @LENGTH@ 5
------UPD Block@@ElseBody:if (!getWhenClauses().isEmpty()) {  int size=getWhenClauses().size();  getWhenClauses().get(size - 1).setId(value);} else {  super.setId(value);} @TO@ ElseBody:if (!getWhenClauses().isEmpty()) {  int size=getWhenClauses().size();  getWhenClauses().get(size - 1).setId(id);} else {  super.setId(id);} @AT@ 7625 @LENGTH@ 198
---------UPD IfStatement@@if (!getWhenClauses().isEmpty()) {  int size=getWhenClauses().size();  getWhenClauses().get(size - 1).setId(value);} else {  super.setId(value);} @TO@ if (!getWhenClauses().isEmpty()) {  int size=getWhenClauses().size();  getWhenClauses().get(size - 1).setId(id);} else {  super.setId(id);} @AT@ 7625 @LENGTH@ 198
------------UPD Block@@ThenBody:{  int size=getWhenClauses().size();  getWhenClauses().get(size - 1).setId(value);} @TO@ ThenBody:{  int size=getWhenClauses().size();  getWhenClauses().get(size - 1).setId(id);} @AT@ 7658 @LENGTH@ 116
---------------UPD ExpressionStatement@@MethodInvocation:getWhenClauses().get(size - 1).setId(value) @TO@ MethodInvocation:getWhenClauses().get(size - 1).setId(id) @AT@ 7720 @LENGTH@ 44
------------------UPD MethodInvocation@@getWhenClauses().get(size - 1).setId(value) @TO@ getWhenClauses().get(size - 1).setId(id) @AT@ 7720 @LENGTH@ 43
---------------------UPD SimpleName@@MethodName:setId:[value] @TO@ MethodName:setId:[id] @AT@ 7751 @LENGTH@ 12
------------------------UPD SimpleName@@value @TO@ id @AT@ 7757 @LENGTH@ 5
------------UPD Block@@ElseBody:{  super.setId(value);} @TO@ ElseBody:{  super.setId(id);} @AT@ 7780 @LENGTH@ 43
---------------UPD ExpressionStatement@@SuperMethodInvocation:super.setId(value) @TO@ SuperMethodInvocation:super.setId(id) @AT@ 7794 @LENGTH@ 19
------------------UPD SuperMethodInvocation@@super.setId(value) @TO@ super.setId(id) @AT@ 7794 @LENGTH@ 18
---------------------UPD SimpleName@@MethodName:setId:[value] @TO@ MethodName:setId:[id] @AT@ 7800 @LENGTH@ 5
---------------------UPD SimpleName@@value @TO@ id @AT@ 7806 @LENGTH@ 5


INS MethodDeclaration@@default, void, MethodName:initPredicate, CamelContext context,  @TO@ TypeDeclaration@@[public]Predicate,  @AT@ 1868 @LENGTH@ 79
---INS Modifier@@default @TO@ MethodDeclaration@@default, void, MethodName:initPredicate, CamelContext context,  @AT@ 1868 @LENGTH@ 7
---INS PrimitiveType@@void @TO@ MethodDeclaration@@default, void, MethodName:initPredicate, CamelContext context,  @AT@ 1876 @LENGTH@ 4
---INS SimpleName@@MethodName:initPredicate @TO@ MethodDeclaration@@default, void, MethodName:initPredicate, CamelContext context,  @AT@ 1881 @LENGTH@ 13
---INS SingleVariableDeclaration@@CamelContext context @TO@ MethodDeclaration@@default, void, MethodName:initPredicate, CamelContext context,  @AT@ 1895 @LENGTH@ 20
------INS SimpleType@@CamelContext @TO@ SingleVariableDeclaration@@CamelContext context @AT@ 1895 @LENGTH@ 12
------INS SimpleName@@context @TO@ SingleVariableDeclaration@@CamelContext context @AT@ 1908 @LENGTH@ 7
---INS ExpressionStatement@@MethodInvocation:init(context) @TO@ MethodDeclaration@@default, void, MethodName:initPredicate, CamelContext context,  @AT@ 1927 @LENGTH@ 14
------INS MethodInvocation@@init(context) @TO@ ExpressionStatement@@MethodInvocation:init(context) @AT@ 1927 @LENGTH@ 13
---------INS SimpleName@@MethodName:init:[context] @TO@ MethodInvocation@@init(context) @AT@ 1927 @LENGTH@ 13
------------INS SimpleName@@context @TO@ SimpleName@@MethodName:init:[context] @AT@ 1932 @LENGTH@ 7


UPD VariableDeclarationStatement@@ObjectName on=ObjectName.getInstance("org.apache.camel:context=camel-1,type=endpoints,name=\"http://0.0.0.0:" + getPort() + "/foo\""); @TO@ ObjectName on=ObjectName.getInstance("org.apache.camel:context=" + context.getManagementName() + ",type=endpoints,name=\"http://0.0.0.0:"+ getPort()+ "/foo\""); @AT@ 2385 @LENGTH@ 153
---UPD VariableDeclarationFragment@@on=ObjectName.getInstance("org.apache.camel:context=camel-1,type=endpoints,name=\"http://0.0.0.0:" + getPort() + "/foo\"") @TO@ on=ObjectName.getInstance("org.apache.camel:context=" + context.getManagementName() + ",type=endpoints,name=\"http://0.0.0.0:"+ getPort()+ "/foo\"") @AT@ 2396 @LENGTH@ 141
------UPD MethodInvocation@@ObjectName.getInstance("org.apache.camel:context=camel-1,type=endpoints,name=\"http://0.0.0.0:" + getPort() + "/foo\"") @TO@ ObjectName.getInstance("org.apache.camel:context=" + context.getManagementName() + ",type=endpoints,name=\"http://0.0.0.0:"+ getPort()+ "/foo\"") @AT@ 2401 @LENGTH@ 136
---------UPD SimpleName@@MethodName:getInstance:["org.apache.camel:context=camel-1,type=endpoints,name=\"http://0.0.0.0:" + getPort() + "/foo\""] @TO@ MethodName:getInstance:["org.apache.camel:context=" + context.getManagementName() + ",type=endpoints,name=\"http://0.0.0.0:"+ getPort()+ "/foo\""] @AT@ 2429 @LENGTH@ 108
------------UPD InfixExpression@@"org.apache.camel:context=camel-1,type=endpoints,name=\"http://0.0.0.0:" + getPort() + "/foo\"" @TO@ "org.apache.camel:context=" + context.getManagementName() + ",type=endpoints,name=\"http://0.0.0.0:"+ getPort()+ "/foo\"" @AT@ 2441 @LENGTH@ 95
---------------UPD StringLiteral@@"org.apache.camel:context=camel-1,type=endpoints,name=\"http://0.0.0.0:" @TO@ "org.apache.camel:context=" @AT@ 2441 @LENGTH@ 72
---------------INS MethodInvocation@@context.getManagementName() @TO@ InfixExpression@@"org.apache.camel:context=camel-1,type=endpoints,name=\"http://0.0.0.0:" + getPort() + "/foo\"" @AT@ 2471 @LENGTH@ 27
------------------INS SimpleName@@Name:context @TO@ MethodInvocation@@context.getManagementName() @AT@ 2471 @LENGTH@ 7
------------------INS SimpleName@@MethodName:getManagementName:[] @TO@ MethodInvocation@@context.getManagementName() @AT@ 2479 @LENGTH@ 19
---------------INS StringLiteral@@",type=endpoints,name=\"http://0.0.0.0:" @TO@ InfixExpression@@"org.apache.camel:context=camel-1,type=endpoints,name=\"http://0.0.0.0:" + getPort() + "/foo\"" @AT@ 2530 @LENGTH@ 40


UPD FieldDeclaration@@static, final, Logger, [LOG=LoggerFactory.getLogger(SimpleScheduledRoutePolicyTest.class)] @TO@ static, final, Logger, [LOG=LoggerFactory.getLogger(NoBuilderTest.class)] @AT@ 210 @LENGTH@ 88
---UPD VariableDeclarationFragment@@LOG=LoggerFactory.getLogger(SimpleScheduledRoutePolicyTest.class) @TO@ LOG=LoggerFactory.getLogger(NoBuilderTest.class) @AT@ 230 @LENGTH@ 67
------UPD MethodInvocation@@LoggerFactory.getLogger(SimpleScheduledRoutePolicyTest.class) @TO@ LoggerFactory.getLogger(NoBuilderTest.class) @AT@ 236 @LENGTH@ 61
---------UPD SimpleName@@MethodName:getLogger:[SimpleScheduledRoutePolicyTest.class] @TO@ MethodName:getLogger:[NoBuilderTest.class] @AT@ 250 @LENGTH@ 47
------------UPD TypeLiteral@@SimpleScheduledRoutePolicyTest.class @TO@ NoBuilderTest.class @AT@ 260 @LENGTH@ 36


UPD SuperConstructorInvocation@@super(new ImageFromDockerfile("localhost/hadoop-2x:ckc",false).withFileFromClasspath(".","org/apache/camel/test/infra/hdfs/v2/services/").withBuildArg(FROM_IMAGE_BUILDER_ARG,TestUtils.prependHubImageNamePrefixIfNeeded(FROM_IMAGE_NAME)).withBuildArg(FROM_IMAGE_ARG,TestUtils.prependHubImageNamePrefixIfNeeded(FROM_IMAGE_NAME)));
 @TO@ super(new ImageFromDockerfile("localhost/hadoop-2x:camel",false).withFileFromClasspath(".","org/apache/camel/test/infra/hdfs/v2/services/").withBuildArg(FROM_IMAGE_BUILDER_ARG,TestUtils.prependHubImageNamePrefixIfNeeded(FROM_IMAGE_NAME)).withBuildArg(FROM_IMAGE_ARG,TestUtils.prependHubImageNamePrefixIfNeeded(FROM_IMAGE_NAME)));
 @AT@ 1447 @LENGTH@ 406
---UPD MethodInvocation@@new ImageFromDockerfile("localhost/hadoop-2x:ckc",false).withFileFromClasspath(".","org/apache/camel/test/infra/hdfs/v2/services/").withBuildArg(FROM_IMAGE_BUILDER_ARG,TestUtils.prependHubImageNamePrefixIfNeeded(FROM_IMAGE_NAME)).withBuildArg(FROM_IMAGE_ARG,TestUtils.prependHubImageNamePrefixIfNeeded(FROM_IMAGE_NAME)) @TO@ new ImageFromDockerfile("localhost/hadoop-2x:camel",false).withFileFromClasspath(".","org/apache/camel/test/infra/hdfs/v2/services/").withBuildArg(FROM_IMAGE_BUILDER_ARG,TestUtils.prependHubImageNamePrefixIfNeeded(FROM_IMAGE_NAME)).withBuildArg(FROM_IMAGE_ARG,TestUtils.prependHubImageNamePrefixIfNeeded(FROM_IMAGE_NAME)) @AT@ 1453 @LENGTH@ 398
------UPD ClassInstanceCreation@@ImageFromDockerfile["localhost/hadoop-2x:ckc", false] @TO@ ImageFromDockerfile["localhost/hadoop-2x:camel", false] @AT@ 1453 @LENGTH@ 57
---------UPD StringLiteral@@"localhost/hadoop-2x:ckc" @TO@ "localhost/hadoop-2x:camel" @AT@ 1477 @LENGTH@ 25


UPD FieldDeclaration@@JedisMessageListener, [jedisPubSub] @TO@ BinaryJedisPubSub, [jedisPubSub] @AT@ 1358 @LENGTH@ 33
---UPD SimpleType@@JedisMessageListener @TO@ BinaryJedisPubSub @AT@ 1358 @LENGTH@ 20


UPD ExpressionStatement@@MethodInvocation:redisTemplate.listenToChannelLater(channel).doOnNext(it -> redisTemplate.convertAndSend(channel,message).subscribe()).flatMapMany(Function.identity()).as(StepVerifier::create).assertNext(received -> {
  assertThat(received).isInstanceOf(ChannelMessage.class);
  assertThat(received.getMessage()).isEqualTo(message);
  assertThat(received.getChannel()).isEqualTo(channel);
}
).thenAwait(Duration.ofMillis(10)).thenCancel().verify(Duration.ofSeconds(3)) @TO@ MethodInvocation:redisTemplate.listenToChannelLater(channel).doOnNext(it -> redisTemplate.convertAndSend(channel,message).subscribe()).flatMapMany(Function.identity()).cast(Message.class).as(StepVerifier::create).assertNext(received -> {
  assertThat(received).isInstanceOf(ChannelMessage.class);
  assertThat(received.getMessage()).isEqualTo(message);
  assertThat(received.getChannel()).isEqualTo(channel);
}
).thenAwait(Duration.ofMillis(10)).thenCancel().verify(Duration.ofSeconds(3)) @AT@ 17266 @LENGTH@ 514
---UPD MethodInvocation@@redisTemplate.listenToChannelLater(channel).doOnNext(it -> redisTemplate.convertAndSend(channel,message).subscribe()).flatMapMany(Function.identity()).as(StepVerifier::create).assertNext(received -> {
  assertThat(received).isInstanceOf(ChannelMessage.class);
  assertThat(received.getMessage()).isEqualTo(message);
  assertThat(received.getChannel()).isEqualTo(channel);
}
).thenAwait(Duration.ofMillis(10)).thenCancel().verify(Duration.ofSeconds(3)) @TO@ redisTemplate.listenToChannelLater(channel).doOnNext(it -> redisTemplate.convertAndSend(channel,message).subscribe()).flatMapMany(Function.identity()).cast(Message.class).as(StepVerifier::create).assertNext(received -> {
  assertThat(received).isInstanceOf(ChannelMessage.class);
  assertThat(received.getMessage()).isEqualTo(message);
  assertThat(received.getChannel()).isEqualTo(channel);
}
).thenAwait(Duration.ofMillis(10)).thenCancel().verify(Duration.ofSeconds(3)) @AT@ 17266 @LENGTH@ 513
------INS MethodInvocation@@MethodName:cast:[Message.class] @TO@ MethodInvocation@@redisTemplate.listenToChannelLater(channel).doOnNext(it -> redisTemplate.convertAndSend(channel,message).subscribe()).flatMapMany(Function.identity()).as(StepVerifier::create).assertNext(received -> {
  assertThat(received).isInstanceOf(ChannelMessage.class);
  assertThat(received.getMessage()).isEqualTo(message);
  assertThat(received.getChannel()).isEqualTo(channel);
}
).thenAwait(Duration.ofMillis(10)).thenCancel().verify(Duration.ofSeconds(3)) @AT@ 17266 @LENGTH@ 187
---------INS TypeLiteral@@Message.class @TO@ MethodInvocation@@MethodName:cast:[Message.class] @AT@ 17439 @LENGTH@ 13


UPD MethodDeclaration@@static, CliConfig, MethodName:newBootConfig, CliInitializationException,  @TO@ static, CliConfig, MethodName:newBootConfig, boolean echoCommand, CliInitializationException,  @AT@ 4138 @LENGTH@ 199
---INS SingleVariableDeclaration@@boolean echoCommand @TO@ MethodDeclaration@@static, CliConfig, MethodName:newBootConfig, CliInitializationException,  @AT@ 4169 @LENGTH@ 19
------INS PrimitiveType@@boolean @TO@ SingleVariableDeclaration@@boolean echoCommand @AT@ 4169 @LENGTH@ 7
------INS SimpleName@@echoCommand @TO@ SingleVariableDeclaration@@boolean echoCommand @AT@ 4177 @LENGTH@ 11
---INS ExpressionStatement@@Assignment:config.echoCommand=echoCommand @TO@ MethodDeclaration@@static, CliConfig, MethodName:newBootConfig, CliInitializationException,  @AT@ 4336 @LENGTH@ 33
------INS Assignment@@config.echoCommand=echoCommand @TO@ ExpressionStatement@@Assignment:config.echoCommand=echoCommand @AT@ 4336 @LENGTH@ 32
---------INS QualifiedName@@config.echoCommand @TO@ Assignment@@config.echoCommand=echoCommand @AT@ 4336 @LENGTH@ 18
------------INS SimpleName@@config @TO@ QualifiedName@@config.echoCommand @AT@ 4336 @LENGTH@ 6
------------INS SimpleName@@echoCommand @TO@ QualifiedName@@config.echoCommand @AT@ 4343 @LENGTH@ 11
---------INS Operator@@= @TO@ Assignment@@config.echoCommand=echoCommand @AT@ 4354 @LENGTH@ 1
---------INS SimpleName@@echoCommand @TO@ Assignment@@config.echoCommand=echoCommand @AT@ 4357 @LENGTH@ 11


UPD ExpressionStatement@@SuperMethodInvocation:super.doStart() @TO@ SuperMethodInvocation:super.doStop() @AT@ 1701 @LENGTH@ 16
---UPD SuperMethodInvocation@@super.doStart() @TO@ super.doStop() @AT@ 1701 @LENGTH@ 15
------UPD SimpleName@@MethodName:doStart:[] @TO@ MethodName:doStop:[] @AT@ 1707 @LENGTH@ 7


INS ExpressionStatement@@MethodInvocation:container.setMonitorInterval(500) @TO@ MethodDeclaration@@void, MethodName:missingQueueOnStart, InterruptedException,  @AT@ 28443 @LENGTH@ 34
---INS MethodInvocation@@container.setMonitorInterval(500) @TO@ ExpressionStatement@@MethodInvocation:container.setMonitorInterval(500) @AT@ 28443 @LENGTH@ 33
------INS SimpleName@@Name:container @TO@ MethodInvocation@@container.setMonitorInterval(500) @AT@ 28443 @LENGTH@ 9
------INS SimpleName@@MethodName:setMonitorInterval:[500] @TO@ MethodInvocation@@container.setMonitorInterval(500) @AT@ 28453 @LENGTH@ 23
---------INS NumberLiteral@@500 @TO@ SimpleName@@MethodName:setMonitorInterval:[500] @AT@ 28472 @LENGTH@ 3


UPD FieldDeclaration@@private, static, int, [topicId=0] @TO@ private, static, int, [topicId] @AT@ 2255 @LENGTH@ 31
---UPD VariableDeclarationFragment@@topicId=0 @TO@ topicId @AT@ 2274 @LENGTH@ 11
------DEL NumberLiteral@@0 @AT@ 2284 @LENGTH@ 1


UPD ExpressionStatement@@MethodInvocation:((IdAware)source).setId(id) @TO@ MethodInvocation:((IdAware)source).setGeneratedId(id) @AT@ 2395 @LENGTH@ 29
---UPD MethodInvocation@@((IdAware)source).setId(id) @TO@ ((IdAware)source).setGeneratedId(id) @AT@ 2395 @LENGTH@ 28
------UPD SimpleName@@MethodName:setId:[id] @TO@ MethodName:setGeneratedId:[id] @AT@ 2414 @LENGTH@ 9


INS MethodDeclaration@@public, boolean, MethodName:equals, Object o,  @TO@ TypeDeclaration@@[public]ReplScope, [Serializable] @AT@ 4090 @LENGTH@ 404
---INS Modifier@@public @TO@ MethodDeclaration@@public, boolean, MethodName:equals, Object o,  @AT@ 4090 @LENGTH@ 6
---INS PrimitiveType@@boolean @TO@ MethodDeclaration@@public, boolean, MethodName:equals, Object o,  @AT@ 4097 @LENGTH@ 7
---INS SimpleName@@MethodName:equals @TO@ MethodDeclaration@@public, boolean, MethodName:equals, Object o,  @AT@ 4105 @LENGTH@ 6
---INS SingleVariableDeclaration@@Object o @TO@ MethodDeclaration@@public, boolean, MethodName:equals, Object o,  @AT@ 4112 @LENGTH@ 8
------INS SimpleType@@Object @TO@ SingleVariableDeclaration@@Object o @AT@ 4112 @LENGTH@ 6
------INS SimpleName@@o @TO@ SingleVariableDeclaration@@Object o @AT@ 4119 @LENGTH@ 1
---INS IfStatement@@if (o == this) {  return true;} @TO@ MethodDeclaration@@public, boolean, MethodName:equals, Object o,  @AT@ 4128 @LENGTH@ 41
------INS InfixExpression@@o == this @TO@ IfStatement@@if (o == this) {  return true;} @AT@ 4132 @LENGTH@ 9
---------INS SimpleName@@o @TO@ InfixExpression@@o == this @AT@ 4132 @LENGTH@ 1
---------INS Operator@@== @TO@ InfixExpression@@o == this @AT@ 4133 @LENGTH@ 2
---------INS ThisExpression@@this @TO@ InfixExpression@@o == this @AT@ 4137 @LENGTH@ 4
------INS Block@@ThenBody:{  return true;} @TO@ IfStatement@@if (o == this) {  return true;} @AT@ 4143 @LENGTH@ 26
---------INS ReturnStatement@@BooleanLiteral:true @TO@ Block@@ThenBody:{  return true;} @AT@ 4151 @LENGTH@ 12
------------INS BooleanLiteral@@true @TO@ ReturnStatement@@BooleanLiteral:true @AT@ 4158 @LENGTH@ 4
---INS IfStatement@@if (!(o instanceof ReplScope)) {  return false;} @TO@ MethodDeclaration@@public, boolean, MethodName:equals, Object o,  @AT@ 4174 @LENGTH@ 59
------INS PrefixExpression@@!(o instanceof ReplScope) @TO@ IfStatement@@if (!(o instanceof ReplScope)) {  return false;} @AT@ 4178 @LENGTH@ 26
---------INS Operator@@! @TO@ PrefixExpression@@!(o instanceof ReplScope) @AT@ 4178 @LENGTH@ 1
---------INS ParenthesizedExpression@@(o instanceof ReplScope) @TO@ PrefixExpression@@!(o instanceof ReplScope) @AT@ 4180 @LENGTH@ 24
------------INS InstanceofExpression@@o instanceof ReplScope @TO@ ParenthesizedExpression@@(o instanceof ReplScope) @AT@ 4181 @LENGTH@ 22
---------------INS SimpleName@@o @TO@ InstanceofExpression@@o instanceof ReplScope @AT@ 4181 @LENGTH@ 1
---------------INS Instanceof@@instanceof @TO@ InstanceofExpression@@o instanceof ReplScope @AT@ 4183 @LENGTH@ 10
---------------INS SimpleType@@ReplScope @TO@ InstanceofExpression@@o instanceof ReplScope @AT@ 4194 @LENGTH@ 9
------INS Block@@ThenBody:{  return false;} @TO@ IfStatement@@if (!(o instanceof ReplScope)) {  return false;} @AT@ 4206 @LENGTH@ 27
---------INS ReturnStatement@@BooleanLiteral:false @TO@ Block@@ThenBody:{  return false;} @AT@ 4214 @LENGTH@ 13
------------INS BooleanLiteral@@false @TO@ ReturnStatement@@BooleanLiteral:false @AT@ 4221 @LENGTH@ 5
---INS VariableDeclarationStatement@@ReplScope replScope=(ReplScope)o; @TO@ MethodDeclaration@@public, boolean, MethodName:equals, Object o,  @AT@ 4239 @LENGTH@ 35
------INS SimpleType@@ReplScope @TO@ VariableDeclarationStatement@@ReplScope replScope=(ReplScope)o; @AT@ 4239 @LENGTH@ 9
------INS VariableDeclarationFragment@@replScope=(ReplScope)o @TO@ VariableDeclarationStatement@@ReplScope replScope=(ReplScope)o; @AT@ 4249 @LENGTH@ 24
---------INS SimpleName@@replScope @TO@ VariableDeclarationFragment@@replScope=(ReplScope)o @AT@ 4249 @LENGTH@ 9
---------INS CastExpression@@(ReplScope)o @TO@ VariableDeclarationFragment@@replScope=(ReplScope)o @AT@ 4261 @LENGTH@ 12
------------INS SimpleType@@ReplScope @TO@ CastExpression@@(ReplScope)o @AT@ 4262 @LENGTH@ 9
------------INS SimpleName@@o @TO@ CastExpression@@(ReplScope)o @AT@ 4272 @LENGTH@ 1
---INS ReturnStatement@@InfixExpression:Objects.equals(replScope.excludedTableNames,this.excludedTableNames) && Objects.equals(replScope.includedTableNames,this.includedTableNames) && Objects.equals(replScope.dbName,this.dbName) @TO@ MethodDeclaration@@public, boolean, MethodName:equals, Object o,  @AT@ 4279 @LENGTH@ 211
------INS InfixExpression@@Objects.equals(replScope.excludedTableNames,this.excludedTableNames) && Objects.equals(replScope.includedTableNames,this.includedTableNames) && Objects.equals(replScope.dbName,this.dbName) @TO@ ReturnStatement@@InfixExpression:Objects.equals(replScope.excludedTableNames,this.excludedTableNames) && Objects.equals(replScope.includedTableNames,this.includedTableNames) && Objects.equals(replScope.dbName,this.dbName) @AT@ 4286 @LENGTH@ 203
---------INS MethodInvocation@@Objects.equals(replScope.excludedTableNames,this.excludedTableNames) @TO@ InfixExpression@@Objects.equals(replScope.excludedTableNames,this.excludedTableNames) && Objects.equals(replScope.includedTableNames,this.includedTableNames) && Objects.equals(replScope.dbName,this.dbName) @AT@ 4286 @LENGTH@ 69
------------INS SimpleName@@Name:Objects @TO@ MethodInvocation@@Objects.equals(replScope.excludedTableNames,this.excludedTableNames) @AT@ 4286 @LENGTH@ 7
------------INS SimpleName@@MethodName:equals:[replScope.excludedTableNames, this.excludedTableNames] @TO@ MethodInvocation@@Objects.equals(replScope.excludedTableNames,this.excludedTableNames) @AT@ 4294 @LENGTH@ 61
---------------INS QualifiedName@@replScope.excludedTableNames @TO@ SimpleName@@MethodName:equals:[replScope.excludedTableNames, this.excludedTableNames] @AT@ 4301 @LENGTH@ 28
------------------INS SimpleName@@replScope @TO@ QualifiedName@@replScope.excludedTableNames @AT@ 4301 @LENGTH@ 9
------------------INS SimpleName@@excludedTableNames @TO@ QualifiedName@@replScope.excludedTableNames @AT@ 4311 @LENGTH@ 18
---------------INS FieldAccess@@this.excludedTableNames @TO@ SimpleName@@MethodName:equals:[replScope.excludedTableNames, this.excludedTableNames] @AT@ 4331 @LENGTH@ 23
------------------INS ThisExpression@@this @TO@ FieldAccess@@this.excludedTableNames @AT@ 4331 @LENGTH@ 4
------------------INS SimpleName@@excludedTableNames @TO@ FieldAccess@@this.excludedTableNames @AT@ 4336 @LENGTH@ 18
---------INS Operator@@&& @TO@ InfixExpression@@Objects.equals(replScope.excludedTableNames,this.excludedTableNames) && Objects.equals(replScope.includedTableNames,this.includedTableNames) && Objects.equals(replScope.dbName,this.dbName) @AT@ 4355 @LENGTH@ 2
---------INS MethodInvocation@@Objects.equals(replScope.includedTableNames,this.includedTableNames) @TO@ InfixExpression@@Objects.equals(replScope.excludedTableNames,this.excludedTableNames) && Objects.equals(replScope.includedTableNames,this.includedTableNames) && Objects.equals(replScope.dbName,this.dbName) @AT@ 4365 @LENGTH@ 69
------------INS SimpleName@@Name:Objects @TO@ MethodInvocation@@Objects.equals(replScope.includedTableNames,this.includedTableNames) @AT@ 4365 @LENGTH@ 7
------------INS SimpleName@@MethodName:equals:[replScope.includedTableNames, this.includedTableNames] @TO@ MethodInvocation@@Objects.equals(replScope.includedTableNames,this.includedTableNames) @AT@ 4373 @LENGTH@ 61
---------------INS QualifiedName@@replScope.includedTableNames @TO@ SimpleName@@MethodName:equals:[replScope.includedTableNames, this.includedTableNames] @AT@ 4380 @LENGTH@ 28
------------------INS SimpleName@@replScope @TO@ QualifiedName@@replScope.includedTableNames @AT@ 4380 @LENGTH@ 9
------------------INS SimpleName@@includedTableNames @TO@ QualifiedName@@replScope.includedTableNames @AT@ 4390 @LENGTH@ 18
---------------INS FieldAccess@@this.includedTableNames @TO@ SimpleName@@MethodName:equals:[replScope.includedTableNames, this.includedTableNames] @AT@ 4410 @LENGTH@ 23
------------------INS ThisExpression@@this @TO@ FieldAccess@@this.includedTableNames @AT@ 4410 @LENGTH@ 4
------------------INS SimpleName@@includedTableNames @TO@ FieldAccess@@this.includedTableNames @AT@ 4415 @LENGTH@ 18
---------INS MethodInvocation@@Objects.equals(replScope.dbName,this.dbName) @TO@ InfixExpression@@Objects.equals(replScope.excludedTableNames,this.excludedTableNames) && Objects.equals(replScope.includedTableNames,this.includedTableNames) && Objects.equals(replScope.dbName,this.dbName) @AT@ 4444 @LENGTH@ 45
------------INS SimpleName@@Name:Objects @TO@ MethodInvocation@@Objects.equals(replScope.dbName,this.dbName) @AT@ 4444 @LENGTH@ 7
------------INS SimpleName@@MethodName:equals:[replScope.dbName, this.dbName] @TO@ MethodInvocation@@Objects.equals(replScope.dbName,this.dbName) @AT@ 4452 @LENGTH@ 37
---------------INS QualifiedName@@replScope.dbName @TO@ SimpleName@@MethodName:equals:[replScope.dbName, this.dbName] @AT@ 4459 @LENGTH@ 16
------------------INS SimpleName@@replScope @TO@ QualifiedName@@replScope.dbName @AT@ 4459 @LENGTH@ 9
------------------INS SimpleName@@dbName @TO@ QualifiedName@@replScope.dbName @AT@ 4469 @LENGTH@ 6
---------------INS FieldAccess@@this.dbName @TO@ SimpleName@@MethodName:equals:[replScope.dbName, this.dbName] @AT@ 4477 @LENGTH@ 11
------------------INS ThisExpression@@this @TO@ FieldAccess@@this.dbName @AT@ 4477 @LENGTH@ 4
------------------INS SimpleName@@dbName @TO@ FieldAccess@@this.dbName @AT@ 4482 @LENGTH@ 6


UPD ExpressionStatement@@MethodInvocation:assertEquals("https:www.google.com?proxyAuthHost=myotherproxy&proxyAuthPassword=RAW(pwd)&proxyAuthPort=2345&proxyAuthUsername=RAW(usr)",uri) @TO@ MethodInvocation:assertEquals("https://www.google.com?proxyAuthHost=myotherproxy&proxyAuthPassword=RAW(pwd)&proxyAuthPort=2345&proxyAuthUsername=RAW(usr)",uri) @AT@ 2166 @LENGTH@ 175
---UPD MethodInvocation@@assertEquals("https:www.google.com?proxyAuthHost=myotherproxy&proxyAuthPassword=RAW(pwd)&proxyAuthPort=2345&proxyAuthUsername=RAW(usr)",uri) @TO@ assertEquals("https://www.google.com?proxyAuthHost=myotherproxy&proxyAuthPassword=RAW(pwd)&proxyAuthPort=2345&proxyAuthUsername=RAW(usr)",uri) @AT@ 2166 @LENGTH@ 174
------UPD SimpleName@@MethodName:assertEquals:["https:www.google.com?proxyAuthHost=myotherproxy&proxyAuthPassword=RAW(pwd)&proxyAuthPort=2345&proxyAuthUsername=RAW(usr)", uri] @TO@ MethodName:assertEquals:["https://www.google.com?proxyAuthHost=myotherproxy&proxyAuthPassword=RAW(pwd)&proxyAuthPort=2345&proxyAuthUsername=RAW(usr)", uri] @AT@ 2166 @LENGTH@ 174
---------UPD StringLiteral@@"https:www.google.com?proxyAuthHost=myotherproxy&proxyAuthPassword=RAW(pwd)&proxyAuthPort=2345&proxyAuthUsername=RAW(usr)" @TO@ "https://www.google.com?proxyAuthHost=myotherproxy&proxyAuthPassword=RAW(pwd)&proxyAuthPort=2345&proxyAuthUsername=RAW(usr)" @AT@ 2196 @LENGTH@ 122


UPD MethodDeclaration@@protected, void, MethodName:doInit, Exception,  @TO@ protected, void, MethodName:doStart, Exception,  @AT@ 1461 @LENGTH@ 598
---UPD SimpleName@@MethodName:doInit @TO@ MethodName:doStart @AT@ 1476 @LENGTH@ 6
---UPD ExpressionStatement@@SuperMethodInvocation:super.doInit() @TO@ SuperMethodInvocation:super.doStart() @AT@ 1512 @LENGTH@ 15
------UPD SuperMethodInvocation@@super.doInit() @TO@ super.doStart() @AT@ 1512 @LENGTH@ 14
---------UPD SimpleName@@MethodName:doInit:[] @TO@ MethodName:doStart:[] @AT@ 1518 @LENGTH@ 6
---MOV ExpressionStatement@@SuperMethodInvocation:super.doInit() @TO@ MethodDeclaration@@protected, void, MethodName:doInit, Exception,  @AT@ 1512 @LENGTH@ 15


UPD ExpressionStatement@@MethodInvocation:PropertyBindingSupport.bindProperties(this.getCamelContext(),configProps,parameters) @TO@ MethodInvocation:PropertyBindingSupport.bindProperties(this.getCamelContext(),parameters,configProps) @AT@ 2836 @LENGTH@ 87
---UPD MethodInvocation@@PropertyBindingSupport.bindProperties(this.getCamelContext(),configProps,parameters) @TO@ PropertyBindingSupport.bindProperties(this.getCamelContext(),parameters,configProps) @AT@ 2836 @LENGTH@ 86
------UPD SimpleName@@MethodName:bindProperties:[this.getCamelContext(), configProps, parameters] @TO@ MethodName:bindProperties:[this.getCamelContext(), parameters, configProps] @AT@ 2859 @LENGTH@ 63
---------UPD SimpleName@@configProps @TO@ parameters @AT@ 2898 @LENGTH@ 11
---------UPD SimpleName@@parameters @TO@ configProps @AT@ 2911 @LENGTH@ 10


INS MethodDeclaration@@public, static, boolean, MethodName:isRegularFile, final File file, final LinkOption... options,  @TO@ TypeDeclaration@@[public]FileUtils,  @AT@ 83746 @LENGTH@ 172
---INS Modifier@@public @TO@ MethodDeclaration@@public, static, boolean, MethodName:isRegularFile, final File file, final LinkOption... options,  @AT@ 83746 @LENGTH@ 6
---INS Modifier@@static @TO@ MethodDeclaration@@public, static, boolean, MethodName:isRegularFile, final File file, final LinkOption... options,  @AT@ 83753 @LENGTH@ 6
---INS PrimitiveType@@boolean @TO@ MethodDeclaration@@public, static, boolean, MethodName:isRegularFile, final File file, final LinkOption... options,  @AT@ 83760 @LENGTH@ 7
---INS SimpleName@@MethodName:isRegularFile @TO@ MethodDeclaration@@public, static, boolean, MethodName:isRegularFile, final File file, final LinkOption... options,  @AT@ 83768 @LENGTH@ 13
---INS SingleVariableDeclaration@@final File file @TO@ MethodDeclaration@@public, static, boolean, MethodName:isRegularFile, final File file, final LinkOption... options,  @AT@ 83782 @LENGTH@ 15
------INS Modifier@@final @TO@ SingleVariableDeclaration@@final File file @AT@ 83782 @LENGTH@ 5
------INS SimpleType@@File @TO@ SingleVariableDeclaration@@final File file @AT@ 83788 @LENGTH@ 4
------INS SimpleName@@file @TO@ SingleVariableDeclaration@@final File file @AT@ 83793 @LENGTH@ 4
---INS SingleVariableDeclaration@@final LinkOption... options @TO@ MethodDeclaration@@public, static, boolean, MethodName:isRegularFile, final File file, final LinkOption... options,  @AT@ 83799 @LENGTH@ 27
------INS Modifier@@final @TO@ SingleVariableDeclaration@@final LinkOption... options @AT@ 83799 @LENGTH@ 5
------INS SimpleType@@LinkOption @TO@ SingleVariableDeclaration@@final LinkOption... options @AT@ 83805 @LENGTH@ 10
------INS SimpleName@@options @TO@ SingleVariableDeclaration@@final LinkOption... options @AT@ 83819 @LENGTH@ 7
---INS ReturnStatement@@ConditionalExpression:file != null ? Files.isRegularFile(file.toPath(),options) : false @TO@ MethodDeclaration@@public, static, boolean, MethodName:isRegularFile, final File file, final LinkOption... options,  @AT@ 83838 @LENGTH@ 74
------INS ConditionalExpression@@file != null ? Files.isRegularFile(file.toPath(),options) : false @TO@ ReturnStatement@@ConditionalExpression:file != null ? Files.isRegularFile(file.toPath(),options) : false @AT@ 83845 @LENGTH@ 66
---------INS InfixExpression@@file != null @TO@ ConditionalExpression@@file != null ? Files.isRegularFile(file.toPath(),options) : false @AT@ 83845 @LENGTH@ 12
------------INS SimpleName@@file @TO@ InfixExpression@@file != null @AT@ 83845 @LENGTH@ 4
------------INS Operator@@!= @TO@ InfixExpression@@file != null @AT@ 83849 @LENGTH@ 2
------------INS NullLiteral@@null @TO@ InfixExpression@@file != null @AT@ 83853 @LENGTH@ 4
---------INS MethodInvocation@@Files.isRegularFile(file.toPath(),options) @TO@ ConditionalExpression@@file != null ? Files.isRegularFile(file.toPath(),options) : false @AT@ 83860 @LENGTH@ 43
------------INS SimpleName@@Name:Files @TO@ MethodInvocation@@Files.isRegularFile(file.toPath(),options) @AT@ 83860 @LENGTH@ 5
------------INS SimpleName@@MethodName:isRegularFile:[file.toPath(), options] @TO@ MethodInvocation@@Files.isRegularFile(file.toPath(),options) @AT@ 83866 @LENGTH@ 37
---------------INS MethodInvocation@@file.toPath() @TO@ SimpleName@@MethodName:isRegularFile:[file.toPath(), options] @AT@ 83880 @LENGTH@ 13
------------------INS SimpleName@@Name:file @TO@ MethodInvocation@@file.toPath() @AT@ 83880 @LENGTH@ 4
------------------INS SimpleName@@MethodName:toPath:[] @TO@ MethodInvocation@@file.toPath() @AT@ 83885 @LENGTH@ 8
---------------INS SimpleName@@options @TO@ SimpleName@@MethodName:isRegularFile:[file.toPath(), options] @AT@ 83895 @LENGTH@ 7
---------INS BooleanLiteral@@false @TO@ ConditionalExpression@@file != null ? Files.isRegularFile(file.toPath(),options) : false @AT@ 83906 @LENGTH@ 5


MOV FieldDeclaration@@private, EventLoopGroup, [sharedWorkerServerGroup=new NettyWorkerPoolBuilder().withWorkerCount(2).withName("NettyServer").build()] @TO@ TypeDeclaration@@[public]NettyUseSharedWorkerThreadPoolTest, BaseNettyTest @AT@ 1295 @LENGTH@ 141


UPD IfStatement@@if (!HttpStatus.BAD_REQUEST.equals(response.getStatusCode())) {  this.defaultErrorHandler.handleError(response);} @TO@ if (HttpStatus.BAD_REQUEST.value() != response.getRawStatusCode()) {  this.defaultErrorHandler.handleError(response);} @AT@ 2088 @LENGTH@ 118
---INS InfixExpression@@HttpStatus.BAD_REQUEST.value() != response.getRawStatusCode() @TO@ IfStatement@@if (!HttpStatus.BAD_REQUEST.equals(response.getStatusCode())) {  this.defaultErrorHandler.handleError(response);} @AT@ 2092 @LENGTH@ 61
------INS MethodInvocation@@HttpStatus.BAD_REQUEST.value() @TO@ InfixExpression@@HttpStatus.BAD_REQUEST.value() != response.getRawStatusCode() @AT@ 2092 @LENGTH@ 30
---------MOV QualifiedName@@Name:HttpStatus.BAD_REQUEST @TO@ MethodInvocation@@HttpStatus.BAD_REQUEST.value() @AT@ 2093 @LENGTH@ 22
---------INS SimpleName@@MethodName:value:[] @TO@ MethodInvocation@@HttpStatus.BAD_REQUEST.value() @AT@ 2115 @LENGTH@ 7
------INS Operator@@!= @TO@ InfixExpression@@HttpStatus.BAD_REQUEST.value() != response.getRawStatusCode() @AT@ 2122 @LENGTH@ 2
------INS MethodInvocation@@response.getRawStatusCode() @TO@ InfixExpression@@HttpStatus.BAD_REQUEST.value() != response.getRawStatusCode() @AT@ 2126 @LENGTH@ 27
---------MOV SimpleName@@Name:response @TO@ MethodInvocation@@response.getRawStatusCode() @AT@ 2123 @LENGTH@ 8
---------MOV SimpleName@@MethodName:getStatusCode:[] @TO@ MethodInvocation@@response.getRawStatusCode() @AT@ 2132 @LENGTH@ 15
---DEL PrefixExpression@@!HttpStatus.BAD_REQUEST.equals(response.getStatusCode()) @AT@ 2092 @LENGTH@ 56
------DEL Operator@@! @AT@ 2092 @LENGTH@ 1
------DEL MethodInvocation@@HttpStatus.BAD_REQUEST.equals(response.getStatusCode()) @AT@ 2093 @LENGTH@ 55
---------DEL SimpleName@@MethodName:equals:[response.getStatusCode()] @AT@ 2116 @LENGTH@ 32
------------DEL MethodInvocation@@response.getStatusCode() @AT@ 2123 @LENGTH@ 24


UPD VariableDeclarationStatement@@final Transformer<T,T>[] cmds=transformers.toArray(new Transformer[transformers.size()]); @TO@ final Transformer<T,T>[] cmds=transformers.toArray(new Transformer[0]); @AT@ 3192 @LENGTH@ 92
---UPD VariableDeclarationFragment@@cmds=transformers.toArray(new Transformer[transformers.size()]) @TO@ cmds=transformers.toArray(new Transformer[0]) @AT@ 3218 @LENGTH@ 65
------UPD MethodInvocation@@transformers.toArray(new Transformer[transformers.size()]) @TO@ transformers.toArray(new Transformer[0]) @AT@ 3225 @LENGTH@ 58
---------UPD SimpleName@@MethodName:toArray:[new Transformer[transformers.size()]] @TO@ MethodName:toArray:[new Transformer[0]] @AT@ 3238 @LENGTH@ 45
------------UPD ArrayCreation@@new Transformer[transformers.size()] @TO@ new Transformer[0] @AT@ 3246 @LENGTH@ 36
---------------DEL MethodInvocation@@transformers.size() @AT@ 3262 @LENGTH@ 19
------------------DEL SimpleName@@Name:transformers @AT@ 3262 @LENGTH@ 12
------------------DEL SimpleName@@MethodName:size:[] @AT@ 3275 @LENGTH@ 6
---------------INS NumberLiteral@@0 @TO@ ArrayCreation@@new Transformer[transformers.size()] @AT@ 3262 @LENGTH@ 1


UPD FieldDeclaration@@private, long[], [parts=null] @TO@ private, long[], [parts] @AT@ 1705 @LENGTH@ 28
---UPD VariableDeclarationFragment@@parts=null @TO@ parts @AT@ 1720 @LENGTH@ 12
------DEL NullLiteral@@null @AT@ 1728 @LENGTH@ 4


INS MethodDeclaration@@protected, void, MethodName:doStart, Exception,  @TO@ TypeDeclaration@@[public]PollEnricher, AsyncProcessorSupport[IdAware, RouteIdAware, CamelContextAware] @AT@ 17359 @LENGTH@ 121
---MOV ExpressionStatement@@MethodInvocation:ServiceHelper.startService(consumerCache,aggregationStrategy) @TO@ MethodDeclaration@@protected, void, MethodName:doStart, Exception,  @AT@ 17342 @LENGTH@ 63
---INS Modifier@@protected @TO@ MethodDeclaration@@protected, void, MethodName:doStart, Exception,  @AT@ 17359 @LENGTH@ 9
---INS PrimitiveType@@void @TO@ MethodDeclaration@@protected, void, MethodName:doStart, Exception,  @AT@ 17369 @LENGTH@ 4
---INS SimpleName@@MethodName:doStart @TO@ MethodDeclaration@@protected, void, MethodName:doStart, Exception,  @AT@ 17374 @LENGTH@ 7
---INS SimpleType@@Exception @TO@ MethodDeclaration@@protected, void, MethodName:doStart, Exception,  @AT@ 17391 @LENGTH@ 9


DEL ExpressionStatement@@MethodInvocation:ObjectHelper.notNull(name,"Set name") @AT@ 2391 @LENGTH@ 39
---DEL MethodInvocation@@ObjectHelper.notNull(name,"Set name") @AT@ 2391 @LENGTH@ 38
------DEL SimpleName@@Name:ObjectHelper @AT@ 2391 @LENGTH@ 12
------DEL SimpleName@@MethodName:notNull:[name, "Set name"] @AT@ 2404 @LENGTH@ 25
---------DEL SimpleName@@name @AT@ 2412 @LENGTH@ 4
---------DEL StringLiteral@@"Set name" @AT@ 2418 @LENGTH@ 10


DEL ExpressionStatement@@Assignment:this.dbIndex=dbIndex @AT@ 4642 @LENGTH@ 23
---DEL Assignment@@this.dbIndex=dbIndex @AT@ 4642 @LENGTH@ 22
------DEL FieldAccess@@this.dbIndex @AT@ 4642 @LENGTH@ 12
---------DEL ThisExpression@@this @AT@ 4642 @LENGTH@ 4
---------DEL SimpleName@@dbIndex @AT@ 4647 @LENGTH@ 7
------DEL Operator@@= @AT@ 4654 @LENGTH@ 1
------DEL SimpleName@@dbIndex @AT@ 4657 @LENGTH@ 7


UPD VariableDeclarationStatement@@final String doc="Component entry DSL builder. You can build a component like this: ComponentBuilderFactory.kafka().setBrokers(\"{{host:port}}\").build()" + "\n\n" + AbstractGeneratorMojo.GENERATED_MSG; @TO@ final String doc="Component DSL builder." + "\n" + "\nYou can build a component as follows:"+ "\n<pre>"+ "\n    KafkaComponent kafka = ComponentBuilderFactory.kafka().setBrokers(\"{{host:port}}\").build();"+ "\n</pre>"+ "\nThis creates a new Kafka component, but often you want to register the component to CamelContext, which can be done as follows:"+ "\n<pre>"+ "\n    ComponentBuilderFactory.kafka().setBrokers(\"{{host:port}}\").register(camelContext, \"kafka\");"+ "\n</pre>"+ "\nThis configures and registers the component to CamelContext with the name kafka. If you have separate Kafka brokers you can register more components with their own name:"+ "\n<pre>"+ "\n    ComponentBuilderFactory.kafka().setBrokers(\"{{host2:port}}\").register(camelContext, \"kafka2\");"+ "\n</pre>"+ "\n"+ "\n"+ AbstractGeneratorMojo.GENERATED_MSG; @AT@ 3168 @LENGTH@ 256
---UPD VariableDeclarationFragment@@doc="Component entry DSL builder. You can build a component like this: ComponentBuilderFactory.kafka().setBrokers(\"{{host:port}}\").build()" + "\n\n" + AbstractGeneratorMojo.GENERATED_MSG @TO@ doc="Component DSL builder." + "\n" + "\nYou can build a component as follows:"+ "\n<pre>"+ "\n    KafkaComponent kafka = ComponentBuilderFactory.kafka().setBrokers(\"{{host:port}}\").build();"+ "\n</pre>"+ "\nThis creates a new Kafka component, but often you want to register the component to CamelContext, which can be done as follows:"+ "\n<pre>"+ "\n    ComponentBuilderFactory.kafka().setBrokers(\"{{host:port}}\").register(camelContext, \"kafka\");"+ "\n</pre>"+ "\nThis configures and registers the component to CamelContext with the name kafka. If you have separate Kafka brokers you can register more components with their own name:"+ "\n<pre>"+ "\n    ComponentBuilderFactory.kafka().setBrokers(\"{{host2:port}}\").register(camelContext, \"kafka2\");"+ "\n</pre>"+ "\n"+ "\n"+ AbstractGeneratorMojo.GENERATED_MSG @AT@ 3181 @LENGTH@ 242
------UPD InfixExpression@@"Component entry DSL builder. You can build a component like this: ComponentBuilderFactory.kafka().setBrokers(\"{{host:port}}\").build()" + "\n\n" + AbstractGeneratorMojo.GENERATED_MSG @TO@ "Component DSL builder." + "\n" + "\nYou can build a component as follows:"+ "\n<pre>"+ "\n    KafkaComponent kafka = ComponentBuilderFactory.kafka().setBrokers(\"{{host:port}}\").build();"+ "\n</pre>"+ "\nThis creates a new Kafka component, but often you want to register the component to CamelContext, which can be done as follows:"+ "\n<pre>"+ "\n    ComponentBuilderFactory.kafka().setBrokers(\"{{host:port}}\").register(camelContext, \"kafka\");"+ "\n</pre>"+ "\nThis configures and registers the component to CamelContext with the name kafka. If you have separate Kafka brokers you can register more components with their own name:"+ "\n<pre>"+ "\n    ComponentBuilderFactory.kafka().setBrokers(\"{{host2:port}}\").register(camelContext, \"kafka2\");"+ "\n</pre>"+ "\n"+ "\n"+ AbstractGeneratorMojo.GENERATED_MSG @AT@ 3203 @LENGTH@ 220
---------UPD StringLiteral@@"Component entry DSL builder. You can build a component like this: ComponentBuilderFactory.kafka().setBrokers(\"{{host:port}}\").build()" @TO@ "Component DSL builder." @AT@ 3203 @LENGTH@ 137
---------INS StringLiteral@@"\nYou can build a component as follows:" @TO@ InfixExpression@@"Component entry DSL builder. You can build a component like this: ComponentBuilderFactory.kafka().setBrokers(\"{{host:port}}\").build()" + "\n\n" + AbstractGeneratorMojo.GENERATED_MSG @AT@ 3275 @LENGTH@ 41
---------INS StringLiteral@@"\n<pre>" @TO@ InfixExpression@@"Component entry DSL builder. You can build a component like this: ComponentBuilderFactory.kafka().setBrokers(\"{{host:port}}\").build()" + "\n\n" + AbstractGeneratorMojo.GENERATED_MSG @AT@ 3346 @LENGTH@ 9
---------UPD StringLiteral@@"\n\n" @TO@ "\n" @AT@ 3361 @LENGTH@ 6
---------INS StringLiteral@@"\n    KafkaComponent kafka = ComponentBuilderFactory.kafka().setBrokers(\"{{host:port}}\").build();" @TO@ InfixExpression@@"Component entry DSL builder. You can build a component like this: ComponentBuilderFactory.kafka().setBrokers(\"{{host:port}}\").build()" + "\n\n" + AbstractGeneratorMojo.GENERATED_MSG @AT@ 3385 @LENGTH@ 101
---------INS StringLiteral@@"\n</pre>" @TO@ InfixExpression@@"Component entry DSL builder. You can build a component like this: ComponentBuilderFactory.kafka().setBrokers(\"{{host:port}}\").build()" + "\n\n" + AbstractGeneratorMojo.GENERATED_MSG @AT@ 3516 @LENGTH@ 10
---------INS StringLiteral@@"\nThis creates a new Kafka component, but often you want to register the component to CamelContext, which can be done as follows:" @TO@ InfixExpression@@"Component entry DSL builder. You can build a component like this: ComponentBuilderFactory.kafka().setBrokers(\"{{host:port}}\").build()" + "\n\n" + AbstractGeneratorMojo.GENERATED_MSG @AT@ 3556 @LENGTH@ 131
---------INS StringLiteral@@"\n<pre>" @TO@ InfixExpression@@"Component entry DSL builder. You can build a component like this: ComponentBuilderFactory.kafka().setBrokers(\"{{host:port}}\").build()" + "\n\n" + AbstractGeneratorMojo.GENERATED_MSG @AT@ 3717 @LENGTH@ 9
---------INS StringLiteral@@"\n    ComponentBuilderFactory.kafka().setBrokers(\"{{host:port}}\").register(camelContext, \"kafka\");" @TO@ InfixExpression@@"Component entry DSL builder. You can build a component like this: ComponentBuilderFactory.kafka().setBrokers(\"{{host:port}}\").build()" + "\n\n" + AbstractGeneratorMojo.GENERATED_MSG @AT@ 3756 @LENGTH@ 104
---------INS StringLiteral@@"\n</pre>" @TO@ InfixExpression@@"Component entry DSL builder. You can build a component like this: ComponentBuilderFactory.kafka().setBrokers(\"{{host:port}}\").build()" + "\n\n" + AbstractGeneratorMojo.GENERATED_MSG @AT@ 3890 @LENGTH@ 10
---------INS StringLiteral@@"\nThis configures and registers the component to CamelContext with the name kafka. If you have separate Kafka brokers you can register more components with their own name:" @TO@ InfixExpression@@"Component entry DSL builder. You can build a component like this: ComponentBuilderFactory.kafka().setBrokers(\"{{host:port}}\").build()" + "\n\n" + AbstractGeneratorMojo.GENERATED_MSG @AT@ 3930 @LENGTH@ 173
---------INS StringLiteral@@"\n<pre>" @TO@ InfixExpression@@"Component entry DSL builder. You can build a component like this: ComponentBuilderFactory.kafka().setBrokers(\"{{host:port}}\").build()" + "\n\n" + AbstractGeneratorMojo.GENERATED_MSG @AT@ 4133 @LENGTH@ 9
---------INS StringLiteral@@"\n    ComponentBuilderFactory.kafka().setBrokers(\"{{host2:port}}\").register(camelContext, \"kafka2\");" @TO@ InfixExpression@@"Component entry DSL builder. You can build a component like this: ComponentBuilderFactory.kafka().setBrokers(\"{{host:port}}\").build()" + "\n\n" + AbstractGeneratorMojo.GENERATED_MSG @AT@ 4172 @LENGTH@ 106
---------INS StringLiteral@@"\n</pre>" @TO@ InfixExpression@@"Component entry DSL builder. You can build a component like this: ComponentBuilderFactory.kafka().setBrokers(\"{{host:port}}\").build()" + "\n\n" + AbstractGeneratorMojo.GENERATED_MSG @AT@ 4308 @LENGTH@ 10
---------INS StringLiteral@@"\n" @TO@ InfixExpression@@"Component entry DSL builder. You can build a component like this: ComponentBuilderFactory.kafka().setBrokers(\"{{host:port}}\").build()" + "\n\n" + AbstractGeneratorMojo.GENERATED_MSG @AT@ 4348 @LENGTH@ 4
---------INS StringLiteral@@"\n" @TO@ InfixExpression@@"Component entry DSL builder. You can build a component like this: ComponentBuilderFactory.kafka().setBrokers(\"{{host:port}}\").build()" + "\n\n" + AbstractGeneratorMojo.GENERATED_MSG @AT@ 4382 @LENGTH@ 4


UPD ExpressionStatement@@MethodInvocation:context.getStreamCachingStrategy().setSpoolDirectory("target/camel/cache") @TO@ MethodInvocation:context.getStreamCachingStrategy().setSpoolDirectory(testDirectory().toString()) @AT@ 1691 @LENGTH@ 75
---UPD MethodInvocation@@context.getStreamCachingStrategy().setSpoolDirectory("target/camel/cache") @TO@ context.getStreamCachingStrategy().setSpoolDirectory(testDirectory().toString()) @AT@ 1691 @LENGTH@ 74
------UPD SimpleName@@MethodName:setSpoolDirectory:["target/camel/cache"] @TO@ MethodName:setSpoolDirectory:[testDirectory().toString()] @AT@ 1726 @LENGTH@ 39
---------INS MethodInvocation@@testDirectory().toString() @TO@ SimpleName@@MethodName:setSpoolDirectory:["target/camel/cache"] @AT@ 1744 @LENGTH@ 26
------------INS MethodInvocation@@MethodName:testDirectory:[] @TO@ MethodInvocation@@testDirectory().toString() @AT@ 1744 @LENGTH@ 15
------------INS SimpleName@@MethodName:toString:[] @TO@ MethodInvocation@@testDirectory().toString() @AT@ 1760 @LENGTH@ 10
---------DEL StringLiteral@@"target/camel/cache" @AT@ 1744 @LENGTH@ 20


INS TryStatement@@try {  context.refresh();  context.registerShutdownHook();}  finally {  SpringCamelContext.setNoStart(false);} @TO@ MethodDeclaration@@protected, ApplicationContext, MethodName:loadContext, GenericApplicationContext context, Class<?> testClass, Exception,  @AT@ 6503 @LENGTH@ 257
---MOV ExpressionStatement@@MethodInvocation:context.refresh() @TO@ TryStatement@@try {  context.refresh();  context.registerShutdownHook();}  finally {  SpringCamelContext.setNoStart(false);} @AT@ 6503 @LENGTH@ 18
---MOV ExpressionStatement@@MethodInvocation:context.registerShutdownHook() @TO@ TryStatement@@try {  context.refresh();  context.registerShutdownHook();}  finally {  SpringCamelContext.setNoStart(false);} @AT@ 6530 @LENGTH@ 31
---INS Block@@FinallyBody:{  SpringCamelContext.setNoStart(false);} @TO@ TryStatement@@try {  context.refresh();  context.registerShutdownHook();}  finally {  SpringCamelContext.setNoStart(false);} @AT@ 6602 @LENGTH@ 158
------MOV ExpressionStatement@@MethodInvocation:SpringCamelContext.setNoStart(false) @TO@ Block@@FinallyBody:{  SpringCamelContext.setNoStart(false);} @AT@ 6663 @LENGTH@ 37


UPD IfStatement@@if (path1 == null ^ path2 == null) {  return false;} @TO@ if (path1 == null || path2 == null) {  return false;} @AT@ 26974 @LENGTH@ 72
---UPD InfixExpression@@path1 == null ^ path2 == null @TO@ path1 == null || path2 == null @AT@ 26978 @LENGTH@ 29
------UPD Operator@@^ @TO@ || @AT@ 26991 @LENGTH@ 1


UPD TypeDeclaration@@[@UriEndpoint(firstVersion="3.5.0",scheme="oaipmh",title="OAI-PMH",syntax="oaipmh:baseUrl",lenientProperties=true,category={Category.ENDPOINT,Category.WEBSERVICE,Category.BATCH}), public]OAIPMHEndpoint, DefaultPollingEndpoint @TO@ [@UriEndpoint(firstVersion="3.5.0",scheme="oaipmh",title="OAI-PMH",syntax="oaipmh:baseUrl",lenientProperties=true,category={Category.ENDPOINT,Category.WEBSERVICE,Category.BATCH}), public]OAIPMHEndpoint, ScheduledPollEndpoint @AT@ 1414 @LENGTH@ 5244
---UPD SimpleType@@DefaultPollingEndpoint @TO@ ScheduledPollEndpoint @AT@ 1662 @LENGTH@ 22


DEL ExpressionStatement@@MethodInvocation:from("file-watch://" + testPath() + "?events=DELETE").to("mock:watchDelete") @AT@ 6816 @LENGTH@ 102
---DEL MethodInvocation@@from("file-watch://" + testPath() + "?events=DELETE").to("mock:watchDelete") @AT@ 6816 @LENGTH@ 101
------DEL MethodInvocation@@MethodName:from:["file-watch://" + testPath() + "?events=DELETE"] @AT@ 6816 @LENGTH@ 53
---------DEL InfixExpression@@"file-watch://" + testPath() + "?events=DELETE" @AT@ 6821 @LENGTH@ 47
------------DEL StringLiteral@@"file-watch://" @AT@ 6821 @LENGTH@ 15
------------DEL Operator@@+ @AT@ 6836 @LENGTH@ 1
------------DEL MethodInvocation@@MethodName:testPath:[] @AT@ 6839 @LENGTH@ 10
------------DEL StringLiteral@@"?events=DELETE" @AT@ 6852 @LENGTH@ 16
------DEL SimpleName@@MethodName:to:["mock:watchDelete"] @AT@ 6895 @LENGTH@ 22
---------DEL StringLiteral@@"mock:watchDelete" @AT@ 6898 @LENGTH@ 18


UPD Block@@ElseBody:{  matcher=createMatcher(HOUR_REGEX_PATTERN,source);  if (matcher.find()) {    milliseconds=milliseconds + (3600000 * Long.valueOf(matcher.group(1)));    foundFlag=true;  }  matcher=createMatcher(MINUTES_REGEX_PATTERN,source);  if (matcher.find()) {    long minutes=Long.valueOf(matcher.group(1));    if ((minutes > 59) && foundFlag) {      throw new IllegalArgumentException("Minutes should contain a valid value between 0 and 59: " + source);    }    foundFlag=true;    milliseconds=milliseconds + (60000 * minutes);  }  matcher=createMatcher(SECONDS_REGEX_PATTERN,source);  if (matcher.find()) {    long seconds=Long.valueOf(matcher.group(1));    if ((seconds > 59) && foundFlag) {      throw new IllegalArgumentException("Seconds should contain a valid value between 0 and 59: " + source);    }    foundFlag=true;    milliseconds=milliseconds + (1000 * seconds);  }  if (!foundFlag) {    milliseconds=Long.valueOf(source);  }} @TO@ ElseBody:{  matcher=createMatcher(HOUR_REGEX_PATTERN,source);  if (matcher.find()) {    milliseconds=milliseconds + (3600000 * Long.valueOf(matcher.group(1)));    foundFlag=true;  }  matcher=createMatcher(MINUTES_REGEX_PATTERN,source);  if (matcher.find()) {    long minutes=Long.valueOf(matcher.group(1));    if (minutes > 59 && foundFlag) {      throw new IllegalArgumentException("Minutes should contain a valid value between 0 and 59: " + source);    }    foundFlag=true;    milliseconds=milliseconds + (60000 * minutes);  }  matcher=createMatcher(SECONDS_REGEX_PATTERN,source);  if (matcher.find()) {    long seconds=Long.valueOf(matcher.group(1));    if (seconds > 59 && foundFlag) {      throw new IllegalArgumentException("Seconds should contain a valid value between 0 and 59: " + source);    }    foundFlag=true;    milliseconds=milliseconds + (1000 * seconds);  }  if (!foundFlag) {    milliseconds=Long.valueOf(source);  }} @AT@ 2263 @LENGTH@ 1471
---UPD IfStatement@@if (matcher.find()) {  long minutes=Long.valueOf(matcher.group(1));  if ((minutes > 59) && foundFlag) {    throw new IllegalArgumentException("Minutes should contain a valid value between 0 and 59: " + source);  }  foundFlag=true;  milliseconds=milliseconds + (60000 * minutes);} @TO@ if (matcher.find()) {  long minutes=Long.valueOf(matcher.group(1));  if (minutes > 59 && foundFlag) {    throw new IllegalArgumentException("Minutes should contain a valid value between 0 and 59: " + source);  }  foundFlag=true;  milliseconds=milliseconds + (60000 * minutes);} @AT@ 2583 @LENGTH@ 390
------UPD Block@@ThenBody:{  long minutes=Long.valueOf(matcher.group(1));  if ((minutes > 59) && foundFlag) {    throw new IllegalArgumentException("Minutes should contain a valid value between 0 and 59: " + source);  }  foundFlag=true;  milliseconds=milliseconds + (60000 * minutes);} @TO@ ThenBody:{  long minutes=Long.valueOf(matcher.group(1));  if (minutes > 59 && foundFlag) {    throw new IllegalArgumentException("Minutes should contain a valid value between 0 and 59: " + source);  }  foundFlag=true;  milliseconds=milliseconds + (60000 * minutes);} @AT@ 2603 @LENGTH@ 370
---------UPD IfStatement@@if ((minutes > 59) && foundFlag) {  throw new IllegalArgumentException("Minutes should contain a valid value between 0 and 59: " + source);} @TO@ if (minutes > 59 && foundFlag) {  throw new IllegalArgumentException("Minutes should contain a valid value between 0 and 59: " + source);} @AT@ 2684 @LENGTH@ 176
------------UPD InfixExpression@@(minutes > 59) && foundFlag @TO@ minutes > 59 && foundFlag @AT@ 2688 @LENGTH@ 27
---------------DEL ParenthesizedExpression@@(minutes > 59) @AT@ 2688 @LENGTH@ 14
------------------DEL InfixExpression@@minutes > 59 @AT@ 2689 @LENGTH@ 12
---------------INS InfixExpression@@minutes > 59 @TO@ InfixExpression@@(minutes > 59) && foundFlag @AT@ 2688 @LENGTH@ 12
------------------MOV SimpleName@@minutes @TO@ InfixExpression@@minutes > 59 @AT@ 2689 @LENGTH@ 7
------------------MOV Operator@@> @TO@ InfixExpression@@minutes > 59 @AT@ 2696 @LENGTH@ 1
------------------MOV NumberLiteral@@59 @TO@ InfixExpression@@minutes > 59 @AT@ 2699 @LENGTH@ 2
---UPD IfStatement@@if (matcher.find()) {  long seconds=Long.valueOf(matcher.group(1));  if ((seconds > 59) && foundFlag) {    throw new IllegalArgumentException("Seconds should contain a valid value between 0 and 59: " + source);  }  foundFlag=true;  milliseconds=milliseconds + (1000 * seconds);} @TO@ if (matcher.find()) {  long seconds=Long.valueOf(matcher.group(1));  if (seconds > 59 && foundFlag) {    throw new IllegalArgumentException("Seconds should contain a valid value between 0 and 59: " + source);  }  foundFlag=true;  milliseconds=milliseconds + (1000 * seconds);} @AT@ 3055 @LENGTH@ 389
------UPD Block@@ThenBody:{  long seconds=Long.valueOf(matcher.group(1));  if ((seconds > 59) && foundFlag) {    throw new IllegalArgumentException("Seconds should contain a valid value between 0 and 59: " + source);  }  foundFlag=true;  milliseconds=milliseconds + (1000 * seconds);} @TO@ ThenBody:{  long seconds=Long.valueOf(matcher.group(1));  if (seconds > 59 && foundFlag) {    throw new IllegalArgumentException("Seconds should contain a valid value between 0 and 59: " + source);  }  foundFlag=true;  milliseconds=milliseconds + (1000 * seconds);} @AT@ 3075 @LENGTH@ 369
---------UPD IfStatement@@if ((seconds > 59) && foundFlag) {  throw new IllegalArgumentException("Seconds should contain a valid value between 0 and 59: " + source);} @TO@ if (seconds > 59 && foundFlag) {  throw new IllegalArgumentException("Seconds should contain a valid value between 0 and 59: " + source);} @AT@ 3156 @LENGTH@ 176
------------UPD InfixExpression@@(seconds > 59) && foundFlag @TO@ seconds > 59 && foundFlag @AT@ 3160 @LENGTH@ 27
---------------INS InfixExpression@@seconds > 59 @TO@ InfixExpression@@(seconds > 59) && foundFlag @AT@ 3158 @LENGTH@ 12
------------------MOV SimpleName@@seconds @TO@ InfixExpression@@seconds > 59 @AT@ 3161 @LENGTH@ 7
------------------MOV Operator@@> @TO@ InfixExpression@@seconds > 59 @AT@ 3168 @LENGTH@ 1
------------------MOV NumberLiteral@@59 @TO@ InfixExpression@@seconds > 59 @AT@ 3171 @LENGTH@ 2
---------------DEL ParenthesizedExpression@@(seconds > 59) @AT@ 3160 @LENGTH@ 14
------------------DEL InfixExpression@@seconds > 59 @AT@ 3161 @LENGTH@ 12


UPD ReturnStatement@@InfixExpression:this == o || (o != null && getClass() == o.getClass() && route.equals(((ManagedRoute)o).route)) @TO@ InfixExpression:this == o || o != null && getClass() == o.getClass() && route.equals(((ManagedRoute)o).route) @AT@ 22861 @LENGTH@ 104
---UPD InfixExpression@@this == o || (o != null && getClass() == o.getClass() && route.equals(((ManagedRoute)o).route)) @TO@ this == o || o != null && getClass() == o.getClass() && route.equals(((ManagedRoute)o).route) @AT@ 22868 @LENGTH@ 96
------DEL ParenthesizedExpression@@(o != null && getClass() == o.getClass() && route.equals(((ManagedRoute)o).route)) @AT@ 22881 @LENGTH@ 83
------MOV InfixExpression@@o != null && getClass() == o.getClass() && route.equals(((ManagedRoute)o).route) @TO@ InfixExpression@@this == o || (o != null && getClass() == o.getClass() && route.equals(((ManagedRoute)o).route)) @AT@ 22882 @LENGTH@ 81


UPD IfStatement@@if (!this.defaultModule.equals(module)) {  writer.writeString(startIndex + MODULE_INDEX,module.getName());} @TO@ if (module != null && !this.defaultModule.equals(module)) {  writer.writeString(startIndex + MODULE_INDEX,module.getName());} @AT@ 3094 @LENGTH@ 128
---INS InfixExpression@@module != null && !this.defaultModule.equals(module) @TO@ IfStatement@@if (!this.defaultModule.equals(module)) {  writer.writeString(startIndex + MODULE_INDEX,module.getName());} @AT@ 3098 @LENGTH@ 52
------MOV PrefixExpression@@!this.defaultModule.equals(module) @TO@ InfixExpression@@module != null && !this.defaultModule.equals(module) @AT@ 3098 @LENGTH@ 34
------INS InfixExpression@@module != null @TO@ InfixExpression@@module != null && !this.defaultModule.equals(module) @AT@ 3098 @LENGTH@ 14
---------INS SimpleName@@module @TO@ InfixExpression@@module != null @AT@ 3098 @LENGTH@ 6
---------INS Operator@@!= @TO@ InfixExpression@@module != null @AT@ 3104 @LENGTH@ 2
---------INS NullLiteral@@null @TO@ InfixExpression@@module != null @AT@ 3108 @LENGTH@ 4
------INS Operator@@&& @TO@ InfixExpression@@module != null && !this.defaultModule.equals(module) @AT@ 3112 @LENGTH@ 2


UPD ExpressionStatement@@MethodInvocation:assertThatThrownBy(() -> rabbitTemplate.onMessage(replyMessage)).isInstanceOf(AmqpRejectAndDontRequeueException.class).hasMessage("Reply received after timeout") @TO@ MethodInvocation:assertThatThrownBy(() -> rabbitTemplate.onMessage(replyMessage,mock(Channel.class))).isInstanceOf(AmqpRejectAndDontRequeueException.class).hasMessage("Reply received after timeout") @AT@ 3527 @LENGTH@ 170
---UPD MethodInvocation@@assertThatThrownBy(() -> rabbitTemplate.onMessage(replyMessage)).isInstanceOf(AmqpRejectAndDontRequeueException.class).hasMessage("Reply received after timeout") @TO@ assertThatThrownBy(() -> rabbitTemplate.onMessage(replyMessage,mock(Channel.class))).isInstanceOf(AmqpRejectAndDontRequeueException.class).hasMessage("Reply received after timeout") @AT@ 3527 @LENGTH@ 169
------UPD MethodInvocation@@MethodName:assertThatThrownBy:[() -> rabbitTemplate.onMessage(replyMessage)] @TO@ MethodName:assertThatThrownBy:[() -> rabbitTemplate.onMessage(replyMessage,mock(Channel.class))] @AT@ 3527 @LENGTH@ 64
---------UPD LambdaExpression@@() -> rabbitTemplate.onMessage(replyMessage) @TO@ () -> rabbitTemplate.onMessage(replyMessage,mock(Channel.class)) @AT@ 3546 @LENGTH@ 44
------------UPD MethodInvocation@@rabbitTemplate.onMessage(replyMessage) @TO@ rabbitTemplate.onMessage(replyMessage,mock(Channel.class)) @AT@ 3552 @LENGTH@ 38
---------------UPD SimpleName@@MethodName:onMessage:[replyMessage] @TO@ MethodName:onMessage:[replyMessage, mock(Channel.class)] @AT@ 3567 @LENGTH@ 23
------------------INS MethodInvocation@@mock(Channel.class) @TO@ SimpleName@@MethodName:onMessage:[replyMessage] @AT@ 3689 @LENGTH@ 19
---------------------INS SimpleName@@MethodName:mock:[Channel.class] @TO@ MethodInvocation@@mock(Channel.class) @AT@ 3689 @LENGTH@ 19
------------------------INS TypeLiteral@@Channel.class @TO@ SimpleName@@MethodName:mock:[Channel.class] @AT@ 3694 @LENGTH@ 13


UPD TryStatement@@try {  SpringCamelContext.setNoStart(true);  System.setProperty("skipStartingCamelContext","true");  ConfigurableApplicationContext context=(ConfigurableApplicationContext)super.loadContext(mergedConfig);  SpringCamelContext.setNoStart(false);  System.clearProperty("skipStartingCamelContext");  return loadContext(context,testClass);}  finally {  CamelAnnotationsHandler.cleanup(testClass);} @TO@ try {  SpringCamelContext.setNoStart(true);  ConfigurableApplicationContext context=(ConfigurableApplicationContext)super.loadContext(mergedConfig);  return loadContext(context,testClass);}  finally {  CamelAnnotationsHandler.cleanup(testClass);  SpringCamelContext.setNoStart(false);} @AT@ 2451 @LENGTH@ 491
---DEL ExpressionStatement@@MethodInvocation:System.setProperty("skipStartingCamelContext","true") @AT@ 2518 @LENGTH@ 55
------DEL MethodInvocation@@System.setProperty("skipStartingCamelContext","true") @AT@ 2518 @LENGTH@ 54
---------DEL SimpleName@@Name:System @AT@ 2518 @LENGTH@ 6
---------DEL SimpleName@@MethodName:setProperty:["skipStartingCamelContext", "true"] @AT@ 2525 @LENGTH@ 47
------------DEL StringLiteral@@"skipStartingCamelContext" @AT@ 2537 @LENGTH@ 26
------------DEL StringLiteral@@"true" @AT@ 2565 @LENGTH@ 6
---DEL ExpressionStatement@@MethodInvocation:System.clearProperty("skipStartingCamelContext") @AT@ 2755 @LENGTH@ 49
------DEL MethodInvocation@@System.clearProperty("skipStartingCamelContext") @AT@ 2755 @LENGTH@ 48
---------DEL SimpleName@@Name:System @AT@ 2755 @LENGTH@ 6
---------DEL SimpleName@@MethodName:clearProperty:["skipStartingCamelContext"] @AT@ 2762 @LENGTH@ 41
------------DEL StringLiteral@@"skipStartingCamelContext" @AT@ 2776 @LENGTH@ 26
---UPD Block@@FinallyBody:{  CamelAnnotationsHandler.cleanup(testClass);} @TO@ FinallyBody:{  CamelAnnotationsHandler.cleanup(testClass);  SpringCamelContext.setNoStart(false);} @AT@ 2875 @LENGTH@ 67
------MOV ExpressionStatement@@MethodInvocation:SpringCamelContext.setNoStart(false) @TO@ Block@@FinallyBody:{  CamelAnnotationsHandler.cleanup(testClass);} @AT@ 2705 @LENGTH@ 37


UPD IfStatement@@if (jwk.getAlgorithm() != null) {  jwsAlgorithms.add((JWSAlgorithm)jwk.getAlgorithm());} else {  if (jwk.getKeyType() == KeyType.RSA) {    jwsAlgorithms.addAll(JWSAlgorithm.Family.RSA);  } else   if (jwk.getKeyType() == KeyType.EC) {    jwsAlgorithms.addAll(JWSAlgorithm.Family.EC);  }} @TO@ if (jwk.getAlgorithm() != null) {  JWSAlgorithm jwsAlgorithm=JWSAlgorithm.parse(jwk.getAlgorithm().getName());  jwsAlgorithms.add(jwsAlgorithm);} else {  if (jwk.getKeyType() == KeyType.RSA) {    jwsAlgorithms.addAll(JWSAlgorithm.Family.RSA);  } else   if (jwk.getKeyType() == KeyType.EC) {    jwsAlgorithms.addAll(JWSAlgorithm.Family.EC);  }} @AT@ 3653 @LENGTH@ 326
---UPD Block@@ThenBody:{  jwsAlgorithms.add((JWSAlgorithm)jwk.getAlgorithm());} @TO@ ThenBody:{  JWSAlgorithm jwsAlgorithm=JWSAlgorithm.parse(jwk.getAlgorithm().getName());  jwsAlgorithms.add(jwsAlgorithm);} @AT@ 3685 @LENGTH@ 66
------INS VariableDeclarationStatement@@JWSAlgorithm jwsAlgorithm=JWSAlgorithm.parse(jwk.getAlgorithm().getName()); @TO@ Block@@ThenBody:{  jwsAlgorithms.add((JWSAlgorithm)jwk.getAlgorithm());} @AT@ 3692 @LENGTH@ 77
---------INS SimpleType@@JWSAlgorithm @TO@ VariableDeclarationStatement@@JWSAlgorithm jwsAlgorithm=JWSAlgorithm.parse(jwk.getAlgorithm().getName()); @AT@ 3692 @LENGTH@ 12
---------INS VariableDeclarationFragment@@jwsAlgorithm=JWSAlgorithm.parse(jwk.getAlgorithm().getName()) @TO@ VariableDeclarationStatement@@JWSAlgorithm jwsAlgorithm=JWSAlgorithm.parse(jwk.getAlgorithm().getName()); @AT@ 3705 @LENGTH@ 63
------------INS SimpleName@@jwsAlgorithm @TO@ VariableDeclarationFragment@@jwsAlgorithm=JWSAlgorithm.parse(jwk.getAlgorithm().getName()) @AT@ 3705 @LENGTH@ 12
------------INS MethodInvocation@@JWSAlgorithm.parse(jwk.getAlgorithm().getName()) @TO@ VariableDeclarationFragment@@jwsAlgorithm=JWSAlgorithm.parse(jwk.getAlgorithm().getName()) @AT@ 3720 @LENGTH@ 48
---------------MOV SimpleName@@Name:jwsAlgorithms @TO@ MethodInvocation@@JWSAlgorithm.parse(jwk.getAlgorithm().getName()) @AT@ 3692 @LENGTH@ 13
---------------MOV SimpleName@@MethodName:add:[(JWSAlgorithm)jwk.getAlgorithm()] @TO@ MethodInvocation@@JWSAlgorithm.parse(jwk.getAlgorithm().getName()) @AT@ 3706 @LENGTH@ 38
------------------DEL CastExpression@@(JWSAlgorithm)jwk.getAlgorithm() @AT@ 3710 @LENGTH@ 33
---------------------DEL SimpleType@@JWSAlgorithm @AT@ 3711 @LENGTH@ 12
---------------------DEL MethodInvocation@@jwk.getAlgorithm() @AT@ 3725 @LENGTH@ 18
------------------INS MethodInvocation@@jwk.getAlgorithm().getName() @TO@ SimpleName@@MethodName:add:[(JWSAlgorithm)jwk.getAlgorithm()] @AT@ 3739 @LENGTH@ 28
---------------------MOV SimpleName@@Name:jwk @TO@ MethodInvocation@@jwk.getAlgorithm().getName() @AT@ 3725 @LENGTH@ 3
---------------------MOV SimpleName@@Name:jwk @TO@ MethodInvocation@@jwk.getAlgorithm().getName() @AT@ 3725 @LENGTH@ 3
---------------------MOV SimpleName@@MethodName:getAlgorithm:[] @TO@ MethodInvocation@@jwk.getAlgorithm().getName() @AT@ 3729 @LENGTH@ 14
---------------------MOV SimpleName@@MethodName:getAlgorithm:[] @TO@ MethodInvocation@@jwk.getAlgorithm().getName() @AT@ 3729 @LENGTH@ 14
---------------------INS MethodInvocation@@MethodName:getAlgorithm:[] @TO@ MethodInvocation@@jwk.getAlgorithm().getName() @AT@ 3739 @LENGTH@ 18
------DEL ExpressionStatement@@MethodInvocation:jwsAlgorithms.add((JWSAlgorithm)jwk.getAlgorithm()) @AT@ 3692 @LENGTH@ 53
---------DEL MethodInvocation@@jwsAlgorithms.add((JWSAlgorithm)jwk.getAlgorithm()) @AT@ 3692 @LENGTH@ 52
------INS ExpressionStatement@@MethodInvocation:jwsAlgorithms.add(jwsAlgorithm) @TO@ Block@@ThenBody:{  jwsAlgorithms.add((JWSAlgorithm)jwk.getAlgorithm());} @AT@ 3775 @LENGTH@ 32
---------INS MethodInvocation@@jwsAlgorithms.add(jwsAlgorithm) @TO@ ExpressionStatement@@MethodInvocation:jwsAlgorithms.add(jwsAlgorithm) @AT@ 3775 @LENGTH@ 31
------------INS SimpleName@@Name:jwsAlgorithms @TO@ MethodInvocation@@jwsAlgorithms.add(jwsAlgorithm) @AT@ 3775 @LENGTH@ 13
------------INS SimpleName@@MethodName:add:[jwsAlgorithm] @TO@ MethodInvocation@@jwsAlgorithms.add(jwsAlgorithm) @AT@ 3789 @LENGTH@ 17
---------------INS SimpleName@@jwsAlgorithm @TO@ SimpleName@@MethodName:add:[jwsAlgorithm] @AT@ 3793 @LENGTH@ 12


INS IfStatement@@if (this.cachedir != null) {  File cacheFile=new File(this.cachedir,CACHE_PROPERTIES_FILENAME);  try (OutputStream out=new FileOutputStream(cacheFile)){    Files.write(cacheFile.toPath(),cache);  } catch (  IOException e) {    getLog().warn("Cannot store file hash cache properties file",e);  }} @TO@ MethodDeclaration@@private, void, MethodName:writeCacheFile, List<String> cache,  @AT@ 15211 @LENGTH@ 380
---INS InfixExpression@@this.cachedir != null @TO@ IfStatement@@if (this.cachedir != null) {  File cacheFile=new File(this.cachedir,CACHE_PROPERTIES_FILENAME);  try (OutputStream out=new FileOutputStream(cacheFile)){    Files.write(cacheFile.toPath(),cache);  } catch (  IOException e) {    getLog().warn("Cannot store file hash cache properties file",e);  }} @AT@ 15215 @LENGTH@ 21
------INS FieldAccess@@this.cachedir @TO@ InfixExpression@@this.cachedir != null @AT@ 15215 @LENGTH@ 13
---------INS ThisExpression@@this @TO@ FieldAccess@@this.cachedir @AT@ 15215 @LENGTH@ 4
---------INS SimpleName@@cachedir @TO@ FieldAccess@@this.cachedir @AT@ 15220 @LENGTH@ 8
------INS Operator@@!= @TO@ InfixExpression@@this.cachedir != null @AT@ 15228 @LENGTH@ 2
------INS NullLiteral@@null @TO@ InfixExpression@@this.cachedir != null @AT@ 15232 @LENGTH@ 4
---INS Block@@ThenBody:{  File cacheFile=new File(this.cachedir,CACHE_PROPERTIES_FILENAME);  try (OutputStream out=new FileOutputStream(cacheFile)){    Files.write(cacheFile.toPath(),cache);  } catch (  IOException e) {    getLog().warn("Cannot store file hash cache properties file",e);  }} @TO@ IfStatement@@if (this.cachedir != null) {  File cacheFile=new File(this.cachedir,CACHE_PROPERTIES_FILENAME);  try (OutputStream out=new FileOutputStream(cacheFile)){    Files.write(cacheFile.toPath(),cache);  } catch (  IOException e) {    getLog().warn("Cannot store file hash cache properties file",e);  }} @AT@ 15238 @LENGTH@ 353
------MOV VariableDeclarationStatement@@File cacheFile=new File(this.cachedir,CACHE_PROPERTIES_FILENAME); @TO@ Block@@ThenBody:{  File cacheFile=new File(this.cachedir,CACHE_PROPERTIES_FILENAME);  try (OutputStream out=new FileOutputStream(cacheFile)){    Files.write(cacheFile.toPath(),cache);  } catch (  IOException e) {    getLog().warn("Cannot store file hash cache properties file",e);  }} @AT@ 15211 @LENGTH@ 68
------MOV TryStatement@@try (OutputStream out=new FileOutputStream(cacheFile)){  Files.write(cacheFile.toPath(),cache);} catch (IOException e) {  getLog().warn("Cannot store file hash cache properties file",e);} @TO@ Block@@ThenBody:{  File cacheFile=new File(this.cachedir,CACHE_PROPERTIES_FILENAME);  try (OutputStream out=new FileOutputStream(cacheFile)){    Files.write(cacheFile.toPath(),cache);  } catch (  IOException e) {    getLog().warn("Cannot store file hash cache properties file",e);  }} @AT@ 15288 @LENGTH@ 232


UPD IfStatement@@if (oee.isFailed() || oee.isRollbackOnly() || oee.isRollbackOnlyLast()|| (oee.isErrorHandlerHandledSet() && oee.isErrorHandlerHandled())) {  return oldExchange;} @TO@ if (oee.isFailed() || oee.isRollbackOnly() || oee.isRollbackOnlyLast()|| oee.isErrorHandlerHandledSet() && oee.isErrorHandlerHandled()) {  return oldExchange;} @AT@ 2867 @LENGTH@ 267
---UPD InfixExpression@@oee.isFailed() || oee.isRollbackOnly() || oee.isRollbackOnlyLast()|| (oee.isErrorHandlerHandledSet() && oee.isErrorHandlerHandled()) @TO@ oee.isFailed() || oee.isRollbackOnly() || oee.isRollbackOnlyLast()|| oee.isErrorHandlerHandledSet() && oee.isErrorHandlerHandled() @AT@ 2871 @LENGTH@ 149
------DEL ParenthesizedExpression@@(oee.isErrorHandlerHandledSet() && oee.isErrorHandlerHandled()) @AT@ 2957 @LENGTH@ 63
------MOV InfixExpression@@oee.isErrorHandlerHandledSet() && oee.isErrorHandlerHandled() @TO@ InfixExpression@@oee.isFailed() || oee.isRollbackOnly() || oee.isRollbackOnlyLast()|| (oee.isErrorHandlerHandledSet() && oee.isErrorHandlerHandled()) @AT@ 2958 @LENGTH@ 61


UPD FieldDeclaration@@private, static, int, [topicId=0] @TO@ private, static, int, [topicId] @AT@ 2548 @LENGTH@ 31
---UPD VariableDeclarationFragment@@topicId=0 @TO@ topicId @AT@ 2567 @LENGTH@ 11
------DEL NumberLiteral@@0 @AT@ 2577 @LENGTH@ 1


UPD VariableDeclarationStatement@@String requestedHostsDebugStr=Arrays.toString(requestedHosts); @TO@ String requestedHostsDebugStr=null; @AT@ 57428 @LENGTH@ 64
---UPD VariableDeclarationFragment@@requestedHostsDebugStr=Arrays.toString(requestedHosts) @TO@ requestedHostsDebugStr=null @AT@ 57435 @LENGTH@ 56
------INS NullLiteral@@null @TO@ VariableDeclarationFragment@@requestedHostsDebugStr=Arrays.toString(requestedHosts) @AT@ 57609 @LENGTH@ 4


UPD ReturnStatement@@ClassInstanceCreation:new Schema.Field(name,createAvroSchema(typeInfo),comment,JsonProperties.NULL_VALUE) @TO@ ClassInstanceCreation:new Schema.Field(name,createAvroSchema(typeInfo),comment,null) @AT@ 2984 @LENGTH@ 94
---UPD ClassInstanceCreation@@Schema.Field[name, createAvroSchema(typeInfo), comment, JsonProperties.NULL_VALUE] @TO@ Schema.Field[name, createAvroSchema(typeInfo), comment, null] @AT@ 2991 @LENGTH@ 86
------INS NullLiteral@@null @TO@ ClassInstanceCreation@@Schema.Field[name, createAvroSchema(typeInfo), comment, JsonProperties.NULL_VALUE] @AT@ 3012 @LENGTH@ 4
------DEL QualifiedName@@JsonProperties.NULL_VALUE @AT@ 3051 @LENGTH@ 25
---------DEL SimpleName@@JsonProperties @AT@ 3051 @LENGTH@ 14
---------DEL SimpleName@@NULL_VALUE @AT@ 3066 @LENGTH@ 10


DEL ExpressionStatement@@MethodInvocation:checkClosed() @AT@ 4515 @LENGTH@ 14
---DEL MethodInvocation@@MethodName:checkClosed:[] @AT@ 4515 @LENGTH@ 13


INS MethodDeclaration@@NodeDescription<?>, MethodName:getParentNodeDescription,  @TO@ TypeDeclaration@@[@API(status=API.Status.STABLE,since="6.0"), public]NodeDescription,  @AT@ 4070 @LENGTH@ 27
---INS ParameterizedType@@NodeDescription<?> @TO@ MethodDeclaration@@NodeDescription<?>, MethodName:getParentNodeDescription,  @AT@ 4051 @LENGTH@ 18
------INS SimpleType@@NodeDescription @TO@ ParameterizedType@@NodeDescription<?> @AT@ 4051 @LENGTH@ 15
------INS WildcardType@@? @TO@ ParameterizedType@@NodeDescription<?> @AT@ 4067 @LENGTH@ 1
---INS SimpleName@@MethodName:getParentNodeDescription @TO@ MethodDeclaration@@NodeDescription<?>, MethodName:getParentNodeDescription,  @AT@ 4070 @LENGTH@ 24


UPD ExpressionStatement@@MethodInvocation:map.put("isoDateFromParts",mapArgRef().forOperator("$dateFromParts").mappingParametersTo("isoWeekYear","isoWeek","isoDayOfWeek","hour","minute","second","milliseconds","timezone")) @TO@ MethodInvocation:map.put("isoDateFromParts",mapArgRef().forOperator("$dateFromParts").mappingParametersTo("isoWeekYear","isoWeek","isoDayOfWeek","hour","minute","second","millisecond","timezone")) @AT@ 7045 @LENGTH@ 193
---UPD MethodInvocation@@map.put("isoDateFromParts",mapArgRef().forOperator("$dateFromParts").mappingParametersTo("isoWeekYear","isoWeek","isoDayOfWeek","hour","minute","second","milliseconds","timezone")) @TO@ map.put("isoDateFromParts",mapArgRef().forOperator("$dateFromParts").mappingParametersTo("isoWeekYear","isoWeek","isoDayOfWeek","hour","minute","second","millisecond","timezone")) @AT@ 7045 @LENGTH@ 192
------UPD SimpleName@@MethodName:put:["isoDateFromParts", mapArgRef().forOperator("$dateFromParts").mappingParametersTo("isoWeekYear","isoWeek","isoDayOfWeek","hour","minute","second","milliseconds","timezone")] @TO@ MethodName:put:["isoDateFromParts", mapArgRef().forOperator("$dateFromParts").mappingParametersTo("isoWeekYear","isoWeek","isoDayOfWeek","hour","minute","second","millisecond","timezone")] @AT@ 7049 @LENGTH@ 188
---------UPD MethodInvocation@@mapArgRef().forOperator("$dateFromParts").mappingParametersTo("isoWeekYear","isoWeek","isoDayOfWeek","hour","minute","second","milliseconds","timezone") @TO@ mapArgRef().forOperator("$dateFromParts").mappingParametersTo("isoWeekYear","isoWeek","isoDayOfWeek","hour","minute","second","millisecond","timezone") @AT@ 7073 @LENGTH@ 163
------------UPD SimpleName@@MethodName:mappingParametersTo:["isoWeekYear", "isoWeek", "isoDayOfWeek", "hour", "minute", "second", "milliseconds", "timezone"] @TO@ MethodName:mappingParametersTo:["isoWeekYear", "isoWeek", "isoDayOfWeek", "hour", "minute", "second", "millisecond", "timezone"] @AT@ 7115 @LENGTH@ 121
---------------UPD StringLiteral@@"milliseconds" @TO@ "millisecond" @AT@ 7209 @LENGTH@ 14


UPD IfStatement@@if (ase.awsErrorDetails().errorCode().equalsIgnoreCase("404")) {  throw ase;} @TO@ if (!(ase.awsErrorDetails().sdkHttpResponse().statusCode() == 404)) {  throw ase;} @AT@ 4826 @LENGTH@ 105
---INS PrefixExpression@@!(ase.awsErrorDetails().sdkHttpResponse().statusCode() == 404) @TO@ IfStatement@@if (ase.awsErrorDetails().errorCode().equalsIgnoreCase("404")) {  throw ase;} @AT@ 4830 @LENGTH@ 62
------INS Operator@@! @TO@ PrefixExpression@@!(ase.awsErrorDetails().sdkHttpResponse().statusCode() == 404) @AT@ 4830 @LENGTH@ 1
------INS ParenthesizedExpression@@(ase.awsErrorDetails().sdkHttpResponse().statusCode() == 404) @TO@ PrefixExpression@@!(ase.awsErrorDetails().sdkHttpResponse().statusCode() == 404) @AT@ 4831 @LENGTH@ 61
---------INS InfixExpression@@ase.awsErrorDetails().sdkHttpResponse().statusCode() == 404 @TO@ ParenthesizedExpression@@(ase.awsErrorDetails().sdkHttpResponse().statusCode() == 404) @AT@ 4832 @LENGTH@ 59
------------INS MethodInvocation@@ase.awsErrorDetails().sdkHttpResponse().statusCode() @TO@ InfixExpression@@ase.awsErrorDetails().sdkHttpResponse().statusCode() == 404 @AT@ 4832 @LENGTH@ 52
---------------MOV MethodInvocation@@MethodName:errorCode:[] @TO@ MethodInvocation@@ase.awsErrorDetails().sdkHttpResponse().statusCode() @AT@ 4830 @LENGTH@ 33
---------------MOV MethodInvocation@@MethodName:awsErrorDetails:[] @TO@ MethodInvocation@@ase.awsErrorDetails().sdkHttpResponse().statusCode() @AT@ 4830 @LENGTH@ 21
---------------MOV SimpleName@@Name:ase @TO@ MethodInvocation@@ase.awsErrorDetails().sdkHttpResponse().statusCode() @AT@ 4830 @LENGTH@ 3
---------------MOV SimpleName@@MethodName:equalsIgnoreCase:["404"] @TO@ MethodInvocation@@ase.awsErrorDetails().sdkHttpResponse().statusCode() @AT@ 4864 @LENGTH@ 23
------------INS Operator@@== @TO@ InfixExpression@@ase.awsErrorDetails().sdkHttpResponse().statusCode() == 404 @AT@ 4884 @LENGTH@ 2
------------INS NumberLiteral@@404 @TO@ InfixExpression@@ase.awsErrorDetails().sdkHttpResponse().statusCode() == 404 @AT@ 4888 @LENGTH@ 3
---DEL MethodInvocation@@ase.awsErrorDetails().errorCode().equalsIgnoreCase("404") @AT@ 4830 @LENGTH@ 57


INS ExpressionStatement@@MethodInvocation:assertEquals(tableName,lci.getTablename()) @TO@ MethodDeclaration@@public, void, MethodName:testGetLatestCommittedCompaction, Exception,  @AT@ 12697 @LENGTH@ 44
---INS MethodInvocation@@assertEquals(tableName,lci.getTablename()) @TO@ ExpressionStatement@@MethodInvocation:assertEquals(tableName,lci.getTablename()) @AT@ 12697 @LENGTH@ 43
------INS SimpleName@@MethodName:assertEquals:[tableName, lci.getTablename()] @TO@ MethodInvocation@@assertEquals(tableName,lci.getTablename()) @AT@ 12697 @LENGTH@ 43
---------INS SimpleName@@tableName @TO@ SimpleName@@MethodName:assertEquals:[tableName, lci.getTablename()] @AT@ 12710 @LENGTH@ 9
---------INS MethodInvocation@@lci.getTablename() @TO@ SimpleName@@MethodName:assertEquals:[tableName, lci.getTablename()] @AT@ 12721 @LENGTH@ 18
------------INS SimpleName@@Name:lci @TO@ MethodInvocation@@lci.getTablename() @AT@ 12721 @LENGTH@ 3
------------INS SimpleName@@MethodName:getTablename:[] @TO@ MethodInvocation@@lci.getTablename() @AT@ 12725 @LENGTH@ 14


UPD ExpressionStatement@@MethodInvocation:props.put(param.getKey(),param.getValue().toString()) @TO@ MethodInvocation:props.put(param.getKey(),Objects.toString(param.getValue().toString(),"")) @AT@ 7705 @LENGTH@ 55
---UPD MethodInvocation@@props.put(param.getKey(),param.getValue().toString()) @TO@ props.put(param.getKey(),Objects.toString(param.getValue().toString(),"")) @AT@ 7705 @LENGTH@ 54
------UPD SimpleName@@MethodName:put:[param.getKey(), param.getValue().toString()] @TO@ MethodName:put:[param.getKey(), Objects.toString(param.getValue().toString(),"")] @AT@ 7711 @LENGTH@ 48
---------INS MethodInvocation@@Objects.toString(param.getValue().toString(),"") @TO@ SimpleName@@MethodName:put:[param.getKey(), param.getValue().toString()] @AT@ 7779 @LENGTH@ 49
------------INS SimpleName@@Name:Objects @TO@ MethodInvocation@@Objects.toString(param.getValue().toString(),"") @AT@ 7779 @LENGTH@ 7
------------INS SimpleName@@MethodName:toString:[param.getValue().toString(), ""] @TO@ MethodInvocation@@Objects.toString(param.getValue().toString(),"") @AT@ 7787 @LENGTH@ 41
---------------MOV MethodInvocation@@param.getValue().toString() @TO@ SimpleName@@MethodName:toString:[param.getValue().toString(), ""] @AT@ 7731 @LENGTH@ 27
---------------INS StringLiteral@@"" @TO@ SimpleName@@MethodName:toString:[param.getValue().toString(), ""] @AT@ 7825 @LENGTH@ 2


UPD IfStatement@@if (getApplicationContext() == event.getApplicationContext()) {  this.contextStopped=true;} @TO@ if (getApplicationContext().equals(event.getApplicationContext())) {  this.contextStopped=true;} @AT@ 7322 @LENGTH@ 98
---INS MethodInvocation@@getApplicationContext().equals(event.getApplicationContext()) @TO@ IfStatement@@if (getApplicationContext() == event.getApplicationContext()) {  this.contextStopped=true;} @AT@ 7326 @LENGTH@ 61
------INS MethodInvocation@@MethodName:getApplicationContext:[] @TO@ MethodInvocation@@getApplicationContext().equals(event.getApplicationContext()) @AT@ 7326 @LENGTH@ 23
------INS SimpleName@@MethodName:equals:[event.getApplicationContext()] @TO@ MethodInvocation@@getApplicationContext().equals(event.getApplicationContext()) @AT@ 7350 @LENGTH@ 37
---------INS MethodInvocation@@event.getApplicationContext() @TO@ SimpleName@@MethodName:equals:[event.getApplicationContext()] @AT@ 7357 @LENGTH@ 29
------------MOV SimpleName@@Name:event @TO@ MethodInvocation@@event.getApplicationContext() @AT@ 7353 @LENGTH@ 5
------------MOV SimpleName@@MethodName:getApplicationContext:[] @TO@ MethodInvocation@@event.getApplicationContext() @AT@ 7359 @LENGTH@ 23
---DEL InfixExpression@@getApplicationContext() == event.getApplicationContext() @AT@ 7326 @LENGTH@ 56
------DEL MethodInvocation@@MethodName:getApplicationContext:[] @AT@ 7326 @LENGTH@ 23
------DEL Operator@@== @AT@ 7349 @LENGTH@ 2
------DEL MethodInvocation@@event.getApplicationContext() @AT@ 7353 @LENGTH@ 29


INS IfStatement@@if (accept(file)) {  if (Files.exists(file,linkOptions)) {    if (overrideReadOnly) {      PathUtils.setReadOnly(file,false,linkOptions);    }    Files.deleteIfExists(file);  }  if (Files.isSymbolicLink(file)) {    try {      Files.delete(file);    } catch (    NoSuchFileException e) {    }  }} @TO@ MethodDeclaration@@public, FileVisitResult, MethodName:visitFile, final Path file, final BasicFileAttributes attrs, IOException,  @AT@ 5704 @LENGTH@ 705
---MOV MethodInvocation@@accept(file) @TO@ IfStatement@@if (accept(file)) {  if (Files.exists(file,linkOptions)) {    if (overrideReadOnly) {      PathUtils.setReadOnly(file,false,linkOptions);    }    Files.deleteIfExists(file);  }  if (Files.isSymbolicLink(file)) {    try {      Files.delete(file);    } catch (    NoSuchFileException e) {    }  }} @AT@ 5666 @LENGTH@ 12
---INS Block@@ThenBody:{  if (Files.exists(file,linkOptions)) {    if (overrideReadOnly) {      PathUtils.setReadOnly(file,false,linkOptions);    }    Files.deleteIfExists(file);  }  if (Files.isSymbolicLink(file)) {    try {      Files.delete(file);    } catch (    NoSuchFileException e) {    }  }} @TO@ IfStatement@@if (accept(file)) {  if (Files.exists(file,linkOptions)) {    if (overrideReadOnly) {      PathUtils.setReadOnly(file,false,linkOptions);    }    Files.deleteIfExists(file);  }  if (Files.isSymbolicLink(file)) {    try {      Files.delete(file);    } catch (    NoSuchFileException e) {    }  }} @AT@ 5722 @LENGTH@ 687
------MOV IfStatement@@if (accept(file) && Files.exists(file,linkOptions)) {  if (overrideReadOnly) {    PathUtils.setReadOnly(file,false,linkOptions);  }  Files.deleteIfExists(file);} @TO@ Block@@ThenBody:{  if (Files.exists(file,linkOptions)) {    if (overrideReadOnly) {      PathUtils.setReadOnly(file,false,linkOptions);    }    Files.deleteIfExists(file);  }  if (Files.isSymbolicLink(file)) {    try {      Files.delete(file);    } catch (    NoSuchFileException e) {    }  }} @AT@ 5662 @LENGTH@ 219
---------DEL InfixExpression@@accept(file) && Files.exists(file,linkOptions) @AT@ 5666 @LENGTH@ 47
------------DEL Operator@@&& @AT@ 5678 @LENGTH@ 2
---------MOV MethodInvocation@@Files.exists(file,linkOptions) @TO@ IfStatement@@if (accept(file) && Files.exists(file,linkOptions)) {  if (overrideReadOnly) {    PathUtils.setReadOnly(file,false,linkOptions);  }  Files.deleteIfExists(file);} @AT@ 5682 @LENGTH@ 31
------INS IfStatement@@if (Files.isSymbolicLink(file)) {  try {    Files.delete(file);  } catch (  NoSuchFileException e) {  }} @TO@ Block@@ThenBody:{  if (Files.exists(file,linkOptions)) {    if (overrideReadOnly) {      PathUtils.setReadOnly(file,false,linkOptions);    }    Files.deleteIfExists(file);  }  if (Files.isSymbolicLink(file)) {    try {      Files.delete(file);    } catch (    NoSuchFileException e) {    }  }} @AT@ 6126 @LENGTH@ 273
---------INS MethodInvocation@@Files.isSymbolicLink(file) @TO@ IfStatement@@if (Files.isSymbolicLink(file)) {  try {    Files.delete(file);  } catch (  NoSuchFileException e) {  }} @AT@ 6130 @LENGTH@ 26
------------INS SimpleName@@Name:Files @TO@ MethodInvocation@@Files.isSymbolicLink(file) @AT@ 6130 @LENGTH@ 5
------------INS SimpleName@@MethodName:isSymbolicLink:[file] @TO@ MethodInvocation@@Files.isSymbolicLink(file) @AT@ 6136 @LENGTH@ 20
---------------INS SimpleName@@file @TO@ SimpleName@@MethodName:isSymbolicLink:[file] @AT@ 6151 @LENGTH@ 4
---------INS Block@@ThenBody:{  try {    Files.delete(file);  } catch (  NoSuchFileException e) {  }} @TO@ IfStatement@@if (Files.isSymbolicLink(file)) {  try {    Files.delete(file);  } catch (  NoSuchFileException e) {  }} @AT@ 6158 @LENGTH@ 241
------------INS TryStatement@@try {  Files.delete(file);} catch (NoSuchFileException e) {} @TO@ Block@@ThenBody:{  try {    Files.delete(file);  } catch (  NoSuchFileException e) {  }} @AT@ 6176 @LENGTH@ 209
---------------INS ExpressionStatement@@MethodInvocation:Files.delete(file) @TO@ TryStatement@@try {  Files.delete(file);} catch (NoSuchFileException e) {} @AT@ 6268 @LENGTH@ 19
------------------INS MethodInvocation@@Files.delete(file) @TO@ ExpressionStatement@@MethodInvocation:Files.delete(file) @AT@ 6268 @LENGTH@ 18
---------------------INS SimpleName@@Name:Files @TO@ MethodInvocation@@Files.delete(file) @AT@ 6268 @LENGTH@ 5
---------------------INS SimpleName@@MethodName:delete:[file] @TO@ MethodInvocation@@Files.delete(file) @AT@ 6274 @LENGTH@ 12
------------------------INS SimpleName@@file @TO@ SimpleName@@MethodName:delete:[file] @AT@ 6281 @LENGTH@ 4
---------------INS CatchClause@@catch (NoSuchFileException e) {} @TO@ TryStatement@@try {  Files.delete(file);} catch (NoSuchFileException e) {} @AT@ 6306 @LENGTH@ 79
------------------INS SingleVariableDeclaration@@NoSuchFileException e @TO@ CatchClause@@catch (NoSuchFileException e) {} @AT@ 6313 @LENGTH@ 21
---------------------INS SimpleType@@NoSuchFileException @TO@ SingleVariableDeclaration@@NoSuchFileException e @AT@ 6313 @LENGTH@ 19
---------------------INS SimpleName@@e @TO@ SingleVariableDeclaration@@NoSuchFileException e @AT@ 6333 @LENGTH@ 1


UPD VariableDeclarationStatement@@JsonNode nullDefault=JsonNodeFactory.instance.nullNode(); @TO@ JsonProperties.Null nullDefault=JsonProperties.NULL_VALUE; @AT@ 8963 @LENGTH@ 59
---UPD SimpleType@@JsonNode @TO@ JsonProperties.Null @AT@ 8963 @LENGTH@ 8
---UPD VariableDeclarationFragment@@nullDefault=JsonNodeFactory.instance.nullNode() @TO@ nullDefault=JsonProperties.NULL_VALUE @AT@ 8972 @LENGTH@ 49
------DEL MethodInvocation@@JsonNodeFactory.instance.nullNode() @AT@ 8986 @LENGTH@ 35
---------DEL QualifiedName@@Name:JsonNodeFactory.instance @AT@ 8986 @LENGTH@ 24
---------DEL SimpleName@@MethodName:nullNode:[] @AT@ 9011 @LENGTH@ 10
------INS QualifiedName@@JsonProperties.NULL_VALUE @TO@ VariableDeclarationFragment@@nullDefault=JsonNodeFactory.instance.nullNode() @AT@ 9057 @LENGTH@ 25
---------INS SimpleName@@JsonProperties @TO@ QualifiedName@@JsonProperties.NULL_VALUE @AT@ 9057 @LENGTH@ 14
---------INS SimpleName@@NULL_VALUE @TO@ QualifiedName@@JsonProperties.NULL_VALUE @AT@ 9072 @LENGTH@ 10


UPD VariableDeclarationStatement@@final CommandContext ctx=new CommandContextImpl(cliOut); @TO@ final CommandContext ctx=new CommandContextImpl(cliOut,false); @AT@ 2919 @LENGTH@ 58
---UPD VariableDeclarationFragment@@ctx=new CommandContextImpl(cliOut) @TO@ ctx=new CommandContextImpl(cliOut,false) @AT@ 2940 @LENGTH@ 36
------UPD ClassInstanceCreation@@CommandContextImpl[cliOut] @TO@ CommandContextImpl[cliOut, false] @AT@ 2946 @LENGTH@ 30
---------INS BooleanLiteral@@false @TO@ ClassInstanceCreation@@CommandContextImpl[cliOut] @AT@ 2977 @LENGTH@ 5


UPD IfStatement@@if (authType == null || !authType.equals("Programatic")) throw new ServletException(String.format("getAuthType returned wrong type '%s'",authType)); @TO@ if (authType == null || !(authType.equals("Programmatic") || "Programatic".equals(authType))) throw new ServletException(String.format("getAuthType returned wrong type '%s'",authType)); @AT@ 2363 @LENGTH@ 161
---UPD InfixExpression@@authType == null || !authType.equals("Programatic") @TO@ authType == null || !(authType.equals("Programmatic") || "Programatic".equals(authType)) @AT@ 2367 @LENGTH@ 51
------UPD PrefixExpression@@!authType.equals("Programatic") @TO@ !(authType.equals("Programmatic") || "Programatic".equals(authType)) @AT@ 2387 @LENGTH@ 31
---------INS ParenthesizedExpression@@(authType.equals("Programmatic") || "Programatic".equals(authType)) @TO@ PrefixExpression@@!authType.equals("Programatic") @AT@ 2388 @LENGTH@ 67
------------INS InfixExpression@@authType.equals("Programmatic") || "Programatic".equals(authType) @TO@ ParenthesizedExpression@@(authType.equals("Programmatic") || "Programatic".equals(authType)) @AT@ 2389 @LENGTH@ 65
---------------INS MethodInvocation@@authType.equals("Programmatic") @TO@ InfixExpression@@authType.equals("Programmatic") || "Programatic".equals(authType) @AT@ 2389 @LENGTH@ 31
------------------MOV SimpleName@@Name:authType @TO@ MethodInvocation@@authType.equals("Programmatic") @AT@ 2388 @LENGTH@ 8
------------------MOV SimpleName@@MethodName:equals:["Programatic"] @TO@ MethodInvocation@@authType.equals("Programmatic") @AT@ 2397 @LENGTH@ 21
---------------INS Operator@@|| @TO@ InfixExpression@@authType.equals("Programmatic") || "Programatic".equals(authType) @AT@ 2420 @LENGTH@ 2
---------------INS MethodInvocation@@"Programatic".equals(authType) @TO@ InfixExpression@@authType.equals("Programmatic") || "Programatic".equals(authType) @AT@ 2424 @LENGTH@ 30
------------------INS StringLiteral@@"Programatic" @TO@ MethodInvocation@@"Programatic".equals(authType) @AT@ 2424 @LENGTH@ 13
------------------INS SimpleName@@MethodName:equals:[authType] @TO@ MethodInvocation@@"Programatic".equals(authType) @AT@ 2438 @LENGTH@ 16
---------------------INS SimpleName@@authType @TO@ SimpleName@@MethodName:equals:[authType] @AT@ 2445 @LENGTH@ 8
---------DEL MethodInvocation@@authType.equals("Programatic") @AT@ 2388 @LENGTH@ 30


UPD Block@@ThenBody:{  Expression newExpression=getExpressionValue();  if (newExpression == null) {    pred=delegate.getPredicateType().createPredicate(context);  } else {    pred=ExpressionToPredicateAdapter.toPredicate(newExpression);  }  pred.initPredicate(context);} @TO@ ThenBody:{  Expression newExpression=getExpressionValue();  Predicate newPredicate;  if (newExpression == null) {    newPredicate=delegate.getPredicateType().createPredicate(context);  } else {    newPredicate=ExpressionToPredicateAdapter.toPredicate(newExpression);  }  newPredicate.initPredicate(context);  pred=newPredicate;} @AT@ 37581 @LENGTH@ 410
---UPD IfStatement@@if (newExpression == null) {  pred=delegate.getPredicateType().createPredicate(context);} else {  pred=ExpressionToPredicateAdapter.toPredicate(newExpression);} @TO@ if (newExpression == null) {  newPredicate=delegate.getPredicateType().createPredicate(context);} else {  newPredicate=ExpressionToPredicateAdapter.toPredicate(newExpression);} @AT@ 37672 @LENGTH@ 252
------UPD Block@@ThenBody:{  pred=delegate.getPredicateType().createPredicate(context);} @TO@ ThenBody:{  newPredicate=delegate.getPredicateType().createPredicate(context);} @AT@ 37699 @LENGTH@ 108
---------UPD ExpressionStatement@@Assignment:pred=delegate.getPredicateType().createPredicate(context) @TO@ Assignment:newPredicate=delegate.getPredicateType().createPredicate(context) @AT@ 37725 @LENGTH@ 60
------------UPD Assignment@@pred=delegate.getPredicateType().createPredicate(context) @TO@ newPredicate=delegate.getPredicateType().createPredicate(context) @AT@ 37725 @LENGTH@ 59
---------------UPD SimpleName@@pred @TO@ newPredicate @AT@ 37725 @LENGTH@ 4
------UPD Block@@ElseBody:{  pred=ExpressionToPredicateAdapter.toPredicate(newExpression);} @TO@ ElseBody:{  newPredicate=ExpressionToPredicateAdapter.toPredicate(newExpression);} @AT@ 37813 @LENGTH@ 111
---------UPD ExpressionStatement@@Assignment:pred=ExpressionToPredicateAdapter.toPredicate(newExpression) @TO@ Assignment:newPredicate=ExpressionToPredicateAdapter.toPredicate(newExpression) @AT@ 37839 @LENGTH@ 63
------------UPD Assignment@@pred=ExpressionToPredicateAdapter.toPredicate(newExpression) @TO@ newPredicate=ExpressionToPredicateAdapter.toPredicate(newExpression) @AT@ 37839 @LENGTH@ 62
---------------UPD SimpleName@@pred @TO@ newPredicate @AT@ 37839 @LENGTH@ 4
---INS VariableDeclarationStatement@@Predicate newPredicate; @TO@ Block@@ThenBody:{  Expression newExpression=getExpressionValue();  if (newExpression == null) {    pred=delegate.getPredicateType().createPredicate(context);  } else {    pred=ExpressionToPredicateAdapter.toPredicate(newExpression);  }  pred.initPredicate(context);} @AT@ 37672 @LENGTH@ 23
------INS SimpleType@@Predicate @TO@ VariableDeclarationStatement@@Predicate newPredicate; @AT@ 37672 @LENGTH@ 9
------INS VariableDeclarationFragment@@newPredicate @TO@ VariableDeclarationStatement@@Predicate newPredicate; @AT@ 37682 @LENGTH@ 12
---------INS SimpleName@@newPredicate @TO@ VariableDeclarationFragment@@newPredicate @AT@ 37682 @LENGTH@ 12
---UPD ExpressionStatement@@MethodInvocation:pred.initPredicate(context) @TO@ MethodInvocation:newPredicate.initPredicate(context) @AT@ 37945 @LENGTH@ 28
------UPD MethodInvocation@@pred.initPredicate(context) @TO@ newPredicate.initPredicate(context) @AT@ 37945 @LENGTH@ 27
---------UPD SimpleName@@Name:pred @TO@ Name:newPredicate @AT@ 37945 @LENGTH@ 4
---INS ExpressionStatement@@Assignment:pred=newPredicate @TO@ Block@@ThenBody:{  Expression newExpression=getExpressionValue();  if (newExpression == null) {    pred=delegate.getPredicateType().createPredicate(context);  } else {    pred=ExpressionToPredicateAdapter.toPredicate(newExpression);  }  pred.initPredicate(context);} @AT@ 38062 @LENGTH@ 20
------INS Assignment@@pred=newPredicate @TO@ ExpressionStatement@@Assignment:pred=newPredicate @AT@ 38062 @LENGTH@ 19
---------INS SimpleName@@pred @TO@ Assignment@@pred=newPredicate @AT@ 38062 @LENGTH@ 4
---------INS Operator@@= @TO@ Assignment@@pred=newPredicate @AT@ 38066 @LENGTH@ 1
---------INS SimpleName@@newPredicate @TO@ Assignment@@pred=newPredicate @AT@ 38069 @LENGTH@ 12


UPD FieldDeclaration@@private, BitSet, [orderingBits=null] @TO@ private, final, BitSet, [orderingBits] @AT@ 2639 @LENGTH@ 35
---INS Modifier@@final @TO@ FieldDeclaration@@private, BitSet, [orderingBits=null] @AT@ 2647 @LENGTH@ 5
---UPD VariableDeclarationFragment@@orderingBits=null @TO@ orderingBits @AT@ 2654 @LENGTH@ 19
------DEL NullLiteral@@null @AT@ 2669 @LENGTH@ 4


UPD FieldDeclaration@@private, boolean, [hasNext=false] @TO@ private, boolean, [hasNext] @AT@ 3393 @LENGTH@ 32
---UPD VariableDeclarationFragment@@hasNext=false @TO@ hasNext @AT@ 3409 @LENGTH@ 15
------DEL BooleanLiteral@@false @AT@ 3419 @LENGTH@ 5


UPD IfStatement@@if (foundNextDelim && (matcher.end() == position)) {  foundNextDelim=matcher.find();} @TO@ if (foundNextDelim && matcher.end() == position) {  foundNextDelim=matcher.find();} @AT@ 8135 @LENGTH@ 107
---UPD InfixExpression@@foundNextDelim && (matcher.end() == position) @TO@ foundNextDelim && matcher.end() == position @AT@ 8139 @LENGTH@ 45
------DEL ParenthesizedExpression@@(matcher.end() == position) @AT@ 8157 @LENGTH@ 27
------MOV InfixExpression@@matcher.end() == position @TO@ InfixExpression@@foundNextDelim && (matcher.end() == position) @AT@ 8158 @LENGTH@ 25


INS FieldDeclaration@@private, static, final, TimeZone, [UTC=TimeZone.getTimeZone("UTC")] @TO@ TypeDeclaration@@[public]SyslogParser, [Closeable] @AT@ 5108 @LENGTH@ 64
---INS Modifier@@private @TO@ FieldDeclaration@@private, static, final, TimeZone, [UTC=TimeZone.getTimeZone("UTC")] @AT@ 5108 @LENGTH@ 7
---INS Modifier@@static @TO@ FieldDeclaration@@private, static, final, TimeZone, [UTC=TimeZone.getTimeZone("UTC")] @AT@ 5116 @LENGTH@ 6
---INS Modifier@@final @TO@ FieldDeclaration@@private, static, final, TimeZone, [UTC=TimeZone.getTimeZone("UTC")] @AT@ 5123 @LENGTH@ 5
---INS SimpleType@@TimeZone @TO@ FieldDeclaration@@private, static, final, TimeZone, [UTC=TimeZone.getTimeZone("UTC")] @AT@ 5129 @LENGTH@ 8
---INS VariableDeclarationFragment@@UTC=TimeZone.getTimeZone("UTC") @TO@ FieldDeclaration@@private, static, final, TimeZone, [UTC=TimeZone.getTimeZone("UTC")] @AT@ 5138 @LENGTH@ 33
------INS SimpleName@@UTC @TO@ VariableDeclarationFragment@@UTC=TimeZone.getTimeZone("UTC") @AT@ 5138 @LENGTH@ 3
------MOV MethodInvocation@@TimeZone.getTimeZone("UTC") @TO@ VariableDeclarationFragment@@UTC=TimeZone.getTimeZone("UTC") @AT@ 8503 @LENGTH@ 27


UPD ReturnStatement@@MethodInvocation:connection.invoke().fromMany(RedisSortedSetAsyncCommands::zrevrange,key,start,end).toSet(LettuceInvoker.identityConverter()) @TO@ MethodInvocation:connection.invoke().fromMany(RedisSortedSetAsyncCommands::zrevrange,key,start,end).toSet(Converters.identityConverter()) @AT@ 6089 @LENGTH@ 140
---UPD MethodInvocation@@connection.invoke().fromMany(RedisSortedSetAsyncCommands::zrevrange,key,start,end).toSet(LettuceInvoker.identityConverter()) @TO@ connection.invoke().fromMany(RedisSortedSetAsyncCommands::zrevrange,key,start,end).toSet(Converters.identityConverter()) @AT@ 6096 @LENGTH@ 132
------UPD SimpleName@@MethodName:toSet:[LettuceInvoker.identityConverter()] @TO@ MethodName:toSet:[Converters.identityConverter()] @AT@ 6187 @LENGTH@ 41
---------UPD MethodInvocation@@LettuceInvoker.identityConverter() @TO@ Converters.identityConverter() @AT@ 6193 @LENGTH@ 34
------------UPD SimpleName@@Name:LettuceInvoker @TO@ Name:Converters @AT@ 6193 @LENGTH@ 14


UPD ExpressionStatement@@Assignment:this.subscriptionListener=listener instanceof SubscriptionListener ? (SubscriptionListener)listener : SubscriptionListener.EMPTY @TO@ Assignment:this.subscriptionListener=listener instanceof SubscriptionListener ? (SubscriptionListener)listener : SubscriptionListener.NO_OP_SUBSCRIPTION_LISTENER @AT@ 1366 @LENGTH@ 136
---UPD Assignment@@this.subscriptionListener=listener instanceof SubscriptionListener ? (SubscriptionListener)listener : SubscriptionListener.EMPTY @TO@ this.subscriptionListener=listener instanceof SubscriptionListener ? (SubscriptionListener)listener : SubscriptionListener.NO_OP_SUBSCRIPTION_LISTENER @AT@ 1366 @LENGTH@ 135
------UPD ConditionalExpression@@listener instanceof SubscriptionListener ? (SubscriptionListener)listener : SubscriptionListener.EMPTY @TO@ listener instanceof SubscriptionListener ? (SubscriptionListener)listener : SubscriptionListener.NO_OP_SUBSCRIPTION_LISTENER @AT@ 1394 @LENGTH@ 107
---------UPD QualifiedName@@SubscriptionListener.EMPTY @TO@ SubscriptionListener.NO_OP_SUBSCRIPTION_LISTENER @AT@ 1475 @LENGTH@ 26
------------UPD SimpleName@@EMPTY @TO@ NO_OP_SUBSCRIPTION_LISTENER @AT@ 1496 @LENGTH@ 5


INS MethodDeclaration@@public, static, Converter<T,T>, T, MethodName:identityConverter,  @TO@ TypeDeclaration@@[abstract, public]Converters,  @AT@ 3429 @LENGTH@ 75
---INS Modifier@@public @TO@ MethodDeclaration@@public, static, Converter<T,T>, T, MethodName:identityConverter,  @AT@ 3429 @LENGTH@ 6
---INS Modifier@@static @TO@ MethodDeclaration@@public, static, Converter<T,T>, T, MethodName:identityConverter,  @AT@ 3436 @LENGTH@ 6
---INS ParameterizedType@@Converter<T,T> @TO@ MethodDeclaration@@public, static, Converter<T,T>, T, MethodName:identityConverter,  @AT@ 3447 @LENGTH@ 15
------INS SimpleType@@Converter @TO@ ParameterizedType@@Converter<T,T> @AT@ 3447 @LENGTH@ 9
------INS SimpleType@@T @TO@ ParameterizedType@@Converter<T,T> @AT@ 3457 @LENGTH@ 1
------INS SimpleType@@T @TO@ ParameterizedType@@Converter<T,T> @AT@ 3460 @LENGTH@ 1
---INS SimpleName@@MethodName:identityConverter @TO@ MethodDeclaration@@public, static, Converter<T,T>, T, MethodName:identityConverter,  @AT@ 3463 @LENGTH@ 17
---INS ReturnStatement@@LambdaExpression:t -> t @TO@ MethodDeclaration@@public, static, Converter<T,T>, T, MethodName:identityConverter,  @AT@ 3487 @LENGTH@ 14
------INS LambdaExpression@@t -> t @TO@ ReturnStatement@@LambdaExpression:t -> t @AT@ 3494 @LENGTH@ 6
---------INS VariableDeclarationFragment@@t @TO@ LambdaExpression@@t -> t @AT@ 3494 @LENGTH@ 1
------------INS SimpleName@@t @TO@ VariableDeclarationFragment@@t @AT@ 3494 @LENGTH@ 1
---------INS SimpleName@@t @TO@ LambdaExpression@@t -> t @AT@ 3499 @LENGTH@ 1


UPD ReturnStatement@@MethodInvocation:Arrays.asList(Node.class,RelationshipProperties.class,Persistent.class) @TO@ MethodInvocation:Arrays.asList(Node.class,RelationshipProperties.class) @AT@ 3659 @LENGTH@ 81
---UPD MethodInvocation@@Arrays.asList(Node.class,RelationshipProperties.class,Persistent.class) @TO@ Arrays.asList(Node.class,RelationshipProperties.class) @AT@ 3666 @LENGTH@ 73
------UPD SimpleName@@MethodName:asList:[Node.class, RelationshipProperties.class, Persistent.class] @TO@ MethodName:asList:[Node.class, RelationshipProperties.class] @AT@ 3673 @LENGTH@ 66
---------DEL TypeLiteral@@Persistent.class @AT@ 3722 @LENGTH@ 16


UPD ExpressionStatement@@MethodInvocation:log.info("#{} size {}",total,size) @TO@ MethodInvocation:log.debug("#{} size {}",total,size) @AT@ 2220 @LENGTH@ 37
---UPD MethodInvocation@@log.info("#{} size {}",total,size) @TO@ log.debug("#{} size {}",total,size) @AT@ 2220 @LENGTH@ 36
------UPD SimpleName@@MethodName:info:["#{} size {}", total, size] @TO@ MethodName:debug:["#{} size {}", total, size] @AT@ 2224 @LENGTH@ 32


UPD ExpressionStatement@@MethodInvocation:log.info("#{} size {}",i,size) @TO@ MethodInvocation:log.debug("#{} size {}",i,size) @AT@ 2011 @LENGTH@ 33
---UPD MethodInvocation@@log.info("#{} size {}",i,size) @TO@ log.debug("#{} size {}",i,size) @AT@ 2011 @LENGTH@ 32
------UPD SimpleName@@MethodName:info:["#{} size {}", i, size] @TO@ MethodName:debug:["#{} size {}", i, size] @AT@ 2015 @LENGTH@ 28


UPD VariableDeclarationStatement@@Sns2Endpoint endpoint=(Sns2Endpoint)component.createEndpoint("aws2-sns://MyTopic?amazonSNSClient=#amazonSNSClient&accessKey=xxx&secretKey=yyy" + "&policy=file:src/test/resources/org/apache/camel/component/aws2/sns/policy.txt&subject=The+subject+message"); @TO@ Sns2Endpoint endpoint=(Sns2Endpoint)component.createEndpoint("aws2-sns://MyTopic?amazonSNSClient=#amazonSNSClient&accessKey=xxx&secretKey=yyy" + "&policy=file:src/test/resources/org/apache/camel/component/aws2/sns/policy.txt&subject=The%20subject%20message"); @AT@ 5243 @LENGTH@ 307
---UPD VariableDeclarationFragment@@endpoint=(Sns2Endpoint)component.createEndpoint("aws2-sns://MyTopic?amazonSNSClient=#amazonSNSClient&accessKey=xxx&secretKey=yyy" + "&policy=file:src/test/resources/org/apache/camel/component/aws2/sns/policy.txt&subject=The+subject+message") @TO@ endpoint=(Sns2Endpoint)component.createEndpoint("aws2-sns://MyTopic?amazonSNSClient=#amazonSNSClient&accessKey=xxx&secretKey=yyy" + "&policy=file:src/test/resources/org/apache/camel/component/aws2/sns/policy.txt&subject=The%20subject%20message") @AT@ 5256 @LENGTH@ 293
------UPD CastExpression@@(Sns2Endpoint)component.createEndpoint("aws2-sns://MyTopic?amazonSNSClient=#amazonSNSClient&accessKey=xxx&secretKey=yyy" + "&policy=file:src/test/resources/org/apache/camel/component/aws2/sns/policy.txt&subject=The+subject+message") @TO@ (Sns2Endpoint)component.createEndpoint("aws2-sns://MyTopic?amazonSNSClient=#amazonSNSClient&accessKey=xxx&secretKey=yyy" + "&policy=file:src/test/resources/org/apache/camel/component/aws2/sns/policy.txt&subject=The%20subject%20message") @AT@ 5267 @LENGTH@ 282
---------UPD MethodInvocation@@component.createEndpoint("aws2-sns://MyTopic?amazonSNSClient=#amazonSNSClient&accessKey=xxx&secretKey=yyy" + "&policy=file:src/test/resources/org/apache/camel/component/aws2/sns/policy.txt&subject=The+subject+message") @TO@ component.createEndpoint("aws2-sns://MyTopic?amazonSNSClient=#amazonSNSClient&accessKey=xxx&secretKey=yyy" + "&policy=file:src/test/resources/org/apache/camel/component/aws2/sns/policy.txt&subject=The%20subject%20message") @AT@ 5282 @LENGTH@ 267
------------UPD SimpleName@@MethodName:createEndpoint:["aws2-sns://MyTopic?amazonSNSClient=#amazonSNSClient&accessKey=xxx&secretKey=yyy" + "&policy=file:src/test/resources/org/apache/camel/component/aws2/sns/policy.txt&subject=The+subject+message"] @TO@ MethodName:createEndpoint:["aws2-sns://MyTopic?amazonSNSClient=#amazonSNSClient&accessKey=xxx&secretKey=yyy" + "&policy=file:src/test/resources/org/apache/camel/component/aws2/sns/policy.txt&subject=The%20subject%20message"] @AT@ 5309 @LENGTH@ 240
---------------UPD InfixExpression@@"aws2-sns://MyTopic?amazonSNSClient=#amazonSNSClient&accessKey=xxx&secretKey=yyy" + "&policy=file:src/test/resources/org/apache/camel/component/aws2/sns/policy.txt&subject=The+subject+message" @TO@ "aws2-sns://MyTopic?amazonSNSClient=#amazonSNSClient&accessKey=xxx&secretKey=yyy" + "&policy=file:src/test/resources/org/apache/camel/component/aws2/sns/policy.txt&subject=The%20subject%20message" @AT@ 5324 @LENGTH@ 224
------------------UPD StringLiteral@@"&policy=file:src/test/resources/org/apache/camel/component/aws2/sns/policy.txt&subject=The+subject+message" @TO@ "&policy=file:src/test/resources/org/apache/camel/component/aws2/sns/policy.txt&subject=The%20subject%20message" @AT@ 5440 @LENGTH@ 108


UPD Block@@ThenBody:{  if (len == 2 || isSeparator(fileName.charAt(2)) == false) {    return 2;  }  return 3;} @TO@ ThenBody:{  if (len == 2 && !FileSystem.getCurrent().supportsDriveLetter()) {    return 0;  }  if (len == 2 || !isSeparator(fileName.charAt(2))) {    return 2;  }  return 3;} @AT@ 26373 @LENGTH@ 165
---UPD IfStatement@@if (len == 2 || isSeparator(fileName.charAt(2)) == false) {  return 2;} @TO@ if (len == 2 || !isSeparator(fileName.charAt(2))) {  return 2;} @AT@ 26391 @LENGTH@ 107
------DEL InfixExpression@@len == 2 || isSeparator(fileName.charAt(2)) == false @AT@ 26395 @LENGTH@ 52
---------DEL InfixExpression@@len == 2 @AT@ 26395 @LENGTH@ 8
------------DEL SimpleName@@len @AT@ 26395 @LENGTH@ 3
------------DEL Operator@@== @AT@ 26398 @LENGTH@ 2
------------DEL NumberLiteral@@2 @AT@ 26402 @LENGTH@ 1
---------DEL Operator@@|| @AT@ 26403 @LENGTH@ 2
------MOV InfixExpression@@isSeparator(fileName.charAt(2)) == false @TO@ IfStatement@@if (len == 2 || isSeparator(fileName.charAt(2)) == false) {  return 2;} @AT@ 26407 @LENGTH@ 40
---------DEL BooleanLiteral@@false @AT@ 26442 @LENGTH@ 5
---------INS InfixExpression@@len == 2 @TO@ InfixExpression@@isSeparator(fileName.charAt(2)) == false @AT@ 26642 @LENGTH@ 8
------------MOV Operator@@== @TO@ InfixExpression@@len == 2 @AT@ 26438 @LENGTH@ 2
------------INS SimpleName@@len @TO@ InfixExpression@@len == 2 @AT@ 26642 @LENGTH@ 3
------------INS NumberLiteral@@2 @TO@ InfixExpression@@len == 2 @AT@ 26649 @LENGTH@ 1
---------INS Operator@@|| @TO@ InfixExpression@@isSeparator(fileName.charAt(2)) == false @AT@ 26650 @LENGTH@ 2
---------INS PrefixExpression@@!isSeparator(fileName.charAt(2)) @TO@ InfixExpression@@isSeparator(fileName.charAt(2)) == false @AT@ 26654 @LENGTH@ 32
------------MOV MethodInvocation@@isSeparator(fileName.charAt(2)) @TO@ PrefixExpression@@!isSeparator(fileName.charAt(2)) @AT@ 26407 @LENGTH@ 31
------------INS Operator@@! @TO@ PrefixExpression@@!isSeparator(fileName.charAt(2)) @AT@ 26654 @LENGTH@ 1
---INS IfStatement@@if (len == 2 && !FileSystem.getCurrent().supportsDriveLetter()) {  return 0;} @TO@ Block@@ThenBody:{  if (len == 2 || isSeparator(fileName.charAt(2)) == false) {    return 2;  }  return 3;} @AT@ 26508 @LENGTH@ 113
------INS InfixExpression@@len == 2 && !FileSystem.getCurrent().supportsDriveLetter() @TO@ IfStatement@@if (len == 2 && !FileSystem.getCurrent().supportsDriveLetter()) {  return 0;} @AT@ 26512 @LENGTH@ 58
---------INS InfixExpression@@len == 2 @TO@ InfixExpression@@len == 2 && !FileSystem.getCurrent().supportsDriveLetter() @AT@ 26512 @LENGTH@ 8
------------INS SimpleName@@len @TO@ InfixExpression@@len == 2 @AT@ 26512 @LENGTH@ 3
------------INS Operator@@== @TO@ InfixExpression@@len == 2 @AT@ 26515 @LENGTH@ 2
------------INS NumberLiteral@@2 @TO@ InfixExpression@@len == 2 @AT@ 26519 @LENGTH@ 1
---------INS Operator@@&& @TO@ InfixExpression@@len == 2 && !FileSystem.getCurrent().supportsDriveLetter() @AT@ 26520 @LENGTH@ 2
---------INS PrefixExpression@@!FileSystem.getCurrent().supportsDriveLetter() @TO@ InfixExpression@@len == 2 && !FileSystem.getCurrent().supportsDriveLetter() @AT@ 26524 @LENGTH@ 46
------------INS Operator@@! @TO@ PrefixExpression@@!FileSystem.getCurrent().supportsDriveLetter() @AT@ 26524 @LENGTH@ 1
------------INS MethodInvocation@@FileSystem.getCurrent().supportsDriveLetter() @TO@ PrefixExpression@@!FileSystem.getCurrent().supportsDriveLetter() @AT@ 26525 @LENGTH@ 45
---------------INS MethodInvocation@@MethodName:getCurrent:[] @TO@ MethodInvocation@@FileSystem.getCurrent().supportsDriveLetter() @AT@ 26525 @LENGTH@ 23
---------------INS SimpleName@@Name:FileSystem @TO@ MethodInvocation@@FileSystem.getCurrent().supportsDriveLetter() @AT@ 26525 @LENGTH@ 10
---------------INS SimpleName@@MethodName:supportsDriveLetter:[] @TO@ MethodInvocation@@FileSystem.getCurrent().supportsDriveLetter() @AT@ 26549 @LENGTH@ 21
------INS Block@@ThenBody:{  return 0;} @TO@ IfStatement@@if (len == 2 && !FileSystem.getCurrent().supportsDriveLetter()) {  return 0;} @AT@ 26572 @LENGTH@ 49
---------INS ReturnStatement@@NumberLiteral:0 @TO@ Block@@ThenBody:{  return 0;} @AT@ 26594 @LENGTH@ 9
------------INS NumberLiteral@@0 @TO@ ReturnStatement@@NumberLiteral:0 @AT@ 26601 @LENGTH@ 1


UPD MethodDeclaration@@private, RoutesBuilderLoader, MethodName:getLoader, String extension,  @TO@ private, RoutesBuilderLoader, MethodName:getRoutesLoader, String extension,  @AT@ 2683 @LENGTH@ 996
---UPD SimpleName@@MethodName:getLoader @TO@ MethodName:getRoutesLoader @AT@ 2711 @LENGTH@ 9
---UPD IfStatement@@if (answer == null) {  final ExtendedCamelContext ecc=getCamelContext(ExtendedCamelContext.class);  final FactoryFinder finder=ecc.getFactoryFinder(RoutesBuilderLoader.FACTORY_PATH);  final BaseServiceResolver<RoutesBuilderLoader> resolver=new BaseServiceResolver<>(extension,RoutesBuilderLoader.class,finder);  final Optional<RoutesBuilderLoader> loader=resolver.resolve(ecc);  if (loader.isPresent()) {    return CamelContextAware.trySetCamelContext(loader.get(),ecc);  }} @TO@ if (answer == null) {  final ExtendedCamelContext ecc=getCamelContext().adapt(ExtendedCamelContext.class);  final FactoryFinder finder=ecc.getBootstrapFactoryFinder(RoutesBuilderLoader.FACTORY_PATH);  final BaseServiceResolver<RoutesBuilderLoader> resolver=new BaseServiceResolver<>(extension,RoutesBuilderLoader.class,finder);  final Optional<RoutesBuilderLoader> loader=resolver.resolve(ecc);  if (loader.isPresent()) {    return CamelContextAware.trySetCamelContext(loader.get(),ecc);  }} @AT@ 2878 @LENGTH@ 615
------UPD Block@@ThenBody:{  final ExtendedCamelContext ecc=getCamelContext(ExtendedCamelContext.class);  final FactoryFinder finder=ecc.getFactoryFinder(RoutesBuilderLoader.FACTORY_PATH);  final BaseServiceResolver<RoutesBuilderLoader> resolver=new BaseServiceResolver<>(extension,RoutesBuilderLoader.class,finder);  final Optional<RoutesBuilderLoader> loader=resolver.resolve(ecc);  if (loader.isPresent()) {    return CamelContextAware.trySetCamelContext(loader.get(),ecc);  }} @TO@ ThenBody:{  final ExtendedCamelContext ecc=getCamelContext().adapt(ExtendedCamelContext.class);  final FactoryFinder finder=ecc.getBootstrapFactoryFinder(RoutesBuilderLoader.FACTORY_PATH);  final BaseServiceResolver<RoutesBuilderLoader> resolver=new BaseServiceResolver<>(extension,RoutesBuilderLoader.class,finder);  final Optional<RoutesBuilderLoader> loader=resolver.resolve(ecc);  if (loader.isPresent()) {    return CamelContextAware.trySetCamelContext(loader.get(),ecc);  }} @AT@ 2898 @LENGTH@ 595
---------UPD VariableDeclarationStatement@@final ExtendedCamelContext ecc=getCamelContext(ExtendedCamelContext.class); @TO@ final ExtendedCamelContext ecc=getCamelContext().adapt(ExtendedCamelContext.class); @AT@ 2912 @LENGTH@ 77
------------UPD VariableDeclarationFragment@@ecc=getCamelContext(ExtendedCamelContext.class) @TO@ ecc=getCamelContext().adapt(ExtendedCamelContext.class) @AT@ 2939 @LENGTH@ 49
---------------UPD MethodInvocation@@getCamelContext(ExtendedCamelContext.class) @TO@ getCamelContext().adapt(ExtendedCamelContext.class) @AT@ 2945 @LENGTH@ 43
------------------UPD SimpleName@@MethodName:getCamelContext:[ExtendedCamelContext.class] @TO@ MethodName:adapt:[ExtendedCamelContext.class] @AT@ 2945 @LENGTH@ 43
------------------INS MethodInvocation@@MethodName:getCamelContext:[] @TO@ MethodInvocation@@getCamelContext(ExtendedCamelContext.class) @AT@ 3355 @LENGTH@ 17
---------UPD VariableDeclarationStatement@@final FactoryFinder finder=ecc.getFactoryFinder(RoutesBuilderLoader.FACTORY_PATH); @TO@ final FactoryFinder finder=ecc.getBootstrapFactoryFinder(RoutesBuilderLoader.FACTORY_PATH); @AT@ 3002 @LENGTH@ 84
------------UPD VariableDeclarationFragment@@finder=ecc.getFactoryFinder(RoutesBuilderLoader.FACTORY_PATH) @TO@ finder=ecc.getBootstrapFactoryFinder(RoutesBuilderLoader.FACTORY_PATH) @AT@ 3022 @LENGTH@ 63
---------------UPD MethodInvocation@@ecc.getFactoryFinder(RoutesBuilderLoader.FACTORY_PATH) @TO@ ecc.getBootstrapFactoryFinder(RoutesBuilderLoader.FACTORY_PATH) @AT@ 3031 @LENGTH@ 54
------------------UPD SimpleName@@MethodName:getFactoryFinder:[RoutesBuilderLoader.FACTORY_PATH] @TO@ MethodName:getBootstrapFactoryFinder:[RoutesBuilderLoader.FACTORY_PATH] @AT@ 3035 @LENGTH@ 50
---UPD IfStatement@@if (answer == null) {  throw new IllegalArgumentException("Unable to fina a RoutesBuilderLoader for extension " + extension);} @TO@ if (answer == null) {  throw new IllegalArgumentException("Unable to fina a RoutesBuilderLoader for resource with file extension: " + extension);} @AT@ 3503 @LENGTH@ 146
------UPD Block@@ThenBody:{  throw new IllegalArgumentException("Unable to fina a RoutesBuilderLoader for extension " + extension);} @TO@ ThenBody:{  throw new IllegalArgumentException("Unable to fina a RoutesBuilderLoader for resource with file extension: " + extension);} @AT@ 3523 @LENGTH@ 126
---------UPD ThrowStatement@@ClassInstanceCreation:new IllegalArgumentException("Unable to fina a RoutesBuilderLoader for extension " + extension) @TO@ ClassInstanceCreation:new IllegalArgumentException("Unable to fina a RoutesBuilderLoader for resource with file extension: " + extension) @AT@ 3537 @LENGTH@ 102
------------UPD ClassInstanceCreation@@IllegalArgumentException["Unable to fina a RoutesBuilderLoader for extension " + extension] @TO@ IllegalArgumentException["Unable to fina a RoutesBuilderLoader for resource with file extension: " + extension] @AT@ 3543 @LENGTH@ 95
---------------UPD InfixExpression@@"Unable to fina a RoutesBuilderLoader for extension " + extension @TO@ "Unable to fina a RoutesBuilderLoader for resource with file extension: " + extension @AT@ 3572 @LENGTH@ 65
------------------UPD StringLiteral@@"Unable to fina a RoutesBuilderLoader for extension " @TO@ "Unable to fina a RoutesBuilderLoader for resource with file extension: " @AT@ 3572 @LENGTH@ 53


DEL MethodDeclaration@@public, void, MethodName:testRemoveFile, Exception,  @AT@ 3108 @LENGTH@ 310
---DEL Modifier@@public @AT@ 3108 @LENGTH@ 6
---DEL PrimitiveType@@void @AT@ 3115 @LENGTH@ 4
---DEL SimpleName@@MethodName:testRemoveFile @AT@ 3120 @LENGTH@ 14
---DEL SimpleType@@Exception @AT@ 3144 @LENGTH@ 9
---DEL VariableDeclarationStatement@@MockEndpoint mock=getMockEndpoint("mock:watchDelete"); @AT@ 3164 @LENGTH@ 56
------DEL SimpleType@@MockEndpoint @AT@ 3164 @LENGTH@ 12
------DEL VariableDeclarationFragment@@mock=getMockEndpoint("mock:watchDelete") @AT@ 3177 @LENGTH@ 42
---------DEL SimpleName@@mock @AT@ 3177 @LENGTH@ 4
---------DEL MethodInvocation@@getMockEndpoint("mock:watchDelete") @AT@ 3184 @LENGTH@ 35
------------DEL SimpleName@@MethodName:getMockEndpoint:["mock:watchDelete"] @AT@ 3184 @LENGTH@ 35
---------------DEL StringLiteral@@"mock:watchDelete" @AT@ 3200 @LENGTH@ 18
---DEL ExpressionStatement@@MethodInvocation:mock.expectedMessageCount(2) @AT@ 3229 @LENGTH@ 29
------DEL MethodInvocation@@mock.expectedMessageCount(2) @AT@ 3229 @LENGTH@ 28
---------DEL SimpleName@@Name:mock @AT@ 3229 @LENGTH@ 4
---------DEL SimpleName@@MethodName:expectedMessageCount:[2] @AT@ 3234 @LENGTH@ 23
------------DEL NumberLiteral@@2 @AT@ 3255 @LENGTH@ 1
---DEL ExpressionStatement@@MethodInvocation:mock.setResultWaitTime(1000) @AT@ 3267 @LENGTH@ 29
------DEL MethodInvocation@@mock.setResultWaitTime(1000) @AT@ 3267 @LENGTH@ 28
---------DEL SimpleName@@Name:mock @AT@ 3267 @LENGTH@ 4
---------DEL SimpleName@@MethodName:setResultWaitTime:[1000] @AT@ 3272 @LENGTH@ 23
------------DEL NumberLiteral@@1000 @AT@ 3290 @LENGTH@ 4
---DEL ExpressionStatement@@MethodInvocation:Files.delete(testFiles.get(0)) @AT@ 3306 @LENGTH@ 31
------DEL MethodInvocation@@Files.delete(testFiles.get(0)) @AT@ 3306 @LENGTH@ 30
---------DEL SimpleName@@Name:Files @AT@ 3306 @LENGTH@ 5
---------DEL SimpleName@@MethodName:delete:[testFiles.get(0)] @AT@ 3312 @LENGTH@ 24
------------DEL MethodInvocation@@testFiles.get(0) @AT@ 3319 @LENGTH@ 16
---------------DEL SimpleName@@Name:testFiles @AT@ 3319 @LENGTH@ 9
---------------DEL SimpleName@@MethodName:get:[0] @AT@ 3329 @LENGTH@ 6
------------------DEL NumberLiteral@@0 @AT@ 3333 @LENGTH@ 1
---DEL ExpressionStatement@@MethodInvocation:Files.delete(testFiles.get(1)) @AT@ 3346 @LENGTH@ 31
------DEL MethodInvocation@@Files.delete(testFiles.get(1)) @AT@ 3346 @LENGTH@ 30
---------DEL SimpleName@@Name:Files @AT@ 3346 @LENGTH@ 5
---------DEL SimpleName@@MethodName:delete:[testFiles.get(1)] @AT@ 3352 @LENGTH@ 24
------------DEL MethodInvocation@@testFiles.get(1) @AT@ 3359 @LENGTH@ 16
---------------DEL SimpleName@@Name:testFiles @AT@ 3359 @LENGTH@ 9
---------------DEL SimpleName@@MethodName:get:[1] @AT@ 3369 @LENGTH@ 6
------------------DEL NumberLiteral@@1 @AT@ 3373 @LENGTH@ 1
---DEL ExpressionStatement@@MethodInvocation:mock.assertIsSatisfied() @AT@ 3387 @LENGTH@ 25
------DEL MethodInvocation@@mock.assertIsSatisfied() @AT@ 3387 @LENGTH@ 24
---------DEL SimpleName@@Name:mock @AT@ 3387 @LENGTH@ 4
---------DEL SimpleName@@MethodName:assertIsSatisfied:[] @AT@ 3392 @LENGTH@ 19


UPD ExpressionStatement@@MethodInvocation:context.getStreamCachingStrategy().setSpoolDirectory("target/tmp") @TO@ MethodInvocation:context.getStreamCachingStrategy().setSpoolDirectory(testDirectory().toFile()) @AT@ 1951 @LENGTH@ 67
---UPD MethodInvocation@@context.getStreamCachingStrategy().setSpoolDirectory("target/tmp") @TO@ context.getStreamCachingStrategy().setSpoolDirectory(testDirectory().toFile()) @AT@ 1951 @LENGTH@ 66
------UPD SimpleName@@MethodName:setSpoolDirectory:["target/tmp"] @TO@ MethodName:setSpoolDirectory:[testDirectory().toFile()] @AT@ 1986 @LENGTH@ 31
---------INS MethodInvocation@@testDirectory().toFile() @TO@ SimpleName@@MethodName:setSpoolDirectory:["target/tmp"] @AT@ 2004 @LENGTH@ 24
------------INS MethodInvocation@@MethodName:testDirectory:[] @TO@ MethodInvocation@@testDirectory().toFile() @AT@ 2004 @LENGTH@ 15
------------INS SimpleName@@MethodName:toFile:[] @TO@ MethodInvocation@@testDirectory().toFile() @AT@ 2020 @LENGTH@ 8
---------DEL StringLiteral@@"target/tmp" @AT@ 2004 @LENGTH@ 12


UPD ExpressionStatement@@MethodInvocation:assertThat(transform("isoDateFromParts(y, m, d, h, mm, s, ms, 'UTC')")).isEqualTo(Document.parse("{ \"$dateFromParts\" : {\"isoWeekYear\" : \"$y\", \"isoWeek\" : \"$m\", \"isoDayOfWeek\" : \"$d\", \"hour\" : \"$h\",  \"minute\" : \"$mm\",  \"second\" : \"$s\", \"milliseconds\" : \"$ms\", \"timezone\" : \"UTC\"}}")) @TO@ MethodInvocation:assertThat(transform("isoDateFromParts(y, m, d, h, mm, s, ms, 'UTC')")).isEqualTo(Document.parse("{ \"$dateFromParts\" : {\"isoWeekYear\" : \"$y\", \"isoWeek\" : \"$m\", \"isoDayOfWeek\" : \"$d\", \"hour\" : \"$h\",  \"minute\" : \"$mm\",  \"second\" : \"$s\", \"millisecond\" : \"$ms\", \"timezone\" : \"UTC\"}}")) @AT@ 34297 @LENGTH@ 322
---UPD MethodInvocation@@assertThat(transform("isoDateFromParts(y, m, d, h, mm, s, ms, 'UTC')")).isEqualTo(Document.parse("{ \"$dateFromParts\" : {\"isoWeekYear\" : \"$y\", \"isoWeek\" : \"$m\", \"isoDayOfWeek\" : \"$d\", \"hour\" : \"$h\",  \"minute\" : \"$mm\",  \"second\" : \"$s\", \"milliseconds\" : \"$ms\", \"timezone\" : \"UTC\"}}")) @TO@ assertThat(transform("isoDateFromParts(y, m, d, h, mm, s, ms, 'UTC')")).isEqualTo(Document.parse("{ \"$dateFromParts\" : {\"isoWeekYear\" : \"$y\", \"isoWeek\" : \"$m\", \"isoDayOfWeek\" : \"$d\", \"hour\" : \"$h\",  \"minute\" : \"$mm\",  \"second\" : \"$s\", \"millisecond\" : \"$ms\", \"timezone\" : \"UTC\"}}")) @AT@ 34297 @LENGTH@ 321
------UPD SimpleName@@MethodName:isEqualTo:[Document.parse("{ \"$dateFromParts\" : {\"isoWeekYear\" : \"$y\", \"isoWeek\" : \"$m\", \"isoDayOfWeek\" : \"$d\", \"hour\" : \"$h\",  \"minute\" : \"$mm\",  \"second\" : \"$s\", \"milliseconds\" : \"$ms\", \"timezone\" : \"UTC\"}}")] @TO@ MethodName:isEqualTo:[Document.parse("{ \"$dateFromParts\" : {\"isoWeekYear\" : \"$y\", \"isoWeek\" : \"$m\", \"isoDayOfWeek\" : \"$d\", \"hour\" : \"$h\",  \"minute\" : \"$mm\",  \"second\" : \"$s\", \"millisecond\" : \"$ms\", \"timezone\" : \"UTC\"}}")] @AT@ 34369 @LENGTH@ 249
---------UPD MethodInvocation@@Document.parse("{ \"$dateFromParts\" : {\"isoWeekYear\" : \"$y\", \"isoWeek\" : \"$m\", \"isoDayOfWeek\" : \"$d\", \"hour\" : \"$h\",  \"minute\" : \"$mm\",  \"second\" : \"$s\", \"milliseconds\" : \"$ms\", \"timezone\" : \"UTC\"}}") @TO@ Document.parse("{ \"$dateFromParts\" : {\"isoWeekYear\" : \"$y\", \"isoWeek\" : \"$m\", \"isoDayOfWeek\" : \"$d\", \"hour\" : \"$h\",  \"minute\" : \"$mm\",  \"second\" : \"$s\", \"millisecond\" : \"$ms\", \"timezone\" : \"UTC\"}}") @AT@ 34379 @LENGTH@ 238
------------UPD SimpleName@@MethodName:parse:["{ \"$dateFromParts\" : {\"isoWeekYear\" : \"$y\", \"isoWeek\" : \"$m\", \"isoDayOfWeek\" : \"$d\", \"hour\" : \"$h\",  \"minute\" : \"$mm\",  \"second\" : \"$s\", \"milliseconds\" : \"$ms\", \"timezone\" : \"UTC\"}}"] @TO@ MethodName:parse:["{ \"$dateFromParts\" : {\"isoWeekYear\" : \"$y\", \"isoWeek\" : \"$m\", \"isoDayOfWeek\" : \"$d\", \"hour\" : \"$h\",  \"minute\" : \"$mm\",  \"second\" : \"$s\", \"millisecond\" : \"$ms\", \"timezone\" : \"UTC\"}}"] @AT@ 34388 @LENGTH@ 229
---------------UPD StringLiteral@@"{ \"$dateFromParts\" : {\"isoWeekYear\" : \"$y\", \"isoWeek\" : \"$m\", \"isoDayOfWeek\" : \"$d\", \"hour\" : \"$h\",  \"minute\" : \"$mm\",  \"second\" : \"$s\", \"milliseconds\" : \"$ms\", \"timezone\" : \"UTC\"}}" @TO@ "{ \"$dateFromParts\" : {\"isoWeekYear\" : \"$y\", \"isoWeek\" : \"$m\", \"isoDayOfWeek\" : \"$d\", \"hour\" : \"$h\",  \"minute\" : \"$mm\",  \"second\" : \"$s\", \"millisecond\" : \"$ms\", \"timezone\" : \"UTC\"}}" @AT@ 34399 @LENGTH@ 217


UPD ExpressionStatement@@MethodInvocation:service.setId(camelContext.getUuidGenerator().generateUuid()) @TO@ MethodInvocation:service.setGeneratedId(camelContext.getUuidGenerator().generateUuid()) @AT@ 19613 @LENGTH@ 62
---UPD MethodInvocation@@service.setId(camelContext.getUuidGenerator().generateUuid()) @TO@ service.setGeneratedId(camelContext.getUuidGenerator().generateUuid()) @AT@ 19613 @LENGTH@ 61
------UPD SimpleName@@MethodName:setId:[camelContext.getUuidGenerator().generateUuid()] @TO@ MethodName:setGeneratedId:[camelContext.getUuidGenerator().generateUuid()] @AT@ 19621 @LENGTH@ 53


UPD FieldDeclaration@@private, boolean, [nextObjectSet=false] @TO@ private, boolean, [nextObjectSet] @AT@ 1640 @LENGTH@ 38
---UPD VariableDeclarationFragment@@nextObjectSet=false @TO@ nextObjectSet @AT@ 1656 @LENGTH@ 21
------DEL BooleanLiteral@@false @AT@ 1672 @LENGTH@ 5


UPD FieldDeclaration@@private, long, [last=0] @TO@ private, long, [last] @AT@ 1707 @LENGTH@ 22
---UPD VariableDeclarationFragment@@last=0 @TO@ last @AT@ 1720 @LENGTH@ 8
------DEL NumberLiteral@@0 @AT@ 1727 @LENGTH@ 1


INS MethodDeclaration@@default, void, MethodName:setGeneratedId, String id,  @TO@ TypeDeclaration@@[public]IdAware, [HasId] @AT@ 1376 @LENGTH@ 65
---INS Modifier@@default @TO@ MethodDeclaration@@default, void, MethodName:setGeneratedId, String id,  @AT@ 1376 @LENGTH@ 7
---INS PrimitiveType@@void @TO@ MethodDeclaration@@default, void, MethodName:setGeneratedId, String id,  @AT@ 1384 @LENGTH@ 4
---INS SimpleName@@MethodName:setGeneratedId @TO@ MethodDeclaration@@default, void, MethodName:setGeneratedId, String id,  @AT@ 1389 @LENGTH@ 14
---INS SingleVariableDeclaration@@String id @TO@ MethodDeclaration@@default, void, MethodName:setGeneratedId, String id,  @AT@ 1404 @LENGTH@ 9
------INS SimpleType@@String @TO@ SingleVariableDeclaration@@String id @AT@ 1404 @LENGTH@ 6
------INS SimpleName@@id @TO@ SingleVariableDeclaration@@String id @AT@ 1411 @LENGTH@ 2
---INS ExpressionStatement@@MethodInvocation:setId(id) @TO@ MethodDeclaration@@default, void, MethodName:setGeneratedId, String id,  @AT@ 1425 @LENGTH@ 10
------INS MethodInvocation@@setId(id) @TO@ ExpressionStatement@@MethodInvocation:setId(id) @AT@ 1425 @LENGTH@ 9
---------INS SimpleName@@MethodName:setId:[id] @TO@ MethodInvocation@@setId(id) @AT@ 1425 @LENGTH@ 9
------------INS SimpleName@@id @TO@ SimpleName@@MethodName:setId:[id] @AT@ 1431 @LENGTH@ 2


UPD VariableDeclarationStatement@@Message message=new Message(SerializationUtils.serialize(new Date()),null); @TO@ Message message=new Message(SerializationUtils.serialize(new Date())); @AT@ 2038 @LENGTH@ 78
---UPD VariableDeclarationFragment@@message=new Message(SerializationUtils.serialize(new Date()),null) @TO@ message=new Message(SerializationUtils.serialize(new Date())) @AT@ 2046 @LENGTH@ 69
------UPD ClassInstanceCreation@@Message[SerializationUtils.serialize(new Date()), null] @TO@ Message[SerializationUtils.serialize(new Date())] @AT@ 2056 @LENGTH@ 59
---------DEL NullLiteral@@null @AT@ 2110 @LENGTH@ 4


INS MethodDeclaration@@List<Person>, MethodName:findByLastnameIgnoreCaseIn, String... lastname,  @TO@ TypeDeclaration@@[public]PersonRepository, [MongoRepository<Person,String>, QuerydslPredicateExecutor<Person>] @AT@ 4084 @LENGTH@ 47
---INS ParameterizedType@@List<Person> @TO@ MethodDeclaration@@List<Person>, MethodName:findByLastnameIgnoreCaseIn, String... lastname,  @AT@ 4071 @LENGTH@ 12
------INS SimpleType@@List @TO@ ParameterizedType@@List<Person> @AT@ 4071 @LENGTH@ 4
------INS SimpleType@@Person @TO@ ParameterizedType@@List<Person> @AT@ 4076 @LENGTH@ 6
---INS SimpleName@@MethodName:findByLastnameIgnoreCaseIn @TO@ MethodDeclaration@@List<Person>, MethodName:findByLastnameIgnoreCaseIn, String... lastname,  @AT@ 4084 @LENGTH@ 26
---INS SingleVariableDeclaration@@String... lastname @TO@ MethodDeclaration@@List<Person>, MethodName:findByLastnameIgnoreCaseIn, String... lastname,  @AT@ 4111 @LENGTH@ 18
------INS SimpleType@@String @TO@ SingleVariableDeclaration@@String... lastname @AT@ 4111 @LENGTH@ 6
------INS SimpleName@@lastname @TO@ SingleVariableDeclaration@@String... lastname @AT@ 4121 @LENGTH@ 8


MOV FieldDeclaration@@private, EventLoopGroup, [sharedWorkerClientGroup=new NettyWorkerPoolBuilder().withWorkerCount(3).withName("NettyClient").build()] @TO@ TypeDeclaration@@[public]NettyUseSharedWorkerThreadPoolTest, BaseNettyTest @AT@ 1481 @LENGTH@ 141


UPD FieldDeclaration@@private, boolean, [removed=false] @TO@ private, boolean, [removed] @AT@ 1430 @LENGTH@ 32
---UPD VariableDeclarationFragment@@removed=false @TO@ removed @AT@ 1446 @LENGTH@ 15
------DEL BooleanLiteral@@false @AT@ 1456 @LENGTH@ 5


INS ExpressionStatement@@MethodInvocation:CamelContextAware.trySetCamelContext(producer,endpoint.getCamelContext()) @TO@ MethodDeclaration@@protected, void, MethodName:doBuild, Exception,  @AT@ 5135 @LENGTH@ 75
---INS MethodInvocation@@CamelContextAware.trySetCamelContext(producer,endpoint.getCamelContext()) @TO@ ExpressionStatement@@MethodInvocation:CamelContextAware.trySetCamelContext(producer,endpoint.getCamelContext()) @AT@ 5135 @LENGTH@ 74
------INS SimpleName@@Name:CamelContextAware @TO@ MethodInvocation@@CamelContextAware.trySetCamelContext(producer,endpoint.getCamelContext()) @AT@ 5135 @LENGTH@ 17
------INS SimpleName@@MethodName:trySetCamelContext:[producer, endpoint.getCamelContext()] @TO@ MethodInvocation@@CamelContextAware.trySetCamelContext(producer,endpoint.getCamelContext()) @AT@ 5153 @LENGTH@ 56
---------INS SimpleName@@producer @TO@ SimpleName@@MethodName:trySetCamelContext:[producer, endpoint.getCamelContext()] @AT@ 5172 @LENGTH@ 8
---------INS MethodInvocation@@endpoint.getCamelContext() @TO@ SimpleName@@MethodName:trySetCamelContext:[producer, endpoint.getCamelContext()] @AT@ 5182 @LENGTH@ 26
------------INS SimpleName@@Name:endpoint @TO@ MethodInvocation@@endpoint.getCamelContext() @AT@ 5182 @LENGTH@ 8
------------INS SimpleName@@MethodName:getCamelContext:[] @TO@ MethodInvocation@@endpoint.getCamelContext() @AT@ 5191 @LENGTH@ 17


UPD TryStatement@@try (DefaultCamelContext context=new DefaultCamelContext()){  context.getRegistry().bind("myErrorHandler",new NoErrorHandlerBuilder());  context.addRoutes(new RouteBuilder(){    @Override public void configure() throws Exception {      errorHandler("myErrorHandler");      routeTemplate("myTemplate").templateParameter("foo").templateParameter("bar").from("direct:{{foo}}").to("mock:{{bar}}");      from("direct:_r").to("mock:_r");    }  });  assertThat(context.getRouteDefinitions()).first().satisfies(d -> {    assertThat(d.getErrorHandlerFactory()).isInstanceOfSatisfying(ErrorHandlerBuilderRef.class,r -> {      assertThat(r.getRef()).isEqualTo("myErrorHandler");    });  });  assertThat(context.getRouteTemplateDefinitions()).first().satisfies(d -> {    assertThat(d.route().getErrorHandlerFactory()).isInstanceOfSatisfying(ErrorHandlerBuilderRef.class,r -> {      assertThat(r.getRef()).isEqualTo("myErrorHandler");    });  });  context.addRouteFromTemplate("myTemplate","",mapOf("",""));}  @TO@ try (DefaultCamelContext context=new DefaultCamelContext()){  context.getRegistry().bind("myErrorHandler",new NoErrorHandlerBuilder());  context.addRoutes(new RouteBuilder(){    @Override public void configure() throws Exception {      errorHandler("myErrorHandler");      routeTemplate("myTemplate").templateParameter("foo").templateParameter("bar").from("direct:{{foo}}").to("mock:{{bar}}");      from("direct:_r").to("mock:_r");    }  });  assertThat(context.getRouteDefinitions()).first().satisfies(d -> {    assertThat(d.getErrorHandlerFactory()).isInstanceOfSatisfying(ErrorHandlerBuilderRef.class,h -> {      assertThat(h.getRef()).isEqualTo("myErrorHandler");    });  });  assertThat(context.getRouteTemplateDefinitions()).first().satisfies(d -> {    assertThat(d.route().getErrorHandlerFactory()).isInstanceOfSatisfying(ErrorHandlerBuilderRef.class,h -> {      assertThat(h.getRef()).isEqualTo("myErrorHandler");    });  });  context.addRouteFromTemplate("myId","myTemplate",mapOf("foo","f","bar","b"));  context.start();  assertThat(context.getRoutes()).allSatisfy(r -> {    assertThat(r).isInstanceOfSatisfying(DefaultRoute.class,dr -> {      Channel channel=unwrapChannel(r.getProcessor());      assertThat(channel).isNotNull();      assertThat(channel.getErrorHandler()).isInstanceOf(NoErrorHandler.class);    });  });}  @AT@ 1167 @LENGTH@ 1421
---UPD ExpressionStatement@@MethodInvocation:assertThat(context.getRouteDefinitions()).first().satisfies(d -> {
  assertThat(d.getErrorHandlerFactory()).isInstanceOfSatisfying(ErrorHandlerBuilderRef.class,r -> {
    assertThat(r.getRef()).isEqualTo("myErrorHandler");
  }
);
}
) @TO@ MethodInvocation:assertThat(context.getRouteDefinitions()).first().satisfies(d -> {
  assertThat(d.getErrorHandlerFactory()).isInstanceOfSatisfying(ErrorHandlerBuilderRef.class,h -> {
    assertThat(h.getRef()).isEqualTo("myErrorHandler");
  }
);
}
) @AT@ 1894 @LENGTH@ 289
------UPD MethodInvocation@@assertThat(context.getRouteDefinitions()).first().satisfies(d -> {
  assertThat(d.getErrorHandlerFactory()).isInstanceOfSatisfying(ErrorHandlerBuilderRef.class,r -> {
    assertThat(r.getRef()).isEqualTo("myErrorHandler");
  }
);
}
) @TO@ assertThat(context.getRouteDefinitions()).first().satisfies(d -> {
  assertThat(d.getErrorHandlerFactory()).isInstanceOfSatisfying(ErrorHandlerBuilderRef.class,h -> {
    assertThat(h.getRef()).isEqualTo("myErrorHandler");
  }
);
}
) @AT@ 1894 @LENGTH@ 288
---------UPD SimpleName@@MethodName:satisfies:[d -> {
  assertThat(d.getErrorHandlerFactory()).isInstanceOfSatisfying(ErrorHandlerBuilderRef.class,r -> {
    assertThat(r.getRef()).isEqualTo("myErrorHandler");
  }
);
}
] @TO@ MethodName:satisfies:[d -> {
  assertThat(d.getErrorHandlerFactory()).isInstanceOfSatisfying(ErrorHandlerBuilderRef.class,h -> {
    assertThat(h.getRef()).isEqualTo("myErrorHandler");
  }
);
}
] @AT@ 1944 @LENGTH@ 238
------------UPD LambdaExpression@@d -> {
  assertThat(d.getErrorHandlerFactory()).isInstanceOfSatisfying(ErrorHandlerBuilderRef.class,r -> {
    assertThat(r.getRef()).isEqualTo("myErrorHandler");
  }
);
}
 @TO@ d -> {
  assertThat(d.getErrorHandlerFactory()).isInstanceOfSatisfying(ErrorHandlerBuilderRef.class,h -> {
    assertThat(h.getRef()).isEqualTo("myErrorHandler");
  }
);
}
 @AT@ 1954 @LENGTH@ 227
---------------UPD ExpressionStatement@@MethodInvocation:assertThat(d.getErrorHandlerFactory()).isInstanceOfSatisfying(ErrorHandlerBuilderRef.class,r -> {
  assertThat(r.getRef()).isEqualTo("myErrorHandler");
}
) @TO@ MethodInvocation:assertThat(d.getErrorHandlerFactory()).isInstanceOfSatisfying(ErrorHandlerBuilderRef.class,h -> {
  assertThat(h.getRef()).isEqualTo("myErrorHandler");
}
) @AT@ 1977 @LENGTH@ 190
------------------UPD MethodInvocation@@assertThat(d.getErrorHandlerFactory()).isInstanceOfSatisfying(ErrorHandlerBuilderRef.class,r -> {
  assertThat(r.getRef()).isEqualTo("myErrorHandler");
}
) @TO@ assertThat(d.getErrorHandlerFactory()).isInstanceOfSatisfying(ErrorHandlerBuilderRef.class,h -> {
  assertThat(h.getRef()).isEqualTo("myErrorHandler");
}
) @AT@ 1977 @LENGTH@ 189
---------------------UPD SimpleName@@MethodName:isInstanceOfSatisfying:[ErrorHandlerBuilderRef.class, r -> {
  assertThat(r.getRef()).isEqualTo("myErrorHandler");
}
] @TO@ MethodName:isInstanceOfSatisfying:[ErrorHandlerBuilderRef.class, h -> {
  assertThat(h.getRef()).isEqualTo("myErrorHandler");
}
] @AT@ 2016 @LENGTH@ 150
------------------------UPD LambdaExpression@@r -> {
  assertThat(r.getRef()).isEqualTo("myErrorHandler");
}
 @TO@ h -> {
  assertThat(h.getRef()).isEqualTo("myErrorHandler");
}
 @AT@ 2069 @LENGTH@ 96
---------------------------UPD VariableDeclarationFragment@@r @TO@ h @AT@ 2069 @LENGTH@ 1
------------------------------UPD SimpleName@@r @TO@ h @AT@ 2069 @LENGTH@ 1
---------------------------UPD ExpressionStatement@@MethodInvocation:assertThat(r.getRef()).isEqualTo("myErrorHandler") @TO@ MethodInvocation:assertThat(h.getRef()).isEqualTo("myErrorHandler") @AT@ 2096 @LENGTH@ 51
------------------------------UPD MethodInvocation@@assertThat(r.getRef()).isEqualTo("myErrorHandler") @TO@ assertThat(h.getRef()).isEqualTo("myErrorHandler") @AT@ 2096 @LENGTH@ 50
---------------------------------UPD MethodInvocation@@MethodName:assertThat:[r.getRef()] @TO@ MethodName:assertThat:[h.getRef()] @AT@ 2096 @LENGTH@ 22
------------------------------------UPD MethodInvocation@@r.getRef() @TO@ h.getRef() @AT@ 2107 @LENGTH@ 10
---------------------------------------UPD SimpleName@@Name:r @TO@ Name:h @AT@ 2107 @LENGTH@ 1
---UPD ExpressionStatement@@MethodInvocation:assertThat(context.getRouteTemplateDefinitions()).first().satisfies(d -> {
  assertThat(d.route().getErrorHandlerFactory()).isInstanceOfSatisfying(ErrorHandlerBuilderRef.class,r -> {
    assertThat(r.getRef()).isEqualTo("myErrorHandler");
  }
);
}
) @TO@ MethodInvocation:assertThat(context.getRouteTemplateDefinitions()).first().satisfies(d -> {
  assertThat(d.route().getErrorHandlerFactory()).isInstanceOfSatisfying(ErrorHandlerBuilderRef.class,h -> {
    assertThat(h.getRef()).isEqualTo("myErrorHandler");
  }
);
}
) @AT@ 2197 @LENGTH@ 305
------UPD MethodInvocation@@assertThat(context.getRouteTemplateDefinitions()).first().satisfies(d -> {
  assertThat(d.route().getErrorHandlerFactory()).isInstanceOfSatisfying(ErrorHandlerBuilderRef.class,r -> {
    assertThat(r.getRef()).isEqualTo("myErrorHandler");
  }
);
}
) @TO@ assertThat(context.getRouteTemplateDefinitions()).first().satisfies(d -> {
  assertThat(d.route().getErrorHandlerFactory()).isInstanceOfSatisfying(ErrorHandlerBuilderRef.class,h -> {
    assertThat(h.getRef()).isEqualTo("myErrorHandler");
  }
);
}
) @AT@ 2197 @LENGTH@ 304
---------UPD SimpleName@@MethodName:satisfies:[d -> {
  assertThat(d.route().getErrorHandlerFactory()).isInstanceOfSatisfying(ErrorHandlerBuilderRef.class,r -> {
    assertThat(r.getRef()).isEqualTo("myErrorHandler");
  }
);
}
] @TO@ MethodName:satisfies:[d -> {
  assertThat(d.route().getErrorHandlerFactory()).isInstanceOfSatisfying(ErrorHandlerBuilderRef.class,h -> {
    assertThat(h.getRef()).isEqualTo("myErrorHandler");
  }
);
}
] @AT@ 2255 @LENGTH@ 246
------------UPD LambdaExpression@@d -> {
  assertThat(d.route().getErrorHandlerFactory()).isInstanceOfSatisfying(ErrorHandlerBuilderRef.class,r -> {
    assertThat(r.getRef()).isEqualTo("myErrorHandler");
  }
);
}
 @TO@ d -> {
  assertThat(d.route().getErrorHandlerFactory()).isInstanceOfSatisfying(ErrorHandlerBuilderRef.class,h -> {
    assertThat(h.getRef()).isEqualTo("myErrorHandler");
  }
);
}
 @AT@ 2265 @LENGTH@ 235
---------------UPD ExpressionStatement@@MethodInvocation:assertThat(d.route().getErrorHandlerFactory()).isInstanceOfSatisfying(ErrorHandlerBuilderRef.class,r -> {
  assertThat(r.getRef()).isEqualTo("myErrorHandler");
}
) @TO@ MethodInvocation:assertThat(d.route().getErrorHandlerFactory()).isInstanceOfSatisfying(ErrorHandlerBuilderRef.class,h -> {
  assertThat(h.getRef()).isEqualTo("myErrorHandler");
}
) @AT@ 2288 @LENGTH@ 198
------------------UPD MethodInvocation@@assertThat(d.route().getErrorHandlerFactory()).isInstanceOfSatisfying(ErrorHandlerBuilderRef.class,r -> {
  assertThat(r.getRef()).isEqualTo("myErrorHandler");
}
) @TO@ assertThat(d.route().getErrorHandlerFactory()).isInstanceOfSatisfying(ErrorHandlerBuilderRef.class,h -> {
  assertThat(h.getRef()).isEqualTo("myErrorHandler");
}
) @AT@ 2288 @LENGTH@ 197
---------------------UPD SimpleName@@MethodName:isInstanceOfSatisfying:[ErrorHandlerBuilderRef.class, r -> {
  assertThat(r.getRef()).isEqualTo("myErrorHandler");
}
] @TO@ MethodName:isInstanceOfSatisfying:[ErrorHandlerBuilderRef.class, h -> {
  assertThat(h.getRef()).isEqualTo("myErrorHandler");
}
] @AT@ 2335 @LENGTH@ 150
------------------------UPD LambdaExpression@@r -> {
  assertThat(r.getRef()).isEqualTo("myErrorHandler");
}
 @TO@ h -> {
  assertThat(h.getRef()).isEqualTo("myErrorHandler");
}
 @AT@ 2388 @LENGTH@ 96
---------------------------UPD VariableDeclarationFragment@@r @TO@ h @AT@ 2388 @LENGTH@ 1
------------------------------UPD SimpleName@@r @TO@ h @AT@ 2388 @LENGTH@ 1
---------------------------UPD ExpressionStatement@@MethodInvocation:assertThat(r.getRef()).isEqualTo("myErrorHandler") @TO@ MethodInvocation:assertThat(h.getRef()).isEqualTo("myErrorHandler") @AT@ 2415 @LENGTH@ 51
------------------------------UPD MethodInvocation@@assertThat(r.getRef()).isEqualTo("myErrorHandler") @TO@ assertThat(h.getRef()).isEqualTo("myErrorHandler") @AT@ 2415 @LENGTH@ 50
---------------------------------UPD MethodInvocation@@MethodName:assertThat:[r.getRef()] @TO@ MethodName:assertThat:[h.getRef()] @AT@ 2415 @LENGTH@ 22
------------------------------------UPD MethodInvocation@@r.getRef() @TO@ h.getRef() @AT@ 2426 @LENGTH@ 10
---------------------------------------UPD SimpleName@@Name:r @TO@ Name:h @AT@ 2426 @LENGTH@ 1
---UPD ExpressionStatement@@MethodInvocation:context.addRouteFromTemplate("myTemplate","",mapOf("","")) @TO@ MethodInvocation:context.addRouteFromTemplate("myId","myTemplate",mapOf("foo","f","bar","b")) @AT@ 2516 @LENGTH@ 62
------UPD MethodInvocation@@context.addRouteFromTemplate("myTemplate","",mapOf("","")) @TO@ context.addRouteFromTemplate("myId","myTemplate",mapOf("foo","f","bar","b")) @AT@ 2516 @LENGTH@ 61
---------UPD SimpleName@@MethodName:addRouteFromTemplate:["myTemplate", "", mapOf("","")] @TO@ MethodName:addRouteFromTemplate:["myId", "myTemplate", mapOf("foo","f","bar","b")] @AT@ 2524 @LENGTH@ 53
------------UPD StringLiteral@@"myTemplate" @TO@ "myId" @AT@ 2545 @LENGTH@ 12
------------UPD StringLiteral@@"" @TO@ "myTemplate" @AT@ 2559 @LENGTH@ 2
------------UPD MethodInvocation@@mapOf("","") @TO@ mapOf("foo","f","bar","b") @AT@ 2563 @LENGTH@ 13
---------------UPD SimpleName@@MethodName:mapOf:["", ""] @TO@ MethodName:mapOf:["foo", "f", "bar", "b"] @AT@ 2563 @LENGTH@ 13
------------------UPD StringLiteral@@"" @TO@ "f" @AT@ 2569 @LENGTH@ 2
------------------UPD StringLiteral@@"" @TO@ "b" @AT@ 2573 @LENGTH@ 2
------------------INS StringLiteral@@"foo" @TO@ SimpleName@@MethodName:mapOf:["", ""] @AT@ 2777 @LENGTH@ 5
------------------INS StringLiteral@@"bar" @TO@ SimpleName@@MethodName:mapOf:["", ""] @AT@ 2789 @LENGTH@ 5
---INS ExpressionStatement@@MethodInvocation:context.start() @TO@ TryStatement@@try (DefaultCamelContext context=new DefaultCamelContext()){  context.getRegistry().bind("myErrorHandler",new NoErrorHandlerBuilder());  context.addRoutes(new RouteBuilder(){    @Override public void configure() throws Exception {      errorHandler("myErrorHandler");      routeTemplate("myTemplate").templateParameter("foo").templateParameter("bar").from("direct:{{foo}}").to("mock:{{bar}}");      from("direct:_r").to("mock:_r");    }  });  assertThat(context.getRouteDefinitions()).first().satisfies(d -> {    assertThat(d.getErrorHandlerFactory()).isInstanceOfSatisfying(ErrorHandlerBuilderRef.class,r -> {      assertThat(r.getRef()).isEqualTo("myErrorHandler");    });  });  assertThat(context.getRouteTemplateDefinitions()).first().satisfies(d -> {    assertThat(d.route().getErrorHandlerFactory()).isInstanceOfSatisfying(ErrorHandlerBuilderRef.class,r -> {      assertThat(r.getRef()).isEqualTo("myErrorHandler");    });  });  context.addRouteFromTemplate("myTemplate","",mapOf("",""));}  @AT@ 2815 @LENGTH@ 16
------INS MethodInvocation@@context.start() @TO@ ExpressionStatement@@MethodInvocation:context.start() @AT@ 2815 @LENGTH@ 15
---------INS SimpleName@@Name:context @TO@ MethodInvocation@@context.start() @AT@ 2815 @LENGTH@ 7
---------INS SimpleName@@MethodName:start:[] @TO@ MethodInvocation@@context.start() @AT@ 2823 @LENGTH@ 7
---INS ExpressionStatement@@MethodInvocation:assertThat(context.getRoutes()).allSatisfy(r -> {
  assertThat(r).isInstanceOfSatisfying(DefaultRoute.class,dr -> {
    Channel channel=unwrapChannel(r.getProcessor());
    assertThat(channel).isNotNull();
    assertThat(channel.getErrorHandler()).isInstanceOf(NoErrorHandler.class);
  }
);
}
) @TO@ TryStatement@@try (DefaultCamelContext context=new DefaultCamelContext()){  context.getRegistry().bind("myErrorHandler",new NoErrorHandlerBuilder());  context.addRoutes(new RouteBuilder(){    @Override public void configure() throws Exception {      errorHandler("myErrorHandler");      routeTemplate("myTemplate").templateParameter("foo").templateParameter("bar").from("direct:{{foo}}").to("mock:{{bar}}");      from("direct:_r").to("mock:_r");    }  });  assertThat(context.getRouteDefinitions()).first().satisfies(d -> {    assertThat(d.getErrorHandlerFactory()).isInstanceOfSatisfying(ErrorHandlerBuilderRef.class,r -> {      assertThat(r.getRef()).isEqualTo("myErrorHandler");    });  });  assertThat(context.getRouteTemplateDefinitions()).first().satisfies(d -> {    assertThat(d.route().getErrorHandlerFactory()).isInstanceOfSatisfying(ErrorHandlerBuilderRef.class,r -> {      assertThat(r.getRef()).isEqualTo("myErrorHandler");    });  });  context.addRouteFromTemplate("myTemplate","",mapOf("",""));}  @AT@ 2845 @LENGTH@ 384
------INS MethodInvocation@@assertThat(context.getRoutes()).allSatisfy(r -> {
  assertThat(r).isInstanceOfSatisfying(DefaultRoute.class,dr -> {
    Channel channel=unwrapChannel(r.getProcessor());
    assertThat(channel).isNotNull();
    assertThat(channel.getErrorHandler()).isInstanceOf(NoErrorHandler.class);
  }
);
}
) @TO@ ExpressionStatement@@MethodInvocation:assertThat(context.getRoutes()).allSatisfy(r -> {
  assertThat(r).isInstanceOfSatisfying(DefaultRoute.class,dr -> {
    Channel channel=unwrapChannel(r.getProcessor());
    assertThat(channel).isNotNull();
    assertThat(channel.getErrorHandler()).isInstanceOf(NoErrorHandler.class);
  }
);
}
) @AT@ 2845 @LENGTH@ 383
---------INS MethodInvocation@@MethodName:assertThat:[context.getRoutes()] @TO@ MethodInvocation@@assertThat(context.getRoutes()).allSatisfy(r -> {
  assertThat(r).isInstanceOfSatisfying(DefaultRoute.class,dr -> {
    Channel channel=unwrapChannel(r.getProcessor());
    assertThat(channel).isNotNull();
    assertThat(channel.getErrorHandler()).isInstanceOf(NoErrorHandler.class);
  }
);
}
) @AT@ 2845 @LENGTH@ 31
------------INS MethodInvocation@@context.getRoutes() @TO@ MethodInvocation@@MethodName:assertThat:[context.getRoutes()] @AT@ 2856 @LENGTH@ 19
---------------INS SimpleName@@Name:context @TO@ MethodInvocation@@context.getRoutes() @AT@ 2856 @LENGTH@ 7
---------------INS SimpleName@@MethodName:getRoutes:[] @TO@ MethodInvocation@@context.getRoutes() @AT@ 2864 @LENGTH@ 11
---------INS SimpleName@@MethodName:allSatisfy:[r -> {
  assertThat(r).isInstanceOfSatisfying(DefaultRoute.class,dr -> {
    Channel channel=unwrapChannel(r.getProcessor());
    assertThat(channel).isNotNull();
    assertThat(channel.getErrorHandler()).isInstanceOf(NoErrorHandler.class);
  }
);
}
] @TO@ MethodInvocation@@assertThat(context.getRoutes()).allSatisfy(r -> {
  assertThat(r).isInstanceOfSatisfying(DefaultRoute.class,dr -> {
    Channel channel=unwrapChannel(r.getProcessor());
    assertThat(channel).isNotNull();
    assertThat(channel.getErrorHandler()).isInstanceOf(NoErrorHandler.class);
  }
);
}
) @AT@ 2877 @LENGTH@ 351
------------INS LambdaExpression@@r -> {
  assertThat(r).isInstanceOfSatisfying(DefaultRoute.class,dr -> {
    Channel channel=unwrapChannel(r.getProcessor());
    assertThat(channel).isNotNull();
    assertThat(channel.getErrorHandler()).isInstanceOf(NoErrorHandler.class);
  }
);
}
 @TO@ SimpleName@@MethodName:allSatisfy:[r -> {
  assertThat(r).isInstanceOfSatisfying(DefaultRoute.class,dr -> {
    Channel channel=unwrapChannel(r.getProcessor());
    assertThat(channel).isNotNull();
    assertThat(channel.getErrorHandler()).isInstanceOf(NoErrorHandler.class);
  }
);
}
] @AT@ 2888 @LENGTH@ 339
---------------INS VariableDeclarationFragment@@r @TO@ LambdaExpression@@r -> {
  assertThat(r).isInstanceOfSatisfying(DefaultRoute.class,dr -> {
    Channel channel=unwrapChannel(r.getProcessor());
    assertThat(channel).isNotNull();
    assertThat(channel.getErrorHandler()).isInstanceOf(NoErrorHandler.class);
  }
);
}
 @AT@ 2888 @LENGTH@ 1
------------------INS SimpleName@@r @TO@ VariableDeclarationFragment@@r @AT@ 2888 @LENGTH@ 1
---------------INS ExpressionStatement@@MethodInvocation:assertThat(r).isInstanceOfSatisfying(DefaultRoute.class,dr -> {
  Channel channel=unwrapChannel(r.getProcessor());
  assertThat(channel).isNotNull();
  assertThat(channel.getErrorHandler()).isInstanceOf(NoErrorHandler.class);
}
) @TO@ LambdaExpression@@r -> {
  assertThat(r).isInstanceOfSatisfying(DefaultRoute.class,dr -> {
    Channel channel=unwrapChannel(r.getProcessor());
    assertThat(channel).isNotNull();
    assertThat(channel.getErrorHandler()).isInstanceOf(NoErrorHandler.class);
  }
);
}
 @AT@ 2911 @LENGTH@ 302
------------------INS MethodInvocation@@assertThat(r).isInstanceOfSatisfying(DefaultRoute.class,dr -> {
  Channel channel=unwrapChannel(r.getProcessor());
  assertThat(channel).isNotNull();
  assertThat(channel.getErrorHandler()).isInstanceOf(NoErrorHandler.class);
}
) @TO@ ExpressionStatement@@MethodInvocation:assertThat(r).isInstanceOfSatisfying(DefaultRoute.class,dr -> {
  Channel channel=unwrapChannel(r.getProcessor());
  assertThat(channel).isNotNull();
  assertThat(channel.getErrorHandler()).isInstanceOf(NoErrorHandler.class);
}
) @AT@ 2911 @LENGTH@ 301
---------------------INS MethodInvocation@@MethodName:assertThat:[r] @TO@ MethodInvocation@@assertThat(r).isInstanceOfSatisfying(DefaultRoute.class,dr -> {
  Channel channel=unwrapChannel(r.getProcessor());
  assertThat(channel).isNotNull();
  assertThat(channel.getErrorHandler()).isInstanceOf(NoErrorHandler.class);
}
) @AT@ 2911 @LENGTH@ 13
------------------------INS SimpleName@@r @TO@ MethodInvocation@@MethodName:assertThat:[r] @AT@ 2922 @LENGTH@ 1
---------------------INS SimpleName@@MethodName:isInstanceOfSatisfying:[DefaultRoute.class, dr -> {
  Channel channel=unwrapChannel(r.getProcessor());
  assertThat(channel).isNotNull();
  assertThat(channel.getErrorHandler()).isInstanceOf(NoErrorHandler.class);
}
] @TO@ MethodInvocation@@assertThat(r).isInstanceOfSatisfying(DefaultRoute.class,dr -> {
  Channel channel=unwrapChannel(r.getProcessor());
  assertThat(channel).isNotNull();
  assertThat(channel.getErrorHandler()).isInstanceOf(NoErrorHandler.class);
}
) @AT@ 2925 @LENGTH@ 287
------------------------INS TypeLiteral@@DefaultRoute.class @TO@ SimpleName@@MethodName:isInstanceOfSatisfying:[DefaultRoute.class, dr -> {
  Channel channel=unwrapChannel(r.getProcessor());
  assertThat(channel).isNotNull();
  assertThat(channel.getErrorHandler()).isInstanceOf(NoErrorHandler.class);
}
] @AT@ 2948 @LENGTH@ 18
------------------------INS LambdaExpression@@dr -> {
  Channel channel=unwrapChannel(r.getProcessor());
  assertThat(channel).isNotNull();
  assertThat(channel.getErrorHandler()).isInstanceOf(NoErrorHandler.class);
}
 @TO@ SimpleName@@MethodName:isInstanceOfSatisfying:[DefaultRoute.class, dr -> {
  Channel channel=unwrapChannel(r.getProcessor());
  assertThat(channel).isNotNull();
  assertThat(channel.getErrorHandler()).isInstanceOf(NoErrorHandler.class);
}
] @AT@ 2968 @LENGTH@ 243
---------------------------INS VariableDeclarationFragment@@dr @TO@ LambdaExpression@@dr -> {
  Channel channel=unwrapChannel(r.getProcessor());
  assertThat(channel).isNotNull();
  assertThat(channel.getErrorHandler()).isInstanceOf(NoErrorHandler.class);
}
 @AT@ 2968 @LENGTH@ 2
------------------------------INS SimpleName@@dr @TO@ VariableDeclarationFragment@@dr @AT@ 2968 @LENGTH@ 2
---------------------------INS VariableDeclarationStatement@@Channel channel=unwrapChannel(r.getProcessor()); @TO@ LambdaExpression@@dr -> {
  Channel channel=unwrapChannel(r.getProcessor());
  assertThat(channel).isNotNull();
  assertThat(channel.getErrorHandler()).isInstanceOf(NoErrorHandler.class);
}
 @AT@ 2996 @LENGTH@ 50
------------------------------INS SimpleType@@Channel @TO@ VariableDeclarationStatement@@Channel channel=unwrapChannel(r.getProcessor()); @AT@ 2996 @LENGTH@ 7
------------------------------INS VariableDeclarationFragment@@channel=unwrapChannel(r.getProcessor()) @TO@ VariableDeclarationStatement@@Channel channel=unwrapChannel(r.getProcessor()); @AT@ 3004 @LENGTH@ 41
---------------------------------INS SimpleName@@channel @TO@ VariableDeclarationFragment@@channel=unwrapChannel(r.getProcessor()) @AT@ 3004 @LENGTH@ 7
---------------------------------INS MethodInvocation@@unwrapChannel(r.getProcessor()) @TO@ VariableDeclarationFragment@@channel=unwrapChannel(r.getProcessor()) @AT@ 3014 @LENGTH@ 31
------------------------------------INS SimpleName@@MethodName:unwrapChannel:[r.getProcessor()] @TO@ MethodInvocation@@unwrapChannel(r.getProcessor()) @AT@ 3014 @LENGTH@ 31
---------------------------------------INS MethodInvocation@@r.getProcessor() @TO@ SimpleName@@MethodName:unwrapChannel:[r.getProcessor()] @AT@ 3028 @LENGTH@ 16
------------------------------------------INS SimpleName@@Name:r @TO@ MethodInvocation@@r.getProcessor() @AT@ 3028 @LENGTH@ 1
------------------------------------------INS SimpleName@@MethodName:getProcessor:[] @TO@ MethodInvocation@@r.getProcessor() @AT@ 3030 @LENGTH@ 14
---------------------------INS ExpressionStatement@@MethodInvocation:assertThat(channel).isNotNull() @TO@ LambdaExpression@@dr -> {
  Channel channel=unwrapChannel(r.getProcessor());
  assertThat(channel).isNotNull();
  assertThat(channel.getErrorHandler()).isInstanceOf(NoErrorHandler.class);
}
 @AT@ 3067 @LENGTH@ 32
------------------------------INS MethodInvocation@@assertThat(channel).isNotNull() @TO@ ExpressionStatement@@MethodInvocation:assertThat(channel).isNotNull() @AT@ 3067 @LENGTH@ 31
---------------------------------INS MethodInvocation@@MethodName:assertThat:[channel] @TO@ MethodInvocation@@assertThat(channel).isNotNull() @AT@ 3067 @LENGTH@ 19
------------------------------------INS SimpleName@@channel @TO@ MethodInvocation@@MethodName:assertThat:[channel] @AT@ 3078 @LENGTH@ 7
---------------------------------INS SimpleName@@MethodName:isNotNull:[] @TO@ MethodInvocation@@assertThat(channel).isNotNull() @AT@ 3087 @LENGTH@ 11
---------------------------INS ExpressionStatement@@MethodInvocation:assertThat(channel.getErrorHandler()).isInstanceOf(NoErrorHandler.class) @TO@ LambdaExpression@@dr -> {
  Channel channel=unwrapChannel(r.getProcessor());
  assertThat(channel).isNotNull();
  assertThat(channel.getErrorHandler()).isInstanceOf(NoErrorHandler.class);
}
 @AT@ 3120 @LENGTH@ 73
------------------------------INS MethodInvocation@@assertThat(channel.getErrorHandler()).isInstanceOf(NoErrorHandler.class) @TO@ ExpressionStatement@@MethodInvocation:assertThat(channel.getErrorHandler()).isInstanceOf(NoErrorHandler.class) @AT@ 3120 @LENGTH@ 72
---------------------------------INS MethodInvocation@@MethodName:assertThat:[channel.getErrorHandler()] @TO@ MethodInvocation@@assertThat(channel.getErrorHandler()).isInstanceOf(NoErrorHandler.class) @AT@ 3120 @LENGTH@ 37
------------------------------------INS MethodInvocation@@channel.getErrorHandler() @TO@ MethodInvocation@@MethodName:assertThat:[channel.getErrorHandler()] @AT@ 3131 @LENGTH@ 25
---------------------------------------INS SimpleName@@Name:channel @TO@ MethodInvocation@@channel.getErrorHandler() @AT@ 3131 @LENGTH@ 7
---------------------------------------INS SimpleName@@MethodName:getErrorHandler:[] @TO@ MethodInvocation@@channel.getErrorHandler() @AT@ 3139 @LENGTH@ 17
---------------------------------INS SimpleName@@MethodName:isInstanceOf:[NoErrorHandler.class] @TO@ MethodInvocation@@assertThat(channel.getErrorHandler()).isInstanceOf(NoErrorHandler.class) @AT@ 3158 @LENGTH@ 34
------------------------------------INS TypeLiteral@@NoErrorHandler.class @TO@ SimpleName@@MethodName:isInstanceOf:[NoErrorHandler.class] @AT@ 3171 @LENGTH@ 20


DEL TryStatement@@try {  if (isPipelined()) {    pipeline(connection.newLettuceResult(getAsyncConnection().geodist(key,member1,member2,geoUnit),distanceConverter));    return null;  }  if (isQueueing()) {    transaction(connection.newLettuceResult(getAsyncConnection().geodist(key,member1,member2,geoUnit),distanceConverter));    return null;  }  Double distance=getConnection().geodist(key,member1,member2,geoUnit);  return distance != null ? distanceConverter.convert(distance) : null;} catch (Exception ex) {  throw convertLettuceAccessException(ex);} @AT@ 5408 @LENGTH@ 586
---DEL IfStatement@@if (isPipelined()) {  pipeline(connection.newLettuceResult(getAsyncConnection().geodist(key,member1,member2,geoUnit),distanceConverter));  return null;} @AT@ 5417 @LENGTH@ 172
------DEL MethodInvocation@@MethodName:isPipelined:[] @AT@ 5421 @LENGTH@ 13
------DEL Block@@ThenBody:{  pipeline(connection.newLettuceResult(getAsyncConnection().geodist(key,member1,member2,geoUnit),distanceConverter));  return null;} @AT@ 5436 @LENGTH@ 153
---------DEL ExpressionStatement@@MethodInvocation:pipeline(connection.newLettuceResult(getAsyncConnection().geodist(key,member1,member2,geoUnit),distanceConverter)) @AT@ 5442 @LENGTH@ 125
------------DEL MethodInvocation@@pipeline(connection.newLettuceResult(getAsyncConnection().geodist(key,member1,member2,geoUnit),distanceConverter)) @AT@ 5442 @LENGTH@ 124
---------------DEL SimpleName@@MethodName:pipeline:[connection.newLettuceResult(getAsyncConnection().geodist(key,member1,member2,geoUnit),distanceConverter)] @AT@ 5442 @LENGTH@ 124
------------------DEL MethodInvocation@@connection.newLettuceResult(getAsyncConnection().geodist(key,member1,member2,geoUnit),distanceConverter) @AT@ 5451 @LENGTH@ 114
---------DEL ReturnStatement@@NullLiteral:null @AT@ 5572 @LENGTH@ 12
------------DEL NullLiteral@@null @AT@ 5579 @LENGTH@ 4
---DEL IfStatement@@if (isQueueing()) {  transaction(connection.newLettuceResult(getAsyncConnection().geodist(key,member1,member2,geoUnit),distanceConverter));  return null;} @AT@ 5593 @LENGTH@ 174
------DEL MethodInvocation@@MethodName:isQueueing:[] @AT@ 5597 @LENGTH@ 12
------DEL Block@@ThenBody:{  transaction(connection.newLettuceResult(getAsyncConnection().geodist(key,member1,member2,geoUnit),distanceConverter));  return null;} @AT@ 5611 @LENGTH@ 156
---------DEL ExpressionStatement@@MethodInvocation:transaction(connection.newLettuceResult(getAsyncConnection().geodist(key,member1,member2,geoUnit),distanceConverter)) @AT@ 5617 @LENGTH@ 128
------------DEL MethodInvocation@@transaction(connection.newLettuceResult(getAsyncConnection().geodist(key,member1,member2,geoUnit),distanceConverter)) @AT@ 5617 @LENGTH@ 127
---------------DEL SimpleName@@MethodName:transaction:[connection.newLettuceResult(getAsyncConnection().geodist(key,member1,member2,geoUnit),distanceConverter)] @AT@ 5617 @LENGTH@ 127
------------------DEL MethodInvocation@@connection.newLettuceResult(getAsyncConnection().geodist(key,member1,member2,geoUnit),distanceConverter) @AT@ 5629 @LENGTH@ 114
---------------------DEL SimpleName@@Name:connection @AT@ 5629 @LENGTH@ 10
---------------------DEL SimpleName@@MethodName:newLettuceResult:[getAsyncConnection().geodist(key,member1,member2,geoUnit), distanceConverter] @AT@ 5640 @LENGTH@ 103
------------------------DEL MethodInvocation@@getAsyncConnection().geodist(key,member1,member2,geoUnit) @AT@ 5657 @LENGTH@ 60
---------------------------DEL MethodInvocation@@MethodName:getAsyncConnection:[] @AT@ 5657 @LENGTH@ 20
---------------------------DEL SimpleName@@MethodName:geodist:[key, member1, member2, geoUnit] @AT@ 5678 @LENGTH@ 39
------------------------------DEL SimpleName@@key @AT@ 5686 @LENGTH@ 3
------------------------------DEL SimpleName@@member1 @AT@ 5691 @LENGTH@ 7
------------------------------DEL SimpleName@@member2 @AT@ 5700 @LENGTH@ 7
------------------------------DEL SimpleName@@geoUnit @AT@ 5709 @LENGTH@ 7
------------------------DEL SimpleName@@distanceConverter @AT@ 5725 @LENGTH@ 17
---------DEL ReturnStatement@@NullLiteral:null @AT@ 5750 @LENGTH@ 12
------------DEL NullLiteral@@null @AT@ 5757 @LENGTH@ 4
---DEL VariableDeclarationStatement@@Double distance=getConnection().geodist(key,member1,member2,geoUnit); @AT@ 5772 @LENGTH@ 74
------DEL SimpleType@@Double @AT@ 5772 @LENGTH@ 6
------DEL VariableDeclarationFragment@@distance=getConnection().geodist(key,member1,member2,geoUnit) @AT@ 5779 @LENGTH@ 66
---------DEL SimpleName@@distance @AT@ 5779 @LENGTH@ 8
---------DEL MethodInvocation@@getConnection().geodist(key,member1,member2,geoUnit) @AT@ 5790 @LENGTH@ 55
------------DEL MethodInvocation@@MethodName:getConnection:[] @AT@ 5790 @LENGTH@ 15
------------DEL SimpleName@@MethodName:geodist:[key, member1, member2, geoUnit] @AT@ 5806 @LENGTH@ 39
---------------DEL SimpleName@@key @AT@ 5814 @LENGTH@ 3
---------------DEL SimpleName@@member1 @AT@ 5819 @LENGTH@ 7
---------------DEL SimpleName@@member2 @AT@ 5828 @LENGTH@ 7
---------------DEL SimpleName@@geoUnit @AT@ 5837 @LENGTH@ 7
---DEL ReturnStatement@@ConditionalExpression:distance != null ? distanceConverter.convert(distance) : null @AT@ 5850 @LENGTH@ 69
------DEL ConditionalExpression@@distance != null ? distanceConverter.convert(distance) : null @AT@ 5857 @LENGTH@ 61
---------DEL InfixExpression@@distance != null @AT@ 5857 @LENGTH@ 16
------------DEL SimpleName@@distance @AT@ 5857 @LENGTH@ 8
------------DEL Operator@@!= @AT@ 5865 @LENGTH@ 2
------------DEL NullLiteral@@null @AT@ 5869 @LENGTH@ 4
---------DEL MethodInvocation@@distanceConverter.convert(distance) @AT@ 5876 @LENGTH@ 35
------------DEL SimpleName@@Name:distanceConverter @AT@ 5876 @LENGTH@ 17
------------DEL SimpleName@@MethodName:convert:[distance] @AT@ 5894 @LENGTH@ 17
---------------DEL SimpleName@@distance @AT@ 5902 @LENGTH@ 8
---------DEL NullLiteral@@null @AT@ 5914 @LENGTH@ 4
---DEL CatchClause@@catch (Exception ex) {  throw convertLettuceAccessException(ex);} @AT@ 5924 @LENGTH@ 70
------DEL SingleVariableDeclaration@@Exception ex @AT@ 5931 @LENGTH@ 12
---------DEL SimpleType@@Exception @AT@ 5931 @LENGTH@ 9
---------DEL SimpleName@@ex @AT@ 5941 @LENGTH@ 2
------DEL ThrowStatement@@MethodInvocation:convertLettuceAccessException(ex) @AT@ 5950 @LENGTH@ 40
---------DEL MethodInvocation@@convertLettuceAccessException(ex) @AT@ 5956 @LENGTH@ 33
------------DEL SimpleName@@MethodName:convertLettuceAccessException:[ex] @AT@ 5956 @LENGTH@ 33
---------------DEL SimpleName@@ex @AT@ 5986 @LENGTH@ 2


UPD TypeDeclaration@@[@Disabled("TODO: Fix me"), public]FileConsumePollEnrichFileUsingProcessorTest, ContextTestSupport @TO@ [public]FileConsumePollEnrichFileUsingProcessorTest, ContextTestSupport @AT@ 1261 @LENGTH@ 3267
---DEL SingleMemberAnnotation@@@Disabled("TODO: Fix me") @AT@ 1261 @LENGTH@ 25


UPD VariableDeclarationStatement@@Set<ObjectName> s=mbeanServer.queryNames(new ObjectName("org.apache.camel:type=endpoints,*"),null); @TO@ Set<ObjectName> s=mbeanServer.queryNames(new ObjectName("org.apache.camel:context=" + context.getManagementName() + ",type=endpoints,*"),null); @AT@ 1556 @LENGTH@ 102
---UPD VariableDeclarationFragment@@s=mbeanServer.queryNames(new ObjectName("org.apache.camel:type=endpoints,*"),null) @TO@ s=mbeanServer.queryNames(new ObjectName("org.apache.camel:context=" + context.getManagementName() + ",type=endpoints,*"),null) @AT@ 1572 @LENGTH@ 85
------UPD MethodInvocation@@mbeanServer.queryNames(new ObjectName("org.apache.camel:type=endpoints,*"),null) @TO@ mbeanServer.queryNames(new ObjectName("org.apache.camel:context=" + context.getManagementName() + ",type=endpoints,*"),null) @AT@ 1576 @LENGTH@ 81
---------UPD SimpleName@@MethodName:queryNames:[new ObjectName("org.apache.camel:type=endpoints,*"), null] @TO@ MethodName:queryNames:[new ObjectName("org.apache.camel:context=" + context.getManagementName() + ",type=endpoints,*"), null] @AT@ 1588 @LENGTH@ 69
------------UPD ClassInstanceCreation@@ObjectName["org.apache.camel:type=endpoints,*"] @TO@ ObjectName["org.apache.camel:context=" + context.getManagementName() + ",type=endpoints,*"] @AT@ 1599 @LENGTH@ 51
---------------DEL StringLiteral@@"org.apache.camel:type=endpoints,*" @AT@ 1614 @LENGTH@ 35
---------------INS InfixExpression@@"org.apache.camel:context=" + context.getManagementName() + ",type=endpoints,*" @TO@ ClassInstanceCreation@@ObjectName["org.apache.camel:type=endpoints,*"] @AT@ 1631 @LENGTH@ 79
------------------INS StringLiteral@@"org.apache.camel:context=" @TO@ InfixExpression@@"org.apache.camel:context=" + context.getManagementName() + ",type=endpoints,*" @AT@ 1631 @LENGTH@ 27
------------------INS Operator@@+ @TO@ InfixExpression@@"org.apache.camel:context=" + context.getManagementName() + ",type=endpoints,*" @AT@ 1658 @LENGTH@ 1
------------------INS MethodInvocation@@context.getManagementName() @TO@ InfixExpression@@"org.apache.camel:context=" + context.getManagementName() + ",type=endpoints,*" @AT@ 1661 @LENGTH@ 27
---------------------INS SimpleName@@Name:context @TO@ MethodInvocation@@context.getManagementName() @AT@ 1661 @LENGTH@ 7
---------------------INS SimpleName@@MethodName:getManagementName:[] @TO@ MethodInvocation@@context.getManagementName() @AT@ 1669 @LENGTH@ 19
------------------INS StringLiteral@@",type=endpoints,*" @TO@ InfixExpression@@"org.apache.camel:context=" + context.getManagementName() + ",type=endpoints,*" @AT@ 1691 @LENGTH@ 19


UPD ExpressionStatement@@MethodInvocation:getMockEndpoint("mock:result").expectedBodiesReceived("Bye Donald+Duck") @TO@ MethodInvocation:getMockEndpoint("mock:result").expectedBodiesReceived("Bye Donald%20Duck") @AT@ 1309 @LENGTH@ 73
---UPD MethodInvocation@@getMockEndpoint("mock:result").expectedBodiesReceived("Bye Donald+Duck") @TO@ getMockEndpoint("mock:result").expectedBodiesReceived("Bye Donald%20Duck") @AT@ 1309 @LENGTH@ 72
------UPD SimpleName@@MethodName:expectedBodiesReceived:["Bye Donald+Duck"] @TO@ MethodName:expectedBodiesReceived:["Bye Donald%20Duck"] @AT@ 1340 @LENGTH@ 41
---------UPD StringLiteral@@"Bye Donald+Duck" @TO@ "Bye Donald%20Duck" @AT@ 1363 @LENGTH@ 17


INS VariableDeclarationStatement@@int bufferLength=buffer.length; @TO@ MethodDeclaration@@private, static, void, MethodName:checkBufferArgs, byte[] buffer, int offset, int length,  @AT@ 11280 @LENGTH@ 33
---INS PrimitiveType@@int @TO@ VariableDeclarationStatement@@int bufferLength=buffer.length; @AT@ 11280 @LENGTH@ 3
---INS VariableDeclarationFragment@@bufferLength=buffer.length @TO@ VariableDeclarationStatement@@int bufferLength=buffer.length; @AT@ 11284 @LENGTH@ 28
------INS SimpleName@@bufferLength @TO@ VariableDeclarationFragment@@bufferLength=buffer.length @AT@ 11284 @LENGTH@ 12
------INS QualifiedName@@buffer.length @TO@ VariableDeclarationFragment@@bufferLength=buffer.length @AT@ 11299 @LENGTH@ 13
---------INS SimpleName@@buffer @TO@ QualifiedName@@buffer.length @AT@ 11299 @LENGTH@ 6
---------INS SimpleName@@length @TO@ QualifiedName@@buffer.length @AT@ 11306 @LENGTH@ 6


INS MethodDeclaration@@default, void, MethodName:onFailed, Exception exception,  @TO@ TypeDeclaration@@[@FunctionalInterface, public]ConnectionListener,  @AT@ 1521 @LENGTH@ 47
---INS Modifier@@default @TO@ MethodDeclaration@@default, void, MethodName:onFailed, Exception exception,  @AT@ 1521 @LENGTH@ 7
---INS PrimitiveType@@void @TO@ MethodDeclaration@@default, void, MethodName:onFailed, Exception exception,  @AT@ 1529 @LENGTH@ 4
---INS SimpleName@@MethodName:onFailed @TO@ MethodDeclaration@@default, void, MethodName:onFailed, Exception exception,  @AT@ 1534 @LENGTH@ 8
---INS SingleVariableDeclaration@@Exception exception @TO@ MethodDeclaration@@default, void, MethodName:onFailed, Exception exception,  @AT@ 1543 @LENGTH@ 19
------INS SimpleType@@Exception @TO@ SingleVariableDeclaration@@Exception exception @AT@ 1543 @LENGTH@ 9
------INS SimpleName@@exception @TO@ SingleVariableDeclaration@@Exception exception @AT@ 1553 @LENGTH@ 9


MOV FieldDeclaration@@private, static, final, Logger, [LOG=LoggerFactory.getLogger(DefaultCamelContext.class)] @TO@ TypeDeclaration@@[public]DefaultCamelContext, SimpleCamelContext[ModelCamelContext] @AT@ 3813 @LENGTH@ 85


UPD ReturnStatement@@MethodInvocation:optionalErrorCode.flatMap(code -> ERROR_CODE_MAPPINGS.getOrDefault(code,Optional.empty())).orElse(defaultTranslationProvider).apply(msg,e.getCause()) @TO@ MethodInvocation:optionalErrorCode.flatMap(code -> ERROR_CODE_MAPPINGS.getOrDefault(code,Optional.empty())).orElse(defaultTranslationProvider).apply(msg,e) @AT@ 5112 @LENGTH@ 164
---UPD MethodInvocation@@optionalErrorCode.flatMap(code -> ERROR_CODE_MAPPINGS.getOrDefault(code,Optional.empty())).orElse(defaultTranslationProvider).apply(msg,e.getCause()) @TO@ optionalErrorCode.flatMap(code -> ERROR_CODE_MAPPINGS.getOrDefault(code,Optional.empty())).orElse(defaultTranslationProvider).apply(msg,e) @AT@ 5119 @LENGTH@ 156
------UPD SimpleName@@MethodName:apply:[msg, e.getCause()] @TO@ MethodName:apply:[msg, e] @AT@ 5251 @LENGTH@ 24
---------DEL MethodInvocation@@e.getCause() @AT@ 5262 @LENGTH@ 12
------------DEL SimpleName@@Name:e @AT@ 5262 @LENGTH@ 1
------------DEL SimpleName@@MethodName:getCause:[] @AT@ 5264 @LENGTH@ 10
---------INS SimpleName@@e @TO@ SimpleName@@MethodName:apply:[msg, e.getCause()] @AT@ 5262 @LENGTH@ 1


UPD ExpressionStatement@@Assignment:this.group=new ServiceSupplierDependency<>(ClusteringCacheRequirement.GROUP.getServiceName(support,containerName,this.factoryConfiguration.getServerName())) @TO@ Assignment:this.group=new ServiceSupplierDependency<>(ClusteringRequirement.GROUP.getServiceName(support,containerName)) @AT@ 6413 @LENGTH@ 161
---UPD Assignment@@this.group=new ServiceSupplierDependency<>(ClusteringCacheRequirement.GROUP.getServiceName(support,containerName,this.factoryConfiguration.getServerName())) @TO@ this.group=new ServiceSupplierDependency<>(ClusteringRequirement.GROUP.getServiceName(support,containerName)) @AT@ 6413 @LENGTH@ 160
------UPD ClassInstanceCreation@@ServiceSupplierDependency<>[ClusteringCacheRequirement.GROUP.getServiceName(support,containerName,this.factoryConfiguration.getServerName())] @TO@ ServiceSupplierDependency<>[ClusteringRequirement.GROUP.getServiceName(support,containerName)] @AT@ 6426 @LENGTH@ 147
---------UPD MethodInvocation@@ClusteringCacheRequirement.GROUP.getServiceName(support,containerName,this.factoryConfiguration.getServerName()) @TO@ ClusteringRequirement.GROUP.getServiceName(support,containerName) @AT@ 6458 @LENGTH@ 114
------------UPD QualifiedName@@Name:ClusteringCacheRequirement.GROUP @TO@ Name:ClusteringRequirement.GROUP @AT@ 6458 @LENGTH@ 32
------------UPD SimpleName@@MethodName:getServiceName:[support, containerName, this.factoryConfiguration.getServerName()] @TO@ MethodName:getServiceName:[support, containerName] @AT@ 6491 @LENGTH@ 81
---------------DEL MethodInvocation@@this.factoryConfiguration.getServerName() @AT@ 6530 @LENGTH@ 41
------------------DEL FieldAccess@@this.factoryConfiguration @AT@ 6530 @LENGTH@ 25
---------------------DEL ThisExpression@@this @AT@ 6530 @LENGTH@ 4
---------------------DEL SimpleName@@factoryConfiguration @AT@ 6535 @LENGTH@ 20
------------------DEL SimpleName@@MethodName:getServerName:[] @AT@ 6556 @LENGTH@ 15


INS MethodDeclaration@@public, boolean, MethodName:isPredicate,  @TO@ TypeDeclaration@@[public]CSimpleScript1, CSimpleSupport @AT@ 1529 @LENGTH@ 57
---INS Modifier@@public @TO@ MethodDeclaration@@public, boolean, MethodName:isPredicate,  @AT@ 1529 @LENGTH@ 6
---INS PrimitiveType@@boolean @TO@ MethodDeclaration@@public, boolean, MethodName:isPredicate,  @AT@ 1536 @LENGTH@ 7
---INS SimpleName@@MethodName:isPredicate @TO@ MethodDeclaration@@public, boolean, MethodName:isPredicate,  @AT@ 1544 @LENGTH@ 11
---INS ReturnStatement@@BooleanLiteral:true @TO@ MethodDeclaration@@public, boolean, MethodName:isPredicate,  @AT@ 1568 @LENGTH@ 12
------INS BooleanLiteral@@true @TO@ ReturnStatement@@BooleanLiteral:true @AT@ 1575 @LENGTH@ 4


INS MethodDeclaration@@public, List<AltHobby>, MethodName:getMemberOf,  @TO@ TypeDeclaration@@[@Node, public]AltHobby,  @AT@ 1394 @LENGTH@ 59
---INS Modifier@@public @TO@ MethodDeclaration@@public, List<AltHobby>, MethodName:getMemberOf,  @AT@ 1394 @LENGTH@ 6
---INS ParameterizedType@@List<AltHobby> @TO@ MethodDeclaration@@public, List<AltHobby>, MethodName:getMemberOf,  @AT@ 1401 @LENGTH@ 14
------INS SimpleType@@List @TO@ ParameterizedType@@List<AltHobby> @AT@ 1401 @LENGTH@ 4
------INS SimpleType@@AltHobby @TO@ ParameterizedType@@List<AltHobby> @AT@ 1406 @LENGTH@ 8
---INS SimpleName@@MethodName:getMemberOf @TO@ MethodDeclaration@@public, List<AltHobby>, MethodName:getMemberOf,  @AT@ 1416 @LENGTH@ 11
---INS ReturnStatement@@SimpleName:memberOf @TO@ MethodDeclaration@@public, List<AltHobby>, MethodName:getMemberOf,  @AT@ 1434 @LENGTH@ 16
------INS SimpleName@@memberOf @TO@ ReturnStatement@@SimpleName:memberOf @AT@ 1441 @LENGTH@ 8


INS MethodDeclaration@@void, MethodName:lPosNonExisting,  @TO@ TypeDeclaration@@[@EnabledOnRedisClusterAvailable, @ExtendWith(JedisExtension.class), @TestInstance(TestInstance.Lifecycle.PER_CLASS), public]JedisClusterConnectionTests, [ClusterConnectionTests] @AT@ 89012 @LENGTH@ 253
---INS PrimitiveType@@void @TO@ MethodDeclaration@@void, MethodName:lPosNonExisting,  @AT@ 89007 @LENGTH@ 4
---INS SimpleName@@MethodName:lPosNonExisting @TO@ MethodDeclaration@@void, MethodName:lPosNonExisting,  @AT@ 89012 @LENGTH@ 15
---INS ExpressionStatement@@MethodInvocation:nativeConnection.rpush(KEY_1,"a","b","c","1","2","3","c","c") @TO@ MethodDeclaration@@void, MethodName:lPosNonExisting,  @AT@ 89035 @LENGTH@ 70
------INS MethodInvocation@@nativeConnection.rpush(KEY_1,"a","b","c","1","2","3","c","c") @TO@ ExpressionStatement@@MethodInvocation:nativeConnection.rpush(KEY_1,"a","b","c","1","2","3","c","c") @AT@ 89035 @LENGTH@ 69
---------INS SimpleName@@Name:nativeConnection @TO@ MethodInvocation@@nativeConnection.rpush(KEY_1,"a","b","c","1","2","3","c","c") @AT@ 89035 @LENGTH@ 16
---------INS SimpleName@@MethodName:rpush:[KEY_1, "a", "b", "c", "1", "2", "3", "c", "c"] @TO@ MethodInvocation@@nativeConnection.rpush(KEY_1,"a","b","c","1","2","3","c","c") @AT@ 89052 @LENGTH@ 52
------------INS SimpleName@@KEY_1 @TO@ SimpleName@@MethodName:rpush:[KEY_1, "a", "b", "c", "1", "2", "3", "c", "c"] @AT@ 89058 @LENGTH@ 5
------------INS StringLiteral@@"a" @TO@ SimpleName@@MethodName:rpush:[KEY_1, "a", "b", "c", "1", "2", "3", "c", "c"] @AT@ 89065 @LENGTH@ 3
------------INS StringLiteral@@"b" @TO@ SimpleName@@MethodName:rpush:[KEY_1, "a", "b", "c", "1", "2", "3", "c", "c"] @AT@ 89070 @LENGTH@ 3
------------INS StringLiteral@@"c" @TO@ SimpleName@@MethodName:rpush:[KEY_1, "a", "b", "c", "1", "2", "3", "c", "c"] @AT@ 89075 @LENGTH@ 3
------------INS StringLiteral@@"1" @TO@ SimpleName@@MethodName:rpush:[KEY_1, "a", "b", "c", "1", "2", "3", "c", "c"] @AT@ 89080 @LENGTH@ 3
------------INS StringLiteral@@"2" @TO@ SimpleName@@MethodName:rpush:[KEY_1, "a", "b", "c", "1", "2", "3", "c", "c"] @AT@ 89085 @LENGTH@ 3
------------INS StringLiteral@@"3" @TO@ SimpleName@@MethodName:rpush:[KEY_1, "a", "b", "c", "1", "2", "3", "c", "c"] @AT@ 89090 @LENGTH@ 3
------------INS StringLiteral@@"c" @TO@ SimpleName@@MethodName:rpush:[KEY_1, "a", "b", "c", "1", "2", "3", "c", "c"] @AT@ 89095 @LENGTH@ 3
------------INS StringLiteral@@"c" @TO@ SimpleName@@MethodName:rpush:[KEY_1, "a", "b", "c", "1", "2", "3", "c", "c"] @AT@ 89100 @LENGTH@ 3
---INS VariableDeclarationStatement@@List<Long> result=clusterConnection.listCommands().lPos(KEY_1_BYTES,"x".getBytes(StandardCharsets.UTF_8),null,null); @TO@ MethodDeclaration@@void, MethodName:lPosNonExisting,  @AT@ 89108 @LENGTH@ 121
------INS ParameterizedType@@List<Long> @TO@ VariableDeclarationStatement@@List<Long> result=clusterConnection.listCommands().lPos(KEY_1_BYTES,"x".getBytes(StandardCharsets.UTF_8),null,null); @AT@ 89108 @LENGTH@ 10
---------INS SimpleType@@List @TO@ ParameterizedType@@List<Long> @AT@ 89108 @LENGTH@ 4
---------INS SimpleType@@Long @TO@ ParameterizedType@@List<Long> @AT@ 89113 @LENGTH@ 4
------INS VariableDeclarationFragment@@result=clusterConnection.listCommands().lPos(KEY_1_BYTES,"x".getBytes(StandardCharsets.UTF_8),null,null) @TO@ VariableDeclarationStatement@@List<Long> result=clusterConnection.listCommands().lPos(KEY_1_BYTES,"x".getBytes(StandardCharsets.UTF_8),null,null); @AT@ 89119 @LENGTH@ 109
---------INS SimpleName@@result @TO@ VariableDeclarationFragment@@result=clusterConnection.listCommands().lPos(KEY_1_BYTES,"x".getBytes(StandardCharsets.UTF_8),null,null) @AT@ 89119 @LENGTH@ 6
---------INS MethodInvocation@@clusterConnection.listCommands().lPos(KEY_1_BYTES,"x".getBytes(StandardCharsets.UTF_8),null,null) @TO@ VariableDeclarationFragment@@result=clusterConnection.listCommands().lPos(KEY_1_BYTES,"x".getBytes(StandardCharsets.UTF_8),null,null) @AT@ 89128 @LENGTH@ 100
------------INS MethodInvocation@@MethodName:listCommands:[] @TO@ MethodInvocation@@clusterConnection.listCommands().lPos(KEY_1_BYTES,"x".getBytes(StandardCharsets.UTF_8),null,null) @AT@ 89128 @LENGTH@ 32
------------INS SimpleName@@Name:clusterConnection @TO@ MethodInvocation@@clusterConnection.listCommands().lPos(KEY_1_BYTES,"x".getBytes(StandardCharsets.UTF_8),null,null) @AT@ 89128 @LENGTH@ 17
------------INS SimpleName@@MethodName:lPos:[KEY_1_BYTES, "x".getBytes(StandardCharsets.UTF_8), null, null] @TO@ MethodInvocation@@clusterConnection.listCommands().lPos(KEY_1_BYTES,"x".getBytes(StandardCharsets.UTF_8),null,null) @AT@ 89161 @LENGTH@ 67
---------------INS SimpleName@@KEY_1_BYTES @TO@ SimpleName@@MethodName:lPos:[KEY_1_BYTES, "x".getBytes(StandardCharsets.UTF_8), null, null] @AT@ 89166 @LENGTH@ 11
---------------INS MethodInvocation@@"x".getBytes(StandardCharsets.UTF_8) @TO@ SimpleName@@MethodName:lPos:[KEY_1_BYTES, "x".getBytes(StandardCharsets.UTF_8), null, null] @AT@ 89179 @LENGTH@ 36
------------------INS StringLiteral@@"x" @TO@ MethodInvocation@@"x".getBytes(StandardCharsets.UTF_8) @AT@ 89179 @LENGTH@ 3
------------------INS SimpleName@@MethodName:getBytes:[StandardCharsets.UTF_8] @TO@ MethodInvocation@@"x".getBytes(StandardCharsets.UTF_8) @AT@ 89183 @LENGTH@ 32
---------------------INS QualifiedName@@StandardCharsets.UTF_8 @TO@ SimpleName@@MethodName:getBytes:[StandardCharsets.UTF_8] @AT@ 89192 @LENGTH@ 22
------------------------INS SimpleName@@StandardCharsets @TO@ QualifiedName@@StandardCharsets.UTF_8 @AT@ 89192 @LENGTH@ 16
------------------------INS SimpleName@@UTF_8 @TO@ QualifiedName@@StandardCharsets.UTF_8 @AT@ 89209 @LENGTH@ 5
---------------INS NullLiteral@@null @TO@ SimpleName@@MethodName:lPos:[KEY_1_BYTES, "x".getBytes(StandardCharsets.UTF_8), null, null] @AT@ 89217 @LENGTH@ 4
---------------INS NullLiteral@@null @TO@ SimpleName@@MethodName:lPos:[KEY_1_BYTES, "x".getBytes(StandardCharsets.UTF_8), null, null] @AT@ 89223 @LENGTH@ 4
---INS ExpressionStatement@@MethodInvocation:assertThat(result).isEmpty() @TO@ MethodDeclaration@@void, MethodName:lPosNonExisting,  @AT@ 89233 @LENGTH@ 29
------INS MethodInvocation@@assertThat(result).isEmpty() @TO@ ExpressionStatement@@MethodInvocation:assertThat(result).isEmpty() @AT@ 89233 @LENGTH@ 28
---------INS MethodInvocation@@MethodName:assertThat:[result] @TO@ MethodInvocation@@assertThat(result).isEmpty() @AT@ 89233 @LENGTH@ 18
------------INS SimpleName@@result @TO@ MethodInvocation@@MethodName:assertThat:[result] @AT@ 89244 @LENGTH@ 6
---------INS SimpleName@@MethodName:isEmpty:[] @TO@ MethodInvocation@@assertThat(result).isEmpty() @AT@ 89252 @LENGTH@ 9


INS ExpressionStatement@@MethodInvocation:SecurityContextHolder.clearContext() @TO@ MethodDeclaration@@public, void, MethodName:setUp,  @AT@ 2127 @LENGTH@ 37
---INS MethodInvocation@@SecurityContextHolder.clearContext() @TO@ ExpressionStatement@@MethodInvocation:SecurityContextHolder.clearContext() @AT@ 2127 @LENGTH@ 36
------INS SimpleName@@Name:SecurityContextHolder @TO@ MethodInvocation@@SecurityContextHolder.clearContext() @AT@ 2127 @LENGTH@ 21
------INS SimpleName@@MethodName:clearContext:[] @TO@ MethodInvocation@@SecurityContextHolder.clearContext() @AT@ 2149 @LENGTH@ 14


INS VariableDeclarationStatement@@String ref=parseString(definition.getRef()); @TO@ MethodDeclaration@@protected, DataFormat, MethodName:doCreateDataFormat,  @AT@ 1380 @LENGTH@ 46
---INS SimpleType@@String @TO@ VariableDeclarationStatement@@String ref=parseString(definition.getRef()); @AT@ 1380 @LENGTH@ 6
---INS VariableDeclarationFragment@@ref=parseString(definition.getRef()) @TO@ VariableDeclarationStatement@@String ref=parseString(definition.getRef()); @AT@ 1387 @LENGTH@ 38
------INS SimpleName@@ref @TO@ VariableDeclarationFragment@@ref=parseString(definition.getRef()) @AT@ 1387 @LENGTH@ 3
------INS MethodInvocation@@parseString(definition.getRef()) @TO@ VariableDeclarationFragment@@ref=parseString(definition.getRef()) @AT@ 1393 @LENGTH@ 32
---------INS SimpleName@@MethodName:parseString:[definition.getRef()] @TO@ MethodInvocation@@parseString(definition.getRef()) @AT@ 1393 @LENGTH@ 32
------------INS MethodInvocation@@definition.getRef() @TO@ SimpleName@@MethodName:parseString:[definition.getRef()] @AT@ 1405 @LENGTH@ 19
---------------INS SimpleName@@Name:definition @TO@ MethodInvocation@@definition.getRef() @AT@ 1405 @LENGTH@ 10
---------------INS SimpleName@@MethodName:getRef:[] @TO@ MethodInvocation@@definition.getRef() @AT@ 1416 @LENGTH@ 8


UPD ExpressionStatement@@MethodInvocation:context.getStreamCachingStrategy().setSpoolDirectory(testDirectory().toString()) @TO@ MethodInvocation:context.getStreamCachingStrategy().setSpoolDirectory(testDirectory().toFile()) @AT@ 1691 @LENGTH@ 81
---UPD MethodInvocation@@context.getStreamCachingStrategy().setSpoolDirectory(testDirectory().toString()) @TO@ context.getStreamCachingStrategy().setSpoolDirectory(testDirectory().toFile()) @AT@ 1691 @LENGTH@ 80
------UPD SimpleName@@MethodName:setSpoolDirectory:[testDirectory().toString()] @TO@ MethodName:setSpoolDirectory:[testDirectory().toFile()] @AT@ 1726 @LENGTH@ 45
---------UPD MethodInvocation@@testDirectory().toString() @TO@ testDirectory().toFile() @AT@ 1744 @LENGTH@ 26
------------UPD SimpleName@@MethodName:toString:[] @TO@ MethodName:toFile:[] @AT@ 1760 @LENGTH@ 10


UPD FieldDeclaration@@private, KafkaIdempotentRepository, [kafkaIdempotentRepository=new KafkaIdempotentRepository("TEST_IDEM",getBootstrapServers())] @TO@ private, KafkaIdempotentRepository, [kafkaIdempotentRepository=new KafkaIdempotentRepository("TEST_NON_EAGER_" + UUID.randomUUID().toString(),getBootstrapServers())] @AT@ 1479 @LENGTH@ 140
---UPD VariableDeclarationFragment@@kafkaIdempotentRepository=new KafkaIdempotentRepository("TEST_IDEM",getBootstrapServers()) @TO@ kafkaIdempotentRepository=new KafkaIdempotentRepository("TEST_NON_EAGER_" + UUID.randomUUID().toString(),getBootstrapServers()) @AT@ 1513 @LENGTH@ 105
------UPD ClassInstanceCreation@@KafkaIdempotentRepository["TEST_IDEM", getBootstrapServers()] @TO@ KafkaIdempotentRepository["TEST_NON_EAGER_" + UUID.randomUUID().toString(), getBootstrapServers()] @AT@ 1553 @LENGTH@ 65
---------DEL StringLiteral@@"TEST_IDEM" @AT@ 1583 @LENGTH@ 11
---------INS InfixExpression@@"TEST_NON_EAGER_" + UUID.randomUUID().toString() @TO@ ClassInstanceCreation@@KafkaIdempotentRepository["TEST_IDEM", getBootstrapServers()] @AT@ 1733 @LENGTH@ 48
------------INS StringLiteral@@"TEST_NON_EAGER_" @TO@ InfixExpression@@"TEST_NON_EAGER_" + UUID.randomUUID().toString() @AT@ 1733 @LENGTH@ 17
------------INS Operator@@+ @TO@ InfixExpression@@"TEST_NON_EAGER_" + UUID.randomUUID().toString() @AT@ 1750 @LENGTH@ 1
------------INS MethodInvocation@@UUID.randomUUID().toString() @TO@ InfixExpression@@"TEST_NON_EAGER_" + UUID.randomUUID().toString() @AT@ 1753 @LENGTH@ 28
---------------INS MethodInvocation@@MethodName:randomUUID:[] @TO@ MethodInvocation@@UUID.randomUUID().toString() @AT@ 1753 @LENGTH@ 17
---------------INS SimpleName@@Name:UUID @TO@ MethodInvocation@@UUID.randomUUID().toString() @AT@ 1753 @LENGTH@ 4
---------------INS SimpleName@@MethodName:toString:[] @TO@ MethodInvocation@@UUID.randomUUID().toString() @AT@ 1771 @LENGTH@ 10


INS FieldDeclaration@@private, final, Codec<Document>, [codec=CodecRegistryHelper.createRegistry(MongoClientSettings.getDefaultCodecRegistry(),UuidRepresentation.JAVA_LEGACY).get(Document.class)] @TO@ EnumDeclaration@@[@ReadingConverter]DocumentToStringConverter, [Converter<Document,String>] @AT@ 7087 @LENGTH@ 182
---INS Modifier@@private @TO@ FieldDeclaration@@private, final, Codec<Document>, [codec=CodecRegistryHelper.createRegistry(MongoClientSettings.getDefaultCodecRegistry(),UuidRepresentation.JAVA_LEGACY).get(Document.class)] @AT@ 7087 @LENGTH@ 7
---INS Modifier@@final @TO@ FieldDeclaration@@private, final, Codec<Document>, [codec=CodecRegistryHelper.createRegistry(MongoClientSettings.getDefaultCodecRegistry(),UuidRepresentation.JAVA_LEGACY).get(Document.class)] @AT@ 7095 @LENGTH@ 5
---INS ParameterizedType@@Codec<Document> @TO@ FieldDeclaration@@private, final, Codec<Document>, [codec=CodecRegistryHelper.createRegistry(MongoClientSettings.getDefaultCodecRegistry(),UuidRepresentation.JAVA_LEGACY).get(Document.class)] @AT@ 7101 @LENGTH@ 15
------INS SimpleType@@Codec @TO@ ParameterizedType@@Codec<Document> @AT@ 7101 @LENGTH@ 5
------INS SimpleType@@Document @TO@ ParameterizedType@@Codec<Document> @AT@ 7107 @LENGTH@ 8
---INS VariableDeclarationFragment@@codec=CodecRegistryHelper.createRegistry(MongoClientSettings.getDefaultCodecRegistry(),UuidRepresentation.JAVA_LEGACY).get(Document.class) @TO@ FieldDeclaration@@private, final, Codec<Document>, [codec=CodecRegistryHelper.createRegistry(MongoClientSettings.getDefaultCodecRegistry(),UuidRepresentation.JAVA_LEGACY).get(Document.class)] @AT@ 7117 @LENGTH@ 151
------INS SimpleName@@codec @TO@ VariableDeclarationFragment@@codec=CodecRegistryHelper.createRegistry(MongoClientSettings.getDefaultCodecRegistry(),UuidRepresentation.JAVA_LEGACY).get(Document.class) @AT@ 7117 @LENGTH@ 5
------INS MethodInvocation@@CodecRegistryHelper.createRegistry(MongoClientSettings.getDefaultCodecRegistry(),UuidRepresentation.JAVA_LEGACY).get(Document.class) @TO@ VariableDeclarationFragment@@codec=CodecRegistryHelper.createRegistry(MongoClientSettings.getDefaultCodecRegistry(),UuidRepresentation.JAVA_LEGACY).get(Document.class) @AT@ 7125 @LENGTH@ 143
---------INS MethodInvocation@@MethodName:createRegistry:[MongoClientSettings.getDefaultCodecRegistry(), UuidRepresentation.JAVA_LEGACY] @TO@ MethodInvocation@@CodecRegistryHelper.createRegistry(MongoClientSettings.getDefaultCodecRegistry(),UuidRepresentation.JAVA_LEGACY).get(Document.class) @AT@ 7125 @LENGTH@ 118
------------INS MethodInvocation@@MongoClientSettings.getDefaultCodecRegistry() @TO@ MethodInvocation@@MethodName:createRegistry:[MongoClientSettings.getDefaultCodecRegistry(), UuidRepresentation.JAVA_LEGACY] @AT@ 7165 @LENGTH@ 45
---------------INS SimpleName@@Name:MongoClientSettings @TO@ MethodInvocation@@MongoClientSettings.getDefaultCodecRegistry() @AT@ 7165 @LENGTH@ 19
---------------INS SimpleName@@MethodName:getDefaultCodecRegistry:[] @TO@ MethodInvocation@@MongoClientSettings.getDefaultCodecRegistry() @AT@ 7185 @LENGTH@ 25
------------INS QualifiedName@@UuidRepresentation.JAVA_LEGACY @TO@ MethodInvocation@@MethodName:createRegistry:[MongoClientSettings.getDefaultCodecRegistry(), UuidRepresentation.JAVA_LEGACY] @AT@ 7212 @LENGTH@ 30
---------------INS SimpleName@@UuidRepresentation @TO@ QualifiedName@@UuidRepresentation.JAVA_LEGACY @AT@ 7212 @LENGTH@ 18
---------------INS SimpleName@@JAVA_LEGACY @TO@ QualifiedName@@UuidRepresentation.JAVA_LEGACY @AT@ 7231 @LENGTH@ 11
---------INS SimpleName@@Name:CodecRegistryHelper @TO@ MethodInvocation@@CodecRegistryHelper.createRegistry(MongoClientSettings.getDefaultCodecRegistry(),UuidRepresentation.JAVA_LEGACY).get(Document.class) @AT@ 7125 @LENGTH@ 19
---------INS SimpleName@@MethodName:get:[Document.class] @TO@ MethodInvocation@@CodecRegistryHelper.createRegistry(MongoClientSettings.getDefaultCodecRegistry(),UuidRepresentation.JAVA_LEGACY).get(Document.class) @AT@ 7249 @LENGTH@ 19
------------INS TypeLiteral@@Document.class @TO@ SimpleName@@MethodName:get:[Document.class] @AT@ 7253 @LENGTH@ 14


UPD IfStatement@@if (nee.isFailed() || nee.isRollbackOnly() || nee.isRollbackOnlyLast()|| (nee.isErrorHandlerHandledSet() && nee.isErrorHandlerHandled())) {  if (newExchange.getException() != null) {    answer.setException(newExchange.getException());  }  if (newExchange.getProperty(ExchangePropertyKey.EXCEPTION_CAUGHT) != null) {    answer.setProperty(ExchangePropertyKey.EXCEPTION_CAUGHT,newExchange.getProperty(ExchangePropertyKey.EXCEPTION_CAUGHT));  }  if (newExchange.getProperty(ExchangePropertyKey.FAILURE_ENDPOINT) != null) {    answer.setProperty(ExchangePropertyKey.FAILURE_ENDPOINT,newExchange.getProperty(ExchangePropertyKey.FAILURE_ENDPOINT));  }  if (newExchange.getProperty(ExchangePropertyKey.FAILURE_ROUTE_ID) != null) {    answer.setProperty(ExchangePropertyKey.FAILURE_ROUTE_ID,newExchange.getProperty(ExchangePropertyKey.FAILURE_ROUTE_ID));  }  if (newExchange.adapt(ExtendedExchange.class).getErrorHandlerHandled() != null) {    answer.adapt(ExtendedExchange.class).setErrorHandlerHandled(newExchange.adapt(ExtendedExchange.class).getErrorHandlerHandled());  }  if (newExchange.getProperty(ExchangePropertyKey.FAILURE_HANDLED) != null) {    answer.setProperty(ExchangePropertyKey.FAILURE_HANDLED,newExchange.getProperty(ExchangePropertyKey.FAILURE_HANDLED));  }} @TO@ if (nee.isFailed() || nee.isRollbackOnly() || nee.isRollbackOnlyLast()|| nee.isErrorHandlerHandledSet() && nee.isErrorHandlerHandled()) {  if (newExchange.getException() != null) {    answer.setException(newExchange.getException());  }  if (newExchange.getProperty(ExchangePropertyKey.EXCEPTION_CAUGHT) != null) {    answer.setProperty(ExchangePropertyKey.EXCEPTION_CAUGHT,newExchange.getProperty(ExchangePropertyKey.EXCEPTION_CAUGHT));  }  if (newExchange.getProperty(ExchangePropertyKey.FAILURE_ENDPOINT) != null) {    answer.setProperty(ExchangePropertyKey.FAILURE_ENDPOINT,newExchange.getProperty(ExchangePropertyKey.FAILURE_ENDPOINT));  }  if (newExchange.getProperty(ExchangePropertyKey.FAILURE_ROUTE_ID) != null) {    answer.setProperty(ExchangePropertyKey.FAILURE_ROUTE_ID,newExchange.getProperty(ExchangePropertyKey.FAILURE_ROUTE_ID));  }  if (newExchange.adapt(ExtendedExchange.class).getErrorHandlerHandled() != null) {    answer.adapt(ExtendedExchange.class).setErrorHandlerHandled(newExchange.adapt(ExtendedExchange.class).getErrorHandlerHandled());  }  if (newExchange.getProperty(ExchangePropertyKey.FAILURE_HANDLED) != null) {    answer.setProperty(ExchangePropertyKey.FAILURE_HANDLED,newExchange.getProperty(ExchangePropertyKey.FAILURE_HANDLED));  }} @AT@ 4072 @LENGTH@ 1630
---UPD InfixExpression@@nee.isFailed() || nee.isRollbackOnly() || nee.isRollbackOnlyLast()|| (nee.isErrorHandlerHandledSet() && nee.isErrorHandlerHandled()) @TO@ nee.isFailed() || nee.isRollbackOnly() || nee.isRollbackOnlyLast()|| nee.isErrorHandlerHandledSet() && nee.isErrorHandlerHandled() @AT@ 4076 @LENGTH@ 149
------DEL ParenthesizedExpression@@(nee.isErrorHandlerHandledSet() && nee.isErrorHandlerHandled()) @AT@ 4162 @LENGTH@ 63
------MOV InfixExpression@@nee.isErrorHandlerHandledSet() && nee.isErrorHandlerHandled() @TO@ InfixExpression@@nee.isFailed() || nee.isRollbackOnly() || nee.isRollbackOnlyLast()|| (nee.isErrorHandlerHandledSet() && nee.isErrorHandlerHandled()) @AT@ 4163 @LENGTH@ 61


UPD ExpressionStatement@@MethodInvocation:assertThat(dataAccessException.getMessage()).isEqualTo("Something went wrong.; Error code 'Neo.ClientError.Statement.EntityNotFound'") @TO@ MethodInvocation:assertThat(dataAccessException.getMessage()).startsWith("Something went wrong.; Error code 'Neo.ClientError.Statement.EntityNotFound'") @AT@ 2073 @LENGTH@ 140
---UPD MethodInvocation@@assertThat(dataAccessException.getMessage()).isEqualTo("Something went wrong.; Error code 'Neo.ClientError.Statement.EntityNotFound'") @TO@ assertThat(dataAccessException.getMessage()).startsWith("Something went wrong.; Error code 'Neo.ClientError.Statement.EntityNotFound'") @AT@ 2073 @LENGTH@ 139
------UPD SimpleName@@MethodName:isEqualTo:["Something went wrong.; Error code 'Neo.ClientError.Statement.EntityNotFound'"] @TO@ MethodName:startsWith:["Something went wrong.; Error code 'Neo.ClientError.Statement.EntityNotFound'"] @AT@ 2123 @LENGTH@ 89


UPD EnhancedForStatement@@for (JobExecution execution : executions) {  if (execution.isRunning() || execution.isStopping()) {    throw new JobExecutionAlreadyRunningException("A job execution for this job is already running: " + jobInstance);  }  BatchStatus status=execution.getStatus();  if (status == BatchStatus.UNKNOWN) {    throw new JobRestartException("Cannot restart job from UNKNOWN status. " + "The last execution ended with a failure that could not be rolled back, " + "so it may be dangerous to proceed. Manual intervention is probably necessary.");  }  if (execution.getJobParameters().getParameters().size() > 0 && (status == BatchStatus.COMPLETED || status == BatchStatus.ABANDONED)) {    throw new JobInstanceAlreadyCompleteException("A job instance already exists and is complete for parameters=" + jobParameters + ".  If you want to run this job again, change the parameters.");  }} @TO@ for (JobExecution execution : executions) {  if (execution.isRunning() || execution.isStopping()) {    throw new JobExecutionAlreadyRunningException("A job execution for this job is already running: " + jobInstance);  }  BatchStatus status=execution.getStatus();  if (status == BatchStatus.UNKNOWN) {    throw new JobRestartException("Cannot restart job from UNKNOWN status. " + "The last execution ended with a failure that could not be rolled back, " + "so it may be dangerous to proceed. Manual intervention is probably necessary.");  }  Collection<JobParameter> allJobParameters=execution.getJobParameters().getParameters().values();  long identifyingJobParametersCount=allJobParameters.stream().filter(JobParameter::isIdentifying).count();  if (identifyingJobParametersCount > 0 && (status == BatchStatus.COMPLETED || status == BatchStatus.ABANDONED)) {    throw new JobInstanceAlreadyCompleteException("A job instance already exists and is complete for parameters=" + jobParameters + ".  If you want to run this job again, change the parameters.");  }} @AT@ 4327 @LENGTH@ 944
---UPD IfStatement@@if (execution.getJobParameters().getParameters().size() > 0 && (status == BatchStatus.COMPLETED || status == BatchStatus.ABANDONED)) {  throw new JobInstanceAlreadyCompleteException("A job instance already exists and is complete for parameters=" + jobParameters + ".  If you want to run this job again, change the parameters.");} @TO@ if (identifyingJobParametersCount > 0 && (status == BatchStatus.COMPLETED || status == BatchStatus.ABANDONED)) {  throw new JobInstanceAlreadyCompleteException("A job instance already exists and is complete for parameters=" + jobParameters + ".  If you want to run this job again, change the parameters.");} @AT@ 4913 @LENGTH@ 353
------UPD InfixExpression@@execution.getJobParameters().getParameters().size() > 0 && (status == BatchStatus.COMPLETED || status == BatchStatus.ABANDONED) @TO@ identifyingJobParametersCount > 0 && (status == BatchStatus.COMPLETED || status == BatchStatus.ABANDONED) @AT@ 4917 @LENGTH@ 127
---------UPD InfixExpression@@execution.getJobParameters().getParameters().size() > 0 @TO@ identifyingJobParametersCount > 0 @AT@ 4917 @LENGTH@ 55
------------DEL MethodInvocation@@execution.getJobParameters().getParameters().size() @AT@ 4917 @LENGTH@ 51
---------------DEL MethodInvocation@@MethodName:getParameters:[] @AT@ 4917 @LENGTH@ 44
---------------DEL MethodInvocation@@MethodName:getJobParameters:[] @AT@ 4917 @LENGTH@ 28
---------------DEL SimpleName@@Name:execution @AT@ 4917 @LENGTH@ 9
---------------DEL SimpleName@@MethodName:size:[] @AT@ 4962 @LENGTH@ 6
------------INS SimpleName@@identifyingJobParametersCount @TO@ InfixExpression@@execution.getJobParameters().getParameters().size() > 0 @AT@ 5184 @LENGTH@ 29
---INS VariableDeclarationStatement@@Collection<JobParameter> allJobParameters=execution.getJobParameters().getParameters().values(); @TO@ EnhancedForStatement@@for (JobExecution execution : executions) {  if (execution.isRunning() || execution.isStopping()) {    throw new JobExecutionAlreadyRunningException("A job execution for this job is already running: " + jobInstance);  }  BatchStatus status=execution.getStatus();  if (status == BatchStatus.UNKNOWN) {    throw new JobRestartException("Cannot restart job from UNKNOWN status. " + "The last execution ended with a failure that could not be rolled back, " + "so it may be dangerous to proceed. Manual intervention is probably necessary.");  }  if (execution.getJobParameters().getParameters().size() > 0 && (status == BatchStatus.COMPLETED || status == BatchStatus.ABANDONED)) {    throw new JobInstanceAlreadyCompleteException("A job instance already exists and is complete for parameters=" + jobParameters + ".  If you want to run this job again, change the parameters.");  }} @AT@ 4965 @LENGTH@ 98
------INS ParameterizedType@@Collection<JobParameter> @TO@ VariableDeclarationStatement@@Collection<JobParameter> allJobParameters=execution.getJobParameters().getParameters().values(); @AT@ 4965 @LENGTH@ 24
---------INS SimpleType@@Collection @TO@ ParameterizedType@@Collection<JobParameter> @AT@ 4965 @LENGTH@ 10
---------INS SimpleType@@JobParameter @TO@ ParameterizedType@@Collection<JobParameter> @AT@ 4976 @LENGTH@ 12
------INS VariableDeclarationFragment@@allJobParameters=execution.getJobParameters().getParameters().values() @TO@ VariableDeclarationStatement@@Collection<JobParameter> allJobParameters=execution.getJobParameters().getParameters().values(); @AT@ 4990 @LENGTH@ 72
---------INS SimpleName@@allJobParameters @TO@ VariableDeclarationFragment@@allJobParameters=execution.getJobParameters().getParameters().values() @AT@ 4990 @LENGTH@ 16
---------INS MethodInvocation@@execution.getJobParameters().getParameters().values() @TO@ VariableDeclarationFragment@@allJobParameters=execution.getJobParameters().getParameters().values() @AT@ 5009 @LENGTH@ 53
------------INS MethodInvocation@@MethodName:getParameters:[] @TO@ MethodInvocation@@execution.getJobParameters().getParameters().values() @AT@ 5009 @LENGTH@ 44
------------INS MethodInvocation@@MethodName:getJobParameters:[] @TO@ MethodInvocation@@execution.getJobParameters().getParameters().values() @AT@ 5009 @LENGTH@ 28
------------INS SimpleName@@Name:execution @TO@ MethodInvocation@@execution.getJobParameters().getParameters().values() @AT@ 5009 @LENGTH@ 9
------------INS SimpleName@@MethodName:values:[] @TO@ MethodInvocation@@execution.getJobParameters().getParameters().values() @AT@ 5054 @LENGTH@ 8
---INS VariableDeclarationStatement@@long identifyingJobParametersCount=allJobParameters.stream().filter(JobParameter::isIdentifying).count(); @TO@ EnhancedForStatement@@for (JobExecution execution : executions) {  if (execution.isRunning() || execution.isStopping()) {    throw new JobExecutionAlreadyRunningException("A job execution for this job is already running: " + jobInstance);  }  BatchStatus status=execution.getStatus();  if (status == BatchStatus.UNKNOWN) {    throw new JobRestartException("Cannot restart job from UNKNOWN status. " + "The last execution ended with a failure that could not be rolled back, " + "so it may be dangerous to proceed. Manual intervention is probably necessary.");  }  if (execution.getJobParameters().getParameters().size() > 0 && (status == BatchStatus.COMPLETED || status == BatchStatus.ABANDONED)) {    throw new JobInstanceAlreadyCompleteException("A job instance already exists and is complete for parameters=" + jobParameters + ".  If you want to run this job again, change the parameters.");  }} @AT@ 5068 @LENGTH@ 107
------INS PrimitiveType@@long @TO@ VariableDeclarationStatement@@long identifyingJobParametersCount=allJobParameters.stream().filter(JobParameter::isIdentifying).count(); @AT@ 5068 @LENGTH@ 4
------INS VariableDeclarationFragment@@identifyingJobParametersCount=allJobParameters.stream().filter(JobParameter::isIdentifying).count() @TO@ VariableDeclarationStatement@@long identifyingJobParametersCount=allJobParameters.stream().filter(JobParameter::isIdentifying).count(); @AT@ 5073 @LENGTH@ 101
---------INS SimpleName@@identifyingJobParametersCount @TO@ VariableDeclarationFragment@@identifyingJobParametersCount=allJobParameters.stream().filter(JobParameter::isIdentifying).count() @AT@ 5073 @LENGTH@ 29
---------INS MethodInvocation@@allJobParameters.stream().filter(JobParameter::isIdentifying).count() @TO@ VariableDeclarationFragment@@identifyingJobParametersCount=allJobParameters.stream().filter(JobParameter::isIdentifying).count() @AT@ 5105 @LENGTH@ 69
------------INS MethodInvocation@@MethodName:filter:[JobParameter::isIdentifying] @TO@ MethodInvocation@@allJobParameters.stream().filter(JobParameter::isIdentifying).count() @AT@ 5105 @LENGTH@ 61
------------INS MethodInvocation@@MethodName:stream:[] @TO@ MethodInvocation@@allJobParameters.stream().filter(JobParameter::isIdentifying).count() @AT@ 5105 @LENGTH@ 25
------------INS SimpleName@@Name:allJobParameters @TO@ MethodInvocation@@allJobParameters.stream().filter(JobParameter::isIdentifying).count() @AT@ 5105 @LENGTH@ 16
------------INS SimpleName@@MethodName:count:[] @TO@ MethodInvocation@@allJobParameters.stream().filter(JobParameter::isIdentifying).count() @AT@ 5167 @LENGTH@ 7


UPD IfStatement@@if (routeDefinition.isTemplate() != null && routeDefinition.isTemplate() && routeDefinition.getTemplateParameters() != null) {  Properties prop=new Properties();  prop.putAll(routeDefinition.getTemplateParameters());  pc.setLocalProperties(prop);} @TO@ if (routeDefinition.isTemplate() != null && routeDefinition.isTemplate() && routeDefinition.getTemplateParameters() != null) {  Properties prop=new Properties();  prop.putAll(routeDefinition.getTemplateParameters());  pc.setLocalProperties(prop);  ProcessorDefinitionHelper.resetAllAutoAssignedNodeIds(routeDefinition);} @AT@ 23690 @LENGTH@ 347
---UPD Block@@ThenBody:{  Properties prop=new Properties();  prop.putAll(routeDefinition.getTemplateParameters());  pc.setLocalProperties(prop);} @TO@ ThenBody:{  Properties prop=new Properties();  prop.putAll(routeDefinition.getTemplateParameters());  pc.setLocalProperties(prop);  ProcessorDefinitionHelper.resetAllAutoAssignedNodeIds(routeDefinition);} @AT@ 23839 @LENGTH@ 198
------INS ExpressionStatement@@MethodInvocation:ProcessorDefinitionHelper.resetAllAutoAssignedNodeIds(routeDefinition) @TO@ Block@@ThenBody:{  Properties prop=new Properties();  prop.putAll(routeDefinition.getTemplateParameters());  pc.setLocalProperties(prop);} @AT@ 24196 @LENGTH@ 71
---------INS MethodInvocation@@ProcessorDefinitionHelper.resetAllAutoAssignedNodeIds(routeDefinition) @TO@ ExpressionStatement@@MethodInvocation:ProcessorDefinitionHelper.resetAllAutoAssignedNodeIds(routeDefinition) @AT@ 24196 @LENGTH@ 70
------------INS SimpleName@@Name:ProcessorDefinitionHelper @TO@ MethodInvocation@@ProcessorDefinitionHelper.resetAllAutoAssignedNodeIds(routeDefinition) @AT@ 24196 @LENGTH@ 25
------------INS SimpleName@@MethodName:resetAllAutoAssignedNodeIds:[routeDefinition] @TO@ MethodInvocation@@ProcessorDefinitionHelper.resetAllAutoAssignedNodeIds(routeDefinition) @AT@ 24222 @LENGTH@ 44
---------------INS SimpleName@@routeDefinition @TO@ SimpleName@@MethodName:resetAllAutoAssignedNodeIds:[routeDefinition] @AT@ 24250 @LENGTH@ 15


UPD IfStatement@@if (j == 0 || (j == 1 && ognl.charAt(i - 1) == '?') || (ch != '.' && ch != '?' && ch != ']')) {  sb.append(ch);  if (ch == '[' && parenthesisBracketCnt == 0) {    squareBracketCnt++;  } else   if (ch == '(') {    parenthesisBracketCnt++;  } else   if (ch == ')') {    parenthesisBracketCnt--;  }  j++;} else {  if (ch == '.' && squareBracketCnt == 0 && parenthesisBracketCnt == 0) {    String s=sb.toString();    sb.setLength(0);    if (s.endsWith("?")) {      sb.append("?");      s=s.substring(0,s.length() - 1);    }    methods.add(s);    j=0;  } else   if (ch == ']' && parenthesisBracketCnt == 0) {    sb.append(ch);    String s=sb.toString();    sb.setLength(0);    methods.add(s);    j=0;    squareBracketCnt--;  }  if (ch != ']' || parenthesisBracketCnt > 0) {    sb.append(ch);  }  if (j > 0) {    j++;  }} @TO@ if (j == 0 || j == 1 && ognl.charAt(i - 1) == '?' || ch != '.' && ch != '?' && ch != ']') {  sb.append(ch);  if (ch == '[' && parenthesisBracketCnt == 0) {    squareBracketCnt++;  } else   if (ch == '(') {    parenthesisBracketCnt++;  } else   if (ch == ')') {    parenthesisBracketCnt--;  }  j++;} else {  if (ch == '.' && squareBracketCnt == 0 && parenthesisBracketCnt == 0) {    String s=sb.toString();    sb.setLength(0);    if (s.endsWith("?")) {      sb.append("?");      s=s.substring(0,s.length() - 1);    }    methods.add(s);    j=0;  } else   if (ch == ']' && parenthesisBracketCnt == 0) {    sb.append(ch);    String s=sb.toString();    sb.setLength(0);    methods.add(s);    j=0;    squareBracketCnt--;  }  if (ch != ']' || parenthesisBracketCnt > 0) {    sb.append(ch);  }  if (j > 0) {    j++;  }} @AT@ 7646 @LENGTH@ 2294
---UPD InfixExpression@@j == 0 || (j == 1 && ognl.charAt(i - 1) == '?') || (ch != '.' && ch != '?' && ch != ']') @TO@ j == 0 || j == 1 && ognl.charAt(i - 1) == '?' || ch != '.' && ch != '?' && ch != ']' @AT@ 7650 @LENGTH@ 108
------UPD InfixExpression@@j == 0 || (j == 1 && ognl.charAt(i - 1) == '?') @TO@ j == 0 || j == 1 && ognl.charAt(i - 1) == '?' @AT@ 7650 @LENGTH@ 47
---------DEL ParenthesizedExpression@@(j == 1 && ognl.charAt(i - 1) == '?') @AT@ 7660 @LENGTH@ 37
---------MOV InfixExpression@@j == 1 && ognl.charAt(i - 1) == '?' @TO@ InfixExpression@@j == 0 || (j == 1 && ognl.charAt(i - 1) == '?') @AT@ 7661 @LENGTH@ 35
------DEL ParenthesizedExpression@@(ch != '.' && ch != '?' && ch != ']') @AT@ 7721 @LENGTH@ 37
------MOV InfixExpression@@ch != '.' && ch != '?' && ch != ']' @TO@ InfixExpression@@j == 0 || (j == 1 && ognl.charAt(i - 1) == '?') || (ch != '.' && ch != '?' && ch != ']') @AT@ 7722 @LENGTH@ 35


UPD TryStatement@@try {  if (body == null) {    return null;  } else   if (body instanceof byte[]) {    answer=HttpEntityConverter.toHttpEntity((byte[])body,exchange);  } else   if (body instanceof InputStream) {    answer=HttpEntityConverter.toHttpEntity((InputStream)body,exchange);  } else   if (body instanceof String) {    answer=HttpEntityConverter.toHttpEntity((String)body,exchange);  }} catch (Exception e) {  throw new CamelExchangeException("Error creating RequestEntity from message body",exchange,e);} @TO@ try {  if (body == null) {    return null;  } else   if (body instanceof HttpEntity) {    answer=(HttpEntity)body;  } else   if (body instanceof byte[]) {    answer=HttpEntityConverter.toHttpEntity((byte[])body,exchange);  } else   if (body instanceof InputStream) {    answer=HttpEntityConverter.toHttpEntity((InputStream)body,exchange);  } else   if (body instanceof String) {    answer=HttpEntityConverter.toHttpEntity((String)body,exchange);  }} catch (Exception e) {  throw new CamelExchangeException("Error creating RequestEntity from message body",exchange,e);} @AT@ 28587 @LENGTH@ 744
---INS IfStatement@@if (body == null) {  return null;} else if (body instanceof HttpEntity) {  answer=(HttpEntity)body;} else if (body instanceof byte[]) {  answer=HttpEntityConverter.toHttpEntity((byte[])body,exchange);} else if (body instanceof InputStream) {  answer=HttpEntityConverter.toHttpEntity((InputStream)body,exchange);} else if (body instanceof String) {  answer=HttpEntityConverter.toHttpEntity((String)body,exchange);} @TO@ TryStatement@@try {  if (body == null) {    return null;  } else   if (body instanceof byte[]) {    answer=HttpEntityConverter.toHttpEntity((byte[])body,exchange);  } else   if (body instanceof InputStream) {    answer=HttpEntityConverter.toHttpEntity((InputStream)body,exchange);  } else   if (body instanceof String) {    answer=HttpEntityConverter.toHttpEntity((String)body,exchange);  }} catch (Exception e) {  throw new CamelExchangeException("Error creating RequestEntity from message body",exchange,e);} @AT@ 28605 @LENGTH@ 672
------INS InfixExpression@@body == null @TO@ IfStatement@@if (body == null) {  return null;} else if (body instanceof HttpEntity) {  answer=(HttpEntity)body;} else if (body instanceof byte[]) {  answer=HttpEntityConverter.toHttpEntity((byte[])body,exchange);} else if (body instanceof InputStream) {  answer=HttpEntityConverter.toHttpEntity((InputStream)body,exchange);} else if (body instanceof String) {  answer=HttpEntityConverter.toHttpEntity((String)body,exchange);} @AT@ 28609 @LENGTH@ 12
---------INS SimpleName@@body @TO@ InfixExpression@@body == null @AT@ 28609 @LENGTH@ 4
---------INS Operator@@== @TO@ InfixExpression@@body == null @AT@ 28613 @LENGTH@ 2
---------INS NullLiteral@@null @TO@ InfixExpression@@body == null @AT@ 28617 @LENGTH@ 4
------MOV Block@@ThenBody:{  return null;} @TO@ IfStatement@@if (body == null) {  return null;} else if (body instanceof HttpEntity) {  answer=(HttpEntity)body;} else if (body instanceof byte[]) {  answer=HttpEntityConverter.toHttpEntity((byte[])body,exchange);} else if (body instanceof InputStream) {  answer=HttpEntityConverter.toHttpEntity((InputStream)body,exchange);} else if (body instanceof String) {  answer=HttpEntityConverter.toHttpEntity((String)body,exchange);} @AT@ 28623 @LENGTH@ 148
------INS Block@@ElseBody:if (body instanceof HttpEntity) {  answer=(HttpEntity)body;} else if (body instanceof byte[]) {  answer=HttpEntityConverter.toHttpEntity((byte[])body,exchange);} else if (body instanceof InputStream) {  answer=HttpEntityConverter.toHttpEntity((InputStream)body,exchange);} else if (body instanceof String) {  answer=HttpEntityConverter.toHttpEntity((String)body,exchange);} @TO@ IfStatement@@if (body == null) {  return null;} else if (body instanceof HttpEntity) {  answer=(HttpEntity)body;} else if (body instanceof byte[]) {  answer=HttpEntityConverter.toHttpEntity((byte[])body,exchange);} else if (body instanceof InputStream) {  answer=HttpEntityConverter.toHttpEntity((InputStream)body,exchange);} else if (body instanceof String) {  answer=HttpEntityConverter.toHttpEntity((String)body,exchange);} @AT@ 28673 @LENGTH@ 604
---------MOV IfStatement@@if (body == null) {  return null;} else if (body instanceof byte[]) {  answer=HttpEntityConverter.toHttpEntity((byte[])body,exchange);} else if (body instanceof InputStream) {  answer=HttpEntityConverter.toHttpEntity((InputStream)body,exchange);} else if (body instanceof String) {  answer=HttpEntityConverter.toHttpEntity((String)body,exchange);} @TO@ Block@@ElseBody:if (body instanceof HttpEntity) {  answer=(HttpEntity)body;} else if (body instanceof byte[]) {  answer=HttpEntityConverter.toHttpEntity((byte[])body,exchange);} else if (body instanceof InputStream) {  answer=HttpEntityConverter.toHttpEntity((InputStream)body,exchange);} else if (body instanceof String) {  answer=HttpEntityConverter.toHttpEntity((String)body,exchange);} @AT@ 28605 @LENGTH@ 575
------------DEL InfixExpression@@body == null @AT@ 28609 @LENGTH@ 12
---------------DEL SimpleName@@body @AT@ 28609 @LENGTH@ 4
---------------DEL Operator@@== @AT@ 28613 @LENGTH@ 2
---------------DEL NullLiteral@@null @AT@ 28617 @LENGTH@ 4
------------INS InstanceofExpression@@body instanceof HttpEntity @TO@ IfStatement@@if (body == null) {  return null;} else if (body instanceof byte[]) {  answer=HttpEntityConverter.toHttpEntity((byte[])body,exchange);} else if (body instanceof InputStream) {  answer=HttpEntityConverter.toHttpEntity((InputStream)body,exchange);} else if (body instanceof String) {  answer=HttpEntityConverter.toHttpEntity((String)body,exchange);} @AT@ 28677 @LENGTH@ 26
---------------INS SimpleName@@body @TO@ InstanceofExpression@@body instanceof HttpEntity @AT@ 28677 @LENGTH@ 4
---------------INS Instanceof@@instanceof @TO@ InstanceofExpression@@body instanceof HttpEntity @AT@ 28682 @LENGTH@ 10
---------------INS SimpleType@@HttpEntity @TO@ InstanceofExpression@@body instanceof HttpEntity @AT@ 28693 @LENGTH@ 10
------------INS Block@@ThenBody:{  answer=(HttpEntity)body;} @TO@ IfStatement@@if (body == null) {  return null;} else if (body instanceof byte[]) {  answer=HttpEntityConverter.toHttpEntity((byte[])body,exchange);} else if (body instanceof InputStream) {  answer=HttpEntityConverter.toHttpEntity((InputStream)body,exchange);} else if (body instanceof String) {  answer=HttpEntityConverter.toHttpEntity((String)body,exchange);} @AT@ 28705 @LENGTH@ 163
---------------INS ExpressionStatement@@Assignment:answer=(HttpEntity)body @TO@ Block@@ThenBody:{  answer=(HttpEntity)body;} @AT@ 28723 @LENGTH@ 27
------------------INS Assignment@@answer=(HttpEntity)body @TO@ ExpressionStatement@@Assignment:answer=(HttpEntity)body @AT@ 28723 @LENGTH@ 26
---------------------INS SimpleName@@answer @TO@ Assignment@@answer=(HttpEntity)body @AT@ 28723 @LENGTH@ 6
---------------------INS Operator@@= @TO@ Assignment@@answer=(HttpEntity)body @AT@ 28729 @LENGTH@ 1
---------------------INS CastExpression@@(HttpEntity)body @TO@ Assignment@@answer=(HttpEntity)body @AT@ 28732 @LENGTH@ 17
------------------------INS SimpleType@@HttpEntity @TO@ CastExpression@@(HttpEntity)body @AT@ 28733 @LENGTH@ 10
------------------------INS SimpleName@@body @TO@ CastExpression@@(HttpEntity)body @AT@ 28745 @LENGTH@ 4
---UPD IfStatement@@if (body == null) {  return null;} else if (body instanceof byte[]) {  answer=HttpEntityConverter.toHttpEntity((byte[])body,exchange);} else if (body instanceof InputStream) {  answer=HttpEntityConverter.toHttpEntity((InputStream)body,exchange);} else if (body instanceof String) {  answer=HttpEntityConverter.toHttpEntity((String)body,exchange);} @TO@ if (body instanceof HttpEntity) {  answer=(HttpEntity)body;} else if (body instanceof byte[]) {  answer=HttpEntityConverter.toHttpEntity((byte[])body,exchange);} else if (body instanceof InputStream) {  answer=HttpEntityConverter.toHttpEntity((InputStream)body,exchange);} else if (body instanceof String) {  answer=HttpEntityConverter.toHttpEntity((String)body,exchange);} @AT@ 28605 @LENGTH@ 575


UPD FieldDeclaration@@private, boolean, [removed=false] @TO@ private, boolean, [removed] @AT@ 1310 @LENGTH@ 32
---UPD VariableDeclarationFragment@@removed=false @TO@ removed @AT@ 1326 @LENGTH@ 15
------DEL BooleanLiteral@@false @AT@ 1336 @LENGTH@ 5


UPD ReturnStatement@@InfixExpression:(before == after) && (before == '\'' || before == '"') @TO@ InfixExpression:before == after && (before == '\'' || before == '"') @AT@ 9395 @LENGTH@ 62
---UPD InfixExpression@@(before == after) && (before == '\'' || before == '"') @TO@ before == after && (before == '\'' || before == '"') @AT@ 9402 @LENGTH@ 54
------DEL ParenthesizedExpression@@(before == after) @AT@ 9402 @LENGTH@ 17
---------DEL InfixExpression@@before == after @AT@ 9403 @LENGTH@ 15
------INS InfixExpression@@before == after @TO@ InfixExpression@@(before == after) && (before == '\'' || before == '"') @AT@ 9402 @LENGTH@ 15
---------MOV SimpleName@@before @TO@ InfixExpression@@before == after @AT@ 9403 @LENGTH@ 6
---------MOV Operator@@== @TO@ InfixExpression@@before == after @AT@ 9409 @LENGTH@ 2
---------MOV SimpleName@@after @TO@ InfixExpression@@before == after @AT@ 9413 @LENGTH@ 5


UPD MethodDeclaration@@protected, void, MethodName:doStart, Exception,  @TO@ protected, void, MethodName:doBuild, Exception,  @AT@ 16801 @LENGTH@ 610
---UPD SimpleName@@MethodName:doStart @TO@ MethodName:doBuild @AT@ 16816 @LENGTH@ 7


UPD WhileStatement@@while (rs.next()) {  CompactionInfoStruct lci=new CompactionInfoStruct();  lci.setId(rs.getLong(1));  String partition=rs.getString(4);  if (!rs.wasNull()) {    lci.setPartitionname(partition);  }  lci.setType(dbCompactionType2ThriftType(rs.getString(5).charAt(0)));  if (!partitionSet.contains(partition)) {    response.addToCompactions(lci);    partitionSet.add(partition);  }} @TO@ while (rs.next()) {  CompactionInfoStruct lci=new CompactionInfoStruct();  lci.setId(rs.getLong(1));  lci.setDbname(rs.getString(2));  lci.setTablename(rs.getString(3));  String partition=rs.getString(4);  if (!rs.wasNull()) {    lci.setPartitionname(partition);  }  lci.setType(dbCompactionType2ThriftType(rs.getString(5).charAt(0)));  if (!partitionSet.contains(partition)) {    response.addToCompactions(lci);    partitionSet.add(partition);  }} @AT@ 173494 @LENGTH@ 563
---UPD Block@@WhileBody:{  CompactionInfoStruct lci=new CompactionInfoStruct();  lci.setId(rs.getLong(1));  String partition=rs.getString(4);  if (!rs.wasNull()) {    lci.setPartitionname(partition);  }  lci.setType(dbCompactionType2ThriftType(rs.getString(5).charAt(0)));  if (!partitionSet.contains(partition)) {    response.addToCompactions(lci);    partitionSet.add(partition);  }} @TO@ WhileBody:{  CompactionInfoStruct lci=new CompactionInfoStruct();  lci.setId(rs.getLong(1));  lci.setDbname(rs.getString(2));  lci.setTablename(rs.getString(3));  String partition=rs.getString(4);  if (!rs.wasNull()) {    lci.setPartitionname(partition);  }  lci.setType(dbCompactionType2ThriftType(rs.getString(5).charAt(0)));  if (!partitionSet.contains(partition)) {    response.addToCompactions(lci);    partitionSet.add(partition);  }} @AT@ 173512 @LENGTH@ 545
------INS ExpressionStatement@@MethodInvocation:lci.setDbname(rs.getString(2)) @TO@ Block@@WhileBody:{  CompactionInfoStruct lci=new CompactionInfoStruct();  lci.setId(rs.getLong(1));  String partition=rs.getString(4);  if (!rs.wasNull()) {    lci.setPartitionname(partition);  }  lci.setType(dbCompactionType2ThriftType(rs.getString(5).charAt(0)));  if (!partitionSet.contains(partition)) {    response.addToCompactions(lci);    partitionSet.add(partition);  }} @AT@ 173625 @LENGTH@ 31
---------INS MethodInvocation@@lci.setDbname(rs.getString(2)) @TO@ ExpressionStatement@@MethodInvocation:lci.setDbname(rs.getString(2)) @AT@ 173625 @LENGTH@ 30
------------INS SimpleName@@Name:lci @TO@ MethodInvocation@@lci.setDbname(rs.getString(2)) @AT@ 173625 @LENGTH@ 3
------------INS SimpleName@@MethodName:setDbname:[rs.getString(2)] @TO@ MethodInvocation@@lci.setDbname(rs.getString(2)) @AT@ 173629 @LENGTH@ 26
---------------INS MethodInvocation@@rs.getString(2) @TO@ SimpleName@@MethodName:setDbname:[rs.getString(2)] @AT@ 173639 @LENGTH@ 15
------------------INS SimpleName@@Name:rs @TO@ MethodInvocation@@rs.getString(2) @AT@ 173639 @LENGTH@ 2
------------------INS SimpleName@@MethodName:getString:[2] @TO@ MethodInvocation@@rs.getString(2) @AT@ 173642 @LENGTH@ 12
---------------------INS NumberLiteral@@2 @TO@ SimpleName@@MethodName:getString:[2] @AT@ 173652 @LENGTH@ 1
------INS ExpressionStatement@@MethodInvocation:lci.setTablename(rs.getString(3)) @TO@ Block@@WhileBody:{  CompactionInfoStruct lci=new CompactionInfoStruct();  lci.setId(rs.getLong(1));  String partition=rs.getString(4);  if (!rs.wasNull()) {    lci.setPartitionname(partition);  }  lci.setType(dbCompactionType2ThriftType(rs.getString(5).charAt(0)));  if (!partitionSet.contains(partition)) {    response.addToCompactions(lci);    partitionSet.add(partition);  }} @AT@ 173667 @LENGTH@ 34
---------INS MethodInvocation@@lci.setTablename(rs.getString(3)) @TO@ ExpressionStatement@@MethodInvocation:lci.setTablename(rs.getString(3)) @AT@ 173667 @LENGTH@ 33
------------INS SimpleName@@Name:lci @TO@ MethodInvocation@@lci.setTablename(rs.getString(3)) @AT@ 173667 @LENGTH@ 3
------------INS SimpleName@@MethodName:setTablename:[rs.getString(3)] @TO@ MethodInvocation@@lci.setTablename(rs.getString(3)) @AT@ 173671 @LENGTH@ 29
---------------INS MethodInvocation@@rs.getString(3) @TO@ SimpleName@@MethodName:setTablename:[rs.getString(3)] @AT@ 173684 @LENGTH@ 15
------------------INS SimpleName@@Name:rs @TO@ MethodInvocation@@rs.getString(3) @AT@ 173684 @LENGTH@ 2
------------------INS SimpleName@@MethodName:getString:[3] @TO@ MethodInvocation@@rs.getString(3) @AT@ 173687 @LENGTH@ 12
---------------------INS NumberLiteral@@3 @TO@ SimpleName@@MethodName:getString:[3] @AT@ 173697 @LENGTH@ 1


INS MethodDeclaration@@void, MethodName:exampleWithCombinedCriteriaShouldBeMappedCorrectly,  @TO@ TypeDeclaration@@[@ExtendWith(MockitoExtension.class), public]QueryMapperUnitTests,  @AT@ 28266 @LENGTH@ 483
---INS PrimitiveType@@void @TO@ MethodDeclaration@@void, MethodName:exampleWithCombinedCriteriaShouldBeMappedCorrectly,  @AT@ 28261 @LENGTH@ 4
---INS SimpleName@@MethodName:exampleWithCombinedCriteriaShouldBeMappedCorrectly @TO@ MethodDeclaration@@void, MethodName:exampleWithCombinedCriteriaShouldBeMappedCorrectly,  @AT@ 28266 @LENGTH@ 50
---INS VariableDeclarationStatement@@Foo probe=new Foo(); @TO@ MethodDeclaration@@void, MethodName:exampleWithCombinedCriteriaShouldBeMappedCorrectly,  @AT@ 28324 @LENGTH@ 22
------INS SimpleType@@Foo @TO@ VariableDeclarationStatement@@Foo probe=new Foo(); @AT@ 28324 @LENGTH@ 3
------INS VariableDeclarationFragment@@probe=new Foo() @TO@ VariableDeclarationStatement@@Foo probe=new Foo(); @AT@ 28328 @LENGTH@ 17
---------INS SimpleName@@probe @TO@ VariableDeclarationFragment@@probe=new Foo() @AT@ 28328 @LENGTH@ 5
---------INS ClassInstanceCreation@@Foo[] @TO@ VariableDeclarationFragment@@probe=new Foo() @AT@ 28336 @LENGTH@ 9
------------INS New@@new @TO@ ClassInstanceCreation@@Foo[] @AT@ 28336 @LENGTH@ 3
------------INS SimpleType@@Foo @TO@ ClassInstanceCreation@@Foo[] @AT@ 28340 @LENGTH@ 3
---INS ExpressionStatement@@Assignment:probe.embedded=new EmbeddedClass() @TO@ MethodDeclaration@@void, MethodName:exampleWithCombinedCriteriaShouldBeMappedCorrectly,  @AT@ 28349 @LENGTH@ 37
------INS Assignment@@probe.embedded=new EmbeddedClass() @TO@ ExpressionStatement@@Assignment:probe.embedded=new EmbeddedClass() @AT@ 28349 @LENGTH@ 36
---------INS QualifiedName@@probe.embedded @TO@ Assignment@@probe.embedded=new EmbeddedClass() @AT@ 28349 @LENGTH@ 14
------------INS SimpleName@@probe @TO@ QualifiedName@@probe.embedded @AT@ 28349 @LENGTH@ 5
------------INS SimpleName@@embedded @TO@ QualifiedName@@probe.embedded @AT@ 28355 @LENGTH@ 8
---------INS Operator@@= @TO@ Assignment@@probe.embedded=new EmbeddedClass() @AT@ 28363 @LENGTH@ 1
---------INS ClassInstanceCreation@@EmbeddedClass[] @TO@ Assignment@@probe.embedded=new EmbeddedClass() @AT@ 28366 @LENGTH@ 19
------------INS New@@new @TO@ ClassInstanceCreation@@EmbeddedClass[] @AT@ 28366 @LENGTH@ 3
------------INS SimpleType@@EmbeddedClass @TO@ ClassInstanceCreation@@EmbeddedClass[] @AT@ 28370 @LENGTH@ 13
---INS ExpressionStatement@@Assignment:probe.embedded.id="conflux" @TO@ MethodDeclaration@@void, MethodName:exampleWithCombinedCriteriaShouldBeMappedCorrectly,  @AT@ 28389 @LENGTH@ 30
------INS Assignment@@probe.embedded.id="conflux" @TO@ ExpressionStatement@@Assignment:probe.embedded.id="conflux" @AT@ 28389 @LENGTH@ 29
---------INS QualifiedName@@probe.embedded.id @TO@ Assignment@@probe.embedded.id="conflux" @AT@ 28389 @LENGTH@ 17
------------INS QualifiedName@@probe.embedded @TO@ QualifiedName@@probe.embedded.id @AT@ 28389 @LENGTH@ 14
---------------INS SimpleName@@probe @TO@ QualifiedName@@probe.embedded @AT@ 28389 @LENGTH@ 5
---------------INS SimpleName@@embedded @TO@ QualifiedName@@probe.embedded @AT@ 28395 @LENGTH@ 8
------------INS SimpleName@@id @TO@ QualifiedName@@probe.embedded.id @AT@ 28404 @LENGTH@ 2
---------INS Operator@@= @TO@ Assignment@@probe.embedded.id="conflux" @AT@ 28406 @LENGTH@ 1
---------INS StringLiteral@@"conflux" @TO@ Assignment@@probe.embedded.id="conflux" @AT@ 28409 @LENGTH@ 9
---INS VariableDeclarationStatement@@Query query=query(byExample(probe).and("listOfItems").exists(true)); @TO@ MethodDeclaration@@void, MethodName:exampleWithCombinedCriteriaShouldBeMappedCorrectly,  @AT@ 28423 @LENGTH@ 70
------INS SimpleType@@Query @TO@ VariableDeclarationStatement@@Query query=query(byExample(probe).and("listOfItems").exists(true)); @AT@ 28423 @LENGTH@ 5
------INS VariableDeclarationFragment@@query=query(byExample(probe).and("listOfItems").exists(true)) @TO@ VariableDeclarationStatement@@Query query=query(byExample(probe).and("listOfItems").exists(true)); @AT@ 28429 @LENGTH@ 63
---------INS SimpleName@@query @TO@ VariableDeclarationFragment@@query=query(byExample(probe).and("listOfItems").exists(true)) @AT@ 28429 @LENGTH@ 5
---------INS MethodInvocation@@query(byExample(probe).and("listOfItems").exists(true)) @TO@ VariableDeclarationFragment@@query=query(byExample(probe).and("listOfItems").exists(true)) @AT@ 28437 @LENGTH@ 55
------------INS SimpleName@@MethodName:query:[byExample(probe).and("listOfItems").exists(true)] @TO@ MethodInvocation@@query(byExample(probe).and("listOfItems").exists(true)) @AT@ 28437 @LENGTH@ 55
---------------INS MethodInvocation@@byExample(probe).and("listOfItems").exists(true) @TO@ SimpleName@@MethodName:query:[byExample(probe).and("listOfItems").exists(true)] @AT@ 28443 @LENGTH@ 48
------------------INS MethodInvocation@@MethodName:and:["listOfItems"] @TO@ MethodInvocation@@byExample(probe).and("listOfItems").exists(true) @AT@ 28443 @LENGTH@ 35
---------------------INS StringLiteral@@"listOfItems" @TO@ MethodInvocation@@MethodName:and:["listOfItems"] @AT@ 28464 @LENGTH@ 13
------------------INS MethodInvocation@@MethodName:byExample:[probe] @TO@ MethodInvocation@@byExample(probe).and("listOfItems").exists(true) @AT@ 28443 @LENGTH@ 16
---------------------INS SimpleName@@probe @TO@ MethodInvocation@@MethodName:byExample:[probe] @AT@ 28453 @LENGTH@ 5
------------------INS SimpleName@@MethodName:exists:[true] @TO@ MethodInvocation@@byExample(probe).and("listOfItems").exists(true) @AT@ 28479 @LENGTH@ 12
---------------------INS BooleanLiteral@@true @TO@ SimpleName@@MethodName:exists:[true] @AT@ 28486 @LENGTH@ 4
---INS VariableDeclarationStatement@@org.bson.Document document=mapper.getMappedObject(query.getQueryObject(),context.getPersistentEntity(Foo.class)); @TO@ MethodDeclaration@@void, MethodName:exampleWithCombinedCriteriaShouldBeMappedCorrectly,  @AT@ 28496 @LENGTH@ 116
------INS SimpleType@@org.bson.Document @TO@ VariableDeclarationStatement@@org.bson.Document document=mapper.getMappedObject(query.getQueryObject(),context.getPersistentEntity(Foo.class)); @AT@ 28496 @LENGTH@ 17
------INS VariableDeclarationFragment@@document=mapper.getMappedObject(query.getQueryObject(),context.getPersistentEntity(Foo.class)) @TO@ VariableDeclarationStatement@@org.bson.Document document=mapper.getMappedObject(query.getQueryObject(),context.getPersistentEntity(Foo.class)); @AT@ 28514 @LENGTH@ 97
---------INS SimpleName@@document @TO@ VariableDeclarationFragment@@document=mapper.getMappedObject(query.getQueryObject(),context.getPersistentEntity(Foo.class)) @AT@ 28514 @LENGTH@ 8
---------INS MethodInvocation@@mapper.getMappedObject(query.getQueryObject(),context.getPersistentEntity(Foo.class)) @TO@ VariableDeclarationFragment@@document=mapper.getMappedObject(query.getQueryObject(),context.getPersistentEntity(Foo.class)) @AT@ 28525 @LENGTH@ 86
------------INS SimpleName@@Name:mapper @TO@ MethodInvocation@@mapper.getMappedObject(query.getQueryObject(),context.getPersistentEntity(Foo.class)) @AT@ 28525 @LENGTH@ 6
------------INS SimpleName@@MethodName:getMappedObject:[query.getQueryObject(), context.getPersistentEntity(Foo.class)] @TO@ MethodInvocation@@mapper.getMappedObject(query.getQueryObject(),context.getPersistentEntity(Foo.class)) @AT@ 28532 @LENGTH@ 79
---------------INS MethodInvocation@@query.getQueryObject() @TO@ SimpleName@@MethodName:getMappedObject:[query.getQueryObject(), context.getPersistentEntity(Foo.class)] @AT@ 28548 @LENGTH@ 22
------------------INS SimpleName@@Name:query @TO@ MethodInvocation@@query.getQueryObject() @AT@ 28548 @LENGTH@ 5
------------------INS SimpleName@@MethodName:getQueryObject:[] @TO@ MethodInvocation@@query.getQueryObject() @AT@ 28554 @LENGTH@ 16
---------------INS MethodInvocation@@context.getPersistentEntity(Foo.class) @TO@ SimpleName@@MethodName:getMappedObject:[query.getQueryObject(), context.getPersistentEntity(Foo.class)] @AT@ 28572 @LENGTH@ 38
------------------INS SimpleName@@Name:context @TO@ MethodInvocation@@context.getPersistentEntity(Foo.class) @AT@ 28572 @LENGTH@ 7
------------------INS SimpleName@@MethodName:getPersistentEntity:[Foo.class] @TO@ MethodInvocation@@context.getPersistentEntity(Foo.class) @AT@ 28580 @LENGTH@ 30
---------------------INS TypeLiteral@@Foo.class @TO@ SimpleName@@MethodName:getPersistentEntity:[Foo.class] @AT@ 28600 @LENGTH@ 9
---INS ExpressionStatement@@MethodInvocation:assertThat(document).containsEntry("embedded\\._id","conflux").containsEntry("my_items",new org.bson.Document("$exists",true)) @TO@ MethodDeclaration@@void, MethodName:exampleWithCombinedCriteriaShouldBeMappedCorrectly,  @AT@ 28616 @LENGTH@ 130
------INS MethodInvocation@@assertThat(document).containsEntry("embedded\\._id","conflux").containsEntry("my_items",new org.bson.Document("$exists",true)) @TO@ ExpressionStatement@@MethodInvocation:assertThat(document).containsEntry("embedded\\._id","conflux").containsEntry("my_items",new org.bson.Document("$exists",true)) @AT@ 28616 @LENGTH@ 129
---------INS MethodInvocation@@MethodName:containsEntry:["embedded\\._id", "conflux"] @TO@ MethodInvocation@@assertThat(document).containsEntry("embedded\\._id","conflux").containsEntry("my_items",new org.bson.Document("$exists",true)) @AT@ 28616 @LENGTH@ 63
------------INS StringLiteral@@"embedded\\._id" @TO@ MethodInvocation@@MethodName:containsEntry:["embedded\\._id", "conflux"] @AT@ 28651 @LENGTH@ 16
------------INS StringLiteral@@"conflux" @TO@ MethodInvocation@@MethodName:containsEntry:["embedded\\._id", "conflux"] @AT@ 28669 @LENGTH@ 9
---------INS MethodInvocation@@MethodName:assertThat:[document] @TO@ MethodInvocation@@assertThat(document).containsEntry("embedded\\._id","conflux").containsEntry("my_items",new org.bson.Document("$exists",true)) @AT@ 28616 @LENGTH@ 20
------------INS SimpleName@@document @TO@ MethodInvocation@@MethodName:assertThat:[document] @AT@ 28627 @LENGTH@ 8
---------INS SimpleName@@MethodName:containsEntry:["my_items", new org.bson.Document("$exists",true)] @TO@ MethodInvocation@@assertThat(document).containsEntry("embedded\\._id","conflux").containsEntry("my_items",new org.bson.Document("$exists",true)) @AT@ 28680 @LENGTH@ 65
------------INS StringLiteral@@"my_items" @TO@ SimpleName@@MethodName:containsEntry:["my_items", new org.bson.Document("$exists",true)] @AT@ 28694 @LENGTH@ 10
------------INS ClassInstanceCreation@@org.bson.Document["$exists", true] @TO@ SimpleName@@MethodName:containsEntry:["my_items", new org.bson.Document("$exists",true)] @AT@ 28706 @LENGTH@ 38
---------------INS New@@new @TO@ ClassInstanceCreation@@org.bson.Document["$exists", true] @AT@ 28706 @LENGTH@ 3
---------------INS SimpleType@@org.bson.Document @TO@ ClassInstanceCreation@@org.bson.Document["$exists", true] @AT@ 28710 @LENGTH@ 17
---------------INS StringLiteral@@"$exists" @TO@ ClassInstanceCreation@@org.bson.Document["$exists", true] @AT@ 28728 @LENGTH@ 9
---------------INS BooleanLiteral@@true @TO@ ClassInstanceCreation@@org.bson.Document["$exists", true] @AT@ 28739 @LENGTH@ 4


UPD IfStatement@@if (ObjectHelper.isNotEmpty(prefix) && name.startsWith(prefix)) {  return row.getName();} @TO@ if (prefix != null && !prefix.isEmpty() && name.startsWith(prefix)) {  return row.getName();} @AT@ 66789 @LENGTH@ 117
---UPD InfixExpression@@ObjectHelper.isNotEmpty(prefix) && name.startsWith(prefix) @TO@ prefix != null && !prefix.isEmpty() && name.startsWith(prefix) @AT@ 66793 @LENGTH@ 58
------INS InfixExpression@@prefix != null && !prefix.isEmpty() @TO@ InfixExpression@@ObjectHelper.isNotEmpty(prefix) && name.startsWith(prefix) @AT@ 66762 @LENGTH@ 35
---------INS InfixExpression@@prefix != null @TO@ InfixExpression@@prefix != null && !prefix.isEmpty() @AT@ 66762 @LENGTH@ 14
------------INS SimpleName@@prefix @TO@ InfixExpression@@prefix != null @AT@ 66762 @LENGTH@ 6
------------INS Operator@@!= @TO@ InfixExpression@@prefix != null @AT@ 66768 @LENGTH@ 2
------------INS NullLiteral@@null @TO@ InfixExpression@@prefix != null @AT@ 66772 @LENGTH@ 4
---------INS Operator@@&& @TO@ InfixExpression@@prefix != null && !prefix.isEmpty() @AT@ 66776 @LENGTH@ 2
---------INS PrefixExpression@@!prefix.isEmpty() @TO@ InfixExpression@@prefix != null && !prefix.isEmpty() @AT@ 66780 @LENGTH@ 17
------------INS Operator@@! @TO@ PrefixExpression@@!prefix.isEmpty() @AT@ 66780 @LENGTH@ 1
------------INS MethodInvocation@@prefix.isEmpty() @TO@ PrefixExpression@@!prefix.isEmpty() @AT@ 66781 @LENGTH@ 16
---------------MOV SimpleName@@Name:ObjectHelper @TO@ MethodInvocation@@prefix.isEmpty() @AT@ 66793 @LENGTH@ 12
---------------MOV SimpleName@@MethodName:isNotEmpty:[prefix] @TO@ MethodInvocation@@prefix.isEmpty() @AT@ 66806 @LENGTH@ 18
------DEL MethodInvocation@@ObjectHelper.isNotEmpty(prefix) @AT@ 66793 @LENGTH@ 31


UPD IfStatement@@if (am.getAttachment(name) != null) {  DataHandler dh=am.getAttachment(name);  Object value=dh;  if (dh.getContentType() == null || dh.getContentType().startsWith("text/plain")) {    value=request.getParameter(name);  }  if (getHeaderFilterStrategy() != null && !getHeaderFilterStrategy().applyFilterToExternalHeaders(name,value,message.getExchange())) {    HttpHelper.appendHeader(headers,name,value);  }  continue;} @TO@ if (am != null && am.getAttachment(name) != null) {  DataHandler dh=am.getAttachment(name);  Object value=dh;  if (dh.getContentType() == null || dh.getContentType().startsWith("text/plain")) {    value=request.getParameter(name);  }  if (getHeaderFilterStrategy() != null && !getHeaderFilterStrategy().applyFilterToExternalHeaders(name,value,message.getExchange())) {    HttpHelper.appendHeader(headers,name,value);  }  continue;} @AT@ 4481 @LENGTH@ 603
---INS InfixExpression@@am != null && am.getAttachment(name) != null @TO@ IfStatement@@if (am.getAttachment(name) != null) {  DataHandler dh=am.getAttachment(name);  Object value=dh;  if (dh.getContentType() == null || dh.getContentType().startsWith("text/plain")) {    value=request.getParameter(name);  }  if (getHeaderFilterStrategy() != null && !getHeaderFilterStrategy().applyFilterToExternalHeaders(name,value,message.getExchange())) {    HttpHelper.appendHeader(headers,name,value);  }  continue;} @AT@ 4519 @LENGTH@ 44
------MOV InfixExpression@@am.getAttachment(name) != null @TO@ InfixExpression@@am != null && am.getAttachment(name) != null @AT@ 4485 @LENGTH@ 30
------INS InfixExpression@@am != null @TO@ InfixExpression@@am != null && am.getAttachment(name) != null @AT@ 4519 @LENGTH@ 10
---------INS SimpleName@@am @TO@ InfixExpression@@am != null @AT@ 4519 @LENGTH@ 2
---------INS Operator@@!= @TO@ InfixExpression@@am != null @AT@ 4521 @LENGTH@ 2
---------INS NullLiteral@@null @TO@ InfixExpression@@am != null @AT@ 4525 @LENGTH@ 4
------INS Operator@@&& @TO@ InfixExpression@@am != null && am.getAttachment(name) != null @AT@ 4529 @LENGTH@ 2


UPD Block@@ThenBody:{  baseDesc+="\nDefault: " + option.getDefaultValue();} @TO@ ThenBody:{  String value=JavadocHelper.xmlEncode(option.getDefaultValue().toString());  baseDesc+="\nDefault: " + value;} @AT@ 21540 @LENGTH@ 101
---UPD ExpressionStatement@@Assignment:baseDesc+="\nDefault: " + option.getDefaultValue() @TO@ Assignment:baseDesc+="\nDefault: " + value @AT@ 21566 @LENGTH@ 53
------UPD Assignment@@baseDesc+="\nDefault: " + option.getDefaultValue() @TO@ baseDesc+="\nDefault: " + value @AT@ 21566 @LENGTH@ 52
---------UPD InfixExpression@@"\nDefault: " + option.getDefaultValue() @TO@ "\nDefault: " + value @AT@ 21578 @LENGTH@ 40
------------DEL MethodInvocation@@option.getDefaultValue() @AT@ 21594 @LENGTH@ 24
---------------DEL SimpleName@@Name:option @AT@ 21594 @LENGTH@ 6
---------------DEL SimpleName@@MethodName:getDefaultValue:[] @AT@ 21601 @LENGTH@ 17
------------INS SimpleName@@value @TO@ InfixExpression@@"\nDefault: " + option.getDefaultValue() @AT@ 21828 @LENGTH@ 5
---INS VariableDeclarationStatement@@String value=JavadocHelper.xmlEncode(option.getDefaultValue().toString()); @TO@ Block@@ThenBody:{  baseDesc+="\nDefault: " + option.getDefaultValue();} @AT@ 21699 @LENGTH@ 76
------INS SimpleType@@String @TO@ VariableDeclarationStatement@@String value=JavadocHelper.xmlEncode(option.getDefaultValue().toString()); @AT@ 21699 @LENGTH@ 6
------INS VariableDeclarationFragment@@value=JavadocHelper.xmlEncode(option.getDefaultValue().toString()) @TO@ VariableDeclarationStatement@@String value=JavadocHelper.xmlEncode(option.getDefaultValue().toString()); @AT@ 21706 @LENGTH@ 68
---------INS SimpleName@@value @TO@ VariableDeclarationFragment@@value=JavadocHelper.xmlEncode(option.getDefaultValue().toString()) @AT@ 21706 @LENGTH@ 5
---------INS MethodInvocation@@JavadocHelper.xmlEncode(option.getDefaultValue().toString()) @TO@ VariableDeclarationFragment@@value=JavadocHelper.xmlEncode(option.getDefaultValue().toString()) @AT@ 21714 @LENGTH@ 60
------------INS SimpleName@@Name:JavadocHelper @TO@ MethodInvocation@@JavadocHelper.xmlEncode(option.getDefaultValue().toString()) @AT@ 21714 @LENGTH@ 13
------------INS SimpleName@@MethodName:xmlEncode:[option.getDefaultValue().toString()] @TO@ MethodInvocation@@JavadocHelper.xmlEncode(option.getDefaultValue().toString()) @AT@ 21728 @LENGTH@ 46
---------------INS MethodInvocation@@option.getDefaultValue().toString() @TO@ SimpleName@@MethodName:xmlEncode:[option.getDefaultValue().toString()] @AT@ 21738 @LENGTH@ 35
------------------INS MethodInvocation@@MethodName:getDefaultValue:[] @TO@ MethodInvocation@@option.getDefaultValue().toString() @AT@ 21738 @LENGTH@ 24
------------------INS SimpleName@@Name:option @TO@ MethodInvocation@@option.getDefaultValue().toString() @AT@ 21738 @LENGTH@ 6
------------------INS SimpleName@@MethodName:toString:[] @TO@ MethodInvocation@@option.getDefaultValue().toString() @AT@ 21763 @LENGTH@ 10


UPD ExpressionStatement@@MethodInvocation:copyFile(srcFile,destFile,StandardCopyOption.REPLACE_EXISTING) @TO@ MethodInvocation:copyFile(srcFile,destFile,StandardCopyOption.COPY_ATTRIBUTES,StandardCopyOption.REPLACE_EXISTING) @AT@ 31152 @LENGTH@ 65
---UPD MethodInvocation@@copyFile(srcFile,destFile,StandardCopyOption.REPLACE_EXISTING) @TO@ copyFile(srcFile,destFile,StandardCopyOption.COPY_ATTRIBUTES,StandardCopyOption.REPLACE_EXISTING) @AT@ 31152 @LENGTH@ 64
------UPD SimpleName@@MethodName:copyFile:[srcFile, destFile, StandardCopyOption.REPLACE_EXISTING] @TO@ MethodName:copyFile:[srcFile, destFile, StandardCopyOption.COPY_ATTRIBUTES, StandardCopyOption.REPLACE_EXISTING] @AT@ 31152 @LENGTH@ 64
---------INS QualifiedName@@StandardCopyOption.COPY_ATTRIBUTES @TO@ SimpleName@@MethodName:copyFile:[srcFile, destFile, StandardCopyOption.REPLACE_EXISTING] @AT@ 31180 @LENGTH@ 34
------------INS SimpleName@@StandardCopyOption @TO@ QualifiedName@@StandardCopyOption.COPY_ATTRIBUTES @AT@ 31180 @LENGTH@ 18
------------INS SimpleName@@COPY_ATTRIBUTES @TO@ QualifiedName@@StandardCopyOption.COPY_ATTRIBUTES @AT@ 31199 @LENGTH@ 15


UPD ExpressionStatement@@MethodInvocation:predicate.init(camelContext) @TO@ MethodInvocation:predicate.initPredicate(camelContext) @AT@ 11497 @LENGTH@ 29
---UPD MethodInvocation@@predicate.init(camelContext) @TO@ predicate.initPredicate(camelContext) @AT@ 11497 @LENGTH@ 28
------UPD SimpleName@@MethodName:init:[camelContext] @TO@ MethodName:initPredicate:[camelContext] @AT@ 11507 @LENGTH@ 18


UPD IfStatement@@if ((type2 instanceof Class) && ((Class<?>)type2).isPrimitive()) {  type2=PRIMITIVE_TO_WRAPPERS_MAP.get(type2);} @TO@ if (type2 instanceof Class && ((Class<?>)type2).isPrimitive()) {  type2=PRIMITIVE_TO_WRAPPERS_MAP.get(type2);} @AT@ 2592 @LENGTH@ 135
---UPD InfixExpression@@(type2 instanceof Class) && ((Class<?>)type2).isPrimitive() @TO@ type2 instanceof Class && ((Class<?>)type2).isPrimitive() @AT@ 2596 @LENGTH@ 60
------INS InstanceofExpression@@type2 instanceof Class @TO@ InfixExpression@@(type2 instanceof Class) && ((Class<?>)type2).isPrimitive() @AT@ 2594 @LENGTH@ 22
---------MOV SimpleName@@type2 @TO@ InstanceofExpression@@type2 instanceof Class @AT@ 2597 @LENGTH@ 5
---------MOV Instanceof@@instanceof @TO@ InstanceofExpression@@type2 instanceof Class @AT@ 2603 @LENGTH@ 10
---------MOV SimpleType@@Class @TO@ InstanceofExpression@@type2 instanceof Class @AT@ 2614 @LENGTH@ 5
------DEL ParenthesizedExpression@@(type2 instanceof Class) @AT@ 2596 @LENGTH@ 24
---------DEL InstanceofExpression@@type2 instanceof Class @AT@ 2597 @LENGTH@ 22


MOV FieldDeclaration@@private, Processor, [processor=new P()] @TO@ TypeDeclaration@@[public]UnsharableCodecsConflictsTest, BaseNettyTest @AT@ 1684 @LENGTH@ 38


UPD ExpressionStatement@@MethodInvocation:Assertions.assertTrue(size < 100,"Stackframe should be < 100") @TO@ MethodInvocation:Assertions.assertTrue(size < 110,"Stackframe should be < 110") @AT@ 1934 @LENGTH@ 64
---UPD MethodInvocation@@Assertions.assertTrue(size < 100,"Stackframe should be < 100") @TO@ Assertions.assertTrue(size < 110,"Stackframe should be < 110") @AT@ 1934 @LENGTH@ 63
------UPD SimpleName@@MethodName:assertTrue:[size < 100, "Stackframe should be < 100"] @TO@ MethodName:assertTrue:[size < 110, "Stackframe should be < 110"] @AT@ 1945 @LENGTH@ 52
---------UPD InfixExpression@@size < 100 @TO@ size < 110 @AT@ 1956 @LENGTH@ 10
------------UPD NumberLiteral@@100 @TO@ 110 @AT@ 1963 @LENGTH@ 3
---------UPD StringLiteral@@"Stackframe should be < 100" @TO@ "Stackframe should be < 110" @AT@ 1968 @LENGTH@ 28


UPD IfStatement@@if ((failures.get() >= failureThreshold) && (lastFailure >= System.currentTimeMillis() - failureWindow)) {  output=true;} @TO@ if (failures.get() >= failureThreshold && lastFailure >= System.currentTimeMillis() - failureWindow) {  output=true;} @AT@ 8816 @LENGTH@ 143
---UPD InfixExpression@@(failures.get() >= failureThreshold) && (lastFailure >= System.currentTimeMillis() - failureWindow) @TO@ failures.get() >= failureThreshold && lastFailure >= System.currentTimeMillis() - failureWindow @AT@ 8820 @LENGTH@ 99
------DEL ParenthesizedExpression@@(failures.get() >= failureThreshold) @AT@ 8820 @LENGTH@ 36
------MOV InfixExpression@@failures.get() >= failureThreshold @TO@ InfixExpression@@(failures.get() >= failureThreshold) && (lastFailure >= System.currentTimeMillis() - failureWindow) @AT@ 8821 @LENGTH@ 34
------DEL ParenthesizedExpression@@(lastFailure >= System.currentTimeMillis() - failureWindow) @AT@ 8860 @LENGTH@ 59
------MOV InfixExpression@@lastFailure >= System.currentTimeMillis() - failureWindow @TO@ InfixExpression@@(failures.get() >= failureThreshold) && (lastFailure >= System.currentTimeMillis() - failureWindow) @AT@ 8861 @LENGTH@ 57


INS MethodDeclaration@@default, void, MethodName:doWithAll, PropertyHandler<P> handler,  @TO@ TypeDeclaration@@[public]PersistentEntity, [Iterable<P>] @AT@ 8079 @LENGTH@ 276
---INS Modifier@@default @TO@ MethodDeclaration@@default, void, MethodName:doWithAll, PropertyHandler<P> handler,  @AT@ 8079 @LENGTH@ 7
---INS PrimitiveType@@void @TO@ MethodDeclaration@@default, void, MethodName:doWithAll, PropertyHandler<P> handler,  @AT@ 8087 @LENGTH@ 4
---INS SimpleName@@MethodName:doWithAll @TO@ MethodDeclaration@@default, void, MethodName:doWithAll, PropertyHandler<P> handler,  @AT@ 8092 @LENGTH@ 9
---INS SingleVariableDeclaration@@PropertyHandler<P> handler @TO@ MethodDeclaration@@default, void, MethodName:doWithAll, PropertyHandler<P> handler,  @AT@ 8102 @LENGTH@ 26
------INS ParameterizedType@@PropertyHandler<P> @TO@ SingleVariableDeclaration@@PropertyHandler<P> handler @AT@ 8102 @LENGTH@ 18
---------INS SimpleType@@PropertyHandler @TO@ ParameterizedType@@PropertyHandler<P> @AT@ 8102 @LENGTH@ 15
---------INS SimpleType@@P @TO@ ParameterizedType@@PropertyHandler<P> @AT@ 8118 @LENGTH@ 1
------INS SimpleName@@handler @TO@ SingleVariableDeclaration@@PropertyHandler<P> handler @AT@ 8121 @LENGTH@ 7
---INS ExpressionStatement@@MethodInvocation:Assert.notNull(handler,"PropertyHandler must not be null!") @TO@ MethodDeclaration@@default, void, MethodName:doWithAll, PropertyHandler<P> handler,  @AT@ 8135 @LENGTH@ 61
------INS MethodInvocation@@Assert.notNull(handler,"PropertyHandler must not be null!") @TO@ ExpressionStatement@@MethodInvocation:Assert.notNull(handler,"PropertyHandler must not be null!") @AT@ 8135 @LENGTH@ 60
---------INS SimpleName@@Name:Assert @TO@ MethodInvocation@@Assert.notNull(handler,"PropertyHandler must not be null!") @AT@ 8135 @LENGTH@ 6
---------INS SimpleName@@MethodName:notNull:[handler, "PropertyHandler must not be null!"] @TO@ MethodInvocation@@Assert.notNull(handler,"PropertyHandler must not be null!") @AT@ 8142 @LENGTH@ 53
------------INS SimpleName@@handler @TO@ SimpleName@@MethodName:notNull:[handler, "PropertyHandler must not be null!"] @AT@ 8150 @LENGTH@ 7
------------INS StringLiteral@@"PropertyHandler must not be null!" @TO@ SimpleName@@MethodName:notNull:[handler, "PropertyHandler must not be null!"] @AT@ 8159 @LENGTH@ 35
---INS ExpressionStatement@@MethodInvocation:doWithProperties(handler) @TO@ MethodDeclaration@@default, void, MethodName:doWithAll, PropertyHandler<P> handler,  @AT@ 8200 @LENGTH@ 26
------INS MethodInvocation@@doWithProperties(handler) @TO@ ExpressionStatement@@MethodInvocation:doWithProperties(handler) @AT@ 8200 @LENGTH@ 25
---------INS SimpleName@@MethodName:doWithProperties:[handler] @TO@ MethodInvocation@@doWithProperties(handler) @AT@ 8200 @LENGTH@ 25
------------INS SimpleName@@handler @TO@ SimpleName@@MethodName:doWithProperties:[handler] @AT@ 8217 @LENGTH@ 7
---INS ExpressionStatement@@MethodInvocation:doWithAssociations((AssociationHandler<P>)association -> handler.doWithPersistentProperty(association.getInverse())) @TO@ MethodDeclaration@@default, void, MethodName:doWithAll, PropertyHandler<P> handler,  @AT@ 8229 @LENGTH@ 123
------INS MethodInvocation@@doWithAssociations((AssociationHandler<P>)association -> handler.doWithPersistentProperty(association.getInverse())) @TO@ ExpressionStatement@@MethodInvocation:doWithAssociations((AssociationHandler<P>)association -> handler.doWithPersistentProperty(association.getInverse())) @AT@ 8229 @LENGTH@ 122
---------INS SimpleName@@MethodName:doWithAssociations:[(AssociationHandler<P>)association -> handler.doWithPersistentProperty(association.getInverse())] @TO@ MethodInvocation@@doWithAssociations((AssociationHandler<P>)association -> handler.doWithPersistentProperty(association.getInverse())) @AT@ 8229 @LENGTH@ 122
------------INS CastExpression@@(AssociationHandler<P>)association -> handler.doWithPersistentProperty(association.getInverse()) @TO@ SimpleName@@MethodName:doWithAssociations:[(AssociationHandler<P>)association -> handler.doWithPersistentProperty(association.getInverse())] @AT@ 8253 @LENGTH@ 97
---------------INS ParameterizedType@@AssociationHandler<P> @TO@ CastExpression@@(AssociationHandler<P>)association -> handler.doWithPersistentProperty(association.getInverse()) @AT@ 8254 @LENGTH@ 21
------------------INS SimpleType@@AssociationHandler @TO@ ParameterizedType@@AssociationHandler<P> @AT@ 8254 @LENGTH@ 18
------------------INS SimpleType@@P @TO@ ParameterizedType@@AssociationHandler<P> @AT@ 8273 @LENGTH@ 1
---------------INS LambdaExpression@@association -> handler.doWithPersistentProperty(association.getInverse()) @TO@ CastExpression@@(AssociationHandler<P>)association -> handler.doWithPersistentProperty(association.getInverse()) @AT@ 8277 @LENGTH@ 73
------------------INS VariableDeclarationFragment@@association @TO@ LambdaExpression@@association -> handler.doWithPersistentProperty(association.getInverse()) @AT@ 8277 @LENGTH@ 11
---------------------INS SimpleName@@association @TO@ VariableDeclarationFragment@@association @AT@ 8277 @LENGTH@ 11
------------------INS MethodInvocation@@handler.doWithPersistentProperty(association.getInverse()) @TO@ LambdaExpression@@association -> handler.doWithPersistentProperty(association.getInverse()) @AT@ 8292 @LENGTH@ 58
---------------------INS SimpleName@@Name:handler @TO@ MethodInvocation@@handler.doWithPersistentProperty(association.getInverse()) @AT@ 8292 @LENGTH@ 7
---------------------INS SimpleName@@MethodName:doWithPersistentProperty:[association.getInverse()] @TO@ MethodInvocation@@handler.doWithPersistentProperty(association.getInverse()) @AT@ 8300 @LENGTH@ 50
------------------------INS MethodInvocation@@association.getInverse() @TO@ SimpleName@@MethodName:doWithPersistentProperty:[association.getInverse()] @AT@ 8325 @LENGTH@ 24
---------------------------INS SimpleName@@Name:association @TO@ MethodInvocation@@association.getInverse() @AT@ 8325 @LENGTH@ 11
---------------------------INS SimpleName@@MethodName:getInverse:[] @TO@ MethodInvocation@@association.getInverse() @AT@ 8337 @LENGTH@ 12


UPD ExpressionStatement@@MethodInvocation:LOG.warn("Unable to format date '" + date + "' using format "+ DATE_TIME_FORMAT,e) @TO@ MethodInvocation:LOG.warn("Unable to format date '{}' using format {}",date,DATE_TIME_FORMAT,e) @AT@ 6095 @LENGTH@ 85
---UPD MethodInvocation@@LOG.warn("Unable to format date '" + date + "' using format "+ DATE_TIME_FORMAT,e) @TO@ LOG.warn("Unable to format date '{}' using format {}",date,DATE_TIME_FORMAT,e) @AT@ 6095 @LENGTH@ 84
------UPD SimpleName@@MethodName:warn:["Unable to format date '" + date + "' using format "+ DATE_TIME_FORMAT, e] @TO@ MethodName:warn:["Unable to format date '{}' using format {}", date, DATE_TIME_FORMAT, e] @AT@ 6099 @LENGTH@ 80
---------INS StringLiteral@@"Unable to format date '{}' using format {}" @TO@ SimpleName@@MethodName:warn:["Unable to format date '" + date + "' using format "+ DATE_TIME_FORMAT, e] @AT@ 6101 @LENGTH@ 44
---------DEL InfixExpression@@"Unable to format date '" + date + "' using format "+ DATE_TIME_FORMAT @AT@ 6104 @LENGTH@ 71
------------DEL StringLiteral@@"Unable to format date '" @AT@ 6104 @LENGTH@ 25
------------DEL Operator@@+ @AT@ 6129 @LENGTH@ 1
------------DEL SimpleName@@date @AT@ 6132 @LENGTH@ 4
------------DEL StringLiteral@@"' using format " @AT@ 6139 @LENGTH@ 17
------------DEL SimpleName@@DATE_TIME_FORMAT @AT@ 6159 @LENGTH@ 16
---------INS SimpleName@@date @TO@ SimpleName@@MethodName:warn:["Unable to format date '" + date + "' using format "+ DATE_TIME_FORMAT, e] @AT@ 6147 @LENGTH@ 4
---------INS SimpleName@@DATE_TIME_FORMAT @TO@ SimpleName@@MethodName:warn:["Unable to format date '" + date + "' using format "+ DATE_TIME_FORMAT, e] @AT@ 6153 @LENGTH@ 16


UPD WhileStatement@@while (exitWhenFinished == false || !trackers.isEmpty()) {  try {    final Tracker tracker=(Tracker)q.remove();    trackers.remove(tracker);    if (!tracker.delete()) {      deleteFailures.add(tracker.getPath());    }    tracker.clear();  } catch (  final InterruptedException e) {    continue;  }} @TO@ while (!exitWhenFinished || !trackers.isEmpty()) {  try {    final Tracker tracker=(Tracker)q.remove();    trackers.remove(tracker);    if (!tracker.delete()) {      deleteFailures.add(tracker.getPath());    }    tracker.clear();  } catch (  final InterruptedException e) {    continue;  }} @AT@ 8730 @LENGTH@ 553
---UPD InfixExpression@@exitWhenFinished == false || !trackers.isEmpty() @TO@ !exitWhenFinished || !trackers.isEmpty() @AT@ 8737 @LENGTH@ 48
------DEL InfixExpression@@exitWhenFinished == false @AT@ 8737 @LENGTH@ 25
---------DEL SimpleName@@exitWhenFinished @AT@ 8737 @LENGTH@ 16
---------DEL Operator@@== @AT@ 8753 @LENGTH@ 2
---------DEL BooleanLiteral@@false @AT@ 8757 @LENGTH@ 5
------INS PrefixExpression@@!exitWhenFinished @TO@ InfixExpression@@exitWhenFinished == false || !trackers.isEmpty() @AT@ 8737 @LENGTH@ 17
---------INS Operator@@! @TO@ PrefixExpression@@!exitWhenFinished @AT@ 8737 @LENGTH@ 1
---------INS SimpleName@@exitWhenFinished @TO@ PrefixExpression@@!exitWhenFinished @AT@ 8738 @LENGTH@ 16


UPD ThrowStatement@@ClassInstanceCreation:new UnsupportedOperationException("Invalid instance type: " + valid) @TO@ ClassInstanceCreation:new UnsupportedOperationException("Invalid instance type: " + instanceType) @AT@ 2641 @LENGTH@ 75
---UPD ClassInstanceCreation@@UnsupportedOperationException["Invalid instance type: " + valid] @TO@ UnsupportedOperationException["Invalid instance type: " + instanceType] @AT@ 2647 @LENGTH@ 68
------UPD InfixExpression@@"Invalid instance type: " + valid @TO@ "Invalid instance type: " + instanceType @AT@ 2681 @LENGTH@ 33
---------UPD SimpleName@@valid @TO@ instanceType @AT@ 2709 @LENGTH@ 5


INS MethodDeclaration@@public, void, MethodName:getSignatureAlgorithmsWhenAlgorithmThenParses, Exception,  @TO@ TypeDeclaration@@[public]JwtDecoderProviderConfigurationUtilsTests,  @AT@ 3615 @LENGTH@ 570
---INS Modifier@@public @TO@ MethodDeclaration@@public, void, MethodName:getSignatureAlgorithmsWhenAlgorithmThenParses, Exception,  @AT@ 3615 @LENGTH@ 6
---INS PrimitiveType@@void @TO@ MethodDeclaration@@public, void, MethodName:getSignatureAlgorithmsWhenAlgorithmThenParses, Exception,  @AT@ 3622 @LENGTH@ 4
---INS SimpleName@@MethodName:getSignatureAlgorithmsWhenAlgorithmThenParses @TO@ MethodDeclaration@@public, void, MethodName:getSignatureAlgorithmsWhenAlgorithmThenParses, Exception,  @AT@ 3627 @LENGTH@ 45
---INS SimpleType@@Exception @TO@ MethodDeclaration@@public, void, MethodName:getSignatureAlgorithmsWhenAlgorithmThenParses, Exception,  @AT@ 3682 @LENGTH@ 9
---INS VariableDeclarationStatement@@JWKSource<SecurityContext> jwkSource=mock(JWKSource.class); @TO@ MethodDeclaration@@public, void, MethodName:getSignatureAlgorithmsWhenAlgorithmThenParses, Exception,  @AT@ 3696 @LENGTH@ 61
------INS ParameterizedType@@JWKSource<SecurityContext> @TO@ VariableDeclarationStatement@@JWKSource<SecurityContext> jwkSource=mock(JWKSource.class); @AT@ 3696 @LENGTH@ 26
---------INS SimpleType@@JWKSource @TO@ ParameterizedType@@JWKSource<SecurityContext> @AT@ 3696 @LENGTH@ 9
---------INS SimpleType@@SecurityContext @TO@ ParameterizedType@@JWKSource<SecurityContext> @AT@ 3706 @LENGTH@ 15
------INS VariableDeclarationFragment@@jwkSource=mock(JWKSource.class) @TO@ VariableDeclarationStatement@@JWKSource<SecurityContext> jwkSource=mock(JWKSource.class); @AT@ 3723 @LENGTH@ 33
---------INS SimpleName@@jwkSource @TO@ VariableDeclarationFragment@@jwkSource=mock(JWKSource.class) @AT@ 3723 @LENGTH@ 9
---------INS MethodInvocation@@mock(JWKSource.class) @TO@ VariableDeclarationFragment@@jwkSource=mock(JWKSource.class) @AT@ 3735 @LENGTH@ 21
------------INS SimpleName@@MethodName:mock:[JWKSource.class] @TO@ MethodInvocation@@mock(JWKSource.class) @AT@ 3735 @LENGTH@ 21
---------------INS TypeLiteral@@JWKSource.class @TO@ SimpleName@@MethodName:mock:[JWKSource.class] @AT@ 3740 @LENGTH@ 15
---INS VariableDeclarationStatement@@RSAKey key=new RSAKey.Builder(TestKeys.DEFAULT_PUBLIC_KEY).keyUse(KeyUse.SIGNATURE).algorithm(new Algorithm(JwsAlgorithms.RS256)).build(); @TO@ MethodDeclaration@@public, void, MethodName:getSignatureAlgorithmsWhenAlgorithmThenParses, Exception,  @AT@ 3760 @LENGTH@ 145
------INS SimpleType@@RSAKey @TO@ VariableDeclarationStatement@@RSAKey key=new RSAKey.Builder(TestKeys.DEFAULT_PUBLIC_KEY).keyUse(KeyUse.SIGNATURE).algorithm(new Algorithm(JwsAlgorithms.RS256)).build(); @AT@ 3760 @LENGTH@ 6
------INS VariableDeclarationFragment@@key=new RSAKey.Builder(TestKeys.DEFAULT_PUBLIC_KEY).keyUse(KeyUse.SIGNATURE).algorithm(new Algorithm(JwsAlgorithms.RS256)).build() @TO@ VariableDeclarationStatement@@RSAKey key=new RSAKey.Builder(TestKeys.DEFAULT_PUBLIC_KEY).keyUse(KeyUse.SIGNATURE).algorithm(new Algorithm(JwsAlgorithms.RS256)).build(); @AT@ 3767 @LENGTH@ 137
---------INS SimpleName@@key @TO@ VariableDeclarationFragment@@key=new RSAKey.Builder(TestKeys.DEFAULT_PUBLIC_KEY).keyUse(KeyUse.SIGNATURE).algorithm(new Algorithm(JwsAlgorithms.RS256)).build() @AT@ 3767 @LENGTH@ 3
---------INS MethodInvocation@@new RSAKey.Builder(TestKeys.DEFAULT_PUBLIC_KEY).keyUse(KeyUse.SIGNATURE).algorithm(new Algorithm(JwsAlgorithms.RS256)).build() @TO@ VariableDeclarationFragment@@key=new RSAKey.Builder(TestKeys.DEFAULT_PUBLIC_KEY).keyUse(KeyUse.SIGNATURE).algorithm(new Algorithm(JwsAlgorithms.RS256)).build() @AT@ 3773 @LENGTH@ 131
------------INS MethodInvocation@@MethodName:algorithm:[new Algorithm(JwsAlgorithms.RS256)] @TO@ MethodInvocation@@new RSAKey.Builder(TestKeys.DEFAULT_PUBLIC_KEY).keyUse(KeyUse.SIGNATURE).algorithm(new Algorithm(JwsAlgorithms.RS256)).build() @AT@ 3773 @LENGTH@ 123
---------------INS ClassInstanceCreation@@Algorithm[JwsAlgorithms.RS256] @TO@ MethodInvocation@@MethodName:algorithm:[new Algorithm(JwsAlgorithms.RS256)] @AT@ 3861 @LENGTH@ 34
------------------INS New@@new @TO@ ClassInstanceCreation@@Algorithm[JwsAlgorithms.RS256] @AT@ 3861 @LENGTH@ 3
------------------INS SimpleType@@Algorithm @TO@ ClassInstanceCreation@@Algorithm[JwsAlgorithms.RS256] @AT@ 3865 @LENGTH@ 9
------------------INS QualifiedName@@JwsAlgorithms.RS256 @TO@ ClassInstanceCreation@@Algorithm[JwsAlgorithms.RS256] @AT@ 3875 @LENGTH@ 19
---------------------INS SimpleName@@JwsAlgorithms @TO@ QualifiedName@@JwsAlgorithms.RS256 @AT@ 3875 @LENGTH@ 13
---------------------INS SimpleName@@RS256 @TO@ QualifiedName@@JwsAlgorithms.RS256 @AT@ 3889 @LENGTH@ 5
------------INS MethodInvocation@@MethodName:keyUse:[KeyUse.SIGNATURE] @TO@ MethodInvocation@@new RSAKey.Builder(TestKeys.DEFAULT_PUBLIC_KEY).keyUse(KeyUse.SIGNATURE).algorithm(new Algorithm(JwsAlgorithms.RS256)).build() @AT@ 3773 @LENGTH@ 72
---------------INS QualifiedName@@KeyUse.SIGNATURE @TO@ MethodInvocation@@MethodName:keyUse:[KeyUse.SIGNATURE] @AT@ 3828 @LENGTH@ 16
------------------INS SimpleName@@KeyUse @TO@ QualifiedName@@KeyUse.SIGNATURE @AT@ 3828 @LENGTH@ 6
------------------INS SimpleName@@SIGNATURE @TO@ QualifiedName@@KeyUse.SIGNATURE @AT@ 3835 @LENGTH@ 9
------------INS ClassInstanceCreation@@RSAKey.Builder[TestKeys.DEFAULT_PUBLIC_KEY] @TO@ MethodInvocation@@new RSAKey.Builder(TestKeys.DEFAULT_PUBLIC_KEY).keyUse(KeyUse.SIGNATURE).algorithm(new Algorithm(JwsAlgorithms.RS256)).build() @AT@ 3773 @LENGTH@ 47
---------------INS New@@new @TO@ ClassInstanceCreation@@RSAKey.Builder[TestKeys.DEFAULT_PUBLIC_KEY] @AT@ 3773 @LENGTH@ 3
---------------INS SimpleType@@RSAKey.Builder @TO@ ClassInstanceCreation@@RSAKey.Builder[TestKeys.DEFAULT_PUBLIC_KEY] @AT@ 3777 @LENGTH@ 14
---------------INS QualifiedName@@TestKeys.DEFAULT_PUBLIC_KEY @TO@ ClassInstanceCreation@@RSAKey.Builder[TestKeys.DEFAULT_PUBLIC_KEY] @AT@ 3792 @LENGTH@ 27
------------------INS SimpleName@@TestKeys @TO@ QualifiedName@@TestKeys.DEFAULT_PUBLIC_KEY @AT@ 3792 @LENGTH@ 8
------------------INS SimpleName@@DEFAULT_PUBLIC_KEY @TO@ QualifiedName@@TestKeys.DEFAULT_PUBLIC_KEY @AT@ 3801 @LENGTH@ 18
------------INS SimpleName@@MethodName:build:[] @TO@ MethodInvocation@@new RSAKey.Builder(TestKeys.DEFAULT_PUBLIC_KEY).keyUse(KeyUse.SIGNATURE).algorithm(new Algorithm(JwsAlgorithms.RS256)).build() @AT@ 3897 @LENGTH@ 7
---INS ExpressionStatement@@MethodInvocation:given(jwkSource.get(any(JWKSelector.class),isNull())).willReturn(Collections.singletonList(key)) @TO@ MethodDeclaration@@public, void, MethodName:getSignatureAlgorithmsWhenAlgorithmThenParses, Exception,  @AT@ 3908 @LENGTH@ 98
------INS MethodInvocation@@given(jwkSource.get(any(JWKSelector.class),isNull())).willReturn(Collections.singletonList(key)) @TO@ ExpressionStatement@@MethodInvocation:given(jwkSource.get(any(JWKSelector.class),isNull())).willReturn(Collections.singletonList(key)) @AT@ 3908 @LENGTH@ 97
---------INS MethodInvocation@@MethodName:given:[jwkSource.get(any(JWKSelector.class),isNull())] @TO@ MethodInvocation@@given(jwkSource.get(any(JWKSelector.class),isNull())).willReturn(Collections.singletonList(key)) @AT@ 3908 @LENGTH@ 54
------------INS MethodInvocation@@jwkSource.get(any(JWKSelector.class),isNull()) @TO@ MethodInvocation@@MethodName:given:[jwkSource.get(any(JWKSelector.class),isNull())] @AT@ 3914 @LENGTH@ 47
---------------INS SimpleName@@Name:jwkSource @TO@ MethodInvocation@@jwkSource.get(any(JWKSelector.class),isNull()) @AT@ 3914 @LENGTH@ 9
---------------INS SimpleName@@MethodName:get:[any(JWKSelector.class), isNull()] @TO@ MethodInvocation@@jwkSource.get(any(JWKSelector.class),isNull()) @AT@ 3924 @LENGTH@ 37
------------------INS MethodInvocation@@any(JWKSelector.class) @TO@ SimpleName@@MethodName:get:[any(JWKSelector.class), isNull()] @AT@ 3928 @LENGTH@ 22
---------------------INS SimpleName@@MethodName:any:[JWKSelector.class] @TO@ MethodInvocation@@any(JWKSelector.class) @AT@ 3928 @LENGTH@ 22
------------------------INS TypeLiteral@@JWKSelector.class @TO@ SimpleName@@MethodName:any:[JWKSelector.class] @AT@ 3932 @LENGTH@ 17
------------------INS MethodInvocation@@MethodName:isNull:[] @TO@ SimpleName@@MethodName:get:[any(JWKSelector.class), isNull()] @AT@ 3952 @LENGTH@ 8
---------INS SimpleName@@MethodName:willReturn:[Collections.singletonList(key)] @TO@ MethodInvocation@@given(jwkSource.get(any(JWKSelector.class),isNull())).willReturn(Collections.singletonList(key)) @AT@ 3963 @LENGTH@ 42
------------INS MethodInvocation@@Collections.singletonList(key) @TO@ SimpleName@@MethodName:willReturn:[Collections.singletonList(key)] @AT@ 3974 @LENGTH@ 30
---------------INS SimpleName@@Name:Collections @TO@ MethodInvocation@@Collections.singletonList(key) @AT@ 3974 @LENGTH@ 11
---------------INS SimpleName@@MethodName:singletonList:[key] @TO@ MethodInvocation@@Collections.singletonList(key) @AT@ 3986 @LENGTH@ 18
------------------INS SimpleName@@key @TO@ SimpleName@@MethodName:singletonList:[key] @AT@ 4000 @LENGTH@ 3
---INS VariableDeclarationStatement@@Set<SignatureAlgorithm> algorithms=JwtDecoderProviderConfigurationUtils.getSignatureAlgorithms(jwkSource); @TO@ MethodDeclaration@@public, void, MethodName:getSignatureAlgorithmsWhenAlgorithmThenParses, Exception,  @AT@ 4009 @LENGTH@ 108
------INS ParameterizedType@@Set<SignatureAlgorithm> @TO@ VariableDeclarationStatement@@Set<SignatureAlgorithm> algorithms=JwtDecoderProviderConfigurationUtils.getSignatureAlgorithms(jwkSource); @AT@ 4009 @LENGTH@ 23
---------INS SimpleType@@Set @TO@ ParameterizedType@@Set<SignatureAlgorithm> @AT@ 4009 @LENGTH@ 3
---------INS SimpleType@@SignatureAlgorithm @TO@ ParameterizedType@@Set<SignatureAlgorithm> @AT@ 4013 @LENGTH@ 18
------INS VariableDeclarationFragment@@algorithms=JwtDecoderProviderConfigurationUtils.getSignatureAlgorithms(jwkSource) @TO@ VariableDeclarationStatement@@Set<SignatureAlgorithm> algorithms=JwtDecoderProviderConfigurationUtils.getSignatureAlgorithms(jwkSource); @AT@ 4033 @LENGTH@ 83
---------INS SimpleName@@algorithms @TO@ VariableDeclarationFragment@@algorithms=JwtDecoderProviderConfigurationUtils.getSignatureAlgorithms(jwkSource) @AT@ 4033 @LENGTH@ 10
---------INS MethodInvocation@@JwtDecoderProviderConfigurationUtils.getSignatureAlgorithms(jwkSource) @TO@ VariableDeclarationFragment@@algorithms=JwtDecoderProviderConfigurationUtils.getSignatureAlgorithms(jwkSource) @AT@ 4046 @LENGTH@ 70
------------INS SimpleName@@Name:JwtDecoderProviderConfigurationUtils @TO@ MethodInvocation@@JwtDecoderProviderConfigurationUtils.getSignatureAlgorithms(jwkSource) @AT@ 4046 @LENGTH@ 36
------------INS SimpleName@@MethodName:getSignatureAlgorithms:[jwkSource] @TO@ MethodInvocation@@JwtDecoderProviderConfigurationUtils.getSignatureAlgorithms(jwkSource) @AT@ 4083 @LENGTH@ 33
---------------INS SimpleName@@jwkSource @TO@ SimpleName@@MethodName:getSignatureAlgorithms:[jwkSource] @AT@ 4106 @LENGTH@ 9
---INS ExpressionStatement@@MethodInvocation:assertThat(algorithms).containsOnly(SignatureAlgorithm.RS256) @TO@ MethodDeclaration@@public, void, MethodName:getSignatureAlgorithmsWhenAlgorithmThenParses, Exception,  @AT@ 4120 @LENGTH@ 62
------INS MethodInvocation@@assertThat(algorithms).containsOnly(SignatureAlgorithm.RS256) @TO@ ExpressionStatement@@MethodInvocation:assertThat(algorithms).containsOnly(SignatureAlgorithm.RS256) @AT@ 4120 @LENGTH@ 61
---------INS MethodInvocation@@MethodName:assertThat:[algorithms] @TO@ MethodInvocation@@assertThat(algorithms).containsOnly(SignatureAlgorithm.RS256) @AT@ 4120 @LENGTH@ 22
------------INS SimpleName@@algorithms @TO@ MethodInvocation@@MethodName:assertThat:[algorithms] @AT@ 4131 @LENGTH@ 10
---------INS SimpleName@@MethodName:containsOnly:[SignatureAlgorithm.RS256] @TO@ MethodInvocation@@assertThat(algorithms).containsOnly(SignatureAlgorithm.RS256) @AT@ 4143 @LENGTH@ 38
------------INS QualifiedName@@SignatureAlgorithm.RS256 @TO@ SimpleName@@MethodName:containsOnly:[SignatureAlgorithm.RS256] @AT@ 4156 @LENGTH@ 24
---------------INS SimpleName@@SignatureAlgorithm @TO@ QualifiedName@@SignatureAlgorithm.RS256 @AT@ 4156 @LENGTH@ 18
---------------INS SimpleName@@RS256 @TO@ QualifiedName@@SignatureAlgorithm.RS256 @AT@ 4175 @LENGTH@ 5


DEL ExpressionStatement@@MethodInvocation:data.getUnitOfWork().done(data) @AT@ 4332 @LENGTH@ 32
---DEL MethodInvocation@@data.getUnitOfWork().done(data) @AT@ 4332 @LENGTH@ 31
------DEL MethodInvocation@@MethodName:getUnitOfWork:[] @AT@ 4332 @LENGTH@ 20
------DEL SimpleName@@Name:data @AT@ 4332 @LENGTH@ 4
------DEL SimpleName@@MethodName:done:[data] @AT@ 4353 @LENGTH@ 10
---------DEL SimpleName@@data @AT@ 4358 @LENGTH@ 4


UPD TypeDeclaration@@[private, final]RabbitListenerAdminReplacementInvocationHandler, [InvocationHandler] @TO@ [private, static, final]RabbitListenerAdminReplacementInvocationHandler, [InvocationHandler] @AT@ 3563 @LENGTH@ 613
---INS Modifier@@static @TO@ TypeDeclaration@@[private, final]RabbitListenerAdminReplacementInvocationHandler, [InvocationHandler] @AT@ 3571 @LENGTH@ 6


UPD MethodDeclaration@@Tuple, MethodName:dump, String dbName, List<String> withClauseOptions, Throwable,  @TO@ Tuple, MethodName:dump, String dumpExpression, List<String> withClauseOptions, Throwable,  @AT@ 11401 @LENGTH@ 333
---UPD SingleVariableDeclaration@@String dbName @TO@ String dumpExpression @AT@ 11406 @LENGTH@ 13
------UPD SimpleName@@dbName @TO@ dumpExpression @AT@ 11413 @LENGTH@ 6
---UPD VariableDeclarationStatement@@String dumpCommand="REPL DUMP " + dbName; @TO@ String dumpCommand="REPL DUMP " + dumpExpression; @AT@ 11482 @LENGTH@ 51
------UPD VariableDeclarationFragment@@dumpCommand="REPL DUMP " + dbName @TO@ dumpCommand="REPL DUMP " + dumpExpression @AT@ 11489 @LENGTH@ 43
---------UPD InfixExpression@@"REPL DUMP " + dbName @TO@ "REPL DUMP " + dumpExpression @AT@ 11511 @LENGTH@ 21
------------UPD SimpleName@@dbName @TO@ dumpExpression @AT@ 11526 @LENGTH@ 6


UPD ReturnStatement@@InfixExpression:(value instanceof Number) && (FLOAT_NAN.equals(value) || DOUBLE_NAN.equals(value)) @TO@ InfixExpression:value instanceof Number && (FLOAT_NAN.equals(value) || DOUBLE_NAN.equals(value)) @AT@ 40889 @LENGTH@ 106
---UPD InfixExpression@@(value instanceof Number) && (FLOAT_NAN.equals(value) || DOUBLE_NAN.equals(value)) @TO@ value instanceof Number && (FLOAT_NAN.equals(value) || DOUBLE_NAN.equals(value)) @AT@ 40896 @LENGTH@ 98
------DEL ParenthesizedExpression@@(value instanceof Number) @AT@ 40896 @LENGTH@ 25
---------DEL InstanceofExpression@@value instanceof Number @AT@ 40897 @LENGTH@ 23
------INS InstanceofExpression@@value instanceof Number @TO@ InfixExpression@@(value instanceof Number) && (FLOAT_NAN.equals(value) || DOUBLE_NAN.equals(value)) @AT@ 40896 @LENGTH@ 23
---------MOV SimpleName@@value @TO@ InstanceofExpression@@value instanceof Number @AT@ 40897 @LENGTH@ 5
---------MOV Instanceof@@instanceof @TO@ InstanceofExpression@@value instanceof Number @AT@ 40903 @LENGTH@ 10
---------MOV SimpleType@@Number @TO@ InstanceofExpression@@value instanceof Number @AT@ 40914 @LENGTH@ 6


DEL MethodDeclaration@@private, static, Statement, MethodName:createStatement,  @AT@ 2410 @LENGTH@ 874
---DEL Modifier@@private @AT@ 2410 @LENGTH@ 7
---DEL Modifier@@static @AT@ 2418 @LENGTH@ 6
---DEL SimpleType@@Statement @AT@ 2425 @LENGTH@ 9
---DEL SimpleName@@MethodName:createStatement @AT@ 2435 @LENGTH@ 15
---DEL VariableDeclarationStatement@@Node rootNodes=Cypher.anyNode(ROOT_NODE_IDS); @AT@ 2457 @LENGTH@ 47
------DEL SimpleType@@Node @AT@ 2457 @LENGTH@ 4
------DEL VariableDeclarationFragment@@rootNodes=Cypher.anyNode(ROOT_NODE_IDS) @AT@ 2462 @LENGTH@ 41
---------DEL SimpleName@@rootNodes @AT@ 2462 @LENGTH@ 9
---------DEL MethodInvocation@@Cypher.anyNode(ROOT_NODE_IDS) @AT@ 2474 @LENGTH@ 29
------------DEL SimpleName@@Name:Cypher @AT@ 2474 @LENGTH@ 6
------------DEL SimpleName@@MethodName:anyNode:[ROOT_NODE_IDS] @AT@ 2481 @LENGTH@ 22
---------------DEL SimpleName@@ROOT_NODE_IDS @AT@ 2489 @LENGTH@ 13
---DEL VariableDeclarationStatement@@Node relatedNodes=Cypher.anyNode(RELATED_NODE_IDS); @AT@ 2507 @LENGTH@ 53
------DEL SimpleType@@Node @AT@ 2507 @LENGTH@ 4
------DEL VariableDeclarationFragment@@relatedNodes=Cypher.anyNode(RELATED_NODE_IDS) @AT@ 2512 @LENGTH@ 47
---------DEL SimpleName@@relatedNodes @AT@ 2512 @LENGTH@ 12
---------DEL MethodInvocation@@Cypher.anyNode(RELATED_NODE_IDS) @AT@ 2527 @LENGTH@ 32
------------DEL SimpleName@@Name:Cypher @AT@ 2527 @LENGTH@ 6
------------DEL SimpleName@@MethodName:anyNode:[RELATED_NODE_IDS] @AT@ 2534 @LENGTH@ 25
---------------DEL SimpleName@@RELATED_NODE_IDS @AT@ 2542 @LENGTH@ 16
---DEL VariableDeclarationStatement@@Relationship relationships=Cypher.anyNode().relationshipBetween(Cypher.anyNode()).named(RELATIONSHIP_IDS); @AT@ 2563 @LENGTH@ 108
------DEL SimpleType@@Relationship @AT@ 2563 @LENGTH@ 12
------DEL VariableDeclarationFragment@@relationships=Cypher.anyNode().relationshipBetween(Cypher.anyNode()).named(RELATIONSHIP_IDS) @AT@ 2576 @LENGTH@ 94
---------DEL SimpleName@@relationships @AT@ 2576 @LENGTH@ 13
---------DEL MethodInvocation@@Cypher.anyNode().relationshipBetween(Cypher.anyNode()).named(RELATIONSHIP_IDS) @AT@ 2592 @LENGTH@ 78
------------DEL MethodInvocation@@MethodName:relationshipBetween:[Cypher.anyNode()] @AT@ 2592 @LENGTH@ 54
---------------DEL MethodInvocation@@Cypher.anyNode() @AT@ 2629 @LENGTH@ 16
------------------DEL SimpleName@@Name:Cypher @AT@ 2629 @LENGTH@ 6
------------------DEL SimpleName@@MethodName:anyNode:[] @AT@ 2636 @LENGTH@ 9
------------DEL MethodInvocation@@MethodName:anyNode:[] @AT@ 2592 @LENGTH@ 16
------------DEL SimpleName@@Name:Cypher @AT@ 2592 @LENGTH@ 6
------------DEL SimpleName@@MethodName:named:[RELATIONSHIP_IDS] @AT@ 2647 @LENGTH@ 23
---------------DEL SimpleName@@RELATIONSHIP_IDS @AT@ 2653 @LENGTH@ 16
---DEL ReturnStatement@@MethodInvocation:Cypher.match(rootNodes).where(Functions.id(rootNodes).in(Cypher.parameter(ROOT_NODE_IDS))).optionalMatch(relationships).where(Functions.id(relationships).in(Cypher.parameter(RELATIONSHIP_IDS))).optionalMatch(relatedNodes).where(Functions.id(relatedNodes).in(Cypher.parameter(RELATED_NODE_IDS))).returning(rootNodes.as(Constants.NAME_OF_SYNTHESIZED_ROOT_NODE),Functions.collectDistinct(relationships).as(Constants.NAME_OF_SYNTHESIZED_RELATIONS),Functions.collectDistinct(relatedNodes).as(Constants.NAME_OF_SYNTHESIZED_RELATED_NODES)).build() @AT@ 2675 @LENGTH@ 606
------DEL MethodInvocation@@Cypher.match(rootNodes).where(Functions.id(rootNodes).in(Cypher.parameter(ROOT_NODE_IDS))).optionalMatch(relationships).where(Functions.id(relationships).in(Cypher.parameter(RELATIONSHIP_IDS))).optionalMatch(relatedNodes).where(Functions.id(relatedNodes).in(Cypher.parameter(RELATED_NODE_IDS))).returning(rootNodes.as(Constants.NAME_OF_SYNTHESIZED_ROOT_NODE),Functions.collectDistinct(relationships).as(Constants.NAME_OF_SYNTHESIZED_RELATIONS),Functions.collectDistinct(relatedNodes).as(Constants.NAME_OF_SYNTHESIZED_RELATED_NODES)).build() @AT@ 2682 @LENGTH@ 598
---------DEL MethodInvocation@@MethodName:returning:[rootNodes.as(Constants.NAME_OF_SYNTHESIZED_ROOT_NODE), Functions.collectDistinct(relationships).as(Constants.NAME_OF_SYNTHESIZED_RELATIONS), Functions.collectDistinct(relatedNodes).as(Constants.NAME_OF_SYNTHESIZED_RELATED_NODES)] @AT@ 2682 @LENGTH@ 590
------------DEL MethodInvocation@@rootNodes.as(Constants.NAME_OF_SYNTHESIZED_ROOT_NODE) @AT@ 3026 @LENGTH@ 53
---------------DEL SimpleName@@Name:rootNodes @AT@ 3026 @LENGTH@ 9
---------------DEL SimpleName@@MethodName:as:[Constants.NAME_OF_SYNTHESIZED_ROOT_NODE] @AT@ 3036 @LENGTH@ 43
------------------DEL QualifiedName@@Constants.NAME_OF_SYNTHESIZED_ROOT_NODE @AT@ 3039 @LENGTH@ 39
---------------------DEL SimpleName@@Constants @AT@ 3039 @LENGTH@ 9
---------------------DEL SimpleName@@NAME_OF_SYNTHESIZED_ROOT_NODE @AT@ 3049 @LENGTH@ 29
------------DEL MethodInvocation@@Functions.collectDistinct(relationships).as(Constants.NAME_OF_SYNTHESIZED_RELATIONS) @AT@ 3087 @LENGTH@ 84
---------------DEL MethodInvocation@@MethodName:collectDistinct:[relationships] @AT@ 3087 @LENGTH@ 40
------------------DEL SimpleName@@relationships @AT@ 3113 @LENGTH@ 13
---------------DEL SimpleName@@Name:Functions @AT@ 3087 @LENGTH@ 9
---------------DEL SimpleName@@MethodName:as:[Constants.NAME_OF_SYNTHESIZED_RELATIONS] @AT@ 3128 @LENGTH@ 43
------------------DEL QualifiedName@@Constants.NAME_OF_SYNTHESIZED_RELATIONS @AT@ 3131 @LENGTH@ 39
---------------------DEL SimpleName@@Constants @AT@ 3131 @LENGTH@ 9
---------------------DEL SimpleName@@NAME_OF_SYNTHESIZED_RELATIONS @AT@ 3141 @LENGTH@ 29
------------DEL MethodInvocation@@Functions.collectDistinct(relatedNodes).as(Constants.NAME_OF_SYNTHESIZED_RELATED_NODES) @AT@ 3179 @LENGTH@ 87
---------------DEL MethodInvocation@@MethodName:collectDistinct:[relatedNodes] @AT@ 3179 @LENGTH@ 39
------------------DEL SimpleName@@relatedNodes @AT@ 3205 @LENGTH@ 12
---------------DEL SimpleName@@Name:Functions @AT@ 3179 @LENGTH@ 9
---------------DEL SimpleName@@MethodName:as:[Constants.NAME_OF_SYNTHESIZED_RELATED_NODES] @AT@ 3219 @LENGTH@ 47
------------------DEL QualifiedName@@Constants.NAME_OF_SYNTHESIZED_RELATED_NODES @AT@ 3222 @LENGTH@ 43
---------------------DEL SimpleName@@Constants @AT@ 3222 @LENGTH@ 9
---------------------DEL SimpleName@@NAME_OF_SYNTHESIZED_RELATED_NODES @AT@ 3232 @LENGTH@ 33
---------DEL MethodInvocation@@MethodName:where:[Functions.id(relatedNodes).in(Cypher.parameter(RELATED_NODE_IDS))] @AT@ 2682 @LENGTH@ 321
------------DEL MethodInvocation@@Functions.id(relatedNodes).in(Cypher.parameter(RELATED_NODE_IDS)) @AT@ 2937 @LENGTH@ 65
---------------DEL MethodInvocation@@MethodName:id:[relatedNodes] @AT@ 2937 @LENGTH@ 26
------------------DEL SimpleName@@relatedNodes @AT@ 2950 @LENGTH@ 12
---------------DEL SimpleName@@Name:Functions @AT@ 2937 @LENGTH@ 9
---------------DEL SimpleName@@MethodName:in:[Cypher.parameter(RELATED_NODE_IDS)] @AT@ 2964 @LENGTH@ 38
------------------DEL MethodInvocation@@Cypher.parameter(RELATED_NODE_IDS) @AT@ 2967 @LENGTH@ 34
---------------------DEL SimpleName@@Name:Cypher @AT@ 2967 @LENGTH@ 6
---------------------DEL SimpleName@@MethodName:parameter:[RELATED_NODE_IDS] @AT@ 2974 @LENGTH@ 27
------------------------DEL SimpleName@@RELATED_NODE_IDS @AT@ 2984 @LENGTH@ 16
---------DEL MethodInvocation@@MethodName:optionalMatch:[relatedNodes] @AT@ 2682 @LENGTH@ 242
------------DEL SimpleName@@relatedNodes @AT@ 2911 @LENGTH@ 12
---------DEL MethodInvocation@@MethodName:where:[Functions.id(relationships).in(Cypher.parameter(RELATIONSHIP_IDS))] @AT@ 2682 @LENGTH@ 209
------------DEL MethodInvocation@@Functions.id(relationships).in(Cypher.parameter(RELATIONSHIP_IDS)) @AT@ 2824 @LENGTH@ 66
---------------DEL MethodInvocation@@MethodName:id:[relationships] @AT@ 2824 @LENGTH@ 27
------------------DEL SimpleName@@relationships @AT@ 2837 @LENGTH@ 13
---------------DEL SimpleName@@Name:Functions @AT@ 2824 @LENGTH@ 9
---------------DEL SimpleName@@MethodName:in:[Cypher.parameter(RELATIONSHIP_IDS)] @AT@ 2852 @LENGTH@ 38
------------------DEL MethodInvocation@@Cypher.parameter(RELATIONSHIP_IDS) @AT@ 2855 @LENGTH@ 34
---------------------DEL SimpleName@@Name:Cypher @AT@ 2855 @LENGTH@ 6
---------------------DEL SimpleName@@MethodName:parameter:[RELATIONSHIP_IDS] @AT@ 2862 @LENGTH@ 27
------------------------DEL SimpleName@@RELATIONSHIP_IDS @AT@ 2872 @LENGTH@ 16
---------DEL MethodInvocation@@MethodName:optionalMatch:[relationships] @AT@ 2682 @LENGTH@ 129
------------DEL SimpleName@@relationships @AT@ 2797 @LENGTH@ 13
---------DEL MethodInvocation@@MethodName:where:[Functions.id(rootNodes).in(Cypher.parameter(ROOT_NODE_IDS))] @AT@ 2682 @LENGTH@ 95
------------DEL MethodInvocation@@Functions.id(rootNodes).in(Cypher.parameter(ROOT_NODE_IDS)) @AT@ 2717 @LENGTH@ 59
---------------DEL MethodInvocation@@MethodName:id:[rootNodes] @AT@ 2717 @LENGTH@ 23
------------------DEL SimpleName@@rootNodes @AT@ 2730 @LENGTH@ 9
---------------DEL SimpleName@@Name:Functions @AT@ 2717 @LENGTH@ 9
---------------DEL SimpleName@@MethodName:in:[Cypher.parameter(ROOT_NODE_IDS)] @AT@ 2741 @LENGTH@ 35
------------------DEL MethodInvocation@@Cypher.parameter(ROOT_NODE_IDS) @AT@ 2744 @LENGTH@ 31
---------------------DEL SimpleName@@Name:Cypher @AT@ 2744 @LENGTH@ 6
---------------------DEL SimpleName@@MethodName:parameter:[ROOT_NODE_IDS] @AT@ 2751 @LENGTH@ 24
------------------------DEL SimpleName@@ROOT_NODE_IDS @AT@ 2761 @LENGTH@ 13
---------DEL MethodInvocation@@MethodName:match:[rootNodes] @AT@ 2682 @LENGTH@ 23
------------DEL SimpleName@@rootNodes @AT@ 2695 @LENGTH@ 9
---------DEL SimpleName@@Name:Cypher @AT@ 2682 @LENGTH@ 6
---------DEL SimpleName@@MethodName:build:[] @AT@ 3273 @LENGTH@ 7


UPD ReturnStatement@@MethodInvocation:mappingContext.getPersistentPropertyPath(PropertyPath.from(sourceProperty.getName(),entity.getTypeInformation())) @TO@ MethodInvocation:mappingContext.getPersistentPropertyPath(PropertyPath.from(Pattern.quote(sourceProperty.getName()),entity.getTypeInformation())) @AT@ 34986 @LENGTH@ 129
---UPD MethodInvocation@@mappingContext.getPersistentPropertyPath(PropertyPath.from(sourceProperty.getName(),entity.getTypeInformation())) @TO@ mappingContext.getPersistentPropertyPath(PropertyPath.from(Pattern.quote(sourceProperty.getName()),entity.getTypeInformation())) @AT@ 34993 @LENGTH@ 121
------UPD SimpleName@@MethodName:getPersistentPropertyPath:[PropertyPath.from(sourceProperty.getName(),entity.getTypeInformation())] @TO@ MethodName:getPersistentPropertyPath:[PropertyPath.from(Pattern.quote(sourceProperty.getName()),entity.getTypeInformation())] @AT@ 35015 @LENGTH@ 99
---------UPD MethodInvocation@@PropertyPath.from(sourceProperty.getName(),entity.getTypeInformation()) @TO@ PropertyPath.from(Pattern.quote(sourceProperty.getName()),entity.getTypeInformation()) @AT@ 35041 @LENGTH@ 72
------------UPD SimpleName@@MethodName:from:[sourceProperty.getName(), entity.getTypeInformation()] @TO@ MethodName:from:[Pattern.quote(sourceProperty.getName()), entity.getTypeInformation()] @AT@ 35054 @LENGTH@ 59
---------------INS MethodInvocation@@Pattern.quote(sourceProperty.getName()) @TO@ SimpleName@@MethodName:from:[sourceProperty.getName(), entity.getTypeInformation()] @AT@ 35059 @LENGTH@ 39
------------------INS SimpleName@@Name:Pattern @TO@ MethodInvocation@@Pattern.quote(sourceProperty.getName()) @AT@ 35059 @LENGTH@ 7
------------------INS SimpleName@@MethodName:quote:[sourceProperty.getName()] @TO@ MethodInvocation@@Pattern.quote(sourceProperty.getName()) @AT@ 35067 @LENGTH@ 31
---------------------MOV MethodInvocation@@sourceProperty.getName() @TO@ SimpleName@@MethodName:quote:[sourceProperty.getName()] @AT@ 35059 @LENGTH@ 24


UPD ExpressionStatement@@MethodInvocation:LOG.debug("Compiling code:\n\n" + code.getCode() + "\n") @TO@ MethodInvocation:LOG.debug("Compiling code:\n\n{}\n",code.getCode()) @AT@ 3492 @LENGTH@ 57
---UPD MethodInvocation@@LOG.debug("Compiling code:\n\n" + code.getCode() + "\n") @TO@ LOG.debug("Compiling code:\n\n{}\n",code.getCode()) @AT@ 3492 @LENGTH@ 56
------UPD SimpleName@@MethodName:debug:["Compiling code:\n\n" + code.getCode() + "\n"] @TO@ MethodName:debug:["Compiling code:\n\n{}\n", code.getCode()] @AT@ 3496 @LENGTH@ 52
---------DEL InfixExpression@@"Compiling code:\n\n" + code.getCode() + "\n" @AT@ 3502 @LENGTH@ 45
------------DEL StringLiteral@@"Compiling code:\n\n" @AT@ 3502 @LENGTH@ 21
------------DEL Operator@@+ @AT@ 3523 @LENGTH@ 1
------------DEL MethodInvocation@@code.getCode() @AT@ 3526 @LENGTH@ 14
------------DEL StringLiteral@@"\n" @AT@ 3543 @LENGTH@ 4
---------INS StringLiteral@@"Compiling code:\n\n{}\n" @TO@ SimpleName@@MethodName:debug:["Compiling code:\n\n" + code.getCode() + "\n"] @AT@ 3502 @LENGTH@ 25
---------INS MethodInvocation@@code.getCode() @TO@ SimpleName@@MethodName:debug:["Compiling code:\n\n" + code.getCode() + "\n"] @AT@ 3529 @LENGTH@ 14
------------MOV SimpleName@@Name:code @TO@ MethodInvocation@@code.getCode() @AT@ 3526 @LENGTH@ 4
------------MOV SimpleName@@MethodName:getCode:[] @TO@ MethodInvocation@@code.getCode() @AT@ 3531 @LENGTH@ 9


UPD ReturnStatement@@ClassInstanceCreation:new Schema.Field(name,createAvroSchema(typeInfo),comment,null) @TO@ ClassInstanceCreation:new Schema.Field(name,createAvroSchema(typeInfo),comment,JsonProperties.NULL_VALUE) @AT@ 2945 @LENGTH@ 73
---UPD ClassInstanceCreation@@Schema.Field[name, createAvroSchema(typeInfo), comment, null] @TO@ Schema.Field[name, createAvroSchema(typeInfo), comment, JsonProperties.NULL_VALUE] @AT@ 2952 @LENGTH@ 65
------DEL NullLiteral@@null @AT@ 3012 @LENGTH@ 4
------INS QualifiedName@@JsonProperties.NULL_VALUE @TO@ ClassInstanceCreation@@Schema.Field[name, createAvroSchema(typeInfo), comment, null] @AT@ 3051 @LENGTH@ 25
---------INS SimpleName@@JsonProperties @TO@ QualifiedName@@JsonProperties.NULL_VALUE @AT@ 3051 @LENGTH@ 14
---------INS SimpleName@@NULL_VALUE @TO@ QualifiedName@@JsonProperties.NULL_VALUE @AT@ 3066 @LENGTH@ 10


UPD IfStatement@@if (restLen == 1) {  headers.remove(keyword);} else {  final byte[] rest=new byte[restLen];  final int got=IOUtils.readFully(inputStream,rest);  if (got != restLen) {    throw new IOException("Failed to read " + "Paxheader. Expected " + restLen + " bytes, read "+ got);  }  final String value=new String(rest,0,restLen - 1,StandardCharsets.UTF_8);  headers.put(keyword,value);  if (keyword.equals("GNU.sparse.offset")) {    if (offset != null) {      sparseHeaders.add(new TarArchiveStructSparse(offset,0));    }    offset=Long.valueOf(value);  }  if (keyword.equals("GNU.sparse.numbytes")) {    if (offset == null) {      throw new IOException("Failed to read Paxheader." + "GNU.sparse.offset is expected before GNU.sparse.numbytes shows up.");    }    sparseHeaders.add(new TarArchiveStructSparse(offset,Long.parseLong(value)));    offset=null;  }} @TO@ if (restLen <= 1) {  headers.remove(keyword);} else {  final byte[] rest=new byte[restLen];  final int got=IOUtils.readFully(inputStream,rest);  if (got != restLen) {    throw new IOException("Failed to read " + "Paxheader. Expected " + restLen + " bytes, read "+ got);  }  final String value=new String(rest,0,restLen - 1,StandardCharsets.UTF_8);  headers.put(keyword,value);  if (keyword.equals("GNU.sparse.offset")) {    if (offset != null) {      sparseHeaders.add(new TarArchiveStructSparse(offset,0));    }    offset=Long.valueOf(value);  }  if (keyword.equals("GNU.sparse.numbytes")) {    if (offset == null) {      throw new IOException("Failed to read Paxheader." + "GNU.sparse.offset is expected before GNU.sparse.numbytes shows up.");    }    sparseHeaders.add(new TarArchiveStructSparse(offset,Long.parseLong(value)));    offset=null;  }} @AT@ 27345 @LENGTH@ 2137
---UPD InfixExpression@@restLen == 1 @TO@ restLen <= 1 @AT@ 27349 @LENGTH@ 12
------UPD Operator@@== @TO@ <= @AT@ 27356 @LENGTH@ 2


DEL MethodDeclaration@@Tuple, MethodName:dump, String replPolicy, String oldReplPolicy, List<String> withClauseOptions, Throwable,  @AT@ 11744 @LENGTH@ 423
---DEL SimpleType@@Tuple @AT@ 11738 @LENGTH@ 5
---DEL SimpleName@@MethodName:dump @AT@ 11744 @LENGTH@ 4
---DEL SingleVariableDeclaration@@String replPolicy @AT@ 11749 @LENGTH@ 17
------DEL SimpleType@@String @AT@ 11749 @LENGTH@ 6
------DEL SimpleName@@replPolicy @AT@ 11756 @LENGTH@ 10
---DEL SingleVariableDeclaration@@String oldReplPolicy @AT@ 11768 @LENGTH@ 20
------DEL SimpleType@@String @AT@ 11768 @LENGTH@ 6
------DEL SimpleName@@oldReplPolicy @AT@ 11775 @LENGTH@ 13
---DEL SingleVariableDeclaration@@List<String> withClauseOptions @AT@ 11790 @LENGTH@ 30
------DEL ParameterizedType@@List<String> @AT@ 11790 @LENGTH@ 12
---------DEL SimpleType@@List @AT@ 11790 @LENGTH@ 4
---------DEL SimpleType@@String @AT@ 11795 @LENGTH@ 6
------DEL SimpleName@@withClauseOptions @AT@ 11803 @LENGTH@ 17
---DEL SimpleType@@Throwable @AT@ 11839 @LENGTH@ 9
---DEL VariableDeclarationStatement@@String dumpCommand="REPL DUMP " + replPolicy + (oldReplPolicy == null ? "" : " REPLACE " + oldReplPolicy); @AT@ 11855 @LENGTH@ 140
------DEL SimpleType@@String @AT@ 11855 @LENGTH@ 6
------DEL VariableDeclarationFragment@@dumpCommand="REPL DUMP " + replPolicy + (oldReplPolicy == null ? "" : " REPLACE " + oldReplPolicy) @AT@ 11862 @LENGTH@ 132
---------DEL SimpleName@@dumpCommand @AT@ 11862 @LENGTH@ 11
---------DEL InfixExpression@@"REPL DUMP " + replPolicy + (oldReplPolicy == null ? "" : " REPLACE " + oldReplPolicy) @AT@ 11888 @LENGTH@ 106
------------DEL StringLiteral@@"REPL DUMP " @AT@ 11888 @LENGTH@ 12
------------DEL Operator@@+ @AT@ 11900 @LENGTH@ 1
------------DEL SimpleName@@replPolicy @AT@ 11903 @LENGTH@ 10
------------DEL ParenthesizedExpression@@(oldReplPolicy == null ? "" : " REPLACE " + oldReplPolicy) @AT@ 11936 @LENGTH@ 58
---------------DEL ConditionalExpression@@oldReplPolicy == null ? "" : " REPLACE " + oldReplPolicy @AT@ 11937 @LENGTH@ 56
------------------DEL InfixExpression@@oldReplPolicy == null @AT@ 11937 @LENGTH@ 21
---------------------DEL SimpleName@@oldReplPolicy @AT@ 11937 @LENGTH@ 13
---------------------DEL Operator@@== @AT@ 11950 @LENGTH@ 2
---------------------DEL NullLiteral@@null @AT@ 11954 @LENGTH@ 4
------------------DEL StringLiteral@@"" @AT@ 11961 @LENGTH@ 2
------------------DEL InfixExpression@@" REPLACE " + oldReplPolicy @AT@ 11966 @LENGTH@ 27
---------------------DEL StringLiteral@@" REPLACE " @AT@ 11966 @LENGTH@ 11
---------------------DEL Operator@@+ @AT@ 11977 @LENGTH@ 1
---------------------DEL SimpleName@@oldReplPolicy @AT@ 11980 @LENGTH@ 13
---DEL IfStatement@@if (!withClauseOptions.isEmpty()) {  dumpCommand+=" with (" + StringUtils.join(withClauseOptions,",") + ")";} @AT@ 12000 @LENGTH@ 122
------DEL PrefixExpression@@!withClauseOptions.isEmpty() @AT@ 12004 @LENGTH@ 28
---------DEL Operator@@! @AT@ 12004 @LENGTH@ 1
---------DEL MethodInvocation@@withClauseOptions.isEmpty() @AT@ 12005 @LENGTH@ 27
------------DEL SimpleName@@Name:withClauseOptions @AT@ 12005 @LENGTH@ 17
------------DEL SimpleName@@MethodName:isEmpty:[] @AT@ 12023 @LENGTH@ 9
------DEL Block@@ThenBody:{  dumpCommand+=" with (" + StringUtils.join(withClauseOptions,",") + ")";} @AT@ 12034 @LENGTH@ 88
---------DEL ExpressionStatement@@Assignment:dumpCommand+=" with (" + StringUtils.join(withClauseOptions,",") + ")" @AT@ 12042 @LENGTH@ 74
------------DEL Assignment@@dumpCommand+=" with (" + StringUtils.join(withClauseOptions,",") + ")" @AT@ 12042 @LENGTH@ 73
---------------DEL SimpleName@@dumpCommand @AT@ 12042 @LENGTH@ 11
---------------DEL Operator@@+= @AT@ 12053 @LENGTH@ 2
---------------DEL InfixExpression@@" with (" + StringUtils.join(withClauseOptions,",") + ")" @AT@ 12057 @LENGTH@ 58
------------------DEL StringLiteral@@" with (" @AT@ 12057 @LENGTH@ 9
------------------DEL Operator@@+ @AT@ 12066 @LENGTH@ 1
------------------DEL MethodInvocation@@StringUtils.join(withClauseOptions,",") @AT@ 12069 @LENGTH@ 40
---------------------DEL SimpleName@@Name:StringUtils @AT@ 12069 @LENGTH@ 11
---------------------DEL SimpleName@@MethodName:join:[withClauseOptions, ","] @AT@ 12081 @LENGTH@ 28
------------------------DEL SimpleName@@withClauseOptions @AT@ 12086 @LENGTH@ 17
------------------------DEL StringLiteral@@"," @AT@ 12105 @LENGTH@ 3
------------------DEL StringLiteral@@")" @AT@ 12112 @LENGTH@ 3
---DEL ReturnStatement@@MethodInvocation:dumpWithCommand(dumpCommand) @AT@ 12127 @LENGTH@ 36
------DEL MethodInvocation@@dumpWithCommand(dumpCommand) @AT@ 12134 @LENGTH@ 28
---------DEL SimpleName@@MethodName:dumpWithCommand:[dumpCommand] @AT@ 12134 @LENGTH@ 28
------------DEL SimpleName@@dumpCommand @AT@ 12150 @LENGTH@ 11


UPD SwitchStatement@@switch (xcode) {case XMLStreamConstants.START_ELEMENT:  depth++;QName name=reader.getName();if (LOG.isTraceEnabled()) {LOG.trace("se={}; depth={}; trackdepth={}",name,depth,trackdepth);}String token=getCurrentText();if (!compliant) {if (token != null && token.startsWith("<") && !token.startsWith("<?")) {LOG.error("XMLStreamReader not supporting Location");throw new XMLStreamException("reader not supporting Location");}compliant=true;}LOG.trace("token={}",token);if (!backtrack && mode == 'w') {pushSegment(name,token);}pushName(name);if (mode == 'i') {pushNamespaces(reader);}backtrack=false;if (current().matches(name)) {if (isBottom()) {token=getCurrentToken();backtrack=true;trackdepth=depth;if (group > 1) {tokens.add(token);if (group == tokens.size()) {return getGroupedToken();}} else {return token;}} else {down();}} else if (isDoS()) {} else {readCurrent(false);}break;case XMLStreamConstants.END_ELEMENT:if ((backtrack || (trackdepth > 0 && depth == trackdepth)) && (mode == 'w' && group > 1 && !tokens.isEmpty())) {code=XMLStreamConstants.END_ELEMENT;return getGroupedToken();}depth--;QName endname=reader.getName();LOG.trace("ee={}",endname);popName();if (mode == 'i') {popNamespaces();}int pc=0;if (backtrack || (trackdepth > 0 && depth == trackdepth - 1)) {backtrack=true;trackdepth--;if (mode == 'w') {while (!endname.equals(peekLog())) {pc++;popLog();}}}if (backtrack) {if (mode == 'w') {for (int i=0; i < pc; i++) {popSegment();}}if ((ancestor() == null && !isTop()) || (ancestor() != null && ancestor().matches(endname))) {up();}}break;case XMLStreamConstants.END_DOCUMENT:LOG.trace("depth={}",depth);if (group > 1 && !tokens.isEmpty()) {code=XMLStreamConstants.END_DOCUMENT;return getGroupedToken();}break;default :break;} @TO@ switch (xcode) {case XMLStreamConstants.START_ELEMENT:  depth++;QName name=reader.getName();if (LOG.isTraceEnabled()) {LOG.trace("se={}; depth={}; trackdepth={}",name,depth,trackdepth);}String token=getCurrentText();if (!compliant) {if (token != null && token.startsWith("<") && !token.startsWith("<?")) {LOG.error("XMLStreamReader not supporting Location");throw new XMLStreamException("reader not supporting Location");}compliant=true;}LOG.trace("token={}",token);if (!backtrack && mode == 'w') {pushSegment(name,token);}pushName(name);if (mode == 'i') {pushNamespaces(reader);}backtrack=false;if (current().matches(name)) {if (isBottom()) {token=getCurrentToken();backtrack=true;trackdepth=depth;if (group > 1) {tokens.add(token);if (group == tokens.size()) {return getGroupedToken();}} else {return token;}} else {down();}} else if (isDoS()) {} else {readCurrent(false);}break;case XMLStreamConstants.END_ELEMENT:if ((backtrack || trackdepth > 0 && depth == trackdepth) && mode == 'w' && group > 1 && !tokens.isEmpty()) {code=XMLStreamConstants.END_ELEMENT;return getGroupedToken();}depth--;QName endname=reader.getName();LOG.trace("ee={}",endname);popName();if (mode == 'i') {popNamespaces();}int pc=0;if (backtrack || trackdepth > 0 && depth == trackdepth - 1) {backtrack=true;trackdepth--;if (mode == 'w') {while (!endname.equals(peekLog())) {pc++;popLog();}}}if (backtrack) {if (mode == 'w') {for (int i=0; i < pc; i++) {popSegment();}}if (ancestor() == null && !isTop() || ancestor() != null && ancestor().matches(endname)) {up();}}break;case XMLStreamConstants.END_DOCUMENT:LOG.trace("depth={}",depth);if (group > 1 && !tokens.isEmpty()) {code=XMLStreamConstants.END_DOCUMENT;return getGroupedToken();}break;default :break;} @AT@ 15746 @LENGTH@ 4900
---UPD IfStatement@@if ((backtrack || (trackdepth > 0 && depth == trackdepth)) && (mode == 'w' && group > 1 && !tokens.isEmpty())) {  code=XMLStreamConstants.END_ELEMENT;  return getGroupedToken();} @TO@ if ((backtrack || trackdepth > 0 && depth == trackdepth) && mode == 'w' && group > 1 && !tokens.isEmpty()) {  code=XMLStreamConstants.END_ELEMENT;  return getGroupedToken();} @AT@ 18322 @LENGTH@ 368
------UPD InfixExpression@@(backtrack || (trackdepth > 0 && depth == trackdepth)) && (mode == 'w' && group > 1 && !tokens.isEmpty()) @TO@ (backtrack || trackdepth > 0 && depth == trackdepth) && mode == 'w' && group > 1 && !tokens.isEmpty() @AT@ 18326 @LENGTH@ 137
---------DEL ParenthesizedExpression@@(backtrack || (trackdepth > 0 && depth == trackdepth)) @AT@ 18326 @LENGTH@ 54
---------DEL Operator@@&& @AT@ 18380 @LENGTH@ 2
---------DEL ParenthesizedExpression@@(mode == 'w' && group > 1 && !tokens.isEmpty()) @AT@ 18416 @LENGTH@ 47
------------DEL InfixExpression@@mode == 'w' && group > 1 && !tokens.isEmpty() @AT@ 18417 @LENGTH@ 45
---------MOV InfixExpression@@mode == 'w' && group > 1 @TO@ InfixExpression@@(backtrack || (trackdepth > 0 && depth == trackdepth)) && (mode == 'w' && group > 1 && !tokens.isEmpty()) @AT@ 18417 @LENGTH@ 24
------------MOV InfixExpression@@backtrack || (trackdepth > 0 && depth == trackdepth) @TO@ InfixExpression@@mode == 'w' && group > 1 @AT@ 18327 @LENGTH@ 52
---------------UPD SimpleName@@backtrack @TO@ mode @AT@ 18327 @LENGTH@ 9
---------------UPD Operator@@|| @TO@ == @AT@ 18336 @LENGTH@ 2
---------------UPD ParenthesizedExpression@@(trackdepth > 0 && depth == trackdepth) @TO@ (backtrack || trackdepth > 0 && depth == trackdepth) @AT@ 18340 @LENGTH@ 39
------------------INS InfixExpression@@backtrack || trackdepth > 0 && depth == trackdepth @TO@ ParenthesizedExpression@@(trackdepth > 0 && depth == trackdepth) @AT@ 18327 @LENGTH@ 50
---------------------INS SimpleName@@backtrack @TO@ InfixExpression@@backtrack || trackdepth > 0 && depth == trackdepth @AT@ 18327 @LENGTH@ 9
---------------------INS Operator@@|| @TO@ InfixExpression@@backtrack || trackdepth > 0 && depth == trackdepth @AT@ 18336 @LENGTH@ 2
---------------------MOV InfixExpression@@trackdepth > 0 && depth == trackdepth @TO@ InfixExpression@@backtrack || trackdepth > 0 && depth == trackdepth @AT@ 18341 @LENGTH@ 37
------------------INS InfixExpression@@backtrack || trackdepth > 0 && depth == trackdepth @TO@ ParenthesizedExpression@@(trackdepth > 0 && depth == trackdepth) @AT@ 18327 @LENGTH@ 50
---------------------INS SimpleName@@backtrack @TO@ InfixExpression@@backtrack || trackdepth > 0 && depth == trackdepth @AT@ 18327 @LENGTH@ 9
---------------------INS Operator@@|| @TO@ InfixExpression@@backtrack || trackdepth > 0 && depth == trackdepth @AT@ 18336 @LENGTH@ 2
---------------------MOV InfixExpression@@trackdepth > 0 && depth == trackdepth @TO@ InfixExpression@@backtrack || trackdepth > 0 && depth == trackdepth @AT@ 18341 @LENGTH@ 37
---------------INS Operator@@&& @TO@ InfixExpression@@backtrack || (trackdepth > 0 && depth == trackdepth) @AT@ 18378 @LENGTH@ 2
---------------INS InfixExpression@@mode == 'w' @TO@ InfixExpression@@backtrack || (trackdepth > 0 && depth == trackdepth) @AT@ 18414 @LENGTH@ 11
------------------MOV SimpleName@@backtrack @TO@ InfixExpression@@mode == 'w' @AT@ 18327 @LENGTH@ 9
------------------MOV SimpleName@@backtrack @TO@ InfixExpression@@mode == 'w' @AT@ 18327 @LENGTH@ 9
------------------MOV Operator@@|| @TO@ InfixExpression@@mode == 'w' @AT@ 18336 @LENGTH@ 2
------------------MOV Operator@@|| @TO@ InfixExpression@@mode == 'w' @AT@ 18336 @LENGTH@ 2
------------------INS CharacterLiteral@@'w' @TO@ InfixExpression@@mode == 'w' @AT@ 18422 @LENGTH@ 3
------------DEL InfixExpression@@mode == 'w' @AT@ 18417 @LENGTH@ 11
---------------DEL SimpleName@@mode @AT@ 18417 @LENGTH@ 4
---------------DEL Operator@@== @AT@ 18421 @LENGTH@ 2
---------------DEL CharacterLiteral@@'w' @AT@ 18425 @LENGTH@ 3
---------MOV Operator@@&& @TO@ InfixExpression@@(backtrack || (trackdepth > 0 && depth == trackdepth)) && (mode == 'w' && group > 1 && !tokens.isEmpty()) @AT@ 18441 @LENGTH@ 2
---------MOV PrefixExpression@@!tokens.isEmpty() @TO@ InfixExpression@@(backtrack || (trackdepth > 0 && depth == trackdepth)) && (mode == 'w' && group > 1 && !tokens.isEmpty()) @AT@ 18445 @LENGTH@ 17
---UPD IfStatement@@if (backtrack || (trackdepth > 0 && depth == trackdepth - 1)) {  backtrack=true;  trackdepth--;  if (mode == 'w') {    while (!endname.equals(peekLog())) {      pc++;      popLog();    }  }} @TO@ if (backtrack || trackdepth > 0 && depth == trackdepth - 1) {  backtrack=true;  trackdepth--;  if (mode == 'w') {    while (!endname.equals(peekLog())) {      pc++;      popLog();    }  }} @AT@ 19047 @LENGTH@ 542
------UPD InfixExpression@@backtrack || (trackdepth > 0 && depth == trackdepth - 1) @TO@ backtrack || trackdepth > 0 && depth == trackdepth - 1 @AT@ 19051 @LENGTH@ 56
---------DEL ParenthesizedExpression@@(trackdepth > 0 && depth == trackdepth - 1) @AT@ 19064 @LENGTH@ 43
---------MOV InfixExpression@@trackdepth > 0 && depth == trackdepth - 1 @TO@ InfixExpression@@backtrack || (trackdepth > 0 && depth == trackdepth - 1) @AT@ 19065 @LENGTH@ 41
---UPD IfStatement@@if (backtrack) {  if (mode == 'w') {    for (int i=0; i < pc; i++) {      popSegment();    }  }  if ((ancestor() == null && !isTop()) || (ancestor() != null && ancestor().matches(endname))) {    up();  }} @TO@ if (backtrack) {  if (mode == 'w') {    for (int i=0; i < pc; i++) {      popSegment();    }  }  if (ancestor() == null && !isTop() || ancestor() != null && ancestor().matches(endname)) {    up();  }} @AT@ 19615 @LENGTH@ 494
------UPD Block@@ThenBody:{  if (mode == 'w') {    for (int i=0; i < pc; i++) {      popSegment();    }  }  if ((ancestor() == null && !isTop()) || (ancestor() != null && ancestor().matches(endname))) {    up();  }} @TO@ ThenBody:{  if (mode == 'w') {    for (int i=0; i < pc; i++) {      popSegment();    }  }  if (ancestor() == null && !isTop() || ancestor() != null && ancestor().matches(endname)) {    up();  }} @AT@ 19630 @LENGTH@ 479
---------UPD IfStatement@@if ((ancestor() == null && !isTop()) || (ancestor() != null && ancestor().matches(endname))) {  up();} @TO@ if (ancestor() == null && !isTop() || ancestor() != null && ancestor().matches(endname)) {  up();} @AT@ 19885 @LENGTH@ 198
------------UPD InfixExpression@@(ancestor() == null && !isTop()) || (ancestor() != null && ancestor().matches(endname)) @TO@ ancestor() == null && !isTop() || ancestor() != null && ancestor().matches(endname) @AT@ 19889 @LENGTH@ 123
---------------DEL ParenthesizedExpression@@(ancestor() == null && !isTop()) @AT@ 19889 @LENGTH@ 32
---------------MOV InfixExpression@@ancestor() == null && !isTop() @TO@ InfixExpression@@(ancestor() == null && !isTop()) || (ancestor() != null && ancestor().matches(endname)) @AT@ 19890 @LENGTH@ 30
---------------DEL ParenthesizedExpression@@(ancestor() != null && ancestor().matches(endname)) @AT@ 19961 @LENGTH@ 51
---------------MOV InfixExpression@@ancestor() != null && ancestor().matches(endname) @TO@ InfixExpression@@(ancestor() == null && !isTop()) || (ancestor() != null && ancestor().matches(endname)) @AT@ 19962 @LENGTH@ 49


UPD VariableDeclarationStatement@@HalHandlerInstantiator instantiator=new HalHandlerInstantiator(defaultedRelProvider,curieProvider.getIfUnique(() -> new DefaultCurieProvider(Collections.emptyMap())),resolver.getObject(),halConfiguration); @TO@ HalHandlerInstantiator instantiator=new HalHandlerInstantiator(defaultedRelProvider,curieProvider.getIfUnique(() -> new DefaultCurieProvider(Collections.emptyMap())),resolver.getObject(),halConfiguration,applicationContext.getAutowireCapableBeanFactory()); @AT@ 26085 @LENGTH@ 218
---UPD VariableDeclarationFragment@@instantiator=new HalHandlerInstantiator(defaultedRelProvider,curieProvider.getIfUnique(() -> new DefaultCurieProvider(Collections.emptyMap())),resolver.getObject(),halConfiguration) @TO@ instantiator=new HalHandlerInstantiator(defaultedRelProvider,curieProvider.getIfUnique(() -> new DefaultCurieProvider(Collections.emptyMap())),resolver.getObject(),halConfiguration,applicationContext.getAutowireCapableBeanFactory()) @AT@ 26108 @LENGTH@ 194
------UPD ClassInstanceCreation@@HalHandlerInstantiator[defaultedRelProvider, curieProvider.getIfUnique(() -> new DefaultCurieProvider(Collections.emptyMap())), resolver.getObject(), halConfiguration] @TO@ HalHandlerInstantiator[defaultedRelProvider, curieProvider.getIfUnique(() -> new DefaultCurieProvider(Collections.emptyMap())), resolver.getObject(), halConfiguration, applicationContext.getAutowireCapableBeanFactory()] @AT@ 26123 @LENGTH@ 179
---------INS MethodInvocation@@applicationContext.getAutowireCapableBeanFactory() @TO@ ClassInstanceCreation@@HalHandlerInstantiator[defaultedRelProvider, curieProvider.getIfUnique(() -> new DefaultCurieProvider(Collections.emptyMap())), resolver.getObject(), halConfiguration] @AT@ 26232 @LENGTH@ 50
------------INS SimpleName@@Name:applicationContext @TO@ MethodInvocation@@applicationContext.getAutowireCapableBeanFactory() @AT@ 26232 @LENGTH@ 18
------------INS SimpleName@@MethodName:getAutowireCapableBeanFactory:[] @TO@ MethodInvocation@@applicationContext.getAutowireCapableBeanFactory() @AT@ 26251 @LENGTH@ 31


UPD ExpressionStatement@@Assignment:this.cypherBasedProjection=CypherdslStatementExecutor.class.isAssignableFrom(declaringClass) || ReactiveCypherdslStatementExecutor.class.isAssignableFrom(declaringClass) @TO@ Assignment:this.cypherBasedProjection=ClassUtils.hasMethod(CypherdslStatementExecutor.class,method) || ClassUtils.hasMethod(ReactiveCypherdslStatementExecutor.class,method) @AT@ 2560 @LENGTH@ 172
---UPD Assignment@@this.cypherBasedProjection=CypherdslStatementExecutor.class.isAssignableFrom(declaringClass) || ReactiveCypherdslStatementExecutor.class.isAssignableFrom(declaringClass) @TO@ this.cypherBasedProjection=ClassUtils.hasMethod(CypherdslStatementExecutor.class,method) || ClassUtils.hasMethod(ReactiveCypherdslStatementExecutor.class,method) @AT@ 2560 @LENGTH@ 171
------UPD InfixExpression@@CypherdslStatementExecutor.class.isAssignableFrom(declaringClass) || ReactiveCypherdslStatementExecutor.class.isAssignableFrom(declaringClass) @TO@ ClassUtils.hasMethod(CypherdslStatementExecutor.class,method) || ClassUtils.hasMethod(ReactiveCypherdslStatementExecutor.class,method) @AT@ 2589 @LENGTH@ 142
---------UPD MethodInvocation@@CypherdslStatementExecutor.class.isAssignableFrom(declaringClass) @TO@ ClassUtils.hasMethod(CypherdslStatementExecutor.class,method) @AT@ 2589 @LENGTH@ 65
------------DEL TypeLiteral@@CypherdslStatementExecutor.class @AT@ 2589 @LENGTH@ 32
------------DEL SimpleName@@MethodName:isAssignableFrom:[declaringClass] @AT@ 2622 @LENGTH@ 32
---------------DEL SimpleName@@declaringClass @AT@ 2639 @LENGTH@ 14
------------INS SimpleName@@Name:ClassUtils @TO@ MethodInvocation@@CypherdslStatementExecutor.class.isAssignableFrom(declaringClass) @AT@ 2633 @LENGTH@ 10
------------INS SimpleName@@MethodName:hasMethod:[CypherdslStatementExecutor.class, method] @TO@ MethodInvocation@@CypherdslStatementExecutor.class.isAssignableFrom(declaringClass) @AT@ 2644 @LENGTH@ 51
---------------INS TypeLiteral@@CypherdslStatementExecutor.class @TO@ SimpleName@@MethodName:hasMethod:[CypherdslStatementExecutor.class, method] @AT@ 2654 @LENGTH@ 32
---------------INS SimpleName@@method @TO@ SimpleName@@MethodName:hasMethod:[CypherdslStatementExecutor.class, method] @AT@ 2688 @LENGTH@ 6
---------UPD MethodInvocation@@ReactiveCypherdslStatementExecutor.class.isAssignableFrom(declaringClass) @TO@ ClassUtils.hasMethod(ReactiveCypherdslStatementExecutor.class,method) @AT@ 2658 @LENGTH@ 73
------------DEL TypeLiteral@@ReactiveCypherdslStatementExecutor.class @AT@ 2658 @LENGTH@ 40
------------DEL SimpleName@@MethodName:isAssignableFrom:[declaringClass] @AT@ 2699 @LENGTH@ 32
---------------DEL SimpleName@@declaringClass @AT@ 2716 @LENGTH@ 14
------------INS SimpleName@@Name:ClassUtils @TO@ MethodInvocation@@ReactiveCypherdslStatementExecutor.class.isAssignableFrom(declaringClass) @AT@ 2699 @LENGTH@ 10
------------INS SimpleName@@MethodName:hasMethod:[ReactiveCypherdslStatementExecutor.class, method] @TO@ MethodInvocation@@ReactiveCypherdslStatementExecutor.class.isAssignableFrom(declaringClass) @AT@ 2715 @LENGTH@ 59
---------------INS TypeLiteral@@ReactiveCypherdslStatementExecutor.class @TO@ SimpleName@@MethodName:hasMethod:[ReactiveCypherdslStatementExecutor.class, method] @AT@ 2725 @LENGTH@ 40
---------------INS SimpleName@@method @TO@ SimpleName@@MethodName:hasMethod:[ReactiveCypherdslStatementExecutor.class, method] @AT@ 2767 @LENGTH@ 6


UPD ExpressionStatement@@MethodInvocation:completion.submit(exchangeResult -> exchangeResult.accept(exchange)) @TO@ MethodInvocation:completion.submit(exchangeResult -> {
  exchangeResult.accept(exchange);
  aggregate();
}
) @AT@ 23922 @LENGTH@ 69
---UPD MethodInvocation@@completion.submit(exchangeResult -> exchangeResult.accept(exchange)) @TO@ completion.submit(exchangeResult -> {
  exchangeResult.accept(exchange);
  aggregate();
}
) @AT@ 23922 @LENGTH@ 68
------UPD SimpleName@@MethodName:submit:[exchangeResult -> exchangeResult.accept(exchange)] @TO@ MethodName:submit:[exchangeResult -> {
  exchangeResult.accept(exchange);
  aggregate();
}
] @AT@ 23933 @LENGTH@ 57
---------UPD LambdaExpression@@exchangeResult -> exchangeResult.accept(exchange) @TO@ exchangeResult -> {
  exchangeResult.accept(exchange);
  aggregate();
}
 @AT@ 23940 @LENGTH@ 49
------------INS ExpressionStatement@@MethodInvocation:exchangeResult.accept(exchange) @TO@ LambdaExpression@@exchangeResult -> exchangeResult.accept(exchange) @AT@ 23980 @LENGTH@ 32
---------------MOV MethodInvocation@@exchangeResult.accept(exchange) @TO@ ExpressionStatement@@MethodInvocation:exchangeResult.accept(exchange) @AT@ 23958 @LENGTH@ 31
------------INS ExpressionStatement@@MethodInvocation:aggregate() @TO@ LambdaExpression@@exchangeResult -> exchangeResult.accept(exchange) @AT@ 24076 @LENGTH@ 12
---------------INS MethodInvocation@@MethodName:aggregate:[] @TO@ ExpressionStatement@@MethodInvocation:aggregate() @AT@ 24076 @LENGTH@ 11


DEL VariableDeclarationStatement@@String after=parser.parseUri(before,properties::get,false,true); @AT@ 13259 @LENGTH@ 69


INS IfStatement@@if (this.cachedir == null) {  return Collections.emptyList();} @TO@ MethodDeclaration@@private, List<String>, MethodName:readCacheFile,  @AT@ 15728 @LENGTH@ 82
---INS InfixExpression@@this.cachedir == null @TO@ IfStatement@@if (this.cachedir == null) {  return Collections.emptyList();} @AT@ 15732 @LENGTH@ 21
------INS FieldAccess@@this.cachedir @TO@ InfixExpression@@this.cachedir == null @AT@ 15732 @LENGTH@ 13
---------INS ThisExpression@@this @TO@ FieldAccess@@this.cachedir @AT@ 15732 @LENGTH@ 4
---------INS SimpleName@@cachedir @TO@ FieldAccess@@this.cachedir @AT@ 15737 @LENGTH@ 8
------INS Operator@@== @TO@ InfixExpression@@this.cachedir == null @AT@ 15745 @LENGTH@ 2
------INS NullLiteral@@null @TO@ InfixExpression@@this.cachedir == null @AT@ 15749 @LENGTH@ 4
---INS Block@@ThenBody:{  return Collections.emptyList();} @TO@ IfStatement@@if (this.cachedir == null) {  return Collections.emptyList();} @AT@ 15755 @LENGTH@ 55
------INS ReturnStatement@@MethodInvocation:Collections.emptyList() @TO@ Block@@ThenBody:{  return Collections.emptyList();} @AT@ 15769 @LENGTH@ 31
---------INS MethodInvocation@@Collections.emptyList() @TO@ ReturnStatement@@MethodInvocation:Collections.emptyList() @AT@ 15776 @LENGTH@ 23
------------INS SimpleName@@Name:Collections @TO@ MethodInvocation@@Collections.emptyList() @AT@ 15776 @LENGTH@ 11
------------INS SimpleName@@MethodName:emptyList:[] @TO@ MethodInvocation@@Collections.emptyList() @AT@ 15788 @LENGTH@ 11


INS MethodDeclaration@@void, MethodName:setSafeCopyProperty, String key, SafeCopyProperty value,  @TO@ TypeDeclaration@@[public]ExtendedExchange, [Exchange] @AT@ 7235 @LENGTH@ 56
---INS PrimitiveType@@void @TO@ MethodDeclaration@@void, MethodName:setSafeCopyProperty, String key, SafeCopyProperty value,  @AT@ 7230 @LENGTH@ 4
---INS SimpleName@@MethodName:setSafeCopyProperty @TO@ MethodDeclaration@@void, MethodName:setSafeCopyProperty, String key, SafeCopyProperty value,  @AT@ 7235 @LENGTH@ 19
---INS SingleVariableDeclaration@@String key @TO@ MethodDeclaration@@void, MethodName:setSafeCopyProperty, String key, SafeCopyProperty value,  @AT@ 7255 @LENGTH@ 10
------INS SimpleType@@String @TO@ SingleVariableDeclaration@@String key @AT@ 7255 @LENGTH@ 6
------INS SimpleName@@key @TO@ SingleVariableDeclaration@@String key @AT@ 7262 @LENGTH@ 3
---INS SingleVariableDeclaration@@SafeCopyProperty value @TO@ MethodDeclaration@@void, MethodName:setSafeCopyProperty, String key, SafeCopyProperty value,  @AT@ 7267 @LENGTH@ 22
------INS SimpleType@@SafeCopyProperty @TO@ SingleVariableDeclaration@@SafeCopyProperty value @AT@ 7267 @LENGTH@ 16
------INS SimpleName@@value @TO@ SingleVariableDeclaration@@SafeCopyProperty value @AT@ 7284 @LENGTH@ 5


INS IfStatement@@if (properties.size() > 0) {  StringWriter sw=new StringWriter();  try (InputStreamReader r=new InputStreamReader(delegate.getInputStream(),StandardCharsets.UTF_8)){    char[] buf=new char[32768];    int l;    while ((l=r.read(buf)) > 0) {      sw.write(buf,0,l);    }  }   PropertiesParser parser=new DefaultPropertiesParser();  String before=sw.toString();  String p=properties.keySet().stream().map(Pattern::quote).collect(Collectors.joining("|",Pattern.quote("{{") + "(",")" + Pattern.quote("}}")));  Matcher m=Pattern.compile(p).matcher(before);  StringBuffer sb=new StringBuffer(before.length());  while (m.find()) {    m.appendReplacement(sb,properties.get(m.group(1)));  }  m.appendTail(sb);  String after=sb.toString();  return new ByteArrayInputStream(after.getBytes(StandardCharsets.UTF_8));} else {  return delegate.getInputStream();} @TO@ MethodDeclaration@@public, InputStream, MethodName:getInputStream, IOException,  @AT@ 12892 @LENGTH@ 1237
---INS InfixExpression@@properties.size() > 0 @TO@ IfStatement@@if (properties.size() > 0) {  StringWriter sw=new StringWriter();  try (InputStreamReader r=new InputStreamReader(delegate.getInputStream(),StandardCharsets.UTF_8)){    char[] buf=new char[32768];    int l;    while ((l=r.read(buf)) > 0) {      sw.write(buf,0,l);    }  }   PropertiesParser parser=new DefaultPropertiesParser();  String before=sw.toString();  String p=properties.keySet().stream().map(Pattern::quote).collect(Collectors.joining("|",Pattern.quote("{{") + "(",")" + Pattern.quote("}}")));  Matcher m=Pattern.compile(p).matcher(before);  StringBuffer sb=new StringBuffer(before.length());  while (m.find()) {    m.appendReplacement(sb,properties.get(m.group(1)));  }  m.appendTail(sb);  String after=sb.toString();  return new ByteArrayInputStream(after.getBytes(StandardCharsets.UTF_8));} else {  return delegate.getInputStream();} @AT@ 12896 @LENGTH@ 21
------INS MethodInvocation@@properties.size() @TO@ InfixExpression@@properties.size() > 0 @AT@ 12896 @LENGTH@ 17
---------INS SimpleName@@Name:properties @TO@ MethodInvocation@@properties.size() @AT@ 12896 @LENGTH@ 10
---------INS SimpleName@@MethodName:size:[] @TO@ MethodInvocation@@properties.size() @AT@ 12907 @LENGTH@ 6
------INS Operator@@> @TO@ InfixExpression@@properties.size() > 0 @AT@ 12913 @LENGTH@ 1
------INS NumberLiteral@@0 @TO@ InfixExpression@@properties.size() > 0 @AT@ 12916 @LENGTH@ 1
---INS Block@@ThenBody:{  StringWriter sw=new StringWriter();  try (InputStreamReader r=new InputStreamReader(delegate.getInputStream(),StandardCharsets.UTF_8)){    char[] buf=new char[32768];    int l;    while ((l=r.read(buf)) > 0) {      sw.write(buf,0,l);    }  }   PropertiesParser parser=new DefaultPropertiesParser();  String before=sw.toString();  String p=properties.keySet().stream().map(Pattern::quote).collect(Collectors.joining("|",Pattern.quote("{{") + "(",")" + Pattern.quote("}}")));  Matcher m=Pattern.compile(p).matcher(before);  StringBuffer sb=new StringBuffer(before.length());  while (m.find()) {    m.appendReplacement(sb,properties.get(m.group(1)));  }  m.appendTail(sb);  String after=sb.toString();  return new ByteArrayInputStream(after.getBytes(StandardCharsets.UTF_8));} @TO@ IfStatement@@if (properties.size() > 0) {  StringWriter sw=new StringWriter();  try (InputStreamReader r=new InputStreamReader(delegate.getInputStream(),StandardCharsets.UTF_8)){    char[] buf=new char[32768];    int l;    while ((l=r.read(buf)) > 0) {      sw.write(buf,0,l);    }  }   PropertiesParser parser=new DefaultPropertiesParser();  String before=sw.toString();  String p=properties.keySet().stream().map(Pattern::quote).collect(Collectors.joining("|",Pattern.quote("{{") + "(",")" + Pattern.quote("}}")));  Matcher m=Pattern.compile(p).matcher(before);  StringBuffer sb=new StringBuffer(before.length());  while (m.find()) {    m.appendReplacement(sb,properties.get(m.group(1)));  }  m.appendTail(sb);  String after=sb.toString();  return new ByteArrayInputStream(after.getBytes(StandardCharsets.UTF_8));} else {  return delegate.getInputStream();} @AT@ 12919 @LENGTH@ 1139
------MOV VariableDeclarationStatement@@StringWriter sw=new StringWriter(); @TO@ Block@@ThenBody:{  StringWriter sw=new StringWriter();  try (InputStreamReader r=new InputStreamReader(delegate.getInputStream(),StandardCharsets.UTF_8)){    char[] buf=new char[32768];    int l;    while ((l=r.read(buf)) > 0) {      sw.write(buf,0,l);    }  }   PropertiesParser parser=new DefaultPropertiesParser();  String before=sw.toString();  String p=properties.keySet().stream().map(Pattern::quote).collect(Collectors.joining("|",Pattern.quote("{{") + "(",")" + Pattern.quote("}}")));  Matcher m=Pattern.compile(p).matcher(before);  StringBuffer sb=new StringBuffer(before.length());  while (m.find()) {    m.appendReplacement(sb,properties.get(m.group(1)));  }  m.appendTail(sb);  String after=sb.toString();  return new ByteArrayInputStream(after.getBytes(StandardCharsets.UTF_8));} @AT@ 12792 @LENGTH@ 37
------MOV TryStatement@@try (InputStreamReader r=new InputStreamReader(delegate.getInputStream(),StandardCharsets.UTF_8)){  char[] buf=new char[32768];  int l;  while ((l=r.read(buf)) > 0) {    sw.write(buf,0,l);  }}  @TO@ Block@@ThenBody:{  StringWriter sw=new StringWriter();  try (InputStreamReader r=new InputStreamReader(delegate.getInputStream(),StandardCharsets.UTF_8)){    char[] buf=new char[32768];    int l;    while ((l=r.read(buf)) > 0) {      sw.write(buf,0,l);    }  }   PropertiesParser parser=new DefaultPropertiesParser();  String before=sw.toString();  String p=properties.keySet().stream().map(Pattern::quote).collect(Collectors.joining("|",Pattern.quote("{{") + "(",")" + Pattern.quote("}}")));  Matcher m=Pattern.compile(p).matcher(before);  StringBuffer sb=new StringBuffer(before.length());  while (m.find()) {    m.appendReplacement(sb,properties.get(m.group(1)));  }  m.appendTail(sb);  String after=sb.toString();  return new ByteArrayInputStream(after.getBytes(StandardCharsets.UTF_8));} @AT@ 12842 @LENGTH@ 292
------MOV VariableDeclarationStatement@@PropertiesParser parser=new DefaultPropertiesParser(); @TO@ Block@@ThenBody:{  StringWriter sw=new StringWriter();  try (InputStreamReader r=new InputStreamReader(delegate.getInputStream(),StandardCharsets.UTF_8)){    char[] buf=new char[32768];    int l;    while ((l=r.read(buf)) > 0) {      sw.write(buf,0,l);    }  }   PropertiesParser parser=new DefaultPropertiesParser();  String before=sw.toString();  String p=properties.keySet().stream().map(Pattern::quote).collect(Collectors.joining("|",Pattern.quote("{{") + "(",")" + Pattern.quote("}}")));  Matcher m=Pattern.compile(p).matcher(before);  StringBuffer sb=new StringBuffer(before.length());  while (m.find()) {    m.appendReplacement(sb,properties.get(m.group(1)));  }  m.appendTail(sb);  String after=sb.toString();  return new ByteArrayInputStream(after.getBytes(StandardCharsets.UTF_8));} @AT@ 13147 @LENGTH@ 56
------MOV VariableDeclarationStatement@@String before=sw.toString(); @TO@ Block@@ThenBody:{  StringWriter sw=new StringWriter();  try (InputStreamReader r=new InputStreamReader(delegate.getInputStream(),StandardCharsets.UTF_8)){    char[] buf=new char[32768];    int l;    while ((l=r.read(buf)) > 0) {      sw.write(buf,0,l);    }  }   PropertiesParser parser=new DefaultPropertiesParser();  String before=sw.toString();  String p=properties.keySet().stream().map(Pattern::quote).collect(Collectors.joining("|",Pattern.quote("{{") + "(",")" + Pattern.quote("}}")));  Matcher m=Pattern.compile(p).matcher(before);  StringBuffer sb=new StringBuffer(before.length());  while (m.find()) {    m.appendReplacement(sb,properties.get(m.group(1)));  }  m.appendTail(sb);  String after=sb.toString();  return new ByteArrayInputStream(after.getBytes(StandardCharsets.UTF_8));} @AT@ 13216 @LENGTH@ 30
------MOV ReturnStatement@@ClassInstanceCreation:new ByteArrayInputStream(after.getBytes(StandardCharsets.UTF_8)) @TO@ Block@@ThenBody:{  StringWriter sw=new StringWriter();  try (InputStreamReader r=new InputStreamReader(delegate.getInputStream(),StandardCharsets.UTF_8)){    char[] buf=new char[32768];    int l;    while ((l=r.read(buf)) > 0) {      sw.write(buf,0,l);    }  }   PropertiesParser parser=new DefaultPropertiesParser();  String before=sw.toString();  String p=properties.keySet().stream().map(Pattern::quote).collect(Collectors.joining("|",Pattern.quote("{{") + "(",")" + Pattern.quote("}}")));  Matcher m=Pattern.compile(p).matcher(before);  StringBuffer sb=new StringBuffer(before.length());  while (m.find()) {    m.appendReplacement(sb,properties.get(m.group(1)));  }  m.appendTail(sb);  String after=sb.toString();  return new ByteArrayInputStream(after.getBytes(StandardCharsets.UTF_8));} @AT@ 13341 @LENGTH@ 72
------INS VariableDeclarationStatement@@String p=properties.keySet().stream().map(Pattern::quote).collect(Collectors.joining("|",Pattern.quote("{{") + "(",")" + Pattern.quote("}}"))); @TO@ Block@@ThenBody:{  StringWriter sw=new StringWriter();  try (InputStreamReader r=new InputStreamReader(delegate.getInputStream(),StandardCharsets.UTF_8)){    char[] buf=new char[32768];    int l;    while ((l=r.read(buf)) > 0) {      sw.write(buf,0,l);    }  }   PropertiesParser parser=new DefaultPropertiesParser();  String before=sw.toString();  String p=properties.keySet().stream().map(Pattern::quote).collect(Collectors.joining("|",Pattern.quote("{{") + "(",")" + Pattern.quote("}}")));  Matcher m=Pattern.compile(p).matcher(before);  StringBuffer sb=new StringBuffer(before.length());  while (m.find()) {    m.appendReplacement(sb,properties.get(m.group(1)));  }  m.appendTail(sb);  String after=sb.toString();  return new ByteArrayInputStream(after.getBytes(StandardCharsets.UTF_8));} @AT@ 13444 @LENGTH@ 172
---------INS SimpleType@@String @TO@ VariableDeclarationStatement@@String p=properties.keySet().stream().map(Pattern::quote).collect(Collectors.joining("|",Pattern.quote("{{") + "(",")" + Pattern.quote("}}"))); @AT@ 13444 @LENGTH@ 6
---------INS VariableDeclarationFragment@@p=properties.keySet().stream().map(Pattern::quote).collect(Collectors.joining("|",Pattern.quote("{{") + "(",")" + Pattern.quote("}}"))) @TO@ VariableDeclarationStatement@@String p=properties.keySet().stream().map(Pattern::quote).collect(Collectors.joining("|",Pattern.quote("{{") + "(",")" + Pattern.quote("}}"))); @AT@ 13451 @LENGTH@ 164
------------INS SimpleName@@p @TO@ VariableDeclarationFragment@@p=properties.keySet().stream().map(Pattern::quote).collect(Collectors.joining("|",Pattern.quote("{{") + "(",")" + Pattern.quote("}}"))) @AT@ 13451 @LENGTH@ 1
------------INS MethodInvocation@@properties.keySet().stream().map(Pattern::quote).collect(Collectors.joining("|",Pattern.quote("{{") + "(",")" + Pattern.quote("}}"))) @TO@ VariableDeclarationFragment@@p=properties.keySet().stream().map(Pattern::quote).collect(Collectors.joining("|",Pattern.quote("{{") + "(",")" + Pattern.quote("}}"))) @AT@ 13455 @LENGTH@ 160
---------------INS MethodInvocation@@MethodName:map:[Pattern::quote] @TO@ MethodInvocation@@properties.keySet().stream().map(Pattern::quote).collect(Collectors.joining("|",Pattern.quote("{{") + "(",")" + Pattern.quote("}}"))) @AT@ 13455 @LENGTH@ 48
---------------INS MethodInvocation@@MethodName:stream:[] @TO@ MethodInvocation@@properties.keySet().stream().map(Pattern::quote).collect(Collectors.joining("|",Pattern.quote("{{") + "(",")" + Pattern.quote("}}"))) @AT@ 13455 @LENGTH@ 28
---------------INS MethodInvocation@@MethodName:keySet:[] @TO@ MethodInvocation@@properties.keySet().stream().map(Pattern::quote).collect(Collectors.joining("|",Pattern.quote("{{") + "(",")" + Pattern.quote("}}"))) @AT@ 13455 @LENGTH@ 19
---------------INS SimpleName@@Name:properties @TO@ MethodInvocation@@properties.keySet().stream().map(Pattern::quote).collect(Collectors.joining("|",Pattern.quote("{{") + "(",")" + Pattern.quote("}}"))) @AT@ 13455 @LENGTH@ 10
---------------INS SimpleName@@MethodName:collect:[Collectors.joining("|",Pattern.quote("{{") + "(",")" + Pattern.quote("}}"))] @TO@ MethodInvocation@@properties.keySet().stream().map(Pattern::quote).collect(Collectors.joining("|",Pattern.quote("{{") + "(",")" + Pattern.quote("}}"))) @AT@ 13529 @LENGTH@ 86
------------------INS MethodInvocation@@Collectors.joining("|",Pattern.quote("{{") + "(",")" + Pattern.quote("}}")) @TO@ SimpleName@@MethodName:collect:[Collectors.joining("|",Pattern.quote("{{") + "(",")" + Pattern.quote("}}"))] @AT@ 13537 @LENGTH@ 77
---------------------INS SimpleName@@Name:Collectors @TO@ MethodInvocation@@Collectors.joining("|",Pattern.quote("{{") + "(",")" + Pattern.quote("}}")) @AT@ 13537 @LENGTH@ 10
---------------------INS SimpleName@@MethodName:joining:["|", Pattern.quote("{{") + "(", ")" + Pattern.quote("}}")] @TO@ MethodInvocation@@Collectors.joining("|",Pattern.quote("{{") + "(",")" + Pattern.quote("}}")) @AT@ 13548 @LENGTH@ 66
------------------------INS StringLiteral@@"|" @TO@ SimpleName@@MethodName:joining:["|", Pattern.quote("{{") + "(", ")" + Pattern.quote("}}")] @AT@ 13556 @LENGTH@ 3
------------------------INS InfixExpression@@Pattern.quote("{{") + "(" @TO@ SimpleName@@MethodName:joining:["|", Pattern.quote("{{") + "(", ")" + Pattern.quote("}}")] @AT@ 13561 @LENGTH@ 25
---------------------------INS MethodInvocation@@Pattern.quote("{{") @TO@ InfixExpression@@Pattern.quote("{{") + "(" @AT@ 13561 @LENGTH@ 19
------------------------------INS SimpleName@@Name:Pattern @TO@ MethodInvocation@@Pattern.quote("{{") @AT@ 13561 @LENGTH@ 7
------------------------------INS SimpleName@@MethodName:quote:["{{"] @TO@ MethodInvocation@@Pattern.quote("{{") @AT@ 13569 @LENGTH@ 11
---------------------------------INS StringLiteral@@"{{" @TO@ SimpleName@@MethodName:quote:["{{"] @AT@ 13575 @LENGTH@ 4
---------------------------INS Operator@@+ @TO@ InfixExpression@@Pattern.quote("{{") + "(" @AT@ 13580 @LENGTH@ 1
---------------------------INS StringLiteral@@"(" @TO@ InfixExpression@@Pattern.quote("{{") + "(" @AT@ 13583 @LENGTH@ 3
------------------------INS InfixExpression@@")" + Pattern.quote("}}") @TO@ SimpleName@@MethodName:joining:["|", Pattern.quote("{{") + "(", ")" + Pattern.quote("}}")] @AT@ 13588 @LENGTH@ 25
---------------------------INS StringLiteral@@")" @TO@ InfixExpression@@")" + Pattern.quote("}}") @AT@ 13588 @LENGTH@ 3
---------------------------INS Operator@@+ @TO@ InfixExpression@@")" + Pattern.quote("}}") @AT@ 13591 @LENGTH@ 1
---------------------------INS MethodInvocation@@Pattern.quote("}}") @TO@ InfixExpression@@")" + Pattern.quote("}}") @AT@ 13594 @LENGTH@ 19
------------------------------INS SimpleName@@Name:Pattern @TO@ MethodInvocation@@Pattern.quote("}}") @AT@ 13594 @LENGTH@ 7
------------------------------INS SimpleName@@MethodName:quote:["}}"] @TO@ MethodInvocation@@Pattern.quote("}}") @AT@ 13602 @LENGTH@ 11
---------------------------------INS StringLiteral@@"}}" @TO@ SimpleName@@MethodName:quote:["}}"] @AT@ 13608 @LENGTH@ 4
------INS VariableDeclarationStatement@@Matcher m=Pattern.compile(p).matcher(before); @TO@ Block@@ThenBody:{  StringWriter sw=new StringWriter();  try (InputStreamReader r=new InputStreamReader(delegate.getInputStream(),StandardCharsets.UTF_8)){    char[] buf=new char[32768];    int l;    while ((l=r.read(buf)) > 0) {      sw.write(buf,0,l);    }  }   PropertiesParser parser=new DefaultPropertiesParser();  String before=sw.toString();  String p=properties.keySet().stream().map(Pattern::quote).collect(Collectors.joining("|",Pattern.quote("{{") + "(",")" + Pattern.quote("}}")));  Matcher m=Pattern.compile(p).matcher(before);  StringBuffer sb=new StringBuffer(before.length());  while (m.find()) {    m.appendReplacement(sb,properties.get(m.group(1)));  }  m.appendTail(sb);  String after=sb.toString();  return new ByteArrayInputStream(after.getBytes(StandardCharsets.UTF_8));} @AT@ 13633 @LENGTH@ 47
---------MOV SimpleType@@String @TO@ VariableDeclarationStatement@@Matcher m=Pattern.compile(p).matcher(before); @AT@ 13259 @LENGTH@ 6
---------MOV VariableDeclarationFragment@@after=parser.parseUri(before,properties::get,false,true) @TO@ VariableDeclarationStatement@@Matcher m=Pattern.compile(p).matcher(before); @AT@ 13266 @LENGTH@ 61
------------UPD SimpleName@@after @TO@ m @AT@ 13266 @LENGTH@ 5
------------UPD MethodInvocation@@parser.parseUri(before,properties::get,false,true) @TO@ Pattern.compile(p).matcher(before) @AT@ 13274 @LENGTH@ 53
---------------UPD SimpleName@@Name:parser @TO@ Name:Pattern @AT@ 13274 @LENGTH@ 6
---------------UPD SimpleName@@MethodName:parseUri:[before, properties::get, false, true] @TO@ MethodName:matcher:[before] @AT@ 13281 @LENGTH@ 46
------------------DEL BooleanLiteral@@false @AT@ 13315 @LENGTH@ 5
------------------DEL BooleanLiteral@@true @AT@ 13322 @LENGTH@ 4
---------------INS MethodInvocation@@MethodName:compile:[p] @TO@ MethodInvocation@@parser.parseUri(before,properties::get,false,true) @AT@ 13645 @LENGTH@ 18
------------------INS SimpleName@@p @TO@ MethodInvocation@@MethodName:compile:[p] @AT@ 13661 @LENGTH@ 1
------INS VariableDeclarationStatement@@StringBuffer sb=new StringBuffer(before.length()); @TO@ Block@@ThenBody:{  StringWriter sw=new StringWriter();  try (InputStreamReader r=new InputStreamReader(delegate.getInputStream(),StandardCharsets.UTF_8)){    char[] buf=new char[32768];    int l;    while ((l=r.read(buf)) > 0) {      sw.write(buf,0,l);    }  }   PropertiesParser parser=new DefaultPropertiesParser();  String before=sw.toString();  String p=properties.keySet().stream().map(Pattern::quote).collect(Collectors.joining("|",Pattern.quote("{{") + "(",")" + Pattern.quote("}}")));  Matcher m=Pattern.compile(p).matcher(before);  StringBuffer sb=new StringBuffer(before.length());  while (m.find()) {    m.appendReplacement(sb,properties.get(m.group(1)));  }  m.appendTail(sb);  String after=sb.toString();  return new ByteArrayInputStream(after.getBytes(StandardCharsets.UTF_8));} @AT@ 13697 @LENGTH@ 52
---------INS SimpleType@@StringBuffer @TO@ VariableDeclarationStatement@@StringBuffer sb=new StringBuffer(before.length()); @AT@ 13697 @LENGTH@ 12
---------INS VariableDeclarationFragment@@sb=new StringBuffer(before.length()) @TO@ VariableDeclarationStatement@@StringBuffer sb=new StringBuffer(before.length()); @AT@ 13710 @LENGTH@ 38
------------INS SimpleName@@sb @TO@ VariableDeclarationFragment@@sb=new StringBuffer(before.length()) @AT@ 13710 @LENGTH@ 2
------------INS ClassInstanceCreation@@StringBuffer[before.length()] @TO@ VariableDeclarationFragment@@sb=new StringBuffer(before.length()) @AT@ 13715 @LENGTH@ 33
---------------INS New@@new @TO@ ClassInstanceCreation@@StringBuffer[before.length()] @AT@ 13715 @LENGTH@ 3
---------------INS SimpleType@@StringBuffer @TO@ ClassInstanceCreation@@StringBuffer[before.length()] @AT@ 13719 @LENGTH@ 12
---------------INS MethodInvocation@@before.length() @TO@ ClassInstanceCreation@@StringBuffer[before.length()] @AT@ 13732 @LENGTH@ 15
------------------INS SimpleName@@Name:before @TO@ MethodInvocation@@before.length() @AT@ 13732 @LENGTH@ 6
------------------INS SimpleName@@MethodName:length:[] @TO@ MethodInvocation@@before.length() @AT@ 13739 @LENGTH@ 8
------INS WhileStatement@@while (m.find()) {  m.appendReplacement(sb,properties.get(m.group(1)));} @TO@ Block@@ThenBody:{  StringWriter sw=new StringWriter();  try (InputStreamReader r=new InputStreamReader(delegate.getInputStream(),StandardCharsets.UTF_8)){    char[] buf=new char[32768];    int l;    while ((l=r.read(buf)) > 0) {      sw.write(buf,0,l);    }  }   PropertiesParser parser=new DefaultPropertiesParser();  String before=sw.toString();  String p=properties.keySet().stream().map(Pattern::quote).collect(Collectors.joining("|",Pattern.quote("{{") + "(",")" + Pattern.quote("}}")));  Matcher m=Pattern.compile(p).matcher(before);  StringBuffer sb=new StringBuffer(before.length());  while (m.find()) {    m.appendReplacement(sb,properties.get(m.group(1)));  }  m.appendTail(sb);  String after=sb.toString();  return new ByteArrayInputStream(after.getBytes(StandardCharsets.UTF_8));} @AT@ 13766 @LENGTH@ 109
---------INS MethodInvocation@@m.find() @TO@ WhileStatement@@while (m.find()) {  m.appendReplacement(sb,properties.get(m.group(1)));} @AT@ 13773 @LENGTH@ 8
------------INS SimpleName@@Name:m @TO@ MethodInvocation@@m.find() @AT@ 13773 @LENGTH@ 1
------------INS SimpleName@@MethodName:find:[] @TO@ MethodInvocation@@m.find() @AT@ 13775 @LENGTH@ 6
---------INS Block@@WhileBody:{  m.appendReplacement(sb,properties.get(m.group(1)));} @TO@ WhileStatement@@while (m.find()) {  m.appendReplacement(sb,properties.get(m.group(1)));} @AT@ 13783 @LENGTH@ 92
------------INS ExpressionStatement@@MethodInvocation:m.appendReplacement(sb,properties.get(m.group(1))) @TO@ Block@@WhileBody:{  m.appendReplacement(sb,properties.get(m.group(1)));} @AT@ 13805 @LENGTH@ 52
---------------INS MethodInvocation@@m.appendReplacement(sb,properties.get(m.group(1))) @TO@ ExpressionStatement@@MethodInvocation:m.appendReplacement(sb,properties.get(m.group(1))) @AT@ 13805 @LENGTH@ 51
------------------INS SimpleName@@Name:m @TO@ MethodInvocation@@m.appendReplacement(sb,properties.get(m.group(1))) @AT@ 13805 @LENGTH@ 1
------------------INS SimpleName@@MethodName:appendReplacement:[sb, properties.get(m.group(1))] @TO@ MethodInvocation@@m.appendReplacement(sb,properties.get(m.group(1))) @AT@ 13807 @LENGTH@ 49
---------------------INS SimpleName@@sb @TO@ SimpleName@@MethodName:appendReplacement:[sb, properties.get(m.group(1))] @AT@ 13825 @LENGTH@ 2
---------------------INS MethodInvocation@@properties.get(m.group(1)) @TO@ SimpleName@@MethodName:appendReplacement:[sb, properties.get(m.group(1))] @AT@ 13829 @LENGTH@ 26
------------------------INS SimpleName@@Name:properties @TO@ MethodInvocation@@properties.get(m.group(1)) @AT@ 13829 @LENGTH@ 10
------------------------INS SimpleName@@MethodName:get:[m.group(1)] @TO@ MethodInvocation@@properties.get(m.group(1)) @AT@ 13840 @LENGTH@ 15
---------------------------INS MethodInvocation@@m.group(1) @TO@ SimpleName@@MethodName:get:[m.group(1)] @AT@ 13844 @LENGTH@ 10
------------------------------INS SimpleName@@Name:m @TO@ MethodInvocation@@m.group(1) @AT@ 13844 @LENGTH@ 1
------------------------------INS SimpleName@@MethodName:group:[1] @TO@ MethodInvocation@@m.group(1) @AT@ 13846 @LENGTH@ 8
---------------------------------INS NumberLiteral@@1 @TO@ SimpleName@@MethodName:group:[1] @AT@ 13852 @LENGTH@ 1
------INS ExpressionStatement@@MethodInvocation:m.appendTail(sb) @TO@ Block@@ThenBody:{  StringWriter sw=new StringWriter();  try (InputStreamReader r=new InputStreamReader(delegate.getInputStream(),StandardCharsets.UTF_8)){    char[] buf=new char[32768];    int l;    while ((l=r.read(buf)) > 0) {      sw.write(buf,0,l);    }  }   PropertiesParser parser=new DefaultPropertiesParser();  String before=sw.toString();  String p=properties.keySet().stream().map(Pattern::quote).collect(Collectors.joining("|",Pattern.quote("{{") + "(",")" + Pattern.quote("}}")));  Matcher m=Pattern.compile(p).matcher(before);  StringBuffer sb=new StringBuffer(before.length());  while (m.find()) {    m.appendReplacement(sb,properties.get(m.group(1)));  }  m.appendTail(sb);  String after=sb.toString();  return new ByteArrayInputStream(after.getBytes(StandardCharsets.UTF_8));} @AT@ 13892 @LENGTH@ 17
---------INS MethodInvocation@@m.appendTail(sb) @TO@ ExpressionStatement@@MethodInvocation:m.appendTail(sb) @AT@ 13892 @LENGTH@ 16
------------INS SimpleName@@Name:m @TO@ MethodInvocation@@m.appendTail(sb) @AT@ 13892 @LENGTH@ 1
------------INS SimpleName@@MethodName:appendTail:[sb] @TO@ MethodInvocation@@m.appendTail(sb) @AT@ 13894 @LENGTH@ 14
---------------INS SimpleName@@sb @TO@ SimpleName@@MethodName:appendTail:[sb] @AT@ 13905 @LENGTH@ 2
------INS VariableDeclarationStatement@@String after=sb.toString(); @TO@ Block@@ThenBody:{  StringWriter sw=new StringWriter();  try (InputStreamReader r=new InputStreamReader(delegate.getInputStream(),StandardCharsets.UTF_8)){    char[] buf=new char[32768];    int l;    while ((l=r.read(buf)) > 0) {      sw.write(buf,0,l);    }  }   PropertiesParser parser=new DefaultPropertiesParser();  String before=sw.toString();  String p=properties.keySet().stream().map(Pattern::quote).collect(Collectors.joining("|",Pattern.quote("{{") + "(",")" + Pattern.quote("}}")));  Matcher m=Pattern.compile(p).matcher(before);  StringBuffer sb=new StringBuffer(before.length());  while (m.find()) {    m.appendReplacement(sb,properties.get(m.group(1)));  }  m.appendTail(sb);  String after=sb.toString();  return new ByteArrayInputStream(after.getBytes(StandardCharsets.UTF_8));} @AT@ 13926 @LENGTH@ 29
---------INS SimpleType@@String @TO@ VariableDeclarationStatement@@String after=sb.toString(); @AT@ 13926 @LENGTH@ 6
---------INS VariableDeclarationFragment@@after=sb.toString() @TO@ VariableDeclarationStatement@@String after=sb.toString(); @AT@ 13933 @LENGTH@ 21
------------INS SimpleName@@after @TO@ VariableDeclarationFragment@@after=sb.toString() @AT@ 13933 @LENGTH@ 5
------------INS MethodInvocation@@sb.toString() @TO@ VariableDeclarationFragment@@after=sb.toString() @AT@ 13941 @LENGTH@ 13
---------------INS SimpleName@@Name:sb @TO@ MethodInvocation@@sb.toString() @AT@ 13941 @LENGTH@ 2
---------------INS SimpleName@@MethodName:toString:[] @TO@ MethodInvocation@@sb.toString() @AT@ 13944 @LENGTH@ 10
---INS Block@@ElseBody:{  return delegate.getInputStream();} @TO@ IfStatement@@if (properties.size() > 0) {  StringWriter sw=new StringWriter();  try (InputStreamReader r=new InputStreamReader(delegate.getInputStream(),StandardCharsets.UTF_8)){    char[] buf=new char[32768];    int l;    while ((l=r.read(buf)) > 0) {      sw.write(buf,0,l);    }  }   PropertiesParser parser=new DefaultPropertiesParser();  String before=sw.toString();  String p=properties.keySet().stream().map(Pattern::quote).collect(Collectors.joining("|",Pattern.quote("{{") + "(",")" + Pattern.quote("}}")));  Matcher m=Pattern.compile(p).matcher(before);  StringBuffer sb=new StringBuffer(before.length());  while (m.find()) {    m.appendReplacement(sb,properties.get(m.group(1)));  }  m.appendTail(sb);  String after=sb.toString();  return new ByteArrayInputStream(after.getBytes(StandardCharsets.UTF_8));} else {  return delegate.getInputStream();} @AT@ 14064 @LENGTH@ 65
------INS ReturnStatement@@MethodInvocation:delegate.getInputStream() @TO@ Block@@ElseBody:{  return delegate.getInputStream();} @AT@ 14082 @LENGTH@ 33
---------INS MethodInvocation@@delegate.getInputStream() @TO@ ReturnStatement@@MethodInvocation:delegate.getInputStream() @AT@ 14089 @LENGTH@ 25
------------INS SimpleName@@Name:delegate @TO@ MethodInvocation@@delegate.getInputStream() @AT@ 14089 @LENGTH@ 8
------------INS SimpleName@@MethodName:getInputStream:[] @TO@ MethodInvocation@@delegate.getInputStream() @AT@ 14098 @LENGTH@ 16


UPD VariableDeclarationStatement@@PersistentPropertyAccessor propertyAccessor=nodeDescription.getPropertyAccessor(source); @TO@ PersistentPropertyAccessor<Object> propertyAccessor=nodeDescription.getPropertyAccessor(source); @AT@ 7015 @LENGTH@ 90
---INS ParameterizedType@@PersistentPropertyAccessor<Object> @TO@ VariableDeclarationStatement@@PersistentPropertyAccessor propertyAccessor=nodeDescription.getPropertyAccessor(source); @AT@ 7015 @LENGTH@ 34
------INS SimpleType@@PersistentPropertyAccessor @TO@ ParameterizedType@@PersistentPropertyAccessor<Object> @AT@ 7015 @LENGTH@ 26
------INS SimpleType@@Object @TO@ ParameterizedType@@PersistentPropertyAccessor<Object> @AT@ 7042 @LENGTH@ 6
---DEL SimpleType@@PersistentPropertyAccessor @AT@ 7015 @LENGTH@ 26


DEL ExpressionStatement@@MethodInvocation:entityCallbacks.addEntityCallback(new OptimisticLockingBeforeBindCallback(context)) @AT@ 2538 @LENGTH@ 84
---DEL MethodInvocation@@entityCallbacks.addEntityCallback(new OptimisticLockingBeforeBindCallback(context)) @AT@ 2538 @LENGTH@ 83
------DEL SimpleName@@Name:entityCallbacks @AT@ 2538 @LENGTH@ 15
------DEL SimpleName@@MethodName:addEntityCallback:[new OptimisticLockingBeforeBindCallback(context)] @AT@ 2554 @LENGTH@ 67
---------DEL ClassInstanceCreation@@OptimisticLockingBeforeBindCallback[context] @AT@ 2572 @LENGTH@ 48
------------DEL New@@new @AT@ 2572 @LENGTH@ 3
------------DEL SimpleType@@OptimisticLockingBeforeBindCallback @AT@ 2576 @LENGTH@ 35
------------DEL SimpleName@@context @AT@ 2612 @LENGTH@ 7


UPD MethodDeclaration@@static, T, T, MethodName:extractSimpleTypeResult, Document source, Class<T> targetType, MongoConverter converter,  @TO@ static, T, T, MethodName:extractSimpleTypeResult, @Nullable Document source, Class<T> targetType, MongoConverter converter,  @AT@ 5956 @LENGTH@ 885
---UPD SingleVariableDeclaration@@Document source @TO@ @Nullable Document source @AT@ 5993 @LENGTH@ 15
---UPD IfStatement@@if (source.isEmpty()) {  return null;} @TO@ if (source == null || source.isEmpty()) {  return null;} @AT@ 6062 @LENGTH@ 43
------DEL MethodInvocation@@source.isEmpty() @AT@ 6066 @LENGTH@ 16
------INS InfixExpression@@source == null || source.isEmpty() @TO@ IfStatement@@if (source.isEmpty()) {  return null;} @AT@ 6076 @LENGTH@ 34
---------INS InfixExpression@@source == null @TO@ InfixExpression@@source == null || source.isEmpty() @AT@ 6076 @LENGTH@ 14
------------INS SimpleName@@source @TO@ InfixExpression@@source == null @AT@ 6076 @LENGTH@ 6
------------INS Operator@@== @TO@ InfixExpression@@source == null @AT@ 6082 @LENGTH@ 2
------------INS NullLiteral@@null @TO@ InfixExpression@@source == null @AT@ 6086 @LENGTH@ 4
---------INS Operator@@|| @TO@ InfixExpression@@source == null || source.isEmpty() @AT@ 6090 @LENGTH@ 2
---------INS MethodInvocation@@source.isEmpty() @TO@ InfixExpression@@source == null || source.isEmpty() @AT@ 6094 @LENGTH@ 16
------------MOV SimpleName@@Name:source @TO@ MethodInvocation@@source.isEmpty() @AT@ 6066 @LENGTH@ 6
------------MOV SimpleName@@MethodName:isEmpty:[] @TO@ MethodInvocation@@source.isEmpty() @AT@ 6073 @LENGTH@ 9


UPD IfStatement@@if ((currentRedeliveryPolicy.getRetryAttemptedLogInterval() > 1) && (redeliveryCounter % currentRedeliveryPolicy.getRetryAttemptedLogInterval()) != 0) {  return;} @TO@ if (currentRedeliveryPolicy.getRetryAttemptedLogInterval() > 1 && redeliveryCounter % currentRedeliveryPolicy.getRetryAttemptedLogInterval() != 0) {  return;} @AT@ 62702 @LENGTH@ 358
---UPD InfixExpression@@(currentRedeliveryPolicy.getRetryAttemptedLogInterval() > 1) && (redeliveryCounter % currentRedeliveryPolicy.getRetryAttemptedLogInterval()) != 0 @TO@ currentRedeliveryPolicy.getRetryAttemptedLogInterval() > 1 && redeliveryCounter % currentRedeliveryPolicy.getRetryAttemptedLogInterval() != 0 @AT@ 62706 @LENGTH@ 177
------DEL ParenthesizedExpression@@(currentRedeliveryPolicy.getRetryAttemptedLogInterval() > 1) @AT@ 62706 @LENGTH@ 60
------MOV InfixExpression@@currentRedeliveryPolicy.getRetryAttemptedLogInterval() > 1 @TO@ InfixExpression@@(currentRedeliveryPolicy.getRetryAttemptedLogInterval() > 1) && (redeliveryCounter % currentRedeliveryPolicy.getRetryAttemptedLogInterval()) != 0 @AT@ 62707 @LENGTH@ 58
------UPD InfixExpression@@(redeliveryCounter % currentRedeliveryPolicy.getRetryAttemptedLogInterval()) != 0 @TO@ redeliveryCounter % currentRedeliveryPolicy.getRetryAttemptedLogInterval() != 0 @AT@ 62802 @LENGTH@ 81
---------DEL ParenthesizedExpression@@(redeliveryCounter % currentRedeliveryPolicy.getRetryAttemptedLogInterval()) @AT@ 62802 @LENGTH@ 76
---------MOV InfixExpression@@redeliveryCounter % currentRedeliveryPolicy.getRetryAttemptedLogInterval() @TO@ InfixExpression@@(redeliveryCounter % currentRedeliveryPolicy.getRetryAttemptedLogInterval()) != 0 @AT@ 62803 @LENGTH@ 74


DEL MethodDeclaration@@public, void, MethodName:setRollbackOnly,  @AT@ 2894 @LENGTH@ 88
---DEL Modifier@@public @AT@ 2894 @LENGTH@ 6
---DEL PrimitiveType@@void @AT@ 2901 @LENGTH@ 4
---DEL SimpleName@@MethodName:setRollbackOnly @AT@ 2906 @LENGTH@ 15
---DEL ExpressionStatement@@SuperMethodInvocation:super.setRollbackOnly() @AT@ 2929 @LENGTH@ 24
------DEL SuperMethodInvocation@@super.setRollbackOnly() @AT@ 2929 @LENGTH@ 23
---------DEL SimpleName@@MethodName:setRollbackOnly:[] @AT@ 2935 @LENGTH@ 15
---DEL ExpressionStatement@@MethodInvocation:transaction.rollback() @AT@ 2956 @LENGTH@ 23
------DEL MethodInvocation@@transaction.rollback() @AT@ 2956 @LENGTH@ 22
---------DEL SimpleName@@Name:transaction @AT@ 2956 @LENGTH@ 11
---------DEL SimpleName@@MethodName:rollback:[] @AT@ 2968 @LENGTH@ 10


DEL ExpressionStatement@@MethodInvocation:aggregate() @AT@ 24047 @LENGTH@ 12
---DEL MethodInvocation@@MethodName:aggregate:[] @AT@ 24047 @LENGTH@ 11


UPD ExpressionStatement@@MethodInvocation:fail("Should not have been able to write before closeing") @TO@ MethodInvocation:fail("Should not have been able to write before closing") @AT@ 8074 @LENGTH@ 59
---UPD MethodInvocation@@fail("Should not have been able to write before closeing") @TO@ fail("Should not have been able to write before closing") @AT@ 8074 @LENGTH@ 58
------UPD SimpleName@@MethodName:fail:["Should not have been able to write before closeing"] @TO@ MethodName:fail:["Should not have been able to write before closing"] @AT@ 8074 @LENGTH@ 58
---------UPD StringLiteral@@"Should not have been able to write before closeing" @TO@ "Should not have been able to write before closing" @AT@ 8079 @LENGTH@ 52


UPD FieldDeclaration@@private, KafkaIdempotentRepository, [kafkaIdempotentRepository=new KafkaIdempotentRepository("TEST_IDEM",getBootstrapServers())] @TO@ private, KafkaIdempotentRepository, [kafkaIdempotentRepository=new KafkaIdempotentRepository("TEST_EAGER_" + UUID.randomUUID().toString(),getBootstrapServers())] @AT@ 1472 @LENGTH@ 140
---UPD VariableDeclarationFragment@@kafkaIdempotentRepository=new KafkaIdempotentRepository("TEST_IDEM",getBootstrapServers()) @TO@ kafkaIdempotentRepository=new KafkaIdempotentRepository("TEST_EAGER_" + UUID.randomUUID().toString(),getBootstrapServers()) @AT@ 1506 @LENGTH@ 105
------UPD ClassInstanceCreation@@KafkaIdempotentRepository["TEST_IDEM", getBootstrapServers()] @TO@ KafkaIdempotentRepository["TEST_EAGER_" + UUID.randomUUID().toString(), getBootstrapServers()] @AT@ 1546 @LENGTH@ 65
---------DEL StringLiteral@@"TEST_IDEM" @AT@ 1576 @LENGTH@ 11
---------INS InfixExpression@@"TEST_EAGER_" + UUID.randomUUID().toString() @TO@ ClassInstanceCreation@@KafkaIdempotentRepository["TEST_IDEM", getBootstrapServers()] @AT@ 1705 @LENGTH@ 44
------------INS StringLiteral@@"TEST_EAGER_" @TO@ InfixExpression@@"TEST_EAGER_" + UUID.randomUUID().toString() @AT@ 1705 @LENGTH@ 13
------------INS Operator@@+ @TO@ InfixExpression@@"TEST_EAGER_" + UUID.randomUUID().toString() @AT@ 1718 @LENGTH@ 1
------------INS MethodInvocation@@UUID.randomUUID().toString() @TO@ InfixExpression@@"TEST_EAGER_" + UUID.randomUUID().toString() @AT@ 1721 @LENGTH@ 28
---------------INS MethodInvocation@@MethodName:randomUUID:[] @TO@ MethodInvocation@@UUID.randomUUID().toString() @AT@ 1721 @LENGTH@ 17
---------------INS SimpleName@@Name:UUID @TO@ MethodInvocation@@UUID.randomUUID().toString() @AT@ 1721 @LENGTH@ 4
---------------INS SimpleName@@MethodName:toString:[] @TO@ MethodInvocation@@UUID.randomUUID().toString() @AT@ 1739 @LENGTH@ 10


INS MethodDeclaration@@public, static, boolean, MethodName:isDirectory, final File file, final LinkOption... options,  @TO@ TypeDeclaration@@[public]FileUtils,  @AT@ 66260 @LENGTH@ 168
---INS Modifier@@public @TO@ MethodDeclaration@@public, static, boolean, MethodName:isDirectory, final File file, final LinkOption... options,  @AT@ 66260 @LENGTH@ 6
---INS Modifier@@static @TO@ MethodDeclaration@@public, static, boolean, MethodName:isDirectory, final File file, final LinkOption... options,  @AT@ 66267 @LENGTH@ 6
---INS PrimitiveType@@boolean @TO@ MethodDeclaration@@public, static, boolean, MethodName:isDirectory, final File file, final LinkOption... options,  @AT@ 66274 @LENGTH@ 7
---INS SimpleName@@MethodName:isDirectory @TO@ MethodDeclaration@@public, static, boolean, MethodName:isDirectory, final File file, final LinkOption... options,  @AT@ 66282 @LENGTH@ 11
---INS SingleVariableDeclaration@@final File file @TO@ MethodDeclaration@@public, static, boolean, MethodName:isDirectory, final File file, final LinkOption... options,  @AT@ 66294 @LENGTH@ 15
------INS Modifier@@final @TO@ SingleVariableDeclaration@@final File file @AT@ 66294 @LENGTH@ 5
------INS SimpleType@@File @TO@ SingleVariableDeclaration@@final File file @AT@ 66300 @LENGTH@ 4
------INS SimpleName@@file @TO@ SingleVariableDeclaration@@final File file @AT@ 66305 @LENGTH@ 4
---INS SingleVariableDeclaration@@final LinkOption... options @TO@ MethodDeclaration@@public, static, boolean, MethodName:isDirectory, final File file, final LinkOption... options,  @AT@ 66311 @LENGTH@ 27
------INS Modifier@@final @TO@ SingleVariableDeclaration@@final LinkOption... options @AT@ 66311 @LENGTH@ 5
------INS SimpleType@@LinkOption @TO@ SingleVariableDeclaration@@final LinkOption... options @AT@ 66317 @LENGTH@ 10
------INS SimpleName@@options @TO@ SingleVariableDeclaration@@final LinkOption... options @AT@ 66331 @LENGTH@ 7
---INS ReturnStatement@@ConditionalExpression:file != null ? Files.isDirectory(file.toPath(),options) : false @TO@ MethodDeclaration@@public, static, boolean, MethodName:isDirectory, final File file, final LinkOption... options,  @AT@ 66350 @LENGTH@ 72
------INS ConditionalExpression@@file != null ? Files.isDirectory(file.toPath(),options) : false @TO@ ReturnStatement@@ConditionalExpression:file != null ? Files.isDirectory(file.toPath(),options) : false @AT@ 66357 @LENGTH@ 64
---------INS InfixExpression@@file != null @TO@ ConditionalExpression@@file != null ? Files.isDirectory(file.toPath(),options) : false @AT@ 66357 @LENGTH@ 12
------------INS SimpleName@@file @TO@ InfixExpression@@file != null @AT@ 66357 @LENGTH@ 4
------------INS Operator@@!= @TO@ InfixExpression@@file != null @AT@ 66361 @LENGTH@ 2
------------INS NullLiteral@@null @TO@ InfixExpression@@file != null @AT@ 66365 @LENGTH@ 4
---------INS MethodInvocation@@Files.isDirectory(file.toPath(),options) @TO@ ConditionalExpression@@file != null ? Files.isDirectory(file.toPath(),options) : false @AT@ 66372 @LENGTH@ 41
------------INS SimpleName@@Name:Files @TO@ MethodInvocation@@Files.isDirectory(file.toPath(),options) @AT@ 66372 @LENGTH@ 5
------------INS SimpleName@@MethodName:isDirectory:[file.toPath(), options] @TO@ MethodInvocation@@Files.isDirectory(file.toPath(),options) @AT@ 66378 @LENGTH@ 35
---------------INS MethodInvocation@@file.toPath() @TO@ SimpleName@@MethodName:isDirectory:[file.toPath(), options] @AT@ 66390 @LENGTH@ 13
------------------INS SimpleName@@Name:file @TO@ MethodInvocation@@file.toPath() @AT@ 66390 @LENGTH@ 4
------------------INS SimpleName@@MethodName:toPath:[] @TO@ MethodInvocation@@file.toPath() @AT@ 66395 @LENGTH@ 8
---------------INS SimpleName@@options @TO@ SimpleName@@MethodName:isDirectory:[file.toPath(), options] @AT@ 66405 @LENGTH@ 7
---------INS BooleanLiteral@@false @TO@ ConditionalExpression@@file != null ? Files.isDirectory(file.toPath(),options) : false @AT@ 66416 @LENGTH@ 5


INS MethodDeclaration@@void, MethodName:readFlattensNestedDocumentToStringIfNecessary,  @TO@ TypeDeclaration@@[@ExtendWith(MockitoExtension.class), public]MappingMongoConverterUnitTests,  @AT@ 73610 @LENGTH@ 289
---INS PrimitiveType@@void @TO@ MethodDeclaration@@void, MethodName:readFlattensNestedDocumentToStringIfNecessary,  @AT@ 73605 @LENGTH@ 4
---INS SimpleName@@MethodName:readFlattensNestedDocumentToStringIfNecessary @TO@ MethodDeclaration@@void, MethodName:readFlattensNestedDocumentToStringIfNecessary,  @AT@ 73610 @LENGTH@ 45
---INS VariableDeclarationStatement@@org.bson.Document source=new org.bson.Document("street",new org.bson.Document("json","string").append("_id",UUID.randomUUID())); @TO@ MethodDeclaration@@void, MethodName:readFlattensNestedDocumentToStringIfNecessary,  @AT@ 73663 @LENGTH@ 133
------INS SimpleType@@org.bson.Document @TO@ VariableDeclarationStatement@@org.bson.Document source=new org.bson.Document("street",new org.bson.Document("json","string").append("_id",UUID.randomUUID())); @AT@ 73663 @LENGTH@ 17
------INS VariableDeclarationFragment@@source=new org.bson.Document("street",new org.bson.Document("json","string").append("_id",UUID.randomUUID())) @TO@ VariableDeclarationStatement@@org.bson.Document source=new org.bson.Document("street",new org.bson.Document("json","string").append("_id",UUID.randomUUID())); @AT@ 73681 @LENGTH@ 114
---------INS SimpleName@@source @TO@ VariableDeclarationFragment@@source=new org.bson.Document("street",new org.bson.Document("json","string").append("_id",UUID.randomUUID())) @AT@ 73681 @LENGTH@ 6
---------INS ClassInstanceCreation@@org.bson.Document["street", new org.bson.Document("json","string").append("_id",UUID.randomUUID())] @TO@ VariableDeclarationFragment@@source=new org.bson.Document("street",new org.bson.Document("json","string").append("_id",UUID.randomUUID())) @AT@ 73690 @LENGTH@ 105
------------INS New@@new @TO@ ClassInstanceCreation@@org.bson.Document["street", new org.bson.Document("json","string").append("_id",UUID.randomUUID())] @AT@ 73690 @LENGTH@ 3
------------INS SimpleType@@org.bson.Document @TO@ ClassInstanceCreation@@org.bson.Document["street", new org.bson.Document("json","string").append("_id",UUID.randomUUID())] @AT@ 73694 @LENGTH@ 17
------------INS StringLiteral@@"street" @TO@ ClassInstanceCreation@@org.bson.Document["street", new org.bson.Document("json","string").append("_id",UUID.randomUUID())] @AT@ 73712 @LENGTH@ 8
------------INS MethodInvocation@@new org.bson.Document("json","string").append("_id",UUID.randomUUID()) @TO@ ClassInstanceCreation@@org.bson.Document["street", new org.bson.Document("json","string").append("_id",UUID.randomUUID())] @AT@ 73722 @LENGTH@ 72
---------------INS ClassInstanceCreation@@org.bson.Document["json", "string"] @TO@ MethodInvocation@@new org.bson.Document("json","string").append("_id",UUID.randomUUID()) @AT@ 73722 @LENGTH@ 39
------------------INS New@@new @TO@ ClassInstanceCreation@@org.bson.Document["json", "string"] @AT@ 73722 @LENGTH@ 3
------------------INS SimpleType@@org.bson.Document @TO@ ClassInstanceCreation@@org.bson.Document["json", "string"] @AT@ 73726 @LENGTH@ 17
------------------INS StringLiteral@@"json" @TO@ ClassInstanceCreation@@org.bson.Document["json", "string"] @AT@ 73744 @LENGTH@ 6
------------------INS StringLiteral@@"string" @TO@ ClassInstanceCreation@@org.bson.Document["json", "string"] @AT@ 73752 @LENGTH@ 8
---------------INS SimpleName@@MethodName:append:["_id", UUID.randomUUID()] @TO@ MethodInvocation@@new org.bson.Document("json","string").append("_id",UUID.randomUUID()) @AT@ 73762 @LENGTH@ 32
------------------INS StringLiteral@@"_id" @TO@ SimpleName@@MethodName:append:["_id", UUID.randomUUID()] @AT@ 73769 @LENGTH@ 5
------------------INS MethodInvocation@@UUID.randomUUID() @TO@ SimpleName@@MethodName:append:["_id", UUID.randomUUID()] @AT@ 73776 @LENGTH@ 17
---------------------INS SimpleName@@Name:UUID @TO@ MethodInvocation@@UUID.randomUUID() @AT@ 73776 @LENGTH@ 4
---------------------INS SimpleName@@MethodName:randomUUID:[] @TO@ MethodInvocation@@UUID.randomUUID() @AT@ 73781 @LENGTH@ 12
---INS VariableDeclarationStatement@@Address target=converter.read(Address.class,source); @TO@ MethodDeclaration@@void, MethodName:readFlattensNestedDocumentToStringIfNecessary,  @AT@ 73800 @LENGTH@ 55
------INS SimpleType@@Address @TO@ VariableDeclarationStatement@@Address target=converter.read(Address.class,source); @AT@ 73800 @LENGTH@ 7
------INS VariableDeclarationFragment@@target=converter.read(Address.class,source) @TO@ VariableDeclarationStatement@@Address target=converter.read(Address.class,source); @AT@ 73808 @LENGTH@ 46
---------INS SimpleName@@target @TO@ VariableDeclarationFragment@@target=converter.read(Address.class,source) @AT@ 73808 @LENGTH@ 6
---------INS MethodInvocation@@converter.read(Address.class,source) @TO@ VariableDeclarationFragment@@target=converter.read(Address.class,source) @AT@ 73817 @LENGTH@ 37
------------INS SimpleName@@Name:converter @TO@ MethodInvocation@@converter.read(Address.class,source) @AT@ 73817 @LENGTH@ 9
------------INS SimpleName@@MethodName:read:[Address.class, source] @TO@ MethodInvocation@@converter.read(Address.class,source) @AT@ 73827 @LENGTH@ 27
---------------INS TypeLiteral@@Address.class @TO@ SimpleName@@MethodName:read:[Address.class, source] @AT@ 73832 @LENGTH@ 13
---------------INS SimpleName@@source @TO@ SimpleName@@MethodName:read:[Address.class, source] @AT@ 73847 @LENGTH@ 6
---INS ExpressionStatement@@MethodInvocation:assertThat(target.street).isNotNull() @TO@ MethodDeclaration@@void, MethodName:readFlattensNestedDocumentToStringIfNecessary,  @AT@ 73858 @LENGTH@ 38
------INS MethodInvocation@@assertThat(target.street).isNotNull() @TO@ ExpressionStatement@@MethodInvocation:assertThat(target.street).isNotNull() @AT@ 73858 @LENGTH@ 37
---------INS MethodInvocation@@MethodName:assertThat:[target.street] @TO@ MethodInvocation@@assertThat(target.street).isNotNull() @AT@ 73858 @LENGTH@ 25
------------INS QualifiedName@@target.street @TO@ MethodInvocation@@MethodName:assertThat:[target.street] @AT@ 73869 @LENGTH@ 13
---------------INS SimpleName@@target @TO@ QualifiedName@@target.street @AT@ 73869 @LENGTH@ 6
---------------INS SimpleName@@street @TO@ QualifiedName@@target.street @AT@ 73876 @LENGTH@ 6
---------INS SimpleName@@MethodName:isNotNull:[] @TO@ MethodInvocation@@assertThat(target.street).isNotNull() @AT@ 73884 @LENGTH@ 11


UPD ReturnStatement@@MethodInvocation:connection.invoke().from(RedisListAsyncCommands::lpos,key,element,args).get(Collections::singletonList) @TO@ MethodInvocation:connection.invoke().from(RedisListAsyncCommands::lpos,key,element,args).getOrElse(Collections::singletonList,Collections::emptyList) @AT@ 2201 @LENGTH@ 114
---UPD MethodInvocation@@connection.invoke().from(RedisListAsyncCommands::lpos,key,element,args).get(Collections::singletonList) @TO@ connection.invoke().from(RedisListAsyncCommands::lpos,key,element,args).getOrElse(Collections::singletonList,Collections::emptyList) @AT@ 2208 @LENGTH@ 106
------UPD SimpleName@@MethodName:get:[Collections::singletonList] @TO@ MethodName:getOrElse:[Collections::singletonList, Collections::emptyList] @AT@ 2283 @LENGTH@ 31


UPD SuperConstructorInvocation@@super(new ImageFromDockerfile("localhost/apache-artemis:ckc",false).withFileFromClasspath("Dockerfile","org/apache/camel/test/infra/artemis/services/Dockerfile").withBuildArg(FROM_IMAGE_ARG,TestUtils.prependHubImageNamePrefixIfNeeded(FROM_IMAGE_NAME)));
 @TO@ super(new ImageFromDockerfile("localhost/apache-artemis:camel",false).withFileFromClasspath("Dockerfile","org/apache/camel/test/infra/artemis/services/Dockerfile").withBuildArg(FROM_IMAGE_ARG,TestUtils.prependHubImageNamePrefixIfNeeded(FROM_IMAGE_NAME)));
 @AT@ 1658 @LENGTH@ 314
---UPD MethodInvocation@@new ImageFromDockerfile("localhost/apache-artemis:ckc",false).withFileFromClasspath("Dockerfile","org/apache/camel/test/infra/artemis/services/Dockerfile").withBuildArg(FROM_IMAGE_ARG,TestUtils.prependHubImageNamePrefixIfNeeded(FROM_IMAGE_NAME)) @TO@ new ImageFromDockerfile("localhost/apache-artemis:camel",false).withFileFromClasspath("Dockerfile","org/apache/camel/test/infra/artemis/services/Dockerfile").withBuildArg(FROM_IMAGE_ARG,TestUtils.prependHubImageNamePrefixIfNeeded(FROM_IMAGE_NAME)) @AT@ 1664 @LENGTH@ 306
------UPD ClassInstanceCreation@@ImageFromDockerfile["localhost/apache-artemis:ckc", false] @TO@ ImageFromDockerfile["localhost/apache-artemis:camel", false] @AT@ 1664 @LENGTH@ 62
---------UPD StringLiteral@@"localhost/apache-artemis:ckc" @TO@ "localhost/apache-artemis:camel" @AT@ 1688 @LENGTH@ 30


UPD MethodDeclaration@@public, void, MethodName:onHit, String uri,  @TO@ public, synchronized, void, MethodName:onHit, String uri,  @AT@ 1513 @LENGTH@ 225
---INS Modifier@@synchronized @TO@ MethodDeclaration@@public, void, MethodName:onHit, String uri,  @AT@ 1563 @LENGTH@ 12


UPD IfStatement@@if (containsPossibleCircles) {  GenericQueryAndParameters genericQueryAndParameters=createQueryAndParameters(entityMetaData,queryFragments,parameters).block();  cypherQuery=renderer.render(GenericQueryAndParameters.STATEMENT);  finalParameters=genericQueryAndParameters.getParameters();} else {  cypherQuery=renderer.render(queryFragments.toStatement());} @TO@ if (containsPossibleCircles && !queryFragments.isScalarValueReturn()) {  GenericQueryAndParameters genericQueryAndParameters=createQueryAndParameters(entityMetaData,queryFragments,parameters).block();  cypherQuery=renderer.render(GenericQueryAndParameters.STATEMENT);  finalParameters=genericQueryAndParameters.getParameters();} else {  cypherQuery=renderer.render(queryFragments.toStatement());} @AT@ 34038 @LENGTH@ 399
---DEL SimpleName@@containsPossibleCircles @AT@ 34042 @LENGTH@ 23
---INS InfixExpression@@containsPossibleCircles && !queryFragments.isScalarValueReturn() @TO@ IfStatement@@if (containsPossibleCircles) {  GenericQueryAndParameters genericQueryAndParameters=createQueryAndParameters(entityMetaData,queryFragments,parameters).block();  cypherQuery=renderer.render(GenericQueryAndParameters.STATEMENT);  finalParameters=genericQueryAndParameters.getParameters();} else {  cypherQuery=renderer.render(queryFragments.toStatement());} @AT@ 34083 @LENGTH@ 64
------INS SimpleName@@containsPossibleCircles @TO@ InfixExpression@@containsPossibleCircles && !queryFragments.isScalarValueReturn() @AT@ 34083 @LENGTH@ 23
------INS Operator@@&& @TO@ InfixExpression@@containsPossibleCircles && !queryFragments.isScalarValueReturn() @AT@ 34106 @LENGTH@ 2
------INS PrefixExpression@@!queryFragments.isScalarValueReturn() @TO@ InfixExpression@@containsPossibleCircles && !queryFragments.isScalarValueReturn() @AT@ 34110 @LENGTH@ 37
---------INS Operator@@! @TO@ PrefixExpression@@!queryFragments.isScalarValueReturn() @AT@ 34110 @LENGTH@ 1
---------INS MethodInvocation@@queryFragments.isScalarValueReturn() @TO@ PrefixExpression@@!queryFragments.isScalarValueReturn() @AT@ 34111 @LENGTH@ 36
------------INS SimpleName@@Name:queryFragments @TO@ MethodInvocation@@queryFragments.isScalarValueReturn() @AT@ 34111 @LENGTH@ 14
------------INS SimpleName@@MethodName:isScalarValueReturn:[] @TO@ MethodInvocation@@queryFragments.isScalarValueReturn() @AT@ 34126 @LENGTH@ 21


UPD ExpressionStatement@@MethodInvocation:context.getStreamCachingStrategy().setSpoolDirectory(fileUri()) @TO@ MethodInvocation:context.getStreamCachingStrategy().setSpoolDirectory(testDirectory().toFile()) @AT@ 1781 @LENGTH@ 64
---UPD MethodInvocation@@context.getStreamCachingStrategy().setSpoolDirectory(fileUri()) @TO@ context.getStreamCachingStrategy().setSpoolDirectory(testDirectory().toFile()) @AT@ 1781 @LENGTH@ 63
------UPD SimpleName@@MethodName:setSpoolDirectory:[fileUri()] @TO@ MethodName:setSpoolDirectory:[testDirectory().toFile()] @AT@ 1816 @LENGTH@ 28
---------INS MethodInvocation@@testDirectory().toFile() @TO@ SimpleName@@MethodName:setSpoolDirectory:[fileUri()] @AT@ 1834 @LENGTH@ 24
------------INS MethodInvocation@@MethodName:testDirectory:[] @TO@ MethodInvocation@@testDirectory().toFile() @AT@ 1834 @LENGTH@ 15
------------INS SimpleName@@MethodName:toFile:[] @TO@ MethodInvocation@@testDirectory().toFile() @AT@ 1850 @LENGTH@ 8
---------DEL MethodInvocation@@MethodName:fileUri:[] @AT@ 1834 @LENGTH@ 9


UPD VariableDeclarationStatement@@String[] credentials=uri.getUserInfo().split(":"); @TO@ String[] credentials=uri.getUserInfo().split(":",2); @AT@ 4821 @LENGTH@ 52
---UPD VariableDeclarationFragment@@credentials=uri.getUserInfo().split(":") @TO@ credentials=uri.getUserInfo().split(":",2) @AT@ 4830 @LENGTH@ 42
------UPD MethodInvocation@@uri.getUserInfo().split(":") @TO@ uri.getUserInfo().split(":",2) @AT@ 4844 @LENGTH@ 28
---------UPD SimpleName@@MethodName:split:[":"] @TO@ MethodName:split:[":", 2] @AT@ 4862 @LENGTH@ 10
------------INS NumberLiteral@@2 @TO@ SimpleName@@MethodName:split:[":"] @AT@ 4873 @LENGTH@ 1


INS ExpressionStatement@@MethodInvocation:from("direct:listCustomResourcesByLabels").toF("kubernetes-custom-resources:///?kubernetesClient=#kubernetesClient&operation=listCustomResourcesByLabels") @TO@ MethodDeclaration@@public, void, MethodName:configure, Exception,  @AT@ 12147 @LENGTH@ 180
---INS MethodInvocation@@from("direct:listCustomResourcesByLabels").toF("kubernetes-custom-resources:///?kubernetesClient=#kubernetesClient&operation=listCustomResourcesByLabels") @TO@ ExpressionStatement@@MethodInvocation:from("direct:listCustomResourcesByLabels").toF("kubernetes-custom-resources:///?kubernetesClient=#kubernetesClient&operation=listCustomResourcesByLabels") @AT@ 12147 @LENGTH@ 179
------INS MethodInvocation@@MethodName:from:["direct:listCustomResourcesByLabels"] @TO@ MethodInvocation@@from("direct:listCustomResourcesByLabels").toF("kubernetes-custom-resources:///?kubernetesClient=#kubernetesClient&operation=listCustomResourcesByLabels") @AT@ 12147 @LENGTH@ 42
---------INS StringLiteral@@"direct:listCustomResourcesByLabels" @TO@ MethodInvocation@@MethodName:from:["direct:listCustomResourcesByLabels"] @AT@ 12152 @LENGTH@ 36
------INS SimpleName@@MethodName:toF:["kubernetes-custom-resources:///?kubernetesClient=#kubernetesClient&operation=listCustomResourcesByLabels"] @TO@ MethodInvocation@@from("direct:listCustomResourcesByLabels").toF("kubernetes-custom-resources:///?kubernetesClient=#kubernetesClient&operation=listCustomResourcesByLabels") @AT@ 12190 @LENGTH@ 136
---------INS StringLiteral@@"kubernetes-custom-resources:///?kubernetesClient=#kubernetesClient&operation=listCustomResourcesByLabels" @TO@ SimpleName@@MethodName:toF:["kubernetes-custom-resources:///?kubernetesClient=#kubernetesClient&operation=listCustomResourcesByLabels"] @AT@ 12219 @LENGTH@ 106


UPD IfStatement@@if (isGeneratedPathBased) {  Value internalStartNodeIdValue=values.get(Constants.NAME_OF_INTERNAL_ID);  long startNodeId=internalStartNodeIdValue.asLong();  List<Path> allPaths=StreamSupport.stream(values.values().spliterator(),false).filter(MappingSupport.isListContainingOnly(listType,pathType)).flatMap(entry -> entry.asList(Value::asPath).stream()).collect(Collectors.toList());  List<Path.Segment> segments=allPaths.stream().flatMap(p -> StreamSupport.stream(p.spliterator(),false)).filter(s -> s.start().id() == startNodeId && (relationshipDescription.isIncoming() ? s.relationship().endNodeId() : s.relationship().startNodeId()) == startNodeId && (s.relationship().hasType(typeOfRelationship) || relationshipDescription.isDynamic()) && s.end().hasLabel(targetLabel)).distinct().collect(Collectors.toList());  for (  Path.Segment segment : segments) {    if (processedSegments.contains(segment)) {      continue;    }    processedSegments.add(segment);    Object mappedObject=map(extractNextNodeAndAppendPath(segment.end(),allPaths),allValues,concreteTargetNodeDescription,knownObjects,processedSegments);    if (relationshipDescription.hasRelationshipProperties()) {      Object relationshipProperties=map(segment.relationship(),allValues,(Neo4jPersistentEntity)relationshipDescription.getRelationshipPropertiesEntity(),mappedObject,processedSegments);      relationshipsAndProperties.add(relationshipProperties);      mappedObjectHandler.accept(segment.relationship().type(),relationshipProperties);    } else {      mappedObjectHandler.accept(segment.relationship().type(),mappedObject);    }  }} else if (Values.NULL.equals(list)) {  Collection<Relationship> allMatchingTypeRelationshipsInResult=new ArrayList<>();  Collection<Node> allNodesWithMatchingLabelInResult=new ArrayList<>();  if (allValues.containsKey(Constants.NAME_OF_IS_PATH_SEGMENT) && allValues.get(Constants.NAME_OF_IS_PATH_SEGMENT).asBoolean()) {    Stream.of(allValues.get(Constants.PATH_RELATIONSHIP).asRelationship()).filter(r -> r.type().equals(typeOfRelationship) || relationshipDescription.isDynamic()).forEach(allMatchingTypeRelationshipsInResult::add);    Stream.of(allValues.get(Constants.PATH_START).asNode(),allValues.get(Constants.PATH_START).asNode()).filter(n -> n.hasLabel(targetLabel)).collect(Collectors.toList()).forEach(allNodesWithMatchingLabelInResult::add);  }  StreamSupport.stream(allValues.values().spliterator(),false).filter(MappingSupport.isListContainingOnly(listType,this.relationshipType)).flatMap(entry -> entry.asList(Value::asRelationship).stream()).filter(r -> r.type().equals(typeOfRelationship) || relationshipDescription.isDynamic()).forEach(allMatchingTypeRelationshipsInResult::add);  StreamSupport.stream(allValues.values().spliterator(),false).filter(MappingSupport.isListContainingOnly(listType,this.nodeType)).flatMap(entry -> entry.asList(Value::asNode).stream()).filter(n -> n.hasLabel(targetLabel)).collect(Collectors.toList()).forEach(allNodesWithMatchingLabelInResult::add);  if (allNodesWithMatchingLabelInResult.isEmpty() && allMatchingTypeRelationshipsInResult.isEmpty()) {    return Optional.empty();  }  Function<Relationship,Long> targetIdSelector=relationshipDescription.isIncoming() ? Relationship::startNodeId : Relationship::endNodeId;  Function<Relationship,Long> sourceIdSelector=relationshipDescription.isIncoming() ? Relationship::endNodeId : Relationship::startNodeId;  Long sourceNodeId=getInternalId(values);  for (  Node possibleValueNode : allNodesWithMatchingLabelInResult) {    long targetNodeId=possibleValueNode.id();    for (    Relationship possibleRelationship : allMatchingTypeRelationshipsInResult) {      if (targetIdSelector.apply(possibleRelationship) == targetNodeId && sourceIdSelector.apply(possibleRelationship).equals(sourceNodeId)) {        Object mappedObject=map(possibleValueNode,values,concreteTargetNodeDescription,processedSegments);        if (relationshipDescription.hasRelationshipProperties()) {          Object relationshipProperties=map(possibleRelationship,allValues,(Neo4jPersistentEntity)relationshipDescription.getRelationshipPropertiesEntity(),mappedObject,processedSegments);          relationshipsAndProperties.add(relationshipProperties);          mappedObjectHandler.accept(possibleRelationship.type(),relationshipProperties);        } else {          mappedObjectHandler.accept(possibleRelationship.type(),mappedObject);        }        allMatchingTypeRelationshipsInResult.remove(possibleRelationship);        break;      }    }  }} else {  for (  Value relatedEntity : list.asList(Function.identity())) {    Object valueEntry=map(relatedEntity,allValues,concreteTargetNodeDescription,processedSegments);    if (relationshipDescription.hasRelationshipProperties()) {      String relationshipSymbolicName=sourceLabel + RelationshipDescription.NAME_OF_RELATIONSHIP + targetLabel;      Relationship relatedEntityRelationship=relatedEntity.get(relationshipSymbolicName).asRelationship();      Object relationshipProperties=map(relatedEntityRelationship,allValues,(Neo4jPersistentEntity)relationshipDescription.getRelationshipPropertiesEntity(),valueEntry,processedSegments);      relationshipsAndProperties.add(relationshipProperties);      mappedObjectHandler.accept(relatedEntity.get(RelationshipDescription.NAME_OF_RELATIONSHIP_TYPE).asString(),relationshipProperties);    } else {      mappedObjectHandler.accept(relatedEntity.get(RelationshipDescription.NAME_OF_RELATIONSHIP_TYPE).asString(),valueEntry);    }  }} @TO@ if (isGeneratedPathBased) {  Value internalStartNodeIdValue=values.get(Constants.NAME_OF_INTERNAL_ID);  long startNodeId=internalStartNodeIdValue.asLong();  List<Path> allPaths=StreamSupport.stream(values.values().spliterator(),false).filter(MappingSupport.isListContainingOnly(listType,pathType)).flatMap(entry -> entry.asList(Value::asPath).stream()).collect(Collectors.toList());  List<Path.Segment> segments=allPaths.stream().flatMap(p -> StreamSupport.stream(p.spliterator(),false)).filter(s -> s.start().id() == startNodeId && (relationshipDescription.isIncoming() ? s.relationship().endNodeId() : s.relationship().startNodeId()) == startNodeId && (s.relationship().hasType(typeOfRelationship) || relationshipDescription.isDynamic()) && s.end().hasLabel(targetLabel)).distinct().collect(Collectors.toList());  for (  Path.Segment segment : segments) {    if (processedSegments.contains(segment)) {      continue;    }    processedSegments.add(segment);    Object mappedObject=map(extractNextNodeAndAppendPath(segment.end(),allPaths),allValues,concreteTargetNodeDescription,processedSegments);    if (relationshipDescription.hasRelationshipProperties()) {      Object relationshipProperties=map(segment.relationship(),allValues,(Neo4jPersistentEntity)relationshipDescription.getRelationshipPropertiesEntity(),mappedObject,processedSegments);      relationshipsAndProperties.add(relationshipProperties);      mappedObjectHandler.accept(segment.relationship().type(),relationshipProperties);    } else {      mappedObjectHandler.accept(segment.relationship().type(),mappedObject);    }  }} else if (Values.NULL.equals(list)) {  Collection<Relationship> allMatchingTypeRelationshipsInResult=new ArrayList<>();  Collection<Node> allNodesWithMatchingLabelInResult=new ArrayList<>();  StreamSupport.stream(allValues.values().spliterator(),false).filter(MappingSupport.isListContainingOnly(listType,this.relationshipType)).flatMap(entry -> entry.asList(Value::asRelationship).stream()).filter(r -> r.type().equals(typeOfRelationship) || relationshipDescription.isDynamic()).forEach(allMatchingTypeRelationshipsInResult::add);  StreamSupport.stream(allValues.values().spliterator(),false).filter(MappingSupport.isListContainingOnly(listType,this.nodeType)).flatMap(entry -> entry.asList(Value::asNode).stream()).filter(n -> n.hasLabel(targetLabel)).collect(Collectors.toList()).forEach(allNodesWithMatchingLabelInResult::add);  if (allNodesWithMatchingLabelInResult.isEmpty() && allMatchingTypeRelationshipsInResult.isEmpty()) {    return Optional.empty();  }  Function<Relationship,Long> targetIdSelector=relationshipDescription.isIncoming() ? Relationship::startNodeId : Relationship::endNodeId;  Function<Relationship,Long> sourceIdSelector=relationshipDescription.isIncoming() ? Relationship::endNodeId : Relationship::startNodeId;  Long sourceNodeId=getInternalId(values);  for (  Node possibleValueNode : allNodesWithMatchingLabelInResult) {    long targetNodeId=possibleValueNode.id();    for (    Relationship possibleRelationship : allMatchingTypeRelationshipsInResult) {      if (targetIdSelector.apply(possibleRelationship) == targetNodeId && sourceIdSelector.apply(possibleRelationship).equals(sourceNodeId)) {        Object mappedObject=map(possibleValueNode,values,concreteTargetNodeDescription,processedSegments);        if (relationshipDescription.hasRelationshipProperties()) {          Object relationshipProperties=map(possibleRelationship,allValues,(Neo4jPersistentEntity)relationshipDescription.getRelationshipPropertiesEntity(),mappedObject,processedSegments);          relationshipsAndProperties.add(relationshipProperties);          mappedObjectHandler.accept(possibleRelationship.type(),relationshipProperties);        } else {          mappedObjectHandler.accept(possibleRelationship.type(),mappedObject);        }        allMatchingTypeRelationshipsInResult.remove(possibleRelationship);        break;      }    }  }} else {  for (  Value relatedEntity : list.asList(Function.identity())) {    Object valueEntry=map(relatedEntity,allValues,concreteTargetNodeDescription,processedSegments);    if (relationshipDescription.hasRelationshipProperties()) {      String relationshipSymbolicName=sourceLabel + RelationshipDescription.NAME_OF_RELATIONSHIP + targetLabel;      Relationship relatedEntityRelationship=relatedEntity.get(relationshipSymbolicName).asRelationship();      Object relationshipProperties=map(relatedEntityRelationship,allValues,(Neo4jPersistentEntity)relationshipDescription.getRelationshipPropertiesEntity(),valueEntry,processedSegments);      relationshipsAndProperties.add(relationshipProperties);      mappedObjectHandler.accept(relatedEntity.get(RelationshipDescription.NAME_OF_RELATIONSHIP_TYPE).asString(),relationshipProperties);    } else {      mappedObjectHandler.accept(relatedEntity.get(RelationshipDescription.NAME_OF_RELATIONSHIP_TYPE).asString(),valueEntry);    }  }} @AT@ 19115 @LENGTH@ 6005
---UPD Block@@ThenBody:{  Value internalStartNodeIdValue=values.get(Constants.NAME_OF_INTERNAL_ID);  long startNodeId=internalStartNodeIdValue.asLong();  List<Path> allPaths=StreamSupport.stream(values.values().spliterator(),false).filter(MappingSupport.isListContainingOnly(listType,pathType)).flatMap(entry -> entry.asList(Value::asPath).stream()).collect(Collectors.toList());  List<Path.Segment> segments=allPaths.stream().flatMap(p -> StreamSupport.stream(p.spliterator(),false)).filter(s -> s.start().id() == startNodeId && (relationshipDescription.isIncoming() ? s.relationship().endNodeId() : s.relationship().startNodeId()) == startNodeId && (s.relationship().hasType(typeOfRelationship) || relationshipDescription.isDynamic()) && s.end().hasLabel(targetLabel)).distinct().collect(Collectors.toList());  for (  Path.Segment segment : segments) {    if (processedSegments.contains(segment)) {      continue;    }    processedSegments.add(segment);    Object mappedObject=map(extractNextNodeAndAppendPath(segment.end(),allPaths),allValues,concreteTargetNodeDescription,knownObjects,processedSegments);    if (relationshipDescription.hasRelationshipProperties()) {      Object relationshipProperties=map(segment.relationship(),allValues,(Neo4jPersistentEntity)relationshipDescription.getRelationshipPropertiesEntity(),mappedObject,processedSegments);      relationshipsAndProperties.add(relationshipProperties);      mappedObjectHandler.accept(segment.relationship().type(),relationshipProperties);    } else {      mappedObjectHandler.accept(segment.relationship().type(),mappedObject);    }  }} @TO@ ThenBody:{  Value internalStartNodeIdValue=values.get(Constants.NAME_OF_INTERNAL_ID);  long startNodeId=internalStartNodeIdValue.asLong();  List<Path> allPaths=StreamSupport.stream(values.values().spliterator(),false).filter(MappingSupport.isListContainingOnly(listType,pathType)).flatMap(entry -> entry.asList(Value::asPath).stream()).collect(Collectors.toList());  List<Path.Segment> segments=allPaths.stream().flatMap(p -> StreamSupport.stream(p.spliterator(),false)).filter(s -> s.start().id() == startNodeId && (relationshipDescription.isIncoming() ? s.relationship().endNodeId() : s.relationship().startNodeId()) == startNodeId && (s.relationship().hasType(typeOfRelationship) || relationshipDescription.isDynamic()) && s.end().hasLabel(targetLabel)).distinct().collect(Collectors.toList());  for (  Path.Segment segment : segments) {    if (processedSegments.contains(segment)) {      continue;    }    processedSegments.add(segment);    Object mappedObject=map(extractNextNodeAndAppendPath(segment.end(),allPaths),allValues,concreteTargetNodeDescription,processedSegments);    if (relationshipDescription.hasRelationshipProperties()) {      Object relationshipProperties=map(segment.relationship(),allValues,(Neo4jPersistentEntity)relationshipDescription.getRelationshipPropertiesEntity(),mappedObject,processedSegments);      relationshipsAndProperties.add(relationshipProperties);      mappedObjectHandler.accept(segment.relationship().type(),relationshipProperties);    } else {      mappedObjectHandler.accept(segment.relationship().type(),mappedObject);    }  }} @AT@ 19141 @LENGTH@ 1714
------UPD EnhancedForStatement@@for (Path.Segment segment : segments) {  if (processedSegments.contains(segment)) {    continue;  }  processedSegments.add(segment);  Object mappedObject=map(extractNextNodeAndAppendPath(segment.end(),allPaths),allValues,concreteTargetNodeDescription,knownObjects,processedSegments);  if (relationshipDescription.hasRelationshipProperties()) {    Object relationshipProperties=map(segment.relationship(),allValues,(Neo4jPersistentEntity)relationshipDescription.getRelationshipPropertiesEntity(),mappedObject,processedSegments);    relationshipsAndProperties.add(relationshipProperties);    mappedObjectHandler.accept(segment.relationship().type(),relationshipProperties);  } else {    mappedObjectHandler.accept(segment.relationship().type(),mappedObject);  }} @TO@ for (Path.Segment segment : segments) {  if (processedSegments.contains(segment)) {    continue;  }  processedSegments.add(segment);  Object mappedObject=map(extractNextNodeAndAppendPath(segment.end(),allPaths),allValues,concreteTargetNodeDescription,processedSegments);  if (relationshipDescription.hasRelationshipProperties()) {    Object relationshipProperties=map(segment.relationship(),allValues,(Neo4jPersistentEntity)relationshipDescription.getRelationshipPropertiesEntity(),mappedObject,processedSegments);    relationshipsAndProperties.add(relationshipProperties);    mappedObjectHandler.accept(segment.relationship().type(),relationshipProperties);  } else {    mappedObjectHandler.accept(segment.relationship().type(),mappedObject);  }} @AT@ 20019 @LENGTH@ 832
---------UPD VariableDeclarationStatement@@Object mappedObject=map(extractNextNodeAndAppendPath(segment.end(),allPaths),allValues,concreteTargetNodeDescription,knownObjects,processedSegments); @TO@ Object mappedObject=map(extractNextNodeAndAppendPath(segment.end(),allPaths),allValues,concreteTargetNodeDescription,processedSegments); @AT@ 20167 @LENGTH@ 162
------------UPD VariableDeclarationFragment@@mappedObject=map(extractNextNodeAndAppendPath(segment.end(),allPaths),allValues,concreteTargetNodeDescription,knownObjects,processedSegments) @TO@ mappedObject=map(extractNextNodeAndAppendPath(segment.end(),allPaths),allValues,concreteTargetNodeDescription,processedSegments) @AT@ 20174 @LENGTH@ 154
---------------UPD MethodInvocation@@map(extractNextNodeAndAppendPath(segment.end(),allPaths),allValues,concreteTargetNodeDescription,knownObjects,processedSegments) @TO@ map(extractNextNodeAndAppendPath(segment.end(),allPaths),allValues,concreteTargetNodeDescription,processedSegments) @AT@ 20189 @LENGTH@ 139
------------------UPD SimpleName@@MethodName:map:[extractNextNodeAndAppendPath(segment.end(),allPaths), allValues, concreteTargetNodeDescription, knownObjects, processedSegments] @TO@ MethodName:map:[extractNextNodeAndAppendPath(segment.end(),allPaths), allValues, concreteTargetNodeDescription, processedSegments] @AT@ 20189 @LENGTH@ 139
---------------------DEL SimpleName@@knownObjects @AT@ 20296 @LENGTH@ 12
---UPD Block@@ElseBody:if (Values.NULL.equals(list)) {  Collection<Relationship> allMatchingTypeRelationshipsInResult=new ArrayList<>();  Collection<Node> allNodesWithMatchingLabelInResult=new ArrayList<>();  if (allValues.containsKey(Constants.NAME_OF_IS_PATH_SEGMENT) && allValues.get(Constants.NAME_OF_IS_PATH_SEGMENT).asBoolean()) {    Stream.of(allValues.get(Constants.PATH_RELATIONSHIP).asRelationship()).filter(r -> r.type().equals(typeOfRelationship) || relationshipDescription.isDynamic()).forEach(allMatchingTypeRelationshipsInResult::add);    Stream.of(allValues.get(Constants.PATH_START).asNode(),allValues.get(Constants.PATH_START).asNode()).filter(n -> n.hasLabel(targetLabel)).collect(Collectors.toList()).forEach(allNodesWithMatchingLabelInResult::add);  }  StreamSupport.stream(allValues.values().spliterator(),false).filter(MappingSupport.isListContainingOnly(listType,this.relationshipType)).flatMap(entry -> entry.asList(Value::asRelationship).stream()).filter(r -> r.type().equals(typeOfRelationship) || relationshipDescription.isDynamic()).forEach(allMatchingTypeRelationshipsInResult::add);  StreamSupport.stream(allValues.values().spliterator(),false).filter(MappingSupport.isListContainingOnly(listType,this.nodeType)).flatMap(entry -> entry.asList(Value::asNode).stream()).filter(n -> n.hasLabel(targetLabel)).collect(Collectors.toList()).forEach(allNodesWithMatchingLabelInResult::add);  if (allNodesWithMatchingLabelInResult.isEmpty() && allMatchingTypeRelationshipsInResult.isEmpty()) {    return Optional.empty();  }  Function<Relationship,Long> targetIdSelector=relationshipDescription.isIncoming() ? Relationship::startNodeId : Relationship::endNodeId;  Function<Relationship,Long> sourceIdSelector=relationshipDescription.isIncoming() ? Relationship::endNodeId : Relationship::startNodeId;  Long sourceNodeId=getInternalId(values);  for (  Node possibleValueNode : allNodesWithMatchingLabelInResult) {    long targetNodeId=possibleValueNode.id();    for (    Relationship possibleRelationship : allMatchingTypeRelationshipsInResult) {      if (targetIdSelector.apply(possibleRelationship) == targetNodeId && sourceIdSelector.apply(possibleRelationship).equals(sourceNodeId)) {        Object mappedObject=map(possibleValueNode,values,concreteTargetNodeDescription,processedSegments);        if (relationshipDescription.hasRelationshipProperties()) {          Object relationshipProperties=map(possibleRelationship,allValues,(Neo4jPersistentEntity)relationshipDescription.getRelationshipPropertiesEntity(),mappedObject,processedSegments);          relationshipsAndProperties.add(relationshipProperties);          mappedObjectHandler.accept(possibleRelationship.type(),relationshipProperties);        } else {          mappedObjectHandler.accept(possibleRelationship.type(),mappedObject);        }        allMatchingTypeRelationshipsInResult.remove(possibleRelationship);        break;      }    }  }} else {  for (  Value relatedEntity : list.asList(Function.identity())) {    Object valueEntry=map(relatedEntity,allValues,concreteTargetNodeDescription,processedSegments);    if (relationshipDescription.hasRelationshipProperties()) {      String relationshipSymbolicName=sourceLabel + RelationshipDescription.NAME_OF_RELATIONSHIP + targetLabel;      Relationship relatedEntityRelationship=relatedEntity.get(relationshipSymbolicName).asRelationship();      Object relationshipProperties=map(relatedEntityRelationship,allValues,(Neo4jPersistentEntity)relationshipDescription.getRelationshipPropertiesEntity(),valueEntry,processedSegments);      relationshipsAndProperties.add(relationshipProperties);      mappedObjectHandler.accept(relatedEntity.get(RelationshipDescription.NAME_OF_RELATIONSHIP_TYPE).asString(),relationshipProperties);    } else {      mappedObjectHandler.accept(relatedEntity.get(RelationshipDescription.NAME_OF_RELATIONSHIP_TYPE).asString(),valueEntry);    }  }} @TO@ ElseBody:if (Values.NULL.equals(list)) {  Collection<Relationship> allMatchingTypeRelationshipsInResult=new ArrayList<>();  Collection<Node> allNodesWithMatchingLabelInResult=new ArrayList<>();  StreamSupport.stream(allValues.values().spliterator(),false).filter(MappingSupport.isListContainingOnly(listType,this.relationshipType)).flatMap(entry -> entry.asList(Value::asRelationship).stream()).filter(r -> r.type().equals(typeOfRelationship) || relationshipDescription.isDynamic()).forEach(allMatchingTypeRelationshipsInResult::add);  StreamSupport.stream(allValues.values().spliterator(),false).filter(MappingSupport.isListContainingOnly(listType,this.nodeType)).flatMap(entry -> entry.asList(Value::asNode).stream()).filter(n -> n.hasLabel(targetLabel)).collect(Collectors.toList()).forEach(allNodesWithMatchingLabelInResult::add);  if (allNodesWithMatchingLabelInResult.isEmpty() && allMatchingTypeRelationshipsInResult.isEmpty()) {    return Optional.empty();  }  Function<Relationship,Long> targetIdSelector=relationshipDescription.isIncoming() ? Relationship::startNodeId : Relationship::endNodeId;  Function<Relationship,Long> sourceIdSelector=relationshipDescription.isIncoming() ? Relationship::endNodeId : Relationship::startNodeId;  Long sourceNodeId=getInternalId(values);  for (  Node possibleValueNode : allNodesWithMatchingLabelInResult) {    long targetNodeId=possibleValueNode.id();    for (    Relationship possibleRelationship : allMatchingTypeRelationshipsInResult) {      if (targetIdSelector.apply(possibleRelationship) == targetNodeId && sourceIdSelector.apply(possibleRelationship).equals(sourceNodeId)) {        Object mappedObject=map(possibleValueNode,values,concreteTargetNodeDescription,processedSegments);        if (relationshipDescription.hasRelationshipProperties()) {          Object relationshipProperties=map(possibleRelationship,allValues,(Neo4jPersistentEntity)relationshipDescription.getRelationshipPropertiesEntity(),mappedObject,processedSegments);          relationshipsAndProperties.add(relationshipProperties);          mappedObjectHandler.accept(possibleRelationship.type(),relationshipProperties);        } else {          mappedObjectHandler.accept(possibleRelationship.type(),mappedObject);        }        allMatchingTypeRelationshipsInResult.remove(possibleRelationship);        break;      }    }  }} else {  for (  Value relatedEntity : list.asList(Function.identity())) {    Object valueEntry=map(relatedEntity,allValues,concreteTargetNodeDescription,processedSegments);    if (relationshipDescription.hasRelationshipProperties()) {      String relationshipSymbolicName=sourceLabel + RelationshipDescription.NAME_OF_RELATIONSHIP + targetLabel;      Relationship relatedEntityRelationship=relatedEntity.get(relationshipSymbolicName).asRelationship();      Object relationshipProperties=map(relatedEntityRelationship,allValues,(Neo4jPersistentEntity)relationshipDescription.getRelationshipPropertiesEntity(),valueEntry,processedSegments);      relationshipsAndProperties.add(relationshipProperties);      mappedObjectHandler.accept(relatedEntity.get(RelationshipDescription.NAME_OF_RELATIONSHIP_TYPE).asString(),relationshipProperties);    } else {      mappedObjectHandler.accept(relatedEntity.get(RelationshipDescription.NAME_OF_RELATIONSHIP_TYPE).asString(),valueEntry);    }  }} @AT@ 20861 @LENGTH@ 4259
------UPD IfStatement@@if (Values.NULL.equals(list)) {  Collection<Relationship> allMatchingTypeRelationshipsInResult=new ArrayList<>();  Collection<Node> allNodesWithMatchingLabelInResult=new ArrayList<>();  if (allValues.containsKey(Constants.NAME_OF_IS_PATH_SEGMENT) && allValues.get(Constants.NAME_OF_IS_PATH_SEGMENT).asBoolean()) {    Stream.of(allValues.get(Constants.PATH_RELATIONSHIP).asRelationship()).filter(r -> r.type().equals(typeOfRelationship) || relationshipDescription.isDynamic()).forEach(allMatchingTypeRelationshipsInResult::add);    Stream.of(allValues.get(Constants.PATH_START).asNode(),allValues.get(Constants.PATH_START).asNode()).filter(n -> n.hasLabel(targetLabel)).collect(Collectors.toList()).forEach(allNodesWithMatchingLabelInResult::add);  }  StreamSupport.stream(allValues.values().spliterator(),false).filter(MappingSupport.isListContainingOnly(listType,this.relationshipType)).flatMap(entry -> entry.asList(Value::asRelationship).stream()).filter(r -> r.type().equals(typeOfRelationship) || relationshipDescription.isDynamic()).forEach(allMatchingTypeRelationshipsInResult::add);  StreamSupport.stream(allValues.values().spliterator(),false).filter(MappingSupport.isListContainingOnly(listType,this.nodeType)).flatMap(entry -> entry.asList(Value::asNode).stream()).filter(n -> n.hasLabel(targetLabel)).collect(Collectors.toList()).forEach(allNodesWithMatchingLabelInResult::add);  if (allNodesWithMatchingLabelInResult.isEmpty() && allMatchingTypeRelationshipsInResult.isEmpty()) {    return Optional.empty();  }  Function<Relationship,Long> targetIdSelector=relationshipDescription.isIncoming() ? Relationship::startNodeId : Relationship::endNodeId;  Function<Relationship,Long> sourceIdSelector=relationshipDescription.isIncoming() ? Relationship::endNodeId : Relationship::startNodeId;  Long sourceNodeId=getInternalId(values);  for (  Node possibleValueNode : allNodesWithMatchingLabelInResult) {    long targetNodeId=possibleValueNode.id();    for (    Relationship possibleRelationship : allMatchingTypeRelationshipsInResult) {      if (targetIdSelector.apply(possibleRelationship) == targetNodeId && sourceIdSelector.apply(possibleRelationship).equals(sourceNodeId)) {        Object mappedObject=map(possibleValueNode,values,concreteTargetNodeDescription,processedSegments);        if (relationshipDescription.hasRelationshipProperties()) {          Object relationshipProperties=map(possibleRelationship,allValues,(Neo4jPersistentEntity)relationshipDescription.getRelationshipPropertiesEntity(),mappedObject,processedSegments);          relationshipsAndProperties.add(relationshipProperties);          mappedObjectHandler.accept(possibleRelationship.type(),relationshipProperties);        } else {          mappedObjectHandler.accept(possibleRelationship.type(),mappedObject);        }        allMatchingTypeRelationshipsInResult.remove(possibleRelationship);        break;      }    }  }} else {  for (  Value relatedEntity : list.asList(Function.identity())) {    Object valueEntry=map(relatedEntity,allValues,concreteTargetNodeDescription,processedSegments);    if (relationshipDescription.hasRelationshipProperties()) {      String relationshipSymbolicName=sourceLabel + RelationshipDescription.NAME_OF_RELATIONSHIP + targetLabel;      Relationship relatedEntityRelationship=relatedEntity.get(relationshipSymbolicName).asRelationship();      Object relationshipProperties=map(relatedEntityRelationship,allValues,(Neo4jPersistentEntity)relationshipDescription.getRelationshipPropertiesEntity(),valueEntry,processedSegments);      relationshipsAndProperties.add(relationshipProperties);      mappedObjectHandler.accept(relatedEntity.get(RelationshipDescription.NAME_OF_RELATIONSHIP_TYPE).asString(),relationshipProperties);    } else {      mappedObjectHandler.accept(relatedEntity.get(RelationshipDescription.NAME_OF_RELATIONSHIP_TYPE).asString(),valueEntry);    }  }} @TO@ if (Values.NULL.equals(list)) {  Collection<Relationship> allMatchingTypeRelationshipsInResult=new ArrayList<>();  Collection<Node> allNodesWithMatchingLabelInResult=new ArrayList<>();  StreamSupport.stream(allValues.values().spliterator(),false).filter(MappingSupport.isListContainingOnly(listType,this.relationshipType)).flatMap(entry -> entry.asList(Value::asRelationship).stream()).filter(r -> r.type().equals(typeOfRelationship) || relationshipDescription.isDynamic()).forEach(allMatchingTypeRelationshipsInResult::add);  StreamSupport.stream(allValues.values().spliterator(),false).filter(MappingSupport.isListContainingOnly(listType,this.nodeType)).flatMap(entry -> entry.asList(Value::asNode).stream()).filter(n -> n.hasLabel(targetLabel)).collect(Collectors.toList()).forEach(allNodesWithMatchingLabelInResult::add);  if (allNodesWithMatchingLabelInResult.isEmpty() && allMatchingTypeRelationshipsInResult.isEmpty()) {    return Optional.empty();  }  Function<Relationship,Long> targetIdSelector=relationshipDescription.isIncoming() ? Relationship::startNodeId : Relationship::endNodeId;  Function<Relationship,Long> sourceIdSelector=relationshipDescription.isIncoming() ? Relationship::endNodeId : Relationship::startNodeId;  Long sourceNodeId=getInternalId(values);  for (  Node possibleValueNode : allNodesWithMatchingLabelInResult) {    long targetNodeId=possibleValueNode.id();    for (    Relationship possibleRelationship : allMatchingTypeRelationshipsInResult) {      if (targetIdSelector.apply(possibleRelationship) == targetNodeId && sourceIdSelector.apply(possibleRelationship).equals(sourceNodeId)) {        Object mappedObject=map(possibleValueNode,values,concreteTargetNodeDescription,processedSegments);        if (relationshipDescription.hasRelationshipProperties()) {          Object relationshipProperties=map(possibleRelationship,allValues,(Neo4jPersistentEntity)relationshipDescription.getRelationshipPropertiesEntity(),mappedObject,processedSegments);          relationshipsAndProperties.add(relationshipProperties);          mappedObjectHandler.accept(possibleRelationship.type(),relationshipProperties);        } else {          mappedObjectHandler.accept(possibleRelationship.type(),mappedObject);        }        allMatchingTypeRelationshipsInResult.remove(possibleRelationship);        break;      }    }  }} else {  for (  Value relatedEntity : list.asList(Function.identity())) {    Object valueEntry=map(relatedEntity,allValues,concreteTargetNodeDescription,processedSegments);    if (relationshipDescription.hasRelationshipProperties()) {      String relationshipSymbolicName=sourceLabel + RelationshipDescription.NAME_OF_RELATIONSHIP + targetLabel;      Relationship relatedEntityRelationship=relatedEntity.get(relationshipSymbolicName).asRelationship();      Object relationshipProperties=map(relatedEntityRelationship,allValues,(Neo4jPersistentEntity)relationshipDescription.getRelationshipPropertiesEntity(),valueEntry,processedSegments);      relationshipsAndProperties.add(relationshipProperties);      mappedObjectHandler.accept(relatedEntity.get(RelationshipDescription.NAME_OF_RELATIONSHIP_TYPE).asString(),relationshipProperties);    } else {      mappedObjectHandler.accept(relatedEntity.get(RelationshipDescription.NAME_OF_RELATIONSHIP_TYPE).asString(),valueEntry);    }  }} @AT@ 20861 @LENGTH@ 4259
---------UPD Block@@ThenBody:{  Collection<Relationship> allMatchingTypeRelationshipsInResult=new ArrayList<>();  Collection<Node> allNodesWithMatchingLabelInResult=new ArrayList<>();  if (allValues.containsKey(Constants.NAME_OF_IS_PATH_SEGMENT) && allValues.get(Constants.NAME_OF_IS_PATH_SEGMENT).asBoolean()) {    Stream.of(allValues.get(Constants.PATH_RELATIONSHIP).asRelationship()).filter(r -> r.type().equals(typeOfRelationship) || relationshipDescription.isDynamic()).forEach(allMatchingTypeRelationshipsInResult::add);    Stream.of(allValues.get(Constants.PATH_START).asNode(),allValues.get(Constants.PATH_START).asNode()).filter(n -> n.hasLabel(targetLabel)).collect(Collectors.toList()).forEach(allNodesWithMatchingLabelInResult::add);  }  StreamSupport.stream(allValues.values().spliterator(),false).filter(MappingSupport.isListContainingOnly(listType,this.relationshipType)).flatMap(entry -> entry.asList(Value::asRelationship).stream()).filter(r -> r.type().equals(typeOfRelationship) || relationshipDescription.isDynamic()).forEach(allMatchingTypeRelationshipsInResult::add);  StreamSupport.stream(allValues.values().spliterator(),false).filter(MappingSupport.isListContainingOnly(listType,this.nodeType)).flatMap(entry -> entry.asList(Value::asNode).stream()).filter(n -> n.hasLabel(targetLabel)).collect(Collectors.toList()).forEach(allNodesWithMatchingLabelInResult::add);  if (allNodesWithMatchingLabelInResult.isEmpty() && allMatchingTypeRelationshipsInResult.isEmpty()) {    return Optional.empty();  }  Function<Relationship,Long> targetIdSelector=relationshipDescription.isIncoming() ? Relationship::startNodeId : Relationship::endNodeId;  Function<Relationship,Long> sourceIdSelector=relationshipDescription.isIncoming() ? Relationship::endNodeId : Relationship::startNodeId;  Long sourceNodeId=getInternalId(values);  for (  Node possibleValueNode : allNodesWithMatchingLabelInResult) {    long targetNodeId=possibleValueNode.id();    for (    Relationship possibleRelationship : allMatchingTypeRelationshipsInResult) {      if (targetIdSelector.apply(possibleRelationship) == targetNodeId && sourceIdSelector.apply(possibleRelationship).equals(sourceNodeId)) {        Object mappedObject=map(possibleValueNode,values,concreteTargetNodeDescription,processedSegments);        if (relationshipDescription.hasRelationshipProperties()) {          Object relationshipProperties=map(possibleRelationship,allValues,(Neo4jPersistentEntity)relationshipDescription.getRelationshipPropertiesEntity(),mappedObject,processedSegments);          relationshipsAndProperties.add(relationshipProperties);          mappedObjectHandler.accept(possibleRelationship.type(),relationshipProperties);        } else {          mappedObjectHandler.accept(possibleRelationship.type(),mappedObject);        }        allMatchingTypeRelationshipsInResult.remove(possibleRelationship);        break;      }    }  }} @TO@ ThenBody:{  Collection<Relationship> allMatchingTypeRelationshipsInResult=new ArrayList<>();  Collection<Node> allNodesWithMatchingLabelInResult=new ArrayList<>();  StreamSupport.stream(allValues.values().spliterator(),false).filter(MappingSupport.isListContainingOnly(listType,this.relationshipType)).flatMap(entry -> entry.asList(Value::asRelationship).stream()).filter(r -> r.type().equals(typeOfRelationship) || relationshipDescription.isDynamic()).forEach(allMatchingTypeRelationshipsInResult::add);  StreamSupport.stream(allValues.values().spliterator(),false).filter(MappingSupport.isListContainingOnly(listType,this.nodeType)).flatMap(entry -> entry.asList(Value::asNode).stream()).filter(n -> n.hasLabel(targetLabel)).collect(Collectors.toList()).forEach(allNodesWithMatchingLabelInResult::add);  if (allNodesWithMatchingLabelInResult.isEmpty() && allMatchingTypeRelationshipsInResult.isEmpty()) {    return Optional.empty();  }  Function<Relationship,Long> targetIdSelector=relationshipDescription.isIncoming() ? Relationship::startNodeId : Relationship::endNodeId;  Function<Relationship,Long> sourceIdSelector=relationshipDescription.isIncoming() ? Relationship::endNodeId : Relationship::startNodeId;  Long sourceNodeId=getInternalId(values);  for (  Node possibleValueNode : allNodesWithMatchingLabelInResult) {    long targetNodeId=possibleValueNode.id();    for (    Relationship possibleRelationship : allMatchingTypeRelationshipsInResult) {      if (targetIdSelector.apply(possibleRelationship) == targetNodeId && sourceIdSelector.apply(possibleRelationship).equals(sourceNodeId)) {        Object mappedObject=map(possibleValueNode,values,concreteTargetNodeDescription,processedSegments);        if (relationshipDescription.hasRelationshipProperties()) {          Object relationshipProperties=map(possibleRelationship,allValues,(Neo4jPersistentEntity)relationshipDescription.getRelationshipPropertiesEntity(),mappedObject,processedSegments);          relationshipsAndProperties.add(relationshipProperties);          mappedObjectHandler.accept(possibleRelationship.type(),relationshipProperties);        } else {          mappedObjectHandler.accept(possibleRelationship.type(),mappedObject);        }        allMatchingTypeRelationshipsInResult.remove(possibleRelationship);        break;      }    }  }} @AT@ 20891 @LENGTH@ 3173
------------DEL IfStatement@@if (allValues.containsKey(Constants.NAME_OF_IS_PATH_SEGMENT) && allValues.get(Constants.NAME_OF_IS_PATH_SEGMENT).asBoolean()) {  Stream.of(allValues.get(Constants.PATH_RELATIONSHIP).asRelationship()).filter(r -> r.type().equals(typeOfRelationship) || relationshipDescription.isDynamic()).forEach(allMatchingTypeRelationshipsInResult::add);  Stream.of(allValues.get(Constants.PATH_START).asNode(),allValues.get(Constants.PATH_START).asNode()).filter(n -> n.hasLabel(targetLabel)).collect(Collectors.toList()).forEach(allNodesWithMatchingLabelInResult::add);} @AT@ 21176 @LENGTH@ 597
---------------DEL InfixExpression@@allValues.containsKey(Constants.NAME_OF_IS_PATH_SEGMENT) && allValues.get(Constants.NAME_OF_IS_PATH_SEGMENT).asBoolean() @AT@ 21180 @LENGTH@ 120
------------------DEL MethodInvocation@@allValues.containsKey(Constants.NAME_OF_IS_PATH_SEGMENT) @AT@ 21180 @LENGTH@ 56
---------------------DEL SimpleName@@Name:allValues @AT@ 21180 @LENGTH@ 9
---------------------DEL SimpleName@@MethodName:containsKey:[Constants.NAME_OF_IS_PATH_SEGMENT] @AT@ 21190 @LENGTH@ 46
------------------------DEL QualifiedName@@Constants.NAME_OF_IS_PATH_SEGMENT @AT@ 21202 @LENGTH@ 33
---------------------------DEL SimpleName@@Constants @AT@ 21202 @LENGTH@ 9
---------------------------DEL SimpleName@@NAME_OF_IS_PATH_SEGMENT @AT@ 21212 @LENGTH@ 23
------------------DEL Operator@@&& @AT@ 21236 @LENGTH@ 2
------------------DEL MethodInvocation@@allValues.get(Constants.NAME_OF_IS_PATH_SEGMENT).asBoolean() @AT@ 21240 @LENGTH@ 60
---------------------DEL MethodInvocation@@MethodName:get:[Constants.NAME_OF_IS_PATH_SEGMENT] @AT@ 21240 @LENGTH@ 48
------------------------DEL QualifiedName@@Constants.NAME_OF_IS_PATH_SEGMENT @AT@ 21254 @LENGTH@ 33
---------------------------DEL SimpleName@@Constants @AT@ 21254 @LENGTH@ 9
---------------------------DEL SimpleName@@NAME_OF_IS_PATH_SEGMENT @AT@ 21264 @LENGTH@ 23
---------------------DEL SimpleName@@Name:allValues @AT@ 21240 @LENGTH@ 9
---------------------DEL SimpleName@@MethodName:asBoolean:[] @AT@ 21289 @LENGTH@ 11
---------------DEL Block@@ThenBody:{  Stream.of(allValues.get(Constants.PATH_RELATIONSHIP).asRelationship()).filter(r -> r.type().equals(typeOfRelationship) || relationshipDescription.isDynamic()).forEach(allMatchingTypeRelationshipsInResult::add);  Stream.of(allValues.get(Constants.PATH_START).asNode(),allValues.get(Constants.PATH_START).asNode()).filter(n -> n.hasLabel(targetLabel)).collect(Collectors.toList()).forEach(allNodesWithMatchingLabelInResult::add);} @AT@ 21302 @LENGTH@ 471
------------------DEL ExpressionStatement@@MethodInvocation:Stream.of(allValues.get(Constants.PATH_RELATIONSHIP).asRelationship()).filter(r -> r.type().equals(typeOfRelationship) || relationshipDescription.isDynamic()).forEach(allMatchingTypeRelationshipsInResult::add) @AT@ 21308 @LENGTH@ 224
---------------------DEL MethodInvocation@@Stream.of(allValues.get(Constants.PATH_RELATIONSHIP).asRelationship()).filter(r -> r.type().equals(typeOfRelationship) || relationshipDescription.isDynamic()).forEach(allMatchingTypeRelationshipsInResult::add) @AT@ 21308 @LENGTH@ 223
------------------------DEL MethodInvocation@@MethodName:filter:[r -> r.type().equals(typeOfRelationship) || relationshipDescription.isDynamic()] @AT@ 21308 @LENGTH@ 165
---------------------------DEL LambdaExpression@@r -> r.type().equals(typeOfRelationship) || relationshipDescription.isDynamic() @AT@ 21393 @LENGTH@ 79
------------------------------DEL VariableDeclarationFragment@@r @AT@ 21393 @LENGTH@ 1
---------------------------------DEL SimpleName@@r @AT@ 21393 @LENGTH@ 1
------------------------------DEL InfixExpression@@r.type().equals(typeOfRelationship) || relationshipDescription.isDynamic() @AT@ 21398 @LENGTH@ 74
---------------------------------DEL MethodInvocation@@r.type().equals(typeOfRelationship) @AT@ 21398 @LENGTH@ 35
------------------------------------DEL MethodInvocation@@MethodName:type:[] @AT@ 21398 @LENGTH@ 8
------------------------------------DEL SimpleName@@Name:r @AT@ 21398 @LENGTH@ 1
------------------------------------DEL SimpleName@@MethodName:equals:[typeOfRelationship] @AT@ 21407 @LENGTH@ 26
---------------------------------------DEL SimpleName@@typeOfRelationship @AT@ 21414 @LENGTH@ 18
---------------------------------DEL Operator@@|| @AT@ 21433 @LENGTH@ 2
---------------------------------DEL MethodInvocation@@relationshipDescription.isDynamic() @AT@ 21437 @LENGTH@ 35
------------------------------------DEL SimpleName@@Name:relationshipDescription @AT@ 21437 @LENGTH@ 23
------------------------------------DEL SimpleName@@MethodName:isDynamic:[] @AT@ 21461 @LENGTH@ 11
------------------------DEL MethodInvocation@@MethodName:of:[allValues.get(Constants.PATH_RELATIONSHIP).asRelationship()] @AT@ 21308 @LENGTH@ 70
---------------------------DEL MethodInvocation@@allValues.get(Constants.PATH_RELATIONSHIP).asRelationship() @AT@ 21318 @LENGTH@ 59
------------------------------DEL MethodInvocation@@MethodName:get:[Constants.PATH_RELATIONSHIP] @AT@ 21318 @LENGTH@ 42
---------------------------------DEL QualifiedName@@Constants.PATH_RELATIONSHIP @AT@ 21332 @LENGTH@ 27
------------------------------------DEL SimpleName@@Constants @AT@ 21332 @LENGTH@ 9
------------------------------------DEL SimpleName@@PATH_RELATIONSHIP @AT@ 21342 @LENGTH@ 17
------------------------------DEL SimpleName@@Name:allValues @AT@ 21318 @LENGTH@ 9
------------------------------DEL SimpleName@@MethodName:asRelationship:[] @AT@ 21361 @LENGTH@ 16
------------------------DEL SimpleName@@Name:Stream @AT@ 21308 @LENGTH@ 6
------------------------DEL SimpleName@@MethodName:forEach:[allMatchingTypeRelationshipsInResult::add] @AT@ 21481 @LENGTH@ 50
------------------DEL ExpressionStatement@@MethodInvocation:Stream.of(allValues.get(Constants.PATH_START).asNode(),allValues.get(Constants.PATH_START).asNode()).filter(n -> n.hasLabel(targetLabel)).collect(Collectors.toList()).forEach(allNodesWithMatchingLabelInResult::add) @AT@ 21538 @LENGTH@ 230
---------------------DEL MethodInvocation@@Stream.of(allValues.get(Constants.PATH_START).asNode(),allValues.get(Constants.PATH_START).asNode()).filter(n -> n.hasLabel(targetLabel)).collect(Collectors.toList()).forEach(allNodesWithMatchingLabelInResult::add) @AT@ 21538 @LENGTH@ 229
------------------------DEL MethodInvocation@@MethodName:collect:[Collectors.toList()] @AT@ 21538 @LENGTH@ 174
---------------------------DEL MethodInvocation@@Collectors.toList() @AT@ 21692 @LENGTH@ 19
------------------------------DEL SimpleName@@Name:Collectors @AT@ 21692 @LENGTH@ 10
------------------------------DEL SimpleName@@MethodName:toList:[] @AT@ 21703 @LENGTH@ 8
------------------------DEL MethodInvocation@@MethodName:filter:[n -> n.hasLabel(targetLabel)] @AT@ 21538 @LENGTH@ 145
---------------------------DEL LambdaExpression@@n -> n.hasLabel(targetLabel) @AT@ 21654 @LENGTH@ 28
------------------------------DEL VariableDeclarationFragment@@n @AT@ 21654 @LENGTH@ 1
---------------------------------DEL SimpleName@@n @AT@ 21654 @LENGTH@ 1
------------------------------DEL MethodInvocation@@n.hasLabel(targetLabel) @AT@ 21659 @LENGTH@ 23
---------------------------------DEL SimpleName@@Name:n @AT@ 21659 @LENGTH@ 1
---------------------------------DEL SimpleName@@MethodName:hasLabel:[targetLabel] @AT@ 21661 @LENGTH@ 21
------------------------------------DEL SimpleName@@targetLabel @AT@ 21670 @LENGTH@ 11
------------------------DEL MethodInvocation@@MethodName:of:[allValues.get(Constants.PATH_START).asNode(), allValues.get(Constants.PATH_START).asNode()] @AT@ 21538 @LENGTH@ 101
---------------------------DEL MethodInvocation@@allValues.get(Constants.PATH_START).asNode() @AT@ 21548 @LENGTH@ 44
------------------------------DEL MethodInvocation@@MethodName:get:[Constants.PATH_START] @AT@ 21548 @LENGTH@ 35
---------------------------------DEL QualifiedName@@Constants.PATH_START @AT@ 21562 @LENGTH@ 20
------------------------------------DEL SimpleName@@Constants @AT@ 21562 @LENGTH@ 9
------------------------------------DEL SimpleName@@PATH_START @AT@ 21572 @LENGTH@ 10
------------------------------DEL SimpleName@@Name:allValues @AT@ 21548 @LENGTH@ 9
------------------------------DEL SimpleName@@MethodName:asNode:[] @AT@ 21584 @LENGTH@ 8
---------------------------DEL MethodInvocation@@allValues.get(Constants.PATH_START).asNode() @AT@ 21594 @LENGTH@ 44
------------------------------DEL MethodInvocation@@MethodName:get:[Constants.PATH_START] @AT@ 21594 @LENGTH@ 35
---------------------------------DEL QualifiedName@@Constants.PATH_START @AT@ 21608 @LENGTH@ 20
------------------------------------DEL SimpleName@@Constants @AT@ 21608 @LENGTH@ 9
------------------------------------DEL SimpleName@@PATH_START @AT@ 21618 @LENGTH@ 10
------------------------------DEL SimpleName@@Name:allValues @AT@ 21594 @LENGTH@ 9
------------------------------DEL SimpleName@@MethodName:asNode:[] @AT@ 21630 @LENGTH@ 8
------------------------DEL SimpleName@@Name:Stream @AT@ 21538 @LENGTH@ 6
------------------------DEL SimpleName@@MethodName:forEach:[allNodesWithMatchingLabelInResult::add] @AT@ 21720 @LENGTH@ 47


INS MethodDeclaration@@void, MethodName:saveBidirectionalSameEntityRelationship, @Autowired BidirectionalSameEntityRepository repository,  @TO@ TypeDeclaration@@[@Nested]SaveWithRelationships, IntegrationTestBase @AT@ 88899 @LENGTH@ 1116
---INS PrimitiveType@@void @TO@ MethodDeclaration@@void, MethodName:saveBidirectionalSameEntityRelationship, @Autowired BidirectionalSameEntityRepository repository,  @AT@ 88894 @LENGTH@ 4
---INS SimpleName@@MethodName:saveBidirectionalSameEntityRelationship @TO@ MethodDeclaration@@void, MethodName:saveBidirectionalSameEntityRelationship, @Autowired BidirectionalSameEntityRepository repository,  @AT@ 88899 @LENGTH@ 39
---INS SingleVariableDeclaration@@@Autowired BidirectionalSameEntityRepository repository @TO@ MethodDeclaration@@void, MethodName:saveBidirectionalSameEntityRelationship, @Autowired BidirectionalSameEntityRepository repository,  @AT@ 88939 @LENGTH@ 55
------INS SimpleType@@BidirectionalSameEntityRepository @TO@ SingleVariableDeclaration@@@Autowired BidirectionalSameEntityRepository repository @AT@ 88950 @LENGTH@ 33
------INS SimpleName@@repository @TO@ SingleVariableDeclaration@@@Autowired BidirectionalSameEntityRepository repository @AT@ 88984 @LENGTH@ 10
---INS VariableDeclarationStatement@@BidirectionalSameEntity entity1=new BidirectionalSameEntity("e1"); @TO@ MethodDeclaration@@void, MethodName:saveBidirectionalSameEntityRelationship, @Autowired BidirectionalSameEntityRepository repository,  @AT@ 89001 @LENGTH@ 68
------INS SimpleType@@BidirectionalSameEntity @TO@ VariableDeclarationStatement@@BidirectionalSameEntity entity1=new BidirectionalSameEntity("e1"); @AT@ 89001 @LENGTH@ 23
------INS VariableDeclarationFragment@@entity1=new BidirectionalSameEntity("e1") @TO@ VariableDeclarationStatement@@BidirectionalSameEntity entity1=new BidirectionalSameEntity("e1"); @AT@ 89025 @LENGTH@ 43
---------INS SimpleName@@entity1 @TO@ VariableDeclarationFragment@@entity1=new BidirectionalSameEntity("e1") @AT@ 89025 @LENGTH@ 7
---------INS ClassInstanceCreation@@BidirectionalSameEntity["e1"] @TO@ VariableDeclarationFragment@@entity1=new BidirectionalSameEntity("e1") @AT@ 89035 @LENGTH@ 33
------------INS New@@new @TO@ ClassInstanceCreation@@BidirectionalSameEntity["e1"] @AT@ 89035 @LENGTH@ 3
------------INS SimpleType@@BidirectionalSameEntity @TO@ ClassInstanceCreation@@BidirectionalSameEntity["e1"] @AT@ 89039 @LENGTH@ 23
------------INS StringLiteral@@"e1" @TO@ ClassInstanceCreation@@BidirectionalSameEntity["e1"] @AT@ 89063 @LENGTH@ 4
---INS VariableDeclarationStatement@@BidirectionalSameEntity entity2=new BidirectionalSameEntity("e2"); @TO@ MethodDeclaration@@void, MethodName:saveBidirectionalSameEntityRelationship, @Autowired BidirectionalSameEntityRepository repository,  @AT@ 89073 @LENGTH@ 68
------INS SimpleType@@BidirectionalSameEntity @TO@ VariableDeclarationStatement@@BidirectionalSameEntity entity2=new BidirectionalSameEntity("e2"); @AT@ 89073 @LENGTH@ 23
------INS VariableDeclarationFragment@@entity2=new BidirectionalSameEntity("e2") @TO@ VariableDeclarationStatement@@BidirectionalSameEntity entity2=new BidirectionalSameEntity("e2"); @AT@ 89097 @LENGTH@ 43
---------INS SimpleName@@entity2 @TO@ VariableDeclarationFragment@@entity2=new BidirectionalSameEntity("e2") @AT@ 89097 @LENGTH@ 7
---------INS ClassInstanceCreation@@BidirectionalSameEntity["e2"] @TO@ VariableDeclarationFragment@@entity2=new BidirectionalSameEntity("e2") @AT@ 89107 @LENGTH@ 33
------------INS New@@new @TO@ ClassInstanceCreation@@BidirectionalSameEntity["e2"] @AT@ 89107 @LENGTH@ 3
------------INS SimpleType@@BidirectionalSameEntity @TO@ ClassInstanceCreation@@BidirectionalSameEntity["e2"] @AT@ 89111 @LENGTH@ 23
------------INS StringLiteral@@"e2" @TO@ ClassInstanceCreation@@BidirectionalSameEntity["e2"] @AT@ 89135 @LENGTH@ 4
---INS VariableDeclarationStatement@@BidirectionalSameEntity.BidirectionalSameRelationship e1KnowsE2=new BidirectionalSameEntity.BidirectionalSameRelationship(entity2); @TO@ MethodDeclaration@@void, MethodName:saveBidirectionalSameEntityRelationship, @Autowired BidirectionalSameEntityRepository repository,  @AT@ 89146 @LENGTH@ 138
------INS SimpleType@@BidirectionalSameEntity.BidirectionalSameRelationship @TO@ VariableDeclarationStatement@@BidirectionalSameEntity.BidirectionalSameRelationship e1KnowsE2=new BidirectionalSameEntity.BidirectionalSameRelationship(entity2); @AT@ 89146 @LENGTH@ 53
------INS VariableDeclarationFragment@@e1KnowsE2=new BidirectionalSameEntity.BidirectionalSameRelationship(entity2) @TO@ VariableDeclarationStatement@@BidirectionalSameEntity.BidirectionalSameRelationship e1KnowsE2=new BidirectionalSameEntity.BidirectionalSameRelationship(entity2); @AT@ 89200 @LENGTH@ 83
---------INS SimpleName@@e1KnowsE2 @TO@ VariableDeclarationFragment@@e1KnowsE2=new BidirectionalSameEntity.BidirectionalSameRelationship(entity2) @AT@ 89200 @LENGTH@ 9
---------INS ClassInstanceCreation@@BidirectionalSameEntity.BidirectionalSameRelationship[entity2] @TO@ VariableDeclarationFragment@@e1KnowsE2=new BidirectionalSameEntity.BidirectionalSameRelationship(entity2) @AT@ 89217 @LENGTH@ 66
------------INS New@@new @TO@ ClassInstanceCreation@@BidirectionalSameEntity.BidirectionalSameRelationship[entity2] @AT@ 89217 @LENGTH@ 3
------------INS SimpleType@@BidirectionalSameEntity.BidirectionalSameRelationship @TO@ ClassInstanceCreation@@BidirectionalSameEntity.BidirectionalSameRelationship[entity2] @AT@ 89221 @LENGTH@ 53
------------INS SimpleName@@entity2 @TO@ ClassInstanceCreation@@BidirectionalSameEntity.BidirectionalSameRelationship[entity2] @AT@ 89275 @LENGTH@ 7
---INS VariableDeclarationStatement@@BidirectionalSameEntity.BidirectionalSameRelationship e2KnowsE1=new BidirectionalSameEntity.BidirectionalSameRelationship(entity1); @TO@ MethodDeclaration@@void, MethodName:saveBidirectionalSameEntityRelationship, @Autowired BidirectionalSameEntityRepository repository,  @AT@ 89288 @LENGTH@ 138
------INS SimpleType@@BidirectionalSameEntity.BidirectionalSameRelationship @TO@ VariableDeclarationStatement@@BidirectionalSameEntity.BidirectionalSameRelationship e2KnowsE1=new BidirectionalSameEntity.BidirectionalSameRelationship(entity1); @AT@ 89288 @LENGTH@ 53
------INS VariableDeclarationFragment@@e2KnowsE1=new BidirectionalSameEntity.BidirectionalSameRelationship(entity1) @TO@ VariableDeclarationStatement@@BidirectionalSameEntity.BidirectionalSameRelationship e2KnowsE1=new BidirectionalSameEntity.BidirectionalSameRelationship(entity1); @AT@ 89342 @LENGTH@ 83
---------INS SimpleName@@e2KnowsE1 @TO@ VariableDeclarationFragment@@e2KnowsE1=new BidirectionalSameEntity.BidirectionalSameRelationship(entity1) @AT@ 89342 @LENGTH@ 9
---------INS ClassInstanceCreation@@BidirectionalSameEntity.BidirectionalSameRelationship[entity1] @TO@ VariableDeclarationFragment@@e2KnowsE1=new BidirectionalSameEntity.BidirectionalSameRelationship(entity1) @AT@ 89359 @LENGTH@ 66
------------INS New@@new @TO@ ClassInstanceCreation@@BidirectionalSameEntity.BidirectionalSameRelationship[entity1] @AT@ 89359 @LENGTH@ 3
------------INS SimpleType@@BidirectionalSameEntity.BidirectionalSameRelationship @TO@ ClassInstanceCreation@@BidirectionalSameEntity.BidirectionalSameRelationship[entity1] @AT@ 89363 @LENGTH@ 53
------------INS SimpleName@@entity1 @TO@ ClassInstanceCreation@@BidirectionalSameEntity.BidirectionalSameRelationship[entity1] @AT@ 89417 @LENGTH@ 7
---INS ExpressionStatement@@MethodInvocation:entity1.setKnows(Collections.singletonList(e1KnowsE2)) @TO@ MethodDeclaration@@void, MethodName:saveBidirectionalSameEntityRelationship, @Autowired BidirectionalSameEntityRepository repository,  @AT@ 89431 @LENGTH@ 55
------INS MethodInvocation@@entity1.setKnows(Collections.singletonList(e1KnowsE2)) @TO@ ExpressionStatement@@MethodInvocation:entity1.setKnows(Collections.singletonList(e1KnowsE2)) @AT@ 89431 @LENGTH@ 54
---------INS SimpleName@@Name:entity1 @TO@ MethodInvocation@@entity1.setKnows(Collections.singletonList(e1KnowsE2)) @AT@ 89431 @LENGTH@ 7
---------INS SimpleName@@MethodName:setKnows:[Collections.singletonList(e1KnowsE2)] @TO@ MethodInvocation@@entity1.setKnows(Collections.singletonList(e1KnowsE2)) @AT@ 89439 @LENGTH@ 46
------------INS MethodInvocation@@Collections.singletonList(e1KnowsE2) @TO@ SimpleName@@MethodName:setKnows:[Collections.singletonList(e1KnowsE2)] @AT@ 89448 @LENGTH@ 36
---------------INS SimpleName@@Name:Collections @TO@ MethodInvocation@@Collections.singletonList(e1KnowsE2) @AT@ 89448 @LENGTH@ 11
---------------INS SimpleName@@MethodName:singletonList:[e1KnowsE2] @TO@ MethodInvocation@@Collections.singletonList(e1KnowsE2) @AT@ 89460 @LENGTH@ 24
------------------INS SimpleName@@e1KnowsE2 @TO@ SimpleName@@MethodName:singletonList:[e1KnowsE2] @AT@ 89474 @LENGTH@ 9
---INS ExpressionStatement@@MethodInvocation:entity2.setKnows(Collections.singletonList(e2KnowsE1)) @TO@ MethodDeclaration@@void, MethodName:saveBidirectionalSameEntityRelationship, @Autowired BidirectionalSameEntityRepository repository,  @AT@ 89490 @LENGTH@ 55
------INS MethodInvocation@@entity2.setKnows(Collections.singletonList(e2KnowsE1)) @TO@ ExpressionStatement@@MethodInvocation:entity2.setKnows(Collections.singletonList(e2KnowsE1)) @AT@ 89490 @LENGTH@ 54
---------INS SimpleName@@Name:entity2 @TO@ MethodInvocation@@entity2.setKnows(Collections.singletonList(e2KnowsE1)) @AT@ 89490 @LENGTH@ 7
---------INS SimpleName@@MethodName:setKnows:[Collections.singletonList(e2KnowsE1)] @TO@ MethodInvocation@@entity2.setKnows(Collections.singletonList(e2KnowsE1)) @AT@ 89498 @LENGTH@ 46
------------INS MethodInvocation@@Collections.singletonList(e2KnowsE1) @TO@ SimpleName@@MethodName:setKnows:[Collections.singletonList(e2KnowsE1)] @AT@ 89507 @LENGTH@ 36
---------------INS SimpleName@@Name:Collections @TO@ MethodInvocation@@Collections.singletonList(e2KnowsE1) @AT@ 89507 @LENGTH@ 11
---------------INS SimpleName@@MethodName:singletonList:[e2KnowsE1] @TO@ MethodInvocation@@Collections.singletonList(e2KnowsE1) @AT@ 89519 @LENGTH@ 24
------------------INS SimpleName@@e2KnowsE1 @TO@ SimpleName@@MethodName:singletonList:[e2KnowsE1] @AT@ 89533 @LENGTH@ 9
---INS ExpressionStatement@@MethodInvocation:repository.save(entity1) @TO@ MethodDeclaration@@void, MethodName:saveBidirectionalSameEntityRelationship, @Autowired BidirectionalSameEntityRepository repository,  @AT@ 89550 @LENGTH@ 25
------INS MethodInvocation@@repository.save(entity1) @TO@ ExpressionStatement@@MethodInvocation:repository.save(entity1) @AT@ 89550 @LENGTH@ 24
---------INS SimpleName@@Name:repository @TO@ MethodInvocation@@repository.save(entity1) @AT@ 89550 @LENGTH@ 10
---------INS SimpleName@@MethodName:save:[entity1] @TO@ MethodInvocation@@repository.save(entity1) @AT@ 89561 @LENGTH@ 13
------------INS SimpleName@@entity1 @TO@ SimpleName@@MethodName:save:[entity1] @AT@ 89566 @LENGTH@ 7
---INS TryStatement@@try (Session session=createSession()){  List<Record> records=session.run("MATCH (e:BidirectionalSameEntity{id:'e1'})-[:KNOWS]->(:BidirectionalSameEntity{id:'e2'}) RETURN e").list();  assertThat(records).hasSize(1);  records=session.run("MATCH (e:BidirectionalSameEntity{id:'e2'})-[:KNOWS]->(:BidirectionalSameEntity{id:'e1'}) RETURN e").list();  assertThat(records).hasSize(1);}  @TO@ MethodDeclaration@@void, MethodName:saveBidirectionalSameEntityRelationship, @Autowired BidirectionalSameEntityRepository repository,  @AT@ 89579 @LENGTH@ 432
------INS VariableDeclarationExpression@@Session session=createSession() @TO@ TryStatement@@try (Session session=createSession()){  List<Record> records=session.run("MATCH (e:BidirectionalSameEntity{id:'e1'})-[:KNOWS]->(:BidirectionalSameEntity{id:'e2'}) RETURN e").list();  assertThat(records).hasSize(1);  records=session.run("MATCH (e:BidirectionalSameEntity{id:'e2'})-[:KNOWS]->(:BidirectionalSameEntity{id:'e1'}) RETURN e").list();  assertThat(records).hasSize(1);}  @AT@ 89584 @LENGTH@ 33
---------INS SimpleType@@Session @TO@ VariableDeclarationExpression@@Session session=createSession() @AT@ 89584 @LENGTH@ 7
---------INS VariableDeclarationFragment@@session=createSession() @TO@ VariableDeclarationExpression@@Session session=createSession() @AT@ 89592 @LENGTH@ 25
------------INS SimpleName@@session @TO@ VariableDeclarationFragment@@session=createSession() @AT@ 89592 @LENGTH@ 7
------------INS MethodInvocation@@MethodName:createSession:[] @TO@ VariableDeclarationFragment@@session=createSession() @AT@ 89602 @LENGTH@ 15
------INS VariableDeclarationStatement@@List<Record> records=session.run("MATCH (e:BidirectionalSameEntity{id:'e1'})-[:KNOWS]->(:BidirectionalSameEntity{id:'e2'}) RETURN e").list(); @TO@ TryStatement@@try (Session session=createSession()){  List<Record> records=session.run("MATCH (e:BidirectionalSameEntity{id:'e1'})-[:KNOWS]->(:BidirectionalSameEntity{id:'e2'}) RETURN e").list();  assertThat(records).hasSize(1);  records=session.run("MATCH (e:BidirectionalSameEntity{id:'e2'})-[:KNOWS]->(:BidirectionalSameEntity{id:'e1'}) RETURN e").list();  assertThat(records).hasSize(1);}  @AT@ 89625 @LENGTH@ 157
---------INS ParameterizedType@@List<Record> @TO@ VariableDeclarationStatement@@List<Record> records=session.run("MATCH (e:BidirectionalSameEntity{id:'e1'})-[:KNOWS]->(:BidirectionalSameEntity{id:'e2'}) RETURN e").list(); @AT@ 89625 @LENGTH@ 12
------------INS SimpleType@@List @TO@ ParameterizedType@@List<Record> @AT@ 89625 @LENGTH@ 4
------------INS SimpleType@@Record @TO@ ParameterizedType@@List<Record> @AT@ 89630 @LENGTH@ 6
---------INS VariableDeclarationFragment@@records=session.run("MATCH (e:BidirectionalSameEntity{id:'e1'})-[:KNOWS]->(:BidirectionalSameEntity{id:'e2'}) RETURN e").list() @TO@ VariableDeclarationStatement@@List<Record> records=session.run("MATCH (e:BidirectionalSameEntity{id:'e1'})-[:KNOWS]->(:BidirectionalSameEntity{id:'e2'}) RETURN e").list(); @AT@ 89638 @LENGTH@ 143
------------INS SimpleName@@records @TO@ VariableDeclarationFragment@@records=session.run("MATCH (e:BidirectionalSameEntity{id:'e1'})-[:KNOWS]->(:BidirectionalSameEntity{id:'e2'}) RETURN e").list() @AT@ 89638 @LENGTH@ 7
------------INS MethodInvocation@@session.run("MATCH (e:BidirectionalSameEntity{id:'e1'})-[:KNOWS]->(:BidirectionalSameEntity{id:'e2'}) RETURN e").list() @TO@ VariableDeclarationFragment@@records=session.run("MATCH (e:BidirectionalSameEntity{id:'e1'})-[:KNOWS]->(:BidirectionalSameEntity{id:'e2'}) RETURN e").list() @AT@ 89648 @LENGTH@ 133
---------------INS MethodInvocation@@MethodName:run:["MATCH (e:BidirectionalSameEntity{id:'e1'})-[:KNOWS]->(:BidirectionalSameEntity{id:'e2'}) RETURN e"] @TO@ MethodInvocation@@session.run("MATCH (e:BidirectionalSameEntity{id:'e1'})-[:KNOWS]->(:BidirectionalSameEntity{id:'e2'}) RETURN e").list() @AT@ 89648 @LENGTH@ 119
------------------INS StringLiteral@@"MATCH (e:BidirectionalSameEntity{id:'e1'})-[:KNOWS]->(:BidirectionalSameEntity{id:'e2'}) RETURN e" @TO@ MethodInvocation@@MethodName:run:["MATCH (e:BidirectionalSameEntity{id:'e1'})-[:KNOWS]->(:BidirectionalSameEntity{id:'e2'}) RETURN e"] @AT@ 89667 @LENGTH@ 99
---------------INS SimpleName@@Name:session @TO@ MethodInvocation@@session.run("MATCH (e:BidirectionalSameEntity{id:'e1'})-[:KNOWS]->(:BidirectionalSameEntity{id:'e2'}) RETURN e").list() @AT@ 89648 @LENGTH@ 7
---------------INS SimpleName@@MethodName:list:[] @TO@ MethodInvocation@@session.run("MATCH (e:BidirectionalSameEntity{id:'e1'})-[:KNOWS]->(:BidirectionalSameEntity{id:'e2'}) RETURN e").list() @AT@ 89775 @LENGTH@ 6
------INS ExpressionStatement@@MethodInvocation:assertThat(records).hasSize(1) @TO@ TryStatement@@try (Session session=createSession()){  List<Record> records=session.run("MATCH (e:BidirectionalSameEntity{id:'e1'})-[:KNOWS]->(:BidirectionalSameEntity{id:'e2'}) RETURN e").list();  assertThat(records).hasSize(1);  records=session.run("MATCH (e:BidirectionalSameEntity{id:'e2'})-[:KNOWS]->(:BidirectionalSameEntity{id:'e1'}) RETURN e").list();  assertThat(records).hasSize(1);}  @AT@ 89788 @LENGTH@ 31
---------INS MethodInvocation@@assertThat(records).hasSize(1) @TO@ ExpressionStatement@@MethodInvocation:assertThat(records).hasSize(1) @AT@ 89788 @LENGTH@ 30
------------INS MethodInvocation@@MethodName:assertThat:[records] @TO@ MethodInvocation@@assertThat(records).hasSize(1) @AT@ 89788 @LENGTH@ 19
---------------INS SimpleName@@records @TO@ MethodInvocation@@MethodName:assertThat:[records] @AT@ 89799 @LENGTH@ 7
------------INS SimpleName@@MethodName:hasSize:[1] @TO@ MethodInvocation@@assertThat(records).hasSize(1) @AT@ 89808 @LENGTH@ 10
---------------INS NumberLiteral@@1 @TO@ SimpleName@@MethodName:hasSize:[1] @AT@ 89816 @LENGTH@ 1
------INS ExpressionStatement@@Assignment:records=session.run("MATCH (e:BidirectionalSameEntity{id:'e2'})-[:KNOWS]->(:BidirectionalSameEntity{id:'e1'}) RETURN e").list() @TO@ TryStatement@@try (Session session=createSession()){  List<Record> records=session.run("MATCH (e:BidirectionalSameEntity{id:'e1'})-[:KNOWS]->(:BidirectionalSameEntity{id:'e2'}) RETURN e").list();  assertThat(records).hasSize(1);  records=session.run("MATCH (e:BidirectionalSameEntity{id:'e2'})-[:KNOWS]->(:BidirectionalSameEntity{id:'e1'}) RETURN e").list();  assertThat(records).hasSize(1);}  @AT@ 89825 @LENGTH@ 144
---------INS Assignment@@records=session.run("MATCH (e:BidirectionalSameEntity{id:'e2'})-[:KNOWS]->(:BidirectionalSameEntity{id:'e1'}) RETURN e").list() @TO@ ExpressionStatement@@Assignment:records=session.run("MATCH (e:BidirectionalSameEntity{id:'e2'})-[:KNOWS]->(:BidirectionalSameEntity{id:'e1'}) RETURN e").list() @AT@ 89825 @LENGTH@ 143
------------INS SimpleName@@records @TO@ Assignment@@records=session.run("MATCH (e:BidirectionalSameEntity{id:'e2'})-[:KNOWS]->(:BidirectionalSameEntity{id:'e1'}) RETURN e").list() @AT@ 89825 @LENGTH@ 7
------------INS Operator@@= @TO@ Assignment@@records=session.run("MATCH (e:BidirectionalSameEntity{id:'e2'})-[:KNOWS]->(:BidirectionalSameEntity{id:'e1'}) RETURN e").list() @AT@ 89832 @LENGTH@ 1
------------INS MethodInvocation@@session.run("MATCH (e:BidirectionalSameEntity{id:'e2'})-[:KNOWS]->(:BidirectionalSameEntity{id:'e1'}) RETURN e").list() @TO@ Assignment@@records=session.run("MATCH (e:BidirectionalSameEntity{id:'e2'})-[:KNOWS]->(:BidirectionalSameEntity{id:'e1'}) RETURN e").list() @AT@ 89835 @LENGTH@ 133
---------------INS MethodInvocation@@MethodName:run:["MATCH (e:BidirectionalSameEntity{id:'e2'})-[:KNOWS]->(:BidirectionalSameEntity{id:'e1'}) RETURN e"] @TO@ MethodInvocation@@session.run("MATCH (e:BidirectionalSameEntity{id:'e2'})-[:KNOWS]->(:BidirectionalSameEntity{id:'e1'}) RETURN e").list() @AT@ 89835 @LENGTH@ 119
------------------INS StringLiteral@@"MATCH (e:BidirectionalSameEntity{id:'e2'})-[:KNOWS]->(:BidirectionalSameEntity{id:'e1'}) RETURN e" @TO@ MethodInvocation@@MethodName:run:["MATCH (e:BidirectionalSameEntity{id:'e2'})-[:KNOWS]->(:BidirectionalSameEntity{id:'e1'}) RETURN e"] @AT@ 89854 @LENGTH@ 99
---------------INS SimpleName@@Name:session @TO@ MethodInvocation@@session.run("MATCH (e:BidirectionalSameEntity{id:'e2'})-[:KNOWS]->(:BidirectionalSameEntity{id:'e1'}) RETURN e").list() @AT@ 89835 @LENGTH@ 7
---------------INS SimpleName@@MethodName:list:[] @TO@ MethodInvocation@@session.run("MATCH (e:BidirectionalSameEntity{id:'e2'})-[:KNOWS]->(:BidirectionalSameEntity{id:'e1'}) RETURN e").list() @AT@ 89962 @LENGTH@ 6
------INS ExpressionStatement@@MethodInvocation:assertThat(records).hasSize(1) @TO@ TryStatement@@try (Session session=createSession()){  List<Record> records=session.run("MATCH (e:BidirectionalSameEntity{id:'e1'})-[:KNOWS]->(:BidirectionalSameEntity{id:'e2'}) RETURN e").list();  assertThat(records).hasSize(1);  records=session.run("MATCH (e:BidirectionalSameEntity{id:'e2'})-[:KNOWS]->(:BidirectionalSameEntity{id:'e1'}) RETURN e").list();  assertThat(records).hasSize(1);}  @AT@ 89975 @LENGTH@ 31
---------INS MethodInvocation@@assertThat(records).hasSize(1) @TO@ ExpressionStatement@@MethodInvocation:assertThat(records).hasSize(1) @AT@ 89975 @LENGTH@ 30
------------INS MethodInvocation@@MethodName:assertThat:[records] @TO@ MethodInvocation@@assertThat(records).hasSize(1) @AT@ 89975 @LENGTH@ 19
---------------INS SimpleName@@records @TO@ MethodInvocation@@MethodName:assertThat:[records] @AT@ 89986 @LENGTH@ 7
------------INS SimpleName@@MethodName:hasSize:[1] @TO@ MethodInvocation@@assertThat(records).hasSize(1) @AT@ 89995 @LENGTH@ 10
---------------INS NumberLiteral@@1 @TO@ SimpleName@@MethodName:hasSize:[1] @AT@ 90003 @LENGTH@ 1


UPD FieldDeclaration@@private, transient, Constructor<T>, [iConstructor=null] @TO@ private, transient, Constructor<T>, [iConstructor] @AT@ 1796 @LENGTH@ 53
---UPD VariableDeclarationFragment@@iConstructor=null @TO@ iConstructor @AT@ 1829 @LENGTH@ 19
------DEL NullLiteral@@null @AT@ 1844 @LENGTH@ 4


UPD MethodDeclaration@@private, QueryFragmentsAndParameters.QueryFragments, MethodName:createQueryFragments, @Nullable Condition condition, Sort sort,  @TO@ private, QueryFragments, MethodName:createQueryFragments, @Nullable Condition condition, Sort sort,  @AT@ 9702 @LENGTH@ 2044
---UPD SimpleType@@QueryFragmentsAndParameters.QueryFragments @TO@ QueryFragments @AT@ 9710 @LENGTH@ 42
---UPD VariableDeclarationStatement@@QueryFragmentsAndParameters.QueryFragments queryFragments=new QueryFragmentsAndParameters.QueryFragments(); @TO@ QueryFragments queryFragments=new QueryFragments(); @AT@ 9820 @LENGTH@ 109
------UPD SimpleType@@QueryFragmentsAndParameters.QueryFragments @TO@ QueryFragments @AT@ 9820 @LENGTH@ 42
------UPD VariableDeclarationFragment@@queryFragments=new QueryFragmentsAndParameters.QueryFragments() @TO@ queryFragments=new QueryFragments() @AT@ 9863 @LENGTH@ 65
---------UPD ClassInstanceCreation@@QueryFragmentsAndParameters.QueryFragments[] @TO@ QueryFragments[] @AT@ 9880 @LENGTH@ 48
------------UPD SimpleType@@QueryFragmentsAndParameters.QueryFragments @TO@ QueryFragments @AT@ 9884 @LENGTH@ 42


UPD MethodDeclaration@@private, void, MethodName:collectAllRelationshipTypes, NodeDescription<?> nodeDescription, Set<String> processedRelationshipTypes,  @TO@ private, void, MethodName:collectAllRelationshipTypes, NodeDescription<?> nodeDescription, Set<String> relationshipTypes, Collection<RelationshipDescription> processedRelationshipDescriptions,  @AT@ 24435 @LENGTH@ 518
---UPD SingleVariableDeclaration@@Set<String> processedRelationshipTypes @TO@ Set<String> relationshipTypes @AT@ 24512 @LENGTH@ 38
------UPD SimpleName@@processedRelationshipTypes @TO@ relationshipTypes @AT@ 24524 @LENGTH@ 26
---INS SingleVariableDeclaration@@Collection<RelationshipDescription> processedRelationshipDescriptions @TO@ MethodDeclaration@@private, void, MethodName:collectAllRelationshipTypes, NodeDescription<?> nodeDescription, Set<String> processedRelationshipTypes,  @AT@ 24522 @LENGTH@ 69
------INS ParameterizedType@@Collection<RelationshipDescription> @TO@ SingleVariableDeclaration@@Collection<RelationshipDescription> processedRelationshipDescriptions @AT@ 24522 @LENGTH@ 35
---------INS SimpleType@@Collection @TO@ ParameterizedType@@Collection<RelationshipDescription> @AT@ 24522 @LENGTH@ 10
---------INS SimpleType@@RelationshipDescription @TO@ ParameterizedType@@Collection<RelationshipDescription> @AT@ 24533 @LENGTH@ 23
------INS SimpleName@@processedRelationshipDescriptions @TO@ SingleVariableDeclaration@@Collection<RelationshipDescription> processedRelationshipDescriptions @AT@ 24558 @LENGTH@ 33
---UPD EnhancedForStatement@@for (RelationshipDescription relationshipDescription : nodeDescription.getRelationships()) {  String relationshipType=relationshipDescription.getType();  if (processedRelationshipTypes.contains(relationshipType)) {    continue;  }  processedRelationshipTypes.add(relationshipType);  collectAllRelationshipTypes(relationshipDescription.getTarget(),processedRelationshipTypes);} @TO@ for (RelationshipDescription relationshipDescription : nodeDescription.getRelationships()) {  String relationshipType=relationshipDescription.getType();  if (processedRelationshipDescriptions.contains(relationshipDescription)) {    continue;  }  relationshipTypes.add(relationshipType);  processedRelationshipDescriptions.add(relationshipDescription);  collectAllRelationshipTypes(relationshipDescription.getTarget(),relationshipTypes,processedRelationshipDescriptions);} @AT@ 24557 @LENGTH@ 393
------UPD IfStatement@@if (processedRelationshipTypes.contains(relationshipType)) {  continue;} @TO@ if (processedRelationshipDescriptions.contains(relationshipDescription)) {  continue;} @AT@ 24717 @LENGTH@ 79
---------UPD MethodInvocation@@processedRelationshipTypes.contains(relationshipType) @TO@ processedRelationshipDescriptions.contains(relationshipDescription) @AT@ 24721 @LENGTH@ 53
------------UPD SimpleName@@Name:processedRelationshipTypes @TO@ Name:processedRelationshipDescriptions @AT@ 24721 @LENGTH@ 26
------------UPD SimpleName@@MethodName:contains:[relationshipType] @TO@ MethodName:contains:[relationshipDescription] @AT@ 24748 @LENGTH@ 26
---------------UPD SimpleName@@relationshipType @TO@ relationshipDescription @AT@ 24757 @LENGTH@ 16
------UPD ExpressionStatement@@MethodInvocation:processedRelationshipTypes.add(relationshipType) @TO@ MethodInvocation:relationshipTypes.add(relationshipType) @AT@ 24800 @LENGTH@ 49
---------UPD MethodInvocation@@processedRelationshipTypes.add(relationshipType) @TO@ relationshipTypes.add(relationshipType) @AT@ 24800 @LENGTH@ 48
------------UPD SimpleName@@Name:processedRelationshipTypes @TO@ Name:relationshipTypes @AT@ 24800 @LENGTH@ 26
------UPD ExpressionStatement@@MethodInvocation:collectAllRelationshipTypes(relationshipDescription.getTarget(),processedRelationshipTypes) @TO@ MethodInvocation:collectAllRelationshipTypes(relationshipDescription.getTarget(),relationshipTypes,processedRelationshipDescriptions) @AT@ 24853 @LENGTH@ 93
---------UPD MethodInvocation@@collectAllRelationshipTypes(relationshipDescription.getTarget(),processedRelationshipTypes) @TO@ collectAllRelationshipTypes(relationshipDescription.getTarget(),relationshipTypes,processedRelationshipDescriptions) @AT@ 24853 @LENGTH@ 92
------------UPD SimpleName@@MethodName:collectAllRelationshipTypes:[relationshipDescription.getTarget(), processedRelationshipTypes] @TO@ MethodName:collectAllRelationshipTypes:[relationshipDescription.getTarget(), relationshipTypes, processedRelationshipDescriptions] @AT@ 24853 @LENGTH@ 92
---------------UPD SimpleName@@processedRelationshipTypes @TO@ processedRelationshipDescriptions @AT@ 24918 @LENGTH@ 26
---------------INS SimpleName@@relationshipTypes @TO@ SimpleName@@MethodName:collectAllRelationshipTypes:[relationshipDescription.getTarget(), processedRelationshipTypes] @AT@ 25031 @LENGTH@ 17
------INS ExpressionStatement@@MethodInvocation:processedRelationshipDescriptions.add(relationshipDescription) @TO@ EnhancedForStatement@@for (RelationshipDescription relationshipDescription : nodeDescription.getRelationships()) {  String relationshipType=relationshipDescription.getType();  if (processedRelationshipTypes.contains(relationshipType)) {    continue;  }  processedRelationshipTypes.add(relationshipType);  collectAllRelationshipTypes(relationshipDescription.getTarget(),processedRelationshipTypes);} @AT@ 24899 @LENGTH@ 63
---------INS MethodInvocation@@processedRelationshipDescriptions.add(relationshipDescription) @TO@ ExpressionStatement@@MethodInvocation:processedRelationshipDescriptions.add(relationshipDescription) @AT@ 24899 @LENGTH@ 62
------------INS SimpleName@@Name:processedRelationshipDescriptions @TO@ MethodInvocation@@processedRelationshipDescriptions.add(relationshipDescription) @AT@ 24899 @LENGTH@ 33
------------INS SimpleName@@MethodName:add:[relationshipDescription] @TO@ MethodInvocation@@processedRelationshipDescriptions.add(relationshipDescription) @AT@ 24933 @LENGTH@ 28
---------------INS SimpleName@@relationshipDescription @TO@ SimpleName@@MethodName:add:[relationshipDescription] @AT@ 24937 @LENGTH@ 23


DEL FieldDeclaration@@private, final, int, [dbIndex] @AT@ 3357 @LENGTH@ 26
---DEL Modifier@@private @AT@ 3357 @LENGTH@ 7
---DEL Modifier@@final @AT@ 3365 @LENGTH@ 5
---DEL PrimitiveType@@int @AT@ 3371 @LENGTH@ 3
---DEL VariableDeclarationFragment@@dbIndex @AT@ 3375 @LENGTH@ 7
------DEL SimpleName@@dbIndex @AT@ 3375 @LENGTH@ 7


INS MethodDeclaration@@public, void, MethodName:testIsDirectory, IOException,  @TO@ TypeDeclaration@@[public]PathUtilsTest, TestArguments @AT@ 2552 @LENGTH@ 458
---INS Modifier@@public @TO@ MethodDeclaration@@public, void, MethodName:testIsDirectory, IOException,  @AT@ 2552 @LENGTH@ 6
---INS PrimitiveType@@void @TO@ MethodDeclaration@@public, void, MethodName:testIsDirectory, IOException,  @AT@ 2559 @LENGTH@ 4
---INS SimpleName@@MethodName:testIsDirectory @TO@ MethodDeclaration@@public, void, MethodName:testIsDirectory, IOException,  @AT@ 2564 @LENGTH@ 15
---INS SimpleType@@IOException @TO@ MethodDeclaration@@public, void, MethodName:testIsDirectory, IOException,  @AT@ 2589 @LENGTH@ 11
---INS ExpressionStatement@@MethodInvocation:assertFalse(PathUtils.isDirectory(null)) @TO@ MethodDeclaration@@public, void, MethodName:testIsDirectory, IOException,  @AT@ 2611 @LENGTH@ 41
------INS MethodInvocation@@assertFalse(PathUtils.isDirectory(null)) @TO@ ExpressionStatement@@MethodInvocation:assertFalse(PathUtils.isDirectory(null)) @AT@ 2611 @LENGTH@ 40
---------INS SimpleName@@MethodName:assertFalse:[PathUtils.isDirectory(null)] @TO@ MethodInvocation@@assertFalse(PathUtils.isDirectory(null)) @AT@ 2611 @LENGTH@ 40
------------INS MethodInvocation@@PathUtils.isDirectory(null) @TO@ SimpleName@@MethodName:assertFalse:[PathUtils.isDirectory(null)] @AT@ 2623 @LENGTH@ 27
---------------INS SimpleName@@Name:PathUtils @TO@ MethodInvocation@@PathUtils.isDirectory(null) @AT@ 2623 @LENGTH@ 9
---------------INS SimpleName@@MethodName:isDirectory:[null] @TO@ MethodInvocation@@PathUtils.isDirectory(null) @AT@ 2633 @LENGTH@ 17
------------------INS NullLiteral@@null @TO@ SimpleName@@MethodName:isDirectory:[null] @AT@ 2645 @LENGTH@ 4
---INS ExpressionStatement@@MethodInvocation:assertTrue(PathUtils.isDirectory(tempDir)) @TO@ MethodDeclaration@@public, void, MethodName:testIsDirectory, IOException,  @AT@ 2662 @LENGTH@ 43
------INS MethodInvocation@@assertTrue(PathUtils.isDirectory(tempDir)) @TO@ ExpressionStatement@@MethodInvocation:assertTrue(PathUtils.isDirectory(tempDir)) @AT@ 2662 @LENGTH@ 42
---------INS SimpleName@@MethodName:assertTrue:[PathUtils.isDirectory(tempDir)] @TO@ MethodInvocation@@assertTrue(PathUtils.isDirectory(tempDir)) @AT@ 2662 @LENGTH@ 42
------------INS MethodInvocation@@PathUtils.isDirectory(tempDir) @TO@ SimpleName@@MethodName:assertTrue:[PathUtils.isDirectory(tempDir)] @AT@ 2673 @LENGTH@ 30
---------------INS SimpleName@@Name:PathUtils @TO@ MethodInvocation@@PathUtils.isDirectory(tempDir) @AT@ 2673 @LENGTH@ 9
---------------INS SimpleName@@MethodName:isDirectory:[tempDir] @TO@ MethodInvocation@@PathUtils.isDirectory(tempDir) @AT@ 2683 @LENGTH@ 20
------------------INS SimpleName@@tempDir @TO@ SimpleName@@MethodName:isDirectory:[tempDir] @AT@ 2695 @LENGTH@ 7
---INS VariableDeclarationStatement@@Path testFile1=Files.createTempFile(tempDir,"prefix",null); @TO@ MethodDeclaration@@public, void, MethodName:testIsDirectory, IOException,  @AT@ 2714 @LENGTH@ 63
------INS SimpleType@@Path @TO@ VariableDeclarationStatement@@Path testFile1=Files.createTempFile(tempDir,"prefix",null); @AT@ 2714 @LENGTH@ 4
------INS VariableDeclarationFragment@@testFile1=Files.createTempFile(tempDir,"prefix",null) @TO@ VariableDeclarationStatement@@Path testFile1=Files.createTempFile(tempDir,"prefix",null); @AT@ 2719 @LENGTH@ 57
---------INS SimpleName@@testFile1 @TO@ VariableDeclarationFragment@@testFile1=Files.createTempFile(tempDir,"prefix",null) @AT@ 2719 @LENGTH@ 9
---------INS MethodInvocation@@Files.createTempFile(tempDir,"prefix",null) @TO@ VariableDeclarationFragment@@testFile1=Files.createTempFile(tempDir,"prefix",null) @AT@ 2731 @LENGTH@ 45
------------INS SimpleName@@Name:Files @TO@ MethodInvocation@@Files.createTempFile(tempDir,"prefix",null) @AT@ 2731 @LENGTH@ 5
------------INS SimpleName@@MethodName:createTempFile:[tempDir, "prefix", null] @TO@ MethodInvocation@@Files.createTempFile(tempDir,"prefix",null) @AT@ 2737 @LENGTH@ 39
---------------INS SimpleName@@tempDir @TO@ SimpleName@@MethodName:createTempFile:[tempDir, "prefix", null] @AT@ 2752 @LENGTH@ 7
---------------INS StringLiteral@@"prefix" @TO@ SimpleName@@MethodName:createTempFile:[tempDir, "prefix", null] @AT@ 2761 @LENGTH@ 8
---------------INS NullLiteral@@null @TO@ SimpleName@@MethodName:createTempFile:[tempDir, "prefix", null] @AT@ 2771 @LENGTH@ 4
---INS ExpressionStatement@@MethodInvocation:assertFalse(PathUtils.isDirectory(testFile1)) @TO@ MethodDeclaration@@public, void, MethodName:testIsDirectory, IOException,  @AT@ 2786 @LENGTH@ 46
------INS MethodInvocation@@assertFalse(PathUtils.isDirectory(testFile1)) @TO@ ExpressionStatement@@MethodInvocation:assertFalse(PathUtils.isDirectory(testFile1)) @AT@ 2786 @LENGTH@ 45
---------INS SimpleName@@MethodName:assertFalse:[PathUtils.isDirectory(testFile1)] @TO@ MethodInvocation@@assertFalse(PathUtils.isDirectory(testFile1)) @AT@ 2786 @LENGTH@ 45
------------INS MethodInvocation@@PathUtils.isDirectory(testFile1) @TO@ SimpleName@@MethodName:assertFalse:[PathUtils.isDirectory(testFile1)] @AT@ 2798 @LENGTH@ 32
---------------INS SimpleName@@Name:PathUtils @TO@ MethodInvocation@@PathUtils.isDirectory(testFile1) @AT@ 2798 @LENGTH@ 9
---------------INS SimpleName@@MethodName:isDirectory:[testFile1] @TO@ MethodInvocation@@PathUtils.isDirectory(testFile1) @AT@ 2808 @LENGTH@ 22
------------------INS SimpleName@@testFile1 @TO@ SimpleName@@MethodName:isDirectory:[testFile1] @AT@ 2820 @LENGTH@ 9
---INS VariableDeclarationStatement@@final Path tempDir=Files.createTempDirectory(getClass().getCanonicalName()); @TO@ MethodDeclaration@@public, void, MethodName:testIsDirectory, IOException,  @AT@ 2842 @LENGTH@ 78
------INS Modifier@@final @TO@ VariableDeclarationStatement@@final Path tempDir=Files.createTempDirectory(getClass().getCanonicalName()); @AT@ 2842 @LENGTH@ 5
------INS SimpleType@@Path @TO@ VariableDeclarationStatement@@final Path tempDir=Files.createTempDirectory(getClass().getCanonicalName()); @AT@ 2848 @LENGTH@ 4
------INS VariableDeclarationFragment@@tempDir=Files.createTempDirectory(getClass().getCanonicalName()) @TO@ VariableDeclarationStatement@@final Path tempDir=Files.createTempDirectory(getClass().getCanonicalName()); @AT@ 2853 @LENGTH@ 66
---------INS SimpleName@@tempDir @TO@ VariableDeclarationFragment@@tempDir=Files.createTempDirectory(getClass().getCanonicalName()) @AT@ 2853 @LENGTH@ 7
---------INS MethodInvocation@@Files.createTempDirectory(getClass().getCanonicalName()) @TO@ VariableDeclarationFragment@@tempDir=Files.createTempDirectory(getClass().getCanonicalName()) @AT@ 2863 @LENGTH@ 56
------------INS SimpleName@@Name:Files @TO@ MethodInvocation@@Files.createTempDirectory(getClass().getCanonicalName()) @AT@ 2863 @LENGTH@ 5
------------INS SimpleName@@MethodName:createTempDirectory:[getClass().getCanonicalName()] @TO@ MethodInvocation@@Files.createTempDirectory(getClass().getCanonicalName()) @AT@ 2869 @LENGTH@ 50
---------------INS MethodInvocation@@getClass().getCanonicalName() @TO@ SimpleName@@MethodName:createTempDirectory:[getClass().getCanonicalName()] @AT@ 2889 @LENGTH@ 29
------------------INS MethodInvocation@@MethodName:getClass:[] @TO@ MethodInvocation@@getClass().getCanonicalName() @AT@ 2889 @LENGTH@ 10
------------------INS SimpleName@@MethodName:getCanonicalName:[] @TO@ MethodInvocation@@getClass().getCanonicalName() @AT@ 2900 @LENGTH@ 18
---INS ExpressionStatement@@MethodInvocation:Files.delete(tempDir) @TO@ MethodDeclaration@@public, void, MethodName:testIsDirectory, IOException,  @AT@ 2929 @LENGTH@ 22
------INS MethodInvocation@@Files.delete(tempDir) @TO@ ExpressionStatement@@MethodInvocation:Files.delete(tempDir) @AT@ 2929 @LENGTH@ 21
---------INS SimpleName@@Name:Files @TO@ MethodInvocation@@Files.delete(tempDir) @AT@ 2929 @LENGTH@ 5
---------INS SimpleName@@MethodName:delete:[tempDir] @TO@ MethodInvocation@@Files.delete(tempDir) @AT@ 2935 @LENGTH@ 15
------------INS SimpleName@@tempDir @TO@ SimpleName@@MethodName:delete:[tempDir] @AT@ 2942 @LENGTH@ 7
---INS ExpressionStatement@@MethodInvocation:assertFalse(PathUtils.isDirectory(tempDir)) @TO@ MethodDeclaration@@public, void, MethodName:testIsDirectory, IOException,  @AT@ 2960 @LENGTH@ 44
------INS MethodInvocation@@assertFalse(PathUtils.isDirectory(tempDir)) @TO@ ExpressionStatement@@MethodInvocation:assertFalse(PathUtils.isDirectory(tempDir)) @AT@ 2960 @LENGTH@ 43
---------INS SimpleName@@MethodName:assertFalse:[PathUtils.isDirectory(tempDir)] @TO@ MethodInvocation@@assertFalse(PathUtils.isDirectory(tempDir)) @AT@ 2960 @LENGTH@ 43
------------INS MethodInvocation@@PathUtils.isDirectory(tempDir) @TO@ SimpleName@@MethodName:assertFalse:[PathUtils.isDirectory(tempDir)] @AT@ 2972 @LENGTH@ 30
---------------INS SimpleName@@Name:PathUtils @TO@ MethodInvocation@@PathUtils.isDirectory(tempDir) @AT@ 2972 @LENGTH@ 9
---------------INS SimpleName@@MethodName:isDirectory:[tempDir] @TO@ MethodInvocation@@PathUtils.isDirectory(tempDir) @AT@ 2982 @LENGTH@ 20
------------------INS SimpleName@@tempDir @TO@ SimpleName@@MethodName:isDirectory:[tempDir] @AT@ 2994 @LENGTH@ 7


INS MethodDeclaration@@String, MethodName:simpleReturnType,  @TO@ TypeDeclaration@@[private]SampleRepository, [Repository<Person,Long>] @AT@ 13280 @LENGTH@ 19
---INS SimpleType@@String @TO@ MethodDeclaration@@String, MethodName:simpleReturnType,  @AT@ 13273 @LENGTH@ 6
---INS SimpleName@@MethodName:simpleReturnType @TO@ MethodDeclaration@@String, MethodName:simpleReturnType,  @AT@ 13280 @LENGTH@ 16


UPD IfStatement@@if (fileExistedAlready == false) {  FileUtils.deleteQuietly(file);} @TO@ if (!fileExistedAlready) {  FileUtils.deleteQuietly(file);} @AT@ 10454 @LENGTH@ 95
---DEL InfixExpression@@fileExistedAlready == false @AT@ 10458 @LENGTH@ 27
------DEL SimpleName@@fileExistedAlready @AT@ 10458 @LENGTH@ 18
------DEL Operator@@== @AT@ 10476 @LENGTH@ 2
------DEL BooleanLiteral@@false @AT@ 10480 @LENGTH@ 5
---INS PrefixExpression@@!fileExistedAlready @TO@ IfStatement@@if (fileExistedAlready == false) {  FileUtils.deleteQuietly(file);} @AT@ 10458 @LENGTH@ 19
------INS Operator@@! @TO@ PrefixExpression@@!fileExistedAlready @AT@ 10458 @LENGTH@ 1
------INS SimpleName@@fileExistedAlready @TO@ PrefixExpression@@!fileExistedAlready @AT@ 10459 @LENGTH@ 18


UPD ExpressionStatement@@MethodInvocation:routeTemplate("myTemplate").templateParameter("foo").templateParameter("bar").templateBean("myBar",Processor.class,(ctx) -> (Processor)ex -> ex.getMessage().setBody("Builder " + ex.getMessage().getBody())).from("direct:{{foo}}").to("bean:{{bar}}") @TO@ MethodInvocation:routeTemplate("myTemplate").templateParameter("foo").templateParameter("bar").templateBean("myBar",Processor.class,ctx -> (Processor)ex -> ex.getMessage().setBody("Builder " + ex.getMessage().getBody())).from("direct:{{foo}}").to("bean:{{bar}}") @AT@ 11344 @LENGTH@ 358
---UPD MethodInvocation@@routeTemplate("myTemplate").templateParameter("foo").templateParameter("bar").templateBean("myBar",Processor.class,(ctx) -> (Processor)ex -> ex.getMessage().setBody("Builder " + ex.getMessage().getBody())).from("direct:{{foo}}").to("bean:{{bar}}") @TO@ routeTemplate("myTemplate").templateParameter("foo").templateParameter("bar").templateBean("myBar",Processor.class,ctx -> (Processor)ex -> ex.getMessage().setBody("Builder " + ex.getMessage().getBody())).from("direct:{{foo}}").to("bean:{{bar}}") @AT@ 11344 @LENGTH@ 357
------UPD MethodInvocation@@MethodName:templateBean:["myBar", Processor.class, (ctx) -> (Processor)ex -> ex.getMessage().setBody("Builder " + ex.getMessage().getBody())] @TO@ MethodName:templateBean:["myBar", Processor.class, ctx -> (Processor)ex -> ex.getMessage().setBody("Builder " + ex.getMessage().getBody())] @AT@ 11344 @LENGTH@ 265
---------UPD LambdaExpression@@(ctx) -> (Processor)ex -> ex.getMessage().setBody("Builder " + ex.getMessage().getBody()) @TO@ ctx -> (Processor)ex -> ex.getMessage().setBody("Builder " + ex.getMessage().getBody()) @AT@ 11518 @LENGTH@ 90


UPD CatchClause@@catch (PropertyReferenceException|InvalidPersistentPropertyPath e) {  if (path.endsWith("_id")) {    return forName(path.substring(0,path.length() - 3) + "id");  }  return null;} @TO@ catch (PropertyReferenceException|InvalidPersistentPropertyPath e) {  if (path.endsWith("_id")) {    return forName(path.substring(0,path.length() - 3) + "id");  }  try {    return PropertyPath.from(Pattern.quote(path),entity.getTypeInformation());  } catch (  PropertyReferenceException|InvalidPersistentPropertyPath ex) {  }  return null;} @AT@ 36546 @LENGTH@ 198
---INS TryStatement@@try {  return PropertyPath.from(Pattern.quote(path),entity.getTypeInformation());} catch (PropertyReferenceException|InvalidPersistentPropertyPath ex) {} @TO@ CatchClause@@catch (PropertyReferenceException|InvalidPersistentPropertyPath e) {  if (path.endsWith("_id")) {    return forName(path.substring(0,path.length() - 3) + "id");  }  return null;} @AT@ 36780 @LENGTH@ 171
------INS ReturnStatement@@MethodInvocation:PropertyPath.from(Pattern.quote(path),entity.getTypeInformation()) @TO@ TryStatement@@try {  return PropertyPath.from(Pattern.quote(path),entity.getTypeInformation());} catch (PropertyReferenceException|InvalidPersistentPropertyPath ex) {} @AT@ 36791 @LENGTH@ 75
---------INS MethodInvocation@@PropertyPath.from(Pattern.quote(path),entity.getTypeInformation()) @TO@ ReturnStatement@@MethodInvocation:PropertyPath.from(Pattern.quote(path),entity.getTypeInformation()) @AT@ 36798 @LENGTH@ 67
------------INS SimpleName@@Name:PropertyPath @TO@ MethodInvocation@@PropertyPath.from(Pattern.quote(path),entity.getTypeInformation()) @AT@ 36798 @LENGTH@ 12
------------INS SimpleName@@MethodName:from:[Pattern.quote(path), entity.getTypeInformation()] @TO@ MethodInvocation@@PropertyPath.from(Pattern.quote(path),entity.getTypeInformation()) @AT@ 36811 @LENGTH@ 54
---------------INS MethodInvocation@@Pattern.quote(path) @TO@ SimpleName@@MethodName:from:[Pattern.quote(path), entity.getTypeInformation()] @AT@ 36816 @LENGTH@ 19
------------------INS SimpleName@@Name:Pattern @TO@ MethodInvocation@@Pattern.quote(path) @AT@ 36816 @LENGTH@ 7
------------------INS SimpleName@@MethodName:quote:[path] @TO@ MethodInvocation@@Pattern.quote(path) @AT@ 36824 @LENGTH@ 11
---------------------INS SimpleName@@path @TO@ SimpleName@@MethodName:quote:[path] @AT@ 36830 @LENGTH@ 4
---------------INS MethodInvocation@@entity.getTypeInformation() @TO@ SimpleName@@MethodName:from:[Pattern.quote(path), entity.getTypeInformation()] @AT@ 36837 @LENGTH@ 27
------------------INS SimpleName@@Name:entity @TO@ MethodInvocation@@entity.getTypeInformation() @AT@ 36837 @LENGTH@ 6
------------------INS SimpleName@@MethodName:getTypeInformation:[] @TO@ MethodInvocation@@entity.getTypeInformation() @AT@ 36844 @LENGTH@ 20
------INS CatchClause@@catch (PropertyReferenceException|InvalidPersistentPropertyPath ex) {} @TO@ TryStatement@@try {  return PropertyPath.from(Pattern.quote(path),entity.getTypeInformation());} catch (PropertyReferenceException|InvalidPersistentPropertyPath ex) {} @AT@ 36873 @LENGTH@ 78
---------INS SingleVariableDeclaration@@PropertyReferenceException|InvalidPersistentPropertyPath ex @TO@ CatchClause@@catch (PropertyReferenceException|InvalidPersistentPropertyPath ex) {} @AT@ 36880 @LENGTH@ 61
------------INS UnionType@@PropertyReferenceException|InvalidPersistentPropertyPath @TO@ SingleVariableDeclaration@@PropertyReferenceException|InvalidPersistentPropertyPath ex @AT@ 36880 @LENGTH@ 58
---------------INS SimpleType@@PropertyReferenceException @TO@ UnionType@@PropertyReferenceException|InvalidPersistentPropertyPath @AT@ 36880 @LENGTH@ 26
---------------INS SimpleType@@InvalidPersistentPropertyPath @TO@ UnionType@@PropertyReferenceException|InvalidPersistentPropertyPath @AT@ 36909 @LENGTH@ 29
------------INS SimpleName@@ex @TO@ SingleVariableDeclaration@@PropertyReferenceException|InvalidPersistentPropertyPath ex @AT@ 36939 @LENGTH@ 2


UPD IfStatement@@if (fileToDelete == null || fileToDelete.exists() == false) {  return true;} @TO@ if (fileToDelete == null || !fileToDelete.exists()) {  return true;} @AT@ 4074 @LENGTH@ 96
---UPD InfixExpression@@fileToDelete == null || fileToDelete.exists() == false @TO@ fileToDelete == null || !fileToDelete.exists() @AT@ 4078 @LENGTH@ 54
------INS PrefixExpression@@!fileToDelete.exists() @TO@ InfixExpression@@fileToDelete == null || fileToDelete.exists() == false @AT@ 4094 @LENGTH@ 22
---------INS Operator@@! @TO@ PrefixExpression@@!fileToDelete.exists() @AT@ 4094 @LENGTH@ 1
---------INS MethodInvocation@@fileToDelete.exists() @TO@ PrefixExpression@@!fileToDelete.exists() @AT@ 4095 @LENGTH@ 21
------------MOV SimpleName@@Name:fileToDelete @TO@ MethodInvocation@@fileToDelete.exists() @AT@ 4102 @LENGTH@ 12
------------MOV SimpleName@@MethodName:exists:[] @TO@ MethodInvocation@@fileToDelete.exists() @AT@ 4115 @LENGTH@ 8
------DEL InfixExpression@@fileToDelete.exists() == false @AT@ 4102 @LENGTH@ 30
---------DEL MethodInvocation@@fileToDelete.exists() @AT@ 4102 @LENGTH@ 21
---------DEL Operator@@== @AT@ 4123 @LENGTH@ 2
---------DEL BooleanLiteral@@false @AT@ 4127 @LENGTH@ 5


UPD IfStatement@@if (execString != null) {  sysExit(ss,processLine(execString));} @TO@ if (execString != null) {  if (execString.length() > 1 && execString.startsWith("\"") && execString.endsWith("\"")) {    execString=execString.substring(1,execString.length() - 1);  }  sysExit(ss,processLine(execString));} @AT@ 6315 @LENGTH@ 75
---UPD Block@@ThenBody:{  sysExit(ss,processLine(execString));} @TO@ ThenBody:{  if (execString.length() > 1 && execString.startsWith("\"") && execString.endsWith("\"")) {    execString=execString.substring(1,execString.length() - 1);  }  sysExit(ss,processLine(execString));} @AT@ 6339 @LENGTH@ 51
------MOV IfStatement@@if (execString.length() > 1 && execString.startsWith("\"") && execString.endsWith("\"")) {  execString=execString.substring(1,execString.length() - 1);} @TO@ Block@@ThenBody:{  sysExit(ss,processLine(execString));} @AT@ 6102 @LENGTH@ 165


UPD ExpressionStatement@@MethodInvocation:map.put("dateFromParts",mapArgRef().forOperator("$dateFromParts").mappingParametersTo("year","month","day","hour","minute","second","milliseconds","timezone")) @TO@ MethodInvocation:map.put("dateFromParts",mapArgRef().forOperator("$dateFromParts").mappingParametersTo("year","month","day","hour","minute","second","millisecond","timezone")) @AT@ 6870 @LENGTH@ 172
---UPD MethodInvocation@@map.put("dateFromParts",mapArgRef().forOperator("$dateFromParts").mappingParametersTo("year","month","day","hour","minute","second","milliseconds","timezone")) @TO@ map.put("dateFromParts",mapArgRef().forOperator("$dateFromParts").mappingParametersTo("year","month","day","hour","minute","second","millisecond","timezone")) @AT@ 6870 @LENGTH@ 171
------UPD SimpleName@@MethodName:put:["dateFromParts", mapArgRef().forOperator("$dateFromParts").mappingParametersTo("year","month","day","hour","minute","second","milliseconds","timezone")] @TO@ MethodName:put:["dateFromParts", mapArgRef().forOperator("$dateFromParts").mappingParametersTo("year","month","day","hour","minute","second","millisecond","timezone")] @AT@ 6874 @LENGTH@ 167
---------UPD MethodInvocation@@mapArgRef().forOperator("$dateFromParts").mappingParametersTo("year","month","day","hour","minute","second","milliseconds","timezone") @TO@ mapArgRef().forOperator("$dateFromParts").mappingParametersTo("year","month","day","hour","minute","second","millisecond","timezone") @AT@ 6895 @LENGTH@ 145
------------UPD SimpleName@@MethodName:mappingParametersTo:["year", "month", "day", "hour", "minute", "second", "milliseconds", "timezone"] @TO@ MethodName:mappingParametersTo:["year", "month", "day", "hour", "minute", "second", "millisecond", "timezone"] @AT@ 6937 @LENGTH@ 103
---------------UPD StringLiteral@@"milliseconds" @TO@ "millisecond" @AT@ 7013 @LENGTH@ 14


UPD IfStatement@@if (aliases.size() == 1) {  String desc=getMainDescription(model);  String methodName=camelCaseLower(model.getScheme());  method=dslClass.addMethod().setStatic().setName(methodName).addParameter(String.class,"path").setReturnType(new GenericType(loadClass(builderClass.getCanonicalName()))).setDefault().setBodyF("return %s.%s(%s);",javaClass.getName(),"endpointBuilder","\"" + model.getScheme() + "\", path");  String javaDoc=desc;  javaDoc+="\n\n@param path " + pathParameterJavaDoc(model);  method.getJavaDoc().setText(javaDoc);  if (model.isDeprecated()) {    method.addAnnotation(Deprecated.class);  }  method=method.copy();  method.setPublic().setStatic();  method.setReturnType(builderClass.getCanonicalName().replace('$','.'));  method.setBodyF("return %s.%s(%s);",javaClass.getCanonicalName(),"endpointBuilder","\"" + model.getScheme() + "\", path");  staticBuilders.add(method);  method=dslClass.addMethod().setStatic().setName(methodName).addParameter(String.class,"componentName").addParameter(String.class,"path").setReturnType(new GenericType(loadClass(builderClass.getCanonicalName()))).setDefault().setBodyF("return %s.%s(%s);",javaClass.getName(),"endpointBuilder","componentName, path");  javaDoc=desc;  javaDoc+="\n\n@param componentName to use a custom component name for the endpoint instead of the default name";  javaDoc+="\n@param path " + pathParameterJavaDoc(model);  method.getJavaDoc().setText(javaDoc);  if (model.isDeprecated()) {    method.addAnnotation(Deprecated.class);  }  method=method.copy();  method.setPublic().setStatic();  method.setReturnType(builderClass.getCanonicalName().replace('$','.'));  method.setBodyF("return %s.%s(%s);",javaClass.getCanonicalName(),"endpointBuilder","componentName, path");  staticBuilders.add(method);} else {  boolean firstAlias=true;  for (  ComponentModel componentModel : aliases) {    String desc=getMainDescription(componentModel);    String methodName=camelCaseLower(componentModel.getScheme());    method=dslClass.addMethod().setStatic().setName(methodName).addParameter(String.class,"path").setReturnType(new GenericType(loadClass(builderClass.getCanonicalName()))).setDefault().setBodyF("return %s.%s(%s);",javaClass.getName(),"endpointBuilder","\"" + componentModel.getScheme() + "\", path");    String javaDoc=desc;    javaDoc+="\n\n@param path " + pathParameterJavaDoc(componentModel);    method.getJavaDoc().setText(javaDoc);    if (componentModel.isDeprecated()) {      method.addAnnotation(Deprecated.class);    }    if (firstAlias) {      method=method.copy();      method.setPublic().setStatic();      method.setReturnType(builderClass.getCanonicalName().replace('$','.'));      method.setBodyF("return %s.%s(%s);",javaClass.getCanonicalName(),"endpointBuilder","\"" + componentModel.getScheme() + "\", path");      staticBuilders.add(method);    }    if (firstAlias) {      method=dslClass.addMethod().setStatic().setName(methodName).addParameter(String.class,"componentName").addParameter(String.class,"path").setReturnType(new GenericType(loadClass(builderClass.getCanonicalName()))).setDefault().setBodyF("return %s.%s(%s);",javaClass.getName(),"endpointBuilder","componentName, path");      javaDoc=desc;      javaDoc+="\n\n@param componentName to use a custom component name for the endpoint instead of the default name";      javaDoc+="\n@param path " + pathParameterJavaDoc(componentModel);      method.getJavaDoc().setText(javaDoc);      if (componentModel.isDeprecated()) {        method.addAnnotation(Deprecated.class);      }    }    if (firstAlias) {      method=method.copy();      method.setPublic().setStatic();      method.setReturnType(builderClass.getCanonicalName().replace('$','.'));      method.setBodyF("return %s.%s(%s);",javaClass.getCanonicalName(),"endpointBuilder","componentName, path");      staticBuilders.add(method);    }    firstAlias=false;  }} @TO@ if (aliases.size() == 1) {  String desc=getMainDescription(model);  String methodName=camelCaseLower(model.getScheme());  method=dslClass.addMethod().setStatic().setName(methodName).addParameter(String.class,"path").setReturnType(new GenericType(loadClass(builderClass.getCanonicalName()))).setDefault().setBodyF("return %s.%s(%s);",javaClass.getName(),"endpointBuilder","\"" + model.getScheme() + "\", path");  String javaDoc=desc;  javaDoc+="\n\n@param path " + pathParameterJavaDoc(model);  javaDoc+="\n@return the dsl builder\n";  method.getJavaDoc().setText(javaDoc);  if (model.isDeprecated()) {    method.addAnnotation(Deprecated.class);  }  method=method.copy();  method.setPublic().setStatic();  method.setReturnType(builderClass.getCanonicalName().replace('$','.'));  method.setBodyF("return %s.%s(%s);",javaClass.getCanonicalName(),"endpointBuilder","\"" + model.getScheme() + "\", path");  staticBuilders.add(method);  method=dslClass.addMethod().setStatic().setName(methodName).addParameter(String.class,"componentName").addParameter(String.class,"path").setReturnType(new GenericType(loadClass(builderClass.getCanonicalName()))).setDefault().setBodyF("return %s.%s(%s);",javaClass.getName(),"endpointBuilder","componentName, path");  javaDoc=desc;  javaDoc+="\n\n@param componentName to use a custom component name for the endpoint instead of the default name";  javaDoc+="\n@param path " + pathParameterJavaDoc(model);  javaDoc+="\n@return the dsl builder\n";  method.getJavaDoc().setText(javaDoc);  if (model.isDeprecated()) {    method.addAnnotation(Deprecated.class);  }  method=method.copy();  method.setPublic().setStatic();  method.setReturnType(builderClass.getCanonicalName().replace('$','.'));  method.setBodyF("return %s.%s(%s);",javaClass.getCanonicalName(),"endpointBuilder","componentName, path");  staticBuilders.add(method);} else {  boolean firstAlias=true;  for (  ComponentModel componentModel : aliases) {    String desc=getMainDescription(componentModel);    String methodName=camelCaseLower(componentModel.getScheme());    method=dslClass.addMethod().setStatic().setName(methodName).addParameter(String.class,"path").setReturnType(new GenericType(loadClass(builderClass.getCanonicalName()))).setDefault().setBodyF("return %s.%s(%s);",javaClass.getName(),"endpointBuilder","\"" + componentModel.getScheme() + "\", path");    String javaDoc=desc;    javaDoc+="\n\n@param path " + pathParameterJavaDoc(componentModel);    javaDoc+="\n@return the dsl builder\n";    method.getJavaDoc().setText(javaDoc);    if (componentModel.isDeprecated()) {      method.addAnnotation(Deprecated.class);    }    if (firstAlias) {      method=method.copy();      method.setPublic().setStatic();      method.setReturnType(builderClass.getCanonicalName().replace('$','.'));      method.setBodyF("return %s.%s(%s);",javaClass.getCanonicalName(),"endpointBuilder","\"" + componentModel.getScheme() + "\", path");      staticBuilders.add(method);    }    if (firstAlias) {      method=dslClass.addMethod().setStatic().setName(methodName).addParameter(String.class,"componentName").addParameter(String.class,"path").setReturnType(new GenericType(loadClass(builderClass.getCanonicalName()))).setDefault().setBodyF("return %s.%s(%s);",javaClass.getName(),"endpointBuilder","componentName, path");      javaDoc=desc;      javaDoc+="\n\n@param componentName to use a custom component name for the endpoint instead of the default name";      javaDoc+="\n@param path " + pathParameterJavaDoc(componentModel);      javaDoc+="\n@return the dsl builder\n";      method.getJavaDoc().setText(javaDoc);      if (componentModel.isDeprecated()) {        method.addAnnotation(Deprecated.class);      }    }    if (firstAlias) {      method=method.copy();      method.setPublic().setStatic();      method.setReturnType(builderClass.getCanonicalName().replace('$','.'));      method.setBodyF("return %s.%s(%s);",javaClass.getCanonicalName(),"endpointBuilder","componentName, path");      staticBuilders.add(method);    }    firstAlias=false;  }} @AT@ 27336 @LENGTH@ 6202
---UPD Block@@ThenBody:{  String desc=getMainDescription(model);  String methodName=camelCaseLower(model.getScheme());  method=dslClass.addMethod().setStatic().setName(methodName).addParameter(String.class,"path").setReturnType(new GenericType(loadClass(builderClass.getCanonicalName()))).setDefault().setBodyF("return %s.%s(%s);",javaClass.getName(),"endpointBuilder","\"" + model.getScheme() + "\", path");  String javaDoc=desc;  javaDoc+="\n\n@param path " + pathParameterJavaDoc(model);  method.getJavaDoc().setText(javaDoc);  if (model.isDeprecated()) {    method.addAnnotation(Deprecated.class);  }  method=method.copy();  method.setPublic().setStatic();  method.setReturnType(builderClass.getCanonicalName().replace('$','.'));  method.setBodyF("return %s.%s(%s);",javaClass.getCanonicalName(),"endpointBuilder","\"" + model.getScheme() + "\", path");  staticBuilders.add(method);  method=dslClass.addMethod().setStatic().setName(methodName).addParameter(String.class,"componentName").addParameter(String.class,"path").setReturnType(new GenericType(loadClass(builderClass.getCanonicalName()))).setDefault().setBodyF("return %s.%s(%s);",javaClass.getName(),"endpointBuilder","componentName, path");  javaDoc=desc;  javaDoc+="\n\n@param componentName to use a custom component name for the endpoint instead of the default name";  javaDoc+="\n@param path " + pathParameterJavaDoc(model);  method.getJavaDoc().setText(javaDoc);  if (model.isDeprecated()) {    method.addAnnotation(Deprecated.class);  }  method=method.copy();  method.setPublic().setStatic();  method.setReturnType(builderClass.getCanonicalName().replace('$','.'));  method.setBodyF("return %s.%s(%s);",javaClass.getCanonicalName(),"endpointBuilder","componentName, path");  staticBuilders.add(method);} @TO@ ThenBody:{  String desc=getMainDescription(model);  String methodName=camelCaseLower(model.getScheme());  method=dslClass.addMethod().setStatic().setName(methodName).addParameter(String.class,"path").setReturnType(new GenericType(loadClass(builderClass.getCanonicalName()))).setDefault().setBodyF("return %s.%s(%s);",javaClass.getName(),"endpointBuilder","\"" + model.getScheme() + "\", path");  String javaDoc=desc;  javaDoc+="\n\n@param path " + pathParameterJavaDoc(model);  javaDoc+="\n@return the dsl builder\n";  method.getJavaDoc().setText(javaDoc);  if (model.isDeprecated()) {    method.addAnnotation(Deprecated.class);  }  method=method.copy();  method.setPublic().setStatic();  method.setReturnType(builderClass.getCanonicalName().replace('$','.'));  method.setBodyF("return %s.%s(%s);",javaClass.getCanonicalName(),"endpointBuilder","\"" + model.getScheme() + "\", path");  staticBuilders.add(method);  method=dslClass.addMethod().setStatic().setName(methodName).addParameter(String.class,"componentName").addParameter(String.class,"path").setReturnType(new GenericType(loadClass(builderClass.getCanonicalName()))).setDefault().setBodyF("return %s.%s(%s);",javaClass.getName(),"endpointBuilder","componentName, path");  javaDoc=desc;  javaDoc+="\n\n@param componentName to use a custom component name for the endpoint instead of the default name";  javaDoc+="\n@param path " + pathParameterJavaDoc(model);  javaDoc+="\n@return the dsl builder\n";  method.getJavaDoc().setText(javaDoc);  if (model.isDeprecated()) {    method.addAnnotation(Deprecated.class);  }  method=method.copy();  method.setPublic().setStatic();  method.setReturnType(builderClass.getCanonicalName().replace('$','.'));  method.setBodyF("return %s.%s(%s);",javaClass.getCanonicalName(),"endpointBuilder","componentName, path");  staticBuilders.add(method);} @AT@ 27361 @LENGTH@ 2585
------INS ExpressionStatement@@Assignment:javaDoc+="\n@return the dsl builder\n" @TO@ Block@@ThenBody:{  String desc=getMainDescription(model);  String methodName=camelCaseLower(model.getScheme());  method=dslClass.addMethod().setStatic().setName(methodName).addParameter(String.class,"path").setReturnType(new GenericType(loadClass(builderClass.getCanonicalName()))).setDefault().setBodyF("return %s.%s(%s);",javaClass.getName(),"endpointBuilder","\"" + model.getScheme() + "\", path");  String javaDoc=desc;  javaDoc+="\n\n@param path " + pathParameterJavaDoc(model);  method.getJavaDoc().setText(javaDoc);  if (model.isDeprecated()) {    method.addAnnotation(Deprecated.class);  }  method=method.copy();  method.setPublic().setStatic();  method.setReturnType(builderClass.getCanonicalName().replace('$','.'));  method.setBodyF("return %s.%s(%s);",javaClass.getCanonicalName(),"endpointBuilder","\"" + model.getScheme() + "\", path");  staticBuilders.add(method);  method=dslClass.addMethod().setStatic().setName(methodName).addParameter(String.class,"componentName").addParameter(String.class,"path").setReturnType(new GenericType(loadClass(builderClass.getCanonicalName()))).setDefault().setBodyF("return %s.%s(%s);",javaClass.getName(),"endpointBuilder","componentName, path");  javaDoc=desc;  javaDoc+="\n\n@param componentName to use a custom component name for the endpoint instead of the default name";  javaDoc+="\n@param path " + pathParameterJavaDoc(model);  method.getJavaDoc().setText(javaDoc);  if (model.isDeprecated()) {    method.addAnnotation(Deprecated.class);  }  method=method.copy();  method.setPublic().setStatic();  method.setReturnType(builderClass.getCanonicalName().replace('$','.'));  method.setBodyF("return %s.%s(%s);",javaClass.getCanonicalName(),"endpointBuilder","componentName, path");  staticBuilders.add(method);} @AT@ 28022 @LENGTH@ 41
---------INS Assignment@@javaDoc+="\n@return the dsl builder\n" @TO@ ExpressionStatement@@Assignment:javaDoc+="\n@return the dsl builder\n" @AT@ 28022 @LENGTH@ 40
------------INS SimpleName@@javaDoc @TO@ Assignment@@javaDoc+="\n@return the dsl builder\n" @AT@ 28022 @LENGTH@ 7
------------INS Operator@@+= @TO@ Assignment@@javaDoc+="\n@return the dsl builder\n" @AT@ 28029 @LENGTH@ 2
------------INS StringLiteral@@"\n@return the dsl builder\n" @TO@ Assignment@@javaDoc+="\n@return the dsl builder\n" @AT@ 28033 @LENGTH@ 29
------INS ExpressionStatement@@Assignment:javaDoc+="\n@return the dsl builder\n" @TO@ Block@@ThenBody:{  String desc=getMainDescription(model);  String methodName=camelCaseLower(model.getScheme());  method=dslClass.addMethod().setStatic().setName(methodName).addParameter(String.class,"path").setReturnType(new GenericType(loadClass(builderClass.getCanonicalName()))).setDefault().setBodyF("return %s.%s(%s);",javaClass.getName(),"endpointBuilder","\"" + model.getScheme() + "\", path");  String javaDoc=desc;  javaDoc+="\n\n@param path " + pathParameterJavaDoc(model);  method.getJavaDoc().setText(javaDoc);  if (model.isDeprecated()) {    method.addAnnotation(Deprecated.class);  }  method=method.copy();  method.setPublic().setStatic();  method.setReturnType(builderClass.getCanonicalName().replace('$','.'));  method.setBodyF("return %s.%s(%s);",javaClass.getCanonicalName(),"endpointBuilder","\"" + model.getScheme() + "\", path");  staticBuilders.add(method);  method=dslClass.addMethod().setStatic().setName(methodName).addParameter(String.class,"componentName").addParameter(String.class,"path").setReturnType(new GenericType(loadClass(builderClass.getCanonicalName()))).setDefault().setBodyF("return %s.%s(%s);",javaClass.getName(),"endpointBuilder","componentName, path");  javaDoc=desc;  javaDoc+="\n\n@param componentName to use a custom component name for the endpoint instead of the default name";  javaDoc+="\n@param path " + pathParameterJavaDoc(model);  method.getJavaDoc().setText(javaDoc);  if (model.isDeprecated()) {    method.addAnnotation(Deprecated.class);  }  method=method.copy();  method.setPublic().setStatic();  method.setReturnType(builderClass.getCanonicalName().replace('$','.'));  method.setBodyF("return %s.%s(%s);",javaClass.getCanonicalName(),"endpointBuilder","componentName, path");  staticBuilders.add(method);} @AT@ 29391 @LENGTH@ 41
---------INS Assignment@@javaDoc+="\n@return the dsl builder\n" @TO@ ExpressionStatement@@Assignment:javaDoc+="\n@return the dsl builder\n" @AT@ 29391 @LENGTH@ 40
------------INS SimpleName@@javaDoc @TO@ Assignment@@javaDoc+="\n@return the dsl builder\n" @AT@ 29391 @LENGTH@ 7
------------INS Operator@@+= @TO@ Assignment@@javaDoc+="\n@return the dsl builder\n" @AT@ 29398 @LENGTH@ 2
------------INS StringLiteral@@"\n@return the dsl builder\n" @TO@ Assignment@@javaDoc+="\n@return the dsl builder\n" @AT@ 29402 @LENGTH@ 29
---UPD Block@@ElseBody:{  boolean firstAlias=true;  for (  ComponentModel componentModel : aliases) {    String desc=getMainDescription(componentModel);    String methodName=camelCaseLower(componentModel.getScheme());    method=dslClass.addMethod().setStatic().setName(methodName).addParameter(String.class,"path").setReturnType(new GenericType(loadClass(builderClass.getCanonicalName()))).setDefault().setBodyF("return %s.%s(%s);",javaClass.getName(),"endpointBuilder","\"" + componentModel.getScheme() + "\", path");    String javaDoc=desc;    javaDoc+="\n\n@param path " + pathParameterJavaDoc(componentModel);    method.getJavaDoc().setText(javaDoc);    if (componentModel.isDeprecated()) {      method.addAnnotation(Deprecated.class);    }    if (firstAlias) {      method=method.copy();      method.setPublic().setStatic();      method.setReturnType(builderClass.getCanonicalName().replace('$','.'));      method.setBodyF("return %s.%s(%s);",javaClass.getCanonicalName(),"endpointBuilder","\"" + componentModel.getScheme() + "\", path");      staticBuilders.add(method);    }    if (firstAlias) {      method=dslClass.addMethod().setStatic().setName(methodName).addParameter(String.class,"componentName").addParameter(String.class,"path").setReturnType(new GenericType(loadClass(builderClass.getCanonicalName()))).setDefault().setBodyF("return %s.%s(%s);",javaClass.getName(),"endpointBuilder","componentName, path");      javaDoc=desc;      javaDoc+="\n\n@param componentName to use a custom component name for the endpoint instead of the default name";      javaDoc+="\n@param path " + pathParameterJavaDoc(componentModel);      method.getJavaDoc().setText(javaDoc);      if (componentModel.isDeprecated()) {        method.addAnnotation(Deprecated.class);      }    }    if (firstAlias) {      method=method.copy();      method.setPublic().setStatic();      method.setReturnType(builderClass.getCanonicalName().replace('$','.'));      method.setBodyF("return %s.%s(%s);",javaClass.getCanonicalName(),"endpointBuilder","componentName, path");      staticBuilders.add(method);    }    firstAlias=false;  }} @TO@ ElseBody:{  boolean firstAlias=true;  for (  ComponentModel componentModel : aliases) {    String desc=getMainDescription(componentModel);    String methodName=camelCaseLower(componentModel.getScheme());    method=dslClass.addMethod().setStatic().setName(methodName).addParameter(String.class,"path").setReturnType(new GenericType(loadClass(builderClass.getCanonicalName()))).setDefault().setBodyF("return %s.%s(%s);",javaClass.getName(),"endpointBuilder","\"" + componentModel.getScheme() + "\", path");    String javaDoc=desc;    javaDoc+="\n\n@param path " + pathParameterJavaDoc(componentModel);    javaDoc+="\n@return the dsl builder\n";    method.getJavaDoc().setText(javaDoc);    if (componentModel.isDeprecated()) {      method.addAnnotation(Deprecated.class);    }    if (firstAlias) {      method=method.copy();      method.setPublic().setStatic();      method.setReturnType(builderClass.getCanonicalName().replace('$','.'));      method.setBodyF("return %s.%s(%s);",javaClass.getCanonicalName(),"endpointBuilder","\"" + componentModel.getScheme() + "\", path");      staticBuilders.add(method);    }    if (firstAlias) {      method=dslClass.addMethod().setStatic().setName(methodName).addParameter(String.class,"componentName").addParameter(String.class,"path").setReturnType(new GenericType(loadClass(builderClass.getCanonicalName()))).setDefault().setBodyF("return %s.%s(%s);",javaClass.getName(),"endpointBuilder","componentName, path");      javaDoc=desc;      javaDoc+="\n\n@param componentName to use a custom component name for the endpoint instead of the default name";      javaDoc+="\n@param path " + pathParameterJavaDoc(componentModel);      javaDoc+="\n@return the dsl builder\n";      method.getJavaDoc().setText(javaDoc);      if (componentModel.isDeprecated()) {        method.addAnnotation(Deprecated.class);      }    }    if (firstAlias) {      method=method.copy();      method.setPublic().setStatic();      method.setReturnType(builderClass.getCanonicalName().replace('$','.'));      method.setBodyF("return %s.%s(%s);",javaClass.getCanonicalName(),"endpointBuilder","componentName, path");      staticBuilders.add(method);    }    firstAlias=false;  }} @AT@ 29952 @LENGTH@ 3586
------UPD EnhancedForStatement@@for (ComponentModel componentModel : aliases) {  String desc=getMainDescription(componentModel);  String methodName=camelCaseLower(componentModel.getScheme());  method=dslClass.addMethod().setStatic().setName(methodName).addParameter(String.class,"path").setReturnType(new GenericType(loadClass(builderClass.getCanonicalName()))).setDefault().setBodyF("return %s.%s(%s);",javaClass.getName(),"endpointBuilder","\"" + componentModel.getScheme() + "\", path");  String javaDoc=desc;  javaDoc+="\n\n@param path " + pathParameterJavaDoc(componentModel);  method.getJavaDoc().setText(javaDoc);  if (componentModel.isDeprecated()) {    method.addAnnotation(Deprecated.class);  }  if (firstAlias) {    method=method.copy();    method.setPublic().setStatic();    method.setReturnType(builderClass.getCanonicalName().replace('$','.'));    method.setBodyF("return %s.%s(%s);",javaClass.getCanonicalName(),"endpointBuilder","\"" + componentModel.getScheme() + "\", path");    staticBuilders.add(method);  }  if (firstAlias) {    method=dslClass.addMethod().setStatic().setName(methodName).addParameter(String.class,"componentName").addParameter(String.class,"path").setReturnType(new GenericType(loadClass(builderClass.getCanonicalName()))).setDefault().setBodyF("return %s.%s(%s);",javaClass.getName(),"endpointBuilder","componentName, path");    javaDoc=desc;    javaDoc+="\n\n@param componentName to use a custom component name for the endpoint instead of the default name";    javaDoc+="\n@param path " + pathParameterJavaDoc(componentModel);    method.getJavaDoc().setText(javaDoc);    if (componentModel.isDeprecated()) {      method.addAnnotation(Deprecated.class);    }  }  if (firstAlias) {    method=method.copy();    method.setPublic().setStatic();    method.setReturnType(builderClass.getCanonicalName().replace('$','.'));    method.setBodyF("return %s.%s(%s);",javaClass.getCanonicalName(),"endpointBuilder","componentName, path");    staticBuilders.add(method);  }  firstAlias=false;} @TO@ for (ComponentModel componentModel : aliases) {  String desc=getMainDescription(componentModel);  String methodName=camelCaseLower(componentModel.getScheme());  method=dslClass.addMethod().setStatic().setName(methodName).addParameter(String.class,"path").setReturnType(new GenericType(loadClass(builderClass.getCanonicalName()))).setDefault().setBodyF("return %s.%s(%s);",javaClass.getName(),"endpointBuilder","\"" + componentModel.getScheme() + "\", path");  String javaDoc=desc;  javaDoc+="\n\n@param path " + pathParameterJavaDoc(componentModel);  javaDoc+="\n@return the dsl builder\n";  method.getJavaDoc().setText(javaDoc);  if (componentModel.isDeprecated()) {    method.addAnnotation(Deprecated.class);  }  if (firstAlias) {    method=method.copy();    method.setPublic().setStatic();    method.setReturnType(builderClass.getCanonicalName().replace('$','.'));    method.setBodyF("return %s.%s(%s);",javaClass.getCanonicalName(),"endpointBuilder","\"" + componentModel.getScheme() + "\", path");    staticBuilders.add(method);  }  if (firstAlias) {    method=dslClass.addMethod().setStatic().setName(methodName).addParameter(String.class,"componentName").addParameter(String.class,"path").setReturnType(new GenericType(loadClass(builderClass.getCanonicalName()))).setDefault().setBodyF("return %s.%s(%s);",javaClass.getName(),"endpointBuilder","componentName, path");    javaDoc=desc;    javaDoc+="\n\n@param componentName to use a custom component name for the endpoint instead of the default name";    javaDoc+="\n@param path " + pathParameterJavaDoc(componentModel);    javaDoc+="\n@return the dsl builder\n";    method.getJavaDoc().setText(javaDoc);    if (componentModel.isDeprecated()) {      method.addAnnotation(Deprecated.class);    }  }  if (firstAlias) {    method=method.copy();    method.setPublic().setStatic();    method.setReturnType(builderClass.getCanonicalName().replace('$','.'));    method.setBodyF("return %s.%s(%s);",javaClass.getCanonicalName(),"endpointBuilder","componentName, path");    staticBuilders.add(method);  }  firstAlias=false;} @AT@ 30085 @LENGTH@ 3443
---------INS ExpressionStatement@@Assignment:javaDoc+="\n@return the dsl builder\n" @TO@ EnhancedForStatement@@for (ComponentModel componentModel : aliases) {  String desc=getMainDescription(componentModel);  String methodName=camelCaseLower(componentModel.getScheme());  method=dslClass.addMethod().setStatic().setName(methodName).addParameter(String.class,"path").setReturnType(new GenericType(loadClass(builderClass.getCanonicalName()))).setDefault().setBodyF("return %s.%s(%s);",javaClass.getName(),"endpointBuilder","\"" + componentModel.getScheme() + "\", path");  String javaDoc=desc;  javaDoc+="\n\n@param path " + pathParameterJavaDoc(componentModel);  method.getJavaDoc().setText(javaDoc);  if (componentModel.isDeprecated()) {    method.addAnnotation(Deprecated.class);  }  if (firstAlias) {    method=method.copy();    method.setPublic().setStatic();    method.setReturnType(builderClass.getCanonicalName().replace('$','.'));    method.setBodyF("return %s.%s(%s);",javaClass.getCanonicalName(),"endpointBuilder","\"" + componentModel.getScheme() + "\", path");    staticBuilders.add(method);  }  if (firstAlias) {    method=dslClass.addMethod().setStatic().setName(methodName).addParameter(String.class,"componentName").addParameter(String.class,"path").setReturnType(new GenericType(loadClass(builderClass.getCanonicalName()))).setDefault().setBodyF("return %s.%s(%s);",javaClass.getName(),"endpointBuilder","componentName, path");    javaDoc=desc;    javaDoc+="\n\n@param componentName to use a custom component name for the endpoint instead of the default name";    javaDoc+="\n@param path " + pathParameterJavaDoc(componentModel);    method.getJavaDoc().setText(javaDoc);    if (componentModel.isDeprecated()) {      method.addAnnotation(Deprecated.class);    }  }  if (firstAlias) {    method=method.copy();    method.setPublic().setStatic();    method.setReturnType(builderClass.getCanonicalName().replace('$','.'));    method.setBodyF("return %s.%s(%s);",javaClass.getCanonicalName(),"endpointBuilder","componentName, path");    staticBuilders.add(method);  }  firstAlias=false;} @AT@ 30980 @LENGTH@ 41
------------INS Assignment@@javaDoc+="\n@return the dsl builder\n" @TO@ ExpressionStatement@@Assignment:javaDoc+="\n@return the dsl builder\n" @AT@ 30980 @LENGTH@ 40
---------------INS SimpleName@@javaDoc @TO@ Assignment@@javaDoc+="\n@return the dsl builder\n" @AT@ 30980 @LENGTH@ 7
---------------INS Operator@@+= @TO@ Assignment@@javaDoc+="\n@return the dsl builder\n" @AT@ 30987 @LENGTH@ 2
---------------INS StringLiteral@@"\n@return the dsl builder\n" @TO@ Assignment@@javaDoc+="\n@return the dsl builder\n" @AT@ 30991 @LENGTH@ 29
---------UPD IfStatement@@if (firstAlias) {  method=dslClass.addMethod().setStatic().setName(methodName).addParameter(String.class,"componentName").addParameter(String.class,"path").setReturnType(new GenericType(loadClass(builderClass.getCanonicalName()))).setDefault().setBodyF("return %s.%s(%s);",javaClass.getName(),"endpointBuilder","componentName, path");  javaDoc=desc;  javaDoc+="\n\n@param componentName to use a custom component name for the endpoint instead of the default name";  javaDoc+="\n@param path " + pathParameterJavaDoc(componentModel);  method.getJavaDoc().setText(javaDoc);  if (componentModel.isDeprecated()) {    method.addAnnotation(Deprecated.class);  }} @TO@ if (firstAlias) {  method=dslClass.addMethod().setStatic().setName(methodName).addParameter(String.class,"componentName").addParameter(String.class,"path").setReturnType(new GenericType(loadClass(builderClass.getCanonicalName()))).setDefault().setBodyF("return %s.%s(%s);",javaClass.getName(),"endpointBuilder","componentName, path");  javaDoc=desc;  javaDoc+="\n\n@param componentName to use a custom component name for the endpoint instead of the default name";  javaDoc+="\n@param path " + pathParameterJavaDoc(componentModel);  javaDoc+="\n@return the dsl builder\n";  method.getJavaDoc().setText(javaDoc);  if (componentModel.isDeprecated()) {    method.addAnnotation(Deprecated.class);  }} @AT@ 31831 @LENGTH@ 983
------------UPD Block@@ThenBody:{  method=dslClass.addMethod().setStatic().setName(methodName).addParameter(String.class,"componentName").addParameter(String.class,"path").setReturnType(new GenericType(loadClass(builderClass.getCanonicalName()))).setDefault().setBodyF("return %s.%s(%s);",javaClass.getName(),"endpointBuilder","componentName, path");  javaDoc=desc;  javaDoc+="\n\n@param componentName to use a custom component name for the endpoint instead of the default name";  javaDoc+="\n@param path " + pathParameterJavaDoc(componentModel);  method.getJavaDoc().setText(javaDoc);  if (componentModel.isDeprecated()) {    method.addAnnotation(Deprecated.class);  }} @TO@ ThenBody:{  method=dslClass.addMethod().setStatic().setName(methodName).addParameter(String.class,"componentName").addParameter(String.class,"path").setReturnType(new GenericType(loadClass(builderClass.getCanonicalName()))).setDefault().setBodyF("return %s.%s(%s);",javaClass.getName(),"endpointBuilder","componentName, path");  javaDoc=desc;  javaDoc+="\n\n@param componentName to use a custom component name for the endpoint instead of the default name";  javaDoc+="\n@param path " + pathParameterJavaDoc(componentModel);  javaDoc+="\n@return the dsl builder\n";  method.getJavaDoc().setText(javaDoc);  if (componentModel.isDeprecated()) {    method.addAnnotation(Deprecated.class);  }} @AT@ 31847 @LENGTH@ 967
---------------INS ExpressionStatement@@Assignment:javaDoc+="\n@return the dsl builder\n" @TO@ Block@@ThenBody:{  method=dslClass.addMethod().setStatic().setName(methodName).addParameter(String.class,"componentName").addParameter(String.class,"path").setReturnType(new GenericType(loadClass(builderClass.getCanonicalName()))).setDefault().setBodyF("return %s.%s(%s);",javaClass.getName(),"endpointBuilder","componentName, path");  javaDoc=desc;  javaDoc+="\n\n@param componentName to use a custom component name for the endpoint instead of the default name";  javaDoc+="\n@param path " + pathParameterJavaDoc(componentModel);  method.getJavaDoc().setText(javaDoc);  if (componentModel.isDeprecated()) {    method.addAnnotation(Deprecated.class);  }} @AT@ 32782 @LENGTH@ 41
------------------INS Assignment@@javaDoc+="\n@return the dsl builder\n" @TO@ ExpressionStatement@@Assignment:javaDoc+="\n@return the dsl builder\n" @AT@ 32782 @LENGTH@ 40
---------------------INS SimpleName@@javaDoc @TO@ Assignment@@javaDoc+="\n@return the dsl builder\n" @AT@ 32782 @LENGTH@ 7
---------------------INS Operator@@+= @TO@ Assignment@@javaDoc+="\n@return the dsl builder\n" @AT@ 32789 @LENGTH@ 2
---------------------INS StringLiteral@@"\n@return the dsl builder\n" @TO@ Assignment@@javaDoc+="\n@return the dsl builder\n" @AT@ 32793 @LENGTH@ 29


INS MethodDeclaration@@public, FactoryFinder, MethodName:getBootstrapFactoryFinder, String path,  @TO@ TypeDeclaration@@[@Experimental, public]LightweightCamelContext, [ExtendedCamelContext, CatalogCamelContext, ModelCamelContext] @AT@ 36220 @LENGTH@ 141
---INS Modifier@@public @TO@ MethodDeclaration@@public, FactoryFinder, MethodName:getBootstrapFactoryFinder, String path,  @AT@ 36220 @LENGTH@ 6
---INS SimpleType@@FactoryFinder @TO@ MethodDeclaration@@public, FactoryFinder, MethodName:getBootstrapFactoryFinder, String path,  @AT@ 36227 @LENGTH@ 13
---INS SimpleName@@MethodName:getBootstrapFactoryFinder @TO@ MethodDeclaration@@public, FactoryFinder, MethodName:getBootstrapFactoryFinder, String path,  @AT@ 36241 @LENGTH@ 25
---INS SingleVariableDeclaration@@String path @TO@ MethodDeclaration@@public, FactoryFinder, MethodName:getBootstrapFactoryFinder, String path,  @AT@ 36267 @LENGTH@ 11
------INS SimpleType@@String @TO@ SingleVariableDeclaration@@String path @AT@ 36267 @LENGTH@ 6
------INS SimpleName@@path @TO@ SingleVariableDeclaration@@String path @AT@ 36274 @LENGTH@ 4
---INS ReturnStatement@@MethodInvocation:getExtendedCamelContext().getBootstrapFactoryFinder(path) @TO@ MethodDeclaration@@public, FactoryFinder, MethodName:getBootstrapFactoryFinder, String path,  @AT@ 36290 @LENGTH@ 65
------INS MethodInvocation@@getExtendedCamelContext().getBootstrapFactoryFinder(path) @TO@ ReturnStatement@@MethodInvocation:getExtendedCamelContext().getBootstrapFactoryFinder(path) @AT@ 36297 @LENGTH@ 57
---------INS MethodInvocation@@MethodName:getExtendedCamelContext:[] @TO@ MethodInvocation@@getExtendedCamelContext().getBootstrapFactoryFinder(path) @AT@ 36297 @LENGTH@ 25
---------INS SimpleName@@MethodName:getBootstrapFactoryFinder:[path] @TO@ MethodInvocation@@getExtendedCamelContext().getBootstrapFactoryFinder(path) @AT@ 36323 @LENGTH@ 31
------------INS SimpleName@@path @TO@ SimpleName@@MethodName:getBootstrapFactoryFinder:[path] @AT@ 36349 @LENGTH@ 4


MOV FieldDeclaration@@private, static, final, String, [CACHE_PROPERTIES_FILENAME="camel-api-component-maven-plugin-cache.properties"] @TO@ TypeDeclaration@@[@Mojo(name="fromApis",requiresDependencyResolution=ResolutionScope.COMPILE_PLUS_RUNTIME,requiresProject=true,defaultPhase=LifecyclePhase.GENERATE_SOURCES,threadSafe=true), public]ApiComponentGeneratorMojo, AbstractApiMethodBaseMojo @AT@ 2054 @LENGTH@ 108


INS ExpressionStatement@@MethodInvocation:mediaTypes.add(MediaTypes.HAL_FORMS_JSON_VALUE) @TO@ MethodDeclaration@@protected, ProducesRequestCondition, MethodName:customize, ProducesRequestCondition condition,  @AT@ 8360 @LENGTH@ 48
---INS MethodInvocation@@mediaTypes.add(MediaTypes.HAL_FORMS_JSON_VALUE) @TO@ ExpressionStatement@@MethodInvocation:mediaTypes.add(MediaTypes.HAL_FORMS_JSON_VALUE) @AT@ 8360 @LENGTH@ 47
------INS SimpleName@@Name:mediaTypes @TO@ MethodInvocation@@mediaTypes.add(MediaTypes.HAL_FORMS_JSON_VALUE) @AT@ 8360 @LENGTH@ 10
------INS SimpleName@@MethodName:add:[MediaTypes.HAL_FORMS_JSON_VALUE] @TO@ MethodInvocation@@mediaTypes.add(MediaTypes.HAL_FORMS_JSON_VALUE) @AT@ 8371 @LENGTH@ 36
---------INS QualifiedName@@MediaTypes.HAL_FORMS_JSON_VALUE @TO@ SimpleName@@MethodName:add:[MediaTypes.HAL_FORMS_JSON_VALUE] @AT@ 8375 @LENGTH@ 31
------------INS SimpleName@@MediaTypes @TO@ QualifiedName@@MediaTypes.HAL_FORMS_JSON_VALUE @AT@ 8375 @LENGTH@ 10
------------INS SimpleName@@HAL_FORMS_JSON_VALUE @TO@ QualifiedName@@MediaTypes.HAL_FORMS_JSON_VALUE @AT@ 8386 @LENGTH@ 20


UPD ExpressionStatement@@MethodInvocation:task.bootStrapDump(new Path("mock"),null,mock(Path.class),hive) @TO@ MethodInvocation:task.bootStrapDump(new Path("mock"),new DumpMetaData(new Path("mock"),conf),mock(Path.class),hive) @AT@ 5721 @LENGTH@ 67
---UPD MethodInvocation@@task.bootStrapDump(new Path("mock"),null,mock(Path.class),hive) @TO@ task.bootStrapDump(new Path("mock"),new DumpMetaData(new Path("mock"),conf),mock(Path.class),hive) @AT@ 5721 @LENGTH@ 66
------UPD SimpleName@@MethodName:bootStrapDump:[new Path("mock"), null, mock(Path.class), hive] @TO@ MethodName:bootStrapDump:[new Path("mock"), new DumpMetaData(new Path("mock"),conf), mock(Path.class), hive] @AT@ 5726 @LENGTH@ 61
---------DEL NullLiteral@@null @AT@ 5758 @LENGTH@ 4
---------INS ClassInstanceCreation@@DumpMetaData[new Path("mock"), conf] @TO@ SimpleName@@MethodName:bootStrapDump:[new Path("mock"), null, mock(Path.class), hive] @AT@ 5807 @LENGTH@ 40
------------INS New@@new @TO@ ClassInstanceCreation@@DumpMetaData[new Path("mock"), conf] @AT@ 5807 @LENGTH@ 3
------------INS SimpleType@@DumpMetaData @TO@ ClassInstanceCreation@@DumpMetaData[new Path("mock"), conf] @AT@ 5811 @LENGTH@ 12
------------INS ClassInstanceCreation@@Path["mock"] @TO@ ClassInstanceCreation@@DumpMetaData[new Path("mock"), conf] @AT@ 5824 @LENGTH@ 16
---------------INS New@@new @TO@ ClassInstanceCreation@@Path["mock"] @AT@ 5824 @LENGTH@ 3
---------------INS SimpleType@@Path @TO@ ClassInstanceCreation@@Path["mock"] @AT@ 5828 @LENGTH@ 4
---------------INS StringLiteral@@"mock" @TO@ ClassInstanceCreation@@Path["mock"] @AT@ 5833 @LENGTH@ 6
------------INS SimpleName@@conf @TO@ ClassInstanceCreation@@DumpMetaData[new Path("mock"), conf] @AT@ 5842 @LENGTH@ 4


UPD IfStatement@@if (read < 0) {  return read;} @TO@ if (read < 1) {  return read;} @AT@ 2268 @LENGTH@ 50
---UPD InfixExpression@@read < 0 @TO@ read < 1 @AT@ 2272 @LENGTH@ 8
------UPD NumberLiteral@@0 @TO@ 1 @AT@ 2279 @LENGTH@ 1


UPD ReturnStatement@@ClassInstanceCreation:new RemoteCacheEntryMutator<>(this.cache,this.maxIdle,key,value) @TO@ ClassInstanceCreation:new RemoteCacheEntryMutator<>(this.cache,key,value,this.maxIdle) @AT@ 1878 @LENGTH@ 75
---UPD ClassInstanceCreation@@RemoteCacheEntryMutator<>[this.cache, this.maxIdle, key, value] @TO@ RemoteCacheEntryMutator<>[this.cache, key, value, this.maxIdle] @AT@ 1885 @LENGTH@ 67
------INS SimpleName@@key @TO@ ClassInstanceCreation@@RemoteCacheEntryMutator<>[this.cache, this.maxIdle, key, value] @AT@ 1927 @LENGTH@ 3
------INS SimpleName@@value @TO@ ClassInstanceCreation@@RemoteCacheEntryMutator<>[this.cache, this.maxIdle, key, value] @AT@ 1932 @LENGTH@ 5
------DEL SimpleName@@key @AT@ 1941 @LENGTH@ 3
------DEL SimpleName@@value @AT@ 1946 @LENGTH@ 5


INS FieldDeclaration@@private, List<AltHobby>, [memberOf=new ArrayList<>()] @TO@ TypeDeclaration@@[@Node, public]AltHobby,  @AT@ 1339 @LENGTH@ 52
---INS Modifier@@private @TO@ FieldDeclaration@@private, List<AltHobby>, [memberOf=new ArrayList<>()] @AT@ 1339 @LENGTH@ 7
---INS ParameterizedType@@List<AltHobby> @TO@ FieldDeclaration@@private, List<AltHobby>, [memberOf=new ArrayList<>()] @AT@ 1347 @LENGTH@ 14
------INS SimpleType@@List @TO@ ParameterizedType@@List<AltHobby> @AT@ 1347 @LENGTH@ 4
------INS SimpleType@@AltHobby @TO@ ParameterizedType@@List<AltHobby> @AT@ 1352 @LENGTH@ 8
---INS VariableDeclarationFragment@@memberOf=new ArrayList<>() @TO@ FieldDeclaration@@private, List<AltHobby>, [memberOf=new ArrayList<>()] @AT@ 1362 @LENGTH@ 28
------INS SimpleName@@memberOf @TO@ VariableDeclarationFragment@@memberOf=new ArrayList<>() @AT@ 1362 @LENGTH@ 8
------INS ClassInstanceCreation@@ArrayList<>[] @TO@ VariableDeclarationFragment@@memberOf=new ArrayList<>() @AT@ 1373 @LENGTH@ 17
---------INS New@@new @TO@ ClassInstanceCreation@@ArrayList<>[] @AT@ 1373 @LENGTH@ 3
---------INS ParameterizedType@@ArrayList<> @TO@ ClassInstanceCreation@@ArrayList<>[] @AT@ 1377 @LENGTH@ 11
------------INS SimpleType@@ArrayList @TO@ ParameterizedType@@ArrayList<> @AT@ 1377 @LENGTH@ 9


UPD FieldDeclaration@@private, int, [counter=0] @TO@ private, int, [counter] @AT@ 2649 @LENGTH@ 24
---UPD VariableDeclarationFragment@@counter=0 @TO@ counter @AT@ 2661 @LENGTH@ 11
------DEL NumberLiteral@@0 @AT@ 2671 @LENGTH@ 1


INS ExpressionStatement@@MethodInvocation:overrides.put(HiveConf.ConfVars.HIVE_DISTCP_DOAS_USER.varname,UserGroupInformation.getCurrentUser().getUserName()) @TO@ MethodDeclaration@@public, static, void, MethodName:classLevelSetup, Exception,  @AT@ 1930 @LENGTH@ 128
---INS MethodInvocation@@overrides.put(HiveConf.ConfVars.HIVE_DISTCP_DOAS_USER.varname,UserGroupInformation.getCurrentUser().getUserName()) @TO@ ExpressionStatement@@MethodInvocation:overrides.put(HiveConf.ConfVars.HIVE_DISTCP_DOAS_USER.varname,UserGroupInformation.getCurrentUser().getUserName()) @AT@ 1930 @LENGTH@ 127
------INS SimpleName@@Name:overrides @TO@ MethodInvocation@@overrides.put(HiveConf.ConfVars.HIVE_DISTCP_DOAS_USER.varname,UserGroupInformation.getCurrentUser().getUserName()) @AT@ 1930 @LENGTH@ 9
------INS SimpleName@@MethodName:put:[HiveConf.ConfVars.HIVE_DISTCP_DOAS_USER.varname, UserGroupInformation.getCurrentUser().getUserName()] @TO@ MethodInvocation@@overrides.put(HiveConf.ConfVars.HIVE_DISTCP_DOAS_USER.varname,UserGroupInformation.getCurrentUser().getUserName()) @AT@ 1940 @LENGTH@ 117
---------INS QualifiedName@@HiveConf.ConfVars.HIVE_DISTCP_DOAS_USER.varname @TO@ SimpleName@@MethodName:put:[HiveConf.ConfVars.HIVE_DISTCP_DOAS_USER.varname, UserGroupInformation.getCurrentUser().getUserName()] @AT@ 1944 @LENGTH@ 47
------------INS QualifiedName@@HiveConf.ConfVars.HIVE_DISTCP_DOAS_USER @TO@ QualifiedName@@HiveConf.ConfVars.HIVE_DISTCP_DOAS_USER.varname @AT@ 1944 @LENGTH@ 39
---------------INS QualifiedName@@HiveConf.ConfVars @TO@ QualifiedName@@HiveConf.ConfVars.HIVE_DISTCP_DOAS_USER @AT@ 1944 @LENGTH@ 17
------------------INS SimpleName@@HiveConf @TO@ QualifiedName@@HiveConf.ConfVars @AT@ 1944 @LENGTH@ 8
------------------INS SimpleName@@ConfVars @TO@ QualifiedName@@HiveConf.ConfVars @AT@ 1953 @LENGTH@ 8
---------------INS SimpleName@@HIVE_DISTCP_DOAS_USER @TO@ QualifiedName@@HiveConf.ConfVars.HIVE_DISTCP_DOAS_USER @AT@ 1962 @LENGTH@ 21
------------INS SimpleName@@varname @TO@ QualifiedName@@HiveConf.ConfVars.HIVE_DISTCP_DOAS_USER.varname @AT@ 1984 @LENGTH@ 7
---------INS MethodInvocation@@UserGroupInformation.getCurrentUser().getUserName() @TO@ SimpleName@@MethodName:put:[HiveConf.ConfVars.HIVE_DISTCP_DOAS_USER.varname, UserGroupInformation.getCurrentUser().getUserName()] @AT@ 2005 @LENGTH@ 51
------------INS MethodInvocation@@MethodName:getCurrentUser:[] @TO@ MethodInvocation@@UserGroupInformation.getCurrentUser().getUserName() @AT@ 2005 @LENGTH@ 37
------------INS SimpleName@@Name:UserGroupInformation @TO@ MethodInvocation@@UserGroupInformation.getCurrentUser().getUserName() @AT@ 2005 @LENGTH@ 20
------------INS SimpleName@@MethodName:getUserName:[] @TO@ MethodInvocation@@UserGroupInformation.getCurrentUser().getUserName() @AT@ 2043 @LENGTH@ 13


UPD VariableDeclarationStatement@@QueryFragmentsAndParameters.QueryFragments queryFragments=createQueryFragments(condition,sort); @TO@ QueryFragments queryFragments=createQueryFragments(condition,sort); @AT@ 9300 @LENGTH@ 98
---UPD SimpleType@@QueryFragmentsAndParameters.QueryFragments @TO@ QueryFragments @AT@ 9300 @LENGTH@ 42


UPD ReturnStatement@@InfixExpression:(parameterTypes != null) && (parameterTypes.length == 1 || (parameterTypes.length == 2 && Exchange.class.isAssignableFrom(parameterTypes[1]))) @TO@ InfixExpression:parameterTypes.length == 1 || parameterTypes.length == 2 && Exchange.class.isAssignableFrom(parameterTypes[1]) @AT@ 18393 @LENGTH@ 166
---DEL InfixExpression@@(parameterTypes != null) && (parameterTypes.length == 1 || (parameterTypes.length == 2 && Exchange.class.isAssignableFrom(parameterTypes[1]))) @AT@ 18400 @LENGTH@ 158
------DEL ParenthesizedExpression@@(parameterTypes != null) @AT@ 18400 @LENGTH@ 24
---------DEL InfixExpression@@parameterTypes != null @AT@ 18401 @LENGTH@ 22
------------DEL SimpleName@@parameterTypes @AT@ 18401 @LENGTH@ 14
------------DEL Operator@@!= @AT@ 18415 @LENGTH@ 2
------------DEL NullLiteral@@null @AT@ 18419 @LENGTH@ 4
------DEL Operator@@&& @AT@ 18424 @LENGTH@ 2
------DEL ParenthesizedExpression@@(parameterTypes.length == 1 || (parameterTypes.length == 2 && Exchange.class.isAssignableFrom(parameterTypes[1]))) @AT@ 18428 @LENGTH@ 130
---MOV InfixExpression@@parameterTypes.length == 1 || (parameterTypes.length == 2 && Exchange.class.isAssignableFrom(parameterTypes[1])) @TO@ ReturnStatement@@InfixExpression:(parameterTypes != null) && (parameterTypes.length == 1 || (parameterTypes.length == 2 && Exchange.class.isAssignableFrom(parameterTypes[1]))) @AT@ 18429 @LENGTH@ 128
------DEL ParenthesizedExpression@@(parameterTypes.length == 2 && Exchange.class.isAssignableFrom(parameterTypes[1])) @AT@ 18475 @LENGTH@ 82
------MOV InfixExpression@@parameterTypes.length == 2 && Exchange.class.isAssignableFrom(parameterTypes[1]) @TO@ InfixExpression@@parameterTypes.length == 1 || (parameterTypes.length == 2 && Exchange.class.isAssignableFrom(parameterTypes[1])) @AT@ 18476 @LENGTH@ 80


UPD ReturnStatement@@MethodInvocation:connection.invoke().from(BinaryJedis::lpos,MultiKeyPipelineBase::lpos,key,element,params).get(Collections::singletonList) @TO@ MethodInvocation:connection.invoke().from(BinaryJedis::lpos,MultiKeyPipelineBase::lpos,key,element,params).getOrElse(Collections::singletonList,Collections::emptyList) @AT@ 2322 @LENGTH@ 133
---UPD MethodInvocation@@connection.invoke().from(BinaryJedis::lpos,MultiKeyPipelineBase::lpos,key,element,params).get(Collections::singletonList) @TO@ connection.invoke().from(BinaryJedis::lpos,MultiKeyPipelineBase::lpos,key,element,params).getOrElse(Collections::singletonList,Collections::emptyList) @AT@ 2329 @LENGTH@ 125
------UPD SimpleName@@MethodName:get:[Collections::singletonList] @TO@ MethodName:getOrElse:[Collections::singletonList, Collections::emptyList] @AT@ 2423 @LENGTH@ 31


UPD FieldDeclaration@@private, Iterator<? extends E>, [lastReturned=null] @TO@ private, Iterator<? extends E>, [lastReturned] @AT@ 1794 @LENGTH@ 50
---UPD VariableDeclarationFragment@@lastReturned=null @TO@ lastReturned @AT@ 1824 @LENGTH@ 19
------DEL NullLiteral@@null @AT@ 1839 @LENGTH@ 4


UPD IfStatement@@if (delegateListener != this) {  if (delegateListener instanceof ChannelAwareMessageListener) {    ((ChannelAwareMessageListener)delegateListener).onMessage(message,channel);    return;  } else   if (delegateListener instanceof MessageListener) {    ((MessageListener)delegateListener).onMessage(message);    return;  }} @TO@ if (!delegateListener.equals(this)) {  if (delegateListener instanceof ChannelAwareMessageListener) {    ((ChannelAwareMessageListener)delegateListener).onMessage(message,channel);    return;  } else   if (delegateListener instanceof MessageListener) {    ((MessageListener)delegateListener).onMessage(message);    return;  }} @AT@ 10794 @LENGTH@ 337
---INS PrefixExpression@@!delegateListener.equals(this) @TO@ IfStatement@@if (delegateListener != this) {  if (delegateListener instanceof ChannelAwareMessageListener) {    ((ChannelAwareMessageListener)delegateListener).onMessage(message,channel);    return;  } else   if (delegateListener instanceof MessageListener) {    ((MessageListener)delegateListener).onMessage(message);    return;  }} @AT@ 10798 @LENGTH@ 30
------INS Operator@@! @TO@ PrefixExpression@@!delegateListener.equals(this) @AT@ 10798 @LENGTH@ 1
------INS MethodInvocation@@delegateListener.equals(this) @TO@ PrefixExpression@@!delegateListener.equals(this) @AT@ 10799 @LENGTH@ 29
---------INS SimpleName@@Name:delegateListener @TO@ MethodInvocation@@delegateListener.equals(this) @AT@ 10799 @LENGTH@ 16
---------INS SimpleName@@MethodName:equals:[this] @TO@ MethodInvocation@@delegateListener.equals(this) @AT@ 10816 @LENGTH@ 12
------------INS ThisExpression@@this @TO@ SimpleName@@MethodName:equals:[this] @AT@ 10823 @LENGTH@ 4
---DEL InfixExpression@@delegateListener != this @AT@ 10798 @LENGTH@ 24
------DEL SimpleName@@delegateListener @AT@ 10798 @LENGTH@ 16
------DEL Operator@@!= @AT@ 10814 @LENGTH@ 2
------DEL ThisExpression@@this @AT@ 10818 @LENGTH@ 4


UPD MethodDeclaration@@static, QueryCompactor, MethodName:getQueryCompactor, Table table, HiveConf configuration, CompactionInfo compactionInfo,  @TO@ static, QueryCompactor, MethodName:getQueryCompactor, Table table, HiveConf configuration, CompactionInfo compactionInfo, HiveException,  @AT@ 2259 @LENGTH@ 1007
---INS SimpleType@@HiveException @TO@ MethodDeclaration@@static, QueryCompactor, MethodName:getQueryCompactor, Table table, HiveConf configuration, CompactionInfo compactionInfo,  @AT@ 2437 @LENGTH@ 13
---UPD IfStatement@@if (AcidUtils.isInsertOnlyTable(table.getParameters()) && HiveConf.getBoolVar(configuration,HiveConf.ConfVars.HIVE_COMPACTOR_COMPACT_MM)) {  if (compactionInfo.isMajorCompaction()) {    return new MmMajorQueryCompactor();  } else {    return new MmMinorQueryCompactor();  }} @TO@ if (AcidUtils.isInsertOnlyTable(table.getParameters())) {  if (!configuration.getBoolVar(HiveConf.ConfVars.HIVE_COMPACTOR_COMPACT_MM)) {    throw new HiveException("Insert only compaction is disabled. Set hive.compactor.compact.insert.only to true to enable it.");  }  if (compactionInfo.isMajorCompaction()) {    return new MmMajorQueryCompactor();  } else {    return new MmMinorQueryCompactor();  }} @AT@ 2930 @LENGTH@ 314
------DEL InfixExpression@@AcidUtils.isInsertOnlyTable(table.getParameters()) && HiveConf.getBoolVar(configuration,HiveConf.ConfVars.HIVE_COMPACTOR_COMPACT_MM) @AT@ 2934 @LENGTH@ 142
---------DEL Operator@@&& @AT@ 2984 @LENGTH@ 2
------MOV MethodInvocation@@AcidUtils.isInsertOnlyTable(table.getParameters()) @TO@ IfStatement@@if (AcidUtils.isInsertOnlyTable(table.getParameters()) && HiveConf.getBoolVar(configuration,HiveConf.ConfVars.HIVE_COMPACTOR_COMPACT_MM)) {  if (compactionInfo.isMajorCompaction()) {    return new MmMajorQueryCompactor();  } else {    return new MmMinorQueryCompactor();  }} @AT@ 2934 @LENGTH@ 50
------UPD Block@@ThenBody:{  if (compactionInfo.isMajorCompaction()) {    return new MmMajorQueryCompactor();  } else {    return new MmMinorQueryCompactor();  }} @TO@ ThenBody:{  if (!configuration.getBoolVar(HiveConf.ConfVars.HIVE_COMPACTOR_COMPACT_MM)) {    throw new HiveException("Insert only compaction is disabled. Set hive.compactor.compact.insert.only to true to enable it.");  }  if (compactionInfo.isMajorCompaction()) {    return new MmMajorQueryCompactor();  } else {    return new MmMinorQueryCompactor();  }} @AT@ 3078 @LENGTH@ 166
---------INS IfStatement@@if (!configuration.getBoolVar(HiveConf.ConfVars.HIVE_COMPACTOR_COMPACT_MM)) {  throw new HiveException("Insert only compaction is disabled. Set hive.compactor.compact.insert.only to true to enable it.");} @TO@ Block@@ThenBody:{  if (compactionInfo.isMajorCompaction()) {    return new MmMajorQueryCompactor();  } else {    return new MmMinorQueryCompactor();  }} @AT@ 3077 @LENGTH@ 231
------------INS PrefixExpression@@!configuration.getBoolVar(HiveConf.ConfVars.HIVE_COMPACTOR_COMPACT_MM) @TO@ IfStatement@@if (!configuration.getBoolVar(HiveConf.ConfVars.HIVE_COMPACTOR_COMPACT_MM)) {  throw new HiveException("Insert only compaction is disabled. Set hive.compactor.compact.insert.only to true to enable it.");} @AT@ 3081 @LENGTH@ 70
---------------MOV MethodInvocation@@HiveConf.getBoolVar(configuration,HiveConf.ConfVars.HIVE_COMPACTOR_COMPACT_MM) @TO@ PrefixExpression@@!configuration.getBoolVar(HiveConf.ConfVars.HIVE_COMPACTOR_COMPACT_MM) @AT@ 2988 @LENGTH@ 88
------------------UPD SimpleName@@Name:HiveConf @TO@ Name:configuration @AT@ 2988 @LENGTH@ 8
------------------UPD SimpleName@@MethodName:getBoolVar:[configuration, HiveConf.ConfVars.HIVE_COMPACTOR_COMPACT_MM] @TO@ MethodName:getBoolVar:[HiveConf.ConfVars.HIVE_COMPACTOR_COMPACT_MM] @AT@ 3006 @LENGTH@ 70
---------------------DEL SimpleName@@configuration @AT@ 3017 @LENGTH@ 13
---------------INS Operator@@! @TO@ PrefixExpression@@!configuration.getBoolVar(HiveConf.ConfVars.HIVE_COMPACTOR_COMPACT_MM) @AT@ 3081 @LENGTH@ 1
------------INS Block@@ThenBody:{  throw new HiveException("Insert only compaction is disabled. Set hive.compactor.compact.insert.only to true to enable it.");} @TO@ IfStatement@@if (!configuration.getBoolVar(HiveConf.ConfVars.HIVE_COMPACTOR_COMPACT_MM)) {  throw new HiveException("Insert only compaction is disabled. Set hive.compactor.compact.insert.only to true to enable it.");} @AT@ 3153 @LENGTH@ 155
---------------INS ThrowStatement@@ClassInstanceCreation:new HiveException("Insert only compaction is disabled. Set hive.compactor.compact.insert.only to true to enable it.") @TO@ Block@@ThenBody:{  throw new HiveException("Insert only compaction is disabled. Set hive.compactor.compact.insert.only to true to enable it.");} @AT@ 3163 @LENGTH@ 137
------------------INS ClassInstanceCreation@@HiveException["Insert only compaction is disabled. Set hive.compactor.compact.insert.only to true to enable it."] @TO@ ThrowStatement@@ClassInstanceCreation:new HiveException("Insert only compaction is disabled. Set hive.compactor.compact.insert.only to true to enable it.") @AT@ 3169 @LENGTH@ 130
---------------------INS New@@new @TO@ ClassInstanceCreation@@HiveException["Insert only compaction is disabled. Set hive.compactor.compact.insert.only to true to enable it."] @AT@ 3169 @LENGTH@ 3
---------------------INS SimpleType@@HiveException @TO@ ClassInstanceCreation@@HiveException["Insert only compaction is disabled. Set hive.compactor.compact.insert.only to true to enable it."] @AT@ 3173 @LENGTH@ 13
---------------------INS StringLiteral@@"Insert only compaction is disabled. Set hive.compactor.compact.insert.only to true to enable it." @TO@ ClassInstanceCreation@@HiveException["Insert only compaction is disabled. Set hive.compactor.compact.insert.only to true to enable it."] @AT@ 3200 @LENGTH@ 98


UPD FieldDeclaration@@private, boolean, [trueFirst=false] @TO@ private, final, boolean, [trueFirst] @AT@ 1686 @LENGTH@ 34
---INS Modifier@@final @TO@ FieldDeclaration@@private, boolean, [trueFirst=false] @AT@ 1694 @LENGTH@ 5
---UPD VariableDeclarationFragment@@trueFirst=false @TO@ trueFirst @AT@ 1702 @LENGTH@ 17
------DEL BooleanLiteral@@false @AT@ 1714 @LENGTH@ 5


INS MethodDeclaration@@protected, String, MethodName:asTypeName, Class<?> classType,  @TO@ TypeDeclaration@@[public, abstract]DataFormatReifier, AbstractReifier @AT@ 17534 @LENGTH@ 416
---INS Modifier@@protected @TO@ MethodDeclaration@@protected, String, MethodName:asTypeName, Class<?> classType,  @AT@ 17534 @LENGTH@ 9
---INS SimpleType@@String @TO@ MethodDeclaration@@protected, String, MethodName:asTypeName, Class<?> classType,  @AT@ 17544 @LENGTH@ 6
---INS SimpleName@@MethodName:asTypeName @TO@ MethodDeclaration@@protected, String, MethodName:asTypeName, Class<?> classType,  @AT@ 17551 @LENGTH@ 10
---INS SingleVariableDeclaration@@Class<?> classType @TO@ MethodDeclaration@@protected, String, MethodName:asTypeName, Class<?> classType,  @AT@ 17562 @LENGTH@ 18
------INS ParameterizedType@@Class<?> @TO@ SingleVariableDeclaration@@Class<?> classType @AT@ 17562 @LENGTH@ 8
---------INS SimpleType@@Class @TO@ ParameterizedType@@Class<?> @AT@ 17562 @LENGTH@ 5
---------INS WildcardType@@? @TO@ ParameterizedType@@Class<?> @AT@ 17568 @LENGTH@ 1
------INS SimpleName@@classType @TO@ SingleVariableDeclaration@@Class<?> classType @AT@ 17571 @LENGTH@ 9
---INS VariableDeclarationStatement@@String type; @TO@ MethodDeclaration@@protected, String, MethodName:asTypeName, Class<?> classType,  @AT@ 17592 @LENGTH@ 12
------INS SimpleType@@String @TO@ VariableDeclarationStatement@@String type; @AT@ 17592 @LENGTH@ 6
------INS VariableDeclarationFragment@@type @TO@ VariableDeclarationStatement@@String type; @AT@ 17599 @LENGTH@ 4
---------INS SimpleName@@type @TO@ VariableDeclarationFragment@@type @AT@ 17599 @LENGTH@ 4
---INS IfStatement@@if (!classType.isPrimitive()) {  if (classType.isArray()) {    type=StringHelper.between(classType.getName(),"[L",";") + "[]";  } else {    type=classType.getName();  }} else {  type=classType.getCanonicalName();} @TO@ MethodDeclaration@@protected, String, MethodName:asTypeName, Class<?> classType,  @AT@ 17613 @LENGTH@ 309
------INS PrefixExpression@@!classType.isPrimitive() @TO@ IfStatement@@if (!classType.isPrimitive()) {  if (classType.isArray()) {    type=StringHelper.between(classType.getName(),"[L",";") + "[]";  } else {    type=classType.getName();  }} else {  type=classType.getCanonicalName();} @AT@ 17617 @LENGTH@ 24
---------INS Operator@@! @TO@ PrefixExpression@@!classType.isPrimitive() @AT@ 17617 @LENGTH@ 1
---------INS MethodInvocation@@classType.isPrimitive() @TO@ PrefixExpression@@!classType.isPrimitive() @AT@ 17618 @LENGTH@ 23
------------INS SimpleName@@Name:classType @TO@ MethodInvocation@@classType.isPrimitive() @AT@ 17618 @LENGTH@ 9
------------INS SimpleName@@MethodName:isPrimitive:[] @TO@ MethodInvocation@@classType.isPrimitive() @AT@ 17628 @LENGTH@ 13
------INS Block@@ThenBody:{  if (classType.isArray()) {    type=StringHelper.between(classType.getName(),"[L",";") + "[]";  } else {    type=classType.getName();  }} @TO@ IfStatement@@if (!classType.isPrimitive()) {  if (classType.isArray()) {    type=StringHelper.between(classType.getName(),"[L",";") + "[]";  } else {    type=classType.getName();  }} else {  type=classType.getCanonicalName();} @AT@ 17643 @LENGTH@ 213
---------INS IfStatement@@if (classType.isArray()) {  type=StringHelper.between(classType.getName(),"[L",";") + "[]";} else {  type=classType.getName();} @TO@ Block@@ThenBody:{  if (classType.isArray()) {    type=StringHelper.between(classType.getName(),"[L",";") + "[]";  } else {    type=classType.getName();  }} @AT@ 17657 @LENGTH@ 189
------------INS MethodInvocation@@classType.isArray() @TO@ IfStatement@@if (classType.isArray()) {  type=StringHelper.between(classType.getName(),"[L",";") + "[]";} else {  type=classType.getName();} @AT@ 17661 @LENGTH@ 19
---------------INS SimpleName@@Name:classType @TO@ MethodInvocation@@classType.isArray() @AT@ 17661 @LENGTH@ 9
---------------INS SimpleName@@MethodName:isArray:[] @TO@ MethodInvocation@@classType.isArray() @AT@ 17671 @LENGTH@ 9
------------INS Block@@ThenBody:{  type=StringHelper.between(classType.getName(),"[L",";") + "[]";} @TO@ IfStatement@@if (classType.isArray()) {  type=StringHelper.between(classType.getName(),"[L",";") + "[]";} else {  type=classType.getName();} @AT@ 17682 @LENGTH@ 99
---------------INS ExpressionStatement@@Assignment:type=StringHelper.between(classType.getName(),"[L",";") + "[]" @TO@ Block@@ThenBody:{  type=StringHelper.between(classType.getName(),"[L",";") + "[]";} @AT@ 17700 @LENGTH@ 67
------------------INS Assignment@@type=StringHelper.between(classType.getName(),"[L",";") + "[]" @TO@ ExpressionStatement@@Assignment:type=StringHelper.between(classType.getName(),"[L",";") + "[]" @AT@ 17700 @LENGTH@ 66
---------------------INS SimpleName@@type @TO@ Assignment@@type=StringHelper.between(classType.getName(),"[L",";") + "[]" @AT@ 17700 @LENGTH@ 4
---------------------INS Operator@@= @TO@ Assignment@@type=StringHelper.between(classType.getName(),"[L",";") + "[]" @AT@ 17704 @LENGTH@ 1
---------------------INS InfixExpression@@StringHelper.between(classType.getName(),"[L",";") + "[]" @TO@ Assignment@@type=StringHelper.between(classType.getName(),"[L",";") + "[]" @AT@ 17707 @LENGTH@ 59
------------------------INS MethodInvocation@@StringHelper.between(classType.getName(),"[L",";") @TO@ InfixExpression@@StringHelper.between(classType.getName(),"[L",";") + "[]" @AT@ 17707 @LENGTH@ 52
---------------------------INS SimpleName@@Name:StringHelper @TO@ MethodInvocation@@StringHelper.between(classType.getName(),"[L",";") @AT@ 17707 @LENGTH@ 12
---------------------------INS SimpleName@@MethodName:between:[classType.getName(), "[L", ";"] @TO@ MethodInvocation@@StringHelper.between(classType.getName(),"[L",";") @AT@ 17720 @LENGTH@ 39
------------------------------INS MethodInvocation@@classType.getName() @TO@ SimpleName@@MethodName:between:[classType.getName(), "[L", ";"] @AT@ 17728 @LENGTH@ 19
---------------------------------INS SimpleName@@Name:classType @TO@ MethodInvocation@@classType.getName() @AT@ 17728 @LENGTH@ 9
---------------------------------INS SimpleName@@MethodName:getName:[] @TO@ MethodInvocation@@classType.getName() @AT@ 17738 @LENGTH@ 9
------------------------------INS StringLiteral@@"[L" @TO@ SimpleName@@MethodName:between:[classType.getName(), "[L", ";"] @AT@ 17749 @LENGTH@ 4
------------------------------INS StringLiteral@@";" @TO@ SimpleName@@MethodName:between:[classType.getName(), "[L", ";"] @AT@ 17755 @LENGTH@ 3
------------------------INS Operator@@+ @TO@ InfixExpression@@StringHelper.between(classType.getName(),"[L",";") + "[]" @AT@ 17759 @LENGTH@ 1
------------------------INS StringLiteral@@"[]" @TO@ InfixExpression@@StringHelper.between(classType.getName(),"[L",";") + "[]" @AT@ 17762 @LENGTH@ 4
------------INS Block@@ElseBody:{  type=classType.getName();} @TO@ IfStatement@@if (classType.isArray()) {  type=StringHelper.between(classType.getName(),"[L",";") + "[]";} else {  type=classType.getName();} @AT@ 17787 @LENGTH@ 59
---------------INS ExpressionStatement@@Assignment:type=classType.getName() @TO@ Block@@ElseBody:{  type=classType.getName();} @AT@ 17805 @LENGTH@ 27
------------------INS Assignment@@type=classType.getName() @TO@ ExpressionStatement@@Assignment:type=classType.getName() @AT@ 17805 @LENGTH@ 26
---------------------INS SimpleName@@type @TO@ Assignment@@type=classType.getName() @AT@ 17805 @LENGTH@ 4
---------------------INS Operator@@= @TO@ Assignment@@type=classType.getName() @AT@ 17809 @LENGTH@ 1
---------------------INS MethodInvocation@@classType.getName() @TO@ Assignment@@type=classType.getName() @AT@ 17812 @LENGTH@ 19
------------------------INS SimpleName@@Name:classType @TO@ MethodInvocation@@classType.getName() @AT@ 17812 @LENGTH@ 9
------------------------INS SimpleName@@MethodName:getName:[] @TO@ MethodInvocation@@classType.getName() @AT@ 17822 @LENGTH@ 9
------INS Block@@ElseBody:{  type=classType.getCanonicalName();} @TO@ IfStatement@@if (!classType.isPrimitive()) {  if (classType.isArray()) {    type=StringHelper.between(classType.getName(),"[L",";") + "[]";  } else {    type=classType.getName();  }} else {  type=classType.getCanonicalName();} @AT@ 17862 @LENGTH@ 60
---------INS ExpressionStatement@@Assignment:type=classType.getCanonicalName() @TO@ Block@@ElseBody:{  type=classType.getCanonicalName();} @AT@ 17876 @LENGTH@ 36
------------INS Assignment@@type=classType.getCanonicalName() @TO@ ExpressionStatement@@Assignment:type=classType.getCanonicalName() @AT@ 17876 @LENGTH@ 35
---------------INS SimpleName@@type @TO@ Assignment@@type=classType.getCanonicalName() @AT@ 17876 @LENGTH@ 4
---------------INS Operator@@= @TO@ Assignment@@type=classType.getCanonicalName() @AT@ 17880 @LENGTH@ 1
---------------INS MethodInvocation@@classType.getCanonicalName() @TO@ Assignment@@type=classType.getCanonicalName() @AT@ 17883 @LENGTH@ 28
------------------INS SimpleName@@Name:classType @TO@ MethodInvocation@@classType.getCanonicalName() @AT@ 17883 @LENGTH@ 9
------------------INS SimpleName@@MethodName:getCanonicalName:[] @TO@ MethodInvocation@@classType.getCanonicalName() @AT@ 17893 @LENGTH@ 18
---INS ReturnStatement@@SimpleName:type @TO@ MethodDeclaration@@protected, String, MethodName:asTypeName, Class<?> classType,  @AT@ 17932 @LENGTH@ 12
------INS SimpleName@@type @TO@ ReturnStatement@@SimpleName:type @AT@ 17939 @LENGTH@ 4


INS IfStatement@@if (hasNext && !isParallelProcessing()) {  return true;} else {  return false;} @TO@ MethodDeclaration@@boolean, MethodName:doRun, Exception,  @AT@ 24143 @LENGTH@ 135
---INS InfixExpression@@hasNext && !isParallelProcessing() @TO@ IfStatement@@if (hasNext && !isParallelProcessing()) {  return true;} else {  return false;} @AT@ 24147 @LENGTH@ 34
------INS SimpleName@@hasNext @TO@ InfixExpression@@hasNext && !isParallelProcessing() @AT@ 24147 @LENGTH@ 7
------INS Operator@@&& @TO@ InfixExpression@@hasNext && !isParallelProcessing() @AT@ 24154 @LENGTH@ 2
------INS PrefixExpression@@!isParallelProcessing() @TO@ InfixExpression@@hasNext && !isParallelProcessing() @AT@ 24158 @LENGTH@ 23
---------INS Operator@@! @TO@ PrefixExpression@@!isParallelProcessing() @AT@ 24158 @LENGTH@ 1
---------INS MethodInvocation@@MethodName:isParallelProcessing:[] @TO@ PrefixExpression@@!isParallelProcessing() @AT@ 24159 @LENGTH@ 22
---INS Block@@ThenBody:{  return true;} @TO@ IfStatement@@if (hasNext && !isParallelProcessing()) {  return true;} else {  return false;} @AT@ 24183 @LENGTH@ 44
------INS ReturnStatement@@BooleanLiteral:true @TO@ Block@@ThenBody:{  return true;} @AT@ 24201 @LENGTH@ 12
---------MOV BooleanLiteral@@true @TO@ ReturnStatement@@BooleanLiteral:true @AT@ 24150 @LENGTH@ 4
---INS Block@@ElseBody:{  return false;} @TO@ IfStatement@@if (hasNext && !isParallelProcessing()) {  return true;} else {  return false;} @AT@ 24233 @LENGTH@ 45
------INS ReturnStatement@@BooleanLiteral:false @TO@ Block@@ElseBody:{  return false;} @AT@ 24251 @LENGTH@ 13
---------INS BooleanLiteral@@false @TO@ ReturnStatement@@BooleanLiteral:false @AT@ 24258 @LENGTH@ 5


INS MethodDeclaration@@Collection<RelationshipDescription>, MethodName:getRelationshipsInHierarchy, Predicate<String> propertyPredicate,  @TO@ TypeDeclaration@@[@API(status=API.Status.STABLE,since="6.0"), public]NodeDescription,  @AT@ 3751 @LENGTH@ 65
---INS ParameterizedType@@Collection<RelationshipDescription> @TO@ MethodDeclaration@@Collection<RelationshipDescription>, MethodName:getRelationshipsInHierarchy, Predicate<String> propertyPredicate,  @AT@ 3715 @LENGTH@ 35
------INS SimpleType@@Collection @TO@ ParameterizedType@@Collection<RelationshipDescription> @AT@ 3715 @LENGTH@ 10
------INS SimpleType@@RelationshipDescription @TO@ ParameterizedType@@Collection<RelationshipDescription> @AT@ 3726 @LENGTH@ 23
---INS SimpleName@@MethodName:getRelationshipsInHierarchy @TO@ MethodDeclaration@@Collection<RelationshipDescription>, MethodName:getRelationshipsInHierarchy, Predicate<String> propertyPredicate,  @AT@ 3751 @LENGTH@ 27
---INS SingleVariableDeclaration@@Predicate<String> propertyPredicate @TO@ MethodDeclaration@@Collection<RelationshipDescription>, MethodName:getRelationshipsInHierarchy, Predicate<String> propertyPredicate,  @AT@ 3779 @LENGTH@ 35
------INS ParameterizedType@@Predicate<String> @TO@ SingleVariableDeclaration@@Predicate<String> propertyPredicate @AT@ 3779 @LENGTH@ 17
---------INS SimpleType@@Predicate @TO@ ParameterizedType@@Predicate<String> @AT@ 3779 @LENGTH@ 9
---------INS SimpleType@@String @TO@ ParameterizedType@@Predicate<String> @AT@ 3789 @LENGTH@ 6
------INS SimpleName@@propertyPredicate @TO@ SingleVariableDeclaration@@Predicate<String> propertyPredicate @AT@ 3797 @LENGTH@ 17


UPD ExpressionStatement@@MethodInvocation:routeTemplate("myTemplate").templateParameter("foo").templateParameter("bar").templateBean("myBar",Processor.class,(ctx) -> (Processor)ex -> ex.getMessage().setBody("Builder" + counter.incrementAndGet() + " "+ ex.getMessage().getBody())).from("direct:{{foo}}").to("bean:{{bar}}") @TO@ MethodInvocation:routeTemplate("myTemplate").templateParameter("foo").templateParameter("bar").templateBean("myBar",Processor.class,ctx -> (Processor)ex -> ex.getMessage().setBody("Builder" + counter.incrementAndGet() + " "+ ex.getMessage().getBody())).from("direct:{{foo}}").to("bean:{{bar}}") @AT@ 12549 @LENGTH@ 828
---UPD MethodInvocation@@routeTemplate("myTemplate").templateParameter("foo").templateParameter("bar").templateBean("myBar",Processor.class,(ctx) -> (Processor)ex -> ex.getMessage().setBody("Builder" + counter.incrementAndGet() + " "+ ex.getMessage().getBody())).from("direct:{{foo}}").to("bean:{{bar}}") @TO@ routeTemplate("myTemplate").templateParameter("foo").templateParameter("bar").templateBean("myBar",Processor.class,ctx -> (Processor)ex -> ex.getMessage().setBody("Builder" + counter.incrementAndGet() + " "+ ex.getMessage().getBody())).from("direct:{{foo}}").to("bean:{{bar}}") @AT@ 12549 @LENGTH@ 827
------UPD MethodInvocation@@MethodName:templateBean:["myBar", Processor.class, (ctx) -> (Processor)ex -> ex.getMessage().setBody("Builder" + counter.incrementAndGet() + " "+ ex.getMessage().getBody())] @TO@ MethodName:templateBean:["myBar", Processor.class, ctx -> (Processor)ex -> ex.getMessage().setBody("Builder" + counter.incrementAndGet() + " "+ ex.getMessage().getBody())] @AT@ 12549 @LENGTH@ 735
---------UPD LambdaExpression@@(ctx) -> (Processor)ex -> ex.getMessage().setBody("Builder" + counter.incrementAndGet() + " "+ ex.getMessage().getBody()) @TO@ ctx -> (Processor)ex -> ex.getMessage().setBody("Builder" + counter.incrementAndGet() + " "+ ex.getMessage().getBody()) @AT@ 12691 @LENGTH@ 592


UPD FieldDeclaration@@private, boolean, [canRemove=false] @TO@ private, boolean, [canRemove] @AT@ 1604 @LENGTH@ 34
---UPD VariableDeclarationFragment@@canRemove=false @TO@ canRemove @AT@ 1620 @LENGTH@ 17
------DEL BooleanLiteral@@false @AT@ 1632 @LENGTH@ 5


UPD VariableDeclarationStatement@@Instant expiresAt=now.minus(Duration.ofMinutes(1)); @TO@ Instant expiresAt=now.plus(Duration.ofMinutes(1)); @AT@ 9523 @LENGTH@ 53
---UPD VariableDeclarationFragment@@expiresAt=now.minus(Duration.ofMinutes(1)) @TO@ expiresAt=now.plus(Duration.ofMinutes(1)) @AT@ 9531 @LENGTH@ 44
------UPD MethodInvocation@@now.minus(Duration.ofMinutes(1)) @TO@ now.plus(Duration.ofMinutes(1)) @AT@ 9543 @LENGTH@ 32
---------UPD SimpleName@@MethodName:minus:[Duration.ofMinutes(1)] @TO@ MethodName:plus:[Duration.ofMinutes(1)] @AT@ 9547 @LENGTH@ 28


INS MethodDeclaration@@public, void, MethodName:answersToHalFormsRequests, Exception,  @TO@ TypeDeclaration@@[@Transactional, @ContextConfiguration(classes=JpaRepositoryConfig.class,initializers=JpaWebTests.JpaContextInitializer.class), public]JpaWebTests, CommonWebTests @AT@ 28963 @LENGTH@ 158
---INS Modifier@@public @TO@ MethodDeclaration@@public, void, MethodName:answersToHalFormsRequests, Exception,  @AT@ 28963 @LENGTH@ 6
---INS PrimitiveType@@void @TO@ MethodDeclaration@@public, void, MethodName:answersToHalFormsRequests, Exception,  @AT@ 28970 @LENGTH@ 4
---INS SimpleName@@MethodName:answersToHalFormsRequests @TO@ MethodDeclaration@@public, void, MethodName:answersToHalFormsRequests, Exception,  @AT@ 28975 @LENGTH@ 25
---INS SimpleType@@Exception @TO@ MethodDeclaration@@public, void, MethodName:answersToHalFormsRequests, Exception,  @AT@ 29010 @LENGTH@ 9
---INS ExpressionStatement@@MethodInvocation:mvc.perform(get("/").accept(MediaTypes.HAL_FORMS_JSON)).andExpect(status().isOk()) @TO@ MethodDeclaration@@public, void, MethodName:answersToHalFormsRequests, Exception,  @AT@ 29025 @LENGTH@ 93
------INS MethodInvocation@@mvc.perform(get("/").accept(MediaTypes.HAL_FORMS_JSON)).andExpect(status().isOk()) @TO@ ExpressionStatement@@MethodInvocation:mvc.perform(get("/").accept(MediaTypes.HAL_FORMS_JSON)).andExpect(status().isOk()) @AT@ 29025 @LENGTH@ 92
---------INS MethodInvocation@@MethodName:perform:[get("/").accept(MediaTypes.HAL_FORMS_JSON)] @TO@ MethodInvocation@@mvc.perform(get("/").accept(MediaTypes.HAL_FORMS_JSON)).andExpect(status().isOk()) @AT@ 29025 @LENGTH@ 60
------------INS MethodInvocation@@get("/").accept(MediaTypes.HAL_FORMS_JSON) @TO@ MethodInvocation@@MethodName:perform:[get("/").accept(MediaTypes.HAL_FORMS_JSON)] @AT@ 29037 @LENGTH@ 47
---------------INS MethodInvocation@@MethodName:get:["/"] @TO@ MethodInvocation@@get("/").accept(MediaTypes.HAL_FORMS_JSON) @AT@ 29037 @LENGTH@ 8
------------------INS StringLiteral@@"/" @TO@ MethodInvocation@@MethodName:get:["/"] @AT@ 29041 @LENGTH@ 3
---------------INS SimpleName@@MethodName:accept:[MediaTypes.HAL_FORMS_JSON] @TO@ MethodInvocation@@get("/").accept(MediaTypes.HAL_FORMS_JSON) @AT@ 29051 @LENGTH@ 33
------------------INS QualifiedName@@MediaTypes.HAL_FORMS_JSON @TO@ SimpleName@@MethodName:accept:[MediaTypes.HAL_FORMS_JSON] @AT@ 29058 @LENGTH@ 25
---------------------INS SimpleName@@MediaTypes @TO@ QualifiedName@@MediaTypes.HAL_FORMS_JSON @AT@ 29058 @LENGTH@ 10
---------------------INS SimpleName@@HAL_FORMS_JSON @TO@ QualifiedName@@MediaTypes.HAL_FORMS_JSON @AT@ 29069 @LENGTH@ 14
---------INS SimpleName@@Name:mvc @TO@ MethodInvocation@@mvc.perform(get("/").accept(MediaTypes.HAL_FORMS_JSON)).andExpect(status().isOk()) @AT@ 29025 @LENGTH@ 3
---------INS SimpleName@@MethodName:andExpect:[status().isOk()] @TO@ MethodInvocation@@mvc.perform(get("/").accept(MediaTypes.HAL_FORMS_JSON)).andExpect(status().isOk()) @AT@ 29091 @LENGTH@ 26
------------INS MethodInvocation@@status().isOk() @TO@ SimpleName@@MethodName:andExpect:[status().isOk()] @AT@ 29101 @LENGTH@ 15
---------------INS MethodInvocation@@MethodName:status:[] @TO@ MethodInvocation@@status().isOk() @AT@ 29101 @LENGTH@ 8
---------------INS SimpleName@@MethodName:isOk:[] @TO@ MethodInvocation@@status().isOk() @AT@ 29110 @LENGTH@ 6


UPD ExpressionStatement@@MethodInvocation:maven.setUrl(new File(project.getRootDir(),"publications/repos")) @TO@ MethodInvocation:maven.setUrl(new File(project.getRootProject().getBuildDir(),"publications/repos")) @AT@ 907 @LENGTH@ 67
---UPD MethodInvocation@@maven.setUrl(new File(project.getRootDir(),"publications/repos")) @TO@ maven.setUrl(new File(project.getRootProject().getBuildDir(),"publications/repos")) @AT@ 907 @LENGTH@ 66
------UPD SimpleName@@MethodName:setUrl:[new File(project.getRootDir(),"publications/repos")] @TO@ MethodName:setUrl:[new File(project.getRootProject().getBuildDir(),"publications/repos")] @AT@ 913 @LENGTH@ 60
---------UPD ClassInstanceCreation@@File[project.getRootDir(), "publications/repos"] @TO@ File[project.getRootProject().getBuildDir(), "publications/repos"] @AT@ 920 @LENGTH@ 52
------------UPD MethodInvocation@@project.getRootDir() @TO@ project.getRootProject().getBuildDir() @AT@ 929 @LENGTH@ 20
---------------INS MethodInvocation@@MethodName:getRootProject:[] @TO@ MethodInvocation@@project.getRootDir() @AT@ 929 @LENGTH@ 24
---------------UPD SimpleName@@MethodName:getRootDir:[] @TO@ MethodName:getBuildDir:[] @AT@ 937 @LENGTH@ 12


UPD ExpressionStatement@@MethodInvocation:LOG.warn("Error rendering Swagger API due " + e.getMessage(),e) @TO@ MethodInvocation:LOG.warn("Error rendering Swagger API due {}",e.getMessage(),e) @AT@ 5239 @LENGTH@ 65
---UPD MethodInvocation@@LOG.warn("Error rendering Swagger API due " + e.getMessage(),e) @TO@ LOG.warn("Error rendering Swagger API due {}",e.getMessage(),e) @AT@ 5239 @LENGTH@ 64
------UPD SimpleName@@MethodName:warn:["Error rendering Swagger API due " + e.getMessage(), e] @TO@ MethodName:warn:["Error rendering Swagger API due {}", e.getMessage(), e] @AT@ 5243 @LENGTH@ 60
---------DEL InfixExpression@@"Error rendering Swagger API due " + e.getMessage() @AT@ 5248 @LENGTH@ 51
------------DEL StringLiteral@@"Error rendering Swagger API due " @AT@ 5248 @LENGTH@ 34
------------DEL Operator@@+ @AT@ 5282 @LENGTH@ 1
------------DEL MethodInvocation@@e.getMessage() @AT@ 5285 @LENGTH@ 14
---------INS StringLiteral@@"Error rendering Swagger API due {}" @TO@ SimpleName@@MethodName:warn:["Error rendering Swagger API due " + e.getMessage(), e] @AT@ 5248 @LENGTH@ 36
---------INS MethodInvocation@@e.getMessage() @TO@ SimpleName@@MethodName:warn:["Error rendering Swagger API due " + e.getMessage(), e] @AT@ 5286 @LENGTH@ 14
------------MOV SimpleName@@Name:e @TO@ MethodInvocation@@e.getMessage() @AT@ 5285 @LENGTH@ 1
------------MOV SimpleName@@MethodName:getMessage:[] @TO@ MethodInvocation@@e.getMessage() @AT@ 5287 @LENGTH@ 12


UPD MethodDeclaration@@public, void, MethodName:testCOMPRESS335, Exception,  @TO@ public, void, MethodName:testCOMPRESS_335, Exception,  @AT@ 2238 @LENGTH@ 213
---UPD SimpleName@@MethodName:testCOMPRESS335 @TO@ MethodName:testCOMPRESS_335 @AT@ 2250 @LENGTH@ 15
---DEL VariableDeclarationStatement@@final ArchiveInputStream tar=getStreamFor("COMPRESS-335.tar"); @AT@ 2295 @LENGTH@ 64
------DEL Modifier@@final @AT@ 2295 @LENGTH@ 5
------DEL SimpleType@@ArchiveInputStream @AT@ 2301 @LENGTH@ 18
---INS TryStatement@@try (final ArchiveInputStream tar=getStreamFor("COMPRESS-335.tar")){  assertNotNull(tar);  assertTrue(tar instanceof TarArchiveInputStream);}  @TO@ MethodDeclaration@@public, void, MethodName:testCOMPRESS335, Exception,  @AT@ 2297 @LENGTH@ 175
------INS VariableDeclarationExpression@@final ArchiveInputStream tar=getStreamFor("COMPRESS-335.tar") @TO@ TryStatement@@try (final ArchiveInputStream tar=getStreamFor("COMPRESS-335.tar")){  assertNotNull(tar);  assertTrue(tar instanceof TarArchiveInputStream);}  @AT@ 2302 @LENGTH@ 63
---------INS Modifier@@final @TO@ VariableDeclarationExpression@@final ArchiveInputStream tar=getStreamFor("COMPRESS-335.tar") @AT@ 2302 @LENGTH@ 5
---------INS SimpleType@@ArchiveInputStream @TO@ VariableDeclarationExpression@@final ArchiveInputStream tar=getStreamFor("COMPRESS-335.tar") @AT@ 2308 @LENGTH@ 18
---------MOV VariableDeclarationFragment@@tar=getStreamFor("COMPRESS-335.tar") @TO@ VariableDeclarationExpression@@final ArchiveInputStream tar=getStreamFor("COMPRESS-335.tar") @AT@ 2320 @LENGTH@ 38
------MOV ExpressionStatement@@MethodInvocation:assertNotNull(tar) @TO@ TryStatement@@try (final ArchiveInputStream tar=getStreamFor("COMPRESS-335.tar")){  assertNotNull(tar);  assertTrue(tar instanceof TarArchiveInputStream);}  @AT@ 2368 @LENGTH@ 19
------MOV ExpressionStatement@@MethodInvocation:assertTrue(tar instanceof TarArchiveInputStream) @TO@ TryStatement@@try (final ArchiveInputStream tar=getStreamFor("COMPRESS-335.tar")){  assertNotNull(tar);  assertTrue(tar instanceof TarArchiveInputStream);}  @AT@ 2396 @LENGTH@ 49


UPD IfStatement@@if (configuration.getConnectionFactory() == null) {  configuration.setConnectionFactory(getConnectionFactory());} @TO@ if (configuration.getConnectionFactory() == null) {  if (connectionFactory == null) {    connectionFactory=new GoogleBigQueryConnectionFactory();  }  configuration.setConnectionFactory(getConnectionFactory());} @AT@ 2094 @LENGTH@ 133
---INS Block@@ThenBody:{  if (connectionFactory == null) {    connectionFactory=new GoogleBigQueryConnectionFactory();  }  configuration.setConnectionFactory(getConnectionFactory());} @TO@ IfStatement@@if (configuration.getConnectionFactory() == null) {  configuration.setConnectionFactory(getConnectionFactory());} @AT@ 2144 @LENGTH@ 217
------MOV ExpressionStatement@@MethodInvocation:configuration.setConnectionFactory(getConnectionFactory()) @TO@ Block@@ThenBody:{  if (connectionFactory == null) {    connectionFactory=new GoogleBigQueryConnectionFactory();  }  configuration.setConnectionFactory(getConnectionFactory());} @AT@ 2158 @LENGTH@ 59
------MOV IfStatement@@if (connectionFactory == null) {  connectionFactory=new GoogleBigQueryConnectionFactory();} @TO@ Block@@ThenBody:{  if (connectionFactory == null) {    connectionFactory=new GoogleBigQueryConnectionFactory();  }  configuration.setConnectionFactory(getConnectionFactory());} @AT@ 2691 @LENGTH@ 113


UPD MethodDeclaration@@public, void, MethodName:messageAckOnExceptionWhereNoAutoAckTest, Exception,  @TO@ public, void, MethodName:zRunLstMessageAckOnExceptionWhereNoAutoAckTest, Exception,  @AT@ 12428 @LENGTH@ 1016
---UPD SimpleName@@MethodName:messageAckOnExceptionWhereNoAutoAckTest @TO@ MethodName:zRunLstMessageAckOnExceptionWhereNoAutoAckTest @AT@ 12440 @LENGTH@ 39
---INS VariableDeclarationStatement@@Map<String,Object> args=new HashMap<>(); @TO@ MethodDeclaration@@public, void, MethodName:messageAckOnExceptionWhereNoAutoAckTest, Exception,  @AT@ 13473 @LENGTH@ 43
------INS ParameterizedType@@Map<String,Object> @TO@ VariableDeclarationStatement@@Map<String,Object> args=new HashMap<>(); @AT@ 13473 @LENGTH@ 19
---------INS SimpleType@@Map @TO@ ParameterizedType@@Map<String,Object> @AT@ 13473 @LENGTH@ 3
---------INS SimpleType@@String @TO@ ParameterizedType@@Map<String,Object> @AT@ 13477 @LENGTH@ 6
---------INS SimpleType@@Object @TO@ ParameterizedType@@Map<String,Object> @AT@ 13485 @LENGTH@ 6
------INS VariableDeclarationFragment@@args=new HashMap<>() @TO@ VariableDeclarationStatement@@Map<String,Object> args=new HashMap<>(); @AT@ 13493 @LENGTH@ 22
---------INS SimpleName@@args @TO@ VariableDeclarationFragment@@args=new HashMap<>() @AT@ 13493 @LENGTH@ 4
---------INS ClassInstanceCreation@@HashMap<>[] @TO@ VariableDeclarationFragment@@args=new HashMap<>() @AT@ 13500 @LENGTH@ 15
------------INS New@@new @TO@ ClassInstanceCreation@@HashMap<>[] @AT@ 13500 @LENGTH@ 3
------------INS ParameterizedType@@HashMap<> @TO@ ClassInstanceCreation@@HashMap<>[] @AT@ 13504 @LENGTH@ 9
---------------INS SimpleType@@HashMap @TO@ ParameterizedType@@HashMap<> @AT@ 13504 @LENGTH@ 7
---INS ExpressionStatement@@MethodInvocation:args.put(RabbitMQConstants.RABBITMQ_QUEUE_TTL_KEY,60000) @TO@ MethodDeclaration@@public, void, MethodName:messageAckOnExceptionWhereNoAutoAckTest, Exception,  @AT@ 13525 @LENGTH@ 58
------INS MethodInvocation@@args.put(RabbitMQConstants.RABBITMQ_QUEUE_TTL_KEY,60000) @TO@ ExpressionStatement@@MethodInvocation:args.put(RabbitMQConstants.RABBITMQ_QUEUE_TTL_KEY,60000) @AT@ 13525 @LENGTH@ 57
---------INS SimpleName@@Name:args @TO@ MethodInvocation@@args.put(RabbitMQConstants.RABBITMQ_QUEUE_TTL_KEY,60000) @AT@ 13525 @LENGTH@ 4
---------INS SimpleName@@MethodName:put:[RabbitMQConstants.RABBITMQ_QUEUE_TTL_KEY, 60000] @TO@ MethodInvocation@@args.put(RabbitMQConstants.RABBITMQ_QUEUE_TTL_KEY,60000) @AT@ 13530 @LENGTH@ 52
------------INS QualifiedName@@RabbitMQConstants.RABBITMQ_QUEUE_TTL_KEY @TO@ SimpleName@@MethodName:put:[RabbitMQConstants.RABBITMQ_QUEUE_TTL_KEY, 60000] @AT@ 13534 @LENGTH@ 40
---------------INS SimpleName@@RabbitMQConstants @TO@ QualifiedName@@RabbitMQConstants.RABBITMQ_QUEUE_TTL_KEY @AT@ 13534 @LENGTH@ 17
---------------INS SimpleName@@RABBITMQ_QUEUE_TTL_KEY @TO@ QualifiedName@@RabbitMQConstants.RABBITMQ_QUEUE_TTL_KEY @AT@ 13552 @LENGTH@ 22
------------INS NumberLiteral@@60000 @TO@ SimpleName@@MethodName:put:[RabbitMQConstants.RABBITMQ_QUEUE_TTL_KEY, 60000] @AT@ 13576 @LENGTH@ 5
---INS ExpressionStatement@@MethodInvocation:context.getRegistry().bind("args",args) @TO@ MethodDeclaration@@public, void, MethodName:messageAckOnExceptionWhereNoAutoAckTest, Exception,  @AT@ 13592 @LENGTH@ 41
------INS MethodInvocation@@context.getRegistry().bind("args",args) @TO@ ExpressionStatement@@MethodInvocation:context.getRegistry().bind("args",args) @AT@ 13592 @LENGTH@ 40
---------INS MethodInvocation@@MethodName:getRegistry:[] @TO@ MethodInvocation@@context.getRegistry().bind("args",args) @AT@ 13592 @LENGTH@ 21
---------INS SimpleName@@Name:context @TO@ MethodInvocation@@context.getRegistry().bind("args",args) @AT@ 13592 @LENGTH@ 7
---------INS SimpleName@@MethodName:bind:["args", args] @TO@ MethodInvocation@@context.getRegistry().bind("args",args) @AT@ 13614 @LENGTH@ 18
------------INS StringLiteral@@"args" @TO@ SimpleName@@MethodName:bind:["args", args] @AT@ 13619 @LENGTH@ 6
------------INS SimpleName@@args @TO@ SimpleName@@MethodName:bind:["args", args] @AT@ 13627 @LENGTH@ 4
